commented;modifiers;parameterAmount;loc;comment;code
false;static;1;3;;static boolean isSigned(EsType type) {     return SIGNED_TYPE.contains(type). }
false;static;1;3;;static Class<?> classOf(EsType type) {     return TYPE_TO_CLASS.get(type). }
false;static;1;9;;static SQLType asSqlType(int sqlType) throws SQLException {     for (JDBCType jdbcType : JDBCType.class.getEnumConstants()) {         if (sqlType == jdbcType.getVendorTypeNumber().intValue()) {             return jdbcType.         }     }     // fallback to DataType     return of(sqlType). }
false;static;1;10;;static EsType of(SQLType sqlType) throws SQLException {     if (sqlType instanceof EsType) {         return (EsType) sqlType.     }     EsType dataType = SQL_TO_TYPE.get(Integer.valueOf(sqlType.getVendorTypeNumber())).     if (dataType == null) {         throw new SQLFeatureNotSupportedException("Unsupported SQL type [" + sqlType + "]").     }     return dataType. }
false;static;1;7;;static EsType of(int sqlType) throws SQLException {     EsType dataType = SQL_TO_TYPE.get(Integer.valueOf(sqlType)).     if (dataType == null) {         throw new SQLFeatureNotSupportedException("Unsupported SQL type [" + sqlType + "]").     }     return dataType. }
false;static;1;7;;static EsType of(String name) throws SQLException {     EsType dataType = ENUM_NAME_TO_TYPE.get(name).     if (dataType == null) {         throw new SQLFeatureNotSupportedException("Unsupported Data type [" + name + "]").     }     return dataType. }
false;static;1;3;;static boolean isString(EsType dataType) {     return dataType == EsType.KEYWORD || dataType == EsType.TEXT. }
false;static;1;15;;static EsType of(Class<? extends Object> clazz) throws SQLException {     EsType dataType = CLASS_TO_TYPE.get(clazz).     if (dataType == null) {         // fall-back to iteration for checking class hierarchies (in case of custom objects)         for (Entry<Class<?>, EsType> e : CLASS_TO_TYPE.entrySet()) {             if (e.getKey().isAssignableFrom(clazz)) {                 return e.getValue().             }         }         throw new SQLFeatureNotSupportedException("Objects of type [" + clazz.getName() + "] are not supported").     }     return dataType. }
