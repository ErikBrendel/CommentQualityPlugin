commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override public boolean execute() throws SQLException {     checkOpen().     executeQuery().     return true. }
false;public;0;6;;@Override public ResultSet executeQuery() throws SQLException {     checkOpen().     initResultSet(query.sql(), query.params()).     return rs. }
false;public;0;4;;@Override public int executeUpdate() throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;private;3;3;;private void setParam(int parameterIndex, Object value, int sqlType) throws SQLException {     setParam(parameterIndex, value, TypeUtils.of(sqlType)). }
false;private;3;10;;private void setParam(int parameterIndex, Object value, EsType type) throws SQLException {     checkOpen().     if (parameterIndex < 0 || parameterIndex > query.paramCount()) {         throw new SQLException("Invalid parameter index [ " + parameterIndex + ". needs to be between 1 and [" + query.paramCount() + "]").     }     query.setParam(parameterIndex, value, type). }
false;public;2;4;;@Override public void setNull(int parameterIndex, int sqlType) throws SQLException {     setParam(parameterIndex, null, sqlType). }
false;public;2;4;;@Override public void setBoolean(int parameterIndex, boolean x) throws SQLException {     setObject(parameterIndex, x, Types.BOOLEAN). }
false;public;2;4;;@Override public void setByte(int parameterIndex, byte x) throws SQLException {     setObject(parameterIndex, x, Types.TINYINT). }
false;public;2;4;;@Override public void setShort(int parameterIndex, short x) throws SQLException {     setObject(parameterIndex, x, Types.SMALLINT). }
false;public;2;4;;@Override public void setInt(int parameterIndex, int x) throws SQLException {     setObject(parameterIndex, x, Types.INTEGER). }
false;public;2;4;;@Override public void setLong(int parameterIndex, long x) throws SQLException {     setObject(parameterIndex, x, Types.BIGINT). }
false;public;2;4;;@Override public void setFloat(int parameterIndex, float x) throws SQLException {     setObject(parameterIndex, x, Types.REAL). }
false;public;2;4;;@Override public void setDouble(int parameterIndex, double x) throws SQLException {     setObject(parameterIndex, x, Types.DOUBLE). }
false;public;2;4;;@Override public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException {     setObject(parameterIndex, x, Types.BIGINT). }
false;public;2;4;;@Override public void setString(int parameterIndex, String x) throws SQLException {     setObject(parameterIndex, x, Types.VARCHAR). }
false;public;2;4;;@Override public void setBytes(int parameterIndex, byte[] x) throws SQLException {     setObject(parameterIndex, x, Types.VARBINARY). }
false;public;2;4;;@Override public void setDate(int parameterIndex, Date x) throws SQLException {     setObject(parameterIndex, x, Types.TIMESTAMP). }
false;public;2;4;;@Override public void setTime(int parameterIndex, Time x) throws SQLException {     setObject(parameterIndex, x, Types.TIMESTAMP). }
false;public;2;4;;@Override public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException {     setObject(parameterIndex, x, Types.TIMESTAMP). }
false;public;3;4;;@Override public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException {     throw new SQLFeatureNotSupportedException("AsciiStream not supported"). }
false;public;3;5;;@Override @Deprecated public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException {     throw new SQLFeatureNotSupportedException("UnicodeStream not supported"). }
false;public;3;4;;@Override public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException {     throw new SQLFeatureNotSupportedException("BinaryStream not supported"). }
false;public;0;5;;@Override public void clearParameters() throws SQLException {     checkOpen().     query.clearParams(). }
false;public;3;5;;@Override public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException {     // the value of scaleOrLength parameter doesn't matter, as it's not used in the called method below     setObject(parameterIndex, x, targetSqlType, 0). }
false;public;3;4;;@Override public void setObject(int parameterIndex, Object x, SQLType targetSqlType) throws SQLException {     setObject(parameterIndex, x, targetSqlType, 0). }
false;public;2;13;;@Override public void setObject(int parameterIndex, Object x) throws SQLException {     if (x == null) {         setParam(parameterIndex, null, EsType.NULL).         return.     }     // check also here the unsupported types so that any unsupported interfaces ({@code java.sql.Struct},     // {@code java.sql.Array} etc) will generate the correct exception message. Otherwise, the method call     // {@code TypeConverter.fromJavaToJDBC(x.getClass())} will report the implementing class as not being supported.     checkKnownUnsupportedTypes(x).     setObject(parameterIndex, x, TypeUtils.of(x.getClass()).getVendorTypeNumber(), 0). }
false;public;0;4;;@Override public void addBatch() throws SQLException {     throw new SQLFeatureNotSupportedException("Batching not supported"). }
false;public;3;4;;@Override public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException {     throw new SQLFeatureNotSupportedException("CharacterStream not supported"). }
false;public;2;4;;@Override public void setRef(int parameterIndex, Ref x) throws SQLException {     setObject(parameterIndex, x). }
false;public;2;4;;@Override public void setBlob(int parameterIndex, Blob x) throws SQLException {     setObject(parameterIndex, x). }
false;public;2;4;;@Override public void setClob(int parameterIndex, Clob x) throws SQLException {     setObject(parameterIndex, x). }
false;public;2;4;;@Override public void setArray(int parameterIndex, Array x) throws SQLException {     setObject(parameterIndex, x). }
false;public;0;4;;@Override public ResultSetMetaData getMetaData() throws SQLException {     return rs != null ? rs.getMetaData() : null. }
false;public;3;13;;@Override public void setDate(int parameterIndex, Date x, Calendar cal) throws SQLException {     if (cal == null) {         setObject(parameterIndex, x, Types.TIMESTAMP).         return.     }     if (x == null) {         setNull(parameterIndex, Types.TIMESTAMP).         return.     }     // converting to UTC since this is what ES is storing internally     setObject(parameterIndex, new Date(TypeConverter.convertFromCalendarToUTC(x.getTime(), cal)), Types.TIMESTAMP). }
false;public;3;13;;@Override public void setTime(int parameterIndex, Time x, Calendar cal) throws SQLException {     if (cal == null) {         setObject(parameterIndex, x, Types.TIMESTAMP).         return.     }     if (x == null) {         setNull(parameterIndex, Types.TIMESTAMP).         return.     }     // converting to UTC since this is what ES is storing internally     setObject(parameterIndex, new Time(TypeConverter.convertFromCalendarToUTC(x.getTime(), cal)), Types.TIMESTAMP). }
false;public;3;13;;@Override public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) throws SQLException {     if (cal == null) {         setObject(parameterIndex, x, Types.TIMESTAMP).         return.     }     if (x == null) {         setNull(parameterIndex, Types.TIMESTAMP).         return.     }     // converting to UTC since this is what ES is storing internally     setObject(parameterIndex, new Timestamp(TypeConverter.convertFromCalendarToUTC(x.getTime(), cal)), Types.TIMESTAMP). }
false;public;3;4;;@Override public void setNull(int parameterIndex, int sqlType, String typeName) throws SQLException {     setNull(parameterIndex, sqlType). }
false;public;2;4;;@Override public void setURL(int parameterIndex, URL x) throws SQLException {     setObject(parameterIndex, x). }
false;public;0;4;;@Override public ParameterMetaData getParameterMetaData() throws SQLException {     return new JdbcParameterMetaData(this). }
false;public;2;4;;@Override public void setRowId(int parameterIndex, RowId x) throws SQLException {     setObject(parameterIndex, x). }
false;public;2;4;;@Override public void setNString(int parameterIndex, String value) throws SQLException {     throw new SQLFeatureNotSupportedException("NString not supported"). }
false;public;3;4;;@Override public void setNCharacterStream(int parameterIndex, Reader value, long length) throws SQLException {     throw new SQLFeatureNotSupportedException("NCharacterStream not supported"). }
false;public;2;4;;@Override public void setNClob(int parameterIndex, NClob value) throws SQLException {     setObject(parameterIndex, value). }
false;public;3;4;;@Override public void setClob(int parameterIndex, Reader reader, long length) throws SQLException {     throw new SQLFeatureNotSupportedException("Clob not supported"). }
false;public;3;4;;@Override public void setBlob(int parameterIndex, InputStream inputStream, long length) throws SQLException {     throw new SQLFeatureNotSupportedException("Blob not supported"). }
false;public;3;4;;@Override public void setNClob(int parameterIndex, Reader reader, long length) throws SQLException {     throw new SQLFeatureNotSupportedException("NClob not supported"). }
false;public;2;4;;@Override public void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException {     setObject(parameterIndex, xmlObject). }
false;public;4;4;;@Override public void setObject(int parameterIndex, Object x, int targetSqlType, int scaleOrLength) throws SQLException {     setObject(parameterIndex, x, TypeUtils.asSqlType(targetSqlType), scaleOrLength). }
false;public;4;4;;@Override public void setObject(int parameterIndex, Object x, SQLType targetSqlType, int scaleOrLength) throws SQLException {     setObject(parameterIndex, x, TypeUtils.of(targetSqlType), targetSqlType.getName()). }
false;private;4;75;;private void setObject(int parameterIndex, Object x, EsType dataType, String typeString) throws SQLException {     checkOpen().     // set the null value on the type and exit     if (x == null) {         setParam(parameterIndex, null, dataType).         return.     }     checkKnownUnsupportedTypes(x).     if (x instanceof byte[]) {         if (dataType != EsType.BINARY) {             throw new SQLFeatureNotSupportedException("Conversion from type [byte[]] to [" + typeString + "] not supported").         }         setParam(parameterIndex, x, EsType.BINARY).         return.     }     if (x instanceof Timestamp || x instanceof Calendar || x instanceof Date || x instanceof LocalDateTime || x instanceof Time || x instanceof java.util.Date) {         if (dataType == EsType.DATETIME) {             // converting to {@code java.util.Date} because this is the type supported by {@code XContentBuilder} for serialization             java.util.Date dateToSet.             if (x instanceof Timestamp) {                 dateToSet = new java.util.Date(((Timestamp) x).getTime()).             } else if (x instanceof Calendar) {                 dateToSet = ((Calendar) x).getTime().             } else if (x instanceof Date) {                 dateToSet = new java.util.Date(((Date) x).getTime()).             } else if (x instanceof LocalDateTime) {                 LocalDateTime ldt = (LocalDateTime) x.                 Calendar cal = getDefaultCalendar().                 cal.set(ldt.getYear(), ldt.getMonthValue() - 1, ldt.getDayOfMonth(), ldt.getHour(), ldt.getMinute(), ldt.getSecond()).                 dateToSet = cal.getTime().             } else if (x instanceof Time) {                 dateToSet = new java.util.Date(((Time) x).getTime()).             } else {                 dateToSet = (java.util.Date) x.             }             setParam(parameterIndex, dateToSet, dataType).             return.         } else if (TypeUtils.isString(dataType)) {             setParam(parameterIndex, String.valueOf(x), dataType).             return.         }         // anything else other than VARCHAR and TIMESTAMP is not supported in this JDBC driver         throw new SQLFeatureNotSupportedException("Conversion from type [" + x.getClass().getName() + "] to [" + typeString + "] not supported").     }     if (x instanceof Boolean || x instanceof Byte || x instanceof Short || x instanceof Integer || x instanceof Long || x instanceof Float || x instanceof Double || x instanceof String) {         setParam(parameterIndex, TypeConverter.convert(x, TypeUtils.of(x.getClass()), (Class<?>) TypeUtils.classOf(dataType), typeString), dataType).         return.     }     throw new SQLFeatureNotSupportedException("Conversion from type [" + x.getClass().getName() + "] to [" + typeString + "] not supported"). }
false;private;1;11;;private void checkKnownUnsupportedTypes(Object x) throws SQLFeatureNotSupportedException {     List<Class<?>> unsupportedTypes = new ArrayList<>(Arrays.asList(Struct.class, Array.class, SQLXML.class, RowId.class, Ref.class, Blob.class, NClob.class, Clob.class, LocalDate.class, LocalTime.class, OffsetTime.class, OffsetDateTime.class, URL.class, BigDecimal.class)).     for (Class<?> clazz : unsupportedTypes) {         if (clazz.isAssignableFrom(x.getClass())) {             throw new SQLFeatureNotSupportedException("Objects of type [" + clazz.getName() + "] are not supported").         }     } }
false;private;0;3;;private Calendar getDefaultCalendar() {     return Calendar.getInstance(cfg.timeZone(), Locale.ROOT). }
false;public;3;4;;@Override public void setAsciiStream(int parameterIndex, InputStream x, long length) throws SQLException {     throw new SQLFeatureNotSupportedException("AsciiStream not supported"). }
false;public;3;4;;@Override public void setBinaryStream(int parameterIndex, InputStream x, long length) throws SQLException {     throw new SQLFeatureNotSupportedException("BinaryStream not supported"). }
false;public;3;4;;@Override public void setCharacterStream(int parameterIndex, Reader reader, long length) throws SQLException {     throw new SQLFeatureNotSupportedException("CharacterStream not supported"). }
false;public;2;4;;@Override public void setAsciiStream(int parameterIndex, InputStream x) throws SQLException {     throw new SQLFeatureNotSupportedException("AsciiStream not supported"). }
false;public;2;4;;@Override public void setBinaryStream(int parameterIndex, InputStream x) throws SQLException {     throw new SQLFeatureNotSupportedException("BinaryStream not supported"). }
false;public;2;4;;@Override public void setCharacterStream(int parameterIndex, Reader reader) throws SQLException {     throw new SQLFeatureNotSupportedException("CharacterStream not supported"). }
false;public;2;4;;@Override public void setNCharacterStream(int parameterIndex, Reader value) throws SQLException {     throw new SQLFeatureNotSupportedException("NCharacterStream not supported"). }
false;public;2;4;;@Override public void setClob(int parameterIndex, Reader reader) throws SQLException {     throw new SQLFeatureNotSupportedException("Clob not supported"). }
false;public;2;4;;@Override public void setBlob(int parameterIndex, InputStream inputStream) throws SQLException {     throw new SQLFeatureNotSupportedException("Blob not supported"). }
false;public;2;4;;@Override public void setNClob(int parameterIndex, Reader reader) throws SQLException {     throw new SQLFeatureNotSupportedException("NClob not supported"). }
false;public;1;4;;@Override public ResultSet executeQuery(String sql) throws SQLException {     throw new SQLException("Forbidden method on PreparedStatement"). }
false;public;1;4;;@Override public int executeUpdate(String sql) throws SQLException {     throw new SQLException("Forbidden method on PreparedStatement"). }
false;public;1;4;;@Override public boolean execute(String sql) throws SQLException {     throw new SQLException("Forbidden method on PreparedStatement"). }
false;public;2;4;;@Override public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {     throw new SQLException("Forbidden method on PreparedStatement"). }
false;public;2;4;;@Override public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {     throw new SQLException("Forbidden method on PreparedStatement"). }
false;public;2;4;;@Override public int executeUpdate(String sql, String[] columnNames) throws SQLException {     throw new SQLException("Forbidden method on PreparedStatement"). }
false;public;2;4;;@Override public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {     throw new SQLException("Forbidden method on PreparedStatement"). }
false;public;2;4;;@Override public boolean execute(String sql, int[] columnIndexes) throws SQLException {     throw new SQLException("Forbidden method on PreparedStatement"). }
false;public;2;4;;@Override public boolean execute(String sql, String[] columnNames) throws SQLException {     throw new SQLException("Forbidden method on PreparedStatement"). }
false;public;0;4;;@Override public long executeLargeUpdate() throws SQLException {     throw new SQLFeatureNotSupportedException("Batching not supported"). }
