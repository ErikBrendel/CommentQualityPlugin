commented;modifiers;parameterAmount;loc;comment;code
false;;1;6;;ParamInfo getParam(int param) throws JdbcSQLException {     if (param < 1 || param > params.length) {         throw new JdbcSQLException("Invalid parameter index [" + param + "]").     }     return params[param - 1]. }
false;;3;7;;void setParam(int param, Object value, EsType type) throws JdbcSQLException {     if (param < 1 || param > params.length) {         throw new JdbcSQLException("Invalid parameter index [" + param + "]").     }     params[param - 1].value = value.     params[param - 1].type = type. }
false;;0;3;;int paramCount() {     return params.length. }
false;;0;5;;void clearParams() {     for (int i = 0. i < params.length. i++) {         params[i] = new ParamInfo(null, EsType.KEYWORD).     } }
true;;0;3;/**  * Returns the sql statement  */ ;/**  * Returns the sql statement  */ String sql() {     return sql. }
true;;0;5;/**  * Returns the parameters if the SQL statement is parametrized  */ ;/**  * Returns the parameters if the SQL statement is parametrized  */ List<SqlTypedParamValue> params() {     return Arrays.stream(this.params).map(paramInfo -> new SqlTypedParamValue(paramInfo.type.name(), paramInfo.value)).collect(Collectors.toList()). }
false;public;0;4;;@Override public String toString() {     return sql() + " " + params(). }
true;static;1;3;// Creates a PreparedQuery ;// Creates a PreparedQuery static PreparedQuery prepare(String sql) throws SQLException {     return new PreparedQuery(sql, SqlQueryParameterAnalyzer.parametersCount(sql)). }
