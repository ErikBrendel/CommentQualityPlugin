commented;modifiers;parameterAmount;loc;comment;code
false;private;1;14;;private Object column(int columnIndex) throws SQLException {     checkOpen().     if (columnIndex < 1 || columnIndex > cursor.columnSize()) {         throw new SQLException("Invalid column index [" + columnIndex + "]").     }     Object object = null.     try {         object = cursor.column(columnIndex - 1).     } catch (IllegalArgumentException iae) {         throw new SQLException(iae.getMessage()).     }     wasNull = (object == null).     return object. }
false;private;1;8;;private int column(String columnName) throws SQLException {     checkOpen().     Integer index = nameToIndex.get(columnName).     if (index == null) {         throw new SQLException("Invalid column label [" + columnName + "]").     }     return index.intValue(). }
false;;0;5;;void checkOpen() throws SQLException {     if (isClosed()) {         throw new SQLException("Closed result set").     } }
false;public;0;9;;@Override public boolean next() throws SQLException {     checkOpen().     if (cursor.next()) {         rowNumber++.         return true.     }     return false. }
false;public;0;10;;@Override public void close() throws SQLException {     if (!closed) {         closed = true.         if (statement != null) {             statement.resultSetWasClosed().         }         cursor.close().     } }
false;public;0;5;;@Override public boolean wasNull() throws SQLException {     checkOpen().     return wasNull. }
false;public;1;4;;@Override public String getString(int columnIndex) throws SQLException {     return getObject(columnIndex, String.class). }
false;public;1;4;;@Override public boolean getBoolean(int columnIndex) throws SQLException {     return column(columnIndex) != null ? getObject(columnIndex, Boolean.class) : false. }
false;public;1;4;;@Override public byte getByte(int columnIndex) throws SQLException {     return column(columnIndex) != null ? getObject(columnIndex, Byte.class) : 0. }
false;public;1;4;;@Override public short getShort(int columnIndex) throws SQLException {     return column(columnIndex) != null ? getObject(columnIndex, Short.class) : 0. }
false;public;1;4;;@Override public int getInt(int columnIndex) throws SQLException {     return column(columnIndex) != null ? getObject(columnIndex, Integer.class) : 0. }
false;public;1;4;;@Override public long getLong(int columnIndex) throws SQLException {     return column(columnIndex) != null ? getObject(columnIndex, Long.class) : 0. }
false;public;1;4;;@Override public float getFloat(int columnIndex) throws SQLException {     return column(columnIndex) != null ? getObject(columnIndex, Float.class) : 0. }
false;public;1;4;;@Override public double getDouble(int columnIndex) throws SQLException {     return column(columnIndex) != null ? getObject(columnIndex, Double.class) : 0. }
false;public;1;8;;@Override public byte[] getBytes(int columnIndex) throws SQLException {     try {         return (byte[]) column(columnIndex).     } catch (ClassCastException cce) {         throw new SQLException("unable to convert column " + columnIndex + " to a byte array", cce).     } }
false;public;1;4;;@Override public Date getDate(int columnIndex) throws SQLException {     return getDate(columnIndex, null). }
false;public;1;4;;@Override public Time getTime(int columnIndex) throws SQLException {     return getTime(columnIndex, null). }
false;public;1;4;;@Override public Timestamp getTimestamp(int columnIndex) throws SQLException {     return getTimestamp(columnIndex, null). }
false;public;1;4;;@Override public String getString(String columnLabel) throws SQLException {     return getString(column(columnLabel)). }
false;public;1;4;;@Override public boolean getBoolean(String columnLabel) throws SQLException {     return getBoolean(column(columnLabel)). }
false;public;1;4;;@Override public byte getByte(String columnLabel) throws SQLException {     return getByte(column(columnLabel)). }
false;public;1;4;;@Override public short getShort(String columnLabel) throws SQLException {     return getShort(column(columnLabel)). }
false;public;1;4;;@Override public int getInt(String columnLabel) throws SQLException {     return getInt(column(columnLabel)). }
false;public;1;4;;@Override public long getLong(String columnLabel) throws SQLException {     return getLong(column(columnLabel)). }
false;public;1;4;;@Override public float getFloat(String columnLabel) throws SQLException {     return getFloat(column(columnLabel)). }
false;public;1;4;;@Override public double getDouble(String columnLabel) throws SQLException {     return getDouble(column(columnLabel)). }
false;public;1;4;;@Override public byte[] getBytes(String columnLabel) throws SQLException {     return getBytes(column(columnLabel)). }
false;public;1;7;;@Override public Date getDate(String columnLabel) throws SQLException {     // Should we reconsider this? Maybe by catching the exception here and rethrowing it with the columnLabel instead.     return getDate(column(columnLabel)). }
false;private;1;25;;private Long dateTime(int columnIndex) throws SQLException {     Object val = column(columnIndex).     EsType type = cursor.columns().get(columnIndex - 1).type.     try {         // TIMESTAMP. Should we consider the VARCHAR conversion as a later enhancement?         if (EsType.DATETIME == type) {             // TODO: this should probably be handled server side             if (val == null) {                 return null.             }             return asDateTimeField(val, JdbcDateUtils::asMillisSinceEpoch, Function.identity()).         }         if (EsType.DATE == type) {             return utcMillisRemoveTime(asMillisSinceEpoch(val.toString())).         }         return val == null ? null : (Long) val.     } catch (ClassCastException cce) {         throw new SQLException(format(Locale.ROOT, "Unable to convert value [%.128s] of type [%s] to a Long", val, type.getName()), cce).     } }
false;private;1;3;;private Calendar safeCalendar(Calendar calendar) {     return calendar == null ? defaultCalendar : calendar. }
false;public;2;4;;@Override public Date getDate(int columnIndex, Calendar cal) throws SQLException {     return TypeConverter.convertDate(dateTime(columnIndex), safeCalendar(cal)). }
false;public;2;4;;@Override public Date getDate(String columnLabel, Calendar cal) throws SQLException {     return getDate(column(columnLabel), cal). }
false;public;2;4;;@Override public Time getTime(int columnIndex, Calendar cal) throws SQLException {     return TypeConverter.convertTime(dateTime(columnIndex), safeCalendar(cal)). }
false;public;1;4;;@Override public Time getTime(String columnLabel) throws SQLException {     return getTime(column(columnLabel)). }
false;public;2;4;;@Override public Timestamp getTimestamp(int columnIndex, Calendar cal) throws SQLException {     return TypeConverter.convertTimestamp(dateTime(columnIndex), safeCalendar(cal)). }
false;public;1;4;;@Override public Timestamp getTimestamp(String columnLabel) throws SQLException {     return getTimestamp(column(columnLabel)). }
false;public;2;4;;@Override public Time getTime(String columnLabel, Calendar cal) throws SQLException {     return getTime(column(columnLabel), cal). }
false;public;2;4;;@Override public Timestamp getTimestamp(String columnLabel, Calendar cal) throws SQLException {     return getTimestamp(column(columnLabel), cal). }
false;public;0;4;;@Override public ResultSetMetaData getMetaData() throws SQLException {     return new JdbcResultSetMetaData(this, cursor.columns()). }
false;public;1;4;;@Override public Object getObject(int columnIndex) throws SQLException {     return convert(columnIndex, null). }
false;public;2;8;;@Override public <T> T getObject(int columnIndex, Class<T> type) throws SQLException {     if (type == null) {         throw new SQLException("type is null").     }     return convert(columnIndex, type). }
false;private;2;12;;private <T> T convert(int columnIndex, Class<T> type) throws SQLException {     Object val = column(columnIndex).     if (val == null) {         return null.     }     EsType columnType = cursor.columns().get(columnIndex - 1).type.     String typeString = type != null ? type.getSimpleName() : columnType.getName().     return TypeConverter.convert(val, columnType, type, typeString). }
false;public;2;7;;@Override public Object getObject(int columnIndex, Map<String, Class<?>> map) throws SQLException {     if (map == null || map.isEmpty()) {         return getObject(columnIndex).     }     throw new SQLFeatureNotSupportedException("getObject with non-empty Map not supported"). }
false;public;1;4;;@Override public Object getObject(String columnLabel) throws SQLException {     return getObject(column(columnLabel)). }
false;public;2;4;;@Override public <T> T getObject(String columnLabel, Class<T> type) throws SQLException {     return getObject(column(columnLabel), type). }
false;public;2;4;;@Override public Object getObject(String columnLabel, Map<String, Class<?>> map) throws SQLException {     return getObject(column(columnLabel), map). }
false;public;1;4;;@Override public int findColumn(String columnLabel) throws SQLException {     return column(columnLabel). }
false;public;0;4;;@Override public boolean isBeforeFirst() throws SQLException {     return rowNumber == 0. }
false;public;0;4;;@Override public boolean isAfterLast() throws SQLException {     throw new SQLFeatureNotSupportedException("isAfterLast not supported"). }
false;public;0;4;;@Override public boolean isFirst() throws SQLException {     return rowNumber == 1. }
false;public;0;4;;@Override public boolean isLast() throws SQLException {     throw new SQLFeatureNotSupportedException("isLast not supported"). }
false;public;0;4;;@Override public int getRow() throws SQLException {     return rowNumber. }
false;public;1;11;;@Override public void setFetchSize(int rows) throws SQLException {     checkOpen().     if (rows < 0) {         throw new SQLException("Rows is negative").     }     if (rows != getFetchSize()) {         throw new SQLException("Fetch size cannot be changed").     } // ignore fetch size since scrolls cannot be changed in flight }
false;public;0;12;;@Override public int getFetchSize() throws SQLException {     /*          * Instead of returning the fetch size the user requested we make a          * stab at returning the fetch size that we actually used, returning          * the batch size of the current row. This allows us to assert these          * batch sizes in testing and lets us point users to something that          * they can use for debugging.          */     checkOpen().     return cursor.batchSize(). }
false;public;0;5;;@Override public Statement getStatement() throws SQLException {     checkOpen().     return statement. }
false;public;0;4;;@Override public boolean isClosed() {     return closed. }
false;public;2;5;;@Override @Deprecated public BigDecimal getBigDecimal(int columnIndex, int scale) throws SQLException {     throw new SQLFeatureNotSupportedException("BigDecimal not supported"). }
false;public;1;4;;@Override public InputStream getAsciiStream(int columnIndex) throws SQLException {     throw new SQLFeatureNotSupportedException("AsciiStream not supported"). }
false;public;1;5;;@Override @Deprecated public InputStream getUnicodeStream(int columnIndex) throws SQLException {     throw new SQLFeatureNotSupportedException("UnicodeStream not supported"). }
false;public;1;4;;@Override public InputStream getBinaryStream(int columnIndex) throws SQLException {     throw new SQLFeatureNotSupportedException("BinaryStream not supported"). }
false;public;2;5;;@Override @Deprecated public BigDecimal getBigDecimal(String columnLabel, int scale) throws SQLException {     throw new SQLFeatureNotSupportedException("BigDecimal not supported"). }
false;public;1;4;;@Override public InputStream getAsciiStream(String columnLabel) throws SQLException {     throw new SQLFeatureNotSupportedException("AsciiStream not supported"). }
false;public;1;5;;@Override @Deprecated public InputStream getUnicodeStream(String columnLabel) throws SQLException {     throw new SQLFeatureNotSupportedException("UnicodeStream not supported"). }
false;public;1;4;;@Override public InputStream getBinaryStream(String columnLabel) throws SQLException {     throw new SQLFeatureNotSupportedException("BinaryStream not supported"). }
false;public;0;5;;@Override public SQLWarning getWarnings() throws SQLException {     checkOpen().     return null. }
false;public;0;4;;@Override public void clearWarnings() throws SQLException {     checkOpen(). }
false;public;0;4;;@Override public String getCursorName() throws SQLException {     throw new SQLFeatureNotSupportedException("Cursor name not supported"). }
false;public;1;4;;@Override public Reader getCharacterStream(int columnIndex) throws SQLException {     throw new SQLFeatureNotSupportedException("CharacterStream not supported"). }
false;public;1;4;;@Override public Reader getCharacterStream(String columnLabel) throws SQLException {     throw new SQLFeatureNotSupportedException("CharacterStream not supported"). }
false;public;1;4;;@Override public BigDecimal getBigDecimal(int columnIndex) throws SQLException {     throw new SQLFeatureNotSupportedException("BigDecimal not supported"). }
false;public;1;4;;@Override public BigDecimal getBigDecimal(String columnLabel) throws SQLException {     throw new SQLFeatureNotSupportedException("BigDecimal not supported"). }
false;public;0;4;;@Override public void beforeFirst() throws SQLException {     throw new SQLException("ResultSet is forward-only"). }
false;public;0;4;;@Override public void afterLast() throws SQLException {     throw new SQLException("ResultSet is forward-only"). }
false;public;0;4;;@Override public boolean first() throws SQLException {     throw new SQLException("ResultSet is forward-only"). }
false;public;0;4;;@Override public boolean last() throws SQLException {     throw new SQLException("ResultSet is forward-only"). }
false;public;1;4;;@Override public boolean absolute(int row) throws SQLException {     throw new SQLException("ResultSet is forward-only"). }
false;public;1;4;;@Override public boolean relative(int rows) throws SQLException {     throw new SQLException("ResultSet is forward-only"). }
false;public;0;4;;@Override public boolean previous() throws SQLException {     throw new SQLException("ResultSet is forward-only"). }
false;public;0;5;;@Override public int getType() throws SQLException {     checkOpen().     return TYPE_FORWARD_ONLY. }
false;public;0;5;;@Override public int getConcurrency() throws SQLException {     checkOpen().     return CONCUR_READ_ONLY. }
false;public;1;7;;@Override public void setFetchDirection(int direction) throws SQLException {     checkOpen().     if (direction != FETCH_FORWARD) {         throw new SQLException("Fetch direction must be FETCH_FORWARD").     } }
false;public;0;5;;@Override public int getFetchDirection() throws SQLException {     checkOpen().     return FETCH_FORWARD. }
false;public;0;4;;@Override public boolean rowUpdated() throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;0;4;;@Override public boolean rowInserted() throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;0;4;;@Override public boolean rowDeleted() throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;1;4;;@Override public void updateNull(int columnIndex) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateBoolean(int columnIndex, boolean x) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateByte(int columnIndex, byte x) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateShort(int columnIndex, short x) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateInt(int columnIndex, int x) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateLong(int columnIndex, long x) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateFloat(int columnIndex, float x) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateDouble(int columnIndex, double x) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateBigDecimal(int columnIndex, BigDecimal x) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateString(int columnIndex, String x) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateBytes(int columnIndex, byte[] x) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateDate(int columnIndex, Date x) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateTime(int columnIndex, Time x) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateTimestamp(int columnIndex, Timestamp x) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;3;4;;@Override public void updateAsciiStream(int columnIndex, InputStream x, int length) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;3;4;;@Override public void updateBinaryStream(int columnIndex, InputStream x, int length) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;3;4;;@Override public void updateCharacterStream(int columnIndex, Reader x, int length) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;3;4;;@Override public void updateObject(int columnIndex, Object x, int scaleOrLength) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateObject(int columnIndex, Object x) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;1;4;;@Override public void updateNull(String columnLabel) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateBoolean(String columnLabel, boolean x) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateByte(String columnLabel, byte x) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateShort(String columnLabel, short x) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateInt(String columnLabel, int x) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateLong(String columnLabel, long x) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateFloat(String columnLabel, float x) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateDouble(String columnLabel, double x) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateBigDecimal(String columnLabel, BigDecimal x) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateString(String columnLabel, String x) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateBytes(String columnLabel, byte[] x) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateDate(String columnLabel, Date x) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateTime(String columnLabel, Time x) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateTimestamp(String columnLabel, Timestamp x) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;3;4;;@Override public void updateAsciiStream(String columnLabel, InputStream x, int length) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;3;4;;@Override public void updateBinaryStream(String columnLabel, InputStream x, int length) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;3;4;;@Override public void updateCharacterStream(String columnLabel, Reader reader, int length) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;3;4;;@Override public void updateObject(String columnLabel, Object x, int scaleOrLength) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateObject(String columnLabel, Object x) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;0;4;;@Override public void insertRow() throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;0;4;;@Override public void updateRow() throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;0;4;;@Override public void deleteRow() throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;0;4;;@Override public void cancelRowUpdates() throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;0;4;;@Override public void moveToInsertRow() throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;0;4;;@Override public void refreshRow() throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;0;4;;@Override public void moveToCurrentRow() throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;1;4;;@Override public Ref getRef(int columnIndex) throws SQLException {     throw new SQLFeatureNotSupportedException("Ref not supported"). }
false;public;1;4;;@Override public Blob getBlob(int columnIndex) throws SQLException {     throw new SQLFeatureNotSupportedException("Blob not supported"). }
false;public;1;4;;@Override public Clob getClob(int columnIndex) throws SQLException {     throw new SQLFeatureNotSupportedException("Clob not supported"). }
false;public;1;4;;@Override public Array getArray(int columnIndex) throws SQLException {     throw new SQLFeatureNotSupportedException("Array not supported"). }
false;public;1;4;;@Override public Ref getRef(String columnLabel) throws SQLException {     throw new SQLFeatureNotSupportedException("Ref not supported"). }
false;public;1;4;;@Override public Blob getBlob(String columnLabel) throws SQLException {     throw new SQLFeatureNotSupportedException("Blob not supported"). }
false;public;1;4;;@Override public Clob getClob(String columnLabel) throws SQLException {     throw new SQLFeatureNotSupportedException("Clob not supported"). }
false;public;1;4;;@Override public Array getArray(String columnLabel) throws SQLException {     throw new SQLFeatureNotSupportedException("Array not supported"). }
false;public;1;4;;@Override public URL getURL(int columnIndex) throws SQLException {     throw new SQLFeatureNotSupportedException("URL not supported"). }
false;public;1;4;;@Override public URL getURL(String columnLabel) throws SQLException {     throw new SQLFeatureNotSupportedException("URL not supported"). }
false;public;2;4;;@Override public void updateRef(int columnIndex, Ref x) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateRef(String columnLabel, Ref x) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateBlob(int columnIndex, Blob x) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateBlob(String columnLabel, Blob x) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateClob(int columnIndex, Clob x) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateClob(String columnLabel, Clob x) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateArray(int columnIndex, Array x) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateArray(String columnLabel, Array x) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;1;4;;@Override public RowId getRowId(int columnIndex) throws SQLException {     throw new SQLFeatureNotSupportedException("RowId not supported"). }
false;public;1;4;;@Override public RowId getRowId(String columnLabel) throws SQLException {     throw new SQLFeatureNotSupportedException("RowId not supported"). }
false;public;2;4;;@Override public void updateRowId(int columnIndex, RowId x) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateRowId(String columnLabel, RowId x) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;0;5;;@Override public int getHoldability() throws SQLException {     checkOpen().     return HOLD_CURSORS_OVER_COMMIT. }
false;public;2;4;;@Override public void updateNString(int columnIndex, String nString) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateNString(String columnLabel, String nString) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateNClob(int columnIndex, NClob nClob) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateNClob(String columnLabel, NClob nClob) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;1;4;;@Override public NClob getNClob(int columnIndex) throws SQLException {     throw new SQLFeatureNotSupportedException("NClob not supported"). }
false;public;1;4;;@Override public NClob getNClob(String columnLabel) throws SQLException {     throw new SQLFeatureNotSupportedException("NClob not supported"). }
false;public;1;4;;@Override public SQLXML getSQLXML(int columnIndex) throws SQLException {     throw new SQLFeatureNotSupportedException("SQLXML not supported"). }
false;public;1;4;;@Override public SQLXML getSQLXML(String columnLabel) throws SQLException {     throw new SQLFeatureNotSupportedException("SQLXML not supported"). }
false;public;2;4;;@Override public void updateSQLXML(int columnIndex, SQLXML xmlObject) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateSQLXML(String columnLabel, SQLXML xmlObject) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;1;4;;@Override public String getNString(int columnIndex) throws SQLException {     throw new SQLFeatureNotSupportedException("NString not supported"). }
false;public;1;4;;@Override public String getNString(String columnLabel) throws SQLException {     throw new SQLFeatureNotSupportedException("NString not supported"). }
false;public;1;4;;@Override public Reader getNCharacterStream(int columnIndex) throws SQLException {     throw new SQLFeatureNotSupportedException("NCharacterStream not supported"). }
false;public;1;4;;@Override public Reader getNCharacterStream(String columnLabel) throws SQLException {     throw new SQLFeatureNotSupportedException("NCharacterStream not supported"). }
false;public;3;4;;@Override public void updateNCharacterStream(int columnIndex, Reader x, long length) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;3;4;;@Override public void updateNCharacterStream(String columnLabel, Reader reader, long length) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;3;4;;@Override public void updateAsciiStream(int columnIndex, InputStream x, long length) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;3;4;;@Override public void updateBinaryStream(int columnIndex, InputStream x, long length) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;3;4;;@Override public void updateCharacterStream(int columnIndex, Reader x, long length) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;3;4;;@Override public void updateAsciiStream(String columnLabel, InputStream x, long length) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;3;4;;@Override public void updateBinaryStream(String columnLabel, InputStream x, long length) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;3;4;;@Override public void updateCharacterStream(String columnLabel, Reader reader, long length) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;3;4;;@Override public void updateBlob(int columnIndex, InputStream inputStream, long length) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;3;4;;@Override public void updateBlob(String columnLabel, InputStream inputStream, long length) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;3;4;;@Override public void updateClob(int columnIndex, Reader reader, long length) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;3;4;;@Override public void updateClob(String columnLabel, Reader reader, long length) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;3;4;;@Override public void updateNClob(int columnIndex, Reader reader, long length) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;3;4;;@Override public void updateNClob(String columnLabel, Reader reader, long length) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateNCharacterStream(int columnIndex, Reader x) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateNCharacterStream(String columnLabel, Reader reader) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateAsciiStream(int columnIndex, InputStream x) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateBinaryStream(int columnIndex, InputStream x) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateCharacterStream(int columnIndex, Reader x) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateAsciiStream(String columnLabel, InputStream x) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateBinaryStream(String columnLabel, InputStream x) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateCharacterStream(String columnLabel, Reader reader) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateBlob(int columnIndex, InputStream inputStream) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateBlob(String columnLabel, InputStream inputStream) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateClob(int columnIndex, Reader reader) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateClob(String columnLabel, Reader reader) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateNClob(int columnIndex, Reader reader) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;2;4;;@Override public void updateNClob(String columnLabel, Reader reader) throws SQLException {     throw new SQLFeatureNotSupportedException("Writes not supported"). }
false;public;0;4;;@Override public String toString() {     return format(Locale.ROOT, "%s:row %d", getClass().getSimpleName(), rowNumber). }
