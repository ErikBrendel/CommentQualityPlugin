commented;modifiers;parameterAmount;loc;comment;code
false;;1;3;;boolean ping(long timeoutInMs) throws SQLException {     return httpClient.ping(timeoutInMs). }
false;;3;9;;Cursor query(String sql, List<SqlTypedParamValue> params, RequestMeta meta) throws SQLException {     int fetch = meta.fetchSize() > 0 ? meta.fetchSize() : conCfg.pageSize().     SqlQueryRequest sqlRequest = new SqlQueryRequest(sql, params, null, Protocol.TIME_ZONE, fetch, TimeValue.timeValueMillis(meta.timeoutInMs()), TimeValue.timeValueMillis(meta.queryTimeoutInMs()), false, new RequestInfo(Mode.JDBC)).     SqlQueryResponse response = httpClient.query(sqlRequest).     return new DefaultCursor(this, response.cursor(), toJdbcColumnInfo(response.columns()), response.rows(), meta). }
true;;2;6;/**  * Read the next page of results and returning  * the scroll id to use to fetch the next page.  */ ;/**  * Read the next page of results and returning  * the scroll id to use to fetch the next page.  */ Tuple<String, List<List<Object>>> nextPage(String cursor, RequestMeta meta) throws SQLException {     SqlQueryRequest sqlRequest = new SqlQueryRequest(cursor, TimeValue.timeValueMillis(meta.timeoutInMs()), TimeValue.timeValueMillis(meta.queryTimeoutInMs()), new RequestInfo(Mode.JDBC)).     SqlQueryResponse response = httpClient.query(sqlRequest).     return new Tuple<>(response.cursor(), response.rows()). }
false;;1;3;;boolean queryClose(String cursor) throws SQLException {     return httpClient.queryClose(cursor, Mode.JDBC). }
false;;0;3;;InfoResponse serverInfo() throws SQLException {     return serverInfo. }
false;private;0;5;;private InfoResponse fetchServerInfo() throws SQLException {     MainResponse mainResponse = httpClient.serverInfo().     Version version = Version.fromString(mainResponse.getVersion()).     return new InfoResponse(mainResponse.getClusterName(), version.major, version.minor, version.revision). }
false;private;0;8;;private void checkServerVersion() throws SQLException {     if (serverInfo.majorVersion != Version.CURRENT.major || serverInfo.minorVersion != Version.CURRENT.minor || serverInfo.revisionVersion != Version.CURRENT.revision) {         throw new SQLException("This version of the JDBC driver is only compatible with Elasticsearch version " + Version.CURRENT.toString() + ", attempting to connect to a server version " + serverInfo.versionString()).     } }
true;private;1;7;/**  * Converts REST column metadata into JDBC column metadata  */ ;/**  * Converts REST column metadata into JDBC column metadata  */ private List<JdbcColumnInfo> toJdbcColumnInfo(List<ColumnInfo> columns) throws SQLException {     List<JdbcColumnInfo> cols = new ArrayList<>(columns.size()).     for (ColumnInfo info : columns) {         cols.add(new JdbcColumnInfo(info.name(), TypeUtils.of(info.esType()), EMPTY, EMPTY, EMPTY, EMPTY, info.displaySize())).     }     return cols. }
