# id;timestamp;commentText;codeText;commentWords;codeWords
JdbcHttpClient -> JdbcHttpClient(JdbcConfiguration conCfg) throws SQLException;1543402106;The SQLException is the only type of Exception the JDBC API can throw (and that the user expects)._If we remove it, we need to make sure no other types of Exceptions (runtime or otherwise) are thrown;JdbcHttpClient(JdbcConfiguration conCfg) throws SQLException {_        httpClient = new HttpClient(conCfg)__        this.conCfg = conCfg__    };the,sqlexception,is,the,only,type,of,exception,the,jdbc,api,can,throw,and,that,the,user,expects,if,we,remove,it,we,need,to,make,sure,no,other,types,of,exceptions,runtime,or,otherwise,are,thrown;jdbc,http,client,jdbc,configuration,con,cfg,throws,sqlexception,http,client,new,http,client,con,cfg,this,con,cfg,con,cfg
JdbcHttpClient -> JdbcHttpClient(JdbcConfiguration conCfg) throws SQLException;1548161728;The SQLException is the only type of Exception the JDBC API can throw (and that the user expects)._If we remove it, we need to make sure no other types of Exceptions (runtime or otherwise) are thrown;JdbcHttpClient(JdbcConfiguration conCfg) throws SQLException {_        httpClient = new HttpClient(conCfg)__        this.conCfg = conCfg__    };the,sqlexception,is,the,only,type,of,exception,the,jdbc,api,can,throw,and,that,the,user,expects,if,we,remove,it,we,need,to,make,sure,no,other,types,of,exceptions,runtime,or,otherwise,are,thrown;jdbc,http,client,jdbc,configuration,con,cfg,throws,sqlexception,http,client,new,http,client,con,cfg,this,con,cfg,con,cfg
JdbcHttpClient -> JdbcHttpClient(JdbcConfiguration conCfg) throws SQLException;1550654725;The SQLException is the only type of Exception the JDBC API can throw (and that the user expects)._If we remove it, we need to make sure no other types of Exceptions (runtime or otherwise) are thrown;JdbcHttpClient(JdbcConfiguration conCfg) throws SQLException {_        httpClient = new HttpClient(conCfg)__        this.conCfg = conCfg__        this.serverInfo = fetchServerInfo()__        checkServerVersion()__    };the,sqlexception,is,the,only,type,of,exception,the,jdbc,api,can,throw,and,that,the,user,expects,if,we,remove,it,we,need,to,make,sure,no,other,types,of,exceptions,runtime,or,otherwise,are,thrown;jdbc,http,client,jdbc,configuration,con,cfg,throws,sqlexception,http,client,new,http,client,con,cfg,this,con,cfg,con,cfg,this,server,info,fetch,server,info,check,server,version
JdbcHttpClient -> JdbcHttpClient(JdbcConfiguration conCfg) throws SQLException;1551252292;The SQLException is the only type of Exception the JDBC API can throw (and that the user expects)._If we remove it, we need to make sure no other types of Exceptions (runtime or otherwise) are thrown;JdbcHttpClient(JdbcConfiguration conCfg) throws SQLException {_        httpClient = new HttpClient(conCfg)__        this.conCfg = conCfg__        this.serverInfo = fetchServerInfo()__        checkServerVersion()__    };the,sqlexception,is,the,only,type,of,exception,the,jdbc,api,can,throw,and,that,the,user,expects,if,we,remove,it,we,need,to,make,sure,no,other,types,of,exceptions,runtime,or,otherwise,are,thrown;jdbc,http,client,jdbc,configuration,con,cfg,throws,sqlexception,http,client,new,http,client,con,cfg,this,con,cfg,con,cfg,this,server,info,fetch,server,info,check,server,version
JdbcHttpClient -> private List<JdbcColumnInfo> toJdbcColumnInfo(List<ColumnInfo> columns) throws SQLException;1543402106;Converts REST column metadata into JDBC column metadata;private List<JdbcColumnInfo> toJdbcColumnInfo(List<ColumnInfo> columns) throws SQLException {_        List<JdbcColumnInfo> cols = new ArrayList<>(columns.size())__        for (ColumnInfo info : columns) {_            cols.add(new JdbcColumnInfo(info.name(), TypeUtils.of(info.esType()), EMPTY, EMPTY, EMPTY, EMPTY, info.displaySize()))__        }_        return cols__    };converts,rest,column,metadata,into,jdbc,column,metadata;private,list,jdbc,column,info,to,jdbc,column,info,list,column,info,columns,throws,sqlexception,list,jdbc,column,info,cols,new,array,list,columns,size,for,column,info,info,columns,cols,add,new,jdbc,column,info,info,name,type,utils,of,info,es,type,empty,empty,empty,empty,info,display,size,return,cols
JdbcHttpClient -> private List<JdbcColumnInfo> toJdbcColumnInfo(List<ColumnInfo> columns) throws SQLException;1548161728;Converts REST column metadata into JDBC column metadata;private List<JdbcColumnInfo> toJdbcColumnInfo(List<ColumnInfo> columns) throws SQLException {_        List<JdbcColumnInfo> cols = new ArrayList<>(columns.size())__        for (ColumnInfo info : columns) {_            cols.add(new JdbcColumnInfo(info.name(), TypeUtils.of(info.esType()), EMPTY, EMPTY, EMPTY, EMPTY, info.displaySize()))__        }_        return cols__    };converts,rest,column,metadata,into,jdbc,column,metadata;private,list,jdbc,column,info,to,jdbc,column,info,list,column,info,columns,throws,sqlexception,list,jdbc,column,info,cols,new,array,list,columns,size,for,column,info,info,columns,cols,add,new,jdbc,column,info,info,name,type,utils,of,info,es,type,empty,empty,empty,empty,info,display,size,return,cols
JdbcHttpClient -> private List<JdbcColumnInfo> toJdbcColumnInfo(List<ColumnInfo> columns) throws SQLException;1550654725;Converts REST column metadata into JDBC column metadata;private List<JdbcColumnInfo> toJdbcColumnInfo(List<ColumnInfo> columns) throws SQLException {_        List<JdbcColumnInfo> cols = new ArrayList<>(columns.size())__        for (ColumnInfo info : columns) {_            cols.add(new JdbcColumnInfo(info.name(), TypeUtils.of(info.esType()), EMPTY, EMPTY, EMPTY, EMPTY, info.displaySize()))__        }_        return cols__    };converts,rest,column,metadata,into,jdbc,column,metadata;private,list,jdbc,column,info,to,jdbc,column,info,list,column,info,columns,throws,sqlexception,list,jdbc,column,info,cols,new,array,list,columns,size,for,column,info,info,columns,cols,add,new,jdbc,column,info,info,name,type,utils,of,info,es,type,empty,empty,empty,empty,info,display,size,return,cols
JdbcHttpClient -> private List<JdbcColumnInfo> toJdbcColumnInfo(List<ColumnInfo> columns) throws SQLException;1551252292;Converts REST column metadata into JDBC column metadata;private List<JdbcColumnInfo> toJdbcColumnInfo(List<ColumnInfo> columns) throws SQLException {_        List<JdbcColumnInfo> cols = new ArrayList<>(columns.size())__        for (ColumnInfo info : columns) {_            cols.add(new JdbcColumnInfo(info.name(), TypeUtils.of(info.esType()), EMPTY, EMPTY, EMPTY, EMPTY, info.displaySize()))__        }_        return cols__    };converts,rest,column,metadata,into,jdbc,column,metadata;private,list,jdbc,column,info,to,jdbc,column,info,list,column,info,columns,throws,sqlexception,list,jdbc,column,info,cols,new,array,list,columns,size,for,column,info,info,columns,cols,add,new,jdbc,column,info,info,name,type,utils,of,info,es,type,empty,empty,empty,empty,info,display,size,return,cols
JdbcHttpClient -> Tuple<String, List<List<Object>>> nextPage(String cursor, RequestMeta meta) throws SQLException;1543402106;Read the next page of results and returning_the scroll id to use to fetch the next page.;Tuple<String, List<List<Object>>> nextPage(String cursor, RequestMeta meta) throws SQLException {_        SqlQueryRequest sqlRequest = new SqlQueryRequest(cursor, TimeValue.timeValueMillis(meta.timeoutInMs()),_                TimeValue.timeValueMillis(meta.queryTimeoutInMs()), new RequestInfo(Mode.JDBC))__        SqlQueryResponse response = httpClient.query(sqlRequest)__        return new Tuple<>(response.cursor(), response.rows())__    };read,the,next,page,of,results,and,returning,the,scroll,id,to,use,to,fetch,the,next,page;tuple,string,list,list,object,next,page,string,cursor,request,meta,meta,throws,sqlexception,sql,query,request,sql,request,new,sql,query,request,cursor,time,value,time,value,millis,meta,timeout,in,ms,time,value,time,value,millis,meta,query,timeout,in,ms,new,request,info,mode,jdbc,sql,query,response,response,http,client,query,sql,request,return,new,tuple,response,cursor,response,rows
JdbcHttpClient -> Tuple<String, List<List<Object>>> nextPage(String cursor, RequestMeta meta) throws SQLException;1548161728;Read the next page of results and returning_the scroll id to use to fetch the next page.;Tuple<String, List<List<Object>>> nextPage(String cursor, RequestMeta meta) throws SQLException {_        SqlQueryRequest sqlRequest = new SqlQueryRequest(cursor, TimeValue.timeValueMillis(meta.timeoutInMs()),_                TimeValue.timeValueMillis(meta.queryTimeoutInMs()), new RequestInfo(Mode.JDBC))__        SqlQueryResponse response = httpClient.query(sqlRequest)__        return new Tuple<>(response.cursor(), response.rows())__    };read,the,next,page,of,results,and,returning,the,scroll,id,to,use,to,fetch,the,next,page;tuple,string,list,list,object,next,page,string,cursor,request,meta,meta,throws,sqlexception,sql,query,request,sql,request,new,sql,query,request,cursor,time,value,time,value,millis,meta,timeout,in,ms,time,value,time,value,millis,meta,query,timeout,in,ms,new,request,info,mode,jdbc,sql,query,response,response,http,client,query,sql,request,return,new,tuple,response,cursor,response,rows
JdbcHttpClient -> Tuple<String, List<List<Object>>> nextPage(String cursor, RequestMeta meta) throws SQLException;1550654725;Read the next page of results and returning_the scroll id to use to fetch the next page.;Tuple<String, List<List<Object>>> nextPage(String cursor, RequestMeta meta) throws SQLException {_        SqlQueryRequest sqlRequest = new SqlQueryRequest(cursor, TimeValue.timeValueMillis(meta.timeoutInMs()),_                TimeValue.timeValueMillis(meta.queryTimeoutInMs()), new RequestInfo(Mode.JDBC))__        SqlQueryResponse response = httpClient.query(sqlRequest)__        return new Tuple<>(response.cursor(), response.rows())__    };read,the,next,page,of,results,and,returning,the,scroll,id,to,use,to,fetch,the,next,page;tuple,string,list,list,object,next,page,string,cursor,request,meta,meta,throws,sqlexception,sql,query,request,sql,request,new,sql,query,request,cursor,time,value,time,value,millis,meta,timeout,in,ms,time,value,time,value,millis,meta,query,timeout,in,ms,new,request,info,mode,jdbc,sql,query,response,response,http,client,query,sql,request,return,new,tuple,response,cursor,response,rows
JdbcHttpClient -> Tuple<String, List<List<Object>>> nextPage(String cursor, RequestMeta meta) throws SQLException;1551252292;Read the next page of results and returning_the scroll id to use to fetch the next page.;Tuple<String, List<List<Object>>> nextPage(String cursor, RequestMeta meta) throws SQLException {_        SqlQueryRequest sqlRequest = new SqlQueryRequest(cursor, TimeValue.timeValueMillis(meta.timeoutInMs()),_                TimeValue.timeValueMillis(meta.queryTimeoutInMs()), new RequestInfo(Mode.JDBC))__        SqlQueryResponse response = httpClient.query(sqlRequest)__        return new Tuple<>(response.cursor(), response.rows())__    };read,the,next,page,of,results,and,returning,the,scroll,id,to,use,to,fetch,the,next,page;tuple,string,list,list,object,next,page,string,cursor,request,meta,meta,throws,sqlexception,sql,query,request,sql,request,new,sql,query,request,cursor,time,value,time,value,millis,meta,timeout,in,ms,time,value,time,value,millis,meta,query,timeout,in,ms,new,request,info,mode,jdbc,sql,query,response,response,http,client,query,sql,request,return,new,tuple,response,cursor,response,rows
