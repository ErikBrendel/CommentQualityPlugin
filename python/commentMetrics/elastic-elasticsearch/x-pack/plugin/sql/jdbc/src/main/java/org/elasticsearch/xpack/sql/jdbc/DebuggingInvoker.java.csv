commented;modifiers;parameterAmount;loc;comment;code
false;public,final;3;35;;@Override public final Object invoke(Object proxy, Method method, Object[] args) throws Throwable {     String name = method.getName().     Class<?>[] params = method.getParameterTypes().     if ("equals".equals(name) && params.length == 1 && params[0] == Object.class) {         Object o = args[0].         if (o == null || !(o instanceof DebugProxy)) {             return Boolean.FALSE.         }         InvocationHandler ih = Proxy.getInvocationHandler(o).         return (ih instanceof DebuggingInvoker && target.equals(((DebuggingInvoker) ih).target)).     } else if ("hashCode".equals(name) && params.length == 0) {         return System.identityHashCode(proxy).     } else if ("toString".equals(name) && params.length == 0) {         return "Debug proxy for " + target.     }     try {         Object result = method.invoke(target, args).         log.logResult(method, args, result).         return result == null || result instanceof DebugProxy ? result : postProcess(result, proxy).     } catch (InvocationTargetException ex) {         log.logException(method, args, ex.getCause()).         throw ex.getCause().     } catch (Exception ex) {         // should not occur         log.logException(method, args, ex).         throw new JdbcSQLException(ex, "Debugging failed for [" + method + "]").     } }
false;protected;2;3;;protected Object postProcess(Object result, Object proxy) {     return result. }
false;;0;3;;Object target() {     return target. }
