commented;modifiers;parameterAmount;loc;comment;code
false;;0;4;;int displaySize() {     // 0 - means unknown     return displaySize. }
false;public;0;18;;@Override public String toString() {     StringBuilder b = new StringBuilder().     if (false == EMPTY.equals(table)) {         b.append(table).append('.').     }     b.append(name).append("<type=[").append(type).append(']').     if (false == EMPTY.equals(catalog)) {         b.append(" catalog=[").append(catalog).append(']').     }     if (false == EMPTY.equals(schema)) {         b.append(" schema=[").append(schema).append(']').     }     if (false == EMPTY.equals(label)) {         b.append(" label=[").append(label).append(']').     }     return b.append('>').toString(). }
false;public;1;14;;@Override public boolean equals(Object obj) {     if (obj == null || obj.getClass() != getClass()) {         return false.     }     JdbcColumnInfo other = (JdbcColumnInfo) obj.     return name.equals(other.name) && type.equals(other.type) && table.equals(other.table) && catalog.equals(other.catalog) && schema.equals(other.schema) && label.equals(other.label) && displaySize == other.displaySize. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(name, type, table, catalog, schema, label, displaySize). }
