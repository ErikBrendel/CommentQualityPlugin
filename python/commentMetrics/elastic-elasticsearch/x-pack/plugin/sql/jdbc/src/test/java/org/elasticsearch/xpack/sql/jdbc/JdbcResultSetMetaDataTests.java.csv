commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;public void testColumnsProperties() throws SQLException {     int maxColumnIndex = columns.size().     assertEquals(false, metaData.isAutoIncrement(randomIntBetween(1, maxColumnIndex))).     assertEquals(true, metaData.isCaseSensitive(randomIntBetween(1, maxColumnIndex))).     assertEquals(true, metaData.isSearchable(randomIntBetween(1, maxColumnIndex))).     assertEquals(false, metaData.isCurrency(randomIntBetween(1, maxColumnIndex))).     assertEquals(ResultSetMetaData.columnNullableUnknown, metaData.isNullable(randomIntBetween(1, maxColumnIndex))).     assertEquals(false, metaData.isSigned(1)).     assertEquals(true, metaData.isSigned(2)).     assertEquals(true, metaData.isSigned(3)).     assertEquals(true, metaData.isSigned(4)). }
false;public;0;11;;public void testColumnNamesAndLabels() throws SQLException {     assertEquals("test_keyword", metaData.getColumnName(1)).     assertEquals("test_integer", metaData.getColumnName(2)).     assertEquals("test_double", metaData.getColumnName(3)).     assertEquals("test_long", metaData.getColumnName(4)).     assertEquals("test_keyword", metaData.getColumnLabel(1)).     assertEquals("test_integer", metaData.getColumnLabel(2)).     assertEquals("test_double", metaData.getColumnLabel(3)).     assertEquals("custom_label", metaData.getColumnLabel(4)). }
