commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public void testRegistration() throws Exception {     driverManagerTemplate(d -> assertNotNull(d)). }
false;public;0;9;;public void testVersioning() throws Exception {     driverManagerTemplate(d -> {         /* This test will only work properly in gradle because in gradle we run the tests              * using the jar. */         assertNotEquals(String.valueOf(Version.CURRENT.major), d.getMajorVersion()).         assertNotEquals(String.valueOf(Version.CURRENT.minor), d.getMinorVersion()).     }). }
false;private,static;1;33;;private static void driverManagerTemplate(Consumer<EsDriver> c) throws Exception {     String url = "jdbc:es:localhost:9200/".     Driver driver = null.     try {         // can happen (if the driver jar was not loaded)         driver = DriverManager.getDriver(url).     } catch (SQLException ex) {         assertEquals("No suitable driver", ex.getMessage()).     }     boolean set = driver != null.     try {         EsDriver d = EsDriver.register().         if (driver != null) {             assertEquals(driver, d).         }         c.accept(d).         AccessController.doPrivileged((PrivilegedExceptionAction<Void>) () -> {             // mimic DriverManager and unregister the driver             EsDriver.deregister().             return null.         }).         SQLException ex = expectThrows(SQLException.class, () -> DriverManager.getDriver(url)).         assertEquals("No suitable driver", ex.getMessage()).     } finally {         if (set) {             EsDriver.register().         }     } }
