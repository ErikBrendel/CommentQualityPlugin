commented;modifiers;parameterAmount;loc;comment;code
false;public;2;4;;@Override public void applyStartedShards(RoutingAllocation allocation, List<ShardRouting> startedShards) { // noop }
false;public;2;4;;@Override public void applyFailedShards(RoutingAllocation allocation, List<FailedShard> failedShards) { // noop }
false;public;1;4;;@Override public void allocateUnassigned(RoutingAllocation allocation) { // noop }
false;public,static;1;5;;public static AllocationService createAllocationService(Settings settings) throws NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {     return createAllocationService(settings, new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)). }
false;public,static;2;6;;public static AllocationService createAllocationService(Settings settings, ClusterSettings clusterSettings) throws InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException {     return new AllocationService(defaultAllocationDeciders(settings, clusterSettings), NoopGatewayAllocator.INSTANCE, new BalancedShardsAllocator(settings), EmptyClusterInfoService.INSTANCE). }
false;public,static;2;7;;public static AllocationDeciders defaultAllocationDeciders(Settings settings, ClusterSettings clusterSettings) throws IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchMethodException {     Collection<AllocationDecider> deciders = ClusterModule.createAllocationDeciders(settings, clusterSettings, Collections.emptyList()).     return new AllocationDeciders(deciders). }
false;public,static;2;5;;public static DiscoveryNode newNode(String nodeId, Map<String, String> attributes) {     return new DiscoveryNode("", nodeId, new TransportAddress(TransportAddress.META_ADDRESS, portGenerator.incrementAndGet()), attributes, Sets.newHashSet(DiscoveryNode.Role.MASTER, DiscoveryNode.Role.DATA), Version.CURRENT). }
