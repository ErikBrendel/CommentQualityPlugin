commented;modifiers;parameterAmount;loc;comment;code
true;public;0;27;/**  * Simplest case: a module with no controller daemon.  */ ;/**  * Simplest case: a module with no controller daemon.  */ public void testNoControllerSpawn() throws IOException, InterruptedException {     Path esHome = createTempDir().resolve("esHome").     Settings.Builder settingsBuilder = Settings.builder().     settingsBuilder.put(Environment.PATH_HOME_SETTING.getKey(), esHome.toString()).     Settings settings = settingsBuilder.build().     Environment environment = TestEnvironment.newEnvironment(settings).     // This plugin will NOT have a controller daemon     Path plugin = environment.modulesFile().resolve("a_plugin").     Files.createDirectories(environment.modulesFile()).     Files.createDirectories(plugin).     PluginTestUtil.writePluginProperties(plugin, "description", "a_plugin", "version", Version.CURRENT.toString(), "elasticsearch.version", Version.CURRENT.toString(), "name", "a_plugin", "java.version", "1.8", "classname", "APlugin", "has.native.controller", "false").     try (Spawner spawner = new Spawner()) {         spawner.spawnNativeControllers(environment).         assertThat(spawner.getProcesses(), hasSize(0)).     } }
true;public;0;4;/**  * Two plugins - one with a controller daemon and one without.  */ ;/**  * Two plugins - one with a controller daemon and one without.  */ public void testControllerSpawn() throws Exception {     assertControllerSpawns(Environment::pluginsFile, false).     assertControllerSpawns(Environment::modulesFile, true). }
false;private;2;65;;private void assertControllerSpawns(final Function<Environment, Path> pluginsDirFinder, boolean expectSpawn) throws Exception {     /*          * On Windows you can not directly run a batch file - you have to run cmd.exe with the batch          * file as an argument and that's out of the remit of the controller daemon process spawner.          */     assumeFalse("This test does not work on Windows", Constants.WINDOWS).     Path esHome = createTempDir().resolve("esHome").     Settings.Builder settingsBuilder = Settings.builder().     settingsBuilder.put(Environment.PATH_HOME_SETTING.getKey(), esHome.toString()).     Settings settings = settingsBuilder.build().     Environment environment = TestEnvironment.newEnvironment(settings).     // this plugin will have a controller daemon     Path plugin = pluginsDirFinder.apply(environment).resolve("test_plugin").     Files.createDirectories(environment.modulesFile()).     Files.createDirectories(environment.pluginsFile()).     Files.createDirectories(plugin).     PluginTestUtil.writePluginProperties(plugin, "description", "test_plugin", "version", Version.CURRENT.toString(), "elasticsearch.version", Version.CURRENT.toString(), "name", "test_plugin", "java.version", "1.8", "classname", "TestPlugin", "has.native.controller", "true").     Path controllerProgram = Platforms.nativeControllerPath(plugin).     createControllerProgram(controllerProgram).     // this plugin will not have a controller daemon     Path otherPlugin = pluginsDirFinder.apply(environment).resolve("other_plugin").     Files.createDirectories(otherPlugin).     PluginTestUtil.writePluginProperties(otherPlugin, "description", "other_plugin", "version", Version.CURRENT.toString(), "elasticsearch.version", Version.CURRENT.toString(), "name", "other_plugin", "java.version", "1.8", "classname", "OtherPlugin", "has.native.controller", "false").     Spawner spawner = new Spawner().     spawner.spawnNativeControllers(environment).     List<Process> processes = spawner.getProcesses().     if (expectSpawn) {         // as there should only be a reference in the list for the module that had the controller daemon, we expect one here         assertThat(processes, hasSize(1)).         Process process = processes.get(0).         final InputStreamReader in = new InputStreamReader(process.getInputStream(), StandardCharsets.UTF_8).         try (BufferedReader stdoutReader = new BufferedReader(in)) {             String line = stdoutReader.readLine().             assertEquals("I am alive", line).             spawner.close().             // fail if the process does not die within one second. usually it will be even quicker but it depends on OS scheduling             assertTrue(process.waitFor(1, TimeUnit.SECONDS)).         }     } else {         assertThat(processes, hasSize(0)).     } }
false;public;0;31;;public void testControllerSpawnWithIncorrectDescriptor() throws IOException {     // this plugin will have a controller daemon     Path esHome = createTempDir().resolve("esHome").     Settings.Builder settingsBuilder = Settings.builder().     settingsBuilder.put(Environment.PATH_HOME_SETTING.getKey(), esHome.toString()).     Settings settings = settingsBuilder.build().     Environment environment = TestEnvironment.newEnvironment(settings).     Path plugin = environment.modulesFile().resolve("test_plugin").     Files.createDirectories(plugin).     PluginTestUtil.writePluginProperties(plugin, "description", "test_plugin", "version", Version.CURRENT.toString(), "elasticsearch.version", Version.CURRENT.toString(), "name", "test_plugin", "java.version", "1.8", "classname", "TestPlugin", "has.native.controller", "false").     Path controllerProgram = Platforms.nativeControllerPath(plugin).     createControllerProgram(controllerProgram).     Spawner spawner = new Spawner().     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> spawner.spawnNativeControllers(environment)).     assertThat(e.getMessage(), equalTo("module [test_plugin] does not have permission to fork native controller")). }
false;public;0;26;;public void testSpawnerHandlingOfDesktopServicesStoreFiles() throws IOException {     final Path esHome = createTempDir().resolve("home").     final Settings settings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), esHome.toString()).build().     final Environment environment = TestEnvironment.newEnvironment(settings).     Files.createDirectories(environment.modulesFile()).     Files.createDirectories(environment.pluginsFile()).     final Path desktopServicesStore = environment.modulesFile().resolve(".DS_Store").     Files.createFile(desktopServicesStore).     final Spawner spawner = new Spawner().     if (Constants.MAC_OS_X) {         // if the spawner were not skipping the Desktop Services Store files on macOS this would explode         spawner.spawnNativeControllers(environment).     } else {         // we do not ignore these files on non-macOS systems         final FileSystemException e = expectThrows(FileSystemException.class, () -> spawner.spawnNativeControllers(environment)).         if (Constants.WINDOWS) {             assertThat(e, instanceOf(NoSuchFileException.class)).         } else {             assertThat(e, hasToString(containsString("Not a directory"))).         }     } }
false;private;1;18;;private void createControllerProgram(final Path outputFile) throws IOException {     final Path outputDir = outputFile.getParent().     Files.createDirectories(outputDir).     Files.write(outputFile, CONTROLLER_SOURCE.getBytes(StandardCharsets.UTF_8)).     final PosixFileAttributeView view = Files.getFileAttributeView(outputFile, PosixFileAttributeView.class).     if (view != null) {         final Set<PosixFilePermission> perms = new HashSet<>().         perms.add(PosixFilePermission.OWNER_READ).         perms.add(PosixFilePermission.OWNER_WRITE).         perms.add(PosixFilePermission.OWNER_EXECUTE).         perms.add(PosixFilePermission.GROUP_READ).         perms.add(PosixFilePermission.GROUP_EXECUTE).         perms.add(PosixFilePermission.OTHERS_READ).         perms.add(PosixFilePermission.OTHERS_EXECUTE).         Files.setPosixFilePermissions(outputFile, perms).     } }
