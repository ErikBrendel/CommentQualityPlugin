commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;4;;@Override protected void execute(Terminal terminal, OptionSet options) throws Exception { }
false;public;0;7;;@Override public void close() throws IOException {     closed.set(true).     if (shouldThrow) {         throw new IOException("fail").     } }
false;public;0;35;;public void testCommandShutdownHook() throws Exception {     final AtomicBoolean closed = new AtomicBoolean().     final boolean shouldThrow = randomBoolean().     final Command command = new Command("test-command-shutdown-hook", () -> {     }) {          @Override         protected void execute(Terminal terminal, OptionSet options) throws Exception {         }          @Override         public void close() throws IOException {             closed.set(true).             if (shouldThrow) {                 throw new IOException("fail").             }         }     }.     final MockTerminal terminal = new MockTerminal().     command.main(new String[0], terminal).     assertNotNull(command.getShutdownHookThread()).     // successful removal here asserts that the runtime hook was installed in Command#main     assertTrue(Runtime.getRuntime().removeShutdownHook(command.getShutdownHookThread())).     command.getShutdownHookThread().run().     command.getShutdownHookThread().join().     assertTrue(closed.get()).     final String output = terminal.getOutput().     if (shouldThrow) {         // ensure that we dump the exception         assertThat(output, containsString("java.io.IOException: fail")).         // ensure that we dump the stack trace too         assertThat(output, containsString("\tat org.elasticsearch.cli.EvilCommandTests$1.close")).     } else {         assertThat(output, isEmptyString()).     } }
