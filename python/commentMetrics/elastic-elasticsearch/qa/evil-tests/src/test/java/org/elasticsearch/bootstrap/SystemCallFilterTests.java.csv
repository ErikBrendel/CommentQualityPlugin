commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Override public void setUp() throws Exception {     super.setUp().     assumeTrue("requires system call filter installation", Natives.isSystemCallFilterInstalled()).     // otherwise security manager will block the execution, no fun     assumeTrue("cannot test with security manager enabled", System.getSecurityManager() == null).     // instead we just forcefully run it for the test thread here.     if (!JNANatives.LOCAL_SYSTEM_CALL_FILTER_ALL) {         try {             SystemCallFilter.init(createTempDir()).         } catch (Exception e) {             throw new RuntimeException("unable to forcefully apply system call filter to test thread", e).         }     } }
false;public;0;21;;public void testNoExecution() throws Exception {     try {         Runtime.getRuntime().exec(EXECUTABLE).         fail("should not have been able to execute!").     } catch (Exception expected) {     // we can't guarantee how its converted, currently its an IOException, like this:     /*             java.io.IOException: Cannot run program "ls": error=13, Permission denied                     at __randomizedtesting.SeedInfo.seed([65E6C4BED11899E:FC6E1CA6AA2DB634]:0)                     at java.lang.ProcessBuilder.start(ProcessBuilder.java:1048)                     at java.lang.Runtime.exec(Runtime.java:620)                     ...                   Caused by: java.io.IOException: error=13, Permission denied                     at java.lang.UNIXProcess.forkAndExec(Native Method)                     at java.lang.UNIXProcess.<init>(UNIXProcess.java:248)                     at java.lang.ProcessImpl.start(ProcessImpl.java:134)                     at java.lang.ProcessBuilder.start(ProcessBuilder.java:1029)                     ...             */     } }
false;public;0;9;;@Override public void run() {     try {         Runtime.getRuntime().exec(EXECUTABLE).         fail("should not have been able to execute!").     } catch (Exception expected) {     // ok     } }
true;public;0;15;// make sure thread inherits this too (its documented that way) ;// make sure thread inherits this too (its documented that way) public void testNoExecutionFromThread() throws Exception {     Thread t = new Thread() {          @Override         public void run() {             try {                 Runtime.getRuntime().exec(EXECUTABLE).                 fail("should not have been able to execute!").             } catch (Exception expected) {             // ok             }         }     }.     t.start().     t.join(). }
