commented;modifiers;parameterAmount;loc;comment;code
true;public;0;9;/**  * Test that we can parse the set of permissions correctly for a simple policy  */ ;/**  * Test that we can parse the set of permissions correctly for a simple policy  */ public void testParsePermissions() throws Exception {     assumeTrue("test cannot run with security manager enabled", System.getSecurityManager() == null).     Path scratch = createTempDir().     Path testFile = this.getDataPath("security/simple-plugin-security.policy").     Set<String> actual = PluginSecurity.parsePermissions(testFile, scratch).     assertThat(actual, contains(PluginSecurity.formatPermission(new RuntimePermission("queuePrintJob")))). }
true;public;0;11;/**  * Test that we can parse the set of permissions correctly for a complex policy  */ ;/**  * Test that we can parse the set of permissions correctly for a complex policy  */ public void testParseTwoPermissions() throws Exception {     assumeTrue("test cannot run with security manager enabled", System.getSecurityManager() == null).     Path scratch = createTempDir().     Path testFile = this.getDataPath("security/complex-plugin-security.policy").     Set<String> actual = PluginSecurity.parsePermissions(testFile, scratch).     assertThat(actual, containsInAnyOrder(PluginSecurity.formatPermission(new RuntimePermission("getClassLoader")), PluginSecurity.formatPermission(new RuntimePermission("closeClassLoader")))). }
true;public;0;5;/**  * Test that we can format some simple permissions properly  */ ;/**  * Test that we can format some simple permissions properly  */ public void testFormatSimplePermission() throws Exception {     assertEquals("java.lang.RuntimePermission queuePrintJob", PluginSecurity.formatPermission(new RuntimePermission("queuePrintJob"))). }
true;public;0;9;/**  * Test that we can format an unresolved permission properly  */ ;/**  * Test that we can format an unresolved permission properly  */ public void testFormatUnresolvedPermission() throws Exception {     assumeTrue("test cannot run with security manager enabled", System.getSecurityManager() == null).     Path scratch = createTempDir().     Path testFile = this.getDataPath("security/unresolved-plugin-security.policy").     Set<String> permissions = PluginSecurity.parsePermissions(testFile, scratch).     assertThat(permissions, contains("org.fake.FakePermission fakeName")). }
