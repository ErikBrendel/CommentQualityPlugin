commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;public void testSetMaximumNumberOfThreads() throws IOException {     if (Constants.LINUX) {         final List<String> lines = Files.readAllLines(PathUtils.get("/proc/self/limits")).         for (final String line : lines) {             if (line != null && line.startsWith("Max processes")) {                 final String[] fields = line.split("\\s+").                 final long limit = "unlimited".equals(fields[2]) ? JNACLibrary.RLIM_INFINITY : Long.parseLong(fields[2]).                 assertThat(JNANatives.MAX_NUMBER_OF_THREADS, equalTo(limit)).                 return.             }         }         fail("should have read max processes from /proc/self/limits").     } else {         assertThat(JNANatives.MAX_NUMBER_OF_THREADS, equalTo(-1L)).     } }
false;public;0;22;;public void testSetMaxSizeVirtualMemory() throws IOException {     if (Constants.LINUX) {         final List<String> lines = Files.readAllLines(PathUtils.get("/proc/self/limits")).         for (final String line : lines) {             if (line != null && line.startsWith("Max address space")) {                 final String[] fields = line.split("\\s+").                 final String limit = fields[3].                 assertThat(JNANatives.rlimitToString(JNANatives.MAX_SIZE_VIRTUAL_MEMORY), equalTo(limit)).                 return.             }         }         fail("should have read max size virtual memory from /proc/self/limits").     } else if (Constants.MAC_OS_X) {         assertThat(JNANatives.MAX_SIZE_VIRTUAL_MEMORY, anyOf(equalTo(Long.MIN_VALUE), greaterThanOrEqualTo(0L))).     } else {         assertThat(JNANatives.MAX_SIZE_VIRTUAL_MEMORY, equalTo(Long.MIN_VALUE)).     } }
false;public;0;22;;public void testSetMaxFileSize() throws IOException {     if (Constants.LINUX) {         final List<String> lines = Files.readAllLines(PathUtils.get("/proc/self/limits")).         for (final String line : lines) {             if (line != null && line.startsWith("Max file size")) {                 final String[] fields = line.split("\\s+").                 final String limit = fields[3].                 assertThat(JNANatives.rlimitToString(JNANatives.MAX_FILE_SIZE), equalTo(limit)).                 return.             }         }         fail("should have read max file size from /proc/self/limits").     } else if (Constants.MAC_OS_X) {         assertThat(JNANatives.MAX_FILE_SIZE, anyOf(equalTo(Long.MIN_VALUE), greaterThanOrEqualTo(0L))).     } else {         assertThat(JNANatives.MAX_FILE_SIZE, equalTo(Long.MIN_VALUE)).     } }
