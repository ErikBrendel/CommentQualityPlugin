# id;timestamp;commentText;codeText;commentWords;codeWords
IndexingIT -> private int indexDocWithConcurrentUpdates(String index, final int docId, int nUpdates) throws IOException, InterruptedException;1524684173;Indexes a document in <code>index</code> with <code>docId</code> then concurrently updates the same document_<code>nUpdates</code> times__@return the document version after updates;private int indexDocWithConcurrentUpdates(String index, final int docId, int nUpdates) throws IOException, InterruptedException {_        indexDocs(index, docId, 1)__        Thread[] indexThreads = new Thread[nUpdates]__        for (int i = 0_ i < nUpdates_ i++) {_            indexThreads[i] = new Thread(() -> {_                try {_                    indexDocs(index, docId, 1)__                } catch (IOException e) {_                    throw new AssertionError("failed while indexing [" + e.getMessage() + "]")__                }_            })__            indexThreads[i].start()__        }_        for (Thread indexThread : indexThreads) {_            indexThread.join()__        }_        return nUpdates + 1__    };indexes,a,document,in,code,index,code,with,code,doc,id,code,then,concurrently,updates,the,same,document,code,n,updates,code,times,return,the,document,version,after,updates;private,int,index,doc,with,concurrent,updates,string,index,final,int,doc,id,int,n,updates,throws,ioexception,interrupted,exception,index,docs,index,doc,id,1,thread,index,threads,new,thread,n,updates,for,int,i,0,i,n,updates,i,index,threads,i,new,thread,try,index,docs,index,doc,id,1,catch,ioexception,e,throw,new,assertion,error,failed,while,indexing,e,get,message,index,threads,i,start,for,thread,index,thread,index,threads,index,thread,join,return,n,updates,1
IndexingIT -> private int indexDocWithConcurrentUpdates(String index, final int docId, int nUpdates) throws IOException, InterruptedException;1526449283;Indexes a document in <code>index</code> with <code>docId</code> then concurrently updates the same document_<code>nUpdates</code> times__@return the document version after updates;private int indexDocWithConcurrentUpdates(String index, final int docId, int nUpdates) throws IOException, InterruptedException {_        indexDocs(index, docId, 1)__        Thread[] indexThreads = new Thread[nUpdates]__        for (int i = 0_ i < nUpdates_ i++) {_            indexThreads[i] = new Thread(() -> {_                try {_                    indexDocs(index, docId, 1)__                } catch (IOException e) {_                    throw new AssertionError("failed while indexing [" + e.getMessage() + "]")__                }_            })__            indexThreads[i].start()__        }_        for (Thread indexThread : indexThreads) {_            indexThread.join()__        }_        return nUpdates + 1__    };indexes,a,document,in,code,index,code,with,code,doc,id,code,then,concurrently,updates,the,same,document,code,n,updates,code,times,return,the,document,version,after,updates;private,int,index,doc,with,concurrent,updates,string,index,final,int,doc,id,int,n,updates,throws,ioexception,interrupted,exception,index,docs,index,doc,id,1,thread,index,threads,new,thread,n,updates,for,int,i,0,i,n,updates,i,index,threads,i,new,thread,try,index,docs,index,doc,id,1,catch,ioexception,e,throw,new,assertion,error,failed,while,indexing,e,get,message,index,threads,i,start,for,thread,index,thread,index,threads,index,thread,join,return,n,updates,1
IndexingIT -> private int indexDocWithConcurrentUpdates(String index, final int docId, int nUpdates) throws IOException, InterruptedException;1544491368;Indexes a document in <code>index</code> with <code>docId</code> then concurrently updates the same document_<code>nUpdates</code> times__@return the document version after updates;private int indexDocWithConcurrentUpdates(String index, final int docId, int nUpdates) throws IOException, InterruptedException {_        indexDocs(index, docId, 1)__        Thread[] indexThreads = new Thread[nUpdates]__        for (int i = 0_ i < nUpdates_ i++) {_            indexThreads[i] = new Thread(() -> {_                try {_                    indexDocs(index, docId, 1)__                } catch (IOException e) {_                    throw new AssertionError("failed while indexing [" + e.getMessage() + "]")__                }_            })__            indexThreads[i].start()__        }_        for (Thread indexThread : indexThreads) {_            indexThread.join()__        }_        return nUpdates + 1__    };indexes,a,document,in,code,index,code,with,code,doc,id,code,then,concurrently,updates,the,same,document,code,n,updates,code,times,return,the,document,version,after,updates;private,int,index,doc,with,concurrent,updates,string,index,final,int,doc,id,int,n,updates,throws,ioexception,interrupted,exception,index,docs,index,doc,id,1,thread,index,threads,new,thread,n,updates,for,int,i,0,i,n,updates,i,index,threads,i,new,thread,try,index,docs,index,doc,id,1,catch,ioexception,e,throw,new,assertion,error,failed,while,indexing,e,get,message,index,threads,i,start,for,thread,index,thread,index,threads,index,thread,join,return,n,updates,1
IndexingIT -> private int indexDocWithConcurrentUpdates(String index, final int docId, int nUpdates) throws IOException, InterruptedException;1544648252;Indexes a document in <code>index</code> with <code>docId</code> then concurrently updates the same document_<code>nUpdates</code> times__@return the document version after updates;private int indexDocWithConcurrentUpdates(String index, final int docId, int nUpdates) throws IOException, InterruptedException {_        indexDocs(index, docId, 1)__        Thread[] indexThreads = new Thread[nUpdates]__        for (int i = 0_ i < nUpdates_ i++) {_            indexThreads[i] = new Thread(() -> {_                try {_                    indexDocs(index, docId, 1)__                } catch (IOException e) {_                    throw new AssertionError("failed while indexing [" + e.getMessage() + "]")__                }_            })__            indexThreads[i].start()__        }_        for (Thread indexThread : indexThreads) {_            indexThread.join()__        }_        return nUpdates + 1__    };indexes,a,document,in,code,index,code,with,code,doc,id,code,then,concurrently,updates,the,same,document,code,n,updates,code,times,return,the,document,version,after,updates;private,int,index,doc,with,concurrent,updates,string,index,final,int,doc,id,int,n,updates,throws,ioexception,interrupted,exception,index,docs,index,doc,id,1,thread,index,threads,new,thread,n,updates,for,int,i,0,i,n,updates,i,index,threads,i,new,thread,try,index,docs,index,doc,id,1,catch,ioexception,e,throw,new,assertion,error,failed,while,indexing,e,get,message,index,threads,i,start,for,thread,index,thread,index,threads,index,thread,join,return,n,updates,1
IndexingIT -> private int indexDocWithConcurrentUpdates(String index, final int docId, int nUpdates) throws IOException, InterruptedException;1545141229;Indexes a document in <code>index</code> with <code>docId</code> then concurrently updates the same document_<code>nUpdates</code> times__@return the document version after updates;private int indexDocWithConcurrentUpdates(String index, final int docId, int nUpdates) throws IOException, InterruptedException {_        indexDocs(index, docId, 1)__        Thread[] indexThreads = new Thread[nUpdates]__        for (int i = 0_ i < nUpdates_ i++) {_            indexThreads[i] = new Thread(() -> {_                try {_                    indexDocs(index, docId, 1)__                } catch (IOException e) {_                    throw new AssertionError("failed while indexing [" + e.getMessage() + "]")__                }_            })__            indexThreads[i].start()__        }_        for (Thread indexThread : indexThreads) {_            indexThread.join()__        }_        return nUpdates + 1__    };indexes,a,document,in,code,index,code,with,code,doc,id,code,then,concurrently,updates,the,same,document,code,n,updates,code,times,return,the,document,version,after,updates;private,int,index,doc,with,concurrent,updates,string,index,final,int,doc,id,int,n,updates,throws,ioexception,interrupted,exception,index,docs,index,doc,id,1,thread,index,threads,new,thread,n,updates,for,int,i,0,i,n,updates,i,index,threads,i,new,thread,try,index,docs,index,doc,id,1,catch,ioexception,e,throw,new,assertion,error,failed,while,indexing,e,get,message,index,threads,i,start,for,thread,index,thread,index,threads,index,thread,join,return,n,updates,1
