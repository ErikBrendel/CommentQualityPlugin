# id;timestamp;commentText;codeText;commentWords;codeWords
XPackIT -> public void testBasicFeature() throws IOException;1527096592;Test a basic feature (SQL) which doesn't require any trial license._Note that the test methods on this class can run in any order so we_<strong>might</strong> have already installed a trial license.;public void testBasicFeature() throws IOException {_        Request bulk = new Request("POST", "/sql_test/doc/_bulk")__        bulk.setJsonEntity(_              "{\"index\":{}}\n"_            + "{\"f\": \"1\"}\n"_            + "{\"index\":{}}\n"_            + "{\"f\": \"2\"}\n")__        bulk.addParameter("refresh", "true")__        client().performRequest(bulk)___        Request sql = new Request("POST", "/_xpack/sql")__        sql.setJsonEntity("{\"query\": \"SELECT * FROM sql_test WHERE f > 1 ORDER BY f ASC\"}")__        String response = EntityUtils.toString(client().performRequest(sql).getEntity())__        assertEquals("{\"columns\":[{\"name\":\"f\",\"type\":\"text\"}],\"rows\":[[\"2\"]]}", response)__    };test,a,basic,feature,sql,which,doesn,t,require,any,trial,license,note,that,the,test,methods,on,this,class,can,run,in,any,order,so,we,strong,might,strong,have,already,installed,a,trial,license;public,void,test,basic,feature,throws,ioexception,request,bulk,new,request,post,doc,bulk,set,json,entity,index,n,f,1,n,index,n,f,2,n,bulk,add,parameter,refresh,true,client,perform,request,bulk,request,sql,new,request,post,sql,sql,set,json,entity,query,select,from,where,f,1,order,by,f,asc,string,response,entity,utils,to,string,client,perform,request,sql,get,entity,assert,equals,columns,name,f,type,text,rows,2,response
XPackIT -> public void testBasicFeature() throws IOException;1528762805;Test a basic feature (SQL) which doesn't require any trial license._Note that the test methods on this class can run in any order so we_<strong>might</strong> have already installed a trial license.;public void testBasicFeature() throws IOException {_        Request bulk = new Request("POST", "/sql_test/doc/_bulk")__        bulk.setJsonEntity(_              "{\"index\":{}}\n"_            + "{\"f\": \"1\"}\n"_            + "{\"index\":{}}\n"_            + "{\"f\": \"2\"}\n")__        bulk.addParameter("refresh", "true")__        client().performRequest(bulk)___        Request sql = new Request("POST", "/_xpack/sql")__        sql.setJsonEntity("{\"query\": \"SELECT * FROM sql_test WHERE f > 1 ORDER BY f ASC\"}")__        String response = EntityUtils.toString(client().performRequest(sql).getEntity())__        assertEquals("{\"columns\":[{\"name\":\"f\",\"type\":\"text\"}],\"rows\":[[\"2\"]]}", response)__    };test,a,basic,feature,sql,which,doesn,t,require,any,trial,license,note,that,the,test,methods,on,this,class,can,run,in,any,order,so,we,strong,might,strong,have,already,installed,a,trial,license;public,void,test,basic,feature,throws,ioexception,request,bulk,new,request,post,doc,bulk,set,json,entity,index,n,f,1,n,index,n,f,2,n,bulk,add,parameter,refresh,true,client,perform,request,bulk,request,sql,new,request,post,sql,sql,set,json,entity,query,select,from,where,f,1,order,by,f,asc,string,response,entity,utils,to,string,client,perform,request,sql,get,entity,assert,equals,columns,name,f,type,text,rows,2,response
XPackIT -> public void testBasicFeature() throws IOException;1543374981;Test a basic feature (SQL) which doesn't require any trial license._Note that the test methods on this class can run in any order so we_<strong>might</strong> have already installed a trial license.;public void testBasicFeature() throws IOException {_        Request bulk = new Request("POST", "/sql_test/doc/_bulk")__        bulk.setJsonEntity(_              "{\"index\":{}}\n"_            + "{\"f\": \"1\"}\n"_            + "{\"index\":{}}\n"_            + "{\"f\": \"2\"}\n")__        bulk.addParameter("refresh", "true")__        client().performRequest(bulk)___        Request sql = new Request("POST", "/_sql")__        sql.setJsonEntity("{\"query\": \"SELECT * FROM sql_test WHERE f > 1 ORDER BY f ASC\"}")__        String response = EntityUtils.toString(client().performRequest(sql).getEntity())__        assertEquals("{\"columns\":[{\"name\":\"f\",\"type\":\"text\"}],\"rows\":[[\"2\"]]}", response)__    };test,a,basic,feature,sql,which,doesn,t,require,any,trial,license,note,that,the,test,methods,on,this,class,can,run,in,any,order,so,we,strong,might,strong,have,already,installed,a,trial,license;public,void,test,basic,feature,throws,ioexception,request,bulk,new,request,post,doc,bulk,set,json,entity,index,n,f,1,n,index,n,f,2,n,bulk,add,parameter,refresh,true,client,perform,request,bulk,request,sql,new,request,post,sql,set,json,entity,query,select,from,where,f,1,order,by,f,asc,string,response,entity,utils,to,string,client,perform,request,sql,get,entity,assert,equals,columns,name,f,type,text,rows,2,response
XPackIT -> public void testBasicFeature() throws IOException;1543411475;Test a basic feature (SQL) which doesn't require any trial license._Note that the test methods on this class can run in any order so we_<strong>might</strong> have already installed a trial license.;public void testBasicFeature() throws IOException {_        Request bulk = new Request("POST", "/sql_test/doc/_bulk")__        bulk.setJsonEntity(_              "{\"index\":{}}\n"_            + "{\"f\": \"1\"}\n"_            + "{\"index\":{}}\n"_            + "{\"f\": \"2\"}\n")__        bulk.addParameter("refresh", "true")__        client().performRequest(bulk)___        Request sql = new Request("POST", "/_sql")__        sql.setJsonEntity("{\"query\": \"SELECT * FROM sql_test WHERE f > 1 ORDER BY f ASC\"}")__        String response = EntityUtils.toString(client().performRequest(sql).getEntity())__        assertEquals("{\"columns\":[{\"name\":\"f\",\"type\":\"text\"}],\"rows\":[[\"2\"]]}", response)__    };test,a,basic,feature,sql,which,doesn,t,require,any,trial,license,note,that,the,test,methods,on,this,class,can,run,in,any,order,so,we,strong,might,strong,have,already,installed,a,trial,license;public,void,test,basic,feature,throws,ioexception,request,bulk,new,request,post,doc,bulk,set,json,entity,index,n,f,1,n,index,n,f,2,n,bulk,add,parameter,refresh,true,client,perform,request,bulk,request,sql,new,request,post,sql,set,json,entity,query,select,from,where,f,1,order,by,f,asc,string,response,entity,utils,to,string,client,perform,request,sql,get,entity,assert,equals,columns,name,f,type,text,rows,2,response
XPackIT -> public void testBasicFeature() throws IOException;1544214851;Test a basic feature (SQL) which doesn't require any trial license._Note that the test methods on this class can run in any order so we_<strong>might</strong> have already installed a trial license.;public void testBasicFeature() throws IOException {_        Request bulk = new Request("POST", "/sql_test/doc/_bulk")__        bulk.setJsonEntity(_              "{\"index\":{}}\n"_            + "{\"f\": \"1\"}\n"_            + "{\"index\":{}}\n"_            + "{\"f\": \"2\"}\n")__        bulk.addParameter("refresh", "true")__        client().performRequest(bulk)___        Request sql = new Request("POST", "/_sql")__        sql.setJsonEntity("{\"query\": \"SELECT * FROM sql_test WHERE f > 1 ORDER BY f ASC\"}")__        String response = EntityUtils.toString(client().performRequest(sql).getEntity())__        assertEquals("{\"columns\":[{\"name\":\"f\",\"type\":\"text\"}],\"rows\":[[\"2\"]]}", response)__    };test,a,basic,feature,sql,which,doesn,t,require,any,trial,license,note,that,the,test,methods,on,this,class,can,run,in,any,order,so,we,strong,might,strong,have,already,installed,a,trial,license;public,void,test,basic,feature,throws,ioexception,request,bulk,new,request,post,doc,bulk,set,json,entity,index,n,f,1,n,index,n,f,2,n,bulk,add,parameter,refresh,true,client,perform,request,bulk,request,sql,new,request,post,sql,set,json,entity,query,select,from,where,f,1,order,by,f,asc,string,response,entity,utils,to,string,client,perform,request,sql,get,entity,assert,equals,columns,name,f,type,text,rows,2,response
XPackIT -> public void testBasicFeature() throws IOException;1547156119;Test a basic feature (SQL) which doesn't require any trial license._Note that the test methods on this class can run in any order so we_<strong>might</strong> have already installed a trial license.;public void testBasicFeature() throws IOException {_        Request bulk = new Request("POST", "/sql_test/doc/_bulk")__        bulk.setJsonEntity(_              "{\"index\":{}}\n"_            + "{\"f\": \"1\"}\n"_            + "{\"index\":{}}\n"_            + "{\"f\": \"2\"}\n")__        bulk.addParameter("refresh", "true")__        bulk.setOptions(expectWarnings(RestBulkAction.TYPES_DEPRECATION_MESSAGE))__        client().performRequest(bulk)___        Request sql = new Request("POST", "/_sql")__        sql.setJsonEntity("{\"query\": \"SELECT * FROM sql_test WHERE f > 1 ORDER BY f ASC\"}")__        String response = EntityUtils.toString(client().performRequest(sql).getEntity())__        assertEquals("{\"columns\":[{\"name\":\"f\",\"type\":\"text\"}],\"rows\":[[\"2\"]]}", response)__    };test,a,basic,feature,sql,which,doesn,t,require,any,trial,license,note,that,the,test,methods,on,this,class,can,run,in,any,order,so,we,strong,might,strong,have,already,installed,a,trial,license;public,void,test,basic,feature,throws,ioexception,request,bulk,new,request,post,doc,bulk,set,json,entity,index,n,f,1,n,index,n,f,2,n,bulk,add,parameter,refresh,true,bulk,set,options,expect,warnings,rest,bulk,action,client,perform,request,bulk,request,sql,new,request,post,sql,set,json,entity,query,select,from,where,f,1,order,by,f,asc,string,response,entity,utils,to,string,client,perform,request,sql,get,entity,assert,equals,columns,name,f,type,text,rows,2,response
XPackIT -> public void testBasicFeature() throws IOException;1548103037;Test a basic feature (SQL) which doesn't require any trial license._Note that the test methods on this class can run in any order so we_<strong>might</strong> have already installed a trial license.;public void testBasicFeature() throws IOException {_        Request bulk = new Request("POST", "/sql_test/doc/_bulk")__        bulk.setJsonEntity(_              "{\"index\":{}}\n"_            + "{\"f\": \"1\"}\n"_            + "{\"index\":{}}\n"_            + "{\"f\": \"2\"}\n")__        bulk.addParameter("refresh", "true")__        bulk.setOptions(expectWarnings(RestBulkAction.TYPES_DEPRECATION_MESSAGE))__        client().performRequest(bulk)___        Request sql = new Request("POST", "/_sql")__        sql.setJsonEntity("{\"query\": \"SELECT * FROM sql_test WHERE f > 1 ORDER BY f ASC\"}")__        String response = EntityUtils.toString(client().performRequest(sql).getEntity())__        assertEquals("{\"columns\":[{\"name\":\"f\",\"type\":\"text\"}],\"rows\":[[\"2\"]]}", response)__    };test,a,basic,feature,sql,which,doesn,t,require,any,trial,license,note,that,the,test,methods,on,this,class,can,run,in,any,order,so,we,strong,might,strong,have,already,installed,a,trial,license;public,void,test,basic,feature,throws,ioexception,request,bulk,new,request,post,doc,bulk,set,json,entity,index,n,f,1,n,index,n,f,2,n,bulk,add,parameter,refresh,true,bulk,set,options,expect,warnings,rest,bulk,action,client,perform,request,bulk,request,sql,new,request,post,sql,set,json,entity,query,select,from,where,f,1,order,by,f,asc,string,response,entity,utils,to,string,client,perform,request,sql,get,entity,assert,equals,columns,name,f,type,text,rows,2,response
XPackIT -> public void testTrialLicense() throws IOException;1527096592;Test creating a trial license and using it. This is interesting because_our other tests test cover starting a new cluster with the default_distribution and enabling the trial license but this test is the only_one that can upgrade from the oss distribution to the default_distribution with xpack and the create a trial license. We don't_<strong>do</strong> a lot with the trial license because for the most_part those things are tested elsewhere, off in xpack. But we do use the_trial license a little bit to make sure that it works.;public void testTrialLicense() throws IOException {_        Request startTrial = new Request("POST", "/_xpack/license/start_trial")__        startTrial.addParameter("acknowledge", "true")__        client().performRequest(startTrial)___        String noJobs = EntityUtils.toString(_            client().performRequest(new Request("GET", "/_xpack/ml/anomaly_detectors")).getEntity())__        assertEquals("{\"count\":0,\"jobs\":[]}", noJobs)___        Request createJob = new Request("PUT", "/_xpack/ml/anomaly_detectors/test_job")__        createJob.setJsonEntity(_                  "{\n"_                + "  \"analysis_config\" : {\n"_                + "    \"bucket_span\": \"10m\",\n"_                + "    \"detectors\": [\n"_                + "      {\n"_                + "        \"function\": \"sum\",\n"_                + "        \"field_name\": \"total\"\n"_                + "      }\n"_                + "    ]\n"_                + "  },\n"_                + "  \"data_description\": {\n"_                + "    \"time_field\": \"timestamp\",\n"_                + "    \"time_format\": \"epoch_ms\"\n"_                + "  }\n"_                + "}\n")__        client().performRequest(createJob)__    };test,creating,a,trial,license,and,using,it,this,is,interesting,because,our,other,tests,test,cover,starting,a,new,cluster,with,the,default,distribution,and,enabling,the,trial,license,but,this,test,is,the,only,one,that,can,upgrade,from,the,oss,distribution,to,the,default,distribution,with,xpack,and,the,create,a,trial,license,we,don,t,strong,do,strong,a,lot,with,the,trial,license,because,for,the,most,part,those,things,are,tested,elsewhere,off,in,xpack,but,we,do,use,the,trial,license,a,little,bit,to,make,sure,that,it,works;public,void,test,trial,license,throws,ioexception,request,start,trial,new,request,post,license,start,trial,add,parameter,acknowledge,true,client,perform,request,start,trial,string,no,jobs,entity,utils,to,string,client,perform,request,new,request,get,ml,get,entity,assert,equals,count,0,jobs,no,jobs,request,create,job,new,request,put,ml,create,job,set,json,entity,n,n,10m,n,detectors,n,n,function,sum,n,total,n,n,n,n,n,timestamp,n,n,n,n,client,perform,request,create,job
XPackIT -> public void testTrialLicense() throws IOException;1528762805;Test creating a trial license and using it. This is interesting because_our other tests test cover starting a new cluster with the default_distribution and enabling the trial license but this test is the only_one that can upgrade from the oss distribution to the default_distribution with xpack and the create a trial license. We don't_<strong>do</strong> a lot with the trial license because for the most_part those things are tested elsewhere, off in xpack. But we do use the_trial license a little bit to make sure that it works.;public void testTrialLicense() throws IOException {_        Request startTrial = new Request("POST", "/_xpack/license/start_trial")__        startTrial.addParameter("acknowledge", "true")__        client().performRequest(startTrial)___        String noJobs = EntityUtils.toString(_            client().performRequest(new Request("GET", "/_xpack/ml/anomaly_detectors")).getEntity())__        assertEquals("{\"count\":0,\"jobs\":[]}", noJobs)___        Request createJob = new Request("PUT", "/_xpack/ml/anomaly_detectors/test_job")__        createJob.setJsonEntity(_                  "{\n"_                + "  \"analysis_config\" : {\n"_                + "    \"bucket_span\": \"10m\",\n"_                + "    \"detectors\": [\n"_                + "      {\n"_                + "        \"function\": \"sum\",\n"_                + "        \"field_name\": \"total\"\n"_                + "      }\n"_                + "    ]\n"_                + "  },\n"_                + "  \"data_description\": {\n"_                + "    \"time_field\": \"timestamp\",\n"_                + "    \"time_format\": \"epoch_ms\"\n"_                + "  }\n"_                + "}\n")__        client().performRequest(createJob)__    };test,creating,a,trial,license,and,using,it,this,is,interesting,because,our,other,tests,test,cover,starting,a,new,cluster,with,the,default,distribution,and,enabling,the,trial,license,but,this,test,is,the,only,one,that,can,upgrade,from,the,oss,distribution,to,the,default,distribution,with,xpack,and,the,create,a,trial,license,we,don,t,strong,do,strong,a,lot,with,the,trial,license,because,for,the,most,part,those,things,are,tested,elsewhere,off,in,xpack,but,we,do,use,the,trial,license,a,little,bit,to,make,sure,that,it,works;public,void,test,trial,license,throws,ioexception,request,start,trial,new,request,post,license,start,trial,add,parameter,acknowledge,true,client,perform,request,start,trial,string,no,jobs,entity,utils,to,string,client,perform,request,new,request,get,ml,get,entity,assert,equals,count,0,jobs,no,jobs,request,create,job,new,request,put,ml,create,job,set,json,entity,n,n,10m,n,detectors,n,n,function,sum,n,total,n,n,n,n,n,timestamp,n,n,n,n,client,perform,request,create,job
XPackIT -> public void testTrialLicense() throws IOException;1543374981;Test creating a trial license and using it. This is interesting because_our other tests test cover starting a new cluster with the default_distribution and enabling the trial license but this test is the only_one that can upgrade from the oss distribution to the default_distribution with xpack and the create a trial license. We don't_<strong>do</strong> a lot with the trial license because for the most_part those things are tested elsewhere, off in xpack. But we do use the_trial license a little bit to make sure that it works.;public void testTrialLicense() throws IOException {_        Request startTrial = new Request("POST", "/_xpack/license/start_trial")__        startTrial.addParameter("acknowledge", "true")__        client().performRequest(startTrial)___        String noJobs = EntityUtils.toString(_            client().performRequest(new Request("GET", "/_xpack/ml/anomaly_detectors")).getEntity())__        assertEquals("{\"count\":0,\"jobs\":[]}", noJobs)___        Request createJob = new Request("PUT", "/_xpack/ml/anomaly_detectors/test_job")__        createJob.setJsonEntity(_                  "{\n"_                + "  \"analysis_config\" : {\n"_                + "    \"bucket_span\": \"10m\",\n"_                + "    \"detectors\": [\n"_                + "      {\n"_                + "        \"function\": \"sum\",\n"_                + "        \"field_name\": \"total\"\n"_                + "      }\n"_                + "    ]\n"_                + "  },\n"_                + "  \"data_description\": {\n"_                + "    \"time_field\": \"timestamp\",\n"_                + "    \"time_format\": \"epoch_ms\"\n"_                + "  }\n"_                + "}\n")__        client().performRequest(createJob)__    };test,creating,a,trial,license,and,using,it,this,is,interesting,because,our,other,tests,test,cover,starting,a,new,cluster,with,the,default,distribution,and,enabling,the,trial,license,but,this,test,is,the,only,one,that,can,upgrade,from,the,oss,distribution,to,the,default,distribution,with,xpack,and,the,create,a,trial,license,we,don,t,strong,do,strong,a,lot,with,the,trial,license,because,for,the,most,part,those,things,are,tested,elsewhere,off,in,xpack,but,we,do,use,the,trial,license,a,little,bit,to,make,sure,that,it,works;public,void,test,trial,license,throws,ioexception,request,start,trial,new,request,post,license,start,trial,add,parameter,acknowledge,true,client,perform,request,start,trial,string,no,jobs,entity,utils,to,string,client,perform,request,new,request,get,ml,get,entity,assert,equals,count,0,jobs,no,jobs,request,create,job,new,request,put,ml,create,job,set,json,entity,n,n,10m,n,detectors,n,n,function,sum,n,total,n,n,n,n,n,timestamp,n,n,n,n,client,perform,request,create,job
XPackIT -> public void testTrialLicense() throws IOException;1543411475;Test creating a trial license and using it. This is interesting because_our other tests test cover starting a new cluster with the default_distribution and enabling the trial license but this test is the only_one that can upgrade from the oss distribution to the default_distribution with xpack and the create a trial license. We don't_<strong>do</strong> a lot with the trial license because for the most_part those things are tested elsewhere, off in xpack. But we do use the_trial license a little bit to make sure that it works.;public void testTrialLicense() throws IOException {_        Request startTrial = new Request("POST", "/_license/start_trial")__        startTrial.addParameter("acknowledge", "true")__        client().performRequest(startTrial)___        String noJobs = EntityUtils.toString(_            client().performRequest(new Request("GET", "/_xpack/ml/anomaly_detectors")).getEntity())__        assertEquals("{\"count\":0,\"jobs\":[]}", noJobs)___        Request createJob = new Request("PUT", "/_xpack/ml/anomaly_detectors/test_job")__        createJob.setJsonEntity(_                  "{\n"_                + "  \"analysis_config\" : {\n"_                + "    \"bucket_span\": \"10m\",\n"_                + "    \"detectors\": [\n"_                + "      {\n"_                + "        \"function\": \"sum\",\n"_                + "        \"field_name\": \"total\"\n"_                + "      }\n"_                + "    ]\n"_                + "  },\n"_                + "  \"data_description\": {\n"_                + "    \"time_field\": \"timestamp\",\n"_                + "    \"time_format\": \"epoch_ms\"\n"_                + "  }\n"_                + "}\n")__        client().performRequest(createJob)__    };test,creating,a,trial,license,and,using,it,this,is,interesting,because,our,other,tests,test,cover,starting,a,new,cluster,with,the,default,distribution,and,enabling,the,trial,license,but,this,test,is,the,only,one,that,can,upgrade,from,the,oss,distribution,to,the,default,distribution,with,xpack,and,the,create,a,trial,license,we,don,t,strong,do,strong,a,lot,with,the,trial,license,because,for,the,most,part,those,things,are,tested,elsewhere,off,in,xpack,but,we,do,use,the,trial,license,a,little,bit,to,make,sure,that,it,works;public,void,test,trial,license,throws,ioexception,request,start,trial,new,request,post,start,trial,add,parameter,acknowledge,true,client,perform,request,start,trial,string,no,jobs,entity,utils,to,string,client,perform,request,new,request,get,ml,get,entity,assert,equals,count,0,jobs,no,jobs,request,create,job,new,request,put,ml,create,job,set,json,entity,n,n,10m,n,detectors,n,n,function,sum,n,total,n,n,n,n,n,timestamp,n,n,n,n,client,perform,request,create,job
XPackIT -> public void testTrialLicense() throws IOException;1544214851;Test creating a trial license and using it. This is interesting because_our other tests test cover starting a new cluster with the default_distribution and enabling the trial license but this test is the only_one that can upgrade from the oss distribution to the default_distribution with xpack and the create a trial license. We don't_<strong>do</strong> a lot with the trial license because for the most_part those things are tested elsewhere, off in xpack. But we do use the_trial license a little bit to make sure that it works.;public void testTrialLicense() throws IOException {_        Request startTrial = new Request("POST", "/_license/start_trial")__        startTrial.addParameter("acknowledge", "true")__        client().performRequest(startTrial)___        String noJobs = EntityUtils.toString(_            client().performRequest(new Request("GET", "/_ml/anomaly_detectors")).getEntity())__        assertEquals("{\"count\":0,\"jobs\":[]}", noJobs)___        Request createJob = new Request("PUT", "/_ml/anomaly_detectors/test_job")__        createJob.setJsonEntity(_                  "{\n"_                + "  \"analysis_config\" : {\n"_                + "    \"bucket_span\": \"10m\",\n"_                + "    \"detectors\": [\n"_                + "      {\n"_                + "        \"function\": \"sum\",\n"_                + "        \"field_name\": \"total\"\n"_                + "      }\n"_                + "    ]\n"_                + "  },\n"_                + "  \"data_description\": {\n"_                + "    \"time_field\": \"timestamp\",\n"_                + "    \"time_format\": \"epoch_ms\"\n"_                + "  }\n"_                + "}\n")__        client().performRequest(createJob)__    };test,creating,a,trial,license,and,using,it,this,is,interesting,because,our,other,tests,test,cover,starting,a,new,cluster,with,the,default,distribution,and,enabling,the,trial,license,but,this,test,is,the,only,one,that,can,upgrade,from,the,oss,distribution,to,the,default,distribution,with,xpack,and,the,create,a,trial,license,we,don,t,strong,do,strong,a,lot,with,the,trial,license,because,for,the,most,part,those,things,are,tested,elsewhere,off,in,xpack,but,we,do,use,the,trial,license,a,little,bit,to,make,sure,that,it,works;public,void,test,trial,license,throws,ioexception,request,start,trial,new,request,post,start,trial,add,parameter,acknowledge,true,client,perform,request,start,trial,string,no,jobs,entity,utils,to,string,client,perform,request,new,request,get,get,entity,assert,equals,count,0,jobs,no,jobs,request,create,job,new,request,put,create,job,set,json,entity,n,n,10m,n,detectors,n,n,function,sum,n,total,n,n,n,n,n,timestamp,n,n,n,n,client,perform,request,create,job
XPackIT -> public void testTrialLicense() throws IOException;1547156119;Test creating a trial license and using it. This is interesting because_our other tests test cover starting a new cluster with the default_distribution and enabling the trial license but this test is the only_one that can upgrade from the oss distribution to the default_distribution with xpack and the create a trial license. We don't_<strong>do</strong> a lot with the trial license because for the most_part those things are tested elsewhere, off in xpack. But we do use the_trial license a little bit to make sure that it works.;public void testTrialLicense() throws IOException {_        Request startTrial = new Request("POST", "/_license/start_trial")__        startTrial.addParameter("acknowledge", "true")__        client().performRequest(startTrial)___        String noJobs = EntityUtils.toString(_            client().performRequest(new Request("GET", "/_ml/anomaly_detectors")).getEntity())__        assertEquals("{\"count\":0,\"jobs\":[]}", noJobs)___        Request createJob = new Request("PUT", "/_ml/anomaly_detectors/test_job")__        createJob.setJsonEntity(_                  "{\n"_                + "  \"analysis_config\" : {\n"_                + "    \"bucket_span\": \"10m\",\n"_                + "    \"detectors\": [\n"_                + "      {\n"_                + "        \"function\": \"sum\",\n"_                + "        \"field_name\": \"total\"\n"_                + "      }\n"_                + "    ]\n"_                + "  },\n"_                + "  \"data_description\": {\n"_                + "    \"time_field\": \"timestamp\",\n"_                + "    \"time_format\": \"epoch_ms\"\n"_                + "  }\n"_                + "}\n")__        client().performRequest(createJob)__    };test,creating,a,trial,license,and,using,it,this,is,interesting,because,our,other,tests,test,cover,starting,a,new,cluster,with,the,default,distribution,and,enabling,the,trial,license,but,this,test,is,the,only,one,that,can,upgrade,from,the,oss,distribution,to,the,default,distribution,with,xpack,and,the,create,a,trial,license,we,don,t,strong,do,strong,a,lot,with,the,trial,license,because,for,the,most,part,those,things,are,tested,elsewhere,off,in,xpack,but,we,do,use,the,trial,license,a,little,bit,to,make,sure,that,it,works;public,void,test,trial,license,throws,ioexception,request,start,trial,new,request,post,start,trial,add,parameter,acknowledge,true,client,perform,request,start,trial,string,no,jobs,entity,utils,to,string,client,perform,request,new,request,get,get,entity,assert,equals,count,0,jobs,no,jobs,request,create,job,new,request,put,create,job,set,json,entity,n,n,10m,n,detectors,n,n,function,sum,n,total,n,n,n,n,n,timestamp,n,n,n,n,client,perform,request,create,job
XPackIT -> public void testTrialLicense() throws IOException;1548103037;Test creating a trial license and using it. This is interesting because_our other tests test cover starting a new cluster with the default_distribution and enabling the trial license but this test is the only_one that can upgrade from the oss distribution to the default_distribution with xpack and the create a trial license. We don't_<strong>do</strong> a lot with the trial license because for the most_part those things are tested elsewhere, off in xpack. But we do use the_trial license a little bit to make sure that it works.;public void testTrialLicense() throws IOException {_        Request startTrial = new Request("POST", "/_license/start_trial")__        startTrial.addParameter("acknowledge", "true")__        client().performRequest(startTrial)___        String noJobs = EntityUtils.toString(_            client().performRequest(new Request("GET", "/_ml/anomaly_detectors")).getEntity())__        assertEquals("{\"count\":0,\"jobs\":[]}", noJobs)___        Request createJob = new Request("PUT", "/_ml/anomaly_detectors/test_job")__        createJob.setJsonEntity(_                  "{\n"_                + "  \"analysis_config\" : {\n"_                + "    \"bucket_span\": \"10m\",\n"_                + "    \"detectors\": [\n"_                + "      {\n"_                + "        \"function\": \"sum\",\n"_                + "        \"field_name\": \"total\"\n"_                + "      }\n"_                + "    ]\n"_                + "  },\n"_                + "  \"data_description\": {\n"_                + "    \"time_field\": \"timestamp\",\n"_                + "    \"time_format\": \"epoch_ms\"\n"_                + "  }\n"_                + "}\n")__        client().performRequest(createJob)__    };test,creating,a,trial,license,and,using,it,this,is,interesting,because,our,other,tests,test,cover,starting,a,new,cluster,with,the,default,distribution,and,enabling,the,trial,license,but,this,test,is,the,only,one,that,can,upgrade,from,the,oss,distribution,to,the,default,distribution,with,xpack,and,the,create,a,trial,license,we,don,t,strong,do,strong,a,lot,with,the,trial,license,because,for,the,most,part,those,things,are,tested,elsewhere,off,in,xpack,but,we,do,use,the,trial,license,a,little,bit,to,make,sure,that,it,works;public,void,test,trial,license,throws,ioexception,request,start,trial,new,request,post,start,trial,add,parameter,acknowledge,true,client,perform,request,start,trial,string,no,jobs,entity,utils,to,string,client,perform,request,new,request,get,get,entity,assert,equals,count,0,jobs,no,jobs,request,create,job,new,request,put,create,job,set,json,entity,n,n,10m,n,detectors,n,n,function,sum,n,total,n,n,n,n,n,timestamp,n,n,n,n,client,perform,request,create,job
