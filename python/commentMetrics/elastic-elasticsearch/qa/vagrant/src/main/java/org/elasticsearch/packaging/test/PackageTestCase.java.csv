commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void onlyCompatibleDistributions() {     assumeTrue("only compatible distributions", distribution().packaging.compatible). }
false;public;0;16;;public void test05InstallFailsWhenJavaMissing() {     final Shell sh = new Shell().     final Result javaHomeOutput = sh.run("echo $JAVA_HOME").     final Path javaHome = Paths.get(javaHomeOutput.stdout.trim()).     final Path originalJavaPath = javaHome.resolve("bin").resolve("java").     final Path relocatedJavaPath = javaHome.resolve("bin").resolve("java.relocated").     try {         mv(originalJavaPath, relocatedJavaPath).         final Result installResult = runInstallCommand(distribution()).         assertThat(installResult.exitCode, is(1)).         assertThat(installResult.stderr, containsString("could not find java. set JAVA_HOME")).     } finally {         mv(relocatedJavaPath, originalJavaPath).     } }
false;public;0;6;;public void test10InstallPackage() {     assertRemoved(distribution()).     installation = install(distribution()).     assertInstalled(distribution()).     verifyPackageInstallation(installation, distribution()). }
false;public;0;6;;public void test20PluginsCommandWhenNoPlugins() {     assumeThat(installation, is(notNullValue())).     final Shell sh = new Shell().     assertThat(sh.run(installation.bin("elasticsearch-plugin") + " list").stdout, isEmptyString()). }
false;public;0;6;;public void test30InstallDoesNotStartServer() {     assumeThat(installation, is(notNullValue())).     final Shell sh = new Shell().     assertThat(sh.run("ps aux").stdout, not(containsString("org.elasticsearch.bootstrap.Elasticsearch"))). }
false;public;0;7;;public void test40StartServer() throws IOException {     assumeThat(installation, is(notNullValue())).     startElasticsearch().     runElasticsearchTests().     // check startup script didn't change permissions     verifyPackageInstallation(installation, distribution()). }
false;public;0;50;;public void test50Remove() {     assumeThat(installation, is(notNullValue())).     remove(distribution()).     // removing must stop the service     final Shell sh = new Shell().     assertThat(sh.run("ps aux").stdout, not(containsString("org.elasticsearch.bootstrap.Elasticsearch"))).     if (isSystemd()) {         final int statusExitCode.         // [1] https://github.com/systemd/systemd/pull/3385         if (getOsRelease().contains("ID=\"centos\"") || getOsRelease().contains("ID=\"ol\"")) {             statusExitCode = 4.         } else {             final Result versionResult = sh.run("systemctl --version").             final Matcher matcher = Pattern.compile("^systemd (\\d+)\n").matcher(versionResult.stdout).             matcher.find().             final int version = Integer.parseInt(matcher.group(1)).             statusExitCode = version < 231 ? 3 : 4.         }         assertThat(sh.runIgnoreExitCode("systemctl status elasticsearch.service").exitCode, is(statusExitCode)).         assertThat(sh.runIgnoreExitCode("systemctl is-enabled elasticsearch.service").exitCode, is(1)).     }     assertPathsDontExist(installation.bin, installation.lib, installation.modules, installation.plugins, installation.logs, installation.pidDir).     assertFalse(Files.exists(SYSTEMD_SERVICE)). }
false;public;0;10;;public void test60Reinstall() {     assumeThat(installation, is(notNullValue())).     installation = install(distribution()).     assertInstalled(distribution()).     verifyPackageInstallation(installation, distribution()).     remove(distribution()).     assertRemoved(distribution()). }
