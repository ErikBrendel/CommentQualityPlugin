commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;3;;public static void waitForElasticsearch() throws IOException {     waitForElasticsearch("green", null). }
false;public,static;2;48;;public static void waitForElasticsearch(String status, String index) throws IOException {     Objects.requireNonNull(status).     // we loop here rather than letting httpclient handle retries so we can measure the entire waiting time     final long startTime = System.currentTimeMillis().     long timeElapsed = 0.     boolean started = false.     while (started == false && timeElapsed < waitTime) {         try {             final HttpResponse response = Request.Get("http://localhost:9200/_cluster/health").connectTimeout((int) timeoutLength).socketTimeout((int) timeoutLength).execute().returnResponse().             if (response.getStatusLine().getStatusCode() >= 300) {                 final String statusLine = response.getStatusLine().toString().                 final String body = EntityUtils.toString(response.getEntity()).                 throw new RuntimeException("Connecting to elasticsearch cluster health API failed:\n" + statusLine + "\n" + body).             }             started = true.         } catch (HttpHostConnectException e) {             // we want to retry if the connection is refused             LOG.debug("Got connection refused when waiting for cluster health", e).         }         timeElapsed = System.currentTimeMillis() - startTime.     }     if (started == false) {         throw new RuntimeException("Elasticsearch did not start").     }     final String url.     if (index == null) {         url = "http://localhost:9200/_cluster/health?wait_for_status=" + status + "&timeout=60s&pretty".     } else {         url = "http://localhost:9200/_cluster/health/" + index + "?wait_for_status=" + status + "&timeout=60s&pretty".     }     final String body = makeRequest(Request.Get(url)).     assertThat("cluster health response must contain desired status", body, containsString(status)). }
false;public,static;0;14;;public static void runElasticsearchTests() throws IOException {     makeRequest(Request.Post("http://localhost:9200/library/book/1?refresh=true&pretty").bodyString("{ \"title\": \"Book #1\", \"pages\": 123 }", ContentType.APPLICATION_JSON)).     makeRequest(Request.Post("http://localhost:9200/library/book/2?refresh=true&pretty").bodyString("{ \"title\": \"Book #2\", \"pages\": 456 }", ContentType.APPLICATION_JSON)).     String count = makeRequest(Request.Get("http://localhost:9200/_count?pretty")).     assertThat(count, containsString("\"count\" : 2")).     makeRequest(Request.Delete("http://localhost:9200/_all")). }
false;public,static;1;11;;public static String makeRequest(Request request) throws IOException {     final HttpResponse response = request.execute().returnResponse().     final String body = EntityUtils.toString(response.getEntity()).     if (response.getStatusLine().getStatusCode() >= 300) {         throw new RuntimeException("Request failed:\n" + response.getStatusLine().toString() + "\n" + body).     }     return body. }
