commented;modifiers;parameterAmount;loc;comment;code
false;protected,abstract;0;1;;protected abstract Distribution distribution().
false;public,static;0;5;;@BeforeClass public static void cleanup() {     installation = null.     cleanEverything(). }
false;public;0;5;;@Before public void onlyCompatibleDistributions() {     assumeTrue("only rpm platforms", isRPM()).     assumeTrue("only compatible distributions", distribution().packaging.compatible). }
false;public;0;6;;public void test10Install() {     assertRemoved(distribution()).     installation = install(distribution()).     assertInstalled(distribution()).     verifyPackageInstallation(installation, distribution()). }
false;public;0;14;;public void test20Remove() {     assumeThat(installation, is(notNullValue())).     remove(distribution()).     // config was removed     assertFalse(Files.exists(installation.config)).     // sysvinit service file was removed     assertFalse(Files.exists(SYSVINIT_SCRIPT)).     // defaults file was removed     assertFalse(Files.exists(installation.envFile)). }
false;public;0;63;;public void test30PreserveConfig() {     final Shell sh = new Shell().     installation = install(distribution()).     assertInstalled(distribution()).     verifyPackageInstallation(installation, distribution()).     sh.run("echo foobar | " + installation.executables().elasticsearchKeystore + " add --stdin foo.bar").     Stream.of("elasticsearch.yml", "jvm.options", "log4j2.properties").map(each -> installation.config(each)).forEach(path -> append(path, "# foo")).     if (distribution().isDefault()) {         Stream.of("role_mapping.yml", "roles.yml", "users", "users_roles").map(each -> installation.config(each)).forEach(path -> append(path, "# foo")).     }     remove(distribution()).     assertRemoved(distribution()).     if (isSystemd()) {         assertThat(sh.runIgnoreExitCode("systemctl is-enabled elasticsearch.service").exitCode, is(1)).     }     assertPathsDontExist(installation.bin, installation.lib, installation.modules, installation.plugins, installation.logs, installation.pidDir, installation.envFile, SYSVINIT_SCRIPT, SYSTEMD_SERVICE).     assertTrue(Files.exists(installation.config)).     assertTrue(Files.exists(installation.config("elasticsearch.keystore"))).     Stream.of("elasticsearch.yml", "jvm.options", "log4j2.properties").forEach(this::assertConfFilePreserved).     if (distribution().isDefault()) {         Stream.of("role_mapping.yml", "roles.yml", "users", "users_roles").forEach(this::assertConfFilePreserved).     } }
false;private;1;6;;private void assertConfFilePreserved(String configFile) {     final Path original = installation.config(configFile).     final Path saved = installation.config(configFile + ".rpmsave").     assertFalse(original + " should not exist", Files.exists(original)).     assertTrue(saved + " should exist", Files.exists(saved)). }
