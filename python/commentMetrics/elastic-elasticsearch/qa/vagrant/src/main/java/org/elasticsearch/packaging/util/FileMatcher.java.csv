commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;46;;@Override protected boolean matchesSafely(Path path) {     if (Files.exists(path) == false) {         mismatch = "Does not exist".         return false.     }     if (Platforms.WINDOWS) {         final BasicFileAttributes attributes = getBasicFileAttributes(path).         final String attributeViewOwner = getFileOwner(path).         if (fileness.equals(Fileness.Directory) != attributes.isDirectory()) {             mismatch = "Is " + (attributes.isDirectory() ? "a directory" : "a file").             return false.         }         if (attributeViewOwner.contains(owner) == false) {             mismatch = "Owned by " + attributeViewOwner.             return false.         }     } else {         final PosixFileAttributes attributes = getPosixFileAttributes(path).         if (fileness.equals(Fileness.Directory) != attributes.isDirectory()) {             mismatch = "Is " + (attributes.isDirectory() ? "a directory" : "a file").             return false.         }         if (owner.equals(attributes.owner().getName()) == false) {             mismatch = "Owned by " + attributes.owner().getName().             return false.         }         if (group != null && group.equals(attributes.group().getName()) == false) {             mismatch = "Owned by group " + attributes.group().getName().             return false.         }         if (posixPermissions != null && posixPermissions.equals(attributes.permissions()) == false) {             mismatch = "Has permissions " + attributes.permissions().             return false.         }     }     return true. }
false;public;2;7;;@Override public void describeMismatchSafely(Path path, Description description) {     description.appendText("path ").appendValue(path).     if (mismatch != null) {         description.appendText(mismatch).     } }
false;public;1;7;;@Override public void describeTo(Description description) {     description.appendValue("file/directory: ").appendValue(fileness).appendText(" with owner ").appendValue(owner).appendText(" with group ").appendValue(group).appendText(" with posix permissions ").appendValueList("[", ",", "]", posixPermissions). }
false;public,static;2;3;;public static FileMatcher file(Fileness fileness, String owner) {     return file(fileness, owner, null, null). }
false;public,static;4;3;;public static FileMatcher file(Fileness fileness, String owner, String group, Set<PosixFilePermission> permissions) {     return new FileMatcher(fileness, owner, group, permissions). }
