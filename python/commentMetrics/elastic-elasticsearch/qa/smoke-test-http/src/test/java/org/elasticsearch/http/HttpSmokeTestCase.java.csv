commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;7;;@SuppressWarnings("unchecked") @BeforeClass public static void setUpTransport() {     nodeTransportTypeKey = getTypeKey(randomFrom(getTestTransportPlugin(), Netty4Plugin.class, NioTransportPlugin.class)).     nodeHttpTypeKey = getHttpTypeKey(randomFrom(Netty4Plugin.class, NioTransportPlugin.class)).     clientTypeKey = getTypeKey(randomFrom(getTestTransportPlugin(), Netty4Plugin.class, NioTransportPlugin.class)). }
false;private,static;1;10;;private static String getTypeKey(Class<? extends Plugin> clazz) {     if (clazz.equals(MockNioTransportPlugin.class)) {         return MockNioTransportPlugin.MOCK_NIO_TRANSPORT_NAME.     } else if (clazz.equals(NioTransportPlugin.class)) {         return NioTransportPlugin.NIO_TRANSPORT_NAME.     } else {         assert clazz.equals(Netty4Plugin.class).         return Netty4Plugin.NETTY_TRANSPORT_NAME.     } }
false;private,static;1;8;;private static String getHttpTypeKey(Class<? extends Plugin> clazz) {     if (clazz.equals(NioTransportPlugin.class)) {         return NioTransportPlugin.NIO_HTTP_TRANSPORT_NAME.     } else {         assert clazz.equals(Netty4Plugin.class).         return Netty4Plugin.NETTY_HTTP_TRANSPORT_NAME.     } }
false;protected;0;4;;@Override protected boolean addMockHttpTransport() {     // enable http     return false. }
false;protected;1;7;;@Override protected Settings nodeSettings(int nodeOrdinal) {     return Settings.builder().put(super.nodeSettings(nodeOrdinal)).put(NetworkModule.TRANSPORT_TYPE_KEY, nodeTransportTypeKey).put(NetworkModule.HTTP_TYPE_KEY, nodeHttpTypeKey).build(). }
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     return Arrays.asList(getTestTransportPlugin(), Netty4Plugin.class, NioTransportPlugin.class). }
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> transportClientPlugins() {     return Arrays.asList(getTestTransportPlugin(), Netty4Plugin.class, NioTransportPlugin.class). }
false;protected;0;7;;@Override protected Settings transportClientSettings() {     return Settings.builder().put(super.transportClientSettings()).put(NetworkModule.TRANSPORT_TYPE_KEY, clientTypeKey).build(). }
false;protected;0;4;;@Override protected boolean ignoreExternalCluster() {     return true. }
