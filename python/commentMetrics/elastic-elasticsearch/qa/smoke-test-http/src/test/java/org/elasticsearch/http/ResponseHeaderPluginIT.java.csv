commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean addMockHttpTransport() {     // enable http     return false. }
false;protected;0;6;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     ArrayList<Class<? extends Plugin>> plugins = new ArrayList<>(super.nodePlugins()).     plugins.add(TestResponseHeaderPlugin.class).     return plugins. }
false;public;0;19;;public void testThatSettingHeadersWorks() throws IOException {     ensureGreen().     try {         getRestClient().performRequest(new Request("GET", "/_protected")).         fail("request should have failed").     } catch (ResponseException e) {         Response response = e.getResponse().         assertThat(response.getStatusLine().getStatusCode(), equalTo(401)).         assertThat(response.getHeader("Secret"), equalTo("required")).     }     Request request = new Request("GET", "/_protected").     RequestOptions.Builder options = request.getOptions().toBuilder().     options.addHeader("Secret", "password").     request.setOptions(options).     Response authResponse = getRestClient().performRequest(request).     assertThat(authResponse.getStatusLine().getStatusCode(), equalTo(200)).     assertThat(authResponse.getHeader("Secret"), equalTo("granted")). }
