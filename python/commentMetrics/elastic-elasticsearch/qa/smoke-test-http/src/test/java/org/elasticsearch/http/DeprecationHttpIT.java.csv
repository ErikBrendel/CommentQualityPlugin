# id;timestamp;commentText;codeText;commentWords;codeWords
DeprecationHttpIT -> private void doTestDeprecationWarningsAppearInHeaders() throws IOException;1524684173;Run a request that receives a predictably randomized number of deprecation warnings._<p>_Re-running this back-to-back helps to ensure that warnings are not being maintained across requests.;private void doTestDeprecationWarningsAppearInHeaders() throws IOException {_        final boolean useDeprecatedField = randomBoolean()__        final boolean useNonDeprecatedSetting = randomBoolean()___        _        final List<Setting<Boolean>> settings = new ArrayList<>(3)__        settings.add(TEST_DEPRECATED_SETTING_TRUE1)___        if (randomBoolean()) {_            settings.add(TEST_DEPRECATED_SETTING_TRUE2)__        }__        if (useNonDeprecatedSetting) {_            settings.add(TEST_NOT_DEPRECATED_SETTING)__        }__        Collections.shuffle(settings, random())___        _        Response response = getRestClient().performRequest("GET", "/_test_cluster/deprecated_settings",_                Collections.emptyMap(), buildSettingsRequest(settings, useDeprecatedField))__        assertThat(response.getStatusLine().getStatusCode(), equalTo(OK.getStatus()))___        final List<String> deprecatedWarnings = getWarningHeaders(response.getHeaders())__        final List<Matcher<String>> headerMatchers = new ArrayList<>(4)___        headerMatchers.add(equalTo(TestDeprecationHeaderRestAction.DEPRECATED_ENDPOINT))__        if (useDeprecatedField) {_            headerMatchers.add(equalTo(TestDeprecationHeaderRestAction.DEPRECATED_USAGE))__        }_        for (Setting<?> setting : settings) {_            if (setting.isDeprecated()) {_                headerMatchers.add(equalTo(_                        "[" + setting.getKey() + "] setting was deprecated in Elasticsearch and will be removed in a future release! " +_                        "See the breaking changes documentation for the next major version."))__            }_        }__        assertThat(deprecatedWarnings, hasSize(headerMatchers.size()))__        for (final String deprecatedWarning : deprecatedWarnings) {_            assertThat(deprecatedWarning, matches(WARNING_HEADER_PATTERN.pattern()))__        }_        final List<String> actualWarningValues =_                deprecatedWarnings.stream().map(DeprecationLogger::extractWarningValueFromWarningHeader).collect(Collectors.toList())__        for (Matcher<String> headerMatcher : headerMatchers) {_            assertThat(actualWarningValues, hasItem(headerMatcher))__        }_    };run,a,request,that,receives,a,predictably,randomized,number,of,deprecation,warnings,p,re,running,this,back,to,back,helps,to,ensure,that,warnings,are,not,being,maintained,across,requests;private,void,do,test,deprecation,warnings,appear,in,headers,throws,ioexception,final,boolean,use,deprecated,field,random,boolean,final,boolean,use,non,deprecated,setting,random,boolean,final,list,setting,boolean,settings,new,array,list,3,settings,add,if,random,boolean,settings,add,if,use,non,deprecated,setting,settings,add,collections,shuffle,settings,random,response,response,get,rest,client,perform,request,get,collections,empty,map,build,settings,request,settings,use,deprecated,field,assert,that,response,get,status,line,get,status,code,equal,to,ok,get,status,final,list,string,deprecated,warnings,get,warning,headers,response,get,headers,final,list,matcher,string,header,matchers,new,array,list,4,header,matchers,add,equal,to,test,deprecation,header,rest,action,if,use,deprecated,field,header,matchers,add,equal,to,test,deprecation,header,rest,action,for,setting,setting,settings,if,setting,is,deprecated,header,matchers,add,equal,to,setting,get,key,setting,was,deprecated,in,elasticsearch,and,will,be,removed,in,a,future,release,see,the,breaking,changes,documentation,for,the,next,major,version,assert,that,deprecated,warnings,has,size,header,matchers,size,for,final,string,deprecated,warning,deprecated,warnings,assert,that,deprecated,warning,matches,pattern,final,list,string,actual,warning,values,deprecated,warnings,stream,map,deprecation,logger,extract,warning,value,from,warning,header,collect,collectors,to,list,for,matcher,string,header,matcher,header,matchers,assert,that,actual,warning,values,has,item,header,matcher
DeprecationHttpIT -> private void doTestDeprecationWarningsAppearInHeaders() throws IOException;1525334055;Run a request that receives a predictably randomized number of deprecation warnings._<p>_Re-running this back-to-back helps to ensure that warnings are not being maintained across requests.;private void doTestDeprecationWarningsAppearInHeaders() throws IOException {_        final boolean useDeprecatedField = randomBoolean()__        final boolean useNonDeprecatedSetting = randomBoolean()___        _        final List<Setting<Boolean>> settings = new ArrayList<>(3)__        settings.add(TEST_DEPRECATED_SETTING_TRUE1)___        if (randomBoolean()) {_            settings.add(TEST_DEPRECATED_SETTING_TRUE2)__        }__        if (useNonDeprecatedSetting) {_            settings.add(TEST_NOT_DEPRECATED_SETTING)__        }__        Collections.shuffle(settings, random())___        _        Response response = getRestClient().performRequest("GET", "/_test_cluster/deprecated_settings",_                Collections.emptyMap(), buildSettingsRequest(settings, useDeprecatedField))__        assertThat(response.getStatusLine().getStatusCode(), equalTo(OK.getStatus()))___        final List<String> deprecatedWarnings = getWarningHeaders(response.getHeaders())__        final List<Matcher<String>> headerMatchers = new ArrayList<>(4)___        headerMatchers.add(equalTo(TestDeprecationHeaderRestAction.DEPRECATED_ENDPOINT))__        if (useDeprecatedField) {_            headerMatchers.add(equalTo(TestDeprecationHeaderRestAction.DEPRECATED_USAGE))__        }_        for (Setting<?> setting : settings) {_            if (setting.isDeprecated()) {_                headerMatchers.add(equalTo(_                        "[" + setting.getKey() + "] setting was deprecated in Elasticsearch and will be removed in a future release! " +_                        "See the breaking changes documentation for the next major version."))__            }_        }__        assertThat(deprecatedWarnings, hasSize(headerMatchers.size()))__        for (final String deprecatedWarning : deprecatedWarnings) {_            assertThat(deprecatedWarning, matches(WARNING_HEADER_PATTERN.pattern()))__        }_        final List<String> actualWarningValues =_                deprecatedWarnings.stream().map(DeprecationLogger::extractWarningValueFromWarningHeader).collect(Collectors.toList())__        for (Matcher<String> headerMatcher : headerMatchers) {_            assertThat(actualWarningValues, hasItem(headerMatcher))__        }_    };run,a,request,that,receives,a,predictably,randomized,number,of,deprecation,warnings,p,re,running,this,back,to,back,helps,to,ensure,that,warnings,are,not,being,maintained,across,requests;private,void,do,test,deprecation,warnings,appear,in,headers,throws,ioexception,final,boolean,use,deprecated,field,random,boolean,final,boolean,use,non,deprecated,setting,random,boolean,final,list,setting,boolean,settings,new,array,list,3,settings,add,if,random,boolean,settings,add,if,use,non,deprecated,setting,settings,add,collections,shuffle,settings,random,response,response,get,rest,client,perform,request,get,collections,empty,map,build,settings,request,settings,use,deprecated,field,assert,that,response,get,status,line,get,status,code,equal,to,ok,get,status,final,list,string,deprecated,warnings,get,warning,headers,response,get,headers,final,list,matcher,string,header,matchers,new,array,list,4,header,matchers,add,equal,to,test,deprecation,header,rest,action,if,use,deprecated,field,header,matchers,add,equal,to,test,deprecation,header,rest,action,for,setting,setting,settings,if,setting,is,deprecated,header,matchers,add,equal,to,setting,get,key,setting,was,deprecated,in,elasticsearch,and,will,be,removed,in,a,future,release,see,the,breaking,changes,documentation,for,the,next,major,version,assert,that,deprecated,warnings,has,size,header,matchers,size,for,final,string,deprecated,warning,deprecated,warnings,assert,that,deprecated,warning,matches,pattern,final,list,string,actual,warning,values,deprecated,warnings,stream,map,deprecation,logger,extract,warning,value,from,warning,header,collect,collectors,to,list,for,matcher,string,header,matcher,header,matchers,assert,that,actual,warning,values,has,item,header,matcher
DeprecationHttpIT -> private void doTestDeprecationWarningsAppearInHeaders() throws IOException;1526449283;Run a request that receives a predictably randomized number of deprecation warnings._<p>_Re-running this back-to-back helps to ensure that warnings are not being maintained across requests.;private void doTestDeprecationWarningsAppearInHeaders() throws IOException {_        final boolean useDeprecatedField = randomBoolean()__        final boolean useNonDeprecatedSetting = randomBoolean()___        _        final List<Setting<Boolean>> settings = new ArrayList<>(3)__        settings.add(TEST_DEPRECATED_SETTING_TRUE1)___        if (randomBoolean()) {_            settings.add(TEST_DEPRECATED_SETTING_TRUE2)__        }__        if (useNonDeprecatedSetting) {_            settings.add(TEST_NOT_DEPRECATED_SETTING)__        }__        Collections.shuffle(settings, random())___        _        Request request = new Request("GET", "/_test_cluster/deprecated_settings")__        request.setEntity(buildSettingsRequest(settings, useDeprecatedField))__        Response response = getRestClient().performRequest(request)__        assertThat(response.getStatusLine().getStatusCode(), equalTo(OK.getStatus()))___        final List<String> deprecatedWarnings = getWarningHeaders(response.getHeaders())__        final List<Matcher<String>> headerMatchers = new ArrayList<>(4)___        headerMatchers.add(equalTo(TestDeprecationHeaderRestAction.DEPRECATED_ENDPOINT))__        if (useDeprecatedField) {_            headerMatchers.add(equalTo(TestDeprecationHeaderRestAction.DEPRECATED_USAGE))__        }_        for (Setting<?> setting : settings) {_            if (setting.isDeprecated()) {_                headerMatchers.add(equalTo(_                        "[" + setting.getKey() + "] setting was deprecated in Elasticsearch and will be removed in a future release! " +_                        "See the breaking changes documentation for the next major version."))__            }_        }__        assertThat(deprecatedWarnings, hasSize(headerMatchers.size()))__        for (final String deprecatedWarning : deprecatedWarnings) {_            assertThat(deprecatedWarning, matches(WARNING_HEADER_PATTERN.pattern()))__        }_        final List<String> actualWarningValues =_                deprecatedWarnings.stream().map(DeprecationLogger::extractWarningValueFromWarningHeader).collect(Collectors.toList())__        for (Matcher<String> headerMatcher : headerMatchers) {_            assertThat(actualWarningValues, hasItem(headerMatcher))__        }_    };run,a,request,that,receives,a,predictably,randomized,number,of,deprecation,warnings,p,re,running,this,back,to,back,helps,to,ensure,that,warnings,are,not,being,maintained,across,requests;private,void,do,test,deprecation,warnings,appear,in,headers,throws,ioexception,final,boolean,use,deprecated,field,random,boolean,final,boolean,use,non,deprecated,setting,random,boolean,final,list,setting,boolean,settings,new,array,list,3,settings,add,if,random,boolean,settings,add,if,use,non,deprecated,setting,settings,add,collections,shuffle,settings,random,request,request,new,request,get,request,set,entity,build,settings,request,settings,use,deprecated,field,response,response,get,rest,client,perform,request,request,assert,that,response,get,status,line,get,status,code,equal,to,ok,get,status,final,list,string,deprecated,warnings,get,warning,headers,response,get,headers,final,list,matcher,string,header,matchers,new,array,list,4,header,matchers,add,equal,to,test,deprecation,header,rest,action,if,use,deprecated,field,header,matchers,add,equal,to,test,deprecation,header,rest,action,for,setting,setting,settings,if,setting,is,deprecated,header,matchers,add,equal,to,setting,get,key,setting,was,deprecated,in,elasticsearch,and,will,be,removed,in,a,future,release,see,the,breaking,changes,documentation,for,the,next,major,version,assert,that,deprecated,warnings,has,size,header,matchers,size,for,final,string,deprecated,warning,deprecated,warnings,assert,that,deprecated,warning,matches,pattern,final,list,string,actual,warning,values,deprecated,warnings,stream,map,deprecation,logger,extract,warning,value,from,warning,header,collect,collectors,to,list,for,matcher,string,header,matcher,header,matchers,assert,that,actual,warning,values,has,item,header,matcher
DeprecationHttpIT -> @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/19222")     public void testUniqueDeprecationResponsesMergedTogether() throws IOException;1524684173;Attempts to do a scatter/gather request that expects unique responses per sub-request.;@AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/19222")_    public void testUniqueDeprecationResponsesMergedTogether() throws IOException {_        final String[] indices = new String[randomIntBetween(2, 5)]___        _        for (int i = 0_ i < indices.length_ ++i) {_            indices[i] = "test" + i___            _            assertTrue(prepareCreate(indices[i]).setSettings(Settings.builder().put("number_of_shards", 1)).get().isAcknowledged())___            int randomDocCount = randomIntBetween(1, 2)___            for (int j = 0_ j < randomDocCount_ ++j) {_                index(indices[i], "type", Integer.toString(j), "{\"field\":" + j + "}")__            }_        }__        refresh(indices)___        final String commaSeparatedIndices = Stream.of(indices).collect(Collectors.joining(","))___        final String body = "{\"query\":{\"bool\":{\"filter\":[{\"" + TestDeprecatedQueryBuilder.NAME +  "\":{}}]}}}"___        _        Response response = getRestClient().performRequest("GET", "/" + commaSeparatedIndices + "/_search",_                Collections.emptyMap(), new StringEntity(body, ContentType.APPLICATION_JSON))__        assertThat(response.getStatusLine().getStatusCode(), equalTo(OK.getStatus()))___        final List<String> deprecatedWarnings = getWarningHeaders(response.getHeaders())__        final List<Matcher<String>> headerMatchers = new ArrayList<>(indices.length)___        for (String index : indices) {_            headerMatchers.add(containsString(LoggerMessageFormat.format("[{}] index", (Object)index)))__        }__        assertThat(deprecatedWarnings, hasSize(headerMatchers.size()))__        for (Matcher<String> headerMatcher : headerMatchers) {_            assertThat(deprecatedWarnings, hasItem(headerMatcher))__        }_    };attempts,to,do,a,scatter,gather,request,that,expects,unique,responses,per,sub,request;awaits,fix,bug,url,https,github,com,elastic,elasticsearch,issues,19222,public,void,test,unique,deprecation,responses,merged,together,throws,ioexception,final,string,indices,new,string,random,int,between,2,5,for,int,i,0,i,indices,length,i,indices,i,test,i,assert,true,prepare,create,indices,i,set,settings,settings,builder,put,1,get,is,acknowledged,int,random,doc,count,random,int,between,1,2,for,int,j,0,j,random,doc,count,j,index,indices,i,type,integer,to,string,j,field,j,refresh,indices,final,string,comma,separated,indices,stream,of,indices,collect,collectors,joining,final,string,body,query,bool,filter,test,deprecated,query,builder,name,response,response,get,rest,client,perform,request,get,comma,separated,indices,collections,empty,map,new,string,entity,body,content,type,assert,that,response,get,status,line,get,status,code,equal,to,ok,get,status,final,list,string,deprecated,warnings,get,warning,headers,response,get,headers,final,list,matcher,string,header,matchers,new,array,list,indices,length,for,string,index,indices,header,matchers,add,contains,string,logger,message,format,format,index,object,index,assert,that,deprecated,warnings,has,size,header,matchers,size,for,matcher,string,header,matcher,header,matchers,assert,that,deprecated,warnings,has,item,header,matcher
DeprecationHttpIT -> @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/19222")     public void testUniqueDeprecationResponsesMergedTogether() throws IOException;1525334055;Attempts to do a scatter/gather request that expects unique responses per sub-request.;@AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/19222")_    public void testUniqueDeprecationResponsesMergedTogether() throws IOException {_        final String[] indices = new String[randomIntBetween(2, 5)]___        _        for (int i = 0_ i < indices.length_ ++i) {_            indices[i] = "test" + i___            _            assertTrue(prepareCreate(indices[i]).setSettings(Settings.builder().put("number_of_shards", 1)).get().isAcknowledged())___            int randomDocCount = randomIntBetween(1, 2)___            for (int j = 0_ j < randomDocCount_ ++j) {_                index(indices[i], "type", Integer.toString(j), "{\"field\":" + j + "}")__            }_        }__        refresh(indices)___        final String commaSeparatedIndices = Stream.of(indices).collect(Collectors.joining(","))___        final String body = "{\"query\":{\"bool\":{\"filter\":[{\"" + TestDeprecatedQueryBuilder.NAME +  "\":{}}]}}}"___        _        Response response = getRestClient().performRequest("GET", "/" + commaSeparatedIndices + "/_search",_                Collections.emptyMap(), new StringEntity(body, ContentType.APPLICATION_JSON))__        assertThat(response.getStatusLine().getStatusCode(), equalTo(OK.getStatus()))___        final List<String> deprecatedWarnings = getWarningHeaders(response.getHeaders())__        final List<Matcher<String>> headerMatchers = new ArrayList<>(indices.length)___        for (String index : indices) {_            headerMatchers.add(containsString(LoggerMessageFormat.format("[{}] index", (Object)index)))__        }__        assertThat(deprecatedWarnings, hasSize(headerMatchers.size()))__        for (Matcher<String> headerMatcher : headerMatchers) {_            assertThat(deprecatedWarnings, hasItem(headerMatcher))__        }_    };attempts,to,do,a,scatter,gather,request,that,expects,unique,responses,per,sub,request;awaits,fix,bug,url,https,github,com,elastic,elasticsearch,issues,19222,public,void,test,unique,deprecation,responses,merged,together,throws,ioexception,final,string,indices,new,string,random,int,between,2,5,for,int,i,0,i,indices,length,i,indices,i,test,i,assert,true,prepare,create,indices,i,set,settings,settings,builder,put,1,get,is,acknowledged,int,random,doc,count,random,int,between,1,2,for,int,j,0,j,random,doc,count,j,index,indices,i,type,integer,to,string,j,field,j,refresh,indices,final,string,comma,separated,indices,stream,of,indices,collect,collectors,joining,final,string,body,query,bool,filter,test,deprecated,query,builder,name,response,response,get,rest,client,perform,request,get,comma,separated,indices,collections,empty,map,new,string,entity,body,content,type,assert,that,response,get,status,line,get,status,code,equal,to,ok,get,status,final,list,string,deprecated,warnings,get,warning,headers,response,get,headers,final,list,matcher,string,header,matchers,new,array,list,indices,length,for,string,index,indices,header,matchers,add,contains,string,logger,message,format,format,index,object,index,assert,that,deprecated,warnings,has,size,header,matchers,size,for,matcher,string,header,matcher,header,matchers,assert,that,deprecated,warnings,has,item,header,matcher
DeprecationHttpIT -> @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/19222")     public void testUniqueDeprecationResponsesMergedTogether() throws IOException;1526449283;Attempts to do a scatter/gather request that expects unique responses per sub-request.;@AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/19222")_    public void testUniqueDeprecationResponsesMergedTogether() throws IOException {_        final String[] indices = new String[randomIntBetween(2, 5)]___        _        for (int i = 0_ i < indices.length_ ++i) {_            indices[i] = "test" + i___            _            assertTrue(prepareCreate(indices[i]).setSettings(Settings.builder().put("number_of_shards", 1)).get().isAcknowledged())___            int randomDocCount = randomIntBetween(1, 2)___            for (int j = 0_ j < randomDocCount_ ++j) {_                index(indices[i], "type", Integer.toString(j), "{\"field\":" + j + "}")__            }_        }__        refresh(indices)___        final String commaSeparatedIndices = Stream.of(indices).collect(Collectors.joining(","))___        _        Request request = new Request("GET", "/" + commaSeparatedIndices + "/_search")__        request.setJsonEntity("{\"query\":{\"bool\":{\"filter\":[{\"" + TestDeprecatedQueryBuilder.NAME +  "\":{}}]}}}")__        Response response = getRestClient().performRequest(request)__        assertThat(response.getStatusLine().getStatusCode(), equalTo(OK.getStatus()))___        final List<String> deprecatedWarnings = getWarningHeaders(response.getHeaders())__        final List<Matcher<String>> headerMatchers = new ArrayList<>(indices.length)___        for (String index : indices) {_            headerMatchers.add(containsString(LoggerMessageFormat.format("[{}] index", (Object)index)))__        }__        assertThat(deprecatedWarnings, hasSize(headerMatchers.size()))__        for (Matcher<String> headerMatcher : headerMatchers) {_            assertThat(deprecatedWarnings, hasItem(headerMatcher))__        }_    };attempts,to,do,a,scatter,gather,request,that,expects,unique,responses,per,sub,request;awaits,fix,bug,url,https,github,com,elastic,elasticsearch,issues,19222,public,void,test,unique,deprecation,responses,merged,together,throws,ioexception,final,string,indices,new,string,random,int,between,2,5,for,int,i,0,i,indices,length,i,indices,i,test,i,assert,true,prepare,create,indices,i,set,settings,settings,builder,put,1,get,is,acknowledged,int,random,doc,count,random,int,between,1,2,for,int,j,0,j,random,doc,count,j,index,indices,i,type,integer,to,string,j,field,j,refresh,indices,final,string,comma,separated,indices,stream,of,indices,collect,collectors,joining,request,request,new,request,get,comma,separated,indices,request,set,json,entity,query,bool,filter,test,deprecated,query,builder,name,response,response,get,rest,client,perform,request,request,assert,that,response,get,status,line,get,status,code,equal,to,ok,get,status,final,list,string,deprecated,warnings,get,warning,headers,response,get,headers,final,list,matcher,string,header,matchers,new,array,list,indices,length,for,string,index,indices,header,matchers,add,contains,string,logger,message,format,format,index,object,index,assert,that,deprecated,warnings,has,size,header,matchers,size,for,matcher,string,header,matcher,header,matchers,assert,that,deprecated,warnings,has,item,header,matcher
