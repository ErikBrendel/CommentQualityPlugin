commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;10;;@Override protected Settings nodeSettings(int nodeOrdinal) {     return Settings.builder().put(super.nodeSettings(nodeOrdinal)).put(SETTING_CORS_ALLOW_ORIGIN.getKey(), "/https?:\\/\\/localhost(:[0-9]+)?/").put(SETTING_CORS_ALLOW_CREDENTIALS.getKey(), true).put(SETTING_CORS_ALLOW_METHODS.getKey(), "get, options, post").put(SETTING_CORS_ENABLED.getKey(), true).build(). }
false;public;0;23;;public void testThatRegularExpressionWorksOnMatch() throws IOException {     {         String corsValue = "http://localhost:9200".         Request request = new Request("GET", "/").         RequestOptions.Builder options = request.getOptions().toBuilder().         options.addHeader("User-Agent", "Mozilla Bar").         options.addHeader("Origin", corsValue).         request.setOptions(options).         Response response = getRestClient().performRequest(request).         assertResponseWithOriginHeader(response, corsValue).     }     {         String corsValue = "https://localhost:9201".         Request request = new Request("GET", "/").         RequestOptions.Builder options = request.getOptions().toBuilder().         options.addHeader("User-Agent", "Mozilla Bar").         options.addHeader("Origin", corsValue).         request.setOptions(options).         Response response = getRestClient().performRequest(request).         assertResponseWithOriginHeader(response, corsValue).         assertThat(response.getHeader("Access-Control-Allow-Credentials"), is("true")).     } }
false;public;0;16;;public void testThatRegularExpressionReturnsForbiddenOnNonMatch() throws IOException {     Request request = new Request("GET", "/").     RequestOptions.Builder options = request.getOptions().toBuilder().     options.addHeader("User-Agent", "Mozilla Bar").     options.addHeader("Origin", "http://evil-host:9200").     request.setOptions(options).     try {         getRestClient().performRequest(request).         fail("request should have failed").     } catch (ResponseException e) {         Response response = e.getResponse().         // a rejected origin gets a FORBIDDEN - 403         assertThat(response.getStatusLine().getStatusCode(), is(403)).         assertThat(response.getHeader("Access-Control-Allow-Origin"), nullValue()).     } }
false;public;0;9;;public void testThatSendingNoOriginHeaderReturnsNoAccessControlHeader() throws IOException {     Request request = new Request("GET", "/").     RequestOptions.Builder options = request.getOptions().toBuilder().     options.addHeader("User-Agent", "Mozilla Bar").     request.setOptions(options).     Response response = getRestClient().performRequest(request).     assertThat(response.getStatusLine().getStatusCode(), is(200)).     assertThat(response.getHeader("Access-Control-Allow-Origin"), nullValue()). }
false;public;0;5;;public void testThatRegularExpressionIsNotAppliedWithoutCorrectBrowserOnMatch() throws IOException {     Response response = getRestClient().performRequest(new Request("GET", "/")).     assertThat(response.getStatusLine().getStatusCode(), is(200)).     assertThat(response.getHeader("Access-Control-Allow-Origin"), nullValue()). }
false;public;0;12;;public void testThatPreFlightRequestWorksOnMatch() throws IOException {     String corsValue = "http://localhost:9200".     Request request = new Request("OPTIONS", "/").     RequestOptions.Builder options = request.getOptions().toBuilder().     options.addHeader("User-Agent", "Mozilla Bar").     options.addHeader("Origin", corsValue).     options.addHeader("Access-Control-Request-Method", "GET").     request.setOptions(options).     Response response = getRestClient().performRequest(request).     assertResponseWithOriginHeader(response, corsValue).     assertNotNull(response.getHeader("Access-Control-Allow-Methods")). }
false;public;0;19;;public void testThatPreFlightRequestReturnsNullOnNonMatch() throws IOException {     String corsValue = "http://evil-host:9200".     Request request = new Request("OPTIONS", "/").     RequestOptions.Builder options = request.getOptions().toBuilder().     options.addHeader("User-Agent", "Mozilla Bar").     options.addHeader("Origin", corsValue).     options.addHeader("Access-Control-Request-Method", "GET").     request.setOptions(options).     try {         getRestClient().performRequest(request).         fail("request should have failed").     } catch (ResponseException e) {         Response response = e.getResponse().         // a rejected origin gets a FORBIDDEN - 403         assertThat(response.getStatusLine().getStatusCode(), is(403)).         assertThat(response.getHeader("Access-Control-Allow-Origin"), nullValue()).         assertThat(response.getHeader("Access-Control-Allow-Methods"), nullValue()).     } }
false;private,static;2;4;;private static void assertResponseWithOriginHeader(Response response, String expectedCorsHeader) {     assertThat(response.getStatusLine().getStatusCode(), is(200)).     assertThat(response.getHeader("Access-Control-Allow-Origin"), is(expectedCorsHeader)). }
