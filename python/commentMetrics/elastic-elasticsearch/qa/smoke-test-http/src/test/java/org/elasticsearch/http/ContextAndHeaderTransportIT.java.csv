commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;6;;@Override protected Settings nodeSettings(int nodeOrdinal) {     return Settings.builder().put(super.nodeSettings(nodeOrdinal)).build(). }
false;protected;0;7;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     ArrayList<Class<? extends Plugin>> plugins = new ArrayList<>(super.nodePlugins()).     plugins.add(ActionLoggingPlugin.class).     plugins.add(CustomHeadersPlugin.class).     return plugins. }
false;public;0;20;;@Before public void createIndices() throws Exception {     String mapping = Strings.toString(jsonBuilder().startObject().startObject("type").startObject("properties").startObject("location").field("type", "geo_shape").endObject().startObject("name").field("type", "text").endObject().endObject().endObject().endObject()).     Settings settings = Settings.builder().put(indexSettings()).put(SETTING_NUMBER_OF_SHARDS, // A single shard will help to keep the tests repeatable.     1).build().     assertAcked(transportClient().admin().indices().prepareCreate(lookupIndex).setSettings(settings).addMapping("type", mapping, XContentType.JSON)).     assertAcked(transportClient().admin().indices().prepareCreate(queryIndex).setSettings(settings).addMapping("type", mapping, XContentType.JSON)).     ensureGreen(queryIndex, lookupIndex).     requests.clear(). }
false;public;0;5;;@After public void checkAllRequestsContainHeaders() {     assertRequestsContainHeader(IndexRequest.class).     assertRequestsContainHeader(RefreshRequest.class). }
false;public;0;20;;public void testThatTermsLookupGetRequestContainsContextAndHeaders() throws Exception {     transportClient().prepareIndex(lookupIndex, "type", "1").setSource(jsonBuilder().startObject().array("followers", "foo", "bar", "baz").endObject()).get().     transportClient().prepareIndex(queryIndex, "type", "1").setSource(jsonBuilder().startObject().field("username", "foo").endObject()).get().     transportClient().admin().indices().prepareRefresh(queryIndex, lookupIndex).get().     TermsLookup termsLookup = new TermsLookup(lookupIndex, "type", "1", "followers").     TermsQueryBuilder termsLookupFilterBuilder = QueryBuilders.termsLookupQuery("username", termsLookup).     BoolQueryBuilder queryBuilder = QueryBuilders.boolQuery().must(QueryBuilders.matchAllQuery()).must(termsLookupFilterBuilder).     SearchResponse searchResponse = transportClient().prepareSearch(queryIndex).setQuery(queryBuilder).get().     assertNoFailures(searchResponse).     assertHitCount(searchResponse, 1).     assertGetRequestsContainHeaders(). }
false;public;0;40;;public void testThatGeoShapeQueryGetRequestContainsContextAndHeaders() throws Exception {     transportClient().prepareIndex(lookupIndex, "type", "1").setSource(jsonBuilder().startObject().field("name", "Munich Suburban Area").startObject("location").field("type", "polygon").startArray("coordinates").startArray().startArray().value(11.34).value(48.25).endArray().startArray().value(11.68).value(48.25).endArray().startArray().value(11.65).value(48.06).endArray().startArray().value(11.37).value(48.13).endArray().startArray().value(11.34).value(48.25).endArray().endArray().endArray().endObject().endObject()).get().     // second document     transportClient().prepareIndex(queryIndex, "type", "1").setSource(jsonBuilder().startObject().field("name", "Munich Center").startObject("location").field("type", "point").startArray("coordinates").value(11.57).value(48.13).endArray().endObject().endObject()).get().     transportClient().admin().indices().prepareRefresh(lookupIndex, queryIndex).get().     GeoShapeQueryBuilder queryBuilder = QueryBuilders.geoShapeQuery("location", "1", "type").indexedShapeIndex(lookupIndex).indexedShapePath("location").     SearchResponse searchResponse = transportClient().prepareSearch(queryIndex).setQuery(queryBuilder).get().     assertNoFailures(searchResponse).     assertHitCount(searchResponse, 1).     assertThat(requests, hasSize(greaterThan(0))).     assertGetRequestsContainHeaders(). }
false;public;0;26;;public void testThatMoreLikeThisQueryMultiTermVectorRequestContainsContextAndHeaders() throws Exception {     transportClient().prepareIndex(lookupIndex, "type", "1").setSource(jsonBuilder().startObject().field("name", "Star Wars - The new republic").endObject()).get().     transportClient().prepareIndex(queryIndex, "type", "1").setSource(jsonBuilder().startObject().field("name", "Jar Jar Binks - A horrible mistake").endObject()).get().     transportClient().prepareIndex(queryIndex, "type", "2").setSource(jsonBuilder().startObject().field("name", "Star Wars - Return of the jedi").endObject()).get().     transportClient().admin().indices().prepareRefresh(lookupIndex, queryIndex).get().     MoreLikeThisQueryBuilder moreLikeThisQueryBuilder = QueryBuilders.moreLikeThisQuery(new String[] { "name" }, null, new Item[] { new Item(lookupIndex, "type", "1") }).minTermFreq(1).minDocFreq(1).     SearchResponse searchResponse = transportClient().prepareSearch(queryIndex).setQuery(moreLikeThisQueryBuilder).get().     assertNoFailures(searchResponse).     assertHitCount(searchResponse, 1).     assertRequestsContainHeader(MultiTermVectorsRequest.class). }
false;public;0;17;;public void testThatRelevantHttpHeadersBecomeRequestHeaders() throws IOException {     final String IRRELEVANT_HEADER = "SomeIrrelevantHeader".     Request request = new Request("GET", "/" + queryIndex + "/_search").     RequestOptions.Builder options = request.getOptions().toBuilder().     options.addHeader(CUSTOM_HEADER, randomHeaderValue).     options.addHeader(IRRELEVANT_HEADER, randomHeaderValue).     request.setOptions(options).     Response response = getRestClient().performRequest(request).     assertThat(response.getStatusLine().getStatusCode(), equalTo(200)).     List<RequestAndHeaders> searchRequests = getRequests(SearchRequest.class).     assertThat(searchRequests, hasSize(greaterThan(0))).     for (RequestAndHeaders requestAndHeaders : searchRequests) {         assertThat(requestAndHeaders.headers.containsKey(CUSTOM_HEADER), is(true)).         // was not specified, thus is not included         assertThat(requestAndHeaders.headers.containsKey(IRRELEVANT_HEADER), is(false)).     } }
false;private;1;10;;private List<RequestAndHeaders> getRequests(Class<?> clazz) {     List<RequestAndHeaders> results = new ArrayList<>().     for (RequestAndHeaders request : requests) {         if (request.request.getClass().equals(clazz)) {             results.add(request).         }     }     return results. }
false;private;1;6;;private void assertRequestsContainHeader(Class<? extends ActionRequest> clazz) {     List<RequestAndHeaders> classRequests = getRequests(clazz).     for (RequestAndHeaders request : classRequests) {         assertRequestContainsHeader(request.request, request.headers).     } }
false;private;0;3;;private void assertGetRequestsContainHeaders() {     assertGetRequestsContainHeaders(this.lookupIndex). }
false;private;1;11;;private void assertGetRequestsContainHeaders(String index) {     List<RequestAndHeaders> getRequests = getRequests(GetRequest.class).     assertThat(getRequests, hasSize(greaterThan(0))).     for (RequestAndHeaders request : getRequests) {         if (!((GetRequest) request.request).index().equals(index)) {             continue.         }         assertRequestContainsHeader(request.request, request.headers).     } }
false;private;2;10;;private void assertRequestContainsHeader(ActionRequest request, Map<String, String> context) {     String msg = String.format(Locale.ROOT, "Expected header %s to be in request %s", CUSTOM_HEADER, request.getClass().getName()).     if (request instanceof IndexRequest) {         IndexRequest indexRequest = (IndexRequest) request.         msg = String.format(Locale.ROOT, "Expected header %s to be in index request %s/%s/%s", CUSTOM_HEADER, indexRequest.index(), indexRequest.type(), indexRequest.id()).     }     assertThat(msg, context.containsKey(CUSTOM_HEADER), is(true)).     assertThat(context.get(CUSTOM_HEADER).toString(), is(randomHeaderValue)). }
true;private;0;3;/**  * a transport client that adds our random header  */ ;/**  * a transport client that adds our random header  */ private Client transportClient() {     return internalCluster().transportClient().filterWithHeader(Collections.singletonMap(CUSTOM_HEADER, randomHeaderValue)). }
false;public;9;8;;@Override public Collection<Object> createComponents(Client client, ClusterService clusterService, ThreadPool threadPool, ResourceWatcherService resourceWatcherService, ScriptService scriptService, NamedXContentRegistry xContentRegistry, Environment environment, NodeEnvironment nodeEnvironment, NamedWriteableRegistry namedWriteableRegistry) {     loggingFilter.set(new LoggingFilter(threadPool)).     return Collections.emptyList(). }
false;public;0;4;;@Override public List<ActionFilter> getActionFilters() {     return singletonList(loggingFilter.get()). }
false;public;0;4;;@Override public int order() {     return 999. }
false;protected;3;5;;@Override protected boolean apply(String action, ActionRequest request, ActionListener<?> listener) {     requests.add(new RequestAndHeaders(threadPool.getThreadContext().getHeaders(), request)).     return true. }
false;public;0;3;;public Collection<String> getRestHeaders() {     return Collections.singleton(CUSTOM_HEADER). }
