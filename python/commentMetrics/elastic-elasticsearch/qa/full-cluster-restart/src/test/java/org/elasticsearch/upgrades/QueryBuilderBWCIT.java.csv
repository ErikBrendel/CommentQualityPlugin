commented;modifiers;parameterAmount;loc;comment;code
false;private,static;2;3;;private static void addCandidate(String querySource, QueryBuilder expectedQb) {     CANDIDATES.add(new Object[] { "{\"query\": {" + querySource + "}}", expectedQb }). }
false;public;0;70;;public void testQueryBuilderBWC() throws Exception {     String index = "queries".     if (isRunningAgainstOldCluster()) {         XContentBuilder mappingsAndSettings = jsonBuilder().         mappingsAndSettings.startObject().         {             mappingsAndSettings.startObject("settings").             mappingsAndSettings.field("number_of_shards", 1).             mappingsAndSettings.field("number_of_replicas", 0).             mappingsAndSettings.endObject().         }         {             mappingsAndSettings.startObject("mappings").             mappingsAndSettings.startObject("properties").             {                 mappingsAndSettings.startObject("query").                 mappingsAndSettings.field("type", "percolator").                 mappingsAndSettings.endObject().             }             {                 mappingsAndSettings.startObject("keyword_field").                 mappingsAndSettings.field("type", "keyword").                 mappingsAndSettings.endObject().             }             {                 mappingsAndSettings.startObject("long_field").                 mappingsAndSettings.field("type", "long").                 mappingsAndSettings.endObject().             }             mappingsAndSettings.endObject().             mappingsAndSettings.endObject().         }         mappingsAndSettings.endObject().         Request request = new Request("PUT", "/" + index).         request.setOptions(allowTypesRemovalWarnings()).         request.setJsonEntity(Strings.toString(mappingsAndSettings)).         Response rsp = client().performRequest(request).         assertEquals(200, rsp.getStatusLine().getStatusCode()).         for (int i = 0. i < CANDIDATES.size(). i++) {             request = new Request("PUT", "/" + index + "/_doc/" + Integer.toString(i)).             request.setJsonEntity((String) CANDIDATES.get(i)[0]).             rsp = client().performRequest(request).             assertEquals(201, rsp.getStatusLine().getStatusCode()).         }     } else {         NamedWriteableRegistry registry = new NamedWriteableRegistry(new SearchModule(Settings.EMPTY, false, Collections.emptyList()).getNamedWriteables()).         for (int i = 0. i < CANDIDATES.size(). i++) {             QueryBuilder expectedQueryBuilder = (QueryBuilder) CANDIDATES.get(i)[1].             Request request = new Request("GET", "/" + index + "/_search").             request.setJsonEntity("{\"query\": {\"ids\": {\"values\": [\"" + Integer.toString(i) + "\"]}}, " + "\"docvalue_fields\": [{\"field\":\"query.query_builder_field\"}]}").             Response rsp = client().performRequest(request).             assertEquals(200, rsp.getStatusLine().getStatusCode()).             Map<?, ?> hitRsp = (Map<?, ?>) ((List<?>) ((Map<?, ?>) toMap(rsp).get("hits")).get("hits")).get(0).             String queryBuilderStr = (String) ((List<?>) ((Map<?, ?>) hitRsp.get("fields")).get("query.query_builder_field")).get(0).             byte[] qbSource = Base64.getDecoder().decode(queryBuilderStr).             try (InputStream in = new ByteArrayInputStream(qbSource, 0, qbSource.length)) {                 try (StreamInput input = new NamedWriteableAwareStreamInput(new InputStreamStreamInput(in), registry)) {                     input.setVersion(getOldClusterVersion()).                     QueryBuilder queryBuilder = input.readNamedWriteable(QueryBuilder.class).                     assert in.read() == -1.                     assertEquals(expectedQueryBuilder, queryBuilder).                 }             }         }     } }
false;private,static;1;3;;private static Map<String, Object> toMap(Response response) throws IOException {     return toMap(EntityUtils.toString(response.getEntity())). }
false;private,static;1;3;;private static Map<String, Object> toMap(String response) throws IOException {     return XContentHelper.convertToMap(JsonXContent.jsonXContent, response, false). }
