commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void initHighLevelClient() throws IOException {     super.initClient().     if (restHighLevelClient == null) {         restHighLevelClient = new HighLevelClient(client()).     } }
false;public,static;0;5;;@AfterClass public static void cleanupClient() throws IOException {     restHighLevelClient.close().     restHighLevelClient = null. }
false;public;0;5;;@Override public void tearDown() throws Exception {     super.tearDown().     ThreadPool.terminate(threadPool, 10, TimeUnit.SECONDS). }
false;private,static;4;42;;private static MockTransportService startTransport(final String id, final List<DiscoveryNode> knownNodes, final Version version, final ThreadPool threadPool) {     boolean success = false.     final Settings s = Settings.builder().put("node.name", id).build().     ClusterName clusterName = ClusterName.CLUSTER_NAME_SETTING.get(s).     MockTransportService newService = MockTransportService.createNewService(s, version, threadPool, null).     try {         newService.registerRequestHandler(ClusterSearchShardsAction.NAME, ThreadPool.Names.SAME, ClusterSearchShardsRequest::new, (request, channel, task) -> {             channel.sendResponse(new ClusterSearchShardsResponse(new ClusterSearchShardsGroup[0], knownNodes.toArray(new DiscoveryNode[0]), Collections.emptyMap())).         }).         newService.registerRequestHandler(SearchAction.NAME, ThreadPool.Names.SAME, SearchRequest::new, (request, channel, task) -> {             InternalSearchResponse response = new InternalSearchResponse(new SearchHits(new SearchHit[0], new TotalHits(0, TotalHits.Relation.EQUAL_TO), Float.NaN), InternalAggregations.EMPTY, null, null, false, null, 1).             SearchResponse searchResponse = new SearchResponse(response, null, 1, 1, 0, 100, ShardSearchFailure.EMPTY_ARRAY, SearchResponse.Clusters.EMPTY).             channel.sendResponse(searchResponse).         }).         newService.registerRequestHandler(ClusterStateAction.NAME, ThreadPool.Names.SAME, ClusterStateRequest::new, (request, channel, task) -> {             DiscoveryNodes.Builder builder = DiscoveryNodes.builder().             for (DiscoveryNode node : knownNodes) {                 builder.add(node).             }             ClusterState build = ClusterState.builder(clusterName).nodes(builder.build()).build().             channel.sendResponse(new ClusterStateResponse(clusterName, build, 0L, false)).         }).         newService.start().         newService.acceptIncomingRequests().         success = true.         return newService.     } finally {         if (success == false) {             newService.close().         }     } }
false;public;0;94;;public void testSearchSkipUnavailable() throws IOException {     try (MockTransportService remoteTransport = startTransport("node0", new CopyOnWriteArrayList<>(), Version.CURRENT, threadPool)) {         DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode().         updateRemoteClusterSettings(Collections.singletonMap("seeds", remoteNode.getAddress().toString())).         for (int i = 0. i < 10. i++) {             restHighLevelClient.index(new IndexRequest("index").id(String.valueOf(i)).source("field", "value"), RequestOptions.DEFAULT).         }         Response refreshResponse = client().performRequest(new Request("POST", "/index/_refresh")).         assertEquals(200, refreshResponse.getStatusLine().getStatusCode()).         {             SearchResponse response = restHighLevelClient.search(new SearchRequest("index"), RequestOptions.DEFAULT).             assertSame(SearchResponse.Clusters.EMPTY, response.getClusters()).             assertEquals(10, response.getHits().getTotalHits().value).             assertEquals(10, response.getHits().getHits().length).         }         {             SearchResponse response = restHighLevelClient.search(new SearchRequest("index", "remote1:index"), RequestOptions.DEFAULT).             assertEquals(2, response.getClusters().getTotal()).             assertEquals(2, response.getClusters().getSuccessful()).             assertEquals(0, response.getClusters().getSkipped()).             assertEquals(10, response.getHits().getTotalHits().value).             assertEquals(10, response.getHits().getHits().length).         }         {             SearchResponse response = restHighLevelClient.search(new SearchRequest("remote1:index"), RequestOptions.DEFAULT).             assertEquals(1, response.getClusters().getTotal()).             assertEquals(1, response.getClusters().getSuccessful()).             assertEquals(0, response.getClusters().getSkipped()).             assertEquals(0, response.getHits().getTotalHits().value).         }         {             SearchResponse response = restHighLevelClient.search(new SearchRequest("index", "remote1:index").scroll("1m"), RequestOptions.DEFAULT).             assertEquals(2, response.getClusters().getTotal()).             assertEquals(2, response.getClusters().getSuccessful()).             assertEquals(0, response.getClusters().getSkipped()).             assertEquals(10, response.getHits().getTotalHits().value).             assertEquals(10, response.getHits().getHits().length).             String scrollId = response.getScrollId().             SearchResponse scrollResponse = restHighLevelClient.scroll(new SearchScrollRequest(scrollId), RequestOptions.DEFAULT).             assertSame(SearchResponse.Clusters.EMPTY, scrollResponse.getClusters()).             assertEquals(10, scrollResponse.getHits().getTotalHits().value).             assertEquals(0, scrollResponse.getHits().getHits().length).         }         remoteTransport.close().         updateRemoteClusterSettings(Collections.singletonMap("skip_unavailable", true)).         {             SearchResponse response = restHighLevelClient.search(new SearchRequest("index", "remote1:index"), RequestOptions.DEFAULT).             assertEquals(2, response.getClusters().getTotal()).             assertEquals(1, response.getClusters().getSuccessful()).             assertEquals(1, response.getClusters().getSkipped()).             assertEquals(10, response.getHits().getTotalHits().value).             assertEquals(10, response.getHits().getHits().length).         }         {             SearchResponse response = restHighLevelClient.search(new SearchRequest("remote1:index"), RequestOptions.DEFAULT).             assertEquals(1, response.getClusters().getTotal()).             assertEquals(0, response.getClusters().getSuccessful()).             assertEquals(1, response.getClusters().getSkipped()).             assertEquals(0, response.getHits().getTotalHits().value).         }         {             SearchResponse response = restHighLevelClient.search(new SearchRequest("index", "remote1:index").scroll("1m"), RequestOptions.DEFAULT).             assertEquals(2, response.getClusters().getTotal()).             assertEquals(1, response.getClusters().getSuccessful()).             assertEquals(1, response.getClusters().getSkipped()).             assertEquals(10, response.getHits().getTotalHits().value).             assertEquals(10, response.getHits().getHits().length).             String scrollId = response.getScrollId().             SearchResponse scrollResponse = restHighLevelClient.scroll(new SearchScrollRequest(scrollId), RequestOptions.DEFAULT).             assertSame(SearchResponse.Clusters.EMPTY, scrollResponse.getClusters()).             assertEquals(10, scrollResponse.getHits().getTotalHits().value).             assertEquals(0, scrollResponse.getHits().getHits().length).         }         updateRemoteClusterSettings(Collections.singletonMap("skip_unavailable", false)).         assertSearchConnectFailure().         Map<String, Object> map = new HashMap<>().         map.put("seeds", null).         map.put("skip_unavailable", null).         updateRemoteClusterSettings(map).     } }
false;public;0;44;;public void testSkipUnavailableDependsOnSeeds() throws IOException {     try (MockTransportService remoteTransport = startTransport("node0", new CopyOnWriteArrayList<>(), Version.CURRENT, threadPool)) {         DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode().         {             // check that skip_unavailable alone cannot be set             Request request = new Request("PUT", "/_cluster/settings").             request.setEntity(buildUpdateSettingsRequestBody(Collections.singletonMap("skip_unavailable", randomBoolean()))).             ResponseException responseException = expectThrows(ResponseException.class, () -> client().performRequest(request)).             assertEquals(400, responseException.getResponse().getStatusLine().getStatusCode()).             assertThat(responseException.getMessage(), containsString("missing required setting [cluster.remote.remote1.seeds] " + "for setting [cluster.remote.remote1.skip_unavailable]")).         }         Map<String, Object> settingsMap = new HashMap<>().         settingsMap.put("seeds", remoteNode.getAddress().toString()).         settingsMap.put("skip_unavailable", randomBoolean()).         updateRemoteClusterSettings(settingsMap).         {             // check that seeds cannot be reset alone if skip_unavailable is set             Request request = new Request("PUT", "/_cluster/settings").             request.setEntity(buildUpdateSettingsRequestBody(Collections.singletonMap("seeds", null))).             ResponseException responseException = expectThrows(ResponseException.class, () -> client().performRequest(request)).             assertEquals(400, responseException.getResponse().getStatusLine().getStatusCode()).             assertThat(responseException.getMessage(), containsString("missing required setting [cluster.remote.remote1.seeds] " + "for setting [cluster.remote.remote1.skip_unavailable]")).         }         if (randomBoolean()) {             updateRemoteClusterSettings(Collections.singletonMap("skip_unavailable", null)).             updateRemoteClusterSettings(Collections.singletonMap("seeds", null)).         } else {             Map<String, Object> nullMap = new HashMap<>().             nullMap.put("seeds", null).             nullMap.put("skip_unavailable", null).             updateRemoteClusterSettings(nullMap).         }     } }
false;private,static;0;20;;private static void assertSearchConnectFailure() {     {         ElasticsearchException exception = expectThrows(ElasticsearchException.class, () -> restHighLevelClient.search(new SearchRequest("index", "remote1:index"), RequestOptions.DEFAULT)).         ElasticsearchException rootCause = (ElasticsearchException) exception.getRootCause().         assertThat(rootCause.getMessage(), containsString("connect_exception")).     }     {         ElasticsearchException exception = expectThrows(ElasticsearchException.class, () -> restHighLevelClient.search(new SearchRequest("remote1:index"), RequestOptions.DEFAULT)).         ElasticsearchException rootCause = (ElasticsearchException) exception.getRootCause().         assertThat(rootCause.getMessage(), containsString("connect_exception")).     }     {         ElasticsearchException exception = expectThrows(ElasticsearchException.class, () -> restHighLevelClient.search(new SearchRequest("remote1:index").scroll("1m"), RequestOptions.DEFAULT)).         ElasticsearchException rootCause = (ElasticsearchException) exception.getRootCause().         assertThat(rootCause.getMessage(), containsString("connect_exception")).     } }
false;private,static;1;6;;private static void updateRemoteClusterSettings(Map<String, Object> settings) throws IOException {     Request request = new Request("PUT", "/_cluster/settings").     request.setEntity(buildUpdateSettingsRequestBody(settings)).     Response response = client().performRequest(request).     assertEquals(200, response.getStatusLine().getStatusCode()). }
false;private,static;1;22;;private static HttpEntity buildUpdateSettingsRequestBody(Map<String, Object> settings) throws IOException {     String requestBody.     try (XContentBuilder builder = JsonXContent.contentBuilder()) {         builder.startObject().         {             builder.startObject("persistent").             {                 builder.startObject("cluster.remote.remote1").                 {                     for (Map.Entry<String, Object> entry : settings.entrySet()) {                         builder.field(entry.getKey(), entry.getValue()).                     }                 }                 builder.endObject().             }             builder.endObject().         }         builder.endObject().         requestBody = Strings.toString(builder).     }     return new NStringEntity(requestBody, ContentType.APPLICATION_JSON). }
