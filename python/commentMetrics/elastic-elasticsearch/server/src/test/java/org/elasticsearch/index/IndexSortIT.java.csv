commented;modifiers;parameterAmount;loc;comment;code
false;private,static;0;29;;private static XContentBuilder createTestMapping() {     try {         return jsonBuilder().startObject().startObject("properties").startObject("date").field("type", "date").endObject().startObject("numeric").field("type", "integer").field("doc_values", false).endObject().startObject("numeric_dv").field("type", "integer").field("doc_values", true).endObject().startObject("keyword_dv").field("type", "keyword").field("doc_values", true).endObject().startObject("keyword").field("type", "keyword").field("doc_values", false).endObject().endObject().endObject().     } catch (IOException e) {         throw new IllegalStateException(e).     } }
false;public;0;26;;public void testIndexSort() {     SortField dateSort = new SortedNumericSortField("date", SortField.Type.LONG, false).     dateSort.setMissingValue(Long.MAX_VALUE).     SortField numericSort = new SortedNumericSortField("numeric_dv", SortField.Type.LONG, false).     numericSort.setMissingValue(Long.MAX_VALUE).     SortField keywordSort = new SortedSetSortField("keyword_dv", false).     keywordSort.setMissingValue(SortField.STRING_LAST).     Sort indexSort = new Sort(dateSort, numericSort, keywordSort).     prepareCreate("test").setSettings(Settings.builder().put(indexSettings()).put("index.number_of_shards", "1").put("index.number_of_replicas", "1").putList("index.sort.field", "date", "numeric_dv", "keyword_dv")).addMapping("test", TEST_MAPPING).get().     for (int i = 0. i < 20. i++) {         client().prepareIndex("test", "test", Integer.toString(i)).setSource("numeric_dv", randomInt(), "keyword_dv", randomAlphaOfLengthBetween(10, 20)).get().     }     flushAndRefresh().     ensureYellow().     assertSortedSegments("test", indexSort). }
false;public;0;34;;public void testInvalidIndexSort() {     IllegalArgumentException exc = expectThrows(IllegalArgumentException.class, () -> prepareCreate("test").setSettings(Settings.builder().put(indexSettings()).putList("index.sort.field", "invalid_field")).addMapping("test", TEST_MAPPING).get()).     assertThat(exc.getMessage(), containsString("unknown index sort field:[invalid_field]")).     exc = expectThrows(IllegalArgumentException.class, () -> prepareCreate("test").setSettings(Settings.builder().put(indexSettings()).putList("index.sort.field", "numeric")).addMapping("test", TEST_MAPPING).get()).     assertThat(exc.getMessage(), containsString("docvalues not found for index sort field:[numeric]")).     exc = expectThrows(IllegalArgumentException.class, () -> prepareCreate("test").setSettings(Settings.builder().put(indexSettings()).putList("index.sort.field", "keyword")).addMapping("test", TEST_MAPPING).get()).     assertThat(exc.getMessage(), containsString("docvalues not found for index sort field:[keyword]")). }
