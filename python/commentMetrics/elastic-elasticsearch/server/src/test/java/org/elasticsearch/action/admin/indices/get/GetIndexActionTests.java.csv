commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Before public void setUp() throws Exception {     super.setUp().     settingsFilter = new SettingsModule(Settings.EMPTY, emptyList(), emptyList(), emptySet()).getSettingsFilter().     threadPool = new TestThreadPool("GetIndexActionTests").     clusterService = getInstanceFromNode(ClusterService.class).     indicesService = getInstanceFromNode(IndicesService.class).     CapturingTransport capturingTransport = new CapturingTransport().     transportService = capturingTransport.createTransportService(clusterService.getSettings(), threadPool, TransportService.NOOP_TRANSPORT_INTERCEPTOR, boundAddress -> clusterService.localNode(), null, emptySet()).     transportService.start().     transportService.acceptIncomingRequests().     getIndexAction = new GetIndexActionTests.TestTransportGetIndexAction(). }
false;public;0;6;;@After public void tearDown() throws Exception {     ThreadPool.terminate(threadPool, 30, TimeUnit.SECONDS).     threadPool = null.     super.tearDown(). }
false;public;0;11;;public void testIncludeDefaults() {     GetIndexRequest defaultsRequest = new GetIndexRequest().indices(indexName).includeDefaults(true).     getIndexAction.execute(null, defaultsRequest, ActionListener.wrap(defaultsResponse -> assertNotNull("index.refresh_interval should be set as we are including defaults", defaultsResponse.getSetting(indexName, "index.refresh_interval")), exception -> {         throw new AssertionError(exception).     })). }
false;public;0;11;;public void testDoNotIncludeDefaults() {     GetIndexRequest noDefaultsRequest = new GetIndexRequest().indices(indexName).     getIndexAction.execute(null, noDefaultsRequest, ActionListener.wrap(noDefaultsResponse -> assertNull("index.refresh_interval should be null as it was never set", noDefaultsResponse.getSetting(indexName, "index.refresh_interval")), exception -> {         throw new AssertionError(exception).     })). }
false;protected;4;6;;@Override protected void doMasterOperation(GetIndexRequest request, String[] concreteIndices, ClusterState state, ActionListener<GetIndexResponse> listener) {     ClusterState stateWithIndex = ClusterStateCreationUtils.state(indexName, 1, 1).     super.doMasterOperation(request, concreteIndices, stateWithIndex, listener). }
false;public;2;4;;@Override public String[] concreteIndexNames(ClusterState state, IndicesRequest request) {     return request.indices(). }
false;public;2;8;;@Override public Index[] concreteIndices(ClusterState state, IndicesRequest request) {     Index[] out = new Index[request.indices().length].     for (int x = 0. x < out.length. x++) {         out[x] = new Index(request.indices()[x], "_na_").     }     return out. }
