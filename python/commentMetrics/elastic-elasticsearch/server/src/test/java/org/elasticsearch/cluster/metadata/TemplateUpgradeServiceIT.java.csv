commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     return Collections.singletonList(TestPlugin.class). }
false;public;9;11;;@Override public Collection<Object> createComponents(Client client, ClusterService clusterService, ThreadPool threadPool, ResourceWatcherService resourceWatcherService, ScriptService scriptService, NamedXContentRegistry xContentRegistry, Environment environment, NodeEnvironment nodeEnvironment, NamedWriteableRegistry namedWriteableRegistry) {     clusterService.getClusterSettings().addSettingsUpdateConsumer(UPDATE_TEMPLATE_DUMMY_SETTING, integer -> {         logger.debug("the template dummy setting was updated to {}", integer).     }).     return super.createComponents(client, clusterService, threadPool, resourceWatcherService, scriptService, xContentRegistry, environment, nodeEnvironment, namedWriteableRegistry). }
false;public;0;11;;@Override public UnaryOperator<Map<String, IndexTemplateMetaData>> getIndexTemplateMetaDataUpgrader() {     return templates -> {         templates.put("test_added_template", IndexTemplateMetaData.builder("test_added_template").patterns(Collections.singletonList("*")).build()).         templates.remove("test_removed_template").         templates.put("test_changed_template", IndexTemplateMetaData.builder("test_changed_template").order(10).patterns(Collections.singletonList("*")).build()).         return templates.     }. }
false;public;0;4;;@Override public List<Setting<?>> getSettings() {     return Collections.singletonList(UPDATE_TEMPLATE_DUMMY_SETTING). }
false;public;0;56;;public void testTemplateUpdate() throws Exception {     assertTemplates().     // Change some templates     assertAcked(client().admin().indices().preparePutTemplate("test_dummy_template").setOrder(0).setPatterns(Collections.singletonList("*")).get()).     assertAcked(client().admin().indices().preparePutTemplate("test_changed_template").setOrder(0).setPatterns(Collections.singletonList("*")).get()).     assertAcked(client().admin().indices().preparePutTemplate("test_removed_template").setOrder(1).setPatterns(Collections.singletonList("*")).get()).     AtomicInteger updateCount = new AtomicInteger().     // Wait for the templates to be updated back to normal     assertBusy(() -> {         // the updates only happen on cluster state updates, so we need to make sure that the cluster state updates are happening         // so we need to simulate updates to make sure the template upgrade kicks in         assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(Settings.builder().put(TestPlugin.UPDATE_TEMPLATE_DUMMY_SETTING.getKey(), updateCount.incrementAndGet())).get()).         List<IndexTemplateMetaData> templates = client().admin().indices().prepareGetTemplates("test_*").get().getIndexTemplates().         assertThat(templates, hasSize(3)).         boolean addedFound = false.         boolean changedFound = false.         boolean dummyFound = false.         for (int i = 0. i < 3. i++) {             IndexTemplateMetaData templateMetaData = templates.get(i).             switch(templateMetaData.getName()) {                 case "test_added_template":                     assertFalse(addedFound).                     addedFound = true.                     break.                 case "test_changed_template":                     assertFalse(changedFound).                     changedFound = true.                     assertThat(templateMetaData.getOrder(), equalTo(10)).                     break.                 case "test_dummy_template":                     assertFalse(dummyFound).                     dummyFound = true.                     break.                 default:                     fail("unexpected template " + templateMetaData.getName()).                     break.             }         }         assertTrue(addedFound).         assertTrue(changedFound).         assertTrue(dummyFound).     }).     // Wipe out all templates     assertAcked(client().admin().indices().prepareDeleteTemplate("test_*").get()).     assertTemplates(). }
false;private;0;36;;private void assertTemplates() throws Exception {     AtomicInteger updateCount = new AtomicInteger().     // Make sure all templates are recreated correctly     assertBusy(() -> {         // the updates only happen on cluster state updates, so we need to make sure that the cluster state updates are happening         // so we need to simulate updates to make sure the template upgrade kicks in         assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(Settings.builder().put(TestPlugin.UPDATE_TEMPLATE_DUMMY_SETTING.getKey(), updateCount.incrementAndGet())).get()).         List<IndexTemplateMetaData> templates = client().admin().indices().prepareGetTemplates("test_*").get().getIndexTemplates().         assertThat(templates, hasSize(2)).         boolean addedFound = false.         boolean changedFound = false.         for (int i = 0. i < 2. i++) {             IndexTemplateMetaData templateMetaData = templates.get(i).             switch(templateMetaData.getName()) {                 case "test_added_template":                     assertFalse(addedFound).                     addedFound = true.                     break.                 case "test_changed_template":                     assertFalse(changedFound).                     changedFound = true.                     assertThat(templateMetaData.getOrder(), equalTo(10)).                     break.                 default:                     fail("unexpected template " + templateMetaData.getName()).                     break.             }         }         assertTrue(addedFound).         assertTrue(changedFound).     }). }
