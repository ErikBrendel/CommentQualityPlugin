# id;timestamp;commentText;codeText;commentWords;codeWords
CumulativeSumAggregatorTests -> public void testValidateException() throws IOException;1544475769;The validation should throw an IllegalArgumentException, since parent_aggregation is not a type of HistogramAggregatorFactory,_DateHistogramAggregatorFactory or AutoDateHistogramAggregatorFactory.;public void testValidateException() throws IOException {_        final Set<PipelineAggregationBuilder> aggBuilders = new HashSet<>()__        aggBuilders.add(new CumulativeSumPipelineAggregationBuilder("cusum", "sum"))__        TestAggregatorFactory parentFactory = TestAggregatorFactory.createInstance()___        final CumulativeSumPipelineAggregationBuilder builder = new CumulativeSumPipelineAggregationBuilder("name", "invalid_agg>metric")__        IllegalStateException ex = expectThrows(IllegalStateException.class,_                () -> builder.validate(parentFactory, Collections.emptySet(), aggBuilders))__        assertEquals("cumulative_sum aggregation [name] must have a histogram, date_histogram or auto_date_histogram as parent",_                ex.getMessage())__    };the,validation,should,throw,an,illegal,argument,exception,since,parent,aggregation,is,not,a,type,of,histogram,aggregator,factory,date,histogram,aggregator,factory,or,auto,date,histogram,aggregator,factory;public,void,test,validate,exception,throws,ioexception,final,set,pipeline,aggregation,builder,agg,builders,new,hash,set,agg,builders,add,new,cumulative,sum,pipeline,aggregation,builder,cusum,sum,test,aggregator,factory,parent,factory,test,aggregator,factory,create,instance,final,cumulative,sum,pipeline,aggregation,builder,builder,new,cumulative,sum,pipeline,aggregation,builder,name,metric,illegal,state,exception,ex,expect,throws,illegal,state,exception,class,builder,validate,parent,factory,collections,empty,set,agg,builders,assert,equals,aggregation,name,must,have,a,histogram,or,as,parent,ex,get,message
CumulativeSumAggregatorTests -> public void testValidateException() throws IOException;1548178735;The validation should throw an IllegalArgumentException, since parent_aggregation is not a type of HistogramAggregatorFactory,_DateHistogramAggregatorFactory or AutoDateHistogramAggregatorFactory.;public void testValidateException() throws IOException {_        final Set<PipelineAggregationBuilder> aggBuilders = new HashSet<>()__        aggBuilders.add(new CumulativeSumPipelineAggregationBuilder("cusum", "sum"))__        TestAggregatorFactory parentFactory = TestAggregatorFactory.createInstance()___        final CumulativeSumPipelineAggregationBuilder builder = new CumulativeSumPipelineAggregationBuilder("name", "invalid_agg>metric")__        IllegalStateException ex = expectThrows(IllegalStateException.class,_                () -> builder.validate(parentFactory, Collections.emptySet(), aggBuilders))__        assertEquals("cumulative_sum aggregation [name] must have a histogram, date_histogram or auto_date_histogram as parent",_                ex.getMessage())__    };the,validation,should,throw,an,illegal,argument,exception,since,parent,aggregation,is,not,a,type,of,histogram,aggregator,factory,date,histogram,aggregator,factory,or,auto,date,histogram,aggregator,factory;public,void,test,validate,exception,throws,ioexception,final,set,pipeline,aggregation,builder,agg,builders,new,hash,set,agg,builders,add,new,cumulative,sum,pipeline,aggregation,builder,cusum,sum,test,aggregator,factory,parent,factory,test,aggregator,factory,create,instance,final,cumulative,sum,pipeline,aggregation,builder,builder,new,cumulative,sum,pipeline,aggregation,builder,name,metric,illegal,state,exception,ex,expect,throws,illegal,state,exception,class,builder,validate,parent,factory,collections,empty,set,agg,builders,assert,equals,aggregation,name,must,have,a,histogram,or,as,parent,ex,get,message
CumulativeSumAggregatorTests -> public void testValidateException() throws IOException;1548236405;The validation should throw an IllegalArgumentException, since parent_aggregation is not a type of HistogramAggregatorFactory,_DateHistogramAggregatorFactory or AutoDateHistogramAggregatorFactory.;public void testValidateException() throws IOException {_        final Set<PipelineAggregationBuilder> aggBuilders = new HashSet<>()__        aggBuilders.add(new CumulativeSumPipelineAggregationBuilder("cusum", "sum"))__        TestAggregatorFactory parentFactory = TestAggregatorFactory.createInstance()___        final CumulativeSumPipelineAggregationBuilder builder = new CumulativeSumPipelineAggregationBuilder("name", "invalid_agg>metric")__        IllegalStateException ex = expectThrows(IllegalStateException.class,_                () -> builder.validate(parentFactory, Collections.emptySet(), aggBuilders))__        assertEquals("cumulative_sum aggregation [name] must have a histogram, date_histogram or auto_date_histogram as parent",_                ex.getMessage())__    };the,validation,should,throw,an,illegal,argument,exception,since,parent,aggregation,is,not,a,type,of,histogram,aggregator,factory,date,histogram,aggregator,factory,or,auto,date,histogram,aggregator,factory;public,void,test,validate,exception,throws,ioexception,final,set,pipeline,aggregation,builder,agg,builders,new,hash,set,agg,builders,add,new,cumulative,sum,pipeline,aggregation,builder,cusum,sum,test,aggregator,factory,parent,factory,test,aggregator,factory,create,instance,final,cumulative,sum,pipeline,aggregation,builder,builder,new,cumulative,sum,pipeline,aggregation,builder,name,metric,illegal,state,exception,ex,expect,throws,illegal,state,exception,class,builder,validate,parent,factory,collections,empty,set,agg,builders,assert,equals,aggregation,name,must,have,a,histogram,or,as,parent,ex,get,message
CumulativeSumAggregatorTests -> public void testValidateException() throws IOException;1548921340;The validation should throw an IllegalArgumentException, since parent_aggregation is not a type of HistogramAggregatorFactory,_DateHistogramAggregatorFactory or AutoDateHistogramAggregatorFactory.;public void testValidateException() throws IOException {_        final Set<PipelineAggregationBuilder> aggBuilders = new HashSet<>()__        aggBuilders.add(new CumulativeSumPipelineAggregationBuilder("cusum", "sum"))__        TestAggregatorFactory parentFactory = TestAggregatorFactory.createInstance()___        final CumulativeSumPipelineAggregationBuilder builder = new CumulativeSumPipelineAggregationBuilder("name", "invalid_agg>metric")__        IllegalStateException ex = expectThrows(IllegalStateException.class,_                () -> builder.validate(parentFactory, Collections.emptySet(), aggBuilders))__        assertEquals("cumulative_sum aggregation [name] must have a histogram, date_histogram or auto_date_histogram as parent",_                ex.getMessage())__    };the,validation,should,throw,an,illegal,argument,exception,since,parent,aggregation,is,not,a,type,of,histogram,aggregator,factory,date,histogram,aggregator,factory,or,auto,date,histogram,aggregator,factory;public,void,test,validate,exception,throws,ioexception,final,set,pipeline,aggregation,builder,agg,builders,new,hash,set,agg,builders,add,new,cumulative,sum,pipeline,aggregation,builder,cusum,sum,test,aggregator,factory,parent,factory,test,aggregator,factory,create,instance,final,cumulative,sum,pipeline,aggregation,builder,builder,new,cumulative,sum,pipeline,aggregation,builder,name,metric,illegal,state,exception,ex,expect,throws,illegal,state,exception,class,builder,validate,parent,factory,collections,empty,set,agg,builders,assert,equals,aggregation,name,must,have,a,histogram,or,as,parent,ex,get,message
CumulativeSumAggregatorTests -> public void testValidate() throws IOException;1544475769;The validation should verify the parent aggregation is allowed.;public void testValidate() throws IOException {_        final Set<PipelineAggregationBuilder> aggBuilders = new HashSet<>()__        aggBuilders.add(new CumulativeSumPipelineAggregationBuilder("cusum", "sum"))___        final CumulativeSumPipelineAggregationBuilder builder = new CumulativeSumPipelineAggregationBuilder("name", "valid")__        builder.validate(PipelineAggregationHelperTests.getRandomSequentiallyOrderedParentAgg(), Collections.emptySet(), aggBuilders)__    };the,validation,should,verify,the,parent,aggregation,is,allowed;public,void,test,validate,throws,ioexception,final,set,pipeline,aggregation,builder,agg,builders,new,hash,set,agg,builders,add,new,cumulative,sum,pipeline,aggregation,builder,cusum,sum,final,cumulative,sum,pipeline,aggregation,builder,builder,new,cumulative,sum,pipeline,aggregation,builder,name,valid,builder,validate,pipeline,aggregation,helper,tests,get,random,sequentially,ordered,parent,agg,collections,empty,set,agg,builders
CumulativeSumAggregatorTests -> public void testValidate() throws IOException;1548178735;The validation should verify the parent aggregation is allowed.;public void testValidate() throws IOException {_        final Set<PipelineAggregationBuilder> aggBuilders = new HashSet<>()__        aggBuilders.add(new CumulativeSumPipelineAggregationBuilder("cusum", "sum"))___        final CumulativeSumPipelineAggregationBuilder builder = new CumulativeSumPipelineAggregationBuilder("name", "valid")__        builder.validate(PipelineAggregationHelperTests.getRandomSequentiallyOrderedParentAgg(), Collections.emptySet(), aggBuilders)__    };the,validation,should,verify,the,parent,aggregation,is,allowed;public,void,test,validate,throws,ioexception,final,set,pipeline,aggregation,builder,agg,builders,new,hash,set,agg,builders,add,new,cumulative,sum,pipeline,aggregation,builder,cusum,sum,final,cumulative,sum,pipeline,aggregation,builder,builder,new,cumulative,sum,pipeline,aggregation,builder,name,valid,builder,validate,pipeline,aggregation,helper,tests,get,random,sequentially,ordered,parent,agg,collections,empty,set,agg,builders
CumulativeSumAggregatorTests -> public void testValidate() throws IOException;1548236405;The validation should verify the parent aggregation is allowed.;public void testValidate() throws IOException {_        final Set<PipelineAggregationBuilder> aggBuilders = new HashSet<>()__        aggBuilders.add(new CumulativeSumPipelineAggregationBuilder("cusum", "sum"))___        final CumulativeSumPipelineAggregationBuilder builder = new CumulativeSumPipelineAggregationBuilder("name", "valid")__        builder.validate(PipelineAggregationHelperTests.getRandomSequentiallyOrderedParentAgg(), Collections.emptySet(), aggBuilders)__    };the,validation,should,verify,the,parent,aggregation,is,allowed;public,void,test,validate,throws,ioexception,final,set,pipeline,aggregation,builder,agg,builders,new,hash,set,agg,builders,add,new,cumulative,sum,pipeline,aggregation,builder,cusum,sum,final,cumulative,sum,pipeline,aggregation,builder,builder,new,cumulative,sum,pipeline,aggregation,builder,name,valid,builder,validate,pipeline,aggregation,helper,tests,get,random,sequentially,ordered,parent,agg,collections,empty,set,agg,builders
CumulativeSumAggregatorTests -> public void testValidate() throws IOException;1548921340;The validation should verify the parent aggregation is allowed.;public void testValidate() throws IOException {_        final Set<PipelineAggregationBuilder> aggBuilders = new HashSet<>()__        aggBuilders.add(new CumulativeSumPipelineAggregationBuilder("cusum", "sum"))___        final CumulativeSumPipelineAggregationBuilder builder = new CumulativeSumPipelineAggregationBuilder("name", "valid")__        builder.validate(PipelineAggregationHelperTests.getRandomSequentiallyOrderedParentAgg(), Collections.emptySet(), aggBuilders)__    };the,validation,should,verify,the,parent,aggregation,is,allowed;public,void,test,validate,throws,ioexception,final,set,pipeline,aggregation,builder,agg,builders,new,hash,set,agg,builders,add,new,cumulative,sum,pipeline,aggregation,builder,cusum,sum,final,cumulative,sum,pipeline,aggregation,builder,builder,new,cumulative,sum,pipeline,aggregation,builder,name,valid,builder,validate,pipeline,aggregation,helper,tests,get,random,sequentially,ordered,parent,agg,collections,empty,set,agg,builders
CumulativeSumAggregatorTests -> public void testDerivative() throws IOException;1525334055;First value from a derivative is null, so this makes sure the cusum can handle that;public void testDerivative() throws IOException {_        Query query = new MatchAllDocsQuery()___        DateHistogramAggregationBuilder aggBuilder = new DateHistogramAggregationBuilder("histo")__        aggBuilder.dateHistogramInterval(DateHistogramInterval.DAY).field(HISTO_FIELD)__        aggBuilder.subAggregation(new AvgAggregationBuilder("the_avg").field(VALUE_FIELD))__        aggBuilder.subAggregation(new DerivativePipelineAggregationBuilder("the_deriv", "the_avg"))__        aggBuilder.subAggregation(new CumulativeSumPipelineAggregationBuilder("cusum", "the_deriv"))___        executeTestCase(query, aggBuilder, histogram -> {_            assertEquals(10, ((Histogram)histogram).getBuckets().size())__            List<? extends Histogram.Bucket> buckets = ((Histogram)histogram).getBuckets()__            double sum = 0.0__            for (int i = 0_ i < buckets.size()_ i++) {_                if (i == 0) {_                    assertThat(((InternalSimpleValue)(buckets.get(i).getAggregations().get("cusum"))).value(), equalTo(0.0))__                } else {_                    sum += 1.0__                    assertThat(((InternalSimpleValue)(buckets.get(i).getAggregations().get("cusum"))).value(), equalTo(sum))__                }_            }_        })__    };first,value,from,a,derivative,is,null,so,this,makes,sure,the,cusum,can,handle,that;public,void,test,derivative,throws,ioexception,query,query,new,match,all,docs,query,date,histogram,aggregation,builder,agg,builder,new,date,histogram,aggregation,builder,histo,agg,builder,date,histogram,interval,date,histogram,interval,day,field,agg,builder,sub,aggregation,new,avg,aggregation,builder,field,agg,builder,sub,aggregation,new,derivative,pipeline,aggregation,builder,agg,builder,sub,aggregation,new,cumulative,sum,pipeline,aggregation,builder,cusum,execute,test,case,query,agg,builder,histogram,assert,equals,10,histogram,histogram,get,buckets,size,list,extends,histogram,bucket,buckets,histogram,histogram,get,buckets,double,sum,0,0,for,int,i,0,i,buckets,size,i,if,i,0,assert,that,internal,simple,value,buckets,get,i,get,aggregations,get,cusum,value,equal,to,0,0,else,sum,1,0,assert,that,internal,simple,value,buckets,get,i,get,aggregations,get,cusum,value,equal,to,sum
CumulativeSumAggregatorTests -> public void testDerivative() throws IOException;1532353780;First value from a derivative is null, so this makes sure the cusum can handle that;public void testDerivative() throws IOException {_        Query query = new MatchAllDocsQuery()___        DateHistogramAggregationBuilder aggBuilder = new DateHistogramAggregationBuilder("histo")__        aggBuilder.dateHistogramInterval(DateHistogramInterval.DAY).field(HISTO_FIELD)__        aggBuilder.subAggregation(new AvgAggregationBuilder("the_avg").field(VALUE_FIELD))__        aggBuilder.subAggregation(new DerivativePipelineAggregationBuilder("the_deriv", "the_avg"))__        aggBuilder.subAggregation(new CumulativeSumPipelineAggregationBuilder("cusum", "the_deriv"))___        executeTestCase(query, aggBuilder, histogram -> {_            assertEquals(10, ((Histogram)histogram).getBuckets().size())__            List<? extends Histogram.Bucket> buckets = ((Histogram)histogram).getBuckets()__            double sum = 0.0__            for (int i = 0_ i < buckets.size()_ i++) {_                if (i == 0) {_                    assertThat(((InternalSimpleValue)(buckets.get(i).getAggregations().get("cusum"))).value(), equalTo(0.0))__                } else {_                    sum += 1.0__                    assertThat(((InternalSimpleValue)(buckets.get(i).getAggregations().get("cusum"))).value(), equalTo(sum))__                }_            }_        })__    };first,value,from,a,derivative,is,null,so,this,makes,sure,the,cusum,can,handle,that;public,void,test,derivative,throws,ioexception,query,query,new,match,all,docs,query,date,histogram,aggregation,builder,agg,builder,new,date,histogram,aggregation,builder,histo,agg,builder,date,histogram,interval,date,histogram,interval,day,field,agg,builder,sub,aggregation,new,avg,aggregation,builder,field,agg,builder,sub,aggregation,new,derivative,pipeline,aggregation,builder,agg,builder,sub,aggregation,new,cumulative,sum,pipeline,aggregation,builder,cusum,execute,test,case,query,agg,builder,histogram,assert,equals,10,histogram,histogram,get,buckets,size,list,extends,histogram,bucket,buckets,histogram,histogram,get,buckets,double,sum,0,0,for,int,i,0,i,buckets,size,i,if,i,0,assert,that,internal,simple,value,buckets,get,i,get,aggregations,get,cusum,value,equal,to,0,0,else,sum,1,0,assert,that,internal,simple,value,buckets,get,i,get,aggregations,get,cusum,value,equal,to,sum
CumulativeSumAggregatorTests -> public void testDerivative() throws IOException;1536314350;First value from a derivative is null, so this makes sure the cusum can handle that;public void testDerivative() throws IOException {_        Query query = new MatchAllDocsQuery()___        DateHistogramAggregationBuilder aggBuilder = new DateHistogramAggregationBuilder("histo")__        aggBuilder.dateHistogramInterval(DateHistogramInterval.DAY).field(HISTO_FIELD)__        aggBuilder.subAggregation(new AvgAggregationBuilder("the_avg").field(VALUE_FIELD))__        aggBuilder.subAggregation(new DerivativePipelineAggregationBuilder("the_deriv", "the_avg"))__        aggBuilder.subAggregation(new CumulativeSumPipelineAggregationBuilder("cusum", "the_deriv"))___        executeTestCase(query, aggBuilder, histogram -> {_            assertEquals(10, ((Histogram)histogram).getBuckets().size())__            List<? extends Histogram.Bucket> buckets = ((Histogram)histogram).getBuckets()__            double sum = 0.0__            for (int i = 0_ i < buckets.size()_ i++) {_                if (i == 0) {_                    assertThat(((InternalSimpleValue)(buckets.get(i).getAggregations().get("cusum"))).value(), equalTo(0.0))__                } else {_                    sum += 1.0__                    assertThat(((InternalSimpleValue)(buckets.get(i).getAggregations().get("cusum"))).value(), equalTo(sum))__                }_            }_        })__    };first,value,from,a,derivative,is,null,so,this,makes,sure,the,cusum,can,handle,that;public,void,test,derivative,throws,ioexception,query,query,new,match,all,docs,query,date,histogram,aggregation,builder,agg,builder,new,date,histogram,aggregation,builder,histo,agg,builder,date,histogram,interval,date,histogram,interval,day,field,agg,builder,sub,aggregation,new,avg,aggregation,builder,field,agg,builder,sub,aggregation,new,derivative,pipeline,aggregation,builder,agg,builder,sub,aggregation,new,cumulative,sum,pipeline,aggregation,builder,cusum,execute,test,case,query,agg,builder,histogram,assert,equals,10,histogram,histogram,get,buckets,size,list,extends,histogram,bucket,buckets,histogram,histogram,get,buckets,double,sum,0,0,for,int,i,0,i,buckets,size,i,if,i,0,assert,that,internal,simple,value,buckets,get,i,get,aggregations,get,cusum,value,equal,to,0,0,else,sum,1,0,assert,that,internal,simple,value,buckets,get,i,get,aggregations,get,cusum,value,equal,to,sum
CumulativeSumAggregatorTests -> public void testDerivative() throws IOException;1540486836;First value from a derivative is null, so this makes sure the cusum can handle that;public void testDerivative() throws IOException {_        Query query = new MatchAllDocsQuery()___        DateHistogramAggregationBuilder aggBuilder = new DateHistogramAggregationBuilder("histo")__        aggBuilder.dateHistogramInterval(DateHistogramInterval.DAY).field(HISTO_FIELD)__        aggBuilder.subAggregation(new AvgAggregationBuilder("the_avg").field(VALUE_FIELD))__        aggBuilder.subAggregation(new DerivativePipelineAggregationBuilder("the_deriv", "the_avg"))__        aggBuilder.subAggregation(new CumulativeSumPipelineAggregationBuilder("cusum", "the_deriv"))___        executeTestCase(query, aggBuilder, histogram -> {_            assertEquals(10, ((Histogram)histogram).getBuckets().size())__            List<? extends Histogram.Bucket> buckets = ((Histogram)histogram).getBuckets()__            double sum = 0.0__            for (int i = 0_ i < buckets.size()_ i++) {_                if (i == 0) {_                    assertThat(((InternalSimpleValue)(buckets.get(i).getAggregations().get("cusum"))).value(), equalTo(0.0))__                } else {_                    sum += 1.0__                    assertThat(((InternalSimpleValue)(buckets.get(i).getAggregations().get("cusum"))).value(), equalTo(sum))__                }_            }_        })__    };first,value,from,a,derivative,is,null,so,this,makes,sure,the,cusum,can,handle,that;public,void,test,derivative,throws,ioexception,query,query,new,match,all,docs,query,date,histogram,aggregation,builder,agg,builder,new,date,histogram,aggregation,builder,histo,agg,builder,date,histogram,interval,date,histogram,interval,day,field,agg,builder,sub,aggregation,new,avg,aggregation,builder,field,agg,builder,sub,aggregation,new,derivative,pipeline,aggregation,builder,agg,builder,sub,aggregation,new,cumulative,sum,pipeline,aggregation,builder,cusum,execute,test,case,query,agg,builder,histogram,assert,equals,10,histogram,histogram,get,buckets,size,list,extends,histogram,bucket,buckets,histogram,histogram,get,buckets,double,sum,0,0,for,int,i,0,i,buckets,size,i,if,i,0,assert,that,internal,simple,value,buckets,get,i,get,aggregations,get,cusum,value,equal,to,0,0,else,sum,1,0,assert,that,internal,simple,value,buckets,get,i,get,aggregations,get,cusum,value,equal,to,sum
CumulativeSumAggregatorTests -> public void testDerivative() throws IOException;1544232221;First value from a derivative is null, so this makes sure the cusum can handle that;public void testDerivative() throws IOException {_        Query query = new MatchAllDocsQuery()___        DateHistogramAggregationBuilder aggBuilder = new DateHistogramAggregationBuilder("histo")__        aggBuilder.dateHistogramInterval(DateHistogramInterval.DAY).field(HISTO_FIELD)__        aggBuilder.subAggregation(new AvgAggregationBuilder("the_avg").field(VALUE_FIELD))__        aggBuilder.subAggregation(new DerivativePipelineAggregationBuilder("the_deriv", "the_avg"))__        aggBuilder.subAggregation(new CumulativeSumPipelineAggregationBuilder("cusum", "the_deriv"))___        executeTestCase(query, aggBuilder, histogram -> {_            assertEquals(10, ((Histogram)histogram).getBuckets().size())__            List<? extends Histogram.Bucket> buckets = ((Histogram)histogram).getBuckets()__            double sum = 0.0__            for (int i = 0_ i < buckets.size()_ i++) {_                if (i == 0) {_                    assertThat(((InternalSimpleValue)(buckets.get(i).getAggregations().get("cusum"))).value(), equalTo(0.0))__                } else {_                    sum += 1.0__                    assertThat(((InternalSimpleValue)(buckets.get(i).getAggregations().get("cusum"))).value(), equalTo(sum))__                }_            }_        })__    };first,value,from,a,derivative,is,null,so,this,makes,sure,the,cusum,can,handle,that;public,void,test,derivative,throws,ioexception,query,query,new,match,all,docs,query,date,histogram,aggregation,builder,agg,builder,new,date,histogram,aggregation,builder,histo,agg,builder,date,histogram,interval,date,histogram,interval,day,field,agg,builder,sub,aggregation,new,avg,aggregation,builder,field,agg,builder,sub,aggregation,new,derivative,pipeline,aggregation,builder,agg,builder,sub,aggregation,new,cumulative,sum,pipeline,aggregation,builder,cusum,execute,test,case,query,agg,builder,histogram,assert,equals,10,histogram,histogram,get,buckets,size,list,extends,histogram,bucket,buckets,histogram,histogram,get,buckets,double,sum,0,0,for,int,i,0,i,buckets,size,i,if,i,0,assert,that,internal,simple,value,buckets,get,i,get,aggregations,get,cusum,value,equal,to,0,0,else,sum,1,0,assert,that,internal,simple,value,buckets,get,i,get,aggregations,get,cusum,value,equal,to,sum
CumulativeSumAggregatorTests -> public void testDerivative() throws IOException;1544475769;First value from a derivative is null, so this makes sure the cusum can handle that;public void testDerivative() throws IOException {_        Query query = new MatchAllDocsQuery()___        DateHistogramAggregationBuilder aggBuilder = new DateHistogramAggregationBuilder("histo")__        aggBuilder.dateHistogramInterval(DateHistogramInterval.DAY).field(HISTO_FIELD)__        aggBuilder.subAggregation(new AvgAggregationBuilder("the_avg").field(VALUE_FIELD))__        aggBuilder.subAggregation(new DerivativePipelineAggregationBuilder("the_deriv", "the_avg"))__        aggBuilder.subAggregation(new CumulativeSumPipelineAggregationBuilder("cusum", "the_deriv"))___        executeTestCase(query, aggBuilder, histogram -> {_            assertEquals(10, ((Histogram)histogram).getBuckets().size())__            List<? extends Histogram.Bucket> buckets = ((Histogram)histogram).getBuckets()__            double sum = 0.0__            for (int i = 0_ i < buckets.size()_ i++) {_                if (i == 0) {_                    assertThat(((InternalSimpleValue)(buckets.get(i).getAggregations().get("cusum"))).value(), equalTo(0.0))__                } else {_                    sum += 1.0__                    assertThat(((InternalSimpleValue)(buckets.get(i).getAggregations().get("cusum"))).value(), equalTo(sum))__                }_            }_        })__    };first,value,from,a,derivative,is,null,so,this,makes,sure,the,cusum,can,handle,that;public,void,test,derivative,throws,ioexception,query,query,new,match,all,docs,query,date,histogram,aggregation,builder,agg,builder,new,date,histogram,aggregation,builder,histo,agg,builder,date,histogram,interval,date,histogram,interval,day,field,agg,builder,sub,aggregation,new,avg,aggregation,builder,field,agg,builder,sub,aggregation,new,derivative,pipeline,aggregation,builder,agg,builder,sub,aggregation,new,cumulative,sum,pipeline,aggregation,builder,cusum,execute,test,case,query,agg,builder,histogram,assert,equals,10,histogram,histogram,get,buckets,size,list,extends,histogram,bucket,buckets,histogram,histogram,get,buckets,double,sum,0,0,for,int,i,0,i,buckets,size,i,if,i,0,assert,that,internal,simple,value,buckets,get,i,get,aggregations,get,cusum,value,equal,to,0,0,else,sum,1,0,assert,that,internal,simple,value,buckets,get,i,get,aggregations,get,cusum,value,equal,to,sum
CumulativeSumAggregatorTests -> public void testDerivative() throws IOException;1548178735;First value from a derivative is null, so this makes sure the cusum can handle that;public void testDerivative() throws IOException {_        Query query = new MatchAllDocsQuery()___        DateHistogramAggregationBuilder aggBuilder = new DateHistogramAggregationBuilder("histo")__        aggBuilder.dateHistogramInterval(DateHistogramInterval.DAY).field(HISTO_FIELD)__        aggBuilder.subAggregation(new AvgAggregationBuilder("the_avg").field(VALUE_FIELD))__        aggBuilder.subAggregation(new DerivativePipelineAggregationBuilder("the_deriv", "the_avg"))__        aggBuilder.subAggregation(new CumulativeSumPipelineAggregationBuilder("cusum", "the_deriv"))___        executeTestCase(query, aggBuilder, histogram -> {_            assertEquals(10, ((Histogram)histogram).getBuckets().size())__            List<? extends Histogram.Bucket> buckets = ((Histogram)histogram).getBuckets()__            double sum = 0.0__            for (int i = 0_ i < buckets.size()_ i++) {_                if (i == 0) {_                    assertThat(((InternalSimpleValue)(buckets.get(i).getAggregations().get("cusum"))).value(), equalTo(0.0))__                    assertTrue(AggregationInspectionHelper.hasValue(((InternalSimpleValue) (buckets.get(i)_                        .getAggregations().get("cusum")))))__                } else {_                    sum += 1.0__                    assertThat(((InternalSimpleValue)(buckets.get(i).getAggregations().get("cusum"))).value(), equalTo(sum))__                    assertTrue(AggregationInspectionHelper.hasValue(((InternalSimpleValue) (buckets.get(i)_                        .getAggregations().get("cusum")))))__                }_            }_        })__    };first,value,from,a,derivative,is,null,so,this,makes,sure,the,cusum,can,handle,that;public,void,test,derivative,throws,ioexception,query,query,new,match,all,docs,query,date,histogram,aggregation,builder,agg,builder,new,date,histogram,aggregation,builder,histo,agg,builder,date,histogram,interval,date,histogram,interval,day,field,agg,builder,sub,aggregation,new,avg,aggregation,builder,field,agg,builder,sub,aggregation,new,derivative,pipeline,aggregation,builder,agg,builder,sub,aggregation,new,cumulative,sum,pipeline,aggregation,builder,cusum,execute,test,case,query,agg,builder,histogram,assert,equals,10,histogram,histogram,get,buckets,size,list,extends,histogram,bucket,buckets,histogram,histogram,get,buckets,double,sum,0,0,for,int,i,0,i,buckets,size,i,if,i,0,assert,that,internal,simple,value,buckets,get,i,get,aggregations,get,cusum,value,equal,to,0,0,assert,true,aggregation,inspection,helper,has,value,internal,simple,value,buckets,get,i,get,aggregations,get,cusum,else,sum,1,0,assert,that,internal,simple,value,buckets,get,i,get,aggregations,get,cusum,value,equal,to,sum,assert,true,aggregation,inspection,helper,has,value,internal,simple,value,buckets,get,i,get,aggregations,get,cusum
CumulativeSumAggregatorTests -> public void testDerivative() throws IOException;1548236405;First value from a derivative is null, so this makes sure the cusum can handle that;public void testDerivative() throws IOException {_        Query query = new MatchAllDocsQuery()___        DateHistogramAggregationBuilder aggBuilder = new DateHistogramAggregationBuilder("histo")__        aggBuilder.dateHistogramInterval(DateHistogramInterval.DAY).field(HISTO_FIELD)__        aggBuilder.subAggregation(new AvgAggregationBuilder("the_avg").field(VALUE_FIELD))__        aggBuilder.subAggregation(new DerivativePipelineAggregationBuilder("the_deriv", "the_avg"))__        aggBuilder.subAggregation(new CumulativeSumPipelineAggregationBuilder("cusum", "the_deriv"))___        executeTestCase(query, aggBuilder, histogram -> {_            assertEquals(10, ((Histogram)histogram).getBuckets().size())__            List<? extends Histogram.Bucket> buckets = ((Histogram)histogram).getBuckets()__            double sum = 0.0__            for (int i = 0_ i < buckets.size()_ i++) {_                if (i == 0) {_                    assertThat(((InternalSimpleValue)(buckets.get(i).getAggregations().get("cusum"))).value(), equalTo(0.0))__                    assertTrue(AggregationInspectionHelper.hasValue(((InternalSimpleValue) (buckets.get(i)_                        .getAggregations().get("cusum")))))__                } else {_                    sum += 1.0__                    assertThat(((InternalSimpleValue)(buckets.get(i).getAggregations().get("cusum"))).value(), equalTo(sum))__                    assertTrue(AggregationInspectionHelper.hasValue(((InternalSimpleValue) (buckets.get(i)_                        .getAggregations().get("cusum")))))__                }_            }_        })__    };first,value,from,a,derivative,is,null,so,this,makes,sure,the,cusum,can,handle,that;public,void,test,derivative,throws,ioexception,query,query,new,match,all,docs,query,date,histogram,aggregation,builder,agg,builder,new,date,histogram,aggregation,builder,histo,agg,builder,date,histogram,interval,date,histogram,interval,day,field,agg,builder,sub,aggregation,new,avg,aggregation,builder,field,agg,builder,sub,aggregation,new,derivative,pipeline,aggregation,builder,agg,builder,sub,aggregation,new,cumulative,sum,pipeline,aggregation,builder,cusum,execute,test,case,query,agg,builder,histogram,assert,equals,10,histogram,histogram,get,buckets,size,list,extends,histogram,bucket,buckets,histogram,histogram,get,buckets,double,sum,0,0,for,int,i,0,i,buckets,size,i,if,i,0,assert,that,internal,simple,value,buckets,get,i,get,aggregations,get,cusum,value,equal,to,0,0,assert,true,aggregation,inspection,helper,has,value,internal,simple,value,buckets,get,i,get,aggregations,get,cusum,else,sum,1,0,assert,that,internal,simple,value,buckets,get,i,get,aggregations,get,cusum,value,equal,to,sum,assert,true,aggregation,inspection,helper,has,value,internal,simple,value,buckets,get,i,get,aggregations,get,cusum
CumulativeSumAggregatorTests -> public void testDerivative() throws IOException;1548921340;First value from a derivative is null, so this makes sure the cusum can handle that;public void testDerivative() throws IOException {_        Query query = new MatchAllDocsQuery()___        DateHistogramAggregationBuilder aggBuilder = new DateHistogramAggregationBuilder("histo")__        aggBuilder.dateHistogramInterval(DateHistogramInterval.DAY).field(HISTO_FIELD)__        aggBuilder.subAggregation(new AvgAggregationBuilder("the_avg").field(VALUE_FIELD))__        aggBuilder.subAggregation(new DerivativePipelineAggregationBuilder("the_deriv", "the_avg"))__        aggBuilder.subAggregation(new CumulativeSumPipelineAggregationBuilder("cusum", "the_deriv"))___        executeTestCase(query, aggBuilder, histogram -> {_            assertEquals(10, ((Histogram)histogram).getBuckets().size())__            List<? extends Histogram.Bucket> buckets = ((Histogram)histogram).getBuckets()__            double sum = 0.0__            for (int i = 0_ i < buckets.size()_ i++) {_                if (i == 0) {_                    assertThat(((InternalSimpleValue)(buckets.get(i).getAggregations().get("cusum"))).value(), equalTo(0.0))__                    assertTrue(AggregationInspectionHelper.hasValue(((InternalSimpleValue) (buckets.get(i)_                        .getAggregations().get("cusum")))))__                } else {_                    sum += 1.0__                    assertThat(((InternalSimpleValue)(buckets.get(i).getAggregations().get("cusum"))).value(), equalTo(sum))__                    assertTrue(AggregationInspectionHelper.hasValue(((InternalSimpleValue) (buckets.get(i)_                        .getAggregations().get("cusum")))))__                }_            }_        })__    };first,value,from,a,derivative,is,null,so,this,makes,sure,the,cusum,can,handle,that;public,void,test,derivative,throws,ioexception,query,query,new,match,all,docs,query,date,histogram,aggregation,builder,agg,builder,new,date,histogram,aggregation,builder,histo,agg,builder,date,histogram,interval,date,histogram,interval,day,field,agg,builder,sub,aggregation,new,avg,aggregation,builder,field,agg,builder,sub,aggregation,new,derivative,pipeline,aggregation,builder,agg,builder,sub,aggregation,new,cumulative,sum,pipeline,aggregation,builder,cusum,execute,test,case,query,agg,builder,histogram,assert,equals,10,histogram,histogram,get,buckets,size,list,extends,histogram,bucket,buckets,histogram,histogram,get,buckets,double,sum,0,0,for,int,i,0,i,buckets,size,i,if,i,0,assert,that,internal,simple,value,buckets,get,i,get,aggregations,get,cusum,value,equal,to,0,0,assert,true,aggregation,inspection,helper,has,value,internal,simple,value,buckets,get,i,get,aggregations,get,cusum,else,sum,1,0,assert,that,internal,simple,value,buckets,get,i,get,aggregations,get,cusum,value,equal,to,sum,assert,true,aggregation,inspection,helper,has,value,internal,simple,value,buckets,get,i,get,aggregations,get,cusum
