# id;timestamp;commentText;codeText;commentWords;codeWords
ScriptSortBuilderTests -> public void testBuildNested() throws IOException;1524684173;Test that the sort builder nested object gets created in the SortField;public void testBuildNested() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()___        ScriptSortBuilder sortBuilder = new ScriptSortBuilder(mockScript(MOCK_SCRIPT_NAME), ScriptSortType.NUMBER)_                .setNestedSort(new NestedSortBuilder("path").setFilter(QueryBuilders.matchAllQuery()))__        SortField sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        XFieldComparatorSource comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        Nested nested = comparatorSource.nested()__        assertNotNull(nested)__        assertEquals(new MatchAllDocsQuery(), nested.getInnerQuery())___        sortBuilder = new ScriptSortBuilder(mockScript(MOCK_SCRIPT_NAME), ScriptSortType.NUMBER).setNestedPath("path")__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        nested = comparatorSource.nested()__        assertNotNull(nested)__        assertEquals(new TermQuery(new Term(TypeFieldMapper.NAME, "__path")), nested.getInnerQuery())___        sortBuilder = new ScriptSortBuilder(mockScript(MOCK_SCRIPT_NAME), ScriptSortType.NUMBER).setNestedPath("path")_                .setNestedFilter(QueryBuilders.matchAllQuery())__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        nested = comparatorSource.nested()__        assertNotNull(nested)__        assertEquals(new MatchAllDocsQuery(), nested.getInnerQuery())___        _        sortBuilder = new ScriptSortBuilder(mockScript(MOCK_SCRIPT_NAME), ScriptSortType.NUMBER)_                .setNestedFilter(QueryBuilders.matchAllQuery())__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertNull(comparatorSource.nested())__    };test,that,the,sort,builder,nested,object,gets,created,in,the,sort,field;public,void,test,build,nested,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,script,sort,builder,sort,builder,new,script,sort,builder,mock,script,script,sort,type,number,set,nested,sort,new,nested,sort,builder,path,set,filter,query,builders,match,all,query,sort,field,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,xfield,comparator,source,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,nested,nested,comparator,source,nested,assert,not,null,nested,assert,equals,new,match,all,docs,query,nested,get,inner,query,sort,builder,new,script,sort,builder,mock,script,script,sort,type,number,set,nested,path,path,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,nested,comparator,source,nested,assert,not,null,nested,assert,equals,new,term,query,new,term,type,field,mapper,name,nested,get,inner,query,sort,builder,new,script,sort,builder,mock,script,script,sort,type,number,set,nested,path,path,set,nested,filter,query,builders,match,all,query,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,nested,comparator,source,nested,assert,not,null,nested,assert,equals,new,match,all,docs,query,nested,get,inner,query,sort,builder,new,script,sort,builder,mock,script,script,sort,type,number,set,nested,filter,query,builders,match,all,query,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,null,comparator,source,nested
ScriptSortBuilderTests -> public void testBuildNested() throws IOException;1528167589;Test that the sort builder nested object gets created in the SortField;public void testBuildNested() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()___        ScriptSortBuilder sortBuilder = new ScriptSortBuilder(mockScript(MOCK_SCRIPT_NAME), ScriptSortType.NUMBER)_                .setNestedSort(new NestedSortBuilder("path").setFilter(QueryBuilders.matchAllQuery()))__        SortField sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        XFieldComparatorSource comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        Nested nested = comparatorSource.nested()__        assertNotNull(nested)__        assertEquals(new MatchAllDocsQuery(), nested.getInnerQuery())___        sortBuilder = new ScriptSortBuilder(mockScript(MOCK_SCRIPT_NAME), ScriptSortType.NUMBER).setNestedPath("path")__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        nested = comparatorSource.nested()__        assertNotNull(nested)__        assertEquals(new TermQuery(new Term(TypeFieldMapper.NAME, "__path")), nested.getInnerQuery())___        sortBuilder = new ScriptSortBuilder(mockScript(MOCK_SCRIPT_NAME), ScriptSortType.NUMBER).setNestedPath("path")_                .setNestedFilter(QueryBuilders.matchAllQuery())__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        nested = comparatorSource.nested()__        assertNotNull(nested)__        assertEquals(new MatchAllDocsQuery(), nested.getInnerQuery())___        _        sortBuilder = new ScriptSortBuilder(mockScript(MOCK_SCRIPT_NAME), ScriptSortType.NUMBER)_                .setNestedFilter(QueryBuilders.matchAllQuery())__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertNull(comparatorSource.nested())__    };test,that,the,sort,builder,nested,object,gets,created,in,the,sort,field;public,void,test,build,nested,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,script,sort,builder,sort,builder,new,script,sort,builder,mock,script,script,sort,type,number,set,nested,sort,new,nested,sort,builder,path,set,filter,query,builders,match,all,query,sort,field,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,xfield,comparator,source,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,nested,nested,comparator,source,nested,assert,not,null,nested,assert,equals,new,match,all,docs,query,nested,get,inner,query,sort,builder,new,script,sort,builder,mock,script,script,sort,type,number,set,nested,path,path,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,nested,comparator,source,nested,assert,not,null,nested,assert,equals,new,term,query,new,term,type,field,mapper,name,nested,get,inner,query,sort,builder,new,script,sort,builder,mock,script,script,sort,type,number,set,nested,path,path,set,nested,filter,query,builders,match,all,query,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,nested,comparator,source,nested,assert,not,null,nested,assert,equals,new,match,all,docs,query,nested,get,inner,query,sort,builder,new,script,sort,builder,mock,script,script,sort,type,number,set,nested,filter,query,builders,match,all,query,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,null,comparator,source,nested
ScriptSortBuilderTests -> public void testBuildNested() throws IOException;1529916084;Test that the sort builder nested object gets created in the SortField;public void testBuildNested() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()___        ScriptSortBuilder sortBuilder = new ScriptSortBuilder(mockScript(MOCK_SCRIPT_NAME), ScriptSortType.NUMBER)_                .setNestedSort(new NestedSortBuilder("path").setFilter(QueryBuilders.matchAllQuery()))__        SortField sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        XFieldComparatorSource comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        Nested nested = comparatorSource.nested()__        assertNotNull(nested)__        assertEquals(new MatchAllDocsQuery(), nested.getInnerQuery())___        sortBuilder = new ScriptSortBuilder(mockScript(MOCK_SCRIPT_NAME), ScriptSortType.NUMBER).setNestedPath("path")__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        nested = comparatorSource.nested()__        assertNotNull(nested)__        assertEquals(new TermQuery(new Term(TypeFieldMapper.NAME, "__path")), nested.getInnerQuery())___        sortBuilder = new ScriptSortBuilder(mockScript(MOCK_SCRIPT_NAME), ScriptSortType.NUMBER).setNestedPath("path")_                .setNestedFilter(QueryBuilders.matchAllQuery())__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        nested = comparatorSource.nested()__        assertNotNull(nested)__        assertEquals(new MatchAllDocsQuery(), nested.getInnerQuery())___        _        sortBuilder = new ScriptSortBuilder(mockScript(MOCK_SCRIPT_NAME), ScriptSortType.NUMBER)_                .setNestedFilter(QueryBuilders.matchAllQuery())__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertNull(comparatorSource.nested())__    };test,that,the,sort,builder,nested,object,gets,created,in,the,sort,field;public,void,test,build,nested,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,script,sort,builder,sort,builder,new,script,sort,builder,mock,script,script,sort,type,number,set,nested,sort,new,nested,sort,builder,path,set,filter,query,builders,match,all,query,sort,field,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,xfield,comparator,source,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,nested,nested,comparator,source,nested,assert,not,null,nested,assert,equals,new,match,all,docs,query,nested,get,inner,query,sort,builder,new,script,sort,builder,mock,script,script,sort,type,number,set,nested,path,path,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,nested,comparator,source,nested,assert,not,null,nested,assert,equals,new,term,query,new,term,type,field,mapper,name,nested,get,inner,query,sort,builder,new,script,sort,builder,mock,script,script,sort,type,number,set,nested,path,path,set,nested,filter,query,builders,match,all,query,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,nested,comparator,source,nested,assert,not,null,nested,assert,equals,new,match,all,docs,query,nested,get,inner,query,sort,builder,new,script,sort,builder,mock,script,script,sort,type,number,set,nested,filter,query,builders,match,all,query,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,null,comparator,source,nested
ScriptSortBuilderTests -> public void testBuildNested() throws IOException;1539615817;Test that the sort builder nested object gets created in the SortField;public void testBuildNested() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()___        ScriptSortBuilder sortBuilder = new ScriptSortBuilder(mockScript(MOCK_SCRIPT_NAME), ScriptSortType.NUMBER)_                .setNestedSort(new NestedSortBuilder("path").setFilter(QueryBuilders.matchAllQuery()))__        SortField sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        XFieldComparatorSource comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        Nested nested = comparatorSource.nested()__        assertNotNull(nested)__        assertEquals(new MatchAllDocsQuery(), nested.getInnerQuery())___        sortBuilder = new ScriptSortBuilder(mockScript(MOCK_SCRIPT_NAME), ScriptSortType.NUMBER).setNestedPath("path")__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        nested = comparatorSource.nested()__        assertNotNull(nested)__        assertEquals(new TermQuery(new Term(TypeFieldMapper.NAME, "__path")), nested.getInnerQuery())___        sortBuilder = new ScriptSortBuilder(mockScript(MOCK_SCRIPT_NAME), ScriptSortType.NUMBER).setNestedPath("path")_                .setNestedFilter(QueryBuilders.matchAllQuery())__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        nested = comparatorSource.nested()__        assertNotNull(nested)__        assertEquals(new MatchAllDocsQuery(), nested.getInnerQuery())___        _        sortBuilder = new ScriptSortBuilder(mockScript(MOCK_SCRIPT_NAME), ScriptSortType.NUMBER)_                .setNestedFilter(QueryBuilders.matchAllQuery())__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertNull(comparatorSource.nested())__    };test,that,the,sort,builder,nested,object,gets,created,in,the,sort,field;public,void,test,build,nested,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,script,sort,builder,sort,builder,new,script,sort,builder,mock,script,script,sort,type,number,set,nested,sort,new,nested,sort,builder,path,set,filter,query,builders,match,all,query,sort,field,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,xfield,comparator,source,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,nested,nested,comparator,source,nested,assert,not,null,nested,assert,equals,new,match,all,docs,query,nested,get,inner,query,sort,builder,new,script,sort,builder,mock,script,script,sort,type,number,set,nested,path,path,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,nested,comparator,source,nested,assert,not,null,nested,assert,equals,new,term,query,new,term,type,field,mapper,name,nested,get,inner,query,sort,builder,new,script,sort,builder,mock,script,script,sort,type,number,set,nested,path,path,set,nested,filter,query,builders,match,all,query,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,nested,comparator,source,nested,assert,not,null,nested,assert,equals,new,match,all,docs,query,nested,get,inner,query,sort,builder,new,script,sort,builder,mock,script,script,sort,type,number,set,nested,filter,query,builders,match,all,query,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,null,comparator,source,nested
ScriptSortBuilderTests -> public void testBadSortMode() throws IOException;1524684173;script sort of type {@link ScriptSortType} does not work with {@link SortMode#AVG}, {@link SortMode#MEDIAN} or {@link SortMode#SUM};public void testBadSortMode() throws IOException {_        ScriptSortBuilder builder = new ScriptSortBuilder(mockScript(MOCK_SCRIPT_NAME), ScriptSortType.STRING)__        String sortMode = randomFrom(new String[] { "avg", "median", "sum" })__        Exception e = expectThrows(IllegalArgumentException.class, () -> builder.sortMode(SortMode.fromString(sortMode)))__        assertEquals("script sort of type [string] doesn't support mode [" + sortMode + "]", e.getMessage())__    };script,sort,of,type,link,script,sort,type,does,not,work,with,link,sort,mode,avg,link,sort,mode,median,or,link,sort,mode,sum;public,void,test,bad,sort,mode,throws,ioexception,script,sort,builder,builder,new,script,sort,builder,mock,script,script,sort,type,string,string,sort,mode,random,from,new,string,avg,median,sum,exception,e,expect,throws,illegal,argument,exception,class,builder,sort,mode,sort,mode,from,string,sort,mode,assert,equals,script,sort,of,type,string,doesn,t,support,mode,sort,mode,e,get,message
ScriptSortBuilderTests -> public void testBadSortMode() throws IOException;1528167589;script sort of type {@link ScriptSortType} does not work with {@link SortMode#AVG}, {@link SortMode#MEDIAN} or {@link SortMode#SUM};public void testBadSortMode() throws IOException {_        ScriptSortBuilder builder = new ScriptSortBuilder(mockScript(MOCK_SCRIPT_NAME), ScriptSortType.STRING)__        String sortMode = randomFrom(new String[] { "avg", "median", "sum" })__        Exception e = expectThrows(IllegalArgumentException.class, () -> builder.sortMode(SortMode.fromString(sortMode)))__        assertEquals("script sort of type [string] doesn't support mode [" + sortMode + "]", e.getMessage())__    };script,sort,of,type,link,script,sort,type,does,not,work,with,link,sort,mode,avg,link,sort,mode,median,or,link,sort,mode,sum;public,void,test,bad,sort,mode,throws,ioexception,script,sort,builder,builder,new,script,sort,builder,mock,script,script,sort,type,string,string,sort,mode,random,from,new,string,avg,median,sum,exception,e,expect,throws,illegal,argument,exception,class,builder,sort,mode,sort,mode,from,string,sort,mode,assert,equals,script,sort,of,type,string,doesn,t,support,mode,sort,mode,e,get,message
ScriptSortBuilderTests -> public void testBadSortMode() throws IOException;1529916084;script sort of type {@link ScriptSortType} does not work with {@link SortMode#AVG}, {@link SortMode#MEDIAN} or {@link SortMode#SUM};public void testBadSortMode() throws IOException {_        ScriptSortBuilder builder = new ScriptSortBuilder(mockScript(MOCK_SCRIPT_NAME), ScriptSortType.STRING)__        String sortMode = randomFrom(new String[] { "avg", "median", "sum" })__        Exception e = expectThrows(IllegalArgumentException.class, () -> builder.sortMode(SortMode.fromString(sortMode)))__        assertEquals("script sort of type [string] doesn't support mode [" + sortMode + "]", e.getMessage())__    };script,sort,of,type,link,script,sort,type,does,not,work,with,link,sort,mode,avg,link,sort,mode,median,or,link,sort,mode,sum;public,void,test,bad,sort,mode,throws,ioexception,script,sort,builder,builder,new,script,sort,builder,mock,script,script,sort,type,string,string,sort,mode,random,from,new,string,avg,median,sum,exception,e,expect,throws,illegal,argument,exception,class,builder,sort,mode,sort,mode,from,string,sort,mode,assert,equals,script,sort,of,type,string,doesn,t,support,mode,sort,mode,e,get,message
ScriptSortBuilderTests -> public void testBadSortMode() throws IOException;1539615817;script sort of type {@link ScriptSortType} does not work with {@link SortMode#AVG}, {@link SortMode#MEDIAN} or {@link SortMode#SUM};public void testBadSortMode() throws IOException {_        ScriptSortBuilder builder = new ScriptSortBuilder(mockScript(MOCK_SCRIPT_NAME), ScriptSortType.STRING)__        String sortMode = randomFrom(new String[] { "avg", "median", "sum" })__        Exception e = expectThrows(IllegalArgumentException.class, () -> builder.sortMode(SortMode.fromString(sortMode)))__        assertEquals("script sort of type [string] doesn't support mode [" + sortMode + "]", e.getMessage())__    };script,sort,of,type,link,script,sort,type,does,not,work,with,link,sort,mode,avg,link,sort,mode,median,or,link,sort,mode,sum;public,void,test,bad,sort,mode,throws,ioexception,script,sort,builder,builder,new,script,sort,builder,mock,script,script,sort,type,string,string,sort,mode,random,from,new,string,avg,median,sum,exception,e,expect,throws,illegal,argument,exception,class,builder,sort,mode,sort,mode,from,string,sort,mode,assert,equals,script,sort,of,type,string,doesn,t,support,mode,sort,mode,e,get,message
ScriptSortBuilderTests -> public void testNestedSortRewrites() throws IOException;1524684173;Test the nested sort gets rewritten;public void testNestedSortRewrites() throws IOException {_        ScriptSortBuilder sortBuilder = new ScriptSortBuilder(mockScript("something"), ScriptSortType.STRING)__        RangeQueryBuilder rangeQuery = new RangeQueryBuilder("fieldName") {_            @Override_            public QueryBuilder doRewrite(QueryRewriteContext queryShardContext) throws IOException {_                return new MatchNoneQueryBuilder()__            }_        }__        sortBuilder.setNestedSort(new NestedSortBuilder("path").setFilter(rangeQuery))__        ScriptSortBuilder rewritten = (ScriptSortBuilder) sortBuilder_                .rewrite(createMockShardContext())__        assertNotSame(rangeQuery, rewritten.getNestedSort().getFilter())__    };test,the,nested,sort,gets,rewritten;public,void,test,nested,sort,rewrites,throws,ioexception,script,sort,builder,sort,builder,new,script,sort,builder,mock,script,something,script,sort,type,string,range,query,builder,range,query,new,range,query,builder,field,name,override,public,query,builder,do,rewrite,query,rewrite,context,query,shard,context,throws,ioexception,return,new,match,none,query,builder,sort,builder,set,nested,sort,new,nested,sort,builder,path,set,filter,range,query,script,sort,builder,rewritten,script,sort,builder,sort,builder,rewrite,create,mock,shard,context,assert,not,same,range,query,rewritten,get,nested,sort,get,filter
ScriptSortBuilderTests -> public void testNestedSortRewrites() throws IOException;1528167589;Test the nested sort gets rewritten;public void testNestedSortRewrites() throws IOException {_        ScriptSortBuilder sortBuilder = new ScriptSortBuilder(mockScript("something"), ScriptSortType.STRING)__        RangeQueryBuilder rangeQuery = new RangeQueryBuilder("fieldName") {_            @Override_            public QueryBuilder doRewrite(QueryRewriteContext queryShardContext) throws IOException {_                return new MatchNoneQueryBuilder()__            }_        }__        sortBuilder.setNestedSort(new NestedSortBuilder("path").setFilter(rangeQuery))__        ScriptSortBuilder rewritten = sortBuilder_                .rewrite(createMockShardContext())__        assertNotSame(rangeQuery, rewritten.getNestedSort().getFilter())__    };test,the,nested,sort,gets,rewritten;public,void,test,nested,sort,rewrites,throws,ioexception,script,sort,builder,sort,builder,new,script,sort,builder,mock,script,something,script,sort,type,string,range,query,builder,range,query,new,range,query,builder,field,name,override,public,query,builder,do,rewrite,query,rewrite,context,query,shard,context,throws,ioexception,return,new,match,none,query,builder,sort,builder,set,nested,sort,new,nested,sort,builder,path,set,filter,range,query,script,sort,builder,rewritten,sort,builder,rewrite,create,mock,shard,context,assert,not,same,range,query,rewritten,get,nested,sort,get,filter
ScriptSortBuilderTests -> public void testNestedSortRewrites() throws IOException;1529916084;Test the nested sort gets rewritten;public void testNestedSortRewrites() throws IOException {_        ScriptSortBuilder sortBuilder = new ScriptSortBuilder(mockScript("something"), ScriptSortType.STRING)__        RangeQueryBuilder rangeQuery = new RangeQueryBuilder("fieldName") {_            @Override_            public QueryBuilder doRewrite(QueryRewriteContext queryShardContext) throws IOException {_                return new MatchNoneQueryBuilder()__            }_        }__        sortBuilder.setNestedSort(new NestedSortBuilder("path").setFilter(rangeQuery))__        ScriptSortBuilder rewritten = sortBuilder_                .rewrite(createMockShardContext())__        assertNotSame(rangeQuery, rewritten.getNestedSort().getFilter())__    };test,the,nested,sort,gets,rewritten;public,void,test,nested,sort,rewrites,throws,ioexception,script,sort,builder,sort,builder,new,script,sort,builder,mock,script,something,script,sort,type,string,range,query,builder,range,query,new,range,query,builder,field,name,override,public,query,builder,do,rewrite,query,rewrite,context,query,shard,context,throws,ioexception,return,new,match,none,query,builder,sort,builder,set,nested,sort,new,nested,sort,builder,path,set,filter,range,query,script,sort,builder,rewritten,sort,builder,rewrite,create,mock,shard,context,assert,not,same,range,query,rewritten,get,nested,sort,get,filter
ScriptSortBuilderTests -> public void testNestedSortRewrites() throws IOException;1539615817;Test the nested sort gets rewritten;public void testNestedSortRewrites() throws IOException {_        ScriptSortBuilder sortBuilder = new ScriptSortBuilder(mockScript("something"), ScriptSortType.STRING)__        RangeQueryBuilder rangeQuery = new RangeQueryBuilder("fieldName") {_            @Override_            public QueryBuilder doRewrite(QueryRewriteContext queryShardContext) throws IOException {_                return new MatchNoneQueryBuilder()__            }_        }__        sortBuilder.setNestedSort(new NestedSortBuilder("path").setFilter(rangeQuery))__        ScriptSortBuilder rewritten = sortBuilder_                .rewrite(createMockShardContext())__        assertNotSame(rangeQuery, rewritten.getNestedSort().getFilter())__    };test,the,nested,sort,gets,rewritten;public,void,test,nested,sort,rewrites,throws,ioexception,script,sort,builder,sort,builder,new,script,sort,builder,mock,script,something,script,sort,type,string,range,query,builder,range,query,new,range,query,builder,field,name,override,public,query,builder,do,rewrite,query,rewrite,context,query,shard,context,throws,ioexception,return,new,match,none,query,builder,sort,builder,set,nested,sort,new,nested,sort,builder,path,set,filter,range,query,script,sort,builder,rewritten,sort,builder,rewrite,create,mock,shard,context,assert,not,same,range,query,rewritten,get,nested,sort,get,filter
ScriptSortBuilderTests -> public void testNestedSortBothThrows() throws IOException;1524684173;Test we can either set nested sort via path/filter or via nested sort builder, not both;public void testNestedSortBothThrows() throws IOException {_        ScriptSortBuilder sortBuilder = new ScriptSortBuilder(mockScript(MOCK_SCRIPT_NAME), ScriptSortType.NUMBER)__        IllegalArgumentException iae = expectThrows(IllegalArgumentException.class,_                () -> sortBuilder.setNestedPath("nestedPath").setNestedSort(new NestedSortBuilder("otherPath")))__        assertEquals("Setting both nested_path/nested_filter and nested not allowed", iae.getMessage())__        iae = expectThrows(IllegalArgumentException.class,_                () -> sortBuilder.setNestedSort(new NestedSortBuilder("otherPath")).setNestedPath("nestedPath"))__        assertEquals("Setting both nested_path/nested_filter and nested not allowed", iae.getMessage())__        iae = expectThrows(IllegalArgumentException.class,_                () -> sortBuilder.setNestedSort(new NestedSortBuilder("otherPath")).setNestedFilter(QueryBuilders.matchAllQuery()))__        assertEquals("Setting both nested_path/nested_filter and nested not allowed", iae.getMessage())__     };test,we,can,either,set,nested,sort,via,path,filter,or,via,nested,sort,builder,not,both;public,void,test,nested,sort,both,throws,throws,ioexception,script,sort,builder,sort,builder,new,script,sort,builder,mock,script,script,sort,type,number,illegal,argument,exception,iae,expect,throws,illegal,argument,exception,class,sort,builder,set,nested,path,nested,path,set,nested,sort,new,nested,sort,builder,other,path,assert,equals,setting,both,and,nested,not,allowed,iae,get,message,iae,expect,throws,illegal,argument,exception,class,sort,builder,set,nested,sort,new,nested,sort,builder,other,path,set,nested,path,nested,path,assert,equals,setting,both,and,nested,not,allowed,iae,get,message,iae,expect,throws,illegal,argument,exception,class,sort,builder,set,nested,sort,new,nested,sort,builder,other,path,set,nested,filter,query,builders,match,all,query,assert,equals,setting,both,and,nested,not,allowed,iae,get,message
ScriptSortBuilderTests -> public void testNestedSortBothThrows() throws IOException;1528167589;Test we can either set nested sort via path/filter or via nested sort builder, not both;public void testNestedSortBothThrows() throws IOException {_        ScriptSortBuilder sortBuilder = new ScriptSortBuilder(mockScript(MOCK_SCRIPT_NAME), ScriptSortType.NUMBER)__        IllegalArgumentException iae = expectThrows(IllegalArgumentException.class,_                () -> sortBuilder.setNestedPath("nestedPath").setNestedSort(new NestedSortBuilder("otherPath")))__        assertEquals("Setting both nested_path/nested_filter and nested not allowed", iae.getMessage())__        iae = expectThrows(IllegalArgumentException.class,_                () -> sortBuilder.setNestedSort(new NestedSortBuilder("otherPath")).setNestedPath("nestedPath"))__        assertEquals("Setting both nested_path/nested_filter and nested not allowed", iae.getMessage())__        iae = expectThrows(IllegalArgumentException.class,_                () -> sortBuilder.setNestedSort(new NestedSortBuilder("otherPath")).setNestedFilter(QueryBuilders.matchAllQuery()))__        assertEquals("Setting both nested_path/nested_filter and nested not allowed", iae.getMessage())__     };test,we,can,either,set,nested,sort,via,path,filter,or,via,nested,sort,builder,not,both;public,void,test,nested,sort,both,throws,throws,ioexception,script,sort,builder,sort,builder,new,script,sort,builder,mock,script,script,sort,type,number,illegal,argument,exception,iae,expect,throws,illegal,argument,exception,class,sort,builder,set,nested,path,nested,path,set,nested,sort,new,nested,sort,builder,other,path,assert,equals,setting,both,and,nested,not,allowed,iae,get,message,iae,expect,throws,illegal,argument,exception,class,sort,builder,set,nested,sort,new,nested,sort,builder,other,path,set,nested,path,nested,path,assert,equals,setting,both,and,nested,not,allowed,iae,get,message,iae,expect,throws,illegal,argument,exception,class,sort,builder,set,nested,sort,new,nested,sort,builder,other,path,set,nested,filter,query,builders,match,all,query,assert,equals,setting,both,and,nested,not,allowed,iae,get,message
ScriptSortBuilderTests -> public void testNestedSortBothThrows() throws IOException;1529916084;Test we can either set nested sort via path/filter or via nested sort builder, not both;public void testNestedSortBothThrows() throws IOException {_        ScriptSortBuilder sortBuilder = new ScriptSortBuilder(mockScript(MOCK_SCRIPT_NAME), ScriptSortType.NUMBER)__        IllegalArgumentException iae = expectThrows(IllegalArgumentException.class,_                () -> sortBuilder.setNestedPath("nestedPath").setNestedSort(new NestedSortBuilder("otherPath")))__        assertEquals("Setting both nested_path/nested_filter and nested not allowed", iae.getMessage())__        iae = expectThrows(IllegalArgumentException.class,_                () -> sortBuilder.setNestedSort(new NestedSortBuilder("otherPath")).setNestedPath("nestedPath"))__        assertEquals("Setting both nested_path/nested_filter and nested not allowed", iae.getMessage())__        iae = expectThrows(IllegalArgumentException.class,_                () -> sortBuilder.setNestedSort(new NestedSortBuilder("otherPath")).setNestedFilter(QueryBuilders.matchAllQuery()))__        assertEquals("Setting both nested_path/nested_filter and nested not allowed", iae.getMessage())__     };test,we,can,either,set,nested,sort,via,path,filter,or,via,nested,sort,builder,not,both;public,void,test,nested,sort,both,throws,throws,ioexception,script,sort,builder,sort,builder,new,script,sort,builder,mock,script,script,sort,type,number,illegal,argument,exception,iae,expect,throws,illegal,argument,exception,class,sort,builder,set,nested,path,nested,path,set,nested,sort,new,nested,sort,builder,other,path,assert,equals,setting,both,and,nested,not,allowed,iae,get,message,iae,expect,throws,illegal,argument,exception,class,sort,builder,set,nested,sort,new,nested,sort,builder,other,path,set,nested,path,nested,path,assert,equals,setting,both,and,nested,not,allowed,iae,get,message,iae,expect,throws,illegal,argument,exception,class,sort,builder,set,nested,sort,new,nested,sort,builder,other,path,set,nested,filter,query,builders,match,all,query,assert,equals,setting,both,and,nested,not,allowed,iae,get,message
ScriptSortBuilderTests -> public void testNestedSortBothThrows() throws IOException;1539615817;Test we can either set nested sort via path/filter or via nested sort builder, not both;public void testNestedSortBothThrows() throws IOException {_        ScriptSortBuilder sortBuilder = new ScriptSortBuilder(mockScript(MOCK_SCRIPT_NAME), ScriptSortType.NUMBER)__        IllegalArgumentException iae = expectThrows(IllegalArgumentException.class,_                () -> sortBuilder.setNestedPath("nestedPath").setNestedSort(new NestedSortBuilder("otherPath")))__        assertEquals("Setting both nested_path/nested_filter and nested not allowed", iae.getMessage())__        iae = expectThrows(IllegalArgumentException.class,_                () -> sortBuilder.setNestedSort(new NestedSortBuilder("otherPath")).setNestedPath("nestedPath"))__        assertEquals("Setting both nested_path/nested_filter and nested not allowed", iae.getMessage())__        iae = expectThrows(IllegalArgumentException.class,_                () -> sortBuilder.setNestedSort(new NestedSortBuilder("otherPath")).setNestedFilter(QueryBuilders.matchAllQuery()))__        assertEquals("Setting both nested_path/nested_filter and nested not allowed", iae.getMessage())__     };test,we,can,either,set,nested,sort,via,path,filter,or,via,nested,sort,builder,not,both;public,void,test,nested,sort,both,throws,throws,ioexception,script,sort,builder,sort,builder,new,script,sort,builder,mock,script,script,sort,type,number,illegal,argument,exception,iae,expect,throws,illegal,argument,exception,class,sort,builder,set,nested,path,nested,path,set,nested,sort,new,nested,sort,builder,other,path,assert,equals,setting,both,and,nested,not,allowed,iae,get,message,iae,expect,throws,illegal,argument,exception,class,sort,builder,set,nested,sort,new,nested,sort,builder,other,path,set,nested,path,nested,path,assert,equals,setting,both,and,nested,not,allowed,iae,get,message,iae,expect,throws,illegal,argument,exception,class,sort,builder,set,nested,sort,new,nested,sort,builder,other,path,set,nested,filter,query,builders,match,all,query,assert,equals,setting,both,and,nested,not,allowed,iae,get,message
ScriptSortBuilderTests -> public void testNestedRewrites() throws IOException;1524684173;Test the nested Filter gets rewritten;public void testNestedRewrites() throws IOException {_        ScriptSortBuilder sortBuilder = new ScriptSortBuilder(mockScript("something"), ScriptSortType.STRING)__        RangeQueryBuilder rangeQuery = new RangeQueryBuilder("fieldName") {_            @Override_            public QueryBuilder doRewrite(QueryRewriteContext queryShardContext) throws IOException {_                return new MatchNoneQueryBuilder()__            }_        }__        sortBuilder.setNestedPath("path").setNestedFilter(rangeQuery)__        ScriptSortBuilder rewritten = (ScriptSortBuilder) sortBuilder_                .rewrite(createMockShardContext())__        assertNotSame(rangeQuery, rewritten.getNestedFilter())__    };test,the,nested,filter,gets,rewritten;public,void,test,nested,rewrites,throws,ioexception,script,sort,builder,sort,builder,new,script,sort,builder,mock,script,something,script,sort,type,string,range,query,builder,range,query,new,range,query,builder,field,name,override,public,query,builder,do,rewrite,query,rewrite,context,query,shard,context,throws,ioexception,return,new,match,none,query,builder,sort,builder,set,nested,path,path,set,nested,filter,range,query,script,sort,builder,rewritten,script,sort,builder,sort,builder,rewrite,create,mock,shard,context,assert,not,same,range,query,rewritten,get,nested,filter
ScriptSortBuilderTests -> public void testNestedRewrites() throws IOException;1528167589;Test the nested Filter gets rewritten;public void testNestedRewrites() throws IOException {_        ScriptSortBuilder sortBuilder = new ScriptSortBuilder(mockScript("something"), ScriptSortType.STRING)__        RangeQueryBuilder rangeQuery = new RangeQueryBuilder("fieldName") {_            @Override_            public QueryBuilder doRewrite(QueryRewriteContext queryShardContext) throws IOException {_                return new MatchNoneQueryBuilder()__            }_        }__        sortBuilder.setNestedPath("path").setNestedFilter(rangeQuery)__        ScriptSortBuilder rewritten = sortBuilder_                .rewrite(createMockShardContext())__        assertNotSame(rangeQuery, rewritten.getNestedFilter())__    };test,the,nested,filter,gets,rewritten;public,void,test,nested,rewrites,throws,ioexception,script,sort,builder,sort,builder,new,script,sort,builder,mock,script,something,script,sort,type,string,range,query,builder,range,query,new,range,query,builder,field,name,override,public,query,builder,do,rewrite,query,rewrite,context,query,shard,context,throws,ioexception,return,new,match,none,query,builder,sort,builder,set,nested,path,path,set,nested,filter,range,query,script,sort,builder,rewritten,sort,builder,rewrite,create,mock,shard,context,assert,not,same,range,query,rewritten,get,nested,filter
ScriptSortBuilderTests -> public void testNestedRewrites() throws IOException;1529916084;Test the nested Filter gets rewritten;public void testNestedRewrites() throws IOException {_        ScriptSortBuilder sortBuilder = new ScriptSortBuilder(mockScript("something"), ScriptSortType.STRING)__        RangeQueryBuilder rangeQuery = new RangeQueryBuilder("fieldName") {_            @Override_            public QueryBuilder doRewrite(QueryRewriteContext queryShardContext) throws IOException {_                return new MatchNoneQueryBuilder()__            }_        }__        sortBuilder.setNestedPath("path").setNestedFilter(rangeQuery)__        ScriptSortBuilder rewritten = sortBuilder_                .rewrite(createMockShardContext())__        assertNotSame(rangeQuery, rewritten.getNestedFilter())__    };test,the,nested,filter,gets,rewritten;public,void,test,nested,rewrites,throws,ioexception,script,sort,builder,sort,builder,new,script,sort,builder,mock,script,something,script,sort,type,string,range,query,builder,range,query,new,range,query,builder,field,name,override,public,query,builder,do,rewrite,query,rewrite,context,query,shard,context,throws,ioexception,return,new,match,none,query,builder,sort,builder,set,nested,path,path,set,nested,filter,range,query,script,sort,builder,rewritten,sort,builder,rewrite,create,mock,shard,context,assert,not,same,range,query,rewritten,get,nested,filter
ScriptSortBuilderTests -> public void testNestedRewrites() throws IOException;1539615817;Test the nested Filter gets rewritten;public void testNestedRewrites() throws IOException {_        ScriptSortBuilder sortBuilder = new ScriptSortBuilder(mockScript("something"), ScriptSortType.STRING)__        RangeQueryBuilder rangeQuery = new RangeQueryBuilder("fieldName") {_            @Override_            public QueryBuilder doRewrite(QueryRewriteContext queryShardContext) throws IOException {_                return new MatchNoneQueryBuilder()__            }_        }__        sortBuilder.setNestedPath("path").setNestedFilter(rangeQuery)__        ScriptSortBuilder rewritten = sortBuilder_                .rewrite(createMockShardContext())__        assertNotSame(rangeQuery, rewritten.getNestedFilter())__    };test,the,nested,filter,gets,rewritten;public,void,test,nested,rewrites,throws,ioexception,script,sort,builder,sort,builder,new,script,sort,builder,mock,script,something,script,sort,type,string,range,query,builder,range,query,new,range,query,builder,field,name,override,public,query,builder,do,rewrite,query,rewrite,context,query,shard,context,throws,ioexception,return,new,match,none,query,builder,sort,builder,set,nested,path,path,set,nested,filter,range,query,script,sort,builder,rewritten,sort,builder,rewrite,create,mock,shard,context,assert,not,same,range,query,rewritten,get,nested,filter
ScriptSortBuilderTests -> public void testMultiValueMode() throws IOException;1524684173;Test that the sort builder mode gets transfered correctly to the SortField;public void testMultiValueMode() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()__        for (SortMode mode : SortMode.values()) {_            ScriptSortBuilder sortBuilder = new ScriptSortBuilder(mockScript(MOCK_SCRIPT_NAME), ScriptSortType.NUMBER)__            sortBuilder.sortMode(mode)__            SortField sortField = sortBuilder.build(shardContextMock).field__            assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__            XFieldComparatorSource comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__            assertEquals(MultiValueMode.fromString(mode.toString()), comparatorSource.sortMode())__        }__        _        ScriptSortBuilder sortBuilder = new ScriptSortBuilder(mockScript(MOCK_SCRIPT_NAME), ScriptSortType.NUMBER)__        sortBuilder.order(SortOrder.ASC)__        SortField sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        XFieldComparatorSource comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.MIN, comparatorSource.sortMode())___        sortBuilder = new ScriptSortBuilder(mockScript(MOCK_SCRIPT_NAME), ScriptSortType.NUMBER)__        sortBuilder.order(SortOrder.DESC)__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.MAX, comparatorSource.sortMode())__    };test,that,the,sort,builder,mode,gets,transfered,correctly,to,the,sort,field;public,void,test,multi,value,mode,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,for,sort,mode,mode,sort,mode,values,script,sort,builder,sort,builder,new,script,sort,builder,mock,script,script,sort,type,number,sort,builder,sort,mode,mode,sort,field,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,xfield,comparator,source,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,from,string,mode,to,string,comparator,source,sort,mode,script,sort,builder,sort,builder,new,script,sort,builder,mock,script,script,sort,type,number,sort,builder,order,sort,order,asc,sort,field,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,xfield,comparator,source,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,min,comparator,source,sort,mode,sort,builder,new,script,sort,builder,mock,script,script,sort,type,number,sort,builder,order,sort,order,desc,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,max,comparator,source,sort,mode
ScriptSortBuilderTests -> public void testMultiValueMode() throws IOException;1528167589;Test that the sort builder mode gets transfered correctly to the SortField;public void testMultiValueMode() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()__        for (SortMode mode : SortMode.values()) {_            ScriptSortBuilder sortBuilder = new ScriptSortBuilder(mockScript(MOCK_SCRIPT_NAME), ScriptSortType.NUMBER)__            sortBuilder.sortMode(mode)__            SortField sortField = sortBuilder.build(shardContextMock).field__            assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__            XFieldComparatorSource comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__            assertEquals(MultiValueMode.fromString(mode.toString()), comparatorSource.sortMode())__        }__        _        ScriptSortBuilder sortBuilder = new ScriptSortBuilder(mockScript(MOCK_SCRIPT_NAME), ScriptSortType.NUMBER)__        sortBuilder.order(SortOrder.ASC)__        SortField sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        XFieldComparatorSource comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.MIN, comparatorSource.sortMode())___        sortBuilder = new ScriptSortBuilder(mockScript(MOCK_SCRIPT_NAME), ScriptSortType.NUMBER)__        sortBuilder.order(SortOrder.DESC)__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.MAX, comparatorSource.sortMode())__    };test,that,the,sort,builder,mode,gets,transfered,correctly,to,the,sort,field;public,void,test,multi,value,mode,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,for,sort,mode,mode,sort,mode,values,script,sort,builder,sort,builder,new,script,sort,builder,mock,script,script,sort,type,number,sort,builder,sort,mode,mode,sort,field,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,xfield,comparator,source,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,from,string,mode,to,string,comparator,source,sort,mode,script,sort,builder,sort,builder,new,script,sort,builder,mock,script,script,sort,type,number,sort,builder,order,sort,order,asc,sort,field,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,xfield,comparator,source,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,min,comparator,source,sort,mode,sort,builder,new,script,sort,builder,mock,script,script,sort,type,number,sort,builder,order,sort,order,desc,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,max,comparator,source,sort,mode
ScriptSortBuilderTests -> public void testMultiValueMode() throws IOException;1529916084;Test that the sort builder mode gets transfered correctly to the SortField;public void testMultiValueMode() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()__        for (SortMode mode : SortMode.values()) {_            ScriptSortBuilder sortBuilder = new ScriptSortBuilder(mockScript(MOCK_SCRIPT_NAME), ScriptSortType.NUMBER)__            sortBuilder.sortMode(mode)__            SortField sortField = sortBuilder.build(shardContextMock).field__            assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__            XFieldComparatorSource comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__            assertEquals(MultiValueMode.fromString(mode.toString()), comparatorSource.sortMode())__        }__        _        ScriptSortBuilder sortBuilder = new ScriptSortBuilder(mockScript(MOCK_SCRIPT_NAME), ScriptSortType.NUMBER)__        sortBuilder.order(SortOrder.ASC)__        SortField sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        XFieldComparatorSource comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.MIN, comparatorSource.sortMode())___        sortBuilder = new ScriptSortBuilder(mockScript(MOCK_SCRIPT_NAME), ScriptSortType.NUMBER)__        sortBuilder.order(SortOrder.DESC)__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.MAX, comparatorSource.sortMode())__    };test,that,the,sort,builder,mode,gets,transfered,correctly,to,the,sort,field;public,void,test,multi,value,mode,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,for,sort,mode,mode,sort,mode,values,script,sort,builder,sort,builder,new,script,sort,builder,mock,script,script,sort,type,number,sort,builder,sort,mode,mode,sort,field,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,xfield,comparator,source,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,from,string,mode,to,string,comparator,source,sort,mode,script,sort,builder,sort,builder,new,script,sort,builder,mock,script,script,sort,type,number,sort,builder,order,sort,order,asc,sort,field,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,xfield,comparator,source,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,min,comparator,source,sort,mode,sort,builder,new,script,sort,builder,mock,script,script,sort,type,number,sort,builder,order,sort,order,desc,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,max,comparator,source,sort,mode
ScriptSortBuilderTests -> public void testMultiValueMode() throws IOException;1539615817;Test that the sort builder mode gets transferred correctly to the SortField;public void testMultiValueMode() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()__        for (SortMode mode : SortMode.values()) {_            ScriptSortBuilder sortBuilder = new ScriptSortBuilder(mockScript(MOCK_SCRIPT_NAME), ScriptSortType.NUMBER)__            sortBuilder.sortMode(mode)__            SortField sortField = sortBuilder.build(shardContextMock).field__            assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__            XFieldComparatorSource comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__            assertEquals(MultiValueMode.fromString(mode.toString()), comparatorSource.sortMode())__        }__        _        ScriptSortBuilder sortBuilder = new ScriptSortBuilder(mockScript(MOCK_SCRIPT_NAME), ScriptSortType.NUMBER)__        sortBuilder.order(SortOrder.ASC)__        SortField sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        XFieldComparatorSource comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.MIN, comparatorSource.sortMode())___        sortBuilder = new ScriptSortBuilder(mockScript(MOCK_SCRIPT_NAME), ScriptSortType.NUMBER)__        sortBuilder.order(SortOrder.DESC)__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.MAX, comparatorSource.sortMode())__    };test,that,the,sort,builder,mode,gets,transferred,correctly,to,the,sort,field;public,void,test,multi,value,mode,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,for,sort,mode,mode,sort,mode,values,script,sort,builder,sort,builder,new,script,sort,builder,mock,script,script,sort,type,number,sort,builder,sort,mode,mode,sort,field,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,xfield,comparator,source,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,from,string,mode,to,string,comparator,source,sort,mode,script,sort,builder,sort,builder,new,script,sort,builder,mock,script,script,sort,type,number,sort,builder,order,sort,order,asc,sort,field,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,xfield,comparator,source,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,min,comparator,source,sort,mode,sort,builder,new,script,sort,builder,mock,script,script,sort,type,number,sort,builder,order,sort,order,desc,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,max,comparator,source,sort,mode
ScriptSortBuilderTests -> public void testBuildCorrectComparatorType() throws IOException;1524684173;Test that the correct comparator sort is returned, based on the script type;public void testBuildCorrectComparatorType() throws IOException {_        ScriptSortBuilder sortBuilder = new ScriptSortBuilder(mockScript(MOCK_SCRIPT_NAME), ScriptSortType.STRING)__        SortField sortField = sortBuilder.build(createMockShardContext()).field__        assertThat(sortField.getComparatorSource(), instanceOf(BytesRefFieldComparatorSource.class))___        sortBuilder = new ScriptSortBuilder(mockScript(MOCK_SCRIPT_NAME), ScriptSortType.NUMBER)__        sortField = sortBuilder.build(createMockShardContext()).field__        assertThat(sortField.getComparatorSource(), instanceOf(DoubleValuesComparatorSource.class))__    };test,that,the,correct,comparator,sort,is,returned,based,on,the,script,type;public,void,test,build,correct,comparator,type,throws,ioexception,script,sort,builder,sort,builder,new,script,sort,builder,mock,script,script,sort,type,string,sort,field,sort,field,sort,builder,build,create,mock,shard,context,field,assert,that,sort,field,get,comparator,source,instance,of,bytes,ref,field,comparator,source,class,sort,builder,new,script,sort,builder,mock,script,script,sort,type,number,sort,field,sort,builder,build,create,mock,shard,context,field,assert,that,sort,field,get,comparator,source,instance,of,double,values,comparator,source,class
ScriptSortBuilderTests -> public void testBuildCorrectComparatorType() throws IOException;1528167589;Test that the correct comparator sort is returned, based on the script type;public void testBuildCorrectComparatorType() throws IOException {_        ScriptSortBuilder sortBuilder = new ScriptSortBuilder(mockScript(MOCK_SCRIPT_NAME), ScriptSortType.STRING)__        SortField sortField = sortBuilder.build(createMockShardContext()).field__        assertThat(sortField.getComparatorSource(), instanceOf(BytesRefFieldComparatorSource.class))___        sortBuilder = new ScriptSortBuilder(mockScript(MOCK_SCRIPT_NAME), ScriptSortType.NUMBER)__        sortField = sortBuilder.build(createMockShardContext()).field__        assertThat(sortField.getComparatorSource(), instanceOf(DoubleValuesComparatorSource.class))__    };test,that,the,correct,comparator,sort,is,returned,based,on,the,script,type;public,void,test,build,correct,comparator,type,throws,ioexception,script,sort,builder,sort,builder,new,script,sort,builder,mock,script,script,sort,type,string,sort,field,sort,field,sort,builder,build,create,mock,shard,context,field,assert,that,sort,field,get,comparator,source,instance,of,bytes,ref,field,comparator,source,class,sort,builder,new,script,sort,builder,mock,script,script,sort,type,number,sort,field,sort,builder,build,create,mock,shard,context,field,assert,that,sort,field,get,comparator,source,instance,of,double,values,comparator,source,class
ScriptSortBuilderTests -> public void testBuildCorrectComparatorType() throws IOException;1529916084;Test that the correct comparator sort is returned, based on the script type;public void testBuildCorrectComparatorType() throws IOException {_        ScriptSortBuilder sortBuilder = new ScriptSortBuilder(mockScript(MOCK_SCRIPT_NAME), ScriptSortType.STRING)__        SortField sortField = sortBuilder.build(createMockShardContext()).field__        assertThat(sortField.getComparatorSource(), instanceOf(BytesRefFieldComparatorSource.class))___        sortBuilder = new ScriptSortBuilder(mockScript(MOCK_SCRIPT_NAME), ScriptSortType.NUMBER)__        sortField = sortBuilder.build(createMockShardContext()).field__        assertThat(sortField.getComparatorSource(), instanceOf(DoubleValuesComparatorSource.class))__    };test,that,the,correct,comparator,sort,is,returned,based,on,the,script,type;public,void,test,build,correct,comparator,type,throws,ioexception,script,sort,builder,sort,builder,new,script,sort,builder,mock,script,script,sort,type,string,sort,field,sort,field,sort,builder,build,create,mock,shard,context,field,assert,that,sort,field,get,comparator,source,instance,of,bytes,ref,field,comparator,source,class,sort,builder,new,script,sort,builder,mock,script,script,sort,type,number,sort,field,sort,builder,build,create,mock,shard,context,field,assert,that,sort,field,get,comparator,source,instance,of,double,values,comparator,source,class
ScriptSortBuilderTests -> public void testBuildCorrectComparatorType() throws IOException;1539615817;Test that the correct comparator sort is returned, based on the script type;public void testBuildCorrectComparatorType() throws IOException {_        ScriptSortBuilder sortBuilder = new ScriptSortBuilder(mockScript(MOCK_SCRIPT_NAME), ScriptSortType.STRING)__        SortField sortField = sortBuilder.build(createMockShardContext()).field__        assertThat(sortField.getComparatorSource(), instanceOf(BytesRefFieldComparatorSource.class))___        sortBuilder = new ScriptSortBuilder(mockScript(MOCK_SCRIPT_NAME), ScriptSortType.NUMBER)__        sortField = sortBuilder.build(createMockShardContext()).field__        assertThat(sortField.getComparatorSource(), instanceOf(DoubleValuesComparatorSource.class))__    };test,that,the,correct,comparator,sort,is,returned,based,on,the,script,type;public,void,test,build,correct,comparator,type,throws,ioexception,script,sort,builder,sort,builder,new,script,sort,builder,mock,script,script,sort,type,string,sort,field,sort,field,sort,builder,build,create,mock,shard,context,field,assert,that,sort,field,get,comparator,source,instance,of,bytes,ref,field,comparator,source,class,sort,builder,new,script,sort,builder,mock,script,script,sort,type,number,sort,field,sort,builder,build,create,mock,shard,context,field,assert,that,sort,field,get,comparator,source,instance,of,double,values,comparator,source,class
