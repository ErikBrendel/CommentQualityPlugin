commented;modifiers;parameterAmount;loc;comment;code
false;public;0;43;;public void testStartedShardsMatching() {     AllocationService allocation = createAllocationService().     logger.info("--> building initial cluster state").     AllocationId allocationId = AllocationId.newRelocation(AllocationId.newInitializing()).     final IndexMetaData indexMetaData = IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(2).numberOfReplicas(0).putInSyncAllocationIds(1, Collections.singleton(allocationId.getId())).build().     final Index index = indexMetaData.getIndex().     ClusterState.Builder stateBuilder = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).nodes(DiscoveryNodes.builder().add(newNode("node1")).add(newNode("node2"))).metaData(MetaData.builder().put(indexMetaData, false)).     final ShardRouting initShard = TestShardRouting.newShardRouting(new ShardId(index, 0), "node1", true, ShardRoutingState.INITIALIZING).     final ShardRouting relocatingShard = TestShardRouting.newShardRouting(new ShardId(index, 1), "node1", "node2", true, ShardRoutingState.RELOCATING, allocationId).     stateBuilder.routingTable(RoutingTable.builder().add(IndexRoutingTable.builder(index).addIndexShard(new IndexShardRoutingTable.Builder(initShard.shardId()).addShard(initShard).build()).addIndexShard(new IndexShardRoutingTable.Builder(relocatingShard.shardId()).addShard(relocatingShard).build())).build()).     ClusterState state = stateBuilder.build().     logger.info("--> test starting of shard").     ClusterState newState = allocation.applyStartedShards(state, Arrays.asList(initShard)).     assertThat("failed to start " + initShard + "\ncurrent routing table:" + newState.routingTable(), newState, not(equalTo(state))).     assertTrue(initShard + "isn't started \ncurrent routing table:" + newState.routingTable(), newState.routingTable().index("test").shard(initShard.id()).allShardsStarted()).     state = newState.     logger.info("--> testing starting of relocating shards").     newState = allocation.applyStartedShards(state, Arrays.asList(relocatingShard.getTargetRelocatingShard())).     assertThat("failed to start " + relocatingShard + "\ncurrent routing table:" + newState.routingTable(), newState, not(equalTo(state))).     ShardRouting shardRouting = newState.routingTable().index("test").shard(relocatingShard.id()).getShards().get(0).     assertThat(shardRouting.state(), equalTo(ShardRoutingState.STARTED)).     assertThat(shardRouting.currentNodeId(), equalTo("node2")).     assertThat(shardRouting.relocatingNodeId(), nullValue()). }
false;public;0;65;;public void testRelocatingPrimariesWithInitializingReplicas() {     AllocationService allocation = createAllocationService().     logger.info("--> building initial cluster state").     AllocationId primaryId = AllocationId.newRelocation(AllocationId.newInitializing()).     AllocationId replicaId = AllocationId.newInitializing().     boolean relocatingReplica = randomBoolean().     if (relocatingReplica) {         replicaId = AllocationId.newRelocation(replicaId).     }     final IndexMetaData indexMetaData = IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1).putInSyncAllocationIds(0, relocatingReplica ? Sets.newHashSet(primaryId.getId(), replicaId.getId()) : Sets.newHashSet(primaryId.getId())).build().     final Index index = indexMetaData.getIndex().     ClusterState.Builder stateBuilder = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).nodes(DiscoveryNodes.builder().add(newNode("node1")).add(newNode("node2")).add(newNode("node3")).add(newNode("node4"))).metaData(MetaData.builder().put(indexMetaData, false)).     final ShardRouting relocatingPrimary = TestShardRouting.newShardRouting(new ShardId(index, 0), "node1", "node2", true, ShardRoutingState.RELOCATING, primaryId).     final ShardRouting replica = TestShardRouting.newShardRouting(new ShardId(index, 0), "node3", relocatingReplica ? "node4" : null, false, relocatingReplica ? ShardRoutingState.RELOCATING : ShardRoutingState.INITIALIZING, replicaId).     stateBuilder.routingTable(RoutingTable.builder().add(IndexRoutingTable.builder(index).addIndexShard(new IndexShardRoutingTable.Builder(relocatingPrimary.shardId()).addShard(relocatingPrimary).addShard(replica).build())).build()).     ClusterState state = stateBuilder.build().     logger.info("--> test starting of relocating primary shard with initializing / relocating replica").     ClusterState newState = allocation.applyStartedShards(state, Arrays.asList(relocatingPrimary.getTargetRelocatingShard())).     assertNotEquals(newState, state).     assertTrue(newState.routingTable().index("test").allPrimaryShardsActive()).     ShardRouting startedReplica = newState.routingTable().index("test").shard(0).replicaShards().get(0).     if (relocatingReplica) {         assertTrue(startedReplica.relocating()).         assertEquals(replica.currentNodeId(), startedReplica.currentNodeId()).         assertEquals(replica.relocatingNodeId(), startedReplica.relocatingNodeId()).         assertEquals(replica.allocationId().getId(), startedReplica.allocationId().getId()).         assertNotEquals(replica.allocationId().getRelocationId(), startedReplica.allocationId().getRelocationId()).     } else {         assertTrue(startedReplica.initializing()).         assertEquals(replica.currentNodeId(), startedReplica.currentNodeId()).         assertNotEquals(replica.allocationId().getId(), startedReplica.allocationId().getId()).     }     logger.info("--> test starting of relocating primary shard together with initializing / relocating replica").     List<ShardRouting> startedShards = new ArrayList<>().     startedShards.add(relocatingPrimary.getTargetRelocatingShard()).     startedShards.add(relocatingReplica ? replica.getTargetRelocatingShard() : replica).     Collections.shuffle(startedShards, random()).     newState = allocation.applyStartedShards(state, startedShards).     assertNotEquals(newState, state).     assertTrue(newState.routingTable().index("test").shard(0).allShardsStarted()). }
