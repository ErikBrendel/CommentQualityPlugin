commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     return Collections.singleton(ScriptedTimeoutPlugin.class). }
false;protected;1;4;;@Override protected Settings nodeSettings(int nodeOrdinal) {     return Settings.builder().put(super.nodeSettings(nodeOrdinal)).build(). }
false;public;0;13;;public void testSimpleTimeout() throws Exception {     for (int i = 0. i < 32. i++) {         client().prepareIndex("test", "type", Integer.toString(i)).setSource("field", "value").get().     }     refresh("test").     SearchResponse searchResponse = client().prepareSearch("test").setTimeout(new TimeValue(10, TimeUnit.MILLISECONDS)).setQuery(scriptQuery(new Script(ScriptType.INLINE, "mockscript", SCRIPT_NAME, Collections.emptyMap()))).setAllowPartialSearchResults(true).get().     assertThat(searchResponse.isTimedOut(), equalTo(true)). }
false;public;0;12;;public void testPartialResultsIntolerantTimeout() throws Exception {     client().prepareIndex("test", "type", "1").setSource("field", "value").setRefreshPolicy(IMMEDIATE).get().     ElasticsearchException ex = expectThrows(ElasticsearchException.class, () -> client().prepareSearch("test").setTimeout(new TimeValue(10, TimeUnit.MILLISECONDS)).setQuery(scriptQuery(new Script(ScriptType.INLINE, "mockscript", SCRIPT_NAME, Collections.emptyMap()))).setAllowPartialSearchResults(// this line causes timeouts to report failures     false).get()).     assertTrue(ex.toString().contains("Time exceeded")). }
false;public;0;11;;@Override public Map<String, Function<Map<String, Object>, Object>> pluginScripts() {     return Collections.singletonMap(SCRIPT_NAME, params -> {         try {             Thread.sleep(500).         } catch (InterruptedException e) {             throw new RuntimeException(e).         }         return true.     }). }
