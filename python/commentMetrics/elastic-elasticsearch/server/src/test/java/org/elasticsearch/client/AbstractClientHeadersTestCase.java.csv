commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Override public void setUp() throws Exception {     super.setUp().     Settings settings = Settings.builder().put(HEADER_SETTINGS).put("path.home", createTempDir().toString()).put("node.name", "test-" + getTestName()).put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).build().     threadPool = new ThreadPool(settings).     client = buildClient(settings, ACTIONS). }
false;public;0;6;;@Override public void tearDown() throws Exception {     super.tearDown().     client.close().     terminate(threadPool). }
false;protected,abstract;2;1;;protected abstract Client buildClient(Settings headersSettings, Action<?>[] testedActions).
false;public;0;29;;public void testActions() {     // TODO this is a really shitty way to test it, we need to figure out a way to test all the client methods     // without specifying each one (reflection doesn't as each action needs its own special settings, without     // them, request validation will fail before the test is executed. (one option is to enable disabling the     // validation in the settings??? - ugly and conceptually wrong)     // choosing arbitrary top level actions to test     client.prepareGet("idx", "type", "id").execute(new AssertingActionListener<>(GetAction.NAME, client.threadPool())).     client.prepareSearch().execute(new AssertingActionListener<>(SearchAction.NAME, client.threadPool())).     client.prepareDelete("idx", "type", "id").execute(new AssertingActionListener<>(DeleteAction.NAME, client.threadPool())).     client.admin().cluster().prepareDeleteStoredScript("id").execute(new AssertingActionListener<>(DeleteStoredScriptAction.NAME, client.threadPool())).     client.prepareIndex("idx", "type", "id").setSource("source", XContentType.JSON).execute(new AssertingActionListener<>(IndexAction.NAME, client.threadPool())).     // choosing arbitrary cluster admin actions to test     client.admin().cluster().prepareClusterStats().execute(new AssertingActionListener<>(ClusterStatsAction.NAME, client.threadPool())).     client.admin().cluster().prepareCreateSnapshot("repo", "bck").execute(new AssertingActionListener<>(CreateSnapshotAction.NAME, client.threadPool())).     client.admin().cluster().prepareReroute().execute(new AssertingActionListener<>(ClusterRerouteAction.NAME, client.threadPool())).     // choosing arbitrary indices admin actions to test     client.admin().indices().prepareCreate("idx").execute(new AssertingActionListener<>(CreateIndexAction.NAME, client.threadPool())).     client.admin().indices().prepareStats().execute(new AssertingActionListener<>(IndicesStatsAction.NAME, client.threadPool())).     client.admin().indices().prepareClearCache("idx1", "idx2").execute(new AssertingActionListener<>(ClearIndicesCacheAction.NAME, client.threadPool())).     client.admin().indices().prepareFlush().execute(new AssertingActionListener<>(FlushAction.NAME, client.threadPool())). }
false;public;0;15;;public void testOverrideHeader() throws Exception {     String key1Val = randomAlphaOfLength(5).     Map<String, String> expected = new HashMap<>().     expected.put("key1", key1Val).     expected.put("key2", "val 2").     client.threadPool().getThreadContext().putHeader("key1", key1Val).     client.prepareGet("idx", "type", "id").execute(new AssertingActionListener<>(GetAction.NAME, expected, client.threadPool())).     client.admin().cluster().prepareClusterStats().execute(new AssertingActionListener<>(ClusterStatsAction.NAME, expected, client.threadPool())).     client.admin().indices().prepareCreate("idx").execute(new AssertingActionListener<>(CreateIndexAction.NAME, expected, client.threadPool())). }
false;protected,static;2;9;;protected static void assertHeaders(Map<String, String> headers, Map<String, String> expected) {     assertNotNull(headers).     headers = new HashMap<>(headers).     // default header on TPC     headers.remove("transport_client").     assertEquals(expected.size(), headers.size()).     for (Map.Entry<String, String> expectedEntry : expected.entrySet()) {         assertEquals(headers.get(expectedEntry.getKey()), expectedEntry.getValue()).     } }
false;protected,static;1;5;;protected static void assertHeaders(ThreadPool pool) {     Settings asSettings = HEADER_SETTINGS.getAsSettings(ThreadContext.PREFIX).     assertHeaders(pool.getThreadContext().getHeaders(), asSettings.keySet().stream().collect(Collectors.toMap(Function.identity(), k -> asSettings.get(k)))). }
false;public;1;4;;@Override public void onResponse(T t) {     fail("an internal exception was expected for action [" + action + "]"). }
false;public;1;8;;@Override public void onFailure(Exception t) {     Throwable e = unwrap(t, InternalException.class).     assertThat("expected action [" + action + "] to throw an internal exception", e, notNullValue()).     assertThat(action, equalTo(((InternalException) e).action)).     Map<String, String> headers = pool.getThreadContext().getHeaders().     assertHeaders(headers, expectedHeaders). }
false;public;2;19;;public Throwable unwrap(Throwable t, Class<? extends Throwable> exceptionType) {     int counter = 0.     Throwable result = t.     while (!exceptionType.isInstance(result)) {         if (result.getCause() == null) {             return null.         }         if (result.getCause() == result) {             return null.         }         if (counter++ > 10) {             // dear god, if we got more than 10 levels down, WTF? just bail             fail("Exception cause unwrapping ran for 10 levels: " + ExceptionsHelper.stackTrace(t)).             return null.         }         result = result.getCause().     }     return result. }
