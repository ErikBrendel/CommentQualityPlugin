commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     return Arrays.asList(IngestTestPlugin.class). }
false;public;0;11;;public void testBulkIndexCreatesMapping() throws Exception {     String bulkAction = copyToStringFromClasspath("/org/elasticsearch/action/bulk/bulk-log.json").     BulkRequestBuilder bulkBuilder = client().prepareBulk().     bulkBuilder.add(bulkAction.getBytes(StandardCharsets.UTF_8), 0, bulkAction.length(), null, XContentType.JSON).     bulkBuilder.get().     assertBusy(() -> {         GetMappingsResponse mappingsResponse = client().admin().indices().prepareGetMappings().get().         assertTrue(mappingsResponse.getMappings().containsKey("logstash-2014.03.30")).         assertTrue(mappingsResponse.getMappings().get("logstash-2014.03.30").containsKey("logs")).     }). }
true;public;0;29;/**  * This tests that the {@link TransportBulkAction} evaluates alias routing values correctly when dealing with  * an alias pointing to multiple indices, while a write index exits.  */ ;/**  * This tests that the {@link TransportBulkAction} evaluates alias routing values correctly when dealing with  * an alias pointing to multiple indices, while a write index exits.  */ public void testBulkWithWriteIndexAndRouting() {     Map<String, Integer> twoShardsSettings = Collections.singletonMap(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 2).     client().admin().indices().prepareCreate("index1").addAlias(new Alias("alias1").indexRouting("0")).setSettings(twoShardsSettings).get().     client().admin().indices().prepareCreate("index2").addAlias(new Alias("alias1").indexRouting("0").writeIndex(randomFrom(false, null))).setSettings(twoShardsSettings).get().     client().admin().indices().prepareCreate("index3").addAlias(new Alias("alias1").indexRouting("1").writeIndex(true)).setSettings(twoShardsSettings).get().     IndexRequest indexRequestWithAlias = new IndexRequest("alias1", "type", "id").     if (randomBoolean()) {         indexRequestWithAlias.routing("1").     }     indexRequestWithAlias.source(Collections.singletonMap("foo", "baz")).     BulkResponse bulkResponse = client().prepareBulk().add(indexRequestWithAlias).get().     assertThat(bulkResponse.getItems()[0].getResponse().getIndex(), equalTo("index3")).     assertThat(bulkResponse.getItems()[0].getResponse().getShardId().getId(), equalTo(0)).     assertThat(bulkResponse.getItems()[0].getResponse().getVersion(), equalTo(1L)).     assertThat(bulkResponse.getItems()[0].getResponse().status(), equalTo(RestStatus.CREATED)).     assertThat(client().prepareGet("index3", "type", "id").setRouting("1").get().getSource().get("foo"), equalTo("baz")).     bulkResponse = client().prepareBulk().add(client().prepareUpdate("alias1", "type", "id").setDoc("foo", "updated")).get().     assertFalse(bulkResponse.buildFailureMessage(), bulkResponse.hasFailures()).     assertThat(client().prepareGet("index3", "type", "id").setRouting("1").get().getSource().get("foo"), equalTo("updated")).     bulkResponse = client().prepareBulk().add(client().prepareDelete("alias1", "type", "id")).get().     assertFalse(bulkResponse.buildFailureMessage(), bulkResponse.hasFailures()).     assertFalse(client().prepareGet("index3", "type", "id").setRouting("1").get().isExists()). }
false;public;0;25;;public void testBulkWithGlobalDefaults() throws Exception {     // all requests in the json are missing index and type parameters: "_index" : "test", "_type" : "type1",     String bulkAction = copyToStringFromClasspath("/org/elasticsearch/action/bulk/simple-bulk-missing-index-type.json").     {         BulkRequestBuilder bulkBuilder = client().prepareBulk().         bulkBuilder.add(bulkAction.getBytes(StandardCharsets.UTF_8), 0, bulkAction.length(), null, XContentType.JSON).         ActionRequestValidationException ex = expectThrows(ActionRequestValidationException.class, bulkBuilder::get).         assertThat(ex.validationErrors(), containsInAnyOrder("index is missing", "index is missing", "index is missing")).     }     {         createSamplePipeline("pipeline").         BulkRequestBuilder bulkBuilder = client().prepareBulk("test", "type1").routing("routing").pipeline("pipeline").         bulkBuilder.add(bulkAction.getBytes(StandardCharsets.UTF_8), 0, bulkAction.length(), null, XContentType.JSON).         BulkResponse bulkItemResponses = bulkBuilder.get().         assertFalse(bulkItemResponses.hasFailures()).     } }
false;private;1;18;;private void createSamplePipeline(String pipelineId) throws IOException, ExecutionException, InterruptedException {     XContentBuilder pipeline = jsonBuilder().startObject().startArray("processors").startObject().startObject("test").endObject().endObject().endArray().endObject().     AcknowledgedResponse acknowledgedResponse = client().admin().cluster().putPipeline(new PutPipelineRequest(pipelineId, BytesReference.bytes(pipeline), XContentType.JSON)).get().     assertTrue(acknowledgedResponse.isAcknowledged()). }
