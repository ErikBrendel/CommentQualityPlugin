commented;modifiers;parameterAmount;loc;comment;code
true;protected,abstract;0;1;/**  * Generate a random precision according to the rules of the given aggregation.  */ ;/**  * Generate a random precision according to the rules of the given aggregation.  */ protected abstract int randomPrecision().
true;protected,abstract;3;1;/**  * Convert geo point into a hash string (bucket string ID)  */ ;/**  * Convert geo point into a hash string (bucket string ID)  */ protected abstract String hashAsString(double lng, double lat, int precision).
true;protected,abstract;1;1;/**  * Create a new named {@link GeoGridAggregationBuilder}-derived builder  */ ;/**  * Create a new named {@link GeoGridAggregationBuilder}-derived builder  */ protected abstract GeoGridAggregationBuilder createBuilder(String name).
false;public;0;7;;public void testNoDocs() throws IOException {     testCase(new MatchAllDocsQuery(), FIELD_NAME, randomPrecision(), iw -> {     // Intentionally not writing any docs     }, geoGrid -> {         assertEquals(0, geoGrid.getBuckets().size()).     }). }
false;public;0;7;;public void testFieldMissing() throws IOException {     testCase(new MatchAllDocsQuery(), "wrong_field", randomPrecision(), iw -> {         iw.addDocument(Collections.singleton(new LatLonDocValuesField(FIELD_NAME, 10D, 10D))).     }, geoGrid -> {         assertEquals(0, geoGrid.getBuckets().size()).     }). }
false;public;0;41;;public void testWithSeveralDocs() throws IOException {     int precision = randomPrecision().     int numPoints = randomIntBetween(8, 128).     Map<String, Integer> expectedCountPerGeoHash = new HashMap<>().     testCase(new MatchAllDocsQuery(), FIELD_NAME, precision, iw -> {         List<LatLonDocValuesField> points = new ArrayList<>().         Set<String> distinctHashesPerDoc = new HashSet<>().         for (int pointId = 0. pointId < numPoints. pointId++) {             double lat = (180d * randomDouble()) - 90d.             double lng = (360d * randomDouble()) - 180d.             // Precision-adjust longitude/latitude to avoid wrong bucket placement             // Internally, lat/lng get converted to 32 bit integers, loosing some precision.             // This does not affect geohashing because geohash uses the same algorithm,             // but it does affect other bucketing algos, thus we need to do the same steps here.             lng = GeoEncodingUtils.decodeLongitude(GeoEncodingUtils.encodeLongitude(lng)).             lat = GeoEncodingUtils.decodeLatitude(GeoEncodingUtils.encodeLatitude(lat)).             points.add(new LatLonDocValuesField(FIELD_NAME, lat, lng)).             String hash = hashAsString(lng, lat, precision).             if (distinctHashesPerDoc.contains(hash) == false) {                 expectedCountPerGeoHash.put(hash, expectedCountPerGeoHash.getOrDefault(hash, 0) + 1).             }             distinctHashesPerDoc.add(hash).             if (usually()) {                 iw.addDocument(points).                 points.clear().                 distinctHashesPerDoc.clear().             }         }         if (points.size() != 0) {             iw.addDocument(points).         }     }, geoHashGrid -> {         assertEquals(expectedCountPerGeoHash.size(), geoHashGrid.getBuckets().size()).         for (GeoGrid.Bucket bucket : geoHashGrid.getBuckets()) {             assertEquals((long) expectedCountPerGeoHash.get(bucket.getKeyAsString()), bucket.getDocCount()).         }         assertTrue(AggregationInspectionHelper.hasValue(geoHashGrid)).     }). }
false;private;5;25;;private void testCase(Query query, String field, int precision, CheckedConsumer<RandomIndexWriter, IOException> buildIndex, Consumer<InternalGeoGrid<T>> verify) throws IOException {     Directory directory = newDirectory().     RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory).     buildIndex.accept(indexWriter).     indexWriter.close().     IndexReader indexReader = DirectoryReader.open(directory).     IndexSearcher indexSearcher = newSearcher(indexReader, true, true).     GeoGridAggregationBuilder aggregationBuilder = createBuilder("_name").field(field).     aggregationBuilder.precision(precision).     MappedFieldType fieldType = new GeoPointFieldMapper.GeoPointFieldType().     fieldType.setHasDocValues(true).     fieldType.setName(FIELD_NAME).     Aggregator aggregator = createAggregator(aggregationBuilder, indexSearcher, fieldType).     aggregator.preCollection().     indexSearcher.search(query, aggregator).     aggregator.postCollection().     verify.accept((InternalGeoGrid<T>) aggregator.buildAggregation(0L)).     indexReader.close().     directory.close(). }
