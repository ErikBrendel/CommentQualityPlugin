commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;public void testMatchNoDocs() throws IOException {     int numDocs = randomIntBetween(10, 200).     testBothCases(numDocs, "field", Queries.newMatchAllQuery(), doc -> doc.add(new SortedNumericDocValuesField("field", randomLong())), internalMissing -> {         assertEquals(internalMissing.getDocCount(), 0).         assertFalse(AggregationInspectionHelper.hasValue(internalMissing)).     }). }
false;public;0;11;;public void testMatchAllDocs() throws IOException {     int numDocs = randomIntBetween(10, 200).     testBothCases(numDocs, "field", Queries.newMatchAllQuery(), doc -> doc.add(new SortedNumericDocValuesField("another_field", randomLong())), internalMissing -> {         assertEquals(internalMissing.getDocCount(), numDocs).         assertTrue(AggregationInspectionHelper.hasValue(internalMissing)).     }). }
false;public;0;20;;public void testMatchSparse() throws IOException {     int numDocs = randomIntBetween(100, 200).     final AtomicInteger count = new AtomicInteger().     testBothCases(numDocs, "field", Queries.newMatchAllQuery(), doc -> {         if (randomBoolean()) {             doc.add(new SortedNumericDocValuesField("another_field", randomLong())).             count.incrementAndGet().         } else {             doc.add(new SortedNumericDocValuesField("field", randomLong())).         }     }, internalMissing -> {         assertEquals(internalMissing.getDocCount(), count.get()).         count.set(0).         assertTrue(AggregationInspectionHelper.hasValue(internalMissing)).     }). }
false;public;0;13;;public void testMissingField() throws IOException {     int numDocs = randomIntBetween(10, 20).     testBothCases(numDocs, "unknown_field", Queries.newMatchAllQuery(), doc -> {         doc.add(new SortedNumericDocValuesField("field", randomLong())).     }, internalMissing -> {         assertEquals(internalMissing.getDocCount(), numDocs).         assertTrue(AggregationInspectionHelper.hasValue(internalMissing)).     }). }
false;private;5;9;;private void testBothCases(int numDocs, String fieldName, Query query, Consumer<Document> consumer, Consumer<InternalMissing> verify) throws IOException {     executeTestCase(numDocs, fieldName, query, consumer, verify, false).     executeTestCase(numDocs, fieldName, query, consumer, verify, true). }
false;private;6;42;;private void executeTestCase(int numDocs, String fieldName, Query query, Consumer<Document> consumer, Consumer<InternalMissing> verify, boolean reduced) throws IOException {     try (Directory directory = newDirectory()) {         try (RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory)) {             Document document = new Document().             for (int i = 0. i < numDocs. i++) {                 if (frequently()) {                     indexWriter.commit().                 }                 consumer.accept(document).                 indexWriter.addDocument(document).                 document.clear().             }         }         try (IndexReader indexReader = DirectoryReader.open(directory)) {             IndexSearcher indexSearcher = newSearcher(indexReader, true, true).             MissingAggregationBuilder builder = new MissingAggregationBuilder("_name", ValueType.LONG).             builder.field(fieldName).             NumberFieldMapper.Builder mapperBuilder = new NumberFieldMapper.Builder("_name", NumberFieldMapper.NumberType.LONG).             MappedFieldType fieldType = mapperBuilder.fieldType().             fieldType.setHasDocValues(true).             fieldType.setName(builder.field()).             InternalMissing missing.             if (reduced) {                 missing = searchAndReduce(indexSearcher, query, builder, fieldType).             } else {                 missing = search(indexSearcher, query, builder, fieldType).             }             verify.accept(missing).         }     } }
