commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected String fieldName() {     return "float_range_dv_field". }
false;protected;0;4;;@Override protected RangeFieldMapper.RangeType rangeType() {     return RangeFieldMapper.RangeType.FLOAT. }
false;protected;1;8;;@Override protected Range nextRange(int dimensions) throws Exception {     float value1 = nextFloatInternal().     float value2 = nextFloatInternal().     float min = Math.min(value1, value2).     float max = Math.max(value1, value2).     return new FloatTestRange(min, max). }
false;private;0;14;;private float nextFloatInternal() {     switch(random().nextInt(5)) {         case 0:             return Float.NEGATIVE_INFINITY.         case 1:             return Float.POSITIVE_INFINITY.         default:             if (random().nextBoolean()) {                 return random().nextFloat().             } else {                 return (random().nextInt(15) - 7) / 3f.             }     } }
false;public;0;4;;@Override public Float getMin() {     return min. }
false;protected;2;10;;@Override protected void setMin(int dim, Object val) {     assert dim == 0.     float v = (Float) val.     if (min < v) {         max = v.     } else {         min = v.     } }
false;public;0;4;;@Override public Float getMax() {     return max. }
false;protected;2;10;;@Override protected void setMax(int dim, Object val) {     assert dim == 0.     float v = (Float) val.     if (max > v) {         min = v.     } else {         max = v.     } }
false;protected;1;5;;@Override protected boolean isDisjoint(Range o) {     FloatTestRange other = (FloatTestRange) o.     return this.min > other.max || this.max < other.min. }
false;protected;1;9;;@Override protected boolean isWithin(Range o) {     FloatTestRange other = (FloatTestRange) o.     if ((this.min >= other.min && this.max <= other.max) == false) {         // not within:         return false.     }     return true. }
false;protected;1;9;;@Override protected boolean contains(Range o) {     FloatTestRange other = (FloatTestRange) o.     if ((this.min <= other.min && this.max >= other.max) == false) {         // not contains:         return false.     }     return true. }
