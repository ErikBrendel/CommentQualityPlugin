commented;modifiers;parameterAmount;loc;comment;code
false;public;0;63;;public void testMetaDataSetOnAggregationResult() throws Exception {     assertAcked(client().admin().indices().prepareCreate("idx").addMapping("type", "name", "type=keyword").get()).     IndexRequestBuilder[] builders = new IndexRequestBuilder[randomInt(30)].     for (int i = 0. i < builders.length. i++) {         String name = "name_" + randomIntBetween(1, 10).         builders[i] = client().prepareIndex("idx", "type").setSource(jsonBuilder().startObject().field("name", name).field("value", randomInt()).endObject()).     }     indexRandom(true, builders).     ensureSearchable().     final Map<String, Object> nestedMetaData = new HashMap<String, Object>() {          {             put("nested", "value").         }     }.     Map<String, Object> metaData = new HashMap<String, Object>() {          {             put("key", "value").             put("numeric", 1.2).             put("bool", true).             put("complex", nestedMetaData).         }     }.     SearchResponse response = client().prepareSearch("idx").addAggregation(terms("the_terms").setMetaData(metaData).field("name").subAggregation(sum("the_sum").setMetaData(metaData).field("value"))).addAggregation(maxBucket("the_max_bucket", "the_terms>the_sum").setMetaData(metaData)).get().     assertSearchResponse(response).     Aggregations aggs = response.getAggregations().     assertNotNull(aggs).     Terms terms = aggs.get("the_terms").     assertNotNull(terms).     assertMetaData(terms.getMetaData()).     List<? extends Terms.Bucket> buckets = terms.getBuckets().     for (Terms.Bucket bucket : buckets) {         Aggregations subAggs = bucket.getAggregations().         assertNotNull(subAggs).         Sum sum = subAggs.get("the_sum").         assertNotNull(sum).         assertMetaData(sum.getMetaData()).     }     InternalBucketMetricValue maxBucket = aggs.get("the_max_bucket").     assertNotNull(maxBucket).     assertMetaData(maxBucket.getMetaData()). }
false;private;1;13;;private void assertMetaData(Map<String, Object> returnedMetaData) {     assertNotNull(returnedMetaData).     assertEquals(4, returnedMetaData.size()).     assertEquals("value", returnedMetaData.get("key")).     assertEquals(1.2, returnedMetaData.get("numeric")).     assertEquals(true, returnedMetaData.get("bool")).     Object nestedObject = returnedMetaData.get("complex").     assertNotNull(nestedObject).     Map<String, Object> nestedMap = (Map<String, Object>) nestedObject.     assertEquals("value", nestedMap.get("nested")). }
