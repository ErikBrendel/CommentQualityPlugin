commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     return Collections.singleton(InternalOrPrivateSettingsPlugin.class). }
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> transportClientPlugins() {     return Collections.singletonList(InternalOrPrivateSettingsPlugin.class). }
false;public;0;6;;public void testSetInternalIndexSettingOnCreate() {     final Settings settings = Settings.builder().put("index.internal", "internal").build().     createIndex("index", settings).     final GetSettingsResponse response = client().admin().indices().prepareGetSettings("index").get().     assertThat(response.getSetting("index", "index.internal"), equalTo("internal")). }
false;public;0;17;;public void testUpdateInternalIndexSettingViaSettingsAPI() {     final Settings settings = Settings.builder().put("index.internal", "internal").build().     createIndex("test", settings).     final GetSettingsResponse response = client().admin().indices().prepareGetSettings("test").get().     assertThat(response.getSetting("test", "index.internal"), equalTo("internal")).     // we can not update the setting via the update settings API     final IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().put("index.internal", "internal-update")).get()).     final String message = "can not update internal setting [index.internal]. this setting is managed via a dedicated API".     assertThat(e, hasToString(containsString(message))).     final GetSettingsResponse responseAfterAttemptedUpdate = client().admin().indices().prepareGetSettings("test").get().     assertThat(responseAfterAttemptedUpdate.getSetting("test", "index.internal"), equalTo("internal")). }
false;public;0;12;;public void testUpdateInternalIndexSettingViaDedicatedAPI() {     final Settings settings = Settings.builder().put("index.internal", "internal").build().     createIndex("test", settings).     final GetSettingsResponse response = client().admin().indices().prepareGetSettings("test").get().     assertThat(response.getSetting("test", "index.internal"), equalTo("internal")).     client().execute(InternalOrPrivateSettingsPlugin.UpdateInternalOrPrivateAction.INSTANCE, new InternalOrPrivateSettingsPlugin.UpdateInternalOrPrivateAction.Request("test", "index.internal", "internal-update")).actionGet().     final GetSettingsResponse responseAfterUpdate = client().admin().indices().prepareGetSettings("test").get().     assertThat(responseAfterUpdate.getSetting("test", "index.internal"), equalTo("internal-update")). }
