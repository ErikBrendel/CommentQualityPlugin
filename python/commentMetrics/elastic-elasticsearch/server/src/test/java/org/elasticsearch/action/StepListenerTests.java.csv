commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setUpThreadPool() {     threadPool = new TestThreadPool(getTestName()). }
false;public;0;4;;@After public void tearDownThreadPool() {     terminate(threadPool). }
false;public;0;16;;public void testSimpleSteps() throws Exception {     CountDownLatch latch = new CountDownLatch(1).     Consumer<Exception> onFailure = e -> {         latch.countDown().         fail("test a happy path").     }.     // [a]sync provide a string     StepListener<String> step1 = new StepListener<>().     executeAction(() -> step1.onResponse("hello")).     // [a]sync calculate the length of the string     StepListener<Integer> step2 = new StepListener<>().     step1.whenComplete(str -> executeAction(() -> step2.onResponse(str.length())), onFailure).     step2.whenComplete(length -> executeAction(latch::countDown), onFailure).     latch.await().     assertThat(step1.result(), equalTo("hello")).     assertThat(step2.result(), equalTo(5)). }
false;public;0;41;;public void testAbortOnFailure() throws Exception {     CountDownLatch latch = new CountDownLatch(1).     int failedStep = randomBoolean() ? 1 : 2.     AtomicInteger failureNotified = new AtomicInteger().     Consumer<Exception> onFailure = e -> {         failureNotified.getAndIncrement().         latch.countDown().         assertThat(e.getMessage(), equalTo("failed at step " + failedStep)).     }.     // [a]sync provide a string     StepListener<String> step1 = new StepListener<>().     if (failedStep == 1) {         executeAction(() -> step1.onFailure(new RuntimeException("failed at step 1"))).     } else {         executeAction(() -> step1.onResponse("hello")).     }     // [a]sync calculate the length of the string     StepListener<Integer> step2 = new StepListener<>().     step1.whenComplete(str -> {         if (failedStep == 2) {             executeAction(() -> step2.onFailure(new RuntimeException("failed at step 2"))).         } else {             executeAction(() -> step2.onResponse(str.length())).         }     }, onFailure).     step2.whenComplete(length -> latch.countDown(), onFailure).     latch.await().     assertThat(failureNotified.get(), equalTo(1)).     if (failedStep == 1) {         assertThat(expectThrows(RuntimeException.class, step1::result).getMessage(), equalTo("failed at step 1")).         assertThat(expectThrows(RuntimeException.class, step2::result).getMessage(), equalTo("step is not completed yet")).     } else {         assertThat(step1.result(), equalTo("hello")).         assertThat(expectThrows(RuntimeException.class, step2::result).getMessage(), equalTo("failed at step 2")).     } }
false;private;1;7;;private void executeAction(Runnable runnable) {     if (randomBoolean()) {         threadPool.generic().execute(runnable).     } else {         runnable.run().     } }
