commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;public void testPositionIncrementSetting() throws IOException {     Builder builder = Settings.builder().put("index.analysis.filter.my_stop.type", "stop").put("index.analysis.filter.my_stop.enable_position_increments", false).     if (random().nextBoolean()) {         builder.put("index.analysis.filter.my_stop.version", "5.0").     }     builder.put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).     Settings settings = builder.build().     try {         AnalysisTestsHelper.createTestAnalysisFromSettings(settings).         fail("Expected IllegalArgumentException").     } catch (IllegalArgumentException e) {         assertThat(e.getMessage(), containsString("enable_position_increments is not supported anymore")).     } }
false;public;0;16;;public void testCorrectPositionIncrementSetting() throws IOException {     Builder builder = Settings.builder().put("index.analysis.filter.my_stop.type", "stop").     if (random().nextBoolean()) {         builder.put("index.analysis.filter.my_stop.version", Version.LATEST).     } else {     // don't specify     }     builder.put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).     ESTestCase.TestAnalysis analysis = AnalysisTestsHelper.createTestAnalysisFromSettings(builder.build()).     TokenFilterFactory tokenFilter = analysis.tokenFilter.get("my_stop").     assertThat(tokenFilter, instanceOf(StopTokenFilterFactory.class)).     Tokenizer tokenizer = new WhitespaceTokenizer().     tokenizer.setReader(new StringReader("foo bar")).     TokenStream create = tokenFilter.create(tokenizer).     assertThat(create, instanceOf(StopFilter.class)). }
false;public;0;14;;public void testThatSuggestStopFilterWorks() throws Exception {     Settings settings = Settings.builder().put("index.analysis.filter.my_stop.type", "stop").put("index.analysis.filter.my_stop.remove_trailing", false).put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).build().     ESTestCase.TestAnalysis analysis = AnalysisTestsHelper.createTestAnalysisFromSettings(settings).     TokenFilterFactory tokenFilter = analysis.tokenFilter.get("my_stop").     assertThat(tokenFilter, instanceOf(StopTokenFilterFactory.class)).     Tokenizer tokenizer = new WhitespaceTokenizer().     tokenizer.setReader(new StringReader("foo an")).     TokenStream create = tokenFilter.create(tokenizer).     assertThat(create, instanceOf(SuggestStopFilter.class)). }
