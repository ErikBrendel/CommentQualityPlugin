commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Before public void createConnectionManager() {     Settings settings = Settings.builder().put("node.name", ConnectionManagerTests.class.getSimpleName()).build().     threadPool = new ThreadPool(settings).     transport = mock(Transport.class).     connectionManager = new ConnectionManager(settings, transport).     TimeValue oneSecond = new TimeValue(1000).     TimeValue oneMinute = TimeValue.timeValueMinutes(1).     connectionProfile = ConnectionProfile.buildSingleChannelProfile(TransportRequestOptions.Type.REG, oneSecond, oneSecond, oneMinute, false). }
false;public;0;4;;@After public void stopThreadPool() {     threadPool.shutdown(). }
false;public;1;4;;@Override public void onNodeConnected(DiscoveryNode node) {     nodeConnectedCount.incrementAndGet(). }
false;public;1;4;;@Override public void onNodeDisconnected(DiscoveryNode node) {     nodeDisconnectedCount.incrementAndGet(). }
false;public;0;47;;public void testConnectAndDisconnect() {     AtomicInteger nodeConnectedCount = new AtomicInteger().     AtomicInteger nodeDisconnectedCount = new AtomicInteger().     connectionManager.addListener(new TransportConnectionListener() {          @Override         public void onNodeConnected(DiscoveryNode node) {             nodeConnectedCount.incrementAndGet().         }          @Override         public void onNodeDisconnected(DiscoveryNode node) {             nodeDisconnectedCount.incrementAndGet().         }     }).     DiscoveryNode node = new DiscoveryNode("", new TransportAddress(InetAddress.getLoopbackAddress(), 0), Version.CURRENT).     Transport.Connection connection = new TestConnect(node).     doAnswer(invocationOnMock -> {         ActionListener<Transport.Connection> listener = (ActionListener<Transport.Connection>) invocationOnMock.getArguments()[2].         listener.onResponse(connection).         return null.     }).when(transport).openConnection(eq(node), eq(connectionProfile), any(ActionListener.class)).     assertFalse(connectionManager.nodeConnected(node)).     AtomicReference<Transport.Connection> connectionRef = new AtomicReference<>().     CheckedBiConsumer<Transport.Connection, ConnectionProfile, IOException> validator = (c, p) -> connectionRef.set(c).     connectionManager.connectToNode(node, connectionProfile, validator).     assertFalse(connection.isClosed()).     assertTrue(connectionManager.nodeConnected(node)).     assertSame(connection, connectionManager.getConnection(node)).     assertEquals(1, connectionManager.size()).     assertEquals(1, nodeConnectedCount.get()).     assertEquals(0, nodeDisconnectedCount.get()).     if (randomBoolean()) {         connectionManager.disconnectFromNode(node).     } else {         connection.close().     }     assertTrue(connection.isClosed()).     assertEquals(0, connectionManager.size()).     assertEquals(1, nodeConnectedCount.get()).     assertEquals(1, nodeDisconnectedCount.get()). }
false;public;1;4;;@Override public void onNodeConnected(DiscoveryNode node) {     nodeConnectedCount.incrementAndGet(). }
false;public;1;4;;@Override public void onNodeDisconnected(DiscoveryNode node) {     nodeDisconnectedCount.incrementAndGet(). }
false;public;0;39;;public void testConnectFails() {     AtomicInteger nodeConnectedCount = new AtomicInteger().     AtomicInteger nodeDisconnectedCount = new AtomicInteger().     connectionManager.addListener(new TransportConnectionListener() {          @Override         public void onNodeConnected(DiscoveryNode node) {             nodeConnectedCount.incrementAndGet().         }          @Override         public void onNodeDisconnected(DiscoveryNode node) {             nodeDisconnectedCount.incrementAndGet().         }     }).     DiscoveryNode node = new DiscoveryNode("", new TransportAddress(InetAddress.getLoopbackAddress(), 0), Version.CURRENT).     Transport.Connection connection = new TestConnect(node).     doAnswer(invocationOnMock -> {         ActionListener<Transport.Connection> listener = (ActionListener<Transport.Connection>) invocationOnMock.getArguments()[2].         listener.onResponse(connection).         return null.     }).when(transport).openConnection(eq(node), eq(connectionProfile), any(ActionListener.class)).     assertFalse(connectionManager.nodeConnected(node)).     CheckedBiConsumer<Transport.Connection, ConnectionProfile, IOException> validator = (c, p) -> {         throw new ConnectTransportException(node, "").     }.     expectThrows(ConnectTransportException.class, () -> connectionManager.connectToNode(node, connectionProfile, validator)).     assertTrue(connection.isClosed()).     assertFalse(connectionManager.nodeConnected(node)).     expectThrows(NodeNotConnectedException.class, () -> connectionManager.getConnection(node)).     assertEquals(0, connectionManager.size()).     assertEquals(0, nodeConnectedCount.get()).     assertEquals(0, nodeDisconnectedCount.get()). }
false;public;0;4;;@Override public DiscoveryNode getNode() {     return node. }
false;public;4;5;;@Override public void sendRequest(long requestId, String action, TransportRequest request, TransportRequestOptions options) throws TransportException { }
