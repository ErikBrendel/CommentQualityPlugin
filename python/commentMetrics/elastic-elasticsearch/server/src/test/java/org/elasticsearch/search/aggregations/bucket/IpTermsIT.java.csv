commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     return Collections.singleton(CustomScriptPlugin.class). }
false;protected;0;16;;@Override protected Map<String, Function<Map<String, Object>, Object>> pluginScripts() {     Map<String, Function<Map<String, Object>, Object>> scripts = super.pluginScripts().     scripts.put("doc['ip'].value", vars -> {         Map<?, ?> doc = (Map<?, ?>) vars.get("doc").         return doc.get("ip").     }).     scripts.put("doc['ip']", vars -> {         Map<?, ?> doc = (Map<?, ?>) vars.get("doc").         return ((ScriptDocValues<?>) doc.get("ip")).get(0).     }).     return scripts. }
false;public;0;25;;public void testScriptValue() throws Exception {     assertAcked(prepareCreate("index").addMapping("type", "ip", "type=ip")).     indexRandom(true, client().prepareIndex("index", "type", "1").setSource("ip", "192.168.1.7"), client().prepareIndex("index", "type", "2").setSource("ip", "192.168.1.7"), client().prepareIndex("index", "type", "3").setSource("ip", "2001:db8::2:1")).     Script script = new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, "doc['ip'].value", Collections.emptyMap()).     SearchResponse response = client().prepareSearch("index").addAggregation(AggregationBuilders.terms("my_terms").script(script).executionHint(randomExecutionHint())).get().     assertSearchResponse(response).     Terms terms = response.getAggregations().get("my_terms").     assertEquals(2, terms.getBuckets().size()).     Terms.Bucket bucket1 = terms.getBuckets().get(0).     assertEquals(2, bucket1.getDocCount()).     assertEquals("192.168.1.7", bucket1.getKey()).     assertEquals("192.168.1.7", bucket1.getKeyAsString()).     Terms.Bucket bucket2 = terms.getBuckets().get(1).     assertEquals(1, bucket2.getDocCount()).     assertEquals("2001:db8::2:1", bucket2.getKey()).     assertEquals("2001:db8::2:1", bucket2.getKeyAsString()). }
false;public;0;25;;public void testScriptValues() throws Exception {     assertAcked(prepareCreate("index").addMapping("type", "ip", "type=ip")).     indexRandom(true, client().prepareIndex("index", "type", "1").setSource("ip", "192.168.1.7"), client().prepareIndex("index", "type", "2").setSource("ip", "192.168.1.7"), client().prepareIndex("index", "type", "3").setSource("ip", "2001:db8::2:1")).     Script script = new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, "doc['ip']", Collections.emptyMap()).     SearchResponse response = client().prepareSearch("index").addAggregation(AggregationBuilders.terms("my_terms").script(script).executionHint(randomExecutionHint())).get().     assertSearchResponse(response).     Terms terms = response.getAggregations().get("my_terms").     assertEquals(2, terms.getBuckets().size()).     Terms.Bucket bucket1 = terms.getBuckets().get(0).     assertEquals(2, bucket1.getDocCount()).     assertEquals("192.168.1.7", bucket1.getKey()).     assertEquals("192.168.1.7", bucket1.getKeyAsString()).     Terms.Bucket bucket2 = terms.getBuckets().get(1).     assertEquals(1, bucket2.getDocCount()).     assertEquals("2001:db8::2:1", bucket2.getKey()).     assertEquals("2001:db8::2:1", bucket2.getKeyAsString()). }
false;public;0;24;;public void testMissingValue() throws Exception {     assertAcked(prepareCreate("index").addMapping("type", "ip", "type=ip")).     indexRandom(true, client().prepareIndex("index", "type", "1").setSource("ip", "192.168.1.7"), client().prepareIndex("index", "type", "2").setSource("ip", "192.168.1.7"), client().prepareIndex("index", "type", "3").setSource("ip", "127.0.0.1"), client().prepareIndex("index", "type", "4").setSource("not_ip", "something")).     SearchResponse response = client().prepareSearch("index").addAggregation(AggregationBuilders.terms("my_terms").field("ip").missing("127.0.0.1").executionHint(randomExecutionHint())).get().     assertSearchResponse(response).     Terms terms = response.getAggregations().get("my_terms").     assertEquals(2, terms.getBuckets().size()).     Terms.Bucket bucket1 = terms.getBuckets().get(0).     assertEquals(2, bucket1.getDocCount()).     assertEquals("127.0.0.1", bucket1.getKey()).     assertEquals("127.0.0.1", bucket1.getKeyAsString()).     Terms.Bucket bucket2 = terms.getBuckets().get(1).     assertEquals(2, bucket2.getDocCount()).     assertEquals("192.168.1.7", bucket2.getKey()).     assertEquals("192.168.1.7", bucket2.getKeyAsString()). }
