commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected CompletionSuggestionBuilder randomSuggestionBuilder() {     return randomCompletionSuggestionBuilder(). }
false;public,static;0;62;;public static CompletionSuggestionBuilder randomCompletionSuggestionBuilder() {     // also create random CompletionSuggestionBuilder instances     if (categoryContextName == null) {         categoryContextName = randomAlphaOfLength(10).     }     if (geoQueryContextName == null) {         geoQueryContextName = randomAlphaOfLength(10).     }     if (contextMappings.isEmpty()) {         contextMappings.add(ContextBuilder.category(categoryContextName).build()).         contextMappings.add(ContextBuilder.geo(geoQueryContextName).build()).     }     // also create random CompletionSuggestionBuilder instances     if (categoryContextName == null) {         categoryContextName = randomAlphaOfLength(10).     }     if (geoQueryContextName == null) {         geoQueryContextName = randomAlphaOfLength(10).     }     if (contextMappings.isEmpty()) {         contextMappings.add(ContextBuilder.category(categoryContextName).build()).         contextMappings.add(ContextBuilder.geo(geoQueryContextName).build()).     }     CompletionSuggestionBuilder testBuilder = new CompletionSuggestionBuilder(randomAlphaOfLengthBetween(2, 20)).     setCommonPropertiesOnRandomBuilder(testBuilder).     switch(randomIntBetween(0, 3)) {         case 0:             testBuilder.prefix(randomAlphaOfLength(10)).             break.         case 1:             testBuilder.prefix(randomAlphaOfLength(10), FuzzyOptionsTests.randomFuzzyOptions()).             break.         case 2:             testBuilder.prefix(randomAlphaOfLength(10), randomFrom(Fuzziness.ZERO, Fuzziness.ONE, Fuzziness.TWO)).             break.         case 3:             testBuilder.regex(randomAlphaOfLength(10), RegexOptionsTests.randomRegexOptions()).             break.     }     Map<String, List<? extends ToXContent>> contextMap = new HashMap<>().     if (randomBoolean()) {         int numContext = randomIntBetween(1, 5).         List<CategoryQueryContext> contexts = new ArrayList<>(numContext).         for (int i = 0. i < numContext. i++) {             contexts.add(CategoryQueryContextTests.randomCategoryQueryContext()).         }         contextMap.put(categoryContextName, contexts).     }     if (randomBoolean()) {         int numContext = randomIntBetween(1, 5).         List<GeoQueryContext> contexts = new ArrayList<>(numContext).         for (int i = 0. i < numContext. i++) {             contexts.add(GeoQueryContextTests.randomGeoQueryContext()).         }         contextMap.put(geoQueryContextName, contexts).     }     testBuilder.contexts(contextMap).     testBuilder.skipDuplicates(randomBoolean()).     return testBuilder. }
true;protected;0;4;/**  * exclude the "contexts" field from recursive random shuffling in fromXContent tests or else  * the equals() test will fail because their {@link BytesReference} representation isn't the same  */ ;/**  * exclude the "contexts" field from recursive random shuffling in fromXContent tests or else  * the equals() test will fail because their {@link BytesReference} representation isn't the same  */ @Override protected String[] shuffleProtectedFields() {     return SHUFFLE_PROTECTED_FIELDS. }
false;protected;1;35;;@Override protected void mutateSpecificParameters(CompletionSuggestionBuilder builder) throws IOException {     switch(randomIntBetween(0, 5)) {         case 0:             int nCatContext = randomIntBetween(1, 5).             List<CategoryQueryContext> contexts = new ArrayList<>(nCatContext).             for (int i = 0. i < nCatContext. i++) {                 contexts.add(CategoryQueryContextTests.randomCategoryQueryContext()).             }             builder.contexts(Collections.singletonMap(randomAlphaOfLength(10), contexts)).             break.         case 1:             int nGeoContext = randomIntBetween(1, 5).             List<GeoQueryContext> geoContexts = new ArrayList<>(nGeoContext).             for (int i = 0. i < nGeoContext. i++) {                 geoContexts.add(GeoQueryContextTests.randomGeoQueryContext()).             }             builder.contexts(Collections.singletonMap(randomAlphaOfLength(10), geoContexts)).             break.         case 2:             builder.prefix(randomAlphaOfLength(10), FuzzyOptionsTests.randomFuzzyOptions()).             break.         case 3:             builder.prefix(randomAlphaOfLength(10), randomFrom(Fuzziness.ZERO, Fuzziness.ONE, Fuzziness.TWO)).             break.         case 4:             builder.regex(randomAlphaOfLength(10), RegexOptionsTests.randomRegexOptions()).             break.         case 5:             builder.skipDuplicates(!builder.skipDuplicates).             break.         default:             throw new IllegalStateException("should not through").     } }
false;protected;1;7;;@Override protected MappedFieldType mockFieldType(String fieldName) {     CompletionFieldType completionFieldType = new CompletionFieldType().     completionFieldType.setName(fieldName).     completionFieldType.setContextMappings(new ContextMappings(contextMappings)).     return completionFieldType. }
false;protected;2;18;;@Override protected void assertSuggestionContext(CompletionSuggestionBuilder builder, SuggestionContext context) throws IOException {     assertThat(context, instanceOf(CompletionSuggestionContext.class)).     assertThat(context.getSuggester(), instanceOf(CompletionSuggester.class)).     CompletionSuggestionContext completionSuggestionCtx = (CompletionSuggestionContext) context.     assertThat(completionSuggestionCtx.getFieldType(), instanceOf(CompletionFieldType.class)).     assertEquals(builder.fuzzyOptions, completionSuggestionCtx.getFuzzyOptions()).     Map<String, List<InternalQueryContext>> parsedContextBytes.     parsedContextBytes = CompletionSuggestionBuilder.parseContextBytes(builder.contextBytes, xContentRegistry(), new ContextMappings(contextMappings)).     Map<String, List<InternalQueryContext>> queryContexts = completionSuggestionCtx.getQueryContexts().     assertEquals(parsedContextBytes.keySet(), queryContexts.keySet()).     for (String contextName : queryContexts.keySet()) {         assertEquals(parsedContextBytes.get(contextName), queryContexts.get(contextName)).     }     assertEquals(builder.regexOptions, completionSuggestionCtx.getRegexOptions()).     assertEquals(builder.skipDuplicates, completionSuggestionCtx.isSkipDuplicates()). }
