commented;modifiers;parameterAmount;loc;comment;code
false;;3;14;;ReplicationTracker newTracker(final AllocationId allocationId, final LongConsumer updatedGlobalCheckpoint, final LongSupplier currentTimeMillisSupplier) {     return new ReplicationTracker(new ShardId("test", "_na_", 0), allocationId.getId(), IndexSettingsModule.newIndexSettings("test", Settings.EMPTY), randomNonNegativeLong(), UNASSIGNED_SEQ_NO, updatedGlobalCheckpoint, currentTimeMillisSupplier, (leases, listener) -> {     }). }
false;static;2;6;;static IndexShardRoutingTable routingTable(final Set<AllocationId> initializingIds, final AllocationId primaryId) {     final ShardId shardId = new ShardId("test", "_na_", 0).     final ShardRouting primaryShard = TestShardRouting.newShardRouting(shardId, randomAlphaOfLength(10), null, true, ShardRoutingState.STARTED, primaryId).     return routingTable(initializingIds, primaryShard). }
false;static;2;13;;static IndexShardRoutingTable routingTable(final Set<AllocationId> initializingIds, final ShardRouting primaryShard) {     assert !initializingIds.contains(primaryShard.allocationId()).     final ShardId shardId = new ShardId("test", "_na_", 0).     final IndexShardRoutingTable.Builder builder = new IndexShardRoutingTable.Builder(shardId).     for (final AllocationId initializingId : initializingIds) {         builder.addShard(TestShardRouting.newShardRouting(shardId, randomAlphaOfLength(10), null, false, ShardRoutingState.INITIALIZING, initializingId)).     }     builder.addShard(primaryShard).     return builder.build(). }
