commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected Environment createEnv(Map<String, String> settings) throws UserException {     return env. }
false;protected;0;9;;@Override protected Command newCommand() {     return new ListKeyStoreCommand() {          @Override         protected Environment createEnv(Map<String, String> settings) throws UserException {             return env.         }     }. }
false;public;0;5;;public void testMissing() throws Exception {     UserException e = expectThrows(UserException.class, this::execute).     assertEquals(ExitCodes.DATA_ERROR, e.exitCode).     assertThat(e.getMessage(), containsString("keystore not found")). }
false;public;0;5;;public void testEmpty() throws Exception {     createKeystore("").     execute().     assertEquals("keystore.seed\n", terminal.getOutput()). }
false;public;0;5;;public void testOne() throws Exception {     createKeystore("", "foo", "bar").     execute().     assertEquals("foo\nkeystore.seed\n", terminal.getOutput()). }
false;public;0;5;;public void testMultiple() throws Exception {     createKeystore("", "foo", "1", "baz", "2", "bar", "3").     execute().     // sorted     assertEquals("bar\nbaz\nfoo\nkeystore.seed\n", terminal.getOutput()). }
