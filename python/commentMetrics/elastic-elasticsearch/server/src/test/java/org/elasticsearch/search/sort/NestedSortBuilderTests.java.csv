# id;timestamp;commentText;codeText;commentWords;codeWords
NestedSortBuilderTests -> public static NestedSortBuilder createRandomNestedSort(int depth);1524684173;Create a {@link NestedSortBuilder} with random path and filter of the given depth.;public static NestedSortBuilder createRandomNestedSort(int depth) {_        NestedSortBuilder nestedSort = new NestedSortBuilder(randomAlphaOfLengthBetween(3, 10))__        if (randomBoolean()) {_            nestedSort.setFilter(AbstractSortTestCase.randomNestedFilter())__        }_        if (depth > 0) {_            nestedSort.setNestedSort(createRandomNestedSort(depth - 1))__        }_        return nestedSort__    };create,a,link,nested,sort,builder,with,random,path,and,filter,of,the,given,depth;public,static,nested,sort,builder,create,random,nested,sort,int,depth,nested,sort,builder,nested,sort,new,nested,sort,builder,random,alpha,of,length,between,3,10,if,random,boolean,nested,sort,set,filter,abstract,sort,test,case,random,nested,filter,if,depth,0,nested,sort,set,nested,sort,create,random,nested,sort,depth,1,return,nested,sort
NestedSortBuilderTests -> public static NestedSortBuilder createRandomNestedSort(int depth);1529916084;Create a {@link NestedSortBuilder} with random path and filter of the given depth.;public static NestedSortBuilder createRandomNestedSort(int depth) {_        NestedSortBuilder nestedSort = new NestedSortBuilder(randomAlphaOfLengthBetween(3, 10))__        if (randomBoolean()) {_            nestedSort.setFilter(AbstractSortTestCase.randomNestedFilter())__        }_        if (depth > 0) {_            nestedSort.setNestedSort(createRandomNestedSort(depth - 1))__        }_        return nestedSort__    };create,a,link,nested,sort,builder,with,random,path,and,filter,of,the,given,depth;public,static,nested,sort,builder,create,random,nested,sort,int,depth,nested,sort,builder,nested,sort,new,nested,sort,builder,random,alpha,of,length,between,3,10,if,random,boolean,nested,sort,set,filter,abstract,sort,test,case,random,nested,filter,if,depth,0,nested,sort,set,nested,sort,create,random,nested,sort,depth,1,return,nested,sort
NestedSortBuilderTests -> public static NestedSortBuilder createRandomNestedSort(int depth);1548422582;Create a {@link NestedSortBuilder} with random path and filter of the given depth.;public static NestedSortBuilder createRandomNestedSort(int depth) {_        NestedSortBuilder nestedSort = new NestedSortBuilder(randomAlphaOfLengthBetween(3, 10))__        if (randomBoolean()) {_            nestedSort.setFilter(AbstractSortTestCase.randomNestedFilter())__        }_        if (depth > 0) {_            nestedSort.setNestedSort(createRandomNestedSort(depth - 1))__        }_        return nestedSort__    };create,a,link,nested,sort,builder,with,random,path,and,filter,of,the,given,depth;public,static,nested,sort,builder,create,random,nested,sort,int,depth,nested,sort,builder,nested,sort,new,nested,sort,builder,random,alpha,of,length,between,3,10,if,random,boolean,nested,sort,set,filter,abstract,sort,test,case,random,nested,filter,if,depth,0,nested,sort,set,nested,sort,create,random,nested,sort,depth,1,return,nested,sort
NestedSortBuilderTests -> public void testSerialization() throws IOException;1524684173;Test serialization of the test nested sort.;public void testSerialization() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            NestedSortBuilder testsort = createRandomNestedSort(3)__            NestedSortBuilder deserializedsort = copy(testsort)__            assertEquals(testsort, deserializedsort)__            assertEquals(testsort.hashCode(), deserializedsort.hashCode())__            assertNotSame(testsort, deserializedsort)__        }_    };test,serialization,of,the,test,nested,sort;public,void,test,serialization,throws,ioexception,for,int,runs,0,runs,runs,nested,sort,builder,testsort,create,random,nested,sort,3,nested,sort,builder,deserializedsort,copy,testsort,assert,equals,testsort,deserializedsort,assert,equals,testsort,hash,code,deserializedsort,hash,code,assert,not,same,testsort,deserializedsort
NestedSortBuilderTests -> public void testSerialization() throws IOException;1529916084;Test serialization of the test nested sort.;public void testSerialization() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            NestedSortBuilder testsort = createRandomNestedSort(3)__            NestedSortBuilder deserializedsort = copy(testsort)__            assertEquals(testsort, deserializedsort)__            assertEquals(testsort.hashCode(), deserializedsort.hashCode())__            assertNotSame(testsort, deserializedsort)__        }_    };test,serialization,of,the,test,nested,sort;public,void,test,serialization,throws,ioexception,for,int,runs,0,runs,runs,nested,sort,builder,testsort,create,random,nested,sort,3,nested,sort,builder,deserializedsort,copy,testsort,assert,equals,testsort,deserializedsort,assert,equals,testsort,hash,code,deserializedsort,hash,code,assert,not,same,testsort,deserializedsort
NestedSortBuilderTests -> public void testSerialization() throws IOException;1548422582;Test serialization of the test nested sort.;public void testSerialization() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            NestedSortBuilder testsort = createRandomNestedSort(3)__            NestedSortBuilder deserializedsort = copy(testsort)__            assertEquals(testsort, deserializedsort)__            assertEquals(testsort.hashCode(), deserializedsort.hashCode())__            assertNotSame(testsort, deserializedsort)__        }_    };test,serialization,of,the,test,nested,sort;public,void,test,serialization,throws,ioexception,for,int,runs,0,runs,runs,nested,sort,builder,testsort,create,random,nested,sort,3,nested,sort,builder,deserializedsort,copy,testsort,assert,equals,testsort,deserializedsort,assert,equals,testsort,hash,code,deserializedsort,hash,code,assert,not,same,testsort,deserializedsort
NestedSortBuilderTests -> public void testEqualsAndHashcode();1524684173;Test equality and hashCode properties;public void testEqualsAndHashcode() {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            EqualsHashCodeTestUtils.checkEqualsAndHashCode(createRandomNestedSort(3), NestedSortBuilderTests::copy,_                    NestedSortBuilderTests::mutate)__        }_    };test,equality,and,hash,code,properties;public,void,test,equals,and,hashcode,for,int,runs,0,runs,runs,equals,hash,code,test,utils,check,equals,and,hash,code,create,random,nested,sort,3,nested,sort,builder,tests,copy,nested,sort,builder,tests,mutate
NestedSortBuilderTests -> public void testEqualsAndHashcode();1529916084;Test equality and hashCode properties;public void testEqualsAndHashcode() {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            EqualsHashCodeTestUtils.checkEqualsAndHashCode(createRandomNestedSort(3), NestedSortBuilderTests::copy,_                    NestedSortBuilderTests::mutate)__        }_    };test,equality,and,hash,code,properties;public,void,test,equals,and,hashcode,for,int,runs,0,runs,runs,equals,hash,code,test,utils,check,equals,and,hash,code,create,random,nested,sort,3,nested,sort,builder,tests,copy,nested,sort,builder,tests,mutate
NestedSortBuilderTests -> public void testEqualsAndHashcode();1548422582;Test equality and hashCode properties;public void testEqualsAndHashcode() {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            EqualsHashCodeTestUtils.checkEqualsAndHashCode(createRandomNestedSort(3), NestedSortBuilderTests::copy,_                    NestedSortBuilderTests::mutate)__        }_    };test,equality,and,hash,code,properties;public,void,test,equals,and,hashcode,for,int,runs,0,runs,runs,equals,hash,code,test,utils,check,equals,and,hash,code,create,random,nested,sort,3,nested,sort,builder,tests,copy,nested,sort,builder,tests,mutate
NestedSortBuilderTests -> public void testRewrite() throws IOException;1524684173;Test that filters and inner nested sorts get rewritten;public void testRewrite() throws IOException {_        QueryBuilder filterThatRewrites = new MatchNoneQueryBuilder() {_            @Override_            protected QueryBuilder doRewrite(org.elasticsearch.index.query.QueryRewriteContext queryShardContext) throws IOException {_                return new MatchAllQueryBuilder()__            }__        }__        _        NestedSortBuilder original = new NestedSortBuilder("path").setFilter(filterThatRewrites)__        QueryRewriteContext mockRewriteContext = Mockito.mock(QueryRewriteContext.class)__        NestedSortBuilder rewritten = original.rewrite(mockRewriteContext)__        assertNotSame(rewritten, original)__        assertNotSame(rewritten.getFilter(), original.getFilter())___        _        original = new NestedSortBuilder("path")__        original.setNestedSort(new NestedSortBuilder("otherPath").setFilter(filterThatRewrites))__        rewritten = original.rewrite(mockRewriteContext)__        assertNotSame(rewritten, original)__        assertNotSame(rewritten.getNestedSort(), original.getNestedSort())___        _        original = new NestedSortBuilder("path")__        original.setFilter(filterThatRewrites)__        original.setNestedSort(new NestedSortBuilder("otherPath").setFilter(filterThatRewrites))__        rewritten = original.rewrite(mockRewriteContext)__        assertNotSame(rewritten, original)__        assertNotSame(rewritten.getFilter(), original.getFilter())__        assertNotSame(rewritten.getNestedSort(), original.getNestedSort())___        _        original = new NestedSortBuilder("path")__        original.setFilter(new MatchNoneQueryBuilder())__        original.setNestedSort(new NestedSortBuilder("otherPath").setFilter(new MatchNoneQueryBuilder()))__        rewritten = original.rewrite(mockRewriteContext)__        assertSame(rewritten, original)__        assertSame(rewritten.getFilter(), original.getFilter())__        assertSame(rewritten.getNestedSort(), original.getNestedSort())___        _        original = new NestedSortBuilder("firstLevel")__        ConstantScoreQueryBuilder constantScoreQueryBuilder = new ConstantScoreQueryBuilder(filterThatRewrites)__        original.setFilter(constantScoreQueryBuilder)__        NestedSortBuilder nestedSortThatRewrites = new NestedSortBuilder("thirdLevel")_                .setFilter(filterThatRewrites)__        original.setNestedSort(new NestedSortBuilder("secondLevel").setNestedSort(nestedSortThatRewrites))__        rewritten = original.rewrite(mockRewriteContext)__        assertNotSame(rewritten, original)__        assertNotSame(rewritten.getFilter(), constantScoreQueryBuilder)__        assertNotSame(((ConstantScoreQueryBuilder) rewritten.getFilter()).innerQuery(), constantScoreQueryBuilder.innerQuery())___        assertEquals("secondLevel", rewritten.getNestedSort().getPath())__        assertNotSame(rewritten.getNestedSort(), original.getNestedSort())__        assertEquals("thirdLevel", rewritten.getNestedSort().getNestedSort().getPath())__        assertNotSame(rewritten.getNestedSort().getNestedSort(), nestedSortThatRewrites)__    };test,that,filters,and,inner,nested,sorts,get,rewritten;public,void,test,rewrite,throws,ioexception,query,builder,filter,that,rewrites,new,match,none,query,builder,override,protected,query,builder,do,rewrite,org,elasticsearch,index,query,query,rewrite,context,query,shard,context,throws,ioexception,return,new,match,all,query,builder,nested,sort,builder,original,new,nested,sort,builder,path,set,filter,filter,that,rewrites,query,rewrite,context,mock,rewrite,context,mockito,mock,query,rewrite,context,class,nested,sort,builder,rewritten,original,rewrite,mock,rewrite,context,assert,not,same,rewritten,original,assert,not,same,rewritten,get,filter,original,get,filter,original,new,nested,sort,builder,path,original,set,nested,sort,new,nested,sort,builder,other,path,set,filter,filter,that,rewrites,rewritten,original,rewrite,mock,rewrite,context,assert,not,same,rewritten,original,assert,not,same,rewritten,get,nested,sort,original,get,nested,sort,original,new,nested,sort,builder,path,original,set,filter,filter,that,rewrites,original,set,nested,sort,new,nested,sort,builder,other,path,set,filter,filter,that,rewrites,rewritten,original,rewrite,mock,rewrite,context,assert,not,same,rewritten,original,assert,not,same,rewritten,get,filter,original,get,filter,assert,not,same,rewritten,get,nested,sort,original,get,nested,sort,original,new,nested,sort,builder,path,original,set,filter,new,match,none,query,builder,original,set,nested,sort,new,nested,sort,builder,other,path,set,filter,new,match,none,query,builder,rewritten,original,rewrite,mock,rewrite,context,assert,same,rewritten,original,assert,same,rewritten,get,filter,original,get,filter,assert,same,rewritten,get,nested,sort,original,get,nested,sort,original,new,nested,sort,builder,first,level,constant,score,query,builder,constant,score,query,builder,new,constant,score,query,builder,filter,that,rewrites,original,set,filter,constant,score,query,builder,nested,sort,builder,nested,sort,that,rewrites,new,nested,sort,builder,third,level,set,filter,filter,that,rewrites,original,set,nested,sort,new,nested,sort,builder,second,level,set,nested,sort,nested,sort,that,rewrites,rewritten,original,rewrite,mock,rewrite,context,assert,not,same,rewritten,original,assert,not,same,rewritten,get,filter,constant,score,query,builder,assert,not,same,constant,score,query,builder,rewritten,get,filter,inner,query,constant,score,query,builder,inner,query,assert,equals,second,level,rewritten,get,nested,sort,get,path,assert,not,same,rewritten,get,nested,sort,original,get,nested,sort,assert,equals,third,level,rewritten,get,nested,sort,get,nested,sort,get,path,assert,not,same,rewritten,get,nested,sort,get,nested,sort,nested,sort,that,rewrites
NestedSortBuilderTests -> public void testRewrite() throws IOException;1529916084;Test that filters and inner nested sorts get rewritten;public void testRewrite() throws IOException {_        QueryBuilder filterThatRewrites = new MatchNoneQueryBuilder() {_            @Override_            protected QueryBuilder doRewrite(org.elasticsearch.index.query.QueryRewriteContext queryShardContext) throws IOException {_                return new MatchAllQueryBuilder()__            }__        }__        _        NestedSortBuilder original = new NestedSortBuilder("path").setFilter(filterThatRewrites)__        QueryRewriteContext mockRewriteContext = Mockito.mock(QueryRewriteContext.class)__        NestedSortBuilder rewritten = original.rewrite(mockRewriteContext)__        assertNotSame(rewritten, original)__        assertNotSame(rewritten.getFilter(), original.getFilter())___        _        original = new NestedSortBuilder("path")__        original.setNestedSort(new NestedSortBuilder("otherPath").setFilter(filterThatRewrites))__        rewritten = original.rewrite(mockRewriteContext)__        assertNotSame(rewritten, original)__        assertNotSame(rewritten.getNestedSort(), original.getNestedSort())___        _        original = new NestedSortBuilder("path")__        original.setFilter(filterThatRewrites)__        original.setNestedSort(new NestedSortBuilder("otherPath").setFilter(filterThatRewrites))__        rewritten = original.rewrite(mockRewriteContext)__        assertNotSame(rewritten, original)__        assertNotSame(rewritten.getFilter(), original.getFilter())__        assertNotSame(rewritten.getNestedSort(), original.getNestedSort())___        _        original = new NestedSortBuilder("path")__        original.setFilter(new MatchNoneQueryBuilder())__        original.setNestedSort(new NestedSortBuilder("otherPath").setFilter(new MatchNoneQueryBuilder()))__        rewritten = original.rewrite(mockRewriteContext)__        assertSame(rewritten, original)__        assertSame(rewritten.getFilter(), original.getFilter())__        assertSame(rewritten.getNestedSort(), original.getNestedSort())___        _        original = new NestedSortBuilder("firstLevel")__        ConstantScoreQueryBuilder constantScoreQueryBuilder = new ConstantScoreQueryBuilder(filterThatRewrites)__        original.setFilter(constantScoreQueryBuilder)__        NestedSortBuilder nestedSortThatRewrites = new NestedSortBuilder("thirdLevel")_                .setFilter(filterThatRewrites)__        original.setNestedSort(new NestedSortBuilder("secondLevel").setNestedSort(nestedSortThatRewrites))__        rewritten = original.rewrite(mockRewriteContext)__        assertNotSame(rewritten, original)__        assertNotSame(rewritten.getFilter(), constantScoreQueryBuilder)__        assertNotSame(((ConstantScoreQueryBuilder) rewritten.getFilter()).innerQuery(), constantScoreQueryBuilder.innerQuery())___        assertEquals("secondLevel", rewritten.getNestedSort().getPath())__        assertNotSame(rewritten.getNestedSort(), original.getNestedSort())__        assertEquals("thirdLevel", rewritten.getNestedSort().getNestedSort().getPath())__        assertNotSame(rewritten.getNestedSort().getNestedSort(), nestedSortThatRewrites)__    };test,that,filters,and,inner,nested,sorts,get,rewritten;public,void,test,rewrite,throws,ioexception,query,builder,filter,that,rewrites,new,match,none,query,builder,override,protected,query,builder,do,rewrite,org,elasticsearch,index,query,query,rewrite,context,query,shard,context,throws,ioexception,return,new,match,all,query,builder,nested,sort,builder,original,new,nested,sort,builder,path,set,filter,filter,that,rewrites,query,rewrite,context,mock,rewrite,context,mockito,mock,query,rewrite,context,class,nested,sort,builder,rewritten,original,rewrite,mock,rewrite,context,assert,not,same,rewritten,original,assert,not,same,rewritten,get,filter,original,get,filter,original,new,nested,sort,builder,path,original,set,nested,sort,new,nested,sort,builder,other,path,set,filter,filter,that,rewrites,rewritten,original,rewrite,mock,rewrite,context,assert,not,same,rewritten,original,assert,not,same,rewritten,get,nested,sort,original,get,nested,sort,original,new,nested,sort,builder,path,original,set,filter,filter,that,rewrites,original,set,nested,sort,new,nested,sort,builder,other,path,set,filter,filter,that,rewrites,rewritten,original,rewrite,mock,rewrite,context,assert,not,same,rewritten,original,assert,not,same,rewritten,get,filter,original,get,filter,assert,not,same,rewritten,get,nested,sort,original,get,nested,sort,original,new,nested,sort,builder,path,original,set,filter,new,match,none,query,builder,original,set,nested,sort,new,nested,sort,builder,other,path,set,filter,new,match,none,query,builder,rewritten,original,rewrite,mock,rewrite,context,assert,same,rewritten,original,assert,same,rewritten,get,filter,original,get,filter,assert,same,rewritten,get,nested,sort,original,get,nested,sort,original,new,nested,sort,builder,first,level,constant,score,query,builder,constant,score,query,builder,new,constant,score,query,builder,filter,that,rewrites,original,set,filter,constant,score,query,builder,nested,sort,builder,nested,sort,that,rewrites,new,nested,sort,builder,third,level,set,filter,filter,that,rewrites,original,set,nested,sort,new,nested,sort,builder,second,level,set,nested,sort,nested,sort,that,rewrites,rewritten,original,rewrite,mock,rewrite,context,assert,not,same,rewritten,original,assert,not,same,rewritten,get,filter,constant,score,query,builder,assert,not,same,constant,score,query,builder,rewritten,get,filter,inner,query,constant,score,query,builder,inner,query,assert,equals,second,level,rewritten,get,nested,sort,get,path,assert,not,same,rewritten,get,nested,sort,original,get,nested,sort,assert,equals,third,level,rewritten,get,nested,sort,get,nested,sort,get,path,assert,not,same,rewritten,get,nested,sort,get,nested,sort,nested,sort,that,rewrites
NestedSortBuilderTests -> public void testRewrite() throws IOException;1548422582;Test that filters and inner nested sorts get rewritten;public void testRewrite() throws IOException {_        QueryBuilder filterThatRewrites = new MatchNoneQueryBuilder() {_            @Override_            protected QueryBuilder doRewrite(org.elasticsearch.index.query.QueryRewriteContext queryShardContext) throws IOException {_                return new MatchAllQueryBuilder()__            }_        }__        _        NestedSortBuilder original = new NestedSortBuilder("path").setFilter(filterThatRewrites)__        QueryRewriteContext mockRewriteContext = Mockito.mock(QueryRewriteContext.class)__        NestedSortBuilder rewritten = original.rewrite(mockRewriteContext)__        assertNotSame(rewritten, original)__        assertNotSame(rewritten.getFilter(), original.getFilter())___        _        original = new NestedSortBuilder("path")__        original.setNestedSort(new NestedSortBuilder("otherPath").setFilter(filterThatRewrites))__        rewritten = original.rewrite(mockRewriteContext)__        assertNotSame(rewritten, original)__        assertNotSame(rewritten.getNestedSort(), original.getNestedSort())___        _        original = new NestedSortBuilder("path")__        original.setFilter(filterThatRewrites)__        original.setNestedSort(new NestedSortBuilder("otherPath").setFilter(filterThatRewrites))__        rewritten = original.rewrite(mockRewriteContext)__        assertNotSame(rewritten, original)__        assertNotSame(rewritten.getFilter(), original.getFilter())__        assertNotSame(rewritten.getNestedSort(), original.getNestedSort())___        _        original = new NestedSortBuilder("path")__        original.setFilter(new MatchNoneQueryBuilder())__        original.setNestedSort(new NestedSortBuilder("otherPath").setFilter(new MatchNoneQueryBuilder()))__        rewritten = original.rewrite(mockRewriteContext)__        assertSame(rewritten, original)__        assertSame(rewritten.getFilter(), original.getFilter())__        assertSame(rewritten.getNestedSort(), original.getNestedSort())___        _        original = new NestedSortBuilder("firstLevel")__        ConstantScoreQueryBuilder constantScoreQueryBuilder = new ConstantScoreQueryBuilder(filterThatRewrites)__        original.setFilter(constantScoreQueryBuilder)__        NestedSortBuilder nestedSortThatRewrites = new NestedSortBuilder("thirdLevel")_                .setFilter(filterThatRewrites)__        original.setNestedSort(new NestedSortBuilder("secondLevel").setNestedSort(nestedSortThatRewrites))__        rewritten = original.rewrite(mockRewriteContext)__        assertNotSame(rewritten, original)__        assertNotSame(rewritten.getFilter(), constantScoreQueryBuilder)__        assertNotSame(((ConstantScoreQueryBuilder) rewritten.getFilter()).innerQuery(), constantScoreQueryBuilder.innerQuery())___        assertEquals("secondLevel", rewritten.getNestedSort().getPath())__        assertNotSame(rewritten.getNestedSort(), original.getNestedSort())__        assertEquals("thirdLevel", rewritten.getNestedSort().getNestedSort().getPath())__        assertNotSame(rewritten.getNestedSort().getNestedSort(), nestedSortThatRewrites)__    };test,that,filters,and,inner,nested,sorts,get,rewritten;public,void,test,rewrite,throws,ioexception,query,builder,filter,that,rewrites,new,match,none,query,builder,override,protected,query,builder,do,rewrite,org,elasticsearch,index,query,query,rewrite,context,query,shard,context,throws,ioexception,return,new,match,all,query,builder,nested,sort,builder,original,new,nested,sort,builder,path,set,filter,filter,that,rewrites,query,rewrite,context,mock,rewrite,context,mockito,mock,query,rewrite,context,class,nested,sort,builder,rewritten,original,rewrite,mock,rewrite,context,assert,not,same,rewritten,original,assert,not,same,rewritten,get,filter,original,get,filter,original,new,nested,sort,builder,path,original,set,nested,sort,new,nested,sort,builder,other,path,set,filter,filter,that,rewrites,rewritten,original,rewrite,mock,rewrite,context,assert,not,same,rewritten,original,assert,not,same,rewritten,get,nested,sort,original,get,nested,sort,original,new,nested,sort,builder,path,original,set,filter,filter,that,rewrites,original,set,nested,sort,new,nested,sort,builder,other,path,set,filter,filter,that,rewrites,rewritten,original,rewrite,mock,rewrite,context,assert,not,same,rewritten,original,assert,not,same,rewritten,get,filter,original,get,filter,assert,not,same,rewritten,get,nested,sort,original,get,nested,sort,original,new,nested,sort,builder,path,original,set,filter,new,match,none,query,builder,original,set,nested,sort,new,nested,sort,builder,other,path,set,filter,new,match,none,query,builder,rewritten,original,rewrite,mock,rewrite,context,assert,same,rewritten,original,assert,same,rewritten,get,filter,original,get,filter,assert,same,rewritten,get,nested,sort,original,get,nested,sort,original,new,nested,sort,builder,first,level,constant,score,query,builder,constant,score,query,builder,new,constant,score,query,builder,filter,that,rewrites,original,set,filter,constant,score,query,builder,nested,sort,builder,nested,sort,that,rewrites,new,nested,sort,builder,third,level,set,filter,filter,that,rewrites,original,set,nested,sort,new,nested,sort,builder,second,level,set,nested,sort,nested,sort,that,rewrites,rewritten,original,rewrite,mock,rewrite,context,assert,not,same,rewritten,original,assert,not,same,rewritten,get,filter,constant,score,query,builder,assert,not,same,constant,score,query,builder,rewritten,get,filter,inner,query,constant,score,query,builder,inner,query,assert,equals,second,level,rewritten,get,nested,sort,get,path,assert,not,same,rewritten,get,nested,sort,original,get,nested,sort,assert,equals,third,level,rewritten,get,nested,sort,get,nested,sort,get,path,assert,not,same,rewritten,get,nested,sort,get,nested,sort,nested,sort,that,rewrites
