commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     return Collections.singleton(InternalSettingsPlugin.class). }
false;public;0;40;;public void testDynamicUpdates() throws Exception {     client().admin().indices().prepareCreate("test").setSettings(Settings.builder().put("index.number_of_shards", 1).put("index.number_of_replicas", 0).put(MapperService.INDEX_MAPPING_TOTAL_FIELDS_LIMIT_SETTING.getKey(), Long.MAX_VALUE)).execute().actionGet().     client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet().     client().admin().cluster().prepareUpdateSettings().setTransientSettings(Settings.builder().put(MappingUpdatedAction.INDICES_MAPPING_DYNAMIC_TIMEOUT_SETTING.getKey(), TimeValue.timeValueMinutes(5))).get().     int recCount = randomIntBetween(20, 200).     List<IndexRequestBuilder> indexRequests = new ArrayList<>().     for (int rec = 0. rec < recCount. rec++) {         String type = "type".         String fieldName = "field_" + type + "_" + rec.         indexRequests.add(client().prepareIndex("test", type, Integer.toString(rec)).setTimeout(TimeValue.timeValueMinutes(5)).setSource(fieldName, "some_value")).     }     indexRandom(true, false, indexRequests).     logger.info("checking all the documents are there").     RefreshResponse refreshResponse = client().admin().indices().prepareRefresh().execute().actionGet().     assertThat(refreshResponse.getFailedShards(), equalTo(0)).     SearchResponse response = client().prepareSearch("test").setSize(0).execute().actionGet().     assertThat(response.getHits().getTotalHits().value, equalTo((long) recCount)).     logger.info("checking all the fields are in the mappings").     for (int rec = 0. rec < recCount. rec++) {         String type = "type".         String fieldName = "field_" + type + "_" + rec.         assertConcreteMappingsOnAll("test", type, fieldName).     }     client().admin().cluster().prepareUpdateSettings().setTransientSettings(Settings.builder().putNull(MappingUpdatedAction.INDICES_MAPPING_DYNAMIC_TIMEOUT_SETTING.getKey())).get(). }
false;public;0;20;;public void testUpdateMappingWithoutType() {     client().admin().indices().prepareCreate("test").setSettings(Settings.builder().put("index.number_of_shards", 1).put("index.number_of_replicas", 0)).addMapping("_doc", "{\"_doc\":{\"properties\":{\"body\":{\"type\":\"text\"}}}}", XContentType.JSON).execute().actionGet().     client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet().     AcknowledgedResponse putMappingResponse = client().admin().indices().preparePutMapping("test").setType("_doc").setSource("{\"properties\":{\"date\":{\"type\":\"integer\"}}}", XContentType.JSON).execute().actionGet().     assertThat(putMappingResponse.isAcknowledged(), equalTo(true)).     GetMappingsResponse getMappingsResponse = client().admin().indices().prepareGetMappings("test").execute().actionGet().     assertThat(getMappingsResponse.mappings().get("test").get("_doc").source().toString(), equalTo("{\"_doc\":{\"properties\":{\"body\":{\"type\":\"text\"},\"date\":{\"type\":\"integer\"}}}}")). }
false;public;0;19;;public void testUpdateMappingWithoutTypeMultiObjects() {     client().admin().indices().prepareCreate("test").setSettings(Settings.builder().put("index.number_of_shards", 1).put("index.number_of_replicas", 0)).execute().actionGet().     client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet().     AcknowledgedResponse putMappingResponse = client().admin().indices().preparePutMapping("test").setType("_doc").setSource("{\"properties\":{\"date\":{\"type\":\"integer\"}}}", XContentType.JSON).execute().actionGet().     assertThat(putMappingResponse.isAcknowledged(), equalTo(true)).     GetMappingsResponse getMappingsResponse = client().admin().indices().prepareGetMappings("test").execute().actionGet().     assertThat(getMappingsResponse.mappings().get("test").get("_doc").source().toString(), equalTo("{\"_doc\":{\"properties\":{\"date\":{\"type\":\"integer\"}}}}")). }
false;public;0;18;;public void testUpdateMappingWithConflicts() {     client().admin().indices().prepareCreate("test").setSettings(Settings.builder().put("index.number_of_shards", 2).put("index.number_of_replicas", 0)).addMapping("type", "{\"type\":{\"properties\":{\"body\":{\"type\":\"text\"}}}}", XContentType.JSON).execute().actionGet().     client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet().     try {         client().admin().indices().preparePutMapping("test").setType("type").setSource("{\"type\":{\"properties\":{\"body\":{\"type\":\"integer\"}}}}", XContentType.JSON).execute().actionGet().         fail("Expected MergeMappingException").     } catch (IllegalArgumentException e) {         assertThat(e.getMessage(), containsString("mapper [body] of different type, current_type [text], merged_type [integer]")).     } }
false;public;0;13;;public void testUpdateMappingWithNormsConflicts() {     client().admin().indices().prepareCreate("test").addMapping("type", "{\"type\":{\"properties\":{\"body\":{\"type\":\"text\", \"norms\": false }}}}", XContentType.JSON).execute().actionGet().     try {         client().admin().indices().preparePutMapping("test").setType("type").setSource("{\"type\":{\"properties\":{\"body\":{\"type\":\"text\", \"norms\": true }}}}", XContentType.JSON).execute().actionGet().         fail("Expected MergeMappingException").     } catch (IllegalArgumentException e) {         assertThat(e.getMessage(), containsString("mapper [body] has different [norms]")).     } }
true;public;0;17;/*     Second regression test for https://github.com/elastic/elasticsearch/issues/3381      */ ;/*     Second regression test for https://github.com/elastic/elasticsearch/issues/3381      */ public void testUpdateMappingNoChanges() {     client().admin().indices().prepareCreate("test").setSettings(Settings.builder().put("index.number_of_shards", 2).put("index.number_of_replicas", 0)).addMapping("type", "{\"type\":{\"properties\":{\"body\":{\"type\":\"text\"}}}}", XContentType.JSON).execute().actionGet().     client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet().     AcknowledgedResponse putMappingResponse = client().admin().indices().preparePutMapping("test").setType("type").setSource("{\"type\":{\"properties\":{\"body\":{\"type\":\"text\"}}}}", XContentType.JSON).execute().actionGet().     // no changes, we return     assertThat(putMappingResponse.isAcknowledged(), equalTo(true)). }
false;public;0;58;;public void testUpdateMappingConcurrently() throws Throwable {     createIndex("test1", "test2").     final AtomicReference<Exception> threadException = new AtomicReference<>().     final AtomicBoolean stop = new AtomicBoolean(false).     Thread[] threads = new Thread[3].     final CyclicBarrier barrier = new CyclicBarrier(threads.length).     final ArrayList<Client> clientArray = new ArrayList<>().     for (Client c : clients()) {         clientArray.add(c).     }     for (int j = 0. j < threads.length. j++) {         threads[j] = new Thread(() -> {             try {                 barrier.await().                 for (int i = 0. i < 100. i++) {                     if (stop.get()) {                         return.                     }                     Client client1 = clientArray.get(i % clientArray.size()).                     Client client2 = clientArray.get((i + 1) % clientArray.size()).                     String indexName = i % 2 == 0 ? "test2" : "test1".                     String typeName = "type".                     String fieldName = Thread.currentThread().getName() + "_" + i.                     AcknowledgedResponse response = client1.admin().indices().preparePutMapping(indexName).setType(typeName).setSource(JsonXContent.contentBuilder().startObject().startObject(typeName).startObject("properties").startObject(fieldName).field("type", "text").endObject().endObject().endObject().endObject()).setMasterNodeTimeout(TimeValue.timeValueMinutes(5)).get().                     assertThat(response.isAcknowledged(), equalTo(true)).                     GetMappingsResponse getMappingResponse = client2.admin().indices().prepareGetMappings(indexName).get().                     ImmutableOpenMap<String, MappingMetaData> mappings = getMappingResponse.getMappings().get(indexName).                     assertThat(mappings.containsKey(typeName), equalTo(true)).                     assertThat(((Map<String, Object>) mappings.get(typeName).getSourceAsMap().get("properties")).keySet(), Matchers.hasItem(fieldName)).                 }             } catch (Exception e) {                 threadException.set(e).                 stop.set(true).             }         }).         threads[j].setName("t_" + j).         threads[j].start().     }     for (Thread t : threads) t.join().     if (threadException.get() != null) {         throw threadException.get().     } }
false;public;0;24;;public void testPutMappingsWithBlocks() {     createIndex("test").     ensureGreen().     for (String block : Arrays.asList(SETTING_BLOCKS_READ, SETTING_BLOCKS_WRITE)) {         try {             enableIndexBlock("test", block).             assertAcked(client().admin().indices().preparePutMapping("test").setType("_doc").setSource("{\"properties\":{\"date\":{\"type\":\"integer\"}}}", XContentType.JSON)).         } finally {             disableIndexBlock("test", block).         }     }     for (String block : Arrays.asList(SETTING_READ_ONLY, SETTING_BLOCKS_METADATA)) {         try {             enableIndexBlock("test", block).             assertBlocked(client().admin().indices().preparePutMapping("test").setType("_doc").setSource("{\"properties\":{\"date\":{\"type\":\"integer\"}}}", XContentType.JSON)).         } finally {             disableIndexBlock("test", block).         }     } }
