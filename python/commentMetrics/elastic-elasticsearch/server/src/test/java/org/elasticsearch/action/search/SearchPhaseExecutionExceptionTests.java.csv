commented;modifiers;parameterAmount;loc;comment;code
false;public;0;43;;public void testToXContent() throws IOException {     SearchPhaseExecutionException exception = new SearchPhaseExecutionException("test", "all shards failed", new ShardSearchFailure[] { new ShardSearchFailure(new ParsingException(1, 2, "foobar", null), new SearchShardTarget("node_1", new ShardId("foo", "_na_", 0), null, OriginalIndices.NONE)), new ShardSearchFailure(new IndexShardClosedException(new ShardId("foo", "_na_", 1)), new SearchShardTarget("node_2", new ShardId("foo", "_na_", 1), null, OriginalIndices.NONE)), new ShardSearchFailure(new ParsingException(5, 7, "foobar", null), new SearchShardTarget("node_3", new ShardId("foo", "_na_", 2), null, OriginalIndices.NONE)) }).     // Failures are grouped (by default)     assertEquals("{" + "\"type\":\"search_phase_execution_exception\"," + "\"reason\":\"all shards failed\"," + "\"phase\":\"test\"," + "\"grouped\":true," + "\"failed_shards\":[" + "{" + "\"shard\":0," + "\"index\":\"foo\"," + "\"node\":\"node_1\"," + "\"reason\":{" + "\"type\":\"parsing_exception\"," + "\"reason\":\"foobar\"," + "\"line\":1," + "\"col\":2" + "}" + "}," + "{" + "\"shard\":1," + "\"index\":\"foo\"," + "\"node\":\"node_2\"," + "\"reason\":{" + "\"type\":\"index_shard_closed_exception\"," + "\"reason\":\"CurrentState[CLOSED] Closed\"," + "\"index_uuid\":\"_na_\"," + "\"shard\":\"1\"," + "\"index\":\"foo\"" + "}" + "}" + "]}", Strings.toString(exception)). }
false;public;0;35;;public void testToAndFromXContent() throws IOException {     final XContent xContent = randomFrom(XContentType.values()).xContent().     ShardSearchFailure[] shardSearchFailures = new ShardSearchFailure[randomIntBetween(1, 5)].     for (int i = 0. i < shardSearchFailures.length. i++) {         Exception cause = randomFrom(new ParsingException(1, 2, "foobar", null), new InvalidIndexTemplateException("foo", "bar"), new TimestampParsingException("foo", null), new NullPointerException()).         shardSearchFailures[i] = new ShardSearchFailure(cause, new SearchShardTarget("node_" + i, new ShardId("test", "_na_", i), null, OriginalIndices.NONE)).     }     final String phase = randomFrom("query", "search", "other").     SearchPhaseExecutionException actual = new SearchPhaseExecutionException(phase, "unexpected failures", shardSearchFailures).     BytesReference exceptionBytes = toShuffledXContent(actual, xContent.type(), ToXContent.EMPTY_PARAMS, randomBoolean()).     ElasticsearchException parsedException.     try (XContentParser parser = createParser(xContent, exceptionBytes)) {         assertEquals(XContentParser.Token.START_OBJECT, parser.nextToken()).         parsedException = ElasticsearchException.fromXContent(parser).         assertEquals(XContentParser.Token.END_OBJECT, parser.currentToken()).         assertNull(parser.nextToken()).     }     assertNotNull(parsedException).     assertThat(parsedException.getHeaderKeys(), hasSize(0)).     assertThat(parsedException.getMetadataKeys(), hasSize(1)).     assertThat(parsedException.getMetadata("es.phase"), hasItem(phase)).     // SearchPhaseExecutionException has no cause field     assertNull(parsedException.getCause()). }
