# id;timestamp;commentText;codeText;commentWords;codeWords
SyncedFlushUtil -> public static Map<String, SyncedFlushService.PreSyncedFlushResponse> sendPreSyncRequests(SyncedFlushService service, List<ShardRouting> activeShards, ClusterState state, ShardId shardId);1524684173;Blocking version of {@link SyncedFlushService#sendPreSyncRequests(List, ClusterState, ShardId, ActionListener)};public static Map<String, SyncedFlushService.PreSyncedFlushResponse> sendPreSyncRequests(SyncedFlushService service, List<ShardRouting> activeShards, ClusterState state, ShardId shardId) {_        LatchedListener<Map<String, SyncedFlushService.PreSyncedFlushResponse>> listener = new LatchedListener<>()__        service.sendPreSyncRequests(activeShards, state, shardId, listener)__        try {_            listener.latch.await()__        } catch (InterruptedException e) {_            Thread.currentThread().interrupt()__        }_        if (listener.error != null) {_            throw ExceptionsHelper.convertToElastic(listener.error)__        }_        return listener.result__    };blocking,version,of,link,synced,flush,service,send,pre,sync,requests,list,cluster,state,shard,id,action,listener;public,static,map,string,synced,flush,service,pre,synced,flush,response,send,pre,sync,requests,synced,flush,service,service,list,shard,routing,active,shards,cluster,state,state,shard,id,shard,id,latched,listener,map,string,synced,flush,service,pre,synced,flush,response,listener,new,latched,listener,service,send,pre,sync,requests,active,shards,state,shard,id,listener,try,listener,latch,await,catch,interrupted,exception,e,thread,current,thread,interrupt,if,listener,error,null,throw,exceptions,helper,convert,to,elastic,listener,error,return,listener,result
SyncedFlushUtil -> public static Map<String, SyncedFlushService.PreSyncedFlushResponse> sendPreSyncRequests(SyncedFlushService service, List<ShardRouting> activeShards, ClusterState state, ShardId shardId);1525248068;Blocking version of {@link SyncedFlushService#sendPreSyncRequests(List, ClusterState, ShardId, ActionListener)};public static Map<String, SyncedFlushService.PreSyncedFlushResponse> sendPreSyncRequests(SyncedFlushService service, List<ShardRouting> activeShards, ClusterState state, ShardId shardId) {_        LatchedListener<Map<String, SyncedFlushService.PreSyncedFlushResponse>> listener = new LatchedListener<>()__        service.sendPreSyncRequests(activeShards, state, shardId, listener)__        try {_            listener.latch.await()__        } catch (InterruptedException e) {_            Thread.currentThread().interrupt()__        }_        if (listener.error != null) {_            throw ExceptionsHelper.convertToElastic(listener.error)__        }_        return listener.result__    };blocking,version,of,link,synced,flush,service,send,pre,sync,requests,list,cluster,state,shard,id,action,listener;public,static,map,string,synced,flush,service,pre,synced,flush,response,send,pre,sync,requests,synced,flush,service,service,list,shard,routing,active,shards,cluster,state,state,shard,id,shard,id,latched,listener,map,string,synced,flush,service,pre,synced,flush,response,listener,new,latched,listener,service,send,pre,sync,requests,active,shards,state,shard,id,listener,try,listener,latch,await,catch,interrupted,exception,e,thread,current,thread,interrupt,if,listener,error,null,throw,exceptions,helper,convert,to,elastic,listener,error,return,listener,result
SyncedFlushUtil -> public static Map<String, SyncedFlushService.PreSyncedFlushResponse> sendPreSyncRequests(SyncedFlushService service, List<ShardRouting> activeShards, ClusterState state, ShardId shardId);1528211342;Blocking version of {@link SyncedFlushService#sendPreSyncRequests(List, ClusterState, ShardId, ActionListener)};public static Map<String, SyncedFlushService.PreSyncedFlushResponse> sendPreSyncRequests(SyncedFlushService service, List<ShardRouting> activeShards, ClusterState state, ShardId shardId) {_        LatchedListener<Map<String, SyncedFlushService.PreSyncedFlushResponse>> listener = new LatchedListener<>()__        service.sendPreSyncRequests(activeShards, state, shardId, listener)__        try {_            listener.latch.await()__        } catch (InterruptedException e) {_            Thread.currentThread().interrupt()__        }_        if (listener.error != null) {_            throw ExceptionsHelper.convertToElastic(listener.error)__        }_        return listener.result__    };blocking,version,of,link,synced,flush,service,send,pre,sync,requests,list,cluster,state,shard,id,action,listener;public,static,map,string,synced,flush,service,pre,synced,flush,response,send,pre,sync,requests,synced,flush,service,service,list,shard,routing,active,shards,cluster,state,state,shard,id,shard,id,latched,listener,map,string,synced,flush,service,pre,synced,flush,response,listener,new,latched,listener,service,send,pre,sync,requests,active,shards,state,shard,id,listener,try,listener,latch,await,catch,interrupted,exception,e,thread,current,thread,interrupt,if,listener,error,null,throw,exceptions,helper,convert,to,elastic,listener,error,return,listener,result
SyncedFlushUtil -> public static ShardsSyncedFlushResult attemptSyncedFlush(Logger logger, InternalTestCluster cluster, ShardId shardId) throws Exception;1528211342;Blocking version of {@link SyncedFlushService#attemptSyncedFlush(ShardId, ActionListener)};public static ShardsSyncedFlushResult attemptSyncedFlush(Logger logger, InternalTestCluster cluster, ShardId shardId) throws Exception {_        _        SyncedFlushService service = cluster.getInstance(SyncedFlushService.class)__        AtomicReference<LatchedListener<ShardsSyncedFlushResult>> listenerHolder = new AtomicReference<>()__        assertBusy(() -> {_            LatchedListener<ShardsSyncedFlushResult> listener = new LatchedListener<>()__            listenerHolder.set(listener)__            service.attemptSyncedFlush(shardId, listener)__            listener.latch.await()__            if (listener.result != null && listener.result.failureReason() != null_                && listener.result.failureReason().contains("ongoing operations on primary")) {_                throw new AssertionError(listener.result.failureReason())_ _            }_        })__        if (listenerHolder.get().error != null) {_            throw ExceptionsHelper.convertToElastic(listenerHolder.get().error)__        }_        return listenerHolder.get().result__    };blocking,version,of,link,synced,flush,service,attempt,synced,flush,shard,id,action,listener;public,static,shards,synced,flush,result,attempt,synced,flush,logger,logger,internal,test,cluster,cluster,shard,id,shard,id,throws,exception,synced,flush,service,service,cluster,get,instance,synced,flush,service,class,atomic,reference,latched,listener,shards,synced,flush,result,listener,holder,new,atomic,reference,assert,busy,latched,listener,shards,synced,flush,result,listener,new,latched,listener,listener,holder,set,listener,service,attempt,synced,flush,shard,id,listener,listener,latch,await,if,listener,result,null,listener,result,failure,reason,null,listener,result,failure,reason,contains,ongoing,operations,on,primary,throw,new,assertion,error,listener,result,failure,reason,if,listener,holder,get,error,null,throw,exceptions,helper,convert,to,elastic,listener,holder,get,error,return,listener,holder,get,result
SyncedFlushUtil -> public static ShardsSyncedFlushResult attemptSyncedFlush(Logger logger, InternalTestCluster cluster, ShardId shardId) throws Exception;1542609384;Blocking version of {@link SyncedFlushService#attemptSyncedFlush(ShardId, ActionListener)};public static ShardsSyncedFlushResult attemptSyncedFlush(Logger logger, InternalTestCluster cluster, ShardId shardId) throws Exception {_        _        SyncedFlushService service = cluster.getInstance(SyncedFlushService.class)__        AtomicReference<LatchedListener<ShardsSyncedFlushResult>> listenerHolder = new AtomicReference<>()__        assertBusy(() -> {_            LatchedListener<ShardsSyncedFlushResult> listener = new LatchedListener<>()__            listenerHolder.set(listener)__            service.attemptSyncedFlush(shardId, listener)__            listener.latch.await()__            if (listener.result != null && listener.result.failureReason() != null_                && listener.result.failureReason().contains("ongoing operations on primary")) {_                throw new AssertionError(listener.result.failureReason())_ _            }_        })__        if (listenerHolder.get().error != null) {_            throw ExceptionsHelper.convertToElastic(listenerHolder.get().error)__        }_        return listenerHolder.get().result__    };blocking,version,of,link,synced,flush,service,attempt,synced,flush,shard,id,action,listener;public,static,shards,synced,flush,result,attempt,synced,flush,logger,logger,internal,test,cluster,cluster,shard,id,shard,id,throws,exception,synced,flush,service,service,cluster,get,instance,synced,flush,service,class,atomic,reference,latched,listener,shards,synced,flush,result,listener,holder,new,atomic,reference,assert,busy,latched,listener,shards,synced,flush,result,listener,new,latched,listener,listener,holder,set,listener,service,attempt,synced,flush,shard,id,listener,listener,latch,await,if,listener,result,null,listener,result,failure,reason,null,listener,result,failure,reason,contains,ongoing,operations,on,primary,throw,new,assertion,error,listener,result,failure,reason,if,listener,holder,get,error,null,throw,exceptions,helper,convert,to,elastic,listener,holder,get,error,return,listener,holder,get,result
