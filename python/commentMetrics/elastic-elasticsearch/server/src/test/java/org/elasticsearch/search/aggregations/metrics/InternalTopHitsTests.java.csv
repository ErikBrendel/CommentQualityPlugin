commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override public void setUp() throws Exception {     super.setUp().     testInstancesLookSortedByField = randomBoolean().     testInstancesSortFields = testInstancesLookSortedByField ? randomSortFields() : new SortField[0]. }
false;protected;3;44;;@Override protected InternalTopHits createTestInstance(String name, List<PipelineAggregator> pipelineAggregators, Map<String, Object> metaData) {     int from = 0.     int requestedSize = between(1, 40).     int actualSize = between(0, requestedSize).     float maxScore = Float.NEGATIVE_INFINITY.     ScoreDoc[] scoreDocs = new ScoreDoc[actualSize].     SearchHit[] hits = new SearchHit[actualSize].     Set<Integer> usedDocIds = new HashSet<>().     for (int i = 0. i < actualSize. i++) {         float score = randomFloat().         maxScore = max(maxScore, score).         int docId = randomValueOtherThanMany(usedDocIds::contains, () -> between(0, IndexWriter.MAX_DOCS)).         usedDocIds.add(docId).         Map<String, DocumentField> searchHitFields = new HashMap<>().         if (testInstancesLookSortedByField) {             Object[] fields = new Object[testInstancesSortFields.length].             for (int f = 0. f < testInstancesSortFields.length. f++) {                 fields[f] = randomOfType(testInstancesSortFields[f].getType()).             }             scoreDocs[i] = new FieldDoc(docId, score, fields).         } else {             scoreDocs[i] = new ScoreDoc(docId, score).         }         hits[i] = new SearchHit(docId, Integer.toString(i), new Text("test"), searchHitFields).         hits[i].score(score).     }     int totalHits = between(actualSize, 500000).     SearchHits searchHits = new SearchHits(hits, new TotalHits(totalHits, TotalHits.Relation.EQUAL_TO), maxScore).     TopDocs topDocs.     Arrays.sort(scoreDocs, scoreDocComparator()).     if (testInstancesLookSortedByField) {         topDocs = new TopFieldDocs(new TotalHits(totalHits, TotalHits.Relation.EQUAL_TO), scoreDocs, testInstancesSortFields).     } else {         topDocs = new TopDocs(new TotalHits(totalHits, TotalHits.Relation.EQUAL_TO), scoreDocs).     }     // Lucene's TopDocs initializes the maxScore to Float.NaN, if there is no maxScore     TopDocsAndMaxScore topDocsAndMaxScore = new TopDocsAndMaxScore(topDocs, maxScore == Float.NEGATIVE_INFINITY ? Float.NaN : maxScore).     return new InternalTopHits(name, from, requestedSize, topDocsAndMaxScore, searchHits, pipelineAggregators, metaData). }
false;protected;2;29;;@Override protected void assertFromXContent(InternalTopHits aggregation, ParsedAggregation parsedAggregation) throws IOException {     final SearchHits expectedSearchHits = aggregation.getHits().     assertTrue(parsedAggregation instanceof ParsedTopHits).     ParsedTopHits parsed = (ParsedTopHits) parsedAggregation.     final SearchHits actualSearchHits = parsed.getHits().     assertEquals(expectedSearchHits.getTotalHits().value, actualSearchHits.getTotalHits().value).     assertEquals(expectedSearchHits.getTotalHits().relation, actualSearchHits.getTotalHits().relation).     assertEquals(expectedSearchHits.getMaxScore(), actualSearchHits.getMaxScore(), 0.0f).     List<SearchHit> expectedHits = Arrays.asList(expectedSearchHits.getHits()).     List<SearchHit> actualHits = Arrays.asList(actualSearchHits.getHits()).     assertEquals(expectedHits.size(), actualHits.size()).     for (int i = 0. i < expectedHits.size(). i++) {         SearchHit expected = expectedHits.get(i).         SearchHit actual = actualHits.get(i).         assertEquals(expected.getIndex(), actual.getIndex()).         assertEquals(expected.getType(), actual.getType()).         assertEquals(expected.getId(), actual.getId()).         assertEquals(expected.getVersion(), actual.getVersion()).         assertEquals(expected.getScore(), actual.getScore(), 0.0f).         assertEquals(expected.getFields(), actual.getFields()).         assertEquals(expected.getSourceAsMap(), actual.getSourceAsMap()).     } }
false;private;1;26;;private Object randomOfType(SortField.Type type) {     switch(type) {         case CUSTOM:             throw new UnsupportedOperationException().         case DOC:             return between(0, IndexWriter.MAX_DOCS).         case DOUBLE:             return randomDouble().         case FLOAT:             return randomFloat().         case INT:             return randomInt().         case LONG:             return randomLong().         case REWRITEABLE:             throw new UnsupportedOperationException().         case SCORE:             return randomFloat().         case STRING:             return new BytesRef(randomAlphaOfLength(5)).         case STRING_VAL:             return new BytesRef(randomAlphaOfLength(5)).         default:             throw new UnsupportedOperationException("Unknown SortField.Type: " + type).     } }
false;protected;2;35;;@Override protected void assertReduced(InternalTopHits reduced, List<InternalTopHits> inputs) {     SearchHits actualHits = reduced.getHits().     List<Tuple<ScoreDoc, SearchHit>> allHits = new ArrayList<>().     float maxScore = Float.NEGATIVE_INFINITY.     long totalHits = 0.     TotalHits.Relation relation = TotalHits.Relation.EQUAL_TO.     for (int input = 0. input < inputs.size(). input++) {         SearchHits internalHits = inputs.get(input).getHits().         totalHits += internalHits.getTotalHits().value.         if (internalHits.getTotalHits().relation == TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO) {             relation = TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO.         }         maxScore = max(maxScore, internalHits.getMaxScore()).         for (int i = 0. i < internalHits.getHits().length. i++) {             ScoreDoc doc = inputs.get(input).getTopDocs().topDocs.scoreDocs[i].             if (testInstancesLookSortedByField) {                 doc = new FieldDoc(doc.doc, doc.score, ((FieldDoc) doc).fields, input).             } else {                 doc = new ScoreDoc(doc.doc, doc.score, input).             }             allHits.add(new Tuple<>(doc, internalHits.getHits()[i])).         }     }     allHits.sort(comparing(Tuple::v1, scoreDocComparator())).     SearchHit[] expectedHitsHits = new SearchHit[min(inputs.get(0).getSize(), allHits.size())].     for (int i = 0. i < expectedHitsHits.length. i++) {         expectedHitsHits[i] = allHits.get(i).v2().     }     // Lucene's TopDocs initializes the maxScore to Float.NaN, if there is no maxScore     SearchHits expectedHits = new SearchHits(expectedHitsHits, new TotalHits(totalHits, relation), maxScore == Float.NEGATIVE_INFINITY ? Float.NaN : maxScore).     assertEqualsWithErrorMessageFromXContent(expectedHits, actualHits). }
false;protected;0;4;;@Override protected Reader<InternalTopHits> instanceReader() {     return InternalTopHits::new. }
false;private;0;12;;private SortField[] randomSortFields() {     SortField[] sortFields = new SortField[between(1, 5)].     Set<String> usedSortFields = new HashSet<>().     for (int i = 0. i < sortFields.length. i++) {         String sortField = randomValueOtherThanMany(usedSortFields::contains, () -> randomAlphaOfLength(5)).         usedSortFields.add(sortField).         SortField.Type type = randomValueOtherThanMany(t -> t == SortField.Type.CUSTOM || t == SortField.Type.REWRITEABLE, () -> randomFrom(SortField.Type.values())).         sortFields[i] = new SortField(sortField, type).     }     return sortFields. }
false;private;0;3;;private Comparator<ScoreDoc> scoreDocComparator() {     return innerScoreDocComparator().thenComparing(s -> s.shardIndex). }
false;private;0;27;;private Comparator<ScoreDoc> innerScoreDocComparator() {     if (testInstancesLookSortedByField) {         // Values passed to getComparator shouldn't matter         @SuppressWarnings("rawtypes")         FieldComparator[] comparators = new FieldComparator[testInstancesSortFields.length].         for (int i = 0. i < testInstancesSortFields.length. i++) {             comparators[i] = testInstancesSortFields[i].getComparator(0, 0).         }         return (lhs, rhs) -> {             FieldDoc l = (FieldDoc) lhs.             FieldDoc r = (FieldDoc) rhs.             int i = 0.             while (i < l.fields.length) {                 @SuppressWarnings("unchecked")                 int c = comparators[i].compareValues(l.fields[i], r.fields[i]).                 if (c != 0) {                     return c.                 }                 i++.             }             return 0.         }.     } else {         Comparator<ScoreDoc> comparator = comparing(d -> d.score).         return comparator.reversed().     } }
false;protected;1;40;;@Override protected InternalTopHits mutateInstance(InternalTopHits instance) {     String name = instance.getName().     int from = instance.getFrom().     int size = instance.getSize().     TopDocsAndMaxScore topDocs = instance.getTopDocs().     SearchHits searchHits = instance.getHits().     List<PipelineAggregator> pipelineAggregators = instance.pipelineAggregators().     Map<String, Object> metaData = instance.getMetaData().     switch(between(0, 5)) {         case 0:             name += randomAlphaOfLength(5).             break.         case 1:             from += between(1, 100).             break.         case 2:             size += between(1, 100).             break.         case 3:             topDocs = new TopDocsAndMaxScore(new TopDocs(new TotalHits(topDocs.topDocs.totalHits.value + between(1, 100), topDocs.topDocs.totalHits.relation), topDocs.topDocs.scoreDocs), topDocs.maxScore + randomFloat()).             break.         case 4:             TotalHits totalHits = new TotalHits(searchHits.getTotalHits().value + between(1, 100), randomFrom(TotalHits.Relation.values())).             searchHits = new SearchHits(searchHits.getHits(), totalHits, searchHits.getMaxScore() + randomFloat()).             break.         case 5:             if (metaData == null) {                 metaData = new HashMap<>(1).             } else {                 metaData = new HashMap<>(instance.getMetaData()).             }             metaData.put(randomAlphaOfLength(15), randomInt()).             break.         default:             throw new AssertionError("Illegal randomisation branch").     }     return new InternalTopHits(name, from, size, topDocs, searchHits, pipelineAggregators, metaData). }
