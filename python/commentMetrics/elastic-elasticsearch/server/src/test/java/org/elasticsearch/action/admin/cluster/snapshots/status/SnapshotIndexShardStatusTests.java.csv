commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected SnapshotIndexShardStatus createTestInstance() {     return createForIndex(randomAlphaOfLength(10)). }
false;protected;1;11;;protected SnapshotIndexShardStatus createForIndex(String indexName) {     ShardId shardId = new ShardId(new Index(indexName, IndexMetaData.INDEX_UUID_NA_VALUE), randomIntBetween(0, 500)).     SnapshotIndexShardStage stage = randomFrom(SnapshotIndexShardStage.values()).     SnapshotStats stats = new SnapshotStatsTests().createTestInstance().     String nodeId = randomAlphaOfLength(20).     String failure = null.     if (rarely()) {         failure = randomAlphaOfLength(200).     }     return new SnapshotIndexShardStatus(shardId, stage, stats, nodeId, failure). }
false;protected;0;5;;@Override protected Predicate<String> getRandomFieldsExcludeFilter() {     // Do not place random fields in the root object since its fields correspond to shard names.     return String::isEmpty. }
false;protected;1;8;;@Override protected SnapshotIndexShardStatus doParseInstance(XContentParser parser) throws IOException {     XContentParserUtils.ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation).     XContentParserUtils.ensureExpectedToken(XContentParser.Token.FIELD_NAME, parser.nextToken(), parser::getTokenLocation).     SnapshotIndexShardStatus status = SnapshotIndexShardStatus.fromXContent(parser, parser.currentName()).     XContentParserUtils.ensureExpectedToken(XContentParser.Token.END_OBJECT, parser.nextToken(), parser::getTokenLocation).     return status. }
false;protected;0;4;;@Override protected boolean supportsUnknownFields() {     return true. }
