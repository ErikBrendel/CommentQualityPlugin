commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public void setUp() throws Exception {     super.setUp().     threadPool = new TestThreadPool(NetworkModuleTests.class.getName()). }
false;public;0;5;;@Override public void tearDown() throws Exception {     super.tearDown().     ThreadPool.terminate(threadPool, 10, TimeUnit.SECONDS). }
false;protected;0;2;;@Override protected void doStart() { }
false;protected;0;2;;@Override protected void doStop() { }
false;protected;0;2;;@Override protected void doClose() { }
false;public;0;4;;@Override public BoundTransportAddress boundAddress() {     return null. }
false;public;0;4;;@Override public HttpInfo info() {     return null. }
false;public;0;4;;@Override public HttpStats stats() {     return null. }
false;public;2;2;;@Override public RestChannelConsumer prepareRequest(RestRequest request, NodeClient client) throws IOException {     return channel -> {     }. }
false;public;0;4;;@Override public String getName() {     return "FakeRestHandler". }
false;protected;2;2;;@Override protected RestChannelConsumer doCatRequest(RestRequest request, NodeClient client) {     return channel -> {     }. }
false;protected;1;2;;@Override protected void documentation(StringBuilder sb) { }
false;protected;1;4;;@Override protected Table getTableWithHeader(RestRequest request) {     return null. }
false;public;0;4;;@Override public String getName() {     return "FakeCatRestHandler". }
false;public;6;8;;@Override public Map<String, Supplier<Transport>> getTransports(Settings settings, ThreadPool threadPool, PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService, NamedWriteableRegistry namedWriteableRegistry, NetworkService networkService) {     return Collections.singletonMap("custom", custom). }
false;public;0;22;;public void testRegisterTransport() {     Settings settings = Settings.builder().put(NetworkModule.TRANSPORT_TYPE_KEY, "custom").build().     // content doesn't matter we check reference equality     Supplier<Transport> custom = () -> null.     NetworkPlugin plugin = new NetworkPlugin() {          @Override         public Map<String, Supplier<Transport>> getTransports(Settings settings, ThreadPool threadPool, PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService, NamedWriteableRegistry namedWriteableRegistry, NetworkService networkService) {             return Collections.singletonMap("custom", custom).         }     }.     NetworkModule module = newNetworkModule(settings, false, plugin).     assertFalse(module.isTransportClient()).     assertSame(custom, module.getTransportSupplier()).     // check it works with transport only as well     module = newNetworkModule(settings, true, plugin).     assertSame(custom, module.getTransportSupplier()).     assertTrue(module.isTransportClient()). }
false;public;8;10;;@Override public Map<String, Supplier<HttpServerTransport>> getHttpTransports(Settings settings, ThreadPool threadPool, BigArrays bigArrays, PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService, NamedXContentRegistry xContentRegistry, NetworkService networkService, HttpServerTransport.Dispatcher requestDispatcher) {     return Collections.singletonMap("custom", custom). }
false;public;0;26;;public void testRegisterHttpTransport() {     Settings settings = Settings.builder().put(NetworkModule.HTTP_TYPE_SETTING.getKey(), "custom").put(NetworkModule.TRANSPORT_TYPE_KEY, "local").build().     Supplier<HttpServerTransport> custom = FakeHttpTransport::new.     NetworkModule module = newNetworkModule(settings, false, new NetworkPlugin() {          @Override         public Map<String, Supplier<HttpServerTransport>> getHttpTransports(Settings settings, ThreadPool threadPool, BigArrays bigArrays, PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService, NamedXContentRegistry xContentRegistry, NetworkService networkService, HttpServerTransport.Dispatcher requestDispatcher) {             return Collections.singletonMap("custom", custom).         }     }).     assertSame(custom, module.getHttpServerTransportSupplier()).     assertFalse(module.isTransportClient()).     settings = Settings.builder().put(NetworkModule.TRANSPORT_TYPE_KEY, "local").build().     NetworkModule newModule = newNetworkModule(settings, false).     assertFalse(newModule.isTransportClient()).     expectThrows(IllegalStateException.class, () -> newModule.getHttpServerTransportSupplier()). }
false;public;6;8;;@Override public Map<String, Supplier<Transport>> getTransports(Settings settings, ThreadPool threadPool, PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService, NamedWriteableRegistry namedWriteableRegistry, NetworkService networkService) {     return Collections.singletonMap("default_custom", customTransport). }
false;public;8;13;;@Override public Map<String, Supplier<HttpServerTransport>> getHttpTransports(Settings settings, ThreadPool threadPool, BigArrays bigArrays, PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService, NamedXContentRegistry xContentRegistry, NetworkService networkService, HttpServerTransport.Dispatcher requestDispatcher) {     Map<String, Supplier<HttpServerTransport>> supplierMap = new HashMap<>().     supplierMap.put("custom", custom).     supplierMap.put("default_custom", def).     return supplierMap. }
false;public;0;36;;public void testOverrideDefault() {     Settings settings = Settings.builder().put(NetworkModule.HTTP_TYPE_SETTING.getKey(), "custom").put(NetworkModule.HTTP_DEFAULT_TYPE_SETTING.getKey(), "default_custom").put(NetworkModule.TRANSPORT_DEFAULT_TYPE_SETTING.getKey(), "local").put(NetworkModule.TRANSPORT_TYPE_KEY, "default_custom").build().     // content doesn't matter we check reference equality     Supplier<Transport> customTransport = () -> null.     Supplier<HttpServerTransport> custom = FakeHttpTransport::new.     Supplier<HttpServerTransport> def = FakeHttpTransport::new.     NetworkModule module = newNetworkModule(settings, false, new NetworkPlugin() {          @Override         public Map<String, Supplier<Transport>> getTransports(Settings settings, ThreadPool threadPool, PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService, NamedWriteableRegistry namedWriteableRegistry, NetworkService networkService) {             return Collections.singletonMap("default_custom", customTransport).         }          @Override         public Map<String, Supplier<HttpServerTransport>> getHttpTransports(Settings settings, ThreadPool threadPool, BigArrays bigArrays, PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService, NamedXContentRegistry xContentRegistry, NetworkService networkService, HttpServerTransport.Dispatcher requestDispatcher) {             Map<String, Supplier<HttpServerTransport>> supplierMap = new HashMap<>().             supplierMap.put("custom", custom).             supplierMap.put("default_custom", def).             return supplierMap.         }     }).     assertSame(custom, module.getHttpServerTransportSupplier()).     assertSame(customTransport, module.getTransportSupplier()). }
false;public;6;8;;@Override public Map<String, Supplier<Transport>> getTransports(Settings settings, ThreadPool threadPool, PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService, NamedWriteableRegistry namedWriteableRegistry, NetworkService networkService) {     return Collections.singletonMap("default_custom", customTransport). }
false;public;8;13;;@Override public Map<String, Supplier<HttpServerTransport>> getHttpTransports(Settings settings, ThreadPool threadPool, BigArrays bigArrays, PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService, NamedXContentRegistry xContentRegistry, NetworkService networkService, HttpServerTransport.Dispatcher requestDispatcher) {     Map<String, Supplier<HttpServerTransport>> supplierMap = new HashMap<>().     supplierMap.put("custom", custom).     supplierMap.put("default_custom", def).     return supplierMap. }
false;public;0;35;;public void testDefaultKeys() {     Settings settings = Settings.builder().put(NetworkModule.HTTP_DEFAULT_TYPE_SETTING.getKey(), "default_custom").put(NetworkModule.TRANSPORT_DEFAULT_TYPE_SETTING.getKey(), "default_custom").build().     Supplier<HttpServerTransport> custom = FakeHttpTransport::new.     Supplier<HttpServerTransport> def = FakeHttpTransport::new.     Supplier<Transport> customTransport = () -> null.     NetworkModule module = newNetworkModule(settings, false, new NetworkPlugin() {          @Override         public Map<String, Supplier<Transport>> getTransports(Settings settings, ThreadPool threadPool, PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService, NamedWriteableRegistry namedWriteableRegistry, NetworkService networkService) {             return Collections.singletonMap("default_custom", customTransport).         }          @Override         public Map<String, Supplier<HttpServerTransport>> getHttpTransports(Settings settings, ThreadPool threadPool, BigArrays bigArrays, PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService, NamedXContentRegistry xContentRegistry, NetworkService networkService, HttpServerTransport.Dispatcher requestDispatcher) {             Map<String, Supplier<HttpServerTransport>> supplierMap = new HashMap<>().             supplierMap.put("custom", custom).             supplierMap.put("default_custom", def).             return supplierMap.         }     }).     assertSame(def, module.getHttpServerTransportSupplier()).     assertSame(customTransport, module.getTransportSupplier()). }
false;public;4;12;;@Override public <T extends TransportRequest> TransportRequestHandler<T> interceptHandler(String action, String executor, boolean forceExecution, TransportRequestHandler<T> actualHandler) {     called.incrementAndGet().     if ("foo/bar/boom".equals(action)) {         assertTrue(forceExecution).     } else {         assertFalse(forceExecution).     }     return actualHandler. }
false;public;2;6;;@Override public List<TransportInterceptor> getTransportInterceptors(NamedWriteableRegistry namedWriteableRegistry, ThreadContext threadContext) {     assertNotNull(threadContext).     return Collections.singletonList(interceptor). }
false;public;2;6;;@Override public List<TransportInterceptor> getTransportInterceptors(NamedWriteableRegistry namedWriteableRegistry, ThreadContext threadContext) {     assertNotNull(threadContext).     return Collections.singletonList(null). }
false;public;0;50;;public void testRegisterInterceptor() {     Settings settings = Settings.builder().put(NetworkModule.TRANSPORT_TYPE_KEY, "local").build().     AtomicInteger called = new AtomicInteger(0).     TransportInterceptor interceptor = new TransportInterceptor() {          @Override         public <T extends TransportRequest> TransportRequestHandler<T> interceptHandler(String action, String executor, boolean forceExecution, TransportRequestHandler<T> actualHandler) {             called.incrementAndGet().             if ("foo/bar/boom".equals(action)) {                 assertTrue(forceExecution).             } else {                 assertFalse(forceExecution).             }             return actualHandler.         }     }.     NetworkModule module = newNetworkModule(settings, false, new NetworkPlugin() {          @Override         public List<TransportInterceptor> getTransportInterceptors(NamedWriteableRegistry namedWriteableRegistry, ThreadContext threadContext) {             assertNotNull(threadContext).             return Collections.singletonList(interceptor).         }     }).     TransportInterceptor transportInterceptor = module.getTransportInterceptor().     assertEquals(0, called.get()).     transportInterceptor.interceptHandler("foo/bar/boom", null, true, null).     assertEquals(1, called.get()).     transportInterceptor.interceptHandler("foo/baz/boom", null, false, null).     assertEquals(2, called.get()).     assertTrue(transportInterceptor instanceof NetworkModule.CompositeTransportInterceptor).     assertEquals(((NetworkModule.CompositeTransportInterceptor) transportInterceptor).transportInterceptors.size(), 1).     assertSame(((NetworkModule.CompositeTransportInterceptor) transportInterceptor).transportInterceptors.get(0), interceptor).     NullPointerException nullPointerException = expectThrows(NullPointerException.class, () -> {         newNetworkModule(settings, false, new NetworkPlugin() {              @Override             public List<TransportInterceptor> getTransportInterceptors(NamedWriteableRegistry namedWriteableRegistry, ThreadContext threadContext) {                 assertNotNull(threadContext).                 return Collections.singletonList(null).             }         }).     }).     assertEquals("interceptor must not be null", nullPointerException.getMessage()). }
false;private;3;4;;private NetworkModule newNetworkModule(Settings settings, boolean transportClient, NetworkPlugin... plugins) {     return new NetworkModule(settings, transportClient, Arrays.asList(plugins), threadPool, null, null, null, null, xContentRegistry(), null, new NullDispatcher()). }
