commented;modifiers;parameterAmount;loc;comment;code
false;public;0;38;;public void testNodesInfos() throws Exception {     List<String> nodesIds = internalCluster().startNodes(2).     final String node_1 = nodesIds.get(0).     final String node_2 = nodesIds.get(1).     ClusterHealthResponse clusterHealth = client().admin().cluster().prepareHealth().setWaitForGreenStatus().setWaitForNodes("2").get().     logger.info("--> done cluster_health, status {}", clusterHealth.getStatus()).     String server1NodeId = internalCluster().getInstance(ClusterService.class, node_1).state().nodes().getLocalNodeId().     String server2NodeId = internalCluster().getInstance(ClusterService.class, node_2).state().nodes().getLocalNodeId().     logger.info("--> started nodes: {} and {}", server1NodeId, server2NodeId).     NodesInfoResponse response = client().admin().cluster().prepareNodesInfo().execute().actionGet().     assertThat(response.getNodes().size(), is(2)).     assertThat(response.getNodesMap().get(server1NodeId), notNullValue()).     assertThat(response.getNodesMap().get(server2NodeId), notNullValue()).     response = client().admin().cluster().nodesInfo(nodesInfoRequest()).actionGet().     assertThat(response.getNodes().size(), is(2)).     assertThat(response.getNodesMap().get(server1NodeId), notNullValue()).     assertThat(response.getNodesMap().get(server2NodeId), notNullValue()).     response = client().admin().cluster().nodesInfo(nodesInfoRequest(server1NodeId)).actionGet().     assertThat(response.getNodes().size(), is(1)).     assertThat(response.getNodesMap().get(server1NodeId), notNullValue()).     response = client().admin().cluster().nodesInfo(nodesInfoRequest(server1NodeId)).actionGet().     assertThat(response.getNodes().size(), is(1)).     assertThat(response.getNodesMap().get(server1NodeId), notNullValue()).     response = client().admin().cluster().nodesInfo(nodesInfoRequest(server2NodeId)).actionGet().     assertThat(response.getNodes().size(), is(1)).     assertThat(response.getNodesMap().get(server2NodeId), notNullValue()).     response = client().admin().cluster().nodesInfo(nodesInfoRequest(server2NodeId)).actionGet().     assertThat(response.getNodes().size(), is(1)).     assertThat(response.getNodesMap().get(server2NodeId), notNullValue()). }
false;public;0;33;;public void testNodesInfosTotalIndexingBuffer() throws Exception {     List<String> nodesIds = internalCluster().startNodes(2).     final String node_1 = nodesIds.get(0).     final String node_2 = nodesIds.get(1).     ClusterHealthResponse clusterHealth = client().admin().cluster().prepareHealth().setWaitForGreenStatus().setWaitForNodes("2").get().     logger.info("--> done cluster_health, status {}", clusterHealth.getStatus()).     String server1NodeId = internalCluster().getInstance(ClusterService.class, node_1).state().nodes().getLocalNodeId().     String server2NodeId = internalCluster().getInstance(ClusterService.class, node_2).state().nodes().getLocalNodeId().     logger.info("--> started nodes: {} and {}", server1NodeId, server2NodeId).     NodesInfoResponse response = client().admin().cluster().prepareNodesInfo().execute().actionGet().     assertThat(response.getNodes().size(), is(2)).     assertThat(response.getNodesMap().get(server1NodeId), notNullValue()).     assertNotNull(response.getNodesMap().get(server1NodeId).getTotalIndexingBuffer()).     assertThat(response.getNodesMap().get(server1NodeId).getTotalIndexingBuffer().getBytes(), greaterThan(0L)).     assertThat(response.getNodesMap().get(server2NodeId), notNullValue()).     assertNotNull(response.getNodesMap().get(server2NodeId).getTotalIndexingBuffer()).     assertThat(response.getNodesMap().get(server2NodeId).getTotalIndexingBuffer().getBytes(), greaterThan(0L)).     // again, using only the indices flag     response = client().admin().cluster().prepareNodesInfo().clear().setIndices(true).execute().actionGet().     assertThat(response.getNodes().size(), is(2)).     assertThat(response.getNodesMap().get(server1NodeId), notNullValue()).     assertNotNull(response.getNodesMap().get(server1NodeId).getTotalIndexingBuffer()).     assertThat(response.getNodesMap().get(server1NodeId).getTotalIndexingBuffer().getBytes(), greaterThan(0L)).     assertThat(response.getNodesMap().get(server2NodeId), notNullValue()).     assertNotNull(response.getNodesMap().get(server2NodeId).getTotalIndexingBuffer()).     assertThat(response.getNodesMap().get(server2NodeId).getTotalIndexingBuffer().getBytes(), greaterThan(0L)). }
false;public;0;30;;public void testAllocatedProcessors() throws Exception {     List<String> nodesIds = internalCluster().startNodes(Settings.builder().put(EsExecutors.PROCESSORS_SETTING.getKey(), 3).build(), Settings.builder().put(EsExecutors.PROCESSORS_SETTING.getKey(), 6).build()).     final String node_1 = nodesIds.get(0).     final String node_2 = nodesIds.get(1).     ClusterHealthResponse clusterHealth = client().admin().cluster().prepareHealth().setWaitForGreenStatus().setWaitForNodes("2").get().     logger.info("--> done cluster_health, status {}", clusterHealth.getStatus()).     String server1NodeId = internalCluster().getInstance(ClusterService.class, node_1).state().nodes().getLocalNodeId().     String server2NodeId = internalCluster().getInstance(ClusterService.class, node_2).state().nodes().getLocalNodeId().     logger.info("--> started nodes: {} and {}", server1NodeId, server2NodeId).     NodesInfoResponse response = client().admin().cluster().prepareNodesInfo().execute().actionGet().     assertThat(response.getNodes().size(), is(2)).     assertThat(response.getNodesMap().get(server1NodeId), notNullValue()).     assertThat(response.getNodesMap().get(server2NodeId), notNullValue()).     assertThat(response.getNodesMap().get(server1NodeId).getOs().getAvailableProcessors(), equalTo(Runtime.getRuntime().availableProcessors())).     assertThat(response.getNodesMap().get(server2NodeId).getOs().getAvailableProcessors(), equalTo(Runtime.getRuntime().availableProcessors())).     assertThat(response.getNodesMap().get(server1NodeId).getOs().getAllocatedProcessors(), equalTo(3)).     assertThat(response.getNodesMap().get(server2NodeId).getOs().getAllocatedProcessors(), equalTo(6)). }
