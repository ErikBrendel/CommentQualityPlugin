commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;public void testValidOrdinals() {     assertThat(SpatialStrategy.TERM.ordinal(), equalTo(0)).     assertThat(SpatialStrategy.RECURSIVE.ordinal(), equalTo(1)). }
false;public;0;15;;public void testwriteTo() throws Exception {     try (BytesStreamOutput out = new BytesStreamOutput()) {         SpatialStrategy.TERM.writeTo(out).         try (StreamInput in = out.bytes().streamInput()) {             assertThat(in.readVInt(), equalTo(0)).         }     }     try (BytesStreamOutput out = new BytesStreamOutput()) {         SpatialStrategy.RECURSIVE.writeTo(out).         try (StreamInput in = out.bytes().streamInput()) {             assertThat(in.readVInt(), equalTo(1)).         }     } }
false;public;0;14;;public void testReadFrom() throws Exception {     try (BytesStreamOutput out = new BytesStreamOutput()) {         out.writeVInt(0).         try (StreamInput in = out.bytes().streamInput()) {             assertThat(SpatialStrategy.readFromStream(in), equalTo(SpatialStrategy.TERM)).         }     }     try (BytesStreamOutput out = new BytesStreamOutput()) {         out.writeVInt(1).         try (StreamInput in = out.bytes().streamInput()) {             assertThat(SpatialStrategy.readFromStream(in), equalTo(SpatialStrategy.RECURSIVE)).         }     } }
false;public;0;11;;public void testInvalidReadFrom() throws Exception {     try (BytesStreamOutput out = new BytesStreamOutput()) {         out.writeVInt(randomIntBetween(2, Integer.MAX_VALUE)).         try (StreamInput in = out.bytes().streamInput()) {             SpatialStrategy.readFromStream(in).             fail("Expected IOException").         } catch (IOException e) {             assertThat(e.getMessage(), containsString("Unknown SpatialStrategy ordinal [")).         }     } }
