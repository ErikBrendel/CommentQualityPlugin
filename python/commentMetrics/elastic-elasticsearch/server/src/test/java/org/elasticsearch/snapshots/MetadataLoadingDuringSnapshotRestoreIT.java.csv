commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     // counts the number of times metadata are loaded     return Collections.singletonList(CountingMockRepositoryPlugin.class). }
false;public;0;85;;public void testWhenMetadataAreLoaded() throws Exception {     createIndex("docs").     indexRandom(true, client().prepareIndex("docs", "doc", "1").setSource("rank", 1), client().prepareIndex("docs", "doc", "2").setSource("rank", 2), client().prepareIndex("docs", "doc", "3").setSource("rank", 3), client().prepareIndex("others", "other").setSource("rank", 4), client().prepareIndex("others", "other").setSource("rank", 5)).     assertAcked(client().admin().cluster().preparePutRepository("repository").setType("coutingmock").setSettings(Settings.builder().put("location", randomRepoPath()))).     // Creating a snapshot does not load any metadata     CreateSnapshotResponse createSnapshotResponse = client().admin().cluster().prepareCreateSnapshot("repository", "snap").setIncludeGlobalState(true).setWaitForCompletion(true).get().     assertThat(createSnapshotResponse.getSnapshotInfo().failedShards(), equalTo(0)).     assertThat(createSnapshotResponse.getSnapshotInfo().status(), equalTo(RestStatus.OK)).     assertGlobalMetadataLoads("snap", 0).     assertIndexMetadataLoads("snap", "docs", 0).     assertIndexMetadataLoads("snap", "others", 0).     // Getting a snapshot does not load any metadata     GetSnapshotsResponse getSnapshotsResponse = client().admin().cluster().prepareGetSnapshots("repository").addSnapshots("snap").setVerbose(randomBoolean()).get().     assertThat(getSnapshotsResponse.getSnapshots(), hasSize(1)).     assertGlobalMetadataLoads("snap", 0).     assertIndexMetadataLoads("snap", "docs", 0).     assertIndexMetadataLoads("snap", "others", 0).     // Getting the status of a snapshot loads indices metadata but not global metadata     SnapshotsStatusResponse snapshotStatusResponse = client().admin().cluster().prepareSnapshotStatus("repository").setSnapshots("snap").get().     assertThat(snapshotStatusResponse.getSnapshots(), hasSize(1)).     assertGlobalMetadataLoads("snap", 0).     assertIndexMetadataLoads("snap", "docs", 1).     assertIndexMetadataLoads("snap", "others", 1).     assertAcked(client().admin().indices().prepareDelete("docs", "others")).     // Restoring a snapshot loads indices metadata but not the global state     RestoreSnapshotResponse restoreSnapshotResponse = client().admin().cluster().prepareRestoreSnapshot("repository", "snap").setWaitForCompletion(true).get().     assertThat(restoreSnapshotResponse.getRestoreInfo().failedShards(), equalTo(0)).     assertThat(restoreSnapshotResponse.getRestoreInfo().status(), equalTo(RestStatus.OK)).     assertGlobalMetadataLoads("snap", 0).     assertIndexMetadataLoads("snap", "docs", 2).     assertIndexMetadataLoads("snap", "others", 2).     assertAcked(client().admin().indices().prepareDelete("docs")).     // Restoring a snapshot with selective indices loads only required index metadata     restoreSnapshotResponse = client().admin().cluster().prepareRestoreSnapshot("repository", "snap").setIndices("docs").setWaitForCompletion(true).get().     assertThat(restoreSnapshotResponse.getRestoreInfo().failedShards(), equalTo(0)).     assertThat(restoreSnapshotResponse.getRestoreInfo().status(), equalTo(RestStatus.OK)).     assertGlobalMetadataLoads("snap", 0).     assertIndexMetadataLoads("snap", "docs", 3).     assertIndexMetadataLoads("snap", "others", 2).     assertAcked(client().admin().indices().prepareDelete("docs", "others")).     // Restoring a snapshot including the global state loads it with the index metadata     restoreSnapshotResponse = client().admin().cluster().prepareRestoreSnapshot("repository", "snap").setIndices("docs", "oth*").setRestoreGlobalState(true).setWaitForCompletion(true).get().     assertThat(restoreSnapshotResponse.getRestoreInfo().failedShards(), equalTo(0)).     assertThat(restoreSnapshotResponse.getRestoreInfo().status(), equalTo(RestStatus.OK)).     assertGlobalMetadataLoads("snap", 1).     assertIndexMetadataLoads("snap", "docs", 4).     assertIndexMetadataLoads("snap", "others", 3).     // Deleting a snapshot does not load the global metadata state but loads each index metadata     assertAcked(client().admin().cluster().prepareDeleteSnapshot("repository", "snap").get()).     assertGlobalMetadataLoads("snap", 1).     assertIndexMetadataLoads("snap", "docs", 5).     assertIndexMetadataLoads("snap", "others", 4). }
false;private;2;8;;private void assertGlobalMetadataLoads(final String snapshot, final int times) {     AtomicInteger count = getCountingMockRepository().globalMetadata.get(snapshot).     if (times == 0) {         assertThat("Global metadata for " + snapshot + " must not have been loaded", count, nullValue()).     } else {         assertThat("Global metadata for " + snapshot + " must have been loaded " + times + " times", count.get(), equalTo(times)).     } }
false;private;3;9;;private void assertIndexMetadataLoads(final String snapshot, final String index, final int times) {     final String key = key(snapshot, index).     AtomicInteger count = getCountingMockRepository().indicesMetadata.get(key).     if (times == 0) {         assertThat("Index metadata for " + key + " must not have been loaded", count, nullValue()).     } else {         assertThat("Index metadata for " + key + " must have been loaded " + times + " times", count.get(), equalTo(times)).     } }
false;private;0;7;;private CountingMockRepository getCountingMockRepository() {     String master = internalCluster().getMasterName().     RepositoriesService repositoriesService = internalCluster().getInstance(RepositoriesService.class, master).     Repository repository = repositoriesService.repository("repository").     assertThat(repository, instanceOf(CountingMockRepository.class)).     return (CountingMockRepository) repository. }
true;private,static;2;3;/**  * Compute a map key for the given snapshot and index names *  */ ;/**  * Compute a map key for the given snapshot and index names *  */ private static String key(final String snapshot, final String index) {     return snapshot + ":" + index. }
false;public;1;5;;@Override public MetaData getSnapshotGlobalMetaData(SnapshotId snapshotId) {     globalMetadata.computeIfAbsent(snapshotId.getName(), (s) -> new AtomicInteger(0)).incrementAndGet().     return super.getSnapshotGlobalMetaData(snapshotId). }
false;public;2;5;;@Override public IndexMetaData getSnapshotIndexMetaData(SnapshotId snapshotId, IndexId indexId) throws IOException {     indicesMetadata.computeIfAbsent(key(snapshotId.getName(), indexId.getName()), (s) -> new AtomicInteger(0)).incrementAndGet().     return super.getSnapshotIndexMetaData(snapshotId, indexId). }
false;public;2;4;;@Override public Map<String, Repository.Factory> getRepositories(Environment env, NamedXContentRegistry namedXContentRegistry) {     return Collections.singletonMap("coutingmock", (metadata) -> new CountingMockRepository(metadata, env, namedXContentRegistry)). }
