commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;public void setUp() throws Exception {     super.setUp().     IndicesModule indicesModule = new IndicesModule(Collections.emptyList()).     searchExtPlugin = new TestSearchExtPlugin().     SearchModule searchModule = new SearchModule(Settings.EMPTY, false, Collections.singletonList(searchExtPlugin)).     List<NamedWriteableRegistry.Entry> entries = new ArrayList<>().     entries.addAll(indicesModule.getNamedWriteables()).     entries.addAll(searchModule.getNamedWriteables()).     namedWriteableRegistry = new NamedWriteableRegistry(entries).     xContentRegistry = new NamedXContentRegistry(searchModule.getNamedXContents()). }
false;protected;0;4;;@Override protected NamedXContentRegistry xContentRegistry() {     return xContentRegistry. }
false;protected;0;20;;protected SearchSourceBuilder createSearchSourceBuilder() {     Supplier<List<SearchExtBuilder>> randomExtBuilders = () -> {         Set<String> elementNames = new HashSet<>(searchExtPlugin.getSupportedElements().keySet()).         int numSearchExts = randomIntBetween(1, elementNames.size()).         while (elementNames.size() > numSearchExts) {             elementNames.remove(randomFrom(elementNames)).         }         List<SearchExtBuilder> searchExtBuilders = new ArrayList<>().         for (String elementName : elementNames) {             searchExtBuilders.add(searchExtPlugin.getSupportedElements().get(elementName).apply(randomAlphaOfLengthBetween(3, 10))).         }         return searchExtBuilders.     }.     return RandomSearchRequestGenerator.randomSearchSourceBuilder(HighlightBuilderTests::randomHighlighterBuilder, SuggestBuilderTests::randomSuggestBuilder, QueryRescorerBuilderTests::randomRescoreBuilder, randomExtBuilders, CollapseBuilderTests::randomCollapseBuilder). }
false;protected;0;3;;protected SearchRequest createSearchRequest() throws IOException {     return RandomSearchRequestGenerator.randomSearchRequest(this::createSearchSourceBuilder). }
false;;0;3;;Map<String, Function<String, ? extends SearchExtBuilder>> getSupportedElements() {     return supportedElements. }
false;public;0;4;;@Override public List<SearchExtSpec<?>> getSearchExts() {     return searchExtSpecs. }
false;public;1;4;;@Override public T apply(XContentParser parser) throws IOException {     return searchExtBuilderFunction.apply(parseField(parser)). }
false;;1;19;;String parseField(XContentParser parser) throws IOException {     if (parser.currentToken() != XContentParser.Token.START_OBJECT) {         throw new ParsingException(parser.getTokenLocation(), "start_object expected, found " + parser.currentToken()).     }     if (parser.nextToken() != XContentParser.Token.FIELD_NAME) {         throw new ParsingException(parser.getTokenLocation(), "field_name expected, found " + parser.currentToken()).     }     String field = parser.currentName().     if (parser.nextToken() != XContentParser.Token.START_OBJECT) {         throw new ParsingException(parser.getTokenLocation(), "start_object expected, found " + parser.currentToken()).     }     if (parser.nextToken() != XContentParser.Token.END_OBJECT) {         throw new ParsingException(parser.getTokenLocation(), "end_object expected, found " + parser.currentToken()).     }     if (parser.nextToken() != XContentParser.Token.END_OBJECT) {         throw new ParsingException(parser.getTokenLocation(), "end_object expected, found " + parser.currentToken()).     }     return field. }
false;public;1;4;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(objectName). }
false;public;1;12;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     TestSearchExtBuilder that = (TestSearchExtBuilder) o.     return Objects.equals(objectName, that.objectName) && Objects.equals(name, that.name). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(objectName, name). }
false;public;0;4;;@Override public String getWriteableName() {     return name. }
false;public;2;8;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(name).     builder.startObject(objectName).     builder.endObject().     builder.endObject().     return builder. }
