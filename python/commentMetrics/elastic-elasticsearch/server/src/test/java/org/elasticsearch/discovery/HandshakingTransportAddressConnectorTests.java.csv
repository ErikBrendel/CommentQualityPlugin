commented;modifiers;parameterAmount;loc;comment;code
false;protected;4;9;;@Override protected void onSendRequest(long requestId, String action, TransportRequest request, DiscoveryNode node) {     super.onSendRequest(requestId, action, request, node).     assertThat(action, equalTo(TransportService.HANDSHAKE_ACTION_NAME)).     assertEquals(remoteNode.getAddress(), node.getAddress()).     if (dropHandshake == false) {         handleResponse(requestId, new HandshakeResponse(remoteNode, new ClusterName(remoteClusterName), Version.CURRENT)).     } }
false;public;0;33;;@Before public void startServices() {     localNode = new DiscoveryNode("local-node", buildNewFakeTransportAddress(), Version.CURRENT).     final Settings settings = Settings.builder().put(NODE_NAME_SETTING.getKey(), "node").put(CLUSTER_NAME_SETTING.getKey(), "local-cluster").build().     threadPool = new TestThreadPool("node", settings).     remoteNode = null.     remoteClusterName = null.     dropHandshake = false.     final MockTransport mockTransport = new MockTransport() {          @Override         protected void onSendRequest(long requestId, String action, TransportRequest request, DiscoveryNode node) {             super.onSendRequest(requestId, action, request, node).             assertThat(action, equalTo(TransportService.HANDSHAKE_ACTION_NAME)).             assertEquals(remoteNode.getAddress(), node.getAddress()).             if (dropHandshake == false) {                 handleResponse(requestId, new HandshakeResponse(remoteNode, new ClusterName(remoteClusterName), Version.CURRENT)).             }         }     }.     transportService = mockTransport.createTransportService(settings, threadPool, TransportService.NOOP_TRANSPORT_INTERCEPTOR, address -> localNode, null, emptySet()).     transportService.start().     transportService.acceptIncomingRequests().     handshakingTransportAddressConnector = new HandshakingTransportAddressConnector(settings, transportService). }
false;public;0;5;;@After public void stopServices() throws InterruptedException {     transportService.stop().     terminate(threadPool). }
false;public;1;5;;@Override public void onResponse(DiscoveryNode discoveryNode) {     receivedNode.set(discoveryNode).     completionLatch.countDown(). }
false;public;1;4;;@Override public void onFailure(Exception e) {     throw new AssertionError(e). }
false;public;0;23;;public void testConnectsToMasterNode() throws InterruptedException {     final CountDownLatch completionLatch = new CountDownLatch(1).     final SetOnce<DiscoveryNode> receivedNode = new SetOnce<>().     remoteNode = new DiscoveryNode("remote-node", buildNewFakeTransportAddress(), Version.CURRENT).     remoteClusterName = "local-cluster".     handshakingTransportAddressConnector.connectToRemoteMasterNode(remoteNode.getAddress(), new ActionListener<DiscoveryNode>() {          @Override         public void onResponse(DiscoveryNode discoveryNode) {             receivedNode.set(discoveryNode).             completionLatch.countDown().         }          @Override         public void onFailure(Exception e) {             throw new AssertionError(e).         }     }).     assertTrue(completionLatch.await(30, TimeUnit.SECONDS)).     assertEquals(remoteNode, receivedNode.get()). }
false;public;0;8;;public void testDoesNotConnectToNonMasterNode() throws InterruptedException {     remoteNode = new DiscoveryNode("remote-node", buildNewFakeTransportAddress(), emptyMap(), emptySet(), Version.CURRENT).     remoteClusterName = "local-cluster".     FailureListener failureListener = new FailureListener().     handshakingTransportAddressConnector.connectToRemoteMasterNode(remoteNode.getAddress(), failureListener).     failureListener.assertFailure(). }
false;public;0;8;;public void testDoesNotConnectToLocalNode() throws Exception {     remoteNode = localNode.     remoteClusterName = "local-cluster".     FailureListener failureListener = new FailureListener().     handshakingTransportAddressConnector.connectToRemoteMasterNode(remoteNode.getAddress(), failureListener).     failureListener.assertFailure(). }
false;public;0;8;;public void testDoesNotConnectToDifferentCluster() throws InterruptedException {     remoteNode = new DiscoveryNode("remote-node", buildNewFakeTransportAddress(), Version.CURRENT).     remoteClusterName = "another-cluster".     FailureListener failureListener = new FailureListener().     handshakingTransportAddressConnector.connectToRemoteMasterNode(remoteNode.getAddress(), failureListener).     failureListener.assertFailure(). }
false;public;0;10;;public void testHandshakeTimesOut() throws InterruptedException {     remoteNode = new DiscoveryNode("remote-node", buildNewFakeTransportAddress(), Version.CURRENT).     remoteClusterName = "local-cluster".     dropHandshake = true.     FailureListener failureListener = new FailureListener().     handshakingTransportAddressConnector.connectToRemoteMasterNode(remoteNode.getAddress(), failureListener).     Thread.sleep(PROBE_HANDSHAKE_TIMEOUT_SETTING.get(Settings.EMPTY).millis()).     failureListener.assertFailure(). }
false;public;1;4;;@Override public void onResponse(DiscoveryNode discoveryNode) {     fail(discoveryNode.toString()). }
false;public;1;4;;@Override public void onFailure(Exception e) {     completionLatch.countDown(). }
false;;0;3;;void assertFailure() throws InterruptedException {     assertTrue(completionLatch.await(30, TimeUnit.SECONDS)). }
