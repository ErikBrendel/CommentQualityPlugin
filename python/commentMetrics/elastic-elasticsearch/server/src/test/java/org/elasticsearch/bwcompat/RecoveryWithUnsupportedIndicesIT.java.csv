commented;modifiers;parameterAmount;loc;comment;code
true;protected;1;38;/**  * Return settings that could be used to start a node that has the given zipped home directory.  */ ;/**  * Return settings that could be used to start a node that has the given zipped home directory.  */ protected Settings prepareBackwardsDataDir(Path backwardsIndex) throws IOException {     Path indexDir = createTempDir().     Path dataDir = indexDir.resolve("data").     try (InputStream stream = Files.newInputStream(backwardsIndex)) {         TestUtil.unzip(stream, indexDir).     }     assertTrue(Files.exists(dataDir)).     // list clusters in the datapath, ignoring anything from extrasfs     final Path[] list.     try (DirectoryStream<Path> stream = Files.newDirectoryStream(dataDir)) {         List<Path> dirs = new ArrayList<>().         for (Path p : stream) {             if (!p.getFileName().toString().startsWith("extra")) {                 dirs.add(p).             }         }         list = dirs.toArray(new Path[0]).     }     if (list.length != 1) {         StringBuilder builder = new StringBuilder("Backwards index must contain exactly one cluster\n").         for (Path line : list) {             builder.append(line.toString()).append('\n').         }         throw new IllegalStateException(builder.toString()).     }     Path src = list[0].resolve(NodeEnvironment.NODES_FOLDER).     Path dest = dataDir.resolve(NodeEnvironment.NODES_FOLDER).     assertTrue(Files.exists(src)).     Files.move(src, dest).     assertFalse(Files.exists(src)).     assertTrue(Files.exists(dest)).     Settings.Builder builder = Settings.builder().put(Environment.PATH_DATA_SETTING.getKey(), dataDir.toAbsolutePath()).     return builder.build(). }
false;public;0;8;;public void testUpgradeStartClusterOn_2_4_5() throws Exception {     String indexName = "unsupported-2.4.5".     logger.info("Checking static index {}", indexName).     Settings nodeSettings = prepareBackwardsDataDir(getBwcIndicesPath().resolve(indexName + ".zip")).     assertThat(expectThrows(Exception.class, () -> internalCluster().startNode(nodeSettings)).getCause().getCause().getMessage(), containsString("Format version is not supported")). }
