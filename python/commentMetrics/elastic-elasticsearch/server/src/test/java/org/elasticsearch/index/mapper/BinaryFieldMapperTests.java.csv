commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> getPlugins() {     return pluginList(InternalSettingsPlugin.class). }
false;public;0;15;;public void testDefaultMapping() throws Exception {     XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "binary").endObject().endObject().endObject().endObject().     MapperService mapperService = createIndex("test", Settings.EMPTY, "type", mapping).mapperService().     MappedFieldType fieldType = mapperService.fullName("field").     assertThat(fieldType, instanceOf(BinaryFieldMapper.BinaryFieldType.class)).     assertThat(fieldType.stored(), equalTo(false)). }
false;public;0;36;;public void testStoredValue() throws IOException {     XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "binary").field("store", true).endObject().endObject().endObject().endObject().     MapperService mapperService = createIndex("test", Settings.EMPTY, "type", mapping).mapperService().     // case 1: a simple binary value     final byte[] binaryValue1 = new byte[100].     binaryValue1[56] = 1.     // case 2: a value that looks compressed: this used to fail in 1.x     BytesStreamOutput out = new BytesStreamOutput().     try (StreamOutput compressed = CompressorFactory.COMPRESSOR.streamOutput(out)) {         new BytesArray(binaryValue1).writeTo(compressed).     }     final byte[] binaryValue2 = BytesReference.toBytes(out.bytes()).     assertTrue(CompressorFactory.isCompressed(new BytesArray(binaryValue2))).     for (byte[] value : Arrays.asList(binaryValue1, binaryValue2)) {         ParsedDocument doc = mapperService.documentMapper().parse(new SourceToParse("test", "type", "id", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field", value).endObject()), XContentType.JSON)).         BytesRef indexedValue = doc.rootDoc().getBinaryValue("field").         assertEquals(new BytesRef(value), indexedValue).         MappedFieldType fieldType = mapperService.fullName("field").         Object originalValue = fieldType.valueForDisplay(indexedValue).         assertEquals(new BytesArray(value), originalValue).     } }
false;public;0;11;;public void testEmptyName() throws IOException {     // after 5.x     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("").field("type", "binary").endObject().endObject().endObject().endObject()).     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> createIndex("test").mapperService().documentMapperParser().parse("type", new CompressedXContent(mapping))).     assertThat(e.getMessage(), containsString("name cannot be empty string")). }
