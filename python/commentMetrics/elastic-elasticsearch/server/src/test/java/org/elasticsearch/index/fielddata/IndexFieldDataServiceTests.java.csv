commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> getPlugins() {     return pluginList(InternalSettingsPlugin.class). }
false;public;0;34;;public void testGetForFieldDefaults() {     final IndexService indexService = createIndex("test").     final IndicesService indicesService = getInstanceFromNode(IndicesService.class).     final IndexFieldDataService ifdService = new IndexFieldDataService(indexService.getIndexSettings(), indicesService.getIndicesFieldDataCache(), indicesService.getCircuitBreakerService(), indexService.mapperService()).     final BuilderContext ctx = new BuilderContext(indexService.getIndexSettings().getSettings(), new ContentPath(1)).     final MappedFieldType stringMapper = new KeywordFieldMapper.Builder("string").build(ctx).fieldType().     ifdService.clear().     IndexFieldData<?> fd = ifdService.getForField(stringMapper).     assertTrue(fd instanceof SortedSetDVOrdinalsIndexFieldData).     for (MappedFieldType mapper : Arrays.asList(new NumberFieldMapper.Builder("int", NumberFieldMapper.NumberType.BYTE).build(ctx).fieldType(), new NumberFieldMapper.Builder("int", NumberFieldMapper.NumberType.SHORT).build(ctx).fieldType(), new NumberFieldMapper.Builder("int", NumberFieldMapper.NumberType.INTEGER).build(ctx).fieldType(), new NumberFieldMapper.Builder("long", NumberFieldMapper.NumberType.LONG).build(ctx).fieldType())) {         ifdService.clear().         fd = ifdService.getForField(mapper).         assertTrue(fd instanceof SortedNumericDVIndexFieldData).     }     final MappedFieldType floatMapper = new NumberFieldMapper.Builder("float", NumberFieldMapper.NumberType.FLOAT).build(ctx).fieldType().     ifdService.clear().     fd = ifdService.getForField(floatMapper).     assertTrue(fd instanceof SortedNumericDVIndexFieldData).     final MappedFieldType doubleMapper = new NumberFieldMapper.Builder("double", NumberFieldMapper.NumberType.DOUBLE).build(ctx).fieldType().     ifdService.clear().     fd = ifdService.getForField(doubleMapper).     assertTrue(fd instanceof SortedNumericDVIndexFieldData). }
false;public;3;4;;@Override public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) {     onCacheCalled.incrementAndGet(). }
false;public;4;4;;@Override public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) {     onRemovalCalled.incrementAndGet(). }
false;public;0;59;;public void testClearField() throws Exception {     final IndexService indexService = createIndex("test").     final IndicesService indicesService = getInstanceFromNode(IndicesService.class).     // copy the ifdService since we can set the listener only once.     final IndexFieldDataService ifdService = new IndexFieldDataService(indexService.getIndexSettings(), indicesService.getIndicesFieldDataCache(), indicesService.getCircuitBreakerService(), indexService.mapperService()).     final BuilderContext ctx = new BuilderContext(indexService.getIndexSettings().getSettings(), new ContentPath(1)).     final MappedFieldType mapper1 = new TextFieldMapper.Builder("field_1").fielddata(true).build(ctx).fieldType().     final MappedFieldType mapper2 = new TextFieldMapper.Builder("field_2").fielddata(true).build(ctx).fieldType().     final IndexWriter writer = new IndexWriter(new RAMDirectory(), new IndexWriterConfig(new KeywordAnalyzer())).     Document doc = new Document().     doc.add(new StringField("field_1", "thisisastring", Store.NO)).     doc.add(new StringField("field_2", "thisisanotherstring", Store.NO)).     writer.addDocument(doc).     final IndexReader reader = DirectoryReader.open(writer).     final AtomicInteger onCacheCalled = new AtomicInteger().     final AtomicInteger onRemovalCalled = new AtomicInteger().     ifdService.setListener(new IndexFieldDataCache.Listener() {          @Override         public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) {             onCacheCalled.incrementAndGet().         }          @Override         public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) {             onRemovalCalled.incrementAndGet().         }     }).     IndexFieldData<?> ifd1 = ifdService.getForField(mapper1).     IndexFieldData<?> ifd2 = ifdService.getForField(mapper2).     LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0).     AtomicFieldData loadField1 = ifd1.load(leafReaderContext).     AtomicFieldData loadField2 = ifd2.load(leafReaderContext).     assertEquals(2, onCacheCalled.get()).     assertEquals(0, onRemovalCalled.get()).     ifdService.clearField("field_1").     assertEquals(2, onCacheCalled.get()).     assertEquals(1, onRemovalCalled.get()).     ifdService.clearField("field_1").     assertEquals(2, onCacheCalled.get()).     assertEquals(1, onRemovalCalled.get()).     ifdService.clearField("field_2").     assertEquals(2, onCacheCalled.get()).     assertEquals(2, onRemovalCalled.get()).     reader.close().     loadField1.close().     loadField2.close().     writer.close().     ifdService.clear(). }
false;public;3;9;;@Override public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) {     if (wrap) {         assertEquals(new ShardId("test", "_na_", 1), shardId).     } else {         assertNull(shardId).     }     onCacheCalled.incrementAndGet(). }
false;public;4;9;;@Override public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) {     if (wrap) {         assertEquals(new ShardId("test", "_na_", 1), shardId).     } else {         assertNull(shardId).     }     onRemovalCalled.incrementAndGet(). }
false;public;0;51;;public void testFieldDataCacheListener() throws Exception {     final IndexService indexService = createIndex("test").     final IndicesService indicesService = getInstanceFromNode(IndicesService.class).     // copy the ifdService since we can set the listener only once.     final IndexFieldDataService ifdService = new IndexFieldDataService(indexService.getIndexSettings(), indicesService.getIndicesFieldDataCache(), indicesService.getCircuitBreakerService(), indexService.mapperService()).     final BuilderContext ctx = new BuilderContext(indexService.getIndexSettings().getSettings(), new ContentPath(1)).     final MappedFieldType mapper1 = new TextFieldMapper.Builder("s").fielddata(true).build(ctx).fieldType().     final IndexWriter writer = new IndexWriter(new RAMDirectory(), new IndexWriterConfig(new KeywordAnalyzer())).     Document doc = new Document().     doc.add(new StringField("s", "thisisastring", Store.NO)).     writer.addDocument(doc).     DirectoryReader open = DirectoryReader.open(writer).     final boolean wrap = randomBoolean().     final IndexReader reader = wrap ? ElasticsearchDirectoryReader.wrap(open, new ShardId("test", "_na_", 1)) : open.     final AtomicInteger onCacheCalled = new AtomicInteger().     final AtomicInteger onRemovalCalled = new AtomicInteger().     ifdService.setListener(new IndexFieldDataCache.Listener() {          @Override         public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) {             if (wrap) {                 assertEquals(new ShardId("test", "_na_", 1), shardId).             } else {                 assertNull(shardId).             }             onCacheCalled.incrementAndGet().         }          @Override         public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) {             if (wrap) {                 assertEquals(new ShardId("test", "_na_", 1), shardId).             } else {                 assertNull(shardId).             }             onRemovalCalled.incrementAndGet().         }     }).     IndexFieldData<?> ifd = ifdService.getForField(mapper1).     LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0).     AtomicFieldData load = ifd.load(leafReaderContext).     assertEquals(1, onCacheCalled.get()).     assertEquals(0, onRemovalCalled.get()).     reader.close().     load.close().     writer.close().     assertEquals(1, onCacheCalled.get()).     assertEquals(1, onRemovalCalled.get()).     ifdService.clear(). }
false;public;3;4;;@Override public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) { }
false;public;4;4;;@Override public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) { }
false;public;3;4;;@Override public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) { }
false;public;4;4;;@Override public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) { }
false;public;0;35;;public void testSetCacheListenerTwice() {     final IndexService indexService = createIndex("test").     final IndicesService indicesService = getInstanceFromNode(IndicesService.class).     final IndexFieldDataService shardPrivateService = new IndexFieldDataService(indexService.getIndexSettings(), indicesService.getIndicesFieldDataCache(), indicesService.getCircuitBreakerService(), indexService.mapperService()).     // set it the first time...     shardPrivateService.setListener(new IndexFieldDataCache.Listener() {          @Override         public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) {         }          @Override         public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) {         }     }).     // now set it again and make sure we fail     try {         shardPrivateService.setListener(new IndexFieldDataCache.Listener() {              @Override             public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) {             }              @Override             public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) {             }         }).         fail("listener already set").     } catch (IllegalStateException ex) {     // all well     } }
false;private;1;20;;private void doTestRequireDocValues(MappedFieldType ft) {     ThreadPool threadPool = new TestThreadPool("random_threadpool_name").     try {         IndicesFieldDataCache cache = new IndicesFieldDataCache(Settings.EMPTY, null).         IndexFieldDataService ifds = new IndexFieldDataService(IndexSettingsModule.newIndexSettings("test", Settings.EMPTY), cache, null, null).         ft.setName("some_long").         ft.setHasDocValues(true).         // no exception         ifds.getForField(ft).         ft.setHasDocValues(false).         try {             ifds.getForField(ft).             fail().         } catch (IllegalArgumentException e) {             assertThat(e.getMessage(), containsString("doc values")).         }     } finally {         threadPool.shutdown().     } }
false;public;0;3;;public void testRequireDocValuesOnLongs() {     doTestRequireDocValues(new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.LONG)). }
false;public;0;3;;public void testRequireDocValuesOnDoubles() {     doTestRequireDocValues(new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.DOUBLE)). }
false;public;0;3;;public void testRequireDocValuesOnBools() {     doTestRequireDocValues(new BooleanFieldMapper.BooleanFieldType()). }
