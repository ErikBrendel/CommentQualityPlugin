commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected int maximumNumberOfReplicas() {     return 1. }
false;public;0;65;;public void testFailedSearchWithWrongQuery() throws Exception {     logger.info("Start Testing failed search with wrong query").     assertAcked(prepareCreate("test", 1).addMapping("type", "foo", "type=geo_point")).     NumShards test = getNumShards("test").     for (int i = 0. i < 100. i++) {         index(client(), Integer.toString(i), "test", i).     }     RefreshResponse refreshResponse = client().admin().indices().refresh(refreshRequest("test")).actionGet().     assertThat(refreshResponse.getTotalShards(), equalTo(test.totalNumShards)).     assertThat(refreshResponse.getSuccessfulShards(), equalTo(test.numPrimaries)).     assertThat(refreshResponse.getFailedShards(), equalTo(0)).     for (int i = 0. i < 5. i++) {         try {             SearchResponse searchResponse = client().search(searchRequest("test").source(new SearchSourceBuilder().query(new MatchQueryBuilder("foo", "biz")))).actionGet().             assertThat(searchResponse.getTotalShards(), equalTo(test.numPrimaries)).             assertThat(searchResponse.getSuccessfulShards(), equalTo(0)).             assertThat(searchResponse.getFailedShards(), equalTo(test.numPrimaries)).             fail("search should fail").         } catch (ElasticsearchException e) {             assertThat(e.unwrapCause(), instanceOf(SearchPhaseExecutionException.class)).         // all is well         }     }     allowNodes("test", 2).     assertThat(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForNodes(">=2").get().isTimedOut(), equalTo(false)).     logger.info("Running Cluster Health").     ClusterHealthResponse clusterHealth = client().admin().cluster().health(clusterHealthRequest("test").waitForYellowStatus().waitForNoRelocatingShards(true).waitForActiveShards(test.totalNumShards)).actionGet().     logger.info("Done Cluster Health, status {}", clusterHealth.getStatus()).     assertThat(clusterHealth.isTimedOut(), equalTo(false)).     assertThat(clusterHealth.getStatus(), anyOf(equalTo(ClusterHealthStatus.YELLOW), equalTo(ClusterHealthStatus.GREEN))).     assertThat(clusterHealth.getActiveShards(), equalTo(test.totalNumShards)).     refreshResponse = client().admin().indices().refresh(refreshRequest("test")).actionGet().     assertThat(refreshResponse.getTotalShards(), equalTo(test.totalNumShards)).     assertThat(refreshResponse.getSuccessfulShards(), equalTo(test.totalNumShards)).     assertThat(refreshResponse.getFailedShards(), equalTo(0)).     for (int i = 0. i < 5. i++) {         try {             SearchResponse searchResponse = client().search(searchRequest("test").source(new SearchSourceBuilder().query(new MatchQueryBuilder("foo", "biz")))).actionGet().             assertThat(searchResponse.getTotalShards(), equalTo(test.numPrimaries)).             assertThat(searchResponse.getSuccessfulShards(), equalTo(0)).             assertThat(searchResponse.getFailedShards(), equalTo(test.numPrimaries)).             fail("search should fail").         } catch (ElasticsearchException e) {             assertThat(e.unwrapCause(), instanceOf(SearchPhaseExecutionException.class)).         // all is well         }     }     logger.info("Done Testing failed search"). }
false;private;4;3;;private void index(Client client, String id, String nameValue, int age) throws IOException {     client.index(Requests.indexRequest("test").type("type").id(id).source(source(id, nameValue, age))).actionGet(). }
false;private;3;12;;private XContentBuilder source(String id, String nameValue, int age) throws IOException {     StringBuilder multi = new StringBuilder().append(nameValue).     for (int i = 0. i < age. i++) {         multi.append(" ").append(nameValue).     }     return jsonBuilder().startObject().field("id", id).field("name", nameValue + id).field("age", age).field("multi", multi.toString()).endObject(). }
