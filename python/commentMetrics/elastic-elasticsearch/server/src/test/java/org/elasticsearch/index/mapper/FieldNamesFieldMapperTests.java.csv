commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;7;;private static SortedSet<String> extract(String path) {     SortedSet<String> set = new TreeSet<>().     for (String fieldName : FieldNamesFieldMapper.extractFieldNames(path)) {         set.add(fieldName).     }     return set. }
false;private,static;1;3;;private static <T> SortedSet<T> set(T... values) {     return new TreeSet<>(Arrays.asList(values)). }
false;;2;4;;void assertFieldNames(Set<String> expected, ParsedDocument doc) {     String[] got = doc.rootDoc().getValues("_field_names").     assertEquals(expected, set(got)). }
false;public;0;9;;public void testExtractFieldNames() {     assertEquals(set("abc"), extract("abc")).     assertEquals(set("a", "a.b"), extract("a.b")).     assertEquals(set("a", "a.b", "a.b.c"), extract("a.b.c")).     // and now corner cases     assertEquals(set("", ".a"), extract(".a")).     assertEquals(set("a", "a."), extract("a.")).     assertEquals(set("", ".", ".."), extract("..")). }
false;public;0;14;;public void testFieldType() throws Exception {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_field_names").endObject().endObject().endObject()).     DocumentMapper docMapper = createIndex("test").mapperService().documentMapperParser().parse("type", new CompressedXContent(mapping)).     FieldNamesFieldMapper fieldNamesMapper = docMapper.metadataMapper(FieldNamesFieldMapper.class).     assertFalse(fieldNamesMapper.fieldType().hasDocValues()).     assertEquals(IndexOptions.DOCS, fieldNamesMapper.fieldType().indexOptions()).     assertFalse(fieldNamesMapper.fieldType().tokenized()).     assertFalse(fieldNamesMapper.fieldType().stored()).     assertTrue(fieldNamesMapper.fieldType().omitNorms()). }
false;public;0;17;;public void testInjectIntoDocDuringParsing() throws Exception {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").endObject().endObject()).     DocumentMapper defaultMapper = createIndex("test").mapperService().documentMapperParser().parse("type", new CompressedXContent(mapping)).     ParsedDocument doc = defaultMapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("a", "100").startObject("b").field("c", 42).endObject().endObject()), XContentType.JSON)).     assertFieldNames(Collections.emptySet(), doc). }
false;public;0;20;;public void testExplicitEnabled() throws Exception {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_field_names").field("enabled", true).endObject().startObject("properties").startObject("field").field("type", "keyword").field("doc_values", false).endObject().endObject().endObject().endObject()).     DocumentMapper docMapper = createIndex("test").mapperService().documentMapperParser().parse("type", new CompressedXContent(mapping)).     FieldNamesFieldMapper fieldNamesMapper = docMapper.metadataMapper(FieldNamesFieldMapper.class).     assertTrue(fieldNamesMapper.fieldType().isEnabled()).     ParsedDocument doc = docMapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field", "value").endObject()), XContentType.JSON)).     assertFieldNames(set("field"), doc). }
false;public;0;18;;public void testDisabled() throws Exception {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_field_names").field("enabled", false).endObject().endObject().endObject()).     DocumentMapper docMapper = createIndex("test").mapperService().documentMapperParser().parse("type", new CompressedXContent(mapping)).     FieldNamesFieldMapper fieldNamesMapper = docMapper.metadataMapper(FieldNamesFieldMapper.class).     assertFalse(fieldNamesMapper.fieldType().isEnabled()).     ParsedDocument doc = docMapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field", "value").endObject()), XContentType.JSON)).     assertNull(doc.rootDoc().get("_field_names")). }
false;public;0;18;;public void testMergingMappings() throws Exception {     String enabledMapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_field_names").field("enabled", true).endObject().endObject().endObject()).     String disabledMapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_field_names").field("enabled", false).endObject().endObject().endObject()).     MapperService mapperService = createIndex("test").mapperService().     DocumentMapper mapperEnabled = mapperService.merge("type", new CompressedXContent(enabledMapping), MapperService.MergeReason.MAPPING_UPDATE).     DocumentMapper mapperDisabled = mapperService.merge("type", new CompressedXContent(disabledMapping), MapperService.MergeReason.MAPPING_UPDATE).     assertFalse(mapperDisabled.metadataMapper(FieldNamesFieldMapper.class).fieldType().isEnabled()).     mapperEnabled = mapperService.merge("type", new CompressedXContent(enabledMapping), MapperService.MergeReason.MAPPING_UPDATE).     assertTrue(mapperEnabled.metadataMapper(FieldNamesFieldMapper.class).fieldType().isEnabled()). }
