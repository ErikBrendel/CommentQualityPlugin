commented;modifiers;parameterAmount;loc;comment;code
false;public;0;32;;public void testDeleteteByQueryRequestImplementsIndicesRequestReplaceable() {     int numIndices = between(1, 100).     String[] indices = new String[numIndices].     for (int i = 0. i < numIndices. i++) {         indices[i] = randomSimpleString(random(), 1, 30).     }     SearchRequest searchRequest = new SearchRequest(indices).     IndicesOptions indicesOptions = IndicesOptions.fromOptions(randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean()).     searchRequest.indicesOptions(indicesOptions).     DeleteByQueryRequest request = new DeleteByQueryRequest(searchRequest).     for (int i = 0. i < numIndices. i++) {         assertEquals(indices[i], request.indices()[i]).     }     assertSame(indicesOptions, request.indicesOptions()).     assertSame(request.indicesOptions(), request.getSearchRequest().indicesOptions()).     int numNewIndices = between(1, 100).     String[] newIndices = new String[numNewIndices].     for (int i = 0. i < numNewIndices. i++) {         newIndices[i] = randomSimpleString(random(), 1, 30).     }     request.indices(newIndices).     for (int i = 0. i < numNewIndices. i++) {         assertEquals(newIndices[i], request.indices()[i]).     }     for (int i = 0. i < numNewIndices. i++) {         assertEquals(newIndices[i], request.getSearchRequest().indices()[i]).     } }
false;protected;0;4;;@Override protected DeleteByQueryRequest newRequest() {     return new DeleteByQueryRequest(new SearchRequest(randomAlphaOfLength(5))). }
false;protected;1;4;;@Override protected void extraRandomizationForSlice(DeleteByQueryRequest original) { // Nothing else to randomize }
false;protected;2;4;;@Override protected void extraForSliceAssertions(DeleteByQueryRequest original, DeleteByQueryRequest forSliced) { // No extra assertions needed }
false;public;0;11;;public void testTypesGetter() {     int numTypes = between(1, 50).     String[] types = new String[numTypes].     for (int i = 0. i < numTypes. i++) {         types[i] = randomSimpleString(random(), 1, 30).     }     SearchRequest searchRequest = new SearchRequest().     searchRequest.types(types).     DeleteByQueryRequest request = new DeleteByQueryRequest(searchRequest).     assertArrayEquals(request.types(), types). }
false;public;0;11;;public void testTypesSetter() {     int numTypes = between(1, 50).     String[] types = new String[numTypes].     for (int i = 0. i < numTypes. i++) {         types[i] = randomSimpleString(random(), 1, 30).     }     SearchRequest searchRequest = new SearchRequest().     DeleteByQueryRequest request = new DeleteByQueryRequest(searchRequest).     request.types(types).     assertArrayEquals(request.types(), types). }
false;public;0;10;;public void testValidateGivenNoQuery() {     SearchRequest searchRequest = new SearchRequest().     DeleteByQueryRequest deleteByQueryRequest = new DeleteByQueryRequest(searchRequest).     deleteByQueryRequest.indices("*").     ActionRequestValidationException e = deleteByQueryRequest.validate().     assertThat(e, is(not(nullValue()))).     assertThat(e.getMessage(), containsString("query is missing")). }
false;public;0;10;;public void testValidateGivenValid() {     SearchRequest searchRequest = new SearchRequest().     DeleteByQueryRequest deleteByQueryRequest = new DeleteByQueryRequest(searchRequest).     deleteByQueryRequest.indices("*").     searchRequest.source().query(QueryBuilders.matchAllQuery()).     ActionRequestValidationException e = deleteByQueryRequest.validate().     assertThat(e, is(nullValue())). }
