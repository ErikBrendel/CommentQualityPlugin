commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;public void testSetSource() throws InterruptedException, ExecutionException {     createIndex("test").     Map<String, Object> map = new HashMap<>().     map.put("test_field", "foobar").     IndexRequestBuilder[] builders = new IndexRequestBuilder[] { client().prepareIndex("test", "test").setSource((Object) "test_field", (Object) "foobar"), client().prepareIndex("test", "test").setSource("{\"test_field\" : \"foobar\"}", XContentType.JSON), client().prepareIndex("test", "test").setSource(new BytesArray("{\"test_field\" : \"foobar\"}"), XContentType.JSON), client().prepareIndex("test", "test").setSource(new BytesArray("{\"test_field\" : \"foobar\"}"), XContentType.JSON), client().prepareIndex("test", "test").setSource(BytesReference.toBytes(new BytesArray("{\"test_field\" : \"foobar\"}")), XContentType.JSON), client().prepareIndex("test", "test").setSource(map) }.     indexRandom(true, builders).     SearchResponse searchResponse = client().prepareSearch("test").setQuery(QueryBuilders.termQuery("test_field", "foobar")).get().     ElasticsearchAssertions.assertHitCount(searchResponse, builders.length). }
false;public;0;8;;public void testOddNumberOfSourceObjects() {     try {         client().prepareIndex("test", "test").setSource("test_field", "foobar", new Object()).         fail("Expected IllegalArgumentException").     } catch (IllegalArgumentException e) {         assertThat(e.getMessage(), containsString("The number of object passed must be even but was [3]")).     } }
