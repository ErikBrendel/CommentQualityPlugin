commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;13;;@Override protected AdjacencyMatrixAggregationBuilder createTestAggregatorBuilder() {     int size = randomIntBetween(1, 20).     AdjacencyMatrixAggregationBuilder factory.     Map<String, QueryBuilder> filters = new HashMap<>(size).     for (String key : randomUnique(() -> randomAlphaOfLengthBetween(1, 20), size)) {         filters.put(key, QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20))).     }     factory = new AdjacencyMatrixAggregationBuilder(randomAlphaOfLengthBetween(1, 20), filters).separator(randomFrom("&", "+", "\t")).     return factory. }
true;public;0;9;/**  * Test that when passing in keyed filters as a map they are equivalent  */ ;/**  * Test that when passing in keyed filters as a map they are equivalent  */ public void testFiltersSameMap() {     Map<String, QueryBuilder> original = new HashMap<>().     original.put("bbb", new MatchNoneQueryBuilder()).     original.put("aaa", new MatchNoneQueryBuilder()).     AdjacencyMatrixAggregationBuilder builder.     builder = new AdjacencyMatrixAggregationBuilder("my-agg", original).     assertEquals(original, builder.filters()).     assert original != builder.filters(). }
