# id;timestamp;commentText;codeText;commentWords;codeWords
SpanNotQueryBuilderTests -> public void testParseDist() throws IOException;1524684173;test correct parsing of `dist` parameter, this should create builder with pre/post set to same value;public void testParseDist() throws IOException {_        XContentBuilder builder = XContentFactory.jsonBuilder()__        builder.startObject()__        builder.startObject(SpanNotQueryBuilder.NAME)__        builder.field("exclude")__        spanTermQuery("description", "jumped").toXContent(builder, null)__        builder.field("include")__        spanNearQuery(QueryBuilders.spanTermQuery("description", "quick"), 1)_                .addClause(QueryBuilders.spanTermQuery("description", "fox")).toXContent(builder, null)__        builder.field("dist", 3)__        builder.endObject()__        builder.endObject()__        SpanNotQueryBuilder query = (SpanNotQueryBuilder)parseQuery(Strings.toString(builder))__        assertThat(query.pre(), equalTo(3))__        assertThat(query.post(), equalTo(3))__        assertNotNull(query.includeQuery())__        assertNotNull(query.excludeQuery())__    };test,correct,parsing,of,dist,parameter,this,should,create,builder,with,pre,post,set,to,same,value;public,void,test,parse,dist,throws,ioexception,xcontent,builder,builder,xcontent,factory,json,builder,builder,start,object,builder,start,object,span,not,query,builder,name,builder,field,exclude,span,term,query,description,jumped,to,xcontent,builder,null,builder,field,include,span,near,query,query,builders,span,term,query,description,quick,1,add,clause,query,builders,span,term,query,description,fox,to,xcontent,builder,null,builder,field,dist,3,builder,end,object,builder,end,object,span,not,query,builder,query,span,not,query,builder,parse,query,strings,to,string,builder,assert,that,query,pre,equal,to,3,assert,that,query,post,equal,to,3,assert,not,null,query,include,query,assert,not,null,query,exclude,query
SpanNotQueryBuilderTests -> public void testParseDist() throws IOException;1542697754;test correct parsing of `dist` parameter, this should create builder with pre/post set to same value;public void testParseDist() throws IOException {_        XContentBuilder builder = XContentFactory.jsonBuilder()__        builder.startObject()__        builder.startObject(SpanNotQueryBuilder.NAME)__        builder.field("exclude")__        spanTermQuery("description", "jumped").toXContent(builder, null)__        builder.field("include")__        spanNearQuery(QueryBuilders.spanTermQuery("description", "quick"), 1)_                .addClause(QueryBuilders.spanTermQuery("description", "fox")).toXContent(builder, null)__        builder.field("dist", 3)__        builder.endObject()__        builder.endObject()__        SpanNotQueryBuilder query = (SpanNotQueryBuilder)parseQuery(Strings.toString(builder))__        assertThat(query.pre(), equalTo(3))__        assertThat(query.post(), equalTo(3))__        assertNotNull(query.includeQuery())__        assertNotNull(query.excludeQuery())__    };test,correct,parsing,of,dist,parameter,this,should,create,builder,with,pre,post,set,to,same,value;public,void,test,parse,dist,throws,ioexception,xcontent,builder,builder,xcontent,factory,json,builder,builder,start,object,builder,start,object,span,not,query,builder,name,builder,field,exclude,span,term,query,description,jumped,to,xcontent,builder,null,builder,field,include,span,near,query,query,builders,span,term,query,description,quick,1,add,clause,query,builders,span,term,query,description,fox,to,xcontent,builder,null,builder,field,dist,3,builder,end,object,builder,end,object,span,not,query,builder,query,span,not,query,builder,parse,query,strings,to,string,builder,assert,that,query,pre,equal,to,3,assert,that,query,post,equal,to,3,assert,not,null,query,include,query,assert,not,null,query,exclude,query
SpanNotQueryBuilderTests -> public void testParseDist() throws IOException;1543252559;test correct parsing of `dist` parameter, this should create builder with pre/post set to same value;public void testParseDist() throws IOException {_        XContentBuilder builder = XContentFactory.jsonBuilder()__        builder.startObject()__        builder.startObject(SpanNotQueryBuilder.NAME)__        builder.field("exclude")__        spanTermQuery("description", "jumped").toXContent(builder, null)__        builder.field("include")__        spanNearQuery(QueryBuilders.spanTermQuery("description", "quick"), 1)_                .addClause(QueryBuilders.spanTermQuery("description", "fox")).toXContent(builder, null)__        builder.field("dist", 3)__        builder.endObject()__        builder.endObject()__        SpanNotQueryBuilder query = (SpanNotQueryBuilder)parseQuery(Strings.toString(builder))__        assertThat(query.pre(), equalTo(3))__        assertThat(query.post(), equalTo(3))__        assertNotNull(query.includeQuery())__        assertNotNull(query.excludeQuery())__    };test,correct,parsing,of,dist,parameter,this,should,create,builder,with,pre,post,set,to,same,value;public,void,test,parse,dist,throws,ioexception,xcontent,builder,builder,xcontent,factory,json,builder,builder,start,object,builder,start,object,span,not,query,builder,name,builder,field,exclude,span,term,query,description,jumped,to,xcontent,builder,null,builder,field,include,span,near,query,query,builders,span,term,query,description,quick,1,add,clause,query,builders,span,term,query,description,fox,to,xcontent,builder,null,builder,field,dist,3,builder,end,object,builder,end,object,span,not,query,builder,query,span,not,query,builder,parse,query,strings,to,string,builder,assert,that,query,pre,equal,to,3,assert,that,query,post,equal,to,3,assert,not,null,query,include,query,assert,not,null,query,exclude,query
SpanNotQueryBuilderTests -> public void testParserExceptions() throws IOException;1524684173;test exceptions for three types of broken json, missing include / exclude and both dist and pre/post specified;public void testParserExceptions() throws IOException {_        {_            XContentBuilder builder = XContentFactory.jsonBuilder()__            builder.startObject()__            builder.startObject(SpanNotQueryBuilder.NAME)__            builder.field("exclude")__            spanTermQuery("description", "jumped").toXContent(builder, null)__            builder.field("dist", 2)__            builder.endObject()__            builder.endObject()___            ParsingException e = expectThrows(ParsingException.class, () -> parseQuery(Strings.toString(builder)))__            assertThat(e.getDetailedMessage(), containsString("spanNot must have [include]"))__        }_        {_            XContentBuilder builder = XContentFactory.jsonBuilder()__            builder.startObject()__            builder.startObject(SpanNotQueryBuilder.NAME)__            builder.field("include")__            spanNearQuery(QueryBuilders.spanTermQuery("description", "quick"), 1)_                    .addClause(QueryBuilders.spanTermQuery("description", "fox")).toXContent(builder, null)__            builder.field("dist", 2)__            builder.endObject()__            builder.endObject()___            ParsingException e = expectThrows(ParsingException.class, () -> parseQuery(Strings.toString(builder)))__            assertThat(e.getDetailedMessage(), containsString("spanNot must have [exclude]"))__        }_        {_            XContentBuilder builder = XContentFactory.jsonBuilder()__            builder.startObject()__            builder.startObject(SpanNotQueryBuilder.NAME)__            builder.field("include")__            spanNearQuery(QueryBuilders.spanTermQuery("description", "quick"), 1)_                    .addClause(QueryBuilders.spanTermQuery("description", "fox")).toXContent(builder, null)__            builder.field("exclude")__            spanTermQuery("description", "jumped").toXContent(builder, null)__            builder.field("dist", 2)__            builder.field("pre", 2)__            builder.endObject()__            builder.endObject()___            ParsingException e = expectThrows(ParsingException.class, () -> parseQuery(Strings.toString(builder)))__            assertThat(e.getDetailedMessage(), containsString("spanNot can either use [dist] or [pre] & [post] (or none)"))__        }_    };test,exceptions,for,three,types,of,broken,json,missing,include,exclude,and,both,dist,and,pre,post,specified;public,void,test,parser,exceptions,throws,ioexception,xcontent,builder,builder,xcontent,factory,json,builder,builder,start,object,builder,start,object,span,not,query,builder,name,builder,field,exclude,span,term,query,description,jumped,to,xcontent,builder,null,builder,field,dist,2,builder,end,object,builder,end,object,parsing,exception,e,expect,throws,parsing,exception,class,parse,query,strings,to,string,builder,assert,that,e,get,detailed,message,contains,string,span,not,must,have,include,xcontent,builder,builder,xcontent,factory,json,builder,builder,start,object,builder,start,object,span,not,query,builder,name,builder,field,include,span,near,query,query,builders,span,term,query,description,quick,1,add,clause,query,builders,span,term,query,description,fox,to,xcontent,builder,null,builder,field,dist,2,builder,end,object,builder,end,object,parsing,exception,e,expect,throws,parsing,exception,class,parse,query,strings,to,string,builder,assert,that,e,get,detailed,message,contains,string,span,not,must,have,exclude,xcontent,builder,builder,xcontent,factory,json,builder,builder,start,object,builder,start,object,span,not,query,builder,name,builder,field,include,span,near,query,query,builders,span,term,query,description,quick,1,add,clause,query,builders,span,term,query,description,fox,to,xcontent,builder,null,builder,field,exclude,span,term,query,description,jumped,to,xcontent,builder,null,builder,field,dist,2,builder,field,pre,2,builder,end,object,builder,end,object,parsing,exception,e,expect,throws,parsing,exception,class,parse,query,strings,to,string,builder,assert,that,e,get,detailed,message,contains,string,span,not,can,either,use,dist,or,pre,post,or,none
SpanNotQueryBuilderTests -> public void testParserExceptions() throws IOException;1542697754;test exceptions for three types of broken json, missing include / exclude and both dist and pre/post specified;public void testParserExceptions() throws IOException {_        {_            XContentBuilder builder = XContentFactory.jsonBuilder()__            builder.startObject()__            builder.startObject(SpanNotQueryBuilder.NAME)__            builder.field("exclude")__            spanTermQuery("description", "jumped").toXContent(builder, null)__            builder.field("dist", 2)__            builder.endObject()__            builder.endObject()___            ParsingException e = expectThrows(ParsingException.class, () -> parseQuery(Strings.toString(builder)))__            assertThat(e.getDetailedMessage(), containsString("spanNot must have [include]"))__        }_        {_            XContentBuilder builder = XContentFactory.jsonBuilder()__            builder.startObject()__            builder.startObject(SpanNotQueryBuilder.NAME)__            builder.field("include")__            spanNearQuery(QueryBuilders.spanTermQuery("description", "quick"), 1)_                    .addClause(QueryBuilders.spanTermQuery("description", "fox")).toXContent(builder, null)__            builder.field("dist", 2)__            builder.endObject()__            builder.endObject()___            ParsingException e = expectThrows(ParsingException.class, () -> parseQuery(Strings.toString(builder)))__            assertThat(e.getDetailedMessage(), containsString("spanNot must have [exclude]"))__        }_        {_            XContentBuilder builder = XContentFactory.jsonBuilder()__            builder.startObject()__            builder.startObject(SpanNotQueryBuilder.NAME)__            builder.field("include")__            spanNearQuery(QueryBuilders.spanTermQuery("description", "quick"), 1)_                    .addClause(QueryBuilders.spanTermQuery("description", "fox")).toXContent(builder, null)__            builder.field("exclude")__            spanTermQuery("description", "jumped").toXContent(builder, null)__            builder.field("dist", 2)__            builder.field("pre", 2)__            builder.endObject()__            builder.endObject()___            ParsingException e = expectThrows(ParsingException.class, () -> parseQuery(Strings.toString(builder)))__            assertThat(e.getDetailedMessage(), containsString("spanNot can either use [dist] or [pre] & [post] (or none)"))__        }_    };test,exceptions,for,three,types,of,broken,json,missing,include,exclude,and,both,dist,and,pre,post,specified;public,void,test,parser,exceptions,throws,ioexception,xcontent,builder,builder,xcontent,factory,json,builder,builder,start,object,builder,start,object,span,not,query,builder,name,builder,field,exclude,span,term,query,description,jumped,to,xcontent,builder,null,builder,field,dist,2,builder,end,object,builder,end,object,parsing,exception,e,expect,throws,parsing,exception,class,parse,query,strings,to,string,builder,assert,that,e,get,detailed,message,contains,string,span,not,must,have,include,xcontent,builder,builder,xcontent,factory,json,builder,builder,start,object,builder,start,object,span,not,query,builder,name,builder,field,include,span,near,query,query,builders,span,term,query,description,quick,1,add,clause,query,builders,span,term,query,description,fox,to,xcontent,builder,null,builder,field,dist,2,builder,end,object,builder,end,object,parsing,exception,e,expect,throws,parsing,exception,class,parse,query,strings,to,string,builder,assert,that,e,get,detailed,message,contains,string,span,not,must,have,exclude,xcontent,builder,builder,xcontent,factory,json,builder,builder,start,object,builder,start,object,span,not,query,builder,name,builder,field,include,span,near,query,query,builders,span,term,query,description,quick,1,add,clause,query,builders,span,term,query,description,fox,to,xcontent,builder,null,builder,field,exclude,span,term,query,description,jumped,to,xcontent,builder,null,builder,field,dist,2,builder,field,pre,2,builder,end,object,builder,end,object,parsing,exception,e,expect,throws,parsing,exception,class,parse,query,strings,to,string,builder,assert,that,e,get,detailed,message,contains,string,span,not,can,either,use,dist,or,pre,post,or,none
SpanNotQueryBuilderTests -> public void testParserExceptions() throws IOException;1543252559;test exceptions for three types of broken json, missing include / exclude and both dist and pre/post specified;public void testParserExceptions() throws IOException {_        {_            XContentBuilder builder = XContentFactory.jsonBuilder()__            builder.startObject()__            builder.startObject(SpanNotQueryBuilder.NAME)__            builder.field("exclude")__            spanTermQuery("description", "jumped").toXContent(builder, null)__            builder.field("dist", 2)__            builder.endObject()__            builder.endObject()___            ParsingException e = expectThrows(ParsingException.class, () -> parseQuery(Strings.toString(builder)))__            assertThat(e.getDetailedMessage(), containsString("span_not must have [include]"))__        }_        {_            XContentBuilder builder = XContentFactory.jsonBuilder()__            builder.startObject()__            builder.startObject(SpanNotQueryBuilder.NAME)__            builder.field("include")__            spanNearQuery(QueryBuilders.spanTermQuery("description", "quick"), 1)_                    .addClause(QueryBuilders.spanTermQuery("description", "fox")).toXContent(builder, null)__            builder.field("dist", 2)__            builder.endObject()__            builder.endObject()___            ParsingException e = expectThrows(ParsingException.class, () -> parseQuery(Strings.toString(builder)))__            assertThat(e.getDetailedMessage(), containsString("span_not must have [exclude]"))__        }_        {_            XContentBuilder builder = XContentFactory.jsonBuilder()__            builder.startObject()__            builder.startObject(SpanNotQueryBuilder.NAME)__            builder.field("include")__            spanNearQuery(QueryBuilders.spanTermQuery("description", "quick"), 1)_                    .addClause(QueryBuilders.spanTermQuery("description", "fox")).toXContent(builder, null)__            builder.field("exclude")__            spanTermQuery("description", "jumped").toXContent(builder, null)__            builder.field("dist", 2)__            builder.field("pre", 2)__            builder.endObject()__            builder.endObject()___            ParsingException e = expectThrows(ParsingException.class, () -> parseQuery(Strings.toString(builder)))__            assertThat(e.getDetailedMessage(), containsString("span_not can either use [dist] or [pre] & [post] (or none)"))__        }_    };test,exceptions,for,three,types,of,broken,json,missing,include,exclude,and,both,dist,and,pre,post,specified;public,void,test,parser,exceptions,throws,ioexception,xcontent,builder,builder,xcontent,factory,json,builder,builder,start,object,builder,start,object,span,not,query,builder,name,builder,field,exclude,span,term,query,description,jumped,to,xcontent,builder,null,builder,field,dist,2,builder,end,object,builder,end,object,parsing,exception,e,expect,throws,parsing,exception,class,parse,query,strings,to,string,builder,assert,that,e,get,detailed,message,contains,string,must,have,include,xcontent,builder,builder,xcontent,factory,json,builder,builder,start,object,builder,start,object,span,not,query,builder,name,builder,field,include,span,near,query,query,builders,span,term,query,description,quick,1,add,clause,query,builders,span,term,query,description,fox,to,xcontent,builder,null,builder,field,dist,2,builder,end,object,builder,end,object,parsing,exception,e,expect,throws,parsing,exception,class,parse,query,strings,to,string,builder,assert,that,e,get,detailed,message,contains,string,must,have,exclude,xcontent,builder,builder,xcontent,factory,json,builder,builder,start,object,builder,start,object,span,not,query,builder,name,builder,field,include,span,near,query,query,builders,span,term,query,description,quick,1,add,clause,query,builders,span,term,query,description,fox,to,xcontent,builder,null,builder,field,exclude,span,term,query,description,jumped,to,xcontent,builder,null,builder,field,dist,2,builder,field,pre,2,builder,end,object,builder,end,object,parsing,exception,e,expect,throws,parsing,exception,class,parse,query,strings,to,string,builder,assert,that,e,get,detailed,message,contains,string,can,either,use,dist,or,pre,post,or,none
