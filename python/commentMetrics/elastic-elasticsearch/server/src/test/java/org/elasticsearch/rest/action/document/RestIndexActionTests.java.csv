commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setUpAction() {     action = new RestIndexAction(Settings.EMPTY, controller()). }
false;public;0;14;;public void testTypeInPath() {     RestRequest deprecatedRequest = new FakeRestRequest.Builder(xContentRegistry()).withMethod(RestRequest.Method.PUT).withPath("/some_index/some_type/some_id").build().     dispatchRequest(deprecatedRequest).     assertWarnings(RestIndexAction.TYPES_DEPRECATION_MESSAGE).     RestRequest validRequest = new FakeRestRequest.Builder(xContentRegistry()).withMethod(RestRequest.Method.PUT).withPath("/some_index/_doc/some_id").build().     dispatchRequest(validRequest). }
false;public;0;14;;public void testCreateWithTypeInPath() {     RestRequest deprecatedRequest = new FakeRestRequest.Builder(xContentRegistry()).withMethod(RestRequest.Method.PUT).withPath("/some_index/some_type/some_id/_create").build().     dispatchRequest(deprecatedRequest).     assertWarnings(RestIndexAction.TYPES_DEPRECATION_MESSAGE).     RestRequest validRequest = new FakeRestRequest.Builder(xContentRegistry()).withMethod(RestRequest.Method.PUT).withPath("/some_index/_create/some_id").build().     dispatchRequest(validRequest). }
false;public;0;11;;public void testCreateOpTypeValidation() {     Settings settings = settings(Version.CURRENT).build().     RestIndexAction.CreateHandler create = action.new CreateHandler(settings).     String opType = randomFrom("CREATE", null).     create.validateOpType(opType).     String illegalOpType = randomFrom("index", "unknown", "").     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> create.validateOpType(illegalOpType)).     assertThat(e.getMessage(), equalTo("opType must be 'create', found: [" + illegalOpType + "]")). }
