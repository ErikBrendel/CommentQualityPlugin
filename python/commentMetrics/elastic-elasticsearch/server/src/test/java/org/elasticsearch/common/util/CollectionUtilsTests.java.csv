commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public void testRotateEmpty() {     assertTrue(CollectionUtils.rotate(Collections.emptyList(), randomInt()).isEmpty()). }
false;public;0;24;;public void testRotate() {     final int iters = scaledRandomIntBetween(10, 100).     for (int k = 0. k < iters. ++k) {         final int size = randomIntBetween(1, 100).         final int distance = randomInt().         List<Object> list = new ArrayList<>().         for (int i = 0. i < size. ++i) {             list.add(new Object()).         }         final List<Object> rotated = CollectionUtils.rotate(list, distance).         // check content is the same         assertEquals(rotated.size(), list.size()).         assertEquals(rotated.size(), list.size()).         assertEquals(new HashSet<>(rotated), new HashSet<>(list)).         // check stability         for (int j = randomInt(4). j >= 0. --j) {             assertEquals(rotated, CollectionUtils.rotate(list, distance)).         }         // reverse         if (distance != Integer.MIN_VALUE) {             assertEquals(list, CollectionUtils.rotate(CollectionUtils.rotate(list, distance), -distance)).         }     } }
false;public;0;32;;public void testSortAndDedupByteRefArray() {     SortedSet<BytesRef> set = new TreeSet<>().     final int numValues = scaledRandomIntBetween(0, 10000).     List<BytesRef> tmpList = new ArrayList<>().     BytesRefArray array = new BytesRefArray(Counter.newCounter()).     for (int i = 0. i < numValues. i++) {         String s = randomRealisticUnicodeOfCodepointLengthBetween(1, 100).         set.add(new BytesRef(s)).         tmpList.add(new BytesRef(s)).         array.append(new BytesRef(s)).     }     if (randomBoolean()) {         Collections.shuffle(tmpList, random()).         for (BytesRef ref : tmpList) {             array.append(ref).         }     }     int[] indices = new int[array.size()].     for (int i = 0. i < indices.length. i++) {         indices[i] = i.     }     int numUnique = CollectionUtils.sortAndDedup(array, indices).     assertThat(numUnique, equalTo(set.size())).     Iterator<BytesRef> iterator = set.iterator().     BytesRefBuilder spare = new BytesRefBuilder().     for (int i = 0. i < numUnique. i++) {         assertThat(iterator.hasNext(), is(true)).         assertThat(array.get(spare, indices[i]), equalTo(iterator.next())).     } }
false;public;0;27;;public void testSortByteRefArray() {     List<BytesRef> values = new ArrayList<>().     final int numValues = scaledRandomIntBetween(0, 10000).     BytesRefArray array = new BytesRefArray(Counter.newCounter()).     for (int i = 0. i < numValues. i++) {         String s = randomRealisticUnicodeOfCodepointLengthBetween(1, 100).         values.add(new BytesRef(s)).         array.append(new BytesRef(s)).     }     if (randomBoolean()) {         Collections.shuffle(values, random()).     }     int[] indices = new int[array.size()].     for (int i = 0. i < indices.length. i++) {         indices[i] = i.     }     CollectionUtils.sort(array, indices).     Collections.sort(values).     Iterator<BytesRef> iterator = values.iterator().     BytesRefBuilder spare = new BytesRefBuilder().     for (int i = 0. i < values.size(). i++) {         assertThat(iterator.hasNext(), is(true)).         assertThat(array.get(spare, indices[i]), equalTo(iterator.next())).     } }
false;public;0;6;;public void testEmptyPartition() {     assertEquals(Collections.emptyList(), eagerPartition(Collections.emptyList(), 1)). }
false;public;0;10;;public void testSimplePartition() {     assertEquals(Arrays.asList(Arrays.asList(1, 2), Arrays.asList(3, 4), Arrays.asList(5)), eagerPartition(Arrays.asList(1, 2, 3, 4, 5), 2)). }
false;public;0;12;;public void testSingletonPartition() {     assertEquals(Arrays.asList(Arrays.asList(1), Arrays.asList(2), Arrays.asList(3), Arrays.asList(4), Arrays.asList(5)), eagerPartition(Arrays.asList(1, 2, 3, 4, 5), 1)). }
false;public;0;6;;public void testOversizedPartition() {     assertEquals(Arrays.asList(Arrays.asList(1, 2, 3, 4, 5)), eagerPartition(Arrays.asList(1, 2, 3, 4, 5), 15)). }
false;public;0;9;;public void testPerfectPartition() {     assertEquals(Arrays.asList(Arrays.asList(1, 2, 3, 4, 5, 6), Arrays.asList(7, 8, 9, 10, 11, 12)), eagerPartition(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), 6)). }
false;public;0;22;;public void testEnsureNoSelfReferences() {     CollectionUtils.ensureNoSelfReferences(emptyMap(), "test with empty map").     CollectionUtils.ensureNoSelfReferences(null, "test with null").     {         Map<String, Object> map = new HashMap<>().         map.put("field", map).         IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> CollectionUtils.ensureNoSelfReferences(map, "test with self ref value")).         assertThat(e.getMessage(), containsString("Iterable object is self-referencing itself (test with self ref value)")).     }     {         Map<Object, Object> map = new HashMap<>().         map.put(map, 1).         IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> CollectionUtils.ensureNoSelfReferences(map, "test with self ref key")).         assertThat(e.getMessage(), containsString("Iterable object is self-referencing itself (test with self ref key)")).     } }
