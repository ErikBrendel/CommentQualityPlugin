commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;5;;@Override protected int minimumNumberOfShards() {     // makes sure that a reduce is always needed when searching     return 2. }
false;protected;0;6;;@Override protected int minimumNumberOfReplicas() {     // so we are able to intercept those messages and check them     return 1. }
false;protected;1;8;;@Override protected Settings nodeSettings(int ordinal) {     // must set this independently of the plugin so it overrides MockTransportService     return Settings.builder().put(super.nodeSettings(ordinal)).put("cluster.routing.allocation.disk.threshold_enabled", false).build(). }
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     return Arrays.asList(InterceptingTransportService.TestPlugin.class, CustomScriptPlugin.class). }
false;protected;0;5;;@Override @SuppressWarnings("unchecked") protected Map<String, Function<Map<String, Object>, Object>> pluginScripts() {     return Collections.singletonMap("ctx.op='delete'", vars -> ((Map<String, Object>) vars.get("ctx")).put("op", "delete")). }
false;public;0;11;;@Before public void setup() {     int numIndices = iterations(1, 5).     for (int i = 0. i < numIndices. i++) {         indices.add("test" + i).     }     for (String index : indices) {         assertAcked(prepareCreate(index).addAlias(new Alias(index + "-alias"))).     }     ensureGreen(). }
false;public;0;5;;@After public void cleanUp() {     assertAllRequestsHaveBeenConsumed().     indices.clear(). }
false;public;0;11;;public void testGetFieldMappings() {     String getFieldMappingsShardAction = GetFieldMappingsAction.NAME + "[index][s]".     interceptTransportActions(getFieldMappingsShardAction).     GetFieldMappingsRequest getFieldMappingsRequest = new GetFieldMappingsRequest().     getFieldMappingsRequest.indices(randomIndicesOrAliases()).     internalCluster().coordOnlyNodeClient().admin().indices().getFieldMappings(getFieldMappingsRequest).actionGet().     clearInterceptedActions().     assertSameIndices(getFieldMappingsRequest, getFieldMappingsShardAction). }
false;public;0;12;;public void testFieldCapabilities() {     String fieldCapabilitiesShardAction = FieldCapabilitiesAction.NAME + "[index][s]".     interceptTransportActions(fieldCapabilitiesShardAction).     FieldCapabilitiesRequest fieldCapabilitiesRequest = new FieldCapabilitiesRequest().     fieldCapabilitiesRequest.indices(randomIndicesOrAliases()).     fieldCapabilitiesRequest.fields(randomAlphaOfLength(8)).     internalCluster().coordOnlyNodeClient().fieldCaps(fieldCapabilitiesRequest).actionGet().     clearInterceptedActions().     assertSameIndices(fieldCapabilitiesRequest, fieldCapabilitiesShardAction). }
false;public;0;11;;public void testAnalyze() {     String analyzeShardAction = AnalyzeAction.NAME + "[s]".     interceptTransportActions(analyzeShardAction).     AnalyzeRequest analyzeRequest = new AnalyzeRequest(randomIndexOrAlias()).     analyzeRequest.text("text").     internalCluster().coordOnlyNodeClient().admin().indices().analyze(analyzeRequest).actionGet().     clearInterceptedActions().     assertSameIndices(analyzeRequest, analyzeShardAction). }
false;public;0;11;;public void testIndex() {     String[] indexShardActions = new String[] { BulkAction.NAME + "[s][p]", BulkAction.NAME + "[s][r]" }.     interceptTransportActions(indexShardActions).     IndexRequest indexRequest = new IndexRequest(randomIndexOrAlias(), "type", "id").source(Requests.INDEX_CONTENT_TYPE, "field", "value").     internalCluster().coordOnlyNodeClient().index(indexRequest).actionGet().     clearInterceptedActions().     assertSameIndices(indexRequest, indexShardActions). }
false;public;0;10;;public void testDelete() {     String[] deleteShardActions = new String[] { BulkAction.NAME + "[s][p]", BulkAction.NAME + "[s][r]" }.     interceptTransportActions(deleteShardActions).     DeleteRequest deleteRequest = new DeleteRequest(randomIndexOrAlias(), "type", "id").     internalCluster().coordOnlyNodeClient().delete(deleteRequest).actionGet().     clearInterceptedActions().     assertSameIndices(deleteRequest, deleteShardActions). }
false;public;0;14;;public void testUpdate() {     // update action goes to the primary, index op gets executed locally, then replicated     String[] updateShardActions = new String[] { UpdateAction.NAME + "[s]", BulkAction.NAME + "[s][p]", BulkAction.NAME + "[s][r]" }.     interceptTransportActions(updateShardActions).     String indexOrAlias = randomIndexOrAlias().     client().prepareIndex(indexOrAlias, "type", "id").setSource("field", "value").get().     UpdateRequest updateRequest = new UpdateRequest(indexOrAlias, "type", "id").doc(Requests.INDEX_CONTENT_TYPE, "field1", "value1").     UpdateResponse updateResponse = internalCluster().coordOnlyNodeClient().update(updateRequest).actionGet().     assertEquals(DocWriteResponse.Result.UPDATED, updateResponse.getResult()).     clearInterceptedActions().     assertSameIndices(updateRequest, updateShardActions). }
false;public;0;14;;public void testUpdateUpsert() {     // update action goes to the primary, index op gets executed locally, then replicated     String[] updateShardActions = new String[] { UpdateAction.NAME + "[s]", BulkAction.NAME + "[s][p]", BulkAction.NAME + "[s][r]" }.     interceptTransportActions(updateShardActions).     String indexOrAlias = randomIndexOrAlias().     UpdateRequest updateRequest = new UpdateRequest(indexOrAlias, "type", "id").upsert(Requests.INDEX_CONTENT_TYPE, "field", "value").doc(Requests.INDEX_CONTENT_TYPE, "field1", "value1").     UpdateResponse updateResponse = internalCluster().coordOnlyNodeClient().update(updateRequest).actionGet().     assertEquals(DocWriteResponse.Result.CREATED, updateResponse.getResult()).     clearInterceptedActions().     assertSameIndices(updateRequest, updateShardActions). }
false;public;0;15;;public void testUpdateDelete() {     // update action goes to the primary, delete op gets executed locally, then replicated     String[] updateShardActions = new String[] { UpdateAction.NAME + "[s]", BulkAction.NAME + "[s][p]", BulkAction.NAME + "[s][r]" }.     interceptTransportActions(updateShardActions).     String indexOrAlias = randomIndexOrAlias().     client().prepareIndex(indexOrAlias, "type", "id").setSource("field", "value").get().     UpdateRequest updateRequest = new UpdateRequest(indexOrAlias, "type", "id").script(new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, "ctx.op='delete'", Collections.emptyMap())).     UpdateResponse updateResponse = internalCluster().coordOnlyNodeClient().update(updateRequest).actionGet().     assertEquals(DocWriteResponse.Result.DELETED, updateResponse.getResult()).     clearInterceptedActions().     assertSameIndices(updateRequest, updateShardActions). }
false;public;0;30;;public void testBulk() {     String[] bulkShardActions = new String[] { BulkAction.NAME + "[s][p]", BulkAction.NAME + "[s][r]" }.     interceptTransportActions(bulkShardActions).     List<String> indices = new ArrayList<>().     BulkRequest bulkRequest = new BulkRequest().     int numIndexRequests = iterations(1, 10).     for (int i = 0. i < numIndexRequests. i++) {         String indexOrAlias = randomIndexOrAlias().         bulkRequest.add(new IndexRequest(indexOrAlias, "type", "id").source(Requests.INDEX_CONTENT_TYPE, "field", "value")).         indices.add(indexOrAlias).     }     int numDeleteRequests = iterations(1, 10).     for (int i = 0. i < numDeleteRequests. i++) {         String indexOrAlias = randomIndexOrAlias().         bulkRequest.add(new DeleteRequest(indexOrAlias, "type", "id")).         indices.add(indexOrAlias).     }     int numUpdateRequests = iterations(1, 10).     for (int i = 0. i < numUpdateRequests. i++) {         String indexOrAlias = randomIndexOrAlias().         bulkRequest.add(new UpdateRequest(indexOrAlias, "type", "id").doc(Requests.INDEX_CONTENT_TYPE, "field1", "value1")).         indices.add(indexOrAlias).     }     internalCluster().coordOnlyNodeClient().bulk(bulkRequest).actionGet().     clearInterceptedActions().     assertIndicesSubset(indices, bulkShardActions). }
false;public;0;10;;public void testGet() {     String getShardAction = GetAction.NAME + "[s]".     interceptTransportActions(getShardAction).     GetRequest getRequest = new GetRequest(randomIndexOrAlias(), "type", "id").     internalCluster().coordOnlyNodeClient().get(getRequest).actionGet().     clearInterceptedActions().     assertSameIndices(getRequest, getShardAction). }
false;public;0;10;;public void testExplain() {     String explainShardAction = ExplainAction.NAME + "[s]".     interceptTransportActions(explainShardAction).     ExplainRequest explainRequest = new ExplainRequest(randomIndexOrAlias(), "type", "id").query(QueryBuilders.matchAllQuery()).     internalCluster().coordOnlyNodeClient().explain(explainRequest).actionGet().     clearInterceptedActions().     assertSameIndices(explainRequest, explainShardAction). }
false;public;0;10;;public void testTermVector() {     String termVectorShardAction = TermVectorsAction.NAME + "[s]".     interceptTransportActions(termVectorShardAction).     TermVectorsRequest termVectorsRequest = new TermVectorsRequest(randomIndexOrAlias(), "type", "id").     internalCluster().coordOnlyNodeClient().termVectors(termVectorsRequest).actionGet().     clearInterceptedActions().     assertSameIndices(termVectorsRequest, termVectorShardAction). }
false;public;0;17;;public void testMultiTermVector() {     String multiTermVectorsShardAction = MultiTermVectorsAction.NAME + "[shard][s]".     interceptTransportActions(multiTermVectorsShardAction).     List<String> indices = new ArrayList<>().     MultiTermVectorsRequest multiTermVectorsRequest = new MultiTermVectorsRequest().     int numDocs = iterations(1, 30).     for (int i = 0. i < numDocs. i++) {         String indexOrAlias = randomIndexOrAlias().         multiTermVectorsRequest.add(indexOrAlias, "type", Integer.toString(i)).         indices.add(indexOrAlias).     }     internalCluster().coordOnlyNodeClient().multiTermVectors(multiTermVectorsRequest).actionGet().     clearInterceptedActions().     assertIndicesSubset(indices, multiTermVectorsShardAction). }
false;public;0;17;;public void testMultiGet() {     String multiGetShardAction = MultiGetAction.NAME + "[shard][s]".     interceptTransportActions(multiGetShardAction).     List<String> indices = new ArrayList<>().     MultiGetRequest multiGetRequest = new MultiGetRequest().     int numDocs = iterations(1, 30).     for (int i = 0. i < numDocs. i++) {         String indexOrAlias = randomIndexOrAlias().         multiGetRequest.add(indexOrAlias, "type", Integer.toString(i)).         indices.add(indexOrAlias).     }     internalCluster().coordOnlyNodeClient().multiGet(multiGetRequest).actionGet().     clearInterceptedActions().     assertIndicesSubset(indices, multiGetShardAction). }
false;public;0;13;;public void testFlush() {     String[] indexShardActions = new String[] { TransportShardFlushAction.NAME, TransportShardFlushAction.NAME + "[r]", TransportShardFlushAction.NAME + "[p]" }.     interceptTransportActions(indexShardActions).     FlushRequest flushRequest = new FlushRequest(randomIndicesOrAliases()).     internalCluster().coordOnlyNodeClient().admin().indices().flush(flushRequest).actionGet().     clearInterceptedActions().     String[] indices = new IndexNameExpressionResolver().concreteIndexNames(client().admin().cluster().prepareState().get().getState(), flushRequest).     assertIndicesSubset(Arrays.asList(indices), indexShardActions). }
false;public;0;10;;public void testForceMerge() {     String mergeShardAction = ForceMergeAction.NAME + "[n]".     interceptTransportActions(mergeShardAction).     ForceMergeRequest mergeRequest = new ForceMergeRequest(randomIndicesOrAliases()).     internalCluster().coordOnlyNodeClient().admin().indices().forceMerge(mergeRequest).actionGet().     clearInterceptedActions().     assertSameIndices(mergeRequest, mergeShardAction). }
false;public;0;13;;public void testRefresh() {     String[] indexShardActions = new String[] { TransportShardRefreshAction.NAME, TransportShardRefreshAction.NAME + "[r]", TransportShardRefreshAction.NAME + "[p]" }.     interceptTransportActions(indexShardActions).     RefreshRequest refreshRequest = new RefreshRequest(randomIndicesOrAliases()).     internalCluster().coordOnlyNodeClient().admin().indices().refresh(refreshRequest).actionGet().     clearInterceptedActions().     String[] indices = new IndexNameExpressionResolver().concreteIndexNames(client().admin().cluster().prepareState().get().getState(), refreshRequest).     assertIndicesSubset(Arrays.asList(indices), indexShardActions). }
false;public;0;10;;public void testClearCache() {     String clearCacheAction = ClearIndicesCacheAction.NAME + "[n]".     interceptTransportActions(clearCacheAction).     ClearIndicesCacheRequest clearIndicesCacheRequest = new ClearIndicesCacheRequest(randomIndicesOrAliases()).     internalCluster().coordOnlyNodeClient().admin().indices().clearCache(clearIndicesCacheRequest).actionGet().     clearInterceptedActions().     assertSameIndices(clearIndicesCacheRequest, clearCacheAction). }
false;public;0;10;;public void testRecovery() {     String recoveryAction = RecoveryAction.NAME + "[n]".     interceptTransportActions(recoveryAction).     RecoveryRequest recoveryRequest = new RecoveryRequest(randomIndicesOrAliases()).     internalCluster().coordOnlyNodeClient().admin().indices().recoveries(recoveryRequest).actionGet().     clearInterceptedActions().     assertSameIndices(recoveryRequest, recoveryAction). }
false;public;0;10;;public void testSegments() {     String segmentsAction = IndicesSegmentsAction.NAME + "[n]".     interceptTransportActions(segmentsAction).     IndicesSegmentsRequest segmentsRequest = new IndicesSegmentsRequest(randomIndicesOrAliases()).     internalCluster().coordOnlyNodeClient().admin().indices().segments(segmentsRequest).actionGet().     clearInterceptedActions().     assertSameIndices(segmentsRequest, segmentsAction). }
false;public;0;10;;public void testIndicesStats() {     String indicesStats = IndicesStatsAction.NAME + "[n]".     interceptTransportActions(indicesStats).     IndicesStatsRequest indicesStatsRequest = new IndicesStatsRequest().indices(randomIndicesOrAliases()).     internalCluster().coordOnlyNodeClient().admin().indices().stats(indicesStatsRequest).actionGet().     clearInterceptedActions().     assertSameIndices(indicesStatsRequest, indicesStats). }
false;public;0;10;;public void testValidateQuery() {     String validateQueryShardAction = ValidateQueryAction.NAME + "[s]".     interceptTransportActions(validateQueryShardAction).     ValidateQueryRequest validateQueryRequest = new ValidateQueryRequest(randomIndicesOrAliases()).     internalCluster().coordOnlyNodeClient().admin().indices().validateQuery(validateQueryRequest).actionGet().     clearInterceptedActions().     assertSameIndices(validateQueryRequest, validateQueryShardAction). }
false;public;0;9;;public void testOpenIndex() {     interceptTransportActions(OpenIndexAction.NAME).     OpenIndexRequest openIndexRequest = new OpenIndexRequest(randomUniqueIndicesOrAliases()).     internalCluster().coordOnlyNodeClient().admin().indices().open(openIndexRequest).actionGet().     clearInterceptedActions().     assertSameIndices(openIndexRequest, OpenIndexAction.NAME). }
false;public;0;9;;public void testCloseIndex() {     interceptTransportActions(CloseIndexAction.NAME).     CloseIndexRequest closeIndexRequest = new CloseIndexRequest(randomUniqueIndicesOrAliases()).     internalCluster().coordOnlyNodeClient().admin().indices().close(closeIndexRequest).actionGet().     clearInterceptedActions().     assertSameIndices(closeIndexRequest, CloseIndexAction.NAME). }
false;public;0;10;;public void testDeleteIndex() {     interceptTransportActions(DeleteIndexAction.NAME).     String[] randomIndicesOrAliases = randomUniqueIndices().     DeleteIndexRequest deleteIndexRequest = new DeleteIndexRequest(randomIndicesOrAliases).     assertAcked(internalCluster().coordOnlyNodeClient().admin().indices().delete(deleteIndexRequest).actionGet()).     clearInterceptedActions().     assertSameIndices(deleteIndexRequest, DeleteIndexAction.NAME). }
false;public;0;9;;public void testGetMappings() {     interceptTransportActions(GetMappingsAction.NAME).     GetMappingsRequest getMappingsRequest = new GetMappingsRequest().indices(randomIndicesOrAliases()).     internalCluster().coordOnlyNodeClient().admin().indices().getMappings(getMappingsRequest).actionGet().     clearInterceptedActions().     assertSameIndices(getMappingsRequest, GetMappingsAction.NAME). }
false;public;0;11;;public void testPutMapping() {     interceptTransportActions(PutMappingAction.NAME).     PutMappingRequest putMappingRequest = new PutMappingRequest(randomUniqueIndicesOrAliases()).type("type").source("field", "type=text").     internalCluster().coordOnlyNodeClient().admin().indices().putMapping(putMappingRequest).actionGet().     clearInterceptedActions().     assertSameIndices(putMappingRequest, PutMappingAction.NAME). }
false;public;0;9;;public void testGetSettings() {     interceptTransportActions(GetSettingsAction.NAME).     GetSettingsRequest getSettingsRequest = new GetSettingsRequest().indices(randomIndicesOrAliases()).     internalCluster().coordOnlyNodeClient().admin().indices().getSettings(getSettingsRequest).actionGet().     clearInterceptedActions().     assertSameIndices(getSettingsRequest, GetSettingsAction.NAME). }
false;public;0;10;;public void testUpdateSettings() {     interceptTransportActions(UpdateSettingsAction.NAME).     UpdateSettingsRequest updateSettingsRequest = new UpdateSettingsRequest(randomIndicesOrAliases()).settings(Settings.builder().put("refresh_interval", -1)).     internalCluster().coordOnlyNodeClient().admin().indices().updateSettings(updateSettingsRequest).actionGet().     clearInterceptedActions().     assertSameIndices(updateSettingsRequest, UpdateSettingsAction.NAME). }
false;public;0;20;;public void testSearchQueryThenFetch() throws Exception {     interceptTransportActions(SearchTransportService.QUERY_ACTION_NAME, SearchTransportService.FETCH_ID_ACTION_NAME, SearchTransportService.FREE_CONTEXT_ACTION_NAME).     String[] randomIndicesOrAliases = randomIndicesOrAliases().     for (int i = 0. i < randomIndicesOrAliases.length. i++) {         client().prepareIndex(randomIndicesOrAliases[i], "type", "id-" + i).setSource("field", "value").get().     }     refresh().     SearchRequest searchRequest = new SearchRequest(randomIndicesOrAliases).searchType(SearchType.QUERY_THEN_FETCH).     SearchResponse searchResponse = internalCluster().coordOnlyNodeClient().search(searchRequest).actionGet().     assertNoFailures(searchResponse).     assertThat(searchResponse.getHits().getTotalHits().value, greaterThan(0L)).     clearInterceptedActions().     assertSameIndices(searchRequest, SearchTransportService.QUERY_ACTION_NAME, SearchTransportService.FETCH_ID_ACTION_NAME).     // free context messages are not necessarily sent, but if they are, check their indices     assertSameIndicesOptionalRequests(searchRequest, SearchTransportService.FREE_CONTEXT_ACTION_NAME). }
false;public;0;21;;public void testSearchDfsQueryThenFetch() throws Exception {     interceptTransportActions(SearchTransportService.DFS_ACTION_NAME, SearchTransportService.QUERY_ID_ACTION_NAME, SearchTransportService.FETCH_ID_ACTION_NAME, SearchTransportService.FREE_CONTEXT_ACTION_NAME).     String[] randomIndicesOrAliases = randomIndicesOrAliases().     for (int i = 0. i < randomIndicesOrAliases.length. i++) {         client().prepareIndex(randomIndicesOrAliases[i], "type", "id-" + i).setSource("field", "value").get().     }     refresh().     SearchRequest searchRequest = new SearchRequest(randomIndicesOrAliases).searchType(SearchType.DFS_QUERY_THEN_FETCH).     SearchResponse searchResponse = internalCluster().coordOnlyNodeClient().search(searchRequest).actionGet().     assertNoFailures(searchResponse).     assertThat(searchResponse.getHits().getTotalHits().value, greaterThan(0L)).     clearInterceptedActions().     assertSameIndices(searchRequest, SearchTransportService.DFS_ACTION_NAME, SearchTransportService.QUERY_ID_ACTION_NAME, SearchTransportService.FETCH_ID_ACTION_NAME).     // free context messages are not necessarily sent, but if they are, check their indices     assertSameIndicesOptionalRequests(searchRequest, SearchTransportService.FREE_CONTEXT_ACTION_NAME). }
false;private,static;2;3;;private static void assertSameIndices(IndicesRequest originalRequest, String... actions) {     assertSameIndices(originalRequest, false, actions). }
false;private,static;2;3;;private static void assertSameIndicesOptionalRequests(IndicesRequest originalRequest, String... actions) {     assertSameIndices(originalRequest, true, actions). }
false;private,static;3;13;;private static void assertSameIndices(IndicesRequest originalRequest, boolean optional, String... actions) {     for (String action : actions) {         List<TransportRequest> requests = consumeTransportRequests(action).         if (!optional) {             assertThat("no internal requests intercepted for action [" + action + "]", requests.size(), greaterThan(0)).         }         for (TransportRequest internalRequest : requests) {             IndicesRequest indicesRequest = convertRequest(internalRequest).             assertThat(internalRequest.getClass().getName(), indicesRequest.indices(), equalTo(originalRequest.indices())).             assertThat(indicesRequest.indicesOptions(), equalTo(originalRequest.indicesOptions())).         }     } }
false;private,static;2;13;;private static void assertIndicesSubset(List<String> indices, String... actions) {     // indices returned by each bulk shard request need to be a subset of the original indices     for (String action : actions) {         List<TransportRequest> requests = consumeTransportRequests(action).         assertThat("no internal requests intercepted for action [" + action + "]", requests.size(), greaterThan(0)).         for (TransportRequest internalRequest : requests) {             IndicesRequest indicesRequest = convertRequest(internalRequest).             for (String index : indicesRequest.indices()) {                 assertThat(indices, hasItem(index)).             }         }     } }
false;static;1;9;;static IndicesRequest convertRequest(TransportRequest request) {     final IndicesRequest indicesRequest.     if (request instanceof IndicesRequest) {         indicesRequest = (IndicesRequest) request.     } else {         indicesRequest = TransportReplicationActionTests.resolveRequest(request).     }     return indicesRequest. }
false;private;0;8;;private String randomIndexOrAlias() {     String index = randomFrom(indices).     if (randomBoolean()) {         return index + "-alias".     } else {         return index.     } }
false;private;0;8;;private String[] randomIndicesOrAliases() {     // every index has an alias     int count = randomIntBetween(1, indices.size() * 2).     String[] indices = new String[count].     for (int i = 0. i < count. i++) {         indices[i] = randomIndexOrAlias().     }     return indices. }
false;private;0;9;;private String[] randomUniqueIndicesOrAliases() {     String[] uniqueIndices = randomUniqueIndices().     String[] indices = new String[uniqueIndices.length].     int i = 0.     for (String index : uniqueIndices) {         indices[i++] = randomBoolean() ? index + "-alias" : index.     }     return indices. }
false;private;0;8;;private String[] randomUniqueIndices() {     Set<String> uniqueIndices = new HashSet<>().     int count = randomIntBetween(1, this.indices.size()).     while (uniqueIndices.size() < count) {         uniqueIndices.add(randomFrom(this.indices)).     }     return uniqueIndices.toArray(new String[uniqueIndices.size()]). }
false;private,static;0;10;;private static void assertAllRequestsHaveBeenConsumed() {     Iterable<PluginsService> pluginsServices = internalCluster().getInstances(PluginsService.class).     for (PluginsService pluginsService : pluginsServices) {         Set<Map.Entry<String, List<TransportRequest>>> entries = pluginsService.filterPlugins(InterceptingTransportService.TestPlugin.class).stream().findFirst().get().instance.requests.entrySet().         assertThat(entries, emptyIterable()).     } }
false;private,static;0;7;;private static void clearInterceptedActions() {     Iterable<PluginsService> pluginsServices = internalCluster().getInstances(PluginsService.class).     for (PluginsService pluginsService : pluginsServices) {         pluginsService.filterPlugins(InterceptingTransportService.TestPlugin.class).stream().findFirst().get().instance.clearInterceptedActions().     } }
false;private,static;1;7;;private static void interceptTransportActions(String... actions) {     Iterable<PluginsService> pluginsServices = internalCluster().getInstances(PluginsService.class).     for (PluginsService pluginsService : pluginsServices) {         pluginsService.filterPlugins(InterceptingTransportService.TestPlugin.class).stream().findFirst().get().instance.interceptTransportActions(actions).     } }
false;private,static;1;13;;private static List<TransportRequest> consumeTransportRequests(String action) {     List<TransportRequest> requests = new ArrayList<>().     Iterable<PluginsService> pluginsServices = internalCluster().getInstances(PluginsService.class).     for (PluginsService pluginsService : pluginsServices) {         List<TransportRequest> transportRequests = pluginsService.filterPlugins(InterceptingTransportService.TestPlugin.class).stream().findFirst().get().instance.consumeRequests(action).         if (transportRequests != null) {             requests.addAll(transportRequests).         }     }     return requests. }
false;public;2;5;;@Override public List<TransportInterceptor> getTransportInterceptors(NamedWriteableRegistry namedWriteableRegistry, ThreadContext threadContext) {     return Collections.singletonList(instance). }
false;public;4;6;;@Override public <T extends TransportRequest> TransportRequestHandler<T> interceptHandler(String action, String executor, boolean forceExecution, TransportRequestHandler<T> actualHandler) {     return new InterceptingRequestHandler<>(action, actualHandler). }
false;synchronized;1;3;;synchronized List<TransportRequest> consumeRequests(String action) {     return requests.remove(action). }
false;synchronized;1;3;;synchronized void interceptTransportActions(String... actions) {     Collections.addAll(this.actions, actions). }
false;synchronized;0;3;;synchronized void clearInterceptedActions() {     actions.clear(). }
false;public;3;16;;@Override public void messageReceived(T request, TransportChannel channel, Task task) throws Exception {     synchronized (InterceptingTransportService.this) {         if (actions.contains(action)) {             List<TransportRequest> requestList = requests.get(action).             if (requestList == null) {                 requestList = new ArrayList<>().                 requestList.add(request).                 requests.put(action, requestList).             } else {                 requestList.add(request).             }         }     }     requestHandler.messageReceived(request, channel, task). }
