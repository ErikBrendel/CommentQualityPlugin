commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;3;;@BeforeClass public static void beforeClass() { }
false;public,static;0;3;;@AfterClass public static void afterClass() { }
false;public;0;6;;@Before public void setUp() throws Exception {     super.setUp().     threadPool = new TestThreadPool("MultiSearchActionTookTests").     clusterService = createClusterService(threadPool). }
false;public;0;6;;@After public void tearDown() throws Exception {     clusterService.close().     ThreadPool.terminate(threadPool, 30, TimeUnit.SECONDS).     super.tearDown(). }
true;public;0;3;// test unit conversion using a controller clock ;// test unit conversion using a controller clock public void testTookWithControlledClock() throws Exception {     runTestTook(true). }
true;public;0;3;// test using System#nanoTime ;// test using System#nanoTime public void testTookWithRealClock() throws Exception {     runTestTook(false). }
false;public;1;10;;@Override public void onResponse(MultiSearchResponse multiSearchResponse) {     if (controlledClock) {         assertThat(TimeUnit.MILLISECONDS.convert(expected.get(), TimeUnit.NANOSECONDS), equalTo(multiSearchResponse.getTook().getMillis())).     } else {         assertThat(multiSearchResponse.getTook().getMillis(), greaterThanOrEqualTo(TimeUnit.MILLISECONDS.convert(expected.get(), TimeUnit.NANOSECONDS))).     } }
false;public;1;4;;@Override public void onFailure(Exception e) {     throw new RuntimeException(e). }
false;private;1;24;;private void runTestTook(boolean controlledClock) throws Exception {     MultiSearchRequest multiSearchRequest = new MultiSearchRequest().add(new SearchRequest()).     AtomicLong expected = new AtomicLong().     TransportMultiSearchAction action = createTransportMultiSearchAction(controlledClock, expected).     action.doExecute(mock(Task.class), multiSearchRequest, new ActionListener<MultiSearchResponse>() {          @Override         public void onResponse(MultiSearchResponse multiSearchResponse) {             if (controlledClock) {                 assertThat(TimeUnit.MILLISECONDS.convert(expected.get(), TimeUnit.NANOSECONDS), equalTo(multiSearchResponse.getTook().getMillis())).             } else {                 assertThat(multiSearchResponse.getTook().getMillis(), greaterThanOrEqualTo(TimeUnit.MILLISECONDS.convert(expected.get(), TimeUnit.NANOSECONDS))).             }         }          @Override         public void onFailure(Exception e) {             throw new RuntimeException(e).         }     }). }
false;public;0;4;;@Override public TaskManager getTaskManager() {     return taskManager. }
false;public;2;8;;@Override public void search(final SearchRequest request, final ActionListener<SearchResponse> listener) {     requests.add(request).     commonExecutor.execute(() -> {         counter.decrementAndGet().         listener.onResponse(new SearchResponse()).     }). }
false;;5;7;;@Override void executeSearch(final Queue<SearchRequestSlot> requests, final AtomicArray<MultiSearchResponse.Item> responses, final AtomicInteger responseCounter, final ActionListener<MultiSearchResponse> listener, long startTimeInNanos) {     long elapsed = spinForAtLeastNMilliseconds(randomIntBetween(0, 10)).     expected.set(elapsed).     super.executeSearch(requests, responses, responseCounter, listener, startTimeInNanos). }
false;;5;6;;@Override void executeSearch(final Queue<SearchRequestSlot> requests, final AtomicArray<MultiSearchResponse.Item> responses, final AtomicInteger responseCounter, final ActionListener<MultiSearchResponse> listener, long startTimeInNanos) {     expected.set(1000000).     super.executeSearch(requests, responses, responseCounter, listener, startTimeInNanos). }
false;private;2;55;;private TransportMultiSearchAction createTransportMultiSearchAction(boolean controlledClock, AtomicLong expected) {     Settings settings = Settings.builder().put("node.name", TransportMultiSearchActionTests.class.getSimpleName()).build().     TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null, TransportService.NOOP_TRANSPORT_INTERCEPTOR, boundAddress -> DiscoveryNode.createLocal(settings, boundAddress.publishAddress(), UUIDs.randomBase64UUID()), null, Collections.emptySet()) {          @Override         public TaskManager getTaskManager() {             return taskManager.         }     }.     ActionFilters actionFilters = new ActionFilters(new HashSet<>()).     ClusterService clusterService = mock(ClusterService.class).     when(clusterService.state()).thenReturn(ClusterState.builder(new ClusterName("test")).build()).     final int availableProcessors = Runtime.getRuntime().availableProcessors().     AtomicInteger counter = new AtomicInteger().     final List<String> threadPoolNames = Arrays.asList(ThreadPool.Names.GENERIC, ThreadPool.Names.SAME).     Randomness.shuffle(threadPoolNames).     final ExecutorService commonExecutor = threadPool.executor(threadPoolNames.get(0)).     final Set<SearchRequest> requests = Collections.newSetFromMap(Collections.synchronizedMap(new IdentityHashMap<>())).     NodeClient client = new NodeClient(settings, threadPool) {          @Override         public void search(final SearchRequest request, final ActionListener<SearchResponse> listener) {             requests.add(request).             commonExecutor.execute(() -> {                 counter.decrementAndGet().                 listener.onResponse(new SearchResponse()).             }).         }     }.     if (controlledClock) {         return new TransportMultiSearchAction(threadPool, actionFilters, transportService, clusterService, availableProcessors, expected::get, client) {              @Override             void executeSearch(final Queue<SearchRequestSlot> requests, final AtomicArray<MultiSearchResponse.Item> responses, final AtomicInteger responseCounter, final ActionListener<MultiSearchResponse> listener, long startTimeInNanos) {                 expected.set(1000000).                 super.executeSearch(requests, responses, responseCounter, listener, startTimeInNanos).             }         }.     } else {         return new TransportMultiSearchAction(threadPool, actionFilters, transportService, clusterService, availableProcessors, System::nanoTime, client) {              @Override             void executeSearch(final Queue<SearchRequestSlot> requests, final AtomicArray<MultiSearchResponse.Item> responses, final AtomicInteger responseCounter, final ActionListener<MultiSearchResponse> listener, long startTimeInNanos) {                 long elapsed = spinForAtLeastNMilliseconds(randomIntBetween(0, 10)).                 expected.set(elapsed).                 super.executeSearch(requests, responses, responseCounter, listener, startTimeInNanos).             }         }.     } }
false;public;2;4;;@Override public String[] concreteIndexNames(ClusterState state, IndicesRequest request) {     return request.indices(). }
