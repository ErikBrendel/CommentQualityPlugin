commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected GetIndexTemplatesResponse doParseInstance(XContentParser parser) throws IOException {     return GetIndexTemplatesResponse.fromXContent(parser). }
false;protected;0;31;;@Override protected GetIndexTemplatesResponse createTestInstance() {     List<IndexTemplateMetaData> templates = new ArrayList<>().     int numTemplates = between(0, 10).     for (int t = 0. t < numTemplates. t++) {         IndexTemplateMetaData.Builder templateBuilder = IndexTemplateMetaData.builder("template-" + t).         templateBuilder.patterns(IntStream.range(0, between(1, 5)).mapToObj(i -> "pattern-" + i).collect(Collectors.toList())).         int numAlias = between(0, 5).         for (int i = 0. i < numAlias. i++) {             templateBuilder.putAlias(AliasMetaData.builder(randomAlphaOfLengthBetween(1, 10))).         }         if (randomBoolean()) {             templateBuilder.settings(Settings.builder().put("index.setting-1", randomLong())).         }         if (randomBoolean()) {             templateBuilder.order(randomInt()).         }         if (randomBoolean()) {             templateBuilder.version(between(0, 100)).         }         if (randomBoolean()) {             try {                 templateBuilder.putMapping("doc", "{\"doc\":{\"properties\":{\"type\":\"text\"}}}").             } catch (IOException ex) {                 throw new UncheckedIOException(ex).             }         }         templates.add(templateBuilder.build()).     }     return new GetIndexTemplatesResponse(templates). }
false;protected;0;7;;@Override protected boolean supportsUnknownFields() {     // inject arbitrary things inside the IndexTemplateMetaData.     return false. }
true;protected;0;4;/**  * For now, we only unit test the legacy typed responses. This will soon no longer be the case,  * as we introduce support for typeless xContent parsing in {@link GetFieldMappingsResponse}.  */ ;/**  * For now, we only unit test the legacy typed responses. This will soon no longer be the case,  * as we introduce support for typeless xContent parsing in {@link GetFieldMappingsResponse}.  */ @Override protected ToXContent.Params getToXContentParams() {     return new ToXContent.MapParams(Collections.singletonMap(INCLUDE_TYPE_NAME_PARAMETER, "true")). }
false;protected;2;5;;@Override protected void assertEqualInstances(GetIndexTemplatesResponse expectedInstance, GetIndexTemplatesResponse newInstance) {     assertNotSame(newInstance, expectedInstance).     assertThat(new HashSet<>(newInstance.getIndexTemplates()), equalTo(new HashSet<>(expectedInstance.getIndexTemplates()))). }
