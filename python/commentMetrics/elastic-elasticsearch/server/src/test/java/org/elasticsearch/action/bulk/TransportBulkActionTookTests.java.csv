commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void beforeClass() {     threadPool = new TestThreadPool("TransportBulkActionTookTests"). }
false;public,static;0;5;;@AfterClass public static void afterClass() {     ThreadPool.terminate(threadPool, 30, TimeUnit.SECONDS).     threadPool = null. }
false;public;0;5;;@Before public void setUp() throws Exception {     super.setUp().     clusterService = createClusterService(threadPool). }
false;public;0;5;;@After public void tearDown() throws Exception {     super.tearDown().     clusterService.close(). }
false;public;3;5;;@Override public <Request extends ActionRequest, Response extends ActionResponse> void doExecute(Action<Response> action, Request request, ActionListener<Response> listener) {     listener.onResponse((Response) new CreateIndexResponse()). }
false;;6;12;;@Override void executeBulk(Task task, BulkRequest bulkRequest, long startTimeNanos, ActionListener<BulkResponse> listener, AtomicArray<BulkItemResponse> responses, Map<String, IndexNotFoundException> indicesThatCannotBeCreated) {     long elapsed = spinForAtLeastOneMillisecond().     expected.set(elapsed).     super.executeBulk(task, bulkRequest, startTimeNanos, listener, responses, indicesThatCannotBeCreated). }
false;;6;11;;@Override void executeBulk(Task task, BulkRequest bulkRequest, long startTimeNanos, ActionListener<BulkResponse> listener, AtomicArray<BulkItemResponse> responses, Map<String, IndexNotFoundException> indicesThatCannotBeCreated) {     expected.set(1000000).     super.executeBulk(task, bulkRequest, startTimeNanos, listener, responses, indicesThatCannotBeCreated). }
false;private;2;70;;private TransportBulkAction createAction(boolean controlled, AtomicLong expected) {     CapturingTransport capturingTransport = new CapturingTransport().     TransportService transportService = capturingTransport.createTransportService(clusterService.getSettings(), threadPool, TransportService.NOOP_TRANSPORT_INTERCEPTOR, boundAddress -> clusterService.localNode(), null, Collections.emptySet()).     transportService.start().     transportService.acceptIncomingRequests().     IndexNameExpressionResolver resolver = new Resolver().     ActionFilters actionFilters = new ActionFilters(new HashSet<>()).     NodeClient client = new NodeClient(Settings.EMPTY, threadPool) {          @Override         public <Request extends ActionRequest, Response extends ActionResponse> void doExecute(Action<Response> action, Request request, ActionListener<Response> listener) {             listener.onResponse((Response) new CreateIndexResponse()).         }     }.     if (controlled) {         return new TestTransportBulkAction(threadPool, transportService, clusterService, null, client, actionFilters, resolver, null, expected::get) {              @Override             void executeBulk(Task task, BulkRequest bulkRequest, long startTimeNanos, ActionListener<BulkResponse> listener, AtomicArray<BulkItemResponse> responses, Map<String, IndexNotFoundException> indicesThatCannotBeCreated) {                 expected.set(1000000).                 super.executeBulk(task, bulkRequest, startTimeNanos, listener, responses, indicesThatCannotBeCreated).             }         }.     } else {         return new TestTransportBulkAction(threadPool, transportService, clusterService, null, client, actionFilters, resolver, null, System::nanoTime) {              @Override             void executeBulk(Task task, BulkRequest bulkRequest, long startTimeNanos, ActionListener<BulkResponse> listener, AtomicArray<BulkItemResponse> responses, Map<String, IndexNotFoundException> indicesThatCannotBeCreated) {                 long elapsed = spinForAtLeastOneMillisecond().                 expected.set(elapsed).                 super.executeBulk(task, bulkRequest, startTimeNanos, listener, responses, indicesThatCannotBeCreated).             }         }.     } }
true;public;0;3;// test unit conversion with a controlled clock ;// test unit conversion with a controlled clock public void testTookWithControlledClock() throws Exception {     runTestTook(true). }
true;public;0;3;// test took advances with System#nanoTime ;// test took advances with System#nanoTime public void testTookWithRealClock() throws Exception {     runTestTook(false). }
false;public;1;12;;@Override public void onResponse(BulkResponse bulkItemResponses) {     if (controlled) {         assertThat(bulkItemResponses.getTook().getMillis(), equalTo(TimeUnit.MILLISECONDS.convert(expected.get(), TimeUnit.NANOSECONDS))).     } else {         assertThat(bulkItemResponses.getTook().getMillis(), greaterThanOrEqualTo(TimeUnit.MILLISECONDS.convert(expected.get(), TimeUnit.NANOSECONDS))).     } }
false;public;1;4;;@Override public void onFailure(Exception e) { }
false;private;1;32;;private void runTestTook(boolean controlled) throws Exception {     String bulkAction = copyToStringFromClasspath("/org/elasticsearch/action/bulk/simple-bulk.json").     // translate Windows line endings (\r\n) to standard ones (\n)     if (Constants.WINDOWS) {         bulkAction = Strings.replace(bulkAction, "\r\n", "\n").     }     BulkRequest bulkRequest = new BulkRequest().     bulkRequest.add(bulkAction.getBytes(StandardCharsets.UTF_8), 0, bulkAction.length(), null, XContentType.JSON).     AtomicLong expected = new AtomicLong().     TransportBulkAction action = createAction(controlled, expected).     action.doExecute(null, bulkRequest, new ActionListener<BulkResponse>() {          @Override         public void onResponse(BulkResponse bulkItemResponses) {             if (controlled) {                 assertThat(bulkItemResponses.getTook().getMillis(), equalTo(TimeUnit.MILLISECONDS.convert(expected.get(), TimeUnit.NANOSECONDS))).             } else {                 assertThat(bulkItemResponses.getTook().getMillis(), greaterThanOrEqualTo(TimeUnit.MILLISECONDS.convert(expected.get(), TimeUnit.NANOSECONDS))).             }         }          @Override         public void onFailure(Exception e) {         }     }).     // This test's JSON contains outdated references to types     assertWarnings(RestBulkAction.TYPES_DEPRECATION_MESSAGE). }
false;public;2;4;;@Override public String[] concreteIndexNames(ClusterState state, IndicesRequest request) {     return request.indices(). }
false;;0;4;;@Override boolean needToCheck() {     return randomBoolean(). }
false;;2;4;;@Override boolean shouldAutoCreate(String index, ClusterState state) {     return randomBoolean(). }
