commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setup() {     indexService = createIndex("test").     parser = indexService.mapperService().documentMapperParser(). }
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> getPlugins() {     return pluginList(InternalSettingsPlugin.class). }
false;public;0;28;;public void testDefaults() throws Exception {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "ip").endObject().endObject().endObject().endObject()).     DocumentMapper mapper = parser.parse("type", new CompressedXContent(mapping)).     assertEquals(mapping, mapper.mappingSource().toString()).     ParsedDocument doc = mapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field", "::1").endObject()), XContentType.JSON)).     IndexableField[] fields = doc.rootDoc().getFields("field").     assertEquals(2, fields.length).     IndexableField pointField = fields[0].     assertEquals(1, pointField.fieldType().pointIndexDimensionCount()).     assertEquals(16, pointField.fieldType().pointNumBytes()).     assertFalse(pointField.fieldType().stored()).     assertEquals(new BytesRef(InetAddressPoint.encode(InetAddresses.forString("::1"))), pointField.binaryValue()).     IndexableField dvField = fields[1].     assertEquals(DocValuesType.SORTED_SET, dvField.fieldType().docValuesType()).     assertEquals(new BytesRef(InetAddressPoint.encode(InetAddresses.forString("::1"))), dvField.binaryValue()).     assertFalse(dvField.fieldType().stored()). }
false;public;0;21;;public void testNotIndexed() throws Exception {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "ip").field("index", false).endObject().endObject().endObject().endObject()).     DocumentMapper mapper = parser.parse("type", new CompressedXContent(mapping)).     assertEquals(mapping, mapper.mappingSource().toString()).     ParsedDocument doc = mapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field", "::1").endObject()), XContentType.JSON)).     IndexableField[] fields = doc.rootDoc().getFields("field").     assertEquals(1, fields.length).     IndexableField dvField = fields[0].     assertEquals(DocValuesType.SORTED_SET, dvField.fieldType().docValuesType()). }
false;public;0;22;;public void testNoDocValues() throws Exception {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "ip").field("doc_values", false).endObject().endObject().endObject().endObject()).     DocumentMapper mapper = parser.parse("type", new CompressedXContent(mapping)).     assertEquals(mapping, mapper.mappingSource().toString()).     ParsedDocument doc = mapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field", "::1").endObject()), XContentType.JSON)).     IndexableField[] fields = doc.rootDoc().getFields("field").     assertEquals(1, fields.length).     IndexableField pointField = fields[0].     assertEquals(1, pointField.fieldType().pointIndexDimensionCount()).     assertEquals(new BytesRef(InetAddressPoint.encode(InetAddresses.forString("::1"))), pointField.binaryValue()). }
false;public;0;27;;public void testStore() throws Exception {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "ip").field("store", true).endObject().endObject().endObject().endObject()).     DocumentMapper mapper = parser.parse("type", new CompressedXContent(mapping)).     assertEquals(mapping, mapper.mappingSource().toString()).     ParsedDocument doc = mapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field", "::1").endObject()), XContentType.JSON)).     IndexableField[] fields = doc.rootDoc().getFields("field").     assertEquals(3, fields.length).     IndexableField pointField = fields[0].     assertEquals(1, pointField.fieldType().pointIndexDimensionCount()).     IndexableField dvField = fields[1].     assertEquals(DocValuesType.SORTED_SET, dvField.fieldType().docValuesType()).     IndexableField storedField = fields[2].     assertTrue(storedField.fieldType().stored()).     assertEquals(new BytesRef(InetAddressPoint.encode(InetAddress.getByName("::1"))), storedField.binaryValue()). }
false;public;0;35;;public void testIgnoreMalformed() throws Exception {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "ip").endObject().endObject().endObject().endObject()).     DocumentMapper mapper = parser.parse("type", new CompressedXContent(mapping)).     assertEquals(mapping, mapper.mappingSource().toString()).     ThrowingRunnable runnable = () -> mapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field", ":1").endObject()), XContentType.JSON)).     MapperParsingException e = expectThrows(MapperParsingException.class, runnable).     assertThat(e.getCause().getMessage(), containsString("':1' is not an IP string literal")).     mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "ip").field("ignore_malformed", true).endObject().endObject().endObject().endObject()).     DocumentMapper mapper2 = parser.parse("type", new CompressedXContent(mapping)).     ParsedDocument doc = mapper2.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field", ":1").endObject()), XContentType.JSON)).     IndexableField[] fields = doc.rootDoc().getFields("field").     assertEquals(0, fields.length).     assertArrayEquals(new String[] { "field" }, doc.rootDoc().getValues("_ignored")). }
false;public;0;52;;public void testNullValue() throws IOException {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "ip").endObject().endObject().endObject().endObject()).     DocumentMapper mapper = parser.parse("type", new CompressedXContent(mapping)).     assertEquals(mapping, mapper.mappingSource().toString()).     ParsedDocument doc = mapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().nullField("field").endObject()), XContentType.JSON)).     assertArrayEquals(new IndexableField[0], doc.rootDoc().getFields("field")).     mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "ip").field("null_value", "::1").endObject().endObject().endObject().endObject()).     mapper = parser.parse("type", new CompressedXContent(mapping)).     assertEquals(mapping, mapper.mappingSource().toString()).     doc = mapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().nullField("field").endObject()), XContentType.JSON)).     IndexableField[] fields = doc.rootDoc().getFields("field").     assertEquals(2, fields.length).     IndexableField pointField = fields[0].     assertEquals(1, pointField.fieldType().pointIndexDimensionCount()).     assertEquals(16, pointField.fieldType().pointNumBytes()).     assertFalse(pointField.fieldType().stored()).     assertEquals(new BytesRef(InetAddressPoint.encode(InetAddresses.forString("::1"))), pointField.binaryValue()).     IndexableField dvField = fields[1].     assertEquals(DocValuesType.SORTED_SET, dvField.fieldType().docValuesType()).     assertEquals(new BytesRef(InetAddressPoint.encode(InetAddresses.forString("::1"))), dvField.binaryValue()).     assertFalse(dvField.fieldType().stored()). }
false;public;0;16;;public void testSerializeDefaults() throws Exception {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "ip").endObject().endObject().endObject().endObject()).     DocumentMapper docMapper = parser.parse("type", new CompressedXContent(mapping)).     IpFieldMapper mapper = (IpFieldMapper) docMapper.root().getMapper("field").     XContentBuilder builder = XContentFactory.jsonBuilder().startObject().     mapper.doXContentBody(builder, true, ToXContent.EMPTY_PARAMS).     String got = Strings.toString(builder.endObject()).     // it would be nice to check the entire serialized default mapper, but there are     // a whole lot of bogus settings right now it picks up from calling super.doXContentBody...     assertTrue(got, got.contains("\"null_value\":null")).     assertTrue(got, got.contains("\"ignore_malformed\":false")). }
false;public;0;10;;public void testEmptyName() throws IOException {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("").field("type", "ip").endObject().endObject().endObject().endObject()).     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> parser.parse("type", new CompressedXContent(mapping))).     assertThat(e.getMessage(), containsString("name cannot be empty string")). }
