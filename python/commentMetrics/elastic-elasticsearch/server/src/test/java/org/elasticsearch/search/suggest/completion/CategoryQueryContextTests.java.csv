commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;7;;public static CategoryQueryContext randomCategoryQueryContext() {     final CategoryQueryContext.Builder builder = CategoryQueryContext.builder().     builder.setCategory(randomAlphaOfLength(10)).     maybeSet(builder::setBoost, randomIntBetween(1, 10)).     maybeSet(builder::setPrefix, randomBoolean()).     return builder.build(). }
false;protected;0;4;;@Override protected CategoryQueryContext createTestModel() {     return randomCategoryQueryContext(). }
false;protected;1;4;;@Override protected CategoryQueryContext fromXContent(XContentParser parser) throws IOException {     return CategoryQueryContext.fromXContent(parser). }
false;public;0;12;;public void testNullCategoryIsIllegal() {     final CategoryQueryContext categoryQueryContext = randomCategoryQueryContext().     final CategoryQueryContext.Builder builder = CategoryQueryContext.builder().setBoost(categoryQueryContext.getBoost()).setPrefix(categoryQueryContext.isPrefix()).     try {         builder.build().         fail("null category is illegal").     } catch (NullPointerException e) {         assertEquals(e.getMessage(), "category must not be null").     } }
false;public;0;17;;public void testIllegalArguments() {     final CategoryQueryContext.Builder builder = CategoryQueryContext.builder().     try {         builder.setCategory(null).         fail("category must not be null").     } catch (NullPointerException e) {         assertEquals(e.getMessage(), "category must not be null").     }     try {         builder.setBoost(-randomIntBetween(1, Integer.MAX_VALUE)).         fail("boost must be positive").     } catch (IllegalArgumentException e) {         assertEquals(e.getMessage(), "boost must be greater than 0").     } }
