commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@After public void closeMockFileSystems() throws IOException {     IOUtils.close(fileSystems). }
false;public;0;4;;@Before public void setupEnv() throws IOException {     // default to posix, but tests may call setupEnv(false) to overwrite     env = setupEnv(true, fileSystems). }
false;public,static;2;14;;public static Environment setupEnv(boolean posix, List<FileSystem> fileSystems) throws IOException {     final Configuration configuration.     if (posix) {         configuration = Configuration.unix().toBuilder().setAttributeViews("basic", "owner", "posix", "unix").build().     } else {         configuration = Configuration.unix().     }     FileSystem fs = Jimfs.newFileSystem(configuration).     fileSystems.add(fs).     // restored by restoreFileSystem in ESTestCase     PathUtilsForTesting.installMock(fs).     Path home = fs.getPath("/", "test-home").     Files.createDirectories(home.resolve("config")).     return TestEnvironment.newEnvironment(Settings.builder().put("path.home", home).build()). }
false;;2;9;;KeyStoreWrapper createKeystore(String password, String... settings) throws Exception {     KeyStoreWrapper keystore = KeyStoreWrapper.create().     assertEquals(0, settings.length % 2).     for (int i = 0. i < settings.length. i += 2) {         keystore.setString(settings[i], settings[i + 1].toCharArray()).     }     keystore.save(env.configFile(), password.toCharArray()).     return keystore. }
false;;1;5;;KeyStoreWrapper loadKeystore(String password) throws Exception {     KeyStoreWrapper keystore = KeyStoreWrapper.load(env.configFile()).     keystore.decrypt(password.toCharArray()).     return keystore. }
false;;2;3;;void assertSecureString(String setting, String value) throws Exception {     assertSecureString(loadKeystore(""), setting, value). }
false;;3;3;;void assertSecureString(KeyStoreWrapper keystore, String setting, String value) throws Exception {     assertEquals(value, keystore.getString(setting).toString()). }
false;;2;3;;void assertSecureFile(String setting, Path file) throws Exception {     assertSecureFile(loadKeystore(""), setting, file). }
false;;3;19;;void assertSecureFile(KeyStoreWrapper keystore, String setting, Path file) throws Exception {     byte[] expectedBytes = Files.readAllBytes(file).     try (InputStream input = keystore.getFile(setting)) {         for (int i = 0. i < expectedBytes.length. ++i) {             int got = input.read().             int expected = Byte.toUnsignedInt(expectedBytes[i]).             if (got < 0) {                 fail("Got EOF from keystore stream at position " + i + " but expected 0x" + Integer.toHexString(expected)).             }             assertEquals("Byte " + i, expected, got).         }         int eof = input.read().         if (eof != -1) {             fail("Found extra bytes in file stream from keystore, expected " + expectedBytes.length + " bytes but found 0x" + Integer.toHexString(eof)).         }     } }
