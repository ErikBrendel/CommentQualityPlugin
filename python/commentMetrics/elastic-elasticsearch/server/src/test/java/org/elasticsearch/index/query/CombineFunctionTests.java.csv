commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;public void testValidOrdinals() {     assertThat(CombineFunction.MULTIPLY.ordinal(), equalTo(0)).     assertThat(CombineFunction.REPLACE.ordinal(), equalTo(1)).     assertThat(CombineFunction.SUM.ordinal(), equalTo(2)).     assertThat(CombineFunction.AVG.ordinal(), equalTo(3)).     assertThat(CombineFunction.MIN.ordinal(), equalTo(4)).     assertThat(CombineFunction.MAX.ordinal(), equalTo(5)). }
false;public;0;42;;public void testWriteTo() throws Exception {     try (BytesStreamOutput out = new BytesStreamOutput()) {         CombineFunction.MULTIPLY.writeTo(out).         try (StreamInput in = out.bytes().streamInput()) {             assertThat(in.readVInt(), equalTo(0)).         }     }     try (BytesStreamOutput out = new BytesStreamOutput()) {         CombineFunction.REPLACE.writeTo(out).         try (StreamInput in = out.bytes().streamInput()) {             assertThat(in.readVInt(), equalTo(1)).         }     }     try (BytesStreamOutput out = new BytesStreamOutput()) {         CombineFunction.SUM.writeTo(out).         try (StreamInput in = out.bytes().streamInput()) {             assertThat(in.readVInt(), equalTo(2)).         }     }     try (BytesStreamOutput out = new BytesStreamOutput()) {         CombineFunction.AVG.writeTo(out).         try (StreamInput in = out.bytes().streamInput()) {             assertThat(in.readVInt(), equalTo(3)).         }     }     try (BytesStreamOutput out = new BytesStreamOutput()) {         CombineFunction.MIN.writeTo(out).         try (StreamInput in = out.bytes().streamInput()) {             assertThat(in.readVInt(), equalTo(4)).         }     }     try (BytesStreamOutput out = new BytesStreamOutput()) {         CombineFunction.MAX.writeTo(out).         try (StreamInput in = out.bytes().streamInput()) {             assertThat(in.readVInt(), equalTo(5)).         }     } }
false;public;0;38;;public void testReadFrom() throws Exception {     try (BytesStreamOutput out = new BytesStreamOutput()) {         out.writeVInt(0).         try (StreamInput in = out.bytes().streamInput()) {             assertThat(CombineFunction.readFromStream(in), equalTo(CombineFunction.MULTIPLY)).         }     }     try (BytesStreamOutput out = new BytesStreamOutput()) {         out.writeVInt(1).         try (StreamInput in = out.bytes().streamInput()) {             assertThat(CombineFunction.readFromStream(in), equalTo(CombineFunction.REPLACE)).         }     }     try (BytesStreamOutput out = new BytesStreamOutput()) {         out.writeVInt(2).         try (StreamInput in = out.bytes().streamInput()) {             assertThat(CombineFunction.readFromStream(in), equalTo(CombineFunction.SUM)).         }     }     try (BytesStreamOutput out = new BytesStreamOutput()) {         out.writeVInt(3).         try (StreamInput in = out.bytes().streamInput()) {             assertThat(CombineFunction.readFromStream(in), equalTo(CombineFunction.AVG)).         }     }     try (BytesStreamOutput out = new BytesStreamOutput()) {         out.writeVInt(4).         try (StreamInput in = out.bytes().streamInput()) {             assertThat(CombineFunction.readFromStream(in), equalTo(CombineFunction.MIN)).         }     }     try (BytesStreamOutput out = new BytesStreamOutput()) {         out.writeVInt(5).         try (StreamInput in = out.bytes().streamInput()) {             assertThat(CombineFunction.readFromStream(in), equalTo(CombineFunction.MAX)).         }     } }
false;public;0;8;;public void testFromString() {     assertThat(CombineFunction.fromString("multiply"), equalTo(CombineFunction.MULTIPLY)).     assertThat(CombineFunction.fromString("replace"), equalTo(CombineFunction.REPLACE)).     assertThat(CombineFunction.fromString("sum"), equalTo(CombineFunction.SUM)).     assertThat(CombineFunction.fromString("avg"), equalTo(CombineFunction.AVG)).     assertThat(CombineFunction.fromString("min"), equalTo(CombineFunction.MIN)).     assertThat(CombineFunction.fromString("max"), equalTo(CombineFunction.MAX)). }
