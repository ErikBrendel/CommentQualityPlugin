commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;9;;@Override protected SpanOrQueryBuilder doCreateTestQueryBuilder() {     SpanTermQueryBuilder[] spanTermQueries = new SpanTermQueryBuilderTests().createSpanTermQueryBuilders(randomIntBetween(1, 6)).     SpanOrQueryBuilder queryBuilder = new SpanOrQueryBuilder(spanTermQueries[0]).     for (int i = 1. i < spanTermQueries.length. i++) {         queryBuilder.addClause(spanTermQueries[i]).     }     return queryBuilder. }
false;protected;3;10;;@Override protected void doAssertLuceneQuery(SpanOrQueryBuilder queryBuilder, Query query, SearchContext context) throws IOException {     assertThat(query, instanceOf(SpanOrQuery.class)).     SpanOrQuery spanOrQuery = (SpanOrQuery) query.     assertThat(spanOrQuery.getClauses().length, equalTo(queryBuilder.clauses().size())).     Iterator<SpanQueryBuilder> spanQueryBuilderIterator = queryBuilder.clauses().iterator().     for (SpanQuery spanQuery : spanOrQuery.getClauses()) {         assertThat(spanQuery, equalTo(spanQueryBuilderIterator.next().toQuery(context.getQueryShardContext()))).     } }
false;public;0;8;;public void testIllegalArguments() {     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new SpanOrQueryBuilder((SpanQueryBuilder) null)).     assertEquals("[span_or] must include at least one clause", e.getMessage()).     SpanOrQueryBuilder spanOrBuilder = new SpanOrQueryBuilder(new SpanTermQueryBuilder("field", "value")).     e = expectThrows(IllegalArgumentException.class, () -> spanOrBuilder.addClause(null)).     assertEquals("[span_or] inner clause cannot be null", e.getMessage()). }
false;public;0;5;;public void testClausesUnmodifiable() {     SpanNearQueryBuilder spanNearQueryBuilder = new SpanNearQueryBuilder(new SpanTermQueryBuilder("field", "value"), 1).     expectThrows(UnsupportedOperationException.class, () -> spanNearQueryBuilder.clauses().add(new SpanTermQueryBuilder("field", "value2"))). }
false;public;0;36;;public void testFromJson() throws IOException {     String json = "{\n" + "  \"span_or\" : {\n" + "    \"clauses\" : [ {\n" + "      \"span_term\" : {\n" + "        \"field\" : {\n" + "          \"value\" : \"value1\",\n" + "          \"boost\" : 1.0\n" + "        }\n" + "      }\n" + "    }, {\n" + "      \"span_term\" : {\n" + "        \"field\" : {\n" + "          \"value\" : \"value2\",\n" + "          \"boost\" : 1.0\n" + "        }\n" + "      }\n" + "    }, {\n" + "      \"span_term\" : {\n" + "        \"field\" : {\n" + "          \"value\" : \"value3\",\n" + "          \"boost\" : 1.0\n" + "        }\n" + "      }\n" + "    } ],\n" + "    \"boost\" : 2.0\n" + "  }\n" + "}".     SpanOrQueryBuilder parsed = (SpanOrQueryBuilder) parseQuery(json).     checkGeneratedJson(json, parsed).     assertEquals(json, 3, parsed.clauses().size()).     assertEquals(json, 2.0, parsed.boost(), 0.0). }
false;public;0;20;;public void testFromJsonWithNonDefaultBoostInInnerQuery() {     String json = "{\n" + "  \"span_or\" : {\n" + "    \"clauses\" : [ {\n" + "      \"span_term\" : {\n" + "        \"field\" : {\n" + "          \"value\" : \"value1\",\n" + "          \"boost\" : 2.0\n" + "        }\n" + "      }\n" + "    } ],\n" + "    \"boost\" : 1.0\n" + "  }\n" + "}".     Exception exception = expectThrows(ParsingException.class, () -> parseQuery(json)).     assertThat(exception.getMessage(), equalTo("span_or [clauses] as a nested span clause can't have non-default boost value [2.0]")). }
