commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setUpAction() {     new RestGetSourceAction(Settings.EMPTY, controller()). }
false;public,static;0;6;;@AfterClass public static void cleanupReferences() {     request = null.     channel = null.     listener = null. }
true;public;0;10;/**  * test deprecation is logged if type is used in path  */ ;/**  * test deprecation is logged if type is used in path  */ public void testTypeInPath() {     for (Method method : Arrays.asList(Method.GET, Method.HEAD)) {         RestRequest request = new FakeRestRequest.Builder(xContentRegistry()).withMethod(method).withPath("/some_index/some_type/id/_source").build().         dispatchRequest(request).         assertWarnings(RestGetSourceAction.TYPES_DEPRECATION_MESSAGE).     } }
true;public;0;13;/**  * test deprecation is logged if type is used as parameter  */ ;/**  * test deprecation is logged if type is used as parameter  */ public void testTypeParameter() {     Map<String, String> params = new HashMap<>().     params.put("type", "some_type").     for (Method method : Arrays.asList(Method.GET, Method.HEAD)) {         RestRequest request = new FakeRestRequest.Builder(xContentRegistry()).withMethod(method).withPath("/some_index/_source/id").withParams(params).build().         dispatchRequest(request).         assertWarnings(RestGetSourceAction.TYPES_DEPRECATION_MESSAGE).     } }
false;public;0;11;;public void testRestGetSourceAction() throws Exception {     final BytesReference source = new BytesArray("{\"foo\": \"bar\"}").     final GetResponse response = new GetResponse(new GetResult("index1", "_doc", "1", UNASSIGNED_SEQ_NO, 0, -1, true, source, emptyMap())).     final RestResponse restResponse = listener.buildResponse(response).     assertThat(restResponse.status(), equalTo(OK)).     assertThat(restResponse.contentType(), equalTo("application/json. charset=UTF-8")).     assertThat(restResponse.content(), equalTo(new BytesArray("{\"foo\": \"bar\"}"))). }
false;public;0;8;;public void testRestGetSourceActionWithMissingDocument() {     final GetResponse response = new GetResponse(new GetResult("index1", "_doc", "1", UNASSIGNED_SEQ_NO, 0, -1, false, null, emptyMap())).     final ResourceNotFoundException exception = expectThrows(ResourceNotFoundException.class, () -> listener.buildResponse(response)).     assertThat(exception.getMessage(), equalTo("Document not found [index1]/[_doc]/[1]")). }
false;public;0;8;;public void testRestGetSourceActionWithMissingDocumentSource() {     final GetResponse response = new GetResponse(new GetResult("index1", "_doc", "1", UNASSIGNED_SEQ_NO, 0, -1, true, null, emptyMap())).     final ResourceNotFoundException exception = expectThrows(ResourceNotFoundException.class, () -> listener.buildResponse(response)).     assertThat(exception.getMessage(), equalTo("Source not found [index1]/[_doc]/[1]")). }
