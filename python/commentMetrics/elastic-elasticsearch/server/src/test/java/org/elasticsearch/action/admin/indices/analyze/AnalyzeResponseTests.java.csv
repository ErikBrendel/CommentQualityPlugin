commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Predicate<String> getRandomFieldsExcludeFilter() {     return s -> s.contains("tokens."). }
false;protected;1;4;;@Override protected AnalyzeResponse doParseInstance(XContentParser parser) throws IOException {     return AnalyzeResponse.fromXContent(parser). }
false;protected;0;4;;@Override protected AnalyzeResponse createBlankInstance() {     return new AnalyzeResponse(). }
false;protected;0;26;;@Override protected AnalyzeResponse createTestInstance() {     int tokenCount = randomIntBetween(1, 30).     AnalyzeResponse.AnalyzeToken[] tokens = new AnalyzeResponse.AnalyzeToken[tokenCount].     for (int i = 0. i < tokenCount. i++) {         tokens[i] = randomToken().     }     DetailAnalyzeResponse dar = null.     if (randomBoolean()) {         dar = new DetailAnalyzeResponse().         if (randomBoolean()) {             dar.charfilters(new DetailAnalyzeResponse.CharFilteredText[] { new DetailAnalyzeResponse.CharFilteredText("my_charfilter", new String[] { "one two" }) }).         }         dar.tokenizer(new DetailAnalyzeResponse.AnalyzeTokenList("my_tokenizer", tokens)).         if (randomBoolean()) {             dar.tokenfilters(new DetailAnalyzeResponse.AnalyzeTokenList[] { new DetailAnalyzeResponse.AnalyzeTokenList("my_tokenfilter_1", tokens), new DetailAnalyzeResponse.AnalyzeTokenList("my_tokenfilter_2", tokens) }).         }         return new AnalyzeResponse(null, dar).     }     return new AnalyzeResponse(Arrays.asList(tokens), null). }
false;private;0;38;;private AnalyzeResponse.AnalyzeToken randomToken() {     String token = randomAlphaOfLengthBetween(1, 20).     int position = randomIntBetween(0, 1000).     int startOffset = randomIntBetween(0, 1000).     int endOffset = randomIntBetween(0, 1000).     int posLength = randomIntBetween(1, 5).     String type = randomAlphaOfLengthBetween(1, 20).     Map<String, Object> extras = new HashMap<>().     if (randomBoolean()) {         int entryCount = randomInt(6).         for (int i = 0. i < entryCount. i++) {             switch(randomInt(6)) {                 case 0:                 case 1:                 case 2:                 case 3:                     String key = randomAlphaOfLength(5).                     String value = randomAlphaOfLength(10).                     extras.put(key, value).                     break.                 case 4:                     String objkey = randomAlphaOfLength(5).                     Map<String, String> obj = new HashMap<>().                     obj.put(randomAlphaOfLength(5), randomAlphaOfLength(10)).                     extras.put(objkey, obj).                     break.                 case 5:                     String listkey = randomAlphaOfLength(5).                     List<String> list = new ArrayList<>().                     list.add(randomAlphaOfLength(4)).                     list.add(randomAlphaOfLength(6)).                     extras.put(listkey, list).                     break.             }         }     }     return new AnalyzeResponse.AnalyzeToken(token, position, startOffset, endOffset, posLength, type, extras). }
false;public;0;26;;public void testNullResponseToXContent() throws IOException {     DetailAnalyzeResponse.CharFilteredText[] charfilters = null.     String name = "test_tokens_null".     AnalyzeResponse.AnalyzeToken[] tokens = null.     DetailAnalyzeResponse.AnalyzeTokenList tokenizer = null.     DetailAnalyzeResponse.AnalyzeTokenList tokenfiltersItem = new DetailAnalyzeResponse.AnalyzeTokenList(name, tokens).     DetailAnalyzeResponse.AnalyzeTokenList[] tokenfilters = { tokenfiltersItem }.     DetailAnalyzeResponse detail = new DetailAnalyzeResponse(charfilters, tokenizer, tokenfilters).     AnalyzeResponse response = new AnalyzeResponse(null, detail).     try (XContentBuilder builder = JsonXContent.contentBuilder()) {         response.toXContent(builder, ToXContent.EMPTY_PARAMS).         Map<String, Object> converted = XContentHelper.convertToMap(BytesReference.bytes(builder), false, builder.contentType()).v2().         List<Map<String, Object>> tokenfiltersValue = (List<Map<String, Object>>) ((Map<String, Object>) converted.get("detail")).get("tokenfilters").         List<Map<String, Object>> nullTokens = (List<Map<String, Object>>) tokenfiltersValue.get(0).get("tokens").         String nameValue = (String) tokenfiltersValue.get(0).get("name").         assertThat(nullTokens.size(), equalTo(0)).         assertThat(name, equalTo(nameValue)).     } }
