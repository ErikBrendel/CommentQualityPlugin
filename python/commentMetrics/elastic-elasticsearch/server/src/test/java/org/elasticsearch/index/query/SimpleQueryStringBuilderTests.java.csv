# id;timestamp;commentText;codeText;commentWords;codeWords
SimpleQueryStringBuilderTests -> public void testUnmappedFieldNoTokenWithAndOperator() throws IOException;1542768589;Test for behavior reported in https://github.com/elastic/elasticsearch/issues/34708_Unmapped field can lead to MatchNoDocsQuerys in disjunction queries. If tokens are eliminated (e.g. because_the tokenizer removed them as punctuation) on regular fields, this can leave only MatchNoDocsQuerys in the_disjunction clause. Instead those disjunctions should be eliminated completely.;public void testUnmappedFieldNoTokenWithAndOperator() throws IOException {_        Query query = new SimpleQueryStringBuilder("first & second")_                .field(STRING_FIELD_NAME)_                .field("unmapped")_                .field("another_unmapped")_                .defaultOperator(Operator.AND)_                .toQuery(createShardContext())__        BooleanQuery expected = new BooleanQuery.Builder()_                .add(new TermQuery(new Term(STRING_FIELD_NAME, "first")), BooleanClause.Occur.MUST)_                .add(new TermQuery(new Term(STRING_FIELD_NAME, "second")), BooleanClause.Occur.MUST)_                .build()__        assertEquals(expected, query)__    };test,for,behavior,reported,in,https,github,com,elastic,elasticsearch,issues,34708,unmapped,field,can,lead,to,match,no,docs,querys,in,disjunction,queries,if,tokens,are,eliminated,e,g,because,the,tokenizer,removed,them,as,punctuation,on,regular,fields,this,can,leave,only,match,no,docs,querys,in,the,disjunction,clause,instead,those,disjunctions,should,be,eliminated,completely;public,void,test,unmapped,field,no,token,with,and,operator,throws,ioexception,query,query,new,simple,query,string,builder,first,second,field,field,unmapped,field,default,operator,operator,and,to,query,create,shard,context,boolean,query,expected,new,boolean,query,builder,add,new,term,query,new,term,first,boolean,clause,occur,must,add,new,term,query,new,term,second,boolean,clause,occur,must,build,assert,equals,expected,query
SimpleQueryStringBuilderTests -> public void testUnmappedFieldNoTokenWithAndOperator() throws IOException;1543432527;Test for behavior reported in https://github.com/elastic/elasticsearch/issues/34708_Unmapped field can lead to MatchNoDocsQuerys in disjunction queries. If tokens are eliminated (e.g. because_the tokenizer removed them as punctuation) on regular fields, this can leave only MatchNoDocsQuerys in the_disjunction clause. Instead those disjunctions should be eliminated completely.;public void testUnmappedFieldNoTokenWithAndOperator() throws IOException {_        Query query = new SimpleQueryStringBuilder("first & second")_                .field(STRING_FIELD_NAME)_                .field("unmapped")_                .field("another_unmapped")_                .defaultOperator(Operator.AND)_                .toQuery(createShardContext())__        BooleanQuery expected = new BooleanQuery.Builder()_                .add(new TermQuery(new Term(STRING_FIELD_NAME, "first")), BooleanClause.Occur.MUST)_                .add(new TermQuery(new Term(STRING_FIELD_NAME, "second")), BooleanClause.Occur.MUST)_                .build()__        assertEquals(expected, query)__    };test,for,behavior,reported,in,https,github,com,elastic,elasticsearch,issues,34708,unmapped,field,can,lead,to,match,no,docs,querys,in,disjunction,queries,if,tokens,are,eliminated,e,g,because,the,tokenizer,removed,them,as,punctuation,on,regular,fields,this,can,leave,only,match,no,docs,querys,in,the,disjunction,clause,instead,those,disjunctions,should,be,eliminated,completely;public,void,test,unmapped,field,no,token,with,and,operator,throws,ioexception,query,query,new,simple,query,string,builder,first,second,field,field,unmapped,field,default,operator,operator,and,to,query,create,shard,context,boolean,query,expected,new,boolean,query,builder,add,new,term,query,new,term,first,boolean,clause,occur,must,add,new,term,query,new,term,second,boolean,clause,occur,must,build,assert,equals,expected,query
SimpleQueryStringBuilderTests -> public void testUnmappedFieldNoTokenWithAndOperator() throws IOException;1544782245;Test for behavior reported in https://github.com/elastic/elasticsearch/issues/34708_Unmapped field can lead to MatchNoDocsQuerys in disjunction queries. If tokens are eliminated (e.g. because_the tokenizer removed them as punctuation) on regular fields, this can leave only MatchNoDocsQuerys in the_disjunction clause. Instead those disjunctions should be eliminated completely.;public void testUnmappedFieldNoTokenWithAndOperator() throws IOException {_        Query query = new SimpleQueryStringBuilder("first & second")_                .field(STRING_FIELD_NAME)_                .field("unmapped")_                .field("another_unmapped")_                .defaultOperator(Operator.AND)_                .toQuery(createShardContext())__        BooleanQuery expected = new BooleanQuery.Builder()_                .add(new TermQuery(new Term(STRING_FIELD_NAME, "first")), BooleanClause.Occur.MUST)_                .add(new TermQuery(new Term(STRING_FIELD_NAME, "second")), BooleanClause.Occur.MUST)_                .build()__        assertEquals(expected, query)__    };test,for,behavior,reported,in,https,github,com,elastic,elasticsearch,issues,34708,unmapped,field,can,lead,to,match,no,docs,querys,in,disjunction,queries,if,tokens,are,eliminated,e,g,because,the,tokenizer,removed,them,as,punctuation,on,regular,fields,this,can,leave,only,match,no,docs,querys,in,the,disjunction,clause,instead,those,disjunctions,should,be,eliminated,completely;public,void,test,unmapped,field,no,token,with,and,operator,throws,ioexception,query,query,new,simple,query,string,builder,first,second,field,field,unmapped,field,default,operator,operator,and,to,query,create,shard,context,boolean,query,expected,new,boolean,query,builder,add,new,term,query,new,term,first,boolean,clause,occur,must,add,new,term,query,new,term,second,boolean,clause,occur,must,build,assert,equals,expected,query
SimpleQueryStringBuilderTests -> public void testUnmappedFieldNoTokenWithAndOperator() throws IOException;1549017700;Test for behavior reported in https://github.com/elastic/elasticsearch/issues/34708_Unmapped field can lead to MatchNoDocsQuerys in disjunction queries. If tokens are eliminated (e.g. because_the tokenizer removed them as punctuation) on regular fields, this can leave only MatchNoDocsQuerys in the_disjunction clause. Instead those disjunctions should be eliminated completely.;public void testUnmappedFieldNoTokenWithAndOperator() throws IOException {_        Query query = new SimpleQueryStringBuilder("first & second")_                .field(STRING_FIELD_NAME)_                .field("unmapped")_                .field("another_unmapped")_                .defaultOperator(Operator.AND)_                .toQuery(createShardContext())__        BooleanQuery expected = new BooleanQuery.Builder()_                .add(new TermQuery(new Term(STRING_FIELD_NAME, "first")), BooleanClause.Occur.MUST)_                .add(new TermQuery(new Term(STRING_FIELD_NAME, "second")), BooleanClause.Occur.MUST)_                .build()__        assertEquals(expected, query)__    };test,for,behavior,reported,in,https,github,com,elastic,elasticsearch,issues,34708,unmapped,field,can,lead,to,match,no,docs,querys,in,disjunction,queries,if,tokens,are,eliminated,e,g,because,the,tokenizer,removed,them,as,punctuation,on,regular,fields,this,can,leave,only,match,no,docs,querys,in,the,disjunction,clause,instead,those,disjunctions,should,be,eliminated,completely;public,void,test,unmapped,field,no,token,with,and,operator,throws,ioexception,query,query,new,simple,query,string,builder,first,second,field,field,unmapped,field,default,operator,operator,and,to,query,create,shard,context,boolean,query,expected,new,boolean,query,builder,add,new,term,query,new,term,first,boolean,clause,occur,must,add,new,term,query,new,term,second,boolean,clause,occur,must,build,assert,equals,expected,query
SimpleQueryStringBuilderTests -> public void testFieldsCannotBeSetToNull();1524684173;The following should fail fast - never silently set the map containing_fields and weights to null but refuse to accept null instead.;public void testFieldsCannotBeSetToNull() {_        SimpleQueryStringBuilder qb = createTestQueryBuilder()__        NullPointerException e = expectThrows(NullPointerException.class, () -> qb.fields(null))__        assertEquals("fields cannot be null", e.getMessage())__    };the,following,should,fail,fast,never,silently,set,the,map,containing,fields,and,weights,to,null,but,refuse,to,accept,null,instead;public,void,test,fields,cannot,be,set,to,null,simple,query,string,builder,qb,create,test,query,builder,null,pointer,exception,e,expect,throws,null,pointer,exception,class,qb,fields,null,assert,equals,fields,cannot,be,null,e,get,message
SimpleQueryStringBuilderTests -> public void testFieldsCannotBeSetToNull();1528706846;The following should fail fast - never silently set the map containing_fields and weights to null but refuse to accept null instead.;public void testFieldsCannotBeSetToNull() {_        SimpleQueryStringBuilder qb = createTestQueryBuilder()__        NullPointerException e = expectThrows(NullPointerException.class, () -> qb.fields(null))__        assertEquals("fields cannot be null", e.getMessage())__    };the,following,should,fail,fast,never,silently,set,the,map,containing,fields,and,weights,to,null,but,refuse,to,accept,null,instead;public,void,test,fields,cannot,be,set,to,null,simple,query,string,builder,qb,create,test,query,builder,null,pointer,exception,e,expect,throws,null,pointer,exception,class,qb,fields,null,assert,equals,fields,cannot,be,null,e,get,message
SimpleQueryStringBuilderTests -> public void testFieldsCannotBeSetToNull();1528762805;The following should fail fast - never silently set the map containing_fields and weights to null but refuse to accept null instead.;public void testFieldsCannotBeSetToNull() {_        SimpleQueryStringBuilder qb = createTestQueryBuilder()__        NullPointerException e = expectThrows(NullPointerException.class, () -> qb.fields(null))__        assertEquals("fields cannot be null", e.getMessage())__    };the,following,should,fail,fast,never,silently,set,the,map,containing,fields,and,weights,to,null,but,refuse,to,accept,null,instead;public,void,test,fields,cannot,be,set,to,null,simple,query,string,builder,qb,create,test,query,builder,null,pointer,exception,e,expect,throws,null,pointer,exception,class,qb,fields,null,assert,equals,fields,cannot,be,null,e,get,message
SimpleQueryStringBuilderTests -> public void testFieldsCannotBeSetToNull();1531937412;The following should fail fast - never silently set the map containing_fields and weights to null but refuse to accept null instead.;public void testFieldsCannotBeSetToNull() {_        SimpleQueryStringBuilder qb = createTestQueryBuilder()__        NullPointerException e = expectThrows(NullPointerException.class, () -> qb.fields(null))__        assertEquals("fields cannot be null", e.getMessage())__    };the,following,should,fail,fast,never,silently,set,the,map,containing,fields,and,weights,to,null,but,refuse,to,accept,null,instead;public,void,test,fields,cannot,be,set,to,null,simple,query,string,builder,qb,create,test,query,builder,null,pointer,exception,e,expect,throws,null,pointer,exception,class,qb,fields,null,assert,equals,fields,cannot,be,null,e,get,message
SimpleQueryStringBuilderTests -> public void testFieldsCannotBeSetToNull();1532685069;The following should fail fast - never silently set the map containing_fields and weights to null but refuse to accept null instead.;public void testFieldsCannotBeSetToNull() {_        SimpleQueryStringBuilder qb = createTestQueryBuilder()__        NullPointerException e = expectThrows(NullPointerException.class, () -> qb.fields(null))__        assertEquals("fields cannot be null", e.getMessage())__    };the,following,should,fail,fast,never,silently,set,the,map,containing,fields,and,weights,to,null,but,refuse,to,accept,null,instead;public,void,test,fields,cannot,be,set,to,null,simple,query,string,builder,qb,create,test,query,builder,null,pointer,exception,e,expect,throws,null,pointer,exception,class,qb,fields,null,assert,equals,fields,cannot,be,null,e,get,message
SimpleQueryStringBuilderTests -> public void testFieldsCannotBeSetToNull();1533921794;The following should fail fast - never silently set the map containing_fields and weights to null but refuse to accept null instead.;public void testFieldsCannotBeSetToNull() {_        SimpleQueryStringBuilder qb = createTestQueryBuilder()__        NullPointerException e = expectThrows(NullPointerException.class, () -> qb.fields(null))__        assertEquals("fields cannot be null", e.getMessage())__    };the,following,should,fail,fast,never,silently,set,the,map,containing,fields,and,weights,to,null,but,refuse,to,accept,null,instead;public,void,test,fields,cannot,be,set,to,null,simple,query,string,builder,qb,create,test,query,builder,null,pointer,exception,e,expect,throws,null,pointer,exception,class,qb,fields,null,assert,equals,fields,cannot,be,null,e,get,message
SimpleQueryStringBuilderTests -> public void testFieldsCannotBeSetToNull();1535046779;The following should fail fast - never silently set the map containing_fields and weights to null but refuse to accept null instead.;public void testFieldsCannotBeSetToNull() {_        SimpleQueryStringBuilder qb = createTestQueryBuilder()__        NullPointerException e = expectThrows(NullPointerException.class, () -> qb.fields(null))__        assertEquals("fields cannot be null", e.getMessage())__    };the,following,should,fail,fast,never,silently,set,the,map,containing,fields,and,weights,to,null,but,refuse,to,accept,null,instead;public,void,test,fields,cannot,be,set,to,null,simple,query,string,builder,qb,create,test,query,builder,null,pointer,exception,e,expect,throws,null,pointer,exception,class,qb,fields,null,assert,equals,fields,cannot,be,null,e,get,message
SimpleQueryStringBuilderTests -> public void testFieldsCannotBeSetToNull();1541421073;The following should fail fast - never silently set the map containing_fields and weights to null but refuse to accept null instead.;public void testFieldsCannotBeSetToNull() {_        SimpleQueryStringBuilder qb = createTestQueryBuilder()__        NullPointerException e = expectThrows(NullPointerException.class, () -> qb.fields(null))__        assertEquals("fields cannot be null", e.getMessage())__    };the,following,should,fail,fast,never,silently,set,the,map,containing,fields,and,weights,to,null,but,refuse,to,accept,null,instead;public,void,test,fields,cannot,be,set,to,null,simple,query,string,builder,qb,create,test,query,builder,null,pointer,exception,e,expect,throws,null,pointer,exception,class,qb,fields,null,assert,equals,fields,cannot,be,null,e,get,message
SimpleQueryStringBuilderTests -> public void testFieldsCannotBeSetToNull();1542768589;The following should fail fast - never silently set the map containing_fields and weights to null but refuse to accept null instead.;public void testFieldsCannotBeSetToNull() {_        SimpleQueryStringBuilder qb = createTestQueryBuilder()__        NullPointerException e = expectThrows(NullPointerException.class, () -> qb.fields(null))__        assertEquals("fields cannot be null", e.getMessage())__    };the,following,should,fail,fast,never,silently,set,the,map,containing,fields,and,weights,to,null,but,refuse,to,accept,null,instead;public,void,test,fields,cannot,be,set,to,null,simple,query,string,builder,qb,create,test,query,builder,null,pointer,exception,e,expect,throws,null,pointer,exception,class,qb,fields,null,assert,equals,fields,cannot,be,null,e,get,message
SimpleQueryStringBuilderTests -> public void testFieldsCannotBeSetToNull();1543432527;The following should fail fast - never silently set the map containing_fields and weights to null but refuse to accept null instead.;public void testFieldsCannotBeSetToNull() {_        SimpleQueryStringBuilder qb = createTestQueryBuilder()__        NullPointerException e = expectThrows(NullPointerException.class, () -> qb.fields(null))__        assertEquals("fields cannot be null", e.getMessage())__    };the,following,should,fail,fast,never,silently,set,the,map,containing,fields,and,weights,to,null,but,refuse,to,accept,null,instead;public,void,test,fields,cannot,be,set,to,null,simple,query,string,builder,qb,create,test,query,builder,null,pointer,exception,e,expect,throws,null,pointer,exception,class,qb,fields,null,assert,equals,fields,cannot,be,null,e,get,message
SimpleQueryStringBuilderTests -> public void testFieldsCannotBeSetToNull();1544782245;The following should fail fast - never silently set the map containing_fields and weights to null but refuse to accept null instead.;public void testFieldsCannotBeSetToNull() {_        SimpleQueryStringBuilder qb = createTestQueryBuilder()__        NullPointerException e = expectThrows(NullPointerException.class, () -> qb.fields(null))__        assertEquals("fields cannot be null", e.getMessage())__    };the,following,should,fail,fast,never,silently,set,the,map,containing,fields,and,weights,to,null,but,refuse,to,accept,null,instead;public,void,test,fields,cannot,be,set,to,null,simple,query,string,builder,qb,create,test,query,builder,null,pointer,exception,e,expect,throws,null,pointer,exception,class,qb,fields,null,assert,equals,fields,cannot,be,null,e,get,message
SimpleQueryStringBuilderTests -> public void testFieldsCannotBeSetToNull();1549017700;The following should fail fast - never silently set the map containing_fields and weights to null but refuse to accept null instead.;public void testFieldsCannotBeSetToNull() {_        SimpleQueryStringBuilder qb = createTestQueryBuilder()__        NullPointerException e = expectThrows(NullPointerException.class, () -> qb.fields(null))__        assertEquals("fields cannot be null", e.getMessage())__    };the,following,should,fail,fast,never,silently,set,the,map,containing,fields,and,weights,to,null,but,refuse,to,accept,null,instead;public,void,test,fields,cannot,be,set,to,null,simple,query,string,builder,qb,create,test,query,builder,null,pointer,exception,e,expect,throws,null,pointer,exception,class,qb,fields,null,assert,equals,fields,cannot,be,null,e,get,message
