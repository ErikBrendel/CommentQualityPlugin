commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     super.setUp().     this.testClient = new NoOpClient(getTestName()). }
false;public;0;6;;@Override @After public void tearDown() throws Exception {     this.testClient.close().     super.tearDown(). }
true;public;0;28;/**  * test setting the source with available setters  */ ;/**  * test setting the source with available setters  */ public void testSetSource() throws IOException {     CreateIndexRequestBuilder builder = new CreateIndexRequestBuilder(this.testClient, CreateIndexAction.INSTANCE).     ElasticsearchParseException e = expectThrows(ElasticsearchParseException.class, () -> {         builder.setSource("{\"" + KEY + "\" : \"" + VALUE + "\"}", XContentType.JSON).     }).     assertEquals(String.format(Locale.ROOT, "unknown key [%s] for create index", KEY), e.getMessage()).     builder.setSource("{\"settings\" : {\"" + KEY + "\" : \"" + VALUE + "\"}}", XContentType.JSON).     assertEquals(VALUE, builder.request().settings().get(KEY)).     XContentBuilder xContent = XContentFactory.jsonBuilder().startObject().startObject("settings").field(KEY, VALUE).endObject().endObject().     xContent.close().     builder.setSource(xContent).     assertEquals(VALUE, builder.request().settings().get(KEY)).     ByteArrayOutputStream docOut = new ByteArrayOutputStream().     XContentBuilder doc = XContentFactory.jsonBuilder(docOut).startObject().startObject("settings").field(KEY, VALUE).endObject().endObject().     doc.close().     builder.setSource(docOut.toByteArray(), XContentType.JSON).     assertEquals(VALUE, builder.request().settings().get(KEY)).     Map<String, String> settingsMap = new HashMap<>().     settingsMap.put(KEY, VALUE).     builder.setSettings(settingsMap).     assertEquals(VALUE, builder.request().settings().get(KEY)). }
true;public;0;24;/**  * test setting the settings with available setters  */ ;/**  * test setting the settings with available setters  */ public void testSetSettings() throws IOException {     CreateIndexRequestBuilder builder = new CreateIndexRequestBuilder(this.testClient, CreateIndexAction.INSTANCE).     builder.setSettings(Settings.builder().put(KEY, VALUE)).     assertEquals(VALUE, builder.request().settings().get(KEY)).     builder.setSettings("{\"" + KEY + "\" : \"" + VALUE + "\"}", XContentType.JSON).     assertEquals(VALUE, builder.request().settings().get(KEY)).     builder.setSettings(Settings.builder().put(KEY, VALUE)).     assertEquals(VALUE, builder.request().settings().get(KEY)).     builder.setSettings(Settings.builder().put(KEY, VALUE).build()).     assertEquals(VALUE, builder.request().settings().get(KEY)).     Map<String, String> settingsMap = new HashMap<>().     settingsMap.put(KEY, VALUE).     builder.setSettings(settingsMap).     assertEquals(VALUE, builder.request().settings().get(KEY)).     XContentBuilder xContent = XContentFactory.jsonBuilder().startObject().field(KEY, VALUE).endObject().     xContent.close().     builder.setSettings(xContent).     assertEquals(VALUE, builder.request().settings().get(KEY)). }
