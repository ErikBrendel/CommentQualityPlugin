commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;public void testSerialization() throws IOException {     CreateIndexRequest request = new CreateIndexRequest("foo").     String mapping = Strings.toString(JsonXContent.contentBuilder().startObject().startObject("type").endObject().endObject()).     request.mapping("my_type", mapping, XContentType.JSON).     try (BytesStreamOutput output = new BytesStreamOutput()) {         request.writeTo(output).         try (StreamInput in = output.bytes().streamInput()) {             CreateIndexRequest serialized = new CreateIndexRequest().             serialized.readFrom(in).             assertEquals(request.index(), serialized.index()).             assertEquals(mapping, serialized.mappings().get("my_type")).         }     } }
false;public;0;22;;public void testTopLevelKeys() {     String createIndex = "{\n" + "  \"FOO_SHOULD_BE_ILLEGAL_HERE\": {\n" + "    \"BAR_IS_THE_SAME\": 42\n" + "  },\n" + "  \"mappings\": {\n" + "    \"test\": {\n" + "      \"properties\": {\n" + "        \"field1\": {\n" + "          \"type\": \"text\"\n" + "       }\n" + "     }\n" + "    }\n" + "  }\n" + "}".     CreateIndexRequest request = new CreateIndexRequest().     ElasticsearchParseException e = expectThrows(ElasticsearchParseException.class, () -> {         request.source(createIndex, XContentType.JSON).     }).     assertEquals("unknown key [FOO_SHOULD_BE_ILLEGAL_HERE] for create index", e.getMessage()). }
false;public;0;24;;public void testToXContent() throws IOException {     CreateIndexRequest request = new CreateIndexRequest("foo").     String mapping = Strings.toString(JsonXContent.contentBuilder().startObject().startObject("type").endObject().endObject()).     request.mapping("my_type", mapping, XContentType.JSON).     Alias alias = new Alias("test_alias").     alias.routing("1").     alias.filter("{\"term\":{\"year\":2016}}").     alias.writeIndex(true).     request.alias(alias).     Settings.Builder settings = Settings.builder().     settings.put(SETTING_NUMBER_OF_SHARDS, 10).     request.settings(settings).     String actualRequestBody = Strings.toString(request).     String expectedRequestBody = "{\"settings\":{\"index\":{\"number_of_shards\":\"10\"}}," + "\"mappings\":{\"my_type\":{\"type\":{}}}," + "\"aliases\":{\"test_alias\":{\"filter\":{\"term\":{\"year\":2016}},\"routing\":\"1\",\"is_write_index\":true}}}".     assertEquals(expectedRequestBody, actualRequestBody). }
false;public;0;18;;public void testToAndFromXContent() throws IOException {     final CreateIndexRequest createIndexRequest = RandomCreateIndexGenerator.randomCreateIndexRequest().     boolean humanReadable = randomBoolean().     final XContentType xContentType = randomFrom(XContentType.values()).     BytesReference originalBytes = toShuffledXContent(createIndexRequest, xContentType, EMPTY_PARAMS, humanReadable).     CreateIndexRequest parsedCreateIndexRequest = new CreateIndexRequest().     parsedCreateIndexRequest.source(originalBytes, xContentType).     assertMappingsEqual(createIndexRequest.mappings(), parsedCreateIndexRequest.mappings()).     assertAliasesEqual(createIndexRequest.aliases(), parsedCreateIndexRequest.aliases()).     assertEquals(createIndexRequest.settings(), parsedCreateIndexRequest.settings()).     BytesReference finalBytes = toShuffledXContent(parsedCreateIndexRequest, xContentType, EMPTY_PARAMS, humanReadable).     ElasticsearchAssertions.assertToXContentEquivalent(originalBytes, finalBytes, xContentType). }
false;public,static;2;14;;public static void assertMappingsEqual(Map<String, String> expected, Map<String, String> actual) throws IOException {     assertEquals(expected.keySet(), actual.keySet()).     for (Map.Entry<String, String> expectedEntry : expected.entrySet()) {         String expectedValue = expectedEntry.getValue().         String actualValue = actual.get(expectedEntry.getKey()).         try (XContentParser expectedJson = JsonXContent.jsonXContent.createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, expectedValue).             XContentParser actualJson = JsonXContent.jsonXContent.createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, actualValue)) {             assertEquals(expectedJson.map(), actualJson.map()).         }     } }
false;public,static;2;14;;public static void assertAliasesEqual(Set<Alias> expected, Set<Alias> actual) throws IOException {     assertEquals(expected, actual).     for (Alias expectedAlias : expected) {         for (Alias actualAlias : actual) {             if (expectedAlias.equals(actualAlias)) {                 // As Alias#equals only looks at name, we check the equality of the other Alias parameters here.                 assertEquals(expectedAlias.filter(), actualAlias.filter()).                 assertEquals(expectedAlias.indexRouting(), actualAlias.indexRouting()).                 assertEquals(expectedAlias.searchRouting(), actualAlias.searchRouting()).             }         }     } }
