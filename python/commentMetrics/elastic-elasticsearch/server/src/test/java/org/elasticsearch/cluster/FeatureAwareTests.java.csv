commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public EnumSet<MetaData.XContentContext> context() {     return MetaData.ALL_CONTEXTS. }
false;public;1;4;;@Override public Diff<MetaData.Custom> diff(final MetaData.Custom previousState) {     return null. }
false;public;1;4;;@Override public void writeTo(final StreamOutput out) throws IOException { }
false;public;2;4;;@Override public XContentBuilder toXContent(final XContentBuilder builder, final Params params) throws IOException {     return builder. }
false;public;0;4;;@Override public Version getMinimalSupportedVersion() {     return version. }
false;public;0;4;;@Override public String getWriteableName() {     return "no-required-feature". }
false;public;0;4;;@Override public String getWriteableName() {     return null. }
false;public;0;4;;@Override public Optional<String> getRequiredFeature() {     return Optional.of("required-feature"). }
false;public;0;24;;public void testVersion() {     final Version version = randomValueOtherThan(VersionUtils.getFirstVersion(), () -> VersionUtils.randomVersion(random())).     for (final Custom custom : Arrays.asList(new NoRequiredFeatureCustom(version), new RequiredFeatureCustom(version))) {         {             final BytesStreamOutput out = new BytesStreamOutput().             final Version afterVersion = randomVersionBetween(random(), version, Version.CURRENT).             out.setVersion(afterVersion).             if (custom.getRequiredFeature().isPresent()) {                 out.setFeatures(Collections.singleton(custom.getRequiredFeature().get())).             }             assertTrue(FeatureAware.shouldSerialize(out, custom)).         }         {             final BytesStreamOutput out = new BytesStreamOutput().             final Version beforeVersion = randomVersionBetween(random(), VersionUtils.getFirstVersion(), VersionUtils.getPreviousVersion(version)).             out.setVersion(beforeVersion).             if (custom.getRequiredFeature().isPresent() && randomBoolean()) {                 out.setFeatures(Collections.singleton(custom.getRequiredFeature().get())).             }             assertFalse(FeatureAware.shouldSerialize(out, custom)).         }     } }
false;public;0;21;;public void testFeature() {     final Version version = VersionUtils.randomVersion(random()).     final Version afterVersion = randomVersionBetween(random(), version, Version.CURRENT).     final Custom custom = new RequiredFeatureCustom(version).     {         // the feature is present and the client is not a transport client         final BytesStreamOutput out = new BytesStreamOutput().         out.setVersion(afterVersion).         assertTrue(custom.getRequiredFeature().isPresent()).         out.setFeatures(Collections.singleton(custom.getRequiredFeature().get())).         assertTrue(FeatureAware.shouldSerialize(out, custom)).     }     {         // the feature is present and the client is a transport client         final BytesStreamOutput out = new BytesStreamOutput().         out.setVersion(afterVersion).         assertTrue(custom.getRequiredFeature().isPresent()).         out.setFeatures(new HashSet<>(Arrays.asList(custom.getRequiredFeature().get(), TransportClient.TRANSPORT_CLIENT_FEATURE))).         assertTrue(FeatureAware.shouldSerialize(out, custom)).     } }
false;public;0;18;;public void testMissingFeature() {     final Version version = VersionUtils.randomVersion(random()).     final Version afterVersion = randomVersionBetween(random(), version, Version.CURRENT).     final Custom custom = new RequiredFeatureCustom(version).     {         // the feature is missing but we should serialize it anyway because the client is not a transport client         final BytesStreamOutput out = new BytesStreamOutput().         out.setVersion(afterVersion).         assertTrue(FeatureAware.shouldSerialize(out, custom)).     }     {         // the feature is missing and we should not serialize it because the client is a transport client         final BytesStreamOutput out = new BytesStreamOutput().         out.setVersion(afterVersion).         out.setFeatures(Collections.singleton(TransportClient.TRANSPORT_CLIENT_FEATURE)).         assertFalse(FeatureAware.shouldSerialize(out, custom)).     } }
