commented;modifiers;parameterAmount;loc;comment;code
false;public;0;23;;public void testSerializeRequest() throws IOException {     ClusterRerouteRequest req = new ClusterRerouteRequest().     req.setRetryFailed(randomBoolean()).     req.dryRun(randomBoolean()).     req.explain(randomBoolean()).     req.add(new AllocateEmptyPrimaryAllocationCommand("foo", 1, "bar", randomBoolean())).     req.timeout(TimeValue.timeValueMillis(randomIntBetween(0, 100))).     BytesStreamOutput out = new BytesStreamOutput().     req.writeTo(out).     BytesReference bytes = out.bytes().     NamedWriteableRegistry namedWriteableRegistry = new NamedWriteableRegistry(NetworkModule.getNamedWriteables()).     StreamInput wrap = new NamedWriteableAwareStreamInput(bytes.streamInput(), namedWriteableRegistry).     ClusterRerouteRequest deserializedReq = new ClusterRerouteRequest().     deserializedReq.readFrom(wrap).     assertEquals(req.isRetryFailed(), deserializedReq.isRetryFailed()).     assertEquals(req.dryRun(), deserializedReq.dryRun()).     assertEquals(req.explain(), deserializedReq.explain()).     assertEquals(req.timeout(), deserializedReq.timeout()).     // allocation commands have their own tests     assertEquals(1, deserializedReq.getCommands().commands().size()).     assertEquals(req.getCommands().commands().size(), deserializedReq.getCommands().commands().size()). }
false;public;1;4;;@Override public void onResponse(ClusterRerouteResponse clusterRerouteResponse) {     responseRef.set(clusterRerouteResponse). }
false;public;1;4;;@Override public void onFailure(Exception e) { }
false;public;0;75;;public void testClusterStateUpdateTask() {     AllocationService allocationService = new AllocationService(new AllocationDeciders(Collections.singleton(new MaxRetryAllocationDecider())), new TestGatewayAllocator(), new BalancedShardsAllocator(Settings.EMPTY), EmptyClusterInfoService.INSTANCE).     ClusterState clusterState = createInitialClusterState(allocationService).     ClusterRerouteRequest req = new ClusterRerouteRequest().     req.dryRun(true).     AtomicReference<ClusterRerouteResponse> responseRef = new AtomicReference<>().     ActionListener<ClusterRerouteResponse> responseActionListener = new ActionListener<ClusterRerouteResponse>() {          @Override         public void onResponse(ClusterRerouteResponse clusterRerouteResponse) {             responseRef.set(clusterRerouteResponse).         }          @Override         public void onFailure(Exception e) {         }     }.     TransportClusterRerouteAction.ClusterRerouteResponseAckedClusterStateUpdateTask task = new TransportClusterRerouteAction.ClusterRerouteResponseAckedClusterStateUpdateTask(logger, allocationService, req, responseActionListener).     ClusterState execute = task.execute(clusterState).     // dry-run     assertSame(execute, clusterState).     task.onAllNodesAcked(null).     assertNotSame(responseRef.get().getState(), execute).     // now we allocate     req.dryRun(false).     final int retries = MaxRetryAllocationDecider.SETTING_ALLOCATION_MAX_RETRY.get(Settings.EMPTY).     // now fail it N-1 times     for (int i = 0. i < retries. i++) {         ClusterState newState = task.execute(clusterState).         // dry-run=false         assertNotSame(newState, clusterState).         clusterState = newState.         RoutingTable routingTable = clusterState.routingTable().         assertEquals(routingTable.index("idx").shards().size(), 1).         assertEquals(routingTable.index("idx").shard(0).shards().get(0).state(), INITIALIZING).         assertEquals(routingTable.index("idx").shard(0).shards().get(0).unassignedInfo().getNumFailedAllocations(), i).         List<FailedShard> failedShards = Collections.singletonList(new FailedShard(routingTable.index("idx").shard(0).shards().get(0), "boom" + i, new UnsupportedOperationException(), randomBoolean())).         newState = allocationService.applyFailedShards(clusterState, failedShards).         assertThat(newState, not(equalTo(clusterState))).         clusterState = newState.         routingTable = clusterState.routingTable().         assertEquals(routingTable.index("idx").shards().size(), 1).         if (i == retries - 1) {             assertEquals(routingTable.index("idx").shard(0).shards().get(0).state(), UNASSIGNED).         } else {             assertEquals(routingTable.index("idx").shard(0).shards().get(0).state(), INITIALIZING).         }         assertEquals(routingTable.index("idx").shard(0).shards().get(0).unassignedInfo().getNumFailedAllocations(), i + 1).     }     // without retry_failed we won't allocate that shard     ClusterState newState = task.execute(clusterState).     // dry-run=false     assertNotSame(newState, clusterState).     task.onAllNodesAcked(null).     assertSame(responseRef.get().getState(), newState).     RoutingTable routingTable = clusterState.routingTable().     assertEquals(routingTable.index("idx").shards().size(), 1).     assertEquals(routingTable.index("idx").shard(0).shards().get(0).state(), UNASSIGNED).     assertEquals(routingTable.index("idx").shard(0).shards().get(0).unassignedInfo().getNumFailedAllocations(), retries).     // now we manually retry and get the shard back into initializing     req.setRetryFailed(true).     newState = task.execute(clusterState).     // dry-run=false     assertNotSame(newState, clusterState).     clusterState = newState.     routingTable = clusterState.routingTable().     assertEquals(1, routingTable.index("idx").shards().size()).     assertEquals(INITIALIZING, routingTable.index("idx").shard(0).shards().get(0).state()).     assertEquals(0, routingTable.index("idx").shard(0).shards().get(0).unassignedInfo().getNumFailedAllocations()). }
false;private;1;24;;private ClusterState createInitialClusterState(AllocationService service) {     MetaData.Builder metaBuilder = MetaData.builder().     metaBuilder.put(IndexMetaData.builder("idx").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(0)).     MetaData metaData = metaBuilder.build().     RoutingTable.Builder routingTableBuilder = RoutingTable.builder().     routingTableBuilder.addAsNew(metaData.index("idx")).     RoutingTable routingTable = routingTableBuilder.build().     ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(routingTable).build().     clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode("node1")).add(newNode("node2"))).build().     RoutingTable prevRoutingTable = routingTable.     routingTable = service.reroute(clusterState, "reroute").routingTable().     clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build().     assertEquals(prevRoutingTable.index("idx").shards().size(), 1).     assertEquals(prevRoutingTable.index("idx").shard(0).shards().get(0).state(), UNASSIGNED).     assertEquals(routingTable.index("idx").shards().size(), 1).     assertEquals(routingTable.index("idx").shard(0).shards().get(0).state(), INITIALIZING).     return clusterState. }
