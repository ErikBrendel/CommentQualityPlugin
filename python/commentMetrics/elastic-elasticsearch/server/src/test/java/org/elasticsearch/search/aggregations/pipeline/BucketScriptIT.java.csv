commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     return Collections.singleton(CustomScriptPlugin.class). }
false;protected;0;45;;@Override protected Map<String, Function<Map<String, Object>, Object>> pluginScripts() {     Map<String, Function<Map<String, Object>, Object>> scripts = new HashMap<>().     scripts.put("_value0 + _value1 + _value2", vars -> {         double value0 = (double) vars.get("_value0").         double value1 = (double) vars.get("_value1").         double value2 = (double) vars.get("_value2").         return value0 + value1 + value2.     }).     scripts.put("_value0 + _value1 / _value2", vars -> {         double value0 = (double) vars.get("_value0").         double value1 = (double) vars.get("_value1").         double value2 = (double) vars.get("_value2").         return value0 + value1 / value2.     }).     scripts.put("_value0", vars -> vars.get("_value0")).     scripts.put("foo + bar + baz", vars -> {         double foo = (double) vars.get("foo").         double bar = (double) vars.get("bar").         double baz = (double) vars.get("baz").         return foo + bar + baz.     }).     scripts.put("(_value0 + _value1 + _value2) * factor", vars -> {         double value0 = (double) vars.get("_value0").         double value1 = (double) vars.get("_value1").         double value2 = (double) vars.get("_value2").         return (value0 + value1 + value2) * (int) vars.get("factor").     }).     scripts.put("my_script", vars -> {         double value0 = (double) vars.get("_value0").         double value1 = (double) vars.get("_value1").         double value2 = (double) vars.get("_value2").         return value0 + value1 + value2.     }).     scripts.put("return null", vars -> null).     return scripts. }
false;public;0;19;;@Override public void setupSuiteScopeCluster() throws Exception {     createIndex("idx").     createIndex("idx_unmapped").     interval = randomIntBetween(1, 50).     numDocs = randomIntBetween(10, 500).     minNumber = -200.     maxNumber = 200.     date = randomLong().     List<IndexRequestBuilder> builders = new ArrayList<>().     for (int docs = 0. docs < numDocs. docs++) {         builders.add(client().prepareIndex("idx", "type").setSource(newDocBuilder())).     }     indexRandom(true, builders).     ensureSearchable(). }
false;private;0;11;;private XContentBuilder newDocBuilder() throws IOException {     XContentBuilder jsonBuilder = jsonBuilder().     jsonBuilder.startObject().     jsonBuilder.field(FIELD_1_NAME, randomIntBetween(minNumber, maxNumber)).     jsonBuilder.field(FIELD_2_NAME, randomIntBetween(minNumber, maxNumber)).     jsonBuilder.field(FIELD_3_NAME, randomIntBetween(minNumber, maxNumber)).     jsonBuilder.field(FIELD_4_NAME, randomIntBetween(minNumber, maxNumber)).     jsonBuilder.field(FIELD_5_NAME, date).     jsonBuilder.endObject().     return jsonBuilder. }
false;public;0;46;;public void testInlineScript() {     SearchResponse response = client().prepareSearch("idx").addAggregation(histogram("histo").field(FIELD_1_NAME).interval(interval).subAggregation(sum("field2Sum").field(FIELD_2_NAME)).subAggregation(sum("field3Sum").field(FIELD_3_NAME)).subAggregation(sum("field4Sum").field(FIELD_4_NAME)).subAggregation(bucketScript("seriesArithmetic", new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, "_value0 + _value1 + _value2", Collections.emptyMap()), "field2Sum", "field3Sum", "field4Sum"))).get().     assertSearchResponse(response).     Histogram histo = response.getAggregations().get("histo").     assertThat(histo, notNullValue()).     assertThat(histo.getName(), equalTo("histo")).     List<? extends Histogram.Bucket> buckets = histo.getBuckets().     for (int i = 0. i < buckets.size(). ++i) {         Histogram.Bucket bucket = buckets.get(i).         if (bucket.getDocCount() == 0) {             SimpleValue seriesArithmetic = bucket.getAggregations().get("seriesArithmetic").             assertThat(seriesArithmetic, nullValue()).         } else {             Sum field2Sum = bucket.getAggregations().get("field2Sum").             assertThat(field2Sum, notNullValue()).             double field2SumValue = field2Sum.getValue().             Sum field3Sum = bucket.getAggregations().get("field3Sum").             assertThat(field3Sum, notNullValue()).             double field3SumValue = field3Sum.getValue().             Sum field4Sum = bucket.getAggregations().get("field4Sum").             assertThat(field4Sum, notNullValue()).             double field4SumValue = field4Sum.getValue().             SimpleValue seriesArithmetic = bucket.getAggregations().get("seriesArithmetic").             assertThat(seriesArithmetic, notNullValue()).             double seriesArithmeticValue = seriesArithmetic.value().             assertThat(seriesArithmeticValue, equalTo(field2SumValue + field3SumValue + field4SumValue)).         }     } }
false;public;0;46;;public void testInlineScript2() {     SearchResponse response = client().prepareSearch("idx").addAggregation(histogram("histo").field(FIELD_1_NAME).interval(interval).subAggregation(sum("field2Sum").field(FIELD_2_NAME)).subAggregation(sum("field3Sum").field(FIELD_3_NAME)).subAggregation(sum("field4Sum").field(FIELD_4_NAME)).subAggregation(bucketScript("seriesArithmetic", new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, "_value0 + _value1 / _value2", Collections.emptyMap()), "field2Sum", "field3Sum", "field4Sum"))).get().     assertSearchResponse(response).     Histogram histo = response.getAggregations().get("histo").     assertThat(histo, notNullValue()).     assertThat(histo.getName(), equalTo("histo")).     List<? extends Histogram.Bucket> buckets = histo.getBuckets().     for (int i = 0. i < buckets.size(). ++i) {         Histogram.Bucket bucket = buckets.get(i).         if (bucket.getDocCount() == 0) {             SimpleValue seriesArithmetic = bucket.getAggregations().get("seriesArithmetic").             assertThat(seriesArithmetic, nullValue()).         } else {             Sum field2Sum = bucket.getAggregations().get("field2Sum").             assertThat(field2Sum, notNullValue()).             double field2SumValue = field2Sum.getValue().             Sum field3Sum = bucket.getAggregations().get("field3Sum").             assertThat(field3Sum, notNullValue()).             double field3SumValue = field3Sum.getValue().             Sum field4Sum = bucket.getAggregations().get("field4Sum").             assertThat(field4Sum, notNullValue()).             double field4SumValue = field4Sum.getValue().             SimpleValue seriesArithmetic = bucket.getAggregations().get("seriesArithmetic").             assertThat(seriesArithmetic, notNullValue()).             double seriesArithmeticValue = seriesArithmetic.value().             assertThat(seriesArithmeticValue, equalTo(field2SumValue + field3SumValue / field4SumValue)).         }     } }
false;public;0;45;;public void testInlineScriptWithDateRange() {     SearchResponse response = client().prepareSearch("idx").addAggregation(dateRange("range").field(FIELD_5_NAME).addUnboundedFrom(date).subAggregation(sum("field2Sum").field(FIELD_2_NAME)).subAggregation(sum("field3Sum").field(FIELD_3_NAME)).subAggregation(sum("field4Sum").field(FIELD_4_NAME)).subAggregation(bucketScript("seriesArithmetic", new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, "_value0 + _value1 + _value2", Collections.emptyMap()), "field2Sum", "field3Sum", "field4Sum"))).get().     assertSearchResponse(response).     Range range = response.getAggregations().get("range").     assertThat(range, notNullValue()).     assertThat(range.getName(), equalTo("range")).     List<? extends Range.Bucket> buckets = range.getBuckets().     for (int i = 0. i < buckets.size(). ++i) {         Range.Bucket bucket = buckets.get(i).         if (bucket.getDocCount() == 0) {             SimpleValue seriesArithmetic = bucket.getAggregations().get("seriesArithmetic").             assertThat(seriesArithmetic, nullValue()).         } else {             Sum field2Sum = bucket.getAggregations().get("field2Sum").             assertThat(field2Sum, notNullValue()).             double field2SumValue = field2Sum.getValue().             Sum field3Sum = bucket.getAggregations().get("field3Sum").             assertThat(field3Sum, notNullValue()).             double field3SumValue = field3Sum.getValue().             Sum field4Sum = bucket.getAggregations().get("field4Sum").             assertThat(field4Sum, notNullValue()).             double field4SumValue = field4Sum.getValue().             SimpleValue seriesArithmetic = bucket.getAggregations().get("seriesArithmetic").             assertThat(seriesArithmetic, notNullValue()).             double seriesArithmeticValue = seriesArithmetic.value().             assertThat(seriesArithmeticValue, equalTo(field2SumValue + field3SumValue + field4SumValue)).         }     } }
false;public;0;37;;public void testInlineScriptSingleVariable() {     SearchResponse response = client().prepareSearch("idx").addAggregation(histogram("histo").field(FIELD_1_NAME).interval(interval).subAggregation(sum("field2Sum").field(FIELD_2_NAME)).subAggregation(bucketScript("seriesArithmetic", new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, "_value0", Collections.emptyMap()), "field2Sum"))).get().     assertSearchResponse(response).     Histogram histo = response.getAggregations().get("histo").     assertThat(histo, notNullValue()).     assertThat(histo.getName(), equalTo("histo")).     List<? extends Histogram.Bucket> buckets = histo.getBuckets().     for (int i = 0. i < buckets.size(). ++i) {         Histogram.Bucket bucket = buckets.get(i).         if (bucket.getDocCount() == 0) {             SimpleValue seriesArithmetic = bucket.getAggregations().get("seriesArithmetic").             assertThat(seriesArithmetic, nullValue()).         } else {             Sum field2Sum = bucket.getAggregations().get("field2Sum").             assertThat(field2Sum, notNullValue()).             double field2SumValue = field2Sum.getValue().             SimpleValue seriesArithmetic = bucket.getAggregations().get("seriesArithmetic").             assertThat(seriesArithmetic, notNullValue()).             double seriesArithmeticValue = seriesArithmetic.value().             assertThat(seriesArithmeticValue, equalTo(field2SumValue)).         }     } }
false;public;0;49;;public void testInlineScriptNamedVars() {     Map<String, String> bucketsPathsMap = new HashMap<>().     bucketsPathsMap.put("foo", "field2Sum").     bucketsPathsMap.put("bar", "field3Sum").     bucketsPathsMap.put("baz", "field4Sum").     SearchResponse response = client().prepareSearch("idx").addAggregation(histogram("histo").field(FIELD_1_NAME).interval(interval).subAggregation(sum("field2Sum").field(FIELD_2_NAME)).subAggregation(sum("field3Sum").field(FIELD_3_NAME)).subAggregation(sum("field4Sum").field(FIELD_4_NAME)).subAggregation(bucketScript("seriesArithmetic", bucketsPathsMap, new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, "foo + bar + baz", Collections.emptyMap())))).get().     assertSearchResponse(response).     Histogram histo = response.getAggregations().get("histo").     assertThat(histo, notNullValue()).     assertThat(histo.getName(), equalTo("histo")).     List<? extends Histogram.Bucket> buckets = histo.getBuckets().     for (int i = 0. i < buckets.size(). ++i) {         Histogram.Bucket bucket = buckets.get(i).         if (bucket.getDocCount() == 0) {             SimpleValue seriesArithmetic = bucket.getAggregations().get("seriesArithmetic").             assertThat(seriesArithmetic, nullValue()).         } else {             Sum field2Sum = bucket.getAggregations().get("field2Sum").             assertThat(field2Sum, notNullValue()).             double field2SumValue = field2Sum.getValue().             Sum field3Sum = bucket.getAggregations().get("field3Sum").             assertThat(field3Sum, notNullValue()).             double field3SumValue = field3Sum.getValue().             Sum field4Sum = bucket.getAggregations().get("field4Sum").             assertThat(field4Sum, notNullValue()).             double field4SumValue = field4Sum.getValue().             SimpleValue seriesArithmetic = bucket.getAggregations().get("seriesArithmetic").             assertThat(seriesArithmetic, notNullValue()).             double seriesArithmeticValue = seriesArithmetic.value().             assertThat(seriesArithmeticValue, equalTo(field2SumValue + field3SumValue + field4SumValue)).         }     } }
false;public;0;47;;public void testInlineScriptWithParams() {     Map<String, Object> params = new HashMap<>().     params.put("factor", 3).     Script script = new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, "(_value0 + _value1 + _value2) * factor", params).     SearchResponse response = client().prepareSearch("idx").addAggregation(histogram("histo").field(FIELD_1_NAME).interval(interval).subAggregation(sum("field2Sum").field(FIELD_2_NAME)).subAggregation(sum("field3Sum").field(FIELD_3_NAME)).subAggregation(sum("field4Sum").field(FIELD_4_NAME)).subAggregation(bucketScript("seriesArithmetic", script, "field2Sum", "field3Sum", "field4Sum"))).get().     assertSearchResponse(response).     Histogram histo = response.getAggregations().get("histo").     assertThat(histo, notNullValue()).     assertThat(histo.getName(), equalTo("histo")).     List<? extends Histogram.Bucket> buckets = histo.getBuckets().     for (int i = 0. i < buckets.size(). ++i) {         Histogram.Bucket bucket = buckets.get(i).         if (bucket.getDocCount() == 0) {             SimpleValue seriesArithmetic = bucket.getAggregations().get("seriesArithmetic").             assertThat(seriesArithmetic, nullValue()).         } else {             Sum field2Sum = bucket.getAggregations().get("field2Sum").             assertThat(field2Sum, notNullValue()).             double field2SumValue = field2Sum.getValue().             Sum field3Sum = bucket.getAggregations().get("field3Sum").             assertThat(field3Sum, notNullValue()).             double field3SumValue = field3Sum.getValue().             Sum field4Sum = bucket.getAggregations().get("field4Sum").             assertThat(field4Sum, notNullValue()).             double field4SumValue = field4Sum.getValue().             SimpleValue seriesArithmetic = bucket.getAggregations().get("seriesArithmetic").             assertThat(seriesArithmetic, notNullValue()).             double seriesArithmeticValue = seriesArithmetic.value().             assertThat(seriesArithmeticValue, equalTo((field2SumValue + field3SumValue + field4SumValue) * 3)).         }     } }
false;public;0;48;;public void testInlineScriptInsertZeros() {     SearchResponse response = client().prepareSearch("idx").addAggregation(histogram("histo").field(FIELD_1_NAME).interval(interval).subAggregation(sum("field2Sum").field(FIELD_2_NAME)).subAggregation(sum("field3Sum").field(FIELD_3_NAME)).subAggregation(sum("field4Sum").field(FIELD_4_NAME)).subAggregation(bucketScript("seriesArithmetic", new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, "_value0 + _value1 + _value2", Collections.emptyMap()), "field2Sum", "field3Sum", "field4Sum").gapPolicy(GapPolicy.INSERT_ZEROS))).get().     assertSearchResponse(response).     Histogram histo = response.getAggregations().get("histo").     assertThat(histo, notNullValue()).     assertThat(histo.getName(), equalTo("histo")).     List<? extends Histogram.Bucket> buckets = histo.getBuckets().     for (int i = 0. i < buckets.size(). ++i) {         Histogram.Bucket bucket = buckets.get(i).         if (bucket.getDocCount() == 0) {             SimpleValue seriesArithmetic = bucket.getAggregations().get("seriesArithmetic").             assertThat(seriesArithmetic, notNullValue()).             double seriesArithmeticValue = seriesArithmetic.value().             assertThat(seriesArithmeticValue, equalTo(0.0)).         } else {             Sum field2Sum = bucket.getAggregations().get("field2Sum").             assertThat(field2Sum, notNullValue()).             double field2SumValue = field2Sum.getValue().             Sum field3Sum = bucket.getAggregations().get("field3Sum").             assertThat(field3Sum, notNullValue()).             double field3SumValue = field3Sum.getValue().             Sum field4Sum = bucket.getAggregations().get("field4Sum").             assertThat(field4Sum, notNullValue()).             double field4SumValue = field4Sum.getValue().             SimpleValue seriesArithmetic = bucket.getAggregations().get("seriesArithmetic").             assertThat(seriesArithmetic, notNullValue()).             double seriesArithmeticValue = seriesArithmetic.value().             assertThat(seriesArithmeticValue, equalTo(field2SumValue + field3SumValue + field4SumValue)).         }     } }
false;public;0;26;;public void testInlineScriptReturnNull() {     SearchResponse response = client().prepareSearch("idx").addAggregation(histogram("histo").field(FIELD_1_NAME).interval(interval).subAggregation(bucketScript("nullField", new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, "return null", Collections.emptyMap())))).get().     assertSearchResponse(response).     Histogram histo = response.getAggregations().get("histo").     assertThat(histo, notNullValue()).     assertThat(histo.getName(), equalTo("histo")).     List<? extends Histogram.Bucket> buckets = histo.getBuckets().     for (int i = 0. i < buckets.size(). ++i) {         Histogram.Bucket bucket = buckets.get(i).         assertNull(bucket.getAggregations().get("nullField")).     } }
false;public;0;50;;public void testStoredScript() {     assertAcked(client().admin().cluster().preparePutStoredScript().setId("my_script").setContent(new BytesArray("{ \"script\": {\"lang\": \"" + CustomScriptPlugin.NAME + "\"," + " \"source\": \"my_script\" } }"), XContentType.JSON)).     SearchResponse response = client().prepareSearch("idx").addAggregation(histogram("histo").field(FIELD_1_NAME).interval(interval).subAggregation(sum("field2Sum").field(FIELD_2_NAME)).subAggregation(sum("field3Sum").field(FIELD_3_NAME)).subAggregation(sum("field4Sum").field(FIELD_4_NAME)).subAggregation(bucketScript("seriesArithmetic", new Script(ScriptType.STORED, null, "my_script", Collections.emptyMap()), "field2Sum", "field3Sum", "field4Sum"))).get().     assertSearchResponse(response).     Histogram histo = response.getAggregations().get("histo").     assertThat(histo, notNullValue()).     assertThat(histo.getName(), equalTo("histo")).     List<? extends Histogram.Bucket> buckets = histo.getBuckets().     for (int i = 0. i < buckets.size(). ++i) {         Histogram.Bucket bucket = buckets.get(i).         if (bucket.getDocCount() == 0) {             SimpleValue seriesArithmetic = bucket.getAggregations().get("seriesArithmetic").             assertThat(seriesArithmetic, nullValue()).         } else {             Sum field2Sum = bucket.getAggregations().get("field2Sum").             assertThat(field2Sum, notNullValue()).             double field2SumValue = field2Sum.getValue().             Sum field3Sum = bucket.getAggregations().get("field3Sum").             assertThat(field3Sum, notNullValue()).             double field3SumValue = field3Sum.getValue().             Sum field4Sum = bucket.getAggregations().get("field4Sum").             assertThat(field4Sum, notNullValue()).             double field4SumValue = field4Sum.getValue().             SimpleValue seriesArithmetic = bucket.getAggregations().get("seriesArithmetic").             assertThat(seriesArithmetic, notNullValue()).             double seriesArithmeticValue = seriesArithmetic.value().             assertThat(seriesArithmeticValue, equalTo(field2SumValue + field3SumValue + field4SumValue)).         }     } }
false;public;0;24;;public void testUnmapped() throws Exception {     SearchResponse response = client().prepareSearch("idx_unmapped").addAggregation(histogram("histo").field(FIELD_1_NAME).interval(interval).subAggregation(sum("field2Sum").field(FIELD_2_NAME)).subAggregation(sum("field3Sum").field(FIELD_3_NAME)).subAggregation(sum("field4Sum").field(FIELD_4_NAME)).subAggregation(bucketScript("seriesArithmetic", new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, "_value0 + _value1 + _value2", Collections.emptyMap()), "field2Sum", "field3Sum", "field4Sum"))).get().     assertSearchResponse(response).     Histogram deriv = response.getAggregations().get("histo").     assertThat(deriv, notNullValue()).     assertThat(deriv.getName(), equalTo("histo")).     assertThat(deriv.getBuckets().size(), equalTo(0)). }
false;public;0;45;;public void testPartiallyUnmapped() throws Exception {     SearchResponse response = client().prepareSearch("idx", "idx_unmapped").addAggregation(histogram("histo").field(FIELD_1_NAME).interval(interval).subAggregation(sum("field2Sum").field(FIELD_2_NAME)).subAggregation(sum("field3Sum").field(FIELD_3_NAME)).subAggregation(sum("field4Sum").field(FIELD_4_NAME)).subAggregation(bucketScript("seriesArithmetic", new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, "_value0 + _value1 + _value2", Collections.emptyMap()), "field2Sum", "field3Sum", "field4Sum"))).get().     assertSearchResponse(response).     Histogram histo = response.getAggregations().get("histo").     assertThat(histo, notNullValue()).     assertThat(histo.getName(), equalTo("histo")).     List<? extends Histogram.Bucket> buckets = histo.getBuckets().     for (int i = 0. i < buckets.size(). ++i) {         Histogram.Bucket bucket = buckets.get(i).         if (bucket.getDocCount() == 0) {             SimpleValue seriesArithmetic = bucket.getAggregations().get("seriesArithmetic").             assertThat(seriesArithmetic, nullValue()).         } else {             Sum field2Sum = bucket.getAggregations().get("field2Sum").             assertThat(field2Sum, notNullValue()).             double field2SumValue = field2Sum.getValue().             Sum field3Sum = bucket.getAggregations().get("field3Sum").             assertThat(field3Sum, notNullValue()).             double field3SumValue = field3Sum.getValue().             Sum field4Sum = bucket.getAggregations().get("field4Sum").             assertThat(field4Sum, notNullValue()).             double field4SumValue = field4Sum.getValue().             SimpleValue seriesArithmetic = bucket.getAggregations().get("seriesArithmetic").             assertThat(seriesArithmetic, notNullValue()).             double seriesArithmeticValue = seriesArithmetic.value().             assertThat(seriesArithmeticValue, equalTo(field2SumValue + field3SumValue + field4SumValue)).         }     } }
