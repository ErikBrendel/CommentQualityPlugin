commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public List<String> getLocalAddresses() {     return Collections.emptyList(). }
false;protected;0;4;;@Override protected TestResponse newResponse() {     return new TestResponse(). }
false;protected;1;4;;@Override protected ClusterState getMockClusterState(DiscoveryNode node) {     return ClusterState.builder(clusterName).nodes(TestIteration.this.nodeMap.get(node.getAddress())).build(). }
false;public;5;12;;@Override public <T extends TransportResponse> void sendRequest(Transport.Connection connection, String action, TransportRequest request, TransportRequestOptions options, TransportResponseHandler<T> handler) {     if (TransportLivenessAction.NAME.equals(action)) {         sender.sendRequest(connection, action, request, options, wrapLivenessResponseHandler(handler, connection.getNode(), clusterName)).     } else {         sender.sendRequest(connection, action, request, options, handler).     } }
false;public;1;17;;@Override public AsyncSender interceptSender(AsyncSender sender) {     return new AsyncSender() {          @Override         public <T extends TransportResponse> void sendRequest(Transport.Connection connection, String action, TransportRequest request, TransportRequestOptions options, TransportResponseHandler<T> handler) {             if (TransportLivenessAction.NAME.equals(action)) {                 sender.sendRequest(connection, action, request, options, wrapLivenessResponseHandler(handler, connection.getNode(), clusterName)).             } else {                 sender.sendRequest(connection, action, request, options, handler).             }         }     }. }
false;public;1;4;;@Override public T read(StreamInput in) throws IOException {     return handler.read(in). }
false;public;1;10;;@Override @SuppressWarnings("unchecked") public void handleResponse(T response) {     LivenessResponse livenessResponse = new LivenessResponse(clusterName, new DiscoveryNode(node.getName(), node.getId(), node.getEphemeralId(), "liveness-hostname" + node.getId(), "liveness-hostaddress" + node.getId(), livenessAddress, node.getAttributes(), node.getRoles(), node.getVersion())).     handler.handleResponse((T) livenessResponse). }
false;public;1;4;;@Override public void handleException(TransportException exp) {     handler.handleException(exp). }
false;public;0;4;;@Override public String executor() {     return handler.executor(). }
false;private;3;31;;private <T extends TransportResponse> TransportResponseHandler wrapLivenessResponseHandler(TransportResponseHandler<T> handler, DiscoveryNode node, ClusterName clusterName) {     return new TransportResponseHandler<T>() {          @Override         public T read(StreamInput in) throws IOException {             return handler.read(in).         }          @Override         @SuppressWarnings("unchecked")         public void handleResponse(T response) {             LivenessResponse livenessResponse = new LivenessResponse(clusterName, new DiscoveryNode(node.getName(), node.getId(), node.getEphemeralId(), "liveness-hostname" + node.getId(), "liveness-hostaddress" + node.getId(), livenessAddress, node.getAttributes(), node.getRoles(), node.getVersion())).             handler.handleResponse((T) livenessResponse).         }          @Override         public void handleException(TransportException exp) {             handler.handleException(exp).         }          @Override         public String executor() {             return handler.executor().         }     }. }
false;public;0;7;;@Override public void close() {     transport.endConnectMode().     transportService.stop().     transportClientNodesService.close().     terminate(threadPool). }
false;public;1;5;;@Override public void onResponse(TestResponse testResponse) {     response.set(testResponse).     latch.countDown(). }
false;public;1;6;;@Override public void onFailure(Exception e) {     finalFailures.incrementAndGet().     finalFailure.set(e).     latch.countDown(). }
false;public;1;4;;@Override public TestResponse read(StreamInput in) {     return new TestResponse(in). }
false;public;1;4;;@Override public void handleResponse(TestResponse response1) {     retryListener.onResponse(response1). }
false;public;1;4;;@Override public void handleException(TransportException exp) {     retryListener.onFailure(exp). }
false;public;0;4;;@Override public String executor() {     return randomBoolean() ? ThreadPool.Names.SAME : ThreadPool.Names.GENERIC. }
false;public;0;82;;@AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/37567") public void testListenerFailures() throws InterruptedException {     int iters = iterations(10, 100).     for (int i = 0. i < iters. i++) {         try (TestIteration iteration = new TestIteration()) {             // stop transport from responding early             iteration.transport.endConnectMode().             final CountDownLatch latch = new CountDownLatch(1).             final AtomicInteger finalFailures = new AtomicInteger().             final AtomicReference<Throwable> finalFailure = new AtomicReference<>().             final AtomicReference<TestResponse> response = new AtomicReference<>().             ActionListener<TestResponse> actionListener = new ActionListener<TestResponse>() {                  @Override                 public void onResponse(TestResponse testResponse) {                     response.set(testResponse).                     latch.countDown().                 }                  @Override                 public void onFailure(Exception e) {                     finalFailures.incrementAndGet().                     finalFailure.set(e).                     latch.countDown().                 }             }.             final AtomicInteger preSendFailures = new AtomicInteger().             iteration.transportClientNodesService.execute((node, retryListener) -> {                 if (rarely()) {                     preSendFailures.incrementAndGet().                     // throw whatever exception that is not a subclass of ConnectTransportException                     throw new IllegalArgumentException().                 }                 iteration.transportService.sendRequest(node, "action", new TestRequest(), TransportRequestOptions.EMPTY, new TransportResponseHandler<TestResponse>() {                      @Override                     public TestResponse read(StreamInput in) {                         return new TestResponse(in).                     }                      @Override                     public void handleResponse(TestResponse response1) {                         retryListener.onResponse(response1).                     }                      @Override                     public void handleException(TransportException exp) {                         retryListener.onFailure(exp).                     }                      @Override                     public String executor() {                         return randomBoolean() ? ThreadPool.Names.SAME : ThreadPool.Names.GENERIC.                     }                 }).             }, actionListener).             latch.await().             // there can be only either one failure that causes the request to fail straightaway or success             assertThat(preSendFailures.get() + iteration.transport.failures() + iteration.transport.successes(), lessThanOrEqualTo(1)).             if (iteration.transport.successes() == 1) {                 assertThat(finalFailures.get(), equalTo(0)).                 assertThat(finalFailure.get(), nullValue()).                 assertThat(response.get(), notNullValue()).             } else {                 assertThat(finalFailures.get(), equalTo(1)).                 assertThat(finalFailure.get(), notNullValue()).                 assertThat(response.get(), nullValue()).                 if (preSendFailures.get() == 0 && iteration.transport.failures() == 0) {                     assertThat(finalFailure.get(), instanceOf(NoNodeAvailableException.class)).                 }             }             assertThat(iteration.transport.triedNodes().size(), lessThanOrEqualTo(iteration.listNodesCount)).             assertThat(iteration.transport.triedNodes().size(), equalTo(iteration.transport.connectTransportExceptions() + iteration.transport.failures() + iteration.transport.successes())).         }     } }
false;public;0;14;;public void testConnectedNodes() {     int iters = iterations(10, 100).     for (int i = 0. i < iters. i++) {         try (TestIteration iteration = new TestIteration()) {             assertThat(iteration.transportClientNodesService.connectedNodes().size(), lessThanOrEqualTo(iteration.listNodesCount)).             for (DiscoveryNode discoveryNode : iteration.transportClientNodesService.connectedNodes()) {                 assertThat(discoveryNode.getHostName(), startsWith("liveness-")).                 assertThat(discoveryNode.getHostAddress(), startsWith("liveness-")).                 assertNotEquals(discoveryNode.getAddress(), iteration.livenessAddress).                 assertThat(iteration.listNodeAddresses, hasItem(discoveryNode.getAddress())).             }         }     } }
false;public;0;3;;public void testRemoveAddressSniff() {     checkRemoveAddress(true). }
false;public;0;3;;public void testRemoveAddressSimple() {     checkRemoveAddress(false). }
false;public;1;4;;@Override public boolean matches(Object item) {     return item instanceof DiscoveryNode && ((DiscoveryNode) item).getAddress().equals(addressToRemove). }
false;private;1;16;;private void checkRemoveAddress(boolean sniff) {     Settings extraSettings = Settings.builder().put(TransportClient.CLIENT_TRANSPORT_SNIFF.getKey(), sniff).build().     try (TestIteration iteration = new TestIteration(extraSettings)) {         final TransportClientNodesService service = iteration.transportClientNodesService.         assertEquals(iteration.listNodesCount + iteration.sniffNodesCount, service.connectedNodes().size()).         final TransportAddress addressToRemove = randomFrom(iteration.listNodeAddresses).         service.removeTransportAddress(addressToRemove).         assertThat(service.connectedNodes(), everyItem(not(new CustomMatcher<DiscoveryNode>("removed address") {              @Override             public boolean matches(Object item) {                 return item instanceof DiscoveryNode && ((DiscoveryNode) item).getAddress().equals(addressToRemove).             }         }))).         assertEquals(iteration.listNodesCount + iteration.sniffNodesCount - 1, service.connectedNodes().size()).     } }
false;public;1;5;;@Override public void onResponse(Transport.Connection connection) {     establishedConnections.add(connection).     listener.onResponse(connection). }
false;public;1;4;;@Override public void onFailure(Exception e) {     listener.onFailure(e). }
false;public;0;66;;public void testSniffNodesSamplerClosesConnections() throws Exception {     final TestThreadPool threadPool = new TestThreadPool("testSniffNodesSamplerClosesConnections").     Settings remoteSettings = Settings.builder().put(Node.NODE_NAME_SETTING.getKey(), "remote").build().     try (MockTransportService remoteService = createNewService(remoteSettings, Version.CURRENT, threadPool, null)) {         final MockHandler handler = new MockHandler(remoteService).         remoteService.registerRequestHandler(ClusterStateAction.NAME, ThreadPool.Names.SAME, ClusterStateRequest::new, handler).         remoteService.start().         remoteService.acceptIncomingRequests().         Settings clientSettings = Settings.builder().put(TransportClient.CLIENT_TRANSPORT_SNIFF.getKey(), true).put(TransportClient.CLIENT_TRANSPORT_PING_TIMEOUT.getKey(), TimeValue.timeValueSeconds(1)).put(TransportClient.CLIENT_TRANSPORT_NODES_SAMPLER_INTERVAL.getKey(), TimeValue.timeValueSeconds(30)).build().         try (MockTransportService clientService = createNewService(clientSettings, Version.CURRENT, threadPool, null)) {             final List<Transport.Connection> establishedConnections = new CopyOnWriteArrayList<>().             clientService.addConnectBehavior(remoteService, (transport, discoveryNode, profile, listener) -> transport.openConnection(discoveryNode, profile, new ActionListener<Transport.Connection>() {                  @Override                 public void onResponse(Transport.Connection connection) {                     establishedConnections.add(connection).                     listener.onResponse(connection).                 }                  @Override                 public void onFailure(Exception e) {                     listener.onFailure(e).                 }             })).             clientService.start().             clientService.acceptIncomingRequests().             try (TransportClientNodesService transportClientNodesService = new TransportClientNodesService(clientSettings, clientService, threadPool, (a, b) -> {             })) {                 assertEquals(0, transportClientNodesService.connectedNodes().size()).                 assertEquals(0, establishedConnections.size()).                 transportClientNodesService.addTransportAddresses(remoteService.getLocalDiscoNode().getAddress()).                 assertEquals(1, transportClientNodesService.connectedNodes().size()).                 assertEquals(1, clientService.connectionManager().size()).                 transportClientNodesService.doSample().                 assertEquals(1, clientService.connectionManager().size()).                 establishedConnections.clear().                 handler.failToRespond().                 Thread thread = new Thread(transportClientNodesService::doSample).                 thread.start().                 assertBusy(() -> assertTrue(establishedConnections.size() >= 1)).                 assertFalse("Temporary ping connection must be opened", establishedConnections.get(0).isClosed()).                 thread.join().                 assertTrue(establishedConnections.get(0).isClosed()).             }         }     } finally {         terminate(threadPool).     } }
false;public;3;10;;@Override public void messageReceived(ClusterStateRequest request, TransportChannel channel, Task task) throws Exception {     if (failToRespond.get()) {         return.     }     DiscoveryNodes discoveryNodes = DiscoveryNodes.builder().add(transportService.getLocalDiscoNode()).build().     ClusterState build = ClusterState.builder(ClusterName.DEFAULT).nodes(discoveryNodes).build().     channel.sendResponse(new ClusterStateResponse(ClusterName.DEFAULT, build, 0L, false)). }
false;;0;5;;void failToRespond() {     if (failToRespond.compareAndSet(false, true) == false) {         throw new AssertionError("Request handler is already marked as failToRespond").     } }
