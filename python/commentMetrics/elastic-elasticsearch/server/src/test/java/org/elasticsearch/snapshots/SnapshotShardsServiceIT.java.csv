commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     return Arrays.asList(MockRepository.Plugin.class, MockTransportService.TestPlugin.class). }
false;public;0;63;;public void testRetryPostingSnapshotStatusMessages() throws Exception {     String masterNode = internalCluster().startMasterOnlyNode().     String dataNode = internalCluster().startDataOnlyNode().     logger.info("-->  creating repository").     assertAcked(client().admin().cluster().preparePutRepository("test-repo").setType("mock").setSettings(Settings.builder().put("location", randomRepoPath()).put("compress", randomBoolean()).put("chunk_size", randomIntBetween(100, 1000), ByteSizeUnit.BYTES))).     final int shards = between(1, 10).     assertAcked(prepareCreate("test-index", 0, Settings.builder().put("number_of_shards", shards).put("number_of_replicas", 0))).     ensureGreen().     final int numDocs = scaledRandomIntBetween(50, 100).     for (int i = 0. i < numDocs. i++) {         index("test-index", "doc", Integer.toString(i)).     }     logger.info("--> blocking repository").     String blockedNode = blockNodeWithIndex("test-repo", "test-index").     dataNodeClient().admin().cluster().prepareCreateSnapshot("test-repo", "test-snap").setWaitForCompletion(false).setIndices("test-index").get().     waitForBlock(blockedNode, "test-repo", TimeValue.timeValueSeconds(60)).     final SnapshotId snapshotId = client().admin().cluster().prepareGetSnapshots("test-repo").setSnapshots("test-snap").get().getSnapshots().get(0).snapshotId().     logger.info("--> start disrupting cluster").     final NetworkDisruption networkDisruption = new NetworkDisruption(new NetworkDisruption.TwoPartitions(masterNode, dataNode), NetworkDisruption.NetworkDelay.random(random())).     internalCluster().setDisruptionScheme(networkDisruption).     networkDisruption.startDisrupting().     logger.info("--> unblocking repository").     unblockNode("test-repo", blockedNode).     // Retrieve snapshot status from the data node.     SnapshotShardsService snapshotShardsService = internalCluster().getInstance(SnapshotShardsService.class, blockedNode).     assertBusy(() -> {         final Snapshot snapshot = new Snapshot("test-repo", snapshotId).         List<IndexShardSnapshotStatus.Stage> stages = snapshotShardsService.currentSnapshotShards(snapshot).values().stream().map(status -> status.asCopy().getStage()).collect(Collectors.toList()).         assertThat(stages, hasSize(shards)).         assertThat(stages, everyItem(equalTo(IndexShardSnapshotStatus.Stage.DONE))).     }, 30L, TimeUnit.SECONDS).     logger.info("--> stop disrupting cluster").     networkDisruption.stopDisrupting().     internalCluster().clearDisruptionScheme(true).     assertBusy(() -> {         GetSnapshotsResponse snapshotsStatusResponse = client().admin().cluster().prepareGetSnapshots("test-repo").setSnapshots("test-snap").get().         SnapshotInfo snapshotInfo = snapshotsStatusResponse.getSnapshots().get(0).         logger.info("Snapshot status [{}], successfulShards [{}]", snapshotInfo.state(), snapshotInfo.successfulShards()).         assertThat(snapshotInfo.state(), equalTo(SnapshotState.SUCCESS)).         assertThat(snapshotInfo.successfulShards(), equalTo(shards)).     }, 30L, TimeUnit.SECONDS). }
