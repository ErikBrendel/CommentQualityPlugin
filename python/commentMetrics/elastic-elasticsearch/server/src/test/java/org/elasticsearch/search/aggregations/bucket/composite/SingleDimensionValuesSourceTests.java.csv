commented;modifiers;parameterAmount;loc;comment;code
false;public;0;59;;public void testBinarySorted() {     MappedFieldType keyword = new KeywordFieldMapper.KeywordFieldType().     keyword.setName("keyword").     BinaryValuesSource source = new BinaryValuesSource(BigArrays.NON_RECYCLING_INSTANCE, (b) -> {     }, keyword, context -> null, DocValueFormat.RAW, false, 1, 1).     assertNull(source.createSortedDocsProducerOrNull(mockIndexReader(100, 49), null)).     IndexReader reader = mockIndexReader(1, 1).     assertNotNull(source.createSortedDocsProducerOrNull(reader, new MatchAllDocsQuery())).     assertNotNull(source.createSortedDocsProducerOrNull(reader, null)).     assertNull(source.createSortedDocsProducerOrNull(reader, new TermQuery(new Term("foo", "bar")))).     assertNull(source.createSortedDocsProducerOrNull(reader, new TermQuery(new Term("keyword", "toto)")))).     source = new BinaryValuesSource(BigArrays.NON_RECYCLING_INSTANCE, (b) -> {     }, keyword, context -> null, DocValueFormat.RAW, true, 1, 1).     assertNull(source.createSortedDocsProducerOrNull(reader, new MatchAllDocsQuery())).     assertNull(source.createSortedDocsProducerOrNull(reader, null)).     source = new BinaryValuesSource(BigArrays.NON_RECYCLING_INSTANCE, (b) -> {     }, keyword, context -> null, DocValueFormat.RAW, false, 0, -1).     assertNull(source.createSortedDocsProducerOrNull(reader, null)).     MappedFieldType ip = new IpFieldMapper.IpFieldType().     ip.setName("ip").     source = new BinaryValuesSource(BigArrays.NON_RECYCLING_INSTANCE, (b) -> {     }, ip, context -> null, DocValueFormat.RAW, false, 1, 1).     assertNull(source.createSortedDocsProducerOrNull(reader, null)). }
false;public;0;58;;public void testGlobalOrdinalsSorted() {     final MappedFieldType keyword = new KeywordFieldMapper.KeywordFieldType().     keyword.setName("keyword").     GlobalOrdinalValuesSource source = new GlobalOrdinalValuesSource(BigArrays.NON_RECYCLING_INSTANCE, keyword, context -> null, DocValueFormat.RAW, false, 1, 1).     assertNull(source.createSortedDocsProducerOrNull(mockIndexReader(100, 49), null)).     IndexReader reader = mockIndexReader(1, 1).     assertNotNull(source.createSortedDocsProducerOrNull(reader, new MatchAllDocsQuery())).     assertNotNull(source.createSortedDocsProducerOrNull(reader, null)).     assertNull(source.createSortedDocsProducerOrNull(reader, new TermQuery(new Term("foo", "bar")))).     assertNull(source.createSortedDocsProducerOrNull(reader, new TermQuery(new Term("keyword", "toto)")))).     source = new GlobalOrdinalValuesSource(BigArrays.NON_RECYCLING_INSTANCE, keyword, context -> null, DocValueFormat.RAW, true, 1, 1).     assertNull(source.createSortedDocsProducerOrNull(reader, new MatchAllDocsQuery())).     assertNull(source.createSortedDocsProducerOrNull(reader, null)).     assertNull(source.createSortedDocsProducerOrNull(reader, new TermQuery(new Term("foo", "bar")))).     source = new GlobalOrdinalValuesSource(BigArrays.NON_RECYCLING_INSTANCE, keyword, context -> null, DocValueFormat.RAW, false, 1, -1).     assertNull(source.createSortedDocsProducerOrNull(reader, null)).     assertNull(source.createSortedDocsProducerOrNull(reader, new TermQuery(new Term("foo", "bar")))).     final MappedFieldType ip = new IpFieldMapper.IpFieldType().     ip.setName("ip").     source = new GlobalOrdinalValuesSource(BigArrays.NON_RECYCLING_INSTANCE, ip, context -> null, DocValueFormat.RAW, false, 1, 1).     assertNull(source.createSortedDocsProducerOrNull(reader, null)).     assertNull(source.createSortedDocsProducerOrNull(reader, new TermQuery(new Term("foo", "bar")))). }
false;public;0;89;;public void testNumericSorted() {     for (NumberFieldMapper.NumberType numberType : NumberFieldMapper.NumberType.values()) {         MappedFieldType number = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.LONG).         number.setName("number").         final SingleDimensionValuesSource<?> source.         if (numberType == NumberFieldMapper.NumberType.BYTE || numberType == NumberFieldMapper.NumberType.SHORT || numberType == NumberFieldMapper.NumberType.INTEGER || numberType == NumberFieldMapper.NumberType.LONG) {             source = new LongValuesSource(BigArrays.NON_RECYCLING_INSTANCE, number, context -> null, value -> value, DocValueFormat.RAW, false, 1, 1).             assertNull(source.createSortedDocsProducerOrNull(mockIndexReader(100, 49), null)).             IndexReader reader = mockIndexReader(1, 1).             assertNotNull(source.createSortedDocsProducerOrNull(reader, new MatchAllDocsQuery())).             assertNotNull(source.createSortedDocsProducerOrNull(reader, null)).             assertNotNull(source.createSortedDocsProducerOrNull(reader, LongPoint.newRangeQuery("number", 0, 1))).             assertNotNull(source.createSortedDocsProducerOrNull(reader, new IndexOrDocValuesQuery(LongPoint.newRangeQuery("number", 0, 1), new MatchAllDocsQuery()))).             assertNotNull(source.createSortedDocsProducerOrNull(reader, new DocValuesFieldExistsQuery("number"))).             assertNotNull(source.createSortedDocsProducerOrNull(reader, new ConstantScoreQuery(new DocValuesFieldExistsQuery("number")))).             assertNotNull(source.createSortedDocsProducerOrNull(reader, new BoostQuery(new IndexOrDocValuesQuery(LongPoint.newRangeQuery("number", 0, 1), new MatchAllDocsQuery()), 2.0f))).             assertNull(source.createSortedDocsProducerOrNull(reader, new TermQuery(new Term("keyword", "toto)")))).             LongValuesSource sourceWithMissing = new LongValuesSource(BigArrays.NON_RECYCLING_INSTANCE, number, context -> null, value -> value, DocValueFormat.RAW, true, 1, 1).             assertNull(sourceWithMissing.createSortedDocsProducerOrNull(reader, new MatchAllDocsQuery())).             assertNull(sourceWithMissing.createSortedDocsProducerOrNull(reader, null)).             assertNull(sourceWithMissing.createSortedDocsProducerOrNull(reader, new TermQuery(new Term("keyword", "toto)")))).             assertNull(sourceWithMissing.createSortedDocsProducerOrNull(reader, new DocValuesFieldExistsQuery("number"))).             assertNull(sourceWithMissing.createSortedDocsProducerOrNull(reader, new ConstantScoreQuery(new DocValuesFieldExistsQuery("number")))).             LongValuesSource sourceRev = new LongValuesSource(BigArrays.NON_RECYCLING_INSTANCE, number, context -> null, value -> value, DocValueFormat.RAW, false, 1, -1).             assertNull(sourceRev.createSortedDocsProducerOrNull(reader, null)).             assertNull(sourceRev.createSortedDocsProducerOrNull(reader, new DocValuesFieldExistsQuery("number"))).             assertNull(sourceRev.createSortedDocsProducerOrNull(reader, new ConstantScoreQuery(new DocValuesFieldExistsQuery("number")))).             assertNull(sourceWithMissing.createSortedDocsProducerOrNull(reader, new TermQuery(new Term("keyword", "toto)")))).         } else if (numberType == NumberFieldMapper.NumberType.HALF_FLOAT || numberType == NumberFieldMapper.NumberType.FLOAT || numberType == NumberFieldMapper.NumberType.DOUBLE) {             source = new DoubleValuesSource(BigArrays.NON_RECYCLING_INSTANCE, number, context -> null, DocValueFormat.RAW, false, 1, 1).             IndexReader reader = mockIndexReader(1, 1).             assertNull(source.createSortedDocsProducerOrNull(reader, null)).             assertNull(source.createSortedDocsProducerOrNull(reader, new DocValuesFieldExistsQuery("number"))).             assertNull(source.createSortedDocsProducerOrNull(reader, new TermQuery(new Term("keyword", "toto)")))).             assertNull(source.createSortedDocsProducerOrNull(reader, new ConstantScoreQuery(new DocValuesFieldExistsQuery("number")))).         } else {             throw new AssertionError("missing type:" + numberType.typeName()).         }         assertNull(source.createSortedDocsProducerOrNull(mockIndexReader(100, 49), null)).     } }
false;private,static;2;7;;private static IndexReader mockIndexReader(int maxDoc, int numDocs) {     IndexReader reader = mock(IndexReader.class).     when(reader.hasDeletions()).thenReturn(maxDoc - numDocs > 0).     when(reader.maxDoc()).thenReturn(maxDoc).     when(reader.numDocs()).thenReturn(numDocs).     return reader. }
