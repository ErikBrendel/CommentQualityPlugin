commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     return Collections.singleton(CustomScriptPlugin.class). }
false;protected;0;11;;@Override protected Map<String, Function<Map<String, Object>, Object>> pluginScripts() {     Map<String, Function<Map<String, Object>, Object>> scripts = new HashMap<>().     scripts.put("doc['field2'].value * param1", vars -> {         Map<?, ?> doc = (Map) vars.get("doc").         ScriptDocValues.Doubles field2Values = (ScriptDocValues.Doubles) doc.get("field2").         Double param1 = (Double) vars.get("param1").         return field2Values.getValue() * param1.     }).     return scripts. }
true;public;0;33;// 3) min score applied ;// test that script_score works as expected: // 1) only matched docs retrieved // 2) score is calculated based on a script with params // 3) min score applied public void testScriptScore() {     assertAcked(prepareCreate("test-index").addMapping("_doc", "field1", "type=text", "field2", "type=double")).     int docCount = 10.     for (int i = 1. i <= docCount. i++) {         client().prepareIndex("test-index", "_doc", "" + i).setSource("field1", "text" + (i % 2), "field2", i).get().     }     refresh().     Map<String, Object> params = new HashMap<>().     params.put("param1", 0.1).     Script script = new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, "doc['field2'].value * param1", params).     SearchResponse resp = client().prepareSearch("test-index").setQuery(scriptScoreQuery(matchQuery("field1", "text0"), new ScriptScoreFunctionBuilder(script))).get().     assertNoFailures(resp).     assertOrderedSearchHits(resp, "10", "8", "6", "4", "2").     assertFirstHit(resp, hasScore(1.0f)).     assertSecondHit(resp, hasScore(0.8f)).     assertThirdHit(resp, hasScore(0.6f)).     // applying min score     resp = client().prepareSearch("test-index").setQuery(scriptScoreQuery(matchQuery("field1", "text0"), new ScriptScoreFunctionBuilder(script)).setMinScore(0.6f)).get().     assertNoFailures(resp).     assertOrderedSearchHits(resp, "10", "8", "6"). }
