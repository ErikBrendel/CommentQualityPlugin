commented;modifiers;parameterAmount;loc;comment;code
false;public;3;3;;@Override public void deleteShardStore(String reason, ShardLock lock, IndexSettings indexSettings) throws IOException { }
false;public;2;3;;@Override public void addPendingDelete(ShardId shardId, IndexSettings indexSettings) { }
false;public;0;20;;@Override public void setUp() throws Exception {     super.setUp().     settings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).build().     indicesQueryCache = new IndicesQueryCache(settings).     indexSettings = IndexSettingsModule.newIndexSettings("foo", settings).     index = indexSettings.getIndex().     environment = TestEnvironment.newEnvironment(settings).     emptyAnalysisRegistry = new AnalysisRegistry(environment, emptyMap(), emptyMap(), emptyMap(), emptyMap(), emptyMap(), emptyMap(), emptyMap(), emptyMap(), emptyMap()).     threadPool = new TestThreadPool("test").     circuitBreakerService = new NoneCircuitBreakerService().     PageCacheRecycler pageCacheRecycler = new PageCacheRecycler(settings).     bigArrays = new BigArrays(pageCacheRecycler, circuitBreakerService, CircuitBreaker.REQUEST).     scriptService = new ScriptService(settings, Collections.emptyMap(), Collections.emptyMap()).     clusterService = ClusterServiceUtils.createClusterService(threadPool).     nodeEnvironment = new NodeEnvironment(settings, environment).     mapperRegistry = new IndicesModule(Collections.emptyList()).getMapperRegistry(). }
false;public;0;6;;@Override public void tearDown() throws Exception {     super.tearDown().     IOUtils.close(nodeEnvironment, indicesQueryCache, clusterService).     ThreadPool.terminate(threadPool, 10, TimeUnit.SECONDS). }
false;private;1;5;;private IndexService newIndexService(IndexModule module) throws IOException {     return module.newIndexService(nodeEnvironment, xContentRegistry(), deleter, circuitBreakerService, bigArrays, threadPool, scriptService, null, indicesQueryCache, mapperRegistry, new IndicesFieldDataCache(settings, listener), writableRegistry()). }
false;public;0;10;;public void testWrapperIsBound() throws IOException {     final MockEngineFactory engineFactory = new MockEngineFactory(AssertingDirectoryReader.class).     IndexModule module = new IndexModule(indexSettings, emptyAnalysisRegistry, engineFactory, Collections.emptyMap()).     module.setSearcherWrapper((s) -> new Wrapper()).     IndexService indexService = newIndexService(module).     assertTrue(indexService.getSearcherWrapper() instanceof Wrapper).     assertSame(indexService.getEngineFactory(), module.getEngineFactory()).     indexService.close("simon says", false). }
false;public;0;16;;public void testRegisterIndexStore() throws IOException {     final Settings settings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).put(IndexModule.INDEX_STORE_TYPE_SETTING.getKey(), "foo_store").build().     final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(index, settings).     final Map<String, Function<IndexSettings, IndexStore>> indexStoreFactories = Collections.singletonMap("foo_store", FooStore::new).     final IndexModule module = new IndexModule(indexSettings, emptyAnalysisRegistry, new InternalEngineFactory(), indexStoreFactories).     final IndexService indexService = newIndexService(module).     assertThat(indexService.getIndexStore(), instanceOf(FooStore.class)).     indexService.close("simon says", false). }
false;public;2;4;;@Override public void beforeIndexRemoved(IndexService indexService, IndexRemovalReason reason) {     atomicBoolean.set(true). }
false;public;0;19;;public void testOtherServiceBound() throws IOException {     final AtomicBoolean atomicBoolean = new AtomicBoolean(false).     final IndexEventListener eventListener = new IndexEventListener() {          @Override         public void beforeIndexRemoved(IndexService indexService, IndexRemovalReason reason) {             atomicBoolean.set(true).         }     }.     IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(index, settings).     IndexModule module = new IndexModule(indexSettings, emptyAnalysisRegistry, new InternalEngineFactory(), Collections.emptyMap()).     module.addIndexEventListener(eventListener).     IndexService indexService = newIndexService(module).     IndexSettings x = indexService.getIndexSettings().     assertEquals(x.getSettings(), indexSettings.getSettings()).     assertEquals(x.getIndex(), index).     indexService.getIndexEventListener().beforeIndexRemoved(null, null).     assertTrue(atomicBoolean.get()).     indexService.close("simon says", false). }
false;public;0;20;;public void testListener() throws IOException {     Setting<Boolean> booleanSetting = Setting.boolSetting("index.foo.bar", false, Property.Dynamic, Property.IndexScope).     final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(index, settings, booleanSetting).     IndexModule module = new IndexModule(indexSettings, emptyAnalysisRegistry, new InternalEngineFactory(), Collections.emptyMap()).     Setting<Boolean> booleanSetting2 = Setting.boolSetting("index.foo.bar.baz", false, Property.Dynamic, Property.IndexScope).     AtomicBoolean atomicBoolean = new AtomicBoolean(false).     module.addSettingsUpdateConsumer(booleanSetting, atomicBoolean::set).     try {         module.addSettingsUpdateConsumer(booleanSetting2, atomicBoolean::set).         fail("not registered").     } catch (IllegalArgumentException ex) {     }     IndexService indexService = newIndexService(module).     assertSame(booleanSetting, indexService.getIndexSettings().getScopedSettings().get(booleanSetting.getKey())).     indexService.close("simon says", false). }
false;public;2;5;;@Override public Engine.Index preIndex(ShardId shardId, Engine.Index operation) {     executed.set(true).     return operation. }
false;public;0;30;;public void testAddIndexOperationListener() throws IOException {     final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(index, settings).     IndexModule module = new IndexModule(indexSettings, emptyAnalysisRegistry, new InternalEngineFactory(), Collections.emptyMap()).     AtomicBoolean executed = new AtomicBoolean(false).     IndexingOperationListener listener = new IndexingOperationListener() {          @Override         public Engine.Index preIndex(ShardId shardId, Engine.Index operation) {             executed.set(true).             return operation.         }     }.     module.addIndexOperationListener(listener).     expectThrows(IllegalArgumentException.class, () -> module.addIndexOperationListener(listener)).     expectThrows(IllegalArgumentException.class, () -> module.addIndexOperationListener(null)).     IndexService indexService = newIndexService(module).     assertEquals(2, indexService.getIndexOperationListeners().size()).     assertEquals(IndexingSlowLog.class, indexService.getIndexOperationListeners().get(0).getClass()).     assertSame(listener, indexService.getIndexOperationListeners().get(1)).     ParsedDocument doc = InternalEngineTests.createParsedDoc("1", null).     Engine.Index index = new Engine.Index(new Term("_id", Uid.encodeId(doc.id())), randomNonNegativeLong(), doc).     ShardId shardId = new ShardId(new Index("foo", "bar"), 0).     for (IndexingOperationListener l : indexService.getIndexOperationListeners()) {         l.preIndex(shardId, index).     }     assertTrue(executed.get()).     indexService.close("simon says", false). }
false;public;1;4;;@Override public void onNewContext(SearchContext context) {     executed.set(true). }
false;public;0;27;;public void testAddSearchOperationListener() throws IOException {     final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(index, settings).     IndexModule module = new IndexModule(indexSettings, emptyAnalysisRegistry, new InternalEngineFactory(), Collections.emptyMap()).     AtomicBoolean executed = new AtomicBoolean(false).     SearchOperationListener listener = new SearchOperationListener() {          @Override         public void onNewContext(SearchContext context) {             executed.set(true).         }     }.     module.addSearchOperationListener(listener).     expectThrows(IllegalArgumentException.class, () -> module.addSearchOperationListener(listener)).     expectThrows(IllegalArgumentException.class, () -> module.addSearchOperationListener(null)).     IndexService indexService = newIndexService(module).     assertEquals(2, indexService.getSearchOperationListener().size()).     assertEquals(SearchSlowLog.class, indexService.getSearchOperationListener().get(0).getClass()).     assertSame(listener, indexService.getSearchOperationListener().get(1)).     for (SearchOperationListener l : indexService.getSearchOperationListener()) {         l.onNewContext(new TestSearchContext(null)).     }     assertTrue(executed.get()).     indexService.close("simon says", false). }
false;public;0;24;;public void testAddSimilarity() throws IOException {     Settings settings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).put("index.similarity.my_similarity.type", "test_similarity").put("index.similarity.my_similarity.key", "there is a key").put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).build().     final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings("foo", settings).     IndexModule module = new IndexModule(indexSettings, emptyAnalysisRegistry, new InternalEngineFactory(), Collections.emptyMap()).     module.addSimilarity("test_similarity", (providerSettings, indexCreatedVersion, scriptService) -> new TestSimilarity(providerSettings.get("key"))).     IndexService indexService = newIndexService(module).     SimilarityService similarityService = indexService.similarityService().     Similarity similarity = similarityService.getSimilarity("my_similarity").get().     assertNotNull(similarity).     assertThat(similarity, Matchers.instanceOf(NonNegativeScoresSimilarity.class)).     similarity = ((NonNegativeScoresSimilarity) similarity).getDelegate().     assertThat(similarity, Matchers.instanceOf(TestSimilarity.class)).     assertEquals("my_similarity", similarityService.getSimilarity("my_similarity").name()).     assertEquals("there is a key", ((TestSimilarity) similarity).key).     indexService.close("simon says", false). }
false;public;0;12;;public void testFrozen() {     final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(index, settings).     IndexModule module = new IndexModule(indexSettings, emptyAnalysisRegistry, new InternalEngineFactory(), Collections.emptyMap()).     module.freeze().     String msg = "Can't modify IndexModule once the index service has been created".     assertEquals(msg, expectThrows(IllegalStateException.class, () -> module.addSearchOperationListener(null)).getMessage()).     assertEquals(msg, expectThrows(IllegalStateException.class, () -> module.addIndexEventListener(null)).getMessage()).     assertEquals(msg, expectThrows(IllegalStateException.class, () -> module.addIndexOperationListener(null)).getMessage()).     assertEquals(msg, expectThrows(IllegalStateException.class, () -> module.addSimilarity(null, null)).getMessage()).     assertEquals(msg, expectThrows(IllegalStateException.class, () -> module.setSearcherWrapper(null)).getMessage()).     assertEquals(msg, expectThrows(IllegalStateException.class, () -> module.forceQueryCacheProvider(null)).getMessage()). }
false;public;0;12;;public void testSetupUnknownSimilarity() throws IOException {     Settings settings = Settings.builder().put("index.similarity.my_similarity.type", "test_similarity").put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).build().     final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings("foo", settings).     IndexModule module = new IndexModule(indexSettings, emptyAnalysisRegistry, new InternalEngineFactory(), Collections.emptyMap()).     Exception ex = expectThrows(IllegalArgumentException.class, () -> newIndexService(module)).     assertEquals("Unknown Similarity type [test_similarity] for [my_similarity]", ex.getMessage()). }
false;public;0;11;;public void testSetupWithoutType() throws IOException {     Settings settings = Settings.builder().put("index.similarity.my_similarity.foo", "bar").put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).build().     final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings("foo", settings).     IndexModule module = new IndexModule(indexSettings, emptyAnalysisRegistry, new InternalEngineFactory(), Collections.emptyMap()).     Exception ex = expectThrows(IllegalArgumentException.class, () -> newIndexService(module)).     assertEquals("Similarity [my_similarity] must have an associated type", ex.getMessage()). }
false;public;0;12;;public void testForceCustomQueryCache() throws IOException {     Settings settings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).build().     final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings("foo", settings).     IndexModule module = new IndexModule(indexSettings, emptyAnalysisRegistry, new InternalEngineFactory(), Collections.emptyMap()).     module.forceQueryCacheProvider((a, b) -> new CustomQueryCache()).     expectThrows(AlreadySetException.class, () -> module.forceQueryCacheProvider((a, b) -> new CustomQueryCache())).     IndexService indexService = newIndexService(module).     assertTrue(indexService.cache().query() instanceof CustomQueryCache).     indexService.close("simon says", false). }
false;public;0;10;;public void testDefaultQueryCacheImplIsSelected() throws IOException {     Settings settings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).build().     final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings("foo", settings).     IndexModule module = new IndexModule(indexSettings, emptyAnalysisRegistry, new InternalEngineFactory(), Collections.emptyMap()).     IndexService indexService = newIndexService(module).     assertTrue(indexService.cache().query() instanceof IndexQueryCache).     indexService.close("simon says", false). }
false;public;0;12;;public void testDisableQueryCacheHasPrecedenceOverForceQueryCache() throws IOException {     Settings settings = Settings.builder().put(IndexModule.INDEX_QUERY_CACHE_ENABLED_SETTING.getKey(), false).put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).build().     final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings("foo", settings).     IndexModule module = new IndexModule(indexSettings, emptyAnalysisRegistry, new InternalEngineFactory(), Collections.emptyMap()).     module.forceQueryCacheProvider((a, b) -> new CustomQueryCache()).     IndexService indexService = newIndexService(module).     assertTrue(indexService.cache().query() instanceof DisabledQueryCache).     indexService.close("simon says", false). }
false;public;0;15;;public void testMmapNotAllowed() {     String storeType = randomFrom(IndexModule.Type.HYBRIDFS.getSettingsKey(), IndexModule.Type.MMAPFS.getSettingsKey()).     final Settings settings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()).put("index.store.type", storeType).build().     final Settings nodeSettings = Settings.builder().put(IndexModule.NODE_STORE_ALLOW_MMAP.getKey(), false).build().     final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(new Index("foo", "_na_"), settings, nodeSettings).     final IndexModule module = new IndexModule(indexSettings, emptyAnalysisRegistry, new InternalEngineFactory(), Collections.emptyMap()).     final IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> newIndexService(module)).     assertThat(e, hasToString(containsString("store type [" + storeType + "] is not allowed"))). }
false;public;1;3;;@Override public void clear(String reason) { }
false;public;0;3;;@Override public void close() throws IOException { }
false;public;0;4;;@Override public Index index() {     return new Index("test", "_na_"). }
false;public;2;4;;@Override public Weight doCache(Weight weight, QueryCachingPolicy policy) {     return weight. }
false;public;1;4;;@Override public long computeNorm(FieldInvertState state) {     return delegate.computeNorm(state). }
false;public;3;4;;@Override public SimScorer scorer(float boost, CollectionStatistics collectionStats, TermStatistics... termStats) {     return delegate.scorer(boost, collectionStats, termStats). }
false;public;1;4;;@Override public DirectoryReader wrap(DirectoryReader reader) {     return null. }
false;public;1;4;;@Override public IndexSearcher wrap(IndexSearcher searcher) throws EngineException {     return null. }
