# id;timestamp;commentText;codeText;commentWords;codeWords
ClusterStateDiffIT -> private AliasMetaData randomAlias();1524684173;Generates random alias;private AliasMetaData randomAlias() {_        AliasMetaData.Builder builder = newAliasMetaDataBuilder(randomName("alias"))__        if (randomBoolean()) {_            builder.filter(QueryBuilders.termQuery("test", randomRealisticUnicodeOfCodepointLength(10)).toString())__        }_        if (randomBoolean()) {_            builder.routing(randomAlphaOfLength(10))__        }_        return builder.build()__    };generates,random,alias;private,alias,meta,data,random,alias,alias,meta,data,builder,builder,new,alias,meta,data,builder,random,name,alias,if,random,boolean,builder,filter,query,builders,term,query,test,random,realistic,unicode,of,codepoint,length,10,to,string,if,random,boolean,builder,routing,random,alpha,of,length,10,return,builder,build
ClusterStateDiffIT -> private AliasMetaData randomAlias();1525248068;Generates random alias;private AliasMetaData randomAlias() {_        AliasMetaData.Builder builder = newAliasMetaDataBuilder(randomName("alias"))__        if (randomBoolean()) {_            builder.filter(QueryBuilders.termQuery("test", randomRealisticUnicodeOfCodepointLength(10)).toString())__        }_        if (randomBoolean()) {_            builder.routing(randomAlphaOfLength(10))__        }_        return builder.build()__    };generates,random,alias;private,alias,meta,data,random,alias,alias,meta,data,builder,builder,new,alias,meta,data,builder,random,name,alias,if,random,boolean,builder,filter,query,builders,term,query,test,random,realistic,unicode,of,codepoint,length,10,to,string,if,random,boolean,builder,routing,random,alpha,of,length,10,return,builder,build
ClusterStateDiffIT -> private AliasMetaData randomAlias();1540847035;Generates random alias;private AliasMetaData randomAlias() {_        AliasMetaData.Builder builder = newAliasMetaDataBuilder(randomName("alias"))__        if (randomBoolean()) {_            builder.filter(QueryBuilders.termQuery("test", randomRealisticUnicodeOfCodepointLength(10)).toString())__        }_        if (randomBoolean()) {_            builder.routing(randomAlphaOfLength(10))__        }_        return builder.build()__    };generates,random,alias;private,alias,meta,data,random,alias,alias,meta,data,builder,builder,new,alias,meta,data,builder,random,name,alias,if,random,boolean,builder,filter,query,builders,term,query,test,random,realistic,unicode,of,codepoint,length,10,to,string,if,random,boolean,builder,routing,random,alpha,of,length,10,return,builder,build
ClusterStateDiffIT -> private AliasMetaData randomAlias();1544081506;Generates random alias;private AliasMetaData randomAlias() {_        AliasMetaData.Builder builder = newAliasMetaDataBuilder(randomName("alias"))__        if (randomBoolean()) {_            builder.filter(QueryBuilders.termQuery("test", randomRealisticUnicodeOfCodepointLength(10)).toString())__        }_        if (randomBoolean()) {_            builder.routing(randomAlphaOfLength(10))__        }_        return builder.build()__    };generates,random,alias;private,alias,meta,data,random,alias,alias,meta,data,builder,builder,new,alias,meta,data,builder,random,name,alias,if,random,boolean,builder,filter,query,builders,term,query,test,random,realistic,unicode,of,codepoint,length,10,to,string,if,random,boolean,builder,routing,random,alpha,of,length,10,return,builder,build
ClusterStateDiffIT -> private AliasMetaData randomAlias();1544783963;Generates random alias;private AliasMetaData randomAlias() {_        AliasMetaData.Builder builder = newAliasMetaDataBuilder(randomName("alias"))__        if (randomBoolean()) {_            builder.filter(QueryBuilders.termQuery("test", randomRealisticUnicodeOfCodepointLength(10)).toString())__        }_        if (randomBoolean()) {_            builder.routing(randomAlphaOfLength(10))__        }_        return builder.build()__    };generates,random,alias;private,alias,meta,data,random,alias,alias,meta,data,builder,builder,new,alias,meta,data,builder,random,name,alias,if,random,boolean,builder,filter,query,builders,term,query,test,random,realistic,unicode,of,codepoint,length,10,to,string,if,random,boolean,builder,routing,random,alpha,of,length,10,return,builder,build
ClusterStateDiffIT -> private AliasMetaData randomAlias();1549356476;Generates random alias;private AliasMetaData randomAlias() {_        AliasMetaData.Builder builder = newAliasMetaDataBuilder(randomName("alias"))__        if (randomBoolean()) {_            builder.filter(QueryBuilders.termQuery("test", randomRealisticUnicodeOfCodepointLength(10)).toString())__        }_        if (randomBoolean()) {_            builder.routing(randomAlphaOfLength(10))__        }_        return builder.build()__    };generates,random,alias;private,alias,meta,data,random,alias,alias,meta,data,builder,builder,new,alias,meta,data,builder,random,name,alias,if,random,boolean,builder,filter,query,builders,term,query,test,random,realistic,unicode,of,codepoint,length,10,to,string,if,random,boolean,builder,routing,random,alpha,of,length,10,return,builder,build
ClusterStateDiffIT -> private String randomName(String prefix);1524684173;Generates a random name that starts with the given prefix;private String randomName(String prefix) {_        return prefix + UUIDs.randomBase64UUID(random())__    };generates,a,random,name,that,starts,with,the,given,prefix;private,string,random,name,string,prefix,return,prefix,uuids,random,base64uuid,random
ClusterStateDiffIT -> private String randomName(String prefix);1525248068;Generates a random name that starts with the given prefix;private String randomName(String prefix) {_        return prefix + UUIDs.randomBase64UUID(random())__    };generates,a,random,name,that,starts,with,the,given,prefix;private,string,random,name,string,prefix,return,prefix,uuids,random,base64uuid,random
ClusterStateDiffIT -> private String randomName(String prefix);1540847035;Generates a random name that starts with the given prefix;private String randomName(String prefix) {_        return prefix + UUIDs.randomBase64UUID(random())__    };generates,a,random,name,that,starts,with,the,given,prefix;private,string,random,name,string,prefix,return,prefix,uuids,random,base64uuid,random
ClusterStateDiffIT -> private String randomName(String prefix);1544081506;Generates a random name that starts with the given prefix;private String randomName(String prefix) {_        return prefix + UUIDs.randomBase64UUID(random())__    };generates,a,random,name,that,starts,with,the,given,prefix;private,string,random,name,string,prefix,return,prefix,uuids,random,base64uuid,random
ClusterStateDiffIT -> private String randomName(String prefix);1544783963;Generates a random name that starts with the given prefix;private String randomName(String prefix) {_        return prefix + UUIDs.randomBase64UUID(random())__    };generates,a,random,name,that,starts,with,the,given,prefix;private,string,random,name,string,prefix,return,prefix,uuids,random,base64uuid,random
ClusterStateDiffIT -> private String randomName(String prefix);1549356476;Generates a random name that starts with the given prefix;private String randomName(String prefix) {_        return prefix + UUIDs.randomBase64UUID(random())__    };generates,a,random,name,that,starts,with,the,given,prefix;private,string,random,name,string,prefix,return,prefix,uuids,random,base64uuid,random
ClusterStateDiffIT -> private MetaData randomMetaDataCustoms(final MetaData metaData);1524684173;Randomly adds, deletes or updates repositories in the metadata;private MetaData randomMetaDataCustoms(final MetaData metaData) {_        return randomParts(metaData, "custom", new RandomPart<MetaData.Custom>() {__            @Override_            public ImmutableOpenMap<String, MetaData.Custom> parts(MetaData metaData) {_                return metaData.customs()__            }__            @Override_            public MetaData.Builder put(MetaData.Builder builder, MetaData.Custom part) {_                return builder.putCustom(part.getWriteableName(), part)__            }__            @Override_            public MetaData.Builder remove(MetaData.Builder builder, String name) {_                if (IndexGraveyard.TYPE.equals(name)) {_                    _                    return builder.indexGraveyard(IndexGraveyard.builder().build())__                } else {_                    return builder.removeCustom(name)__                }_            }__            @Override_            public MetaData.Custom randomCreate(String name) {_                if (randomBoolean()) {_                    return new RepositoriesMetaData()__                } else {_                    return IndexGraveyardTests.createRandom()__                }_            }__            @Override_            public MetaData.Custom randomChange(MetaData.Custom part) {_                return part__            }_        })__    };randomly,adds,deletes,or,updates,repositories,in,the,metadata;private,meta,data,random,meta,data,customs,final,meta,data,meta,data,return,random,parts,meta,data,custom,new,random,part,meta,data,custom,override,public,immutable,open,map,string,meta,data,custom,parts,meta,data,meta,data,return,meta,data,customs,override,public,meta,data,builder,put,meta,data,builder,builder,meta,data,custom,part,return,builder,put,custom,part,get,writeable,name,part,override,public,meta,data,builder,remove,meta,data,builder,builder,string,name,if,index,graveyard,type,equals,name,return,builder,index,graveyard,index,graveyard,builder,build,else,return,builder,remove,custom,name,override,public,meta,data,custom,random,create,string,name,if,random,boolean,return,new,repositories,meta,data,else,return,index,graveyard,tests,create,random,override,public,meta,data,custom,random,change,meta,data,custom,part,return,part
ClusterStateDiffIT -> private MetaData randomMetaDataCustoms(final MetaData metaData);1525248068;Randomly adds, deletes or updates repositories in the metadata;private MetaData randomMetaDataCustoms(final MetaData metaData) {_        return randomParts(metaData, "custom", new RandomPart<MetaData.Custom>() {__            @Override_            public ImmutableOpenMap<String, MetaData.Custom> parts(MetaData metaData) {_                return metaData.customs()__            }__            @Override_            public MetaData.Builder put(MetaData.Builder builder, MetaData.Custom part) {_                return builder.putCustom(part.getWriteableName(), part)__            }__            @Override_            public MetaData.Builder remove(MetaData.Builder builder, String name) {_                if (IndexGraveyard.TYPE.equals(name)) {_                    _                    return builder.indexGraveyard(IndexGraveyard.builder().build())__                } else {_                    return builder.removeCustom(name)__                }_            }__            @Override_            public MetaData.Custom randomCreate(String name) {_                if (randomBoolean()) {_                    return new RepositoriesMetaData(Collections.emptyList())__                } else {_                    return IndexGraveyardTests.createRandom()__                }_            }__            @Override_            public MetaData.Custom randomChange(MetaData.Custom part) {_                return part__            }_        })__    };randomly,adds,deletes,or,updates,repositories,in,the,metadata;private,meta,data,random,meta,data,customs,final,meta,data,meta,data,return,random,parts,meta,data,custom,new,random,part,meta,data,custom,override,public,immutable,open,map,string,meta,data,custom,parts,meta,data,meta,data,return,meta,data,customs,override,public,meta,data,builder,put,meta,data,builder,builder,meta,data,custom,part,return,builder,put,custom,part,get,writeable,name,part,override,public,meta,data,builder,remove,meta,data,builder,builder,string,name,if,index,graveyard,type,equals,name,return,builder,index,graveyard,index,graveyard,builder,build,else,return,builder,remove,custom,name,override,public,meta,data,custom,random,create,string,name,if,random,boolean,return,new,repositories,meta,data,collections,empty,list,else,return,index,graveyard,tests,create,random,override,public,meta,data,custom,random,change,meta,data,custom,part,return,part
ClusterStateDiffIT -> private MetaData randomMetaDataCustoms(final MetaData metaData);1540847035;Randomly adds, deletes or updates repositories in the metadata;private MetaData randomMetaDataCustoms(final MetaData metaData) {_        return randomParts(metaData, "custom", new RandomPart<MetaData.Custom>() {__            @Override_            public ImmutableOpenMap<String, MetaData.Custom> parts(MetaData metaData) {_                return metaData.customs()__            }__            @Override_            public MetaData.Builder put(MetaData.Builder builder, MetaData.Custom part) {_                return builder.putCustom(part.getWriteableName(), part)__            }__            @Override_            public MetaData.Builder remove(MetaData.Builder builder, String name) {_                if (IndexGraveyard.TYPE.equals(name)) {_                    _                    return builder.indexGraveyard(IndexGraveyard.builder().build())__                } else {_                    return builder.removeCustom(name)__                }_            }__            @Override_            public MetaData.Custom randomCreate(String name) {_                if (randomBoolean()) {_                    return new RepositoriesMetaData(Collections.emptyList())__                } else {_                    return IndexGraveyardTests.createRandom()__                }_            }__            @Override_            public MetaData.Custom randomChange(MetaData.Custom part) {_                return part__            }_        })__    };randomly,adds,deletes,or,updates,repositories,in,the,metadata;private,meta,data,random,meta,data,customs,final,meta,data,meta,data,return,random,parts,meta,data,custom,new,random,part,meta,data,custom,override,public,immutable,open,map,string,meta,data,custom,parts,meta,data,meta,data,return,meta,data,customs,override,public,meta,data,builder,put,meta,data,builder,builder,meta,data,custom,part,return,builder,put,custom,part,get,writeable,name,part,override,public,meta,data,builder,remove,meta,data,builder,builder,string,name,if,index,graveyard,type,equals,name,return,builder,index,graveyard,index,graveyard,builder,build,else,return,builder,remove,custom,name,override,public,meta,data,custom,random,create,string,name,if,random,boolean,return,new,repositories,meta,data,collections,empty,list,else,return,index,graveyard,tests,create,random,override,public,meta,data,custom,random,change,meta,data,custom,part,return,part
ClusterStateDiffIT -> private MetaData randomMetaDataCustoms(final MetaData metaData);1544081506;Randomly adds, deletes or updates repositories in the metadata;private MetaData randomMetaDataCustoms(final MetaData metaData) {_        return randomParts(metaData, "custom", new RandomPart<MetaData.Custom>() {__            @Override_            public ImmutableOpenMap<String, MetaData.Custom> parts(MetaData metaData) {_                return metaData.customs()__            }__            @Override_            public MetaData.Builder put(MetaData.Builder builder, MetaData.Custom part) {_                return builder.putCustom(part.getWriteableName(), part)__            }__            @Override_            public MetaData.Builder remove(MetaData.Builder builder, String name) {_                if (IndexGraveyard.TYPE.equals(name)) {_                    _                    return builder.indexGraveyard(IndexGraveyard.builder().build())__                } else {_                    return builder.removeCustom(name)__                }_            }__            @Override_            public MetaData.Custom randomCreate(String name) {_                if (randomBoolean()) {_                    return new RepositoriesMetaData(Collections.emptyList())__                } else {_                    return IndexGraveyardTests.createRandom()__                }_            }__            @Override_            public MetaData.Custom randomChange(MetaData.Custom part) {_                return part__            }_        })__    };randomly,adds,deletes,or,updates,repositories,in,the,metadata;private,meta,data,random,meta,data,customs,final,meta,data,meta,data,return,random,parts,meta,data,custom,new,random,part,meta,data,custom,override,public,immutable,open,map,string,meta,data,custom,parts,meta,data,meta,data,return,meta,data,customs,override,public,meta,data,builder,put,meta,data,builder,builder,meta,data,custom,part,return,builder,put,custom,part,get,writeable,name,part,override,public,meta,data,builder,remove,meta,data,builder,builder,string,name,if,index,graveyard,type,equals,name,return,builder,index,graveyard,index,graveyard,builder,build,else,return,builder,remove,custom,name,override,public,meta,data,custom,random,create,string,name,if,random,boolean,return,new,repositories,meta,data,collections,empty,list,else,return,index,graveyard,tests,create,random,override,public,meta,data,custom,random,change,meta,data,custom,part,return,part
ClusterStateDiffIT -> private MetaData randomMetaDataCustoms(final MetaData metaData);1544783963;Randomly adds, deletes or updates repositories in the metadata;private MetaData randomMetaDataCustoms(final MetaData metaData) {_        return randomParts(metaData, "custom", new RandomPart<MetaData.Custom>() {__            @Override_            public ImmutableOpenMap<String, MetaData.Custom> parts(MetaData metaData) {_                return metaData.customs()__            }__            @Override_            public MetaData.Builder put(MetaData.Builder builder, MetaData.Custom part) {_                return builder.putCustom(part.getWriteableName(), part)__            }__            @Override_            public MetaData.Builder remove(MetaData.Builder builder, String name) {_                if (IndexGraveyard.TYPE.equals(name)) {_                    _                    return builder.indexGraveyard(IndexGraveyard.builder().build())__                } else {_                    return builder.removeCustom(name)__                }_            }__            @Override_            public MetaData.Custom randomCreate(String name) {_                if (randomBoolean()) {_                    return new RepositoriesMetaData(Collections.emptyList())__                } else {_                    return IndexGraveyardTests.createRandom()__                }_            }__            @Override_            public MetaData.Custom randomChange(MetaData.Custom part) {_                return part__            }_        })__    };randomly,adds,deletes,or,updates,repositories,in,the,metadata;private,meta,data,random,meta,data,customs,final,meta,data,meta,data,return,random,parts,meta,data,custom,new,random,part,meta,data,custom,override,public,immutable,open,map,string,meta,data,custom,parts,meta,data,meta,data,return,meta,data,customs,override,public,meta,data,builder,put,meta,data,builder,builder,meta,data,custom,part,return,builder,put,custom,part,get,writeable,name,part,override,public,meta,data,builder,remove,meta,data,builder,builder,string,name,if,index,graveyard,type,equals,name,return,builder,index,graveyard,index,graveyard,builder,build,else,return,builder,remove,custom,name,override,public,meta,data,custom,random,create,string,name,if,random,boolean,return,new,repositories,meta,data,collections,empty,list,else,return,index,graveyard,tests,create,random,override,public,meta,data,custom,random,change,meta,data,custom,part,return,part
ClusterStateDiffIT -> private MetaData randomMetaDataCustoms(final MetaData metaData);1549356476;Randomly adds, deletes or updates repositories in the metadata;private MetaData randomMetaDataCustoms(final MetaData metaData) {_        return randomParts(metaData, "custom", new RandomPart<MetaData.Custom>() {__            @Override_            public ImmutableOpenMap<String, MetaData.Custom> parts(MetaData metaData) {_                return metaData.customs()__            }__            @Override_            public MetaData.Builder put(MetaData.Builder builder, MetaData.Custom part) {_                return builder.putCustom(part.getWriteableName(), part)__            }__            @Override_            public MetaData.Builder remove(MetaData.Builder builder, String name) {_                if (IndexGraveyard.TYPE.equals(name)) {_                    _                    return builder.indexGraveyard(IndexGraveyard.builder().build())__                } else {_                    return builder.removeCustom(name)__                }_            }__            @Override_            public MetaData.Custom randomCreate(String name) {_                if (randomBoolean()) {_                    return new RepositoriesMetaData(Collections.emptyList())__                } else {_                    return IndexGraveyardTests.createRandom()__                }_            }__            @Override_            public MetaData.Custom randomChange(MetaData.Custom part) {_                return part__            }_        })__    };randomly,adds,deletes,or,updates,repositories,in,the,metadata;private,meta,data,random,meta,data,customs,final,meta,data,meta,data,return,random,parts,meta,data,custom,new,random,part,meta,data,custom,override,public,immutable,open,map,string,meta,data,custom,parts,meta,data,meta,data,return,meta,data,customs,override,public,meta,data,builder,put,meta,data,builder,builder,meta,data,custom,part,return,builder,put,custom,part,get,writeable,name,part,override,public,meta,data,builder,remove,meta,data,builder,builder,string,name,if,index,graveyard,type,equals,name,return,builder,index,graveyard,index,graveyard,builder,build,else,return,builder,remove,custom,name,override,public,meta,data,custom,random,create,string,name,if,random,boolean,return,new,repositories,meta,data,collections,empty,list,else,return,index,graveyard,tests,create,random,override,public,meta,data,custom,random,change,meta,data,custom,part,return,part
ClusterStateDiffIT -> private MetaData randomMetaDataSettings(MetaData metaData);1524684173;Randomly updates persistent or transient settings of the given metadata;private MetaData randomMetaDataSettings(MetaData metaData) {_        if (randomBoolean()) {_            return MetaData.builder(metaData).persistentSettings(randomSettings(metaData.persistentSettings())).build()__        } else {_            return MetaData.builder(metaData).transientSettings(randomSettings(metaData.transientSettings())).build()__        }_    };randomly,updates,persistent,or,transient,settings,of,the,given,metadata;private,meta,data,random,meta,data,settings,meta,data,meta,data,if,random,boolean,return,meta,data,builder,meta,data,persistent,settings,random,settings,meta,data,persistent,settings,build,else,return,meta,data,builder,meta,data,transient,settings,random,settings,meta,data,transient,settings,build
ClusterStateDiffIT -> private MetaData randomMetaDataSettings(MetaData metaData);1525248068;Randomly updates persistent or transient settings of the given metadata;private MetaData randomMetaDataSettings(MetaData metaData) {_        if (randomBoolean()) {_            return MetaData.builder(metaData).persistentSettings(randomSettings(metaData.persistentSettings())).build()__        } else {_            return MetaData.builder(metaData).transientSettings(randomSettings(metaData.transientSettings())).build()__        }_    };randomly,updates,persistent,or,transient,settings,of,the,given,metadata;private,meta,data,random,meta,data,settings,meta,data,meta,data,if,random,boolean,return,meta,data,builder,meta,data,persistent,settings,random,settings,meta,data,persistent,settings,build,else,return,meta,data,builder,meta,data,transient,settings,random,settings,meta,data,transient,settings,build
ClusterStateDiffIT -> private MetaData randomMetaDataSettings(MetaData metaData);1540847035;Randomly updates persistent or transient settings of the given metadata;private MetaData randomMetaDataSettings(MetaData metaData) {_        if (randomBoolean()) {_            return MetaData.builder(metaData).persistentSettings(randomSettings(metaData.persistentSettings())).build()__        } else {_            return MetaData.builder(metaData).transientSettings(randomSettings(metaData.transientSettings())).build()__        }_    };randomly,updates,persistent,or,transient,settings,of,the,given,metadata;private,meta,data,random,meta,data,settings,meta,data,meta,data,if,random,boolean,return,meta,data,builder,meta,data,persistent,settings,random,settings,meta,data,persistent,settings,build,else,return,meta,data,builder,meta,data,transient,settings,random,settings,meta,data,transient,settings,build
ClusterStateDiffIT -> private MetaData randomMetaDataSettings(MetaData metaData);1544081506;Randomly updates persistent or transient settings of the given metadata;private MetaData randomMetaDataSettings(MetaData metaData) {_        if (randomBoolean()) {_            return MetaData.builder(metaData).persistentSettings(randomSettings(metaData.persistentSettings())).build()__        } else {_            return MetaData.builder(metaData).transientSettings(randomSettings(metaData.transientSettings())).build()__        }_    };randomly,updates,persistent,or,transient,settings,of,the,given,metadata;private,meta,data,random,meta,data,settings,meta,data,meta,data,if,random,boolean,return,meta,data,builder,meta,data,persistent,settings,random,settings,meta,data,persistent,settings,build,else,return,meta,data,builder,meta,data,transient,settings,random,settings,meta,data,transient,settings,build
ClusterStateDiffIT -> private MetaData randomMetaDataSettings(MetaData metaData);1544783963;Randomly updates persistent or transient settings of the given metadata;private MetaData randomMetaDataSettings(MetaData metaData) {_        if (randomBoolean()) {_            return MetaData.builder(metaData).persistentSettings(randomSettings(metaData.persistentSettings())).build()__        } else {_            return MetaData.builder(metaData).transientSettings(randomSettings(metaData.transientSettings())).build()__        }_    };randomly,updates,persistent,or,transient,settings,of,the,given,metadata;private,meta,data,random,meta,data,settings,meta,data,meta,data,if,random,boolean,return,meta,data,builder,meta,data,persistent,settings,random,settings,meta,data,persistent,settings,build,else,return,meta,data,builder,meta,data,transient,settings,random,settings,meta,data,transient,settings,build
ClusterStateDiffIT -> private MetaData randomMetaDataSettings(MetaData metaData);1549356476;Randomly updates persistent or transient settings of the given metadata;private MetaData randomMetaDataSettings(MetaData metaData) {_        if (randomBoolean()) {_            return MetaData.builder(metaData).persistentSettings(randomSettings(metaData.persistentSettings())).build()__        } else {_            return MetaData.builder(metaData).transientSettings(randomSettings(metaData.transientSettings())).build()__        }_    };randomly,updates,persistent,or,transient,settings,of,the,given,metadata;private,meta,data,random,meta,data,settings,meta,data,meta,data,if,random,boolean,return,meta,data,builder,meta,data,persistent,settings,random,settings,meta,data,persistent,settings,build,else,return,meta,data,builder,meta,data,transient,settings,random,settings,meta,data,transient,settings,build
ClusterStateDiffIT -> RandomClusterPart -> T randomChange(T part)_;1524684173;Makes random modifications to the part;T randomChange(T part)_;makes,random,modifications,to,the,part;t,random,change,t,part
ClusterStateDiffIT -> RandomClusterPart -> T randomChange(T part)_;1525248068;Makes random modifications to the part;T randomChange(T part)_;makes,random,modifications,to,the,part;t,random,change,t,part
ClusterStateDiffIT -> RandomClusterPart -> T randomChange(T part)_;1540847035;Makes random modifications to the part;T randomChange(T part)_;makes,random,modifications,to,the,part;t,random,change,t,part
ClusterStateDiffIT -> RandomClusterPart -> T randomChange(T part)_;1544081506;Makes random modifications to the part;T randomChange(T part)_;makes,random,modifications,to,the,part;t,random,change,t,part
ClusterStateDiffIT -> RandomClusterPart -> T randomChange(T part)_;1544783963;Makes random modifications to the part;T randomChange(T part)_;makes,random,modifications,to,the,part;t,random,change,t,part
ClusterStateDiffIT -> RandomClusterPart -> T randomChange(T part)_;1549356476;Makes random modifications to the part;T randomChange(T part)_;makes,random,modifications,to,the,part;t,random,change,t,part
ClusterStateDiffIT -> private IndexRoutingTable randomChangeToIndexRoutingTable(IndexRoutingTable original, String[] nodes);1524684173;Randomly updates index routing table in the cluster state;private IndexRoutingTable randomChangeToIndexRoutingTable(IndexRoutingTable original, String[] nodes) {_        IndexRoutingTable.Builder builder = IndexRoutingTable.builder(original.getIndex())__        for (ObjectCursor<IndexShardRoutingTable> indexShardRoutingTable :  original.shards().values()) {_            Set<String> availableNodes = Sets.newHashSet(nodes)__            for (ShardRouting shardRouting : indexShardRoutingTable.value.shards()) {_                availableNodes.remove(shardRouting.currentNodeId())__                if (shardRouting.relocating()) {_                    availableNodes.remove(shardRouting.relocatingNodeId())__                }_            }__            for (ShardRouting shardRouting : indexShardRoutingTable.value.shards()) {_                final ShardRouting updatedShardRouting = randomChange(shardRouting, availableNodes)__                availableNodes.remove(updatedShardRouting.currentNodeId())__                if (shardRouting.relocating()) {_                    availableNodes.remove(updatedShardRouting.relocatingNodeId())__                }_                builder.addShard(updatedShardRouting)__            }_        }_        return builder.build()__    };randomly,updates,index,routing,table,in,the,cluster,state;private,index,routing,table,random,change,to,index,routing,table,index,routing,table,original,string,nodes,index,routing,table,builder,builder,index,routing,table,builder,original,get,index,for,object,cursor,index,shard,routing,table,index,shard,routing,table,original,shards,values,set,string,available,nodes,sets,new,hash,set,nodes,for,shard,routing,shard,routing,index,shard,routing,table,value,shards,available,nodes,remove,shard,routing,current,node,id,if,shard,routing,relocating,available,nodes,remove,shard,routing,relocating,node,id,for,shard,routing,shard,routing,index,shard,routing,table,value,shards,final,shard,routing,updated,shard,routing,random,change,shard,routing,available,nodes,available,nodes,remove,updated,shard,routing,current,node,id,if,shard,routing,relocating,available,nodes,remove,updated,shard,routing,relocating,node,id,builder,add,shard,updated,shard,routing,return,builder,build
ClusterStateDiffIT -> private IndexRoutingTable randomChangeToIndexRoutingTable(IndexRoutingTable original, String[] nodes);1525248068;Randomly updates index routing table in the cluster state;private IndexRoutingTable randomChangeToIndexRoutingTable(IndexRoutingTable original, String[] nodes) {_        IndexRoutingTable.Builder builder = IndexRoutingTable.builder(original.getIndex())__        for (ObjectCursor<IndexShardRoutingTable> indexShardRoutingTable :  original.shards().values()) {_            Set<String> availableNodes = Sets.newHashSet(nodes)__            for (ShardRouting shardRouting : indexShardRoutingTable.value.shards()) {_                availableNodes.remove(shardRouting.currentNodeId())__                if (shardRouting.relocating()) {_                    availableNodes.remove(shardRouting.relocatingNodeId())__                }_            }__            for (ShardRouting shardRouting : indexShardRoutingTable.value.shards()) {_                final ShardRouting updatedShardRouting = randomChange(shardRouting, availableNodes)__                availableNodes.remove(updatedShardRouting.currentNodeId())__                if (shardRouting.relocating()) {_                    availableNodes.remove(updatedShardRouting.relocatingNodeId())__                }_                builder.addShard(updatedShardRouting)__            }_        }_        return builder.build()__    };randomly,updates,index,routing,table,in,the,cluster,state;private,index,routing,table,random,change,to,index,routing,table,index,routing,table,original,string,nodes,index,routing,table,builder,builder,index,routing,table,builder,original,get,index,for,object,cursor,index,shard,routing,table,index,shard,routing,table,original,shards,values,set,string,available,nodes,sets,new,hash,set,nodes,for,shard,routing,shard,routing,index,shard,routing,table,value,shards,available,nodes,remove,shard,routing,current,node,id,if,shard,routing,relocating,available,nodes,remove,shard,routing,relocating,node,id,for,shard,routing,shard,routing,index,shard,routing,table,value,shards,final,shard,routing,updated,shard,routing,random,change,shard,routing,available,nodes,available,nodes,remove,updated,shard,routing,current,node,id,if,shard,routing,relocating,available,nodes,remove,updated,shard,routing,relocating,node,id,builder,add,shard,updated,shard,routing,return,builder,build
ClusterStateDiffIT -> private IndexRoutingTable randomChangeToIndexRoutingTable(IndexRoutingTable original, String[] nodes);1540847035;Randomly updates index routing table in the cluster state;private IndexRoutingTable randomChangeToIndexRoutingTable(IndexRoutingTable original, String[] nodes) {_        IndexRoutingTable.Builder builder = IndexRoutingTable.builder(original.getIndex())__        for (ObjectCursor<IndexShardRoutingTable> indexShardRoutingTable :  original.shards().values()) {_            Set<String> availableNodes = Sets.newHashSet(nodes)__            for (ShardRouting shardRouting : indexShardRoutingTable.value.shards()) {_                availableNodes.remove(shardRouting.currentNodeId())__                if (shardRouting.relocating()) {_                    availableNodes.remove(shardRouting.relocatingNodeId())__                }_            }__            for (ShardRouting shardRouting : indexShardRoutingTable.value.shards()) {_                final ShardRouting updatedShardRouting = randomChange(shardRouting, availableNodes)__                availableNodes.remove(updatedShardRouting.currentNodeId())__                if (shardRouting.relocating()) {_                    availableNodes.remove(updatedShardRouting.relocatingNodeId())__                }_                builder.addShard(updatedShardRouting)__            }_        }_        return builder.build()__    };randomly,updates,index,routing,table,in,the,cluster,state;private,index,routing,table,random,change,to,index,routing,table,index,routing,table,original,string,nodes,index,routing,table,builder,builder,index,routing,table,builder,original,get,index,for,object,cursor,index,shard,routing,table,index,shard,routing,table,original,shards,values,set,string,available,nodes,sets,new,hash,set,nodes,for,shard,routing,shard,routing,index,shard,routing,table,value,shards,available,nodes,remove,shard,routing,current,node,id,if,shard,routing,relocating,available,nodes,remove,shard,routing,relocating,node,id,for,shard,routing,shard,routing,index,shard,routing,table,value,shards,final,shard,routing,updated,shard,routing,random,change,shard,routing,available,nodes,available,nodes,remove,updated,shard,routing,current,node,id,if,shard,routing,relocating,available,nodes,remove,updated,shard,routing,relocating,node,id,builder,add,shard,updated,shard,routing,return,builder,build
ClusterStateDiffIT -> private IndexRoutingTable randomChangeToIndexRoutingTable(IndexRoutingTable original, String[] nodes);1544081506;Randomly updates index routing table in the cluster state;private IndexRoutingTable randomChangeToIndexRoutingTable(IndexRoutingTable original, String[] nodes) {_        IndexRoutingTable.Builder builder = IndexRoutingTable.builder(original.getIndex())__        for (ObjectCursor<IndexShardRoutingTable> indexShardRoutingTable :  original.shards().values()) {_            Set<String> availableNodes = Sets.newHashSet(nodes)__            for (ShardRouting shardRouting : indexShardRoutingTable.value.shards()) {_                availableNodes.remove(shardRouting.currentNodeId())__                if (shardRouting.relocating()) {_                    availableNodes.remove(shardRouting.relocatingNodeId())__                }_            }__            for (ShardRouting shardRouting : indexShardRoutingTable.value.shards()) {_                final ShardRouting updatedShardRouting = randomChange(shardRouting, availableNodes)__                availableNodes.remove(updatedShardRouting.currentNodeId())__                if (shardRouting.relocating()) {_                    availableNodes.remove(updatedShardRouting.relocatingNodeId())__                }_                builder.addShard(updatedShardRouting)__            }_        }_        return builder.build()__    };randomly,updates,index,routing,table,in,the,cluster,state;private,index,routing,table,random,change,to,index,routing,table,index,routing,table,original,string,nodes,index,routing,table,builder,builder,index,routing,table,builder,original,get,index,for,object,cursor,index,shard,routing,table,index,shard,routing,table,original,shards,values,set,string,available,nodes,sets,new,hash,set,nodes,for,shard,routing,shard,routing,index,shard,routing,table,value,shards,available,nodes,remove,shard,routing,current,node,id,if,shard,routing,relocating,available,nodes,remove,shard,routing,relocating,node,id,for,shard,routing,shard,routing,index,shard,routing,table,value,shards,final,shard,routing,updated,shard,routing,random,change,shard,routing,available,nodes,available,nodes,remove,updated,shard,routing,current,node,id,if,shard,routing,relocating,available,nodes,remove,updated,shard,routing,relocating,node,id,builder,add,shard,updated,shard,routing,return,builder,build
ClusterStateDiffIT -> private IndexRoutingTable randomChangeToIndexRoutingTable(IndexRoutingTable original, String[] nodes);1544783963;Randomly updates index routing table in the cluster state;private IndexRoutingTable randomChangeToIndexRoutingTable(IndexRoutingTable original, String[] nodes) {_        IndexRoutingTable.Builder builder = IndexRoutingTable.builder(original.getIndex())__        for (ObjectCursor<IndexShardRoutingTable> indexShardRoutingTable :  original.shards().values()) {_            Set<String> availableNodes = Sets.newHashSet(nodes)__            for (ShardRouting shardRouting : indexShardRoutingTable.value.shards()) {_                availableNodes.remove(shardRouting.currentNodeId())__                if (shardRouting.relocating()) {_                    availableNodes.remove(shardRouting.relocatingNodeId())__                }_            }__            for (ShardRouting shardRouting : indexShardRoutingTable.value.shards()) {_                final ShardRouting updatedShardRouting = randomChange(shardRouting, availableNodes)__                availableNodes.remove(updatedShardRouting.currentNodeId())__                if (shardRouting.relocating()) {_                    availableNodes.remove(updatedShardRouting.relocatingNodeId())__                }_                builder.addShard(updatedShardRouting)__            }_        }_        return builder.build()__    };randomly,updates,index,routing,table,in,the,cluster,state;private,index,routing,table,random,change,to,index,routing,table,index,routing,table,original,string,nodes,index,routing,table,builder,builder,index,routing,table,builder,original,get,index,for,object,cursor,index,shard,routing,table,index,shard,routing,table,original,shards,values,set,string,available,nodes,sets,new,hash,set,nodes,for,shard,routing,shard,routing,index,shard,routing,table,value,shards,available,nodes,remove,shard,routing,current,node,id,if,shard,routing,relocating,available,nodes,remove,shard,routing,relocating,node,id,for,shard,routing,shard,routing,index,shard,routing,table,value,shards,final,shard,routing,updated,shard,routing,random,change,shard,routing,available,nodes,available,nodes,remove,updated,shard,routing,current,node,id,if,shard,routing,relocating,available,nodes,remove,updated,shard,routing,relocating,node,id,builder,add,shard,updated,shard,routing,return,builder,build
ClusterStateDiffIT -> private IndexRoutingTable randomChangeToIndexRoutingTable(IndexRoutingTable original, String[] nodes);1549356476;Randomly updates index routing table in the cluster state;private IndexRoutingTable randomChangeToIndexRoutingTable(IndexRoutingTable original, String[] nodes) {_        IndexRoutingTable.Builder builder = IndexRoutingTable.builder(original.getIndex())__        for (ObjectCursor<IndexShardRoutingTable> indexShardRoutingTable :  original.shards().values()) {_            Set<String> availableNodes = Sets.newHashSet(nodes)__            for (ShardRouting shardRouting : indexShardRoutingTable.value.shards()) {_                availableNodes.remove(shardRouting.currentNodeId())__                if (shardRouting.relocating()) {_                    availableNodes.remove(shardRouting.relocatingNodeId())__                }_            }__            for (ShardRouting shardRouting : indexShardRoutingTable.value.shards()) {_                final ShardRouting updatedShardRouting = randomChange(shardRouting, availableNodes)__                availableNodes.remove(updatedShardRouting.currentNodeId())__                if (shardRouting.relocating()) {_                    availableNodes.remove(updatedShardRouting.relocatingNodeId())__                }_                builder.addShard(updatedShardRouting)__            }_        }_        return builder.build()__    };randomly,updates,index,routing,table,in,the,cluster,state;private,index,routing,table,random,change,to,index,routing,table,index,routing,table,original,string,nodes,index,routing,table,builder,builder,index,routing,table,builder,original,get,index,for,object,cursor,index,shard,routing,table,index,shard,routing,table,original,shards,values,set,string,available,nodes,sets,new,hash,set,nodes,for,shard,routing,shard,routing,index,shard,routing,table,value,shards,available,nodes,remove,shard,routing,current,node,id,if,shard,routing,relocating,available,nodes,remove,shard,routing,relocating,node,id,for,shard,routing,shard,routing,index,shard,routing,table,value,shards,final,shard,routing,updated,shard,routing,random,change,shard,routing,available,nodes,available,nodes,remove,updated,shard,routing,current,node,id,if,shard,routing,relocating,available,nodes,remove,updated,shard,routing,relocating,node,id,builder,add,shard,updated,shard,routing,return,builder,build
ClusterStateDiffIT -> private IndexRoutingTable randomIndexRoutingTable(String index, String[] nodeIds);1524684173;Randomly updates index routing table in the cluster state;private IndexRoutingTable randomIndexRoutingTable(String index, String[] nodeIds) {_        IndexRoutingTable.Builder builder = IndexRoutingTable.builder(new Index(index, "_na_"))__        int shardCount = randomInt(10)___        for (int i = 0_ i < shardCount_ i++) {_            IndexShardRoutingTable.Builder indexShard = new IndexShardRoutingTable.Builder(new ShardId(index, "_na_", i))__            int replicaCount = randomIntBetween(1, 10)__            Set<String> availableNodeIds = Sets.newHashSet(nodeIds)__            for (int j = 0_ j < replicaCount_ j++) {_                UnassignedInfo unassignedInfo = null__                if (randomInt(5) == 1) {_                    unassignedInfo = new UnassignedInfo(randomReason(), randomAlphaOfLength(10))__                }_                if (availableNodeIds.isEmpty()) {_                    break__                }_                String nodeId = randomFrom(availableNodeIds)__                availableNodeIds.remove(nodeId)__                indexShard.addShard(_                        TestShardRouting.newShardRouting(index, i, nodeId, null, j == 0,_                                ShardRoutingState.fromValue((byte) randomIntBetween(2, 3)), unassignedInfo))__            }_            builder.addIndexShard(indexShard.build())__        }_        return builder.build()__    };randomly,updates,index,routing,table,in,the,cluster,state;private,index,routing,table,random,index,routing,table,string,index,string,node,ids,index,routing,table,builder,builder,index,routing,table,builder,new,index,index,int,shard,count,random,int,10,for,int,i,0,i,shard,count,i,index,shard,routing,table,builder,index,shard,new,index,shard,routing,table,builder,new,shard,id,index,i,int,replica,count,random,int,between,1,10,set,string,available,node,ids,sets,new,hash,set,node,ids,for,int,j,0,j,replica,count,j,unassigned,info,unassigned,info,null,if,random,int,5,1,unassigned,info,new,unassigned,info,random,reason,random,alpha,of,length,10,if,available,node,ids,is,empty,break,string,node,id,random,from,available,node,ids,available,node,ids,remove,node,id,index,shard,add,shard,test,shard,routing,new,shard,routing,index,i,node,id,null,j,0,shard,routing,state,from,value,byte,random,int,between,2,3,unassigned,info,builder,add,index,shard,index,shard,build,return,builder,build
ClusterStateDiffIT -> private IndexRoutingTable randomIndexRoutingTable(String index, String[] nodeIds);1525248068;Randomly updates index routing table in the cluster state;private IndexRoutingTable randomIndexRoutingTable(String index, String[] nodeIds) {_        IndexRoutingTable.Builder builder = IndexRoutingTable.builder(new Index(index, "_na_"))__        int shardCount = randomInt(10)___        for (int i = 0_ i < shardCount_ i++) {_            IndexShardRoutingTable.Builder indexShard = new IndexShardRoutingTable.Builder(new ShardId(index, "_na_", i))__            int replicaCount = randomIntBetween(1, 10)__            Set<String> availableNodeIds = Sets.newHashSet(nodeIds)__            for (int j = 0_ j < replicaCount_ j++) {_                UnassignedInfo unassignedInfo = null__                if (randomInt(5) == 1) {_                    unassignedInfo = new UnassignedInfo(randomReason(), randomAlphaOfLength(10))__                }_                if (availableNodeIds.isEmpty()) {_                    break__                }_                String nodeId = randomFrom(availableNodeIds)__                availableNodeIds.remove(nodeId)__                indexShard.addShard(_                        TestShardRouting.newShardRouting(index, i, nodeId, null, j == 0,_                                ShardRoutingState.fromValue((byte) randomIntBetween(2, 3)), unassignedInfo))__            }_            builder.addIndexShard(indexShard.build())__        }_        return builder.build()__    };randomly,updates,index,routing,table,in,the,cluster,state;private,index,routing,table,random,index,routing,table,string,index,string,node,ids,index,routing,table,builder,builder,index,routing,table,builder,new,index,index,int,shard,count,random,int,10,for,int,i,0,i,shard,count,i,index,shard,routing,table,builder,index,shard,new,index,shard,routing,table,builder,new,shard,id,index,i,int,replica,count,random,int,between,1,10,set,string,available,node,ids,sets,new,hash,set,node,ids,for,int,j,0,j,replica,count,j,unassigned,info,unassigned,info,null,if,random,int,5,1,unassigned,info,new,unassigned,info,random,reason,random,alpha,of,length,10,if,available,node,ids,is,empty,break,string,node,id,random,from,available,node,ids,available,node,ids,remove,node,id,index,shard,add,shard,test,shard,routing,new,shard,routing,index,i,node,id,null,j,0,shard,routing,state,from,value,byte,random,int,between,2,3,unassigned,info,builder,add,index,shard,index,shard,build,return,builder,build
ClusterStateDiffIT -> private IndexRoutingTable randomIndexRoutingTable(String index, String[] nodeIds);1540847035;Randomly updates index routing table in the cluster state;private IndexRoutingTable randomIndexRoutingTable(String index, String[] nodeIds) {_        IndexRoutingTable.Builder builder = IndexRoutingTable.builder(new Index(index, "_na_"))__        int shardCount = randomInt(10)___        for (int i = 0_ i < shardCount_ i++) {_            IndexShardRoutingTable.Builder indexShard = new IndexShardRoutingTable.Builder(new ShardId(index, "_na_", i))__            int replicaCount = randomIntBetween(1, 10)__            Set<String> availableNodeIds = Sets.newHashSet(nodeIds)__            for (int j = 0_ j < replicaCount_ j++) {_                UnassignedInfo unassignedInfo = null__                if (randomInt(5) == 1) {_                    unassignedInfo = new UnassignedInfo(randomReason(), randomAlphaOfLength(10))__                }_                if (availableNodeIds.isEmpty()) {_                    break__                }_                String nodeId = randomFrom(availableNodeIds)__                availableNodeIds.remove(nodeId)__                indexShard.addShard(_                        TestShardRouting.newShardRouting(index, i, nodeId, null, j == 0,_                                ShardRoutingState.fromValue((byte) randomIntBetween(2, 3)), unassignedInfo))__            }_            builder.addIndexShard(indexShard.build())__        }_        return builder.build()__    };randomly,updates,index,routing,table,in,the,cluster,state;private,index,routing,table,random,index,routing,table,string,index,string,node,ids,index,routing,table,builder,builder,index,routing,table,builder,new,index,index,int,shard,count,random,int,10,for,int,i,0,i,shard,count,i,index,shard,routing,table,builder,index,shard,new,index,shard,routing,table,builder,new,shard,id,index,i,int,replica,count,random,int,between,1,10,set,string,available,node,ids,sets,new,hash,set,node,ids,for,int,j,0,j,replica,count,j,unassigned,info,unassigned,info,null,if,random,int,5,1,unassigned,info,new,unassigned,info,random,reason,random,alpha,of,length,10,if,available,node,ids,is,empty,break,string,node,id,random,from,available,node,ids,available,node,ids,remove,node,id,index,shard,add,shard,test,shard,routing,new,shard,routing,index,i,node,id,null,j,0,shard,routing,state,from,value,byte,random,int,between,2,3,unassigned,info,builder,add,index,shard,index,shard,build,return,builder,build
ClusterStateDiffIT -> private IndexRoutingTable randomIndexRoutingTable(String index, String[] nodeIds);1544081506;Randomly updates index routing table in the cluster state;private IndexRoutingTable randomIndexRoutingTable(String index, String[] nodeIds) {_        IndexRoutingTable.Builder builder = IndexRoutingTable.builder(new Index(index, "_na_"))__        int shardCount = randomInt(10)___        for (int i = 0_ i < shardCount_ i++) {_            IndexShardRoutingTable.Builder indexShard = new IndexShardRoutingTable.Builder(new ShardId(index, "_na_", i))__            int replicaCount = randomIntBetween(1, 10)__            Set<String> availableNodeIds = Sets.newHashSet(nodeIds)__            for (int j = 0_ j < replicaCount_ j++) {_                UnassignedInfo unassignedInfo = null__                if (randomInt(5) == 1) {_                    unassignedInfo = new UnassignedInfo(randomReason(), randomAlphaOfLength(10))__                }_                if (availableNodeIds.isEmpty()) {_                    break__                }_                String nodeId = randomFrom(availableNodeIds)__                availableNodeIds.remove(nodeId)__                indexShard.addShard(_                        TestShardRouting.newShardRouting(index, i, nodeId, null, j == 0,_                                ShardRoutingState.fromValue((byte) randomIntBetween(2, 3)), unassignedInfo))__            }_            builder.addIndexShard(indexShard.build())__        }_        return builder.build()__    };randomly,updates,index,routing,table,in,the,cluster,state;private,index,routing,table,random,index,routing,table,string,index,string,node,ids,index,routing,table,builder,builder,index,routing,table,builder,new,index,index,int,shard,count,random,int,10,for,int,i,0,i,shard,count,i,index,shard,routing,table,builder,index,shard,new,index,shard,routing,table,builder,new,shard,id,index,i,int,replica,count,random,int,between,1,10,set,string,available,node,ids,sets,new,hash,set,node,ids,for,int,j,0,j,replica,count,j,unassigned,info,unassigned,info,null,if,random,int,5,1,unassigned,info,new,unassigned,info,random,reason,random,alpha,of,length,10,if,available,node,ids,is,empty,break,string,node,id,random,from,available,node,ids,available,node,ids,remove,node,id,index,shard,add,shard,test,shard,routing,new,shard,routing,index,i,node,id,null,j,0,shard,routing,state,from,value,byte,random,int,between,2,3,unassigned,info,builder,add,index,shard,index,shard,build,return,builder,build
ClusterStateDiffIT -> private IndexRoutingTable randomIndexRoutingTable(String index, String[] nodeIds);1544783963;Randomly updates index routing table in the cluster state;private IndexRoutingTable randomIndexRoutingTable(String index, String[] nodeIds) {_        IndexRoutingTable.Builder builder = IndexRoutingTable.builder(new Index(index, "_na_"))__        int shardCount = randomInt(10)___        for (int i = 0_ i < shardCount_ i++) {_            IndexShardRoutingTable.Builder indexShard = new IndexShardRoutingTable.Builder(new ShardId(index, "_na_", i))__            int replicaCount = randomIntBetween(1, 10)__            Set<String> availableNodeIds = Sets.newHashSet(nodeIds)__            for (int j = 0_ j < replicaCount_ j++) {_                UnassignedInfo unassignedInfo = null__                if (randomInt(5) == 1) {_                    unassignedInfo = new UnassignedInfo(randomReason(), randomAlphaOfLength(10))__                }_                if (availableNodeIds.isEmpty()) {_                    break__                }_                String nodeId = randomFrom(availableNodeIds)__                availableNodeIds.remove(nodeId)__                indexShard.addShard(_                        TestShardRouting.newShardRouting(index, i, nodeId, null, j == 0,_                                ShardRoutingState.fromValue((byte) randomIntBetween(2, 3)), unassignedInfo))__            }_            builder.addIndexShard(indexShard.build())__        }_        return builder.build()__    };randomly,updates,index,routing,table,in,the,cluster,state;private,index,routing,table,random,index,routing,table,string,index,string,node,ids,index,routing,table,builder,builder,index,routing,table,builder,new,index,index,int,shard,count,random,int,10,for,int,i,0,i,shard,count,i,index,shard,routing,table,builder,index,shard,new,index,shard,routing,table,builder,new,shard,id,index,i,int,replica,count,random,int,between,1,10,set,string,available,node,ids,sets,new,hash,set,node,ids,for,int,j,0,j,replica,count,j,unassigned,info,unassigned,info,null,if,random,int,5,1,unassigned,info,new,unassigned,info,random,reason,random,alpha,of,length,10,if,available,node,ids,is,empty,break,string,node,id,random,from,available,node,ids,available,node,ids,remove,node,id,index,shard,add,shard,test,shard,routing,new,shard,routing,index,i,node,id,null,j,0,shard,routing,state,from,value,byte,random,int,between,2,3,unassigned,info,builder,add,index,shard,index,shard,build,return,builder,build
ClusterStateDiffIT -> private IndexRoutingTable randomIndexRoutingTable(String index, String[] nodeIds);1549356476;Randomly updates index routing table in the cluster state;private IndexRoutingTable randomIndexRoutingTable(String index, String[] nodeIds) {_        IndexRoutingTable.Builder builder = IndexRoutingTable.builder(new Index(index, "_na_"))__        int shardCount = randomInt(10)___        for (int i = 0_ i < shardCount_ i++) {_            IndexShardRoutingTable.Builder indexShard = new IndexShardRoutingTable.Builder(new ShardId(index, "_na_", i))__            int replicaCount = randomIntBetween(1, 10)__            Set<String> availableNodeIds = Sets.newHashSet(nodeIds)__            for (int j = 0_ j < replicaCount_ j++) {_                UnassignedInfo unassignedInfo = null__                if (randomInt(5) == 1) {_                    unassignedInfo = new UnassignedInfo(randomReason(), randomAlphaOfLength(10))__                }_                if (availableNodeIds.isEmpty()) {_                    break__                }_                String nodeId = randomFrom(availableNodeIds)__                availableNodeIds.remove(nodeId)__                indexShard.addShard(_                        TestShardRouting.newShardRouting(index, i, nodeId, null, j == 0,_                                ShardRoutingState.fromValue((byte) randomIntBetween(2, 3)), unassignedInfo))__            }_            builder.addIndexShard(indexShard.build())__        }_        return builder.build()__    };randomly,updates,index,routing,table,in,the,cluster,state;private,index,routing,table,random,index,routing,table,string,index,string,node,ids,index,routing,table,builder,builder,index,routing,table,builder,new,index,index,int,shard,count,random,int,10,for,int,i,0,i,shard,count,i,index,shard,routing,table,builder,index,shard,new,index,shard,routing,table,builder,new,shard,id,index,i,int,replica,count,random,int,between,1,10,set,string,available,node,ids,sets,new,hash,set,node,ids,for,int,j,0,j,replica,count,j,unassigned,info,unassigned,info,null,if,random,int,5,1,unassigned,info,new,unassigned,info,random,reason,random,alpha,of,length,10,if,available,node,ids,is,empty,break,string,node,id,random,from,available,node,ids,available,node,ids,remove,node,id,index,shard,add,shard,test,shard,routing,new,shard,routing,index,i,node,id,null,j,0,shard,routing,state,from,value,byte,random,int,between,2,3,unassigned,info,builder,add,index,shard,index,shard,build,return,builder,build
ClusterStateDiffIT -> private MetaData randomIndices(MetaData metaData);1524684173;Randomly add, deletes or updates indices in the metadata;private MetaData randomIndices(MetaData metaData) {_        return randomParts(metaData, "index", new RandomPart<IndexMetaData>() {__            @Override_            public ImmutableOpenMap<String, IndexMetaData> parts(MetaData metaData) {_                return metaData.indices()__            }__            @Override_            public MetaData.Builder put(MetaData.Builder builder, IndexMetaData part) {_                return builder.put(part, true)__            }__            @Override_            public MetaData.Builder remove(MetaData.Builder builder, String name) {_                return builder.remove(name)__            }__            @Override_            public IndexMetaData randomCreate(String name) {_                IndexMetaData.Builder builder = IndexMetaData.builder(name)__                Settings.Builder settingsBuilder = Settings.builder()__                setRandomIndexSettings(random(), settingsBuilder)__                settingsBuilder.put(randomSettings(Settings.EMPTY)).put(IndexMetaData.SETTING_VERSION_CREATED, randomVersion(random()))__                builder.settings(settingsBuilder)__                builder.numberOfShards(randomIntBetween(1, 10)).numberOfReplicas(randomInt(10))__                int aliasCount = randomInt(10)__                for (int i = 0_ i < aliasCount_ i++) {_                    builder.putAlias(randomAlias())__                }_                return builder.build()__            }__            @Override_            public IndexMetaData randomChange(IndexMetaData part) {_                IndexMetaData.Builder builder = IndexMetaData.builder(part)__                switch (randomIntBetween(0, 2)) {_                    case 0:_                        builder.settings(Settings.builder().put(part.getSettings()).put(randomSettings(Settings.EMPTY)))__                        break__                    case 1:_                        if (randomBoolean() && part.getAliases().isEmpty() == false) {_                            builder.removeAlias(randomFrom(part.getAliases().keys().toArray(String.class)))__                        } else {_                            builder.putAlias(AliasMetaData.builder(randomAlphaOfLength(10)))__                        }_                        break__                    case 2:_                        builder.settings(Settings.builder().put(part.getSettings()).put(IndexMetaData.SETTING_INDEX_UUID, UUIDs.randomBase64UUID()))__                        break__                    default:_                        throw new IllegalArgumentException("Shouldn't be here")__                }_                return builder.build()__            }_        })__    };randomly,add,deletes,or,updates,indices,in,the,metadata;private,meta,data,random,indices,meta,data,meta,data,return,random,parts,meta,data,index,new,random,part,index,meta,data,override,public,immutable,open,map,string,index,meta,data,parts,meta,data,meta,data,return,meta,data,indices,override,public,meta,data,builder,put,meta,data,builder,builder,index,meta,data,part,return,builder,put,part,true,override,public,meta,data,builder,remove,meta,data,builder,builder,string,name,return,builder,remove,name,override,public,index,meta,data,random,create,string,name,index,meta,data,builder,builder,index,meta,data,builder,name,settings,builder,settings,builder,settings,builder,set,random,index,settings,random,settings,builder,settings,builder,put,random,settings,settings,empty,put,index,meta,data,random,version,random,builder,settings,settings,builder,builder,number,of,shards,random,int,between,1,10,number,of,replicas,random,int,10,int,alias,count,random,int,10,for,int,i,0,i,alias,count,i,builder,put,alias,random,alias,return,builder,build,override,public,index,meta,data,random,change,index,meta,data,part,index,meta,data,builder,builder,index,meta,data,builder,part,switch,random,int,between,0,2,case,0,builder,settings,settings,builder,put,part,get,settings,put,random,settings,settings,empty,break,case,1,if,random,boolean,part,get,aliases,is,empty,false,builder,remove,alias,random,from,part,get,aliases,keys,to,array,string,class,else,builder,put,alias,alias,meta,data,builder,random,alpha,of,length,10,break,case,2,builder,settings,settings,builder,put,part,get,settings,put,index,meta,data,uuids,random,base64uuid,break,default,throw,new,illegal,argument,exception,shouldn,t,be,here,return,builder,build
ClusterStateDiffIT -> private MetaData randomIndices(MetaData metaData);1525248068;Randomly add, deletes or updates indices in the metadata;private MetaData randomIndices(MetaData metaData) {_        return randomParts(metaData, "index", new RandomPart<IndexMetaData>() {__            @Override_            public ImmutableOpenMap<String, IndexMetaData> parts(MetaData metaData) {_                return metaData.indices()__            }__            @Override_            public MetaData.Builder put(MetaData.Builder builder, IndexMetaData part) {_                return builder.put(part, true)__            }__            @Override_            public MetaData.Builder remove(MetaData.Builder builder, String name) {_                return builder.remove(name)__            }__            @Override_            public IndexMetaData randomCreate(String name) {_                IndexMetaData.Builder builder = IndexMetaData.builder(name)__                Settings.Builder settingsBuilder = Settings.builder()__                setRandomIndexSettings(random(), settingsBuilder)__                settingsBuilder.put(randomSettings(Settings.EMPTY)).put(IndexMetaData.SETTING_VERSION_CREATED, randomVersion(random()))__                builder.settings(settingsBuilder)__                builder.numberOfShards(randomIntBetween(1, 10)).numberOfReplicas(randomInt(10))__                int aliasCount = randomInt(10)__                for (int i = 0_ i < aliasCount_ i++) {_                    builder.putAlias(randomAlias())__                }_                return builder.build()__            }__            @Override_            public IndexMetaData randomChange(IndexMetaData part) {_                IndexMetaData.Builder builder = IndexMetaData.builder(part)__                switch (randomIntBetween(0, 2)) {_                    case 0:_                        builder.settings(Settings.builder().put(part.getSettings()).put(randomSettings(Settings.EMPTY)))__                        break__                    case 1:_                        if (randomBoolean() && part.getAliases().isEmpty() == false) {_                            builder.removeAlias(randomFrom(part.getAliases().keys().toArray(String.class)))__                        } else {_                            builder.putAlias(AliasMetaData.builder(randomAlphaOfLength(10)))__                        }_                        break__                    case 2:_                        builder.settings(Settings.builder().put(part.getSettings()).put(IndexMetaData.SETTING_INDEX_UUID, UUIDs.randomBase64UUID()))__                        break__                    default:_                        throw new IllegalArgumentException("Shouldn't be here")__                }_                return builder.build()__            }_        })__    };randomly,add,deletes,or,updates,indices,in,the,metadata;private,meta,data,random,indices,meta,data,meta,data,return,random,parts,meta,data,index,new,random,part,index,meta,data,override,public,immutable,open,map,string,index,meta,data,parts,meta,data,meta,data,return,meta,data,indices,override,public,meta,data,builder,put,meta,data,builder,builder,index,meta,data,part,return,builder,put,part,true,override,public,meta,data,builder,remove,meta,data,builder,builder,string,name,return,builder,remove,name,override,public,index,meta,data,random,create,string,name,index,meta,data,builder,builder,index,meta,data,builder,name,settings,builder,settings,builder,settings,builder,set,random,index,settings,random,settings,builder,settings,builder,put,random,settings,settings,empty,put,index,meta,data,random,version,random,builder,settings,settings,builder,builder,number,of,shards,random,int,between,1,10,number,of,replicas,random,int,10,int,alias,count,random,int,10,for,int,i,0,i,alias,count,i,builder,put,alias,random,alias,return,builder,build,override,public,index,meta,data,random,change,index,meta,data,part,index,meta,data,builder,builder,index,meta,data,builder,part,switch,random,int,between,0,2,case,0,builder,settings,settings,builder,put,part,get,settings,put,random,settings,settings,empty,break,case,1,if,random,boolean,part,get,aliases,is,empty,false,builder,remove,alias,random,from,part,get,aliases,keys,to,array,string,class,else,builder,put,alias,alias,meta,data,builder,random,alpha,of,length,10,break,case,2,builder,settings,settings,builder,put,part,get,settings,put,index,meta,data,uuids,random,base64uuid,break,default,throw,new,illegal,argument,exception,shouldn,t,be,here,return,builder,build
ClusterStateDiffIT -> private MetaData randomIndices(MetaData metaData);1540847035;Randomly add, deletes or updates indices in the metadata;private MetaData randomIndices(MetaData metaData) {_        return randomParts(metaData, "index", new RandomPart<IndexMetaData>() {__            @Override_            public ImmutableOpenMap<String, IndexMetaData> parts(MetaData metaData) {_                return metaData.indices()__            }__            @Override_            public MetaData.Builder put(MetaData.Builder builder, IndexMetaData part) {_                return builder.put(part, true)__            }__            @Override_            public MetaData.Builder remove(MetaData.Builder builder, String name) {_                return builder.remove(name)__            }__            @Override_            public IndexMetaData randomCreate(String name) {_                IndexMetaData.Builder builder = IndexMetaData.builder(name)__                Settings.Builder settingsBuilder = Settings.builder()__                setRandomIndexSettings(random(), settingsBuilder)__                settingsBuilder.put(randomSettings(Settings.EMPTY)).put(IndexMetaData.SETTING_VERSION_CREATED, randomVersion(random()))__                builder.settings(settingsBuilder)__                builder.numberOfShards(randomIntBetween(1, 10)).numberOfReplicas(randomInt(10))__                int aliasCount = randomInt(10)__                for (int i = 0_ i < aliasCount_ i++) {_                    builder.putAlias(randomAlias())__                }_                return builder.build()__            }__            @Override_            public IndexMetaData randomChange(IndexMetaData part) {_                IndexMetaData.Builder builder = IndexMetaData.builder(part)__                switch (randomIntBetween(0, 2)) {_                    case 0:_                        builder.settings(Settings.builder().put(part.getSettings()).put(randomSettings(Settings.EMPTY)))__                        break__                    case 1:_                        if (randomBoolean() && part.getAliases().isEmpty() == false) {_                            builder.removeAlias(randomFrom(part.getAliases().keys().toArray(String.class)))__                        } else {_                            builder.putAlias(AliasMetaData.builder(randomAlphaOfLength(10)))__                        }_                        break__                    case 2:_                        builder.settings(Settings.builder().put(part.getSettings())_                            .put(IndexMetaData.SETTING_INDEX_UUID, UUIDs.randomBase64UUID()))__                        break__                    default:_                        throw new IllegalArgumentException("Shouldn't be here")__                }_                return builder.build()__            }_        })__    };randomly,add,deletes,or,updates,indices,in,the,metadata;private,meta,data,random,indices,meta,data,meta,data,return,random,parts,meta,data,index,new,random,part,index,meta,data,override,public,immutable,open,map,string,index,meta,data,parts,meta,data,meta,data,return,meta,data,indices,override,public,meta,data,builder,put,meta,data,builder,builder,index,meta,data,part,return,builder,put,part,true,override,public,meta,data,builder,remove,meta,data,builder,builder,string,name,return,builder,remove,name,override,public,index,meta,data,random,create,string,name,index,meta,data,builder,builder,index,meta,data,builder,name,settings,builder,settings,builder,settings,builder,set,random,index,settings,random,settings,builder,settings,builder,put,random,settings,settings,empty,put,index,meta,data,random,version,random,builder,settings,settings,builder,builder,number,of,shards,random,int,between,1,10,number,of,replicas,random,int,10,int,alias,count,random,int,10,for,int,i,0,i,alias,count,i,builder,put,alias,random,alias,return,builder,build,override,public,index,meta,data,random,change,index,meta,data,part,index,meta,data,builder,builder,index,meta,data,builder,part,switch,random,int,between,0,2,case,0,builder,settings,settings,builder,put,part,get,settings,put,random,settings,settings,empty,break,case,1,if,random,boolean,part,get,aliases,is,empty,false,builder,remove,alias,random,from,part,get,aliases,keys,to,array,string,class,else,builder,put,alias,alias,meta,data,builder,random,alpha,of,length,10,break,case,2,builder,settings,settings,builder,put,part,get,settings,put,index,meta,data,uuids,random,base64uuid,break,default,throw,new,illegal,argument,exception,shouldn,t,be,here,return,builder,build
ClusterStateDiffIT -> private MetaData randomIndices(MetaData metaData);1544081506;Randomly add, deletes or updates indices in the metadata;private MetaData randomIndices(MetaData metaData) {_        return randomParts(metaData, "index", new RandomPart<IndexMetaData>() {__            @Override_            public ImmutableOpenMap<String, IndexMetaData> parts(MetaData metaData) {_                return metaData.indices()__            }__            @Override_            public MetaData.Builder put(MetaData.Builder builder, IndexMetaData part) {_                return builder.put(part, true)__            }__            @Override_            public MetaData.Builder remove(MetaData.Builder builder, String name) {_                return builder.remove(name)__            }__            @Override_            public IndexMetaData randomCreate(String name) {_                IndexMetaData.Builder builder = IndexMetaData.builder(name)__                Settings.Builder settingsBuilder = Settings.builder()__                setRandomIndexSettings(random(), settingsBuilder)__                settingsBuilder.put(randomSettings(Settings.EMPTY)).put(IndexMetaData.SETTING_VERSION_CREATED, randomVersion(random()))__                builder.settings(settingsBuilder)__                builder.numberOfShards(randomIntBetween(1, 10)).numberOfReplicas(randomInt(10))__                int aliasCount = randomInt(10)__                for (int i = 0_ i < aliasCount_ i++) {_                    builder.putAlias(randomAlias())__                }_                return builder.build()__            }__            @Override_            public IndexMetaData randomChange(IndexMetaData part) {_                IndexMetaData.Builder builder = IndexMetaData.builder(part)__                switch (randomIntBetween(0, 2)) {_                    case 0:_                        builder.settings(Settings.builder().put(part.getSettings()).put(randomSettings(Settings.EMPTY)))__                        break__                    case 1:_                        if (randomBoolean() && part.getAliases().isEmpty() == false) {_                            builder.removeAlias(randomFrom(part.getAliases().keys().toArray(String.class)))__                        } else {_                            builder.putAlias(AliasMetaData.builder(randomAlphaOfLength(10)))__                        }_                        break__                    case 2:_                        builder.settings(Settings.builder().put(part.getSettings())_                            .put(IndexMetaData.SETTING_INDEX_UUID, UUIDs.randomBase64UUID()))__                        break__                    default:_                        throw new IllegalArgumentException("Shouldn't be here")__                }_                return builder.build()__            }_        })__    };randomly,add,deletes,or,updates,indices,in,the,metadata;private,meta,data,random,indices,meta,data,meta,data,return,random,parts,meta,data,index,new,random,part,index,meta,data,override,public,immutable,open,map,string,index,meta,data,parts,meta,data,meta,data,return,meta,data,indices,override,public,meta,data,builder,put,meta,data,builder,builder,index,meta,data,part,return,builder,put,part,true,override,public,meta,data,builder,remove,meta,data,builder,builder,string,name,return,builder,remove,name,override,public,index,meta,data,random,create,string,name,index,meta,data,builder,builder,index,meta,data,builder,name,settings,builder,settings,builder,settings,builder,set,random,index,settings,random,settings,builder,settings,builder,put,random,settings,settings,empty,put,index,meta,data,random,version,random,builder,settings,settings,builder,builder,number,of,shards,random,int,between,1,10,number,of,replicas,random,int,10,int,alias,count,random,int,10,for,int,i,0,i,alias,count,i,builder,put,alias,random,alias,return,builder,build,override,public,index,meta,data,random,change,index,meta,data,part,index,meta,data,builder,builder,index,meta,data,builder,part,switch,random,int,between,0,2,case,0,builder,settings,settings,builder,put,part,get,settings,put,random,settings,settings,empty,break,case,1,if,random,boolean,part,get,aliases,is,empty,false,builder,remove,alias,random,from,part,get,aliases,keys,to,array,string,class,else,builder,put,alias,alias,meta,data,builder,random,alpha,of,length,10,break,case,2,builder,settings,settings,builder,put,part,get,settings,put,index,meta,data,uuids,random,base64uuid,break,default,throw,new,illegal,argument,exception,shouldn,t,be,here,return,builder,build
ClusterStateDiffIT -> private MetaData randomIndices(MetaData metaData);1544783963;Randomly add, deletes or updates indices in the metadata;private MetaData randomIndices(MetaData metaData) {_        return randomParts(metaData, "index", new RandomPart<IndexMetaData>() {__            @Override_            public ImmutableOpenMap<String, IndexMetaData> parts(MetaData metaData) {_                return metaData.indices()__            }__            @Override_            public MetaData.Builder put(MetaData.Builder builder, IndexMetaData part) {_                return builder.put(part, true)__            }__            @Override_            public MetaData.Builder remove(MetaData.Builder builder, String name) {_                return builder.remove(name)__            }__            @Override_            public IndexMetaData randomCreate(String name) {_                IndexMetaData.Builder builder = IndexMetaData.builder(name)__                Settings.Builder settingsBuilder = Settings.builder()__                setRandomIndexSettings(random(), settingsBuilder)__                settingsBuilder.put(randomSettings(Settings.EMPTY)).put(IndexMetaData.SETTING_VERSION_CREATED, randomVersion(random()))__                builder.settings(settingsBuilder)__                builder.numberOfShards(randomIntBetween(1, 10)).numberOfReplicas(randomInt(10))__                int aliasCount = randomInt(10)__                for (int i = 0_ i < aliasCount_ i++) {_                    builder.putAlias(randomAlias())__                }_                return builder.build()__            }__            @Override_            public IndexMetaData randomChange(IndexMetaData part) {_                IndexMetaData.Builder builder = IndexMetaData.builder(part)__                switch (randomIntBetween(0, 2)) {_                    case 0:_                        builder.settings(Settings.builder().put(part.getSettings()).put(randomSettings(Settings.EMPTY)))__                        break__                    case 1:_                        if (randomBoolean() && part.getAliases().isEmpty() == false) {_                            builder.removeAlias(randomFrom(part.getAliases().keys().toArray(String.class)))__                        } else {_                            builder.putAlias(AliasMetaData.builder(randomAlphaOfLength(10)))__                        }_                        break__                    case 2:_                        builder.settings(Settings.builder().put(part.getSettings())_                            .put(IndexMetaData.SETTING_INDEX_UUID, UUIDs.randomBase64UUID()))__                        break__                    default:_                        throw new IllegalArgumentException("Shouldn't be here")__                }_                return builder.build()__            }_        })__    };randomly,add,deletes,or,updates,indices,in,the,metadata;private,meta,data,random,indices,meta,data,meta,data,return,random,parts,meta,data,index,new,random,part,index,meta,data,override,public,immutable,open,map,string,index,meta,data,parts,meta,data,meta,data,return,meta,data,indices,override,public,meta,data,builder,put,meta,data,builder,builder,index,meta,data,part,return,builder,put,part,true,override,public,meta,data,builder,remove,meta,data,builder,builder,string,name,return,builder,remove,name,override,public,index,meta,data,random,create,string,name,index,meta,data,builder,builder,index,meta,data,builder,name,settings,builder,settings,builder,settings,builder,set,random,index,settings,random,settings,builder,settings,builder,put,random,settings,settings,empty,put,index,meta,data,random,version,random,builder,settings,settings,builder,builder,number,of,shards,random,int,between,1,10,number,of,replicas,random,int,10,int,alias,count,random,int,10,for,int,i,0,i,alias,count,i,builder,put,alias,random,alias,return,builder,build,override,public,index,meta,data,random,change,index,meta,data,part,index,meta,data,builder,builder,index,meta,data,builder,part,switch,random,int,between,0,2,case,0,builder,settings,settings,builder,put,part,get,settings,put,random,settings,settings,empty,break,case,1,if,random,boolean,part,get,aliases,is,empty,false,builder,remove,alias,random,from,part,get,aliases,keys,to,array,string,class,else,builder,put,alias,alias,meta,data,builder,random,alpha,of,length,10,break,case,2,builder,settings,settings,builder,put,part,get,settings,put,index,meta,data,uuids,random,base64uuid,break,default,throw,new,illegal,argument,exception,shouldn,t,be,here,return,builder,build
ClusterStateDiffIT -> private MetaData randomIndices(MetaData metaData);1549356476;Randomly add, deletes or updates indices in the metadata;private MetaData randomIndices(MetaData metaData) {_        return randomParts(metaData, "index", new RandomPart<IndexMetaData>() {__            @Override_            public ImmutableOpenMap<String, IndexMetaData> parts(MetaData metaData) {_                return metaData.indices()__            }__            @Override_            public MetaData.Builder put(MetaData.Builder builder, IndexMetaData part) {_                return builder.put(part, true)__            }__            @Override_            public MetaData.Builder remove(MetaData.Builder builder, String name) {_                return builder.remove(name)__            }__            @Override_            public IndexMetaData randomCreate(String name) {_                IndexMetaData.Builder builder = IndexMetaData.builder(name)__                Settings.Builder settingsBuilder = Settings.builder()__                setRandomIndexSettings(random(), settingsBuilder)__                settingsBuilder.put(randomSettings(Settings.EMPTY)).put(IndexMetaData.SETTING_VERSION_CREATED, randomVersion(random()))__                builder.settings(settingsBuilder)__                builder.numberOfShards(randomIntBetween(1, 10)).numberOfReplicas(randomInt(10))__                int aliasCount = randomInt(10)__                for (int i = 0_ i < aliasCount_ i++) {_                    builder.putAlias(randomAlias())__                }_                return builder.build()__            }__            @Override_            public IndexMetaData randomChange(IndexMetaData part) {_                IndexMetaData.Builder builder = IndexMetaData.builder(part)__                switch (randomIntBetween(0, 2)) {_                    case 0:_                        builder.settings(Settings.builder().put(part.getSettings()).put(randomSettings(Settings.EMPTY)))__                        break__                    case 1:_                        if (randomBoolean() && part.getAliases().isEmpty() == false) {_                            builder.removeAlias(randomFrom(part.getAliases().keys().toArray(String.class)))__                        } else {_                            builder.putAlias(AliasMetaData.builder(randomAlphaOfLength(10)))__                        }_                        break__                    case 2:_                        builder.settings(Settings.builder().put(part.getSettings())_                            .put(IndexMetaData.SETTING_INDEX_UUID, UUIDs.randomBase64UUID()))__                        break__                    default:_                        throw new IllegalArgumentException("Shouldn't be here")__                }_                return builder.build()__            }_        })__    };randomly,add,deletes,or,updates,indices,in,the,metadata;private,meta,data,random,indices,meta,data,meta,data,return,random,parts,meta,data,index,new,random,part,index,meta,data,override,public,immutable,open,map,string,index,meta,data,parts,meta,data,meta,data,return,meta,data,indices,override,public,meta,data,builder,put,meta,data,builder,builder,index,meta,data,part,return,builder,put,part,true,override,public,meta,data,builder,remove,meta,data,builder,builder,string,name,return,builder,remove,name,override,public,index,meta,data,random,create,string,name,index,meta,data,builder,builder,index,meta,data,builder,name,settings,builder,settings,builder,settings,builder,set,random,index,settings,random,settings,builder,settings,builder,put,random,settings,settings,empty,put,index,meta,data,random,version,random,builder,settings,settings,builder,builder,number,of,shards,random,int,between,1,10,number,of,replicas,random,int,10,int,alias,count,random,int,10,for,int,i,0,i,alias,count,i,builder,put,alias,random,alias,return,builder,build,override,public,index,meta,data,random,change,index,meta,data,part,index,meta,data,builder,builder,index,meta,data,builder,part,switch,random,int,between,0,2,case,0,builder,settings,settings,builder,put,part,get,settings,put,random,settings,settings,empty,break,case,1,if,random,boolean,part,get,aliases,is,empty,false,builder,remove,alias,random,from,part,get,aliases,keys,to,array,string,class,else,builder,put,alias,alias,meta,data,builder,random,alpha,of,length,10,break,case,2,builder,settings,settings,builder,put,part,get,settings,put,index,meta,data,uuids,random,base64uuid,break,default,throw,new,illegal,argument,exception,shouldn,t,be,here,return,builder,build
ClusterStateDiffIT -> RandomPart -> MetaData.Builder put(MetaData.Builder builder, T part)_;1524684173;Puts the part back into metadata;MetaData.Builder put(MetaData.Builder builder, T part)_;puts,the,part,back,into,metadata;meta,data,builder,put,meta,data,builder,builder,t,part
ClusterStateDiffIT -> RandomPart -> MetaData.Builder put(MetaData.Builder builder, T part)_;1525248068;Puts the part back into metadata;MetaData.Builder put(MetaData.Builder builder, T part)_;puts,the,part,back,into,metadata;meta,data,builder,put,meta,data,builder,builder,t,part
ClusterStateDiffIT -> RandomPart -> MetaData.Builder put(MetaData.Builder builder, T part)_;1540847035;Puts the part back into metadata;MetaData.Builder put(MetaData.Builder builder, T part)_;puts,the,part,back,into,metadata;meta,data,builder,put,meta,data,builder,builder,t,part
ClusterStateDiffIT -> RandomPart -> MetaData.Builder put(MetaData.Builder builder, T part)_;1544081506;Puts the part back into metadata;MetaData.Builder put(MetaData.Builder builder, T part)_;puts,the,part,back,into,metadata;meta,data,builder,put,meta,data,builder,builder,t,part
ClusterStateDiffIT -> RandomPart -> MetaData.Builder put(MetaData.Builder builder, T part)_;1544783963;Puts the part back into metadata;MetaData.Builder put(MetaData.Builder builder, T part)_;puts,the,part,back,into,metadata;meta,data,builder,put,meta,data,builder,builder,t,part
ClusterStateDiffIT -> RandomPart -> MetaData.Builder put(MetaData.Builder builder, T part)_;1549356476;Puts the part back into metadata;MetaData.Builder put(MetaData.Builder builder, T part)_;puts,the,part,back,into,metadata;meta,data,builder,put,meta,data,builder,builder,t,part
ClusterStateDiffIT -> RandomClusterPart -> T randomCreate(String name)_;1524684173;Returns a random part with the specified name;T randomCreate(String name)_;returns,a,random,part,with,the,specified,name;t,random,create,string,name
ClusterStateDiffIT -> RandomClusterPart -> T randomCreate(String name)_;1525248068;Returns a random part with the specified name;T randomCreate(String name)_;returns,a,random,part,with,the,specified,name;t,random,create,string,name
ClusterStateDiffIT -> RandomClusterPart -> T randomCreate(String name)_;1540847035;Returns a random part with the specified name;T randomCreate(String name)_;returns,a,random,part,with,the,specified,name;t,random,create,string,name
ClusterStateDiffIT -> RandomClusterPart -> T randomCreate(String name)_;1544081506;Returns a random part with the specified name;T randomCreate(String name)_;returns,a,random,part,with,the,specified,name;t,random,create,string,name
ClusterStateDiffIT -> RandomClusterPart -> T randomCreate(String name)_;1544783963;Returns a random part with the specified name;T randomCreate(String name)_;returns,a,random,part,with,the,specified,name;t,random,create,string,name
ClusterStateDiffIT -> RandomClusterPart -> T randomCreate(String name)_;1549356476;Returns a random part with the specified name;T randomCreate(String name)_;returns,a,random,part,with,the,specified,name;t,random,create,string,name
ClusterStateDiffIT -> private <T> ClusterState randomClusterStateParts(ClusterState clusterState, String prefix, RandomClusterPart<T> randomPart);1524684173;Takes an existing cluster state and randomly adds, removes or updates a cluster state part using randomPart generator._If a new part is added the prefix value is used as a prefix of randomly generated part name.;private <T> ClusterState randomClusterStateParts(ClusterState clusterState, String prefix, RandomClusterPart<T> randomPart) {_        ClusterState.Builder builder = ClusterState.builder(clusterState)__        ImmutableOpenMap<String, T> parts = randomPart.parts(clusterState)__        int partCount = parts.size()__        if (partCount > 0) {_            List<String> randomParts = randomSubsetOf(randomInt(partCount - 1), randomPart.parts(clusterState).keys().toArray(String.class))__            for (String part : randomParts) {_                if (randomBoolean()) {_                    randomPart.remove(builder, part)__                } else {_                    randomPart.put(builder, randomPart.randomChange(parts.get(part)))__                }_            }_        }_        int additionalPartCount = randomIntBetween(1, 20)__        for (int i = 0_ i < additionalPartCount_ i++) {_            String name = randomName(prefix)__            randomPart.put(builder, randomPart.randomCreate(name))__        }_        return builder.build()__    };takes,an,existing,cluster,state,and,randomly,adds,removes,or,updates,a,cluster,state,part,using,random,part,generator,if,a,new,part,is,added,the,prefix,value,is,used,as,a,prefix,of,randomly,generated,part,name;private,t,cluster,state,random,cluster,state,parts,cluster,state,cluster,state,string,prefix,random,cluster,part,t,random,part,cluster,state,builder,builder,cluster,state,builder,cluster,state,immutable,open,map,string,t,parts,random,part,parts,cluster,state,int,part,count,parts,size,if,part,count,0,list,string,random,parts,random,subset,of,random,int,part,count,1,random,part,parts,cluster,state,keys,to,array,string,class,for,string,part,random,parts,if,random,boolean,random,part,remove,builder,part,else,random,part,put,builder,random,part,random,change,parts,get,part,int,additional,part,count,random,int,between,1,20,for,int,i,0,i,additional,part,count,i,string,name,random,name,prefix,random,part,put,builder,random,part,random,create,name,return,builder,build
ClusterStateDiffIT -> private <T> ClusterState randomClusterStateParts(ClusterState clusterState, String prefix, RandomClusterPart<T> randomPart);1525248068;Takes an existing cluster state and randomly adds, removes or updates a cluster state part using randomPart generator._If a new part is added the prefix value is used as a prefix of randomly generated part name.;private <T> ClusterState randomClusterStateParts(ClusterState clusterState, String prefix, RandomClusterPart<T> randomPart) {_        ClusterState.Builder builder = ClusterState.builder(clusterState)__        ImmutableOpenMap<String, T> parts = randomPart.parts(clusterState)__        int partCount = parts.size()__        if (partCount > 0) {_            List<String> randomParts = randomSubsetOf(randomInt(partCount - 1), randomPart.parts(clusterState).keys().toArray(String.class))__            for (String part : randomParts) {_                if (randomBoolean()) {_                    randomPart.remove(builder, part)__                } else {_                    randomPart.put(builder, randomPart.randomChange(parts.get(part)))__                }_            }_        }_        int additionalPartCount = randomIntBetween(1, 20)__        for (int i = 0_ i < additionalPartCount_ i++) {_            String name = randomName(prefix)__            randomPart.put(builder, randomPart.randomCreate(name))__        }_        return builder.build()__    };takes,an,existing,cluster,state,and,randomly,adds,removes,or,updates,a,cluster,state,part,using,random,part,generator,if,a,new,part,is,added,the,prefix,value,is,used,as,a,prefix,of,randomly,generated,part,name;private,t,cluster,state,random,cluster,state,parts,cluster,state,cluster,state,string,prefix,random,cluster,part,t,random,part,cluster,state,builder,builder,cluster,state,builder,cluster,state,immutable,open,map,string,t,parts,random,part,parts,cluster,state,int,part,count,parts,size,if,part,count,0,list,string,random,parts,random,subset,of,random,int,part,count,1,random,part,parts,cluster,state,keys,to,array,string,class,for,string,part,random,parts,if,random,boolean,random,part,remove,builder,part,else,random,part,put,builder,random,part,random,change,parts,get,part,int,additional,part,count,random,int,between,1,20,for,int,i,0,i,additional,part,count,i,string,name,random,name,prefix,random,part,put,builder,random,part,random,create,name,return,builder,build
ClusterStateDiffIT -> private <T> ClusterState randomClusterStateParts(ClusterState clusterState, String prefix, RandomClusterPart<T> randomPart);1540847035;Takes an existing cluster state and randomly adds, removes or updates a cluster state part using randomPart generator._If a new part is added the prefix value is used as a prefix of randomly generated part name.;private <T> ClusterState randomClusterStateParts(ClusterState clusterState, String prefix, RandomClusterPart<T> randomPart) {_        ClusterState.Builder builder = ClusterState.builder(clusterState)__        ImmutableOpenMap<String, T> parts = randomPart.parts(clusterState)__        int partCount = parts.size()__        if (partCount > 0) {_            List<String> randomParts = randomSubsetOf(randomInt(partCount - 1),_                randomPart.parts(clusterState).keys().toArray(String.class))__            for (String part : randomParts) {_                if (randomBoolean()) {_                    randomPart.remove(builder, part)__                } else {_                    randomPart.put(builder, randomPart.randomChange(parts.get(part)))__                }_            }_        }_        int additionalPartCount = randomIntBetween(1, 20)__        for (int i = 0_ i < additionalPartCount_ i++) {_            String name = randomName(prefix)__            randomPart.put(builder, randomPart.randomCreate(name))__        }_        return builder.build()__    };takes,an,existing,cluster,state,and,randomly,adds,removes,or,updates,a,cluster,state,part,using,random,part,generator,if,a,new,part,is,added,the,prefix,value,is,used,as,a,prefix,of,randomly,generated,part,name;private,t,cluster,state,random,cluster,state,parts,cluster,state,cluster,state,string,prefix,random,cluster,part,t,random,part,cluster,state,builder,builder,cluster,state,builder,cluster,state,immutable,open,map,string,t,parts,random,part,parts,cluster,state,int,part,count,parts,size,if,part,count,0,list,string,random,parts,random,subset,of,random,int,part,count,1,random,part,parts,cluster,state,keys,to,array,string,class,for,string,part,random,parts,if,random,boolean,random,part,remove,builder,part,else,random,part,put,builder,random,part,random,change,parts,get,part,int,additional,part,count,random,int,between,1,20,for,int,i,0,i,additional,part,count,i,string,name,random,name,prefix,random,part,put,builder,random,part,random,create,name,return,builder,build
ClusterStateDiffIT -> private <T> ClusterState randomClusterStateParts(ClusterState clusterState, String prefix, RandomClusterPart<T> randomPart);1544081506;Takes an existing cluster state and randomly adds, removes or updates a cluster state part using randomPart generator._If a new part is added the prefix value is used as a prefix of randomly generated part name.;private <T> ClusterState randomClusterStateParts(ClusterState clusterState, String prefix, RandomClusterPart<T> randomPart) {_        ClusterState.Builder builder = ClusterState.builder(clusterState)__        ImmutableOpenMap<String, T> parts = randomPart.parts(clusterState)__        int partCount = parts.size()__        if (partCount > 0) {_            List<String> randomParts = randomSubsetOf(randomInt(partCount - 1),_                randomPart.parts(clusterState).keys().toArray(String.class))__            for (String part : randomParts) {_                if (randomBoolean()) {_                    randomPart.remove(builder, part)__                } else {_                    randomPart.put(builder, randomPart.randomChange(parts.get(part)))__                }_            }_        }_        int additionalPartCount = randomIntBetween(1, 20)__        for (int i = 0_ i < additionalPartCount_ i++) {_            String name = randomName(prefix)__            randomPart.put(builder, randomPart.randomCreate(name))__        }_        return builder.build()__    };takes,an,existing,cluster,state,and,randomly,adds,removes,or,updates,a,cluster,state,part,using,random,part,generator,if,a,new,part,is,added,the,prefix,value,is,used,as,a,prefix,of,randomly,generated,part,name;private,t,cluster,state,random,cluster,state,parts,cluster,state,cluster,state,string,prefix,random,cluster,part,t,random,part,cluster,state,builder,builder,cluster,state,builder,cluster,state,immutable,open,map,string,t,parts,random,part,parts,cluster,state,int,part,count,parts,size,if,part,count,0,list,string,random,parts,random,subset,of,random,int,part,count,1,random,part,parts,cluster,state,keys,to,array,string,class,for,string,part,random,parts,if,random,boolean,random,part,remove,builder,part,else,random,part,put,builder,random,part,random,change,parts,get,part,int,additional,part,count,random,int,between,1,20,for,int,i,0,i,additional,part,count,i,string,name,random,name,prefix,random,part,put,builder,random,part,random,create,name,return,builder,build
ClusterStateDiffIT -> private <T> ClusterState randomClusterStateParts(ClusterState clusterState, String prefix, RandomClusterPart<T> randomPart);1544783963;Takes an existing cluster state and randomly adds, removes or updates a cluster state part using randomPart generator._If a new part is added the prefix value is used as a prefix of randomly generated part name.;private <T> ClusterState randomClusterStateParts(ClusterState clusterState, String prefix, RandomClusterPart<T> randomPart) {_        ClusterState.Builder builder = ClusterState.builder(clusterState)__        ImmutableOpenMap<String, T> parts = randomPart.parts(clusterState)__        int partCount = parts.size()__        if (partCount > 0) {_            List<String> randomParts = randomSubsetOf(randomInt(partCount - 1),_                randomPart.parts(clusterState).keys().toArray(String.class))__            for (String part : randomParts) {_                if (randomBoolean()) {_                    randomPart.remove(builder, part)__                } else {_                    randomPart.put(builder, randomPart.randomChange(parts.get(part)))__                }_            }_        }_        int additionalPartCount = randomIntBetween(1, 20)__        for (int i = 0_ i < additionalPartCount_ i++) {_            String name = randomName(prefix)__            randomPart.put(builder, randomPart.randomCreate(name))__        }_        return builder.build()__    };takes,an,existing,cluster,state,and,randomly,adds,removes,or,updates,a,cluster,state,part,using,random,part,generator,if,a,new,part,is,added,the,prefix,value,is,used,as,a,prefix,of,randomly,generated,part,name;private,t,cluster,state,random,cluster,state,parts,cluster,state,cluster,state,string,prefix,random,cluster,part,t,random,part,cluster,state,builder,builder,cluster,state,builder,cluster,state,immutable,open,map,string,t,parts,random,part,parts,cluster,state,int,part,count,parts,size,if,part,count,0,list,string,random,parts,random,subset,of,random,int,part,count,1,random,part,parts,cluster,state,keys,to,array,string,class,for,string,part,random,parts,if,random,boolean,random,part,remove,builder,part,else,random,part,put,builder,random,part,random,change,parts,get,part,int,additional,part,count,random,int,between,1,20,for,int,i,0,i,additional,part,count,i,string,name,random,name,prefix,random,part,put,builder,random,part,random,create,name,return,builder,build
ClusterStateDiffIT -> private <T> ClusterState randomClusterStateParts(ClusterState clusterState, String prefix, RandomClusterPart<T> randomPart);1549356476;Takes an existing cluster state and randomly adds, removes or updates a cluster state part using randomPart generator._If a new part is added the prefix value is used as a prefix of randomly generated part name.;private <T> ClusterState randomClusterStateParts(ClusterState clusterState, String prefix, RandomClusterPart<T> randomPart) {_        ClusterState.Builder builder = ClusterState.builder(clusterState)__        ImmutableOpenMap<String, T> parts = randomPart.parts(clusterState)__        int partCount = parts.size()__        if (partCount > 0) {_            List<String> randomParts = randomSubsetOf(randomInt(partCount - 1),_                randomPart.parts(clusterState).keys().toArray(String.class))__            for (String part : randomParts) {_                if (randomBoolean()) {_                    randomPart.remove(builder, part)__                } else {_                    randomPart.put(builder, randomPart.randomChange(parts.get(part)))__                }_            }_        }_        int additionalPartCount = randomIntBetween(1, 20)__        for (int i = 0_ i < additionalPartCount_ i++) {_            String name = randomName(prefix)__            randomPart.put(builder, randomPart.randomCreate(name))__        }_        return builder.build()__    };takes,an,existing,cluster,state,and,randomly,adds,removes,or,updates,a,cluster,state,part,using,random,part,generator,if,a,new,part,is,added,the,prefix,value,is,used,as,a,prefix,of,randomly,generated,part,name;private,t,cluster,state,random,cluster,state,parts,cluster,state,cluster,state,string,prefix,random,cluster,part,t,random,part,cluster,state,builder,builder,cluster,state,builder,cluster,state,immutable,open,map,string,t,parts,random,part,parts,cluster,state,int,part,count,parts,size,if,part,count,0,list,string,random,parts,random,subset,of,random,int,part,count,1,random,part,parts,cluster,state,keys,to,array,string,class,for,string,part,random,parts,if,random,boolean,random,part,remove,builder,part,else,random,part,put,builder,random,part,random,change,parts,get,part,int,additional,part,count,random,int,between,1,20,for,int,i,0,i,additional,part,count,i,string,name,random,name,prefix,random,part,put,builder,random,part,random,create,name,return,builder,build
ClusterStateDiffIT -> private ClusterBlock randomGlobalBlock();1524684173;Returns a random global block;private ClusterBlock randomGlobalBlock() {_        switch (randomInt(2)) {_            case 0:_                return DiscoverySettings.NO_MASTER_BLOCK_ALL__            case 1:_                return DiscoverySettings.NO_MASTER_BLOCK_WRITES__            default:_                return GatewayService.STATE_NOT_RECOVERED_BLOCK__        }_    };returns,a,random,global,block;private,cluster,block,random,global,block,switch,random,int,2,case,0,return,discovery,settings,case,1,return,discovery,settings,default,return,gateway,service
ClusterStateDiffIT -> private ClusterBlock randomGlobalBlock();1525248068;Returns a random global block;private ClusterBlock randomGlobalBlock() {_        switch (randomInt(2)) {_            case 0:_                return DiscoverySettings.NO_MASTER_BLOCK_ALL__            case 1:_                return DiscoverySettings.NO_MASTER_BLOCK_WRITES__            default:_                return GatewayService.STATE_NOT_RECOVERED_BLOCK__        }_    };returns,a,random,global,block;private,cluster,block,random,global,block,switch,random,int,2,case,0,return,discovery,settings,case,1,return,discovery,settings,default,return,gateway,service
ClusterStateDiffIT -> private ClusterBlock randomGlobalBlock();1540847035;Returns a random global block;private ClusterBlock randomGlobalBlock() {_        switch (randomInt(2)) {_            case 0:_                return DiscoverySettings.NO_MASTER_BLOCK_ALL__            case 1:_                return DiscoverySettings.NO_MASTER_BLOCK_WRITES__            default:_                return GatewayService.STATE_NOT_RECOVERED_BLOCK__        }_    };returns,a,random,global,block;private,cluster,block,random,global,block,switch,random,int,2,case,0,return,discovery,settings,case,1,return,discovery,settings,default,return,gateway,service
ClusterStateDiffIT -> private ClusterBlock randomGlobalBlock();1544081506;Returns a random global block;private ClusterBlock randomGlobalBlock() {_        switch (randomInt(2)) {_            case 0:_                return DiscoverySettings.NO_MASTER_BLOCK_ALL__            case 1:_                return DiscoverySettings.NO_MASTER_BLOCK_WRITES__            default:_                return GatewayService.STATE_NOT_RECOVERED_BLOCK__        }_    };returns,a,random,global,block;private,cluster,block,random,global,block,switch,random,int,2,case,0,return,discovery,settings,case,1,return,discovery,settings,default,return,gateway,service
ClusterStateDiffIT -> private ClusterBlock randomGlobalBlock();1544783963;Returns a random global block;private ClusterBlock randomGlobalBlock() {_        switch (randomInt(2)) {_            case 0:_                return DiscoverySettings.NO_MASTER_BLOCK_ALL__            case 1:_                return DiscoverySettings.NO_MASTER_BLOCK_WRITES__            default:_                return GatewayService.STATE_NOT_RECOVERED_BLOCK__        }_    };returns,a,random,global,block;private,cluster,block,random,global,block,switch,random,int,2,case,0,return,discovery,settings,case,1,return,discovery,settings,default,return,gateway,service
ClusterStateDiffIT -> private ClusterBlock randomGlobalBlock();1549356476;Returns a random global block;private ClusterBlock randomGlobalBlock() {_        switch (randomInt(2)) {_            case 0:_                return NoMasterBlockService.NO_MASTER_BLOCK_ALL__            case 1:_                return NoMasterBlockService.NO_MASTER_BLOCK_WRITES__            default:_                return GatewayService.STATE_NOT_RECOVERED_BLOCK__        }_    };returns,a,random,global,block;private,cluster,block,random,global,block,switch,random,int,2,case,0,return,no,master,block,service,case,1,return,no,master,block,service,default,return,gateway,service
ClusterStateDiffIT -> RandomPart -> T randomCreate(String name)_;1524684173;Returns a random part with the specified name;T randomCreate(String name)_;returns,a,random,part,with,the,specified,name;t,random,create,string,name
ClusterStateDiffIT -> RandomPart -> T randomCreate(String name)_;1525248068;Returns a random part with the specified name;T randomCreate(String name)_;returns,a,random,part,with,the,specified,name;t,random,create,string,name
ClusterStateDiffIT -> RandomPart -> T randomCreate(String name)_;1540847035;Returns a random part with the specified name;T randomCreate(String name)_;returns,a,random,part,with,the,specified,name;t,random,create,string,name
ClusterStateDiffIT -> RandomPart -> T randomCreate(String name)_;1544081506;Returns a random part with the specified name;T randomCreate(String name)_;returns,a,random,part,with,the,specified,name;t,random,create,string,name
ClusterStateDiffIT -> RandomPart -> T randomCreate(String name)_;1544783963;Returns a random part with the specified name;T randomCreate(String name)_;returns,a,random,part,with,the,specified,name;t,random,create,string,name
ClusterStateDiffIT -> RandomPart -> T randomCreate(String name)_;1549356476;Returns a random part with the specified name;T randomCreate(String name)_;returns,a,random,part,with,the,specified,name;t,random,create,string,name
ClusterStateDiffIT -> private ClusterState.Builder randomRoutingTable(ClusterState clusterState);1524684173;Randomly updates routing table in the cluster state;private ClusterState.Builder randomRoutingTable(ClusterState clusterState) {_        RoutingTable.Builder builder = RoutingTable.builder(clusterState.routingTable())__        int numberOfIndices = clusterState.routingTable().indicesRouting().size()__        if (numberOfIndices > 0) {_            List<String> randomIndices = randomSubsetOf(randomInt(numberOfIndices - 1), clusterState.routingTable().indicesRouting().keys().toArray(String.class))__            for (String index : randomIndices) {_                if (randomBoolean()) {_                    builder.remove(index)__                } else {_                    builder.add(randomChangeToIndexRoutingTable(clusterState.routingTable().indicesRouting().get(index), clusterState.nodes().getNodes().keys().toArray(String.class)))__                }_            }_        }_        int additionalIndexCount = randomIntBetween(1, 20)__        for (int i = 0_ i < additionalIndexCount_ i++) {_            builder.add(randomIndexRoutingTable("index-" + randomInt(), clusterState.nodes().getNodes().keys().toArray(String.class)))__        }_        return ClusterState.builder(clusterState).routingTable(builder.build())__    };randomly,updates,routing,table,in,the,cluster,state;private,cluster,state,builder,random,routing,table,cluster,state,cluster,state,routing,table,builder,builder,routing,table,builder,cluster,state,routing,table,int,number,of,indices,cluster,state,routing,table,indices,routing,size,if,number,of,indices,0,list,string,random,indices,random,subset,of,random,int,number,of,indices,1,cluster,state,routing,table,indices,routing,keys,to,array,string,class,for,string,index,random,indices,if,random,boolean,builder,remove,index,else,builder,add,random,change,to,index,routing,table,cluster,state,routing,table,indices,routing,get,index,cluster,state,nodes,get,nodes,keys,to,array,string,class,int,additional,index,count,random,int,between,1,20,for,int,i,0,i,additional,index,count,i,builder,add,random,index,routing,table,index,random,int,cluster,state,nodes,get,nodes,keys,to,array,string,class,return,cluster,state,builder,cluster,state,routing,table,builder,build
ClusterStateDiffIT -> private ClusterState.Builder randomRoutingTable(ClusterState clusterState);1525248068;Randomly updates routing table in the cluster state;private ClusterState.Builder randomRoutingTable(ClusterState clusterState) {_        RoutingTable.Builder builder = RoutingTable.builder(clusterState.routingTable())__        int numberOfIndices = clusterState.routingTable().indicesRouting().size()__        if (numberOfIndices > 0) {_            List<String> randomIndices = randomSubsetOf(randomInt(numberOfIndices - 1), clusterState.routingTable().indicesRouting().keys().toArray(String.class))__            for (String index : randomIndices) {_                if (randomBoolean()) {_                    builder.remove(index)__                } else {_                    builder.add(randomChangeToIndexRoutingTable(clusterState.routingTable().indicesRouting().get(index), clusterState.nodes().getNodes().keys().toArray(String.class)))__                }_            }_        }_        int additionalIndexCount = randomIntBetween(1, 20)__        for (int i = 0_ i < additionalIndexCount_ i++) {_            builder.add(randomIndexRoutingTable("index-" + randomInt(), clusterState.nodes().getNodes().keys().toArray(String.class)))__        }_        return ClusterState.builder(clusterState).routingTable(builder.build())__    };randomly,updates,routing,table,in,the,cluster,state;private,cluster,state,builder,random,routing,table,cluster,state,cluster,state,routing,table,builder,builder,routing,table,builder,cluster,state,routing,table,int,number,of,indices,cluster,state,routing,table,indices,routing,size,if,number,of,indices,0,list,string,random,indices,random,subset,of,random,int,number,of,indices,1,cluster,state,routing,table,indices,routing,keys,to,array,string,class,for,string,index,random,indices,if,random,boolean,builder,remove,index,else,builder,add,random,change,to,index,routing,table,cluster,state,routing,table,indices,routing,get,index,cluster,state,nodes,get,nodes,keys,to,array,string,class,int,additional,index,count,random,int,between,1,20,for,int,i,0,i,additional,index,count,i,builder,add,random,index,routing,table,index,random,int,cluster,state,nodes,get,nodes,keys,to,array,string,class,return,cluster,state,builder,cluster,state,routing,table,builder,build
ClusterStateDiffIT -> private ClusterState.Builder randomRoutingTable(ClusterState clusterState);1540847035;Randomly updates routing table in the cluster state;private ClusterState.Builder randomRoutingTable(ClusterState clusterState) {_        RoutingTable.Builder builder = RoutingTable.builder(clusterState.routingTable())__        int numberOfIndices = clusterState.routingTable().indicesRouting().size()__        if (numberOfIndices > 0) {_            List<String> randomIndices = randomSubsetOf(randomInt(numberOfIndices - 1),_                clusterState.routingTable().indicesRouting().keys().toArray(String.class))__            for (String index : randomIndices) {_                if (randomBoolean()) {_                    builder.remove(index)__                } else {_                    builder.add(randomChangeToIndexRoutingTable(clusterState.routingTable().indicesRouting().get(index),_                        clusterState.nodes().getNodes().keys().toArray(String.class)))__                }_            }_        }_        int additionalIndexCount = randomIntBetween(1, 20)__        for (int i = 0_ i < additionalIndexCount_ i++) {_            builder.add(randomIndexRoutingTable("index-" + randomInt(),_                clusterState.nodes().getNodes().keys().toArray(String.class)))__        }_        return ClusterState.builder(clusterState).routingTable(builder.build())__    };randomly,updates,routing,table,in,the,cluster,state;private,cluster,state,builder,random,routing,table,cluster,state,cluster,state,routing,table,builder,builder,routing,table,builder,cluster,state,routing,table,int,number,of,indices,cluster,state,routing,table,indices,routing,size,if,number,of,indices,0,list,string,random,indices,random,subset,of,random,int,number,of,indices,1,cluster,state,routing,table,indices,routing,keys,to,array,string,class,for,string,index,random,indices,if,random,boolean,builder,remove,index,else,builder,add,random,change,to,index,routing,table,cluster,state,routing,table,indices,routing,get,index,cluster,state,nodes,get,nodes,keys,to,array,string,class,int,additional,index,count,random,int,between,1,20,for,int,i,0,i,additional,index,count,i,builder,add,random,index,routing,table,index,random,int,cluster,state,nodes,get,nodes,keys,to,array,string,class,return,cluster,state,builder,cluster,state,routing,table,builder,build
ClusterStateDiffIT -> private ClusterState.Builder randomRoutingTable(ClusterState clusterState);1544081506;Randomly updates routing table in the cluster state;private ClusterState.Builder randomRoutingTable(ClusterState clusterState) {_        RoutingTable.Builder builder = RoutingTable.builder(clusterState.routingTable())__        int numberOfIndices = clusterState.routingTable().indicesRouting().size()__        if (numberOfIndices > 0) {_            List<String> randomIndices = randomSubsetOf(randomInt(numberOfIndices - 1),_                clusterState.routingTable().indicesRouting().keys().toArray(String.class))__            for (String index : randomIndices) {_                if (randomBoolean()) {_                    builder.remove(index)__                } else {_                    builder.add(randomChangeToIndexRoutingTable(clusterState.routingTable().indicesRouting().get(index),_                        clusterState.nodes().getNodes().keys().toArray(String.class)))__                }_            }_        }_        int additionalIndexCount = randomIntBetween(1, 20)__        for (int i = 0_ i < additionalIndexCount_ i++) {_            builder.add(randomIndexRoutingTable("index-" + randomInt(),_                clusterState.nodes().getNodes().keys().toArray(String.class)))__        }_        return ClusterState.builder(clusterState).routingTable(builder.build())__    };randomly,updates,routing,table,in,the,cluster,state;private,cluster,state,builder,random,routing,table,cluster,state,cluster,state,routing,table,builder,builder,routing,table,builder,cluster,state,routing,table,int,number,of,indices,cluster,state,routing,table,indices,routing,size,if,number,of,indices,0,list,string,random,indices,random,subset,of,random,int,number,of,indices,1,cluster,state,routing,table,indices,routing,keys,to,array,string,class,for,string,index,random,indices,if,random,boolean,builder,remove,index,else,builder,add,random,change,to,index,routing,table,cluster,state,routing,table,indices,routing,get,index,cluster,state,nodes,get,nodes,keys,to,array,string,class,int,additional,index,count,random,int,between,1,20,for,int,i,0,i,additional,index,count,i,builder,add,random,index,routing,table,index,random,int,cluster,state,nodes,get,nodes,keys,to,array,string,class,return,cluster,state,builder,cluster,state,routing,table,builder,build
ClusterStateDiffIT -> private ClusterState.Builder randomRoutingTable(ClusterState clusterState);1544783963;Randomly updates routing table in the cluster state;private ClusterState.Builder randomRoutingTable(ClusterState clusterState) {_        RoutingTable.Builder builder = RoutingTable.builder(clusterState.routingTable())__        int numberOfIndices = clusterState.routingTable().indicesRouting().size()__        if (numberOfIndices > 0) {_            List<String> randomIndices = randomSubsetOf(randomInt(numberOfIndices - 1),_                clusterState.routingTable().indicesRouting().keys().toArray(String.class))__            for (String index : randomIndices) {_                if (randomBoolean()) {_                    builder.remove(index)__                } else {_                    builder.add(randomChangeToIndexRoutingTable(clusterState.routingTable().indicesRouting().get(index),_                        clusterState.nodes().getNodes().keys().toArray(String.class)))__                }_            }_        }_        int additionalIndexCount = randomIntBetween(1, 20)__        for (int i = 0_ i < additionalIndexCount_ i++) {_            builder.add(randomIndexRoutingTable("index-" + randomInt(),_                clusterState.nodes().getNodes().keys().toArray(String.class)))__        }_        return ClusterState.builder(clusterState).routingTable(builder.build())__    };randomly,updates,routing,table,in,the,cluster,state;private,cluster,state,builder,random,routing,table,cluster,state,cluster,state,routing,table,builder,builder,routing,table,builder,cluster,state,routing,table,int,number,of,indices,cluster,state,routing,table,indices,routing,size,if,number,of,indices,0,list,string,random,indices,random,subset,of,random,int,number,of,indices,1,cluster,state,routing,table,indices,routing,keys,to,array,string,class,for,string,index,random,indices,if,random,boolean,builder,remove,index,else,builder,add,random,change,to,index,routing,table,cluster,state,routing,table,indices,routing,get,index,cluster,state,nodes,get,nodes,keys,to,array,string,class,int,additional,index,count,random,int,between,1,20,for,int,i,0,i,additional,index,count,i,builder,add,random,index,routing,table,index,random,int,cluster,state,nodes,get,nodes,keys,to,array,string,class,return,cluster,state,builder,cluster,state,routing,table,builder,build
ClusterStateDiffIT -> private ClusterState.Builder randomRoutingTable(ClusterState clusterState);1549356476;Randomly updates routing table in the cluster state;private ClusterState.Builder randomRoutingTable(ClusterState clusterState) {_        RoutingTable.Builder builder = RoutingTable.builder(clusterState.routingTable())__        int numberOfIndices = clusterState.routingTable().indicesRouting().size()__        if (numberOfIndices > 0) {_            List<String> randomIndices = randomSubsetOf(randomInt(numberOfIndices - 1),_                clusterState.routingTable().indicesRouting().keys().toArray(String.class))__            for (String index : randomIndices) {_                if (randomBoolean()) {_                    builder.remove(index)__                } else {_                    builder.add(randomChangeToIndexRoutingTable(clusterState.routingTable().indicesRouting().get(index),_                        clusterState.nodes().getNodes().keys().toArray(String.class)))__                }_            }_        }_        int additionalIndexCount = randomIntBetween(1, 20)__        for (int i = 0_ i < additionalIndexCount_ i++) {_            builder.add(randomIndexRoutingTable("index-" + randomInt(),_                clusterState.nodes().getNodes().keys().toArray(String.class)))__        }_        return ClusterState.builder(clusterState).routingTable(builder.build())__    };randomly,updates,routing,table,in,the,cluster,state;private,cluster,state,builder,random,routing,table,cluster,state,cluster,state,routing,table,builder,builder,routing,table,builder,cluster,state,routing,table,int,number,of,indices,cluster,state,routing,table,indices,routing,size,if,number,of,indices,0,list,string,random,indices,random,subset,of,random,int,number,of,indices,1,cluster,state,routing,table,indices,routing,keys,to,array,string,class,for,string,index,random,indices,if,random,boolean,builder,remove,index,else,builder,add,random,change,to,index,routing,table,cluster,state,routing,table,indices,routing,get,index,cluster,state,nodes,get,nodes,keys,to,array,string,class,int,additional,index,count,random,int,between,1,20,for,int,i,0,i,additional,index,count,i,builder,add,random,index,routing,table,index,random,int,cluster,state,nodes,get,nodes,keys,to,array,string,class,return,cluster,state,builder,cluster,state,routing,table,builder,build
ClusterStateDiffIT -> private ClusterState.Builder randomBlocks(ClusterState clusterState);1524684173;Randomly creates or removes cluster blocks;private ClusterState.Builder randomBlocks(ClusterState clusterState) {_        ClusterBlocks.Builder builder = ClusterBlocks.builder().blocks(clusterState.blocks())__        int globalBlocksCount = clusterState.blocks().global().size()__        if (globalBlocksCount > 0) {_            List<ClusterBlock> blocks = randomSubsetOf(randomInt(globalBlocksCount - 1), clusterState.blocks().global().toArray(new ClusterBlock[globalBlocksCount]))__            for (ClusterBlock block : blocks) {_                builder.removeGlobalBlock(block)__            }_        }_        int additionalGlobalBlocksCount = randomIntBetween(1, 3)__        for (int i = 0_ i < additionalGlobalBlocksCount_ i++) {_            builder.addGlobalBlock(randomGlobalBlock())__        }_        return ClusterState.builder(clusterState).blocks(builder)__    };randomly,creates,or,removes,cluster,blocks;private,cluster,state,builder,random,blocks,cluster,state,cluster,state,cluster,blocks,builder,builder,cluster,blocks,builder,blocks,cluster,state,blocks,int,global,blocks,count,cluster,state,blocks,global,size,if,global,blocks,count,0,list,cluster,block,blocks,random,subset,of,random,int,global,blocks,count,1,cluster,state,blocks,global,to,array,new,cluster,block,global,blocks,count,for,cluster,block,block,blocks,builder,remove,global,block,block,int,additional,global,blocks,count,random,int,between,1,3,for,int,i,0,i,additional,global,blocks,count,i,builder,add,global,block,random,global,block,return,cluster,state,builder,cluster,state,blocks,builder
ClusterStateDiffIT -> private ClusterState.Builder randomBlocks(ClusterState clusterState);1525248068;Randomly creates or removes cluster blocks;private ClusterState.Builder randomBlocks(ClusterState clusterState) {_        ClusterBlocks.Builder builder = ClusterBlocks.builder().blocks(clusterState.blocks())__        int globalBlocksCount = clusterState.blocks().global().size()__        if (globalBlocksCount > 0) {_            List<ClusterBlock> blocks = randomSubsetOf(randomInt(globalBlocksCount - 1), clusterState.blocks().global().toArray(new ClusterBlock[globalBlocksCount]))__            for (ClusterBlock block : blocks) {_                builder.removeGlobalBlock(block)__            }_        }_        int additionalGlobalBlocksCount = randomIntBetween(1, 3)__        for (int i = 0_ i < additionalGlobalBlocksCount_ i++) {_            builder.addGlobalBlock(randomGlobalBlock())__        }_        return ClusterState.builder(clusterState).blocks(builder)__    };randomly,creates,or,removes,cluster,blocks;private,cluster,state,builder,random,blocks,cluster,state,cluster,state,cluster,blocks,builder,builder,cluster,blocks,builder,blocks,cluster,state,blocks,int,global,blocks,count,cluster,state,blocks,global,size,if,global,blocks,count,0,list,cluster,block,blocks,random,subset,of,random,int,global,blocks,count,1,cluster,state,blocks,global,to,array,new,cluster,block,global,blocks,count,for,cluster,block,block,blocks,builder,remove,global,block,block,int,additional,global,blocks,count,random,int,between,1,3,for,int,i,0,i,additional,global,blocks,count,i,builder,add,global,block,random,global,block,return,cluster,state,builder,cluster,state,blocks,builder
ClusterStateDiffIT -> private ClusterState.Builder randomBlocks(ClusterState clusterState);1540847035;Randomly creates or removes cluster blocks;private ClusterState.Builder randomBlocks(ClusterState clusterState) {_        ClusterBlocks.Builder builder = ClusterBlocks.builder().blocks(clusterState.blocks())__        int globalBlocksCount = clusterState.blocks().global().size()__        if (globalBlocksCount > 0) {_            List<ClusterBlock> blocks = randomSubsetOf(randomInt(globalBlocksCount - 1),_                clusterState.blocks().global().toArray(new ClusterBlock[globalBlocksCount]))__            for (ClusterBlock block : blocks) {_                builder.removeGlobalBlock(block)__            }_        }_        int additionalGlobalBlocksCount = randomIntBetween(1, 3)__        for (int i = 0_ i < additionalGlobalBlocksCount_ i++) {_            builder.addGlobalBlock(randomGlobalBlock())__        }_        return ClusterState.builder(clusterState).blocks(builder)__    };randomly,creates,or,removes,cluster,blocks;private,cluster,state,builder,random,blocks,cluster,state,cluster,state,cluster,blocks,builder,builder,cluster,blocks,builder,blocks,cluster,state,blocks,int,global,blocks,count,cluster,state,blocks,global,size,if,global,blocks,count,0,list,cluster,block,blocks,random,subset,of,random,int,global,blocks,count,1,cluster,state,blocks,global,to,array,new,cluster,block,global,blocks,count,for,cluster,block,block,blocks,builder,remove,global,block,block,int,additional,global,blocks,count,random,int,between,1,3,for,int,i,0,i,additional,global,blocks,count,i,builder,add,global,block,random,global,block,return,cluster,state,builder,cluster,state,blocks,builder
ClusterStateDiffIT -> private ClusterState.Builder randomBlocks(ClusterState clusterState);1544081506;Randomly creates or removes cluster blocks;private ClusterState.Builder randomBlocks(ClusterState clusterState) {_        ClusterBlocks.Builder builder = ClusterBlocks.builder().blocks(clusterState.blocks())__        int globalBlocksCount = clusterState.blocks().global().size()__        if (globalBlocksCount > 0) {_            List<ClusterBlock> blocks = randomSubsetOf(randomInt(globalBlocksCount - 1),_                clusterState.blocks().global().toArray(new ClusterBlock[globalBlocksCount]))__            for (ClusterBlock block : blocks) {_                builder.removeGlobalBlock(block)__            }_        }_        int additionalGlobalBlocksCount = randomIntBetween(1, 3)__        for (int i = 0_ i < additionalGlobalBlocksCount_ i++) {_            builder.addGlobalBlock(randomGlobalBlock())__        }_        return ClusterState.builder(clusterState).blocks(builder)__    };randomly,creates,or,removes,cluster,blocks;private,cluster,state,builder,random,blocks,cluster,state,cluster,state,cluster,blocks,builder,builder,cluster,blocks,builder,blocks,cluster,state,blocks,int,global,blocks,count,cluster,state,blocks,global,size,if,global,blocks,count,0,list,cluster,block,blocks,random,subset,of,random,int,global,blocks,count,1,cluster,state,blocks,global,to,array,new,cluster,block,global,blocks,count,for,cluster,block,block,blocks,builder,remove,global,block,block,int,additional,global,blocks,count,random,int,between,1,3,for,int,i,0,i,additional,global,blocks,count,i,builder,add,global,block,random,global,block,return,cluster,state,builder,cluster,state,blocks,builder
ClusterStateDiffIT -> private ClusterState.Builder randomBlocks(ClusterState clusterState);1544783963;Randomly creates or removes cluster blocks;private ClusterState.Builder randomBlocks(ClusterState clusterState) {_        ClusterBlocks.Builder builder = ClusterBlocks.builder().blocks(clusterState.blocks())__        int globalBlocksCount = clusterState.blocks().global().size()__        if (globalBlocksCount > 0) {_            List<ClusterBlock> blocks = randomSubsetOf(randomInt(globalBlocksCount - 1),_                clusterState.blocks().global().toArray(new ClusterBlock[globalBlocksCount]))__            for (ClusterBlock block : blocks) {_                builder.removeGlobalBlock(block)__            }_        }_        int additionalGlobalBlocksCount = randomIntBetween(1, 3)__        for (int i = 0_ i < additionalGlobalBlocksCount_ i++) {_            builder.addGlobalBlock(randomGlobalBlock())__        }_        return ClusterState.builder(clusterState).blocks(builder)__    };randomly,creates,or,removes,cluster,blocks;private,cluster,state,builder,random,blocks,cluster,state,cluster,state,cluster,blocks,builder,builder,cluster,blocks,builder,blocks,cluster,state,blocks,int,global,blocks,count,cluster,state,blocks,global,size,if,global,blocks,count,0,list,cluster,block,blocks,random,subset,of,random,int,global,blocks,count,1,cluster,state,blocks,global,to,array,new,cluster,block,global,blocks,count,for,cluster,block,block,blocks,builder,remove,global,block,block,int,additional,global,blocks,count,random,int,between,1,3,for,int,i,0,i,additional,global,blocks,count,i,builder,add,global,block,random,global,block,return,cluster,state,builder,cluster,state,blocks,builder
ClusterStateDiffIT -> private ClusterState.Builder randomBlocks(ClusterState clusterState);1549356476;Randomly creates or removes cluster blocks;private ClusterState.Builder randomBlocks(ClusterState clusterState) {_        ClusterBlocks.Builder builder = ClusterBlocks.builder().blocks(clusterState.blocks())__        int globalBlocksCount = clusterState.blocks().global().size()__        if (globalBlocksCount > 0) {_            List<ClusterBlock> blocks = randomSubsetOf(randomInt(globalBlocksCount - 1),_                clusterState.blocks().global().toArray(new ClusterBlock[globalBlocksCount]))__            for (ClusterBlock block : blocks) {_                builder.removeGlobalBlock(block)__            }_        }_        int additionalGlobalBlocksCount = randomIntBetween(1, 3)__        for (int i = 0_ i < additionalGlobalBlocksCount_ i++) {_            builder.addGlobalBlock(randomGlobalBlock())__        }_        return ClusterState.builder(clusterState).blocks(builder)__    };randomly,creates,or,removes,cluster,blocks;private,cluster,state,builder,random,blocks,cluster,state,cluster,state,cluster,blocks,builder,builder,cluster,blocks,builder,blocks,cluster,state,blocks,int,global,blocks,count,cluster,state,blocks,global,size,if,global,blocks,count,0,list,cluster,block,blocks,random,subset,of,random,int,global,blocks,count,1,cluster,state,blocks,global,to,array,new,cluster,block,global,blocks,count,for,cluster,block,block,blocks,builder,remove,global,block,block,int,additional,global,blocks,count,random,int,between,1,3,for,int,i,0,i,additional,global,blocks,count,i,builder,add,global,block,random,global,block,return,cluster,state,builder,cluster,state,blocks,builder
ClusterStateDiffIT -> private ClusterState.Builder randomClusterStateCustoms(final ClusterState clusterState);1524684173;Randomly adds, deletes or updates in-progress snapshot and restore records in the cluster state;private ClusterState.Builder randomClusterStateCustoms(final ClusterState clusterState) {_        return ClusterState.builder(randomClusterStateParts(clusterState, "custom", new RandomClusterPart<ClusterState.Custom>() {__            @Override_            public ImmutableOpenMap<String, ClusterState.Custom> parts(ClusterState clusterState) {_                return clusterState.customs()__            }__            @Override_            public ClusterState.Builder put(ClusterState.Builder builder, ClusterState.Custom part) {_                return builder.putCustom(part.getWriteableName(), part)__            }__            @Override_            public ClusterState.Builder remove(ClusterState.Builder builder, String name) {_                return builder.removeCustom(name)__            }__            @Override_            public ClusterState.Custom randomCreate(String name) {_                switch (randomIntBetween(0, 1)) {_                    case 0:_                        return new SnapshotsInProgress(new SnapshotsInProgress.Entry(_                                new Snapshot(randomName("repo"), new SnapshotId(randomName("snap"), UUIDs.randomBase64UUID())),_                                randomBoolean(),_                                randomBoolean(),_                                SnapshotsInProgress.State.fromValue((byte) randomIntBetween(0, 6)),_                                Collections.emptyList(),_                                Math.abs(randomLong()),_                                (long) randomIntBetween(0, 1000),_                                ImmutableOpenMap.of()))__                    case 1:_                        return new RestoreInProgress(new RestoreInProgress.Entry(_                                new Snapshot(randomName("repo"), new SnapshotId(randomName("snap"), UUIDs.randomBase64UUID())),_                                RestoreInProgress.State.fromValue((byte) randomIntBetween(0, 3)),_                                emptyList(),_                                ImmutableOpenMap.of()))__                    default:_                        throw new IllegalArgumentException("Shouldn't be here")__                }_            }__            @Override_            public ClusterState.Custom randomChange(ClusterState.Custom part)  {_                return part__            }_        }))__    };randomly,adds,deletes,or,updates,in,progress,snapshot,and,restore,records,in,the,cluster,state;private,cluster,state,builder,random,cluster,state,customs,final,cluster,state,cluster,state,return,cluster,state,builder,random,cluster,state,parts,cluster,state,custom,new,random,cluster,part,cluster,state,custom,override,public,immutable,open,map,string,cluster,state,custom,parts,cluster,state,cluster,state,return,cluster,state,customs,override,public,cluster,state,builder,put,cluster,state,builder,builder,cluster,state,custom,part,return,builder,put,custom,part,get,writeable,name,part,override,public,cluster,state,builder,remove,cluster,state,builder,builder,string,name,return,builder,remove,custom,name,override,public,cluster,state,custom,random,create,string,name,switch,random,int,between,0,1,case,0,return,new,snapshots,in,progress,new,snapshots,in,progress,entry,new,snapshot,random,name,repo,new,snapshot,id,random,name,snap,uuids,random,base64uuid,random,boolean,random,boolean,snapshots,in,progress,state,from,value,byte,random,int,between,0,6,collections,empty,list,math,abs,random,long,long,random,int,between,0,1000,immutable,open,map,of,case,1,return,new,restore,in,progress,new,restore,in,progress,entry,new,snapshot,random,name,repo,new,snapshot,id,random,name,snap,uuids,random,base64uuid,restore,in,progress,state,from,value,byte,random,int,between,0,3,empty,list,immutable,open,map,of,default,throw,new,illegal,argument,exception,shouldn,t,be,here,override,public,cluster,state,custom,random,change,cluster,state,custom,part,return,part
ClusterStateDiffIT -> private ClusterState.Builder randomClusterStateCustoms(final ClusterState clusterState);1525248068;Randomly adds, deletes or updates in-progress snapshot and restore records in the cluster state;private ClusterState.Builder randomClusterStateCustoms(final ClusterState clusterState) {_        return ClusterState.builder(randomClusterStateParts(clusterState, "custom", new RandomClusterPart<ClusterState.Custom>() {__            @Override_            public ImmutableOpenMap<String, ClusterState.Custom> parts(ClusterState clusterState) {_                return clusterState.customs()__            }__            @Override_            public ClusterState.Builder put(ClusterState.Builder builder, ClusterState.Custom part) {_                return builder.putCustom(part.getWriteableName(), part)__            }__            @Override_            public ClusterState.Builder remove(ClusterState.Builder builder, String name) {_                return builder.removeCustom(name)__            }__            @Override_            public ClusterState.Custom randomCreate(String name) {_                switch (randomIntBetween(0, 1)) {_                    case 0:_                        return new SnapshotsInProgress(new SnapshotsInProgress.Entry(_                                new Snapshot(randomName("repo"), new SnapshotId(randomName("snap"), UUIDs.randomBase64UUID())),_                                randomBoolean(),_                                randomBoolean(),_                                SnapshotsInProgress.State.fromValue((byte) randomIntBetween(0, 6)),_                                Collections.emptyList(),_                                Math.abs(randomLong()),_                                (long) randomIntBetween(0, 1000),_                                ImmutableOpenMap.of()))__                    case 1:_                        return new RestoreInProgress(new RestoreInProgress.Entry(_                                new Snapshot(randomName("repo"), new SnapshotId(randomName("snap"), UUIDs.randomBase64UUID())),_                                RestoreInProgress.State.fromValue((byte) randomIntBetween(0, 3)),_                                emptyList(),_                                ImmutableOpenMap.of()))__                    default:_                        throw new IllegalArgumentException("Shouldn't be here")__                }_            }__            @Override_            public ClusterState.Custom randomChange(ClusterState.Custom part)  {_                return part__            }_        }))__    };randomly,adds,deletes,or,updates,in,progress,snapshot,and,restore,records,in,the,cluster,state;private,cluster,state,builder,random,cluster,state,customs,final,cluster,state,cluster,state,return,cluster,state,builder,random,cluster,state,parts,cluster,state,custom,new,random,cluster,part,cluster,state,custom,override,public,immutable,open,map,string,cluster,state,custom,parts,cluster,state,cluster,state,return,cluster,state,customs,override,public,cluster,state,builder,put,cluster,state,builder,builder,cluster,state,custom,part,return,builder,put,custom,part,get,writeable,name,part,override,public,cluster,state,builder,remove,cluster,state,builder,builder,string,name,return,builder,remove,custom,name,override,public,cluster,state,custom,random,create,string,name,switch,random,int,between,0,1,case,0,return,new,snapshots,in,progress,new,snapshots,in,progress,entry,new,snapshot,random,name,repo,new,snapshot,id,random,name,snap,uuids,random,base64uuid,random,boolean,random,boolean,snapshots,in,progress,state,from,value,byte,random,int,between,0,6,collections,empty,list,math,abs,random,long,long,random,int,between,0,1000,immutable,open,map,of,case,1,return,new,restore,in,progress,new,restore,in,progress,entry,new,snapshot,random,name,repo,new,snapshot,id,random,name,snap,uuids,random,base64uuid,restore,in,progress,state,from,value,byte,random,int,between,0,3,empty,list,immutable,open,map,of,default,throw,new,illegal,argument,exception,shouldn,t,be,here,override,public,cluster,state,custom,random,change,cluster,state,custom,part,return,part
ClusterStateDiffIT -> private ClusterState.Builder randomClusterStateCustoms(final ClusterState clusterState);1540847035;Randomly adds, deletes or updates in-progress snapshot and restore records in the cluster state;private ClusterState.Builder randomClusterStateCustoms(final ClusterState clusterState) {_        return ClusterState.builder(randomClusterStateParts(clusterState, "custom", new RandomClusterPart<ClusterState.Custom>() {__            @Override_            public ImmutableOpenMap<String, ClusterState.Custom> parts(ClusterState clusterState) {_                return clusterState.customs()__            }__            @Override_            public ClusterState.Builder put(ClusterState.Builder builder, ClusterState.Custom part) {_                return builder.putCustom(part.getWriteableName(), part)__            }__            @Override_            public ClusterState.Builder remove(ClusterState.Builder builder, String name) {_                return builder.removeCustom(name)__            }__            @Override_            public ClusterState.Custom randomCreate(String name) {_                switch (randomIntBetween(0, 1)) {_                    case 0:_                        return new SnapshotsInProgress(new SnapshotsInProgress.Entry(_                                new Snapshot(randomName("repo"), new SnapshotId(randomName("snap"), UUIDs.randomBase64UUID())),_                                randomBoolean(),_                                randomBoolean(),_                                SnapshotsInProgress.State.fromValue((byte) randomIntBetween(0, 6)),_                                Collections.emptyList(),_                                Math.abs(randomLong()),_                                (long) randomIntBetween(0, 1000),_                                ImmutableOpenMap.of()))__                    case 1:_                        return new RestoreInProgress(new RestoreInProgress.Entry(_                                new Snapshot(randomName("repo"), new SnapshotId(randomName("snap"), UUIDs.randomBase64UUID())),_                                RestoreInProgress.State.fromValue((byte) randomIntBetween(0, 3)),_                                emptyList(),_                                ImmutableOpenMap.of()))__                    default:_                        throw new IllegalArgumentException("Shouldn't be here")__                }_            }__            @Override_            public ClusterState.Custom randomChange(ClusterState.Custom part)  {_                return part__            }_        }))__    };randomly,adds,deletes,or,updates,in,progress,snapshot,and,restore,records,in,the,cluster,state;private,cluster,state,builder,random,cluster,state,customs,final,cluster,state,cluster,state,return,cluster,state,builder,random,cluster,state,parts,cluster,state,custom,new,random,cluster,part,cluster,state,custom,override,public,immutable,open,map,string,cluster,state,custom,parts,cluster,state,cluster,state,return,cluster,state,customs,override,public,cluster,state,builder,put,cluster,state,builder,builder,cluster,state,custom,part,return,builder,put,custom,part,get,writeable,name,part,override,public,cluster,state,builder,remove,cluster,state,builder,builder,string,name,return,builder,remove,custom,name,override,public,cluster,state,custom,random,create,string,name,switch,random,int,between,0,1,case,0,return,new,snapshots,in,progress,new,snapshots,in,progress,entry,new,snapshot,random,name,repo,new,snapshot,id,random,name,snap,uuids,random,base64uuid,random,boolean,random,boolean,snapshots,in,progress,state,from,value,byte,random,int,between,0,6,collections,empty,list,math,abs,random,long,long,random,int,between,0,1000,immutable,open,map,of,case,1,return,new,restore,in,progress,new,restore,in,progress,entry,new,snapshot,random,name,repo,new,snapshot,id,random,name,snap,uuids,random,base64uuid,restore,in,progress,state,from,value,byte,random,int,between,0,3,empty,list,immutable,open,map,of,default,throw,new,illegal,argument,exception,shouldn,t,be,here,override,public,cluster,state,custom,random,change,cluster,state,custom,part,return,part
ClusterStateDiffIT -> private ClusterState.Builder randomClusterStateCustoms(final ClusterState clusterState);1544081506;Randomly adds, deletes or updates in-progress snapshot and restore records in the cluster state;private ClusterState.Builder randomClusterStateCustoms(final ClusterState clusterState) {_        return ClusterState.builder(randomClusterStateParts(clusterState, "custom", new RandomClusterPart<ClusterState.Custom>() {__            @Override_            public ImmutableOpenMap<String, ClusterState.Custom> parts(ClusterState clusterState) {_                return clusterState.customs()__            }__            @Override_            public ClusterState.Builder put(ClusterState.Builder builder, ClusterState.Custom part) {_                return builder.putCustom(part.getWriteableName(), part)__            }__            @Override_            public ClusterState.Builder remove(ClusterState.Builder builder, String name) {_                return builder.removeCustom(name)__            }__            @Override_            public ClusterState.Custom randomCreate(String name) {_                switch (randomIntBetween(0, 1)) {_                    case 0:_                        return new SnapshotsInProgress(new SnapshotsInProgress.Entry(_                                new Snapshot(randomName("repo"), new SnapshotId(randomName("snap"), UUIDs.randomBase64UUID())),_                                randomBoolean(),_                                randomBoolean(),_                                SnapshotsInProgress.State.fromValue((byte) randomIntBetween(0, 6)),_                                Collections.emptyList(),_                                Math.abs(randomLong()),_                                (long) randomIntBetween(0, 1000),_                                ImmutableOpenMap.of()))__                    case 1:_                        return new RestoreInProgress(new RestoreInProgress.Entry(_                                new Snapshot(randomName("repo"), new SnapshotId(randomName("snap"), UUIDs.randomBase64UUID())),_                                RestoreInProgress.State.fromValue((byte) randomIntBetween(0, 3)),_                                emptyList(),_                                ImmutableOpenMap.of()))__                    default:_                        throw new IllegalArgumentException("Shouldn't be here")__                }_            }__            @Override_            public ClusterState.Custom randomChange(ClusterState.Custom part)  {_                return part__            }_        }))__    };randomly,adds,deletes,or,updates,in,progress,snapshot,and,restore,records,in,the,cluster,state;private,cluster,state,builder,random,cluster,state,customs,final,cluster,state,cluster,state,return,cluster,state,builder,random,cluster,state,parts,cluster,state,custom,new,random,cluster,part,cluster,state,custom,override,public,immutable,open,map,string,cluster,state,custom,parts,cluster,state,cluster,state,return,cluster,state,customs,override,public,cluster,state,builder,put,cluster,state,builder,builder,cluster,state,custom,part,return,builder,put,custom,part,get,writeable,name,part,override,public,cluster,state,builder,remove,cluster,state,builder,builder,string,name,return,builder,remove,custom,name,override,public,cluster,state,custom,random,create,string,name,switch,random,int,between,0,1,case,0,return,new,snapshots,in,progress,new,snapshots,in,progress,entry,new,snapshot,random,name,repo,new,snapshot,id,random,name,snap,uuids,random,base64uuid,random,boolean,random,boolean,snapshots,in,progress,state,from,value,byte,random,int,between,0,6,collections,empty,list,math,abs,random,long,long,random,int,between,0,1000,immutable,open,map,of,case,1,return,new,restore,in,progress,new,restore,in,progress,entry,new,snapshot,random,name,repo,new,snapshot,id,random,name,snap,uuids,random,base64uuid,restore,in,progress,state,from,value,byte,random,int,between,0,3,empty,list,immutable,open,map,of,default,throw,new,illegal,argument,exception,shouldn,t,be,here,override,public,cluster,state,custom,random,change,cluster,state,custom,part,return,part
ClusterStateDiffIT -> private ClusterState.Builder randomClusterStateCustoms(final ClusterState clusterState);1544783963;Randomly adds, deletes or updates in-progress snapshot and restore records in the cluster state;private ClusterState.Builder randomClusterStateCustoms(final ClusterState clusterState) {_        return ClusterState.builder(randomClusterStateParts(clusterState, "custom", new RandomClusterPart<ClusterState.Custom>() {__            @Override_            public ImmutableOpenMap<String, ClusterState.Custom> parts(ClusterState clusterState) {_                return clusterState.customs()__            }__            @Override_            public ClusterState.Builder put(ClusterState.Builder builder, ClusterState.Custom part) {_                return builder.putCustom(part.getWriteableName(), part)__            }__            @Override_            public ClusterState.Builder remove(ClusterState.Builder builder, String name) {_                return builder.removeCustom(name)__            }__            @Override_            public ClusterState.Custom randomCreate(String name) {_                switch (randomIntBetween(0, 1)) {_                    case 0:_                        return new SnapshotsInProgress(new SnapshotsInProgress.Entry(_                                new Snapshot(randomName("repo"), new SnapshotId(randomName("snap"), UUIDs.randomBase64UUID())),_                                randomBoolean(),_                                randomBoolean(),_                                SnapshotsInProgress.State.fromValue((byte) randomIntBetween(0, 6)),_                                Collections.emptyList(),_                                Math.abs(randomLong()),_                                (long) randomIntBetween(0, 1000),_                                ImmutableOpenMap.of()))__                    case 1:_                        return new RestoreInProgress.Builder().add(_                            new RestoreInProgress.Entry(_                                UUIDs.randomBase64UUID(),_                                new Snapshot(randomName("repo"), new SnapshotId(randomName("snap"), UUIDs.randomBase64UUID())),_                                RestoreInProgress.State.fromValue((byte) randomIntBetween(0, 3)),_                                emptyList(),_                                ImmutableOpenMap.of())).build()__                    default:_                        throw new IllegalArgumentException("Shouldn't be here")__                }_            }__            @Override_            public ClusterState.Custom randomChange(ClusterState.Custom part)  {_                return part__            }_        }))__    };randomly,adds,deletes,or,updates,in,progress,snapshot,and,restore,records,in,the,cluster,state;private,cluster,state,builder,random,cluster,state,customs,final,cluster,state,cluster,state,return,cluster,state,builder,random,cluster,state,parts,cluster,state,custom,new,random,cluster,part,cluster,state,custom,override,public,immutable,open,map,string,cluster,state,custom,parts,cluster,state,cluster,state,return,cluster,state,customs,override,public,cluster,state,builder,put,cluster,state,builder,builder,cluster,state,custom,part,return,builder,put,custom,part,get,writeable,name,part,override,public,cluster,state,builder,remove,cluster,state,builder,builder,string,name,return,builder,remove,custom,name,override,public,cluster,state,custom,random,create,string,name,switch,random,int,between,0,1,case,0,return,new,snapshots,in,progress,new,snapshots,in,progress,entry,new,snapshot,random,name,repo,new,snapshot,id,random,name,snap,uuids,random,base64uuid,random,boolean,random,boolean,snapshots,in,progress,state,from,value,byte,random,int,between,0,6,collections,empty,list,math,abs,random,long,long,random,int,between,0,1000,immutable,open,map,of,case,1,return,new,restore,in,progress,builder,add,new,restore,in,progress,entry,uuids,random,base64uuid,new,snapshot,random,name,repo,new,snapshot,id,random,name,snap,uuids,random,base64uuid,restore,in,progress,state,from,value,byte,random,int,between,0,3,empty,list,immutable,open,map,of,build,default,throw,new,illegal,argument,exception,shouldn,t,be,here,override,public,cluster,state,custom,random,change,cluster,state,custom,part,return,part
ClusterStateDiffIT -> private ClusterState.Builder randomClusterStateCustoms(final ClusterState clusterState);1549356476;Randomly adds, deletes or updates in-progress snapshot and restore records in the cluster state;private ClusterState.Builder randomClusterStateCustoms(final ClusterState clusterState) {_        return ClusterState.builder(randomClusterStateParts(clusterState, "custom", new RandomClusterPart<ClusterState.Custom>() {__            @Override_            public ImmutableOpenMap<String, ClusterState.Custom> parts(ClusterState clusterState) {_                return clusterState.customs()__            }__            @Override_            public ClusterState.Builder put(ClusterState.Builder builder, ClusterState.Custom part) {_                return builder.putCustom(part.getWriteableName(), part)__            }__            @Override_            public ClusterState.Builder remove(ClusterState.Builder builder, String name) {_                return builder.removeCustom(name)__            }__            @Override_            public ClusterState.Custom randomCreate(String name) {_                switch (randomIntBetween(0, 1)) {_                    case 0:_                        return new SnapshotsInProgress(new SnapshotsInProgress.Entry(_                                new Snapshot(randomName("repo"), new SnapshotId(randomName("snap"), UUIDs.randomBase64UUID())),_                                randomBoolean(),_                                randomBoolean(),_                                SnapshotsInProgress.State.fromValue((byte) randomIntBetween(0, 6)),_                                Collections.emptyList(),_                                Math.abs(randomLong()),_                                (long) randomIntBetween(0, 1000),_                                ImmutableOpenMap.of()))__                    case 1:_                        return new RestoreInProgress.Builder().add(_                            new RestoreInProgress.Entry(_                                UUIDs.randomBase64UUID(),_                                new Snapshot(randomName("repo"), new SnapshotId(randomName("snap"), UUIDs.randomBase64UUID())),_                                RestoreInProgress.State.fromValue((byte) randomIntBetween(0, 3)),_                                emptyList(),_                                ImmutableOpenMap.of())).build()__                    default:_                        throw new IllegalArgumentException("Shouldn't be here")__                }_            }__            @Override_            public ClusterState.Custom randomChange(ClusterState.Custom part)  {_                return part__            }_        }))__    };randomly,adds,deletes,or,updates,in,progress,snapshot,and,restore,records,in,the,cluster,state;private,cluster,state,builder,random,cluster,state,customs,final,cluster,state,cluster,state,return,cluster,state,builder,random,cluster,state,parts,cluster,state,custom,new,random,cluster,part,cluster,state,custom,override,public,immutable,open,map,string,cluster,state,custom,parts,cluster,state,cluster,state,return,cluster,state,customs,override,public,cluster,state,builder,put,cluster,state,builder,builder,cluster,state,custom,part,return,builder,put,custom,part,get,writeable,name,part,override,public,cluster,state,builder,remove,cluster,state,builder,builder,string,name,return,builder,remove,custom,name,override,public,cluster,state,custom,random,create,string,name,switch,random,int,between,0,1,case,0,return,new,snapshots,in,progress,new,snapshots,in,progress,entry,new,snapshot,random,name,repo,new,snapshot,id,random,name,snap,uuids,random,base64uuid,random,boolean,random,boolean,snapshots,in,progress,state,from,value,byte,random,int,between,0,6,collections,empty,list,math,abs,random,long,long,random,int,between,0,1000,immutable,open,map,of,case,1,return,new,restore,in,progress,builder,add,new,restore,in,progress,entry,uuids,random,base64uuid,new,snapshot,random,name,repo,new,snapshot,id,random,name,snap,uuids,random,base64uuid,restore,in,progress,state,from,value,byte,random,int,between,0,3,empty,list,immutable,open,map,of,build,default,throw,new,illegal,argument,exception,shouldn,t,be,here,override,public,cluster,state,custom,random,change,cluster,state,custom,part,return,part
ClusterStateDiffIT -> RandomPart -> MetaData.Builder remove(MetaData.Builder builder, String name)_;1524684173;Remove the part from metadata;MetaData.Builder remove(MetaData.Builder builder, String name)_;remove,the,part,from,metadata;meta,data,builder,remove,meta,data,builder,builder,string,name
ClusterStateDiffIT -> RandomPart -> MetaData.Builder remove(MetaData.Builder builder, String name)_;1525248068;Remove the part from metadata;MetaData.Builder remove(MetaData.Builder builder, String name)_;remove,the,part,from,metadata;meta,data,builder,remove,meta,data,builder,builder,string,name
ClusterStateDiffIT -> RandomPart -> MetaData.Builder remove(MetaData.Builder builder, String name)_;1540847035;Remove the part from metadata;MetaData.Builder remove(MetaData.Builder builder, String name)_;remove,the,part,from,metadata;meta,data,builder,remove,meta,data,builder,builder,string,name
ClusterStateDiffIT -> RandomPart -> MetaData.Builder remove(MetaData.Builder builder, String name)_;1544081506;Remove the part from metadata;MetaData.Builder remove(MetaData.Builder builder, String name)_;remove,the,part,from,metadata;meta,data,builder,remove,meta,data,builder,builder,string,name
ClusterStateDiffIT -> RandomPart -> MetaData.Builder remove(MetaData.Builder builder, String name)_;1544783963;Remove the part from metadata;MetaData.Builder remove(MetaData.Builder builder, String name)_;remove,the,part,from,metadata;meta,data,builder,remove,meta,data,builder,builder,string,name
ClusterStateDiffIT -> RandomPart -> MetaData.Builder remove(MetaData.Builder builder, String name)_;1549356476;Remove the part from metadata;MetaData.Builder remove(MetaData.Builder builder, String name)_;remove,the,part,from,metadata;meta,data,builder,remove,meta,data,builder,builder,string,name
ClusterStateDiffIT -> private Settings randomSettings(Settings settings);1524684173;Makes random settings changes;private Settings randomSettings(Settings settings) {_        Settings.Builder builder = Settings.builder()__        if (randomBoolean()) {_            builder.put(settings)__        }_        int settingsCount = randomInt(10)__        for (int i = 0_ i < settingsCount_ i++) {_            builder.put(randomAlphaOfLength(10), randomAlphaOfLength(10))__        }_        return builder.build()___    };makes,random,settings,changes;private,settings,random,settings,settings,settings,settings,builder,builder,settings,builder,if,random,boolean,builder,put,settings,int,settings,count,random,int,10,for,int,i,0,i,settings,count,i,builder,put,random,alpha,of,length,10,random,alpha,of,length,10,return,builder,build
ClusterStateDiffIT -> private Settings randomSettings(Settings settings);1525248068;Makes random settings changes;private Settings randomSettings(Settings settings) {_        Settings.Builder builder = Settings.builder()__        if (randomBoolean()) {_            builder.put(settings)__        }_        int settingsCount = randomInt(10)__        for (int i = 0_ i < settingsCount_ i++) {_            builder.put(randomAlphaOfLength(10), randomAlphaOfLength(10))__        }_        return builder.build()___    };makes,random,settings,changes;private,settings,random,settings,settings,settings,settings,builder,builder,settings,builder,if,random,boolean,builder,put,settings,int,settings,count,random,int,10,for,int,i,0,i,settings,count,i,builder,put,random,alpha,of,length,10,random,alpha,of,length,10,return,builder,build
ClusterStateDiffIT -> private Settings randomSettings(Settings settings);1540847035;Makes random settings changes;private Settings randomSettings(Settings settings) {_        Settings.Builder builder = Settings.builder()__        if (randomBoolean()) {_            builder.put(settings)__        }_        int settingsCount = randomInt(10)__        for (int i = 0_ i < settingsCount_ i++) {_            builder.put(randomAlphaOfLength(10), randomAlphaOfLength(10))__        }_        return builder.build()___    };makes,random,settings,changes;private,settings,random,settings,settings,settings,settings,builder,builder,settings,builder,if,random,boolean,builder,put,settings,int,settings,count,random,int,10,for,int,i,0,i,settings,count,i,builder,put,random,alpha,of,length,10,random,alpha,of,length,10,return,builder,build
ClusterStateDiffIT -> private Settings randomSettings(Settings settings);1544081506;Makes random settings changes;private Settings randomSettings(Settings settings) {_        Settings.Builder builder = Settings.builder()__        if (randomBoolean()) {_            builder.put(settings)__        }_        int settingsCount = randomInt(10)__        for (int i = 0_ i < settingsCount_ i++) {_            builder.put(randomAlphaOfLength(10), randomAlphaOfLength(10))__        }_        return builder.build()___    };makes,random,settings,changes;private,settings,random,settings,settings,settings,settings,builder,builder,settings,builder,if,random,boolean,builder,put,settings,int,settings,count,random,int,10,for,int,i,0,i,settings,count,i,builder,put,random,alpha,of,length,10,random,alpha,of,length,10,return,builder,build
ClusterStateDiffIT -> private Settings randomSettings(Settings settings);1544783963;Makes random settings changes;private Settings randomSettings(Settings settings) {_        Settings.Builder builder = Settings.builder()__        if (randomBoolean()) {_            builder.put(settings)__        }_        int settingsCount = randomInt(10)__        for (int i = 0_ i < settingsCount_ i++) {_            builder.put(randomAlphaOfLength(10), randomAlphaOfLength(10))__        }_        return builder.build()___    };makes,random,settings,changes;private,settings,random,settings,settings,settings,settings,builder,builder,settings,builder,if,random,boolean,builder,put,settings,int,settings,count,random,int,10,for,int,i,0,i,settings,count,i,builder,put,random,alpha,of,length,10,random,alpha,of,length,10,return,builder,build
ClusterStateDiffIT -> private Settings randomSettings(Settings settings);1549356476;Makes random settings changes;private Settings randomSettings(Settings settings) {_        Settings.Builder builder = Settings.builder()__        if (randomBoolean()) {_            builder.put(settings)__        }_        int settingsCount = randomInt(10)__        for (int i = 0_ i < settingsCount_ i++) {_            builder.put(randomAlphaOfLength(10), randomAlphaOfLength(10))__        }_        return builder.build()___    };makes,random,settings,changes;private,settings,random,settings,settings,settings,settings,builder,builder,settings,builder,if,random,boolean,builder,put,settings,int,settings,count,random,int,10,for,int,i,0,i,settings,count,i,builder,put,random,alpha,of,length,10,random,alpha,of,length,10,return,builder,build
ClusterStateDiffIT -> RandomClusterPart -> ClusterState.Builder remove(ClusterState.Builder builder, String name)_;1524684173;Remove the part from metadata;ClusterState.Builder remove(ClusterState.Builder builder, String name)_;remove,the,part,from,metadata;cluster,state,builder,remove,cluster,state,builder,builder,string,name
ClusterStateDiffIT -> RandomClusterPart -> ClusterState.Builder remove(ClusterState.Builder builder, String name)_;1525248068;Remove the part from metadata;ClusterState.Builder remove(ClusterState.Builder builder, String name)_;remove,the,part,from,metadata;cluster,state,builder,remove,cluster,state,builder,builder,string,name
ClusterStateDiffIT -> RandomClusterPart -> ClusterState.Builder remove(ClusterState.Builder builder, String name)_;1540847035;Remove the part from metadata;ClusterState.Builder remove(ClusterState.Builder builder, String name)_;remove,the,part,from,metadata;cluster,state,builder,remove,cluster,state,builder,builder,string,name
ClusterStateDiffIT -> RandomClusterPart -> ClusterState.Builder remove(ClusterState.Builder builder, String name)_;1544081506;Remove the part from metadata;ClusterState.Builder remove(ClusterState.Builder builder, String name)_;remove,the,part,from,metadata;cluster,state,builder,remove,cluster,state,builder,builder,string,name
ClusterStateDiffIT -> RandomClusterPart -> ClusterState.Builder remove(ClusterState.Builder builder, String name)_;1544783963;Remove the part from metadata;ClusterState.Builder remove(ClusterState.Builder builder, String name)_;remove,the,part,from,metadata;cluster,state,builder,remove,cluster,state,builder,builder,string,name
ClusterStateDiffIT -> RandomClusterPart -> ClusterState.Builder remove(ClusterState.Builder builder, String name)_;1549356476;Remove the part from metadata;ClusterState.Builder remove(ClusterState.Builder builder, String name)_;remove,the,part,from,metadata;cluster,state,builder,remove,cluster,state,builder,builder,string,name
ClusterStateDiffIT -> RandomPart -> T randomChange(T part)_;1524684173;Makes random modifications to the part;T randomChange(T part)_;makes,random,modifications,to,the,part;t,random,change,t,part
ClusterStateDiffIT -> RandomPart -> T randomChange(T part)_;1525248068;Makes random modifications to the part;T randomChange(T part)_;makes,random,modifications,to,the,part;t,random,change,t,part
ClusterStateDiffIT -> RandomPart -> T randomChange(T part)_;1540847035;Makes random modifications to the part;T randomChange(T part)_;makes,random,modifications,to,the,part;t,random,change,t,part
ClusterStateDiffIT -> RandomPart -> T randomChange(T part)_;1544081506;Makes random modifications to the part;T randomChange(T part)_;makes,random,modifications,to,the,part;t,random,change,t,part
ClusterStateDiffIT -> RandomPart -> T randomChange(T part)_;1544783963;Makes random modifications to the part;T randomChange(T part)_;makes,random,modifications,to,the,part;t,random,change,t,part
ClusterStateDiffIT -> RandomPart -> T randomChange(T part)_;1549356476;Makes random modifications to the part;T randomChange(T part)_;makes,random,modifications,to,the,part;t,random,change,t,part
ClusterStateDiffIT -> private ClusterState.Builder randomNodes(ClusterState clusterState);1524684173;Randomly updates nodes in the cluster state;private ClusterState.Builder randomNodes(ClusterState clusterState) {_        DiscoveryNodes.Builder nodes = DiscoveryNodes.builder(clusterState.nodes())__        List<String> nodeIds = randomSubsetOf(randomInt(clusterState.nodes().getNodes().size() - 1), clusterState.nodes().getNodes().keys().toArray(String.class))__        for (String nodeId : nodeIds) {_            if (nodeId.startsWith("node-")) {_                nodes.remove(nodeId)__                if (randomBoolean()) {_                    nodes.add(new DiscoveryNode(nodeId, buildNewFakeTransportAddress(), emptyMap(),_                            emptySet(), randomVersion(random())))__                }_            }_        }_        int additionalNodeCount = randomIntBetween(1, 20)__        for (int i = 0_ i < additionalNodeCount_ i++) {_            nodes.add(new DiscoveryNode("node-" + randomAlphaOfLength(10), buildNewFakeTransportAddress(),_                    emptyMap(), emptySet(), randomVersion(random())))__        }_        return ClusterState.builder(clusterState).nodes(nodes)__    };randomly,updates,nodes,in,the,cluster,state;private,cluster,state,builder,random,nodes,cluster,state,cluster,state,discovery,nodes,builder,nodes,discovery,nodes,builder,cluster,state,nodes,list,string,node,ids,random,subset,of,random,int,cluster,state,nodes,get,nodes,size,1,cluster,state,nodes,get,nodes,keys,to,array,string,class,for,string,node,id,node,ids,if,node,id,starts,with,node,nodes,remove,node,id,if,random,boolean,nodes,add,new,discovery,node,node,id,build,new,fake,transport,address,empty,map,empty,set,random,version,random,int,additional,node,count,random,int,between,1,20,for,int,i,0,i,additional,node,count,i,nodes,add,new,discovery,node,node,random,alpha,of,length,10,build,new,fake,transport,address,empty,map,empty,set,random,version,random,return,cluster,state,builder,cluster,state,nodes,nodes
ClusterStateDiffIT -> private ClusterState.Builder randomNodes(ClusterState clusterState);1525248068;Randomly updates nodes in the cluster state;private ClusterState.Builder randomNodes(ClusterState clusterState) {_        DiscoveryNodes.Builder nodes = DiscoveryNodes.builder(clusterState.nodes())__        List<String> nodeIds = randomSubsetOf(randomInt(clusterState.nodes().getNodes().size() - 1), clusterState.nodes().getNodes().keys().toArray(String.class))__        for (String nodeId : nodeIds) {_            if (nodeId.startsWith("node-")) {_                nodes.remove(nodeId)__                if (randomBoolean()) {_                    nodes.add(new DiscoveryNode(nodeId, buildNewFakeTransportAddress(), emptyMap(),_                            emptySet(), randomVersion(random())))__                }_            }_        }_        int additionalNodeCount = randomIntBetween(1, 20)__        for (int i = 0_ i < additionalNodeCount_ i++) {_            nodes.add(new DiscoveryNode("node-" + randomAlphaOfLength(10), buildNewFakeTransportAddress(),_                    emptyMap(), emptySet(), randomVersion(random())))__        }_        return ClusterState.builder(clusterState).nodes(nodes)__    };randomly,updates,nodes,in,the,cluster,state;private,cluster,state,builder,random,nodes,cluster,state,cluster,state,discovery,nodes,builder,nodes,discovery,nodes,builder,cluster,state,nodes,list,string,node,ids,random,subset,of,random,int,cluster,state,nodes,get,nodes,size,1,cluster,state,nodes,get,nodes,keys,to,array,string,class,for,string,node,id,node,ids,if,node,id,starts,with,node,nodes,remove,node,id,if,random,boolean,nodes,add,new,discovery,node,node,id,build,new,fake,transport,address,empty,map,empty,set,random,version,random,int,additional,node,count,random,int,between,1,20,for,int,i,0,i,additional,node,count,i,nodes,add,new,discovery,node,node,random,alpha,of,length,10,build,new,fake,transport,address,empty,map,empty,set,random,version,random,return,cluster,state,builder,cluster,state,nodes,nodes
ClusterStateDiffIT -> private ClusterState.Builder randomNodes(ClusterState clusterState);1540847035;Randomly updates nodes in the cluster state;private ClusterState.Builder randomNodes(ClusterState clusterState) {_        DiscoveryNodes.Builder nodes = DiscoveryNodes.builder(clusterState.nodes())__        List<String> nodeIds = randomSubsetOf(randomInt(clusterState.nodes().getNodes().size() - 1),_            clusterState.nodes().getNodes().keys().toArray(String.class))__        for (String nodeId : nodeIds) {_            if (nodeId.startsWith("node-")) {_                nodes.remove(nodeId)__                if (randomBoolean()) {_                    nodes.add(new DiscoveryNode(nodeId, buildNewFakeTransportAddress(), emptyMap(),_                            emptySet(), randomVersion(random())))__                }_            }_        }_        int additionalNodeCount = randomIntBetween(1, 20)__        for (int i = 0_ i < additionalNodeCount_ i++) {_            nodes.add(new DiscoveryNode("node-" + randomAlphaOfLength(10), buildNewFakeTransportAddress(),_                    emptyMap(), emptySet(), randomVersion(random())))__        }_        return ClusterState.builder(clusterState).nodes(nodes)__    };randomly,updates,nodes,in,the,cluster,state;private,cluster,state,builder,random,nodes,cluster,state,cluster,state,discovery,nodes,builder,nodes,discovery,nodes,builder,cluster,state,nodes,list,string,node,ids,random,subset,of,random,int,cluster,state,nodes,get,nodes,size,1,cluster,state,nodes,get,nodes,keys,to,array,string,class,for,string,node,id,node,ids,if,node,id,starts,with,node,nodes,remove,node,id,if,random,boolean,nodes,add,new,discovery,node,node,id,build,new,fake,transport,address,empty,map,empty,set,random,version,random,int,additional,node,count,random,int,between,1,20,for,int,i,0,i,additional,node,count,i,nodes,add,new,discovery,node,node,random,alpha,of,length,10,build,new,fake,transport,address,empty,map,empty,set,random,version,random,return,cluster,state,builder,cluster,state,nodes,nodes
ClusterStateDiffIT -> private ClusterState.Builder randomNodes(ClusterState clusterState);1544081506;Randomly updates nodes in the cluster state;private ClusterState.Builder randomNodes(ClusterState clusterState) {_        DiscoveryNodes.Builder nodes = DiscoveryNodes.builder(clusterState.nodes())__        List<String> nodeIds = randomSubsetOf(randomInt(clusterState.nodes().getNodes().size() - 1),_            clusterState.nodes().getNodes().keys().toArray(String.class))__        for (String nodeId : nodeIds) {_            if (nodeId.startsWith("node-")) {_                nodes.remove(nodeId)__                if (randomBoolean()) {_                    nodes.add(randomNode(nodeId))__                }_            }_        }_        int additionalNodeCount = randomIntBetween(1, 20)__        for (int i = 0_ i < additionalNodeCount_ i++) {_            nodes.add(randomNode("node-" + randomAlphaOfLength(10)))__        }_        return ClusterState.builder(clusterState).nodes(nodes)__    };randomly,updates,nodes,in,the,cluster,state;private,cluster,state,builder,random,nodes,cluster,state,cluster,state,discovery,nodes,builder,nodes,discovery,nodes,builder,cluster,state,nodes,list,string,node,ids,random,subset,of,random,int,cluster,state,nodes,get,nodes,size,1,cluster,state,nodes,get,nodes,keys,to,array,string,class,for,string,node,id,node,ids,if,node,id,starts,with,node,nodes,remove,node,id,if,random,boolean,nodes,add,random,node,node,id,int,additional,node,count,random,int,between,1,20,for,int,i,0,i,additional,node,count,i,nodes,add,random,node,node,random,alpha,of,length,10,return,cluster,state,builder,cluster,state,nodes,nodes
ClusterStateDiffIT -> private ClusterState.Builder randomNodes(ClusterState clusterState);1544783963;Randomly updates nodes in the cluster state;private ClusterState.Builder randomNodes(ClusterState clusterState) {_        DiscoveryNodes.Builder nodes = DiscoveryNodes.builder(clusterState.nodes())__        List<String> nodeIds = randomSubsetOf(randomInt(clusterState.nodes().getNodes().size() - 1),_            clusterState.nodes().getNodes().keys().toArray(String.class))__        for (String nodeId : nodeIds) {_            if (nodeId.startsWith("node-")) {_                nodes.remove(nodeId)__                if (randomBoolean()) {_                    nodes.add(randomNode(nodeId))__                }_            }_        }_        int additionalNodeCount = randomIntBetween(1, 20)__        for (int i = 0_ i < additionalNodeCount_ i++) {_            nodes.add(randomNode("node-" + randomAlphaOfLength(10)))__        }_        return ClusterState.builder(clusterState).nodes(nodes)__    };randomly,updates,nodes,in,the,cluster,state;private,cluster,state,builder,random,nodes,cluster,state,cluster,state,discovery,nodes,builder,nodes,discovery,nodes,builder,cluster,state,nodes,list,string,node,ids,random,subset,of,random,int,cluster,state,nodes,get,nodes,size,1,cluster,state,nodes,get,nodes,keys,to,array,string,class,for,string,node,id,node,ids,if,node,id,starts,with,node,nodes,remove,node,id,if,random,boolean,nodes,add,random,node,node,id,int,additional,node,count,random,int,between,1,20,for,int,i,0,i,additional,node,count,i,nodes,add,random,node,node,random,alpha,of,length,10,return,cluster,state,builder,cluster,state,nodes,nodes
ClusterStateDiffIT -> private ClusterState.Builder randomNodes(ClusterState clusterState);1549356476;Randomly updates nodes in the cluster state;private ClusterState.Builder randomNodes(ClusterState clusterState) {_        DiscoveryNodes.Builder nodes = DiscoveryNodes.builder(clusterState.nodes())__        List<String> nodeIds = randomSubsetOf(randomInt(clusterState.nodes().getNodes().size() - 1),_            clusterState.nodes().getNodes().keys().toArray(String.class))__        for (String nodeId : nodeIds) {_            if (nodeId.startsWith("node-")) {_                nodes.remove(nodeId)__                if (randomBoolean()) {_                    nodes.add(randomNode(nodeId))__                }_            }_        }_        int additionalNodeCount = randomIntBetween(1, 20)__        for (int i = 0_ i < additionalNodeCount_ i++) {_            nodes.add(randomNode("node-" + randomAlphaOfLength(10)))__        }_        return ClusterState.builder(clusterState).nodes(nodes)__    };randomly,updates,nodes,in,the,cluster,state;private,cluster,state,builder,random,nodes,cluster,state,cluster,state,discovery,nodes,builder,nodes,discovery,nodes,builder,cluster,state,nodes,list,string,node,ids,random,subset,of,random,int,cluster,state,nodes,get,nodes,size,1,cluster,state,nodes,get,nodes,keys,to,array,string,class,for,string,node,id,node,ids,if,node,id,starts,with,node,nodes,remove,node,id,if,random,boolean,nodes,add,random,node,node,id,int,additional,node,count,random,int,between,1,20,for,int,i,0,i,additional,node,count,i,nodes,add,random,node,node,random,alpha,of,length,10,return,cluster,state,builder,cluster,state,nodes,nodes
ClusterStateDiffIT -> RandomClusterPart -> ClusterState.Builder put(ClusterState.Builder builder, T part)_;1524684173;Puts the part back into metadata;ClusterState.Builder put(ClusterState.Builder builder, T part)_;puts,the,part,back,into,metadata;cluster,state,builder,put,cluster,state,builder,builder,t,part
ClusterStateDiffIT -> RandomClusterPart -> ClusterState.Builder put(ClusterState.Builder builder, T part)_;1525248068;Puts the part back into metadata;ClusterState.Builder put(ClusterState.Builder builder, T part)_;puts,the,part,back,into,metadata;cluster,state,builder,put,cluster,state,builder,builder,t,part
ClusterStateDiffIT -> RandomClusterPart -> ClusterState.Builder put(ClusterState.Builder builder, T part)_;1540847035;Puts the part back into metadata;ClusterState.Builder put(ClusterState.Builder builder, T part)_;puts,the,part,back,into,metadata;cluster,state,builder,put,cluster,state,builder,builder,t,part
ClusterStateDiffIT -> RandomClusterPart -> ClusterState.Builder put(ClusterState.Builder builder, T part)_;1544081506;Puts the part back into metadata;ClusterState.Builder put(ClusterState.Builder builder, T part)_;puts,the,part,back,into,metadata;cluster,state,builder,put,cluster,state,builder,builder,t,part
ClusterStateDiffIT -> RandomClusterPart -> ClusterState.Builder put(ClusterState.Builder builder, T part)_;1544783963;Puts the part back into metadata;ClusterState.Builder put(ClusterState.Builder builder, T part)_;puts,the,part,back,into,metadata;cluster,state,builder,put,cluster,state,builder,builder,t,part
ClusterStateDiffIT -> RandomClusterPart -> ClusterState.Builder put(ClusterState.Builder builder, T part)_;1549356476;Puts the part back into metadata;ClusterState.Builder put(ClusterState.Builder builder, T part)_;puts,the,part,back,into,metadata;cluster,state,builder,put,cluster,state,builder,builder,t,part
ClusterStateDiffIT -> private MetaData randomTemplates(MetaData metaData);1524684173;Randomly adds, deletes or updates index templates in the metadata;private MetaData randomTemplates(MetaData metaData) {_        return randomParts(metaData, "template", new RandomPart<IndexTemplateMetaData>() {_            @Override_            public ImmutableOpenMap<String, IndexTemplateMetaData> parts(MetaData metaData) {_                return metaData.templates()__            }__            @Override_            public MetaData.Builder put(MetaData.Builder builder, IndexTemplateMetaData part) {_                return builder.put(part)__            }__            @Override_            public MetaData.Builder remove(MetaData.Builder builder, String name) {_                return builder.removeTemplate(name)__            }__            @Override_            public IndexTemplateMetaData randomCreate(String name) {_                IndexTemplateMetaData.Builder builder = IndexTemplateMetaData.builder(name)__                builder.order(randomInt(1000))_                        .patterns(Collections.singletonList(randomName("temp")))_                        .settings(randomSettings(Settings.EMPTY))__                int aliasCount = randomIntBetween(0, 10)__                for (int i = 0_ i < aliasCount_ i++) {_                    builder.putAlias(randomAlias())__                }_                return builder.build()__            }__            @Override_            public IndexTemplateMetaData randomChange(IndexTemplateMetaData part) {_                IndexTemplateMetaData.Builder builder = new IndexTemplateMetaData.Builder(part)__                builder.order(randomInt(1000))__                return builder.build()__            }_        })__    };randomly,adds,deletes,or,updates,index,templates,in,the,metadata;private,meta,data,random,templates,meta,data,meta,data,return,random,parts,meta,data,template,new,random,part,index,template,meta,data,override,public,immutable,open,map,string,index,template,meta,data,parts,meta,data,meta,data,return,meta,data,templates,override,public,meta,data,builder,put,meta,data,builder,builder,index,template,meta,data,part,return,builder,put,part,override,public,meta,data,builder,remove,meta,data,builder,builder,string,name,return,builder,remove,template,name,override,public,index,template,meta,data,random,create,string,name,index,template,meta,data,builder,builder,index,template,meta,data,builder,name,builder,order,random,int,1000,patterns,collections,singleton,list,random,name,temp,settings,random,settings,settings,empty,int,alias,count,random,int,between,0,10,for,int,i,0,i,alias,count,i,builder,put,alias,random,alias,return,builder,build,override,public,index,template,meta,data,random,change,index,template,meta,data,part,index,template,meta,data,builder,builder,new,index,template,meta,data,builder,part,builder,order,random,int,1000,return,builder,build
ClusterStateDiffIT -> private MetaData randomTemplates(MetaData metaData);1525248068;Randomly adds, deletes or updates index templates in the metadata;private MetaData randomTemplates(MetaData metaData) {_        return randomParts(metaData, "template", new RandomPart<IndexTemplateMetaData>() {_            @Override_            public ImmutableOpenMap<String, IndexTemplateMetaData> parts(MetaData metaData) {_                return metaData.templates()__            }__            @Override_            public MetaData.Builder put(MetaData.Builder builder, IndexTemplateMetaData part) {_                return builder.put(part)__            }__            @Override_            public MetaData.Builder remove(MetaData.Builder builder, String name) {_                return builder.removeTemplate(name)__            }__            @Override_            public IndexTemplateMetaData randomCreate(String name) {_                IndexTemplateMetaData.Builder builder = IndexTemplateMetaData.builder(name)__                builder.order(randomInt(1000))_                        .patterns(Collections.singletonList(randomName("temp")))_                        .settings(randomSettings(Settings.EMPTY))__                int aliasCount = randomIntBetween(0, 10)__                for (int i = 0_ i < aliasCount_ i++) {_                    builder.putAlias(randomAlias())__                }_                return builder.build()__            }__            @Override_            public IndexTemplateMetaData randomChange(IndexTemplateMetaData part) {_                IndexTemplateMetaData.Builder builder = new IndexTemplateMetaData.Builder(part)__                builder.order(randomInt(1000))__                return builder.build()__            }_        })__    };randomly,adds,deletes,or,updates,index,templates,in,the,metadata;private,meta,data,random,templates,meta,data,meta,data,return,random,parts,meta,data,template,new,random,part,index,template,meta,data,override,public,immutable,open,map,string,index,template,meta,data,parts,meta,data,meta,data,return,meta,data,templates,override,public,meta,data,builder,put,meta,data,builder,builder,index,template,meta,data,part,return,builder,put,part,override,public,meta,data,builder,remove,meta,data,builder,builder,string,name,return,builder,remove,template,name,override,public,index,template,meta,data,random,create,string,name,index,template,meta,data,builder,builder,index,template,meta,data,builder,name,builder,order,random,int,1000,patterns,collections,singleton,list,random,name,temp,settings,random,settings,settings,empty,int,alias,count,random,int,between,0,10,for,int,i,0,i,alias,count,i,builder,put,alias,random,alias,return,builder,build,override,public,index,template,meta,data,random,change,index,template,meta,data,part,index,template,meta,data,builder,builder,new,index,template,meta,data,builder,part,builder,order,random,int,1000,return,builder,build
ClusterStateDiffIT -> private MetaData randomTemplates(MetaData metaData);1540847035;Randomly adds, deletes or updates index templates in the metadata;private MetaData randomTemplates(MetaData metaData) {_        return randomParts(metaData, "template", new RandomPart<IndexTemplateMetaData>() {_            @Override_            public ImmutableOpenMap<String, IndexTemplateMetaData> parts(MetaData metaData) {_                return metaData.templates()__            }__            @Override_            public MetaData.Builder put(MetaData.Builder builder, IndexTemplateMetaData part) {_                return builder.put(part)__            }__            @Override_            public MetaData.Builder remove(MetaData.Builder builder, String name) {_                return builder.removeTemplate(name)__            }__            @Override_            public IndexTemplateMetaData randomCreate(String name) {_                IndexTemplateMetaData.Builder builder = IndexTemplateMetaData.builder(name)__                builder.order(randomInt(1000))_                        .patterns(Collections.singletonList(randomName("temp")))_                        .settings(randomSettings(Settings.EMPTY))__                int aliasCount = randomIntBetween(0, 10)__                for (int i = 0_ i < aliasCount_ i++) {_                    builder.putAlias(randomAlias())__                }_                return builder.build()__            }__            @Override_            public IndexTemplateMetaData randomChange(IndexTemplateMetaData part) {_                IndexTemplateMetaData.Builder builder = new IndexTemplateMetaData.Builder(part)__                builder.order(randomInt(1000))__                return builder.build()__            }_        })__    };randomly,adds,deletes,or,updates,index,templates,in,the,metadata;private,meta,data,random,templates,meta,data,meta,data,return,random,parts,meta,data,template,new,random,part,index,template,meta,data,override,public,immutable,open,map,string,index,template,meta,data,parts,meta,data,meta,data,return,meta,data,templates,override,public,meta,data,builder,put,meta,data,builder,builder,index,template,meta,data,part,return,builder,put,part,override,public,meta,data,builder,remove,meta,data,builder,builder,string,name,return,builder,remove,template,name,override,public,index,template,meta,data,random,create,string,name,index,template,meta,data,builder,builder,index,template,meta,data,builder,name,builder,order,random,int,1000,patterns,collections,singleton,list,random,name,temp,settings,random,settings,settings,empty,int,alias,count,random,int,between,0,10,for,int,i,0,i,alias,count,i,builder,put,alias,random,alias,return,builder,build,override,public,index,template,meta,data,random,change,index,template,meta,data,part,index,template,meta,data,builder,builder,new,index,template,meta,data,builder,part,builder,order,random,int,1000,return,builder,build
ClusterStateDiffIT -> private MetaData randomTemplates(MetaData metaData);1544081506;Randomly adds, deletes or updates index templates in the metadata;private MetaData randomTemplates(MetaData metaData) {_        return randomParts(metaData, "template", new RandomPart<IndexTemplateMetaData>() {_            @Override_            public ImmutableOpenMap<String, IndexTemplateMetaData> parts(MetaData metaData) {_                return metaData.templates()__            }__            @Override_            public MetaData.Builder put(MetaData.Builder builder, IndexTemplateMetaData part) {_                return builder.put(part)__            }__            @Override_            public MetaData.Builder remove(MetaData.Builder builder, String name) {_                return builder.removeTemplate(name)__            }__            @Override_            public IndexTemplateMetaData randomCreate(String name) {_                IndexTemplateMetaData.Builder builder = IndexTemplateMetaData.builder(name)__                builder.order(randomInt(1000))_                        .patterns(Collections.singletonList(randomName("temp")))_                        .settings(randomSettings(Settings.EMPTY))__                int aliasCount = randomIntBetween(0, 10)__                for (int i = 0_ i < aliasCount_ i++) {_                    builder.putAlias(randomAlias())__                }_                return builder.build()__            }__            @Override_            public IndexTemplateMetaData randomChange(IndexTemplateMetaData part) {_                IndexTemplateMetaData.Builder builder = new IndexTemplateMetaData.Builder(part)__                builder.order(randomInt(1000))__                return builder.build()__            }_        })__    };randomly,adds,deletes,or,updates,index,templates,in,the,metadata;private,meta,data,random,templates,meta,data,meta,data,return,random,parts,meta,data,template,new,random,part,index,template,meta,data,override,public,immutable,open,map,string,index,template,meta,data,parts,meta,data,meta,data,return,meta,data,templates,override,public,meta,data,builder,put,meta,data,builder,builder,index,template,meta,data,part,return,builder,put,part,override,public,meta,data,builder,remove,meta,data,builder,builder,string,name,return,builder,remove,template,name,override,public,index,template,meta,data,random,create,string,name,index,template,meta,data,builder,builder,index,template,meta,data,builder,name,builder,order,random,int,1000,patterns,collections,singleton,list,random,name,temp,settings,random,settings,settings,empty,int,alias,count,random,int,between,0,10,for,int,i,0,i,alias,count,i,builder,put,alias,random,alias,return,builder,build,override,public,index,template,meta,data,random,change,index,template,meta,data,part,index,template,meta,data,builder,builder,new,index,template,meta,data,builder,part,builder,order,random,int,1000,return,builder,build
ClusterStateDiffIT -> private MetaData randomTemplates(MetaData metaData);1544783963;Randomly adds, deletes or updates index templates in the metadata;private MetaData randomTemplates(MetaData metaData) {_        return randomParts(metaData, "template", new RandomPart<IndexTemplateMetaData>() {_            @Override_            public ImmutableOpenMap<String, IndexTemplateMetaData> parts(MetaData metaData) {_                return metaData.templates()__            }__            @Override_            public MetaData.Builder put(MetaData.Builder builder, IndexTemplateMetaData part) {_                return builder.put(part)__            }__            @Override_            public MetaData.Builder remove(MetaData.Builder builder, String name) {_                return builder.removeTemplate(name)__            }__            @Override_            public IndexTemplateMetaData randomCreate(String name) {_                IndexTemplateMetaData.Builder builder = IndexTemplateMetaData.builder(name)__                builder.order(randomInt(1000))_                        .patterns(Collections.singletonList(randomName("temp")))_                        .settings(randomSettings(Settings.EMPTY))__                int aliasCount = randomIntBetween(0, 10)__                for (int i = 0_ i < aliasCount_ i++) {_                    builder.putAlias(randomAlias())__                }_                return builder.build()__            }__            @Override_            public IndexTemplateMetaData randomChange(IndexTemplateMetaData part) {_                IndexTemplateMetaData.Builder builder = new IndexTemplateMetaData.Builder(part)__                builder.order(randomInt(1000))__                return builder.build()__            }_        })__    };randomly,adds,deletes,or,updates,index,templates,in,the,metadata;private,meta,data,random,templates,meta,data,meta,data,return,random,parts,meta,data,template,new,random,part,index,template,meta,data,override,public,immutable,open,map,string,index,template,meta,data,parts,meta,data,meta,data,return,meta,data,templates,override,public,meta,data,builder,put,meta,data,builder,builder,index,template,meta,data,part,return,builder,put,part,override,public,meta,data,builder,remove,meta,data,builder,builder,string,name,return,builder,remove,template,name,override,public,index,template,meta,data,random,create,string,name,index,template,meta,data,builder,builder,index,template,meta,data,builder,name,builder,order,random,int,1000,patterns,collections,singleton,list,random,name,temp,settings,random,settings,settings,empty,int,alias,count,random,int,between,0,10,for,int,i,0,i,alias,count,i,builder,put,alias,random,alias,return,builder,build,override,public,index,template,meta,data,random,change,index,template,meta,data,part,index,template,meta,data,builder,builder,new,index,template,meta,data,builder,part,builder,order,random,int,1000,return,builder,build
ClusterStateDiffIT -> private MetaData randomTemplates(MetaData metaData);1549356476;Randomly adds, deletes or updates index templates in the metadata;private MetaData randomTemplates(MetaData metaData) {_        return randomParts(metaData, "template", new RandomPart<IndexTemplateMetaData>() {_            @Override_            public ImmutableOpenMap<String, IndexTemplateMetaData> parts(MetaData metaData) {_                return metaData.templates()__            }__            @Override_            public MetaData.Builder put(MetaData.Builder builder, IndexTemplateMetaData part) {_                return builder.put(part)__            }__            @Override_            public MetaData.Builder remove(MetaData.Builder builder, String name) {_                return builder.removeTemplate(name)__            }__            @Override_            public IndexTemplateMetaData randomCreate(String name) {_                IndexTemplateMetaData.Builder builder = IndexTemplateMetaData.builder(name)__                builder.order(randomInt(1000))_                        .patterns(Collections.singletonList(randomName("temp")))_                        .settings(randomSettings(Settings.EMPTY))__                int aliasCount = randomIntBetween(0, 10)__                for (int i = 0_ i < aliasCount_ i++) {_                    builder.putAlias(randomAlias())__                }_                return builder.build()__            }__            @Override_            public IndexTemplateMetaData randomChange(IndexTemplateMetaData part) {_                IndexTemplateMetaData.Builder builder = new IndexTemplateMetaData.Builder(part)__                builder.order(randomInt(1000))__                return builder.build()__            }_        })__    };randomly,adds,deletes,or,updates,index,templates,in,the,metadata;private,meta,data,random,templates,meta,data,meta,data,return,random,parts,meta,data,template,new,random,part,index,template,meta,data,override,public,immutable,open,map,string,index,template,meta,data,parts,meta,data,meta,data,return,meta,data,templates,override,public,meta,data,builder,put,meta,data,builder,builder,index,template,meta,data,part,return,builder,put,part,override,public,meta,data,builder,remove,meta,data,builder,builder,string,name,return,builder,remove,template,name,override,public,index,template,meta,data,random,create,string,name,index,template,meta,data,builder,builder,index,template,meta,data,builder,name,builder,order,random,int,1000,patterns,collections,singleton,list,random,name,temp,settings,random,settings,settings,empty,int,alias,count,random,int,between,0,10,for,int,i,0,i,alias,count,i,builder,put,alias,random,alias,return,builder,build,override,public,index,template,meta,data,random,change,index,template,meta,data,part,index,template,meta,data,builder,builder,new,index,template,meta,data,builder,part,builder,order,random,int,1000,return,builder,build
ClusterStateDiffIT -> private ClusterState.Builder randomMetaDataChanges(ClusterState clusterState);1524684173;Makes random metadata changes;private ClusterState.Builder randomMetaDataChanges(ClusterState clusterState) {_        MetaData metaData = clusterState.metaData()__        int changesCount = randomIntBetween(1, 10)__        for (int i = 0_ i < changesCount_ i++) {_            switch (randomInt(3)) {_                case 0:_                    metaData = randomMetaDataSettings(metaData)__                    break__                case 1:_                    metaData = randomIndices(metaData)__                    break__                case 2:_                    metaData = randomTemplates(metaData)__                    break__                case 3:_                    metaData = randomMetaDataCustoms(metaData)__                    break__                default:_                    throw new IllegalArgumentException("Shouldn't be here")__            }_        }_        return ClusterState.builder(clusterState).metaData(MetaData.builder(metaData).version(metaData.version() + 1).build())__    };makes,random,metadata,changes;private,cluster,state,builder,random,meta,data,changes,cluster,state,cluster,state,meta,data,meta,data,cluster,state,meta,data,int,changes,count,random,int,between,1,10,for,int,i,0,i,changes,count,i,switch,random,int,3,case,0,meta,data,random,meta,data,settings,meta,data,break,case,1,meta,data,random,indices,meta,data,break,case,2,meta,data,random,templates,meta,data,break,case,3,meta,data,random,meta,data,customs,meta,data,break,default,throw,new,illegal,argument,exception,shouldn,t,be,here,return,cluster,state,builder,cluster,state,meta,data,meta,data,builder,meta,data,version,meta,data,version,1,build
ClusterStateDiffIT -> private ClusterState.Builder randomMetaDataChanges(ClusterState clusterState);1525248068;Makes random metadata changes;private ClusterState.Builder randomMetaDataChanges(ClusterState clusterState) {_        MetaData metaData = clusterState.metaData()__        int changesCount = randomIntBetween(1, 10)__        for (int i = 0_ i < changesCount_ i++) {_            switch (randomInt(3)) {_                case 0:_                    metaData = randomMetaDataSettings(metaData)__                    break__                case 1:_                    metaData = randomIndices(metaData)__                    break__                case 2:_                    metaData = randomTemplates(metaData)__                    break__                case 3:_                    metaData = randomMetaDataCustoms(metaData)__                    break__                default:_                    throw new IllegalArgumentException("Shouldn't be here")__            }_        }_        return ClusterState.builder(clusterState).metaData(MetaData.builder(metaData).version(metaData.version() + 1).build())__    };makes,random,metadata,changes;private,cluster,state,builder,random,meta,data,changes,cluster,state,cluster,state,meta,data,meta,data,cluster,state,meta,data,int,changes,count,random,int,between,1,10,for,int,i,0,i,changes,count,i,switch,random,int,3,case,0,meta,data,random,meta,data,settings,meta,data,break,case,1,meta,data,random,indices,meta,data,break,case,2,meta,data,random,templates,meta,data,break,case,3,meta,data,random,meta,data,customs,meta,data,break,default,throw,new,illegal,argument,exception,shouldn,t,be,here,return,cluster,state,builder,cluster,state,meta,data,meta,data,builder,meta,data,version,meta,data,version,1,build
ClusterStateDiffIT -> private ClusterState.Builder randomMetaDataChanges(ClusterState clusterState);1540847035;Makes random metadata changes;private ClusterState.Builder randomMetaDataChanges(ClusterState clusterState) {_        MetaData metaData = clusterState.metaData()__        int changesCount = randomIntBetween(1, 10)__        for (int i = 0_ i < changesCount_ i++) {_            switch (randomInt(3)) {_                case 0:_                    metaData = randomMetaDataSettings(metaData)__                    break__                case 1:_                    metaData = randomIndices(metaData)__                    break__                case 2:_                    metaData = randomTemplates(metaData)__                    break__                case 3:_                    metaData = randomMetaDataCustoms(metaData)__                    break__                default:_                    throw new IllegalArgumentException("Shouldn't be here")__            }_        }_        return ClusterState.builder(clusterState).metaData(MetaData.builder(metaData).version(metaData.version() + 1).build())__    };makes,random,metadata,changes;private,cluster,state,builder,random,meta,data,changes,cluster,state,cluster,state,meta,data,meta,data,cluster,state,meta,data,int,changes,count,random,int,between,1,10,for,int,i,0,i,changes,count,i,switch,random,int,3,case,0,meta,data,random,meta,data,settings,meta,data,break,case,1,meta,data,random,indices,meta,data,break,case,2,meta,data,random,templates,meta,data,break,case,3,meta,data,random,meta,data,customs,meta,data,break,default,throw,new,illegal,argument,exception,shouldn,t,be,here,return,cluster,state,builder,cluster,state,meta,data,meta,data,builder,meta,data,version,meta,data,version,1,build
ClusterStateDiffIT -> private ClusterState.Builder randomMetaDataChanges(ClusterState clusterState);1544081506;Makes random metadata changes;private ClusterState.Builder randomMetaDataChanges(ClusterState clusterState) {_        MetaData metaData = clusterState.metaData()__        int changesCount = randomIntBetween(1, 10)__        for (int i = 0_ i < changesCount_ i++) {_            switch (randomInt(3)) {_                case 0:_                    metaData = randomMetaDataSettings(metaData)__                    break__                case 1:_                    metaData = randomIndices(metaData)__                    break__                case 2:_                    metaData = randomTemplates(metaData)__                    break__                case 3:_                    metaData = randomMetaDataCustoms(metaData)__                    break__                default:_                    throw new IllegalArgumentException("Shouldn't be here")__            }_        }_        return ClusterState.builder(clusterState).metaData(MetaData.builder(metaData).version(metaData.version() + 1).build())__    };makes,random,metadata,changes;private,cluster,state,builder,random,meta,data,changes,cluster,state,cluster,state,meta,data,meta,data,cluster,state,meta,data,int,changes,count,random,int,between,1,10,for,int,i,0,i,changes,count,i,switch,random,int,3,case,0,meta,data,random,meta,data,settings,meta,data,break,case,1,meta,data,random,indices,meta,data,break,case,2,meta,data,random,templates,meta,data,break,case,3,meta,data,random,meta,data,customs,meta,data,break,default,throw,new,illegal,argument,exception,shouldn,t,be,here,return,cluster,state,builder,cluster,state,meta,data,meta,data,builder,meta,data,version,meta,data,version,1,build
ClusterStateDiffIT -> private ClusterState.Builder randomMetaDataChanges(ClusterState clusterState);1544783963;Makes random metadata changes;private ClusterState.Builder randomMetaDataChanges(ClusterState clusterState) {_        MetaData metaData = clusterState.metaData()__        int changesCount = randomIntBetween(1, 10)__        for (int i = 0_ i < changesCount_ i++) {_            switch (randomInt(3)) {_                case 0:_                    metaData = randomMetaDataSettings(metaData)__                    break__                case 1:_                    metaData = randomIndices(metaData)__                    break__                case 2:_                    metaData = randomTemplates(metaData)__                    break__                case 3:_                    metaData = randomMetaDataCustoms(metaData)__                    break__                default:_                    throw new IllegalArgumentException("Shouldn't be here")__            }_        }_        return ClusterState.builder(clusterState).metaData(MetaData.builder(metaData).version(metaData.version() + 1).build())__    };makes,random,metadata,changes;private,cluster,state,builder,random,meta,data,changes,cluster,state,cluster,state,meta,data,meta,data,cluster,state,meta,data,int,changes,count,random,int,between,1,10,for,int,i,0,i,changes,count,i,switch,random,int,3,case,0,meta,data,random,meta,data,settings,meta,data,break,case,1,meta,data,random,indices,meta,data,break,case,2,meta,data,random,templates,meta,data,break,case,3,meta,data,random,meta,data,customs,meta,data,break,default,throw,new,illegal,argument,exception,shouldn,t,be,here,return,cluster,state,builder,cluster,state,meta,data,meta,data,builder,meta,data,version,meta,data,version,1,build
ClusterStateDiffIT -> private ClusterState.Builder randomMetaDataChanges(ClusterState clusterState);1549356476;Makes random metadata changes;private ClusterState.Builder randomMetaDataChanges(ClusterState clusterState) {_        MetaData metaData = clusterState.metaData()__        int changesCount = randomIntBetween(1, 10)__        for (int i = 0_ i < changesCount_ i++) {_            switch (randomInt(3)) {_                case 0:_                    metaData = randomMetaDataSettings(metaData)__                    break__                case 1:_                    metaData = randomIndices(metaData)__                    break__                case 2:_                    metaData = randomTemplates(metaData)__                    break__                case 3:_                    metaData = randomMetaDataCustoms(metaData)__                    break__                default:_                    throw new IllegalArgumentException("Shouldn't be here")__            }_        }_        return ClusterState.builder(clusterState).metaData(MetaData.builder(metaData).version(metaData.version() + 1).build())__    };makes,random,metadata,changes;private,cluster,state,builder,random,meta,data,changes,cluster,state,cluster,state,meta,data,meta,data,cluster,state,meta,data,int,changes,count,random,int,between,1,10,for,int,i,0,i,changes,count,i,switch,random,int,3,case,0,meta,data,random,meta,data,settings,meta,data,break,case,1,meta,data,random,indices,meta,data,break,case,2,meta,data,random,templates,meta,data,break,case,3,meta,data,random,meta,data,customs,meta,data,break,default,throw,new,illegal,argument,exception,shouldn,t,be,here,return,cluster,state,builder,cluster,state,meta,data,meta,data,builder,meta,data,version,meta,data,version,1,build
ClusterStateDiffIT -> RandomPart -> ImmutableOpenMap<String, T> parts(MetaData metaData)_;1524684173;Returns list of parts from metadata;ImmutableOpenMap<String, T> parts(MetaData metaData)_;returns,list,of,parts,from,metadata;immutable,open,map,string,t,parts,meta,data,meta,data
ClusterStateDiffIT -> RandomPart -> ImmutableOpenMap<String, T> parts(MetaData metaData)_;1525248068;Returns list of parts from metadata;ImmutableOpenMap<String, T> parts(MetaData metaData)_;returns,list,of,parts,from,metadata;immutable,open,map,string,t,parts,meta,data,meta,data
ClusterStateDiffIT -> RandomPart -> ImmutableOpenMap<String, T> parts(MetaData metaData)_;1540847035;Returns list of parts from metadata;ImmutableOpenMap<String, T> parts(MetaData metaData)_;returns,list,of,parts,from,metadata;immutable,open,map,string,t,parts,meta,data,meta,data
ClusterStateDiffIT -> RandomPart -> ImmutableOpenMap<String, T> parts(MetaData metaData)_;1544081506;Returns list of parts from metadata;ImmutableOpenMap<String, T> parts(MetaData metaData)_;returns,list,of,parts,from,metadata;immutable,open,map,string,t,parts,meta,data,meta,data
ClusterStateDiffIT -> RandomPart -> ImmutableOpenMap<String, T> parts(MetaData metaData)_;1544783963;Returns list of parts from metadata;ImmutableOpenMap<String, T> parts(MetaData metaData)_;returns,list,of,parts,from,metadata;immutable,open,map,string,t,parts,meta,data,meta,data
ClusterStateDiffIT -> RandomPart -> ImmutableOpenMap<String, T> parts(MetaData metaData)_;1549356476;Returns list of parts from metadata;ImmutableOpenMap<String, T> parts(MetaData metaData)_;returns,list,of,parts,from,metadata;immutable,open,map,string,t,parts,meta,data,meta,data
ClusterStateDiffIT -> private <T> MetaData randomParts(MetaData metaData, String prefix, RandomPart<T> randomPart);1524684173;Takes an existing cluster state and randomly adds, removes or updates a metadata part using randomPart generator._If a new part is added the prefix value is used as a prefix of randomly generated part name.;private <T> MetaData randomParts(MetaData metaData, String prefix, RandomPart<T> randomPart) {_        MetaData.Builder builder = MetaData.builder(metaData)__        ImmutableOpenMap<String, T> parts = randomPart.parts(metaData)__        int partCount = parts.size()__        if (partCount > 0) {_            List<String> randomParts = randomSubsetOf(randomInt(partCount - 1), randomPart.parts(metaData).keys().toArray(String.class))__            for (String part : randomParts) {_                if (randomBoolean()) {_                    randomPart.remove(builder, part)__                } else {_                    randomPart.put(builder, randomPart.randomChange(parts.get(part)))__                }_            }_        }_        int additionalPartCount = randomIntBetween(1, 20)__        for (int i = 0_ i < additionalPartCount_ i++) {_            String name = randomName(prefix)__            randomPart.put(builder, randomPart.randomCreate(name))__        }_        return builder.build()__    };takes,an,existing,cluster,state,and,randomly,adds,removes,or,updates,a,metadata,part,using,random,part,generator,if,a,new,part,is,added,the,prefix,value,is,used,as,a,prefix,of,randomly,generated,part,name;private,t,meta,data,random,parts,meta,data,meta,data,string,prefix,random,part,t,random,part,meta,data,builder,builder,meta,data,builder,meta,data,immutable,open,map,string,t,parts,random,part,parts,meta,data,int,part,count,parts,size,if,part,count,0,list,string,random,parts,random,subset,of,random,int,part,count,1,random,part,parts,meta,data,keys,to,array,string,class,for,string,part,random,parts,if,random,boolean,random,part,remove,builder,part,else,random,part,put,builder,random,part,random,change,parts,get,part,int,additional,part,count,random,int,between,1,20,for,int,i,0,i,additional,part,count,i,string,name,random,name,prefix,random,part,put,builder,random,part,random,create,name,return,builder,build
ClusterStateDiffIT -> private <T> MetaData randomParts(MetaData metaData, String prefix, RandomPart<T> randomPart);1525248068;Takes an existing cluster state and randomly adds, removes or updates a metadata part using randomPart generator._If a new part is added the prefix value is used as a prefix of randomly generated part name.;private <T> MetaData randomParts(MetaData metaData, String prefix, RandomPart<T> randomPart) {_        MetaData.Builder builder = MetaData.builder(metaData)__        ImmutableOpenMap<String, T> parts = randomPart.parts(metaData)__        int partCount = parts.size()__        if (partCount > 0) {_            List<String> randomParts = randomSubsetOf(randomInt(partCount - 1), randomPart.parts(metaData).keys().toArray(String.class))__            for (String part : randomParts) {_                if (randomBoolean()) {_                    randomPart.remove(builder, part)__                } else {_                    randomPart.put(builder, randomPart.randomChange(parts.get(part)))__                }_            }_        }_        int additionalPartCount = randomIntBetween(1, 20)__        for (int i = 0_ i < additionalPartCount_ i++) {_            String name = randomName(prefix)__            randomPart.put(builder, randomPart.randomCreate(name))__        }_        return builder.build()__    };takes,an,existing,cluster,state,and,randomly,adds,removes,or,updates,a,metadata,part,using,random,part,generator,if,a,new,part,is,added,the,prefix,value,is,used,as,a,prefix,of,randomly,generated,part,name;private,t,meta,data,random,parts,meta,data,meta,data,string,prefix,random,part,t,random,part,meta,data,builder,builder,meta,data,builder,meta,data,immutable,open,map,string,t,parts,random,part,parts,meta,data,int,part,count,parts,size,if,part,count,0,list,string,random,parts,random,subset,of,random,int,part,count,1,random,part,parts,meta,data,keys,to,array,string,class,for,string,part,random,parts,if,random,boolean,random,part,remove,builder,part,else,random,part,put,builder,random,part,random,change,parts,get,part,int,additional,part,count,random,int,between,1,20,for,int,i,0,i,additional,part,count,i,string,name,random,name,prefix,random,part,put,builder,random,part,random,create,name,return,builder,build
ClusterStateDiffIT -> private <T> MetaData randomParts(MetaData metaData, String prefix, RandomPart<T> randomPart);1540847035;Takes an existing cluster state and randomly adds, removes or updates a metadata part using randomPart generator._If a new part is added the prefix value is used as a prefix of randomly generated part name.;private <T> MetaData randomParts(MetaData metaData, String prefix, RandomPart<T> randomPart) {_        MetaData.Builder builder = MetaData.builder(metaData)__        ImmutableOpenMap<String, T> parts = randomPart.parts(metaData)__        int partCount = parts.size()__        if (partCount > 0) {_            List<String> randomParts = randomSubsetOf(randomInt(partCount - 1),_                randomPart.parts(metaData).keys().toArray(String.class))__            for (String part : randomParts) {_                if (randomBoolean()) {_                    randomPart.remove(builder, part)__                } else {_                    randomPart.put(builder, randomPart.randomChange(parts.get(part)))__                }_            }_        }_        int additionalPartCount = randomIntBetween(1, 20)__        for (int i = 0_ i < additionalPartCount_ i++) {_            String name = randomName(prefix)__            randomPart.put(builder, randomPart.randomCreate(name))__        }_        return builder.build()__    };takes,an,existing,cluster,state,and,randomly,adds,removes,or,updates,a,metadata,part,using,random,part,generator,if,a,new,part,is,added,the,prefix,value,is,used,as,a,prefix,of,randomly,generated,part,name;private,t,meta,data,random,parts,meta,data,meta,data,string,prefix,random,part,t,random,part,meta,data,builder,builder,meta,data,builder,meta,data,immutable,open,map,string,t,parts,random,part,parts,meta,data,int,part,count,parts,size,if,part,count,0,list,string,random,parts,random,subset,of,random,int,part,count,1,random,part,parts,meta,data,keys,to,array,string,class,for,string,part,random,parts,if,random,boolean,random,part,remove,builder,part,else,random,part,put,builder,random,part,random,change,parts,get,part,int,additional,part,count,random,int,between,1,20,for,int,i,0,i,additional,part,count,i,string,name,random,name,prefix,random,part,put,builder,random,part,random,create,name,return,builder,build
ClusterStateDiffIT -> private <T> MetaData randomParts(MetaData metaData, String prefix, RandomPart<T> randomPart);1544081506;Takes an existing cluster state and randomly adds, removes or updates a metadata part using randomPart generator._If a new part is added the prefix value is used as a prefix of randomly generated part name.;private <T> MetaData randomParts(MetaData metaData, String prefix, RandomPart<T> randomPart) {_        MetaData.Builder builder = MetaData.builder(metaData)__        ImmutableOpenMap<String, T> parts = randomPart.parts(metaData)__        int partCount = parts.size()__        if (partCount > 0) {_            List<String> randomParts = randomSubsetOf(randomInt(partCount - 1),_                randomPart.parts(metaData).keys().toArray(String.class))__            for (String part : randomParts) {_                if (randomBoolean()) {_                    randomPart.remove(builder, part)__                } else {_                    randomPart.put(builder, randomPart.randomChange(parts.get(part)))__                }_            }_        }_        int additionalPartCount = randomIntBetween(1, 20)__        for (int i = 0_ i < additionalPartCount_ i++) {_            String name = randomName(prefix)__            randomPart.put(builder, randomPart.randomCreate(name))__        }_        return builder.build()__    };takes,an,existing,cluster,state,and,randomly,adds,removes,or,updates,a,metadata,part,using,random,part,generator,if,a,new,part,is,added,the,prefix,value,is,used,as,a,prefix,of,randomly,generated,part,name;private,t,meta,data,random,parts,meta,data,meta,data,string,prefix,random,part,t,random,part,meta,data,builder,builder,meta,data,builder,meta,data,immutable,open,map,string,t,parts,random,part,parts,meta,data,int,part,count,parts,size,if,part,count,0,list,string,random,parts,random,subset,of,random,int,part,count,1,random,part,parts,meta,data,keys,to,array,string,class,for,string,part,random,parts,if,random,boolean,random,part,remove,builder,part,else,random,part,put,builder,random,part,random,change,parts,get,part,int,additional,part,count,random,int,between,1,20,for,int,i,0,i,additional,part,count,i,string,name,random,name,prefix,random,part,put,builder,random,part,random,create,name,return,builder,build
ClusterStateDiffIT -> private <T> MetaData randomParts(MetaData metaData, String prefix, RandomPart<T> randomPart);1544783963;Takes an existing cluster state and randomly adds, removes or updates a metadata part using randomPart generator._If a new part is added the prefix value is used as a prefix of randomly generated part name.;private <T> MetaData randomParts(MetaData metaData, String prefix, RandomPart<T> randomPart) {_        MetaData.Builder builder = MetaData.builder(metaData)__        ImmutableOpenMap<String, T> parts = randomPart.parts(metaData)__        int partCount = parts.size()__        if (partCount > 0) {_            List<String> randomParts = randomSubsetOf(randomInt(partCount - 1),_                randomPart.parts(metaData).keys().toArray(String.class))__            for (String part : randomParts) {_                if (randomBoolean()) {_                    randomPart.remove(builder, part)__                } else {_                    randomPart.put(builder, randomPart.randomChange(parts.get(part)))__                }_            }_        }_        int additionalPartCount = randomIntBetween(1, 20)__        for (int i = 0_ i < additionalPartCount_ i++) {_            String name = randomName(prefix)__            randomPart.put(builder, randomPart.randomCreate(name))__        }_        return builder.build()__    };takes,an,existing,cluster,state,and,randomly,adds,removes,or,updates,a,metadata,part,using,random,part,generator,if,a,new,part,is,added,the,prefix,value,is,used,as,a,prefix,of,randomly,generated,part,name;private,t,meta,data,random,parts,meta,data,meta,data,string,prefix,random,part,t,random,part,meta,data,builder,builder,meta,data,builder,meta,data,immutable,open,map,string,t,parts,random,part,parts,meta,data,int,part,count,parts,size,if,part,count,0,list,string,random,parts,random,subset,of,random,int,part,count,1,random,part,parts,meta,data,keys,to,array,string,class,for,string,part,random,parts,if,random,boolean,random,part,remove,builder,part,else,random,part,put,builder,random,part,random,change,parts,get,part,int,additional,part,count,random,int,between,1,20,for,int,i,0,i,additional,part,count,i,string,name,random,name,prefix,random,part,put,builder,random,part,random,create,name,return,builder,build
ClusterStateDiffIT -> private <T> MetaData randomParts(MetaData metaData, String prefix, RandomPart<T> randomPart);1549356476;Takes an existing cluster state and randomly adds, removes or updates a metadata part using randomPart generator._If a new part is added the prefix value is used as a prefix of randomly generated part name.;private <T> MetaData randomParts(MetaData metaData, String prefix, RandomPart<T> randomPart) {_        MetaData.Builder builder = MetaData.builder(metaData)__        ImmutableOpenMap<String, T> parts = randomPart.parts(metaData)__        int partCount = parts.size()__        if (partCount > 0) {_            List<String> randomParts = randomSubsetOf(randomInt(partCount - 1),_                randomPart.parts(metaData).keys().toArray(String.class))__            for (String part : randomParts) {_                if (randomBoolean()) {_                    randomPart.remove(builder, part)__                } else {_                    randomPart.put(builder, randomPart.randomChange(parts.get(part)))__                }_            }_        }_        int additionalPartCount = randomIntBetween(1, 20)__        for (int i = 0_ i < additionalPartCount_ i++) {_            String name = randomName(prefix)__            randomPart.put(builder, randomPart.randomCreate(name))__        }_        return builder.build()__    };takes,an,existing,cluster,state,and,randomly,adds,removes,or,updates,a,metadata,part,using,random,part,generator,if,a,new,part,is,added,the,prefix,value,is,used,as,a,prefix,of,randomly,generated,part,name;private,t,meta,data,random,parts,meta,data,meta,data,string,prefix,random,part,t,random,part,meta,data,builder,builder,meta,data,builder,meta,data,immutable,open,map,string,t,parts,random,part,parts,meta,data,int,part,count,parts,size,if,part,count,0,list,string,random,parts,random,subset,of,random,int,part,count,1,random,part,parts,meta,data,keys,to,array,string,class,for,string,part,random,parts,if,random,boolean,random,part,remove,builder,part,else,random,part,put,builder,random,part,random,change,parts,get,part,int,additional,part,count,random,int,between,1,20,for,int,i,0,i,additional,part,count,i,string,name,random,name,prefix,random,part,put,builder,random,part,random,create,name,return,builder,build
ClusterStateDiffIT -> RandomClusterPart -> ImmutableOpenMap<String, T> parts(ClusterState clusterState)_;1524684173;Returns list of parts from metadata;ImmutableOpenMap<String, T> parts(ClusterState clusterState)_;returns,list,of,parts,from,metadata;immutable,open,map,string,t,parts,cluster,state,cluster,state
ClusterStateDiffIT -> RandomClusterPart -> ImmutableOpenMap<String, T> parts(ClusterState clusterState)_;1525248068;Returns list of parts from metadata;ImmutableOpenMap<String, T> parts(ClusterState clusterState)_;returns,list,of,parts,from,metadata;immutable,open,map,string,t,parts,cluster,state,cluster,state
ClusterStateDiffIT -> RandomClusterPart -> ImmutableOpenMap<String, T> parts(ClusterState clusterState)_;1540847035;Returns list of parts from metadata;ImmutableOpenMap<String, T> parts(ClusterState clusterState)_;returns,list,of,parts,from,metadata;immutable,open,map,string,t,parts,cluster,state,cluster,state
ClusterStateDiffIT -> RandomClusterPart -> ImmutableOpenMap<String, T> parts(ClusterState clusterState)_;1544081506;Returns list of parts from metadata;ImmutableOpenMap<String, T> parts(ClusterState clusterState)_;returns,list,of,parts,from,metadata;immutable,open,map,string,t,parts,cluster,state,cluster,state
ClusterStateDiffIT -> RandomClusterPart -> ImmutableOpenMap<String, T> parts(ClusterState clusterState)_;1544783963;Returns list of parts from metadata;ImmutableOpenMap<String, T> parts(ClusterState clusterState)_;returns,list,of,parts,from,metadata;immutable,open,map,string,t,parts,cluster,state,cluster,state
ClusterStateDiffIT -> RandomClusterPart -> ImmutableOpenMap<String, T> parts(ClusterState clusterState)_;1549356476;Returns list of parts from metadata;ImmutableOpenMap<String, T> parts(ClusterState clusterState)_;returns,list,of,parts,from,metadata;immutable,open,map,string,t,parts,cluster,state,cluster,state
