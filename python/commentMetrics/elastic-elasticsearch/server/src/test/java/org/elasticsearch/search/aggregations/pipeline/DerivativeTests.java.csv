commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;20;;@Override protected DerivativePipelineAggregationBuilder createTestAggregatorFactory() {     String name = randomAlphaOfLengthBetween(3, 20).     String bucketsPath = randomAlphaOfLengthBetween(3, 20).     DerivativePipelineAggregationBuilder factory = new DerivativePipelineAggregationBuilder(name, bucketsPath).     if (randomBoolean()) {         factory.format(randomAlphaOfLengthBetween(1, 10)).     }     if (randomBoolean()) {         factory.gapPolicy(randomFrom(GapPolicy.values())).     }     if (randomBoolean()) {         if (randomBoolean()) {             factory.unit(String.valueOf(randomInt())).         } else {             factory.unit(String.valueOf(randomIntBetween(1, 10) + randomFrom("s", "m", "h", "d", "w", "M", "y"))).         }     }     return factory. }
true;public;0;7;/**  * The validation should verify the parent aggregation is allowed.  */ ;/**  * The validation should verify the parent aggregation is allowed.  */ public void testValidate() throws IOException {     final Set<PipelineAggregationBuilder> aggBuilders = new HashSet<>().     aggBuilders.add(new DerivativePipelineAggregationBuilder("deriv", "der")).     final DerivativePipelineAggregationBuilder builder = new DerivativePipelineAggregationBuilder("name", "valid").     builder.validate(PipelineAggregationHelperTests.getRandomSequentiallyOrderedParentAgg(), Collections.emptySet(), aggBuilders). }
true;public;0;11;/**  * The validation should throw an IllegalArgumentException, since parent  * aggregation is not a type of HistogramAggregatorFactory,  * DateHistogramAggregatorFactory or AutoDateHistogramAggregatorFactory.  */ ;/**  * The validation should throw an IllegalArgumentException, since parent  * aggregation is not a type of HistogramAggregatorFactory,  * DateHistogramAggregatorFactory or AutoDateHistogramAggregatorFactory.  */ public void testValidateException() throws IOException {     final Set<PipelineAggregationBuilder> aggBuilders = new HashSet<>().     aggBuilders.add(new DerivativePipelineAggregationBuilder("deriv", "der")).     TestAggregatorFactory parentFactory = TestAggregatorFactory.createInstance().     final DerivativePipelineAggregationBuilder builder = new DerivativePipelineAggregationBuilder("name", "invalid_agg>metric").     IllegalStateException ex = expectThrows(IllegalStateException.class, () -> builder.validate(parentFactory, Collections.emptySet(), aggBuilders)).     assertEquals("derivative aggregation [name] must have a histogram, date_histogram or auto_date_histogram as parent", ex.getMessage()). }
