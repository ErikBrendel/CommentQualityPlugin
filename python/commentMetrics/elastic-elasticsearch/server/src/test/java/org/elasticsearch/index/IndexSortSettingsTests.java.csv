commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;3;;private static IndexSettings indexSettings(Settings settings) {     return indexSettings(settings, null). }
false;private,static;2;12;;private static IndexSettings indexSettings(Settings settings, Version version) {     final Settings newSettings.     if (version != null) {         newSettings = Settings.builder().put(settings).put(IndexMetaData.SETTING_VERSION_CREATED, version).build().     } else {         newSettings = settings.     }     return new IndexSettings(newIndexMeta("test", newSettings), Settings.EMPTY). }
false;public;0;4;;public void testNoIndexSort() throws IOException {     IndexSettings indexSettings = indexSettings(EMPTY_SETTINGS).     assertFalse(indexSettings.getIndexSortConfig().hasIndexSort()). }
false;public;0;17;;public void testSimpleIndexSort() throws IOException {     Settings settings = Settings.builder().put("index.sort.field", "field1").put("index.sort.order", "asc").put("index.sort.mode", "max").put("index.sort.missing", "_last").build().     IndexSettings indexSettings = indexSettings(settings).     IndexSortConfig config = indexSettings.getIndexSortConfig().     assertTrue(config.hasIndexSort()).     assertThat(config.sortSpecs.length, equalTo(1)).     assertThat(config.sortSpecs[0].field, equalTo("field1")).     assertThat(config.sortSpecs[0].order, equalTo(SortOrder.ASC)).     assertThat(config.sortSpecs[0].missingValue, equalTo("_last")).     assertThat(config.sortSpecs[0].mode, equalTo(MultiValueMode.MAX)). }
false;public;0;20;;public void testIndexSortWithArrays() throws IOException {     Settings settings = Settings.builder().putList("index.sort.field", "field1", "field2").putList("index.sort.order", "asc", "desc").putList("index.sort.missing", "_last", "_first").build().     IndexSettings indexSettings = indexSettings(settings).     IndexSortConfig config = indexSettings.getIndexSortConfig().     assertTrue(config.hasIndexSort()).     assertThat(config.sortSpecs.length, equalTo(2)).     assertThat(config.sortSpecs[0].field, equalTo("field1")).     assertThat(config.sortSpecs[1].field, equalTo("field2")).     assertThat(config.sortSpecs[0].order, equalTo(SortOrder.ASC)).     assertThat(config.sortSpecs[1].order, equalTo(SortOrder.DESC)).     assertThat(config.sortSpecs[0].missingValue, equalTo("_last")).     assertThat(config.sortSpecs[1].missingValue, equalTo("_first")).     assertNull(config.sortSpecs[0].mode).     assertNull(config.sortSpecs[1].mode). }
false;public;0;9;;public void testInvalidIndexSort() throws IOException {     final Settings settings = Settings.builder().put("index.sort.field", "field1").put("index.sort.order", "asc, desc").build().     IllegalArgumentException exc = expectThrows(IllegalArgumentException.class, () -> indexSettings(settings)).     assertThat(exc.getMessage(), containsString("index.sort.field:[field1] index.sort.order:[asc, desc], size mismatch")). }
false;public;0;10;;public void testInvalidIndexSortWithArray() throws IOException {     final Settings settings = Settings.builder().put("index.sort.field", "field1").putList("index.sort.order", new String[] { "asc", "desc" }).build().     IllegalArgumentException exc = expectThrows(IllegalArgumentException.class, () -> indexSettings(settings)).     assertThat(exc.getMessage(), containsString("index.sort.field:[field1] index.sort.order:[asc, desc], size mismatch")). }
false;public;0;9;;public void testInvalidOrder() throws IOException {     final Settings settings = Settings.builder().put("index.sort.field", "field1").put("index.sort.order", "invalid").build().     IllegalArgumentException exc = expectThrows(IllegalArgumentException.class, () -> indexSettings(settings)).     assertThat(exc.getMessage(), containsString("Illegal sort order:invalid")). }
false;public;0;9;;public void testInvalidMode() throws IOException {     final Settings settings = Settings.builder().put("index.sort.field", "field1").put("index.sort.mode", "invalid").build().     IllegalArgumentException exc = expectThrows(IllegalArgumentException.class, () -> indexSettings(settings)).     assertThat(exc.getMessage(), containsString("Illegal sort mode: invalid")). }
false;public;0;10;;public void testInvalidMissing() throws IOException {     final Settings settings = Settings.builder().put("index.sort.field", "field1").put("index.sort.missing", "default").build().     IllegalArgumentException exc = expectThrows(IllegalArgumentException.class, () -> indexSettings(settings)).     assertThat(exc.getMessage(), containsString("Illegal missing value:[default]," + " must be one of [_last, _first]")). }
