commented;modifiers;parameterAmount;loc;comment;code
false;public;0;27;;public void testValidation() {     PutMappingRequest r = new PutMappingRequest("myindex").type("").     ActionRequestValidationException ex = r.validate().     assertNotNull("type validation should fail", ex).     assertTrue(ex.getMessage().contains("type is empty")).     r.type("mytype").     ex = r.validate().     assertNotNull("source validation should fail", ex).     assertTrue(ex.getMessage().contains("source is missing")).     r.source("", XContentType.JSON).     ex = r.validate().     assertNotNull("source validation should fail", ex).     assertTrue(ex.getMessage().contains("source is empty")).     r.source("somevalidmapping", XContentType.JSON).     ex = r.validate().     assertNull("validation should succeed", ex).     r.setConcreteIndex(new Index("foo", "bar")).     ex = r.validate().     assertNotNull("source validation should fail", ex).     assertEquals(ex.getMessage(), "Validation Failed: 1: either concrete index or unresolved indices can be set," + " concrete index: [[foo/bar]] and indices: [myindex]."). }
true;public;0;5;/**  * Test that {@link PutMappingRequest#buildFromSimplifiedDef(String, Object...)}  * rejects inputs where the {@code Object...} varargs of field name and properties are not  * paired correctly  */ ;/**  * Test that {@link PutMappingRequest#buildFromSimplifiedDef(String, Object...)}  * rejects inputs where the {@code Object...} varargs of field name and properties are not  * paired correctly  */ public void testBuildFromSimplifiedDef() {     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> PutMappingRequest.buildFromSimplifiedDef("type", "only_field")).     assertEquals("mapping source must be pairs of fieldnames and properties definition.", e.getMessage()). }
false;public;0;17;;public void testToXContent() throws IOException {     PutMappingRequest request = new PutMappingRequest("foo").     request.type("my_type").     XContentBuilder mapping = JsonXContent.contentBuilder().startObject().     mapping.startObject("properties").     mapping.startObject("email").     mapping.field("type", "text").     mapping.endObject().     mapping.endObject().     mapping.endObject().     request.source(mapping).     String actualRequestBody = Strings.toString(request).     String expectedRequestBody = "{\"properties\":{\"email\":{\"type\":\"text\"}}}".     assertEquals(expectedRequestBody, actualRequestBody). }
false;public;0;8;;public void testToXContentWithEmptySource() throws IOException {     PutMappingRequest request = new PutMappingRequest("foo").     request.type("my_type").     String actualRequestBody = Strings.toString(request).     String expectedRequestBody = "{}".     assertEquals(expectedRequestBody, actualRequestBody). }
false;public;0;13;;public void testToAndFromXContent() throws IOException {     final PutMappingRequest putMappingRequest = createTestItem().     boolean humanReadable = randomBoolean().     final XContentType xContentType = randomFrom(XContentType.values()).     BytesReference originalBytes = toShuffledXContent(putMappingRequest, xContentType, EMPTY_PARAMS, humanReadable).     PutMappingRequest parsedPutMappingRequest = new PutMappingRequest().     parsedPutMappingRequest.source(originalBytes, xContentType).     assertMappingsEqual(putMappingRequest.source(), parsedPutMappingRequest.source()). }
false;private;2;7;;private void assertMappingsEqual(String expected, String actual) throws IOException {     try (XContentParser expectedJson = createParser(XContentType.JSON.xContent(), expected).         XContentParser actualJson = createParser(XContentType.JSON.xContent(), actual)) {         assertEquals(expectedJson.mapOrdered(), actualJson.mapOrdered()).     } }
true;private,static;0;11;/**  * Returns a random {@link PutMappingRequest}.  */ ;/**  * Returns a random {@link PutMappingRequest}.  */ private static PutMappingRequest createTestItem() throws IOException {     String index = randomAlphaOfLength(5).     PutMappingRequest request = new PutMappingRequest(index).     String type = randomAlphaOfLength(5).     request.type(type).     request.source(RandomCreateIndexGenerator.randomMapping(type)).     return request. }
