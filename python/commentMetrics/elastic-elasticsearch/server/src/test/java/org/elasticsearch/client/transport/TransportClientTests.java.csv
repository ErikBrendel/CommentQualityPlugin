commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;public void testThatUsingAClosedClientThrowsAnException() throws ExecutionException, InterruptedException {     final TransportClient client = new MockTransportClient(Settings.EMPTY).     client.close().     final IllegalStateException e = expectThrows(IllegalStateException.class, () -> client.admin().cluster().health(new ClusterHealthRequest()).get()).     assertThat(e, hasToString(containsString("transport client is closed"))). }
true;public;0;8;/**  * test that when plugins are provided that want to register  * {@link NamedWriteable}, those are also made known to the  * {@link NamedWriteableRegistry} of the transport client  */ ;/**  * test that when plugins are provided that want to register  * {@link NamedWriteable}, those are also made known to the  * {@link NamedWriteableRegistry} of the transport client  */ public void testPluginNamedWriteablesRegistered() {     Settings baseSettings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()).build().     try (TransportClient client = new MockTransportClient(baseSettings, Arrays.asList(MockPlugin.class))) {         assertNotNull(client.namedWriteableRegistry.getReader(MockPlugin.MockNamedWriteable.class, MockPlugin.MockNamedWriteable.NAME)).     } }
false;public;0;10;;public void testSettingsContainsTransportClient() {     final Settings baseSettings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()).build().     try (TransportClient client = new MockTransportClient(baseSettings, Arrays.asList(MockPlugin.class))) {         final Settings settings = TransportSettings.DEFAULT_FEATURES_SETTING.get(client.settings()).         assertThat(settings.keySet(), hasItem("transport_client")).         assertThat(settings.get("transport_client"), equalTo("true")).     } }
false;public;0;9;;public void testDefaultHeader() {     final Settings baseSettings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()).build().     try (TransportClient client = new MockTransportClient(baseSettings, Arrays.asList(MockPlugin.class))) {         final ThreadContext threadContext = client.threadPool().getThreadContext().         assertEquals("true", threadContext.getHeader("test")).     } }
false;public;0;4;;@Override public List<Entry> getNamedWriteables() {     return Arrays.asList(new Entry[] { new Entry(MockNamedWriteable.class, MockNamedWriteable.NAME, MockNamedWriteable::new) }). }
false;public;0;4;;@Override public Settings additionalSettings() {     return Settings.builder().put(ThreadContext.PREFIX + "." + "test", true).build(). }
false;public;1;3;;@Override public void writeTo(StreamOutput out) throws IOException { }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
