commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;public void testRunOnce() {     final AtomicInteger counter = new AtomicInteger(0).     final RunOnce runOnce = new RunOnce(counter::incrementAndGet).     assertFalse(runOnce.hasRun()).     runOnce.run().     assertTrue(runOnce.hasRun()).     assertEquals(1, counter.get()).     runOnce.run().     assertTrue(runOnce.hasRun()).     assertEquals(1, counter.get()). }
false;public;0;25;;public void testRunOnceConcurrently() throws InterruptedException {     final AtomicInteger counter = new AtomicInteger(0).     final RunOnce runOnce = new RunOnce(counter::incrementAndGet).     final Thread[] threads = new Thread[between(3, 10)].     final CountDownLatch latch = new CountDownLatch(1).     for (int i = 0. i < threads.length. i++) {         threads[i] = new Thread(() -> {             try {                 latch.await().             } catch (InterruptedException e) {                 throw new RuntimeException(e).             }             runOnce.run().         }).         threads[i].start().     }     latch.countDown().     for (Thread thread : threads) {         thread.join().     }     assertTrue(runOnce.hasRun()).     assertEquals(1, counter.get()). }
false;protected;0;5;;@Override protected void doRun() throws Exception {     onRun.incrementAndGet().     throw new RuntimeException("failure"). }
false;public;1;4;;@Override public void onFailure(Exception e) {     onFailure.incrementAndGet(). }
false;public;0;4;;@Override public void onAfter() {     onAfter.incrementAndGet(). }
false;public;0;32;;public void testRunOnceWithAbstractRunnable() {     final AtomicInteger onRun = new AtomicInteger(0).     final AtomicInteger onFailure = new AtomicInteger(0).     final AtomicInteger onAfter = new AtomicInteger(0).     final RunOnce runOnce = new RunOnce(new AbstractRunnable() {          @Override         protected void doRun() throws Exception {             onRun.incrementAndGet().             throw new RuntimeException("failure").         }          @Override         public void onFailure(Exception e) {             onFailure.incrementAndGet().         }          @Override         public void onAfter() {             onAfter.incrementAndGet().         }     }).     final int iterations = randomIntBetween(1, 10).     for (int i = 0. i < iterations. i++) {         runOnce.run().         assertEquals(1, onRun.get()).         assertEquals(1, onFailure.get()).         assertEquals(1, onAfter.get()).         assertTrue(runOnce.hasRun()).     } }
