commented;modifiers;parameterAmount;loc;comment;code
false;public;0;74;;public void testRepositoryCreation() throws Exception {     Client client = client().     Path location = randomRepoPath().     logger.info("-->  creating repository").     AcknowledgedResponse putRepositoryResponse = client.admin().cluster().preparePutRepository("test-repo-1").setType("fs").setSettings(Settings.builder().put("location", location)).get().     assertThat(putRepositoryResponse.isAcknowledged(), equalTo(true)).     logger.info("--> verify the repository").     int numberOfFiles = FileSystemUtils.files(location).length.     VerifyRepositoryResponse verifyRepositoryResponse = client.admin().cluster().prepareVerifyRepository("test-repo-1").get().     assertThat(verifyRepositoryResponse.getNodes().size(), equalTo(cluster().numDataAndMasterNodes())).     logger.info("--> verify that we didn't leave any files as a result of verification").     assertThat(FileSystemUtils.files(location).length, equalTo(numberOfFiles)).     logger.info("--> check that repository is really there").     ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().clear().setMetaData(true).get().     MetaData metaData = clusterStateResponse.getState().getMetaData().     RepositoriesMetaData repositoriesMetaData = metaData.custom(RepositoriesMetaData.TYPE).     assertThat(repositoriesMetaData, notNullValue()).     assertThat(repositoriesMetaData.repository("test-repo-1"), notNullValue()).     assertThat(repositoriesMetaData.repository("test-repo-1").type(), equalTo("fs")).     logger.info("-->  creating another repository").     putRepositoryResponse = client.admin().cluster().preparePutRepository("test-repo-2").setType("fs").setSettings(Settings.builder().put("location", randomRepoPath())).get().     assertThat(putRepositoryResponse.isAcknowledged(), equalTo(true)).     logger.info("--> check that both repositories are in cluster state").     clusterStateResponse = client.admin().cluster().prepareState().clear().setMetaData(true).get().     metaData = clusterStateResponse.getState().getMetaData().     repositoriesMetaData = metaData.custom(RepositoriesMetaData.TYPE).     assertThat(repositoriesMetaData, notNullValue()).     assertThat(repositoriesMetaData.repositories().size(), equalTo(2)).     assertThat(repositoriesMetaData.repository("test-repo-1"), notNullValue()).     assertThat(repositoriesMetaData.repository("test-repo-1").type(), equalTo("fs")).     assertThat(repositoriesMetaData.repository("test-repo-2"), notNullValue()).     assertThat(repositoriesMetaData.repository("test-repo-2").type(), equalTo("fs")).     logger.info("--> check that both repositories can be retrieved by getRepositories query").     GetRepositoriesResponse repositoriesResponse = client.admin().cluster().prepareGetRepositories(randomFrom("_all", "*", "test-repo-*")).get().     assertThat(repositoriesResponse.repositories().size(), equalTo(2)).     assertThat(findRepository(repositoriesResponse.repositories(), "test-repo-1"), notNullValue()).     assertThat(findRepository(repositoriesResponse.repositories(), "test-repo-2"), notNullValue()).     logger.info("--> check that trying to create a repository with the same settings repeatedly does not update cluster state").     String beforeStateUuid = clusterStateResponse.getState().stateUUID().     assertThat(client.admin().cluster().preparePutRepository("test-repo-1").setType("fs").setSettings(Settings.builder().put("location", location)).get().isAcknowledged(), equalTo(true)).     assertEquals(beforeStateUuid, client.admin().cluster().prepareState().clear().get().getState().stateUUID()).     logger.info("--> delete repository test-repo-1").     client.admin().cluster().prepareDeleteRepository("test-repo-1").get().     repositoriesResponse = client.admin().cluster().prepareGetRepositories().get().     assertThat(repositoriesResponse.repositories().size(), equalTo(1)).     assertThat(findRepository(repositoriesResponse.repositories(), "test-repo-2"), notNullValue()).     logger.info("--> delete repository test-repo-2").     client.admin().cluster().prepareDeleteRepository("test-repo-2").get().     repositoriesResponse = client.admin().cluster().prepareGetRepositories().get().     assertThat(repositoriesResponse.repositories().size(), equalTo(0)). }
false;private;2;8;;private RepositoryMetaData findRepository(List<RepositoryMetaData> repositories, String name) {     for (RepositoryMetaData repository : repositories) {         if (repository.name().equals(name)) {             return repository.         }     }     return null. }
false;public;0;24;;public void testMisconfiguredRepository() throws Exception {     Client client = client().     logger.info("--> trying creating repository with incorrect settings").     try {         client.admin().cluster().preparePutRepository("test-repo").setType("fs").get().         fail("Shouldn't be here").     } catch (RepositoryException ex) {         assertThat(ex.toString(), containsString("missing location")).     }     logger.info("--> trying creating fs repository with location that is not registered in path.repo setting").     Path invalidRepoPath = createTempDir().toAbsolutePath().     String location = invalidRepoPath.toString().     try {         client().admin().cluster().preparePutRepository("test-repo").setType("fs").setSettings(Settings.builder().put("location", location)).get().         fail("Shouldn't be here").     } catch (RepositoryException ex) {         assertThat(ex.toString(), containsString("location [" + location + "] doesn't match any of the locations specified " + "by path.repo")).     } }
false;public;0;29;;public void testRepositoryAckTimeout() throws Exception {     logger.info("-->  creating repository test-repo-1 with 0s timeout - shouldn't ack").     AcknowledgedResponse putRepositoryResponse = client().admin().cluster().preparePutRepository("test-repo-1").setType("fs").setSettings(Settings.builder().put("location", randomRepoPath()).put("compress", randomBoolean()).put("chunk_size", randomIntBetween(5, 100), ByteSizeUnit.BYTES)).setTimeout("0s").get().     assertThat(putRepositoryResponse.isAcknowledged(), equalTo(false)).     logger.info("-->  creating repository test-repo-2 with standard timeout - should ack").     putRepositoryResponse = client().admin().cluster().preparePutRepository("test-repo-2").setType("fs").setSettings(Settings.builder().put("location", randomRepoPath()).put("compress", randomBoolean()).put("chunk_size", randomIntBetween(5, 100), ByteSizeUnit.BYTES)).get().     assertThat(putRepositoryResponse.isAcknowledged(), equalTo(true)).     logger.info("-->  deleting repository test-repo-2 with 0s timeout - shouldn't ack").     AcknowledgedResponse deleteRepositoryResponse = client().admin().cluster().prepareDeleteRepository("test-repo-2").setTimeout("0s").get().     assertThat(deleteRepositoryResponse.isAcknowledged(), equalTo(false)).     logger.info("-->  deleting repository test-repo-1 with standard timeout - should ack").     deleteRepositoryResponse = client().admin().cluster().prepareDeleteRepository("test-repo-1").get().     assertThat(deleteRepositoryResponse.isAcknowledged(), equalTo(true)). }
false;public;0;47;;public void testRepositoryVerification() throws Exception {     Client client = client().     Settings settings = Settings.builder().put("location", randomRepoPath()).put("random_control_io_exception_rate", 1.0).build().     Settings readonlySettings = Settings.builder().put(settings).put("readonly", true).build().     logger.info("-->  creating repository that cannot write any files - should fail").     assertThrows(client.admin().cluster().preparePutRepository("test-repo-1").setType("mock").setSettings(settings), RepositoryVerificationException.class).     logger.info("-->  creating read-only repository that cannot read any files - should fail").     assertThrows(client.admin().cluster().preparePutRepository("test-repo-2").setType("mock").setSettings(readonlySettings), RepositoryVerificationException.class).     logger.info("-->  creating repository that cannot write any files, but suppress verification - should be acked").     assertAcked(client.admin().cluster().preparePutRepository("test-repo-1").setType("mock").setSettings(settings).setVerify(false)).     logger.info("-->  verifying repository").     assertThrows(client.admin().cluster().prepareVerifyRepository("test-repo-1"), RepositoryVerificationException.class).     logger.info("-->  creating read-only repository that cannot read any files, but suppress verification - should be acked").     assertAcked(client.admin().cluster().preparePutRepository("test-repo-2").setType("mock").setSettings(readonlySettings).setVerify(false)).     logger.info("-->  verifying repository").     assertThrows(client.admin().cluster().prepareVerifyRepository("test-repo-2"), RepositoryVerificationException.class).     Path location = randomRepoPath().     logger.info("-->  creating repository").     try {         client.admin().cluster().preparePutRepository("test-repo-1").setType("mock").setSettings(Settings.builder().put("location", location).put("localize_location", true)).get().         fail("RepositoryVerificationException wasn't generated").     } catch (RepositoryVerificationException ex) {         assertThat(ex.getMessage(), containsString("is not shared")).     } }
