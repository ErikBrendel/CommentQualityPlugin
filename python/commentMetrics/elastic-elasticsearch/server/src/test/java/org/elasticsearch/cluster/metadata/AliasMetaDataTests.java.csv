commented;modifiers;parameterAmount;loc;comment;code
false;public;0;21;;public void testSerialization() throws IOException {     final AliasMetaData before = AliasMetaData.builder("alias").filter("{ \"term\": \"foo\"}").indexRouting("indexRouting").routing("routing").searchRouting("trim,tw , ltw , lw").writeIndex(randomBoolean() ? null : randomBoolean()).build().     assertThat(before.searchRoutingValues(), equalTo(Sets.newHashSet("trim", "tw ", " ltw ", " lw"))).     final BytesStreamOutput out = new BytesStreamOutput().     before.writeTo(out).     final StreamInput in = out.bytes().streamInput().     final AliasMetaData after = new AliasMetaData(in).     assertThat(after, equalTo(before)). }
false;protected;2;14;;@Override protected void assertEqualInstances(AliasMetaData expectedInstance, AliasMetaData newInstance) {     assertNotSame(newInstance, expectedInstance).     if (expectedInstance.writeIndex() == null) {         expectedInstance = AliasMetaData.builder(expectedInstance.alias()).filter(expectedInstance.filter()).indexRouting(expectedInstance.indexRouting()).searchRouting(expectedInstance.searchRouting()).writeIndex(randomBoolean() ? null : randomBoolean()).build().     }     assertEquals(expectedInstance, newInstance).     assertEquals(expectedInstance.hashCode(), newInstance.hashCode()). }
false;protected;0;4;;@Override protected AliasMetaData createTestInstance() {     return createTestItem(). }
false;protected;0;5;;@Override protected Predicate<String> getRandomFieldsExcludeFilter() {     return p -> // do not add elements at the top-level as any element at this level is parsed as a new alias     p.equals("") || // do not insert random data into AliasMetaData#filter     p.contains(".filter"). }
false;protected;1;10;;@Override protected AliasMetaData doParseInstance(XContentParser parser) throws IOException {     if (parser.nextToken() == XContentParser.Token.START_OBJECT) {         parser.nextToken().     }     assertEquals(XContentParser.Token.FIELD_NAME, parser.currentToken()).     AliasMetaData aliasMetaData = AliasMetaData.Builder.fromXContent(parser).     assertEquals(XContentParser.Token.END_OBJECT, parser.nextToken()).     return aliasMetaData. }
false;protected;0;4;;@Override protected boolean supportsUnknownFields() {     return true. }
false;private,static;0;17;;private static AliasMetaData createTestItem() {     Builder builder = AliasMetaData.builder(randomAlphaOfLengthBetween(3, 10)).     if (randomBoolean()) {         builder.routing(randomAlphaOfLengthBetween(3, 10)).     }     if (randomBoolean()) {         builder.searchRouting(randomAlphaOfLengthBetween(3, 10)).     }     if (randomBoolean()) {         builder.indexRouting(randomAlphaOfLengthBetween(3, 10)).     }     if (randomBoolean()) {         builder.filter("{\"term\":{\"year\":2016}}").     }     builder.writeIndex(randomBoolean()).     return builder.build(). }
