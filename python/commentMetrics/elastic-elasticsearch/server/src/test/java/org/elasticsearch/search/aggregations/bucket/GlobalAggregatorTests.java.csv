commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;public void testNoDocs() throws IOException {     testCase(iw -> {     // Intentionally not writing any docs     }, (global, min) -> {         assertEquals(0, global.getDocCount()).         assertEquals(Double.POSITIVE_INFINITY, min.getValue(), 0).     }). }
false;public;0;9;;public void testSomeDocs() throws IOException {     testCase(iw -> {         iw.addDocument(singleton(new SortedNumericDocValuesField("number", 7))).         iw.addDocument(singleton(new SortedNumericDocValuesField("number", 1))).     }, (global, min) -> {         assertEquals(2, global.getDocCount()).         assertEquals(1, min.getValue(), 0).     }). }
false;private;2;25;;// Note that `global`'s fancy support for ignoring the query comes from special code in AggregationPhase. We don't test that here. private void testCase(CheckedConsumer<RandomIndexWriter, IOException> buildIndex, BiConsumer<InternalGlobal, InternalMin> verify) throws IOException {     Directory directory = newDirectory().     RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory).     buildIndex.accept(indexWriter).     indexWriter.close().     IndexReader indexReader = DirectoryReader.open(directory).     IndexSearcher indexSearcher = newSearcher(indexReader, true, true).     GlobalAggregationBuilder aggregationBuilder = new GlobalAggregationBuilder("_name").     aggregationBuilder.subAggregation(new MinAggregationBuilder("in_global").field("number")).     MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.LONG).     fieldType.setName("number").     GlobalAggregator aggregator = createAggregator(aggregationBuilder, indexSearcher, fieldType).     aggregator.preCollection().     indexSearcher.search(new MatchAllDocsQuery(), aggregator).     aggregator.postCollection().     InternalGlobal result = (InternalGlobal) aggregator.buildAggregation(0L).     verify.accept(result, (InternalMin) result.getAggregations().asMap().get("in_global")).     indexReader.close().     directory.close(). }
