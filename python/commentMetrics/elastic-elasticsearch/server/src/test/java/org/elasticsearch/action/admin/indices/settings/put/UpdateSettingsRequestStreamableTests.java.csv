commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;16;;@Override protected UpdateSettingsRequest mutateInstance(UpdateSettingsRequest request) {     UpdateSettingsRequest mutation = copyRequest(request).     List<Runnable> mutators = new ArrayList<>().     Supplier<TimeValue> timeValueSupplier = () -> TimeValue.parseTimeValue(ESTestCase.randomTimeValue(), "_setting").     mutators.add(() -> mutation.masterNodeTimeout(randomValueOtherThan(request.masterNodeTimeout(), timeValueSupplier))).     mutators.add(() -> mutation.timeout(randomValueOtherThan(request.timeout(), timeValueSupplier))).     mutators.add(() -> mutation.settings(mutateSettings(request.settings()))).     mutators.add(() -> mutation.indices(mutateIndices(request.indices()))).     mutators.add(() -> mutation.indicesOptions(randomValueOtherThan(request.indicesOptions(), () -> IndicesOptions.fromOptions(randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean())))).     mutators.add(() -> mutation.setPreserveExisting(!request.isPreserveExisting())).     randomFrom(mutators).run().     return mutation. }
false;protected;0;4;;@Override protected UpdateSettingsRequest createTestInstance() {     return createTestItem(). }
false;protected;0;4;;@Override protected UpdateSettingsRequest createBlankInstance() {     return new UpdateSettingsRequest(). }
false;public,static;0;10;;public static UpdateSettingsRequest createTestItem() {     UpdateSettingsRequest request = randomBoolean() ? new UpdateSettingsRequest(randomSettings(0, 2)) : new UpdateSettingsRequest(randomSettings(0, 2), randomIndicesNames(0, 2)).     request.masterNodeTimeout(randomTimeValue()).     request.timeout(randomTimeValue()).     request.indicesOptions(IndicesOptions.fromOptions(randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean())).     request.setPreserveExisting(randomBoolean()).     return request. }
false;private,static;1;8;;private static UpdateSettingsRequest copyRequest(UpdateSettingsRequest request) {     UpdateSettingsRequest result = new UpdateSettingsRequest(request.settings(), request.indices()).     result.masterNodeTimeout(request.masterNodeTimeout()).     result.timeout(request.timeout()).     result.indicesOptions(request.indicesOptions()).     result.setPreserveExisting(request.isPreserveExisting()).     return result. }
false;private,static;1;16;;private static Settings mutateSettings(Settings settings) {     if (settings.isEmpty()) {         return randomSettings(1, 5).     }     Set<String> allKeys = settings.keySet().     List<String> keysToBeModified = randomSubsetOf(randomIntBetween(1, allKeys.size()), allKeys).     Builder builder = Settings.builder().     for (String key : allKeys) {         String value = settings.get(key).         if (keysToBeModified.contains(key)) {             value += randomAlphaOfLengthBetween(2, 5).         }         builder.put(key, value).     }     return builder.build(). }
false;private,static;1;8;;private static String[] mutateIndices(String[] indices) {     if (CollectionUtils.isEmpty(indices)) {         return randomIndicesNames(1, 5).     }     String[] mutated = Arrays.copyOf(indices, indices.length).     Arrays.asList(mutated).replaceAll(i -> i += randomAlphaOfLengthBetween(2, 5)).     return mutated. }
false;private,static;2;13;;private static Settings randomSettings(int min, int max) {     int num = randomIntBetween(min, max).     Builder builder = Settings.builder().     for (int i = 0. i < num. i++) {         int keyDepth = randomIntBetween(1, 5).         StringJoiner keyJoiner = new StringJoiner(".", "", "").         for (int d = 0. d < keyDepth. d++) {             keyJoiner.add(randomAlphaOfLengthBetween(3, 5)).         }         builder.put(keyJoiner.toString(), randomAlphaOfLengthBetween(2, 5)).     }     return builder.build(). }
false;private,static;2;8;;private static String[] randomIndicesNames(int minIndicesNum, int maxIndicesNum) {     int numIndices = randomIntBetween(minIndicesNum, maxIndicesNum).     String[] indices = new String[numIndices].     for (int i = 0. i < numIndices. i++) {         indices[i] = "index-" + randomAlphaOfLengthBetween(2, 5).toLowerCase(Locale.ROOT).     }     return indices. }
