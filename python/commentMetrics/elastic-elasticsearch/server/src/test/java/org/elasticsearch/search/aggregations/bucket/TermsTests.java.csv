commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;122;;@Override protected TermsAggregationBuilder createTestAggregatorBuilder() {     String name = randomAlphaOfLengthBetween(3, 20).     TermsAggregationBuilder factory = new TermsAggregationBuilder(name, null).     String field = randomAlphaOfLengthBetween(3, 20).     randomFieldOrScript(factory, field).     if (randomBoolean()) {         factory.missing("MISSING").     }     if (randomBoolean()) {         factory.size(randomIntBetween(1, Integer.MAX_VALUE)).     }     if (randomBoolean()) {         factory.shardSize(randomIntBetween(1, Integer.MAX_VALUE)).     }     if (randomBoolean()) {         int minDocCount = randomInt(4).         switch(minDocCount) {             case 0:                 break.             case 1:             case 2:             case 3:             case 4:                 minDocCount = randomIntBetween(0, Integer.MAX_VALUE).                 break.             default:                 fail().         }         factory.minDocCount(minDocCount).     }     if (randomBoolean()) {         int shardMinDocCount = randomInt(4).         switch(shardMinDocCount) {             case 0:                 break.             case 1:             case 2:             case 3:             case 4:                 shardMinDocCount = randomIntBetween(0, Integer.MAX_VALUE).                 break.             default:                 fail().         }         factory.shardMinDocCount(shardMinDocCount).     }     if (randomBoolean()) {         factory.collectMode(randomFrom(SubAggCollectionMode.values())).     }     if (randomBoolean()) {         factory.executionHint(randomFrom(executionHints)).     }     if (randomBoolean()) {         factory.format("###.##").     }     if (randomBoolean()) {         IncludeExclude incExc = null.         switch(randomInt(6)) {             case 0:                 incExc = new IncludeExclude(new RegExp("foobar"), null).                 break.             case 1:                 incExc = new IncludeExclude(null, new RegExp("foobaz")).                 break.             case 2:                 incExc = new IncludeExclude(new RegExp("foobar"), new RegExp("foobaz")).                 break.             case 3:                 SortedSet<BytesRef> includeValues = new TreeSet<>().                 int numIncs = randomIntBetween(1, 20).                 for (int i = 0. i < numIncs. i++) {                     includeValues.add(new BytesRef(randomAlphaOfLengthBetween(1, 30))).                 }                 SortedSet<BytesRef> excludeValues = null.                 incExc = new IncludeExclude(includeValues, excludeValues).                 break.             case 4:                 SortedSet<BytesRef> includeValues2 = null.                 SortedSet<BytesRef> excludeValues2 = new TreeSet<>().                 int numExcs2 = randomIntBetween(1, 20).                 for (int i = 0. i < numExcs2. i++) {                     excludeValues2.add(new BytesRef(randomAlphaOfLengthBetween(1, 30))).                 }                 incExc = new IncludeExclude(includeValues2, excludeValues2).                 break.             case 5:                 SortedSet<BytesRef> includeValues3 = new TreeSet<>().                 int numIncs3 = randomIntBetween(1, 20).                 for (int i = 0. i < numIncs3. i++) {                     includeValues3.add(new BytesRef(randomAlphaOfLengthBetween(1, 30))).                 }                 SortedSet<BytesRef> excludeValues3 = new TreeSet<>().                 int numExcs3 = randomIntBetween(1, 20).                 for (int i = 0. i < numExcs3. i++) {                     excludeValues3.add(new BytesRef(randomAlphaOfLengthBetween(1, 30))).                 }                 incExc = new IncludeExclude(includeValues3, excludeValues3).                 break.             case 6:                 final int numPartitions = randomIntBetween(1, 100).                 final int partition = randomIntBetween(0, numPartitions - 1).                 incExc = new IncludeExclude(partition, numPartitions).                 break.             default:                 fail().         }         factory.includeExclude(incExc).     }     if (randomBoolean()) {         List<BucketOrder> order = randomOrder().         if (order.size() == 1 && randomBoolean()) {             factory.order(order.get(0)).         } else {             factory.order(order).         }     }     if (randomBoolean()) {         factory.showTermDocCountError(randomBoolean()).     }     return factory. }
false;private;0;26;;private List<BucketOrder> randomOrder() {     List<BucketOrder> orders = new ArrayList<>().     switch(randomInt(4)) {         case 0:             orders.add(BucketOrder.key(randomBoolean())).             break.         case 1:             orders.add(BucketOrder.count(randomBoolean())).             break.         case 2:             orders.add(BucketOrder.aggregation(randomAlphaOfLengthBetween(3, 20), randomBoolean())).             break.         case 3:             orders.add(BucketOrder.aggregation(randomAlphaOfLengthBetween(3, 20), randomAlphaOfLengthBetween(3, 20), randomBoolean())).             break.         case 4:             int numOrders = randomIntBetween(1, 3).             for (int i = 0. i < numOrders. i++) {                 orders.addAll(randomOrder()).             }             break.         default:             fail().     }     return orders. }
