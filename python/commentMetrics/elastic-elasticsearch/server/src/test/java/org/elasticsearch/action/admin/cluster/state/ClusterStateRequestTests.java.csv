commented;modifiers;parameterAmount;loc;comment;code
false;public;0;40;;public void testSerialization() throws Exception {     int iterations = randomIntBetween(5, 20).     for (int i = 0. i < iterations. i++) {         IndicesOptions indicesOptions = IndicesOptions.fromOptions(randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean()).         ClusterStateRequest clusterStateRequest = new ClusterStateRequest().routingTable(randomBoolean()).metaData(randomBoolean()).nodes(randomBoolean()).blocks(randomBoolean()).indices("testindex", "testindex2").indicesOptions(indicesOptions).         Version testVersion = VersionUtils.randomVersionBetween(random(), Version.CURRENT.minimumCompatibilityVersion(), Version.CURRENT).         // TODO: change version to V_6_6_0 after backporting:         if (testVersion.onOrAfter(Version.V_7_0_0)) {             if (randomBoolean()) {                 clusterStateRequest.waitForMetaDataVersion(randomLongBetween(1, Long.MAX_VALUE)).             }             if (randomBoolean()) {                 clusterStateRequest.waitForTimeout(new TimeValue(randomNonNegativeLong())).             }         }         BytesStreamOutput output = new BytesStreamOutput().         output.setVersion(testVersion).         clusterStateRequest.writeTo(output).         StreamInput streamInput = output.bytes().streamInput().         streamInput.setVersion(testVersion).         ClusterStateRequest deserializedCSRequest = new ClusterStateRequest(streamInput).         assertThat(deserializedCSRequest.routingTable(), equalTo(clusterStateRequest.routingTable())).         assertThat(deserializedCSRequest.metaData(), equalTo(clusterStateRequest.metaData())).         assertThat(deserializedCSRequest.nodes(), equalTo(clusterStateRequest.nodes())).         assertThat(deserializedCSRequest.blocks(), equalTo(clusterStateRequest.blocks())).         assertThat(deserializedCSRequest.indices(), equalTo(clusterStateRequest.indices())).         assertOptionsMatch(deserializedCSRequest.indicesOptions(), clusterStateRequest.indicesOptions()).         if (testVersion.onOrAfter(Version.V_6_6_0)) {             assertThat(deserializedCSRequest.waitForMetaDataVersion(), equalTo(clusterStateRequest.waitForMetaDataVersion())).             assertThat(deserializedCSRequest.waitForTimeout(), equalTo(clusterStateRequest.waitForTimeout())).         }     } }
false;public;0;6;;public void testWaitForMetaDataVersion() {     ClusterStateRequest clusterStateRequest = new ClusterStateRequest().     expectThrows(IllegalArgumentException.class, () -> clusterStateRequest.waitForMetaDataVersion(randomLongBetween(Long.MIN_VALUE, 0))).     clusterStateRequest.waitForMetaDataVersion(randomLongBetween(1, Long.MAX_VALUE)). }
false;private,static;2;6;;private static void assertOptionsMatch(IndicesOptions in, IndicesOptions out) {     assertThat(in.ignoreUnavailable(), equalTo(out.ignoreUnavailable())).     assertThat(in.expandWildcardsClosed(), equalTo(out.expandWildcardsClosed())).     assertThat(in.expandWildcardsOpen(), equalTo(out.expandWildcardsOpen())).     assertThat(in.allowNoIndices(), equalTo(out.allowNoIndices())). }
