commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void setInitialState(ClusterState initialState) {     clusterState.set(initialState). }
false;public;3;6;;@Override public void onNewClusterState(String source, Supplier<ClusterState> clusterStateSupplier, ClusterApplyListener listener) {     clusterState.set(clusterStateSupplier.get()).     listener.onSuccess(source). }
false;public;0;40;;public void testInitialJoin() throws Exception {     final Settings settings = Settings.EMPTY.     final Version version = Version.CURRENT.     final ThreadPool threadPool = new TestThreadPool(getClass().getName()).     final Stack<Closeable> stack = new Stack<>().     try {         final MockTransportService transportService = MockTransportService.createNewService(settings, version, threadPool, null).         stack.push(transportService).         transportService.start().         final DiscoveryNode node = transportService.getLocalNode().         final MasterService masterService = createMasterService(threadPool, node).         AtomicReference<ClusterState> clusterState = new AtomicReference<>().         final SingleNodeDiscovery discovery = new SingleNodeDiscovery(Settings.EMPTY, transportService, masterService, new ClusterApplier() {              @Override             public void setInitialState(ClusterState initialState) {                 clusterState.set(initialState).             }              @Override             public void onNewClusterState(String source, Supplier<ClusterState> clusterStateSupplier, ClusterApplyListener listener) {                 clusterState.set(clusterStateSupplier.get()).                 listener.onSuccess(source).             }         }, null).         discovery.start().         discovery.startInitialJoin().         final DiscoveryNodes nodes = clusterState.get().nodes().         assertThat(nodes.getSize(), equalTo(1)).         assertThat(nodes.getMasterNode().getId(), equalTo(node.getId())).     } finally {         while (!stack.isEmpty()) {             IOUtils.closeWhileHandlingException(stack.pop()).         }         terminate(threadPool).     } }
