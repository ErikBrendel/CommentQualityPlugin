commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setupThreadPool() {     threadPool = new TestThreadPool(TransportTasksActionTests.class.getSimpleName()). }
false;public;1;7;;public void setupTestNodes(Settings settings) {     nodesCount = randomIntBetween(2, 10).     testNodes = new TestNode[nodesCount].     for (int i = 0. i < testNodes.length. i++) {         testNodes[i] = new TestNode("node" + i, threadPool, settings).     } }
false;public,final;0;8;;@After public final void shutdownTestNodes() throws Exception {     for (TestNode testNode : testNodes) {         testNode.close().     }     ThreadPool.terminate(threadPool, 30, TimeUnit.SECONDS).     threadPool = null. }
false;protected;1;4;;@Override protected List<NodeResponse> readNodesFrom(StreamInput in) throws IOException {     return in.readStreamableList(NodeResponse::new). }
false;protected;2;4;;@Override protected void writeNodesTo(StreamOutput out, List<NodeResponse> nodes) throws IOException {     out.writeStreamableList(nodes). }
false;public;0;3;;public int failureCount() {     return failures().size(). }
false;protected;3;4;;@Override protected NodesResponse newResponse(NodesRequest request, List<NodeResponse> responses, List<FailedNodeException> failures) {     return new NodesResponse(clusterService.getClusterName(), responses, failures). }
false;protected;0;4;;@Override protected NodeResponse newNodeResponse() {     return new NodeResponse(). }
false;protected,abstract;1;2;;@Override protected abstract NodeResponse nodeOperation(NodeRequest request).
false;protected;3;8;;@Override protected TaskManager createTaskManager(Settings settings, ThreadPool threadPool, Set<String> taskHeaders) {     if (MockTaskManager.USE_MOCK_TASK_MANAGER_SETTING.get(settings)) {         return new MockTaskManager(settings, threadPool, taskHeaders).     } else {         return super.createTaskManager(settings, threadPool, taskHeaders).     } }
false;public;0;5;;@Override public void close() {     clusterService.close().     transportService.close(). }
false;public;0;3;;public String getNodeId() {     return discoveryNode().getId(). }
false;public;0;1;;public DiscoveryNode discoveryNode() {     return discoveryNode.get(). }
false;public,static;1;15;;public static void connectNodes(TestNode... nodes) {     DiscoveryNode[] discoveryNodes = new DiscoveryNode[nodes.length].     for (int i = 0. i < nodes.length. i++) {         discoveryNodes[i] = nodes[i].discoveryNode().     }     DiscoveryNode master = discoveryNodes[0].     for (TestNode node : nodes) {         setState(node.clusterService, ClusterStateCreationUtils.state(node.discoveryNode(), master, discoveryNodes)).     }     for (TestNode nodeA : nodes) {         for (TestNode nodeB : nodes) {             nodeA.transportService.connectToNode(nodeB.discoveryNode()).         }     } }
false;public,static;2;8;;public static RecordingTaskManagerListener[] setupListeners(TestNode[] nodes, String... actionMasks) {     RecordingTaskManagerListener[] listeners = new RecordingTaskManagerListener[nodes.length].     for (int i = 0. i < nodes.length. i++) {         listeners[i] = new RecordingTaskManagerListener(nodes[i].getNodeId(), actionMasks).         ((MockTaskManager) (nodes[i].transportService.getTaskManager())).addListener(listeners[i]).     }     return listeners. }
