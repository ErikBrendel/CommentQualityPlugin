# id;timestamp;commentText;codeText;commentWords;codeWords
NestedQueryBuilderTests -> public void testThatUnrecognizedFromStringThrowsException();1524684173;Failure should not change (and the value should never match anything...).;public void testThatUnrecognizedFromStringThrowsException() {_        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,_            () -> NestedQueryBuilder.parseScoreMode("unrecognized value"))__        assertEquals("No score mode for child query [unrecognized value] found", e.getMessage())__    };failure,should,not,change,and,the,value,should,never,match,anything;public,void,test,that,unrecognized,from,string,throws,exception,illegal,argument,exception,e,expect,throws,illegal,argument,exception,class,nested,query,builder,parse,score,mode,unrecognized,value,assert,equals,no,score,mode,for,child,query,unrecognized,value,found,e,get,message
NestedQueryBuilderTests -> public void testThatUnrecognizedFromStringThrowsException();1535139672;Failure should not change (and the value should never match anything...).;public void testThatUnrecognizedFromStringThrowsException() {_        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,_            () -> NestedQueryBuilder.parseScoreMode("unrecognized value"))__        assertEquals("No score mode for child query [unrecognized value] found", e.getMessage())__    };failure,should,not,change,and,the,value,should,never,match,anything;public,void,test,that,unrecognized,from,string,throws,exception,illegal,argument,exception,e,expect,throws,illegal,argument,exception,class,nested,query,builder,parse,score,mode,unrecognized,value,assert,equals,no,score,mode,for,child,query,unrecognized,value,found,e,get,message
NestedQueryBuilderTests -> public void testThatUnrecognizedFromStringThrowsException();1548230518;Failure should not change (and the value should never match anything...).;public void testThatUnrecognizedFromStringThrowsException() {_        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,_            () -> NestedQueryBuilder.parseScoreMode("unrecognized value"))__        assertEquals("No score mode for child query [unrecognized value] found", e.getMessage())__    };failure,should,not,change,and,the,value,should,never,match,anything;public,void,test,that,unrecognized,from,string,throws,exception,illegal,argument,exception,e,expect,throws,illegal,argument,exception,class,nested,query,builder,parse,score,mode,unrecognized,value,assert,equals,no,score,mode,for,child,query,unrecognized,value,found,e,get,message
NestedQueryBuilderTests -> public void testThatUnrecognizedFromStringThrowsException();1549032830;Failure should not change (and the value should never match anything...).;public void testThatUnrecognizedFromStringThrowsException() {_        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,_            () -> NestedQueryBuilder.parseScoreMode("unrecognized value"))__        assertEquals("No score mode for child query [unrecognized value] found", e.getMessage())__    };failure,should,not,change,and,the,value,should,never,match,anything;public,void,test,that,unrecognized,from,string,throws,exception,illegal,argument,exception,e,expect,throws,illegal,argument,exception,class,nested,query,builder,parse,score,mode,unrecognized,value,assert,equals,no,score,mode,for,child,query,unrecognized,value,found,e,get,message
NestedQueryBuilderTests -> public void testThatNullFromStringThrowsException();1524684173;Should throw {@link IllegalArgumentException} instead of NPE.;public void testThatNullFromStringThrowsException() {_        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> NestedQueryBuilder.parseScoreMode(null))__        assertEquals("No score mode for child query [null] found", e.getMessage())__    };should,throw,link,illegal,argument,exception,instead,of,npe;public,void,test,that,null,from,string,throws,exception,illegal,argument,exception,e,expect,throws,illegal,argument,exception,class,nested,query,builder,parse,score,mode,null,assert,equals,no,score,mode,for,child,query,null,found,e,get,message
NestedQueryBuilderTests -> public void testThatNullFromStringThrowsException();1535139672;Should throw {@link IllegalArgumentException} instead of NPE.;public void testThatNullFromStringThrowsException() {_        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> NestedQueryBuilder.parseScoreMode(null))__        assertEquals("No score mode for child query [null] found", e.getMessage())__    };should,throw,link,illegal,argument,exception,instead,of,npe;public,void,test,that,null,from,string,throws,exception,illegal,argument,exception,e,expect,throws,illegal,argument,exception,class,nested,query,builder,parse,score,mode,null,assert,equals,no,score,mode,for,child,query,null,found,e,get,message
NestedQueryBuilderTests -> public void testThatNullFromStringThrowsException();1548230518;Should throw {@link IllegalArgumentException} instead of NPE.;public void testThatNullFromStringThrowsException() {_        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> NestedQueryBuilder.parseScoreMode(null))__        assertEquals("No score mode for child query [null] found", e.getMessage())__    };should,throw,link,illegal,argument,exception,instead,of,npe;public,void,test,that,null,from,string,throws,exception,illegal,argument,exception,e,expect,throws,illegal,argument,exception,class,nested,query,builder,parse,score,mode,null,assert,equals,no,score,mode,for,child,query,null,found,e,get,message
NestedQueryBuilderTests -> public void testThatNullFromStringThrowsException();1549032830;Should throw {@link IllegalArgumentException} instead of NPE.;public void testThatNullFromStringThrowsException() {_        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> NestedQueryBuilder.parseScoreMode(null))__        assertEquals("No score mode for child query [null] found", e.getMessage())__    };should,throw,link,illegal,argument,exception,instead,of,npe;public,void,test,that,null,from,string,throws,exception,illegal,argument,exception,e,expect,throws,illegal,argument,exception,class,nested,query,builder,parse,score,mode,null,assert,equals,no,score,mode,for,child,query,null,found,e,get,message
NestedQueryBuilderTests -> public void testSerializationBWC() throws IOException;1524684173;Test (de)serialization on all previous released versions;public void testSerializationBWC() throws IOException {_        for (Version version : VersionUtils.allReleasedVersions()) {_            NestedQueryBuilder testQuery = createTestQueryBuilder()__            if (version.before(Version.V_5_2_0) && testQuery.innerHit() != null) {_                _                testQuery.innerHit().setIgnoreUnmapped(false)__            }_            assertSerialization(testQuery, version)__        }_    };test,de,serialization,on,all,previous,released,versions;public,void,test,serialization,bwc,throws,ioexception,for,version,version,version,utils,all,released,versions,nested,query,builder,test,query,create,test,query,builder,if,version,before,version,test,query,inner,hit,null,test,query,inner,hit,set,ignore,unmapped,false,assert,serialization,test,query,version
NestedQueryBuilderTests -> public void testSerializationBWC() throws IOException;1535139672;Test (de)serialization on all previous released versions;public void testSerializationBWC() throws IOException {_        for (Version version : VersionUtils.allReleasedVersions()) {_            NestedQueryBuilder testQuery = createTestQueryBuilder()__            assertSerialization(testQuery, version)__        }_    };test,de,serialization,on,all,previous,released,versions;public,void,test,serialization,bwc,throws,ioexception,for,version,version,version,utils,all,released,versions,nested,query,builder,test,query,create,test,query,builder,assert,serialization,test,query,version
NestedQueryBuilderTests -> public void testSerializationBWC() throws IOException;1548230518;Test (de)serialization on all previous released versions;public void testSerializationBWC() throws IOException {_        for (Version version : VersionUtils.allReleasedVersions()) {_            NestedQueryBuilder testQuery = createTestQueryBuilder()__            assertSerialization(testQuery, version)__        }_    };test,de,serialization,on,all,previous,released,versions;public,void,test,serialization,bwc,throws,ioexception,for,version,version,version,utils,all,released,versions,nested,query,builder,test,query,create,test,query,builder,assert,serialization,test,query,version
NestedQueryBuilderTests -> public void testSerializationBWC() throws IOException;1549032830;Test (de)serialization on all previous released versions;public void testSerializationBWC() throws IOException {_        for (Version version : VersionUtils.allReleasedVersions()) {_            NestedQueryBuilder testQuery = createTestQueryBuilder()__            assertSerialization(testQuery, version)__        }_    };test,de,serialization,on,all,previous,released,versions;public,void,test,serialization,bwc,throws,ioexception,for,version,version,version,utils,all,released,versions,nested,query,builder,test,query,create,test,query,builder,assert,serialization,test,query,version
NestedQueryBuilderTests -> @Override     protected NestedQueryBuilder doCreateTestQueryBuilder();1524684173;@return a {@link NestedQueryBuilder} with random values all over the place;@Override_    protected NestedQueryBuilder doCreateTestQueryBuilder() {_        QueryBuilder innerQueryBuilder = RandomQueryBuilder.createQuery(random())__        if (randomBoolean()) {_            requiresRewrite = true__            innerQueryBuilder = new WrapperQueryBuilder(innerQueryBuilder.toString())__        }_        NestedQueryBuilder nqb = new NestedQueryBuilder("nested1", innerQueryBuilder,_                RandomPicks.randomFrom(random(), ScoreMode.values()))__        nqb.ignoreUnmapped(randomBoolean())__        if (randomBoolean()) {_            nqb.innerHit(new InnerHitBuilder(randomAlphaOfLengthBetween(1, 10))_                    .setSize(randomIntBetween(0, 100))_                    .addSort(new FieldSortBuilder(INT_FIELD_NAME).order(SortOrder.ASC))_                    .setIgnoreUnmapped(nqb.ignoreUnmapped()))__        }_        return nqb__    };return,a,link,nested,query,builder,with,random,values,all,over,the,place;override,protected,nested,query,builder,do,create,test,query,builder,query,builder,inner,query,builder,random,query,builder,create,query,random,if,random,boolean,requires,rewrite,true,inner,query,builder,new,wrapper,query,builder,inner,query,builder,to,string,nested,query,builder,nqb,new,nested,query,builder,nested1,inner,query,builder,random,picks,random,from,random,score,mode,values,nqb,ignore,unmapped,random,boolean,if,random,boolean,nqb,inner,hit,new,inner,hit,builder,random,alpha,of,length,between,1,10,set,size,random,int,between,0,100,add,sort,new,field,sort,builder,order,sort,order,asc,set,ignore,unmapped,nqb,ignore,unmapped,return,nqb
NestedQueryBuilderTests -> @Override     protected NestedQueryBuilder doCreateTestQueryBuilder();1535139672;@return a {@link NestedQueryBuilder} with random values all over the place;@Override_    protected NestedQueryBuilder doCreateTestQueryBuilder() {_        QueryBuilder innerQueryBuilder = RandomQueryBuilder.createQuery(random())__        if (randomBoolean()) {_            requiresRewrite = true__            innerQueryBuilder = new WrapperQueryBuilder(innerQueryBuilder.toString())__        }_        NestedQueryBuilder nqb = new NestedQueryBuilder("nested1", innerQueryBuilder,_                RandomPicks.randomFrom(random(), ScoreMode.values()))__        nqb.ignoreUnmapped(randomBoolean())__        if (randomBoolean()) {_            nqb.innerHit(new InnerHitBuilder(randomAlphaOfLengthBetween(1, 10))_                    .setSize(randomIntBetween(0, 100))_                    .addSort(new FieldSortBuilder(INT_FIELD_NAME).order(SortOrder.ASC))_                    .setIgnoreUnmapped(nqb.ignoreUnmapped()))__        }_        return nqb__    };return,a,link,nested,query,builder,with,random,values,all,over,the,place;override,protected,nested,query,builder,do,create,test,query,builder,query,builder,inner,query,builder,random,query,builder,create,query,random,if,random,boolean,requires,rewrite,true,inner,query,builder,new,wrapper,query,builder,inner,query,builder,to,string,nested,query,builder,nqb,new,nested,query,builder,nested1,inner,query,builder,random,picks,random,from,random,score,mode,values,nqb,ignore,unmapped,random,boolean,if,random,boolean,nqb,inner,hit,new,inner,hit,builder,random,alpha,of,length,between,1,10,set,size,random,int,between,0,100,add,sort,new,field,sort,builder,order,sort,order,asc,set,ignore,unmapped,nqb,ignore,unmapped,return,nqb
NestedQueryBuilderTests -> @Override     protected NestedQueryBuilder doCreateTestQueryBuilder();1548230518;@return a {@link NestedQueryBuilder} with random values all over the place;@Override_    protected NestedQueryBuilder doCreateTestQueryBuilder() {_        QueryBuilder innerQueryBuilder = RandomQueryBuilder.createQuery(random())__        if (randomBoolean()) {_            requiresRewrite = true__            innerQueryBuilder = new WrapperQueryBuilder(innerQueryBuilder.toString())__        }_        NestedQueryBuilder nqb = new NestedQueryBuilder("nested1", innerQueryBuilder,_                RandomPicks.randomFrom(random(), ScoreMode.values()))__        nqb.ignoreUnmapped(randomBoolean())__        if (randomBoolean()) {_            nqb.innerHit(new InnerHitBuilder(randomAlphaOfLengthBetween(1, 10))_                    .setSize(randomIntBetween(0, 100))_                    .addSort(new FieldSortBuilder(INT_FIELD_NAME).order(SortOrder.ASC))_                    .setIgnoreUnmapped(nqb.ignoreUnmapped()))__        }_        return nqb__    };return,a,link,nested,query,builder,with,random,values,all,over,the,place;override,protected,nested,query,builder,do,create,test,query,builder,query,builder,inner,query,builder,random,query,builder,create,query,random,if,random,boolean,requires,rewrite,true,inner,query,builder,new,wrapper,query,builder,inner,query,builder,to,string,nested,query,builder,nqb,new,nested,query,builder,nested1,inner,query,builder,random,picks,random,from,random,score,mode,values,nqb,ignore,unmapped,random,boolean,if,random,boolean,nqb,inner,hit,new,inner,hit,builder,random,alpha,of,length,between,1,10,set,size,random,int,between,0,100,add,sort,new,field,sort,builder,order,sort,order,asc,set,ignore,unmapped,nqb,ignore,unmapped,return,nqb
NestedQueryBuilderTests -> @Override     protected NestedQueryBuilder doCreateTestQueryBuilder();1549032830;@return a {@link NestedQueryBuilder} with random values all over the place;@Override_    protected NestedQueryBuilder doCreateTestQueryBuilder() {_        QueryBuilder innerQueryBuilder = RandomQueryBuilder.createQuery(random())__        if (randomBoolean()) {_            requiresRewrite = true__            innerQueryBuilder = new WrapperQueryBuilder(innerQueryBuilder.toString())__        }_        NestedQueryBuilder nqb = new NestedQueryBuilder("nested1", innerQueryBuilder,_                RandomPicks.randomFrom(random(), ScoreMode.values()))__        nqb.ignoreUnmapped(randomBoolean())__        if (randomBoolean()) {_            nqb.innerHit(new InnerHitBuilder(randomAlphaOfLengthBetween(1, 10))_                    .setSize(randomIntBetween(0, 100))_                    .addSort(new FieldSortBuilder(INT_FIELD_NAME).order(SortOrder.ASC))_                    .setIgnoreUnmapped(nqb.ignoreUnmapped()))__        }_        return nqb__    };return,a,link,nested,query,builder,with,random,values,all,over,the,place;override,protected,nested,query,builder,do,create,test,query,builder,query,builder,inner,query,builder,random,query,builder,create,query,random,if,random,boolean,requires,rewrite,true,inner,query,builder,new,wrapper,query,builder,inner,query,builder,to,string,nested,query,builder,nqb,new,nested,query,builder,nested1,inner,query,builder,random,picks,random,from,random,score,mode,values,nqb,ignore,unmapped,random,boolean,if,random,boolean,nqb,inner,hit,new,inner,hit,builder,random,alpha,of,length,between,1,10,set,size,random,int,between,0,100,add,sort,new,field,sort,builder,order,sort,order,asc,set,ignore,unmapped,nqb,ignore,unmapped,return,nqb
