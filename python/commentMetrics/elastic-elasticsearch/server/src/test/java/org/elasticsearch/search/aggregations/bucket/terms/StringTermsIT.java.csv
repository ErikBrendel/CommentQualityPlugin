commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     return Collections.singleton(CustomScriptPlugin.class). }
false;public;0;5;;@Before public void randomizeOptimizations() {     TermsAggregatorFactory.COLLECT_SEGMENT_ORDS = randomBoolean().     TermsAggregatorFactory.REMAP_GLOBAL_ORDS = randomBoolean(). }
false;public;0;5;;@After public void resetOptimizations() {     TermsAggregatorFactory.COLLECT_SEGMENT_ORDS = null.     TermsAggregatorFactory.REMAP_GLOBAL_ORDS = null. }
false;protected;0;20;;@Override protected Map<String, Function<Map<String, Object>, Object>> pluginScripts() {     Map<String, Function<Map<String, Object>, Object>> scripts = super.pluginScripts().     scripts.put("'foo_' + _value", vars -> "foo_" + (String) vars.get("_value")).     scripts.put("_value.substring(0,3)", vars -> ((String) vars.get("_value")).substring(0, 3)).     scripts.put("doc['" + MULTI_VALUED_FIELD_NAME + "']", vars -> {         Map<?, ?> doc = (Map) vars.get("doc").         return doc.get(MULTI_VALUED_FIELD_NAME).     }).     scripts.put("doc['" + SINGLE_VALUED_FIELD_NAME + "'].value", vars -> {         Map<?, ?> doc = (Map) vars.get("doc").         ScriptDocValues.Strings value = (ScriptDocValues.Strings) doc.get(SINGLE_VALUED_FIELD_NAME).         return value.getValue().     }).     return scripts. }
false;public;0;42;;@Override public void setupSuiteScopeCluster() throws Exception {     assertAcked(client().admin().indices().prepareCreate("idx").addMapping("type", SINGLE_VALUED_FIELD_NAME, "type=keyword", MULTI_VALUED_FIELD_NAME, "type=keyword", "tag", "type=keyword").get()).     List<IndexRequestBuilder> builders = new ArrayList<>().     for (int i = 0. i < 5. i++) {         builders.add(client().prepareIndex("idx", "type").setSource(jsonBuilder().startObject().field(SINGLE_VALUED_FIELD_NAME, "val" + i).field("i", i).field("constant", 1).field("tag", i < 5 / 2 + 1 ? "more" : "less").startArray(MULTI_VALUED_FIELD_NAME).value("val" + i).value("val" + (i + 1)).endArray().endObject())).     }     getMultiSortDocs(builders).     assertAcked(client().admin().indices().prepareCreate("high_card_idx").addMapping("type", SINGLE_VALUED_FIELD_NAME, "type=keyword", MULTI_VALUED_FIELD_NAME, "type=keyword", "tag", "type=keyword").get()).     for (int i = 0. i < 100. i++) {         builders.add(client().prepareIndex("high_card_idx", "type").setSource(jsonBuilder().startObject().field(SINGLE_VALUED_FIELD_NAME, "val" + Strings.padStart(i + "", 3, '0')).startArray(MULTI_VALUED_FIELD_NAME).value("val" + Strings.padStart(i + "", 3, '0')).value("val" + Strings.padStart((i + 1) + "", 3, '0')).endArray().endObject())).     }     prepareCreate("empty_bucket_idx").addMapping("type", SINGLE_VALUED_FIELD_NAME, "type=integer").get().     for (int i = 0. i < 2. i++) {         builders.add(client().prepareIndex("empty_bucket_idx", "type", "" + i).setSource(jsonBuilder().startObject().field(SINGLE_VALUED_FIELD_NAME, i * 2).endObject())).     }     indexRandom(true, builders).     createIndex("idx_unmapped").     ensureSearchable(). }
false;private;1;72;;private void getMultiSortDocs(List<IndexRequestBuilder> builders) throws IOException {     expectedMultiSortBuckets = new HashMap<>().     Map<String, Object> bucketProps = new HashMap<>().     bucketProps.put("_term", "val1").     bucketProps.put("_count", 3L).     bucketProps.put("avg_l", 1d).     bucketProps.put("sum_d", 6d).     expectedMultiSortBuckets.put((String) bucketProps.get("_term"), bucketProps).     bucketProps = new HashMap<>().     bucketProps.put("_term", "val2").     bucketProps.put("_count", 3L).     bucketProps.put("avg_l", 2d).     bucketProps.put("sum_d", 6d).     expectedMultiSortBuckets.put((String) bucketProps.get("_term"), bucketProps).     bucketProps = new HashMap<>().     bucketProps.put("_term", "val3").     bucketProps.put("_count", 2L).     bucketProps.put("avg_l", 3d).     bucketProps.put("sum_d", 3d).     expectedMultiSortBuckets.put((String) bucketProps.get("_term"), bucketProps).     bucketProps = new HashMap<>().     bucketProps.put("_term", "val4").     bucketProps.put("_count", 2L).     bucketProps.put("avg_l", 3d).     bucketProps.put("sum_d", 4d).     expectedMultiSortBuckets.put((String) bucketProps.get("_term"), bucketProps).     bucketProps = new HashMap<>().     bucketProps.put("_term", "val5").     bucketProps.put("_count", 2L).     bucketProps.put("avg_l", 5d).     bucketProps.put("sum_d", 3d).     expectedMultiSortBuckets.put((String) bucketProps.get("_term"), bucketProps).     bucketProps = new HashMap<>().     bucketProps.put("_term", "val6").     bucketProps.put("_count", 1L).     bucketProps.put("avg_l", 5d).     bucketProps.put("sum_d", 1d).     expectedMultiSortBuckets.put((String) bucketProps.get("_term"), bucketProps).     bucketProps = new HashMap<>().     bucketProps.put("_term", "val7").     bucketProps.put("_count", 1L).     bucketProps.put("avg_l", 5d).     bucketProps.put("sum_d", 1d).     expectedMultiSortBuckets.put((String) bucketProps.get("_term"), bucketProps).     assertAcked(client().admin().indices().prepareCreate("sort_idx").addMapping("type", SINGLE_VALUED_FIELD_NAME, "type=keyword", MULTI_VALUED_FIELD_NAME, "type=keyword", "tag", "type=keyword").get()).     for (int i = 1. i <= 3. i++) {         builders.add(client().prepareIndex("sort_idx", "type").setSource(jsonBuilder().startObject().field(SINGLE_VALUED_FIELD_NAME, "val1").field("l", 1).field("d", i).endObject())).         builders.add(client().prepareIndex("sort_idx", "type").setSource(jsonBuilder().startObject().field(SINGLE_VALUED_FIELD_NAME, "val2").field("l", 2).field("d", i).endObject())).     }     builders.add(client().prepareIndex("sort_idx", "type").setSource(jsonBuilder().startObject().field(SINGLE_VALUED_FIELD_NAME, "val3").field("l", 3).field("d", 1).endObject())).     builders.add(client().prepareIndex("sort_idx", "type").setSource(jsonBuilder().startObject().field(SINGLE_VALUED_FIELD_NAME, "val3").field("l", 3).field("d", 2).endObject())).     builders.add(client().prepareIndex("sort_idx", "type").setSource(jsonBuilder().startObject().field(SINGLE_VALUED_FIELD_NAME, "val4").field("l", 3).field("d", 1).endObject())).     builders.add(client().prepareIndex("sort_idx", "type").setSource(jsonBuilder().startObject().field(SINGLE_VALUED_FIELD_NAME, "val4").field("l", 3).field("d", 3).endObject())).     builders.add(client().prepareIndex("sort_idx", "type").setSource(jsonBuilder().startObject().field(SINGLE_VALUED_FIELD_NAME, "val5").field("l", 5).field("d", 1).endObject())).     builders.add(client().prepareIndex("sort_idx", "type").setSource(jsonBuilder().startObject().field(SINGLE_VALUED_FIELD_NAME, "val5").field("l", 5).field("d", 2).endObject())).     builders.add(client().prepareIndex("sort_idx", "type").setSource(jsonBuilder().startObject().field(SINGLE_VALUED_FIELD_NAME, "val6").field("l", 5).field("d", 1).endObject())).     builders.add(client().prepareIndex("sort_idx", "type").setSource(jsonBuilder().startObject().field(SINGLE_VALUED_FIELD_NAME, "val7").field("l", 5).field("d", 1).endObject())). }
false;private;1;3;;private String key(Terms.Bucket bucket) {     return bucket.getKeyAsString(). }
true;public;0;9;// the main purpose of this test is to make sure we're not allocating 2GB of memory per shard ;// the main purpose of this test is to make sure we're not allocating 2GB of memory per shard public void testSizeIsZero() {     final int minDocCount = randomInt(1).     IllegalArgumentException exception = expectThrows(IllegalArgumentException.class, () -> client().prepareSearch("high_card_idx").addAggregation(terms("terms").executionHint(randomExecutionHint()).field(SINGLE_VALUED_FIELD_NAME).collectMode(randomFrom(SubAggCollectionMode.values())).minDocCount(minDocCount).size(0)).get()).     assertThat(exception.getMessage(), containsString("[size] must be greater than 0. Found [0] in [terms]")). }
false;public;0;3;;public void testSingleValueFieldWithPartitionedFiltering() throws Exception {     runTestFieldWithPartitionedFiltering(SINGLE_VALUED_FIELD_NAME). }
false;public;0;3;;public void testMultiValueFieldWithPartitionedFiltering() throws Exception {     runTestFieldWithPartitionedFiltering(MULTI_VALUED_FIELD_NAME). }
false;private;1;28;;private void runTestFieldWithPartitionedFiltering(String field) throws Exception {     // Find total number of unique terms     SearchResponse allResponse = client().prepareSearch("idx").setTypes("type").addAggregation(terms("terms").field(field).size(10000).collectMode(randomFrom(SubAggCollectionMode.values()))).get().     assertSearchResponse(allResponse).     Terms terms = allResponse.getAggregations().get("terms").     assertThat(terms, notNullValue()).     assertThat(terms.getName(), equalTo("terms")).     int expectedCardinality = terms.getBuckets().size().     // Gather terms using partitioned aggregations     final int numPartitions = randomIntBetween(2, 4).     Set<String> foundTerms = new HashSet<>().     for (int partition = 0. partition < numPartitions. partition++) {         SearchResponse response = client().prepareSearch("idx").setTypes("type").addAggregation(terms("terms").field(field).includeExclude(new IncludeExclude(partition, numPartitions)).collectMode(randomFrom(SubAggCollectionMode.values()))).get().         assertSearchResponse(response).         terms = response.getAggregations().get("terms").         assertThat(terms, notNullValue()).         assertThat(terms.getName(), equalTo("terms")).         for (Bucket bucket : terms.getBuckets()) {             assertTrue(foundTerms.add(bucket.getKeyAsString())).         }     }     assertEquals(expectedCardinality, foundTerms.size()). }
false;public;0;26;;public void testSingleValuedFieldWithValueScript() throws Exception {     SearchResponse response = client().prepareSearch("idx").setTypes("type").addAggregation(terms("terms").executionHint(randomExecutionHint()).field(SINGLE_VALUED_FIELD_NAME).collectMode(randomFrom(SubAggCollectionMode.values())).script(new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, "'foo_' + _value", Collections.emptyMap()))).get().     assertSearchResponse(response).     Terms terms = response.getAggregations().get("terms").     assertThat(terms, notNullValue()).     assertThat(terms.getName(), equalTo("terms")).     assertThat(terms.getBuckets().size(), equalTo(5)).     for (int i = 0. i < 5. i++) {         Terms.Bucket bucket = terms.getBucketByKey("foo_val" + i).         assertThat(bucket, notNullValue()).         assertThat(key(bucket), equalTo("foo_val" + i)).         assertThat(bucket.getDocCount(), equalTo(1L)).     } }
false;public;0;25;;public void testMultiValuedFieldWithValueScriptNotUnique() throws Exception {     SearchResponse response = client().prepareSearch("idx").setTypes("type").addAggregation(terms("terms").executionHint(randomExecutionHint()).field(MULTI_VALUED_FIELD_NAME).collectMode(randomFrom(SubAggCollectionMode.values())).script(new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, "_value.substring(0,3)", Collections.emptyMap()))).get().     assertSearchResponse(response).     Terms terms = response.getAggregations().get("terms").     assertThat(terms, notNullValue()).     assertThat(terms.getName(), equalTo("terms")).     assertThat(terms.getBuckets().size(), equalTo(1)).     Terms.Bucket bucket = terms.getBucketByKey("val").     assertThat(bucket, notNullValue()).     assertThat(key(bucket), equalTo("val")).     assertThat(bucket.getDocCount(), equalTo(5L)). }
false;public;0;30;;public void testMultiValuedScript() throws Exception {     SearchResponse response = client().prepareSearch("idx").setTypes("type").addAggregation(terms("terms").executionHint(randomExecutionHint()).script(new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, "doc['" + MULTI_VALUED_FIELD_NAME + "']", Collections.emptyMap())).collectMode(randomFrom(SubAggCollectionMode.values()))).get().     assertSearchResponse(response).     Terms terms = response.getAggregations().get("terms").     assertThat(terms, notNullValue()).     assertThat(terms.getName(), equalTo("terms")).     assertThat(terms.getBuckets().size(), equalTo(6)).     for (int i = 0. i < 6. i++) {         Terms.Bucket bucket = terms.getBucketByKey("val" + i).         assertThat(bucket, notNullValue()).         assertThat(key(bucket), equalTo("val" + i)).         if (i == 0 || i == 5) {             assertThat(bucket.getDocCount(), equalTo(1L)).         } else {             assertThat(bucket.getDocCount(), equalTo(2L)).         }     } }
false;public;0;30;;public void testMultiValuedFieldWithValueScript() throws Exception {     SearchResponse response = client().prepareSearch("idx").setTypes("type").addAggregation(terms("terms").executionHint(randomExecutionHint()).field(MULTI_VALUED_FIELD_NAME).collectMode(randomFrom(SubAggCollectionMode.values())).script(new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, "'foo_' + _value", Collections.emptyMap()))).get().     assertSearchResponse(response).     Terms terms = response.getAggregations().get("terms").     assertThat(terms, notNullValue()).     assertThat(terms.getName(), equalTo("terms")).     assertThat(terms.getBuckets().size(), equalTo(6)).     for (int i = 0. i < 6. i++) {         Terms.Bucket bucket = terms.getBucketByKey("foo_val" + i).         assertThat(bucket, notNullValue()).         assertThat(key(bucket), equalTo("foo_val" + i)).         if (i == 0 || i == 5) {             assertThat(bucket.getDocCount(), equalTo(1L)).         } else {             assertThat(bucket.getDocCount(), equalTo(2L)).         }     } }
false;public;0;28;;/*      *      * [foo_val0, foo_val1] [foo_val1, foo_val2] [foo_val2, foo_val3] [foo_val3,      * foo_val4] [foo_val4, foo_val5]      *      *      * foo_val0 - doc_count: 1 - val_count: 2 foo_val1 - doc_count: 2 -      * val_count: 4 foo_val2 - doc_count: 2 - val_count: 4 foo_val3 - doc_count:      * 2 - val_count: 4 foo_val4 - doc_count: 2 - val_count: 4 foo_val5 -      * doc_count: 1 - val_count: 2      */ public void testScriptSingleValue() throws Exception {     Script script = new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, "doc['" + SINGLE_VALUED_FIELD_NAME + "'].value", Collections.emptyMap()).     SearchResponse response = client().prepareSearch("idx").setTypes("type").addAggregation(terms("terms").collectMode(randomFrom(SubAggCollectionMode.values())).executionHint(randomExecutionHint()).script(script)).get().     assertSearchResponse(response).     Terms terms = response.getAggregations().get("terms").     assertThat(terms, notNullValue()).     assertThat(terms.getName(), equalTo("terms")).     assertThat(terms.getBuckets().size(), equalTo(5)).     for (int i = 0. i < 5. i++) {         Terms.Bucket bucket = terms.getBucketByKey("val" + i).         assertThat(bucket, notNullValue()).         assertThat(key(bucket), equalTo("val" + i)).         assertThat(bucket.getDocCount(), equalTo(1L)).     } }
false;public;0;28;;public void testScriptSingleValueExplicitSingleValue() throws Exception {     Script script = new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, "doc['" + SINGLE_VALUED_FIELD_NAME + "'].value", Collections.emptyMap()).     SearchResponse response = client().prepareSearch("idx").setTypes("type").addAggregation(terms("terms").collectMode(randomFrom(SubAggCollectionMode.values())).executionHint(randomExecutionHint()).script(script)).get().     assertSearchResponse(response).     Terms terms = response.getAggregations().get("terms").     assertThat(terms, notNullValue()).     assertThat(terms.getName(), equalTo("terms")).     assertThat(terms.getBuckets().size(), equalTo(5)).     for (int i = 0. i < 5. i++) {         Terms.Bucket bucket = terms.getBucketByKey("val" + i).         assertThat(bucket, notNullValue()).         assertThat(key(bucket), equalTo("val" + i)).         assertThat(bucket.getDocCount(), equalTo(1L)).     } }
false;public;0;30;;public void testScriptMultiValued() throws Exception {     SearchResponse response = client().prepareSearch("idx").setTypes("type").addAggregation(terms("terms").collectMode(randomFrom(SubAggCollectionMode.values())).executionHint(randomExecutionHint()).script(new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, "doc['" + MULTI_VALUED_FIELD_NAME + "']", Collections.emptyMap()))).get().     assertSearchResponse(response).     Terms terms = response.getAggregations().get("terms").     assertThat(terms, notNullValue()).     assertThat(terms.getName(), equalTo("terms")).     assertThat(terms.getBuckets().size(), equalTo(6)).     for (int i = 0. i < 6. i++) {         Terms.Bucket bucket = terms.getBucketByKey("val" + i).         assertThat(bucket, notNullValue()).         assertThat(key(bucket), equalTo("val" + i)).         if (i == 0 || i == 5) {             assertThat(bucket.getDocCount(), equalTo(1L)).         } else {             assertThat(bucket.getDocCount(), equalTo(2L)).         }     } }
false;public;0;22;;public void testPartiallyUnmapped() throws Exception {     SearchResponse response = client().prepareSearch("idx", "idx_unmapped").setTypes("type").addAggregation(terms("terms").executionHint(randomExecutionHint()).field(SINGLE_VALUED_FIELD_NAME).collectMode(randomFrom(SubAggCollectionMode.values()))).get().     assertSearchResponse(response).     Terms terms = response.getAggregations().get("terms").     assertThat(terms, notNullValue()).     assertThat(terms.getName(), equalTo("terms")).     assertThat(terms.getBuckets().size(), equalTo(5)).     for (int i = 0. i < 5. i++) {         Terms.Bucket bucket = terms.getBucketByKey("val" + i).         assertThat(bucket, notNullValue()).         assertThat(key(bucket), equalTo("val" + i)).         assertThat(bucket.getDocCount(), equalTo(1L)).     } }
false;public;0;26;;public void testStringTermsNestedIntoPerBucketAggregator() throws Exception {     // no execution hint so that the logic that decides whether or not to use ordinals is executed     SearchResponse response = client().prepareSearch("idx").setTypes("type").addAggregation(filter("filter", termQuery(MULTI_VALUED_FIELD_NAME, "val3")).subAggregation(terms("terms").field(MULTI_VALUED_FIELD_NAME).collectMode(randomFrom(SubAggCollectionMode.values())))).get().     assertThat(response.getFailedShards(), equalTo(0)).     Filter filter = response.getAggregations().get("filter").     Terms terms = filter.getAggregations().get("terms").     assertThat(terms, notNullValue()).     assertThat(terms.getName(), equalTo("terms")).     assertThat(terms.getBuckets().size(), equalTo(3)).     for (int i = 2. i <= 4. i++) {         Terms.Bucket bucket = terms.getBucketByKey("val" + i).         assertThat(bucket, notNullValue()).         assertThat(key(bucket), equalTo("val" + i)).         assertThat(bucket.getDocCount(), equalTo(i == 3 ? 2L : 1L)).     } }
false;public;0;28;;public void testSingleValuedFieldOrderedByIllegalAgg() throws Exception {     boolean asc = true.     try {         client().prepareSearch("idx").setTypes("type").addAggregation(terms("terms").executionHint(randomExecutionHint()).field(SINGLE_VALUED_FIELD_NAME).collectMode(randomFrom(SubAggCollectionMode.values())).order(BucketOrder.aggregation("inner_terms>avg", asc)).subAggregation(terms("inner_terms").field(MULTI_VALUED_FIELD_NAME).subAggregation(avg("avg").field("i")))).get().         fail("Expected an exception").     } catch (SearchPhaseExecutionException e) {         ElasticsearchException[] rootCauses = e.guessRootCauses().         if (rootCauses.length == 1) {             ElasticsearchException rootCause = rootCauses[0].             if (rootCause instanceof AggregationExecutionException) {                 AggregationExecutionException aggException = (AggregationExecutionException) rootCause.                 assertThat(aggException.getMessage(), Matchers.startsWith("Invalid aggregation order path")).             } else {                 throw e.             }         } else {             throw e.         }     } }
false;public;0;35;;public void testSingleValuedFieldOrderedBySingleBucketSubAggregationAsc() throws Exception {     boolean asc = randomBoolean().     SearchResponse response = client().prepareSearch("idx").setTypes("type").addAggregation(terms("tags").executionHint(randomExecutionHint()).field("tag").collectMode(randomFrom(SubAggCollectionMode.values())).order(BucketOrder.aggregation("filter", asc)).subAggregation(filter("filter", QueryBuilders.matchAllQuery()))).get().     assertSearchResponse(response).     Terms tags = response.getAggregations().get("tags").     assertThat(tags, notNullValue()).     assertThat(tags.getName(), equalTo("tags")).     assertThat(tags.getBuckets().size(), equalTo(2)).     Iterator<? extends Terms.Bucket> iters = tags.getBuckets().iterator().     Terms.Bucket tag = iters.next().     assertThat(tag, notNullValue()).     assertThat(key(tag), equalTo(asc ? "less" : "more")).     assertThat(tag.getDocCount(), equalTo(asc ? 2L : 3L)).     Filter filter = tag.getAggregations().get("filter").     assertThat(filter, notNullValue()).     assertThat(filter.getDocCount(), equalTo(asc ? 2L : 3L)).     tag = iters.next().     assertThat(tag, notNullValue()).     assertThat(key(tag), equalTo(asc ? "more" : "less")).     assertThat(tag.getDocCount(), equalTo(asc ? 3L : 2L)).     filter = tag.getAggregations().get("filter").     assertThat(filter, notNullValue()).     assertThat(filter.getDocCount(), equalTo(asc ? 3L : 2L)). }
false;public;0;56;;public void testSingleValuedFieldOrderedBySubAggregationAscMultiHierarchyLevels() throws Exception {     boolean asc = randomBoolean().     SearchResponse response = client().prepareSearch("idx").setTypes("type").addAggregation(terms("tags").executionHint(randomExecutionHint()).field("tag").collectMode(randomFrom(SubAggCollectionMode.values())).order(BucketOrder.aggregation("filter1>filter2>stats.max", asc)).subAggregation(filter("filter1", QueryBuilders.matchAllQuery()).subAggregation(filter("filter2", QueryBuilders.matchAllQuery()).subAggregation(stats("stats").field("i"))))).get().     assertSearchResponse(response).     Terms tags = response.getAggregations().get("tags").     assertThat(tags, notNullValue()).     assertThat(tags.getName(), equalTo("tags")).     assertThat(tags.getBuckets().size(), equalTo(2)).     Iterator<? extends Terms.Bucket> iters = tags.getBuckets().iterator().     // the max for "more" is 2     // the max for "less" is 4     Terms.Bucket tag = iters.next().     assertThat(tag, notNullValue()).     assertThat(key(tag), equalTo(asc ? "more" : "less")).     assertThat(tag.getDocCount(), equalTo(asc ? 3L : 2L)).     Filter filter1 = tag.getAggregations().get("filter1").     assertThat(filter1, notNullValue()).     assertThat(filter1.getDocCount(), equalTo(asc ? 3L : 2L)).     Filter filter2 = filter1.getAggregations().get("filter2").     assertThat(filter2, notNullValue()).     assertThat(filter2.getDocCount(), equalTo(asc ? 3L : 2L)).     Stats stats = filter2.getAggregations().get("stats").     assertThat(stats, notNullValue()).     assertThat(stats.getMax(), equalTo(asc ? 2.0 : 4.0)).     tag = iters.next().     assertThat(tag, notNullValue()).     assertThat(key(tag), equalTo(asc ? "less" : "more")).     assertThat(tag.getDocCount(), equalTo(asc ? 2L : 3L)).     filter1 = tag.getAggregations().get("filter1").     assertThat(filter1, notNullValue()).     assertThat(filter1.getDocCount(), equalTo(asc ? 2L : 3L)).     filter2 = filter1.getAggregations().get("filter2").     assertThat(filter2, notNullValue()).     assertThat(filter2.getDocCount(), equalTo(asc ? 2L : 3L)).     stats = filter2.getAggregations().get("stats").     assertThat(stats, notNullValue()).     assertThat(stats.getMax(), equalTo(asc ? 4.0 : 2.0)). }
false;public;0;62;;public void testSingleValuedFieldOrderedBySubAggregationAscMultiHierarchyLevelsSpecialChars() throws Exception {     StringBuilder filter2NameBuilder = new StringBuilder("filt.er2").     filter2NameBuilder.append(randomAlphaOfLengthBetween(3, 10).replace("[", "").replace("]", "").replace(">", "")).     String filter2Name = filter2NameBuilder.toString().     StringBuilder statsNameBuilder = new StringBuilder("st.ats").     statsNameBuilder.append(randomAlphaOfLengthBetween(3, 10).replace("[", "").replace("]", "").replace(">", "")).     String statsName = statsNameBuilder.toString().     boolean asc = randomBoolean().     SearchResponse response = client().prepareSearch("idx").setTypes("type").addAggregation(terms("tags").executionHint(randomExecutionHint()).field("tag").collectMode(randomFrom(SubAggCollectionMode.values())).order(BucketOrder.aggregation("filter1>" + filter2Name + ">" + statsName + ".max", asc)).subAggregation(filter("filter1", QueryBuilders.matchAllQuery()).subAggregation(filter(filter2Name, QueryBuilders.matchAllQuery()).subAggregation(stats(statsName).field("i"))))).get().     assertSearchResponse(response).     Terms tags = response.getAggregations().get("tags").     assertThat(tags, notNullValue()).     assertThat(tags.getName(), equalTo("tags")).     assertThat(tags.getBuckets().size(), equalTo(2)).     Iterator<? extends Terms.Bucket> iters = tags.getBuckets().iterator().     // the max for "more" is 2     // the max for "less" is 4     Terms.Bucket tag = iters.next().     assertThat(tag, notNullValue()).     assertThat(key(tag), equalTo(asc ? "more" : "less")).     assertThat(tag.getDocCount(), equalTo(asc ? 3L : 2L)).     Filter filter1 = tag.getAggregations().get("filter1").     assertThat(filter1, notNullValue()).     assertThat(filter1.getDocCount(), equalTo(asc ? 3L : 2L)).     Filter filter2 = filter1.getAggregations().get(filter2Name).     assertThat(filter2, notNullValue()).     assertThat(filter2.getDocCount(), equalTo(asc ? 3L : 2L)).     Stats stats = filter2.getAggregations().get(statsName).     assertThat(stats, notNullValue()).     assertThat(stats.getMax(), equalTo(asc ? 2.0 : 4.0)).     tag = iters.next().     assertThat(tag, notNullValue()).     assertThat(key(tag), equalTo(asc ? "less" : "more")).     assertThat(tag.getDocCount(), equalTo(asc ? 2L : 3L)).     filter1 = tag.getAggregations().get("filter1").     assertThat(filter1, notNullValue()).     assertThat(filter1.getDocCount(), equalTo(asc ? 2L : 3L)).     filter2 = filter1.getAggregations().get(filter2Name).     assertThat(filter2, notNullValue()).     assertThat(filter2.getDocCount(), equalTo(asc ? 2L : 3L)).     stats = filter2.getAggregations().get(statsName).     assertThat(stats, notNullValue()).     assertThat(stats.getMax(), equalTo(asc ? 4.0 : 2.0)). }
false;public;0;62;;public void testSingleValuedFieldOrderedBySubAggregationAscMultiHierarchyLevelsSpecialCharsNoDotNotation() throws Exception {     StringBuilder filter2NameBuilder = new StringBuilder("filt.er2").     filter2NameBuilder.append(randomAlphaOfLengthBetween(3, 10).replace("[", "").replace("]", "").replace(">", "")).     String filter2Name = filter2NameBuilder.toString().     StringBuilder statsNameBuilder = new StringBuilder("st.ats").     statsNameBuilder.append(randomAlphaOfLengthBetween(3, 10).replace("[", "").replace("]", "").replace(">", "")).     String statsName = statsNameBuilder.toString().     boolean asc = randomBoolean().     SearchResponse response = client().prepareSearch("idx").setTypes("type").addAggregation(terms("tags").executionHint(randomExecutionHint()).field("tag").collectMode(randomFrom(SubAggCollectionMode.values())).order(BucketOrder.aggregation("filter1>" + filter2Name + ">" + statsName + "[max]", asc)).subAggregation(filter("filter1", QueryBuilders.matchAllQuery()).subAggregation(filter(filter2Name, QueryBuilders.matchAllQuery()).subAggregation(stats(statsName).field("i"))))).get().     assertSearchResponse(response).     Terms tags = response.getAggregations().get("tags").     assertThat(tags, notNullValue()).     assertThat(tags.getName(), equalTo("tags")).     assertThat(tags.getBuckets().size(), equalTo(2)).     Iterator<? extends Terms.Bucket> iters = tags.getBuckets().iterator().     // the max for "more" is 2     // the max for "less" is 4     Terms.Bucket tag = iters.next().     assertThat(tag, notNullValue()).     assertThat(key(tag), equalTo(asc ? "more" : "less")).     assertThat(tag.getDocCount(), equalTo(asc ? 3L : 2L)).     Filter filter1 = tag.getAggregations().get("filter1").     assertThat(filter1, notNullValue()).     assertThat(filter1.getDocCount(), equalTo(asc ? 3L : 2L)).     Filter filter2 = filter1.getAggregations().get(filter2Name).     assertThat(filter2, notNullValue()).     assertThat(filter2.getDocCount(), equalTo(asc ? 3L : 2L)).     Stats stats = filter2.getAggregations().get(statsName).     assertThat(stats, notNullValue()).     assertThat(stats.getMax(), equalTo(asc ? 2.0 : 4.0)).     tag = iters.next().     assertThat(tag, notNullValue()).     assertThat(key(tag), equalTo(asc ? "less" : "more")).     assertThat(tag.getDocCount(), equalTo(asc ? 2L : 3L)).     filter1 = tag.getAggregations().get("filter1").     assertThat(filter1, notNullValue()).     assertThat(filter1.getDocCount(), equalTo(asc ? 2L : 3L)).     filter2 = filter1.getAggregations().get(filter2Name).     assertThat(filter2, notNullValue()).     assertThat(filter2.getDocCount(), equalTo(asc ? 2L : 3L)).     stats = filter2.getAggregations().get(statsName).     assertThat(stats, notNullValue()).     assertThat(stats.getMax(), equalTo(asc ? 4.0 : 2.0)). }
false;public;0;17;;public void testSingleValuedFieldOrderedByMissingSubAggregation() throws Exception {     for (String index : Arrays.asList("idx", "idx_unmapped")) {         try {             client().prepareSearch(index).setTypes("type").addAggregation(terms("terms").executionHint(randomExecutionHint()).field(SINGLE_VALUED_FIELD_NAME).collectMode(randomFrom(SubAggCollectionMode.values())).order(BucketOrder.aggregation("avg_i", true))).get().             fail("Expected search to fail when trying to sort terms aggregation by sug-aggregation that doesn't exist").         } catch (ElasticsearchException e) {         // expected         }     } }
false;public;0;20;;public void testSingleValuedFieldOrderedByNonMetricsOrMultiBucketSubAggregation() throws Exception {     for (String index : Arrays.asList("idx", "idx_unmapped")) {         try {             client().prepareSearch(index).setTypes("type").addAggregation(terms("terms").executionHint(randomExecutionHint()).field(SINGLE_VALUED_FIELD_NAME).collectMode(randomFrom(SubAggCollectionMode.values())).order(BucketOrder.aggregation("values", true)).subAggregation(terms("values").field("i").collectMode(randomFrom(SubAggCollectionMode.values())))).get().             fail("Expected search to fail when trying to sort terms aggregation by sug-aggregation " + "which is not of a metrics or single-bucket type").         } catch (ElasticsearchException e) {         // expected         }     } }
false;public;0;19;;public void testSingleValuedFieldOrderedByMultiValuedSubAggregationWithUnknownMetric() throws Exception {     for (String index : Arrays.asList("idx", "idx_unmapped")) {         try {             SearchResponse response = client().prepareSearch(index).setTypes("type").addAggregation(terms("terms").executionHint(randomExecutionHint()).field(SINGLE_VALUED_FIELD_NAME).collectMode(randomFrom(SubAggCollectionMode.values())).order(BucketOrder.aggregation("stats.foo", true)).subAggregation(stats("stats").field("i"))).get().             fail("Expected search to fail when trying to sort terms aggregation by multi-valued sug-aggregation " + "with an unknown specified metric to order by. response had " + response.getFailedShards() + " failed shards.").         } catch (ElasticsearchException e) {         // expected         }     } }
false;public;0;19;;public void testSingleValuedFieldOrderedByMultiValuedSubAggregationWithoutMetric() throws Exception {     for (String index : Arrays.asList("idx", "idx_unmapped")) {         try {             client().prepareSearch(index).setTypes("type").addAggregation(terms("terms").executionHint(randomExecutionHint()).field(SINGLE_VALUED_FIELD_NAME).collectMode(randomFrom(SubAggCollectionMode.values())).order(BucketOrder.aggregation("stats", true)).subAggregation(stats("stats").field("i"))).execute().actionGet().             fail("Expected search to fail when trying to sort terms aggregation by multi-valued sug-aggregation " + "where the metric name is not specified").         } catch (ElasticsearchException e) {         // expected         }     } }
false;public;0;29;;public void testSingleValuedFieldOrderedByMultiValueSubAggregationAsc() throws Exception {     boolean asc = true.     SearchResponse response = client().prepareSearch("idx").setTypes("type").addAggregation(terms("terms").executionHint(randomExecutionHint()).field(SINGLE_VALUED_FIELD_NAME).collectMode(randomFrom(SubAggCollectionMode.values())).order(BucketOrder.aggregation("stats.avg", asc)).subAggregation(stats("stats").field("i"))).get().     assertSearchResponse(response).     Terms terms = response.getAggregations().get("terms").     assertThat(terms, notNullValue()).     assertThat(terms.getName(), equalTo("terms")).     assertThat(terms.getBuckets().size(), equalTo(5)).     int i = 0.     for (Terms.Bucket bucket : terms.getBuckets()) {         assertThat(bucket, notNullValue()).         assertThat(key(bucket), equalTo("val" + i)).         assertThat(bucket.getDocCount(), equalTo(1L)).         Stats stats = bucket.getAggregations().get("stats").         assertThat(stats, notNullValue()).         assertThat(stats.getMax(), equalTo((double) i)).         i++.     } }
false;public;0;30;;public void testSingleValuedFieldOrderedByMultiValueSubAggregationDesc() throws Exception {     boolean asc = false.     SearchResponse response = client().prepareSearch("idx").setTypes("type").addAggregation(terms("terms").executionHint(randomExecutionHint()).field(SINGLE_VALUED_FIELD_NAME).collectMode(randomFrom(SubAggCollectionMode.values())).order(BucketOrder.aggregation("stats.avg", asc)).subAggregation(stats("stats").field("i"))).get().     assertSearchResponse(response).     Terms terms = response.getAggregations().get("terms").     assertThat(terms, notNullValue()).     assertThat(terms.getName(), equalTo("terms")).     assertThat(terms.getBuckets().size(), equalTo(5)).     int i = 4.     for (Terms.Bucket bucket : terms.getBuckets()) {         assertThat(bucket, notNullValue()).         assertThat(key(bucket), equalTo("val" + i)).         assertThat(bucket.getDocCount(), equalTo(1L)).         Stats stats = bucket.getAggregations().get("stats").         assertThat(stats, notNullValue()).         assertThat(stats.getMax(), equalTo((double) i)).         i--.     } }
false;public;0;31;;public void testSingleValuedFieldOrderedByMultiValueExtendedStatsAsc() throws Exception {     boolean asc = true.     SearchResponse response = client().prepareSearch("idx").setTypes("type").addAggregation(terms("terms").executionHint(randomExecutionHint()).field(SINGLE_VALUED_FIELD_NAME).collectMode(randomFrom(SubAggCollectionMode.values())).order(BucketOrder.aggregation("stats.sum_of_squares", asc)).subAggregation(extendedStats("stats").field("i"))).get().     assertSearchResponse(response).     Terms terms = response.getAggregations().get("terms").     assertThat(terms, notNullValue()).     assertThat(terms.getName(), equalTo("terms")).     assertThat(terms.getBuckets().size(), equalTo(5)).     int i = 0.     for (Terms.Bucket bucket : terms.getBuckets()) {         assertThat(bucket, notNullValue()).         assertThat(key(bucket), equalTo("val" + i)).         assertThat(bucket.getDocCount(), equalTo(1L)).         ExtendedStats stats = bucket.getAggregations().get("stats").         assertThat(stats, notNullValue()).         assertThat(stats.getMax(), equalTo((double) i)).         i++.     } }
false;public;0;44;;public void testSingleValuedFieldOrderedByStatsAggAscWithTermsSubAgg() throws Exception {     boolean asc = true.     SearchResponse response = client().prepareSearch("idx").setTypes("type").addAggregation(terms("terms").executionHint(randomExecutionHint()).field(SINGLE_VALUED_FIELD_NAME).collectMode(randomFrom(SubAggCollectionMode.values())).order(BucketOrder.aggregation("stats.sum_of_squares", asc)).subAggregation(extendedStats("stats").field("i")).subAggregation(terms("subTerms").field("s_values").collectMode(randomFrom(SubAggCollectionMode.values())))).get().     assertSearchResponse(response).     Terms terms = response.getAggregations().get("terms").     assertThat(terms, notNullValue()).     assertThat(terms.getName(), equalTo("terms")).     assertThat(terms.getBuckets().size(), equalTo(5)).     int i = 0.     for (Terms.Bucket bucket : terms.getBuckets()) {         assertThat(bucket, notNullValue()).         assertThat(key(bucket), equalTo("val" + i)).         assertThat(bucket.getDocCount(), equalTo(1L)).         ExtendedStats stats = bucket.getAggregations().get("stats").         assertThat(stats, notNullValue()).         assertThat(stats.getMax(), equalTo((double) i)).         Terms subTermsAgg = bucket.getAggregations().get("subTerms").         assertThat(subTermsAgg, notNullValue()).         assertThat(subTermsAgg.getBuckets().size(), equalTo(2)).         int j = i.         for (Terms.Bucket subBucket : subTermsAgg.getBuckets()) {             assertThat(subBucket, notNullValue()).             assertThat(key(subBucket), equalTo("val" + j)).             assertThat(subBucket.getDocCount(), equalTo(1L)).             j++.         }         i++.     } }
false;public;0;4;;public void testSingleValuedFieldOrderedBySingleValueSubAggregationAscAndTermsDesc() throws Exception {     String[] expectedKeys = new String[] { "val1", "val2", "val4", "val3", "val7", "val6", "val5" }.     assertMultiSortResponse(expectedKeys, BucketOrder.aggregation("avg_l", true), BucketOrder.key(false)). }
false;public;0;4;;public void testSingleValuedFieldOrderedBySingleValueSubAggregationAscAndTermsAsc() throws Exception {     String[] expectedKeys = new String[] { "val1", "val2", "val3", "val4", "val5", "val6", "val7" }.     assertMultiSortResponse(expectedKeys, BucketOrder.aggregation("avg_l", true), BucketOrder.key(true)). }
false;public;0;4;;public void testSingleValuedFieldOrderedBySingleValueSubAggregationDescAndTermsAsc() throws Exception {     String[] expectedKeys = new String[] { "val5", "val6", "val7", "val3", "val4", "val2", "val1" }.     assertMultiSortResponse(expectedKeys, BucketOrder.aggregation("avg_l", false), BucketOrder.key(true)). }
false;public;0;4;;public void testSingleValuedFieldOrderedByCountAscAndSingleValueSubAggregationAsc() throws Exception {     String[] expectedKeys = new String[] { "val6", "val7", "val3", "val4", "val5", "val1", "val2" }.     assertMultiSortResponse(expectedKeys, BucketOrder.count(true), BucketOrder.aggregation("avg_l", true)). }
false;public;0;4;;public void testSingleValuedFieldOrderedBySingleValueSubAggregationAscSingleValueSubAggregationAsc() throws Exception {     String[] expectedKeys = new String[] { "val6", "val7", "val3", "val5", "val4", "val1", "val2" }.     assertMultiSortResponse(expectedKeys, BucketOrder.aggregation("sum_d", true), BucketOrder.aggregation("avg_l", true)). }
false;public;0;5;;public void testSingleValuedFieldOrderedByThreeCriteria() throws Exception {     String[] expectedKeys = new String[] { "val2", "val1", "val4", "val5", "val3", "val6", "val7" }.     assertMultiSortResponse(expectedKeys, BucketOrder.count(false), BucketOrder.aggregation("sum_d", false), BucketOrder.aggregation("avg_l", false)). }
false;public;0;4;;public void testSingleValuedFieldOrderedBySingleValueSubAggregationAscAsCompound() throws Exception {     String[] expectedKeys = new String[] { "val1", "val2", "val3", "val4", "val5", "val6", "val7" }.     assertMultiSortResponse(expectedKeys, BucketOrder.aggregation("avg_l", true)). }
false;private;2;29;;private void assertMultiSortResponse(String[] expectedKeys, BucketOrder... order) {     SearchResponse response = client().prepareSearch("sort_idx").addAggregation(terms("terms").executionHint(randomExecutionHint()).field(SINGLE_VALUED_FIELD_NAME).collectMode(randomFrom(SubAggCollectionMode.values())).order(BucketOrder.compound(order)).subAggregation(avg("avg_l").field("l")).subAggregation(sum("sum_d").field("d"))).get().     assertSearchResponse(response).     Terms terms = response.getAggregations().get("terms").     assertThat(terms, notNullValue()).     assertThat(terms.getName(), equalTo("terms")).     assertThat(terms.getBuckets().size(), equalTo(expectedKeys.length)).     int i = 0.     for (Terms.Bucket bucket : terms.getBuckets()) {         assertThat(bucket, notNullValue()).         assertThat(key(bucket), equalTo(expectedKeys[i])).         assertThat(bucket.getDocCount(), equalTo(expectedMultiSortBuckets.get(expectedKeys[i]).get("_count"))).         Avg avg = bucket.getAggregations().get("avg_l").         assertThat(avg, notNullValue()).         assertThat(avg.getValue(), equalTo(expectedMultiSortBuckets.get(expectedKeys[i]).get("avg_l"))).         Sum sum = bucket.getAggregations().get("sum_d").         assertThat(sum, notNullValue()).         assertThat(sum.getValue(), equalTo(expectedMultiSortBuckets.get(expectedKeys[i]).get("sum_d"))).         i++.     } }
false;public;0;22;;public void testIndexMetaField() throws Exception {     SearchResponse response = client().prepareSearch("idx", "empty_bucket_idx").setTypes("type").addAggregation(terms("terms").collectMode(randomFrom(SubAggCollectionMode.values())).executionHint(randomExecutionHint()).field(IndexFieldMapper.NAME)).get().     assertSearchResponse(response).     Terms terms = response.getAggregations().get("terms").     assertThat(terms, notNullValue()).     assertThat(terms.getName(), equalTo("terms")).     assertThat(terms.getBuckets().size(), equalTo(2)).     int i = 0.     for (Terms.Bucket bucket : terms.getBuckets()) {         assertThat(bucket, notNullValue()).         assertThat(key(bucket), equalTo(i == 0 ? "idx" : "empty_bucket_idx")).         assertThat(bucket.getDocCount(), equalTo(i == 0 ? 5L : 2L)).         i++.     } }
false;public;0;3;;public void testOtherDocCount() {     testOtherDocCount(SINGLE_VALUED_FIELD_NAME, MULTI_VALUED_FIELD_NAME). }
true;public;0;36;/**  * Make sure that a request using a script does not get cached and a request  * not using a script does get cached.  */ ;/**  * Make sure that a request using a script does not get cached and a request  * not using a script does get cached.  */ public void testDontCacheScripts() throws Exception {     assertAcked(prepareCreate("cache_test_idx").addMapping("type", "d", "type=keyword").setSettings(Settings.builder().put("requests.cache.enable", true).put("number_of_shards", 1).put("number_of_replicas", 1)).get()).     indexRandom(true, client().prepareIndex("cache_test_idx", "type", "1").setSource("s", "foo"), client().prepareIndex("cache_test_idx", "type", "2").setSource("s", "bar")).     // Make sure we are starting with a clear cache     assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache().getHitCount(), equalTo(0L)).     assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache().getMissCount(), equalTo(0L)).     // Test that a request using a script does not get cached     SearchResponse r = client().prepareSearch("cache_test_idx").setSize(0).addAggregation(terms("terms").field("d").script(new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, "'foo_' + _value", Collections.emptyMap()))).get().     assertSearchResponse(r).     assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache().getHitCount(), equalTo(0L)).     assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache().getMissCount(), equalTo(0L)).     // To make sure that the cache is working test that a request not using     // a script is cached     r = client().prepareSearch("cache_test_idx").setSize(0).addAggregation(terms("terms").field("d")).get().     assertSearchResponse(r).     assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache().getHitCount(), equalTo(0L)).     assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache().getMissCount(), equalTo(1L)). }
