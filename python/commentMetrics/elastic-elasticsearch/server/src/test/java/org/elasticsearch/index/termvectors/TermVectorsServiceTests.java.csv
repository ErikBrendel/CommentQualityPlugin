commented;modifiers;parameterAmount;loc;comment;code
false;public;0;31;;public void testTook() throws Exception {     XContentBuilder mapping = jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("field").field("type", "text").field("term_vector", "with_positions_offsets_payloads").endObject().endObject().endObject().endObject().     createIndex("test", Settings.EMPTY, "type1", mapping).     ensureGreen().     client().prepareIndex("test", "type1", "0").setSource("field", "foo bar").setRefreshPolicy(IMMEDIATE).get().     IndicesService indicesService = getInstanceFromNode(IndicesService.class).     IndexService test = indicesService.indexService(resolveIndex("test")).     IndexShard shard = test.getShardOrNull(0).     assertThat(shard, notNullValue()).     List<Long> longs = Stream.of(abs(randomLong()), abs(randomLong())).sorted().collect(toList()).     TermVectorsRequest request = new TermVectorsRequest("test", "type1", "0").     TermVectorsResponse response = TermVectorsService.getTermVectors(shard, request, longs.iterator()::next).     assertThat(response, notNullValue()).     assertThat(response.getTook().getMillis(), equalTo(TimeUnit.NANOSECONDS.toMillis(longs.get(1) - longs.get(0)))). }
false;public;0;41;;public void testDocFreqs() throws IOException {     XContentBuilder mapping = jsonBuilder().startObject().startObject("_doc").startObject("properties").startObject("text").field("type", "text").field("term_vector", "with_positions_offsets_payloads").endObject().endObject().endObject().endObject().     Settings settings = Settings.builder().put("number_of_shards", 1).build().     createIndex("test", settings, "_doc", mapping).     ensureGreen().     int max = between(3, 10).     BulkRequestBuilder bulk = client().prepareBulk().     for (int i = 0. i < max. i++) {         bulk.add(client().prepareIndex("test", "_doc", Integer.toString(i)).setSource("text", "the quick brown fox jumped over the lazy dog")).     }     bulk.get().     TermVectorsRequest request = new TermVectorsRequest("test", "_doc", "0").termStatistics(true).     IndicesService indicesService = getInstanceFromNode(IndicesService.class).     IndexService test = indicesService.indexService(resolveIndex("test")).     IndexShard shard = test.getShardOrNull(0).     assertThat(shard, notNullValue()).     TermVectorsResponse response = TermVectorsService.getTermVectors(shard, request).     assertEquals(1, response.getFields().size()).     Terms terms = response.getFields().terms("text").     TermsEnum iterator = terms.iterator().     while (iterator.next() != null) {         assertEquals(max, iterator.docFreq()).     } }
false;public;0;48;;public void testWithIndexedPhrases() throws IOException {     XContentBuilder mapping = jsonBuilder().startObject().startObject("_doc").startObject("properties").startObject("text").field("type", "text").field("index_phrases", true).field("term_vector", "with_positions_offsets_payloads").endObject().endObject().endObject().endObject().     Settings settings = Settings.builder().put("number_of_shards", 1).build().     createIndex("test", settings, "_doc", mapping).     ensureGreen().     int max = between(3, 10).     BulkRequestBuilder bulk = client().prepareBulk().     for (int i = 0. i < max. i++) {         bulk.add(client().prepareIndex("test", "_doc", Integer.toString(i)).setSource("text", "the quick brown fox jumped over the lazy dog")).     }     bulk.get().     TermVectorsRequest request = new TermVectorsRequest("test", "_doc", "0").termStatistics(true).     IndicesService indicesService = getInstanceFromNode(IndicesService.class).     IndexService test = indicesService.indexService(resolveIndex("test")).     IndexShard shard = test.getShardOrNull(0).     assertThat(shard, notNullValue()).     TermVectorsResponse response = TermVectorsService.getTermVectors(shard, request).     assertEquals(2, response.getFields().size()).     Terms terms = response.getFields().terms("text").     TermsEnum iterator = terms.iterator().     while (iterator.next() != null) {         assertEquals(max, iterator.docFreq()).     }     Terms phrases = response.getFields().terms("text._index_phrase").     TermsEnum phraseIterator = phrases.iterator().     while (phraseIterator.next() != null) {         assertEquals(max, phraseIterator.docFreq()).     } }
