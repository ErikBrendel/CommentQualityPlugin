commented;modifiers;parameterAmount;loc;comment;code
false;public;0;21;;public void testSerialization() throws Exception {     org.elasticsearch.common.Rounding.DateTimeUnit randomDateTimeUnit = randomFrom(org.elasticsearch.common.Rounding.DateTimeUnit.values()).     org.elasticsearch.common.Rounding rounding.     if (randomBoolean()) {         rounding = org.elasticsearch.common.Rounding.builder(randomDateTimeUnit).timeZone(ZoneOffset.UTC).build().     } else {         rounding = org.elasticsearch.common.Rounding.builder(timeValue()).timeZone(ZoneOffset.UTC).build().     }     BytesStreamOutput output = new BytesStreamOutput().     output.setVersion(VersionUtils.getPreviousVersion(Version.V_7_0_0)).     rounding.writeTo(output).     Rounding roundingJoda = Rounding.Streams.read(output.bytes().streamInput()).     org.elasticsearch.common.Rounding roundingJavaTime = org.elasticsearch.common.Rounding.read(output.bytes().streamInput()).     int randomInt = randomIntBetween(1, 1_000_000_000).     assertThat(roundingJoda.round(randomInt), is(roundingJavaTime.round(randomInt))).     assertThat(roundingJoda.nextRoundingValue(randomInt), is(roundingJavaTime.nextRoundingValue(randomInt))). }
false;public;0;19;;public void testDuellingImplementations() {     org.elasticsearch.common.Rounding.DateTimeUnit randomDateTimeUnit = randomFrom(org.elasticsearch.common.Rounding.DateTimeUnit.values()).     org.elasticsearch.common.Rounding rounding.     Rounding roundingJoda.     if (randomBoolean()) {         rounding = org.elasticsearch.common.Rounding.builder(randomDateTimeUnit).timeZone(ZoneOffset.UTC).build().         DateTimeUnit dateTimeUnit = DateTimeUnit.resolve(randomDateTimeUnit.getId()).         roundingJoda = Rounding.builder(dateTimeUnit).timeZone(DateTimeZone.UTC).build().     } else {         TimeValue interval = timeValue().         rounding = org.elasticsearch.common.Rounding.builder(interval).timeZone(ZoneOffset.UTC).build().         roundingJoda = Rounding.builder(interval).timeZone(DateTimeZone.UTC).build().     }     long roundValue = randomLong().     assertThat(roundingJoda.round(roundValue), is(rounding.round(roundValue))). }
false;static;0;3;;static TimeValue timeValue() {     return TimeValue.parseTimeValue(randomIntBetween(1, 1000) + randomFrom(ALLOWED_TIME_SUFFIXES), "settingName"). }
