# id;timestamp;commentText;codeText;commentWords;codeWords
DateDerivativeIT -> public void testSingleValuedFieldNormalised_timeZone_CET_DstStart() throws Exception;1524684173;Do a derivative on a date histogram with time zone CET at DST start;public void testSingleValuedFieldNormalised_timeZone_CET_DstStart() throws Exception {_        createIndex(IDX_DST_START)__        List<IndexRequestBuilder> builders = new ArrayList<>()___        DateTimeZone timezone = DateTimeZone.forID("CET")__        addNTimes(1, IDX_DST_START, new DateTime("2012-03-24T01:00:00", timezone), builders)__        addNTimes(2, IDX_DST_START, new DateTime("2012-03-25T01:00:00", timezone), builders)_ _        addNTimes(3, IDX_DST_START, new DateTime("2012-03-26T01:00:00", timezone), builders)__        addNTimes(4, IDX_DST_START, new DateTime("2012-03-27T01:00:00", timezone), builders)__        indexRandom(true, builders)__        ensureSearchable()___        SearchResponse response = client()_                .prepareSearch(IDX_DST_START)_                .addAggregation(dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.DAY)_                        .timeZone(timezone).minDocCount(0)_                        .subAggregation(derivative("deriv", "_count").unit(DateHistogramInterval.HOUR)))_                .execute()_                .actionGet()___        assertSearchResponse(response)___        Histogram deriv = response.getAggregations().get("histo")__        assertThat(deriv, notNullValue())__        assertThat(deriv.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = deriv.getBuckets()__        assertThat(buckets.size(), equalTo(4))___        assertBucket(buckets.get(0), new DateTime("2012-03-24", timezone).toDateTime(DateTimeZone.UTC), 1L, nullValue(), null, null)__        assertBucket(buckets.get(1), new DateTime("2012-03-25", timezone).toDateTime(DateTimeZone.UTC), 2L, notNullValue(), 1d, 1d / 24d)__        _        assertBucket(buckets.get(2), new DateTime("2012-03-26", timezone).toDateTime(DateTimeZone.UTC), 3L, notNullValue(), 1d, 1d / 23d)__        assertBucket(buckets.get(3), new DateTime("2012-03-27", timezone).toDateTime(DateTimeZone.UTC), 4L, notNullValue(), 1d, 1d / 24d)__    };do,a,derivative,on,a,date,histogram,with,time,zone,cet,at,dst,start;public,void,throws,exception,create,index,list,index,request,builder,builders,new,array,list,date,time,zone,timezone,date,time,zone,for,id,cet,add,ntimes,1,new,date,time,2012,03,24t01,00,00,timezone,builders,add,ntimes,2,new,date,time,2012,03,25t01,00,00,timezone,builders,add,ntimes,3,new,date,time,2012,03,26t01,00,00,timezone,builders,add,ntimes,4,new,date,time,2012,03,27t01,00,00,timezone,builders,index,random,true,builders,ensure,searchable,search,response,response,client,prepare,search,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,day,time,zone,timezone,min,doc,count,0,sub,aggregation,derivative,deriv,unit,date,histogram,interval,hour,execute,action,get,assert,search,response,response,histogram,deriv,response,get,aggregations,get,histo,assert,that,deriv,not,null,value,assert,that,deriv,get,name,equal,to,histo,list,extends,bucket,buckets,deriv,get,buckets,assert,that,buckets,size,equal,to,4,assert,bucket,buckets,get,0,new,date,time,2012,03,24,timezone,to,date,time,date,time,zone,utc,1l,null,value,null,null,assert,bucket,buckets,get,1,new,date,time,2012,03,25,timezone,to,date,time,date,time,zone,utc,2l,not,null,value,1d,1d,24d,assert,bucket,buckets,get,2,new,date,time,2012,03,26,timezone,to,date,time,date,time,zone,utc,3l,not,null,value,1d,1d,23d,assert,bucket,buckets,get,3,new,date,time,2012,03,27,timezone,to,date,time,date,time,zone,utc,4l,not,null,value,1d,1d,24d
DateDerivativeIT -> public void testSingleValuedFieldNormalised_timeZone_CET_DstStart() throws Exception;1536314350;Do a derivative on a date histogram with time zone CET at DST start;public void testSingleValuedFieldNormalised_timeZone_CET_DstStart() throws Exception {_        createIndex(IDX_DST_START)__        List<IndexRequestBuilder> builders = new ArrayList<>()___        DateTimeZone timezone = DateTimeZone.forID("CET")__        addNTimes(1, IDX_DST_START, new DateTime("2012-03-24T01:00:00", timezone), builders)__        addNTimes(2, IDX_DST_START, new DateTime("2012-03-25T01:00:00", timezone), builders)_ _        addNTimes(3, IDX_DST_START, new DateTime("2012-03-26T01:00:00", timezone), builders)__        addNTimes(4, IDX_DST_START, new DateTime("2012-03-27T01:00:00", timezone), builders)__        indexRandom(true, builders)__        ensureSearchable()___        SearchResponse response = client()_                .prepareSearch(IDX_DST_START)_                .addAggregation(dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.DAY)_                        .timeZone(timezone).minDocCount(0)_                        .subAggregation(derivative("deriv", "_count").unit(DateHistogramInterval.HOUR)))_                .execute()_                .actionGet()___        assertSearchResponse(response)___        Histogram deriv = response.getAggregations().get("histo")__        assertThat(deriv, notNullValue())__        assertThat(deriv.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = deriv.getBuckets()__        assertThat(buckets.size(), equalTo(4))___        assertBucket(buckets.get(0), new DateTime("2012-03-24", timezone).toDateTime(DateTimeZone.UTC), 1L, nullValue(), null, null)__        assertBucket(buckets.get(1), new DateTime("2012-03-25", timezone).toDateTime(DateTimeZone.UTC), 2L, notNullValue(), 1d, 1d / 24d)__        _        assertBucket(buckets.get(2), new DateTime("2012-03-26", timezone).toDateTime(DateTimeZone.UTC), 3L, notNullValue(), 1d, 1d / 23d)__        assertBucket(buckets.get(3), new DateTime("2012-03-27", timezone).toDateTime(DateTimeZone.UTC), 4L, notNullValue(), 1d, 1d / 24d)__    };do,a,derivative,on,a,date,histogram,with,time,zone,cet,at,dst,start;public,void,throws,exception,create,index,list,index,request,builder,builders,new,array,list,date,time,zone,timezone,date,time,zone,for,id,cet,add,ntimes,1,new,date,time,2012,03,24t01,00,00,timezone,builders,add,ntimes,2,new,date,time,2012,03,25t01,00,00,timezone,builders,add,ntimes,3,new,date,time,2012,03,26t01,00,00,timezone,builders,add,ntimes,4,new,date,time,2012,03,27t01,00,00,timezone,builders,index,random,true,builders,ensure,searchable,search,response,response,client,prepare,search,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,day,time,zone,timezone,min,doc,count,0,sub,aggregation,derivative,deriv,unit,date,histogram,interval,hour,execute,action,get,assert,search,response,response,histogram,deriv,response,get,aggregations,get,histo,assert,that,deriv,not,null,value,assert,that,deriv,get,name,equal,to,histo,list,extends,bucket,buckets,deriv,get,buckets,assert,that,buckets,size,equal,to,4,assert,bucket,buckets,get,0,new,date,time,2012,03,24,timezone,to,date,time,date,time,zone,utc,1l,null,value,null,null,assert,bucket,buckets,get,1,new,date,time,2012,03,25,timezone,to,date,time,date,time,zone,utc,2l,not,null,value,1d,1d,24d,assert,bucket,buckets,get,2,new,date,time,2012,03,26,timezone,to,date,time,date,time,zone,utc,3l,not,null,value,1d,1d,23d,assert,bucket,buckets,get,3,new,date,time,2012,03,27,timezone,to,date,time,date,time,zone,utc,4l,not,null,value,1d,1d,24d
DateDerivativeIT -> public void testSingleValuedFieldNormalised_timeZone_CET_DstStart() throws Exception;1540486836;Do a derivative on a date histogram with time zone CET at DST start;public void testSingleValuedFieldNormalised_timeZone_CET_DstStart() throws Exception {_        createIndex(IDX_DST_START)__        List<IndexRequestBuilder> builders = new ArrayList<>()___        DateTimeZone timezone = DateTimeZone.forID("CET")__        addNTimes(1, IDX_DST_START, new DateTime("2012-03-24T01:00:00", timezone), builders)__        addNTimes(2, IDX_DST_START, new DateTime("2012-03-25T01:00:00", timezone), builders)_ _        addNTimes(3, IDX_DST_START, new DateTime("2012-03-26T01:00:00", timezone), builders)__        addNTimes(4, IDX_DST_START, new DateTime("2012-03-27T01:00:00", timezone), builders)__        indexRandom(true, builders)__        ensureSearchable()___        SearchResponse response = client()_                .prepareSearch(IDX_DST_START)_                .addAggregation(dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.DAY)_                        .timeZone(timezone).minDocCount(0)_                        .subAggregation(derivative("deriv", "_count").unit(DateHistogramInterval.HOUR)))_                .execute()_                .actionGet()___        assertSearchResponse(response)___        Histogram deriv = response.getAggregations().get("histo")__        assertThat(deriv, notNullValue())__        assertThat(deriv.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = deriv.getBuckets()__        assertThat(buckets.size(), equalTo(4))___        assertBucket(buckets.get(0), new DateTime("2012-03-24", timezone).toDateTime(DateTimeZone.UTC), 1L, nullValue(), null, null)__        assertBucket(buckets.get(1), new DateTime("2012-03-25", timezone).toDateTime(DateTimeZone.UTC), 2L, notNullValue(), 1d, 1d / 24d)__        _        assertBucket(buckets.get(2), new DateTime("2012-03-26", timezone).toDateTime(DateTimeZone.UTC), 3L, notNullValue(), 1d, 1d / 23d)__        assertBucket(buckets.get(3), new DateTime("2012-03-27", timezone).toDateTime(DateTimeZone.UTC), 4L, notNullValue(), 1d, 1d / 24d)__    };do,a,derivative,on,a,date,histogram,with,time,zone,cet,at,dst,start;public,void,throws,exception,create,index,list,index,request,builder,builders,new,array,list,date,time,zone,timezone,date,time,zone,for,id,cet,add,ntimes,1,new,date,time,2012,03,24t01,00,00,timezone,builders,add,ntimes,2,new,date,time,2012,03,25t01,00,00,timezone,builders,add,ntimes,3,new,date,time,2012,03,26t01,00,00,timezone,builders,add,ntimes,4,new,date,time,2012,03,27t01,00,00,timezone,builders,index,random,true,builders,ensure,searchable,search,response,response,client,prepare,search,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,day,time,zone,timezone,min,doc,count,0,sub,aggregation,derivative,deriv,unit,date,histogram,interval,hour,execute,action,get,assert,search,response,response,histogram,deriv,response,get,aggregations,get,histo,assert,that,deriv,not,null,value,assert,that,deriv,get,name,equal,to,histo,list,extends,bucket,buckets,deriv,get,buckets,assert,that,buckets,size,equal,to,4,assert,bucket,buckets,get,0,new,date,time,2012,03,24,timezone,to,date,time,date,time,zone,utc,1l,null,value,null,null,assert,bucket,buckets,get,1,new,date,time,2012,03,25,timezone,to,date,time,date,time,zone,utc,2l,not,null,value,1d,1d,24d,assert,bucket,buckets,get,2,new,date,time,2012,03,26,timezone,to,date,time,date,time,zone,utc,3l,not,null,value,1d,1d,23d,assert,bucket,buckets,get,3,new,date,time,2012,03,27,timezone,to,date,time,date,time,zone,utc,4l,not,null,value,1d,1d,24d
DateDerivativeIT -> public void testSingleValuedFieldNormalised_timeZone_CET_DstStart() throws Exception;1544110272;Do a derivative on a date histogram with time zone CET at DST start;public void testSingleValuedFieldNormalised_timeZone_CET_DstStart() throws Exception {_        createIndex(IDX_DST_START)__        List<IndexRequestBuilder> builders = new ArrayList<>()___        DateTimeZone timezone = DateTimeZone.forID("CET")__        addNTimes(1, IDX_DST_START, new DateTime("2012-03-24T01:00:00", timezone), builders)__        addNTimes(2, IDX_DST_START, new DateTime("2012-03-25T01:00:00", timezone), builders)_ _        addNTimes(3, IDX_DST_START, new DateTime("2012-03-26T01:00:00", timezone), builders)__        addNTimes(4, IDX_DST_START, new DateTime("2012-03-27T01:00:00", timezone), builders)__        indexRandom(true, builders)__        ensureSearchable()___        SearchResponse response = client()_                .prepareSearch(IDX_DST_START)_                .addAggregation(dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.DAY)_                        .timeZone(timezone).minDocCount(0)_                        .subAggregation(derivative("deriv", "_count").unit(DateHistogramInterval.HOUR)))_                .get()___        assertSearchResponse(response)___        Histogram deriv = response.getAggregations().get("histo")__        assertThat(deriv, notNullValue())__        assertThat(deriv.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = deriv.getBuckets()__        assertThat(buckets.size(), equalTo(4))___        assertBucket(buckets.get(0), new DateTime("2012-03-24", timezone).toDateTime(DateTimeZone.UTC), 1L, nullValue(), null, null)__        assertBucket(buckets.get(1), new DateTime("2012-03-25", timezone).toDateTime(DateTimeZone.UTC), 2L, notNullValue(), 1d, 1d / 24d)__        _        assertBucket(buckets.get(2), new DateTime("2012-03-26", timezone).toDateTime(DateTimeZone.UTC), 3L, notNullValue(), 1d, 1d / 23d)__        assertBucket(buckets.get(3), new DateTime("2012-03-27", timezone).toDateTime(DateTimeZone.UTC), 4L, notNullValue(), 1d, 1d / 24d)__    };do,a,derivative,on,a,date,histogram,with,time,zone,cet,at,dst,start;public,void,throws,exception,create,index,list,index,request,builder,builders,new,array,list,date,time,zone,timezone,date,time,zone,for,id,cet,add,ntimes,1,new,date,time,2012,03,24t01,00,00,timezone,builders,add,ntimes,2,new,date,time,2012,03,25t01,00,00,timezone,builders,add,ntimes,3,new,date,time,2012,03,26t01,00,00,timezone,builders,add,ntimes,4,new,date,time,2012,03,27t01,00,00,timezone,builders,index,random,true,builders,ensure,searchable,search,response,response,client,prepare,search,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,day,time,zone,timezone,min,doc,count,0,sub,aggregation,derivative,deriv,unit,date,histogram,interval,hour,get,assert,search,response,response,histogram,deriv,response,get,aggregations,get,histo,assert,that,deriv,not,null,value,assert,that,deriv,get,name,equal,to,histo,list,extends,bucket,buckets,deriv,get,buckets,assert,that,buckets,size,equal,to,4,assert,bucket,buckets,get,0,new,date,time,2012,03,24,timezone,to,date,time,date,time,zone,utc,1l,null,value,null,null,assert,bucket,buckets,get,1,new,date,time,2012,03,25,timezone,to,date,time,date,time,zone,utc,2l,not,null,value,1d,1d,24d,assert,bucket,buckets,get,2,new,date,time,2012,03,26,timezone,to,date,time,date,time,zone,utc,3l,not,null,value,1d,1d,23d,assert,bucket,buckets,get,3,new,date,time,2012,03,27,timezone,to,date,time,date,time,zone,utc,4l,not,null,value,1d,1d,24d
DateDerivativeIT -> public void testSingleValuedFieldNormalised_timeZone_CET_DstStart() throws Exception;1544232221;Do a derivative on a date histogram with time zone CET at DST start;public void testSingleValuedFieldNormalised_timeZone_CET_DstStart() throws Exception {_        createIndex(IDX_DST_START)__        List<IndexRequestBuilder> builders = new ArrayList<>()___        DateTimeZone timezone = DateTimeZone.forID("CET")__        addNTimes(1, IDX_DST_START, new DateTime("2012-03-24T01:00:00", timezone), builders)__        addNTimes(2, IDX_DST_START, new DateTime("2012-03-25T01:00:00", timezone), builders)_ _        addNTimes(3, IDX_DST_START, new DateTime("2012-03-26T01:00:00", timezone), builders)__        addNTimes(4, IDX_DST_START, new DateTime("2012-03-27T01:00:00", timezone), builders)__        indexRandom(true, builders)__        ensureSearchable()___        SearchResponse response = client()_                .prepareSearch(IDX_DST_START)_                .addAggregation(dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.DAY)_                        .timeZone(timezone).minDocCount(0)_                        .subAggregation(derivative("deriv", "_count").unit(DateHistogramInterval.HOUR)))_                .get()___        assertSearchResponse(response)___        Histogram deriv = response.getAggregations().get("histo")__        assertThat(deriv, notNullValue())__        assertThat(deriv.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = deriv.getBuckets()__        assertThat(buckets.size(), equalTo(4))___        assertBucket(buckets.get(0), new DateTime("2012-03-24", timezone).toDateTime(DateTimeZone.UTC), 1L, nullValue(), null, null)__        assertBucket(buckets.get(1), new DateTime("2012-03-25", timezone).toDateTime(DateTimeZone.UTC), 2L, notNullValue(), 1d, 1d / 24d)__        _        assertBucket(buckets.get(2), new DateTime("2012-03-26", timezone).toDateTime(DateTimeZone.UTC), 3L, notNullValue(), 1d, 1d / 23d)__        assertBucket(buckets.get(3), new DateTime("2012-03-27", timezone).toDateTime(DateTimeZone.UTC), 4L, notNullValue(), 1d, 1d / 24d)__    };do,a,derivative,on,a,date,histogram,with,time,zone,cet,at,dst,start;public,void,throws,exception,create,index,list,index,request,builder,builders,new,array,list,date,time,zone,timezone,date,time,zone,for,id,cet,add,ntimes,1,new,date,time,2012,03,24t01,00,00,timezone,builders,add,ntimes,2,new,date,time,2012,03,25t01,00,00,timezone,builders,add,ntimes,3,new,date,time,2012,03,26t01,00,00,timezone,builders,add,ntimes,4,new,date,time,2012,03,27t01,00,00,timezone,builders,index,random,true,builders,ensure,searchable,search,response,response,client,prepare,search,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,day,time,zone,timezone,min,doc,count,0,sub,aggregation,derivative,deriv,unit,date,histogram,interval,hour,get,assert,search,response,response,histogram,deriv,response,get,aggregations,get,histo,assert,that,deriv,not,null,value,assert,that,deriv,get,name,equal,to,histo,list,extends,bucket,buckets,deriv,get,buckets,assert,that,buckets,size,equal,to,4,assert,bucket,buckets,get,0,new,date,time,2012,03,24,timezone,to,date,time,date,time,zone,utc,1l,null,value,null,null,assert,bucket,buckets,get,1,new,date,time,2012,03,25,timezone,to,date,time,date,time,zone,utc,2l,not,null,value,1d,1d,24d,assert,bucket,buckets,get,2,new,date,time,2012,03,26,timezone,to,date,time,date,time,zone,utc,3l,not,null,value,1d,1d,23d,assert,bucket,buckets,get,3,new,date,time,2012,03,27,timezone,to,date,time,date,time,zone,utc,4l,not,null,value,1d,1d,24d
DateDerivativeIT -> public void testSingleValuedFieldNormalised_timeZone_CET_DstStart() throws Exception;1548236405;Do a derivative on a date histogram with time zone CET at DST start;public void testSingleValuedFieldNormalised_timeZone_CET_DstStart() throws Exception {_        createIndex(IDX_DST_START)__        List<IndexRequestBuilder> builders = new ArrayList<>()___        ZoneId timezone = ZoneId.of("CET")__        DateFormatter formatter = DateFormatter.forPattern("yyyy-MM-dd'T'HH:mm:ss").withZone(timezone)__        _        addNTimes(1, IDX_DST_START, DateFormatters.toZonedDateTime(formatter.parse("2012-03-24T01:00:00")), builders)__        _        addNTimes(2, IDX_DST_START, DateFormatters.toZonedDateTime(formatter.parse("2012-03-25T01:00:00")), builders)__        addNTimes(3, IDX_DST_START, DateFormatters.toZonedDateTime(formatter.parse("2012-03-26T01:00:00")), builders)__        addNTimes(4, IDX_DST_START, DateFormatters.toZonedDateTime(formatter.parse("2012-03-27T01:00:00")), builders)__        indexRandom(true, builders)__        ensureSearchable()___        SearchResponse response = client()_                .prepareSearch(IDX_DST_START)_                .addAggregation(dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.DAY)_                        .timeZone(timezone).minDocCount(0)_                        .subAggregation(derivative("deriv", "_count").unit(DateHistogramInterval.HOUR)))_                .get()___        assertSearchResponse(response)___        Histogram deriv = response.getAggregations().get("histo")__        assertThat(deriv, notNullValue())__        assertThat(deriv.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = deriv.getBuckets()__        assertThat(buckets.size(), equalTo(4))___        DateFormatter dateFormatter = DateFormatter.forPattern("yyyy-MM-dd")__        ZonedDateTime expectedKeyFirstBucket =_            LocalDate.from(dateFormatter.parse("2012-03-24")).atStartOfDay(timezone).withZoneSameInstant(ZoneOffset.UTC)__        assertBucket(buckets.get(0), expectedKeyFirstBucket, 1L, nullValue(), null, null)___        ZonedDateTime expectedKeySecondBucket =_            LocalDate.from(dateFormatter.parse("2012-03-25")).atStartOfDay(timezone).withZoneSameInstant(ZoneOffset.UTC)__        assertBucket(buckets.get(1), expectedKeySecondBucket,2L, notNullValue(), 1d, 1d / 24d)___        _        ZonedDateTime expectedKeyThirdBucket =_            LocalDate.from(dateFormatter.parse("2012-03-26")).atStartOfDay(timezone).withZoneSameInstant(ZoneOffset.UTC)__        assertBucket(buckets.get(2), expectedKeyThirdBucket, 3L, notNullValue(), 1d, 1d / 23d)___        ZonedDateTime expectedKeyFourthBucket =_            LocalDate.from(dateFormatter.parse("2012-03-27")).atStartOfDay(timezone).withZoneSameInstant(ZoneOffset.UTC)__        assertBucket(buckets.get(3), expectedKeyFourthBucket, 4L, notNullValue(), 1d, 1d / 24d)__    };do,a,derivative,on,a,date,histogram,with,time,zone,cet,at,dst,start;public,void,throws,exception,create,index,list,index,request,builder,builders,new,array,list,zone,id,timezone,zone,id,of,cet,date,formatter,formatter,date,formatter,for,pattern,yyyy,mm,dd,t,hh,mm,ss,with,zone,timezone,add,ntimes,1,date,formatters,to,zoned,date,time,formatter,parse,2012,03,24t01,00,00,builders,add,ntimes,2,date,formatters,to,zoned,date,time,formatter,parse,2012,03,25t01,00,00,builders,add,ntimes,3,date,formatters,to,zoned,date,time,formatter,parse,2012,03,26t01,00,00,builders,add,ntimes,4,date,formatters,to,zoned,date,time,formatter,parse,2012,03,27t01,00,00,builders,index,random,true,builders,ensure,searchable,search,response,response,client,prepare,search,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,day,time,zone,timezone,min,doc,count,0,sub,aggregation,derivative,deriv,unit,date,histogram,interval,hour,get,assert,search,response,response,histogram,deriv,response,get,aggregations,get,histo,assert,that,deriv,not,null,value,assert,that,deriv,get,name,equal,to,histo,list,extends,bucket,buckets,deriv,get,buckets,assert,that,buckets,size,equal,to,4,date,formatter,date,formatter,date,formatter,for,pattern,yyyy,mm,dd,zoned,date,time,expected,key,first,bucket,local,date,from,date,formatter,parse,2012,03,24,at,start,of,day,timezone,with,zone,same,instant,zone,offset,utc,assert,bucket,buckets,get,0,expected,key,first,bucket,1l,null,value,null,null,zoned,date,time,expected,key,second,bucket,local,date,from,date,formatter,parse,2012,03,25,at,start,of,day,timezone,with,zone,same,instant,zone,offset,utc,assert,bucket,buckets,get,1,expected,key,second,bucket,2l,not,null,value,1d,1d,24d,zoned,date,time,expected,key,third,bucket,local,date,from,date,formatter,parse,2012,03,26,at,start,of,day,timezone,with,zone,same,instant,zone,offset,utc,assert,bucket,buckets,get,2,expected,key,third,bucket,3l,not,null,value,1d,1d,23d,zoned,date,time,expected,key,fourth,bucket,local,date,from,date,formatter,parse,2012,03,27,at,start,of,day,timezone,with,zone,same,instant,zone,offset,utc,assert,bucket,buckets,get,3,expected,key,fourth,bucket,4l,not,null,value,1d,1d,24d
DateDerivativeIT -> public void testSingleValuedFieldNormalised_timeZone_CET_DstStart() throws Exception;1548921340;Do a derivative on a date histogram with time zone CET at DST start;public void testSingleValuedFieldNormalised_timeZone_CET_DstStart() throws Exception {_        createIndex(IDX_DST_START)__        List<IndexRequestBuilder> builders = new ArrayList<>()___        ZoneId timezone = ZoneId.of("CET")__        DateFormatter formatter = DateFormatter.forPattern("yyyy-MM-dd'T'HH:mm:ss").withZone(timezone)__        _        addNTimes(1, IDX_DST_START, DateFormatters.from(formatter.parse("2012-03-24T01:00:00")), builders)__        _        addNTimes(2, IDX_DST_START, DateFormatters.from(formatter.parse("2012-03-25T01:00:00")), builders)__        addNTimes(3, IDX_DST_START, DateFormatters.from(formatter.parse("2012-03-26T01:00:00")), builders)__        addNTimes(4, IDX_DST_START, DateFormatters.from(formatter.parse("2012-03-27T01:00:00")), builders)__        indexRandom(true, builders)__        ensureSearchable()___        SearchResponse response = client()_                .prepareSearch(IDX_DST_START)_                .addAggregation(dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.DAY)_                        .timeZone(timezone).minDocCount(0)_                        .subAggregation(derivative("deriv", "_count").unit(DateHistogramInterval.HOUR)))_                .get()___        assertSearchResponse(response)___        Histogram deriv = response.getAggregations().get("histo")__        assertThat(deriv, notNullValue())__        assertThat(deriv.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = deriv.getBuckets()__        assertThat(buckets.size(), equalTo(4))___        DateFormatter dateFormatter = DateFormatter.forPattern("yyyy-MM-dd")__        ZonedDateTime expectedKeyFirstBucket =_            LocalDate.from(dateFormatter.parse("2012-03-24")).atStartOfDay(timezone).withZoneSameInstant(ZoneOffset.UTC)__        assertBucket(buckets.get(0), expectedKeyFirstBucket, 1L, nullValue(), null, null)___        ZonedDateTime expectedKeySecondBucket =_            LocalDate.from(dateFormatter.parse("2012-03-25")).atStartOfDay(timezone).withZoneSameInstant(ZoneOffset.UTC)__        assertBucket(buckets.get(1), expectedKeySecondBucket,2L, notNullValue(), 1d, 1d / 24d)___        _        ZonedDateTime expectedKeyThirdBucket =_            LocalDate.from(dateFormatter.parse("2012-03-26")).atStartOfDay(timezone).withZoneSameInstant(ZoneOffset.UTC)__        assertBucket(buckets.get(2), expectedKeyThirdBucket, 3L, notNullValue(), 1d, 1d / 23d)___        ZonedDateTime expectedKeyFourthBucket =_            LocalDate.from(dateFormatter.parse("2012-03-27")).atStartOfDay(timezone).withZoneSameInstant(ZoneOffset.UTC)__        assertBucket(buckets.get(3), expectedKeyFourthBucket, 4L, notNullValue(), 1d, 1d / 24d)__    };do,a,derivative,on,a,date,histogram,with,time,zone,cet,at,dst,start;public,void,throws,exception,create,index,list,index,request,builder,builders,new,array,list,zone,id,timezone,zone,id,of,cet,date,formatter,formatter,date,formatter,for,pattern,yyyy,mm,dd,t,hh,mm,ss,with,zone,timezone,add,ntimes,1,date,formatters,from,formatter,parse,2012,03,24t01,00,00,builders,add,ntimes,2,date,formatters,from,formatter,parse,2012,03,25t01,00,00,builders,add,ntimes,3,date,formatters,from,formatter,parse,2012,03,26t01,00,00,builders,add,ntimes,4,date,formatters,from,formatter,parse,2012,03,27t01,00,00,builders,index,random,true,builders,ensure,searchable,search,response,response,client,prepare,search,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,day,time,zone,timezone,min,doc,count,0,sub,aggregation,derivative,deriv,unit,date,histogram,interval,hour,get,assert,search,response,response,histogram,deriv,response,get,aggregations,get,histo,assert,that,deriv,not,null,value,assert,that,deriv,get,name,equal,to,histo,list,extends,bucket,buckets,deriv,get,buckets,assert,that,buckets,size,equal,to,4,date,formatter,date,formatter,date,formatter,for,pattern,yyyy,mm,dd,zoned,date,time,expected,key,first,bucket,local,date,from,date,formatter,parse,2012,03,24,at,start,of,day,timezone,with,zone,same,instant,zone,offset,utc,assert,bucket,buckets,get,0,expected,key,first,bucket,1l,null,value,null,null,zoned,date,time,expected,key,second,bucket,local,date,from,date,formatter,parse,2012,03,25,at,start,of,day,timezone,with,zone,same,instant,zone,offset,utc,assert,bucket,buckets,get,1,expected,key,second,bucket,2l,not,null,value,1d,1d,24d,zoned,date,time,expected,key,third,bucket,local,date,from,date,formatter,parse,2012,03,26,at,start,of,day,timezone,with,zone,same,instant,zone,offset,utc,assert,bucket,buckets,get,2,expected,key,third,bucket,3l,not,null,value,1d,1d,23d,zoned,date,time,expected,key,fourth,bucket,local,date,from,date,formatter,parse,2012,03,27,at,start,of,day,timezone,with,zone,same,instant,zone,offset,utc,assert,bucket,buckets,get,3,expected,key,fourth,bucket,4l,not,null,value,1d,1d,24d
DateDerivativeIT -> public void testSingleValuedFieldNormalised_timeZone_CET_DstEnd() throws Exception;1524684173;Do a derivative on a date histogram with time zone CET at DST end;public void testSingleValuedFieldNormalised_timeZone_CET_DstEnd() throws Exception {_        createIndex(IDX_DST_END)__        DateTimeZone timezone = DateTimeZone.forID("CET")__        List<IndexRequestBuilder> builders = new ArrayList<>()___        addNTimes(1, IDX_DST_END, new DateTime("2012-10-27T01:00:00", timezone), builders)__        addNTimes(2, IDX_DST_END, new DateTime("2012-10-28T01:00:00", timezone), builders)_ _        addNTimes(3, IDX_DST_END, new DateTime("2012-10-29T01:00:00", timezone), builders)__        addNTimes(4, IDX_DST_END, new DateTime("2012-10-30T01:00:00", timezone), builders)__        indexRandom(true, builders)__        ensureSearchable()___        SearchResponse response = client()_                .prepareSearch(IDX_DST_END)_                .addAggregation(dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.DAY)_                        .timeZone(timezone).minDocCount(0)_                        .subAggregation(derivative("deriv", "_count").unit(DateHistogramInterval.HOUR)))_                .execute()_                .actionGet()___        assertSearchResponse(response)___        Histogram deriv = response.getAggregations().get("histo")__        assertThat(deriv, notNullValue())__        assertThat(deriv.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = deriv.getBuckets()__        assertThat(buckets.size(), equalTo(4))___        assertBucket(buckets.get(0), new DateTime("2012-10-27", timezone).toDateTime(DateTimeZone.UTC), 1L, nullValue(), null, null)__        assertBucket(buckets.get(1), new DateTime("2012-10-28", timezone).toDateTime(DateTimeZone.UTC), 2L, notNullValue(), 1d, 1d / 24d)__        _        assertBucket(buckets.get(2), new DateTime("2012-10-29", timezone).toDateTime(DateTimeZone.UTC), 3L, notNullValue(), 1d, 1d / 25d)__        assertBucket(buckets.get(3), new DateTime("2012-10-30", timezone).toDateTime(DateTimeZone.UTC), 4L, notNullValue(), 1d, 1d / 24d)__    };do,a,derivative,on,a,date,histogram,with,time,zone,cet,at,dst,end;public,void,throws,exception,create,index,date,time,zone,timezone,date,time,zone,for,id,cet,list,index,request,builder,builders,new,array,list,add,ntimes,1,new,date,time,2012,10,27t01,00,00,timezone,builders,add,ntimes,2,new,date,time,2012,10,28t01,00,00,timezone,builders,add,ntimes,3,new,date,time,2012,10,29t01,00,00,timezone,builders,add,ntimes,4,new,date,time,2012,10,30t01,00,00,timezone,builders,index,random,true,builders,ensure,searchable,search,response,response,client,prepare,search,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,day,time,zone,timezone,min,doc,count,0,sub,aggregation,derivative,deriv,unit,date,histogram,interval,hour,execute,action,get,assert,search,response,response,histogram,deriv,response,get,aggregations,get,histo,assert,that,deriv,not,null,value,assert,that,deriv,get,name,equal,to,histo,list,extends,bucket,buckets,deriv,get,buckets,assert,that,buckets,size,equal,to,4,assert,bucket,buckets,get,0,new,date,time,2012,10,27,timezone,to,date,time,date,time,zone,utc,1l,null,value,null,null,assert,bucket,buckets,get,1,new,date,time,2012,10,28,timezone,to,date,time,date,time,zone,utc,2l,not,null,value,1d,1d,24d,assert,bucket,buckets,get,2,new,date,time,2012,10,29,timezone,to,date,time,date,time,zone,utc,3l,not,null,value,1d,1d,25d,assert,bucket,buckets,get,3,new,date,time,2012,10,30,timezone,to,date,time,date,time,zone,utc,4l,not,null,value,1d,1d,24d
DateDerivativeIT -> public void testSingleValuedFieldNormalised_timeZone_CET_DstEnd() throws Exception;1536314350;Do a derivative on a date histogram with time zone CET at DST end;public void testSingleValuedFieldNormalised_timeZone_CET_DstEnd() throws Exception {_        createIndex(IDX_DST_END)__        DateTimeZone timezone = DateTimeZone.forID("CET")__        List<IndexRequestBuilder> builders = new ArrayList<>()___        addNTimes(1, IDX_DST_END, new DateTime("2012-10-27T01:00:00", timezone), builders)__        addNTimes(2, IDX_DST_END, new DateTime("2012-10-28T01:00:00", timezone), builders)_ _        addNTimes(3, IDX_DST_END, new DateTime("2012-10-29T01:00:00", timezone), builders)__        addNTimes(4, IDX_DST_END, new DateTime("2012-10-30T01:00:00", timezone), builders)__        indexRandom(true, builders)__        ensureSearchable()___        SearchResponse response = client()_                .prepareSearch(IDX_DST_END)_                .addAggregation(dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.DAY)_                        .timeZone(timezone).minDocCount(0)_                        .subAggregation(derivative("deriv", "_count").unit(DateHistogramInterval.HOUR)))_                .execute()_                .actionGet()___        assertSearchResponse(response)___        Histogram deriv = response.getAggregations().get("histo")__        assertThat(deriv, notNullValue())__        assertThat(deriv.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = deriv.getBuckets()__        assertThat(buckets.size(), equalTo(4))___        assertBucket(buckets.get(0), new DateTime("2012-10-27", timezone).toDateTime(DateTimeZone.UTC), 1L, nullValue(), null, null)__        assertBucket(buckets.get(1), new DateTime("2012-10-28", timezone).toDateTime(DateTimeZone.UTC), 2L, notNullValue(), 1d, 1d / 24d)__        _        assertBucket(buckets.get(2), new DateTime("2012-10-29", timezone).toDateTime(DateTimeZone.UTC), 3L, notNullValue(), 1d, 1d / 25d)__        assertBucket(buckets.get(3), new DateTime("2012-10-30", timezone).toDateTime(DateTimeZone.UTC), 4L, notNullValue(), 1d, 1d / 24d)__    };do,a,derivative,on,a,date,histogram,with,time,zone,cet,at,dst,end;public,void,throws,exception,create,index,date,time,zone,timezone,date,time,zone,for,id,cet,list,index,request,builder,builders,new,array,list,add,ntimes,1,new,date,time,2012,10,27t01,00,00,timezone,builders,add,ntimes,2,new,date,time,2012,10,28t01,00,00,timezone,builders,add,ntimes,3,new,date,time,2012,10,29t01,00,00,timezone,builders,add,ntimes,4,new,date,time,2012,10,30t01,00,00,timezone,builders,index,random,true,builders,ensure,searchable,search,response,response,client,prepare,search,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,day,time,zone,timezone,min,doc,count,0,sub,aggregation,derivative,deriv,unit,date,histogram,interval,hour,execute,action,get,assert,search,response,response,histogram,deriv,response,get,aggregations,get,histo,assert,that,deriv,not,null,value,assert,that,deriv,get,name,equal,to,histo,list,extends,bucket,buckets,deriv,get,buckets,assert,that,buckets,size,equal,to,4,assert,bucket,buckets,get,0,new,date,time,2012,10,27,timezone,to,date,time,date,time,zone,utc,1l,null,value,null,null,assert,bucket,buckets,get,1,new,date,time,2012,10,28,timezone,to,date,time,date,time,zone,utc,2l,not,null,value,1d,1d,24d,assert,bucket,buckets,get,2,new,date,time,2012,10,29,timezone,to,date,time,date,time,zone,utc,3l,not,null,value,1d,1d,25d,assert,bucket,buckets,get,3,new,date,time,2012,10,30,timezone,to,date,time,date,time,zone,utc,4l,not,null,value,1d,1d,24d
DateDerivativeIT -> public void testSingleValuedFieldNormalised_timeZone_CET_DstEnd() throws Exception;1540486836;Do a derivative on a date histogram with time zone CET at DST end;public void testSingleValuedFieldNormalised_timeZone_CET_DstEnd() throws Exception {_        createIndex(IDX_DST_END)__        DateTimeZone timezone = DateTimeZone.forID("CET")__        List<IndexRequestBuilder> builders = new ArrayList<>()___        addNTimes(1, IDX_DST_END, new DateTime("2012-10-27T01:00:00", timezone), builders)__        addNTimes(2, IDX_DST_END, new DateTime("2012-10-28T01:00:00", timezone), builders)_ _        addNTimes(3, IDX_DST_END, new DateTime("2012-10-29T01:00:00", timezone), builders)__        addNTimes(4, IDX_DST_END, new DateTime("2012-10-30T01:00:00", timezone), builders)__        indexRandom(true, builders)__        ensureSearchable()___        SearchResponse response = client()_                .prepareSearch(IDX_DST_END)_                .addAggregation(dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.DAY)_                        .timeZone(timezone).minDocCount(0)_                        .subAggregation(derivative("deriv", "_count").unit(DateHistogramInterval.HOUR)))_                .execute()_                .actionGet()___        assertSearchResponse(response)___        Histogram deriv = response.getAggregations().get("histo")__        assertThat(deriv, notNullValue())__        assertThat(deriv.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = deriv.getBuckets()__        assertThat(buckets.size(), equalTo(4))___        assertBucket(buckets.get(0), new DateTime("2012-10-27", timezone).toDateTime(DateTimeZone.UTC), 1L, nullValue(), null, null)__        assertBucket(buckets.get(1), new DateTime("2012-10-28", timezone).toDateTime(DateTimeZone.UTC), 2L, notNullValue(), 1d, 1d / 24d)__        _        assertBucket(buckets.get(2), new DateTime("2012-10-29", timezone).toDateTime(DateTimeZone.UTC), 3L, notNullValue(), 1d, 1d / 25d)__        assertBucket(buckets.get(3), new DateTime("2012-10-30", timezone).toDateTime(DateTimeZone.UTC), 4L, notNullValue(), 1d, 1d / 24d)__    };do,a,derivative,on,a,date,histogram,with,time,zone,cet,at,dst,end;public,void,throws,exception,create,index,date,time,zone,timezone,date,time,zone,for,id,cet,list,index,request,builder,builders,new,array,list,add,ntimes,1,new,date,time,2012,10,27t01,00,00,timezone,builders,add,ntimes,2,new,date,time,2012,10,28t01,00,00,timezone,builders,add,ntimes,3,new,date,time,2012,10,29t01,00,00,timezone,builders,add,ntimes,4,new,date,time,2012,10,30t01,00,00,timezone,builders,index,random,true,builders,ensure,searchable,search,response,response,client,prepare,search,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,day,time,zone,timezone,min,doc,count,0,sub,aggregation,derivative,deriv,unit,date,histogram,interval,hour,execute,action,get,assert,search,response,response,histogram,deriv,response,get,aggregations,get,histo,assert,that,deriv,not,null,value,assert,that,deriv,get,name,equal,to,histo,list,extends,bucket,buckets,deriv,get,buckets,assert,that,buckets,size,equal,to,4,assert,bucket,buckets,get,0,new,date,time,2012,10,27,timezone,to,date,time,date,time,zone,utc,1l,null,value,null,null,assert,bucket,buckets,get,1,new,date,time,2012,10,28,timezone,to,date,time,date,time,zone,utc,2l,not,null,value,1d,1d,24d,assert,bucket,buckets,get,2,new,date,time,2012,10,29,timezone,to,date,time,date,time,zone,utc,3l,not,null,value,1d,1d,25d,assert,bucket,buckets,get,3,new,date,time,2012,10,30,timezone,to,date,time,date,time,zone,utc,4l,not,null,value,1d,1d,24d
DateDerivativeIT -> public void testSingleValuedFieldNormalised_timeZone_CET_DstEnd() throws Exception;1544110272;Do a derivative on a date histogram with time zone CET at DST end;public void testSingleValuedFieldNormalised_timeZone_CET_DstEnd() throws Exception {_        createIndex(IDX_DST_END)__        DateTimeZone timezone = DateTimeZone.forID("CET")__        List<IndexRequestBuilder> builders = new ArrayList<>()___        addNTimes(1, IDX_DST_END, new DateTime("2012-10-27T01:00:00", timezone), builders)__        addNTimes(2, IDX_DST_END, new DateTime("2012-10-28T01:00:00", timezone), builders)_ _        addNTimes(3, IDX_DST_END, new DateTime("2012-10-29T01:00:00", timezone), builders)__        addNTimes(4, IDX_DST_END, new DateTime("2012-10-30T01:00:00", timezone), builders)__        indexRandom(true, builders)__        ensureSearchable()___        SearchResponse response = client()_                .prepareSearch(IDX_DST_END)_                .addAggregation(dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.DAY)_                        .timeZone(timezone).minDocCount(0)_                        .subAggregation(derivative("deriv", "_count").unit(DateHistogramInterval.HOUR)))_                .get()___        assertSearchResponse(response)___        Histogram deriv = response.getAggregations().get("histo")__        assertThat(deriv, notNullValue())__        assertThat(deriv.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = deriv.getBuckets()__        assertThat(buckets.size(), equalTo(4))___        assertBucket(buckets.get(0), new DateTime("2012-10-27", timezone).toDateTime(DateTimeZone.UTC), 1L, nullValue(), null, null)__        assertBucket(buckets.get(1), new DateTime("2012-10-28", timezone).toDateTime(DateTimeZone.UTC), 2L, notNullValue(), 1d, 1d / 24d)__        _        assertBucket(buckets.get(2), new DateTime("2012-10-29", timezone).toDateTime(DateTimeZone.UTC), 3L, notNullValue(), 1d, 1d / 25d)__        assertBucket(buckets.get(3), new DateTime("2012-10-30", timezone).toDateTime(DateTimeZone.UTC), 4L, notNullValue(), 1d, 1d / 24d)__    };do,a,derivative,on,a,date,histogram,with,time,zone,cet,at,dst,end;public,void,throws,exception,create,index,date,time,zone,timezone,date,time,zone,for,id,cet,list,index,request,builder,builders,new,array,list,add,ntimes,1,new,date,time,2012,10,27t01,00,00,timezone,builders,add,ntimes,2,new,date,time,2012,10,28t01,00,00,timezone,builders,add,ntimes,3,new,date,time,2012,10,29t01,00,00,timezone,builders,add,ntimes,4,new,date,time,2012,10,30t01,00,00,timezone,builders,index,random,true,builders,ensure,searchable,search,response,response,client,prepare,search,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,day,time,zone,timezone,min,doc,count,0,sub,aggregation,derivative,deriv,unit,date,histogram,interval,hour,get,assert,search,response,response,histogram,deriv,response,get,aggregations,get,histo,assert,that,deriv,not,null,value,assert,that,deriv,get,name,equal,to,histo,list,extends,bucket,buckets,deriv,get,buckets,assert,that,buckets,size,equal,to,4,assert,bucket,buckets,get,0,new,date,time,2012,10,27,timezone,to,date,time,date,time,zone,utc,1l,null,value,null,null,assert,bucket,buckets,get,1,new,date,time,2012,10,28,timezone,to,date,time,date,time,zone,utc,2l,not,null,value,1d,1d,24d,assert,bucket,buckets,get,2,new,date,time,2012,10,29,timezone,to,date,time,date,time,zone,utc,3l,not,null,value,1d,1d,25d,assert,bucket,buckets,get,3,new,date,time,2012,10,30,timezone,to,date,time,date,time,zone,utc,4l,not,null,value,1d,1d,24d
DateDerivativeIT -> public void testSingleValuedFieldNormalised_timeZone_CET_DstEnd() throws Exception;1544232221;Do a derivative on a date histogram with time zone CET at DST end;public void testSingleValuedFieldNormalised_timeZone_CET_DstEnd() throws Exception {_        createIndex(IDX_DST_END)__        DateTimeZone timezone = DateTimeZone.forID("CET")__        List<IndexRequestBuilder> builders = new ArrayList<>()___        addNTimes(1, IDX_DST_END, new DateTime("2012-10-27T01:00:00", timezone), builders)__        addNTimes(2, IDX_DST_END, new DateTime("2012-10-28T01:00:00", timezone), builders)_ _        addNTimes(3, IDX_DST_END, new DateTime("2012-10-29T01:00:00", timezone), builders)__        addNTimes(4, IDX_DST_END, new DateTime("2012-10-30T01:00:00", timezone), builders)__        indexRandom(true, builders)__        ensureSearchable()___        SearchResponse response = client()_                .prepareSearch(IDX_DST_END)_                .addAggregation(dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.DAY)_                        .timeZone(timezone).minDocCount(0)_                        .subAggregation(derivative("deriv", "_count").unit(DateHistogramInterval.HOUR)))_                .get()___        assertSearchResponse(response)___        Histogram deriv = response.getAggregations().get("histo")__        assertThat(deriv, notNullValue())__        assertThat(deriv.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = deriv.getBuckets()__        assertThat(buckets.size(), equalTo(4))___        assertBucket(buckets.get(0), new DateTime("2012-10-27", timezone).toDateTime(DateTimeZone.UTC), 1L, nullValue(), null, null)__        assertBucket(buckets.get(1), new DateTime("2012-10-28", timezone).toDateTime(DateTimeZone.UTC), 2L, notNullValue(), 1d, 1d / 24d)__        _        assertBucket(buckets.get(2), new DateTime("2012-10-29", timezone).toDateTime(DateTimeZone.UTC), 3L, notNullValue(), 1d, 1d / 25d)__        assertBucket(buckets.get(3), new DateTime("2012-10-30", timezone).toDateTime(DateTimeZone.UTC), 4L, notNullValue(), 1d, 1d / 24d)__    };do,a,derivative,on,a,date,histogram,with,time,zone,cet,at,dst,end;public,void,throws,exception,create,index,date,time,zone,timezone,date,time,zone,for,id,cet,list,index,request,builder,builders,new,array,list,add,ntimes,1,new,date,time,2012,10,27t01,00,00,timezone,builders,add,ntimes,2,new,date,time,2012,10,28t01,00,00,timezone,builders,add,ntimes,3,new,date,time,2012,10,29t01,00,00,timezone,builders,add,ntimes,4,new,date,time,2012,10,30t01,00,00,timezone,builders,index,random,true,builders,ensure,searchable,search,response,response,client,prepare,search,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,day,time,zone,timezone,min,doc,count,0,sub,aggregation,derivative,deriv,unit,date,histogram,interval,hour,get,assert,search,response,response,histogram,deriv,response,get,aggregations,get,histo,assert,that,deriv,not,null,value,assert,that,deriv,get,name,equal,to,histo,list,extends,bucket,buckets,deriv,get,buckets,assert,that,buckets,size,equal,to,4,assert,bucket,buckets,get,0,new,date,time,2012,10,27,timezone,to,date,time,date,time,zone,utc,1l,null,value,null,null,assert,bucket,buckets,get,1,new,date,time,2012,10,28,timezone,to,date,time,date,time,zone,utc,2l,not,null,value,1d,1d,24d,assert,bucket,buckets,get,2,new,date,time,2012,10,29,timezone,to,date,time,date,time,zone,utc,3l,not,null,value,1d,1d,25d,assert,bucket,buckets,get,3,new,date,time,2012,10,30,timezone,to,date,time,date,time,zone,utc,4l,not,null,value,1d,1d,24d
DateDerivativeIT -> public void testSingleValuedFieldNormalised_timeZone_CET_DstEnd() throws Exception;1548236405;Do a derivative on a date histogram with time zone CET at DST end;public void testSingleValuedFieldNormalised_timeZone_CET_DstEnd() throws Exception {_        createIndex(IDX_DST_END)__        ZoneId timezone = ZoneId.of("CET")__        List<IndexRequestBuilder> builders = new ArrayList<>()___        DateFormatter formatter = DateFormatter.forPattern("yyyy-MM-dd'T'HH:mm:ss").withZone(timezone)__        addNTimes(1, IDX_DST_END, DateFormatters.toZonedDateTime(formatter.parse("2012-10-27T01:00:00")), builders)__        _        addNTimes(2, IDX_DST_END, DateFormatters.toZonedDateTime(formatter.parse("2012-10-28T01:00:00")), builders)__        addNTimes(3, IDX_DST_END, DateFormatters.toZonedDateTime(formatter.parse("2012-10-29T01:00:00")), builders)__        addNTimes(4, IDX_DST_END, DateFormatters.toZonedDateTime(formatter.parse("2012-10-30T01:00:00")), builders)__        indexRandom(true, builders)__        ensureSearchable()___        SearchResponse response = client()_                .prepareSearch(IDX_DST_END)_                .addAggregation(dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.DAY)_                        .timeZone(timezone).minDocCount(0)_                        .subAggregation(derivative("deriv", "_count").unit(DateHistogramInterval.HOUR)))_                .get()___        assertSearchResponse(response)___        Histogram deriv = response.getAggregations().get("histo")__        assertThat(deriv, notNullValue())__        assertThat(deriv.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = deriv.getBuckets()__        assertThat(buckets.size(), equalTo(4))___        DateFormatter dateFormatter = DateFormatter.forPattern("yyyy-MM-dd").withZone(ZoneOffset.UTC)___        ZonedDateTime expectedKeyFirstBucket =_            LocalDate.from(dateFormatter.parse("2012-10-27")).atStartOfDay(timezone).withZoneSameInstant(ZoneOffset.UTC)__        assertBucket(buckets.get(0), expectedKeyFirstBucket, 1L, nullValue(), null, null)___        ZonedDateTime expectedKeySecondBucket =_            LocalDate.from(dateFormatter.parse("2012-10-28")).atStartOfDay(timezone).withZoneSameInstant(ZoneOffset.UTC)__        assertBucket(buckets.get(1), expectedKeySecondBucket, 2L, notNullValue(), 1d, 1d / 24d)___        _        ZonedDateTime expectedKeyThirdBucket =_            LocalDate.from(dateFormatter.parse("2012-10-29")).atStartOfDay(timezone).withZoneSameInstant(ZoneOffset.UTC)__        assertBucket(buckets.get(2), expectedKeyThirdBucket, 3L, notNullValue(), 1d, 1d / 25d)___        ZonedDateTime expectedKeyFourthBucket =_            LocalDate.from(dateFormatter.parse("2012-10-30")).atStartOfDay(timezone).withZoneSameInstant(ZoneOffset.UTC)__        assertBucket(buckets.get(3), expectedKeyFourthBucket, 4L, notNullValue(), 1d, 1d / 24d)__    };do,a,derivative,on,a,date,histogram,with,time,zone,cet,at,dst,end;public,void,throws,exception,create,index,zone,id,timezone,zone,id,of,cet,list,index,request,builder,builders,new,array,list,date,formatter,formatter,date,formatter,for,pattern,yyyy,mm,dd,t,hh,mm,ss,with,zone,timezone,add,ntimes,1,date,formatters,to,zoned,date,time,formatter,parse,2012,10,27t01,00,00,builders,add,ntimes,2,date,formatters,to,zoned,date,time,formatter,parse,2012,10,28t01,00,00,builders,add,ntimes,3,date,formatters,to,zoned,date,time,formatter,parse,2012,10,29t01,00,00,builders,add,ntimes,4,date,formatters,to,zoned,date,time,formatter,parse,2012,10,30t01,00,00,builders,index,random,true,builders,ensure,searchable,search,response,response,client,prepare,search,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,day,time,zone,timezone,min,doc,count,0,sub,aggregation,derivative,deriv,unit,date,histogram,interval,hour,get,assert,search,response,response,histogram,deriv,response,get,aggregations,get,histo,assert,that,deriv,not,null,value,assert,that,deriv,get,name,equal,to,histo,list,extends,bucket,buckets,deriv,get,buckets,assert,that,buckets,size,equal,to,4,date,formatter,date,formatter,date,formatter,for,pattern,yyyy,mm,dd,with,zone,zone,offset,utc,zoned,date,time,expected,key,first,bucket,local,date,from,date,formatter,parse,2012,10,27,at,start,of,day,timezone,with,zone,same,instant,zone,offset,utc,assert,bucket,buckets,get,0,expected,key,first,bucket,1l,null,value,null,null,zoned,date,time,expected,key,second,bucket,local,date,from,date,formatter,parse,2012,10,28,at,start,of,day,timezone,with,zone,same,instant,zone,offset,utc,assert,bucket,buckets,get,1,expected,key,second,bucket,2l,not,null,value,1d,1d,24d,zoned,date,time,expected,key,third,bucket,local,date,from,date,formatter,parse,2012,10,29,at,start,of,day,timezone,with,zone,same,instant,zone,offset,utc,assert,bucket,buckets,get,2,expected,key,third,bucket,3l,not,null,value,1d,1d,25d,zoned,date,time,expected,key,fourth,bucket,local,date,from,date,formatter,parse,2012,10,30,at,start,of,day,timezone,with,zone,same,instant,zone,offset,utc,assert,bucket,buckets,get,3,expected,key,fourth,bucket,4l,not,null,value,1d,1d,24d
DateDerivativeIT -> public void testSingleValuedFieldNormalised_timeZone_CET_DstEnd() throws Exception;1548921340;Do a derivative on a date histogram with time zone CET at DST end;public void testSingleValuedFieldNormalised_timeZone_CET_DstEnd() throws Exception {_        createIndex(IDX_DST_END)__        ZoneId timezone = ZoneId.of("CET")__        List<IndexRequestBuilder> builders = new ArrayList<>()___        DateFormatter formatter = DateFormatter.forPattern("yyyy-MM-dd'T'HH:mm:ss").withZone(timezone)__        addNTimes(1, IDX_DST_END, DateFormatters.from(formatter.parse("2012-10-27T01:00:00")), builders)__        _        addNTimes(2, IDX_DST_END, DateFormatters.from(formatter.parse("2012-10-28T01:00:00")), builders)__        addNTimes(3, IDX_DST_END, DateFormatters.from(formatter.parse("2012-10-29T01:00:00")), builders)__        addNTimes(4, IDX_DST_END, DateFormatters.from(formatter.parse("2012-10-30T01:00:00")), builders)__        indexRandom(true, builders)__        ensureSearchable()___        SearchResponse response = client()_                .prepareSearch(IDX_DST_END)_                .addAggregation(dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.DAY)_                        .timeZone(timezone).minDocCount(0)_                        .subAggregation(derivative("deriv", "_count").unit(DateHistogramInterval.HOUR)))_                .get()___        assertSearchResponse(response)___        Histogram deriv = response.getAggregations().get("histo")__        assertThat(deriv, notNullValue())__        assertThat(deriv.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = deriv.getBuckets()__        assertThat(buckets.size(), equalTo(4))___        DateFormatter dateFormatter = DateFormatter.forPattern("yyyy-MM-dd").withZone(ZoneOffset.UTC)___        ZonedDateTime expectedKeyFirstBucket =_            LocalDate.from(dateFormatter.parse("2012-10-27")).atStartOfDay(timezone).withZoneSameInstant(ZoneOffset.UTC)__        assertBucket(buckets.get(0), expectedKeyFirstBucket, 1L, nullValue(), null, null)___        ZonedDateTime expectedKeySecondBucket =_            LocalDate.from(dateFormatter.parse("2012-10-28")).atStartOfDay(timezone).withZoneSameInstant(ZoneOffset.UTC)__        assertBucket(buckets.get(1), expectedKeySecondBucket, 2L, notNullValue(), 1d, 1d / 24d)___        _        ZonedDateTime expectedKeyThirdBucket =_            LocalDate.from(dateFormatter.parse("2012-10-29")).atStartOfDay(timezone).withZoneSameInstant(ZoneOffset.UTC)__        assertBucket(buckets.get(2), expectedKeyThirdBucket, 3L, notNullValue(), 1d, 1d / 25d)___        ZonedDateTime expectedKeyFourthBucket =_            LocalDate.from(dateFormatter.parse("2012-10-30")).atStartOfDay(timezone).withZoneSameInstant(ZoneOffset.UTC)__        assertBucket(buckets.get(3), expectedKeyFourthBucket, 4L, notNullValue(), 1d, 1d / 24d)__    };do,a,derivative,on,a,date,histogram,with,time,zone,cet,at,dst,end;public,void,throws,exception,create,index,zone,id,timezone,zone,id,of,cet,list,index,request,builder,builders,new,array,list,date,formatter,formatter,date,formatter,for,pattern,yyyy,mm,dd,t,hh,mm,ss,with,zone,timezone,add,ntimes,1,date,formatters,from,formatter,parse,2012,10,27t01,00,00,builders,add,ntimes,2,date,formatters,from,formatter,parse,2012,10,28t01,00,00,builders,add,ntimes,3,date,formatters,from,formatter,parse,2012,10,29t01,00,00,builders,add,ntimes,4,date,formatters,from,formatter,parse,2012,10,30t01,00,00,builders,index,random,true,builders,ensure,searchable,search,response,response,client,prepare,search,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,day,time,zone,timezone,min,doc,count,0,sub,aggregation,derivative,deriv,unit,date,histogram,interval,hour,get,assert,search,response,response,histogram,deriv,response,get,aggregations,get,histo,assert,that,deriv,not,null,value,assert,that,deriv,get,name,equal,to,histo,list,extends,bucket,buckets,deriv,get,buckets,assert,that,buckets,size,equal,to,4,date,formatter,date,formatter,date,formatter,for,pattern,yyyy,mm,dd,with,zone,zone,offset,utc,zoned,date,time,expected,key,first,bucket,local,date,from,date,formatter,parse,2012,10,27,at,start,of,day,timezone,with,zone,same,instant,zone,offset,utc,assert,bucket,buckets,get,0,expected,key,first,bucket,1l,null,value,null,null,zoned,date,time,expected,key,second,bucket,local,date,from,date,formatter,parse,2012,10,28,at,start,of,day,timezone,with,zone,same,instant,zone,offset,utc,assert,bucket,buckets,get,1,expected,key,second,bucket,2l,not,null,value,1d,1d,24d,zoned,date,time,expected,key,third,bucket,local,date,from,date,formatter,parse,2012,10,29,at,start,of,day,timezone,with,zone,same,instant,zone,offset,utc,assert,bucket,buckets,get,2,expected,key,third,bucket,3l,not,null,value,1d,1d,25d,zoned,date,time,expected,key,fourth,bucket,local,date,from,date,formatter,parse,2012,10,30,at,start,of,day,timezone,with,zone,same,instant,zone,offset,utc,assert,bucket,buckets,get,3,expected,key,fourth,bucket,4l,not,null,value,1d,1d,24d
DateDerivativeIT -> public void testSingleValuedFieldNormalised_timeZone_AsiaKathmandu() throws Exception;1524684173;also check for time zone shifts that are not one hour, e.g._"Asia/Kathmandu, 1 Jan 1986 - Time Zone Change (IST → NPT), at 00:00:00 clocks were turned forward 00:15 minutes;public void testSingleValuedFieldNormalised_timeZone_AsiaKathmandu() throws Exception {_        createIndex(IDX_DST_KATHMANDU)__        DateTimeZone timezone = DateTimeZone.forID("Asia/Kathmandu")__        List<IndexRequestBuilder> builders = new ArrayList<>()___        addNTimes(1, IDX_DST_KATHMANDU, new DateTime("1985-12-31T22:30:00", timezone), builders)__        _        addNTimes(2, IDX_DST_KATHMANDU, new DateTime("1985-12-31T23:30:00", timezone), builders)__        addNTimes(3, IDX_DST_KATHMANDU, new DateTime("1986-01-01T01:30:00", timezone), builders)__        addNTimes(4, IDX_DST_KATHMANDU, new DateTime("1986-01-01T02:30:00", timezone), builders)__        indexRandom(true, builders)__        ensureSearchable()___        SearchResponse response = client()_                .prepareSearch(IDX_DST_KATHMANDU)_                .addAggregation(dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.HOUR)_                        .timeZone(timezone).minDocCount(0)_                        .subAggregation(derivative("deriv", "_count").unit(DateHistogramInterval.MINUTE)))_                .execute()_                .actionGet()___        assertSearchResponse(response)___        Histogram deriv = response.getAggregations().get("histo")__        assertThat(deriv, notNullValue())__        assertThat(deriv.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = deriv.getBuckets()__        assertThat(buckets.size(), equalTo(4))___        assertBucket(buckets.get(0), new DateTime("1985-12-31T22:00:00", timezone).toDateTime(DateTimeZone.UTC), 1L, nullValue(), null,_                null)__        assertBucket(buckets.get(1), new DateTime("1985-12-31T23:00:00", timezone).toDateTime(DateTimeZone.UTC), 2L, notNullValue(), 1d,_                1d / 60d)__        _        assertBucket(buckets.get(2), new DateTime("1986-01-01T01:00:00", timezone).toDateTime(DateTimeZone.UTC), 3L, notNullValue(), 1d,_                1d / 105d)__        assertBucket(buckets.get(3), new DateTime("1986-01-01T02:00:00", timezone).toDateTime(DateTimeZone.UTC), 4L, notNullValue(), 1d,_                1d / 60d)__    };also,check,for,time,zone,shifts,that,are,not,one,hour,e,g,asia,kathmandu,1,jan,1986,time,zone,change,ist,npt,at,00,00,00,clocks,were,turned,forward,00,15,minutes;public,void,throws,exception,create,index,date,time,zone,timezone,date,time,zone,for,id,asia,kathmandu,list,index,request,builder,builders,new,array,list,add,ntimes,1,new,date,time,1985,12,31t22,30,00,timezone,builders,add,ntimes,2,new,date,time,1985,12,31t23,30,00,timezone,builders,add,ntimes,3,new,date,time,1986,01,01t01,30,00,timezone,builders,add,ntimes,4,new,date,time,1986,01,01t02,30,00,timezone,builders,index,random,true,builders,ensure,searchable,search,response,response,client,prepare,search,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,hour,time,zone,timezone,min,doc,count,0,sub,aggregation,derivative,deriv,unit,date,histogram,interval,minute,execute,action,get,assert,search,response,response,histogram,deriv,response,get,aggregations,get,histo,assert,that,deriv,not,null,value,assert,that,deriv,get,name,equal,to,histo,list,extends,bucket,buckets,deriv,get,buckets,assert,that,buckets,size,equal,to,4,assert,bucket,buckets,get,0,new,date,time,1985,12,31t22,00,00,timezone,to,date,time,date,time,zone,utc,1l,null,value,null,null,assert,bucket,buckets,get,1,new,date,time,1985,12,31t23,00,00,timezone,to,date,time,date,time,zone,utc,2l,not,null,value,1d,1d,60d,assert,bucket,buckets,get,2,new,date,time,1986,01,01t01,00,00,timezone,to,date,time,date,time,zone,utc,3l,not,null,value,1d,1d,105d,assert,bucket,buckets,get,3,new,date,time,1986,01,01t02,00,00,timezone,to,date,time,date,time,zone,utc,4l,not,null,value,1d,1d,60d
DateDerivativeIT -> public void testSingleValuedFieldNormalised_timeZone_AsiaKathmandu() throws Exception;1536314350;also check for time zone shifts that are not one hour, e.g._"Asia/Kathmandu, 1 Jan 1986 - Time Zone Change (IST → NPT), at 00:00:00 clocks were turned forward 00:15 minutes;public void testSingleValuedFieldNormalised_timeZone_AsiaKathmandu() throws Exception {_        createIndex(IDX_DST_KATHMANDU)__        DateTimeZone timezone = DateTimeZone.forID("Asia/Kathmandu")__        List<IndexRequestBuilder> builders = new ArrayList<>()___        addNTimes(1, IDX_DST_KATHMANDU, new DateTime("1985-12-31T22:30:00", timezone), builders)__        _        addNTimes(2, IDX_DST_KATHMANDU, new DateTime("1985-12-31T23:30:00", timezone), builders)__        addNTimes(3, IDX_DST_KATHMANDU, new DateTime("1986-01-01T01:30:00", timezone), builders)__        addNTimes(4, IDX_DST_KATHMANDU, new DateTime("1986-01-01T02:30:00", timezone), builders)__        indexRandom(true, builders)__        ensureSearchable()___        SearchResponse response = client()_                .prepareSearch(IDX_DST_KATHMANDU)_                .addAggregation(dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.HOUR)_                        .timeZone(timezone).minDocCount(0)_                        .subAggregation(derivative("deriv", "_count").unit(DateHistogramInterval.MINUTE)))_                .execute()_                .actionGet()___        assertSearchResponse(response)___        Histogram deriv = response.getAggregations().get("histo")__        assertThat(deriv, notNullValue())__        assertThat(deriv.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = deriv.getBuckets()__        assertThat(buckets.size(), equalTo(4))___        assertBucket(buckets.get(0), new DateTime("1985-12-31T22:00:00", timezone).toDateTime(DateTimeZone.UTC), 1L, nullValue(), null,_                null)__        assertBucket(buckets.get(1), new DateTime("1985-12-31T23:00:00", timezone).toDateTime(DateTimeZone.UTC), 2L, notNullValue(), 1d,_                1d / 60d)__        _        assertBucket(buckets.get(2), new DateTime("1986-01-01T01:00:00", timezone).toDateTime(DateTimeZone.UTC), 3L, notNullValue(), 1d,_                1d / 105d)__        assertBucket(buckets.get(3), new DateTime("1986-01-01T02:00:00", timezone).toDateTime(DateTimeZone.UTC), 4L, notNullValue(), 1d,_                1d / 60d)__    };also,check,for,time,zone,shifts,that,are,not,one,hour,e,g,asia,kathmandu,1,jan,1986,time,zone,change,ist,npt,at,00,00,00,clocks,were,turned,forward,00,15,minutes;public,void,throws,exception,create,index,date,time,zone,timezone,date,time,zone,for,id,asia,kathmandu,list,index,request,builder,builders,new,array,list,add,ntimes,1,new,date,time,1985,12,31t22,30,00,timezone,builders,add,ntimes,2,new,date,time,1985,12,31t23,30,00,timezone,builders,add,ntimes,3,new,date,time,1986,01,01t01,30,00,timezone,builders,add,ntimes,4,new,date,time,1986,01,01t02,30,00,timezone,builders,index,random,true,builders,ensure,searchable,search,response,response,client,prepare,search,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,hour,time,zone,timezone,min,doc,count,0,sub,aggregation,derivative,deriv,unit,date,histogram,interval,minute,execute,action,get,assert,search,response,response,histogram,deriv,response,get,aggregations,get,histo,assert,that,deriv,not,null,value,assert,that,deriv,get,name,equal,to,histo,list,extends,bucket,buckets,deriv,get,buckets,assert,that,buckets,size,equal,to,4,assert,bucket,buckets,get,0,new,date,time,1985,12,31t22,00,00,timezone,to,date,time,date,time,zone,utc,1l,null,value,null,null,assert,bucket,buckets,get,1,new,date,time,1985,12,31t23,00,00,timezone,to,date,time,date,time,zone,utc,2l,not,null,value,1d,1d,60d,assert,bucket,buckets,get,2,new,date,time,1986,01,01t01,00,00,timezone,to,date,time,date,time,zone,utc,3l,not,null,value,1d,1d,105d,assert,bucket,buckets,get,3,new,date,time,1986,01,01t02,00,00,timezone,to,date,time,date,time,zone,utc,4l,not,null,value,1d,1d,60d
DateDerivativeIT -> public void testSingleValuedFieldNormalised_timeZone_AsiaKathmandu() throws Exception;1540486836;also check for time zone shifts that are not one hour, e.g._"Asia/Kathmandu, 1 Jan 1986 - Time Zone Change (IST → NPT), at 00:00:00 clocks were turned forward 00:15 minutes;public void testSingleValuedFieldNormalised_timeZone_AsiaKathmandu() throws Exception {_        createIndex(IDX_DST_KATHMANDU)__        DateTimeZone timezone = DateTimeZone.forID("Asia/Kathmandu")__        List<IndexRequestBuilder> builders = new ArrayList<>()___        addNTimes(1, IDX_DST_KATHMANDU, new DateTime("1985-12-31T22:30:00", timezone), builders)__        _        addNTimes(2, IDX_DST_KATHMANDU, new DateTime("1985-12-31T23:30:00", timezone), builders)__        addNTimes(3, IDX_DST_KATHMANDU, new DateTime("1986-01-01T01:30:00", timezone), builders)__        addNTimes(4, IDX_DST_KATHMANDU, new DateTime("1986-01-01T02:30:00", timezone), builders)__        indexRandom(true, builders)__        ensureSearchable()___        SearchResponse response = client()_                .prepareSearch(IDX_DST_KATHMANDU)_                .addAggregation(dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.HOUR)_                        .timeZone(timezone).minDocCount(0)_                        .subAggregation(derivative("deriv", "_count").unit(DateHistogramInterval.MINUTE)))_                .execute()_                .actionGet()___        assertSearchResponse(response)___        Histogram deriv = response.getAggregations().get("histo")__        assertThat(deriv, notNullValue())__        assertThat(deriv.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = deriv.getBuckets()__        assertThat(buckets.size(), equalTo(4))___        assertBucket(buckets.get(0), new DateTime("1985-12-31T22:00:00", timezone).toDateTime(DateTimeZone.UTC), 1L, nullValue(), null,_                null)__        assertBucket(buckets.get(1), new DateTime("1985-12-31T23:00:00", timezone).toDateTime(DateTimeZone.UTC), 2L, notNullValue(), 1d,_                1d / 60d)__        _        assertBucket(buckets.get(2), new DateTime("1986-01-01T01:00:00", timezone).toDateTime(DateTimeZone.UTC), 3L, notNullValue(), 1d,_                1d / 105d)__        assertBucket(buckets.get(3), new DateTime("1986-01-01T02:00:00", timezone).toDateTime(DateTimeZone.UTC), 4L, notNullValue(), 1d,_                1d / 60d)__    };also,check,for,time,zone,shifts,that,are,not,one,hour,e,g,asia,kathmandu,1,jan,1986,time,zone,change,ist,npt,at,00,00,00,clocks,were,turned,forward,00,15,minutes;public,void,throws,exception,create,index,date,time,zone,timezone,date,time,zone,for,id,asia,kathmandu,list,index,request,builder,builders,new,array,list,add,ntimes,1,new,date,time,1985,12,31t22,30,00,timezone,builders,add,ntimes,2,new,date,time,1985,12,31t23,30,00,timezone,builders,add,ntimes,3,new,date,time,1986,01,01t01,30,00,timezone,builders,add,ntimes,4,new,date,time,1986,01,01t02,30,00,timezone,builders,index,random,true,builders,ensure,searchable,search,response,response,client,prepare,search,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,hour,time,zone,timezone,min,doc,count,0,sub,aggregation,derivative,deriv,unit,date,histogram,interval,minute,execute,action,get,assert,search,response,response,histogram,deriv,response,get,aggregations,get,histo,assert,that,deriv,not,null,value,assert,that,deriv,get,name,equal,to,histo,list,extends,bucket,buckets,deriv,get,buckets,assert,that,buckets,size,equal,to,4,assert,bucket,buckets,get,0,new,date,time,1985,12,31t22,00,00,timezone,to,date,time,date,time,zone,utc,1l,null,value,null,null,assert,bucket,buckets,get,1,new,date,time,1985,12,31t23,00,00,timezone,to,date,time,date,time,zone,utc,2l,not,null,value,1d,1d,60d,assert,bucket,buckets,get,2,new,date,time,1986,01,01t01,00,00,timezone,to,date,time,date,time,zone,utc,3l,not,null,value,1d,1d,105d,assert,bucket,buckets,get,3,new,date,time,1986,01,01t02,00,00,timezone,to,date,time,date,time,zone,utc,4l,not,null,value,1d,1d,60d
DateDerivativeIT -> public void testSingleValuedFieldNormalised_timeZone_AsiaKathmandu() throws Exception;1544110272;also check for time zone shifts that are not one hour, e.g._"Asia/Kathmandu, 1 Jan 1986 - Time Zone Change (IST → NPT), at 00:00:00 clocks were turned forward 00:15 minutes;public void testSingleValuedFieldNormalised_timeZone_AsiaKathmandu() throws Exception {_        createIndex(IDX_DST_KATHMANDU)__        DateTimeZone timezone = DateTimeZone.forID("Asia/Kathmandu")__        List<IndexRequestBuilder> builders = new ArrayList<>()___        addNTimes(1, IDX_DST_KATHMANDU, new DateTime("1985-12-31T22:30:00", timezone), builders)__        _        addNTimes(2, IDX_DST_KATHMANDU, new DateTime("1985-12-31T23:30:00", timezone), builders)__        addNTimes(3, IDX_DST_KATHMANDU, new DateTime("1986-01-01T01:30:00", timezone), builders)__        addNTimes(4, IDX_DST_KATHMANDU, new DateTime("1986-01-01T02:30:00", timezone), builders)__        indexRandom(true, builders)__        ensureSearchable()___        SearchResponse response = client()_                .prepareSearch(IDX_DST_KATHMANDU)_                .addAggregation(dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.HOUR)_                        .timeZone(timezone).minDocCount(0)_                        .subAggregation(derivative("deriv", "_count").unit(DateHistogramInterval.MINUTE)))_                .get()___        assertSearchResponse(response)___        Histogram deriv = response.getAggregations().get("histo")__        assertThat(deriv, notNullValue())__        assertThat(deriv.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = deriv.getBuckets()__        assertThat(buckets.size(), equalTo(4))___        assertBucket(buckets.get(0), new DateTime("1985-12-31T22:00:00", timezone).toDateTime(DateTimeZone.UTC), 1L, nullValue(), null,_                null)__        assertBucket(buckets.get(1), new DateTime("1985-12-31T23:00:00", timezone).toDateTime(DateTimeZone.UTC), 2L, notNullValue(), 1d,_                1d / 60d)__        _        assertBucket(buckets.get(2), new DateTime("1986-01-01T01:00:00", timezone).toDateTime(DateTimeZone.UTC), 3L, notNullValue(), 1d,_                1d / 105d)__        assertBucket(buckets.get(3), new DateTime("1986-01-01T02:00:00", timezone).toDateTime(DateTimeZone.UTC), 4L, notNullValue(), 1d,_                1d / 60d)__    };also,check,for,time,zone,shifts,that,are,not,one,hour,e,g,asia,kathmandu,1,jan,1986,time,zone,change,ist,npt,at,00,00,00,clocks,were,turned,forward,00,15,minutes;public,void,throws,exception,create,index,date,time,zone,timezone,date,time,zone,for,id,asia,kathmandu,list,index,request,builder,builders,new,array,list,add,ntimes,1,new,date,time,1985,12,31t22,30,00,timezone,builders,add,ntimes,2,new,date,time,1985,12,31t23,30,00,timezone,builders,add,ntimes,3,new,date,time,1986,01,01t01,30,00,timezone,builders,add,ntimes,4,new,date,time,1986,01,01t02,30,00,timezone,builders,index,random,true,builders,ensure,searchable,search,response,response,client,prepare,search,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,hour,time,zone,timezone,min,doc,count,0,sub,aggregation,derivative,deriv,unit,date,histogram,interval,minute,get,assert,search,response,response,histogram,deriv,response,get,aggregations,get,histo,assert,that,deriv,not,null,value,assert,that,deriv,get,name,equal,to,histo,list,extends,bucket,buckets,deriv,get,buckets,assert,that,buckets,size,equal,to,4,assert,bucket,buckets,get,0,new,date,time,1985,12,31t22,00,00,timezone,to,date,time,date,time,zone,utc,1l,null,value,null,null,assert,bucket,buckets,get,1,new,date,time,1985,12,31t23,00,00,timezone,to,date,time,date,time,zone,utc,2l,not,null,value,1d,1d,60d,assert,bucket,buckets,get,2,new,date,time,1986,01,01t01,00,00,timezone,to,date,time,date,time,zone,utc,3l,not,null,value,1d,1d,105d,assert,bucket,buckets,get,3,new,date,time,1986,01,01t02,00,00,timezone,to,date,time,date,time,zone,utc,4l,not,null,value,1d,1d,60d
DateDerivativeIT -> public void testSingleValuedFieldNormalised_timeZone_AsiaKathmandu() throws Exception;1544232221;also check for time zone shifts that are not one hour, e.g._"Asia/Kathmandu, 1 Jan 1986 - Time Zone Change (IST → NPT), at 00:00:00 clocks were turned forward 00:15 minutes;public void testSingleValuedFieldNormalised_timeZone_AsiaKathmandu() throws Exception {_        createIndex(IDX_DST_KATHMANDU)__        DateTimeZone timezone = DateTimeZone.forID("Asia/Kathmandu")__        List<IndexRequestBuilder> builders = new ArrayList<>()___        addNTimes(1, IDX_DST_KATHMANDU, new DateTime("1985-12-31T22:30:00", timezone), builders)__        _        addNTimes(2, IDX_DST_KATHMANDU, new DateTime("1985-12-31T23:30:00", timezone), builders)__        addNTimes(3, IDX_DST_KATHMANDU, new DateTime("1986-01-01T01:30:00", timezone), builders)__        addNTimes(4, IDX_DST_KATHMANDU, new DateTime("1986-01-01T02:30:00", timezone), builders)__        indexRandom(true, builders)__        ensureSearchable()___        SearchResponse response = client()_                .prepareSearch(IDX_DST_KATHMANDU)_                .addAggregation(dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.HOUR)_                        .timeZone(timezone).minDocCount(0)_                        .subAggregation(derivative("deriv", "_count").unit(DateHistogramInterval.MINUTE)))_                .get()___        assertSearchResponse(response)___        Histogram deriv = response.getAggregations().get("histo")__        assertThat(deriv, notNullValue())__        assertThat(deriv.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = deriv.getBuckets()__        assertThat(buckets.size(), equalTo(4))___        assertBucket(buckets.get(0), new DateTime("1985-12-31T22:00:00", timezone).toDateTime(DateTimeZone.UTC), 1L, nullValue(), null,_                null)__        assertBucket(buckets.get(1), new DateTime("1985-12-31T23:00:00", timezone).toDateTime(DateTimeZone.UTC), 2L, notNullValue(), 1d,_                1d / 60d)__        _        assertBucket(buckets.get(2), new DateTime("1986-01-01T01:00:00", timezone).toDateTime(DateTimeZone.UTC), 3L, notNullValue(), 1d,_                1d / 105d)__        assertBucket(buckets.get(3), new DateTime("1986-01-01T02:00:00", timezone).toDateTime(DateTimeZone.UTC), 4L, notNullValue(), 1d,_                1d / 60d)__    };also,check,for,time,zone,shifts,that,are,not,one,hour,e,g,asia,kathmandu,1,jan,1986,time,zone,change,ist,npt,at,00,00,00,clocks,were,turned,forward,00,15,minutes;public,void,throws,exception,create,index,date,time,zone,timezone,date,time,zone,for,id,asia,kathmandu,list,index,request,builder,builders,new,array,list,add,ntimes,1,new,date,time,1985,12,31t22,30,00,timezone,builders,add,ntimes,2,new,date,time,1985,12,31t23,30,00,timezone,builders,add,ntimes,3,new,date,time,1986,01,01t01,30,00,timezone,builders,add,ntimes,4,new,date,time,1986,01,01t02,30,00,timezone,builders,index,random,true,builders,ensure,searchable,search,response,response,client,prepare,search,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,hour,time,zone,timezone,min,doc,count,0,sub,aggregation,derivative,deriv,unit,date,histogram,interval,minute,get,assert,search,response,response,histogram,deriv,response,get,aggregations,get,histo,assert,that,deriv,not,null,value,assert,that,deriv,get,name,equal,to,histo,list,extends,bucket,buckets,deriv,get,buckets,assert,that,buckets,size,equal,to,4,assert,bucket,buckets,get,0,new,date,time,1985,12,31t22,00,00,timezone,to,date,time,date,time,zone,utc,1l,null,value,null,null,assert,bucket,buckets,get,1,new,date,time,1985,12,31t23,00,00,timezone,to,date,time,date,time,zone,utc,2l,not,null,value,1d,1d,60d,assert,bucket,buckets,get,2,new,date,time,1986,01,01t01,00,00,timezone,to,date,time,date,time,zone,utc,3l,not,null,value,1d,1d,105d,assert,bucket,buckets,get,3,new,date,time,1986,01,01t02,00,00,timezone,to,date,time,date,time,zone,utc,4l,not,null,value,1d,1d,60d
DateDerivativeIT -> public void testSingleValuedFieldNormalised_timeZone_AsiaKathmandu() throws Exception;1548236405;also check for time zone shifts that are not one hour, e.g._"Asia/Kathmandu, 1 Jan 1986 - Time Zone Change (IST → NPT), at 00:00:00 clocks were turned forward 00:15 minutes;public void testSingleValuedFieldNormalised_timeZone_AsiaKathmandu() throws Exception {_        createIndex(IDX_DST_KATHMANDU)__        ZoneId timezone = ZoneId.of("Asia/Kathmandu")__        List<IndexRequestBuilder> builders = new ArrayList<>()___        DateFormatter formatter = DateFormatter.forPattern("yyyy-MM-dd'T'HH:mm:ss").withZone(timezone)__        addNTimes(1, IDX_DST_KATHMANDU, DateFormatters.toZonedDateTime(formatter.parse("1985-12-31T22:30:00")), builders)__        _        addNTimes(2, IDX_DST_KATHMANDU, DateFormatters.toZonedDateTime(formatter.parse("1985-12-31T23:30:00")), builders)__        addNTimes(3, IDX_DST_KATHMANDU, DateFormatters.toZonedDateTime(formatter.parse("1986-01-01T01:30:00")), builders)__        addNTimes(4, IDX_DST_KATHMANDU, DateFormatters.toZonedDateTime(formatter.parse("1986-01-01T02:30:00")), builders)__        indexRandom(true, builders)__        ensureSearchable()___        SearchResponse response = client()_                .prepareSearch(IDX_DST_KATHMANDU)_                .addAggregation(dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.HOUR)_                        .timeZone(timezone).minDocCount(0)_                        .subAggregation(derivative("deriv", "_count").unit(DateHistogramInterval.MINUTE)))_                .get()___        assertSearchResponse(response)___        Histogram deriv = response.getAggregations().get("histo")__        assertThat(deriv, notNullValue())__        assertThat(deriv.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = deriv.getBuckets()__        assertThat(buckets.size(), equalTo(4))___        DateFormatter dateFormatter = DateFormatter.forPattern("yyyy-MM-dd'T'HH:mm:ss").withZone(ZoneOffset.UTC)___        ZonedDateTime expectedKeyFirstBucket =_            LocalDateTime.from(dateFormatter.parse("1985-12-31T22:00:00")).atZone(timezone).withZoneSameInstant(ZoneOffset.UTC)__        assertBucket(buckets.get(0), expectedKeyFirstBucket, 1L, nullValue(), null,null)___        ZonedDateTime expectedKeySecondBucket =_            LocalDateTime.from(dateFormatter.parse("1985-12-31T23:00:00")).atZone(timezone).withZoneSameInstant(ZoneOffset.UTC)__        assertBucket(buckets.get(1), expectedKeySecondBucket, 2L, notNullValue(), 1d,1d / 60d)___        _        ZonedDateTime expectedKeyThirdBucket =_            LocalDateTime.from(dateFormatter.parse("1986-01-01T01:00:00")).atZone(timezone).withZoneSameInstant(ZoneOffset.UTC)__        assertBucket(buckets.get(2), expectedKeyThirdBucket, 3L, notNullValue(), 1d,1d / 105d)___        ZonedDateTime expectedKeyFourthBucket =_            LocalDateTime.from(dateFormatter.parse("1986-01-01T02:00:00")).atZone(timezone).withZoneSameInstant(ZoneOffset.UTC)__        assertBucket(buckets.get(3), expectedKeyFourthBucket, 4L, notNullValue(), 1d,1d / 60d)__    };also,check,for,time,zone,shifts,that,are,not,one,hour,e,g,asia,kathmandu,1,jan,1986,time,zone,change,ist,npt,at,00,00,00,clocks,were,turned,forward,00,15,minutes;public,void,throws,exception,create,index,zone,id,timezone,zone,id,of,asia,kathmandu,list,index,request,builder,builders,new,array,list,date,formatter,formatter,date,formatter,for,pattern,yyyy,mm,dd,t,hh,mm,ss,with,zone,timezone,add,ntimes,1,date,formatters,to,zoned,date,time,formatter,parse,1985,12,31t22,30,00,builders,add,ntimes,2,date,formatters,to,zoned,date,time,formatter,parse,1985,12,31t23,30,00,builders,add,ntimes,3,date,formatters,to,zoned,date,time,formatter,parse,1986,01,01t01,30,00,builders,add,ntimes,4,date,formatters,to,zoned,date,time,formatter,parse,1986,01,01t02,30,00,builders,index,random,true,builders,ensure,searchable,search,response,response,client,prepare,search,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,hour,time,zone,timezone,min,doc,count,0,sub,aggregation,derivative,deriv,unit,date,histogram,interval,minute,get,assert,search,response,response,histogram,deriv,response,get,aggregations,get,histo,assert,that,deriv,not,null,value,assert,that,deriv,get,name,equal,to,histo,list,extends,bucket,buckets,deriv,get,buckets,assert,that,buckets,size,equal,to,4,date,formatter,date,formatter,date,formatter,for,pattern,yyyy,mm,dd,t,hh,mm,ss,with,zone,zone,offset,utc,zoned,date,time,expected,key,first,bucket,local,date,time,from,date,formatter,parse,1985,12,31t22,00,00,at,zone,timezone,with,zone,same,instant,zone,offset,utc,assert,bucket,buckets,get,0,expected,key,first,bucket,1l,null,value,null,null,zoned,date,time,expected,key,second,bucket,local,date,time,from,date,formatter,parse,1985,12,31t23,00,00,at,zone,timezone,with,zone,same,instant,zone,offset,utc,assert,bucket,buckets,get,1,expected,key,second,bucket,2l,not,null,value,1d,1d,60d,zoned,date,time,expected,key,third,bucket,local,date,time,from,date,formatter,parse,1986,01,01t01,00,00,at,zone,timezone,with,zone,same,instant,zone,offset,utc,assert,bucket,buckets,get,2,expected,key,third,bucket,3l,not,null,value,1d,1d,105d,zoned,date,time,expected,key,fourth,bucket,local,date,time,from,date,formatter,parse,1986,01,01t02,00,00,at,zone,timezone,with,zone,same,instant,zone,offset,utc,assert,bucket,buckets,get,3,expected,key,fourth,bucket,4l,not,null,value,1d,1d,60d
DateDerivativeIT -> public void testSingleValuedFieldNormalised_timeZone_AsiaKathmandu() throws Exception;1548921340;also check for time zone shifts that are not one hour, e.g._"Asia/Kathmandu, 1 Jan 1986 - Time Zone Change (IST → NPT), at 00:00:00 clocks were turned forward 00:15 minutes;public void testSingleValuedFieldNormalised_timeZone_AsiaKathmandu() throws Exception {_        createIndex(IDX_DST_KATHMANDU)__        ZoneId timezone = ZoneId.of("Asia/Kathmandu")__        List<IndexRequestBuilder> builders = new ArrayList<>()___        DateFormatter formatter = DateFormatter.forPattern("yyyy-MM-dd'T'HH:mm:ss").withZone(timezone)__        addNTimes(1, IDX_DST_KATHMANDU, DateFormatters.from(formatter.parse("1985-12-31T22:30:00")), builders)__        _        addNTimes(2, IDX_DST_KATHMANDU, DateFormatters.from(formatter.parse("1985-12-31T23:30:00")), builders)__        addNTimes(3, IDX_DST_KATHMANDU, DateFormatters.from(formatter.parse("1986-01-01T01:30:00")), builders)__        addNTimes(4, IDX_DST_KATHMANDU, DateFormatters.from(formatter.parse("1986-01-01T02:30:00")), builders)__        indexRandom(true, builders)__        ensureSearchable()___        SearchResponse response = client()_                .prepareSearch(IDX_DST_KATHMANDU)_                .addAggregation(dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.HOUR)_                        .timeZone(timezone).minDocCount(0)_                        .subAggregation(derivative("deriv", "_count").unit(DateHistogramInterval.MINUTE)))_                .get()___        assertSearchResponse(response)___        Histogram deriv = response.getAggregations().get("histo")__        assertThat(deriv, notNullValue())__        assertThat(deriv.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = deriv.getBuckets()__        assertThat(buckets.size(), equalTo(4))___        DateFormatter dateFormatter = DateFormatter.forPattern("yyyy-MM-dd'T'HH:mm:ss").withZone(ZoneOffset.UTC)___        ZonedDateTime expectedKeyFirstBucket =_            LocalDateTime.from(dateFormatter.parse("1985-12-31T22:00:00")).atZone(timezone).withZoneSameInstant(ZoneOffset.UTC)__        assertBucket(buckets.get(0), expectedKeyFirstBucket, 1L, nullValue(), null,null)___        ZonedDateTime expectedKeySecondBucket =_            LocalDateTime.from(dateFormatter.parse("1985-12-31T23:00:00")).atZone(timezone).withZoneSameInstant(ZoneOffset.UTC)__        assertBucket(buckets.get(1), expectedKeySecondBucket, 2L, notNullValue(), 1d,1d / 60d)___        _        ZonedDateTime expectedKeyThirdBucket =_            LocalDateTime.from(dateFormatter.parse("1986-01-01T01:00:00")).atZone(timezone).withZoneSameInstant(ZoneOffset.UTC)__        assertBucket(buckets.get(2), expectedKeyThirdBucket, 3L, notNullValue(), 1d,1d / 105d)___        ZonedDateTime expectedKeyFourthBucket =_            LocalDateTime.from(dateFormatter.parse("1986-01-01T02:00:00")).atZone(timezone).withZoneSameInstant(ZoneOffset.UTC)__        assertBucket(buckets.get(3), expectedKeyFourthBucket, 4L, notNullValue(), 1d,1d / 60d)__    };also,check,for,time,zone,shifts,that,are,not,one,hour,e,g,asia,kathmandu,1,jan,1986,time,zone,change,ist,npt,at,00,00,00,clocks,were,turned,forward,00,15,minutes;public,void,throws,exception,create,index,zone,id,timezone,zone,id,of,asia,kathmandu,list,index,request,builder,builders,new,array,list,date,formatter,formatter,date,formatter,for,pattern,yyyy,mm,dd,t,hh,mm,ss,with,zone,timezone,add,ntimes,1,date,formatters,from,formatter,parse,1985,12,31t22,30,00,builders,add,ntimes,2,date,formatters,from,formatter,parse,1985,12,31t23,30,00,builders,add,ntimes,3,date,formatters,from,formatter,parse,1986,01,01t01,30,00,builders,add,ntimes,4,date,formatters,from,formatter,parse,1986,01,01t02,30,00,builders,index,random,true,builders,ensure,searchable,search,response,response,client,prepare,search,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,hour,time,zone,timezone,min,doc,count,0,sub,aggregation,derivative,deriv,unit,date,histogram,interval,minute,get,assert,search,response,response,histogram,deriv,response,get,aggregations,get,histo,assert,that,deriv,not,null,value,assert,that,deriv,get,name,equal,to,histo,list,extends,bucket,buckets,deriv,get,buckets,assert,that,buckets,size,equal,to,4,date,formatter,date,formatter,date,formatter,for,pattern,yyyy,mm,dd,t,hh,mm,ss,with,zone,zone,offset,utc,zoned,date,time,expected,key,first,bucket,local,date,time,from,date,formatter,parse,1985,12,31t22,00,00,at,zone,timezone,with,zone,same,instant,zone,offset,utc,assert,bucket,buckets,get,0,expected,key,first,bucket,1l,null,value,null,null,zoned,date,time,expected,key,second,bucket,local,date,time,from,date,formatter,parse,1985,12,31t23,00,00,at,zone,timezone,with,zone,same,instant,zone,offset,utc,assert,bucket,buckets,get,1,expected,key,second,bucket,2l,not,null,value,1d,1d,60d,zoned,date,time,expected,key,third,bucket,local,date,time,from,date,formatter,parse,1986,01,01t01,00,00,at,zone,timezone,with,zone,same,instant,zone,offset,utc,assert,bucket,buckets,get,2,expected,key,third,bucket,3l,not,null,value,1d,1d,105d,zoned,date,time,expected,key,fourth,bucket,local,date,time,from,date,formatter,parse,1986,01,01t02,00,00,at,zone,timezone,with,zone,same,instant,zone,offset,utc,assert,bucket,buckets,get,3,expected,key,fourth,bucket,4l,not,null,value,1d,1d,60d
