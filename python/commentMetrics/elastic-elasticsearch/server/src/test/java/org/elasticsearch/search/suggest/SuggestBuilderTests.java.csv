# id;timestamp;commentText;codeText;commentWords;codeWords
SuggestBuilderTests -> public void testSerialization() throws IOException;1524684173;Test serialization and deserialization;public void testSerialization() throws IOException {_        for (int i = 0_ i < NUMBER_OF_RUNS_ i++) {_            SuggestBuilder suggestBuilder = randomSuggestBuilder()__            SuggestBuilder deserializedModel = copyWriteable(suggestBuilder, namedWriteableRegistry, SuggestBuilder::new)__            assertEquals(suggestBuilder, deserializedModel)__            assertEquals(suggestBuilder.hashCode(), deserializedModel.hashCode())__            assertNotSame(suggestBuilder, deserializedModel)__        }_    };test,serialization,and,deserialization;public,void,test,serialization,throws,ioexception,for,int,i,0,i,i,suggest,builder,suggest,builder,random,suggest,builder,suggest,builder,deserialized,model,copy,writeable,suggest,builder,named,writeable,registry,suggest,builder,new,assert,equals,suggest,builder,deserialized,model,assert,equals,suggest,builder,hash,code,deserialized,model,hash,code,assert,not,same,suggest,builder,deserialized,model
SuggestBuilderTests -> public void testSerialization() throws IOException;1528762805;Test serialization and deserialization;public void testSerialization() throws IOException {_        for (int i = 0_ i < NUMBER_OF_RUNS_ i++) {_            SuggestBuilder suggestBuilder = randomSuggestBuilder()__            SuggestBuilder deserializedModel = copyWriteable(suggestBuilder, namedWriteableRegistry, SuggestBuilder::new)__            assertEquals(suggestBuilder, deserializedModel)__            assertEquals(suggestBuilder.hashCode(), deserializedModel.hashCode())__            assertNotSame(suggestBuilder, deserializedModel)__        }_    };test,serialization,and,deserialization;public,void,test,serialization,throws,ioexception,for,int,i,0,i,i,suggest,builder,suggest,builder,random,suggest,builder,suggest,builder,deserialized,model,copy,writeable,suggest,builder,named,writeable,registry,suggest,builder,new,assert,equals,suggest,builder,deserialized,model,assert,equals,suggest,builder,hash,code,deserialized,model,hash,code,assert,not,same,suggest,builder,deserialized,model
SuggestBuilderTests -> public void testSerialization() throws IOException;1529916084;Test serialization and deserialization;public void testSerialization() throws IOException {_        for (int i = 0_ i < NUMBER_OF_RUNS_ i++) {_            SuggestBuilder suggestBuilder = randomSuggestBuilder()__            SuggestBuilder deserializedModel = copyWriteable(suggestBuilder, namedWriteableRegistry, SuggestBuilder::new)__            assertEquals(suggestBuilder, deserializedModel)__            assertEquals(suggestBuilder.hashCode(), deserializedModel.hashCode())__            assertNotSame(suggestBuilder, deserializedModel)__        }_    };test,serialization,and,deserialization;public,void,test,serialization,throws,ioexception,for,int,i,0,i,i,suggest,builder,suggest,builder,random,suggest,builder,suggest,builder,deserialized,model,copy,writeable,suggest,builder,named,writeable,registry,suggest,builder,new,assert,equals,suggest,builder,deserialized,model,assert,equals,suggest,builder,hash,code,deserialized,model,hash,code,assert,not,same,suggest,builder,deserialized,model
SuggestBuilderTests -> @BeforeClass     public static void init();1524684173;Setup for the whole base test class.;@BeforeClass_    public static void init() {_        SearchModule searchModule = new SearchModule(Settings.EMPTY, false, emptyList())__        namedWriteableRegistry = new NamedWriteableRegistry(searchModule.getNamedWriteables())__        xContentRegistry = new NamedXContentRegistry(searchModule.getNamedXContents())__    };setup,for,the,whole,base,test,class;before,class,public,static,void,init,search,module,search,module,new,search,module,settings,empty,false,empty,list,named,writeable,registry,new,named,writeable,registry,search,module,get,named,writeables,x,content,registry,new,named,xcontent,registry,search,module,get,named,xcontents
SuggestBuilderTests -> @BeforeClass     public static void init();1528762805;Setup for the whole base test class.;@BeforeClass_    public static void init() {_        SearchModule searchModule = new SearchModule(Settings.EMPTY, false, emptyList())__        namedWriteableRegistry = new NamedWriteableRegistry(searchModule.getNamedWriteables())__        xContentRegistry = new NamedXContentRegistry(searchModule.getNamedXContents())__    };setup,for,the,whole,base,test,class;before,class,public,static,void,init,search,module,search,module,new,search,module,settings,empty,false,empty,list,named,writeable,registry,new,named,writeable,registry,search,module,get,named,writeables,x,content,registry,new,named,xcontent,registry,search,module,get,named,xcontents
SuggestBuilderTests -> @BeforeClass     public static void init();1529916084;Setup for the whole base test class.;@BeforeClass_    public static void init() {_        SearchModule searchModule = new SearchModule(Settings.EMPTY, false, emptyList())__        namedWriteableRegistry = new NamedWriteableRegistry(searchModule.getNamedWriteables())__        xContentRegistry = new NamedXContentRegistry(searchModule.getNamedXContents())__    };setup,for,the,whole,base,test,class;before,class,public,static,void,init,search,module,search,module,new,search,module,settings,empty,false,empty,list,named,writeable,registry,new,named,writeable,registry,search,module,get,named,writeables,x,content,registry,new,named,xcontent,registry,search,module,get,named,xcontents
SuggestBuilderTests -> public void testEqualsAndHashcode() throws IOException;1524684173;Test equality and hashCode properties;public void testEqualsAndHashcode() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_RUNS_ runs++) {_            _            EqualsHashCodeTestUtils.<SuggestBuilder>checkEqualsAndHashCode(randomSuggestBuilder(), original -> {_                return copyWriteable(original, namedWriteableRegistry, SuggestBuilder::new)__            }, this::createMutation)__        }_    };test,equality,and,hash,code,properties;public,void,test,equals,and,hashcode,throws,ioexception,for,int,runs,0,runs,runs,equals,hash,code,test,utils,suggest,builder,check,equals,and,hash,code,random,suggest,builder,original,return,copy,writeable,original,named,writeable,registry,suggest,builder,new,this,create,mutation
SuggestBuilderTests -> public void testEqualsAndHashcode() throws IOException;1528762805;Test equality and hashCode properties;public void testEqualsAndHashcode() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_RUNS_ runs++) {_            _            EqualsHashCodeTestUtils.<SuggestBuilder>checkEqualsAndHashCode(randomSuggestBuilder(), original -> {_                return copyWriteable(original, namedWriteableRegistry, SuggestBuilder::new)__            }, this::createMutation)__        }_    };test,equality,and,hash,code,properties;public,void,test,equals,and,hashcode,throws,ioexception,for,int,runs,0,runs,runs,equals,hash,code,test,utils,suggest,builder,check,equals,and,hash,code,random,suggest,builder,original,return,copy,writeable,original,named,writeable,registry,suggest,builder,new,this,create,mutation
SuggestBuilderTests -> public void testEqualsAndHashcode() throws IOException;1529916084;Test equality and hashCode properties;public void testEqualsAndHashcode() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_RUNS_ runs++) {_            _            EqualsHashCodeTestUtils.<SuggestBuilder>checkEqualsAndHashCode(randomSuggestBuilder(), original -> {_                return copyWriteable(original, namedWriteableRegistry, SuggestBuilder::new)__            }, this::createMutation)__        }_    };test,equality,and,hash,code,properties;public,void,test,equals,and,hashcode,throws,ioexception,for,int,runs,0,runs,runs,equals,hash,code,test,utils,suggest,builder,check,equals,and,hash,code,random,suggest,builder,original,return,copy,writeable,original,named,writeable,registry,suggest,builder,new,this,create,mutation
SuggestBuilderTests -> public void testFromXContent() throws IOException;1524684173;creates random suggestion builder, renders it to xContent and back to new instance that should be equal to original;public void testFromXContent() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_RUNS_ runs++) {_            SuggestBuilder suggestBuilder = randomSuggestBuilder()__            XContentBuilder xContentBuilder = XContentFactory.contentBuilder(randomFrom(XContentType.values()))__            if (randomBoolean()) {_                xContentBuilder.prettyPrint()__            }_            suggestBuilder.toXContent(xContentBuilder, ToXContent.EMPTY_PARAMS)__            XContentParser parser = createParser(xContentBuilder)__            SuggestBuilder secondSuggestBuilder = SuggestBuilder.fromXContent(parser)__            assertNotSame(suggestBuilder, secondSuggestBuilder)__            assertEquals(suggestBuilder, secondSuggestBuilder)__            assertEquals(suggestBuilder.hashCode(), secondSuggestBuilder.hashCode())__        }_    };creates,random,suggestion,builder,renders,it,to,x,content,and,back,to,new,instance,that,should,be,equal,to,original;public,void,test,from,xcontent,throws,ioexception,for,int,runs,0,runs,runs,suggest,builder,suggest,builder,random,suggest,builder,xcontent,builder,x,content,builder,xcontent,factory,content,builder,random,from,xcontent,type,values,if,random,boolean,x,content,builder,pretty,print,suggest,builder,to,xcontent,x,content,builder,to,xcontent,xcontent,parser,parser,create,parser,x,content,builder,suggest,builder,second,suggest,builder,suggest,builder,from,xcontent,parser,assert,not,same,suggest,builder,second,suggest,builder,assert,equals,suggest,builder,second,suggest,builder,assert,equals,suggest,builder,hash,code,second,suggest,builder,hash,code
SuggestBuilderTests -> public void testFromXContent() throws IOException;1528762805;creates random suggestion builder, renders it to xContent and back to new instance that should be equal to original;public void testFromXContent() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_RUNS_ runs++) {_            SuggestBuilder suggestBuilder = randomSuggestBuilder()__            XContentBuilder xContentBuilder = XContentFactory.contentBuilder(randomFrom(XContentType.values()))__            if (randomBoolean()) {_                xContentBuilder.prettyPrint()__            }_            suggestBuilder.toXContent(xContentBuilder, ToXContent.EMPTY_PARAMS)__            XContentParser parser = createParser(xContentBuilder)__            SuggestBuilder secondSuggestBuilder = SuggestBuilder.fromXContent(parser)__            assertNotSame(suggestBuilder, secondSuggestBuilder)__            assertEquals(suggestBuilder, secondSuggestBuilder)__            assertEquals(suggestBuilder.hashCode(), secondSuggestBuilder.hashCode())__        }_    };creates,random,suggestion,builder,renders,it,to,x,content,and,back,to,new,instance,that,should,be,equal,to,original;public,void,test,from,xcontent,throws,ioexception,for,int,runs,0,runs,runs,suggest,builder,suggest,builder,random,suggest,builder,xcontent,builder,x,content,builder,xcontent,factory,content,builder,random,from,xcontent,type,values,if,random,boolean,x,content,builder,pretty,print,suggest,builder,to,xcontent,x,content,builder,to,xcontent,xcontent,parser,parser,create,parser,x,content,builder,suggest,builder,second,suggest,builder,suggest,builder,from,xcontent,parser,assert,not,same,suggest,builder,second,suggest,builder,assert,equals,suggest,builder,second,suggest,builder,assert,equals,suggest,builder,hash,code,second,suggest,builder,hash,code
SuggestBuilderTests -> public void testFromXContent() throws IOException;1529916084;creates random suggestion builder, renders it to xContent and back to new instance that should be equal to original;public void testFromXContent() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_RUNS_ runs++) {_            SuggestBuilder suggestBuilder = randomSuggestBuilder()__            XContentBuilder xContentBuilder = XContentFactory.contentBuilder(randomFrom(XContentType.values()))__            if (randomBoolean()) {_                xContentBuilder.prettyPrint()__            }_            suggestBuilder.toXContent(xContentBuilder, ToXContent.EMPTY_PARAMS)__            try (XContentParser parser = createParser(xContentBuilder)) {_                SuggestBuilder secondSuggestBuilder = SuggestBuilder.fromXContent(parser)__                assertNotSame(suggestBuilder, secondSuggestBuilder)__                assertEquals(suggestBuilder, secondSuggestBuilder)__                assertEquals(suggestBuilder.hashCode(), secondSuggestBuilder.hashCode())__            }_        }_    };creates,random,suggestion,builder,renders,it,to,x,content,and,back,to,new,instance,that,should,be,equal,to,original;public,void,test,from,xcontent,throws,ioexception,for,int,runs,0,runs,runs,suggest,builder,suggest,builder,random,suggest,builder,xcontent,builder,x,content,builder,xcontent,factory,content,builder,random,from,xcontent,type,values,if,random,boolean,x,content,builder,pretty,print,suggest,builder,to,xcontent,x,content,builder,to,xcontent,try,xcontent,parser,parser,create,parser,x,content,builder,suggest,builder,second,suggest,builder,suggest,builder,from,xcontent,parser,assert,not,same,suggest,builder,second,suggest,builder,assert,equals,suggest,builder,second,suggest,builder,assert,equals,suggest,builder,hash,code,second,suggest,builder,hash,code
