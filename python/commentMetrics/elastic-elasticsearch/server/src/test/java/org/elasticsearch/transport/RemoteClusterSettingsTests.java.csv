commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;public void testConnectionsPerClusterFallback() {     final int value = randomIntBetween(1, 8).     final Settings settings = Settings.builder().put(SEARCH_REMOTE_CONNECTIONS_PER_CLUSTER.getKey(), value).build().     assertThat(REMOTE_CONNECTIONS_PER_CLUSTER.get(settings), equalTo(value)).     assertSettingDeprecationsAndWarnings(new Setting[] { SEARCH_REMOTE_CONNECTIONS_PER_CLUSTER }). }
false;public;0;3;;public void testConnectionsPerClusterDefault() {     assertThat(REMOTE_CONNECTIONS_PER_CLUSTER.get(Settings.EMPTY), equalTo(3)). }
false;public;0;8;;public void testInitialConnectTimeoutFallback() {     final String value = randomTimeValue(30, 300, "s").     final Settings settings = Settings.builder().put(SEARCH_REMOTE_INITIAL_CONNECTION_TIMEOUT_SETTING.getKey(), value).build().     assertThat(REMOTE_INITIAL_CONNECTION_TIMEOUT_SETTING.get(settings), equalTo(TimeValue.parseTimeValue(value, SEARCH_REMOTE_INITIAL_CONNECTION_TIMEOUT_SETTING.getKey()))).     assertSettingDeprecationsAndWarnings(new Setting[] { SEARCH_REMOTE_INITIAL_CONNECTION_TIMEOUT_SETTING }). }
false;public;0;3;;public void testInitialConnectTimeoutDefault() {     assertThat(REMOTE_INITIAL_CONNECTION_TIMEOUT_SETTING.get(Settings.EMPTY), equalTo(new TimeValue(30, TimeUnit.SECONDS))). }
false;public;0;6;;public void testRemoteNodeAttributeFallback() {     final String attribute = randomAlphaOfLength(8).     final Settings settings = Settings.builder().put(SEARCH_REMOTE_NODE_ATTRIBUTE.getKey(), attribute).build().     assertThat(REMOTE_NODE_ATTRIBUTE.get(settings), equalTo(attribute)).     assertSettingDeprecationsAndWarnings(new Setting[] { SEARCH_REMOTE_NODE_ATTRIBUTE }). }
false;public;0;3;;public void testRemoteNodeAttributeDefault() {     assertThat(REMOTE_NODE_ATTRIBUTE.get(Settings.EMPTY), equalTo("")). }
false;public;0;6;;public void testEnableRemoteClustersFallback() {     final boolean enable = randomBoolean().     final Settings settings = Settings.builder().put(SEARCH_ENABLE_REMOTE_CLUSTERS.getKey(), enable).build().     assertThat(ENABLE_REMOTE_CLUSTERS.get(settings), equalTo(enable)).     assertSettingDeprecationsAndWarnings(new Setting[] { SEARCH_ENABLE_REMOTE_CLUSTERS }). }
false;public;0;3;;public void testEnableRemoteClustersDefault() {     assertTrue(ENABLE_REMOTE_CLUSTERS.get(Settings.EMPTY)). }
false;public;0;8;;public void testSkipUnavailableFallback() {     final String alias = randomAlphaOfLength(8).     final boolean skip = randomBoolean().     final Settings settings = Settings.builder().put(SEARCH_REMOTE_CLUSTER_SKIP_UNAVAILABLE.getConcreteSettingForNamespace(alias).getKey(), skip).build().     assertThat(REMOTE_CLUSTER_SKIP_UNAVAILABLE.getConcreteSettingForNamespace(alias).get(settings), equalTo(skip)).     assertSettingDeprecationsAndWarnings(new Setting[] { SEARCH_REMOTE_CLUSTER_SKIP_UNAVAILABLE.getConcreteSettingForNamespace(alias) }). }
false;public;0;4;;public void testSkipUnavailableDefault() {     final String alias = randomAlphaOfLength(8).     assertFalse(REMOTE_CLUSTER_SKIP_UNAVAILABLE.getConcreteSettingForNamespace(alias).get(Settings.EMPTY)). }
false;public;0;13;;public void testSeedsFallback() {     final String alias = randomAlphaOfLength(8).     final int numberOfSeeds = randomIntBetween(1, 8).     final List<String> seeds = new ArrayList<>(numberOfSeeds).     for (int i = 0. i < numberOfSeeds. i++) {         seeds.add("localhost:" + Integer.toString(9200 + i)).     }     final Settings settings = Settings.builder().put(SEARCH_REMOTE_CLUSTERS_SEEDS.getConcreteSettingForNamespace(alias).getKey(), String.join(",", seeds)).build().     assertThat(REMOTE_CLUSTERS_SEEDS.getConcreteSettingForNamespace(alias).get(settings), equalTo(seeds)).     assertSettingDeprecationsAndWarnings(new Setting[] { SEARCH_REMOTE_CLUSTERS_SEEDS.getConcreteSettingForNamespace(alias) }). }
false;public;0;4;;public void testSeedsDefault() {     final String alias = randomAlphaOfLength(8).     assertThat(REMOTE_CLUSTERS_SEEDS.getConcreteSettingForNamespace(alias).get(Settings.EMPTY), emptyCollectionOf(String.class)). }
false;public;0;11;;public void testProxyFallback() {     final String alias = randomAlphaOfLength(8).     final String proxy = randomAlphaOfLength(8).     final int port = randomIntBetween(9200, 9300).     final String value = proxy + ":" + port.     final Settings settings = Settings.builder().put(SEARCH_REMOTE_CLUSTERS_PROXY.getConcreteSettingForNamespace(alias).getKey(), value).build().     assertThat(REMOTE_CLUSTERS_PROXY.getConcreteSettingForNamespace(alias).get(settings), equalTo(value)).     assertSettingDeprecationsAndWarnings(new Setting[] { SEARCH_REMOTE_CLUSTERS_PROXY.getConcreteSettingForNamespace(alias) }). }
false;public;0;4;;public void testProxyDefault() {     final String alias = randomAlphaOfLength(8).     assertThat(REMOTE_CLUSTERS_PROXY.getConcreteSettingForNamespace(alias).get(Settings.EMPTY), equalTo("")). }
