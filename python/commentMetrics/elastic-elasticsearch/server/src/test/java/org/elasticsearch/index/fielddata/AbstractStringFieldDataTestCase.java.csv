commented;modifiers;parameterAmount;loc;comment;code
false;private;3;4;;private void addField(Document d, String name, String value) {     d.add(new StringField(name, value, Field.Store.YES)).     d.add(new SortedSetDocValuesField(name, new BytesRef(value))). }
false;protected;0;17;;@Override protected void fillSingleValueAllSet() throws Exception {     Document d = new Document().     addField(d, "_id", "1").     addField(d, "value", "2").     writer.addDocument(d).     d = new Document().     addField(d, "_id", "1").     addField(d, "value", "1").     writer.addDocument(d).     d = new Document().     addField(d, "_id", "3").     addField(d, "value", "3").     writer.addDocument(d). }
false;protected;0;16;;@Override protected void add2SingleValuedDocumentsAndDeleteOneOfThem() throws Exception {     Document d = new Document().     addField(d, "_id", "1").     addField(d, "value", "2").     writer.addDocument(d).     d = new Document().     addField(d, "_id", "2").     addField(d, "value", "4").     writer.addDocument(d).     writer.commit().     writer.deleteDocuments(new Term("_id", "1")). }
false;protected;0;17;;@Override protected void fillSingleValueWithMissing() throws Exception {     Document d = new Document().     addField(d, "_id", "1").     addField(d, "value", "2").     writer.addDocument(d).     d = new Document().     addField(d, "_id", "2").     // d.add(new StringField("value", one(), Field.Store.NO)). // MISSING....     writer.addDocument(d).     d = new Document().     addField(d, "_id", "3").     addField(d, "value", "3").     writer.addDocument(d). }
false;protected;0;19;;@Override protected void fillMultiValueAllSet() throws Exception {     Document d = new Document().     addField(d, "_id", "1").     addField(d, "value", "2").     addField(d, "value", "4").     writer.addDocument(d).     d = new Document().     addField(d, "_id", "2").     addField(d, "value", "1").     writer.addDocument(d).     // TODO: Have tests with more docs for sorting     writer.commit().     d = new Document().     addField(d, "_id", "3").     addField(d, "value", "3").     writer.addDocument(d). }
false;protected;0;18;;@Override protected void fillMultiValueWithMissing() throws Exception {     Document d = new Document().     addField(d, "_id", "1").     addField(d, "value", "2").     addField(d, "value", "4").     writer.addDocument(d).     d = new Document().     addField(d, "_id", "2").     // d.add(new StringField("value", one(), Field.Store.NO)). // MISSING     writer.addDocument(d).     d = new Document().     addField(d, "_id", "3").     addField(d, "value", "3").     writer.addDocument(d). }
false;protected;0;14;;@Override protected void fillAllMissing() throws Exception {     Document d = new Document().     addField(d, "_id", "1").     writer.addDocument(d).     d = new Document().     addField(d, "_id", "2").     writer.addDocument(d).     d = new Document().     addField(d, "_id", "3").     writer.addDocument(d). }
false;protected;0;51;;@Override protected void fillExtendedMvSet() throws Exception {     Document d = new Document().     addField(d, "_id", "1").     addField(d, "value", "02").     addField(d, "value", "04").     writer.addDocument(d).     d = new Document().     addField(d, "_id", "2").     writer.addDocument(d).     d = new Document().     addField(d, "_id", "3").     addField(d, "value", "03").     writer.addDocument(d).     writer.commit().     d = new Document().     addField(d, "_id", "4").     addField(d, "value", "04").     addField(d, "value", "05").     addField(d, "value", "06").     writer.addDocument(d).     d = new Document().     addField(d, "_id", "5").     addField(d, "value", "06").     addField(d, "value", "07").     addField(d, "value", "08").     writer.addDocument(d).     d = new Document().     d.add(new StringField("_id", "6", Field.Store.NO)).     writer.addDocument(d).     d = new Document().     addField(d, "_id", "7").     addField(d, "value", "08").     addField(d, "value", "09").     addField(d, "value", "10").     writer.addDocument(d).     writer.commit().     d = new Document().     addField(d, "_id", "8").     addField(d, "value", "!08").     addField(d, "value", "!09").     addField(d, "value", "!10").     writer.addDocument(d). }
false;public;0;3;;public void testActualMissingValue() throws IOException {     testActualMissingValue(false). }
false;public;0;3;;public void testActualMissingValueReverse() throws IOException {     testActualMissingValue(true). }
false;public;1;41;;public void testActualMissingValue(boolean reverse) throws IOException {     // missing value is set to an actual value     final String[] values = new String[randomIntBetween(2, 30)].     for (int i = 1. i < values.length. ++i) {         values[i] = TestUtil.randomUnicodeString(random()).     }     final int numDocs = scaledRandomIntBetween(10, 3072).     for (int i = 0. i < numDocs. ++i) {         final String value = RandomPicks.randomFrom(random(), values).         if (value == null) {             writer.addDocument(new Document()).         } else {             Document d = new Document().             addField(d, "value", value).             writer.addDocument(d).         }         if (randomInt(10) == 0) {             writer.commit().         }     }     final IndexFieldData<?> indexFieldData = getForField("value").     final String missingValue = values[1].     IndexSearcher searcher = new IndexSearcher(DirectoryReader.open(writer)).     SortField sortField = indexFieldData.sortField(missingValue, MultiValueMode.MIN, null, reverse).     TopFieldDocs topDocs = searcher.search(new MatchAllDocsQuery(), randomBoolean() ? numDocs : randomIntBetween(10, numDocs), new Sort(sortField)).     assertEquals(numDocs, topDocs.totalHits.value).     BytesRef previousValue = reverse ? UnicodeUtil.BIG_TERM : new BytesRef().     for (int i = 0. i < topDocs.scoreDocs.length. ++i) {         final String docValue = searcher.doc(topDocs.scoreDocs[i].doc).get("value").         final BytesRef value = new BytesRef(docValue == null ? missingValue : docValue).         if (reverse) {             assertTrue(previousValue.compareTo(value) >= 0).         } else {             assertTrue(previousValue.compareTo(value) <= 0).         }         previousValue = value.     }     searcher.getIndexReader().close(). }
false;public;0;3;;public void testSortMissingFirst() throws IOException {     testSortMissing(true, false). }
false;public;0;3;;public void testSortMissingFirstReverse() throws IOException {     testSortMissing(true, true). }
false;public;0;3;;public void testSortMissingLast() throws IOException {     testSortMissing(false, false). }
false;public;0;3;;public void testSortMissingLastReverse() throws IOException {     testSortMissing(false, true). }
false;public;2;45;;public void testSortMissing(boolean first, boolean reverse) throws IOException {     final String[] values = new String[randomIntBetween(2, 10)].     for (int i = 1. i < values.length. ++i) {         values[i] = TestUtil.randomUnicodeString(random()).     }     final int numDocs = scaledRandomIntBetween(10, 3072).     for (int i = 0. i < numDocs. ++i) {         final String value = RandomPicks.randomFrom(random(), values).         if (value == null) {             writer.addDocument(new Document()).         } else {             Document d = new Document().             addField(d, "value", value).             writer.addDocument(d).         }         if (randomInt(10) == 0) {             writer.commit().         }     }     final IndexFieldData<?> indexFieldData = getForField("value").     IndexSearcher searcher = new IndexSearcher(DirectoryReader.open(writer)).     SortField sortField = indexFieldData.sortField(first ? "_first" : "_last", MultiValueMode.MIN, null, reverse).     TopFieldDocs topDocs = searcher.search(new MatchAllDocsQuery(), randomBoolean() ? numDocs : randomIntBetween(10, numDocs), new Sort(sortField)).     assertEquals(numDocs, topDocs.totalHits.value).     BytesRef previousValue = first ? null : reverse ? UnicodeUtil.BIG_TERM : new BytesRef().     for (int i = 0. i < topDocs.scoreDocs.length. ++i) {         final String docValue = searcher.doc(topDocs.scoreDocs[i].doc).get("value").         if (first && docValue == null) {             assertNull(previousValue).         } else if (!first && docValue != null) {             assertNotNull(previousValue).         }         final BytesRef value = docValue == null ? null : new BytesRef(docValue).         if (previousValue != null && value != null) {             if (reverse) {                 assertTrue(previousValue.compareTo(value) >= 0).             } else {                 assertTrue(previousValue.compareTo(value) <= 0).             }         }         previousValue = value.     }     searcher.getIndexReader().close(). }
false;public;0;3;;public void testNestedSortingMin() throws IOException {     testNestedSorting(MultiValueMode.MIN). }
false;public;0;3;;public void testNestedSortingMax() throws IOException {     testNestedSorting(MultiValueMode.MAX). }
false;public;1;104;;public void testNestedSorting(MultiValueMode sortMode) throws IOException {     final String[] values = new String[randomIntBetween(2, 20)].     for (int i = 0. i < values.length. ++i) {         values[i] = TestUtil.randomSimpleString(random()).     }     final int numParents = scaledRandomIntBetween(10, 3072).     List<Document> docs = new ArrayList<>().     FixedBitSet parents = new FixedBitSet(64).     for (int i = 0. i < numParents. ++i) {         docs.clear().         final int numChildren = randomInt(4).         for (int j = 0. j < numChildren. ++j) {             final Document child = new Document().             final int numValues = randomInt(3).             for (int k = 0. k < numValues. ++k) {                 final String value = RandomPicks.randomFrom(random(), values).                 addField(child, "text", value).             }             docs.add(child).         }         final Document parent = new Document().         parent.add(new StringField("type", "parent", Store.YES)).         final String value = RandomPicks.randomFrom(random(), values).         if (value != null) {             addField(parent, "text", value).         }         docs.add(parent).         int bit = parents.prevSetBit(parents.length() - 1) + docs.size().         parents = FixedBitSet.ensureCapacity(parents, bit).         parents.set(bit).         writer.addDocuments(docs).         if (randomInt(10) == 0) {             writer.commit().         }     }     DirectoryReader directoryReader = DirectoryReader.open(writer).     directoryReader = ElasticsearchDirectoryReader.wrap(directoryReader, new ShardId(indexService.index(), 0)).     IndexSearcher searcher = new IndexSearcher(directoryReader).     IndexFieldData<?> fieldData = getForField("text").     final Object missingValue.     switch(randomInt(4)) {         case 0:             missingValue = "_first".             break.         case 1:             missingValue = "_last".             break.         case 2:             missingValue = new BytesRef(RandomPicks.randomFrom(random(), values)).             break.         default:             missingValue = new BytesRef(TestUtil.randomSimpleString(random())).             break.     }     Query parentFilter = new TermQuery(new Term("type", "parent")).     Query childFilter = Queries.not(parentFilter).     Nested nested = createNested(searcher, parentFilter, childFilter).     BytesRefFieldComparatorSource nestedComparatorSource = new BytesRefFieldComparatorSource(fieldData, missingValue, sortMode, nested).     ToParentBlockJoinQuery query = new ToParentBlockJoinQuery(new ConstantScoreQuery(childFilter), new QueryBitSetProducer(parentFilter), ScoreMode.None).     Sort sort = new Sort(new SortField("text", nestedComparatorSource)).     TopFieldDocs topDocs = searcher.search(query, randomIntBetween(1, numParents), sort).     assertTrue(topDocs.scoreDocs.length > 0).     BytesRef previous = null.     for (int i = 0. i < topDocs.scoreDocs.length. ++i) {         final int docID = topDocs.scoreDocs[i].doc.         assertTrue("expected " + docID + " to be a parent", parents.get(docID)).         BytesRef cmpValue = null.         for (int child = parents.prevSetBit(docID - 1) + 1. child < docID. ++child) {             String[] sVals = searcher.doc(child).getValues("text").             final BytesRef[] vals.             if (sVals.length == 0) {                 vals = new BytesRef[0].             } else {                 vals = new BytesRef[sVals.length].                 for (int j = 0. j < vals.length. ++j) {                     vals[j] = new BytesRef(sVals[j]).                 }             }             for (BytesRef value : vals) {                 if (cmpValue == null) {                     cmpValue = value.                 } else if (sortMode == MultiValueMode.MIN && value.compareTo(cmpValue) < 0) {                     cmpValue = value.                 } else if (sortMode == MultiValueMode.MAX && value.compareTo(cmpValue) > 0) {                     cmpValue = value.                 }             }         }         if (cmpValue == null) {             if ("_first".equals(missingValue)) {                 cmpValue = new BytesRef().             } else if ("_last".equals(missingValue) == false) {                 cmpValue = (BytesRef) missingValue.             }         }         if (previous != null && cmpValue != null) {             assertTrue(previous.utf8ToString() + "   /   " + cmpValue.utf8ToString(), previous.compareTo(cmpValue) <= 0).         }         previous = cmpValue.     }     searcher.getIndexReader().close(). }
false;public;0;89;;public void testGlobalOrdinals() throws Exception {     fillExtendedMvSet().     refreshReader().     IndexOrdinalsFieldData ifd = getForField("string", "value", hasDocValues()).     IndexOrdinalsFieldData globalOrdinals = ifd.loadGlobal(topLevelReader).     assertNotNull(globalOrdinals.getOrdinalMap()).     assertThat(topLevelReader.leaves().size(), equalTo(3)).     // First segment     assertThat(globalOrdinals, instanceOf(GlobalOrdinalsIndexFieldData.class)).     LeafReaderContext leaf = topLevelReader.leaves().get(0).     AtomicOrdinalsFieldData afd = globalOrdinals.load(leaf).     SortedSetDocValues values = afd.getOrdinalsValues().     assertTrue(values.advanceExact(0)).     long ord = values.nextOrd().     assertThat(ord, equalTo(3L)).     assertThat(values.lookupOrd(ord).utf8ToString(), equalTo("02")).     ord = values.nextOrd().     assertThat(ord, equalTo(5L)).     assertThat(values.lookupOrd(ord).utf8ToString(), equalTo("04")).     ord = values.nextOrd().     assertThat(ord, equalTo(SortedSetDocValues.NO_MORE_ORDS)).     assertFalse(values.advanceExact(1)).     assertTrue(values.advanceExact(2)).     ord = values.nextOrd().     assertThat(ord, equalTo(4L)).     assertThat(values.lookupOrd(ord).utf8ToString(), equalTo("03")).     ord = values.nextOrd().     assertThat(ord, equalTo(SortedSetDocValues.NO_MORE_ORDS)).     // Second segment     leaf = topLevelReader.leaves().get(1).     afd = globalOrdinals.load(leaf).     values = afd.getOrdinalsValues().     assertTrue(values.advanceExact(0)).     ord = values.nextOrd().     assertThat(ord, equalTo(5L)).     assertThat(values.lookupOrd(ord).utf8ToString(), equalTo("04")).     ord = values.nextOrd().     assertThat(ord, equalTo(6L)).     assertThat(values.lookupOrd(ord).utf8ToString(), equalTo("05")).     ord = values.nextOrd().     assertThat(ord, equalTo(7L)).     assertThat(values.lookupOrd(ord).utf8ToString(), equalTo("06")).     ord = values.nextOrd().     assertThat(ord, equalTo(SortedSetDocValues.NO_MORE_ORDS)).     assertTrue(values.advanceExact(1)).     ord = values.nextOrd().     assertThat(ord, equalTo(7L)).     assertThat(values.lookupOrd(ord).utf8ToString(), equalTo("06")).     ord = values.nextOrd().     assertThat(ord, equalTo(8L)).     assertThat(values.lookupOrd(ord).utf8ToString(), equalTo("07")).     ord = values.nextOrd().     assertThat(ord, equalTo(9L)).     assertThat(values.lookupOrd(ord).utf8ToString(), equalTo("08")).     ord = values.nextOrd().     assertThat(ord, equalTo(SortedSetDocValues.NO_MORE_ORDS)).     assertFalse(values.advanceExact(2)).     assertTrue(values.advanceExact(3)).     ord = values.nextOrd().     assertThat(ord, equalTo(9L)).     assertThat(values.lookupOrd(ord).utf8ToString(), equalTo("08")).     ord = values.nextOrd().     assertThat(ord, equalTo(10L)).     assertThat(values.lookupOrd(ord).utf8ToString(), equalTo("09")).     ord = values.nextOrd().     assertThat(ord, equalTo(11L)).     assertThat(values.lookupOrd(ord).utf8ToString(), equalTo("10")).     ord = values.nextOrd().     assertThat(ord, equalTo(SortedSetDocValues.NO_MORE_ORDS)).     // Third segment     leaf = topLevelReader.leaves().get(2).     afd = globalOrdinals.load(leaf).     values = afd.getOrdinalsValues().     assertTrue(values.advanceExact(0)).     ord = values.nextOrd().     assertThat(ord, equalTo(0L)).     assertThat(values.lookupOrd(ord).utf8ToString(), equalTo("!08")).     ord = values.nextOrd().     assertThat(ord, equalTo(1L)).     assertThat(values.lookupOrd(ord).utf8ToString(), equalTo("!09")).     ord = values.nextOrd().     assertThat(ord, equalTo(2L)).     assertThat(values.lookupOrd(ord).utf8ToString(), equalTo("!10")).     ord = values.nextOrd().     assertThat(ord, equalTo(SortedSetDocValues.NO_MORE_ORDS)). }
false;public;0;37;;public void testTermsEnum() throws Exception {     fillExtendedMvSet().     writer.forceMerge(1).     List<LeafReaderContext> atomicReaderContexts = refreshReader().     IndexOrdinalsFieldData ifd = getForField("value").     for (LeafReaderContext atomicReaderContext : atomicReaderContexts) {         AtomicOrdinalsFieldData afd = ifd.load(atomicReaderContext).         TermsEnum termsEnum = afd.getOrdinalsValues().termsEnum().         int size = 0.         while (termsEnum.next() != null) {             size++.         }         assertThat(size, equalTo(12)).         assertThat(termsEnum.seekExact(new BytesRef("10")), is(true)).         assertThat(termsEnum.term().utf8ToString(), equalTo("10")).         assertThat(termsEnum.next(), nullValue()).         assertThat(termsEnum.seekExact(new BytesRef("08")), is(true)).         assertThat(termsEnum.term().utf8ToString(), equalTo("08")).         size = 0.         while (termsEnum.next() != null) {             size++.         }         assertThat(size, equalTo(2)).         termsEnum.seekExact(8).         assertThat(termsEnum.term().utf8ToString(), equalTo("07")).         size = 0.         while (termsEnum.next() != null) {             size++.         }         assertThat(size, equalTo(3)).     } }
false;public;0;29;;public void testGlobalOrdinalsGetRemovedOnceIndexReaderCloses() throws Exception {     fillExtendedMvSet().     refreshReader().     IndexOrdinalsFieldData ifd = getForField("string", "value", hasDocValues()).     IndexOrdinalsFieldData globalOrdinals = ifd.loadGlobal(topLevelReader).     assertNotNull(globalOrdinals.getOrdinalMap()).     assertThat(ifd.loadGlobal(topLevelReader), sameInstance(globalOrdinals)).     // 3 b/c 1 segment level caches and 1 top level cache     // in case of doc values, we don't cache atomic FD, so only the top-level cache is there     assertThat(indicesFieldDataCache.getCache().weight(), equalTo(hasDocValues() ? 1L : 4L)).     IndexOrdinalsFieldData cachedInstance = null.     for (Accountable ramUsage : indicesFieldDataCache.getCache().values()) {         if (ramUsage instanceof IndexOrdinalsFieldData) {             cachedInstance = (IndexOrdinalsFieldData) ramUsage.             break.         }     }     assertThat(cachedInstance, sameInstance(globalOrdinals)).     topLevelReader.close().     // Now only 3 segment level entries, only the toplevel reader has been closed, but the segment readers are still used by IW     assertThat(indicesFieldDataCache.getCache().weight(), equalTo(hasDocValues() ? 0L : 3L)).     refreshReader().     assertThat(ifd.loadGlobal(topLevelReader), not(sameInstance(globalOrdinals))).     indexService.clearCaches(false, true).     assertThat(indicesFieldDataCache.getCache().weight(), equalTo(0L)). }
