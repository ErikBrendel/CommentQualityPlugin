commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     return Arrays.asList(CustomScriptPlugin.class). }
false;protected;0;16;;@Override protected Map<String, Function<Map<String, Object>, Object>> pluginScripts() {     Map<String, Function<Map<String, Object>, Object>> scripts = new HashMap<>().     scripts.put("log(doc['index'].value + (factor * _score))", vars -> scoringScript(vars, ScoreAccessor::doubleValue)).     scripts.put("log(doc['index'].value + (factor * _score.intValue()))", vars -> scoringScript(vars, ScoreAccessor::intValue)).     scripts.put("log(doc['index'].value + (factor * _score.longValue()))", vars -> scoringScript(vars, ScoreAccessor::longValue)).     scripts.put("log(doc['index'].value + (factor * _score.floatValue()))", vars -> scoringScript(vars, ScoreAccessor::floatValue)).     scripts.put("log(doc['index'].value + (factor * _score.doubleValue()))", vars -> scoringScript(vars, ScoreAccessor::doubleValue)).     return scripts. }
false;static;2;7;;static Double scoringScript(Map<String, Object> vars, Function<ScoreAccessor, Number> scoring) {     Map<?, ?> doc = (Map) vars.get("doc").     Double index = ((Number) ((ScriptDocValues<?>) doc.get("index")).get(0)).doubleValue().     Double score = scoring.apply((ScoreAccessor) vars.get("_score")).doubleValue().     Integer factor = (Integer) vars.get("factor").     return Math.log(index + (factor * score)). }
false;public;0;58;;public void testConsistentHitsWithSameSeed() throws Exception {     createIndex("test").     // make sure we are done otherwise preference could change?     ensureGreen().     int docCount = randomIntBetween(100, 200).     for (int i = 0. i < docCount. i++) {         index("test", "type", "" + i, jsonBuilder().startObject().field("foo", i).endObject()).     }     flush().     refresh().     int outerIters = scaledRandomIntBetween(10, 20).     for (int o = 0. o < outerIters. o++) {         final int seed = randomInt().         // at least one char!!         String preference = randomRealisticUnicodeOfLengthBetween(1, 10).         // randomPreference should not start with '_' (reserved for known preference types (e.g. _shards)         while (preference.startsWith("_")) {             preference = randomRealisticUnicodeOfLengthBetween(1, 10).         }         int innerIters = scaledRandomIntBetween(2, 5).         SearchHit[] hits = null.         for (int i = 0. i < innerIters. i++) {             SearchResponse searchResponse = client().prepareSearch().setSize(// get all docs otherwise we are prone to tie-breaking             docCount).setPreference(preference).setQuery(functionScoreQuery(matchAllQuery(), randomFunction().seed(seed).setField("foo"))).get().             assertThat("Failures " + Arrays.toString(searchResponse.getShardFailures()), searchResponse.getShardFailures().length, CoreMatchers.equalTo(0)).             final int hitCount = searchResponse.getHits().getHits().length.             final SearchHit[] currentHits = searchResponse.getHits().getHits().             ArrayUtil.timSort(currentHits, (o1, o2) -> {                 // for tie-breaking we have to resort here since if the score is                 // identical we rely on collection order which might change.                 int cmp = Float.compare(o1.getScore(), o2.getScore()).                 return cmp == 0 ? o1.getId().compareTo(o2.getId()) : cmp.             }).             if (i == 0) {                 assertThat(hits, nullValue()).                 hits = currentHits.             } else {                 assertThat(hits.length, equalTo(searchResponse.getHits().getHits().length)).                 for (int j = 0. j < hitCount. j++) {                     assertThat("" + j, currentHits[j].getScore(), equalTo(hits[j].getScore())).                     assertThat("" + j, currentHits[j].getId(), equalTo(hits[j].getId())).                 }             }             // randomly change some docs to get them in different segments             int numDocsToChange = randomIntBetween(20, 50).             while (numDocsToChange > 0) {                 // watch out this is inclusive the max values!                 int doc = randomInt(docCount - 1).                 index("test", "type", "" + doc, jsonBuilder().startObject().field("foo", doc).endObject()).                 --numDocsToChange.             }             flush().             refresh().         }     } }
false;public;0;96;;public void testScoreAccessWithinScript() throws Exception {     assertAcked(prepareCreate("test").addMapping("type", "body", "type=text", "index", "type=" + randomFrom("short", "float", "long", "integer", "double"))).     int docCount = randomIntBetween(100, 200).     for (int i = 0. i < docCount. i++) {         client().prepareIndex("test", "type", "" + i).setSource("body", randomFrom(Arrays.asList("foo", "bar", "baz")), "index", i + 1).get().     }     refresh().     Map<String, Object> params = new HashMap<>().     params.put("factor", randomIntBetween(2, 4)).     // Test for accessing _score     Script script = new Script(ScriptType.INLINE, NAME, "log(doc['index'].value + (factor * _score))", params).     SearchResponse resp = client().prepareSearch("test").setQuery(functionScoreQuery(matchQuery("body", "foo"), new FunctionScoreQueryBuilder.FilterFunctionBuilder[] { new FunctionScoreQueryBuilder.FilterFunctionBuilder(fieldValueFactorFunction("index").factor(2)), new FunctionScoreQueryBuilder.FilterFunctionBuilder(scriptFunction(script)) })).get().     assertNoFailures(resp).     SearchHit firstHit = resp.getHits().getAt(0).     assertThat(firstHit.getScore(), greaterThan(1f)).     // Test for accessing _score.intValue()     script = new Script(ScriptType.INLINE, NAME, "log(doc['index'].value + (factor * _score.intValue()))", params).     resp = client().prepareSearch("test").setQuery(functionScoreQuery(matchQuery("body", "foo"), new FunctionScoreQueryBuilder.FilterFunctionBuilder[] { new FunctionScoreQueryBuilder.FilterFunctionBuilder(fieldValueFactorFunction("index").factor(2)), new FunctionScoreQueryBuilder.FilterFunctionBuilder(scriptFunction(script)) })).get().     assertNoFailures(resp).     firstHit = resp.getHits().getAt(0).     assertThat(firstHit.getScore(), greaterThan(1f)).     // Test for accessing _score.longValue()     script = new Script(ScriptType.INLINE, NAME, "log(doc['index'].value + (factor * _score.longValue()))", params).     resp = client().prepareSearch("test").setQuery(functionScoreQuery(matchQuery("body", "foo"), new FunctionScoreQueryBuilder.FilterFunctionBuilder[] { new FunctionScoreQueryBuilder.FilterFunctionBuilder(fieldValueFactorFunction("index").factor(2)), new FunctionScoreQueryBuilder.FilterFunctionBuilder(scriptFunction(script)) })).get().     assertNoFailures(resp).     firstHit = resp.getHits().getAt(0).     assertThat(firstHit.getScore(), greaterThan(1f)).     // Test for accessing _score.floatValue()     script = new Script(ScriptType.INLINE, NAME, "log(doc['index'].value + (factor * _score.floatValue()))", params).     resp = client().prepareSearch("test").setQuery(functionScoreQuery(matchQuery("body", "foo"), new FunctionScoreQueryBuilder.FilterFunctionBuilder[] { new FunctionScoreQueryBuilder.FilterFunctionBuilder(fieldValueFactorFunction("index").factor(2)), new FunctionScoreQueryBuilder.FilterFunctionBuilder(scriptFunction(script)) })).get().     assertNoFailures(resp).     firstHit = resp.getHits().getAt(0).     assertThat(firstHit.getScore(), greaterThan(1f)).     // Test for accessing _score.doubleValue()     script = new Script(ScriptType.INLINE, NAME, "log(doc['index'].value + (factor * _score.doubleValue()))", params).     resp = client().prepareSearch("test").setQuery(functionScoreQuery(matchQuery("body", "foo"), new FunctionScoreQueryBuilder.FilterFunctionBuilder[] { new FunctionScoreQueryBuilder.FilterFunctionBuilder(fieldValueFactorFunction("index").factor(2)), new FunctionScoreQueryBuilder.FilterFunctionBuilder(scriptFunction(script)) })).get().     assertNoFailures(resp).     firstHit = resp.getHits().getAt(0).     assertThat(firstHit.getScore(), greaterThan(1f)). }
false;public;0;18;;public void testSeedReportedInExplain() throws Exception {     createIndex("test").     ensureGreen().     index("test", "type", "1", jsonBuilder().startObject().endObject()).     flush().     refresh().     int seed = 12345678.     SearchResponse resp = client().prepareSearch("test").setQuery(functionScoreQuery(matchAllQuery(), randomFunction().seed(seed).setField(SeqNoFieldMapper.NAME))).setExplain(true).get().     assertNoFailures(resp).     assertEquals(1, resp.getHits().getTotalHits().value).     SearchHit firstHit = resp.getHits().getAt(0).     assertThat(firstHit.getExplanation().toString(), containsString("" + seed)). }
false;public;0;16;;public void testNoDocs() throws Exception {     createIndex("test").     ensureGreen().     SearchResponse resp = client().prepareSearch("test").setQuery(functionScoreQuery(matchAllQuery(), randomFunction().seed(1234).setField(SeqNoFieldMapper.NAME))).get().     assertNoFailures(resp).     assertEquals(0, resp.getHits().getTotalHits().value).     resp = client().prepareSearch("test").setQuery(functionScoreQuery(matchAllQuery(), randomFunction())).get().     assertNoFailures(resp).     assertEquals(0, resp.getHits().getTotalHits().value). }
false;public;0;24;;public void testScoreRange() throws Exception {     // all random scores should be in range [0.0, 1.0]     createIndex("test").     ensureGreen().     int docCount = randomIntBetween(100, 200).     for (int i = 0. i < docCount. i++) {         String id = randomRealisticUnicodeOfCodepointLengthBetween(1, 50).         index("test", "type", id, jsonBuilder().startObject().endObject()).     }     flush().     refresh().     int iters = scaledRandomIntBetween(10, 20).     for (int i = 0. i < iters. ++i) {         SearchResponse searchResponse = client().prepareSearch().setQuery(functionScoreQuery(matchAllQuery(), randomFunction())).setSize(docCount).get().         assertNoFailures(searchResponse).         for (SearchHit hit : searchResponse.getHits().getHits()) {             assertThat(hit.getScore(), allOf(greaterThanOrEqualTo(0.0f), lessThanOrEqualTo(1.0f))).         }     } }
false;public;0;25;;public void testSeeds() throws Exception {     createIndex("test").     ensureGreen().     final int docCount = randomIntBetween(100, 200).     for (int i = 0. i < docCount. i++) {         index("test", "type", "" + i, jsonBuilder().startObject().endObject()).     }     flushAndRefresh().     assertNoFailures(client().prepareSearch().setSize(// get all docs otherwise we are prone to tie-breaking     docCount).setQuery(functionScoreQuery(matchAllQuery(), randomFunction().seed(randomInt()).setField(SeqNoFieldMapper.NAME))).get()).     assertNoFailures(client().prepareSearch().setSize(// get all docs otherwise we are prone to tie-breaking     docCount).setQuery(functionScoreQuery(matchAllQuery(), randomFunction().seed(randomLong()).setField(SeqNoFieldMapper.NAME))).get()).     assertNoFailures(client().prepareSearch().setSize(// get all docs otherwise we are prone to tie-breaking     docCount).setQuery(functionScoreQuery(matchAllQuery(), randomFunction().seed(randomRealisticUnicodeOfLengthBetween(10, 20)).setField(SeqNoFieldMapper.NAME))).get()). }
false;public;0;65;;public void checkDistribution() throws Exception {     int count = 10000.     assertAcked(prepareCreate("test")).     ensureGreen().     for (int i = 0. i < count. i++) {         index("test", "type", "" + i, jsonBuilder().startObject().endObject()).     }     flush().     refresh().     int[] matrix = new int[count].     for (int i = 0. i < count. i++) {         SearchResponse searchResponse = client().prepareSearch().setQuery(functionScoreQuery(matchAllQuery(), new RandomScoreFunctionBuilder())).get().         matrix[Integer.valueOf(searchResponse.getHits().getAt(0).getId())]++.     }     int filled = 0.     int maxRepeat = 0.     int sumRepeat = 0.     for (int i = 0. i < matrix.length. i++) {         int value = matrix[i].         sumRepeat += value.         maxRepeat = Math.max(maxRepeat, value).         if (value > 0) {             filled++.         }     }     logger.info("max repeat: {}", maxRepeat).     logger.info("avg repeat: {}", sumRepeat / (double) filled).     logger.info("distribution: {}", filled / (double) count).     int percentile50 = filled / 2.     int percentile25 = (filled / 4).     int percentile75 = percentile50 + percentile25.     int sum = 0.     for (int i = 0. i < matrix.length. i++) {         if (matrix[i] == 0) {             continue.         }         sum += i * matrix[i].         if (percentile50 == 0) {             logger.info("median: {}", i).         } else if (percentile25 == 0) {             logger.info("percentile_25: {}", i).         } else if (percentile75 == 0) {             logger.info("percentile_75: {}", i).         }         percentile50--.         percentile25--.         percentile75--.     }     logger.info("mean: {}", sum / (double) count). }
