# id;timestamp;commentText;codeText;commentWords;codeWords
VersionsTests -> public void testCacheFilterReader() throws Exception;1524684173;Test that version map cache behaves properly with a filtered reader;public void testCacheFilterReader() throws Exception {_        int size = VersionsAndSeqNoResolver.lookupStates.size()___        Directory dir = newDirectory()__        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Lucene.STANDARD_ANALYZER))__        Document doc = new Document()__        doc.add(new Field(IdFieldMapper.NAME, "6", IdFieldMapper.Defaults.FIELD_TYPE))__        doc.add(new NumericDocValuesField(VersionFieldMapper.NAME, 87))__        writer.addDocument(doc)__        DirectoryReader reader = DirectoryReader.open(writer)__        assertEquals(87, loadVersion(reader, new Term(IdFieldMapper.NAME, "6")))__        assertEquals(size+1, VersionsAndSeqNoResolver.lookupStates.size())__        _        DirectoryReader wrapped = ElasticsearchDirectoryReader.wrap(reader, new ShardId("bogus", "_na_", 5))__        assertEquals(87, loadVersion(wrapped, new Term(IdFieldMapper.NAME, "6")))__        _        assertEquals(size+1, VersionsAndSeqNoResolver.lookupStates.size())___        reader.close()__        writer.close()__        _        assertEquals(size, VersionsAndSeqNoResolver.lookupStates.size())__        dir.close()__    };test,that,version,map,cache,behaves,properly,with,a,filtered,reader;public,void,test,cache,filter,reader,throws,exception,int,size,versions,and,seq,no,resolver,lookup,states,size,directory,dir,new,directory,index,writer,writer,new,index,writer,dir,new,index,writer,config,lucene,document,doc,new,document,doc,add,new,field,id,field,mapper,name,6,id,field,mapper,defaults,doc,add,new,numeric,doc,values,field,version,field,mapper,name,87,writer,add,document,doc,directory,reader,reader,directory,reader,open,writer,assert,equals,87,load,version,reader,new,term,id,field,mapper,name,6,assert,equals,size,1,versions,and,seq,no,resolver,lookup,states,size,directory,reader,wrapped,elasticsearch,directory,reader,wrap,reader,new,shard,id,bogus,5,assert,equals,87,load,version,wrapped,new,term,id,field,mapper,name,6,assert,equals,size,1,versions,and,seq,no,resolver,lookup,states,size,reader,close,writer,close,assert,equals,size,versions,and,seq,no,resolver,lookup,states,size,dir,close
VersionsTests -> public void testCacheFilterReader() throws Exception;1543942400;Test that version map cache behaves properly with a filtered reader;public void testCacheFilterReader() throws Exception {_        int size = VersionsAndSeqNoResolver.lookupStates.size()___        Directory dir = newDirectory()__        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Lucene.STANDARD_ANALYZER))__        Document doc = new Document()__        doc.add(new Field(IdFieldMapper.NAME, "6", IdFieldMapper.Defaults.FIELD_TYPE))__        doc.add(new NumericDocValuesField(VersionFieldMapper.NAME, 87))__        writer.addDocument(doc)__        DirectoryReader reader = DirectoryReader.open(writer)__        assertEquals(87, loadVersion(reader, new Term(IdFieldMapper.NAME, "6")))__        assertEquals(size+1, VersionsAndSeqNoResolver.lookupStates.size())__        _        DirectoryReader wrapped = ElasticsearchDirectoryReader.wrap(reader, new ShardId("bogus", "_na_", 5))__        assertEquals(87, loadVersion(wrapped, new Term(IdFieldMapper.NAME, "6")))__        _        assertEquals(size+1, VersionsAndSeqNoResolver.lookupStates.size())___        reader.close()__        writer.close()__        _        assertEquals(size, VersionsAndSeqNoResolver.lookupStates.size())__        dir.close()__    };test,that,version,map,cache,behaves,properly,with,a,filtered,reader;public,void,test,cache,filter,reader,throws,exception,int,size,versions,and,seq,no,resolver,lookup,states,size,directory,dir,new,directory,index,writer,writer,new,index,writer,dir,new,index,writer,config,lucene,document,doc,new,document,doc,add,new,field,id,field,mapper,name,6,id,field,mapper,defaults,doc,add,new,numeric,doc,values,field,version,field,mapper,name,87,writer,add,document,doc,directory,reader,reader,directory,reader,open,writer,assert,equals,87,load,version,reader,new,term,id,field,mapper,name,6,assert,equals,size,1,versions,and,seq,no,resolver,lookup,states,size,directory,reader,wrapped,elasticsearch,directory,reader,wrap,reader,new,shard,id,bogus,5,assert,equals,87,load,version,wrapped,new,term,id,field,mapper,name,6,assert,equals,size,1,versions,and,seq,no,resolver,lookup,states,size,reader,close,writer,close,assert,equals,size,versions,and,seq,no,resolver,lookup,states,size,dir,close
VersionsTests -> public void testCacheFilterReader() throws Exception;1544684920;Test that version map cache behaves properly with a filtered reader;public void testCacheFilterReader() throws Exception {_        int size = VersionsAndSeqNoResolver.lookupStates.size()___        Directory dir = newDirectory()__        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Lucene.STANDARD_ANALYZER))__        Document doc = new Document()__        doc.add(new Field(IdFieldMapper.NAME, "6", IdFieldMapper.Defaults.FIELD_TYPE))__        doc.add(new NumericDocValuesField(VersionFieldMapper.NAME, 87))__        writer.addDocument(doc)__        DirectoryReader reader = DirectoryReader.open(writer)__        assertEquals(87, loadDocIdAndVersion(reader, new Term(IdFieldMapper.NAME, "6"), randomBoolean()).version)__        assertEquals(size+1, VersionsAndSeqNoResolver.lookupStates.size())__        _        DirectoryReader wrapped = ElasticsearchDirectoryReader.wrap(reader, new ShardId("bogus", "_na_", 5))__        assertEquals(87, loadDocIdAndVersion(wrapped, new Term(IdFieldMapper.NAME, "6"), randomBoolean()).version)__        _        assertEquals(size+1, VersionsAndSeqNoResolver.lookupStates.size())___        reader.close()__        writer.close()__        _        assertEquals(size, VersionsAndSeqNoResolver.lookupStates.size())__        dir.close()__    };test,that,version,map,cache,behaves,properly,with,a,filtered,reader;public,void,test,cache,filter,reader,throws,exception,int,size,versions,and,seq,no,resolver,lookup,states,size,directory,dir,new,directory,index,writer,writer,new,index,writer,dir,new,index,writer,config,lucene,document,doc,new,document,doc,add,new,field,id,field,mapper,name,6,id,field,mapper,defaults,doc,add,new,numeric,doc,values,field,version,field,mapper,name,87,writer,add,document,doc,directory,reader,reader,directory,reader,open,writer,assert,equals,87,load,doc,id,and,version,reader,new,term,id,field,mapper,name,6,random,boolean,version,assert,equals,size,1,versions,and,seq,no,resolver,lookup,states,size,directory,reader,wrapped,elasticsearch,directory,reader,wrap,reader,new,shard,id,bogus,5,assert,equals,87,load,doc,id,and,version,wrapped,new,term,id,field,mapper,name,6,random,boolean,version,assert,equals,size,1,versions,and,seq,no,resolver,lookup,states,size,reader,close,writer,close,assert,equals,size,versions,and,seq,no,resolver,lookup,states,size,dir,close
VersionsTests -> public void testCache() throws Exception;1524684173;Test that version map cache works, is evicted on close, etc;public void testCache() throws Exception {_        int size = VersionsAndSeqNoResolver.lookupStates.size()___        Directory dir = newDirectory()__        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Lucene.STANDARD_ANALYZER))__        Document doc = new Document()__        doc.add(new Field(IdFieldMapper.NAME, "6", IdFieldMapper.Defaults.FIELD_TYPE))__        doc.add(new NumericDocValuesField(VersionFieldMapper.NAME, 87))__        writer.addDocument(doc)__        DirectoryReader reader = DirectoryReader.open(writer)__        _        assertEquals(87, loadVersion(reader, new Term(IdFieldMapper.NAME, "6")))__        assertEquals(size+1, VersionsAndSeqNoResolver.lookupStates.size())__        _        assertEquals(87, loadVersion(reader, new Term(IdFieldMapper.NAME, "6")))__        assertEquals(size+1, VersionsAndSeqNoResolver.lookupStates.size())___        reader.close()__        writer.close()__        _        assertEquals(size, VersionsAndSeqNoResolver.lookupStates.size())__        dir.close()__    };test,that,version,map,cache,works,is,evicted,on,close,etc;public,void,test,cache,throws,exception,int,size,versions,and,seq,no,resolver,lookup,states,size,directory,dir,new,directory,index,writer,writer,new,index,writer,dir,new,index,writer,config,lucene,document,doc,new,document,doc,add,new,field,id,field,mapper,name,6,id,field,mapper,defaults,doc,add,new,numeric,doc,values,field,version,field,mapper,name,87,writer,add,document,doc,directory,reader,reader,directory,reader,open,writer,assert,equals,87,load,version,reader,new,term,id,field,mapper,name,6,assert,equals,size,1,versions,and,seq,no,resolver,lookup,states,size,assert,equals,87,load,version,reader,new,term,id,field,mapper,name,6,assert,equals,size,1,versions,and,seq,no,resolver,lookup,states,size,reader,close,writer,close,assert,equals,size,versions,and,seq,no,resolver,lookup,states,size,dir,close
VersionsTests -> public void testCache() throws Exception;1543942400;Test that version map cache works, is evicted on close, etc;public void testCache() throws Exception {_        int size = VersionsAndSeqNoResolver.lookupStates.size()___        Directory dir = newDirectory()__        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Lucene.STANDARD_ANALYZER))__        Document doc = new Document()__        doc.add(new Field(IdFieldMapper.NAME, "6", IdFieldMapper.Defaults.FIELD_TYPE))__        doc.add(new NumericDocValuesField(VersionFieldMapper.NAME, 87))__        writer.addDocument(doc)__        DirectoryReader reader = DirectoryReader.open(writer)__        _        assertEquals(87, loadVersion(reader, new Term(IdFieldMapper.NAME, "6")))__        assertEquals(size+1, VersionsAndSeqNoResolver.lookupStates.size())__        _        assertEquals(87, loadVersion(reader, new Term(IdFieldMapper.NAME, "6")))__        assertEquals(size+1, VersionsAndSeqNoResolver.lookupStates.size())___        reader.close()__        writer.close()__        _        assertEquals(size, VersionsAndSeqNoResolver.lookupStates.size())__        dir.close()__    };test,that,version,map,cache,works,is,evicted,on,close,etc;public,void,test,cache,throws,exception,int,size,versions,and,seq,no,resolver,lookup,states,size,directory,dir,new,directory,index,writer,writer,new,index,writer,dir,new,index,writer,config,lucene,document,doc,new,document,doc,add,new,field,id,field,mapper,name,6,id,field,mapper,defaults,doc,add,new,numeric,doc,values,field,version,field,mapper,name,87,writer,add,document,doc,directory,reader,reader,directory,reader,open,writer,assert,equals,87,load,version,reader,new,term,id,field,mapper,name,6,assert,equals,size,1,versions,and,seq,no,resolver,lookup,states,size,assert,equals,87,load,version,reader,new,term,id,field,mapper,name,6,assert,equals,size,1,versions,and,seq,no,resolver,lookup,states,size,reader,close,writer,close,assert,equals,size,versions,and,seq,no,resolver,lookup,states,size,dir,close
VersionsTests -> public void testCache() throws Exception;1544684920;Test that version map cache works, is evicted on close, etc;public void testCache() throws Exception {_        int size = VersionsAndSeqNoResolver.lookupStates.size()___        Directory dir = newDirectory()__        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Lucene.STANDARD_ANALYZER))__        Document doc = new Document()__        doc.add(new Field(IdFieldMapper.NAME, "6", IdFieldMapper.Defaults.FIELD_TYPE))__        doc.add(new NumericDocValuesField(VersionFieldMapper.NAME, 87))__        writer.addDocument(doc)__        DirectoryReader reader = DirectoryReader.open(writer)__        _        assertEquals(87, loadDocIdAndVersion(reader, new Term(IdFieldMapper.NAME, "6"), randomBoolean()).version)__        assertEquals(size+1, VersionsAndSeqNoResolver.lookupStates.size())__        _        assertEquals(87, loadDocIdAndVersion(reader, new Term(IdFieldMapper.NAME, "6"), randomBoolean()).version)__        assertEquals(size+1, VersionsAndSeqNoResolver.lookupStates.size())___        reader.close()__        writer.close()__        _        assertEquals(size, VersionsAndSeqNoResolver.lookupStates.size())__        dir.close()__    };test,that,version,map,cache,works,is,evicted,on,close,etc;public,void,test,cache,throws,exception,int,size,versions,and,seq,no,resolver,lookup,states,size,directory,dir,new,directory,index,writer,writer,new,index,writer,dir,new,index,writer,config,lucene,document,doc,new,document,doc,add,new,field,id,field,mapper,name,6,id,field,mapper,defaults,doc,add,new,numeric,doc,values,field,version,field,mapper,name,87,writer,add,document,doc,directory,reader,reader,directory,reader,open,writer,assert,equals,87,load,doc,id,and,version,reader,new,term,id,field,mapper,name,6,random,boolean,version,assert,equals,size,1,versions,and,seq,no,resolver,lookup,states,size,assert,equals,87,load,doc,id,and,version,reader,new,term,id,field,mapper,name,6,random,boolean,version,assert,equals,size,1,versions,and,seq,no,resolver,lookup,states,size,reader,close,writer,close,assert,equals,size,versions,and,seq,no,resolver,lookup,states,size,dir,close
