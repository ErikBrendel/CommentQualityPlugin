commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;9;;@Override protected Custom createTestInstance() {     int numberOfSnapshots = randomInt(10).     List<Entry> entries = new ArrayList<>().     for (int i = 0. i < numberOfSnapshots. i++) {         entries.add(randomSnapshot()).     }     return new SnapshotsInProgress(entries). }
false;private;0;24;;private Entry randomSnapshot() {     Snapshot snapshot = new Snapshot(randomAlphaOfLength(10), new SnapshotId(randomAlphaOfLength(10), randomAlphaOfLength(10))).     boolean includeGlobalState = randomBoolean().     boolean partial = randomBoolean().     State state = randomFrom(State.values()).     int numberOfIndices = randomIntBetween(0, 10).     List<IndexId> indices = new ArrayList<>().     for (int i = 0. i < numberOfIndices. i++) {         indices.add(new IndexId(randomAlphaOfLength(10), randomAlphaOfLength(10))).     }     long startTime = randomLong().     long repositoryStateId = randomLong().     ImmutableOpenMap.Builder<ShardId, SnapshotsInProgress.ShardSnapshotStatus> builder = ImmutableOpenMap.builder().     int shardsCount = randomIntBetween(0, 10).     for (int j = 0. j < shardsCount. j++) {         ShardId shardId = new ShardId(new Index(randomAlphaOfLength(10), randomAlphaOfLength(10)), randomIntBetween(0, 10)).         String nodeId = randomAlphaOfLength(10).         State shardState = randomFrom(State.values()).         builder.put(shardId, new SnapshotsInProgress.ShardSnapshotStatus(nodeId, shardState, shardState.failed() ? randomAlphaOfLength(10) : null)).     }     ImmutableOpenMap<ShardId, SnapshotsInProgress.ShardSnapshotStatus> shards = builder.build().     return new Entry(snapshot, includeGlobalState, partial, state, indices, startTime, repositoryStateId, shards). }
false;protected;0;4;;@Override protected Writeable.Reader<Custom> instanceReader() {     return SnapshotsInProgress::new. }
false;protected;1;26;;@Override protected Custom makeTestChanges(Custom testInstance) {     SnapshotsInProgress snapshots = (SnapshotsInProgress) testInstance.     List<Entry> entries = new ArrayList<>(snapshots.entries()).     if (randomBoolean() && entries.size() > 1) {         // remove some elements         int leaveElements = randomIntBetween(0, entries.size() - 1).         entries = randomSubsetOf(leaveElements, entries.toArray(new Entry[leaveElements])).     }     if (randomBoolean()) {         // add some elements         int addElements = randomInt(10).         for (int i = 0. i < addElements. i++) {             entries.add(randomSnapshot()).         }     }     if (randomBoolean()) {         // modify some elements         for (int i = 0. i < entries.size(). i++) {             if (randomBoolean()) {                 entries.set(i, new Entry(entries.get(i), randomFrom(State.values()), entries.get(i).shards())).             }         }     }     return new SnapshotsInProgress(entries). }
false;protected;0;4;;@Override protected Writeable.Reader<Diff<Custom>> diffReader() {     return SnapshotsInProgress::readDiffFrom. }
false;protected;0;4;;@Override protected NamedWriteableRegistry getNamedWriteableRegistry() {     return new NamedWriteableRegistry(ClusterModule.getNamedWriteables()). }
false;protected;1;11;;@Override protected Custom mutateInstance(Custom instance) {     List<Entry> entries = new ArrayList<>(((SnapshotsInProgress) instance).entries()).     boolean addEntry = entries.isEmpty() ? true : randomBoolean().     if (addEntry) {         entries.add(randomSnapshot()).     } else {         entries.remove(randomIntBetween(0, entries.size() - 1)).     }     return new SnapshotsInProgress(entries). }
