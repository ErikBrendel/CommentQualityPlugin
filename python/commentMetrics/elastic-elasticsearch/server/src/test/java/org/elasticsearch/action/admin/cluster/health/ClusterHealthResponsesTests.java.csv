commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;public void testIsTimeout() {     ClusterHealthResponse res = new ClusterHealthResponse().     for (int i = 0. i < 5. i++) {         res.setTimedOut(randomBoolean()).         if (res.isTimedOut()) {             assertEquals(RestStatus.REQUEST_TIMEOUT, res.status()).         } else {             assertEquals(RestStatus.OK, res.status()).         }     } }
false;public;0;16;;public void testClusterHealth() throws IOException {     ClusterState clusterState = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).build().     int pendingTasks = randomIntBetween(0, 200).     int inFlight = randomIntBetween(0, 200).     int delayedUnassigned = randomIntBetween(0, 200).     TimeValue pendingTaskInQueueTime = TimeValue.timeValueMillis(randomIntBetween(1000, 100000)).     ClusterHealthResponse clusterHealth = new ClusterHealthResponse("bla", new String[] { MetaData.ALL }, clusterState, pendingTasks, inFlight, delayedUnassigned, pendingTaskInQueueTime).     clusterHealth = maybeSerialize(clusterHealth).     assertClusterHealth(clusterHealth).     assertThat(clusterHealth.getNumberOfPendingTasks(), Matchers.equalTo(pendingTasks)).     assertThat(clusterHealth.getNumberOfInFlightFetch(), Matchers.equalTo(inFlight)).     assertThat(clusterHealth.getDelayedUnassignedShards(), Matchers.equalTo(delayedUnassigned)).     assertThat(clusterHealth.getTaskMaxWaitingTime().millis(), is(pendingTaskInQueueTime.millis())).     assertThat(clusterHealth.getActiveShardsPercent(), is(allOf(greaterThanOrEqualTo(0.0), lessThanOrEqualTo(100.0)))). }
false;private;1;11;;private void assertClusterHealth(ClusterHealthResponse clusterHealth) {     ClusterStateHealth clusterStateHealth = clusterHealth.getClusterStateHealth().     assertThat(clusterHealth.getActiveShards(), Matchers.equalTo(clusterStateHealth.getActiveShards())).     assertThat(clusterHealth.getRelocatingShards(), Matchers.equalTo(clusterStateHealth.getRelocatingShards())).     assertThat(clusterHealth.getActivePrimaryShards(), Matchers.equalTo(clusterStateHealth.getActivePrimaryShards())).     assertThat(clusterHealth.getInitializingShards(), Matchers.equalTo(clusterStateHealth.getInitializingShards())).     assertThat(clusterHealth.getUnassignedShards(), Matchers.equalTo(clusterStateHealth.getUnassignedShards())).     assertThat(clusterHealth.getNumberOfNodes(), Matchers.equalTo(clusterStateHealth.getNumberOfNodes())).     assertThat(clusterHealth.getNumberOfDataNodes(), Matchers.equalTo(clusterStateHealth.getNumberOfDataNodes())). }
false;;1;9;;ClusterHealthResponse maybeSerialize(ClusterHealthResponse clusterHealth) throws IOException {     if (randomBoolean()) {         BytesStreamOutput out = new BytesStreamOutput().         clusterHealth.writeTo(out).         StreamInput in = out.bytes().streamInput().         clusterHealth = ClusterHealthResponse.readResponseFrom(in).     }     return clusterHealth. }
false;protected;1;4;;@Override protected ClusterHealthResponse doParseInstance(XContentParser parser) {     return ClusterHealthResponse.fromXContent(parser). }
false;protected;0;4;;@Override protected ClusterHealthResponse createBlankInstance() {     return new ClusterHealthResponse(). }
false;protected;0;17;;@Override protected ClusterHealthResponse createTestInstance() {     int indicesSize = randomInt(20).     Map<String, ClusterIndexHealth> indices = new HashMap<>(indicesSize).     if ("indices".equals(level) || "shards".equals(level)) {         for (int i = 0. i < indicesSize. i++) {             String indexName = randomAlphaOfLengthBetween(1, 5) + i.             indices.put(indexName, ClusterIndexHealthTests.randomIndexHealth(indexName, level)).         }     }     ClusterStateHealth stateHealth = new ClusterStateHealth(randomInt(100), randomInt(100), randomInt(100), randomInt(100), randomInt(100), randomInt(100), randomInt(100), randomDoubleBetween(0d, 100d, true), randomFrom(ClusterHealthStatus.values()), indices).     return new ClusterHealthResponse(randomAlphaOfLengthBetween(1, 10), randomInt(100), randomInt(100), randomInt(100), TimeValue.timeValueMillis(randomInt(10000)), randomBoolean(), stateHealth). }
false;protected;0;4;;@Override protected ToXContent.Params getToXContentParams() {     return new ToXContent.MapParams(Collections.singletonMap("level", level.name().toLowerCase(Locale.ROOT))). }
false;protected;0;4;;@Override protected boolean supportsUnknownFields() {     return true. }
false;protected;0;4;;@Override protected Predicate<String> getRandomFieldsExcludeFilter() {     return field -> "indices".equals(field) || SHARDS_IN_XCONTENT.matcher(field).find(). }
false;protected;1;50;;@Override protected ClusterHealthResponse mutateInstance(ClusterHealthResponse instance) {     String mutate = randomFrom("clusterName", "numberOfPendingTasks", "numberOfInFlightFetch", "delayedUnassignedShards", "taskMaxWaitingTime", "timedOut", "clusterStateHealth").     switch(mutate) {         case "clusterName":             return new ClusterHealthResponse(instance.getClusterName() + randomAlphaOfLengthBetween(2, 5), instance.getNumberOfPendingTasks(), instance.getNumberOfInFlightFetch(), instance.getDelayedUnassignedShards(), instance.getTaskMaxWaitingTime(), instance.isTimedOut(), instance.getClusterStateHealth()).         case "numberOfPendingTasks":             return new ClusterHealthResponse(instance.getClusterName(), instance.getNumberOfPendingTasks() + between(1, 10), instance.getNumberOfInFlightFetch(), instance.getDelayedUnassignedShards(), instance.getTaskMaxWaitingTime(), instance.isTimedOut(), instance.getClusterStateHealth()).         case "numberOfInFlightFetch":             return new ClusterHealthResponse(instance.getClusterName(), instance.getNumberOfPendingTasks(), instance.getNumberOfInFlightFetch() + between(1, 10), instance.getDelayedUnassignedShards(), instance.getTaskMaxWaitingTime(), instance.isTimedOut(), instance.getClusterStateHealth()).         case "delayedUnassignedShards":             return new ClusterHealthResponse(instance.getClusterName(), instance.getNumberOfPendingTasks(), instance.getNumberOfInFlightFetch(), instance.getDelayedUnassignedShards() + between(1, 10), instance.getTaskMaxWaitingTime(), instance.isTimedOut(), instance.getClusterStateHealth()).         case "taskMaxWaitingTime":             return new ClusterHealthResponse(instance.getClusterName(), instance.getNumberOfPendingTasks(), instance.getNumberOfInFlightFetch(), instance.getDelayedUnassignedShards(), new TimeValue(instance.getTaskMaxWaitingTime().millis() + between(1, 10)), instance.isTimedOut(), instance.getClusterStateHealth()).         case "timedOut":             return new ClusterHealthResponse(instance.getClusterName(), instance.getNumberOfPendingTasks(), instance.getNumberOfInFlightFetch(), instance.getDelayedUnassignedShards(), instance.getTaskMaxWaitingTime(), instance.isTimedOut() == false, instance.getClusterStateHealth()).         case "clusterStateHealth":             ClusterStateHealth state = instance.getClusterStateHealth().             ClusterStateHealth newState = new ClusterStateHealth(state.getActivePrimaryShards() + between(1, 10), state.getActiveShards(), state.getRelocatingShards(), state.getInitializingShards(), state.getUnassignedShards(), state.getNumberOfNodes(), state.getNumberOfDataNodes(), state.getActiveShardsPercent(), state.getStatus(), state.getIndices()).             return new ClusterHealthResponse(instance.getClusterName(), instance.getNumberOfPendingTasks(), instance.getNumberOfInFlightFetch(), instance.getDelayedUnassignedShards(), instance.getTaskMaxWaitingTime(), instance.isTimedOut(), newState).         default:             throw new UnsupportedOperationException().     } }
