commented;modifiers;parameterAmount;loc;comment;code
false;public;0;24;;public void testDifferentInnerObjectTokenFailure() throws Exception {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").endObject().endObject()).     DocumentMapper defaultMapper = createIndex("test").mapperService().documentMapperParser().parse("type", new CompressedXContent(mapping)).     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> {         defaultMapper.parse(new SourceToParse("test", "type", "1", new BytesArray(" {\n" + "      \"object\": {\n" + "        \"array\":[\n" + "        {\n" + "          \"object\": { \"value\": \"value\" }\n" + "        },\n" + "        {\n" + "          \"object\":\"value\"\n" + "        }\n" + "        ]\n" + "      },\n" + "      \"value\":\"value\"\n" + "    }"), XContentType.JSON)).     }).     assertTrue(e.getMessage(), e.getMessage().contains("different type")). }
false;public;0;6;;public void testEmptyArrayProperties() throws Exception {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startArray("properties").endArray().endObject().endObject()).     createIndex("test").mapperService().documentMapperParser().parse("type", new CompressedXContent(mapping)). }
false;public;0;16;;public void testEmptyFieldsArrayMultiFields() throws Exception {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("tweet").startObject("properties").startObject("name").field("type", "text").startArray("fields").endArray().endObject().endObject().endObject().endObject()).     createIndex("test").mapperService().documentMapperParser().parse("tweet", new CompressedXContent(mapping)). }
false;public;0;23;;public void testFieldsArrayMultiFieldsShouldThrowException() throws Exception {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("tweet").startObject("properties").startObject("name").field("type", "text").startArray("fields").startObject().field("test", "string").endObject().startObject().field("test2", "string").endObject().endArray().endObject().endObject().endObject().endObject()).     try {         createIndex("test").mapperService().documentMapperParser().parse("tweet", new CompressedXContent(mapping)).         fail("Expected MapperParsingException").     } catch (MapperParsingException e) {         assertThat(e.getMessage(), containsString("expected map for property [fields]")).         assertThat(e.getMessage(), containsString("but got a class java.util.ArrayList")).     } }
false;public;0;12;;public void testEmptyFieldsArray() throws Exception {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("tweet").startObject("properties").startArray("fields").endArray().endObject().endObject().endObject()).     createIndex("test").mapperService().documentMapperParser().parse("tweet", new CompressedXContent(mapping)). }
false;public;0;19;;public void testFieldsWithFilledArrayShouldThrowException() throws Exception {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("tweet").startObject("properties").startArray("fields").startObject().field("test", "string").endObject().startObject().field("test2", "string").endObject().endArray().endObject().endObject().endObject()).     try {         createIndex("test").mapperService().documentMapperParser().parse("tweet", new CompressedXContent(mapping)).         fail("Expected MapperParsingException").     } catch (MapperParsingException e) {         assertThat(e.getMessage(), containsString("Expected map for property [fields]")).     } }
false;public;0;18;;public void testFieldPropertiesArray() throws Exception {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("tweet").startObject("properties").startObject("name").field("type", "text").startObject("fields").startObject("raw").field("type", "keyword").endObject().endObject().endObject().endObject().endObject().endObject()).     createIndex("test").mapperService().documentMapperParser().parse("tweet", new CompressedXContent(mapping)). }
false;public;0;19;;public void testMerge() throws IOException {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("foo").field("type", "keyword").endObject().endObject().endObject().endObject()).     MapperService mapperService = createIndex("test").mapperService().     DocumentMapper mapper = mapperService.merge("type", new CompressedXContent(mapping), MergeReason.MAPPING_UPDATE).     assertNull(mapper.root().dynamic()).     String update = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").field("dynamic", "strict").endObject().endObject()).     mapper = mapperService.merge("type", new CompressedXContent(update), MergeReason.MAPPING_UPDATE).     assertEquals(Dynamic.STRICT, mapper.root().dynamic()). }
false;public;0;17;;public void testEmptyName() throws Exception {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("").startObject("properties").startObject("name").field("type", "text").endObject().endObject().endObject().endObject()).     // Empty name not allowed in index created after 5.0     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> {         createIndex("test").mapperService().documentMapperParser().parse("", new CompressedXContent(mapping)).     }).     assertThat(e.getMessage(), containsString("name cannot be empty string")). }
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> getPlugins() {     return pluginList(InternalSettingsPlugin.class). }
