commented;modifiers;parameterAmount;loc;comment;code
false;public;0;61;;public void testJoinDeduplication() {     DeterministicTaskQueue deterministicTaskQueue = new DeterministicTaskQueue(Settings.builder().put(NODE_NAME_SETTING.getKey(), "node0").build(), random()).     CapturingTransport capturingTransport = new CapturingTransport().     DiscoveryNode localNode = new DiscoveryNode("node0", buildNewFakeTransportAddress(), Version.CURRENT).     TransportService transportService = capturingTransport.createTransportService(Settings.EMPTY, deterministicTaskQueue.getThreadPool(), TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> localNode, null, Collections.emptySet()).     JoinHelper joinHelper = new JoinHelper(Settings.EMPTY, null, null, transportService, () -> 0L, () -> null, (joinRequest, joinCallback) -> {         throw new AssertionError().     }, startJoinRequest -> {         throw new AssertionError().     }, Collections.emptyList()).     transportService.start().     DiscoveryNode node1 = new DiscoveryNode("node1", buildNewFakeTransportAddress(), Version.CURRENT).     DiscoveryNode node2 = new DiscoveryNode("node2", buildNewFakeTransportAddress(), Version.CURRENT).     // check that sending a join to node1 works     Optional<Join> optionalJoin1 = randomBoolean() ? Optional.empty() : Optional.of(new Join(localNode, node1, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong())).     joinHelper.sendJoinRequest(node1, optionalJoin1).     CapturedRequest[] capturedRequests1 = capturingTransport.getCapturedRequestsAndClear().     assertThat(capturedRequests1.length, equalTo(1)).     CapturedRequest capturedRequest1 = capturedRequests1[0].     assertEquals(node1, capturedRequest1.node).     // check that sending a join to node2 works     Optional<Join> optionalJoin2 = randomBoolean() ? Optional.empty() : Optional.of(new Join(localNode, node2, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong())).     joinHelper.sendJoinRequest(node2, optionalJoin2).     CapturedRequest[] capturedRequests2 = capturingTransport.getCapturedRequestsAndClear().     assertThat(capturedRequests2.length, equalTo(1)).     CapturedRequest capturedRequest2 = capturedRequests2[0].     assertEquals(node2, capturedRequest2.node).     // check that sending another join to node1 is a noop as the previous join is still in progress     joinHelper.sendJoinRequest(node1, optionalJoin1).     assertThat(capturingTransport.getCapturedRequestsAndClear().length, equalTo(0)).     // complete the previous join to node1     if (randomBoolean()) {         capturingTransport.handleResponse(capturedRequest1.requestId, TransportResponse.Empty.INSTANCE).     } else {         capturingTransport.handleRemoteError(capturedRequest1.requestId, new CoordinationStateRejectedException("dummy")).     }     // check that sending another join to node1 now works again     joinHelper.sendJoinRequest(node1, optionalJoin1).     CapturedRequest[] capturedRequests1a = capturingTransport.getCapturedRequestsAndClear().     assertThat(capturedRequests1a.length, equalTo(1)).     CapturedRequest capturedRequest1a = capturedRequests1a[0].     assertEquals(node1, capturedRequest1a.node).     // check that sending another join to node2 works if the optionalJoin is different     Optional<Join> optionalJoin2a = optionalJoin2.isPresent() && randomBoolean() ? Optional.empty() : Optional.of(new Join(localNode, node2, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong())).     joinHelper.sendJoinRequest(node2, optionalJoin2a).     CapturedRequest[] capturedRequests2a = capturingTransport.getCapturedRequestsAndClear().     assertThat(capturedRequests2a.length, equalTo(1)).     CapturedRequest capturedRequest2a = capturedRequests2a[0].     assertEquals(node2, capturedRequest2a.node). }
