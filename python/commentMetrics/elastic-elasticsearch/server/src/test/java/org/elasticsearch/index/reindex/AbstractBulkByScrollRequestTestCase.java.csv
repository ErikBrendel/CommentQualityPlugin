commented;modifiers;parameterAmount;loc;comment;code
false;public;0;40;;public void testForSlice() {     R original = newRequest().     original.setAbortOnVersionConflict(randomBoolean()).     original.setRefresh(randomBoolean()).     original.setTimeout(parseTimeValue(randomPositiveTimeValue(), "timeout")).     original.setWaitForActiveShards(randomFrom(ActiveShardCount.ALL, ActiveShardCount.NONE, ActiveShardCount.ONE, ActiveShardCount.DEFAULT)).     original.setRetryBackoffInitialTime(parseTimeValue(randomPositiveTimeValue(), "retry_backoff_initial_time")).     original.setMaxRetries(between(0, 1000)).     original.setRequestsPerSecond(randomBoolean() ? Float.POSITIVE_INFINITY : randomValueOtherThanMany(r -> r < 0, ESTestCase::randomFloat)).     if (randomBoolean()) {         original.setSize(between(0, Integer.MAX_VALUE)).     }     // it's not important how many slices there are, we just need a number for forSlice     int actualSlices = between(2, 1000).     original.setSlices(randomBoolean() ? actualSlices : AbstractBulkByScrollRequest.AUTO_SLICES).     TaskId slicingTask = new TaskId(randomAlphaOfLength(5), randomLong()).     SearchRequest sliceRequest = new SearchRequest().     R forSliced = original.forSlice(slicingTask, sliceRequest, actualSlices).     assertEquals(original.isAbortOnVersionConflict(), forSliced.isAbortOnVersionConflict()).     assertEquals(original.isRefresh(), forSliced.isRefresh()).     assertEquals(original.getTimeout(), forSliced.getTimeout()).     assertEquals(original.getWaitForActiveShards(), forSliced.getWaitForActiveShards()).     assertEquals(original.getRetryBackoffInitialTime(), forSliced.getRetryBackoffInitialTime()).     assertEquals(original.getMaxRetries(), forSliced.getMaxRetries()).     assertEquals("only the parent task should store results", false, forSliced.getShouldStoreResult()).     assertEquals("slice requests always have a single worker", 1, forSliced.getSlices()).     assertEquals("requests_per_second is split between all workers", original.getRequestsPerSecond() / actualSlices, forSliced.getRequestsPerSecond(), Float.MIN_NORMAL).     assertEquals("size is split evenly between all workers", original.getSize() == AbstractBulkByScrollRequest.SIZE_ALL_MATCHES ? AbstractBulkByScrollRequest.SIZE_ALL_MATCHES : original.getSize() / actualSlices, forSliced.getSize()).     assertEquals(slicingTask, forSliced.getParentTask()).     extraForSliceAssertions(original, forSliced). }
false;protected,abstract;0;1;;protected abstract R newRequest().
false;protected,abstract;1;1;;protected abstract void extraRandomizationForSlice(R original).
false;protected,abstract;2;1;;protected abstract void extraForSliceAssertions(R original, R forSliced).
