commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected MultiPolygonBuilder createTestShapeBuilder() {     return createRandomShape(). }
false;protected;1;4;;@Override protected MultiPolygonBuilder createMutation(MultiPolygonBuilder original) throws IOException {     return mutate(original). }
false;static;1;18;;static MultiPolygonBuilder mutate(MultiPolygonBuilder original) throws IOException {     MultiPolygonBuilder mutation.     if (randomBoolean()) {         mutation = new MultiPolygonBuilder(original.orientation() == Orientation.LEFT ? Orientation.RIGHT : Orientation.LEFT).         for (PolygonBuilder pb : original.polygons()) {             mutation.polygon((PolygonBuilder) copyShape(pb)).         }     } else {         mutation = (MultiPolygonBuilder) copyShape(original).         if (mutation.polygons().size() > 0) {             int polyToChange = randomInt(mutation.polygons().size() - 1).             mutation.polygons().set(polyToChange, PolygonBuilderTests.mutatePolygonBuilder(mutation.polygons().get(polyToChange))).         } else {             mutation.polygon((PolygonBuilder) RandomShapeGenerator.createShape(random(), ShapeType.POLYGON)).         }     }     return mutation. }
false;static;0;9;;static MultiPolygonBuilder createRandomShape() {     MultiPolygonBuilder mpb = new MultiPolygonBuilder(randomFrom(Orientation.values())).     int polys = randomIntBetween(0, 10).     for (int i = 0. i < polys. i++) {         PolygonBuilder pgb = (PolygonBuilder) RandomShapeGenerator.createShape(random(), ShapeType.POLYGON).         mpb.polygon(pgb).     }     return mpb. }
