commented;modifiers;parameterAmount;loc;comment;code
false;public;0;57;;public void testEqualsAndHashcode() throws Exception {     Map<String, Object> sourceAndMetadata = RandomDocumentPicks.randomSource(random()).     int numFields = randomIntBetween(1, IngestDocument.MetaData.values().length).     for (int i = 0. i < numFields. i++) {         sourceAndMetadata.put(randomFrom(IngestDocument.MetaData.values()).getFieldName(), randomAlphaOfLengthBetween(5, 10)).     }     Map<String, Object> ingestMetadata = new HashMap<>().     numFields = randomIntBetween(1, 5).     for (int i = 0. i < numFields. i++) {         ingestMetadata.put(randomAlphaOfLengthBetween(5, 10), randomAlphaOfLengthBetween(5, 10)).     }     WriteableIngestDocument ingestDocument = new WriteableIngestDocument(new IngestDocument(sourceAndMetadata, ingestMetadata)).     boolean changed = false.     Map<String, Object> otherSourceAndMetadata.     if (randomBoolean()) {         otherSourceAndMetadata = RandomDocumentPicks.randomSource(random()).         changed = true.     } else {         otherSourceAndMetadata = new HashMap<>(sourceAndMetadata).     }     if (randomBoolean()) {         numFields = randomIntBetween(1, IngestDocument.MetaData.values().length).         for (int i = 0. i < numFields. i++) {             otherSourceAndMetadata.put(randomFrom(IngestDocument.MetaData.values()).getFieldName(), randomAlphaOfLengthBetween(5, 10)).         }         changed = true.     }     Map<String, Object> otherIngestMetadata.     if (randomBoolean()) {         otherIngestMetadata = new HashMap<>().         numFields = randomIntBetween(1, 5).         for (int i = 0. i < numFields. i++) {             otherIngestMetadata.put(randomAlphaOfLengthBetween(5, 10), randomAlphaOfLengthBetween(5, 10)).         }         changed = true.     } else {         otherIngestMetadata = Collections.unmodifiableMap(ingestMetadata).     }     WriteableIngestDocument otherIngestDocument = new WriteableIngestDocument(new IngestDocument(otherSourceAndMetadata, otherIngestMetadata)).     if (changed) {         assertThat(ingestDocument, not(equalTo(otherIngestDocument))).         assertThat(otherIngestDocument, not(equalTo(ingestDocument))).     } else {         assertThat(ingestDocument, equalTo(otherIngestDocument)).         assertThat(otherIngestDocument, equalTo(ingestDocument)).         assertThat(ingestDocument.hashCode(), equalTo(otherIngestDocument.hashCode())).         WriteableIngestDocument thirdIngestDocument = new WriteableIngestDocument(new IngestDocument(Collections.unmodifiableMap(sourceAndMetadata), Collections.unmodifiableMap(ingestMetadata))).         assertThat(thirdIngestDocument, equalTo(ingestDocument)).         assertThat(ingestDocument, equalTo(thirdIngestDocument)).         assertThat(ingestDocument.hashCode(), equalTo(thirdIngestDocument.hashCode())).     } }
false;public;0;20;;public void testSerialization() throws IOException {     Map<String, Object> sourceAndMetadata = RandomDocumentPicks.randomSource(random()).     int numFields = randomIntBetween(1, IngestDocument.MetaData.values().length).     for (int i = 0. i < numFields. i++) {         sourceAndMetadata.put(randomFrom(IngestDocument.MetaData.values()).getFieldName(), randomAlphaOfLengthBetween(5, 10)).     }     Map<String, Object> ingestMetadata = new HashMap<>().     numFields = randomIntBetween(1, 5).     for (int i = 0. i < numFields. i++) {         ingestMetadata.put(randomAlphaOfLengthBetween(5, 10), randomAlphaOfLengthBetween(5, 10)).     }     WriteableIngestDocument writeableIngestDocument = new WriteableIngestDocument(new IngestDocument(sourceAndMetadata, ingestMetadata)).     BytesStreamOutput out = new BytesStreamOutput().     writeableIngestDocument.writeTo(out).     StreamInput streamInput = out.bytes().streamInput().     WriteableIngestDocument otherWriteableIngestDocument = new WriteableIngestDocument(streamInput).     assertIngestDocument(otherWriteableIngestDocument.getIngestDocument(), writeableIngestDocument.getIngestDocument()). }
false;public;0;29;;@SuppressWarnings("unchecked") public void testToXContent() throws IOException {     IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random()).     WriteableIngestDocument writeableIngestDocument = new WriteableIngestDocument(new IngestDocument(ingestDocument)).     // using a cbor builder here, so that byte arrays do not get converted, so equalTo() below works     XContentBuilder builder = XContentFactory.cborBuilder().     builder.startObject().     writeableIngestDocument.toXContent(builder, EMPTY_PARAMS).     builder.endObject().     Map<String, Object> toXContentMap = XContentHelper.convertToMap(BytesReference.bytes(builder), false, builder.contentType()).v2().     Map<String, Object> toXContentDoc = (Map<String, Object>) toXContentMap.get("doc").     Map<String, Object> toXContentSource = (Map<String, Object>) toXContentDoc.get("_source").     Map<String, Object> toXContentIngestMetadata = (Map<String, Object>) toXContentDoc.get("_ingest").     Map<IngestDocument.MetaData, Object> metadataMap = ingestDocument.extractMetadata().     for (Map.Entry<IngestDocument.MetaData, Object> metadata : metadataMap.entrySet()) {         String fieldName = metadata.getKey().getFieldName().         if (metadata.getValue() == null) {             assertThat(toXContentDoc.containsKey(fieldName), is(false)).         } else {             assertThat(toXContentDoc.get(fieldName), equalTo(metadata.getValue().toString())).         }     }     IngestDocument serializedIngestDocument = new IngestDocument(toXContentSource, toXContentIngestMetadata).     assertThat(serializedIngestDocument, equalTo(serializedIngestDocument)). }
false;static;0;6;;static IngestDocument createRandomIngestDoc() {     XContentType xContentType = randomFrom(XContentType.values()).     BytesReference sourceBytes = RandomObjects.randomSource(random(), xContentType).     Map<String, Object> randomSource = XContentHelper.convertToMap(sourceBytes, false, xContentType).v2().     return RandomDocumentPicks.randomIngestDocument(random(), randomSource). }
false;protected;0;4;;@Override protected boolean supportsUnknownFields() {     return true. }
false;protected;0;4;;@Override protected WriteableIngestDocument createTestInstance() {     return new WriteableIngestDocument(createRandomIngestDoc()). }
false;protected;1;4;;@Override protected WriteableIngestDocument doParseInstance(XContentParser parser) {     return WriteableIngestDocument.fromXContent(parser). }
false;protected;0;15;;@Override protected Predicate<String> getRandomFieldsExcludeFilter() {     // We cannot have random fields in the _source field and _ingest field     return field -> field.startsWith(new StringJoiner(".").add(WriteableIngestDocument.DOC_FIELD).add(WriteableIngestDocument.SOURCE_FIELD).toString()) || field.startsWith(new StringJoiner(".").add(WriteableIngestDocument.DOC_FIELD).add(WriteableIngestDocument.INGEST_FIELD).toString()). }
