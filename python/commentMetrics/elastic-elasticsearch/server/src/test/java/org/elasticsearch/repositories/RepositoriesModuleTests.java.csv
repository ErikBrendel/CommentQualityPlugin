commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Override public void setUp() throws Exception {     super.setUp().     environment = mock(Environment.class).     contentRegistry = mock(NamedXContentRegistry.class).     plugin1 = mock(RepositoryPlugin.class).     plugin2 = mock(RepositoryPlugin.class).     factory = mock(Repository.Factory.class).     repoPlugins.add(plugin1).     repoPlugins.add(plugin2).     when(environment.settings()).thenReturn(Settings.EMPTY). }
false;public;0;8;;public void testCanRegisterTwoRepositoriesWithDifferentTypes() {     when(plugin1.getRepositories(environment, contentRegistry)).thenReturn(Collections.singletonMap("type1", factory)).     when(plugin2.getRepositories(environment, contentRegistry)).thenReturn(Collections.singletonMap("type2", factory)).     // Would throw     new RepositoriesModule(environment, repoPlugins, mock(TransportService.class), mock(ClusterService.class), mock(ThreadPool.class), contentRegistry). }
false;public;0;10;;public void testCannotRegisterTwoRepositoriesWithSameTypes() {     when(plugin1.getRepositories(environment, contentRegistry)).thenReturn(Collections.singletonMap("type1", factory)).     when(plugin2.getRepositories(environment, contentRegistry)).thenReturn(Collections.singletonMap("type1", factory)).     IllegalArgumentException ex = expectThrows(IllegalArgumentException.class, () -> new RepositoriesModule(environment, repoPlugins, mock(TransportService.class), mock(ClusterService.class), mock(ThreadPool.class), contentRegistry)).     assertEquals("Repository type [type1] is already registered", ex.getMessage()). }
false;public;0;10;;public void testCannotRegisterTwoInternalRepositoriesWithSameTypes() {     when(plugin1.getInternalRepositories(environment, contentRegistry)).thenReturn(Collections.singletonMap("type1", factory)).     when(plugin2.getInternalRepositories(environment, contentRegistry)).thenReturn(Collections.singletonMap("type1", factory)).     IllegalArgumentException ex = expectThrows(IllegalArgumentException.class, () -> new RepositoriesModule(environment, repoPlugins, mock(TransportService.class), mock(ClusterService.class), mock(ThreadPool.class), contentRegistry)).     assertEquals("Internal repository type [type1] is already registered", ex.getMessage()). }
false;public;0;10;;public void testCannotRegisterNormalAndInternalRepositoriesWithSameTypes() {     when(plugin1.getRepositories(environment, contentRegistry)).thenReturn(Collections.singletonMap("type1", factory)).     when(plugin2.getInternalRepositories(environment, contentRegistry)).thenReturn(Collections.singletonMap("type1", factory)).     IllegalArgumentException ex = expectThrows(IllegalArgumentException.class, () -> new RepositoriesModule(environment, repoPlugins, mock(TransportService.class), mock(ClusterService.class), mock(ThreadPool.class), contentRegistry)).     assertEquals("Internal repository type [type1] is already registered as a non-internal repository", ex.getMessage()). }
