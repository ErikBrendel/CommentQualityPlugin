commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Override @Before public void setUp() throws Exception {     super.setUp().     threadPool = new TestThreadPool(getClass().getName()).     // this one supports dynamic tracer updates     serviceA = buildService(version0).     nodeA = serviceA.getLocalDiscoNode().     // this one doesn't support dynamic tracer updates     serviceB = buildService(version1).     nodeB = serviceB.getLocalDiscoNode().     // this one doesn't support dynamic tracer updates     serviceC = buildService(version1).     nodeC = serviceC.getLocalDiscoNode(). }
false;public;0;7;;@Override public void tearDown() throws Exception {     super.tearDown().     IOUtils.close(serviceA, serviceB, serviceC, () -> {         terminate(threadPool).     }). }
false;private;1;7;;private MockTransportService buildService(final Version version) {     MockTransportService service = MockTransportService.createNewService(Settings.EMPTY, version, threadPool, null).     service.start().     service.acceptIncomingRequests().     return service. }
false;public;1;4;;@Override public SimpleTestResponse read(StreamInput in) throws IOException {     return new SimpleTestResponse(in). }
false;public;1;8;;@Override public void handleResponse(SimpleTestResponse response) {     try {         assertEquals("TS_C", response.targetNode).     } finally {         latch.countDown().     } }
false;public;1;8;;@Override public void handleException(TransportException exp) {     try {         throw new AssertionError(exp).     } finally {         latch.countDown().     } }
false;public;0;4;;@Override public String executor() {     return ThreadPool.Names.SAME. }
false;public;0;59;;public void testSendMessage() throws InterruptedException {     serviceA.registerRequestHandler("internal:test", SimpleTestRequest::new, ThreadPool.Names.SAME, (request, channel, task) -> {         assertEquals(request.sourceNode, "TS_A").         SimpleTestResponse response = new SimpleTestResponse("TS_A").         channel.sendResponse(response).     }).     TransportActionProxy.registerProxyAction(serviceA, "internal:test", SimpleTestResponse::new).     serviceA.connectToNode(nodeB).     serviceB.registerRequestHandler("internal:test", SimpleTestRequest::new, ThreadPool.Names.SAME, (request, channel, task) -> {         assertEquals(request.sourceNode, "TS_A").         SimpleTestResponse response = new SimpleTestResponse("TS_B").         channel.sendResponse(response).     }).     TransportActionProxy.registerProxyAction(serviceB, "internal:test", SimpleTestResponse::new).     serviceB.connectToNode(nodeC).     serviceC.registerRequestHandler("internal:test", SimpleTestRequest::new, ThreadPool.Names.SAME, (request, channel, task) -> {         assertEquals(request.sourceNode, "TS_A").         SimpleTestResponse response = new SimpleTestResponse("TS_C").         channel.sendResponse(response).     }).     TransportActionProxy.registerProxyAction(serviceC, "internal:test", SimpleTestResponse::new).     CountDownLatch latch = new CountDownLatch(1).     serviceA.sendRequest(nodeB, TransportActionProxy.getProxyAction("internal:test"), TransportActionProxy.wrapRequest(nodeC, new SimpleTestRequest("TS_A")), new TransportResponseHandler<SimpleTestResponse>() {          @Override         public SimpleTestResponse read(StreamInput in) throws IOException {             return new SimpleTestResponse(in).         }          @Override         public void handleResponse(SimpleTestResponse response) {             try {                 assertEquals("TS_C", response.targetNode).             } finally {                 latch.countDown().             }         }          @Override         public void handleException(TransportException exp) {             try {                 throw new AssertionError(exp).             } finally {                 latch.countDown().             }         }          @Override         public String executor() {             return ThreadPool.Names.SAME.         }     }).     latch.await(). }
false;public;1;4;;@Override public SimpleTestResponse read(StreamInput in) throws IOException {     return new SimpleTestResponse(in). }
false;public;1;8;;@Override public void handleResponse(SimpleTestResponse response) {     try {         fail("expected exception").     } finally {         latch.countDown().     } }
false;public;1;9;;@Override public void handleException(TransportException exp) {     try {         Throwable cause = ExceptionsHelper.unwrapCause(exp).         assertEquals("greetings from TS_C", cause.getMessage()).     } finally {         latch.countDown().     } }
false;public;0;4;;@Override public String executor() {     return ThreadPool.Names.SAME. }
false;public;0;58;;public void testException() throws InterruptedException {     serviceA.registerRequestHandler("internal:test", SimpleTestRequest::new, ThreadPool.Names.SAME, (request, channel, task) -> {         assertEquals(request.sourceNode, "TS_A").         SimpleTestResponse response = new SimpleTestResponse("TS_A").         channel.sendResponse(response).     }).     TransportActionProxy.registerProxyAction(serviceA, "internal:test", SimpleTestResponse::new).     serviceA.connectToNode(nodeB).     serviceB.registerRequestHandler("internal:test", SimpleTestRequest::new, ThreadPool.Names.SAME, (request, channel, task) -> {         assertEquals(request.sourceNode, "TS_A").         SimpleTestResponse response = new SimpleTestResponse("TS_B").         channel.sendResponse(response).     }).     TransportActionProxy.registerProxyAction(serviceB, "internal:test", SimpleTestResponse::new).     serviceB.connectToNode(nodeC).     serviceC.registerRequestHandler("internal:test", SimpleTestRequest::new, ThreadPool.Names.SAME, (request, channel, task) -> {         throw new ElasticsearchException("greetings from TS_C").     }).     TransportActionProxy.registerProxyAction(serviceC, "internal:test", SimpleTestResponse::new).     CountDownLatch latch = new CountDownLatch(1).     serviceA.sendRequest(nodeB, TransportActionProxy.getProxyAction("internal:test"), TransportActionProxy.wrapRequest(nodeC, new SimpleTestRequest("TS_A")), new TransportResponseHandler<SimpleTestResponse>() {          @Override         public SimpleTestResponse read(StreamInput in) throws IOException {             return new SimpleTestResponse(in).         }          @Override         public void handleResponse(SimpleTestResponse response) {             try {                 fail("expected exception").             } finally {                 latch.countDown().             }         }          @Override         public void handleException(TransportException exp) {             try {                 Throwable cause = ExceptionsHelper.unwrapCause(exp).                 assertEquals("greetings from TS_C", cause.getMessage()).             } finally {                 latch.countDown().             }         }          @Override         public String executor() {             return ThreadPool.Names.SAME.         }     }).     latch.await(). }
false;public;1;5;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     sourceNode = in.readString(). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(sourceNode). }
false;public;1;4;;@Override public void readFrom(StreamInput in) throws IOException {     throw new UnsupportedOperationException("usage of Streamable is to be replaced by Writeable"). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(targetNode). }
false;public;0;6;;public void testGetAction() {     String action = "foo/bar".     String proxyAction = TransportActionProxy.getProxyAction(action).     assertTrue(proxyAction.endsWith(action)).     assertEquals("internal:transport/proxy/foo/bar", proxyAction). }
false;public;0;5;;public void testUnwrap() {     TransportRequest transportRequest = TransportActionProxy.wrapRequest(nodeA, TransportService.HandshakeRequest.INSTANCE).     assertTrue(transportRequest instanceof TransportActionProxy.ProxyRequest).     assertSame(TransportService.HandshakeRequest.INSTANCE, TransportActionProxy.unwrapRequest(transportRequest)). }
false;public;0;6;;public void testIsProxyAction() {     String action = "foo/bar".     String proxyAction = TransportActionProxy.getProxyAction(action).     assertTrue(TransportActionProxy.isProxyAction(proxyAction)).     assertFalse(TransportActionProxy.isProxyAction(action)). }
false;public;0;4;;public void testIsProxyRequest() {     assertTrue(TransportActionProxy.isProxyRequest(new TransportActionProxy.ProxyRequest<>(TransportRequest.Empty.INSTANCE, null))).     assertFalse(TransportActionProxy.isProxyRequest(TransportRequest.Empty.INSTANCE)). }
