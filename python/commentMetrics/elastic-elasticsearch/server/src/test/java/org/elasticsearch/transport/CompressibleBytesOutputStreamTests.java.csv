commented;modifiers;parameterAmount;loc;comment;code
false;public;0;27;;public void testStreamWithoutCompression() throws IOException {     BytesStream bStream = new ZeroOutOnCloseStream().     CompressibleBytesOutputStream stream = new CompressibleBytesOutputStream(bStream, false).     byte[] expectedBytes = randomBytes(randomInt(30)).     stream.write(expectedBytes).     BytesReference bytesRef = stream.materializeBytes().     // Closing compression stream does not close underlying stream     stream.close().     assertFalse(CompressorFactory.COMPRESSOR.isCompressed(bytesRef)).     StreamInput streamInput = bytesRef.streamInput().     byte[] actualBytes = new byte[expectedBytes.length].     streamInput.readBytes(actualBytes, 0, expectedBytes.length).     assertEquals(-1, streamInput.read()).     assertArrayEquals(expectedBytes, actualBytes).     bStream.close().     // The bytes should be zeroed out on close     for (byte b : bytesRef.toBytesRef().bytes) {         assertEquals((byte) 0, b).     } }
false;public;0;26;;public void testStreamWithCompression() throws IOException {     BytesStream bStream = new ZeroOutOnCloseStream().     CompressibleBytesOutputStream stream = new CompressibleBytesOutputStream(bStream, true).     byte[] expectedBytes = randomBytes(randomInt(30)).     stream.write(expectedBytes).     BytesReference bytesRef = stream.materializeBytes().     stream.close().     assertTrue(CompressorFactory.COMPRESSOR.isCompressed(bytesRef)).     StreamInput streamInput = CompressorFactory.COMPRESSOR.streamInput(bytesRef.streamInput()).     byte[] actualBytes = new byte[expectedBytes.length].     streamInput.readBytes(actualBytes, 0, expectedBytes.length).     assertEquals(-1, streamInput.read()).     assertArrayEquals(expectedBytes, actualBytes).     bStream.close().     // The bytes should be zeroed out on close     for (byte b : bytesRef.toBytesRef().bytes) {         assertEquals((byte) 0, b).     } }
false;public;0;15;;public void testCompressionWithCallingMaterializeFails() throws IOException {     BytesStream bStream = new ZeroOutOnCloseStream().     CompressibleBytesOutputStream stream = new CompressibleBytesOutputStream(bStream, true).     byte[] expectedBytes = randomBytes(between(1, 30)).     stream.write(expectedBytes).     StreamInput streamInput = CompressorFactory.COMPRESSOR.streamInput(bStream.bytes().streamInput()).     byte[] actualBytes = new byte[expectedBytes.length].     EOFException e = expectThrows(EOFException.class, () -> streamInput.readBytes(actualBytes, 0, expectedBytes.length)).     assertEquals("Unexpected end of ZLIB input stream", e.getMessage()).     stream.close(). }
false;private,static;1;7;;private static byte[] randomBytes(int length) {     byte[] bytes = new byte[length].     for (int i = 0. i < bytes.length. ++i) {         bytes[i] = randomByte().     }     return bytes. }
false;public;0;5;;@Override public void close() {     int size = (int) bytes.size().     bytes.set(0, new byte[size], 0, size). }
