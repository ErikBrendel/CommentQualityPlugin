commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected MultiValuesSourceFieldConfig doParseInstance(XContentParser parser) throws IOException {     return MultiValuesSourceFieldConfig.PARSER.apply(true, true).apply(parser, null).build(). }
false;protected;0;8;;@Override protected MultiValuesSourceFieldConfig createTestInstance() {     String field = randomAlphaOfLength(10).     Object missing = randomBoolean() ? randomAlphaOfLength(10) : null.     ZoneId timeZone = randomBoolean() ? randomZone() : null.     return new MultiValuesSourceFieldConfig.Builder().setFieldName(field).setMissing(missing).setScript(null).setTimeZone(timeZone).build(). }
false;protected;0;4;;@Override protected Writeable.Reader<MultiValuesSourceFieldConfig> instanceReader() {     return MultiValuesSourceFieldConfig::new. }
false;public;0;4;;public void testMissingFieldScript() {     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new MultiValuesSourceFieldConfig.Builder().build()).     assertThat(e.getMessage(), equalTo("[field] and [script] cannot both be null.  Please specify one or the other.")). }
false;public;0;5;;public void testBothFieldScript() {     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new MultiValuesSourceFieldConfig.Builder().setFieldName("foo").setScript(new Script("foo")).build()).     assertThat(e.getMessage(), equalTo("[field] and [script] cannot both be configured.  Please specify one or the other.")). }
