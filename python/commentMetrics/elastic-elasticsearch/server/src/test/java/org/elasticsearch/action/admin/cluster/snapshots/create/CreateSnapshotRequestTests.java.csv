commented;modifiers;parameterAmount;loc;comment;code
true;public;0;64;// tests creating XContent and parsing with source(Map) equivalency ;// tests creating XContent and parsing with source(Map) equivalency public void testToXContent() throws IOException {     String repo = randomAlphaOfLength(5).     String snap = randomAlphaOfLength(10).     CreateSnapshotRequest original = new CreateSnapshotRequest(repo, snap).     if (randomBoolean()) {         List<String> indices = new ArrayList<>().         int count = randomInt(3) + 1.         for (int i = 0. i < count. ++i) {             indices.add(randomAlphaOfLength(randomInt(3) + 2)).         }         original.indices(indices).     }     if (randomBoolean()) {         original.partial(randomBoolean()).     }     if (randomBoolean()) {         Map<String, Object> settings = new HashMap<>().         int count = randomInt(3) + 1.         for (int i = 0. i < count. ++i) {             settings.put(randomAlphaOfLength(randomInt(3) + 2), randomAlphaOfLength(randomInt(3) + 2)).         }         original.settings(settings).     }     if (randomBoolean()) {         original.includeGlobalState(randomBoolean()).     }     if (randomBoolean()) {         Collection<WildcardStates> wildcardStates = randomSubsetOf(Arrays.asList(WildcardStates.values())).         Collection<Option> options = randomSubsetOf(Arrays.asList(Option.ALLOW_NO_INDICES, Option.IGNORE_UNAVAILABLE)).         original.indicesOptions(new IndicesOptions(options.isEmpty() ? Option.NONE : EnumSet.copyOf(options), wildcardStates.isEmpty() ? WildcardStates.NONE : EnumSet.copyOf(wildcardStates))).     }     if (randomBoolean()) {         original.waitForCompletion(randomBoolean()).     }     if (randomBoolean()) {         original.masterNodeTimeout("60s").     }     XContentBuilder builder = original.toXContent(XContentFactory.jsonBuilder(), new MapParams(Collections.emptyMap())).     XContentParser parser = XContentType.JSON.xContent().createParser(NamedXContentRegistry.EMPTY, null, BytesReference.bytes(builder).streamInput()).     Map<String, Object> map = parser.mapOrdered().     CreateSnapshotRequest processed = new CreateSnapshotRequest((String) map.get("repository"), (String) map.get("snapshot")).     processed.waitForCompletion(original.waitForCompletion()).     processed.masterNodeTimeout(original.masterNodeTimeout()).     processed.source(map).     assertEquals(original, processed). }
