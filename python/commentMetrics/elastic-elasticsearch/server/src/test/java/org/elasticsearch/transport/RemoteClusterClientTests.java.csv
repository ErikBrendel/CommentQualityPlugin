commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public void tearDown() throws Exception {     super.tearDown().     ThreadPool.terminate(threadPool, 10, TimeUnit.SECONDS). }
false;public;0;25;;public void testConnectAndExecuteRequest() throws Exception {     Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), "foo_bar_cluster").build().     try (MockTransportService remoteTransport = startTransport("remote_node", Collections.emptyList(), Version.CURRENT, threadPool, remoteSettings)) {         DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode().         Settings localSettings = Settings.builder().put(RemoteClusterService.ENABLE_REMOTE_CLUSTERS.getKey(), true).put("cluster.remote.test.seeds", remoteNode.getAddress().getAddress() + ":" + remoteNode.getAddress().getPort()).build().         try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {             service.start().             service.acceptIncomingRequests().             RemoteClusterService remoteClusterService = service.getRemoteClusterService().             assertTrue(remoteClusterService.isRemoteNodeConnected("test", remoteNode)).             Client client = remoteClusterService.getRemoteClusterClient(threadPool, "test").             ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get().             assertNotNull(clusterStateResponse).             assertEquals("foo_bar_cluster", clusterStateResponse.getState().getClusterName().value()).             // also test a failure, there is no handler for scroll registered             ActionNotFoundTransportException ex = expectThrows(ActionNotFoundTransportException.class, () -> client.prepareSearchScroll("").get()).             assertEquals("No handler for action [indices:data/read/scroll]", ex.getMessage()).         }     } }
false;public;1;6;;@Override public void onNodeDisconnected(DiscoveryNode node) {     if (remoteNode.equals(node)) {         semaphore.release().     } }
false;public;0;44;;public void testEnsureWeReconnect() throws Exception {     Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), "foo_bar_cluster").build().     try (MockTransportService remoteTransport = startTransport("remote_node", Collections.emptyList(), Version.CURRENT, threadPool, remoteSettings)) {         DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode().         Settings localSettings = Settings.builder().put(RemoteClusterService.ENABLE_REMOTE_CLUSTERS.getKey(), true).put("cluster.remote.test.seeds", remoteNode.getAddress().getAddress() + ":" + remoteNode.getAddress().getPort()).build().         try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {             Semaphore semaphore = new Semaphore(1).             service.start().             service.getRemoteClusterService().getConnections().forEach(con -> {                 con.getConnectionManager().addListener(new TransportConnectionListener() {                      @Override                     public void onNodeDisconnected(DiscoveryNode node) {                         if (remoteNode.equals(node)) {                             semaphore.release().                         }                     }                 }).             }).             // this test is not perfect since we might reconnect concurrently but it will fail most of the time if we don't have             // the right calls in place in the RemoteAwareClient             service.acceptIncomingRequests().             for (int i = 0. i < 10. i++) {                 semaphore.acquire().                 try {                     service.getRemoteClusterService().getConnections().forEach(con -> {                         con.getConnectionManager().disconnectFromNode(remoteNode).                     }).                     semaphore.acquire().                     RemoteClusterService remoteClusterService = service.getRemoteClusterService().                     Client client = remoteClusterService.getRemoteClusterClient(threadPool, "test").                     ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get().                     assertNotNull(clusterStateResponse).                     assertEquals("foo_bar_cluster", clusterStateResponse.getState().getClusterName().value()).                     assertTrue(remoteClusterService.isRemoteNodeConnected("test", remoteNode)).                 } finally {                     semaphore.release().                 }             }         }     } }
