# id;timestamp;commentText;codeText;commentWords;codeWords
InternalEngineTests -> public void testFailStart() throws IOException;1524684173;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1524780945;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1525162917;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1525645056;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1527583663;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1528706846;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1528762805;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1531910483;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1532947734;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1533063033;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1533234568;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1534848846;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1535046779;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1535723122;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1536218260;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1536314350;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1536611444;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1536828374;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1537806831;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1538067637;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1540238977;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1540847035;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1541335413;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1541618615;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1541622390;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1542697754;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1542893693;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1543940134;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1543942400;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1544139474;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1544203340;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1544545090;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1544684920;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1544783136;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1544819407;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1545207154;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1545221705;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1545519642;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1546875837;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1547174095;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1547332999;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1548342168;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1548771485;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1548843917;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1549059559;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1549639236;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1549898480;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1549908725;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1549975032;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1550256122;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1550526771;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> public void testFailStart() throws IOException;1551126708;Random test that throws random exception and ensures all references are_counted down / released and resources are closed.;public void testFailStart() throws IOException {_        _        final int iters = scaledRandomIntBetween(10, 100)__        for (int i = 0_ i < iters_ i++) {_            MockDirectoryWrapper wrapper = newMockDirectory()__            wrapper.setFailOnOpenInput(randomBoolean())__            wrapper.setAllowRandomFileNotFoundException(randomBoolean())__            wrapper.setRandomIOExceptionRate(randomDouble())__            wrapper.setRandomIOExceptionRateOnOpen(randomDouble())__            final Path translogPath = createTempDir("testFailStart")__            try (Store store = createStore(wrapper)) {_                int refCount = store.refCount()__                assertTrue("refCount: " + store.refCount(), store.refCount() > 0)__                InternalEngine holder__                try {_                    holder = createEngine(store, translogPath)__                } catch (EngineCreationFailureException | IOException ex) {_                    assertEquals(store.refCount(), refCount)__                    continue__                }_                assertEquals(store.refCount(), refCount + 1)__                final int numStarts = scaledRandomIntBetween(1, 5)__                for (int j = 0_ j < numStarts_ j++) {_                    try {_                        assertEquals(store.refCount(), refCount + 1)__                        holder.close()__                        holder = createEngine(store, translogPath)__                        assertEquals(store.refCount(), refCount + 1)__                    } catch (EngineCreationFailureException ex) {_                        _                        assertEquals(store.refCount(), refCount)__                        break__                    }_                }_                holder.close()__                assertEquals(store.refCount(), refCount)__            }_        }_    };random,test,that,throws,random,exception,and,ensures,all,references,are,counted,down,released,and,resources,are,closed;public,void,test,fail,start,throws,ioexception,final,int,iters,scaled,random,int,between,10,100,for,int,i,0,i,iters,i,mock,directory,wrapper,wrapper,new,mock,directory,wrapper,set,fail,on,open,input,random,boolean,wrapper,set,allow,random,file,not,found,exception,random,boolean,wrapper,set,random,ioexception,rate,random,double,wrapper,set,random,ioexception,rate,on,open,random,double,final,path,translog,path,create,temp,dir,test,fail,start,try,store,store,create,store,wrapper,int,ref,count,store,ref,count,assert,true,ref,count,store,ref,count,store,ref,count,0,internal,engine,holder,try,holder,create,engine,store,translog,path,catch,engine,creation,failure,exception,ioexception,ex,assert,equals,store,ref,count,ref,count,continue,assert,equals,store,ref,count,ref,count,1,final,int,num,starts,scaled,random,int,between,1,5,for,int,j,0,j,num,starts,j,try,assert,equals,store,ref,count,ref,count,1,holder,close,holder,create,engine,store,translog,path,assert,equals,store,ref,count,ref,count,1,catch,engine,creation,failure,exception,ex,assert,equals,store,ref,count,ref,count,break,holder,close,assert,equals,store,ref,count,ref,count
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1524684173;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = engine.getLocalCheckpointTracker().generateSeqNo()__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,engine,get,local,checkpoint,tracker,generate,seq,no,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1524780945;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = engine.getLocalCheckpointTracker().generateSeqNo()__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,engine,get,local,checkpoint,tracker,generate,seq,no,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1525162917;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = engine.getLocalCheckpointTracker().generateSeqNo()__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,engine,get,local,checkpoint,tracker,generate,seq,no,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1525645056;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = engine.getLocalCheckpointTracker().generateSeqNo()__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,engine,get,local,checkpoint,tracker,generate,seq,no,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1527583663;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = engine.getLocalCheckpointTracker().generateSeqNo()__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,engine,get,local,checkpoint,tracker,generate,seq,no,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1528706846;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1528762805;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1531910483;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1532947734;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1533063033;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1533234568;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1534848846;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1535046779;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1535723122;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1536218260;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1536314350;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1536611444;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1536828374;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1537806831;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1538067637;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1540238977;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1540847035;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1541335413;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1541618615;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1541622390;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1542697754;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1542893693;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1543940134;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1543942400;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1544139474;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1544203340;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1544545090;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1544684920;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1544783136;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1544819407;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1545207154;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1545221705;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1545519642;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1546875837;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1547174095;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1547332999;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1548342168;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1548771485;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1548843917;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1549059559;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1549639236;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1549898480;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1549908725;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1549975032;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1550256122;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1550526771;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(             final AtomicReference<CountDownLatch> latchReference,             final CyclicBarrier barrier,             final AtomicBoolean stall,             final AtomicLong expectedLocalCheckpoint);1551126708;A sequence number generator that will generate a sequence number and if {@code stall} is set to true will wait on the barrier and the_referenced latch before returning. If the local checkpoint should advance (because {@code stall} is false, then the value of_{@code expectedLocalCheckpoint} is set accordingly.__@param latchReference          to latch the thread for the purpose of stalling_@param barrier                 to signal the thread has generated a new sequence number_@param stall                   whether or not the thread should stall_@param expectedLocalCheckpoint the expected local checkpoint after generating a new sequence_number_@return a sequence number generator;private ToLongBiFunction<Engine, Engine.Operation> getStallingSeqNoGenerator(_            final AtomicReference<CountDownLatch> latchReference,_            final CyclicBarrier barrier,_            final AtomicBoolean stall,_            final AtomicLong expectedLocalCheckpoint) {_        return (engine, operation) -> {_            final long seqNo = generateNewSeqNo(engine)__            final CountDownLatch latch = latchReference.get()__            if (stall.get()) {_                try {_                    barrier.await()__                    latch.await()__                } catch (BrokenBarrierException | InterruptedException e) {_                    throw new RuntimeException(e)__                }_            } else {_                if (expectedLocalCheckpoint.get() + 1 == seqNo) {_                    expectedLocalCheckpoint.set(seqNo)__                }_            }_            return seqNo__        }__    };a,sequence,number,generator,that,will,generate,a,sequence,number,and,if,code,stall,is,set,to,true,will,wait,on,the,barrier,and,the,referenced,latch,before,returning,if,the,local,checkpoint,should,advance,because,code,stall,is,false,then,the,value,of,code,expected,local,checkpoint,is,set,accordingly,param,latch,reference,to,latch,the,thread,for,the,purpose,of,stalling,param,barrier,to,signal,the,thread,has,generated,a,new,sequence,number,param,stall,whether,or,not,the,thread,should,stall,param,expected,local,checkpoint,the,expected,local,checkpoint,after,generating,a,new,sequence,number,return,a,sequence,number,generator;private,to,long,bi,function,engine,engine,operation,get,stalling,seq,no,generator,final,atomic,reference,count,down,latch,latch,reference,final,cyclic,barrier,barrier,final,atomic,boolean,stall,final,atomic,long,expected,local,checkpoint,return,engine,operation,final,long,seq,no,generate,new,seq,no,engine,final,count,down,latch,latch,latch,reference,get,if,stall,get,try,barrier,await,latch,await,catch,broken,barrier,exception,interrupted,exception,e,throw,new,runtime,exception,e,else,if,expected,local,checkpoint,get,1,seq,no,expected,local,checkpoint,set,seq,no,return,seq,no
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1524684173;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = 0__                seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                primaryTerm = VersionsAndSeqNoResolver.loadPrimaryTerm(docIdAndSeqNo, get.uid().field())__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,0,seq,no,sequence,numbers,else,seq,no,doc,id,and,seq,no,seq,no,primary,term,versions,and,seq,no,resolver,load,primary,term,doc,id,and,seq,no,get,uid,field,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1524780945;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = 0__                seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                primaryTerm = VersionsAndSeqNoResolver.loadPrimaryTerm(docIdAndSeqNo, get.uid().field())__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,0,seq,no,sequence,numbers,else,seq,no,doc,id,and,seq,no,seq,no,primary,term,versions,and,seq,no,resolver,load,primary,term,doc,id,and,seq,no,get,uid,field,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1525162917;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = 0__                seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                primaryTerm = VersionsAndSeqNoResolver.loadPrimaryTerm(docIdAndSeqNo, get.uid().field())__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,0,seq,no,sequence,numbers,else,seq,no,doc,id,and,seq,no,seq,no,primary,term,versions,and,seq,no,resolver,load,primary,term,doc,id,and,seq,no,get,uid,field,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1525645056;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = 0__                seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                primaryTerm = VersionsAndSeqNoResolver.loadPrimaryTerm(docIdAndSeqNo, get.uid().field())__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,0,seq,no,sequence,numbers,else,seq,no,doc,id,and,seq,no,seq,no,primary,term,versions,and,seq,no,resolver,load,primary,term,doc,id,and,seq,no,get,uid,field,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1527583663;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = 0__                seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                primaryTerm = VersionsAndSeqNoResolver.loadPrimaryTerm(docIdAndSeqNo, get.uid().field())__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,0,seq,no,sequence,numbers,else,seq,no,doc,id,and,seq,no,seq,no,primary,term,versions,and,seq,no,resolver,load,primary,term,doc,id,and,seq,no,get,uid,field,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1528706846;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = 0__                seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                primaryTerm = VersionsAndSeqNoResolver.loadPrimaryTerm(docIdAndSeqNo, get.uid().field())__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,0,seq,no,sequence,numbers,else,seq,no,doc,id,and,seq,no,seq,no,primary,term,versions,and,seq,no,resolver,load,primary,term,doc,id,and,seq,no,get,uid,field,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1528762805;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = 0__                seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                primaryTerm = VersionsAndSeqNoResolver.loadPrimaryTerm(docIdAndSeqNo, get.uid().field())__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,0,seq,no,sequence,numbers,else,seq,no,doc,id,and,seq,no,seq,no,primary,term,versions,and,seq,no,resolver,load,primary,term,doc,id,and,seq,no,get,uid,field,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1531910483;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = 0__                seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                primaryTerm = VersionsAndSeqNoResolver.loadPrimaryTerm(docIdAndSeqNo, get.uid().field())__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,0,seq,no,sequence,numbers,else,seq,no,doc,id,and,seq,no,seq,no,primary,term,versions,and,seq,no,resolver,load,primary,term,doc,id,and,seq,no,get,uid,field,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1532947734;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = 0__                seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                primaryTerm = VersionsAndSeqNoResolver.loadPrimaryTerm(docIdAndSeqNo, get.uid().field())__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,0,seq,no,sequence,numbers,else,seq,no,doc,id,and,seq,no,seq,no,primary,term,versions,and,seq,no,resolver,load,primary,term,doc,id,and,seq,no,get,uid,field,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1533063033;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = 0__                seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                primaryTerm = VersionsAndSeqNoResolver.loadPrimaryTerm(docIdAndSeqNo, get.uid().field())__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,0,seq,no,sequence,numbers,else,seq,no,doc,id,and,seq,no,seq,no,primary,term,versions,and,seq,no,resolver,load,primary,term,doc,id,and,seq,no,get,uid,field,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1533234568;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = 0__                seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                primaryTerm = VersionsAndSeqNoResolver.loadPrimaryTerm(docIdAndSeqNo, get.uid().field())__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,0,seq,no,sequence,numbers,else,seq,no,doc,id,and,seq,no,seq,no,primary,term,versions,and,seq,no,resolver,load,primary,term,doc,id,and,seq,no,get,uid,field,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1534848846;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = 0__                seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                primaryTerm = VersionsAndSeqNoResolver.loadPrimaryTerm(docIdAndSeqNo, get.uid().field())__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,0,seq,no,sequence,numbers,else,seq,no,doc,id,and,seq,no,seq,no,primary,term,versions,and,seq,no,resolver,load,primary,term,doc,id,and,seq,no,get,uid,field,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1535046779;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = 0__                seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                primaryTerm = VersionsAndSeqNoResolver.loadPrimaryTerm(docIdAndSeqNo, get.uid().field())__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,0,seq,no,sequence,numbers,else,seq,no,doc,id,and,seq,no,seq,no,primary,term,versions,and,seq,no,resolver,load,primary,term,doc,id,and,seq,no,get,uid,field,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1535723122;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = 0__                seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                primaryTerm = VersionsAndSeqNoResolver.loadPrimaryTerm(docIdAndSeqNo, get.uid().field())__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,0,seq,no,sequence,numbers,else,seq,no,doc,id,and,seq,no,seq,no,primary,term,versions,and,seq,no,resolver,load,primary,term,doc,id,and,seq,no,get,uid,field,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1536218260;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = 0__                seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                primaryTerm = VersionsAndSeqNoResolver.loadPrimaryTerm(docIdAndSeqNo, get.uid().field())__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,0,seq,no,sequence,numbers,else,seq,no,doc,id,and,seq,no,seq,no,primary,term,versions,and,seq,no,resolver,load,primary,term,doc,id,and,seq,no,get,uid,field,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1536314350;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = 0__                seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                primaryTerm = VersionsAndSeqNoResolver.loadPrimaryTerm(docIdAndSeqNo, get.uid().field())__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,0,seq,no,sequence,numbers,else,seq,no,doc,id,and,seq,no,seq,no,primary,term,versions,and,seq,no,resolver,load,primary,term,doc,id,and,seq,no,get,uid,field,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1536611444;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = 0__                seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                primaryTerm = VersionsAndSeqNoResolver.loadPrimaryTerm(docIdAndSeqNo, get.uid().field())__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,0,seq,no,sequence,numbers,else,seq,no,doc,id,and,seq,no,seq,no,primary,term,versions,and,seq,no,resolver,load,primary,term,doc,id,and,seq,no,get,uid,field,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1536828374;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = 0__                seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                primaryTerm = VersionsAndSeqNoResolver.loadPrimaryTerm(docIdAndSeqNo, get.uid().field())__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,0,seq,no,sequence,numbers,else,seq,no,doc,id,and,seq,no,seq,no,primary,term,versions,and,seq,no,resolver,load,primary,term,doc,id,and,seq,no,get,uid,field,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1537806831;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = 0__                seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                primaryTerm = VersionsAndSeqNoResolver.loadPrimaryTerm(docIdAndSeqNo, get.uid().field())__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,0,seq,no,sequence,numbers,else,seq,no,doc,id,and,seq,no,seq,no,primary,term,versions,and,seq,no,resolver,load,primary,term,doc,id,and,seq,no,get,uid,field,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1538067637;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = 0__                seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                primaryTerm = VersionsAndSeqNoResolver.loadPrimaryTerm(docIdAndSeqNo, get.uid().field())__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,0,seq,no,sequence,numbers,else,seq,no,doc,id,and,seq,no,seq,no,primary,term,versions,and,seq,no,resolver,load,primary,term,doc,id,and,seq,no,get,uid,field,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1540238977;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = 0__                seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                primaryTerm = VersionsAndSeqNoResolver.loadPrimaryTerm(docIdAndSeqNo, get.uid().field())__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,0,seq,no,sequence,numbers,else,seq,no,doc,id,and,seq,no,seq,no,primary,term,versions,and,seq,no,resolver,load,primary,term,doc,id,and,seq,no,get,uid,field,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1540847035;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = 0__                seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                primaryTerm = VersionsAndSeqNoResolver.loadPrimaryTerm(docIdAndSeqNo, get.uid().field())__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,0,seq,no,sequence,numbers,else,seq,no,doc,id,and,seq,no,seq,no,primary,term,versions,and,seq,no,resolver,load,primary,term,doc,id,and,seq,no,get,uid,field,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1541335413;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = 0__                seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                primaryTerm = VersionsAndSeqNoResolver.loadPrimaryTerm(docIdAndSeqNo, get.uid().field())__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,0,seq,no,sequence,numbers,else,seq,no,doc,id,and,seq,no,seq,no,primary,term,versions,and,seq,no,resolver,load,primary,term,doc,id,and,seq,no,get,uid,field,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1541618615;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = 0__                seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                primaryTerm = VersionsAndSeqNoResolver.loadPrimaryTerm(docIdAndSeqNo, get.uid().field())__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,0,seq,no,sequence,numbers,else,seq,no,doc,id,and,seq,no,seq,no,primary,term,versions,and,seq,no,resolver,load,primary,term,doc,id,and,seq,no,get,uid,field,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1541622390;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = 0__                seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                NumericDocValues primaryTerms = docIdAndSeqNo.context.reader().getNumericDocValues(SeqNoFieldMapper.PRIMARY_TERM_NAME)__                if (primaryTerms == null || primaryTerms.advanceExact(docIdAndSeqNo.docId) == false) {_                    throw new AssertionError("document does not have primary term [" + docIdAndSeqNo.docId + "]")__                }_                primaryTerm = primaryTerms.longValue()__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,0,seq,no,sequence,numbers,else,seq,no,doc,id,and,seq,no,seq,no,numeric,doc,values,primary,terms,doc,id,and,seq,no,context,reader,get,numeric,doc,values,seq,no,field,mapper,if,primary,terms,null,primary,terms,advance,exact,doc,id,and,seq,no,doc,id,false,throw,new,assertion,error,document,does,not,have,primary,term,doc,id,and,seq,no,doc,id,primary,term,primary,terms,long,value,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1542697754;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = 0__                seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                NumericDocValues primaryTerms = docIdAndSeqNo.context.reader().getNumericDocValues(SeqNoFieldMapper.PRIMARY_TERM_NAME)__                if (primaryTerms == null || primaryTerms.advanceExact(docIdAndSeqNo.docId) == false) {_                    throw new AssertionError("document does not have primary term [" + docIdAndSeqNo.docId + "]")__                }_                primaryTerm = primaryTerms.longValue()__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,0,seq,no,sequence,numbers,else,seq,no,doc,id,and,seq,no,seq,no,numeric,doc,values,primary,terms,doc,id,and,seq,no,context,reader,get,numeric,doc,values,seq,no,field,mapper,if,primary,terms,null,primary,terms,advance,exact,doc,id,and,seq,no,doc,id,false,throw,new,assertion,error,document,does,not,have,primary,term,doc,id,and,seq,no,doc,id,primary,term,primary,terms,long,value,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1542893693;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = 0__                seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                NumericDocValues primaryTerms = docIdAndSeqNo.context.reader().getNumericDocValues(SeqNoFieldMapper.PRIMARY_TERM_NAME)__                if (primaryTerms == null || primaryTerms.advanceExact(docIdAndSeqNo.docId) == false) {_                    throw new AssertionError("document does not have primary term [" + docIdAndSeqNo.docId + "]")__                }_                primaryTerm = primaryTerms.longValue()__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,0,seq,no,sequence,numbers,else,seq,no,doc,id,and,seq,no,seq,no,numeric,doc,values,primary,terms,doc,id,and,seq,no,context,reader,get,numeric,doc,values,seq,no,field,mapper,if,primary,terms,null,primary,terms,advance,exact,doc,id,and,seq,no,doc,id,false,throw,new,assertion,error,document,does,not,have,primary,term,doc,id,and,seq,no,doc,id,primary,term,primary,terms,long,value,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1543940134;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = 0__                seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                NumericDocValues primaryTerms = docIdAndSeqNo.context.reader().getNumericDocValues(SeqNoFieldMapper.PRIMARY_TERM_NAME)__                if (primaryTerms == null || primaryTerms.advanceExact(docIdAndSeqNo.docId) == false) {_                    throw new AssertionError("document does not have primary term [" + docIdAndSeqNo.docId + "]")__                }_                primaryTerm = primaryTerms.longValue()__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,0,seq,no,sequence,numbers,else,seq,no,doc,id,and,seq,no,seq,no,numeric,doc,values,primary,terms,doc,id,and,seq,no,context,reader,get,numeric,doc,values,seq,no,field,mapper,if,primary,terms,null,primary,terms,advance,exact,doc,id,and,seq,no,doc,id,false,throw,new,assertion,error,document,does,not,have,primary,term,doc,id,and,seq,no,doc,id,primary,term,primary,terms,long,value,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1543942400;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = 0__                seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                NumericDocValues primaryTerms = docIdAndSeqNo.context.reader().getNumericDocValues(SeqNoFieldMapper.PRIMARY_TERM_NAME)__                if (primaryTerms == null || primaryTerms.advanceExact(docIdAndSeqNo.docId) == false) {_                    throw new AssertionError("document does not have primary term [" + docIdAndSeqNo.docId + "]")__                }_                primaryTerm = primaryTerms.longValue()__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,0,seq,no,sequence,numbers,else,seq,no,doc,id,and,seq,no,seq,no,numeric,doc,values,primary,terms,doc,id,and,seq,no,context,reader,get,numeric,doc,values,seq,no,field,mapper,if,primary,terms,null,primary,terms,advance,exact,doc,id,and,seq,no,doc,id,false,throw,new,assertion,error,document,does,not,have,primary,term,doc,id,and,seq,no,doc,id,primary,term,primary,terms,long,value,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1544139474;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = 0__                seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                NumericDocValues primaryTerms = docIdAndSeqNo.context.reader().getNumericDocValues(SeqNoFieldMapper.PRIMARY_TERM_NAME)__                if (primaryTerms == null || primaryTerms.advanceExact(docIdAndSeqNo.docId) == false) {_                    throw new AssertionError("document does not have primary term [" + docIdAndSeqNo.docId + "]")__                }_                primaryTerm = primaryTerms.longValue()__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,0,seq,no,sequence,numbers,else,seq,no,doc,id,and,seq,no,seq,no,numeric,doc,values,primary,terms,doc,id,and,seq,no,context,reader,get,numeric,doc,values,seq,no,field,mapper,if,primary,terms,null,primary,terms,advance,exact,doc,id,and,seq,no,doc,id,false,throw,new,assertion,error,document,does,not,have,primary,term,doc,id,and,seq,no,doc,id,primary,term,primary,terms,long,value,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1544203340;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = 0__                seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                NumericDocValues primaryTerms = docIdAndSeqNo.context.reader().getNumericDocValues(SeqNoFieldMapper.PRIMARY_TERM_NAME)__                if (primaryTerms == null || primaryTerms.advanceExact(docIdAndSeqNo.docId) == false) {_                    throw new AssertionError("document does not have primary term [" + docIdAndSeqNo.docId + "]")__                }_                primaryTerm = primaryTerms.longValue()__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,0,seq,no,sequence,numbers,else,seq,no,doc,id,and,seq,no,seq,no,numeric,doc,values,primary,terms,doc,id,and,seq,no,context,reader,get,numeric,doc,values,seq,no,field,mapper,if,primary,terms,null,primary,terms,advance,exact,doc,id,and,seq,no,doc,id,false,throw,new,assertion,error,document,does,not,have,primary,term,doc,id,and,seq,no,doc,id,primary,term,primary,terms,long,value,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1544545090;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = 0__                seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                NumericDocValues primaryTerms = docIdAndSeqNo.context.reader().getNumericDocValues(SeqNoFieldMapper.PRIMARY_TERM_NAME)__                if (primaryTerms == null || primaryTerms.advanceExact(docIdAndSeqNo.docId) == false) {_                    throw new AssertionError("document does not have primary term [" + docIdAndSeqNo.docId + "]")__                }_                primaryTerm = primaryTerms.longValue()__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,0,seq,no,sequence,numbers,else,seq,no,doc,id,and,seq,no,seq,no,numeric,doc,values,primary,terms,doc,id,and,seq,no,context,reader,get,numeric,doc,values,seq,no,field,mapper,if,primary,terms,null,primary,terms,advance,exact,doc,id,and,seq,no,doc,id,false,throw,new,assertion,error,document,does,not,have,primary,term,doc,id,and,seq,no,doc,id,primary,term,primary,terms,long,value,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1544684920;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = 0__                seqNo = UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                NumericDocValues primaryTerms = docIdAndSeqNo.context.reader().getNumericDocValues(SeqNoFieldMapper.PRIMARY_TERM_NAME)__                if (primaryTerms == null || primaryTerms.advanceExact(docIdAndSeqNo.docId) == false) {_                    throw new AssertionError("document does not have primary term [" + docIdAndSeqNo.docId + "]")__                }_                primaryTerm = primaryTerms.longValue()__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,0,seq,no,else,seq,no,doc,id,and,seq,no,seq,no,numeric,doc,values,primary,terms,doc,id,and,seq,no,context,reader,get,numeric,doc,values,seq,no,field,mapper,if,primary,terms,null,primary,terms,advance,exact,doc,id,and,seq,no,doc,id,false,throw,new,assertion,error,document,does,not,have,primary,term,doc,id,and,seq,no,doc,id,primary,term,primary,terms,long,value,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1544783136;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = 0__                seqNo = UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                NumericDocValues primaryTerms = docIdAndSeqNo.context.reader().getNumericDocValues(SeqNoFieldMapper.PRIMARY_TERM_NAME)__                if (primaryTerms == null || primaryTerms.advanceExact(docIdAndSeqNo.docId) == false) {_                    throw new AssertionError("document does not have primary term [" + docIdAndSeqNo.docId + "]")__                }_                primaryTerm = primaryTerms.longValue()__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,0,seq,no,else,seq,no,doc,id,and,seq,no,seq,no,numeric,doc,values,primary,terms,doc,id,and,seq,no,context,reader,get,numeric,doc,values,seq,no,field,mapper,if,primary,terms,null,primary,terms,advance,exact,doc,id,and,seq,no,doc,id,false,throw,new,assertion,error,document,does,not,have,primary,term,doc,id,and,seq,no,doc,id,primary,term,primary,terms,long,value,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1544819407;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = 0__                seqNo = UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                NumericDocValues primaryTerms = docIdAndSeqNo.context.reader().getNumericDocValues(SeqNoFieldMapper.PRIMARY_TERM_NAME)__                if (primaryTerms == null || primaryTerms.advanceExact(docIdAndSeqNo.docId) == false) {_                    throw new AssertionError("document does not have primary term [" + docIdAndSeqNo.docId + "]")__                }_                primaryTerm = primaryTerms.longValue()__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,0,seq,no,else,seq,no,doc,id,and,seq,no,seq,no,numeric,doc,values,primary,terms,doc,id,and,seq,no,context,reader,get,numeric,doc,values,seq,no,field,mapper,if,primary,terms,null,primary,terms,advance,exact,doc,id,and,seq,no,doc,id,false,throw,new,assertion,error,document,does,not,have,primary,term,doc,id,and,seq,no,doc,id,primary,term,primary,terms,long,value,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1545207154;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = 0__                seqNo = UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                NumericDocValues primaryTerms = docIdAndSeqNo.context.reader().getNumericDocValues(SeqNoFieldMapper.PRIMARY_TERM_NAME)__                if (primaryTerms == null || primaryTerms.advanceExact(docIdAndSeqNo.docId) == false) {_                    throw new AssertionError("document does not have primary term [" + docIdAndSeqNo.docId + "]")__                }_                primaryTerm = primaryTerms.longValue()__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,0,seq,no,else,seq,no,doc,id,and,seq,no,seq,no,numeric,doc,values,primary,terms,doc,id,and,seq,no,context,reader,get,numeric,doc,values,seq,no,field,mapper,if,primary,terms,null,primary,terms,advance,exact,doc,id,and,seq,no,doc,id,false,throw,new,assertion,error,document,does,not,have,primary,term,doc,id,and,seq,no,doc,id,primary,term,primary,terms,long,value,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1545221705;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = UNASSIGNED_PRIMARY_TERM__                seqNo = UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                NumericDocValues primaryTerms = docIdAndSeqNo.context.reader().getNumericDocValues(SeqNoFieldMapper.PRIMARY_TERM_NAME)__                if (primaryTerms == null || primaryTerms.advanceExact(docIdAndSeqNo.docId) == false) {_                    throw new AssertionError("document does not have primary term [" + docIdAndSeqNo.docId + "]")__                }_                primaryTerm = primaryTerms.longValue()__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,seq,no,else,seq,no,doc,id,and,seq,no,seq,no,numeric,doc,values,primary,terms,doc,id,and,seq,no,context,reader,get,numeric,doc,values,seq,no,field,mapper,if,primary,terms,null,primary,terms,advance,exact,doc,id,and,seq,no,doc,id,false,throw,new,assertion,error,document,does,not,have,primary,term,doc,id,and,seq,no,doc,id,primary,term,primary,terms,long,value,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1545519642;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = UNASSIGNED_PRIMARY_TERM__                seqNo = UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                NumericDocValues primaryTerms = docIdAndSeqNo.context.reader().getNumericDocValues(SeqNoFieldMapper.PRIMARY_TERM_NAME)__                if (primaryTerms == null || primaryTerms.advanceExact(docIdAndSeqNo.docId) == false) {_                    throw new AssertionError("document does not have primary term [" + docIdAndSeqNo.docId + "]")__                }_                primaryTerm = primaryTerms.longValue()__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,seq,no,else,seq,no,doc,id,and,seq,no,seq,no,numeric,doc,values,primary,terms,doc,id,and,seq,no,context,reader,get,numeric,doc,values,seq,no,field,mapper,if,primary,terms,null,primary,terms,advance,exact,doc,id,and,seq,no,doc,id,false,throw,new,assertion,error,document,does,not,have,primary,term,doc,id,and,seq,no,doc,id,primary,term,primary,terms,long,value,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1546875837;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = UNASSIGNED_PRIMARY_TERM__                seqNo = UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                NumericDocValues primaryTerms = docIdAndSeqNo.context.reader().getNumericDocValues(SeqNoFieldMapper.PRIMARY_TERM_NAME)__                if (primaryTerms == null || primaryTerms.advanceExact(docIdAndSeqNo.docId) == false) {_                    throw new AssertionError("document does not have primary term [" + docIdAndSeqNo.docId + "]")__                }_                primaryTerm = primaryTerms.longValue()__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,seq,no,else,seq,no,doc,id,and,seq,no,seq,no,numeric,doc,values,primary,terms,doc,id,and,seq,no,context,reader,get,numeric,doc,values,seq,no,field,mapper,if,primary,terms,null,primary,terms,advance,exact,doc,id,and,seq,no,doc,id,false,throw,new,assertion,error,document,does,not,have,primary,term,doc,id,and,seq,no,doc,id,primary,term,primary,terms,long,value,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1547174095;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = UNASSIGNED_PRIMARY_TERM__                seqNo = UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                NumericDocValues primaryTerms = docIdAndSeqNo.context.reader().getNumericDocValues(SeqNoFieldMapper.PRIMARY_TERM_NAME)__                if (primaryTerms == null || primaryTerms.advanceExact(docIdAndSeqNo.docId) == false) {_                    throw new AssertionError("document does not have primary term [" + docIdAndSeqNo.docId + "]")__                }_                primaryTerm = primaryTerms.longValue()__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,seq,no,else,seq,no,doc,id,and,seq,no,seq,no,numeric,doc,values,primary,terms,doc,id,and,seq,no,context,reader,get,numeric,doc,values,seq,no,field,mapper,if,primary,terms,null,primary,terms,advance,exact,doc,id,and,seq,no,doc,id,false,throw,new,assertion,error,document,does,not,have,primary,term,doc,id,and,seq,no,doc,id,primary,term,primary,terms,long,value,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1547332999;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = UNASSIGNED_PRIMARY_TERM__                seqNo = UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                NumericDocValues primaryTerms = docIdAndSeqNo.context.reader().getNumericDocValues(SeqNoFieldMapper.PRIMARY_TERM_NAME)__                if (primaryTerms == null || primaryTerms.advanceExact(docIdAndSeqNo.docId) == false) {_                    throw new AssertionError("document does not have primary term [" + docIdAndSeqNo.docId + "]")__                }_                primaryTerm = primaryTerms.longValue()__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,seq,no,else,seq,no,doc,id,and,seq,no,seq,no,numeric,doc,values,primary,terms,doc,id,and,seq,no,context,reader,get,numeric,doc,values,seq,no,field,mapper,if,primary,terms,null,primary,terms,advance,exact,doc,id,and,seq,no,doc,id,false,throw,new,assertion,error,document,does,not,have,primary,term,doc,id,and,seq,no,doc,id,primary,term,primary,terms,long,value,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1548342168;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = UNASSIGNED_PRIMARY_TERM__                seqNo = UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                NumericDocValues primaryTerms = docIdAndSeqNo.context.reader().getNumericDocValues(SeqNoFieldMapper.PRIMARY_TERM_NAME)__                if (primaryTerms == null || primaryTerms.advanceExact(docIdAndSeqNo.docId) == false) {_                    throw new AssertionError("document does not have primary term [" + docIdAndSeqNo.docId + "]")__                }_                primaryTerm = primaryTerms.longValue()__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,seq,no,else,seq,no,doc,id,and,seq,no,seq,no,numeric,doc,values,primary,terms,doc,id,and,seq,no,context,reader,get,numeric,doc,values,seq,no,field,mapper,if,primary,terms,null,primary,terms,advance,exact,doc,id,and,seq,no,doc,id,false,throw,new,assertion,error,document,does,not,have,primary,term,doc,id,and,seq,no,doc,id,primary,term,primary,terms,long,value,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1548771485;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = UNASSIGNED_PRIMARY_TERM__                seqNo = UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                NumericDocValues primaryTerms = docIdAndSeqNo.context.reader().getNumericDocValues(SeqNoFieldMapper.PRIMARY_TERM_NAME)__                if (primaryTerms == null || primaryTerms.advanceExact(docIdAndSeqNo.docId) == false) {_                    throw new AssertionError("document does not have primary term [" + docIdAndSeqNo.docId + "]")__                }_                primaryTerm = primaryTerms.longValue()__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,seq,no,else,seq,no,doc,id,and,seq,no,seq,no,numeric,doc,values,primary,terms,doc,id,and,seq,no,context,reader,get,numeric,doc,values,seq,no,field,mapper,if,primary,terms,null,primary,terms,advance,exact,doc,id,and,seq,no,doc,id,false,throw,new,assertion,error,document,does,not,have,primary,term,doc,id,and,seq,no,doc,id,primary,term,primary,terms,long,value,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1548843917;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = UNASSIGNED_PRIMARY_TERM__                seqNo = UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                NumericDocValues primaryTerms = docIdAndSeqNo.context.reader().getNumericDocValues(SeqNoFieldMapper.PRIMARY_TERM_NAME)__                if (primaryTerms == null || primaryTerms.advanceExact(docIdAndSeqNo.docId) == false) {_                    throw new AssertionError("document does not have primary term [" + docIdAndSeqNo.docId + "]")__                }_                primaryTerm = primaryTerms.longValue()__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,seq,no,else,seq,no,doc,id,and,seq,no,seq,no,numeric,doc,values,primary,terms,doc,id,and,seq,no,context,reader,get,numeric,doc,values,seq,no,field,mapper,if,primary,terms,null,primary,terms,advance,exact,doc,id,and,seq,no,doc,id,false,throw,new,assertion,error,document,does,not,have,primary,term,doc,id,and,seq,no,doc,id,primary,term,primary,terms,long,value,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1549059559;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = UNASSIGNED_PRIMARY_TERM__                seqNo = UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                NumericDocValues primaryTerms = docIdAndSeqNo.context.reader().getNumericDocValues(SeqNoFieldMapper.PRIMARY_TERM_NAME)__                if (primaryTerms == null || primaryTerms.advanceExact(docIdAndSeqNo.docId) == false) {_                    throw new AssertionError("document does not have primary term [" + docIdAndSeqNo.docId + "]")__                }_                primaryTerm = primaryTerms.longValue()__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,seq,no,else,seq,no,doc,id,and,seq,no,seq,no,numeric,doc,values,primary,terms,doc,id,and,seq,no,context,reader,get,numeric,doc,values,seq,no,field,mapper,if,primary,terms,null,primary,terms,advance,exact,doc,id,and,seq,no,doc,id,false,throw,new,assertion,error,document,does,not,have,primary,term,doc,id,and,seq,no,doc,id,primary,term,primary,terms,long,value,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1549639236;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = UNASSIGNED_PRIMARY_TERM__                seqNo = UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                NumericDocValues primaryTerms = docIdAndSeqNo.context.reader().getNumericDocValues(SeqNoFieldMapper.PRIMARY_TERM_NAME)__                if (primaryTerms == null || primaryTerms.advanceExact(docIdAndSeqNo.docId) == false) {_                    throw new AssertionError("document does not have primary term [" + docIdAndSeqNo.docId + "]")__                }_                primaryTerm = primaryTerms.longValue()__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,seq,no,else,seq,no,doc,id,and,seq,no,seq,no,numeric,doc,values,primary,terms,doc,id,and,seq,no,context,reader,get,numeric,doc,values,seq,no,field,mapper,if,primary,terms,null,primary,terms,advance,exact,doc,id,and,seq,no,doc,id,false,throw,new,assertion,error,document,does,not,have,primary,term,doc,id,and,seq,no,doc,id,primary,term,primary,terms,long,value,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1549898480;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = UNASSIGNED_PRIMARY_TERM__                seqNo = UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                NumericDocValues primaryTerms = docIdAndSeqNo.context.reader().getNumericDocValues(SeqNoFieldMapper.PRIMARY_TERM_NAME)__                if (primaryTerms == null || primaryTerms.advanceExact(docIdAndSeqNo.docId) == false) {_                    throw new AssertionError("document does not have primary term [" + docIdAndSeqNo.docId + "]")__                }_                primaryTerm = primaryTerms.longValue()__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,seq,no,else,seq,no,doc,id,and,seq,no,seq,no,numeric,doc,values,primary,terms,doc,id,and,seq,no,context,reader,get,numeric,doc,values,seq,no,field,mapper,if,primary,terms,null,primary,terms,advance,exact,doc,id,and,seq,no,doc,id,false,throw,new,assertion,error,document,does,not,have,primary,term,doc,id,and,seq,no,doc,id,primary,term,primary,terms,long,value,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1549908725;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = UNASSIGNED_PRIMARY_TERM__                seqNo = UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                NumericDocValues primaryTerms = docIdAndSeqNo.context.reader().getNumericDocValues(SeqNoFieldMapper.PRIMARY_TERM_NAME)__                if (primaryTerms == null || primaryTerms.advanceExact(docIdAndSeqNo.docId) == false) {_                    throw new AssertionError("document does not have primary term [" + docIdAndSeqNo.docId + "]")__                }_                primaryTerm = primaryTerms.longValue()__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,seq,no,else,seq,no,doc,id,and,seq,no,seq,no,numeric,doc,values,primary,terms,doc,id,and,seq,no,context,reader,get,numeric,doc,values,seq,no,field,mapper,if,primary,terms,null,primary,terms,advance,exact,doc,id,and,seq,no,doc,id,false,throw,new,assertion,error,document,does,not,have,primary,term,doc,id,and,seq,no,doc,id,primary,term,primary,terms,long,value,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1549975032;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = UNASSIGNED_PRIMARY_TERM__                seqNo = UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                NumericDocValues primaryTerms = docIdAndSeqNo.context.reader().getNumericDocValues(SeqNoFieldMapper.PRIMARY_TERM_NAME)__                if (primaryTerms == null || primaryTerms.advanceExact(docIdAndSeqNo.docId) == false) {_                    throw new AssertionError("document does not have primary term [" + docIdAndSeqNo.docId + "]")__                }_                primaryTerm = primaryTerms.longValue()__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,seq,no,else,seq,no,doc,id,and,seq,no,seq,no,numeric,doc,values,primary,terms,doc,id,and,seq,no,context,reader,get,numeric,doc,values,seq,no,field,mapper,if,primary,terms,null,primary,terms,advance,exact,doc,id,and,seq,no,doc,id,false,throw,new,assertion,error,document,does,not,have,primary,term,doc,id,and,seq,no,doc,id,primary,term,primary,terms,long,value,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1550256122;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = UNASSIGNED_PRIMARY_TERM__                seqNo = UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                NumericDocValues primaryTerms = docIdAndSeqNo.context.reader().getNumericDocValues(SeqNoFieldMapper.PRIMARY_TERM_NAME)__                if (primaryTerms == null || primaryTerms.advanceExact(docIdAndSeqNo.docId) == false) {_                    throw new AssertionError("document does not have primary term [" + docIdAndSeqNo.docId + "]")__                }_                primaryTerm = primaryTerms.longValue()__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,seq,no,else,seq,no,doc,id,and,seq,no,seq,no,numeric,doc,values,primary,terms,doc,id,and,seq,no,context,reader,get,numeric,doc,values,seq,no,field,mapper,if,primary,terms,null,primary,terms,advance,exact,doc,id,and,seq,no,doc,id,false,throw,new,assertion,error,document,does,not,have,primary,term,doc,id,and,seq,no,doc,id,primary,term,primary,terms,long,value,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1550526771;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = UNASSIGNED_PRIMARY_TERM__                seqNo = UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                NumericDocValues primaryTerms = docIdAndSeqNo.context.reader().getNumericDocValues(SeqNoFieldMapper.PRIMARY_TERM_NAME)__                if (primaryTerms == null || primaryTerms.advanceExact(docIdAndSeqNo.docId) == false) {_                    throw new AssertionError("document does not have primary term [" + docIdAndSeqNo.docId + "]")__                }_                primaryTerm = primaryTerms.longValue()__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,seq,no,else,seq,no,doc,id,and,seq,no,seq,no,numeric,doc,values,primary,terms,doc,id,and,seq,no,context,reader,get,numeric,doc,values,seq,no,field,mapper,if,primary,terms,null,primary,terms,advance,exact,doc,id,and,seq,no,doc,id,false,throw,new,assertion,error,document,does,not,have,primary,term,doc,id,and,seq,no,doc,id,primary,term,primary,terms,long,value,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException;1551126708;Return a tuple representing the sequence ID for the given {@code Get}_operation. The first value in the tuple is the sequence number, the_second is the primary term.;private Tuple<Long, Long> getSequenceID(Engine engine, Engine.Get get) throws EngineException {_        try (Searcher searcher = engine.acquireSearcher("get")) {_            final long primaryTerm__            final long seqNo__            DocIdAndSeqNo docIdAndSeqNo = VersionsAndSeqNoResolver.loadDocIdAndSeqNo(searcher.reader(), get.uid())__            if (docIdAndSeqNo == null) {_                primaryTerm = UNASSIGNED_PRIMARY_TERM__                seqNo = UNASSIGNED_SEQ_NO__            } else {_                seqNo = docIdAndSeqNo.seqNo__                NumericDocValues primaryTerms = docIdAndSeqNo.context.reader().getNumericDocValues(SeqNoFieldMapper.PRIMARY_TERM_NAME)__                if (primaryTerms == null || primaryTerms.advanceExact(docIdAndSeqNo.docId) == false) {_                    throw new AssertionError("document does not have primary term [" + docIdAndSeqNo.docId + "]")__                }_                primaryTerm = primaryTerms.longValue()__            }_            return new Tuple<>(seqNo, primaryTerm)__        } catch (Exception e) {_            throw new EngineException(shardId, "unable to retrieve sequence id", e)__        }_    };return,a,tuple,representing,the,sequence,id,for,the,given,code,get,operation,the,first,value,in,the,tuple,is,the,sequence,number,the,second,is,the,primary,term;private,tuple,long,long,get,sequence,id,engine,engine,engine,get,get,throws,engine,exception,try,searcher,searcher,engine,acquire,searcher,get,final,long,primary,term,final,long,seq,no,doc,id,and,seq,no,doc,id,and,seq,no,versions,and,seq,no,resolver,load,doc,id,and,seq,no,searcher,reader,get,uid,if,doc,id,and,seq,no,null,primary,term,seq,no,else,seq,no,doc,id,and,seq,no,seq,no,numeric,doc,values,primary,terms,doc,id,and,seq,no,context,reader,get,numeric,doc,values,seq,no,field,mapper,if,primary,terms,null,primary,terms,advance,exact,doc,id,and,seq,no,doc,id,false,throw,new,assertion,error,document,does,not,have,primary,term,doc,id,and,seq,no,doc,id,primary,term,primary,terms,long,value,return,new,tuple,seq,no,primary,term,catch,exception,e,throw,new,engine,exception,shard,id,unable,to,retrieve,sequence,id,e
InternalEngineTests -> public void testSegmentContainsOnlyNoOps() throws Exception;1535723122;Verifies that a segment containing only no-ops can be used to look up _version and _seqno.;public void testSegmentContainsOnlyNoOps() throws Exception {_        Engine.NoOpResult noOpResult = engine.noOp(new Engine.NoOp(1, primaryTerm.get(),_            randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), "test"))__        assertThat(noOpResult.getFailure(), nullValue())__        engine.refresh("test")__        Engine.DeleteResult deleteResult = engine.delete(replicaDeleteForDoc("id", 1, 2, randomNonNegativeLong()))__        assertThat(deleteResult.getFailure(), nullValue())__        engine.refresh("test")__    };verifies,that,a,segment,containing,only,no,ops,can,be,used,to,look,up,and;public,void,test,segment,contains,only,no,ops,throws,exception,engine,no,op,result,no,op,result,engine,no,op,new,engine,no,op,1,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,test,assert,that,no,op,result,get,failure,null,value,engine,refresh,test,engine,delete,result,delete,result,engine,delete,replica,delete,for,doc,id,1,2,random,non,negative,long,assert,that,delete,result,get,failure,null,value,engine,refresh,test
InternalEngineTests -> public void testSegmentContainsOnlyNoOps() throws Exception;1536218260;Verifies that a segment containing only no-ops can be used to look up _version and _seqno.;public void testSegmentContainsOnlyNoOps() throws Exception {_        Engine.NoOpResult noOpResult = engine.noOp(new Engine.NoOp(1, primaryTerm.get(),_            randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), "test"))__        assertThat(noOpResult.getFailure(), nullValue())__        engine.refresh("test")__        Engine.DeleteResult deleteResult = engine.delete(replicaDeleteForDoc("id", 1, 2, randomNonNegativeLong()))__        assertThat(deleteResult.getFailure(), nullValue())__        engine.refresh("test")__    };verifies,that,a,segment,containing,only,no,ops,can,be,used,to,look,up,and;public,void,test,segment,contains,only,no,ops,throws,exception,engine,no,op,result,no,op,result,engine,no,op,new,engine,no,op,1,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,test,assert,that,no,op,result,get,failure,null,value,engine,refresh,test,engine,delete,result,delete,result,engine,delete,replica,delete,for,doc,id,1,2,random,non,negative,long,assert,that,delete,result,get,failure,null,value,engine,refresh,test
InternalEngineTests -> public void testSegmentContainsOnlyNoOps() throws Exception;1536314350;Verifies that a segment containing only no-ops can be used to look up _version and _seqno.;public void testSegmentContainsOnlyNoOps() throws Exception {_        Engine.NoOpResult noOpResult = engine.noOp(new Engine.NoOp(1, primaryTerm.get(),_            randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), "test"))__        assertThat(noOpResult.getFailure(), nullValue())__        engine.refresh("test")__        Engine.DeleteResult deleteResult = engine.delete(replicaDeleteForDoc("id", 1, 2, randomNonNegativeLong()))__        assertThat(deleteResult.getFailure(), nullValue())__        engine.refresh("test")__    };verifies,that,a,segment,containing,only,no,ops,can,be,used,to,look,up,and;public,void,test,segment,contains,only,no,ops,throws,exception,engine,no,op,result,no,op,result,engine,no,op,new,engine,no,op,1,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,test,assert,that,no,op,result,get,failure,null,value,engine,refresh,test,engine,delete,result,delete,result,engine,delete,replica,delete,for,doc,id,1,2,random,non,negative,long,assert,that,delete,result,get,failure,null,value,engine,refresh,test
InternalEngineTests -> public void testSegmentContainsOnlyNoOps() throws Exception;1536611444;Verifies that a segment containing only no-ops can be used to look up _version and _seqno.;public void testSegmentContainsOnlyNoOps() throws Exception {_        Engine.NoOpResult noOpResult = engine.noOp(new Engine.NoOp(1, primaryTerm.get(),_            randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), "test"))__        assertThat(noOpResult.getFailure(), nullValue())__        engine.refresh("test")__        Engine.DeleteResult deleteResult = engine.delete(replicaDeleteForDoc("id", 1, 2, randomNonNegativeLong()))__        assertThat(deleteResult.getFailure(), nullValue())__        engine.refresh("test")__    };verifies,that,a,segment,containing,only,no,ops,can,be,used,to,look,up,and;public,void,test,segment,contains,only,no,ops,throws,exception,engine,no,op,result,no,op,result,engine,no,op,new,engine,no,op,1,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,test,assert,that,no,op,result,get,failure,null,value,engine,refresh,test,engine,delete,result,delete,result,engine,delete,replica,delete,for,doc,id,1,2,random,non,negative,long,assert,that,delete,result,get,failure,null,value,engine,refresh,test
InternalEngineTests -> public void testSegmentContainsOnlyNoOps() throws Exception;1536828374;Verifies that a segment containing only no-ops can be used to look up _version and _seqno.;public void testSegmentContainsOnlyNoOps() throws Exception {_        Engine.NoOpResult noOpResult = engine.noOp(new Engine.NoOp(1, primaryTerm.get(),_            randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), "test"))__        assertThat(noOpResult.getFailure(), nullValue())__        engine.refresh("test")__        Engine.DeleteResult deleteResult = engine.delete(replicaDeleteForDoc("id", 1, 2, randomNonNegativeLong()))__        assertThat(deleteResult.getFailure(), nullValue())__        engine.refresh("test")__    };verifies,that,a,segment,containing,only,no,ops,can,be,used,to,look,up,and;public,void,test,segment,contains,only,no,ops,throws,exception,engine,no,op,result,no,op,result,engine,no,op,new,engine,no,op,1,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,test,assert,that,no,op,result,get,failure,null,value,engine,refresh,test,engine,delete,result,delete,result,engine,delete,replica,delete,for,doc,id,1,2,random,non,negative,long,assert,that,delete,result,get,failure,null,value,engine,refresh,test
InternalEngineTests -> public void testSegmentContainsOnlyNoOps() throws Exception;1537806831;Verifies that a segment containing only no-ops can be used to look up _version and _seqno.;public void testSegmentContainsOnlyNoOps() throws Exception {_        Engine.NoOpResult noOpResult = engine.noOp(new Engine.NoOp(1, primaryTerm.get(),_            randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), "test"))__        assertThat(noOpResult.getFailure(), nullValue())__        engine.refresh("test")__        Engine.DeleteResult deleteResult = engine.delete(replicaDeleteForDoc("id", 1, 2, randomNonNegativeLong()))__        assertThat(deleteResult.getFailure(), nullValue())__        engine.refresh("test")__    };verifies,that,a,segment,containing,only,no,ops,can,be,used,to,look,up,and;public,void,test,segment,contains,only,no,ops,throws,exception,engine,no,op,result,no,op,result,engine,no,op,new,engine,no,op,1,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,test,assert,that,no,op,result,get,failure,null,value,engine,refresh,test,engine,delete,result,delete,result,engine,delete,replica,delete,for,doc,id,1,2,random,non,negative,long,assert,that,delete,result,get,failure,null,value,engine,refresh,test
InternalEngineTests -> public void testSegmentContainsOnlyNoOps() throws Exception;1538067637;Verifies that a segment containing only no-ops can be used to look up _version and _seqno.;public void testSegmentContainsOnlyNoOps() throws Exception {_        Engine.NoOpResult noOpResult = engine.noOp(new Engine.NoOp(1, primaryTerm.get(),_            randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), "test"))__        assertThat(noOpResult.getFailure(), nullValue())__        engine.refresh("test")__        Engine.DeleteResult deleteResult = engine.delete(replicaDeleteForDoc("id", 1, 2, randomNonNegativeLong()))__        assertThat(deleteResult.getFailure(), nullValue())__        engine.refresh("test")__    };verifies,that,a,segment,containing,only,no,ops,can,be,used,to,look,up,and;public,void,test,segment,contains,only,no,ops,throws,exception,engine,no,op,result,no,op,result,engine,no,op,new,engine,no,op,1,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,test,assert,that,no,op,result,get,failure,null,value,engine,refresh,test,engine,delete,result,delete,result,engine,delete,replica,delete,for,doc,id,1,2,random,non,negative,long,assert,that,delete,result,get,failure,null,value,engine,refresh,test
InternalEngineTests -> public void testSegmentContainsOnlyNoOps() throws Exception;1540238977;Verifies that a segment containing only no-ops can be used to look up _version and _seqno.;public void testSegmentContainsOnlyNoOps() throws Exception {_        Engine.NoOpResult noOpResult = engine.noOp(new Engine.NoOp(1, primaryTerm.get(),_            randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), "test"))__        assertThat(noOpResult.getFailure(), nullValue())__        engine.refresh("test")__        Engine.DeleteResult deleteResult = engine.delete(replicaDeleteForDoc("id", 1, 2, randomNonNegativeLong()))__        assertThat(deleteResult.getFailure(), nullValue())__        engine.refresh("test")__    };verifies,that,a,segment,containing,only,no,ops,can,be,used,to,look,up,and;public,void,test,segment,contains,only,no,ops,throws,exception,engine,no,op,result,no,op,result,engine,no,op,new,engine,no,op,1,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,test,assert,that,no,op,result,get,failure,null,value,engine,refresh,test,engine,delete,result,delete,result,engine,delete,replica,delete,for,doc,id,1,2,random,non,negative,long,assert,that,delete,result,get,failure,null,value,engine,refresh,test
InternalEngineTests -> public void testSegmentContainsOnlyNoOps() throws Exception;1540847035;Verifies that a segment containing only no-ops can be used to look up _version and _seqno.;public void testSegmentContainsOnlyNoOps() throws Exception {_        Engine.NoOpResult noOpResult = engine.noOp(new Engine.NoOp(1, primaryTerm.get(),_            randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), "test"))__        assertThat(noOpResult.getFailure(), nullValue())__        engine.refresh("test")__        Engine.DeleteResult deleteResult = engine.delete(replicaDeleteForDoc("id", 1, 2, randomNonNegativeLong()))__        assertThat(deleteResult.getFailure(), nullValue())__        engine.refresh("test")__    };verifies,that,a,segment,containing,only,no,ops,can,be,used,to,look,up,and;public,void,test,segment,contains,only,no,ops,throws,exception,engine,no,op,result,no,op,result,engine,no,op,new,engine,no,op,1,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,test,assert,that,no,op,result,get,failure,null,value,engine,refresh,test,engine,delete,result,delete,result,engine,delete,replica,delete,for,doc,id,1,2,random,non,negative,long,assert,that,delete,result,get,failure,null,value,engine,refresh,test
InternalEngineTests -> public void testSegmentContainsOnlyNoOps() throws Exception;1541335413;Verifies that a segment containing only no-ops can be used to look up _version and _seqno.;public void testSegmentContainsOnlyNoOps() throws Exception {_        Engine.NoOpResult noOpResult = engine.noOp(new Engine.NoOp(1, primaryTerm.get(),_            randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), "test"))__        assertThat(noOpResult.getFailure(), nullValue())__        engine.refresh("test")__        Engine.DeleteResult deleteResult = engine.delete(replicaDeleteForDoc("id", 1, 2, randomNonNegativeLong()))__        assertThat(deleteResult.getFailure(), nullValue())__        engine.refresh("test")__    };verifies,that,a,segment,containing,only,no,ops,can,be,used,to,look,up,and;public,void,test,segment,contains,only,no,ops,throws,exception,engine,no,op,result,no,op,result,engine,no,op,new,engine,no,op,1,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,test,assert,that,no,op,result,get,failure,null,value,engine,refresh,test,engine,delete,result,delete,result,engine,delete,replica,delete,for,doc,id,1,2,random,non,negative,long,assert,that,delete,result,get,failure,null,value,engine,refresh,test
InternalEngineTests -> public void testSegmentContainsOnlyNoOps() throws Exception;1541618615;Verifies that a segment containing only no-ops can be used to look up _version and _seqno.;public void testSegmentContainsOnlyNoOps() throws Exception {_        Engine.NoOpResult noOpResult = engine.noOp(new Engine.NoOp(1, primaryTerm.get(),_            randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), "test"))__        assertThat(noOpResult.getFailure(), nullValue())__        engine.refresh("test")__        Engine.DeleteResult deleteResult = engine.delete(replicaDeleteForDoc("id", 1, 2, randomNonNegativeLong()))__        assertThat(deleteResult.getFailure(), nullValue())__        engine.refresh("test")__    };verifies,that,a,segment,containing,only,no,ops,can,be,used,to,look,up,and;public,void,test,segment,contains,only,no,ops,throws,exception,engine,no,op,result,no,op,result,engine,no,op,new,engine,no,op,1,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,test,assert,that,no,op,result,get,failure,null,value,engine,refresh,test,engine,delete,result,delete,result,engine,delete,replica,delete,for,doc,id,1,2,random,non,negative,long,assert,that,delete,result,get,failure,null,value,engine,refresh,test
InternalEngineTests -> public void testSegmentContainsOnlyNoOps() throws Exception;1541622390;Verifies that a segment containing only no-ops can be used to look up _version and _seqno.;public void testSegmentContainsOnlyNoOps() throws Exception {_        Engine.NoOpResult noOpResult = engine.noOp(new Engine.NoOp(1, primaryTerm.get(),_            randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), "test"))__        assertThat(noOpResult.getFailure(), nullValue())__        engine.refresh("test")__        Engine.DeleteResult deleteResult = engine.delete(replicaDeleteForDoc("id", 1, 2, randomNonNegativeLong()))__        assertThat(deleteResult.getFailure(), nullValue())__        engine.refresh("test")__    };verifies,that,a,segment,containing,only,no,ops,can,be,used,to,look,up,and;public,void,test,segment,contains,only,no,ops,throws,exception,engine,no,op,result,no,op,result,engine,no,op,new,engine,no,op,1,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,test,assert,that,no,op,result,get,failure,null,value,engine,refresh,test,engine,delete,result,delete,result,engine,delete,replica,delete,for,doc,id,1,2,random,non,negative,long,assert,that,delete,result,get,failure,null,value,engine,refresh,test
InternalEngineTests -> public void testSegmentContainsOnlyNoOps() throws Exception;1542697754;Verifies that a segment containing only no-ops can be used to look up _version and _seqno.;public void testSegmentContainsOnlyNoOps() throws Exception {_        Engine.NoOpResult noOpResult = engine.noOp(new Engine.NoOp(1, primaryTerm.get(),_            randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), "test"))__        assertThat(noOpResult.getFailure(), nullValue())__        engine.refresh("test")__        Engine.DeleteResult deleteResult = engine.delete(replicaDeleteForDoc("id", 1, 2, randomNonNegativeLong()))__        assertThat(deleteResult.getFailure(), nullValue())__        engine.refresh("test")__    };verifies,that,a,segment,containing,only,no,ops,can,be,used,to,look,up,and;public,void,test,segment,contains,only,no,ops,throws,exception,engine,no,op,result,no,op,result,engine,no,op,new,engine,no,op,1,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,test,assert,that,no,op,result,get,failure,null,value,engine,refresh,test,engine,delete,result,delete,result,engine,delete,replica,delete,for,doc,id,1,2,random,non,negative,long,assert,that,delete,result,get,failure,null,value,engine,refresh,test
InternalEngineTests -> public void testSegmentContainsOnlyNoOps() throws Exception;1542893693;Verifies that a segment containing only no-ops can be used to look up _version and _seqno.;public void testSegmentContainsOnlyNoOps() throws Exception {_        Engine.NoOpResult noOpResult = engine.noOp(new Engine.NoOp(1, primaryTerm.get(),_            randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), "test"))__        assertThat(noOpResult.getFailure(), nullValue())__        engine.refresh("test")__        Engine.DeleteResult deleteResult = engine.delete(replicaDeleteForDoc("id", 1, 2, randomNonNegativeLong()))__        assertThat(deleteResult.getFailure(), nullValue())__        engine.refresh("test")__    };verifies,that,a,segment,containing,only,no,ops,can,be,used,to,look,up,and;public,void,test,segment,contains,only,no,ops,throws,exception,engine,no,op,result,no,op,result,engine,no,op,new,engine,no,op,1,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,test,assert,that,no,op,result,get,failure,null,value,engine,refresh,test,engine,delete,result,delete,result,engine,delete,replica,delete,for,doc,id,1,2,random,non,negative,long,assert,that,delete,result,get,failure,null,value,engine,refresh,test
InternalEngineTests -> public void testSegmentContainsOnlyNoOps() throws Exception;1543940134;Verifies that a segment containing only no-ops can be used to look up _version and _seqno.;public void testSegmentContainsOnlyNoOps() throws Exception {_        Engine.NoOpResult noOpResult = engine.noOp(new Engine.NoOp(1, primaryTerm.get(),_            randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), "test"))__        assertThat(noOpResult.getFailure(), nullValue())__        engine.refresh("test")__        Engine.DeleteResult deleteResult = engine.delete(replicaDeleteForDoc("id", 1, 2, randomNonNegativeLong()))__        assertThat(deleteResult.getFailure(), nullValue())__        engine.refresh("test")__    };verifies,that,a,segment,containing,only,no,ops,can,be,used,to,look,up,and;public,void,test,segment,contains,only,no,ops,throws,exception,engine,no,op,result,no,op,result,engine,no,op,new,engine,no,op,1,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,test,assert,that,no,op,result,get,failure,null,value,engine,refresh,test,engine,delete,result,delete,result,engine,delete,replica,delete,for,doc,id,1,2,random,non,negative,long,assert,that,delete,result,get,failure,null,value,engine,refresh,test
InternalEngineTests -> public void testSegmentContainsOnlyNoOps() throws Exception;1543942400;Verifies that a segment containing only no-ops can be used to look up _version and _seqno.;public void testSegmentContainsOnlyNoOps() throws Exception {_        Engine.NoOpResult noOpResult = engine.noOp(new Engine.NoOp(1, primaryTerm.get(),_            randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), "test"))__        assertThat(noOpResult.getFailure(), nullValue())__        engine.refresh("test")__        Engine.DeleteResult deleteResult = engine.delete(replicaDeleteForDoc("id", 1, 2, randomNonNegativeLong()))__        assertThat(deleteResult.getFailure(), nullValue())__        engine.refresh("test")__    };verifies,that,a,segment,containing,only,no,ops,can,be,used,to,look,up,and;public,void,test,segment,contains,only,no,ops,throws,exception,engine,no,op,result,no,op,result,engine,no,op,new,engine,no,op,1,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,test,assert,that,no,op,result,get,failure,null,value,engine,refresh,test,engine,delete,result,delete,result,engine,delete,replica,delete,for,doc,id,1,2,random,non,negative,long,assert,that,delete,result,get,failure,null,value,engine,refresh,test
InternalEngineTests -> public void testSegmentContainsOnlyNoOps() throws Exception;1544139474;Verifies that a segment containing only no-ops can be used to look up _version and _seqno.;public void testSegmentContainsOnlyNoOps() throws Exception {_        Engine.NoOpResult noOpResult = engine.noOp(new Engine.NoOp(1, primaryTerm.get(),_            randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), "test"))__        assertThat(noOpResult.getFailure(), nullValue())__        engine.refresh("test")__        Engine.DeleteResult deleteResult = engine.delete(replicaDeleteForDoc("id", 1, 2, randomNonNegativeLong()))__        assertThat(deleteResult.getFailure(), nullValue())__        engine.refresh("test")__    };verifies,that,a,segment,containing,only,no,ops,can,be,used,to,look,up,and;public,void,test,segment,contains,only,no,ops,throws,exception,engine,no,op,result,no,op,result,engine,no,op,new,engine,no,op,1,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,test,assert,that,no,op,result,get,failure,null,value,engine,refresh,test,engine,delete,result,delete,result,engine,delete,replica,delete,for,doc,id,1,2,random,non,negative,long,assert,that,delete,result,get,failure,null,value,engine,refresh,test
InternalEngineTests -> public void testSegmentContainsOnlyNoOps() throws Exception;1544203340;Verifies that a segment containing only no-ops can be used to look up _version and _seqno.;public void testSegmentContainsOnlyNoOps() throws Exception {_        Engine.NoOpResult noOpResult = engine.noOp(new Engine.NoOp(1, primaryTerm.get(),_            randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), "test"))__        assertThat(noOpResult.getFailure(), nullValue())__        engine.refresh("test")__        Engine.DeleteResult deleteResult = engine.delete(replicaDeleteForDoc("id", 1, 2, randomNonNegativeLong()))__        assertThat(deleteResult.getFailure(), nullValue())__        engine.refresh("test")__    };verifies,that,a,segment,containing,only,no,ops,can,be,used,to,look,up,and;public,void,test,segment,contains,only,no,ops,throws,exception,engine,no,op,result,no,op,result,engine,no,op,new,engine,no,op,1,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,test,assert,that,no,op,result,get,failure,null,value,engine,refresh,test,engine,delete,result,delete,result,engine,delete,replica,delete,for,doc,id,1,2,random,non,negative,long,assert,that,delete,result,get,failure,null,value,engine,refresh,test
InternalEngineTests -> public void testSegmentContainsOnlyNoOps() throws Exception;1544545090;Verifies that a segment containing only no-ops can be used to look up _version and _seqno.;public void testSegmentContainsOnlyNoOps() throws Exception {_        Engine.NoOpResult noOpResult = engine.noOp(new Engine.NoOp(1, primaryTerm.get(),_            randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), "test"))__        assertThat(noOpResult.getFailure(), nullValue())__        engine.refresh("test")__        Engine.DeleteResult deleteResult = engine.delete(replicaDeleteForDoc("id", 1, 2, randomNonNegativeLong()))__        assertThat(deleteResult.getFailure(), nullValue())__        engine.refresh("test")__    };verifies,that,a,segment,containing,only,no,ops,can,be,used,to,look,up,and;public,void,test,segment,contains,only,no,ops,throws,exception,engine,no,op,result,no,op,result,engine,no,op,new,engine,no,op,1,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,test,assert,that,no,op,result,get,failure,null,value,engine,refresh,test,engine,delete,result,delete,result,engine,delete,replica,delete,for,doc,id,1,2,random,non,negative,long,assert,that,delete,result,get,failure,null,value,engine,refresh,test
InternalEngineTests -> public void testSegmentContainsOnlyNoOps() throws Exception;1544684920;Verifies that a segment containing only no-ops can be used to look up _version and _seqno.;public void testSegmentContainsOnlyNoOps() throws Exception {_        Engine.NoOpResult noOpResult = engine.noOp(new Engine.NoOp(1, primaryTerm.get(),_            randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), "test"))__        assertThat(noOpResult.getFailure(), nullValue())__        engine.refresh("test")__        Engine.DeleteResult deleteResult = engine.delete(replicaDeleteForDoc("id", 1, 2, randomNonNegativeLong()))__        assertThat(deleteResult.getFailure(), nullValue())__        engine.refresh("test")__    };verifies,that,a,segment,containing,only,no,ops,can,be,used,to,look,up,and;public,void,test,segment,contains,only,no,ops,throws,exception,engine,no,op,result,no,op,result,engine,no,op,new,engine,no,op,1,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,test,assert,that,no,op,result,get,failure,null,value,engine,refresh,test,engine,delete,result,delete,result,engine,delete,replica,delete,for,doc,id,1,2,random,non,negative,long,assert,that,delete,result,get,failure,null,value,engine,refresh,test
InternalEngineTests -> public void testSegmentContainsOnlyNoOps() throws Exception;1544783136;Verifies that a segment containing only no-ops can be used to look up _version and _seqno.;public void testSegmentContainsOnlyNoOps() throws Exception {_        Engine.NoOpResult noOpResult = engine.noOp(new Engine.NoOp(1, primaryTerm.get(),_            randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), "test"))__        assertThat(noOpResult.getFailure(), nullValue())__        engine.refresh("test")__        Engine.DeleteResult deleteResult = engine.delete(replicaDeleteForDoc("id", 1, 2, randomNonNegativeLong()))__        assertThat(deleteResult.getFailure(), nullValue())__        engine.refresh("test")__    };verifies,that,a,segment,containing,only,no,ops,can,be,used,to,look,up,and;public,void,test,segment,contains,only,no,ops,throws,exception,engine,no,op,result,no,op,result,engine,no,op,new,engine,no,op,1,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,test,assert,that,no,op,result,get,failure,null,value,engine,refresh,test,engine,delete,result,delete,result,engine,delete,replica,delete,for,doc,id,1,2,random,non,negative,long,assert,that,delete,result,get,failure,null,value,engine,refresh,test
InternalEngineTests -> public void testSegmentContainsOnlyNoOps() throws Exception;1544819407;Verifies that a segment containing only no-ops can be used to look up _version and _seqno.;public void testSegmentContainsOnlyNoOps() throws Exception {_        Engine.NoOpResult noOpResult = engine.noOp(new Engine.NoOp(1, primaryTerm.get(),_            randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), "test"))__        assertThat(noOpResult.getFailure(), nullValue())__        engine.refresh("test")__        Engine.DeleteResult deleteResult = engine.delete(replicaDeleteForDoc("id", 1, 2, randomNonNegativeLong()))__        assertThat(deleteResult.getFailure(), nullValue())__        engine.refresh("test")__    };verifies,that,a,segment,containing,only,no,ops,can,be,used,to,look,up,and;public,void,test,segment,contains,only,no,ops,throws,exception,engine,no,op,result,no,op,result,engine,no,op,new,engine,no,op,1,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,test,assert,that,no,op,result,get,failure,null,value,engine,refresh,test,engine,delete,result,delete,result,engine,delete,replica,delete,for,doc,id,1,2,random,non,negative,long,assert,that,delete,result,get,failure,null,value,engine,refresh,test
InternalEngineTests -> public void testSegmentContainsOnlyNoOps() throws Exception;1545207154;Verifies that a segment containing only no-ops can be used to look up _version and _seqno.;public void testSegmentContainsOnlyNoOps() throws Exception {_        Engine.NoOpResult noOpResult = engine.noOp(new Engine.NoOp(1, primaryTerm.get(),_            randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), "test"))__        assertThat(noOpResult.getFailure(), nullValue())__        engine.refresh("test")__        Engine.DeleteResult deleteResult = engine.delete(replicaDeleteForDoc("id", 1, 2, randomNonNegativeLong()))__        assertThat(deleteResult.getFailure(), nullValue())__        engine.refresh("test")__    };verifies,that,a,segment,containing,only,no,ops,can,be,used,to,look,up,and;public,void,test,segment,contains,only,no,ops,throws,exception,engine,no,op,result,no,op,result,engine,no,op,new,engine,no,op,1,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,test,assert,that,no,op,result,get,failure,null,value,engine,refresh,test,engine,delete,result,delete,result,engine,delete,replica,delete,for,doc,id,1,2,random,non,negative,long,assert,that,delete,result,get,failure,null,value,engine,refresh,test
InternalEngineTests -> public void testSegmentContainsOnlyNoOps() throws Exception;1545221705;Verifies that a segment containing only no-ops can be used to look up _version and _seqno.;public void testSegmentContainsOnlyNoOps() throws Exception {_        Engine.NoOpResult noOpResult = engine.noOp(new Engine.NoOp(1, primaryTerm.get(),_            randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), "test"))__        assertThat(noOpResult.getFailure(), nullValue())__        engine.refresh("test")__        Engine.DeleteResult deleteResult = engine.delete(replicaDeleteForDoc("id", 1, 2, randomNonNegativeLong()))__        assertThat(deleteResult.getFailure(), nullValue())__        engine.refresh("test")__    };verifies,that,a,segment,containing,only,no,ops,can,be,used,to,look,up,and;public,void,test,segment,contains,only,no,ops,throws,exception,engine,no,op,result,no,op,result,engine,no,op,new,engine,no,op,1,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,test,assert,that,no,op,result,get,failure,null,value,engine,refresh,test,engine,delete,result,delete,result,engine,delete,replica,delete,for,doc,id,1,2,random,non,negative,long,assert,that,delete,result,get,failure,null,value,engine,refresh,test
InternalEngineTests -> public void testSegmentContainsOnlyNoOps() throws Exception;1545519642;Verifies that a segment containing only no-ops can be used to look up _version and _seqno.;public void testSegmentContainsOnlyNoOps() throws Exception {_        Engine.NoOpResult noOpResult = engine.noOp(new Engine.NoOp(1, primaryTerm.get(),_            randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), "test"))__        assertThat(noOpResult.getFailure(), nullValue())__        engine.refresh("test")__        Engine.DeleteResult deleteResult = engine.delete(replicaDeleteForDoc("id", 1, 2, randomNonNegativeLong()))__        assertThat(deleteResult.getFailure(), nullValue())__        engine.refresh("test")__    };verifies,that,a,segment,containing,only,no,ops,can,be,used,to,look,up,and;public,void,test,segment,contains,only,no,ops,throws,exception,engine,no,op,result,no,op,result,engine,no,op,new,engine,no,op,1,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,test,assert,that,no,op,result,get,failure,null,value,engine,refresh,test,engine,delete,result,delete,result,engine,delete,replica,delete,for,doc,id,1,2,random,non,negative,long,assert,that,delete,result,get,failure,null,value,engine,refresh,test
InternalEngineTests -> public void testSegmentContainsOnlyNoOps() throws Exception;1546875837;Verifies that a segment containing only no-ops can be used to look up _version and _seqno.;public void testSegmentContainsOnlyNoOps() throws Exception {_        Engine.NoOpResult noOpResult = engine.noOp(new Engine.NoOp(1, primaryTerm.get(),_            randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), "test"))__        assertThat(noOpResult.getFailure(), nullValue())__        engine.refresh("test")__        Engine.DeleteResult deleteResult = engine.delete(replicaDeleteForDoc("id", 1, 2, randomNonNegativeLong()))__        assertThat(deleteResult.getFailure(), nullValue())__        engine.refresh("test")__    };verifies,that,a,segment,containing,only,no,ops,can,be,used,to,look,up,and;public,void,test,segment,contains,only,no,ops,throws,exception,engine,no,op,result,no,op,result,engine,no,op,new,engine,no,op,1,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,test,assert,that,no,op,result,get,failure,null,value,engine,refresh,test,engine,delete,result,delete,result,engine,delete,replica,delete,for,doc,id,1,2,random,non,negative,long,assert,that,delete,result,get,failure,null,value,engine,refresh,test
InternalEngineTests -> public void testSegmentContainsOnlyNoOps() throws Exception;1547174095;Verifies that a segment containing only no-ops can be used to look up _version and _seqno.;public void testSegmentContainsOnlyNoOps() throws Exception {_        Engine.NoOpResult noOpResult = engine.noOp(new Engine.NoOp(1, primaryTerm.get(),_            randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), "test"))__        assertThat(noOpResult.getFailure(), nullValue())__        engine.refresh("test")__        Engine.DeleteResult deleteResult = engine.delete(replicaDeleteForDoc("id", 1, 2, randomNonNegativeLong()))__        assertThat(deleteResult.getFailure(), nullValue())__        engine.refresh("test")__    };verifies,that,a,segment,containing,only,no,ops,can,be,used,to,look,up,and;public,void,test,segment,contains,only,no,ops,throws,exception,engine,no,op,result,no,op,result,engine,no,op,new,engine,no,op,1,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,test,assert,that,no,op,result,get,failure,null,value,engine,refresh,test,engine,delete,result,delete,result,engine,delete,replica,delete,for,doc,id,1,2,random,non,negative,long,assert,that,delete,result,get,failure,null,value,engine,refresh,test
InternalEngineTests -> public void testSegmentContainsOnlyNoOps() throws Exception;1547332999;Verifies that a segment containing only no-ops can be used to look up _version and _seqno.;public void testSegmentContainsOnlyNoOps() throws Exception {_        Engine.NoOpResult noOpResult = engine.noOp(new Engine.NoOp(1, primaryTerm.get(),_            randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), "test"))__        assertThat(noOpResult.getFailure(), nullValue())__        engine.refresh("test")__        Engine.DeleteResult deleteResult = engine.delete(replicaDeleteForDoc("id", 1, 2, randomNonNegativeLong()))__        assertThat(deleteResult.getFailure(), nullValue())__        engine.refresh("test")__    };verifies,that,a,segment,containing,only,no,ops,can,be,used,to,look,up,and;public,void,test,segment,contains,only,no,ops,throws,exception,engine,no,op,result,no,op,result,engine,no,op,new,engine,no,op,1,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,test,assert,that,no,op,result,get,failure,null,value,engine,refresh,test,engine,delete,result,delete,result,engine,delete,replica,delete,for,doc,id,1,2,random,non,negative,long,assert,that,delete,result,get,failure,null,value,engine,refresh,test
InternalEngineTests -> public void testSegmentContainsOnlyNoOps() throws Exception;1548342168;Verifies that a segment containing only no-ops can be used to look up _version and _seqno.;public void testSegmentContainsOnlyNoOps() throws Exception {_        Engine.NoOpResult noOpResult = engine.noOp(new Engine.NoOp(1, primaryTerm.get(),_            randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), "test"))__        assertThat(noOpResult.getFailure(), nullValue())__        engine.refresh("test")__        Engine.DeleteResult deleteResult = engine.delete(replicaDeleteForDoc("id", 1, 2, randomNonNegativeLong()))__        assertThat(deleteResult.getFailure(), nullValue())__        engine.refresh("test")__    };verifies,that,a,segment,containing,only,no,ops,can,be,used,to,look,up,and;public,void,test,segment,contains,only,no,ops,throws,exception,engine,no,op,result,no,op,result,engine,no,op,new,engine,no,op,1,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,test,assert,that,no,op,result,get,failure,null,value,engine,refresh,test,engine,delete,result,delete,result,engine,delete,replica,delete,for,doc,id,1,2,random,non,negative,long,assert,that,delete,result,get,failure,null,value,engine,refresh,test
InternalEngineTests -> public void testSegmentContainsOnlyNoOps() throws Exception;1548771485;Verifies that a segment containing only no-ops can be used to look up _version and _seqno.;public void testSegmentContainsOnlyNoOps() throws Exception {_        Engine.NoOpResult noOpResult = engine.noOp(new Engine.NoOp(1, primaryTerm.get(),_            randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), "test"))__        assertThat(noOpResult.getFailure(), nullValue())__        engine.refresh("test")__        Engine.DeleteResult deleteResult = engine.delete(replicaDeleteForDoc("id", 1, 2, randomNonNegativeLong()))__        assertThat(deleteResult.getFailure(), nullValue())__        engine.refresh("test")__    };verifies,that,a,segment,containing,only,no,ops,can,be,used,to,look,up,and;public,void,test,segment,contains,only,no,ops,throws,exception,engine,no,op,result,no,op,result,engine,no,op,new,engine,no,op,1,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,test,assert,that,no,op,result,get,failure,null,value,engine,refresh,test,engine,delete,result,delete,result,engine,delete,replica,delete,for,doc,id,1,2,random,non,negative,long,assert,that,delete,result,get,failure,null,value,engine,refresh,test
InternalEngineTests -> public void testSegmentContainsOnlyNoOps() throws Exception;1548843917;Verifies that a segment containing only no-ops can be used to look up _version and _seqno.;public void testSegmentContainsOnlyNoOps() throws Exception {_        Engine.NoOpResult noOpResult = engine.noOp(new Engine.NoOp(1, primaryTerm.get(),_            randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), "test"))__        assertThat(noOpResult.getFailure(), nullValue())__        engine.refresh("test")__        Engine.DeleteResult deleteResult = engine.delete(replicaDeleteForDoc("id", 1, 2, randomNonNegativeLong()))__        assertThat(deleteResult.getFailure(), nullValue())__        engine.refresh("test")__    };verifies,that,a,segment,containing,only,no,ops,can,be,used,to,look,up,and;public,void,test,segment,contains,only,no,ops,throws,exception,engine,no,op,result,no,op,result,engine,no,op,new,engine,no,op,1,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,test,assert,that,no,op,result,get,failure,null,value,engine,refresh,test,engine,delete,result,delete,result,engine,delete,replica,delete,for,doc,id,1,2,random,non,negative,long,assert,that,delete,result,get,failure,null,value,engine,refresh,test
InternalEngineTests -> public void testSegmentContainsOnlyNoOps() throws Exception;1549059559;Verifies that a segment containing only no-ops can be used to look up _version and _seqno.;public void testSegmentContainsOnlyNoOps() throws Exception {_        Engine.NoOpResult noOpResult = engine.noOp(new Engine.NoOp(1, primaryTerm.get(),_            randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), "test"))__        assertThat(noOpResult.getFailure(), nullValue())__        engine.refresh("test")__        Engine.DeleteResult deleteResult = engine.delete(replicaDeleteForDoc("id", 1, 2, randomNonNegativeLong()))__        assertThat(deleteResult.getFailure(), nullValue())__        engine.refresh("test")__    };verifies,that,a,segment,containing,only,no,ops,can,be,used,to,look,up,and;public,void,test,segment,contains,only,no,ops,throws,exception,engine,no,op,result,no,op,result,engine,no,op,new,engine,no,op,1,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,test,assert,that,no,op,result,get,failure,null,value,engine,refresh,test,engine,delete,result,delete,result,engine,delete,replica,delete,for,doc,id,1,2,random,non,negative,long,assert,that,delete,result,get,failure,null,value,engine,refresh,test
InternalEngineTests -> public void testSegmentContainsOnlyNoOps() throws Exception;1549639236;Verifies that a segment containing only no-ops can be used to look up _version and _seqno.;public void testSegmentContainsOnlyNoOps() throws Exception {_        Engine.NoOpResult noOpResult = engine.noOp(new Engine.NoOp(1, primaryTerm.get(),_            randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), "test"))__        assertThat(noOpResult.getFailure(), nullValue())__        engine.refresh("test")__        Engine.DeleteResult deleteResult = engine.delete(replicaDeleteForDoc("id", 1, 2, randomNonNegativeLong()))__        assertThat(deleteResult.getFailure(), nullValue())__        engine.refresh("test")__    };verifies,that,a,segment,containing,only,no,ops,can,be,used,to,look,up,and;public,void,test,segment,contains,only,no,ops,throws,exception,engine,no,op,result,no,op,result,engine,no,op,new,engine,no,op,1,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,test,assert,that,no,op,result,get,failure,null,value,engine,refresh,test,engine,delete,result,delete,result,engine,delete,replica,delete,for,doc,id,1,2,random,non,negative,long,assert,that,delete,result,get,failure,null,value,engine,refresh,test
InternalEngineTests -> public void testSegmentContainsOnlyNoOps() throws Exception;1549898480;Verifies that a segment containing only no-ops can be used to look up _version and _seqno.;public void testSegmentContainsOnlyNoOps() throws Exception {_        Engine.NoOpResult noOpResult = engine.noOp(new Engine.NoOp(1, primaryTerm.get(),_            randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), "test"))__        assertThat(noOpResult.getFailure(), nullValue())__        engine.refresh("test")__        Engine.DeleteResult deleteResult = engine.delete(replicaDeleteForDoc("id", 1, 2, randomNonNegativeLong()))__        assertThat(deleteResult.getFailure(), nullValue())__        engine.refresh("test")__    };verifies,that,a,segment,containing,only,no,ops,can,be,used,to,look,up,and;public,void,test,segment,contains,only,no,ops,throws,exception,engine,no,op,result,no,op,result,engine,no,op,new,engine,no,op,1,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,test,assert,that,no,op,result,get,failure,null,value,engine,refresh,test,engine,delete,result,delete,result,engine,delete,replica,delete,for,doc,id,1,2,random,non,negative,long,assert,that,delete,result,get,failure,null,value,engine,refresh,test
InternalEngineTests -> public void testSegmentContainsOnlyNoOps() throws Exception;1549908725;Verifies that a segment containing only no-ops can be used to look up _version and _seqno.;public void testSegmentContainsOnlyNoOps() throws Exception {_        Engine.NoOpResult noOpResult = engine.noOp(new Engine.NoOp(1, primaryTerm.get(),_            randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), "test"))__        assertThat(noOpResult.getFailure(), nullValue())__        engine.refresh("test")__        Engine.DeleteResult deleteResult = engine.delete(replicaDeleteForDoc("id", 1, 2, randomNonNegativeLong()))__        assertThat(deleteResult.getFailure(), nullValue())__        engine.refresh("test")__    };verifies,that,a,segment,containing,only,no,ops,can,be,used,to,look,up,and;public,void,test,segment,contains,only,no,ops,throws,exception,engine,no,op,result,no,op,result,engine,no,op,new,engine,no,op,1,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,test,assert,that,no,op,result,get,failure,null,value,engine,refresh,test,engine,delete,result,delete,result,engine,delete,replica,delete,for,doc,id,1,2,random,non,negative,long,assert,that,delete,result,get,failure,null,value,engine,refresh,test
InternalEngineTests -> public void testSegmentContainsOnlyNoOps() throws Exception;1549975032;Verifies that a segment containing only no-ops can be used to look up _version and _seqno.;public void testSegmentContainsOnlyNoOps() throws Exception {_        Engine.NoOpResult noOpResult = engine.noOp(new Engine.NoOp(1, primaryTerm.get(),_            randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), "test"))__        assertThat(noOpResult.getFailure(), nullValue())__        engine.refresh("test")__        Engine.DeleteResult deleteResult = engine.delete(replicaDeleteForDoc("id", 1, 2, randomNonNegativeLong()))__        assertThat(deleteResult.getFailure(), nullValue())__        engine.refresh("test")__    };verifies,that,a,segment,containing,only,no,ops,can,be,used,to,look,up,and;public,void,test,segment,contains,only,no,ops,throws,exception,engine,no,op,result,no,op,result,engine,no,op,new,engine,no,op,1,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,test,assert,that,no,op,result,get,failure,null,value,engine,refresh,test,engine,delete,result,delete,result,engine,delete,replica,delete,for,doc,id,1,2,random,non,negative,long,assert,that,delete,result,get,failure,null,value,engine,refresh,test
InternalEngineTests -> public void testSegmentContainsOnlyNoOps() throws Exception;1550256122;Verifies that a segment containing only no-ops can be used to look up _version and _seqno.;public void testSegmentContainsOnlyNoOps() throws Exception {_        Engine.NoOpResult noOpResult = engine.noOp(new Engine.NoOp(1, primaryTerm.get(),_            randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), "test"))__        assertThat(noOpResult.getFailure(), nullValue())__        engine.refresh("test")__        Engine.DeleteResult deleteResult = engine.delete(replicaDeleteForDoc("id", 1, 2, randomNonNegativeLong()))__        assertThat(deleteResult.getFailure(), nullValue())__        engine.refresh("test")__    };verifies,that,a,segment,containing,only,no,ops,can,be,used,to,look,up,and;public,void,test,segment,contains,only,no,ops,throws,exception,engine,no,op,result,no,op,result,engine,no,op,new,engine,no,op,1,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,test,assert,that,no,op,result,get,failure,null,value,engine,refresh,test,engine,delete,result,delete,result,engine,delete,replica,delete,for,doc,id,1,2,random,non,negative,long,assert,that,delete,result,get,failure,null,value,engine,refresh,test
InternalEngineTests -> public void testSegmentContainsOnlyNoOps() throws Exception;1550526771;Verifies that a segment containing only no-ops can be used to look up _version and _seqno.;public void testSegmentContainsOnlyNoOps() throws Exception {_        Engine.NoOpResult noOpResult = engine.noOp(new Engine.NoOp(1, primaryTerm.get(),_            randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), "test"))__        assertThat(noOpResult.getFailure(), nullValue())__        engine.refresh("test")__        Engine.DeleteResult deleteResult = engine.delete(replicaDeleteForDoc("id", 1, 2, randomNonNegativeLong()))__        assertThat(deleteResult.getFailure(), nullValue())__        engine.refresh("test")__    };verifies,that,a,segment,containing,only,no,ops,can,be,used,to,look,up,and;public,void,test,segment,contains,only,no,ops,throws,exception,engine,no,op,result,no,op,result,engine,no,op,new,engine,no,op,1,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,test,assert,that,no,op,result,get,failure,null,value,engine,refresh,test,engine,delete,result,delete,result,engine,delete,replica,delete,for,doc,id,1,2,random,non,negative,long,assert,that,delete,result,get,failure,null,value,engine,refresh,test
InternalEngineTests -> public void testSegmentContainsOnlyNoOps() throws Exception;1551126708;Verifies that a segment containing only no-ops can be used to look up _version and _seqno.;public void testSegmentContainsOnlyNoOps() throws Exception {_        Engine.NoOpResult noOpResult = engine.noOp(new Engine.NoOp(1, primaryTerm.get(),_            randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), "test"))__        assertThat(noOpResult.getFailure(), nullValue())__        engine.refresh("test")__        Engine.DeleteResult deleteResult = engine.delete(replicaDeleteForDoc("id", 1, 2, randomNonNegativeLong()))__        assertThat(deleteResult.getFailure(), nullValue())__        engine.refresh("test")__    };verifies,that,a,segment,containing,only,no,ops,can,be,used,to,look,up,and;public,void,test,segment,contains,only,no,ops,throws,exception,engine,no,op,result,no,op,result,engine,no,op,new,engine,no,op,1,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,test,assert,that,no,op,result,get,failure,null,value,engine,refresh,test,engine,delete,result,delete,result,engine,delete,replica,delete,for,doc,id,1,2,random,non,negative,long,assert,that,delete,result,get,failure,null,value,engine,refresh,test
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1524684173;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final Document document = testDocumentWithTextField()__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> SequenceNumbers.UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__        final ParsedDocument doc = testParsedDocument("1", null, document, B_1, null)__        final Term uid = newUid(doc)__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    VersionType.EXTERNAL,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    VersionType.EXTERNAL,_                    origin,_                    System.nanoTime())__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpointTracker().getCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false, "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,document,document,test,document,with,text,field,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,numbers,sequence,number,get,and,increment,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,final,parsed,document,doc,test,parsed,document,1,null,document,null,final,term,uid,new,uid,doc,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,sequence,number,supplier,get,as,long,1,i,version,type,external,origin,system,nano,time,index,request,false,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,version,type,external,origin,system,nano,time,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,tracker,get,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1524780945;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final Document document = testDocumentWithTextField()__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> SequenceNumbers.UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__        final ParsedDocument doc = testParsedDocument("1", null, document, B_1, null)__        final Term uid = newUid(doc)__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    VersionType.EXTERNAL,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    VersionType.EXTERNAL,_                    origin,_                    System.nanoTime())__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpointTracker().getCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false, "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,document,document,test,document,with,text,field,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,numbers,sequence,number,get,and,increment,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,final,parsed,document,doc,test,parsed,document,1,null,document,null,final,term,uid,new,uid,doc,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,sequence,number,supplier,get,as,long,1,i,version,type,external,origin,system,nano,time,index,request,false,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,version,type,external,origin,system,nano,time,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,tracker,get,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1525162917;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final Document document = testDocumentWithTextField()__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> SequenceNumbers.UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__        final ParsedDocument doc = testParsedDocument("1", null, document, B_1, null)__        final Term uid = newUid(doc)__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    VersionType.EXTERNAL,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    VersionType.EXTERNAL,_                    origin,_                    System.nanoTime())__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpointTracker().getCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false, "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,document,document,test,document,with,text,field,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,numbers,sequence,number,get,and,increment,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,final,parsed,document,doc,test,parsed,document,1,null,document,null,final,term,uid,new,uid,doc,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,sequence,number,supplier,get,as,long,1,i,version,type,external,origin,system,nano,time,index,request,false,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,version,type,external,origin,system,nano,time,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,tracker,get,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1525645056;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final Document document = testDocumentWithTextField()__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> SequenceNumbers.UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__        final ParsedDocument doc = testParsedDocument("1", null, document, B_1, null)__        final Term uid = newUid(doc)__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    VersionType.EXTERNAL,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    VersionType.EXTERNAL,_                    origin,_                    System.nanoTime())__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpointTracker().getCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false, "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,document,document,test,document,with,text,field,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,numbers,sequence,number,get,and,increment,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,final,parsed,document,doc,test,parsed,document,1,null,document,null,final,term,uid,new,uid,doc,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,sequence,number,supplier,get,as,long,1,i,version,type,external,origin,system,nano,time,index,request,false,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,version,type,external,origin,system,nano,time,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,tracker,get,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1527583663;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final Document document = testDocumentWithTextField()__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> SequenceNumbers.UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__        final ParsedDocument doc = testParsedDocument("1", null, document, B_1, null)__        final Term uid = newUid(doc)__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    VersionType.EXTERNAL,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    VersionType.EXTERNAL,_                    origin,_                    System.nanoTime())__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpointTracker().getCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false, "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,document,document,test,document,with,text,field,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,numbers,sequence,number,get,and,increment,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,final,parsed,document,doc,test,parsed,document,1,null,document,null,final,term,uid,new,uid,doc,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,sequence,number,supplier,get,as,long,1,i,version,type,external,origin,system,nano,time,index,request,false,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,version,type,external,origin,system,nano,time,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,tracker,get,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1528706846;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final Document document = testDocumentWithTextField()__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> SequenceNumbers.UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__        final ParsedDocument doc = testParsedDocument("1", null, document, B_1, null)__        final Term uid = newUid(doc)__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    VersionType.EXTERNAL,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    VersionType.EXTERNAL,_                    origin,_                    System.nanoTime())__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false, "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,document,document,test,document,with,text,field,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,numbers,sequence,number,get,and,increment,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,final,parsed,document,doc,test,parsed,document,1,null,document,null,final,term,uid,new,uid,doc,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,sequence,number,supplier,get,as,long,1,i,version,type,external,origin,system,nano,time,index,request,false,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,version,type,external,origin,system,nano,time,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1528762805;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final Document document = testDocumentWithTextField()__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> SequenceNumbers.UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__        final ParsedDocument doc = testParsedDocument("1", null, document, B_1, null)__        final Term uid = newUid(doc)__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    VersionType.EXTERNAL,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    VersionType.EXTERNAL,_                    origin,_                    System.nanoTime())__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false, "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,document,document,test,document,with,text,field,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,numbers,sequence,number,get,and,increment,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,final,parsed,document,doc,test,parsed,document,1,null,document,null,final,term,uid,new,uid,doc,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,sequence,number,supplier,get,as,long,1,i,version,type,external,origin,system,nano,time,index,request,false,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,version,type,external,origin,system,nano,time,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1531910483;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final Document document = testDocumentWithTextField()__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> SequenceNumbers.UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__        final ParsedDocument doc = testParsedDocument("1", null, document, B_1, null)__        final Term uid = newUid(doc)__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime())__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false, "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,document,document,test,document,with,text,field,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,numbers,sequence,number,get,and,increment,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,final,parsed,document,doc,test,parsed,document,1,null,document,null,final,term,uid,new,uid,doc,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,index,request,false,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1532947734;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final Document document = testDocumentWithTextField()__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> SequenceNumbers.UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__        final ParsedDocument doc = testParsedDocument("1", null, document, B_1, null)__        final Term uid = newUid(doc)__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime())__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false, "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,document,document,test,document,with,text,field,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,numbers,sequence,number,get,and,increment,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,final,parsed,document,doc,test,parsed,document,1,null,document,null,final,term,uid,new,uid,doc,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,index,request,false,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1533063033;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final Document document = testDocumentWithTextField()__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> SequenceNumbers.UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__        final ParsedDocument doc = testParsedDocument("1", null, document, B_1, null)__        final Term uid = newUid(doc)__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime())__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false, "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,document,document,test,document,with,text,field,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,numbers,sequence,number,get,and,increment,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,final,parsed,document,doc,test,parsed,document,1,null,document,null,final,term,uid,new,uid,doc,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,index,request,false,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1533234568;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final Document document = testDocumentWithTextField()__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> SequenceNumbers.UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__        final ParsedDocument doc = testParsedDocument("1", null, document, B_1, null)__        final Term uid = newUid(doc)__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime())__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false, "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,document,document,test,document,with,text,field,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,numbers,sequence,number,get,and,increment,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,final,parsed,document,doc,test,parsed,document,1,null,document,null,final,term,uid,new,uid,doc,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,index,request,false,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1534848846;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final Document document = testDocumentWithTextField()__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> SequenceNumbers.UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__        final ParsedDocument doc = testParsedDocument("1", null, document, B_1, null)__        final Term uid = newUid(doc)__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime())__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false, "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,document,document,test,document,with,text,field,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,numbers,sequence,number,get,and,increment,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,final,parsed,document,doc,test,parsed,document,1,null,document,null,final,term,uid,new,uid,doc,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,index,request,false,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1535046779;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final Document document = testDocumentWithTextField()__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> SequenceNumbers.UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__        final ParsedDocument doc = testParsedDocument("1", null, document, B_1, null)__        final Term uid = newUid(doc)__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime())__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false, "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,document,document,test,document,with,text,field,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,numbers,sequence,number,get,and,increment,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,final,parsed,document,doc,test,parsed,document,1,null,document,null,final,term,uid,new,uid,doc,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,index,request,false,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1535723122;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> SequenceNumbers.UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        final Supplier<ParsedDocument> doc = () -> {_            final Document document = testDocumentWithTextField()__            document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__            return testParsedDocument("1", null, document, B_1, null)__        }__        final Term uid = newUid("1")__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc.get(),_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime())__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false, "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,numbers,sequence,number,get,and,increment,final,supplier,parsed,document,doc,final,document,document,test,document,with,text,field,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,return,test,parsed,document,1,null,document,null,final,term,uid,new,uid,1,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,get,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,index,request,false,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1536218260;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> SequenceNumbers.UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        final Supplier<ParsedDocument> doc = () -> {_            final Document document = testDocumentWithTextField()__            document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__            return testParsedDocument("1", null, document, B_1, null)__        }__        final Term uid = newUid("1")__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc.get(),_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime())__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false, "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,numbers,sequence,number,get,and,increment,final,supplier,parsed,document,doc,final,document,document,test,document,with,text,field,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,return,test,parsed,document,1,null,document,null,final,term,uid,new,uid,1,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,get,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,index,request,false,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1536314350;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> SequenceNumbers.UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        final Supplier<ParsedDocument> doc = () -> {_            final Document document = testDocumentWithTextField()__            document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__            return testParsedDocument("1", null, document, B_1, null)__        }__        final Term uid = newUid("1")__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc.get(),_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime())__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false, "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,numbers,sequence,number,get,and,increment,final,supplier,parsed,document,doc,final,document,document,test,document,with,text,field,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,return,test,parsed,document,1,null,document,null,final,term,uid,new,uid,1,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,get,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,index,request,false,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1536611444;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> SequenceNumbers.UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        final Supplier<ParsedDocument> doc = () -> {_            final Document document = testDocumentWithTextField()__            document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__            return testParsedDocument("1", null, document, B_1, null)__        }__        final Term uid = newUid("1")__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc.get(),_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime())__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false, "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,numbers,sequence,number,get,and,increment,final,supplier,parsed,document,doc,final,document,document,test,document,with,text,field,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,return,test,parsed,document,1,null,document,null,final,term,uid,new,uid,1,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,get,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,index,request,false,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1536828374;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> SequenceNumbers.UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        final Supplier<ParsedDocument> doc = () -> {_            final Document document = testDocumentWithTextField()__            document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__            return testParsedDocument("1", null, document, B_1, null)__        }__        final Term uid = newUid("1")__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc.get(),_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime())__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false, "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,numbers,sequence,number,get,and,increment,final,supplier,parsed,document,doc,final,document,document,test,document,with,text,field,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,return,test,parsed,document,1,null,document,null,final,term,uid,new,uid,1,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,get,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,index,request,false,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1537806831;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> SequenceNumbers.UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        final Supplier<ParsedDocument> doc = () -> {_            final Document document = testDocumentWithTextField()__            document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__            return testParsedDocument("1", null, document, B_1, null)__        }__        final Term uid = newUid("1")__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc.get(),_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime())__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false, "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,numbers,sequence,number,get,and,increment,final,supplier,parsed,document,doc,final,document,document,test,document,with,text,field,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,return,test,parsed,document,1,null,document,null,final,term,uid,new,uid,1,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,get,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,index,request,false,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1538067637;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> SequenceNumbers.UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        final Supplier<ParsedDocument> doc = () -> {_            final Document document = testDocumentWithTextField()__            document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__            return testParsedDocument("1", null, document, B_1, null)__        }__        final Term uid = newUid("1")__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc.get(),_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime())__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false, "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,numbers,sequence,number,get,and,increment,final,supplier,parsed,document,doc,final,document,document,test,document,with,text,field,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,return,test,parsed,document,1,null,document,null,final,term,uid,new,uid,1,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,get,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,index,request,false,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1540238977;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> SequenceNumbers.UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        final Supplier<ParsedDocument> doc = () -> {_            final Document document = testDocumentWithTextField()__            document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__            return testParsedDocument("1", null, document, B_1, null)__        }__        final Term uid = newUid("1")__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc.get(),_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime())__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false, "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,numbers,sequence,number,get,and,increment,final,supplier,parsed,document,doc,final,document,document,test,document,with,text,field,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,return,test,parsed,document,1,null,document,null,final,term,uid,new,uid,1,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,get,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,index,request,false,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1540847035;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> SequenceNumbers.UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        final Supplier<ParsedDocument> doc = () -> {_            final Document document = testDocumentWithTextField()__            document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__            return testParsedDocument("1", null, document, B_1, null)__        }__        final Term uid = newUid("1")__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc.get(),_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime())__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false, "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,numbers,sequence,number,get,and,increment,final,supplier,parsed,document,doc,final,document,document,test,document,with,text,field,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,return,test,parsed,document,1,null,document,null,final,term,uid,new,uid,1,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,get,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,index,request,false,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1541335413;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> SequenceNumbers.UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        final Supplier<ParsedDocument> doc = () -> {_            final Document document = testDocumentWithTextField()__            document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__            return testParsedDocument("1", null, document, B_1, null)__        }__        final Term uid = newUid("1")__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc.get(),_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime())__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false, "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,numbers,sequence,number,get,and,increment,final,supplier,parsed,document,doc,final,document,document,test,document,with,text,field,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,return,test,parsed,document,1,null,document,null,final,term,uid,new,uid,1,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,get,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,index,request,false,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1541618615;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> SequenceNumbers.UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        final Supplier<ParsedDocument> doc = () -> {_            final Document document = testDocumentWithTextField()__            document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__            return testParsedDocument("1", null, document, B_1, null)__        }__        final Term uid = newUid("1")__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc.get(),_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime())__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false, "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,numbers,sequence,number,get,and,increment,final,supplier,parsed,document,doc,final,document,document,test,document,with,text,field,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,return,test,parsed,document,1,null,document,null,final,term,uid,new,uid,1,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,get,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,index,request,false,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1541622390;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> SequenceNumbers.UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        final Supplier<ParsedDocument> doc = () -> {_            final Document document = testDocumentWithTextField()__            document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__            return testParsedDocument("1", null, document, B_1, null)__        }__        final Term uid = newUid("1")__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc.get(),_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime())__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false, "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,numbers,sequence,number,get,and,increment,final,supplier,parsed,document,doc,final,document,document,test,document,with,text,field,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,return,test,parsed,document,1,null,document,null,final,term,uid,new,uid,1,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,get,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,index,request,false,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1542697754;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> SequenceNumbers.UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        final Supplier<ParsedDocument> doc = () -> {_            final Document document = testDocumentWithTextField()__            document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__            return testParsedDocument("1", null, document, B_1, null)__        }__        final Term uid = newUid("1")__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc.get(),_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime())__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false,_            "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,numbers,sequence,number,get,and,increment,final,supplier,parsed,document,doc,final,document,document,test,document,with,text,field,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,return,test,parsed,document,1,null,document,null,final,term,uid,new,uid,1,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,get,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,index,request,false,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1542893693;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> SequenceNumbers.UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        final Supplier<ParsedDocument> doc = () -> {_            final Document document = testDocumentWithTextField()__            document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__            return testParsedDocument("1", null, document, B_1, null)__        }__        final Term uid = newUid("1")__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc.get(),_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime())__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false,_            "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,numbers,sequence,number,get,and,increment,final,supplier,parsed,document,doc,final,document,document,test,document,with,text,field,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,return,test,parsed,document,1,null,document,null,final,term,uid,new,uid,1,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,get,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,index,request,false,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1543940134;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> SequenceNumbers.UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        final Supplier<ParsedDocument> doc = () -> {_            final Document document = testDocumentWithTextField()__            document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__            return testParsedDocument("1", null, document, B_1, null)__        }__        final Term uid = newUid("1")__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc.get(),_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime())__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false,_            "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,numbers,sequence,number,get,and,increment,final,supplier,parsed,document,doc,final,document,document,test,document,with,text,field,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,return,test,parsed,document,1,null,document,null,final,term,uid,new,uid,1,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,get,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,index,request,false,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1543942400;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> SequenceNumbers.UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        final Supplier<ParsedDocument> doc = () -> {_            final Document document = testDocumentWithTextField()__            document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__            return testParsedDocument("1", null, document, B_1, null)__        }__        final Term uid = newUid("1")__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc.get(),_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime())__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false,_            "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,numbers,sequence,number,get,and,increment,final,supplier,parsed,document,doc,final,document,document,test,document,with,text,field,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,return,test,parsed,document,1,null,document,null,final,term,uid,new,uid,1,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,get,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,index,request,false,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1544139474;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> SequenceNumbers.UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        final Supplier<ParsedDocument> doc = () -> {_            final Document document = testDocumentWithTextField()__            document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__            return testParsedDocument("1", null, document, B_1, null)__        }__        final Term uid = newUid("1")__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc.get(),_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime())__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false,_            "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,numbers,sequence,number,get,and,increment,final,supplier,parsed,document,doc,final,document,document,test,document,with,text,field,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,return,test,parsed,document,1,null,document,null,final,term,uid,new,uid,1,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,get,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,index,request,false,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1544203340;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> SequenceNumbers.UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        final Supplier<ParsedDocument> doc = () -> {_            final Document document = testDocumentWithTextField()__            document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__            return testParsedDocument("1", null, document, B_1, null)__        }__        final Term uid = newUid("1")__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc.get(),_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime())__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false,_            "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,numbers,sequence,number,get,and,increment,final,supplier,parsed,document,doc,final,document,document,test,document,with,text,field,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,return,test,parsed,document,1,null,document,null,final,term,uid,new,uid,1,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,get,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,index,request,false,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1544545090;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> SequenceNumbers.UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        final Supplier<ParsedDocument> doc = () -> {_            final Document document = testDocumentWithTextField()__            document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__            return testParsedDocument("1", null, document, B_1, null)__        }__        final Term uid = newUid("1")__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc.get(),_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime())__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false,_            "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,numbers,sequence,number,get,and,increment,final,supplier,parsed,document,doc,final,document,document,test,document,with,text,field,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,return,test,parsed,document,1,null,document,null,final,term,uid,new,uid,1,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,get,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,index,request,false,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1544684920;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        final Supplier<ParsedDocument> doc = () -> {_            final Document document = testDocumentWithTextField()__            document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__            return testParsedDocument("1", null, document, B_1, null)__        }__        final Term uid = newUid("1")__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc.get(),_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false, UNASSIGNED_SEQ_NO, 0)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(), UNASSIGNED_SEQ_NO, 0)__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false,_            "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,number,get,and,increment,final,supplier,parsed,document,doc,final,document,document,test,document,with,text,field,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,return,test,parsed,document,1,null,document,null,final,term,uid,new,uid,1,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,get,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,index,request,false,0,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,0,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1544783136;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        final Supplier<ParsedDocument> doc = () -> {_            final Document document = testDocumentWithTextField()__            document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__            return testParsedDocument("1", null, document, B_1, null)__        }__        final Term uid = newUid("1")__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc.get(),_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false, UNASSIGNED_SEQ_NO, 0)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(), UNASSIGNED_SEQ_NO, 0)__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false,_            "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,number,get,and,increment,final,supplier,parsed,document,doc,final,document,document,test,document,with,text,field,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,return,test,parsed,document,1,null,document,null,final,term,uid,new,uid,1,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,get,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,index,request,false,0,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,0,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1544819407;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        final Supplier<ParsedDocument> doc = () -> {_            final Document document = testDocumentWithTextField()__            document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__            return testParsedDocument("1", null, document, B_1, null)__        }__        final Term uid = newUid("1")__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc.get(),_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false, UNASSIGNED_SEQ_NO, 0)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(), UNASSIGNED_SEQ_NO, 0)__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false,_            "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,number,get,and,increment,final,supplier,parsed,document,doc,final,document,document,test,document,with,text,field,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,return,test,parsed,document,1,null,document,null,final,term,uid,new,uid,1,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,get,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,index,request,false,0,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,0,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1545207154;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        final Supplier<ParsedDocument> doc = () -> {_            final Document document = testDocumentWithTextField()__            document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__            return testParsedDocument("1", null, document, B_1, null)__        }__        final Term uid = newUid("1")__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc.get(),_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false, UNASSIGNED_SEQ_NO, 0)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(), UNASSIGNED_SEQ_NO, 0)__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false,_            "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,number,get,and,increment,final,supplier,parsed,document,doc,final,document,document,test,document,with,text,field,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,return,test,parsed,document,1,null,document,null,final,term,uid,new,uid,1,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,get,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,index,request,false,0,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,0,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1545221705;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        final Supplier<ParsedDocument> doc = () -> {_            final Document document = testDocumentWithTextField()__            document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__            return testParsedDocument("1", null, document, B_1, null)__        }__        final Term uid = newUid("1")__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc.get(),_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false, UNASSIGNED_SEQ_NO, 0)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(), UNASSIGNED_SEQ_NO, 0)__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false,_            "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,number,get,and,increment,final,supplier,parsed,document,doc,final,document,document,test,document,with,text,field,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,return,test,parsed,document,1,null,document,null,final,term,uid,new,uid,1,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,get,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,index,request,false,0,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,0,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1545519642;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        final Supplier<ParsedDocument> doc = () -> {_            final Document document = testDocumentWithTextField()__            document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__            return testParsedDocument("1", null, document, B_1, null)__        }__        final Term uid = newUid("1")__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc.get(),_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false, UNASSIGNED_SEQ_NO, 0)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(), UNASSIGNED_SEQ_NO, 0)__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false,_            "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,number,get,and,increment,final,supplier,parsed,document,doc,final,document,document,test,document,with,text,field,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,return,test,parsed,document,1,null,document,null,final,term,uid,new,uid,1,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,get,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,index,request,false,0,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,0,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1546875837;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        final Supplier<ParsedDocument> doc = () -> {_            final Document document = testDocumentWithTextField()__            document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__            return testParsedDocument("1", null, document, B_1, null)__        }__        final Term uid = newUid("1")__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc.get(),_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false, UNASSIGNED_SEQ_NO, 0)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(), UNASSIGNED_SEQ_NO, 0)__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false,_            "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,number,get,and,increment,final,supplier,parsed,document,doc,final,document,document,test,document,with,text,field,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,return,test,parsed,document,1,null,document,null,final,term,uid,new,uid,1,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,get,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,index,request,false,0,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,0,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1547174095;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        final Supplier<ParsedDocument> doc = () -> {_            final Document document = testDocumentWithTextField()__            document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__            return testParsedDocument("1", null, document, B_1, null)__        }__        final Term uid = newUid("1")__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc.get(),_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false, UNASSIGNED_SEQ_NO, 0)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(), UNASSIGNED_SEQ_NO, 0)__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false,_            "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,number,get,and,increment,final,supplier,parsed,document,doc,final,document,document,test,document,with,text,field,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,return,test,parsed,document,1,null,document,null,final,term,uid,new,uid,1,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,get,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,index,request,false,0,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,0,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1547332999;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        final Supplier<ParsedDocument> doc = () -> {_            final Document document = testDocumentWithTextField()__            document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__            return testParsedDocument("1", null, document, B_1, null)__        }__        final Term uid = newUid("1")__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc.get(),_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false, UNASSIGNED_SEQ_NO, 0)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(), UNASSIGNED_SEQ_NO, 0)__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false,_            "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,number,get,and,increment,final,supplier,parsed,document,doc,final,document,document,test,document,with,text,field,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,return,test,parsed,document,1,null,document,null,final,term,uid,new,uid,1,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,get,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,index,request,false,0,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,0,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1548342168;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        final Supplier<ParsedDocument> doc = () -> {_            final Document document = testDocumentWithTextField()__            document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__            return testParsedDocument("1", null, document, B_1, null)__        }__        final Term uid = newUid("1")__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc.get(),_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false, UNASSIGNED_SEQ_NO, 0)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(), UNASSIGNED_SEQ_NO, 0)__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false,_            "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,number,get,and,increment,final,supplier,parsed,document,doc,final,document,document,test,document,with,text,field,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,return,test,parsed,document,1,null,document,null,final,term,uid,new,uid,1,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,get,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,index,request,false,0,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,0,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1548771485;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        final Supplier<ParsedDocument> doc = () -> {_            final Document document = testDocumentWithTextField()__            document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__            return testParsedDocument("1", null, document, B_1, null)__        }__        final Term uid = newUid("1")__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc.get(),_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false, UNASSIGNED_SEQ_NO, 0)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(), UNASSIGNED_SEQ_NO, 0)__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false,_            "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,number,get,and,increment,final,supplier,parsed,document,doc,final,document,document,test,document,with,text,field,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,return,test,parsed,document,1,null,document,null,final,term,uid,new,uid,1,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,get,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,index,request,false,0,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,0,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1548843917;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        final Supplier<ParsedDocument> doc = () -> {_            final Document document = testDocumentWithTextField()__            document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__            return testParsedDocument("1", null, document, B_1, null)__        }__        final Term uid = newUid("1")__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc.get(),_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false, UNASSIGNED_SEQ_NO, 0)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(), UNASSIGNED_SEQ_NO, 0)__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false,_            "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,number,get,and,increment,final,supplier,parsed,document,doc,final,document,document,test,document,with,text,field,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,return,test,parsed,document,1,null,document,null,final,term,uid,new,uid,1,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,get,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,index,request,false,0,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,0,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1549059559;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        final Supplier<ParsedDocument> doc = () -> {_            final Document document = testDocumentWithTextField()__            document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__            return testParsedDocument("1", null, document, B_1, null)__        }__        final Term uid = newUid("1")__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc.get(),_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false, UNASSIGNED_SEQ_NO, 0)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(), UNASSIGNED_SEQ_NO, 0)__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false,_            "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,number,get,and,increment,final,supplier,parsed,document,doc,final,document,document,test,document,with,text,field,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,return,test,parsed,document,1,null,document,null,final,term,uid,new,uid,1,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,get,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,index,request,false,0,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,0,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1549639236;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        final Supplier<ParsedDocument> doc = () -> {_            final Document document = testDocumentWithTextField()__            document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__            return testParsedDocument("1", null, document, B_1, null)__        }__        final Term uid = newUid("1")__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc.get(),_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false, UNASSIGNED_SEQ_NO, 0)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(), UNASSIGNED_SEQ_NO, 0)__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false,_            "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,number,get,and,increment,final,supplier,parsed,document,doc,final,document,document,test,document,with,text,field,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,return,test,parsed,document,1,null,document,null,final,term,uid,new,uid,1,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,get,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,index,request,false,0,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,0,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1549898480;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        final Supplier<ParsedDocument> doc = () -> {_            final Document document = testDocumentWithTextField()__            document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__            return testParsedDocument("1", null, document, B_1, null)__        }__        final Term uid = newUid("1")__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc.get(),_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false, UNASSIGNED_SEQ_NO, 0)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(), UNASSIGNED_SEQ_NO, 0)__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false,_            "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,number,get,and,increment,final,supplier,parsed,document,doc,final,document,document,test,document,with,text,field,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,return,test,parsed,document,1,null,document,null,final,term,uid,new,uid,1,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,get,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,index,request,false,0,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,0,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1549908725;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        final Supplier<ParsedDocument> doc = () -> {_            final Document document = testDocumentWithTextField()__            document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__            return testParsedDocument("1", null, document, B_1, null)__        }__        final Term uid = newUid("1")__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc.get(),_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false, UNASSIGNED_SEQ_NO, 0)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(), UNASSIGNED_SEQ_NO, 0)__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false,_            "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,number,get,and,increment,final,supplier,parsed,document,doc,final,document,document,test,document,with,text,field,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,return,test,parsed,document,1,null,document,null,final,term,uid,new,uid,1,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,get,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,index,request,false,0,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,0,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1549975032;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        final Supplier<ParsedDocument> doc = () -> {_            final Document document = testDocumentWithTextField()__            document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__            return testParsedDocument("1", null, document, B_1, null)__        }__        final Term uid = newUid("1")__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc.get(),_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false, UNASSIGNED_SEQ_NO, 0)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(), UNASSIGNED_SEQ_NO, 0)__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false,_            "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,number,get,and,increment,final,supplier,parsed,document,doc,final,document,document,test,document,with,text,field,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,return,test,parsed,document,1,null,document,null,final,term,uid,new,uid,1,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,get,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,index,request,false,0,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,0,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1550256122;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        final Supplier<ParsedDocument> doc = () -> {_            final Document document = testDocumentWithTextField()__            document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__            return testParsedDocument("1", null, document, B_1, null)__        }__        final Term uid = newUid("1")__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc.get(),_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false, UNASSIGNED_SEQ_NO, 0)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(), UNASSIGNED_SEQ_NO, 0)__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false,_            "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,number,get,and,increment,final,supplier,parsed,document,doc,final,document,document,test,document,with,text,field,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,return,test,parsed,document,1,null,document,null,final,term,uid,new,uid,1,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,get,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,index,request,false,0,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,0,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1550526771;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        final Supplier<ParsedDocument> doc = () -> {_            final Document document = testDocumentWithTextField()__            document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__            return testParsedDocument("1", null, document, B_1, null)__        }__        final Term uid = newUid("1")__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc.get(),_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false, UNASSIGNED_SEQ_NO, 0)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(), UNASSIGNED_SEQ_NO, 0)__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false,_            "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,number,get,and,increment,final,supplier,parsed,document,doc,final,document,document,test,document,with,text,field,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,return,test,parsed,document,1,null,document,null,final,term,uid,new,uid,1,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,get,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,index,request,false,0,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,0,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException;1551126708;java docs;public void testOutOfOrderSequenceNumbersWithVersionConflict() throws IOException {_        final List<Engine.Operation> operations = new ArrayList<>()___        final int numberOfOperations = randomIntBetween(16, 32)__        final AtomicLong sequenceNumber = new AtomicLong()__        final Engine.Operation.Origin origin = randomFrom(LOCAL_TRANSLOG_RECOVERY, PEER_RECOVERY, PRIMARY, REPLICA)__        final LongSupplier sequenceNumberSupplier =_            origin == PRIMARY ? () -> UNASSIGNED_SEQ_NO : sequenceNumber::getAndIncrement__        final Supplier<ParsedDocument> doc = () -> {_            final Document document = testDocumentWithTextField()__            document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE))__            return testParsedDocument("1", null, document, B_1, null)__        }__        final Term uid = newUid("1")__        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher__        for (int i = 0_ i < numberOfOperations_ i++) {_            if (randomBoolean()) {_                final Engine.Index index = new Engine.Index(_                    uid,_                    doc.get(),_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(),_                    IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,_                    false, UNASSIGNED_SEQ_NO, 0)__                operations.add(index)__            } else {_                final Engine.Delete delete = new Engine.Delete(_                    "test",_                    "1",_                    uid,_                    sequenceNumberSupplier.getAsLong(),_                    1,_                    i,_                    origin == PRIMARY ? VersionType.EXTERNAL : null,_                    origin,_                    System.nanoTime(), UNASSIGNED_SEQ_NO, 0)__                operations.add(delete)__            }_        }__        final boolean exists = operations.get(operations.size() - 1) instanceof Engine.Index__        Randomness.shuffle(operations)___        for (final Engine.Operation operation : operations) {_            if (operation instanceof Engine.Index) {_                engine.index((Engine.Index) operation)__            } else {_                engine.delete((Engine.Delete) operation)__            }_        }__        final long expectedLocalCheckpoint__        if (origin == PRIMARY) {_            _            int count = 0___            _            long version = -1__            for (int i = 0_ i < numberOfOperations_ i++) {_                if (operations.get(i).version() >= version) {_                    count++__                    version = operations.get(i).version()__                }_            }__            _            expectedLocalCheckpoint = count - 1__        } else {_            expectedLocalCheckpoint = numberOfOperations - 1__        }__        assertThat(engine.getLocalCheckpoint(), equalTo(expectedLocalCheckpoint))__        try (Engine.GetResult result = engine.get(new Engine.Get(true, false,_            "type", "2", uid), searcherFactory)) {_            assertThat(result.exists(), equalTo(exists))__        }_    };java,docs;public,void,test,out,of,order,sequence,numbers,with,version,conflict,throws,ioexception,final,list,engine,operation,operations,new,array,list,final,int,number,of,operations,random,int,between,16,32,final,atomic,long,sequence,number,new,atomic,long,final,engine,operation,origin,origin,random,from,primary,replica,final,long,supplier,sequence,number,supplier,origin,primary,sequence,number,get,and,increment,final,supplier,parsed,document,doc,final,document,document,test,document,with,text,field,document,add,new,field,source,field,mapper,name,bytes,reference,to,bytes,source,field,mapper,defaults,return,test,parsed,document,1,null,document,null,final,term,uid,new,uid,1,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,for,int,i,0,i,number,of,operations,i,if,random,boolean,final,engine,index,index,new,engine,index,uid,doc,get,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,index,request,false,0,operations,add,index,else,final,engine,delete,delete,new,engine,delete,test,1,uid,sequence,number,supplier,get,as,long,1,i,origin,primary,version,type,external,null,origin,system,nano,time,0,operations,add,delete,final,boolean,exists,operations,get,operations,size,1,instanceof,engine,index,randomness,shuffle,operations,for,final,engine,operation,operation,operations,if,operation,instanceof,engine,index,engine,index,engine,index,operation,else,engine,delete,engine,delete,operation,final,long,expected,local,checkpoint,if,origin,primary,int,count,0,long,version,1,for,int,i,0,i,number,of,operations,i,if,operations,get,i,version,version,count,version,operations,get,i,version,expected,local,checkpoint,count,1,else,expected,local,checkpoint,number,of,operations,1,assert,that,engine,get,local,checkpoint,equal,to,expected,local,checkpoint,try,engine,get,result,result,engine,get,new,engine,get,true,false,type,2,uid,searcher,factory,assert,that,result,exists,equal,to,exists
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1524684173;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1524780945;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1525162917;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1525645056;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1527583663;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1528706846;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1528762805;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1531910483;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1532947734;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1533063033;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1533234568;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1534848846;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1535046779;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1535723122;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1536218260;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1536314350;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1536611444;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1536828374;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1537806831;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1538067637;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1540238977;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1540847035;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1541335413;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1541618615;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1541622390;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()), searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1542697754;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1542893693;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1543940134;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1543942400;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1544139474;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1544203340;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1544545090;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1544684920;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1544783136;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1544819407;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1545207154;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1545221705;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1545519642;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1546875837;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1547174095;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1547332999;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1548342168;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1548771485;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1548843917;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1549059559;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1549639236;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1549898480;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1549908725;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1549975032;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1550256122;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1550526771;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testVersionedUpdate() throws IOException;1551126708;simulates what an upsert / update API does;public void testVersionedUpdate() throws IOException {_        final BiFunction<String, Engine.SearcherScope, Searcher> searcherFactory = engine::acquireSearcher___        ParsedDocument doc = testParsedDocument("1", null, testDocument(), B_1, null)__        Engine.Index create = new Engine.Index(newUid(doc), primaryTerm.get(), doc, Versions.MATCH_DELETED)__        Engine.IndexResult indexResult = engine.index(create)__        assertThat(indexResult.getVersion(), equalTo(1L))__        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(1, get.version())__        }__        Engine.Index update_1 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 1)__        Engine.IndexResult update_1_result = engine.index(update_1)__        assertThat(update_1_result.getVersion(), equalTo(2L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(2, get.version())__        }__        Engine.Index update_2 = new Engine.Index(newUid(doc), primaryTerm.get(), doc, 2)__        Engine.IndexResult update_2_result = engine.index(update_2)__        assertThat(update_2_result.getVersion(), equalTo(3L))___        try (Engine.GetResult get = engine.get(new Engine.Get(true, false, doc.type(), doc.id(), create.uid()),_                searcherFactory)) {_            assertEquals(3, get.version())__        }__    };simulates,what,an,upsert,update,api,does;public,void,test,versioned,update,throws,ioexception,final,bi,function,string,engine,searcher,scope,searcher,searcher,factory,engine,acquire,searcher,parsed,document,doc,test,parsed,document,1,null,test,document,null,engine,index,create,new,engine,index,new,uid,doc,primary,term,get,doc,versions,engine,index,result,index,result,engine,index,create,assert,that,index,result,get,version,equal,to,1l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,1,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,1,engine,index,result,engine,index,assert,that,get,version,equal,to,2l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,2,get,version,engine,index,new,engine,index,new,uid,doc,primary,term,get,doc,2,engine,index,result,engine,index,assert,that,get,version,equal,to,3l,try,engine,get,result,get,engine,get,new,engine,get,true,false,doc,type,doc,id,create,uid,searcher,factory,assert,equals,3,get,version
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1524684173;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1524780945;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1525162917;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1525645056;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1527583663;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1528706846;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1528762805;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1531910483;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1532947734;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1533063033;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1533234568;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1534848846;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1535046779;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1535723122;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1536218260;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1536314350;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1536611444;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1536828374;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1537806831;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1538067637;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1540238977;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1540847035;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1541335413;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1541618615;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1541622390;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1542697754;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1542893693;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1543940134;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1543942400;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1544139474;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1544203340;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1544545090;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1544684920;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1544783136;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1544819407;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1545207154;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1545221705;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1545519642;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1546875837;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1547174095;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1547332999;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1548342168;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1548771485;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1548843917;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1549059559;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1549639236;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1549898480;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1549908725;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1549975032;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1550256122;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1550526771;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException;1551126708;Tests that when the close method returns the engine is actually guaranteed to have cleaned up and that resources are closed;public void testConcurrentEngineClosed() throws BrokenBarrierException, InterruptedException {_        Thread[] closingThreads = new Thread[3]__        CyclicBarrier barrier = new CyclicBarrier(1 + closingThreads.length + 1)__        Thread failEngine = new Thread(new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new AssertionError(e)__            }__            @Override_            protected void doRun() throws Exception {_                barrier.await()__                engine.failEngine("test", new RuntimeException("test"))__            }_        })__        failEngine.start()__        for (int i = 0_i < closingThreads.length _ i++) {_            boolean flushAndClose = randomBoolean()__            closingThreads[i] = new Thread(new AbstractRunnable() {_                @Override_                public void onFailure(Exception e) {_                    throw new AssertionError(e)__                }__                @Override_                protected void doRun() throws Exception {_                    barrier.await()__                    if (flushAndClose) {_                        engine.flushAndClose()__                    } else {_                        engine.close()__                    }_                    _                    _                    synchronized (closingThreads) {_                        try (Lock ignored = store.directory().obtainLock(IndexWriter.WRITE_LOCK_NAME)) {_                            _                        }_                    }_                }_            })__            closingThreads[i].setName("closingThread_" + i)__            closingThreads[i].start()__        }_        barrier.await()__        failEngine.join()__        for (Thread t : closingThreads) {_            t.join()__        }_    };tests,that,when,the,close,method,returns,the,engine,is,actually,guaranteed,to,have,cleaned,up,and,that,resources,are,closed;public,void,test,concurrent,engine,closed,throws,broken,barrier,exception,interrupted,exception,thread,closing,threads,new,thread,3,cyclic,barrier,barrier,new,cyclic,barrier,1,closing,threads,length,1,thread,fail,engine,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,engine,fail,engine,test,new,runtime,exception,test,fail,engine,start,for,int,i,0,i,closing,threads,length,i,boolean,flush,and,close,random,boolean,closing,threads,i,new,thread,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,assertion,error,e,override,protected,void,do,run,throws,exception,barrier,await,if,flush,and,close,engine,flush,and,close,else,engine,close,synchronized,closing,threads,try,lock,ignored,store,directory,obtain,lock,index,writer,closing,threads,i,set,name,i,closing,threads,i,start,barrier,await,fail,engine,join,for,thread,t,closing,threads,t,join
InternalEngineTests -> public void testRandomOperations() throws Exception;1535723122;A simple test to check that random combination of operations can coexist in segments and be lookup._This is needed as some fields in Lucene may not exist if a segment misses operation types and this code is to check for that._For example, a segment containing only no-ops does not have neither _uid or _version.;public void testRandomOperations() throws Exception {_        int numOps = between(10, 100)__        for (int i = 0_ i < numOps_ i++) {_            String id = Integer.toString(randomIntBetween(1, 10))__            ParsedDocument doc = createParsedDoc(id, null)__            Engine.Operation.TYPE type = randomFrom(Engine.Operation.TYPE.values())__            switch (type) {_                case INDEX:_                    Engine.IndexResult index = engine.index(replicaIndexForDoc(doc, between(1, 100), i, randomBoolean()))__                    assertThat(index.getFailure(), nullValue())__                    break__                case DELETE:_                    Engine.DeleteResult delete = engine.delete(replicaDeleteForDoc(doc.id(), between(1, 100), i, randomNonNegativeLong()))__                    assertThat(delete.getFailure(), nullValue())__                    break__                case NO_OP:_                    Engine.NoOpResult noOp = engine.noOp(new Engine.NoOp(i, primaryTerm.get(),_                        randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), ""))__                    assertThat(noOp.getFailure(), nullValue())__                    break__                default:_                    throw new IllegalStateException("Invalid op [" + type + "]")__            }_            if (randomBoolean()) {_                engine.refresh("test")__            }_            if (randomBoolean()) {_                engine.flush()__            }_            if (randomBoolean()) {_                engine.forceMerge(randomBoolean(), between(1, 10), randomBoolean(), false, false)__            }_        }_        if (engine.engineConfig.getIndexSettings().isSoftDeleteEnabled()) {_            List<Translog.Operation> operations = readAllOperationsInLucene(engine, createMapperService("test"))__            assertThat(operations, hasSize(numOps))__        }_    };a,simple,test,to,check,that,random,combination,of,operations,can,coexist,in,segments,and,be,lookup,this,is,needed,as,some,fields,in,lucene,may,not,exist,if,a,segment,misses,operation,types,and,this,code,is,to,check,for,that,for,example,a,segment,containing,only,no,ops,does,not,have,neither,or;public,void,test,random,operations,throws,exception,int,num,ops,between,10,100,for,int,i,0,i,num,ops,i,string,id,integer,to,string,random,int,between,1,10,parsed,document,doc,create,parsed,doc,id,null,engine,operation,type,type,random,from,engine,operation,type,values,switch,type,case,index,engine,index,result,index,engine,index,replica,index,for,doc,doc,between,1,100,i,random,boolean,assert,that,index,get,failure,null,value,break,case,delete,engine,delete,result,delete,engine,delete,replica,delete,for,doc,doc,id,between,1,100,i,random,non,negative,long,assert,that,delete,get,failure,null,value,break,case,engine,no,op,result,no,op,engine,no,op,new,engine,no,op,i,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,assert,that,no,op,get,failure,null,value,break,default,throw,new,illegal,state,exception,invalid,op,type,if,random,boolean,engine,refresh,test,if,random,boolean,engine,flush,if,random,boolean,engine,force,merge,random,boolean,between,1,10,random,boolean,false,false,if,engine,engine,config,get,index,settings,is,soft,delete,enabled,list,translog,operation,operations,read,all,operations,in,lucene,engine,create,mapper,service,test,assert,that,operations,has,size,num,ops
InternalEngineTests -> public void testRandomOperations() throws Exception;1536218260;A simple test to check that random combination of operations can coexist in segments and be lookup._This is needed as some fields in Lucene may not exist if a segment misses operation types and this code is to check for that._For example, a segment containing only no-ops does not have neither _uid or _version.;public void testRandomOperations() throws Exception {_        int numOps = between(10, 100)__        for (int i = 0_ i < numOps_ i++) {_            String id = Integer.toString(randomIntBetween(1, 10))__            ParsedDocument doc = createParsedDoc(id, null)__            Engine.Operation.TYPE type = randomFrom(Engine.Operation.TYPE.values())__            switch (type) {_                case INDEX:_                    Engine.IndexResult index = engine.index(replicaIndexForDoc(doc, between(1, 100), i, randomBoolean()))__                    assertThat(index.getFailure(), nullValue())__                    break__                case DELETE:_                    Engine.DeleteResult delete = engine.delete(replicaDeleteForDoc(doc.id(), between(1, 100), i, randomNonNegativeLong()))__                    assertThat(delete.getFailure(), nullValue())__                    break__                case NO_OP:_                    Engine.NoOpResult noOp = engine.noOp(new Engine.NoOp(i, primaryTerm.get(),_                        randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), ""))__                    assertThat(noOp.getFailure(), nullValue())__                    break__                default:_                    throw new IllegalStateException("Invalid op [" + type + "]")__            }_            if (randomBoolean()) {_                engine.refresh("test")__            }_            if (randomBoolean()) {_                engine.flush()__            }_            if (randomBoolean()) {_                engine.forceMerge(randomBoolean(), between(1, 10), randomBoolean(), false, false)__            }_        }_        if (engine.engineConfig.getIndexSettings().isSoftDeleteEnabled()) {_            List<Translog.Operation> operations = readAllOperationsInLucene(engine, createMapperService("test"))__            assertThat(operations, hasSize(numOps))__        }_    };a,simple,test,to,check,that,random,combination,of,operations,can,coexist,in,segments,and,be,lookup,this,is,needed,as,some,fields,in,lucene,may,not,exist,if,a,segment,misses,operation,types,and,this,code,is,to,check,for,that,for,example,a,segment,containing,only,no,ops,does,not,have,neither,or;public,void,test,random,operations,throws,exception,int,num,ops,between,10,100,for,int,i,0,i,num,ops,i,string,id,integer,to,string,random,int,between,1,10,parsed,document,doc,create,parsed,doc,id,null,engine,operation,type,type,random,from,engine,operation,type,values,switch,type,case,index,engine,index,result,index,engine,index,replica,index,for,doc,doc,between,1,100,i,random,boolean,assert,that,index,get,failure,null,value,break,case,delete,engine,delete,result,delete,engine,delete,replica,delete,for,doc,doc,id,between,1,100,i,random,non,negative,long,assert,that,delete,get,failure,null,value,break,case,engine,no,op,result,no,op,engine,no,op,new,engine,no,op,i,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,assert,that,no,op,get,failure,null,value,break,default,throw,new,illegal,state,exception,invalid,op,type,if,random,boolean,engine,refresh,test,if,random,boolean,engine,flush,if,random,boolean,engine,force,merge,random,boolean,between,1,10,random,boolean,false,false,if,engine,engine,config,get,index,settings,is,soft,delete,enabled,list,translog,operation,operations,read,all,operations,in,lucene,engine,create,mapper,service,test,assert,that,operations,has,size,num,ops
InternalEngineTests -> public void testRandomOperations() throws Exception;1536314350;A simple test to check that random combination of operations can coexist in segments and be lookup._This is needed as some fields in Lucene may not exist if a segment misses operation types and this code is to check for that._For example, a segment containing only no-ops does not have neither _uid or _version.;public void testRandomOperations() throws Exception {_        int numOps = between(10, 100)__        for (int i = 0_ i < numOps_ i++) {_            String id = Integer.toString(randomIntBetween(1, 10))__            ParsedDocument doc = createParsedDoc(id, null)__            Engine.Operation.TYPE type = randomFrom(Engine.Operation.TYPE.values())__            switch (type) {_                case INDEX:_                    Engine.IndexResult index = engine.index(replicaIndexForDoc(doc, between(1, 100), i, randomBoolean()))__                    assertThat(index.getFailure(), nullValue())__                    break__                case DELETE:_                    Engine.DeleteResult delete = engine.delete(replicaDeleteForDoc(doc.id(), between(1, 100), i, randomNonNegativeLong()))__                    assertThat(delete.getFailure(), nullValue())__                    break__                case NO_OP:_                    Engine.NoOpResult noOp = engine.noOp(new Engine.NoOp(i, primaryTerm.get(),_                        randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), ""))__                    assertThat(noOp.getFailure(), nullValue())__                    break__                default:_                    throw new IllegalStateException("Invalid op [" + type + "]")__            }_            if (randomBoolean()) {_                engine.refresh("test")__            }_            if (randomBoolean()) {_                engine.flush()__            }_            if (randomBoolean()) {_                engine.forceMerge(randomBoolean(), between(1, 10), randomBoolean(), false, false)__            }_        }_        if (engine.engineConfig.getIndexSettings().isSoftDeleteEnabled()) {_            List<Translog.Operation> operations = readAllOperationsInLucene(engine, createMapperService("test"))__            assertThat(operations, hasSize(numOps))__        }_    };a,simple,test,to,check,that,random,combination,of,operations,can,coexist,in,segments,and,be,lookup,this,is,needed,as,some,fields,in,lucene,may,not,exist,if,a,segment,misses,operation,types,and,this,code,is,to,check,for,that,for,example,a,segment,containing,only,no,ops,does,not,have,neither,or;public,void,test,random,operations,throws,exception,int,num,ops,between,10,100,for,int,i,0,i,num,ops,i,string,id,integer,to,string,random,int,between,1,10,parsed,document,doc,create,parsed,doc,id,null,engine,operation,type,type,random,from,engine,operation,type,values,switch,type,case,index,engine,index,result,index,engine,index,replica,index,for,doc,doc,between,1,100,i,random,boolean,assert,that,index,get,failure,null,value,break,case,delete,engine,delete,result,delete,engine,delete,replica,delete,for,doc,doc,id,between,1,100,i,random,non,negative,long,assert,that,delete,get,failure,null,value,break,case,engine,no,op,result,no,op,engine,no,op,new,engine,no,op,i,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,assert,that,no,op,get,failure,null,value,break,default,throw,new,illegal,state,exception,invalid,op,type,if,random,boolean,engine,refresh,test,if,random,boolean,engine,flush,if,random,boolean,engine,force,merge,random,boolean,between,1,10,random,boolean,false,false,if,engine,engine,config,get,index,settings,is,soft,delete,enabled,list,translog,operation,operations,read,all,operations,in,lucene,engine,create,mapper,service,test,assert,that,operations,has,size,num,ops
InternalEngineTests -> public void testRandomOperations() throws Exception;1536611444;A simple test to check that random combination of operations can coexist in segments and be lookup._This is needed as some fields in Lucene may not exist if a segment misses operation types and this code is to check for that._For example, a segment containing only no-ops does not have neither _uid or _version.;public void testRandomOperations() throws Exception {_        int numOps = between(10, 100)__        for (int i = 0_ i < numOps_ i++) {_            String id = Integer.toString(randomIntBetween(1, 10))__            ParsedDocument doc = createParsedDoc(id, null)__            Engine.Operation.TYPE type = randomFrom(Engine.Operation.TYPE.values())__            switch (type) {_                case INDEX:_                    Engine.IndexResult index = engine.index(replicaIndexForDoc(doc, between(1, 100), i, randomBoolean()))__                    assertThat(index.getFailure(), nullValue())__                    break__                case DELETE:_                    Engine.DeleteResult delete = engine.delete(replicaDeleteForDoc(doc.id(), between(1, 100), i, randomNonNegativeLong()))__                    assertThat(delete.getFailure(), nullValue())__                    break__                case NO_OP:_                    Engine.NoOpResult noOp = engine.noOp(new Engine.NoOp(i, primaryTerm.get(),_                        randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), ""))__                    assertThat(noOp.getFailure(), nullValue())__                    break__                default:_                    throw new IllegalStateException("Invalid op [" + type + "]")__            }_            if (randomBoolean()) {_                engine.refresh("test")__            }_            if (randomBoolean()) {_                engine.flush()__            }_            if (randomBoolean()) {_                engine.forceMerge(randomBoolean(), between(1, 10), randomBoolean(), false, false)__            }_        }_        if (engine.engineConfig.getIndexSettings().isSoftDeleteEnabled()) {_            List<Translog.Operation> operations = readAllOperationsInLucene(engine, createMapperService("test"))__            assertThat(operations, hasSize(numOps))__        }_    };a,simple,test,to,check,that,random,combination,of,operations,can,coexist,in,segments,and,be,lookup,this,is,needed,as,some,fields,in,lucene,may,not,exist,if,a,segment,misses,operation,types,and,this,code,is,to,check,for,that,for,example,a,segment,containing,only,no,ops,does,not,have,neither,or;public,void,test,random,operations,throws,exception,int,num,ops,between,10,100,for,int,i,0,i,num,ops,i,string,id,integer,to,string,random,int,between,1,10,parsed,document,doc,create,parsed,doc,id,null,engine,operation,type,type,random,from,engine,operation,type,values,switch,type,case,index,engine,index,result,index,engine,index,replica,index,for,doc,doc,between,1,100,i,random,boolean,assert,that,index,get,failure,null,value,break,case,delete,engine,delete,result,delete,engine,delete,replica,delete,for,doc,doc,id,between,1,100,i,random,non,negative,long,assert,that,delete,get,failure,null,value,break,case,engine,no,op,result,no,op,engine,no,op,new,engine,no,op,i,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,assert,that,no,op,get,failure,null,value,break,default,throw,new,illegal,state,exception,invalid,op,type,if,random,boolean,engine,refresh,test,if,random,boolean,engine,flush,if,random,boolean,engine,force,merge,random,boolean,between,1,10,random,boolean,false,false,if,engine,engine,config,get,index,settings,is,soft,delete,enabled,list,translog,operation,operations,read,all,operations,in,lucene,engine,create,mapper,service,test,assert,that,operations,has,size,num,ops
InternalEngineTests -> public void testRandomOperations() throws Exception;1536828374;A simple test to check that random combination of operations can coexist in segments and be lookup._This is needed as some fields in Lucene may not exist if a segment misses operation types and this code is to check for that._For example, a segment containing only no-ops does not have neither _uid or _version.;public void testRandomOperations() throws Exception {_        int numOps = between(10, 100)__        for (int i = 0_ i < numOps_ i++) {_            String id = Integer.toString(randomIntBetween(1, 10))__            ParsedDocument doc = createParsedDoc(id, null)__            Engine.Operation.TYPE type = randomFrom(Engine.Operation.TYPE.values())__            switch (type) {_                case INDEX:_                    Engine.IndexResult index = engine.index(replicaIndexForDoc(doc, between(1, 100), i, randomBoolean()))__                    assertThat(index.getFailure(), nullValue())__                    break__                case DELETE:_                    Engine.DeleteResult delete = engine.delete(replicaDeleteForDoc(doc.id(), between(1, 100), i, randomNonNegativeLong()))__                    assertThat(delete.getFailure(), nullValue())__                    break__                case NO_OP:_                    Engine.NoOpResult noOp = engine.noOp(new Engine.NoOp(i, primaryTerm.get(),_                        randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), ""))__                    assertThat(noOp.getFailure(), nullValue())__                    break__                default:_                    throw new IllegalStateException("Invalid op [" + type + "]")__            }_            if (randomBoolean()) {_                engine.refresh("test")__            }_            if (randomBoolean()) {_                engine.flush()__            }_            if (randomBoolean()) {_                engine.forceMerge(randomBoolean(), between(1, 10), randomBoolean(), false, false)__            }_        }_        if (engine.engineConfig.getIndexSettings().isSoftDeleteEnabled()) {_            List<Translog.Operation> operations = readAllOperationsInLucene(engine, createMapperService("test"))__            assertThat(operations, hasSize(numOps))__        }_    };a,simple,test,to,check,that,random,combination,of,operations,can,coexist,in,segments,and,be,lookup,this,is,needed,as,some,fields,in,lucene,may,not,exist,if,a,segment,misses,operation,types,and,this,code,is,to,check,for,that,for,example,a,segment,containing,only,no,ops,does,not,have,neither,or;public,void,test,random,operations,throws,exception,int,num,ops,between,10,100,for,int,i,0,i,num,ops,i,string,id,integer,to,string,random,int,between,1,10,parsed,document,doc,create,parsed,doc,id,null,engine,operation,type,type,random,from,engine,operation,type,values,switch,type,case,index,engine,index,result,index,engine,index,replica,index,for,doc,doc,between,1,100,i,random,boolean,assert,that,index,get,failure,null,value,break,case,delete,engine,delete,result,delete,engine,delete,replica,delete,for,doc,doc,id,between,1,100,i,random,non,negative,long,assert,that,delete,get,failure,null,value,break,case,engine,no,op,result,no,op,engine,no,op,new,engine,no,op,i,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,assert,that,no,op,get,failure,null,value,break,default,throw,new,illegal,state,exception,invalid,op,type,if,random,boolean,engine,refresh,test,if,random,boolean,engine,flush,if,random,boolean,engine,force,merge,random,boolean,between,1,10,random,boolean,false,false,if,engine,engine,config,get,index,settings,is,soft,delete,enabled,list,translog,operation,operations,read,all,operations,in,lucene,engine,create,mapper,service,test,assert,that,operations,has,size,num,ops
InternalEngineTests -> public void testRandomOperations() throws Exception;1537806831;A simple test to check that random combination of operations can coexist in segments and be lookup._This is needed as some fields in Lucene may not exist if a segment misses operation types and this code is to check for that._For example, a segment containing only no-ops does not have neither _uid or _version.;public void testRandomOperations() throws Exception {_        int numOps = between(10, 100)__        for (int i = 0_ i < numOps_ i++) {_            String id = Integer.toString(randomIntBetween(1, 10))__            ParsedDocument doc = createParsedDoc(id, null)__            Engine.Operation.TYPE type = randomFrom(Engine.Operation.TYPE.values())__            switch (type) {_                case INDEX:_                    Engine.IndexResult index = engine.index(replicaIndexForDoc(doc, between(1, 100), i, randomBoolean()))__                    assertThat(index.getFailure(), nullValue())__                    break__                case DELETE:_                    Engine.DeleteResult delete = engine.delete(replicaDeleteForDoc(doc.id(), between(1, 100), i, randomNonNegativeLong()))__                    assertThat(delete.getFailure(), nullValue())__                    break__                case NO_OP:_                    Engine.NoOpResult noOp = engine.noOp(new Engine.NoOp(i, primaryTerm.get(),_                        randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), ""))__                    assertThat(noOp.getFailure(), nullValue())__                    break__                default:_                    throw new IllegalStateException("Invalid op [" + type + "]")__            }_            if (randomBoolean()) {_                engine.refresh("test")__            }_            if (randomBoolean()) {_                engine.flush()__            }_            if (randomBoolean()) {_                engine.forceMerge(randomBoolean(), between(1, 10), randomBoolean(), false, false)__            }_        }_        if (engine.engineConfig.getIndexSettings().isSoftDeleteEnabled()) {_            List<Translog.Operation> operations = readAllOperationsInLucene(engine, createMapperService("test"))__            assertThat(operations, hasSize(numOps))__        }_    };a,simple,test,to,check,that,random,combination,of,operations,can,coexist,in,segments,and,be,lookup,this,is,needed,as,some,fields,in,lucene,may,not,exist,if,a,segment,misses,operation,types,and,this,code,is,to,check,for,that,for,example,a,segment,containing,only,no,ops,does,not,have,neither,or;public,void,test,random,operations,throws,exception,int,num,ops,between,10,100,for,int,i,0,i,num,ops,i,string,id,integer,to,string,random,int,between,1,10,parsed,document,doc,create,parsed,doc,id,null,engine,operation,type,type,random,from,engine,operation,type,values,switch,type,case,index,engine,index,result,index,engine,index,replica,index,for,doc,doc,between,1,100,i,random,boolean,assert,that,index,get,failure,null,value,break,case,delete,engine,delete,result,delete,engine,delete,replica,delete,for,doc,doc,id,between,1,100,i,random,non,negative,long,assert,that,delete,get,failure,null,value,break,case,engine,no,op,result,no,op,engine,no,op,new,engine,no,op,i,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,assert,that,no,op,get,failure,null,value,break,default,throw,new,illegal,state,exception,invalid,op,type,if,random,boolean,engine,refresh,test,if,random,boolean,engine,flush,if,random,boolean,engine,force,merge,random,boolean,between,1,10,random,boolean,false,false,if,engine,engine,config,get,index,settings,is,soft,delete,enabled,list,translog,operation,operations,read,all,operations,in,lucene,engine,create,mapper,service,test,assert,that,operations,has,size,num,ops
InternalEngineTests -> public void testRandomOperations() throws Exception;1538067637;A simple test to check that random combination of operations can coexist in segments and be lookup._This is needed as some fields in Lucene may not exist if a segment misses operation types and this code is to check for that._For example, a segment containing only no-ops does not have neither _uid or _version.;public void testRandomOperations() throws Exception {_        int numOps = between(10, 100)__        for (int i = 0_ i < numOps_ i++) {_            String id = Integer.toString(randomIntBetween(1, 10))__            ParsedDocument doc = createParsedDoc(id, null)__            Engine.Operation.TYPE type = randomFrom(Engine.Operation.TYPE.values())__            switch (type) {_                case INDEX:_                    Engine.IndexResult index = engine.index(replicaIndexForDoc(doc, between(1, 100), i, randomBoolean()))__                    assertThat(index.getFailure(), nullValue())__                    break__                case DELETE:_                    Engine.DeleteResult delete = engine.delete(replicaDeleteForDoc(doc.id(), between(1, 100), i, randomNonNegativeLong()))__                    assertThat(delete.getFailure(), nullValue())__                    break__                case NO_OP:_                    Engine.NoOpResult noOp = engine.noOp(new Engine.NoOp(i, primaryTerm.get(),_                        randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), ""))__                    assertThat(noOp.getFailure(), nullValue())__                    break__                default:_                    throw new IllegalStateException("Invalid op [" + type + "]")__            }_            if (randomBoolean()) {_                engine.refresh("test")__            }_            if (randomBoolean()) {_                engine.flush()__            }_            if (randomBoolean()) {_                engine.forceMerge(randomBoolean(), between(1, 10), randomBoolean(), false, false)__            }_        }_        if (engine.engineConfig.getIndexSettings().isSoftDeleteEnabled()) {_            List<Translog.Operation> operations = readAllOperationsInLucene(engine, createMapperService("test"))__            assertThat(operations, hasSize(numOps))__        }_    };a,simple,test,to,check,that,random,combination,of,operations,can,coexist,in,segments,and,be,lookup,this,is,needed,as,some,fields,in,lucene,may,not,exist,if,a,segment,misses,operation,types,and,this,code,is,to,check,for,that,for,example,a,segment,containing,only,no,ops,does,not,have,neither,or;public,void,test,random,operations,throws,exception,int,num,ops,between,10,100,for,int,i,0,i,num,ops,i,string,id,integer,to,string,random,int,between,1,10,parsed,document,doc,create,parsed,doc,id,null,engine,operation,type,type,random,from,engine,operation,type,values,switch,type,case,index,engine,index,result,index,engine,index,replica,index,for,doc,doc,between,1,100,i,random,boolean,assert,that,index,get,failure,null,value,break,case,delete,engine,delete,result,delete,engine,delete,replica,delete,for,doc,doc,id,between,1,100,i,random,non,negative,long,assert,that,delete,get,failure,null,value,break,case,engine,no,op,result,no,op,engine,no,op,new,engine,no,op,i,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,assert,that,no,op,get,failure,null,value,break,default,throw,new,illegal,state,exception,invalid,op,type,if,random,boolean,engine,refresh,test,if,random,boolean,engine,flush,if,random,boolean,engine,force,merge,random,boolean,between,1,10,random,boolean,false,false,if,engine,engine,config,get,index,settings,is,soft,delete,enabled,list,translog,operation,operations,read,all,operations,in,lucene,engine,create,mapper,service,test,assert,that,operations,has,size,num,ops
InternalEngineTests -> public void testRandomOperations() throws Exception;1540238977;A simple test to check that random combination of operations can coexist in segments and be lookup._This is needed as some fields in Lucene may not exist if a segment misses operation types and this code is to check for that._For example, a segment containing only no-ops does not have neither _uid or _version.;public void testRandomOperations() throws Exception {_        int numOps = between(10, 100)__        for (int i = 0_ i < numOps_ i++) {_            String id = Integer.toString(randomIntBetween(1, 10))__            ParsedDocument doc = createParsedDoc(id, null)__            Engine.Operation.TYPE type = randomFrom(Engine.Operation.TYPE.values())__            switch (type) {_                case INDEX:_                    Engine.IndexResult index = engine.index(replicaIndexForDoc(doc, between(1, 100), i, randomBoolean()))__                    assertThat(index.getFailure(), nullValue())__                    break__                case DELETE:_                    Engine.DeleteResult delete = engine.delete(replicaDeleteForDoc(doc.id(), between(1, 100), i, randomNonNegativeLong()))__                    assertThat(delete.getFailure(), nullValue())__                    break__                case NO_OP:_                    Engine.NoOpResult noOp = engine.noOp(new Engine.NoOp(i, primaryTerm.get(),_                        randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), ""))__                    assertThat(noOp.getFailure(), nullValue())__                    break__                default:_                    throw new IllegalStateException("Invalid op [" + type + "]")__            }_            if (randomBoolean()) {_                engine.refresh("test")__            }_            if (randomBoolean()) {_                engine.flush()__            }_            if (randomBoolean()) {_                engine.forceMerge(randomBoolean(), between(1, 10), randomBoolean(), false, false)__            }_        }_        if (engine.engineConfig.getIndexSettings().isSoftDeleteEnabled()) {_            List<Translog.Operation> operations = readAllOperationsInLucene(engine, createMapperService("test"))__            assertThat(operations, hasSize(numOps))__        }_    };a,simple,test,to,check,that,random,combination,of,operations,can,coexist,in,segments,and,be,lookup,this,is,needed,as,some,fields,in,lucene,may,not,exist,if,a,segment,misses,operation,types,and,this,code,is,to,check,for,that,for,example,a,segment,containing,only,no,ops,does,not,have,neither,or;public,void,test,random,operations,throws,exception,int,num,ops,between,10,100,for,int,i,0,i,num,ops,i,string,id,integer,to,string,random,int,between,1,10,parsed,document,doc,create,parsed,doc,id,null,engine,operation,type,type,random,from,engine,operation,type,values,switch,type,case,index,engine,index,result,index,engine,index,replica,index,for,doc,doc,between,1,100,i,random,boolean,assert,that,index,get,failure,null,value,break,case,delete,engine,delete,result,delete,engine,delete,replica,delete,for,doc,doc,id,between,1,100,i,random,non,negative,long,assert,that,delete,get,failure,null,value,break,case,engine,no,op,result,no,op,engine,no,op,new,engine,no,op,i,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,assert,that,no,op,get,failure,null,value,break,default,throw,new,illegal,state,exception,invalid,op,type,if,random,boolean,engine,refresh,test,if,random,boolean,engine,flush,if,random,boolean,engine,force,merge,random,boolean,between,1,10,random,boolean,false,false,if,engine,engine,config,get,index,settings,is,soft,delete,enabled,list,translog,operation,operations,read,all,operations,in,lucene,engine,create,mapper,service,test,assert,that,operations,has,size,num,ops
InternalEngineTests -> public void testRandomOperations() throws Exception;1540847035;A simple test to check that random combination of operations can coexist in segments and be lookup._This is needed as some fields in Lucene may not exist if a segment misses operation types and this code is to check for that._For example, a segment containing only no-ops does not have neither _uid or _version.;public void testRandomOperations() throws Exception {_        int numOps = between(10, 100)__        for (int i = 0_ i < numOps_ i++) {_            String id = Integer.toString(randomIntBetween(1, 10))__            ParsedDocument doc = createParsedDoc(id, null)__            Engine.Operation.TYPE type = randomFrom(Engine.Operation.TYPE.values())__            switch (type) {_                case INDEX:_                    Engine.IndexResult index = engine.index(replicaIndexForDoc(doc, between(1, 100), i, randomBoolean()))__                    assertThat(index.getFailure(), nullValue())__                    break__                case DELETE:_                    Engine.DeleteResult delete = engine.delete(replicaDeleteForDoc(doc.id(), between(1, 100), i, randomNonNegativeLong()))__                    assertThat(delete.getFailure(), nullValue())__                    break__                case NO_OP:_                    Engine.NoOpResult noOp = engine.noOp(new Engine.NoOp(i, primaryTerm.get(),_                        randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), ""))__                    assertThat(noOp.getFailure(), nullValue())__                    break__                default:_                    throw new IllegalStateException("Invalid op [" + type + "]")__            }_            if (randomBoolean()) {_                engine.refresh("test")__            }_            if (randomBoolean()) {_                engine.flush()__            }_            if (randomBoolean()) {_                engine.forceMerge(randomBoolean(), between(1, 10), randomBoolean(), false, false)__            }_        }_        if (engine.engineConfig.getIndexSettings().isSoftDeleteEnabled()) {_            List<Translog.Operation> operations = readAllOperationsInLucene(engine, createMapperService("test"))__            assertThat(operations, hasSize(numOps))__        }_    };a,simple,test,to,check,that,random,combination,of,operations,can,coexist,in,segments,and,be,lookup,this,is,needed,as,some,fields,in,lucene,may,not,exist,if,a,segment,misses,operation,types,and,this,code,is,to,check,for,that,for,example,a,segment,containing,only,no,ops,does,not,have,neither,or;public,void,test,random,operations,throws,exception,int,num,ops,between,10,100,for,int,i,0,i,num,ops,i,string,id,integer,to,string,random,int,between,1,10,parsed,document,doc,create,parsed,doc,id,null,engine,operation,type,type,random,from,engine,operation,type,values,switch,type,case,index,engine,index,result,index,engine,index,replica,index,for,doc,doc,between,1,100,i,random,boolean,assert,that,index,get,failure,null,value,break,case,delete,engine,delete,result,delete,engine,delete,replica,delete,for,doc,doc,id,between,1,100,i,random,non,negative,long,assert,that,delete,get,failure,null,value,break,case,engine,no,op,result,no,op,engine,no,op,new,engine,no,op,i,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,assert,that,no,op,get,failure,null,value,break,default,throw,new,illegal,state,exception,invalid,op,type,if,random,boolean,engine,refresh,test,if,random,boolean,engine,flush,if,random,boolean,engine,force,merge,random,boolean,between,1,10,random,boolean,false,false,if,engine,engine,config,get,index,settings,is,soft,delete,enabled,list,translog,operation,operations,read,all,operations,in,lucene,engine,create,mapper,service,test,assert,that,operations,has,size,num,ops
InternalEngineTests -> public void testRandomOperations() throws Exception;1541335413;A simple test to check that random combination of operations can coexist in segments and be lookup._This is needed as some fields in Lucene may not exist if a segment misses operation types and this code is to check for that._For example, a segment containing only no-ops does not have neither _uid or _version.;public void testRandomOperations() throws Exception {_        int numOps = between(10, 100)__        for (int i = 0_ i < numOps_ i++) {_            String id = Integer.toString(randomIntBetween(1, 10))__            ParsedDocument doc = createParsedDoc(id, null)__            Engine.Operation.TYPE type = randomFrom(Engine.Operation.TYPE.values())__            switch (type) {_                case INDEX:_                    Engine.IndexResult index = engine.index(replicaIndexForDoc(doc, between(1, 100), i, randomBoolean()))__                    assertThat(index.getFailure(), nullValue())__                    break__                case DELETE:_                    Engine.DeleteResult delete = engine.delete(replicaDeleteForDoc(doc.id(), between(1, 100), i, randomNonNegativeLong()))__                    assertThat(delete.getFailure(), nullValue())__                    break__                case NO_OP:_                    Engine.NoOpResult noOp = engine.noOp(new Engine.NoOp(i, primaryTerm.get(),_                        randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), ""))__                    assertThat(noOp.getFailure(), nullValue())__                    break__                default:_                    throw new IllegalStateException("Invalid op [" + type + "]")__            }_            if (randomBoolean()) {_                engine.refresh("test")__            }_            if (randomBoolean()) {_                engine.flush()__            }_            if (randomBoolean()) {_                engine.forceMerge(randomBoolean(), between(1, 10), randomBoolean(), false, false)__            }_        }_        if (engine.engineConfig.getIndexSettings().isSoftDeleteEnabled()) {_            List<Translog.Operation> operations = readAllOperationsInLucene(engine, createMapperService("test"))__            assertThat(operations, hasSize(numOps))__        }_    };a,simple,test,to,check,that,random,combination,of,operations,can,coexist,in,segments,and,be,lookup,this,is,needed,as,some,fields,in,lucene,may,not,exist,if,a,segment,misses,operation,types,and,this,code,is,to,check,for,that,for,example,a,segment,containing,only,no,ops,does,not,have,neither,or;public,void,test,random,operations,throws,exception,int,num,ops,between,10,100,for,int,i,0,i,num,ops,i,string,id,integer,to,string,random,int,between,1,10,parsed,document,doc,create,parsed,doc,id,null,engine,operation,type,type,random,from,engine,operation,type,values,switch,type,case,index,engine,index,result,index,engine,index,replica,index,for,doc,doc,between,1,100,i,random,boolean,assert,that,index,get,failure,null,value,break,case,delete,engine,delete,result,delete,engine,delete,replica,delete,for,doc,doc,id,between,1,100,i,random,non,negative,long,assert,that,delete,get,failure,null,value,break,case,engine,no,op,result,no,op,engine,no,op,new,engine,no,op,i,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,assert,that,no,op,get,failure,null,value,break,default,throw,new,illegal,state,exception,invalid,op,type,if,random,boolean,engine,refresh,test,if,random,boolean,engine,flush,if,random,boolean,engine,force,merge,random,boolean,between,1,10,random,boolean,false,false,if,engine,engine,config,get,index,settings,is,soft,delete,enabled,list,translog,operation,operations,read,all,operations,in,lucene,engine,create,mapper,service,test,assert,that,operations,has,size,num,ops
InternalEngineTests -> public void testRandomOperations() throws Exception;1541618615;A simple test to check that random combination of operations can coexist in segments and be lookup._This is needed as some fields in Lucene may not exist if a segment misses operation types and this code is to check for that._For example, a segment containing only no-ops does not have neither _uid or _version.;public void testRandomOperations() throws Exception {_        int numOps = between(10, 100)__        for (int i = 0_ i < numOps_ i++) {_            String id = Integer.toString(randomIntBetween(1, 10))__            ParsedDocument doc = createParsedDoc(id, null)__            Engine.Operation.TYPE type = randomFrom(Engine.Operation.TYPE.values())__            switch (type) {_                case INDEX:_                    Engine.IndexResult index = engine.index(replicaIndexForDoc(doc, between(1, 100), i, randomBoolean()))__                    assertThat(index.getFailure(), nullValue())__                    break__                case DELETE:_                    Engine.DeleteResult delete = engine.delete(replicaDeleteForDoc(doc.id(), between(1, 100), i, randomNonNegativeLong()))__                    assertThat(delete.getFailure(), nullValue())__                    break__                case NO_OP:_                    Engine.NoOpResult noOp = engine.noOp(new Engine.NoOp(i, primaryTerm.get(),_                        randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), ""))__                    assertThat(noOp.getFailure(), nullValue())__                    break__                default:_                    throw new IllegalStateException("Invalid op [" + type + "]")__            }_            if (randomBoolean()) {_                engine.refresh("test")__            }_            if (randomBoolean()) {_                engine.flush()__            }_            if (randomBoolean()) {_                engine.forceMerge(randomBoolean(), between(1, 10), randomBoolean(), false, false)__            }_        }_        if (engine.engineConfig.getIndexSettings().isSoftDeleteEnabled()) {_            List<Translog.Operation> operations = readAllOperationsInLucene(engine, createMapperService("test"))__            assertThat(operations, hasSize(numOps))__        }_    };a,simple,test,to,check,that,random,combination,of,operations,can,coexist,in,segments,and,be,lookup,this,is,needed,as,some,fields,in,lucene,may,not,exist,if,a,segment,misses,operation,types,and,this,code,is,to,check,for,that,for,example,a,segment,containing,only,no,ops,does,not,have,neither,or;public,void,test,random,operations,throws,exception,int,num,ops,between,10,100,for,int,i,0,i,num,ops,i,string,id,integer,to,string,random,int,between,1,10,parsed,document,doc,create,parsed,doc,id,null,engine,operation,type,type,random,from,engine,operation,type,values,switch,type,case,index,engine,index,result,index,engine,index,replica,index,for,doc,doc,between,1,100,i,random,boolean,assert,that,index,get,failure,null,value,break,case,delete,engine,delete,result,delete,engine,delete,replica,delete,for,doc,doc,id,between,1,100,i,random,non,negative,long,assert,that,delete,get,failure,null,value,break,case,engine,no,op,result,no,op,engine,no,op,new,engine,no,op,i,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,assert,that,no,op,get,failure,null,value,break,default,throw,new,illegal,state,exception,invalid,op,type,if,random,boolean,engine,refresh,test,if,random,boolean,engine,flush,if,random,boolean,engine,force,merge,random,boolean,between,1,10,random,boolean,false,false,if,engine,engine,config,get,index,settings,is,soft,delete,enabled,list,translog,operation,operations,read,all,operations,in,lucene,engine,create,mapper,service,test,assert,that,operations,has,size,num,ops
InternalEngineTests -> public void testRandomOperations() throws Exception;1541622390;A simple test to check that random combination of operations can coexist in segments and be lookup._This is needed as some fields in Lucene may not exist if a segment misses operation types and this code is to check for that._For example, a segment containing only no-ops does not have neither _uid or _version.;public void testRandomOperations() throws Exception {_        int numOps = between(10, 100)__        for (int i = 0_ i < numOps_ i++) {_            String id = Integer.toString(randomIntBetween(1, 10))__            ParsedDocument doc = createParsedDoc(id, null)__            Engine.Operation.TYPE type = randomFrom(Engine.Operation.TYPE.values())__            switch (type) {_                case INDEX:_                    Engine.IndexResult index = engine.index(replicaIndexForDoc(doc, between(1, 100), i, randomBoolean()))__                    assertThat(index.getFailure(), nullValue())__                    break__                case DELETE:_                    Engine.DeleteResult delete = engine.delete(replicaDeleteForDoc(doc.id(), between(1, 100), i, randomNonNegativeLong()))__                    assertThat(delete.getFailure(), nullValue())__                    break__                case NO_OP:_                    Engine.NoOpResult noOp = engine.noOp(new Engine.NoOp(i, primaryTerm.get(),_                        randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), ""))__                    assertThat(noOp.getFailure(), nullValue())__                    break__                default:_                    throw new IllegalStateException("Invalid op [" + type + "]")__            }_            if (randomBoolean()) {_                engine.refresh("test")__            }_            if (randomBoolean()) {_                engine.flush()__            }_            if (randomBoolean()) {_                engine.forceMerge(randomBoolean(), between(1, 10), randomBoolean(), false, false)__            }_        }_        if (engine.engineConfig.getIndexSettings().isSoftDeleteEnabled()) {_            List<Translog.Operation> operations = readAllOperationsInLucene(engine, createMapperService("test"))__            assertThat(operations, hasSize(numOps))__        }_    };a,simple,test,to,check,that,random,combination,of,operations,can,coexist,in,segments,and,be,lookup,this,is,needed,as,some,fields,in,lucene,may,not,exist,if,a,segment,misses,operation,types,and,this,code,is,to,check,for,that,for,example,a,segment,containing,only,no,ops,does,not,have,neither,or;public,void,test,random,operations,throws,exception,int,num,ops,between,10,100,for,int,i,0,i,num,ops,i,string,id,integer,to,string,random,int,between,1,10,parsed,document,doc,create,parsed,doc,id,null,engine,operation,type,type,random,from,engine,operation,type,values,switch,type,case,index,engine,index,result,index,engine,index,replica,index,for,doc,doc,between,1,100,i,random,boolean,assert,that,index,get,failure,null,value,break,case,delete,engine,delete,result,delete,engine,delete,replica,delete,for,doc,doc,id,between,1,100,i,random,non,negative,long,assert,that,delete,get,failure,null,value,break,case,engine,no,op,result,no,op,engine,no,op,new,engine,no,op,i,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,assert,that,no,op,get,failure,null,value,break,default,throw,new,illegal,state,exception,invalid,op,type,if,random,boolean,engine,refresh,test,if,random,boolean,engine,flush,if,random,boolean,engine,force,merge,random,boolean,between,1,10,random,boolean,false,false,if,engine,engine,config,get,index,settings,is,soft,delete,enabled,list,translog,operation,operations,read,all,operations,in,lucene,engine,create,mapper,service,test,assert,that,operations,has,size,num,ops
InternalEngineTests -> public void testRandomOperations() throws Exception;1542697754;A simple test to check that random combination of operations can coexist in segments and be lookup._This is needed as some fields in Lucene may not exist if a segment misses operation types and this code is to check for that._For example, a segment containing only no-ops does not have neither _uid or _version.;public void testRandomOperations() throws Exception {_        int numOps = between(10, 100)__        for (int i = 0_ i < numOps_ i++) {_            String id = Integer.toString(randomIntBetween(1, 10))__            ParsedDocument doc = createParsedDoc(id, null)__            Engine.Operation.TYPE type = randomFrom(Engine.Operation.TYPE.values())__            switch (type) {_                case INDEX:_                    Engine.IndexResult index = engine.index(replicaIndexForDoc(doc, between(1, 100), i, randomBoolean()))__                    assertThat(index.getFailure(), nullValue())__                    break__                case DELETE:_                    Engine.DeleteResult delete = engine.delete(replicaDeleteForDoc(doc.id(), between(1, 100), i, randomNonNegativeLong()))__                    assertThat(delete.getFailure(), nullValue())__                    break__                case NO_OP:_                    Engine.NoOpResult noOp = engine.noOp(new Engine.NoOp(i, primaryTerm.get(),_                        randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), ""))__                    assertThat(noOp.getFailure(), nullValue())__                    break__                default:_                    throw new IllegalStateException("Invalid op [" + type + "]")__            }_            if (randomBoolean()) {_                engine.refresh("test")__            }_            if (randomBoolean()) {_                engine.flush()__            }_            if (randomBoolean()) {_                engine.forceMerge(randomBoolean(), between(1, 10), randomBoolean(), false, false)__            }_        }_        if (engine.engineConfig.getIndexSettings().isSoftDeleteEnabled()) {_            List<Translog.Operation> operations = readAllOperationsInLucene(engine, createMapperService("test"))__            assertThat(operations, hasSize(numOps))__        }_    };a,simple,test,to,check,that,random,combination,of,operations,can,coexist,in,segments,and,be,lookup,this,is,needed,as,some,fields,in,lucene,may,not,exist,if,a,segment,misses,operation,types,and,this,code,is,to,check,for,that,for,example,a,segment,containing,only,no,ops,does,not,have,neither,or;public,void,test,random,operations,throws,exception,int,num,ops,between,10,100,for,int,i,0,i,num,ops,i,string,id,integer,to,string,random,int,between,1,10,parsed,document,doc,create,parsed,doc,id,null,engine,operation,type,type,random,from,engine,operation,type,values,switch,type,case,index,engine,index,result,index,engine,index,replica,index,for,doc,doc,between,1,100,i,random,boolean,assert,that,index,get,failure,null,value,break,case,delete,engine,delete,result,delete,engine,delete,replica,delete,for,doc,doc,id,between,1,100,i,random,non,negative,long,assert,that,delete,get,failure,null,value,break,case,engine,no,op,result,no,op,engine,no,op,new,engine,no,op,i,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,assert,that,no,op,get,failure,null,value,break,default,throw,new,illegal,state,exception,invalid,op,type,if,random,boolean,engine,refresh,test,if,random,boolean,engine,flush,if,random,boolean,engine,force,merge,random,boolean,between,1,10,random,boolean,false,false,if,engine,engine,config,get,index,settings,is,soft,delete,enabled,list,translog,operation,operations,read,all,operations,in,lucene,engine,create,mapper,service,test,assert,that,operations,has,size,num,ops
InternalEngineTests -> public void testRandomOperations() throws Exception;1542893693;A simple test to check that random combination of operations can coexist in segments and be lookup._This is needed as some fields in Lucene may not exist if a segment misses operation types and this code is to check for that._For example, a segment containing only no-ops does not have neither _uid or _version.;public void testRandomOperations() throws Exception {_        int numOps = between(10, 100)__        for (int i = 0_ i < numOps_ i++) {_            String id = Integer.toString(randomIntBetween(1, 10))__            ParsedDocument doc = createParsedDoc(id, null)__            Engine.Operation.TYPE type = randomFrom(Engine.Operation.TYPE.values())__            switch (type) {_                case INDEX:_                    Engine.IndexResult index = engine.index(replicaIndexForDoc(doc, between(1, 100), i, randomBoolean()))__                    assertThat(index.getFailure(), nullValue())__                    break__                case DELETE:_                    Engine.DeleteResult delete = engine.delete(replicaDeleteForDoc(doc.id(), between(1, 100), i, randomNonNegativeLong()))__                    assertThat(delete.getFailure(), nullValue())__                    break__                case NO_OP:_                    Engine.NoOpResult noOp = engine.noOp(new Engine.NoOp(i, primaryTerm.get(),_                        randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), ""))__                    assertThat(noOp.getFailure(), nullValue())__                    break__                default:_                    throw new IllegalStateException("Invalid op [" + type + "]")__            }_            if (randomBoolean()) {_                engine.refresh("test")__            }_            if (randomBoolean()) {_                engine.flush()__            }_            if (randomBoolean()) {_                engine.forceMerge(randomBoolean(), between(1, 10), randomBoolean(), false, false)__            }_        }_        if (engine.engineConfig.getIndexSettings().isSoftDeleteEnabled()) {_            List<Translog.Operation> operations = readAllOperationsInLucene(engine, createMapperService("test"))__            assertThat(operations, hasSize(numOps))__        }_    };a,simple,test,to,check,that,random,combination,of,operations,can,coexist,in,segments,and,be,lookup,this,is,needed,as,some,fields,in,lucene,may,not,exist,if,a,segment,misses,operation,types,and,this,code,is,to,check,for,that,for,example,a,segment,containing,only,no,ops,does,not,have,neither,or;public,void,test,random,operations,throws,exception,int,num,ops,between,10,100,for,int,i,0,i,num,ops,i,string,id,integer,to,string,random,int,between,1,10,parsed,document,doc,create,parsed,doc,id,null,engine,operation,type,type,random,from,engine,operation,type,values,switch,type,case,index,engine,index,result,index,engine,index,replica,index,for,doc,doc,between,1,100,i,random,boolean,assert,that,index,get,failure,null,value,break,case,delete,engine,delete,result,delete,engine,delete,replica,delete,for,doc,doc,id,between,1,100,i,random,non,negative,long,assert,that,delete,get,failure,null,value,break,case,engine,no,op,result,no,op,engine,no,op,new,engine,no,op,i,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,assert,that,no,op,get,failure,null,value,break,default,throw,new,illegal,state,exception,invalid,op,type,if,random,boolean,engine,refresh,test,if,random,boolean,engine,flush,if,random,boolean,engine,force,merge,random,boolean,between,1,10,random,boolean,false,false,if,engine,engine,config,get,index,settings,is,soft,delete,enabled,list,translog,operation,operations,read,all,operations,in,lucene,engine,create,mapper,service,test,assert,that,operations,has,size,num,ops
InternalEngineTests -> public void testRandomOperations() throws Exception;1543940134;A simple test to check that random combination of operations can coexist in segments and be lookup._This is needed as some fields in Lucene may not exist if a segment misses operation types and this code is to check for that._For example, a segment containing only no-ops does not have neither _uid or _version.;public void testRandomOperations() throws Exception {_        int numOps = between(10, 100)__        for (int i = 0_ i < numOps_ i++) {_            String id = Integer.toString(randomIntBetween(1, 10))__            ParsedDocument doc = createParsedDoc(id, null)__            Engine.Operation.TYPE type = randomFrom(Engine.Operation.TYPE.values())__            switch (type) {_                case INDEX:_                    Engine.IndexResult index = engine.index(replicaIndexForDoc(doc, between(1, 100), i, randomBoolean()))__                    assertThat(index.getFailure(), nullValue())__                    break__                case DELETE:_                    Engine.DeleteResult delete = engine.delete(replicaDeleteForDoc(doc.id(), between(1, 100), i, randomNonNegativeLong()))__                    assertThat(delete.getFailure(), nullValue())__                    break__                case NO_OP:_                    Engine.NoOpResult noOp = engine.noOp(new Engine.NoOp(i, primaryTerm.get(),_                        randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), ""))__                    assertThat(noOp.getFailure(), nullValue())__                    break__                default:_                    throw new IllegalStateException("Invalid op [" + type + "]")__            }_            if (randomBoolean()) {_                engine.refresh("test")__            }_            if (randomBoolean()) {_                engine.flush()__            }_            if (randomBoolean()) {_                engine.forceMerge(randomBoolean(), between(1, 10), randomBoolean(), false, false)__            }_        }_        if (engine.engineConfig.getIndexSettings().isSoftDeleteEnabled()) {_            List<Translog.Operation> operations = readAllOperationsInLucene(engine, createMapperService("test"))__            assertThat(operations, hasSize(numOps))__        }_    };a,simple,test,to,check,that,random,combination,of,operations,can,coexist,in,segments,and,be,lookup,this,is,needed,as,some,fields,in,lucene,may,not,exist,if,a,segment,misses,operation,types,and,this,code,is,to,check,for,that,for,example,a,segment,containing,only,no,ops,does,not,have,neither,or;public,void,test,random,operations,throws,exception,int,num,ops,between,10,100,for,int,i,0,i,num,ops,i,string,id,integer,to,string,random,int,between,1,10,parsed,document,doc,create,parsed,doc,id,null,engine,operation,type,type,random,from,engine,operation,type,values,switch,type,case,index,engine,index,result,index,engine,index,replica,index,for,doc,doc,between,1,100,i,random,boolean,assert,that,index,get,failure,null,value,break,case,delete,engine,delete,result,delete,engine,delete,replica,delete,for,doc,doc,id,between,1,100,i,random,non,negative,long,assert,that,delete,get,failure,null,value,break,case,engine,no,op,result,no,op,engine,no,op,new,engine,no,op,i,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,assert,that,no,op,get,failure,null,value,break,default,throw,new,illegal,state,exception,invalid,op,type,if,random,boolean,engine,refresh,test,if,random,boolean,engine,flush,if,random,boolean,engine,force,merge,random,boolean,between,1,10,random,boolean,false,false,if,engine,engine,config,get,index,settings,is,soft,delete,enabled,list,translog,operation,operations,read,all,operations,in,lucene,engine,create,mapper,service,test,assert,that,operations,has,size,num,ops
InternalEngineTests -> public void testRandomOperations() throws Exception;1543942400;A simple test to check that random combination of operations can coexist in segments and be lookup._This is needed as some fields in Lucene may not exist if a segment misses operation types and this code is to check for that._For example, a segment containing only no-ops does not have neither _uid or _version.;public void testRandomOperations() throws Exception {_        int numOps = between(10, 100)__        for (int i = 0_ i < numOps_ i++) {_            String id = Integer.toString(randomIntBetween(1, 10))__            ParsedDocument doc = createParsedDoc(id, null)__            Engine.Operation.TYPE type = randomFrom(Engine.Operation.TYPE.values())__            switch (type) {_                case INDEX:_                    Engine.IndexResult index = engine.index(replicaIndexForDoc(doc, between(1, 100), i, randomBoolean()))__                    assertThat(index.getFailure(), nullValue())__                    break__                case DELETE:_                    Engine.DeleteResult delete = engine.delete(replicaDeleteForDoc(doc.id(), between(1, 100), i, randomNonNegativeLong()))__                    assertThat(delete.getFailure(), nullValue())__                    break__                case NO_OP:_                    Engine.NoOpResult noOp = engine.noOp(new Engine.NoOp(i, primaryTerm.get(),_                        randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), ""))__                    assertThat(noOp.getFailure(), nullValue())__                    break__                default:_                    throw new IllegalStateException("Invalid op [" + type + "]")__            }_            if (randomBoolean()) {_                engine.refresh("test")__            }_            if (randomBoolean()) {_                engine.flush()__            }_            if (randomBoolean()) {_                engine.forceMerge(randomBoolean(), between(1, 10), randomBoolean(), false, false)__            }_        }_        if (engine.engineConfig.getIndexSettings().isSoftDeleteEnabled()) {_            List<Translog.Operation> operations = readAllOperationsInLucene(engine, createMapperService("test"))__            assertThat(operations, hasSize(numOps))__        }_    };a,simple,test,to,check,that,random,combination,of,operations,can,coexist,in,segments,and,be,lookup,this,is,needed,as,some,fields,in,lucene,may,not,exist,if,a,segment,misses,operation,types,and,this,code,is,to,check,for,that,for,example,a,segment,containing,only,no,ops,does,not,have,neither,or;public,void,test,random,operations,throws,exception,int,num,ops,between,10,100,for,int,i,0,i,num,ops,i,string,id,integer,to,string,random,int,between,1,10,parsed,document,doc,create,parsed,doc,id,null,engine,operation,type,type,random,from,engine,operation,type,values,switch,type,case,index,engine,index,result,index,engine,index,replica,index,for,doc,doc,between,1,100,i,random,boolean,assert,that,index,get,failure,null,value,break,case,delete,engine,delete,result,delete,engine,delete,replica,delete,for,doc,doc,id,between,1,100,i,random,non,negative,long,assert,that,delete,get,failure,null,value,break,case,engine,no,op,result,no,op,engine,no,op,new,engine,no,op,i,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,assert,that,no,op,get,failure,null,value,break,default,throw,new,illegal,state,exception,invalid,op,type,if,random,boolean,engine,refresh,test,if,random,boolean,engine,flush,if,random,boolean,engine,force,merge,random,boolean,between,1,10,random,boolean,false,false,if,engine,engine,config,get,index,settings,is,soft,delete,enabled,list,translog,operation,operations,read,all,operations,in,lucene,engine,create,mapper,service,test,assert,that,operations,has,size,num,ops
InternalEngineTests -> public void testRandomOperations() throws Exception;1544139474;A simple test to check that random combination of operations can coexist in segments and be lookup._This is needed as some fields in Lucene may not exist if a segment misses operation types and this code is to check for that._For example, a segment containing only no-ops does not have neither _uid or _version.;public void testRandomOperations() throws Exception {_        int numOps = between(10, 100)__        for (int i = 0_ i < numOps_ i++) {_            String id = Integer.toString(randomIntBetween(1, 10))__            ParsedDocument doc = createParsedDoc(id, null)__            Engine.Operation.TYPE type = randomFrom(Engine.Operation.TYPE.values())__            switch (type) {_                case INDEX:_                    Engine.IndexResult index = engine.index(replicaIndexForDoc(doc, between(1, 100), i, randomBoolean()))__                    assertThat(index.getFailure(), nullValue())__                    break__                case DELETE:_                    Engine.DeleteResult delete = engine.delete(replicaDeleteForDoc(doc.id(), between(1, 100), i, randomNonNegativeLong()))__                    assertThat(delete.getFailure(), nullValue())__                    break__                case NO_OP:_                    Engine.NoOpResult noOp = engine.noOp(new Engine.NoOp(i, primaryTerm.get(),_                        randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), ""))__                    assertThat(noOp.getFailure(), nullValue())__                    break__                default:_                    throw new IllegalStateException("Invalid op [" + type + "]")__            }_            if (randomBoolean()) {_                engine.refresh("test")__            }_            if (randomBoolean()) {_                engine.flush()__            }_            if (randomBoolean()) {_                engine.forceMerge(randomBoolean(), between(1, 10), randomBoolean(), false, false)__            }_        }_        if (engine.engineConfig.getIndexSettings().isSoftDeleteEnabled()) {_            List<Translog.Operation> operations = readAllOperationsInLucene(engine, createMapperService("test"))__            assertThat(operations, hasSize(numOps))__        }_    };a,simple,test,to,check,that,random,combination,of,operations,can,coexist,in,segments,and,be,lookup,this,is,needed,as,some,fields,in,lucene,may,not,exist,if,a,segment,misses,operation,types,and,this,code,is,to,check,for,that,for,example,a,segment,containing,only,no,ops,does,not,have,neither,or;public,void,test,random,operations,throws,exception,int,num,ops,between,10,100,for,int,i,0,i,num,ops,i,string,id,integer,to,string,random,int,between,1,10,parsed,document,doc,create,parsed,doc,id,null,engine,operation,type,type,random,from,engine,operation,type,values,switch,type,case,index,engine,index,result,index,engine,index,replica,index,for,doc,doc,between,1,100,i,random,boolean,assert,that,index,get,failure,null,value,break,case,delete,engine,delete,result,delete,engine,delete,replica,delete,for,doc,doc,id,between,1,100,i,random,non,negative,long,assert,that,delete,get,failure,null,value,break,case,engine,no,op,result,no,op,engine,no,op,new,engine,no,op,i,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,assert,that,no,op,get,failure,null,value,break,default,throw,new,illegal,state,exception,invalid,op,type,if,random,boolean,engine,refresh,test,if,random,boolean,engine,flush,if,random,boolean,engine,force,merge,random,boolean,between,1,10,random,boolean,false,false,if,engine,engine,config,get,index,settings,is,soft,delete,enabled,list,translog,operation,operations,read,all,operations,in,lucene,engine,create,mapper,service,test,assert,that,operations,has,size,num,ops
InternalEngineTests -> public void testRandomOperations() throws Exception;1544203340;A simple test to check that random combination of operations can coexist in segments and be lookup._This is needed as some fields in Lucene may not exist if a segment misses operation types and this code is to check for that._For example, a segment containing only no-ops does not have neither _uid or _version.;public void testRandomOperations() throws Exception {_        int numOps = between(10, 100)__        for (int i = 0_ i < numOps_ i++) {_            String id = Integer.toString(randomIntBetween(1, 10))__            ParsedDocument doc = createParsedDoc(id, null)__            Engine.Operation.TYPE type = randomFrom(Engine.Operation.TYPE.values())__            switch (type) {_                case INDEX:_                    Engine.IndexResult index = engine.index(replicaIndexForDoc(doc, between(1, 100), i, randomBoolean()))__                    assertThat(index.getFailure(), nullValue())__                    break__                case DELETE:_                    Engine.DeleteResult delete = engine.delete(replicaDeleteForDoc(doc.id(), between(1, 100), i, randomNonNegativeLong()))__                    assertThat(delete.getFailure(), nullValue())__                    break__                case NO_OP:_                    Engine.NoOpResult noOp = engine.noOp(new Engine.NoOp(i, primaryTerm.get(),_                        randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), ""))__                    assertThat(noOp.getFailure(), nullValue())__                    break__                default:_                    throw new IllegalStateException("Invalid op [" + type + "]")__            }_            if (randomBoolean()) {_                engine.refresh("test")__            }_            if (randomBoolean()) {_                engine.flush()__            }_            if (randomBoolean()) {_                engine.forceMerge(randomBoolean(), between(1, 10), randomBoolean(), false, false)__            }_        }_        if (engine.engineConfig.getIndexSettings().isSoftDeleteEnabled()) {_            List<Translog.Operation> operations = readAllOperationsInLucene(engine, createMapperService("test"))__            assertThat(operations, hasSize(numOps))__        }_    };a,simple,test,to,check,that,random,combination,of,operations,can,coexist,in,segments,and,be,lookup,this,is,needed,as,some,fields,in,lucene,may,not,exist,if,a,segment,misses,operation,types,and,this,code,is,to,check,for,that,for,example,a,segment,containing,only,no,ops,does,not,have,neither,or;public,void,test,random,operations,throws,exception,int,num,ops,between,10,100,for,int,i,0,i,num,ops,i,string,id,integer,to,string,random,int,between,1,10,parsed,document,doc,create,parsed,doc,id,null,engine,operation,type,type,random,from,engine,operation,type,values,switch,type,case,index,engine,index,result,index,engine,index,replica,index,for,doc,doc,between,1,100,i,random,boolean,assert,that,index,get,failure,null,value,break,case,delete,engine,delete,result,delete,engine,delete,replica,delete,for,doc,doc,id,between,1,100,i,random,non,negative,long,assert,that,delete,get,failure,null,value,break,case,engine,no,op,result,no,op,engine,no,op,new,engine,no,op,i,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,assert,that,no,op,get,failure,null,value,break,default,throw,new,illegal,state,exception,invalid,op,type,if,random,boolean,engine,refresh,test,if,random,boolean,engine,flush,if,random,boolean,engine,force,merge,random,boolean,between,1,10,random,boolean,false,false,if,engine,engine,config,get,index,settings,is,soft,delete,enabled,list,translog,operation,operations,read,all,operations,in,lucene,engine,create,mapper,service,test,assert,that,operations,has,size,num,ops
InternalEngineTests -> public void testRandomOperations() throws Exception;1544545090;A simple test to check that random combination of operations can coexist in segments and be lookup._This is needed as some fields in Lucene may not exist if a segment misses operation types and this code is to check for that._For example, a segment containing only no-ops does not have neither _uid or _version.;public void testRandomOperations() throws Exception {_        int numOps = between(10, 100)__        for (int i = 0_ i < numOps_ i++) {_            String id = Integer.toString(randomIntBetween(1, 10))__            ParsedDocument doc = createParsedDoc(id, null)__            Engine.Operation.TYPE type = randomFrom(Engine.Operation.TYPE.values())__            switch (type) {_                case INDEX:_                    Engine.IndexResult index = engine.index(replicaIndexForDoc(doc, between(1, 100), i, randomBoolean()))__                    assertThat(index.getFailure(), nullValue())__                    break__                case DELETE:_                    Engine.DeleteResult delete = engine.delete(replicaDeleteForDoc(doc.id(), between(1, 100), i, randomNonNegativeLong()))__                    assertThat(delete.getFailure(), nullValue())__                    break__                case NO_OP:_                    Engine.NoOpResult noOp = engine.noOp(new Engine.NoOp(i, primaryTerm.get(),_                        randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), ""))__                    assertThat(noOp.getFailure(), nullValue())__                    break__                default:_                    throw new IllegalStateException("Invalid op [" + type + "]")__            }_            if (randomBoolean()) {_                engine.refresh("test")__            }_            if (randomBoolean()) {_                engine.flush()__            }_            if (randomBoolean()) {_                engine.forceMerge(randomBoolean(), between(1, 10), randomBoolean(), false, false)__            }_        }_        if (engine.engineConfig.getIndexSettings().isSoftDeleteEnabled()) {_            List<Translog.Operation> operations = readAllOperationsInLucene(engine, createMapperService("test"))__            assertThat(operations, hasSize(numOps))__        }_    };a,simple,test,to,check,that,random,combination,of,operations,can,coexist,in,segments,and,be,lookup,this,is,needed,as,some,fields,in,lucene,may,not,exist,if,a,segment,misses,operation,types,and,this,code,is,to,check,for,that,for,example,a,segment,containing,only,no,ops,does,not,have,neither,or;public,void,test,random,operations,throws,exception,int,num,ops,between,10,100,for,int,i,0,i,num,ops,i,string,id,integer,to,string,random,int,between,1,10,parsed,document,doc,create,parsed,doc,id,null,engine,operation,type,type,random,from,engine,operation,type,values,switch,type,case,index,engine,index,result,index,engine,index,replica,index,for,doc,doc,between,1,100,i,random,boolean,assert,that,index,get,failure,null,value,break,case,delete,engine,delete,result,delete,engine,delete,replica,delete,for,doc,doc,id,between,1,100,i,random,non,negative,long,assert,that,delete,get,failure,null,value,break,case,engine,no,op,result,no,op,engine,no,op,new,engine,no,op,i,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,assert,that,no,op,get,failure,null,value,break,default,throw,new,illegal,state,exception,invalid,op,type,if,random,boolean,engine,refresh,test,if,random,boolean,engine,flush,if,random,boolean,engine,force,merge,random,boolean,between,1,10,random,boolean,false,false,if,engine,engine,config,get,index,settings,is,soft,delete,enabled,list,translog,operation,operations,read,all,operations,in,lucene,engine,create,mapper,service,test,assert,that,operations,has,size,num,ops
InternalEngineTests -> public void testRandomOperations() throws Exception;1544684920;A simple test to check that random combination of operations can coexist in segments and be lookup._This is needed as some fields in Lucene may not exist if a segment misses operation types and this code is to check for that._For example, a segment containing only no-ops does not have neither _uid or _version.;public void testRandomOperations() throws Exception {_        int numOps = between(10, 100)__        for (int i = 0_ i < numOps_ i++) {_            String id = Integer.toString(randomIntBetween(1, 10))__            ParsedDocument doc = createParsedDoc(id, null)__            Engine.Operation.TYPE type = randomFrom(Engine.Operation.TYPE.values())__            switch (type) {_                case INDEX:_                    Engine.IndexResult index = engine.index(replicaIndexForDoc(doc, between(1, 100), i, randomBoolean()))__                    assertThat(index.getFailure(), nullValue())__                    break__                case DELETE:_                    Engine.DeleteResult delete = engine.delete(replicaDeleteForDoc(doc.id(), between(1, 100), i, randomNonNegativeLong()))__                    assertThat(delete.getFailure(), nullValue())__                    break__                case NO_OP:_                    Engine.NoOpResult noOp = engine.noOp(new Engine.NoOp(i, primaryTerm.get(),_                        randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), ""))__                    assertThat(noOp.getFailure(), nullValue())__                    break__                default:_                    throw new IllegalStateException("Invalid op [" + type + "]")__            }_            if (randomBoolean()) {_                engine.refresh("test")__            }_            if (randomBoolean()) {_                engine.flush()__            }_            if (randomBoolean()) {_                engine.forceMerge(randomBoolean(), between(1, 10), randomBoolean(), false, false)__            }_        }_        if (engine.engineConfig.getIndexSettings().isSoftDeleteEnabled()) {_            List<Translog.Operation> operations = readAllOperationsInLucene(engine, createMapperService("test"))__            assertThat(operations, hasSize(numOps))__        }_    };a,simple,test,to,check,that,random,combination,of,operations,can,coexist,in,segments,and,be,lookup,this,is,needed,as,some,fields,in,lucene,may,not,exist,if,a,segment,misses,operation,types,and,this,code,is,to,check,for,that,for,example,a,segment,containing,only,no,ops,does,not,have,neither,or;public,void,test,random,operations,throws,exception,int,num,ops,between,10,100,for,int,i,0,i,num,ops,i,string,id,integer,to,string,random,int,between,1,10,parsed,document,doc,create,parsed,doc,id,null,engine,operation,type,type,random,from,engine,operation,type,values,switch,type,case,index,engine,index,result,index,engine,index,replica,index,for,doc,doc,between,1,100,i,random,boolean,assert,that,index,get,failure,null,value,break,case,delete,engine,delete,result,delete,engine,delete,replica,delete,for,doc,doc,id,between,1,100,i,random,non,negative,long,assert,that,delete,get,failure,null,value,break,case,engine,no,op,result,no,op,engine,no,op,new,engine,no,op,i,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,assert,that,no,op,get,failure,null,value,break,default,throw,new,illegal,state,exception,invalid,op,type,if,random,boolean,engine,refresh,test,if,random,boolean,engine,flush,if,random,boolean,engine,force,merge,random,boolean,between,1,10,random,boolean,false,false,if,engine,engine,config,get,index,settings,is,soft,delete,enabled,list,translog,operation,operations,read,all,operations,in,lucene,engine,create,mapper,service,test,assert,that,operations,has,size,num,ops
InternalEngineTests -> public void testRandomOperations() throws Exception;1544783136;A simple test to check that random combination of operations can coexist in segments and be lookup._This is needed as some fields in Lucene may not exist if a segment misses operation types and this code is to check for that._For example, a segment containing only no-ops does not have neither _uid or _version.;public void testRandomOperations() throws Exception {_        int numOps = between(10, 100)__        for (int i = 0_ i < numOps_ i++) {_            String id = Integer.toString(randomIntBetween(1, 10))__            ParsedDocument doc = createParsedDoc(id, null)__            Engine.Operation.TYPE type = randomFrom(Engine.Operation.TYPE.values())__            switch (type) {_                case INDEX:_                    Engine.IndexResult index = engine.index(replicaIndexForDoc(doc, between(1, 100), i, randomBoolean()))__                    assertThat(index.getFailure(), nullValue())__                    break__                case DELETE:_                    Engine.DeleteResult delete = engine.delete(replicaDeleteForDoc(doc.id(), between(1, 100), i, randomNonNegativeLong()))__                    assertThat(delete.getFailure(), nullValue())__                    break__                case NO_OP:_                    Engine.NoOpResult noOp = engine.noOp(new Engine.NoOp(i, primaryTerm.get(),_                        randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), ""))__                    assertThat(noOp.getFailure(), nullValue())__                    break__                default:_                    throw new IllegalStateException("Invalid op [" + type + "]")__            }_            if (randomBoolean()) {_                engine.refresh("test")__            }_            if (randomBoolean()) {_                engine.flush()__            }_            if (randomBoolean()) {_                engine.forceMerge(randomBoolean(), between(1, 10), randomBoolean(), false, false)__            }_        }_        if (engine.engineConfig.getIndexSettings().isSoftDeleteEnabled()) {_            List<Translog.Operation> operations = readAllOperationsInLucene(engine, createMapperService("test"))__            assertThat(operations, hasSize(numOps))__        }_    };a,simple,test,to,check,that,random,combination,of,operations,can,coexist,in,segments,and,be,lookup,this,is,needed,as,some,fields,in,lucene,may,not,exist,if,a,segment,misses,operation,types,and,this,code,is,to,check,for,that,for,example,a,segment,containing,only,no,ops,does,not,have,neither,or;public,void,test,random,operations,throws,exception,int,num,ops,between,10,100,for,int,i,0,i,num,ops,i,string,id,integer,to,string,random,int,between,1,10,parsed,document,doc,create,parsed,doc,id,null,engine,operation,type,type,random,from,engine,operation,type,values,switch,type,case,index,engine,index,result,index,engine,index,replica,index,for,doc,doc,between,1,100,i,random,boolean,assert,that,index,get,failure,null,value,break,case,delete,engine,delete,result,delete,engine,delete,replica,delete,for,doc,doc,id,between,1,100,i,random,non,negative,long,assert,that,delete,get,failure,null,value,break,case,engine,no,op,result,no,op,engine,no,op,new,engine,no,op,i,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,assert,that,no,op,get,failure,null,value,break,default,throw,new,illegal,state,exception,invalid,op,type,if,random,boolean,engine,refresh,test,if,random,boolean,engine,flush,if,random,boolean,engine,force,merge,random,boolean,between,1,10,random,boolean,false,false,if,engine,engine,config,get,index,settings,is,soft,delete,enabled,list,translog,operation,operations,read,all,operations,in,lucene,engine,create,mapper,service,test,assert,that,operations,has,size,num,ops
InternalEngineTests -> public void testRandomOperations() throws Exception;1544819407;A simple test to check that random combination of operations can coexist in segments and be lookup._This is needed as some fields in Lucene may not exist if a segment misses operation types and this code is to check for that._For example, a segment containing only no-ops does not have neither _uid or _version.;public void testRandomOperations() throws Exception {_        int numOps = between(10, 100)__        for (int i = 0_ i < numOps_ i++) {_            String id = Integer.toString(randomIntBetween(1, 10))__            ParsedDocument doc = createParsedDoc(id, null)__            Engine.Operation.TYPE type = randomFrom(Engine.Operation.TYPE.values())__            switch (type) {_                case INDEX:_                    Engine.IndexResult index = engine.index(replicaIndexForDoc(doc, between(1, 100), i, randomBoolean()))__                    assertThat(index.getFailure(), nullValue())__                    break__                case DELETE:_                    Engine.DeleteResult delete = engine.delete(replicaDeleteForDoc(doc.id(), between(1, 100), i, randomNonNegativeLong()))__                    assertThat(delete.getFailure(), nullValue())__                    break__                case NO_OP:_                    Engine.NoOpResult noOp = engine.noOp(new Engine.NoOp(i, primaryTerm.get(),_                        randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), ""))__                    assertThat(noOp.getFailure(), nullValue())__                    break__                default:_                    throw new IllegalStateException("Invalid op [" + type + "]")__            }_            if (randomBoolean()) {_                engine.refresh("test")__            }_            if (randomBoolean()) {_                engine.flush()__            }_            if (randomBoolean()) {_                engine.forceMerge(randomBoolean(), between(1, 10), randomBoolean(), false, false)__            }_        }_        if (engine.engineConfig.getIndexSettings().isSoftDeleteEnabled()) {_            List<Translog.Operation> operations = readAllOperationsInLucene(engine, createMapperService("test"))__            assertThat(operations, hasSize(numOps))__        }_    };a,simple,test,to,check,that,random,combination,of,operations,can,coexist,in,segments,and,be,lookup,this,is,needed,as,some,fields,in,lucene,may,not,exist,if,a,segment,misses,operation,types,and,this,code,is,to,check,for,that,for,example,a,segment,containing,only,no,ops,does,not,have,neither,or;public,void,test,random,operations,throws,exception,int,num,ops,between,10,100,for,int,i,0,i,num,ops,i,string,id,integer,to,string,random,int,between,1,10,parsed,document,doc,create,parsed,doc,id,null,engine,operation,type,type,random,from,engine,operation,type,values,switch,type,case,index,engine,index,result,index,engine,index,replica,index,for,doc,doc,between,1,100,i,random,boolean,assert,that,index,get,failure,null,value,break,case,delete,engine,delete,result,delete,engine,delete,replica,delete,for,doc,doc,id,between,1,100,i,random,non,negative,long,assert,that,delete,get,failure,null,value,break,case,engine,no,op,result,no,op,engine,no,op,new,engine,no,op,i,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,assert,that,no,op,get,failure,null,value,break,default,throw,new,illegal,state,exception,invalid,op,type,if,random,boolean,engine,refresh,test,if,random,boolean,engine,flush,if,random,boolean,engine,force,merge,random,boolean,between,1,10,random,boolean,false,false,if,engine,engine,config,get,index,settings,is,soft,delete,enabled,list,translog,operation,operations,read,all,operations,in,lucene,engine,create,mapper,service,test,assert,that,operations,has,size,num,ops
InternalEngineTests -> public void testRandomOperations() throws Exception;1545207154;A simple test to check that random combination of operations can coexist in segments and be lookup._This is needed as some fields in Lucene may not exist if a segment misses operation types and this code is to check for that._For example, a segment containing only no-ops does not have neither _uid or _version.;public void testRandomOperations() throws Exception {_        int numOps = between(10, 100)__        for (int i = 0_ i < numOps_ i++) {_            String id = Integer.toString(randomIntBetween(1, 10))__            ParsedDocument doc = createParsedDoc(id, null)__            Engine.Operation.TYPE type = randomFrom(Engine.Operation.TYPE.values())__            switch (type) {_                case INDEX:_                    Engine.IndexResult index = engine.index(replicaIndexForDoc(doc, between(1, 100), i, randomBoolean()))__                    assertThat(index.getFailure(), nullValue())__                    break__                case DELETE:_                    Engine.DeleteResult delete = engine.delete(replicaDeleteForDoc(doc.id(), between(1, 100), i, randomNonNegativeLong()))__                    assertThat(delete.getFailure(), nullValue())__                    break__                case NO_OP:_                    Engine.NoOpResult noOp = engine.noOp(new Engine.NoOp(i, primaryTerm.get(),_                        randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), ""))__                    assertThat(noOp.getFailure(), nullValue())__                    break__                default:_                    throw new IllegalStateException("Invalid op [" + type + "]")__            }_            if (randomBoolean()) {_                engine.refresh("test")__            }_            if (randomBoolean()) {_                engine.flush()__            }_            if (randomBoolean()) {_                engine.forceMerge(randomBoolean(), between(1, 10), randomBoolean(), false, false)__            }_        }_        if (engine.engineConfig.getIndexSettings().isSoftDeleteEnabled()) {_            List<Translog.Operation> operations = readAllOperationsInLucene(engine, createMapperService("test"))__            assertThat(operations, hasSize(numOps))__        }_    };a,simple,test,to,check,that,random,combination,of,operations,can,coexist,in,segments,and,be,lookup,this,is,needed,as,some,fields,in,lucene,may,not,exist,if,a,segment,misses,operation,types,and,this,code,is,to,check,for,that,for,example,a,segment,containing,only,no,ops,does,not,have,neither,or;public,void,test,random,operations,throws,exception,int,num,ops,between,10,100,for,int,i,0,i,num,ops,i,string,id,integer,to,string,random,int,between,1,10,parsed,document,doc,create,parsed,doc,id,null,engine,operation,type,type,random,from,engine,operation,type,values,switch,type,case,index,engine,index,result,index,engine,index,replica,index,for,doc,doc,between,1,100,i,random,boolean,assert,that,index,get,failure,null,value,break,case,delete,engine,delete,result,delete,engine,delete,replica,delete,for,doc,doc,id,between,1,100,i,random,non,negative,long,assert,that,delete,get,failure,null,value,break,case,engine,no,op,result,no,op,engine,no,op,new,engine,no,op,i,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,assert,that,no,op,get,failure,null,value,break,default,throw,new,illegal,state,exception,invalid,op,type,if,random,boolean,engine,refresh,test,if,random,boolean,engine,flush,if,random,boolean,engine,force,merge,random,boolean,between,1,10,random,boolean,false,false,if,engine,engine,config,get,index,settings,is,soft,delete,enabled,list,translog,operation,operations,read,all,operations,in,lucene,engine,create,mapper,service,test,assert,that,operations,has,size,num,ops
InternalEngineTests -> public void testRandomOperations() throws Exception;1545221705;A simple test to check that random combination of operations can coexist in segments and be lookup._This is needed as some fields in Lucene may not exist if a segment misses operation types and this code is to check for that._For example, a segment containing only no-ops does not have neither _uid or _version.;public void testRandomOperations() throws Exception {_        int numOps = between(10, 100)__        for (int i = 0_ i < numOps_ i++) {_            String id = Integer.toString(randomIntBetween(1, 10))__            ParsedDocument doc = createParsedDoc(id, null)__            Engine.Operation.TYPE type = randomFrom(Engine.Operation.TYPE.values())__            switch (type) {_                case INDEX:_                    Engine.IndexResult index = engine.index(replicaIndexForDoc(doc, between(1, 100), i, randomBoolean()))__                    assertThat(index.getFailure(), nullValue())__                    break__                case DELETE:_                    Engine.DeleteResult delete = engine.delete(replicaDeleteForDoc(doc.id(), between(1, 100), i, randomNonNegativeLong()))__                    assertThat(delete.getFailure(), nullValue())__                    break__                case NO_OP:_                    Engine.NoOpResult noOp = engine.noOp(new Engine.NoOp(i, primaryTerm.get(),_                        randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), ""))__                    assertThat(noOp.getFailure(), nullValue())__                    break__                default:_                    throw new IllegalStateException("Invalid op [" + type + "]")__            }_            if (randomBoolean()) {_                engine.refresh("test")__            }_            if (randomBoolean()) {_                engine.flush()__            }_            if (randomBoolean()) {_                engine.forceMerge(randomBoolean(), between(1, 10), randomBoolean(), false, false)__            }_        }_        if (engine.engineConfig.getIndexSettings().isSoftDeleteEnabled()) {_            List<Translog.Operation> operations = readAllOperationsInLucene(engine, createMapperService("test"))__            assertThat(operations, hasSize(numOps))__        }_    };a,simple,test,to,check,that,random,combination,of,operations,can,coexist,in,segments,and,be,lookup,this,is,needed,as,some,fields,in,lucene,may,not,exist,if,a,segment,misses,operation,types,and,this,code,is,to,check,for,that,for,example,a,segment,containing,only,no,ops,does,not,have,neither,or;public,void,test,random,operations,throws,exception,int,num,ops,between,10,100,for,int,i,0,i,num,ops,i,string,id,integer,to,string,random,int,between,1,10,parsed,document,doc,create,parsed,doc,id,null,engine,operation,type,type,random,from,engine,operation,type,values,switch,type,case,index,engine,index,result,index,engine,index,replica,index,for,doc,doc,between,1,100,i,random,boolean,assert,that,index,get,failure,null,value,break,case,delete,engine,delete,result,delete,engine,delete,replica,delete,for,doc,doc,id,between,1,100,i,random,non,negative,long,assert,that,delete,get,failure,null,value,break,case,engine,no,op,result,no,op,engine,no,op,new,engine,no,op,i,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,assert,that,no,op,get,failure,null,value,break,default,throw,new,illegal,state,exception,invalid,op,type,if,random,boolean,engine,refresh,test,if,random,boolean,engine,flush,if,random,boolean,engine,force,merge,random,boolean,between,1,10,random,boolean,false,false,if,engine,engine,config,get,index,settings,is,soft,delete,enabled,list,translog,operation,operations,read,all,operations,in,lucene,engine,create,mapper,service,test,assert,that,operations,has,size,num,ops
InternalEngineTests -> public void testRandomOperations() throws Exception;1545519642;A simple test to check that random combination of operations can coexist in segments and be lookup._This is needed as some fields in Lucene may not exist if a segment misses operation types and this code is to check for that._For example, a segment containing only no-ops does not have neither _uid or _version.;public void testRandomOperations() throws Exception {_        int numOps = between(10, 100)__        for (int i = 0_ i < numOps_ i++) {_            String id = Integer.toString(randomIntBetween(1, 10))__            ParsedDocument doc = createParsedDoc(id, null)__            Engine.Operation.TYPE type = randomFrom(Engine.Operation.TYPE.values())__            switch (type) {_                case INDEX:_                    Engine.IndexResult index = engine.index(replicaIndexForDoc(doc, between(1, 100), i, randomBoolean()))__                    assertThat(index.getFailure(), nullValue())__                    break__                case DELETE:_                    Engine.DeleteResult delete = engine.delete(replicaDeleteForDoc(doc.id(), between(1, 100), i, randomNonNegativeLong()))__                    assertThat(delete.getFailure(), nullValue())__                    break__                case NO_OP:_                    Engine.NoOpResult noOp = engine.noOp(new Engine.NoOp(i, primaryTerm.get(),_                        randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), ""))__                    assertThat(noOp.getFailure(), nullValue())__                    break__                default:_                    throw new IllegalStateException("Invalid op [" + type + "]")__            }_            if (randomBoolean()) {_                engine.refresh("test")__            }_            if (randomBoolean()) {_                engine.flush()__            }_            if (randomBoolean()) {_                engine.forceMerge(randomBoolean(), between(1, 10), randomBoolean(), false, false)__            }_        }_        if (engine.engineConfig.getIndexSettings().isSoftDeleteEnabled()) {_            List<Translog.Operation> operations = readAllOperationsInLucene(engine, createMapperService("test"))__            assertThat(operations, hasSize(numOps))__        }_    };a,simple,test,to,check,that,random,combination,of,operations,can,coexist,in,segments,and,be,lookup,this,is,needed,as,some,fields,in,lucene,may,not,exist,if,a,segment,misses,operation,types,and,this,code,is,to,check,for,that,for,example,a,segment,containing,only,no,ops,does,not,have,neither,or;public,void,test,random,operations,throws,exception,int,num,ops,between,10,100,for,int,i,0,i,num,ops,i,string,id,integer,to,string,random,int,between,1,10,parsed,document,doc,create,parsed,doc,id,null,engine,operation,type,type,random,from,engine,operation,type,values,switch,type,case,index,engine,index,result,index,engine,index,replica,index,for,doc,doc,between,1,100,i,random,boolean,assert,that,index,get,failure,null,value,break,case,delete,engine,delete,result,delete,engine,delete,replica,delete,for,doc,doc,id,between,1,100,i,random,non,negative,long,assert,that,delete,get,failure,null,value,break,case,engine,no,op,result,no,op,engine,no,op,new,engine,no,op,i,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,assert,that,no,op,get,failure,null,value,break,default,throw,new,illegal,state,exception,invalid,op,type,if,random,boolean,engine,refresh,test,if,random,boolean,engine,flush,if,random,boolean,engine,force,merge,random,boolean,between,1,10,random,boolean,false,false,if,engine,engine,config,get,index,settings,is,soft,delete,enabled,list,translog,operation,operations,read,all,operations,in,lucene,engine,create,mapper,service,test,assert,that,operations,has,size,num,ops
InternalEngineTests -> public void testRandomOperations() throws Exception;1546875837;A simple test to check that random combination of operations can coexist in segments and be lookup._This is needed as some fields in Lucene may not exist if a segment misses operation types and this code is to check for that._For example, a segment containing only no-ops does not have neither _uid or _version.;public void testRandomOperations() throws Exception {_        int numOps = between(10, 100)__        for (int i = 0_ i < numOps_ i++) {_            String id = Integer.toString(randomIntBetween(1, 10))__            ParsedDocument doc = createParsedDoc(id, null)__            Engine.Operation.TYPE type = randomFrom(Engine.Operation.TYPE.values())__            switch (type) {_                case INDEX:_                    Engine.IndexResult index = engine.index(replicaIndexForDoc(doc, between(1, 100), i, randomBoolean()))__                    assertThat(index.getFailure(), nullValue())__                    break__                case DELETE:_                    Engine.DeleteResult delete = engine.delete(replicaDeleteForDoc(doc.id(), between(1, 100), i, randomNonNegativeLong()))__                    assertThat(delete.getFailure(), nullValue())__                    break__                case NO_OP:_                    Engine.NoOpResult noOp = engine.noOp(new Engine.NoOp(i, primaryTerm.get(),_                        randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), ""))__                    assertThat(noOp.getFailure(), nullValue())__                    break__                default:_                    throw new IllegalStateException("Invalid op [" + type + "]")__            }_            if (randomBoolean()) {_                engine.refresh("test")__            }_            if (randomBoolean()) {_                engine.flush()__            }_            if (randomBoolean()) {_                engine.forceMerge(randomBoolean(), between(1, 10), randomBoolean(), false, false)__            }_        }_        if (engine.engineConfig.getIndexSettings().isSoftDeleteEnabled()) {_            List<Translog.Operation> operations = readAllOperationsInLucene(engine, createMapperService("test"))__            assertThat(operations, hasSize(numOps))__        }_    };a,simple,test,to,check,that,random,combination,of,operations,can,coexist,in,segments,and,be,lookup,this,is,needed,as,some,fields,in,lucene,may,not,exist,if,a,segment,misses,operation,types,and,this,code,is,to,check,for,that,for,example,a,segment,containing,only,no,ops,does,not,have,neither,or;public,void,test,random,operations,throws,exception,int,num,ops,between,10,100,for,int,i,0,i,num,ops,i,string,id,integer,to,string,random,int,between,1,10,parsed,document,doc,create,parsed,doc,id,null,engine,operation,type,type,random,from,engine,operation,type,values,switch,type,case,index,engine,index,result,index,engine,index,replica,index,for,doc,doc,between,1,100,i,random,boolean,assert,that,index,get,failure,null,value,break,case,delete,engine,delete,result,delete,engine,delete,replica,delete,for,doc,doc,id,between,1,100,i,random,non,negative,long,assert,that,delete,get,failure,null,value,break,case,engine,no,op,result,no,op,engine,no,op,new,engine,no,op,i,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,assert,that,no,op,get,failure,null,value,break,default,throw,new,illegal,state,exception,invalid,op,type,if,random,boolean,engine,refresh,test,if,random,boolean,engine,flush,if,random,boolean,engine,force,merge,random,boolean,between,1,10,random,boolean,false,false,if,engine,engine,config,get,index,settings,is,soft,delete,enabled,list,translog,operation,operations,read,all,operations,in,lucene,engine,create,mapper,service,test,assert,that,operations,has,size,num,ops
InternalEngineTests -> public void testRandomOperations() throws Exception;1547174095;A simple test to check that random combination of operations can coexist in segments and be lookup._This is needed as some fields in Lucene may not exist if a segment misses operation types and this code is to check for that._For example, a segment containing only no-ops does not have neither _uid or _version.;public void testRandomOperations() throws Exception {_        int numOps = between(10, 100)__        for (int i = 0_ i < numOps_ i++) {_            String id = Integer.toString(randomIntBetween(1, 10))__            ParsedDocument doc = createParsedDoc(id, null)__            Engine.Operation.TYPE type = randomFrom(Engine.Operation.TYPE.values())__            switch (type) {_                case INDEX:_                    Engine.IndexResult index = engine.index(replicaIndexForDoc(doc, between(1, 100), i, randomBoolean()))__                    assertThat(index.getFailure(), nullValue())__                    break__                case DELETE:_                    Engine.DeleteResult delete = engine.delete(replicaDeleteForDoc(doc.id(), between(1, 100), i, randomNonNegativeLong()))__                    assertThat(delete.getFailure(), nullValue())__                    break__                case NO_OP:_                    Engine.NoOpResult noOp = engine.noOp(new Engine.NoOp(i, primaryTerm.get(),_                        randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), ""))__                    assertThat(noOp.getFailure(), nullValue())__                    break__                default:_                    throw new IllegalStateException("Invalid op [" + type + "]")__            }_            if (randomBoolean()) {_                engine.refresh("test")__            }_            if (randomBoolean()) {_                engine.flush()__            }_            if (randomBoolean()) {_                engine.forceMerge(randomBoolean(), between(1, 10), randomBoolean(), false, false)__            }_        }_        if (engine.engineConfig.getIndexSettings().isSoftDeleteEnabled()) {_            List<Translog.Operation> operations = readAllOperationsInLucene(engine, createMapperService("test"))__            assertThat(operations, hasSize(numOps))__        }_    };a,simple,test,to,check,that,random,combination,of,operations,can,coexist,in,segments,and,be,lookup,this,is,needed,as,some,fields,in,lucene,may,not,exist,if,a,segment,misses,operation,types,and,this,code,is,to,check,for,that,for,example,a,segment,containing,only,no,ops,does,not,have,neither,or;public,void,test,random,operations,throws,exception,int,num,ops,between,10,100,for,int,i,0,i,num,ops,i,string,id,integer,to,string,random,int,between,1,10,parsed,document,doc,create,parsed,doc,id,null,engine,operation,type,type,random,from,engine,operation,type,values,switch,type,case,index,engine,index,result,index,engine,index,replica,index,for,doc,doc,between,1,100,i,random,boolean,assert,that,index,get,failure,null,value,break,case,delete,engine,delete,result,delete,engine,delete,replica,delete,for,doc,doc,id,between,1,100,i,random,non,negative,long,assert,that,delete,get,failure,null,value,break,case,engine,no,op,result,no,op,engine,no,op,new,engine,no,op,i,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,assert,that,no,op,get,failure,null,value,break,default,throw,new,illegal,state,exception,invalid,op,type,if,random,boolean,engine,refresh,test,if,random,boolean,engine,flush,if,random,boolean,engine,force,merge,random,boolean,between,1,10,random,boolean,false,false,if,engine,engine,config,get,index,settings,is,soft,delete,enabled,list,translog,operation,operations,read,all,operations,in,lucene,engine,create,mapper,service,test,assert,that,operations,has,size,num,ops
InternalEngineTests -> public void testRandomOperations() throws Exception;1547332999;A simple test to check that random combination of operations can coexist in segments and be lookup._This is needed as some fields in Lucene may not exist if a segment misses operation types and this code is to check for that._For example, a segment containing only no-ops does not have neither _uid or _version.;public void testRandomOperations() throws Exception {_        int numOps = between(10, 100)__        for (int i = 0_ i < numOps_ i++) {_            String id = Integer.toString(randomIntBetween(1, 10))__            ParsedDocument doc = createParsedDoc(id, null)__            Engine.Operation.TYPE type = randomFrom(Engine.Operation.TYPE.values())__            switch (type) {_                case INDEX:_                    Engine.IndexResult index = engine.index(replicaIndexForDoc(doc, between(1, 100), i, randomBoolean()))__                    assertThat(index.getFailure(), nullValue())__                    break__                case DELETE:_                    Engine.DeleteResult delete = engine.delete(replicaDeleteForDoc(doc.id(), between(1, 100), i, randomNonNegativeLong()))__                    assertThat(delete.getFailure(), nullValue())__                    break__                case NO_OP:_                    Engine.NoOpResult noOp = engine.noOp(new Engine.NoOp(i, primaryTerm.get(),_                        randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), ""))__                    assertThat(noOp.getFailure(), nullValue())__                    break__                default:_                    throw new IllegalStateException("Invalid op [" + type + "]")__            }_            if (randomBoolean()) {_                engine.refresh("test")__            }_            if (randomBoolean()) {_                engine.flush()__            }_            if (randomBoolean()) {_                engine.forceMerge(randomBoolean(), between(1, 10), randomBoolean(), false, false)__            }_        }_        if (engine.engineConfig.getIndexSettings().isSoftDeleteEnabled()) {_            List<Translog.Operation> operations = readAllOperationsInLucene(engine, createMapperService("test"))__            assertThat(operations, hasSize(numOps))__        }_    };a,simple,test,to,check,that,random,combination,of,operations,can,coexist,in,segments,and,be,lookup,this,is,needed,as,some,fields,in,lucene,may,not,exist,if,a,segment,misses,operation,types,and,this,code,is,to,check,for,that,for,example,a,segment,containing,only,no,ops,does,not,have,neither,or;public,void,test,random,operations,throws,exception,int,num,ops,between,10,100,for,int,i,0,i,num,ops,i,string,id,integer,to,string,random,int,between,1,10,parsed,document,doc,create,parsed,doc,id,null,engine,operation,type,type,random,from,engine,operation,type,values,switch,type,case,index,engine,index,result,index,engine,index,replica,index,for,doc,doc,between,1,100,i,random,boolean,assert,that,index,get,failure,null,value,break,case,delete,engine,delete,result,delete,engine,delete,replica,delete,for,doc,doc,id,between,1,100,i,random,non,negative,long,assert,that,delete,get,failure,null,value,break,case,engine,no,op,result,no,op,engine,no,op,new,engine,no,op,i,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,assert,that,no,op,get,failure,null,value,break,default,throw,new,illegal,state,exception,invalid,op,type,if,random,boolean,engine,refresh,test,if,random,boolean,engine,flush,if,random,boolean,engine,force,merge,random,boolean,between,1,10,random,boolean,false,false,if,engine,engine,config,get,index,settings,is,soft,delete,enabled,list,translog,operation,operations,read,all,operations,in,lucene,engine,create,mapper,service,test,assert,that,operations,has,size,num,ops
InternalEngineTests -> public void testRandomOperations() throws Exception;1548342168;A simple test to check that random combination of operations can coexist in segments and be lookup._This is needed as some fields in Lucene may not exist if a segment misses operation types and this code is to check for that._For example, a segment containing only no-ops does not have neither _uid or _version.;public void testRandomOperations() throws Exception {_        int numOps = between(10, 100)__        for (int i = 0_ i < numOps_ i++) {_            String id = Integer.toString(randomIntBetween(1, 10))__            ParsedDocument doc = createParsedDoc(id, null)__            Engine.Operation.TYPE type = randomFrom(Engine.Operation.TYPE.values())__            switch (type) {_                case INDEX:_                    Engine.IndexResult index = engine.index(replicaIndexForDoc(doc, between(1, 100), i, randomBoolean()))__                    assertThat(index.getFailure(), nullValue())__                    break__                case DELETE:_                    Engine.DeleteResult delete = engine.delete(replicaDeleteForDoc(doc.id(), between(1, 100), i, randomNonNegativeLong()))__                    assertThat(delete.getFailure(), nullValue())__                    break__                case NO_OP:_                    Engine.NoOpResult noOp = engine.noOp(new Engine.NoOp(i, primaryTerm.get(),_                        randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), ""))__                    assertThat(noOp.getFailure(), nullValue())__                    break__                default:_                    throw new IllegalStateException("Invalid op [" + type + "]")__            }_            if (randomBoolean()) {_                engine.refresh("test")__            }_            if (randomBoolean()) {_                engine.flush()__            }_            if (randomBoolean()) {_                engine.forceMerge(randomBoolean(), between(1, 10), randomBoolean(), false, false)__            }_        }_        if (engine.engineConfig.getIndexSettings().isSoftDeleteEnabled()) {_            List<Translog.Operation> operations = readAllOperationsInLucene(engine, createMapperService("test"))__            assertThat(operations, hasSize(numOps))__        }_    };a,simple,test,to,check,that,random,combination,of,operations,can,coexist,in,segments,and,be,lookup,this,is,needed,as,some,fields,in,lucene,may,not,exist,if,a,segment,misses,operation,types,and,this,code,is,to,check,for,that,for,example,a,segment,containing,only,no,ops,does,not,have,neither,or;public,void,test,random,operations,throws,exception,int,num,ops,between,10,100,for,int,i,0,i,num,ops,i,string,id,integer,to,string,random,int,between,1,10,parsed,document,doc,create,parsed,doc,id,null,engine,operation,type,type,random,from,engine,operation,type,values,switch,type,case,index,engine,index,result,index,engine,index,replica,index,for,doc,doc,between,1,100,i,random,boolean,assert,that,index,get,failure,null,value,break,case,delete,engine,delete,result,delete,engine,delete,replica,delete,for,doc,doc,id,between,1,100,i,random,non,negative,long,assert,that,delete,get,failure,null,value,break,case,engine,no,op,result,no,op,engine,no,op,new,engine,no,op,i,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,assert,that,no,op,get,failure,null,value,break,default,throw,new,illegal,state,exception,invalid,op,type,if,random,boolean,engine,refresh,test,if,random,boolean,engine,flush,if,random,boolean,engine,force,merge,random,boolean,between,1,10,random,boolean,false,false,if,engine,engine,config,get,index,settings,is,soft,delete,enabled,list,translog,operation,operations,read,all,operations,in,lucene,engine,create,mapper,service,test,assert,that,operations,has,size,num,ops
InternalEngineTests -> public void testRandomOperations() throws Exception;1548771485;A simple test to check that random combination of operations can coexist in segments and be lookup._This is needed as some fields in Lucene may not exist if a segment misses operation types and this code is to check for that._For example, a segment containing only no-ops does not have neither _uid or _version.;public void testRandomOperations() throws Exception {_        int numOps = between(10, 100)__        for (int i = 0_ i < numOps_ i++) {_            String id = Integer.toString(randomIntBetween(1, 10))__            ParsedDocument doc = createParsedDoc(id, null)__            Engine.Operation.TYPE type = randomFrom(Engine.Operation.TYPE.values())__            switch (type) {_                case INDEX:_                    Engine.IndexResult index = engine.index(replicaIndexForDoc(doc, between(1, 100), i, randomBoolean()))__                    assertThat(index.getFailure(), nullValue())__                    break__                case DELETE:_                    Engine.DeleteResult delete = engine.delete(replicaDeleteForDoc(doc.id(), between(1, 100), i, randomNonNegativeLong()))__                    assertThat(delete.getFailure(), nullValue())__                    break__                case NO_OP:_                    Engine.NoOpResult noOp = engine.noOp(new Engine.NoOp(i, primaryTerm.get(),_                        randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), ""))__                    assertThat(noOp.getFailure(), nullValue())__                    break__                default:_                    throw new IllegalStateException("Invalid op [" + type + "]")__            }_            if (randomBoolean()) {_                engine.refresh("test")__            }_            if (randomBoolean()) {_                engine.flush()__            }_            if (randomBoolean()) {_                engine.forceMerge(randomBoolean(), between(1, 10), randomBoolean(), false, false)__            }_        }_        if (engine.engineConfig.getIndexSettings().isSoftDeleteEnabled()) {_            List<Translog.Operation> operations = readAllOperationsInLucene(engine, createMapperService("test"))__            assertThat(operations, hasSize(numOps))__        }_    };a,simple,test,to,check,that,random,combination,of,operations,can,coexist,in,segments,and,be,lookup,this,is,needed,as,some,fields,in,lucene,may,not,exist,if,a,segment,misses,operation,types,and,this,code,is,to,check,for,that,for,example,a,segment,containing,only,no,ops,does,not,have,neither,or;public,void,test,random,operations,throws,exception,int,num,ops,between,10,100,for,int,i,0,i,num,ops,i,string,id,integer,to,string,random,int,between,1,10,parsed,document,doc,create,parsed,doc,id,null,engine,operation,type,type,random,from,engine,operation,type,values,switch,type,case,index,engine,index,result,index,engine,index,replica,index,for,doc,doc,between,1,100,i,random,boolean,assert,that,index,get,failure,null,value,break,case,delete,engine,delete,result,delete,engine,delete,replica,delete,for,doc,doc,id,between,1,100,i,random,non,negative,long,assert,that,delete,get,failure,null,value,break,case,engine,no,op,result,no,op,engine,no,op,new,engine,no,op,i,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,assert,that,no,op,get,failure,null,value,break,default,throw,new,illegal,state,exception,invalid,op,type,if,random,boolean,engine,refresh,test,if,random,boolean,engine,flush,if,random,boolean,engine,force,merge,random,boolean,between,1,10,random,boolean,false,false,if,engine,engine,config,get,index,settings,is,soft,delete,enabled,list,translog,operation,operations,read,all,operations,in,lucene,engine,create,mapper,service,test,assert,that,operations,has,size,num,ops
InternalEngineTests -> public void testRandomOperations() throws Exception;1548843917;A simple test to check that random combination of operations can coexist in segments and be lookup._This is needed as some fields in Lucene may not exist if a segment misses operation types and this code is to check for that._For example, a segment containing only no-ops does not have neither _uid or _version.;public void testRandomOperations() throws Exception {_        int numOps = between(10, 100)__        for (int i = 0_ i < numOps_ i++) {_            String id = Integer.toString(randomIntBetween(1, 10))__            ParsedDocument doc = createParsedDoc(id, null)__            Engine.Operation.TYPE type = randomFrom(Engine.Operation.TYPE.values())__            switch (type) {_                case INDEX:_                    Engine.IndexResult index = engine.index(replicaIndexForDoc(doc, between(1, 100), i, randomBoolean()))__                    assertThat(index.getFailure(), nullValue())__                    break__                case DELETE:_                    Engine.DeleteResult delete = engine.delete(replicaDeleteForDoc(doc.id(), between(1, 100), i, randomNonNegativeLong()))__                    assertThat(delete.getFailure(), nullValue())__                    break__                case NO_OP:_                    Engine.NoOpResult noOp = engine.noOp(new Engine.NoOp(i, primaryTerm.get(),_                        randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), ""))__                    assertThat(noOp.getFailure(), nullValue())__                    break__                default:_                    throw new IllegalStateException("Invalid op [" + type + "]")__            }_            if (randomBoolean()) {_                engine.refresh("test")__            }_            if (randomBoolean()) {_                engine.flush()__            }_            if (randomBoolean()) {_                engine.forceMerge(randomBoolean(), between(1, 10), randomBoolean(), false, false)__            }_        }_        if (engine.engineConfig.getIndexSettings().isSoftDeleteEnabled()) {_            List<Translog.Operation> operations = readAllOperationsInLucene(engine, createMapperService("test"))__            assertThat(operations, hasSize(numOps))__        }_    };a,simple,test,to,check,that,random,combination,of,operations,can,coexist,in,segments,and,be,lookup,this,is,needed,as,some,fields,in,lucene,may,not,exist,if,a,segment,misses,operation,types,and,this,code,is,to,check,for,that,for,example,a,segment,containing,only,no,ops,does,not,have,neither,or;public,void,test,random,operations,throws,exception,int,num,ops,between,10,100,for,int,i,0,i,num,ops,i,string,id,integer,to,string,random,int,between,1,10,parsed,document,doc,create,parsed,doc,id,null,engine,operation,type,type,random,from,engine,operation,type,values,switch,type,case,index,engine,index,result,index,engine,index,replica,index,for,doc,doc,between,1,100,i,random,boolean,assert,that,index,get,failure,null,value,break,case,delete,engine,delete,result,delete,engine,delete,replica,delete,for,doc,doc,id,between,1,100,i,random,non,negative,long,assert,that,delete,get,failure,null,value,break,case,engine,no,op,result,no,op,engine,no,op,new,engine,no,op,i,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,assert,that,no,op,get,failure,null,value,break,default,throw,new,illegal,state,exception,invalid,op,type,if,random,boolean,engine,refresh,test,if,random,boolean,engine,flush,if,random,boolean,engine,force,merge,random,boolean,between,1,10,random,boolean,false,false,if,engine,engine,config,get,index,settings,is,soft,delete,enabled,list,translog,operation,operations,read,all,operations,in,lucene,engine,create,mapper,service,test,assert,that,operations,has,size,num,ops
InternalEngineTests -> public void testRandomOperations() throws Exception;1549059559;A simple test to check that random combination of operations can coexist in segments and be lookup._This is needed as some fields in Lucene may not exist if a segment misses operation types and this code is to check for that._For example, a segment containing only no-ops does not have neither _uid or _version.;public void testRandomOperations() throws Exception {_        int numOps = between(10, 100)__        for (int i = 0_ i < numOps_ i++) {_            String id = Integer.toString(randomIntBetween(1, 10))__            ParsedDocument doc = createParsedDoc(id, null)__            Engine.Operation.TYPE type = randomFrom(Engine.Operation.TYPE.values())__            switch (type) {_                case INDEX:_                    Engine.IndexResult index = engine.index(replicaIndexForDoc(doc, between(1, 100), i, randomBoolean()))__                    assertThat(index.getFailure(), nullValue())__                    break__                case DELETE:_                    Engine.DeleteResult delete = engine.delete(replicaDeleteForDoc(doc.id(), between(1, 100), i, randomNonNegativeLong()))__                    assertThat(delete.getFailure(), nullValue())__                    break__                case NO_OP:_                    Engine.NoOpResult noOp = engine.noOp(new Engine.NoOp(i, primaryTerm.get(),_                        randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), ""))__                    assertThat(noOp.getFailure(), nullValue())__                    break__                default:_                    throw new IllegalStateException("Invalid op [" + type + "]")__            }_            if (randomBoolean()) {_                engine.refresh("test")__            }_            if (randomBoolean()) {_                engine.flush()__            }_            if (randomBoolean()) {_                engine.forceMerge(randomBoolean(), between(1, 10), randomBoolean(), false, false)__            }_        }_        if (engine.engineConfig.getIndexSettings().isSoftDeleteEnabled()) {_            List<Translog.Operation> operations = readAllOperationsInLucene(engine, createMapperService("test"))__            assertThat(operations, hasSize(numOps))__        }_    };a,simple,test,to,check,that,random,combination,of,operations,can,coexist,in,segments,and,be,lookup,this,is,needed,as,some,fields,in,lucene,may,not,exist,if,a,segment,misses,operation,types,and,this,code,is,to,check,for,that,for,example,a,segment,containing,only,no,ops,does,not,have,neither,or;public,void,test,random,operations,throws,exception,int,num,ops,between,10,100,for,int,i,0,i,num,ops,i,string,id,integer,to,string,random,int,between,1,10,parsed,document,doc,create,parsed,doc,id,null,engine,operation,type,type,random,from,engine,operation,type,values,switch,type,case,index,engine,index,result,index,engine,index,replica,index,for,doc,doc,between,1,100,i,random,boolean,assert,that,index,get,failure,null,value,break,case,delete,engine,delete,result,delete,engine,delete,replica,delete,for,doc,doc,id,between,1,100,i,random,non,negative,long,assert,that,delete,get,failure,null,value,break,case,engine,no,op,result,no,op,engine,no,op,new,engine,no,op,i,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,assert,that,no,op,get,failure,null,value,break,default,throw,new,illegal,state,exception,invalid,op,type,if,random,boolean,engine,refresh,test,if,random,boolean,engine,flush,if,random,boolean,engine,force,merge,random,boolean,between,1,10,random,boolean,false,false,if,engine,engine,config,get,index,settings,is,soft,delete,enabled,list,translog,operation,operations,read,all,operations,in,lucene,engine,create,mapper,service,test,assert,that,operations,has,size,num,ops
InternalEngineTests -> public void testRandomOperations() throws Exception;1549639236;A simple test to check that random combination of operations can coexist in segments and be lookup._This is needed as some fields in Lucene may not exist if a segment misses operation types and this code is to check for that._For example, a segment containing only no-ops does not have neither _uid or _version.;public void testRandomOperations() throws Exception {_        int numOps = between(10, 100)__        for (int i = 0_ i < numOps_ i++) {_            String id = Integer.toString(randomIntBetween(1, 10))__            ParsedDocument doc = createParsedDoc(id, null)__            Engine.Operation.TYPE type = randomFrom(Engine.Operation.TYPE.values())__            switch (type) {_                case INDEX:_                    Engine.IndexResult index = engine.index(replicaIndexForDoc(doc, between(1, 100), i, randomBoolean()))__                    assertThat(index.getFailure(), nullValue())__                    break__                case DELETE:_                    Engine.DeleteResult delete = engine.delete(replicaDeleteForDoc(doc.id(), between(1, 100), i, randomNonNegativeLong()))__                    assertThat(delete.getFailure(), nullValue())__                    break__                case NO_OP:_                    Engine.NoOpResult noOp = engine.noOp(new Engine.NoOp(i, primaryTerm.get(),_                        randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), ""))__                    assertThat(noOp.getFailure(), nullValue())__                    break__                default:_                    throw new IllegalStateException("Invalid op [" + type + "]")__            }_            if (randomBoolean()) {_                engine.refresh("test")__            }_            if (randomBoolean()) {_                engine.flush()__            }_            if (randomBoolean()) {_                engine.forceMerge(randomBoolean(), between(1, 10), randomBoolean(), false, false)__            }_        }_        if (engine.engineConfig.getIndexSettings().isSoftDeleteEnabled()) {_            List<Translog.Operation> operations = readAllOperationsInLucene(engine, createMapperService("test"))__            assertThat(operations, hasSize(numOps))__        }_    };a,simple,test,to,check,that,random,combination,of,operations,can,coexist,in,segments,and,be,lookup,this,is,needed,as,some,fields,in,lucene,may,not,exist,if,a,segment,misses,operation,types,and,this,code,is,to,check,for,that,for,example,a,segment,containing,only,no,ops,does,not,have,neither,or;public,void,test,random,operations,throws,exception,int,num,ops,between,10,100,for,int,i,0,i,num,ops,i,string,id,integer,to,string,random,int,between,1,10,parsed,document,doc,create,parsed,doc,id,null,engine,operation,type,type,random,from,engine,operation,type,values,switch,type,case,index,engine,index,result,index,engine,index,replica,index,for,doc,doc,between,1,100,i,random,boolean,assert,that,index,get,failure,null,value,break,case,delete,engine,delete,result,delete,engine,delete,replica,delete,for,doc,doc,id,between,1,100,i,random,non,negative,long,assert,that,delete,get,failure,null,value,break,case,engine,no,op,result,no,op,engine,no,op,new,engine,no,op,i,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,assert,that,no,op,get,failure,null,value,break,default,throw,new,illegal,state,exception,invalid,op,type,if,random,boolean,engine,refresh,test,if,random,boolean,engine,flush,if,random,boolean,engine,force,merge,random,boolean,between,1,10,random,boolean,false,false,if,engine,engine,config,get,index,settings,is,soft,delete,enabled,list,translog,operation,operations,read,all,operations,in,lucene,engine,create,mapper,service,test,assert,that,operations,has,size,num,ops
InternalEngineTests -> public void testRandomOperations() throws Exception;1549898480;A simple test to check that random combination of operations can coexist in segments and be lookup._This is needed as some fields in Lucene may not exist if a segment misses operation types and this code is to check for that._For example, a segment containing only no-ops does not have neither _uid or _version.;public void testRandomOperations() throws Exception {_        int numOps = between(10, 100)__        for (int i = 0_ i < numOps_ i++) {_            String id = Integer.toString(randomIntBetween(1, 10))__            ParsedDocument doc = createParsedDoc(id, null)__            Engine.Operation.TYPE type = randomFrom(Engine.Operation.TYPE.values())__            switch (type) {_                case INDEX:_                    Engine.IndexResult index = engine.index(replicaIndexForDoc(doc, between(1, 100), i, randomBoolean()))__                    assertThat(index.getFailure(), nullValue())__                    break__                case DELETE:_                    Engine.DeleteResult delete = engine.delete(replicaDeleteForDoc(doc.id(), between(1, 100), i, randomNonNegativeLong()))__                    assertThat(delete.getFailure(), nullValue())__                    break__                case NO_OP:_                    Engine.NoOpResult noOp = engine.noOp(new Engine.NoOp(i, primaryTerm.get(),_                        randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), ""))__                    assertThat(noOp.getFailure(), nullValue())__                    break__                default:_                    throw new IllegalStateException("Invalid op [" + type + "]")__            }_            if (randomBoolean()) {_                engine.refresh("test")__            }_            if (randomBoolean()) {_                engine.flush()__            }_            if (randomBoolean()) {_                engine.forceMerge(randomBoolean(), between(1, 10), randomBoolean(), false, false)__            }_        }_        if (engine.engineConfig.getIndexSettings().isSoftDeleteEnabled()) {_            List<Translog.Operation> operations = readAllOperationsInLucene(engine, createMapperService("test"))__            assertThat(operations, hasSize(numOps))__        }_    };a,simple,test,to,check,that,random,combination,of,operations,can,coexist,in,segments,and,be,lookup,this,is,needed,as,some,fields,in,lucene,may,not,exist,if,a,segment,misses,operation,types,and,this,code,is,to,check,for,that,for,example,a,segment,containing,only,no,ops,does,not,have,neither,or;public,void,test,random,operations,throws,exception,int,num,ops,between,10,100,for,int,i,0,i,num,ops,i,string,id,integer,to,string,random,int,between,1,10,parsed,document,doc,create,parsed,doc,id,null,engine,operation,type,type,random,from,engine,operation,type,values,switch,type,case,index,engine,index,result,index,engine,index,replica,index,for,doc,doc,between,1,100,i,random,boolean,assert,that,index,get,failure,null,value,break,case,delete,engine,delete,result,delete,engine,delete,replica,delete,for,doc,doc,id,between,1,100,i,random,non,negative,long,assert,that,delete,get,failure,null,value,break,case,engine,no,op,result,no,op,engine,no,op,new,engine,no,op,i,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,assert,that,no,op,get,failure,null,value,break,default,throw,new,illegal,state,exception,invalid,op,type,if,random,boolean,engine,refresh,test,if,random,boolean,engine,flush,if,random,boolean,engine,force,merge,random,boolean,between,1,10,random,boolean,false,false,if,engine,engine,config,get,index,settings,is,soft,delete,enabled,list,translog,operation,operations,read,all,operations,in,lucene,engine,create,mapper,service,test,assert,that,operations,has,size,num,ops
InternalEngineTests -> public void testRandomOperations() throws Exception;1549908725;A simple test to check that random combination of operations can coexist in segments and be lookup._This is needed as some fields in Lucene may not exist if a segment misses operation types and this code is to check for that._For example, a segment containing only no-ops does not have neither _uid or _version.;public void testRandomOperations() throws Exception {_        int numOps = between(10, 100)__        for (int i = 0_ i < numOps_ i++) {_            String id = Integer.toString(randomIntBetween(1, 10))__            ParsedDocument doc = createParsedDoc(id, null)__            Engine.Operation.TYPE type = randomFrom(Engine.Operation.TYPE.values())__            switch (type) {_                case INDEX:_                    Engine.IndexResult index = engine.index(replicaIndexForDoc(doc, between(1, 100), i, randomBoolean()))__                    assertThat(index.getFailure(), nullValue())__                    break__                case DELETE:_                    Engine.DeleteResult delete = engine.delete(replicaDeleteForDoc(doc.id(), between(1, 100), i, randomNonNegativeLong()))__                    assertThat(delete.getFailure(), nullValue())__                    break__                case NO_OP:_                    Engine.NoOpResult noOp = engine.noOp(new Engine.NoOp(i, primaryTerm.get(),_                        randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), ""))__                    assertThat(noOp.getFailure(), nullValue())__                    break__                default:_                    throw new IllegalStateException("Invalid op [" + type + "]")__            }_            if (randomBoolean()) {_                engine.refresh("test")__            }_            if (randomBoolean()) {_                engine.flush()__            }_            if (randomBoolean()) {_                engine.forceMerge(randomBoolean(), between(1, 10), randomBoolean(), false, false)__            }_        }_        if (engine.engineConfig.getIndexSettings().isSoftDeleteEnabled()) {_            List<Translog.Operation> operations = readAllOperationsInLucene(engine, createMapperService("test"))__            assertThat(operations, hasSize(numOps))__        }_    };a,simple,test,to,check,that,random,combination,of,operations,can,coexist,in,segments,and,be,lookup,this,is,needed,as,some,fields,in,lucene,may,not,exist,if,a,segment,misses,operation,types,and,this,code,is,to,check,for,that,for,example,a,segment,containing,only,no,ops,does,not,have,neither,or;public,void,test,random,operations,throws,exception,int,num,ops,between,10,100,for,int,i,0,i,num,ops,i,string,id,integer,to,string,random,int,between,1,10,parsed,document,doc,create,parsed,doc,id,null,engine,operation,type,type,random,from,engine,operation,type,values,switch,type,case,index,engine,index,result,index,engine,index,replica,index,for,doc,doc,between,1,100,i,random,boolean,assert,that,index,get,failure,null,value,break,case,delete,engine,delete,result,delete,engine,delete,replica,delete,for,doc,doc,id,between,1,100,i,random,non,negative,long,assert,that,delete,get,failure,null,value,break,case,engine,no,op,result,no,op,engine,no,op,new,engine,no,op,i,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,assert,that,no,op,get,failure,null,value,break,default,throw,new,illegal,state,exception,invalid,op,type,if,random,boolean,engine,refresh,test,if,random,boolean,engine,flush,if,random,boolean,engine,force,merge,random,boolean,between,1,10,random,boolean,false,false,if,engine,engine,config,get,index,settings,is,soft,delete,enabled,list,translog,operation,operations,read,all,operations,in,lucene,engine,create,mapper,service,test,assert,that,operations,has,size,num,ops
InternalEngineTests -> public void testRandomOperations() throws Exception;1549975032;A simple test to check that random combination of operations can coexist in segments and be lookup._This is needed as some fields in Lucene may not exist if a segment misses operation types and this code is to check for that._For example, a segment containing only no-ops does not have neither _uid or _version.;public void testRandomOperations() throws Exception {_        int numOps = between(10, 100)__        for (int i = 0_ i < numOps_ i++) {_            String id = Integer.toString(randomIntBetween(1, 10))__            ParsedDocument doc = createParsedDoc(id, null)__            Engine.Operation.TYPE type = randomFrom(Engine.Operation.TYPE.values())__            switch (type) {_                case INDEX:_                    Engine.IndexResult index = engine.index(replicaIndexForDoc(doc, between(1, 100), i, randomBoolean()))__                    assertThat(index.getFailure(), nullValue())__                    break__                case DELETE:_                    Engine.DeleteResult delete = engine.delete(replicaDeleteForDoc(doc.id(), between(1, 100), i, randomNonNegativeLong()))__                    assertThat(delete.getFailure(), nullValue())__                    break__                case NO_OP:_                    Engine.NoOpResult noOp = engine.noOp(new Engine.NoOp(i, primaryTerm.get(),_                        randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), ""))__                    assertThat(noOp.getFailure(), nullValue())__                    break__                default:_                    throw new IllegalStateException("Invalid op [" + type + "]")__            }_            if (randomBoolean()) {_                engine.refresh("test")__            }_            if (randomBoolean()) {_                engine.flush()__            }_            if (randomBoolean()) {_                engine.forceMerge(randomBoolean(), between(1, 10), randomBoolean(), false, false)__            }_        }_        if (engine.engineConfig.getIndexSettings().isSoftDeleteEnabled()) {_            List<Translog.Operation> operations = readAllOperationsInLucene(engine, createMapperService("test"))__            assertThat(operations, hasSize(numOps))__        }_    };a,simple,test,to,check,that,random,combination,of,operations,can,coexist,in,segments,and,be,lookup,this,is,needed,as,some,fields,in,lucene,may,not,exist,if,a,segment,misses,operation,types,and,this,code,is,to,check,for,that,for,example,a,segment,containing,only,no,ops,does,not,have,neither,or;public,void,test,random,operations,throws,exception,int,num,ops,between,10,100,for,int,i,0,i,num,ops,i,string,id,integer,to,string,random,int,between,1,10,parsed,document,doc,create,parsed,doc,id,null,engine,operation,type,type,random,from,engine,operation,type,values,switch,type,case,index,engine,index,result,index,engine,index,replica,index,for,doc,doc,between,1,100,i,random,boolean,assert,that,index,get,failure,null,value,break,case,delete,engine,delete,result,delete,engine,delete,replica,delete,for,doc,doc,id,between,1,100,i,random,non,negative,long,assert,that,delete,get,failure,null,value,break,case,engine,no,op,result,no,op,engine,no,op,new,engine,no,op,i,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,assert,that,no,op,get,failure,null,value,break,default,throw,new,illegal,state,exception,invalid,op,type,if,random,boolean,engine,refresh,test,if,random,boolean,engine,flush,if,random,boolean,engine,force,merge,random,boolean,between,1,10,random,boolean,false,false,if,engine,engine,config,get,index,settings,is,soft,delete,enabled,list,translog,operation,operations,read,all,operations,in,lucene,engine,create,mapper,service,test,assert,that,operations,has,size,num,ops
InternalEngineTests -> public void testRandomOperations() throws Exception;1550256122;A simple test to check that random combination of operations can coexist in segments and be lookup._This is needed as some fields in Lucene may not exist if a segment misses operation types and this code is to check for that._For example, a segment containing only no-ops does not have neither _uid or _version.;public void testRandomOperations() throws Exception {_        int numOps = between(10, 100)__        for (int i = 0_ i < numOps_ i++) {_            String id = Integer.toString(randomIntBetween(1, 10))__            ParsedDocument doc = createParsedDoc(id, null)__            Engine.Operation.TYPE type = randomFrom(Engine.Operation.TYPE.values())__            switch (type) {_                case INDEX:_                    Engine.IndexResult index = engine.index(replicaIndexForDoc(doc, between(1, 100), i, randomBoolean()))__                    assertThat(index.getFailure(), nullValue())__                    break__                case DELETE:_                    Engine.DeleteResult delete = engine.delete(replicaDeleteForDoc(doc.id(), between(1, 100), i, randomNonNegativeLong()))__                    assertThat(delete.getFailure(), nullValue())__                    break__                case NO_OP:_                    Engine.NoOpResult noOp = engine.noOp(new Engine.NoOp(i, primaryTerm.get(),_                        randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), ""))__                    assertThat(noOp.getFailure(), nullValue())__                    break__                default:_                    throw new IllegalStateException("Invalid op [" + type + "]")__            }_            if (randomBoolean()) {_                engine.refresh("test")__            }_            if (randomBoolean()) {_                engine.flush()__            }_            if (randomBoolean()) {_                engine.forceMerge(randomBoolean(), between(1, 10), randomBoolean(), false, false)__            }_        }_        if (engine.engineConfig.getIndexSettings().isSoftDeleteEnabled()) {_            List<Translog.Operation> operations = readAllOperationsInLucene(engine, createMapperService("test"))__            assertThat(operations, hasSize(numOps))__        }_    };a,simple,test,to,check,that,random,combination,of,operations,can,coexist,in,segments,and,be,lookup,this,is,needed,as,some,fields,in,lucene,may,not,exist,if,a,segment,misses,operation,types,and,this,code,is,to,check,for,that,for,example,a,segment,containing,only,no,ops,does,not,have,neither,or;public,void,test,random,operations,throws,exception,int,num,ops,between,10,100,for,int,i,0,i,num,ops,i,string,id,integer,to,string,random,int,between,1,10,parsed,document,doc,create,parsed,doc,id,null,engine,operation,type,type,random,from,engine,operation,type,values,switch,type,case,index,engine,index,result,index,engine,index,replica,index,for,doc,doc,between,1,100,i,random,boolean,assert,that,index,get,failure,null,value,break,case,delete,engine,delete,result,delete,engine,delete,replica,delete,for,doc,doc,id,between,1,100,i,random,non,negative,long,assert,that,delete,get,failure,null,value,break,case,engine,no,op,result,no,op,engine,no,op,new,engine,no,op,i,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,assert,that,no,op,get,failure,null,value,break,default,throw,new,illegal,state,exception,invalid,op,type,if,random,boolean,engine,refresh,test,if,random,boolean,engine,flush,if,random,boolean,engine,force,merge,random,boolean,between,1,10,random,boolean,false,false,if,engine,engine,config,get,index,settings,is,soft,delete,enabled,list,translog,operation,operations,read,all,operations,in,lucene,engine,create,mapper,service,test,assert,that,operations,has,size,num,ops
InternalEngineTests -> public void testRandomOperations() throws Exception;1550526771;A simple test to check that random combination of operations can coexist in segments and be lookup._This is needed as some fields in Lucene may not exist if a segment misses operation types and this code is to check for that._For example, a segment containing only no-ops does not have neither _uid or _version.;public void testRandomOperations() throws Exception {_        int numOps = between(10, 100)__        for (int i = 0_ i < numOps_ i++) {_            String id = Integer.toString(randomIntBetween(1, 10))__            ParsedDocument doc = createParsedDoc(id, null)__            Engine.Operation.TYPE type = randomFrom(Engine.Operation.TYPE.values())__            switch (type) {_                case INDEX:_                    Engine.IndexResult index = engine.index(replicaIndexForDoc(doc, between(1, 100), i, randomBoolean()))__                    assertThat(index.getFailure(), nullValue())__                    break__                case DELETE:_                    Engine.DeleteResult delete = engine.delete(replicaDeleteForDoc(doc.id(), between(1, 100), i, randomNonNegativeLong()))__                    assertThat(delete.getFailure(), nullValue())__                    break__                case NO_OP:_                    Engine.NoOpResult noOp = engine.noOp(new Engine.NoOp(i, primaryTerm.get(),_                        randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), ""))__                    assertThat(noOp.getFailure(), nullValue())__                    break__                default:_                    throw new IllegalStateException("Invalid op [" + type + "]")__            }_            if (randomBoolean()) {_                engine.refresh("test")__            }_            if (randomBoolean()) {_                engine.flush()__            }_            if (randomBoolean()) {_                engine.forceMerge(randomBoolean(), between(1, 10), randomBoolean(), false, false)__            }_        }_        if (engine.engineConfig.getIndexSettings().isSoftDeleteEnabled()) {_            List<Translog.Operation> operations = readAllOperationsInLucene(engine, createMapperService("test"))__            assertThat(operations, hasSize(numOps))__        }_    };a,simple,test,to,check,that,random,combination,of,operations,can,coexist,in,segments,and,be,lookup,this,is,needed,as,some,fields,in,lucene,may,not,exist,if,a,segment,misses,operation,types,and,this,code,is,to,check,for,that,for,example,a,segment,containing,only,no,ops,does,not,have,neither,or;public,void,test,random,operations,throws,exception,int,num,ops,between,10,100,for,int,i,0,i,num,ops,i,string,id,integer,to,string,random,int,between,1,10,parsed,document,doc,create,parsed,doc,id,null,engine,operation,type,type,random,from,engine,operation,type,values,switch,type,case,index,engine,index,result,index,engine,index,replica,index,for,doc,doc,between,1,100,i,random,boolean,assert,that,index,get,failure,null,value,break,case,delete,engine,delete,result,delete,engine,delete,replica,delete,for,doc,doc,id,between,1,100,i,random,non,negative,long,assert,that,delete,get,failure,null,value,break,case,engine,no,op,result,no,op,engine,no,op,new,engine,no,op,i,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,assert,that,no,op,get,failure,null,value,break,default,throw,new,illegal,state,exception,invalid,op,type,if,random,boolean,engine,refresh,test,if,random,boolean,engine,flush,if,random,boolean,engine,force,merge,random,boolean,between,1,10,random,boolean,false,false,if,engine,engine,config,get,index,settings,is,soft,delete,enabled,list,translog,operation,operations,read,all,operations,in,lucene,engine,create,mapper,service,test,assert,that,operations,has,size,num,ops
InternalEngineTests -> public void testRandomOperations() throws Exception;1551126708;A simple test to check that random combination of operations can coexist in segments and be lookup._This is needed as some fields in Lucene may not exist if a segment misses operation types and this code is to check for that._For example, a segment containing only no-ops does not have neither _uid or _version.;public void testRandomOperations() throws Exception {_        int numOps = between(10, 100)__        for (int i = 0_ i < numOps_ i++) {_            String id = Integer.toString(randomIntBetween(1, 10))__            ParsedDocument doc = createParsedDoc(id, null)__            Engine.Operation.TYPE type = randomFrom(Engine.Operation.TYPE.values())__            switch (type) {_                case INDEX:_                    Engine.IndexResult index = engine.index(replicaIndexForDoc(doc, between(1, 100), i, randomBoolean()))__                    assertThat(index.getFailure(), nullValue())__                    break__                case DELETE:_                    Engine.DeleteResult delete = engine.delete(replicaDeleteForDoc(doc.id(), between(1, 100), i, randomNonNegativeLong()))__                    assertThat(delete.getFailure(), nullValue())__                    break__                case NO_OP:_                    Engine.NoOpResult noOp = engine.noOp(new Engine.NoOp(i, primaryTerm.get(),_                        randomFrom(Engine.Operation.Origin.values()), randomNonNegativeLong(), ""))__                    assertThat(noOp.getFailure(), nullValue())__                    break__                default:_                    throw new IllegalStateException("Invalid op [" + type + "]")__            }_            if (randomBoolean()) {_                engine.refresh("test")__            }_            if (randomBoolean()) {_                engine.flush()__            }_            if (randomBoolean()) {_                engine.forceMerge(randomBoolean(), between(1, 10), randomBoolean(), false, false)__            }_        }_        if (engine.engineConfig.getIndexSettings().isSoftDeleteEnabled()) {_            List<Translog.Operation> operations = readAllOperationsInLucene(engine, createMapperService("test"))__            assertThat(operations, hasSize(numOps))__        }_    };a,simple,test,to,check,that,random,combination,of,operations,can,coexist,in,segments,and,be,lookup,this,is,needed,as,some,fields,in,lucene,may,not,exist,if,a,segment,misses,operation,types,and,this,code,is,to,check,for,that,for,example,a,segment,containing,only,no,ops,does,not,have,neither,or;public,void,test,random,operations,throws,exception,int,num,ops,between,10,100,for,int,i,0,i,num,ops,i,string,id,integer,to,string,random,int,between,1,10,parsed,document,doc,create,parsed,doc,id,null,engine,operation,type,type,random,from,engine,operation,type,values,switch,type,case,index,engine,index,result,index,engine,index,replica,index,for,doc,doc,between,1,100,i,random,boolean,assert,that,index,get,failure,null,value,break,case,delete,engine,delete,result,delete,engine,delete,replica,delete,for,doc,doc,id,between,1,100,i,random,non,negative,long,assert,that,delete,get,failure,null,value,break,case,engine,no,op,result,no,op,engine,no,op,new,engine,no,op,i,primary,term,get,random,from,engine,operation,origin,values,random,non,negative,long,assert,that,no,op,get,failure,null,value,break,default,throw,new,illegal,state,exception,invalid,op,type,if,random,boolean,engine,refresh,test,if,random,boolean,engine,flush,if,random,boolean,engine,force,merge,random,boolean,between,1,10,random,boolean,false,false,if,engine,engine,config,get,index,settings,is,soft,delete,enabled,list,translog,operation,operations,read,all,operations,in,lucene,engine,create,mapper,service,test,assert,that,operations,has,size,num,ops
