commented;modifiers;parameterAmount;loc;comment;code
false;public;0;62;;public void testReplicationWaitsForActiveShardCount() throws Exception {     CreateIndexResponse createIndexResponse = prepareCreate("test", 1, Settings.builder().put("index.number_of_shards", 1).put("index.number_of_replicas", 2)).get().     assertAcked(createIndexResponse).     // indexing, by default, will work (waiting for one shard copy only)     client().prepareIndex("test", "type1", "1").setSource(source("1", "test"), XContentType.JSON).execute().actionGet().     try {         client().prepareIndex("test", "type1", "1").setSource(source("1", "test"), XContentType.JSON).setWaitForActiveShards(// wait for 2 active shard copies         2).setTimeout(timeValueMillis(100)).execute().actionGet().         fail("can't index, does not enough active shard copies").     } catch (UnavailableShardsException e) {         assertThat(e.status(), equalTo(RestStatus.SERVICE_UNAVAILABLE)).         assertThat(e.getMessage(), startsWith("[test][0] Not enough active copies to meet shard count of [2] (have 1, needed 2). Timeout: [100ms], request:")).     // but really, all is well     }     allowNodes("test", 2).     ClusterHealthResponse clusterHealth = client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForActiveShards(2).setWaitForYellowStatus().execute().actionGet().     logger.info("Done Cluster Health, status {}", clusterHealth.getStatus()).     assertThat(clusterHealth.isTimedOut(), equalTo(false)).     assertThat(clusterHealth.getStatus(), equalTo(ClusterHealthStatus.YELLOW)).     // this should work, since we now have two     client().prepareIndex("test", "type1", "1").setSource(source("1", "test"), XContentType.JSON).setWaitForActiveShards(2).setTimeout(timeValueSeconds(1)).execute().actionGet().     try {         client().prepareIndex("test", "type1", "1").setSource(source("1", "test"), XContentType.JSON).setWaitForActiveShards(ActiveShardCount.ALL).setTimeout(timeValueMillis(100)).execute().actionGet().         fail("can't index, not enough active shard copies").     } catch (UnavailableShardsException e) {         assertThat(e.status(), equalTo(RestStatus.SERVICE_UNAVAILABLE)).         assertThat(e.getMessage(), startsWith("[test][0] Not enough active copies to meet shard count of [" + ActiveShardCount.ALL + "] (have 2, needed 3). Timeout: [100ms], request:")).     // but really, all is well     }     allowNodes("test", 3).     clusterHealth = client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForActiveShards(3).setWaitForGreenStatus().execute().actionGet().     logger.info("Done Cluster Health, status {}", clusterHealth.getStatus()).     assertThat(clusterHealth.isTimedOut(), equalTo(false)).     assertThat(clusterHealth.getStatus(), equalTo(ClusterHealthStatus.GREEN)).     // this should work, since we now have all shards started     client().prepareIndex("test", "type1", "1").setSource(source("1", "test"), XContentType.JSON).setWaitForActiveShards(ActiveShardCount.ALL).setTimeout(timeValueSeconds(1)).execute().actionGet(). }
false;private;2;3;;private String source(String id, String nameValue) {     return "{ \"type1\" : { \"id\" : \"" + id + "\", \"name\" : \"" + nameValue + "\" } }". }
