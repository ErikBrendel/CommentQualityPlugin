commented;modifiers;parameterAmount;loc;comment;code
false;public;0;25;;public void testSvValues() throws IOException {     int numDocs = 1000000.     int numOrdinals = numDocs / 4.     Map<Integer, Long> controlDocToOrdinal = new HashMap<>().     OrdinalsBuilder builder = new OrdinalsBuilder(numDocs).     long ordinal = builder.currentOrdinal().     for (int doc = 0. doc < numDocs. doc++) {         if (doc % numOrdinals == 0) {             ordinal = builder.nextOrdinal().         }         controlDocToOrdinal.put(doc, ordinal).         builder.addDoc(doc).     }     Ordinals ords = builder.build().     assertThat(ords, instanceOf(SinglePackedOrdinals.class)).     SortedSetDocValues docs = ords.ordinals().     final SortedDocValues singleOrds = DocValues.unwrapSingleton(docs).     assertNotNull(singleOrds).     for (Map.Entry<Integer, Long> entry : controlDocToOrdinal.entrySet()) {         assertTrue(singleOrds.advanceExact(entry.getKey())).         assertEquals(singleOrds.ordValue(), (long) entry.getValue()).     } }
false;public;0;16;;public void testMvOrdinalsTrigger() throws IOException {     int numDocs = 1000000.     OrdinalsBuilder builder = new OrdinalsBuilder(numDocs).     builder.nextOrdinal().     for (int doc = 0. doc < numDocs. doc++) {         builder.addDoc(doc).     }     Ordinals ords = builder.build().     assertThat(ords, instanceOf(SinglePackedOrdinals.class)).     builder.nextOrdinal().     builder.addDoc(0).     ords = builder.build().     assertThat(ords, not(instanceOf(SinglePackedOrdinals.class))). }
