commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;public void testBasicTTimePattern() {     DateFormatter formatter1 = Joda.forPattern("basic_t_time").     assertEquals(formatter1.pattern(), "basic_t_time").     assertEquals(formatter1.zone(), ZoneOffset.UTC).     DateFormatter formatter2 = Joda.forPattern("basicTTime").     assertEquals(formatter2.pattern(), "basicTTime").     assertEquals(formatter2.zone(), ZoneOffset.UTC).     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, DateTimeZone.UTC).     assertEquals("T102030.040Z", formatter1.formatJoda(dt)).     assertEquals("T102030.040Z", formatter1.formatJoda(dt)).     expectThrows(IllegalArgumentException.class, () -> Joda.forPattern("basic_t_Time")).     expectThrows(IllegalArgumentException.class, () -> Joda.forPattern("basic_T_Time")).     expectThrows(IllegalArgumentException.class, () -> Joda.forPattern("basic_T_time")). }
false;public;0;16;;public void testEqualsAndHashcode() {     String format = randomFrom("yyyy/MM/dd HH:mm:ss", "basic_t_time").     JodaDateFormatter first = Joda.forPattern(format).     JodaDateFormatter second = Joda.forPattern(format).     JodaDateFormatter third = Joda.forPattern(" HH:mm:ss, yyyy/MM/dd").     assertThat(first, is(second)).     assertThat(second, is(first)).     assertThat(first, is(not(third))).     assertThat(second, is(not(third))).     assertThat(first.hashCode(), is(second.hashCode())).     assertThat(second.hashCode(), is(first.hashCode())).     assertThat(first.hashCode(), is(not(third.hashCode()))).     assertThat(second.hashCode(), is(not(third.hashCode()))). }
