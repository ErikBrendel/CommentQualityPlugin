# id;timestamp;commentText;codeText;commentWords;codeWords
IndexShardIT -> private void checkAccountingBreaker();1524684173;Check that the accounting breaker correctly matches the segments API for memory usage;private void checkAccountingBreaker() {_        CircuitBreakerService breakerService = getInstanceFromNode(CircuitBreakerService.class)__        CircuitBreaker acctBreaker = breakerService.getBreaker(CircuitBreaker.ACCOUNTING)__        long usedMem = acctBreaker.getUsed()__        assertThat(usedMem, greaterThan(0L))__        NodesStatsResponse response = client().admin().cluster().prepareNodesStats().setIndices(true).setBreaker(true).get()__        NodeStats stats = response.getNodes().get(0)__        assertNotNull(stats)__        SegmentsStats segmentsStats = stats.getIndices().getSegments()__        CircuitBreakerStats breakerStats = stats.getBreaker().getStats(CircuitBreaker.ACCOUNTING)__        assertEquals(usedMem, segmentsStats.getMemoryInBytes())__        assertEquals(usedMem, breakerStats.getEstimated())__    };check,that,the,accounting,breaker,correctly,matches,the,segments,api,for,memory,usage;private,void,check,accounting,breaker,circuit,breaker,service,breaker,service,get,instance,from,node,circuit,breaker,service,class,circuit,breaker,acct,breaker,breaker,service,get,breaker,circuit,breaker,accounting,long,used,mem,acct,breaker,get,used,assert,that,used,mem,greater,than,0l,nodes,stats,response,response,client,admin,cluster,prepare,nodes,stats,set,indices,true,set,breaker,true,get,node,stats,stats,response,get,nodes,get,0,assert,not,null,stats,segments,stats,segments,stats,stats,get,indices,get,segments,circuit,breaker,stats,breaker,stats,stats,get,breaker,get,stats,circuit,breaker,accounting,assert,equals,used,mem,segments,stats,get,memory,in,bytes,assert,equals,used,mem,breaker,stats,get,estimated
IndexShardIT -> private void checkAccountingBreaker();1525162917;Check that the accounting breaker correctly matches the segments API for memory usage;private void checkAccountingBreaker() {_        CircuitBreakerService breakerService = getInstanceFromNode(CircuitBreakerService.class)__        CircuitBreaker acctBreaker = breakerService.getBreaker(CircuitBreaker.ACCOUNTING)__        long usedMem = acctBreaker.getUsed()__        assertThat(usedMem, greaterThan(0L))__        NodesStatsResponse response = client().admin().cluster().prepareNodesStats().setIndices(true).setBreaker(true).get()__        NodeStats stats = response.getNodes().get(0)__        assertNotNull(stats)__        SegmentsStats segmentsStats = stats.getIndices().getSegments()__        CircuitBreakerStats breakerStats = stats.getBreaker().getStats(CircuitBreaker.ACCOUNTING)__        assertEquals(usedMem, segmentsStats.getMemoryInBytes())__        assertEquals(usedMem, breakerStats.getEstimated())__    };check,that,the,accounting,breaker,correctly,matches,the,segments,api,for,memory,usage;private,void,check,accounting,breaker,circuit,breaker,service,breaker,service,get,instance,from,node,circuit,breaker,service,class,circuit,breaker,acct,breaker,breaker,service,get,breaker,circuit,breaker,accounting,long,used,mem,acct,breaker,get,used,assert,that,used,mem,greater,than,0l,nodes,stats,response,response,client,admin,cluster,prepare,nodes,stats,set,indices,true,set,breaker,true,get,node,stats,stats,response,get,nodes,get,0,assert,not,null,stats,segments,stats,segments,stats,stats,get,indices,get,segments,circuit,breaker,stats,breaker,stats,stats,get,breaker,get,stats,circuit,breaker,accounting,assert,equals,used,mem,segments,stats,get,memory,in,bytes,assert,equals,used,mem,breaker,stats,get,estimated
IndexShardIT -> private void checkAccountingBreaker();1531301204;Check that the accounting breaker correctly matches the segments API for memory usage;private void checkAccountingBreaker() {_        CircuitBreakerService breakerService = getInstanceFromNode(CircuitBreakerService.class)__        CircuitBreaker acctBreaker = breakerService.getBreaker(CircuitBreaker.ACCOUNTING)__        long usedMem = acctBreaker.getUsed()__        assertThat(usedMem, greaterThan(0L))__        NodesStatsResponse response = client().admin().cluster().prepareNodesStats().setIndices(true).setBreaker(true).get()__        NodeStats stats = response.getNodes().get(0)__        assertNotNull(stats)__        SegmentsStats segmentsStats = stats.getIndices().getSegments()__        CircuitBreakerStats breakerStats = stats.getBreaker().getStats(CircuitBreaker.ACCOUNTING)__        assertEquals(usedMem, segmentsStats.getMemoryInBytes())__        assertEquals(usedMem, breakerStats.getEstimated())__    };check,that,the,accounting,breaker,correctly,matches,the,segments,api,for,memory,usage;private,void,check,accounting,breaker,circuit,breaker,service,breaker,service,get,instance,from,node,circuit,breaker,service,class,circuit,breaker,acct,breaker,breaker,service,get,breaker,circuit,breaker,accounting,long,used,mem,acct,breaker,get,used,assert,that,used,mem,greater,than,0l,nodes,stats,response,response,client,admin,cluster,prepare,nodes,stats,set,indices,true,set,breaker,true,get,node,stats,stats,response,get,nodes,get,0,assert,not,null,stats,segments,stats,segments,stats,stats,get,indices,get,segments,circuit,breaker,stats,breaker,stats,stats,get,breaker,get,stats,circuit,breaker,accounting,assert,equals,used,mem,segments,stats,get,memory,in,bytes,assert,equals,used,mem,breaker,stats,get,estimated
IndexShardIT -> private void checkAccountingBreaker();1534362961;Check that the accounting breaker correctly matches the segments API for memory usage;private void checkAccountingBreaker() {_        CircuitBreakerService breakerService = getInstanceFromNode(CircuitBreakerService.class)__        CircuitBreaker acctBreaker = breakerService.getBreaker(CircuitBreaker.ACCOUNTING)__        long usedMem = acctBreaker.getUsed()__        assertThat(usedMem, greaterThan(0L))__        NodesStatsResponse response = client().admin().cluster().prepareNodesStats().setIndices(true).setBreaker(true).get()__        NodeStats stats = response.getNodes().get(0)__        assertNotNull(stats)__        SegmentsStats segmentsStats = stats.getIndices().getSegments()__        CircuitBreakerStats breakerStats = stats.getBreaker().getStats(CircuitBreaker.ACCOUNTING)__        assertEquals(usedMem, segmentsStats.getMemoryInBytes())__        assertEquals(usedMem, breakerStats.getEstimated())__    };check,that,the,accounting,breaker,correctly,matches,the,segments,api,for,memory,usage;private,void,check,accounting,breaker,circuit,breaker,service,breaker,service,get,instance,from,node,circuit,breaker,service,class,circuit,breaker,acct,breaker,breaker,service,get,breaker,circuit,breaker,accounting,long,used,mem,acct,breaker,get,used,assert,that,used,mem,greater,than,0l,nodes,stats,response,response,client,admin,cluster,prepare,nodes,stats,set,indices,true,set,breaker,true,get,node,stats,stats,response,get,nodes,get,0,assert,not,null,stats,segments,stats,segments,stats,stats,get,indices,get,segments,circuit,breaker,stats,breaker,stats,stats,get,breaker,get,stats,circuit,breaker,accounting,assert,equals,used,mem,segments,stats,get,memory,in,bytes,assert,equals,used,mem,breaker,stats,get,estimated
IndexShardIT -> private void checkAccountingBreaker();1536611444;Check that the accounting breaker correctly matches the segments API for memory usage;private void checkAccountingBreaker() {_        CircuitBreakerService breakerService = getInstanceFromNode(CircuitBreakerService.class)__        CircuitBreaker acctBreaker = breakerService.getBreaker(CircuitBreaker.ACCOUNTING)__        long usedMem = acctBreaker.getUsed()__        assertThat(usedMem, greaterThan(0L))__        NodesStatsResponse response = client().admin().cluster().prepareNodesStats().setIndices(true).setBreaker(true).get()__        NodeStats stats = response.getNodes().get(0)__        assertNotNull(stats)__        SegmentsStats segmentsStats = stats.getIndices().getSegments()__        CircuitBreakerStats breakerStats = stats.getBreaker().getStats(CircuitBreaker.ACCOUNTING)__        assertEquals(usedMem, segmentsStats.getMemoryInBytes())__        assertEquals(usedMem, breakerStats.getEstimated())__    };check,that,the,accounting,breaker,correctly,matches,the,segments,api,for,memory,usage;private,void,check,accounting,breaker,circuit,breaker,service,breaker,service,get,instance,from,node,circuit,breaker,service,class,circuit,breaker,acct,breaker,breaker,service,get,breaker,circuit,breaker,accounting,long,used,mem,acct,breaker,get,used,assert,that,used,mem,greater,than,0l,nodes,stats,response,response,client,admin,cluster,prepare,nodes,stats,set,indices,true,set,breaker,true,get,node,stats,stats,response,get,nodes,get,0,assert,not,null,stats,segments,stats,segments,stats,stats,get,indices,get,segments,circuit,breaker,stats,breaker,stats,stats,get,breaker,get,stats,circuit,breaker,accounting,assert,equals,used,mem,segments,stats,get,memory,in,bytes,assert,equals,used,mem,breaker,stats,get,estimated
IndexShardIT -> private void checkAccountingBreaker();1536828374;Check that the accounting breaker correctly matches the segments API for memory usage;private void checkAccountingBreaker() {_        CircuitBreakerService breakerService = getInstanceFromNode(CircuitBreakerService.class)__        CircuitBreaker acctBreaker = breakerService.getBreaker(CircuitBreaker.ACCOUNTING)__        long usedMem = acctBreaker.getUsed()__        assertThat(usedMem, greaterThan(0L))__        NodesStatsResponse response = client().admin().cluster().prepareNodesStats().setIndices(true).setBreaker(true).get()__        NodeStats stats = response.getNodes().get(0)__        assertNotNull(stats)__        SegmentsStats segmentsStats = stats.getIndices().getSegments()__        CircuitBreakerStats breakerStats = stats.getBreaker().getStats(CircuitBreaker.ACCOUNTING)__        assertEquals(usedMem, segmentsStats.getMemoryInBytes())__        assertEquals(usedMem, breakerStats.getEstimated())__    };check,that,the,accounting,breaker,correctly,matches,the,segments,api,for,memory,usage;private,void,check,accounting,breaker,circuit,breaker,service,breaker,service,get,instance,from,node,circuit,breaker,service,class,circuit,breaker,acct,breaker,breaker,service,get,breaker,circuit,breaker,accounting,long,used,mem,acct,breaker,get,used,assert,that,used,mem,greater,than,0l,nodes,stats,response,response,client,admin,cluster,prepare,nodes,stats,set,indices,true,set,breaker,true,get,node,stats,stats,response,get,nodes,get,0,assert,not,null,stats,segments,stats,segments,stats,stats,get,indices,get,segments,circuit,breaker,stats,breaker,stats,stats,get,breaker,get,stats,circuit,breaker,accounting,assert,equals,used,mem,segments,stats,get,memory,in,bytes,assert,equals,used,mem,breaker,stats,get,estimated
IndexShardIT -> private void checkAccountingBreaker();1536964057;Check that the accounting breaker correctly matches the segments API for memory usage;private void checkAccountingBreaker() {_        CircuitBreakerService breakerService = getInstanceFromNode(CircuitBreakerService.class)__        CircuitBreaker acctBreaker = breakerService.getBreaker(CircuitBreaker.ACCOUNTING)__        long usedMem = acctBreaker.getUsed()__        assertThat(usedMem, greaterThan(0L))__        NodesStatsResponse response = client().admin().cluster().prepareNodesStats().setIndices(true).setBreaker(true).get()__        NodeStats stats = response.getNodes().get(0)__        assertNotNull(stats)__        SegmentsStats segmentsStats = stats.getIndices().getSegments()__        CircuitBreakerStats breakerStats = stats.getBreaker().getStats(CircuitBreaker.ACCOUNTING)__        assertEquals(usedMem, segmentsStats.getMemoryInBytes())__        assertEquals(usedMem, breakerStats.getEstimated())__    };check,that,the,accounting,breaker,correctly,matches,the,segments,api,for,memory,usage;private,void,check,accounting,breaker,circuit,breaker,service,breaker,service,get,instance,from,node,circuit,breaker,service,class,circuit,breaker,acct,breaker,breaker,service,get,breaker,circuit,breaker,accounting,long,used,mem,acct,breaker,get,used,assert,that,used,mem,greater,than,0l,nodes,stats,response,response,client,admin,cluster,prepare,nodes,stats,set,indices,true,set,breaker,true,get,node,stats,stats,response,get,nodes,get,0,assert,not,null,stats,segments,stats,segments,stats,stats,get,indices,get,segments,circuit,breaker,stats,breaker,stats,stats,get,breaker,get,stats,circuit,breaker,accounting,assert,equals,used,mem,segments,stats,get,memory,in,bytes,assert,equals,used,mem,breaker,stats,get,estimated
IndexShardIT -> private void checkAccountingBreaker();1539615817;Check that the accounting breaker correctly matches the segments API for memory usage;private void checkAccountingBreaker() {_        CircuitBreakerService breakerService = getInstanceFromNode(CircuitBreakerService.class)__        CircuitBreaker acctBreaker = breakerService.getBreaker(CircuitBreaker.ACCOUNTING)__        long usedMem = acctBreaker.getUsed()__        assertThat(usedMem, greaterThan(0L))__        NodesStatsResponse response = client().admin().cluster().prepareNodesStats().setIndices(true).setBreaker(true).get()__        NodeStats stats = response.getNodes().get(0)__        assertNotNull(stats)__        SegmentsStats segmentsStats = stats.getIndices().getSegments()__        CircuitBreakerStats breakerStats = stats.getBreaker().getStats(CircuitBreaker.ACCOUNTING)__        assertEquals(usedMem, segmentsStats.getMemoryInBytes())__        assertEquals(usedMem, breakerStats.getEstimated())__    };check,that,the,accounting,breaker,correctly,matches,the,segments,api,for,memory,usage;private,void,check,accounting,breaker,circuit,breaker,service,breaker,service,get,instance,from,node,circuit,breaker,service,class,circuit,breaker,acct,breaker,breaker,service,get,breaker,circuit,breaker,accounting,long,used,mem,acct,breaker,get,used,assert,that,used,mem,greater,than,0l,nodes,stats,response,response,client,admin,cluster,prepare,nodes,stats,set,indices,true,set,breaker,true,get,node,stats,stats,response,get,nodes,get,0,assert,not,null,stats,segments,stats,segments,stats,stats,get,indices,get,segments,circuit,breaker,stats,breaker,stats,stats,get,breaker,get,stats,circuit,breaker,accounting,assert,equals,used,mem,segments,stats,get,memory,in,bytes,assert,equals,used,mem,breaker,stats,get,estimated
IndexShardIT -> private void checkAccountingBreaker();1542697754;Check that the accounting breaker correctly matches the segments API for memory usage;private void checkAccountingBreaker() {_        CircuitBreakerService breakerService = getInstanceFromNode(CircuitBreakerService.class)__        CircuitBreaker acctBreaker = breakerService.getBreaker(CircuitBreaker.ACCOUNTING)__        long usedMem = acctBreaker.getUsed()__        assertThat(usedMem, greaterThan(0L))__        NodesStatsResponse response = client().admin().cluster().prepareNodesStats().setIndices(true).setBreaker(true).get()__        NodeStats stats = response.getNodes().get(0)__        assertNotNull(stats)__        SegmentsStats segmentsStats = stats.getIndices().getSegments()__        CircuitBreakerStats breakerStats = stats.getBreaker().getStats(CircuitBreaker.ACCOUNTING)__        assertEquals(usedMem, segmentsStats.getMemoryInBytes())__        assertEquals(usedMem, breakerStats.getEstimated())__    };check,that,the,accounting,breaker,correctly,matches,the,segments,api,for,memory,usage;private,void,check,accounting,breaker,circuit,breaker,service,breaker,service,get,instance,from,node,circuit,breaker,service,class,circuit,breaker,acct,breaker,breaker,service,get,breaker,circuit,breaker,accounting,long,used,mem,acct,breaker,get,used,assert,that,used,mem,greater,than,0l,nodes,stats,response,response,client,admin,cluster,prepare,nodes,stats,set,indices,true,set,breaker,true,get,node,stats,stats,response,get,nodes,get,0,assert,not,null,stats,segments,stats,segments,stats,stats,get,indices,get,segments,circuit,breaker,stats,breaker,stats,stats,get,breaker,get,stats,circuit,breaker,accounting,assert,equals,used,mem,segments,stats,get,memory,in,bytes,assert,equals,used,mem,breaker,stats,get,estimated
IndexShardIT -> private void checkAccountingBreaker();1544035746;Check that the accounting breaker correctly matches the segments API for memory usage;private void checkAccountingBreaker() {_        CircuitBreakerService breakerService = getInstanceFromNode(CircuitBreakerService.class)__        CircuitBreaker acctBreaker = breakerService.getBreaker(CircuitBreaker.ACCOUNTING)__        long usedMem = acctBreaker.getUsed()__        assertThat(usedMem, greaterThan(0L))__        NodesStatsResponse response = client().admin().cluster().prepareNodesStats().setIndices(true).setBreaker(true).get()__        NodeStats stats = response.getNodes().get(0)__        assertNotNull(stats)__        SegmentsStats segmentsStats = stats.getIndices().getSegments()__        CircuitBreakerStats breakerStats = stats.getBreaker().getStats(CircuitBreaker.ACCOUNTING)__        assertEquals(usedMem, segmentsStats.getMemoryInBytes())__        assertEquals(usedMem, breakerStats.getEstimated())__    };check,that,the,accounting,breaker,correctly,matches,the,segments,api,for,memory,usage;private,void,check,accounting,breaker,circuit,breaker,service,breaker,service,get,instance,from,node,circuit,breaker,service,class,circuit,breaker,acct,breaker,breaker,service,get,breaker,circuit,breaker,accounting,long,used,mem,acct,breaker,get,used,assert,that,used,mem,greater,than,0l,nodes,stats,response,response,client,admin,cluster,prepare,nodes,stats,set,indices,true,set,breaker,true,get,node,stats,stats,response,get,nodes,get,0,assert,not,null,stats,segments,stats,segments,stats,stats,get,indices,get,segments,circuit,breaker,stats,breaker,stats,stats,get,breaker,get,stats,circuit,breaker,accounting,assert,equals,used,mem,segments,stats,get,memory,in,bytes,assert,equals,used,mem,breaker,stats,get,estimated
IndexShardIT -> private void checkAccountingBreaker();1544893197;Check that the accounting breaker correctly matches the segments API for memory usage;private void checkAccountingBreaker() {_        CircuitBreakerService breakerService = getInstanceFromNode(CircuitBreakerService.class)__        CircuitBreaker acctBreaker = breakerService.getBreaker(CircuitBreaker.ACCOUNTING)__        long usedMem = acctBreaker.getUsed()__        assertThat(usedMem, greaterThan(0L))__        NodesStatsResponse response = client().admin().cluster().prepareNodesStats().setIndices(true).setBreaker(true).get()__        NodeStats stats = response.getNodes().get(0)__        assertNotNull(stats)__        SegmentsStats segmentsStats = stats.getIndices().getSegments()__        CircuitBreakerStats breakerStats = stats.getBreaker().getStats(CircuitBreaker.ACCOUNTING)__        assertEquals(usedMem, segmentsStats.getMemoryInBytes())__        assertEquals(usedMem, breakerStats.getEstimated())__    };check,that,the,accounting,breaker,correctly,matches,the,segments,api,for,memory,usage;private,void,check,accounting,breaker,circuit,breaker,service,breaker,service,get,instance,from,node,circuit,breaker,service,class,circuit,breaker,acct,breaker,breaker,service,get,breaker,circuit,breaker,accounting,long,used,mem,acct,breaker,get,used,assert,that,used,mem,greater,than,0l,nodes,stats,response,response,client,admin,cluster,prepare,nodes,stats,set,indices,true,set,breaker,true,get,node,stats,stats,response,get,nodes,get,0,assert,not,null,stats,segments,stats,segments,stats,stats,get,indices,get,segments,circuit,breaker,stats,breaker,stats,stats,get,breaker,get,stats,circuit,breaker,accounting,assert,equals,used,mem,segments,stats,get,memory,in,bytes,assert,equals,used,mem,breaker,stats,get,estimated
IndexShardIT -> private void checkAccountingBreaker();1545596061;Check that the accounting breaker correctly matches the segments API for memory usage;private void checkAccountingBreaker() {_        CircuitBreakerService breakerService = getInstanceFromNode(CircuitBreakerService.class)__        CircuitBreaker acctBreaker = breakerService.getBreaker(CircuitBreaker.ACCOUNTING)__        long usedMem = acctBreaker.getUsed()__        assertThat(usedMem, greaterThan(0L))__        NodesStatsResponse response = client().admin().cluster().prepareNodesStats().setIndices(true).setBreaker(true).get()__        NodeStats stats = response.getNodes().get(0)__        assertNotNull(stats)__        SegmentsStats segmentsStats = stats.getIndices().getSegments()__        CircuitBreakerStats breakerStats = stats.getBreaker().getStats(CircuitBreaker.ACCOUNTING)__        assertEquals(usedMem, segmentsStats.getMemoryInBytes())__        assertEquals(usedMem, breakerStats.getEstimated())__    };check,that,the,accounting,breaker,correctly,matches,the,segments,api,for,memory,usage;private,void,check,accounting,breaker,circuit,breaker,service,breaker,service,get,instance,from,node,circuit,breaker,service,class,circuit,breaker,acct,breaker,breaker,service,get,breaker,circuit,breaker,accounting,long,used,mem,acct,breaker,get,used,assert,that,used,mem,greater,than,0l,nodes,stats,response,response,client,admin,cluster,prepare,nodes,stats,set,indices,true,set,breaker,true,get,node,stats,stats,response,get,nodes,get,0,assert,not,null,stats,segments,stats,segments,stats,stats,get,indices,get,segments,circuit,breaker,stats,breaker,stats,stats,get,breaker,get,stats,circuit,breaker,accounting,assert,equals,used,mem,segments,stats,get,memory,in,bytes,assert,equals,used,mem,breaker,stats,get,estimated
IndexShardIT -> private void checkAccountingBreaker();1545678410;Check that the accounting breaker correctly matches the segments API for memory usage;private void checkAccountingBreaker() {_        CircuitBreakerService breakerService = getInstanceFromNode(CircuitBreakerService.class)__        CircuitBreaker acctBreaker = breakerService.getBreaker(CircuitBreaker.ACCOUNTING)__        long usedMem = acctBreaker.getUsed()__        assertThat(usedMem, greaterThan(0L))__        NodesStatsResponse response = client().admin().cluster().prepareNodesStats().setIndices(true).setBreaker(true).get()__        NodeStats stats = response.getNodes().get(0)__        assertNotNull(stats)__        SegmentsStats segmentsStats = stats.getIndices().getSegments()__        CircuitBreakerStats breakerStats = stats.getBreaker().getStats(CircuitBreaker.ACCOUNTING)__        assertEquals(usedMem, segmentsStats.getMemoryInBytes())__        assertEquals(usedMem, breakerStats.getEstimated())__    };check,that,the,accounting,breaker,correctly,matches,the,segments,api,for,memory,usage;private,void,check,accounting,breaker,circuit,breaker,service,breaker,service,get,instance,from,node,circuit,breaker,service,class,circuit,breaker,acct,breaker,breaker,service,get,breaker,circuit,breaker,accounting,long,used,mem,acct,breaker,get,used,assert,that,used,mem,greater,than,0l,nodes,stats,response,response,client,admin,cluster,prepare,nodes,stats,set,indices,true,set,breaker,true,get,node,stats,stats,response,get,nodes,get,0,assert,not,null,stats,segments,stats,segments,stats,stats,get,indices,get,segments,circuit,breaker,stats,breaker,stats,stats,get,breaker,get,stats,circuit,breaker,accounting,assert,equals,used,mem,segments,stats,get,memory,in,bytes,assert,equals,used,mem,breaker,stats,get,estimated
IndexShardIT -> private void checkAccountingBreaker();1547520324;Check that the accounting breaker correctly matches the segments API for memory usage;private void checkAccountingBreaker() {_        CircuitBreakerService breakerService = getInstanceFromNode(CircuitBreakerService.class)__        CircuitBreaker acctBreaker = breakerService.getBreaker(CircuitBreaker.ACCOUNTING)__        long usedMem = acctBreaker.getUsed()__        assertThat(usedMem, greaterThan(0L))__        NodesStatsResponse response = client().admin().cluster().prepareNodesStats().setIndices(true).setBreaker(true).get()__        NodeStats stats = response.getNodes().get(0)__        assertNotNull(stats)__        SegmentsStats segmentsStats = stats.getIndices().getSegments()__        CircuitBreakerStats breakerStats = stats.getBreaker().getStats(CircuitBreaker.ACCOUNTING)__        assertEquals(usedMem, segmentsStats.getMemoryInBytes())__        assertEquals(usedMem, breakerStats.getEstimated())__    };check,that,the,accounting,breaker,correctly,matches,the,segments,api,for,memory,usage;private,void,check,accounting,breaker,circuit,breaker,service,breaker,service,get,instance,from,node,circuit,breaker,service,class,circuit,breaker,acct,breaker,breaker,service,get,breaker,circuit,breaker,accounting,long,used,mem,acct,breaker,get,used,assert,that,used,mem,greater,than,0l,nodes,stats,response,response,client,admin,cluster,prepare,nodes,stats,set,indices,true,set,breaker,true,get,node,stats,stats,response,get,nodes,get,0,assert,not,null,stats,segments,stats,segments,stats,stats,get,indices,get,segments,circuit,breaker,stats,breaker,stats,stats,get,breaker,get,stats,circuit,breaker,accounting,assert,equals,used,mem,segments,stats,get,memory,in,bytes,assert,equals,used,mem,breaker,stats,get,estimated
IndexShardIT -> private void checkAccountingBreaker();1548465136;Check that the accounting breaker correctly matches the segments API for memory usage;private void checkAccountingBreaker() {_        CircuitBreakerService breakerService = getInstanceFromNode(CircuitBreakerService.class)__        CircuitBreaker acctBreaker = breakerService.getBreaker(CircuitBreaker.ACCOUNTING)__        long usedMem = acctBreaker.getUsed()__        assertThat(usedMem, greaterThan(0L))__        NodesStatsResponse response = client().admin().cluster().prepareNodesStats().setIndices(true).setBreaker(true).get()__        NodeStats stats = response.getNodes().get(0)__        assertNotNull(stats)__        SegmentsStats segmentsStats = stats.getIndices().getSegments()__        CircuitBreakerStats breakerStats = stats.getBreaker().getStats(CircuitBreaker.ACCOUNTING)__        assertEquals(usedMem, segmentsStats.getMemoryInBytes())__        assertEquals(usedMem, breakerStats.getEstimated())__    };check,that,the,accounting,breaker,correctly,matches,the,segments,api,for,memory,usage;private,void,check,accounting,breaker,circuit,breaker,service,breaker,service,get,instance,from,node,circuit,breaker,service,class,circuit,breaker,acct,breaker,breaker,service,get,breaker,circuit,breaker,accounting,long,used,mem,acct,breaker,get,used,assert,that,used,mem,greater,than,0l,nodes,stats,response,response,client,admin,cluster,prepare,nodes,stats,set,indices,true,set,breaker,true,get,node,stats,stats,response,get,nodes,get,0,assert,not,null,stats,segments,stats,segments,stats,stats,get,indices,get,segments,circuit,breaker,stats,breaker,stats,stats,get,breaker,get,stats,circuit,breaker,accounting,assert,equals,used,mem,segments,stats,get,memory,in,bytes,assert,equals,used,mem,breaker,stats,get,estimated
IndexShardIT -> private void checkAccountingBreaker();1548593396;Check that the accounting breaker correctly matches the segments API for memory usage;private void checkAccountingBreaker() {_        CircuitBreakerService breakerService = getInstanceFromNode(CircuitBreakerService.class)__        CircuitBreaker acctBreaker = breakerService.getBreaker(CircuitBreaker.ACCOUNTING)__        long usedMem = acctBreaker.getUsed()__        assertThat(usedMem, greaterThan(0L))__        NodesStatsResponse response = client().admin().cluster().prepareNodesStats().setIndices(true).setBreaker(true).get()__        NodeStats stats = response.getNodes().get(0)__        assertNotNull(stats)__        SegmentsStats segmentsStats = stats.getIndices().getSegments()__        CircuitBreakerStats breakerStats = stats.getBreaker().getStats(CircuitBreaker.ACCOUNTING)__        assertEquals(usedMem, segmentsStats.getMemoryInBytes())__        assertEquals(usedMem, breakerStats.getEstimated())__    };check,that,the,accounting,breaker,correctly,matches,the,segments,api,for,memory,usage;private,void,check,accounting,breaker,circuit,breaker,service,breaker,service,get,instance,from,node,circuit,breaker,service,class,circuit,breaker,acct,breaker,breaker,service,get,breaker,circuit,breaker,accounting,long,used,mem,acct,breaker,get,used,assert,that,used,mem,greater,than,0l,nodes,stats,response,response,client,admin,cluster,prepare,nodes,stats,set,indices,true,set,breaker,true,get,node,stats,stats,response,get,nodes,get,0,assert,not,null,stats,segments,stats,segments,stats,stats,get,indices,get,segments,circuit,breaker,stats,breaker,stats,stats,get,breaker,get,stats,circuit,breaker,accounting,assert,equals,used,mem,segments,stats,get,memory,in,bytes,assert,equals,used,mem,breaker,stats,get,estimated
IndexShardIT -> private void checkAccountingBreaker();1548870871;Check that the accounting breaker correctly matches the segments API for memory usage;private void checkAccountingBreaker() {_        CircuitBreakerService breakerService = getInstanceFromNode(CircuitBreakerService.class)__        CircuitBreaker acctBreaker = breakerService.getBreaker(CircuitBreaker.ACCOUNTING)__        long usedMem = acctBreaker.getUsed()__        assertThat(usedMem, greaterThan(0L))__        NodesStatsResponse response = client().admin().cluster().prepareNodesStats().setIndices(true).setBreaker(true).get()__        NodeStats stats = response.getNodes().get(0)__        assertNotNull(stats)__        SegmentsStats segmentsStats = stats.getIndices().getSegments()__        CircuitBreakerStats breakerStats = stats.getBreaker().getStats(CircuitBreaker.ACCOUNTING)__        assertEquals(usedMem, segmentsStats.getMemoryInBytes())__        assertEquals(usedMem, breakerStats.getEstimated())__    };check,that,the,accounting,breaker,correctly,matches,the,segments,api,for,memory,usage;private,void,check,accounting,breaker,circuit,breaker,service,breaker,service,get,instance,from,node,circuit,breaker,service,class,circuit,breaker,acct,breaker,breaker,service,get,breaker,circuit,breaker,accounting,long,used,mem,acct,breaker,get,used,assert,that,used,mem,greater,than,0l,nodes,stats,response,response,client,admin,cluster,prepare,nodes,stats,set,indices,true,set,breaker,true,get,node,stats,stats,response,get,nodes,get,0,assert,not,null,stats,segments,stats,segments,stats,stats,get,indices,get,segments,circuit,breaker,stats,breaker,stats,stats,get,breaker,get,stats,circuit,breaker,accounting,assert,equals,used,mem,segments,stats,get,memory,in,bytes,assert,equals,used,mem,breaker,stats,get,estimated
IndexShardIT -> private void checkAccountingBreaker();1549294529;Check that the accounting breaker correctly matches the segments API for memory usage;private void checkAccountingBreaker() {_        CircuitBreakerService breakerService = getInstanceFromNode(CircuitBreakerService.class)__        CircuitBreaker acctBreaker = breakerService.getBreaker(CircuitBreaker.ACCOUNTING)__        long usedMem = acctBreaker.getUsed()__        assertThat(usedMem, greaterThan(0L))__        NodesStatsResponse response = client().admin().cluster().prepareNodesStats().setIndices(true).setBreaker(true).get()__        NodeStats stats = response.getNodes().get(0)__        assertNotNull(stats)__        SegmentsStats segmentsStats = stats.getIndices().getSegments()__        CircuitBreakerStats breakerStats = stats.getBreaker().getStats(CircuitBreaker.ACCOUNTING)__        assertEquals(usedMem, segmentsStats.getMemoryInBytes())__        assertEquals(usedMem, breakerStats.getEstimated())__    };check,that,the,accounting,breaker,correctly,matches,the,segments,api,for,memory,usage;private,void,check,accounting,breaker,circuit,breaker,service,breaker,service,get,instance,from,node,circuit,breaker,service,class,circuit,breaker,acct,breaker,breaker,service,get,breaker,circuit,breaker,accounting,long,used,mem,acct,breaker,get,used,assert,that,used,mem,greater,than,0l,nodes,stats,response,response,client,admin,cluster,prepare,nodes,stats,set,indices,true,set,breaker,true,get,node,stats,stats,response,get,nodes,get,0,assert,not,null,stats,segments,stats,segments,stats,stats,get,indices,get,segments,circuit,breaker,stats,breaker,stats,stats,get,breaker,get,stats,circuit,breaker,accounting,assert,equals,used,mem,segments,stats,get,memory,in,bytes,assert,equals,used,mem,breaker,stats,get,estimated
IndexShardIT -> private void checkAccountingBreaker();1550252936;Check that the accounting breaker correctly matches the segments API for memory usage;private void checkAccountingBreaker() {_        CircuitBreakerService breakerService = getInstanceFromNode(CircuitBreakerService.class)__        CircuitBreaker acctBreaker = breakerService.getBreaker(CircuitBreaker.ACCOUNTING)__        long usedMem = acctBreaker.getUsed()__        assertThat(usedMem, greaterThan(0L))__        NodesStatsResponse response = client().admin().cluster().prepareNodesStats().setIndices(true).setBreaker(true).get()__        NodeStats stats = response.getNodes().get(0)__        assertNotNull(stats)__        SegmentsStats segmentsStats = stats.getIndices().getSegments()__        CircuitBreakerStats breakerStats = stats.getBreaker().getStats(CircuitBreaker.ACCOUNTING)__        assertEquals(usedMem, segmentsStats.getMemoryInBytes())__        assertEquals(usedMem, breakerStats.getEstimated())__    };check,that,the,accounting,breaker,correctly,matches,the,segments,api,for,memory,usage;private,void,check,accounting,breaker,circuit,breaker,service,breaker,service,get,instance,from,node,circuit,breaker,service,class,circuit,breaker,acct,breaker,breaker,service,get,breaker,circuit,breaker,accounting,long,used,mem,acct,breaker,get,used,assert,that,used,mem,greater,than,0l,nodes,stats,response,response,client,admin,cluster,prepare,nodes,stats,set,indices,true,set,breaker,true,get,node,stats,stats,response,get,nodes,get,0,assert,not,null,stats,segments,stats,segments,stats,stats,get,indices,get,segments,circuit,breaker,stats,breaker,stats,stats,get,breaker,get,stats,circuit,breaker,accounting,assert,equals,used,mem,segments,stats,get,memory,in,bytes,assert,equals,used,mem,breaker,stats,get,estimated
IndexShardIT -> private void checkAccountingBreaker();1550831438;Check that the accounting breaker correctly matches the segments API for memory usage;private void checkAccountingBreaker() {_        CircuitBreakerService breakerService = getInstanceFromNode(CircuitBreakerService.class)__        CircuitBreaker acctBreaker = breakerService.getBreaker(CircuitBreaker.ACCOUNTING)__        long usedMem = acctBreaker.getUsed()__        assertThat(usedMem, greaterThan(0L))__        NodesStatsResponse response = client().admin().cluster().prepareNodesStats().setIndices(true).setBreaker(true).get()__        NodeStats stats = response.getNodes().get(0)__        assertNotNull(stats)__        SegmentsStats segmentsStats = stats.getIndices().getSegments()__        CircuitBreakerStats breakerStats = stats.getBreaker().getStats(CircuitBreaker.ACCOUNTING)__        assertEquals(usedMem, segmentsStats.getMemoryInBytes())__        assertEquals(usedMem, breakerStats.getEstimated())__    };check,that,the,accounting,breaker,correctly,matches,the,segments,api,for,memory,usage;private,void,check,accounting,breaker,circuit,breaker,service,breaker,service,get,instance,from,node,circuit,breaker,service,class,circuit,breaker,acct,breaker,breaker,service,get,breaker,circuit,breaker,accounting,long,used,mem,acct,breaker,get,used,assert,that,used,mem,greater,than,0l,nodes,stats,response,response,client,admin,cluster,prepare,nodes,stats,set,indices,true,set,breaker,true,get,node,stats,stats,response,get,nodes,get,0,assert,not,null,stats,segments,stats,segments,stats,stats,get,indices,get,segments,circuit,breaker,stats,breaker,stats,stats,get,breaker,get,stats,circuit,breaker,accounting,assert,equals,used,mem,segments,stats,get,memory,in,bytes,assert,equals,used,mem,breaker,stats,get,estimated
