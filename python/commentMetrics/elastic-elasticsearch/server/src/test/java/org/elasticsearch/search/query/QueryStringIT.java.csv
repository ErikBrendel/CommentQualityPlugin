commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void createRandomClusterSetting() {     CLUSTER_MAX_CLAUSE_COUNT = randomIntBetween(50, 100). }
false;public;0;6;;@Before public void setup() throws Exception {     String indexBody = copyToStringFromClasspath("/org/elasticsearch/search/query/all-query-index.json").     prepareCreate("test").setSource(indexBody, XContentType.JSON).get().     ensureGreen("test"). }
false;protected;1;7;;@Override protected Settings nodeSettings(int nodeOrdinal) {     return Settings.builder().put(super.nodeSettings(nodeOrdinal)).put(SearchModule.INDICES_MAX_CLAUSE_COUNT_SETTING.getKey(), CLUSTER_MAX_CLAUSE_COUNT).build(). }
false;public;0;19;;public void testBasicAllQuery() throws Exception {     List<IndexRequestBuilder> reqs = new ArrayList<>().     reqs.add(client().prepareIndex("test", "_doc", "1").setSource("f1", "foo bar baz")).     reqs.add(client().prepareIndex("test", "_doc", "2").setSource("f2", "Bar")).     reqs.add(client().prepareIndex("test", "_doc", "3").setSource("f3", "foo bar baz")).     indexRandom(true, false, reqs).     SearchResponse resp = client().prepareSearch("test").setQuery(queryStringQuery("foo")).get().     assertHitCount(resp, 2L).     assertHits(resp.getHits(), "1", "3").     resp = client().prepareSearch("test").setQuery(queryStringQuery("bar")).get().     assertHitCount(resp, 2L).     assertHits(resp.getHits(), "1", "3").     resp = client().prepareSearch("test").setQuery(queryStringQuery("Bar")).get().     assertHitCount(resp, 3L).     assertHits(resp.getHits(), "1", "2", "3"). }
false;public;0;22;;public void testWithDate() throws Exception {     List<IndexRequestBuilder> reqs = new ArrayList<>().     reqs.add(client().prepareIndex("test", "_doc", "1").setSource("f1", "foo", "f_date", "2015/09/02")).     reqs.add(client().prepareIndex("test", "_doc", "2").setSource("f1", "bar", "f_date", "2015/09/01")).     indexRandom(true, false, reqs).     SearchResponse resp = client().prepareSearch("test").setQuery(queryStringQuery("foo bar")).get().     assertHits(resp.getHits(), "1", "2").     assertHitCount(resp, 2L).     resp = client().prepareSearch("test").setQuery(queryStringQuery("\"2015/09/02\"")).get().     assertHits(resp.getHits(), "1").     assertHitCount(resp, 1L).     resp = client().prepareSearch("test").setQuery(queryStringQuery("bar \"2015/09/02\"")).get().     assertHits(resp.getHits(), "1", "2").     assertHitCount(resp, 2L).     resp = client().prepareSearch("test").setQuery(queryStringQuery("\"2015/09/02\" \"2015/09/01\"")).get().     assertHits(resp.getHits(), "1", "2").     assertHitCount(resp, 2L). }
false;public;0;28;;public void testWithLotsOfTypes() throws Exception {     List<IndexRequestBuilder> reqs = new ArrayList<>().     reqs.add(client().prepareIndex("test", "_doc", "1").setSource("f1", "foo", "f_date", "2015/09/02", "f_float", "1.7", "f_ip", "127.0.0.1")).     reqs.add(client().prepareIndex("test", "_doc", "2").setSource("f1", "bar", "f_date", "2015/09/01", "f_float", "1.8", "f_ip", "127.0.0.2")).     indexRandom(true, false, reqs).     SearchResponse resp = client().prepareSearch("test").setQuery(queryStringQuery("foo bar")).get().     assertHits(resp.getHits(), "1", "2").     assertHitCount(resp, 2L).     resp = client().prepareSearch("test").setQuery(queryStringQuery("\"2015/09/02\"")).get().     assertHits(resp.getHits(), "1").     assertHitCount(resp, 1L).     resp = client().prepareSearch("test").setQuery(queryStringQuery("127.0.0.2 \"2015/09/02\"")).get().     assertHits(resp.getHits(), "1", "2").     assertHitCount(resp, 2L).     resp = client().prepareSearch("test").setQuery(queryStringQuery("127.0.0.1 OR 1.8")).get().     assertHits(resp.getHits(), "1", "2").     assertHitCount(resp, 2L). }
false;public;0;37;;public void testDocWithAllTypes() throws Exception {     List<IndexRequestBuilder> reqs = new ArrayList<>().     String docBody = copyToStringFromClasspath("/org/elasticsearch/search/query/all-example-document.json").     reqs.add(client().prepareIndex("test", "_doc", "1").setSource(docBody, XContentType.JSON)).     indexRandom(true, false, reqs).     SearchResponse resp = client().prepareSearch("test").setQuery(queryStringQuery("foo")).get().     assertHits(resp.getHits(), "1").     resp = client().prepareSearch("test").setQuery(queryStringQuery("Bar")).get().     assertHits(resp.getHits(), "1").     resp = client().prepareSearch("test").setQuery(queryStringQuery("Baz")).get().     assertHits(resp.getHits(), "1").     resp = client().prepareSearch("test").setQuery(queryStringQuery("19")).get().     assertHits(resp.getHits(), "1").     // nested doesn't match because it's hidden     resp = client().prepareSearch("test").setQuery(queryStringQuery("1476383971")).get().     assertHits(resp.getHits(), "1").     // bool doesn't match     resp = client().prepareSearch("test").setQuery(queryStringQuery("7")).get().     assertHits(resp.getHits(), "1").     resp = client().prepareSearch("test").setQuery(queryStringQuery("23")).get().     assertHits(resp.getHits(), "1").     resp = client().prepareSearch("test").setQuery(queryStringQuery("1293")).get().     assertHits(resp.getHits(), "1").     resp = client().prepareSearch("test").setQuery(queryStringQuery("42")).get().     assertHits(resp.getHits(), "1").     resp = client().prepareSearch("test").setQuery(queryStringQuery("1.7")).get().     assertHits(resp.getHits(), "1").     resp = client().prepareSearch("test").setQuery(queryStringQuery("1.5")).get().     assertHits(resp.getHits(), "1").     resp = client().prepareSearch("test").setQuery(queryStringQuery("127.0.0.1")).get().     assertHits(resp.getHits(), "1"). // binary doesn't match // suggest doesn't match // geo_point doesn't match // geo_shape doesn't match }
false;public;0;21;;public void testKeywordWithWhitespace() throws Exception {     List<IndexRequestBuilder> reqs = new ArrayList<>().     reqs.add(client().prepareIndex("test", "_doc", "1").setSource("f2", "Foo Bar")).     reqs.add(client().prepareIndex("test", "_doc", "2").setSource("f1", "bar")).     reqs.add(client().prepareIndex("test", "_doc", "3").setSource("f1", "foo bar")).     indexRandom(true, false, reqs).     SearchResponse resp = client().prepareSearch("test").setQuery(queryStringQuery("foo")).get().     assertHits(resp.getHits(), "3").     assertHitCount(resp, 1L).     resp = client().prepareSearch("test").setQuery(queryStringQuery("bar")).get().     assertHits(resp.getHits(), "2", "3").     assertHitCount(resp, 2L).     resp = client().prepareSearch("test").setQuery(queryStringQuery("Foo Bar")).get().     assertHits(resp.getHits(), "1", "2", "3").     assertHitCount(resp, 3L). }
false;public;0;20;;public void testAllFields() throws Exception {     String indexBody = copyToStringFromClasspath("/org/elasticsearch/search/query/all-query-index.json").     Settings.Builder settings = Settings.builder().put("index.query.default_field", "*").     prepareCreate("test_1").setSource(indexBody, XContentType.JSON).setSettings(settings).get().     ensureGreen("test_1").     List<IndexRequestBuilder> reqs = new ArrayList<>().     reqs.add(client().prepareIndex("test_1", "_doc", "1").setSource("f1", "foo", "f2", "eggplant")).     indexRandom(true, false, reqs).     SearchResponse resp = client().prepareSearch("test_1").setQuery(queryStringQuery("foo eggplant").defaultOperator(Operator.AND)).get().     assertHitCount(resp, 0L).     resp = client().prepareSearch("test_1").setQuery(queryStringQuery("foo eggplant").defaultOperator(Operator.OR)).get().     assertHits(resp.getHits(), "1").     assertHitCount(resp, 1L). }
false;public;0;19;;public void testPhraseQueryOnFieldWithNoPositions() throws Exception {     List<IndexRequestBuilder> reqs = new ArrayList<>().     reqs.add(client().prepareIndex("test", "_doc", "1").setSource("f1", "foo bar", "f4", "eggplant parmesan")).     reqs.add(client().prepareIndex("test", "_doc", "2").setSource("f1", "foo bar", "f4", "chicken parmesan")).     indexRandom(true, false, reqs).     SearchResponse resp = client().prepareSearch("test").setQuery(queryStringQuery("\"eggplant parmesan\"").lenient(true)).get().     assertHitCount(resp, 0L).     Exception exc = expectThrows(Exception.class, () -> client().prepareSearch("test").setQuery(queryStringQuery("f4:\"eggplant parmesan\"").lenient(false)).get()).     IllegalStateException ise = (IllegalStateException) ExceptionsHelper.unwrap(exc, IllegalStateException.class).     assertNotNull(ise).     assertThat(ise.getMessage(), containsString("field:[f4] was indexed without position data. cannot run PhraseQuery")). }
false;public;0;6;;public void testBooleanStrictQuery() throws Exception {     Exception e = expectThrows(Exception.class, () -> client().prepareSearch("test").setQuery(queryStringQuery("foo").field("f_bool")).get()).     assertThat(ExceptionsHelper.unwrap(e, IllegalArgumentException.class).getMessage(), containsString("Can't parse boolean value [foo], expected [true] or [false]")). }
false;public;0;6;;public void testAllFieldsWithSpecifiedLeniency() throws IOException {     Exception e = expectThrows(Exception.class, () -> client().prepareSearch("test").setQuery(queryStringQuery("f_date:[now-2D TO now]").lenient(false)).get()).     assertThat(e.getCause().getMessage(), containsString("unit [D] not supported for date math [-2D]")). }
false;public;0;31;;public void testLimitOnExpandedFields() throws Exception {     XContentBuilder builder = jsonBuilder().     builder.startObject().     builder.startObject("type1").     builder.startObject("properties").     for (int i = 0. i < CLUSTER_MAX_CLAUSE_COUNT + 1. i++) {         builder.startObject("field" + i).field("type", "text").endObject().     }     // properties     builder.endObject().     // type1     builder.endObject().     builder.endObject().     assertAcked(prepareCreate("toomanyfields").setSettings(Settings.builder().put(MapperService.INDEX_MAPPING_TOTAL_FIELDS_LIMIT_SETTING.getKey(), CLUSTER_MAX_CLAUSE_COUNT + 100)).addMapping("type1", builder)).     client().prepareIndex("toomanyfields", "type1", "1").setSource("field1", "foo bar baz").get().     refresh().     Exception e = expectThrows(Exception.class, () -> {         QueryStringQueryBuilder qb = queryStringQuery("bar").         if (randomBoolean()) {             qb.defaultField("*").         }         client().prepareSearch("toomanyfields").setQuery(qb).get().     }).     assertThat(ExceptionsHelper.unwrap(e, IllegalArgumentException.class).getMessage(), containsString("field expansion matches too many fields, limit: " + CLUSTER_MAX_CLAUSE_COUNT + ", got: " + (CLUSTER_MAX_CLAUSE_COUNT + 1))). }
false;public;0;15;;public void testFieldAlias() throws Exception {     List<IndexRequestBuilder> indexRequests = new ArrayList<>().     indexRequests.add(client().prepareIndex("test", "_doc", "1").setSource("f3", "text", "f2", "one")).     indexRequests.add(client().prepareIndex("test", "_doc", "2").setSource("f3", "value", "f2", "two")).     indexRequests.add(client().prepareIndex("test", "_doc", "3").setSource("f3", "another value", "f2", "three")).     indexRandom(true, false, indexRequests).     SearchResponse response = client().prepareSearch("test").setQuery(queryStringQuery("value").field("f3_alias")).get().     assertNoFailures(response).     assertHitCount(response, 2).     assertHits(response.getHits(), "2", "3"). }
false;public;0;15;;public void testFieldAliasWithEmbeddedFieldNames() throws Exception {     List<IndexRequestBuilder> indexRequests = new ArrayList<>().     indexRequests.add(client().prepareIndex("test", "_doc", "1").setSource("f3", "text", "f2", "one")).     indexRequests.add(client().prepareIndex("test", "_doc", "2").setSource("f3", "value", "f2", "two")).     indexRequests.add(client().prepareIndex("test", "_doc", "3").setSource("f3", "another value", "f2", "three")).     indexRandom(true, false, indexRequests).     SearchResponse response = client().prepareSearch("test").setQuery(queryStringQuery("f3_alias:value AND f2:three")).get().     assertNoFailures(response).     assertHitCount(response, 1).     assertHits(response.getHits(), "3"). }
false;public;0;15;;public void testFieldAliasWithWildcardField() throws Exception {     List<IndexRequestBuilder> indexRequests = new ArrayList<>().     indexRequests.add(client().prepareIndex("test", "_doc", "1").setSource("f3", "text", "f2", "one")).     indexRequests.add(client().prepareIndex("test", "_doc", "2").setSource("f3", "value", "f2", "two")).     indexRequests.add(client().prepareIndex("test", "_doc", "3").setSource("f3", "another value", "f2", "three")).     indexRandom(true, false, indexRequests).     SearchResponse response = client().prepareSearch("test").setQuery(queryStringQuery("value").field("f3_*")).get().     assertNoFailures(response).     assertHitCount(response, 2).     assertHits(response.getHits(), "2", "3"). }
false;public;0;15;;public void testFieldAliasOnDisallowedFieldType() throws Exception {     List<IndexRequestBuilder> indexRequests = new ArrayList<>().     indexRequests.add(client().prepareIndex("test", "_doc", "1").setSource("f3", "text", "f2", "one")).     indexRandom(true, false, indexRequests).     // The wildcard field matches aliases for both a text and geo_point field.     // By default, the geo_point field should be ignored when building the query.     SearchResponse response = client().prepareSearch("test").setQuery(queryStringQuery("text").field("f*_alias")).get().     assertNoFailures(response).     assertHitCount(response, 1).     assertHits(response.getHits(), "1"). }
false;private;2;8;;private void assertHits(SearchHits hits, String... ids) {     assertThat(hits.getTotalHits().value, equalTo((long) ids.length)).     Set<String> hitIds = new HashSet<>().     for (SearchHit hit : hits.getHits()) {         hitIds.add(hit.getId()).     }     assertThat(hitIds, containsInAnyOrder(ids)). }
