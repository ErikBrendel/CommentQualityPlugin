commented;modifiers;parameterAmount;loc;comment;code
false;protected;7;11;;@Override protected InternalTDigestPercentiles createTestInstance(String name, List<PipelineAggregator> pipelineAggregators, Map<String, Object> metaData, boolean keyed, DocValueFormat format, double[] percents, double[] values) {     final TDigestState state = new TDigestState(100).     Arrays.stream(values).forEach(state::add).     assertEquals(state.centroidCount(), values.length).     return new InternalTDigestPercentiles(name, percents, state, keyed, format, pipelineAggregators, metaData). }
false;protected;2;17;;@Override protected void assertReduced(InternalTDigestPercentiles reduced, List<InternalTDigestPercentiles> inputs) {     final TDigestState expectedState = new TDigestState(reduced.state.compression()).     long totalCount = 0.     for (InternalTDigestPercentiles input : inputs) {         assertArrayEquals(reduced.keys, input.keys, 0d).         expectedState.add(input.state).         totalCount += input.state.size().     }     assertEquals(totalCount, reduced.state.size()).     if (totalCount > 0) {         assertEquals(expectedState.quantile(0), reduced.state.quantile(0), 0d).         assertEquals(expectedState.quantile(1), reduced.state.quantile(1), 0d).     } }
false;protected;0;4;;@Override protected Writeable.Reader<InternalTDigestPercentiles> instanceReader() {     return InternalTDigestPercentiles::new. }
false;protected;0;4;;@Override protected Class<? extends ParsedPercentiles> implementationClass() {     return ParsedTDigestPercentiles.class. }
false;protected;1;42;;@Override protected InternalTDigestPercentiles mutateInstance(InternalTDigestPercentiles instance) {     String name = instance.getName().     double[] percents = instance.keys.     TDigestState state = instance.state.     boolean keyed = instance.keyed.     DocValueFormat formatter = instance.formatter().     List<PipelineAggregator> pipelineAggregators = instance.pipelineAggregators().     Map<String, Object> metaData = instance.getMetaData().     switch(between(0, 4)) {         case 0:             name += randomAlphaOfLength(5).             break.         case 1:             percents = Arrays.copyOf(percents, percents.length + 1).             percents[percents.length - 1] = randomDouble() * 100.             Arrays.sort(percents).             break.         case 2:             TDigestState newState = new TDigestState(state.compression()).             newState.add(state).             for (int i = 0. i < between(10, 100). i++) {                 newState.add(randomDouble()).             }             state = newState.             break.         case 3:             keyed = keyed == false.             break.         case 4:             if (metaData == null) {                 metaData = new HashMap<>(1).             } else {                 metaData = new HashMap<>(instance.getMetaData()).             }             metaData.put(randomAlphaOfLength(15), randomInt()).             break.         default:             throw new AssertionError("Illegal randomisation branch").     }     return new InternalTDigestPercentiles(name, percents, state, keyed, formatter, pipelineAggregators, metaData). }
