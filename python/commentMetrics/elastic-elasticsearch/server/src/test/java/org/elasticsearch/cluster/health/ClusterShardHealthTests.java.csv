commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected ClusterShardHealth doParseInstance(XContentParser parser) throws IOException {     return ClusterShardHealth.fromXContent(parser). }
false;protected;0;4;;@Override protected ClusterShardHealth createTestInstance() {     return randomShardHealth(randomInt(1000)). }
false;static;1;4;;static ClusterShardHealth randomShardHealth(int id) {     return new ClusterShardHealth(id, randomFrom(ClusterHealthStatus.values()), randomInt(1000), randomInt(1000), randomInt(1000), randomInt(1000), randomBoolean()). }
false;protected;0;4;;@Override protected Writeable.Reader<ClusterShardHealth> instanceReader() {     return ClusterShardHealth::new. }
false;protected;0;4;;@Override protected boolean supportsUnknownFields() {     return true. }
false;protected;0;5;;@Override protected Predicate<String> getRandomFieldsExcludeFilter() {     // don't inject random fields at the root, which contains arbitrary shard ids     return ""::equals. }
false;protected;1;48;;@Override protected ClusterShardHealth mutateInstance(final ClusterShardHealth instance) {     String mutate = randomFrom("shardId", "status", "activeShards", "relocatingShards", "initializingShards", "unassignedShards", "primaryActive").     switch(mutate) {         case "shardId":             return new ClusterShardHealth(instance.getShardId() + between(1, 10), instance.getStatus(), instance.getActiveShards(), instance.getRelocatingShards(), instance.getInitializingShards(), instance.getUnassignedShards(), instance.isPrimaryActive()).         case "status":             ClusterHealthStatus status = randomFrom(Arrays.stream(ClusterHealthStatus.values()).filter(value -> !value.equals(instance.getStatus())).collect(Collectors.toList())).             return new ClusterShardHealth(instance.getShardId(), status, instance.getActiveShards(), instance.getRelocatingShards(), instance.getInitializingShards(), instance.getUnassignedShards(), instance.isPrimaryActive()).         case "activeShards":             return new ClusterShardHealth(instance.getShardId(), instance.getStatus(), instance.getActiveShards() + between(1, 10), instance.getRelocatingShards(), instance.getInitializingShards(), instance.getUnassignedShards(), instance.isPrimaryActive()).         case "relocatingShards":             return new ClusterShardHealth(instance.getShardId(), instance.getStatus(), instance.getActiveShards(), instance.getRelocatingShards() + between(1, 10), instance.getInitializingShards(), instance.getUnassignedShards(), instance.isPrimaryActive()).         case "initializingShards":             return new ClusterShardHealth(instance.getShardId(), instance.getStatus(), instance.getActiveShards(), instance.getRelocatingShards(), instance.getInitializingShards() + between(1, 10), instance.getUnassignedShards(), instance.isPrimaryActive()).         case "unassignedShards":             return new ClusterShardHealth(instance.getShardId(), instance.getStatus(), instance.getActiveShards(), instance.getRelocatingShards(), instance.getInitializingShards(), instance.getUnassignedShards() + between(1, 10), instance.isPrimaryActive()).         case "primaryActive":             return new ClusterShardHealth(instance.getShardId(), instance.getStatus(), instance.getActiveShards(), instance.getRelocatingShards(), instance.getInitializingShards(), instance.getUnassignedShards(), instance.isPrimaryActive() == false).         default:             throw new UnsupportedOperationException().     } }
