commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     return Arrays.asList(CustomDistanceScorePlugin.class). }
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> transportClientPlugins() {     return Arrays.asList(CustomDistanceScorePlugin.class). }
false;public;0;33;;public void testPlugin() throws Exception {     client().admin().indices().prepareCreate("test").addMapping("type1", jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("test").field("type", "text").endObject().startObject("num1").field("type", "date").endObject().endObject().endObject().endObject()).get().     client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForYellowStatus().get().     client().index(indexRequest("test").type("type1").id("1").source(jsonBuilder().startObject().field("test", "value").field("num1", "2013-05-26").endObject())).actionGet().     client().index(indexRequest("test").type("type1").id("2").source(jsonBuilder().startObject().field("test", "value").field("num1", "2013-05-27").endObject())).actionGet().     client().admin().indices().prepareRefresh().get().     DecayFunctionBuilder<?> gfb = new CustomDistanceScoreBuilder("num1", "2013-05-28", "+1d").     ActionFuture<SearchResponse> response = client().search(searchRequest().searchType(SearchType.QUERY_THEN_FETCH).source(searchSource().explain(false).query(functionScoreQuery(termQuery("test", "value"), gfb)))).     SearchResponse sr = response.actionGet().     ElasticsearchAssertions.assertNoFailures(sr).     SearchHits sh = sr.getHits().     assertThat(sh.getHits().length, equalTo(2)).     assertThat(sh.getAt(0).getId(), equalTo("1")).     assertThat(sh.getAt(1).getId(), equalTo("2")). }
false;public;0;5;;@Override public List<ScoreFunctionSpec<?>> getScoreFunctions() {     return singletonList(new ScoreFunctionSpec<>(CustomDistanceScoreBuilder.NAME, CustomDistanceScoreBuilder::new, CustomDistanceScoreBuilder.PARSER)). }
false;public;0;4;;@Override public String getName() {     return NAME. }
false;public;0;4;;@Override public DecayFunction getDecayFunction() {     return decayFunction. }
false;public;2;5;;@Override public double evaluate(double value, double scale) {     return value. }
false;public;3;4;;@Override public Explanation explainFunction(String distanceString, double distanceVal, double scale) {     return Explanation.match((float) distanceVal, "" + distanceVal). }
false;public;2;4;;@Override public double processScale(double userGivenScale, double userGivenValue) {     return userGivenScale. }
