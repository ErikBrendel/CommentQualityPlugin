commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected GetSettingsResponse createBlankInstance() {     return new GetSettingsResponse(). }
false;protected;0;40;;@Override protected GetSettingsResponse createTestInstance() {     HashMap<String, Settings> indexToSettings = new HashMap<>().     HashMap<String, Settings> indexToDefaultSettings = new HashMap<>().     IndexScopedSettings indexScopedSettings = IndexScopedSettings.DEFAULT_SCOPED_SETTINGS.     Set<String> indexNames = new HashSet<String>().     int numIndices = randomIntBetween(1, 5).     for (int x = 0. x < numIndices. x++) {         String indexName = randomAlphaOfLength(5).         indexNames.add(indexName).     }     for (String indexName : indexNames) {         Settings.Builder builder = Settings.builder().         builder.put(RandomCreateIndexGenerator.randomIndexSettings()).         /*             We must ensure that *something* is in the settings response as we optimize away empty settings             blocks in x content responses              */         builder.put("index.refresh_interval", "1s").         indexToSettings.put(indexName, builder.build()).     }     ImmutableOpenMap<String, Settings> immutableIndexToSettings = ImmutableOpenMap.<String, Settings>builder().putAll(indexToSettings).build().     if (randomBoolean()) {         for (String indexName : indexToSettings.keySet()) {             Settings defaultSettings = indexScopedSettings.diff(indexToSettings.get(indexName), Settings.EMPTY).             indexToDefaultSettings.put(indexName, defaultSettings).         }     }     ImmutableOpenMap<String, Settings> immutableIndexToDefaultSettings = ImmutableOpenMap.<String, Settings>builder().putAll(indexToDefaultSettings).build().     return new GetSettingsResponse(immutableIndexToSettings, immutableIndexToDefaultSettings). }
false;protected;1;4;;@Override protected GetSettingsResponse doParseInstance(XContentParser parser) throws IOException {     return GetSettingsResponse.fromXContent(parser). }
false;protected;0;5;;@Override protected Predicate<String> getRandomFieldsExcludeFilter() {     // we do not want to add new fields at the root (index-level), or inside settings blocks     return f -> f.equals("") || f.contains(".settings") || f.contains(".defaults"). }
false;private,static;0;14;;private static GetSettingsResponse getExpectedTest622Response() {     /* This is a fairly direct copy of the code used to generate the base64'd response above -- with the caveat that the constructor     has been modified so that the code compiles on this version of elasticsearch      */     HashMap<String, Settings> indexToSettings = new HashMap<>().     Settings.Builder builder = Settings.builder().     builder.put(SETTING_NUMBER_OF_SHARDS, 2).     builder.put(SETTING_NUMBER_OF_REPLICAS, 1).     indexToSettings.put("index_name", builder.build()).     GetSettingsResponse response = new GetSettingsResponse(ImmutableOpenMap.<String, Settings>builder().putAll(indexToSettings).build(), ImmutableOpenMap.of()).     return response. }
false;private,static;0;10;;private static GetSettingsResponse getResponseWithNewFields() {     HashMap<String, Settings> indexToDefaultSettings = new HashMap<>().     Settings.Builder builder = Settings.builder().     builder.put(INDEX_REFRESH_INTERVAL_SETTING.getKey(), "1s").     indexToDefaultSettings.put("index_name", builder.build()).     ImmutableOpenMap<String, Settings> defaultsMap = ImmutableOpenMap.<String, Settings>builder().putAll(indexToDefaultSettings).build().     return new GetSettingsResponse(getExpectedTest622Response().getIndexToSettings(), defaultsMap). }
false;public;0;8;;public void testCanDecode622Response() throws IOException {     StreamInput si = StreamInput.wrap(Base64.getDecoder().decode(TEST_6_2_2_RESPONSE_BYTES)).     si.setVersion(Version.V_6_2_2).     GetSettingsResponse response = new GetSettingsResponse().     response.readFrom(si).     Assert.assertEquals(TEST_6_2_2_RESPONSE_INSTANCE, response). }
false;public;0;10;;public void testCanOutput622Response() throws IOException {     GetSettingsResponse responseWithExtraFields = getResponseWithNewFields().     BytesStreamOutput bso = new BytesStreamOutput().     bso.setVersion(Version.V_6_2_2).     responseWithExtraFields.writeTo(bso).     String base64OfResponse = Base64.getEncoder().encodeToString(BytesReference.toBytes(bso.bytes())).     Assert.assertEquals(TEST_6_2_2_RESPONSE_BYTES, base64OfResponse). }
