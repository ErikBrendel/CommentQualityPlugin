commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;public void testBasics() {     TermsSliceQuery query1 = new TermsSliceQuery("field1", 1, 10).     TermsSliceQuery query2 = new TermsSliceQuery("field1", 1, 10).     TermsSliceQuery query3 = new TermsSliceQuery("field2", 1, 10).     TermsSliceQuery query4 = new TermsSliceQuery("field1", 2, 10).     QueryUtils.check(query1).     QueryUtils.checkEqual(query1, query2).     QueryUtils.checkUnequal(query1, query3).     QueryUtils.checkUnequal(query1, query4). }
false;public;1;3;;@Override public void setScorer(Scorable scorer) throws IOException { }
false;public;1;7;;@Override public void collect(int doc) throws IOException {     Document d = context.reader().document(doc, Collections.singleton("uuid")).     String uuid = d.get("uuid").     assertThat(keys.contains(uuid), equalTo(true)).     keys.remove(uuid). }
false;public;1;16;;@Override public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {     return new LeafCollector() {          @Override         public void setScorer(Scorable scorer) throws IOException {         }          @Override         public void collect(int doc) throws IOException {             Document d = context.reader().document(doc, Collections.singleton("uuid")).             String uuid = d.get("uuid").             assertThat(keys.contains(uuid), equalTo(true)).             keys.remove(uuid).         }     }. }
false;public;0;4;;@Override public ScoreMode scoreMode() {     return ScoreMode.COMPLETE_NO_SCORES. }
false;public;0;54;;public void testSearch() throws Exception {     final int numDocs = randomIntBetween(100, 200).     final Directory dir = newDirectory().     final RandomIndexWriter w = new RandomIndexWriter(random(), dir, new KeywordAnalyzer()).     int max = randomIntBetween(2, 10).     int[] sliceCounters = new int[max].     Set<String> keys = new HashSet<>().     for (int i = 0. i < numDocs. ++i) {         Document doc = new Document().         String uuid = UUIDs.base64UUID().         BytesRef br = new BytesRef(uuid).         int hashCode = StringHelper.murmurhash3_x86_32(br, TermsSliceQuery.SEED).         int id = Math.floorMod(hashCode, max).         sliceCounters[id]++.         doc.add(new StringField("uuid", uuid, Field.Store.YES)).         w.addDocument(doc).         keys.add(uuid).     }     final IndexReader reader = w.getReader().     final IndexSearcher searcher = newSearcher(reader).     for (int id = 0. id < max. id++) {         TermsSliceQuery query1 = new TermsSliceQuery("uuid", id, max).         assertThat(searcher.count(query1), equalTo(sliceCounters[id])).         searcher.search(query1, new Collector() {              @Override             public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {                 return new LeafCollector() {                      @Override                     public void setScorer(Scorable scorer) throws IOException {                     }                      @Override                     public void collect(int doc) throws IOException {                         Document d = context.reader().document(doc, Collections.singleton("uuid")).                         String uuid = d.get("uuid").                         assertThat(keys.contains(uuid), equalTo(true)).                         keys.remove(uuid).                     }                 }.             }              @Override             public ScoreMode scoreMode() {                 return ScoreMode.COMPLETE_NO_SCORES.             }         }).     }     assertThat(keys.size(), equalTo(0)).     w.close().     reader.close().     dir.close(). }
