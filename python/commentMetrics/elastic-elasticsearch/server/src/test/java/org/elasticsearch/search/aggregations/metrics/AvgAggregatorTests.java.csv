commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;public void testNoDocs() throws IOException {     testCase(new MatchAllDocsQuery(), iw -> {     // Intentionally not writing any docs     }, avg -> {         assertEquals(Double.NaN, avg.getValue(), 0).         assertFalse(AggregationInspectionHelper.hasValue(avg)).     }). }
false;public;0;9;;public void testNoMatchingField() throws IOException {     testCase(new MatchAllDocsQuery(), iw -> {         iw.addDocument(singleton(new SortedNumericDocValuesField("wrong_number", 7))).         iw.addDocument(singleton(new SortedNumericDocValuesField("wrong_number", 3))).     }, avg -> {         assertEquals(Double.NaN, avg.getValue(), 0).         assertFalse(AggregationInspectionHelper.hasValue(avg)).     }). }
false;public;0;10;;public void testSomeMatchesSortedNumericDocValues() throws IOException {     testCase(new DocValuesFieldExistsQuery("number"), iw -> {         iw.addDocument(singleton(new SortedNumericDocValuesField("number", 7))).         iw.addDocument(singleton(new SortedNumericDocValuesField("number", 2))).         iw.addDocument(singleton(new SortedNumericDocValuesField("number", 3))).     }, avg -> {         assertEquals(4, avg.getValue(), 0).         assertTrue(AggregationInspectionHelper.hasValue(avg)).     }). }
false;public;0;10;;public void testSomeMatchesNumericDocValues() throws IOException {     testCase(new DocValuesFieldExistsQuery("number"), iw -> {         iw.addDocument(singleton(new NumericDocValuesField("number", 7))).         iw.addDocument(singleton(new NumericDocValuesField("number", 2))).         iw.addDocument(singleton(new NumericDocValuesField("number", 3))).     }, avg -> {         assertEquals(4, avg.getValue(), 0).         assertTrue(AggregationInspectionHelper.hasValue(avg)).     }). }
false;public;0;10;;public void testQueryFiltering() throws IOException {     testCase(IntPoint.newRangeQuery("number", 0, 3), iw -> {         iw.addDocument(Arrays.asList(new IntPoint("number", 7), new SortedNumericDocValuesField("number", 7))).         iw.addDocument(Arrays.asList(new IntPoint("number", 1), new SortedNumericDocValuesField("number", 2))).         iw.addDocument(Arrays.asList(new IntPoint("number", 3), new SortedNumericDocValuesField("number", 3))).     }, avg -> {         assertEquals(2.5, avg.getValue(), 0).         assertTrue(AggregationInspectionHelper.hasValue(avg)).     }). }
false;public;0;10;;public void testQueryFiltersAll() throws IOException {     testCase(IntPoint.newRangeQuery("number", -1, 0), iw -> {         iw.addDocument(Arrays.asList(new IntPoint("number", 7), new SortedNumericDocValuesField("number", 7))).         iw.addDocument(Arrays.asList(new IntPoint("number", 1), new SortedNumericDocValuesField("number", 2))).         iw.addDocument(Arrays.asList(new IntPoint("number", 3), new SortedNumericDocValuesField("number", 7))).     }, avg -> {         assertEquals(Double.NaN, avg.getValue(), 0).         assertFalse(AggregationInspectionHelper.hasValue(avg)).     }). }
false;public;0;30;;public void testSummationAccuracy() throws IOException {     // Summing up a normal array and expect an accurate value     double[] values = new double[] { 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.9, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7 }.     verifyAvgOfDoubles(values, 0.9, 0d).     // Summing up an array which contains NaN and infinities and expect a result same as naive summation     int n = randomIntBetween(5, 10).     values = new double[n].     double sum = 0.     for (int i = 0. i < n. i++) {         values[i] = frequently() ? randomFrom(Double.NaN, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY) : randomDoubleBetween(Double.MIN_VALUE, Double.MAX_VALUE, true).         sum += values[i].     }     verifyAvgOfDoubles(values, sum / n, 1e-10).     // Summing up some big double values and expect infinity result     n = randomIntBetween(5, 10).     double[] largeValues = new double[n].     for (int i = 0. i < n. i++) {         largeValues[i] = Double.MAX_VALUE.     }     verifyAvgOfDoubles(largeValues, Double.POSITIVE_INFINITY, 0d).     for (int i = 0. i < n. i++) {         largeValues[i] = -Double.MAX_VALUE.     }     verifyAvgOfDoubles(largeValues, Double.NEGATIVE_INFINITY, 0d). }
false;private;3;11;;private void verifyAvgOfDoubles(double[] values, double expected, double delta) throws IOException {     testCase(new MatchAllDocsQuery(), iw -> {         for (double value : values) {             iw.addDocument(singleton(new NumericDocValuesField("number", NumericUtils.doubleToSortableLong(value)))).         }     }, avg -> assertEquals(expected, avg.getValue(), delta), NumberFieldMapper.NumberType.DOUBLE). }
false;private;3;5;;private void testCase(Query query, CheckedConsumer<RandomIndexWriter, IOException> buildIndex, Consumer<InternalAvg> verify) throws IOException {     testCase(query, buildIndex, verify, NumberFieldMapper.NumberType.LONG). }
false;private;4;25;;private void testCase(Query query, CheckedConsumer<RandomIndexWriter, IOException> buildIndex, Consumer<InternalAvg> verify, NumberFieldMapper.NumberType fieldNumberType) throws IOException {     Directory directory = newDirectory().     RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory).     buildIndex.accept(indexWriter).     indexWriter.close().     IndexReader indexReader = DirectoryReader.open(directory).     IndexSearcher indexSearcher = newSearcher(indexReader, true, true).     AvgAggregationBuilder aggregationBuilder = new AvgAggregationBuilder("_name").field("number").     MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(fieldNumberType).     fieldType.setName("number").     AvgAggregator aggregator = createAggregator(aggregationBuilder, indexSearcher, fieldType).     aggregator.preCollection().     indexSearcher.search(query, aggregator).     aggregator.postCollection().     verify.accept((InternalAvg) aggregator.buildAggregation(0L)).     indexReader.close().     directory.close(). }
