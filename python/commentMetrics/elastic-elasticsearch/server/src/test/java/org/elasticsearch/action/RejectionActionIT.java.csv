commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;12;;@Override protected Settings nodeSettings(int nodeOrdinal) {     return Settings.builder().put(super.nodeSettings(nodeOrdinal)).put("thread_pool.search.size", 1).put("thread_pool.search.queue_size", 1).put("thread_pool.write.size", 1).put("thread_pool.write.queue_size", 1).put("thread_pool.get.size", 1).put("thread_pool.get.queue_size", 1).build(). }
false;public;1;5;;@Override public void onResponse(SearchResponse searchResponse) {     responses.add(searchResponse).     latch.countDown(). }
false;public;1;5;;@Override public void onFailure(Exception e) {     responses.add(e).     latch.countDown(). }
false;public;0;53;;public void testSimulatedSearchRejectionLoad() throws Throwable {     for (int i = 0. i < 10. i++) {         client().prepareIndex("test", "type", Integer.toString(i)).setSource("field", "1").get().     }     int numberOfAsyncOps = randomIntBetween(200, 700).     final CountDownLatch latch = new CountDownLatch(numberOfAsyncOps).     final CopyOnWriteArrayList<Object> responses = new CopyOnWriteArrayList<>().     for (int i = 0. i < numberOfAsyncOps. i++) {         client().prepareSearch("test").setSearchType(SearchType.QUERY_THEN_FETCH).setQuery(QueryBuilders.matchQuery("field", "1")).execute(new ActionListener<SearchResponse>() {              @Override             public void onResponse(SearchResponse searchResponse) {                 responses.add(searchResponse).                 latch.countDown().             }              @Override             public void onFailure(Exception e) {                 responses.add(e).                 latch.countDown().             }         }).     }     latch.await().     // validate all responses     for (Object response : responses) {         if (response instanceof SearchResponse) {             SearchResponse searchResponse = (SearchResponse) response.             for (ShardSearchFailure failure : searchResponse.getShardFailures()) {                 assertTrue("got unexpected reason..." + failure.reason(), failure.reason().toLowerCase(Locale.ENGLISH).contains("rejected")).             }         } else {             Exception t = (Exception) response.             Throwable unwrap = ExceptionsHelper.unwrapCause(t).             if (unwrap instanceof SearchPhaseExecutionException) {                 SearchPhaseExecutionException e = (SearchPhaseExecutionException) unwrap.                 for (ShardSearchFailure failure : e.shardFailures()) {                     assertTrue("got unexpected reason..." + failure.reason(), failure.reason().toLowerCase(Locale.ENGLISH).contains("rejected")).                 }             } else if ((unwrap instanceof EsRejectedExecutionException) == false) {                 throw new AssertionError("unexpected failure", (Throwable) response).             }         }     }     assertThat(responses.size(), equalTo(numberOfAsyncOps)). }
