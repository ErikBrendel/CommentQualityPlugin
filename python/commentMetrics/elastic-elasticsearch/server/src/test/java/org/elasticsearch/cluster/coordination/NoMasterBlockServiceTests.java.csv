commented;modifiers;parameterAmount;loc;comment;code
false;private;1;4;;private void createService(Settings settings) {     clusterSettings = new ClusterSettings(settings, BUILT_IN_CLUSTER_SETTINGS).     noMasterBlockService = new NoMasterBlockService(settings, clusterSettings). }
false;private;0;4;;private void assertDeprecatedWarningEmitted() {     assertWarnings("[discovery.zen.no_master_block] setting was deprecated in Elasticsearch and will be removed in a future release! " + "See the breaking changes documentation for the next major version."). }
false;public;0;4;;public void testBlocksWritesByDefault() {     createService(Settings.EMPTY).     assertThat(noMasterBlockService.getNoMasterBlock(), sameInstance(NO_MASTER_BLOCK_WRITES)). }
false;public;0;5;;public void testIgnoresLegacySettingBlockingWrites() {     createService(Settings.builder().put(LEGACY_NO_MASTER_BLOCK_SETTING.getKey(), "write").build()).     assertThat(noMasterBlockService.getNoMasterBlock(), sameInstance(NO_MASTER_BLOCK_WRITES)).     assertDeprecatedWarningEmitted(). }
false;public;0;4;;public void testBlocksWritesIfConfiguredBySetting() {     createService(Settings.builder().put(NO_MASTER_BLOCK_SETTING.getKey(), "write").build()).     assertThat(noMasterBlockService.getNoMasterBlock(), sameInstance(NO_MASTER_BLOCK_WRITES)). }
false;public;0;5;;public void testIgnoresLegacySettingBlockingAll() {     createService(Settings.builder().put(LEGACY_NO_MASTER_BLOCK_SETTING.getKey(), "all").build()).     assertThat(noMasterBlockService.getNoMasterBlock(), sameInstance(NO_MASTER_BLOCK_WRITES)).     assertDeprecatedWarningEmitted(). }
false;public;0;4;;public void testBlocksAllIfConfiguredBySetting() {     createService(Settings.builder().put(NO_MASTER_BLOCK_SETTING.getKey(), "all").build()).     assertThat(noMasterBlockService.getNoMasterBlock(), sameInstance(NO_MASTER_BLOCK_ALL)). }
false;public;0;4;;public void testRejectsInvalidSetting() {     expectThrows(IllegalArgumentException.class, () -> createService(Settings.builder().put(NO_MASTER_BLOCK_SETTING.getKey(), "unknown").build())). }
false;public;0;5;;public void testRejectsInvalidLegacySetting() {     expectThrows(IllegalArgumentException.class, () -> createService(Settings.builder().put(LEGACY_NO_MASTER_BLOCK_SETTING.getKey(), "unknown").build())).     assertDeprecatedWarningEmitted(). }
false;public;0;7;;public void testSettingCanBeUpdated() {     createService(Settings.builder().put(NO_MASTER_BLOCK_SETTING.getKey(), "all").build()).     assertThat(noMasterBlockService.getNoMasterBlock(), sameInstance(NO_MASTER_BLOCK_ALL)).     clusterSettings.applySettings(Settings.builder().put(NO_MASTER_BLOCK_SETTING.getKey(), "write").build()).     assertThat(noMasterBlockService.getNoMasterBlock(), sameInstance(NO_MASTER_BLOCK_WRITES)). }
false;public;0;8;;public void testIgnoresUpdatesToLegacySetting() {     createService(Settings.builder().put(NO_MASTER_BLOCK_SETTING.getKey(), "all").build()).     assertThat(noMasterBlockService.getNoMasterBlock(), sameInstance(NO_MASTER_BLOCK_ALL)).     clusterSettings.applySettings(Settings.builder().put(LEGACY_NO_MASTER_BLOCK_SETTING.getKey(), "write").build()).     assertThat(noMasterBlockService.getNoMasterBlock(), sameInstance(NO_MASTER_BLOCK_ALL)).     assertDeprecatedWarningEmitted(). }
