commented;modifiers;parameterAmount;loc;comment;code
false;public;0;48;;public void testSerialization() throws Exception {     Map<String, AliasFilter> indicesAndFilters = new HashMap<>().     Set<DiscoveryNode> nodes = new HashSet<>().     int numShards = randomIntBetween(1, 10).     ClusterSearchShardsGroup[] clusterSearchShardsGroups = new ClusterSearchShardsGroup[numShards].     for (int i = 0. i < numShards. i++) {         String index = randomAlphaOfLengthBetween(3, 10).         ShardId shardId = new ShardId(index, randomAlphaOfLength(12), i).         String nodeId = randomAlphaOfLength(10).         ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, nodeId, randomBoolean(), ShardRoutingState.STARTED).         clusterSearchShardsGroups[i] = new ClusterSearchShardsGroup(shardId, new ShardRouting[] { shardRouting }).         DiscoveryNode node = new DiscoveryNode(shardRouting.currentNodeId(), new TransportAddress(TransportAddress.META_ADDRESS, randomInt(0xFFFF)), VersionUtils.randomVersion(random())).         nodes.add(node).         AliasFilter aliasFilter.         if (randomBoolean()) {             aliasFilter = new AliasFilter(RandomQueryBuilder.createQuery(random()), "alias-" + index).         } else {             aliasFilter = new AliasFilter(null, Strings.EMPTY_ARRAY).         }         indicesAndFilters.put(index, aliasFilter).     }     ClusterSearchShardsResponse clusterSearchShardsResponse = new ClusterSearchShardsResponse(clusterSearchShardsGroups, nodes.toArray(new DiscoveryNode[nodes.size()]), indicesAndFilters).     SearchModule searchModule = new SearchModule(Settings.EMPTY, false, Collections.emptyList()).     List<NamedWriteableRegistry.Entry> entries = new ArrayList<>().     entries.addAll(searchModule.getNamedWriteables()).     NamedWriteableRegistry namedWriteableRegistry = new NamedWriteableRegistry(entries).     Version version = VersionUtils.randomVersionBetween(random(), Version.V_6_0_0, Version.CURRENT).     try (BytesStreamOutput out = new BytesStreamOutput()) {         out.setVersion(version).         clusterSearchShardsResponse.writeTo(out).         try (StreamInput in = new NamedWriteableAwareStreamInput(out.bytes().streamInput(), namedWriteableRegistry)) {             in.setVersion(version).             ClusterSearchShardsResponse deserialized = new ClusterSearchShardsResponse(in).             assertArrayEquals(clusterSearchShardsResponse.getNodes(), deserialized.getNodes()).             assertEquals(clusterSearchShardsResponse.getGroups().length, deserialized.getGroups().length).             for (int i = 0. i < clusterSearchShardsResponse.getGroups().length. i++) {                 ClusterSearchShardsGroup clusterSearchShardsGroup = clusterSearchShardsResponse.getGroups()[i].                 ClusterSearchShardsGroup deserializedGroup = deserialized.getGroups()[i].                 assertEquals(clusterSearchShardsGroup.getShardId(), deserializedGroup.getShardId()).                 assertArrayEquals(clusterSearchShardsGroup.getShards(), deserializedGroup.getShards()).             }             assertEquals(clusterSearchShardsResponse.getIndicesAndFilters(), deserialized.getIndicesAndFilters()).         }     } }
