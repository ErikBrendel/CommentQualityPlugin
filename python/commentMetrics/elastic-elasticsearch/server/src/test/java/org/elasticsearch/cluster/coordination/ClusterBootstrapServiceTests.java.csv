commented;modifiers;parameterAmount;loc;comment;code
false;protected;4;4;;@Override protected void onSendRequest(long requestId, String action, TransportRequest request, DiscoveryNode node) {     throw new AssertionError("unexpected " + action). }
false;public;0;18;;@Before public void createServices() {     localNode = newDiscoveryNode("local").     otherNode1 = newDiscoveryNode("other1").     otherNode2 = newDiscoveryNode("other2").     deterministicTaskQueue = new DeterministicTaskQueue(builder().put(NODE_NAME_SETTING.getKey(), "node").build(), random()).     final MockTransport transport = new MockTransport() {          @Override         protected void onSendRequest(long requestId, String action, TransportRequest request, DiscoveryNode node) {             throw new AssertionError("unexpected " + action).         }     }.     transportService = transport.createTransportService(Settings.EMPTY, deterministicTaskQueue.getThreadPool(), TransportService.NOOP_TRANSPORT_INTERCEPTOR, boundTransportAddress -> localNode, null, emptySet()). }
false;private;1;4;;private DiscoveryNode newDiscoveryNode(String nodeName) {     return new DiscoveryNode(nodeName, randomAlphaOfLength(10), buildNewFakeTransportAddress(), emptyMap(), singleton(Role.MASTER), Version.CURRENT). }
false;public;0;32;;public void testBootstrapsAutomaticallyWithDefaultConfiguration() {     final Settings.Builder settings = Settings.builder().     final long timeout.     if (randomBoolean()) {         timeout = UNCONFIGURED_BOOTSTRAP_TIMEOUT_SETTING.get(Settings.EMPTY).millis().     } else {         timeout = randomLongBetween(1, 10000).         settings.put(UNCONFIGURED_BOOTSTRAP_TIMEOUT_SETTING.getKey(), timeout + "ms").     }     final AtomicReference<Supplier<Iterable<DiscoveryNode>>> discoveredNodesSupplier = new AtomicReference<>(() -> {         throw new AssertionError("should not be called yet").     }).     final AtomicBoolean bootstrapped = new AtomicBoolean().     ClusterBootstrapService clusterBootstrapService = new ClusterBootstrapService(settings.build(), transportService, () -> discoveredNodesSupplier.get().get(), () -> false, vc -> {         assertTrue(bootstrapped.compareAndSet(false, true)).         assertThat(vc.getNodeIds(), equalTo(Stream.of(localNode, otherNode1, otherNode2).map(DiscoveryNode::getId).collect(Collectors.toSet()))).         assertThat(deterministicTaskQueue.getCurrentTimeMillis(), greaterThanOrEqualTo(timeout)).     }).     deterministicTaskQueue.scheduleAt(timeout - 1, () -> discoveredNodesSupplier.set(() -> Stream.of(localNode, otherNode1, otherNode2).collect(Collectors.toSet()))).     transportService.start().     clusterBootstrapService.scheduleUnconfiguredBootstrap().     deterministicTaskQueue.runAllTasksInTimeOrder().     assertTrue(bootstrapped.get()). }
false;public;0;3;;public void testDoesNothingByDefaultIfHostsProviderConfigured() {     testDoesNothingWithSettings(builder().putList(DISCOVERY_SEED_PROVIDERS_SETTING.getKey())). }
false;public;0;3;;public void testDoesNothingByDefaultIfSeedHostsConfigured() {     testDoesNothingWithSettings(builder().putList(DISCOVERY_SEED_HOSTS_SETTING.getKey())). }
false;public;0;3;;public void testDoesNothingByDefaultIfMasterNodesConfigured() {     testDoesNothingWithSettings(builder().putList(INITIAL_MASTER_NODES_SETTING.getKey())). }
false;public;0;5;;public void testDoesNothingByDefaultOnMasterIneligibleNodes() {     localNode = new DiscoveryNode("local", randomAlphaOfLength(10), buildNewFakeTransportAddress(), emptyMap(), emptySet(), Version.CURRENT).     testDoesNothingWithSettings(Settings.builder()). }
false;private;1;10;;private void testDoesNothingWithSettings(Settings.Builder builder) {     ClusterBootstrapService clusterBootstrapService = new ClusterBootstrapService(builder.build(), transportService, () -> {         throw new AssertionError("should not be called").     }, () -> false, vc -> {         throw new AssertionError("should not be called").     }).     transportService.start().     clusterBootstrapService.scheduleUnconfiguredBootstrap().     deterministicTaskQueue.runAllTasks(). }
false;public;0;11;;public void testDoesNothingByDefaultIfZen1NodesDiscovered() {     final DiscoveryNode zen1Node = new DiscoveryNode("zen1", buildNewFakeTransportAddress(), singletonMap("zen1", "true"), singleton(Role.MASTER), Version.CURRENT).     ClusterBootstrapService clusterBootstrapService = new ClusterBootstrapService(Settings.EMPTY, transportService, () -> Stream.of(localNode, zen1Node).collect(Collectors.toSet()), () -> false, vc -> {         throw new AssertionError("should not be called").     }).     transportService.start().     clusterBootstrapService.scheduleUnconfiguredBootstrap().     deterministicTaskQueue.runAllTasks(). }
false;public;0;12;;public void testThrowsExceptionOnDuplicates() {     final IllegalArgumentException illegalArgumentException = expectThrows(IllegalArgumentException.class, () -> {         new ClusterBootstrapService(builder().putList(INITIAL_MASTER_NODES_SETTING.getKey(), "duplicate-requirement", "duplicate-requirement").build(), transportService, Collections::emptyList, () -> false, vc -> {             throw new AssertionError("should not be called").         }).     }).     assertThat(illegalArgumentException.getMessage(), containsString(INITIAL_MASTER_NODES_SETTING.getKey())).     assertThat(illegalArgumentException.getMessage(), containsString("duplicate-requirement")). }
false;public;0;21;;public void testBootstrapsOnDiscoveryOfAllRequiredNodes() {     final AtomicBoolean bootstrapped = new AtomicBoolean().     ClusterBootstrapService clusterBootstrapService = new ClusterBootstrapService(Settings.builder().putList(INITIAL_MASTER_NODES_SETTING.getKey(), localNode.getName(), otherNode1.getName(), otherNode2.getName()).build(), transportService, () -> Stream.of(otherNode1, otherNode2).collect(Collectors.toList()), () -> false, vc -> {         assertTrue(bootstrapped.compareAndSet(false, true)).         assertThat(vc.getNodeIds(), containsInAnyOrder(localNode.getId(), otherNode1.getId(), otherNode2.getId())).         assertThat(vc.getNodeIds(), not(hasItem(containsString("placeholder")))).     }).     transportService.start().     clusterBootstrapService.onFoundPeersUpdated().     deterministicTaskQueue.runAllTasks().     assertTrue(bootstrapped.get()).     bootstrapped.set(false).     clusterBootstrapService.onFoundPeersUpdated().     deterministicTaskQueue.runAllTasks().     // should only bootstrap once     assertFalse(bootstrapped.get()). }
false;public;0;26;;public void testBootstrapsOnDiscoveryOfTwoOfThreeRequiredNodes() {     final AtomicBoolean bootstrapped = new AtomicBoolean().     ClusterBootstrapService clusterBootstrapService = new ClusterBootstrapService(Settings.builder().putList(INITIAL_MASTER_NODES_SETTING.getKey(), localNode.getName(), otherNode1.getName(), otherNode2.getName()).build(), transportService, () -> singletonList(otherNode1), () -> false, vc -> {         assertTrue(bootstrapped.compareAndSet(false, true)).         assertThat(vc.getNodeIds(), hasSize(3)).         assertThat(vc.getNodeIds(), hasItem(localNode.getId())).         assertThat(vc.getNodeIds(), hasItem(otherNode1.getId())).         assertThat(vc.getNodeIds(), hasItem(allOf(startsWith(BOOTSTRAP_PLACEHOLDER_PREFIX), containsString(otherNode2.getName())))).         assertTrue(vc.hasQuorum(Stream.of(localNode, otherNode1).map(DiscoveryNode::getId).collect(Collectors.toList()))).         assertFalse(vc.hasQuorum(singletonList(localNode.getId()))).         assertFalse(vc.hasQuorum(singletonList(otherNode1.getId()))).     }).     transportService.start().     clusterBootstrapService.onFoundPeersUpdated().     deterministicTaskQueue.runAllTasks().     assertTrue(bootstrapped.get()).     bootstrapped.set(false).     clusterBootstrapService.onFoundPeersUpdated().     deterministicTaskQueue.runAllTasks().     // should only bootstrap once     assertFalse(bootstrapped.get()). }
false;public;0;35;;public void testBootstrapsOnDiscoveryOfThreeOfFiveRequiredNodes() {     final AtomicBoolean bootstrapped = new AtomicBoolean().     ClusterBootstrapService clusterBootstrapService = new ClusterBootstrapService(Settings.builder().putList(INITIAL_MASTER_NODES_SETTING.getKey(), localNode.getName(), otherNode1.getName(), otherNode2.getName(), "missing-node-1", "missing-node-2").build(), transportService, () -> Stream.of(otherNode1, otherNode2).collect(Collectors.toList()), () -> false, vc -> {         assertTrue(bootstrapped.compareAndSet(false, true)).         assertThat(vc.getNodeIds(), hasSize(5)).         assertThat(vc.getNodeIds(), hasItem(localNode.getId())).         assertThat(vc.getNodeIds(), hasItem(otherNode1.getId())).         assertThat(vc.getNodeIds(), hasItem(otherNode2.getId())).         final List<String> placeholders = vc.getNodeIds().stream().filter(ClusterBootstrapService::isBootstrapPlaceholder).collect(Collectors.toList()).         assertThat(placeholders.size(), equalTo(2)).         assertNotEquals(placeholders.get(0), placeholders.get(1)).         assertThat(placeholders, hasItem(containsString("missing-node-1"))).         assertThat(placeholders, hasItem(containsString("missing-node-2"))).         assertTrue(vc.hasQuorum(Stream.of(localNode, otherNode1, otherNode2).map(DiscoveryNode::getId).collect(Collectors.toList()))).         assertFalse(vc.hasQuorum(Stream.of(localNode, otherNode1).map(DiscoveryNode::getId).collect(Collectors.toList()))).         assertFalse(vc.hasQuorum(Stream.of(localNode, otherNode1).map(DiscoveryNode::getId).collect(Collectors.toList()))).     }).     transportService.start().     clusterBootstrapService.onFoundPeersUpdated().     deterministicTaskQueue.runAllTasks().     assertTrue(bootstrapped.get()).     bootstrapped.set(false).     clusterBootstrapService.onFoundPeersUpdated().     deterministicTaskQueue.runAllTasks().     // should only bootstrap once     assertFalse(bootstrapped.get()). }
false;public;0;11;;public void testDoesNotBootstrapIfNoNodesDiscovered() {     ClusterBootstrapService clusterBootstrapService = new ClusterBootstrapService(Settings.builder().putList(INITIAL_MASTER_NODES_SETTING.getKey(), localNode.getName(), otherNode1.getName(), otherNode2.getName()).build(), transportService, Collections::emptyList, () -> true, vc -> {         throw new AssertionError("should not be called").     }).     transportService.start().     clusterBootstrapService.onFoundPeersUpdated().     deterministicTaskQueue.runAllTasks(). }
false;public;0;12;;public void testDoesNotBootstrapIfTwoOfFiveNodesDiscovered() {     ClusterBootstrapService clusterBootstrapService = new ClusterBootstrapService(Settings.builder().putList(INITIAL_MASTER_NODES_SETTING.getKey(), localNode.getName(), otherNode1.getName(), otherNode2.getName(), "not-a-node-1", "not-a-node-2").build(), transportService, () -> Stream.of(otherNode1).collect(Collectors.toList()), () -> false, vc -> {         throw new AssertionError("should not be called").     }).     transportService.start().     clusterBootstrapService.onFoundPeersUpdated().     deterministicTaskQueue.runAllTasks(). }
false;public;0;12;;public void testDoesNotBootstrapIfThreeOfSixNodesDiscovered() {     ClusterBootstrapService clusterBootstrapService = new ClusterBootstrapService(Settings.builder().putList(INITIAL_MASTER_NODES_SETTING.getKey(), localNode.getName(), otherNode1.getName(), otherNode2.getName(), "not-a-node-1", "not-a-node-2", "not-a-node-3").build(), transportService, () -> Stream.of(otherNode1, otherNode2).collect(Collectors.toList()), () -> false, vc -> {         throw new AssertionError("should not be called").     }).     transportService.start().     clusterBootstrapService.onFoundPeersUpdated().     deterministicTaskQueue.runAllTasks(). }
false;public;0;11;;public void testDoesNotBootstrapIfAlreadyBootstrapped() {     ClusterBootstrapService clusterBootstrapService = new ClusterBootstrapService(Settings.builder().putList(INITIAL_MASTER_NODES_SETTING.getKey(), localNode.getName(), otherNode1.getName(), otherNode2.getName()).build(), transportService, () -> Stream.of(otherNode1, otherNode2).collect(Collectors.toList()), () -> true, vc -> {         throw new AssertionError("should not be called").     }).     transportService.start().     clusterBootstrapService.onFoundPeersUpdated().     deterministicTaskQueue.runAllTasks(). }
false;public;0;13;;public void testDoesNotBootstrapsOnNonMasterNode() {     localNode = new DiscoveryNode("local", randomAlphaOfLength(10), buildNewFakeTransportAddress(), emptyMap(), emptySet(), Version.CURRENT).     ClusterBootstrapService clusterBootstrapService = new ClusterBootstrapService(Settings.builder().putList(INITIAL_MASTER_NODES_SETTING.getKey(), localNode.getName(), otherNode1.getName(), otherNode2.getName()).build(), transportService, () -> Stream.of(localNode, otherNode1, otherNode2).collect(Collectors.toList()), () -> false, vc -> {         throw new AssertionError("should not be called").     }).     transportService.start().     clusterBootstrapService.onFoundPeersUpdated().     deterministicTaskQueue.runAllTasks(). }
false;public;0;11;;public void testDoesNotBootstrapsIfLocalNodeNotInInitialMasterNodes() {     ClusterBootstrapService clusterBootstrapService = new ClusterBootstrapService(Settings.builder().putList(INITIAL_MASTER_NODES_SETTING.getKey(), otherNode1.getName(), otherNode2.getName()).build(), transportService, () -> Stream.of(localNode, otherNode1, otherNode2).collect(Collectors.toList()), () -> false, vc -> {         throw new AssertionError("should not be called").     }).     transportService.start().     clusterBootstrapService.onFoundPeersUpdated().     deterministicTaskQueue.runAllTasks(). }
false;public;0;11;;public void testDoesNotBootstrapsIfNotConfigured() {     ClusterBootstrapService clusterBootstrapService = new ClusterBootstrapService(Settings.builder().putList(INITIAL_MASTER_NODES_SETTING.getKey()).build(), transportService, () -> Stream.of(localNode, otherNode1, otherNode2).collect(Collectors.toList()), () -> false, vc -> {         throw new AssertionError("should not be called").     }).     transportService.start().     clusterBootstrapService.scheduleUnconfiguredBootstrap().     clusterBootstrapService.onFoundPeersUpdated().     deterministicTaskQueue.runAllTasks(). }
false;public;0;14;;public void testDoesNotBootstrapsIfZen1NodesDiscovered() {     final DiscoveryNode zen1Node = new DiscoveryNode("zen1", buildNewFakeTransportAddress(), singletonMap("zen1", "true"), singleton(Role.MASTER), Version.CURRENT).     ClusterBootstrapService clusterBootstrapService = new ClusterBootstrapService(Settings.builder().putList(INITIAL_MASTER_NODES_SETTING.getKey(), localNode.getName(), otherNode1.getName(), otherNode2.getName()).build(), transportService, () -> Stream.of(otherNode1, otherNode2, zen1Node).collect(Collectors.toList()), () -> false, vc -> {         throw new AssertionError("should not be called").     }).     transportService.start().     clusterBootstrapService.onFoundPeersUpdated().     deterministicTaskQueue.runAllTasks(). }
false;public;0;18;;public void testRetriesBootstrappingOnException() {     final AtomicLong bootstrappingAttempts = new AtomicLong().     ClusterBootstrapService clusterBootstrapService = new ClusterBootstrapService(Settings.builder().putList(INITIAL_MASTER_NODES_SETTING.getKey(), localNode.getName(), otherNode1.getName(), otherNode2.getName()).build(), transportService, () -> Stream.of(otherNode1, otherNode2).collect(Collectors.toList()), () -> false, vc -> {         bootstrappingAttempts.incrementAndGet().         if (bootstrappingAttempts.get() < 5L) {             throw new ElasticsearchException("test").         }     }).     transportService.start().     clusterBootstrapService.onFoundPeersUpdated().     deterministicTaskQueue.runAllTasks().     assertThat(bootstrappingAttempts.get(), greaterThanOrEqualTo(5L)).     assertThat(deterministicTaskQueue.getCurrentTimeMillis(), greaterThanOrEqualTo(40000L)). }
false;public;0;17;;public void testCancelsBootstrapIfRequirementMatchesMultipleNodes() {     AtomicReference<Iterable<DiscoveryNode>> discoveredNodes = new AtomicReference<>(Stream.of(otherNode1, otherNode2).collect(Collectors.toList())).     ClusterBootstrapService clusterBootstrapService = new ClusterBootstrapService(Settings.builder().putList(INITIAL_MASTER_NODES_SETTING.getKey(), localNode.getAddress().getAddress()).build(), transportService, discoveredNodes::get, () -> false, vc -> {         throw new AssertionError("should not be called").     }).     transportService.start().     clusterBootstrapService.onFoundPeersUpdated().     deterministicTaskQueue.runAllTasks().     discoveredNodes.set(emptyList()).     clusterBootstrapService.onFoundPeersUpdated().     deterministicTaskQueue.runAllTasks(). }
false;public;0;22;;public void testCancelsBootstrapIfNodeMatchesMultipleRequirements() {     AtomicReference<Iterable<DiscoveryNode>> discoveredNodes = new AtomicReference<>(Stream.of(otherNode1, otherNode2).collect(Collectors.toList())).     ClusterBootstrapService clusterBootstrapService = new ClusterBootstrapService(Settings.builder().putList(INITIAL_MASTER_NODES_SETTING.getKey(), otherNode1.getAddress().toString(), otherNode1.getName()).build(), transportService, discoveredNodes::get, () -> false, vc -> {         throw new AssertionError("should not be called").     }).     transportService.start().     clusterBootstrapService.onFoundPeersUpdated().     deterministicTaskQueue.runAllTasks().     discoveredNodes.set(Stream.of(new DiscoveryNode(otherNode1.getName(), randomAlphaOfLength(10), buildNewFakeTransportAddress(), emptyMap(), singleton(Role.MASTER), Version.CURRENT), new DiscoveryNode("yet-another-node", randomAlphaOfLength(10), otherNode1.getAddress(), emptyMap(), singleton(Role.MASTER), Version.CURRENT)).collect(Collectors.toList())).     clusterBootstrapService.onFoundPeersUpdated().     deterministicTaskQueue.runAllTasks(). }
false;public;0;11;;public void testMatchesOnNodeName() {     final AtomicBoolean bootstrapped = new AtomicBoolean().     ClusterBootstrapService clusterBootstrapService = new ClusterBootstrapService(Settings.builder().putList(INITIAL_MASTER_NODES_SETTING.getKey(), localNode.getName()).build(), transportService, Collections::emptyList, () -> false, vc -> assertTrue(bootstrapped.compareAndSet(false, true))).     transportService.start().     clusterBootstrapService.onFoundPeersUpdated().     deterministicTaskQueue.runAllTasks().     assertTrue(bootstrapped.get()). }
false;public;0;11;;public void testMatchesOnNodeAddress() {     final AtomicBoolean bootstrapped = new AtomicBoolean().     ClusterBootstrapService clusterBootstrapService = new ClusterBootstrapService(Settings.builder().putList(INITIAL_MASTER_NODES_SETTING.getKey(), localNode.getAddress().toString()).build(), transportService, Collections::emptyList, () -> false, vc -> assertTrue(bootstrapped.compareAndSet(false, true))).     transportService.start().     clusterBootstrapService.onFoundPeersUpdated().     deterministicTaskQueue.runAllTasks().     assertTrue(bootstrapped.get()). }
false;public;0;11;;public void testMatchesOnNodeHostAddress() {     final AtomicBoolean bootstrapped = new AtomicBoolean().     ClusterBootstrapService clusterBootstrapService = new ClusterBootstrapService(Settings.builder().putList(INITIAL_MASTER_NODES_SETTING.getKey(), localNode.getAddress().getAddress()).build(), transportService, Collections::emptyList, () -> false, vc -> assertTrue(bootstrapped.compareAndSet(false, true))).     transportService.start().     clusterBootstrapService.onFoundPeersUpdated().     deterministicTaskQueue.runAllTasks().     assertTrue(bootstrapped.get()). }
false;public;0;11;;public void testDoesNotJustMatchEverything() {     ClusterBootstrapService clusterBootstrapService = new ClusterBootstrapService(Settings.builder().putList(INITIAL_MASTER_NODES_SETTING.getKey(), randomAlphaOfLength(10)).build(), transportService, Collections::emptyList, () -> false, vc -> {         throw new AssertionError("should not be called").     }).     transportService.start().     clusterBootstrapService.onFoundPeersUpdated().     deterministicTaskQueue.runAllTasks(). }
false;public;0;16;;public void testDoesNotIncludeExtraNodes() {     final DiscoveryNode extraNode = newDiscoveryNode("extra-node").     final AtomicBoolean bootstrapped = new AtomicBoolean().     ClusterBootstrapService clusterBootstrapService = new ClusterBootstrapService(Settings.builder().putList(INITIAL_MASTER_NODES_SETTING.getKey(), localNode.getName(), otherNode1.getName(), otherNode2.getName()).build(), transportService, () -> Stream.of(otherNode1, otherNode2, extraNode).collect(Collectors.toList()), () -> false, vc -> {         assertTrue(bootstrapped.compareAndSet(false, true)).         assertThat(vc.getNodeIds(), not(hasItem(extraNode.getId()))).     }).     transportService.start().     clusterBootstrapService.onFoundPeersUpdated().     deterministicTaskQueue.runAllTasks().     assertTrue(bootstrapped.get()). }
