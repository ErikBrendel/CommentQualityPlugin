# id;timestamp;commentText;codeText;commentWords;codeWords
TcpTransportTests -> public void testParseV4DefaultRange() throws Exception;1524684173;Test ipv4 host with a default port range works;public void testParseV4DefaultRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1", "1234-1235", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())___        assertEquals("127.0.0.1", addresses[1].getAddress())__        assertEquals(1235, addresses[1].getPort())__    };test,ipv4,host,with,a,default,port,range,works;public,void,test,parse,v4default,range,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,1234,1235,integer,assert,equals,2,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port,assert,equals,127,0,0,1,addresses,1,get,address,assert,equals,1235,addresses,1,get,port
TcpTransportTests -> public void testParseV4DefaultRange() throws Exception;1527878678;Test ipv4 host with a default port range works;public void testParseV4DefaultRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1", "1234-1235", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())___        assertEquals("127.0.0.1", addresses[1].getAddress())__        assertEquals(1235, addresses[1].getPort())__    };test,ipv4,host,with,a,default,port,range,works;public,void,test,parse,v4default,range,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,1234,1235,integer,assert,equals,2,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port,assert,equals,127,0,0,1,addresses,1,get,address,assert,equals,1235,addresses,1,get,port
TcpTransportTests -> public void testParseV4DefaultRange() throws Exception;1528762805;Test ipv4 host with a default port range works;public void testParseV4DefaultRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1", "1234-1235", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())___        assertEquals("127.0.0.1", addresses[1].getAddress())__        assertEquals(1235, addresses[1].getPort())__    };test,ipv4,host,with,a,default,port,range,works;public,void,test,parse,v4default,range,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,1234,1235,integer,assert,equals,2,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port,assert,equals,127,0,0,1,addresses,1,get,address,assert,equals,1235,addresses,1,get,port
TcpTransportTests -> public void testParseV4DefaultRange() throws Exception;1529600205;Test ipv4 host with a default port range works;public void testParseV4DefaultRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1", "1234-1235", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())___        assertEquals("127.0.0.1", addresses[1].getAddress())__        assertEquals(1235, addresses[1].getPort())__    };test,ipv4,host,with,a,default,port,range,works;public,void,test,parse,v4default,range,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,1234,1235,integer,assert,equals,2,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port,assert,equals,127,0,0,1,addresses,1,get,address,assert,equals,1235,addresses,1,get,port
TcpTransportTests -> public void testParseV4DefaultRange() throws Exception;1534203100;Test ipv4 host with a default port range works;public void testParseV4DefaultRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1", "1234-1235", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())___        assertEquals("127.0.0.1", addresses[1].getAddress())__        assertEquals(1235, addresses[1].getPort())__    };test,ipv4,host,with,a,default,port,range,works;public,void,test,parse,v4default,range,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,1234,1235,integer,assert,equals,2,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port,assert,equals,127,0,0,1,addresses,1,get,address,assert,equals,1235,addresses,1,get,port
TcpTransportTests -> public void testParseV4DefaultRange() throws Exception;1534362961;Test ipv4 host with a default port range works;public void testParseV4DefaultRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1", "1234-1235", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())___        assertEquals("127.0.0.1", addresses[1].getAddress())__        assertEquals(1235, addresses[1].getPort())__    };test,ipv4,host,with,a,default,port,range,works;public,void,test,parse,v4default,range,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,1234,1235,integer,assert,equals,2,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port,assert,equals,127,0,0,1,addresses,1,get,address,assert,equals,1235,addresses,1,get,port
TcpTransportTests -> public void testParseV4DefaultRange() throws Exception;1534848846;Test ipv4 host with a default port range works;public void testParseV4DefaultRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1", "1234-1235", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())___        assertEquals("127.0.0.1", addresses[1].getAddress())__        assertEquals(1235, addresses[1].getPort())__    };test,ipv4,host,with,a,default,port,range,works;public,void,test,parse,v4default,range,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,1234,1235,integer,assert,equals,2,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port,assert,equals,127,0,0,1,addresses,1,get,address,assert,equals,1235,addresses,1,get,port
TcpTransportTests -> public void testParseV4DefaultRange() throws Exception;1535139672;Test ipv4 host with a default port range works;public void testParseV4DefaultRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1", "1234-1235", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())___        assertEquals("127.0.0.1", addresses[1].getAddress())__        assertEquals(1235, addresses[1].getPort())__    };test,ipv4,host,with,a,default,port,range,works;public,void,test,parse,v4default,range,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,1234,1235,integer,assert,equals,2,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port,assert,equals,127,0,0,1,addresses,1,get,address,assert,equals,1235,addresses,1,get,port
TcpTransportTests -> public void testParseV4DefaultRange() throws Exception;1537300661;Test ipv4 host with a default port range works;public void testParseV4DefaultRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1", "1234-1235", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())___        assertEquals("127.0.0.1", addresses[1].getAddress())__        assertEquals(1235, addresses[1].getPort())__    };test,ipv4,host,with,a,default,port,range,works;public,void,test,parse,v4default,range,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,1234,1235,integer,assert,equals,2,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port,assert,equals,127,0,0,1,addresses,1,get,address,assert,equals,1235,addresses,1,get,port
TcpTransportTests -> public void testParseV4DefaultRange() throws Exception;1538067637;Test ipv4 host with a default port range works;public void testParseV4DefaultRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1", "1234-1235", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())___        assertEquals("127.0.0.1", addresses[1].getAddress())__        assertEquals(1235, addresses[1].getPort())__    };test,ipv4,host,with,a,default,port,range,works;public,void,test,parse,v4default,range,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,1234,1235,integer,assert,equals,2,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port,assert,equals,127,0,0,1,addresses,1,get,address,assert,equals,1235,addresses,1,get,port
TcpTransportTests -> public void testParseV4DefaultRange() throws Exception;1540486836;Test ipv4 host with a default port range works;public void testParseV4DefaultRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1", "1234-1235", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())___        assertEquals("127.0.0.1", addresses[1].getAddress())__        assertEquals(1235, addresses[1].getPort())__    };test,ipv4,host,with,a,default,port,range,works;public,void,test,parse,v4default,range,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,1234,1235,integer,assert,equals,2,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port,assert,equals,127,0,0,1,addresses,1,get,address,assert,equals,1235,addresses,1,get,port
TcpTransportTests -> public void testParseV4DefaultRange() throws Exception;1541552300;Test ipv4 host with a default port range works;public void testParseV4DefaultRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1", "1234-1235", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())___        assertEquals("127.0.0.1", addresses[1].getAddress())__        assertEquals(1235, addresses[1].getPort())__    };test,ipv4,host,with,a,default,port,range,works;public,void,test,parse,v4default,range,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,1234,1235,integer,assert,equals,2,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port,assert,equals,127,0,0,1,addresses,1,get,address,assert,equals,1235,addresses,1,get,port
TcpTransportTests -> public void testParseV4DefaultRange() throws Exception;1541698679;Test ipv4 host with a default port range works;public void testParseV4DefaultRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1", "1234-1235", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())___        assertEquals("127.0.0.1", addresses[1].getAddress())__        assertEquals(1235, addresses[1].getPort())__    };test,ipv4,host,with,a,default,port,range,works;public,void,test,parse,v4default,range,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,1234,1235,integer,assert,equals,2,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port,assert,equals,127,0,0,1,addresses,1,get,address,assert,equals,1235,addresses,1,get,port
TcpTransportTests -> public void testParseV4DefaultRange() throws Exception;1541725488;Test ipv4 host with a default port range works;public void testParseV4DefaultRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1", "1234-1235", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())___        assertEquals("127.0.0.1", addresses[1].getAddress())__        assertEquals(1235, addresses[1].getPort())__    };test,ipv4,host,with,a,default,port,range,works;public,void,test,parse,v4default,range,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,1234,1235,integer,assert,equals,2,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port,assert,equals,127,0,0,1,addresses,1,get,address,assert,equals,1235,addresses,1,get,port
TcpTransportTests -> public void testParseV4DefaultRange() throws Exception;1543334894;Test ipv4 host with a default port range works;public void testParseV4DefaultRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1", "1234-1235", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())___        assertEquals("127.0.0.1", addresses[1].getAddress())__        assertEquals(1235, addresses[1].getPort())__    };test,ipv4,host,with,a,default,port,range,works;public,void,test,parse,v4default,range,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,1234,1235,integer,assert,equals,2,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port,assert,equals,127,0,0,1,addresses,1,get,address,assert,equals,1235,addresses,1,get,port
TcpTransportTests -> public void testParseV4DefaultRange() throws Exception;1543506953;Test ipv4 host with a default port range works;public void testParseV4DefaultRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1", "1234-1235", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())___        assertEquals("127.0.0.1", addresses[1].getAddress())__        assertEquals(1235, addresses[1].getPort())__    };test,ipv4,host,with,a,default,port,range,works;public,void,test,parse,v4default,range,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,1234,1235,integer,assert,equals,2,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port,assert,equals,127,0,0,1,addresses,1,get,address,assert,equals,1235,addresses,1,get,port
TcpTransportTests -> public void testParseV4DefaultRange() throws Exception;1543602642;Test ipv4 host with a default port range works;public void testParseV4DefaultRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1", "1234-1235", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())___        assertEquals("127.0.0.1", addresses[1].getAddress())__        assertEquals(1235, addresses[1].getPort())__    };test,ipv4,host,with,a,default,port,range,works;public,void,test,parse,v4default,range,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,1234,1235,integer,assert,equals,2,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port,assert,equals,127,0,0,1,addresses,1,get,address,assert,equals,1235,addresses,1,get,port
TcpTransportTests -> public void testParseV4DefaultRange() throws Exception;1544554541;Test ipv4 host with a default port range works;public void testParseV4DefaultRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1", "1234-1235", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())___        assertEquals("127.0.0.1", addresses[1].getAddress())__        assertEquals(1235, addresses[1].getPort())__    };test,ipv4,host,with,a,default,port,range,works;public,void,test,parse,v4default,range,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,1234,1235,integer,assert,equals,2,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port,assert,equals,127,0,0,1,addresses,1,get,address,assert,equals,1235,addresses,1,get,port
TcpTransportTests -> public void testParseV4DefaultRange() throws Exception;1544810347;Test ipv4 host with a default port range works;public void testParseV4DefaultRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1", "1234-1235", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())___        assertEquals("127.0.0.1", addresses[1].getAddress())__        assertEquals(1235, addresses[1].getPort())__    };test,ipv4,host,with,a,default,port,range,works;public,void,test,parse,v4default,range,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,1234,1235,integer,assert,equals,2,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port,assert,equals,127,0,0,1,addresses,1,get,address,assert,equals,1235,addresses,1,get,port
TcpTransportTests -> public void testParseV4DefaultRange() throws Exception;1545412440;Test ipv4 host with a default port range works;public void testParseV4DefaultRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1", "1234-1235", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())___        assertEquals("127.0.0.1", addresses[1].getAddress())__        assertEquals(1235, addresses[1].getPort())__    };test,ipv4,host,with,a,default,port,range,works;public,void,test,parse,v4default,range,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,1234,1235,integer,assert,equals,2,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port,assert,equals,127,0,0,1,addresses,1,get,address,assert,equals,1235,addresses,1,get,port
TcpTransportTests -> public void testParseV4DefaultRange() throws Exception;1548105258;Test ipv4 host with a default port range works;public void testParseV4DefaultRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1", "1234-1235", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())___        assertEquals("127.0.0.1", addresses[1].getAddress())__        assertEquals(1235, addresses[1].getPort())__    };test,ipv4,host,with,a,default,port,range,works;public,void,test,parse,v4default,range,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,1234,1235,integer,assert,equals,2,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port,assert,equals,127,0,0,1,addresses,1,get,address,assert,equals,1235,addresses,1,get,port
TcpTransportTests -> public void testParseV4WithPort() throws Exception;1524684173;Test ipv4 host with port works;public void testParseV4WithPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1:2345", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())__    };test,ipv4,host,with,port,works;public,void,test,parse,v4with,port,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,2345,1234,integer,assert,equals,1,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port
TcpTransportTests -> public void testParseV4WithPort() throws Exception;1527878678;Test ipv4 host with port works;public void testParseV4WithPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1:2345", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())__    };test,ipv4,host,with,port,works;public,void,test,parse,v4with,port,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,2345,1234,integer,assert,equals,1,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port
TcpTransportTests -> public void testParseV4WithPort() throws Exception;1528762805;Test ipv4 host with port works;public void testParseV4WithPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1:2345", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())__    };test,ipv4,host,with,port,works;public,void,test,parse,v4with,port,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,2345,1234,integer,assert,equals,1,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port
TcpTransportTests -> public void testParseV4WithPort() throws Exception;1529600205;Test ipv4 host with port works;public void testParseV4WithPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1:2345", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())__    };test,ipv4,host,with,port,works;public,void,test,parse,v4with,port,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,2345,1234,integer,assert,equals,1,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port
TcpTransportTests -> public void testParseV4WithPort() throws Exception;1534203100;Test ipv4 host with port works;public void testParseV4WithPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1:2345", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())__    };test,ipv4,host,with,port,works;public,void,test,parse,v4with,port,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,2345,1234,integer,assert,equals,1,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port
TcpTransportTests -> public void testParseV4WithPort() throws Exception;1534362961;Test ipv4 host with port works;public void testParseV4WithPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1:2345", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())__    };test,ipv4,host,with,port,works;public,void,test,parse,v4with,port,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,2345,1234,integer,assert,equals,1,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port
TcpTransportTests -> public void testParseV4WithPort() throws Exception;1534848846;Test ipv4 host with port works;public void testParseV4WithPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1:2345", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())__    };test,ipv4,host,with,port,works;public,void,test,parse,v4with,port,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,2345,1234,integer,assert,equals,1,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port
TcpTransportTests -> public void testParseV4WithPort() throws Exception;1535139672;Test ipv4 host with port works;public void testParseV4WithPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1:2345", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())__    };test,ipv4,host,with,port,works;public,void,test,parse,v4with,port,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,2345,1234,integer,assert,equals,1,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port
TcpTransportTests -> public void testParseV4WithPort() throws Exception;1537300661;Test ipv4 host with port works;public void testParseV4WithPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1:2345", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())__    };test,ipv4,host,with,port,works;public,void,test,parse,v4with,port,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,2345,1234,integer,assert,equals,1,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port
TcpTransportTests -> public void testParseV4WithPort() throws Exception;1538067637;Test ipv4 host with port works;public void testParseV4WithPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1:2345", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())__    };test,ipv4,host,with,port,works;public,void,test,parse,v4with,port,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,2345,1234,integer,assert,equals,1,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port
TcpTransportTests -> public void testParseV4WithPort() throws Exception;1540486836;Test ipv4 host with port works;public void testParseV4WithPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1:2345", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())__    };test,ipv4,host,with,port,works;public,void,test,parse,v4with,port,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,2345,1234,integer,assert,equals,1,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port
TcpTransportTests -> public void testParseV4WithPort() throws Exception;1541552300;Test ipv4 host with port works;public void testParseV4WithPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1:2345", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())__    };test,ipv4,host,with,port,works;public,void,test,parse,v4with,port,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,2345,1234,integer,assert,equals,1,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port
TcpTransportTests -> public void testParseV4WithPort() throws Exception;1541698679;Test ipv4 host with port works;public void testParseV4WithPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1:2345", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())__    };test,ipv4,host,with,port,works;public,void,test,parse,v4with,port,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,2345,1234,integer,assert,equals,1,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port
TcpTransportTests -> public void testParseV4WithPort() throws Exception;1541725488;Test ipv4 host with port works;public void testParseV4WithPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1:2345", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())__    };test,ipv4,host,with,port,works;public,void,test,parse,v4with,port,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,2345,1234,integer,assert,equals,1,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port
TcpTransportTests -> public void testParseV4WithPort() throws Exception;1543334894;Test ipv4 host with port works;public void testParseV4WithPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1:2345", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())__    };test,ipv4,host,with,port,works;public,void,test,parse,v4with,port,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,2345,1234,integer,assert,equals,1,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port
TcpTransportTests -> public void testParseV4WithPort() throws Exception;1543506953;Test ipv4 host with port works;public void testParseV4WithPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1:2345", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())__    };test,ipv4,host,with,port,works;public,void,test,parse,v4with,port,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,2345,1234,integer,assert,equals,1,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port
TcpTransportTests -> public void testParseV4WithPort() throws Exception;1543602642;Test ipv4 host with port works;public void testParseV4WithPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1:2345", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())__    };test,ipv4,host,with,port,works;public,void,test,parse,v4with,port,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,2345,1234,integer,assert,equals,1,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port
TcpTransportTests -> public void testParseV4WithPort() throws Exception;1544554541;Test ipv4 host with port works;public void testParseV4WithPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1:2345", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())__    };test,ipv4,host,with,port,works;public,void,test,parse,v4with,port,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,2345,1234,integer,assert,equals,1,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port
TcpTransportTests -> public void testParseV4WithPort() throws Exception;1544810347;Test ipv4 host with port works;public void testParseV4WithPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1:2345", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())__    };test,ipv4,host,with,port,works;public,void,test,parse,v4with,port,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,2345,1234,integer,assert,equals,1,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port
TcpTransportTests -> public void testParseV4WithPort() throws Exception;1545412440;Test ipv4 host with port works;public void testParseV4WithPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1:2345", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())__    };test,ipv4,host,with,port,works;public,void,test,parse,v4with,port,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,2345,1234,integer,assert,equals,1,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port
TcpTransportTests -> public void testParseV4WithPort() throws Exception;1548105258;Test ipv4 host with port works;public void testParseV4WithPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1:2345", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())__    };test,ipv4,host,with,port,works;public,void,test,parse,v4with,port,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,2345,1234,integer,assert,equals,1,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port
TcpTransportTests -> public void testParseV6WithPort() throws Exception;1524684173;Test ipv6 host with port works;public void testParseV6WithPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:2345", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())__    };test,ipv6,host,with,port,works;public,void,test,parse,v6with,port,throws,exception,transport,address,addresses,tcp,transport,parse,1,2345,1234,integer,assert,equals,1,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port
TcpTransportTests -> public void testParseV6WithPort() throws Exception;1527878678;Test ipv6 host with port works;public void testParseV6WithPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:2345", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())__    };test,ipv6,host,with,port,works;public,void,test,parse,v6with,port,throws,exception,transport,address,addresses,tcp,transport,parse,1,2345,1234,integer,assert,equals,1,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port
TcpTransportTests -> public void testParseV6WithPort() throws Exception;1528762805;Test ipv6 host with port works;public void testParseV6WithPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:2345", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())__    };test,ipv6,host,with,port,works;public,void,test,parse,v6with,port,throws,exception,transport,address,addresses,tcp,transport,parse,1,2345,1234,integer,assert,equals,1,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port
TcpTransportTests -> public void testParseV6WithPort() throws Exception;1529600205;Test ipv6 host with port works;public void testParseV6WithPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:2345", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())__    };test,ipv6,host,with,port,works;public,void,test,parse,v6with,port,throws,exception,transport,address,addresses,tcp,transport,parse,1,2345,1234,integer,assert,equals,1,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port
TcpTransportTests -> public void testParseV6WithPort() throws Exception;1534203100;Test ipv6 host with port works;public void testParseV6WithPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:2345", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())__    };test,ipv6,host,with,port,works;public,void,test,parse,v6with,port,throws,exception,transport,address,addresses,tcp,transport,parse,1,2345,1234,integer,assert,equals,1,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port
TcpTransportTests -> public void testParseV6WithPort() throws Exception;1534362961;Test ipv6 host with port works;public void testParseV6WithPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:2345", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())__    };test,ipv6,host,with,port,works;public,void,test,parse,v6with,port,throws,exception,transport,address,addresses,tcp,transport,parse,1,2345,1234,integer,assert,equals,1,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port
TcpTransportTests -> public void testParseV6WithPort() throws Exception;1534848846;Test ipv6 host with port works;public void testParseV6WithPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:2345", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())__    };test,ipv6,host,with,port,works;public,void,test,parse,v6with,port,throws,exception,transport,address,addresses,tcp,transport,parse,1,2345,1234,integer,assert,equals,1,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port
TcpTransportTests -> public void testParseV6WithPort() throws Exception;1535139672;Test ipv6 host with port works;public void testParseV6WithPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:2345", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())__    };test,ipv6,host,with,port,works;public,void,test,parse,v6with,port,throws,exception,transport,address,addresses,tcp,transport,parse,1,2345,1234,integer,assert,equals,1,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port
TcpTransportTests -> public void testParseV6WithPort() throws Exception;1537300661;Test ipv6 host with port works;public void testParseV6WithPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:2345", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())__    };test,ipv6,host,with,port,works;public,void,test,parse,v6with,port,throws,exception,transport,address,addresses,tcp,transport,parse,1,2345,1234,integer,assert,equals,1,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port
TcpTransportTests -> public void testParseV6WithPort() throws Exception;1538067637;Test ipv6 host with port works;public void testParseV6WithPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:2345", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())__    };test,ipv6,host,with,port,works;public,void,test,parse,v6with,port,throws,exception,transport,address,addresses,tcp,transport,parse,1,2345,1234,integer,assert,equals,1,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port
TcpTransportTests -> public void testParseV6WithPort() throws Exception;1540486836;Test ipv6 host with port works;public void testParseV6WithPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:2345", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())__    };test,ipv6,host,with,port,works;public,void,test,parse,v6with,port,throws,exception,transport,address,addresses,tcp,transport,parse,1,2345,1234,integer,assert,equals,1,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port
TcpTransportTests -> public void testParseV6WithPort() throws Exception;1541552300;Test ipv6 host with port works;public void testParseV6WithPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:2345", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())__    };test,ipv6,host,with,port,works;public,void,test,parse,v6with,port,throws,exception,transport,address,addresses,tcp,transport,parse,1,2345,1234,integer,assert,equals,1,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port
TcpTransportTests -> public void testParseV6WithPort() throws Exception;1541698679;Test ipv6 host with port works;public void testParseV6WithPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:2345", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())__    };test,ipv6,host,with,port,works;public,void,test,parse,v6with,port,throws,exception,transport,address,addresses,tcp,transport,parse,1,2345,1234,integer,assert,equals,1,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port
TcpTransportTests -> public void testParseV6WithPort() throws Exception;1541725488;Test ipv6 host with port works;public void testParseV6WithPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:2345", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())__    };test,ipv6,host,with,port,works;public,void,test,parse,v6with,port,throws,exception,transport,address,addresses,tcp,transport,parse,1,2345,1234,integer,assert,equals,1,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port
TcpTransportTests -> public void testParseV6WithPort() throws Exception;1543334894;Test ipv6 host with port works;public void testParseV6WithPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:2345", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())__    };test,ipv6,host,with,port,works;public,void,test,parse,v6with,port,throws,exception,transport,address,addresses,tcp,transport,parse,1,2345,1234,integer,assert,equals,1,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port
TcpTransportTests -> public void testParseV6WithPort() throws Exception;1543506953;Test ipv6 host with port works;public void testParseV6WithPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:2345", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())__    };test,ipv6,host,with,port,works;public,void,test,parse,v6with,port,throws,exception,transport,address,addresses,tcp,transport,parse,1,2345,1234,integer,assert,equals,1,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port
TcpTransportTests -> public void testParseV6WithPort() throws Exception;1543602642;Test ipv6 host with port works;public void testParseV6WithPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:2345", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())__    };test,ipv6,host,with,port,works;public,void,test,parse,v6with,port,throws,exception,transport,address,addresses,tcp,transport,parse,1,2345,1234,integer,assert,equals,1,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port
TcpTransportTests -> public void testParseV6WithPort() throws Exception;1544554541;Test ipv6 host with port works;public void testParseV6WithPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:2345", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())__    };test,ipv6,host,with,port,works;public,void,test,parse,v6with,port,throws,exception,transport,address,addresses,tcp,transport,parse,1,2345,1234,integer,assert,equals,1,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port
TcpTransportTests -> public void testParseV6WithPort() throws Exception;1544810347;Test ipv6 host with port works;public void testParseV6WithPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:2345", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())__    };test,ipv6,host,with,port,works;public,void,test,parse,v6with,port,throws,exception,transport,address,addresses,tcp,transport,parse,1,2345,1234,integer,assert,equals,1,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port
TcpTransportTests -> public void testParseV6WithPort() throws Exception;1545412440;Test ipv6 host with port works;public void testParseV6WithPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:2345", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())__    };test,ipv6,host,with,port,works;public,void,test,parse,v6with,port,throws,exception,transport,address,addresses,tcp,transport,parse,1,2345,1234,integer,assert,equals,1,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port
TcpTransportTests -> public void testParseV6WithPort() throws Exception;1548105258;Test ipv6 host with port works;public void testParseV6WithPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:2345", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())__    };test,ipv6,host,with,port,works;public,void,test,parse,v6with,port,throws,exception,transport,address,addresses,tcp,transport,parse,1,2345,1234,integer,assert,equals,1,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port
TcpTransportTests -> public void testParseV6DefaultRange() throws Exception;1524684173;Test ipv6 host with a default port range works;public void testParseV6DefaultRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]", "1234-1235", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())___        assertEquals("::1", addresses[1].getAddress())__        assertEquals(1235, addresses[1].getPort())__    };test,ipv6,host,with,a,default,port,range,works;public,void,test,parse,v6default,range,throws,exception,transport,address,addresses,tcp,transport,parse,1,1234,1235,integer,assert,equals,2,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port,assert,equals,1,addresses,1,get,address,assert,equals,1235,addresses,1,get,port
TcpTransportTests -> public void testParseV6DefaultRange() throws Exception;1527878678;Test ipv6 host with a default port range works;public void testParseV6DefaultRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]", "1234-1235", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())___        assertEquals("::1", addresses[1].getAddress())__        assertEquals(1235, addresses[1].getPort())__    };test,ipv6,host,with,a,default,port,range,works;public,void,test,parse,v6default,range,throws,exception,transport,address,addresses,tcp,transport,parse,1,1234,1235,integer,assert,equals,2,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port,assert,equals,1,addresses,1,get,address,assert,equals,1235,addresses,1,get,port
TcpTransportTests -> public void testParseV6DefaultRange() throws Exception;1528762805;Test ipv6 host with a default port range works;public void testParseV6DefaultRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]", "1234-1235", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())___        assertEquals("::1", addresses[1].getAddress())__        assertEquals(1235, addresses[1].getPort())__    };test,ipv6,host,with,a,default,port,range,works;public,void,test,parse,v6default,range,throws,exception,transport,address,addresses,tcp,transport,parse,1,1234,1235,integer,assert,equals,2,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port,assert,equals,1,addresses,1,get,address,assert,equals,1235,addresses,1,get,port
TcpTransportTests -> public void testParseV6DefaultRange() throws Exception;1529600205;Test ipv6 host with a default port range works;public void testParseV6DefaultRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]", "1234-1235", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())___        assertEquals("::1", addresses[1].getAddress())__        assertEquals(1235, addresses[1].getPort())__    };test,ipv6,host,with,a,default,port,range,works;public,void,test,parse,v6default,range,throws,exception,transport,address,addresses,tcp,transport,parse,1,1234,1235,integer,assert,equals,2,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port,assert,equals,1,addresses,1,get,address,assert,equals,1235,addresses,1,get,port
TcpTransportTests -> public void testParseV6DefaultRange() throws Exception;1534203100;Test ipv6 host with a default port range works;public void testParseV6DefaultRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]", "1234-1235", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())___        assertEquals("::1", addresses[1].getAddress())__        assertEquals(1235, addresses[1].getPort())__    };test,ipv6,host,with,a,default,port,range,works;public,void,test,parse,v6default,range,throws,exception,transport,address,addresses,tcp,transport,parse,1,1234,1235,integer,assert,equals,2,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port,assert,equals,1,addresses,1,get,address,assert,equals,1235,addresses,1,get,port
TcpTransportTests -> public void testParseV6DefaultRange() throws Exception;1534362961;Test ipv6 host with a default port range works;public void testParseV6DefaultRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]", "1234-1235", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())___        assertEquals("::1", addresses[1].getAddress())__        assertEquals(1235, addresses[1].getPort())__    };test,ipv6,host,with,a,default,port,range,works;public,void,test,parse,v6default,range,throws,exception,transport,address,addresses,tcp,transport,parse,1,1234,1235,integer,assert,equals,2,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port,assert,equals,1,addresses,1,get,address,assert,equals,1235,addresses,1,get,port
TcpTransportTests -> public void testParseV6DefaultRange() throws Exception;1534848846;Test ipv6 host with a default port range works;public void testParseV6DefaultRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]", "1234-1235", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())___        assertEquals("::1", addresses[1].getAddress())__        assertEquals(1235, addresses[1].getPort())__    };test,ipv6,host,with,a,default,port,range,works;public,void,test,parse,v6default,range,throws,exception,transport,address,addresses,tcp,transport,parse,1,1234,1235,integer,assert,equals,2,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port,assert,equals,1,addresses,1,get,address,assert,equals,1235,addresses,1,get,port
TcpTransportTests -> public void testParseV6DefaultRange() throws Exception;1535139672;Test ipv6 host with a default port range works;public void testParseV6DefaultRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]", "1234-1235", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())___        assertEquals("::1", addresses[1].getAddress())__        assertEquals(1235, addresses[1].getPort())__    };test,ipv6,host,with,a,default,port,range,works;public,void,test,parse,v6default,range,throws,exception,transport,address,addresses,tcp,transport,parse,1,1234,1235,integer,assert,equals,2,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port,assert,equals,1,addresses,1,get,address,assert,equals,1235,addresses,1,get,port
TcpTransportTests -> public void testParseV6DefaultRange() throws Exception;1537300661;Test ipv6 host with a default port range works;public void testParseV6DefaultRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]", "1234-1235", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())___        assertEquals("::1", addresses[1].getAddress())__        assertEquals(1235, addresses[1].getPort())__    };test,ipv6,host,with,a,default,port,range,works;public,void,test,parse,v6default,range,throws,exception,transport,address,addresses,tcp,transport,parse,1,1234,1235,integer,assert,equals,2,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port,assert,equals,1,addresses,1,get,address,assert,equals,1235,addresses,1,get,port
TcpTransportTests -> public void testParseV6DefaultRange() throws Exception;1538067637;Test ipv6 host with a default port range works;public void testParseV6DefaultRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]", "1234-1235", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())___        assertEquals("::1", addresses[1].getAddress())__        assertEquals(1235, addresses[1].getPort())__    };test,ipv6,host,with,a,default,port,range,works;public,void,test,parse,v6default,range,throws,exception,transport,address,addresses,tcp,transport,parse,1,1234,1235,integer,assert,equals,2,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port,assert,equals,1,addresses,1,get,address,assert,equals,1235,addresses,1,get,port
TcpTransportTests -> public void testParseV6DefaultRange() throws Exception;1540486836;Test ipv6 host with a default port range works;public void testParseV6DefaultRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]", "1234-1235", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())___        assertEquals("::1", addresses[1].getAddress())__        assertEquals(1235, addresses[1].getPort())__    };test,ipv6,host,with,a,default,port,range,works;public,void,test,parse,v6default,range,throws,exception,transport,address,addresses,tcp,transport,parse,1,1234,1235,integer,assert,equals,2,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port,assert,equals,1,addresses,1,get,address,assert,equals,1235,addresses,1,get,port
TcpTransportTests -> public void testParseV6DefaultRange() throws Exception;1541552300;Test ipv6 host with a default port range works;public void testParseV6DefaultRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]", "1234-1235", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())___        assertEquals("::1", addresses[1].getAddress())__        assertEquals(1235, addresses[1].getPort())__    };test,ipv6,host,with,a,default,port,range,works;public,void,test,parse,v6default,range,throws,exception,transport,address,addresses,tcp,transport,parse,1,1234,1235,integer,assert,equals,2,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port,assert,equals,1,addresses,1,get,address,assert,equals,1235,addresses,1,get,port
TcpTransportTests -> public void testParseV6DefaultRange() throws Exception;1541698679;Test ipv6 host with a default port range works;public void testParseV6DefaultRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]", "1234-1235", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())___        assertEquals("::1", addresses[1].getAddress())__        assertEquals(1235, addresses[1].getPort())__    };test,ipv6,host,with,a,default,port,range,works;public,void,test,parse,v6default,range,throws,exception,transport,address,addresses,tcp,transport,parse,1,1234,1235,integer,assert,equals,2,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port,assert,equals,1,addresses,1,get,address,assert,equals,1235,addresses,1,get,port
TcpTransportTests -> public void testParseV6DefaultRange() throws Exception;1541725488;Test ipv6 host with a default port range works;public void testParseV6DefaultRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]", "1234-1235", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())___        assertEquals("::1", addresses[1].getAddress())__        assertEquals(1235, addresses[1].getPort())__    };test,ipv6,host,with,a,default,port,range,works;public,void,test,parse,v6default,range,throws,exception,transport,address,addresses,tcp,transport,parse,1,1234,1235,integer,assert,equals,2,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port,assert,equals,1,addresses,1,get,address,assert,equals,1235,addresses,1,get,port
TcpTransportTests -> public void testParseV6DefaultRange() throws Exception;1543334894;Test ipv6 host with a default port range works;public void testParseV6DefaultRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]", "1234-1235", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())___        assertEquals("::1", addresses[1].getAddress())__        assertEquals(1235, addresses[1].getPort())__    };test,ipv6,host,with,a,default,port,range,works;public,void,test,parse,v6default,range,throws,exception,transport,address,addresses,tcp,transport,parse,1,1234,1235,integer,assert,equals,2,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port,assert,equals,1,addresses,1,get,address,assert,equals,1235,addresses,1,get,port
TcpTransportTests -> public void testParseV6DefaultRange() throws Exception;1543506953;Test ipv6 host with a default port range works;public void testParseV6DefaultRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]", "1234-1235", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())___        assertEquals("::1", addresses[1].getAddress())__        assertEquals(1235, addresses[1].getPort())__    };test,ipv6,host,with,a,default,port,range,works;public,void,test,parse,v6default,range,throws,exception,transport,address,addresses,tcp,transport,parse,1,1234,1235,integer,assert,equals,2,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port,assert,equals,1,addresses,1,get,address,assert,equals,1235,addresses,1,get,port
TcpTransportTests -> public void testParseV6DefaultRange() throws Exception;1543602642;Test ipv6 host with a default port range works;public void testParseV6DefaultRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]", "1234-1235", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())___        assertEquals("::1", addresses[1].getAddress())__        assertEquals(1235, addresses[1].getPort())__    };test,ipv6,host,with,a,default,port,range,works;public,void,test,parse,v6default,range,throws,exception,transport,address,addresses,tcp,transport,parse,1,1234,1235,integer,assert,equals,2,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port,assert,equals,1,addresses,1,get,address,assert,equals,1235,addresses,1,get,port
TcpTransportTests -> public void testParseV6DefaultRange() throws Exception;1544554541;Test ipv6 host with a default port range works;public void testParseV6DefaultRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]", "1234-1235", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())___        assertEquals("::1", addresses[1].getAddress())__        assertEquals(1235, addresses[1].getPort())__    };test,ipv6,host,with,a,default,port,range,works;public,void,test,parse,v6default,range,throws,exception,transport,address,addresses,tcp,transport,parse,1,1234,1235,integer,assert,equals,2,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port,assert,equals,1,addresses,1,get,address,assert,equals,1235,addresses,1,get,port
TcpTransportTests -> public void testParseV6DefaultRange() throws Exception;1544810347;Test ipv6 host with a default port range works;public void testParseV6DefaultRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]", "1234-1235", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())___        assertEquals("::1", addresses[1].getAddress())__        assertEquals(1235, addresses[1].getPort())__    };test,ipv6,host,with,a,default,port,range,works;public,void,test,parse,v6default,range,throws,exception,transport,address,addresses,tcp,transport,parse,1,1234,1235,integer,assert,equals,2,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port,assert,equals,1,addresses,1,get,address,assert,equals,1235,addresses,1,get,port
TcpTransportTests -> public void testParseV6DefaultRange() throws Exception;1545412440;Test ipv6 host with a default port range works;public void testParseV6DefaultRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]", "1234-1235", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())___        assertEquals("::1", addresses[1].getAddress())__        assertEquals(1235, addresses[1].getPort())__    };test,ipv6,host,with,a,default,port,range,works;public,void,test,parse,v6default,range,throws,exception,transport,address,addresses,tcp,transport,parse,1,1234,1235,integer,assert,equals,2,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port,assert,equals,1,addresses,1,get,address,assert,equals,1235,addresses,1,get,port
TcpTransportTests -> public void testParseV6DefaultRange() throws Exception;1548105258;Test ipv6 host with a default port range works;public void testParseV6DefaultRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]", "1234-1235", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())___        assertEquals("::1", addresses[1].getAddress())__        assertEquals(1235, addresses[1].getPort())__    };test,ipv6,host,with,a,default,port,range,works;public,void,test,parse,v6default,range,throws,exception,transport,address,addresses,tcp,transport,parse,1,1234,1235,integer,assert,equals,2,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port,assert,equals,1,addresses,1,get,address,assert,equals,1235,addresses,1,get,port
TcpTransportTests -> public void testParseV6WithPortRange() throws Exception;1524684173;Test ipv6 host with port range works;public void testParseV6WithPortRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:2345-2346", "1234", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())___        assertEquals("::1", addresses[1].getAddress())__        assertEquals(2346, addresses[1].getPort())__    };test,ipv6,host,with,port,range,works;public,void,test,parse,v6with,port,range,throws,exception,transport,address,addresses,tcp,transport,parse,1,2345,2346,1234,integer,assert,equals,2,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port,assert,equals,1,addresses,1,get,address,assert,equals,2346,addresses,1,get,port
TcpTransportTests -> public void testParseV6WithPortRange() throws Exception;1527878678;Test ipv6 host with port range works;public void testParseV6WithPortRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:2345-2346", "1234", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())___        assertEquals("::1", addresses[1].getAddress())__        assertEquals(2346, addresses[1].getPort())__    };test,ipv6,host,with,port,range,works;public,void,test,parse,v6with,port,range,throws,exception,transport,address,addresses,tcp,transport,parse,1,2345,2346,1234,integer,assert,equals,2,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port,assert,equals,1,addresses,1,get,address,assert,equals,2346,addresses,1,get,port
TcpTransportTests -> public void testParseV6WithPortRange() throws Exception;1528762805;Test ipv6 host with port range works;public void testParseV6WithPortRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:2345-2346", "1234", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())___        assertEquals("::1", addresses[1].getAddress())__        assertEquals(2346, addresses[1].getPort())__    };test,ipv6,host,with,port,range,works;public,void,test,parse,v6with,port,range,throws,exception,transport,address,addresses,tcp,transport,parse,1,2345,2346,1234,integer,assert,equals,2,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port,assert,equals,1,addresses,1,get,address,assert,equals,2346,addresses,1,get,port
TcpTransportTests -> public void testParseV6WithPortRange() throws Exception;1529600205;Test ipv6 host with port range works;public void testParseV6WithPortRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:2345-2346", "1234", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())___        assertEquals("::1", addresses[1].getAddress())__        assertEquals(2346, addresses[1].getPort())__    };test,ipv6,host,with,port,range,works;public,void,test,parse,v6with,port,range,throws,exception,transport,address,addresses,tcp,transport,parse,1,2345,2346,1234,integer,assert,equals,2,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port,assert,equals,1,addresses,1,get,address,assert,equals,2346,addresses,1,get,port
TcpTransportTests -> public void testParseV6WithPortRange() throws Exception;1534203100;Test ipv6 host with port range works;public void testParseV6WithPortRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:2345-2346", "1234", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())___        assertEquals("::1", addresses[1].getAddress())__        assertEquals(2346, addresses[1].getPort())__    };test,ipv6,host,with,port,range,works;public,void,test,parse,v6with,port,range,throws,exception,transport,address,addresses,tcp,transport,parse,1,2345,2346,1234,integer,assert,equals,2,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port,assert,equals,1,addresses,1,get,address,assert,equals,2346,addresses,1,get,port
TcpTransportTests -> public void testParseV6WithPortRange() throws Exception;1534362961;Test ipv6 host with port range works;public void testParseV6WithPortRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:2345-2346", "1234", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())___        assertEquals("::1", addresses[1].getAddress())__        assertEquals(2346, addresses[1].getPort())__    };test,ipv6,host,with,port,range,works;public,void,test,parse,v6with,port,range,throws,exception,transport,address,addresses,tcp,transport,parse,1,2345,2346,1234,integer,assert,equals,2,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port,assert,equals,1,addresses,1,get,address,assert,equals,2346,addresses,1,get,port
TcpTransportTests -> public void testParseV6WithPortRange() throws Exception;1534848846;Test ipv6 host with port range works;public void testParseV6WithPortRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:2345-2346", "1234", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())___        assertEquals("::1", addresses[1].getAddress())__        assertEquals(2346, addresses[1].getPort())__    };test,ipv6,host,with,port,range,works;public,void,test,parse,v6with,port,range,throws,exception,transport,address,addresses,tcp,transport,parse,1,2345,2346,1234,integer,assert,equals,2,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port,assert,equals,1,addresses,1,get,address,assert,equals,2346,addresses,1,get,port
TcpTransportTests -> public void testParseV6WithPortRange() throws Exception;1535139672;Test ipv6 host with port range works;public void testParseV6WithPortRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:2345-2346", "1234", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())___        assertEquals("::1", addresses[1].getAddress())__        assertEquals(2346, addresses[1].getPort())__    };test,ipv6,host,with,port,range,works;public,void,test,parse,v6with,port,range,throws,exception,transport,address,addresses,tcp,transport,parse,1,2345,2346,1234,integer,assert,equals,2,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port,assert,equals,1,addresses,1,get,address,assert,equals,2346,addresses,1,get,port
TcpTransportTests -> public void testParseV6WithPortRange() throws Exception;1537300661;Test ipv6 host with port range works;public void testParseV6WithPortRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:2345-2346", "1234", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())___        assertEquals("::1", addresses[1].getAddress())__        assertEquals(2346, addresses[1].getPort())__    };test,ipv6,host,with,port,range,works;public,void,test,parse,v6with,port,range,throws,exception,transport,address,addresses,tcp,transport,parse,1,2345,2346,1234,integer,assert,equals,2,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port,assert,equals,1,addresses,1,get,address,assert,equals,2346,addresses,1,get,port
TcpTransportTests -> public void testParseV6WithPortRange() throws Exception;1538067637;Test ipv6 host with port range works;public void testParseV6WithPortRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:2345-2346", "1234", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())___        assertEquals("::1", addresses[1].getAddress())__        assertEquals(2346, addresses[1].getPort())__    };test,ipv6,host,with,port,range,works;public,void,test,parse,v6with,port,range,throws,exception,transport,address,addresses,tcp,transport,parse,1,2345,2346,1234,integer,assert,equals,2,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port,assert,equals,1,addresses,1,get,address,assert,equals,2346,addresses,1,get,port
TcpTransportTests -> public void testParseV6WithPortRange() throws Exception;1540486836;Test ipv6 host with port range works;public void testParseV6WithPortRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:2345-2346", "1234", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())___        assertEquals("::1", addresses[1].getAddress())__        assertEquals(2346, addresses[1].getPort())__    };test,ipv6,host,with,port,range,works;public,void,test,parse,v6with,port,range,throws,exception,transport,address,addresses,tcp,transport,parse,1,2345,2346,1234,integer,assert,equals,2,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port,assert,equals,1,addresses,1,get,address,assert,equals,2346,addresses,1,get,port
TcpTransportTests -> public void testParseV6WithPortRange() throws Exception;1541552300;Test ipv6 host with port range works;public void testParseV6WithPortRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:2345-2346", "1234", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())___        assertEquals("::1", addresses[1].getAddress())__        assertEquals(2346, addresses[1].getPort())__    };test,ipv6,host,with,port,range,works;public,void,test,parse,v6with,port,range,throws,exception,transport,address,addresses,tcp,transport,parse,1,2345,2346,1234,integer,assert,equals,2,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port,assert,equals,1,addresses,1,get,address,assert,equals,2346,addresses,1,get,port
TcpTransportTests -> public void testParseV6WithPortRange() throws Exception;1541698679;Test ipv6 host with port range works;public void testParseV6WithPortRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:2345-2346", "1234", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())___        assertEquals("::1", addresses[1].getAddress())__        assertEquals(2346, addresses[1].getPort())__    };test,ipv6,host,with,port,range,works;public,void,test,parse,v6with,port,range,throws,exception,transport,address,addresses,tcp,transport,parse,1,2345,2346,1234,integer,assert,equals,2,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port,assert,equals,1,addresses,1,get,address,assert,equals,2346,addresses,1,get,port
TcpTransportTests -> public void testParseV6WithPortRange() throws Exception;1541725488;Test ipv6 host with port range works;public void testParseV6WithPortRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:2345-2346", "1234", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())___        assertEquals("::1", addresses[1].getAddress())__        assertEquals(2346, addresses[1].getPort())__    };test,ipv6,host,with,port,range,works;public,void,test,parse,v6with,port,range,throws,exception,transport,address,addresses,tcp,transport,parse,1,2345,2346,1234,integer,assert,equals,2,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port,assert,equals,1,addresses,1,get,address,assert,equals,2346,addresses,1,get,port
TcpTransportTests -> public void testParseV6WithPortRange() throws Exception;1543334894;Test ipv6 host with port range works;public void testParseV6WithPortRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:2345-2346", "1234", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())___        assertEquals("::1", addresses[1].getAddress())__        assertEquals(2346, addresses[1].getPort())__    };test,ipv6,host,with,port,range,works;public,void,test,parse,v6with,port,range,throws,exception,transport,address,addresses,tcp,transport,parse,1,2345,2346,1234,integer,assert,equals,2,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port,assert,equals,1,addresses,1,get,address,assert,equals,2346,addresses,1,get,port
TcpTransportTests -> public void testParseV6WithPortRange() throws Exception;1543506953;Test ipv6 host with port range works;public void testParseV6WithPortRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:2345-2346", "1234", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())___        assertEquals("::1", addresses[1].getAddress())__        assertEquals(2346, addresses[1].getPort())__    };test,ipv6,host,with,port,range,works;public,void,test,parse,v6with,port,range,throws,exception,transport,address,addresses,tcp,transport,parse,1,2345,2346,1234,integer,assert,equals,2,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port,assert,equals,1,addresses,1,get,address,assert,equals,2346,addresses,1,get,port
TcpTransportTests -> public void testParseV6WithPortRange() throws Exception;1543602642;Test ipv6 host with port range works;public void testParseV6WithPortRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:2345-2346", "1234", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())___        assertEquals("::1", addresses[1].getAddress())__        assertEquals(2346, addresses[1].getPort())__    };test,ipv6,host,with,port,range,works;public,void,test,parse,v6with,port,range,throws,exception,transport,address,addresses,tcp,transport,parse,1,2345,2346,1234,integer,assert,equals,2,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port,assert,equals,1,addresses,1,get,address,assert,equals,2346,addresses,1,get,port
TcpTransportTests -> public void testParseV6WithPortRange() throws Exception;1544554541;Test ipv6 host with port range works;public void testParseV6WithPortRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:2345-2346", "1234", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())___        assertEquals("::1", addresses[1].getAddress())__        assertEquals(2346, addresses[1].getPort())__    };test,ipv6,host,with,port,range,works;public,void,test,parse,v6with,port,range,throws,exception,transport,address,addresses,tcp,transport,parse,1,2345,2346,1234,integer,assert,equals,2,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port,assert,equals,1,addresses,1,get,address,assert,equals,2346,addresses,1,get,port
TcpTransportTests -> public void testParseV6WithPortRange() throws Exception;1544810347;Test ipv6 host with port range works;public void testParseV6WithPortRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:2345-2346", "1234", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())___        assertEquals("::1", addresses[1].getAddress())__        assertEquals(2346, addresses[1].getPort())__    };test,ipv6,host,with,port,range,works;public,void,test,parse,v6with,port,range,throws,exception,transport,address,addresses,tcp,transport,parse,1,2345,2346,1234,integer,assert,equals,2,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port,assert,equals,1,addresses,1,get,address,assert,equals,2346,addresses,1,get,port
TcpTransportTests -> public void testParseV6WithPortRange() throws Exception;1545412440;Test ipv6 host with port range works;public void testParseV6WithPortRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:2345-2346", "1234", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())___        assertEquals("::1", addresses[1].getAddress())__        assertEquals(2346, addresses[1].getPort())__    };test,ipv6,host,with,port,range,works;public,void,test,parse,v6with,port,range,throws,exception,transport,address,addresses,tcp,transport,parse,1,2345,2346,1234,integer,assert,equals,2,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port,assert,equals,1,addresses,1,get,address,assert,equals,2346,addresses,1,get,port
TcpTransportTests -> public void testParseV6WithPortRange() throws Exception;1548105258;Test ipv6 host with port range works;public void testParseV6WithPortRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:2345-2346", "1234", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())___        assertEquals("::1", addresses[1].getAddress())__        assertEquals(2346, addresses[1].getPort())__    };test,ipv6,host,with,port,range,works;public,void,test,parse,v6with,port,range,throws,exception,transport,address,addresses,tcp,transport,parse,1,2345,2346,1234,integer,assert,equals,2,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port,assert,equals,1,addresses,1,get,address,assert,equals,2346,addresses,1,get,port
TcpTransportTests -> public void testAddressLimit() throws Exception;1524684173;Test per-address limit;public void testAddressLimit() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:100-200", "1000", 3)__        assertEquals(3, addresses.length)__        assertEquals(100, addresses[0].getPort())__        assertEquals(101, addresses[1].getPort())__        assertEquals(102, addresses[2].getPort())__    };test,per,address,limit;public,void,test,address,limit,throws,exception,transport,address,addresses,tcp,transport,parse,1,100,200,1000,3,assert,equals,3,addresses,length,assert,equals,100,addresses,0,get,port,assert,equals,101,addresses,1,get,port,assert,equals,102,addresses,2,get,port
TcpTransportTests -> public void testAddressLimit() throws Exception;1527878678;Test per-address limit;public void testAddressLimit() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:100-200", "1000", 3)__        assertEquals(3, addresses.length)__        assertEquals(100, addresses[0].getPort())__        assertEquals(101, addresses[1].getPort())__        assertEquals(102, addresses[2].getPort())__    };test,per,address,limit;public,void,test,address,limit,throws,exception,transport,address,addresses,tcp,transport,parse,1,100,200,1000,3,assert,equals,3,addresses,length,assert,equals,100,addresses,0,get,port,assert,equals,101,addresses,1,get,port,assert,equals,102,addresses,2,get,port
TcpTransportTests -> public void testAddressLimit() throws Exception;1528762805;Test per-address limit;public void testAddressLimit() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:100-200", "1000", 3)__        assertEquals(3, addresses.length)__        assertEquals(100, addresses[0].getPort())__        assertEquals(101, addresses[1].getPort())__        assertEquals(102, addresses[2].getPort())__    };test,per,address,limit;public,void,test,address,limit,throws,exception,transport,address,addresses,tcp,transport,parse,1,100,200,1000,3,assert,equals,3,addresses,length,assert,equals,100,addresses,0,get,port,assert,equals,101,addresses,1,get,port,assert,equals,102,addresses,2,get,port
TcpTransportTests -> public void testAddressLimit() throws Exception;1529600205;Test per-address limit;public void testAddressLimit() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:100-200", "1000", 3)__        assertEquals(3, addresses.length)__        assertEquals(100, addresses[0].getPort())__        assertEquals(101, addresses[1].getPort())__        assertEquals(102, addresses[2].getPort())__    };test,per,address,limit;public,void,test,address,limit,throws,exception,transport,address,addresses,tcp,transport,parse,1,100,200,1000,3,assert,equals,3,addresses,length,assert,equals,100,addresses,0,get,port,assert,equals,101,addresses,1,get,port,assert,equals,102,addresses,2,get,port
TcpTransportTests -> public void testAddressLimit() throws Exception;1534203100;Test per-address limit;public void testAddressLimit() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:100-200", "1000", 3)__        assertEquals(3, addresses.length)__        assertEquals(100, addresses[0].getPort())__        assertEquals(101, addresses[1].getPort())__        assertEquals(102, addresses[2].getPort())__    };test,per,address,limit;public,void,test,address,limit,throws,exception,transport,address,addresses,tcp,transport,parse,1,100,200,1000,3,assert,equals,3,addresses,length,assert,equals,100,addresses,0,get,port,assert,equals,101,addresses,1,get,port,assert,equals,102,addresses,2,get,port
TcpTransportTests -> public void testAddressLimit() throws Exception;1534362961;Test per-address limit;public void testAddressLimit() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:100-200", "1000", 3)__        assertEquals(3, addresses.length)__        assertEquals(100, addresses[0].getPort())__        assertEquals(101, addresses[1].getPort())__        assertEquals(102, addresses[2].getPort())__    };test,per,address,limit;public,void,test,address,limit,throws,exception,transport,address,addresses,tcp,transport,parse,1,100,200,1000,3,assert,equals,3,addresses,length,assert,equals,100,addresses,0,get,port,assert,equals,101,addresses,1,get,port,assert,equals,102,addresses,2,get,port
TcpTransportTests -> public void testAddressLimit() throws Exception;1534848846;Test per-address limit;public void testAddressLimit() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:100-200", "1000", 3)__        assertEquals(3, addresses.length)__        assertEquals(100, addresses[0].getPort())__        assertEquals(101, addresses[1].getPort())__        assertEquals(102, addresses[2].getPort())__    };test,per,address,limit;public,void,test,address,limit,throws,exception,transport,address,addresses,tcp,transport,parse,1,100,200,1000,3,assert,equals,3,addresses,length,assert,equals,100,addresses,0,get,port,assert,equals,101,addresses,1,get,port,assert,equals,102,addresses,2,get,port
TcpTransportTests -> public void testAddressLimit() throws Exception;1535139672;Test per-address limit;public void testAddressLimit() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:100-200", "1000", 3)__        assertEquals(3, addresses.length)__        assertEquals(100, addresses[0].getPort())__        assertEquals(101, addresses[1].getPort())__        assertEquals(102, addresses[2].getPort())__    };test,per,address,limit;public,void,test,address,limit,throws,exception,transport,address,addresses,tcp,transport,parse,1,100,200,1000,3,assert,equals,3,addresses,length,assert,equals,100,addresses,0,get,port,assert,equals,101,addresses,1,get,port,assert,equals,102,addresses,2,get,port
TcpTransportTests -> public void testAddressLimit() throws Exception;1537300661;Test per-address limit;public void testAddressLimit() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:100-200", "1000", 3)__        assertEquals(3, addresses.length)__        assertEquals(100, addresses[0].getPort())__        assertEquals(101, addresses[1].getPort())__        assertEquals(102, addresses[2].getPort())__    };test,per,address,limit;public,void,test,address,limit,throws,exception,transport,address,addresses,tcp,transport,parse,1,100,200,1000,3,assert,equals,3,addresses,length,assert,equals,100,addresses,0,get,port,assert,equals,101,addresses,1,get,port,assert,equals,102,addresses,2,get,port
TcpTransportTests -> public void testAddressLimit() throws Exception;1538067637;Test per-address limit;public void testAddressLimit() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:100-200", "1000", 3)__        assertEquals(3, addresses.length)__        assertEquals(100, addresses[0].getPort())__        assertEquals(101, addresses[1].getPort())__        assertEquals(102, addresses[2].getPort())__    };test,per,address,limit;public,void,test,address,limit,throws,exception,transport,address,addresses,tcp,transport,parse,1,100,200,1000,3,assert,equals,3,addresses,length,assert,equals,100,addresses,0,get,port,assert,equals,101,addresses,1,get,port,assert,equals,102,addresses,2,get,port
TcpTransportTests -> public void testAddressLimit() throws Exception;1540486836;Test per-address limit;public void testAddressLimit() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:100-200", "1000", 3)__        assertEquals(3, addresses.length)__        assertEquals(100, addresses[0].getPort())__        assertEquals(101, addresses[1].getPort())__        assertEquals(102, addresses[2].getPort())__    };test,per,address,limit;public,void,test,address,limit,throws,exception,transport,address,addresses,tcp,transport,parse,1,100,200,1000,3,assert,equals,3,addresses,length,assert,equals,100,addresses,0,get,port,assert,equals,101,addresses,1,get,port,assert,equals,102,addresses,2,get,port
TcpTransportTests -> public void testAddressLimit() throws Exception;1541552300;Test per-address limit;public void testAddressLimit() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:100-200", "1000", 3)__        assertEquals(3, addresses.length)__        assertEquals(100, addresses[0].getPort())__        assertEquals(101, addresses[1].getPort())__        assertEquals(102, addresses[2].getPort())__    };test,per,address,limit;public,void,test,address,limit,throws,exception,transport,address,addresses,tcp,transport,parse,1,100,200,1000,3,assert,equals,3,addresses,length,assert,equals,100,addresses,0,get,port,assert,equals,101,addresses,1,get,port,assert,equals,102,addresses,2,get,port
TcpTransportTests -> public void testAddressLimit() throws Exception;1541698679;Test per-address limit;public void testAddressLimit() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:100-200", "1000", 3)__        assertEquals(3, addresses.length)__        assertEquals(100, addresses[0].getPort())__        assertEquals(101, addresses[1].getPort())__        assertEquals(102, addresses[2].getPort())__    };test,per,address,limit;public,void,test,address,limit,throws,exception,transport,address,addresses,tcp,transport,parse,1,100,200,1000,3,assert,equals,3,addresses,length,assert,equals,100,addresses,0,get,port,assert,equals,101,addresses,1,get,port,assert,equals,102,addresses,2,get,port
TcpTransportTests -> public void testAddressLimit() throws Exception;1541725488;Test per-address limit;public void testAddressLimit() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:100-200", "1000", 3)__        assertEquals(3, addresses.length)__        assertEquals(100, addresses[0].getPort())__        assertEquals(101, addresses[1].getPort())__        assertEquals(102, addresses[2].getPort())__    };test,per,address,limit;public,void,test,address,limit,throws,exception,transport,address,addresses,tcp,transport,parse,1,100,200,1000,3,assert,equals,3,addresses,length,assert,equals,100,addresses,0,get,port,assert,equals,101,addresses,1,get,port,assert,equals,102,addresses,2,get,port
TcpTransportTests -> public void testAddressLimit() throws Exception;1543334894;Test per-address limit;public void testAddressLimit() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:100-200", "1000", 3)__        assertEquals(3, addresses.length)__        assertEquals(100, addresses[0].getPort())__        assertEquals(101, addresses[1].getPort())__        assertEquals(102, addresses[2].getPort())__    };test,per,address,limit;public,void,test,address,limit,throws,exception,transport,address,addresses,tcp,transport,parse,1,100,200,1000,3,assert,equals,3,addresses,length,assert,equals,100,addresses,0,get,port,assert,equals,101,addresses,1,get,port,assert,equals,102,addresses,2,get,port
TcpTransportTests -> public void testAddressLimit() throws Exception;1543506953;Test per-address limit;public void testAddressLimit() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:100-200", "1000", 3)__        assertEquals(3, addresses.length)__        assertEquals(100, addresses[0].getPort())__        assertEquals(101, addresses[1].getPort())__        assertEquals(102, addresses[2].getPort())__    };test,per,address,limit;public,void,test,address,limit,throws,exception,transport,address,addresses,tcp,transport,parse,1,100,200,1000,3,assert,equals,3,addresses,length,assert,equals,100,addresses,0,get,port,assert,equals,101,addresses,1,get,port,assert,equals,102,addresses,2,get,port
TcpTransportTests -> public void testAddressLimit() throws Exception;1543602642;Test per-address limit;public void testAddressLimit() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:100-200", "1000", 3)__        assertEquals(3, addresses.length)__        assertEquals(100, addresses[0].getPort())__        assertEquals(101, addresses[1].getPort())__        assertEquals(102, addresses[2].getPort())__    };test,per,address,limit;public,void,test,address,limit,throws,exception,transport,address,addresses,tcp,transport,parse,1,100,200,1000,3,assert,equals,3,addresses,length,assert,equals,100,addresses,0,get,port,assert,equals,101,addresses,1,get,port,assert,equals,102,addresses,2,get,port
TcpTransportTests -> public void testAddressLimit() throws Exception;1544554541;Test per-address limit;public void testAddressLimit() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:100-200", "1000", 3)__        assertEquals(3, addresses.length)__        assertEquals(100, addresses[0].getPort())__        assertEquals(101, addresses[1].getPort())__        assertEquals(102, addresses[2].getPort())__    };test,per,address,limit;public,void,test,address,limit,throws,exception,transport,address,addresses,tcp,transport,parse,1,100,200,1000,3,assert,equals,3,addresses,length,assert,equals,100,addresses,0,get,port,assert,equals,101,addresses,1,get,port,assert,equals,102,addresses,2,get,port
TcpTransportTests -> public void testAddressLimit() throws Exception;1544810347;Test per-address limit;public void testAddressLimit() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:100-200", "1000", 3)__        assertEquals(3, addresses.length)__        assertEquals(100, addresses[0].getPort())__        assertEquals(101, addresses[1].getPort())__        assertEquals(102, addresses[2].getPort())__    };test,per,address,limit;public,void,test,address,limit,throws,exception,transport,address,addresses,tcp,transport,parse,1,100,200,1000,3,assert,equals,3,addresses,length,assert,equals,100,addresses,0,get,port,assert,equals,101,addresses,1,get,port,assert,equals,102,addresses,2,get,port
TcpTransportTests -> public void testAddressLimit() throws Exception;1545412440;Test per-address limit;public void testAddressLimit() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:100-200", "1000", 3)__        assertEquals(3, addresses.length)__        assertEquals(100, addresses[0].getPort())__        assertEquals(101, addresses[1].getPort())__        assertEquals(102, addresses[2].getPort())__    };test,per,address,limit;public,void,test,address,limit,throws,exception,transport,address,addresses,tcp,transport,parse,1,100,200,1000,3,assert,equals,3,addresses,length,assert,equals,100,addresses,0,get,port,assert,equals,101,addresses,1,get,port,assert,equals,102,addresses,2,get,port
TcpTransportTests -> public void testAddressLimit() throws Exception;1548105258;Test per-address limit;public void testAddressLimit() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]:100-200", "1000", 3)__        assertEquals(3, addresses.length)__        assertEquals(100, addresses[0].getPort())__        assertEquals(101, addresses[1].getPort())__        assertEquals(102, addresses[2].getPort())__    };test,per,address,limit;public,void,test,address,limit,throws,exception,transport,address,addresses,tcp,transport,parse,1,100,200,1000,3,assert,equals,3,addresses,length,assert,equals,100,addresses,0,get,port,assert,equals,101,addresses,1,get,port,assert,equals,102,addresses,2,get,port
TcpTransportTests -> public void testParseV6UnBracketed() throws Exception;1524684173;Test unbracketed ipv6 hosts in configuration fail. Leave no ambiguity;public void testParseV6UnBracketed() throws Exception {_        try {_            TcpTransport.parse("::1", "1234", Integer.MAX_VALUE)__            fail("should have gotten exception")__        } catch (IllegalArgumentException expected) {_            assertTrue(expected.getMessage().contains("must be bracketed"))__        }_    };test,unbracketed,ipv6,hosts,in,configuration,fail,leave,no,ambiguity;public,void,test,parse,v6un,bracketed,throws,exception,try,tcp,transport,parse,1,1234,integer,fail,should,have,gotten,exception,catch,illegal,argument,exception,expected,assert,true,expected,get,message,contains,must,be,bracketed
TcpTransportTests -> public void testParseV6UnBracketed() throws Exception;1527878678;Test unbracketed ipv6 hosts in configuration fail. Leave no ambiguity;public void testParseV6UnBracketed() throws Exception {_        try {_            TcpTransport.parse("::1", "1234", Integer.MAX_VALUE)__            fail("should have gotten exception")__        } catch (IllegalArgumentException expected) {_            assertTrue(expected.getMessage().contains("must be bracketed"))__        }_    };test,unbracketed,ipv6,hosts,in,configuration,fail,leave,no,ambiguity;public,void,test,parse,v6un,bracketed,throws,exception,try,tcp,transport,parse,1,1234,integer,fail,should,have,gotten,exception,catch,illegal,argument,exception,expected,assert,true,expected,get,message,contains,must,be,bracketed
TcpTransportTests -> public void testParseV6UnBracketed() throws Exception;1528762805;Test unbracketed ipv6 hosts in configuration fail. Leave no ambiguity;public void testParseV6UnBracketed() throws Exception {_        try {_            TcpTransport.parse("::1", "1234", Integer.MAX_VALUE)__            fail("should have gotten exception")__        } catch (IllegalArgumentException expected) {_            assertTrue(expected.getMessage().contains("must be bracketed"))__        }_    };test,unbracketed,ipv6,hosts,in,configuration,fail,leave,no,ambiguity;public,void,test,parse,v6un,bracketed,throws,exception,try,tcp,transport,parse,1,1234,integer,fail,should,have,gotten,exception,catch,illegal,argument,exception,expected,assert,true,expected,get,message,contains,must,be,bracketed
TcpTransportTests -> public void testParseV6UnBracketed() throws Exception;1529600205;Test unbracketed ipv6 hosts in configuration fail. Leave no ambiguity;public void testParseV6UnBracketed() throws Exception {_        try {_            TcpTransport.parse("::1", "1234", Integer.MAX_VALUE)__            fail("should have gotten exception")__        } catch (IllegalArgumentException expected) {_            assertTrue(expected.getMessage().contains("must be bracketed"))__        }_    };test,unbracketed,ipv6,hosts,in,configuration,fail,leave,no,ambiguity;public,void,test,parse,v6un,bracketed,throws,exception,try,tcp,transport,parse,1,1234,integer,fail,should,have,gotten,exception,catch,illegal,argument,exception,expected,assert,true,expected,get,message,contains,must,be,bracketed
TcpTransportTests -> public void testParseV6UnBracketed() throws Exception;1534203100;Test unbracketed ipv6 hosts in configuration fail. Leave no ambiguity;public void testParseV6UnBracketed() throws Exception {_        try {_            TcpTransport.parse("::1", "1234", Integer.MAX_VALUE)__            fail("should have gotten exception")__        } catch (IllegalArgumentException expected) {_            assertTrue(expected.getMessage().contains("must be bracketed"))__        }_    };test,unbracketed,ipv6,hosts,in,configuration,fail,leave,no,ambiguity;public,void,test,parse,v6un,bracketed,throws,exception,try,tcp,transport,parse,1,1234,integer,fail,should,have,gotten,exception,catch,illegal,argument,exception,expected,assert,true,expected,get,message,contains,must,be,bracketed
TcpTransportTests -> public void testParseV6UnBracketed() throws Exception;1534362961;Test unbracketed ipv6 hosts in configuration fail. Leave no ambiguity;public void testParseV6UnBracketed() throws Exception {_        try {_            TcpTransport.parse("::1", "1234", Integer.MAX_VALUE)__            fail("should have gotten exception")__        } catch (IllegalArgumentException expected) {_            assertTrue(expected.getMessage().contains("must be bracketed"))__        }_    };test,unbracketed,ipv6,hosts,in,configuration,fail,leave,no,ambiguity;public,void,test,parse,v6un,bracketed,throws,exception,try,tcp,transport,parse,1,1234,integer,fail,should,have,gotten,exception,catch,illegal,argument,exception,expected,assert,true,expected,get,message,contains,must,be,bracketed
TcpTransportTests -> public void testParseV6UnBracketed() throws Exception;1534848846;Test unbracketed ipv6 hosts in configuration fail. Leave no ambiguity;public void testParseV6UnBracketed() throws Exception {_        try {_            TcpTransport.parse("::1", "1234", Integer.MAX_VALUE)__            fail("should have gotten exception")__        } catch (IllegalArgumentException expected) {_            assertTrue(expected.getMessage().contains("must be bracketed"))__        }_    };test,unbracketed,ipv6,hosts,in,configuration,fail,leave,no,ambiguity;public,void,test,parse,v6un,bracketed,throws,exception,try,tcp,transport,parse,1,1234,integer,fail,should,have,gotten,exception,catch,illegal,argument,exception,expected,assert,true,expected,get,message,contains,must,be,bracketed
TcpTransportTests -> public void testParseV6UnBracketed() throws Exception;1535139672;Test unbracketed ipv6 hosts in configuration fail. Leave no ambiguity;public void testParseV6UnBracketed() throws Exception {_        try {_            TcpTransport.parse("::1", "1234", Integer.MAX_VALUE)__            fail("should have gotten exception")__        } catch (IllegalArgumentException expected) {_            assertTrue(expected.getMessage().contains("must be bracketed"))__        }_    };test,unbracketed,ipv6,hosts,in,configuration,fail,leave,no,ambiguity;public,void,test,parse,v6un,bracketed,throws,exception,try,tcp,transport,parse,1,1234,integer,fail,should,have,gotten,exception,catch,illegal,argument,exception,expected,assert,true,expected,get,message,contains,must,be,bracketed
TcpTransportTests -> public void testParseV6UnBracketed() throws Exception;1537300661;Test unbracketed ipv6 hosts in configuration fail. Leave no ambiguity;public void testParseV6UnBracketed() throws Exception {_        try {_            TcpTransport.parse("::1", "1234", Integer.MAX_VALUE)__            fail("should have gotten exception")__        } catch (IllegalArgumentException expected) {_            assertTrue(expected.getMessage().contains("must be bracketed"))__        }_    };test,unbracketed,ipv6,hosts,in,configuration,fail,leave,no,ambiguity;public,void,test,parse,v6un,bracketed,throws,exception,try,tcp,transport,parse,1,1234,integer,fail,should,have,gotten,exception,catch,illegal,argument,exception,expected,assert,true,expected,get,message,contains,must,be,bracketed
TcpTransportTests -> public void testParseV6UnBracketed() throws Exception;1538067637;Test unbracketed ipv6 hosts in configuration fail. Leave no ambiguity;public void testParseV6UnBracketed() throws Exception {_        try {_            TcpTransport.parse("::1", "1234", Integer.MAX_VALUE)__            fail("should have gotten exception")__        } catch (IllegalArgumentException expected) {_            assertTrue(expected.getMessage().contains("must be bracketed"))__        }_    };test,unbracketed,ipv6,hosts,in,configuration,fail,leave,no,ambiguity;public,void,test,parse,v6un,bracketed,throws,exception,try,tcp,transport,parse,1,1234,integer,fail,should,have,gotten,exception,catch,illegal,argument,exception,expected,assert,true,expected,get,message,contains,must,be,bracketed
TcpTransportTests -> public void testParseV6UnBracketed() throws Exception;1540486836;Test unbracketed ipv6 hosts in configuration fail. Leave no ambiguity;public void testParseV6UnBracketed() throws Exception {_        try {_            TcpTransport.parse("::1", "1234", Integer.MAX_VALUE)__            fail("should have gotten exception")__        } catch (IllegalArgumentException expected) {_            assertTrue(expected.getMessage().contains("must be bracketed"))__        }_    };test,unbracketed,ipv6,hosts,in,configuration,fail,leave,no,ambiguity;public,void,test,parse,v6un,bracketed,throws,exception,try,tcp,transport,parse,1,1234,integer,fail,should,have,gotten,exception,catch,illegal,argument,exception,expected,assert,true,expected,get,message,contains,must,be,bracketed
TcpTransportTests -> public void testParseV6UnBracketed() throws Exception;1541552300;Test unbracketed ipv6 hosts in configuration fail. Leave no ambiguity;public void testParseV6UnBracketed() throws Exception {_        try {_            TcpTransport.parse("::1", "1234", Integer.MAX_VALUE)__            fail("should have gotten exception")__        } catch (IllegalArgumentException expected) {_            assertTrue(expected.getMessage().contains("must be bracketed"))__        }_    };test,unbracketed,ipv6,hosts,in,configuration,fail,leave,no,ambiguity;public,void,test,parse,v6un,bracketed,throws,exception,try,tcp,transport,parse,1,1234,integer,fail,should,have,gotten,exception,catch,illegal,argument,exception,expected,assert,true,expected,get,message,contains,must,be,bracketed
TcpTransportTests -> public void testParseV6UnBracketed() throws Exception;1541698679;Test unbracketed ipv6 hosts in configuration fail. Leave no ambiguity;public void testParseV6UnBracketed() throws Exception {_        try {_            TcpTransport.parse("::1", "1234", Integer.MAX_VALUE)__            fail("should have gotten exception")__        } catch (IllegalArgumentException expected) {_            assertTrue(expected.getMessage().contains("must be bracketed"))__        }_    };test,unbracketed,ipv6,hosts,in,configuration,fail,leave,no,ambiguity;public,void,test,parse,v6un,bracketed,throws,exception,try,tcp,transport,parse,1,1234,integer,fail,should,have,gotten,exception,catch,illegal,argument,exception,expected,assert,true,expected,get,message,contains,must,be,bracketed
TcpTransportTests -> public void testParseV6UnBracketed() throws Exception;1541725488;Test unbracketed ipv6 hosts in configuration fail. Leave no ambiguity;public void testParseV6UnBracketed() throws Exception {_        try {_            TcpTransport.parse("::1", "1234", Integer.MAX_VALUE)__            fail("should have gotten exception")__        } catch (IllegalArgumentException expected) {_            assertTrue(expected.getMessage().contains("must be bracketed"))__        }_    };test,unbracketed,ipv6,hosts,in,configuration,fail,leave,no,ambiguity;public,void,test,parse,v6un,bracketed,throws,exception,try,tcp,transport,parse,1,1234,integer,fail,should,have,gotten,exception,catch,illegal,argument,exception,expected,assert,true,expected,get,message,contains,must,be,bracketed
TcpTransportTests -> public void testParseV6UnBracketed() throws Exception;1543334894;Test unbracketed ipv6 hosts in configuration fail. Leave no ambiguity;public void testParseV6UnBracketed() throws Exception {_        try {_            TcpTransport.parse("::1", "1234", Integer.MAX_VALUE)__            fail("should have gotten exception")__        } catch (IllegalArgumentException expected) {_            assertTrue(expected.getMessage().contains("must be bracketed"))__        }_    };test,unbracketed,ipv6,hosts,in,configuration,fail,leave,no,ambiguity;public,void,test,parse,v6un,bracketed,throws,exception,try,tcp,transport,parse,1,1234,integer,fail,should,have,gotten,exception,catch,illegal,argument,exception,expected,assert,true,expected,get,message,contains,must,be,bracketed
TcpTransportTests -> public void testParseV6UnBracketed() throws Exception;1543506953;Test unbracketed ipv6 hosts in configuration fail. Leave no ambiguity;public void testParseV6UnBracketed() throws Exception {_        try {_            TcpTransport.parse("::1", "1234", Integer.MAX_VALUE)__            fail("should have gotten exception")__        } catch (IllegalArgumentException expected) {_            assertTrue(expected.getMessage().contains("must be bracketed"))__        }_    };test,unbracketed,ipv6,hosts,in,configuration,fail,leave,no,ambiguity;public,void,test,parse,v6un,bracketed,throws,exception,try,tcp,transport,parse,1,1234,integer,fail,should,have,gotten,exception,catch,illegal,argument,exception,expected,assert,true,expected,get,message,contains,must,be,bracketed
TcpTransportTests -> public void testParseV6UnBracketed() throws Exception;1543602642;Test unbracketed ipv6 hosts in configuration fail. Leave no ambiguity;public void testParseV6UnBracketed() throws Exception {_        try {_            TcpTransport.parse("::1", "1234", Integer.MAX_VALUE)__            fail("should have gotten exception")__        } catch (IllegalArgumentException expected) {_            assertTrue(expected.getMessage().contains("must be bracketed"))__        }_    };test,unbracketed,ipv6,hosts,in,configuration,fail,leave,no,ambiguity;public,void,test,parse,v6un,bracketed,throws,exception,try,tcp,transport,parse,1,1234,integer,fail,should,have,gotten,exception,catch,illegal,argument,exception,expected,assert,true,expected,get,message,contains,must,be,bracketed
TcpTransportTests -> public void testParseV6UnBracketed() throws Exception;1544554541;Test unbracketed ipv6 hosts in configuration fail. Leave no ambiguity;public void testParseV6UnBracketed() throws Exception {_        try {_            TcpTransport.parse("::1", "1234", Integer.MAX_VALUE)__            fail("should have gotten exception")__        } catch (IllegalArgumentException expected) {_            assertTrue(expected.getMessage().contains("must be bracketed"))__        }_    };test,unbracketed,ipv6,hosts,in,configuration,fail,leave,no,ambiguity;public,void,test,parse,v6un,bracketed,throws,exception,try,tcp,transport,parse,1,1234,integer,fail,should,have,gotten,exception,catch,illegal,argument,exception,expected,assert,true,expected,get,message,contains,must,be,bracketed
TcpTransportTests -> public void testParseV6UnBracketed() throws Exception;1544810347;Test unbracketed ipv6 hosts in configuration fail. Leave no ambiguity;public void testParseV6UnBracketed() throws Exception {_        try {_            TcpTransport.parse("::1", "1234", Integer.MAX_VALUE)__            fail("should have gotten exception")__        } catch (IllegalArgumentException expected) {_            assertTrue(expected.getMessage().contains("must be bracketed"))__        }_    };test,unbracketed,ipv6,hosts,in,configuration,fail,leave,no,ambiguity;public,void,test,parse,v6un,bracketed,throws,exception,try,tcp,transport,parse,1,1234,integer,fail,should,have,gotten,exception,catch,illegal,argument,exception,expected,assert,true,expected,get,message,contains,must,be,bracketed
TcpTransportTests -> public void testParseV6UnBracketed() throws Exception;1545412440;Test unbracketed ipv6 hosts in configuration fail. Leave no ambiguity;public void testParseV6UnBracketed() throws Exception {_        try {_            TcpTransport.parse("::1", "1234", Integer.MAX_VALUE)__            fail("should have gotten exception")__        } catch (IllegalArgumentException expected) {_            assertTrue(expected.getMessage().contains("must be bracketed"))__        }_    };test,unbracketed,ipv6,hosts,in,configuration,fail,leave,no,ambiguity;public,void,test,parse,v6un,bracketed,throws,exception,try,tcp,transport,parse,1,1234,integer,fail,should,have,gotten,exception,catch,illegal,argument,exception,expected,assert,true,expected,get,message,contains,must,be,bracketed
TcpTransportTests -> public void testParseV6UnBracketed() throws Exception;1548105258;Test unbracketed ipv6 hosts in configuration fail. Leave no ambiguity;public void testParseV6UnBracketed() throws Exception {_        try {_            TcpTransport.parse("::1", "1234", Integer.MAX_VALUE)__            fail("should have gotten exception")__        } catch (IllegalArgumentException expected) {_            assertTrue(expected.getMessage().contains("must be bracketed"))__        }_    };test,unbracketed,ipv6,hosts,in,configuration,fail,leave,no,ambiguity;public,void,test,parse,v6un,bracketed,throws,exception,try,tcp,transport,parse,1,1234,integer,fail,should,have,gotten,exception,catch,illegal,argument,exception,expected,assert,true,expected,get,message,contains,must,be,bracketed
TcpTransportTests -> public void testParseV4WithPortRange() throws Exception;1524684173;Test ipv4 host with port range works;public void testParseV4WithPortRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1:2345-2346", "1234", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())___        assertEquals("127.0.0.1", addresses[1].getAddress())__        assertEquals(2346, addresses[1].getPort())__    };test,ipv4,host,with,port,range,works;public,void,test,parse,v4with,port,range,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,2345,2346,1234,integer,assert,equals,2,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port,assert,equals,127,0,0,1,addresses,1,get,address,assert,equals,2346,addresses,1,get,port
TcpTransportTests -> public void testParseV4WithPortRange() throws Exception;1527878678;Test ipv4 host with port range works;public void testParseV4WithPortRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1:2345-2346", "1234", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())___        assertEquals("127.0.0.1", addresses[1].getAddress())__        assertEquals(2346, addresses[1].getPort())__    };test,ipv4,host,with,port,range,works;public,void,test,parse,v4with,port,range,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,2345,2346,1234,integer,assert,equals,2,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port,assert,equals,127,0,0,1,addresses,1,get,address,assert,equals,2346,addresses,1,get,port
TcpTransportTests -> public void testParseV4WithPortRange() throws Exception;1528762805;Test ipv4 host with port range works;public void testParseV4WithPortRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1:2345-2346", "1234", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())___        assertEquals("127.0.0.1", addresses[1].getAddress())__        assertEquals(2346, addresses[1].getPort())__    };test,ipv4,host,with,port,range,works;public,void,test,parse,v4with,port,range,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,2345,2346,1234,integer,assert,equals,2,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port,assert,equals,127,0,0,1,addresses,1,get,address,assert,equals,2346,addresses,1,get,port
TcpTransportTests -> public void testParseV4WithPortRange() throws Exception;1529600205;Test ipv4 host with port range works;public void testParseV4WithPortRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1:2345-2346", "1234", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())___        assertEquals("127.0.0.1", addresses[1].getAddress())__        assertEquals(2346, addresses[1].getPort())__    };test,ipv4,host,with,port,range,works;public,void,test,parse,v4with,port,range,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,2345,2346,1234,integer,assert,equals,2,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port,assert,equals,127,0,0,1,addresses,1,get,address,assert,equals,2346,addresses,1,get,port
TcpTransportTests -> public void testParseV4WithPortRange() throws Exception;1534203100;Test ipv4 host with port range works;public void testParseV4WithPortRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1:2345-2346", "1234", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())___        assertEquals("127.0.0.1", addresses[1].getAddress())__        assertEquals(2346, addresses[1].getPort())__    };test,ipv4,host,with,port,range,works;public,void,test,parse,v4with,port,range,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,2345,2346,1234,integer,assert,equals,2,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port,assert,equals,127,0,0,1,addresses,1,get,address,assert,equals,2346,addresses,1,get,port
TcpTransportTests -> public void testParseV4WithPortRange() throws Exception;1534362961;Test ipv4 host with port range works;public void testParseV4WithPortRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1:2345-2346", "1234", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())___        assertEquals("127.0.0.1", addresses[1].getAddress())__        assertEquals(2346, addresses[1].getPort())__    };test,ipv4,host,with,port,range,works;public,void,test,parse,v4with,port,range,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,2345,2346,1234,integer,assert,equals,2,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port,assert,equals,127,0,0,1,addresses,1,get,address,assert,equals,2346,addresses,1,get,port
TcpTransportTests -> public void testParseV4WithPortRange() throws Exception;1534848846;Test ipv4 host with port range works;public void testParseV4WithPortRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1:2345-2346", "1234", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())___        assertEquals("127.0.0.1", addresses[1].getAddress())__        assertEquals(2346, addresses[1].getPort())__    };test,ipv4,host,with,port,range,works;public,void,test,parse,v4with,port,range,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,2345,2346,1234,integer,assert,equals,2,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port,assert,equals,127,0,0,1,addresses,1,get,address,assert,equals,2346,addresses,1,get,port
TcpTransportTests -> public void testParseV4WithPortRange() throws Exception;1535139672;Test ipv4 host with port range works;public void testParseV4WithPortRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1:2345-2346", "1234", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())___        assertEquals("127.0.0.1", addresses[1].getAddress())__        assertEquals(2346, addresses[1].getPort())__    };test,ipv4,host,with,port,range,works;public,void,test,parse,v4with,port,range,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,2345,2346,1234,integer,assert,equals,2,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port,assert,equals,127,0,0,1,addresses,1,get,address,assert,equals,2346,addresses,1,get,port
TcpTransportTests -> public void testParseV4WithPortRange() throws Exception;1537300661;Test ipv4 host with port range works;public void testParseV4WithPortRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1:2345-2346", "1234", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())___        assertEquals("127.0.0.1", addresses[1].getAddress())__        assertEquals(2346, addresses[1].getPort())__    };test,ipv4,host,with,port,range,works;public,void,test,parse,v4with,port,range,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,2345,2346,1234,integer,assert,equals,2,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port,assert,equals,127,0,0,1,addresses,1,get,address,assert,equals,2346,addresses,1,get,port
TcpTransportTests -> public void testParseV4WithPortRange() throws Exception;1538067637;Test ipv4 host with port range works;public void testParseV4WithPortRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1:2345-2346", "1234", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())___        assertEquals("127.0.0.1", addresses[1].getAddress())__        assertEquals(2346, addresses[1].getPort())__    };test,ipv4,host,with,port,range,works;public,void,test,parse,v4with,port,range,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,2345,2346,1234,integer,assert,equals,2,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port,assert,equals,127,0,0,1,addresses,1,get,address,assert,equals,2346,addresses,1,get,port
TcpTransportTests -> public void testParseV4WithPortRange() throws Exception;1540486836;Test ipv4 host with port range works;public void testParseV4WithPortRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1:2345-2346", "1234", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())___        assertEquals("127.0.0.1", addresses[1].getAddress())__        assertEquals(2346, addresses[1].getPort())__    };test,ipv4,host,with,port,range,works;public,void,test,parse,v4with,port,range,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,2345,2346,1234,integer,assert,equals,2,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port,assert,equals,127,0,0,1,addresses,1,get,address,assert,equals,2346,addresses,1,get,port
TcpTransportTests -> public void testParseV4WithPortRange() throws Exception;1541552300;Test ipv4 host with port range works;public void testParseV4WithPortRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1:2345-2346", "1234", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())___        assertEquals("127.0.0.1", addresses[1].getAddress())__        assertEquals(2346, addresses[1].getPort())__    };test,ipv4,host,with,port,range,works;public,void,test,parse,v4with,port,range,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,2345,2346,1234,integer,assert,equals,2,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port,assert,equals,127,0,0,1,addresses,1,get,address,assert,equals,2346,addresses,1,get,port
TcpTransportTests -> public void testParseV4WithPortRange() throws Exception;1541698679;Test ipv4 host with port range works;public void testParseV4WithPortRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1:2345-2346", "1234", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())___        assertEquals("127.0.0.1", addresses[1].getAddress())__        assertEquals(2346, addresses[1].getPort())__    };test,ipv4,host,with,port,range,works;public,void,test,parse,v4with,port,range,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,2345,2346,1234,integer,assert,equals,2,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port,assert,equals,127,0,0,1,addresses,1,get,address,assert,equals,2346,addresses,1,get,port
TcpTransportTests -> public void testParseV4WithPortRange() throws Exception;1541725488;Test ipv4 host with port range works;public void testParseV4WithPortRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1:2345-2346", "1234", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())___        assertEquals("127.0.0.1", addresses[1].getAddress())__        assertEquals(2346, addresses[1].getPort())__    };test,ipv4,host,with,port,range,works;public,void,test,parse,v4with,port,range,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,2345,2346,1234,integer,assert,equals,2,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port,assert,equals,127,0,0,1,addresses,1,get,address,assert,equals,2346,addresses,1,get,port
TcpTransportTests -> public void testParseV4WithPortRange() throws Exception;1543334894;Test ipv4 host with port range works;public void testParseV4WithPortRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1:2345-2346", "1234", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())___        assertEquals("127.0.0.1", addresses[1].getAddress())__        assertEquals(2346, addresses[1].getPort())__    };test,ipv4,host,with,port,range,works;public,void,test,parse,v4with,port,range,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,2345,2346,1234,integer,assert,equals,2,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port,assert,equals,127,0,0,1,addresses,1,get,address,assert,equals,2346,addresses,1,get,port
TcpTransportTests -> public void testParseV4WithPortRange() throws Exception;1543506953;Test ipv4 host with port range works;public void testParseV4WithPortRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1:2345-2346", "1234", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())___        assertEquals("127.0.0.1", addresses[1].getAddress())__        assertEquals(2346, addresses[1].getPort())__    };test,ipv4,host,with,port,range,works;public,void,test,parse,v4with,port,range,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,2345,2346,1234,integer,assert,equals,2,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port,assert,equals,127,0,0,1,addresses,1,get,address,assert,equals,2346,addresses,1,get,port
TcpTransportTests -> public void testParseV4WithPortRange() throws Exception;1543602642;Test ipv4 host with port range works;public void testParseV4WithPortRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1:2345-2346", "1234", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())___        assertEquals("127.0.0.1", addresses[1].getAddress())__        assertEquals(2346, addresses[1].getPort())__    };test,ipv4,host,with,port,range,works;public,void,test,parse,v4with,port,range,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,2345,2346,1234,integer,assert,equals,2,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port,assert,equals,127,0,0,1,addresses,1,get,address,assert,equals,2346,addresses,1,get,port
TcpTransportTests -> public void testParseV4WithPortRange() throws Exception;1544554541;Test ipv4 host with port range works;public void testParseV4WithPortRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1:2345-2346", "1234", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())___        assertEquals("127.0.0.1", addresses[1].getAddress())__        assertEquals(2346, addresses[1].getPort())__    };test,ipv4,host,with,port,range,works;public,void,test,parse,v4with,port,range,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,2345,2346,1234,integer,assert,equals,2,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port,assert,equals,127,0,0,1,addresses,1,get,address,assert,equals,2346,addresses,1,get,port
TcpTransportTests -> public void testParseV4WithPortRange() throws Exception;1544810347;Test ipv4 host with port range works;public void testParseV4WithPortRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1:2345-2346", "1234", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())___        assertEquals("127.0.0.1", addresses[1].getAddress())__        assertEquals(2346, addresses[1].getPort())__    };test,ipv4,host,with,port,range,works;public,void,test,parse,v4with,port,range,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,2345,2346,1234,integer,assert,equals,2,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port,assert,equals,127,0,0,1,addresses,1,get,address,assert,equals,2346,addresses,1,get,port
TcpTransportTests -> public void testParseV4WithPortRange() throws Exception;1545412440;Test ipv4 host with port range works;public void testParseV4WithPortRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1:2345-2346", "1234", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())___        assertEquals("127.0.0.1", addresses[1].getAddress())__        assertEquals(2346, addresses[1].getPort())__    };test,ipv4,host,with,port,range,works;public,void,test,parse,v4with,port,range,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,2345,2346,1234,integer,assert,equals,2,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port,assert,equals,127,0,0,1,addresses,1,get,address,assert,equals,2346,addresses,1,get,port
TcpTransportTests -> public void testParseV4WithPortRange() throws Exception;1548105258;Test ipv4 host with port range works;public void testParseV4WithPortRange() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1:2345-2346", "1234", Integer.MAX_VALUE)__        assertEquals(2, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(2345, addresses[0].getPort())___        assertEquals("127.0.0.1", addresses[1].getAddress())__        assertEquals(2346, addresses[1].getPort())__    };test,ipv4,host,with,port,range,works;public,void,test,parse,v4with,port,range,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,2345,2346,1234,integer,assert,equals,2,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,2345,addresses,0,get,port,assert,equals,127,0,0,1,addresses,1,get,address,assert,equals,2346,addresses,1,get,port
TcpTransportTests -> public void testParseV4DefaultPort() throws Exception;1524684173;Test ipv4 host with a default port works;public void testParseV4DefaultPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())__    };test,ipv4,host,with,a,default,port,works;public,void,test,parse,v4default,port,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,1234,integer,assert,equals,1,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port
TcpTransportTests -> public void testParseV4DefaultPort() throws Exception;1527878678;Test ipv4 host with a default port works;public void testParseV4DefaultPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())__    };test,ipv4,host,with,a,default,port,works;public,void,test,parse,v4default,port,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,1234,integer,assert,equals,1,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port
TcpTransportTests -> public void testParseV4DefaultPort() throws Exception;1528762805;Test ipv4 host with a default port works;public void testParseV4DefaultPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())__    };test,ipv4,host,with,a,default,port,works;public,void,test,parse,v4default,port,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,1234,integer,assert,equals,1,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port
TcpTransportTests -> public void testParseV4DefaultPort() throws Exception;1529600205;Test ipv4 host with a default port works;public void testParseV4DefaultPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())__    };test,ipv4,host,with,a,default,port,works;public,void,test,parse,v4default,port,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,1234,integer,assert,equals,1,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port
TcpTransportTests -> public void testParseV4DefaultPort() throws Exception;1534203100;Test ipv4 host with a default port works;public void testParseV4DefaultPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())__    };test,ipv4,host,with,a,default,port,works;public,void,test,parse,v4default,port,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,1234,integer,assert,equals,1,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port
TcpTransportTests -> public void testParseV4DefaultPort() throws Exception;1534362961;Test ipv4 host with a default port works;public void testParseV4DefaultPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())__    };test,ipv4,host,with,a,default,port,works;public,void,test,parse,v4default,port,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,1234,integer,assert,equals,1,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port
TcpTransportTests -> public void testParseV4DefaultPort() throws Exception;1534848846;Test ipv4 host with a default port works;public void testParseV4DefaultPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())__    };test,ipv4,host,with,a,default,port,works;public,void,test,parse,v4default,port,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,1234,integer,assert,equals,1,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port
TcpTransportTests -> public void testParseV4DefaultPort() throws Exception;1535139672;Test ipv4 host with a default port works;public void testParseV4DefaultPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())__    };test,ipv4,host,with,a,default,port,works;public,void,test,parse,v4default,port,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,1234,integer,assert,equals,1,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port
TcpTransportTests -> public void testParseV4DefaultPort() throws Exception;1537300661;Test ipv4 host with a default port works;public void testParseV4DefaultPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())__    };test,ipv4,host,with,a,default,port,works;public,void,test,parse,v4default,port,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,1234,integer,assert,equals,1,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port
TcpTransportTests -> public void testParseV4DefaultPort() throws Exception;1538067637;Test ipv4 host with a default port works;public void testParseV4DefaultPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())__    };test,ipv4,host,with,a,default,port,works;public,void,test,parse,v4default,port,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,1234,integer,assert,equals,1,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port
TcpTransportTests -> public void testParseV4DefaultPort() throws Exception;1540486836;Test ipv4 host with a default port works;public void testParseV4DefaultPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())__    };test,ipv4,host,with,a,default,port,works;public,void,test,parse,v4default,port,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,1234,integer,assert,equals,1,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port
TcpTransportTests -> public void testParseV4DefaultPort() throws Exception;1541552300;Test ipv4 host with a default port works;public void testParseV4DefaultPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())__    };test,ipv4,host,with,a,default,port,works;public,void,test,parse,v4default,port,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,1234,integer,assert,equals,1,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port
TcpTransportTests -> public void testParseV4DefaultPort() throws Exception;1541698679;Test ipv4 host with a default port works;public void testParseV4DefaultPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())__    };test,ipv4,host,with,a,default,port,works;public,void,test,parse,v4default,port,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,1234,integer,assert,equals,1,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port
TcpTransportTests -> public void testParseV4DefaultPort() throws Exception;1541725488;Test ipv4 host with a default port works;public void testParseV4DefaultPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())__    };test,ipv4,host,with,a,default,port,works;public,void,test,parse,v4default,port,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,1234,integer,assert,equals,1,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port
TcpTransportTests -> public void testParseV4DefaultPort() throws Exception;1543334894;Test ipv4 host with a default port works;public void testParseV4DefaultPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())__    };test,ipv4,host,with,a,default,port,works;public,void,test,parse,v4default,port,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,1234,integer,assert,equals,1,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port
TcpTransportTests -> public void testParseV4DefaultPort() throws Exception;1543506953;Test ipv4 host with a default port works;public void testParseV4DefaultPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())__    };test,ipv4,host,with,a,default,port,works;public,void,test,parse,v4default,port,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,1234,integer,assert,equals,1,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port
TcpTransportTests -> public void testParseV4DefaultPort() throws Exception;1543602642;Test ipv4 host with a default port works;public void testParseV4DefaultPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())__    };test,ipv4,host,with,a,default,port,works;public,void,test,parse,v4default,port,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,1234,integer,assert,equals,1,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port
TcpTransportTests -> public void testParseV4DefaultPort() throws Exception;1544554541;Test ipv4 host with a default port works;public void testParseV4DefaultPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())__    };test,ipv4,host,with,a,default,port,works;public,void,test,parse,v4default,port,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,1234,integer,assert,equals,1,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port
TcpTransportTests -> public void testParseV4DefaultPort() throws Exception;1544810347;Test ipv4 host with a default port works;public void testParseV4DefaultPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())__    };test,ipv4,host,with,a,default,port,works;public,void,test,parse,v4default,port,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,1234,integer,assert,equals,1,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port
TcpTransportTests -> public void testParseV4DefaultPort() throws Exception;1545412440;Test ipv4 host with a default port works;public void testParseV4DefaultPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())__    };test,ipv4,host,with,a,default,port,works;public,void,test,parse,v4default,port,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,1234,integer,assert,equals,1,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port
TcpTransportTests -> public void testParseV4DefaultPort() throws Exception;1548105258;Test ipv4 host with a default port works;public void testParseV4DefaultPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("127.0.0.1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())__    };test,ipv4,host,with,a,default,port,works;public,void,test,parse,v4default,port,throws,exception,transport,address,addresses,tcp,transport,parse,127,0,0,1,1234,integer,assert,equals,1,addresses,length,assert,equals,127,0,0,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port
TcpTransportTests -> public void testParseV6DefaultPort() throws Exception;1524684173;Test ipv6 host with a default port works;public void testParseV6DefaultPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())__    };test,ipv6,host,with,a,default,port,works;public,void,test,parse,v6default,port,throws,exception,transport,address,addresses,tcp,transport,parse,1,1234,integer,assert,equals,1,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port
TcpTransportTests -> public void testParseV6DefaultPort() throws Exception;1527878678;Test ipv6 host with a default port works;public void testParseV6DefaultPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())__    };test,ipv6,host,with,a,default,port,works;public,void,test,parse,v6default,port,throws,exception,transport,address,addresses,tcp,transport,parse,1,1234,integer,assert,equals,1,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port
TcpTransportTests -> public void testParseV6DefaultPort() throws Exception;1528762805;Test ipv6 host with a default port works;public void testParseV6DefaultPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())__    };test,ipv6,host,with,a,default,port,works;public,void,test,parse,v6default,port,throws,exception,transport,address,addresses,tcp,transport,parse,1,1234,integer,assert,equals,1,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port
TcpTransportTests -> public void testParseV6DefaultPort() throws Exception;1529600205;Test ipv6 host with a default port works;public void testParseV6DefaultPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())__    };test,ipv6,host,with,a,default,port,works;public,void,test,parse,v6default,port,throws,exception,transport,address,addresses,tcp,transport,parse,1,1234,integer,assert,equals,1,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port
TcpTransportTests -> public void testParseV6DefaultPort() throws Exception;1534203100;Test ipv6 host with a default port works;public void testParseV6DefaultPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())__    };test,ipv6,host,with,a,default,port,works;public,void,test,parse,v6default,port,throws,exception,transport,address,addresses,tcp,transport,parse,1,1234,integer,assert,equals,1,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port
TcpTransportTests -> public void testParseV6DefaultPort() throws Exception;1534362961;Test ipv6 host with a default port works;public void testParseV6DefaultPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())__    };test,ipv6,host,with,a,default,port,works;public,void,test,parse,v6default,port,throws,exception,transport,address,addresses,tcp,transport,parse,1,1234,integer,assert,equals,1,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port
TcpTransportTests -> public void testParseV6DefaultPort() throws Exception;1534848846;Test ipv6 host with a default port works;public void testParseV6DefaultPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())__    };test,ipv6,host,with,a,default,port,works;public,void,test,parse,v6default,port,throws,exception,transport,address,addresses,tcp,transport,parse,1,1234,integer,assert,equals,1,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port
TcpTransportTests -> public void testParseV6DefaultPort() throws Exception;1535139672;Test ipv6 host with a default port works;public void testParseV6DefaultPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())__    };test,ipv6,host,with,a,default,port,works;public,void,test,parse,v6default,port,throws,exception,transport,address,addresses,tcp,transport,parse,1,1234,integer,assert,equals,1,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port
TcpTransportTests -> public void testParseV6DefaultPort() throws Exception;1537300661;Test ipv6 host with a default port works;public void testParseV6DefaultPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())__    };test,ipv6,host,with,a,default,port,works;public,void,test,parse,v6default,port,throws,exception,transport,address,addresses,tcp,transport,parse,1,1234,integer,assert,equals,1,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port
TcpTransportTests -> public void testParseV6DefaultPort() throws Exception;1538067637;Test ipv6 host with a default port works;public void testParseV6DefaultPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())__    };test,ipv6,host,with,a,default,port,works;public,void,test,parse,v6default,port,throws,exception,transport,address,addresses,tcp,transport,parse,1,1234,integer,assert,equals,1,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port
TcpTransportTests -> public void testParseV6DefaultPort() throws Exception;1540486836;Test ipv6 host with a default port works;public void testParseV6DefaultPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())__    };test,ipv6,host,with,a,default,port,works;public,void,test,parse,v6default,port,throws,exception,transport,address,addresses,tcp,transport,parse,1,1234,integer,assert,equals,1,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port
TcpTransportTests -> public void testParseV6DefaultPort() throws Exception;1541552300;Test ipv6 host with a default port works;public void testParseV6DefaultPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())__    };test,ipv6,host,with,a,default,port,works;public,void,test,parse,v6default,port,throws,exception,transport,address,addresses,tcp,transport,parse,1,1234,integer,assert,equals,1,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port
TcpTransportTests -> public void testParseV6DefaultPort() throws Exception;1541698679;Test ipv6 host with a default port works;public void testParseV6DefaultPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())__    };test,ipv6,host,with,a,default,port,works;public,void,test,parse,v6default,port,throws,exception,transport,address,addresses,tcp,transport,parse,1,1234,integer,assert,equals,1,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port
TcpTransportTests -> public void testParseV6DefaultPort() throws Exception;1541725488;Test ipv6 host with a default port works;public void testParseV6DefaultPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())__    };test,ipv6,host,with,a,default,port,works;public,void,test,parse,v6default,port,throws,exception,transport,address,addresses,tcp,transport,parse,1,1234,integer,assert,equals,1,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port
TcpTransportTests -> public void testParseV6DefaultPort() throws Exception;1543334894;Test ipv6 host with a default port works;public void testParseV6DefaultPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())__    };test,ipv6,host,with,a,default,port,works;public,void,test,parse,v6default,port,throws,exception,transport,address,addresses,tcp,transport,parse,1,1234,integer,assert,equals,1,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port
TcpTransportTests -> public void testParseV6DefaultPort() throws Exception;1543506953;Test ipv6 host with a default port works;public void testParseV6DefaultPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())__    };test,ipv6,host,with,a,default,port,works;public,void,test,parse,v6default,port,throws,exception,transport,address,addresses,tcp,transport,parse,1,1234,integer,assert,equals,1,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port
TcpTransportTests -> public void testParseV6DefaultPort() throws Exception;1543602642;Test ipv6 host with a default port works;public void testParseV6DefaultPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())__    };test,ipv6,host,with,a,default,port,works;public,void,test,parse,v6default,port,throws,exception,transport,address,addresses,tcp,transport,parse,1,1234,integer,assert,equals,1,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port
TcpTransportTests -> public void testParseV6DefaultPort() throws Exception;1544554541;Test ipv6 host with a default port works;public void testParseV6DefaultPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())__    };test,ipv6,host,with,a,default,port,works;public,void,test,parse,v6default,port,throws,exception,transport,address,addresses,tcp,transport,parse,1,1234,integer,assert,equals,1,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port
TcpTransportTests -> public void testParseV6DefaultPort() throws Exception;1544810347;Test ipv6 host with a default port works;public void testParseV6DefaultPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())__    };test,ipv6,host,with,a,default,port,works;public,void,test,parse,v6default,port,throws,exception,transport,address,addresses,tcp,transport,parse,1,1234,integer,assert,equals,1,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port
TcpTransportTests -> public void testParseV6DefaultPort() throws Exception;1545412440;Test ipv6 host with a default port works;public void testParseV6DefaultPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())__    };test,ipv6,host,with,a,default,port,works;public,void,test,parse,v6default,port,throws,exception,transport,address,addresses,tcp,transport,parse,1,1234,integer,assert,equals,1,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port
TcpTransportTests -> public void testParseV6DefaultPort() throws Exception;1548105258;Test ipv6 host with a default port works;public void testParseV6DefaultPort() throws Exception {_        TransportAddress[] addresses = TcpTransport.parse("[::1]", "1234", Integer.MAX_VALUE)__        assertEquals(1, addresses.length)___        assertEquals("::1", addresses[0].getAddress())__        assertEquals(1234, addresses[0].getPort())__    };test,ipv6,host,with,a,default,port,works;public,void,test,parse,v6default,port,throws,exception,transport,address,addresses,tcp,transport,parse,1,1234,integer,assert,equals,1,addresses,length,assert,equals,1,addresses,0,get,address,assert,equals,1234,addresses,0,get,port
