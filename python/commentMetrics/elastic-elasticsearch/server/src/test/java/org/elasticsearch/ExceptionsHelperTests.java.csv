commented;modifiers;parameterAmount;loc;comment;code
false;public;0;47;;public void testMaybeError() {     final Error outOfMemoryError = new OutOfMemoryError().     assertError(outOfMemoryError, outOfMemoryError).     final DecoderException decoderException = new DecoderException(outOfMemoryError).     assertError(decoderException, outOfMemoryError).     final Exception e = new Exception().     e.addSuppressed(decoderException).     assertError(e, outOfMemoryError).     final int depth = randomIntBetween(1, 16).     Throwable cause = new Exception().     boolean fatal = false.     Error error = null.     for (int i = 0. i < depth. i++) {         final int length = randomIntBetween(1, 4).         for (int j = 0. j < length. j++) {             if (!fatal && rarely()) {                 error = new Error().                 cause.addSuppressed(error).                 fatal = true.             } else {                 cause.addSuppressed(new Exception()).             }         }         if (!fatal && rarely()) {             cause = error = new Error(cause).             fatal = true.         } else {             cause = new Exception(cause).         }     }     if (fatal) {         assertError(cause, error).     } else {         assertFalse(maybeError(cause, logger).isPresent()).     }     assertFalse(maybeError(new Exception(new DecoderException()), logger).isPresent()).     Throwable chain = outOfMemoryError.     for (int i = 0. i < MAX_ITERATIONS. i++) {         chain = new Exception(chain).     }     assertFalse(maybeError(chain, logger).isPresent()). }
false;private;2;5;;private void assertError(final Throwable cause, final Error error) {     final Optional<Error> maybeError = maybeError(cause, logger).     assertTrue(maybeError.isPresent()).     assertThat(maybeError.get(), equalTo(error)). }
false;public;0;4;;public void testStatus() {     assertThat(ExceptionsHelper.status(new IllegalArgumentException("illegal")), equalTo(RestStatus.BAD_REQUEST)).     assertThat(ExceptionsHelper.status(new EsRejectedExecutionException("rejected")), equalTo(RestStatus.TOO_MANY_REQUESTS)). }
false;public;0;24;;public void testGroupBy() {     ShardOperationFailedException[] failures = new ShardOperationFailedException[] { createShardFailureParsingException("error", "node0", "index", 0, null), createShardFailureParsingException("error", "node1", "index", 1, null), createShardFailureParsingException("error", "node2", "index2", 2, null), createShardFailureParsingException("error", "node0", "index", 0, "cluster1"), createShardFailureParsingException("error", "node1", "index", 1, "cluster1"), createShardFailureParsingException("error", "node2", "index", 2, "cluster1"), createShardFailureParsingException("error", "node0", "index", 0, "cluster2"), createShardFailureParsingException("error", "node1", "index", 1, "cluster2"), createShardFailureParsingException("error", "node2", "index", 2, "cluster2"), createShardFailureParsingException("another error", "node2", "index", 2, "cluster2") }.     ShardOperationFailedException[] groupBy = ExceptionsHelper.groupBy(failures).     assertThat(groupBy.length, equalTo(5)).     String[] expectedIndices = new String[] { "index", "index2", "cluster1:index", "cluster2:index", "cluster2:index" }.     String[] expectedErrors = new String[] { "error", "error", "error", "error", "another error" }.     int i = 0.     for (ShardOperationFailedException shardOperationFailedException : groupBy) {         assertThat(shardOperationFailedException.getCause().getMessage(), equalTo(expectedErrors[i])).         assertThat(shardOperationFailedException.index(), equalTo(expectedIndices[i++])).     } }
false;private,static;5;6;;private static ShardSearchFailure createShardFailureParsingException(String error, String nodeId, String index, int shardId, String clusterAlias) {     ParsingException ex = new ParsingException(0, 0, error, new IllegalArgumentException("some bad argument")).     ex.setIndex(index).     return new ShardSearchFailure(ex, createSearchShardTarget(nodeId, shardId, index, clusterAlias)). }
false;private,static;4;4;;private static SearchShardTarget createSearchShardTarget(String nodeId, int shardId, String index, String clusterAlias) {     return new SearchShardTarget(nodeId, new ShardId(new Index(index, IndexMetaData.INDEX_UUID_NA_VALUE), shardId), clusterAlias, OriginalIndices.NONE). }
false;public;0;27;;public void testGroupByNullTarget() {     ShardOperationFailedException[] failures = new ShardOperationFailedException[] { createShardFailureQueryShardException("error", "index", null), createShardFailureQueryShardException("error", "index", null), createShardFailureQueryShardException("error", "index", null), createShardFailureQueryShardException("error", "index", "cluster1"), createShardFailureQueryShardException("error", "index", "cluster1"), createShardFailureQueryShardException("error", "index", "cluster1"), createShardFailureQueryShardException("error", "index", "cluster2"), createShardFailureQueryShardException("error", "index", "cluster2"), createShardFailureQueryShardException("error", "index2", null), createShardFailureQueryShardException("another error", "index2", null) }.     ShardOperationFailedException[] groupBy = ExceptionsHelper.groupBy(failures).     assertThat(groupBy.length, equalTo(5)).     String[] expectedIndices = new String[] { "index", "cluster1:index", "cluster2:index", "index2", "index2" }.     String[] expectedErrors = new String[] { "error", "error", "error", "error", "another error" }.     int i = 0.     for (ShardOperationFailedException shardOperationFailedException : groupBy) {         assertThat(shardOperationFailedException.index(), nullValue()).         assertThat(shardOperationFailedException.getCause(), instanceOf(ElasticsearchException.class)).         ElasticsearchException elasticsearchException = (ElasticsearchException) shardOperationFailedException.getCause().         assertThat(elasticsearchException.getMessage(), equalTo(expectedErrors[i])).         assertThat(elasticsearchException.getIndex().getName(), equalTo(expectedIndices[i++])).     } }
false;private,static;3;5;;private static ShardSearchFailure createShardFailureQueryShardException(String error, String indexName, String clusterAlias) {     Index index = new Index(RemoteClusterAware.buildRemoteIndexName(clusterAlias, indexName), "uuid").     QueryShardException queryShardException = new QueryShardException(index, error, new IllegalArgumentException("parse error")).     return new ShardSearchFailure(queryShardException, null). }
false;public;0;9;;public void testGroupByNullIndex() {     ShardOperationFailedException[] failures = new ShardOperationFailedException[] { new ShardSearchFailure(new IllegalArgumentException("error")), new ShardSearchFailure(new ParsingException(0, 0, "error", null)) }.     ShardOperationFailedException[] groupBy = ExceptionsHelper.groupBy(failures).     assertThat(groupBy.length, equalTo(2)). }
