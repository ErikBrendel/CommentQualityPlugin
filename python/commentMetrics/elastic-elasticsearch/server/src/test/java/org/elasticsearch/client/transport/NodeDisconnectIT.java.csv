commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;public void testNotifyOnDisconnect() throws IOException {     internalCluster().ensureAtLeastNumDataNodes(2).     final Set<DiscoveryNode> disconnectedNodes = Collections.synchronizedSet(new HashSet<>()).     try (TransportClient client = new MockTransportClient(Settings.builder().put("cluster.name", internalCluster().getClusterName()).put(CLIENT_TRANSPORT_NODES_SAMPLER_INTERVAL.getKey(), // disable sniffing for better control     "1h").build(), Collections.emptySet(), (n, e) -> disconnectedNodes.add(n))) {         for (TransportService service : internalCluster().getInstances(TransportService.class)) {             client.addTransportAddress(service.boundAddress().publishAddress()).         }         internalCluster().stopRandomDataNode().         for (int i = 0. i < 20. i++) {             // fire up requests such that we hit the node and pass it to the listener             client.admin().cluster().prepareState().get().         }         assertEquals(1, disconnectedNodes.size()).     }     assertEquals(1, disconnectedNodes.size()). }
false;public;0;21;;public void testNotifyOnDisconnectInSniffer() throws IOException {     internalCluster().ensureAtLeastNumDataNodes(2).     final Set<DiscoveryNode> disconnectedNodes = Collections.synchronizedSet(new HashSet<>()).     try (TransportClient client = new MockTransportClient(Settings.builder().put("cluster.name", internalCluster().getClusterName()).build(), Collections.emptySet(), (n, e) -> disconnectedNodes.add(n))) {         int numNodes = 0.         for (TransportService service : internalCluster().getInstances(TransportService.class)) {             numNodes++.             client.addTransportAddress(service.boundAddress().publishAddress()).         }         Set<TransportAddress> discoveryNodes = client.connectedNodes().stream().map(n -> n.getAddress()).collect(Collectors.toSet()).         assertEquals(numNodes, discoveryNodes.size()).         assertEquals(0, disconnectedNodes.size()).         internalCluster().stopRandomDataNode().         client.getNodesService().doSample().         assertEquals(1, disconnectedNodes.size()).         assertTrue(discoveryNodes.contains(disconnectedNodes.stream().findAny().get().getAddress())).     }     assertEquals(1, disconnectedNodes.size()). }
