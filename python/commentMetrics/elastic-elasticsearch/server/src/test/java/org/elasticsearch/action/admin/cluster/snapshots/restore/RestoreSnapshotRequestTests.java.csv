commented;modifiers;parameterAmount;loc;comment;code
false;private;1;60;;private RestoreSnapshotRequest randomState(RestoreSnapshotRequest instance) {     if (randomBoolean()) {         List<String> indices = new ArrayList<>().         int count = randomInt(3) + 1.         for (int i = 0. i < count. ++i) {             indices.add(randomAlphaOfLength(randomInt(3) + 2)).         }         instance.indices(indices).     }     if (randomBoolean()) {         instance.renamePattern(randomUnicodeOfLengthBetween(1, 100)).     }     if (randomBoolean()) {         instance.renameReplacement(randomUnicodeOfLengthBetween(1, 100)).     }     instance.partial(randomBoolean()).     instance.includeAliases(randomBoolean()).     if (randomBoolean()) {         Map<String, Object> settings = new HashMap<>().         int count = randomInt(3) + 1.         for (int i = 0. i < count. ++i) {             settings.put(randomAlphaOfLengthBetween(2, 5), randomAlphaOfLengthBetween(2, 5)).         }         instance.settings(settings).     }     if (randomBoolean()) {         Map<String, Object> indexSettings = new HashMap<>().         int count = randomInt(3) + 1.         for (int i = 0. i < count. ++i) {             indexSettings.put(randomAlphaOfLengthBetween(2, 5), randomAlphaOfLengthBetween(2, 5)).         }         instance.indexSettings(indexSettings).     }     instance.includeGlobalState(randomBoolean()).     if (randomBoolean()) {         Collection<IndicesOptions.WildcardStates> wildcardStates = randomSubsetOf(Arrays.asList(IndicesOptions.WildcardStates.values())).         Collection<IndicesOptions.Option> options = randomSubsetOf(Arrays.asList(IndicesOptions.Option.ALLOW_NO_INDICES, IndicesOptions.Option.IGNORE_UNAVAILABLE)).         instance.indicesOptions(new IndicesOptions(options.isEmpty() ? IndicesOptions.Option.NONE : EnumSet.copyOf(options), wildcardStates.isEmpty() ? IndicesOptions.WildcardStates.NONE : EnumSet.copyOf(wildcardStates))).     }     instance.waitForCompletion(randomBoolean()).     if (randomBoolean()) {         instance.masterNodeTimeout(randomTimeValue()).     }     return instance. }
false;protected;0;4;;@Override protected RestoreSnapshotRequest createTestInstance() {     return randomState(new RestoreSnapshotRequest(randomAlphaOfLength(5), randomAlphaOfLength(10))). }
false;protected;0;4;;@Override protected Writeable.Reader<RestoreSnapshotRequest> instanceReader() {     return RestoreSnapshotRequest::new. }
false;protected;1;7;;@Override protected RestoreSnapshotRequest mutateInstance(RestoreSnapshotRequest instance) throws IOException {     RestoreSnapshotRequest copy = copyInstance(instance).     // ensure that at least one property is different     copy.repository("copied-" + instance.repository()).     return randomState(copy). }
false;public;0;18;;public void testSource() throws IOException {     RestoreSnapshotRequest original = createTestInstance().     XContentBuilder builder = original.toXContent(XContentFactory.jsonBuilder(), new ToXContent.MapParams(Collections.emptyMap())).     XContentParser parser = XContentType.JSON.xContent().createParser(NamedXContentRegistry.EMPTY, null, BytesReference.bytes(builder).streamInput()).     Map<String, Object> map = parser.mapOrdered().     // we will only restore properties from the map that are contained in the request body. All other     // properties are restored from the original (in the actual REST action this is restored from the     // REST path and request parameters).     RestoreSnapshotRequest processed = new RestoreSnapshotRequest(original.repository(), original.snapshot()).     processed.masterNodeTimeout(original.masterNodeTimeout()).     processed.waitForCompletion(original.waitForCompletion()).     processed.source(map).     assertEquals(original, processed). }
