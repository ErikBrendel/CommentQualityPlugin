commented;modifiers;parameterAmount;loc;comment;code
false;public;0;31;;public void testThatMgetShouldWorkWithOneIndexMissing() throws IOException {     createIndex("test").     client().prepareIndex("test", "test", "1").setSource(jsonBuilder().startObject().field("foo", "bar").endObject()).setRefreshPolicy(IMMEDIATE).get().     MultiGetResponse mgetResponse = client().prepareMultiGet().add(new MultiGetRequest.Item("test", "test", "1")).add(new MultiGetRequest.Item("nonExistingIndex", "test", "1")).get().     assertThat(mgetResponse.getResponses().length, is(2)).     assertThat(mgetResponse.getResponses()[0].getIndex(), is("test")).     assertThat(mgetResponse.getResponses()[0].isFailed(), is(false)).     assertThat(mgetResponse.getResponses()[1].getIndex(), is("nonExistingIndex")).     assertThat(mgetResponse.getResponses()[1].isFailed(), is(true)).     assertThat(mgetResponse.getResponses()[1].getFailure().getMessage(), is("no such index [nonExistingIndex]")).     assertThat(((ElasticsearchException) mgetResponse.getResponses()[1].getFailure().getFailure()).getIndex().getName(), is("nonExistingIndex")).     mgetResponse = client().prepareMultiGet().add(new MultiGetRequest.Item("nonExistingIndex", "test", "1")).get().     assertThat(mgetResponse.getResponses().length, is(1)).     assertThat(mgetResponse.getResponses()[0].getIndex(), is("nonExistingIndex")).     assertThat(mgetResponse.getResponses()[0].isFailed(), is(true)).     assertThat(mgetResponse.getResponses()[0].getFailure().getMessage(), is("no such index [nonExistingIndex]")).     assertThat(((ElasticsearchException) mgetResponse.getResponses()[0].getFailure().getFailure()).getIndex().getName(), is("nonExistingIndex")). }
false;public;0;28;;public void testThatMgetShouldWorkWithMultiIndexAlias() throws IOException {     assertAcked(prepareCreate("test").addAlias(new Alias("multiIndexAlias"))).     assertAcked(prepareCreate("test2").addAlias(new Alias("multiIndexAlias"))).     client().prepareIndex("test", "test", "1").setSource(jsonBuilder().startObject().field("foo", "bar").endObject()).setRefreshPolicy(IMMEDIATE).get().     MultiGetResponse mgetResponse = client().prepareMultiGet().add(new MultiGetRequest.Item("test", "test", "1")).add(new MultiGetRequest.Item("multiIndexAlias", "test", "1")).get().     assertThat(mgetResponse.getResponses().length, is(2)).     assertThat(mgetResponse.getResponses()[0].getIndex(), is("test")).     assertThat(mgetResponse.getResponses()[0].isFailed(), is(false)).     assertThat(mgetResponse.getResponses()[1].getIndex(), is("multiIndexAlias")).     assertThat(mgetResponse.getResponses()[1].isFailed(), is(true)).     assertThat(mgetResponse.getResponses()[1].getFailure().getMessage(), containsString("more than one indices")).     mgetResponse = client().prepareMultiGet().add(new MultiGetRequest.Item("multiIndexAlias", "test", "1")).get().     assertThat(mgetResponse.getResponses().length, is(1)).     assertThat(mgetResponse.getResponses()[0].getIndex(), is("multiIndexAlias")).     assertThat(mgetResponse.getResponses()[0].isFailed(), is(true)).     assertThat(mgetResponse.getResponses()[0].getFailure().getMessage(), containsString("more than one indices")). }
false;public;0;16;;public void testThatMgetShouldWorkWithAliasRouting() throws IOException {     assertAcked(prepareCreate("test").addAlias(new Alias("alias1").routing("abc")).addMapping("test", jsonBuilder().startObject().startObject("test").startObject("_routing").field("required", true).endObject().endObject().endObject())).     client().prepareIndex("alias1", "test", "1").setSource(jsonBuilder().startObject().field("foo", "bar").endObject()).setRefreshPolicy(IMMEDIATE).get().     MultiGetResponse mgetResponse = client().prepareMultiGet().add(new MultiGetRequest.Item("alias1", "test", "1")).get().     assertEquals(1, mgetResponse.getResponses().length).     assertEquals("test", mgetResponse.getResponses()[0].getIndex()).     assertFalse(mgetResponse.getResponses()[0].isFailed()). }
false;public;0;40;;@SuppressWarnings("unchecked") public void testThatSourceFilteringIsSupported() throws Exception {     assertAcked(prepareCreate("test").addAlias(new Alias("alias"))).     BytesReference sourceBytesRef = BytesReference.bytes(jsonBuilder().startObject().array("field", "1", "2").startObject("included").field("field", "should be seen").field("hidden_field", "should not be seen").endObject().field("excluded", "should not be seen").endObject()).     for (int i = 0. i < 100. i++) {         client().prepareIndex("test", "type", Integer.toString(i)).setSource(sourceBytesRef, XContentType.JSON).get().     }     MultiGetRequestBuilder request = client().prepareMultiGet().     for (int i = 0. i < 100. i++) {         if (i % 2 == 0) {             request.add(new MultiGetRequest.Item(indexOrAlias(), "type", Integer.toString(i)).fetchSourceContext(new FetchSourceContext(true, new String[] { "included" }, new String[] { "*.hidden_field" }))).         } else {             request.add(new MultiGetRequest.Item(indexOrAlias(), "type", Integer.toString(i)).fetchSourceContext(new FetchSourceContext(false))).         }     }     MultiGetResponse response = request.get().     assertThat(response.getResponses().length, equalTo(100)).     for (int i = 0. i < 100. i++) {         MultiGetItemResponse responseItem = response.getResponses()[i].         assertThat(responseItem.getIndex(), equalTo("test")).         if (i % 2 == 0) {             Map<String, Object> source = responseItem.getResponse().getSourceAsMap().             assertThat(source.size(), equalTo(1)).             assertThat(source, hasKey("included")).             assertThat(((Map<String, Object>) source.get("included")).size(), equalTo(1)).             assertThat(((Map<String, Object>) source.get("included")), hasKey("field")).         } else {             assertThat(responseItem.getResponse().getSourceAsBytes(), nullValue()).         }     } }
false;public;0;27;;public void testThatRoutingPerDocumentIsSupported() throws Exception {     assertAcked(prepareCreate("test").addAlias(new Alias("alias")).setSettings(Settings.builder().put(indexSettings()).put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, between(2, DEFAULT_MAX_NUM_SHARDS)))).     final String id = routingKeyForShard("test", 0).     final String routingOtherShard = routingKeyForShard("test", 1).     client().prepareIndex("test", "test", id).setRefreshPolicy(IMMEDIATE).setRouting(routingOtherShard).setSource(jsonBuilder().startObject().field("foo", "bar").endObject()).get().     MultiGetResponse mgetResponse = client().prepareMultiGet().add(new MultiGetRequest.Item(indexOrAlias(), "test", id).routing(routingOtherShard)).add(new MultiGetRequest.Item(indexOrAlias(), "test", id)).get().     assertThat(mgetResponse.getResponses().length, is(2)).     assertThat(mgetResponse.getResponses()[0].isFailed(), is(false)).     assertThat(mgetResponse.getResponses()[0].getResponse().isExists(), is(true)).     assertThat(mgetResponse.getResponses()[0].getResponse().getIndex(), is("test")).     assertThat(mgetResponse.getResponses()[1].isFailed(), is(false)).     assertThat(mgetResponse.getResponses()[1].getResponse().isExists(), is(false)).     assertThat(mgetResponse.getResponses()[1].getResponse().getIndex(), is("test")). }
false;private,static;0;3;;private static String indexOrAlias() {     return randomBoolean() ? "test" : "alias". }
