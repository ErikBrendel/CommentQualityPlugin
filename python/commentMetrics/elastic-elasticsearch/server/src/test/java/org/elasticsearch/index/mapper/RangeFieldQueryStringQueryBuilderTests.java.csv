commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;12;;@Override protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {     mapperService.merge("_doc", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef("_doc", INTEGER_RANGE_FIELD_NAME, "type=integer_range", LONG_RANGE_FIELD_NAME, "type=long_range", FLOAT_RANGE_FIELD_NAME, "type=float_range", DOUBLE_RANGE_FIELD_NAME, "type=double_range", DATE_RANGE_FIELD_NAME, "type=date_range", IP_RANGE_FIELD_NAME, "type=ip_range"))), MapperService.MergeReason.MAPPING_UPDATE). }
false;public;0;7;;public void testIntegerRangeQuery() throws Exception {     Query query = new QueryStringQueryBuilder(INTEGER_RANGE_FIELD_NAME + ":[-450 TO 45000]").toQuery(createShardContext()).     Query range = IntRange.newIntersectsQuery(INTEGER_RANGE_FIELD_NAME, new int[] { -450 }, new int[] { 45000 }).     Query dv = RangeFieldMapper.RangeType.INTEGER.dvRangeQuery(INTEGER_RANGE_FIELD_NAME, BinaryDocValuesRangeQuery.QueryType.INTERSECTS, -450, 45000, true, true).     assertEquals(new IndexOrDocValuesQuery(range, dv), query). }
false;public;0;7;;public void testLongRangeQuery() throws Exception {     Query query = new QueryStringQueryBuilder(LONG_RANGE_FIELD_NAME + ":[-450 TO 45000]").toQuery(createShardContext()).     Query range = LongRange.newIntersectsQuery(LONG_RANGE_FIELD_NAME, new long[] { -450 }, new long[] { 45000 }).     Query dv = RangeFieldMapper.RangeType.LONG.dvRangeQuery(LONG_RANGE_FIELD_NAME, BinaryDocValuesRangeQuery.QueryType.INTERSECTS, -450, 45000, true, true).     assertEquals(new IndexOrDocValuesQuery(range, dv), query). }
false;public;0;7;;public void testFloatRangeQuery() throws Exception {     Query query = new QueryStringQueryBuilder(FLOAT_RANGE_FIELD_NAME + ":[-450 TO 45000]").toQuery(createShardContext()).     Query range = FloatRange.newIntersectsQuery(FLOAT_RANGE_FIELD_NAME, new float[] { -450 }, new float[] { 45000 }).     Query dv = RangeFieldMapper.RangeType.FLOAT.dvRangeQuery(FLOAT_RANGE_FIELD_NAME, BinaryDocValuesRangeQuery.QueryType.INTERSECTS, -450.0f, 45000.0f, true, true).     assertEquals(new IndexOrDocValuesQuery(range, dv), query). }
false;public;0;7;;public void testDoubleRangeQuery() throws Exception {     Query query = new QueryStringQueryBuilder(DOUBLE_RANGE_FIELD_NAME + ":[-450 TO 45000]").toQuery(createShardContext()).     Query range = DoubleRange.newIntersectsQuery(DOUBLE_RANGE_FIELD_NAME, new double[] { -450 }, new double[] { 45000 }).     Query dv = RangeFieldMapper.RangeType.DOUBLE.dvRangeQuery(DOUBLE_RANGE_FIELD_NAME, BinaryDocValuesRangeQuery.QueryType.INTERSECTS, -450.0, 45000.0, true, true).     assertEquals(new IndexOrDocValuesQuery(range, dv), query). }
false;public;0;14;;public void testDateRangeQuery() throws Exception {     QueryShardContext context = createShardContext().     RangeFieldMapper.RangeFieldType type = (RangeFieldMapper.RangeFieldType) context.fieldMapper(DATE_RANGE_FIELD_NAME).     DateMathParser parser = type.dateMathParser.     Query query = new QueryStringQueryBuilder(DATE_RANGE_FIELD_NAME + ":[2010-01-01 TO 2018-01-01]").toQuery(createShardContext()).     Query range = LongRange.newIntersectsQuery(DATE_RANGE_FIELD_NAME, new long[] { parser.parse("2010-01-01", () -> 0).toEpochMilli() }, new long[] { parser.parse("2018-01-01", () -> 0).toEpochMilli() }).     Query dv = RangeFieldMapper.RangeType.DATE.dvRangeQuery(DATE_RANGE_FIELD_NAME, BinaryDocValuesRangeQuery.QueryType.INTERSECTS, parser.parse("2010-01-01", () -> 0).toEpochMilli(), parser.parse("2018-01-01", () -> 0).toEpochMilli(), true, true).     assertEquals(new IndexOrDocValuesQuery(range, dv), query). }
false;public;0;10;;public void testIPRangeQuery() throws Exception {     InetAddress lower = InetAddresses.forString("192.168.0.1").     InetAddress upper = InetAddresses.forString("192.168.0.5").     Query query = new QueryStringQueryBuilder(IP_RANGE_FIELD_NAME + ":[192.168.0.1 TO 192.168.0.5]").toQuery(createShardContext()).     Query range = InetAddressRange.newIntersectsQuery(IP_RANGE_FIELD_NAME, lower, upper).     Query dv = RangeFieldMapper.RangeType.IP.dvRangeQuery(IP_RANGE_FIELD_NAME, BinaryDocValuesRangeQuery.QueryType.INTERSECTS, lower, upper, true, true).     assertEquals(new IndexOrDocValuesQuery(range, dv), query). }
false;protected;0;4;;@Override protected QueryStringQueryBuilder doCreateTestQueryBuilder() {     return new QueryStringQueryBuilder(INTEGER_RANGE_FIELD_NAME + ":[-450 TO 450]"). }
false;protected;3;4;;@Override protected void doAssertLuceneQuery(QueryStringQueryBuilder queryBuilder, Query query, SearchContext context) throws IOException {     assertThat(query, either(instanceOf(PointRangeQuery.class)).or(instanceOf(IndexOrDocValuesQuery.class))). }
