commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;public void testInvalidBuilderException() {     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new MultiPointBuilder((List<Coordinate>) null)).     assertEquals("cannot create point collection with empty set of points", e.getMessage()).     e = expectThrows(IllegalArgumentException.class, () -> new MultiPointBuilder(new CoordinatesBuilder().build())).     assertEquals("cannot create point collection with empty set of points", e.getMessage()).     // one point is minimum     new MultiPointBuilder(new CoordinatesBuilder().coordinate(0.0, 0.0).build()). }
false;protected;0;4;;@Override protected MultiPointBuilder createTestShapeBuilder() {     return createRandomShape(). }
false;protected;1;4;;@Override protected MultiPointBuilder createMutation(MultiPointBuilder original) throws IOException {     return mutate(original). }
false;static;1;23;;static MultiPointBuilder mutate(MultiPointBuilder original) throws IOException {     MultiPointBuilder mutation = (MultiPointBuilder) copyShape(original).     Coordinate[] coordinates = original.coordinates(false).     if (coordinates.length > 0) {         Coordinate coordinate = randomFrom(coordinates).         if (randomBoolean()) {             if (coordinate.x != 0.0) {                 coordinate.x = coordinate.x / 2.             } else {                 coordinate.x = randomDoubleBetween(-180.0, 180.0, true).             }         } else {             if (coordinate.y != 0.0) {                 coordinate.y = coordinate.y / 2.             } else {                 coordinate.y = randomDoubleBetween(-90.0, 90.0, true).             }         }     } else {         coordinates = new Coordinate[] { new Coordinate(1.0, 1.0) }.     }     return MultiPointBuilder.class.cast(mutation.coordinates(coordinates)). }
false;static;0;3;;static MultiPointBuilder createRandomShape() {     return (MultiPointBuilder) RandomShapeGenerator.createShape(random(), ShapeType.MULTIPOINT). }
