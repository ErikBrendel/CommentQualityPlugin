commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> getPlugins() {     return Collections.singleton(FieldFilterPlugin.class). }
false;public;0;7;;@Before public void putMappings() {     assertAcked(client().admin().indices().prepareCreate("index1")).     assertAcked(client().admin().indices().prepareCreate("filtered")).     assertAcked(client().admin().indices().preparePutMapping("index1", "filtered").setType("_doc").setSource(TEST_ITEM, XContentType.JSON)). }
false;public;0;4;;public void testGetMappings() {     GetMappingsResponse getMappingsResponse = client().admin().indices().prepareGetMappings().get().     assertExpectedMappings(getMappingsResponse.mappings()). }
false;public;0;5;;public void testGetIndex() {     GetIndexResponse getIndexResponse = client().admin().indices().prepareGetIndex().setFeatures(GetIndexRequest.Feature.MAPPINGS).get().     assertExpectedMappings(getIndexResponse.mappings()). }
false;public;0;15;;public void testGetFieldMappings() {     GetFieldMappingsResponse getFieldMappingsResponse = client().admin().indices().prepareGetFieldMappings().setFields("*").get().     Map<String, Map<String, Map<String, GetFieldMappingsResponse.FieldMappingMetaData>>> mappings = getFieldMappingsResponse.mappings().     assertEquals(2, mappings.size()).     assertFieldMappings(mappings.get("index1"), ALL_FLAT_FIELDS).     assertFieldMappings(mappings.get("filtered"), FILTERED_FLAT_FIELDS).     // double check that submitting the filtered mappings to an unfiltered index leads to the same get field mappings output     // as the one coming from a filtered index with same mappings     GetMappingsResponse getMappingsResponse = client().admin().indices().prepareGetMappings("filtered").get().     ImmutableOpenMap<String, MappingMetaData> filtered = getMappingsResponse.getMappings().get("filtered").     assertAcked(client().admin().indices().prepareCreate("test").addMapping("_doc", filtered.get("_doc").getSourceAsMap())).     GetFieldMappingsResponse response = client().admin().indices().prepareGetFieldMappings("test").setFields("*").get().     assertEquals(1, response.mappings().size()).     assertFieldMappings(response.mappings().get("test"), FILTERED_FLAT_FIELDS). }
false;public;0;19;;public void testFieldCapabilities() {     List<String> allFields = new ArrayList<>(ALL_FLAT_FIELDS).     allFields.addAll(ALL_OBJECT_FIELDS).     FieldCapabilitiesResponse index1 = client().fieldCaps(new FieldCapabilitiesRequest().fields("*").indices("index1")).actionGet().     assertFieldCaps(index1, allFields).     FieldCapabilitiesResponse filtered = client().fieldCaps(new FieldCapabilitiesRequest().fields("*").indices("filtered")).actionGet().     List<String> filteredFields = new ArrayList<>(FILTERED_FLAT_FIELDS).     filteredFields.addAll(ALL_OBJECT_FIELDS).     assertFieldCaps(filtered, filteredFields).     // double check that submitting the filtered mappings to an unfiltered index leads to the same field_caps output     // as the one coming from a filtered index with same mappings     GetMappingsResponse getMappingsResponse = client().admin().indices().prepareGetMappings("filtered").get().     ImmutableOpenMap<String, MappingMetaData> filteredMapping = getMappingsResponse.getMappings().get("filtered").     assertAcked(client().admin().indices().prepareCreate("test").addMapping("_doc", filteredMapping.get("_doc").getSourceAsMap())).     FieldCapabilitiesResponse test = client().fieldCaps(new FieldCapabilitiesRequest().fields("*").indices("test")).actionGet().     // properties.value is an object field in the new mapping     filteredFields.add("properties.value").     assertFieldCaps(test, filteredFields). }
false;private,static;2;13;;private static void assertFieldCaps(FieldCapabilitiesResponse fieldCapabilitiesResponse, Collection<String> expectedFields) {     Map<String, Map<String, FieldCapabilities>> responseMap = fieldCapabilitiesResponse.get().     Set<String> builtInMetaDataFields = IndicesModule.getBuiltInMetaDataFields().     for (String field : builtInMetaDataFields) {         Map<String, FieldCapabilities> remove = responseMap.remove(field).         assertNotNull(" expected field [" + field + "] not found", remove).     }     for (String field : expectedFields) {         Map<String, FieldCapabilities> remove = responseMap.remove(field).         assertNotNull(" expected field [" + field + "] not found", remove).     }     assertEquals("Some unexpected fields were returned: " + responseMap.keySet(), 0, responseMap.size()). }
false;private,static;2;15;;private static void assertFieldMappings(Map<String, Map<String, GetFieldMappingsResponse.FieldMappingMetaData>> mappings, Collection<String> expectedFields) {     assertEquals(1, mappings.size()).     Map<String, GetFieldMappingsResponse.FieldMappingMetaData> fields = new HashMap<>(mappings.get("_doc")).     Set<String> builtInMetaDataFields = IndicesModule.getBuiltInMetaDataFields().     for (String field : builtInMetaDataFields) {         GetFieldMappingsResponse.FieldMappingMetaData fieldMappingMetaData = fields.remove(field).         assertNotNull(" expected field [" + field + "] not found", fieldMappingMetaData).     }     for (String field : expectedFields) {         GetFieldMappingsResponse.FieldMappingMetaData fieldMappingMetaData = fields.remove(field).         assertNotNull("expected field [" + field + "] not found", fieldMappingMetaData).     }     assertEquals("Some unexpected fields were returned: " + fields.keySet(), 0, fields.size()). }
false;private;1;7;;private void assertExpectedMappings(ImmutableOpenMap<String, ImmutableOpenMap<String, MappingMetaData>> mappings) {     assertEquals(2, mappings.size()).     assertNotFiltered(mappings.get("index1")).     ImmutableOpenMap<String, MappingMetaData> filtered = mappings.get("filtered").     assertFiltered(filtered).     assertMappingsAreValid(filtered.get("_doc").getSourceAsMap()). }
false;private;1;8;;private void assertMappingsAreValid(Map<String, Object> sourceAsMap) {     // check that the returned filtered mappings are still valid mappings by submitting them and retrieving them back     assertAcked(client().admin().indices().prepareCreate("test").addMapping("_doc", sourceAsMap)).     GetMappingsResponse testMappingsResponse = client().admin().indices().prepareGetMappings("test").get().     assertEquals(1, testMappingsResponse.getMappings().size()).     // the mappings are returned unfiltered for this index, yet they are the same as the previous ones that were returned filtered     assertFiltered(testMappingsResponse.getMappings().get("test")). }
false;private,static;1;46;;@SuppressWarnings("unchecked") private static void assertFiltered(ImmutableOpenMap<String, MappingMetaData> mappings) {     assertEquals(1, mappings.size()).     MappingMetaData mappingMetaData = mappings.get("_doc").     assertNotNull(mappingMetaData).     Map<String, Object> sourceAsMap = mappingMetaData.getSourceAsMap().     assertEquals(4, sourceAsMap.size()).     assertTrue(sourceAsMap.containsKey("_meta")).     assertTrue(sourceAsMap.containsKey("_routing")).     assertTrue(sourceAsMap.containsKey("_source")).     Map<String, Object> typeProperties = (Map<String, Object>) sourceAsMap.get("properties").     assertEquals(4, typeProperties.size()).     Map<String, Object> name = (Map<String, Object>) typeProperties.get("name").     assertEquals(1, name.size()).     Map<String, Object> nameProperties = (Map<String, Object>) name.get("properties").     assertEquals(1, nameProperties.size()).     assertLeafs(nameProperties, "last_visible").     assertLeafs(typeProperties, "age_visible").     Map<String, Object> address = (Map<String, Object>) typeProperties.get("address").     assertNotNull(address).     assertEquals(1, address.size()).     Map<String, Object> addressProperties = (Map<String, Object>) address.get("properties").     assertNotNull(addressProperties).     assertEquals(1, addressProperties.size()).     assertLeafs(addressProperties, "area_visible").     Map<String, Object> properties = (Map<String, Object>) typeProperties.get("properties").     assertNotNull(properties).     assertEquals(2, properties.size()).     assertEquals("nested", properties.get("type")).     Map<String, Object> propertiesProperties = (Map<String, Object>) properties.get("properties").     assertNotNull(propertiesProperties).     assertEquals(2, propertiesProperties.size()).     assertLeafs(propertiesProperties, "key_visible").     Map<String, Object> value = (Map<String, Object>) propertiesProperties.get("value").     assertNotNull(value).     assertEquals(1, value.size()).     Map<String, Object> valueProperties = (Map<String, Object>) value.get("properties").     assertNotNull(valueProperties).     assertEquals(1, valueProperties.size()).     assertLeafs(valueProperties, "keyword_visible"). }
false;private,static;1;39;;@SuppressWarnings("unchecked") private static void assertNotFiltered(ImmutableOpenMap<String, MappingMetaData> mappings) {     assertEquals(1, mappings.size()).     MappingMetaData mappingMetaData = mappings.get("_doc").     assertNotNull(mappingMetaData).     Map<String, Object> sourceAsMap = mappingMetaData.getSourceAsMap().     assertEquals(4, sourceAsMap.size()).     assertTrue(sourceAsMap.containsKey("_meta")).     assertTrue(sourceAsMap.containsKey("_routing")).     assertTrue(sourceAsMap.containsKey("_source")).     Map<String, Object> typeProperties = (Map<String, Object>) sourceAsMap.get("properties").     assertEquals(5, typeProperties.size()).     Map<String, Object> name = (Map<String, Object>) typeProperties.get("name").     assertEquals(1, name.size()).     Map<String, Object> nameProperties = (Map<String, Object>) name.get("properties").     assertEquals(2, nameProperties.size()).     assertLeafs(nameProperties, "first", "last_visible").     assertLeafs(typeProperties, "birth", "age_visible").     Map<String, Object> address = (Map<String, Object>) typeProperties.get("address").     assertNotNull(address).     assertEquals(1, address.size()).     Map<String, Object> addressProperties = (Map<String, Object>) address.get("properties").     assertNotNull(addressProperties).     assertEquals(3, addressProperties.size()).     assertLeafs(addressProperties, "street", "location", "area_visible").     Map<String, Object> properties = (Map<String, Object>) typeProperties.get("properties").     assertNotNull(properties).     assertEquals(2, properties.size()).     assertTrue(properties.containsKey("type")).     Map<String, Object> propertiesProperties = (Map<String, Object>) properties.get("properties").     assertNotNull(propertiesProperties).     assertEquals(2, propertiesProperties.size()).     assertMultiField(propertiesProperties, "key_visible", "keyword").     assertMultiField(propertiesProperties, "value", "keyword_visible"). }
false;public;0;4;;@Override public Function<String, Predicate<String>> getFieldFilter() {     return index -> index.equals("filtered") ? field -> field.endsWith("visible") : MapperPlugin.NOOP_FIELD_PREDICATE. }
