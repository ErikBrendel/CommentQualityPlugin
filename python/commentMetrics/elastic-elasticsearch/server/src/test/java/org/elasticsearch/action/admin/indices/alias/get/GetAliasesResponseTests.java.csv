commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected GetAliasesResponse createTestInstance() {     return createTestItem(). }
false;protected;0;4;;@Override protected GetAliasesResponse createBlankInstance() {     return new GetAliasesResponse(). }
false;protected;1;4;;@Override protected GetAliasesResponse mutateInstance(GetAliasesResponse response) {     return new GetAliasesResponse(mutateAliases(response.getAliases())). }
false;private,static;1;36;;private static ImmutableOpenMap<String, List<AliasMetaData>> mutateAliases(ImmutableOpenMap<String, List<AliasMetaData>> aliases) {     if (aliases.isEmpty()) {         return createIndicesAliasesMap(1, 3).build().     }     if (randomBoolean()) {         ImmutableOpenMap.Builder<String, List<AliasMetaData>> builder = ImmutableOpenMap.builder(aliases).         ImmutableOpenMap<String, List<AliasMetaData>> list = createIndicesAliasesMap(1, 2).build().         list.forEach(e -> builder.put(e.key, e.value)).         return builder.build().     }     Set<String> indices = new HashSet<>().     Iterator<String> keys = aliases.keysIt().     while (keys.hasNext()) {         indices.add(keys.next()).     }     List<String> indicesToBeModified = randomSubsetOf(randomIntBetween(1, indices.size()), indices).     ImmutableOpenMap.Builder<String, List<AliasMetaData>> builder = ImmutableOpenMap.builder().     for (String index : indices) {         List<AliasMetaData> list = new ArrayList<>(aliases.get(index)).         if (indicesToBeModified.contains(index)) {             if (randomBoolean() || list.isEmpty()) {                 list.add(createAliasMetaData()).             } else {                 int aliasIndex = randomInt(list.size() - 1).                 AliasMetaData aliasMetaData = list.get(aliasIndex).                 list.add(aliasIndex, mutateAliasMetaData(aliasMetaData)).             }         }         builder.put(index, list).     }     return builder.build(). }
false;private,static;0;3;;private static GetAliasesResponse createTestItem() {     return new GetAliasesResponse(createIndicesAliasesMap(0, 5).build()). }
false;private,static;2;14;;private static ImmutableOpenMap.Builder<String, List<AliasMetaData>> createIndicesAliasesMap(int min, int max) {     ImmutableOpenMap.Builder<String, List<AliasMetaData>> builder = ImmutableOpenMap.builder().     int indicesNum = randomIntBetween(min, max).     for (int i = 0. i < indicesNum. i++) {         String index = randomAlphaOfLength(5).         List<AliasMetaData> aliasMetaData = new ArrayList<>().         int aliasesNum = randomIntBetween(0, 3).         for (int alias = 0. alias < aliasesNum. alias++) {             aliasMetaData.add(createAliasMetaData()).         }         builder.put(index, aliasMetaData).     }     return builder. }
false;public,static;0;16;;public static AliasMetaData createAliasMetaData() {     Builder builder = AliasMetaData.builder(randomAlphaOfLengthBetween(3, 10)).     if (randomBoolean()) {         builder.routing(randomAlphaOfLengthBetween(3, 10)).     }     if (randomBoolean()) {         builder.searchRouting(randomAlphaOfLengthBetween(3, 10)).     }     if (randomBoolean()) {         builder.indexRouting(randomAlphaOfLengthBetween(3, 10)).     }     if (randomBoolean()) {         builder.filter("{\"term\":{\"year\":2016}}").     }     return builder.build(). }
false;public,static;1;16;;public static AliasMetaData mutateAliasMetaData(AliasMetaData alias) {     boolean changeAlias = randomBoolean().     AliasMetaData.Builder builder = AliasMetaData.builder(changeAlias ? randomAlphaOfLengthBetween(2, 5) : alias.getAlias()).     builder.searchRouting(alias.searchRouting()).     builder.indexRouting(alias.indexRouting()).     builder.filter(alias.filter()).     if (false == changeAlias) {         if (randomBoolean()) {             builder.searchRouting(alias.searchRouting() + randomAlphaOfLengthBetween(1, 3)).         } else {             builder.indexRouting(alias.indexRouting() + randomAlphaOfLengthBetween(1, 3)).         }     }     return builder.build(). }
