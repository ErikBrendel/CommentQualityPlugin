# id;timestamp;commentText;codeText;commentWords;codeWords
MoreLikeThisQueryBuilderTests -> private static Fields generateFields(String[] fieldNames, String text) throws IOException;1524684173;Here we could go overboard and use a pre-generated indexed random document for a given Item,_but for now we'd prefer to simply return the id as the content of the document and that for_every field.;private static Fields generateFields(String[] fieldNames, String text) throws IOException {_        MemoryIndex index = new MemoryIndex()__        for (String fieldName : fieldNames) {_            index.addField(fieldName, text, new WhitespaceAnalyzer())__        }_        return MultiFields.getFields(index.createSearcher().getIndexReader())__    };here,we,could,go,overboard,and,use,a,pre,generated,indexed,random,document,for,a,given,item,but,for,now,we,d,prefer,to,simply,return,the,id,as,the,content,of,the,document,and,that,for,every,field;private,static,fields,generate,fields,string,field,names,string,text,throws,ioexception,memory,index,index,new,memory,index,for,string,field,name,field,names,index,add,field,field,name,text,new,whitespace,analyzer,return,multi,fields,get,fields,index,create,searcher,get,index,reader
MoreLikeThisQueryBuilderTests -> private static Fields generateFields(String[] fieldNames, String text) throws IOException;1531937412;Here we could go overboard and use a pre-generated indexed random document for a given Item,_but for now we'd prefer to simply return the id as the content of the document and that for_every field.;private static Fields generateFields(String[] fieldNames, String text) throws IOException {_        MemoryIndex index = new MemoryIndex()__        for (String fieldName : fieldNames) {_            index.addField(fieldName, text, new WhitespaceAnalyzer())__        }_        return MultiFields.getFields(index.createSearcher().getIndexReader())__    };here,we,could,go,overboard,and,use,a,pre,generated,indexed,random,document,for,a,given,item,but,for,now,we,d,prefer,to,simply,return,the,id,as,the,content,of,the,document,and,that,for,every,field;private,static,fields,generate,fields,string,field,names,string,text,throws,ioexception,memory,index,index,new,memory,index,for,string,field,name,field,names,index,add,field,field,name,text,new,whitespace,analyzer,return,multi,fields,get,fields,index,create,searcher,get,index,reader
MoreLikeThisQueryBuilderTests -> private static Fields generateFields(String[] fieldNames, String text) throws IOException;1532685069;Here we could go overboard and use a pre-generated indexed random document for a given Item,_but for now we'd prefer to simply return the id as the content of the document and that for_every field.;private static Fields generateFields(String[] fieldNames, String text) throws IOException {_        MemoryIndex index = new MemoryIndex()__        for (String fieldName : fieldNames) {_            index.addField(fieldName, text, new WhitespaceAnalyzer())__        }_        return MultiFields.getFields(index.createSearcher().getIndexReader())__    };here,we,could,go,overboard,and,use,a,pre,generated,indexed,random,document,for,a,given,item,but,for,now,we,d,prefer,to,simply,return,the,id,as,the,content,of,the,document,and,that,for,every,field;private,static,fields,generate,fields,string,field,names,string,text,throws,ioexception,memory,index,index,new,memory,index,for,string,field,name,field,names,index,add,field,field,name,text,new,whitespace,analyzer,return,multi,fields,get,fields,index,create,searcher,get,index,reader
MoreLikeThisQueryBuilderTests -> private static Fields generateFields(String[] fieldNames, String text) throws IOException;1535139672;Here we could go overboard and use a pre-generated indexed random document for a given Item,_but for now we'd prefer to simply return the id as the content of the document and that for_every field.;private static Fields generateFields(String[] fieldNames, String text) throws IOException {_        MemoryIndex index = new MemoryIndex()__        for (String fieldName : fieldNames) {_            index.addField(fieldName, text, new WhitespaceAnalyzer())__        }_        return MultiFields.getFields(index.createSearcher().getIndexReader())__    };here,we,could,go,overboard,and,use,a,pre,generated,indexed,random,document,for,a,given,item,but,for,now,we,d,prefer,to,simply,return,the,id,as,the,content,of,the,document,and,that,for,every,field;private,static,fields,generate,fields,string,field,names,string,text,throws,ioexception,memory,index,index,new,memory,index,for,string,field,name,field,names,index,add,field,field,name,text,new,whitespace,analyzer,return,multi,fields,get,fields,index,create,searcher,get,index,reader
MoreLikeThisQueryBuilderTests -> private static Fields generateFields(String[] fieldNames, String text) throws IOException;1541501723;Here we could go overboard and use a pre-generated indexed random document for a given Item,_but for now we'd prefer to simply return the id as the content of the document and that for_every field.;private static Fields generateFields(String[] fieldNames, String text) throws IOException {_        MemoryIndex index = new MemoryIndex()__        for (String fieldName : fieldNames) {_            index.addField(fieldName, text, new WhitespaceAnalyzer())__        }_        return index.createSearcher().getIndexReader().getTermVectors(0)__    };here,we,could,go,overboard,and,use,a,pre,generated,indexed,random,document,for,a,given,item,but,for,now,we,d,prefer,to,simply,return,the,id,as,the,content,of,the,document,and,that,for,every,field;private,static,fields,generate,fields,string,field,names,string,text,throws,ioexception,memory,index,index,new,memory,index,for,string,field,name,field,names,index,add,field,field,name,text,new,whitespace,analyzer,return,index,create,searcher,get,index,reader,get,term,vectors,0
MoreLikeThisQueryBuilderTests -> private static Fields generateFields(String[] fieldNames, String text) throws IOException;1542697754;Here we could go overboard and use a pre-generated indexed random document for a given Item,_but for now we'd prefer to simply return the id as the content of the document and that for_every field.;private static Fields generateFields(String[] fieldNames, String text) throws IOException {_        MemoryIndex index = new MemoryIndex()__        for (String fieldName : fieldNames) {_            index.addField(fieldName, text, new WhitespaceAnalyzer())__        }_        return index.createSearcher().getIndexReader().getTermVectors(0)__    };here,we,could,go,overboard,and,use,a,pre,generated,indexed,random,document,for,a,given,item,but,for,now,we,d,prefer,to,simply,return,the,id,as,the,content,of,the,document,and,that,for,every,field;private,static,fields,generate,fields,string,field,names,string,text,throws,ioexception,memory,index,index,new,memory,index,for,string,field,name,field,names,index,add,field,field,name,text,new,whitespace,analyzer,return,index,create,searcher,get,index,reader,get,term,vectors,0
MoreLikeThisQueryBuilderTests -> private static Fields generateFields(String[] fieldNames, String text) throws IOException;1546434630;Here we could go overboard and use a pre-generated indexed random document for a given Item,_but for now we'd prefer to simply return the id as the content of the document and that for_every field.;private static Fields generateFields(String[] fieldNames, String text) throws IOException {_        MemoryIndex index = new MemoryIndex()__        for (String fieldName : fieldNames) {_            index.addField(fieldName, text, new WhitespaceAnalyzer())__        }_        return index.createSearcher().getIndexReader().getTermVectors(0)__    };here,we,could,go,overboard,and,use,a,pre,generated,indexed,random,document,for,a,given,item,but,for,now,we,d,prefer,to,simply,return,the,id,as,the,content,of,the,document,and,that,for,every,field;private,static,fields,generate,fields,string,field,names,string,text,throws,ioexception,memory,index,index,new,memory,index,for,string,field,name,field,names,index,add,field,field,name,text,new,whitespace,analyzer,return,index,create,searcher,get,index,reader,get,term,vectors,0
MoreLikeThisQueryBuilderTests -> private static Fields generateFields(String[] fieldNames, String text) throws IOException;1547002001;Here we could go overboard and use a pre-generated indexed random document for a given Item,_but for now we'd prefer to simply return the id as the content of the document and that for_every field.;private static Fields generateFields(String[] fieldNames, String text) throws IOException {_        MemoryIndex index = new MemoryIndex()__        for (String fieldName : fieldNames) {_            index.addField(fieldName, text, new WhitespaceAnalyzer())__        }_        return index.createSearcher().getIndexReader().getTermVectors(0)__    };here,we,could,go,overboard,and,use,a,pre,generated,indexed,random,document,for,a,given,item,but,for,now,we,d,prefer,to,simply,return,the,id,as,the,content,of,the,document,and,that,for,every,field;private,static,fields,generate,fields,string,field,names,string,text,throws,ioexception,memory,index,index,new,memory,index,for,string,field,name,field,names,index,add,field,field,name,text,new,whitespace,analyzer,return,index,create,searcher,get,index,reader,get,term,vectors,0
MoreLikeThisQueryBuilderTests -> @Override     protected String[] shuffleProtectedFields();1524684173;we don't want to shuffle the "doc" field internally in {@link #testFromXContent()} because even though the_documents would be functionally the same, their {@link BytesReference} representation isn't and thats what we_compare when check for equality of the original and the shuffled builder;@Override_    protected String[] shuffleProtectedFields() {_        return SHUFFLE_PROTECTED_FIELDS__    };we,don,t,want,to,shuffle,the,doc,field,internally,in,link,test,from,xcontent,because,even,though,the,documents,would,be,functionally,the,same,their,link,bytes,reference,representation,isn,t,and,thats,what,we,compare,when,check,for,equality,of,the,original,and,the,shuffled,builder;override,protected,string,shuffle,protected,fields,return
MoreLikeThisQueryBuilderTests -> @Override     protected String[] shuffleProtectedFields();1531937412;we don't want to shuffle the "doc" field internally in {@link #testFromXContent()} because even though the_documents would be functionally the same, their {@link BytesReference} representation isn't and thats what we_compare when check for equality of the original and the shuffled builder;@Override_    protected String[] shuffleProtectedFields() {_        return SHUFFLE_PROTECTED_FIELDS__    };we,don,t,want,to,shuffle,the,doc,field,internally,in,link,test,from,xcontent,because,even,though,the,documents,would,be,functionally,the,same,their,link,bytes,reference,representation,isn,t,and,thats,what,we,compare,when,check,for,equality,of,the,original,and,the,shuffled,builder;override,protected,string,shuffle,protected,fields,return
MoreLikeThisQueryBuilderTests -> @Override     protected String[] shuffleProtectedFields();1532685069;we don't want to shuffle the "doc" field internally in {@link #testFromXContent()} because even though the_documents would be functionally the same, their {@link BytesReference} representation isn't and thats what we_compare when check for equality of the original and the shuffled builder;@Override_    protected String[] shuffleProtectedFields() {_        return SHUFFLE_PROTECTED_FIELDS__    };we,don,t,want,to,shuffle,the,doc,field,internally,in,link,test,from,xcontent,because,even,though,the,documents,would,be,functionally,the,same,their,link,bytes,reference,representation,isn,t,and,thats,what,we,compare,when,check,for,equality,of,the,original,and,the,shuffled,builder;override,protected,string,shuffle,protected,fields,return
MoreLikeThisQueryBuilderTests -> @Override     protected String[] shuffleProtectedFields();1535139672;we don't want to shuffle the "doc" field internally in {@link #testFromXContent()} because even though the_documents would be functionally the same, their {@link BytesReference} representation isn't and thats what we_compare when check for equality of the original and the shuffled builder;@Override_    protected String[] shuffleProtectedFields() {_        return SHUFFLE_PROTECTED_FIELDS__    };we,don,t,want,to,shuffle,the,doc,field,internally,in,link,test,from,xcontent,because,even,though,the,documents,would,be,functionally,the,same,their,link,bytes,reference,representation,isn,t,and,thats,what,we,compare,when,check,for,equality,of,the,original,and,the,shuffled,builder;override,protected,string,shuffle,protected,fields,return
MoreLikeThisQueryBuilderTests -> @Override     protected String[] shuffleProtectedFields();1541501723;we don't want to shuffle the "doc" field internally in {@link #testFromXContent()} because even though the_documents would be functionally the same, their {@link BytesReference} representation isn't and thats what we_compare when check for equality of the original and the shuffled builder;@Override_    protected String[] shuffleProtectedFields() {_        return SHUFFLE_PROTECTED_FIELDS__    };we,don,t,want,to,shuffle,the,doc,field,internally,in,link,test,from,xcontent,because,even,though,the,documents,would,be,functionally,the,same,their,link,bytes,reference,representation,isn,t,and,thats,what,we,compare,when,check,for,equality,of,the,original,and,the,shuffled,builder;override,protected,string,shuffle,protected,fields,return
MoreLikeThisQueryBuilderTests -> @Override     protected String[] shuffleProtectedFields();1542697754;we don't want to shuffle the "doc" field internally in {@link #testFromXContent()} because even though the_documents would be functionally the same, their {@link BytesReference} representation isn't and thats what we_compare when check for equality of the original and the shuffled builder;@Override_    protected String[] shuffleProtectedFields() {_        return SHUFFLE_PROTECTED_FIELDS__    };we,don,t,want,to,shuffle,the,doc,field,internally,in,link,test,from,xcontent,because,even,though,the,documents,would,be,functionally,the,same,their,link,bytes,reference,representation,isn,t,and,thats,what,we,compare,when,check,for,equality,of,the,original,and,the,shuffled,builder;override,protected,string,shuffle,protected,fields,return
MoreLikeThisQueryBuilderTests -> @Override     protected String[] shuffleProtectedFields();1546434630;we don't want to shuffle the "doc" field internally in {@link #testFromXContent()} because even though the_documents would be functionally the same, their {@link BytesReference} representation isn't and thats what we_compare when check for equality of the original and the shuffled builder;@Override_    protected String[] shuffleProtectedFields() {_        return SHUFFLE_PROTECTED_FIELDS__    };we,don,t,want,to,shuffle,the,doc,field,internally,in,link,test,from,xcontent,because,even,though,the,documents,would,be,functionally,the,same,their,link,bytes,reference,representation,isn,t,and,thats,what,we,compare,when,check,for,equality,of,the,original,and,the,shuffled,builder;override,protected,string,shuffle,protected,fields,return
MoreLikeThisQueryBuilderTests -> @Override     protected String[] shuffleProtectedFields();1547002001;we don't want to shuffle the "doc" field internally in {@link #testFromXContent()} because even though the_documents would be functionally the same, their {@link BytesReference} representation isn't and thats what we_compare when check for equality of the original and the shuffled builder;@Override_    protected String[] shuffleProtectedFields() {_        return SHUFFLE_PROTECTED_FIELDS__    };we,don,t,want,to,shuffle,the,doc,field,internally,in,link,test,from,xcontent,because,even,though,the,documents,would,be,functionally,the,same,their,link,bytes,reference,representation,isn,t,and,thats,what,we,compare,when,check,for,equality,of,the,original,and,the,shuffled,builder;override,protected,string,shuffle,protected,fields,return
