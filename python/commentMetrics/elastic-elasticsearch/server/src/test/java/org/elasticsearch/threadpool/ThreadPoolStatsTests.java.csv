commented;modifiers;parameterAmount;loc;comment;code
false;public;0;25;;public void testThreadPoolStatsSort() throws IOException {     List<ThreadPoolStats.Stats> stats = new ArrayList<>().     stats.add(new ThreadPoolStats.Stats("z", -1, 0, 0, 0, 0, 0L)).     stats.add(new ThreadPoolStats.Stats("m", 3, 0, 0, 0, 0, 0L)).     stats.add(new ThreadPoolStats.Stats("m", 1, 0, 0, 0, 0, 0L)).     stats.add(new ThreadPoolStats.Stats("d", -1, 0, 0, 0, 0, 0L)).     stats.add(new ThreadPoolStats.Stats("m", 2, 0, 0, 0, 0, 0L)).     stats.add(new ThreadPoolStats.Stats("t", -1, 0, 0, 0, 0, 0L)).     stats.add(new ThreadPoolStats.Stats("a", -1, 0, 0, 0, 0, 0L)).     List<ThreadPoolStats.Stats> copy = new ArrayList<>(stats).     Collections.sort(copy).     List<String> names = new ArrayList<>(copy.size()).     for (ThreadPoolStats.Stats stat : copy) {         names.add(stat.getName()).     }     assertThat(names, contains("a", "d", "m", "m", "m", "t", "z")).     List<Integer> threads = new ArrayList<>(copy.size()).     for (ThreadPoolStats.Stats stat : copy) {         threads.add(stat.getThreads()).     }     assertThat(threads, contains(-1, -1, 1, 2, 3, -1, -1)). }
false;public;0;52;;public void testThreadPoolStatsToXContent() throws IOException {     try (BytesStreamOutput os = new BytesStreamOutput()) {         List<ThreadPoolStats.Stats> stats = new ArrayList<>().         stats.add(new ThreadPoolStats.Stats(ThreadPool.Names.SEARCH, -1, 0, 0, 0, 0, 0L)).         stats.add(new ThreadPoolStats.Stats(ThreadPool.Names.WARMER, -1, 0, 0, 0, 0, 0L)).         stats.add(new ThreadPoolStats.Stats(ThreadPool.Names.GENERIC, -1, 0, 0, 0, 0, 0L)).         stats.add(new ThreadPoolStats.Stats(ThreadPool.Names.FORCE_MERGE, -1, 0, 0, 0, 0, 0L)).         stats.add(new ThreadPoolStats.Stats(ThreadPool.Names.SAME, -1, 0, 0, 0, 0, 0L)).         ThreadPoolStats threadPoolStats = new ThreadPoolStats(stats).         try (XContentBuilder builder = new XContentBuilder(XContentType.JSON.xContent(), os)) {             builder.startObject().             threadPoolStats.toXContent(builder, ToXContent.EMPTY_PARAMS).             builder.endObject().         }         try (XContentParser parser = createParser(JsonXContent.jsonXContent, os.bytes())) {             XContentParser.Token token = parser.currentToken().             assertNull(token).             token = parser.nextToken().             assertThat(token, equalTo(XContentParser.Token.START_OBJECT)).             token = parser.nextToken().             assertThat(token, equalTo(XContentParser.Token.FIELD_NAME)).             assertThat(parser.currentName(), equalTo(ThreadPoolStats.Fields.THREAD_POOL)).             token = parser.nextToken().             assertThat(token, equalTo(XContentParser.Token.START_OBJECT)).             token = parser.nextToken().             assertThat(token, equalTo(XContentParser.Token.FIELD_NAME)).             List<String> names = new ArrayList<>().             while (token == XContentParser.Token.FIELD_NAME) {                 names.add(parser.currentName()).                 token = parser.nextToken().                 assertThat(token, equalTo(XContentParser.Token.START_OBJECT)).                 parser.skipChildren().                 token = parser.nextToken().             }             assertThat(names, contains(ThreadPool.Names.FORCE_MERGE, ThreadPool.Names.GENERIC, ThreadPool.Names.SAME, ThreadPool.Names.SEARCH, ThreadPool.Names.WARMER)).         }     } }
