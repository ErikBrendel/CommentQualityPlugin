commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;7;;@Override protected Settings nodeSettings(int nodeOrdinal) {     if (nodeOrdinal % 2 == 0) {         return Settings.builder().put("node.ingest", false).put(super.nodeSettings(nodeOrdinal)).build().     }     return super.nodeSettings(nodeOrdinal). }
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     return Arrays.asList(IngestTestPlugin.class). }
false;public;0;57;;public void testSimulate() throws Exception {     BytesReference pipelineSource = BytesReference.bytes(jsonBuilder().startObject().field("description", "my_pipeline").startArray("processors").startObject().startObject("test").endObject().endObject().endArray().endObject()).     client().admin().cluster().preparePutPipeline("_id", pipelineSource, XContentType.JSON).get().     GetPipelineResponse getResponse = client().admin().cluster().prepareGetPipeline("_id").get().     assertThat(getResponse.isFound(), is(true)).     assertThat(getResponse.pipelines().size(), equalTo(1)).     assertThat(getResponse.pipelines().get(0).getId(), equalTo("_id")).     BytesReference bytes = BytesReference.bytes(jsonBuilder().startObject().startArray("docs").startObject().field("_index", "index").field("_type", "type").field("_id", "id").startObject("_source").field("foo", "bar").field("fail", false).endObject().endObject().endArray().endObject()).     SimulatePipelineResponse response.     if (randomBoolean()) {         response = client().admin().cluster().prepareSimulatePipeline(bytes, XContentType.JSON).setId("_id").get().     } else {         SimulatePipelineRequest request = new SimulatePipelineRequest(bytes, XContentType.JSON).         request.setId("_id").         response = client().admin().cluster().simulatePipeline(request).get().     }     assertThat(response.isVerbose(), equalTo(false)).     assertThat(response.getPipelineId(), equalTo("_id")).     assertThat(response.getResults().size(), equalTo(1)).     assertThat(response.getResults().get(0), instanceOf(SimulateDocumentBaseResult.class)).     SimulateDocumentBaseResult simulateDocumentBaseResult = (SimulateDocumentBaseResult) response.getResults().get(0).     Map<String, Object> source = new HashMap<>().     source.put("foo", "bar").     source.put("fail", false).     source.put("processed", true).     IngestDocument ingestDocument = new IngestDocument("index", "type", "id", null, null, null, source).     assertThat(simulateDocumentBaseResult.getIngestDocument().getSourceAndMetadata(), equalTo(ingestDocument.getSourceAndMetadata())).     assertThat(simulateDocumentBaseResult.getFailure(), nullValue()).     // cleanup     AcknowledgedResponse deletePipelineResponse = client().admin().cluster().prepareDeletePipeline("_id").get().     assertTrue(deletePipelineResponse.isAcknowledged()). }
false;public;0;45;;public void testBulkWithIngestFailures() throws Exception {     createIndex("index").     BytesReference source = BytesReference.bytes(jsonBuilder().startObject().field("description", "my_pipeline").startArray("processors").startObject().startObject("test").endObject().endObject().endArray().endObject()).     PutPipelineRequest putPipelineRequest = new PutPipelineRequest("_id", source, XContentType.JSON).     client().admin().cluster().putPipeline(putPipelineRequest).get().     int numRequests = scaledRandomIntBetween(32, 128).     BulkRequest bulkRequest = new BulkRequest().     for (int i = 0. i < numRequests. i++) {         IndexRequest indexRequest = new IndexRequest("index", "type", Integer.toString(i)).setPipeline("_id").         indexRequest.source(Requests.INDEX_CONTENT_TYPE, "field", "value", "fail", i % 2 == 0).         bulkRequest.add(indexRequest).     }     BulkResponse response = client().bulk(bulkRequest).actionGet().     assertThat(response.getItems().length, equalTo(bulkRequest.requests().size())).     for (int i = 0. i < bulkRequest.requests().size(). i++) {         BulkItemResponse itemResponse = response.getItems()[i].         if (i % 2 == 0) {             BulkItemResponse.Failure failure = itemResponse.getFailure().             ElasticsearchException compoundProcessorException = (ElasticsearchException) failure.getCause().             assertThat(compoundProcessorException.getRootCause().getMessage(), equalTo("test processor failed")).         } else {             IndexResponse indexResponse = itemResponse.getResponse().             assertThat("Expected a successful response but found failure [" + itemResponse.getFailure() + "].", itemResponse.isFailed(), is(false)).             assertThat(indexResponse, notNullValue()).             assertThat(indexResponse.getId(), equalTo(Integer.toString(i))).             assertEquals(DocWriteResponse.Result.CREATED, indexResponse.getResult()).         }     }     // cleanup     AcknowledgedResponse deletePipelineResponse = client().admin().cluster().prepareDeletePipeline("_id").get().     assertTrue(deletePipelineResponse.isAcknowledged()). }
false;public;0;36;;public void testBulkWithUpsert() throws Exception {     createIndex("index").     BytesReference source = BytesReference.bytes(jsonBuilder().startObject().field("description", "my_pipeline").startArray("processors").startObject().startObject("test").endObject().endObject().endArray().endObject()).     PutPipelineRequest putPipelineRequest = new PutPipelineRequest("_id", source, XContentType.JSON).     client().admin().cluster().putPipeline(putPipelineRequest).get().     BulkRequest bulkRequest = new BulkRequest().     IndexRequest indexRequest = new IndexRequest("index", "type", "1").setPipeline("_id").     indexRequest.source(Requests.INDEX_CONTENT_TYPE, "field1", "val1").     bulkRequest.add(indexRequest).     UpdateRequest updateRequest = new UpdateRequest("index", "type", "2").     updateRequest.doc("{}", Requests.INDEX_CONTENT_TYPE).     updateRequest.upsert("{\"field1\":\"upserted_val\"}", XContentType.JSON).upsertRequest().setPipeline("_id").     bulkRequest.add(updateRequest).     BulkResponse response = client().bulk(bulkRequest).actionGet().     assertThat(response.getItems().length, equalTo(bulkRequest.requests().size())).     Map<String, Object> inserted = client().prepareGet("index", "type", "1").get().getSourceAsMap().     assertThat(inserted.get("field1"), equalTo("val1")).     assertThat(inserted.get("processed"), equalTo(true)).     Map<String, Object> upserted = client().prepareGet("index", "type", "2").get().getSourceAsMap().     assertThat(upserted.get("field1"), equalTo("upserted_val")).     assertThat(upserted.get("processed"), equalTo(true)). }
false;public;0;40;;public void test() throws Exception {     BytesReference source = BytesReference.bytes(jsonBuilder().startObject().field("description", "my_pipeline").startArray("processors").startObject().startObject("test").endObject().endObject().endArray().endObject()).     PutPipelineRequest putPipelineRequest = new PutPipelineRequest("_id", source, XContentType.JSON).     client().admin().cluster().putPipeline(putPipelineRequest).get().     GetPipelineRequest getPipelineRequest = new GetPipelineRequest("_id").     GetPipelineResponse getResponse = client().admin().cluster().getPipeline(getPipelineRequest).get().     assertThat(getResponse.isFound(), is(true)).     assertThat(getResponse.pipelines().size(), equalTo(1)).     assertThat(getResponse.pipelines().get(0).getId(), equalTo("_id")).     client().prepareIndex("test", "type", "1").setPipeline("_id").setSource("field", "value", "fail", false).get().     Map<String, Object> doc = client().prepareGet("test", "type", "1").get().getSourceAsMap().     assertThat(doc.get("field"), equalTo("value")).     assertThat(doc.get("processed"), equalTo(true)).     client().prepareBulk().add(client().prepareIndex("test", "type", "2").setSource("field", "value2", "fail", false).setPipeline("_id")).get().     doc = client().prepareGet("test", "type", "2").get().getSourceAsMap().     assertThat(doc.get("field"), equalTo("value2")).     assertThat(doc.get("processed"), equalTo(true)).     DeletePipelineRequest deletePipelineRequest = new DeletePipelineRequest("_id").     AcknowledgedResponse response = client().admin().cluster().deletePipeline(deletePipelineRequest).get().     assertThat(response.isAcknowledged(), is(true)).     getResponse = client().admin().cluster().prepareGetPipeline("_id").get().     assertThat(getResponse.isFound(), is(false)).     assertThat(getResponse.pipelines().size(), equalTo(0)). }
false;public;0;19;;public void testPutWithPipelineFactoryError() throws Exception {     BytesReference source = BytesReference.bytes(jsonBuilder().startObject().field("description", "my_pipeline").startArray("processors").startObject().startObject("test").field("unused", ":sad_face:").endObject().endObject().endArray().endObject()).     PutPipelineRequest putPipelineRequest = new PutPipelineRequest("_id2", source, XContentType.JSON).     Exception e = expectThrows(ElasticsearchParseException.class, () -> client().admin().cluster().putPipeline(putPipelineRequest).actionGet()).     assertThat(e.getMessage(), equalTo("processor [test] doesn't support one or more provided configuration parameters [unused]")).     GetPipelineResponse response = client().admin().cluster().prepareGetPipeline("_id2").get().     assertFalse(response.isFound()). }
