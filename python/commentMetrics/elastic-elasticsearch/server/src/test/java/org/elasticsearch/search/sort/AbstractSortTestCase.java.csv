# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractSortTestCase -> public void testSerialization() throws IOException;1524684173;Test serialization and deserialization of the test sort.;public void testSerialization() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            T testsort = createTestItem()__            T deserializedsort = copy(testsort)__            assertEquals(testsort, deserializedsort)__            assertEquals(testsort.hashCode(), deserializedsort.hashCode())__            assertNotSame(testsort, deserializedsort)__        }_    };test,serialization,and,deserialization,of,the,test,sort;public,void,test,serialization,throws,ioexception,for,int,runs,0,runs,runs,t,testsort,create,test,item,t,deserializedsort,copy,testsort,assert,equals,testsort,deserializedsort,assert,equals,testsort,hash,code,deserializedsort,hash,code,assert,not,same,testsort,deserializedsort
AbstractSortTestCase -> public void testSerialization() throws IOException;1529916084;Test serialization and deserialization of the test sort.;public void testSerialization() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            T testsort = createTestItem()__            T deserializedsort = copy(testsort)__            assertEquals(testsort, deserializedsort)__            assertEquals(testsort.hashCode(), deserializedsort.hashCode())__            assertNotSame(testsort, deserializedsort)__        }_    };test,serialization,and,deserialization,of,the,test,sort;public,void,test,serialization,throws,ioexception,for,int,runs,0,runs,runs,t,testsort,create,test,item,t,deserializedsort,copy,testsort,assert,equals,testsort,deserializedsort,assert,equals,testsort,hash,code,deserializedsort,hash,code,assert,not,same,testsort,deserializedsort
AbstractSortTestCase -> public void testSerialization() throws IOException;1538170812;Test serialization and deserialization of the test sort.;public void testSerialization() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            T testsort = createTestItem()__            T deserializedsort = copy(testsort)__            assertEquals(testsort, deserializedsort)__            assertEquals(testsort.hashCode(), deserializedsort.hashCode())__            assertNotSame(testsort, deserializedsort)__        }_    };test,serialization,and,deserialization,of,the,test,sort;public,void,test,serialization,throws,ioexception,for,int,runs,0,runs,runs,t,testsort,create,test,item,t,deserializedsort,copy,testsort,assert,equals,testsort,deserializedsort,assert,equals,testsort,hash,code,deserializedsort,hash,code,assert,not,same,testsort,deserializedsort
AbstractSortTestCase -> protected MappedFieldType provideMappedFieldType(String name);1524684173;Return a field type. We use {@link NumberFieldMapper.NumberFieldType} by default since it is compatible with all sort modes_Tests that require other field types can override this.;protected MappedFieldType provideMappedFieldType(String name) {_        NumberFieldMapper.NumberFieldType doubleFieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.DOUBLE)__        doubleFieldType.setName(name)__        doubleFieldType.setHasDocValues(true)__        return doubleFieldType__    };return,a,field,type,we,use,link,number,field,mapper,number,field,type,by,default,since,it,is,compatible,with,all,sort,modes,tests,that,require,other,field,types,can,override,this;protected,mapped,field,type,provide,mapped,field,type,string,name,number,field,mapper,number,field,type,double,field,type,new,number,field,mapper,number,field,type,number,field,mapper,number,type,double,double,field,type,set,name,name,double,field,type,set,has,doc,values,true,return,double,field,type
AbstractSortTestCase -> protected MappedFieldType provideMappedFieldType(String name);1529916084;Return a field type. We use {@link NumberFieldMapper.NumberFieldType} by default since it is compatible with all sort modes_Tests that require other field types can override this.;protected MappedFieldType provideMappedFieldType(String name) {_        NumberFieldMapper.NumberFieldType doubleFieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.DOUBLE)__        doubleFieldType.setName(name)__        doubleFieldType.setHasDocValues(true)__        return doubleFieldType__    };return,a,field,type,we,use,link,number,field,mapper,number,field,type,by,default,since,it,is,compatible,with,all,sort,modes,tests,that,require,other,field,types,can,override,this;protected,mapped,field,type,provide,mapped,field,type,string,name,number,field,mapper,number,field,type,double,field,type,new,number,field,mapper,number,field,type,number,field,mapper,number,type,double,double,field,type,set,name,name,double,field,type,set,has,doc,values,true,return,double,field,type
AbstractSortTestCase -> protected MappedFieldType provideMappedFieldType(String name);1538170812;Return a field type. We use {@link NumberFieldMapper.NumberFieldType} by default since it is compatible with all sort modes_Tests that require other field types can override this.;protected MappedFieldType provideMappedFieldType(String name) {_        NumberFieldMapper.NumberFieldType doubleFieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.DOUBLE)__        doubleFieldType.setName(name)__        doubleFieldType.setHasDocValues(true)__        return doubleFieldType__    };return,a,field,type,we,use,link,number,field,mapper,number,field,type,by,default,since,it,is,compatible,with,all,sort,modes,tests,that,require,other,field,types,can,override,this;protected,mapped,field,type,provide,mapped,field,type,string,name,number,field,mapper,number,field,type,double,field,type,new,number,field,mapper,number,field,type,number,field,mapper,number,type,double,double,field,type,set,name,name,double,field,type,set,has,doc,values,true,return,double,field,type
AbstractSortTestCase -> protected abstract T mutate(T original) throws IOException_;1524684173;Returns mutated version of original so the returned sort is different in terms of equals/hashcode;protected abstract T mutate(T original) throws IOException_;returns,mutated,version,of,original,so,the,returned,sort,is,different,in,terms,of,equals,hashcode;protected,abstract,t,mutate,t,original,throws,ioexception
AbstractSortTestCase -> protected abstract T mutate(T original) throws IOException_;1529916084;Returns mutated version of original so the returned sort is different in terms of equals/hashcode;protected abstract T mutate(T original) throws IOException_;returns,mutated,version,of,original,so,the,returned,sort,is,different,in,terms,of,equals,hashcode;protected,abstract,t,mutate,t,original,throws,ioexception
AbstractSortTestCase -> protected abstract T mutate(T original) throws IOException_;1538170812;Returns mutated version of original so the returned sort is different in terms of equals/hashcode;protected abstract T mutate(T original) throws IOException_;returns,mutated,version,of,original,so,the,returned,sort,is,different,in,terms,of,equals,hashcode;protected,abstract,t,mutate,t,original,throws,ioexception
AbstractSortTestCase -> protected abstract T createTestItem()_;1524684173;Returns random sort that is put under test;protected abstract T createTestItem()_;returns,random,sort,that,is,put,under,test;protected,abstract,t,create,test,item
AbstractSortTestCase -> protected abstract T createTestItem()_;1529916084;Returns random sort that is put under test;protected abstract T createTestItem()_;returns,random,sort,that,is,put,under,test;protected,abstract,t,create,test,item
AbstractSortTestCase -> protected abstract T createTestItem()_;1538170812;Returns random sort that is put under test;protected abstract T createTestItem()_;returns,random,sort,that,is,put,under,test;protected,abstract,t,create,test,item
AbstractSortTestCase -> public void testEqualsAndHashcode();1524684173;Test equality and hashCode properties;public void testEqualsAndHashcode() {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            checkEqualsAndHashCode(createTestItem(), this::copy, this::mutate)__        }_    };test,equality,and,hash,code,properties;public,void,test,equals,and,hashcode,for,int,runs,0,runs,runs,check,equals,and,hash,code,create,test,item,this,copy,this,mutate
AbstractSortTestCase -> public void testEqualsAndHashcode();1529916084;Test equality and hashCode properties;public void testEqualsAndHashcode() {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            checkEqualsAndHashCode(createTestItem(), this::copy, this::mutate)__        }_    };test,equality,and,hash,code,properties;public,void,test,equals,and,hashcode,for,int,runs,0,runs,runs,check,equals,and,hash,code,create,test,item,this,copy,this,mutate
AbstractSortTestCase -> public void testEqualsAndHashcode();1538170812;Test equality and hashCode properties;public void testEqualsAndHashcode() {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            checkEqualsAndHashCode(createTestItem(), this::copy, this::mutate)__        }_    };test,equality,and,hash,code,properties;public,void,test,equals,and,hashcode,for,int,runs,0,runs,runs,check,equals,and,hash,code,create,test,item,this,copy,this,mutate
AbstractSortTestCase -> public void testBuildSortField() throws IOException;1524684173;test that build() outputs a {@link SortField} that is similar to the one_we would get when parsing the xContent the sort builder is rendering out;public void testBuildSortField() throws IOException {_        QueryShardContext mockShardContext = createMockShardContext()__        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            T sortBuilder = createTestItem()__            SortFieldAndFormat sortField = sortBuilder.build(mockShardContext)__            sortFieldAssertions(sortBuilder, sortField.field, sortField.format)__        }_    };test,that,build,outputs,a,link,sort,field,that,is,similar,to,the,one,we,would,get,when,parsing,the,x,content,the,sort,builder,is,rendering,out;public,void,test,build,sort,field,throws,ioexception,query,shard,context,mock,shard,context,create,mock,shard,context,for,int,runs,0,runs,runs,t,sort,builder,create,test,item,sort,field,and,format,sort,field,sort,builder,build,mock,shard,context,sort,field,assertions,sort,builder,sort,field,field,sort,field,format
AbstractSortTestCase -> public void testBuildSortField() throws IOException;1529916084;test that build() outputs a {@link SortField} that is similar to the one_we would get when parsing the xContent the sort builder is rendering out;public void testBuildSortField() throws IOException {_        QueryShardContext mockShardContext = createMockShardContext()__        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            T sortBuilder = createTestItem()__            SortFieldAndFormat sortField = sortBuilder.build(mockShardContext)__            sortFieldAssertions(sortBuilder, sortField.field, sortField.format)__        }_    };test,that,build,outputs,a,link,sort,field,that,is,similar,to,the,one,we,would,get,when,parsing,the,x,content,the,sort,builder,is,rendering,out;public,void,test,build,sort,field,throws,ioexception,query,shard,context,mock,shard,context,create,mock,shard,context,for,int,runs,0,runs,runs,t,sort,builder,create,test,item,sort,field,and,format,sort,field,sort,builder,build,mock,shard,context,sort,field,assertions,sort,builder,sort,field,field,sort,field,format
AbstractSortTestCase -> public void testBuildSortField() throws IOException;1538170812;test that build() outputs a {@link SortField} that is similar to the one_we would get when parsing the xContent the sort builder is rendering out;public void testBuildSortField() throws IOException {_        QueryShardContext mockShardContext = createMockShardContext()__        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            T sortBuilder = createTestItem()__            SortFieldAndFormat sortField = sortBuilder.build(mockShardContext)__            sortFieldAssertions(sortBuilder, sortField.field, sortField.format)__        }_    };test,that,build,outputs,a,link,sort,field,that,is,similar,to,the,one,we,would,get,when,parsing,the,x,content,the,sort,builder,is,rendering,out;public,void,test,build,sort,field,throws,ioexception,query,shard,context,mock,shard,context,create,mock,shard,context,for,int,runs,0,runs,runs,t,sort,builder,create,test,item,sort,field,and,format,sort,field,sort,builder,build,mock,shard,context,sort,field,assertions,sort,builder,sort,field,field,sort,field,format
AbstractSortTestCase -> public void testFromXContent() throws IOException;1524684173;Test that creates new sort from a random test sort and checks both for equality;public void testFromXContent() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            T testItem = createTestItem()___            XContentBuilder builder = XContentFactory.contentBuilder(randomFrom(XContentType.values()))__            if (randomBoolean()) {_                builder.prettyPrint()__            }_            testItem.toXContent(builder, ToXContent.EMPTY_PARAMS)__            XContentBuilder shuffled = shuffleXContent(builder)__            XContentParser itemParser = createParser(shuffled)__            itemParser.nextToken()___            _            itemParser.nextToken()__            String elementName = itemParser.currentName()__            itemParser.nextToken()___            T parsedItem = fromXContent(itemParser, elementName)__            assertNotSame(testItem, parsedItem)__            assertEquals(testItem, parsedItem)__            assertEquals(testItem.hashCode(), parsedItem.hashCode())__            assertWarnings(testItem)__        }_    };test,that,creates,new,sort,from,a,random,test,sort,and,checks,both,for,equality;public,void,test,from,xcontent,throws,ioexception,for,int,runs,0,runs,runs,t,test,item,create,test,item,xcontent,builder,builder,xcontent,factory,content,builder,random,from,xcontent,type,values,if,random,boolean,builder,pretty,print,test,item,to,xcontent,builder,to,xcontent,xcontent,builder,shuffled,shuffle,xcontent,builder,xcontent,parser,item,parser,create,parser,shuffled,item,parser,next,token,item,parser,next,token,string,element,name,item,parser,current,name,item,parser,next,token,t,parsed,item,from,xcontent,item,parser,element,name,assert,not,same,test,item,parsed,item,assert,equals,test,item,parsed,item,assert,equals,test,item,hash,code,parsed,item,hash,code,assert,warnings,test,item
AbstractSortTestCase -> public void testFromXContent() throws IOException;1529916084;Test that creates new sort from a random test sort and checks both for equality;public void testFromXContent() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            T testItem = createTestItem()___            XContentBuilder builder = XContentFactory.contentBuilder(randomFrom(XContentType.values()))__            if (randomBoolean()) {_                builder.prettyPrint()__            }_            testItem.toXContent(builder, ToXContent.EMPTY_PARAMS)__            XContentBuilder shuffled = shuffleXContent(builder)__            try (XContentParser itemParser = createParser(shuffled)) {_                itemParser.nextToken()___                _                itemParser.nextToken()__                String elementName = itemParser.currentName()__                itemParser.nextToken()___                T parsedItem = fromXContent(itemParser, elementName)__                assertNotSame(testItem, parsedItem)__                assertEquals(testItem, parsedItem)__                assertEquals(testItem.hashCode(), parsedItem.hashCode())__                assertWarnings(testItem)__            }_        }_    };test,that,creates,new,sort,from,a,random,test,sort,and,checks,both,for,equality;public,void,test,from,xcontent,throws,ioexception,for,int,runs,0,runs,runs,t,test,item,create,test,item,xcontent,builder,builder,xcontent,factory,content,builder,random,from,xcontent,type,values,if,random,boolean,builder,pretty,print,test,item,to,xcontent,builder,to,xcontent,xcontent,builder,shuffled,shuffle,xcontent,builder,try,xcontent,parser,item,parser,create,parser,shuffled,item,parser,next,token,item,parser,next,token,string,element,name,item,parser,current,name,item,parser,next,token,t,parsed,item,from,xcontent,item,parser,element,name,assert,not,same,test,item,parsed,item,assert,equals,test,item,parsed,item,assert,equals,test,item,hash,code,parsed,item,hash,code,assert,warnings,test,item
AbstractSortTestCase -> public void testFromXContent() throws IOException;1538170812;Test that creates new sort from a random test sort and checks both for equality;public void testFromXContent() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            T testItem = createTestItem()___            XContentBuilder builder = XContentFactory.contentBuilder(randomFrom(XContentType.values()))__            if (randomBoolean()) {_                builder.prettyPrint()__            }_            testItem.toXContent(builder, ToXContent.EMPTY_PARAMS)__            XContentBuilder shuffled = shuffleXContent(builder)__            try (XContentParser itemParser = createParser(shuffled)) {_                itemParser.nextToken()___                _                itemParser.nextToken()__                String elementName = itemParser.currentName()__                itemParser.nextToken()___                T parsedItem = fromXContent(itemParser, elementName)__                assertNotSame(testItem, parsedItem)__                assertEquals(testItem, parsedItem)__                assertEquals(testItem.hashCode(), parsedItem.hashCode())__                assertWarnings(testItem)__            }_        }_    };test,that,creates,new,sort,from,a,random,test,sort,and,checks,both,for,equality;public,void,test,from,xcontent,throws,ioexception,for,int,runs,0,runs,runs,t,test,item,create,test,item,xcontent,builder,builder,xcontent,factory,content,builder,random,from,xcontent,type,values,if,random,boolean,builder,pretty,print,test,item,to,xcontent,builder,to,xcontent,xcontent,builder,shuffled,shuffle,xcontent,builder,try,xcontent,parser,item,parser,create,parser,shuffled,item,parser,next,token,item,parser,next,token,string,element,name,item,parser,current,name,item,parser,next,token,t,parsed,item,from,xcontent,item,parser,element,name,assert,not,same,test,item,parsed,item,assert,equals,test,item,parsed,item,assert,equals,test,item,hash,code,parsed,item,hash,code,assert,warnings,test,item
AbstractSortTestCase -> protected abstract T fromXContent(XContentParser parser, String fieldName) throws IOException_;1524684173;Parse the sort from xContent. Just delegate to the SortBuilder's static fromXContent method.;protected abstract T fromXContent(XContentParser parser, String fieldName) throws IOException_;parse,the,sort,from,x,content,just,delegate,to,the,sort,builder,s,static,from,xcontent,method;protected,abstract,t,from,xcontent,xcontent,parser,parser,string,field,name,throws,ioexception
AbstractSortTestCase -> protected abstract T fromXContent(XContentParser parser, String fieldName) throws IOException_;1529916084;Parse the sort from xContent. Just delegate to the SortBuilder's static fromXContent method.;protected abstract T fromXContent(XContentParser parser, String fieldName) throws IOException_;parse,the,sort,from,x,content,just,delegate,to,the,sort,builder,s,static,from,xcontent,method;protected,abstract,t,from,xcontent,xcontent,parser,parser,string,field,name,throws,ioexception
AbstractSortTestCase -> protected abstract T fromXContent(XContentParser parser, String fieldName) throws IOException_;1538170812;Parse the sort from xContent. Just delegate to the SortBuilder's static fromXContent method.;protected abstract T fromXContent(XContentParser parser, String fieldName) throws IOException_;parse,the,sort,from,x,content,just,delegate,to,the,sort,builder,s,static,from,xcontent,method;protected,abstract,t,from,xcontent,xcontent,parser,parser,string,field,name,throws,ioexception
