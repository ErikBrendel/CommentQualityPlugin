commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;public void testReadFromProperties() throws Exception {     Path pluginDir = createTempDir().resolve("fake-plugin").     PluginTestUtil.writePluginProperties(pluginDir, "description", "fake desc", "name", "my_plugin", "version", "1.0", "elasticsearch.version", Version.CURRENT.toString(), "java.version", System.getProperty("java.specification.version"), "classname", "FakePlugin").     PluginInfo info = PluginInfo.readFromProperties(pluginDir).     assertEquals("my_plugin", info.getName()).     assertEquals("fake desc", info.getDescription()).     assertEquals("1.0", info.getVersion()).     assertEquals("FakePlugin", info.getClassname()).     assertThat(info.getExtendedPlugins(), empty()). }
false;public;0;10;;public void testReadFromPropertiesNameMissing() throws Exception {     Path pluginDir = createTempDir().resolve("fake-plugin").     PluginTestUtil.writePluginProperties(pluginDir).     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> PluginInfo.readFromProperties(pluginDir)).     assertThat(e.getMessage(), containsString("property [name] is missing in")).     PluginTestUtil.writePluginProperties(pluginDir, "name", "").     e = expectThrows(IllegalArgumentException.class, () -> PluginInfo.readFromProperties(pluginDir)).     assertThat(e.getMessage(), containsString("property [name] is missing in")). }
false;public;0;6;;public void testReadFromPropertiesDescriptionMissing() throws Exception {     Path pluginDir = createTempDir().resolve("fake-plugin").     PluginTestUtil.writePluginProperties(pluginDir, "name", "fake-plugin").     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> PluginInfo.readFromProperties(pluginDir)).     assertThat(e.getMessage(), containsString("[description] is missing")). }
false;public;0;7;;public void testReadFromPropertiesVersionMissing() throws Exception {     Path pluginDir = createTempDir().resolve("fake-plugin").     PluginTestUtil.writePluginProperties(pluginDir, "description", "fake desc", "name", "fake-plugin").     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> PluginInfo.readFromProperties(pluginDir)).     assertThat(e.getMessage(), containsString("[version] is missing")). }
false;public;0;9;;public void testReadFromPropertiesElasticsearchVersionMissing() throws Exception {     Path pluginDir = createTempDir().resolve("fake-plugin").     PluginTestUtil.writePluginProperties(pluginDir, "description", "fake desc", "name", "my_plugin", "version", "1.0").     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> PluginInfo.readFromProperties(pluginDir)).     assertThat(e.getMessage(), containsString("[elasticsearch.version] is missing")). }
false;public;0;10;;public void testReadFromPropertiesJavaVersionMissing() throws Exception {     Path pluginDir = createTempDir().resolve("fake-plugin").     PluginTestUtil.writePluginProperties(pluginDir, "description", "fake desc", "name", "my_plugin", "elasticsearch.version", Version.CURRENT.toString(), "version", "1.0").     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> PluginInfo.readFromProperties(pluginDir)).     assertThat(e.getMessage(), containsString("[java.version] is missing")). }
false;public;0;14;;public void testReadFromPropertiesBadJavaVersionFormat() throws Exception {     String pluginName = "fake-plugin".     Path pluginDir = createTempDir().resolve(pluginName).     PluginTestUtil.writePluginProperties(pluginDir, "description", "fake desc", "name", pluginName, "elasticsearch.version", Version.CURRENT.toString(), "java.version", "1.7.0_80", "classname", "FakePlugin", "version", "1.0").     IllegalStateException e = expectThrows(IllegalStateException.class, () -> PluginInfo.readFromProperties(pluginDir)).     assertThat(e.getMessage(), equalTo("version string must be a sequence of nonnegative decimal integers separated" + " by \".\"'s and may have leading zeros but was 1.7.0_80")). }
false;public;0;10;;public void testReadFromPropertiesBogusElasticsearchVersion() throws Exception {     Path pluginDir = createTempDir().resolve("fake-plugin").     PluginTestUtil.writePluginProperties(pluginDir, "description", "fake desc", "version", "1.0", "name", "my_plugin", "elasticsearch.version", "bogus").     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> PluginInfo.readFromProperties(pluginDir)).     assertThat(e.getMessage(), containsString("version needs to contain major, minor, and revision")). }
false;public;0;11;;public void testReadFromPropertiesJvmMissingClassname() throws Exception {     Path pluginDir = createTempDir().resolve("fake-plugin").     PluginTestUtil.writePluginProperties(pluginDir, "description", "fake desc", "name", "my_plugin", "version", "1.0", "elasticsearch.version", Version.CURRENT.toString(), "java.version", System.getProperty("java.specification.version")).     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> PluginInfo.readFromProperties(pluginDir)).     assertThat(e.getMessage(), containsString("property [classname] is missing")). }
false;public;0;13;;public void testExtendedPluginsSingleExtension() throws Exception {     Path pluginDir = createTempDir().resolve("fake-plugin").     PluginTestUtil.writePluginProperties(pluginDir, "description", "fake desc", "name", "my_plugin", "version", "1.0", "elasticsearch.version", Version.CURRENT.toString(), "java.version", System.getProperty("java.specification.version"), "classname", "FakePlugin", "extended.plugins", "foo").     PluginInfo info = PluginInfo.readFromProperties(pluginDir).     assertThat(info.getExtendedPlugins(), contains("foo")). }
false;public;0;13;;public void testExtendedPluginsMultipleExtensions() throws Exception {     Path pluginDir = createTempDir().resolve("fake-plugin").     PluginTestUtil.writePluginProperties(pluginDir, "description", "fake desc", "name", "my_plugin", "version", "1.0", "elasticsearch.version", Version.CURRENT.toString(), "java.version", System.getProperty("java.specification.version"), "classname", "FakePlugin", "extended.plugins", "foo,bar,baz").     PluginInfo info = PluginInfo.readFromProperties(pluginDir).     assertThat(info.getExtendedPlugins(), contains("foo", "bar", "baz")). }
false;public;0;13;;public void testExtendedPluginsEmpty() throws Exception {     Path pluginDir = createTempDir().resolve("fake-plugin").     PluginTestUtil.writePluginProperties(pluginDir, "description", "fake desc", "name", "my_plugin", "version", "1.0", "elasticsearch.version", Version.CURRENT.toString(), "java.version", System.getProperty("java.specification.version"), "classname", "FakePlugin", "extended.plugins", "").     PluginInfo info = PluginInfo.readFromProperties(pluginDir).     assertThat(info.getExtendedPlugins(), empty()). }
false;public;0;11;;public void testSerialize() throws Exception {     PluginInfo info = new PluginInfo("c", "foo", "dummy", Version.CURRENT, "1.8", "dummyclass", Collections.singletonList("foo"), randomBoolean()).     BytesStreamOutput output = new BytesStreamOutput().     info.writeTo(output).     ByteBuffer buffer = ByteBuffer.wrap(output.bytes().toBytesRef().bytes).     ByteBufferStreamInput input = new ByteBufferStreamInput(buffer).     PluginInfo info2 = new PluginInfo(input).     assertThat(info2.toString(), equalTo(info.toString())). }
false;public;0;18;;public void testPluginListSorted() {     List<PluginInfo> plugins = new ArrayList<>().     plugins.add(new PluginInfo("c", "foo", "dummy", Version.CURRENT, "1.8", "dummyclass", Collections.emptyList(), randomBoolean())).     plugins.add(new PluginInfo("b", "foo", "dummy", Version.CURRENT, "1.8", "dummyclass", Collections.emptyList(), randomBoolean())).     plugins.add(new PluginInfo("e", "foo", "dummy", Version.CURRENT, "1.8", "dummyclass", Collections.emptyList(), randomBoolean())).     plugins.add(new PluginInfo("a", "foo", "dummy", Version.CURRENT, "1.8", "dummyclass", Collections.emptyList(), randomBoolean())).     plugins.add(new PluginInfo("d", "foo", "dummy", Version.CURRENT, "1.8", "dummyclass", Collections.emptyList(), randomBoolean())).     PluginsAndModules pluginsInfo = new PluginsAndModules(plugins, Collections.emptyList()).     final List<PluginInfo> infos = pluginsInfo.getPluginInfos().     List<String> names = infos.stream().map(PluginInfo::getName).collect(Collectors.toList()).     assertThat(names, contains("a", "b", "c", "d", "e")). }
false;public;0;14;;public void testUnknownProperties() throws Exception {     Path pluginDir = createTempDir().resolve("fake-plugin").     PluginTestUtil.writePluginProperties(pluginDir, "extra", "property", "unknown", "property", "description", "fake desc", "classname", "Foo", "name", "my_plugin", "version", "1.0", "elasticsearch.version", Version.CURRENT.toString(), "java.version", System.getProperty("java.specification.version")).     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> PluginInfo.readFromProperties(pluginDir)).     assertThat(e.getMessage(), containsString("Unknown properties in plugin descriptor")). }
