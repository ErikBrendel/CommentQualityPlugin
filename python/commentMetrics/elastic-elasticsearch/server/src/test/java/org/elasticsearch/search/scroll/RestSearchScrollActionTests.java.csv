commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;public void testParseSearchScrollRequestWithInvalidJsonThrowsException() throws Exception {     RestSearchScrollAction action = new RestSearchScrollAction(Settings.EMPTY, mock(RestController.class)).     RestRequest request = new FakeRestRequest.Builder(xContentRegistry()).withContent(new BytesArray("{invalid_json}"), XContentType.JSON).build().     Exception e = expectThrows(IllegalArgumentException.class, () -> action.prepareRequest(request, null)).     assertThat(e.getMessage(), equalTo("Failed to parse request body")). }
false;public;0;20;;public void testBodyParamsOverrideQueryStringParams() throws Exception {     NodeClient nodeClient = mock(NodeClient.class).     doNothing().when(nodeClient).searchScroll(any(), any()).     RestSearchScrollAction action = new RestSearchScrollAction(Settings.EMPTY, mock(RestController.class)).     Map<String, String> params = new HashMap<>().     params.put("scroll_id", "QUERY_STRING").     params.put("scroll", "1000m").     RestRequest request = new FakeRestRequest.Builder(xContentRegistry()).withParams(params).withContent(new BytesArray("{\"scroll_id\":\"BODY\", \"scroll\":\"1m\"}"), XContentType.JSON).build().     FakeRestChannel channel = new FakeRestChannel(request, false, 0).     action.handleRequest(request, channel, nodeClient).     ArgumentCaptor<SearchScrollRequest> argument = ArgumentCaptor.forClass(SearchScrollRequest.class).     verify(nodeClient).searchScroll(argument.capture(), anyObject()).     SearchScrollRequest searchScrollRequest = argument.getValue().     assertEquals("BODY", searchScrollRequest.scrollId()).     assertEquals("1m", searchScrollRequest.scroll().keepAlive().getStringRep()). }
