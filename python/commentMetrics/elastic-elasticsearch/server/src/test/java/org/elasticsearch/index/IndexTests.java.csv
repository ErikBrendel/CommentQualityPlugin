commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;public void testToString() {     assertEquals("[name/uuid]", new Index("name", "uuid").toString()).     assertEquals("[name]", new Index("name", ClusterState.UNKNOWN_UUID).toString()).     Index random = new Index(randomSimpleString(random(), 1, 100), usually() ? UUIDs.randomBase64UUID(random()) : ClusterState.UNKNOWN_UUID).     assertThat(random.toString(), containsString(random.getName())).     if (ClusterState.UNKNOWN_UUID.equals(random.getUUID())) {         assertThat(random.toString(), not(containsString(random.getUUID()))).     } else {         assertThat(random.toString(), containsString(random.getUUID())).     } }
false;public;0;11;;public void testXContent() throws IOException {     final String name = randomAlphaOfLengthBetween(4, 15).     final String uuid = UUIDs.randomBase64UUID().     final Index original = new Index(name, uuid).     final XContentBuilder builder = JsonXContent.contentBuilder().     original.toXContent(builder, ToXContent.EMPTY_PARAMS).     try (XContentParser parser = createParser(JsonXContent.jsonXContent, BytesReference.bytes(builder))) {         // the beginning of the parser         parser.nextToken().         assertThat(Index.fromXContent(parser), equalTo(original)).     } }
false;public;0;13;;public void testEquals() {     Index index1 = new Index("a", "a").     Index index2 = new Index("a", "a").     Index index3 = new Index("a", "b").     Index index4 = new Index("b", "a").     String s = "Some random other object".     assertEquals(index1, index1).     assertEquals(index1, index2).     assertNotEquals(index1, null).     assertNotEquals(index1, s).     assertNotEquals(index1, index3).     assertNotEquals(index1, index4). }
