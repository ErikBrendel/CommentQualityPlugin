commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String pluginScriptLang() {     return METRIC_SCRIPT_ENGINE. }
false;protected;0;31;;@Override protected Map<String, Function<Map<String, Object>, Object>> pluginScripts() {     Map<String, Function<Map<String, Object>, Object>> scripts = new HashMap<>().     Function<Map<String, Object>, Integer> getInc = vars -> {         if (vars == null || vars.containsKey("inc") == false) {             return 0.         } else {             return ((Number) vars.get("inc")).intValue().         }     }.     BiFunction<Map<String, Object>, String, Object> sum = (vars, fieldname) -> {         int inc = getInc.apply(vars).         LeafDocLookup docLookup = (LeafDocLookup) vars.get("doc").         List<Long> values = new ArrayList<>().         for (Object v : docLookup.get(fieldname)) {             values.add(((Number) v).longValue() + inc).         }         return values.     }.     scripts.put(SUM_FIELD_PARAMS_SCRIPT, vars -> {         String fieldname = (String) vars.get("field").         return sum.apply(vars, fieldname).     }).     scripts.put(SUM_VALUES_FIELD_SCRIPT, vars -> sum.apply(vars, "values")).     scripts.put(VALUE_FIELD_SCRIPT, vars -> sum.apply(vars, "value")).     scripts.put(VALUE_SCRIPT, vars -> {         int inc = getInc.apply(vars).         return ((Number) vars.get("_value")).doubleValue() + inc.     }).     return scripts. }
