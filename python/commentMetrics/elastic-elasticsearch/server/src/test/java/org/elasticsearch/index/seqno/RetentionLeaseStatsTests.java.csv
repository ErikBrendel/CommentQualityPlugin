commented;modifiers;parameterAmount;loc;comment;code
false;public;0;26;;public void testRetentionLeaseStats() throws InterruptedException {     final Settings settings = Settings.builder().put("index.number_of_shards", 1).put("index.number_of_replicas", 0).build().     createIndex("index", settings).     ensureGreen("index").     final IndexShard primary = node().injector().getInstance(IndicesService.class).getShardOrNull(new ShardId(resolveIndex("index"), 0)).     final int length = randomIntBetween(0, 8).     final Map<String, RetentionLease> currentRetentionLeases = new HashMap<>().     for (int i = 0. i < length. i++) {         final String id = randomValueOtherThanMany(currentRetentionLeases.keySet()::contains, () -> randomAlphaOfLength(8)).         final long retainingSequenceNumber = randomLongBetween(0, Long.MAX_VALUE).         final String source = randomAlphaOfLength(8).         final CountDownLatch latch = new CountDownLatch(1).         final ActionListener<ReplicationResponse> listener = ActionListener.wrap(r -> latch.countDown(), e -> fail(e.toString())).         currentRetentionLeases.put(id, primary.addRetentionLease(id, retainingSequenceNumber, source, listener)).         latch.await().     }     final IndicesStatsResponse indicesStats = client().admin().indices().prepareStats("index").execute().actionGet().     assertThat(indicesStats.getShards(), arrayWithSize(1)).     final RetentionLeaseStats retentionLeaseStats = indicesStats.getShards()[0].getRetentionLeaseStats().     assertThat(RetentionLeases.toMap(retentionLeaseStats.retentionLeases()), equalTo(currentRetentionLeases)). }
