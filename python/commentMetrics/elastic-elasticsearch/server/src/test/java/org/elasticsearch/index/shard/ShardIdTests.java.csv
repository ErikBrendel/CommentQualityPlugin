commented;modifiers;parameterAmount;loc;comment;code
false;public;0;27;;public void testShardIdFromString() {     String indexName = randomAlphaOfLengthBetween(3, 50).     int shardId = randomInt().     ShardId id = ShardId.fromString("[" + indexName + "][" + shardId + "]").     assertEquals(indexName, id.getIndexName()).     assertEquals(shardId, id.getId()).     assertEquals(indexName, id.getIndex().getName()).     assertEquals(IndexMetaData.INDEX_UUID_NA_VALUE, id.getIndex().getUUID()).     id = ShardId.fromString("[some]weird[0]Name][-125]").     assertEquals("some]weird[0]Name", id.getIndexName()).     assertEquals(-125, id.getId()).     assertEquals("some]weird[0]Name", id.getIndex().getName()).     assertEquals(IndexMetaData.INDEX_UUID_NA_VALUE, id.getIndex().getUUID()).     // missing separator     String badId = indexName + "," + shardId.     IllegalArgumentException ex = expectThrows(IllegalArgumentException.class, () -> ShardId.fromString(badId)).     assertEquals("Unexpected shardId string format, expected [indexName][shardId] but got " + badId, ex.getMessage()).     // missing opening bracket     String badId2 = indexName + "][" + shardId + "]".     ex = expectThrows(IllegalArgumentException.class, () -> ShardId.fromString(badId2)).     // missing closing bracket     String badId3 = "[" + indexName + "][" + shardId.     ex = expectThrows(IllegalArgumentException.class, () -> ShardId.fromString(badId3)). }
false;public;0;15;;public void testEquals() {     Index index1 = new Index("a", "a").     Index index2 = new Index("a", "b").     ShardId shardId1 = new ShardId(index1, 0).     ShardId shardId2 = new ShardId(index1, 0).     ShardId shardId3 = new ShardId(index2, 0).     ShardId shardId4 = new ShardId(index1, 1).     String s = "Some random other object".     assertEquals(shardId1, shardId1).     assertEquals(shardId1, shardId2).     assertNotEquals(shardId1, null).     assertNotEquals(shardId1, s).     assertNotEquals(shardId1, shardId3).     assertNotEquals(shardId1, shardId4). }
