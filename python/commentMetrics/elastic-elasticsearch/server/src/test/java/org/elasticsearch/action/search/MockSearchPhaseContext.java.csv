commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;public void assertNoFailure() {     if (phaseFailure.get() != null) {         throw new AssertionError(phaseFailure.get()).     } }
false;public;0;4;;@Override public int getNumShards() {     return numShards. }
false;public;0;4;;@Override public Logger getLogger() {     return logger. }
false;public;0;4;;@Override public SearchTask getTask() {     return new SearchTask(0, "n/a", "n/a", "test", null, Collections.emptyMap()). }
false;public;0;4;;@Override public SearchRequest getRequest() {     return searchRequest. }
false;public;2;5;;@Override public SearchResponse buildSearchResponse(InternalSearchResponse internalSearchResponse, String scrollId) {     return new SearchResponse(internalSearchResponse, scrollId, numShards, numSuccess.get(), 0, 0, failures.toArray(new ShardSearchFailure[failures.size()]), SearchResponse.Clusters.EMPTY). }
false;public;3;4;;@Override public void onPhaseFailure(SearchPhase phase, String msg, Throwable cause) {     phaseFailure.set(cause). }
false;public;3;5;;@Override public void onShardFailure(int shardIndex, @Nullable SearchShardTarget shardTarget, Exception e) {     failures.add(new ShardSearchFailure(e, shardTarget)).     numSuccess.decrementAndGet(). }
false;public;2;4;;@Override public Transport.Connection getConnection(String clusterAlias, String nodeId) {     // null is ok here for this test     return null. }
false;public;0;5;;@Override public SearchTransportService getSearchTransport() {     Assert.assertNotNull(searchTransport).     return searchTransport. }
false;public;1;5;;@Override public ShardSearchTransportRequest buildShardSearchRequest(SearchShardIterator shardIt) {     Assert.fail("should not be called").     return null. }
false;public;2;9;;@Override public void executeNextPhase(SearchPhase currentPhase, SearchPhase nextPhase) {     phasesExecuted.incrementAndGet().     try {         nextPhase.run().     } catch (Exception e) {         onPhaseFailure(nextPhase, "phase failed", e).     } }
false;public;1;4;;@Override public void execute(Runnable command) {     command.run(). }
false;public;1;4;;@Override public void onResponse(SearchResponse response) {     Assert.fail("should not be called"). }
false;public;1;4;;@Override public void onFailure(Exception e) {     Assert.fail("should not be called"). }
false;public;3;4;;@Override public void sendReleaseSearchContext(long contextId, Transport.Connection connection, OriginalIndices originalIndices) {     releasedSearchContexts.add(contextId). }
