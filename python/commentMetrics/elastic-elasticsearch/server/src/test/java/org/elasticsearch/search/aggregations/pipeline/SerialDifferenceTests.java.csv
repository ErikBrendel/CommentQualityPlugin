commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;16;;@Override protected SerialDiffPipelineAggregationBuilder createTestAggregatorFactory() {     String name = randomAlphaOfLengthBetween(3, 20).     String bucketsPath = randomAlphaOfLengthBetween(3, 20).     SerialDiffPipelineAggregationBuilder factory = new SerialDiffPipelineAggregationBuilder(name, bucketsPath).     if (randomBoolean()) {         factory.format(randomAlphaOfLengthBetween(1, 10)).     }     if (randomBoolean()) {         factory.gapPolicy(randomFrom(GapPolicy.values())).     }     if (randomBoolean()) {         factory.lag(randomIntBetween(1, 1000)).     }     return factory. }
true;public;0;7;/**  * The validation should verify the parent aggregation is allowed.  */ ;/**  * The validation should verify the parent aggregation is allowed.  */ public void testValidate() throws IOException {     final Set<PipelineAggregationBuilder> aggBuilders = new HashSet<>().     aggBuilders.add(createTestAggregatorFactory()).     final SerialDiffPipelineAggregationBuilder builder = new SerialDiffPipelineAggregationBuilder("name", "valid").     builder.validate(PipelineAggregationHelperTests.getRandomSequentiallyOrderedParentAgg(), Collections.emptySet(), aggBuilders). }
true;public;0;11;/**  * The validation should throw an IllegalArgumentException, since parent  * aggregation is not a type of HistogramAggregatorFactory,  * DateHistogramAggregatorFactory or AutoDateHistogramAggregatorFactory.  */ ;/**  * The validation should throw an IllegalArgumentException, since parent  * aggregation is not a type of HistogramAggregatorFactory,  * DateHistogramAggregatorFactory or AutoDateHistogramAggregatorFactory.  */ public void testValidateException() throws IOException {     final Set<PipelineAggregationBuilder> aggBuilders = new HashSet<>().     aggBuilders.add(createTestAggregatorFactory()).     TestAggregatorFactory parentFactory = TestAggregatorFactory.createInstance().     final SerialDiffPipelineAggregationBuilder builder = new SerialDiffPipelineAggregationBuilder("name", "invalid_agg>metric").     IllegalStateException ex = expectThrows(IllegalStateException.class, () -> builder.validate(parentFactory, Collections.emptySet(), aggBuilders)).     assertEquals("serial_diff aggregation [name] must have a histogram, date_histogram or auto_date_histogram as parent", ex.getMessage()). }
