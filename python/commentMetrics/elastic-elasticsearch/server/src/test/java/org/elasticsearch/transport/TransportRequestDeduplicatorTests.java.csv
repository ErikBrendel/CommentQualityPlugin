commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;@Override public void setParentTask(final TaskId taskId) { }
false;public;1;4;;@Override public void onResponse(Void aVoid) {     successCount.incrementAndGet(). }
false;public;1;5;;@Override public void onFailure(Exception e) {     assertThat(e, sameInstance(failure)).     failureCount.incrementAndGet(). }
false;public;0;56;;public void testRequestDeduplication() throws Exception {     AtomicInteger successCount = new AtomicInteger().     AtomicInteger failureCount = new AtomicInteger().     Exception failure = randomBoolean() ? new TransportException("simulated") : null.     final TransportRequest request = new TransportRequest() {          @Override         public void setParentTask(final TaskId taskId) {         }     }.     final TransportRequestDeduplicator<TransportRequest> deduplicator = new TransportRequestDeduplicator<>().     final SetOnce<ActionListener<Void>> listenerHolder = new SetOnce<>().     int iterationsPerThread = scaledRandomIntBetween(100, 1000).     Thread[] threads = new Thread[between(1, 4)].     Phaser barrier = new Phaser(threads.length + 1).     for (int i = 0. i < threads.length. i++) {         threads[i] = new Thread(() -> {             barrier.arriveAndAwaitAdvance().             for (int n = 0. n < iterationsPerThread. n++) {                 deduplicator.executeOnce(request, new ActionListener<Void>() {                      @Override                     public void onResponse(Void aVoid) {                         successCount.incrementAndGet().                     }                      @Override                     public void onFailure(Exception e) {                         assertThat(e, sameInstance(failure)).                         failureCount.incrementAndGet().                     }                 }, (req, reqListener) -> listenerHolder.set(reqListener)).             }         }).         threads[i].start().     }     barrier.arriveAndAwaitAdvance().     for (Thread t : threads) {         t.join().     }     final ActionListener<Void> listener = listenerHolder.get().     assertThat(deduplicator.size(), equalTo(1)).     if (failure != null) {         listener.onFailure(failure).     } else {         listener.onResponse(null).     }     assertThat(deduplicator.size(), equalTo(0)).     assertBusy(() -> {         if (failure != null) {             assertThat(successCount.get(), equalTo(0)).             assertThat(failureCount.get(), equalTo(threads.length * iterationsPerThread)).         } else {             assertThat(successCount.get(), equalTo(threads.length * iterationsPerThread)).             assertThat(failureCount.get(), equalTo(0)).         }     }). }
