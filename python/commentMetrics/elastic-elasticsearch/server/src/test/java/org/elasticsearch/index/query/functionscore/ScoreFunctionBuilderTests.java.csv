commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;public void testIllegalArguments() {     expectThrows(IllegalArgumentException.class, () -> new RandomScoreFunctionBuilder().seed(null)).     expectThrows(IllegalArgumentException.class, () -> new ScriptScoreFunctionBuilder((Script) null)).     expectThrows(IllegalArgumentException.class, () -> new FieldValueFactorFunctionBuilder((String) null)).     expectThrows(IllegalArgumentException.class, () -> new FieldValueFactorFunctionBuilder("").modifier(null)).     expectThrows(IllegalArgumentException.class, () -> new GaussDecayFunctionBuilder(null, "", "", "")).     expectThrows(IllegalArgumentException.class, () -> new GaussDecayFunctionBuilder("", "", null, "")).     expectThrows(IllegalArgumentException.class, () -> new GaussDecayFunctionBuilder("", "", null, "", randomDouble())).     expectThrows(IllegalArgumentException.class, () -> new LinearDecayFunctionBuilder(null, "", "", "")).     expectThrows(IllegalArgumentException.class, () -> new LinearDecayFunctionBuilder("", "", null, "")).     expectThrows(IllegalArgumentException.class, () -> new LinearDecayFunctionBuilder("", "", null, "", randomDouble())).     expectThrows(IllegalArgumentException.class, () -> new ExponentialDecayFunctionBuilder(null, "", "", "")).     expectThrows(IllegalArgumentException.class, () -> new ExponentialDecayFunctionBuilder("", "", null, "")).     expectThrows(IllegalArgumentException.class, () -> new ExponentialDecayFunctionBuilder("", "", null, "", randomDouble())). }
false;public;0;18;;public void testRandomScoreFunctionWithSeed() throws Exception {     RandomScoreFunctionBuilder builder = new RandomScoreFunctionBuilder().     builder.seed(42).     QueryShardContext context = Mockito.mock(QueryShardContext.class).     Settings indexSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 1).build().     IndexSettings settings = new IndexSettings(IndexMetaData.builder("index").settings(indexSettings).build(), Settings.EMPTY).     Mockito.when(context.index()).thenReturn(settings.getIndex()).     Mockito.when(context.getShardId()).thenReturn(0).     Mockito.when(context.getIndexSettings()).thenReturn(settings).     MapperService mapperService = Mockito.mock(MapperService.class).     MappedFieldType ft = new NumberFieldMapper.NumberFieldType(NumberType.LONG).     ft.setName("foo").     Mockito.when(mapperService.fullName(Mockito.anyString())).thenReturn(ft).     Mockito.when(context.getMapperService()).thenReturn(mapperService).     builder.toFunction(context).     assertWarnings("As of version 7.0 Elasticsearch will require that a [field] parameter is provided when a [seed] is set"). }
