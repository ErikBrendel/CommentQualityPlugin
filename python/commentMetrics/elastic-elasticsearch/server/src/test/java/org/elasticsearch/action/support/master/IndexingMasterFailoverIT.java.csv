# id;timestamp;commentText;codeText;commentWords;codeWords
IndexingMasterFailoverIT -> @TestLogging("_root:DEBUG")     public void testMasterFailoverDuringIndexingWithMappingChanges() throws Throwable;1524684173;Indexing operations which entail mapping changes require a blocking request to the master node to update the mapping._If the master node is being disrupted or if it cannot commit cluster state changes, it needs to retry within timeout limits._This retry logic is implemented in TransportMasterNodeAction and tested by the following master failover scenario.;@TestLogging("_root:DEBUG")_    public void testMasterFailoverDuringIndexingWithMappingChanges() throws Throwable {_        logger.info("--> start 4 nodes, 3 master, 1 data")___        final Settings sharedSettings = Settings.builder()_                .put(FaultDetection.PING_TIMEOUT_SETTING.getKey(), "1s") _                .put(FaultDetection.PING_RETRIES_SETTING.getKey(), "1") _                .put("discovery.zen.join_timeout", "10s")  _                .put(DiscoverySettings.PUBLISH_TIMEOUT_SETTING.getKey(), "1s") _                .put(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), 2)_                .build()___        internalCluster().startMasterOnlyNodes(3, sharedSettings)___        String dataNode = internalCluster().startDataOnlyNode(sharedSettings)___        logger.info("--> wait for all nodes to join the cluster")__        ensureStableCluster(4)___        _        client().admin().indices().prepareCreate("myindex")_                .setSettings(Settings.builder().put("index.number_of_shards", 1).put("index.number_of_replicas", 0))_                .get()__        ensureGreen("myindex")___        final CyclicBarrier barrier = new CyclicBarrier(2)___        Thread indexingThread = new Thread(new Runnable() {_            @Override_            public void run() {_                try {_                    barrier.await()__                } catch (InterruptedException e) {_                    logger.warn("Barrier interrupted", e)__                    return__                } catch (BrokenBarrierException e) {_                    logger.warn("Broken barrier", e)__                    return__                }_                for (int i = 0_ i < 10_ i++) {_                    _                    IndexResponse response = client(dataNode).prepareIndex("myindex", "mytype").setSource("field_" + i, "val").get()__                    assertEquals(DocWriteResponse.Result.CREATED, response.getResult())__                }_            }_        })__        indexingThread.setName("indexingThread")__        indexingThread.start()___        barrier.await()___        _        String master = internalCluster().getMasterName()__        Set<String> otherNodes = new HashSet<>(Arrays.asList(internalCluster().getNodeNames()))__        otherNodes.remove(master)___        NetworkDisruption partition = new NetworkDisruption(_            new TwoPartitions(Collections.singleton(master), otherNodes),_            new NetworkDisconnect())__        internalCluster().setDisruptionScheme(partition)___        logger.info("--> disrupting network")__        partition.startDisrupting()___        logger.info("--> waiting for new master to be elected")__        ensureStableCluster(3, dataNode)___        partition.stopDisrupting()__        logger.info("--> waiting to heal")__        ensureStableCluster(4)___        indexingThread.join()___        ensureGreen("myindex")__        refresh()__        assertThat(client().prepareSearch("myindex").get().getHits().getTotalHits(), equalTo(10L))__    };indexing,operations,which,entail,mapping,changes,require,a,blocking,request,to,the,master,node,to,update,the,mapping,if,the,master,node,is,being,disrupted,or,if,it,cannot,commit,cluster,state,changes,it,needs,to,retry,within,timeout,limits,this,retry,logic,is,implemented,in,transport,master,node,action,and,tested,by,the,following,master,failover,scenario;test,logging,debug,public,void,test,master,failover,during,indexing,with,mapping,changes,throws,throwable,logger,info,start,4,nodes,3,master,1,data,final,settings,shared,settings,settings,builder,put,fault,detection,get,key,1s,put,fault,detection,get,key,1,put,discovery,zen,10s,put,discovery,settings,get,key,1s,put,elect,master,service,get,key,2,build,internal,cluster,start,master,only,nodes,3,shared,settings,string,data,node,internal,cluster,start,data,only,node,shared,settings,logger,info,wait,for,all,nodes,to,join,the,cluster,ensure,stable,cluster,4,client,admin,indices,prepare,create,myindex,set,settings,settings,builder,put,index,1,put,index,0,get,ensure,green,myindex,final,cyclic,barrier,barrier,new,cyclic,barrier,2,thread,indexing,thread,new,thread,new,runnable,override,public,void,run,try,barrier,await,catch,interrupted,exception,e,logger,warn,barrier,interrupted,e,return,catch,broken,barrier,exception,e,logger,warn,broken,barrier,e,return,for,int,i,0,i,10,i,index,response,response,client,data,node,prepare,index,myindex,mytype,set,source,i,val,get,assert,equals,doc,write,response,result,created,response,get,result,indexing,thread,set,name,indexing,thread,indexing,thread,start,barrier,await,string,master,internal,cluster,get,master,name,set,string,other,nodes,new,hash,set,arrays,as,list,internal,cluster,get,node,names,other,nodes,remove,master,network,disruption,partition,new,network,disruption,new,two,partitions,collections,singleton,master,other,nodes,new,network,disconnect,internal,cluster,set,disruption,scheme,partition,logger,info,disrupting,network,partition,start,disrupting,logger,info,waiting,for,new,master,to,be,elected,ensure,stable,cluster,3,data,node,partition,stop,disrupting,logger,info,waiting,to,heal,ensure,stable,cluster,4,indexing,thread,join,ensure,green,myindex,refresh,assert,that,client,prepare,search,myindex,get,get,hits,get,total,hits,equal,to,10l
IndexingMasterFailoverIT -> @TestLogging("_root:DEBUG")     public void testMasterFailoverDuringIndexingWithMappingChanges() throws Throwable;1548326386;Indexing operations which entail mapping changes require a blocking request to the master node to update the mapping._If the master node is being disrupted or if it cannot commit cluster state changes, it needs to retry within timeout limits._This retry logic is implemented in TransportMasterNodeAction and tested by the following master failover scenario.;@TestLogging("_root:DEBUG")_    public void testMasterFailoverDuringIndexingWithMappingChanges() throws Throwable {_        logger.info("--> start 4 nodes, 3 master, 1 data")___        final Settings sharedSettings = Settings.builder()_                .put(FaultDetection.PING_TIMEOUT_SETTING.getKey(), "1s") _                .put(FaultDetection.PING_RETRIES_SETTING.getKey(), "1") _                .put(TestZenDiscovery.USE_ZEN2.getKey(), false)_                .put("discovery.zen.join_timeout", "10s")  _                .put(DiscoverySettings.PUBLISH_TIMEOUT_SETTING.getKey(), "1s") _                .put(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), 2)_                .build()___        internalCluster().startMasterOnlyNodes(3, sharedSettings)___        String dataNode = internalCluster().startDataOnlyNode(sharedSettings)___        logger.info("--> wait for all nodes to join the cluster")__        ensureStableCluster(4)___        _        client().admin().indices().prepareCreate("myindex")_                .setSettings(Settings.builder().put("index.number_of_shards", 1).put("index.number_of_replicas", 0))_                .get()__        ensureGreen("myindex")___        final CyclicBarrier barrier = new CyclicBarrier(2)___        Thread indexingThread = new Thread(new Runnable() {_            @Override_            public void run() {_                try {_                    barrier.await()__                } catch (InterruptedException e) {_                    logger.warn("Barrier interrupted", e)__                    return__                } catch (BrokenBarrierException e) {_                    logger.warn("Broken barrier", e)__                    return__                }_                for (int i = 0_ i < 10_ i++) {_                    _                    IndexResponse response = client(dataNode).prepareIndex("myindex", "mytype").setSource("field_" + i, "val").get()__                    assertEquals(DocWriteResponse.Result.CREATED, response.getResult())__                }_            }_        })__        indexingThread.setName("indexingThread")__        indexingThread.start()___        barrier.await()___        _        String master = internalCluster().getMasterName()__        Set<String> otherNodes = new HashSet<>(Arrays.asList(internalCluster().getNodeNames()))__        otherNodes.remove(master)___        NetworkDisruption partition = new NetworkDisruption(_            new TwoPartitions(Collections.singleton(master), otherNodes),_            new NetworkDisconnect())__        internalCluster().setDisruptionScheme(partition)___        logger.info("--> disrupting network")__        partition.startDisrupting()___        logger.info("--> waiting for new master to be elected")__        ensureStableCluster(3, dataNode)___        partition.stopDisrupting()__        logger.info("--> waiting to heal")__        ensureStableCluster(4)___        indexingThread.join()___        ensureGreen("myindex")__        refresh()__        assertThat(client().prepareSearch("myindex").get().getHits().getTotalHits().value, equalTo(10L))__    };indexing,operations,which,entail,mapping,changes,require,a,blocking,request,to,the,master,node,to,update,the,mapping,if,the,master,node,is,being,disrupted,or,if,it,cannot,commit,cluster,state,changes,it,needs,to,retry,within,timeout,limits,this,retry,logic,is,implemented,in,transport,master,node,action,and,tested,by,the,following,master,failover,scenario;test,logging,debug,public,void,test,master,failover,during,indexing,with,mapping,changes,throws,throwable,logger,info,start,4,nodes,3,master,1,data,final,settings,shared,settings,settings,builder,put,fault,detection,get,key,1s,put,fault,detection,get,key,1,put,test,zen,discovery,get,key,false,put,discovery,zen,10s,put,discovery,settings,get,key,1s,put,elect,master,service,get,key,2,build,internal,cluster,start,master,only,nodes,3,shared,settings,string,data,node,internal,cluster,start,data,only,node,shared,settings,logger,info,wait,for,all,nodes,to,join,the,cluster,ensure,stable,cluster,4,client,admin,indices,prepare,create,myindex,set,settings,settings,builder,put,index,1,put,index,0,get,ensure,green,myindex,final,cyclic,barrier,barrier,new,cyclic,barrier,2,thread,indexing,thread,new,thread,new,runnable,override,public,void,run,try,barrier,await,catch,interrupted,exception,e,logger,warn,barrier,interrupted,e,return,catch,broken,barrier,exception,e,logger,warn,broken,barrier,e,return,for,int,i,0,i,10,i,index,response,response,client,data,node,prepare,index,myindex,mytype,set,source,i,val,get,assert,equals,doc,write,response,result,created,response,get,result,indexing,thread,set,name,indexing,thread,indexing,thread,start,barrier,await,string,master,internal,cluster,get,master,name,set,string,other,nodes,new,hash,set,arrays,as,list,internal,cluster,get,node,names,other,nodes,remove,master,network,disruption,partition,new,network,disruption,new,two,partitions,collections,singleton,master,other,nodes,new,network,disconnect,internal,cluster,set,disruption,scheme,partition,logger,info,disrupting,network,partition,start,disrupting,logger,info,waiting,for,new,master,to,be,elected,ensure,stable,cluster,3,data,node,partition,stop,disrupting,logger,info,waiting,to,heal,ensure,stable,cluster,4,indexing,thread,join,ensure,green,myindex,refresh,assert,that,client,prepare,search,myindex,get,get,hits,get,total,hits,value,equal,to,10l
IndexingMasterFailoverIT -> @TestLogging("_root:DEBUG")     public void testMasterFailoverDuringIndexingWithMappingChanges() throws Throwable;1549031048;Indexing operations which entail mapping changes require a blocking request to the master node to update the mapping._If the master node is being disrupted or if it cannot commit cluster state changes, it needs to retry within timeout limits._This retry logic is implemented in TransportMasterNodeAction and tested by the following master failover scenario.;@TestLogging("_root:DEBUG")_    public void testMasterFailoverDuringIndexingWithMappingChanges() throws Throwable {_        logger.info("--> start 4 nodes, 3 master, 1 data")___        final Settings sharedSettings = Settings.builder()_                .put(FaultDetection.PING_TIMEOUT_SETTING.getKey(), "1s") _                .put(FaultDetection.PING_RETRIES_SETTING.getKey(), "1") _                .put("cluster.join.timeout", "10s")  _                .put(DiscoverySettings.PUBLISH_TIMEOUT_SETTING.getKey(), "1s") _                .build()___        internalCluster().setBootstrapMasterNodeIndex(2)___        internalCluster().startMasterOnlyNodes(3, sharedSettings)___        String dataNode = internalCluster().startDataOnlyNode(sharedSettings)___        logger.info("--> wait for all nodes to join the cluster")__        ensureStableCluster(4)___        _        client().admin().indices().prepareCreate("myindex")_                .setSettings(Settings.builder().put("index.number_of_shards", 1).put("index.number_of_replicas", 0))_                .get()__        ensureGreen("myindex")___        final CyclicBarrier barrier = new CyclicBarrier(2)___        Thread indexingThread = new Thread(new Runnable() {_            @Override_            public void run() {_                try {_                    barrier.await()__                } catch (InterruptedException e) {_                    logger.warn("Barrier interrupted", e)__                    return__                } catch (BrokenBarrierException e) {_                    logger.warn("Broken barrier", e)__                    return__                }_                for (int i = 0_ i < 10_ i++) {_                    _                    IndexResponse response = client(dataNode).prepareIndex("myindex", "mytype").setSource("field_" + i, "val").get()__                    assertEquals(DocWriteResponse.Result.CREATED, response.getResult())__                }_            }_        })__        indexingThread.setName("indexingThread")__        indexingThread.start()___        barrier.await()___        _        String master = internalCluster().getMasterName()__        Set<String> otherNodes = new HashSet<>(Arrays.asList(internalCluster().getNodeNames()))__        otherNodes.remove(master)___        NetworkDisruption partition = new NetworkDisruption(_            new TwoPartitions(Collections.singleton(master), otherNodes),_            new NetworkDisconnect())__        internalCluster().setDisruptionScheme(partition)___        logger.info("--> disrupting network")__        partition.startDisrupting()___        logger.info("--> waiting for new master to be elected")__        ensureStableCluster(3, dataNode)___        partition.stopDisrupting()__        logger.info("--> waiting to heal")__        ensureStableCluster(4)___        indexingThread.join()___        ensureGreen("myindex")__        refresh()__        assertThat(client().prepareSearch("myindex").get().getHits().getTotalHits().value, equalTo(10L))__    };indexing,operations,which,entail,mapping,changes,require,a,blocking,request,to,the,master,node,to,update,the,mapping,if,the,master,node,is,being,disrupted,or,if,it,cannot,commit,cluster,state,changes,it,needs,to,retry,within,timeout,limits,this,retry,logic,is,implemented,in,transport,master,node,action,and,tested,by,the,following,master,failover,scenario;test,logging,debug,public,void,test,master,failover,during,indexing,with,mapping,changes,throws,throwable,logger,info,start,4,nodes,3,master,1,data,final,settings,shared,settings,settings,builder,put,fault,detection,get,key,1s,put,fault,detection,get,key,1,put,cluster,join,timeout,10s,put,discovery,settings,get,key,1s,build,internal,cluster,set,bootstrap,master,node,index,2,internal,cluster,start,master,only,nodes,3,shared,settings,string,data,node,internal,cluster,start,data,only,node,shared,settings,logger,info,wait,for,all,nodes,to,join,the,cluster,ensure,stable,cluster,4,client,admin,indices,prepare,create,myindex,set,settings,settings,builder,put,index,1,put,index,0,get,ensure,green,myindex,final,cyclic,barrier,barrier,new,cyclic,barrier,2,thread,indexing,thread,new,thread,new,runnable,override,public,void,run,try,barrier,await,catch,interrupted,exception,e,logger,warn,barrier,interrupted,e,return,catch,broken,barrier,exception,e,logger,warn,broken,barrier,e,return,for,int,i,0,i,10,i,index,response,response,client,data,node,prepare,index,myindex,mytype,set,source,i,val,get,assert,equals,doc,write,response,result,created,response,get,result,indexing,thread,set,name,indexing,thread,indexing,thread,start,barrier,await,string,master,internal,cluster,get,master,name,set,string,other,nodes,new,hash,set,arrays,as,list,internal,cluster,get,node,names,other,nodes,remove,master,network,disruption,partition,new,network,disruption,new,two,partitions,collections,singleton,master,other,nodes,new,network,disconnect,internal,cluster,set,disruption,scheme,partition,logger,info,disrupting,network,partition,start,disrupting,logger,info,waiting,for,new,master,to,be,elected,ensure,stable,cluster,3,data,node,partition,stop,disrupting,logger,info,waiting,to,heal,ensure,stable,cluster,4,indexing,thread,join,ensure,green,myindex,refresh,assert,that,client,prepare,search,myindex,get,get,hits,get,total,hits,value,equal,to,10l
IndexingMasterFailoverIT -> @TestLogging("_root:DEBUG")     public void testMasterFailoverDuringIndexingWithMappingChanges() throws Throwable;1549270328;Indexing operations which entail mapping changes require a blocking request to the master node to update the mapping._If the master node is being disrupted or if it cannot commit cluster state changes, it needs to retry within timeout limits._This retry logic is implemented in TransportMasterNodeAction and tested by the following master failover scenario.;@TestLogging("_root:DEBUG")_    public void testMasterFailoverDuringIndexingWithMappingChanges() throws Throwable {_        logger.info("--> start 4 nodes, 3 master, 1 data")___        final Settings sharedSettings = Settings.builder()_                .put("cluster.join.timeout", "10s")  _                .build()___        internalCluster().setBootstrapMasterNodeIndex(2)___        internalCluster().startMasterOnlyNodes(3, sharedSettings)___        String dataNode = internalCluster().startDataOnlyNode(sharedSettings)___        logger.info("--> wait for all nodes to join the cluster")__        ensureStableCluster(4)___        _        client().admin().indices().prepareCreate("myindex")_                .setSettings(Settings.builder().put("index.number_of_shards", 1).put("index.number_of_replicas", 0))_                .get()__        ensureGreen("myindex")___        final CyclicBarrier barrier = new CyclicBarrier(2)___        Thread indexingThread = new Thread(new Runnable() {_            @Override_            public void run() {_                try {_                    barrier.await()__                } catch (InterruptedException e) {_                    logger.warn("Barrier interrupted", e)__                    return__                } catch (BrokenBarrierException e) {_                    logger.warn("Broken barrier", e)__                    return__                }_                for (int i = 0_ i < 10_ i++) {_                    _                    IndexResponse response = client(dataNode).prepareIndex("myindex", "mytype").setSource("field_" + i, "val").get()__                    assertEquals(DocWriteResponse.Result.CREATED, response.getResult())__                }_            }_        })__        indexingThread.setName("indexingThread")__        indexingThread.start()___        barrier.await()___        _        String master = internalCluster().getMasterName()__        Set<String> otherNodes = new HashSet<>(Arrays.asList(internalCluster().getNodeNames()))__        otherNodes.remove(master)___        NetworkDisruption partition = new NetworkDisruption(_            new TwoPartitions(Collections.singleton(master), otherNodes),_            new NetworkDisconnect())__        internalCluster().setDisruptionScheme(partition)___        logger.info("--> disrupting network")__        partition.startDisrupting()___        logger.info("--> waiting for new master to be elected")__        ensureStableCluster(3, dataNode)___        partition.stopDisrupting()__        logger.info("--> waiting to heal")__        ensureStableCluster(4)___        indexingThread.join()___        ensureGreen("myindex")__        refresh()__        assertThat(client().prepareSearch("myindex").get().getHits().getTotalHits().value, equalTo(10L))__    };indexing,operations,which,entail,mapping,changes,require,a,blocking,request,to,the,master,node,to,update,the,mapping,if,the,master,node,is,being,disrupted,or,if,it,cannot,commit,cluster,state,changes,it,needs,to,retry,within,timeout,limits,this,retry,logic,is,implemented,in,transport,master,node,action,and,tested,by,the,following,master,failover,scenario;test,logging,debug,public,void,test,master,failover,during,indexing,with,mapping,changes,throws,throwable,logger,info,start,4,nodes,3,master,1,data,final,settings,shared,settings,settings,builder,put,cluster,join,timeout,10s,build,internal,cluster,set,bootstrap,master,node,index,2,internal,cluster,start,master,only,nodes,3,shared,settings,string,data,node,internal,cluster,start,data,only,node,shared,settings,logger,info,wait,for,all,nodes,to,join,the,cluster,ensure,stable,cluster,4,client,admin,indices,prepare,create,myindex,set,settings,settings,builder,put,index,1,put,index,0,get,ensure,green,myindex,final,cyclic,barrier,barrier,new,cyclic,barrier,2,thread,indexing,thread,new,thread,new,runnable,override,public,void,run,try,barrier,await,catch,interrupted,exception,e,logger,warn,barrier,interrupted,e,return,catch,broken,barrier,exception,e,logger,warn,broken,barrier,e,return,for,int,i,0,i,10,i,index,response,response,client,data,node,prepare,index,myindex,mytype,set,source,i,val,get,assert,equals,doc,write,response,result,created,response,get,result,indexing,thread,set,name,indexing,thread,indexing,thread,start,barrier,await,string,master,internal,cluster,get,master,name,set,string,other,nodes,new,hash,set,arrays,as,list,internal,cluster,get,node,names,other,nodes,remove,master,network,disruption,partition,new,network,disruption,new,two,partitions,collections,singleton,master,other,nodes,new,network,disconnect,internal,cluster,set,disruption,scheme,partition,logger,info,disrupting,network,partition,start,disrupting,logger,info,waiting,for,new,master,to,be,elected,ensure,stable,cluster,3,data,node,partition,stop,disrupting,logger,info,waiting,to,heal,ensure,stable,cluster,4,indexing,thread,join,ensure,green,myindex,refresh,assert,that,client,prepare,search,myindex,get,get,hits,get,total,hits,value,equal,to,10l
IndexingMasterFailoverIT -> @TestLogging("_root:DEBUG")     public void testMasterFailoverDuringIndexingWithMappingChanges() throws Throwable;1549388544;Indexing operations which entail mapping changes require a blocking request to the master node to update the mapping._If the master node is being disrupted or if it cannot commit cluster state changes, it needs to retry within timeout limits._This retry logic is implemented in TransportMasterNodeAction and tested by the following master failover scenario.;@TestLogging("_root:DEBUG")_    public void testMasterFailoverDuringIndexingWithMappingChanges() throws Throwable {_        logger.info("--> start 4 nodes, 3 master, 1 data")___        final Settings sharedSettings = Settings.builder()_                .put("cluster.join.timeout", "10s")  _                .build()___        internalCluster().setBootstrapMasterNodeIndex(2)___        internalCluster().startMasterOnlyNodes(3, sharedSettings)___        String dataNode = internalCluster().startDataOnlyNode(sharedSettings)___        logger.info("--> wait for all nodes to join the cluster")__        ensureStableCluster(4)___        _        client().admin().indices().prepareCreate("myindex")_                .setSettings(Settings.builder().put("index.number_of_shards", 1).put("index.number_of_replicas", 0))_                .get()__        ensureGreen("myindex")___        final CyclicBarrier barrier = new CyclicBarrier(2)___        Thread indexingThread = new Thread(new Runnable() {_            @Override_            public void run() {_                try {_                    barrier.await()__                } catch (InterruptedException e) {_                    logger.warn("Barrier interrupted", e)__                    return__                } catch (BrokenBarrierException e) {_                    logger.warn("Broken barrier", e)__                    return__                }_                for (int i = 0_ i < 10_ i++) {_                    _                    IndexResponse response = client(dataNode).prepareIndex("myindex", "mytype").setSource("field_" + i, "val").get()__                    assertEquals(DocWriteResponse.Result.CREATED, response.getResult())__                }_            }_        })__        indexingThread.setName("indexingThread")__        indexingThread.start()___        barrier.await()___        _        String master = internalCluster().getMasterName()__        Set<String> otherNodes = new HashSet<>(Arrays.asList(internalCluster().getNodeNames()))__        otherNodes.remove(master)___        NetworkDisruption partition = new NetworkDisruption(_            new TwoPartitions(Collections.singleton(master), otherNodes),_            new NetworkDisconnect())__        internalCluster().setDisruptionScheme(partition)___        logger.info("--> disrupting network")__        partition.startDisrupting()___        logger.info("--> waiting for new master to be elected")__        ensureStableCluster(3, dataNode)___        partition.stopDisrupting()__        logger.info("--> waiting to heal")__        ensureStableCluster(4)___        indexingThread.join()___        ensureGreen("myindex")__        refresh()__        assertThat(client().prepareSearch("myindex").get().getHits().getTotalHits().value, equalTo(10L))__    };indexing,operations,which,entail,mapping,changes,require,a,blocking,request,to,the,master,node,to,update,the,mapping,if,the,master,node,is,being,disrupted,or,if,it,cannot,commit,cluster,state,changes,it,needs,to,retry,within,timeout,limits,this,retry,logic,is,implemented,in,transport,master,node,action,and,tested,by,the,following,master,failover,scenario;test,logging,debug,public,void,test,master,failover,during,indexing,with,mapping,changes,throws,throwable,logger,info,start,4,nodes,3,master,1,data,final,settings,shared,settings,settings,builder,put,cluster,join,timeout,10s,build,internal,cluster,set,bootstrap,master,node,index,2,internal,cluster,start,master,only,nodes,3,shared,settings,string,data,node,internal,cluster,start,data,only,node,shared,settings,logger,info,wait,for,all,nodes,to,join,the,cluster,ensure,stable,cluster,4,client,admin,indices,prepare,create,myindex,set,settings,settings,builder,put,index,1,put,index,0,get,ensure,green,myindex,final,cyclic,barrier,barrier,new,cyclic,barrier,2,thread,indexing,thread,new,thread,new,runnable,override,public,void,run,try,barrier,await,catch,interrupted,exception,e,logger,warn,barrier,interrupted,e,return,catch,broken,barrier,exception,e,logger,warn,broken,barrier,e,return,for,int,i,0,i,10,i,index,response,response,client,data,node,prepare,index,myindex,mytype,set,source,i,val,get,assert,equals,doc,write,response,result,created,response,get,result,indexing,thread,set,name,indexing,thread,indexing,thread,start,barrier,await,string,master,internal,cluster,get,master,name,set,string,other,nodes,new,hash,set,arrays,as,list,internal,cluster,get,node,names,other,nodes,remove,master,network,disruption,partition,new,network,disruption,new,two,partitions,collections,singleton,master,other,nodes,new,network,disconnect,internal,cluster,set,disruption,scheme,partition,logger,info,disrupting,network,partition,start,disrupting,logger,info,waiting,for,new,master,to,be,elected,ensure,stable,cluster,3,data,node,partition,stop,disrupting,logger,info,waiting,to,heal,ensure,stable,cluster,4,indexing,thread,join,ensure,green,myindex,refresh,assert,that,client,prepare,search,myindex,get,get,hits,get,total,hits,value,equal,to,10l
IndexingMasterFailoverIT -> @TestLogging("_root:DEBUG")     @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/30844")     public void testMasterFailoverDuringIndexingWithMappingChanges() throws Throwable;1527207653;Indexing operations which entail mapping changes require a blocking request to the master node to update the mapping._If the master node is being disrupted or if it cannot commit cluster state changes, it needs to retry within timeout limits._This retry logic is implemented in TransportMasterNodeAction and tested by the following master failover scenario.;@TestLogging("_root:DEBUG")_    @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/30844")_    public void testMasterFailoverDuringIndexingWithMappingChanges() throws Throwable {_        logger.info("--> start 4 nodes, 3 master, 1 data")___        final Settings sharedSettings = Settings.builder()_                .put(FaultDetection.PING_TIMEOUT_SETTING.getKey(), "1s") _                .put(FaultDetection.PING_RETRIES_SETTING.getKey(), "1") _                .put("discovery.zen.join_timeout", "10s")  _                .put(DiscoverySettings.PUBLISH_TIMEOUT_SETTING.getKey(), "1s") _                .put(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), 2)_                .build()___        internalCluster().startMasterOnlyNodes(3, sharedSettings)___        String dataNode = internalCluster().startDataOnlyNode(sharedSettings)___        logger.info("--> wait for all nodes to join the cluster")__        ensureStableCluster(4)___        _        client().admin().indices().prepareCreate("myindex")_                .setSettings(Settings.builder().put("index.number_of_shards", 1).put("index.number_of_replicas", 0))_                .get()__        ensureGreen("myindex")___        final CyclicBarrier barrier = new CyclicBarrier(2)___        Thread indexingThread = new Thread(new Runnable() {_            @Override_            public void run() {_                try {_                    barrier.await()__                } catch (InterruptedException e) {_                    logger.warn("Barrier interrupted", e)__                    return__                } catch (BrokenBarrierException e) {_                    logger.warn("Broken barrier", e)__                    return__                }_                for (int i = 0_ i < 10_ i++) {_                    _                    IndexResponse response = client(dataNode).prepareIndex("myindex", "mytype").setSource("field_" + i, "val").get()__                    assertEquals(DocWriteResponse.Result.CREATED, response.getResult())__                }_            }_        })__        indexingThread.setName("indexingThread")__        indexingThread.start()___        barrier.await()___        _        String master = internalCluster().getMasterName()__        Set<String> otherNodes = new HashSet<>(Arrays.asList(internalCluster().getNodeNames()))__        otherNodes.remove(master)___        NetworkDisruption partition = new NetworkDisruption(_            new TwoPartitions(Collections.singleton(master), otherNodes),_            new NetworkDisconnect())__        internalCluster().setDisruptionScheme(partition)___        logger.info("--> disrupting network")__        partition.startDisrupting()___        logger.info("--> waiting for new master to be elected")__        ensureStableCluster(3, dataNode)___        partition.stopDisrupting()__        logger.info("--> waiting to heal")__        ensureStableCluster(4)___        indexingThread.join()___        ensureGreen("myindex")__        refresh()__        assertThat(client().prepareSearch("myindex").get().getHits().getTotalHits(), equalTo(10L))__    };indexing,operations,which,entail,mapping,changes,require,a,blocking,request,to,the,master,node,to,update,the,mapping,if,the,master,node,is,being,disrupted,or,if,it,cannot,commit,cluster,state,changes,it,needs,to,retry,within,timeout,limits,this,retry,logic,is,implemented,in,transport,master,node,action,and,tested,by,the,following,master,failover,scenario;test,logging,debug,awaits,fix,bug,url,https,github,com,elastic,elasticsearch,issues,30844,public,void,test,master,failover,during,indexing,with,mapping,changes,throws,throwable,logger,info,start,4,nodes,3,master,1,data,final,settings,shared,settings,settings,builder,put,fault,detection,get,key,1s,put,fault,detection,get,key,1,put,discovery,zen,10s,put,discovery,settings,get,key,1s,put,elect,master,service,get,key,2,build,internal,cluster,start,master,only,nodes,3,shared,settings,string,data,node,internal,cluster,start,data,only,node,shared,settings,logger,info,wait,for,all,nodes,to,join,the,cluster,ensure,stable,cluster,4,client,admin,indices,prepare,create,myindex,set,settings,settings,builder,put,index,1,put,index,0,get,ensure,green,myindex,final,cyclic,barrier,barrier,new,cyclic,barrier,2,thread,indexing,thread,new,thread,new,runnable,override,public,void,run,try,barrier,await,catch,interrupted,exception,e,logger,warn,barrier,interrupted,e,return,catch,broken,barrier,exception,e,logger,warn,broken,barrier,e,return,for,int,i,0,i,10,i,index,response,response,client,data,node,prepare,index,myindex,mytype,set,source,i,val,get,assert,equals,doc,write,response,result,created,response,get,result,indexing,thread,set,name,indexing,thread,indexing,thread,start,barrier,await,string,master,internal,cluster,get,master,name,set,string,other,nodes,new,hash,set,arrays,as,list,internal,cluster,get,node,names,other,nodes,remove,master,network,disruption,partition,new,network,disruption,new,two,partitions,collections,singleton,master,other,nodes,new,network,disconnect,internal,cluster,set,disruption,scheme,partition,logger,info,disrupting,network,partition,start,disrupting,logger,info,waiting,for,new,master,to,be,elected,ensure,stable,cluster,3,data,node,partition,stop,disrupting,logger,info,waiting,to,heal,ensure,stable,cluster,4,indexing,thread,join,ensure,green,myindex,refresh,assert,that,client,prepare,search,myindex,get,get,hits,get,total,hits,equal,to,10l
IndexingMasterFailoverIT -> @TestLogging("_root:DEBUG")     @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/30844")     public void testMasterFailoverDuringIndexingWithMappingChanges() throws Throwable;1544035746;Indexing operations which entail mapping changes require a blocking request to the master node to update the mapping._If the master node is being disrupted or if it cannot commit cluster state changes, it needs to retry within timeout limits._This retry logic is implemented in TransportMasterNodeAction and tested by the following master failover scenario.;@TestLogging("_root:DEBUG")_    @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/30844")_    public void testMasterFailoverDuringIndexingWithMappingChanges() throws Throwable {_        logger.info("--> start 4 nodes, 3 master, 1 data")___        final Settings sharedSettings = Settings.builder()_                .put(FaultDetection.PING_TIMEOUT_SETTING.getKey(), "1s") _                .put(FaultDetection.PING_RETRIES_SETTING.getKey(), "1") _                .put("discovery.zen.join_timeout", "10s")  _                .put(DiscoverySettings.PUBLISH_TIMEOUT_SETTING.getKey(), "1s") _                .put(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), 2)_                .build()___        internalCluster().startMasterOnlyNodes(3, sharedSettings)___        String dataNode = internalCluster().startDataOnlyNode(sharedSettings)___        logger.info("--> wait for all nodes to join the cluster")__        ensureStableCluster(4)___        _        client().admin().indices().prepareCreate("myindex")_                .setSettings(Settings.builder().put("index.number_of_shards", 1).put("index.number_of_replicas", 0))_                .get()__        ensureGreen("myindex")___        final CyclicBarrier barrier = new CyclicBarrier(2)___        Thread indexingThread = new Thread(new Runnable() {_            @Override_            public void run() {_                try {_                    barrier.await()__                } catch (InterruptedException e) {_                    logger.warn("Barrier interrupted", e)__                    return__                } catch (BrokenBarrierException e) {_                    logger.warn("Broken barrier", e)__                    return__                }_                for (int i = 0_ i < 10_ i++) {_                    _                    IndexResponse response = client(dataNode).prepareIndex("myindex", "mytype").setSource("field_" + i, "val").get()__                    assertEquals(DocWriteResponse.Result.CREATED, response.getResult())__                }_            }_        })__        indexingThread.setName("indexingThread")__        indexingThread.start()___        barrier.await()___        _        String master = internalCluster().getMasterName()__        Set<String> otherNodes = new HashSet<>(Arrays.asList(internalCluster().getNodeNames()))__        otherNodes.remove(master)___        NetworkDisruption partition = new NetworkDisruption(_            new TwoPartitions(Collections.singleton(master), otherNodes),_            new NetworkDisconnect())__        internalCluster().setDisruptionScheme(partition)___        logger.info("--> disrupting network")__        partition.startDisrupting()___        logger.info("--> waiting for new master to be elected")__        ensureStableCluster(3, dataNode)___        partition.stopDisrupting()__        logger.info("--> waiting to heal")__        ensureStableCluster(4)___        indexingThread.join()___        ensureGreen("myindex")__        refresh()__        assertThat(client().prepareSearch("myindex").get().getHits().getTotalHits().value, equalTo(10L))__    };indexing,operations,which,entail,mapping,changes,require,a,blocking,request,to,the,master,node,to,update,the,mapping,if,the,master,node,is,being,disrupted,or,if,it,cannot,commit,cluster,state,changes,it,needs,to,retry,within,timeout,limits,this,retry,logic,is,implemented,in,transport,master,node,action,and,tested,by,the,following,master,failover,scenario;test,logging,debug,awaits,fix,bug,url,https,github,com,elastic,elasticsearch,issues,30844,public,void,test,master,failover,during,indexing,with,mapping,changes,throws,throwable,logger,info,start,4,nodes,3,master,1,data,final,settings,shared,settings,settings,builder,put,fault,detection,get,key,1s,put,fault,detection,get,key,1,put,discovery,zen,10s,put,discovery,settings,get,key,1s,put,elect,master,service,get,key,2,build,internal,cluster,start,master,only,nodes,3,shared,settings,string,data,node,internal,cluster,start,data,only,node,shared,settings,logger,info,wait,for,all,nodes,to,join,the,cluster,ensure,stable,cluster,4,client,admin,indices,prepare,create,myindex,set,settings,settings,builder,put,index,1,put,index,0,get,ensure,green,myindex,final,cyclic,barrier,barrier,new,cyclic,barrier,2,thread,indexing,thread,new,thread,new,runnable,override,public,void,run,try,barrier,await,catch,interrupted,exception,e,logger,warn,barrier,interrupted,e,return,catch,broken,barrier,exception,e,logger,warn,broken,barrier,e,return,for,int,i,0,i,10,i,index,response,response,client,data,node,prepare,index,myindex,mytype,set,source,i,val,get,assert,equals,doc,write,response,result,created,response,get,result,indexing,thread,set,name,indexing,thread,indexing,thread,start,barrier,await,string,master,internal,cluster,get,master,name,set,string,other,nodes,new,hash,set,arrays,as,list,internal,cluster,get,node,names,other,nodes,remove,master,network,disruption,partition,new,network,disruption,new,two,partitions,collections,singleton,master,other,nodes,new,network,disconnect,internal,cluster,set,disruption,scheme,partition,logger,info,disrupting,network,partition,start,disrupting,logger,info,waiting,for,new,master,to,be,elected,ensure,stable,cluster,3,data,node,partition,stop,disrupting,logger,info,waiting,to,heal,ensure,stable,cluster,4,indexing,thread,join,ensure,green,myindex,refresh,assert,that,client,prepare,search,myindex,get,get,hits,get,total,hits,value,equal,to,10l
