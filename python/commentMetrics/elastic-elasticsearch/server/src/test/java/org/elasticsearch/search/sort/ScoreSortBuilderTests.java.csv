commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected ScoreSortBuilder createTestItem() {     return randomScoreSortBuilder(). }
false;public,static;0;3;;public static ScoreSortBuilder randomScoreSortBuilder() {     return new ScoreSortBuilder().order(randomBoolean() ? SortOrder.ASC : SortOrder.DESC). }
false;protected;1;6;;@Override protected ScoreSortBuilder mutate(ScoreSortBuilder original) throws IOException {     ScoreSortBuilder result = new ScoreSortBuilder().     result.order(randomValueOtherThan(original.order(), () -> randomFrom(SortOrder.values()))).     return result. }
true;public;0;4;/**  * test passing null to {@link ScoreSortBuilder#order(SortOrder)} is illegal  */ ;/**  * test passing null to {@link ScoreSortBuilder#order(SortOrder)} is illegal  */ public void testIllegalOrder() {     Exception e = expectThrows(NullPointerException.class, () -> new ScoreSortBuilder().order(null)).     assertEquals("sort order cannot be null.", e.getMessage()). }
true;public;0;12;/**  * test parsing order parameter if specified as `order` field in the json  * instead of the `reverse` field that we render in toXContent  */ ;/**  * test parsing order parameter if specified as `order` field in the json  * instead of the `reverse` field that we render in toXContent  */ public void testParseOrder() throws IOException {     SortOrder order = randomBoolean() ? SortOrder.ASC : SortOrder.DESC.     String scoreSortString = "{ \"_score\": { \"order\": \"" + order.toString() + "\" }}".     XContentParser parser = createParser(JsonXContent.jsonXContent, scoreSortString).     // need to skip until parser is located on second START_OBJECT     parser.nextToken().     parser.nextToken().     parser.nextToken().     ScoreSortBuilder scoreSort = ScoreSortBuilder.fromXContent(parser, "_score").     assertEquals(order, scoreSort.order()). }
false;public;0;15;;public void testReverseOptionFails() throws IOException {     String json = "{ \"_score\": { \"reverse\": true }}".     XContentParser parser = createParser(JsonXContent.jsonXContent, json).     // need to skip until parser is located on second START_OBJECT     parser.nextToken().     parser.nextToken().     parser.nextToken().     try {         ScoreSortBuilder.fromXContent(parser, "_score").         fail("adding reverse sorting option should fail with an exception").     } catch (IllegalArgumentException e) {     // all good     } }
false;protected;3;5;;@Override protected void sortFieldAssertions(ScoreSortBuilder builder, SortField sortField, DocValueFormat format) {     assertEquals(SortField.Type.SCORE, sortField.getType()).     assertEquals(builder.order() == SortOrder.DESC ? false : true, sortField.getReverse()). }
false;protected;2;4;;@Override protected ScoreSortBuilder fromXContent(XContentParser parser, String fieldName) throws IOException {     return ScoreSortBuilder.fromXContent(parser, fieldName). }
