commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     return Arrays.asList(MockTransportService.TestPlugin.class). }
true;public;0;26;/**  * This test creates a scenario where a primary shard (0 replicas) relocates and is in POST_RECOVERY on the target  * node but already deleted on the source node. Search request should still work.  */ ;/**  * This test creates a scenario where a primary shard (0 replicas) relocates and is in POST_RECOVERY on the target  * node but already deleted on the source node. Search request should still work.  */ public void testSearchWithRelocationAndSlowClusterStateProcessing() throws Exception {     // Don't use AbstractDisruptionTestCase.DEFAULT_SETTINGS as settings     // (which can cause node disconnects on a slow CI machine)     internalCluster().startMasterOnlyNode().     final String node_1 = internalCluster().startDataOnlyNode().     logger.info("--> creating index [test] with one shard and on replica").     assertAcked(prepareCreate("test").setSettings(Settings.builder().put(indexSettings()).put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0))).     ensureGreen("test").     final String node_2 = internalCluster().startDataOnlyNode().     List<IndexRequestBuilder> indexRequestBuilderList = new ArrayList<>().     for (int i = 0. i < 100. i++) {         indexRequestBuilderList.add(client().prepareIndex().setIndex("test").setType("_doc").setSource("{\"int_field\":1}", XContentType.JSON)).     }     indexRandom(true, indexRequestBuilderList).     IndicesStoreIntegrationIT.relocateAndBlockCompletion(logger, "test", 0, node_1, node_2).     // now search for the documents and see if we get a reply     assertThat(client().prepareSearch().setSize(0).get().getHits().getTotalHits().value, equalTo(100L)). }
