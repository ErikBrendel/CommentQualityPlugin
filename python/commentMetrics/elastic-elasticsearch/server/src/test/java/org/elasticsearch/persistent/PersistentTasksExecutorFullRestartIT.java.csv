commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     return Collections.singletonList(TestPersistentTasksPlugin.class). }
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> transportClientPlugins() {     return nodePlugins(). }
false;protected;0;3;;protected boolean ignoreExternalCluster() {     return true. }
false;public;0;60;;@TestLogging("org.elasticsearch.persistent:TRACE,org.elasticsearch.cluster.service:DEBUG") public void testFullClusterRestart() throws Exception {     PersistentTasksService service = internalCluster().getInstance(PersistentTasksService.class).     int numberOfTasks = randomIntBetween(1, 10).     String[] taskIds = new String[numberOfTasks].     List<PlainActionFuture<PersistentTask<TestParams>>> futures = new ArrayList<>(numberOfTasks).     for (int i = 0. i < numberOfTasks. i++) {         PlainActionFuture<PersistentTask<TestParams>> future = new PlainActionFuture<>().         futures.add(future).         taskIds[i] = UUIDs.base64UUID().         service.sendStartRequest(taskIds[i], TestPersistentTasksExecutor.NAME, new TestParams("Blah"), future).     }     for (int i = 0. i < numberOfTasks. i++) {         assertThat(futures.get(i).get().getId(), equalTo(taskIds[i])).     }     PersistentTasksCustomMetaData tasksInProgress = internalCluster().clusterService().state().getMetaData().custom(PersistentTasksCustomMetaData.TYPE).     assertThat(tasksInProgress.tasks().size(), equalTo(numberOfTasks)).     // Make sure that at least one of the tasks is running     assertBusy(() -> {         // Wait for the task to start         assertThat(client().admin().cluster().prepareListTasks().setActions(TestPersistentTasksExecutor.NAME + "[c]").get().getTasks().size(), greaterThan(0)).     }).     // Restart cluster     internalCluster().fullRestart().     ensureYellow().     tasksInProgress = internalCluster().clusterService().state().getMetaData().custom(PersistentTasksCustomMetaData.TYPE).     assertThat(tasksInProgress.tasks().size(), equalTo(numberOfTasks)).     // Check that cluster state is correct     for (int i = 0. i < numberOfTasks. i++) {         PersistentTask<?> task = tasksInProgress.getTask(taskIds[i]).         assertNotNull(task).     }     logger.info("Waiting for {} tasks to start", numberOfTasks).     assertBusy(() -> {         // Wait for all tasks to start         assertThat(client().admin().cluster().prepareListTasks().setActions(TestPersistentTasksExecutor.NAME + "[c]").get().getTasks().size(), equalTo(numberOfTasks)).     }).     logger.info("Complete all tasks").     // Complete the running task and make sure it finishes properly     assertThat(new TestPersistentTasksPlugin.TestTasksRequestBuilder(client()).setOperation("finish").get().getTasks().size(), equalTo(numberOfTasks)).     assertBusy(() -> {         // Make sure the task is removed from the cluster state         assertThat(((PersistentTasksCustomMetaData) internalCluster().clusterService().state().getMetaData().custom(PersistentTasksCustomMetaData.TYPE)).tasks(), empty()).     }). }
