commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;public void testMinScoreAllIncluded() throws Exception {     Term term = randomTerm().     Query query = new TermQuery(term).     FunctionScoreQuery fsq = new FunctionScoreQuery(query, null, Float.POSITIVE_INFINITY).     assertSameScores(query, fsq).     FunctionScoreQuery ffsq = new FunctionScoreQuery(query, 0f, Float.POSITIVE_INFINITY).     assertSameScores(query, ffsq). }
false;public;0;7;;public void testMinScoreAllExcluded() throws Exception {     Term term = randomTerm().     Query query = new TermQuery(term).     FunctionScoreQuery fsq = new FunctionScoreQuery(query, Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY).     assertSameScores(new MatchNoDocsQuery(), fsq). }
false;public;0;13;;public void testTwoPhaseMinScore() throws Exception {     Term term = randomTerm().     Query query = new TermQuery(term).     Float minScore = random().nextFloat().     FunctionScoreQuery fsq1 = new FunctionScoreQuery(query, minScore, Float.POSITIVE_INFINITY).     FunctionScoreQuery fsq2 = new FunctionScoreQuery(new RandomApproximationQuery(query, random()), minScore, Float.POSITIVE_INFINITY).     assertSameScores(fsq1, fsq2).     FunctionScoreQuery ffsq1 = new FunctionScoreQuery(query, minScore, Float.POSITIVE_INFINITY).     FunctionScoreQuery ffsq2 = new FunctionScoreQuery(query, minScore, Float.POSITIVE_INFINITY).     assertSameScores(ffsq1, ffsq2). }
