commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected String fieldName() {     return "double_range_dv_field". }
false;protected;0;4;;@Override protected RangeFieldMapper.RangeType rangeType() {     return RangeFieldMapper.RangeType.DOUBLE. }
false;protected;1;8;;@Override protected Range nextRange(int dimensions) throws Exception {     double value1 = nextDoubleInternal().     double value2 = nextDoubleInternal().     double min = Math.min(value1, value2).     double max = Math.max(value1, value2).     return new DoubleTestRange(min, max). }
false;private;0;14;;private double nextDoubleInternal() {     switch(random().nextInt(5)) {         case 0:             return Double.NEGATIVE_INFINITY.         case 1:             return Double.POSITIVE_INFINITY.         default:             if (random().nextBoolean()) {                 return random().nextDouble().             } else {                 return (random().nextInt(15) - 7) / 3d.             }     } }
false;public;0;4;;@Override public Double getMin() {     return min. }
false;protected;2;10;;@Override protected void setMin(int dim, Object val) {     assert dim == 0.     double v = (Double) val.     if (min < v) {         max = v.     } else {         min = v.     } }
false;public;0;4;;@Override public Double getMax() {     return max. }
false;protected;2;10;;@Override protected void setMax(int dim, Object val) {     assert dim == 0.     double v = (Double) val.     if (max > v) {         min = v.     } else {         max = v.     } }
false;protected;1;5;;@Override protected boolean isDisjoint(Range o) {     DoubleTestRange other = (DoubleTestRange) o.     return this.min > other.max || this.max < other.min. }
false;protected;1;9;;@Override protected boolean isWithin(Range o) {     DoubleTestRange other = (DoubleTestRange) o.     if ((this.min >= other.min && this.max <= other.max) == false) {         // not within:         return false.     }     return true. }
false;protected;1;9;;@Override protected boolean contains(Range o) {     DoubleTestRange other = (DoubleTestRange) o.     if ((this.min <= other.min && this.max >= other.max) == false) {         // not contains:         return false.     }     return true. }
