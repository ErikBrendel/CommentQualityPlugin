# id;timestamp;commentText;codeText;commentWords;codeWords
DateHistogramOffsetIT -> private static void checkBucketFor(Histogram.Bucket bucket, DateTime key, long expectedSize);1524684173;@param bucket the bucket to check assertions for_@param key the expected key_@param expectedSize the expected size of the bucket;private static void checkBucketFor(Histogram.Bucket bucket, DateTime key, long expectedSize) {_        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(key.toString(DATE_FORMAT)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(expectedSize))__    };param,bucket,the,bucket,to,check,assertions,for,param,key,the,expected,key,param,expected,size,the,expected,size,of,the,bucket;private,static,void,check,bucket,for,histogram,bucket,bucket,date,time,key,long,expected,size,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,key,to,string,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,expected,size
DateHistogramOffsetIT -> private static void checkBucketFor(Histogram.Bucket bucket, DateTime key, long expectedSize);1544035746;@param bucket the bucket to check assertions for_@param key the expected key_@param expectedSize the expected size of the bucket;private static void checkBucketFor(Histogram.Bucket bucket, DateTime key, long expectedSize) {_        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(key.toString(DATE_FORMAT)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(expectedSize))__    };param,bucket,the,bucket,to,check,assertions,for,param,key,the,expected,key,param,expected,size,the,expected,size,of,the,bucket;private,static,void,check,bucket,for,histogram,bucket,bucket,date,time,key,long,expected,size,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,key,to,string,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,expected,size
DateHistogramOffsetIT -> private static void checkBucketFor(Histogram.Bucket bucket, DateTime key, long expectedSize);1544110272;@param bucket the bucket to check assertions for_@param key the expected key_@param expectedSize the expected size of the bucket;private static void checkBucketFor(Histogram.Bucket bucket, DateTime key, long expectedSize) {_        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(key.toString(DATE_FORMAT)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(expectedSize))__    };param,bucket,the,bucket,to,check,assertions,for,param,key,the,expected,key,param,expected,size,the,expected,size,of,the,bucket;private,static,void,check,bucket,for,histogram,bucket,bucket,date,time,key,long,expected,size,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,key,to,string,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,expected,size
DateHistogramOffsetIT -> private static void checkBucketFor(Histogram.Bucket bucket, DateTime key, long expectedSize);1544232221;@param bucket the bucket to check assertions for_@param key the expected key_@param expectedSize the expected size of the bucket;private static void checkBucketFor(Histogram.Bucket bucket, DateTime key, long expectedSize) {_        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(key.toString(DATE_FORMAT)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(expectedSize))__    };param,bucket,the,bucket,to,check,assertions,for,param,key,the,expected,key,param,expected,size,the,expected,size,of,the,bucket;private,static,void,check,bucket,for,histogram,bucket,bucket,date,time,key,long,expected,size,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,key,to,string,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,expected,size
DateHistogramOffsetIT -> private static void checkBucketFor(Histogram.Bucket bucket, ZonedDateTime key, long expectedSize);1548236405;@param bucket the bucket to check assertions for_@param key the expected key_@param expectedSize the expected size of the bucket;private static void checkBucketFor(Histogram.Bucket bucket, ZonedDateTime key, long expectedSize) {_        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(FORMATTER.format(key)))__        assertThat(((ZonedDateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(expectedSize))__    };param,bucket,the,bucket,to,check,assertions,for,param,key,the,expected,key,param,expected,size,the,expected,size,of,the,bucket;private,static,void,check,bucket,for,histogram,bucket,bucket,zoned,date,time,key,long,expected,size,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,formatter,format,key,assert,that,zoned,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,expected,size
DateHistogramOffsetIT -> private static void checkBucketFor(Histogram.Bucket bucket, ZonedDateTime key, long expectedSize);1548921340;@param bucket the bucket to check assertions for_@param key the expected key_@param expectedSize the expected size of the bucket;private static void checkBucketFor(Histogram.Bucket bucket, ZonedDateTime key, long expectedSize) {_        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(FORMATTER.format(key)))__        assertThat(((ZonedDateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(expectedSize))__    };param,bucket,the,bucket,to,check,assertions,for,param,key,the,expected,key,param,expected,size,the,expected,size,of,the,bucket;private,static,void,check,bucket,for,histogram,bucket,bucket,zoned,date,time,key,long,expected,size,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,formatter,format,key,assert,that,zoned,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,expected,size
DateHistogramOffsetIT -> public void testSingleValueWithOffsetMinDocCount() throws Exception;1524684173;Set offset so day buckets start at 6am. Index first 12 hours for two days, with one day gap.;public void testSingleValueWithOffsetMinDocCount() throws Exception {_        prepareIndex(date("2014-03-11T00:00:00+00:00"), 12, 1, 0)__        prepareIndex(date("2014-03-14T00:00:00+00:00"), 12, 1, 13)___        SearchResponse response = client().prepareSearch("idx2")_                .setQuery(matchAllQuery())_                .addAggregation(dateHistogram("date_histo")_                        .field("date")_                        .offset("6h")_                        .minDocCount(0)_                        .format(DATE_FORMAT)_                        .dateHistogramInterval(DateHistogramInterval.DAY))_                .execute().actionGet()___        assertThat(response.getHits().getTotalHits(), equalTo(24L))___        Histogram histo = response.getAggregations().get("date_histo")__        List<? extends Histogram.Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(5))___        checkBucketFor(buckets.get(0), new DateTime(2014, 3, 10, 6, 0, DateTimeZone.UTC), 6L)__        checkBucketFor(buckets.get(1), new DateTime(2014, 3, 11, 6, 0, DateTimeZone.UTC), 6L)__        checkBucketFor(buckets.get(2), new DateTime(2014, 3, 12, 6, 0, DateTimeZone.UTC), 0L)__        checkBucketFor(buckets.get(3), new DateTime(2014, 3, 13, 6, 0, DateTimeZone.UTC), 6L)__        checkBucketFor(buckets.get(4), new DateTime(2014, 3, 14, 6, 0, DateTimeZone.UTC), 6L)__    };set,offset,so,day,buckets,start,at,6am,index,first,12,hours,for,two,days,with,one,day,gap;public,void,test,single,value,with,offset,min,doc,count,throws,exception,prepare,index,date,2014,03,11t00,00,00,00,00,12,1,0,prepare,index,date,2014,03,14t00,00,00,00,00,12,1,13,search,response,response,client,prepare,search,idx2,set,query,match,all,query,add,aggregation,date,histogram,field,date,offset,6h,min,doc,count,0,format,date,histogram,interval,date,histogram,interval,day,execute,action,get,assert,that,response,get,hits,get,total,hits,equal,to,24l,histogram,histo,response,get,aggregations,get,list,extends,histogram,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,5,check,bucket,for,buckets,get,0,new,date,time,2014,3,10,6,0,date,time,zone,utc,6l,check,bucket,for,buckets,get,1,new,date,time,2014,3,11,6,0,date,time,zone,utc,6l,check,bucket,for,buckets,get,2,new,date,time,2014,3,12,6,0,date,time,zone,utc,0l,check,bucket,for,buckets,get,3,new,date,time,2014,3,13,6,0,date,time,zone,utc,6l,check,bucket,for,buckets,get,4,new,date,time,2014,3,14,6,0,date,time,zone,utc,6l
DateHistogramOffsetIT -> public void testSingleValueWithOffsetMinDocCount() throws Exception;1544035746;Set offset so day buckets start at 6am. Index first 12 hours for two days, with one day gap.;public void testSingleValueWithOffsetMinDocCount() throws Exception {_        prepareIndex(date("2014-03-11T00:00:00+00:00"), 12, 1, 0)__        prepareIndex(date("2014-03-14T00:00:00+00:00"), 12, 1, 13)___        SearchResponse response = client().prepareSearch("idx2")_                .setQuery(matchAllQuery())_                .addAggregation(dateHistogram("date_histo")_                        .field("date")_                        .offset("6h")_                        .minDocCount(0)_                        .format(DATE_FORMAT)_                        .dateHistogramInterval(DateHistogramInterval.DAY))_                .execute().actionGet()___        assertThat(response.getHits().getTotalHits().value, equalTo(24L))___        Histogram histo = response.getAggregations().get("date_histo")__        List<? extends Histogram.Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(5))___        checkBucketFor(buckets.get(0), new DateTime(2014, 3, 10, 6, 0, DateTimeZone.UTC), 6L)__        checkBucketFor(buckets.get(1), new DateTime(2014, 3, 11, 6, 0, DateTimeZone.UTC), 6L)__        checkBucketFor(buckets.get(2), new DateTime(2014, 3, 12, 6, 0, DateTimeZone.UTC), 0L)__        checkBucketFor(buckets.get(3), new DateTime(2014, 3, 13, 6, 0, DateTimeZone.UTC), 6L)__        checkBucketFor(buckets.get(4), new DateTime(2014, 3, 14, 6, 0, DateTimeZone.UTC), 6L)__    };set,offset,so,day,buckets,start,at,6am,index,first,12,hours,for,two,days,with,one,day,gap;public,void,test,single,value,with,offset,min,doc,count,throws,exception,prepare,index,date,2014,03,11t00,00,00,00,00,12,1,0,prepare,index,date,2014,03,14t00,00,00,00,00,12,1,13,search,response,response,client,prepare,search,idx2,set,query,match,all,query,add,aggregation,date,histogram,field,date,offset,6h,min,doc,count,0,format,date,histogram,interval,date,histogram,interval,day,execute,action,get,assert,that,response,get,hits,get,total,hits,value,equal,to,24l,histogram,histo,response,get,aggregations,get,list,extends,histogram,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,5,check,bucket,for,buckets,get,0,new,date,time,2014,3,10,6,0,date,time,zone,utc,6l,check,bucket,for,buckets,get,1,new,date,time,2014,3,11,6,0,date,time,zone,utc,6l,check,bucket,for,buckets,get,2,new,date,time,2014,3,12,6,0,date,time,zone,utc,0l,check,bucket,for,buckets,get,3,new,date,time,2014,3,13,6,0,date,time,zone,utc,6l,check,bucket,for,buckets,get,4,new,date,time,2014,3,14,6,0,date,time,zone,utc,6l
DateHistogramOffsetIT -> public void testSingleValueWithOffsetMinDocCount() throws Exception;1544110272;Set offset so day buckets start at 6am. Index first 12 hours for two days, with one day gap.;public void testSingleValueWithOffsetMinDocCount() throws Exception {_        prepareIndex(date("2014-03-11T00:00:00+00:00"), 12, 1, 0)__        prepareIndex(date("2014-03-14T00:00:00+00:00"), 12, 1, 13)___        SearchResponse response = client().prepareSearch("idx2")_                .setQuery(matchAllQuery())_                .addAggregation(dateHistogram("date_histo")_                        .field("date")_                        .offset("6h")_                        .minDocCount(0)_                        .format(DATE_FORMAT)_                        .dateHistogramInterval(DateHistogramInterval.DAY))_                .get()___        assertThat(response.getHits().getTotalHits().value, equalTo(24L))___        Histogram histo = response.getAggregations().get("date_histo")__        List<? extends Histogram.Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(5))___        checkBucketFor(buckets.get(0), new DateTime(2014, 3, 10, 6, 0, DateTimeZone.UTC), 6L)__        checkBucketFor(buckets.get(1), new DateTime(2014, 3, 11, 6, 0, DateTimeZone.UTC), 6L)__        checkBucketFor(buckets.get(2), new DateTime(2014, 3, 12, 6, 0, DateTimeZone.UTC), 0L)__        checkBucketFor(buckets.get(3), new DateTime(2014, 3, 13, 6, 0, DateTimeZone.UTC), 6L)__        checkBucketFor(buckets.get(4), new DateTime(2014, 3, 14, 6, 0, DateTimeZone.UTC), 6L)__    };set,offset,so,day,buckets,start,at,6am,index,first,12,hours,for,two,days,with,one,day,gap;public,void,test,single,value,with,offset,min,doc,count,throws,exception,prepare,index,date,2014,03,11t00,00,00,00,00,12,1,0,prepare,index,date,2014,03,14t00,00,00,00,00,12,1,13,search,response,response,client,prepare,search,idx2,set,query,match,all,query,add,aggregation,date,histogram,field,date,offset,6h,min,doc,count,0,format,date,histogram,interval,date,histogram,interval,day,get,assert,that,response,get,hits,get,total,hits,value,equal,to,24l,histogram,histo,response,get,aggregations,get,list,extends,histogram,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,5,check,bucket,for,buckets,get,0,new,date,time,2014,3,10,6,0,date,time,zone,utc,6l,check,bucket,for,buckets,get,1,new,date,time,2014,3,11,6,0,date,time,zone,utc,6l,check,bucket,for,buckets,get,2,new,date,time,2014,3,12,6,0,date,time,zone,utc,0l,check,bucket,for,buckets,get,3,new,date,time,2014,3,13,6,0,date,time,zone,utc,6l,check,bucket,for,buckets,get,4,new,date,time,2014,3,14,6,0,date,time,zone,utc,6l
DateHistogramOffsetIT -> public void testSingleValueWithOffsetMinDocCount() throws Exception;1544232221;Set offset so day buckets start at 6am. Index first 12 hours for two days, with one day gap.;public void testSingleValueWithOffsetMinDocCount() throws Exception {_        prepareIndex(date("2014-03-11T00:00:00+00:00"), 12, 1, 0)__        prepareIndex(date("2014-03-14T00:00:00+00:00"), 12, 1, 13)___        SearchResponse response = client().prepareSearch("idx2")_                .setQuery(matchAllQuery())_                .addAggregation(dateHistogram("date_histo")_                        .field("date")_                        .offset("6h")_                        .minDocCount(0)_                        .format(DATE_FORMAT)_                        .dateHistogramInterval(DateHistogramInterval.DAY))_                .get()___        assertThat(response.getHits().getTotalHits().value, equalTo(24L))___        Histogram histo = response.getAggregations().get("date_histo")__        List<? extends Histogram.Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(5))___        checkBucketFor(buckets.get(0), new DateTime(2014, 3, 10, 6, 0, DateTimeZone.UTC), 6L)__        checkBucketFor(buckets.get(1), new DateTime(2014, 3, 11, 6, 0, DateTimeZone.UTC), 6L)__        checkBucketFor(buckets.get(2), new DateTime(2014, 3, 12, 6, 0, DateTimeZone.UTC), 0L)__        checkBucketFor(buckets.get(3), new DateTime(2014, 3, 13, 6, 0, DateTimeZone.UTC), 6L)__        checkBucketFor(buckets.get(4), new DateTime(2014, 3, 14, 6, 0, DateTimeZone.UTC), 6L)__    };set,offset,so,day,buckets,start,at,6am,index,first,12,hours,for,two,days,with,one,day,gap;public,void,test,single,value,with,offset,min,doc,count,throws,exception,prepare,index,date,2014,03,11t00,00,00,00,00,12,1,0,prepare,index,date,2014,03,14t00,00,00,00,00,12,1,13,search,response,response,client,prepare,search,idx2,set,query,match,all,query,add,aggregation,date,histogram,field,date,offset,6h,min,doc,count,0,format,date,histogram,interval,date,histogram,interval,day,get,assert,that,response,get,hits,get,total,hits,value,equal,to,24l,histogram,histo,response,get,aggregations,get,list,extends,histogram,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,5,check,bucket,for,buckets,get,0,new,date,time,2014,3,10,6,0,date,time,zone,utc,6l,check,bucket,for,buckets,get,1,new,date,time,2014,3,11,6,0,date,time,zone,utc,6l,check,bucket,for,buckets,get,2,new,date,time,2014,3,12,6,0,date,time,zone,utc,0l,check,bucket,for,buckets,get,3,new,date,time,2014,3,13,6,0,date,time,zone,utc,6l,check,bucket,for,buckets,get,4,new,date,time,2014,3,14,6,0,date,time,zone,utc,6l
DateHistogramOffsetIT -> public void testSingleValueWithOffsetMinDocCount() throws Exception;1548236405;Set offset so day buckets start at 6am. Index first 12 hours for two days, with one day gap.;public void testSingleValueWithOffsetMinDocCount() throws Exception {_        prepareIndex(date("2014-03-11T00:00:00+00:00"), 12, 1, 0)__        prepareIndex(date("2014-03-14T00:00:00+00:00"), 12, 1, 13)___        SearchResponse response = client().prepareSearch("idx2")_                .setQuery(matchAllQuery())_                .addAggregation(dateHistogram("date_histo")_                        .field("date")_                        .offset("6h")_                        .minDocCount(0)_                        .format(DATE_FORMAT)_                        .dateHistogramInterval(DateHistogramInterval.DAY))_                .get()___        assertThat(response.getHits().getTotalHits().value, equalTo(24L))___        Histogram histo = response.getAggregations().get("date_histo")__        List<? extends Histogram.Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(5))___        checkBucketFor(buckets.get(0), ZonedDateTime.of(2014, 3, 10, 6, 0, 0, 0, ZoneOffset.UTC), 6L)__        checkBucketFor(buckets.get(1), ZonedDateTime.of(2014, 3, 11, 6, 0, 0, 0, ZoneOffset.UTC), 6L)__        checkBucketFor(buckets.get(2), ZonedDateTime.of(2014, 3, 12, 6, 0, 0, 0, ZoneOffset.UTC), 0L)__        checkBucketFor(buckets.get(3), ZonedDateTime.of(2014, 3, 13, 6, 0, 0, 0, ZoneOffset.UTC), 6L)__        checkBucketFor(buckets.get(4), ZonedDateTime.of(2014, 3, 14, 6, 0, 0, 0, ZoneOffset.UTC), 6L)__    };set,offset,so,day,buckets,start,at,6am,index,first,12,hours,for,two,days,with,one,day,gap;public,void,test,single,value,with,offset,min,doc,count,throws,exception,prepare,index,date,2014,03,11t00,00,00,00,00,12,1,0,prepare,index,date,2014,03,14t00,00,00,00,00,12,1,13,search,response,response,client,prepare,search,idx2,set,query,match,all,query,add,aggregation,date,histogram,field,date,offset,6h,min,doc,count,0,format,date,histogram,interval,date,histogram,interval,day,get,assert,that,response,get,hits,get,total,hits,value,equal,to,24l,histogram,histo,response,get,aggregations,get,list,extends,histogram,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,5,check,bucket,for,buckets,get,0,zoned,date,time,of,2014,3,10,6,0,0,0,zone,offset,utc,6l,check,bucket,for,buckets,get,1,zoned,date,time,of,2014,3,11,6,0,0,0,zone,offset,utc,6l,check,bucket,for,buckets,get,2,zoned,date,time,of,2014,3,12,6,0,0,0,zone,offset,utc,0l,check,bucket,for,buckets,get,3,zoned,date,time,of,2014,3,13,6,0,0,0,zone,offset,utc,6l,check,bucket,for,buckets,get,4,zoned,date,time,of,2014,3,14,6,0,0,0,zone,offset,utc,6l
DateHistogramOffsetIT -> public void testSingleValueWithOffsetMinDocCount() throws Exception;1548921340;Set offset so day buckets start at 6am. Index first 12 hours for two days, with one day gap.;public void testSingleValueWithOffsetMinDocCount() throws Exception {_        prepareIndex(date("2014-03-11T00:00:00+00:00"), 12, 1, 0)__        prepareIndex(date("2014-03-14T00:00:00+00:00"), 12, 1, 13)___        SearchResponse response = client().prepareSearch("idx2")_                .setQuery(matchAllQuery())_                .addAggregation(dateHistogram("date_histo")_                        .field("date")_                        .offset("6h")_                        .minDocCount(0)_                        .format(DATE_FORMAT)_                        .dateHistogramInterval(DateHistogramInterval.DAY))_                .get()___        assertThat(response.getHits().getTotalHits().value, equalTo(24L))___        Histogram histo = response.getAggregations().get("date_histo")__        List<? extends Histogram.Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(5))___        checkBucketFor(buckets.get(0), ZonedDateTime.of(2014, 3, 10, 6, 0, 0, 0, ZoneOffset.UTC), 6L)__        checkBucketFor(buckets.get(1), ZonedDateTime.of(2014, 3, 11, 6, 0, 0, 0, ZoneOffset.UTC), 6L)__        checkBucketFor(buckets.get(2), ZonedDateTime.of(2014, 3, 12, 6, 0, 0, 0, ZoneOffset.UTC), 0L)__        checkBucketFor(buckets.get(3), ZonedDateTime.of(2014, 3, 13, 6, 0, 0, 0, ZoneOffset.UTC), 6L)__        checkBucketFor(buckets.get(4), ZonedDateTime.of(2014, 3, 14, 6, 0, 0, 0, ZoneOffset.UTC), 6L)__    };set,offset,so,day,buckets,start,at,6am,index,first,12,hours,for,two,days,with,one,day,gap;public,void,test,single,value,with,offset,min,doc,count,throws,exception,prepare,index,date,2014,03,11t00,00,00,00,00,12,1,0,prepare,index,date,2014,03,14t00,00,00,00,00,12,1,13,search,response,response,client,prepare,search,idx2,set,query,match,all,query,add,aggregation,date,histogram,field,date,offset,6h,min,doc,count,0,format,date,histogram,interval,date,histogram,interval,day,get,assert,that,response,get,hits,get,total,hits,value,equal,to,24l,histogram,histo,response,get,aggregations,get,list,extends,histogram,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,5,check,bucket,for,buckets,get,0,zoned,date,time,of,2014,3,10,6,0,0,0,zone,offset,utc,6l,check,bucket,for,buckets,get,1,zoned,date,time,of,2014,3,11,6,0,0,0,zone,offset,utc,6l,check,bucket,for,buckets,get,2,zoned,date,time,of,2014,3,12,6,0,0,0,zone,offset,utc,0l,check,bucket,for,buckets,get,3,zoned,date,time,of,2014,3,13,6,0,0,0,zone,offset,utc,6l,check,bucket,for,buckets,get,4,zoned,date,time,of,2014,3,14,6,0,0,0,zone,offset,utc,6l
