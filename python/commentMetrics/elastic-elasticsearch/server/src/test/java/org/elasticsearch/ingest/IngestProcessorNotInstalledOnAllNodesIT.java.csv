commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     return installPlugin ? Arrays.asList(IngestTestPlugin.class) : Collections.emptyList(). }
false;public;0;15;;public void testFailPipelineCreation() throws Exception {     installPlugin = true.     String node1 = internalCluster().startNode().     installPlugin = false.     String node2 = internalCluster().startNode().     ensureStableCluster(2, node1).     ensureStableCluster(2, node2).     try {         client().admin().cluster().preparePutPipeline("_id", pipelineSource, XContentType.JSON).get().         fail("exception expected").     } catch (ElasticsearchParseException e) {         assertThat(e.getMessage(), containsString("Processor type [test] is not installed on node")).     } }
false;public;0;12;;public void testFailPipelineCreationProcessorNotInstalledOnMasterNode() throws Exception {     internalCluster().startNode().     installPlugin = true.     internalCluster().startNode().     try {         client().admin().cluster().preparePutPipeline("_id", pipelineSource, XContentType.JSON).get().         fail("exception expected").     } catch (ElasticsearchParseException e) {         assertThat(e.getMessage(), equalTo("No processor type exists with name [test]")).     } }
true;public;0;18;// that pipeline can't be used on this node. ;// If there is pipeline defined and a node joins that doesn't have the processor installed then // that pipeline can't be used on this node. public void testFailStartNode() throws Exception {     installPlugin = true.     String node1 = internalCluster().startNode().     AcknowledgedResponse response = client().admin().cluster().preparePutPipeline("_id", pipelineSource, XContentType.JSON).get().     assertThat(response.isAcknowledged(), is(true)).     Pipeline pipeline = internalCluster().getInstance(NodeService.class, node1).getIngestService().getPipeline("_id").     assertThat(pipeline, notNullValue()).     installPlugin = false.     String node2 = internalCluster().startNode().     pipeline = internalCluster().getInstance(NodeService.class, node2).getIngestService().getPipeline("_id").     assertNotNull(pipeline).     assertThat(pipeline.getId(), equalTo("_id")).     assertThat(pipeline.getDescription(), equalTo("this is a place holder pipeline, " + "because pipeline with id [_id] could not be loaded")). }
