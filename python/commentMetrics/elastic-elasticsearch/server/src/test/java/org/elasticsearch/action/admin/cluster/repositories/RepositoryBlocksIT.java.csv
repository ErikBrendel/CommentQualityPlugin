commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;public void testPutRepositoryWithBlocks() {     logger.info("-->  registering a repository is blocked when the cluster is read only").     try {         setClusterReadOnly(true).         assertBlocked(client().admin().cluster().preparePutRepository("test-repo-blocks").setType("fs").setVerify(false).setSettings(Settings.builder().put("location", randomRepoPath())), MetaData.CLUSTER_READ_ONLY_BLOCK).     } finally {         setClusterReadOnly(false).     }     logger.info("-->  registering a repository is allowed when the cluster is not read only").     assertAcked(client().admin().cluster().preparePutRepository("test-repo-blocks").setType("fs").setVerify(false).setSettings(Settings.builder().put("location", randomRepoPath()))). }
false;public;0;16;;public void testVerifyRepositoryWithBlocks() {     assertAcked(client().admin().cluster().preparePutRepository("test-repo-blocks").setType("fs").setVerify(false).setSettings(Settings.builder().put("location", randomRepoPath()))).     // This test checks that the Get Repository operation is never blocked, even if the cluster is read only.     try {         setClusterReadOnly(true).         VerifyRepositoryResponse response = client().admin().cluster().prepareVerifyRepository("test-repo-blocks").execute().actionGet().         assertThat(response.getNodes().size(), equalTo(cluster().numDataAndMasterNodes())).     } finally {         setClusterReadOnly(false).     } }
false;public;0;17;;public void testDeleteRepositoryWithBlocks() {     assertAcked(client().admin().cluster().preparePutRepository("test-repo-blocks").setType("fs").setVerify(false).setSettings(Settings.builder().put("location", randomRepoPath()))).     logger.info("-->  deleting a repository is blocked when the cluster is read only").     try {         setClusterReadOnly(true).         assertBlocked(client().admin().cluster().prepareDeleteRepository("test-repo-blocks"), MetaData.CLUSTER_READ_ONLY_BLOCK).     } finally {         setClusterReadOnly(false).     }     logger.info("-->  deleting a repository is allowed when the cluster is not read only").     assertAcked(client().admin().cluster().prepareDeleteRepository("test-repo-blocks")). }
false;public;0;15;;public void testGetRepositoryWithBlocks() {     assertAcked(client().admin().cluster().preparePutRepository("test-repo-blocks").setType("fs").setVerify(false).setSettings(Settings.builder().put("location", randomRepoPath()))).     // This test checks that the Get Repository operation is never blocked, even if the cluster is read only.     try {         setClusterReadOnly(true).         GetRepositoriesResponse response = client().admin().cluster().prepareGetRepositories("test-repo-blocks").execute().actionGet().         assertThat(response.repositories(), hasSize(1)).     } finally {         setClusterReadOnly(false).     } }
