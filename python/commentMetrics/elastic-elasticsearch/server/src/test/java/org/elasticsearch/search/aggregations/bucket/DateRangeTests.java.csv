commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;36;;@Override protected DateRangeAggregationBuilder createTestAggregatorBuilder() {     int numRanges = randomIntBetween(1, 10).     DateRangeAggregationBuilder factory = new DateRangeAggregationBuilder(randomAlphaOfLengthBetween(3, 10)).     for (int i = 0. i < numRanges. i++) {         String key = null.         if (randomBoolean()) {             key = randomAlphaOfLengthBetween(1, 20).         }         double from = randomBoolean() ? Double.NEGATIVE_INFINITY : randomIntBetween(Integer.MIN_VALUE, Integer.MAX_VALUE - 1000).         double to = randomBoolean() ? Double.POSITIVE_INFINITY : (Double.isInfinite(from) ? randomIntBetween(Integer.MIN_VALUE, Integer.MAX_VALUE) : randomIntBetween((int) from, Integer.MAX_VALUE)).         if (randomBoolean()) {             factory.addRange(new Range(key, from, to)).         } else {             String fromAsStr = Double.isInfinite(from) ? null : String.valueOf(from).             String toAsStr = Double.isInfinite(to) ? null : String.valueOf(to).             factory.addRange(new Range(key, fromAsStr, toAsStr)).         }     }     factory.field(INT_FIELD_NAME).     if (randomBoolean()) {         factory.format("###.##").     }     if (randomBoolean()) {         factory.keyed(randomBoolean()).     }     if (randomBoolean()) {         factory.missing(randomIntBetween(0, 10)).     }     if (randomBoolean()) {         factory.timeZone(randomZone()).     }     return factory. }
false;public;0;14;;public void testParsingRangeStrict() throws IOException {     final String rangeAggregation = "{\n" + "\"field\" : \"date\",\n" + "\"format\" : \"yyyy-MM-dd\",\n" + "\"ranges\" : [\n" + "    { \"from\" : \"2017-01-01\", \"to\" : \"2017-01-02\", \"badField\" : \"abcd\" }\n" + "]\n" + "}".     XContentParser parser = createParser(JsonXContent.jsonXContent, rangeAggregation).     XContentParseException ex = expectThrows(XContentParseException.class, () -> DateRangeAggregationBuilder.parse("aggregationName", parser)).     assertThat(ex.getCause(), notNullValue()).     assertThat(ex.getCause().getMessage(), containsString("badField")). }
