# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractSuggestionBuilderTestCase -> protected SB randomTestBuilder();1524684173;returns a random suggestion builder, setting the common options randomly;protected SB randomTestBuilder() {_        SB randomSuggestion = randomSuggestionBuilder()__        return randomSuggestion__    };returns,a,random,suggestion,builder,setting,the,common,options,randomly;protected,sb,random,test,builder,sb,random,suggestion,random,suggestion,builder,return,random,suggestion
AbstractSuggestionBuilderTestCase -> protected SB randomTestBuilder();1529916084;returns a random suggestion builder, setting the common options randomly;protected SB randomTestBuilder() {_        SB randomSuggestion = randomSuggestionBuilder()__        return randomSuggestion__    };returns,a,random,suggestion,builder,setting,the,common,options,randomly;protected,sb,random,test,builder,sb,random,suggestion,random,suggestion,builder,return,random,suggestion
AbstractSuggestionBuilderTestCase -> protected SB randomTestBuilder();1531937412;returns a random suggestion builder, setting the common options randomly;protected SB randomTestBuilder() {_        SB randomSuggestion = randomSuggestionBuilder()__        return randomSuggestion__    };returns,a,random,suggestion,builder,setting,the,common,options,randomly;protected,sb,random,test,builder,sb,random,suggestion,random,suggestion,builder,return,random,suggestion
AbstractSuggestionBuilderTestCase -> protected abstract SB randomSuggestionBuilder()_;1524684173;create a randomized {@link SuggestBuilder} that is used in further tests;protected abstract SB randomSuggestionBuilder()_;create,a,randomized,link,suggest,builder,that,is,used,in,further,tests;protected,abstract,sb,random,suggestion,builder
AbstractSuggestionBuilderTestCase -> protected abstract SB randomSuggestionBuilder()_;1529916084;create a randomized {@link SuggestBuilder} that is used in further tests;protected abstract SB randomSuggestionBuilder()_;create,a,randomized,link,suggest,builder,that,is,used,in,further,tests;protected,abstract,sb,random,suggestion,builder
AbstractSuggestionBuilderTestCase -> protected abstract SB randomSuggestionBuilder()_;1531937412;create a randomized {@link SuggestBuilder} that is used in further tests;protected abstract SB randomSuggestionBuilder()_;create,a,randomized,link,suggest,builder,that,is,used,in,further,tests;protected,abstract,sb,random,suggestion,builder
AbstractSuggestionBuilderTestCase -> public void testEqualsAndHashcode();1524684173;Test equality and hashCode properties;public void testEqualsAndHashcode() {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            checkEqualsAndHashCode(randomTestBuilder(), this::copy, this::mutate)__        }_    };test,equality,and,hash,code,properties;public,void,test,equals,and,hashcode,for,int,runs,0,runs,runs,check,equals,and,hash,code,random,test,builder,this,copy,this,mutate
AbstractSuggestionBuilderTestCase -> public void testEqualsAndHashcode();1529916084;Test equality and hashCode properties;public void testEqualsAndHashcode() {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            checkEqualsAndHashCode(randomTestBuilder(), this::copy, this::mutate)__        }_    };test,equality,and,hash,code,properties;public,void,test,equals,and,hashcode,for,int,runs,0,runs,runs,check,equals,and,hash,code,random,test,builder,this,copy,this,mutate
AbstractSuggestionBuilderTestCase -> public void testEqualsAndHashcode();1531937412;Test equality and hashCode properties;public void testEqualsAndHashcode() {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            checkEqualsAndHashCode(randomTestBuilder(), this::copy, this::mutate)__        }_    };test,equality,and,hash,code,properties;public,void,test,equals,and,hashcode,for,int,runs,0,runs,runs,check,equals,and,hash,code,random,test,builder,this,copy,this,mutate
AbstractSuggestionBuilderTestCase -> protected String[] shuffleProtectedFields();1524684173;Subclasses can override this method and return a set of fields which should be protected from_recursive random shuffling in the {@link #testFromXContent()} test case;protected String[] shuffleProtectedFields() {_        return new String[0]__    };subclasses,can,override,this,method,and,return,a,set,of,fields,which,should,be,protected,from,recursive,random,shuffling,in,the,link,test,from,xcontent,test,case;protected,string,shuffle,protected,fields,return,new,string,0
AbstractSuggestionBuilderTestCase -> protected String[] shuffleProtectedFields();1529916084;Subclasses can override this method and return a set of fields which should be protected from_recursive random shuffling in the {@link #testFromXContent()} test case;protected String[] shuffleProtectedFields() {_        return new String[0]__    };subclasses,can,override,this,method,and,return,a,set,of,fields,which,should,be,protected,from,recursive,random,shuffling,in,the,link,test,from,xcontent,test,case;protected,string,shuffle,protected,fields,return,new,string,0
AbstractSuggestionBuilderTestCase -> protected String[] shuffleProtectedFields();1531937412;Subclasses can override this method and return a set of fields which should be protected from_recursive random shuffling in the {@link #testFromXContent()} test case;protected String[] shuffleProtectedFields() {_        return new String[0]__    };subclasses,can,override,this,method,and,return,a,set,of,fields,which,should,be,protected,from,recursive,random,shuffling,in,the,link,test,from,xcontent,test,case;protected,string,shuffle,protected,fields,return,new,string,0
AbstractSuggestionBuilderTestCase -> protected abstract void mutateSpecificParameters(SB firstBuilder) throws IOException_;1524684173;take and input {@link SuggestBuilder} and return another one that is_different in one aspect (to test non-equality);protected abstract void mutateSpecificParameters(SB firstBuilder) throws IOException_;take,and,input,link,suggest,builder,and,return,another,one,that,is,different,in,one,aspect,to,test,non,equality;protected,abstract,void,mutate,specific,parameters,sb,first,builder,throws,ioexception
AbstractSuggestionBuilderTestCase -> protected abstract void mutateSpecificParameters(SB firstBuilder) throws IOException_;1529916084;take and input {@link SuggestBuilder} and return another one that is_different in one aspect (to test non-equality);protected abstract void mutateSpecificParameters(SB firstBuilder) throws IOException_;take,and,input,link,suggest,builder,and,return,another,one,that,is,different,in,one,aspect,to,test,non,equality;protected,abstract,void,mutate,specific,parameters,sb,first,builder,throws,ioexception
AbstractSuggestionBuilderTestCase -> protected abstract void mutateSpecificParameters(SB firstBuilder) throws IOException_;1531937412;take and input {@link SuggestBuilder} and return another one that is_different in one aspect (to test non-equality);protected abstract void mutateSpecificParameters(SB firstBuilder) throws IOException_;take,and,input,link,suggest,builder,and,return,another,one,that,is,different,in,one,aspect,to,test,non,equality;protected,abstract,void,mutate,specific,parameters,sb,first,builder,throws,ioexception
AbstractSuggestionBuilderTestCase -> public void testSerialization() throws IOException;1524684173;Test serialization and deserialization of the suggestion builder;public void testSerialization() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            SB original = randomTestBuilder()__            SB deserialized = copy(original)__            assertEquals(deserialized, original)__            assertEquals(deserialized.hashCode(), original.hashCode())__            assertNotSame(deserialized, original)__        }_    };test,serialization,and,deserialization,of,the,suggestion,builder;public,void,test,serialization,throws,ioexception,for,int,runs,0,runs,runs,sb,original,random,test,builder,sb,deserialized,copy,original,assert,equals,deserialized,original,assert,equals,deserialized,hash,code,original,hash,code,assert,not,same,deserialized,original
AbstractSuggestionBuilderTestCase -> public void testSerialization() throws IOException;1529916084;Test serialization and deserialization of the suggestion builder;public void testSerialization() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            SB original = randomTestBuilder()__            SB deserialized = copy(original)__            assertEquals(deserialized, original)__            assertEquals(deserialized.hashCode(), original.hashCode())__            assertNotSame(deserialized, original)__        }_    };test,serialization,and,deserialization,of,the,suggestion,builder;public,void,test,serialization,throws,ioexception,for,int,runs,0,runs,runs,sb,original,random,test,builder,sb,deserialized,copy,original,assert,equals,deserialized,original,assert,equals,deserialized,hash,code,original,hash,code,assert,not,same,deserialized,original
AbstractSuggestionBuilderTestCase -> public void testSerialization() throws IOException;1531937412;Test serialization and deserialization of the suggestion builder;public void testSerialization() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            SB original = randomTestBuilder()__            SB deserialized = copy(original)__            assertEquals(deserialized, original)__            assertEquals(deserialized.hashCode(), original.hashCode())__            assertNotSame(deserialized, original)__        }_    };test,serialization,and,deserialization,of,the,suggestion,builder;public,void,test,serialization,throws,ioexception,for,int,runs,0,runs,runs,sb,original,random,test,builder,sb,deserialized,copy,original,assert,equals,deserialized,original,assert,equals,deserialized,hash,code,original,hash,code,assert,not,same,deserialized,original
AbstractSuggestionBuilderTestCase -> @BeforeClass     public static void init();1524684173;setup for the whole base test class;@BeforeClass_    public static void init() {_        SearchModule searchModule = new SearchModule(Settings.EMPTY, false, emptyList())__        namedWriteableRegistry = new NamedWriteableRegistry(searchModule.getNamedWriteables())__        xContentRegistry = new NamedXContentRegistry(searchModule.getNamedXContents())__    };setup,for,the,whole,base,test,class;before,class,public,static,void,init,search,module,search,module,new,search,module,settings,empty,false,empty,list,named,writeable,registry,new,named,writeable,registry,search,module,get,named,writeables,x,content,registry,new,named,xcontent,registry,search,module,get,named,xcontents
AbstractSuggestionBuilderTestCase -> @BeforeClass     public static void init();1529916084;setup for the whole base test class;@BeforeClass_    public static void init() {_        SearchModule searchModule = new SearchModule(Settings.EMPTY, false, emptyList())__        namedWriteableRegistry = new NamedWriteableRegistry(searchModule.getNamedWriteables())__        xContentRegistry = new NamedXContentRegistry(searchModule.getNamedXContents())__    };setup,for,the,whole,base,test,class;before,class,public,static,void,init,search,module,search,module,new,search,module,settings,empty,false,empty,list,named,writeable,registry,new,named,writeable,registry,search,module,get,named,writeables,x,content,registry,new,named,xcontent,registry,search,module,get,named,xcontents
AbstractSuggestionBuilderTestCase -> @BeforeClass     public static void init();1531937412;setup for the whole base test class;@BeforeClass_    public static void init() {_        SearchModule searchModule = new SearchModule(Settings.EMPTY, false, emptyList())__        namedWriteableRegistry = new NamedWriteableRegistry(searchModule.getNamedWriteables())__        xContentRegistry = new NamedXContentRegistry(searchModule.getNamedXContents())__    };setup,for,the,whole,base,test,class;before,class,public,static,void,init,search,module,search,module,new,search,module,settings,empty,false,empty,list,named,writeable,registry,new,named,writeable,registry,search,module,get,named,writeables,x,content,registry,new,named,xcontent,registry,search,module,get,named,xcontents
AbstractSuggestionBuilderTestCase -> public void testFromXContent() throws IOException;1524684173;creates random suggestion builder, renders it to xContent and back to new_instance that should be equal to original;public void testFromXContent() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            SB suggestionBuilder = randomTestBuilder()__            XContentBuilder xContentBuilder = XContentFactory.contentBuilder(randomFrom(XContentType.values()))__            if (randomBoolean()) {_                xContentBuilder.prettyPrint()__            }_            xContentBuilder.startObject()__            suggestionBuilder.toXContent(xContentBuilder, ToXContent.EMPTY_PARAMS)__            xContentBuilder.endObject()___            XContentBuilder shuffled = shuffleXContent(xContentBuilder, shuffleProtectedFields())__            XContentParser parser = createParser(shuffled)__            _            parser.nextToken()___            SuggestionBuilder<?> secondSuggestionBuilder = SuggestionBuilder.fromXContent(parser)__            assertNotSame(suggestionBuilder, secondSuggestionBuilder)__            assertEquals(suggestionBuilder, secondSuggestionBuilder)__            assertEquals(suggestionBuilder.hashCode(), secondSuggestionBuilder.hashCode())__        }_    };creates,random,suggestion,builder,renders,it,to,x,content,and,back,to,new,instance,that,should,be,equal,to,original;public,void,test,from,xcontent,throws,ioexception,for,int,runs,0,runs,runs,sb,suggestion,builder,random,test,builder,xcontent,builder,x,content,builder,xcontent,factory,content,builder,random,from,xcontent,type,values,if,random,boolean,x,content,builder,pretty,print,x,content,builder,start,object,suggestion,builder,to,xcontent,x,content,builder,to,xcontent,x,content,builder,end,object,xcontent,builder,shuffled,shuffle,xcontent,x,content,builder,shuffle,protected,fields,xcontent,parser,parser,create,parser,shuffled,parser,next,token,suggestion,builder,second,suggestion,builder,suggestion,builder,from,xcontent,parser,assert,not,same,suggestion,builder,second,suggestion,builder,assert,equals,suggestion,builder,second,suggestion,builder,assert,equals,suggestion,builder,hash,code,second,suggestion,builder,hash,code
AbstractSuggestionBuilderTestCase -> public void testFromXContent() throws IOException;1529916084;creates random suggestion builder, renders it to xContent and back to new_instance that should be equal to original;public void testFromXContent() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            SB suggestionBuilder = randomTestBuilder()__            XContentBuilder xContentBuilder = XContentFactory.contentBuilder(randomFrom(XContentType.values()))__            if (randomBoolean()) {_                xContentBuilder.prettyPrint()__            }_            xContentBuilder.startObject()__            suggestionBuilder.toXContent(xContentBuilder, ToXContent.EMPTY_PARAMS)__            xContentBuilder.endObject()___            XContentBuilder shuffled = shuffleXContent(xContentBuilder, shuffleProtectedFields())__            try (XContentParser parser = createParser(shuffled)) {_                _                parser.nextToken()___                SuggestionBuilder<?> secondSuggestionBuilder = SuggestionBuilder.fromXContent(parser)__                assertNotSame(suggestionBuilder, secondSuggestionBuilder)__                assertEquals(suggestionBuilder, secondSuggestionBuilder)__                assertEquals(suggestionBuilder.hashCode(), secondSuggestionBuilder.hashCode())__            }_        }_    };creates,random,suggestion,builder,renders,it,to,x,content,and,back,to,new,instance,that,should,be,equal,to,original;public,void,test,from,xcontent,throws,ioexception,for,int,runs,0,runs,runs,sb,suggestion,builder,random,test,builder,xcontent,builder,x,content,builder,xcontent,factory,content,builder,random,from,xcontent,type,values,if,random,boolean,x,content,builder,pretty,print,x,content,builder,start,object,suggestion,builder,to,xcontent,x,content,builder,to,xcontent,x,content,builder,end,object,xcontent,builder,shuffled,shuffle,xcontent,x,content,builder,shuffle,protected,fields,try,xcontent,parser,parser,create,parser,shuffled,parser,next,token,suggestion,builder,second,suggestion,builder,suggestion,builder,from,xcontent,parser,assert,not,same,suggestion,builder,second,suggestion,builder,assert,equals,suggestion,builder,second,suggestion,builder,assert,equals,suggestion,builder,hash,code,second,suggestion,builder,hash,code
AbstractSuggestionBuilderTestCase -> public void testFromXContent() throws IOException;1531937412;creates random suggestion builder, renders it to xContent and back to new_instance that should be equal to original;public void testFromXContent() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            SB suggestionBuilder = randomTestBuilder()__            XContentBuilder xContentBuilder = XContentFactory.contentBuilder(randomFrom(XContentType.values()))__            if (randomBoolean()) {_                xContentBuilder.prettyPrint()__            }_            xContentBuilder.startObject()__            suggestionBuilder.toXContent(xContentBuilder, ToXContent.EMPTY_PARAMS)__            xContentBuilder.endObject()___            XContentBuilder shuffled = shuffleXContent(xContentBuilder, shuffleProtectedFields())__            try (XContentParser parser = createParser(shuffled)) {_                _                parser.nextToken()___                SuggestionBuilder<?> secondSuggestionBuilder = SuggestionBuilder.fromXContent(parser)__                assertNotSame(suggestionBuilder, secondSuggestionBuilder)__                assertEquals(suggestionBuilder, secondSuggestionBuilder)__                assertEquals(suggestionBuilder.hashCode(), secondSuggestionBuilder.hashCode())__            }_        }_    };creates,random,suggestion,builder,renders,it,to,x,content,and,back,to,new,instance,that,should,be,equal,to,original;public,void,test,from,xcontent,throws,ioexception,for,int,runs,0,runs,runs,sb,suggestion,builder,random,test,builder,xcontent,builder,x,content,builder,xcontent,factory,content,builder,random,from,xcontent,type,values,if,random,boolean,x,content,builder,pretty,print,x,content,builder,start,object,suggestion,builder,to,xcontent,x,content,builder,to,xcontent,x,content,builder,end,object,xcontent,builder,shuffled,shuffle,xcontent,x,content,builder,shuffle,protected,fields,try,xcontent,parser,parser,create,parser,shuffled,parser,next,token,suggestion,builder,second,suggestion,builder,suggestion,builder,from,xcontent,parser,assert,not,same,suggestion,builder,second,suggestion,builder,assert,equals,suggestion,builder,second,suggestion,builder,assert,equals,suggestion,builder,hash,code,second,suggestion,builder,hash,code
AbstractSuggestionBuilderTestCase -> protected abstract void assertSuggestionContext(SB builder, SuggestionContext context) throws IOException_;1524684173;put implementation dependent assertions in the sub-type test;protected abstract void assertSuggestionContext(SB builder, SuggestionContext context) throws IOException_;put,implementation,dependent,assertions,in,the,sub,type,test;protected,abstract,void,assert,suggestion,context,sb,builder,suggestion,context,context,throws,ioexception
AbstractSuggestionBuilderTestCase -> protected abstract void assertSuggestionContext(SB builder, SuggestionContext context) throws IOException_;1529916084;put implementation dependent assertions in the sub-type test;protected abstract void assertSuggestionContext(SB builder, SuggestionContext context) throws IOException_;put,implementation,dependent,assertions,in,the,sub,type,test;protected,abstract,void,assert,suggestion,context,sb,builder,suggestion,context,context,throws,ioexception
AbstractSuggestionBuilderTestCase -> protected abstract void assertSuggestionContext(SB builder, SuggestionContext context) throws IOException_;1531937412;put implementation dependent assertions in the sub-type test;protected abstract void assertSuggestionContext(SB builder, SuggestionContext context) throws IOException_;put,implementation,dependent,assertions,in,the,sub,type,test;protected,abstract,void,assert,suggestion,context,sb,builder,suggestion,context,context,throws,ioexception
