# id;timestamp;commentText;codeText;commentWords;codeWords
ThreadContextTests -> private Runnable sometimesAbstractRunnable(Runnable r);1524684173;Sometimes wraps a Runnable in an AbstractRunnable.;private Runnable sometimesAbstractRunnable(Runnable r) {_        if (random().nextBoolean()) {_            return r__        }_        return new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new RuntimeException(e)__            }__            @Override_            protected void doRun() throws Exception {_                r.run()__            }_        }__    };sometimes,wraps,a,runnable,in,an,abstract,runnable;private,runnable,sometimes,abstract,runnable,runnable,r,if,random,next,boolean,return,r,return,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,runtime,exception,e,override,protected,void,do,run,throws,exception,r,run
ThreadContextTests -> private Runnable sometimesAbstractRunnable(Runnable r);1534755962;Sometimes wraps a Runnable in an AbstractRunnable.;private Runnable sometimesAbstractRunnable(Runnable r) {_        if (random().nextBoolean()) {_            return r__        }_        return new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new RuntimeException(e)__            }__            @Override_            protected void doRun() throws Exception {_                r.run()__            }_        }__    };sometimes,wraps,a,runnable,in,an,abstract,runnable;private,runnable,sometimes,abstract,runnable,runnable,r,if,random,next,boolean,return,r,return,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,runtime,exception,e,override,protected,void,do,run,throws,exception,r,run
ThreadContextTests -> private Runnable sometimesAbstractRunnable(Runnable r);1543415307;Sometimes wraps a Runnable in an AbstractRunnable.;private Runnable sometimesAbstractRunnable(Runnable r) {_        if (random().nextBoolean()) {_            return r__        }_        return new AbstractRunnable() {_            @Override_            public void onFailure(Exception e) {_                throw new RuntimeException(e)__            }__            @Override_            protected void doRun() throws Exception {_                r.run()__            }_        }__    };sometimes,wraps,a,runnable,in,an,abstract,runnable;private,runnable,sometimes,abstract,runnable,runnable,r,if,random,next,boolean,return,r,return,new,abstract,runnable,override,public,void,on,failure,exception,e,throw,new,runtime,exception,e,override,protected,void,do,run,throws,exception,r,run
