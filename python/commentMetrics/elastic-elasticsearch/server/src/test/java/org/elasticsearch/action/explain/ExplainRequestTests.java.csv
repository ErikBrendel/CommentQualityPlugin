commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;public void setUp() throws Exception {     super.setUp().     IndicesModule indicesModule = new IndicesModule(Collections.emptyList()).     SearchModule searchModule = new SearchModule(Settings.EMPTY, false, Collections.emptyList()).     List<NamedWriteableRegistry.Entry> entries = new ArrayList<>().     entries.addAll(indicesModule.getNamedWriteables()).     entries.addAll(searchModule.getNamedWriteables()).     namedWriteableRegistry = new NamedWriteableRegistry(entries). }
false;public;0;22;;public void testSerialize() throws IOException {     try (BytesStreamOutput output = new BytesStreamOutput()) {         ExplainRequest request = new ExplainRequest("index", "type", "id").         request.fetchSourceContext(new FetchSourceContext(true, new String[] { "field1.*" }, new String[] { "field2.*" })).         request.filteringAlias(new AliasFilter(QueryBuilders.termQuery("filter_field", "value"), new String[] { "alias0", "alias1" })).         request.preference("the_preference").         request.query(QueryBuilders.termQuery("field", "value")).         request.storedFields(new String[] { "field1", "field2" }).         request.routing("some_routing").         request.writeTo(output).         try (StreamInput in = new NamedWriteableAwareStreamInput(output.bytes().streamInput(), namedWriteableRegistry)) {             ExplainRequest readRequest = new ExplainRequest().             readRequest.readFrom(in).             assertEquals(request.filteringAlias(), readRequest.filteringAlias()).             assertArrayEquals(request.storedFields(), readRequest.storedFields()).             assertEquals(request.preference(), readRequest.preference()).             assertEquals(request.query(), readRequest.query()).             assertEquals(request.routing(), readRequest.routing()).             assertEquals(request.fetchSourceContext(), readRequest.fetchSourceContext()).         }     } }
false;public;0;19;;public void testValidation() {     {         final ExplainRequest request = new ExplainRequest("index4", "_doc", "0").         request.query(QueryBuilders.termQuery("field", "value")).         final ActionRequestValidationException validate = request.validate().         assertThat(validate, nullValue()).     }     {         final ExplainRequest request = new ExplainRequest("index4", randomBoolean() ? "" : null, randomBoolean() ? "" : null).         request.query(QueryBuilders.termQuery("field", "value")).         final ActionRequestValidationException validate = request.validate().         assertThat(validate, not(nullValue())).         assertThat(validate.validationErrors(), hasItems("type is missing", "id is missing")).     } }
