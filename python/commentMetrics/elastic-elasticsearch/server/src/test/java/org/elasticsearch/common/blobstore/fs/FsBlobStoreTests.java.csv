commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;9;;protected BlobStore newBlobStore() throws IOException {     final Settings settings.     if (randomBoolean()) {         settings = Settings.builder().put("buffer_size", new ByteSizeValue(randomIntBetween(1, 100), ByteSizeUnit.KB)).build().     } else {         settings = Settings.EMPTY.     }     return new FsBlobStore(settings, createTempDir()). }
false;public;0;34;;public void testReadOnly() throws Exception {     Settings settings = Settings.builder().put("readonly", true).build().     Path tempDir = createTempDir().     Path path = tempDir.resolve("bar").     try (FsBlobStore store = new FsBlobStore(settings, path)) {         assertFalse(Files.exists(path)).         BlobPath blobPath = BlobPath.cleanPath().add("foo").         store.blobContainer(blobPath).         Path storePath = store.path().         for (String d : blobPath) {             storePath = storePath.resolve(d).         }         assertFalse(Files.exists(storePath)).     }     settings = randomBoolean() ? Settings.EMPTY : Settings.builder().put("readonly", false).build().     try (FsBlobStore store = new FsBlobStore(settings, path)) {         assertTrue(Files.exists(path)).         BlobPath blobPath = BlobPath.cleanPath().add("foo").         BlobContainer container = store.blobContainer(blobPath).         Path storePath = store.path().         for (String d : blobPath) {             storePath = storePath.resolve(d).         }         assertTrue(Files.exists(storePath)).         assertTrue(Files.isDirectory(storePath)).         byte[] data = randomBytes(randomIntBetween(10, scaledRandomIntBetween(1024, 1 << 16))).         writeBlob(container, "test", new BytesArray(data)).         assertArrayEquals(readBlobFully(container, "test", data.length), data).         assertTrue(container.blobExists("test")).     } }
