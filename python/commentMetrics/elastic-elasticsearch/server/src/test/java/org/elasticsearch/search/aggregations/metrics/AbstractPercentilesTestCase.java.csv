commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override public void setUp() throws Exception {     super.setUp().     percents = randomPercents(false).     keyed = randomBoolean().     docValueFormat = randomNumericDocValueFormat(). }
false;protected;3;9;;@Override protected T createTestInstance(String name, List<PipelineAggregator> pipelineAggregators, Map<String, Object> metaData) {     int numValues = frequently() ? randomInt(100) : 0.     double[] values = new double[numValues].     for (int i = 0. i < numValues. ++i) {         values[i] = randomDouble().     }     return createTestInstance(name, pipelineAggregators, metaData, keyed, docValueFormat, percents, values). }
false;protected,abstract;7;2;;protected abstract T createTestInstance(String name, List<PipelineAggregator> pipelineAggregators, Map<String, Object> metaData, boolean keyed, DocValueFormat format, double[] percents, double[] values).
false;protected,abstract;0;1;;protected abstract Class<? extends ParsedPercentiles> implementationClass().
false;public;0;10;;public void testPercentilesIterators() throws IOException {     final T aggregation = createTestInstance().     final Iterable<Percentile> parsedAggregation = parseAndAssert(aggregation, false, false).     Iterator<Percentile> it = aggregation.iterator().     Iterator<Percentile> parsedIt = parsedAggregation.iterator().     while (it.hasNext()) {         assertEquals(it.next(), parsedIt.next()).     } }
false;public,static;1;11;;public static double[] randomPercents(boolean sorted) {     List<Double> randomCdfValues = randomSubsetOf(randomIntBetween(1, 7), 0.01d, 0.05d, 0.25d, 0.50d, 0.75d, 0.95d, 0.99d).     double[] percents = new double[randomCdfValues.size()].     for (int i = 0. i < randomCdfValues.size(). i++) {         percents[i] = randomCdfValues.get(i).     }     if (sorted) {         Arrays.sort(percents).     }     return percents. }
false;protected;0;4;;@Override protected Predicate<String> excludePathsFromXContentInsertion() {     return path -> path.endsWith(CommonFields.VALUES.getPreferredName()). }
false;protected,abstract;2;1;;protected abstract void assertPercentile(T agg, Double value).
false;public;0;46;;public void testEmptyRanksXContent() throws IOException {     double[] percents = new double[] { 1, 2, 3 }.     boolean keyed = randomBoolean().     DocValueFormat docValueFormat = randomNumericDocValueFormat().     T agg = createTestInstance("test", Collections.emptyList(), Collections.emptyMap(), keyed, docValueFormat, percents, new double[0]).     for (Percentile percentile : agg) {         Double value = percentile.getValue().         assertPercentile(agg, value).     }     XContentBuilder builder = JsonXContent.contentBuilder().prettyPrint().     builder.startObject().     agg.doXContentBody(builder, ToXContent.EMPTY_PARAMS).     builder.endObject().     String expected.     if (keyed) {         expected = "{\n" + "  \"values\" : {\n" + "    \"1.0\" : null,\n" + "    \"2.0\" : null,\n" + "    \"3.0\" : null\n" + "  }\n" + "}".     } else {         expected = "{\n" + "  \"values\" : [\n" + "    {\n" + "      \"key\" : 1.0,\n" + "      \"value\" : null\n" + "    },\n" + "    {\n" + "      \"key\" : 2.0,\n" + "      \"value\" : null\n" + "    },\n" + "    {\n" + "      \"key\" : 3.0,\n" + "      \"value\" : null\n" + "    }\n" + "  ]\n" + "}".     }     assertThat(Strings.toString(builder), equalTo(expected)). }
