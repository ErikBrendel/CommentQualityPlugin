commented;modifiers;parameterAmount;loc;comment;code
false;public;0;32;;public void testUpdateByQueryRequestImplementsIndicesRequestReplaceable() {     int numIndices = between(1, 100).     String[] indices = new String[numIndices].     for (int i = 0. i < numIndices. i++) {         indices[i] = randomSimpleString(random(), 1, 30).     }     IndicesOptions indicesOptions = IndicesOptions.fromOptions(randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean()).     UpdateByQueryRequest request = new UpdateByQueryRequest().     request.indices(indices).     request.setIndicesOptions(indicesOptions).     for (int i = 0. i < numIndices. i++) {         assertEquals(indices[i], request.indices()[i]).     }     assertSame(indicesOptions, request.indicesOptions()).     assertSame(request.indicesOptions(), request.getSearchRequest().indicesOptions()).     int numNewIndices = between(1, 100).     String[] newIndices = new String[numNewIndices].     for (int i = 0. i < numNewIndices. i++) {         newIndices[i] = randomSimpleString(random(), 1, 30).     }     request.indices(newIndices).     for (int i = 0. i < numNewIndices. i++) {         assertEquals(newIndices[i], request.indices()[i]).     }     for (int i = 0. i < numNewIndices. i++) {         assertEquals(newIndices[i], request.getSearchRequest().indices()[i]).     } }
false;protected;0;4;;@Override protected UpdateByQueryRequest newRequest() {     return new UpdateByQueryRequest(randomAlphaOfLength(5)). }
false;protected;1;9;;@Override protected void extraRandomizationForSlice(UpdateByQueryRequest original) {     if (randomBoolean()) {         original.setScript(mockScript(randomAlphaOfLength(5))).     }     if (randomBoolean()) {         original.setPipeline(randomAlphaOfLength(5)).     } }
false;protected;2;5;;@Override protected void extraForSliceAssertions(UpdateByQueryRequest original, UpdateByQueryRequest forSliced) {     assertEquals(original.getScript(), forSliced.getScript()).     assertEquals(original.getPipeline(), forSliced.getPipeline()). }
