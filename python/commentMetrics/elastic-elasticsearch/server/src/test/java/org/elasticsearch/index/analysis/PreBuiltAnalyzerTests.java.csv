commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean forbidPrivateIndexSettings() {     return false. }
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> getPlugins() {     return pluginList(InternalSettingsPlugin.class). }
false;public;0;7;;public void testThatDefaultAndStandardAnalyzerAreTheSameInstance() {     Analyzer currentStandardAnalyzer = PreBuiltAnalyzers.STANDARD.getAnalyzer(Version.CURRENT).     Analyzer currentDefaultAnalyzer = PreBuiltAnalyzers.DEFAULT.getAnalyzer(Version.CURRENT).     // special case, these two are the same instance     assertThat(currentDefaultAnalyzer, is(currentStandardAnalyzer)). }
false;public;0;4;;public void testThatInstancesAreTheSameAlwaysForKeywordAnalyzer() {     assertThat(PreBuiltAnalyzers.KEYWORD.getAnalyzer(Version.CURRENT), is(PreBuiltAnalyzers.KEYWORD.getAnalyzer(Version.V_6_0_0))). }
false;public;0;13;;public void testThatInstancesAreCachedAndReused() {     assertSame(PreBuiltAnalyzers.STANDARD.getAnalyzer(Version.CURRENT), PreBuiltAnalyzers.STANDARD.getAnalyzer(Version.CURRENT)).     // same es version should be cached     assertSame(PreBuiltAnalyzers.STANDARD.getAnalyzer(Version.V_6_2_1), PreBuiltAnalyzers.STANDARD.getAnalyzer(Version.V_6_2_1)).     assertNotSame(PreBuiltAnalyzers.STANDARD.getAnalyzer(Version.V_6_0_0), PreBuiltAnalyzers.STANDARD.getAnalyzer(Version.V_6_0_1)).     // Same Lucene version should be cached:     assertSame(PreBuiltAnalyzers.STOP.getAnalyzer(Version.V_6_2_1), PreBuiltAnalyzers.STOP.getAnalyzer(Version.V_6_2_2)). }
false;public;0;22;;public void testThatAnalyzersAreUsedInMapping() throws IOException {     int randomInt = randomInt(PreBuiltAnalyzers.values().length - 1).     PreBuiltAnalyzers randomPreBuiltAnalyzer = PreBuiltAnalyzers.values()[randomInt].     String analyzerName = randomPreBuiltAnalyzer.name().toLowerCase(Locale.ROOT).     Version randomVersion = randomVersion(random()).     Settings indexSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, randomVersion).build().     NamedAnalyzer namedAnalyzer = new PreBuiltAnalyzerProvider(analyzerName, AnalyzerScope.INDEX, randomPreBuiltAnalyzer.getAnalyzer(randomVersion)).get().     XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "text").field("analyzer", analyzerName).endObject().endObject().endObject().endObject().     MapperService mapperService = createIndex("test", indexSettings, "type", mapping).mapperService().     MappedFieldType fieldType = mapperService.fullName("field").     assertThat(fieldType.searchAnalyzer(), instanceOf(NamedAnalyzer.class)).     NamedAnalyzer fieldMapperNamedAnalyzer = fieldType.searchAnalyzer().     assertThat(fieldMapperNamedAnalyzer.analyzer(), is(namedAnalyzer.analyzer())). }
