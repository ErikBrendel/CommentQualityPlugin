commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;33;;@Override protected RangeAggregationBuilder createTestAggregatorBuilder() {     int numRanges = randomIntBetween(1, 10).     RangeAggregationBuilder factory = new RangeAggregationBuilder(randomAlphaOfLengthBetween(3, 10)).     for (int i = 0. i < numRanges. i++) {         String key = null.         if (randomBoolean()) {             key = randomAlphaOfLengthBetween(1, 20).         }         double from = randomBoolean() ? Double.NEGATIVE_INFINITY : randomIntBetween(Integer.MIN_VALUE, Integer.MAX_VALUE - 1000).         double to = randomBoolean() ? Double.POSITIVE_INFINITY : (Double.isInfinite(from) ? randomIntBetween(Integer.MIN_VALUE, Integer.MAX_VALUE) : randomIntBetween((int) from, Integer.MAX_VALUE)).         if (randomBoolean()) {             factory.addRange(new Range(key, from, to)).         } else {             String fromAsStr = Double.isInfinite(from) ? null : String.valueOf(from).             String toAsStr = Double.isInfinite(to) ? null : String.valueOf(to).             factory.addRange(new Range(key, fromAsStr, toAsStr)).         }     }     factory.field(INT_FIELD_NAME).     if (randomBoolean()) {         factory.format("###.##").     }     if (randomBoolean()) {         factory.keyed(randomBoolean()).     }     if (randomBoolean()) {         factory.missing(randomIntBetween(0, 10)).     }     return factory. }
false;public;0;13;;public void testParsingRangeStrict() throws IOException {     final String rangeAggregation = "{\n" + "\"field\" : \"price\",\n" + "\"ranges\" : [\n" + "    { \"from\" : 50, \"to\" : 100, \"badField\" : \"abcd\" }\n" + "]\n" + "}".     XContentParser parser = createParser(JsonXContent.jsonXContent, rangeAggregation).     XContentParseException ex = expectThrows(XContentParseException.class, () -> RangeAggregationBuilder.parse("aggregationName", parser)).     assertThat(ex.getCause(), notNullValue()).     assertThat(ex.getCause().getMessage(), containsString("badField")). }
true;public;0;13;/**  * We never render "null" values to xContent, but we should test that we can parse them (and they return correct defaults)  */ ;/**  * We never render "null" values to xContent, but we should test that we can parse them (and they return correct defaults)  */ public void testParsingNull() throws IOException {     final String rangeAggregation = "{\n" + "\"field\" : \"price\",\n" + "\"ranges\" : [\n" + "    { \"from\" : null, \"to\" : null }\n" + "]\n" + "}".     XContentParser parser = createParser(JsonXContent.jsonXContent, rangeAggregation).     RangeAggregationBuilder aggregationBuilder = (RangeAggregationBuilder) RangeAggregationBuilder.parse("aggregationName", parser).     assertEquals(1, aggregationBuilder.ranges().size()).     assertEquals(Double.NEGATIVE_INFINITY, aggregationBuilder.ranges().get(0).getFrom(), 0.0).     assertEquals(Double.POSITIVE_INFINITY, aggregationBuilder.ranges().get(0).getTo(), 0.0). }
