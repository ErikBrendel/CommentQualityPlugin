commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;public void testResolve() {     assertEquals(ValueType.STRING, ValueType.resolveForScript("string")).     assertEquals(ValueType.DOUBLE, ValueType.resolveForScript("float")).     assertEquals(ValueType.DOUBLE, ValueType.resolveForScript("double")).     assertEquals(ValueType.LONG, ValueType.resolveForScript("byte")).     assertEquals(ValueType.LONG, ValueType.resolveForScript("short")).     assertEquals(ValueType.LONG, ValueType.resolveForScript("integer")).     assertEquals(ValueType.LONG, ValueType.resolveForScript("long")).     assertEquals(ValueType.DATE, ValueType.resolveForScript("date")).     assertEquals(ValueType.IP, ValueType.resolveForScript("ip")).     assertEquals(ValueType.BOOLEAN, ValueType.resolveForScript("boolean")). }
false;public;0;9;;public void testCompatibility() {     assertTrue(ValueType.DOUBLE.isA(ValueType.NUMERIC)).     assertTrue(ValueType.LONG.isA(ValueType.NUMERIC)).     assertTrue(ValueType.DATE.isA(ValueType.LONG)).     assertTrue(ValueType.NUMERIC.isA(ValueType.NUMBER)).     assertTrue(ValueType.BOOLEAN.isA(ValueType.NUMBER)).     assertFalse(ValueType.STRING.isA(ValueType.NUMBER)).     assertFalse(ValueType.DATE.isA(ValueType.IP)). }
