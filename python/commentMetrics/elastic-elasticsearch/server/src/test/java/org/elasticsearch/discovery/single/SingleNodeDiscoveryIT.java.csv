commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;9;;@Override protected Settings nodeSettings(int nodeOrdinal) {     return Settings.builder().put(super.nodeSettings(nodeOrdinal)).put("discovery.type", "single-node").put("transport.tcp.port", "0").build(). }
false;protected;1;5;;@Override protected void finishPingingRound(PingingRound pingingRound) {     latch.countDown().     super.finishPingingRound(pingingRound). }
false;public;0;46;;public void testDoesNotRespondToZenPings() throws Exception {     final Settings settings = Settings.builder().put("cluster.name", internalCluster().getClusterName()).build().     final Version version = Version.CURRENT.     final Stack<Closeable> closeables = new Stack<>().     final TestThreadPool threadPool = new TestThreadPool(getClass().getName()).     try {         final MockTransportService pingTransport = MockTransportService.createNewService(settings, version, threadPool, null).         pingTransport.start().         closeables.push(pingTransport).         final TransportService nodeTransport = internalCluster().getInstance(TransportService.class).         // try to ping the single node directly         final SeedHostsProvider provider = hostsResolver -> Collections.singletonList(nodeTransport.getLocalNode().getAddress()).         final CountDownLatch latch = new CountDownLatch(1).         final DiscoveryNodes nodes = DiscoveryNodes.builder().add(nodeTransport.getLocalNode()).add(pingTransport.getLocalNode()).localNodeId(pingTransport.getLocalNode().getId()).build().         final ClusterName clusterName = new ClusterName(internalCluster().getClusterName()).         final ClusterState state = ClusterState.builder(clusterName).nodes(nodes).build().         final UnicastZenPing unicastZenPing = new UnicastZenPing(settings, threadPool, pingTransport, provider, () -> state) {              @Override             protected void finishPingingRound(PingingRound pingingRound) {                 latch.countDown().                 super.finishPingingRound(pingingRound).             }         }.         unicastZenPing.start().         closeables.push(unicastZenPing).         final CompletableFuture<ZenPing.PingCollection> responses = new CompletableFuture<>().         unicastZenPing.ping(responses::complete, TimeValue.timeValueSeconds(3)).         latch.await().         responses.get().         assertThat(responses.get().size(), equalTo(0)).     } finally {         while (!closeables.isEmpty()) {             IOUtils.closeWhileHandlingException(closeables.pop()).         }         terminate(threadPool).     } }
false;public;1;13;;@Override public Settings nodeSettings(int nodeOrdinal) {     return Settings.builder().put("discovery.type", "single-node").put("transport.type", getTestTransportType()).put("transport.port", port + "-" + (port + 5 - 1)).build(). }
false;public;1;4;;@Override public Path nodeConfigPath(int nodeOrdinal) {     return null. }
false;public;0;50;;public void testSingleNodesDoNotDiscoverEachOther() throws IOException, InterruptedException {     final TransportService service = internalCluster().getInstance(TransportService.class).     final int port = service.boundAddress().publishAddress().getPort().     final NodeConfigurationSource configurationSource = new NodeConfigurationSource() {          @Override         public Settings nodeSettings(int nodeOrdinal) {             return Settings.builder().put("discovery.type", "single-node").put("transport.type", getTestTransportType()).put("transport.port", port + "-" + (port + 5 - 1)).build().         }          @Override         public Path nodeConfigPath(int nodeOrdinal) {             return null.         }     }.     try (InternalTestCluster other = new InternalTestCluster(randomLong(), createTempDir(), false, false, 1, 1, internalCluster().getClusterName(), configurationSource, 0, "other", Arrays.asList(getTestTransportPlugin(), MockHttpTransport.TestPlugin.class), Function.identity())) {         other.beforeTest(random(), 0).         final ClusterState first = internalCluster().getInstance(ClusterService.class).state().         final ClusterState second = other.getInstance(ClusterService.class).state().         assertThat(first.nodes().getSize(), equalTo(1)).         assertThat(second.nodes().getSize(), equalTo(1)).         assertThat(first.nodes().getMasterNodeId(), not(equalTo(second.nodes().getMasterNodeId()))).         assertThat(first.metaData().clusterUUID(), not(equalTo(second.metaData().clusterUUID()))).     } }
false;public;0;5;;public void testStatePersistence() throws Exception {     createIndex("test").     internalCluster().fullRestart().     assertTrue(client().admin().indices().prepareExists("test").get().isExists()). }
