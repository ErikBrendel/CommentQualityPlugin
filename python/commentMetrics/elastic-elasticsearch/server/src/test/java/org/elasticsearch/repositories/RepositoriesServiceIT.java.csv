commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     return Collections.singletonList(MockRepository.Plugin.class). }
false;public;0;46;;public void testUpdateRepository() {     final InternalTestCluster cluster = internalCluster().     final String repositoryName = "test-repo".     final Client client = client().     final RepositoriesService repositoriesService = cluster.getDataOrMasterNodeInstances(RepositoriesService.class).iterator().next().     final Settings.Builder repoSettings = Settings.builder().put("location", randomRepoPath()).     assertAcked(client.admin().cluster().preparePutRepository(repositoryName).setType(FsRepository.TYPE).setSettings(repoSettings).get()).     final GetRepositoriesResponse originalGetRepositoriesResponse = client.admin().cluster().prepareGetRepositories(repositoryName).get().     assertThat(originalGetRepositoriesResponse.repositories(), hasSize(1)).     RepositoryMetaData originalRepositoryMetaData = originalGetRepositoriesResponse.repositories().get(0).     assertThat(originalRepositoryMetaData.type(), equalTo(FsRepository.TYPE)).     final Repository originalRepository = repositoriesService.repository(repositoryName).     assertThat(originalRepository, instanceOf(FsRepository.class)).     final boolean updated = randomBoolean().     final String updatedRepositoryType = updated ? "mock" : FsRepository.TYPE.     assertAcked(client.admin().cluster().preparePutRepository(repositoryName).setType(updatedRepositoryType).setSettings(repoSettings).get()).     final GetRepositoriesResponse updatedGetRepositoriesResponse = client.admin().cluster().prepareGetRepositories(repositoryName).get().     assertThat(updatedGetRepositoriesResponse.repositories(), hasSize(1)).     final RepositoryMetaData updatedRepositoryMetaData = updatedGetRepositoriesResponse.repositories().get(0).     assertThat(updatedRepositoryMetaData.type(), equalTo(updatedRepositoryType)).     final Repository updatedRepository = repositoriesService.repository(repositoryName).     assertThat(updatedRepository, updated ? not(sameInstance(originalRepository)) : sameInstance(originalRepository)). }
