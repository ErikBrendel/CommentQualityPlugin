commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setupTime() {     long millis = randomIntBetween(0, Integer.MAX_VALUE).     javaTime = new JodaCompatibleZonedDateTime(Instant.ofEpochMilli(millis), ZoneOffset.ofHours(-7)).     jodaTime = new DateTime(millis, DateTimeZone.forOffsetHours(-7)). }
false;public;1;6;;@Override public void append(LogEvent event) {     /* Create a temporary directory to prove we are running with the                  * server's permissions. */     createTempDir(). }
false;;2;24;;void assertDeprecation(Runnable assertions, String message) {     Appender appender = new AbstractAppender("test", null, null) {          @Override         public void append(LogEvent event) {             /* Create a temporary directory to prove we are running with the                  * server's permissions. */             createTempDir().         }     }.     appender.start().     Loggers.addAppender(DEPRECATION_LOGGER, appender).     try {         // the assertions are run with the same reduced privileges scripts run with         AccessController.doPrivileged((PrivilegedAction<Void>) () -> {             assertions.run().             return null.         }, NO_PERMISSIONS_ACC).     } finally {         appender.stop().         Loggers.removeAppender(DEPRECATION_LOGGER, appender).     }     assertWarnings(message). }
false;;3;3;;void assertMethodDeprecation(Runnable assertions, String oldMethod, String newMethod) {     assertDeprecation(assertions, "Use of the joda time method [" + oldMethod + "] is deprecated. Use [" + newMethod + "] instead."). }
false;public;0;3;;public void testEquals() {     assertThat(javaTime, equalTo(javaTime)). }
false;public;0;3;;public void testToString() {     assertThat(javaTime.toString(), equalTo(jodaTime.toString())). }
false;public;0;3;;public void testDayOfMonth() {     assertThat(javaTime.getDayOfMonth(), equalTo(jodaTime.getDayOfMonth())). }
false;public;0;3;;public void testDayOfYear() {     assertThat(javaTime.getDayOfYear(), equalTo(jodaTime.getDayOfYear())). }
false;public;0;3;;public void testHour() {     assertThat(javaTime.getHour(), equalTo(jodaTime.getHourOfDay())). }
false;public;0;3;;public void testLocalDate() {     assertThat(javaTime.toLocalDate(), equalTo(LocalDate.of(jodaTime.getYear(), jodaTime.getMonthOfYear(), jodaTime.getDayOfMonth()))). }
false;public;0;6;;public void testLocalDateTime() {     LocalDateTime dt = LocalDateTime.of(jodaTime.getYear(), jodaTime.getMonthOfYear(), jodaTime.getDayOfMonth(), jodaTime.getHourOfDay(), jodaTime.getMinuteOfHour(), jodaTime.getSecondOfMinute(), jodaTime.getMillisOfSecond() * 1000000).     assertThat(javaTime.toLocalDateTime(), equalTo(dt)). }
false;public;0;3;;public void testMinute() {     assertThat(javaTime.getMinute(), equalTo(jodaTime.getMinuteOfHour())). }
false;public;0;3;;public void testMonth() {     assertThat(javaTime.getMonth(), equalTo(Month.of(jodaTime.getMonthOfYear()))). }
false;public;0;3;;public void testMonthValue() {     assertThat(javaTime.getMonthValue(), equalTo(jodaTime.getMonthOfYear())). }
false;public;0;3;;public void testNano() {     assertThat(javaTime.getNano(), equalTo(jodaTime.getMillisOfSecond() * 1000000)). }
false;public;0;3;;public void testSecond() {     assertThat(javaTime.getSecond(), equalTo(jodaTime.getSecondOfMinute())). }
false;public;0;3;;public void testYear() {     assertThat(javaTime.getYear(), equalTo(jodaTime.getYear())). }
false;public;0;3;;public void testZone() {     assertThat(javaTime.getZone().getId(), equalTo(jodaTime.getZone().getID())). }
false;public;0;4;;public void testMillis() {     assertMethodDeprecation(() -> assertThat(javaTime.getMillis(), equalTo(jodaTime.getMillis())), "getMillis()", "toInstant().toEpochMilli()"). }
false;public;0;4;;public void testCenturyOfEra() {     assertMethodDeprecation(() -> assertThat(javaTime.getCenturyOfEra(), equalTo(jodaTime.getCenturyOfEra())), "getCenturyOfEra()", "get(ChronoField.YEAR_OF_ERA) / 100"). }
false;public;0;4;;public void testEra() {     assertMethodDeprecation(() -> assertThat(javaTime.getEra(), equalTo(jodaTime.getEra())), "getEra()", "get(ChronoField.ERA)"). }
false;public;0;4;;public void testHourOfDay() {     assertMethodDeprecation(() -> assertThat(javaTime.getHourOfDay(), equalTo(jodaTime.getHourOfDay())), "getHourOfDay()", "getHour()"). }
false;public;0;4;;public void testMillisOfDay() {     assertMethodDeprecation(() -> assertThat(javaTime.getMillisOfDay(), equalTo(jodaTime.getMillisOfDay())), "getMillisOfDay()", "get(ChronoField.MILLI_OF_DAY)"). }
false;public;0;4;;public void testMillisOfSecond() {     assertMethodDeprecation(() -> assertThat(javaTime.getMillisOfSecond(), equalTo(jodaTime.getMillisOfSecond())), "getMillisOfSecond()", "get(ChronoField.MILLI_OF_SECOND)"). }
false;public;0;4;;public void testMinuteOfDay() {     assertMethodDeprecation(() -> assertThat(javaTime.getMinuteOfDay(), equalTo(jodaTime.getMinuteOfDay())), "getMinuteOfDay()", "get(ChronoField.MINUTE_OF_DAY)"). }
false;public;0;4;;public void testMinuteOfHour() {     assertMethodDeprecation(() -> assertThat(javaTime.getMinuteOfHour(), equalTo(jodaTime.getMinuteOfHour())), "getMinuteOfHour()", "getMinute()"). }
false;public;0;4;;public void testMonthOfYear() {     assertMethodDeprecation(() -> assertThat(javaTime.getMonthOfYear(), equalTo(jodaTime.getMonthOfYear())), "getMonthOfYear()", "getMonthValue()"). }
false;public;0;4;;public void testSecondOfDay() {     assertMethodDeprecation(() -> assertThat(javaTime.getSecondOfDay(), equalTo(jodaTime.getSecondOfDay())), "getSecondOfDay()", "get(ChronoField.SECOND_OF_DAY)"). }
false;public;0;4;;public void testSecondOfMinute() {     assertMethodDeprecation(() -> assertThat(javaTime.getSecondOfMinute(), equalTo(jodaTime.getSecondOfMinute())), "getSecondOfMinute()", "getSecond()"). }
false;public;0;4;;public void testWeekOfWeekyear() {     assertMethodDeprecation(() -> assertThat(javaTime.getWeekOfWeekyear(), equalTo(jodaTime.getWeekOfWeekyear())), "getWeekOfWeekyear()", "get(WeekFields.ISO.weekOfWeekBasedYear())"). }
false;public;0;4;;public void testWeekyear() {     assertMethodDeprecation(() -> assertThat(javaTime.getWeekyear(), equalTo(jodaTime.getWeekyear())), "getWeekyear()", "get(WeekFields.ISO.weekBasedYear())"). }
false;public;0;4;;public void testYearOfCentury() {     assertMethodDeprecation(() -> assertThat(javaTime.getYearOfCentury(), equalTo(jodaTime.getYearOfCentury())), "getYearOfCentury()", "get(ChronoField.YEAR_OF_ERA) % 100"). }
false;public;0;4;;public void testYearOfEra() {     assertMethodDeprecation(() -> assertThat(javaTime.getYearOfEra(), equalTo(jodaTime.getYearOfEra())), "getYearOfEra()", "get(ChronoField.YEAR_OF_ERA)"). }
false;public;0;4;;public void testToString1() {     assertMethodDeprecation(() -> assertThat(javaTime.toString("YYYY/MM/dd HH:mm:ss.SSS"), equalTo(jodaTime.toString("YYYY/MM/dd HH:mm:ss.SSS"))), "toString(String)", "a DateTimeFormatter"). }
false;public;0;4;;public void testToString2() {     assertMethodDeprecation(() -> assertThat(javaTime.toString("EEE", Locale.GERMANY), equalTo(jodaTime.toString("EEE", Locale.GERMANY))), "toString(String,Locale)", "a DateTimeFormatter"). }
false;public;0;4;;public void testDayOfWeek() {     assertDeprecation(() -> assertThat(javaTime.getDayOfWeek(), equalTo(jodaTime.getDayOfWeek())), "The return type of [getDayOfWeek()] will change to an enum in 7.0. Use getDayOfWeekEnum().getValue()."). }
false;public;0;3;;public void testDayOfWeekEnum() {     assertThat(javaTime.getDayOfWeekEnum(), equalTo(DayOfWeek.of(jodaTime.getDayOfWeek()))). }
false;public;0;4;;public void testToStringWithLocaleAndZeroOffset() {     JodaCompatibleZonedDateTime dt = new JodaCompatibleZonedDateTime(Instant.EPOCH, ZoneOffset.ofTotalSeconds(0)).     assertMethodDeprecation(() -> dt.toString("yyyy-MM-dd hh:mm", Locale.ROOT), "toString(String,Locale)", "a DateTimeFormatter"). }
false;public;0;4;;public void testToStringAndZeroOffset() {     JodaCompatibleZonedDateTime dt = new JodaCompatibleZonedDateTime(Instant.EPOCH, ZoneOffset.ofTotalSeconds(0)).     assertMethodDeprecation(() -> dt.toString("yyyy-MM-dd hh:mm"), "toString(String)", "a DateTimeFormatter"). }
false;public;0;3;;public void testIsEqual() {     assertTrue(javaTime.isEqual(javaTime)). }
false;public;0;7;;public void testIsAfter() {     long millis = randomLongBetween(0, Integer.MAX_VALUE / 2).     JodaCompatibleZonedDateTime beforeTime = new JodaCompatibleZonedDateTime(Instant.ofEpochMilli(millis), ZoneOffset.ofHours(-7)).     millis = randomLongBetween(millis + 1, Integer.MAX_VALUE).     JodaCompatibleZonedDateTime afterTime = new JodaCompatibleZonedDateTime(Instant.ofEpochMilli(millis), ZoneOffset.ofHours(-7)).     assertTrue(afterTime.isAfter(beforeTime)). }
false;public;0;7;;public void testIsBefore() {     long millis = randomLongBetween(0, Integer.MAX_VALUE / 2).     JodaCompatibleZonedDateTime beforeTime = new JodaCompatibleZonedDateTime(Instant.ofEpochMilli(millis), ZoneOffset.ofHours(-7)).     millis = randomLongBetween(millis + 1, Integer.MAX_VALUE).     JodaCompatibleZonedDateTime afterTime = new JodaCompatibleZonedDateTime(Instant.ofEpochMilli(millis), ZoneOffset.ofHours(-7)).     assertTrue(beforeTime.isBefore(afterTime)). }
