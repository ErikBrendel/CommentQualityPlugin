commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void onResponse(MainResponse mainResponse) {     responseRef.set(mainResponse). }
false;public;1;4;;@Override public void onFailure(Exception e) {     logger.error("unexpected error", e). }
false;public;0;42;;public void testMainActionClusterAvailable() {     final ClusterService clusterService = mock(ClusterService.class).     final ClusterName clusterName = new ClusterName("elasticsearch").     final Settings settings = Settings.builder().put("node.name", "my-node").build().     ClusterBlocks blocks.     if (randomBoolean()) {         if (randomBoolean()) {             blocks = ClusterBlocks.EMPTY_CLUSTER_BLOCK.         } else {             blocks = ClusterBlocks.builder().addGlobalBlock(new ClusterBlock(randomIntBetween(1, 16), "test global block 400", randomBoolean(), randomBoolean(), false, RestStatus.BAD_REQUEST, ClusterBlockLevel.ALL)).build().         }     } else {         blocks = ClusterBlocks.builder().addGlobalBlock(new ClusterBlock(randomIntBetween(1, 16), "test global block 503", randomBoolean(), randomBoolean(), false, RestStatus.SERVICE_UNAVAILABLE, ClusterBlockLevel.ALL)).build().     }     ClusterState state = ClusterState.builder(clusterName).blocks(blocks).build().     when(clusterService.state()).thenReturn(state).     TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null, TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> null, null, Collections.emptySet()).     TransportMainAction action = new TransportMainAction(settings, transportService, mock(ActionFilters.class), clusterService).     AtomicReference<MainResponse> responseRef = new AtomicReference<>().     action.doExecute(mock(Task.class), new MainRequest(), new ActionListener<MainResponse>() {          @Override         public void onResponse(MainResponse mainResponse) {             responseRef.set(mainResponse).         }          @Override         public void onFailure(Exception e) {             logger.error("unexpected error", e).         }     }).     assertNotNull(responseRef.get()).     verify(clusterService, times(1)).state(). }
