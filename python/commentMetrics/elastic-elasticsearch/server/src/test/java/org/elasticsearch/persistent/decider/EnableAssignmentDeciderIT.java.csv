commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     return singletonList(TestPersistentTasksPlugin.class). }
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> transportClientPlugins() {     return nodePlugins(). }
false;protected;0;4;;@Override protected boolean ignoreExternalCluster() {     return true. }
false;public;1;4;;@Override public void onResponse(PersistentTask<PersistentTaskParams> task) {     latch.countDown(). }
false;public;1;4;;@Override public void onFailure(Exception e) {     latch.countDown(). }
true;public;0;75;/**  * Test that the {@link EnableAssignmentDecider#CLUSTER_TASKS_ALLOCATION_ENABLE_SETTING} setting correctly  * prevents persistent tasks to be assigned after a cluster restart.  */ ;/**  * Test that the {@link EnableAssignmentDecider#CLUSTER_TASKS_ALLOCATION_ENABLE_SETTING} setting correctly  * prevents persistent tasks to be assigned after a cluster restart.  */ public void testEnableAssignmentAfterRestart() throws Exception {     final int numberOfTasks = randomIntBetween(1, 10).     logger.trace("creating {} persistent tasks", numberOfTasks).     final CountDownLatch latch = new CountDownLatch(numberOfTasks).     for (int i = 0. i < numberOfTasks. i++) {         PersistentTasksService service = internalCluster().getInstance(PersistentTasksService.class).         service.sendStartRequest("task_" + i, TestPersistentTasksExecutor.NAME, new TestParams(randomAlphaOfLength(10)), new ActionListener<PersistentTask<PersistentTaskParams>>() {              @Override             public void onResponse(PersistentTask<PersistentTaskParams> task) {                 latch.countDown().             }              @Override             public void onFailure(Exception e) {                 latch.countDown().             }         }).     }     latch.await().     ClusterService clusterService = internalCluster().clusterService(internalCluster().getMasterName()).     PersistentTasksCustomMetaData tasks = clusterService.state().getMetaData().custom(PersistentTasksCustomMetaData.TYPE).     assertEquals(numberOfTasks, tasks.tasks().stream().filter(t -> TestPersistentTasksExecutor.NAME.equals(t.getTaskName())).count()).     logger.trace("waiting for the tasks to be running").     assertBusy(() -> {         ListTasksResponse listTasks = client().admin().cluster().prepareListTasks().setActions(TestPersistentTasksExecutor.NAME + "[c]").get().         assertThat(listTasks.getTasks().size(), equalTo(numberOfTasks)).     }).     try {         logger.trace("disable persistent tasks assignment").         disablePersistentTasksAssignment().         logger.trace("restart the cluster").         internalCluster().fullRestart().         ensureYellow().         logger.trace("persistent tasks assignment is still disabled").         assertEnableAssignmentSetting(Allocation.NONE).         logger.trace("persistent tasks are not assigned").         tasks = internalCluster().clusterService().state().getMetaData().custom(PersistentTasksCustomMetaData.TYPE).         assertEquals(numberOfTasks, tasks.tasks().stream().filter(t -> TestPersistentTasksExecutor.NAME.equals(t.getTaskName())).filter(t -> t.isAssigned() == false).count()).         ListTasksResponse runningTasks = client().admin().cluster().prepareListTasks().setActions(TestPersistentTasksExecutor.NAME + "[c]").get().         assertThat(runningTasks.getTasks().size(), equalTo(0)).         logger.trace("enable persistent tasks assignment").         if (randomBoolean()) {             enablePersistentTasksAssignment().         } else {             resetPersistentTasksAssignment().         }         assertBusy(() -> {             ListTasksResponse listTasks = client().admin().cluster().prepareListTasks().setActions(TestPersistentTasksExecutor.NAME + "[c]").get().             assertThat(listTasks.getTasks().size(), equalTo(numberOfTasks)).         }).     } finally {         resetPersistentTasksAssignment().     } }
false;private;1;7;;private void assertEnableAssignmentSetting(final Allocation expected) {     ClusterStateResponse clusterStateResponse = client().admin().cluster().prepareState().clear().setMetaData(true).get().     Settings settings = clusterStateResponse.getState().getMetaData().settings().     String value = settings.get(CLUSTER_TASKS_ALLOCATION_ENABLE_SETTING.getKey()).     assertThat(Allocation.fromString(value), equalTo(expected)). }
false;private;0;4;;private void disablePersistentTasksAssignment() {     Settings.Builder settings = Settings.builder().put(CLUSTER_TASKS_ALLOCATION_ENABLE_SETTING.getKey(), Allocation.NONE).     assertAcked(client().admin().cluster().prepareUpdateSettings().setPersistentSettings(settings)). }
false;private;0;4;;private void enablePersistentTasksAssignment() {     Settings.Builder settings = Settings.builder().put(CLUSTER_TASKS_ALLOCATION_ENABLE_SETTING.getKey(), Allocation.ALL).     assertAcked(client().admin().cluster().prepareUpdateSettings().setPersistentSettings(settings)). }
false;private;0;4;;private void resetPersistentTasksAssignment() {     Settings.Builder settings = Settings.builder().putNull(CLUSTER_TASKS_ALLOCATION_ENABLE_SETTING.getKey()).     assertAcked(client().admin().cluster().prepareUpdateSettings().setPersistentSettings(settings)). }
