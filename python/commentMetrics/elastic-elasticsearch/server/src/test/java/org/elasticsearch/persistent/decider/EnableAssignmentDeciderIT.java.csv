# id;timestamp;commentText;codeText;commentWords;codeWords
EnableAssignmentDeciderIT -> public void testEnableAssignmentAfterRestart() throws Exception;1524684173;Test that the {@link EnableAssignmentDecider#CLUSTER_TASKS_ALLOCATION_ENABLE_SETTING} setting correctly_prevents persistent tasks to be assigned after a cluster restart.;public void testEnableAssignmentAfterRestart() throws Exception {_        final int numberOfTasks = randomIntBetween(1, 10)__        logger.trace("creating {} persistent tasks", numberOfTasks)___        final CountDownLatch latch = new CountDownLatch(numberOfTasks)__        for (int i = 0_ i < numberOfTasks_ i++) {_            PersistentTasksService service = internalCluster().getInstance(PersistentTasksService.class)__            service.startPersistentTask("task_" + i, TestPersistentTasksExecutor.NAME, randomTaskParams(),_                new ActionListener<PersistentTask<PersistentTaskParams>>() {_                    @Override_                    public void onResponse(PersistentTask<PersistentTaskParams> task) {_                        latch.countDown()__                    }__                    @Override_                    public void onFailure(Exception e) {_                        latch.countDown()__                    }_                })__        }_        latch.await()___        ClusterService clusterService = internalCluster().clusterService(internalCluster().getMasterName())__        PersistentTasksCustomMetaData tasks = clusterService.state().getMetaData().custom(PersistentTasksCustomMetaData.TYPE)__        assertEquals(numberOfTasks, tasks.tasks().stream().filter(t -> TestPersistentTasksExecutor.NAME.equals(t.getTaskName())).count())___        logger.trace("waiting for the tasks to be running")__        assertBusy(() -> {_            ListTasksResponse listTasks = client().admin().cluster().prepareListTasks()_                                                                    .setActions(TestPersistentTasksExecutor.NAME + "[c]")_                                                                    .get()__            assertThat(listTasks.getTasks().size(), equalTo(numberOfTasks))__        })___        try {_            logger.trace("disable persistent tasks assignment")__            disablePersistentTasksAssignment()___            logger.trace("restart the cluster")__            internalCluster().fullRestart()__            ensureYellow()___            logger.trace("persistent tasks assignment is still disabled")__            assertEnableAssignmentSetting(Allocation.NONE)___            logger.trace("persistent tasks are not assigned")__            tasks = internalCluster().clusterService().state().getMetaData().custom(PersistentTasksCustomMetaData.TYPE)__            assertEquals(numberOfTasks, tasks.tasks().stream()_                .filter(t -> TestPersistentTasksExecutor.NAME.equals(t.getTaskName()))_                .filter(t -> t.isAssigned() == false)_                .count())___            ListTasksResponse runningTasks = client().admin().cluster().prepareListTasks()_                .setActions(TestPersistentTasksExecutor.NAME + "[c]")_                .get()__            assertThat(runningTasks.getTasks().size(), equalTo(0))___            logger.trace("enable persistent tasks assignment")__            if (randomBoolean()) {_                enablePersistentTasksAssignment()__            } else {_                resetPersistentTasksAssignment()__            }__            assertBusy(() -> {_                ListTasksResponse listTasks = client().admin().cluster().prepareListTasks()_                    .setActions(TestPersistentTasksExecutor.NAME + "[c]")_                    .get()__                assertThat(listTasks.getTasks().size(), equalTo(numberOfTasks))__            })___        } finally {_            resetPersistentTasksAssignment()__        }_    };test,that,the,link,enable,assignment,decider,setting,correctly,prevents,persistent,tasks,to,be,assigned,after,a,cluster,restart;public,void,test,enable,assignment,after,restart,throws,exception,final,int,number,of,tasks,random,int,between,1,10,logger,trace,creating,persistent,tasks,number,of,tasks,final,count,down,latch,latch,new,count,down,latch,number,of,tasks,for,int,i,0,i,number,of,tasks,i,persistent,tasks,service,service,internal,cluster,get,instance,persistent,tasks,service,class,service,start,persistent,task,i,test,persistent,tasks,executor,name,random,task,params,new,action,listener,persistent,task,persistent,task,params,override,public,void,on,response,persistent,task,persistent,task,params,task,latch,count,down,override,public,void,on,failure,exception,e,latch,count,down,latch,await,cluster,service,cluster,service,internal,cluster,cluster,service,internal,cluster,get,master,name,persistent,tasks,custom,meta,data,tasks,cluster,service,state,get,meta,data,custom,persistent,tasks,custom,meta,data,type,assert,equals,number,of,tasks,tasks,tasks,stream,filter,t,test,persistent,tasks,executor,name,equals,t,get,task,name,count,logger,trace,waiting,for,the,tasks,to,be,running,assert,busy,list,tasks,response,list,tasks,client,admin,cluster,prepare,list,tasks,set,actions,test,persistent,tasks,executor,name,c,get,assert,that,list,tasks,get,tasks,size,equal,to,number,of,tasks,try,logger,trace,disable,persistent,tasks,assignment,disable,persistent,tasks,assignment,logger,trace,restart,the,cluster,internal,cluster,full,restart,ensure,yellow,logger,trace,persistent,tasks,assignment,is,still,disabled,assert,enable,assignment,setting,allocation,none,logger,trace,persistent,tasks,are,not,assigned,tasks,internal,cluster,cluster,service,state,get,meta,data,custom,persistent,tasks,custom,meta,data,type,assert,equals,number,of,tasks,tasks,tasks,stream,filter,t,test,persistent,tasks,executor,name,equals,t,get,task,name,filter,t,t,is,assigned,false,count,list,tasks,response,running,tasks,client,admin,cluster,prepare,list,tasks,set,actions,test,persistent,tasks,executor,name,c,get,assert,that,running,tasks,get,tasks,size,equal,to,0,logger,trace,enable,persistent,tasks,assignment,if,random,boolean,enable,persistent,tasks,assignment,else,reset,persistent,tasks,assignment,assert,busy,list,tasks,response,list,tasks,client,admin,cluster,prepare,list,tasks,set,actions,test,persistent,tasks,executor,name,c,get,assert,that,list,tasks,get,tasks,size,equal,to,number,of,tasks,finally,reset,persistent,tasks,assignment
EnableAssignmentDeciderIT -> public void testEnableAssignmentAfterRestart() throws Exception;1527773340;Test that the {@link EnableAssignmentDecider#CLUSTER_TASKS_ALLOCATION_ENABLE_SETTING} setting correctly_prevents persistent tasks to be assigned after a cluster restart.;public void testEnableAssignmentAfterRestart() throws Exception {_        final int numberOfTasks = randomIntBetween(1, 10)__        logger.trace("creating {} persistent tasks", numberOfTasks)___        final CountDownLatch latch = new CountDownLatch(numberOfTasks)__        for (int i = 0_ i < numberOfTasks_ i++) {_            PersistentTasksService service = internalCluster().getInstance(PersistentTasksService.class)__            service.sendStartRequest("task_" + i, TestPersistentTasksExecutor.NAME, randomTaskParams(),_                new ActionListener<PersistentTask<PersistentTaskParams>>() {_                    @Override_                    public void onResponse(PersistentTask<PersistentTaskParams> task) {_                        latch.countDown()__                    }__                    @Override_                    public void onFailure(Exception e) {_                        latch.countDown()__                    }_                })__        }_        latch.await()___        ClusterService clusterService = internalCluster().clusterService(internalCluster().getMasterName())__        PersistentTasksCustomMetaData tasks = clusterService.state().getMetaData().custom(PersistentTasksCustomMetaData.TYPE)__        assertEquals(numberOfTasks, tasks.tasks().stream().filter(t -> TestPersistentTasksExecutor.NAME.equals(t.getTaskName())).count())___        logger.trace("waiting for the tasks to be running")__        assertBusy(() -> {_            ListTasksResponse listTasks = client().admin().cluster().prepareListTasks()_                                                                    .setActions(TestPersistentTasksExecutor.NAME + "[c]")_                                                                    .get()__            assertThat(listTasks.getTasks().size(), equalTo(numberOfTasks))__        })___        try {_            logger.trace("disable persistent tasks assignment")__            disablePersistentTasksAssignment()___            logger.trace("restart the cluster")__            internalCluster().fullRestart()__            ensureYellow()___            logger.trace("persistent tasks assignment is still disabled")__            assertEnableAssignmentSetting(Allocation.NONE)___            logger.trace("persistent tasks are not assigned")__            tasks = internalCluster().clusterService().state().getMetaData().custom(PersistentTasksCustomMetaData.TYPE)__            assertEquals(numberOfTasks, tasks.tasks().stream()_                .filter(t -> TestPersistentTasksExecutor.NAME.equals(t.getTaskName()))_                .filter(t -> t.isAssigned() == false)_                .count())___            ListTasksResponse runningTasks = client().admin().cluster().prepareListTasks()_                .setActions(TestPersistentTasksExecutor.NAME + "[c]")_                .get()__            assertThat(runningTasks.getTasks().size(), equalTo(0))___            logger.trace("enable persistent tasks assignment")__            if (randomBoolean()) {_                enablePersistentTasksAssignment()__            } else {_                resetPersistentTasksAssignment()__            }__            assertBusy(() -> {_                ListTasksResponse listTasks = client().admin().cluster().prepareListTasks()_                    .setActions(TestPersistentTasksExecutor.NAME + "[c]")_                    .get()__                assertThat(listTasks.getTasks().size(), equalTo(numberOfTasks))__            })___        } finally {_            resetPersistentTasksAssignment()__        }_    };test,that,the,link,enable,assignment,decider,setting,correctly,prevents,persistent,tasks,to,be,assigned,after,a,cluster,restart;public,void,test,enable,assignment,after,restart,throws,exception,final,int,number,of,tasks,random,int,between,1,10,logger,trace,creating,persistent,tasks,number,of,tasks,final,count,down,latch,latch,new,count,down,latch,number,of,tasks,for,int,i,0,i,number,of,tasks,i,persistent,tasks,service,service,internal,cluster,get,instance,persistent,tasks,service,class,service,send,start,request,i,test,persistent,tasks,executor,name,random,task,params,new,action,listener,persistent,task,persistent,task,params,override,public,void,on,response,persistent,task,persistent,task,params,task,latch,count,down,override,public,void,on,failure,exception,e,latch,count,down,latch,await,cluster,service,cluster,service,internal,cluster,cluster,service,internal,cluster,get,master,name,persistent,tasks,custom,meta,data,tasks,cluster,service,state,get,meta,data,custom,persistent,tasks,custom,meta,data,type,assert,equals,number,of,tasks,tasks,tasks,stream,filter,t,test,persistent,tasks,executor,name,equals,t,get,task,name,count,logger,trace,waiting,for,the,tasks,to,be,running,assert,busy,list,tasks,response,list,tasks,client,admin,cluster,prepare,list,tasks,set,actions,test,persistent,tasks,executor,name,c,get,assert,that,list,tasks,get,tasks,size,equal,to,number,of,tasks,try,logger,trace,disable,persistent,tasks,assignment,disable,persistent,tasks,assignment,logger,trace,restart,the,cluster,internal,cluster,full,restart,ensure,yellow,logger,trace,persistent,tasks,assignment,is,still,disabled,assert,enable,assignment,setting,allocation,none,logger,trace,persistent,tasks,are,not,assigned,tasks,internal,cluster,cluster,service,state,get,meta,data,custom,persistent,tasks,custom,meta,data,type,assert,equals,number,of,tasks,tasks,tasks,stream,filter,t,test,persistent,tasks,executor,name,equals,t,get,task,name,filter,t,t,is,assigned,false,count,list,tasks,response,running,tasks,client,admin,cluster,prepare,list,tasks,set,actions,test,persistent,tasks,executor,name,c,get,assert,that,running,tasks,get,tasks,size,equal,to,0,logger,trace,enable,persistent,tasks,assignment,if,random,boolean,enable,persistent,tasks,assignment,else,reset,persistent,tasks,assignment,assert,busy,list,tasks,response,list,tasks,client,admin,cluster,prepare,list,tasks,set,actions,test,persistent,tasks,executor,name,c,get,assert,that,list,tasks,get,tasks,size,equal,to,number,of,tasks,finally,reset,persistent,tasks,assignment
EnableAssignmentDeciderIT -> public void testEnableAssignmentAfterRestart() throws Exception;1528103657;Test that the {@link EnableAssignmentDecider#CLUSTER_TASKS_ALLOCATION_ENABLE_SETTING} setting correctly_prevents persistent tasks to be assigned after a cluster restart.;public void testEnableAssignmentAfterRestart() throws Exception {_        final int numberOfTasks = randomIntBetween(1, 10)__        logger.trace("creating {} persistent tasks", numberOfTasks)___        final CountDownLatch latch = new CountDownLatch(numberOfTasks)__        for (int i = 0_ i < numberOfTasks_ i++) {_            PersistentTasksService service = internalCluster().getInstance(PersistentTasksService.class)__            service.sendStartRequest("task_" + i, TestPersistentTasksExecutor.NAME, new TestParams(randomAlphaOfLength(10)),_                new ActionListener<PersistentTask<PersistentTaskParams>>() {_                    @Override_                    public void onResponse(PersistentTask<PersistentTaskParams> task) {_                        latch.countDown()__                    }__                    @Override_                    public void onFailure(Exception e) {_                        latch.countDown()__                    }_                })__        }_        latch.await()___        ClusterService clusterService = internalCluster().clusterService(internalCluster().getMasterName())__        PersistentTasksCustomMetaData tasks = clusterService.state().getMetaData().custom(PersistentTasksCustomMetaData.TYPE)__        assertEquals(numberOfTasks, tasks.tasks().stream().filter(t -> TestPersistentTasksExecutor.NAME.equals(t.getTaskName())).count())___        logger.trace("waiting for the tasks to be running")__        assertBusy(() -> {_            ListTasksResponse listTasks = client().admin().cluster().prepareListTasks()_                                                                    .setActions(TestPersistentTasksExecutor.NAME + "[c]")_                                                                    .get()__            assertThat(listTasks.getTasks().size(), equalTo(numberOfTasks))__        })___        try {_            logger.trace("disable persistent tasks assignment")__            disablePersistentTasksAssignment()___            logger.trace("restart the cluster")__            internalCluster().fullRestart()__            ensureYellow()___            logger.trace("persistent tasks assignment is still disabled")__            assertEnableAssignmentSetting(Allocation.NONE)___            logger.trace("persistent tasks are not assigned")__            tasks = internalCluster().clusterService().state().getMetaData().custom(PersistentTasksCustomMetaData.TYPE)__            assertEquals(numberOfTasks, tasks.tasks().stream()_                .filter(t -> TestPersistentTasksExecutor.NAME.equals(t.getTaskName()))_                .filter(t -> t.isAssigned() == false)_                .count())___            ListTasksResponse runningTasks = client().admin().cluster().prepareListTasks()_                .setActions(TestPersistentTasksExecutor.NAME + "[c]")_                .get()__            assertThat(runningTasks.getTasks().size(), equalTo(0))___            logger.trace("enable persistent tasks assignment")__            if (randomBoolean()) {_                enablePersistentTasksAssignment()__            } else {_                resetPersistentTasksAssignment()__            }__            assertBusy(() -> {_                ListTasksResponse listTasks = client().admin().cluster().prepareListTasks()_                    .setActions(TestPersistentTasksExecutor.NAME + "[c]")_                    .get()__                assertThat(listTasks.getTasks().size(), equalTo(numberOfTasks))__            })___        } finally {_            resetPersistentTasksAssignment()__        }_    };test,that,the,link,enable,assignment,decider,setting,correctly,prevents,persistent,tasks,to,be,assigned,after,a,cluster,restart;public,void,test,enable,assignment,after,restart,throws,exception,final,int,number,of,tasks,random,int,between,1,10,logger,trace,creating,persistent,tasks,number,of,tasks,final,count,down,latch,latch,new,count,down,latch,number,of,tasks,for,int,i,0,i,number,of,tasks,i,persistent,tasks,service,service,internal,cluster,get,instance,persistent,tasks,service,class,service,send,start,request,i,test,persistent,tasks,executor,name,new,test,params,random,alpha,of,length,10,new,action,listener,persistent,task,persistent,task,params,override,public,void,on,response,persistent,task,persistent,task,params,task,latch,count,down,override,public,void,on,failure,exception,e,latch,count,down,latch,await,cluster,service,cluster,service,internal,cluster,cluster,service,internal,cluster,get,master,name,persistent,tasks,custom,meta,data,tasks,cluster,service,state,get,meta,data,custom,persistent,tasks,custom,meta,data,type,assert,equals,number,of,tasks,tasks,tasks,stream,filter,t,test,persistent,tasks,executor,name,equals,t,get,task,name,count,logger,trace,waiting,for,the,tasks,to,be,running,assert,busy,list,tasks,response,list,tasks,client,admin,cluster,prepare,list,tasks,set,actions,test,persistent,tasks,executor,name,c,get,assert,that,list,tasks,get,tasks,size,equal,to,number,of,tasks,try,logger,trace,disable,persistent,tasks,assignment,disable,persistent,tasks,assignment,logger,trace,restart,the,cluster,internal,cluster,full,restart,ensure,yellow,logger,trace,persistent,tasks,assignment,is,still,disabled,assert,enable,assignment,setting,allocation,none,logger,trace,persistent,tasks,are,not,assigned,tasks,internal,cluster,cluster,service,state,get,meta,data,custom,persistent,tasks,custom,meta,data,type,assert,equals,number,of,tasks,tasks,tasks,stream,filter,t,test,persistent,tasks,executor,name,equals,t,get,task,name,filter,t,t,is,assigned,false,count,list,tasks,response,running,tasks,client,admin,cluster,prepare,list,tasks,set,actions,test,persistent,tasks,executor,name,c,get,assert,that,running,tasks,get,tasks,size,equal,to,0,logger,trace,enable,persistent,tasks,assignment,if,random,boolean,enable,persistent,tasks,assignment,else,reset,persistent,tasks,assignment,assert,busy,list,tasks,response,list,tasks,client,admin,cluster,prepare,list,tasks,set,actions,test,persistent,tasks,executor,name,c,get,assert,that,list,tasks,get,tasks,size,equal,to,number,of,tasks,finally,reset,persistent,tasks,assignment
EnableAssignmentDeciderIT -> private static PersistentTaskParams randomTaskParams();1524684173;Returns a random task parameter *;private static PersistentTaskParams randomTaskParams() {_        if (randomBoolean()) {_            return null__        }_        return new TestParams(randomAlphaOfLength(10))__    };returns,a,random,task,parameter;private,static,persistent,task,params,random,task,params,if,random,boolean,return,null,return,new,test,params,random,alpha,of,length,10
EnableAssignmentDeciderIT -> private static PersistentTaskParams randomTaskParams();1527773340;Returns a random task parameter *;private static PersistentTaskParams randomTaskParams() {_        if (randomBoolean()) {_            return null__        }_        return new TestParams(randomAlphaOfLength(10))__    };returns,a,random,task,parameter;private,static,persistent,task,params,random,task,params,if,random,boolean,return,null,return,new,test,params,random,alpha,of,length,10
