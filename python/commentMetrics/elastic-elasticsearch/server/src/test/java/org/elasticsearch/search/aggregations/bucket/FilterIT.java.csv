commented;modifiers;parameterAmount;loc;comment;code
false;public;0;37;;@Override public void setupSuiteScopeCluster() throws Exception {     createIndex("idx").     createIndex("idx2").     numDocs = randomIntBetween(5, 20).     numTag1Docs = randomIntBetween(1, numDocs - 1).     List<IndexRequestBuilder> builders = new ArrayList<>().     for (int i = 0. i < numTag1Docs. i++) {         builders.add(client().prepareIndex("idx", "type", "" + i).setSource(jsonBuilder().startObject().field("value", i + 1).field("tag", "tag1").endObject())).     }     for (int i = numTag1Docs. i < numDocs. i++) {         XContentBuilder source = jsonBuilder().startObject().field("value", i).field("tag", "tag2").field("name", "name" + i).endObject().         builders.add(client().prepareIndex("idx", "type", "" + i).setSource(source)).         if (randomBoolean()) {             // randomly index the document twice so that we have deleted docs that match the filter             builders.add(client().prepareIndex("idx", "type", "" + i).setSource(source)).         }     }     prepareCreate("empty_bucket_idx").addMapping("type", "value", "type=integer").get().     for (int i = 0. i < 2. i++) {         builders.add(client().prepareIndex("empty_bucket_idx", "type", "" + i).setSource(jsonBuilder().startObject().field("value", i * 2).endObject())).     }     indexRandom(true, builders).     ensureSearchable(). }
false;public;0;13;;public void testSimple() throws Exception {     SearchResponse response = client().prepareSearch("idx").addAggregation(filter("tag1", termQuery("tag", "tag1"))).get().     assertSearchResponse(response).     Filter filter = response.getAggregations().get("tag1").     assertThat(filter, notNullValue()).     assertThat(filter.getName(), equalTo("tag1")).     assertThat(filter.getDocCount(), equalTo((long) numTag1Docs)). }
true;public;0;10;// https://github.com/elastic/elasticsearch/issues/8438 ;// See NullPointer issue when filters are empty: // https://github.com/elastic/elasticsearch/issues/8438 public void testEmptyFilterDeclarations() throws Exception {     QueryBuilder emptyFilter = new BoolQueryBuilder().     SearchResponse response = client().prepareSearch("idx").addAggregation(filter("tag1", emptyFilter)).get().     assertSearchResponse(response).     Filter filter = response.getAggregations().get("tag1").     assertThat(filter, notNullValue()).     assertThat(filter.getDocCount(), equalTo((long) numDocs)). }
false;public;0;26;;public void testWithSubAggregation() throws Exception {     SearchResponse response = client().prepareSearch("idx").addAggregation(filter("tag1", termQuery("tag", "tag1")).subAggregation(avg("avg_value").field("value"))).get().     assertSearchResponse(response).     Filter filter = response.getAggregations().get("tag1").     assertThat(filter, notNullValue()).     assertThat(filter.getName(), equalTo("tag1")).     assertThat(filter.getDocCount(), equalTo((long) numTag1Docs)).     assertThat((long) ((InternalAggregation) filter).getProperty("_count"), equalTo((long) numTag1Docs)).     long sum = 0.     for (int i = 0. i < numTag1Docs. ++i) {         sum += i + 1.     }     assertThat(filter.getAggregations().asList().isEmpty(), is(false)).     Avg avgValue = filter.getAggregations().get("avg_value").     assertThat(avgValue, notNullValue()).     assertThat(avgValue.getName(), equalTo("avg_value")).     assertThat(avgValue.getValue(), equalTo((double) sum / numTag1Docs)).     assertThat((double) ((InternalAggregation) filter).getProperty("avg_value.value"), equalTo((double) sum / numTag1Docs)). }
false;public;0;18;;public void testAsSubAggregation() {     SearchResponse response = client().prepareSearch("idx").addAggregation(histogram("histo").field("value").interval(2L).subAggregation(filter("filter", matchAllQuery()))).get().     assertSearchResponse(response).     Histogram histo = response.getAggregations().get("histo").     assertThat(histo, notNullValue()).     assertThat(histo.getBuckets().size(), greaterThanOrEqualTo(1)).     for (Histogram.Bucket bucket : histo.getBuckets()) {         Filter filter = bucket.getAggregations().get("filter").         assertThat(filter, notNullValue()).         assertEquals(bucket.getDocCount(), filter.getDocCount()).     } }
false;public;0;14;;public void testWithContextBasedSubAggregation() throws Exception {     try {         client().prepareSearch("idx").addAggregation(filter("tag1", termQuery("tag", "tag1")).subAggregation(avg("avg_value"))).get().         fail("expected execution to fail - an attempt to have a context based numeric sub-aggregation, but there is not value source" + "context which the sub-aggregation can inherit").     } catch (ElasticsearchException e) {         assertThat(e.getMessage(), is("all shards failed")).     } }
false;public;0;18;;public void testEmptyAggregation() throws Exception {     SearchResponse searchResponse = client().prepareSearch("empty_bucket_idx").setQuery(matchAllQuery()).addAggregation(histogram("histo").field("value").interval(1L).minDocCount(0).subAggregation(filter("filter", matchAllQuery()))).get().     assertThat(searchResponse.getHits().getTotalHits().value, equalTo(2L)).     Histogram histo = searchResponse.getAggregations().get("histo").     assertThat(histo, Matchers.notNullValue()).     Histogram.Bucket bucket = histo.getBuckets().get(1).     assertThat(bucket, Matchers.notNullValue()).     Filter filter = bucket.getAggregations().get("filter").     assertThat(filter, Matchers.notNullValue()).     assertThat(filter.getName(), equalTo("filter")).     assertThat(filter.getDocCount(), is(0L)). }
