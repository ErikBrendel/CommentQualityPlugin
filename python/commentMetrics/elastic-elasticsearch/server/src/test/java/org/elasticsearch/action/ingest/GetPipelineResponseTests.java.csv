commented;modifiers;parameterAmount;loc;comment;code
false;private;0;4;;private XContentBuilder getRandomXContentBuilder() throws IOException {     XContentType xContentType = randomFrom(XContentType.values()).     return XContentBuilder.builder(xContentType.xContent()). }
false;private;1;17;;private PipelineConfiguration createRandomPipeline(String pipelineId) throws IOException {     String field = "field_" + randomInt().     String value = "value_" + randomInt().     XContentBuilder builder = getRandomXContentBuilder().     builder.startObject().     // We only use a single SetProcessor here in each pipeline to test.     // Since the contents are returned as a configMap anyway this does not matter for fromXContent     builder.startObject("set").     builder.field("field", field).     builder.field("value", value).     builder.endObject().     builder.endObject().     return new PipelineConfiguration(pipelineId, BytesReference.bytes(builder), builder.contentType()). }
false;private;0;9;;private Map<String, PipelineConfiguration> createPipelineConfigMap() throws IOException {     int numPipelines = randomInt(5).     Map<String, PipelineConfiguration> pipelinesMap = new HashMap<>().     for (int i = 0. i < numPipelines. i++) {         String pipelineId = "pipeline_" + i.         pipelinesMap.put(pipelineId, createRandomPipeline(pipelineId)).     }     return pipelinesMap. }
false;public;0;23;;public void testXContentDeserialization() throws IOException {     Map<String, PipelineConfiguration> pipelinesMap = createPipelineConfigMap().     GetPipelineResponse response = new GetPipelineResponse(new ArrayList<>(pipelinesMap.values())).     XContentBuilder builder = response.toXContent(getRandomXContentBuilder(), ToXContent.EMPTY_PARAMS).     XContentParser parser = builder.generator().contentType().xContent().createParser(xContentRegistry(), LoggingDeprecationHandler.INSTANCE, BytesReference.bytes(builder).streamInput()).     GetPipelineResponse parsedResponse = GetPipelineResponse.fromXContent(parser).     List<PipelineConfiguration> actualPipelines = response.pipelines().     List<PipelineConfiguration> parsedPipelines = parsedResponse.pipelines().     assertEquals(actualPipelines.size(), parsedPipelines.size()).     for (PipelineConfiguration pipeline : parsedPipelines) {         assertTrue(pipelinesMap.containsKey(pipeline.getId())).         assertEquals(pipelinesMap.get(pipeline.getId()).getConfigAsMap(), pipeline.getConfigAsMap()).     } }
false;protected;1;4;;@Override protected GetPipelineResponse doParseInstance(XContentParser parser) throws IOException {     return GetPipelineResponse.fromXContent(parser). }
false;protected;0;4;;@Override protected GetPipelineResponse createBlankInstance() {     return new GetPipelineResponse(). }
false;protected;0;8;;@Override protected GetPipelineResponse createTestInstance() {     try {         return new GetPipelineResponse(new ArrayList<>(createPipelineConfigMap().values())).     } catch (IOException e) {         throw new UncheckedIOException(e).     } }
false;protected;0;4;;@Override protected boolean supportsUnknownFields() {     return false. }
false;protected;1;10;;@Override protected GetPipelineResponse mutateInstance(GetPipelineResponse response) {     try {         List<PipelineConfiguration> clonePipelines = new ArrayList<>(response.pipelines()).         clonePipelines.add(createRandomPipeline("pipeline_" + clonePipelines.size() + 1)).         return new GetPipelineResponse(clonePipelines).     } catch (IOException e) {         throw new UncheckedIOException(e).     } }
