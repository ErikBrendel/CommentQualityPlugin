commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public FakeStringFieldType fieldType() {     return (FakeStringFieldType) super.fieldType(). }
false;public;1;7;;@Override public FakeStringFieldMapper build(BuilderContext context) {     setupFieldType(context).     return new FakeStringFieldMapper(name, fieldType(), defaultFieldType, context.indexSettings(), multiFieldsBuilder.build(this, context), copyTo). }
false;public;3;6;;@Override public Mapper.Builder parse(String fieldName, Map<String, Object> node, ParserContext parserContext) throws MapperParsingException {     FakeStringFieldMapper.Builder builder = new FakeStringFieldMapper.Builder(fieldName).     parseTextField(builder, fieldName, node, parserContext).     return builder. }
false;public;0;3;;public FakeStringFieldType clone() {     return new FakeStringFieldType(this). }
false;public;0;4;;@Override public String typeName() {     return CONTENT_TYPE. }
false;public;1;8;;@Override public Query existsQuery(QueryShardContext context) {     if (hasDocValues()) {         return new DocValuesFieldExistsQuery(name()).     } else {         return new TermQuery(new Term(FieldNamesFieldMapper.NAME, name())).     } }
false;protected;2;21;;@Override protected void parseCreateField(ParseContext context, List<IndexableField> fields) throws IOException {     String value.     if (context.externalValueSet()) {         value = context.externalValue().toString().     } else {         value = context.parser().textOrNull().     }     if (value == null) {         return.     }     if (fieldType().indexOptions() != IndexOptions.NONE || fieldType().stored()) {         Field field = new Field(fieldType().name(), value, fieldType()).         fields.add(field).     }     if (fieldType().hasDocValues()) {         fields.add(new SortedSetDocValuesField(fieldType().name(), new BytesRef(value))).     } }
false;protected;0;4;;@Override protected String contentType() {     return CONTENT_TYPE. }
false;protected;1;4;;@Override protected void doMerge(Mapper mergeWith) {     super.doMerge(mergeWith). }
false;public;0;4;;@Override public FakeStringFieldType fieldType() {     return (FakeStringFieldType) super.fieldType(). }
false;protected;3;5;;@Override protected void doXContentBody(XContentBuilder builder, boolean includeDefaults, Params params) throws IOException {     super.doXContentBody(builder, includeDefaults, params).     doXContentAnalyzers(builder, includeDefaults). }
