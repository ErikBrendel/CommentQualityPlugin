commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;@Override public LeafSearchLookup getLeafSearchLookup(LeafReaderContext context) {     LeafSearchLookup leafSearchLookup = mock(LeafSearchLookup.class).     when(leafSearchLookup.asMap()).thenReturn(Collections.emptyMap()).     return leafSearchLookup. }
false;public;0;9;;@Override public Object execute() {     // Script values are supposed to support null, single values, arrays and collections     final Object[] values = this.values[index].     if (values.length <= 1 && randomBoolean()) {         return values.length == 0 ? null : values[0].     }     return randomBoolean() ? values : Arrays.asList(values). }
false;public;1;3;;@Override public void setScorer(Scorable scorer) { }
false;public;1;4;;@Override public void setDocument(int doc) {     index = doc. }
false;public;0;4;;@Override public long runAsLong() {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public double runAsDouble() {     throw new UnsupportedOperationException(). }
false;public;0;22;;public void testLongs() throws IOException {     final Object[][] values = new Long[randomInt(10)][].     for (int i = 0. i < values.length. ++i) {         Long[] longs = new Long[randomInt(8)].         for (int j = 0. j < longs.length. ++j) {             longs[j] = randomLong().         }         Arrays.sort(longs).         values[i] = longs.     }     FakeAggregationScript script = new FakeAggregationScript(values).     ScriptLongValues scriptValues = new ScriptLongValues(script).     for (int i = 0. i < values.length. ++i) {         assertEquals(values[i].length > 0, scriptValues.advanceExact(i)).         if (values[i].length > 0) {             assertEquals(values[i].length, scriptValues.docValueCount()).             for (int j = 0. j < values[i].length. ++j) {                 assertEquals(values[i][j], scriptValues.nextValue()).             }         }     } }
false;public;0;22;;public void testBooleans() throws IOException {     final Object[][] values = new Boolean[randomInt(10)][].     for (int i = 0. i < values.length. ++i) {         Boolean[] booleans = new Boolean[randomInt(8)].         for (int j = 0. j < booleans.length. ++j) {             booleans[j] = randomBoolean().         }         Arrays.sort(booleans).         values[i] = booleans.     }     FakeAggregationScript script = new FakeAggregationScript(values).     ScriptLongValues scriptValues = new ScriptLongValues(script).     for (int i = 0. i < values.length. ++i) {         assertEquals(values[i].length > 0, scriptValues.advanceExact(i)).         if (values[i].length > 0) {             assertEquals(values[i].length, scriptValues.docValueCount()).             for (int j = 0. j < values[i].length. ++j) {                 assertEquals(values[i][j], scriptValues.nextValue() == 1L).             }         }     } }
false;public;0;22;;public void testDoubles() throws IOException {     final Object[][] values = new Double[randomInt(10)][].     for (int i = 0. i < values.length. ++i) {         Double[] doubles = new Double[randomInt(8)].         for (int j = 0. j < doubles.length. ++j) {             doubles[j] = randomDouble().         }         Arrays.sort(doubles).         values[i] = doubles.     }     FakeAggregationScript script = new FakeAggregationScript(values).     ScriptDoubleValues scriptValues = new ScriptDoubleValues(script).     for (int i = 0. i < values.length. ++i) {         assertEquals(values[i].length > 0, scriptValues.advanceExact(i)).         if (values[i].length > 0) {             assertEquals(values[i].length, scriptValues.docValueCount()).             for (int j = 0. j < values[i].length. ++j) {                 assertEquals(values[i][j], scriptValues.nextValue()).             }         }     } }
false;public;0;22;;public void testBytes() throws IOException {     final String[][] values = new String[randomInt(10)][].     for (int i = 0. i < values.length. ++i) {         String[] strings = new String[randomInt(8)].         for (int j = 0. j < strings.length. ++j) {             strings[j] = RandomStrings.randomAsciiOfLength(random(), 5).         }         Arrays.sort(strings).         values[i] = strings.     }     FakeAggregationScript script = new FakeAggregationScript(values).     ScriptBytesValues scriptValues = new ScriptBytesValues(script).     for (int i = 0. i < values.length. ++i) {         assertEquals(values[i].length > 0, scriptValues.advanceExact(i)).         if (values[i].length > 0) {             assertEquals(values[i].length, scriptValues.docValueCount()).             for (int j = 0. j < values[i].length. ++j) {                 assertEquals(new BytesRef(values[i][j]), scriptValues.nextValue()).             }         }     } }
