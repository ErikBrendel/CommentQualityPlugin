commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected ScriptQueryBuilder doCreateTestQueryBuilder() {     String script = "1".     Map<String, Object> params = Collections.emptyMap().     return new ScriptQueryBuilder(new Script(ScriptType.INLINE, MockScriptEngine.NAME, script, params)). }
false;protected;0;4;;@Override protected boolean builderGeneratesCacheableQueries() {     return false. }
false;protected;3;4;;@Override protected void doAssertLuceneQuery(ScriptQueryBuilder queryBuilder, Query query, SearchContext context) throws IOException {     assertThat(query, instanceOf(ScriptQueryBuilder.ScriptQuery.class)). }
false;public;0;3;;public void testIllegalConstructorArg() {     expectThrows(IllegalArgumentException.class, () -> new ScriptQueryBuilder((Script) null)). }
false;public;0;18;;public void testFromJsonVerbose() throws IOException {     String json = "{\n" + "  \"script\" : {\n" + "    \"script\" : {\n" + "      \"source\" : \"5\",\n" + "      \"lang\" : \"mockscript\"\n" + "    },\n" + "    \"boost\" : 1.0,\n" + "    \"_name\" : \"PcKdEyPOmR\"\n" + "  }\n" + "}".     ScriptQueryBuilder parsed = (ScriptQueryBuilder) parseQuery(json).     checkGeneratedJson(json, parsed).     assertEquals(json, "mockscript", parsed.script().getLang()). }
false;public;0;13;;public void testFromJson() throws IOException {     String json = "{\n" + "  \"script\" : {\n" + "    \"script\" : \"5\"," + "    \"boost\" : 1.0,\n" + "    \"_name\" : \"PcKdEyPOmR\"\n" + "  }\n" + "}".     ScriptQueryBuilder parsed = (ScriptQueryBuilder) parseQuery(json).     assertEquals(json, "5", parsed.script().getIdOrCode()). }
false;public;0;18;;public void testArrayOfScriptsException() {     String json = "{\n" + "  \"script\" : {\n" + "    \"script\" : [ {\n" + "      \"source\" : \"5\",\n" + "      \"lang\" : \"mockscript\"\n" + "    },\n" + "    {\n" + "      \"source\" : \"6\",\n" + "      \"lang\" : \"mockscript\"\n" + "    }\n ]" + "  }\n" + "}".     ParsingException e = expectThrows(ParsingException.class, () -> parseQuery(json)).     assertThat(e.getMessage(), containsString("does not support an array of scripts")). }
false;protected;0;6;;@Override protected Set<String> getObjectsHoldingArbitraryContent() {     // adding additional objects within the params object.     return Collections.singleton(Script.PARAMS_PARSE_FIELD.getPreferredName()). }
false;protected;1;4;;@Override protected boolean isCacheable(ScriptQueryBuilder queryBuilder) {     return false. }
