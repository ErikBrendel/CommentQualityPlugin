commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;13;;public static QueryProfileShardResult createTestItem() {     int size = randomIntBetween(0, 5).     List<ProfileResult> queryProfileResults = new ArrayList<>(size).     for (int i = 0. i < size. i++) {         queryProfileResults.add(ProfileResultTests.createTestItem(1)).     }     CollectorResult profileCollector = CollectorResultTests.createTestItem(2).     long rewriteTime = randomNonNegativeLong().     if (randomBoolean()) {         // make sure to often test this with small values too         rewriteTime = rewriteTime % 1000.     }     return new QueryProfileShardResult(queryProfileResults, rewriteTime, profileCollector). }
false;public;0;15;;public void testFromXContent() throws IOException {     QueryProfileShardResult profileResult = createTestItem().     XContentType xContentType = randomFrom(XContentType.values()).     boolean humanReadable = randomBoolean().     BytesReference originalBytes = toShuffledXContent(profileResult, xContentType, ToXContent.EMPTY_PARAMS, humanReadable).     QueryProfileShardResult parsed.     try (XContentParser parser = createParser(xContentType.xContent(), originalBytes)) {         XContentParserUtils.ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation).         parsed = QueryProfileShardResult.fromXContent(parser).         assertEquals(XContentParser.Token.END_OBJECT, parser.currentToken()).         assertNull(parser.nextToken()).     }     assertToXContentEquivalent(originalBytes, toXContent(parsed, xContentType, humanReadable), xContentType). }
