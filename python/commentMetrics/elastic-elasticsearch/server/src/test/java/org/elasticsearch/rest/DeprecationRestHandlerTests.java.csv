commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setup() {     handler = mock(RestHandler.class).     deprecationLogger = mock(DeprecationLogger.class). }
false;public;0;3;;public void testNullHandler() {     expectThrows(NullPointerException.class, () -> new DeprecationRestHandler(null, deprecationMessage, deprecationLogger)). }
false;public;0;6;;public void testInvalidDeprecationMessageThrowsException() {     String invalidDeprecationMessage = randomFrom("", null, "     ").     expectThrows(IllegalArgumentException.class, () -> new DeprecationRestHandler(handler, invalidDeprecationMessage, deprecationLogger)). }
false;public;0;3;;public void testNullDeprecationLogger() {     expectThrows(NullPointerException.class, () -> new DeprecationRestHandler(handler, deprecationMessage, null)). }
false;public;0;17;;public void testHandleRequestLogsWarningThenForwards() throws Exception {     RestRequest request = mock(RestRequest.class).     RestChannel channel = mock(RestChannel.class).     NodeClient client = mock(NodeClient.class).     DeprecationRestHandler deprecatedHandler = new DeprecationRestHandler(handler, deprecationMessage, deprecationLogger).     // test it     deprecatedHandler.handleRequest(request, channel, client).     InOrder inOrder = inOrder(handler, request, channel, deprecationLogger).     // log, then forward     inOrder.verify(deprecationLogger).deprecated(deprecationMessage).     inOrder.verify(handler).handleRequest(request, channel, client).     inOrder.verifyNoMoreInteractions(). }
false;public;0;14;;public void testValidHeaderValue() {     ASCIIHeaderGenerator generator = new ASCIIHeaderGenerator().     String value = generator.ofCodeUnitsLength(random(), 1, 50).     if (value.trim().length() == 0) {         // empty text, not a valid header         assertFalse(DeprecationRestHandler.validHeaderValue(value)).         Exception e = expectThrows(IllegalArgumentException.class, () -> DeprecationRestHandler.requireValidHeader(value)).         assertEquals("header value must contain only US ASCII text", e.getMessage()).     } else {         assertTrue(DeprecationRestHandler.validHeaderValue(value)).         assertSame(value, DeprecationRestHandler.requireValidHeader(value)).     } }
false;public;0;10;;public void testInvalidHeaderValue() {     ASCIIHeaderGenerator generator = new ASCIIHeaderGenerator().     String value = generator.ofCodeUnitsLength(random(), 0, 25) + randomFrom('\t', '\0', '\n', (char) 27, /* ESC */     (char) 31, /* unit separator*/     (char) 127) + generator.ofCodeUnitsLength(random(), 0, 25).     assertFalse(DeprecationRestHandler.validHeaderValue(value)).     expectThrows(IllegalArgumentException.class, () -> DeprecationRestHandler.requireValidHeader(value)). }
false;public;0;5;;public void testInvalidHeaderValueNull() {     assertFalse(DeprecationRestHandler.validHeaderValue(null)).     expectThrows(IllegalArgumentException.class, () -> DeprecationRestHandler.requireValidHeader(null)). }
false;public;0;7;;public void testInvalidHeaderValueEmpty() {     String blank = randomFrom("", "\t", "    ").     assertFalse(DeprecationRestHandler.validHeaderValue(blank)).     expectThrows(IllegalArgumentException.class, () -> DeprecationRestHandler.requireValidHeader(blank)). }
false;public;0;4;;public void testSupportsContentStreamTrue() {     when(handler.supportsContentStream()).thenReturn(true).     assertTrue(new DeprecationRestHandler(handler, deprecationMessage, deprecationLogger).supportsContentStream()). }
false;public;0;4;;public void testSupportsContentStreamFalse() {     when(handler.supportsContentStream()).thenReturn(false).     assertFalse(new DeprecationRestHandler(handler, deprecationMessage, deprecationLogger).supportsContentStream()). }
true;static;2;9;/**  * Create a character array for characters [{@code from}, {@code to}].  *  * @param from Starting code point (inclusive).  * @param to Ending code point (inclusive).  * @return Never {@code null}.  */ ;/**  * Create a character array for characters [{@code from}, {@code to}].  *  * @param from Starting code point (inclusive).  * @param to Ending code point (inclusive).  * @return Never {@code null}.  */ static char[] asciiFromTo(int from, int to) {     char[] chars = new char[to - from + 1].     for (int i = from. i <= to. ++i) {         chars[i - from] = (char) i.     }     return chars. }
