commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override public Settings additionalSettings() {     return Settings.builder().put("foo.bar", "1").put(IndexModule.INDEX_STORE_TYPE_SETTING.getKey(), IndexModule.Type.MMAPFS.getSettingsKey()).build(). }
false;public;0;4;;@Override public Settings additionalSettings() {     return Settings.builder().put("foo.bar", "2").build(). }
false;static;2;6;;static PluginsService newPluginsService(Settings settings, Class<? extends Plugin>... classpathPlugins) {     return new PluginsService(settings, null, null, TestEnvironment.newEnvironment(settings).pluginsFile(), Arrays.asList(classpathPlugins)). }
false;public;0;14;;public void testAdditionalSettings() {     Settings settings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()).put("my.setting", "test").put(IndexModule.INDEX_STORE_TYPE_SETTING.getKey(), IndexModule.Type.SIMPLEFS.getSettingsKey()).build().     PluginsService service = newPluginsService(settings, AdditionalSettingsPlugin1.class).     Settings newSettings = service.updatedSettings().     // previous settings still exist     assertEquals("test", newSettings.get("my.setting")).     // added setting exists     assertEquals("1", newSettings.get("foo.bar")).     assertEquals(IndexModule.Type.SIMPLEFS.getSettingsKey(), newSettings.get(IndexModule.INDEX_STORE_TYPE_SETTING.getKey())). // does not override pre existing settings }
false;public;0;14;;public void testAdditionalSettingsClash() {     Settings settings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()).build().     PluginsService service = newPluginsService(settings, AdditionalSettingsPlugin1.class, AdditionalSettingsPlugin2.class).     try {         service.updatedSettings().         fail("Expected exception when building updated settings").     } catch (IllegalArgumentException e) {         String msg = e.getMessage().         assertTrue(msg, msg.contains("Cannot have additional setting [foo.bar]")).         assertTrue(msg, msg.contains("plugin [" + AdditionalSettingsPlugin1.class.getName())).         assertTrue(msg, msg.contains("plugin [" + AdditionalSettingsPlugin2.class.getName())).     } }
false;public;0;7;;public void testExistingPluginMissingDescriptor() throws Exception {     Path pluginsDir = createTempDir().     Files.createDirectory(pluginsDir.resolve("plugin-missing-descriptor")).     IllegalStateException e = expectThrows(IllegalStateException.class, () -> PluginsService.getPluginBundles(pluginsDir)).     assertThat(e.getMessage(), containsString("Could not load plugin descriptor for plugin directory [plugin-missing-descriptor]")). }
false;public;0;10;;public void testFilterPlugins() {     Settings settings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()).put("my.setting", "test").put(IndexModule.INDEX_STORE_TYPE_SETTING.getKey(), IndexModule.Type.SIMPLEFS.getSettingsKey()).build().     PluginsService service = newPluginsService(settings, AdditionalSettingsPlugin1.class, FilterablePlugin.class).     List<ScriptPlugin> scriptPlugins = service.filterPlugins(ScriptPlugin.class).     assertEquals(1, scriptPlugins.size()).     assertEquals(FilterablePlugin.class, scriptPlugins.get(0).getClass()). }
false;public;0;16;;public void testHiddenFiles() throws IOException {     final Path home = createTempDir().     final Settings settings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), home).build().     final Path hidden = home.resolve("plugins").resolve(".hidden").     Files.createDirectories(hidden).     @SuppressWarnings("unchecked")     final IllegalStateException e = expectThrows(IllegalStateException.class, () -> newPluginsService(settings)).     final String expected = "Could not load plugin descriptor for plugin directory [.hidden]".     assertThat(e, hasToString(containsString(expected))). }
false;public;0;25;;public void testDesktopServicesStoreFiles() throws IOException {     final Path home = createTempDir().     final Settings settings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), home).build().     final Path plugins = home.resolve("plugins").     Files.createDirectories(plugins).     final Path desktopServicesStore = plugins.resolve(".DS_Store").     Files.createFile(desktopServicesStore).     if (Constants.MAC_OS_X) {         @SuppressWarnings("unchecked")         final PluginsService pluginsService = newPluginsService(settings).         assertNotNull(pluginsService).     } else {         final IllegalStateException e = expectThrows(IllegalStateException.class, () -> newPluginsService(settings)).         assertThat(e.getMessage(), containsString("Could not load plugin descriptor for plugin directory [.DS_Store]")).         assertNotNull(e.getCause()).         assertThat(e.getCause(), instanceOf(FileSystemException.class)).         if (Constants.WINDOWS) {             assertThat(e.getCause(), instanceOf(NoSuchFileException.class)).         } else {             assertThat(e.getCause(), hasToString(containsString("Not a directory"))).         }     } }
false;public;0;27;;public void testStartupWithRemovingMarker() throws IOException {     final Path home = createTempDir().     final Settings settings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), home).build().     final Path fake = home.resolve("plugins").resolve("fake").     Files.createDirectories(fake).     Files.createFile(fake.resolve("plugin.jar")).     final Path removing = home.resolve("plugins").resolve(".removing-fake").     Files.createFile(removing).     PluginTestUtil.writePluginProperties(fake, "description", "fake", "name", "fake", "version", "1.0.0", "elasticsearch.version", Version.CURRENT.toString(), "java.version", System.getProperty("java.specification.version"), "classname", "Fake", "has.native.controller", "false").     final IllegalStateException e = expectThrows(IllegalStateException.class, () -> newPluginsService(settings)).     final String expected = String.format(Locale.ROOT, "found file [%s] from a failed attempt to remove the plugin [fake]. execute [elasticsearch-plugin remove fake]", removing).     assertThat(e, hasToString(containsString(expected))). }
false;public;0;15;;public void testLoadPluginWithNoPublicConstructor() {     class NoPublicConstructorPlugin extends Plugin {          private NoPublicConstructorPlugin() {         }     }     final Path home = createTempDir().     final Settings settings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), home).build().     final IllegalStateException e = expectThrows(IllegalStateException.class, () -> newPluginsService(settings, NoPublicConstructorPlugin.class)).     assertThat(e, hasToString(containsString("no public constructor"))). }
false;public;0;23;;public void testLoadPluginWithMultiplePublicConstructors() {     class MultiplePublicConstructorsPlugin extends Plugin {          @SuppressWarnings("unused")         public MultiplePublicConstructorsPlugin() {         }          @SuppressWarnings("unused")         public MultiplePublicConstructorsPlugin(final Settings settings) {         }     }     final Path home = createTempDir().     final Settings settings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), home).build().     final IllegalStateException e = expectThrows(IllegalStateException.class, () -> newPluginsService(settings, MultiplePublicConstructorsPlugin.class)).     assertThat(e, hasToString(containsString("no unique public constructor"))). }
false;public;0;47;;public void testLoadPluginWithNoPublicConstructorOfCorrectSignature() {     class TooManyParametersPlugin extends Plugin {          @SuppressWarnings("unused")         public TooManyParametersPlugin(Settings settings, Path configPath, Object object) {         }     }     class TwoParametersFirstIncorrectType extends Plugin {          @SuppressWarnings("unused")         public TwoParametersFirstIncorrectType(Object object, Path configPath) {         }     }     class TwoParametersSecondIncorrectType extends Plugin {          @SuppressWarnings("unused")         public TwoParametersSecondIncorrectType(Settings settings, Object object) {         }     }     class OneParameterIncorrectType extends Plugin {          @SuppressWarnings("unused")         public OneParameterIncorrectType(Object object) {         }     }     final Collection<Class<? extends Plugin>> classes = Arrays.asList(TooManyParametersPlugin.class, TwoParametersFirstIncorrectType.class, TwoParametersSecondIncorrectType.class, OneParameterIncorrectType.class).     for (Class<? extends Plugin> pluginClass : classes) {         final Path home = createTempDir().         final Settings settings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), home).build().         final IllegalStateException e = expectThrows(IllegalStateException.class, () -> newPluginsService(settings, pluginClass)).         assertThat(e, hasToString(containsString("no public constructor of correct signature"))).     } }
false;public;0;10;;public void testSortBundlesCycleSelfReference() throws Exception {     Path pluginDir = createTempDir().     PluginInfo info = new PluginInfo("foo", "desc", "1.0", Version.CURRENT, "1.8", "MyPlugin", Collections.singletonList("foo"), false).     PluginsService.Bundle bundle = new PluginsService.Bundle(info, pluginDir).     IllegalStateException e = expectThrows(IllegalStateException.class, () -> PluginsService.sortBundles(Collections.singleton(bundle))).     assertEquals("Cycle found in plugin dependencies: foo -> foo", e.getMessage()). }
false;public;0;19;;public void testSortBundlesCycle() throws Exception {     Path pluginDir = createTempDir().     // control iteration order, so we get know the beginning of the cycle     Set<PluginsService.Bundle> bundles = new LinkedHashSet<>().     PluginInfo info = new PluginInfo("foo", "desc", "1.0", Version.CURRENT, "1.8", "MyPlugin", Arrays.asList("bar", "other"), false).     bundles.add(new PluginsService.Bundle(info, pluginDir)).     PluginInfo info2 = new PluginInfo("bar", "desc", "1.0", Version.CURRENT, "1.8", "MyPlugin", Collections.singletonList("baz"), false).     bundles.add(new PluginsService.Bundle(info2, pluginDir)).     PluginInfo info3 = new PluginInfo("baz", "desc", "1.0", Version.CURRENT, "1.8", "MyPlugin", Collections.singletonList("foo"), false).     bundles.add(new PluginsService.Bundle(info3, pluginDir)).     PluginInfo info4 = new PluginInfo("other", "desc", "1.0", Version.CURRENT, "1.8", "MyPlugin", Collections.emptyList(), false).     bundles.add(new PluginsService.Bundle(info4, pluginDir)).     IllegalStateException e = expectThrows(IllegalStateException.class, () -> PluginsService.sortBundles(bundles)).     assertEquals("Cycle found in plugin dependencies: foo -> bar -> baz -> foo", e.getMessage()). }
false;public;0;8;;public void testSortBundlesSingle() throws Exception {     Path pluginDir = createTempDir().     PluginInfo info = new PluginInfo("foo", "desc", "1.0", Version.CURRENT, "1.8", "MyPlugin", Collections.emptyList(), false).     PluginsService.Bundle bundle = new PluginsService.Bundle(info, pluginDir).     List<PluginsService.Bundle> sortedBundles = PluginsService.sortBundles(Collections.singleton(bundle)).     assertThat(sortedBundles, Matchers.contains(bundle)). }
false;public;0;18;;public void testSortBundlesNoDeps() throws Exception {     Path pluginDir = createTempDir().     // control iteration order     Set<PluginsService.Bundle> bundles = new LinkedHashSet<>().     PluginInfo info1 = new PluginInfo("foo", "desc", "1.0", Version.CURRENT, "1.8", "MyPlugin", Collections.emptyList(), false).     PluginsService.Bundle bundle1 = new PluginsService.Bundle(info1, pluginDir).     bundles.add(bundle1).     PluginInfo info2 = new PluginInfo("bar", "desc", "1.0", Version.CURRENT, "1.8", "MyPlugin", Collections.emptyList(), false).     PluginsService.Bundle bundle2 = new PluginsService.Bundle(info2, pluginDir).     bundles.add(bundle2).     PluginInfo info3 = new PluginInfo("baz", "desc", "1.0", Version.CURRENT, "1.8", "MyPlugin", Collections.emptyList(), false).     PluginsService.Bundle bundle3 = new PluginsService.Bundle(info3, pluginDir).     bundles.add(bundle3).     List<PluginsService.Bundle> sortedBundles = PluginsService.sortBundles(bundles).     assertThat(sortedBundles, Matchers.contains(bundle1, bundle2, bundle3)). }
false;public;0;10;;public void testSortBundlesMissingDep() throws Exception {     Path pluginDir = createTempDir().     PluginInfo info = new PluginInfo("foo", "desc", "1.0", Version.CURRENT, "1.8", "MyPlugin", Collections.singletonList("dne"), false).     PluginsService.Bundle bundle = new PluginsService.Bundle(info, pluginDir).     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> PluginsService.sortBundles(Collections.singleton(bundle))).     assertEquals("Missing plugin [dne], dependency of [foo]", e.getMessage()). }
false;public;0;22;;public void testSortBundlesCommonDep() throws Exception {     Path pluginDir = createTempDir().     // control iteration order     Set<PluginsService.Bundle> bundles = new LinkedHashSet<>().     PluginInfo info1 = new PluginInfo("grandparent", "desc", "1.0", Version.CURRENT, "1.8", "MyPlugin", Collections.emptyList(), false).     PluginsService.Bundle bundle1 = new PluginsService.Bundle(info1, pluginDir).     bundles.add(bundle1).     PluginInfo info2 = new PluginInfo("foo", "desc", "1.0", Version.CURRENT, "1.8", "MyPlugin", Collections.singletonList("common"), false).     PluginsService.Bundle bundle2 = new PluginsService.Bundle(info2, pluginDir).     bundles.add(bundle2).     PluginInfo info3 = new PluginInfo("bar", "desc", "1.0", Version.CURRENT, "1.8", "MyPlugin", Collections.singletonList("common"), false).     PluginsService.Bundle bundle3 = new PluginsService.Bundle(info3, pluginDir).     bundles.add(bundle3).     PluginInfo info4 = new PluginInfo("common", "desc", "1.0", Version.CURRENT, "1.8", "MyPlugin", Collections.singletonList("grandparent"), false).     PluginsService.Bundle bundle4 = new PluginsService.Bundle(info4, pluginDir).     bundles.add(bundle4).     List<PluginsService.Bundle> sortedBundles = PluginsService.sortBundles(bundles).     assertThat(sortedBundles, Matchers.contains(bundle1, bundle4, bundle2, bundle3)). }
false;public;0;14;;public void testSortBundlesAlreadyOrdered() throws Exception {     Path pluginDir = createTempDir().     // control iteration order     Set<PluginsService.Bundle> bundles = new LinkedHashSet<>().     PluginInfo info1 = new PluginInfo("dep", "desc", "1.0", Version.CURRENT, "1.8", "MyPlugin", Collections.emptyList(), false).     PluginsService.Bundle bundle1 = new PluginsService.Bundle(info1, pluginDir).     bundles.add(bundle1).     PluginInfo info2 = new PluginInfo("myplugin", "desc", "1.0", Version.CURRENT, "1.8", "MyPlugin", Collections.singletonList("dep"), false).     PluginsService.Bundle bundle2 = new PluginsService.Bundle(info2, pluginDir).     bundles.add(bundle2).     List<PluginsService.Bundle> sortedBundles = PluginsService.sortBundles(bundles).     assertThat(sortedBundles, Matchers.contains(bundle1, bundle2)). }
false;;2;38;;void makeJar(Path jarFile, Class... classes) throws Exception {     try (ZipOutputStream out = new ZipOutputStream(Files.newOutputStream(jarFile))) {         for (Class clazz : classes) {             String relativePath = clazz.getCanonicalName().replaceAll("\\.", "/") + ".class".             if (relativePath.contains(PluginsServiceTests.class.getSimpleName())) {                 // static inner class of this test                 relativePath = relativePath.replace("/" + clazz.getSimpleName(), "$" + clazz.getSimpleName()).             }             Path codebase = PathUtils.get(clazz.getProtectionDomain().getCodeSource().getLocation().toURI()).             if (codebase.toString().endsWith(".jar")) {                 // copy from jar, exactly as is                 out.putNextEntry(new ZipEntry(relativePath)).                 try (ZipInputStream in = new ZipInputStream(Files.newInputStream(codebase))) {                     ZipEntry entry = in.getNextEntry().                     while (entry != null) {                         if (entry.getName().equals(relativePath)) {                             byte[] buffer = new byte[10 * 1024].                             int read = in.read(buffer).                             while (read != -1) {                                 out.write(buffer, 0, read).                                 read = in.read(buffer).                             }                             break.                         }                         in.closeEntry().                         entry = in.getNextEntry().                     }                 }             } else {                 // copy from dir, and use a different canonical path to not conflict with test classpath                 out.putNextEntry(new ZipEntry("test/" + clazz.getSimpleName() + ".class")).                 Files.copy(codebase.resolve(relativePath), out).             }             out.closeEntry().         }     } }
false;public;0;14;;public void testJarHellDuplicateCodebaseWithDep() throws Exception {     Path pluginDir = createTempDir().     Path dupJar = pluginDir.resolve("dup.jar").     makeJar(dupJar).     Map<String, Set<URL>> transitiveDeps = new HashMap<>().     transitiveDeps.put("dep", Collections.singleton(dupJar.toUri().toURL())).     PluginInfo info1 = new PluginInfo("myplugin", "desc", "1.0", Version.CURRENT, "1.8", "MyPlugin", Collections.singletonList("dep"), false).     PluginsService.Bundle bundle = new PluginsService.Bundle(info1, pluginDir).     IllegalStateException e = expectThrows(IllegalStateException.class, () -> PluginsService.checkBundleJarHell(JarHell.parseClassPath(), bundle, transitiveDeps)).     assertEquals("failed to load plugin myplugin due to jar hell", e.getMessage()).     assertThat(e.getCause().getMessage(), containsString("jar hell! duplicate codebases with extended plugin")). }
false;public;0;19;;public void testJarHellDuplicateCodebaseAcrossDeps() throws Exception {     Path pluginDir = createTempDir().     Path pluginJar = pluginDir.resolve("plugin.jar").     makeJar(pluginJar, DummyClass1.class).     Path otherDir = createTempDir().     Path dupJar = otherDir.resolve("dup.jar").     makeJar(dupJar, DummyClass2.class).     Map<String, Set<URL>> transitiveDeps = new HashMap<>().     transitiveDeps.put("dep1", Collections.singleton(dupJar.toUri().toURL())).     transitiveDeps.put("dep2", Collections.singleton(dupJar.toUri().toURL())).     PluginInfo info1 = new PluginInfo("myplugin", "desc", "1.0", Version.CURRENT, "1.8", "MyPlugin", Arrays.asList("dep1", "dep2"), false).     PluginsService.Bundle bundle = new PluginsService.Bundle(info1, pluginDir).     IllegalStateException e = expectThrows(IllegalStateException.class, () -> PluginsService.checkBundleJarHell(JarHell.parseClassPath(), bundle, transitiveDeps)).     assertEquals("failed to load plugin myplugin due to jar hell", e.getMessage()).     assertThat(e.getCause().getMessage(), containsString("jar hell!")).     assertThat(e.getCause().getMessage(), containsString("duplicate codebases")). }
false;public;0;14;;// Note: testing dup codebase with core is difficult because it requires a symlink, but we have mock filesystems and security manager public void testJarHellDuplicateClassWithCore() throws Exception {     // need a jar file of core dep, use log4j here     Path pluginDir = createTempDir().     Path pluginJar = pluginDir.resolve("plugin.jar").     makeJar(pluginJar, Level.class).     PluginInfo info1 = new PluginInfo("myplugin", "desc", "1.0", Version.CURRENT, "1.8", "MyPlugin", Collections.emptyList(), false).     PluginsService.Bundle bundle = new PluginsService.Bundle(info1, pluginDir).     IllegalStateException e = expectThrows(IllegalStateException.class, () -> PluginsService.checkBundleJarHell(JarHell.parseClassPath(), bundle, new HashMap<>())).     assertEquals("failed to load plugin myplugin due to jar hell", e.getMessage()).     assertThat(e.getCause().getMessage(), containsString("jar hell!")).     assertThat(e.getCause().getMessage(), containsString("Level")). }
false;public;0;18;;public void testJarHellDuplicateClassWithDep() throws Exception {     Path pluginDir = createTempDir().     Path pluginJar = pluginDir.resolve("plugin.jar").     makeJar(pluginJar, DummyClass1.class).     Path depDir = createTempDir().     Path depJar = depDir.resolve("dep.jar").     makeJar(depJar, DummyClass1.class).     Map<String, Set<URL>> transitiveDeps = new HashMap<>().     transitiveDeps.put("dep", Collections.singleton(depJar.toUri().toURL())).     PluginInfo info1 = new PluginInfo("myplugin", "desc", "1.0", Version.CURRENT, "1.8", "MyPlugin", Collections.singletonList("dep"), false).     PluginsService.Bundle bundle = new PluginsService.Bundle(info1, pluginDir).     IllegalStateException e = expectThrows(IllegalStateException.class, () -> PluginsService.checkBundleJarHell(JarHell.parseClassPath(), bundle, transitiveDeps)).     assertEquals("failed to load plugin myplugin due to jar hell", e.getMessage()).     assertThat(e.getCause().getMessage(), containsString("jar hell!")).     assertThat(e.getCause().getMessage(), containsString("DummyClass1")). }
false;public;0;22;;public void testJarHellDuplicateClassAcrossDeps() throws Exception {     Path pluginDir = createTempDir().     Path pluginJar = pluginDir.resolve("plugin.jar").     makeJar(pluginJar, DummyClass1.class).     Path dep1Dir = createTempDir().     Path dep1Jar = dep1Dir.resolve("dep1.jar").     makeJar(dep1Jar, DummyClass2.class).     Path dep2Dir = createTempDir().     Path dep2Jar = dep2Dir.resolve("dep2.jar").     makeJar(dep2Jar, DummyClass2.class).     Map<String, Set<URL>> transitiveDeps = new HashMap<>().     transitiveDeps.put("dep1", Collections.singleton(dep1Jar.toUri().toURL())).     transitiveDeps.put("dep2", Collections.singleton(dep2Jar.toUri().toURL())).     PluginInfo info1 = new PluginInfo("myplugin", "desc", "1.0", Version.CURRENT, "1.8", "MyPlugin", Arrays.asList("dep1", "dep2"), false).     PluginsService.Bundle bundle = new PluginsService.Bundle(info1, pluginDir).     IllegalStateException e = expectThrows(IllegalStateException.class, () -> PluginsService.checkBundleJarHell(JarHell.parseClassPath(), bundle, transitiveDeps)).     assertEquals("failed to load plugin myplugin due to jar hell", e.getMessage()).     assertThat(e.getCause().getMessage(), containsString("jar hell!")).     assertThat(e.getCause().getMessage(), containsString("DummyClass2")). }
false;public;0;21;;public void testJarHellTransitiveMap() throws Exception {     Path pluginDir = createTempDir().     Path pluginJar = pluginDir.resolve("plugin.jar").     makeJar(pluginJar, DummyClass1.class).     Path dep1Dir = createTempDir().     Path dep1Jar = dep1Dir.resolve("dep1.jar").     makeJar(dep1Jar, DummyClass2.class).     Path dep2Dir = createTempDir().     Path dep2Jar = dep2Dir.resolve("dep2.jar").     makeJar(dep2Jar, DummyClass3.class).     Map<String, Set<URL>> transitiveDeps = new HashMap<>().     transitiveDeps.put("dep1", Collections.singleton(dep1Jar.toUri().toURL())).     transitiveDeps.put("dep2", Collections.singleton(dep2Jar.toUri().toURL())).     PluginInfo info1 = new PluginInfo("myplugin", "desc", "1.0", Version.CURRENT, "1.8", "MyPlugin", Arrays.asList("dep1", "dep2"), false).     PluginsService.Bundle bundle = new PluginsService.Bundle(info1, pluginDir).     PluginsService.checkBundleJarHell(JarHell.parseClassPath(), bundle, transitiveDeps).     Set<URL> deps = transitiveDeps.get("myplugin").     assertNotNull(deps).     assertThat(deps, containsInAnyOrder(pluginJar.toUri().toURL(), dep1Jar.toUri().toURL(), dep2Jar.toUri().toURL())). }
false;public;0;38;;public void testNonExtensibleDep() throws Exception {     // This test opens a child classloader, reading a jar under the test temp     // dir (a dummy plugin). Classloaders are closed by GC, so when test teardown     // occurs the jar is deleted while the classloader is still open. However, on     // windows, files cannot be deleted when they are still open by a process.     assumeFalse("windows deletion behavior is asinine", Constants.WINDOWS).     Path homeDir = createTempDir().     Settings settings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), homeDir).build().     Path pluginsDir = homeDir.resolve("plugins").     Path mypluginDir = pluginsDir.resolve("myplugin").     PluginTestUtil.writePluginProperties(mypluginDir, "description", "whatever", "name", "myplugin", "version", "1.0.0", "elasticsearch.version", Version.CURRENT.toString(), "java.version", System.getProperty("java.specification.version"), "extended.plugins", "nonextensible", "classname", "test.DummyPlugin").     try (InputStream jar = PluginsServiceTests.class.getResourceAsStream("dummy-plugin.jar")) {         Files.copy(jar, mypluginDir.resolve("plugin.jar")).     }     Path nonextensibleDir = pluginsDir.resolve("nonextensible").     PluginTestUtil.writePluginProperties(nonextensibleDir, "description", "whatever", "name", "nonextensible", "version", "1.0.0", "elasticsearch.version", Version.CURRENT.toString(), "java.version", System.getProperty("java.specification.version"), "classname", "test.NonExtensiblePlugin").     try (InputStream jar = PluginsServiceTests.class.getResourceAsStream("non-extensible-plugin.jar")) {         Files.copy(jar, nonextensibleDir.resolve("plugin.jar")).     }     IllegalStateException e = expectThrows(IllegalStateException.class, () -> newPluginsService(settings)).     assertEquals("Plugin [myplugin] cannot extend non-extensible plugin [nonextensible]", e.getMessage()). }
false;public;0;6;;public void testIncompatibleElasticsearchVersion() throws Exception {     PluginInfo info = new PluginInfo("my_plugin", "desc", "1.0", Version.V_6_0_0, "1.8", "FakePlugin", Collections.emptyList(), false).     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> PluginsService.verifyCompatibility(info)).     assertThat(e.getMessage(), containsString("was built for Elasticsearch version 6.0.0")). }
false;public;0;6;;public void testIncompatibleJavaVersion() throws Exception {     PluginInfo info = new PluginInfo("my_plugin", "desc", "1.0", Version.CURRENT, "1000000.0", "FakePlugin", Collections.emptyList(), false).     IllegalStateException e = expectThrows(IllegalStateException.class, () -> PluginsService.verifyCompatibility(info)).     assertThat(e.getMessage(), containsString("my_plugin requires Java")). }
false;public;0;20;;public void testFindPluginDirs() throws IOException {     final Path plugins = createTempDir().     final Path fake = plugins.resolve("fake").     PluginTestUtil.writePluginProperties(fake, "description", "description", "name", "fake", "version", "1.0.0", "elasticsearch.version", Version.CURRENT.toString(), "java.version", System.getProperty("java.specification.version"), "classname", "test.DummyPlugin").     try (InputStream jar = PluginsServiceTests.class.getResourceAsStream("dummy-plugin.jar")) {         Files.copy(jar, fake.resolve("plugin.jar")).     }     assertThat(PluginsService.findPluginDirs(plugins), containsInAnyOrder(fake)). }
false;public;0;8;;public void testExistingMandatoryClasspathPlugin() {     final Settings settings = Settings.builder().put("path.home", createTempDir()).put("plugin.mandatory", "org.elasticsearch.plugins.PluginsServiceTests$FakePlugin").build().     newPluginsService(settings, FakePlugin.class). }
false;public;0;29;;public void testExistingMandatoryInstalledPlugin() throws IOException {     // This test opens a child classloader, reading a jar under the test temp     // dir (a dummy plugin). Classloaders are closed by GC, so when test teardown     // occurs the jar is deleted while the classloader is still open. However, on     // windows, files cannot be deleted when they are still open by a process.     assumeFalse("windows deletion behavior is asinine", Constants.WINDOWS).     final Path pathHome = createTempDir().     final Path plugins = pathHome.resolve("plugins").     final Path fake = plugins.resolve("fake").     PluginTestUtil.writePluginProperties(fake, "description", "description", "name", "fake", "version", "1.0.0", "elasticsearch.version", Version.CURRENT.toString(), "java.version", System.getProperty("java.specification.version"), "classname", "test.DummyPlugin").     try (InputStream jar = PluginsServiceTests.class.getResourceAsStream("dummy-plugin.jar")) {         Files.copy(jar, fake.resolve("plugin.jar")).     }     final Settings settings = Settings.builder().put("path.home", pathHome).put("plugin.mandatory", "fake").build().     newPluginsService(settings). }
