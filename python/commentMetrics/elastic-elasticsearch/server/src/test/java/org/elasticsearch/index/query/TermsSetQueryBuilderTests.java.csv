commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> getPlugins() {     return Collections.singleton(CustomScriptPlugin.class). }
false;protected;1;7;;@Override protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {     String docType = "_doc".     mapperService.merge(docType, new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(docType, "m_s_m", "type=long"))), MapperService.MergeReason.MAPPING_UPDATE). }
false;protected;0;15;;@Override protected TermsSetQueryBuilder doCreateTestQueryBuilder() {     String fieldName = randomValueOtherThanMany(value -> value.equals(GEO_POINT_FIELD_NAME) || value.equals(GEO_SHAPE_FIELD_NAME), () -> randomFrom(MAPPED_FIELD_NAMES)).     List<?> randomTerms = randomValues(fieldName).     TermsSetQueryBuilder queryBuilder = new TermsSetQueryBuilder(STRING_FIELD_NAME, randomTerms).     if (randomBoolean()) {         queryBuilder.setMinimumShouldMatchField("m_s_m").     } else {         queryBuilder.setMinimumShouldMatchScript(new Script(ScriptType.INLINE, MockScriptEngine.NAME, "_script", emptyMap())).     }     return queryBuilder. }
false;protected;3;10;;@Override protected void doAssertLuceneQuery(TermsSetQueryBuilder queryBuilder, Query query, SearchContext context) throws IOException {     if (queryBuilder.getValues().isEmpty()) {         assertThat(query, instanceOf(MatchNoDocsQuery.class)).         MatchNoDocsQuery matchNoDocsQuery = (MatchNoDocsQuery) query.         assertThat(matchNoDocsQuery.toString(), containsString("No terms supplied for \"terms_set\" query.")).     } else {         assertThat(query, instanceOf(CoveringQuery.class)).     } }
false;protected;1;5;;@Override protected boolean isCacheable(TermsSetQueryBuilder queryBuilder) {     return queryBuilder.getMinimumShouldMatchField() != null || (queryBuilder.getMinimumShouldMatchScript() != null && queryBuilder.getValues().isEmpty()). }
false;protected;0;4;;@Override protected boolean builderGeneratesCacheableQueries() {     return false. }
false;public;1;34;;@Override public TermsSetQueryBuilder mutateInstance(final TermsSetQueryBuilder instance) throws IOException {     String fieldName = instance.getFieldName().     List<?> values = instance.getValues().     String minimumShouldMatchField = null.     Script minimumShouldMatchScript = null.     switch(randomIntBetween(0, 3)) {         case 0:             Predicate<String> predicate = s -> s.equals(instance.getFieldName()) == false && s.equals(GEO_POINT_FIELD_NAME) == false && s.equals(GEO_SHAPE_FIELD_NAME) == false.             fieldName = randomValueOtherThanMany(predicate, () -> randomFrom(MAPPED_FIELD_NAMES)).             values = randomValues(fieldName).             break.         case 1:             values = randomValues(fieldName).             break.         case 2:             minimumShouldMatchField = randomAlphaOfLengthBetween(1, 10).             break.         case 3:             minimumShouldMatchScript = new Script(ScriptType.INLINE, MockScriptEngine.NAME, randomAlphaOfLength(10), emptyMap()).             break.     }     TermsSetQueryBuilder newInstance = new TermsSetQueryBuilder(fieldName, values).     if (minimumShouldMatchField != null) {         newInstance.setMinimumShouldMatchField(minimumShouldMatchField).     }     if (minimumShouldMatchScript != null) {         newInstance.setMinimumShouldMatchScript(minimumShouldMatchScript).     }     return newInstance. }
false;public;0;9;;public void testBothFieldAndScriptSpecified() {     TermsSetQueryBuilder queryBuilder = new TermsSetQueryBuilder("_field", Collections.emptyList()).     queryBuilder.setMinimumShouldMatchScript(new Script("")).     expectThrows(IllegalArgumentException.class, () -> queryBuilder.setMinimumShouldMatchField("_field")).     queryBuilder.setMinimumShouldMatchScript(null).     queryBuilder.setMinimumShouldMatchField("_field").     expectThrows(IllegalArgumentException.class, () -> queryBuilder.setMinimumShouldMatchScript(new Script(""))). }
false;public;0;49;;public void testDoToQuery() throws Exception {     try (Directory directory = newDirectory()) {         IndexWriterConfig config = new IndexWriterConfig(new WhitespaceAnalyzer()).         config.setMergePolicy(NoMergePolicy.INSTANCE).         try (IndexWriter iw = new IndexWriter(directory, config)) {             Document document = new Document().             document.add(new TextField("message", "a b", Field.Store.NO)).             document.add(new SortedNumericDocValuesField("m_s_m", 1)).             iw.addDocument(document).             document = new Document().             document.add(new TextField("message", "a b c", Field.Store.NO)).             document.add(new SortedNumericDocValuesField("m_s_m", 1)).             iw.addDocument(document).             document = new Document().             document.add(new TextField("message", "a b c", Field.Store.NO)).             document.add(new SortedNumericDocValuesField("m_s_m", 2)).             iw.addDocument(document).             document = new Document().             document.add(new TextField("message", "a b c d", Field.Store.NO)).             document.add(new SortedNumericDocValuesField("m_s_m", 1)).             iw.addDocument(document).             document = new Document().             document.add(new TextField("message", "a b c d", Field.Store.NO)).             document.add(new SortedNumericDocValuesField("m_s_m", 2)).             iw.addDocument(document).             document = new Document().             document.add(new TextField("message", "a b c d", Field.Store.NO)).             document.add(new SortedNumericDocValuesField("m_s_m", 3)).             iw.addDocument(document).         }         try (IndexReader ir = DirectoryReader.open(directory)) {             QueryShardContext context = createShardContext().             Query query = new TermsSetQueryBuilder("message", Arrays.asList("c", "d")).setMinimumShouldMatchField("m_s_m").doToQuery(context).             IndexSearcher searcher = new IndexSearcher(ir).             TopDocs topDocs = searcher.search(query, 10, new Sort(SortField.FIELD_DOC)).             assertThat(topDocs.totalHits.value, equalTo(3L)).             assertThat(topDocs.scoreDocs[0].doc, equalTo(1)).             assertThat(topDocs.scoreDocs[1].doc, equalTo(3)).             assertThat(topDocs.scoreDocs[2].doc, equalTo(4)).         }     } }
false;public;0;45;;public void testDoToQuery_msmScriptField() throws Exception {     try (Directory directory = newDirectory()) {         IndexWriterConfig config = new IndexWriterConfig(new WhitespaceAnalyzer()).         config.setMergePolicy(NoMergePolicy.INSTANCE).         try (IndexWriter iw = new IndexWriter(directory, config)) {             Document document = new Document().             document.add(new TextField("message", "a b x y", Field.Store.NO)).             document.add(new SortedNumericDocValuesField("m_s_m", 50)).             iw.addDocument(document).             document = new Document().             document.add(new TextField("message", "a b x y", Field.Store.NO)).             document.add(new SortedNumericDocValuesField("m_s_m", 75)).             iw.addDocument(document).             document = new Document().             document.add(new TextField("message", "a b c x", Field.Store.NO)).             document.add(new SortedNumericDocValuesField("m_s_m", 75)).             iw.addDocument(document).             document = new Document().             document.add(new TextField("message", "a b c x", Field.Store.NO)).             document.add(new SortedNumericDocValuesField("m_s_m", 100)).             iw.addDocument(document).             document = new Document().             document.add(new TextField("message", "a b c d", Field.Store.NO)).             document.add(new SortedNumericDocValuesField("m_s_m", 100)).             iw.addDocument(document).         }         try (IndexReader ir = DirectoryReader.open(directory)) {             QueryShardContext context = createShardContext().             Script script = new Script(ScriptType.INLINE, MockScriptEngine.NAME, "_script", emptyMap()).             Query query = new TermsSetQueryBuilder("message", Arrays.asList("a", "b", "c", "d")).setMinimumShouldMatchScript(script).doToQuery(context).             IndexSearcher searcher = new IndexSearcher(ir).             TopDocs topDocs = searcher.search(query, 10, new Sort(SortField.FIELD_DOC)).             assertThat(topDocs.totalHits.value, equalTo(3L)).             assertThat(topDocs.scoreDocs[0].doc, equalTo(0)).             assertThat(topDocs.scoreDocs[1].doc, equalTo(2)).             assertThat(topDocs.scoreDocs[2].doc, equalTo(4)).         }     } }
false;public;0;15;;public void testFieldAlias() {     List<String> randomTerms = Arrays.asList(generateRandomStringArray(5, 10, false, false)).     TermsSetQueryBuilder queryBuilder = new TermsSetQueryBuilder(STRING_ALIAS_FIELD_NAME, randomTerms).setMinimumShouldMatchField("m_s_m").     QueryShardContext context = createShardContext().     List<Query> termQueries = queryBuilder.createTermQueries(context).     assertEquals(randomTerms.size(), termQueries.size()).     String expectedFieldName = expectedFieldName(queryBuilder.getFieldName()).     for (int i = 0. i < randomTerms.size(). i++) {         Term term = new Term(expectedFieldName, randomTerms.get(i)).         assertThat(termQueries.get(i), equalTo(new TermQuery(term))).     } }
false;private,static;1;9;;private static List<?> randomValues(final String fieldName) {     final int numValues = randomIntBetween(0, 10).     final List<Object> values = new ArrayList<>(numValues).     for (int i = 0. i < numValues. i++) {         values.add(getRandomValueForFieldName(fieldName)).     }     return values. }
false;protected;0;12;;@Override protected Map<String, Function<Map<String, Object>, Object>> pluginScripts() {     return Collections.singletonMap("_script", args -> {         try {             int clauseCount = ObjectPath.evaluate(args, "params.num_terms").             long msm = ((ScriptDocValues.Longs) ObjectPath.evaluate(args, "doc.m_s_m")).getValue().             return clauseCount * (msm / 100d).         } catch (IOException e) {             throw new UncheckedIOException(e).         }     }). }
