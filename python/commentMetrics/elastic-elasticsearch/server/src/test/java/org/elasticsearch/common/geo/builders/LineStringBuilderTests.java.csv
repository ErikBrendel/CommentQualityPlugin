commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;public void testInvalidConstructorArgs() {     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new LineStringBuilder((List<Coordinate>) null)).     assertEquals("cannot create point collection with empty set of points", e.getMessage()).     e = expectThrows(IllegalArgumentException.class, () -> new LineStringBuilder(new CoordinatesBuilder())).     assertEquals("cannot create point collection with empty set of points", e.getMessage()).     e = expectThrows(IllegalArgumentException.class, () -> new LineStringBuilder(new CoordinatesBuilder().coordinate(0.0, 0.0))).     assertEquals("invalid number of points in LineString (found [1] - must be >= 2)", e.getMessage()). }
false;protected;0;4;;@Override protected LineStringBuilder createTestShapeBuilder() {     return createRandomShape(). }
false;protected;1;4;;@Override protected LineStringBuilder createMutation(LineStringBuilder original) throws IOException {     return mutate(original). }
false;static;1;19;;static LineStringBuilder mutate(LineStringBuilder original) throws IOException {     LineStringBuilder mutation = copyShape(original).     Coordinate[] coordinates = original.coordinates(false).     Coordinate coordinate = randomFrom(coordinates).     if (randomBoolean()) {         if (coordinate.x != 0.0) {             coordinate.x = coordinate.x / 2.         } else {             coordinate.x = randomDoubleBetween(-180.0, 180.0, true).         }     } else {         if (coordinate.y != 0.0) {             coordinate.y = coordinate.y / 2.         } else {             coordinate.y = randomDoubleBetween(-90.0, 90.0, true).         }     }     return LineStringBuilder.class.cast(mutation.coordinates(coordinates)). }
false;static;0;7;;static LineStringBuilder createRandomShape() {     LineStringBuilder lsb = (LineStringBuilder) RandomShapeGenerator.createShape(random(), ShapeType.LINESTRING).     if (randomBoolean()) {         lsb.close().     }     return lsb. }
