commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected Environment createEnv(Map<String, String> settings) throws UserException {     return env. }
false;protected;0;9;;@Override protected Command newCommand() {     return new AddFileKeyStoreCommand() {          @Override         protected Environment createEnv(Map<String, String> settings) throws UserException {             return env.         }     }. }
false;private;0;10;;private Path createRandomFile() throws IOException {     int length = randomIntBetween(10, 20).     byte[] bytes = new byte[length].     for (int i = 0. i < length. ++i) {         bytes[i] = randomByte().     }     Path file = env.configFile().resolve("randomfile").     Files.write(file, bytes).     return file. }
false;private;3;4;;private void addFile(KeyStoreWrapper keystore, String setting, Path file) throws Exception {     keystore.setFile(setting, Files.readAllBytes(file)).     keystore.save(env.configFile(), new char[0]). }
false;public;0;6;;public void testMissingPromptCreate() throws Exception {     Path file1 = createRandomFile().     terminal.addTextInput("y").     execute("foo", file1.toString()).     assertSecureFile("foo", file1). }
false;public;0;6;;public void testMissingForceCreate() throws Exception {     Path file1 = createRandomFile().     terminal.addSecretInput("bar").     execute("-f", "foo", file1.toString()).     assertSecureFile("foo", file1). }
false;public;0;5;;public void testMissingNoCreate() throws Exception {     // explicit no     terminal.addTextInput("n").     execute("foo").     assertNull(KeyStoreWrapper.load(env.configFile())). }
false;public;0;8;;public void testOverwritePromptDefault() throws Exception {     Path file = createRandomFile().     KeyStoreWrapper keystore = createKeystore("").     addFile(keystore, "foo", file).     terminal.addTextInput("").     execute("foo", "path/dne").     assertSecureFile("foo", file). }
false;public;0;8;;public void testOverwritePromptExplicitNo() throws Exception {     Path file = createRandomFile().     KeyStoreWrapper keystore = createKeystore("").     addFile(keystore, "foo", file).     // explicit no     terminal.addTextInput("n").     execute("foo", "path/dne").     assertSecureFile("foo", file). }
false;public;0;9;;public void testOverwritePromptExplicitYes() throws Exception {     Path file1 = createRandomFile().     KeyStoreWrapper keystore = createKeystore("").     addFile(keystore, "foo", file1).     terminal.addTextInput("y").     Path file2 = createRandomFile().     execute("foo", file2.toString()).     assertSecureFile("foo", file2). }
false;public;0;8;;public void testOverwriteForceShort() throws Exception {     Path file1 = createRandomFile().     KeyStoreWrapper keystore = createKeystore("").     addFile(keystore, "foo", file1).     Path file2 = createRandomFile().     execute("-f", "foo", file2.toString()).     assertSecureFile("foo", file2). }
false;public;0;8;;public void testOverwriteForceLong() throws Exception {     Path file1 = createRandomFile().     KeyStoreWrapper keystore = createKeystore("").     addFile(keystore, "foo", file1).     Path file2 = createRandomFile().     execute("--force", "foo", file2.toString()).     assertSecureFile("foo", file2). }
false;public;0;6;;public void testForceNonExistent() throws Exception {     createKeystore("").     Path file = createRandomFile().     execute("--force", "foo", file.toString()).     assertSecureFile("foo", file). }
false;public;0;6;;public void testMissingSettingName() throws Exception {     createKeystore("").     UserException e = expectThrows(UserException.class, this::execute).     assertEquals(ExitCodes.USAGE, e.exitCode).     assertThat(e.getMessage(), containsString("Missing setting name")). }
false;public;0;6;;public void testMissingFileName() throws Exception {     createKeystore("").     UserException e = expectThrows(UserException.class, () -> execute("foo")).     assertEquals(ExitCodes.USAGE, e.exitCode).     assertThat(e.getMessage(), containsString("Missing file name")). }
false;public;0;6;;public void testFileDNE() throws Exception {     createKeystore("").     UserException e = expectThrows(UserException.class, () -> execute("foo", "path/dne")).     assertEquals(ExitCodes.IO_ERROR, e.exitCode).     assertThat(e.getMessage(), containsString("File [path/dne] does not exist")). }
false;public;0;7;;public void testExtraArguments() throws Exception {     createKeystore("").     Path file = createRandomFile().     UserException e = expectThrows(UserException.class, () -> execute("foo", file.toString(), "bar")).     assertEquals(e.getMessage(), ExitCodes.USAGE, e.exitCode).     assertThat(e.getMessage(), containsString("Unrecognized extra arguments [bar]")). }
