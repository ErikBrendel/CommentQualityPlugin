# id;timestamp;commentText;codeText;commentWords;codeWords
DirectCandidateGeneratorTests -> public void testEqualsAndHashcode() throws IOException;1524684173;Test equality and hashCode properties;public void testEqualsAndHashcode() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_RUNS_ runs++) {_            final DirectCandidateGeneratorBuilder original = randomCandidateGenerator()__            checkEqualsAndHashCode(original, DirectCandidateGeneratorTests::copy, DirectCandidateGeneratorTests::mutate)__        }_    };test,equality,and,hash,code,properties;public,void,test,equals,and,hashcode,throws,ioexception,for,int,runs,0,runs,runs,final,direct,candidate,generator,builder,original,random,candidate,generator,check,equals,and,hash,code,original,direct,candidate,generator,tests,copy,direct,candidate,generator,tests,mutate
DirectCandidateGeneratorTests -> public void testEqualsAndHashcode() throws IOException;1529916084;Test equality and hashCode properties;public void testEqualsAndHashcode() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_RUNS_ runs++) {_            final DirectCandidateGeneratorBuilder original = randomCandidateGenerator()__            checkEqualsAndHashCode(original, DirectCandidateGeneratorTests::copy, DirectCandidateGeneratorTests::mutate)__        }_    };test,equality,and,hash,code,properties;public,void,test,equals,and,hashcode,throws,ioexception,for,int,runs,0,runs,runs,final,direct,candidate,generator,builder,original,random,candidate,generator,check,equals,and,hash,code,original,direct,candidate,generator,tests,copy,direct,candidate,generator,tests,mutate
DirectCandidateGeneratorTests -> public void testEqualsAndHashcode() throws IOException;1536314350;Test equality and hashCode properties;public void testEqualsAndHashcode() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_RUNS_ runs++) {_            final DirectCandidateGeneratorBuilder original = randomCandidateGenerator()__            checkEqualsAndHashCode(original, DirectCandidateGeneratorTests::copy, DirectCandidateGeneratorTests::mutate)__        }_    };test,equality,and,hash,code,properties;public,void,test,equals,and,hashcode,throws,ioexception,for,int,runs,0,runs,runs,final,direct,candidate,generator,builder,original,random,candidate,generator,check,equals,and,hash,code,original,direct,candidate,generator,tests,copy,direct,candidate,generator,tests,mutate
DirectCandidateGeneratorTests -> public void testEqualsAndHashcode() throws IOException;1539951844;Test equality and hashCode properties;public void testEqualsAndHashcode() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_RUNS_ runs++) {_            final DirectCandidateGeneratorBuilder original = randomCandidateGenerator()__            checkEqualsAndHashCode(original, DirectCandidateGeneratorTests::copy, DirectCandidateGeneratorTests::mutate)__        }_    };test,equality,and,hash,code,properties;public,void,test,equals,and,hashcode,throws,ioexception,for,int,runs,0,runs,runs,final,direct,candidate,generator,builder,original,random,candidate,generator,check,equals,and,hash,code,original,direct,candidate,generator,tests,copy,direct,candidate,generator,tests,mutate
DirectCandidateGeneratorTests -> public void testIllegalXContent() throws IOException;1524684173;test that bad xContent throws exception;public void testIllegalXContent() throws IOException {_        _        String directGenerator = "{ }"__        assertIllegalXContent(directGenerator, IllegalArgumentException.class,_                "Required [field]")___        _        if (XContent.isStrictDuplicateDetectionEnabled()) {_            logger.info("Skipping test as it uses a custom duplicate check that is obsolete when strict duplicate checks are enabled.")__        } else {_            directGenerator = "{ \"field\" : \"f1\", \"field\" : \"f2\" }"__            assertIllegalXContent(directGenerator, IllegalArgumentException.class,_                "[direct_generator] failed to parse field [field]")__        }__        _        directGenerator = "{ \"unknown_param\" : \"f1\" }"__        assertIllegalXContent(directGenerator, IllegalArgumentException.class,_                "[direct_generator] unknown field [unknown_param], parser not found")___        _        directGenerator = "{ \"size\" : \"xxl\" }"__        assertIllegalXContent(directGenerator, XContentParseException.class,_                "[direct_generator] failed to parse field [size]")___        _        directGenerator = "{ \"size\" : [ \"xxl\" ] }"__        assertIllegalXContent(directGenerator, XContentParseException.class,_                "[direct_generator] size doesn't support values of type: START_ARRAY")__    };test,that,bad,x,content,throws,exception;public,void,test,illegal,xcontent,throws,ioexception,string,direct,generator,assert,illegal,xcontent,direct,generator,illegal,argument,exception,class,required,field,if,xcontent,is,strict,duplicate,detection,enabled,logger,info,skipping,test,as,it,uses,a,custom,duplicate,check,that,is,obsolete,when,strict,duplicate,checks,are,enabled,else,direct,generator,field,f1,field,f2,assert,illegal,xcontent,direct,generator,illegal,argument,exception,class,failed,to,parse,field,field,direct,generator,f1,assert,illegal,xcontent,direct,generator,illegal,argument,exception,class,unknown,field,parser,not,found,direct,generator,size,xxl,assert,illegal,xcontent,direct,generator,xcontent,parse,exception,class,failed,to,parse,field,size,direct,generator,size,xxl,assert,illegal,xcontent,direct,generator,xcontent,parse,exception,class,size,doesn,t,support,values,of,type
DirectCandidateGeneratorTests -> public void testIllegalXContent() throws IOException;1529916084;test that bad xContent throws exception;public void testIllegalXContent() throws IOException {_        _        String directGenerator = "{ }"__        assertIllegalXContent(directGenerator, IllegalArgumentException.class,_                "Required [field]")___        _        if (XContent.isStrictDuplicateDetectionEnabled()) {_            logger.info("Skipping test as it uses a custom duplicate check that is obsolete when strict duplicate checks are enabled.")__        } else {_            directGenerator = "{ \"field\" : \"f1\", \"field\" : \"f2\" }"__            assertIllegalXContent(directGenerator, IllegalArgumentException.class,_                "[direct_generator] failed to parse field [field]")__        }__        _        directGenerator = "{ \"unknown_param\" : \"f1\" }"__        assertIllegalXContent(directGenerator, IllegalArgumentException.class,_                "[direct_generator] unknown field [unknown_param], parser not found")___        _        directGenerator = "{ \"size\" : \"xxl\" }"__        assertIllegalXContent(directGenerator, XContentParseException.class,_                "[direct_generator] failed to parse field [size]")___        _        directGenerator = "{ \"size\" : [ \"xxl\" ] }"__        assertIllegalXContent(directGenerator, XContentParseException.class,_                "[direct_generator] size doesn't support values of type: START_ARRAY")__    };test,that,bad,x,content,throws,exception;public,void,test,illegal,xcontent,throws,ioexception,string,direct,generator,assert,illegal,xcontent,direct,generator,illegal,argument,exception,class,required,field,if,xcontent,is,strict,duplicate,detection,enabled,logger,info,skipping,test,as,it,uses,a,custom,duplicate,check,that,is,obsolete,when,strict,duplicate,checks,are,enabled,else,direct,generator,field,f1,field,f2,assert,illegal,xcontent,direct,generator,illegal,argument,exception,class,failed,to,parse,field,field,direct,generator,f1,assert,illegal,xcontent,direct,generator,illegal,argument,exception,class,unknown,field,parser,not,found,direct,generator,size,xxl,assert,illegal,xcontent,direct,generator,xcontent,parse,exception,class,failed,to,parse,field,size,direct,generator,size,xxl,assert,illegal,xcontent,direct,generator,xcontent,parse,exception,class,size,doesn,t,support,values,of,type
DirectCandidateGeneratorTests -> public void testIllegalXContent() throws IOException;1536314350;test that bad xContent throws exception;public void testIllegalXContent() throws IOException {_        _        String directGenerator = "{ }"__        assertIllegalXContent(directGenerator, IllegalArgumentException.class,_                "Required [field]")___        _        if (XContent.isStrictDuplicateDetectionEnabled()) {_            logger.info("Skipping test as it uses a custom duplicate check that is obsolete when strict duplicate checks are enabled.")__        } else {_            directGenerator = "{ \"field\" : \"f1\", \"field\" : \"f2\" }"__            assertIllegalXContent(directGenerator, IllegalArgumentException.class,_                "[direct_generator] failed to parse field [field]")__        }__        _        directGenerator = "{ \"unknown_param\" : \"f1\" }"__        assertIllegalXContent(directGenerator, IllegalArgumentException.class,_                "[direct_generator] unknown field [unknown_param], parser not found")___        _        directGenerator = "{ \"size\" : \"xxl\" }"__        assertIllegalXContent(directGenerator, XContentParseException.class,_                "[direct_generator] failed to parse field [size]")___        _        directGenerator = "{ \"size\" : [ \"xxl\" ] }"__        assertIllegalXContent(directGenerator, XContentParseException.class,_                "[direct_generator] size doesn't support values of type: START_ARRAY")__    };test,that,bad,x,content,throws,exception;public,void,test,illegal,xcontent,throws,ioexception,string,direct,generator,assert,illegal,xcontent,direct,generator,illegal,argument,exception,class,required,field,if,xcontent,is,strict,duplicate,detection,enabled,logger,info,skipping,test,as,it,uses,a,custom,duplicate,check,that,is,obsolete,when,strict,duplicate,checks,are,enabled,else,direct,generator,field,f1,field,f2,assert,illegal,xcontent,direct,generator,illegal,argument,exception,class,failed,to,parse,field,field,direct,generator,f1,assert,illegal,xcontent,direct,generator,illegal,argument,exception,class,unknown,field,parser,not,found,direct,generator,size,xxl,assert,illegal,xcontent,direct,generator,xcontent,parse,exception,class,failed,to,parse,field,size,direct,generator,size,xxl,assert,illegal,xcontent,direct,generator,xcontent,parse,exception,class,size,doesn,t,support,values,of,type
DirectCandidateGeneratorTests -> public void testIllegalXContent() throws IOException;1539951844;test that bad xContent throws exception;public void testIllegalXContent() throws IOException {_        _        String directGenerator = "{ }"__        assertIllegalXContent(directGenerator, IllegalArgumentException.class,_                "Required [field]")___        _        directGenerator = "{ \"unknown_param\" : \"f1\" }"__        assertIllegalXContent(directGenerator, IllegalArgumentException.class,_                "[direct_generator] unknown field [unknown_param], parser not found")___        _        directGenerator = "{ \"size\" : \"xxl\" }"__        assertIllegalXContent(directGenerator, XContentParseException.class,_                "[direct_generator] failed to parse field [size]")___        _        directGenerator = "{ \"size\" : [ \"xxl\" ] }"__        assertIllegalXContent(directGenerator, XContentParseException.class,_                "[direct_generator] size doesn't support values of type: START_ARRAY")__    };test,that,bad,x,content,throws,exception;public,void,test,illegal,xcontent,throws,ioexception,string,direct,generator,assert,illegal,xcontent,direct,generator,illegal,argument,exception,class,required,field,direct,generator,f1,assert,illegal,xcontent,direct,generator,illegal,argument,exception,class,unknown,field,parser,not,found,direct,generator,size,xxl,assert,illegal,xcontent,direct,generator,xcontent,parse,exception,class,failed,to,parse,field,size,direct,generator,size,xxl,assert,illegal,xcontent,direct,generator,xcontent,parse,exception,class,size,doesn,t,support,values,of,type
DirectCandidateGeneratorTests -> public void testFromXContent() throws IOException;1524684173;creates random candidate generator, renders it to xContent and back to new instance that should be equal to original;public void testFromXContent() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_RUNS_ runs++) {_            DirectCandidateGeneratorBuilder generator = randomCandidateGenerator()__            XContentBuilder builder = XContentFactory.contentBuilder(randomFrom(XContentType.values()))__            if (randomBoolean()) {_                builder.prettyPrint()__            }_            generator.toXContent(builder, ToXContent.EMPTY_PARAMS)__            XContentParser parser = createParser(shuffleXContent(builder))__            parser.nextToken()__            DirectCandidateGeneratorBuilder secondGenerator = DirectCandidateGeneratorBuilder.PARSER.apply(parser, null)__            assertNotSame(generator, secondGenerator)__            assertEquals(generator, secondGenerator)__            assertEquals(generator.hashCode(), secondGenerator.hashCode())__        }_    };creates,random,candidate,generator,renders,it,to,x,content,and,back,to,new,instance,that,should,be,equal,to,original;public,void,test,from,xcontent,throws,ioexception,for,int,runs,0,runs,runs,direct,candidate,generator,builder,generator,random,candidate,generator,xcontent,builder,builder,xcontent,factory,content,builder,random,from,xcontent,type,values,if,random,boolean,builder,pretty,print,generator,to,xcontent,builder,to,xcontent,xcontent,parser,parser,create,parser,shuffle,xcontent,builder,parser,next,token,direct,candidate,generator,builder,second,generator,direct,candidate,generator,builder,parser,apply,parser,null,assert,not,same,generator,second,generator,assert,equals,generator,second,generator,assert,equals,generator,hash,code,second,generator,hash,code
DirectCandidateGeneratorTests -> public void testFromXContent() throws IOException;1529916084;creates random candidate generator, renders it to xContent and back to new instance that should be equal to original;public void testFromXContent() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_RUNS_ runs++) {_            DirectCandidateGeneratorBuilder generator = randomCandidateGenerator()__            XContentBuilder builder = XContentFactory.contentBuilder(randomFrom(XContentType.values()))__            if (randomBoolean()) {_                builder.prettyPrint()__            }_            generator.toXContent(builder, ToXContent.EMPTY_PARAMS)__            try (XContentParser parser = createParser(shuffleXContent(builder))) {_                parser.nextToken()__                DirectCandidateGeneratorBuilder secondGenerator = DirectCandidateGeneratorBuilder.PARSER.apply(parser, null)__                assertNotSame(generator, secondGenerator)__                assertEquals(generator, secondGenerator)__                assertEquals(generator.hashCode(), secondGenerator.hashCode())__            }_        }_    };creates,random,candidate,generator,renders,it,to,x,content,and,back,to,new,instance,that,should,be,equal,to,original;public,void,test,from,xcontent,throws,ioexception,for,int,runs,0,runs,runs,direct,candidate,generator,builder,generator,random,candidate,generator,xcontent,builder,builder,xcontent,factory,content,builder,random,from,xcontent,type,values,if,random,boolean,builder,pretty,print,generator,to,xcontent,builder,to,xcontent,try,xcontent,parser,parser,create,parser,shuffle,xcontent,builder,parser,next,token,direct,candidate,generator,builder,second,generator,direct,candidate,generator,builder,parser,apply,parser,null,assert,not,same,generator,second,generator,assert,equals,generator,second,generator,assert,equals,generator,hash,code,second,generator,hash,code
DirectCandidateGeneratorTests -> public void testFromXContent() throws IOException;1536314350;creates random candidate generator, renders it to xContent and back to new instance that should be equal to original;public void testFromXContent() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_RUNS_ runs++) {_            DirectCandidateGeneratorBuilder generator = randomCandidateGenerator()__            XContentBuilder builder = XContentFactory.contentBuilder(randomFrom(XContentType.values()))__            if (randomBoolean()) {_                builder.prettyPrint()__            }_            generator.toXContent(builder, ToXContent.EMPTY_PARAMS)__            try (XContentParser parser = createParser(shuffleXContent(builder))) {_                parser.nextToken()__                DirectCandidateGeneratorBuilder secondGenerator = DirectCandidateGeneratorBuilder.PARSER.apply(parser, null)__                assertNotSame(generator, secondGenerator)__                assertEquals(generator, secondGenerator)__                assertEquals(generator.hashCode(), secondGenerator.hashCode())__            }_        }_    };creates,random,candidate,generator,renders,it,to,x,content,and,back,to,new,instance,that,should,be,equal,to,original;public,void,test,from,xcontent,throws,ioexception,for,int,runs,0,runs,runs,direct,candidate,generator,builder,generator,random,candidate,generator,xcontent,builder,builder,xcontent,factory,content,builder,random,from,xcontent,type,values,if,random,boolean,builder,pretty,print,generator,to,xcontent,builder,to,xcontent,try,xcontent,parser,parser,create,parser,shuffle,xcontent,builder,parser,next,token,direct,candidate,generator,builder,second,generator,direct,candidate,generator,builder,parser,apply,parser,null,assert,not,same,generator,second,generator,assert,equals,generator,second,generator,assert,equals,generator,hash,code,second,generator,hash,code
DirectCandidateGeneratorTests -> public void testFromXContent() throws IOException;1539951844;creates random candidate generator, renders it to xContent and back to new instance that should be equal to original;public void testFromXContent() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_RUNS_ runs++) {_            DirectCandidateGeneratorBuilder generator = randomCandidateGenerator()__            XContentBuilder builder = XContentFactory.contentBuilder(randomFrom(XContentType.values()))__            if (randomBoolean()) {_                builder.prettyPrint()__            }_            generator.toXContent(builder, ToXContent.EMPTY_PARAMS)__            try (XContentParser parser = createParser(shuffleXContent(builder))) {_                parser.nextToken()__                DirectCandidateGeneratorBuilder secondGenerator = DirectCandidateGeneratorBuilder.PARSER.apply(parser, null)__                assertNotSame(generator, secondGenerator)__                assertEquals(generator, secondGenerator)__                assertEquals(generator.hashCode(), secondGenerator.hashCode())__            }_        }_    };creates,random,candidate,generator,renders,it,to,x,content,and,back,to,new,instance,that,should,be,equal,to,original;public,void,test,from,xcontent,throws,ioexception,for,int,runs,0,runs,runs,direct,candidate,generator,builder,generator,random,candidate,generator,xcontent,builder,builder,xcontent,factory,content,builder,random,from,xcontent,type,values,if,random,boolean,builder,pretty,print,generator,to,xcontent,builder,to,xcontent,try,xcontent,parser,parser,create,parser,shuffle,xcontent,builder,parser,next,token,direct,candidate,generator,builder,second,generator,direct,candidate,generator,builder,parser,apply,parser,null,assert,not,same,generator,second,generator,assert,equals,generator,second,generator,assert,equals,generator,hash,code,second,generator,hash,code
DirectCandidateGeneratorTests -> public static DirectCandidateGeneratorBuilder randomCandidateGenerator();1524684173;create random {@link DirectCandidateGeneratorBuilder};public static DirectCandidateGeneratorBuilder randomCandidateGenerator() {_        DirectCandidateGeneratorBuilder generator = new DirectCandidateGeneratorBuilder(randomAlphaOfLength(10))__        maybeSet(generator::accuracy, randomFloat())__        maybeSet(generator::maxEdits, randomIntBetween(1, 2))__        maybeSet(generator::maxInspections, randomIntBetween(1, 20))__        maybeSet(generator::maxTermFreq, randomFloat())__        maybeSet(generator::minDocFreq, randomFloat())__        maybeSet(generator::minWordLength, randomIntBetween(1, 20))__        maybeSet(generator::prefixLength, randomIntBetween(1, 20))__        maybeSet(generator::preFilter, randomAlphaOfLengthBetween(1, 20))__        maybeSet(generator::postFilter, randomAlphaOfLengthBetween(1, 20))__        maybeSet(generator::size, randomIntBetween(1, 20))__        maybeSet(generator::sort, randomFrom("score", "frequency"))__        maybeSet(generator::stringDistance,_                randomFrom("internal", "damerau_levenshtein", "levenshtein", "jaro_winkler", "ngram"))__        maybeSet(generator::suggestMode, randomFrom("missing", "popular", "always"))__        return generator__    };create,random,link,direct,candidate,generator,builder;public,static,direct,candidate,generator,builder,random,candidate,generator,direct,candidate,generator,builder,generator,new,direct,candidate,generator,builder,random,alpha,of,length,10,maybe,set,generator,accuracy,random,float,maybe,set,generator,max,edits,random,int,between,1,2,maybe,set,generator,max,inspections,random,int,between,1,20,maybe,set,generator,max,term,freq,random,float,maybe,set,generator,min,doc,freq,random,float,maybe,set,generator,min,word,length,random,int,between,1,20,maybe,set,generator,prefix,length,random,int,between,1,20,maybe,set,generator,pre,filter,random,alpha,of,length,between,1,20,maybe,set,generator,post,filter,random,alpha,of,length,between,1,20,maybe,set,generator,size,random,int,between,1,20,maybe,set,generator,sort,random,from,score,frequency,maybe,set,generator,string,distance,random,from,internal,levenshtein,ngram,maybe,set,generator,suggest,mode,random,from,missing,popular,always,return,generator
DirectCandidateGeneratorTests -> public static DirectCandidateGeneratorBuilder randomCandidateGenerator();1529916084;create random {@link DirectCandidateGeneratorBuilder};public static DirectCandidateGeneratorBuilder randomCandidateGenerator() {_        DirectCandidateGeneratorBuilder generator = new DirectCandidateGeneratorBuilder(randomAlphaOfLength(10))__        maybeSet(generator::accuracy, randomFloat())__        maybeSet(generator::maxEdits, randomIntBetween(1, 2))__        maybeSet(generator::maxInspections, randomIntBetween(1, 20))__        maybeSet(generator::maxTermFreq, randomFloat())__        maybeSet(generator::minDocFreq, randomFloat())__        maybeSet(generator::minWordLength, randomIntBetween(1, 20))__        maybeSet(generator::prefixLength, randomIntBetween(1, 20))__        maybeSet(generator::preFilter, randomAlphaOfLengthBetween(1, 20))__        maybeSet(generator::postFilter, randomAlphaOfLengthBetween(1, 20))__        maybeSet(generator::size, randomIntBetween(1, 20))__        maybeSet(generator::sort, randomFrom("score", "frequency"))__        maybeSet(generator::stringDistance,_                randomFrom("internal", "damerau_levenshtein", "levenshtein", "jaro_winkler", "ngram"))__        maybeSet(generator::suggestMode, randomFrom("missing", "popular", "always"))__        return generator__    };create,random,link,direct,candidate,generator,builder;public,static,direct,candidate,generator,builder,random,candidate,generator,direct,candidate,generator,builder,generator,new,direct,candidate,generator,builder,random,alpha,of,length,10,maybe,set,generator,accuracy,random,float,maybe,set,generator,max,edits,random,int,between,1,2,maybe,set,generator,max,inspections,random,int,between,1,20,maybe,set,generator,max,term,freq,random,float,maybe,set,generator,min,doc,freq,random,float,maybe,set,generator,min,word,length,random,int,between,1,20,maybe,set,generator,prefix,length,random,int,between,1,20,maybe,set,generator,pre,filter,random,alpha,of,length,between,1,20,maybe,set,generator,post,filter,random,alpha,of,length,between,1,20,maybe,set,generator,size,random,int,between,1,20,maybe,set,generator,sort,random,from,score,frequency,maybe,set,generator,string,distance,random,from,internal,levenshtein,ngram,maybe,set,generator,suggest,mode,random,from,missing,popular,always,return,generator
DirectCandidateGeneratorTests -> public static DirectCandidateGeneratorBuilder randomCandidateGenerator();1536314350;create random {@link DirectCandidateGeneratorBuilder};public static DirectCandidateGeneratorBuilder randomCandidateGenerator() {_        DirectCandidateGeneratorBuilder generator = new DirectCandidateGeneratorBuilder(randomAlphaOfLength(10))__        maybeSet(generator::accuracy, randomFloat())__        maybeSet(generator::maxEdits, randomIntBetween(1, 2))__        maybeSet(generator::maxInspections, randomIntBetween(1, 20))__        maybeSet(generator::maxTermFreq, randomFloat())__        maybeSet(generator::minDocFreq, randomFloat())__        maybeSet(generator::minWordLength, randomIntBetween(1, 20))__        maybeSet(generator::prefixLength, randomIntBetween(1, 20))__        maybeSet(generator::preFilter, randomAlphaOfLengthBetween(1, 20))__        maybeSet(generator::postFilter, randomAlphaOfLengthBetween(1, 20))__        maybeSet(generator::size, randomIntBetween(1, 20))__        maybeSet(generator::sort, randomFrom("score", "frequency"))__        maybeSet(generator::stringDistance,_                randomFrom("internal", "damerau_levenshtein", "levenshtein", "jaro_winkler", "ngram"))__        maybeSet(generator::suggestMode, randomFrom("missing", "popular", "always"))__        return generator__    };create,random,link,direct,candidate,generator,builder;public,static,direct,candidate,generator,builder,random,candidate,generator,direct,candidate,generator,builder,generator,new,direct,candidate,generator,builder,random,alpha,of,length,10,maybe,set,generator,accuracy,random,float,maybe,set,generator,max,edits,random,int,between,1,2,maybe,set,generator,max,inspections,random,int,between,1,20,maybe,set,generator,max,term,freq,random,float,maybe,set,generator,min,doc,freq,random,float,maybe,set,generator,min,word,length,random,int,between,1,20,maybe,set,generator,prefix,length,random,int,between,1,20,maybe,set,generator,pre,filter,random,alpha,of,length,between,1,20,maybe,set,generator,post,filter,random,alpha,of,length,between,1,20,maybe,set,generator,size,random,int,between,1,20,maybe,set,generator,sort,random,from,score,frequency,maybe,set,generator,string,distance,random,from,internal,levenshtein,ngram,maybe,set,generator,suggest,mode,random,from,missing,popular,always,return,generator
DirectCandidateGeneratorTests -> public static DirectCandidateGeneratorBuilder randomCandidateGenerator();1539951844;create random {@link DirectCandidateGeneratorBuilder};public static DirectCandidateGeneratorBuilder randomCandidateGenerator() {_        DirectCandidateGeneratorBuilder generator = new DirectCandidateGeneratorBuilder(randomAlphaOfLength(10))__        maybeSet(generator::accuracy, randomFloat())__        maybeSet(generator::maxEdits, randomIntBetween(1, 2))__        maybeSet(generator::maxInspections, randomIntBetween(1, 20))__        maybeSet(generator::maxTermFreq, randomFloat())__        maybeSet(generator::minDocFreq, randomFloat())__        maybeSet(generator::minWordLength, randomIntBetween(1, 20))__        maybeSet(generator::prefixLength, randomIntBetween(1, 20))__        maybeSet(generator::preFilter, randomAlphaOfLengthBetween(1, 20))__        maybeSet(generator::postFilter, randomAlphaOfLengthBetween(1, 20))__        maybeSet(generator::size, randomIntBetween(1, 20))__        maybeSet(generator::sort, randomFrom("score", "frequency"))__        maybeSet(generator::stringDistance,_                randomFrom("internal", "damerau_levenshtein", "levenshtein", "jaro_winkler", "ngram"))__        maybeSet(generator::suggestMode, randomFrom("missing", "popular", "always"))__        return generator__    };create,random,link,direct,candidate,generator,builder;public,static,direct,candidate,generator,builder,random,candidate,generator,direct,candidate,generator,builder,generator,new,direct,candidate,generator,builder,random,alpha,of,length,10,maybe,set,generator,accuracy,random,float,maybe,set,generator,max,edits,random,int,between,1,2,maybe,set,generator,max,inspections,random,int,between,1,20,maybe,set,generator,max,term,freq,random,float,maybe,set,generator,min,doc,freq,random,float,maybe,set,generator,min,word,length,random,int,between,1,20,maybe,set,generator,prefix,length,random,int,between,1,20,maybe,set,generator,pre,filter,random,alpha,of,length,between,1,20,maybe,set,generator,post,filter,random,alpha,of,length,between,1,20,maybe,set,generator,size,random,int,between,1,20,maybe,set,generator,sort,random,from,score,frequency,maybe,set,generator,string,distance,random,from,internal,levenshtein,ngram,maybe,set,generator,suggest,mode,random,from,missing,popular,always,return,generator
DirectCandidateGeneratorTests -> public void testSerialization() throws IOException;1524684173;Test serialization and deserialization of the generator;public void testSerialization() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_RUNS_ runs++) {_            DirectCandidateGeneratorBuilder original = randomCandidateGenerator()__            DirectCandidateGeneratorBuilder deserialized = copy(original)__            assertEquals(deserialized, original)__            assertEquals(deserialized.hashCode(), original.hashCode())__            assertNotSame(deserialized, original)__        }_    };test,serialization,and,deserialization,of,the,generator;public,void,test,serialization,throws,ioexception,for,int,runs,0,runs,runs,direct,candidate,generator,builder,original,random,candidate,generator,direct,candidate,generator,builder,deserialized,copy,original,assert,equals,deserialized,original,assert,equals,deserialized,hash,code,original,hash,code,assert,not,same,deserialized,original
DirectCandidateGeneratorTests -> public void testSerialization() throws IOException;1529916084;Test serialization and deserialization of the generator;public void testSerialization() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_RUNS_ runs++) {_            DirectCandidateGeneratorBuilder original = randomCandidateGenerator()__            DirectCandidateGeneratorBuilder deserialized = copy(original)__            assertEquals(deserialized, original)__            assertEquals(deserialized.hashCode(), original.hashCode())__            assertNotSame(deserialized, original)__        }_    };test,serialization,and,deserialization,of,the,generator;public,void,test,serialization,throws,ioexception,for,int,runs,0,runs,runs,direct,candidate,generator,builder,original,random,candidate,generator,direct,candidate,generator,builder,deserialized,copy,original,assert,equals,deserialized,original,assert,equals,deserialized,hash,code,original,hash,code,assert,not,same,deserialized,original
DirectCandidateGeneratorTests -> public void testSerialization() throws IOException;1536314350;Test serialization and deserialization of the generator;public void testSerialization() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_RUNS_ runs++) {_            DirectCandidateGeneratorBuilder original = randomCandidateGenerator()__            DirectCandidateGeneratorBuilder deserialized = copy(original)__            assertEquals(deserialized, original)__            assertEquals(deserialized.hashCode(), original.hashCode())__            assertNotSame(deserialized, original)__        }_    };test,serialization,and,deserialization,of,the,generator;public,void,test,serialization,throws,ioexception,for,int,runs,0,runs,runs,direct,candidate,generator,builder,original,random,candidate,generator,direct,candidate,generator,builder,deserialized,copy,original,assert,equals,deserialized,original,assert,equals,deserialized,hash,code,original,hash,code,assert,not,same,deserialized,original
DirectCandidateGeneratorTests -> public void testSerialization() throws IOException;1539951844;Test serialization and deserialization of the generator;public void testSerialization() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_RUNS_ runs++) {_            DirectCandidateGeneratorBuilder original = randomCandidateGenerator()__            DirectCandidateGeneratorBuilder deserialized = copy(original)__            assertEquals(deserialized, original)__            assertEquals(deserialized.hashCode(), original.hashCode())__            assertNotSame(deserialized, original)__        }_    };test,serialization,and,deserialization,of,the,generator;public,void,test,serialization,throws,ioexception,for,int,runs,0,runs,runs,direct,candidate,generator,builder,original,random,candidate,generator,direct,candidate,generator,builder,deserialized,copy,original,assert,equals,deserialized,original,assert,equals,deserialized,hash,code,original,hash,code,assert,not,same,deserialized,original
