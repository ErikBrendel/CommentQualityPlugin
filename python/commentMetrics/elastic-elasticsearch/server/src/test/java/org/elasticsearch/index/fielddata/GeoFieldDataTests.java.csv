commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected String getFieldDataType() {     return "geo_point". }
false;protected;0;17;;@Override protected void add2SingleValuedDocumentsAndDeleteOneOfThem() throws Exception {     Document d = new Document().     d.add(new StringField("_id", "1", Field.Store.NO)).     d.add(randomGeoPointField(FIELD_NAME, Field.Store.YES)).     writer.addDocument(d).     d = new Document().     d.add(new StringField("_id", "2", Field.Store.NO)).     d.add(randomGeoPointField(FIELD_NAME, Field.Store.NO)).     writer.addDocument(d).     writer.commit().     writer.deleteDocuments(new Term("_id", "1")). }
false;protected;0;18;;@Override protected void fillMultiValueWithMissing() throws Exception {     Document d = new Document().     d.add(new StringField("_id", "1", Field.Store.NO)).     d.add(randomGeoPointField(FIELD_NAME, Field.Store.NO)).     d.add(randomGeoPointField(FIELD_NAME, Field.Store.NO)).     writer.addDocument(d).     // missing     d = new Document().     d.add(new StringField("_id", "2", Field.Store.NO)).     writer.addDocument(d).     d = new Document().     d.add(new StringField("_id", "3", Field.Store.NO)).     d.add(randomGeoPointField(FIELD_NAME, Field.Store.NO)).     writer.addDocument(d). }
false;protected;0;17;;@Override protected void fillSingleValueAllSet() throws Exception {     Document d = new Document().     d.add(new StringField("_id", "1", Field.Store.NO)).     d.add(randomGeoPointField(FIELD_NAME, Field.Store.NO)).     writer.addDocument(d).     d = new Document().     d.add(new StringField("_id", "2", Field.Store.NO)).     d.add(randomGeoPointField(FIELD_NAME, Field.Store.NO)).     writer.addDocument(d).     d = new Document().     d.add(new StringField("_id", "3", Field.Store.NO)).     d.add(randomGeoPointField(FIELD_NAME, Field.Store.NO)).     writer.addDocument(d). }
false;protected;0;17;;@Override protected void fillSingleValueWithMissing() throws Exception {     Document d = new Document().     d.add(new StringField("_id", "1", Field.Store.NO)).     d.add(randomGeoPointField(FIELD_NAME, Field.Store.NO)).     writer.addDocument(d).     d = new Document().     d.add(new StringField("_id", "2", Field.Store.NO)).     // d.add(new StringField("value", one(), Field.Store.NO)). // MISSING....     writer.addDocument(d).     d = new Document().     d.add(new StringField("_id", "3", Field.Store.NO)).     d.add(randomGeoPointField(FIELD_NAME, Field.Store.NO)).     writer.addDocument(d). }
false;protected;0;18;;@Override protected void fillMultiValueAllSet() throws Exception {     Document d = new Document().     d.add(new StringField("_id", "1", Field.Store.NO)).     d.add(randomGeoPointField(FIELD_NAME, Field.Store.NO)).     d.add(randomGeoPointField(FIELD_NAME, Field.Store.NO)).     writer.addDocument(d).     d = new Document().     d.add(new StringField("_id", "2", Field.Store.NO)).     d.add(randomGeoPointField(FIELD_NAME, Field.Store.NO)).     writer.addDocument(d).     d = new Document().     d.add(new StringField("_id", "3", Field.Store.NO)).     d.add(randomGeoPointField(FIELD_NAME, Field.Store.NO)).     writer.addDocument(d). }
false;protected;0;17;;@Override protected void fillExtendedMvSet() throws Exception {     Document d.     final int maxDocs = randomInt(10).     for (int i = 0. i < maxDocs. ++i) {         d = new Document().         d.add(new StringField("_id", i + "", Field.Store.NO)).         int maxVals = randomInt(5).         for (int v = 0. v < maxVals. ++v) {             d.add(randomGeoPointField(FIELD_NAME, Field.Store.NO)).         }         writer.addDocument(d).         if (randomBoolean()) {             writer.commit().         }     } }
false;public;0;15;;@Override public void testSingleValueAllSet() throws Exception {     fillSingleValueAllSet().     IndexFieldData<?> indexFieldData = getForField("value").     List<LeafReaderContext> readerContexts = refreshReader().     for (LeafReaderContext readerContext : readerContexts) {         AtomicFieldData fieldData = indexFieldData.load(readerContext).         assertThat(fieldData.ramBytesUsed(), greaterThanOrEqualTo(minRamBytesUsed())).         MultiGeoPointValues fieldValues = ((AbstractAtomicGeoPointFieldData) fieldData).getGeoPointValues().         assertValues(fieldValues, 0).         assertValues(fieldValues, 1).         assertValues(fieldValues, 2).     } }
false;public;0;15;;@Override public void testSingleValueWithMissing() throws Exception {     fillSingleValueWithMissing().     IndexFieldData<?> indexFieldData = getForField("value").     List<LeafReaderContext> readerContexts = refreshReader().     for (LeafReaderContext readerContext : readerContexts) {         AtomicFieldData fieldData = indexFieldData.load(readerContext).         assertThat(fieldData.ramBytesUsed(), greaterThanOrEqualTo(minRamBytesUsed())).         MultiGeoPointValues fieldValues = ((AbstractAtomicGeoPointFieldData) fieldData).getGeoPointValues().         assertValues(fieldValues, 0).         assertMissing(fieldValues, 1).         assertValues(fieldValues, 2).     } }
false;public;0;15;;@Override public void testMultiValueAllSet() throws Exception {     fillMultiValueAllSet().     IndexFieldData<?> indexFieldData = getForField("value").     List<LeafReaderContext> readerContexts = refreshReader().     for (LeafReaderContext readerContext : readerContexts) {         AtomicFieldData fieldData = indexFieldData.load(readerContext).         assertThat(fieldData.ramBytesUsed(), greaterThanOrEqualTo(minRamBytesUsed())).         MultiGeoPointValues fieldValues = ((AbstractAtomicGeoPointFieldData) fieldData).getGeoPointValues().         assertValues(fieldValues, 0).         assertValues(fieldValues, 1).         assertValues(fieldValues, 2).     } }
false;public;0;16;;@Override public void testMultiValueWithMissing() throws Exception {     fillMultiValueWithMissing().     IndexFieldData<?> indexFieldData = getForField("value").     List<LeafReaderContext> readerContexts = refreshReader().     for (LeafReaderContext readerContext : readerContexts) {         AtomicFieldData fieldData = indexFieldData.load(readerContext).         assertThat(fieldData.ramBytesUsed(), greaterThanOrEqualTo(minRamBytesUsed())).         MultiGeoPointValues fieldValues = ((AbstractAtomicGeoPointFieldData) fieldData).getGeoPointValues().         assertValues(fieldValues, 0).         assertMissing(fieldValues, 1).         assertValues(fieldValues, 2).     } }
