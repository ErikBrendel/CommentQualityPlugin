commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Before public void setUp() throws Exception {     super.setUp().     // register aggregations as NamedWriteable     SearchModule searchModule = new SearchModule(Settings.EMPTY, false, emptyList()).     namedWriteableRegistry = new NamedWriteableRegistry(searchModule.getNamedWriteables()).     namedXContentRegistry = new NamedXContentRegistry(searchModule.getNamedXContents()). }
false;protected;0;4;;@Override protected NamedWriteableRegistry getNamedWriteableRegistry() {     return namedWriteableRegistry. }
false;protected;0;4;;@Override protected NamedXContentRegistry xContentRegistry() {     return namedXContentRegistry. }
false;protected;1;7;;@Override protected Builder doParseInstance(XContentParser parser) throws IOException {     // parseAggregators expects to be already inside the xcontent object     assertThat(parser.nextToken(), equalTo(XContentParser.Token.START_OBJECT)).     AggregatorFactories.Builder builder = AggregatorFactories.parseAggregators(parser).     return builder. }
false;protected;0;22;;@Override protected Builder createTestInstance() {     AggregatorFactories.Builder builder = new AggregatorFactories.Builder().     // ensure that the unlikely does not happen: 2 aggs share the same name     Set<String> names = new HashSet<>().     for (int i = 0. i < randomIntBetween(1, 20). ++i) {         AggregationBuilder aggBuilder = getRandomAggregation().         if (names.add(aggBuilder.getName())) {             builder.addAggregator(aggBuilder).         }     }     for (int i = 0. i < randomIntBetween(0, 20). ++i) {         PipelineAggregationBuilder aggBuilder = getRandomPipelineAggregation().         if (names.add(aggBuilder.getName())) {             builder.addPipelineAggregator(aggBuilder).         }     }     return builder. }
false;protected;0;4;;@Override protected Reader<Builder> instanceReader() {     return AggregatorFactories.Builder::new. }
false;public;0;33;;public void testUnorderedEqualsSubSet() {     Set<String> names = new HashSet<>().     List<AggregationBuilder> aggBuilders = new ArrayList<>().     while (names.size() < 2) {         AggregationBuilder aggBuilder = getRandomAggregation().         if (names.add(aggBuilder.getName())) {             aggBuilders.add(aggBuilder).         }     }     AggregatorFactories.Builder builder1 = new AggregatorFactories.Builder().     AggregatorFactories.Builder builder2 = new AggregatorFactories.Builder().     builder1.addAggregator(aggBuilders.get(0)).     builder1.addAggregator(aggBuilders.get(1)).     builder2.addAggregator(aggBuilders.get(1)).     assertFalse(builder1.equals(builder2)).     assertFalse(builder2.equals(builder1)).     assertNotEquals(builder1.hashCode(), builder2.hashCode()).     builder2.addAggregator(aggBuilders.get(0)).     assertTrue(builder1.equals(builder2)).     assertTrue(builder2.equals(builder1)).     assertEquals(builder1.hashCode(), builder2.hashCode()).     builder1.addPipelineAggregator(getRandomPipelineAggregation()).     assertFalse(builder1.equals(builder2)).     assertFalse(builder2.equals(builder1)).     assertNotEquals(builder1.hashCode(), builder2.hashCode()). }
false;private,static;0;17;;private static AggregationBuilder getRandomAggregation() {     // just a couple of aggregations, sufficient for the purpose of this test     final int randomAggregatorPoolSize = 4.     switch(randomIntBetween(1, randomAggregatorPoolSize)) {         case 1:             return AggregationBuilders.avg(randomAlphaOfLengthBetween(3, 10)).         case 2:             return AggregationBuilders.min(randomAlphaOfLengthBetween(3, 10)).         case 3:             return AggregationBuilders.max(randomAlphaOfLengthBetween(3, 10)).         case 4:             return AggregationBuilders.sum(randomAlphaOfLengthBetween(3, 10)).     }     // never reached     return null. }
false;private,static;0;7;;private static PipelineAggregationBuilder getRandomPipelineAggregation() {     // just 1 type of pipeline agg, sufficient for the purpose of this test     String name = randomAlphaOfLengthBetween(3, 20).     String bucketsPath = randomAlphaOfLengthBetween(3, 20).     PipelineAggregationBuilder builder = new CumulativeSumPipelineAggregationBuilder(name, bucketsPath).     return builder. }
