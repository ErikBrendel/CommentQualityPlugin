commented;modifiers;parameterAmount;loc;comment;code
false;public;2;6;;@Override public void beforeIndexCreated(Index index, Settings indexSettings) {     assertEquals("test", index.getName()).     assertEquals(1, counter.get()).     counter.incrementAndGet(). }
false;public;1;6;;@Override public void afterIndexCreated(IndexService indexService) {     assertEquals("test", indexService.index().getName()).     assertEquals(2, counter.get()).     counter.incrementAndGet(). }
false;public;2;5;;@Override public void beforeIndexShardCreated(ShardId shardId, Settings indexSettings) {     assertEquals(3, counter.get()).     counter.incrementAndGet(). }
false;public;1;5;;@Override public void afterIndexShardCreated(IndexShard indexShard) {     assertEquals(4, counter.get()).     counter.incrementAndGet(). }
false;public;1;5;;@Override public void afterIndexShardStarted(IndexShard indexShard) {     assertEquals(5, counter.get()).     counter.incrementAndGet(). }
false;public;2;6;;@Override public void beforeIndexRemoved(IndexService indexService, IndexRemovalReason reason) {     assertEquals(DELETED, reason).     assertEquals(6, counter.get()).     counter.incrementAndGet(). }
false;public;2;5;;@Override public void beforeIndexShardDeleted(ShardId shardId, Settings indexSettings) {     assertEquals(7, counter.get()).     counter.incrementAndGet(). }
false;public;2;5;;@Override public void afterIndexShardDeleted(ShardId shardId, Settings indexSettings) {     assertEquals(8, counter.get()).     counter.incrementAndGet(). }
false;public;3;6;;@Override public void afterIndexRemoved(Index index, IndexSettings indexSettings, IndexRemovalReason reason) {     assertEquals(DELETED, reason).     assertEquals(9, counter.get()).     counter.incrementAndGet(). }
false;public;0;96;;public void testStartDeleteIndexEventCallback() throws Throwable {     IndicesService indicesService = getInstanceFromNode(IndicesService.class).     assertAcked(client().admin().indices().prepareCreate("test").setSettings(Settings.builder().put(SETTING_NUMBER_OF_SHARDS, 1).put(SETTING_NUMBER_OF_REPLICAS, 0))).     ensureGreen().     Index idx = resolveIndex("test").     IndexMetaData metaData = indicesService.indexService(idx).getMetaData().     ShardRouting shardRouting = indicesService.indexService(idx).getShard(0).routingEntry().     final AtomicInteger counter = new AtomicInteger(1).     IndexEventListener countingListener = new IndexEventListener() {          @Override         public void beforeIndexCreated(Index index, Settings indexSettings) {             assertEquals("test", index.getName()).             assertEquals(1, counter.get()).             counter.incrementAndGet().         }          @Override         public void afterIndexCreated(IndexService indexService) {             assertEquals("test", indexService.index().getName()).             assertEquals(2, counter.get()).             counter.incrementAndGet().         }          @Override         public void beforeIndexShardCreated(ShardId shardId, Settings indexSettings) {             assertEquals(3, counter.get()).             counter.incrementAndGet().         }          @Override         public void afterIndexShardCreated(IndexShard indexShard) {             assertEquals(4, counter.get()).             counter.incrementAndGet().         }          @Override         public void afterIndexShardStarted(IndexShard indexShard) {             assertEquals(5, counter.get()).             counter.incrementAndGet().         }          @Override         public void beforeIndexRemoved(IndexService indexService, IndexRemovalReason reason) {             assertEquals(DELETED, reason).             assertEquals(6, counter.get()).             counter.incrementAndGet().         }          @Override         public void beforeIndexShardDeleted(ShardId shardId, Settings indexSettings) {             assertEquals(7, counter.get()).             counter.incrementAndGet().         }          @Override         public void afterIndexShardDeleted(ShardId shardId, Settings indexSettings) {             assertEquals(8, counter.get()).             counter.incrementAndGet().         }          @Override         public void afterIndexRemoved(Index index, IndexSettings indexSettings, IndexRemovalReason reason) {             assertEquals(DELETED, reason).             assertEquals(9, counter.get()).             counter.incrementAndGet().         }     }.     indicesService.removeIndex(idx, DELETED, "simon says").     try {         IndexService index = indicesService.createIndex(metaData, Arrays.asList(countingListener)).         assertEquals(3, counter.get()).         idx = index.index().         ShardRouting newRouting = shardRouting.         String nodeId = newRouting.currentNodeId().         UnassignedInfo unassignedInfo = new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "boom").         newRouting = newRouting.moveToUnassigned(unassignedInfo).updateUnassigned(unassignedInfo, RecoverySource.EmptyStoreRecoverySource.INSTANCE).         newRouting = ShardRoutingHelper.initialize(newRouting, nodeId).         IndexShard shard = index.createShard(newRouting, s -> {         }, RetentionLeaseSyncer.EMPTY).         IndexShardTestCase.updateRoutingEntry(shard, newRouting).         assertEquals(5, counter.get()).         final DiscoveryNode localNode = new DiscoveryNode("foo", buildNewFakeTransportAddress(), emptyMap(), emptySet(), Version.CURRENT).         shard.markAsRecovering("store", new RecoveryState(newRouting, localNode, null)).         shard.recoverFromStore().         newRouting = ShardRoutingHelper.moveToStarted(newRouting).         IndexShardTestCase.updateRoutingEntry(shard, newRouting).         assertEquals(6, counter.get()).     } finally {         indicesService.removeIndex(idx, DELETED, "simon says").     }     assertEquals(10, counter.get()). }
