commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Map<String, Highlighter> getHighlighters() {     return singletonMap("plain", new PlainHighlighter()). }
false;public;0;5;;@Override public List<SearchPlugin.SuggesterSpec<?>> getSuggesters() {     return singletonList(new SuggesterSpec<>(TermSuggestionBuilder.SUGGESTION_NAME, TermSuggestionBuilder::new, TermSuggestionBuilder::fromXContent, TermSuggestion::new)). }
false;public;0;5;;@Override public List<ScoreFunctionSpec<?>> getScoreFunctions() {     return singletonList(new ScoreFunctionSpec<>(GaussDecayFunctionBuilder.NAME, GaussDecayFunctionBuilder::new, GaussDecayFunctionBuilder.PARSER)). }
false;public;0;4;;@Override public List<SearchExtensionSpec<SignificanceHeuristic, SignificanceHeuristicParser>> getSignificanceHeuristics() {     return singletonList(new SearchExtensionSpec<>(ChiSquare.NAME, ChiSquare::new, ChiSquare.PARSER)). }
false;public;0;4;;@Override public List<SearchExtensionSpec<MovAvgModel, MovAvgModel.AbstractModelParser>> getMovingAverageModels() {     return singletonList(new SearchExtensionSpec<>(SimpleModel.NAME, SimpleModel::new, SimpleModel.PARSER)). }
false;public;1;4;;@Override public List<FetchSubPhase> getFetchSubPhases(FetchPhaseConstructionContext context) {     return singletonList(new ExplainFetchSubPhase()). }
false;public;0;4;;@Override public List<SearchPlugin.QuerySpec<?>> getQueries() {     return singletonList(new QuerySpec<>(TermQueryBuilder.NAME, TermQueryBuilder::new, TermQueryBuilder::fromXContent)). }
false;public;0;5;;@Override public List<AggregationSpec> getAggregations() {     return singletonList(new AggregationSpec(TermsAggregationBuilder.NAME, TermsAggregationBuilder::new, TermsAggregationBuilder::parse)). }
false;public;0;9;;@Override public List<PipelineAggregationSpec> getPipelineAggregations() {     return singletonList(new PipelineAggregationSpec(DerivativePipelineAggregationBuilder.NAME, DerivativePipelineAggregationBuilder::new, DerivativePipelineAggregator::new, DerivativePipelineAggregationBuilder::parse).addResultReader(InternalDerivative::new)). }
false;public;0;4;;public List<RescorerSpec<?>> getRescorers() {     return singletonList(new RescorerSpec<>(QueryRescorerBuilder.NAME, QueryRescorerBuilder::new, QueryRescorerBuilder::fromXContent)). }
false;public;0;89;;public void testDoubleRegister() {     SearchPlugin registersDupeHighlighter = new SearchPlugin() {          @Override         public Map<String, Highlighter> getHighlighters() {             return singletonMap("plain", new PlainHighlighter()).         }     }.     expectThrows(IllegalArgumentException.class, registryForPlugin(registersDupeHighlighter)).     SearchPlugin registersDupeSuggester = new SearchPlugin() {          @Override         public List<SearchPlugin.SuggesterSpec<?>> getSuggesters() {             return singletonList(new SuggesterSpec<>(TermSuggestionBuilder.SUGGESTION_NAME, TermSuggestionBuilder::new, TermSuggestionBuilder::fromXContent, TermSuggestion::new)).         }     }.     expectThrows(IllegalArgumentException.class, registryForPlugin(registersDupeSuggester)).     SearchPlugin registersDupeScoreFunction = new SearchPlugin() {          @Override         public List<ScoreFunctionSpec<?>> getScoreFunctions() {             return singletonList(new ScoreFunctionSpec<>(GaussDecayFunctionBuilder.NAME, GaussDecayFunctionBuilder::new, GaussDecayFunctionBuilder.PARSER)).         }     }.     expectThrows(IllegalArgumentException.class, registryForPlugin(registersDupeScoreFunction)).     SearchPlugin registersDupeSignificanceHeuristic = new SearchPlugin() {          @Override         public List<SearchExtensionSpec<SignificanceHeuristic, SignificanceHeuristicParser>> getSignificanceHeuristics() {             return singletonList(new SearchExtensionSpec<>(ChiSquare.NAME, ChiSquare::new, ChiSquare.PARSER)).         }     }.     expectThrows(IllegalArgumentException.class, registryForPlugin(registersDupeSignificanceHeuristic)).     SearchPlugin registersDupeMovAvgModel = new SearchPlugin() {          @Override         public List<SearchExtensionSpec<MovAvgModel, MovAvgModel.AbstractModelParser>> getMovingAverageModels() {             return singletonList(new SearchExtensionSpec<>(SimpleModel.NAME, SimpleModel::new, SimpleModel.PARSER)).         }     }.     expectThrows(IllegalArgumentException.class, registryForPlugin(registersDupeMovAvgModel)).     SearchPlugin registersDupeFetchSubPhase = new SearchPlugin() {          @Override         public List<FetchSubPhase> getFetchSubPhases(FetchPhaseConstructionContext context) {             return singletonList(new ExplainFetchSubPhase()).         }     }.     expectThrows(IllegalArgumentException.class, registryForPlugin(registersDupeFetchSubPhase)).     SearchPlugin registersDupeQuery = new SearchPlugin() {          @Override         public List<SearchPlugin.QuerySpec<?>> getQueries() {             return singletonList(new QuerySpec<>(TermQueryBuilder.NAME, TermQueryBuilder::new, TermQueryBuilder::fromXContent)).         }     }.     expectThrows(IllegalArgumentException.class, registryForPlugin(registersDupeQuery)).     SearchPlugin registersDupeAggregation = new SearchPlugin() {          @Override         public List<AggregationSpec> getAggregations() {             return singletonList(new AggregationSpec(TermsAggregationBuilder.NAME, TermsAggregationBuilder::new, TermsAggregationBuilder::parse)).         }     }.     expectThrows(IllegalArgumentException.class, registryForPlugin(registersDupeAggregation)).     SearchPlugin registersDupePipelineAggregation = new SearchPlugin() {          @Override         public List<PipelineAggregationSpec> getPipelineAggregations() {             return singletonList(new PipelineAggregationSpec(DerivativePipelineAggregationBuilder.NAME, DerivativePipelineAggregationBuilder::new, DerivativePipelineAggregator::new, DerivativePipelineAggregationBuilder::parse).addResultReader(InternalDerivative::new)).         }     }.     expectThrows(IllegalArgumentException.class, registryForPlugin(registersDupePipelineAggregation)).     SearchPlugin registersDupeRescorer = new SearchPlugin() {          public List<RescorerSpec<?>> getRescorers() {             return singletonList(new RescorerSpec<>(QueryRescorerBuilder.NAME, QueryRescorerBuilder::new, QueryRescorerBuilder::fromXContent)).         }     }.     expectThrows(IllegalArgumentException.class, registryForPlugin(registersDupeRescorer)). }
false;private;1;3;;private ThrowingRunnable registryForPlugin(SearchPlugin plugin) {     return () -> new NamedXContentRegistry(new SearchModule(Settings.EMPTY, false, singletonList(plugin)).getNamedXContents()). }
false;public;0;9;;@Override public List<SuggesterSpec<?>> getSuggesters() {     return singletonList(new SuggesterSpec<>(TestSuggestionBuilder.SUGGESTION_NAME, TestSuggestionBuilder::new, TestSuggestionBuilder::fromXContent, TestSuggestion::new)). }
false;public;0;44;;public void testRegisterSuggester() {     SearchModule module = new SearchModule(Settings.EMPTY, false, singletonList(new SearchPlugin() {          @Override         public List<SuggesterSpec<?>> getSuggesters() {             return singletonList(new SuggesterSpec<>(TestSuggestionBuilder.SUGGESTION_NAME, TestSuggestionBuilder::new, TestSuggestionBuilder::fromXContent, TestSuggestion::new)).         }     })).     assertEquals(1, module.getNamedXContents().stream().filter(e -> e.categoryClass.equals(SuggestionBuilder.class) && e.name.match("term", LoggingDeprecationHandler.INSTANCE)).count()).     assertEquals(1, module.getNamedXContents().stream().filter(e -> e.categoryClass.equals(SuggestionBuilder.class) && e.name.match("phrase", LoggingDeprecationHandler.INSTANCE)).count()).     assertEquals(1, module.getNamedXContents().stream().filter(e -> e.categoryClass.equals(SuggestionBuilder.class) && e.name.match("completion", LoggingDeprecationHandler.INSTANCE)).count()).     assertEquals(1, module.getNamedXContents().stream().filter(e -> e.categoryClass.equals(SuggestionBuilder.class) && e.name.match("test", LoggingDeprecationHandler.INSTANCE)).count()).     assertEquals(1, module.getNamedWriteables().stream().filter(e -> e.categoryClass.equals(SuggestionBuilder.class) && e.name.equals("term")).count()).     assertEquals(1, module.getNamedWriteables().stream().filter(e -> e.categoryClass.equals(SuggestionBuilder.class) && e.name.equals("phrase")).count()).     assertEquals(1, module.getNamedWriteables().stream().filter(e -> e.categoryClass.equals(SuggestionBuilder.class) && e.name.equals("completion")).count()).     assertEquals(1, module.getNamedWriteables().stream().filter(e -> e.categoryClass.equals(SuggestionBuilder.class) && e.name.equals("test")).count()).     assertEquals(1, module.getNamedWriteables().stream().filter(e -> e.categoryClass.equals(Suggestion.class) && e.name.equals("term")).count()).     assertEquals(1, module.getNamedWriteables().stream().filter(e -> e.categoryClass.equals(Suggestion.class) && e.name.equals("phrase")).count()).     assertEquals(1, module.getNamedWriteables().stream().filter(e -> e.categoryClass.equals(Suggestion.class) && e.name.equals("completion")).count()).     assertEquals(1, module.getNamedWriteables().stream().filter(e -> e.categoryClass.equals(Suggestion.class) && e.name.equals("test")).count()). }
false;public;0;4;;@Override public Map<String, Highlighter> getHighlighters() {     return singletonMap("custom", customHighlighter). }
false;public;0;15;;public void testRegisterHighlighter() {     CustomHighlighter customHighlighter = new CustomHighlighter().     SearchModule module = new SearchModule(Settings.EMPTY, false, singletonList(new SearchPlugin() {          @Override         public Map<String, Highlighter> getHighlighters() {             return singletonMap("custom", customHighlighter).         }     })).     Map<String, Highlighter> highlighters = module.getHighlighters().     assertEquals(FastVectorHighlighter.class, highlighters.get("fvh").getClass()).     assertEquals(PlainHighlighter.class, highlighters.get("plain").getClass()).     assertEquals(UnifiedHighlighter.class, highlighters.get("unified").getClass()).     assertSame(highlighters.get("custom"), customHighlighter). }
false;public;0;18;;public void testRegisteredQueries() throws IOException {     List<String> allSupportedQueries = new ArrayList<>().     Collections.addAll(allSupportedQueries, NON_DEPRECATED_QUERIES).     Collections.addAll(allSupportedQueries, DEPRECATED_QUERIES).     SearchModule module = new SearchModule(Settings.EMPTY, false, emptyList()).     Set<String> registeredNonDeprecated = module.getNamedXContents().stream().filter(e -> e.categoryClass.equals(QueryBuilder.class)).map(e -> e.name.getPreferredName()).collect(toSet()).     Set<String> registeredAll = module.getNamedXContents().stream().filter(e -> e.categoryClass.equals(QueryBuilder.class)).flatMap(e -> Arrays.stream(e.name.getAllNamesIncludedDeprecated())).collect(toSet()).     assertThat(registeredNonDeprecated, containsInAnyOrder(NON_DEPRECATED_QUERIES)).     assertThat(registeredAll, containsInAnyOrder(allSupportedQueries.toArray(new String[0]))). }
false;public;0;4;;@Override public List<AggregationSpec> getAggregations() {     return singletonList(new AggregationSpec("test", TestAggregationBuilder::new, TestAggregationBuilder::fromXContent)). }
false;public;0;15;;public void testRegisterAggregation() {     SearchModule module = new SearchModule(Settings.EMPTY, false, singletonList(new SearchPlugin() {          @Override         public List<AggregationSpec> getAggregations() {             return singletonList(new AggregationSpec("test", TestAggregationBuilder::new, TestAggregationBuilder::fromXContent)).         }     })).     assertThat(module.getNamedXContents().stream().filter(entry -> entry.categoryClass.equals(BaseAggregationBuilder.class) && entry.name.match("test", LoggingDeprecationHandler.INSTANCE)).collect(toList()), hasSize(1)). }
false;public;0;5;;@Override public List<PipelineAggregationSpec> getPipelineAggregations() {     return singletonList(new PipelineAggregationSpec("test", TestPipelineAggregationBuilder::new, TestPipelineAggregator::new, TestPipelineAggregationBuilder::fromXContent)). }
false;public;0;16;;public void testRegisterPipelineAggregation() {     SearchModule module = new SearchModule(Settings.EMPTY, false, singletonList(new SearchPlugin() {          @Override         public List<PipelineAggregationSpec> getPipelineAggregations() {             return singletonList(new PipelineAggregationSpec("test", TestPipelineAggregationBuilder::new, TestPipelineAggregator::new, TestPipelineAggregationBuilder::fromXContent)).         }     })).     assertThat(module.getNamedXContents().stream().filter(entry -> entry.categoryClass.equals(BaseAggregationBuilder.class) && entry.name.match("test", LoggingDeprecationHandler.INSTANCE)).collect(toList()), hasSize(1)). }
false;public;0;4;;@Override public List<RescorerSpec<?>> getRescorers() {     return singletonList(new RescorerSpec<>("test", TestRescorerBuilder::new, TestRescorerBuilder::fromXContent)). }
false;public;0;14;;public void testRegisterRescorer() {     SearchModule module = new SearchModule(Settings.EMPTY, false, singletonList(new SearchPlugin() {          @Override         public List<RescorerSpec<?>> getRescorers() {             return singletonList(new RescorerSpec<>("test", TestRescorerBuilder::new, TestRescorerBuilder::fromXContent)).         }     })).     assertThat(module.getNamedXContents().stream().filter(entry -> entry.categoryClass.equals(RescorerBuilder.class) && entry.name.match("test", LoggingDeprecationHandler.INSTANCE)).collect(toList()), hasSize(1)). }
false;protected;2;4;;@Override protected AggregationBuilder shallowCopy(Builder factoriesBuilder, Map<String, Object> metaData) {     return new TestAggregationBuilder(this, factoriesBuilder, metaData). }
false;public;0;4;;@Override public String getType() {     return "test". }
false;protected;1;3;;@Override protected void innerWriteTo(StreamOutput out) throws IOException { }
false;protected;4;5;;@Override protected ValuesSourceAggregatorFactory<ValuesSource, ?> innerBuild(SearchContext context, ValuesSourceConfig<ValuesSource> config, AggregatorFactory<?> parent, Builder subFactoriesBuilder) throws IOException {     return null. }
false;protected;2;4;;@Override protected XContentBuilder doXContentBody(XContentBuilder builder, Params params) throws IOException {     return null. }
false;protected;0;4;;@Override protected int innerHashCode() {     return 0. }
false;protected;1;4;;@Override protected boolean innerEquals(Object obj) {     return false. }
false;private,static;2;3;;private static TestAggregationBuilder fromXContent(String name, XContentParser p) {     return null. }
false;public;0;4;;@Override public String getWriteableName() {     return "test". }
false;protected;1;3;;@Override protected void doWriteTo(StreamOutput out) throws IOException { }
false;protected;1;4;;@Override protected PipelineAggregator createInternal(Map<String, Object> metaData) throws IOException {     return null. }
false;protected;2;4;;@Override protected XContentBuilder internalXContent(XContentBuilder builder, Params params) throws IOException {     return null. }
false;protected;0;4;;@Override protected int doHashCode() {     return 0. }
false;protected;1;4;;@Override protected boolean doEquals(Object obj) {     return false. }
false;private,static;2;3;;private static TestPipelineAggregationBuilder fromXContent(String name, XContentParser p) {     return null. }
false;public;0;4;;@Override public String getWriteableName() {     return "test". }
false;protected;1;3;;@Override protected void doWriteTo(StreamOutput out) throws IOException { }
false;public;2;4;;@Override public InternalAggregation reduce(InternalAggregation aggregation, ReduceContext reduceContext) {     return null. }
false;public,static;1;3;;public static TestRescorerBuilder fromXContent(XContentParser parser) {     return null. }
false;public;0;4;;@Override public String getWriteableName() {     return "test". }
false;public;1;4;;@Override public RescorerBuilder<TestRescorerBuilder> rewrite(QueryRewriteContext ctx) throws IOException {     return this. }
false;protected;1;3;;@Override protected void doWriteTo(StreamOutput out) throws IOException { }
false;protected;2;3;;@Override protected void doXContent(XContentBuilder builder, Params params) throws IOException { }
false;public;2;4;;@Override public RescoreContext innerBuildContext(int windowSize, QueryShardContext context) throws IOException {     return null. }
false;protected;4;8;;@Override protected Suggestion<? extends Suggestion.Entry<? extends Suggestion.Entry.Option>> innerExecute(String name, SuggestionSearchContext.SuggestionContext suggestion, IndexSearcher searcher, CharsRefBuilder spare) throws IOException {     return null. }
false;protected;1;2;;@Override protected void doWriteTo(StreamOutput out) throws IOException { }
false;public,static;1;3;;public static TestSuggestionBuilder fromXContent(XContentParser parser) {     return null. }
false;protected;2;4;;@Override protected XContentBuilder innerToXContent(XContentBuilder builder, Params params) throws IOException {     return null. }
false;protected;1;4;;@Override protected SuggestionSearchContext.SuggestionContext build(QueryShardContext context) throws IOException {     return null. }
false;protected;1;4;;@Override protected boolean doEquals(TestSuggestionBuilder other) {     return false. }
false;protected;0;4;;@Override protected int doHashCode() {     return 0. }
false;public;0;4;;@Override public String getWriteableName() {     return "test". }
false;protected;1;4;;@Override protected Entry newEntry(StreamInput in) throws IOException {     return null. }
false;public;0;4;;@Override public String getWriteableName() {     return "test". }
