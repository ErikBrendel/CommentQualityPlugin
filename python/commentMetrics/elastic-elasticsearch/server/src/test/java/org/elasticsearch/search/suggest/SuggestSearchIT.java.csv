# id;timestamp;commentText;codeText;commentWords;codeWords
SuggestSearchIT -> private DirectCandidateGeneratorBuilder candidateGenerator(String field);1524684173;Creates a new {@link DirectCandidateGeneratorBuilder}__@param field_the field this candidate generator operates on.;private DirectCandidateGeneratorBuilder candidateGenerator(String field) {_        return new DirectCandidateGeneratorBuilder(field)__    };creates,a,new,link,direct,candidate,generator,builder,param,field,the,field,this,candidate,generator,operates,on;private,direct,candidate,generator,builder,candidate,generator,string,field,return,new,direct,candidate,generator,builder,field
SuggestSearchIT -> private DirectCandidateGeneratorBuilder candidateGenerator(String field);1526289033;Creates a new {@link DirectCandidateGeneratorBuilder}__@param field_the field this candidate generator operates on.;private DirectCandidateGeneratorBuilder candidateGenerator(String field) {_        return new DirectCandidateGeneratorBuilder(field)__    };creates,a,new,link,direct,candidate,generator,builder,param,field,the,field,this,candidate,generator,operates,on;private,direct,candidate,generator,builder,candidate,generator,string,field,return,new,direct,candidate,generator,builder,field
SuggestSearchIT -> private DirectCandidateGeneratorBuilder candidateGenerator(String field);1531937412;Creates a new {@link DirectCandidateGeneratorBuilder}__@param field_the field this candidate generator operates on.;private DirectCandidateGeneratorBuilder candidateGenerator(String field) {_        return new DirectCandidateGeneratorBuilder(field)__    };creates,a,new,link,direct,candidate,generator,builder,param,field,the,field,this,candidate,generator,operates,on;private,direct,candidate,generator,builder,candidate,generator,string,field,return,new,direct,candidate,generator,builder,field
SuggestSearchIT -> private DirectCandidateGeneratorBuilder candidateGenerator(String field);1536314350;Creates a new {@link DirectCandidateGeneratorBuilder}__@param field_the field this candidate generator operates on.;private DirectCandidateGeneratorBuilder candidateGenerator(String field) {_        return new DirectCandidateGeneratorBuilder(field)__    };creates,a,new,link,direct,candidate,generator,builder,param,field,the,field,this,candidate,generator,operates,on;private,direct,candidate,generator,builder,candidate,generator,string,field,return,new,direct,candidate,generator,builder,field
SuggestSearchIT -> private DirectCandidateGeneratorBuilder candidateGenerator(String field);1538067637;Creates a new {@link DirectCandidateGeneratorBuilder}__@param field_the field this candidate generator operates on.;private DirectCandidateGeneratorBuilder candidateGenerator(String field) {_        return new DirectCandidateGeneratorBuilder(field)__    };creates,a,new,link,direct,candidate,generator,builder,param,field,the,field,this,candidate,generator,operates,on;private,direct,candidate,generator,builder,candidate,generator,string,field,return,new,direct,candidate,generator,builder,field
SuggestSearchIT -> private DirectCandidateGeneratorBuilder candidateGenerator(String field);1544110272;Creates a new {@link DirectCandidateGeneratorBuilder}__@param field_the field this candidate generator operates on.;private DirectCandidateGeneratorBuilder candidateGenerator(String field) {_        return new DirectCandidateGeneratorBuilder(field)__    };creates,a,new,link,direct,candidate,generator,builder,param,field,the,field,this,candidate,generator,operates,on;private,direct,candidate,generator,builder,candidate,generator,string,field,return,new,direct,candidate,generator,builder,field
SuggestSearchIT -> private DirectCandidateGeneratorBuilder candidateGenerator(String field);1551126401;Creates a new {@link DirectCandidateGeneratorBuilder}__@param field_the field this candidate generator operates on.;private DirectCandidateGeneratorBuilder candidateGenerator(String field) {_        return new DirectCandidateGeneratorBuilder(field)__    };creates,a,new,link,direct,candidate,generator,builder,param,field,the,field,this,candidate,generator,operates,on;private,direct,candidate,generator,builder,candidate,generator,string,field,return,new,direct,candidate,generator,builder,field
SuggestSearchIT -> public void testSearchForRarePhrase() throws IOException;1524684173;Searching for a rare phrase shouldn't provide any suggestions if confidence &gt_ 1.  This was possible before we rechecked the cutoff_score during the reduce phase.  Failures don't occur every time - maybe two out of five tries but we don't repeat it to save time.;public void testSearchForRarePhrase() throws IOException {_        _        _        int chafPerShard = 100___        CreateIndexRequestBuilder builder = prepareCreate("test").setSettings(Settings.builder()_                .put(indexSettings())_                .put("index.analysis.analyzer.body.tokenizer", "standard")_                .putList("index.analysis.analyzer.body.filter", "lowercase", "my_shingle")_                .put("index.analysis.filter.my_shingle.type", "shingle")_                .put("index.analysis.filter.my_shingle.output_unigrams", true)_                .put("index.analysis.filter.my_shingle.min_shingle_size", 2)_                .put("index.analysis.filter.my_shingle.max_shingle_size", 2))___        XContentBuilder mapping = XContentFactory.jsonBuilder()_                .startObject()_                    .startObject("type1")_                        .startObject("properties")_                            .startObject("body")_                                .field("type", "text")_                                .field("analyzer", "body")_                            .endObject()_                        .endObject()_                    .endObject()_                .endObject()__        assertAcked(builder.addMapping("type1", mapping))__        ensureGreen()___        NumShards test = getNumShards("test")___        List<String> phrases = new ArrayList<>()__        Collections.addAll(phrases, "nobel prize", "noble gases", "somethingelse prize", "pride and joy", "notes are fun")__        for (int i = 0_ i < 8_ i++) {_            phrases.add("noble somethingelse" + i)__        }_        for (int i = 0_ i < test.numPrimaries * chafPerShard_ i++) {_            phrases.add("chaff" + i)__        }_        for (String phrase: phrases) {_            index("test", "type1", phrase, "body", phrase)__        }_        refresh()___        Suggest searchSuggest = searchSuggest("nobel prize", "simple_phrase", phraseSuggestion("body")_                .addCandidateGenerator(candidateGenerator("body").minWordLength(1).suggestMode("always").maxTermFreq(.99f))_                .confidence(2f)_                .maxErrors(5f)_                .size(1))__        assertSuggestionSize(searchSuggest, 0, 0, "simple_phrase")___        searchSuggest = searchSuggest("noble prize", "simple_phrase", phraseSuggestion("body")_                .addCandidateGenerator(candidateGenerator("body").minWordLength(1).suggestMode("always").maxTermFreq(.99f))_                .confidence(2f)_                .maxErrors(5f)_                .size(1))__        assertSuggestion(searchSuggest, 0, 0, "simple_phrase", "nobel prize")__    };searching,for,a,rare,phrase,shouldn,t,provide,any,suggestions,if,confidence,gt,1,this,was,possible,before,we,rechecked,the,cutoff,score,during,the,reduce,phase,failures,don,t,occur,every,time,maybe,two,out,of,five,tries,but,we,don,t,repeat,it,to,save,time;public,void,test,search,for,rare,phrase,throws,ioexception,int,chaf,per,shard,100,create,index,request,builder,builder,prepare,create,test,set,settings,settings,builder,put,index,settings,put,index,analysis,analyzer,body,tokenizer,standard,put,list,index,analysis,analyzer,body,filter,lowercase,put,index,analysis,filter,type,shingle,put,index,analysis,filter,true,put,index,analysis,filter,2,put,index,analysis,filter,2,xcontent,builder,mapping,xcontent,factory,json,builder,start,object,start,object,type1,start,object,properties,start,object,body,field,type,text,field,analyzer,body,end,object,end,object,end,object,end,object,assert,acked,builder,add,mapping,type1,mapping,ensure,green,num,shards,test,get,num,shards,test,list,string,phrases,new,array,list,collections,add,all,phrases,nobel,prize,noble,gases,somethingelse,prize,pride,and,joy,notes,are,fun,for,int,i,0,i,8,i,phrases,add,noble,somethingelse,i,for,int,i,0,i,test,num,primaries,chaf,per,shard,i,phrases,add,chaff,i,for,string,phrase,phrases,index,test,type1,phrase,body,phrase,refresh,suggest,search,suggest,search,suggest,nobel,prize,phrase,suggestion,body,add,candidate,generator,candidate,generator,body,min,word,length,1,suggest,mode,always,max,term,freq,99f,confidence,2f,max,errors,5f,size,1,assert,suggestion,size,search,suggest,0,0,search,suggest,search,suggest,noble,prize,phrase,suggestion,body,add,candidate,generator,candidate,generator,body,min,word,length,1,suggest,mode,always,max,term,freq,99f,confidence,2f,max,errors,5f,size,1,assert,suggestion,search,suggest,0,0,nobel,prize
SuggestSearchIT -> public void testSearchForRarePhrase() throws IOException;1526289033;Searching for a rare phrase shouldn't provide any suggestions if confidence &gt_ 1.  This was possible before we rechecked the cutoff_score during the reduce phase.  Failures don't occur every time - maybe two out of five tries but we don't repeat it to save time.;public void testSearchForRarePhrase() throws IOException {_        _        _        int chafPerShard = 100___        CreateIndexRequestBuilder builder = prepareCreate("test").setSettings(Settings.builder()_                .put(indexSettings())_                .put("index.analysis.analyzer.body.tokenizer", "standard")_                .putList("index.analysis.analyzer.body.filter", "lowercase", "my_shingle")_                .put("index.analysis.filter.my_shingle.type", "shingle")_                .put("index.analysis.filter.my_shingle.output_unigrams", true)_                .put("index.analysis.filter.my_shingle.min_shingle_size", 2)_                .put("index.analysis.filter.my_shingle.max_shingle_size", 2))___        XContentBuilder mapping = XContentFactory.jsonBuilder()_                .startObject()_                    .startObject("type1")_                        .startObject("properties")_                            .startObject("body")_                                .field("type", "text")_                                .field("analyzer", "body")_                            .endObject()_                        .endObject()_                    .endObject()_                .endObject()__        assertAcked(builder.addMapping("type1", mapping))__        ensureGreen()___        NumShards test = getNumShards("test")___        List<String> phrases = new ArrayList<>()__        Collections.addAll(phrases, "nobel prize", "noble gases", "somethingelse prize", "pride and joy", "notes are fun")__        for (int i = 0_ i < 8_ i++) {_            phrases.add("noble somethingelse" + i)__        }_        for (int i = 0_ i < test.numPrimaries * chafPerShard_ i++) {_            phrases.add("chaff" + i)__        }_        for (String phrase: phrases) {_            index("test", "type1", phrase, "body", phrase)__        }_        refresh()___        Suggest searchSuggest = searchSuggest("nobel prize", "simple_phrase", phraseSuggestion("body")_                .addCandidateGenerator(candidateGenerator("body").minWordLength(1).suggestMode("always").maxTermFreq(.99f))_                .confidence(2f)_                .maxErrors(5f)_                .size(1))__        assertSuggestionSize(searchSuggest, 0, 0, "simple_phrase")___        searchSuggest = searchSuggest("noble prize", "simple_phrase", phraseSuggestion("body")_                .addCandidateGenerator(candidateGenerator("body").minWordLength(1).suggestMode("always").maxTermFreq(.99f))_                .confidence(2f)_                .maxErrors(5f)_                .size(1))__        assertSuggestion(searchSuggest, 0, 0, "simple_phrase", "nobel prize")__    };searching,for,a,rare,phrase,shouldn,t,provide,any,suggestions,if,confidence,gt,1,this,was,possible,before,we,rechecked,the,cutoff,score,during,the,reduce,phase,failures,don,t,occur,every,time,maybe,two,out,of,five,tries,but,we,don,t,repeat,it,to,save,time;public,void,test,search,for,rare,phrase,throws,ioexception,int,chaf,per,shard,100,create,index,request,builder,builder,prepare,create,test,set,settings,settings,builder,put,index,settings,put,index,analysis,analyzer,body,tokenizer,standard,put,list,index,analysis,analyzer,body,filter,lowercase,put,index,analysis,filter,type,shingle,put,index,analysis,filter,true,put,index,analysis,filter,2,put,index,analysis,filter,2,xcontent,builder,mapping,xcontent,factory,json,builder,start,object,start,object,type1,start,object,properties,start,object,body,field,type,text,field,analyzer,body,end,object,end,object,end,object,end,object,assert,acked,builder,add,mapping,type1,mapping,ensure,green,num,shards,test,get,num,shards,test,list,string,phrases,new,array,list,collections,add,all,phrases,nobel,prize,noble,gases,somethingelse,prize,pride,and,joy,notes,are,fun,for,int,i,0,i,8,i,phrases,add,noble,somethingelse,i,for,int,i,0,i,test,num,primaries,chaf,per,shard,i,phrases,add,chaff,i,for,string,phrase,phrases,index,test,type1,phrase,body,phrase,refresh,suggest,search,suggest,search,suggest,nobel,prize,phrase,suggestion,body,add,candidate,generator,candidate,generator,body,min,word,length,1,suggest,mode,always,max,term,freq,99f,confidence,2f,max,errors,5f,size,1,assert,suggestion,size,search,suggest,0,0,search,suggest,search,suggest,noble,prize,phrase,suggestion,body,add,candidate,generator,candidate,generator,body,min,word,length,1,suggest,mode,always,max,term,freq,99f,confidence,2f,max,errors,5f,size,1,assert,suggestion,search,suggest,0,0,nobel,prize
SuggestSearchIT -> public void testSearchForRarePhrase() throws IOException;1531937412;Searching for a rare phrase shouldn't provide any suggestions if confidence &gt_ 1.  This was possible before we rechecked the cutoff_score during the reduce phase.  Failures don't occur every time - maybe two out of five tries but we don't repeat it to save time.;public void testSearchForRarePhrase() throws IOException {_        _        _        int chafPerShard = 100___        CreateIndexRequestBuilder builder = prepareCreate("test").setSettings(Settings.builder()_                .put(indexSettings())_                .put("index.analysis.analyzer.body.tokenizer", "standard")_                .putList("index.analysis.analyzer.body.filter", "lowercase", "my_shingle")_                .put("index.analysis.filter.my_shingle.type", "shingle")_                .put("index.analysis.filter.my_shingle.output_unigrams", true)_                .put("index.analysis.filter.my_shingle.min_shingle_size", 2)_                .put("index.analysis.filter.my_shingle.max_shingle_size", 2))___        XContentBuilder mapping = XContentFactory.jsonBuilder()_                .startObject()_                    .startObject("type1")_                        .startObject("properties")_                            .startObject("body")_                                .field("type", "text")_                                .field("analyzer", "body")_                            .endObject()_                        .endObject()_                    .endObject()_                .endObject()__        assertAcked(builder.addMapping("type1", mapping))__        ensureGreen()___        NumShards test = getNumShards("test")___        List<String> phrases = new ArrayList<>()__        Collections.addAll(phrases, "nobel prize", "noble gases", "somethingelse prize", "pride and joy", "notes are fun")__        for (int i = 0_ i < 8_ i++) {_            phrases.add("noble somethingelse" + i)__        }_        for (int i = 0_ i < test.numPrimaries * chafPerShard_ i++) {_            phrases.add("chaff" + i)__        }_        for (String phrase: phrases) {_            index("test", "type1", phrase, "body", phrase)__        }_        refresh()___        Suggest searchSuggest = searchSuggest("nobel prize", "simple_phrase", phraseSuggestion("body")_                .addCandidateGenerator(candidateGenerator("body").minWordLength(1).suggestMode("always").maxTermFreq(.99f))_                .confidence(2f)_                .maxErrors(5f)_                .size(1))__        assertSuggestionSize(searchSuggest, 0, 0, "simple_phrase")___        searchSuggest = searchSuggest("noble prize", "simple_phrase", phraseSuggestion("body")_                .addCandidateGenerator(candidateGenerator("body").minWordLength(1).suggestMode("always").maxTermFreq(.99f))_                .confidence(2f)_                .maxErrors(5f)_                .size(1))__        assertSuggestion(searchSuggest, 0, 0, "simple_phrase", "nobel prize")__    };searching,for,a,rare,phrase,shouldn,t,provide,any,suggestions,if,confidence,gt,1,this,was,possible,before,we,rechecked,the,cutoff,score,during,the,reduce,phase,failures,don,t,occur,every,time,maybe,two,out,of,five,tries,but,we,don,t,repeat,it,to,save,time;public,void,test,search,for,rare,phrase,throws,ioexception,int,chaf,per,shard,100,create,index,request,builder,builder,prepare,create,test,set,settings,settings,builder,put,index,settings,put,index,analysis,analyzer,body,tokenizer,standard,put,list,index,analysis,analyzer,body,filter,lowercase,put,index,analysis,filter,type,shingle,put,index,analysis,filter,true,put,index,analysis,filter,2,put,index,analysis,filter,2,xcontent,builder,mapping,xcontent,factory,json,builder,start,object,start,object,type1,start,object,properties,start,object,body,field,type,text,field,analyzer,body,end,object,end,object,end,object,end,object,assert,acked,builder,add,mapping,type1,mapping,ensure,green,num,shards,test,get,num,shards,test,list,string,phrases,new,array,list,collections,add,all,phrases,nobel,prize,noble,gases,somethingelse,prize,pride,and,joy,notes,are,fun,for,int,i,0,i,8,i,phrases,add,noble,somethingelse,i,for,int,i,0,i,test,num,primaries,chaf,per,shard,i,phrases,add,chaff,i,for,string,phrase,phrases,index,test,type1,phrase,body,phrase,refresh,suggest,search,suggest,search,suggest,nobel,prize,phrase,suggestion,body,add,candidate,generator,candidate,generator,body,min,word,length,1,suggest,mode,always,max,term,freq,99f,confidence,2f,max,errors,5f,size,1,assert,suggestion,size,search,suggest,0,0,search,suggest,search,suggest,noble,prize,phrase,suggestion,body,add,candidate,generator,candidate,generator,body,min,word,length,1,suggest,mode,always,max,term,freq,99f,confidence,2f,max,errors,5f,size,1,assert,suggestion,search,suggest,0,0,nobel,prize
SuggestSearchIT -> public void testSearchForRarePhrase() throws IOException;1536314350;Searching for a rare phrase shouldn't provide any suggestions if confidence &gt_ 1.  This was possible before we rechecked the cutoff_score during the reduce phase.  Failures don't occur every time - maybe two out of five tries but we don't repeat it to save time.;public void testSearchForRarePhrase() throws IOException {_        _        _        int chafPerShard = 100___        CreateIndexRequestBuilder builder = prepareCreate("test").setSettings(Settings.builder()_                .put(indexSettings())_                .put("index.analysis.analyzer.body.tokenizer", "standard")_                .putList("index.analysis.analyzer.body.filter", "lowercase", "my_shingle")_                .put("index.analysis.filter.my_shingle.type", "shingle")_                .put("index.analysis.filter.my_shingle.output_unigrams", true)_                .put("index.analysis.filter.my_shingle.min_shingle_size", 2)_                .put("index.analysis.filter.my_shingle.max_shingle_size", 2))___        XContentBuilder mapping = XContentFactory.jsonBuilder()_                .startObject()_                    .startObject("type1")_                        .startObject("properties")_                            .startObject("body")_                                .field("type", "text")_                                .field("analyzer", "body")_                            .endObject()_                        .endObject()_                    .endObject()_                .endObject()__        assertAcked(builder.addMapping("type1", mapping))__        ensureGreen()___        NumShards test = getNumShards("test")___        List<String> phrases = new ArrayList<>()__        Collections.addAll(phrases, "nobel prize", "noble gases", "somethingelse prize", "pride and joy", "notes are fun")__        for (int i = 0_ i < 8_ i++) {_            phrases.add("noble somethingelse" + i)__        }_        for (int i = 0_ i < test.numPrimaries * chafPerShard_ i++) {_            phrases.add("chaff" + i)__        }_        for (String phrase: phrases) {_            index("test", "type1", phrase, "body", phrase)__        }_        refresh()___        Suggest searchSuggest = searchSuggest("nobel prize", "simple_phrase", phraseSuggestion("body")_                .addCandidateGenerator(candidateGenerator("body").minWordLength(1).suggestMode("always").maxTermFreq(.99f))_                .confidence(2f)_                .maxErrors(5f)_                .size(1))__        assertSuggestionSize(searchSuggest, 0, 0, "simple_phrase")___        searchSuggest = searchSuggest("noble prize", "simple_phrase", phraseSuggestion("body")_                .addCandidateGenerator(candidateGenerator("body").minWordLength(1).suggestMode("always").maxTermFreq(.99f))_                .confidence(2f)_                .maxErrors(5f)_                .size(1))__        assertSuggestion(searchSuggest, 0, 0, "simple_phrase", "nobel prize")__    };searching,for,a,rare,phrase,shouldn,t,provide,any,suggestions,if,confidence,gt,1,this,was,possible,before,we,rechecked,the,cutoff,score,during,the,reduce,phase,failures,don,t,occur,every,time,maybe,two,out,of,five,tries,but,we,don,t,repeat,it,to,save,time;public,void,test,search,for,rare,phrase,throws,ioexception,int,chaf,per,shard,100,create,index,request,builder,builder,prepare,create,test,set,settings,settings,builder,put,index,settings,put,index,analysis,analyzer,body,tokenizer,standard,put,list,index,analysis,analyzer,body,filter,lowercase,put,index,analysis,filter,type,shingle,put,index,analysis,filter,true,put,index,analysis,filter,2,put,index,analysis,filter,2,xcontent,builder,mapping,xcontent,factory,json,builder,start,object,start,object,type1,start,object,properties,start,object,body,field,type,text,field,analyzer,body,end,object,end,object,end,object,end,object,assert,acked,builder,add,mapping,type1,mapping,ensure,green,num,shards,test,get,num,shards,test,list,string,phrases,new,array,list,collections,add,all,phrases,nobel,prize,noble,gases,somethingelse,prize,pride,and,joy,notes,are,fun,for,int,i,0,i,8,i,phrases,add,noble,somethingelse,i,for,int,i,0,i,test,num,primaries,chaf,per,shard,i,phrases,add,chaff,i,for,string,phrase,phrases,index,test,type1,phrase,body,phrase,refresh,suggest,search,suggest,search,suggest,nobel,prize,phrase,suggestion,body,add,candidate,generator,candidate,generator,body,min,word,length,1,suggest,mode,always,max,term,freq,99f,confidence,2f,max,errors,5f,size,1,assert,suggestion,size,search,suggest,0,0,search,suggest,search,suggest,noble,prize,phrase,suggestion,body,add,candidate,generator,candidate,generator,body,min,word,length,1,suggest,mode,always,max,term,freq,99f,confidence,2f,max,errors,5f,size,1,assert,suggestion,search,suggest,0,0,nobel,prize
SuggestSearchIT -> public void testSearchForRarePhrase() throws IOException;1538067637;Searching for a rare phrase shouldn't provide any suggestions if confidence &gt_ 1.  This was possible before we rechecked the cutoff_score during the reduce phase.  Failures don't occur every time - maybe two out of five tries but we don't repeat it to save time.;public void testSearchForRarePhrase() throws IOException {_        _        _        int chafPerShard = 100___        CreateIndexRequestBuilder builder = prepareCreate("test").setSettings(Settings.builder()_                .put(indexSettings())_                .put("index.analysis.analyzer.body.tokenizer", "standard")_                .putList("index.analysis.analyzer.body.filter", "lowercase", "my_shingle")_                .put("index.analysis.filter.my_shingle.type", "shingle")_                .put("index.analysis.filter.my_shingle.output_unigrams", true)_                .put("index.analysis.filter.my_shingle.min_shingle_size", 2)_                .put("index.analysis.filter.my_shingle.max_shingle_size", 2))___        XContentBuilder mapping = XContentFactory.jsonBuilder()_                .startObject()_                    .startObject("type1")_                        .startObject("properties")_                            .startObject("body")_                                .field("type", "text")_                                .field("analyzer", "body")_                            .endObject()_                        .endObject()_                    .endObject()_                .endObject()__        assertAcked(builder.addMapping("type1", mapping))__        ensureGreen()___        NumShards test = getNumShards("test")___        List<String> phrases = new ArrayList<>()__        Collections.addAll(phrases, "nobel prize", "noble gases", "somethingelse prize", "pride and joy", "notes are fun")__        for (int i = 0_ i < 8_ i++) {_            phrases.add("noble somethingelse" + i)__        }_        for (int i = 0_ i < test.numPrimaries * chafPerShard_ i++) {_            phrases.add("chaff" + i)__        }_        for (String phrase: phrases) {_            index("test", "type1", phrase, "body", phrase)__        }_        refresh()___        Suggest searchSuggest = searchSuggest("nobel prize", "simple_phrase", phraseSuggestion("body")_                .addCandidateGenerator(candidateGenerator("body").minWordLength(1).suggestMode("always").maxTermFreq(.99f))_                .confidence(2f)_                .maxErrors(5f)_                .size(1))__        assertSuggestionSize(searchSuggest, 0, 0, "simple_phrase")___        searchSuggest = searchSuggest("noble prize", "simple_phrase", phraseSuggestion("body")_                .addCandidateGenerator(candidateGenerator("body").minWordLength(1).suggestMode("always").maxTermFreq(.99f))_                .confidence(2f)_                .maxErrors(5f)_                .size(1))__        assertSuggestion(searchSuggest, 0, 0, "simple_phrase", "nobel prize")__    };searching,for,a,rare,phrase,shouldn,t,provide,any,suggestions,if,confidence,gt,1,this,was,possible,before,we,rechecked,the,cutoff,score,during,the,reduce,phase,failures,don,t,occur,every,time,maybe,two,out,of,five,tries,but,we,don,t,repeat,it,to,save,time;public,void,test,search,for,rare,phrase,throws,ioexception,int,chaf,per,shard,100,create,index,request,builder,builder,prepare,create,test,set,settings,settings,builder,put,index,settings,put,index,analysis,analyzer,body,tokenizer,standard,put,list,index,analysis,analyzer,body,filter,lowercase,put,index,analysis,filter,type,shingle,put,index,analysis,filter,true,put,index,analysis,filter,2,put,index,analysis,filter,2,xcontent,builder,mapping,xcontent,factory,json,builder,start,object,start,object,type1,start,object,properties,start,object,body,field,type,text,field,analyzer,body,end,object,end,object,end,object,end,object,assert,acked,builder,add,mapping,type1,mapping,ensure,green,num,shards,test,get,num,shards,test,list,string,phrases,new,array,list,collections,add,all,phrases,nobel,prize,noble,gases,somethingelse,prize,pride,and,joy,notes,are,fun,for,int,i,0,i,8,i,phrases,add,noble,somethingelse,i,for,int,i,0,i,test,num,primaries,chaf,per,shard,i,phrases,add,chaff,i,for,string,phrase,phrases,index,test,type1,phrase,body,phrase,refresh,suggest,search,suggest,search,suggest,nobel,prize,phrase,suggestion,body,add,candidate,generator,candidate,generator,body,min,word,length,1,suggest,mode,always,max,term,freq,99f,confidence,2f,max,errors,5f,size,1,assert,suggestion,size,search,suggest,0,0,search,suggest,search,suggest,noble,prize,phrase,suggestion,body,add,candidate,generator,candidate,generator,body,min,word,length,1,suggest,mode,always,max,term,freq,99f,confidence,2f,max,errors,5f,size,1,assert,suggestion,search,suggest,0,0,nobel,prize
SuggestSearchIT -> public void testSearchForRarePhrase() throws IOException;1544110272;Searching for a rare phrase shouldn't provide any suggestions if confidence &gt_ 1.  This was possible before we rechecked the cutoff_score during the reduce phase.  Failures don't occur every time - maybe two out of five tries but we don't repeat it to save time.;public void testSearchForRarePhrase() throws IOException {_        _        _        int chafPerShard = 100___        CreateIndexRequestBuilder builder = prepareCreate("test").setSettings(Settings.builder()_                .put(indexSettings())_                .put("index.analysis.analyzer.body.tokenizer", "standard")_                .putList("index.analysis.analyzer.body.filter", "lowercase", "my_shingle")_                .put("index.analysis.filter.my_shingle.type", "shingle")_                .put("index.analysis.filter.my_shingle.output_unigrams", true)_                .put("index.analysis.filter.my_shingle.min_shingle_size", 2)_                .put("index.analysis.filter.my_shingle.max_shingle_size", 2))___        XContentBuilder mapping = XContentFactory.jsonBuilder()_                .startObject()_                    .startObject("type1")_                        .startObject("properties")_                            .startObject("body")_                                .field("type", "text")_                                .field("analyzer", "body")_                            .endObject()_                        .endObject()_                    .endObject()_                .endObject()__        assertAcked(builder.addMapping("type1", mapping))__        ensureGreen()___        NumShards test = getNumShards("test")___        List<String> phrases = new ArrayList<>()__        Collections.addAll(phrases, "nobel prize", "noble gases", "somethingelse prize", "pride and joy", "notes are fun")__        for (int i = 0_ i < 8_ i++) {_            phrases.add("noble somethingelse" + i)__        }_        for (int i = 0_ i < test.numPrimaries * chafPerShard_ i++) {_            phrases.add("chaff" + i)__        }_        for (String phrase: phrases) {_            index("test", "type1", phrase, "body", phrase)__        }_        refresh()___        Suggest searchSuggest = searchSuggest("nobel prize", "simple_phrase", phraseSuggestion("body")_                .addCandidateGenerator(candidateGenerator("body").minWordLength(1).suggestMode("always").maxTermFreq(.99f))_                .confidence(2f)_                .maxErrors(5f)_                .size(1))__        assertSuggestionSize(searchSuggest, 0, 0, "simple_phrase")___        searchSuggest = searchSuggest("noble prize", "simple_phrase", phraseSuggestion("body")_                .addCandidateGenerator(candidateGenerator("body").minWordLength(1).suggestMode("always").maxTermFreq(.99f))_                .confidence(2f)_                .maxErrors(5f)_                .size(1))__        assertSuggestion(searchSuggest, 0, 0, "simple_phrase", "nobel prize")__    };searching,for,a,rare,phrase,shouldn,t,provide,any,suggestions,if,confidence,gt,1,this,was,possible,before,we,rechecked,the,cutoff,score,during,the,reduce,phase,failures,don,t,occur,every,time,maybe,two,out,of,five,tries,but,we,don,t,repeat,it,to,save,time;public,void,test,search,for,rare,phrase,throws,ioexception,int,chaf,per,shard,100,create,index,request,builder,builder,prepare,create,test,set,settings,settings,builder,put,index,settings,put,index,analysis,analyzer,body,tokenizer,standard,put,list,index,analysis,analyzer,body,filter,lowercase,put,index,analysis,filter,type,shingle,put,index,analysis,filter,true,put,index,analysis,filter,2,put,index,analysis,filter,2,xcontent,builder,mapping,xcontent,factory,json,builder,start,object,start,object,type1,start,object,properties,start,object,body,field,type,text,field,analyzer,body,end,object,end,object,end,object,end,object,assert,acked,builder,add,mapping,type1,mapping,ensure,green,num,shards,test,get,num,shards,test,list,string,phrases,new,array,list,collections,add,all,phrases,nobel,prize,noble,gases,somethingelse,prize,pride,and,joy,notes,are,fun,for,int,i,0,i,8,i,phrases,add,noble,somethingelse,i,for,int,i,0,i,test,num,primaries,chaf,per,shard,i,phrases,add,chaff,i,for,string,phrase,phrases,index,test,type1,phrase,body,phrase,refresh,suggest,search,suggest,search,suggest,nobel,prize,phrase,suggestion,body,add,candidate,generator,candidate,generator,body,min,word,length,1,suggest,mode,always,max,term,freq,99f,confidence,2f,max,errors,5f,size,1,assert,suggestion,size,search,suggest,0,0,search,suggest,search,suggest,noble,prize,phrase,suggestion,body,add,candidate,generator,candidate,generator,body,min,word,length,1,suggest,mode,always,max,term,freq,99f,confidence,2f,max,errors,5f,size,1,assert,suggestion,search,suggest,0,0,nobel,prize
SuggestSearchIT -> public void testSearchForRarePhrase() throws IOException;1551126401;Searching for a rare phrase shouldn't provide any suggestions if confidence &gt_ 1.  This was possible before we rechecked the cutoff_score during the reduce phase.  Failures don't occur every time - maybe two out of five tries but we don't repeat it to save time.;public void testSearchForRarePhrase() throws IOException {_        _        _        int chafPerShard = 100___        CreateIndexRequestBuilder builder = prepareCreate("test").setSettings(Settings.builder()_                .put(indexSettings())_                .put("index.analysis.analyzer.body.tokenizer", "standard")_                .putList("index.analysis.analyzer.body.filter", "lowercase", "my_shingle")_                .put("index.analysis.filter.my_shingle.type", "shingle")_                .put("index.analysis.filter.my_shingle.output_unigrams", true)_                .put("index.analysis.filter.my_shingle.min_shingle_size", 2)_                .put("index.analysis.filter.my_shingle.max_shingle_size", 2))___        XContentBuilder mapping = XContentFactory.jsonBuilder()_                .startObject()_                    .startObject("type1")_                        .startObject("properties")_                            .startObject("body")_                                .field("type", "text")_                                .field("analyzer", "body")_                            .endObject()_                        .endObject()_                    .endObject()_                .endObject()__        assertAcked(builder.addMapping("type1", mapping))__        ensureGreen()___        NumShards test = getNumShards("test")___        List<String> phrases = new ArrayList<>()__        Collections.addAll(phrases, "nobel prize", "noble gases", "somethingelse prize", "pride and joy", "notes are fun")__        for (int i = 0_ i < 8_ i++) {_            phrases.add("noble somethingelse" + i)__        }_        for (int i = 0_ i < test.numPrimaries * chafPerShard_ i++) {_            phrases.add("chaff" + i)__        }_        for (String phrase: phrases) {_            index("test", "type1", phrase, "body", phrase)__        }_        refresh()___        Suggest searchSuggest = searchSuggest("nobel prize", "simple_phrase", phraseSuggestion("body")_                .addCandidateGenerator(candidateGenerator("body").minWordLength(1).suggestMode("always").maxTermFreq(.99f))_                .confidence(2f)_                .maxErrors(5f)_                .size(1))__        assertSuggestionSize(searchSuggest, 0, 0, "simple_phrase")___        searchSuggest = searchSuggest("noble prize", "simple_phrase", phraseSuggestion("body")_                .addCandidateGenerator(candidateGenerator("body").minWordLength(1).suggestMode("always").maxTermFreq(.99f))_                .confidence(2f)_                .maxErrors(5f)_                .size(1))__        assertSuggestion(searchSuggest, 0, 0, "simple_phrase", "nobel prize")__    };searching,for,a,rare,phrase,shouldn,t,provide,any,suggestions,if,confidence,gt,1,this,was,possible,before,we,rechecked,the,cutoff,score,during,the,reduce,phase,failures,don,t,occur,every,time,maybe,two,out,of,five,tries,but,we,don,t,repeat,it,to,save,time;public,void,test,search,for,rare,phrase,throws,ioexception,int,chaf,per,shard,100,create,index,request,builder,builder,prepare,create,test,set,settings,settings,builder,put,index,settings,put,index,analysis,analyzer,body,tokenizer,standard,put,list,index,analysis,analyzer,body,filter,lowercase,put,index,analysis,filter,type,shingle,put,index,analysis,filter,true,put,index,analysis,filter,2,put,index,analysis,filter,2,xcontent,builder,mapping,xcontent,factory,json,builder,start,object,start,object,type1,start,object,properties,start,object,body,field,type,text,field,analyzer,body,end,object,end,object,end,object,end,object,assert,acked,builder,add,mapping,type1,mapping,ensure,green,num,shards,test,get,num,shards,test,list,string,phrases,new,array,list,collections,add,all,phrases,nobel,prize,noble,gases,somethingelse,prize,pride,and,joy,notes,are,fun,for,int,i,0,i,8,i,phrases,add,noble,somethingelse,i,for,int,i,0,i,test,num,primaries,chaf,per,shard,i,phrases,add,chaff,i,for,string,phrase,phrases,index,test,type1,phrase,body,phrase,refresh,suggest,search,suggest,search,suggest,nobel,prize,phrase,suggestion,body,add,candidate,generator,candidate,generator,body,min,word,length,1,suggest,mode,always,max,term,freq,99f,confidence,2f,max,errors,5f,size,1,assert,suggestion,size,search,suggest,0,0,search,suggest,search,suggest,noble,prize,phrase,suggestion,body,add,candidate,generator,candidate,generator,body,min,word,length,1,suggest,mode,always,max,term,freq,99f,confidence,2f,max,errors,5f,size,1,assert,suggestion,search,suggest,0,0,nobel,prize
