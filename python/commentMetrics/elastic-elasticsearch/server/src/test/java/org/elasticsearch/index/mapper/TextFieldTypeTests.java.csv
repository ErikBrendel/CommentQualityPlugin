commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected MappedFieldType createDefaultFieldType() {     return new TextFieldMapper.TextFieldType(). }
false;public;1;5;;@Override public void modify(MappedFieldType ft) {     TextFieldMapper.TextFieldType tft = (TextFieldMapper.TextFieldType) ft.     tft.setFielddata(tft.fielddata() == false). }
false;public;1;5;;@Override public void modify(MappedFieldType ft) {     TextFieldMapper.TextFieldType tft = (TextFieldMapper.TextFieldType) ft.     tft.setFielddataMinFrequency(3). }
false;public;1;5;;@Override public void modify(MappedFieldType ft) {     TextFieldMapper.TextFieldType tft = (TextFieldMapper.TextFieldType) ft.     tft.setFielddataMaxFrequency(0.2). }
false;public;1;5;;@Override public void modify(MappedFieldType ft) {     TextFieldMapper.TextFieldType tft = (TextFieldMapper.TextFieldType) ft.     tft.setFielddataMinSegmentSize(1000). }
false;public;1;5;;@Override public void modify(MappedFieldType ft) {     TextFieldMapper.TextFieldType tft = (TextFieldMapper.TextFieldType) ft.     tft.setIndexPhrases(true). }
false;public;1;11;;@Override public void modify(MappedFieldType ft) {     TextFieldMapper.TextFieldType tft = (TextFieldMapper.TextFieldType) ft.     TextFieldMapper.PrefixFieldType pft = tft.getPrefixFieldType().     if (pft == null) {         tft.setPrefixFieldType(new TextFieldMapper.PrefixFieldType(ft.name(), ft.name() + "._index_prefix", 3, 3)).     } else {         tft.setPrefixFieldType(null).     } }
false;public;0;51;;@Before public void setupProperties() {     addModifier(new Modifier("fielddata", true) {          @Override         public void modify(MappedFieldType ft) {             TextFieldMapper.TextFieldType tft = (TextFieldMapper.TextFieldType) ft.             tft.setFielddata(tft.fielddata() == false).         }     }).     addModifier(new Modifier("fielddata_frequency_filter.min", true) {          @Override         public void modify(MappedFieldType ft) {             TextFieldMapper.TextFieldType tft = (TextFieldMapper.TextFieldType) ft.             tft.setFielddataMinFrequency(3).         }     }).     addModifier(new Modifier("fielddata_frequency_filter.max", true) {          @Override         public void modify(MappedFieldType ft) {             TextFieldMapper.TextFieldType tft = (TextFieldMapper.TextFieldType) ft.             tft.setFielddataMaxFrequency(0.2).         }     }).     addModifier(new Modifier("fielddata_frequency_filter.min_segment_size", true) {          @Override         public void modify(MappedFieldType ft) {             TextFieldMapper.TextFieldType tft = (TextFieldMapper.TextFieldType) ft.             tft.setFielddataMinSegmentSize(1000).         }     }).     addModifier(new Modifier("index_phrases", false) {          @Override         public void modify(MappedFieldType ft) {             TextFieldMapper.TextFieldType tft = (TextFieldMapper.TextFieldType) ft.             tft.setIndexPhrases(true).         }     }).     addModifier(new Modifier("index_prefixes", false) {          @Override         public void modify(MappedFieldType ft) {             TextFieldMapper.TextFieldType tft = (TextFieldMapper.TextFieldType) ft.             TextFieldMapper.PrefixFieldType pft = tft.getPrefixFieldType().             if (pft == null) {                 tft.setPrefixFieldType(new TextFieldMapper.PrefixFieldType(ft.name(), ft.name() + "._index_prefix", 3, 3)).             } else {                 tft.setPrefixFieldType(null).             }         }     }). }
false;public;0;11;;public void testTermQuery() {     MappedFieldType ft = createDefaultFieldType().     ft.setName("field").     ft.setIndexOptions(IndexOptions.DOCS).     assertEquals(new TermQuery(new Term("field", "foo")), ft.termQuery("foo", null)).     ft.setIndexOptions(IndexOptions.NONE).     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> ft.termQuery("bar", null)).     assertEquals("Cannot search on field [field] since it is not indexed.", e.getMessage()). }
false;public;0;15;;public void testTermsQuery() {     MappedFieldType ft = createDefaultFieldType().     ft.setName("field").     ft.setIndexOptions(IndexOptions.DOCS).     List<BytesRef> terms = new ArrayList<>().     terms.add(new BytesRef("foo")).     terms.add(new BytesRef("bar")).     assertEquals(new TermInSetQuery("field", terms), ft.termsQuery(Arrays.asList("foo", "bar"), null)).     ft.setIndexOptions(IndexOptions.NONE).     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> ft.termsQuery(Arrays.asList("foo", "bar"), null)).     assertEquals("Cannot search on field [field] since it is not indexed.", e.getMessage()). }
false;public;0;12;;public void testRegexpQuery() {     MappedFieldType ft = createDefaultFieldType().     ft.setName("field").     ft.setIndexOptions(IndexOptions.DOCS).     assertEquals(new RegexpQuery(new Term("field", "foo.*")), ft.regexpQuery("foo.*", 0, 10, null, null)).     ft.setIndexOptions(IndexOptions.NONE).     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> ft.regexpQuery("foo.*", 0, 10, null, null)).     assertEquals("Cannot search on field [field] since it is not indexed.", e.getMessage()). }
false;public;0;12;;public void testFuzzyQuery() {     MappedFieldType ft = createDefaultFieldType().     ft.setName("field").     ft.setIndexOptions(IndexOptions.DOCS).     assertEquals(new FuzzyQuery(new Term("field", "foo"), 2, 1, 50, true), ft.fuzzyQuery("foo", Fuzziness.fromEdits(2), 1, 50, true)).     ft.setIndexOptions(IndexOptions.NONE).     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> ft.fuzzyQuery("foo", Fuzziness.fromEdits(2), 1, 50, true)).     assertEquals("Cannot search on field [field] since it is not indexed.", e.getMessage()). }
false;public;0;22;;public void testIndexPrefixes() {     TextFieldMapper.TextFieldType ft = new TextFieldMapper.TextFieldType().     ft.setName("field").     ft.setPrefixFieldType(new TextFieldMapper.PrefixFieldType("field", "field._index_prefix", 2, 10)).     Query q = ft.prefixQuery("goin", CONSTANT_SCORE_REWRITE, null).     assertEquals(new ConstantScoreQuery(new TermQuery(new Term("field._index_prefix", "goin"))), q).     q = ft.prefixQuery("internationalisatio", CONSTANT_SCORE_REWRITE, null).     assertEquals(new PrefixQuery(new Term("field", "internationalisatio")), q).     q = ft.prefixQuery("g", CONSTANT_SCORE_REWRITE, null).     Automaton automaton = Operations.concatenate(Arrays.asList(Automata.makeChar('g'), Automata.makeAnyChar())).     Query expected = new ConstantScoreQuery(new BooleanQuery.Builder().add(new AutomatonQuery(new Term("field._index_prefix", "g*"), automaton), BooleanClause.Occur.SHOULD).add(new TermQuery(new Term("field", "g")), BooleanClause.Occur.SHOULD).build()).     assertThat(q, equalTo(expected)). }
