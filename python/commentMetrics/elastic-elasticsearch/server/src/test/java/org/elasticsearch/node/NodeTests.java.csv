commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public List<BootstrapCheck> getBootstrapChecks() {     return Collections.singletonList(CHECK). }
false;private;0;6;;private List<Class<? extends Plugin>> basePlugins() {     List<Class<? extends Plugin>> plugins = new ArrayList<>().     plugins.add(getTestTransportPlugin()).     plugins.add(MockHttpTransport.TestPlugin.class).     return plugins. }
false;protected;3;8;;@Override protected void validateNodeBeforeAcceptingRequests(BootstrapContext context, BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException {     assertEquals(1, bootstrapChecks.size()).     assertSame(CheckPlugin.CHECK, bootstrapChecks.get(0)).     executed.set(true).     throw new NodeValidationException("boom"). }
false;public;0;23;;public void testLoadPluginBootstrapChecks() throws IOException {     final String name = randomBoolean() ? randomAlphaOfLength(10) : null.     Settings.Builder settings = baseSettings().     if (name != null) {         settings.put(Node.NODE_NAME_SETTING.getKey(), name).     }     AtomicBoolean executed = new AtomicBoolean(false).     List<Class<? extends Plugin>> plugins = basePlugins().     plugins.add(CheckPlugin.class).     try (Node node = new MockNode(settings.build(), plugins) {          @Override         protected void validateNodeBeforeAcceptingRequests(BootstrapContext context, BoundTransportAddress boundTransportAddress, List<BootstrapCheck> bootstrapChecks) throws NodeValidationException {             assertEquals(1, bootstrapChecks.size()).             assertSame(CheckPlugin.CHECK, bootstrapChecks.get(0)).             executed.set(true).             throw new NodeValidationException("boom").         }     }) {         expectThrows(NodeValidationException.class, () -> node.start()).         assertTrue(executed.get()).     } }
false;public;0;26;;public void testNodeAttributes() throws IOException {     String attr = randomAlphaOfLength(5).     Settings.Builder settings = baseSettings().put(Node.NODE_ATTRIBUTES.getKey() + "test_attr", attr).     try (Node node = new MockNode(settings.build(), basePlugins())) {         final Settings nodeSettings = randomBoolean() ? node.settings() : node.getEnvironment().settings().         assertEquals(attr, Node.NODE_ATTRIBUTES.getAsMap(nodeSettings).get("test_attr")).     }     // leading whitespace not allowed     attr = " leading".     settings = baseSettings().put(Node.NODE_ATTRIBUTES.getKey() + "test_attr", attr).     try (Node node = new MockNode(settings.build(), basePlugins())) {         fail("should not allow a node attribute with leading whitespace").     } catch (IllegalArgumentException e) {         assertEquals("node.attr.test_attr cannot have leading or trailing whitespace [ leading]", e.getMessage()).     }     // trailing whitespace not allowed     attr = "trailing ".     settings = baseSettings().put(Node.NODE_ATTRIBUTES.getKey() + "test_attr", attr).     try (Node node = new MockNode(settings.build(), basePlugins())) {         fail("should not allow a node attribute with trailing whitespace").     } catch (IllegalArgumentException e) {         assertEquals("node.attr.test_attr cannot have leading or trailing whitespace [trailing ]", e.getMessage()).     } }
false;public;0;18;;public void testServerNameNodeAttribute() throws IOException {     String attr = "valid-hostname".     Settings.Builder settings = baseSettings().put(Node.NODE_ATTRIBUTES.getKey() + "server_name", attr).     int i = 0.     try (Node node = new MockNode(settings.build(), basePlugins())) {         final Settings nodeSettings = randomBoolean() ? node.settings() : node.getEnvironment().settings().         assertEquals(attr, Node.NODE_ATTRIBUTES.getAsMap(nodeSettings).get("server_name")).     }     // non-LDH hostname not allowed     attr = "invalid_hostname".     settings = baseSettings().put(Node.NODE_ATTRIBUTES.getKey() + "server_name", attr).     try (Node node = new MockNode(settings.build(), basePlugins())) {         fail("should not allow a server_name attribute with an underscore").     } catch (IllegalArgumentException e) {         assertEquals("invalid node.attr.server_name [invalid_hostname]", e.getMessage()).     } }
false;private,static;0;8;;private static Settings.Builder baseSettings() {     final Path tempDir = createTempDir().     return Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName("single-node-cluster", randomLong())).put(Environment.PATH_HOME_SETTING.getKey(), tempDir).put(NetworkModule.TRANSPORT_TYPE_KEY, getTestTransportType()).put(Node.NODE_DATA_SETTING.getKey(), true). }
