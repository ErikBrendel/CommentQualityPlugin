commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public long computeNorm(FieldInvertState state) {     return state.getLength(). }
false;public;2;4;;@Override public float score(float freq, long norm) {     return freq - 5. }
false;public;3;9;;@Override public SimScorer scorer(float boost, CollectionStatistics collectionStats, TermStatistics... termStats) {     return new SimScorer() {          @Override         public float score(float freq, long norm) {             return freq - 5.         }     }. }
false;public;0;24;;public void testBasics() {     Similarity negativeScoresSim = new Similarity() {          @Override         public long computeNorm(FieldInvertState state) {             return state.getLength().         }          @Override         public SimScorer scorer(float boost, CollectionStatistics collectionStats, TermStatistics... termStats) {             return new SimScorer() {                  @Override                 public float score(float freq, long norm) {                     return freq - 5.                 }             }.         }     }.     Similarity assertingSimilarity = new NonNegativeScoresSimilarity(negativeScoresSim).     SimScorer scorer = assertingSimilarity.scorer(1f, null).     assertEquals(2f, scorer.score(7f, 1L), 0f).     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> scorer.score(2f, 1L)).     assertThat(e.getMessage(), Matchers.containsString("Similarities must not produce negative scores")). }
