commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected Environment createEnv(Map<String, String> settings) throws UserException {     return env. }
false;protected;0;9;;@Override protected Command newCommand() {     return new CreateKeyStoreCommand() {          @Override         protected Environment createEnv(Map<String, String> settings) throws UserException {             return env.         }     }. }
false;public;0;5;;public void testPosix() throws Exception {     execute().     Path configDir = env.configFile().     assertNotNull(KeyStoreWrapper.load(configDir)). }
false;public;0;6;;public void testNotPosix() throws Exception {     env = setupEnv(false, fileSystems).     execute().     Path configDir = env.configFile().     assertNotNull(KeyStoreWrapper.load(configDir)). }
false;public;0;17;;public void testOverwrite() throws Exception {     Path keystoreFile = KeyStoreWrapper.keystorePath(env.configFile()).     byte[] content = "not a keystore".getBytes(StandardCharsets.UTF_8).     Files.write(keystoreFile, content).     // default is no     terminal.addTextInput("").     execute().     assertArrayEquals(content, Files.readAllBytes(keystoreFile)).     // explicit no     terminal.addTextInput("n").     execute().     assertArrayEquals(content, Files.readAllBytes(keystoreFile)).     terminal.addTextInput("y").     execute().     assertNotNull(KeyStoreWrapper.load(env.configFile())). }
