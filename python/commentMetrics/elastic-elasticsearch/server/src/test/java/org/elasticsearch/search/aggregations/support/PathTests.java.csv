commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;public void testInvalidPaths() throws Exception {     assertInvalidPath("[foo]", "brackets at the beginning of the token expression").     assertInvalidPath("foo[bar", "open brackets without closing at the token expression").     assertInvalidPath("foo[", "open bracket at the end of the token expression").     assertInvalidPath("foo[]", "empty brackets in the token expression").     assertInvalidPath("foo[bar]baz", "brackets not enclosing at the end of the token expression").     assertInvalidPath(".foo", "dot separator at the beginning of the token expression").     assertInvalidPath("foo.", "dot separator at the end of the token expression"). }
false;public;0;10;;public void testValidPaths() throws Exception {     assertValidPath("foo>bar", tokens().add("foo").add("bar")).     assertValidPath("foo.bar", tokens().add("foo", "bar")).     assertValidPath("foo[bar]", tokens().add("foo", "bar")).     assertValidPath("foo[bar]>baz", tokens().add("foo", "bar").add("baz")).     assertValidPath("foo[bar]>baz[qux]", tokens().add("foo", "bar").add("baz", "qux")).     assertValidPath("foo[bar]>baz.qux", tokens().add("foo", "bar").add("baz", "qux")).     assertValidPath("foo.bar>baz.qux", tokens().add("foo.bar").add("baz", "qux")).     assertValidPath("foo.bar>baz[qux]", tokens().add("foo.bar").add("baz", "qux")). }
false;private;2;8;;private void assertInvalidPath(String path, String reason) {     try {         AggregationPath.parse(path).         fail("Expected parsing path [" + path + "] to fail - " + reason).     } catch (AggregationExecutionException aee) {     // expected     } }
false;private;2;10;;private void assertValidPath(String path, Tokens tokenz) {     AggregationPath.PathElement[] tokens = tokenz.toArray().     AggregationPath p = AggregationPath.parse(path).     assertThat(p.getPathElements().size(), equalTo(tokens.length)).     for (int i = 0. i < p.getPathElements().size(). i++) {         AggregationPath.PathElement t1 = p.getPathElements().get(i).         AggregationPath.PathElement t2 = tokens[i].         assertThat(t1, equalTo(t2)).     } }
false;private,static;0;3;;private static Tokens tokens() {     return new Tokens(). }
false;;1;4;;Tokens add(String name) {     tokens.add(new AggregationPath.PathElement(name, name, null)).     return this. }
false;;2;8;;Tokens add(String name, String key) {     if (randomBoolean()) {         tokens.add(new AggregationPath.PathElement(name + "." + key, name, key)).     } else {         tokens.add(new AggregationPath.PathElement(name + "[" + key + "]", name, key)).     }     return this. }
false;;0;3;;AggregationPath.PathElement[] toArray() {     return tokens.toArray(new AggregationPath.PathElement[tokens.size()]). }
