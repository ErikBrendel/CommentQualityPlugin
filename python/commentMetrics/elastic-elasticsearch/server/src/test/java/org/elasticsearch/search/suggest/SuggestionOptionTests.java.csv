commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;7;;public static Option createTestItem() {     Text text = new Text(randomAlphaOfLengthBetween(5, 15)).     float score = randomFloat().     Text highlighted = randomFrom((Text) null, new Text(randomAlphaOfLengthBetween(5, 15))).     Boolean collateMatch = randomFrom((Boolean) null, randomBoolean()).     return new PhraseSuggestion.Entry.Option(text, highlighted, score, collateMatch). }
false;public;0;3;;public void testFromXContent() throws IOException {     doTestFromXContent(false). }
false;public;0;3;;public void testFromXContentWithRandomFields() throws IOException {     doTestFromXContent(true). }
false;private;1;24;;private void doTestFromXContent(boolean addRandomFields) throws IOException {     Option option = createTestItem().     XContentType xContentType = randomFrom(XContentType.values()).     boolean humanReadable = randomBoolean().     BytesReference originalBytes = toShuffledXContent(option, xContentType, ToXContent.EMPTY_PARAMS, humanReadable).     BytesReference mutated.     if (addRandomFields) {         mutated = insertRandomFields(xContentType, originalBytes, null, random()).     } else {         mutated = originalBytes.     }     Option parsed.     try (XContentParser parser = createParser(xContentType.xContent(), mutated)) {         ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation).         parsed = PhraseSuggestion.Entry.Option.fromXContent(parser).         assertEquals(XContentParser.Token.END_OBJECT, parser.currentToken()).         assertNull(parser.nextToken()).     }     assertEquals(option.getText(), parsed.getText()).     assertEquals(option.getHighlighted(), parsed.getHighlighted()).     assertEquals(option.getScore(), parsed.getScore(), Float.MIN_VALUE).     assertEquals(option.collateMatch(), parsed.collateMatch()).     assertToXContentEquivalent(originalBytes, toXContent(parsed, xContentType, humanReadable), xContentType). }
false;public;0;10;;public void testToXContent() throws IOException {     Option option = new PhraseSuggestion.Entry.Option(new Text("someText"), new Text("somethingHighlighted"), 1.3f, true).     BytesReference xContent = toXContent(option, XContentType.JSON, randomBoolean()).     assertEquals("{\"text\":\"someText\"," + "\"highlighted\":\"somethingHighlighted\"," + "\"score\":1.3," + "\"collate_match\":true" + "}", xContent.utf8ToString()). }
