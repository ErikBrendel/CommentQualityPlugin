commented;modifiers;parameterAmount;loc;comment;code
false;public;0;34;;public void testDataNodes() throws Exception {     internalCluster().startNode(Settings.builder().put(Node.NODE_DATA_SETTING.getKey(), false).build()).     client().admin().indices().create(createIndexRequest("test").waitForActiveShards(ActiveShardCount.NONE)).actionGet().     try {         client().index(Requests.indexRequest("test").type("type1").id("1").source(source("1", "test"), XContentType.JSON).timeout(timeValueSeconds(1))).actionGet().         fail("no allocation should happen").     } catch (UnavailableShardsException e) {     // all is well     }     internalCluster().startNode(Settings.builder().put(Node.NODE_DATA_SETTING.getKey(), false).build()).     assertThat(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForNodes("2").setLocal(true).execute().actionGet().isTimedOut(), equalTo(false)).     // still no shard should be allocated     try {         client().index(Requests.indexRequest("test").type("type1").id("1").source(source("1", "test"), XContentType.JSON).timeout(timeValueSeconds(1))).actionGet().         fail("no allocation should happen").     } catch (UnavailableShardsException e) {     // all is well     }     // now, start a node data, and see that it gets with shards     internalCluster().startNode(Settings.builder().put(Node.NODE_DATA_SETTING.getKey(), true).build()).     assertThat(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForNodes("3").setLocal(true).execute().actionGet().isTimedOut(), equalTo(false)).     IndexResponse indexResponse = client().index(Requests.indexRequest("test").type("type1").id("1").source(source("1", "test"), XContentType.JSON)).actionGet().     assertThat(indexResponse.getId(), equalTo("1")).     assertThat(indexResponse.getType(), equalTo("type1")). }
false;private;2;3;;private String source(String id, String nameValue) {     return "{ \"type1\" : { \"id\" : \"" + id + "\", \"name\" : \"" + nameValue + "\" } }". }
