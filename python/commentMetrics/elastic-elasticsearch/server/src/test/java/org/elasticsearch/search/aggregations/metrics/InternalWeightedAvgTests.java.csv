commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;13;;@Override protected InternalWeightedAvg createTestInstance(String name, List<PipelineAggregator> pipelineAggregators, Map<String, Object> metaData) {     DocValueFormat formatter = randomNumericDocValueFormat().     return new InternalWeightedAvg(name, randomDoubleBetween(0, 100000, true), randomDoubleBetween(0, 100000, true), formatter, pipelineAggregators, metaData). }
false;protected;0;4;;@Override protected Reader<InternalWeightedAvg> instanceReader() {     return InternalWeightedAvg::new. }
false;protected;2;12;;@Override protected void assertReduced(InternalWeightedAvg reduced, List<InternalWeightedAvg> inputs) {     double sum = 0.     double weight = 0.     for (InternalWeightedAvg in : inputs) {         sum += in.getSum().         weight += in.getWeight().     }     assertEquals(sum, reduced.getSum(), 0.0000001).     assertEquals(weight, reduced.getWeight(), 0.0000001).     assertEquals(sum / weight, reduced.getValue(), 0.0000001). }
false;protected;2;9;;@Override protected void assertFromXContent(InternalWeightedAvg avg, ParsedAggregation parsedAggregation) {     ParsedWeightedAvg parsed = ((ParsedWeightedAvg) parsedAggregation).     assertEquals(avg.getValue(), parsed.getValue(), Double.MIN_VALUE).     // we don't print out VALUE_AS_STRING for avg.getCount() == 0, so we cannot get the exact same value back     if (avg.getWeight() != 0) {         assertEquals(avg.getValueAsString(), parsed.getValueAsString()).     } }
false;protected;1;39;;@Override protected InternalWeightedAvg mutateInstance(InternalWeightedAvg instance) {     String name = instance.getName().     double sum = instance.getSum().     double weight = instance.getWeight().     DocValueFormat formatter = instance.getFormatter().     List<PipelineAggregator> pipelineAggregators = instance.pipelineAggregators().     Map<String, Object> metaData = instance.getMetaData().     switch(between(0, 2)) {         case 0:             name += randomAlphaOfLength(5).             break.         case 1:             if (Double.isFinite(sum)) {                 sum += between(1, 100).             } else {                 sum = between(1, 100).             }             break.         case 2:             if (Double.isFinite(weight)) {                 weight += between(1, 100).             } else {                 weight = between(1, 100).             }             break.         case 3:             if (metaData == null) {                 metaData = new HashMap<>(1).             } else {                 metaData = new HashMap<>(instance.getMetaData()).             }             metaData.put(randomAlphaOfLength(15), randomInt()).             break.         default:             throw new AssertionError("Illegal randomisation branch").     }     return new InternalWeightedAvg(name, sum, weight, formatter, pipelineAggregators, metaData). }
