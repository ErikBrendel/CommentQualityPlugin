commented;modifiers;parameterAmount;loc;comment;code
false;;1;7;;Map<String, Object> getMap(Object... keyValues) {     Map<String, Object> map = new HashMap<>().     for (int i = 0. i < keyValues.length. i++) {         map.put((String) keyValues[i], keyValues[++i]).     }     return map. }
false;;2;7;;Map<String, Object> getNamedMap(String name, Object... keyValues) {     Map<String, Object> map = getMap(keyValues).     Map<String, Object> namedMap = new HashMap<>(1).     namedMap.put(name, map).     return namedMap. }
false;;1;3;;List<Object> getList(Object... values) {     return Arrays.asList(values). }
false;public;0;10;;public void testMergingListValuesAreMapsOfOne() {     Map<String, Object> defaults = getMap("test", getList(getNamedMap("name1", "t1", "1"), getNamedMap("name2", "t2", "2"))).     Map<String, Object> content = getMap("test", getList(getNamedMap("name2", "t3", "3"), getNamedMap("name4", "t4", "4"))).     Map<String, Object> expected = getMap("test", getList(getNamedMap("name2", "t2", "2", "t3", "3"), getNamedMap("name4", "t4", "4"), getNamedMap("name1", "t1", "1"))).     XContentHelper.mergeDefaults(content, defaults).     assertThat(content, Matchers.equalTo(expected)). }
false;public;0;36;;public void testToXContent() throws IOException {     final XContentType xContentType = randomFrom(XContentType.values()).     final ToXContent toXContent.     final boolean error.     if (randomBoolean()) {         if (randomBoolean()) {             error = false.             toXContent = (builder, params) -> builder.field("field", "value").         } else {             error = true.             toXContent = (builder, params) -> builder.startObject().field("field", "value").endObject().         }     } else {         if (randomBoolean()) {             error = false.             toXContent = (ToXContentObject) (builder, params) -> builder.startObject().field("field", "value").endObject().         } else {             error = true.             toXContent = (ToXContentObject) (builder, params) -> builder.field("field", "value").         }     }     if (error) {         expectThrows(IOException.class, () -> XContentHelper.toXContent(toXContent, xContentType, randomBoolean())).     } else {         BytesReference bytes = XContentHelper.toXContent(toXContent, xContentType, randomBoolean()).         try (XContentParser parser = xContentType.xContent().createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, bytes.streamInput())) {             assertEquals(XContentParser.Token.START_OBJECT, parser.nextToken()).             assertEquals(XContentParser.Token.FIELD_NAME, parser.nextToken()).             assertTrue(parser.nextToken().isValue()).             assertEquals("value", parser.text()).             assertEquals(XContentParser.Token.END_OBJECT, parser.nextToken()).             assertNull(parser.nextToken()).         }     } }
