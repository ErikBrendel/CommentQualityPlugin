commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;15;;@Override protected SpanNearQueryBuilder doCreateTestQueryBuilder() {     SpanTermQueryBuilder[] spanTermQueries = new SpanTermQueryBuilderTests().createSpanTermQueryBuilders(randomIntBetween(1, 6)).     SpanNearQueryBuilder queryBuilder = new SpanNearQueryBuilder(spanTermQueries[0], randomIntBetween(-10, 10)).     for (int i = 1. i < spanTermQueries.length. i++) {         SpanTermQueryBuilder termQB = spanTermQueries[i].         queryBuilder.addClause(termQB).         if (i % 2 == 1) {             SpanGapQueryBuilder gapQB = new SpanGapQueryBuilder(termQB.fieldName(), randomIntBetween(1, 2)).             queryBuilder.addClause(gapQB).         }     }     queryBuilder.inOrder(true).     return queryBuilder. }
false;protected;3;22;;@Override protected void doAssertLuceneQuery(SpanNearQueryBuilder queryBuilder, Query query, SearchContext context) throws IOException {     assertThat(query, either(instanceOf(SpanNearQuery.class)).or(instanceOf(SpanTermQuery.class)).or(instanceOf(SpanBoostQuery.class)).or(instanceOf(MatchAllQueryBuilder.class))).     if (query instanceof SpanNearQuery) {         SpanNearQuery spanNearQuery = (SpanNearQuery) query.         assertThat(spanNearQuery.getSlop(), equalTo(queryBuilder.slop())).         assertThat(spanNearQuery.isInOrder(), equalTo(queryBuilder.inOrder())).         assertThat(spanNearQuery.getClauses().length, equalTo(queryBuilder.clauses().size())).         Iterator<SpanQueryBuilder> spanQueryBuilderIterator = queryBuilder.clauses().iterator().         for (SpanQuery spanQuery : spanNearQuery.getClauses()) {             SpanQueryBuilder spanQB = spanQueryBuilderIterator.next().             if (spanQB instanceof SpanGapQueryBuilder)                 continue.             assertThat(spanQuery, equalTo(spanQB.toQuery(context.getQueryShardContext()))).         }     } else if (query instanceof SpanTermQuery || query instanceof SpanBoostQuery) {         assertThat(queryBuilder.clauses().size(), equalTo(1)).         assertThat(query, equalTo(queryBuilder.clauses().get(0).toQuery(context.getQueryShardContext()))).     } }
false;public;0;4;;public void testIllegalArguments() {     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new SpanGapQueryBuilder(null, 1)).     assertEquals("[span_gap] field name is null or empty", e.getMessage()). }
false;public;0;36;;public void testFromJson() throws IOException {     String json = "{\n" + "  \"span_near\" : {\n" + "    \"clauses\" : [ {\n" + "      \"span_term\" : {\n" + "        \"field\" : {\n" + "          \"value\" : \"value1\",\n" + "          \"boost\" : 1.0\n" + "        }\n" + "      }\n" + "    }, {\n" + "      \"span_gap\" : {\n" + "        \"field\" : 2" + "      }\n" + "    }, {\n" + "      \"span_term\" : {\n" + "        \"field\" : {\n" + "          \"value\" : \"value3\",\n" + "          \"boost\" : 1.0\n" + "        }\n" + "      }\n" + "    } ],\n" + "    \"slop\" : 12,\n" + "    \"in_order\" : false,\n" + "    \"boost\" : 1.0\n" + "  }\n" + "}".     SpanNearQueryBuilder parsed = (SpanNearQueryBuilder) parseQuery(json).     checkGeneratedJson(json, parsed).     assertEquals(json, 3, parsed.clauses().size()).     assertEquals(json, 12, parsed.slop()).     assertEquals(json, false, parsed.inOrder()). }
