commented;modifiers;parameterAmount;loc;comment;code
false;private;1;7;;private GatewayService createService(final Settings.Builder settings) {     final ClusterService clusterService = new ClusterService(Settings.builder().put("cluster.name", "GatewayServiceTests").build(), new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS), null).     return new GatewayService(settings.build(), null, clusterService, null, null, null, null). }
false;public;0;24;;public void testDefaultRecoverAfterTime() {     // check that the default is not set     GatewayService service = createService(Settings.builder()).     assertNull(service.recoverAfterTime()).     // ensure default is set when setting expected_nodes     service = createService(Settings.builder().put("gateway.expected_nodes", 1)).     assertThat(service.recoverAfterTime(), Matchers.equalTo(GatewayService.DEFAULT_RECOVER_AFTER_TIME_IF_EXPECTED_NODES_IS_SET)).     // ensure default is set when setting expected_data_nodes     service = createService(Settings.builder().put("gateway.expected_data_nodes", 1)).     assertThat(service.recoverAfterTime(), Matchers.equalTo(GatewayService.DEFAULT_RECOVER_AFTER_TIME_IF_EXPECTED_NODES_IS_SET)).     // ensure default is set when setting expected_master_nodes     service = createService(Settings.builder().put("gateway.expected_master_nodes", 1)).     assertThat(service.recoverAfterTime(), Matchers.equalTo(GatewayService.DEFAULT_RECOVER_AFTER_TIME_IF_EXPECTED_NODES_IS_SET)).     // ensure settings override default     final TimeValue timeValue = TimeValue.timeValueHours(3).     // ensure default is set when setting expected_nodes     service = createService(Settings.builder().put("gateway.expected_nodes", 1).put("gateway.recover_after_time", timeValue.toString())).     assertThat(service.recoverAfterTime().millis(), Matchers.equalTo(timeValue.millis())). }
