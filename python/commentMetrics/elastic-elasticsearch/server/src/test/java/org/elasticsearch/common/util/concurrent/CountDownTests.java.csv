commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Override public void run() {     try {         latch.await().     } catch (InterruptedException e) {         throw new RuntimeException(e).     }     while (true) {         if (frequently()) {             if (countDown.isCountedDown()) {                 break.             }         }         if (countDown.countDown()) {             count.incrementAndGet().             break.         }     } }
false;public;0;47;;public void testConcurrent() throws InterruptedException {     final AtomicInteger count = new AtomicInteger(0).     final CountDown countDown = new CountDown(scaledRandomIntBetween(10, 1000)).     Thread[] threads = new Thread[between(3, 10)].     final CountDownLatch latch = new CountDownLatch(1).     for (int i = 0. i < threads.length. i++) {         threads[i] = new Thread() {              @Override             public void run() {                 try {                     latch.await().                 } catch (InterruptedException e) {                     throw new RuntimeException(e).                 }                 while (true) {                     if (frequently()) {                         if (countDown.isCountedDown()) {                             break.                         }                     }                     if (countDown.countDown()) {                         count.incrementAndGet().                         break.                     }                 }             }         }.         threads[i].start().     }     latch.countDown().     Thread.yield().     if (rarely()) {         if (countDown.fastForward()) {             count.incrementAndGet().         }         assertThat(countDown.isCountedDown(), equalTo(true)).         assertThat(countDown.fastForward(), equalTo(false)).     }     for (Thread thread : threads) {         thread.join().     }     assertThat(countDown.isCountedDown(), equalTo(true)).     assertThat(count.get(), Matchers.equalTo(1)). }
false;public;0;19;;public void testSingleThreaded() {     int atLeast = scaledRandomIntBetween(10, 1000).     final CountDown countDown = new CountDown(atLeast).     while (!countDown.isCountedDown()) {         atLeast--.         if (countDown.countDown()) {             assertThat(atLeast, equalTo(0)).             assertThat(countDown.isCountedDown(), equalTo(true)).             assertThat(countDown.fastForward(), equalTo(false)).             break.         }         if (rarely()) {             assertThat(countDown.fastForward(), equalTo(true)).             assertThat(countDown.isCountedDown(), equalTo(true)).             assertThat(countDown.fastForward(), equalTo(false)).         }         assertThat(atLeast, greaterThan(0)).     } }
