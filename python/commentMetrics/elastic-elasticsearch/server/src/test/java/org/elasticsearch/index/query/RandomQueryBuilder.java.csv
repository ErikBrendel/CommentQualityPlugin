commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;16;/**  * Create a new query of a random type  * @param r random seed  * @return a random {@link QueryBuilder}  */ ;/**  * Create a new query of a random type  * @param r random seed  * @return a random {@link QueryBuilder}  */ public static QueryBuilder createQuery(Random r) {     switch(RandomNumbers.randomIntBetween(r, 0, 3)) {         case 0:             return new MatchAllQueryBuilderTests().createTestQueryBuilder().         case 1:             return new TermQueryBuilderTests().createTestQueryBuilder().         case 2:             // tests that use this method.             return new IdsQueryBuilderTests().createTestQueryBuilder().types(Strings.EMPTY_ARRAY).         case 3:             return createMultiTermQuery(r).         default:             throw new UnsupportedOperationException().     } }
true;public,static;1;30;/**  * Create a new multi term query of a random type  * @param r random seed  * @return a random {@link MultiTermQueryBuilder}  */ ;/**  * Create a new multi term query of a random type  * @param r random seed  * @return a random {@link MultiTermQueryBuilder}  */ public static MultiTermQueryBuilder createMultiTermQuery(Random r) {     // for now, only use String Rangequeries for MultiTerm test, numeric and date makes little sense     // see issue #12123 for discussion     MultiTermQueryBuilder multiTermQueryBuilder.     String fieldName = randomFrom(STRING_FIELD_NAME, STRING_ALIAS_FIELD_NAME).     switch(RandomNumbers.randomIntBetween(r, 0, 3)) {         case 0:             RangeQueryBuilder stringRangeQuery = new RangeQueryBuilder(fieldName).             stringRangeQuery.from("a" + RandomStrings.randomAsciiOfLengthBetween(r, 1, 10)).             stringRangeQuery.to("z" + RandomStrings.randomAsciiOfLengthBetween(r, 1, 10)).             multiTermQueryBuilder = stringRangeQuery.             break.         case 1:             multiTermQueryBuilder = new PrefixQueryBuilderTests().createTestQueryBuilder().             break.         case 2:             multiTermQueryBuilder = new WildcardQueryBuilderTests().createTestQueryBuilder().             break.         case 3:             multiTermQueryBuilder = new FuzzyQueryBuilder(fieldName, RandomStrings.randomAsciiOfLengthBetween(r, 1, 10)).             break.         default:             throw new UnsupportedOperationException().     }     if (r.nextBoolean()) {         multiTermQueryBuilder.boost(2.0f / RandomNumbers.randomIntBetween(r, 1, 20)).     }     return multiTermQueryBuilder. }
