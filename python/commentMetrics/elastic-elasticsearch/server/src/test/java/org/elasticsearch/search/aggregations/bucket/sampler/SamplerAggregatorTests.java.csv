commented;modifiers;parameterAmount;loc;comment;code
true;public;0;37;/**  * Uses the sampler aggregation to find the minimum value of a field out of the top 3 scoring documents in a search.  */ ;/**  * Uses the sampler aggregation to find the minimum value of a field out of the top 3 scoring documents in a search.  */ public void testSampler() throws IOException {     TextFieldType textFieldType = new TextFieldType().     textFieldType.setIndexAnalyzer(new NamedAnalyzer("foo", AnalyzerScope.GLOBAL, new StandardAnalyzer())).     MappedFieldType numericFieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.LONG).     numericFieldType.setName("int").     IndexWriterConfig indexWriterConfig = newIndexWriterConfig().     indexWriterConfig.setMaxBufferedDocs(100).     // flush on open to have a single segment with predictable docIds     indexWriterConfig.setRAMBufferSizeMB(100).     try (Directory dir = newDirectory().         IndexWriter w = new IndexWriter(dir, indexWriterConfig)) {         for (long value : new long[] { 7, 3, -10, -6, 5, 50 }) {             Document doc = new Document().             StringBuilder text = new StringBuilder().             for (int i = 0. i < value. i++) {                 text.append("good ").             }             doc.add(new Field("text", text.toString(), textFieldType)).             doc.add(new SortedNumericDocValuesField("int", value)).             w.addDocument(doc).         }         SamplerAggregationBuilder aggBuilder = new SamplerAggregationBuilder("sampler").shardSize(3).subAggregation(new MinAggregationBuilder("min").field("int")).         try (IndexReader reader = DirectoryReader.open(w)) {             assertEquals("test expects a single segment", 1, reader.leaves().size()).             IndexSearcher searcher = new IndexSearcher(reader).             InternalSampler sampler = searchAndReduce(searcher, new TermQuery(new Term("text", "good")), aggBuilder, textFieldType, numericFieldType).             Min min = sampler.getAggregations().get("min").             assertEquals(5.0, min.getValue(), 0).             assertTrue(AggregationInspectionHelper.hasValue(sampler)).         }     } }
