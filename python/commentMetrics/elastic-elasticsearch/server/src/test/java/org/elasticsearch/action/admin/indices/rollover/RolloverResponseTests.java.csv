commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;@Override protected RolloverResponse createTestInstance() {     boolean acknowledged = randomBoolean().     boolean shardsAcknowledged = acknowledged && randomBoolean().     return new RolloverResponse(randomAlphaOfLengthBetween(3, 10), randomAlphaOfLengthBetween(3, 10), randomResults(true), randomBoolean(), randomBoolean(), acknowledged, shardsAcknowledged). }
false;private,static;1;10;;private static Map<String, Boolean> randomResults(boolean allowNoItems) {     Map<String, Boolean> results = new HashMap<>().     int numResults = randomIntBetween(allowNoItems ? 0 : 1, 3).     List<Supplier<Condition<?>>> conditions = randomSubsetOf(numResults, conditionSuppliers).     for (Supplier<Condition<?>> condition : conditions) {         Condition<?> cond = condition.get().         results.put(cond.name, randomBoolean()).     }     return results. }
false;protected;0;4;;@Override protected RolloverResponse createBlankInstance() {     return new RolloverResponse(). }
false;protected;1;4;;@Override protected RolloverResponse doParseInstance(XContentParser parser) {     return RolloverResponse.fromXContent(parser). }
false;protected;0;4;;@Override protected Predicate<String> getRandomFieldsExcludeFilter() {     return field -> field.startsWith("conditions"). }
false;protected;1;53;;@Override protected RolloverResponse mutateInstance(RolloverResponse response) {     int i = randomIntBetween(0, 6).     switch(i) {         case 0:             return new RolloverResponse(response.getOldIndex() + randomAlphaOfLengthBetween(2, 5), response.getNewIndex(), response.getConditionStatus(), response.isDryRun(), response.isRolledOver(), response.isAcknowledged(), response.isShardsAcknowledged()).         case 1:             return new RolloverResponse(response.getOldIndex(), response.getNewIndex() + randomAlphaOfLengthBetween(2, 5), response.getConditionStatus(), response.isDryRun(), response.isRolledOver(), response.isAcknowledged(), response.isShardsAcknowledged()).         case 2:             Map<String, Boolean> results.             if (response.getConditionStatus().isEmpty()) {                 results = randomResults(false).             } else {                 results = new HashMap<>(response.getConditionStatus().size()).                 List<String> keys = randomSubsetOf(randomIntBetween(1, response.getConditionStatus().size()), response.getConditionStatus().keySet()).                 for (Map.Entry<String, Boolean> entry : response.getConditionStatus().entrySet()) {                     boolean value = keys.contains(entry.getKey()) ? entry.getValue() == false : entry.getValue().                     results.put(entry.getKey(), value).                 }             }             return new RolloverResponse(response.getOldIndex(), response.getNewIndex(), results, response.isDryRun(), response.isRolledOver(), response.isAcknowledged(), response.isShardsAcknowledged()).         case 3:             return new RolloverResponse(response.getOldIndex(), response.getNewIndex(), response.getConditionStatus(), response.isDryRun() == false, response.isRolledOver(), response.isAcknowledged(), response.isShardsAcknowledged()).         case 4:             return new RolloverResponse(response.getOldIndex(), response.getNewIndex(), response.getConditionStatus(), response.isDryRun(), response.isRolledOver() == false, response.isAcknowledged(), response.isShardsAcknowledged()).         case 5:             {                 boolean acknowledged = response.isAcknowledged() == false.                 boolean shardsAcknowledged = acknowledged && response.isShardsAcknowledged().                 return new RolloverResponse(response.getOldIndex(), response.getNewIndex(), response.getConditionStatus(), response.isDryRun(), response.isRolledOver(), acknowledged, shardsAcknowledged).             }         case 6:             {                 boolean shardsAcknowledged = response.isShardsAcknowledged() == false.                 boolean acknowledged = shardsAcknowledged || response.isAcknowledged().                 return new RolloverResponse(response.getOldIndex(), response.getNewIndex(), response.getConditionStatus(), response.isDryRun(), response.isRolledOver(), acknowledged, shardsAcknowledged).             }         default:             throw new UnsupportedOperationException().     } }
false;public;0;4;;public void testOldSerialisation() throws IOException {     RolloverResponse original = createTestInstance().     assertSerialization(original, VersionUtils.randomVersionBetween(random(), Version.V_6_0_0, Version.V_6_4_0)). }
