commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;4;;@Override protected MaxBucketPipelineAggregationBuilder doCreateTestAggregatorFactory(String name, String bucketsPath) {     return new MaxBucketPipelineAggregationBuilder(name, bucketsPath). }
false;public;0;26;;public void testValidate() {     AggregationBuilder singleBucketAgg = new GlobalAggregationBuilder("global").     AggregationBuilder multiBucketAgg = new TermsAggregationBuilder("terms", ValueType.STRING).     final Set<AggregationBuilder> aggBuilders = new HashSet<>().     aggBuilders.add(singleBucketAgg).     aggBuilders.add(multiBucketAgg).     // First try to point to a non-existent agg     final MaxBucketPipelineAggregationBuilder builder = new MaxBucketPipelineAggregationBuilder("name", "invalid_agg>metric").     IllegalArgumentException ex = expectThrows(IllegalArgumentException.class, () -> builder.validate(null, aggBuilders, Collections.emptySet())).     assertEquals(PipelineAggregator.Parser.BUCKETS_PATH.getPreferredName() + " aggregation does not exist for aggregation [name]: invalid_agg>metric", ex.getMessage()).     // Now try to point to a single bucket agg     MaxBucketPipelineAggregationBuilder builder2 = new MaxBucketPipelineAggregationBuilder("name", "global>metric").     ex = expectThrows(IllegalArgumentException.class, () -> builder2.validate(null, aggBuilders, Collections.emptySet())).     assertEquals("The first aggregation in " + PipelineAggregator.Parser.BUCKETS_PATH.getPreferredName() + " must be a multi-bucket aggregation for aggregation [name] found :" + GlobalAggregationBuilder.class.getName() + " for buckets path: global>metric", ex.getMessage()).     // Now try to point to a valid multi-bucket agg (no exception should be     // thrown)     MaxBucketPipelineAggregationBuilder builder3 = new MaxBucketPipelineAggregationBuilder("name", "terms>metric").     builder3.validate(null, aggBuilders, Collections.emptySet()). }
