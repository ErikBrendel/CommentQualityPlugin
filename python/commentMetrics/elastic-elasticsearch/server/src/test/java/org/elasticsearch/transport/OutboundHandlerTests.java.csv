commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void setUp() throws Exception {     super.setUp().     TransportLogger transportLogger = new TransportLogger().     fakeTcpChannel = new FakeTcpChannel(randomBoolean()).     handler = new OutboundHandler(threadPool, BigArrays.NON_RECYCLING_INSTANCE, transportLogger). }
false;public;0;5;;@After public void tearDown() throws Exception {     ThreadPool.terminate(threadPool, 10, TimeUnit.SECONDS).     super.tearDown(). }
false;public;0;23;;public void testSendRawBytes() {     BytesArray bytesArray = new BytesArray("message".getBytes(StandardCharsets.UTF_8)).     AtomicBoolean isSuccess = new AtomicBoolean(false).     AtomicReference<Exception> exception = new AtomicReference<>().     ActionListener<Void> listener = ActionListener.wrap((v) -> isSuccess.set(true), exception::set).     handler.sendBytes(fakeTcpChannel, bytesArray, listener).     BytesReference reference = fakeTcpChannel.getMessageCaptor().get().     ActionListener<Void> sendListener = fakeTcpChannel.getListenerCaptor().get().     if (randomBoolean()) {         sendListener.onResponse(null).         assertTrue(isSuccess.get()).         assertNull(exception.get()).     } else {         IOException e = new IOException("failed").         sendListener.onFailure(e).         assertFalse(isSuccess.get()).         assertSame(e, exception.get()).     }     assertEquals(bytesArray, reference). }
false;public;0;71;;public void testSendMessage() throws IOException {     OutboundMessage message.     ThreadContext threadContext = threadPool.getThreadContext().     Version version = Version.CURRENT.     String actionName = "handshake".     long requestId = randomLongBetween(0, 300).     boolean isHandshake = randomBoolean().     boolean compress = randomBoolean().     String value = "message".     threadContext.putHeader("header", "header_value").     Writeable writeable = new Message(value).     boolean isRequest = randomBoolean().     if (isRequest) {         message = new OutboundMessage.Request(threadContext, new String[0], writeable, version, actionName, requestId, isHandshake, compress).     } else {         message = new OutboundMessage.Response(threadContext, new HashSet<>(), writeable, version, requestId, isHandshake, compress).     }     AtomicBoolean isSuccess = new AtomicBoolean(false).     AtomicReference<Exception> exception = new AtomicReference<>().     ActionListener<Void> listener = ActionListener.wrap((v) -> isSuccess.set(true), exception::set).     handler.sendMessage(fakeTcpChannel, message, listener).     BytesReference reference = fakeTcpChannel.getMessageCaptor().get().     ActionListener<Void> sendListener = fakeTcpChannel.getListenerCaptor().get().     if (randomBoolean()) {         sendListener.onResponse(null).         assertTrue(isSuccess.get()).         assertNull(exception.get()).     } else {         IOException e = new IOException("failed").         sendListener.onFailure(e).         assertFalse(isSuccess.get()).         assertSame(e, exception.get()).     }     InboundMessage.Reader reader = new InboundMessage.Reader(Version.CURRENT, namedWriteableRegistry, threadPool.getThreadContext()).     try (InboundMessage inboundMessage = reader.deserialize(reference.slice(6, reference.length() - 6))) {         assertEquals(version, inboundMessage.getVersion()).         assertEquals(requestId, inboundMessage.getRequestId()).         if (isRequest) {             assertTrue(inboundMessage.isRequest()).             assertFalse(inboundMessage.isResponse()).         } else {             assertTrue(inboundMessage.isResponse()).             assertFalse(inboundMessage.isRequest()).         }         if (isHandshake) {             assertTrue(inboundMessage.isHandshake()).         } else {             assertFalse(inboundMessage.isHandshake()).         }         if (compress) {             assertTrue(inboundMessage.isCompress()).         } else {             assertFalse(inboundMessage.isCompress()).         }         Message readMessage = new Message().         readMessage.readFrom(inboundMessage.getStreamInput()).         assertEquals(value, readMessage.value).         try (ThreadContext.StoredContext existing = threadContext.stashContext()) {             ThreadContext.StoredContext storedContext = inboundMessage.getStoredContext().             assertNull(threadContext.getHeader("header")).             storedContext.restore().             assertEquals("header_value", threadContext.getHeader("header")).         }     } }
false;public;1;4;;@Override public void readFrom(StreamInput in) throws IOException {     value = in.readString(). }
false;public;1;4;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(value). }
