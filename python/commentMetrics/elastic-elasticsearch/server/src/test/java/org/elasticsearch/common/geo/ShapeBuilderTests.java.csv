# id;timestamp;commentText;codeText;commentWords;codeWords
ShapeBuilderTests -> public void testGeoCircle();1542820501;note: only supported by S4J at the moment;public void testGeoCircle() {_        double earthCircumference = 40075016.69__        Circle circle = new CircleBuilder().center(0, 0).radius("100m").buildS4J()__        assertEquals((360 * 100) / earthCircumference, circle.getRadius(), 0.00000001)__        assertEquals(new PointImpl(0, 0, ShapeBuilder.SPATIAL_CONTEXT), circle.getCenter())__        circle = new CircleBuilder().center(+180, 0).radius("100m").buildS4J()__        assertEquals((360 * 100) / earthCircumference, circle.getRadius(), 0.00000001)__        assertEquals(new PointImpl(180, 0, ShapeBuilder.SPATIAL_CONTEXT), circle.getCenter())__        circle = new CircleBuilder().center(-180, 0).radius("100m").buildS4J()__        assertEquals((360 * 100) / earthCircumference, circle.getRadius(), 0.00000001)__        assertEquals(new PointImpl(-180, 0, ShapeBuilder.SPATIAL_CONTEXT), circle.getCenter())__        circle = new CircleBuilder().center(0, 90).radius("100m").buildS4J()__        assertEquals((360 * 100) / earthCircumference, circle.getRadius(), 0.00000001)__        assertEquals(new PointImpl(0, 90, ShapeBuilder.SPATIAL_CONTEXT), circle.getCenter())__        circle = new CircleBuilder().center(0, -90).radius("100m").buildS4J()__        assertEquals((360 * 100) / earthCircumference, circle.getRadius(), 0.00000001)__        assertEquals(new PointImpl(0, -90, ShapeBuilder.SPATIAL_CONTEXT), circle.getCenter())__        double randomLat = (randomDouble() * 180) - 90__        double randomLon = (randomDouble() * 360) - 180__        double randomRadius = randomIntBetween(1, (int) earthCircumference / 4)__        circle = new CircleBuilder().center(randomLon, randomLat).radius(randomRadius + "m").buildS4J()__        assertEquals((360 * randomRadius) / earthCircumference, circle.getRadius(), 0.00000001)__        assertEquals(new PointImpl(randomLon, randomLat, ShapeBuilder.SPATIAL_CONTEXT), circle.getCenter())__    };note,only,supported,by,s4j,at,the,moment;public,void,test,geo,circle,double,earth,circumference,40075016,69,circle,circle,new,circle,builder,center,0,0,radius,100m,build,s4j,assert,equals,360,100,earth,circumference,circle,get,radius,0,00000001,assert,equals,new,point,impl,0,0,shape,builder,circle,get,center,circle,new,circle,builder,center,180,0,radius,100m,build,s4j,assert,equals,360,100,earth,circumference,circle,get,radius,0,00000001,assert,equals,new,point,impl,180,0,shape,builder,circle,get,center,circle,new,circle,builder,center,180,0,radius,100m,build,s4j,assert,equals,360,100,earth,circumference,circle,get,radius,0,00000001,assert,equals,new,point,impl,180,0,shape,builder,circle,get,center,circle,new,circle,builder,center,0,90,radius,100m,build,s4j,assert,equals,360,100,earth,circumference,circle,get,radius,0,00000001,assert,equals,new,point,impl,0,90,shape,builder,circle,get,center,circle,new,circle,builder,center,0,90,radius,100m,build,s4j,assert,equals,360,100,earth,circumference,circle,get,radius,0,00000001,assert,equals,new,point,impl,0,90,shape,builder,circle,get,center,double,random,lat,random,double,180,90,double,random,lon,random,double,360,180,double,random,radius,random,int,between,1,int,earth,circumference,4,circle,new,circle,builder,center,random,lon,random,lat,radius,random,radius,m,build,s4j,assert,equals,360,random,radius,earth,circumference,circle,get,radius,0,00000001,assert,equals,new,point,impl,random,lon,random,lat,shape,builder,circle,get,center
ShapeBuilderTests -> public void testGeoCircle();1548434247;note: only supported by S4J at the moment;public void testGeoCircle() {_        double earthCircumference = 40075016.69__        Circle circle = new CircleBuilder().center(0, 0).radius("100m").buildS4J()__        assertEquals((360 * 100) / earthCircumference, circle.getRadius(), 0.00000001)__        assertEquals(new PointImpl(0, 0, ShapeBuilder.SPATIAL_CONTEXT), circle.getCenter())__        circle = new CircleBuilder().center(+180, 0).radius("100m").buildS4J()__        assertEquals((360 * 100) / earthCircumference, circle.getRadius(), 0.00000001)__        assertEquals(new PointImpl(180, 0, ShapeBuilder.SPATIAL_CONTEXT), circle.getCenter())__        circle = new CircleBuilder().center(-180, 0).radius("100m").buildS4J()__        assertEquals((360 * 100) / earthCircumference, circle.getRadius(), 0.00000001)__        assertEquals(new PointImpl(-180, 0, ShapeBuilder.SPATIAL_CONTEXT), circle.getCenter())__        circle = new CircleBuilder().center(0, 90).radius("100m").buildS4J()__        assertEquals((360 * 100) / earthCircumference, circle.getRadius(), 0.00000001)__        assertEquals(new PointImpl(0, 90, ShapeBuilder.SPATIAL_CONTEXT), circle.getCenter())__        circle = new CircleBuilder().center(0, -90).radius("100m").buildS4J()__        assertEquals((360 * 100) / earthCircumference, circle.getRadius(), 0.00000001)__        assertEquals(new PointImpl(0, -90, ShapeBuilder.SPATIAL_CONTEXT), circle.getCenter())__        double randomLat = (randomDouble() * 180) - 90__        double randomLon = (randomDouble() * 360) - 180__        double randomRadius = randomIntBetween(1, (int) earthCircumference / 4)__        circle = new CircleBuilder().center(randomLon, randomLat).radius(randomRadius + "m").buildS4J()__        assertEquals((360 * randomRadius) / earthCircumference, circle.getRadius(), 0.00000001)__        assertEquals(new PointImpl(randomLon, randomLat, ShapeBuilder.SPATIAL_CONTEXT), circle.getCenter())__    };note,only,supported,by,s4j,at,the,moment;public,void,test,geo,circle,double,earth,circumference,40075016,69,circle,circle,new,circle,builder,center,0,0,radius,100m,build,s4j,assert,equals,360,100,earth,circumference,circle,get,radius,0,00000001,assert,equals,new,point,impl,0,0,shape,builder,circle,get,center,circle,new,circle,builder,center,180,0,radius,100m,build,s4j,assert,equals,360,100,earth,circumference,circle,get,radius,0,00000001,assert,equals,new,point,impl,180,0,shape,builder,circle,get,center,circle,new,circle,builder,center,180,0,radius,100m,build,s4j,assert,equals,360,100,earth,circumference,circle,get,radius,0,00000001,assert,equals,new,point,impl,180,0,shape,builder,circle,get,center,circle,new,circle,builder,center,0,90,radius,100m,build,s4j,assert,equals,360,100,earth,circumference,circle,get,radius,0,00000001,assert,equals,new,point,impl,0,90,shape,builder,circle,get,center,circle,new,circle,builder,center,0,90,radius,100m,build,s4j,assert,equals,360,100,earth,circumference,circle,get,radius,0,00000001,assert,equals,new,point,impl,0,90,shape,builder,circle,get,center,double,random,lat,random,double,180,90,double,random,lon,random,double,360,180,double,random,radius,random,int,between,1,int,earth,circumference,4,circle,new,circle,builder,center,random,lon,random,lat,radius,random,radius,m,build,s4j,assert,equals,360,random,radius,earth,circumference,circle,get,radius,0,00000001,assert,equals,new,point,impl,random,lon,random,lat,shape,builder,circle,get,center
ShapeBuilderTests -> public void testBoundaryShape();1524684173;Test an enveloping polygon around the max mercator bounds;public void testBoundaryShape() {_        PolygonBuilder builder = new PolygonBuilder(new CoordinatesBuilder()_                .coordinate(-180, 90)_                .coordinate(180, 90)_                .coordinate(180, -90)_                .coordinate(-180, 90)_                )___        Shape shape = builder.close().build()___        assertPolygon(shape)__    };test,an,enveloping,polygon,around,the,max,mercator,bounds;public,void,test,boundary,shape,polygon,builder,builder,new,polygon,builder,new,coordinates,builder,coordinate,180,90,coordinate,180,90,coordinate,180,90,coordinate,180,90,shape,shape,builder,close,build,assert,polygon,shape
ShapeBuilderTests -> public void testBoundaryShape();1540583181;Test an enveloping polygon around the max mercator bounds;public void testBoundaryShape() {_        PolygonBuilder builder = new PolygonBuilder(new CoordinatesBuilder()_                .coordinate(-180, 90)_                .coordinate(180, 90)_                .coordinate(180, -90)_                .coordinate(-180, 90)_                )___        Shape shape = builder.close().build()___        assertPolygon(shape)__    };test,an,enveloping,polygon,around,the,max,mercator,bounds;public,void,test,boundary,shape,polygon,builder,builder,new,polygon,builder,new,coordinates,builder,coordinate,180,90,coordinate,180,90,coordinate,180,90,coordinate,180,90,shape,shape,builder,close,build,assert,polygon,shape
ShapeBuilderTests -> public void testBoundaryShape();1542820501;Test an enveloping polygon around the max mercator bounds;public void testBoundaryShape() {_        PolygonBuilder builder = new PolygonBuilder(new CoordinatesBuilder()_                .coordinate(-180, 90)_                .coordinate(180, 90)_                .coordinate(180, -90)_                .coordinate(-180, 90)_                )___        assertPolygon(builder.close().buildS4J(), true)__        assertPolygon(builder.close().buildLucene(), false)__    };test,an,enveloping,polygon,around,the,max,mercator,bounds;public,void,test,boundary,shape,polygon,builder,builder,new,polygon,builder,new,coordinates,builder,coordinate,180,90,coordinate,180,90,coordinate,180,90,coordinate,180,90,assert,polygon,builder,close,build,s4j,true,assert,polygon,builder,close,build,lucene,false
ShapeBuilderTests -> public void testBoundaryShape();1548434247;Test an enveloping polygon around the max mercator bounds;public void testBoundaryShape() {_        PolygonBuilder builder = new PolygonBuilder(new CoordinatesBuilder()_                .coordinate(-180, 90)_                .coordinate(180, 90)_                .coordinate(180, -90)_                .coordinate(-180, 90)_                )___        assertPolygon(builder.close().buildS4J(), true)__        assertPolygon(builder.close().buildGeometry(), false)__    };test,an,enveloping,polygon,around,the,max,mercator,bounds;public,void,test,boundary,shape,polygon,builder,builder,new,polygon,builder,new,coordinates,builder,coordinate,180,90,coordinate,180,90,coordinate,180,90,coordinate,180,90,assert,polygon,builder,close,build,s4j,true,assert,polygon,builder,close,build,geometry,false
