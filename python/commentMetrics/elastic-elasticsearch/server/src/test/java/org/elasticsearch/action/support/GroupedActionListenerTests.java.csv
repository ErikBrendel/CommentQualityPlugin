commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void onResponse(Collection<Integer> integers) {     resRef.set(integers). }
false;public;1;4;;@Override public void onFailure(Exception e) {     throw new AssertionError(e). }
false;public;0;49;;public void testNotifications() throws InterruptedException {     AtomicReference<Collection<Integer>> resRef = new AtomicReference<>().     ActionListener<Collection<Integer>> result = new ActionListener<Collection<Integer>>() {          @Override         public void onResponse(Collection<Integer> integers) {             resRef.set(integers).         }          @Override         public void onFailure(Exception e) {             throw new AssertionError(e).         }     }.     final int groupSize = randomIntBetween(10, 1000).     AtomicInteger count = new AtomicInteger().     Collection<Integer> defaults = randomBoolean() ? Collections.singletonList(-1) : Collections.emptyList().     GroupedActionListener<Integer> listener = new GroupedActionListener<>(result, groupSize, defaults).     int numThreads = randomIntBetween(2, 5).     Thread[] threads = new Thread[numThreads].     CyclicBarrier barrier = new CyclicBarrier(numThreads).     for (int i = 0. i < numThreads. i++) {         threads[i] = new Thread(() -> {             try {                 barrier.await(10, TimeUnit.SECONDS).             } catch (Exception e) {                 throw new AssertionError(e).             }             int c = 0.             while ((c = count.incrementAndGet()) <= groupSize) {                 listener.onResponse(c - 1).             }         }).         threads[i].start().     }     for (Thread t : threads) {         t.join().     }     assertNotNull(resRef.get()).     ArrayList<Integer> list = new ArrayList<>(resRef.get()).     Collections.sort(list).     int expectedSize = groupSize + defaults.size().     assertEquals(expectedSize, resRef.get().size()).     int expectedValue = defaults.isEmpty() ? 0 : -1.     for (int i = 0. i < expectedSize. i++) {         assertEquals(Integer.valueOf(expectedValue++), list.get(i)).     } }
false;public;1;4;;@Override public void onResponse(Collection<Integer> integers) {     resRef.set(integers). }
false;public;1;4;;@Override public void onFailure(Exception e) {     excRef.set(e). }
false;public;0;34;;public void testFailed() {     AtomicReference<Collection<Integer>> resRef = new AtomicReference<>().     AtomicReference<Exception> excRef = new AtomicReference<>().     ActionListener<Collection<Integer>> result = new ActionListener<Collection<Integer>>() {          @Override         public void onResponse(Collection<Integer> integers) {             resRef.set(integers).         }          @Override         public void onFailure(Exception e) {             excRef.set(e).         }     }.     Collection<Integer> defaults = randomBoolean() ? Collections.singletonList(-1) : Collections.emptyList().     int size = randomIntBetween(3, 4).     GroupedActionListener<Integer> listener = new GroupedActionListener<>(result, size, defaults).     listener.onResponse(0).     IOException ioException = new IOException().     RuntimeException rtException = new RuntimeException().     listener.onFailure(rtException).     listener.onFailure(ioException).     if (size == 4) {         listener.onResponse(2).     }     assertNotNull(excRef.get()).     assertEquals(rtException, excRef.get()).     assertEquals(1, excRef.get().getSuppressed().length).     assertEquals(ioException, excRef.get().getSuppressed()[0]).     assertNull(resRef.get()).     listener.onResponse(1).     assertNull(resRef.get()). }
false;public;0;18;;public void testConcurrentFailures() throws InterruptedException {     AtomicReference<Exception> finalException = new AtomicReference<>().     int numGroups = randomIntBetween(10, 100).     GroupedActionListener<Void> listener = new GroupedActionListener<>(ActionListener.wrap(r -> {     }, finalException::set), numGroups, Collections.emptyList()).     ExecutorService executorService = Executors.newFixedThreadPool(numGroups).     for (int i = 0. i < numGroups. i++) {         executorService.submit(() -> listener.onFailure(new IOException())).     }     executorService.shutdown().     executorService.awaitTermination(10, TimeUnit.SECONDS).     Exception exception = finalException.get().     assertNotNull(exception).     assertThat(exception, instanceOf(IOException.class)).     assertEquals(numGroups - 1, exception.getSuppressed().length). }
