commented;modifiers;parameterAmount;loc;comment;code
false;public;0;63;;public void testSimple() throws Exception {     assertAcked(prepareCreate("test").addAlias(new Alias("alias")).setSettings(Settings.builder().put("index.refresh_interval", -1))).     ensureGreen("test").     client().prepareIndex("test", "test", "1").setSource("field", "value1").get().     ExplainResponse response = client().prepareExplain(indexOrAlias(), "test", "1").setQuery(QueryBuilders.matchAllQuery()).get().     assertNotNull(response).     // not a match b/c not realtime     assertFalse(response.isExists()).     assertThat(response.getIndex(), equalTo("test")).     assertThat(response.getType(), equalTo("test")).     assertThat(response.getId(), equalTo("1")).     // not a match b/c not realtime     assertFalse(response.isMatch()).     refresh().     response = client().prepareExplain(indexOrAlias(), "test", "1").setQuery(QueryBuilders.matchAllQuery()).get().     assertNotNull(response).     assertTrue(response.isMatch()).     assertNotNull(response.getExplanation()).     assertTrue(response.getExplanation().isMatch()).     assertThat(response.getIndex(), equalTo("test")).     assertThat(response.getType(), equalTo("test")).     assertThat(response.getId(), equalTo("1")).     assertThat(response.getExplanation().getValue(), equalTo(1.0f)).     response = client().prepareExplain(indexOrAlias(), "test", "1").setQuery(QueryBuilders.termQuery("field", "value2")).get().     assertNotNull(response).     assertTrue(response.isExists()).     assertFalse(response.isMatch()).     assertThat(response.getIndex(), equalTo("test")).     assertThat(response.getType(), equalTo("test")).     assertThat(response.getId(), equalTo("1")).     assertNotNull(response.getExplanation()).     assertFalse(response.getExplanation().isMatch()).     response = client().prepareExplain(indexOrAlias(), "test", "1").setQuery(QueryBuilders.boolQuery().must(QueryBuilders.termQuery("field", "value1")).must(QueryBuilders.termQuery("field", "value2"))).get().     assertNotNull(response).     assertTrue(response.isExists()).     assertFalse(response.isMatch()).     assertThat(response.getIndex(), equalTo("test")).     assertThat(response.getType(), equalTo("test")).     assertThat(response.getId(), equalTo("1")).     assertNotNull(response.getExplanation()).     assertFalse(response.getExplanation().isMatch()).     assertThat(response.getExplanation().getDetails().length, equalTo(2)).     response = client().prepareExplain(indexOrAlias(), "test", "2").setQuery(QueryBuilders.matchAllQuery()).get().     assertNotNull(response).     assertFalse(response.isExists()).     assertFalse(response.isMatch()).     assertThat(response.getIndex(), equalTo("test")).     assertThat(response.getType(), equalTo("test")).     assertThat(response.getId(), equalTo("2")). }
false;public;0;57;;public void testExplainWithFields() throws Exception {     assertAcked(prepareCreate("test").addMapping("test", "obj1.field1", "type=keyword,store=true", "obj1.field2", "type=keyword,store=true").addAlias(new Alias("alias"))).     ensureGreen("test").     client().prepareIndex("test", "test", "1").setSource(jsonBuilder().startObject().startObject("obj1").field("field1", "value1").field("field2", "value2").endObject().endObject()).get().     refresh().     ExplainResponse response = client().prepareExplain(indexOrAlias(), "test", "1").setQuery(QueryBuilders.matchAllQuery()).setStoredFields("obj1.field1").get().     assertNotNull(response).     assertTrue(response.isMatch()).     assertNotNull(response.getExplanation()).     assertTrue(response.getExplanation().isMatch()).     assertThat(response.getExplanation().getValue(), equalTo(1.0f)).     assertThat(response.getGetResult().isExists(), equalTo(true)).     assertThat(response.getGetResult().getId(), equalTo("1")).     Set<String> fields = new HashSet<>(response.getGetResult().getFields().keySet()).     assertThat(fields, equalTo(singleton("obj1.field1"))).     assertThat(response.getGetResult().getFields().get("obj1.field1").getValue().toString(), equalTo("value1")).     assertThat(response.getGetResult().isSourceEmpty(), equalTo(true)).     refresh().     response = client().prepareExplain(indexOrAlias(), "test", "1").setQuery(QueryBuilders.matchAllQuery()).setStoredFields("obj1.field1").setFetchSource(true).get().     assertNotNull(response).     assertTrue(response.isMatch()).     assertNotNull(response.getExplanation()).     assertTrue(response.getExplanation().isMatch()).     assertThat(response.getExplanation().getValue(), equalTo(1.0f)).     assertThat(response.getGetResult().isExists(), equalTo(true)).     assertThat(response.getGetResult().getId(), equalTo("1")).     fields = new HashSet<>(response.getGetResult().getFields().keySet()).     assertThat(fields, equalTo(singleton("obj1.field1"))).     assertThat(response.getGetResult().getFields().get("obj1.field1").getValue().toString(), equalTo("value1")).     assertThat(response.getGetResult().isSourceEmpty(), equalTo(false)).     response = client().prepareExplain(indexOrAlias(), "test", "1").setQuery(QueryBuilders.matchAllQuery()).setStoredFields("obj1.field1", "obj1.field2").get().     assertNotNull(response).     assertTrue(response.isMatch()).     String v1 = (String) response.getGetResult().field("obj1.field1").getValue().     String v2 = (String) response.getGetResult().field("obj1.field2").getValue().     assertThat(v1, equalTo("value1")).     assertThat(v2, equalTo("value2")). }
false;public;0;35;;@SuppressWarnings("unchecked") public void testExplainWitSource() throws Exception {     assertAcked(prepareCreate("test").addAlias(new Alias("alias"))).     ensureGreen("test").     client().prepareIndex("test", "test", "1").setSource(jsonBuilder().startObject().startObject("obj1").field("field1", "value1").field("field2", "value2").endObject().endObject()).get().     refresh().     ExplainResponse response = client().prepareExplain(indexOrAlias(), "test", "1").setQuery(QueryBuilders.matchAllQuery()).setFetchSource("obj1.field1", null).get().     assertNotNull(response).     assertTrue(response.isMatch()).     assertNotNull(response.getExplanation()).     assertTrue(response.getExplanation().isMatch()).     assertThat(response.getExplanation().getValue(), equalTo(1.0f)).     assertThat(response.getGetResult().isExists(), equalTo(true)).     assertThat(response.getGetResult().getId(), equalTo("1")).     assertThat(response.getGetResult().getSource().size(), equalTo(1)).     assertThat(((Map<String, Object>) response.getGetResult().getSource().get("obj1")).get("field1").toString(), equalTo("value1")).     response = client().prepareExplain(indexOrAlias(), "test", "1").setQuery(QueryBuilders.matchAllQuery()).setFetchSource(null, "obj1.field2").get().     assertNotNull(response).     assertTrue(response.isMatch()).     assertThat(((Map<String, Object>) response.getGetResult().getSource().get("obj1")).get("field1").toString(), equalTo("value1")). }
false;public;0;15;;public void testExplainWithFilteredAlias() throws Exception {     assertAcked(prepareCreate("test").addMapping("test", "field2", "type=text").addAlias(new Alias("alias1").filter(QueryBuilders.termQuery("field2", "value2")))).     ensureGreen("test").     client().prepareIndex("test", "test", "1").setSource("field1", "value1", "field2", "value1").get().     refresh().     ExplainResponse response = client().prepareExplain("alias1", "test", "1").setQuery(QueryBuilders.matchAllQuery()).get().     assertNotNull(response).     assertTrue(response.isExists()).     assertFalse(response.isMatch()). }
false;public;0;25;;public void testExplainWithFilteredAliasFetchSource() throws Exception {     assertAcked(client().admin().indices().prepareCreate("test").addMapping("test", "field2", "type=text").addAlias(new Alias("alias1").filter(QueryBuilders.termQuery("field2", "value2")))).     ensureGreen("test").     client().prepareIndex("test", "test", "1").setSource("field1", "value1", "field2", "value1").get().     refresh().     ExplainResponse response = client().prepareExplain("alias1", "test", "1").setQuery(QueryBuilders.matchAllQuery()).setFetchSource(true).get().     assertNotNull(response).     assertTrue(response.isExists()).     assertFalse(response.isMatch()).     assertThat(response.getIndex(), equalTo("test")).     assertThat(response.getType(), equalTo("test")).     assertThat(response.getId(), equalTo("1")).     assertThat(response.getGetResult(), notNullValue()).     assertThat(response.getGetResult().getIndex(), equalTo("test")).     assertThat(response.getGetResult().getType(), equalTo("test")).     assertThat(response.getGetResult().getId(), equalTo("1")).     assertThat(response.getGetResult().getSource(), notNullValue()).     assertThat((String) response.getGetResult().getSource().get("field1"), equalTo("value1")). }
false;public;0;16;;public void testExplainDateRangeInQueryString() {     createIndex("test").     ZonedDateTime now = ZonedDateTime.now(ZoneOffset.UTC).     String aMonthAgo = DateTimeFormatter.ISO_LOCAL_DATE.format(now.minusMonths(1)).     String aMonthFromNow = DateTimeFormatter.ISO_LOCAL_DATE.format(now.plusMonths(1)).     client().prepareIndex("test", "type", "1").setSource("past", aMonthAgo, "future", aMonthFromNow).get().     refresh().     ExplainResponse explainResponse = client().prepareExplain("test", "type", "1").setQuery(queryStringQuery("past:[now-2M/d TO now/d]")).get().     assertThat(explainResponse.isExists(), equalTo(true)).     assertThat(explainResponse.isMatch(), equalTo(true)). }
false;private,static;0;3;;private static String indexOrAlias() {     return randomBoolean() ? "test" : "alias". }
false;public;0;29;;public void testStreamExplain() throws Exception {     Explanation exp = Explanation.match(2f, "some explanation").     // write     ByteArrayOutputStream outBuffer = new ByteArrayOutputStream().     OutputStreamStreamOutput out = new OutputStreamStreamOutput(outBuffer).     Lucene.writeExplanation(out, exp).     // read     ByteArrayInputStream esInBuffer = new ByteArrayInputStream(outBuffer.toByteArray()).     InputStreamStreamInput esBuffer = new InputStreamStreamInput(esInBuffer).     Explanation result = Lucene.readExplanation(esBuffer).     assertThat(exp.toString(), equalTo(result.toString())).     exp = Explanation.match(2.0f, "some explanation", Explanation.match(2.0f, "another explanation")).     // write complex     outBuffer = new ByteArrayOutputStream().     out = new OutputStreamStreamOutput(outBuffer).     Lucene.writeExplanation(out, exp).     // read complex     esInBuffer = new ByteArrayInputStream(outBuffer.toByteArray()).     esBuffer = new InputStreamStreamInput(esInBuffer).     result = Lucene.readExplanation(esBuffer).     assertThat(exp.toString(), equalTo(result.toString())). }
