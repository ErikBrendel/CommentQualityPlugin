# id;timestamp;commentText;codeText;commentWords;codeWords
HistogramIT -> public void testExeptionOnNegativerInterval();1524684173;see issue #9634, negative interval in histogram should raise exception;public void testExeptionOnNegativerInterval() {_        try {_            client().prepareSearch("empty_bucket_idx")_                    .addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(-1).minDocCount(0)).execute().actionGet()__            fail()__        } catch (IllegalArgumentException e) {_            assertThat(e.toString(), containsString("[interval] must be >0 for histogram aggregation [histo]"))__        }_    };see,issue,9634,negative,interval,in,histogram,should,raise,exception;public,void,test,exeption,on,negativer,interval,try,client,prepare,search,add,aggregation,histogram,histo,field,interval,1,min,doc,count,0,execute,action,get,fail,catch,illegal,argument,exception,e,assert,that,e,to,string,contains,string,interval,must,be,0,for,histogram,aggregation,histo
HistogramIT -> public void testExeptionOnNegativerInterval();1536314350;see issue #9634, negative interval in histogram should raise exception;public void testExeptionOnNegativerInterval() {_        try {_            client().prepareSearch("empty_bucket_idx")_                    .addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(-1).minDocCount(0)).execute().actionGet()__            fail()__        } catch (IllegalArgumentException e) {_            assertThat(e.toString(), containsString("[interval] must be >0 for histogram aggregation [histo]"))__        }_    };see,issue,9634,negative,interval,in,histogram,should,raise,exception;public,void,test,exeption,on,negativer,interval,try,client,prepare,search,add,aggregation,histogram,histo,field,interval,1,min,doc,count,0,execute,action,get,fail,catch,illegal,argument,exception,e,assert,that,e,to,string,contains,string,interval,must,be,0,for,histogram,aggregation,histo
HistogramIT -> public void testExeptionOnNegativerInterval();1544035746;see issue #9634, negative interval in histogram should raise exception;public void testExeptionOnNegativerInterval() {_        try {_            client().prepareSearch("empty_bucket_idx")_                    .addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(-1).minDocCount(0)).execute().actionGet()__            fail()__        } catch (IllegalArgumentException e) {_            assertThat(e.toString(), containsString("[interval] must be >0 for histogram aggregation [histo]"))__        }_    };see,issue,9634,negative,interval,in,histogram,should,raise,exception;public,void,test,exeption,on,negativer,interval,try,client,prepare,search,add,aggregation,histogram,histo,field,interval,1,min,doc,count,0,execute,action,get,fail,catch,illegal,argument,exception,e,assert,that,e,to,string,contains,string,interval,must,be,0,for,histogram,aggregation,histo
HistogramIT -> public void testExeptionOnNegativerInterval();1544110272;see issue #9634, negative interval in histogram should raise exception;public void testExeptionOnNegativerInterval() {_        try {_            client().prepareSearch("empty_bucket_idx")_                    .addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(-1).minDocCount(0)).get()__            fail()__        } catch (IllegalArgumentException e) {_            assertThat(e.toString(), containsString("[interval] must be >0 for histogram aggregation [histo]"))__        }_    };see,issue,9634,negative,interval,in,histogram,should,raise,exception;public,void,test,exeption,on,negativer,interval,try,client,prepare,search,add,aggregation,histogram,histo,field,interval,1,min,doc,count,0,get,fail,catch,illegal,argument,exception,e,assert,that,e,to,string,contains,string,interval,must,be,0,for,histogram,aggregation,histo
HistogramIT -> public void testSingleValuedFieldWithRandomOffset() throws Exception;1524684173;Shift buckets by random offset between [2..interval]. From setup we have 1 doc per values from 1..numdocs._Special care needs to be taken for expecations on counts in first and last bucket.;public void testSingleValuedFieldWithRandomOffset() throws Exception {_        int offset = randomIntBetween(2, interval)__        SearchResponse response = client()_                .prepareSearch("idx")_                .addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval).offset(offset))_                .execute().actionGet()__        assertSearchResponse(response)__        _        _        int expectedNumberOfBuckets = (offset >= (numDocs % interval + 1)) ? numValueBuckets   : numValueBuckets + 1___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        assertThat(histo.getBuckets().size(), equalTo(expectedNumberOfBuckets))___        int docsCounted = 0__        for (int i = 0_ i < expectedNumberOfBuckets_ ++i) {_            Histogram.Bucket bucket = histo.getBuckets().get(i)__            assertThat(bucket, notNullValue())__            assertThat(((Number) bucket.getKey()).longValue(), equalTo((long) ((i-1) * interval  + offset)))__            if (i==0) {_                _                long expectedFirstBucketCount = offset-1__                assertThat(bucket.getDocCount(), equalTo(expectedFirstBucketCount))__                docsCounted += expectedFirstBucketCount__            } else if(i<expectedNumberOfBuckets-1) {_                assertThat(bucket.getDocCount(), equalTo((long) interval))__                docsCounted += interval__            } else {_                assertThat(bucket.getDocCount(), equalTo((long) numDocs - docsCounted))__            }_        }_    };shift,buckets,by,random,offset,between,2,interval,from,setup,we,have,1,doc,per,values,from,1,numdocs,special,care,needs,to,be,taken,for,expecations,on,counts,in,first,and,last,bucket;public,void,test,single,valued,field,with,random,offset,throws,exception,int,offset,random,int,between,2,interval,search,response,response,client,prepare,search,idx,add,aggregation,histogram,histo,field,interval,interval,offset,offset,execute,action,get,assert,search,response,response,int,expected,number,of,buckets,offset,num,docs,interval,1,num,value,buckets,num,value,buckets,1,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,assert,that,histo,get,buckets,size,equal,to,expected,number,of,buckets,int,docs,counted,0,for,int,i,0,i,expected,number,of,buckets,i,histogram,bucket,bucket,histo,get,buckets,get,i,assert,that,bucket,not,null,value,assert,that,number,bucket,get,key,long,value,equal,to,long,i,1,interval,offset,if,i,0,long,expected,first,bucket,count,offset,1,assert,that,bucket,get,doc,count,equal,to,expected,first,bucket,count,docs,counted,expected,first,bucket,count,else,if,i,expected,number,of,buckets,1,assert,that,bucket,get,doc,count,equal,to,long,interval,docs,counted,interval,else,assert,that,bucket,get,doc,count,equal,to,long,num,docs,docs,counted
HistogramIT -> public void testSingleValuedFieldWithRandomOffset() throws Exception;1536314350;Shift buckets by random offset between [2..interval]. From setup we have 1 doc per values from 1..numdocs._Special care needs to be taken for expecations on counts in first and last bucket.;public void testSingleValuedFieldWithRandomOffset() throws Exception {_        int offset = randomIntBetween(2, interval)__        SearchResponse response = client()_                .prepareSearch("idx")_                .addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval).offset(offset))_                .execute().actionGet()__        assertSearchResponse(response)__        _        _        int expectedNumberOfBuckets = (offset >= (numDocs % interval + 1)) ? numValueBuckets   : numValueBuckets + 1___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        assertThat(histo.getBuckets().size(), equalTo(expectedNumberOfBuckets))___        int docsCounted = 0__        for (int i = 0_ i < expectedNumberOfBuckets_ ++i) {_            Histogram.Bucket bucket = histo.getBuckets().get(i)__            assertThat(bucket, notNullValue())__            assertThat(((Number) bucket.getKey()).longValue(), equalTo((long) ((i-1) * interval  + offset)))__            if (i==0) {_                _                long expectedFirstBucketCount = offset-1__                assertThat(bucket.getDocCount(), equalTo(expectedFirstBucketCount))__                docsCounted += expectedFirstBucketCount__            } else if(i<expectedNumberOfBuckets-1) {_                assertThat(bucket.getDocCount(), equalTo((long) interval))__                docsCounted += interval__            } else {_                assertThat(bucket.getDocCount(), equalTo((long) numDocs - docsCounted))__            }_        }_    };shift,buckets,by,random,offset,between,2,interval,from,setup,we,have,1,doc,per,values,from,1,numdocs,special,care,needs,to,be,taken,for,expecations,on,counts,in,first,and,last,bucket;public,void,test,single,valued,field,with,random,offset,throws,exception,int,offset,random,int,between,2,interval,search,response,response,client,prepare,search,idx,add,aggregation,histogram,histo,field,interval,interval,offset,offset,execute,action,get,assert,search,response,response,int,expected,number,of,buckets,offset,num,docs,interval,1,num,value,buckets,num,value,buckets,1,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,assert,that,histo,get,buckets,size,equal,to,expected,number,of,buckets,int,docs,counted,0,for,int,i,0,i,expected,number,of,buckets,i,histogram,bucket,bucket,histo,get,buckets,get,i,assert,that,bucket,not,null,value,assert,that,number,bucket,get,key,long,value,equal,to,long,i,1,interval,offset,if,i,0,long,expected,first,bucket,count,offset,1,assert,that,bucket,get,doc,count,equal,to,expected,first,bucket,count,docs,counted,expected,first,bucket,count,else,if,i,expected,number,of,buckets,1,assert,that,bucket,get,doc,count,equal,to,long,interval,docs,counted,interval,else,assert,that,bucket,get,doc,count,equal,to,long,num,docs,docs,counted
HistogramIT -> public void testSingleValuedFieldWithRandomOffset() throws Exception;1544035746;Shift buckets by random offset between [2..interval]. From setup we have 1 doc per values from 1..numdocs._Special care needs to be taken for expecations on counts in first and last bucket.;public void testSingleValuedFieldWithRandomOffset() throws Exception {_        int offset = randomIntBetween(2, interval)__        SearchResponse response = client()_                .prepareSearch("idx")_                .addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval).offset(offset))_                .execute().actionGet()__        assertSearchResponse(response)__        _        _        int expectedNumberOfBuckets = (offset >= (numDocs % interval + 1)) ? numValueBuckets   : numValueBuckets + 1___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        assertThat(histo.getBuckets().size(), equalTo(expectedNumberOfBuckets))___        int docsCounted = 0__        for (int i = 0_ i < expectedNumberOfBuckets_ ++i) {_            Histogram.Bucket bucket = histo.getBuckets().get(i)__            assertThat(bucket, notNullValue())__            assertThat(((Number) bucket.getKey()).longValue(), equalTo((long) ((i-1) * interval  + offset)))__            if (i==0) {_                _                long expectedFirstBucketCount = offset-1__                assertThat(bucket.getDocCount(), equalTo(expectedFirstBucketCount))__                docsCounted += expectedFirstBucketCount__            } else if(i<expectedNumberOfBuckets-1) {_                assertThat(bucket.getDocCount(), equalTo((long) interval))__                docsCounted += interval__            } else {_                assertThat(bucket.getDocCount(), equalTo((long) numDocs - docsCounted))__            }_        }_    };shift,buckets,by,random,offset,between,2,interval,from,setup,we,have,1,doc,per,values,from,1,numdocs,special,care,needs,to,be,taken,for,expecations,on,counts,in,first,and,last,bucket;public,void,test,single,valued,field,with,random,offset,throws,exception,int,offset,random,int,between,2,interval,search,response,response,client,prepare,search,idx,add,aggregation,histogram,histo,field,interval,interval,offset,offset,execute,action,get,assert,search,response,response,int,expected,number,of,buckets,offset,num,docs,interval,1,num,value,buckets,num,value,buckets,1,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,assert,that,histo,get,buckets,size,equal,to,expected,number,of,buckets,int,docs,counted,0,for,int,i,0,i,expected,number,of,buckets,i,histogram,bucket,bucket,histo,get,buckets,get,i,assert,that,bucket,not,null,value,assert,that,number,bucket,get,key,long,value,equal,to,long,i,1,interval,offset,if,i,0,long,expected,first,bucket,count,offset,1,assert,that,bucket,get,doc,count,equal,to,expected,first,bucket,count,docs,counted,expected,first,bucket,count,else,if,i,expected,number,of,buckets,1,assert,that,bucket,get,doc,count,equal,to,long,interval,docs,counted,interval,else,assert,that,bucket,get,doc,count,equal,to,long,num,docs,docs,counted
HistogramIT -> public void testSingleValuedFieldWithRandomOffset() throws Exception;1544110272;Shift buckets by random offset between [2..interval]. From setup we have 1 doc per values from 1..numdocs._Special care needs to be taken for expecations on counts in first and last bucket.;public void testSingleValuedFieldWithRandomOffset() throws Exception {_        int offset = randomIntBetween(2, interval)__        SearchResponse response = client()_                .prepareSearch("idx")_                .addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval).offset(offset))_                .get()__        assertSearchResponse(response)__        _        _        int expectedNumberOfBuckets = (offset >= (numDocs % interval + 1)) ? numValueBuckets   : numValueBuckets + 1___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        assertThat(histo.getBuckets().size(), equalTo(expectedNumberOfBuckets))___        int docsCounted = 0__        for (int i = 0_ i < expectedNumberOfBuckets_ ++i) {_            Histogram.Bucket bucket = histo.getBuckets().get(i)__            assertThat(bucket, notNullValue())__            assertThat(((Number) bucket.getKey()).longValue(), equalTo((long) ((i-1) * interval  + offset)))__            if (i==0) {_                _                long expectedFirstBucketCount = offset-1__                assertThat(bucket.getDocCount(), equalTo(expectedFirstBucketCount))__                docsCounted += expectedFirstBucketCount__            } else if(i<expectedNumberOfBuckets-1) {_                assertThat(bucket.getDocCount(), equalTo((long) interval))__                docsCounted += interval__            } else {_                assertThat(bucket.getDocCount(), equalTo((long) numDocs - docsCounted))__            }_        }_    };shift,buckets,by,random,offset,between,2,interval,from,setup,we,have,1,doc,per,values,from,1,numdocs,special,care,needs,to,be,taken,for,expecations,on,counts,in,first,and,last,bucket;public,void,test,single,valued,field,with,random,offset,throws,exception,int,offset,random,int,between,2,interval,search,response,response,client,prepare,search,idx,add,aggregation,histogram,histo,field,interval,interval,offset,offset,get,assert,search,response,response,int,expected,number,of,buckets,offset,num,docs,interval,1,num,value,buckets,num,value,buckets,1,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,assert,that,histo,get,buckets,size,equal,to,expected,number,of,buckets,int,docs,counted,0,for,int,i,0,i,expected,number,of,buckets,i,histogram,bucket,bucket,histo,get,buckets,get,i,assert,that,bucket,not,null,value,assert,that,number,bucket,get,key,long,value,equal,to,long,i,1,interval,offset,if,i,0,long,expected,first,bucket,count,offset,1,assert,that,bucket,get,doc,count,equal,to,expected,first,bucket,count,docs,counted,expected,first,bucket,count,else,if,i,expected,number,of,buckets,1,assert,that,bucket,get,doc,count,equal,to,long,interval,docs,counted,interval,else,assert,that,bucket,get,doc,count,equal,to,long,num,docs,docs,counted
HistogramIT -> public void testDontCacheScripts() throws Exception;1524684173;Make sure that a request using a script does not get cached and a request_not using a script does get cached.;public void testDontCacheScripts() throws Exception {_        assertAcked(prepareCreate("cache_test_idx").addMapping("type", "d", "type=float")_                .setSettings(Settings.builder().put("requests.cache.enable", true).put("number_of_shards", 1).put("number_of_replicas", 1))_                .get())__        indexRandom(true, client().prepareIndex("cache_test_idx", "type", "1").setSource("d", -0.6),_                client().prepareIndex("cache_test_idx", "type", "2").setSource("d", 0.1))___        _        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        SearchResponse r = client().prepareSearch("cache_test_idx").setSize(0).addAggregation(histogram("histo").field("d")_                .script(new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, "_value + 1", emptyMap())).interval(0.7).offset(0.05)).get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        _        r = client().prepareSearch("cache_test_idx").setSize(0).addAggregation(histogram("histo").field("d").interval(0.7).offset(0.05))_                .get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(1L))__    };make,sure,that,a,request,using,a,script,does,not,get,cached,and,a,request,not,using,a,script,does,get,cached;public,void,test,dont,cache,scripts,throws,exception,assert,acked,prepare,create,add,mapping,type,d,type,float,set,settings,settings,builder,put,requests,cache,enable,true,put,1,put,1,get,index,random,true,client,prepare,index,type,1,set,source,d,0,6,client,prepare,index,type,2,set,source,d,0,1,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,search,response,r,client,prepare,search,set,size,0,add,aggregation,histogram,histo,field,d,script,new,script,script,type,inline,custom,script,plugin,name,1,empty,map,interval,0,7,offset,0,05,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,r,client,prepare,search,set,size,0,add,aggregation,histogram,histo,field,d,interval,0,7,offset,0,05,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,1l
HistogramIT -> public void testDontCacheScripts() throws Exception;1536314350;Make sure that a request using a script does not get cached and a request_not using a script does get cached.;public void testDontCacheScripts() throws Exception {_        assertAcked(prepareCreate("cache_test_idx").addMapping("type", "d", "type=float")_                .setSettings(Settings.builder().put("requests.cache.enable", true).put("number_of_shards", 1).put("number_of_replicas", 1))_                .get())__        indexRandom(true, client().prepareIndex("cache_test_idx", "type", "1").setSource("d", -0.6),_                client().prepareIndex("cache_test_idx", "type", "2").setSource("d", 0.1))___        _        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        SearchResponse r = client().prepareSearch("cache_test_idx").setSize(0).addAggregation(histogram("histo").field("d")_                .script(new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, "_value + 1", emptyMap())).interval(0.7).offset(0.05)).get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        _        r = client().prepareSearch("cache_test_idx").setSize(0).addAggregation(histogram("histo").field("d").interval(0.7).offset(0.05))_                .get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(1L))__    };make,sure,that,a,request,using,a,script,does,not,get,cached,and,a,request,not,using,a,script,does,get,cached;public,void,test,dont,cache,scripts,throws,exception,assert,acked,prepare,create,add,mapping,type,d,type,float,set,settings,settings,builder,put,requests,cache,enable,true,put,1,put,1,get,index,random,true,client,prepare,index,type,1,set,source,d,0,6,client,prepare,index,type,2,set,source,d,0,1,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,search,response,r,client,prepare,search,set,size,0,add,aggregation,histogram,histo,field,d,script,new,script,script,type,inline,custom,script,plugin,name,1,empty,map,interval,0,7,offset,0,05,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,r,client,prepare,search,set,size,0,add,aggregation,histogram,histo,field,d,interval,0,7,offset,0,05,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,1l
HistogramIT -> public void testDontCacheScripts() throws Exception;1544035746;Make sure that a request using a script does not get cached and a request_not using a script does get cached.;public void testDontCacheScripts() throws Exception {_        assertAcked(prepareCreate("cache_test_idx").addMapping("type", "d", "type=float")_                .setSettings(Settings.builder().put("requests.cache.enable", true).put("number_of_shards", 1).put("number_of_replicas", 1))_                .get())__        indexRandom(true, client().prepareIndex("cache_test_idx", "type", "1").setSource("d", -0.6),_                client().prepareIndex("cache_test_idx", "type", "2").setSource("d", 0.1))___        _        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        SearchResponse r = client().prepareSearch("cache_test_idx").setSize(0).addAggregation(histogram("histo").field("d")_                .script(new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, "_value + 1", emptyMap())).interval(0.7).offset(0.05)).get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        _        r = client().prepareSearch("cache_test_idx").setSize(0).addAggregation(histogram("histo").field("d").interval(0.7).offset(0.05))_                .get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(1L))__    };make,sure,that,a,request,using,a,script,does,not,get,cached,and,a,request,not,using,a,script,does,get,cached;public,void,test,dont,cache,scripts,throws,exception,assert,acked,prepare,create,add,mapping,type,d,type,float,set,settings,settings,builder,put,requests,cache,enable,true,put,1,put,1,get,index,random,true,client,prepare,index,type,1,set,source,d,0,6,client,prepare,index,type,2,set,source,d,0,1,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,search,response,r,client,prepare,search,set,size,0,add,aggregation,histogram,histo,field,d,script,new,script,script,type,inline,custom,script,plugin,name,1,empty,map,interval,0,7,offset,0,05,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,r,client,prepare,search,set,size,0,add,aggregation,histogram,histo,field,d,interval,0,7,offset,0,05,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,1l
HistogramIT -> public void testDontCacheScripts() throws Exception;1544110272;Make sure that a request using a script does not get cached and a request_not using a script does get cached.;public void testDontCacheScripts() throws Exception {_        assertAcked(prepareCreate("cache_test_idx").addMapping("type", "d", "type=float")_                .setSettings(Settings.builder().put("requests.cache.enable", true).put("number_of_shards", 1).put("number_of_replicas", 1))_                .get())__        indexRandom(true, client().prepareIndex("cache_test_idx", "type", "1").setSource("d", -0.6),_                client().prepareIndex("cache_test_idx", "type", "2").setSource("d", 0.1))___        _        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        SearchResponse r = client().prepareSearch("cache_test_idx").setSize(0).addAggregation(histogram("histo").field("d")_                .script(new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, "_value + 1", emptyMap())).interval(0.7).offset(0.05)).get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        _        r = client().prepareSearch("cache_test_idx").setSize(0).addAggregation(histogram("histo").field("d").interval(0.7).offset(0.05))_                .get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(1L))__    };make,sure,that,a,request,using,a,script,does,not,get,cached,and,a,request,not,using,a,script,does,get,cached;public,void,test,dont,cache,scripts,throws,exception,assert,acked,prepare,create,add,mapping,type,d,type,float,set,settings,settings,builder,put,requests,cache,enable,true,put,1,put,1,get,index,random,true,client,prepare,index,type,1,set,source,d,0,6,client,prepare,index,type,2,set,source,d,0,1,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,search,response,r,client,prepare,search,set,size,0,add,aggregation,histogram,histo,field,d,script,new,script,script,type,inline,custom,script,plugin,name,1,empty,map,interval,0,7,offset,0,05,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,r,client,prepare,search,set,size,0,add,aggregation,histogram,histo,field,d,interval,0,7,offset,0,05,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,1l
