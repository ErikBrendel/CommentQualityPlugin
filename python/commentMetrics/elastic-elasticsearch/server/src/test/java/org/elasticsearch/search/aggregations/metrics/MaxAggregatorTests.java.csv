commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;public void testNoDocs() throws IOException {     testCase(new MatchAllDocsQuery(), iw -> {     // Intentionally not writing any docs     }, max -> {         assertEquals(Double.NEGATIVE_INFINITY, max.getValue(), 0).         assertFalse(AggregationInspectionHelper.hasValue(max)).     }). }
false;public;0;9;;public void testNoMatchingField() throws IOException {     testCase(new MatchAllDocsQuery(), iw -> {         iw.addDocument(singleton(new SortedNumericDocValuesField("wrong_number", 7))).         iw.addDocument(singleton(new SortedNumericDocValuesField("wrong_number", 1))).     }, max -> {         assertEquals(Double.NEGATIVE_INFINITY, max.getValue(), 0).         assertFalse(AggregationInspectionHelper.hasValue(max)).     }). }
false;public;0;9;;public void testSomeMatchesSortedNumericDocValues() throws IOException {     testCase(new DocValuesFieldExistsQuery("number"), iw -> {         iw.addDocument(singleton(new SortedNumericDocValuesField("number", 7))).         iw.addDocument(singleton(new SortedNumericDocValuesField("number", 1))).     }, max -> {         assertEquals(7, max.getValue(), 0).         assertTrue(AggregationInspectionHelper.hasValue(max)).     }). }
false;public;0;9;;public void testSomeMatchesNumericDocValues() throws IOException {     testCase(new DocValuesFieldExistsQuery("number"), iw -> {         iw.addDocument(singleton(new NumericDocValuesField("number", 7))).         iw.addDocument(singleton(new NumericDocValuesField("number", 1))).     }, max -> {         assertEquals(7, max.getValue(), 0).         assertTrue(AggregationInspectionHelper.hasValue(max)).     }). }
false;public;0;9;;public void testQueryFiltering() throws IOException {     testCase(IntPoint.newRangeQuery("number", 0, 5), iw -> {         iw.addDocument(Arrays.asList(new IntPoint("number", 7), new SortedNumericDocValuesField("number", 7))).         iw.addDocument(Arrays.asList(new IntPoint("number", 1), new SortedNumericDocValuesField("number", 1))).     }, max -> {         assertEquals(1, max.getValue(), 0).         assertTrue(AggregationInspectionHelper.hasValue(max)).     }). }
false;public;0;9;;public void testQueryFiltersAll() throws IOException {     testCase(IntPoint.newRangeQuery("number", -1, 0), iw -> {         iw.addDocument(Arrays.asList(new IntPoint("number", 7), new SortedNumericDocValuesField("number", 7))).         iw.addDocument(Arrays.asList(new IntPoint("number", 1), new SortedNumericDocValuesField("number", 1))).     }, max -> {         assertEquals(Double.NEGATIVE_INFINITY, max.getValue(), 0).         assertFalse(AggregationInspectionHelper.hasValue(max)).     }). }
false;private;3;24;;private void testCase(Query query, CheckedConsumer<RandomIndexWriter, IOException> buildIndex, Consumer<InternalMax> verify) throws IOException {     Directory directory = newDirectory().     RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory).     buildIndex.accept(indexWriter).     indexWriter.close().     IndexReader indexReader = DirectoryReader.open(directory).     IndexSearcher indexSearcher = newSearcher(indexReader, true, true).     MaxAggregationBuilder aggregationBuilder = new MaxAggregationBuilder("_name").field("number").     MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER).     fieldType.setName("number").     MaxAggregator aggregator = createAggregator(query, aggregationBuilder, indexSearcher, createIndexSettings(), fieldType).     aggregator.preCollection().     indexSearcher.search(query, aggregator).     aggregator.postCollection().     verify.accept((InternalMax) aggregator.buildAggregation(0L)).     indexReader.close().     directory.close(). }
false;public;0;21;;public void testMaxShortcutRandom() throws Exception {     testMaxShortcutCase(() -> randomLongBetween(Integer.MIN_VALUE, Integer.MAX_VALUE), (n) -> new LongPoint("number", n.longValue()), (v) -> LongPoint.decodeDimension(v, 0)).     testMaxShortcutCase(() -> randomInt(), (n) -> new IntPoint("number", n.intValue()), (v) -> IntPoint.decodeDimension(v, 0)).     testMaxShortcutCase(() -> randomFloat(), (n) -> new FloatPoint("number", n.floatValue()), (v) -> FloatPoint.decodeDimension(v, 0)).     testMaxShortcutCase(() -> randomDouble(), (n) -> new DoublePoint("number", n.doubleValue()), (v) -> DoublePoint.decodeDimension(v, 0)). }
false;private;3;55;;private void testMaxShortcutCase(Supplier<Number> randomNumber, Function<Number, Field> pointFieldFunc, Function<byte[], Number> pointConvertFunc) throws IOException {     Directory directory = newDirectory().     IndexWriterConfig config = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE).     IndexWriter indexWriter = new IndexWriter(directory, config).     List<Document> documents = new ArrayList<>().     List<Tuple<Integer, Number>> values = new ArrayList<>().     int numValues = atLeast(50).     int docID = 0.     for (int i = 0. i < numValues. i++) {         int numDup = randomIntBetween(1, 3).         for (int j = 0. j < numDup. j++) {             Document document = new Document().             Number nextValue = randomNumber.get().             values.add(new Tuple<>(docID, nextValue)).             document.add(new StringField("id", Integer.toString(docID), Field.Store.NO)).             document.add(pointFieldFunc.apply(nextValue)).             documents.add(document).             docID++.         }     }     // insert some documents without a value for the metric field.     for (int i = 0. i < 3. i++) {         Document document = new Document().         documents.add(document).     }     indexWriter.addDocuments(documents).     Collections.sort(values, Comparator.comparingDouble(t -> t.v2().doubleValue())).     try (IndexReader reader = DirectoryReader.open(indexWriter)) {         LeafReaderContext ctx = reader.leaves().get(0).         Number res = MaxAggregator.findLeafMaxValue(ctx.reader(), "number", pointConvertFunc).         assertThat(res, equalTo(values.get(values.size() - 1).v2())).     }     for (int i = values.size() - 1. i > 0. i--) {         indexWriter.deleteDocuments(new Term("id", values.get(i).v1().toString())).         try (IndexReader reader = DirectoryReader.open(indexWriter)) {             LeafReaderContext ctx = reader.leaves().get(0).             Number res = MaxAggregator.findLeafMaxValue(ctx.reader(), "number", pointConvertFunc).             if (res != null) {                 assertThat(res, equalTo(values.get(i - 1).v2())).             } else {                 assertAllDeleted(ctx.reader().getLiveDocs(), ctx.reader().getPointValues("number")).             }         }     }     indexWriter.deleteDocuments(new Term("id", values.get(0).v1().toString())).     try (IndexReader reader = DirectoryReader.open(indexWriter)) {         LeafReaderContext ctx = reader.leaves().get(0).         Number res = MaxAggregator.findLeafMaxValue(ctx.reader(), "number", pointConvertFunc).         assertThat(res, equalTo(null)).     }     indexWriter.close().     directory.close(). }
false;public;1;4;;@Override public void visit(int docID) {     throw new AssertionError(). }
false;public;2;5;;@Override public void visit(int docID, byte[] packedValue) {     assertFalse(liveDocs.get(docID)).     seen[0] = true. }
false;public;2;7;;@Override public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {     if (FutureArrays.equals(maxPackedValue, 0, numBytes, maxValue, 0, numBytes)) {         return PointValues.Relation.CELL_CROSSES_QUERY.     }     return PointValues.Relation.CELL_OUTSIDE_QUERY. }
true;private;2;26;// checks that documents inside the max leaves are all deleted ;// checks that documents inside the max leaves are all deleted private void assertAllDeleted(Bits liveDocs, PointValues values) throws IOException {     final byte[] maxValue = values.getMaxPackedValue().     int numBytes = values.getBytesPerDimension().     final boolean[] seen = new boolean[1].     values.intersect(new PointValues.IntersectVisitor() {          @Override         public void visit(int docID) {             throw new AssertionError().         }          @Override         public void visit(int docID, byte[] packedValue) {             assertFalse(liveDocs.get(docID)).             seen[0] = true.         }          @Override         public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {             if (FutureArrays.equals(maxPackedValue, 0, numBytes, maxValue, 0, numBytes)) {                 return PointValues.Relation.CELL_CROSSES_QUERY.             }             return PointValues.Relation.CELL_OUTSIDE_QUERY.         }     }).     assertTrue(seen[0]). }
