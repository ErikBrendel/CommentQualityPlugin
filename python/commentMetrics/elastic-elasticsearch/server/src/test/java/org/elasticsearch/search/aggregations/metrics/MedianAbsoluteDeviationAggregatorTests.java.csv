commented;modifiers;parameterAmount;loc;comment;code
false;private,static;2;12;;private static <T extends IndexableField> CheckedConsumer<RandomIndexWriter, IOException> randomSample(int size, Function<Long, Iterable<T>> field) {     return writer -> {         for (int i = 0. i < size. i++) {             final long point = randomLongBetween(SAMPLE_MIN, SAMPLE_MAX).             Iterable<T> document = field.apply(point).             writer.addDocument(document).         }     }. }
true;public;0;6;// intentionally not writing any docs ;// intentionally not writing any docs public void testNoDocs() throws IOException {     testCase(new MatchAllDocsQuery(), writer -> {     }, agg -> {         assertThat(agg.getMedianAbsoluteDeviation(), equalTo(Double.NaN)).         assertFalse(AggregationInspectionHelper.hasValue(agg)).     }). }
false;public;0;13;;public void testNoMatchingField() throws IOException {     testCase(new MatchAllDocsQuery(), writer -> {         writer.addDocument(singleton(new SortedNumericDocValuesField("wrong_number", 1))).         writer.addDocument(singleton(new SortedNumericDocValuesField("wrong_number", 2))).     }, agg -> {         assertThat(agg.getMedianAbsoluteDeviation(), equalTo(Double.NaN)).         assertFalse(AggregationInspectionHelper.hasValue(agg)).     }). }
false;public;0;15;;public void testSomeMatchesSortedNumericDocValues() throws IOException {     final int size = randomIntBetween(100, 1000).     final List<Long> sample = new ArrayList<>(size).     testCase(new DocValuesFieldExistsQuery("number"), randomSample(size, point -> {         sample.add(point).         return singleton(new SortedNumericDocValuesField("number", point)).     }), agg -> {         assertThat(agg.getMedianAbsoluteDeviation(), closeToRelative(calculateMAD(sample))).         assertTrue(AggregationInspectionHelper.hasValue(agg)).     }). }
false;public;0;15;;public void testSomeMatchesNumericDocValues() throws IOException {     final int size = randomIntBetween(100, 1000).     final List<Long> sample = new ArrayList<>(size).     testCase(new DocValuesFieldExistsQuery("number"), randomSample(size, point -> {         sample.add(point).         return singleton(new NumericDocValuesField("number", point)).     }), agg -> {         assertThat(agg.getMedianAbsoluteDeviation(), closeToRelative(calculateMAD(sample))).         assertTrue(AggregationInspectionHelper.hasValue(agg)).     }). }
false;public;0;18;;public void testQueryFiltering() throws IOException {     final int lowerRange = 1.     final int upperRange = 500.     final int[] sample = IntStream.rangeClosed(1, 1000).toArray().     final int[] filteredSample = Arrays.stream(sample).filter(point -> point >= lowerRange && point <= upperRange).toArray().     testCase(IntPoint.newRangeQuery("number", lowerRange, upperRange), writer -> {         for (int point : sample) {             writer.addDocument(Arrays.asList(new IntPoint("number", point), new SortedNumericDocValuesField("number", point))).         }     }, agg -> {         assertThat(agg.getMedianAbsoluteDeviation(), closeToRelative(calculateMAD(filteredSample))).         assertTrue(AggregationInspectionHelper.hasValue(agg)).     }). }
false;public;0;13;;public void testQueryFiltersAll() throws IOException {     testCase(IntPoint.newRangeQuery("number", -1, 0), writer -> {         writer.addDocument(Arrays.asList(new IntPoint("number", 1), new SortedNumericDocValuesField("number", 1))).         writer.addDocument(Arrays.asList(new IntPoint("number", 2), new SortedNumericDocValuesField("number", 2))).     }, agg -> {         assertThat(agg.getMedianAbsoluteDeviation(), equalTo(Double.NaN)).         assertFalse(AggregationInspectionHelper.hasValue(agg)).     }). }
false;private;3;29;;private void testCase(Query query, CheckedConsumer<RandomIndexWriter, IOException> buildIndex, Consumer<InternalMedianAbsoluteDeviation> verify) throws IOException {     try (Directory directory = newDirectory()) {         try (RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory)) {             buildIndex.accept(indexWriter).         }         try (IndexReader indexReader = DirectoryReader.open(directory)) {             IndexSearcher indexSearcher = newSearcher(indexReader, true, true).             MedianAbsoluteDeviationAggregationBuilder builder = new MedianAbsoluteDeviationAggregationBuilder("mad").field("number").compression(randomDoubleBetween(20, 1000, true)).             MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.LONG).             fieldType.setName("number").             MedianAbsoluteDeviationAggregator aggregator = createAggregator(builder, indexSearcher, fieldType).             aggregator.preCollection().             indexSearcher.search(query, aggregator).             aggregator.postCollection().             verify.accept((InternalMedianAbsoluteDeviation) aggregator.buildAggregation(0L)).         }     } }
false;protected;1;6;;@Override protected boolean matchesSafely(Double actual) {     final double deviation = Math.abs(actual - expected).     final double observedError = deviation / Math.abs(expected).     return observedError <= error. }
false;public;1;8;;@Override public void describeTo(Description description) {     description.appendText("within ").appendValue(error * 100).appendText(" percent of ").appendValue(expected). }
false;public,static;2;3;;public static IsCloseToRelative closeToRelative(double expected, double error) {     return new IsCloseToRelative(expected, error). }
false;public,static;1;3;;public static IsCloseToRelative closeToRelative(double expected) {     return closeToRelative(expected, 0.1). }
false;public,static;1;5;;public static double calculateMAD(int[] sample) {     return calculateMAD(Arrays.stream(sample).mapToDouble(point -> (double) point).toArray()). }
false;public,static;1;5;;public static double calculateMAD(long[] sample) {     return calculateMAD(Arrays.stream(sample).mapToDouble(point -> (double) point).toArray()). }
false;public,static;1;5;;public static double calculateMAD(List<Long> sample) {     return calculateMAD(sample.stream().mapToDouble(Long::doubleValue).toArray()). }
false;public,static;1;10;;public static double calculateMAD(double[] sample) {     final double median = calculateMedian(sample).     final double[] deviations = Arrays.stream(sample).map(point -> Math.abs(median - point)).toArray().     final double mad = calculateMedian(deviations).     return mad. }
false;private,static;1;14;;private static double calculateMedian(double[] sample) {     final double[] sorted = Arrays.copyOf(sample, sample.length).     Arrays.sort(sorted).     final int halfway = (int) Math.ceil(sorted.length / 2d).     final double median.     if (sorted.length % 2 == 0) {         // even         median = (sorted[halfway - 1] + sorted[halfway]) / 2d.     } else {         // odd         median = (sorted[halfway - 1]).     }     return median. }
