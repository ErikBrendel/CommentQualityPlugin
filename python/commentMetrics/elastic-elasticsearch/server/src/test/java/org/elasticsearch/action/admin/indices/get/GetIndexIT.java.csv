commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;8;;@Override protected void setupSuiteScopeCluster() throws Exception {     assertAcked(prepareCreate("idx").addAlias(new Alias("alias_idx")).addMapping("type1", "{\"type1\":{}}", XContentType.JSON).setSettings(Settings.builder().put("number_of_shards", 1)).get()).     ensureSearchable("idx").     createIndex("empty_idx").     ensureSearchable("idx", "empty_idx"). }
false;public;0;10;;public void testSimple() {     GetIndexResponse response = client().admin().indices().prepareGetIndex().addIndices("idx").get().     String[] indices = response.indices().     assertThat(indices, notNullValue()).     assertThat(indices.length, equalTo(1)).     assertThat(indices[0], equalTo("idx")).     assertAliases(response, "idx").     assertMappings(response, "idx").     assertSettings(response, "idx"). }
false;public;0;8;;public void testSimpleUnknownIndex() {     try {         client().admin().indices().prepareGetIndex().addIndices("missing_idx").get().         fail("Expected IndexNotFoundException").     } catch (IndexNotFoundException e) {         assertThat(e.getMessage(), is("no such index [missing_idx]")).     } }
false;public;0;10;;public void testEmpty() {     GetIndexResponse response = client().admin().indices().prepareGetIndex().addIndices("empty_idx").get().     String[] indices = response.indices().     assertThat(indices, notNullValue()).     assertThat(indices.length, equalTo(1)).     assertThat(indices[0], equalTo("empty_idx")).     assertEmptyAliases(response).     assertEmptyOrOnlyDefaultMappings(response, "empty_idx").     assertNonEmptySettings(response, "empty_idx"). }
false;public;0;11;;public void testSimpleMapping() {     GetIndexResponse response = runWithRandomFeatureMethod(client().admin().indices().prepareGetIndex().addIndices("idx"), Feature.MAPPINGS).     String[] indices = response.indices().     assertThat(indices, notNullValue()).     assertThat(indices.length, equalTo(1)).     assertThat(indices[0], equalTo("idx")).     assertMappings(response, "idx").     assertEmptyAliases(response).     assertEmptySettings(response). }
false;public;0;11;;public void testSimpleAlias() {     GetIndexResponse response = runWithRandomFeatureMethod(client().admin().indices().prepareGetIndex().addIndices("idx"), Feature.ALIASES).     String[] indices = response.indices().     assertThat(indices, notNullValue()).     assertThat(indices.length, equalTo(1)).     assertThat(indices[0], equalTo("idx")).     assertAliases(response, "idx").     assertEmptyMappings(response).     assertEmptySettings(response). }
false;public;0;11;;public void testSimpleSettings() {     GetIndexResponse response = runWithRandomFeatureMethod(client().admin().indices().prepareGetIndex().addIndices("idx"), Feature.SETTINGS).     String[] indices = response.indices().     assertThat(indices, notNullValue()).     assertThat(indices.length, equalTo(1)).     assertThat(indices[0], equalTo("idx")).     assertSettings(response, "idx").     assertEmptyAliases(response).     assertEmptyMappings(response). }
false;public;0;28;;public void testSimpleMixedFeatures() {     int numFeatures = randomIntBetween(1, Feature.values().length).     List<Feature> features = new ArrayList<>(numFeatures).     for (int i = 0. i < numFeatures. i++) {         features.add(randomFrom(Feature.values())).     }     GetIndexResponse response = runWithRandomFeatureMethod(client().admin().indices().prepareGetIndex().addIndices("idx"), features.toArray(new Feature[features.size()])).     String[] indices = response.indices().     assertThat(indices, notNullValue()).     assertThat(indices.length, equalTo(1)).     assertThat(indices[0], equalTo("idx")).     if (features.contains(Feature.ALIASES)) {         assertAliases(response, "idx").     } else {         assertEmptyAliases(response).     }     if (features.contains(Feature.MAPPINGS)) {         assertMappings(response, "idx").     } else {         assertEmptyMappings(response).     }     if (features.contains(Feature.SETTINGS)) {         assertSettings(response, "idx").     } else {         assertEmptySettings(response).     } }
false;public;0;24;;public void testEmptyMixedFeatures() {     int numFeatures = randomIntBetween(1, Feature.values().length).     List<Feature> features = new ArrayList<>(numFeatures).     for (int i = 0. i < numFeatures. i++) {         features.add(randomFrom(Feature.values())).     }     GetIndexResponse response = runWithRandomFeatureMethod(client().admin().indices().prepareGetIndex().addIndices("empty_idx"), features.toArray(new Feature[features.size()])).     String[] indices = response.indices().     assertThat(indices, notNullValue()).     assertThat(indices.length, equalTo(1)).     assertThat(indices[0], equalTo("empty_idx")).     assertEmptyAliases(response).     if (features.contains(Feature.MAPPINGS)) {         assertEmptyOrOnlyDefaultMappings(response, "empty_idx").     } else {         assertEmptyMappings(response).     }     if (features.contains(Feature.SETTINGS)) {         assertNonEmptySettings(response, "empty_idx").     } else {         assertEmptySettings(response).     } }
false;public;0;25;;public void testGetIndexWithBlocks() {     for (String block : Arrays.asList(SETTING_BLOCKS_READ, SETTING_BLOCKS_WRITE, SETTING_READ_ONLY, SETTING_READ_ONLY_ALLOW_DELETE)) {         try {             enableIndexBlock("idx", block).             GetIndexResponse response = client().admin().indices().prepareGetIndex().addIndices("idx").addFeatures(Feature.MAPPINGS, Feature.ALIASES).get().             String[] indices = response.indices().             assertThat(indices, notNullValue()).             assertThat(indices.length, equalTo(1)).             assertThat(indices[0], equalTo("idx")).             assertMappings(response, "idx").             assertAliases(response, "idx").         } finally {             disableIndexBlock("idx", block).         }     }     try {         enableIndexBlock("idx", SETTING_BLOCKS_METADATA).         assertBlocked(client().admin().indices().prepareGetIndex().addIndices("idx").addFeatures(Feature.MAPPINGS, Feature.ALIASES), INDEX_METADATA_BLOCK).     } finally {         disableIndexBlock("idx", SETTING_BLOCKS_METADATA).     } }
false;private;2;7;;private GetIndexResponse runWithRandomFeatureMethod(GetIndexRequestBuilder requestBuilder, Feature... features) {     if (randomBoolean()) {         return requestBuilder.addFeatures(features).get().     } else {         return requestBuilder.setFeatures(features).get().     } }
false;private;2;8;;private void assertSettings(GetIndexResponse response, String indexName) {     ImmutableOpenMap<String, Settings> settings = response.settings().     assertThat(settings, notNullValue()).     assertThat(settings.size(), equalTo(1)).     Settings indexSettings = settings.get(indexName).     assertThat(indexSettings, notNullValue()).     assertThat(indexSettings.get("index.number_of_shards"), equalTo("1")). }
false;private;2;7;;private void assertNonEmptySettings(GetIndexResponse response, String indexName) {     ImmutableOpenMap<String, Settings> settings = response.settings().     assertThat(settings, notNullValue()).     assertThat(settings.size(), equalTo(1)).     Settings indexSettings = settings.get(indexName).     assertThat(indexSettings, notNullValue()). }
false;private;2;11;;private void assertMappings(GetIndexResponse response, String indexName) {     ImmutableOpenMap<String, ImmutableOpenMap<String, MappingMetaData>> mappings = response.mappings().     assertThat(mappings, notNullValue()).     assertThat(mappings.size(), equalTo(1)).     ImmutableOpenMap<String, MappingMetaData> indexMappings = mappings.get(indexName).     assertThat(indexMappings, notNullValue()).     assertThat(indexMappings.size(), equalTo(1)).     MappingMetaData mapping = indexMappings.get("type1").     assertThat(mapping, notNullValue()).     assertThat(mapping.type(), equalTo("type1")). }
false;private;2;8;;private void assertEmptyOrOnlyDefaultMappings(GetIndexResponse response, String indexName) {     ImmutableOpenMap<String, ImmutableOpenMap<String, MappingMetaData>> mappings = response.mappings().     assertThat(mappings, notNullValue()).     assertThat(mappings.size(), equalTo(1)).     ImmutableOpenMap<String, MappingMetaData> indexMappings = mappings.get(indexName).     assertThat(indexMappings, notNullValue()).     assertThat(indexMappings.size(), equalTo(0)). }
false;private;2;11;;private void assertAliases(GetIndexResponse response, String indexName) {     ImmutableOpenMap<String, List<AliasMetaData>> aliases = response.aliases().     assertThat(aliases, notNullValue()).     assertThat(aliases.size(), equalTo(1)).     List<AliasMetaData> indexAliases = aliases.get(indexName).     assertThat(indexAliases, notNullValue()).     assertThat(indexAliases.size(), equalTo(1)).     AliasMetaData alias = indexAliases.get(0).     assertThat(alias, notNullValue()).     assertThat(alias.alias(), equalTo("alias_idx")). }
false;private;1;4;;private void assertEmptySettings(GetIndexResponse response) {     assertThat(response.settings(), notNullValue()).     assertThat(response.settings().isEmpty(), equalTo(true)). }
false;private;1;4;;private void assertEmptyMappings(GetIndexResponse response) {     assertThat(response.mappings(), notNullValue()).     assertThat(response.mappings().isEmpty(), equalTo(true)). }
false;private;1;6;;private void assertEmptyAliases(GetIndexResponse response) {     assertThat(response.aliases(), notNullValue()).     for (final ObjectObjectCursor<String, List<AliasMetaData>> entry : response.getAliases()) {         assertTrue(entry.value.isEmpty()).     } }
