commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;public void testDifference() {     final int endExclusive = randomIntBetween(0, 256).     final Tuple<Set<Integer>, Set<Integer>> sets = randomSets(endExclusive).     final Set<Integer> difference = Sets.difference(sets.v1(), sets.v2()).     assertDifference(endExclusive, sets, difference). }
false;public;0;15;;public void testSortedDifference() {     final int endExclusive = randomIntBetween(0, 256).     final Tuple<Set<Integer>, Set<Integer>> sets = randomSets(endExclusive).     final Set<Integer> difference = Sets.sortedDifference(sets.v1(), sets.v2()).     assertDifference(endExclusive, sets, difference).     final Iterator<Integer> it = difference.iterator().     if (it.hasNext()) {         int current = it.next().         while (it.hasNext()) {             final int next = it.next().             assertThat(next, greaterThan(current)).             current = next.         }     } }
false;public;0;10;;public void testIntersection() {     final int endExclusive = randomIntBetween(0, 256).     final Tuple<Set<Integer>, Set<Integer>> sets = randomSets(endExclusive).     final Set<Integer> intersection = Sets.intersection(sets.v1(), sets.v2()).     final Set<Integer> expectedIntersection = IntStream.range(0, endExclusive).boxed().filter(i -> (sets.v1().contains(i) && sets.v2().contains(i))).collect(Collectors.toSet()).     assertThat(intersection, containsInAnyOrder(expectedIntersection.toArray(new Integer[0]))). }
true;private;3;6;/**  * Assert the difference between two sets is as expected.  *  * @param endExclusive the exclusive upper bound of the elements of either set  * @param sets         a pair of sets with elements from {@code [0, endExclusive)}  * @param difference   the difference between the two sets  */ ;/**  * Assert the difference between two sets is as expected.  *  * @param endExclusive the exclusive upper bound of the elements of either set  * @param sets         a pair of sets with elements from {@code [0, endExclusive)}  * @param difference   the difference between the two sets  */ private void assertDifference(final int endExclusive, final Tuple<Set<Integer>, Set<Integer>> sets, final Set<Integer> difference) {     for (int i = 0. i < endExclusive. i++) {         assertThat(difference.contains(i), equalTo(sets.v1().contains(i) && !sets.v2().contains(i))).     } }
true;private;1;5;/**  * Produces two random sets consisting of elements from {@code [0, endExclusive)}.  *  * @param endExclusive the exclusive upper bound of the elements of the sets  * @return a pair of sets  */ ;/**  * Produces two random sets consisting of elements from {@code [0, endExclusive)}.  *  * @param endExclusive the exclusive upper bound of the elements of the sets  * @return a pair of sets  */ private Tuple<Set<Integer>, Set<Integer>> randomSets(final int endExclusive) {     final Set<Integer> left = new HashSet<>(randomSubsetOf(IntStream.range(0, endExclusive).boxed().collect(Collectors.toSet()))).     final Set<Integer> right = new HashSet<>(randomSubsetOf(IntStream.range(0, endExclusive).boxed().collect(Collectors.toSet()))).     return Tuple.tuple(left, right). }
