# id;timestamp;commentText;codeText;commentWords;codeWords
RoundingTests -> public void testRoundingRandom();1534248446;Randomized test on TimeUnitRounding. Test uses random_{@link DateTimeUnit} and {@link ZoneId} and often (50% of the time)_chooses test dates that are exactly on or close to offset changes (e.g._DST) in the chosen time zone.__It rounds the test date down and up and performs various checks on the_rounding unit interval that is defined by this. Assumptions tested are_described in_{@link #assertInterval(long, long, long, Rounding, ZoneId)};public void testRoundingRandom() {_        for (int i = 0_ i < 1000_ ++i) {_            Rounding.DateTimeUnit unit = randomFrom(Rounding.DateTimeUnit.values())__            ZoneId tz = randomZone()__            Rounding rounding = new Rounding.TimeUnitRounding(unit, tz)__            long date = Math.abs(randomLong() % (2 * (long) 10e11))_ _            long unitMillis = unit.getField().getBaseUnit().getDuration().toMillis()__            _            if (randomBoolean()) {_                nastyDate(date, tz, unitMillis)__            }_            final long roundedDate = rounding.round(date)__            final long nextRoundingValue = rounding.nextRoundingValue(roundedDate)___            assertInterval(roundedDate, date, nextRoundingValue, rounding, tz)___            _            if (unitMillis <= 86400 * 1000) {_                _                int offsetRounded = tz.getRules().getOffset(Instant.ofEpochMilli(roundedDate - 1)).getTotalSeconds()__                int offsetNextValue = tz.getRules().getOffset(Instant.ofEpochMilli(nextRoundingValue + 1)).getTotalSeconds()__                if (offsetRounded == offsetNextValue) {_                    assertThat("unit interval width not as expected for [" + unit + "], [" + tz + "] at "_                        + Instant.ofEpochMilli(roundedDate), nextRoundingValue - roundedDate, equalTo(unitMillis))__                }_            }_        }_    };randomized,test,on,time,unit,rounding,test,uses,random,link,date,time,unit,and,link,zone,id,and,often,50,of,the,time,chooses,test,dates,that,are,exactly,on,or,close,to,offset,changes,e,g,dst,in,the,chosen,time,zone,it,rounds,the,test,date,down,and,up,and,performs,various,checks,on,the,rounding,unit,interval,that,is,defined,by,this,assumptions,tested,are,described,in,link,assert,interval,long,long,long,rounding,zone,id;public,void,test,rounding,random,for,int,i,0,i,1000,i,rounding,date,time,unit,unit,random,from,rounding,date,time,unit,values,zone,id,tz,random,zone,rounding,rounding,new,rounding,time,unit,rounding,unit,tz,long,date,math,abs,random,long,2,long,10e11,long,unit,millis,unit,get,field,get,base,unit,get,duration,to,millis,if,random,boolean,nasty,date,date,tz,unit,millis,final,long,rounded,date,rounding,round,date,final,long,next,rounding,value,rounding,next,rounding,value,rounded,date,assert,interval,rounded,date,date,next,rounding,value,rounding,tz,if,unit,millis,86400,1000,int,offset,rounded,tz,get,rules,get,offset,instant,of,epoch,milli,rounded,date,1,get,total,seconds,int,offset,next,value,tz,get,rules,get,offset,instant,of,epoch,milli,next,rounding,value,1,get,total,seconds,if,offset,rounded,offset,next,value,assert,that,unit,interval,width,not,as,expected,for,unit,tz,at,instant,of,epoch,milli,rounded,date,next,rounding,value,rounded,date,equal,to,unit,millis
RoundingTests -> public void testRoundingRandom();1548236405;Randomized test on TimeUnitRounding. Test uses random_{@link DateTimeUnit} and {@link ZoneId} and often (50% of the time)_chooses test dates that are exactly on or close to offset changes (e.g._DST) in the chosen time zone.__It rounds the test date down and up and performs various checks on the_rounding unit interval that is defined by this. Assumptions tested are_described in_{@link #assertInterval(long, long, long, Rounding, ZoneId)};public void testRoundingRandom() {_        for (int i = 0_ i < 1000_ ++i) {_            Rounding.DateTimeUnit unit = randomFrom(Rounding.DateTimeUnit.values())__            ZoneId tz = randomZone()__            Rounding rounding = new Rounding.TimeUnitRounding(unit, tz)__            long date = Math.abs(randomLong() % (2 * (long) 10e11))_ _            long unitMillis = unit.getField().getBaseUnit().getDuration().toMillis()__            _            if (randomBoolean()) {_                nastyDate(date, tz, unitMillis)__            }_            final long roundedDate = rounding.round(date)__            final long nextRoundingValue = rounding.nextRoundingValue(roundedDate)___            assertInterval(roundedDate, date, nextRoundingValue, rounding, tz)___            _            if (unitMillis <= 86400 * 1000) {_                _                int offsetRounded = tz.getRules().getOffset(Instant.ofEpochMilli(roundedDate - 1)).getTotalSeconds()__                int offsetNextValue = tz.getRules().getOffset(Instant.ofEpochMilli(nextRoundingValue + 1)).getTotalSeconds()__                if (offsetRounded == offsetNextValue) {_                    assertThat("unit interval width not as expected for [" + unit + "], [" + tz + "] at "_                        + Instant.ofEpochMilli(roundedDate), nextRoundingValue - roundedDate, equalTo(unitMillis))__                }_            }_        }_    };randomized,test,on,time,unit,rounding,test,uses,random,link,date,time,unit,and,link,zone,id,and,often,50,of,the,time,chooses,test,dates,that,are,exactly,on,or,close,to,offset,changes,e,g,dst,in,the,chosen,time,zone,it,rounds,the,test,date,down,and,up,and,performs,various,checks,on,the,rounding,unit,interval,that,is,defined,by,this,assumptions,tested,are,described,in,link,assert,interval,long,long,long,rounding,zone,id;public,void,test,rounding,random,for,int,i,0,i,1000,i,rounding,date,time,unit,unit,random,from,rounding,date,time,unit,values,zone,id,tz,random,zone,rounding,rounding,new,rounding,time,unit,rounding,unit,tz,long,date,math,abs,random,long,2,long,10e11,long,unit,millis,unit,get,field,get,base,unit,get,duration,to,millis,if,random,boolean,nasty,date,date,tz,unit,millis,final,long,rounded,date,rounding,round,date,final,long,next,rounding,value,rounding,next,rounding,value,rounded,date,assert,interval,rounded,date,date,next,rounding,value,rounding,tz,if,unit,millis,86400,1000,int,offset,rounded,tz,get,rules,get,offset,instant,of,epoch,milli,rounded,date,1,get,total,seconds,int,offset,next,value,tz,get,rules,get,offset,instant,of,epoch,milli,next,rounding,value,1,get,total,seconds,if,offset,rounded,offset,next,value,assert,that,unit,interval,width,not,as,expected,for,unit,tz,at,instant,of,epoch,milli,rounded,date,next,rounding,value,rounded,date,equal,to,unit,millis
RoundingTests -> public void testRoundingRandom();1548921340;Randomized test on TimeUnitRounding. Test uses random_{@link DateTimeUnit} and {@link ZoneId} and often (50% of the time)_chooses test dates that are exactly on or close to offset changes (e.g._DST) in the chosen time zone.__It rounds the test date down and up and performs various checks on the_rounding unit interval that is defined by this. Assumptions tested are_described in_{@link #assertInterval(long, long, long, Rounding, ZoneId)};public void testRoundingRandom() {_        for (int i = 0_ i < 1000_ ++i) {_            Rounding.DateTimeUnit unit = randomFrom(Rounding.DateTimeUnit.values())__            ZoneId tz = randomZone()__            Rounding rounding = new Rounding.TimeUnitRounding(unit, tz)__            long date = Math.abs(randomLong() % (2 * (long) 10e11))_ _            long unitMillis = unit.getField().getBaseUnit().getDuration().toMillis()__            _            if (randomBoolean()) {_                nastyDate(date, tz, unitMillis)__            }_            final long roundedDate = rounding.round(date)__            final long nextRoundingValue = rounding.nextRoundingValue(roundedDate)___            assertInterval(roundedDate, date, nextRoundingValue, rounding, tz)___            _            if (unitMillis <= 86400 * 1000) {_                _                int offsetRounded = tz.getRules().getOffset(Instant.ofEpochMilli(roundedDate - 1)).getTotalSeconds()__                int offsetNextValue = tz.getRules().getOffset(Instant.ofEpochMilli(nextRoundingValue + 1)).getTotalSeconds()__                if (offsetRounded == offsetNextValue) {_                    assertThat("unit interval width not as expected for [" + unit + "], [" + tz + "] at "_                        + Instant.ofEpochMilli(roundedDate), nextRoundingValue - roundedDate, equalTo(unitMillis))__                }_            }_        }_    };randomized,test,on,time,unit,rounding,test,uses,random,link,date,time,unit,and,link,zone,id,and,often,50,of,the,time,chooses,test,dates,that,are,exactly,on,or,close,to,offset,changes,e,g,dst,in,the,chosen,time,zone,it,rounds,the,test,date,down,and,up,and,performs,various,checks,on,the,rounding,unit,interval,that,is,defined,by,this,assumptions,tested,are,described,in,link,assert,interval,long,long,long,rounding,zone,id;public,void,test,rounding,random,for,int,i,0,i,1000,i,rounding,date,time,unit,unit,random,from,rounding,date,time,unit,values,zone,id,tz,random,zone,rounding,rounding,new,rounding,time,unit,rounding,unit,tz,long,date,math,abs,random,long,2,long,10e11,long,unit,millis,unit,get,field,get,base,unit,get,duration,to,millis,if,random,boolean,nasty,date,date,tz,unit,millis,final,long,rounded,date,rounding,round,date,final,long,next,rounding,value,rounding,next,rounding,value,rounded,date,assert,interval,rounded,date,date,next,rounding,value,rounding,tz,if,unit,millis,86400,1000,int,offset,rounded,tz,get,rules,get,offset,instant,of,epoch,milli,rounded,date,1,get,total,seconds,int,offset,next,value,tz,get,rules,get,offset,instant,of,epoch,milli,next,rounding,value,1,get,total,seconds,if,offset,rounded,offset,next,value,assert,that,unit,interval,width,not,as,expected,for,unit,tz,at,instant,of,epoch,milli,rounded,date,next,rounding,value,rounded,date,equal,to,unit,millis
RoundingTests -> public void testRoundingRandom();1549876539;Randomized test on TimeUnitRounding. Test uses random_{@link DateTimeUnit} and {@link ZoneId} and often (50% of the time)_chooses test dates that are exactly on or close to offset changes (e.g._DST) in the chosen time zone.__It rounds the test date down and up and performs various checks on the_rounding unit interval that is defined by this. Assumptions tested are_described in_{@link #assertInterval(long, long, long, Rounding, ZoneId)};public void testRoundingRandom() {_        for (int i = 0_ i < 1000_ ++i) {_            Rounding.DateTimeUnit unit = randomFrom(Rounding.DateTimeUnit.values())__            ZoneId tz = randomZone()__            Rounding rounding = new Rounding.TimeUnitRounding(unit, tz)__            long date = Math.abs(randomLong() % (2 * (long) 10e11))_ _            long unitMillis = unit.getField().getBaseUnit().getDuration().toMillis()__            _            if (randomBoolean()) {_                nastyDate(date, tz, unitMillis)__            }_            final long roundedDate = rounding.round(date)__            final long nextRoundingValue = rounding.nextRoundingValue(roundedDate)___            assertInterval(roundedDate, date, nextRoundingValue, rounding, tz)___            _            if (unitMillis <= 86400 * 1000) {_                _                int offsetRounded = tz.getRules().getOffset(Instant.ofEpochMilli(roundedDate - 1)).getTotalSeconds()__                int offsetNextValue = tz.getRules().getOffset(Instant.ofEpochMilli(nextRoundingValue + 1)).getTotalSeconds()__                if (offsetRounded == offsetNextValue) {_                    assertThat("unit interval width not as expected for [" + unit + "], [" + tz + "] at "_                        + Instant.ofEpochMilli(roundedDate), nextRoundingValue - roundedDate, equalTo(unitMillis))__                }_            }_        }_    };randomized,test,on,time,unit,rounding,test,uses,random,link,date,time,unit,and,link,zone,id,and,often,50,of,the,time,chooses,test,dates,that,are,exactly,on,or,close,to,offset,changes,e,g,dst,in,the,chosen,time,zone,it,rounds,the,test,date,down,and,up,and,performs,various,checks,on,the,rounding,unit,interval,that,is,defined,by,this,assumptions,tested,are,described,in,link,assert,interval,long,long,long,rounding,zone,id;public,void,test,rounding,random,for,int,i,0,i,1000,i,rounding,date,time,unit,unit,random,from,rounding,date,time,unit,values,zone,id,tz,random,zone,rounding,rounding,new,rounding,time,unit,rounding,unit,tz,long,date,math,abs,random,long,2,long,10e11,long,unit,millis,unit,get,field,get,base,unit,get,duration,to,millis,if,random,boolean,nasty,date,date,tz,unit,millis,final,long,rounded,date,rounding,round,date,final,long,next,rounding,value,rounding,next,rounding,value,rounded,date,assert,interval,rounded,date,date,next,rounding,value,rounding,tz,if,unit,millis,86400,1000,int,offset,rounded,tz,get,rules,get,offset,instant,of,epoch,milli,rounded,date,1,get,total,seconds,int,offset,next,value,tz,get,rules,get,offset,instant,of,epoch,milli,next,rounding,value,1,get,total,seconds,if,offset,rounded,offset,next,value,assert,that,unit,interval,width,not,as,expected,for,unit,tz,at,instant,of,epoch,milli,rounded,date,next,rounding,value,rounded,date,equal,to,unit,millis
RoundingTests -> public void testDayIntervalRounding();1534248446;test DayIntervalRounding, (interval &gt_= 12h) with time zone shift;public void testDayIntervalRounding() {_        ZoneId tz = ZoneOffset.ofHours(-8)__        Rounding tzRounding = Rounding.builder(TimeValue.timeValueHours(12)).timeZone(tz).build()__        assertThat(tzRounding.round(time("2009-02-03T00:01:01")), isDate(time("2009-02-02T20:00:00.000Z"), tz))__        assertThat(tzRounding.nextRoundingValue(time("2009-02-02T20:00:00.000Z")), isDate(time("2009-02-03T08:00:00.000Z"), tz))___        assertThat(tzRounding.round(time("2009-02-03T13:01:01")), isDate(time("2009-02-03T08:00:00.000Z"), tz))__        assertThat(tzRounding.nextRoundingValue(time("2009-02-03T08:00:00.000Z")), isDate(time("2009-02-03T20:00:00.000Z"), tz))__    };test,day,interval,rounding,interval,gt,12h,with,time,zone,shift;public,void,test,day,interval,rounding,zone,id,tz,zone,offset,of,hours,8,rounding,tz,rounding,rounding,builder,time,value,time,value,hours,12,time,zone,tz,build,assert,that,tz,rounding,round,time,2009,02,03t00,01,01,is,date,time,2009,02,02t20,00,00,000z,tz,assert,that,tz,rounding,next,rounding,value,time,2009,02,02t20,00,00,000z,is,date,time,2009,02,03t08,00,00,000z,tz,assert,that,tz,rounding,round,time,2009,02,03t13,01,01,is,date,time,2009,02,03t08,00,00,000z,tz,assert,that,tz,rounding,next,rounding,value,time,2009,02,03t08,00,00,000z,is,date,time,2009,02,03t20,00,00,000z,tz
RoundingTests -> public void testDayIntervalRounding();1548236405;test DayIntervalRounding, (interval &gt_= 12h) with time zone shift;public void testDayIntervalRounding() {_        ZoneId tz = ZoneOffset.ofHours(-8)__        Rounding tzRounding = Rounding.builder(TimeValue.timeValueHours(12)).timeZone(tz).build()__        assertThat(tzRounding.round(time("2009-02-03T00:01:01")), isDate(time("2009-02-02T20:00:00.000Z"), tz))__        assertThat(tzRounding.nextRoundingValue(time("2009-02-02T20:00:00.000Z")), isDate(time("2009-02-03T08:00:00.000Z"), tz))___        assertThat(tzRounding.round(time("2009-02-03T13:01:01")), isDate(time("2009-02-03T08:00:00.000Z"), tz))__        assertThat(tzRounding.nextRoundingValue(time("2009-02-03T08:00:00.000Z")), isDate(time("2009-02-03T20:00:00.000Z"), tz))__    };test,day,interval,rounding,interval,gt,12h,with,time,zone,shift;public,void,test,day,interval,rounding,zone,id,tz,zone,offset,of,hours,8,rounding,tz,rounding,rounding,builder,time,value,time,value,hours,12,time,zone,tz,build,assert,that,tz,rounding,round,time,2009,02,03t00,01,01,is,date,time,2009,02,02t20,00,00,000z,tz,assert,that,tz,rounding,next,rounding,value,time,2009,02,02t20,00,00,000z,is,date,time,2009,02,03t08,00,00,000z,tz,assert,that,tz,rounding,round,time,2009,02,03t13,01,01,is,date,time,2009,02,03t08,00,00,000z,tz,assert,that,tz,rounding,next,rounding,value,time,2009,02,03t08,00,00,000z,is,date,time,2009,02,03t20,00,00,000z,tz
RoundingTests -> public void testDayIntervalRounding();1548921340;test DayIntervalRounding, (interval &gt_= 12h) with time zone shift;public void testDayIntervalRounding() {_        ZoneId tz = ZoneOffset.ofHours(-8)__        Rounding tzRounding = Rounding.builder(TimeValue.timeValueHours(12)).timeZone(tz).build()__        assertThat(tzRounding.round(time("2009-02-03T00:01:01")), isDate(time("2009-02-02T20:00:00.000Z"), tz))__        assertThat(tzRounding.nextRoundingValue(time("2009-02-02T20:00:00.000Z")), isDate(time("2009-02-03T08:00:00.000Z"), tz))___        assertThat(tzRounding.round(time("2009-02-03T13:01:01")), isDate(time("2009-02-03T08:00:00.000Z"), tz))__        assertThat(tzRounding.nextRoundingValue(time("2009-02-03T08:00:00.000Z")), isDate(time("2009-02-03T20:00:00.000Z"), tz))__    };test,day,interval,rounding,interval,gt,12h,with,time,zone,shift;public,void,test,day,interval,rounding,zone,id,tz,zone,offset,of,hours,8,rounding,tz,rounding,rounding,builder,time,value,time,value,hours,12,time,zone,tz,build,assert,that,tz,rounding,round,time,2009,02,03t00,01,01,is,date,time,2009,02,02t20,00,00,000z,tz,assert,that,tz,rounding,next,rounding,value,time,2009,02,02t20,00,00,000z,is,date,time,2009,02,03t08,00,00,000z,tz,assert,that,tz,rounding,round,time,2009,02,03t13,01,01,is,date,time,2009,02,03t08,00,00,000z,tz,assert,that,tz,rounding,next,rounding,value,time,2009,02,03t08,00,00,000z,is,date,time,2009,02,03t20,00,00,000z,tz
RoundingTests -> public void testDayIntervalRounding();1549876539;test DayIntervalRounding, (interval &gt_= 12h) with time zone shift;public void testDayIntervalRounding() {_        ZoneId tz = ZoneOffset.ofHours(-8)__        Rounding tzRounding = Rounding.builder(TimeValue.timeValueHours(12)).timeZone(tz).build()__        assertThat(tzRounding.round(time("2009-02-03T00:01:01")), isDate(time("2009-02-02T20:00:00.000Z"), tz))__        assertThat(tzRounding.nextRoundingValue(time("2009-02-02T20:00:00.000Z")), isDate(time("2009-02-03T08:00:00.000Z"), tz))___        assertThat(tzRounding.round(time("2009-02-03T13:01:01")), isDate(time("2009-02-03T08:00:00.000Z"), tz))__        assertThat(tzRounding.nextRoundingValue(time("2009-02-03T08:00:00.000Z")), isDate(time("2009-02-03T20:00:00.000Z"), tz))__    };test,day,interval,rounding,interval,gt,12h,with,time,zone,shift;public,void,test,day,interval,rounding,zone,id,tz,zone,offset,of,hours,8,rounding,tz,rounding,rounding,builder,time,value,time,value,hours,12,time,zone,tz,build,assert,that,tz,rounding,round,time,2009,02,03t00,01,01,is,date,time,2009,02,02t20,00,00,000z,tz,assert,that,tz,rounding,next,rounding,value,time,2009,02,02t20,00,00,000z,is,date,time,2009,02,03t08,00,00,000z,tz,assert,that,tz,rounding,round,time,2009,02,03t13,01,01,is,date,time,2009,02,03t08,00,00,000z,tz,assert,that,tz,rounding,next,rounding,value,time,2009,02,03t08,00,00,000z,is,date,time,2009,02,03t20,00,00,000z,tz
RoundingTests -> public void testDST_END_Edgecases();1534248446;tests for dst transition with overlaps and day roundings.;public void testDST_END_Edgecases() {_        _        __        ZoneId tz = ZoneId.of("Atlantic/Azores")__        Rounding.DateTimeUnit timeUnit = Rounding.DateTimeUnit.DAY_OF_MONTH__        Rounding rounding = new Rounding.TimeUnitRounding(timeUnit, tz)___        _        _        __        long midnightBeforeTransition = time("2000-10-29T00:00:00", tz)__        long midnightOfTransition = time("2000-10-29T00:00:00-01:00")__        assertEquals(60L * 60L * 1000L, midnightOfTransition - midnightBeforeTransition)__        long nextMidnight = time("2000-10-30T00:00:00", tz)___        assertInterval(midnightBeforeTransition, nextMidnight, rounding, 25 * 60, tz)___        assertThat(rounding.round(time("2000-10-29T06:00:00-01:00")), isDate(time("2000-10-29T00:00:00Z"), tz))___        _        __        tz = ZoneId.of("America/Lima")__        rounding = new Rounding.TimeUnitRounding(timeUnit, tz)___        _        __        midnightBeforeTransition = time("1990-03-31T00:00:00.000-04:00")__        nextMidnight = time("1990-04-01T00:00:00.000-05:00")__        assertInterval(midnightBeforeTransition, nextMidnight, rounding, 25 * 60, tz)___        _        long midnightAfterTransition = time("1990-04-01T00:00:00.000-05:00")__        nextMidnight = time("1990-04-02T00:00:00.000-05:00")__        assertInterval(midnightAfterTransition, nextMidnight, rounding, 24 * 60, tz)__    };tests,for,dst,transition,with,overlaps,and,day,roundings;public,void,zone,id,tz,zone,id,of,atlantic,azores,rounding,date,time,unit,time,unit,rounding,date,time,unit,rounding,rounding,new,rounding,time,unit,rounding,time,unit,tz,long,midnight,before,transition,time,2000,10,29t00,00,00,tz,long,midnight,of,transition,time,2000,10,29t00,00,00,01,00,assert,equals,60l,60l,1000l,midnight,of,transition,midnight,before,transition,long,next,midnight,time,2000,10,30t00,00,00,tz,assert,interval,midnight,before,transition,next,midnight,rounding,25,60,tz,assert,that,rounding,round,time,2000,10,29t06,00,00,01,00,is,date,time,2000,10,29t00,00,00z,tz,tz,zone,id,of,america,lima,rounding,new,rounding,time,unit,rounding,time,unit,tz,midnight,before,transition,time,1990,03,31t00,00,00,000,04,00,next,midnight,time,1990,04,01t00,00,00,000,05,00,assert,interval,midnight,before,transition,next,midnight,rounding,25,60,tz,long,midnight,after,transition,time,1990,04,01t00,00,00,000,05,00,next,midnight,time,1990,04,02t00,00,00,000,05,00,assert,interval,midnight,after,transition,next,midnight,rounding,24,60,tz
RoundingTests -> public void testDST_END_Edgecases();1548236405;tests for dst transition with overlaps and day roundings.;public void testDST_END_Edgecases() {_        _        __        ZoneId tz = ZoneId.of("Atlantic/Azores")__        Rounding.DateTimeUnit timeUnit = Rounding.DateTimeUnit.DAY_OF_MONTH__        Rounding rounding = new Rounding.TimeUnitRounding(timeUnit, tz)___        _        _        __        long midnightBeforeTransition = time("2000-10-29T00:00:00", tz)__        long midnightOfTransition = time("2000-10-29T00:00:00-01:00")__        assertEquals(60L * 60L * 1000L, midnightOfTransition - midnightBeforeTransition)__        long nextMidnight = time("2000-10-30T00:00:00", tz)___        assertInterval(midnightBeforeTransition, nextMidnight, rounding, 25 * 60, tz)___        assertThat(rounding.round(time("2000-10-29T06:00:00-01:00")), isDate(time("2000-10-29T00:00:00Z"), tz))___        _        __        tz = ZoneId.of("America/Lima")__        rounding = new Rounding.TimeUnitRounding(timeUnit, tz)___        _        __        midnightBeforeTransition = time("1990-03-31T00:00:00.000-04:00")__        nextMidnight = time("1990-04-01T00:00:00.000-05:00")__        assertInterval(midnightBeforeTransition, nextMidnight, rounding, 25 * 60, tz)___        _        long midnightAfterTransition = time("1990-04-01T00:00:00.000-05:00")__        nextMidnight = time("1990-04-02T00:00:00.000-05:00")__        assertInterval(midnightAfterTransition, nextMidnight, rounding, 24 * 60, tz)__    };tests,for,dst,transition,with,overlaps,and,day,roundings;public,void,zone,id,tz,zone,id,of,atlantic,azores,rounding,date,time,unit,time,unit,rounding,date,time,unit,rounding,rounding,new,rounding,time,unit,rounding,time,unit,tz,long,midnight,before,transition,time,2000,10,29t00,00,00,tz,long,midnight,of,transition,time,2000,10,29t00,00,00,01,00,assert,equals,60l,60l,1000l,midnight,of,transition,midnight,before,transition,long,next,midnight,time,2000,10,30t00,00,00,tz,assert,interval,midnight,before,transition,next,midnight,rounding,25,60,tz,assert,that,rounding,round,time,2000,10,29t06,00,00,01,00,is,date,time,2000,10,29t00,00,00z,tz,tz,zone,id,of,america,lima,rounding,new,rounding,time,unit,rounding,time,unit,tz,midnight,before,transition,time,1990,03,31t00,00,00,000,04,00,next,midnight,time,1990,04,01t00,00,00,000,05,00,assert,interval,midnight,before,transition,next,midnight,rounding,25,60,tz,long,midnight,after,transition,time,1990,04,01t00,00,00,000,05,00,next,midnight,time,1990,04,02t00,00,00,000,05,00,assert,interval,midnight,after,transition,next,midnight,rounding,24,60,tz
RoundingTests -> public void testDST_END_Edgecases();1548921340;tests for dst transition with overlaps and day roundings.;public void testDST_END_Edgecases() {_        _        __        ZoneId tz = ZoneId.of("Atlantic/Azores")__        Rounding.DateTimeUnit timeUnit = Rounding.DateTimeUnit.DAY_OF_MONTH__        Rounding rounding = new Rounding.TimeUnitRounding(timeUnit, tz)___        _        _        __        long midnightBeforeTransition = time("2000-10-29T00:00:00", tz)__        long midnightOfTransition = time("2000-10-29T00:00:00-01:00")__        assertEquals(60L * 60L * 1000L, midnightOfTransition - midnightBeforeTransition)__        long nextMidnight = time("2000-10-30T00:00:00", tz)___        assertInterval(midnightBeforeTransition, nextMidnight, rounding, 25 * 60, tz)___        assertThat(rounding.round(time("2000-10-29T06:00:00-01:00")), isDate(time("2000-10-29T00:00:00Z"), tz))___        _        __        tz = ZoneId.of("America/Lima")__        rounding = new Rounding.TimeUnitRounding(timeUnit, tz)___        _        __        midnightBeforeTransition = time("1990-03-31T00:00:00.000-04:00")__        nextMidnight = time("1990-04-01T00:00:00.000-05:00")__        assertInterval(midnightBeforeTransition, nextMidnight, rounding, 25 * 60, tz)___        _        long midnightAfterTransition = time("1990-04-01T00:00:00.000-05:00")__        nextMidnight = time("1990-04-02T00:00:00.000-05:00")__        assertInterval(midnightAfterTransition, nextMidnight, rounding, 24 * 60, tz)__    };tests,for,dst,transition,with,overlaps,and,day,roundings;public,void,zone,id,tz,zone,id,of,atlantic,azores,rounding,date,time,unit,time,unit,rounding,date,time,unit,rounding,rounding,new,rounding,time,unit,rounding,time,unit,tz,long,midnight,before,transition,time,2000,10,29t00,00,00,tz,long,midnight,of,transition,time,2000,10,29t00,00,00,01,00,assert,equals,60l,60l,1000l,midnight,of,transition,midnight,before,transition,long,next,midnight,time,2000,10,30t00,00,00,tz,assert,interval,midnight,before,transition,next,midnight,rounding,25,60,tz,assert,that,rounding,round,time,2000,10,29t06,00,00,01,00,is,date,time,2000,10,29t00,00,00z,tz,tz,zone,id,of,america,lima,rounding,new,rounding,time,unit,rounding,time,unit,tz,midnight,before,transition,time,1990,03,31t00,00,00,000,04,00,next,midnight,time,1990,04,01t00,00,00,000,05,00,assert,interval,midnight,before,transition,next,midnight,rounding,25,60,tz,long,midnight,after,transition,time,1990,04,01t00,00,00,000,05,00,next,midnight,time,1990,04,02t00,00,00,000,05,00,assert,interval,midnight,after,transition,next,midnight,rounding,24,60,tz
RoundingTests -> public void testDST_END_Edgecases();1549876539;tests for dst transition with overlaps and day roundings.;public void testDST_END_Edgecases() {_        _        __        ZoneId tz = ZoneId.of("Atlantic/Azores")__        Rounding.DateTimeUnit timeUnit = Rounding.DateTimeUnit.DAY_OF_MONTH__        Rounding rounding = new Rounding.TimeUnitRounding(timeUnit, tz)___        _        _        __        long midnightBeforeTransition = time("2000-10-29T00:00:00", tz)__        long midnightOfTransition = time("2000-10-29T00:00:00-01:00")__        assertEquals(60L * 60L * 1000L, midnightOfTransition - midnightBeforeTransition)__        long nextMidnight = time("2000-10-30T00:00:00", tz)___        assertInterval(midnightBeforeTransition, nextMidnight, rounding, 25 * 60, tz)___        assertThat(rounding.round(time("2000-10-29T06:00:00-01:00")), isDate(time("2000-10-29T00:00:00Z"), tz))___        _        __        tz = ZoneId.of("America/Lima")__        rounding = new Rounding.TimeUnitRounding(timeUnit, tz)___        _        __        midnightBeforeTransition = time("1990-03-31T00:00:00.000-04:00")__        nextMidnight = time("1990-04-01T00:00:00.000-05:00")__        assertInterval(midnightBeforeTransition, nextMidnight, rounding, 25 * 60, tz)___        _        long midnightAfterTransition = time("1990-04-01T00:00:00.000-05:00")__        nextMidnight = time("1990-04-02T00:00:00.000-05:00")__        assertInterval(midnightAfterTransition, nextMidnight, rounding, 24 * 60, tz)__    };tests,for,dst,transition,with,overlaps,and,day,roundings;public,void,zone,id,tz,zone,id,of,atlantic,azores,rounding,date,time,unit,time,unit,rounding,date,time,unit,rounding,rounding,new,rounding,time,unit,rounding,time,unit,tz,long,midnight,before,transition,time,2000,10,29t00,00,00,tz,long,midnight,of,transition,time,2000,10,29t00,00,00,01,00,assert,equals,60l,60l,1000l,midnight,of,transition,midnight,before,transition,long,next,midnight,time,2000,10,30t00,00,00,tz,assert,interval,midnight,before,transition,next,midnight,rounding,25,60,tz,assert,that,rounding,round,time,2000,10,29t06,00,00,01,00,is,date,time,2000,10,29t00,00,00z,tz,tz,zone,id,of,america,lima,rounding,new,rounding,time,unit,rounding,time,unit,tz,midnight,before,transition,time,1990,03,31t00,00,00,000,04,00,next,midnight,time,1990,04,01t00,00,00,000,05,00,assert,interval,midnight,before,transition,next,midnight,rounding,25,60,tz,long,midnight,after,transition,time,1990,04,01t00,00,00,000,05,00,next,midnight,time,1990,04,02t00,00,00,000,05,00,assert,interval,midnight,after,transition,next,midnight,rounding,24,60,tz
RoundingTests -> private void assertInterval(long rounded, long unrounded, long nextRoundingValue, Rounding rounding, ZoneId tz);1534248446;perform a number on assertions and checks on {@link org.elasticsearch.common.rounding.Rounding.TimeUnitRounding} intervals_@param rounded the expected low end of the rounding interval_@param unrounded a date in the interval to be checked for rounding_@param nextRoundingValue the expected upper end of the rounding interval_@param rounding the rounding instance;private void assertInterval(long rounded, long unrounded, long nextRoundingValue, Rounding rounding, ZoneId tz) {_        assertThat("rounding should be idempotent ", rounding.round(rounded), isDate(rounded, tz))__        assertThat("rounded value smaller or equal than unrounded" + rounding, rounded, lessThanOrEqualTo(unrounded))__        assertThat("values less than rounded should round further down" + rounding, rounding.round(rounded - 1), lessThan(rounded))__        assertThat("nextRounding value should be a rounded date", rounding.round(nextRoundingValue), isDate(nextRoundingValue, tz))__        assertThat("values above nextRounding should round down there", rounding.round(nextRoundingValue + 1),_            isDate(nextRoundingValue, tz))___        if (isTimeWithWellDefinedRounding(tz, unrounded)) {_            assertThat("nextRounding value should be greater than date" + rounding, nextRoundingValue, greaterThan(unrounded))___            long dateBetween = dateBetween(rounded, nextRoundingValue)__            long roundingDateBetween = rounding.round(dateBetween)__            ZonedDateTime zonedDateBetween = ZonedDateTime.ofInstant(Instant.ofEpochMilli(dateBetween), tz)__            assertThat("dateBetween [" + zonedDateBetween + "/" + dateBetween + "] should round down to roundedDate [" +_                    Instant.ofEpochMilli(roundingDateBetween) + "]", roundingDateBetween, isDate(rounded, tz))__            assertThat("dateBetween [" + zonedDateBetween + "] should round up to nextRoundingValue",_                rounding.nextRoundingValue(dateBetween), isDate(nextRoundingValue, tz))__        }_    };perform,a,number,on,assertions,and,checks,on,link,org,elasticsearch,common,rounding,rounding,time,unit,rounding,intervals,param,rounded,the,expected,low,end,of,the,rounding,interval,param,unrounded,a,date,in,the,interval,to,be,checked,for,rounding,param,next,rounding,value,the,expected,upper,end,of,the,rounding,interval,param,rounding,the,rounding,instance;private,void,assert,interval,long,rounded,long,unrounded,long,next,rounding,value,rounding,rounding,zone,id,tz,assert,that,rounding,should,be,idempotent,rounding,round,rounded,is,date,rounded,tz,assert,that,rounded,value,smaller,or,equal,than,unrounded,rounding,rounded,less,than,or,equal,to,unrounded,assert,that,values,less,than,rounded,should,round,further,down,rounding,rounding,round,rounded,1,less,than,rounded,assert,that,next,rounding,value,should,be,a,rounded,date,rounding,round,next,rounding,value,is,date,next,rounding,value,tz,assert,that,values,above,next,rounding,should,round,down,there,rounding,round,next,rounding,value,1,is,date,next,rounding,value,tz,if,is,time,with,well,defined,rounding,tz,unrounded,assert,that,next,rounding,value,should,be,greater,than,date,rounding,next,rounding,value,greater,than,unrounded,long,date,between,date,between,rounded,next,rounding,value,long,rounding,date,between,rounding,round,date,between,zoned,date,time,zoned,date,between,zoned,date,time,of,instant,instant,of,epoch,milli,date,between,tz,assert,that,date,between,zoned,date,between,date,between,should,round,down,to,rounded,date,instant,of,epoch,milli,rounding,date,between,rounding,date,between,is,date,rounded,tz,assert,that,date,between,zoned,date,between,should,round,up,to,next,rounding,value,rounding,next,rounding,value,date,between,is,date,next,rounding,value,tz
RoundingTests -> private void assertInterval(long rounded, long unrounded, long nextRoundingValue, Rounding rounding, ZoneId tz);1548236405;perform a number on assertions and checks on {@link org.elasticsearch.common.rounding.Rounding.TimeUnitRounding} intervals_@param rounded the expected low end of the rounding interval_@param unrounded a date in the interval to be checked for rounding_@param nextRoundingValue the expected upper end of the rounding interval_@param rounding the rounding instance;private void assertInterval(long rounded, long unrounded, long nextRoundingValue, Rounding rounding, ZoneId tz) {_        assertThat("rounding should be idempotent ", rounding.round(rounded), isDate(rounded, tz))__        assertThat("rounded value smaller or equal than unrounded" + rounding, rounded, lessThanOrEqualTo(unrounded))__        assertThat("values less than rounded should round further down" + rounding, rounding.round(rounded - 1), lessThan(rounded))__        assertThat("nextRounding value should be a rounded date", rounding.round(nextRoundingValue), isDate(nextRoundingValue, tz))__        assertThat("values above nextRounding should round down there", rounding.round(nextRoundingValue + 1),_            isDate(nextRoundingValue, tz))___        if (isTimeWithWellDefinedRounding(tz, unrounded)) {_            assertThat("nextRounding value should be greater than date" + rounding, nextRoundingValue, greaterThan(unrounded))___            long dateBetween = dateBetween(rounded, nextRoundingValue)__            long roundingDateBetween = rounding.round(dateBetween)__            ZonedDateTime zonedDateBetween = ZonedDateTime.ofInstant(Instant.ofEpochMilli(dateBetween), tz)__            assertThat("dateBetween [" + zonedDateBetween + "/" + dateBetween + "] should round down to roundedDate [" +_                    Instant.ofEpochMilli(roundingDateBetween) + "]", roundingDateBetween, isDate(rounded, tz))__            assertThat("dateBetween [" + zonedDateBetween + "] should round up to nextRoundingValue",_                rounding.nextRoundingValue(dateBetween), isDate(nextRoundingValue, tz))__        }_    };perform,a,number,on,assertions,and,checks,on,link,org,elasticsearch,common,rounding,rounding,time,unit,rounding,intervals,param,rounded,the,expected,low,end,of,the,rounding,interval,param,unrounded,a,date,in,the,interval,to,be,checked,for,rounding,param,next,rounding,value,the,expected,upper,end,of,the,rounding,interval,param,rounding,the,rounding,instance;private,void,assert,interval,long,rounded,long,unrounded,long,next,rounding,value,rounding,rounding,zone,id,tz,assert,that,rounding,should,be,idempotent,rounding,round,rounded,is,date,rounded,tz,assert,that,rounded,value,smaller,or,equal,than,unrounded,rounding,rounded,less,than,or,equal,to,unrounded,assert,that,values,less,than,rounded,should,round,further,down,rounding,rounding,round,rounded,1,less,than,rounded,assert,that,next,rounding,value,should,be,a,rounded,date,rounding,round,next,rounding,value,is,date,next,rounding,value,tz,assert,that,values,above,next,rounding,should,round,down,there,rounding,round,next,rounding,value,1,is,date,next,rounding,value,tz,if,is,time,with,well,defined,rounding,tz,unrounded,assert,that,next,rounding,value,should,be,greater,than,date,rounding,next,rounding,value,greater,than,unrounded,long,date,between,date,between,rounded,next,rounding,value,long,rounding,date,between,rounding,round,date,between,zoned,date,time,zoned,date,between,zoned,date,time,of,instant,instant,of,epoch,milli,date,between,tz,assert,that,date,between,zoned,date,between,date,between,should,round,down,to,rounded,date,instant,of,epoch,milli,rounding,date,between,rounding,date,between,is,date,rounded,tz,assert,that,date,between,zoned,date,between,should,round,up,to,next,rounding,value,rounding,next,rounding,value,date,between,is,date,next,rounding,value,tz
RoundingTests -> private void assertInterval(long rounded, long unrounded, long nextRoundingValue, Rounding rounding, ZoneId tz);1548921340;perform a number on assertions and checks on {@link org.elasticsearch.common.rounding.Rounding.TimeUnitRounding} intervals_@param rounded the expected low end of the rounding interval_@param unrounded a date in the interval to be checked for rounding_@param nextRoundingValue the expected upper end of the rounding interval_@param rounding the rounding instance;private void assertInterval(long rounded, long unrounded, long nextRoundingValue, Rounding rounding, ZoneId tz) {_        assertThat("rounding should be idempotent ", rounding.round(rounded), isDate(rounded, tz))__        assertThat("rounded value smaller or equal than unrounded" + rounding, rounded, lessThanOrEqualTo(unrounded))__        assertThat("values less than rounded should round further down" + rounding, rounding.round(rounded - 1), lessThan(rounded))__        assertThat("nextRounding value should be a rounded date", rounding.round(nextRoundingValue), isDate(nextRoundingValue, tz))__        assertThat("values above nextRounding should round down there", rounding.round(nextRoundingValue + 1),_            isDate(nextRoundingValue, tz))___        if (isTimeWithWellDefinedRounding(tz, unrounded)) {_            assertThat("nextRounding value should be greater than date" + rounding, nextRoundingValue, greaterThan(unrounded))___            long dateBetween = dateBetween(rounded, nextRoundingValue)__            long roundingDateBetween = rounding.round(dateBetween)__            ZonedDateTime zonedDateBetween = ZonedDateTime.ofInstant(Instant.ofEpochMilli(dateBetween), tz)__            assertThat("dateBetween [" + zonedDateBetween + "/" + dateBetween + "] should round down to roundedDate [" +_                    Instant.ofEpochMilli(roundingDateBetween) + "]", roundingDateBetween, isDate(rounded, tz))__            assertThat("dateBetween [" + zonedDateBetween + "] should round up to nextRoundingValue",_                rounding.nextRoundingValue(dateBetween), isDate(nextRoundingValue, tz))__        }_    };perform,a,number,on,assertions,and,checks,on,link,org,elasticsearch,common,rounding,rounding,time,unit,rounding,intervals,param,rounded,the,expected,low,end,of,the,rounding,interval,param,unrounded,a,date,in,the,interval,to,be,checked,for,rounding,param,next,rounding,value,the,expected,upper,end,of,the,rounding,interval,param,rounding,the,rounding,instance;private,void,assert,interval,long,rounded,long,unrounded,long,next,rounding,value,rounding,rounding,zone,id,tz,assert,that,rounding,should,be,idempotent,rounding,round,rounded,is,date,rounded,tz,assert,that,rounded,value,smaller,or,equal,than,unrounded,rounding,rounded,less,than,or,equal,to,unrounded,assert,that,values,less,than,rounded,should,round,further,down,rounding,rounding,round,rounded,1,less,than,rounded,assert,that,next,rounding,value,should,be,a,rounded,date,rounding,round,next,rounding,value,is,date,next,rounding,value,tz,assert,that,values,above,next,rounding,should,round,down,there,rounding,round,next,rounding,value,1,is,date,next,rounding,value,tz,if,is,time,with,well,defined,rounding,tz,unrounded,assert,that,next,rounding,value,should,be,greater,than,date,rounding,next,rounding,value,greater,than,unrounded,long,date,between,date,between,rounded,next,rounding,value,long,rounding,date,between,rounding,round,date,between,zoned,date,time,zoned,date,between,zoned,date,time,of,instant,instant,of,epoch,milli,date,between,tz,assert,that,date,between,zoned,date,between,date,between,should,round,down,to,rounded,date,instant,of,epoch,milli,rounding,date,between,rounding,date,between,is,date,rounded,tz,assert,that,date,between,zoned,date,between,should,round,up,to,next,rounding,value,rounding,next,rounding,value,date,between,is,date,next,rounding,value,tz
RoundingTests -> private void assertInterval(long rounded, long unrounded, long nextRoundingValue, Rounding rounding, ZoneId tz);1549876539;perform a number on assertions and checks on {@link org.elasticsearch.common.Rounding.TimeUnitRounding} intervals_@param rounded the expected low end of the rounding interval_@param unrounded a date in the interval to be checked for rounding_@param nextRoundingValue the expected upper end of the rounding interval_@param rounding the rounding instance;private void assertInterval(long rounded, long unrounded, long nextRoundingValue, Rounding rounding, ZoneId tz) {_        assertThat("rounding should be idempotent ", rounding.round(rounded), isDate(rounded, tz))__        assertThat("rounded value smaller or equal than unrounded" + rounding, rounded, lessThanOrEqualTo(unrounded))__        assertThat("values less than rounded should round further down" + rounding, rounding.round(rounded - 1), lessThan(rounded))__        assertThat("nextRounding value should be a rounded date", rounding.round(nextRoundingValue), isDate(nextRoundingValue, tz))__        assertThat("values above nextRounding should round down there", rounding.round(nextRoundingValue + 1),_            isDate(nextRoundingValue, tz))___        if (isTimeWithWellDefinedRounding(tz, unrounded)) {_            assertThat("nextRounding value should be greater than date" + rounding, nextRoundingValue, greaterThan(unrounded))___            long dateBetween = dateBetween(rounded, nextRoundingValue)__            long roundingDateBetween = rounding.round(dateBetween)__            ZonedDateTime zonedDateBetween = ZonedDateTime.ofInstant(Instant.ofEpochMilli(dateBetween), tz)__            assertThat("dateBetween [" + zonedDateBetween + "/" + dateBetween + "] should round down to roundedDate [" +_                    Instant.ofEpochMilli(roundingDateBetween) + "]", roundingDateBetween, isDate(rounded, tz))__            assertThat("dateBetween [" + zonedDateBetween + "] should round up to nextRoundingValue",_                rounding.nextRoundingValue(dateBetween), isDate(nextRoundingValue, tz))__        }_    };perform,a,number,on,assertions,and,checks,on,link,org,elasticsearch,common,rounding,time,unit,rounding,intervals,param,rounded,the,expected,low,end,of,the,rounding,interval,param,unrounded,a,date,in,the,interval,to,be,checked,for,rounding,param,next,rounding,value,the,expected,upper,end,of,the,rounding,interval,param,rounding,the,rounding,instance;private,void,assert,interval,long,rounded,long,unrounded,long,next,rounding,value,rounding,rounding,zone,id,tz,assert,that,rounding,should,be,idempotent,rounding,round,rounded,is,date,rounded,tz,assert,that,rounded,value,smaller,or,equal,than,unrounded,rounding,rounded,less,than,or,equal,to,unrounded,assert,that,values,less,than,rounded,should,round,further,down,rounding,rounding,round,rounded,1,less,than,rounded,assert,that,next,rounding,value,should,be,a,rounded,date,rounding,round,next,rounding,value,is,date,next,rounding,value,tz,assert,that,values,above,next,rounding,should,round,down,there,rounding,round,next,rounding,value,1,is,date,next,rounding,value,tz,if,is,time,with,well,defined,rounding,tz,unrounded,assert,that,next,rounding,value,should,be,greater,than,date,rounding,next,rounding,value,greater,than,unrounded,long,date,between,date,between,rounded,next,rounding,value,long,rounding,date,between,rounding,round,date,between,zoned,date,time,zoned,date,between,zoned,date,time,of,instant,instant,of,epoch,milli,date,between,tz,assert,that,date,between,zoned,date,between,date,between,should,round,down,to,rounded,date,instant,of,epoch,milli,rounding,date,between,rounding,date,between,is,date,rounded,tz,assert,that,date,between,zoned,date,between,should,round,up,to,next,rounding,value,rounding,next,rounding,value,date,between,is,date,next,rounding,value,tz
RoundingTests -> public void testIntervalRounding_NotDivisibleInteval();1534248446;Special test for intervals that don't fit evenly into rounding interval._In this case, when interval crosses DST transition point, rounding in local_time can land in a DST gap which results in wrong UTC rounding values.;public void testIntervalRounding_NotDivisibleInteval() {_        long interval = TimeUnit.MINUTES.toMillis(14)__        ZoneId tz = ZoneId.of("CET")__        Rounding rounding = new Rounding.TimeIntervalRounding(interval, tz)___        assertThat(rounding.round(time("2016-03-27T01:41:00+01:00")), isDate(time("2016-03-27T01:30:00+01:00"), tz))__        assertThat(rounding.round(time("2016-03-27T01:51:00+01:00")), isDate(time("2016-03-27T01:44:00+01:00"), tz))__        assertThat(rounding.round(time("2016-03-27T01:59:00+01:00")), isDate(time("2016-03-27T01:58:00+01:00"), tz))__        assertThat(rounding.round(time("2016-03-27T03:05:00+02:00")), isDate(time("2016-03-27T03:00:00+02:00"), tz))__        assertThat(rounding.round(time("2016-03-27T03:12:00+02:00")), isDate(time("2016-03-27T03:08:00+02:00"), tz))__        assertThat(rounding.round(time("2016-03-27T03:25:00+02:00")), isDate(time("2016-03-27T03:22:00+02:00"), tz))__        assertThat(rounding.round(time("2016-03-27T03:39:00+02:00")), isDate(time("2016-03-27T03:36:00+02:00"), tz))__    };special,test,for,intervals,that,don,t,fit,evenly,into,rounding,interval,in,this,case,when,interval,crosses,dst,transition,point,rounding,in,local,time,can,land,in,a,dst,gap,which,results,in,wrong,utc,rounding,values;public,void,long,interval,time,unit,minutes,to,millis,14,zone,id,tz,zone,id,of,cet,rounding,rounding,new,rounding,time,interval,rounding,interval,tz,assert,that,rounding,round,time,2016,03,27t01,41,00,01,00,is,date,time,2016,03,27t01,30,00,01,00,tz,assert,that,rounding,round,time,2016,03,27t01,51,00,01,00,is,date,time,2016,03,27t01,44,00,01,00,tz,assert,that,rounding,round,time,2016,03,27t01,59,00,01,00,is,date,time,2016,03,27t01,58,00,01,00,tz,assert,that,rounding,round,time,2016,03,27t03,05,00,02,00,is,date,time,2016,03,27t03,00,00,02,00,tz,assert,that,rounding,round,time,2016,03,27t03,12,00,02,00,is,date,time,2016,03,27t03,08,00,02,00,tz,assert,that,rounding,round,time,2016,03,27t03,25,00,02,00,is,date,time,2016,03,27t03,22,00,02,00,tz,assert,that,rounding,round,time,2016,03,27t03,39,00,02,00,is,date,time,2016,03,27t03,36,00,02,00,tz
RoundingTests -> public void testIntervalRounding_NotDivisibleInteval();1548236405;Special test for intervals that don't fit evenly into rounding interval._In this case, when interval crosses DST transition point, rounding in local_time can land in a DST gap which results in wrong UTC rounding values.;public void testIntervalRounding_NotDivisibleInteval() {_        long interval = TimeUnit.MINUTES.toMillis(14)__        ZoneId tz = ZoneId.of("CET")__        Rounding rounding = new Rounding.TimeIntervalRounding(interval, tz)___        assertThat(rounding.round(time("2016-03-27T01:41:00+01:00")), isDate(time("2016-03-27T01:30:00+01:00"), tz))__        assertThat(rounding.round(time("2016-03-27T01:51:00+01:00")), isDate(time("2016-03-27T01:44:00+01:00"), tz))__        assertThat(rounding.round(time("2016-03-27T01:59:00+01:00")), isDate(time("2016-03-27T01:58:00+01:00"), tz))__        assertThat(rounding.round(time("2016-03-27T03:05:00+02:00")), isDate(time("2016-03-27T03:00:00+02:00"), tz))__        assertThat(rounding.round(time("2016-03-27T03:12:00+02:00")), isDate(time("2016-03-27T03:08:00+02:00"), tz))__        assertThat(rounding.round(time("2016-03-27T03:25:00+02:00")), isDate(time("2016-03-27T03:22:00+02:00"), tz))__        assertThat(rounding.round(time("2016-03-27T03:39:00+02:00")), isDate(time("2016-03-27T03:36:00+02:00"), tz))__    };special,test,for,intervals,that,don,t,fit,evenly,into,rounding,interval,in,this,case,when,interval,crosses,dst,transition,point,rounding,in,local,time,can,land,in,a,dst,gap,which,results,in,wrong,utc,rounding,values;public,void,long,interval,time,unit,minutes,to,millis,14,zone,id,tz,zone,id,of,cet,rounding,rounding,new,rounding,time,interval,rounding,interval,tz,assert,that,rounding,round,time,2016,03,27t01,41,00,01,00,is,date,time,2016,03,27t01,30,00,01,00,tz,assert,that,rounding,round,time,2016,03,27t01,51,00,01,00,is,date,time,2016,03,27t01,44,00,01,00,tz,assert,that,rounding,round,time,2016,03,27t01,59,00,01,00,is,date,time,2016,03,27t01,58,00,01,00,tz,assert,that,rounding,round,time,2016,03,27t03,05,00,02,00,is,date,time,2016,03,27t03,00,00,02,00,tz,assert,that,rounding,round,time,2016,03,27t03,12,00,02,00,is,date,time,2016,03,27t03,08,00,02,00,tz,assert,that,rounding,round,time,2016,03,27t03,25,00,02,00,is,date,time,2016,03,27t03,22,00,02,00,tz,assert,that,rounding,round,time,2016,03,27t03,39,00,02,00,is,date,time,2016,03,27t03,36,00,02,00,tz
RoundingTests -> public void testIntervalRounding_NotDivisibleInteval();1548921340;Special test for intervals that don't fit evenly into rounding interval._In this case, when interval crosses DST transition point, rounding in local_time can land in a DST gap which results in wrong UTC rounding values.;public void testIntervalRounding_NotDivisibleInteval() {_        long interval = TimeUnit.MINUTES.toMillis(14)__        ZoneId tz = ZoneId.of("CET")__        Rounding rounding = new Rounding.TimeIntervalRounding(interval, tz)___        assertThat(rounding.round(time("2016-03-27T01:41:00+01:00")), isDate(time("2016-03-27T01:30:00+01:00"), tz))__        assertThat(rounding.round(time("2016-03-27T01:51:00+01:00")), isDate(time("2016-03-27T01:44:00+01:00"), tz))__        assertThat(rounding.round(time("2016-03-27T01:59:00+01:00")), isDate(time("2016-03-27T01:58:00+01:00"), tz))__        assertThat(rounding.round(time("2016-03-27T03:05:00+02:00")), isDate(time("2016-03-27T03:00:00+02:00"), tz))__        assertThat(rounding.round(time("2016-03-27T03:12:00+02:00")), isDate(time("2016-03-27T03:08:00+02:00"), tz))__        assertThat(rounding.round(time("2016-03-27T03:25:00+02:00")), isDate(time("2016-03-27T03:22:00+02:00"), tz))__        assertThat(rounding.round(time("2016-03-27T03:39:00+02:00")), isDate(time("2016-03-27T03:36:00+02:00"), tz))__    };special,test,for,intervals,that,don,t,fit,evenly,into,rounding,interval,in,this,case,when,interval,crosses,dst,transition,point,rounding,in,local,time,can,land,in,a,dst,gap,which,results,in,wrong,utc,rounding,values;public,void,long,interval,time,unit,minutes,to,millis,14,zone,id,tz,zone,id,of,cet,rounding,rounding,new,rounding,time,interval,rounding,interval,tz,assert,that,rounding,round,time,2016,03,27t01,41,00,01,00,is,date,time,2016,03,27t01,30,00,01,00,tz,assert,that,rounding,round,time,2016,03,27t01,51,00,01,00,is,date,time,2016,03,27t01,44,00,01,00,tz,assert,that,rounding,round,time,2016,03,27t01,59,00,01,00,is,date,time,2016,03,27t01,58,00,01,00,tz,assert,that,rounding,round,time,2016,03,27t03,05,00,02,00,is,date,time,2016,03,27t03,00,00,02,00,tz,assert,that,rounding,round,time,2016,03,27t03,12,00,02,00,is,date,time,2016,03,27t03,08,00,02,00,tz,assert,that,rounding,round,time,2016,03,27t03,25,00,02,00,is,date,time,2016,03,27t03,22,00,02,00,tz,assert,that,rounding,round,time,2016,03,27t03,39,00,02,00,is,date,time,2016,03,27t03,36,00,02,00,tz
RoundingTests -> public void testIntervalRounding_NotDivisibleInteval();1549876539;Special test for intervals that don't fit evenly into rounding interval._In this case, when interval crosses DST transition point, rounding in local_time can land in a DST gap which results in wrong UTC rounding values.;public void testIntervalRounding_NotDivisibleInteval() {_        long interval = TimeUnit.MINUTES.toMillis(14)__        ZoneId tz = ZoneId.of("CET")__        Rounding rounding = new Rounding.TimeIntervalRounding(interval, tz)___        assertThat(rounding.round(time("2016-03-27T01:41:00+01:00")), isDate(time("2016-03-27T01:30:00+01:00"), tz))__        assertThat(rounding.round(time("2016-03-27T01:51:00+01:00")), isDate(time("2016-03-27T01:44:00+01:00"), tz))__        assertThat(rounding.round(time("2016-03-27T01:59:00+01:00")), isDate(time("2016-03-27T01:58:00+01:00"), tz))__        assertThat(rounding.round(time("2016-03-27T03:05:00+02:00")), isDate(time("2016-03-27T03:00:00+02:00"), tz))__        assertThat(rounding.round(time("2016-03-27T03:12:00+02:00")), isDate(time("2016-03-27T03:08:00+02:00"), tz))__        assertThat(rounding.round(time("2016-03-27T03:25:00+02:00")), isDate(time("2016-03-27T03:22:00+02:00"), tz))__        assertThat(rounding.round(time("2016-03-27T03:39:00+02:00")), isDate(time("2016-03-27T03:36:00+02:00"), tz))__    };special,test,for,intervals,that,don,t,fit,evenly,into,rounding,interval,in,this,case,when,interval,crosses,dst,transition,point,rounding,in,local,time,can,land,in,a,dst,gap,which,results,in,wrong,utc,rounding,values;public,void,long,interval,time,unit,minutes,to,millis,14,zone,id,tz,zone,id,of,cet,rounding,rounding,new,rounding,time,interval,rounding,interval,tz,assert,that,rounding,round,time,2016,03,27t01,41,00,01,00,is,date,time,2016,03,27t01,30,00,01,00,tz,assert,that,rounding,round,time,2016,03,27t01,51,00,01,00,is,date,time,2016,03,27t01,44,00,01,00,tz,assert,that,rounding,round,time,2016,03,27t01,59,00,01,00,is,date,time,2016,03,27t01,58,00,01,00,tz,assert,that,rounding,round,time,2016,03,27t03,05,00,02,00,is,date,time,2016,03,27t03,00,00,02,00,tz,assert,that,rounding,round,time,2016,03,27t03,12,00,02,00,is,date,time,2016,03,27t03,08,00,02,00,tz,assert,that,rounding,round,time,2016,03,27t03,25,00,02,00,is,date,time,2016,03,27t03,22,00,02,00,tz,assert,that,rounding,round,time,2016,03,27t03,39,00,02,00,is,date,time,2016,03,27t03,36,00,02,00,tz
RoundingTests -> public void testIntervalRoundingMonotonic_CET();1534248446;Test that rounded values are always greater or equal to last rounded value if date is increasing._The example covers an interval around 2011-10-30T02:10:00+01:00, time zone CET, interval: 2700000ms;public void testIntervalRoundingMonotonic_CET() {_        long interval = TimeUnit.MINUTES.toMillis(45)__        ZoneId tz = ZoneId.of("CET")__        Rounding rounding = new Rounding.TimeIntervalRounding(interval, tz)__        List<Tuple<String, String>> expectedDates = new ArrayList<>()__        _        expectedDates.add(new Tuple<>("2011-10-30T01:40:00.000+02:00", "2011-10-30T01:30:00.000+02:00"))__        expectedDates.add(new Tuple<>("2011-10-30T02:02:30.000+02:00", "2011-10-30T01:30:00.000+02:00"))__        expectedDates.add(new Tuple<>("2011-10-30T02:25:00.000+02:00", "2011-10-30T02:15:00.000+02:00"))__        expectedDates.add(new Tuple<>("2011-10-30T02:47:30.000+02:00", "2011-10-30T02:15:00.000+02:00"))__        expectedDates.add(new Tuple<>("2011-10-30T02:10:00.000+01:00", "2011-10-30T02:15:00.000+02:00"))__        expectedDates.add(new Tuple<>("2011-10-30T02:32:30.000+01:00", "2011-10-30T02:15:00.000+01:00"))__        expectedDates.add(new Tuple<>("2011-10-30T02:55:00.000+01:00", "2011-10-30T02:15:00.000+01:00"))__        expectedDates.add(new Tuple<>("2011-10-30T03:17:30.000+01:00", "2011-10-30T03:00:00.000+01:00"))___        long previousDate = Long.MIN_VALUE__        for (Tuple<String, String> dates : expectedDates) {_            final long roundedDate = rounding.round(time(dates.v1()))__            assertThat(dates.toString(), roundedDate, isDate(time(dates.v2()), tz))__            assertThat(dates.toString(), roundedDate, greaterThanOrEqualTo(previousDate))__            previousDate = roundedDate__        }_        _        assertEquals(TimeUnit.MINUTES.toMillis(45), time("2011-10-30T02:15:00.000+02:00") - time("2011-10-30T01:30:00.000+02:00"))__        assertEquals(TimeUnit.MINUTES.toMillis(60), time("2011-10-30T02:15:00.000+01:00") - time("2011-10-30T02:15:00.000+02:00"))__        assertEquals(TimeUnit.MINUTES.toMillis(45), time("2011-10-30T03:00:00.000+01:00") - time("2011-10-30T02:15:00.000+01:00"))__    };test,that,rounded,values,are,always,greater,or,equal,to,last,rounded,value,if,date,is,increasing,the,example,covers,an,interval,around,2011,10,30t02,10,00,01,00,time,zone,cet,interval,2700000ms;public,void,long,interval,time,unit,minutes,to,millis,45,zone,id,tz,zone,id,of,cet,rounding,rounding,new,rounding,time,interval,rounding,interval,tz,list,tuple,string,string,expected,dates,new,array,list,expected,dates,add,new,tuple,2011,10,30t01,40,00,000,02,00,2011,10,30t01,30,00,000,02,00,expected,dates,add,new,tuple,2011,10,30t02,02,30,000,02,00,2011,10,30t01,30,00,000,02,00,expected,dates,add,new,tuple,2011,10,30t02,25,00,000,02,00,2011,10,30t02,15,00,000,02,00,expected,dates,add,new,tuple,2011,10,30t02,47,30,000,02,00,2011,10,30t02,15,00,000,02,00,expected,dates,add,new,tuple,2011,10,30t02,10,00,000,01,00,2011,10,30t02,15,00,000,02,00,expected,dates,add,new,tuple,2011,10,30t02,32,30,000,01,00,2011,10,30t02,15,00,000,01,00,expected,dates,add,new,tuple,2011,10,30t02,55,00,000,01,00,2011,10,30t02,15,00,000,01,00,expected,dates,add,new,tuple,2011,10,30t03,17,30,000,01,00,2011,10,30t03,00,00,000,01,00,long,previous,date,long,for,tuple,string,string,dates,expected,dates,final,long,rounded,date,rounding,round,time,dates,v1,assert,that,dates,to,string,rounded,date,is,date,time,dates,v2,tz,assert,that,dates,to,string,rounded,date,greater,than,or,equal,to,previous,date,previous,date,rounded,date,assert,equals,time,unit,minutes,to,millis,45,time,2011,10,30t02,15,00,000,02,00,time,2011,10,30t01,30,00,000,02,00,assert,equals,time,unit,minutes,to,millis,60,time,2011,10,30t02,15,00,000,01,00,time,2011,10,30t02,15,00,000,02,00,assert,equals,time,unit,minutes,to,millis,45,time,2011,10,30t03,00,00,000,01,00,time,2011,10,30t02,15,00,000,01,00
RoundingTests -> public void testIntervalRoundingMonotonic_CET();1548236405;Test that rounded values are always greater or equal to last rounded value if date is increasing._The example covers an interval around 2011-10-30T02:10:00+01:00, time zone CET, interval: 2700000ms;public void testIntervalRoundingMonotonic_CET() {_        long interval = TimeUnit.MINUTES.toMillis(45)__        ZoneId tz = ZoneId.of("CET")__        Rounding rounding = new Rounding.TimeIntervalRounding(interval, tz)__        List<Tuple<String, String>> expectedDates = new ArrayList<>()__        _        expectedDates.add(new Tuple<>("2011-10-30T01:40:00.000+02:00", "2011-10-30T01:30:00.000+02:00"))__        expectedDates.add(new Tuple<>("2011-10-30T02:02:30.000+02:00", "2011-10-30T01:30:00.000+02:00"))__        expectedDates.add(new Tuple<>("2011-10-30T02:25:00.000+02:00", "2011-10-30T02:15:00.000+02:00"))__        expectedDates.add(new Tuple<>("2011-10-30T02:47:30.000+02:00", "2011-10-30T02:15:00.000+02:00"))__        expectedDates.add(new Tuple<>("2011-10-30T02:10:00.000+01:00", "2011-10-30T02:15:00.000+02:00"))__        expectedDates.add(new Tuple<>("2011-10-30T02:32:30.000+01:00", "2011-10-30T02:15:00.000+01:00"))__        expectedDates.add(new Tuple<>("2011-10-30T02:55:00.000+01:00", "2011-10-30T02:15:00.000+01:00"))__        expectedDates.add(new Tuple<>("2011-10-30T03:17:30.000+01:00", "2011-10-30T03:00:00.000+01:00"))___        long previousDate = Long.MIN_VALUE__        for (Tuple<String, String> dates : expectedDates) {_            final long roundedDate = rounding.round(time(dates.v1()))__            assertThat(dates.toString(), roundedDate, isDate(time(dates.v2()), tz))__            assertThat(dates.toString(), roundedDate, greaterThanOrEqualTo(previousDate))__            previousDate = roundedDate__        }_        _        assertEquals(TimeUnit.MINUTES.toMillis(45), time("2011-10-30T02:15:00.000+02:00") - time("2011-10-30T01:30:00.000+02:00"))__        assertEquals(TimeUnit.MINUTES.toMillis(60), time("2011-10-30T02:15:00.000+01:00") - time("2011-10-30T02:15:00.000+02:00"))__        assertEquals(TimeUnit.MINUTES.toMillis(45), time("2011-10-30T03:00:00.000+01:00") - time("2011-10-30T02:15:00.000+01:00"))__    };test,that,rounded,values,are,always,greater,or,equal,to,last,rounded,value,if,date,is,increasing,the,example,covers,an,interval,around,2011,10,30t02,10,00,01,00,time,zone,cet,interval,2700000ms;public,void,long,interval,time,unit,minutes,to,millis,45,zone,id,tz,zone,id,of,cet,rounding,rounding,new,rounding,time,interval,rounding,interval,tz,list,tuple,string,string,expected,dates,new,array,list,expected,dates,add,new,tuple,2011,10,30t01,40,00,000,02,00,2011,10,30t01,30,00,000,02,00,expected,dates,add,new,tuple,2011,10,30t02,02,30,000,02,00,2011,10,30t01,30,00,000,02,00,expected,dates,add,new,tuple,2011,10,30t02,25,00,000,02,00,2011,10,30t02,15,00,000,02,00,expected,dates,add,new,tuple,2011,10,30t02,47,30,000,02,00,2011,10,30t02,15,00,000,02,00,expected,dates,add,new,tuple,2011,10,30t02,10,00,000,01,00,2011,10,30t02,15,00,000,02,00,expected,dates,add,new,tuple,2011,10,30t02,32,30,000,01,00,2011,10,30t02,15,00,000,01,00,expected,dates,add,new,tuple,2011,10,30t02,55,00,000,01,00,2011,10,30t02,15,00,000,01,00,expected,dates,add,new,tuple,2011,10,30t03,17,30,000,01,00,2011,10,30t03,00,00,000,01,00,long,previous,date,long,for,tuple,string,string,dates,expected,dates,final,long,rounded,date,rounding,round,time,dates,v1,assert,that,dates,to,string,rounded,date,is,date,time,dates,v2,tz,assert,that,dates,to,string,rounded,date,greater,than,or,equal,to,previous,date,previous,date,rounded,date,assert,equals,time,unit,minutes,to,millis,45,time,2011,10,30t02,15,00,000,02,00,time,2011,10,30t01,30,00,000,02,00,assert,equals,time,unit,minutes,to,millis,60,time,2011,10,30t02,15,00,000,01,00,time,2011,10,30t02,15,00,000,02,00,assert,equals,time,unit,minutes,to,millis,45,time,2011,10,30t03,00,00,000,01,00,time,2011,10,30t02,15,00,000,01,00
RoundingTests -> public void testIntervalRoundingMonotonic_CET();1548921340;Test that rounded values are always greater or equal to last rounded value if date is increasing._The example covers an interval around 2011-10-30T02:10:00+01:00, time zone CET, interval: 2700000ms;public void testIntervalRoundingMonotonic_CET() {_        long interval = TimeUnit.MINUTES.toMillis(45)__        ZoneId tz = ZoneId.of("CET")__        Rounding rounding = new Rounding.TimeIntervalRounding(interval, tz)__        List<Tuple<String, String>> expectedDates = new ArrayList<>()__        _        expectedDates.add(new Tuple<>("2011-10-30T01:40:00.000+02:00", "2011-10-30T01:30:00.000+02:00"))__        expectedDates.add(new Tuple<>("2011-10-30T02:02:30.000+02:00", "2011-10-30T01:30:00.000+02:00"))__        expectedDates.add(new Tuple<>("2011-10-30T02:25:00.000+02:00", "2011-10-30T02:15:00.000+02:00"))__        expectedDates.add(new Tuple<>("2011-10-30T02:47:30.000+02:00", "2011-10-30T02:15:00.000+02:00"))__        expectedDates.add(new Tuple<>("2011-10-30T02:10:00.000+01:00", "2011-10-30T02:15:00.000+02:00"))__        expectedDates.add(new Tuple<>("2011-10-30T02:32:30.000+01:00", "2011-10-30T02:15:00.000+01:00"))__        expectedDates.add(new Tuple<>("2011-10-30T02:55:00.000+01:00", "2011-10-30T02:15:00.000+01:00"))__        expectedDates.add(new Tuple<>("2011-10-30T03:17:30.000+01:00", "2011-10-30T03:00:00.000+01:00"))___        long previousDate = Long.MIN_VALUE__        for (Tuple<String, String> dates : expectedDates) {_            final long roundedDate = rounding.round(time(dates.v1()))__            assertThat(dates.toString(), roundedDate, isDate(time(dates.v2()), tz))__            assertThat(dates.toString(), roundedDate, greaterThanOrEqualTo(previousDate))__            previousDate = roundedDate__        }_        _        assertEquals(TimeUnit.MINUTES.toMillis(45), time("2011-10-30T02:15:00.000+02:00") - time("2011-10-30T01:30:00.000+02:00"))__        assertEquals(TimeUnit.MINUTES.toMillis(60), time("2011-10-30T02:15:00.000+01:00") - time("2011-10-30T02:15:00.000+02:00"))__        assertEquals(TimeUnit.MINUTES.toMillis(45), time("2011-10-30T03:00:00.000+01:00") - time("2011-10-30T02:15:00.000+01:00"))__    };test,that,rounded,values,are,always,greater,or,equal,to,last,rounded,value,if,date,is,increasing,the,example,covers,an,interval,around,2011,10,30t02,10,00,01,00,time,zone,cet,interval,2700000ms;public,void,long,interval,time,unit,minutes,to,millis,45,zone,id,tz,zone,id,of,cet,rounding,rounding,new,rounding,time,interval,rounding,interval,tz,list,tuple,string,string,expected,dates,new,array,list,expected,dates,add,new,tuple,2011,10,30t01,40,00,000,02,00,2011,10,30t01,30,00,000,02,00,expected,dates,add,new,tuple,2011,10,30t02,02,30,000,02,00,2011,10,30t01,30,00,000,02,00,expected,dates,add,new,tuple,2011,10,30t02,25,00,000,02,00,2011,10,30t02,15,00,000,02,00,expected,dates,add,new,tuple,2011,10,30t02,47,30,000,02,00,2011,10,30t02,15,00,000,02,00,expected,dates,add,new,tuple,2011,10,30t02,10,00,000,01,00,2011,10,30t02,15,00,000,02,00,expected,dates,add,new,tuple,2011,10,30t02,32,30,000,01,00,2011,10,30t02,15,00,000,01,00,expected,dates,add,new,tuple,2011,10,30t02,55,00,000,01,00,2011,10,30t02,15,00,000,01,00,expected,dates,add,new,tuple,2011,10,30t03,17,30,000,01,00,2011,10,30t03,00,00,000,01,00,long,previous,date,long,for,tuple,string,string,dates,expected,dates,final,long,rounded,date,rounding,round,time,dates,v1,assert,that,dates,to,string,rounded,date,is,date,time,dates,v2,tz,assert,that,dates,to,string,rounded,date,greater,than,or,equal,to,previous,date,previous,date,rounded,date,assert,equals,time,unit,minutes,to,millis,45,time,2011,10,30t02,15,00,000,02,00,time,2011,10,30t01,30,00,000,02,00,assert,equals,time,unit,minutes,to,millis,60,time,2011,10,30t02,15,00,000,01,00,time,2011,10,30t02,15,00,000,02,00,assert,equals,time,unit,minutes,to,millis,45,time,2011,10,30t03,00,00,000,01,00,time,2011,10,30t02,15,00,000,01,00
RoundingTests -> public void testIntervalRoundingMonotonic_CET();1549876539;Test that rounded values are always greater or equal to last rounded value if date is increasing._The example covers an interval around 2011-10-30T02:10:00+01:00, time zone CET, interval: 2700000ms;public void testIntervalRoundingMonotonic_CET() {_        long interval = TimeUnit.MINUTES.toMillis(45)__        ZoneId tz = ZoneId.of("CET")__        Rounding rounding = new Rounding.TimeIntervalRounding(interval, tz)__        List<Tuple<String, String>> expectedDates = new ArrayList<>()__        _        expectedDates.add(new Tuple<>("2011-10-30T01:40:00.000+02:00", "2011-10-30T01:30:00.000+02:00"))__        expectedDates.add(new Tuple<>("2011-10-30T02:02:30.000+02:00", "2011-10-30T01:30:00.000+02:00"))__        expectedDates.add(new Tuple<>("2011-10-30T02:25:00.000+02:00", "2011-10-30T02:15:00.000+02:00"))__        expectedDates.add(new Tuple<>("2011-10-30T02:47:30.000+02:00", "2011-10-30T02:15:00.000+02:00"))__        expectedDates.add(new Tuple<>("2011-10-30T02:10:00.000+01:00", "2011-10-30T02:15:00.000+02:00"))__        expectedDates.add(new Tuple<>("2011-10-30T02:32:30.000+01:00", "2011-10-30T02:15:00.000+01:00"))__        expectedDates.add(new Tuple<>("2011-10-30T02:55:00.000+01:00", "2011-10-30T02:15:00.000+01:00"))__        expectedDates.add(new Tuple<>("2011-10-30T03:17:30.000+01:00", "2011-10-30T03:00:00.000+01:00"))___        long previousDate = Long.MIN_VALUE__        for (Tuple<String, String> dates : expectedDates) {_            final long roundedDate = rounding.round(time(dates.v1()))__            assertThat(dates.toString(), roundedDate, isDate(time(dates.v2()), tz))__            assertThat(dates.toString(), roundedDate, greaterThanOrEqualTo(previousDate))__            previousDate = roundedDate__        }_        _        assertEquals(TimeUnit.MINUTES.toMillis(45), time("2011-10-30T02:15:00.000+02:00") - time("2011-10-30T01:30:00.000+02:00"))__        assertEquals(TimeUnit.MINUTES.toMillis(60), time("2011-10-30T02:15:00.000+01:00") - time("2011-10-30T02:15:00.000+02:00"))__        assertEquals(TimeUnit.MINUTES.toMillis(45), time("2011-10-30T03:00:00.000+01:00") - time("2011-10-30T02:15:00.000+01:00"))__    };test,that,rounded,values,are,always,greater,or,equal,to,last,rounded,value,if,date,is,increasing,the,example,covers,an,interval,around,2011,10,30t02,10,00,01,00,time,zone,cet,interval,2700000ms;public,void,long,interval,time,unit,minutes,to,millis,45,zone,id,tz,zone,id,of,cet,rounding,rounding,new,rounding,time,interval,rounding,interval,tz,list,tuple,string,string,expected,dates,new,array,list,expected,dates,add,new,tuple,2011,10,30t01,40,00,000,02,00,2011,10,30t01,30,00,000,02,00,expected,dates,add,new,tuple,2011,10,30t02,02,30,000,02,00,2011,10,30t01,30,00,000,02,00,expected,dates,add,new,tuple,2011,10,30t02,25,00,000,02,00,2011,10,30t02,15,00,000,02,00,expected,dates,add,new,tuple,2011,10,30t02,47,30,000,02,00,2011,10,30t02,15,00,000,02,00,expected,dates,add,new,tuple,2011,10,30t02,10,00,000,01,00,2011,10,30t02,15,00,000,02,00,expected,dates,add,new,tuple,2011,10,30t02,32,30,000,01,00,2011,10,30t02,15,00,000,01,00,expected,dates,add,new,tuple,2011,10,30t02,55,00,000,01,00,2011,10,30t02,15,00,000,01,00,expected,dates,add,new,tuple,2011,10,30t03,17,30,000,01,00,2011,10,30t03,00,00,000,01,00,long,previous,date,long,for,tuple,string,string,dates,expected,dates,final,long,rounded,date,rounding,round,time,dates,v1,assert,that,dates,to,string,rounded,date,is,date,time,dates,v2,tz,assert,that,dates,to,string,rounded,date,greater,than,or,equal,to,previous,date,previous,date,rounded,date,assert,equals,time,unit,minutes,to,millis,45,time,2011,10,30t02,15,00,000,02,00,time,2011,10,30t01,30,00,000,02,00,assert,equals,time,unit,minutes,to,millis,60,time,2011,10,30t02,15,00,000,01,00,time,2011,10,30t02,15,00,000,02,00,assert,equals,time,unit,minutes,to,millis,45,time,2011,10,30t03,00,00,000,01,00,time,2011,10,30t02,15,00,000,01,00
RoundingTests -> public void testLenientConversionDST();1534248446;test for #10025, strict local to UTC conversion can cause joda exceptions_on DST start;public void testLenientConversionDST() {_        ZoneId tz = ZoneId.of("America/Sao_Paulo")___        long start = time("2014-10-18T20:50:00.000", tz)__        long end = time("2014-10-19T01:00:00.000", tz)__        Rounding tzRounding = new Rounding.TimeUnitRounding(Rounding.DateTimeUnit.MINUTES_OF_HOUR, tz)__        Rounding dayTzRounding = new Rounding.TimeIntervalRounding(60000, tz)__        for (long time = start_ time < end_ time = time + 60000) {_            assertThat(tzRounding.nextRoundingValue(time), greaterThan(time))__            assertThat(dayTzRounding.nextRoundingValue(time), greaterThan(time))__        }_    };test,for,10025,strict,local,to,utc,conversion,can,cause,joda,exceptions,on,dst,start;public,void,test,lenient,conversion,dst,zone,id,tz,zone,id,of,america,long,start,time,2014,10,18t20,50,00,000,tz,long,end,time,2014,10,19t01,00,00,000,tz,rounding,tz,rounding,new,rounding,time,unit,rounding,rounding,date,time,unit,tz,rounding,day,tz,rounding,new,rounding,time,interval,rounding,60000,tz,for,long,time,start,time,end,time,time,60000,assert,that,tz,rounding,next,rounding,value,time,greater,than,time,assert,that,day,tz,rounding,next,rounding,value,time,greater,than,time
RoundingTests -> public void testLenientConversionDST();1548236405;test for #10025, strict local to UTC conversion can cause joda exceptions_on DST start;public void testLenientConversionDST() {_        ZoneId tz = ZoneId.of("America/Sao_Paulo")___        long start = time("2014-10-18T20:50:00.000", tz)__        long end = time("2014-10-19T01:00:00.000", tz)__        Rounding tzRounding = new Rounding.TimeUnitRounding(Rounding.DateTimeUnit.MINUTES_OF_HOUR, tz)__        Rounding dayTzRounding = new Rounding.TimeIntervalRounding(60000, tz)__        for (long time = start_ time < end_ time = time + 60000) {_            assertThat(tzRounding.nextRoundingValue(time), greaterThan(time))__            assertThat(dayTzRounding.nextRoundingValue(time), greaterThan(time))__        }_    };test,for,10025,strict,local,to,utc,conversion,can,cause,joda,exceptions,on,dst,start;public,void,test,lenient,conversion,dst,zone,id,tz,zone,id,of,america,long,start,time,2014,10,18t20,50,00,000,tz,long,end,time,2014,10,19t01,00,00,000,tz,rounding,tz,rounding,new,rounding,time,unit,rounding,rounding,date,time,unit,tz,rounding,day,tz,rounding,new,rounding,time,interval,rounding,60000,tz,for,long,time,start,time,end,time,time,60000,assert,that,tz,rounding,next,rounding,value,time,greater,than,time,assert,that,day,tz,rounding,next,rounding,value,time,greater,than,time
RoundingTests -> public void testLenientConversionDST();1548921340;test for #10025, strict local to UTC conversion can cause joda exceptions_on DST start;public void testLenientConversionDST() {_        ZoneId tz = ZoneId.of("America/Sao_Paulo")___        long start = time("2014-10-18T20:50:00.000", tz)__        long end = time("2014-10-19T01:00:00.000", tz)__        Rounding tzRounding = new Rounding.TimeUnitRounding(Rounding.DateTimeUnit.MINUTES_OF_HOUR, tz)__        Rounding dayTzRounding = new Rounding.TimeIntervalRounding(60000, tz)__        for (long time = start_ time < end_ time = time + 60000) {_            assertThat(tzRounding.nextRoundingValue(time), greaterThan(time))__            assertThat(dayTzRounding.nextRoundingValue(time), greaterThan(time))__        }_    };test,for,10025,strict,local,to,utc,conversion,can,cause,joda,exceptions,on,dst,start;public,void,test,lenient,conversion,dst,zone,id,tz,zone,id,of,america,long,start,time,2014,10,18t20,50,00,000,tz,long,end,time,2014,10,19t01,00,00,000,tz,rounding,tz,rounding,new,rounding,time,unit,rounding,rounding,date,time,unit,tz,rounding,day,tz,rounding,new,rounding,time,interval,rounding,60000,tz,for,long,time,start,time,end,time,time,60000,assert,that,tz,rounding,next,rounding,value,time,greater,than,time,assert,that,day,tz,rounding,next,rounding,value,time,greater,than,time
RoundingTests -> public void testLenientConversionDST();1549876539;test for #10025, strict local to UTC conversion can cause joda exceptions_on DST start;public void testLenientConversionDST() {_        ZoneId tz = ZoneId.of("America/Sao_Paulo")___        long start = time("2014-10-18T20:50:00.000", tz)__        long end = time("2014-10-19T01:00:00.000", tz)__        Rounding tzRounding = new Rounding.TimeUnitRounding(Rounding.DateTimeUnit.MINUTES_OF_HOUR, tz)__        Rounding dayTzRounding = new Rounding.TimeIntervalRounding(60000, tz)__        for (long time = start_ time < end_ time = time + 60000) {_            assertThat(tzRounding.nextRoundingValue(time), greaterThan(time))__            assertThat(dayTzRounding.nextRoundingValue(time), greaterThan(time))__        }_    };test,for,10025,strict,local,to,utc,conversion,can,cause,joda,exceptions,on,dst,start;public,void,test,lenient,conversion,dst,zone,id,tz,zone,id,of,america,long,start,time,2014,10,18t20,50,00,000,tz,long,end,time,2014,10,19t01,00,00,000,tz,rounding,tz,rounding,new,rounding,time,unit,rounding,rounding,date,time,unit,tz,rounding,day,tz,rounding,new,rounding,time,interval,rounding,60000,tz,for,long,time,start,time,end,time,time,60000,assert,that,tz,rounding,next,rounding,value,time,greater,than,time,assert,that,day,tz,rounding,next,rounding,value,time,greater,than,time
RoundingTests -> public void testTimeIntervalCET_DST_Start();1534248446;test DST start with interval rounding_CET: 27 March 2016, 02:00:00 clocks were turned forward 1 hour to 27 March 2016, 03:00:00 local daylight time;public void testTimeIntervalCET_DST_Start() {_        long interval = TimeUnit.MINUTES.toMillis(20)__        ZoneId tz = ZoneId.of("CET")__        Rounding rounding = new Rounding.TimeIntervalRounding(interval, tz)__        _        assertThat(rounding.round(time("2016-03-27T01:55:00+01:00")), isDate(time("2016-03-27T01:40:00+01:00"), tz))__        assertThat(rounding.round(time("2016-03-27T02:00:00+01:00")), isDate(time("2016-03-27T03:00:00+02:00"), tz))__        assertThat(rounding.round(time("2016-03-27T03:15:00+02:00")), isDate(time("2016-03-27T03:00:00+02:00"), tz))__        assertThat(rounding.round(time("2016-03-27T03:35:00+02:00")), isDate(time("2016-03-27T03:20:00+02:00"), tz))__    };test,dst,start,with,interval,rounding,cet,27,march,2016,02,00,00,clocks,were,turned,forward,1,hour,to,27,march,2016,03,00,00,local,daylight,time;public,void,long,interval,time,unit,minutes,to,millis,20,zone,id,tz,zone,id,of,cet,rounding,rounding,new,rounding,time,interval,rounding,interval,tz,assert,that,rounding,round,time,2016,03,27t01,55,00,01,00,is,date,time,2016,03,27t01,40,00,01,00,tz,assert,that,rounding,round,time,2016,03,27t02,00,00,01,00,is,date,time,2016,03,27t03,00,00,02,00,tz,assert,that,rounding,round,time,2016,03,27t03,15,00,02,00,is,date,time,2016,03,27t03,00,00,02,00,tz,assert,that,rounding,round,time,2016,03,27t03,35,00,02,00,is,date,time,2016,03,27t03,20,00,02,00,tz
RoundingTests -> public void testTimeIntervalCET_DST_Start();1548236405;test DST start with interval rounding_CET: 27 March 2016, 02:00:00 clocks were turned forward 1 hour to 27 March 2016, 03:00:00 local daylight time;public void testTimeIntervalCET_DST_Start() {_        long interval = TimeUnit.MINUTES.toMillis(20)__        ZoneId tz = ZoneId.of("CET")__        Rounding rounding = new Rounding.TimeIntervalRounding(interval, tz)__        _        assertThat(rounding.round(time("2016-03-27T01:55:00+01:00")), isDate(time("2016-03-27T01:40:00+01:00"), tz))__        assertThat(rounding.round(time("2016-03-27T02:00:00+01:00")), isDate(time("2016-03-27T03:00:00+02:00"), tz))__        assertThat(rounding.round(time("2016-03-27T03:15:00+02:00")), isDate(time("2016-03-27T03:00:00+02:00"), tz))__        assertThat(rounding.round(time("2016-03-27T03:35:00+02:00")), isDate(time("2016-03-27T03:20:00+02:00"), tz))__    };test,dst,start,with,interval,rounding,cet,27,march,2016,02,00,00,clocks,were,turned,forward,1,hour,to,27,march,2016,03,00,00,local,daylight,time;public,void,long,interval,time,unit,minutes,to,millis,20,zone,id,tz,zone,id,of,cet,rounding,rounding,new,rounding,time,interval,rounding,interval,tz,assert,that,rounding,round,time,2016,03,27t01,55,00,01,00,is,date,time,2016,03,27t01,40,00,01,00,tz,assert,that,rounding,round,time,2016,03,27t02,00,00,01,00,is,date,time,2016,03,27t03,00,00,02,00,tz,assert,that,rounding,round,time,2016,03,27t03,15,00,02,00,is,date,time,2016,03,27t03,00,00,02,00,tz,assert,that,rounding,round,time,2016,03,27t03,35,00,02,00,is,date,time,2016,03,27t03,20,00,02,00,tz
RoundingTests -> public void testTimeIntervalCET_DST_Start();1548921340;test DST start with interval rounding_CET: 27 March 2016, 02:00:00 clocks were turned forward 1 hour to 27 March 2016, 03:00:00 local daylight time;public void testTimeIntervalCET_DST_Start() {_        long interval = TimeUnit.MINUTES.toMillis(20)__        ZoneId tz = ZoneId.of("CET")__        Rounding rounding = new Rounding.TimeIntervalRounding(interval, tz)__        _        assertThat(rounding.round(time("2016-03-27T01:55:00+01:00")), isDate(time("2016-03-27T01:40:00+01:00"), tz))__        assertThat(rounding.round(time("2016-03-27T02:00:00+01:00")), isDate(time("2016-03-27T03:00:00+02:00"), tz))__        assertThat(rounding.round(time("2016-03-27T03:15:00+02:00")), isDate(time("2016-03-27T03:00:00+02:00"), tz))__        assertThat(rounding.round(time("2016-03-27T03:35:00+02:00")), isDate(time("2016-03-27T03:20:00+02:00"), tz))__    };test,dst,start,with,interval,rounding,cet,27,march,2016,02,00,00,clocks,were,turned,forward,1,hour,to,27,march,2016,03,00,00,local,daylight,time;public,void,long,interval,time,unit,minutes,to,millis,20,zone,id,tz,zone,id,of,cet,rounding,rounding,new,rounding,time,interval,rounding,interval,tz,assert,that,rounding,round,time,2016,03,27t01,55,00,01,00,is,date,time,2016,03,27t01,40,00,01,00,tz,assert,that,rounding,round,time,2016,03,27t02,00,00,01,00,is,date,time,2016,03,27t03,00,00,02,00,tz,assert,that,rounding,round,time,2016,03,27t03,15,00,02,00,is,date,time,2016,03,27t03,00,00,02,00,tz,assert,that,rounding,round,time,2016,03,27t03,35,00,02,00,is,date,time,2016,03,27t03,20,00,02,00,tz
RoundingTests -> public void testTimeIntervalCET_DST_Start();1549876539;test DST start with interval rounding_CET: 27 March 2016, 02:00:00 clocks were turned forward 1 hour to 27 March 2016, 03:00:00 local daylight time;public void testTimeIntervalCET_DST_Start() {_        long interval = TimeUnit.MINUTES.toMillis(20)__        ZoneId tz = ZoneId.of("CET")__        Rounding rounding = new Rounding.TimeIntervalRounding(interval, tz)__        _        assertThat(rounding.round(time("2016-03-27T01:55:00+01:00")), isDate(time("2016-03-27T01:40:00+01:00"), tz))__        assertThat(rounding.round(time("2016-03-27T02:00:00+01:00")), isDate(time("2016-03-27T03:00:00+02:00"), tz))__        assertThat(rounding.round(time("2016-03-27T03:15:00+02:00")), isDate(time("2016-03-27T03:00:00+02:00"), tz))__        assertThat(rounding.round(time("2016-03-27T03:35:00+02:00")), isDate(time("2016-03-27T03:20:00+02:00"), tz))__    };test,dst,start,with,interval,rounding,cet,27,march,2016,02,00,00,clocks,were,turned,forward,1,hour,to,27,march,2016,03,00,00,local,daylight,time;public,void,long,interval,time,unit,minutes,to,millis,20,zone,id,tz,zone,id,of,cet,rounding,rounding,new,rounding,time,interval,rounding,interval,tz,assert,that,rounding,round,time,2016,03,27t01,55,00,01,00,is,date,time,2016,03,27t01,40,00,01,00,tz,assert,that,rounding,round,time,2016,03,27t02,00,00,01,00,is,date,time,2016,03,27t03,00,00,02,00,tz,assert,that,rounding,round,time,2016,03,27t03,15,00,02,00,is,date,time,2016,03,27t03,00,00,02,00,tz,assert,that,rounding,round,time,2016,03,27t03,35,00,02,00,is,date,time,2016,03,27t03,20,00,02,00,tz
RoundingTests -> public void testTimeIntervalCET_DST_End();1534248446;test DST end with interval rounding_CET: 25 October 2015, 03:00:00 clocks were turned backward 1 hour to 25 October 2015, 02:00:00 local standard time;public void testTimeIntervalCET_DST_End() {_        long interval = TimeUnit.MINUTES.toMillis(20)__        ZoneId tz = ZoneId.of("CET")__        Rounding rounding = new Rounding.TimeIntervalRounding(interval, tz)___        assertThat(rounding.round(time("2015-10-25T01:55:00+02:00")), isDate(time("2015-10-25T01:40:00+02:00"), tz))__        assertThat(rounding.round(time("2015-10-25T02:15:00+02:00")), isDate(time("2015-10-25T02:00:00+02:00"), tz))__        assertThat(rounding.round(time("2015-10-25T02:35:00+02:00")), isDate(time("2015-10-25T02:20:00+02:00"), tz))__        assertThat(rounding.round(time("2015-10-25T02:55:00+02:00")), isDate(time("2015-10-25T02:40:00+02:00"), tz))__        _        assertThat(rounding.round(time("2015-10-25T02:15:00+01:00")), isDate(time("2015-10-25T02:00:00+01:00"), tz))__        assertThat(rounding.round(time("2015-10-25T02:35:00+01:00")), isDate(time("2015-10-25T02:20:00+01:00"), tz))__        assertThat(rounding.round(time("2015-10-25T02:55:00+01:00")), isDate(time("2015-10-25T02:40:00+01:00"), tz))__        assertThat(rounding.round(time("2015-10-25T03:15:00+01:00")), isDate(time("2015-10-25T03:00:00+01:00"), tz))__    };test,dst,end,with,interval,rounding,cet,25,october,2015,03,00,00,clocks,were,turned,backward,1,hour,to,25,october,2015,02,00,00,local,standard,time;public,void,long,interval,time,unit,minutes,to,millis,20,zone,id,tz,zone,id,of,cet,rounding,rounding,new,rounding,time,interval,rounding,interval,tz,assert,that,rounding,round,time,2015,10,25t01,55,00,02,00,is,date,time,2015,10,25t01,40,00,02,00,tz,assert,that,rounding,round,time,2015,10,25t02,15,00,02,00,is,date,time,2015,10,25t02,00,00,02,00,tz,assert,that,rounding,round,time,2015,10,25t02,35,00,02,00,is,date,time,2015,10,25t02,20,00,02,00,tz,assert,that,rounding,round,time,2015,10,25t02,55,00,02,00,is,date,time,2015,10,25t02,40,00,02,00,tz,assert,that,rounding,round,time,2015,10,25t02,15,00,01,00,is,date,time,2015,10,25t02,00,00,01,00,tz,assert,that,rounding,round,time,2015,10,25t02,35,00,01,00,is,date,time,2015,10,25t02,20,00,01,00,tz,assert,that,rounding,round,time,2015,10,25t02,55,00,01,00,is,date,time,2015,10,25t02,40,00,01,00,tz,assert,that,rounding,round,time,2015,10,25t03,15,00,01,00,is,date,time,2015,10,25t03,00,00,01,00,tz
RoundingTests -> public void testTimeIntervalCET_DST_End();1548236405;test DST end with interval rounding_CET: 25 October 2015, 03:00:00 clocks were turned backward 1 hour to 25 October 2015, 02:00:00 local standard time;public void testTimeIntervalCET_DST_End() {_        long interval = TimeUnit.MINUTES.toMillis(20)__        ZoneId tz = ZoneId.of("CET")__        Rounding rounding = new Rounding.TimeIntervalRounding(interval, tz)___        assertThat(rounding.round(time("2015-10-25T01:55:00+02:00")), isDate(time("2015-10-25T01:40:00+02:00"), tz))__        assertThat(rounding.round(time("2015-10-25T02:15:00+02:00")), isDate(time("2015-10-25T02:00:00+02:00"), tz))__        assertThat(rounding.round(time("2015-10-25T02:35:00+02:00")), isDate(time("2015-10-25T02:20:00+02:00"), tz))__        assertThat(rounding.round(time("2015-10-25T02:55:00+02:00")), isDate(time("2015-10-25T02:40:00+02:00"), tz))__        _        assertThat(rounding.round(time("2015-10-25T02:15:00+01:00")), isDate(time("2015-10-25T02:00:00+01:00"), tz))__        assertThat(rounding.round(time("2015-10-25T02:35:00+01:00")), isDate(time("2015-10-25T02:20:00+01:00"), tz))__        assertThat(rounding.round(time("2015-10-25T02:55:00+01:00")), isDate(time("2015-10-25T02:40:00+01:00"), tz))__        assertThat(rounding.round(time("2015-10-25T03:15:00+01:00")), isDate(time("2015-10-25T03:00:00+01:00"), tz))__    };test,dst,end,with,interval,rounding,cet,25,october,2015,03,00,00,clocks,were,turned,backward,1,hour,to,25,october,2015,02,00,00,local,standard,time;public,void,long,interval,time,unit,minutes,to,millis,20,zone,id,tz,zone,id,of,cet,rounding,rounding,new,rounding,time,interval,rounding,interval,tz,assert,that,rounding,round,time,2015,10,25t01,55,00,02,00,is,date,time,2015,10,25t01,40,00,02,00,tz,assert,that,rounding,round,time,2015,10,25t02,15,00,02,00,is,date,time,2015,10,25t02,00,00,02,00,tz,assert,that,rounding,round,time,2015,10,25t02,35,00,02,00,is,date,time,2015,10,25t02,20,00,02,00,tz,assert,that,rounding,round,time,2015,10,25t02,55,00,02,00,is,date,time,2015,10,25t02,40,00,02,00,tz,assert,that,rounding,round,time,2015,10,25t02,15,00,01,00,is,date,time,2015,10,25t02,00,00,01,00,tz,assert,that,rounding,round,time,2015,10,25t02,35,00,01,00,is,date,time,2015,10,25t02,20,00,01,00,tz,assert,that,rounding,round,time,2015,10,25t02,55,00,01,00,is,date,time,2015,10,25t02,40,00,01,00,tz,assert,that,rounding,round,time,2015,10,25t03,15,00,01,00,is,date,time,2015,10,25t03,00,00,01,00,tz
RoundingTests -> public void testTimeIntervalCET_DST_End();1548921340;test DST end with interval rounding_CET: 25 October 2015, 03:00:00 clocks were turned backward 1 hour to 25 October 2015, 02:00:00 local standard time;public void testTimeIntervalCET_DST_End() {_        long interval = TimeUnit.MINUTES.toMillis(20)__        ZoneId tz = ZoneId.of("CET")__        Rounding rounding = new Rounding.TimeIntervalRounding(interval, tz)___        assertThat(rounding.round(time("2015-10-25T01:55:00+02:00")), isDate(time("2015-10-25T01:40:00+02:00"), tz))__        assertThat(rounding.round(time("2015-10-25T02:15:00+02:00")), isDate(time("2015-10-25T02:00:00+02:00"), tz))__        assertThat(rounding.round(time("2015-10-25T02:35:00+02:00")), isDate(time("2015-10-25T02:20:00+02:00"), tz))__        assertThat(rounding.round(time("2015-10-25T02:55:00+02:00")), isDate(time("2015-10-25T02:40:00+02:00"), tz))__        _        assertThat(rounding.round(time("2015-10-25T02:15:00+01:00")), isDate(time("2015-10-25T02:00:00+01:00"), tz))__        assertThat(rounding.round(time("2015-10-25T02:35:00+01:00")), isDate(time("2015-10-25T02:20:00+01:00"), tz))__        assertThat(rounding.round(time("2015-10-25T02:55:00+01:00")), isDate(time("2015-10-25T02:40:00+01:00"), tz))__        assertThat(rounding.round(time("2015-10-25T03:15:00+01:00")), isDate(time("2015-10-25T03:00:00+01:00"), tz))__    };test,dst,end,with,interval,rounding,cet,25,october,2015,03,00,00,clocks,were,turned,backward,1,hour,to,25,october,2015,02,00,00,local,standard,time;public,void,long,interval,time,unit,minutes,to,millis,20,zone,id,tz,zone,id,of,cet,rounding,rounding,new,rounding,time,interval,rounding,interval,tz,assert,that,rounding,round,time,2015,10,25t01,55,00,02,00,is,date,time,2015,10,25t01,40,00,02,00,tz,assert,that,rounding,round,time,2015,10,25t02,15,00,02,00,is,date,time,2015,10,25t02,00,00,02,00,tz,assert,that,rounding,round,time,2015,10,25t02,35,00,02,00,is,date,time,2015,10,25t02,20,00,02,00,tz,assert,that,rounding,round,time,2015,10,25t02,55,00,02,00,is,date,time,2015,10,25t02,40,00,02,00,tz,assert,that,rounding,round,time,2015,10,25t02,15,00,01,00,is,date,time,2015,10,25t02,00,00,01,00,tz,assert,that,rounding,round,time,2015,10,25t02,35,00,01,00,is,date,time,2015,10,25t02,20,00,01,00,tz,assert,that,rounding,round,time,2015,10,25t02,55,00,01,00,is,date,time,2015,10,25t02,40,00,01,00,tz,assert,that,rounding,round,time,2015,10,25t03,15,00,01,00,is,date,time,2015,10,25t03,00,00,01,00,tz
RoundingTests -> public void testTimeIntervalCET_DST_End();1549876539;test DST end with interval rounding_CET: 25 October 2015, 03:00:00 clocks were turned backward 1 hour to 25 October 2015, 02:00:00 local standard time;public void testTimeIntervalCET_DST_End() {_        long interval = TimeUnit.MINUTES.toMillis(20)__        ZoneId tz = ZoneId.of("CET")__        Rounding rounding = new Rounding.TimeIntervalRounding(interval, tz)___        assertThat(rounding.round(time("2015-10-25T01:55:00+02:00")), isDate(time("2015-10-25T01:40:00+02:00"), tz))__        assertThat(rounding.round(time("2015-10-25T02:15:00+02:00")), isDate(time("2015-10-25T02:00:00+02:00"), tz))__        assertThat(rounding.round(time("2015-10-25T02:35:00+02:00")), isDate(time("2015-10-25T02:20:00+02:00"), tz))__        assertThat(rounding.round(time("2015-10-25T02:55:00+02:00")), isDate(time("2015-10-25T02:40:00+02:00"), tz))__        _        assertThat(rounding.round(time("2015-10-25T02:15:00+01:00")), isDate(time("2015-10-25T02:00:00+01:00"), tz))__        assertThat(rounding.round(time("2015-10-25T02:35:00+01:00")), isDate(time("2015-10-25T02:20:00+01:00"), tz))__        assertThat(rounding.round(time("2015-10-25T02:55:00+01:00")), isDate(time("2015-10-25T02:40:00+01:00"), tz))__        assertThat(rounding.round(time("2015-10-25T03:15:00+01:00")), isDate(time("2015-10-25T03:00:00+01:00"), tz))__    };test,dst,end,with,interval,rounding,cet,25,october,2015,03,00,00,clocks,were,turned,backward,1,hour,to,25,october,2015,02,00,00,local,standard,time;public,void,long,interval,time,unit,minutes,to,millis,20,zone,id,tz,zone,id,of,cet,rounding,rounding,new,rounding,time,interval,rounding,interval,tz,assert,that,rounding,round,time,2015,10,25t01,55,00,02,00,is,date,time,2015,10,25t01,40,00,02,00,tz,assert,that,rounding,round,time,2015,10,25t02,15,00,02,00,is,date,time,2015,10,25t02,00,00,02,00,tz,assert,that,rounding,round,time,2015,10,25t02,35,00,02,00,is,date,time,2015,10,25t02,20,00,02,00,tz,assert,that,rounding,round,time,2015,10,25t02,55,00,02,00,is,date,time,2015,10,25t02,40,00,02,00,tz,assert,that,rounding,round,time,2015,10,25t02,15,00,01,00,is,date,time,2015,10,25t02,00,00,01,00,tz,assert,that,rounding,round,time,2015,10,25t02,35,00,01,00,is,date,time,2015,10,25t02,20,00,01,00,tz,assert,that,rounding,round,time,2015,10,25t02,55,00,01,00,is,date,time,2015,10,25t02,40,00,01,00,tz,assert,that,rounding,round,time,2015,10,25t03,15,00,01,00,is,date,time,2015,10,25t03,00,00,01,00,tz
RoundingTests -> public void testIntervalRoundingRandom();1534248446;randomized test on {@link org.elasticsearch.common.rounding.Rounding.TimeIntervalRounding} with random interval and time zone offsets;public void testIntervalRoundingRandom() {_        for (int i = 0_ i < 1000_ i++) {_            TimeUnit unit = randomFrom(TimeUnit.MINUTES, TimeUnit.HOURS, TimeUnit.DAYS)__            long interval = unit.toMillis(randomIntBetween(1, 365))__            ZoneId tz = randomZone()__            Rounding rounding = new Rounding.TimeIntervalRounding(interval, tz)__            long mainDate = Math.abs(randomLong() % (2 * (long) 10e11))_ _            if (randomBoolean()) {_                mainDate = nastyDate(mainDate, tz, interval)__            }_            _            long previousRoundedValue = Long.MIN_VALUE__            for (long date = mainDate - 2 * interval_ date < mainDate + 2 * interval_ date += interval / 2) {_                try {_                    final long roundedDate = rounding.round(date)__                    final long nextRoundingValue = rounding.nextRoundingValue(roundedDate)__                    assertThat("Rounding should be idempotent", roundedDate, equalTo(rounding.round(roundedDate)))__                    assertThat("Rounded value smaller or equal than unrounded", roundedDate, lessThanOrEqualTo(date))__                    assertThat("Values smaller than rounded value should round further down", rounding.round(roundedDate - 1),_                        lessThan(roundedDate))__                    assertThat("Rounding should be >= previous rounding value", roundedDate, greaterThanOrEqualTo(previousRoundedValue))___                    if (tz.getRules().isFixedOffset()) {_                        assertThat("NextRounding value should be greater than date", nextRoundingValue, greaterThan(roundedDate))__                        assertThat("NextRounding value should be interval from rounded value", nextRoundingValue - roundedDate,_                            equalTo(interval))__                        assertThat("NextRounding value should be a rounded date", nextRoundingValue,_                            equalTo(rounding.round(nextRoundingValue)))__                    }_                    previousRoundedValue = roundedDate__                } catch (AssertionError e) {_                    ZonedDateTime dateTime = ZonedDateTime.ofInstant(Instant.ofEpochMilli(date), tz)__                    ZonedDateTime previousRoundedValueDate = ZonedDateTime.ofInstant(Instant.ofEpochMilli(previousRoundedValue), tz)__                    logger.error("Rounding error at {}/{}, timezone {}, interval: {} previousRoundedValue {}/{}", dateTime, date,_                        tz, interval, previousRoundedValueDate, previousRoundedValue)__                    throw e__                }_            }_        }_    };randomized,test,on,link,org,elasticsearch,common,rounding,rounding,time,interval,rounding,with,random,interval,and,time,zone,offsets;public,void,test,interval,rounding,random,for,int,i,0,i,1000,i,time,unit,unit,random,from,time,unit,minutes,time,unit,hours,time,unit,days,long,interval,unit,to,millis,random,int,between,1,365,zone,id,tz,random,zone,rounding,rounding,new,rounding,time,interval,rounding,interval,tz,long,main,date,math,abs,random,long,2,long,10e11,if,random,boolean,main,date,nasty,date,main,date,tz,interval,long,previous,rounded,value,long,for,long,date,main,date,2,interval,date,main,date,2,interval,date,interval,2,try,final,long,rounded,date,rounding,round,date,final,long,next,rounding,value,rounding,next,rounding,value,rounded,date,assert,that,rounding,should,be,idempotent,rounded,date,equal,to,rounding,round,rounded,date,assert,that,rounded,value,smaller,or,equal,than,unrounded,rounded,date,less,than,or,equal,to,date,assert,that,values,smaller,than,rounded,value,should,round,further,down,rounding,round,rounded,date,1,less,than,rounded,date,assert,that,rounding,should,be,previous,rounding,value,rounded,date,greater,than,or,equal,to,previous,rounded,value,if,tz,get,rules,is,fixed,offset,assert,that,next,rounding,value,should,be,greater,than,date,next,rounding,value,greater,than,rounded,date,assert,that,next,rounding,value,should,be,interval,from,rounded,value,next,rounding,value,rounded,date,equal,to,interval,assert,that,next,rounding,value,should,be,a,rounded,date,next,rounding,value,equal,to,rounding,round,next,rounding,value,previous,rounded,value,rounded,date,catch,assertion,error,e,zoned,date,time,date,time,zoned,date,time,of,instant,instant,of,epoch,milli,date,tz,zoned,date,time,previous,rounded,value,date,zoned,date,time,of,instant,instant,of,epoch,milli,previous,rounded,value,tz,logger,error,rounding,error,at,timezone,interval,previous,rounded,value,date,time,date,tz,interval,previous,rounded,value,date,previous,rounded,value,throw,e
RoundingTests -> public void testIntervalRoundingRandom();1548236405;randomized test on {@link org.elasticsearch.common.Rounding.TimeIntervalRounding} with random interval and time zone offsets;public void testIntervalRoundingRandom() {_        for (int i = 0_ i < 1000_ i++) {_            TimeUnit unit = randomFrom(TimeUnit.MINUTES, TimeUnit.HOURS, TimeUnit.DAYS)__            long interval = unit.toMillis(randomIntBetween(1, 365))__            ZoneId tz = randomZone()__            Rounding rounding = new Rounding.TimeIntervalRounding(interval, tz)__            long mainDate = Math.abs(randomLong() % (2 * (long) 10e11))_ _            if (randomBoolean()) {_                mainDate = nastyDate(mainDate, tz, interval)__            }_            _            long previousRoundedValue = Long.MIN_VALUE__            for (long date = mainDate - 2 * interval_ date < mainDate + 2 * interval_ date += interval / 2) {_                try {_                    final long roundedDate = rounding.round(date)__                    final long nextRoundingValue = rounding.nextRoundingValue(roundedDate)__                    assertThat("Rounding should be idempotent", roundedDate, equalTo(rounding.round(roundedDate)))__                    assertThat("Rounded value smaller or equal than unrounded", roundedDate, lessThanOrEqualTo(date))__                    assertThat("Values smaller than rounded value should round further down", rounding.round(roundedDate - 1),_                        lessThan(roundedDate))__                    assertThat("Rounding should be >= previous rounding value", roundedDate, greaterThanOrEqualTo(previousRoundedValue))___                    if (tz.getRules().isFixedOffset()) {_                        assertThat("NextRounding value should be greater than date", nextRoundingValue, greaterThan(roundedDate))__                        assertThat("NextRounding value should be interval from rounded value", nextRoundingValue - roundedDate,_                            equalTo(interval))__                        assertThat("NextRounding value should be a rounded date", nextRoundingValue,_                            equalTo(rounding.round(nextRoundingValue)))__                    }_                    previousRoundedValue = roundedDate__                } catch (AssertionError e) {_                    ZonedDateTime dateTime = ZonedDateTime.ofInstant(Instant.ofEpochMilli(date), tz)__                    ZonedDateTime previousRoundedValueDate = ZonedDateTime.ofInstant(Instant.ofEpochMilli(previousRoundedValue), tz)__                    logger.error("Rounding error at {}/{}, timezone {}, interval: {} previousRoundedValue {}/{}", dateTime, date,_                        tz, interval, previousRoundedValueDate, previousRoundedValue)__                    throw e__                }_            }_        }_    };randomized,test,on,link,org,elasticsearch,common,rounding,time,interval,rounding,with,random,interval,and,time,zone,offsets;public,void,test,interval,rounding,random,for,int,i,0,i,1000,i,time,unit,unit,random,from,time,unit,minutes,time,unit,hours,time,unit,days,long,interval,unit,to,millis,random,int,between,1,365,zone,id,tz,random,zone,rounding,rounding,new,rounding,time,interval,rounding,interval,tz,long,main,date,math,abs,random,long,2,long,10e11,if,random,boolean,main,date,nasty,date,main,date,tz,interval,long,previous,rounded,value,long,for,long,date,main,date,2,interval,date,main,date,2,interval,date,interval,2,try,final,long,rounded,date,rounding,round,date,final,long,next,rounding,value,rounding,next,rounding,value,rounded,date,assert,that,rounding,should,be,idempotent,rounded,date,equal,to,rounding,round,rounded,date,assert,that,rounded,value,smaller,or,equal,than,unrounded,rounded,date,less,than,or,equal,to,date,assert,that,values,smaller,than,rounded,value,should,round,further,down,rounding,round,rounded,date,1,less,than,rounded,date,assert,that,rounding,should,be,previous,rounding,value,rounded,date,greater,than,or,equal,to,previous,rounded,value,if,tz,get,rules,is,fixed,offset,assert,that,next,rounding,value,should,be,greater,than,date,next,rounding,value,greater,than,rounded,date,assert,that,next,rounding,value,should,be,interval,from,rounded,value,next,rounding,value,rounded,date,equal,to,interval,assert,that,next,rounding,value,should,be,a,rounded,date,next,rounding,value,equal,to,rounding,round,next,rounding,value,previous,rounded,value,rounded,date,catch,assertion,error,e,zoned,date,time,date,time,zoned,date,time,of,instant,instant,of,epoch,milli,date,tz,zoned,date,time,previous,rounded,value,date,zoned,date,time,of,instant,instant,of,epoch,milli,previous,rounded,value,tz,logger,error,rounding,error,at,timezone,interval,previous,rounded,value,date,time,date,tz,interval,previous,rounded,value,date,previous,rounded,value,throw,e
RoundingTests -> public void testIntervalRoundingRandom();1548921340;randomized test on {@link org.elasticsearch.common.Rounding.TimeIntervalRounding} with random interval and time zone offsets;public void testIntervalRoundingRandom() {_        for (int i = 0_ i < 1000_ i++) {_            TimeUnit unit = randomFrom(TimeUnit.MINUTES, TimeUnit.HOURS, TimeUnit.DAYS)__            long interval = unit.toMillis(randomIntBetween(1, 365))__            ZoneId tz = randomZone()__            Rounding rounding = new Rounding.TimeIntervalRounding(interval, tz)__            long mainDate = Math.abs(randomLong() % (2 * (long) 10e11))_ _            if (randomBoolean()) {_                mainDate = nastyDate(mainDate, tz, interval)__            }_            _            long previousRoundedValue = Long.MIN_VALUE__            for (long date = mainDate - 2 * interval_ date < mainDate + 2 * interval_ date += interval / 2) {_                try {_                    final long roundedDate = rounding.round(date)__                    final long nextRoundingValue = rounding.nextRoundingValue(roundedDate)__                    assertThat("Rounding should be idempotent", roundedDate, equalTo(rounding.round(roundedDate)))__                    assertThat("Rounded value smaller or equal than unrounded", roundedDate, lessThanOrEqualTo(date))__                    assertThat("Values smaller than rounded value should round further down", rounding.round(roundedDate - 1),_                        lessThan(roundedDate))__                    assertThat("Rounding should be >= previous rounding value", roundedDate, greaterThanOrEqualTo(previousRoundedValue))___                    if (tz.getRules().isFixedOffset()) {_                        assertThat("NextRounding value should be greater than date", nextRoundingValue, greaterThan(roundedDate))__                        assertThat("NextRounding value should be interval from rounded value", nextRoundingValue - roundedDate,_                            equalTo(interval))__                        assertThat("NextRounding value should be a rounded date", nextRoundingValue,_                            equalTo(rounding.round(nextRoundingValue)))__                    }_                    previousRoundedValue = roundedDate__                } catch (AssertionError e) {_                    ZonedDateTime dateTime = ZonedDateTime.ofInstant(Instant.ofEpochMilli(date), tz)__                    ZonedDateTime previousRoundedValueDate = ZonedDateTime.ofInstant(Instant.ofEpochMilli(previousRoundedValue), tz)__                    logger.error("Rounding error at {}/{}, timezone {}, interval: {} previousRoundedValue {}/{}", dateTime, date,_                        tz, interval, previousRoundedValueDate, previousRoundedValue)__                    throw e__                }_            }_        }_    };randomized,test,on,link,org,elasticsearch,common,rounding,time,interval,rounding,with,random,interval,and,time,zone,offsets;public,void,test,interval,rounding,random,for,int,i,0,i,1000,i,time,unit,unit,random,from,time,unit,minutes,time,unit,hours,time,unit,days,long,interval,unit,to,millis,random,int,between,1,365,zone,id,tz,random,zone,rounding,rounding,new,rounding,time,interval,rounding,interval,tz,long,main,date,math,abs,random,long,2,long,10e11,if,random,boolean,main,date,nasty,date,main,date,tz,interval,long,previous,rounded,value,long,for,long,date,main,date,2,interval,date,main,date,2,interval,date,interval,2,try,final,long,rounded,date,rounding,round,date,final,long,next,rounding,value,rounding,next,rounding,value,rounded,date,assert,that,rounding,should,be,idempotent,rounded,date,equal,to,rounding,round,rounded,date,assert,that,rounded,value,smaller,or,equal,than,unrounded,rounded,date,less,than,or,equal,to,date,assert,that,values,smaller,than,rounded,value,should,round,further,down,rounding,round,rounded,date,1,less,than,rounded,date,assert,that,rounding,should,be,previous,rounding,value,rounded,date,greater,than,or,equal,to,previous,rounded,value,if,tz,get,rules,is,fixed,offset,assert,that,next,rounding,value,should,be,greater,than,date,next,rounding,value,greater,than,rounded,date,assert,that,next,rounding,value,should,be,interval,from,rounded,value,next,rounding,value,rounded,date,equal,to,interval,assert,that,next,rounding,value,should,be,a,rounded,date,next,rounding,value,equal,to,rounding,round,next,rounding,value,previous,rounded,value,rounded,date,catch,assertion,error,e,zoned,date,time,date,time,zoned,date,time,of,instant,instant,of,epoch,milli,date,tz,zoned,date,time,previous,rounded,value,date,zoned,date,time,of,instant,instant,of,epoch,milli,previous,rounded,value,tz,logger,error,rounding,error,at,timezone,interval,previous,rounded,value,date,time,date,tz,interval,previous,rounded,value,date,previous,rounded,value,throw,e
RoundingTests -> public void testIntervalRoundingRandom();1549876539;randomized test on {@link org.elasticsearch.common.Rounding.TimeIntervalRounding} with random interval and time zone offsets;public void testIntervalRoundingRandom() {_        for (int i = 0_ i < 1000_ i++) {_            TimeUnit unit = randomFrom(TimeUnit.MINUTES, TimeUnit.HOURS, TimeUnit.DAYS)__            long interval = unit.toMillis(randomIntBetween(1, 365))__            ZoneId tz = randomZone()__            Rounding rounding = new Rounding.TimeIntervalRounding(interval, tz)__            long mainDate = Math.abs(randomLong() % (2 * (long) 10e11))_ _            if (randomBoolean()) {_                mainDate = nastyDate(mainDate, tz, interval)__            }_            _            long previousRoundedValue = Long.MIN_VALUE__            for (long date = mainDate - 2 * interval_ date < mainDate + 2 * interval_ date += interval / 2) {_                try {_                    final long roundedDate = rounding.round(date)__                    final long nextRoundingValue = rounding.nextRoundingValue(roundedDate)__                    assertThat("Rounding should be idempotent", roundedDate, equalTo(rounding.round(roundedDate)))__                    assertThat("Rounded value smaller or equal than unrounded", roundedDate, lessThanOrEqualTo(date))__                    assertThat("Values smaller than rounded value should round further down", rounding.round(roundedDate - 1),_                        lessThan(roundedDate))__                    assertThat("Rounding should be >= previous rounding value", roundedDate, greaterThanOrEqualTo(previousRoundedValue))___                    if (tz.getRules().isFixedOffset()) {_                        assertThat("NextRounding value should be greater than date", nextRoundingValue, greaterThan(roundedDate))__                        assertThat("NextRounding value should be interval from rounded value", nextRoundingValue - roundedDate,_                            equalTo(interval))__                        assertThat("NextRounding value should be a rounded date", nextRoundingValue,_                            equalTo(rounding.round(nextRoundingValue)))__                    }_                    previousRoundedValue = roundedDate__                } catch (AssertionError e) {_                    ZonedDateTime dateTime = ZonedDateTime.ofInstant(Instant.ofEpochMilli(date), tz)__                    ZonedDateTime previousRoundedValueDate = ZonedDateTime.ofInstant(Instant.ofEpochMilli(previousRoundedValue), tz)__                    logger.error("Rounding error at {}/{}, timezone {}, interval: {} previousRoundedValue {}/{}", dateTime, date,_                        tz, interval, previousRoundedValueDate, previousRoundedValue)__                    throw e__                }_            }_        }_    };randomized,test,on,link,org,elasticsearch,common,rounding,time,interval,rounding,with,random,interval,and,time,zone,offsets;public,void,test,interval,rounding,random,for,int,i,0,i,1000,i,time,unit,unit,random,from,time,unit,minutes,time,unit,hours,time,unit,days,long,interval,unit,to,millis,random,int,between,1,365,zone,id,tz,random,zone,rounding,rounding,new,rounding,time,interval,rounding,interval,tz,long,main,date,math,abs,random,long,2,long,10e11,if,random,boolean,main,date,nasty,date,main,date,tz,interval,long,previous,rounded,value,long,for,long,date,main,date,2,interval,date,main,date,2,interval,date,interval,2,try,final,long,rounded,date,rounding,round,date,final,long,next,rounding,value,rounding,next,rounding,value,rounded,date,assert,that,rounding,should,be,idempotent,rounded,date,equal,to,rounding,round,rounded,date,assert,that,rounded,value,smaller,or,equal,than,unrounded,rounded,date,less,than,or,equal,to,date,assert,that,values,smaller,than,rounded,value,should,round,further,down,rounding,round,rounded,date,1,less,than,rounded,date,assert,that,rounding,should,be,previous,rounding,value,rounded,date,greater,than,or,equal,to,previous,rounded,value,if,tz,get,rules,is,fixed,offset,assert,that,next,rounding,value,should,be,greater,than,date,next,rounding,value,greater,than,rounded,date,assert,that,next,rounding,value,should,be,interval,from,rounded,value,next,rounding,value,rounded,date,equal,to,interval,assert,that,next,rounding,value,should,be,a,rounded,date,next,rounding,value,equal,to,rounding,round,next,rounding,value,previous,rounded,value,rounded,date,catch,assertion,error,e,zoned,date,time,date,time,zoned,date,time,of,instant,instant,of,epoch,milli,date,tz,zoned,date,time,previous,rounded,value,date,zoned,date,time,of,instant,instant,of,epoch,milli,previous,rounded,value,tz,logger,error,rounding,error,at,timezone,interval,previous,rounded,value,date,time,date,tz,interval,previous,rounded,value,date,previous,rounded,value,throw,e
RoundingTests -> public void testTimeInterval_Kathmandu_DST_Start();1534248446;test DST start with offset not fitting interval, e.g. Asia/Kathmandu_adding 15min on 1986-01-01T00:00:00 the interval from_1986-01-01T00:15:00+05:45 to 1986-01-01T00:20:00+05:45 to only be 5min_long;public void testTimeInterval_Kathmandu_DST_Start() {_        long interval = TimeUnit.MINUTES.toMillis(20)__        ZoneId tz = ZoneId.of("Asia/Kathmandu")__        Rounding rounding = new Rounding.TimeIntervalRounding(interval, tz)__        assertThat(rounding.round(time("1985-12-31T23:55:00+05:30")), isDate(time("1985-12-31T23:40:00+05:30"), tz))__        assertThat(rounding.round(time("1986-01-01T00:16:00+05:45")), isDate(time("1986-01-01T00:15:00+05:45"), tz))__        assertThat(time("1986-01-01T00:15:00+05:45") - time("1985-12-31T23:40:00+05:30"), equalTo(TimeUnit.MINUTES.toMillis(20)))__        assertThat(rounding.round(time("1986-01-01T00:26:00+05:45")), isDate(time("1986-01-01T00:20:00+05:45"), tz))__        assertThat(time("1986-01-01T00:20:00+05:45") - time("1986-01-01T00:15:00+05:45"), equalTo(TimeUnit.MINUTES.toMillis(5)))__        assertThat(rounding.round(time("1986-01-01T00:46:00+05:45")), isDate(time("1986-01-01T00:40:00+05:45"), tz))__        assertThat(time("1986-01-01T00:40:00+05:45") - time("1986-01-01T00:20:00+05:45"), equalTo(TimeUnit.MINUTES.toMillis(20)))__    };test,dst,start,with,offset,not,fitting,interval,e,g,asia,kathmandu,adding,15min,on,1986,01,01t00,00,00,the,interval,from,1986,01,01t00,15,00,05,45,to,1986,01,01t00,20,00,05,45,to,only,be,5min,long;public,void,long,interval,time,unit,minutes,to,millis,20,zone,id,tz,zone,id,of,asia,kathmandu,rounding,rounding,new,rounding,time,interval,rounding,interval,tz,assert,that,rounding,round,time,1985,12,31t23,55,00,05,30,is,date,time,1985,12,31t23,40,00,05,30,tz,assert,that,rounding,round,time,1986,01,01t00,16,00,05,45,is,date,time,1986,01,01t00,15,00,05,45,tz,assert,that,time,1986,01,01t00,15,00,05,45,time,1985,12,31t23,40,00,05,30,equal,to,time,unit,minutes,to,millis,20,assert,that,rounding,round,time,1986,01,01t00,26,00,05,45,is,date,time,1986,01,01t00,20,00,05,45,tz,assert,that,time,1986,01,01t00,20,00,05,45,time,1986,01,01t00,15,00,05,45,equal,to,time,unit,minutes,to,millis,5,assert,that,rounding,round,time,1986,01,01t00,46,00,05,45,is,date,time,1986,01,01t00,40,00,05,45,tz,assert,that,time,1986,01,01t00,40,00,05,45,time,1986,01,01t00,20,00,05,45,equal,to,time,unit,minutes,to,millis,20
RoundingTests -> public void testTimeInterval_Kathmandu_DST_Start();1548236405;test DST start with offset not fitting interval, e.g. Asia/Kathmandu_adding 15min on 1986-01-01T00:00:00 the interval from_1986-01-01T00:15:00+05:45 to 1986-01-01T00:20:00+05:45 to only be 5min_long;public void testTimeInterval_Kathmandu_DST_Start() {_        long interval = TimeUnit.MINUTES.toMillis(20)__        ZoneId tz = ZoneId.of("Asia/Kathmandu")__        Rounding rounding = new Rounding.TimeIntervalRounding(interval, tz)__        assertThat(rounding.round(time("1985-12-31T23:55:00+05:30")), isDate(time("1985-12-31T23:40:00+05:30"), tz))__        assertThat(rounding.round(time("1986-01-01T00:16:00+05:45")), isDate(time("1986-01-01T00:15:00+05:45"), tz))__        assertThat(time("1986-01-01T00:15:00+05:45") - time("1985-12-31T23:40:00+05:30"), equalTo(TimeUnit.MINUTES.toMillis(20)))__        assertThat(rounding.round(time("1986-01-01T00:26:00+05:45")), isDate(time("1986-01-01T00:20:00+05:45"), tz))__        assertThat(time("1986-01-01T00:20:00+05:45") - time("1986-01-01T00:15:00+05:45"), equalTo(TimeUnit.MINUTES.toMillis(5)))__        assertThat(rounding.round(time("1986-01-01T00:46:00+05:45")), isDate(time("1986-01-01T00:40:00+05:45"), tz))__        assertThat(time("1986-01-01T00:40:00+05:45") - time("1986-01-01T00:20:00+05:45"), equalTo(TimeUnit.MINUTES.toMillis(20)))__    };test,dst,start,with,offset,not,fitting,interval,e,g,asia,kathmandu,adding,15min,on,1986,01,01t00,00,00,the,interval,from,1986,01,01t00,15,00,05,45,to,1986,01,01t00,20,00,05,45,to,only,be,5min,long;public,void,long,interval,time,unit,minutes,to,millis,20,zone,id,tz,zone,id,of,asia,kathmandu,rounding,rounding,new,rounding,time,interval,rounding,interval,tz,assert,that,rounding,round,time,1985,12,31t23,55,00,05,30,is,date,time,1985,12,31t23,40,00,05,30,tz,assert,that,rounding,round,time,1986,01,01t00,16,00,05,45,is,date,time,1986,01,01t00,15,00,05,45,tz,assert,that,time,1986,01,01t00,15,00,05,45,time,1985,12,31t23,40,00,05,30,equal,to,time,unit,minutes,to,millis,20,assert,that,rounding,round,time,1986,01,01t00,26,00,05,45,is,date,time,1986,01,01t00,20,00,05,45,tz,assert,that,time,1986,01,01t00,20,00,05,45,time,1986,01,01t00,15,00,05,45,equal,to,time,unit,minutes,to,millis,5,assert,that,rounding,round,time,1986,01,01t00,46,00,05,45,is,date,time,1986,01,01t00,40,00,05,45,tz,assert,that,time,1986,01,01t00,40,00,05,45,time,1986,01,01t00,20,00,05,45,equal,to,time,unit,minutes,to,millis,20
RoundingTests -> public void testTimeInterval_Kathmandu_DST_Start();1548921340;test DST start with offset not fitting interval, e.g. Asia/Kathmandu_adding 15min on 1986-01-01T00:00:00 the interval from_1986-01-01T00:15:00+05:45 to 1986-01-01T00:20:00+05:45 to only be 5min_long;public void testTimeInterval_Kathmandu_DST_Start() {_        long interval = TimeUnit.MINUTES.toMillis(20)__        ZoneId tz = ZoneId.of("Asia/Kathmandu")__        Rounding rounding = new Rounding.TimeIntervalRounding(interval, tz)__        assertThat(rounding.round(time("1985-12-31T23:55:00+05:30")), isDate(time("1985-12-31T23:40:00+05:30"), tz))__        assertThat(rounding.round(time("1986-01-01T00:16:00+05:45")), isDate(time("1986-01-01T00:15:00+05:45"), tz))__        assertThat(time("1986-01-01T00:15:00+05:45") - time("1985-12-31T23:40:00+05:30"), equalTo(TimeUnit.MINUTES.toMillis(20)))__        assertThat(rounding.round(time("1986-01-01T00:26:00+05:45")), isDate(time("1986-01-01T00:20:00+05:45"), tz))__        assertThat(time("1986-01-01T00:20:00+05:45") - time("1986-01-01T00:15:00+05:45"), equalTo(TimeUnit.MINUTES.toMillis(5)))__        assertThat(rounding.round(time("1986-01-01T00:46:00+05:45")), isDate(time("1986-01-01T00:40:00+05:45"), tz))__        assertThat(time("1986-01-01T00:40:00+05:45") - time("1986-01-01T00:20:00+05:45"), equalTo(TimeUnit.MINUTES.toMillis(20)))__    };test,dst,start,with,offset,not,fitting,interval,e,g,asia,kathmandu,adding,15min,on,1986,01,01t00,00,00,the,interval,from,1986,01,01t00,15,00,05,45,to,1986,01,01t00,20,00,05,45,to,only,be,5min,long;public,void,long,interval,time,unit,minutes,to,millis,20,zone,id,tz,zone,id,of,asia,kathmandu,rounding,rounding,new,rounding,time,interval,rounding,interval,tz,assert,that,rounding,round,time,1985,12,31t23,55,00,05,30,is,date,time,1985,12,31t23,40,00,05,30,tz,assert,that,rounding,round,time,1986,01,01t00,16,00,05,45,is,date,time,1986,01,01t00,15,00,05,45,tz,assert,that,time,1986,01,01t00,15,00,05,45,time,1985,12,31t23,40,00,05,30,equal,to,time,unit,minutes,to,millis,20,assert,that,rounding,round,time,1986,01,01t00,26,00,05,45,is,date,time,1986,01,01t00,20,00,05,45,tz,assert,that,time,1986,01,01t00,20,00,05,45,time,1986,01,01t00,15,00,05,45,equal,to,time,unit,minutes,to,millis,5,assert,that,rounding,round,time,1986,01,01t00,46,00,05,45,is,date,time,1986,01,01t00,40,00,05,45,tz,assert,that,time,1986,01,01t00,40,00,05,45,time,1986,01,01t00,20,00,05,45,equal,to,time,unit,minutes,to,millis,20
RoundingTests -> public void testTimeInterval_Kathmandu_DST_Start();1549876539;test DST start with offset not fitting interval, e.g. Asia/Kathmandu_adding 15min on 1986-01-01T00:00:00 the interval from_1986-01-01T00:15:00+05:45 to 1986-01-01T00:20:00+05:45 to only be 5min_long;public void testTimeInterval_Kathmandu_DST_Start() {_        long interval = TimeUnit.MINUTES.toMillis(20)__        ZoneId tz = ZoneId.of("Asia/Kathmandu")__        Rounding rounding = new Rounding.TimeIntervalRounding(interval, tz)__        assertThat(rounding.round(time("1985-12-31T23:55:00+05:30")), isDate(time("1985-12-31T23:40:00+05:30"), tz))__        assertThat(rounding.round(time("1986-01-01T00:16:00+05:45")), isDate(time("1986-01-01T00:15:00+05:45"), tz))__        assertThat(time("1986-01-01T00:15:00+05:45") - time("1985-12-31T23:40:00+05:30"), equalTo(TimeUnit.MINUTES.toMillis(20)))__        assertThat(rounding.round(time("1986-01-01T00:26:00+05:45")), isDate(time("1986-01-01T00:20:00+05:45"), tz))__        assertThat(time("1986-01-01T00:20:00+05:45") - time("1986-01-01T00:15:00+05:45"), equalTo(TimeUnit.MINUTES.toMillis(5)))__        assertThat(rounding.round(time("1986-01-01T00:46:00+05:45")), isDate(time("1986-01-01T00:40:00+05:45"), tz))__        assertThat(time("1986-01-01T00:40:00+05:45") - time("1986-01-01T00:20:00+05:45"), equalTo(TimeUnit.MINUTES.toMillis(20)))__    };test,dst,start,with,offset,not,fitting,interval,e,g,asia,kathmandu,adding,15min,on,1986,01,01t00,00,00,the,interval,from,1986,01,01t00,15,00,05,45,to,1986,01,01t00,20,00,05,45,to,only,be,5min,long;public,void,long,interval,time,unit,minutes,to,millis,20,zone,id,tz,zone,id,of,asia,kathmandu,rounding,rounding,new,rounding,time,interval,rounding,interval,tz,assert,that,rounding,round,time,1985,12,31t23,55,00,05,30,is,date,time,1985,12,31t23,40,00,05,30,tz,assert,that,rounding,round,time,1986,01,01t00,16,00,05,45,is,date,time,1986,01,01t00,15,00,05,45,tz,assert,that,time,1986,01,01t00,15,00,05,45,time,1985,12,31t23,40,00,05,30,equal,to,time,unit,minutes,to,millis,20,assert,that,rounding,round,time,1986,01,01t00,26,00,05,45,is,date,time,1986,01,01t00,20,00,05,45,tz,assert,that,time,1986,01,01t00,20,00,05,45,time,1986,01,01t00,15,00,05,45,equal,to,time,unit,minutes,to,millis,5,assert,that,rounding,round,time,1986,01,01t00,46,00,05,45,is,date,time,1986,01,01t00,40,00,05,45,tz,assert,that,time,1986,01,01t00,40,00,05,45,time,1986,01,01t00,20,00,05,45,equal,to,time,unit,minutes,to,millis,20
RoundingTests -> public void testIntervalRounding_HalfDay_DST();1534248446;Test for half day rounding intervals scrossing DST.;public void testIntervalRounding_HalfDay_DST() {_        long interval = TimeUnit.HOURS.toMillis(12)__        ZoneId tz = ZoneId.of("CET")__        Rounding rounding = new Rounding.TimeIntervalRounding(interval, tz)___        assertThat(rounding.round(time("2016-03-26T01:00:00+01:00")), isDate(time("2016-03-26T00:00:00+01:00"), tz))__        assertThat(rounding.round(time("2016-03-26T13:00:00+01:00")), isDate(time("2016-03-26T12:00:00+01:00"), tz))__        assertThat(rounding.round(time("2016-03-27T01:00:00+01:00")), isDate(time("2016-03-27T00:00:00+01:00"), tz))__        assertThat(rounding.round(time("2016-03-27T13:00:00+02:00")), isDate(time("2016-03-27T12:00:00+02:00"), tz))__        assertThat(rounding.round(time("2016-03-28T01:00:00+02:00")), isDate(time("2016-03-28T00:00:00+02:00"), tz))__        assertThat(rounding.round(time("2016-03-28T13:00:00+02:00")), isDate(time("2016-03-28T12:00:00+02:00"), tz))__    };test,for,half,day,rounding,intervals,scrossing,dst;public,void,long,interval,time,unit,hours,to,millis,12,zone,id,tz,zone,id,of,cet,rounding,rounding,new,rounding,time,interval,rounding,interval,tz,assert,that,rounding,round,time,2016,03,26t01,00,00,01,00,is,date,time,2016,03,26t00,00,00,01,00,tz,assert,that,rounding,round,time,2016,03,26t13,00,00,01,00,is,date,time,2016,03,26t12,00,00,01,00,tz,assert,that,rounding,round,time,2016,03,27t01,00,00,01,00,is,date,time,2016,03,27t00,00,00,01,00,tz,assert,that,rounding,round,time,2016,03,27t13,00,00,02,00,is,date,time,2016,03,27t12,00,00,02,00,tz,assert,that,rounding,round,time,2016,03,28t01,00,00,02,00,is,date,time,2016,03,28t00,00,00,02,00,tz,assert,that,rounding,round,time,2016,03,28t13,00,00,02,00,is,date,time,2016,03,28t12,00,00,02,00,tz
RoundingTests -> public void testIntervalRounding_HalfDay_DST();1548236405;Test for half day rounding intervals scrossing DST.;public void testIntervalRounding_HalfDay_DST() {_        long interval = TimeUnit.HOURS.toMillis(12)__        ZoneId tz = ZoneId.of("CET")__        Rounding rounding = new Rounding.TimeIntervalRounding(interval, tz)___        assertThat(rounding.round(time("2016-03-26T01:00:00+01:00")), isDate(time("2016-03-26T00:00:00+01:00"), tz))__        assertThat(rounding.round(time("2016-03-26T13:00:00+01:00")), isDate(time("2016-03-26T12:00:00+01:00"), tz))__        assertThat(rounding.round(time("2016-03-27T01:00:00+01:00")), isDate(time("2016-03-27T00:00:00+01:00"), tz))__        assertThat(rounding.round(time("2016-03-27T13:00:00+02:00")), isDate(time("2016-03-27T12:00:00+02:00"), tz))__        assertThat(rounding.round(time("2016-03-28T01:00:00+02:00")), isDate(time("2016-03-28T00:00:00+02:00"), tz))__        assertThat(rounding.round(time("2016-03-28T13:00:00+02:00")), isDate(time("2016-03-28T12:00:00+02:00"), tz))__    };test,for,half,day,rounding,intervals,scrossing,dst;public,void,long,interval,time,unit,hours,to,millis,12,zone,id,tz,zone,id,of,cet,rounding,rounding,new,rounding,time,interval,rounding,interval,tz,assert,that,rounding,round,time,2016,03,26t01,00,00,01,00,is,date,time,2016,03,26t00,00,00,01,00,tz,assert,that,rounding,round,time,2016,03,26t13,00,00,01,00,is,date,time,2016,03,26t12,00,00,01,00,tz,assert,that,rounding,round,time,2016,03,27t01,00,00,01,00,is,date,time,2016,03,27t00,00,00,01,00,tz,assert,that,rounding,round,time,2016,03,27t13,00,00,02,00,is,date,time,2016,03,27t12,00,00,02,00,tz,assert,that,rounding,round,time,2016,03,28t01,00,00,02,00,is,date,time,2016,03,28t00,00,00,02,00,tz,assert,that,rounding,round,time,2016,03,28t13,00,00,02,00,is,date,time,2016,03,28t12,00,00,02,00,tz
RoundingTests -> public void testIntervalRounding_HalfDay_DST();1548921340;Test for half day rounding intervals scrossing DST.;public void testIntervalRounding_HalfDay_DST() {_        long interval = TimeUnit.HOURS.toMillis(12)__        ZoneId tz = ZoneId.of("CET")__        Rounding rounding = new Rounding.TimeIntervalRounding(interval, tz)___        assertThat(rounding.round(time("2016-03-26T01:00:00+01:00")), isDate(time("2016-03-26T00:00:00+01:00"), tz))__        assertThat(rounding.round(time("2016-03-26T13:00:00+01:00")), isDate(time("2016-03-26T12:00:00+01:00"), tz))__        assertThat(rounding.round(time("2016-03-27T01:00:00+01:00")), isDate(time("2016-03-27T00:00:00+01:00"), tz))__        assertThat(rounding.round(time("2016-03-27T13:00:00+02:00")), isDate(time("2016-03-27T12:00:00+02:00"), tz))__        assertThat(rounding.round(time("2016-03-28T01:00:00+02:00")), isDate(time("2016-03-28T00:00:00+02:00"), tz))__        assertThat(rounding.round(time("2016-03-28T13:00:00+02:00")), isDate(time("2016-03-28T12:00:00+02:00"), tz))__    };test,for,half,day,rounding,intervals,scrossing,dst;public,void,long,interval,time,unit,hours,to,millis,12,zone,id,tz,zone,id,of,cet,rounding,rounding,new,rounding,time,interval,rounding,interval,tz,assert,that,rounding,round,time,2016,03,26t01,00,00,01,00,is,date,time,2016,03,26t00,00,00,01,00,tz,assert,that,rounding,round,time,2016,03,26t13,00,00,01,00,is,date,time,2016,03,26t12,00,00,01,00,tz,assert,that,rounding,round,time,2016,03,27t01,00,00,01,00,is,date,time,2016,03,27t00,00,00,01,00,tz,assert,that,rounding,round,time,2016,03,27t13,00,00,02,00,is,date,time,2016,03,27t12,00,00,02,00,tz,assert,that,rounding,round,time,2016,03,28t01,00,00,02,00,is,date,time,2016,03,28t00,00,00,02,00,tz,assert,that,rounding,round,time,2016,03,28t13,00,00,02,00,is,date,time,2016,03,28t12,00,00,02,00,tz
RoundingTests -> public void testIntervalRounding_HalfDay_DST();1549876539;Test for half day rounding intervals scrossing DST.;public void testIntervalRounding_HalfDay_DST() {_        long interval = TimeUnit.HOURS.toMillis(12)__        ZoneId tz = ZoneId.of("CET")__        Rounding rounding = new Rounding.TimeIntervalRounding(interval, tz)___        assertThat(rounding.round(time("2016-03-26T01:00:00+01:00")), isDate(time("2016-03-26T00:00:00+01:00"), tz))__        assertThat(rounding.round(time("2016-03-26T13:00:00+01:00")), isDate(time("2016-03-26T12:00:00+01:00"), tz))__        assertThat(rounding.round(time("2016-03-27T01:00:00+01:00")), isDate(time("2016-03-27T00:00:00+01:00"), tz))__        assertThat(rounding.round(time("2016-03-27T13:00:00+02:00")), isDate(time("2016-03-27T12:00:00+02:00"), tz))__        assertThat(rounding.round(time("2016-03-28T01:00:00+02:00")), isDate(time("2016-03-28T00:00:00+02:00"), tz))__        assertThat(rounding.round(time("2016-03-28T13:00:00+02:00")), isDate(time("2016-03-28T12:00:00+02:00"), tz))__    };test,for,half,day,rounding,intervals,scrossing,dst;public,void,long,interval,time,unit,hours,to,millis,12,zone,id,tz,zone,id,of,cet,rounding,rounding,new,rounding,time,interval,rounding,interval,tz,assert,that,rounding,round,time,2016,03,26t01,00,00,01,00,is,date,time,2016,03,26t00,00,00,01,00,tz,assert,that,rounding,round,time,2016,03,26t13,00,00,01,00,is,date,time,2016,03,26t12,00,00,01,00,tz,assert,that,rounding,round,time,2016,03,27t01,00,00,01,00,is,date,time,2016,03,27t00,00,00,01,00,tz,assert,that,rounding,round,time,2016,03,27t13,00,00,02,00,is,date,time,2016,03,27t12,00,00,02,00,tz,assert,that,rounding,round,time,2016,03,28t01,00,00,02,00,is,date,time,2016,03,28t00,00,00,02,00,tz,assert,that,rounding,round,time,2016,03,28t13,00,00,02,00,is,date,time,2016,03,28t12,00,00,02,00,tz
RoundingTests -> public void testDST_America_St_Johns();1534248446;Test for a time zone whose days overlap because the clocks are set back across midnight at the end of DST.;public void testDST_America_St_Johns() {_        _        ZoneId tz = ZoneId.of("America/St_Johns")__        Rounding rounding = new Rounding.TimeUnitRounding(Rounding.DateTimeUnit.DAY_OF_MONTH, tz)___        _        _        _        _        __        {_            _            long timeBeforeFirstMidnight = time("2006-10-28T23:30:00.000-02:30")__            long floor = rounding.round(timeBeforeFirstMidnight)__            assertThat(floor, isDate(time("2006-10-28T00:00:00.000-02:30"), tz))__            long ceiling = rounding.nextRoundingValue(timeBeforeFirstMidnight)__            assertThat(ceiling, isDate(time("2006-10-29T00:00:00.000-02:30"), tz))__            assertInterval(floor, timeBeforeFirstMidnight, ceiling, rounding, tz)__        }__        {_            _            long timeBetweenMidnights = time("2006-10-29T00:00:30.000-02:30")__            __            long floor = rounding.round(timeBetweenMidnights)__            assertThat(floor, isDate(time("2006-10-29T00:00:00.000-02:30"), tz))___            long ceiling = rounding.nextRoundingValue(timeBetweenMidnights)__            assertThat(ceiling, isDate(time("2006-10-30T00:00:00.000-03:30"), tz))___            assertInterval(floor, timeBetweenMidnights, ceiling, rounding, tz)__        }__        {_            _            long timeBetweenMidnights = time("2006-10-28T23:30:00.000-03:30")__            __            long floor = rounding.round(timeBetweenMidnights)__            assertThat(floor, isDate(time("2006-10-28T00:00:00.000-02:30"), tz))___            long ceiling = rounding.nextRoundingValue(timeBetweenMidnights)__            assertThat(ceiling, isDate(time("2006-10-29T00:00:00.000-02:30"), tz))___            assertInterval(floor, timeBetweenMidnights, ceiling, rounding, tz)__        }__        {_            _            long timeAfterSecondMidnight = time("2006-10-29T06:00:00.000-03:30")__            long floor = rounding.round(timeAfterSecondMidnight)__            assertThat(floor, isDate(time("2006-10-29T00:00:00.000-02:30"), tz))__            long ceiling = rounding.nextRoundingValue(timeAfterSecondMidnight)__            assertThat(ceiling, isDate(time("2006-10-30T00:00:00.000-03:30"), tz))__            assertInterval(floor, timeAfterSecondMidnight, ceiling, rounding, tz)__        }_    };test,for,a,time,zone,whose,days,overlap,because,the,clocks,are,set,back,across,midnight,at,the,end,of,dst;public,void,zone,id,tz,zone,id,of,america,rounding,rounding,new,rounding,time,unit,rounding,rounding,date,time,unit,tz,long,time,before,first,midnight,time,2006,10,28t23,30,00,000,02,30,long,floor,rounding,round,time,before,first,midnight,assert,that,floor,is,date,time,2006,10,28t00,00,00,000,02,30,tz,long,ceiling,rounding,next,rounding,value,time,before,first,midnight,assert,that,ceiling,is,date,time,2006,10,29t00,00,00,000,02,30,tz,assert,interval,floor,time,before,first,midnight,ceiling,rounding,tz,long,time,between,midnights,time,2006,10,29t00,00,30,000,02,30,long,floor,rounding,round,time,between,midnights,assert,that,floor,is,date,time,2006,10,29t00,00,00,000,02,30,tz,long,ceiling,rounding,next,rounding,value,time,between,midnights,assert,that,ceiling,is,date,time,2006,10,30t00,00,00,000,03,30,tz,assert,interval,floor,time,between,midnights,ceiling,rounding,tz,long,time,between,midnights,time,2006,10,28t23,30,00,000,03,30,long,floor,rounding,round,time,between,midnights,assert,that,floor,is,date,time,2006,10,28t00,00,00,000,02,30,tz,long,ceiling,rounding,next,rounding,value,time,between,midnights,assert,that,ceiling,is,date,time,2006,10,29t00,00,00,000,02,30,tz,assert,interval,floor,time,between,midnights,ceiling,rounding,tz,long,time,after,second,midnight,time,2006,10,29t06,00,00,000,03,30,long,floor,rounding,round,time,after,second,midnight,assert,that,floor,is,date,time,2006,10,29t00,00,00,000,02,30,tz,long,ceiling,rounding,next,rounding,value,time,after,second,midnight,assert,that,ceiling,is,date,time,2006,10,30t00,00,00,000,03,30,tz,assert,interval,floor,time,after,second,midnight,ceiling,rounding,tz
RoundingTests -> public void testDST_America_St_Johns();1548236405;Test for a time zone whose days overlap because the clocks are set back across midnight at the end of DST.;public void testDST_America_St_Johns() {_        _        ZoneId tz = ZoneId.of("America/St_Johns")__        Rounding rounding = new Rounding.TimeUnitRounding(Rounding.DateTimeUnit.DAY_OF_MONTH, tz)___        _        _        _        _        __        {_            _            long timeBeforeFirstMidnight = time("2006-10-28T23:30:00.000-02:30")__            long floor = rounding.round(timeBeforeFirstMidnight)__            assertThat(floor, isDate(time("2006-10-28T00:00:00.000-02:30"), tz))__            long ceiling = rounding.nextRoundingValue(timeBeforeFirstMidnight)__            assertThat(ceiling, isDate(time("2006-10-29T00:00:00.000-02:30"), tz))__            assertInterval(floor, timeBeforeFirstMidnight, ceiling, rounding, tz)__        }__        {_            _            long timeBetweenMidnights = time("2006-10-29T00:00:30.000-02:30")__            __            long floor = rounding.round(timeBetweenMidnights)__            assertThat(floor, isDate(time("2006-10-29T00:00:00.000-02:30"), tz))___            long ceiling = rounding.nextRoundingValue(timeBetweenMidnights)__            assertThat(ceiling, isDate(time("2006-10-30T00:00:00.000-03:30"), tz))___            assertInterval(floor, timeBetweenMidnights, ceiling, rounding, tz)__        }__        {_            _            long timeBetweenMidnights = time("2006-10-28T23:30:00.000-03:30")__            __            long floor = rounding.round(timeBetweenMidnights)__            assertThat(floor, isDate(time("2006-10-28T00:00:00.000-02:30"), tz))___            long ceiling = rounding.nextRoundingValue(timeBetweenMidnights)__            assertThat(ceiling, isDate(time("2006-10-29T00:00:00.000-02:30"), tz))___            assertInterval(floor, timeBetweenMidnights, ceiling, rounding, tz)__        }__        {_            _            long timeAfterSecondMidnight = time("2006-10-29T06:00:00.000-03:30")__            long floor = rounding.round(timeAfterSecondMidnight)__            assertThat(floor, isDate(time("2006-10-29T00:00:00.000-02:30"), tz))__            long ceiling = rounding.nextRoundingValue(timeAfterSecondMidnight)__            assertThat(ceiling, isDate(time("2006-10-30T00:00:00.000-03:30"), tz))__            assertInterval(floor, timeAfterSecondMidnight, ceiling, rounding, tz)__        }_    };test,for,a,time,zone,whose,days,overlap,because,the,clocks,are,set,back,across,midnight,at,the,end,of,dst;public,void,zone,id,tz,zone,id,of,america,rounding,rounding,new,rounding,time,unit,rounding,rounding,date,time,unit,tz,long,time,before,first,midnight,time,2006,10,28t23,30,00,000,02,30,long,floor,rounding,round,time,before,first,midnight,assert,that,floor,is,date,time,2006,10,28t00,00,00,000,02,30,tz,long,ceiling,rounding,next,rounding,value,time,before,first,midnight,assert,that,ceiling,is,date,time,2006,10,29t00,00,00,000,02,30,tz,assert,interval,floor,time,before,first,midnight,ceiling,rounding,tz,long,time,between,midnights,time,2006,10,29t00,00,30,000,02,30,long,floor,rounding,round,time,between,midnights,assert,that,floor,is,date,time,2006,10,29t00,00,00,000,02,30,tz,long,ceiling,rounding,next,rounding,value,time,between,midnights,assert,that,ceiling,is,date,time,2006,10,30t00,00,00,000,03,30,tz,assert,interval,floor,time,between,midnights,ceiling,rounding,tz,long,time,between,midnights,time,2006,10,28t23,30,00,000,03,30,long,floor,rounding,round,time,between,midnights,assert,that,floor,is,date,time,2006,10,28t00,00,00,000,02,30,tz,long,ceiling,rounding,next,rounding,value,time,between,midnights,assert,that,ceiling,is,date,time,2006,10,29t00,00,00,000,02,30,tz,assert,interval,floor,time,between,midnights,ceiling,rounding,tz,long,time,after,second,midnight,time,2006,10,29t06,00,00,000,03,30,long,floor,rounding,round,time,after,second,midnight,assert,that,floor,is,date,time,2006,10,29t00,00,00,000,02,30,tz,long,ceiling,rounding,next,rounding,value,time,after,second,midnight,assert,that,ceiling,is,date,time,2006,10,30t00,00,00,000,03,30,tz,assert,interval,floor,time,after,second,midnight,ceiling,rounding,tz
RoundingTests -> public void testDST_America_St_Johns();1548921340;Test for a time zone whose days overlap because the clocks are set back across midnight at the end of DST.;public void testDST_America_St_Johns() {_        _        ZoneId tz = ZoneId.of("America/St_Johns")__        Rounding rounding = new Rounding.TimeUnitRounding(Rounding.DateTimeUnit.DAY_OF_MONTH, tz)___        _        _        _        _        __        {_            _            long timeBeforeFirstMidnight = time("2006-10-28T23:30:00.000-02:30")__            long floor = rounding.round(timeBeforeFirstMidnight)__            assertThat(floor, isDate(time("2006-10-28T00:00:00.000-02:30"), tz))__            long ceiling = rounding.nextRoundingValue(timeBeforeFirstMidnight)__            assertThat(ceiling, isDate(time("2006-10-29T00:00:00.000-02:30"), tz))__            assertInterval(floor, timeBeforeFirstMidnight, ceiling, rounding, tz)__        }__        {_            _            long timeBetweenMidnights = time("2006-10-29T00:00:30.000-02:30")__            __            long floor = rounding.round(timeBetweenMidnights)__            assertThat(floor, isDate(time("2006-10-29T00:00:00.000-02:30"), tz))___            long ceiling = rounding.nextRoundingValue(timeBetweenMidnights)__            assertThat(ceiling, isDate(time("2006-10-30T00:00:00.000-03:30"), tz))___            assertInterval(floor, timeBetweenMidnights, ceiling, rounding, tz)__        }__        {_            _            long timeBetweenMidnights = time("2006-10-28T23:30:00.000-03:30")__            __            long floor = rounding.round(timeBetweenMidnights)__            assertThat(floor, isDate(time("2006-10-28T00:00:00.000-02:30"), tz))___            long ceiling = rounding.nextRoundingValue(timeBetweenMidnights)__            assertThat(ceiling, isDate(time("2006-10-29T00:00:00.000-02:30"), tz))___            assertInterval(floor, timeBetweenMidnights, ceiling, rounding, tz)__        }__        {_            _            long timeAfterSecondMidnight = time("2006-10-29T06:00:00.000-03:30")__            long floor = rounding.round(timeAfterSecondMidnight)__            assertThat(floor, isDate(time("2006-10-29T00:00:00.000-02:30"), tz))__            long ceiling = rounding.nextRoundingValue(timeAfterSecondMidnight)__            assertThat(ceiling, isDate(time("2006-10-30T00:00:00.000-03:30"), tz))__            assertInterval(floor, timeAfterSecondMidnight, ceiling, rounding, tz)__        }_    };test,for,a,time,zone,whose,days,overlap,because,the,clocks,are,set,back,across,midnight,at,the,end,of,dst;public,void,zone,id,tz,zone,id,of,america,rounding,rounding,new,rounding,time,unit,rounding,rounding,date,time,unit,tz,long,time,before,first,midnight,time,2006,10,28t23,30,00,000,02,30,long,floor,rounding,round,time,before,first,midnight,assert,that,floor,is,date,time,2006,10,28t00,00,00,000,02,30,tz,long,ceiling,rounding,next,rounding,value,time,before,first,midnight,assert,that,ceiling,is,date,time,2006,10,29t00,00,00,000,02,30,tz,assert,interval,floor,time,before,first,midnight,ceiling,rounding,tz,long,time,between,midnights,time,2006,10,29t00,00,30,000,02,30,long,floor,rounding,round,time,between,midnights,assert,that,floor,is,date,time,2006,10,29t00,00,00,000,02,30,tz,long,ceiling,rounding,next,rounding,value,time,between,midnights,assert,that,ceiling,is,date,time,2006,10,30t00,00,00,000,03,30,tz,assert,interval,floor,time,between,midnights,ceiling,rounding,tz,long,time,between,midnights,time,2006,10,28t23,30,00,000,03,30,long,floor,rounding,round,time,between,midnights,assert,that,floor,is,date,time,2006,10,28t00,00,00,000,02,30,tz,long,ceiling,rounding,next,rounding,value,time,between,midnights,assert,that,ceiling,is,date,time,2006,10,29t00,00,00,000,02,30,tz,assert,interval,floor,time,between,midnights,ceiling,rounding,tz,long,time,after,second,midnight,time,2006,10,29t06,00,00,000,03,30,long,floor,rounding,round,time,after,second,midnight,assert,that,floor,is,date,time,2006,10,29t00,00,00,000,02,30,tz,long,ceiling,rounding,next,rounding,value,time,after,second,midnight,assert,that,ceiling,is,date,time,2006,10,30t00,00,00,000,03,30,tz,assert,interval,floor,time,after,second,midnight,ceiling,rounding,tz
RoundingTests -> public void testDST_America_St_Johns();1549876539;Test for a time zone whose days overlap because the clocks are set back across midnight at the end of DST.;public void testDST_America_St_Johns() {_        _        ZoneId tz = ZoneId.of("America/St_Johns")__        Rounding rounding = new Rounding.TimeUnitRounding(Rounding.DateTimeUnit.DAY_OF_MONTH, tz)___        _        _        _        _        __        {_            _            long timeBeforeFirstMidnight = time("2006-10-28T23:30:00.000-02:30")__            long floor = rounding.round(timeBeforeFirstMidnight)__            assertThat(floor, isDate(time("2006-10-28T00:00:00.000-02:30"), tz))__            long ceiling = rounding.nextRoundingValue(timeBeforeFirstMidnight)__            assertThat(ceiling, isDate(time("2006-10-29T00:00:00.000-02:30"), tz))__            assertInterval(floor, timeBeforeFirstMidnight, ceiling, rounding, tz)__        }__        {_            _            long timeBetweenMidnights = time("2006-10-29T00:00:30.000-02:30")__            __            long floor = rounding.round(timeBetweenMidnights)__            assertThat(floor, isDate(time("2006-10-29T00:00:00.000-02:30"), tz))___            long ceiling = rounding.nextRoundingValue(timeBetweenMidnights)__            assertThat(ceiling, isDate(time("2006-10-30T00:00:00.000-03:30"), tz))___            assertInterval(floor, timeBetweenMidnights, ceiling, rounding, tz)__        }__        {_            _            long timeBetweenMidnights = time("2006-10-28T23:30:00.000-03:30")__            __            long floor = rounding.round(timeBetweenMidnights)__            assertThat(floor, isDate(time("2006-10-28T00:00:00.000-02:30"), tz))___            long ceiling = rounding.nextRoundingValue(timeBetweenMidnights)__            assertThat(ceiling, isDate(time("2006-10-29T00:00:00.000-02:30"), tz))___            assertInterval(floor, timeBetweenMidnights, ceiling, rounding, tz)__        }__        {_            _            long timeAfterSecondMidnight = time("2006-10-29T06:00:00.000-03:30")__            long floor = rounding.round(timeAfterSecondMidnight)__            assertThat(floor, isDate(time("2006-10-29T00:00:00.000-02:30"), tz))__            long ceiling = rounding.nextRoundingValue(timeAfterSecondMidnight)__            assertThat(ceiling, isDate(time("2006-10-30T00:00:00.000-03:30"), tz))__            assertInterval(floor, timeAfterSecondMidnight, ceiling, rounding, tz)__        }_    };test,for,a,time,zone,whose,days,overlap,because,the,clocks,are,set,back,across,midnight,at,the,end,of,dst;public,void,zone,id,tz,zone,id,of,america,rounding,rounding,new,rounding,time,unit,rounding,rounding,date,time,unit,tz,long,time,before,first,midnight,time,2006,10,28t23,30,00,000,02,30,long,floor,rounding,round,time,before,first,midnight,assert,that,floor,is,date,time,2006,10,28t00,00,00,000,02,30,tz,long,ceiling,rounding,next,rounding,value,time,before,first,midnight,assert,that,ceiling,is,date,time,2006,10,29t00,00,00,000,02,30,tz,assert,interval,floor,time,before,first,midnight,ceiling,rounding,tz,long,time,between,midnights,time,2006,10,29t00,00,30,000,02,30,long,floor,rounding,round,time,between,midnights,assert,that,floor,is,date,time,2006,10,29t00,00,00,000,02,30,tz,long,ceiling,rounding,next,rounding,value,time,between,midnights,assert,that,ceiling,is,date,time,2006,10,30t00,00,00,000,03,30,tz,assert,interval,floor,time,between,midnights,ceiling,rounding,tz,long,time,between,midnights,time,2006,10,28t23,30,00,000,03,30,long,floor,rounding,round,time,between,midnights,assert,that,floor,is,date,time,2006,10,28t00,00,00,000,02,30,tz,long,ceiling,rounding,next,rounding,value,time,between,midnights,assert,that,ceiling,is,date,time,2006,10,29t00,00,00,000,02,30,tz,assert,interval,floor,time,between,midnights,ceiling,rounding,tz,long,time,after,second,midnight,time,2006,10,29t06,00,00,000,03,30,long,floor,rounding,round,time,after,second,midnight,assert,that,floor,is,date,time,2006,10,29t00,00,00,000,02,30,tz,long,ceiling,rounding,next,rounding,value,time,after,second,midnight,assert,that,ceiling,is,date,time,2006,10,30t00,00,00,000,03,30,tz,assert,interval,floor,time,after,second,midnight,ceiling,rounding,tz
RoundingTests -> private static long nastyDate(long initialDate, ZoneId timezone, long unitMillis);1534248446;To be even more nasty, go to a transition in the selected time zone._In one third of the cases stay there, otherwise go half a unit back or forth;private static long nastyDate(long initialDate, ZoneId timezone, long unitMillis) {_        ZoneOffsetTransition transition = timezone.getRules().nextTransition(Instant.ofEpochMilli(initialDate))__        long date = initialDate__        if (transition != null) {_            date = transition.getInstant().toEpochMilli()__        }_        if (randomBoolean()) {_            return date + (randomLong() % unitMillis)_  _        } else {_            return date__        }_    };to,be,even,more,nasty,go,to,a,transition,in,the,selected,time,zone,in,one,third,of,the,cases,stay,there,otherwise,go,half,a,unit,back,or,forth;private,static,long,nasty,date,long,initial,date,zone,id,timezone,long,unit,millis,zone,offset,transition,transition,timezone,get,rules,next,transition,instant,of,epoch,milli,initial,date,long,date,initial,date,if,transition,null,date,transition,get,instant,to,epoch,milli,if,random,boolean,return,date,random,long,unit,millis,else,return,date
RoundingTests -> private static long nastyDate(long initialDate, ZoneId timezone, long unitMillis);1548236405;To be even more nasty, go to a transition in the selected time zone._In one third of the cases stay there, otherwise go half a unit back or forth;private static long nastyDate(long initialDate, ZoneId timezone, long unitMillis) {_        ZoneOffsetTransition transition = timezone.getRules().nextTransition(Instant.ofEpochMilli(initialDate))__        long date = initialDate__        if (transition != null) {_            date = transition.getInstant().toEpochMilli()__        }_        if (randomBoolean()) {_            return date + (randomLong() % unitMillis)_  _        } else {_            return date__        }_    };to,be,even,more,nasty,go,to,a,transition,in,the,selected,time,zone,in,one,third,of,the,cases,stay,there,otherwise,go,half,a,unit,back,or,forth;private,static,long,nasty,date,long,initial,date,zone,id,timezone,long,unit,millis,zone,offset,transition,transition,timezone,get,rules,next,transition,instant,of,epoch,milli,initial,date,long,date,initial,date,if,transition,null,date,transition,get,instant,to,epoch,milli,if,random,boolean,return,date,random,long,unit,millis,else,return,date
RoundingTests -> private static long nastyDate(long initialDate, ZoneId timezone, long unitMillis);1548921340;To be even more nasty, go to a transition in the selected time zone._In one third of the cases stay there, otherwise go half a unit back or forth;private static long nastyDate(long initialDate, ZoneId timezone, long unitMillis) {_        ZoneOffsetTransition transition = timezone.getRules().nextTransition(Instant.ofEpochMilli(initialDate))__        long date = initialDate__        if (transition != null) {_            date = transition.getInstant().toEpochMilli()__        }_        if (randomBoolean()) {_            return date + (randomLong() % unitMillis)_  _        } else {_            return date__        }_    };to,be,even,more,nasty,go,to,a,transition,in,the,selected,time,zone,in,one,third,of,the,cases,stay,there,otherwise,go,half,a,unit,back,or,forth;private,static,long,nasty,date,long,initial,date,zone,id,timezone,long,unit,millis,zone,offset,transition,transition,timezone,get,rules,next,transition,instant,of,epoch,milli,initial,date,long,date,initial,date,if,transition,null,date,transition,get,instant,to,epoch,milli,if,random,boolean,return,date,random,long,unit,millis,else,return,date
RoundingTests -> private static long nastyDate(long initialDate, ZoneId timezone, long unitMillis);1549876539;To be even more nasty, go to a transition in the selected time zone._In one third of the cases stay there, otherwise go half a unit back or forth;private static long nastyDate(long initialDate, ZoneId timezone, long unitMillis) {_        ZoneOffsetTransition transition = timezone.getRules().nextTransition(Instant.ofEpochMilli(initialDate))__        long date = initialDate__        if (transition != null) {_            date = transition.getInstant().toEpochMilli()__        }_        if (randomBoolean()) {_            return date + (randomLong() % unitMillis)_  _        } else {_            return date__        }_    };to,be,even,more,nasty,go,to,a,transition,in,the,selected,time,zone,in,one,third,of,the,cases,stay,there,otherwise,go,half,a,unit,back,or,forth;private,static,long,nasty,date,long,initial,date,zone,id,timezone,long,unit,millis,zone,offset,transition,transition,timezone,get,rules,next,transition,instant,of,epoch,milli,initial,date,long,date,initial,date,if,transition,null,date,transition,get,instant,to,epoch,milli,if,random,boolean,return,date,random,long,unit,millis,else,return,date
RoundingTests -> public void testTimeIntervalRounding();1534248446;test TimeIntervalRounding, (interval &lt_ 12h) with time zone shift;public void testTimeIntervalRounding() {_        ZoneId tz = ZoneOffset.ofHours(-1)__        Rounding tzRounding = Rounding.builder(TimeValue.timeValueHours(6)).timeZone(tz).build()__        assertThat(tzRounding.round(time("2009-02-03T00:01:01")), isDate(time("2009-02-02T19:00:00.000Z"), tz))__        assertThat(tzRounding.nextRoundingValue(time("2009-02-02T19:00:00.000Z")), isDate(time("2009-02-03T01:00:00.000Z"), tz))___        assertThat(tzRounding.round(time("2009-02-03T13:01:01")), isDate(time("2009-02-03T13:00:00.000Z"), tz))__        assertThat(tzRounding.nextRoundingValue(time("2009-02-03T13:00:00.000Z")), isDate(time("2009-02-03T19:00:00.000Z"), tz))__    };test,time,interval,rounding,interval,lt,12h,with,time,zone,shift;public,void,test,time,interval,rounding,zone,id,tz,zone,offset,of,hours,1,rounding,tz,rounding,rounding,builder,time,value,time,value,hours,6,time,zone,tz,build,assert,that,tz,rounding,round,time,2009,02,03t00,01,01,is,date,time,2009,02,02t19,00,00,000z,tz,assert,that,tz,rounding,next,rounding,value,time,2009,02,02t19,00,00,000z,is,date,time,2009,02,03t01,00,00,000z,tz,assert,that,tz,rounding,round,time,2009,02,03t13,01,01,is,date,time,2009,02,03t13,00,00,000z,tz,assert,that,tz,rounding,next,rounding,value,time,2009,02,03t13,00,00,000z,is,date,time,2009,02,03t19,00,00,000z,tz
RoundingTests -> public void testTimeIntervalRounding();1548236405;test TimeIntervalRounding, (interval &lt_ 12h) with time zone shift;public void testTimeIntervalRounding() {_        ZoneId tz = ZoneOffset.ofHours(-1)__        Rounding tzRounding = Rounding.builder(TimeValue.timeValueHours(6)).timeZone(tz).build()__        assertThat(tzRounding.round(time("2009-02-03T00:01:01")), isDate(time("2009-02-02T19:00:00.000Z"), tz))__        assertThat(tzRounding.nextRoundingValue(time("2009-02-02T19:00:00.000Z")), isDate(time("2009-02-03T01:00:00.000Z"), tz))___        assertThat(tzRounding.round(time("2009-02-03T13:01:01")), isDate(time("2009-02-03T13:00:00.000Z"), tz))__        assertThat(tzRounding.nextRoundingValue(time("2009-02-03T13:00:00.000Z")), isDate(time("2009-02-03T19:00:00.000Z"), tz))__    };test,time,interval,rounding,interval,lt,12h,with,time,zone,shift;public,void,test,time,interval,rounding,zone,id,tz,zone,offset,of,hours,1,rounding,tz,rounding,rounding,builder,time,value,time,value,hours,6,time,zone,tz,build,assert,that,tz,rounding,round,time,2009,02,03t00,01,01,is,date,time,2009,02,02t19,00,00,000z,tz,assert,that,tz,rounding,next,rounding,value,time,2009,02,02t19,00,00,000z,is,date,time,2009,02,03t01,00,00,000z,tz,assert,that,tz,rounding,round,time,2009,02,03t13,01,01,is,date,time,2009,02,03t13,00,00,000z,tz,assert,that,tz,rounding,next,rounding,value,time,2009,02,03t13,00,00,000z,is,date,time,2009,02,03t19,00,00,000z,tz
RoundingTests -> public void testTimeIntervalRounding();1548921340;test TimeIntervalRounding, (interval &lt_ 12h) with time zone shift;public void testTimeIntervalRounding() {_        ZoneId tz = ZoneOffset.ofHours(-1)__        Rounding tzRounding = Rounding.builder(TimeValue.timeValueHours(6)).timeZone(tz).build()__        assertThat(tzRounding.round(time("2009-02-03T00:01:01")), isDate(time("2009-02-02T19:00:00.000Z"), tz))__        assertThat(tzRounding.nextRoundingValue(time("2009-02-02T19:00:00.000Z")), isDate(time("2009-02-03T01:00:00.000Z"), tz))___        assertThat(tzRounding.round(time("2009-02-03T13:01:01")), isDate(time("2009-02-03T13:00:00.000Z"), tz))__        assertThat(tzRounding.nextRoundingValue(time("2009-02-03T13:00:00.000Z")), isDate(time("2009-02-03T19:00:00.000Z"), tz))__    };test,time,interval,rounding,interval,lt,12h,with,time,zone,shift;public,void,test,time,interval,rounding,zone,id,tz,zone,offset,of,hours,1,rounding,tz,rounding,rounding,builder,time,value,time,value,hours,6,time,zone,tz,build,assert,that,tz,rounding,round,time,2009,02,03t00,01,01,is,date,time,2009,02,02t19,00,00,000z,tz,assert,that,tz,rounding,next,rounding,value,time,2009,02,02t19,00,00,000z,is,date,time,2009,02,03t01,00,00,000z,tz,assert,that,tz,rounding,round,time,2009,02,03t13,01,01,is,date,time,2009,02,03t13,00,00,000z,tz,assert,that,tz,rounding,next,rounding,value,time,2009,02,03t13,00,00,000z,is,date,time,2009,02,03t19,00,00,000z,tz
RoundingTests -> public void testTimeIntervalRounding();1549876539;test TimeIntervalRounding, (interval &lt_ 12h) with time zone shift;public void testTimeIntervalRounding() {_        ZoneId tz = ZoneOffset.ofHours(-1)__        Rounding tzRounding = Rounding.builder(TimeValue.timeValueHours(6)).timeZone(tz).build()__        assertThat(tzRounding.round(time("2009-02-03T00:01:01")), isDate(time("2009-02-02T19:00:00.000Z"), tz))__        assertThat(tzRounding.nextRoundingValue(time("2009-02-02T19:00:00.000Z")), isDate(time("2009-02-03T01:00:00.000Z"), tz))___        assertThat(tzRounding.round(time("2009-02-03T13:01:01")), isDate(time("2009-02-03T13:00:00.000Z"), tz))__        assertThat(tzRounding.nextRoundingValue(time("2009-02-03T13:00:00.000Z")), isDate(time("2009-02-03T19:00:00.000Z"), tz))__    };test,time,interval,rounding,interval,lt,12h,with,time,zone,shift;public,void,test,time,interval,rounding,zone,id,tz,zone,offset,of,hours,1,rounding,tz,rounding,rounding,builder,time,value,time,value,hours,6,time,zone,tz,build,assert,that,tz,rounding,round,time,2009,02,03t00,01,01,is,date,time,2009,02,02t19,00,00,000z,tz,assert,that,tz,rounding,next,rounding,value,time,2009,02,02t19,00,00,000z,is,date,time,2009,02,03t01,00,00,000z,tz,assert,that,tz,rounding,round,time,2009,02,03t13,01,01,is,date,time,2009,02,03t13,00,00,000z,tz,assert,that,tz,rounding,next,rounding,value,time,2009,02,03t13,00,00,000z,is,date,time,2009,02,03t19,00,00,000z,tz
RoundingTests -> public void testAmbiguousHoursAfterDSTSwitch();1534248446;special test for DST switch from #9491;public void testAmbiguousHoursAfterDSTSwitch() {_        Rounding tzRounding__        final ZoneId tz = ZoneId.of("Asia/Jerusalem")__        tzRounding = Rounding.builder(Rounding.DateTimeUnit.HOUR_OF_DAY).timeZone(tz).build()__        assertThat(tzRounding.round(time("2014-10-26T00:30:00+03:00")), isDate(time("2014-10-26T00:00:00+03:00"), tz))__        assertThat(tzRounding.round(time("2014-10-26T01:30:00+03:00")), isDate(time("2014-10-26T01:00:00+03:00"), tz))__        _        assertThat(time("2014-10-26T03:00:00+03:00"), isDate(time("2014-10-26T02:00:00+02:00"), tz))__        assertThat(tzRounding.round(time("2014-10-26T01:30:00+02:00")), isDate(time("2014-10-26T01:00:00+02:00"), tz))__        assertThat(tzRounding.round(time("2014-10-26T02:30:00+02:00")), isDate(time("2014-10-26T02:00:00+02:00"), tz))___        _        tzRounding = Rounding.builder(Rounding.DateTimeUnit.DAY_OF_MONTH).timeZone(tz).build()__        assertThat(tzRounding.round(time("2014-11-11T17:00:00", tz)), isDate(time("2014-11-11T00:00:00", tz), tz))__        _        assertThat(tzRounding.round(time("2014-08-11T17:00:00", tz)), isDate(time("2014-08-11T00:00:00", tz), tz))__        _        assertThat(tzRounding.round(time("2014-10-26T17:00:00", tz)), isDate(time("2014-10-26T00:00:00", tz), tz))__        _        assertThat(tzRounding.round(time("2015-03-27T17:00:00", tz)), isDate(time("2015-03-27T00:00:00", tz), tz))___        _        tzRounding = Rounding.builder(Rounding.DateTimeUnit.MONTH_OF_YEAR).timeZone(tz).build()__        assertThat(tzRounding.round(time("2014-11-11T17:00:00", tz)), isDate(time("2014-11-01T00:00:00", tz), tz))__        _        assertThat(tzRounding.round(time("2014-10-10T17:00:00", tz)), isDate(time("2014-10-01T00:00:00", tz), tz))___        _        tzRounding = Rounding.builder(Rounding.DateTimeUnit.YEAR_OF_CENTURY).timeZone(tz).build()__        assertThat(tzRounding.round(time("2014-11-11T17:00:00", tz)), isDate(time("2014-01-01T00:00:00", tz), tz))___        _        tzRounding = Rounding.builder(Rounding.DateTimeUnit.YEAR_OF_CENTURY).timeZone(tz).build()__        assertThat(tzRounding.round(time("2014-11-11T17:00:00", tz)),_            isDate(tzRounding.round(time("2014-08-11T17:00:00", tz)), tz))__    };special,test,for,dst,switch,from,9491;public,void,test,ambiguous,hours,after,dstswitch,rounding,tz,rounding,final,zone,id,tz,zone,id,of,asia,jerusalem,tz,rounding,rounding,builder,rounding,date,time,unit,time,zone,tz,build,assert,that,tz,rounding,round,time,2014,10,26t00,30,00,03,00,is,date,time,2014,10,26t00,00,00,03,00,tz,assert,that,tz,rounding,round,time,2014,10,26t01,30,00,03,00,is,date,time,2014,10,26t01,00,00,03,00,tz,assert,that,time,2014,10,26t03,00,00,03,00,is,date,time,2014,10,26t02,00,00,02,00,tz,assert,that,tz,rounding,round,time,2014,10,26t01,30,00,02,00,is,date,time,2014,10,26t01,00,00,02,00,tz,assert,that,tz,rounding,round,time,2014,10,26t02,30,00,02,00,is,date,time,2014,10,26t02,00,00,02,00,tz,tz,rounding,rounding,builder,rounding,date,time,unit,time,zone,tz,build,assert,that,tz,rounding,round,time,2014,11,11t17,00,00,tz,is,date,time,2014,11,11t00,00,00,tz,tz,assert,that,tz,rounding,round,time,2014,08,11t17,00,00,tz,is,date,time,2014,08,11t00,00,00,tz,tz,assert,that,tz,rounding,round,time,2014,10,26t17,00,00,tz,is,date,time,2014,10,26t00,00,00,tz,tz,assert,that,tz,rounding,round,time,2015,03,27t17,00,00,tz,is,date,time,2015,03,27t00,00,00,tz,tz,tz,rounding,rounding,builder,rounding,date,time,unit,time,zone,tz,build,assert,that,tz,rounding,round,time,2014,11,11t17,00,00,tz,is,date,time,2014,11,01t00,00,00,tz,tz,assert,that,tz,rounding,round,time,2014,10,10t17,00,00,tz,is,date,time,2014,10,01t00,00,00,tz,tz,tz,rounding,rounding,builder,rounding,date,time,unit,time,zone,tz,build,assert,that,tz,rounding,round,time,2014,11,11t17,00,00,tz,is,date,time,2014,01,01t00,00,00,tz,tz,tz,rounding,rounding,builder,rounding,date,time,unit,time,zone,tz,build,assert,that,tz,rounding,round,time,2014,11,11t17,00,00,tz,is,date,tz,rounding,round,time,2014,08,11t17,00,00,tz,tz
RoundingTests -> public void testAmbiguousHoursAfterDSTSwitch();1548236405;special test for DST switch from #9491;public void testAmbiguousHoursAfterDSTSwitch() {_        Rounding tzRounding__        final ZoneId tz = ZoneId.of("Asia/Jerusalem")__        tzRounding = Rounding.builder(Rounding.DateTimeUnit.HOUR_OF_DAY).timeZone(tz).build()__        assertThat(tzRounding.round(time("2014-10-26T00:30:00+03:00")), isDate(time("2014-10-26T00:00:00+03:00"), tz))__        assertThat(tzRounding.round(time("2014-10-26T01:30:00+03:00")), isDate(time("2014-10-26T01:00:00+03:00"), tz))__        _        assertThat(time("2014-10-26T03:00:00+03:00"), isDate(time("2014-10-26T02:00:00+02:00"), tz))__        assertThat(tzRounding.round(time("2014-10-26T01:30:00+02:00")), isDate(time("2014-10-26T01:00:00+02:00"), tz))__        assertThat(tzRounding.round(time("2014-10-26T02:30:00+02:00")), isDate(time("2014-10-26T02:00:00+02:00"), tz))___        _        tzRounding = Rounding.builder(Rounding.DateTimeUnit.DAY_OF_MONTH).timeZone(tz).build()__        assertThat(tzRounding.round(time("2014-11-11T17:00:00", tz)), isDate(time("2014-11-11T00:00:00", tz), tz))__        _        assertThat(tzRounding.round(time("2014-08-11T17:00:00", tz)), isDate(time("2014-08-11T00:00:00", tz), tz))__        _        assertThat(tzRounding.round(time("2014-10-26T17:00:00", tz)), isDate(time("2014-10-26T00:00:00", tz), tz))__        _        assertThat(tzRounding.round(time("2015-03-27T17:00:00", tz)), isDate(time("2015-03-27T00:00:00", tz), tz))___        _        tzRounding = Rounding.builder(Rounding.DateTimeUnit.MONTH_OF_YEAR).timeZone(tz).build()__        assertThat(tzRounding.round(time("2014-11-11T17:00:00", tz)), isDate(time("2014-11-01T00:00:00", tz), tz))__        _        assertThat(tzRounding.round(time("2014-10-10T17:00:00", tz)), isDate(time("2014-10-01T00:00:00", tz), tz))___        _        tzRounding = Rounding.builder(Rounding.DateTimeUnit.YEAR_OF_CENTURY).timeZone(tz).build()__        assertThat(tzRounding.round(time("2014-11-11T17:00:00", tz)), isDate(time("2014-01-01T00:00:00", tz), tz))___        _        tzRounding = Rounding.builder(Rounding.DateTimeUnit.YEAR_OF_CENTURY).timeZone(tz).build()__        assertThat(tzRounding.round(time("2014-11-11T17:00:00", tz)),_            isDate(tzRounding.round(time("2014-08-11T17:00:00", tz)), tz))__    };special,test,for,dst,switch,from,9491;public,void,test,ambiguous,hours,after,dstswitch,rounding,tz,rounding,final,zone,id,tz,zone,id,of,asia,jerusalem,tz,rounding,rounding,builder,rounding,date,time,unit,time,zone,tz,build,assert,that,tz,rounding,round,time,2014,10,26t00,30,00,03,00,is,date,time,2014,10,26t00,00,00,03,00,tz,assert,that,tz,rounding,round,time,2014,10,26t01,30,00,03,00,is,date,time,2014,10,26t01,00,00,03,00,tz,assert,that,time,2014,10,26t03,00,00,03,00,is,date,time,2014,10,26t02,00,00,02,00,tz,assert,that,tz,rounding,round,time,2014,10,26t01,30,00,02,00,is,date,time,2014,10,26t01,00,00,02,00,tz,assert,that,tz,rounding,round,time,2014,10,26t02,30,00,02,00,is,date,time,2014,10,26t02,00,00,02,00,tz,tz,rounding,rounding,builder,rounding,date,time,unit,time,zone,tz,build,assert,that,tz,rounding,round,time,2014,11,11t17,00,00,tz,is,date,time,2014,11,11t00,00,00,tz,tz,assert,that,tz,rounding,round,time,2014,08,11t17,00,00,tz,is,date,time,2014,08,11t00,00,00,tz,tz,assert,that,tz,rounding,round,time,2014,10,26t17,00,00,tz,is,date,time,2014,10,26t00,00,00,tz,tz,assert,that,tz,rounding,round,time,2015,03,27t17,00,00,tz,is,date,time,2015,03,27t00,00,00,tz,tz,tz,rounding,rounding,builder,rounding,date,time,unit,time,zone,tz,build,assert,that,tz,rounding,round,time,2014,11,11t17,00,00,tz,is,date,time,2014,11,01t00,00,00,tz,tz,assert,that,tz,rounding,round,time,2014,10,10t17,00,00,tz,is,date,time,2014,10,01t00,00,00,tz,tz,tz,rounding,rounding,builder,rounding,date,time,unit,time,zone,tz,build,assert,that,tz,rounding,round,time,2014,11,11t17,00,00,tz,is,date,time,2014,01,01t00,00,00,tz,tz,tz,rounding,rounding,builder,rounding,date,time,unit,time,zone,tz,build,assert,that,tz,rounding,round,time,2014,11,11t17,00,00,tz,is,date,tz,rounding,round,time,2014,08,11t17,00,00,tz,tz
RoundingTests -> public void testAmbiguousHoursAfterDSTSwitch();1548921340;special test for DST switch from #9491;public void testAmbiguousHoursAfterDSTSwitch() {_        Rounding tzRounding__        final ZoneId tz = ZoneId.of("Asia/Jerusalem")__        tzRounding = Rounding.builder(Rounding.DateTimeUnit.HOUR_OF_DAY).timeZone(tz).build()__        assertThat(tzRounding.round(time("2014-10-26T00:30:00+03:00")), isDate(time("2014-10-26T00:00:00+03:00"), tz))__        assertThat(tzRounding.round(time("2014-10-26T01:30:00+03:00")), isDate(time("2014-10-26T01:00:00+03:00"), tz))__        _        assertThat(time("2014-10-26T03:00:00+03:00"), isDate(time("2014-10-26T02:00:00+02:00"), tz))__        assertThat(tzRounding.round(time("2014-10-26T01:30:00+02:00")), isDate(time("2014-10-26T01:00:00+02:00"), tz))__        assertThat(tzRounding.round(time("2014-10-26T02:30:00+02:00")), isDate(time("2014-10-26T02:00:00+02:00"), tz))___        _        tzRounding = Rounding.builder(Rounding.DateTimeUnit.DAY_OF_MONTH).timeZone(tz).build()__        assertThat(tzRounding.round(time("2014-11-11T17:00:00", tz)), isDate(time("2014-11-11T00:00:00", tz), tz))__        _        assertThat(tzRounding.round(time("2014-08-11T17:00:00", tz)), isDate(time("2014-08-11T00:00:00", tz), tz))__        _        assertThat(tzRounding.round(time("2014-10-26T17:00:00", tz)), isDate(time("2014-10-26T00:00:00", tz), tz))__        _        assertThat(tzRounding.round(time("2015-03-27T17:00:00", tz)), isDate(time("2015-03-27T00:00:00", tz), tz))___        _        tzRounding = Rounding.builder(Rounding.DateTimeUnit.MONTH_OF_YEAR).timeZone(tz).build()__        assertThat(tzRounding.round(time("2014-11-11T17:00:00", tz)), isDate(time("2014-11-01T00:00:00", tz), tz))__        _        assertThat(tzRounding.round(time("2014-10-10T17:00:00", tz)), isDate(time("2014-10-01T00:00:00", tz), tz))___        _        tzRounding = Rounding.builder(Rounding.DateTimeUnit.YEAR_OF_CENTURY).timeZone(tz).build()__        assertThat(tzRounding.round(time("2014-11-11T17:00:00", tz)), isDate(time("2014-01-01T00:00:00", tz), tz))___        _        tzRounding = Rounding.builder(Rounding.DateTimeUnit.YEAR_OF_CENTURY).timeZone(tz).build()__        assertThat(tzRounding.round(time("2014-11-11T17:00:00", tz)),_            isDate(tzRounding.round(time("2014-08-11T17:00:00", tz)), tz))__    };special,test,for,dst,switch,from,9491;public,void,test,ambiguous,hours,after,dstswitch,rounding,tz,rounding,final,zone,id,tz,zone,id,of,asia,jerusalem,tz,rounding,rounding,builder,rounding,date,time,unit,time,zone,tz,build,assert,that,tz,rounding,round,time,2014,10,26t00,30,00,03,00,is,date,time,2014,10,26t00,00,00,03,00,tz,assert,that,tz,rounding,round,time,2014,10,26t01,30,00,03,00,is,date,time,2014,10,26t01,00,00,03,00,tz,assert,that,time,2014,10,26t03,00,00,03,00,is,date,time,2014,10,26t02,00,00,02,00,tz,assert,that,tz,rounding,round,time,2014,10,26t01,30,00,02,00,is,date,time,2014,10,26t01,00,00,02,00,tz,assert,that,tz,rounding,round,time,2014,10,26t02,30,00,02,00,is,date,time,2014,10,26t02,00,00,02,00,tz,tz,rounding,rounding,builder,rounding,date,time,unit,time,zone,tz,build,assert,that,tz,rounding,round,time,2014,11,11t17,00,00,tz,is,date,time,2014,11,11t00,00,00,tz,tz,assert,that,tz,rounding,round,time,2014,08,11t17,00,00,tz,is,date,time,2014,08,11t00,00,00,tz,tz,assert,that,tz,rounding,round,time,2014,10,26t17,00,00,tz,is,date,time,2014,10,26t00,00,00,tz,tz,assert,that,tz,rounding,round,time,2015,03,27t17,00,00,tz,is,date,time,2015,03,27t00,00,00,tz,tz,tz,rounding,rounding,builder,rounding,date,time,unit,time,zone,tz,build,assert,that,tz,rounding,round,time,2014,11,11t17,00,00,tz,is,date,time,2014,11,01t00,00,00,tz,tz,assert,that,tz,rounding,round,time,2014,10,10t17,00,00,tz,is,date,time,2014,10,01t00,00,00,tz,tz,tz,rounding,rounding,builder,rounding,date,time,unit,time,zone,tz,build,assert,that,tz,rounding,round,time,2014,11,11t17,00,00,tz,is,date,time,2014,01,01t00,00,00,tz,tz,tz,rounding,rounding,builder,rounding,date,time,unit,time,zone,tz,build,assert,that,tz,rounding,round,time,2014,11,11t17,00,00,tz,is,date,tz,rounding,round,time,2014,08,11t17,00,00,tz,tz
RoundingTests -> public void testAmbiguousHoursAfterDSTSwitch();1549876539;special test for DST switch from #9491;public void testAmbiguousHoursAfterDSTSwitch() {_        Rounding tzRounding__        final ZoneId tz = ZoneId.of("Asia/Jerusalem")__        tzRounding = Rounding.builder(Rounding.DateTimeUnit.HOUR_OF_DAY).timeZone(tz).build()__        assertThat(tzRounding.round(time("2014-10-26T00:30:00+03:00")), isDate(time("2014-10-26T00:00:00+03:00"), tz))__        assertThat(tzRounding.round(time("2014-10-26T01:30:00+03:00")), isDate(time("2014-10-26T01:00:00+03:00"), tz))__        _        assertThat(time("2014-10-26T03:00:00+03:00"), isDate(time("2014-10-26T02:00:00+02:00"), tz))__        assertThat(tzRounding.round(time("2014-10-26T01:30:00+02:00")), isDate(time("2014-10-26T01:00:00+02:00"), tz))__        assertThat(tzRounding.round(time("2014-10-26T02:30:00+02:00")), isDate(time("2014-10-26T02:00:00+02:00"), tz))___        _        tzRounding = Rounding.builder(Rounding.DateTimeUnit.DAY_OF_MONTH).timeZone(tz).build()__        assertThat(tzRounding.round(time("2014-11-11T17:00:00", tz)), isDate(time("2014-11-11T00:00:00", tz), tz))__        _        assertThat(tzRounding.round(time("2014-08-11T17:00:00", tz)), isDate(time("2014-08-11T00:00:00", tz), tz))__        _        assertThat(tzRounding.round(time("2014-10-26T17:00:00", tz)), isDate(time("2014-10-26T00:00:00", tz), tz))__        _        assertThat(tzRounding.round(time("2015-03-27T17:00:00", tz)), isDate(time("2015-03-27T00:00:00", tz), tz))___        _        tzRounding = Rounding.builder(Rounding.DateTimeUnit.MONTH_OF_YEAR).timeZone(tz).build()__        assertThat(tzRounding.round(time("2014-11-11T17:00:00", tz)), isDate(time("2014-11-01T00:00:00", tz), tz))__        _        assertThat(tzRounding.round(time("2014-10-10T17:00:00", tz)), isDate(time("2014-10-01T00:00:00", tz), tz))___        _        tzRounding = Rounding.builder(Rounding.DateTimeUnit.YEAR_OF_CENTURY).timeZone(tz).build()__        assertThat(tzRounding.round(time("2014-11-11T17:00:00", tz)), isDate(time("2014-01-01T00:00:00", tz), tz))___        _        tzRounding = Rounding.builder(Rounding.DateTimeUnit.YEAR_OF_CENTURY).timeZone(tz).build()__        assertThat(tzRounding.round(time("2014-11-11T17:00:00", tz)),_            isDate(tzRounding.round(time("2014-08-11T17:00:00", tz)), tz))__    };special,test,for,dst,switch,from,9491;public,void,test,ambiguous,hours,after,dstswitch,rounding,tz,rounding,final,zone,id,tz,zone,id,of,asia,jerusalem,tz,rounding,rounding,builder,rounding,date,time,unit,time,zone,tz,build,assert,that,tz,rounding,round,time,2014,10,26t00,30,00,03,00,is,date,time,2014,10,26t00,00,00,03,00,tz,assert,that,tz,rounding,round,time,2014,10,26t01,30,00,03,00,is,date,time,2014,10,26t01,00,00,03,00,tz,assert,that,time,2014,10,26t03,00,00,03,00,is,date,time,2014,10,26t02,00,00,02,00,tz,assert,that,tz,rounding,round,time,2014,10,26t01,30,00,02,00,is,date,time,2014,10,26t01,00,00,02,00,tz,assert,that,tz,rounding,round,time,2014,10,26t02,30,00,02,00,is,date,time,2014,10,26t02,00,00,02,00,tz,tz,rounding,rounding,builder,rounding,date,time,unit,time,zone,tz,build,assert,that,tz,rounding,round,time,2014,11,11t17,00,00,tz,is,date,time,2014,11,11t00,00,00,tz,tz,assert,that,tz,rounding,round,time,2014,08,11t17,00,00,tz,is,date,time,2014,08,11t00,00,00,tz,tz,assert,that,tz,rounding,round,time,2014,10,26t17,00,00,tz,is,date,time,2014,10,26t00,00,00,tz,tz,assert,that,tz,rounding,round,time,2015,03,27t17,00,00,tz,is,date,time,2015,03,27t00,00,00,tz,tz,tz,rounding,rounding,builder,rounding,date,time,unit,time,zone,tz,build,assert,that,tz,rounding,round,time,2014,11,11t17,00,00,tz,is,date,time,2014,11,01t00,00,00,tz,tz,assert,that,tz,rounding,round,time,2014,10,10t17,00,00,tz,is,date,time,2014,10,01t00,00,00,tz,tz,tz,rounding,rounding,builder,rounding,date,time,unit,time,zone,tz,build,assert,that,tz,rounding,round,time,2014,11,11t17,00,00,tz,is,date,time,2014,01,01t00,00,00,tz,tz,tz,rounding,rounding,builder,rounding,date,time,unit,time,zone,tz,build,assert,that,tz,rounding,round,time,2014,11,11t17,00,00,tz,is,date,tz,rounding,round,time,2014,08,11t17,00,00,tz,tz
