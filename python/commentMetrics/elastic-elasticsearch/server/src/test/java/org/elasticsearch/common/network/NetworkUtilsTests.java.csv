commented;modifiers;parameterAmount;loc;comment;code
true;public;0;6;/**  * test sort key order respects PREFER_IPV4  */ ;/**  * test sort key order respects PREFER_IPV4  */ public void testSortKey() throws Exception {     InetAddress localhostv4 = InetAddress.getByName("127.0.0.1").     InetAddress localhostv6 = InetAddress.getByName("::1").     assertTrue(NetworkUtils.sortKey(localhostv4, false) < NetworkUtils.sortKey(localhostv6, false)).     assertTrue(NetworkUtils.sortKey(localhostv6, true) < NetworkUtils.sortKey(localhostv4, true)). }
true;public;0;13;/**  * test ordinary addresses sort before private addresses  */ ;/**  * test ordinary addresses sort before private addresses  */ public void testSortKeySiteLocal() throws Exception {     InetAddress siteLocal = InetAddress.getByName("172.16.0.1").     assert siteLocal.isSiteLocalAddress().     InetAddress ordinary = InetAddress.getByName("192.192.192.192").     assertTrue(NetworkUtils.sortKey(ordinary, true) < NetworkUtils.sortKey(siteLocal, true)).     assertTrue(NetworkUtils.sortKey(ordinary, false) < NetworkUtils.sortKey(siteLocal, false)).     InetAddress siteLocal6 = InetAddress.getByName("fec0::1").     assert siteLocal6.isSiteLocalAddress().     InetAddress ordinary6 = InetAddress.getByName("fddd::1").     assertTrue(NetworkUtils.sortKey(ordinary6, true) < NetworkUtils.sortKey(siteLocal6, true)).     assertTrue(NetworkUtils.sortKey(ordinary6, false) < NetworkUtils.sortKey(siteLocal6, false)). }
true;public;0;7;/**  * test private addresses sort before link local addresses  */ ;/**  * test private addresses sort before link local addresses  */ public void testSortKeyLinkLocal() throws Exception {     InetAddress linkLocal = InetAddress.getByName("fe80::1").     assert linkLocal.isLinkLocalAddress().     InetAddress ordinary = InetAddress.getByName("fddd::1").     assertTrue(NetworkUtils.sortKey(ordinary, true) < NetworkUtils.sortKey(linkLocal, true)).     assertTrue(NetworkUtils.sortKey(ordinary, false) < NetworkUtils.sortKey(linkLocal, false)). }
true;public;0;5;/**  * Test filtering out ipv4/ipv6 addresses  */ ;/**  * Test filtering out ipv4/ipv6 addresses  */ public void testFilter() throws Exception {     InetAddress[] addresses = { InetAddress.getByName("::1"), InetAddress.getByName("127.0.0.1") }.     assertArrayEquals(new InetAddress[] { InetAddress.getByName("127.0.0.1") }, NetworkUtils.filterIPV4(addresses)).     assertArrayEquals(new InetAddress[] { InetAddress.getByName("::1") }, NetworkUtils.filterIPV6(addresses)). }
true;public;0;12;/**  * Test that selecting by name is possible and properly matches the addresses on all interfaces and virtual  * interfaces.  *  * Note that to avoid that this test fails when interfaces are down or they do not have addresses assigned to them,  * they are ignored.  */ ;/**  * Test that selecting by name is possible and properly matches the addresses on all interfaces and virtual  * interfaces.  *  * Note that to avoid that this test fails when interfaces are down or they do not have addresses assigned to them,  * they are ignored.  */ public void testAddressInterfaceLookup() throws Exception {     for (NetworkInterface netIf : NetworkUtils.getInterfaces()) {         if (!netIf.isUp() || Collections.list(netIf.getInetAddresses()).isEmpty()) {             continue.         }         String name = netIf.getName().         InetAddress[] expectedAddresses = Collections.list(netIf.getInetAddresses()).toArray(new InetAddress[0]).         InetAddress[] foundAddresses = NetworkUtils.getAddressesForInterface(name).         assertArrayEquals(expectedAddresses, foundAddresses).     } }
false;public;0;5;;public void testNonExistingInterface() throws Exception {     IllegalArgumentException exception = expectThrows(IllegalArgumentException.class, () -> NetworkUtils.getAddressesForInterface("non-existing")).     assertThat(exception.getMessage(), containsString("No interface named 'non-existing' found")). }
