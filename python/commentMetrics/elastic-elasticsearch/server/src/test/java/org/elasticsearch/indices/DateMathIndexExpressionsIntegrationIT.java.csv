commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setNow() {     now = ZonedDateTime.now(ZoneOffset.UTC). }
true;public;1;14;/**  * the internal cluster calls System.nanoTime() and System.currentTimeMillis() during evaluations of requests  * that need date-math index resolution. These are not mockable in these tests. As is, executing requests as-is  * in these test cases can potentially result in invalid responses when day-boundaries are hit mid test run. Instead  * of failing when index resolution with `now` is one day off, this method wraps calls with the assumption that  * the day did not change during the test run.  */ ;/**  * the internal cluster calls System.nanoTime() and System.currentTimeMillis() during evaluations of requests  * that need date-math index resolution. These are not mockable in these tests. As is, executing requests as-is  * in these test cases can potentially result in invalid responses when day-boundaries are hit mid test run. Instead  * of failing when index resolution with `now` is one day off, this method wraps calls with the assumption that  * the day did not change during the test run.  */ public <Q extends ActionRequest, R extends ActionResponse> R dateSensitiveGet(ActionRequestBuilder<Q, R> builder) {     Runnable dayChangeAssumption = () -> assumeTrue("day changed between requests", ZonedDateTime.now(ZoneOffset.UTC).getDayOfYear() == now.getDayOfYear()).     R response.     try {         response = builder.get().     } catch (IndexNotFoundException e) {         // index resolver throws this if it does not find the exact index due to day changes         dayChangeAssumption.run().         throw e.     }     dayChangeAssumption.run().     return response. }
false;public;0;65;;public void testIndexNameDateMathExpressions() {     String index1 = ".marvel-" + DateTimeFormatter.ofPattern("yyyy.MM.dd", Locale.ROOT).format(now).     String index2 = ".marvel-" + DateTimeFormatter.ofPattern("yyyy.MM.dd", Locale.ROOT).format(now.minusDays(1)).     String index3 = ".marvel-" + DateTimeFormatter.ofPattern("yyyy.MM.dd", Locale.ROOT).format(now.minusDays(2)).     createIndex(index1, index2, index3).     GetSettingsResponse getSettingsResponse = dateSensitiveGet(client().admin().indices().prepareGetSettings(index1, index2, index3)).     assertEquals(index1, getSettingsResponse.getSetting(index1, IndexMetaData.SETTING_INDEX_PROVIDED_NAME)).     assertEquals(index2, getSettingsResponse.getSetting(index2, IndexMetaData.SETTING_INDEX_PROVIDED_NAME)).     assertEquals(index3, getSettingsResponse.getSetting(index3, IndexMetaData.SETTING_INDEX_PROVIDED_NAME)).     String dateMathExp1 = "<.marvel-{now/d}>".     String dateMathExp2 = "<.marvel-{now/d-1d}>".     String dateMathExp3 = "<.marvel-{now/d-2d}>".     client().prepareIndex(dateMathExp1, "type", "1").setSource("{}", XContentType.JSON).get().     client().prepareIndex(dateMathExp2, "type", "2").setSource("{}", XContentType.JSON).get().     client().prepareIndex(dateMathExp3, "type", "3").setSource("{}", XContentType.JSON).get().     refresh().     SearchResponse searchResponse = dateSensitiveGet(client().prepareSearch(dateMathExp1, dateMathExp2, dateMathExp3)).     assertHitCount(searchResponse, 3).     assertSearchHits(searchResponse, "1", "2", "3").     GetResponse getResponse = dateSensitiveGet(client().prepareGet(dateMathExp1, "type", "1")).     assertThat(getResponse.isExists(), is(true)).     assertThat(getResponse.getId(), equalTo("1")).     getResponse = dateSensitiveGet(client().prepareGet(dateMathExp2, "type", "2")).     assertThat(getResponse.isExists(), is(true)).     assertThat(getResponse.getId(), equalTo("2")).     getResponse = dateSensitiveGet(client().prepareGet(dateMathExp3, "type", "3")).     assertThat(getResponse.isExists(), is(true)).     assertThat(getResponse.getId(), equalTo("3")).     MultiGetResponse mgetResponse = dateSensitiveGet(client().prepareMultiGet().add(dateMathExp1, "type", "1").add(dateMathExp2, "type", "2").add(dateMathExp3, "type", "3")).     assertThat(mgetResponse.getResponses()[0].getResponse().isExists(), is(true)).     assertThat(mgetResponse.getResponses()[0].getResponse().getId(), equalTo("1")).     assertThat(mgetResponse.getResponses()[1].getResponse().isExists(), is(true)).     assertThat(mgetResponse.getResponses()[1].getResponse().getId(), equalTo("2")).     assertThat(mgetResponse.getResponses()[2].getResponse().isExists(), is(true)).     assertThat(mgetResponse.getResponses()[2].getResponse().getId(), equalTo("3")).     IndicesStatsResponse indicesStatsResponse = dateSensitiveGet(client().admin().indices().prepareStats(dateMathExp1, dateMathExp2, dateMathExp3)).     assertThat(indicesStatsResponse.getIndex(index1), notNullValue()).     assertThat(indicesStatsResponse.getIndex(index2), notNullValue()).     assertThat(indicesStatsResponse.getIndex(index3), notNullValue()).     DeleteResponse deleteResponse = dateSensitiveGet(client().prepareDelete(dateMathExp1, "type", "1")).     assertEquals(DocWriteResponse.Result.DELETED, deleteResponse.getResult()).     assertThat(deleteResponse.getId(), equalTo("1")).     deleteResponse = dateSensitiveGet(client().prepareDelete(dateMathExp2, "type", "2")).     assertEquals(DocWriteResponse.Result.DELETED, deleteResponse.getResult()).     assertThat(deleteResponse.getId(), equalTo("2")).     deleteResponse = dateSensitiveGet(client().prepareDelete(dateMathExp3, "type", "3")).     assertEquals(DocWriteResponse.Result.DELETED, deleteResponse.getResult()).     assertThat(deleteResponse.getId(), equalTo("3")). }
false;public;0;23;;public void testAutoCreateIndexWithDateMathExpression() {     String index1 = ".marvel-" + DateTimeFormatter.ofPattern("yyyy.MM.dd", Locale.ROOT).format(now).     String index2 = ".marvel-" + DateTimeFormatter.ofPattern("yyyy.MM.dd", Locale.ROOT).format(now.minusDays(1)).     String index3 = ".marvel-" + DateTimeFormatter.ofPattern("yyyy.MM.dd", Locale.ROOT).format(now.minusDays(2)).     String dateMathExp1 = "<.marvel-{now/d}>".     String dateMathExp2 = "<.marvel-{now/d-1d}>".     String dateMathExp3 = "<.marvel-{now/d-2d}>".     client().prepareIndex(dateMathExp1, "type", "1").setSource("{}", XContentType.JSON).get().     client().prepareIndex(dateMathExp2, "type", "2").setSource("{}", XContentType.JSON).get().     client().prepareIndex(dateMathExp3, "type", "3").setSource("{}", XContentType.JSON).get().     refresh().     SearchResponse searchResponse = dateSensitiveGet(client().prepareSearch(dateMathExp1, dateMathExp2, dateMathExp3)).     assertHitCount(searchResponse, 3).     assertSearchHits(searchResponse, "1", "2", "3").     IndicesStatsResponse indicesStatsResponse = dateSensitiveGet(client().admin().indices().prepareStats(dateMathExp1, dateMathExp2, dateMathExp3)).     assertThat(indicesStatsResponse.getIndex(index1), notNullValue()).     assertThat(indicesStatsResponse.getIndex(index2), notNullValue()).     assertThat(indicesStatsResponse.getIndex(index3), notNullValue()). }
false;public;0;20;;public void testCreateIndexWithDateMathExpression() {     String index1 = ".marvel-" + DateTimeFormatter.ofPattern("yyyy.MM.dd", Locale.ROOT).format(now).     String index2 = ".marvel-" + DateTimeFormatter.ofPattern("yyyy.MM.dd", Locale.ROOT).format(now.minusDays(1)).     String index3 = ".marvel-" + DateTimeFormatter.ofPattern("yyyy.MM.dd", Locale.ROOT).format(now.minusDays(2)).     String dateMathExp1 = "<.marvel-{now/d}>".     String dateMathExp2 = "<.marvel-{now/d-1d}>".     String dateMathExp3 = "<.marvel-{now/d-2d}>".     createIndex(dateMathExp1, dateMathExp2, dateMathExp3).     GetSettingsResponse getSettingsResponse = dateSensitiveGet(client().admin().indices().prepareGetSettings(index1, index2, index3)).     assertEquals(dateMathExp1, getSettingsResponse.getSetting(index1, IndexMetaData.SETTING_INDEX_PROVIDED_NAME)).     assertEquals(dateMathExp2, getSettingsResponse.getSetting(index2, IndexMetaData.SETTING_INDEX_PROVIDED_NAME)).     assertEquals(dateMathExp3, getSettingsResponse.getSetting(index3, IndexMetaData.SETTING_INDEX_PROVIDED_NAME)).     ClusterState clusterState = client().admin().cluster().prepareState().get().getState().     assertThat(clusterState.metaData().index(index1), notNullValue()).     assertThat(clusterState.metaData().index(index2), notNullValue()).     assertThat(clusterState.metaData().index(index3), notNullValue()). }
