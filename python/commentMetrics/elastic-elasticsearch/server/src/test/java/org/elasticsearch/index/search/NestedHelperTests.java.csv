commented;modifiers;parameterAmount;loc;comment;code
false;public;0;52;;@Override public void setUp() throws Exception {     super.setUp().     XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("foo").field("type", "keyword").endObject().startObject("foo2").field("type", "long").endObject().startObject("nested1").field("type", "nested").startObject("properties").startObject("foo").field("type", "keyword").endObject().startObject("foo2").field("type", "long").endObject().endObject().endObject().startObject("nested2").field("type", "nested").field("include_in_parent", true).startObject("properties").startObject("foo").field("type", "keyword").endObject().startObject("foo2").field("type", "long").endObject().endObject().endObject().startObject("nested3").field("type", "nested").field("include_in_root", true).startObject("properties").startObject("foo").field("type", "keyword").endObject().startObject("foo2").field("type", "long").endObject().endObject().endObject().endObject().endObject().endObject().     indexService = createIndex("index", Settings.EMPTY, "type", mapping).     mapperService = indexService.mapperService(). }
false;public;0;7;;public void testMatchAll() {     assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(new MatchAllDocsQuery())).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(new MatchAllDocsQuery(), "nested1")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(new MatchAllDocsQuery(), "nested2")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(new MatchAllDocsQuery(), "nested3")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(new MatchAllDocsQuery(), "nested_missing")). }
false;public;0;7;;public void testMatchNo() {     assertFalse(new NestedHelper(mapperService).mightMatchNestedDocs(new MatchNoDocsQuery())).     assertFalse(new NestedHelper(mapperService).mightMatchNonNestedDocs(new MatchNoDocsQuery(), "nested1")).     assertFalse(new NestedHelper(mapperService).mightMatchNonNestedDocs(new MatchNoDocsQuery(), "nested2")).     assertFalse(new NestedHelper(mapperService).mightMatchNonNestedDocs(new MatchNoDocsQuery(), "nested3")).     assertFalse(new NestedHelper(mapperService).mightMatchNonNestedDocs(new MatchNoDocsQuery(), "nested_missing")). }
false;public;0;29;;public void testTermsQuery() {     Query termsQuery = mapperService.fullName("foo").termsQuery(Collections.singletonList("bar"), null).     assertFalse(new NestedHelper(mapperService).mightMatchNestedDocs(termsQuery)).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, "nested1")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, "nested2")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, "nested3")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, "nested_missing")).     termsQuery = mapperService.fullName("nested1.foo").termsQuery(Collections.singletonList("bar"), null).     assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(termsQuery)).     assertFalse(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, "nested1")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, "nested2")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, "nested3")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, "nested_missing")).     termsQuery = mapperService.fullName("nested2.foo").termsQuery(Collections.singletonList("bar"), null).     assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(termsQuery)).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, "nested1")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, "nested2")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, "nested3")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, "nested_missing")).     termsQuery = mapperService.fullName("nested3.foo").termsQuery(Collections.singletonList("bar"), null).     assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(termsQuery)).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, "nested1")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, "nested2")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, "nested3")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, "nested_missing")). }
false;public;0;29;;public void testTermQuery() {     Query termQuery = mapperService.fullName("foo").termQuery("bar", null).     assertFalse(new NestedHelper(mapperService).mightMatchNestedDocs(termQuery)).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termQuery, "nested1")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termQuery, "nested2")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termQuery, "nested3")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termQuery, "nested_missing")).     termQuery = mapperService.fullName("nested1.foo").termQuery("bar", null).     assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(termQuery)).     assertFalse(new NestedHelper(mapperService).mightMatchNonNestedDocs(termQuery, "nested1")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termQuery, "nested2")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termQuery, "nested3")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termQuery, "nested_missing")).     termQuery = mapperService.fullName("nested2.foo").termQuery("bar", null).     assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(termQuery)).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termQuery, "nested1")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termQuery, "nested2")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termQuery, "nested3")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termQuery, "nested_missing")).     termQuery = mapperService.fullName("nested3.foo").termQuery("bar", null).     assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(termQuery)).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termQuery, "nested1")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termQuery, "nested2")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termQuery, "nested3")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termQuery, "nested_missing")). }
false;public;0;29;;public void testRangeQuery() {     Query rangeQuery = mapperService.fullName("foo2").rangeQuery(2, 5, true, true, null, null, null, null).     assertFalse(new NestedHelper(mapperService).mightMatchNestedDocs(rangeQuery)).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, "nested1")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, "nested2")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, "nested3")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, "nested_missing")).     rangeQuery = mapperService.fullName("nested1.foo2").rangeQuery(2, 5, true, true, null, null, null, null).     assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(rangeQuery)).     assertFalse(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, "nested1")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, "nested2")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, "nested3")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, "nested_missing")).     rangeQuery = mapperService.fullName("nested2.foo2").rangeQuery(2, 5, true, true, null, null, null, null).     assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(rangeQuery)).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, "nested1")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, "nested2")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, "nested3")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, "nested_missing")).     rangeQuery = mapperService.fullName("nested3.foo2").rangeQuery(2, 5, true, true, null, null, null, null).     assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(rangeQuery)).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, "nested1")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, "nested2")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, "nested3")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, "nested_missing")). }
false;public;0;57;;public void testDisjunction() {     BooleanQuery bq = new BooleanQuery.Builder().add(new TermQuery(new Term("foo", "bar")), Occur.SHOULD).add(new TermQuery(new Term("foo", "baz")), Occur.SHOULD).build().     assertFalse(new NestedHelper(mapperService).mightMatchNestedDocs(bq)).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(bq, "nested1")).     bq = new BooleanQuery.Builder().add(new TermQuery(new Term("nested1.foo", "bar")), Occur.SHOULD).add(new TermQuery(new Term("nested1.foo", "baz")), Occur.SHOULD).build().     assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(bq)).     assertFalse(new NestedHelper(mapperService).mightMatchNonNestedDocs(bq, "nested1")).     bq = new BooleanQuery.Builder().add(new TermQuery(new Term("nested2.foo", "bar")), Occur.SHOULD).add(new TermQuery(new Term("nested2.foo", "baz")), Occur.SHOULD).build().     assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(bq)).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(bq, "nested2")).     bq = new BooleanQuery.Builder().add(new TermQuery(new Term("nested3.foo", "bar")), Occur.SHOULD).add(new TermQuery(new Term("nested3.foo", "baz")), Occur.SHOULD).build().     assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(bq)).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(bq, "nested3")).     bq = new BooleanQuery.Builder().add(new TermQuery(new Term("foo", "bar")), Occur.SHOULD).add(new MatchAllDocsQuery(), Occur.SHOULD).build().     assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(bq)).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(bq, "nested1")).     bq = new BooleanQuery.Builder().add(new TermQuery(new Term("nested1.foo", "bar")), Occur.SHOULD).add(new MatchAllDocsQuery(), Occur.SHOULD).build().     assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(bq)).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(bq, "nested1")).     bq = new BooleanQuery.Builder().add(new TermQuery(new Term("nested2.foo", "bar")), Occur.SHOULD).add(new MatchAllDocsQuery(), Occur.SHOULD).build().     assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(bq)).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(bq, "nested2")).     bq = new BooleanQuery.Builder().add(new TermQuery(new Term("nested3.foo", "bar")), Occur.SHOULD).add(new MatchAllDocsQuery(), Occur.SHOULD).build().     assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(bq)).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(bq, "nested3")). }
false;private,static;0;3;;private static Occur requiredOccur() {     return random().nextBoolean() ? Occur.MUST : Occur.FILTER. }
false;public;0;57;;public void testConjunction() {     BooleanQuery bq = new BooleanQuery.Builder().add(new TermQuery(new Term("foo", "bar")), requiredOccur()).add(new MatchAllDocsQuery(), requiredOccur()).build().     assertFalse(new NestedHelper(mapperService).mightMatchNestedDocs(bq)).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(bq, "nested1")).     bq = new BooleanQuery.Builder().add(new TermQuery(new Term("nested1.foo", "bar")), requiredOccur()).add(new MatchAllDocsQuery(), requiredOccur()).build().     assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(bq)).     assertFalse(new NestedHelper(mapperService).mightMatchNonNestedDocs(bq, "nested1")).     bq = new BooleanQuery.Builder().add(new TermQuery(new Term("nested2.foo", "bar")), requiredOccur()).add(new MatchAllDocsQuery(), requiredOccur()).build().     assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(bq)).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(bq, "nested2")).     bq = new BooleanQuery.Builder().add(new TermQuery(new Term("nested3.foo", "bar")), requiredOccur()).add(new MatchAllDocsQuery(), requiredOccur()).build().     assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(bq)).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(bq, "nested3")).     bq = new BooleanQuery.Builder().add(new MatchAllDocsQuery(), requiredOccur()).add(new MatchAllDocsQuery(), requiredOccur()).build().     assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(bq)).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(bq, "nested1")).     bq = new BooleanQuery.Builder().add(new MatchAllDocsQuery(), requiredOccur()).add(new MatchAllDocsQuery(), requiredOccur()).build().     assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(bq)).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(bq, "nested1")).     bq = new BooleanQuery.Builder().add(new MatchAllDocsQuery(), requiredOccur()).add(new MatchAllDocsQuery(), requiredOccur()).build().     assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(bq)).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(bq, "nested2")).     bq = new BooleanQuery.Builder().add(new MatchAllDocsQuery(), requiredOccur()).add(new MatchAllDocsQuery(), requiredOccur()).build().     assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(bq)).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(bq, "nested3")). }
false;public;0;63;;public void testNested() throws IOException {     QueryShardContext context = indexService.newQueryShardContext(0, new MultiReader(), () -> 0, null).     NestedQueryBuilder queryBuilder = new NestedQueryBuilder("nested1", new MatchAllQueryBuilder(), ScoreMode.Avg).     ESToParentBlockJoinQuery query = (ESToParentBlockJoinQuery) queryBuilder.toQuery(context).     Query expectedChildQuery = new BooleanQuery.Builder().add(new MatchAllDocsQuery(), Occur.MUST).add(new TermQuery(new Term("_type", "__nested1")), Occur.FILTER).build().     assertEquals(expectedChildQuery, query.getChildQuery()).     assertFalse(new NestedHelper(mapperService).mightMatchNestedDocs(query)).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(query, "nested1")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(query, "nested2")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(query, "nested3")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(query, "nested_missing")).     queryBuilder = new NestedQueryBuilder("nested1", new TermQueryBuilder("nested1.foo", "bar"), ScoreMode.Avg).     query = (ESToParentBlockJoinQuery) queryBuilder.toQuery(context).     // this time we do not add a filter since the inner query only matches inner docs     expectedChildQuery = new TermQuery(new Term("nested1.foo", "bar")).     assertEquals(expectedChildQuery, query.getChildQuery()).     assertFalse(new NestedHelper(mapperService).mightMatchNestedDocs(query)).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(query, "nested1")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(query, "nested2")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(query, "nested3")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(query, "nested_missing")).     queryBuilder = new NestedQueryBuilder("nested2", new TermQueryBuilder("nested2.foo", "bar"), ScoreMode.Avg).     query = (ESToParentBlockJoinQuery) queryBuilder.toQuery(context).     // we need to add the filter again because of include_in_parent     expectedChildQuery = new BooleanQuery.Builder().add(new TermQuery(new Term("nested2.foo", "bar")), Occur.MUST).add(new TermQuery(new Term("_type", "__nested2")), Occur.FILTER).build().     assertEquals(expectedChildQuery, query.getChildQuery()).     assertFalse(new NestedHelper(mapperService).mightMatchNestedDocs(query)).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(query, "nested1")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(query, "nested2")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(query, "nested3")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(query, "nested_missing")).     queryBuilder = new NestedQueryBuilder("nested3", new TermQueryBuilder("nested3.foo", "bar"), ScoreMode.Avg).     query = (ESToParentBlockJoinQuery) queryBuilder.toQuery(context).     // we need to add the filter again because of include_in_root     expectedChildQuery = new BooleanQuery.Builder().add(new TermQuery(new Term("nested3.foo", "bar")), Occur.MUST).add(new TermQuery(new Term("_type", "__nested3")), Occur.FILTER).build().     assertEquals(expectedChildQuery, query.getChildQuery()).     assertFalse(new NestedHelper(mapperService).mightMatchNestedDocs(query)).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(query, "nested1")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(query, "nested2")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(query, "nested3")).     assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(query, "nested_missing")). }
