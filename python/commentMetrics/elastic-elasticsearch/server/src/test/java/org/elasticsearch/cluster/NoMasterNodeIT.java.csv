commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected int numberOfReplicas() {     return 2. }
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     return Collections.singletonList(MockTransportService.TestPlugin.class). }
false;public;0;97;;public void testNoMasterActions() throws Exception {     Settings settings = Settings.builder().put(AutoCreateIndex.AUTO_CREATE_INDEX_SETTING.getKey(), true).put(NoMasterBlockService.NO_MASTER_BLOCK_SETTING.getKey(), "all").build().     final TimeValue timeout = TimeValue.timeValueMillis(10).     final List<String> nodes = internalCluster().startNodes(3, settings).     createIndex("test").     client().admin().cluster().prepareHealth("test").setWaitForGreenStatus().execute().actionGet().     final NetworkDisruption disruptionScheme = new NetworkDisruption(new IsolateAllNodes(new HashSet<>(nodes)), new NetworkDisconnect()).     internalCluster().setDisruptionScheme(disruptionScheme).     disruptionScheme.startDisrupting().     final Client clientToMasterlessNode = client().     assertBusy(() -> {         ClusterState state = clientToMasterlessNode.admin().cluster().prepareState().setLocal(true).execute().actionGet().getState().         assertTrue(state.blocks().hasGlobalBlockWithId(NoMasterBlockService.NO_MASTER_BLOCK_ID)).     }).     assertThrows(clientToMasterlessNode.prepareGet("test", "type1", "1"), ClusterBlockException.class, RestStatus.SERVICE_UNAVAILABLE).     assertThrows(clientToMasterlessNode.prepareGet("no_index", "type1", "1"), ClusterBlockException.class, RestStatus.SERVICE_UNAVAILABLE).     assertThrows(clientToMasterlessNode.prepareMultiGet().add("test", "type1", "1"), ClusterBlockException.class, RestStatus.SERVICE_UNAVAILABLE).     assertThrows(clientToMasterlessNode.prepareMultiGet().add("no_index", "type1", "1"), ClusterBlockException.class, RestStatus.SERVICE_UNAVAILABLE).     assertThrows(clientToMasterlessNode.admin().indices().prepareAnalyze("test", "this is a test"), ClusterBlockException.class, RestStatus.SERVICE_UNAVAILABLE).     assertThrows(clientToMasterlessNode.admin().indices().prepareAnalyze("no_index", "this is a test"), ClusterBlockException.class, RestStatus.SERVICE_UNAVAILABLE).     assertThrows(clientToMasterlessNode.prepareSearch("test").setSize(0), ClusterBlockException.class, RestStatus.SERVICE_UNAVAILABLE).     assertThrows(clientToMasterlessNode.prepareSearch("no_index").setSize(0), ClusterBlockException.class, RestStatus.SERVICE_UNAVAILABLE).     checkUpdateAction(false, timeout, clientToMasterlessNode.prepareUpdate("test", "type1", "1").setScript(new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, "test script", Collections.emptyMap())).setTimeout(timeout)).     checkUpdateAction(true, timeout, clientToMasterlessNode.prepareUpdate("no_index", "type1", "1").setScript(new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, "test script", Collections.emptyMap())).setTimeout(timeout)).     checkWriteAction(clientToMasterlessNode.prepareIndex("test", "type1", "1").setSource(XContentFactory.jsonBuilder().startObject().endObject()).setTimeout(timeout)).     checkWriteAction(clientToMasterlessNode.prepareIndex("no_index", "type1", "1").setSource(XContentFactory.jsonBuilder().startObject().endObject()).setTimeout(timeout)).     BulkRequestBuilder bulkRequestBuilder = clientToMasterlessNode.prepareBulk().     bulkRequestBuilder.add(clientToMasterlessNode.prepareIndex("test", "type1", "1").setSource(XContentFactory.jsonBuilder().startObject().endObject())).     bulkRequestBuilder.add(clientToMasterlessNode.prepareIndex("test", "type1", "2").setSource(XContentFactory.jsonBuilder().startObject().endObject())).     bulkRequestBuilder.setTimeout(timeout).     checkWriteAction(bulkRequestBuilder).     bulkRequestBuilder = clientToMasterlessNode.prepareBulk().     bulkRequestBuilder.add(clientToMasterlessNode.prepareIndex("no_index", "type1", "1").setSource(XContentFactory.jsonBuilder().startObject().endObject())).     bulkRequestBuilder.add(clientToMasterlessNode.prepareIndex("no_index", "type1", "2").setSource(XContentFactory.jsonBuilder().startObject().endObject())).     bulkRequestBuilder.setTimeout(timeout).     checkWriteAction(bulkRequestBuilder).     disruptionScheme.stopDisrupting().     client().admin().cluster().prepareHealth().setWaitForGreenStatus().setWaitForNodes("3").execute().actionGet(). }
false;;3;14;;void checkUpdateAction(boolean autoCreateIndex, TimeValue timeout, ActionRequestBuilder<?, ?> builder) {     // we clean the metadata when loosing a master, therefore all operations on indices will auto create it, if allowed     try {         builder.get().         fail("expected ClusterBlockException or MasterNotDiscoveredException").     } catch (ClusterBlockException | MasterNotDiscoveredException e) {         if (e instanceof MasterNotDiscoveredException) {             assertTrue(autoCreateIndex).         } else {             assertFalse(autoCreateIndex).         }         assertThat(e.status(), equalTo(RestStatus.SERVICE_UNAVAILABLE)).     } }
false;;1;8;;void checkWriteAction(ActionRequestBuilder<?, ?> builder) {     try {         builder.get().         fail("Expected ClusterBlockException").     } catch (ClusterBlockException e) {         assertThat(e.status(), equalTo(RestStatus.SERVICE_UNAVAILABLE)).     } }
false;public;0;75;;public void testNoMasterActionsWriteMasterBlock() throws Exception {     Settings settings = Settings.builder().put(AutoCreateIndex.AUTO_CREATE_INDEX_SETTING.getKey(), false).put(NoMasterBlockService.NO_MASTER_BLOCK_SETTING.getKey(), "write").build().     final List<String> nodes = internalCluster().startNodes(3, settings).     prepareCreate("test1").setSettings(Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 2)).get().     prepareCreate("test2").setSettings(Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 3).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)).get().     client().admin().cluster().prepareHealth("_all").setWaitForGreenStatus().get().     client().prepareIndex("test1", "type1", "1").setSource("field", "value1").get().     client().prepareIndex("test2", "type1", "1").setSource("field", "value1").get().     refresh().     ensureSearchable("test1", "test2").     ClusterStateResponse clusterState = client().admin().cluster().prepareState().get().     logger.info("Cluster state:\n{}", clusterState.getState()).     final NetworkDisruption disruptionScheme = new NetworkDisruption(new IsolateAllNodes(new HashSet<>(nodes)), new NetworkDisconnect()).     internalCluster().setDisruptionScheme(disruptionScheme).     disruptionScheme.startDisrupting().     final Client clientToMasterlessNode = client().     assertTrue(awaitBusy(() -> {         ClusterState state = clientToMasterlessNode.admin().cluster().prepareState().setLocal(true).get().getState().         return state.blocks().hasGlobalBlockWithId(NoMasterBlockService.NO_MASTER_BLOCK_ID).     })).     GetResponse getResponse = clientToMasterlessNode.prepareGet("test1", "type1", "1").get().     assertExists(getResponse).     SearchResponse countResponse = clientToMasterlessNode.prepareSearch("test1").setAllowPartialSearchResults(true).setSize(0).get().     assertHitCount(countResponse, 1L).     logger.info("--> here 3").     SearchResponse searchResponse = clientToMasterlessNode.prepareSearch("test1").setAllowPartialSearchResults(true).get().     assertHitCount(searchResponse, 1L).     countResponse = clientToMasterlessNode.prepareSearch("test2").setAllowPartialSearchResults(true).setSize(0).get().     assertThat(countResponse.getTotalShards(), equalTo(3)).     assertThat(countResponse.getSuccessfulShards(), equalTo(1)).     TimeValue timeout = TimeValue.timeValueMillis(200).     long now = System.currentTimeMillis().     try {         clientToMasterlessNode.prepareUpdate("test1", "type1", "1").setDoc(Requests.INDEX_CONTENT_TYPE, "field", "value2").setTimeout(timeout).get().         fail("Expected ClusterBlockException").     } catch (ClusterBlockException e) {         assertThat(System.currentTimeMillis() - now, greaterThan(timeout.millis() - 50)).         assertThat(e.status(), equalTo(RestStatus.SERVICE_UNAVAILABLE)).     } catch (Exception e) {         logger.info("unexpected", e).         throw e.     }     try {         clientToMasterlessNode.prepareIndex("test1", "type1", "1").setSource(XContentFactory.jsonBuilder().startObject().endObject()).setTimeout(timeout).get().         fail("Expected ClusterBlockException").     } catch (ClusterBlockException e) {         assertThat(e.status(), equalTo(RestStatus.SERVICE_UNAVAILABLE)).     }     disruptionScheme.stopDisrupting().     client().admin().cluster().prepareHealth().setWaitForGreenStatus().setWaitForNodes("3").get(). }
