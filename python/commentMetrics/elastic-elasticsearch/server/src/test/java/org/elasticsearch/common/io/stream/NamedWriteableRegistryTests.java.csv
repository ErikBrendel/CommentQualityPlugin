commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getWriteableName() {     return "test". }
false;public;1;2;;@Override public void writeTo(StreamOutput out) throws IOException { }
false;public;0;3;;public void testEmpty() throws IOException {     // does not throw exception     new NamedWriteableRegistry(Collections.emptyList()). }
false;public;0;7;;public void testBasic() throws IOException {     NamedWriteableRegistry.Entry entry = new NamedWriteableRegistry.Entry(NamedWriteable.class, "test", DummyNamedWriteable::new).     NamedWriteableRegistry registry = new NamedWriteableRegistry(Collections.singletonList(entry)).     Writeable.Reader<? extends NamedWriteable> reader = registry.getReader(NamedWriteable.class, "test").     assertNotNull(reader.read(null)). }
false;public;0;7;;public void testDuplicates() throws IOException {     NamedWriteableRegistry.Entry entry = new NamedWriteableRegistry.Entry(NamedWriteable.class, "test", DummyNamedWriteable::new).     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new NamedWriteableRegistry(Arrays.asList(entry, entry))).     assertTrue(e.getMessage(), e.getMessage().contains("is already registered")). }
false;public;0;6;;public void testUnknownCategory() throws IOException {     NamedWriteableRegistry registry = new NamedWriteableRegistry(Collections.emptyList()).     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> registry.getReader(NamedWriteable.class, "test")).     assertTrue(e.getMessage(), e.getMessage().contains("Unknown NamedWriteable category [")). }
false;public;0;8;;public void testUnknownName() throws IOException {     NamedWriteableRegistry.Entry entry = new NamedWriteableRegistry.Entry(NamedWriteable.class, "test", DummyNamedWriteable::new).     NamedWriteableRegistry registry = new NamedWriteableRegistry(Collections.singletonList(entry)).     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> registry.getReader(NamedWriteable.class, "dne")).     assertTrue(e.getMessage(), e.getMessage().contains("Unknown NamedWriteable [")). }
