commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public long fileLength(String name) throws IOException {     numFileLengthCalls++.     return super.fileLength(name). }
false;public;0;53;;public void testBasics() throws IOException {     try (Directory dir = newDirectory()) {         try (IndexOutput out = dir.createOutput("quux", IOContext.DEFAULT)) {             out.writeBytes(new byte[11], 11).         }         LengthCountingDirectory countingDir = new LengthCountingDirectory(dir).         ByteSizeCachingDirectory cachingDir = new ByteSizeCachingDirectory(countingDir, new TimeValue(0)).         assertEquals(11, cachingDir.estimateSizeInBytes()).         assertEquals(11, cachingDir.estimateSizeInBytes()).         assertEquals(1, countingDir.numFileLengthCalls).         try (IndexOutput out = cachingDir.createOutput("foo", IOContext.DEFAULT)) {             out.writeBytes(new byte[5], 5).             cachingDir.estimateSizeInBytes().             // +2 because there are 3 files             assertEquals(3, countingDir.numFileLengthCalls).             // An index output is open so no caching             cachingDir.estimateSizeInBytes().             assertEquals(5, countingDir.numFileLengthCalls).         }         assertEquals(16, cachingDir.estimateSizeInBytes()).         assertEquals(7, countingDir.numFileLengthCalls).         assertEquals(16, cachingDir.estimateSizeInBytes()).         assertEquals(7, countingDir.numFileLengthCalls).         try (IndexOutput out = cachingDir.createTempOutput("bar", "baz", IOContext.DEFAULT)) {             out.writeBytes(new byte[4], 4).             cachingDir.estimateSizeInBytes().             assertEquals(10, countingDir.numFileLengthCalls).             // An index output is open so no caching             cachingDir.estimateSizeInBytes().             assertEquals(13, countingDir.numFileLengthCalls).         }         assertEquals(20, cachingDir.estimateSizeInBytes()).         // +3 because there are 3 files         assertEquals(16, countingDir.numFileLengthCalls).         assertEquals(20, cachingDir.estimateSizeInBytes()).         assertEquals(16, countingDir.numFileLengthCalls).         cachingDir.deleteFile("foo").         assertEquals(15, cachingDir.estimateSizeInBytes()).         // +2 because there are 2 files now         assertEquals(18, countingDir.numFileLengthCalls).         assertEquals(15, cachingDir.estimateSizeInBytes()).         assertEquals(18, countingDir.numFileLengthCalls).     } }
