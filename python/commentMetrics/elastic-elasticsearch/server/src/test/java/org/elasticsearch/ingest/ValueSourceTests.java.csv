commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;public void testDeepCopy() {     int iterations = scaledRandomIntBetween(8, 64).     for (int i = 0. i < iterations. i++) {         Map<String, Object> map = RandomDocumentPicks.randomSource(random()).         ValueSource valueSource = ValueSource.wrap(map, TestTemplateService.instance()).         Object copy = valueSource.copyAndResolve(Collections.emptyMap()).         assertThat("iteration: " + i, copy, equalTo(map)).         assertThat("iteration: " + i, copy, not(sameInstance(map))).     } }
false;public;0;12;;public void testCopyDoesNotChangeProvidedMap() {     Map<String, Object> myPreciousMap = new HashMap<>().     myPreciousMap.put("field2", "value2").     IngestDocument ingestDocument = new IngestDocument(new HashMap<>(), new HashMap<>()).     ingestDocument.setFieldValue(new TestTemplateService.MockTemplateScript.Factory("field1"), ValueSource.wrap(myPreciousMap, TestTemplateService.instance())).     ingestDocument.removeField("field1.field2").     assertThat(myPreciousMap.size(), equalTo(1)).     assertThat(myPreciousMap.get("field2"), equalTo("value2")). }
false;public;0;12;;public void testCopyDoesNotChangeProvidedList() {     List<String> myPreciousList = new ArrayList<>().     myPreciousList.add("value").     IngestDocument ingestDocument = new IngestDocument(new HashMap<>(), new HashMap<>()).     ingestDocument.setFieldValue(new TestTemplateService.MockTemplateScript.Factory("field1"), ValueSource.wrap(myPreciousList, TestTemplateService.instance())).     ingestDocument.removeField("field1.0").     assertThat(myPreciousList.size(), equalTo(1)).     assertThat(myPreciousList.get(0), equalTo("value")). }
false;public;0;8;;public void testNoScriptCompilation() {     ScriptService scriptService = mock(ScriptService.class).     when(scriptService.isLangSupported(anyString())).thenReturn(true).     String propertyValue = randomAlphaOfLength(10).     ValueSource result = ValueSource.wrap(propertyValue, scriptService).     assertThat(result.copyAndResolve(null), equalTo(propertyValue)).     verify(scriptService, times(0)).compile(any(), any()). }
false;public;0;10;;public void testScriptShouldCompile() {     ScriptService scriptService = mock(ScriptService.class).     when(scriptService.isLangSupported(anyString())).thenReturn(true).     String propertyValue = "{{" + randomAlphaOfLength(10) + "}}".     String compiledValue = randomAlphaOfLength(10).     when(scriptService.compile(any(), any())).thenReturn(new TestTemplateService.MockTemplateScript.Factory(compiledValue)).     ValueSource result = ValueSource.wrap(propertyValue, scriptService).     assertThat(result.copyAndResolve(Collections.emptyMap()), equalTo(compiledValue)).     verify(scriptService, times(1)).compile(any(), any()). }
