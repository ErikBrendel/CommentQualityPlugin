# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractShapeBuilderTestCase -> protected abstract SB createMutation(SB original) throws IOException_;1524684173;mutate the given shape so the returned shape is different;protected abstract SB createMutation(SB original) throws IOException_;mutate,the,given,shape,so,the,returned,shape,is,different;protected,abstract,sb,create,mutation,sb,original,throws,ioexception
AbstractShapeBuilderTestCase -> protected abstract SB createMutation(SB original) throws IOException_;1529916084;mutate the given shape so the returned shape is different;protected abstract SB createMutation(SB original) throws IOException_;mutate,the,given,shape,so,the,returned,shape,is,different;protected,abstract,sb,create,mutation,sb,original,throws,ioexception
AbstractShapeBuilderTestCase -> protected abstract SB createMutation(SB original) throws IOException_;1531179852;mutate the given shape so the returned shape is different;protected abstract SB createMutation(SB original) throws IOException_;mutate,the,given,shape,so,the,returned,shape,is,different;protected,abstract,sb,create,mutation,sb,original,throws,ioexception
AbstractShapeBuilderTestCase -> protected abstract SB createMutation(SB original) throws IOException_;1548434247;mutate the given shape so the returned shape is different;protected abstract SB createMutation(SB original) throws IOException_;mutate,the,given,shape,so,the,returned,shape,is,different;protected,abstract,sb,create,mutation,sb,original,throws,ioexception
AbstractShapeBuilderTestCase -> public void testEqualsAndHashcode() throws IOException;1524684173;Test equality and hashCode properties;public void testEqualsAndHashcode() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            checkEqualsAndHashCode(createTestShapeBuilder(), AbstractShapeBuilderTestCase::copyShape, this::createMutation)__        }_    };test,equality,and,hash,code,properties;public,void,test,equals,and,hashcode,throws,ioexception,for,int,runs,0,runs,runs,check,equals,and,hash,code,create,test,shape,builder,abstract,shape,builder,test,case,copy,shape,this,create,mutation
AbstractShapeBuilderTestCase -> public void testEqualsAndHashcode() throws IOException;1529916084;Test equality and hashCode properties;public void testEqualsAndHashcode() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            checkEqualsAndHashCode(createTestShapeBuilder(), AbstractShapeBuilderTestCase::copyShape, this::createMutation)__        }_    };test,equality,and,hash,code,properties;public,void,test,equals,and,hashcode,throws,ioexception,for,int,runs,0,runs,runs,check,equals,and,hash,code,create,test,shape,builder,abstract,shape,builder,test,case,copy,shape,this,create,mutation
AbstractShapeBuilderTestCase -> public void testEqualsAndHashcode() throws IOException;1531179852;Test equality and hashCode properties;public void testEqualsAndHashcode() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            checkEqualsAndHashCode(createTestShapeBuilder(), AbstractShapeBuilderTestCase::copyShape, this::createMutation)__        }_    };test,equality,and,hash,code,properties;public,void,test,equals,and,hashcode,throws,ioexception,for,int,runs,0,runs,runs,check,equals,and,hash,code,create,test,shape,builder,abstract,shape,builder,test,case,copy,shape,this,create,mutation
AbstractShapeBuilderTestCase -> public void testEqualsAndHashcode() throws IOException;1548434247;Test equality and hashCode properties;public void testEqualsAndHashcode() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            checkEqualsAndHashCode(createTestShapeBuilder(), AbstractShapeBuilderTestCase::copyShape, this::createMutation)__        }_    };test,equality,and,hash,code,properties;public,void,test,equals,and,hashcode,throws,ioexception,for,int,runs,0,runs,runs,check,equals,and,hash,code,create,test,shape,builder,abstract,shape,builder,test,case,copy,shape,this,create,mutation
AbstractShapeBuilderTestCase -> public void testSerialization() throws IOException;1524684173;Test serialization and deserialization of the test shape.;public void testSerialization() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            SB testShape = createTestShapeBuilder()__            SB deserializedShape = copyShape(testShape)__            assertEquals(testShape, deserializedShape)__            assertEquals(testShape.hashCode(), deserializedShape.hashCode())__            assertNotSame(testShape, deserializedShape)__        }_    };test,serialization,and,deserialization,of,the,test,shape;public,void,test,serialization,throws,ioexception,for,int,runs,0,runs,runs,sb,test,shape,create,test,shape,builder,sb,deserialized,shape,copy,shape,test,shape,assert,equals,test,shape,deserialized,shape,assert,equals,test,shape,hash,code,deserialized,shape,hash,code,assert,not,same,test,shape,deserialized,shape
AbstractShapeBuilderTestCase -> public void testSerialization() throws IOException;1529916084;Test serialization and deserialization of the test shape.;public void testSerialization() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            SB testShape = createTestShapeBuilder()__            SB deserializedShape = copyShape(testShape)__            assertEquals(testShape, deserializedShape)__            assertEquals(testShape.hashCode(), deserializedShape.hashCode())__            assertNotSame(testShape, deserializedShape)__        }_    };test,serialization,and,deserialization,of,the,test,shape;public,void,test,serialization,throws,ioexception,for,int,runs,0,runs,runs,sb,test,shape,create,test,shape,builder,sb,deserialized,shape,copy,shape,test,shape,assert,equals,test,shape,deserialized,shape,assert,equals,test,shape,hash,code,deserialized,shape,hash,code,assert,not,same,test,shape,deserialized,shape
AbstractShapeBuilderTestCase -> public void testSerialization() throws IOException;1531179852;Test serialization and deserialization of the test shape.;public void testSerialization() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            SB testShape = createTestShapeBuilder()__            SB deserializedShape = copyShape(testShape)__            assertEquals(testShape, deserializedShape)__            assertEquals(testShape.hashCode(), deserializedShape.hashCode())__            assertNotSame(testShape, deserializedShape)__        }_    };test,serialization,and,deserialization,of,the,test,shape;public,void,test,serialization,throws,ioexception,for,int,runs,0,runs,runs,sb,test,shape,create,test,shape,builder,sb,deserialized,shape,copy,shape,test,shape,assert,equals,test,shape,deserialized,shape,assert,equals,test,shape,hash,code,deserialized,shape,hash,code,assert,not,same,test,shape,deserialized,shape
AbstractShapeBuilderTestCase -> public void testSerialization() throws IOException;1548434247;Test serialization and deserialization of the test shape.;public void testSerialization() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            SB testShape = createTestShapeBuilder()__            SB deserializedShape = copyShape(testShape)__            assertEquals(testShape, deserializedShape)__            assertEquals(testShape.hashCode(), deserializedShape.hashCode())__            assertNotSame(testShape, deserializedShape)__        }_    };test,serialization,and,deserialization,of,the,test,shape;public,void,test,serialization,throws,ioexception,for,int,runs,0,runs,runs,sb,test,shape,create,test,shape,builder,sb,deserialized,shape,copy,shape,test,shape,assert,equals,test,shape,deserialized,shape,assert,equals,test,shape,hash,code,deserialized,shape,hash,code,assert,not,same,test,shape,deserialized,shape
AbstractShapeBuilderTestCase -> @BeforeClass     public static void init();1524684173;setup for the whole base test class;@BeforeClass_    public static void init() {_        if (namedWriteableRegistry == null) {_            namedWriteableRegistry = new NamedWriteableRegistry(GeoShapeType.getShapeWriteables())__        }_    };setup,for,the,whole,base,test,class;before,class,public,static,void,init,if,named,writeable,registry,null,named,writeable,registry,new,named,writeable,registry,geo,shape,type,get,shape,writeables
AbstractShapeBuilderTestCase -> @BeforeClass     public static void init();1529916084;setup for the whole base test class;@BeforeClass_    public static void init() {_        if (namedWriteableRegistry == null) {_            namedWriteableRegistry = new NamedWriteableRegistry(GeoShapeType.getShapeWriteables())__        }_    };setup,for,the,whole,base,test,class;before,class,public,static,void,init,if,named,writeable,registry,null,named,writeable,registry,new,named,writeable,registry,geo,shape,type,get,shape,writeables
AbstractShapeBuilderTestCase -> @BeforeClass     public static void init();1531179852;setup for the whole base test class;@BeforeClass_    public static void init() {_        if (namedWriteableRegistry == null) {_            namedWriteableRegistry = new NamedWriteableRegistry(GeoShapeType.getShapeWriteables())__        }_    };setup,for,the,whole,base,test,class;before,class,public,static,void,init,if,named,writeable,registry,null,named,writeable,registry,new,named,writeable,registry,geo,shape,type,get,shape,writeables
AbstractShapeBuilderTestCase -> @BeforeClass     public static void init();1548434247;setup for the whole base test class;@BeforeClass_    public static void init() {_        if (namedWriteableRegistry == null) {_            namedWriteableRegistry = new NamedWriteableRegistry(GeoShapeType.getShapeWriteables())__        }_    };setup,for,the,whole,base,test,class;before,class,public,static,void,init,if,named,writeable,registry,null,named,writeable,registry,new,named,writeable,registry,geo,shape,type,get,shape,writeables
AbstractShapeBuilderTestCase -> protected abstract SB createTestShapeBuilder()_;1524684173;create random shape that is put under test;protected abstract SB createTestShapeBuilder()_;create,random,shape,that,is,put,under,test;protected,abstract,sb,create,test,shape,builder
AbstractShapeBuilderTestCase -> protected abstract SB createTestShapeBuilder()_;1529916084;create random shape that is put under test;protected abstract SB createTestShapeBuilder()_;create,random,shape,that,is,put,under,test;protected,abstract,sb,create,test,shape,builder
AbstractShapeBuilderTestCase -> protected abstract SB createTestShapeBuilder()_;1531179852;create random shape that is put under test;protected abstract SB createTestShapeBuilder()_;create,random,shape,that,is,put,under,test;protected,abstract,sb,create,test,shape,builder
AbstractShapeBuilderTestCase -> protected abstract SB createTestShapeBuilder()_;1548434247;create random shape that is put under test;protected abstract SB createTestShapeBuilder()_;create,random,shape,that,is,put,under,test;protected,abstract,sb,create,test,shape,builder
AbstractShapeBuilderTestCase -> public void testFromXContent() throws IOException;1524684173;Test that creates new shape from a random test shape and checks both for equality;public void testFromXContent() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            SB testShape = createTestShapeBuilder()__            XContentBuilder contentBuilder = XContentFactory.contentBuilder(randomFrom(XContentType.values()))__            if (randomBoolean()) {_                contentBuilder.prettyPrint()__            }_            XContentBuilder builder = testShape.toXContent(contentBuilder, ToXContent.EMPTY_PARAMS)__            XContentBuilder shuffled = shuffleXContent(builder)__            XContentParser shapeContentParser = createParser(shuffled)__            shapeContentParser.nextToken()__            ShapeBuilder parsedShape = ShapeParser.parse(shapeContentParser)__            assertNotSame(testShape, parsedShape)__            assertEquals(testShape, parsedShape)__            assertEquals(testShape.hashCode(), parsedShape.hashCode())__        }_    };test,that,creates,new,shape,from,a,random,test,shape,and,checks,both,for,equality;public,void,test,from,xcontent,throws,ioexception,for,int,runs,0,runs,runs,sb,test,shape,create,test,shape,builder,xcontent,builder,content,builder,xcontent,factory,content,builder,random,from,xcontent,type,values,if,random,boolean,content,builder,pretty,print,xcontent,builder,builder,test,shape,to,xcontent,content,builder,to,xcontent,xcontent,builder,shuffled,shuffle,xcontent,builder,xcontent,parser,shape,content,parser,create,parser,shuffled,shape,content,parser,next,token,shape,builder,parsed,shape,shape,parser,parse,shape,content,parser,assert,not,same,test,shape,parsed,shape,assert,equals,test,shape,parsed,shape,assert,equals,test,shape,hash,code,parsed,shape,hash,code
AbstractShapeBuilderTestCase -> public void testFromXContent() throws IOException;1529916084;Test that creates new shape from a random test shape and checks both for equality;public void testFromXContent() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            SB testShape = createTestShapeBuilder()__            XContentBuilder contentBuilder = XContentFactory.contentBuilder(randomFrom(XContentType.values()))__            if (randomBoolean()) {_                contentBuilder.prettyPrint()__            }_            XContentBuilder builder = testShape.toXContent(contentBuilder, ToXContent.EMPTY_PARAMS)__            XContentBuilder shuffled = shuffleXContent(builder)__            try (XContentParser shapeContentParser = createParser(shuffled)) {_                shapeContentParser.nextToken()__                ShapeBuilder parsedShape = ShapeParser.parse(shapeContentParser)__                assertNotSame(testShape, parsedShape)__                assertEquals(testShape, parsedShape)__                assertEquals(testShape.hashCode(), parsedShape.hashCode())__            }_        }_    };test,that,creates,new,shape,from,a,random,test,shape,and,checks,both,for,equality;public,void,test,from,xcontent,throws,ioexception,for,int,runs,0,runs,runs,sb,test,shape,create,test,shape,builder,xcontent,builder,content,builder,xcontent,factory,content,builder,random,from,xcontent,type,values,if,random,boolean,content,builder,pretty,print,xcontent,builder,builder,test,shape,to,xcontent,content,builder,to,xcontent,xcontent,builder,shuffled,shuffle,xcontent,builder,try,xcontent,parser,shape,content,parser,create,parser,shuffled,shape,content,parser,next,token,shape,builder,parsed,shape,shape,parser,parse,shape,content,parser,assert,not,same,test,shape,parsed,shape,assert,equals,test,shape,parsed,shape,assert,equals,test,shape,hash,code,parsed,shape,hash,code
AbstractShapeBuilderTestCase -> public void testFromXContent() throws IOException;1531179852;Test that creates new shape from a random test shape and checks both for equality;public void testFromXContent() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            SB testShape = createTestShapeBuilder()__            XContentBuilder contentBuilder = XContentFactory.contentBuilder(randomFrom(XContentType.values()))__            if (randomBoolean()) {_                contentBuilder.prettyPrint()__            }_            XContentBuilder builder = testShape.toXContent(contentBuilder, ToXContent.EMPTY_PARAMS)__            XContentBuilder shuffled = shuffleXContent(builder)__            try (XContentParser shapeContentParser = createParser(shuffled)) {_                shapeContentParser.nextToken()__                ShapeBuilder<?, ?> parsedShape = ShapeParser.parse(shapeContentParser)__                assertNotSame(testShape, parsedShape)__                assertEquals(testShape, parsedShape)__                assertEquals(testShape.hashCode(), parsedShape.hashCode())__            }_        }_    };test,that,creates,new,shape,from,a,random,test,shape,and,checks,both,for,equality;public,void,test,from,xcontent,throws,ioexception,for,int,runs,0,runs,runs,sb,test,shape,create,test,shape,builder,xcontent,builder,content,builder,xcontent,factory,content,builder,random,from,xcontent,type,values,if,random,boolean,content,builder,pretty,print,xcontent,builder,builder,test,shape,to,xcontent,content,builder,to,xcontent,xcontent,builder,shuffled,shuffle,xcontent,builder,try,xcontent,parser,shape,content,parser,create,parser,shuffled,shape,content,parser,next,token,shape,builder,parsed,shape,shape,parser,parse,shape,content,parser,assert,not,same,test,shape,parsed,shape,assert,equals,test,shape,parsed,shape,assert,equals,test,shape,hash,code,parsed,shape,hash,code
AbstractShapeBuilderTestCase -> public void testFromXContent() throws IOException;1548434247;Test that creates new shape from a random test shape and checks both for equality;public void testFromXContent() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            SB testShape = createTestShapeBuilder()__            XContentBuilder contentBuilder = XContentFactory.contentBuilder(randomFrom(XContentType.values()))__            if (randomBoolean()) {_                contentBuilder.prettyPrint()__            }_            XContentBuilder builder = testShape.toXContent(contentBuilder, ToXContent.EMPTY_PARAMS)__            XContentBuilder shuffled = shuffleXContent(builder)__            try (XContentParser shapeContentParser = createParser(shuffled)) {_                shapeContentParser.nextToken()__                ShapeBuilder<?, ?, ?> parsedShape = ShapeParser.parse(shapeContentParser)__                assertNotSame(testShape, parsedShape)__                assertEquals(testShape, parsedShape)__                assertEquals(testShape.hashCode(), parsedShape.hashCode())__            }_        }_    };test,that,creates,new,shape,from,a,random,test,shape,and,checks,both,for,equality;public,void,test,from,xcontent,throws,ioexception,for,int,runs,0,runs,runs,sb,test,shape,create,test,shape,builder,xcontent,builder,content,builder,xcontent,factory,content,builder,random,from,xcontent,type,values,if,random,boolean,content,builder,pretty,print,xcontent,builder,builder,test,shape,to,xcontent,content,builder,to,xcontent,xcontent,builder,shuffled,shuffle,xcontent,builder,try,xcontent,parser,shape,content,parser,create,parser,shuffled,shape,content,parser,next,token,shape,builder,parsed,shape,shape,parser,parse,shape,content,parser,assert,not,same,test,shape,parsed,shape,assert,equals,test,shape,parsed,shape,assert,equals,test,shape,hash,code,parsed,shape,hash,code
