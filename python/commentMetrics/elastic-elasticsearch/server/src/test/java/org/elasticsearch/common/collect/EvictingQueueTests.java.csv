commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;public void testCreateWithNegativeSize() throws Exception {     try {         new EvictingQueue<>(-1).         fail().     } catch (IllegalArgumentException expected) {     } }
false;public;0;25;;public void testCreateWithZeroSize() throws Exception {     EvictingQueue<String> queue = new EvictingQueue<>(0).     assertEquals(0, queue.size()).     assertTrue(queue.add("hi")).     assertEquals(0, queue.size()).     assertTrue(queue.offer("hi")).     assertEquals(0, queue.size()).     assertFalse(queue.remove("hi")).     assertEquals(0, queue.size()).     try {         queue.element().         fail().     } catch (NoSuchElementException expected) {     }     assertNull(queue.peek()).     assertNull(queue.poll()).     try {         queue.remove().         fail().     } catch (NoSuchElementException expected) {     } }
false;public;0;4;;public void testRemainingCapacityMaximumSizeZero() {     EvictingQueue<String> queue = new EvictingQueue<>(0).     assertEquals(0, queue.remainingCapacity()). }
false;public;0;6;;public void testRemainingCapacityMaximumSizeOne() {     EvictingQueue<String> queue = new EvictingQueue<>(1).     assertEquals(1, queue.remainingCapacity()).     queue.add("hi").     assertEquals(0, queue.remainingCapacity()). }
false;public;0;10;;public void testRemainingCapacityMaximumSizeThree() {     EvictingQueue<String> queue = new EvictingQueue<>(3).     assertEquals(3, queue.remainingCapacity()).     queue.add("hi").     assertEquals(2, queue.remainingCapacity()).     queue.add("hi").     assertEquals(1, queue.remainingCapacity()).     queue.add("hi").     assertEquals(0, queue.remainingCapacity()). }
false;public;0;21;;public void testEvictingAfterOne() throws Exception {     EvictingQueue<String> queue = new EvictingQueue<>(1).     assertEquals(0, queue.size()).     assertEquals(1, queue.remainingCapacity()).     assertTrue(queue.add("hi")).     assertEquals("hi", queue.element()).     assertEquals("hi", queue.peek()).     assertEquals(1, queue.size()).     assertEquals(0, queue.remainingCapacity()).     assertTrue(queue.add("there")).     assertEquals("there", queue.element()).     assertEquals("there", queue.peek()).     assertEquals(1, queue.size()).     assertEquals(0, queue.remainingCapacity()).     assertEquals("there", queue.remove()).     assertEquals(0, queue.size()).     assertEquals(1, queue.remainingCapacity()). }
false;public;0;23;;public void testEvictingAfterThree() throws Exception {     EvictingQueue<String> queue = new EvictingQueue<>(3).     assertEquals(0, queue.size()).     assertEquals(3, queue.remainingCapacity()).     assertTrue(queue.add("one")).     assertTrue(queue.add("two")).     assertTrue(queue.add("three")).     assertEquals("one", queue.element()).     assertEquals("one", queue.peek()).     assertEquals(3, queue.size()).     assertEquals(0, queue.remainingCapacity()).     assertTrue(queue.add("four")).     assertEquals("two", queue.element()).     assertEquals("two", queue.peek()).     assertEquals(3, queue.size()).     assertEquals(0, queue.remainingCapacity()).     assertEquals("two", queue.remove()).     assertEquals(2, queue.size()).     assertEquals(1, queue.remainingCapacity()). }
false;public;0;21;;public void testAddAll() throws Exception {     EvictingQueue<String> queue = new EvictingQueue<>(3).     assertEquals(0, queue.size()).     assertEquals(3, queue.remainingCapacity()).     assertTrue(queue.addAll(CollectionUtils.arrayAsArrayList("one", "two", "three"))).     assertEquals("one", queue.element()).     assertEquals("one", queue.peek()).     assertEquals(3, queue.size()).     assertEquals(0, queue.remainingCapacity()).     assertTrue(queue.addAll(Collections.singletonList("four"))).     assertEquals("two", queue.element()).     assertEquals("two", queue.peek()).     assertEquals(3, queue.size()).     assertEquals(0, queue.remainingCapacity()).     assertEquals("two", queue.remove()).     assertEquals(2, queue.size()).     assertEquals(1, queue.remainingCapacity()). }
