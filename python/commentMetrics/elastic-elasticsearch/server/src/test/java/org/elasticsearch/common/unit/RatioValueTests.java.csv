commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;public void testParsing() {     assertThat(RatioValue.parseRatioValue("100%").toString(), is("100.0%")).     assertThat(RatioValue.parseRatioValue("0%").toString(), is("0.0%")).     assertThat(RatioValue.parseRatioValue("-0%").toString(), is("0.0%")).     assertThat(RatioValue.parseRatioValue("15.1%").toString(), is("15.1%")).     assertThat(RatioValue.parseRatioValue("0.1%").toString(), is("0.1%")).     assertThat(RatioValue.parseRatioValue("1.0").toString(), is("100.0%")).     assertThat(RatioValue.parseRatioValue("0").toString(), is("0.0%")).     assertThat(RatioValue.parseRatioValue("-0").toString(), is("0.0%")).     assertThat(RatioValue.parseRatioValue("0.0").toString(), is("0.0%")).     assertThat(RatioValue.parseRatioValue("-0.0").toString(), is("0.0%")).     assertThat(RatioValue.parseRatioValue("0.151").toString(), is("15.1%")).     assertThat(RatioValue.parseRatioValue("0.001").toString(), is("0.1%")). }
false;public;0;10;;public void testNegativeCase() {     testInvalidRatio("100.0001%").     testInvalidRatio("-0.1%").     testInvalidRatio("1a0%").     testInvalidRatio("2").     testInvalidRatio("-0.01").     testInvalidRatio("0.1.0").     testInvalidRatio("five").     testInvalidRatio("1/2"). }
false;public;1;8;;public void testInvalidRatio(String r) {     try {         RatioValue.parseRatioValue(r).         fail("Value: [" + r + "] should be an invalid ratio").     } catch (ElasticsearchParseException e) {     // success     } }
