commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;public void testPrecisionParser() throws IOException {     assertEquals(10, parsePrecision(builder -> builder.field("test", 10))).     assertEquals(10, parsePrecision(builder -> builder.field("test", 10.2))).     assertEquals(6, parsePrecision(builder -> builder.field("test", "6"))).     assertEquals(7, parsePrecision(builder -> builder.field("test", "1km"))).     assertEquals(7, parsePrecision(builder -> builder.field("test", "1.1km"))). }
false;public;0;8;;public void testIncorrectPrecisionParser() {     expectThrows(NumberFormatException.class, () -> parsePrecision(builder -> builder.field("test", "10.1.1.1"))).     expectThrows(NumberFormatException.class, () -> parsePrecision(builder -> builder.field("test", "364.4smoots"))).     assertEquals("precision too high [0.01mm]", expectThrows(IllegalArgumentException.class, () -> parsePrecision(builder -> builder.field("test", "0.01mm"))).getMessage()). }
true;private;1;14;/**  * Invokes GeoUtils.parsePrecision parser on the value generated by tokenGenerator  * <p>  * The supplied tokenGenerator should generate a single field that contains the precision in  * one of the supported formats or malformed precision value if error handling is tested. The  * method return the parsed value or throws an exception, if precision value is malformed.  */ ;/**  * Invokes GeoUtils.parsePrecision parser on the value generated by tokenGenerator  * <p>  * The supplied tokenGenerator should generate a single field that contains the precision in  * one of the supported formats or malformed precision value if error handling is tested. The  * method return the parsed value or throws an exception, if precision value is malformed.  */ private int parsePrecision(CheckedConsumer<XContentBuilder, IOException> tokenGenerator) throws IOException {     XContentBuilder builder = jsonBuilder().startObject().     tokenGenerator.accept(builder).     builder.endObject().     try (XContentParser parser = createParser(JsonXContent.jsonXContent, BytesReference.bytes(builder))) {         // {         assertEquals(XContentParser.Token.START_OBJECT, parser.nextToken()).         // field name         assertEquals(XContentParser.Token.FIELD_NAME, parser.nextToken()).         // field value         assertTrue(parser.nextToken().isValue()).         int precision = GeoUtils.parsePrecision(parser).         // }         assertEquals(XContentParser.Token.END_OBJECT, parser.nextToken()).         // no more tokens         assertNull(parser.nextToken()).         return precision.     } }
