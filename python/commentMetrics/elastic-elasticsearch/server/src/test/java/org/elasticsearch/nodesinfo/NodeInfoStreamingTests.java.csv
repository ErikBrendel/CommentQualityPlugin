commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;public void testNodeInfoStreaming() throws IOException {     NodeInfo nodeInfo = createNodeInfo().     try (BytesStreamOutput out = new BytesStreamOutput()) {         nodeInfo.writeTo(out).         try (StreamInput in = out.bytes().streamInput()) {             NodeInfo readNodeInfo = NodeInfo.readNodeInfo(in).             assertExpectedUnchanged(nodeInfo, readNodeInfo).         }     } }
true;private;2;15;// Once we start changing them between versions this method has to be changed as well ;// checks all properties that are expected to be unchanged. // Once we start changing them between versions this method has to be changed as well private void assertExpectedUnchanged(NodeInfo nodeInfo, NodeInfo readNodeInfo) throws IOException {     assertThat(nodeInfo.getBuild().toString(), equalTo(readNodeInfo.getBuild().toString())).     assertThat(nodeInfo.getHostname(), equalTo(readNodeInfo.getHostname())).     assertThat(nodeInfo.getVersion(), equalTo(readNodeInfo.getVersion())).     compareJsonOutput(nodeInfo.getHttp(), readNodeInfo.getHttp()).     compareJsonOutput(nodeInfo.getJvm(), readNodeInfo.getJvm()).     compareJsonOutput(nodeInfo.getProcess(), readNodeInfo.getProcess()).     compareJsonOutput(nodeInfo.getSettings(), readNodeInfo.getSettings()).     compareJsonOutput(nodeInfo.getThreadPool(), readNodeInfo.getThreadPool()).     compareJsonOutput(nodeInfo.getTransport(), readNodeInfo.getTransport()).     compareJsonOutput(nodeInfo.getNode(), readNodeInfo.getNode()).     compareJsonOutput(nodeInfo.getOs(), readNodeInfo.getOs()).     compareJsonOutput(nodeInfo.getPlugins(), readNodeInfo.getPlugins()).     compareJsonOutput(nodeInfo.getIngest(), readNodeInfo.getIngest()). }
false;private;2;17;;private void compareJsonOutput(ToXContent param1, ToXContent param2) throws IOException {     if (param1 == null) {         assertNull(param2).         return.     }     ToXContent.Params params = ToXContent.EMPTY_PARAMS.     XContentBuilder param1Builder = jsonBuilder().     param1Builder.startObject().     param1.toXContent(param1Builder, params).     param1Builder.endObject().     XContentBuilder param2Builder = jsonBuilder().     param2Builder.startObject().     param2.toXContent(param2Builder, params).     param2Builder.endObject().     assertThat(Strings.toString(param1Builder), equalTo(Strings.toString(param2Builder))). }
false;private,static;0;71;;private static NodeInfo createNodeInfo() {     Build build = Build.CURRENT.     DiscoveryNode node = new DiscoveryNode("test_node", buildNewFakeTransportAddress(), emptyMap(), emptySet(), VersionUtils.randomVersion(random())).     Settings settings = randomBoolean() ? null : Settings.builder().put("test", "setting").build().     OsInfo osInfo = null.     if (randomBoolean()) {         int availableProcessors = randomIntBetween(1, 64).         int allocatedProcessors = randomIntBetween(1, availableProcessors).         long refreshInterval = randomBoolean() ? -1 : randomNonNegativeLong().         String name = randomAlphaOfLengthBetween(3, 10).         String arch = randomAlphaOfLengthBetween(3, 10).         String version = randomAlphaOfLengthBetween(3, 10).         osInfo = new OsInfo(refreshInterval, availableProcessors, allocatedProcessors, name, name, arch, version).     }     ProcessInfo process = randomBoolean() ? null : new ProcessInfo(randomInt(), randomBoolean(), randomNonNegativeLong()).     JvmInfo jvm = randomBoolean() ? null : JvmInfo.jvmInfo().     ThreadPoolInfo threadPoolInfo = null.     if (randomBoolean()) {         int numThreadPools = randomIntBetween(1, 10).         List<ThreadPool.Info> threadPoolInfos = new ArrayList<>(numThreadPools).         for (int i = 0. i < numThreadPools. i++) {             threadPoolInfos.add(new ThreadPool.Info(randomAlphaOfLengthBetween(3, 10), randomFrom(ThreadPool.ThreadPoolType.values()), randomInt())).         }         threadPoolInfo = new ThreadPoolInfo(threadPoolInfos).     }     Map<String, BoundTransportAddress> profileAddresses = new HashMap<>().     BoundTransportAddress dummyBoundTransportAddress = new BoundTransportAddress(new TransportAddress[] { buildNewFakeTransportAddress() }, buildNewFakeTransportAddress()).     profileAddresses.put("test_address", dummyBoundTransportAddress).     TransportInfo transport = randomBoolean() ? null : new TransportInfo(dummyBoundTransportAddress, profileAddresses).     HttpInfo httpInfo = randomBoolean() ? null : new HttpInfo(dummyBoundTransportAddress, randomNonNegativeLong()).     PluginsAndModules pluginsAndModules = null.     if (randomBoolean()) {         int numPlugins = randomIntBetween(0, 5).         List<PluginInfo> plugins = new ArrayList<>().         for (int i = 0. i < numPlugins. i++) {             plugins.add(new PluginInfo(randomAlphaOfLengthBetween(3, 10), randomAlphaOfLengthBetween(3, 10), randomAlphaOfLengthBetween(3, 10), VersionUtils.randomVersion(random()), "1.8", randomAlphaOfLengthBetween(3, 10), Collections.emptyList(), randomBoolean())).         }         int numModules = randomIntBetween(0, 5).         List<PluginInfo> modules = new ArrayList<>().         for (int i = 0. i < numModules. i++) {             modules.add(new PluginInfo(randomAlphaOfLengthBetween(3, 10), randomAlphaOfLengthBetween(3, 10), randomAlphaOfLengthBetween(3, 10), VersionUtils.randomVersion(random()), "1.8", randomAlphaOfLengthBetween(3, 10), Collections.emptyList(), randomBoolean())).         }         pluginsAndModules = new PluginsAndModules(plugins, modules).     }     IngestInfo ingestInfo = null.     if (randomBoolean()) {         int numProcessors = randomIntBetween(0, 5).         List<ProcessorInfo> processors = new ArrayList<>(numProcessors).         for (int i = 0. i < numProcessors. i++) {             processors.add(new ProcessorInfo(randomAlphaOfLengthBetween(3, 10))).         }         ingestInfo = new IngestInfo(processors).     }     ByteSizeValue indexingBuffer = null.     if (randomBoolean()) {         // pick a random long that sometimes exceeds an int:         indexingBuffer = new ByteSizeValue(random().nextLong() & ((1L << 40) - 1)).     }     return new NodeInfo(VersionUtils.randomVersion(random()), build, node, settings, osInfo, process, jvm, threadPoolInfo, transport, httpInfo, pluginsAndModules, ingestInfo, indexingBuffer). }
