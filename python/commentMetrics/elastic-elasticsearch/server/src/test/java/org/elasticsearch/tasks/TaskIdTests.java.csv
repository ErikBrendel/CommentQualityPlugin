commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;public void testSerialization() throws IOException {     /*          * The size of the serialized representation of the TaskId doesn't really matter that much because most requests don't contain a          * full TaskId.          */     // 8 for the task number, 1 for the string length of the uuid, 22 for the actual uuid     int expectedSize = 31.     for (int i = 0. i < ROUNDS. i++) {         TaskId taskId = new TaskId(UUIDs.randomBase64UUID(random()), randomInt()).         TaskId roundTripped = roundTrip(taskId, expectedSize).         assertNotSame(taskId, roundTripped).         assertEquals(taskId, roundTripped).         assertEquals(taskId.hashCode(), roundTripped.hashCode()).     } }
false;public;0;6;;public void testSerializationOfEmpty() throws IOException {     // The size of the serialized representation of the EMPTY_TASK_ID matters a lot because many requests contain it.     int expectedSize = 1.     TaskId roundTripped = roundTrip(TaskId.EMPTY_TASK_ID, expectedSize).     assertSame(TaskId.EMPTY_TASK_ID, roundTripped). }
false;private;2;10;;private TaskId roundTrip(TaskId taskId, int expectedSize) throws IOException {     try (BytesStreamOutput out = new BytesStreamOutput()) {         taskId.writeTo(out).         BytesReference bytes = out.bytes().         assertEquals(expectedSize, bytes.length()).         try (StreamInput in = bytes.streamInput()) {             return TaskId.readFromStream(in).         }     } }
