commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;public void testNoDocs() throws IOException {     for (ValueType valueType : ValueType.values()) {         testCase(new MatchAllDocsQuery(), valueType, iw -> {         // Intentionally not writing any docs         }, count -> {             assertEquals(0L, count.getValue()).             assertFalse(AggregationInspectionHelper.hasValue(count)).         }).     } }
false;public;0;9;;public void testNoMatchingField() throws IOException {     testCase(new MatchAllDocsQuery(), ValueType.LONG, iw -> {         iw.addDocument(singleton(new SortedNumericDocValuesField("wrong_number", 7))).         iw.addDocument(singleton(new SortedNumericDocValuesField("wrong_number", 1))).     }, count -> {         assertEquals(0L, count.getValue()).         assertFalse(AggregationInspectionHelper.hasValue(count)).     }). }
false;public;0;10;;public void testSomeMatchesSortedNumericDocValues() throws IOException {     testCase(new DocValuesFieldExistsQuery(FIELD_NAME), ValueType.NUMERIC, iw -> {         iw.addDocument(singleton(new SortedNumericDocValuesField("wrong_number", 7))).         iw.addDocument(singleton(new SortedNumericDocValuesField(FIELD_NAME, 7))).         iw.addDocument(singleton(new SortedNumericDocValuesField(FIELD_NAME, 1))).     }, count -> {         assertEquals(2L, count.getValue()).         assertTrue(AggregationInspectionHelper.hasValue(count)).     }). }
false;public;0;9;;public void testSomeMatchesNumericDocValues() throws IOException {     testCase(new DocValuesFieldExistsQuery(FIELD_NAME), ValueType.NUMBER, iw -> {         iw.addDocument(singleton(new NumericDocValuesField(FIELD_NAME, 7))).         iw.addDocument(singleton(new NumericDocValuesField(FIELD_NAME, 1))).     }, count -> {         assertEquals(2L, count.getValue()).         assertTrue(AggregationInspectionHelper.hasValue(count)).     }). }
false;public;0;12;;public void testQueryFiltering() throws IOException {     testCase(IntPoint.newRangeQuery("level", 0, 5), ValueType.STRING, iw -> {         iw.addDocument(Arrays.asList(new IntPoint("level", 0), new SortedDocValuesField(FIELD_NAME, new BytesRef("foo")))).         iw.addDocument(Arrays.asList(new IntPoint("level", 1), new SortedDocValuesField(FIELD_NAME, new BytesRef("bar")))).         iw.addDocument(Arrays.asList(new IntPoint("level", 3), new SortedDocValuesField(FIELD_NAME, new BytesRef("foo")))).         iw.addDocument(Arrays.asList(new IntPoint("level", 5), new SortedDocValuesField(FIELD_NAME, new BytesRef("baz")))).         iw.addDocument(Arrays.asList(new IntPoint("level", 7), new SortedDocValuesField(FIELD_NAME, new BytesRef("baz")))).     }, count -> {         assertEquals(4L, count.getValue()).         assertTrue(AggregationInspectionHelper.hasValue(count)).     }). }
false;public;0;9;;public void testQueryFiltersAll() throws IOException {     testCase(IntPoint.newRangeQuery("level", -1, 0), ValueType.STRING, iw -> {         iw.addDocument(Arrays.asList(new IntPoint("level", 3), new SortedDocValuesField(FIELD_NAME, new BytesRef("foo")))).         iw.addDocument(Arrays.asList(new IntPoint("level", 5), new SortedDocValuesField(FIELD_NAME, new BytesRef("baz")))).     }, count -> {         assertEquals(0L, count.getValue()).         assertFalse(AggregationInspectionHelper.hasValue(count)).     }). }
false;private;4;28;;private void testCase(Query query, ValueType valueType, CheckedConsumer<RandomIndexWriter, IOException> indexer, Consumer<InternalValueCount> verify) throws IOException {     try (Directory directory = newDirectory()) {         try (RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory)) {             indexer.accept(indexWriter).         }         try (IndexReader indexReader = DirectoryReader.open(directory)) {             IndexSearcher indexSearcher = newSearcher(indexReader, true, true).             MappedFieldType fieldType = createMappedFieldType(valueType).             fieldType.setName(FIELD_NAME).             fieldType.setHasDocValues(true).             ValueCountAggregationBuilder aggregationBuilder = new ValueCountAggregationBuilder("_name", valueType).             aggregationBuilder.field(FIELD_NAME).             ValueCountAggregator aggregator = createAggregator(aggregationBuilder, indexSearcher, fieldType).             aggregator.preCollection().             indexSearcher.search(query, aggregator).             aggregator.postCollection().             verify.accept((InternalValueCount) aggregator.buildAggregation(0L)).         }     } }
false;private,static;1;22;;private static MappedFieldType createMappedFieldType(ValueType valueType) {     switch(valueType) {         case BOOLEAN:             return new BooleanFieldMapper.BooleanFieldType().         case STRING:             return new KeywordFieldMapper.KeywordFieldType().         case DOUBLE:             return new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.DOUBLE).         case NUMBER:         case NUMERIC:         case LONG:             return new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.LONG).         case DATE:             return new DateFieldMapper.Builder("_name").fieldType().         case IP:             return new IpFieldMapper.Builder("_name").fieldType().         case GEOPOINT:             return new GeoPointFieldMapper.Builder("_name").fieldType().         default:             throw new IllegalArgumentException("Test does not support value type [" + valueType + "]").     } }
