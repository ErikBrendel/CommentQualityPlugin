commented;modifiers;parameterAmount;loc;comment;code
false;public;0;27;;public void testSerialization() throws Exception {     int iterations = randomIntBetween(5, 20).     for (int i = 0. i < iterations. i++) {         Version version = randomVersionBetween(random(), Version.V_7_0_0, null).         IndicesOptions indicesOptions = IndicesOptions.fromOptions(randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean()).         BytesStreamOutput output = new BytesStreamOutput().         output.setVersion(version).         indicesOptions.writeIndicesOptions(output).         StreamInput streamInput = output.bytes().streamInput().         streamInput.setVersion(version).         IndicesOptions indicesOptions2 = IndicesOptions.readIndicesOptions(streamInput).         assertThat(indicesOptions2.ignoreUnavailable(), equalTo(indicesOptions.ignoreUnavailable())).         assertThat(indicesOptions2.allowNoIndices(), equalTo(indicesOptions.allowNoIndices())).         assertThat(indicesOptions2.expandWildcardsOpen(), equalTo(indicesOptions.expandWildcardsOpen())).         assertThat(indicesOptions2.expandWildcardsClosed(), equalTo(indicesOptions.expandWildcardsClosed())).         assertThat(indicesOptions2.forbidClosedIndices(), equalTo(indicesOptions.forbidClosedIndices())).         assertThat(indicesOptions2.allowAliasesToMultipleIndices(), equalTo(indicesOptions.allowAliasesToMultipleIndices())).         assertEquals(indicesOptions2.ignoreAliases(), indicesOptions.ignoreAliases()).     } }
false;public;0;32;;public void testSerializationPre70() throws Exception {     int iterations = randomIntBetween(5, 20).     for (int i = 0. i < iterations. i++) {         Version version = randomVersionBetween(random(), null, Version.V_6_6_0).         IndicesOptions indicesOptions = IndicesOptions.fromOptions(randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean()).         BytesStreamOutput output = new BytesStreamOutput().         output.setVersion(version).         indicesOptions.writeIndicesOptions(output).         StreamInput streamInput = output.bytes().streamInput().         streamInput.setVersion(version).         IndicesOptions indicesOptions2 = IndicesOptions.readIndicesOptions(streamInput).         assertThat(indicesOptions2.ignoreUnavailable(), equalTo(indicesOptions.ignoreUnavailable())).         assertThat(indicesOptions2.allowNoIndices(), equalTo(indicesOptions.allowNoIndices())).         assertThat(indicesOptions2.expandWildcardsOpen(), equalTo(indicesOptions.expandWildcardsOpen())).         assertThat(indicesOptions2.expandWildcardsClosed(), equalTo(indicesOptions.expandWildcardsClosed())).         assertThat(indicesOptions2.forbidClosedIndices(), equalTo(indicesOptions.forbidClosedIndices())).         assertThat(indicesOptions2.allowAliasesToMultipleIndices(), equalTo(indicesOptions.allowAliasesToMultipleIndices())).         assertEquals(indicesOptions2.ignoreAliases(), indicesOptions.ignoreAliases()).         if (output.getVersion().onOrAfter(Version.V_6_6_0)) {             assertEquals(indicesOptions2.ignoreThrottled(), indicesOptions.ignoreThrottled()).         } else {             // make sure we never write this option to pre 6.6             assertFalse(indicesOptions2.ignoreThrottled()).         }     } }
false;public;0;23;;public void testFromOptions() {     boolean ignoreUnavailable = randomBoolean().     boolean allowNoIndices = randomBoolean().     boolean expandToOpenIndices = randomBoolean().     boolean expandToClosedIndices = randomBoolean().     boolean allowAliasesToMultipleIndices = randomBoolean().     boolean forbidClosedIndices = randomBoolean().     boolean ignoreAliases = randomBoolean().     boolean ingoreThrottled = randomBoolean().     IndicesOptions indicesOptions = IndicesOptions.fromOptions(ignoreUnavailable, allowNoIndices, expandToOpenIndices, expandToClosedIndices, allowAliasesToMultipleIndices, forbidClosedIndices, ignoreAliases, ingoreThrottled).     assertThat(indicesOptions.ignoreUnavailable(), equalTo(ignoreUnavailable)).     assertThat(indicesOptions.allowNoIndices(), equalTo(allowNoIndices)).     assertThat(indicesOptions.expandWildcardsOpen(), equalTo(expandToOpenIndices)).     assertThat(indicesOptions.expandWildcardsClosed(), equalTo(expandToClosedIndices)).     assertThat(indicesOptions.allowAliasesToMultipleIndices(), equalTo(allowAliasesToMultipleIndices)).     assertThat(indicesOptions.allowAliasesToMultipleIndices(), equalTo(allowAliasesToMultipleIndices)).     assertThat(indicesOptions.forbidClosedIndices(), equalTo(forbidClosedIndices)).     assertEquals(ignoreAliases, indicesOptions.ignoreAliases()).     assertEquals(ingoreThrottled, indicesOptions.ignoreThrottled()). }
false;public;0;20;;public void testFromOptionsWithDefaultOptions() {     boolean ignoreUnavailable = randomBoolean().     boolean allowNoIndices = randomBoolean().     boolean expandToOpenIndices = randomBoolean().     boolean expandToClosedIndices = randomBoolean().     IndicesOptions defaultOptions = IndicesOptions.fromOptions(randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean()).     IndicesOptions indicesOptions = IndicesOptions.fromOptions(ignoreUnavailable, allowNoIndices, expandToOpenIndices, expandToClosedIndices, defaultOptions).     assertEquals(ignoreUnavailable, indicesOptions.ignoreUnavailable()).     assertEquals(allowNoIndices, indicesOptions.allowNoIndices()).     assertEquals(expandToOpenIndices, indicesOptions.expandWildcardsOpen()).     assertEquals(expandToClosedIndices, indicesOptions.expandWildcardsClosed()).     assertEquals(defaultOptions.allowAliasesToMultipleIndices(), indicesOptions.allowAliasesToMultipleIndices()).     assertEquals(defaultOptions.forbidClosedIndices(), indicesOptions.forbidClosedIndices()).     assertEquals(defaultOptions.ignoreAliases(), indicesOptions.ignoreAliases()). }
false;public;0;38;;public void testFromParameters() {     boolean expandWildcardsOpen = randomBoolean().     boolean expandWildcardsClosed = randomBoolean().     String expandWildcardsString.     if (expandWildcardsOpen && expandWildcardsClosed) {         if (randomBoolean()) {             expandWildcardsString = "open,closed".         } else {             expandWildcardsString = "all".         }     } else if (expandWildcardsOpen) {         expandWildcardsString = "open".     } else if (expandWildcardsClosed) {         expandWildcardsString = "closed".     } else {         expandWildcardsString = "none".     }     boolean ignoreUnavailable = randomBoolean().     String ignoreUnavailableString = Boolean.toString(ignoreUnavailable).     boolean ignoreThrottled = randomBoolean().     String ignoreThrottledString = Boolean.toString(ignoreThrottled).     boolean allowNoIndices = randomBoolean().     String allowNoIndicesString = Boolean.toString(allowNoIndices).     IndicesOptions defaultOptions = IndicesOptions.fromOptions(randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean()).     IndicesOptions updatedOptions = IndicesOptions.fromParameters(expandWildcardsString, ignoreUnavailableString, allowNoIndicesString, ignoreThrottled, defaultOptions).     assertEquals(expandWildcardsOpen, updatedOptions.expandWildcardsOpen()).     assertEquals(expandWildcardsClosed, updatedOptions.expandWildcardsClosed()).     assertEquals(ignoreUnavailable, updatedOptions.ignoreUnavailable()).     assertEquals(allowNoIndices, updatedOptions.allowNoIndices()).     assertEquals(defaultOptions.allowAliasesToMultipleIndices(), updatedOptions.allowAliasesToMultipleIndices()).     assertEquals(defaultOptions.forbidClosedIndices(), updatedOptions.forbidClosedIndices()).     assertEquals(defaultOptions.ignoreAliases(), updatedOptions.ignoreAliases()). }
false;public;0;24;;public void testSimpleByteBWC() {     Map<Byte, IndicesOptions> old = new HashMap<>().     // These correspond to each individual option (bit) in the old byte-based IndicesOptions     old.put((byte) 0, IndicesOptions.fromOptions(false, false, false, false, true, false, false, false)).     old.put((byte) 1, IndicesOptions.fromOptions(true, false, false, false, true, false, false, false)).     old.put((byte) 2, IndicesOptions.fromOptions(false, true, false, false, true, false, false, false)).     old.put((byte) 4, IndicesOptions.fromOptions(false, false, true, false, true, false, false, false)).     old.put((byte) 8, IndicesOptions.fromOptions(false, false, false, true, true, false, false, false)).     old.put((byte) 16, IndicesOptions.fromOptions(false, false, false, false, false, false, false, false)).     old.put((byte) 32, IndicesOptions.fromOptions(false, false, false, false, true, true, false, false)).     old.put((byte) 64, IndicesOptions.fromOptions(false, false, false, false, true, false, true, false)).     // Test a few multi-selected options     old.put((byte) 13, IndicesOptions.fromOptions(true, false, true, true, true, false, false, false)).     old.put((byte) 19, IndicesOptions.fromOptions(true, true, false, false, false, false, false, false)).     old.put((byte) 24, IndicesOptions.fromOptions(false, false, false, true, false, false, false, false)).     old.put((byte) 123, IndicesOptions.fromOptions(true, true, false, true, false, true, true, false)).     for (Map.Entry<Byte, IndicesOptions> entry : old.entrySet()) {         IndicesOptions indicesOptions2 = IndicesOptions.fromByte(entry.getKey()).         logger.info("--> 1 {}", entry.getValue().toString()).         logger.info("--> 2 {}", indicesOptions2.toString()).         assertThat("IndicesOptions for byte " + entry.getKey() + " differ for conversion", indicesOptions2, equalTo(entry.getValue())).     } }
false;public;0;57;;public void testEqualityAndHashCode() {     IndicesOptions indicesOptions = IndicesOptions.fromOptions(randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean()).     EqualsHashCodeTestUtils.checkEqualsAndHashCode(indicesOptions, opts -> {         return IndicesOptions.fromOptions(opts.ignoreUnavailable(), opts.allowNoIndices(), opts.expandWildcardsOpen(), opts.expandWildcardsClosed(), opts.allowAliasesToMultipleIndices(), opts.forbidClosedIndices(), opts.ignoreAliases(), opts.ignoreThrottled()).     }, opts -> {         boolean mutated = false.         boolean ignoreUnavailable = opts.ignoreUnavailable().         boolean allowNoIndices = opts.allowNoIndices().         boolean expandOpen = opts.expandWildcardsOpen().         boolean expandClosed = opts.expandWildcardsClosed().         boolean allowAliasesToMulti = opts.allowAliasesToMultipleIndices().         boolean forbidClosed = opts.forbidClosedIndices().         boolean ignoreAliases = opts.ignoreAliases().         boolean ignoreThrottled = opts.ignoreThrottled().         while (mutated == false) {             if (randomBoolean()) {                 ignoreUnavailable = !ignoreUnavailable.                 mutated = true.             }             if (randomBoolean()) {                 allowNoIndices = !allowNoIndices.                 mutated = true.             }             if (randomBoolean()) {                 expandOpen = !expandOpen.                 mutated = true.             }             if (randomBoolean()) {                 expandClosed = !expandClosed.                 mutated = true.             }             if (randomBoolean()) {                 allowAliasesToMulti = !allowAliasesToMulti.                 mutated = true.             }             if (randomBoolean()) {                 forbidClosed = !forbidClosed.                 mutated = true.             }             if (randomBoolean()) {                 ignoreAliases = !ignoreAliases.                 mutated = true.             }             if (randomBoolean()) {                 ignoreThrottled = !ignoreThrottled.                 mutated = true.             }         }         return IndicesOptions.fromOptions(ignoreUnavailable, allowNoIndices, expandOpen, expandClosed, allowAliasesToMulti, forbidClosed, ignoreAliases, ignoreThrottled).     }). }
false;public;0;37;;public void testFromMap() {     IndicesOptions defaults = IndicesOptions.strictExpandOpen().     Collection<String> wildcardStates = randomBoolean() ? null : randomSubsetOf(Arrays.asList("open", "closed")).     Boolean ignoreUnavailable = randomBoolean() ? null : randomBoolean().     Boolean allowNoIndices = randomBoolean() ? null : randomBoolean().     Boolean ignoreThrottled = randomBoolean() ? null : randomBoolean().     Map<String, Object> settings = new HashMap<>().     if (wildcardStates != null) {         settings.put("expand_wildcards", wildcardStates).     }     if (ignoreUnavailable != null) {         settings.put("ignore_unavailable", ignoreUnavailable).     }     if (allowNoIndices != null) {         settings.put("allow_no_indices", allowNoIndices).     }     if (ignoreThrottled != null) {         settings.put("ignore_throttled", ignoreThrottled).     }     IndicesOptions fromMap = IndicesOptions.fromMap(settings, defaults).     boolean open = wildcardStates != null ? wildcardStates.contains("open") : defaults.expandWildcardsOpen().     assertEquals(fromMap.expandWildcardsOpen(), open).     boolean closed = wildcardStates != null ? wildcardStates.contains("closed") : defaults.expandWildcardsClosed().     assertEquals(fromMap.expandWildcardsClosed(), closed).     assertEquals(fromMap.ignoreUnavailable(), ignoreUnavailable == null ? defaults.ignoreUnavailable() : ignoreUnavailable).     assertEquals(fromMap.allowNoIndices(), allowNoIndices == null ? defaults.allowNoIndices() : allowNoIndices).     assertEquals(fromMap.ignoreThrottled(), ignoreThrottled == null ? defaults.ignoreThrottled() : ignoreThrottled). }
false;public;0;32;;public void testToXContent() throws IOException {     Collection<WildcardStates> wildcardStates = randomSubsetOf(Arrays.asList(WildcardStates.values())).     Collection<Option> options = randomSubsetOf(Arrays.asList(Option.values())).     IndicesOptions indicesOptions = new IndicesOptions(options.isEmpty() ? Option.NONE : EnumSet.copyOf(options), wildcardStates.isEmpty() ? WildcardStates.NONE : EnumSet.copyOf(wildcardStates)).     XContentBuilder builder = XContentFactory.jsonBuilder().     builder.startObject().     indicesOptions.toXContent(builder, new MapParams(Collections.emptyMap())).     builder.endObject().     XContentParser parser = XContentType.JSON.xContent().createParser(NamedXContentRegistry.EMPTY, null, BytesReference.bytes(builder).streamInput()).     Map<String, Object> map = parser.mapOrdered().     boolean open = wildcardStates.contains(WildcardStates.OPEN).     if (open) {         assertTrue(((List<?>) map.get("expand_wildcards")).contains("open")).     } else {         assertFalse(((List<?>) map.get("expand_wildcards")).contains("open")).     }     boolean closed = wildcardStates.contains(WildcardStates.CLOSED).     if (closed) {         assertTrue(((List<?>) map.get("expand_wildcards")).contains("closed")).     } else {         assertFalse(((List<?>) map.get("expand_wildcards")).contains("closed")).     }     assertEquals(map.get("ignore_unavailable"), options.contains(Option.IGNORE_UNAVAILABLE)).     assertEquals(map.get("allow_no_indices"), options.contains(Option.ALLOW_NO_INDICES)).     assertEquals(map.get("ignore_throttled"), options.contains(Option.IGNORE_THROTTLED)). }
