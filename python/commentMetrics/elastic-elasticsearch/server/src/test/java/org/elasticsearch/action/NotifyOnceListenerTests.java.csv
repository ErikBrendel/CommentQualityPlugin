commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void innerOnResponse(String s) {     response.set(s). }
false;public;1;4;;@Override public void innerOnFailure(Exception e) {     exception.set(e). }
false;public;0;23;;public void testWhenSuccessCannotNotifyMultipleTimes() {     AtomicReference<String> response = new AtomicReference<>().     AtomicReference<Exception> exception = new AtomicReference<>().     NotifyOnceListener<String> listener = new NotifyOnceListener<String>() {          @Override         public void innerOnResponse(String s) {             response.set(s).         }          @Override         public void innerOnFailure(Exception e) {             exception.set(e).         }     }.     listener.onResponse("response").     listener.onResponse("wrong-response").     listener.onFailure(new RuntimeException()).     assertNull(exception.get()).     assertEquals("response", response.get()). }
false;public;1;4;;@Override public void innerOnResponse(String s) {     response.set(s). }
false;public;1;4;;@Override public void innerOnFailure(Exception e) {     exception.set(e). }
false;public;0;24;;public void testWhenErrorCannotNotifyMultipleTimes() {     AtomicReference<String> response = new AtomicReference<>().     AtomicReference<Exception> exception = new AtomicReference<>().     NotifyOnceListener<String> listener = new NotifyOnceListener<String>() {          @Override         public void innerOnResponse(String s) {             response.set(s).         }          @Override         public void innerOnFailure(Exception e) {             exception.set(e).         }     }.     RuntimeException expected = new RuntimeException().     listener.onFailure(expected).     listener.onFailure(new IllegalArgumentException()).     listener.onResponse("response").     assertNull(response.get()).     assertSame(expected, exception.get()). }
