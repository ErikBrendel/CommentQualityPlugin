# id;timestamp;commentText;codeText;commentWords;codeWords
IndexLevelReplicationTests -> public void testRequestFailureReplication() throws Exception;1524684173;test request failures (failures before seq_no generation) are not added as a noop to translog;public void testRequestFailureReplication() throws Exception {_        try (ReplicationGroup shards = createGroup(0)) {_            shards.startAll()__            BulkItemResponse response = shards.index(_                    new IndexRequest(index.getName(), "testRequestFailureException", "1")_                            .source("{}", XContentType.JSON)_                            .version(2)_            )__            assertTrue(response.isFailed())__            assertThat(response.getFailure().getCause(), instanceOf(VersionConflictEngineException.class))__            shards.assertAllEqual(0)__            for (IndexShard indexShard : shards) {_                assertThat(indexShard.routingEntry() + " has the wrong number of ops in the translog",_                    indexShard.translogStats().estimatedNumberOfOperations(), equalTo(0))__            }__            _            int nReplica = randomIntBetween(1, 3)__            for (int i = 0_ i < nReplica_ i++) {_                shards.addReplica()__            }_            shards.startReplicas(nReplica)__            response = shards.index(_                    new IndexRequest(index.getName(), "testRequestFailureException", "1")_                            .source("{}", XContentType.JSON)_                            .version(2)_            )__            assertTrue(response.isFailed())__            assertThat(response.getFailure().getCause(), instanceOf(VersionConflictEngineException.class))__            shards.assertAllEqual(0)__            for (IndexShard indexShard : shards) {_                assertThat(indexShard.routingEntry() + " has the wrong number of ops in the translog",_                    indexShard.translogStats().estimatedNumberOfOperations(), equalTo(0))__            }_        }_    };test,request,failures,failures,before,generation,are,not,added,as,a,noop,to,translog;public,void,test,request,failure,replication,throws,exception,try,replication,group,shards,create,group,0,shards,start,all,bulk,item,response,response,shards,index,new,index,request,index,get,name,test,request,failure,exception,1,source,xcontent,type,json,version,2,assert,true,response,is,failed,assert,that,response,get,failure,get,cause,instance,of,version,conflict,engine,exception,class,shards,assert,all,equal,0,for,index,shard,index,shard,shards,assert,that,index,shard,routing,entry,has,the,wrong,number,of,ops,in,the,translog,index,shard,translog,stats,estimated,number,of,operations,equal,to,0,int,n,replica,random,int,between,1,3,for,int,i,0,i,n,replica,i,shards,add,replica,shards,start,replicas,n,replica,response,shards,index,new,index,request,index,get,name,test,request,failure,exception,1,source,xcontent,type,json,version,2,assert,true,response,is,failed,assert,that,response,get,failure,get,cause,instance,of,version,conflict,engine,exception,class,shards,assert,all,equal,0,for,index,shard,index,shard,shards,assert,that,index,shard,routing,entry,has,the,wrong,number,of,ops,in,the,translog,index,shard,translog,stats,estimated,number,of,operations,equal,to,0
IndexLevelReplicationTests -> public void testRequestFailureReplication() throws Exception;1525162917;test request failures (failures before seq_no generation) are not added as a noop to translog;public void testRequestFailureReplication() throws Exception {_        try (ReplicationGroup shards = createGroup(0)) {_            shards.startAll()__            BulkItemResponse response = shards.index(_                    new IndexRequest(index.getName(), "type", "1")_                            .source("{}", XContentType.JSON)_                            .version(2)_            )__            assertTrue(response.isFailed())__            assertThat(response.getFailure().getCause(), instanceOf(VersionConflictEngineException.class))__            shards.assertAllEqual(0)__            for (IndexShard indexShard : shards) {_                assertThat(indexShard.routingEntry() + " has the wrong number of ops in the translog",_                    indexShard.translogStats().estimatedNumberOfOperations(), equalTo(0))__            }__            _            int nReplica = randomIntBetween(1, 3)__            for (int i = 0_ i < nReplica_ i++) {_                shards.addReplica()__            }_            shards.startReplicas(nReplica)__            response = shards.index(_                    new IndexRequest(index.getName(), "type", "1")_                            .source("{}", XContentType.JSON)_                            .version(2)_            )__            assertTrue(response.isFailed())__            assertThat(response.getFailure().getCause(), instanceOf(VersionConflictEngineException.class))__            shards.assertAllEqual(0)__            for (IndexShard indexShard : shards) {_                assertThat(indexShard.routingEntry() + " has the wrong number of ops in the translog",_                    indexShard.translogStats().estimatedNumberOfOperations(), equalTo(0))__            }_        }_    };test,request,failures,failures,before,generation,are,not,added,as,a,noop,to,translog;public,void,test,request,failure,replication,throws,exception,try,replication,group,shards,create,group,0,shards,start,all,bulk,item,response,response,shards,index,new,index,request,index,get,name,type,1,source,xcontent,type,json,version,2,assert,true,response,is,failed,assert,that,response,get,failure,get,cause,instance,of,version,conflict,engine,exception,class,shards,assert,all,equal,0,for,index,shard,index,shard,shards,assert,that,index,shard,routing,entry,has,the,wrong,number,of,ops,in,the,translog,index,shard,translog,stats,estimated,number,of,operations,equal,to,0,int,n,replica,random,int,between,1,3,for,int,i,0,i,n,replica,i,shards,add,replica,shards,start,replicas,n,replica,response,shards,index,new,index,request,index,get,name,type,1,source,xcontent,type,json,version,2,assert,true,response,is,failed,assert,that,response,get,failure,get,cause,instance,of,version,conflict,engine,exception,class,shards,assert,all,equal,0,for,index,shard,index,shard,shards,assert,that,index,shard,routing,entry,has,the,wrong,number,of,ops,in,the,translog,index,shard,translog,stats,estimated,number,of,operations,equal,to,0
IndexLevelReplicationTests -> public void testRequestFailureReplication() throws Exception;1528706846;test request failures (failures before seq_no generation) are not added as a noop to translog;public void testRequestFailureReplication() throws Exception {_        try (ReplicationGroup shards = createGroup(0)) {_            shards.startAll()__            BulkItemResponse response = shards.index(_                    new IndexRequest(index.getName(), "type", "1")_                            .source("{}", XContentType.JSON)_                            .version(2)_            )__            assertTrue(response.isFailed())__            assertThat(response.getFailure().getCause(), instanceOf(VersionConflictEngineException.class))__            shards.assertAllEqual(0)__            for (IndexShard indexShard : shards) {_                assertThat(indexShard.routingEntry() + " has the wrong number of ops in the translog",_                    indexShard.translogStats().estimatedNumberOfOperations(), equalTo(0))__            }__            _            int nReplica = randomIntBetween(1, 3)__            for (int i = 0_ i < nReplica_ i++) {_                shards.addReplica()__            }_            shards.startReplicas(nReplica)__            response = shards.index(_                    new IndexRequest(index.getName(), "type", "1")_                            .source("{}", XContentType.JSON)_                            .version(2)_            )__            assertTrue(response.isFailed())__            assertThat(response.getFailure().getCause(), instanceOf(VersionConflictEngineException.class))__            shards.assertAllEqual(0)__            for (IndexShard indexShard : shards) {_                assertThat(indexShard.routingEntry() + " has the wrong number of ops in the translog",_                    indexShard.translogStats().estimatedNumberOfOperations(), equalTo(0))__            }_        }_    };test,request,failures,failures,before,generation,are,not,added,as,a,noop,to,translog;public,void,test,request,failure,replication,throws,exception,try,replication,group,shards,create,group,0,shards,start,all,bulk,item,response,response,shards,index,new,index,request,index,get,name,type,1,source,xcontent,type,json,version,2,assert,true,response,is,failed,assert,that,response,get,failure,get,cause,instance,of,version,conflict,engine,exception,class,shards,assert,all,equal,0,for,index,shard,index,shard,shards,assert,that,index,shard,routing,entry,has,the,wrong,number,of,ops,in,the,translog,index,shard,translog,stats,estimated,number,of,operations,equal,to,0,int,n,replica,random,int,between,1,3,for,int,i,0,i,n,replica,i,shards,add,replica,shards,start,replicas,n,replica,response,shards,index,new,index,request,index,get,name,type,1,source,xcontent,type,json,version,2,assert,true,response,is,failed,assert,that,response,get,failure,get,cause,instance,of,version,conflict,engine,exception,class,shards,assert,all,equal,0,for,index,shard,index,shard,shards,assert,that,index,shard,routing,entry,has,the,wrong,number,of,ops,in,the,translog,index,shard,translog,stats,estimated,number,of,operations,equal,to,0
IndexLevelReplicationTests -> public void testRequestFailureReplication() throws Exception;1531910483;test request failures (failures before seq_no generation) are not added as a noop to translog;public void testRequestFailureReplication() throws Exception {_        try (ReplicationGroup shards = createGroup(0)) {_            shards.startAll()__            BulkItemResponse response = shards.index(_                    new IndexRequest(index.getName(), "type", "1")_                            .source("{}", XContentType.JSON)_                            .version(2)_            )__            assertTrue(response.isFailed())__            assertThat(response.getFailure().getCause(), instanceOf(VersionConflictEngineException.class))__            shards.assertAllEqual(0)__            for (IndexShard indexShard : shards) {_                assertThat(indexShard.routingEntry() + " has the wrong number of ops in the translog",_                    indexShard.translogStats().estimatedNumberOfOperations(), equalTo(0))__            }__            _            int nReplica = randomIntBetween(1, 3)__            for (int i = 0_ i < nReplica_ i++) {_                shards.addReplica()__            }_            shards.startReplicas(nReplica)__            response = shards.index(_                    new IndexRequest(index.getName(), "type", "1")_                            .source("{}", XContentType.JSON)_                            .version(2)_            )__            assertTrue(response.isFailed())__            assertThat(response.getFailure().getCause(), instanceOf(VersionConflictEngineException.class))__            shards.assertAllEqual(0)__            for (IndexShard indexShard : shards) {_                assertThat(indexShard.routingEntry() + " has the wrong number of ops in the translog",_                    indexShard.translogStats().estimatedNumberOfOperations(), equalTo(0))__            }_        }_    };test,request,failures,failures,before,generation,are,not,added,as,a,noop,to,translog;public,void,test,request,failure,replication,throws,exception,try,replication,group,shards,create,group,0,shards,start,all,bulk,item,response,response,shards,index,new,index,request,index,get,name,type,1,source,xcontent,type,json,version,2,assert,true,response,is,failed,assert,that,response,get,failure,get,cause,instance,of,version,conflict,engine,exception,class,shards,assert,all,equal,0,for,index,shard,index,shard,shards,assert,that,index,shard,routing,entry,has,the,wrong,number,of,ops,in,the,translog,index,shard,translog,stats,estimated,number,of,operations,equal,to,0,int,n,replica,random,int,between,1,3,for,int,i,0,i,n,replica,i,shards,add,replica,shards,start,replicas,n,replica,response,shards,index,new,index,request,index,get,name,type,1,source,xcontent,type,json,version,2,assert,true,response,is,failed,assert,that,response,get,failure,get,cause,instance,of,version,conflict,engine,exception,class,shards,assert,all,equal,0,for,index,shard,index,shard,shards,assert,that,index,shard,routing,entry,has,the,wrong,number,of,ops,in,the,translog,index,shard,translog,stats,estimated,number,of,operations,equal,to,0
IndexLevelReplicationTests -> public void testRequestFailureReplication() throws Exception;1533295538;test request failures (failures before seq_no generation) are not added as a noop to translog;public void testRequestFailureReplication() throws Exception {_        try (ReplicationGroup shards = createGroup(0)) {_            shards.startAll()__            BulkItemResponse response = shards.index(_                    new IndexRequest(index.getName(), "type", "1")_                            .source("{}", XContentType.JSON)_                            .version(2)_            )__            assertTrue(response.isFailed())__            assertThat(response.getFailure().getCause(), instanceOf(VersionConflictEngineException.class))__            shards.assertAllEqual(0)__            for (IndexShard indexShard : shards) {_                assertThat(indexShard.routingEntry() + " has the wrong number of ops in the translog",_                    indexShard.translogStats().estimatedNumberOfOperations(), equalTo(0))__            }__            _            int nReplica = randomIntBetween(1, 3)__            for (int i = 0_ i < nReplica_ i++) {_                shards.addReplica()__            }_            shards.startReplicas(nReplica)__            response = shards.index(_                    new IndexRequest(index.getName(), "type", "1")_                            .source("{}", XContentType.JSON)_                            .version(2)_            )__            assertTrue(response.isFailed())__            assertThat(response.getFailure().getCause(), instanceOf(VersionConflictEngineException.class))__            shards.assertAllEqual(0)__            for (IndexShard indexShard : shards) {_                assertThat(indexShard.routingEntry() + " has the wrong number of ops in the translog",_                    indexShard.translogStats().estimatedNumberOfOperations(), equalTo(0))__            }_        }_    };test,request,failures,failures,before,generation,are,not,added,as,a,noop,to,translog;public,void,test,request,failure,replication,throws,exception,try,replication,group,shards,create,group,0,shards,start,all,bulk,item,response,response,shards,index,new,index,request,index,get,name,type,1,source,xcontent,type,json,version,2,assert,true,response,is,failed,assert,that,response,get,failure,get,cause,instance,of,version,conflict,engine,exception,class,shards,assert,all,equal,0,for,index,shard,index,shard,shards,assert,that,index,shard,routing,entry,has,the,wrong,number,of,ops,in,the,translog,index,shard,translog,stats,estimated,number,of,operations,equal,to,0,int,n,replica,random,int,between,1,3,for,int,i,0,i,n,replica,i,shards,add,replica,shards,start,replicas,n,replica,response,shards,index,new,index,request,index,get,name,type,1,source,xcontent,type,json,version,2,assert,true,response,is,failed,assert,that,response,get,failure,get,cause,instance,of,version,conflict,engine,exception,class,shards,assert,all,equal,0,for,index,shard,index,shard,shards,assert,that,index,shard,routing,entry,has,the,wrong,number,of,ops,in,the,translog,index,shard,translog,stats,estimated,number,of,operations,equal,to,0
IndexLevelReplicationTests -> public void testRequestFailureReplication() throws Exception;1533641732;test request failures (failures before seq_no generation) are not added as a noop to translog;public void testRequestFailureReplication() throws Exception {_        try (ReplicationGroup shards = createGroup(0)) {_            shards.startAll()__            BulkItemResponse response = shards.index(_                    new IndexRequest(index.getName(), "type", "1")_                            .source("{}", XContentType.JSON)_                            .version(2)_            )__            assertTrue(response.isFailed())__            assertThat(response.getFailure().getCause(), instanceOf(VersionConflictEngineException.class))__            shards.assertAllEqual(0)__            for (IndexShard indexShard : shards) {_                assertThat(indexShard.routingEntry() + " has the wrong number of ops in the translog",_                    indexShard.translogStats().estimatedNumberOfOperations(), equalTo(0))__            }__            _            int nReplica = randomIntBetween(1, 3)__            for (int i = 0_ i < nReplica_ i++) {_                shards.addReplica()__            }_            shards.startReplicas(nReplica)__            response = shards.index(_                    new IndexRequest(index.getName(), "type", "1")_                            .source("{}", XContentType.JSON)_                            .version(2)_            )__            assertTrue(response.isFailed())__            assertThat(response.getFailure().getCause(), instanceOf(VersionConflictEngineException.class))__            shards.assertAllEqual(0)__            for (IndexShard indexShard : shards) {_                assertThat(indexShard.routingEntry() + " has the wrong number of ops in the translog",_                    indexShard.translogStats().estimatedNumberOfOperations(), equalTo(0))__            }_        }_    };test,request,failures,failures,before,generation,are,not,added,as,a,noop,to,translog;public,void,test,request,failure,replication,throws,exception,try,replication,group,shards,create,group,0,shards,start,all,bulk,item,response,response,shards,index,new,index,request,index,get,name,type,1,source,xcontent,type,json,version,2,assert,true,response,is,failed,assert,that,response,get,failure,get,cause,instance,of,version,conflict,engine,exception,class,shards,assert,all,equal,0,for,index,shard,index,shard,shards,assert,that,index,shard,routing,entry,has,the,wrong,number,of,ops,in,the,translog,index,shard,translog,stats,estimated,number,of,operations,equal,to,0,int,n,replica,random,int,between,1,3,for,int,i,0,i,n,replica,i,shards,add,replica,shards,start,replicas,n,replica,response,shards,index,new,index,request,index,get,name,type,1,source,xcontent,type,json,version,2,assert,true,response,is,failed,assert,that,response,get,failure,get,cause,instance,of,version,conflict,engine,exception,class,shards,assert,all,equal,0,for,index,shard,index,shard,shards,assert,that,index,shard,routing,entry,has,the,wrong,number,of,ops,in,the,translog,index,shard,translog,stats,estimated,number,of,operations,equal,to,0
IndexLevelReplicationTests -> public void testRequestFailureReplication() throws Exception;1535405719;test request failures (failures before seq_no generation) are not added as a noop to translog;public void testRequestFailureReplication() throws Exception {_        try (ReplicationGroup shards = createGroup(0)) {_            shards.startAll()__            BulkItemResponse response = shards.index(_                    new IndexRequest(index.getName(), "type", "1")_                            .source("{}", XContentType.JSON)_                            .version(2)_            )__            assertTrue(response.isFailed())__            assertThat(response.getFailure().getCause(), instanceOf(VersionConflictEngineException.class))__            shards.assertAllEqual(0)__            for (IndexShard indexShard : shards) {_                assertThat(indexShard.routingEntry() + " has the wrong number of ops in the translog",_                    indexShard.translogStats().estimatedNumberOfOperations(), equalTo(0))__            }__            _            int nReplica = randomIntBetween(1, 3)__            for (int i = 0_ i < nReplica_ i++) {_                shards.addReplica()__            }_            shards.startReplicas(nReplica)__            response = shards.index(_                    new IndexRequest(index.getName(), "type", "1")_                            .source("{}", XContentType.JSON)_                            .version(2)_            )__            assertTrue(response.isFailed())__            assertThat(response.getFailure().getCause(), instanceOf(VersionConflictEngineException.class))__            shards.assertAllEqual(0)__            for (IndexShard indexShard : shards) {_                assertThat(indexShard.routingEntry() + " has the wrong number of ops in the translog",_                    indexShard.translogStats().estimatedNumberOfOperations(), equalTo(0))__            }_        }_    };test,request,failures,failures,before,generation,are,not,added,as,a,noop,to,translog;public,void,test,request,failure,replication,throws,exception,try,replication,group,shards,create,group,0,shards,start,all,bulk,item,response,response,shards,index,new,index,request,index,get,name,type,1,source,xcontent,type,json,version,2,assert,true,response,is,failed,assert,that,response,get,failure,get,cause,instance,of,version,conflict,engine,exception,class,shards,assert,all,equal,0,for,index,shard,index,shard,shards,assert,that,index,shard,routing,entry,has,the,wrong,number,of,ops,in,the,translog,index,shard,translog,stats,estimated,number,of,operations,equal,to,0,int,n,replica,random,int,between,1,3,for,int,i,0,i,n,replica,i,shards,add,replica,shards,start,replicas,n,replica,response,shards,index,new,index,request,index,get,name,type,1,source,xcontent,type,json,version,2,assert,true,response,is,failed,assert,that,response,get,failure,get,cause,instance,of,version,conflict,engine,exception,class,shards,assert,all,equal,0,for,index,shard,index,shard,shards,assert,that,index,shard,routing,entry,has,the,wrong,number,of,ops,in,the,translog,index,shard,translog,stats,estimated,number,of,operations,equal,to,0
IndexLevelReplicationTests -> public void testRequestFailureReplication() throws Exception;1535723122;test request failures (failures before seq_no generation) are not added as a noop to translog;public void testRequestFailureReplication() throws Exception {_        try (ReplicationGroup shards = createGroup(0)) {_            shards.startAll()__            BulkItemResponse response = shards.index(_                    new IndexRequest(index.getName(), "type", "1")_                            .source("{}", XContentType.JSON)_                            .version(2)_            )__            assertTrue(response.isFailed())__            assertThat(response.getFailure().getCause(), instanceOf(VersionConflictEngineException.class))__            shards.assertAllEqual(0)__            for (IndexShard indexShard : shards) {_                assertThat(indexShard.routingEntry() + " has the wrong number of ops in the translog",_                    indexShard.translogStats().estimatedNumberOfOperations(), equalTo(0))__            }__            _            int nReplica = randomIntBetween(1, 3)__            for (int i = 0_ i < nReplica_ i++) {_                shards.addReplica()__            }_            shards.startReplicas(nReplica)__            response = shards.index(_                    new IndexRequest(index.getName(), "type", "1")_                            .source("{}", XContentType.JSON)_                            .version(2)_            )__            assertTrue(response.isFailed())__            assertThat(response.getFailure().getCause(), instanceOf(VersionConflictEngineException.class))__            shards.assertAllEqual(0)__            for (IndexShard indexShard : shards) {_                assertThat(indexShard.routingEntry() + " has the wrong number of ops in the translog",_                    indexShard.translogStats().estimatedNumberOfOperations(), equalTo(0))__            }_        }_    };test,request,failures,failures,before,generation,are,not,added,as,a,noop,to,translog;public,void,test,request,failure,replication,throws,exception,try,replication,group,shards,create,group,0,shards,start,all,bulk,item,response,response,shards,index,new,index,request,index,get,name,type,1,source,xcontent,type,json,version,2,assert,true,response,is,failed,assert,that,response,get,failure,get,cause,instance,of,version,conflict,engine,exception,class,shards,assert,all,equal,0,for,index,shard,index,shard,shards,assert,that,index,shard,routing,entry,has,the,wrong,number,of,ops,in,the,translog,index,shard,translog,stats,estimated,number,of,operations,equal,to,0,int,n,replica,random,int,between,1,3,for,int,i,0,i,n,replica,i,shards,add,replica,shards,start,replicas,n,replica,response,shards,index,new,index,request,index,get,name,type,1,source,xcontent,type,json,version,2,assert,true,response,is,failed,assert,that,response,get,failure,get,cause,instance,of,version,conflict,engine,exception,class,shards,assert,all,equal,0,for,index,shard,index,shard,shards,assert,that,index,shard,routing,entry,has,the,wrong,number,of,ops,in,the,translog,index,shard,translog,stats,estimated,number,of,operations,equal,to,0
IndexLevelReplicationTests -> public void testRequestFailureReplication() throws Exception;1536314350;test request failures (failures before seq_no generation) are not added as a noop to translog;public void testRequestFailureReplication() throws Exception {_        try (ReplicationGroup shards = createGroup(0)) {_            shards.startAll()__            BulkItemResponse response = shards.index(_                    new IndexRequest(index.getName(), "type", "1")_                            .source("{}", XContentType.JSON)_                            .version(2)_            )__            assertTrue(response.isFailed())__            assertThat(response.getFailure().getCause(), instanceOf(VersionConflictEngineException.class))__            shards.assertAllEqual(0)__            for (IndexShard indexShard : shards) {_                assertThat(indexShard.routingEntry() + " has the wrong number of ops in the translog",_                    indexShard.translogStats().estimatedNumberOfOperations(), equalTo(0))__            }__            _            int nReplica = randomIntBetween(1, 3)__            for (int i = 0_ i < nReplica_ i++) {_                shards.addReplica()__            }_            shards.startReplicas(nReplica)__            response = shards.index(_                    new IndexRequest(index.getName(), "type", "1")_                            .source("{}", XContentType.JSON)_                            .version(2)_            )__            assertTrue(response.isFailed())__            assertThat(response.getFailure().getCause(), instanceOf(VersionConflictEngineException.class))__            shards.assertAllEqual(0)__            for (IndexShard indexShard : shards) {_                assertThat(indexShard.routingEntry() + " has the wrong number of ops in the translog",_                    indexShard.translogStats().estimatedNumberOfOperations(), equalTo(0))__            }_        }_    };test,request,failures,failures,before,generation,are,not,added,as,a,noop,to,translog;public,void,test,request,failure,replication,throws,exception,try,replication,group,shards,create,group,0,shards,start,all,bulk,item,response,response,shards,index,new,index,request,index,get,name,type,1,source,xcontent,type,json,version,2,assert,true,response,is,failed,assert,that,response,get,failure,get,cause,instance,of,version,conflict,engine,exception,class,shards,assert,all,equal,0,for,index,shard,index,shard,shards,assert,that,index,shard,routing,entry,has,the,wrong,number,of,ops,in,the,translog,index,shard,translog,stats,estimated,number,of,operations,equal,to,0,int,n,replica,random,int,between,1,3,for,int,i,0,i,n,replica,i,shards,add,replica,shards,start,replicas,n,replica,response,shards,index,new,index,request,index,get,name,type,1,source,xcontent,type,json,version,2,assert,true,response,is,failed,assert,that,response,get,failure,get,cause,instance,of,version,conflict,engine,exception,class,shards,assert,all,equal,0,for,index,shard,index,shard,shards,assert,that,index,shard,routing,entry,has,the,wrong,number,of,ops,in,the,translog,index,shard,translog,stats,estimated,number,of,operations,equal,to,0
IndexLevelReplicationTests -> public void testRequestFailureReplication() throws Exception;1536828374;test request failures (failures before seq_no generation) are not added as a noop to translog;public void testRequestFailureReplication() throws Exception {_        try (ReplicationGroup shards = createGroup(0)) {_            shards.startAll()__            BulkItemResponse response = shards.index(_                    new IndexRequest(index.getName(), "type", "1")_                            .source("{}", XContentType.JSON)_                            .version(2)_            )__            assertTrue(response.isFailed())__            assertThat(response.getFailure().getCause(), instanceOf(VersionConflictEngineException.class))__            shards.assertAllEqual(0)__            for (IndexShard indexShard : shards) {_                assertThat(indexShard.routingEntry() + " has the wrong number of ops in the translog",_                    indexShard.translogStats().estimatedNumberOfOperations(), equalTo(0))__            }__            _            int nReplica = randomIntBetween(1, 3)__            for (int i = 0_ i < nReplica_ i++) {_                shards.addReplica()__            }_            shards.startReplicas(nReplica)__            response = shards.index(_                    new IndexRequest(index.getName(), "type", "1")_                            .source("{}", XContentType.JSON)_                            .version(2)_            )__            assertTrue(response.isFailed())__            assertThat(response.getFailure().getCause(), instanceOf(VersionConflictEngineException.class))__            shards.assertAllEqual(0)__            for (IndexShard indexShard : shards) {_                assertThat(indexShard.routingEntry() + " has the wrong number of ops in the translog",_                    indexShard.translogStats().estimatedNumberOfOperations(), equalTo(0))__            }_        }_    };test,request,failures,failures,before,generation,are,not,added,as,a,noop,to,translog;public,void,test,request,failure,replication,throws,exception,try,replication,group,shards,create,group,0,shards,start,all,bulk,item,response,response,shards,index,new,index,request,index,get,name,type,1,source,xcontent,type,json,version,2,assert,true,response,is,failed,assert,that,response,get,failure,get,cause,instance,of,version,conflict,engine,exception,class,shards,assert,all,equal,0,for,index,shard,index,shard,shards,assert,that,index,shard,routing,entry,has,the,wrong,number,of,ops,in,the,translog,index,shard,translog,stats,estimated,number,of,operations,equal,to,0,int,n,replica,random,int,between,1,3,for,int,i,0,i,n,replica,i,shards,add,replica,shards,start,replicas,n,replica,response,shards,index,new,index,request,index,get,name,type,1,source,xcontent,type,json,version,2,assert,true,response,is,failed,assert,that,response,get,failure,get,cause,instance,of,version,conflict,engine,exception,class,shards,assert,all,equal,0,for,index,shard,index,shard,shards,assert,that,index,shard,routing,entry,has,the,wrong,number,of,ops,in,the,translog,index,shard,translog,stats,estimated,number,of,operations,equal,to,0
IndexLevelReplicationTests -> public void testRequestFailureReplication() throws Exception;1537806831;test request failures (failures before seq_no generation) are not added as a noop to translog;public void testRequestFailureReplication() throws Exception {_        try (ReplicationGroup shards = createGroup(0)) {_            shards.startAll()__            BulkItemResponse response = shards.index(_                    new IndexRequest(index.getName(), "type", "1")_                            .source("{}", XContentType.JSON)_                            .version(2)_            )__            assertTrue(response.isFailed())__            assertThat(response.getFailure().getCause(), instanceOf(VersionConflictEngineException.class))__            shards.assertAllEqual(0)__            for (IndexShard indexShard : shards) {_                assertThat(indexShard.routingEntry() + " has the wrong number of ops in the translog",_                    indexShard.translogStats().estimatedNumberOfOperations(), equalTo(0))__            }__            _            int nReplica = randomIntBetween(1, 3)__            for (int i = 0_ i < nReplica_ i++) {_                shards.addReplica()__            }_            shards.startReplicas(nReplica)__            response = shards.index(_                    new IndexRequest(index.getName(), "type", "1")_                            .source("{}", XContentType.JSON)_                            .version(2)_            )__            assertTrue(response.isFailed())__            assertThat(response.getFailure().getCause(), instanceOf(VersionConflictEngineException.class))__            shards.assertAllEqual(0)__            for (IndexShard indexShard : shards) {_                assertThat(indexShard.routingEntry() + " has the wrong number of ops in the translog",_                    indexShard.translogStats().estimatedNumberOfOperations(), equalTo(0))__            }_        }_    };test,request,failures,failures,before,generation,are,not,added,as,a,noop,to,translog;public,void,test,request,failure,replication,throws,exception,try,replication,group,shards,create,group,0,shards,start,all,bulk,item,response,response,shards,index,new,index,request,index,get,name,type,1,source,xcontent,type,json,version,2,assert,true,response,is,failed,assert,that,response,get,failure,get,cause,instance,of,version,conflict,engine,exception,class,shards,assert,all,equal,0,for,index,shard,index,shard,shards,assert,that,index,shard,routing,entry,has,the,wrong,number,of,ops,in,the,translog,index,shard,translog,stats,estimated,number,of,operations,equal,to,0,int,n,replica,random,int,between,1,3,for,int,i,0,i,n,replica,i,shards,add,replica,shards,start,replicas,n,replica,response,shards,index,new,index,request,index,get,name,type,1,source,xcontent,type,json,version,2,assert,true,response,is,failed,assert,that,response,get,failure,get,cause,instance,of,version,conflict,engine,exception,class,shards,assert,all,equal,0,for,index,shard,index,shard,shards,assert,that,index,shard,routing,entry,has,the,wrong,number,of,ops,in,the,translog,index,shard,translog,stats,estimated,number,of,operations,equal,to,0
IndexLevelReplicationTests -> public void testRequestFailureReplication() throws Exception;1538067637;test request failures (failures before seq_no generation) are not added as a noop to translog;public void testRequestFailureReplication() throws Exception {_        try (ReplicationGroup shards = createGroup(0)) {_            shards.startAll()__            BulkItemResponse response = shards.index(_                    new IndexRequest(index.getName(), "type", "1")_                            .source("{}", XContentType.JSON)_                            .version(2)_            )__            assertTrue(response.isFailed())__            assertThat(response.getFailure().getCause(), instanceOf(VersionConflictEngineException.class))__            shards.assertAllEqual(0)__            for (IndexShard indexShard : shards) {_                assertThat(indexShard.routingEntry() + " has the wrong number of ops in the translog",_                    indexShard.translogStats().estimatedNumberOfOperations(), equalTo(0))__            }__            _            int nReplica = randomIntBetween(1, 3)__            for (int i = 0_ i < nReplica_ i++) {_                shards.addReplica()__            }_            shards.startReplicas(nReplica)__            response = shards.index(_                    new IndexRequest(index.getName(), "type", "1")_                            .source("{}", XContentType.JSON)_                            .version(2)_            )__            assertTrue(response.isFailed())__            assertThat(response.getFailure().getCause(), instanceOf(VersionConflictEngineException.class))__            shards.assertAllEqual(0)__            for (IndexShard indexShard : shards) {_                assertThat(indexShard.routingEntry() + " has the wrong number of ops in the translog",_                    indexShard.translogStats().estimatedNumberOfOperations(), equalTo(0))__            }_        }_    };test,request,failures,failures,before,generation,are,not,added,as,a,noop,to,translog;public,void,test,request,failure,replication,throws,exception,try,replication,group,shards,create,group,0,shards,start,all,bulk,item,response,response,shards,index,new,index,request,index,get,name,type,1,source,xcontent,type,json,version,2,assert,true,response,is,failed,assert,that,response,get,failure,get,cause,instance,of,version,conflict,engine,exception,class,shards,assert,all,equal,0,for,index,shard,index,shard,shards,assert,that,index,shard,routing,entry,has,the,wrong,number,of,ops,in,the,translog,index,shard,translog,stats,estimated,number,of,operations,equal,to,0,int,n,replica,random,int,between,1,3,for,int,i,0,i,n,replica,i,shards,add,replica,shards,start,replicas,n,replica,response,shards,index,new,index,request,index,get,name,type,1,source,xcontent,type,json,version,2,assert,true,response,is,failed,assert,that,response,get,failure,get,cause,instance,of,version,conflict,engine,exception,class,shards,assert,all,equal,0,for,index,shard,index,shard,shards,assert,that,index,shard,routing,entry,has,the,wrong,number,of,ops,in,the,translog,index,shard,translog,stats,estimated,number,of,operations,equal,to,0
IndexLevelReplicationTests -> public void testRequestFailureReplication() throws Exception;1548124510;test request failures (failures before seq_no generation) are not added as a noop to translog;public void testRequestFailureReplication() throws Exception {_        try (ReplicationGroup shards = createGroup(0)) {_            shards.startAll()__            BulkItemResponse response = shards.index(_                    new IndexRequest(index.getName(), "type", "1")_                            .source("{}", XContentType.JSON)_                            .version(2)_            )__            assertTrue(response.isFailed())__            assertThat(response.getFailure().getCause(), instanceOf(VersionConflictEngineException.class))__            shards.assertAllEqual(0)__            for (IndexShard indexShard : shards) {_                assertThat(indexShard.routingEntry() + " has the wrong number of ops in the translog",_                    indexShard.translogStats().estimatedNumberOfOperations(), equalTo(0))__            }__            _            int nReplica = randomIntBetween(1, 3)__            for (int i = 0_ i < nReplica_ i++) {_                shards.addReplica()__            }_            shards.startReplicas(nReplica)__            response = shards.index(_                    new IndexRequest(index.getName(), "type", "1")_                            .source("{}", XContentType.JSON)_                            .version(2)_            )__            assertTrue(response.isFailed())__            assertThat(response.getFailure().getCause(), instanceOf(VersionConflictEngineException.class))__            shards.assertAllEqual(0)__            for (IndexShard indexShard : shards) {_                assertThat(indexShard.routingEntry() + " has the wrong number of ops in the translog",_                    indexShard.translogStats().estimatedNumberOfOperations(), equalTo(0))__            }_        }_    };test,request,failures,failures,before,generation,are,not,added,as,a,noop,to,translog;public,void,test,request,failure,replication,throws,exception,try,replication,group,shards,create,group,0,shards,start,all,bulk,item,response,response,shards,index,new,index,request,index,get,name,type,1,source,xcontent,type,json,version,2,assert,true,response,is,failed,assert,that,response,get,failure,get,cause,instance,of,version,conflict,engine,exception,class,shards,assert,all,equal,0,for,index,shard,index,shard,shards,assert,that,index,shard,routing,entry,has,the,wrong,number,of,ops,in,the,translog,index,shard,translog,stats,estimated,number,of,operations,equal,to,0,int,n,replica,random,int,between,1,3,for,int,i,0,i,n,replica,i,shards,add,replica,shards,start,replicas,n,replica,response,shards,index,new,index,request,index,get,name,type,1,source,xcontent,type,json,version,2,assert,true,response,is,failed,assert,that,response,get,failure,get,cause,instance,of,version,conflict,engine,exception,class,shards,assert,all,equal,0,for,index,shard,index,shard,shards,assert,that,index,shard,routing,entry,has,the,wrong,number,of,ops,in,the,translog,index,shard,translog,stats,estimated,number,of,operations,equal,to,0
IndexLevelReplicationTests -> public void testOutOfOrderDeliveryForAppendOnlyOperations() throws Exception;1524684173;This test ensures the consistency between primary and replica when non-append-only (eg. index request with id or delete) operation_of the same document is processed before the original append-only request on replicas. The append-only document can be exposed and_deleted on the primary before it is added to replica. Replicas should treat a late append-only request as a regular index request.;public void testOutOfOrderDeliveryForAppendOnlyOperations() throws Exception {_        try (ReplicationGroup shards = createGroup(1)) {_            shards.startAll()__            final IndexShard primary = shards.getPrimary()__            final IndexShard replica = shards.getReplicas().get(0)__            _            final BulkShardRequest indexRequest = indexOnPrimary(_                new IndexRequest(index.getName(), "type", null).source("{}", XContentType.JSON), primary)__            final String docId = Iterables.get(getShardDocUIDs(primary), 0)__            final BulkShardRequest deleteRequest = deleteOnPrimary(new DeleteRequest(index.getName(), "type", docId), primary)__            deleteOnReplica(deleteRequest, shards, replica)__            indexOnReplica(indexRequest, shards, replica)__            shards.assertAllEqual(0)__        }_    };this,test,ensures,the,consistency,between,primary,and,replica,when,non,append,only,eg,index,request,with,id,or,delete,operation,of,the,same,document,is,processed,before,the,original,append,only,request,on,replicas,the,append,only,document,can,be,exposed,and,deleted,on,the,primary,before,it,is,added,to,replica,replicas,should,treat,a,late,append,only,request,as,a,regular,index,request;public,void,test,out,of,order,delivery,for,append,only,operations,throws,exception,try,replication,group,shards,create,group,1,shards,start,all,final,index,shard,primary,shards,get,primary,final,index,shard,replica,shards,get,replicas,get,0,final,bulk,shard,request,index,request,index,on,primary,new,index,request,index,get,name,type,null,source,xcontent,type,json,primary,final,string,doc,id,iterables,get,get,shard,doc,uids,primary,0,final,bulk,shard,request,delete,request,delete,on,primary,new,delete,request,index,get,name,type,doc,id,primary,delete,on,replica,delete,request,shards,replica,index,on,replica,index,request,shards,replica,shards,assert,all,equal,0
IndexLevelReplicationTests -> public void testOutOfOrderDeliveryForAppendOnlyOperations() throws Exception;1525162917;This test ensures the consistency between primary and replica when non-append-only (eg. index request with id or delete) operation_of the same document is processed before the original append-only request on replicas. The append-only document can be exposed and_deleted on the primary before it is added to replica. Replicas should treat a late append-only request as a regular index request.;public void testOutOfOrderDeliveryForAppendOnlyOperations() throws Exception {_        try (ReplicationGroup shards = createGroup(1)) {_            shards.startAll()__            final IndexShard primary = shards.getPrimary()__            final IndexShard replica = shards.getReplicas().get(0)__            _            final BulkShardRequest indexRequest = indexOnPrimary(_                new IndexRequest(index.getName(), "type", null).source("{}", XContentType.JSON), primary)__            final String docId = Iterables.get(getShardDocUIDs(primary), 0)__            final BulkShardRequest deleteRequest = deleteOnPrimary(new DeleteRequest(index.getName(), "type", docId), primary)__            deleteOnReplica(deleteRequest, shards, replica)__            indexOnReplica(indexRequest, shards, replica)__            shards.assertAllEqual(0)__        }_    };this,test,ensures,the,consistency,between,primary,and,replica,when,non,append,only,eg,index,request,with,id,or,delete,operation,of,the,same,document,is,processed,before,the,original,append,only,request,on,replicas,the,append,only,document,can,be,exposed,and,deleted,on,the,primary,before,it,is,added,to,replica,replicas,should,treat,a,late,append,only,request,as,a,regular,index,request;public,void,test,out,of,order,delivery,for,append,only,operations,throws,exception,try,replication,group,shards,create,group,1,shards,start,all,final,index,shard,primary,shards,get,primary,final,index,shard,replica,shards,get,replicas,get,0,final,bulk,shard,request,index,request,index,on,primary,new,index,request,index,get,name,type,null,source,xcontent,type,json,primary,final,string,doc,id,iterables,get,get,shard,doc,uids,primary,0,final,bulk,shard,request,delete,request,delete,on,primary,new,delete,request,index,get,name,type,doc,id,primary,delete,on,replica,delete,request,shards,replica,index,on,replica,index,request,shards,replica,shards,assert,all,equal,0
IndexLevelReplicationTests -> public void testOutOfOrderDeliveryForAppendOnlyOperations() throws Exception;1528706846;This test ensures the consistency between primary and replica when non-append-only (eg. index request with id or delete) operation_of the same document is processed before the original append-only request on replicas. The append-only document can be exposed and_deleted on the primary before it is added to replica. Replicas should treat a late append-only request as a regular index request.;public void testOutOfOrderDeliveryForAppendOnlyOperations() throws Exception {_        try (ReplicationGroup shards = createGroup(1)) {_            shards.startAll()__            final IndexShard primary = shards.getPrimary()__            final IndexShard replica = shards.getReplicas().get(0)__            _            final BulkShardRequest indexRequest = indexOnPrimary(_                new IndexRequest(index.getName(), "type", null).source("{}", XContentType.JSON), primary)__            final String docId = Iterables.get(getShardDocUIDs(primary), 0)__            final BulkShardRequest deleteRequest = deleteOnPrimary(new DeleteRequest(index.getName(), "type", docId), primary)__            deleteOnReplica(deleteRequest, shards, replica)__            indexOnReplica(indexRequest, shards, replica)__            shards.assertAllEqual(0)__        }_    };this,test,ensures,the,consistency,between,primary,and,replica,when,non,append,only,eg,index,request,with,id,or,delete,operation,of,the,same,document,is,processed,before,the,original,append,only,request,on,replicas,the,append,only,document,can,be,exposed,and,deleted,on,the,primary,before,it,is,added,to,replica,replicas,should,treat,a,late,append,only,request,as,a,regular,index,request;public,void,test,out,of,order,delivery,for,append,only,operations,throws,exception,try,replication,group,shards,create,group,1,shards,start,all,final,index,shard,primary,shards,get,primary,final,index,shard,replica,shards,get,replicas,get,0,final,bulk,shard,request,index,request,index,on,primary,new,index,request,index,get,name,type,null,source,xcontent,type,json,primary,final,string,doc,id,iterables,get,get,shard,doc,uids,primary,0,final,bulk,shard,request,delete,request,delete,on,primary,new,delete,request,index,get,name,type,doc,id,primary,delete,on,replica,delete,request,shards,replica,index,on,replica,index,request,shards,replica,shards,assert,all,equal,0
IndexLevelReplicationTests -> public void testOutOfOrderDeliveryForAppendOnlyOperations() throws Exception;1531910483;This test ensures the consistency between primary and replica when non-append-only (eg. index request with id or delete) operation_of the same document is processed before the original append-only request on replicas. The append-only document can be exposed and_deleted on the primary before it is added to replica. Replicas should treat a late append-only request as a regular index request.;public void testOutOfOrderDeliveryForAppendOnlyOperations() throws Exception {_        try (ReplicationGroup shards = createGroup(1)) {_            shards.startAll()__            final IndexShard primary = shards.getPrimary()__            final IndexShard replica = shards.getReplicas().get(0)__            _            final BulkShardRequest indexRequest = indexOnPrimary(_                new IndexRequest(index.getName(), "type", null).source("{}", XContentType.JSON), primary)__            final String docId = Iterables.get(getShardDocUIDs(primary), 0)__            final BulkShardRequest deleteRequest = deleteOnPrimary(new DeleteRequest(index.getName(), "type", docId), primary)__            deleteOnReplica(deleteRequest, shards, replica)__            indexOnReplica(indexRequest, shards, replica)__            shards.assertAllEqual(0)__        }_    };this,test,ensures,the,consistency,between,primary,and,replica,when,non,append,only,eg,index,request,with,id,or,delete,operation,of,the,same,document,is,processed,before,the,original,append,only,request,on,replicas,the,append,only,document,can,be,exposed,and,deleted,on,the,primary,before,it,is,added,to,replica,replicas,should,treat,a,late,append,only,request,as,a,regular,index,request;public,void,test,out,of,order,delivery,for,append,only,operations,throws,exception,try,replication,group,shards,create,group,1,shards,start,all,final,index,shard,primary,shards,get,primary,final,index,shard,replica,shards,get,replicas,get,0,final,bulk,shard,request,index,request,index,on,primary,new,index,request,index,get,name,type,null,source,xcontent,type,json,primary,final,string,doc,id,iterables,get,get,shard,doc,uids,primary,0,final,bulk,shard,request,delete,request,delete,on,primary,new,delete,request,index,get,name,type,doc,id,primary,delete,on,replica,delete,request,shards,replica,index,on,replica,index,request,shards,replica,shards,assert,all,equal,0
IndexLevelReplicationTests -> public void testOutOfOrderDeliveryForAppendOnlyOperations() throws Exception;1533295538;This test ensures the consistency between primary and replica when non-append-only (eg. index request with id or delete) operation_of the same document is processed before the original append-only request on replicas. The append-only document can be exposed and_deleted on the primary before it is added to replica. Replicas should treat a late append-only request as a regular index request.;public void testOutOfOrderDeliveryForAppendOnlyOperations() throws Exception {_        try (ReplicationGroup shards = createGroup(1)) {_            shards.startAll()__            final IndexShard primary = shards.getPrimary()__            final IndexShard replica = shards.getReplicas().get(0)__            _            final BulkShardRequest indexRequest = indexOnPrimary(_                new IndexRequest(index.getName(), "type", null).source("{}", XContentType.JSON), primary)__            final String docId = Iterables.get(getShardDocUIDs(primary), 0)__            final BulkShardRequest deleteRequest = deleteOnPrimary(new DeleteRequest(index.getName(), "type", docId), primary)__            deleteOnReplica(deleteRequest, shards, replica)__            indexOnReplica(indexRequest, shards, replica)__            shards.assertAllEqual(0)__        }_    };this,test,ensures,the,consistency,between,primary,and,replica,when,non,append,only,eg,index,request,with,id,or,delete,operation,of,the,same,document,is,processed,before,the,original,append,only,request,on,replicas,the,append,only,document,can,be,exposed,and,deleted,on,the,primary,before,it,is,added,to,replica,replicas,should,treat,a,late,append,only,request,as,a,regular,index,request;public,void,test,out,of,order,delivery,for,append,only,operations,throws,exception,try,replication,group,shards,create,group,1,shards,start,all,final,index,shard,primary,shards,get,primary,final,index,shard,replica,shards,get,replicas,get,0,final,bulk,shard,request,index,request,index,on,primary,new,index,request,index,get,name,type,null,source,xcontent,type,json,primary,final,string,doc,id,iterables,get,get,shard,doc,uids,primary,0,final,bulk,shard,request,delete,request,delete,on,primary,new,delete,request,index,get,name,type,doc,id,primary,delete,on,replica,delete,request,shards,replica,index,on,replica,index,request,shards,replica,shards,assert,all,equal,0
IndexLevelReplicationTests -> public void testOutOfOrderDeliveryForAppendOnlyOperations() throws Exception;1533641732;This test ensures the consistency between primary and replica when non-append-only (eg. index request with id or delete) operation_of the same document is processed before the original append-only request on replicas. The append-only document can be exposed and_deleted on the primary before it is added to replica. Replicas should treat a late append-only request as a regular index request.;public void testOutOfOrderDeliveryForAppendOnlyOperations() throws Exception {_        try (ReplicationGroup shards = createGroup(1)) {_            shards.startAll()__            final IndexShard primary = shards.getPrimary()__            final IndexShard replica = shards.getReplicas().get(0)__            _            final BulkShardRequest indexRequest = indexOnPrimary(_                new IndexRequest(index.getName(), "type", null).source("{}", XContentType.JSON), primary)__            final String docId = Iterables.get(getShardDocUIDs(primary), 0)__            final BulkShardRequest deleteRequest = deleteOnPrimary(new DeleteRequest(index.getName(), "type", docId), primary)__            deleteOnReplica(deleteRequest, shards, replica)__            indexOnReplica(indexRequest, shards, replica)__            shards.assertAllEqual(0)__        }_    };this,test,ensures,the,consistency,between,primary,and,replica,when,non,append,only,eg,index,request,with,id,or,delete,operation,of,the,same,document,is,processed,before,the,original,append,only,request,on,replicas,the,append,only,document,can,be,exposed,and,deleted,on,the,primary,before,it,is,added,to,replica,replicas,should,treat,a,late,append,only,request,as,a,regular,index,request;public,void,test,out,of,order,delivery,for,append,only,operations,throws,exception,try,replication,group,shards,create,group,1,shards,start,all,final,index,shard,primary,shards,get,primary,final,index,shard,replica,shards,get,replicas,get,0,final,bulk,shard,request,index,request,index,on,primary,new,index,request,index,get,name,type,null,source,xcontent,type,json,primary,final,string,doc,id,iterables,get,get,shard,doc,uids,primary,0,final,bulk,shard,request,delete,request,delete,on,primary,new,delete,request,index,get,name,type,doc,id,primary,delete,on,replica,delete,request,shards,replica,index,on,replica,index,request,shards,replica,shards,assert,all,equal,0
IndexLevelReplicationTests -> public void testOutOfOrderDeliveryForAppendOnlyOperations() throws Exception;1535405719;This test ensures the consistency between primary and replica when non-append-only (eg. index request with id or delete) operation_of the same document is processed before the original append-only request on replicas. The append-only document can be exposed and_deleted on the primary before it is added to replica. Replicas should treat a late append-only request as a regular index request.;public void testOutOfOrderDeliveryForAppendOnlyOperations() throws Exception {_        try (ReplicationGroup shards = createGroup(1)) {_            shards.startAll()__            final IndexShard primary = shards.getPrimary()__            final IndexShard replica = shards.getReplicas().get(0)__            _            final BulkShardRequest indexRequest = indexOnPrimary(_                new IndexRequest(index.getName(), "type", null).source("{}", XContentType.JSON), primary)__            final String docId = Iterables.get(getShardDocUIDs(primary), 0)__            final BulkShardRequest deleteRequest = deleteOnPrimary(new DeleteRequest(index.getName(), "type", docId), primary)__            deleteOnReplica(deleteRequest, shards, replica)__            indexOnReplica(indexRequest, shards, replica)__            shards.assertAllEqual(0)__        }_    };this,test,ensures,the,consistency,between,primary,and,replica,when,non,append,only,eg,index,request,with,id,or,delete,operation,of,the,same,document,is,processed,before,the,original,append,only,request,on,replicas,the,append,only,document,can,be,exposed,and,deleted,on,the,primary,before,it,is,added,to,replica,replicas,should,treat,a,late,append,only,request,as,a,regular,index,request;public,void,test,out,of,order,delivery,for,append,only,operations,throws,exception,try,replication,group,shards,create,group,1,shards,start,all,final,index,shard,primary,shards,get,primary,final,index,shard,replica,shards,get,replicas,get,0,final,bulk,shard,request,index,request,index,on,primary,new,index,request,index,get,name,type,null,source,xcontent,type,json,primary,final,string,doc,id,iterables,get,get,shard,doc,uids,primary,0,final,bulk,shard,request,delete,request,delete,on,primary,new,delete,request,index,get,name,type,doc,id,primary,delete,on,replica,delete,request,shards,replica,index,on,replica,index,request,shards,replica,shards,assert,all,equal,0
IndexLevelReplicationTests -> public void testOutOfOrderDeliveryForAppendOnlyOperations() throws Exception;1535723122;This test ensures the consistency between primary and replica when non-append-only (eg. index request with id or delete) operation_of the same document is processed before the original append-only request on replicas. The append-only document can be exposed and_deleted on the primary before it is added to replica. Replicas should treat a late append-only request as a regular index request.;public void testOutOfOrderDeliveryForAppendOnlyOperations() throws Exception {_        try (ReplicationGroup shards = createGroup(1)) {_            shards.startAll()__            final IndexShard primary = shards.getPrimary()__            final IndexShard replica = shards.getReplicas().get(0)__            _            final BulkShardRequest indexRequest = indexOnPrimary(_                new IndexRequest(index.getName(), "type", null).source("{}", XContentType.JSON), primary)__            final String docId = Iterables.get(getShardDocUIDs(primary), 0)__            final BulkShardRequest deleteRequest = deleteOnPrimary(new DeleteRequest(index.getName(), "type", docId), primary)__            deleteOnReplica(deleteRequest, shards, replica)__            indexOnReplica(indexRequest, shards, replica)__            shards.assertAllEqual(0)__        }_    };this,test,ensures,the,consistency,between,primary,and,replica,when,non,append,only,eg,index,request,with,id,or,delete,operation,of,the,same,document,is,processed,before,the,original,append,only,request,on,replicas,the,append,only,document,can,be,exposed,and,deleted,on,the,primary,before,it,is,added,to,replica,replicas,should,treat,a,late,append,only,request,as,a,regular,index,request;public,void,test,out,of,order,delivery,for,append,only,operations,throws,exception,try,replication,group,shards,create,group,1,shards,start,all,final,index,shard,primary,shards,get,primary,final,index,shard,replica,shards,get,replicas,get,0,final,bulk,shard,request,index,request,index,on,primary,new,index,request,index,get,name,type,null,source,xcontent,type,json,primary,final,string,doc,id,iterables,get,get,shard,doc,uids,primary,0,final,bulk,shard,request,delete,request,delete,on,primary,new,delete,request,index,get,name,type,doc,id,primary,delete,on,replica,delete,request,shards,replica,index,on,replica,index,request,shards,replica,shards,assert,all,equal,0
IndexLevelReplicationTests -> public void testOutOfOrderDeliveryForAppendOnlyOperations() throws Exception;1536314350;This test ensures the consistency between primary and replica when non-append-only (eg. index request with id or delete) operation_of the same document is processed before the original append-only request on replicas. The append-only document can be exposed and_deleted on the primary before it is added to replica. Replicas should treat a late append-only request as a regular index request.;public void testOutOfOrderDeliveryForAppendOnlyOperations() throws Exception {_        try (ReplicationGroup shards = createGroup(1)) {_            shards.startAll()__            final IndexShard primary = shards.getPrimary()__            final IndexShard replica = shards.getReplicas().get(0)__            _            final BulkShardRequest indexRequest = indexOnPrimary(_                new IndexRequest(index.getName(), "type", null).source("{}", XContentType.JSON), primary)__            final String docId = Iterables.get(getShardDocUIDs(primary), 0)__            final BulkShardRequest deleteRequest = deleteOnPrimary(new DeleteRequest(index.getName(), "type", docId), primary)__            deleteOnReplica(deleteRequest, shards, replica)__            indexOnReplica(indexRequest, shards, replica)__            shards.assertAllEqual(0)__        }_    };this,test,ensures,the,consistency,between,primary,and,replica,when,non,append,only,eg,index,request,with,id,or,delete,operation,of,the,same,document,is,processed,before,the,original,append,only,request,on,replicas,the,append,only,document,can,be,exposed,and,deleted,on,the,primary,before,it,is,added,to,replica,replicas,should,treat,a,late,append,only,request,as,a,regular,index,request;public,void,test,out,of,order,delivery,for,append,only,operations,throws,exception,try,replication,group,shards,create,group,1,shards,start,all,final,index,shard,primary,shards,get,primary,final,index,shard,replica,shards,get,replicas,get,0,final,bulk,shard,request,index,request,index,on,primary,new,index,request,index,get,name,type,null,source,xcontent,type,json,primary,final,string,doc,id,iterables,get,get,shard,doc,uids,primary,0,final,bulk,shard,request,delete,request,delete,on,primary,new,delete,request,index,get,name,type,doc,id,primary,delete,on,replica,delete,request,shards,replica,index,on,replica,index,request,shards,replica,shards,assert,all,equal,0
IndexLevelReplicationTests -> public void testOutOfOrderDeliveryForAppendOnlyOperations() throws Exception;1536828374;This test ensures the consistency between primary and replica when non-append-only (eg. index request with id or delete) operation_of the same document is processed before the original append-only request on replicas. The append-only document can be exposed and_deleted on the primary before it is added to replica. Replicas should treat a late append-only request as a regular index request.;public void testOutOfOrderDeliveryForAppendOnlyOperations() throws Exception {_        try (ReplicationGroup shards = createGroup(1)) {_            shards.startAll()__            final IndexShard primary = shards.getPrimary()__            final IndexShard replica = shards.getReplicas().get(0)__            _            final BulkShardRequest indexRequest = indexOnPrimary(_                new IndexRequest(index.getName(), "type", null).source("{}", XContentType.JSON), primary)__            final String docId = Iterables.get(getShardDocUIDs(primary), 0)__            final BulkShardRequest deleteRequest = deleteOnPrimary(new DeleteRequest(index.getName(), "type", docId), primary)__            deleteOnReplica(deleteRequest, shards, replica)__            indexOnReplica(indexRequest, shards, replica)__            shards.assertAllEqual(0)__        }_    };this,test,ensures,the,consistency,between,primary,and,replica,when,non,append,only,eg,index,request,with,id,or,delete,operation,of,the,same,document,is,processed,before,the,original,append,only,request,on,replicas,the,append,only,document,can,be,exposed,and,deleted,on,the,primary,before,it,is,added,to,replica,replicas,should,treat,a,late,append,only,request,as,a,regular,index,request;public,void,test,out,of,order,delivery,for,append,only,operations,throws,exception,try,replication,group,shards,create,group,1,shards,start,all,final,index,shard,primary,shards,get,primary,final,index,shard,replica,shards,get,replicas,get,0,final,bulk,shard,request,index,request,index,on,primary,new,index,request,index,get,name,type,null,source,xcontent,type,json,primary,final,string,doc,id,iterables,get,get,shard,doc,uids,primary,0,final,bulk,shard,request,delete,request,delete,on,primary,new,delete,request,index,get,name,type,doc,id,primary,delete,on,replica,delete,request,shards,replica,index,on,replica,index,request,shards,replica,shards,assert,all,equal,0
IndexLevelReplicationTests -> public void testOutOfOrderDeliveryForAppendOnlyOperations() throws Exception;1537806831;This test ensures the consistency between primary and replica when non-append-only (eg. index request with id or delete) operation_of the same document is processed before the original append-only request on replicas. The append-only document can be exposed and_deleted on the primary before it is added to replica. Replicas should treat a late append-only request as a regular index request.;public void testOutOfOrderDeliveryForAppendOnlyOperations() throws Exception {_        try (ReplicationGroup shards = createGroup(1)) {_            shards.startAll()__            final IndexShard primary = shards.getPrimary()__            final IndexShard replica = shards.getReplicas().get(0)__            _            final BulkShardRequest indexRequest = indexOnPrimary(_                new IndexRequest(index.getName(), "type", null).source("{}", XContentType.JSON), primary)__            final String docId = Iterables.get(getShardDocUIDs(primary), 0)__            final BulkShardRequest deleteRequest = deleteOnPrimary(new DeleteRequest(index.getName(), "type", docId), primary)__            deleteOnReplica(deleteRequest, shards, replica)__            indexOnReplica(indexRequest, shards, replica)__            shards.assertAllEqual(0)__        }_    };this,test,ensures,the,consistency,between,primary,and,replica,when,non,append,only,eg,index,request,with,id,or,delete,operation,of,the,same,document,is,processed,before,the,original,append,only,request,on,replicas,the,append,only,document,can,be,exposed,and,deleted,on,the,primary,before,it,is,added,to,replica,replicas,should,treat,a,late,append,only,request,as,a,regular,index,request;public,void,test,out,of,order,delivery,for,append,only,operations,throws,exception,try,replication,group,shards,create,group,1,shards,start,all,final,index,shard,primary,shards,get,primary,final,index,shard,replica,shards,get,replicas,get,0,final,bulk,shard,request,index,request,index,on,primary,new,index,request,index,get,name,type,null,source,xcontent,type,json,primary,final,string,doc,id,iterables,get,get,shard,doc,uids,primary,0,final,bulk,shard,request,delete,request,delete,on,primary,new,delete,request,index,get,name,type,doc,id,primary,delete,on,replica,delete,request,shards,replica,index,on,replica,index,request,shards,replica,shards,assert,all,equal,0
IndexLevelReplicationTests -> public void testOutOfOrderDeliveryForAppendOnlyOperations() throws Exception;1538067637;This test ensures the consistency between primary and replica when non-append-only (eg. index request with id or delete) operation_of the same document is processed before the original append-only request on replicas. The append-only document can be exposed and_deleted on the primary before it is added to replica. Replicas should treat a late append-only request as a regular index request.;public void testOutOfOrderDeliveryForAppendOnlyOperations() throws Exception {_        try (ReplicationGroup shards = createGroup(1)) {_            shards.startAll()__            final IndexShard primary = shards.getPrimary()__            final IndexShard replica = shards.getReplicas().get(0)__            _            final BulkShardRequest indexRequest = indexOnPrimary(_                new IndexRequest(index.getName(), "type", null).source("{}", XContentType.JSON), primary)__            final String docId = Iterables.get(getShardDocUIDs(primary), 0)__            final BulkShardRequest deleteRequest = deleteOnPrimary(new DeleteRequest(index.getName(), "type", docId), primary)__            deleteOnReplica(deleteRequest, shards, replica)__            indexOnReplica(indexRequest, shards, replica)__            shards.assertAllEqual(0)__        }_    };this,test,ensures,the,consistency,between,primary,and,replica,when,non,append,only,eg,index,request,with,id,or,delete,operation,of,the,same,document,is,processed,before,the,original,append,only,request,on,replicas,the,append,only,document,can,be,exposed,and,deleted,on,the,primary,before,it,is,added,to,replica,replicas,should,treat,a,late,append,only,request,as,a,regular,index,request;public,void,test,out,of,order,delivery,for,append,only,operations,throws,exception,try,replication,group,shards,create,group,1,shards,start,all,final,index,shard,primary,shards,get,primary,final,index,shard,replica,shards,get,replicas,get,0,final,bulk,shard,request,index,request,index,on,primary,new,index,request,index,get,name,type,null,source,xcontent,type,json,primary,final,string,doc,id,iterables,get,get,shard,doc,uids,primary,0,final,bulk,shard,request,delete,request,delete,on,primary,new,delete,request,index,get,name,type,doc,id,primary,delete,on,replica,delete,request,shards,replica,index,on,replica,index,request,shards,replica,shards,assert,all,equal,0
IndexLevelReplicationTests -> public void testOutOfOrderDeliveryForAppendOnlyOperations() throws Exception;1548124510;This test ensures the consistency between primary and replica when non-append-only (eg. index request with id or delete) operation_of the same document is processed before the original append-only request on replicas. The append-only document can be exposed and_deleted on the primary before it is added to replica. Replicas should treat a late append-only request as a regular index request.;public void testOutOfOrderDeliveryForAppendOnlyOperations() throws Exception {_        try (ReplicationGroup shards = createGroup(1)) {_            shards.startAll()__            final IndexShard primary = shards.getPrimary()__            final IndexShard replica = shards.getReplicas().get(0)__            _            final BulkShardRequest indexRequest = indexOnPrimary(_                new IndexRequest(index.getName(), "type", null).source("{}", XContentType.JSON), primary)__            final String docId = Iterables.get(getShardDocUIDs(primary), 0)__            final BulkShardRequest deleteRequest = deleteOnPrimary(new DeleteRequest(index.getName(), "type", docId), primary)__            deleteOnReplica(deleteRequest, shards, replica)__            indexOnReplica(indexRequest, shards, replica)__            shards.assertAllEqual(0)__        }_    };this,test,ensures,the,consistency,between,primary,and,replica,when,non,append,only,eg,index,request,with,id,or,delete,operation,of,the,same,document,is,processed,before,the,original,append,only,request,on,replicas,the,append,only,document,can,be,exposed,and,deleted,on,the,primary,before,it,is,added,to,replica,replicas,should,treat,a,late,append,only,request,as,a,regular,index,request;public,void,test,out,of,order,delivery,for,append,only,operations,throws,exception,try,replication,group,shards,create,group,1,shards,start,all,final,index,shard,primary,shards,get,primary,final,index,shard,replica,shards,get,replicas,get,0,final,bulk,shard,request,index,request,index,on,primary,new,index,request,index,get,name,type,null,source,xcontent,type,json,primary,final,string,doc,id,iterables,get,get,shard,doc,uids,primary,0,final,bulk,shard,request,delete,request,delete,on,primary,new,delete,request,index,get,name,type,doc,id,primary,delete,on,replica,delete,request,shards,replica,index,on,replica,index,request,shards,replica,shards,assert,all,equal,0
IndexLevelReplicationTests -> public void testDocumentFailureReplication() throws Exception;1524684173;test document failures (failures after seq_no generation) are added as noop operation to the translog_for primary and replica shards;public void testDocumentFailureReplication() throws Exception {_        final String failureMessage = "simulated document failure"__        final ThrowingDocumentFailureEngineFactory throwingDocumentFailureEngineFactory =_                new ThrowingDocumentFailureEngineFactory(failureMessage)__        try (ReplicationGroup shards = new ReplicationGroup(buildIndexMetaData(0)) {_            @Override_            protected EngineFactory getEngineFactory(ShardRouting routing) {_                return throwingDocumentFailureEngineFactory__            }}) {__            _            shards.startPrimary()__            BulkItemResponse response = shards.index(_                    new IndexRequest(index.getName(), "testDocumentFailureReplication", "1")_                            .source("{}", XContentType.JSON)_            )__            assertTrue(response.isFailed())__            assertNoOpTranslogOperationForDocumentFailure(shards, 1, shards.getPrimary().getPrimaryTerm(), failureMessage)__            shards.assertAllEqual(0)___            _            int nReplica = randomIntBetween(1, 3)__            for (int i = 0_ i < nReplica_ i++) {_                shards.addReplica()__            }_            shards.startReplicas(nReplica)__            response = shards.index(_                    new IndexRequest(index.getName(), "testDocumentFailureReplication", "1")_                            .source("{}", XContentType.JSON)_            )__            assertTrue(response.isFailed())__            assertNoOpTranslogOperationForDocumentFailure(shards, 2, shards.getPrimary().getPrimaryTerm(), failureMessage)__            shards.assertAllEqual(0)__        }_    };test,document,failures,failures,after,generation,are,added,as,noop,operation,to,the,translog,for,primary,and,replica,shards;public,void,test,document,failure,replication,throws,exception,final,string,failure,message,simulated,document,failure,final,throwing,document,failure,engine,factory,throwing,document,failure,engine,factory,new,throwing,document,failure,engine,factory,failure,message,try,replication,group,shards,new,replication,group,build,index,meta,data,0,override,protected,engine,factory,get,engine,factory,shard,routing,routing,return,throwing,document,failure,engine,factory,shards,start,primary,bulk,item,response,response,shards,index,new,index,request,index,get,name,test,document,failure,replication,1,source,xcontent,type,json,assert,true,response,is,failed,assert,no,op,translog,operation,for,document,failure,shards,1,shards,get,primary,get,primary,term,failure,message,shards,assert,all,equal,0,int,n,replica,random,int,between,1,3,for,int,i,0,i,n,replica,i,shards,add,replica,shards,start,replicas,n,replica,response,shards,index,new,index,request,index,get,name,test,document,failure,replication,1,source,xcontent,type,json,assert,true,response,is,failed,assert,no,op,translog,operation,for,document,failure,shards,2,shards,get,primary,get,primary,term,failure,message,shards,assert,all,equal,0
IndexLevelReplicationTests -> public void testDocumentFailureReplication() throws Exception;1525162917;test document failures (failures after seq_no generation) are added as noop operation to the translog_for primary and replica shards;public void testDocumentFailureReplication() throws Exception {_        final String failureMessage = "simulated document failure"__        final ThrowingDocumentFailureEngineFactory throwingDocumentFailureEngineFactory =_                new ThrowingDocumentFailureEngineFactory(failureMessage)__        try (ReplicationGroup shards = new ReplicationGroup(buildIndexMetaData(0)) {_            @Override_            protected EngineFactory getEngineFactory(ShardRouting routing) {_                return throwingDocumentFailureEngineFactory__            }}) {__            _            shards.startPrimary()__            BulkItemResponse response = shards.index(_                    new IndexRequest(index.getName(), "type", "1")_                            .source("{}", XContentType.JSON)_            )__            assertTrue(response.isFailed())__            assertNoOpTranslogOperationForDocumentFailure(shards, 1, shards.getPrimary().getPrimaryTerm(), failureMessage)__            shards.assertAllEqual(0)___            _            int nReplica = randomIntBetween(1, 3)__            for (int i = 0_ i < nReplica_ i++) {_                shards.addReplica()__            }_            shards.startReplicas(nReplica)__            response = shards.index(_                    new IndexRequest(index.getName(), "type", "1")_                            .source("{}", XContentType.JSON)_            )__            assertTrue(response.isFailed())__            assertNoOpTranslogOperationForDocumentFailure(shards, 2, shards.getPrimary().getPrimaryTerm(), failureMessage)__            shards.assertAllEqual(0)__        }_    };test,document,failures,failures,after,generation,are,added,as,noop,operation,to,the,translog,for,primary,and,replica,shards;public,void,test,document,failure,replication,throws,exception,final,string,failure,message,simulated,document,failure,final,throwing,document,failure,engine,factory,throwing,document,failure,engine,factory,new,throwing,document,failure,engine,factory,failure,message,try,replication,group,shards,new,replication,group,build,index,meta,data,0,override,protected,engine,factory,get,engine,factory,shard,routing,routing,return,throwing,document,failure,engine,factory,shards,start,primary,bulk,item,response,response,shards,index,new,index,request,index,get,name,type,1,source,xcontent,type,json,assert,true,response,is,failed,assert,no,op,translog,operation,for,document,failure,shards,1,shards,get,primary,get,primary,term,failure,message,shards,assert,all,equal,0,int,n,replica,random,int,between,1,3,for,int,i,0,i,n,replica,i,shards,add,replica,shards,start,replicas,n,replica,response,shards,index,new,index,request,index,get,name,type,1,source,xcontent,type,json,assert,true,response,is,failed,assert,no,op,translog,operation,for,document,failure,shards,2,shards,get,primary,get,primary,term,failure,message,shards,assert,all,equal,0
IndexLevelReplicationTests -> public void testDocumentFailureReplication() throws Exception;1528706846;test document failures (failures after seq_no generation) are added as noop operation to the translog_for primary and replica shards;public void testDocumentFailureReplication() throws Exception {_        final String failureMessage = "simulated document failure"__        final ThrowingDocumentFailureEngineFactory throwingDocumentFailureEngineFactory =_                new ThrowingDocumentFailureEngineFactory(failureMessage)__        try (ReplicationGroup shards = new ReplicationGroup(buildIndexMetaData(0)) {_            @Override_            protected EngineFactory getEngineFactory(ShardRouting routing) {_                return throwingDocumentFailureEngineFactory__            }}) {__            _            shards.startPrimary()__            BulkItemResponse response = shards.index(_                    new IndexRequest(index.getName(), "type", "1")_                            .source("{}", XContentType.JSON)_            )__            assertTrue(response.isFailed())__            assertNoOpTranslogOperationForDocumentFailure(shards, 1, shards.getPrimary().getPrimaryTerm(), failureMessage)__            shards.assertAllEqual(0)___            _            int nReplica = randomIntBetween(1, 3)__            for (int i = 0_ i < nReplica_ i++) {_                shards.addReplica()__            }_            shards.startReplicas(nReplica)__            response = shards.index(_                    new IndexRequest(index.getName(), "type", "1")_                            .source("{}", XContentType.JSON)_            )__            assertTrue(response.isFailed())__            assertNoOpTranslogOperationForDocumentFailure(shards, 2, shards.getPrimary().getPrimaryTerm(), failureMessage)__            shards.assertAllEqual(0)__        }_    };test,document,failures,failures,after,generation,are,added,as,noop,operation,to,the,translog,for,primary,and,replica,shards;public,void,test,document,failure,replication,throws,exception,final,string,failure,message,simulated,document,failure,final,throwing,document,failure,engine,factory,throwing,document,failure,engine,factory,new,throwing,document,failure,engine,factory,failure,message,try,replication,group,shards,new,replication,group,build,index,meta,data,0,override,protected,engine,factory,get,engine,factory,shard,routing,routing,return,throwing,document,failure,engine,factory,shards,start,primary,bulk,item,response,response,shards,index,new,index,request,index,get,name,type,1,source,xcontent,type,json,assert,true,response,is,failed,assert,no,op,translog,operation,for,document,failure,shards,1,shards,get,primary,get,primary,term,failure,message,shards,assert,all,equal,0,int,n,replica,random,int,between,1,3,for,int,i,0,i,n,replica,i,shards,add,replica,shards,start,replicas,n,replica,response,shards,index,new,index,request,index,get,name,type,1,source,xcontent,type,json,assert,true,response,is,failed,assert,no,op,translog,operation,for,document,failure,shards,2,shards,get,primary,get,primary,term,failure,message,shards,assert,all,equal,0
IndexLevelReplicationTests -> public void testDocumentFailureReplication() throws Exception;1531910483;test document failures (failures after seq_no generation) are added as noop operation to the translog_for primary and replica shards;public void testDocumentFailureReplication() throws Exception {_        final String failureMessage = "simulated document failure"__        final ThrowingDocumentFailureEngineFactory throwingDocumentFailureEngineFactory =_                new ThrowingDocumentFailureEngineFactory(failureMessage)__        try (ReplicationGroup shards = new ReplicationGroup(buildIndexMetaData(0)) {_            @Override_            protected EngineFactory getEngineFactory(ShardRouting routing) {_                return throwingDocumentFailureEngineFactory__            }}) {__            _            shards.startPrimary()__            BulkItemResponse response = shards.index(_                    new IndexRequest(index.getName(), "type", "1")_                            .source("{}", XContentType.JSON)_            )__            assertTrue(response.isFailed())__            assertNoOpTranslogOperationForDocumentFailure(shards, 1, shards.getPrimary().getPrimaryTerm(), failureMessage)__            shards.assertAllEqual(0)___            _            int nReplica = randomIntBetween(1, 3)__            for (int i = 0_ i < nReplica_ i++) {_                shards.addReplica()__            }_            shards.startReplicas(nReplica)__            response = shards.index(_                    new IndexRequest(index.getName(), "type", "1")_                            .source("{}", XContentType.JSON)_            )__            assertTrue(response.isFailed())__            assertNoOpTranslogOperationForDocumentFailure(shards, 2, shards.getPrimary().getPrimaryTerm(), failureMessage)__            shards.assertAllEqual(0)__        }_    };test,document,failures,failures,after,generation,are,added,as,noop,operation,to,the,translog,for,primary,and,replica,shards;public,void,test,document,failure,replication,throws,exception,final,string,failure,message,simulated,document,failure,final,throwing,document,failure,engine,factory,throwing,document,failure,engine,factory,new,throwing,document,failure,engine,factory,failure,message,try,replication,group,shards,new,replication,group,build,index,meta,data,0,override,protected,engine,factory,get,engine,factory,shard,routing,routing,return,throwing,document,failure,engine,factory,shards,start,primary,bulk,item,response,response,shards,index,new,index,request,index,get,name,type,1,source,xcontent,type,json,assert,true,response,is,failed,assert,no,op,translog,operation,for,document,failure,shards,1,shards,get,primary,get,primary,term,failure,message,shards,assert,all,equal,0,int,n,replica,random,int,between,1,3,for,int,i,0,i,n,replica,i,shards,add,replica,shards,start,replicas,n,replica,response,shards,index,new,index,request,index,get,name,type,1,source,xcontent,type,json,assert,true,response,is,failed,assert,no,op,translog,operation,for,document,failure,shards,2,shards,get,primary,get,primary,term,failure,message,shards,assert,all,equal,0
IndexLevelReplicationTests -> public void testDocumentFailureReplication() throws Exception;1533295538;test document failures (failures after seq_no generation) are added as noop operation to the translog_for primary and replica shards;public void testDocumentFailureReplication() throws Exception {_        final String failureMessage = "simulated document failure"__        final ThrowingDocumentFailureEngineFactory throwingDocumentFailureEngineFactory =_                new ThrowingDocumentFailureEngineFactory(failureMessage)__        try (ReplicationGroup shards = new ReplicationGroup(buildIndexMetaData(0)) {_            @Override_            protected EngineFactory getEngineFactory(ShardRouting routing) {_                return throwingDocumentFailureEngineFactory__            }}) {__            _            shards.startPrimary()__            BulkItemResponse response = shards.index(_                    new IndexRequest(index.getName(), "type", "1")_                            .source("{}", XContentType.JSON)_            )__            assertTrue(response.isFailed())__            assertNoOpTranslogOperationForDocumentFailure(shards, 1, shards.getPrimary().getPendingPrimaryTerm(), failureMessage)__            shards.assertAllEqual(0)___            _            int nReplica = randomIntBetween(1, 3)__            for (int i = 0_ i < nReplica_ i++) {_                shards.addReplica()__            }_            shards.startReplicas(nReplica)__            response = shards.index(_                    new IndexRequest(index.getName(), "type", "1")_                            .source("{}", XContentType.JSON)_            )__            assertTrue(response.isFailed())__            assertNoOpTranslogOperationForDocumentFailure(shards, 2, shards.getPrimary().getPendingPrimaryTerm(), failureMessage)__            shards.assertAllEqual(0)__        }_    };test,document,failures,failures,after,generation,are,added,as,noop,operation,to,the,translog,for,primary,and,replica,shards;public,void,test,document,failure,replication,throws,exception,final,string,failure,message,simulated,document,failure,final,throwing,document,failure,engine,factory,throwing,document,failure,engine,factory,new,throwing,document,failure,engine,factory,failure,message,try,replication,group,shards,new,replication,group,build,index,meta,data,0,override,protected,engine,factory,get,engine,factory,shard,routing,routing,return,throwing,document,failure,engine,factory,shards,start,primary,bulk,item,response,response,shards,index,new,index,request,index,get,name,type,1,source,xcontent,type,json,assert,true,response,is,failed,assert,no,op,translog,operation,for,document,failure,shards,1,shards,get,primary,get,pending,primary,term,failure,message,shards,assert,all,equal,0,int,n,replica,random,int,between,1,3,for,int,i,0,i,n,replica,i,shards,add,replica,shards,start,replicas,n,replica,response,shards,index,new,index,request,index,get,name,type,1,source,xcontent,type,json,assert,true,response,is,failed,assert,no,op,translog,operation,for,document,failure,shards,2,shards,get,primary,get,pending,primary,term,failure,message,shards,assert,all,equal,0
IndexLevelReplicationTests -> public void testDocumentFailureReplication() throws Exception;1533641732;test document failures (failures after seq_no generation) are added as noop operation to the translog_for primary and replica shards;public void testDocumentFailureReplication() throws Exception {_        final String failureMessage = "simulated document failure"__        final ThrowingDocumentFailureEngineFactory throwingDocumentFailureEngineFactory =_                new ThrowingDocumentFailureEngineFactory(failureMessage)__        try (ReplicationGroup shards = new ReplicationGroup(buildIndexMetaData(0)) {_            @Override_            protected EngineFactory getEngineFactory(ShardRouting routing) {_                return throwingDocumentFailureEngineFactory__            }}) {__            _            shards.startPrimary()__            BulkItemResponse response = shards.index(_                    new IndexRequest(index.getName(), "type", "1")_                            .source("{}", XContentType.JSON)_            )__            assertTrue(response.isFailed())__            assertNoOpTranslogOperationForDocumentFailure(shards, 1, shards.getPrimary().getPendingPrimaryTerm(), failureMessage)__            shards.assertAllEqual(0)___            _            int nReplica = randomIntBetween(1, 3)__            for (int i = 0_ i < nReplica_ i++) {_                shards.addReplica()__            }_            shards.startReplicas(nReplica)__            response = shards.index(_                    new IndexRequest(index.getName(), "type", "1")_                            .source("{}", XContentType.JSON)_            )__            assertTrue(response.isFailed())__            assertNoOpTranslogOperationForDocumentFailure(shards, 2, shards.getPrimary().getPendingPrimaryTerm(), failureMessage)__            shards.assertAllEqual(0)__        }_    };test,document,failures,failures,after,generation,are,added,as,noop,operation,to,the,translog,for,primary,and,replica,shards;public,void,test,document,failure,replication,throws,exception,final,string,failure,message,simulated,document,failure,final,throwing,document,failure,engine,factory,throwing,document,failure,engine,factory,new,throwing,document,failure,engine,factory,failure,message,try,replication,group,shards,new,replication,group,build,index,meta,data,0,override,protected,engine,factory,get,engine,factory,shard,routing,routing,return,throwing,document,failure,engine,factory,shards,start,primary,bulk,item,response,response,shards,index,new,index,request,index,get,name,type,1,source,xcontent,type,json,assert,true,response,is,failed,assert,no,op,translog,operation,for,document,failure,shards,1,shards,get,primary,get,pending,primary,term,failure,message,shards,assert,all,equal,0,int,n,replica,random,int,between,1,3,for,int,i,0,i,n,replica,i,shards,add,replica,shards,start,replicas,n,replica,response,shards,index,new,index,request,index,get,name,type,1,source,xcontent,type,json,assert,true,response,is,failed,assert,no,op,translog,operation,for,document,failure,shards,2,shards,get,primary,get,pending,primary,term,failure,message,shards,assert,all,equal,0
IndexLevelReplicationTests -> public void testDocumentFailureReplication() throws Exception;1535405719;test document failures (failures after seq_no generation) are added as noop operation to the translog_for primary and replica shards;public void testDocumentFailureReplication() throws Exception {_        final IOException indexException = new IOException("simulated indexing failure")__        final IOException deleteException = new IOException("simulated deleting failure")__        final EngineFactory engineFactory = config -> InternalEngineTests.createInternalEngine((dir, iwc) ->_            new IndexWriter(dir, iwc) {_                final AtomicBoolean throwAfterIndexedOneDoc = new AtomicBoolean()_ _                @Override_                public long addDocument(Iterable<? extends IndexableField> doc) throws IOException {_                    if (throwAfterIndexedOneDoc.getAndSet(true)) {_                        throw indexException__                    } else {_                        return super.addDocument(doc)__                    }_                }_                @Override_                public long deleteDocuments(Term... terms) throws IOException {_                    throw deleteException__                }_            }, null, null, config)__        try (ReplicationGroup shards = new ReplicationGroup(buildIndexMetaData(0)) {_            @Override_            protected EngineFactory getEngineFactory(ShardRouting routing) { return engineFactory_ }}) {__            _            shards.startPrimary()__            long primaryTerm = shards.getPrimary().getPendingPrimaryTerm()__            List<Translog.Operation> expectedTranslogOps = new ArrayList<>()__            BulkItemResponse indexResp = shards.index(new IndexRequest(index.getName(), "type", "1").source("{}", XContentType.JSON))__            assertThat(indexResp.isFailed(), equalTo(false))__            expectedTranslogOps.add(new Translog.Index("type", "1", 0, primaryTerm, 1, "{}".getBytes(StandardCharsets.UTF_8), null, -1))__            try (Translog.Snapshot snapshot = getTranslog(shards.getPrimary()).newSnapshot()) {_                assertThat(snapshot, SnapshotMatchers.containsOperationsInAnyOrder(expectedTranslogOps))__            }__            indexResp = shards.index(new IndexRequest(index.getName(), "type", "any").source("{}", XContentType.JSON))__            assertThat(indexResp.getFailure().getCause(), equalTo(indexException))__            expectedTranslogOps.add(new Translog.NoOp(1, primaryTerm, indexException.toString()))___            BulkItemResponse deleteResp = shards.delete(new DeleteRequest(index.getName(), "type", "1"))__            assertThat(deleteResp.getFailure().getCause(), equalTo(deleteException))__            expectedTranslogOps.add(new Translog.NoOp(2, primaryTerm, deleteException.toString()))__            shards.assertAllEqual(1)___            int nReplica = randomIntBetween(1, 3)__            for (int i = 0_ i < nReplica_ i++) {_                shards.addReplica()__            }_            shards.startReplicas(nReplica)__            for (IndexShard shard : shards) {_                try (Translog.Snapshot snapshot = getTranslog(shard).newSnapshot()) {_                    assertThat(snapshot, SnapshotMatchers.containsOperationsInAnyOrder(expectedTranslogOps))__                }_            }_            _            indexResp = shards.index(new IndexRequest(index.getName(), "type", "any").source("{}", XContentType.JSON))__            assertThat(indexResp.getFailure().getCause(), equalTo(indexException))__            expectedTranslogOps.add(new Translog.NoOp(3, primaryTerm, indexException.toString()))___            deleteResp = shards.delete(new DeleteRequest(index.getName(), "type", "1"))__            assertThat(deleteResp.getFailure().getCause(), equalTo(deleteException))__            expectedTranslogOps.add(new Translog.NoOp(4, primaryTerm, deleteException.toString()))___            for (IndexShard shard : shards) {_                try (Translog.Snapshot snapshot = getTranslog(shard).newSnapshot()) {_                    assertThat(snapshot, SnapshotMatchers.containsOperationsInAnyOrder(expectedTranslogOps))__                }_            }_            shards.assertAllEqual(1)__        }_    };test,document,failures,failures,after,generation,are,added,as,noop,operation,to,the,translog,for,primary,and,replica,shards;public,void,test,document,failure,replication,throws,exception,final,ioexception,index,exception,new,ioexception,simulated,indexing,failure,final,ioexception,delete,exception,new,ioexception,simulated,deleting,failure,final,engine,factory,engine,factory,config,internal,engine,tests,create,internal,engine,dir,iwc,new,index,writer,dir,iwc,final,atomic,boolean,throw,after,indexed,one,doc,new,atomic,boolean,override,public,long,add,document,iterable,extends,indexable,field,doc,throws,ioexception,if,throw,after,indexed,one,doc,get,and,set,true,throw,index,exception,else,return,super,add,document,doc,override,public,long,delete,documents,term,terms,throws,ioexception,throw,delete,exception,null,null,config,try,replication,group,shards,new,replication,group,build,index,meta,data,0,override,protected,engine,factory,get,engine,factory,shard,routing,routing,return,engine,factory,shards,start,primary,long,primary,term,shards,get,primary,get,pending,primary,term,list,translog,operation,expected,translog,ops,new,array,list,bulk,item,response,index,resp,shards,index,new,index,request,index,get,name,type,1,source,xcontent,type,json,assert,that,index,resp,is,failed,equal,to,false,expected,translog,ops,add,new,translog,index,type,1,0,primary,term,1,get,bytes,standard,charsets,null,1,try,translog,snapshot,snapshot,get,translog,shards,get,primary,new,snapshot,assert,that,snapshot,snapshot,matchers,contains,operations,in,any,order,expected,translog,ops,index,resp,shards,index,new,index,request,index,get,name,type,any,source,xcontent,type,json,assert,that,index,resp,get,failure,get,cause,equal,to,index,exception,expected,translog,ops,add,new,translog,no,op,1,primary,term,index,exception,to,string,bulk,item,response,delete,resp,shards,delete,new,delete,request,index,get,name,type,1,assert,that,delete,resp,get,failure,get,cause,equal,to,delete,exception,expected,translog,ops,add,new,translog,no,op,2,primary,term,delete,exception,to,string,shards,assert,all,equal,1,int,n,replica,random,int,between,1,3,for,int,i,0,i,n,replica,i,shards,add,replica,shards,start,replicas,n,replica,for,index,shard,shard,shards,try,translog,snapshot,snapshot,get,translog,shard,new,snapshot,assert,that,snapshot,snapshot,matchers,contains,operations,in,any,order,expected,translog,ops,index,resp,shards,index,new,index,request,index,get,name,type,any,source,xcontent,type,json,assert,that,index,resp,get,failure,get,cause,equal,to,index,exception,expected,translog,ops,add,new,translog,no,op,3,primary,term,index,exception,to,string,delete,resp,shards,delete,new,delete,request,index,get,name,type,1,assert,that,delete,resp,get,failure,get,cause,equal,to,delete,exception,expected,translog,ops,add,new,translog,no,op,4,primary,term,delete,exception,to,string,for,index,shard,shard,shards,try,translog,snapshot,snapshot,get,translog,shard,new,snapshot,assert,that,snapshot,snapshot,matchers,contains,operations,in,any,order,expected,translog,ops,shards,assert,all,equal,1
IndexLevelReplicationTests -> public void testDocumentFailureReplication() throws Exception;1535723122;test document failures (failures after seq_no generation) are added as noop operation to the translog_for primary and replica shards;public void testDocumentFailureReplication() throws Exception {_        final IOException indexException = new IOException("simulated indexing failure")__        final IOException deleteException = new IOException("simulated deleting failure")__        final EngineFactory engineFactory = config -> InternalEngineTests.createInternalEngine((dir, iwc) ->_            new IndexWriter(dir, iwc) {_                final AtomicBoolean throwAfterIndexedOneDoc = new AtomicBoolean()_ _                @Override_                public long addDocument(Iterable<? extends IndexableField> doc) throws IOException {_                    boolean isTombstone = false__                    for (IndexableField field : doc) {_                        if (SeqNoFieldMapper.TOMBSTONE_NAME.equals(field.name())) {_                            isTombstone = true__                        }_                    }_                    if (isTombstone == false && throwAfterIndexedOneDoc.getAndSet(true)) {_                        throw indexException__                    } else {_                        return super.addDocument(doc)__                    }_                }_                @Override_                public long deleteDocuments(Term... terms) throws IOException {_                    throw deleteException__                }_                @Override_                public long softUpdateDocument(Term term, Iterable<? extends IndexableField> doc, Field...fields) throws IOException {_                    throw deleteException_ _                }_            }, null, null, config)__        try (ReplicationGroup shards = new ReplicationGroup(buildIndexMetaData(0)) {_            @Override_            protected EngineFactory getEngineFactory(ShardRouting routing) { return engineFactory_ }}) {__            _            shards.startPrimary()__            long primaryTerm = shards.getPrimary().getPendingPrimaryTerm()__            List<Translog.Operation> expectedTranslogOps = new ArrayList<>()__            BulkItemResponse indexResp = shards.index(new IndexRequest(index.getName(), "type", "1").source("{}", XContentType.JSON))__            assertThat(indexResp.isFailed(), equalTo(false))__            expectedTranslogOps.add(new Translog.Index("type", "1", 0, primaryTerm, 1, "{}".getBytes(StandardCharsets.UTF_8), null, -1))__            try (Translog.Snapshot snapshot = getTranslog(shards.getPrimary()).newSnapshot()) {_                assertThat(snapshot, SnapshotMatchers.containsOperationsInAnyOrder(expectedTranslogOps))__            }__            indexResp = shards.index(new IndexRequest(index.getName(), "type", "any").source("{}", XContentType.JSON))__            assertThat(indexResp.getFailure().getCause(), equalTo(indexException))__            expectedTranslogOps.add(new Translog.NoOp(1, primaryTerm, indexException.toString()))___            BulkItemResponse deleteResp = shards.delete(new DeleteRequest(index.getName(), "type", "1"))__            assertThat(deleteResp.getFailure().getCause(), equalTo(deleteException))__            expectedTranslogOps.add(new Translog.NoOp(2, primaryTerm, deleteException.toString()))__            shards.assertAllEqual(1)___            int nReplica = randomIntBetween(1, 3)__            for (int i = 0_ i < nReplica_ i++) {_                shards.addReplica()__            }_            shards.startReplicas(nReplica)__            for (IndexShard shard : shards) {_                try (Translog.Snapshot snapshot = getTranslog(shard).newSnapshot()) {_                    assertThat(snapshot, SnapshotMatchers.containsOperationsInAnyOrder(expectedTranslogOps))__                }_                try (Translog.Snapshot snapshot = shard.getHistoryOperations("test", 0)) {_                    assertThat(snapshot, SnapshotMatchers.containsOperationsInAnyOrder(expectedTranslogOps))__                }_            }_            _            indexResp = shards.index(new IndexRequest(index.getName(), "type", "any").source("{}", XContentType.JSON))__            assertThat(indexResp.getFailure().getCause(), equalTo(indexException))__            expectedTranslogOps.add(new Translog.NoOp(3, primaryTerm, indexException.toString()))___            deleteResp = shards.delete(new DeleteRequest(index.getName(), "type", "1"))__            assertThat(deleteResp.getFailure().getCause(), equalTo(deleteException))__            expectedTranslogOps.add(new Translog.NoOp(4, primaryTerm, deleteException.toString()))___            for (IndexShard shard : shards) {_                try (Translog.Snapshot snapshot = getTranslog(shard).newSnapshot()) {_                    assertThat(snapshot, SnapshotMatchers.containsOperationsInAnyOrder(expectedTranslogOps))__                }_                try (Translog.Snapshot snapshot = shard.getHistoryOperations("test", 0)) {_                    assertThat(snapshot, SnapshotMatchers.containsOperationsInAnyOrder(expectedTranslogOps))__                }_            }_            shards.assertAllEqual(1)__        }_    };test,document,failures,failures,after,generation,are,added,as,noop,operation,to,the,translog,for,primary,and,replica,shards;public,void,test,document,failure,replication,throws,exception,final,ioexception,index,exception,new,ioexception,simulated,indexing,failure,final,ioexception,delete,exception,new,ioexception,simulated,deleting,failure,final,engine,factory,engine,factory,config,internal,engine,tests,create,internal,engine,dir,iwc,new,index,writer,dir,iwc,final,atomic,boolean,throw,after,indexed,one,doc,new,atomic,boolean,override,public,long,add,document,iterable,extends,indexable,field,doc,throws,ioexception,boolean,is,tombstone,false,for,indexable,field,field,doc,if,seq,no,field,mapper,equals,field,name,is,tombstone,true,if,is,tombstone,false,throw,after,indexed,one,doc,get,and,set,true,throw,index,exception,else,return,super,add,document,doc,override,public,long,delete,documents,term,terms,throws,ioexception,throw,delete,exception,override,public,long,soft,update,document,term,term,iterable,extends,indexable,field,doc,field,fields,throws,ioexception,throw,delete,exception,null,null,config,try,replication,group,shards,new,replication,group,build,index,meta,data,0,override,protected,engine,factory,get,engine,factory,shard,routing,routing,return,engine,factory,shards,start,primary,long,primary,term,shards,get,primary,get,pending,primary,term,list,translog,operation,expected,translog,ops,new,array,list,bulk,item,response,index,resp,shards,index,new,index,request,index,get,name,type,1,source,xcontent,type,json,assert,that,index,resp,is,failed,equal,to,false,expected,translog,ops,add,new,translog,index,type,1,0,primary,term,1,get,bytes,standard,charsets,null,1,try,translog,snapshot,snapshot,get,translog,shards,get,primary,new,snapshot,assert,that,snapshot,snapshot,matchers,contains,operations,in,any,order,expected,translog,ops,index,resp,shards,index,new,index,request,index,get,name,type,any,source,xcontent,type,json,assert,that,index,resp,get,failure,get,cause,equal,to,index,exception,expected,translog,ops,add,new,translog,no,op,1,primary,term,index,exception,to,string,bulk,item,response,delete,resp,shards,delete,new,delete,request,index,get,name,type,1,assert,that,delete,resp,get,failure,get,cause,equal,to,delete,exception,expected,translog,ops,add,new,translog,no,op,2,primary,term,delete,exception,to,string,shards,assert,all,equal,1,int,n,replica,random,int,between,1,3,for,int,i,0,i,n,replica,i,shards,add,replica,shards,start,replicas,n,replica,for,index,shard,shard,shards,try,translog,snapshot,snapshot,get,translog,shard,new,snapshot,assert,that,snapshot,snapshot,matchers,contains,operations,in,any,order,expected,translog,ops,try,translog,snapshot,snapshot,shard,get,history,operations,test,0,assert,that,snapshot,snapshot,matchers,contains,operations,in,any,order,expected,translog,ops,index,resp,shards,index,new,index,request,index,get,name,type,any,source,xcontent,type,json,assert,that,index,resp,get,failure,get,cause,equal,to,index,exception,expected,translog,ops,add,new,translog,no,op,3,primary,term,index,exception,to,string,delete,resp,shards,delete,new,delete,request,index,get,name,type,1,assert,that,delete,resp,get,failure,get,cause,equal,to,delete,exception,expected,translog,ops,add,new,translog,no,op,4,primary,term,delete,exception,to,string,for,index,shard,shard,shards,try,translog,snapshot,snapshot,get,translog,shard,new,snapshot,assert,that,snapshot,snapshot,matchers,contains,operations,in,any,order,expected,translog,ops,try,translog,snapshot,snapshot,shard,get,history,operations,test,0,assert,that,snapshot,snapshot,matchers,contains,operations,in,any,order,expected,translog,ops,shards,assert,all,equal,1
IndexLevelReplicationTests -> public void testDocumentFailureReplication() throws Exception;1536314350;test document failures (failures after seq_no generation) are added as noop operation to the translog_for primary and replica shards;public void testDocumentFailureReplication() throws Exception {_        final IOException indexException = new IOException("simulated indexing failure")__        final IOException deleteException = new IOException("simulated deleting failure")__        final EngineFactory engineFactory = config -> InternalEngineTests.createInternalEngine((dir, iwc) ->_            new IndexWriter(dir, iwc) {_                final AtomicBoolean throwAfterIndexedOneDoc = new AtomicBoolean()_ _                @Override_                public long addDocument(Iterable<? extends IndexableField> doc) throws IOException {_                    boolean isTombstone = false__                    for (IndexableField field : doc) {_                        if (SeqNoFieldMapper.TOMBSTONE_NAME.equals(field.name())) {_                            isTombstone = true__                        }_                    }_                    if (isTombstone == false && throwAfterIndexedOneDoc.getAndSet(true)) {_                        throw indexException__                    } else {_                        return super.addDocument(doc)__                    }_                }_                @Override_                public long deleteDocuments(Term... terms) throws IOException {_                    throw deleteException__                }_                @Override_                public long softUpdateDocument(Term term, Iterable<? extends IndexableField> doc, Field...fields) throws IOException {_                    throw deleteException_ _                }_            }, null, null, config)__        try (ReplicationGroup shards = new ReplicationGroup(buildIndexMetaData(0)) {_            @Override_            protected EngineFactory getEngineFactory(ShardRouting routing) { return engineFactory_ }}) {__            _            shards.startPrimary()__            long primaryTerm = shards.getPrimary().getPendingPrimaryTerm()__            List<Translog.Operation> expectedTranslogOps = new ArrayList<>()__            BulkItemResponse indexResp = shards.index(new IndexRequest(index.getName(), "type", "1").source("{}", XContentType.JSON))__            assertThat(indexResp.isFailed(), equalTo(false))__            expectedTranslogOps.add(new Translog.Index("type", "1", 0, primaryTerm, 1, "{}".getBytes(StandardCharsets.UTF_8), null, -1))__            try (Translog.Snapshot snapshot = getTranslog(shards.getPrimary()).newSnapshot()) {_                assertThat(snapshot, SnapshotMatchers.containsOperationsInAnyOrder(expectedTranslogOps))__            }__            indexResp = shards.index(new IndexRequest(index.getName(), "type", "any").source("{}", XContentType.JSON))__            assertThat(indexResp.getFailure().getCause(), equalTo(indexException))__            expectedTranslogOps.add(new Translog.NoOp(1, primaryTerm, indexException.toString()))___            BulkItemResponse deleteResp = shards.delete(new DeleteRequest(index.getName(), "type", "1"))__            assertThat(deleteResp.getFailure().getCause(), equalTo(deleteException))__            expectedTranslogOps.add(new Translog.NoOp(2, primaryTerm, deleteException.toString()))__            shards.assertAllEqual(1)___            int nReplica = randomIntBetween(1, 3)__            for (int i = 0_ i < nReplica_ i++) {_                shards.addReplica()__            }_            shards.startReplicas(nReplica)__            for (IndexShard shard : shards) {_                try (Translog.Snapshot snapshot = getTranslog(shard).newSnapshot()) {_                    assertThat(snapshot, SnapshotMatchers.containsOperationsInAnyOrder(expectedTranslogOps))__                }_                try (Translog.Snapshot snapshot = shard.getHistoryOperations("test", 0)) {_                    assertThat(snapshot, SnapshotMatchers.containsOperationsInAnyOrder(expectedTranslogOps))__                }_            }_            _            indexResp = shards.index(new IndexRequest(index.getName(), "type", "any").source("{}", XContentType.JSON))__            assertThat(indexResp.getFailure().getCause(), equalTo(indexException))__            expectedTranslogOps.add(new Translog.NoOp(3, primaryTerm, indexException.toString()))___            deleteResp = shards.delete(new DeleteRequest(index.getName(), "type", "1"))__            assertThat(deleteResp.getFailure().getCause(), equalTo(deleteException))__            expectedTranslogOps.add(new Translog.NoOp(4, primaryTerm, deleteException.toString()))___            for (IndexShard shard : shards) {_                try (Translog.Snapshot snapshot = getTranslog(shard).newSnapshot()) {_                    assertThat(snapshot, SnapshotMatchers.containsOperationsInAnyOrder(expectedTranslogOps))__                }_                try (Translog.Snapshot snapshot = shard.getHistoryOperations("test", 0)) {_                    assertThat(snapshot, SnapshotMatchers.containsOperationsInAnyOrder(expectedTranslogOps))__                }_            }_            shards.assertAllEqual(1)__        }_    };test,document,failures,failures,after,generation,are,added,as,noop,operation,to,the,translog,for,primary,and,replica,shards;public,void,test,document,failure,replication,throws,exception,final,ioexception,index,exception,new,ioexception,simulated,indexing,failure,final,ioexception,delete,exception,new,ioexception,simulated,deleting,failure,final,engine,factory,engine,factory,config,internal,engine,tests,create,internal,engine,dir,iwc,new,index,writer,dir,iwc,final,atomic,boolean,throw,after,indexed,one,doc,new,atomic,boolean,override,public,long,add,document,iterable,extends,indexable,field,doc,throws,ioexception,boolean,is,tombstone,false,for,indexable,field,field,doc,if,seq,no,field,mapper,equals,field,name,is,tombstone,true,if,is,tombstone,false,throw,after,indexed,one,doc,get,and,set,true,throw,index,exception,else,return,super,add,document,doc,override,public,long,delete,documents,term,terms,throws,ioexception,throw,delete,exception,override,public,long,soft,update,document,term,term,iterable,extends,indexable,field,doc,field,fields,throws,ioexception,throw,delete,exception,null,null,config,try,replication,group,shards,new,replication,group,build,index,meta,data,0,override,protected,engine,factory,get,engine,factory,shard,routing,routing,return,engine,factory,shards,start,primary,long,primary,term,shards,get,primary,get,pending,primary,term,list,translog,operation,expected,translog,ops,new,array,list,bulk,item,response,index,resp,shards,index,new,index,request,index,get,name,type,1,source,xcontent,type,json,assert,that,index,resp,is,failed,equal,to,false,expected,translog,ops,add,new,translog,index,type,1,0,primary,term,1,get,bytes,standard,charsets,null,1,try,translog,snapshot,snapshot,get,translog,shards,get,primary,new,snapshot,assert,that,snapshot,snapshot,matchers,contains,operations,in,any,order,expected,translog,ops,index,resp,shards,index,new,index,request,index,get,name,type,any,source,xcontent,type,json,assert,that,index,resp,get,failure,get,cause,equal,to,index,exception,expected,translog,ops,add,new,translog,no,op,1,primary,term,index,exception,to,string,bulk,item,response,delete,resp,shards,delete,new,delete,request,index,get,name,type,1,assert,that,delete,resp,get,failure,get,cause,equal,to,delete,exception,expected,translog,ops,add,new,translog,no,op,2,primary,term,delete,exception,to,string,shards,assert,all,equal,1,int,n,replica,random,int,between,1,3,for,int,i,0,i,n,replica,i,shards,add,replica,shards,start,replicas,n,replica,for,index,shard,shard,shards,try,translog,snapshot,snapshot,get,translog,shard,new,snapshot,assert,that,snapshot,snapshot,matchers,contains,operations,in,any,order,expected,translog,ops,try,translog,snapshot,snapshot,shard,get,history,operations,test,0,assert,that,snapshot,snapshot,matchers,contains,operations,in,any,order,expected,translog,ops,index,resp,shards,index,new,index,request,index,get,name,type,any,source,xcontent,type,json,assert,that,index,resp,get,failure,get,cause,equal,to,index,exception,expected,translog,ops,add,new,translog,no,op,3,primary,term,index,exception,to,string,delete,resp,shards,delete,new,delete,request,index,get,name,type,1,assert,that,delete,resp,get,failure,get,cause,equal,to,delete,exception,expected,translog,ops,add,new,translog,no,op,4,primary,term,delete,exception,to,string,for,index,shard,shard,shards,try,translog,snapshot,snapshot,get,translog,shard,new,snapshot,assert,that,snapshot,snapshot,matchers,contains,operations,in,any,order,expected,translog,ops,try,translog,snapshot,snapshot,shard,get,history,operations,test,0,assert,that,snapshot,snapshot,matchers,contains,operations,in,any,order,expected,translog,ops,shards,assert,all,equal,1
IndexLevelReplicationTests -> public void testDocumentFailureReplication() throws Exception;1536828374;test document failures (failures after seq_no generation) are added as noop operation to the translog_for primary and replica shards;public void testDocumentFailureReplication() throws Exception {_        final IOException indexException = new IOException("simulated indexing failure")__        final IOException deleteException = new IOException("simulated deleting failure")__        final EngineFactory engineFactory = config -> InternalEngineTests.createInternalEngine((dir, iwc) ->_            new IndexWriter(dir, iwc) {_                final AtomicBoolean throwAfterIndexedOneDoc = new AtomicBoolean()_ _                @Override_                public long addDocument(Iterable<? extends IndexableField> doc) throws IOException {_                    boolean isTombstone = false__                    for (IndexableField field : doc) {_                        if (SeqNoFieldMapper.TOMBSTONE_NAME.equals(field.name())) {_                            isTombstone = true__                        }_                    }_                    if (isTombstone == false && throwAfterIndexedOneDoc.getAndSet(true)) {_                        throw indexException__                    } else {_                        return super.addDocument(doc)__                    }_                }_                @Override_                public long deleteDocuments(Term... terms) throws IOException {_                    throw deleteException__                }_                @Override_                public long softUpdateDocument(Term term, Iterable<? extends IndexableField> doc, Field...fields) throws IOException {_                    throw deleteException_ _                }_            }, null, null, config)__        try (ReplicationGroup shards = new ReplicationGroup(buildIndexMetaData(0)) {_            @Override_            protected EngineFactory getEngineFactory(ShardRouting routing) { return engineFactory_ }}) {__            _            shards.startPrimary()__            long primaryTerm = shards.getPrimary().getPendingPrimaryTerm()__            List<Translog.Operation> expectedTranslogOps = new ArrayList<>()__            BulkItemResponse indexResp = shards.index(new IndexRequest(index.getName(), "type", "1").source("{}", XContentType.JSON))__            assertThat(indexResp.isFailed(), equalTo(false))__            expectedTranslogOps.add(new Translog.Index("type", "1", 0, primaryTerm, 1, "{}".getBytes(StandardCharsets.UTF_8), null, -1))__            try (Translog.Snapshot snapshot = getTranslog(shards.getPrimary()).newSnapshot()) {_                assertThat(snapshot, SnapshotMatchers.containsOperationsInAnyOrder(expectedTranslogOps))__            }__            indexResp = shards.index(new IndexRequest(index.getName(), "type", "any").source("{}", XContentType.JSON))__            assertThat(indexResp.getFailure().getCause(), equalTo(indexException))__            expectedTranslogOps.add(new Translog.NoOp(1, primaryTerm, indexException.toString()))___            BulkItemResponse deleteResp = shards.delete(new DeleteRequest(index.getName(), "type", "1"))__            assertThat(deleteResp.getFailure().getCause(), equalTo(deleteException))__            expectedTranslogOps.add(new Translog.NoOp(2, primaryTerm, deleteException.toString()))__            shards.assertAllEqual(1)___            int nReplica = randomIntBetween(1, 3)__            for (int i = 0_ i < nReplica_ i++) {_                shards.addReplica()__            }_            shards.startReplicas(nReplica)__            for (IndexShard shard : shards) {_                try (Translog.Snapshot snapshot = getTranslog(shard).newSnapshot()) {_                    assertThat(snapshot, SnapshotMatchers.containsOperationsInAnyOrder(expectedTranslogOps))__                }_                try (Translog.Snapshot snapshot = shard.getHistoryOperations("test", 0)) {_                    assertThat(snapshot, SnapshotMatchers.containsOperationsInAnyOrder(expectedTranslogOps))__                }_            }_            _            indexResp = shards.index(new IndexRequest(index.getName(), "type", "any").source("{}", XContentType.JSON))__            assertThat(indexResp.getFailure().getCause(), equalTo(indexException))__            expectedTranslogOps.add(new Translog.NoOp(3, primaryTerm, indexException.toString()))___            deleteResp = shards.delete(new DeleteRequest(index.getName(), "type", "1"))__            assertThat(deleteResp.getFailure().getCause(), equalTo(deleteException))__            expectedTranslogOps.add(new Translog.NoOp(4, primaryTerm, deleteException.toString()))___            for (IndexShard shard : shards) {_                try (Translog.Snapshot snapshot = getTranslog(shard).newSnapshot()) {_                    assertThat(snapshot, SnapshotMatchers.containsOperationsInAnyOrder(expectedTranslogOps))__                }_                try (Translog.Snapshot snapshot = shard.getHistoryOperations("test", 0)) {_                    assertThat(snapshot, SnapshotMatchers.containsOperationsInAnyOrder(expectedTranslogOps))__                }_            }_            shards.assertAllEqual(1)__        }_    };test,document,failures,failures,after,generation,are,added,as,noop,operation,to,the,translog,for,primary,and,replica,shards;public,void,test,document,failure,replication,throws,exception,final,ioexception,index,exception,new,ioexception,simulated,indexing,failure,final,ioexception,delete,exception,new,ioexception,simulated,deleting,failure,final,engine,factory,engine,factory,config,internal,engine,tests,create,internal,engine,dir,iwc,new,index,writer,dir,iwc,final,atomic,boolean,throw,after,indexed,one,doc,new,atomic,boolean,override,public,long,add,document,iterable,extends,indexable,field,doc,throws,ioexception,boolean,is,tombstone,false,for,indexable,field,field,doc,if,seq,no,field,mapper,equals,field,name,is,tombstone,true,if,is,tombstone,false,throw,after,indexed,one,doc,get,and,set,true,throw,index,exception,else,return,super,add,document,doc,override,public,long,delete,documents,term,terms,throws,ioexception,throw,delete,exception,override,public,long,soft,update,document,term,term,iterable,extends,indexable,field,doc,field,fields,throws,ioexception,throw,delete,exception,null,null,config,try,replication,group,shards,new,replication,group,build,index,meta,data,0,override,protected,engine,factory,get,engine,factory,shard,routing,routing,return,engine,factory,shards,start,primary,long,primary,term,shards,get,primary,get,pending,primary,term,list,translog,operation,expected,translog,ops,new,array,list,bulk,item,response,index,resp,shards,index,new,index,request,index,get,name,type,1,source,xcontent,type,json,assert,that,index,resp,is,failed,equal,to,false,expected,translog,ops,add,new,translog,index,type,1,0,primary,term,1,get,bytes,standard,charsets,null,1,try,translog,snapshot,snapshot,get,translog,shards,get,primary,new,snapshot,assert,that,snapshot,snapshot,matchers,contains,operations,in,any,order,expected,translog,ops,index,resp,shards,index,new,index,request,index,get,name,type,any,source,xcontent,type,json,assert,that,index,resp,get,failure,get,cause,equal,to,index,exception,expected,translog,ops,add,new,translog,no,op,1,primary,term,index,exception,to,string,bulk,item,response,delete,resp,shards,delete,new,delete,request,index,get,name,type,1,assert,that,delete,resp,get,failure,get,cause,equal,to,delete,exception,expected,translog,ops,add,new,translog,no,op,2,primary,term,delete,exception,to,string,shards,assert,all,equal,1,int,n,replica,random,int,between,1,3,for,int,i,0,i,n,replica,i,shards,add,replica,shards,start,replicas,n,replica,for,index,shard,shard,shards,try,translog,snapshot,snapshot,get,translog,shard,new,snapshot,assert,that,snapshot,snapshot,matchers,contains,operations,in,any,order,expected,translog,ops,try,translog,snapshot,snapshot,shard,get,history,operations,test,0,assert,that,snapshot,snapshot,matchers,contains,operations,in,any,order,expected,translog,ops,index,resp,shards,index,new,index,request,index,get,name,type,any,source,xcontent,type,json,assert,that,index,resp,get,failure,get,cause,equal,to,index,exception,expected,translog,ops,add,new,translog,no,op,3,primary,term,index,exception,to,string,delete,resp,shards,delete,new,delete,request,index,get,name,type,1,assert,that,delete,resp,get,failure,get,cause,equal,to,delete,exception,expected,translog,ops,add,new,translog,no,op,4,primary,term,delete,exception,to,string,for,index,shard,shard,shards,try,translog,snapshot,snapshot,get,translog,shard,new,snapshot,assert,that,snapshot,snapshot,matchers,contains,operations,in,any,order,expected,translog,ops,try,translog,snapshot,snapshot,shard,get,history,operations,test,0,assert,that,snapshot,snapshot,matchers,contains,operations,in,any,order,expected,translog,ops,shards,assert,all,equal,1
IndexLevelReplicationTests -> public void testDocumentFailureReplication() throws Exception;1537806831;test document failures (failures after seq_no generation) are added as noop operation to the translog_for primary and replica shards;public void testDocumentFailureReplication() throws Exception {_        final IOException indexException = new IOException("simulated indexing failure")__        final IOException deleteException = new IOException("simulated deleting failure")__        final EngineFactory engineFactory = config -> InternalEngineTests.createInternalEngine((dir, iwc) ->_            new IndexWriter(dir, iwc) {_                final AtomicBoolean throwAfterIndexedOneDoc = new AtomicBoolean()_ _                @Override_                public long addDocument(Iterable<? extends IndexableField> doc) throws IOException {_                    boolean isTombstone = false__                    for (IndexableField field : doc) {_                        if (SeqNoFieldMapper.TOMBSTONE_NAME.equals(field.name())) {_                            isTombstone = true__                        }_                    }_                    if (isTombstone == false && throwAfterIndexedOneDoc.getAndSet(true)) {_                        throw indexException__                    } else {_                        return super.addDocument(doc)__                    }_                }_                @Override_                public long deleteDocuments(Term... terms) throws IOException {_                    throw deleteException__                }_                @Override_                public long softUpdateDocument(Term term, Iterable<? extends IndexableField> doc, Field...fields) throws IOException {_                    throw deleteException_ _                }_            }, null, null, config)__        try (ReplicationGroup shards = new ReplicationGroup(buildIndexMetaData(0)) {_            @Override_            protected EngineFactory getEngineFactory(ShardRouting routing) { return engineFactory_ }}) {__            _            shards.startPrimary()__            long primaryTerm = shards.getPrimary().getPendingPrimaryTerm()__            List<Translog.Operation> expectedTranslogOps = new ArrayList<>()__            BulkItemResponse indexResp = shards.index(new IndexRequest(index.getName(), "type", "1").source("{}", XContentType.JSON))__            assertThat(indexResp.isFailed(), equalTo(false))__            expectedTranslogOps.add(new Translog.Index("type", "1", 0, primaryTerm, 1, "{}".getBytes(StandardCharsets.UTF_8), null, -1))__            try (Translog.Snapshot snapshot = getTranslog(shards.getPrimary()).newSnapshot()) {_                assertThat(snapshot, SnapshotMatchers.containsOperationsInAnyOrder(expectedTranslogOps))__            }__            indexResp = shards.index(new IndexRequest(index.getName(), "type", "any").source("{}", XContentType.JSON))__            assertThat(indexResp.getFailure().getCause(), equalTo(indexException))__            expectedTranslogOps.add(new Translog.NoOp(1, primaryTerm, indexException.toString()))___            BulkItemResponse deleteResp = shards.delete(new DeleteRequest(index.getName(), "type", "1"))__            assertThat(deleteResp.getFailure().getCause(), equalTo(deleteException))__            expectedTranslogOps.add(new Translog.NoOp(2, primaryTerm, deleteException.toString()))__            shards.assertAllEqual(1)___            int nReplica = randomIntBetween(1, 3)__            for (int i = 0_ i < nReplica_ i++) {_                shards.addReplica()__            }_            shards.startReplicas(nReplica)__            for (IndexShard shard : shards) {_                try (Translog.Snapshot snapshot = getTranslog(shard).newSnapshot()) {_                    assertThat(snapshot, SnapshotMatchers.containsOperationsInAnyOrder(expectedTranslogOps))__                }_                try (Translog.Snapshot snapshot = shard.getHistoryOperations("test", 0)) {_                    assertThat(snapshot, SnapshotMatchers.containsOperationsInAnyOrder(expectedTranslogOps))__                }_            }_            _            indexResp = shards.index(new IndexRequest(index.getName(), "type", "any").source("{}", XContentType.JSON))__            assertThat(indexResp.getFailure().getCause(), equalTo(indexException))__            expectedTranslogOps.add(new Translog.NoOp(3, primaryTerm, indexException.toString()))___            deleteResp = shards.delete(new DeleteRequest(index.getName(), "type", "1"))__            assertThat(deleteResp.getFailure().getCause(), equalTo(deleteException))__            expectedTranslogOps.add(new Translog.NoOp(4, primaryTerm, deleteException.toString()))___            for (IndexShard shard : shards) {_                try (Translog.Snapshot snapshot = getTranslog(shard).newSnapshot()) {_                    assertThat(snapshot, SnapshotMatchers.containsOperationsInAnyOrder(expectedTranslogOps))__                }_                try (Translog.Snapshot snapshot = shard.getHistoryOperations("test", 0)) {_                    assertThat(snapshot, SnapshotMatchers.containsOperationsInAnyOrder(expectedTranslogOps))__                }_            }_            shards.assertAllEqual(1)__        }_    };test,document,failures,failures,after,generation,are,added,as,noop,operation,to,the,translog,for,primary,and,replica,shards;public,void,test,document,failure,replication,throws,exception,final,ioexception,index,exception,new,ioexception,simulated,indexing,failure,final,ioexception,delete,exception,new,ioexception,simulated,deleting,failure,final,engine,factory,engine,factory,config,internal,engine,tests,create,internal,engine,dir,iwc,new,index,writer,dir,iwc,final,atomic,boolean,throw,after,indexed,one,doc,new,atomic,boolean,override,public,long,add,document,iterable,extends,indexable,field,doc,throws,ioexception,boolean,is,tombstone,false,for,indexable,field,field,doc,if,seq,no,field,mapper,equals,field,name,is,tombstone,true,if,is,tombstone,false,throw,after,indexed,one,doc,get,and,set,true,throw,index,exception,else,return,super,add,document,doc,override,public,long,delete,documents,term,terms,throws,ioexception,throw,delete,exception,override,public,long,soft,update,document,term,term,iterable,extends,indexable,field,doc,field,fields,throws,ioexception,throw,delete,exception,null,null,config,try,replication,group,shards,new,replication,group,build,index,meta,data,0,override,protected,engine,factory,get,engine,factory,shard,routing,routing,return,engine,factory,shards,start,primary,long,primary,term,shards,get,primary,get,pending,primary,term,list,translog,operation,expected,translog,ops,new,array,list,bulk,item,response,index,resp,shards,index,new,index,request,index,get,name,type,1,source,xcontent,type,json,assert,that,index,resp,is,failed,equal,to,false,expected,translog,ops,add,new,translog,index,type,1,0,primary,term,1,get,bytes,standard,charsets,null,1,try,translog,snapshot,snapshot,get,translog,shards,get,primary,new,snapshot,assert,that,snapshot,snapshot,matchers,contains,operations,in,any,order,expected,translog,ops,index,resp,shards,index,new,index,request,index,get,name,type,any,source,xcontent,type,json,assert,that,index,resp,get,failure,get,cause,equal,to,index,exception,expected,translog,ops,add,new,translog,no,op,1,primary,term,index,exception,to,string,bulk,item,response,delete,resp,shards,delete,new,delete,request,index,get,name,type,1,assert,that,delete,resp,get,failure,get,cause,equal,to,delete,exception,expected,translog,ops,add,new,translog,no,op,2,primary,term,delete,exception,to,string,shards,assert,all,equal,1,int,n,replica,random,int,between,1,3,for,int,i,0,i,n,replica,i,shards,add,replica,shards,start,replicas,n,replica,for,index,shard,shard,shards,try,translog,snapshot,snapshot,get,translog,shard,new,snapshot,assert,that,snapshot,snapshot,matchers,contains,operations,in,any,order,expected,translog,ops,try,translog,snapshot,snapshot,shard,get,history,operations,test,0,assert,that,snapshot,snapshot,matchers,contains,operations,in,any,order,expected,translog,ops,index,resp,shards,index,new,index,request,index,get,name,type,any,source,xcontent,type,json,assert,that,index,resp,get,failure,get,cause,equal,to,index,exception,expected,translog,ops,add,new,translog,no,op,3,primary,term,index,exception,to,string,delete,resp,shards,delete,new,delete,request,index,get,name,type,1,assert,that,delete,resp,get,failure,get,cause,equal,to,delete,exception,expected,translog,ops,add,new,translog,no,op,4,primary,term,delete,exception,to,string,for,index,shard,shard,shards,try,translog,snapshot,snapshot,get,translog,shard,new,snapshot,assert,that,snapshot,snapshot,matchers,contains,operations,in,any,order,expected,translog,ops,try,translog,snapshot,snapshot,shard,get,history,operations,test,0,assert,that,snapshot,snapshot,matchers,contains,operations,in,any,order,expected,translog,ops,shards,assert,all,equal,1
IndexLevelReplicationTests -> public void testDocumentFailureReplication() throws Exception;1538067637;test document failures (failures after seq_no generation) are added as noop operation to the translog_for primary and replica shards;public void testDocumentFailureReplication() throws Exception {_        final IOException indexException = new IOException("simulated indexing failure")__        final IOException deleteException = new IOException("simulated deleting failure")__        final EngineFactory engineFactory = config -> InternalEngineTests.createInternalEngine((dir, iwc) ->_            new IndexWriter(dir, iwc) {_                final AtomicBoolean throwAfterIndexedOneDoc = new AtomicBoolean()_ _                @Override_                public long addDocument(Iterable<? extends IndexableField> doc) throws IOException {_                    boolean isTombstone = false__                    for (IndexableField field : doc) {_                        if (SeqNoFieldMapper.TOMBSTONE_NAME.equals(field.name())) {_                            isTombstone = true__                        }_                    }_                    if (isTombstone == false && throwAfterIndexedOneDoc.getAndSet(true)) {_                        throw indexException__                    } else {_                        return super.addDocument(doc)__                    }_                }_                @Override_                public long deleteDocuments(Term... terms) throws IOException {_                    throw deleteException__                }_                @Override_                public long softUpdateDocument(Term term, Iterable<? extends IndexableField> doc, Field...fields) throws IOException {_                    throw deleteException_ _                }_            }, null, null, config)__        try (ReplicationGroup shards = new ReplicationGroup(buildIndexMetaData(0)) {_            @Override_            protected EngineFactory getEngineFactory(ShardRouting routing) { return engineFactory_ }}) {__            _            shards.startPrimary()__            long primaryTerm = shards.getPrimary().getPendingPrimaryTerm()__            List<Translog.Operation> expectedTranslogOps = new ArrayList<>()__            BulkItemResponse indexResp = shards.index(new IndexRequest(index.getName(), "type", "1").source("{}", XContentType.JSON))__            assertThat(indexResp.isFailed(), equalTo(false))__            expectedTranslogOps.add(new Translog.Index("type", "1", 0, primaryTerm, 1, "{}".getBytes(StandardCharsets.UTF_8), null, -1))__            try (Translog.Snapshot snapshot = getTranslog(shards.getPrimary()).newSnapshot()) {_                assertThat(snapshot, SnapshotMatchers.containsOperationsInAnyOrder(expectedTranslogOps))__            }__            indexResp = shards.index(new IndexRequest(index.getName(), "type", "any").source("{}", XContentType.JSON))__            assertThat(indexResp.getFailure().getCause(), equalTo(indexException))__            expectedTranslogOps.add(new Translog.NoOp(1, primaryTerm, indexException.toString()))___            BulkItemResponse deleteResp = shards.delete(new DeleteRequest(index.getName(), "type", "1"))__            assertThat(deleteResp.getFailure().getCause(), equalTo(deleteException))__            expectedTranslogOps.add(new Translog.NoOp(2, primaryTerm, deleteException.toString()))__            shards.assertAllEqual(1)___            int nReplica = randomIntBetween(1, 3)__            for (int i = 0_ i < nReplica_ i++) {_                shards.addReplica()__            }_            shards.startReplicas(nReplica)__            for (IndexShard shard : shards) {_                try (Translog.Snapshot snapshot = getTranslog(shard).newSnapshot()) {_                    assertThat(snapshot, SnapshotMatchers.containsOperationsInAnyOrder(expectedTranslogOps))__                }_                try (Translog.Snapshot snapshot = shard.getHistoryOperations("test", 0)) {_                    assertThat(snapshot, SnapshotMatchers.containsOperationsInAnyOrder(expectedTranslogOps))__                }_            }_            _            indexResp = shards.index(new IndexRequest(index.getName(), "type", "any").source("{}", XContentType.JSON))__            assertThat(indexResp.getFailure().getCause(), equalTo(indexException))__            expectedTranslogOps.add(new Translog.NoOp(3, primaryTerm, indexException.toString()))___            deleteResp = shards.delete(new DeleteRequest(index.getName(), "type", "1"))__            assertThat(deleteResp.getFailure().getCause(), equalTo(deleteException))__            expectedTranslogOps.add(new Translog.NoOp(4, primaryTerm, deleteException.toString()))___            for (IndexShard shard : shards) {_                try (Translog.Snapshot snapshot = getTranslog(shard).newSnapshot()) {_                    assertThat(snapshot, SnapshotMatchers.containsOperationsInAnyOrder(expectedTranslogOps))__                }_                try (Translog.Snapshot snapshot = shard.getHistoryOperations("test", 0)) {_                    assertThat(snapshot, SnapshotMatchers.containsOperationsInAnyOrder(expectedTranslogOps))__                }_            }_            shards.assertAllEqual(1)__        }_    };test,document,failures,failures,after,generation,are,added,as,noop,operation,to,the,translog,for,primary,and,replica,shards;public,void,test,document,failure,replication,throws,exception,final,ioexception,index,exception,new,ioexception,simulated,indexing,failure,final,ioexception,delete,exception,new,ioexception,simulated,deleting,failure,final,engine,factory,engine,factory,config,internal,engine,tests,create,internal,engine,dir,iwc,new,index,writer,dir,iwc,final,atomic,boolean,throw,after,indexed,one,doc,new,atomic,boolean,override,public,long,add,document,iterable,extends,indexable,field,doc,throws,ioexception,boolean,is,tombstone,false,for,indexable,field,field,doc,if,seq,no,field,mapper,equals,field,name,is,tombstone,true,if,is,tombstone,false,throw,after,indexed,one,doc,get,and,set,true,throw,index,exception,else,return,super,add,document,doc,override,public,long,delete,documents,term,terms,throws,ioexception,throw,delete,exception,override,public,long,soft,update,document,term,term,iterable,extends,indexable,field,doc,field,fields,throws,ioexception,throw,delete,exception,null,null,config,try,replication,group,shards,new,replication,group,build,index,meta,data,0,override,protected,engine,factory,get,engine,factory,shard,routing,routing,return,engine,factory,shards,start,primary,long,primary,term,shards,get,primary,get,pending,primary,term,list,translog,operation,expected,translog,ops,new,array,list,bulk,item,response,index,resp,shards,index,new,index,request,index,get,name,type,1,source,xcontent,type,json,assert,that,index,resp,is,failed,equal,to,false,expected,translog,ops,add,new,translog,index,type,1,0,primary,term,1,get,bytes,standard,charsets,null,1,try,translog,snapshot,snapshot,get,translog,shards,get,primary,new,snapshot,assert,that,snapshot,snapshot,matchers,contains,operations,in,any,order,expected,translog,ops,index,resp,shards,index,new,index,request,index,get,name,type,any,source,xcontent,type,json,assert,that,index,resp,get,failure,get,cause,equal,to,index,exception,expected,translog,ops,add,new,translog,no,op,1,primary,term,index,exception,to,string,bulk,item,response,delete,resp,shards,delete,new,delete,request,index,get,name,type,1,assert,that,delete,resp,get,failure,get,cause,equal,to,delete,exception,expected,translog,ops,add,new,translog,no,op,2,primary,term,delete,exception,to,string,shards,assert,all,equal,1,int,n,replica,random,int,between,1,3,for,int,i,0,i,n,replica,i,shards,add,replica,shards,start,replicas,n,replica,for,index,shard,shard,shards,try,translog,snapshot,snapshot,get,translog,shard,new,snapshot,assert,that,snapshot,snapshot,matchers,contains,operations,in,any,order,expected,translog,ops,try,translog,snapshot,snapshot,shard,get,history,operations,test,0,assert,that,snapshot,snapshot,matchers,contains,operations,in,any,order,expected,translog,ops,index,resp,shards,index,new,index,request,index,get,name,type,any,source,xcontent,type,json,assert,that,index,resp,get,failure,get,cause,equal,to,index,exception,expected,translog,ops,add,new,translog,no,op,3,primary,term,index,exception,to,string,delete,resp,shards,delete,new,delete,request,index,get,name,type,1,assert,that,delete,resp,get,failure,get,cause,equal,to,delete,exception,expected,translog,ops,add,new,translog,no,op,4,primary,term,delete,exception,to,string,for,index,shard,shard,shards,try,translog,snapshot,snapshot,get,translog,shard,new,snapshot,assert,that,snapshot,snapshot,matchers,contains,operations,in,any,order,expected,translog,ops,try,translog,snapshot,snapshot,shard,get,history,operations,test,0,assert,that,snapshot,snapshot,matchers,contains,operations,in,any,order,expected,translog,ops,shards,assert,all,equal,1
IndexLevelReplicationTests -> public void testDocumentFailureReplication() throws Exception;1548124510;test document failures (failures after seq_no generation) are added as noop operation to the translog_for primary and replica shards;public void testDocumentFailureReplication() throws Exception {_        final IOException indexException = new IOException("simulated indexing failure")__        final IOException deleteException = new IOException("simulated deleting failure")__        final EngineFactory engineFactory = config -> InternalEngineTests.createInternalEngine((dir, iwc) ->_            new IndexWriter(dir, iwc) {_                final AtomicBoolean throwAfterIndexedOneDoc = new AtomicBoolean()_ _                @Override_                public long addDocument(Iterable<? extends IndexableField> doc) throws IOException {_                    boolean isTombstone = false__                    for (IndexableField field : doc) {_                        if (SeqNoFieldMapper.TOMBSTONE_NAME.equals(field.name())) {_                            isTombstone = true__                        }_                    }_                    if (isTombstone == false && throwAfterIndexedOneDoc.getAndSet(true)) {_                        throw indexException__                    } else {_                        return super.addDocument(doc)__                    }_                }_                @Override_                public long deleteDocuments(Term... terms) throws IOException {_                    throw deleteException__                }_                @Override_                public long softUpdateDocument(Term term, Iterable<? extends IndexableField> doc, Field...fields) throws IOException {_                    throw deleteException_ _                }_            }, null, null, config)__        try (ReplicationGroup shards = new ReplicationGroup(buildIndexMetaData(0)) {_            @Override_            protected EngineFactory getEngineFactory(ShardRouting routing) { return engineFactory_ }}) {__            _            shards.startPrimary()__            long primaryTerm = shards.getPrimary().getPendingPrimaryTerm()__            List<Translog.Operation> expectedTranslogOps = new ArrayList<>()__            BulkItemResponse indexResp = shards.index(new IndexRequest(index.getName(), "type", "1").source("{}", XContentType.JSON))__            assertThat(indexResp.isFailed(), equalTo(false))__            expectedTranslogOps.add(new Translog.Index("type", "1", 0, primaryTerm, 1, "{}".getBytes(StandardCharsets.UTF_8), null, -1))__            try (Translog.Snapshot snapshot = getTranslog(shards.getPrimary()).newSnapshot()) {_                assertThat(snapshot, SnapshotMatchers.containsOperationsInAnyOrder(expectedTranslogOps))__            }__            indexResp = shards.index(new IndexRequest(index.getName(), "type", "any").source("{}", XContentType.JSON))__            assertThat(indexResp.getFailure().getCause(), equalTo(indexException))__            expectedTranslogOps.add(new Translog.NoOp(1, primaryTerm, indexException.toString()))___            BulkItemResponse deleteResp = shards.delete(new DeleteRequest(index.getName(), "type", "1"))__            assertThat(deleteResp.getFailure().getCause(), equalTo(deleteException))__            expectedTranslogOps.add(new Translog.NoOp(2, primaryTerm, deleteException.toString()))__            shards.assertAllEqual(1)___            int nReplica = randomIntBetween(1, 3)__            for (int i = 0_ i < nReplica_ i++) {_                shards.addReplica()__            }_            shards.startReplicas(nReplica)__            for (IndexShard shard : shards) {_                try (Translog.Snapshot snapshot = getTranslog(shard).newSnapshot()) {_                    assertThat(snapshot, SnapshotMatchers.containsOperationsInAnyOrder(expectedTranslogOps))__                }_                try (Translog.Snapshot snapshot = shard.getHistoryOperations("test", 0)) {_                    assertThat(snapshot, SnapshotMatchers.containsOperationsInAnyOrder(expectedTranslogOps))__                }_            }_            _            indexResp = shards.index(new IndexRequest(index.getName(), "type", "any").source("{}", XContentType.JSON))__            assertThat(indexResp.getFailure().getCause(), equalTo(indexException))__            expectedTranslogOps.add(new Translog.NoOp(3, primaryTerm, indexException.toString()))___            deleteResp = shards.delete(new DeleteRequest(index.getName(), "type", "1"))__            assertThat(deleteResp.getFailure().getCause(), equalTo(deleteException))__            expectedTranslogOps.add(new Translog.NoOp(4, primaryTerm, deleteException.toString()))___            for (IndexShard shard : shards) {_                try (Translog.Snapshot snapshot = getTranslog(shard).newSnapshot()) {_                    assertThat(snapshot, SnapshotMatchers.containsOperationsInAnyOrder(expectedTranslogOps))__                }_                try (Translog.Snapshot snapshot = shard.getHistoryOperations("test", 0)) {_                    assertThat(snapshot, SnapshotMatchers.containsOperationsInAnyOrder(expectedTranslogOps))__                }_            }_            shards.assertAllEqual(1)__        }_    };test,document,failures,failures,after,generation,are,added,as,noop,operation,to,the,translog,for,primary,and,replica,shards;public,void,test,document,failure,replication,throws,exception,final,ioexception,index,exception,new,ioexception,simulated,indexing,failure,final,ioexception,delete,exception,new,ioexception,simulated,deleting,failure,final,engine,factory,engine,factory,config,internal,engine,tests,create,internal,engine,dir,iwc,new,index,writer,dir,iwc,final,atomic,boolean,throw,after,indexed,one,doc,new,atomic,boolean,override,public,long,add,document,iterable,extends,indexable,field,doc,throws,ioexception,boolean,is,tombstone,false,for,indexable,field,field,doc,if,seq,no,field,mapper,equals,field,name,is,tombstone,true,if,is,tombstone,false,throw,after,indexed,one,doc,get,and,set,true,throw,index,exception,else,return,super,add,document,doc,override,public,long,delete,documents,term,terms,throws,ioexception,throw,delete,exception,override,public,long,soft,update,document,term,term,iterable,extends,indexable,field,doc,field,fields,throws,ioexception,throw,delete,exception,null,null,config,try,replication,group,shards,new,replication,group,build,index,meta,data,0,override,protected,engine,factory,get,engine,factory,shard,routing,routing,return,engine,factory,shards,start,primary,long,primary,term,shards,get,primary,get,pending,primary,term,list,translog,operation,expected,translog,ops,new,array,list,bulk,item,response,index,resp,shards,index,new,index,request,index,get,name,type,1,source,xcontent,type,json,assert,that,index,resp,is,failed,equal,to,false,expected,translog,ops,add,new,translog,index,type,1,0,primary,term,1,get,bytes,standard,charsets,null,1,try,translog,snapshot,snapshot,get,translog,shards,get,primary,new,snapshot,assert,that,snapshot,snapshot,matchers,contains,operations,in,any,order,expected,translog,ops,index,resp,shards,index,new,index,request,index,get,name,type,any,source,xcontent,type,json,assert,that,index,resp,get,failure,get,cause,equal,to,index,exception,expected,translog,ops,add,new,translog,no,op,1,primary,term,index,exception,to,string,bulk,item,response,delete,resp,shards,delete,new,delete,request,index,get,name,type,1,assert,that,delete,resp,get,failure,get,cause,equal,to,delete,exception,expected,translog,ops,add,new,translog,no,op,2,primary,term,delete,exception,to,string,shards,assert,all,equal,1,int,n,replica,random,int,between,1,3,for,int,i,0,i,n,replica,i,shards,add,replica,shards,start,replicas,n,replica,for,index,shard,shard,shards,try,translog,snapshot,snapshot,get,translog,shard,new,snapshot,assert,that,snapshot,snapshot,matchers,contains,operations,in,any,order,expected,translog,ops,try,translog,snapshot,snapshot,shard,get,history,operations,test,0,assert,that,snapshot,snapshot,matchers,contains,operations,in,any,order,expected,translog,ops,index,resp,shards,index,new,index,request,index,get,name,type,any,source,xcontent,type,json,assert,that,index,resp,get,failure,get,cause,equal,to,index,exception,expected,translog,ops,add,new,translog,no,op,3,primary,term,index,exception,to,string,delete,resp,shards,delete,new,delete,request,index,get,name,type,1,assert,that,delete,resp,get,failure,get,cause,equal,to,delete,exception,expected,translog,ops,add,new,translog,no,op,4,primary,term,delete,exception,to,string,for,index,shard,shard,shards,try,translog,snapshot,snapshot,get,translog,shard,new,snapshot,assert,that,snapshot,snapshot,matchers,contains,operations,in,any,order,expected,translog,ops,try,translog,snapshot,snapshot,shard,get,history,operations,test,0,assert,that,snapshot,snapshot,matchers,contains,operations,in,any,order,expected,translog,ops,shards,assert,all,equal,1
IndexLevelReplicationTests -> public void testLateDeliveryAfterGCTriggeredOnReplica() throws Exception;1524684173;This test ensures the consistency between primary and replica with late and out of order delivery on the replica._An index operation on the primary is followed by a delete operation. The delete operation is delivered first_and processed on the replica but the index is delayed with an interval that is even longer the gc deletes cycle._This makes sure that that replica still remembers the delete operation and correctly ignores the stale index operation.;public void testLateDeliveryAfterGCTriggeredOnReplica() throws Exception {_        ThreadPool.terminate(this.threadPool, 10, TimeUnit.SECONDS)__        this.threadPool = new TestThreadPool(getClass().getName(),_            Settings.builder().put(threadPoolSettings()).put(ThreadPool.ESTIMATED_TIME_INTERVAL_SETTING.getKey(), 0).build())___        try (ReplicationGroup shards = createGroup(1)) {_            shards.startAll()__            final IndexShard primary = shards.getPrimary()__            final IndexShard replica = shards.getReplicas().get(0)__            final TimeValue gcInterval = TimeValue.timeValueMillis(between(1, 10))__            __            updateGCDeleteCycle(replica, gcInterval)__            final BulkShardRequest indexRequest = indexOnPrimary(_                new IndexRequest(index.getName(), "type", "d1").source("{}", XContentType.JSON), primary)__            final BulkShardRequest deleteRequest = deleteOnPrimary(new DeleteRequest(index.getName(), "type", "d1"), primary)__            deleteOnReplica(deleteRequest, shards, replica)_ _            final long deleteTimestamp = threadPool.relativeTimeInMillis()__            replica.refresh("test")__            assertBusy(() ->_                assertThat(threadPool.relativeTimeInMillis() - deleteTimestamp, greaterThan(gcInterval.millis()))_            )__            getEngine(replica).maybePruneDeletes()__            indexOnReplica(indexRequest, shards, replica)_  _            shards.assertAllEqual(0)__        }_    };this,test,ensures,the,consistency,between,primary,and,replica,with,late,and,out,of,order,delivery,on,the,replica,an,index,operation,on,the,primary,is,followed,by,a,delete,operation,the,delete,operation,is,delivered,first,and,processed,on,the,replica,but,the,index,is,delayed,with,an,interval,that,is,even,longer,the,gc,deletes,cycle,this,makes,sure,that,that,replica,still,remembers,the,delete,operation,and,correctly,ignores,the,stale,index,operation;public,void,test,late,delivery,after,gctriggered,on,replica,throws,exception,thread,pool,terminate,this,thread,pool,10,time,unit,seconds,this,thread,pool,new,test,thread,pool,get,class,get,name,settings,builder,put,thread,pool,settings,put,thread,pool,get,key,0,build,try,replication,group,shards,create,group,1,shards,start,all,final,index,shard,primary,shards,get,primary,final,index,shard,replica,shards,get,replicas,get,0,final,time,value,gc,interval,time,value,time,value,millis,between,1,10,update,gcdelete,cycle,replica,gc,interval,final,bulk,shard,request,index,request,index,on,primary,new,index,request,index,get,name,type,d1,source,xcontent,type,json,primary,final,bulk,shard,request,delete,request,delete,on,primary,new,delete,request,index,get,name,type,d1,primary,delete,on,replica,delete,request,shards,replica,final,long,delete,timestamp,thread,pool,relative,time,in,millis,replica,refresh,test,assert,busy,assert,that,thread,pool,relative,time,in,millis,delete,timestamp,greater,than,gc,interval,millis,get,engine,replica,maybe,prune,deletes,index,on,replica,index,request,shards,replica,shards,assert,all,equal,0
IndexLevelReplicationTests -> public void testLateDeliveryAfterGCTriggeredOnReplica() throws Exception;1525162917;This test ensures the consistency between primary and replica with late and out of order delivery on the replica._An index operation on the primary is followed by a delete operation. The delete operation is delivered first_and processed on the replica but the index is delayed with an interval that is even longer the gc deletes cycle._This makes sure that that replica still remembers the delete operation and correctly ignores the stale index operation.;public void testLateDeliveryAfterGCTriggeredOnReplica() throws Exception {_        ThreadPool.terminate(this.threadPool, 10, TimeUnit.SECONDS)__        this.threadPool = new TestThreadPool(getClass().getName(),_            Settings.builder().put(threadPoolSettings()).put(ThreadPool.ESTIMATED_TIME_INTERVAL_SETTING.getKey(), 0).build())___        try (ReplicationGroup shards = createGroup(1)) {_            shards.startAll()__            final IndexShard primary = shards.getPrimary()__            final IndexShard replica = shards.getReplicas().get(0)__            final TimeValue gcInterval = TimeValue.timeValueMillis(between(1, 10))__            __            updateGCDeleteCycle(replica, gcInterval)__            final BulkShardRequest indexRequest = indexOnPrimary(_                new IndexRequest(index.getName(), "type", "d1").source("{}", XContentType.JSON), primary)__            final BulkShardRequest deleteRequest = deleteOnPrimary(new DeleteRequest(index.getName(), "type", "d1"), primary)__            deleteOnReplica(deleteRequest, shards, replica)_ _            final long deleteTimestamp = threadPool.relativeTimeInMillis()__            replica.refresh("test")__            assertBusy(() ->_                assertThat(threadPool.relativeTimeInMillis() - deleteTimestamp, greaterThan(gcInterval.millis()))_            )__            getEngine(replica).maybePruneDeletes()__            indexOnReplica(indexRequest, shards, replica)_  _            shards.assertAllEqual(0)__        }_    };this,test,ensures,the,consistency,between,primary,and,replica,with,late,and,out,of,order,delivery,on,the,replica,an,index,operation,on,the,primary,is,followed,by,a,delete,operation,the,delete,operation,is,delivered,first,and,processed,on,the,replica,but,the,index,is,delayed,with,an,interval,that,is,even,longer,the,gc,deletes,cycle,this,makes,sure,that,that,replica,still,remembers,the,delete,operation,and,correctly,ignores,the,stale,index,operation;public,void,test,late,delivery,after,gctriggered,on,replica,throws,exception,thread,pool,terminate,this,thread,pool,10,time,unit,seconds,this,thread,pool,new,test,thread,pool,get,class,get,name,settings,builder,put,thread,pool,settings,put,thread,pool,get,key,0,build,try,replication,group,shards,create,group,1,shards,start,all,final,index,shard,primary,shards,get,primary,final,index,shard,replica,shards,get,replicas,get,0,final,time,value,gc,interval,time,value,time,value,millis,between,1,10,update,gcdelete,cycle,replica,gc,interval,final,bulk,shard,request,index,request,index,on,primary,new,index,request,index,get,name,type,d1,source,xcontent,type,json,primary,final,bulk,shard,request,delete,request,delete,on,primary,new,delete,request,index,get,name,type,d1,primary,delete,on,replica,delete,request,shards,replica,final,long,delete,timestamp,thread,pool,relative,time,in,millis,replica,refresh,test,assert,busy,assert,that,thread,pool,relative,time,in,millis,delete,timestamp,greater,than,gc,interval,millis,get,engine,replica,maybe,prune,deletes,index,on,replica,index,request,shards,replica,shards,assert,all,equal,0
IndexLevelReplicationTests -> public void testLateDeliveryAfterGCTriggeredOnReplica() throws Exception;1528706846;This test ensures the consistency between primary and replica with late and out of order delivery on the replica._An index operation on the primary is followed by a delete operation. The delete operation is delivered first_and processed on the replica but the index is delayed with an interval that is even longer the gc deletes cycle._This makes sure that that replica still remembers the delete operation and correctly ignores the stale index operation.;public void testLateDeliveryAfterGCTriggeredOnReplica() throws Exception {_        ThreadPool.terminate(this.threadPool, 10, TimeUnit.SECONDS)__        this.threadPool = new TestThreadPool(getClass().getName(),_            Settings.builder().put(threadPoolSettings()).put(ThreadPool.ESTIMATED_TIME_INTERVAL_SETTING.getKey(), 0).build())___        try (ReplicationGroup shards = createGroup(1)) {_            shards.startAll()__            final IndexShard primary = shards.getPrimary()__            final IndexShard replica = shards.getReplicas().get(0)__            final TimeValue gcInterval = TimeValue.timeValueMillis(between(1, 10))__            __            updateGCDeleteCycle(replica, gcInterval)__            final BulkShardRequest indexRequest = indexOnPrimary(_                new IndexRequest(index.getName(), "type", "d1").source("{}", XContentType.JSON), primary)__            final BulkShardRequest deleteRequest = deleteOnPrimary(new DeleteRequest(index.getName(), "type", "d1"), primary)__            deleteOnReplica(deleteRequest, shards, replica)_ _            final long deleteTimestamp = threadPool.relativeTimeInMillis()__            replica.refresh("test")__            assertBusy(() ->_                assertThat(threadPool.relativeTimeInMillis() - deleteTimestamp, greaterThan(gcInterval.millis()))_            )__            getEngine(replica).maybePruneDeletes()__            indexOnReplica(indexRequest, shards, replica)_  _            shards.assertAllEqual(0)__        }_    };this,test,ensures,the,consistency,between,primary,and,replica,with,late,and,out,of,order,delivery,on,the,replica,an,index,operation,on,the,primary,is,followed,by,a,delete,operation,the,delete,operation,is,delivered,first,and,processed,on,the,replica,but,the,index,is,delayed,with,an,interval,that,is,even,longer,the,gc,deletes,cycle,this,makes,sure,that,that,replica,still,remembers,the,delete,operation,and,correctly,ignores,the,stale,index,operation;public,void,test,late,delivery,after,gctriggered,on,replica,throws,exception,thread,pool,terminate,this,thread,pool,10,time,unit,seconds,this,thread,pool,new,test,thread,pool,get,class,get,name,settings,builder,put,thread,pool,settings,put,thread,pool,get,key,0,build,try,replication,group,shards,create,group,1,shards,start,all,final,index,shard,primary,shards,get,primary,final,index,shard,replica,shards,get,replicas,get,0,final,time,value,gc,interval,time,value,time,value,millis,between,1,10,update,gcdelete,cycle,replica,gc,interval,final,bulk,shard,request,index,request,index,on,primary,new,index,request,index,get,name,type,d1,source,xcontent,type,json,primary,final,bulk,shard,request,delete,request,delete,on,primary,new,delete,request,index,get,name,type,d1,primary,delete,on,replica,delete,request,shards,replica,final,long,delete,timestamp,thread,pool,relative,time,in,millis,replica,refresh,test,assert,busy,assert,that,thread,pool,relative,time,in,millis,delete,timestamp,greater,than,gc,interval,millis,get,engine,replica,maybe,prune,deletes,index,on,replica,index,request,shards,replica,shards,assert,all,equal,0
IndexLevelReplicationTests -> public void testLateDeliveryAfterGCTriggeredOnReplica() throws Exception;1531910483;This test ensures the consistency between primary and replica with late and out of order delivery on the replica._An index operation on the primary is followed by a delete operation. The delete operation is delivered first_and processed on the replica but the index is delayed with an interval that is even longer the gc deletes cycle._This makes sure that that replica still remembers the delete operation and correctly ignores the stale index operation.;public void testLateDeliveryAfterGCTriggeredOnReplica() throws Exception {_        ThreadPool.terminate(this.threadPool, 10, TimeUnit.SECONDS)__        this.threadPool = new TestThreadPool(getClass().getName(),_            Settings.builder().put(threadPoolSettings()).put(ThreadPool.ESTIMATED_TIME_INTERVAL_SETTING.getKey(), 0).build())___        try (ReplicationGroup shards = createGroup(1)) {_            shards.startAll()__            final IndexShard primary = shards.getPrimary()__            final IndexShard replica = shards.getReplicas().get(0)__            final TimeValue gcInterval = TimeValue.timeValueMillis(between(1, 10))__            __            updateGCDeleteCycle(replica, gcInterval)__            final BulkShardRequest indexRequest = indexOnPrimary(_                new IndexRequest(index.getName(), "type", "d1").source("{}", XContentType.JSON), primary)__            final BulkShardRequest deleteRequest = deleteOnPrimary(new DeleteRequest(index.getName(), "type", "d1"), primary)__            deleteOnReplica(deleteRequest, shards, replica)_ _            final long deleteTimestamp = threadPool.relativeTimeInMillis()__            replica.refresh("test")__            assertBusy(() ->_                assertThat(threadPool.relativeTimeInMillis() - deleteTimestamp, greaterThan(gcInterval.millis()))_            )__            getEngine(replica).maybePruneDeletes()__            indexOnReplica(indexRequest, shards, replica)_  _            shards.assertAllEqual(0)__        }_    };this,test,ensures,the,consistency,between,primary,and,replica,with,late,and,out,of,order,delivery,on,the,replica,an,index,operation,on,the,primary,is,followed,by,a,delete,operation,the,delete,operation,is,delivered,first,and,processed,on,the,replica,but,the,index,is,delayed,with,an,interval,that,is,even,longer,the,gc,deletes,cycle,this,makes,sure,that,that,replica,still,remembers,the,delete,operation,and,correctly,ignores,the,stale,index,operation;public,void,test,late,delivery,after,gctriggered,on,replica,throws,exception,thread,pool,terminate,this,thread,pool,10,time,unit,seconds,this,thread,pool,new,test,thread,pool,get,class,get,name,settings,builder,put,thread,pool,settings,put,thread,pool,get,key,0,build,try,replication,group,shards,create,group,1,shards,start,all,final,index,shard,primary,shards,get,primary,final,index,shard,replica,shards,get,replicas,get,0,final,time,value,gc,interval,time,value,time,value,millis,between,1,10,update,gcdelete,cycle,replica,gc,interval,final,bulk,shard,request,index,request,index,on,primary,new,index,request,index,get,name,type,d1,source,xcontent,type,json,primary,final,bulk,shard,request,delete,request,delete,on,primary,new,delete,request,index,get,name,type,d1,primary,delete,on,replica,delete,request,shards,replica,final,long,delete,timestamp,thread,pool,relative,time,in,millis,replica,refresh,test,assert,busy,assert,that,thread,pool,relative,time,in,millis,delete,timestamp,greater,than,gc,interval,millis,get,engine,replica,maybe,prune,deletes,index,on,replica,index,request,shards,replica,shards,assert,all,equal,0
IndexLevelReplicationTests -> public void testLateDeliveryAfterGCTriggeredOnReplica() throws Exception;1533295538;This test ensures the consistency between primary and replica with late and out of order delivery on the replica._An index operation on the primary is followed by a delete operation. The delete operation is delivered first_and processed on the replica but the index is delayed with an interval that is even longer the gc deletes cycle._This makes sure that that replica still remembers the delete operation and correctly ignores the stale index operation.;public void testLateDeliveryAfterGCTriggeredOnReplica() throws Exception {_        ThreadPool.terminate(this.threadPool, 10, TimeUnit.SECONDS)__        this.threadPool = new TestThreadPool(getClass().getName(),_            Settings.builder().put(threadPoolSettings()).put(ThreadPool.ESTIMATED_TIME_INTERVAL_SETTING.getKey(), 0).build())___        try (ReplicationGroup shards = createGroup(1)) {_            shards.startAll()__            final IndexShard primary = shards.getPrimary()__            final IndexShard replica = shards.getReplicas().get(0)__            final TimeValue gcInterval = TimeValue.timeValueMillis(between(1, 10))__            __            updateGCDeleteCycle(replica, gcInterval)__            final BulkShardRequest indexRequest = indexOnPrimary(_                new IndexRequest(index.getName(), "type", "d1").source("{}", XContentType.JSON), primary)__            final BulkShardRequest deleteRequest = deleteOnPrimary(new DeleteRequest(index.getName(), "type", "d1"), primary)__            deleteOnReplica(deleteRequest, shards, replica)_ _            final long deleteTimestamp = threadPool.relativeTimeInMillis()__            replica.refresh("test")__            assertBusy(() ->_                assertThat(threadPool.relativeTimeInMillis() - deleteTimestamp, greaterThan(gcInterval.millis()))_            )__            getEngine(replica).maybePruneDeletes()__            indexOnReplica(indexRequest, shards, replica)_  _            shards.assertAllEqual(0)__        }_    };this,test,ensures,the,consistency,between,primary,and,replica,with,late,and,out,of,order,delivery,on,the,replica,an,index,operation,on,the,primary,is,followed,by,a,delete,operation,the,delete,operation,is,delivered,first,and,processed,on,the,replica,but,the,index,is,delayed,with,an,interval,that,is,even,longer,the,gc,deletes,cycle,this,makes,sure,that,that,replica,still,remembers,the,delete,operation,and,correctly,ignores,the,stale,index,operation;public,void,test,late,delivery,after,gctriggered,on,replica,throws,exception,thread,pool,terminate,this,thread,pool,10,time,unit,seconds,this,thread,pool,new,test,thread,pool,get,class,get,name,settings,builder,put,thread,pool,settings,put,thread,pool,get,key,0,build,try,replication,group,shards,create,group,1,shards,start,all,final,index,shard,primary,shards,get,primary,final,index,shard,replica,shards,get,replicas,get,0,final,time,value,gc,interval,time,value,time,value,millis,between,1,10,update,gcdelete,cycle,replica,gc,interval,final,bulk,shard,request,index,request,index,on,primary,new,index,request,index,get,name,type,d1,source,xcontent,type,json,primary,final,bulk,shard,request,delete,request,delete,on,primary,new,delete,request,index,get,name,type,d1,primary,delete,on,replica,delete,request,shards,replica,final,long,delete,timestamp,thread,pool,relative,time,in,millis,replica,refresh,test,assert,busy,assert,that,thread,pool,relative,time,in,millis,delete,timestamp,greater,than,gc,interval,millis,get,engine,replica,maybe,prune,deletes,index,on,replica,index,request,shards,replica,shards,assert,all,equal,0
IndexLevelReplicationTests -> public void testLateDeliveryAfterGCTriggeredOnReplica() throws Exception;1533641732;This test ensures the consistency between primary and replica with late and out of order delivery on the replica._An index operation on the primary is followed by a delete operation. The delete operation is delivered first_and processed on the replica but the index is delayed with an interval that is even longer the gc deletes cycle._This makes sure that that replica still remembers the delete operation and correctly ignores the stale index operation.;public void testLateDeliveryAfterGCTriggeredOnReplica() throws Exception {_        ThreadPool.terminate(this.threadPool, 10, TimeUnit.SECONDS)__        this.threadPool = new TestThreadPool(getClass().getName(),_            Settings.builder().put(threadPoolSettings()).put(ThreadPool.ESTIMATED_TIME_INTERVAL_SETTING.getKey(), 0).build())___        try (ReplicationGroup shards = createGroup(1)) {_            shards.startAll()__            final IndexShard primary = shards.getPrimary()__            final IndexShard replica = shards.getReplicas().get(0)__            final TimeValue gcInterval = TimeValue.timeValueMillis(between(1, 10))__            __            updateGCDeleteCycle(replica, gcInterval)__            final BulkShardRequest indexRequest = indexOnPrimary(_                new IndexRequest(index.getName(), "type", "d1").source("{}", XContentType.JSON), primary)__            final BulkShardRequest deleteRequest = deleteOnPrimary(new DeleteRequest(index.getName(), "type", "d1"), primary)__            deleteOnReplica(deleteRequest, shards, replica)_ _            final long deleteTimestamp = threadPool.relativeTimeInMillis()__            replica.refresh("test")__            assertBusy(() ->_                assertThat(threadPool.relativeTimeInMillis() - deleteTimestamp, greaterThan(gcInterval.millis()))_            )__            getEngine(replica).maybePruneDeletes()__            indexOnReplica(indexRequest, shards, replica)_  _            shards.assertAllEqual(0)__        }_    };this,test,ensures,the,consistency,between,primary,and,replica,with,late,and,out,of,order,delivery,on,the,replica,an,index,operation,on,the,primary,is,followed,by,a,delete,operation,the,delete,operation,is,delivered,first,and,processed,on,the,replica,but,the,index,is,delayed,with,an,interval,that,is,even,longer,the,gc,deletes,cycle,this,makes,sure,that,that,replica,still,remembers,the,delete,operation,and,correctly,ignores,the,stale,index,operation;public,void,test,late,delivery,after,gctriggered,on,replica,throws,exception,thread,pool,terminate,this,thread,pool,10,time,unit,seconds,this,thread,pool,new,test,thread,pool,get,class,get,name,settings,builder,put,thread,pool,settings,put,thread,pool,get,key,0,build,try,replication,group,shards,create,group,1,shards,start,all,final,index,shard,primary,shards,get,primary,final,index,shard,replica,shards,get,replicas,get,0,final,time,value,gc,interval,time,value,time,value,millis,between,1,10,update,gcdelete,cycle,replica,gc,interval,final,bulk,shard,request,index,request,index,on,primary,new,index,request,index,get,name,type,d1,source,xcontent,type,json,primary,final,bulk,shard,request,delete,request,delete,on,primary,new,delete,request,index,get,name,type,d1,primary,delete,on,replica,delete,request,shards,replica,final,long,delete,timestamp,thread,pool,relative,time,in,millis,replica,refresh,test,assert,busy,assert,that,thread,pool,relative,time,in,millis,delete,timestamp,greater,than,gc,interval,millis,get,engine,replica,maybe,prune,deletes,index,on,replica,index,request,shards,replica,shards,assert,all,equal,0
IndexLevelReplicationTests -> public void testLateDeliveryAfterGCTriggeredOnReplica() throws Exception;1535405719;This test ensures the consistency between primary and replica with late and out of order delivery on the replica._An index operation on the primary is followed by a delete operation. The delete operation is delivered first_and processed on the replica but the index is delayed with an interval that is even longer the gc deletes cycle._This makes sure that that replica still remembers the delete operation and correctly ignores the stale index operation.;public void testLateDeliveryAfterGCTriggeredOnReplica() throws Exception {_        ThreadPool.terminate(this.threadPool, 10, TimeUnit.SECONDS)__        this.threadPool = new TestThreadPool(getClass().getName(),_            Settings.builder().put(threadPoolSettings()).put(ThreadPool.ESTIMATED_TIME_INTERVAL_SETTING.getKey(), 0).build())___        try (ReplicationGroup shards = createGroup(1)) {_            shards.startAll()__            final IndexShard primary = shards.getPrimary()__            final IndexShard replica = shards.getReplicas().get(0)__            final TimeValue gcInterval = TimeValue.timeValueMillis(between(1, 10))__            __            updateGCDeleteCycle(replica, gcInterval)__            final BulkShardRequest indexRequest = indexOnPrimary(_                new IndexRequest(index.getName(), "type", "d1").source("{}", XContentType.JSON), primary)__            final BulkShardRequest deleteRequest = deleteOnPrimary(new DeleteRequest(index.getName(), "type", "d1"), primary)__            deleteOnReplica(deleteRequest, shards, replica)_ _            final long deleteTimestamp = threadPool.relativeTimeInMillis()__            replica.refresh("test")__            assertBusy(() ->_                assertThat(threadPool.relativeTimeInMillis() - deleteTimestamp, greaterThan(gcInterval.millis()))_            )__            getEngine(replica).maybePruneDeletes()__            indexOnReplica(indexRequest, shards, replica)_  _            shards.assertAllEqual(0)__        }_    };this,test,ensures,the,consistency,between,primary,and,replica,with,late,and,out,of,order,delivery,on,the,replica,an,index,operation,on,the,primary,is,followed,by,a,delete,operation,the,delete,operation,is,delivered,first,and,processed,on,the,replica,but,the,index,is,delayed,with,an,interval,that,is,even,longer,the,gc,deletes,cycle,this,makes,sure,that,that,replica,still,remembers,the,delete,operation,and,correctly,ignores,the,stale,index,operation;public,void,test,late,delivery,after,gctriggered,on,replica,throws,exception,thread,pool,terminate,this,thread,pool,10,time,unit,seconds,this,thread,pool,new,test,thread,pool,get,class,get,name,settings,builder,put,thread,pool,settings,put,thread,pool,get,key,0,build,try,replication,group,shards,create,group,1,shards,start,all,final,index,shard,primary,shards,get,primary,final,index,shard,replica,shards,get,replicas,get,0,final,time,value,gc,interval,time,value,time,value,millis,between,1,10,update,gcdelete,cycle,replica,gc,interval,final,bulk,shard,request,index,request,index,on,primary,new,index,request,index,get,name,type,d1,source,xcontent,type,json,primary,final,bulk,shard,request,delete,request,delete,on,primary,new,delete,request,index,get,name,type,d1,primary,delete,on,replica,delete,request,shards,replica,final,long,delete,timestamp,thread,pool,relative,time,in,millis,replica,refresh,test,assert,busy,assert,that,thread,pool,relative,time,in,millis,delete,timestamp,greater,than,gc,interval,millis,get,engine,replica,maybe,prune,deletes,index,on,replica,index,request,shards,replica,shards,assert,all,equal,0
IndexLevelReplicationTests -> public void testLateDeliveryAfterGCTriggeredOnReplica() throws Exception;1535723122;This test ensures the consistency between primary and replica with late and out of order delivery on the replica._An index operation on the primary is followed by a delete operation. The delete operation is delivered first_and processed on the replica but the index is delayed with an interval that is even longer the gc deletes cycle._This makes sure that that replica still remembers the delete operation and correctly ignores the stale index operation.;public void testLateDeliveryAfterGCTriggeredOnReplica() throws Exception {_        ThreadPool.terminate(this.threadPool, 10, TimeUnit.SECONDS)__        this.threadPool = new TestThreadPool(getClass().getName(),_            Settings.builder().put(threadPoolSettings()).put(ThreadPool.ESTIMATED_TIME_INTERVAL_SETTING.getKey(), 0).build())___        try (ReplicationGroup shards = createGroup(1)) {_            shards.startAll()__            final IndexShard primary = shards.getPrimary()__            final IndexShard replica = shards.getReplicas().get(0)__            final TimeValue gcInterval = TimeValue.timeValueMillis(between(1, 10))__            __            updateGCDeleteCycle(replica, gcInterval)__            final BulkShardRequest indexRequest = indexOnPrimary(_                new IndexRequest(index.getName(), "type", "d1").source("{}", XContentType.JSON), primary)__            final BulkShardRequest deleteRequest = deleteOnPrimary(new DeleteRequest(index.getName(), "type", "d1"), primary)__            deleteOnReplica(deleteRequest, shards, replica)_ _            final long deleteTimestamp = threadPool.relativeTimeInMillis()__            replica.refresh("test")__            assertBusy(() ->_                assertThat(threadPool.relativeTimeInMillis() - deleteTimestamp, greaterThan(gcInterval.millis()))_            )__            getEngine(replica).maybePruneDeletes()__            indexOnReplica(indexRequest, shards, replica)_  _            shards.assertAllEqual(0)__        }_    };this,test,ensures,the,consistency,between,primary,and,replica,with,late,and,out,of,order,delivery,on,the,replica,an,index,operation,on,the,primary,is,followed,by,a,delete,operation,the,delete,operation,is,delivered,first,and,processed,on,the,replica,but,the,index,is,delayed,with,an,interval,that,is,even,longer,the,gc,deletes,cycle,this,makes,sure,that,that,replica,still,remembers,the,delete,operation,and,correctly,ignores,the,stale,index,operation;public,void,test,late,delivery,after,gctriggered,on,replica,throws,exception,thread,pool,terminate,this,thread,pool,10,time,unit,seconds,this,thread,pool,new,test,thread,pool,get,class,get,name,settings,builder,put,thread,pool,settings,put,thread,pool,get,key,0,build,try,replication,group,shards,create,group,1,shards,start,all,final,index,shard,primary,shards,get,primary,final,index,shard,replica,shards,get,replicas,get,0,final,time,value,gc,interval,time,value,time,value,millis,between,1,10,update,gcdelete,cycle,replica,gc,interval,final,bulk,shard,request,index,request,index,on,primary,new,index,request,index,get,name,type,d1,source,xcontent,type,json,primary,final,bulk,shard,request,delete,request,delete,on,primary,new,delete,request,index,get,name,type,d1,primary,delete,on,replica,delete,request,shards,replica,final,long,delete,timestamp,thread,pool,relative,time,in,millis,replica,refresh,test,assert,busy,assert,that,thread,pool,relative,time,in,millis,delete,timestamp,greater,than,gc,interval,millis,get,engine,replica,maybe,prune,deletes,index,on,replica,index,request,shards,replica,shards,assert,all,equal,0
IndexLevelReplicationTests -> public void testLateDeliveryAfterGCTriggeredOnReplica() throws Exception;1536314350;This test ensures the consistency between primary and replica with late and out of order delivery on the replica._An index operation on the primary is followed by a delete operation. The delete operation is delivered first_and processed on the replica but the index is delayed with an interval that is even longer the gc deletes cycle._This makes sure that that replica still remembers the delete operation and correctly ignores the stale index operation.;public void testLateDeliveryAfterGCTriggeredOnReplica() throws Exception {_        ThreadPool.terminate(this.threadPool, 10, TimeUnit.SECONDS)__        this.threadPool = new TestThreadPool(getClass().getName(),_            Settings.builder().put(threadPoolSettings()).put(ThreadPool.ESTIMATED_TIME_INTERVAL_SETTING.getKey(), 0).build())___        try (ReplicationGroup shards = createGroup(1)) {_            shards.startAll()__            final IndexShard primary = shards.getPrimary()__            final IndexShard replica = shards.getReplicas().get(0)__            final TimeValue gcInterval = TimeValue.timeValueMillis(between(1, 10))__            __            updateGCDeleteCycle(replica, gcInterval)__            final BulkShardRequest indexRequest = indexOnPrimary(_                new IndexRequest(index.getName(), "type", "d1").source("{}", XContentType.JSON), primary)__            final BulkShardRequest deleteRequest = deleteOnPrimary(new DeleteRequest(index.getName(), "type", "d1"), primary)__            deleteOnReplica(deleteRequest, shards, replica)_ _            final long deleteTimestamp = threadPool.relativeTimeInMillis()__            replica.refresh("test")__            assertBusy(() ->_                assertThat(threadPool.relativeTimeInMillis() - deleteTimestamp, greaterThan(gcInterval.millis()))_            )__            getEngine(replica).maybePruneDeletes()__            indexOnReplica(indexRequest, shards, replica)_  _            shards.assertAllEqual(0)__        }_    };this,test,ensures,the,consistency,between,primary,and,replica,with,late,and,out,of,order,delivery,on,the,replica,an,index,operation,on,the,primary,is,followed,by,a,delete,operation,the,delete,operation,is,delivered,first,and,processed,on,the,replica,but,the,index,is,delayed,with,an,interval,that,is,even,longer,the,gc,deletes,cycle,this,makes,sure,that,that,replica,still,remembers,the,delete,operation,and,correctly,ignores,the,stale,index,operation;public,void,test,late,delivery,after,gctriggered,on,replica,throws,exception,thread,pool,terminate,this,thread,pool,10,time,unit,seconds,this,thread,pool,new,test,thread,pool,get,class,get,name,settings,builder,put,thread,pool,settings,put,thread,pool,get,key,0,build,try,replication,group,shards,create,group,1,shards,start,all,final,index,shard,primary,shards,get,primary,final,index,shard,replica,shards,get,replicas,get,0,final,time,value,gc,interval,time,value,time,value,millis,between,1,10,update,gcdelete,cycle,replica,gc,interval,final,bulk,shard,request,index,request,index,on,primary,new,index,request,index,get,name,type,d1,source,xcontent,type,json,primary,final,bulk,shard,request,delete,request,delete,on,primary,new,delete,request,index,get,name,type,d1,primary,delete,on,replica,delete,request,shards,replica,final,long,delete,timestamp,thread,pool,relative,time,in,millis,replica,refresh,test,assert,busy,assert,that,thread,pool,relative,time,in,millis,delete,timestamp,greater,than,gc,interval,millis,get,engine,replica,maybe,prune,deletes,index,on,replica,index,request,shards,replica,shards,assert,all,equal,0
IndexLevelReplicationTests -> public void testLateDeliveryAfterGCTriggeredOnReplica() throws Exception;1536828374;This test ensures the consistency between primary and replica with late and out of order delivery on the replica._An index operation on the primary is followed by a delete operation. The delete operation is delivered first_and processed on the replica but the index is delayed with an interval that is even longer the gc deletes cycle._This makes sure that that replica still remembers the delete operation and correctly ignores the stale index operation.;public void testLateDeliveryAfterGCTriggeredOnReplica() throws Exception {_        ThreadPool.terminate(this.threadPool, 10, TimeUnit.SECONDS)__        this.threadPool = new TestThreadPool(getClass().getName(),_            Settings.builder().put(threadPoolSettings()).put(ThreadPool.ESTIMATED_TIME_INTERVAL_SETTING.getKey(), 0).build())___        try (ReplicationGroup shards = createGroup(1)) {_            shards.startAll()__            final IndexShard primary = shards.getPrimary()__            final IndexShard replica = shards.getReplicas().get(0)__            final TimeValue gcInterval = TimeValue.timeValueMillis(between(1, 10))__            __            updateGCDeleteCycle(replica, gcInterval)__            final BulkShardRequest indexRequest = indexOnPrimary(_                new IndexRequest(index.getName(), "type", "d1").source("{}", XContentType.JSON), primary)__            final BulkShardRequest deleteRequest = deleteOnPrimary(new DeleteRequest(index.getName(), "type", "d1"), primary)__            deleteOnReplica(deleteRequest, shards, replica)_ _            final long deleteTimestamp = threadPool.relativeTimeInMillis()__            replica.refresh("test")__            assertBusy(() ->_                assertThat(threadPool.relativeTimeInMillis() - deleteTimestamp, greaterThan(gcInterval.millis()))_            )__            getEngine(replica).maybePruneDeletes()__            indexOnReplica(indexRequest, shards, replica)_  _            shards.assertAllEqual(0)__        }_    };this,test,ensures,the,consistency,between,primary,and,replica,with,late,and,out,of,order,delivery,on,the,replica,an,index,operation,on,the,primary,is,followed,by,a,delete,operation,the,delete,operation,is,delivered,first,and,processed,on,the,replica,but,the,index,is,delayed,with,an,interval,that,is,even,longer,the,gc,deletes,cycle,this,makes,sure,that,that,replica,still,remembers,the,delete,operation,and,correctly,ignores,the,stale,index,operation;public,void,test,late,delivery,after,gctriggered,on,replica,throws,exception,thread,pool,terminate,this,thread,pool,10,time,unit,seconds,this,thread,pool,new,test,thread,pool,get,class,get,name,settings,builder,put,thread,pool,settings,put,thread,pool,get,key,0,build,try,replication,group,shards,create,group,1,shards,start,all,final,index,shard,primary,shards,get,primary,final,index,shard,replica,shards,get,replicas,get,0,final,time,value,gc,interval,time,value,time,value,millis,between,1,10,update,gcdelete,cycle,replica,gc,interval,final,bulk,shard,request,index,request,index,on,primary,new,index,request,index,get,name,type,d1,source,xcontent,type,json,primary,final,bulk,shard,request,delete,request,delete,on,primary,new,delete,request,index,get,name,type,d1,primary,delete,on,replica,delete,request,shards,replica,final,long,delete,timestamp,thread,pool,relative,time,in,millis,replica,refresh,test,assert,busy,assert,that,thread,pool,relative,time,in,millis,delete,timestamp,greater,than,gc,interval,millis,get,engine,replica,maybe,prune,deletes,index,on,replica,index,request,shards,replica,shards,assert,all,equal,0
IndexLevelReplicationTests -> public void testLateDeliveryAfterGCTriggeredOnReplica() throws Exception;1537806831;This test ensures the consistency between primary and replica with late and out of order delivery on the replica._An index operation on the primary is followed by a delete operation. The delete operation is delivered first_and processed on the replica but the index is delayed with an interval that is even longer the gc deletes cycle._This makes sure that that replica still remembers the delete operation and correctly ignores the stale index operation.;public void testLateDeliveryAfterGCTriggeredOnReplica() throws Exception {_        ThreadPool.terminate(this.threadPool, 10, TimeUnit.SECONDS)__        this.threadPool = new TestThreadPool(getClass().getName(),_            Settings.builder().put(threadPoolSettings()).put(ThreadPool.ESTIMATED_TIME_INTERVAL_SETTING.getKey(), 0).build())___        try (ReplicationGroup shards = createGroup(1)) {_            shards.startAll()__            final IndexShard primary = shards.getPrimary()__            final IndexShard replica = shards.getReplicas().get(0)__            final TimeValue gcInterval = TimeValue.timeValueMillis(between(1, 10))__            __            updateGCDeleteCycle(replica, gcInterval)__            final BulkShardRequest indexRequest = indexOnPrimary(_                new IndexRequest(index.getName(), "type", "d1").source("{}", XContentType.JSON), primary)__            final BulkShardRequest deleteRequest = deleteOnPrimary(new DeleteRequest(index.getName(), "type", "d1"), primary)__            deleteOnReplica(deleteRequest, shards, replica)_ _            final long deleteTimestamp = threadPool.relativeTimeInMillis()__            replica.refresh("test")__            assertBusy(() ->_                assertThat(threadPool.relativeTimeInMillis() - deleteTimestamp, greaterThan(gcInterval.millis()))_            )__            getEngine(replica).maybePruneDeletes()__            indexOnReplica(indexRequest, shards, replica)_  _            shards.assertAllEqual(0)__        }_    };this,test,ensures,the,consistency,between,primary,and,replica,with,late,and,out,of,order,delivery,on,the,replica,an,index,operation,on,the,primary,is,followed,by,a,delete,operation,the,delete,operation,is,delivered,first,and,processed,on,the,replica,but,the,index,is,delayed,with,an,interval,that,is,even,longer,the,gc,deletes,cycle,this,makes,sure,that,that,replica,still,remembers,the,delete,operation,and,correctly,ignores,the,stale,index,operation;public,void,test,late,delivery,after,gctriggered,on,replica,throws,exception,thread,pool,terminate,this,thread,pool,10,time,unit,seconds,this,thread,pool,new,test,thread,pool,get,class,get,name,settings,builder,put,thread,pool,settings,put,thread,pool,get,key,0,build,try,replication,group,shards,create,group,1,shards,start,all,final,index,shard,primary,shards,get,primary,final,index,shard,replica,shards,get,replicas,get,0,final,time,value,gc,interval,time,value,time,value,millis,between,1,10,update,gcdelete,cycle,replica,gc,interval,final,bulk,shard,request,index,request,index,on,primary,new,index,request,index,get,name,type,d1,source,xcontent,type,json,primary,final,bulk,shard,request,delete,request,delete,on,primary,new,delete,request,index,get,name,type,d1,primary,delete,on,replica,delete,request,shards,replica,final,long,delete,timestamp,thread,pool,relative,time,in,millis,replica,refresh,test,assert,busy,assert,that,thread,pool,relative,time,in,millis,delete,timestamp,greater,than,gc,interval,millis,get,engine,replica,maybe,prune,deletes,index,on,replica,index,request,shards,replica,shards,assert,all,equal,0
IndexLevelReplicationTests -> public void testLateDeliveryAfterGCTriggeredOnReplica() throws Exception;1538067637;This test ensures the consistency between primary and replica with late and out of order delivery on the replica._An index operation on the primary is followed by a delete operation. The delete operation is delivered first_and processed on the replica but the index is delayed with an interval that is even longer the gc deletes cycle._This makes sure that that replica still remembers the delete operation and correctly ignores the stale index operation.;public void testLateDeliveryAfterGCTriggeredOnReplica() throws Exception {_        ThreadPool.terminate(this.threadPool, 10, TimeUnit.SECONDS)__        this.threadPool = new TestThreadPool(getClass().getName(),_            Settings.builder().put(threadPoolSettings()).put(ThreadPool.ESTIMATED_TIME_INTERVAL_SETTING.getKey(), 0).build())___        try (ReplicationGroup shards = createGroup(1)) {_            shards.startAll()__            final IndexShard primary = shards.getPrimary()__            final IndexShard replica = shards.getReplicas().get(0)__            final TimeValue gcInterval = TimeValue.timeValueMillis(between(1, 10))__            __            updateGCDeleteCycle(replica, gcInterval)__            final BulkShardRequest indexRequest = indexOnPrimary(_                new IndexRequest(index.getName(), "type", "d1").source("{}", XContentType.JSON), primary)__            final BulkShardRequest deleteRequest = deleteOnPrimary(new DeleteRequest(index.getName(), "type", "d1"), primary)__            deleteOnReplica(deleteRequest, shards, replica)_ _            final long deleteTimestamp = threadPool.relativeTimeInMillis()__            replica.refresh("test")__            assertBusy(() ->_                assertThat(threadPool.relativeTimeInMillis() - deleteTimestamp, greaterThan(gcInterval.millis()))_            )__            getEngine(replica).maybePruneDeletes()__            indexOnReplica(indexRequest, shards, replica)_  _            shards.assertAllEqual(0)__        }_    };this,test,ensures,the,consistency,between,primary,and,replica,with,late,and,out,of,order,delivery,on,the,replica,an,index,operation,on,the,primary,is,followed,by,a,delete,operation,the,delete,operation,is,delivered,first,and,processed,on,the,replica,but,the,index,is,delayed,with,an,interval,that,is,even,longer,the,gc,deletes,cycle,this,makes,sure,that,that,replica,still,remembers,the,delete,operation,and,correctly,ignores,the,stale,index,operation;public,void,test,late,delivery,after,gctriggered,on,replica,throws,exception,thread,pool,terminate,this,thread,pool,10,time,unit,seconds,this,thread,pool,new,test,thread,pool,get,class,get,name,settings,builder,put,thread,pool,settings,put,thread,pool,get,key,0,build,try,replication,group,shards,create,group,1,shards,start,all,final,index,shard,primary,shards,get,primary,final,index,shard,replica,shards,get,replicas,get,0,final,time,value,gc,interval,time,value,time,value,millis,between,1,10,update,gcdelete,cycle,replica,gc,interval,final,bulk,shard,request,index,request,index,on,primary,new,index,request,index,get,name,type,d1,source,xcontent,type,json,primary,final,bulk,shard,request,delete,request,delete,on,primary,new,delete,request,index,get,name,type,d1,primary,delete,on,replica,delete,request,shards,replica,final,long,delete,timestamp,thread,pool,relative,time,in,millis,replica,refresh,test,assert,busy,assert,that,thread,pool,relative,time,in,millis,delete,timestamp,greater,than,gc,interval,millis,get,engine,replica,maybe,prune,deletes,index,on,replica,index,request,shards,replica,shards,assert,all,equal,0
IndexLevelReplicationTests -> public void testLateDeliveryAfterGCTriggeredOnReplica() throws Exception;1548124510;This test ensures the consistency between primary and replica with late and out of order delivery on the replica._An index operation on the primary is followed by a delete operation. The delete operation is delivered first_and processed on the replica but the index is delayed with an interval that is even longer the gc deletes cycle._This makes sure that that replica still remembers the delete operation and correctly ignores the stale index operation.;public void testLateDeliveryAfterGCTriggeredOnReplica() throws Exception {_        ThreadPool.terminate(this.threadPool, 10, TimeUnit.SECONDS)__        this.threadPool = new TestThreadPool(getClass().getName(),_            Settings.builder().put(threadPoolSettings()).put(ThreadPool.ESTIMATED_TIME_INTERVAL_SETTING.getKey(), 0).build())___        try (ReplicationGroup shards = createGroup(1)) {_            shards.startAll()__            final IndexShard primary = shards.getPrimary()__            final IndexShard replica = shards.getReplicas().get(0)__            final TimeValue gcInterval = TimeValue.timeValueMillis(between(1, 10))__            __            updateGCDeleteCycle(replica, gcInterval)__            final BulkShardRequest indexRequest = indexOnPrimary(_                new IndexRequest(index.getName(), "type", "d1").source("{}", XContentType.JSON), primary)__            final BulkShardRequest deleteRequest = deleteOnPrimary(new DeleteRequest(index.getName(), "type", "d1"), primary)__            deleteOnReplica(deleteRequest, shards, replica)_ _            final long deleteTimestamp = threadPool.relativeTimeInMillis()__            replica.refresh("test")__            assertBusy(() ->_                assertThat(threadPool.relativeTimeInMillis() - deleteTimestamp, greaterThan(gcInterval.millis()))_            )__            getEngine(replica).maybePruneDeletes()__            indexOnReplica(indexRequest, shards, replica)_  _            shards.assertAllEqual(0)__        }_    };this,test,ensures,the,consistency,between,primary,and,replica,with,late,and,out,of,order,delivery,on,the,replica,an,index,operation,on,the,primary,is,followed,by,a,delete,operation,the,delete,operation,is,delivered,first,and,processed,on,the,replica,but,the,index,is,delayed,with,an,interval,that,is,even,longer,the,gc,deletes,cycle,this,makes,sure,that,that,replica,still,remembers,the,delete,operation,and,correctly,ignores,the,stale,index,operation;public,void,test,late,delivery,after,gctriggered,on,replica,throws,exception,thread,pool,terminate,this,thread,pool,10,time,unit,seconds,this,thread,pool,new,test,thread,pool,get,class,get,name,settings,builder,put,thread,pool,settings,put,thread,pool,get,key,0,build,try,replication,group,shards,create,group,1,shards,start,all,final,index,shard,primary,shards,get,primary,final,index,shard,replica,shards,get,replicas,get,0,final,time,value,gc,interval,time,value,time,value,millis,between,1,10,update,gcdelete,cycle,replica,gc,interval,final,bulk,shard,request,index,request,index,on,primary,new,index,request,index,get,name,type,d1,source,xcontent,type,json,primary,final,bulk,shard,request,delete,request,delete,on,primary,new,delete,request,index,get,name,type,d1,primary,delete,on,replica,delete,request,shards,replica,final,long,delete,timestamp,thread,pool,relative,time,in,millis,replica,refresh,test,assert,busy,assert,that,thread,pool,relative,time,in,millis,delete,timestamp,greater,than,gc,interval,millis,get,engine,replica,maybe,prune,deletes,index,on,replica,index,request,shards,replica,shards,assert,all,equal,0
