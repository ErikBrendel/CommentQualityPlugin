# id;timestamp;commentText;codeText;commentWords;codeWords
LegacyGeoShapeFieldMapperTests -> public void testIgnoreZValue() throws IOException;1545079094;Test that accept_z_value parameter correctly parses;public void testIgnoreZValue() throws IOException {_        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type1")_            .startObject("properties").startObject("location")_            .field("type", "geo_shape")_            .field("strategy", "recursive")_            .field(IGNORE_Z_VALUE.getPreferredName(), "true")_            .endObject().endObject()_            .endObject().endObject())___        DocumentMapper defaultMapper = createIndex("test").mapperService().documentMapperParser()_            .parse("type1", new CompressedXContent(mapping))__        Mapper fieldMapper = defaultMapper.mappers().getMapper("location")__        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class))___        boolean ignoreZValue = ((LegacyGeoShapeFieldMapper)fieldMapper).ignoreZValue().value()__        assertThat(ignoreZValue, equalTo(true))___        _        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type1")_            .startObject("properties").startObject("location")_            .field("type", "geo_shape")_            .field("tree", "quadtree")_            .field(IGNORE_Z_VALUE.getPreferredName(), "false")_            .endObject().endObject()_            .endObject().endObject())___        defaultMapper = createIndex("test2").mapperService().documentMapperParser()_            .parse("type1", new CompressedXContent(mapping))__        fieldMapper = defaultMapper.mappers().getMapper("location")__        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class))___        ignoreZValue = ((LegacyGeoShapeFieldMapper)fieldMapper).ignoreZValue().value()__        assertThat(ignoreZValue, equalTo(false))__        assertFieldWarnings("strategy", "tree")__    };test,that,parameter,correctly,parses;public,void,test,ignore,zvalue,throws,ioexception,string,mapping,strings,to,string,xcontent,factory,json,builder,start,object,start,object,type1,start,object,properties,start,object,location,field,type,field,strategy,recursive,field,get,preferred,name,true,end,object,end,object,end,object,end,object,document,mapper,default,mapper,create,index,test,mapper,service,document,mapper,parser,parse,type1,new,compressed,xcontent,mapping,mapper,field,mapper,default,mapper,mappers,get,mapper,location,assert,that,field,mapper,instance,of,legacy,geo,shape,field,mapper,class,boolean,ignore,zvalue,legacy,geo,shape,field,mapper,field,mapper,ignore,zvalue,value,assert,that,ignore,zvalue,equal,to,true,mapping,strings,to,string,xcontent,factory,json,builder,start,object,start,object,type1,start,object,properties,start,object,location,field,type,field,tree,quadtree,field,get,preferred,name,false,end,object,end,object,end,object,end,object,default,mapper,create,index,test2,mapper,service,document,mapper,parser,parse,type1,new,compressed,xcontent,mapping,field,mapper,default,mapper,mappers,get,mapper,location,assert,that,field,mapper,instance,of,legacy,geo,shape,field,mapper,class,ignore,zvalue,legacy,geo,shape,field,mapper,field,mapper,ignore,zvalue,value,assert,that,ignore,zvalue,equal,to,false,assert,field,warnings,strategy,tree
LegacyGeoShapeFieldMapperTests -> public void testIgnoreZValue() throws IOException;1545148496;Test that accept_z_value parameter correctly parses;public void testIgnoreZValue() throws IOException {_        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type1")_            .startObject("properties").startObject("location")_            .field("type", "geo_shape")_            .field("strategy", "recursive")_            .field(IGNORE_Z_VALUE.getPreferredName(), "true")_            .endObject().endObject()_            .endObject().endObject())___        DocumentMapper defaultMapper = createIndex("test").mapperService().documentMapperParser()_            .parse("type1", new CompressedXContent(mapping))__        Mapper fieldMapper = defaultMapper.mappers().getMapper("location")__        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class))___        boolean ignoreZValue = ((LegacyGeoShapeFieldMapper)fieldMapper).ignoreZValue().value()__        assertThat(ignoreZValue, equalTo(true))___        _        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type1")_            .startObject("properties").startObject("location")_            .field("type", "geo_shape")_            .field("tree", "quadtree")_            .field(IGNORE_Z_VALUE.getPreferredName(), "false")_            .endObject().endObject()_            .endObject().endObject())___        defaultMapper = createIndex("test2").mapperService().documentMapperParser()_            .parse("type1", new CompressedXContent(mapping))__        fieldMapper = defaultMapper.mappers().getMapper("location")__        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class))___        ignoreZValue = ((LegacyGeoShapeFieldMapper)fieldMapper).ignoreZValue().value()__        assertThat(ignoreZValue, equalTo(false))__        assertFieldWarnings("strategy", "tree")__    };test,that,parameter,correctly,parses;public,void,test,ignore,zvalue,throws,ioexception,string,mapping,strings,to,string,xcontent,factory,json,builder,start,object,start,object,type1,start,object,properties,start,object,location,field,type,field,strategy,recursive,field,get,preferred,name,true,end,object,end,object,end,object,end,object,document,mapper,default,mapper,create,index,test,mapper,service,document,mapper,parser,parse,type1,new,compressed,xcontent,mapping,mapper,field,mapper,default,mapper,mappers,get,mapper,location,assert,that,field,mapper,instance,of,legacy,geo,shape,field,mapper,class,boolean,ignore,zvalue,legacy,geo,shape,field,mapper,field,mapper,ignore,zvalue,value,assert,that,ignore,zvalue,equal,to,true,mapping,strings,to,string,xcontent,factory,json,builder,start,object,start,object,type1,start,object,properties,start,object,location,field,type,field,tree,quadtree,field,get,preferred,name,false,end,object,end,object,end,object,end,object,default,mapper,create,index,test2,mapper,service,document,mapper,parser,parse,type1,new,compressed,xcontent,mapping,field,mapper,default,mapper,mappers,get,mapper,location,assert,that,field,mapper,instance,of,legacy,geo,shape,field,mapper,class,ignore,zvalue,legacy,geo,shape,field,mapper,field,mapper,ignore,zvalue,value,assert,that,ignore,zvalue,equal,to,false,assert,field,warnings,strategy,tree
LegacyGeoShapeFieldMapperTests -> public void testOrientationParsing() throws IOException;1545079094;Test that orientation parameter correctly parses;public void testOrientationParsing() throws IOException {_        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type1")_                .startObject("properties").startObject("location")_                .field("type", "geo_shape")_                .field("tree", "quadtree")_                .field("orientation", "left")_                .endObject().endObject()_                .endObject().endObject())___        DocumentMapper defaultMapper = createIndex("test").mapperService().documentMapperParser()_            .parse("type1", new CompressedXContent(mapping))__        Mapper fieldMapper = defaultMapper.mappers().getMapper("location")__        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class))___        ShapeBuilder.Orientation orientation = ((LegacyGeoShapeFieldMapper)fieldMapper).fieldType().orientation()__        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CLOCKWISE))__        assertThat(orientation, equalTo(ShapeBuilder.Orientation.LEFT))__        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CW))___        _        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type1")_                .startObject("properties").startObject("location")_                .field("type", "geo_shape")_                .field("tree", "quadtree")_                .field("orientation", "right")_                .endObject().endObject()_                .endObject().endObject())___        defaultMapper = createIndex("test2").mapperService().documentMapperParser()_            .parse("type1", new CompressedXContent(mapping))__        fieldMapper = defaultMapper.mappers().getMapper("location")__        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class))___        orientation = ((LegacyGeoShapeFieldMapper)fieldMapper).fieldType().orientation()__        assertThat(orientation, equalTo(ShapeBuilder.Orientation.COUNTER_CLOCKWISE))__        assertThat(orientation, equalTo(ShapeBuilder.Orientation.RIGHT))__        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CCW))__        assertFieldWarnings("tree")__    };test,that,orientation,parameter,correctly,parses;public,void,test,orientation,parsing,throws,ioexception,string,mapping,strings,to,string,xcontent,factory,json,builder,start,object,start,object,type1,start,object,properties,start,object,location,field,type,field,tree,quadtree,field,orientation,left,end,object,end,object,end,object,end,object,document,mapper,default,mapper,create,index,test,mapper,service,document,mapper,parser,parse,type1,new,compressed,xcontent,mapping,mapper,field,mapper,default,mapper,mappers,get,mapper,location,assert,that,field,mapper,instance,of,legacy,geo,shape,field,mapper,class,shape,builder,orientation,orientation,legacy,geo,shape,field,mapper,field,mapper,field,type,orientation,assert,that,orientation,equal,to,shape,builder,orientation,clockwise,assert,that,orientation,equal,to,shape,builder,orientation,left,assert,that,orientation,equal,to,shape,builder,orientation,cw,mapping,strings,to,string,xcontent,factory,json,builder,start,object,start,object,type1,start,object,properties,start,object,location,field,type,field,tree,quadtree,field,orientation,right,end,object,end,object,end,object,end,object,default,mapper,create,index,test2,mapper,service,document,mapper,parser,parse,type1,new,compressed,xcontent,mapping,field,mapper,default,mapper,mappers,get,mapper,location,assert,that,field,mapper,instance,of,legacy,geo,shape,field,mapper,class,orientation,legacy,geo,shape,field,mapper,field,mapper,field,type,orientation,assert,that,orientation,equal,to,shape,builder,orientation,assert,that,orientation,equal,to,shape,builder,orientation,right,assert,that,orientation,equal,to,shape,builder,orientation,ccw,assert,field,warnings,tree
LegacyGeoShapeFieldMapperTests -> public void testOrientationParsing() throws IOException;1545148496;Test that orientation parameter correctly parses;public void testOrientationParsing() throws IOException {_        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type1")_                .startObject("properties").startObject("location")_                .field("type", "geo_shape")_                .field("tree", "quadtree")_                .field("orientation", "left")_                .endObject().endObject()_                .endObject().endObject())___        DocumentMapper defaultMapper = createIndex("test").mapperService().documentMapperParser()_            .parse("type1", new CompressedXContent(mapping))__        Mapper fieldMapper = defaultMapper.mappers().getMapper("location")__        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class))___        ShapeBuilder.Orientation orientation = ((LegacyGeoShapeFieldMapper)fieldMapper).fieldType().orientation()__        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CLOCKWISE))__        assertThat(orientation, equalTo(ShapeBuilder.Orientation.LEFT))__        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CW))___        _        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type1")_                .startObject("properties").startObject("location")_                .field("type", "geo_shape")_                .field("tree", "quadtree")_                .field("orientation", "right")_                .endObject().endObject()_                .endObject().endObject())___        defaultMapper = createIndex("test2").mapperService().documentMapperParser()_            .parse("type1", new CompressedXContent(mapping))__        fieldMapper = defaultMapper.mappers().getMapper("location")__        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class))___        orientation = ((LegacyGeoShapeFieldMapper)fieldMapper).fieldType().orientation()__        assertThat(orientation, equalTo(ShapeBuilder.Orientation.COUNTER_CLOCKWISE))__        assertThat(orientation, equalTo(ShapeBuilder.Orientation.RIGHT))__        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CCW))__        assertFieldWarnings("tree")__    };test,that,orientation,parameter,correctly,parses;public,void,test,orientation,parsing,throws,ioexception,string,mapping,strings,to,string,xcontent,factory,json,builder,start,object,start,object,type1,start,object,properties,start,object,location,field,type,field,tree,quadtree,field,orientation,left,end,object,end,object,end,object,end,object,document,mapper,default,mapper,create,index,test,mapper,service,document,mapper,parser,parse,type1,new,compressed,xcontent,mapping,mapper,field,mapper,default,mapper,mappers,get,mapper,location,assert,that,field,mapper,instance,of,legacy,geo,shape,field,mapper,class,shape,builder,orientation,orientation,legacy,geo,shape,field,mapper,field,mapper,field,type,orientation,assert,that,orientation,equal,to,shape,builder,orientation,clockwise,assert,that,orientation,equal,to,shape,builder,orientation,left,assert,that,orientation,equal,to,shape,builder,orientation,cw,mapping,strings,to,string,xcontent,factory,json,builder,start,object,start,object,type1,start,object,properties,start,object,location,field,type,field,tree,quadtree,field,orientation,right,end,object,end,object,end,object,end,object,default,mapper,create,index,test2,mapper,service,document,mapper,parser,parse,type1,new,compressed,xcontent,mapping,field,mapper,default,mapper,mappers,get,mapper,location,assert,that,field,mapper,instance,of,legacy,geo,shape,field,mapper,class,orientation,legacy,geo,shape,field,mapper,field,mapper,field,type,orientation,assert,that,orientation,equal,to,shape,builder,orientation,assert,that,orientation,equal,to,shape,builder,orientation,right,assert,that,orientation,equal,to,shape,builder,orientation,ccw,assert,field,warnings,tree
LegacyGeoShapeFieldMapperTests -> public void testIgnoreMalformedParsing() throws IOException;1545079094;Test that ignore_malformed parameter correctly parses;public void testIgnoreMalformedParsing() throws IOException {_        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type1")_            .startObject("properties").startObject("location")_            .field("type", "geo_shape")_            .field("tree", "quadtree")_            .field("ignore_malformed", "true")_            .endObject().endObject()_            .endObject().endObject())___        DocumentMapper defaultMapper = createIndex("test").mapperService().documentMapperParser()_            .parse("type1", new CompressedXContent(mapping))__        Mapper fieldMapper = defaultMapper.mappers().getMapper("location")__        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class))___        Explicit<Boolean> ignoreMalformed = ((LegacyGeoShapeFieldMapper)fieldMapper).ignoreMalformed()__        assertThat(ignoreMalformed.value(), equalTo(true))___        _        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type1")_            .startObject("properties").startObject("location")_            .field("type", "geo_shape")_            .field("tree", "quadtree")_            .field("ignore_malformed", "false")_            .endObject().endObject()_            .endObject().endObject())___        defaultMapper = createIndex("test2").mapperService().documentMapperParser()_            .parse("type1", new CompressedXContent(mapping))__        fieldMapper = defaultMapper.mappers().getMapper("location")__        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class))___        ignoreMalformed = ((LegacyGeoShapeFieldMapper)fieldMapper).ignoreMalformed()__        assertThat(ignoreMalformed.explicit(), equalTo(true))__        assertThat(ignoreMalformed.value(), equalTo(false))__        assertFieldWarnings("tree")__    };test,that,parameter,correctly,parses;public,void,test,ignore,malformed,parsing,throws,ioexception,string,mapping,strings,to,string,xcontent,factory,json,builder,start,object,start,object,type1,start,object,properties,start,object,location,field,type,field,tree,quadtree,field,true,end,object,end,object,end,object,end,object,document,mapper,default,mapper,create,index,test,mapper,service,document,mapper,parser,parse,type1,new,compressed,xcontent,mapping,mapper,field,mapper,default,mapper,mappers,get,mapper,location,assert,that,field,mapper,instance,of,legacy,geo,shape,field,mapper,class,explicit,boolean,ignore,malformed,legacy,geo,shape,field,mapper,field,mapper,ignore,malformed,assert,that,ignore,malformed,value,equal,to,true,mapping,strings,to,string,xcontent,factory,json,builder,start,object,start,object,type1,start,object,properties,start,object,location,field,type,field,tree,quadtree,field,false,end,object,end,object,end,object,end,object,default,mapper,create,index,test2,mapper,service,document,mapper,parser,parse,type1,new,compressed,xcontent,mapping,field,mapper,default,mapper,mappers,get,mapper,location,assert,that,field,mapper,instance,of,legacy,geo,shape,field,mapper,class,ignore,malformed,legacy,geo,shape,field,mapper,field,mapper,ignore,malformed,assert,that,ignore,malformed,explicit,equal,to,true,assert,that,ignore,malformed,value,equal,to,false,assert,field,warnings,tree
LegacyGeoShapeFieldMapperTests -> public void testIgnoreMalformedParsing() throws IOException;1545148496;Test that ignore_malformed parameter correctly parses;public void testIgnoreMalformedParsing() throws IOException {_        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type1")_            .startObject("properties").startObject("location")_            .field("type", "geo_shape")_            .field("tree", "quadtree")_            .field("ignore_malformed", "true")_            .endObject().endObject()_            .endObject().endObject())___        DocumentMapper defaultMapper = createIndex("test").mapperService().documentMapperParser()_            .parse("type1", new CompressedXContent(mapping))__        Mapper fieldMapper = defaultMapper.mappers().getMapper("location")__        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class))___        Explicit<Boolean> ignoreMalformed = ((LegacyGeoShapeFieldMapper)fieldMapper).ignoreMalformed()__        assertThat(ignoreMalformed.value(), equalTo(true))___        _        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type1")_            .startObject("properties").startObject("location")_            .field("type", "geo_shape")_            .field("tree", "quadtree")_            .field("ignore_malformed", "false")_            .endObject().endObject()_            .endObject().endObject())___        defaultMapper = createIndex("test2").mapperService().documentMapperParser()_            .parse("type1", new CompressedXContent(mapping))__        fieldMapper = defaultMapper.mappers().getMapper("location")__        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class))___        ignoreMalformed = ((LegacyGeoShapeFieldMapper)fieldMapper).ignoreMalformed()__        assertThat(ignoreMalformed.explicit(), equalTo(true))__        assertThat(ignoreMalformed.value(), equalTo(false))__        assertFieldWarnings("tree")__    };test,that,parameter,correctly,parses;public,void,test,ignore,malformed,parsing,throws,ioexception,string,mapping,strings,to,string,xcontent,factory,json,builder,start,object,start,object,type1,start,object,properties,start,object,location,field,type,field,tree,quadtree,field,true,end,object,end,object,end,object,end,object,document,mapper,default,mapper,create,index,test,mapper,service,document,mapper,parser,parse,type1,new,compressed,xcontent,mapping,mapper,field,mapper,default,mapper,mappers,get,mapper,location,assert,that,field,mapper,instance,of,legacy,geo,shape,field,mapper,class,explicit,boolean,ignore,malformed,legacy,geo,shape,field,mapper,field,mapper,ignore,malformed,assert,that,ignore,malformed,value,equal,to,true,mapping,strings,to,string,xcontent,factory,json,builder,start,object,start,object,type1,start,object,properties,start,object,location,field,type,field,tree,quadtree,field,false,end,object,end,object,end,object,end,object,default,mapper,create,index,test2,mapper,service,document,mapper,parser,parse,type1,new,compressed,xcontent,mapping,field,mapper,default,mapper,mappers,get,mapper,location,assert,that,field,mapper,instance,of,legacy,geo,shape,field,mapper,class,ignore,malformed,legacy,geo,shape,field,mapper,field,mapper,ignore,malformed,assert,that,ignore,malformed,explicit,equal,to,true,assert,that,ignore,malformed,value,equal,to,false,assert,field,warnings,tree
LegacyGeoShapeFieldMapperTests -> public void testCoerceParsing() throws IOException;1545079094;Test that coerce parameter correctly parses;public void testCoerceParsing() throws IOException {_        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type1")_                .startObject("properties").startObject("location")_                .field("type", "geo_shape")_                .field("tree", "quadtree")_                .field("coerce", "true")_                .endObject().endObject()_                .endObject().endObject())___        DocumentMapper defaultMapper = createIndex("test").mapperService().documentMapperParser()_            .parse("type1", new CompressedXContent(mapping))__        Mapper fieldMapper = defaultMapper.mappers().getMapper("location")__        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class))___        boolean coerce = ((LegacyGeoShapeFieldMapper)fieldMapper).coerce().value()__        assertThat(coerce, equalTo(true))___        _        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type1")_                .startObject("properties").startObject("location")_                .field("type", "geo_shape")_                .field("tree", "quadtree")_                .field("coerce", "false")_                .endObject().endObject()_                .endObject().endObject())___        defaultMapper = createIndex("test2").mapperService().documentMapperParser()_            .parse("type1", new CompressedXContent(mapping))__        fieldMapper = defaultMapper.mappers().getMapper("location")__        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class))___        coerce = ((LegacyGeoShapeFieldMapper)fieldMapper).coerce().value()__        assertThat(coerce, equalTo(false))__        assertFieldWarnings("tree")__    };test,that,coerce,parameter,correctly,parses;public,void,test,coerce,parsing,throws,ioexception,string,mapping,strings,to,string,xcontent,factory,json,builder,start,object,start,object,type1,start,object,properties,start,object,location,field,type,field,tree,quadtree,field,coerce,true,end,object,end,object,end,object,end,object,document,mapper,default,mapper,create,index,test,mapper,service,document,mapper,parser,parse,type1,new,compressed,xcontent,mapping,mapper,field,mapper,default,mapper,mappers,get,mapper,location,assert,that,field,mapper,instance,of,legacy,geo,shape,field,mapper,class,boolean,coerce,legacy,geo,shape,field,mapper,field,mapper,coerce,value,assert,that,coerce,equal,to,true,mapping,strings,to,string,xcontent,factory,json,builder,start,object,start,object,type1,start,object,properties,start,object,location,field,type,field,tree,quadtree,field,coerce,false,end,object,end,object,end,object,end,object,default,mapper,create,index,test2,mapper,service,document,mapper,parser,parse,type1,new,compressed,xcontent,mapping,field,mapper,default,mapper,mappers,get,mapper,location,assert,that,field,mapper,instance,of,legacy,geo,shape,field,mapper,class,coerce,legacy,geo,shape,field,mapper,field,mapper,coerce,value,assert,that,coerce,equal,to,false,assert,field,warnings,tree
LegacyGeoShapeFieldMapperTests -> public void testCoerceParsing() throws IOException;1545148496;Test that coerce parameter correctly parses;public void testCoerceParsing() throws IOException {_        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type1")_                .startObject("properties").startObject("location")_                .field("type", "geo_shape")_                .field("tree", "quadtree")_                .field("coerce", "true")_                .endObject().endObject()_                .endObject().endObject())___        DocumentMapper defaultMapper = createIndex("test").mapperService().documentMapperParser()_            .parse("type1", new CompressedXContent(mapping))__        Mapper fieldMapper = defaultMapper.mappers().getMapper("location")__        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class))___        boolean coerce = ((LegacyGeoShapeFieldMapper)fieldMapper).coerce().value()__        assertThat(coerce, equalTo(true))___        _        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type1")_                .startObject("properties").startObject("location")_                .field("type", "geo_shape")_                .field("tree", "quadtree")_                .field("coerce", "false")_                .endObject().endObject()_                .endObject().endObject())___        defaultMapper = createIndex("test2").mapperService().documentMapperParser()_            .parse("type1", new CompressedXContent(mapping))__        fieldMapper = defaultMapper.mappers().getMapper("location")__        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class))___        coerce = ((LegacyGeoShapeFieldMapper)fieldMapper).coerce().value()__        assertThat(coerce, equalTo(false))__        assertFieldWarnings("tree")__    };test,that,coerce,parameter,correctly,parses;public,void,test,coerce,parsing,throws,ioexception,string,mapping,strings,to,string,xcontent,factory,json,builder,start,object,start,object,type1,start,object,properties,start,object,location,field,type,field,tree,quadtree,field,coerce,true,end,object,end,object,end,object,end,object,document,mapper,default,mapper,create,index,test,mapper,service,document,mapper,parser,parse,type1,new,compressed,xcontent,mapping,mapper,field,mapper,default,mapper,mappers,get,mapper,location,assert,that,field,mapper,instance,of,legacy,geo,shape,field,mapper,class,boolean,coerce,legacy,geo,shape,field,mapper,field,mapper,coerce,value,assert,that,coerce,equal,to,true,mapping,strings,to,string,xcontent,factory,json,builder,start,object,start,object,type1,start,object,properties,start,object,location,field,type,field,tree,quadtree,field,coerce,false,end,object,end,object,end,object,end,object,default,mapper,create,index,test2,mapper,service,document,mapper,parser,parse,type1,new,compressed,xcontent,mapping,field,mapper,default,mapper,mappers,get,mapper,location,assert,that,field,mapper,instance,of,legacy,geo,shape,field,mapper,class,coerce,legacy,geo,shape,field,mapper,field,mapper,coerce,value,assert,that,coerce,equal,to,false,assert,field,warnings,tree
