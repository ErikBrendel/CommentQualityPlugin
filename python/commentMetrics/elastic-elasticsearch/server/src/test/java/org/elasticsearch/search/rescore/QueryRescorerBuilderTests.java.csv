# id;timestamp;commentText;codeText;commentWords;codeWords
QueryRescorerBuilderTests -> public void testEqualsAndHashcode() throws IOException;1524684173;Test equality and hashCode properties;public void testEqualsAndHashcode() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            checkEqualsAndHashCode(randomRescoreBuilder(), this::copy, QueryRescorerBuilderTests::mutate)__        }_    };test,equality,and,hash,code,properties;public,void,test,equals,and,hashcode,throws,ioexception,for,int,runs,0,runs,runs,check,equals,and,hash,code,random,rescore,builder,this,copy,query,rescorer,builder,tests,mutate
QueryRescorerBuilderTests -> public void testEqualsAndHashcode() throws IOException;1528167589;Test equality and hashCode properties;public void testEqualsAndHashcode() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            checkEqualsAndHashCode(randomRescoreBuilder(), this::copy, QueryRescorerBuilderTests::mutate)__        }_    };test,equality,and,hash,code,properties;public,void,test,equals,and,hashcode,throws,ioexception,for,int,runs,0,runs,runs,check,equals,and,hash,code,random,rescore,builder,this,copy,query,rescorer,builder,tests,mutate
QueryRescorerBuilderTests -> public void testEqualsAndHashcode() throws IOException;1529916084;Test equality and hashCode properties;public void testEqualsAndHashcode() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            checkEqualsAndHashCode(randomRescoreBuilder(), this::copy, QueryRescorerBuilderTests::mutate)__        }_    };test,equality,and,hash,code,properties;public,void,test,equals,and,hashcode,throws,ioexception,for,int,runs,0,runs,runs,check,equals,and,hash,code,random,rescore,builder,this,copy,query,rescorer,builder,tests,mutate
QueryRescorerBuilderTests -> public void testEqualsAndHashcode() throws IOException;1538067637;Test equality and hashCode properties;public void testEqualsAndHashcode() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            checkEqualsAndHashCode(randomRescoreBuilder(), this::copy, QueryRescorerBuilderTests::mutate)__        }_    };test,equality,and,hash,code,properties;public,void,test,equals,and,hashcode,throws,ioexception,for,int,runs,0,runs,runs,check,equals,and,hash,code,random,rescore,builder,this,copy,query,rescorer,builder,tests,mutate
QueryRescorerBuilderTests -> public void testEqualsAndHashcode() throws IOException;1545252138;Test equality and hashCode properties;public void testEqualsAndHashcode() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            checkEqualsAndHashCode(randomRescoreBuilder(), this::copy, QueryRescorerBuilderTests::mutate)__        }_    };test,equality,and,hash,code,properties;public,void,test,equals,and,hashcode,throws,ioexception,for,int,runs,0,runs,runs,check,equals,and,hash,code,random,rescore,builder,this,copy,query,rescorer,builder,tests,mutate
QueryRescorerBuilderTests -> public static QueryRescorerBuilder randomRescoreBuilder();1524684173;create random shape that is put under test;public static QueryRescorerBuilder randomRescoreBuilder() {_        QueryBuilder queryBuilder = new MatchAllQueryBuilder().boost(randomFloat())_                .queryName(randomAlphaOfLength(20))__        org.elasticsearch.search.rescore.QueryRescorerBuilder rescorer = new_                org.elasticsearch.search.rescore.QueryRescorerBuilder(queryBuilder)__        if (randomBoolean()) {_            rescorer.setQueryWeight(randomFloat())__        }_        if (randomBoolean()) {_            rescorer.setRescoreQueryWeight(randomFloat())__        }_        if (randomBoolean()) {_            rescorer.setScoreMode(randomFrom(QueryRescoreMode.values()))__        }_        if (randomBoolean()) {_            rescorer.windowSize(randomIntBetween(0, 100))__        }_        return rescorer__    };create,random,shape,that,is,put,under,test;public,static,query,rescorer,builder,random,rescore,builder,query,builder,query,builder,new,match,all,query,builder,boost,random,float,query,name,random,alpha,of,length,20,org,elasticsearch,search,rescore,query,rescorer,builder,rescorer,new,org,elasticsearch,search,rescore,query,rescorer,builder,query,builder,if,random,boolean,rescorer,set,query,weight,random,float,if,random,boolean,rescorer,set,rescore,query,weight,random,float,if,random,boolean,rescorer,set,score,mode,random,from,query,rescore,mode,values,if,random,boolean,rescorer,window,size,random,int,between,0,100,return,rescorer
QueryRescorerBuilderTests -> public static QueryRescorerBuilder randomRescoreBuilder();1528167589;create random shape that is put under test;public static QueryRescorerBuilder randomRescoreBuilder() {_        QueryBuilder queryBuilder = new MatchAllQueryBuilder().boost(randomFloat())_                .queryName(randomAlphaOfLength(20))__        org.elasticsearch.search.rescore.QueryRescorerBuilder rescorer = new_                org.elasticsearch.search.rescore.QueryRescorerBuilder(queryBuilder)__        if (randomBoolean()) {_            rescorer.setQueryWeight(randomFloat())__        }_        if (randomBoolean()) {_            rescorer.setRescoreQueryWeight(randomFloat())__        }_        if (randomBoolean()) {_            rescorer.setScoreMode(randomFrom(QueryRescoreMode.values()))__        }_        if (randomBoolean()) {_            rescorer.windowSize(randomIntBetween(0, 100))__        }_        return rescorer__    };create,random,shape,that,is,put,under,test;public,static,query,rescorer,builder,random,rescore,builder,query,builder,query,builder,new,match,all,query,builder,boost,random,float,query,name,random,alpha,of,length,20,org,elasticsearch,search,rescore,query,rescorer,builder,rescorer,new,org,elasticsearch,search,rescore,query,rescorer,builder,query,builder,if,random,boolean,rescorer,set,query,weight,random,float,if,random,boolean,rescorer,set,rescore,query,weight,random,float,if,random,boolean,rescorer,set,score,mode,random,from,query,rescore,mode,values,if,random,boolean,rescorer,window,size,random,int,between,0,100,return,rescorer
QueryRescorerBuilderTests -> public static QueryRescorerBuilder randomRescoreBuilder();1529916084;create random shape that is put under test;public static QueryRescorerBuilder randomRescoreBuilder() {_        QueryBuilder queryBuilder = new MatchAllQueryBuilder().boost(randomFloat())_                .queryName(randomAlphaOfLength(20))__        org.elasticsearch.search.rescore.QueryRescorerBuilder rescorer = new_                org.elasticsearch.search.rescore.QueryRescorerBuilder(queryBuilder)__        if (randomBoolean()) {_            rescorer.setQueryWeight(randomFloat())__        }_        if (randomBoolean()) {_            rescorer.setRescoreQueryWeight(randomFloat())__        }_        if (randomBoolean()) {_            rescorer.setScoreMode(randomFrom(QueryRescoreMode.values()))__        }_        if (randomBoolean()) {_            rescorer.windowSize(randomIntBetween(0, 100))__        }_        return rescorer__    };create,random,shape,that,is,put,under,test;public,static,query,rescorer,builder,random,rescore,builder,query,builder,query,builder,new,match,all,query,builder,boost,random,float,query,name,random,alpha,of,length,20,org,elasticsearch,search,rescore,query,rescorer,builder,rescorer,new,org,elasticsearch,search,rescore,query,rescorer,builder,query,builder,if,random,boolean,rescorer,set,query,weight,random,float,if,random,boolean,rescorer,set,rescore,query,weight,random,float,if,random,boolean,rescorer,set,score,mode,random,from,query,rescore,mode,values,if,random,boolean,rescorer,window,size,random,int,between,0,100,return,rescorer
QueryRescorerBuilderTests -> public static QueryRescorerBuilder randomRescoreBuilder();1538067637;create random shape that is put under test;public static QueryRescorerBuilder randomRescoreBuilder() {_        QueryBuilder queryBuilder = new MatchAllQueryBuilder().boost(randomFloat())_                .queryName(randomAlphaOfLength(20))__        org.elasticsearch.search.rescore.QueryRescorerBuilder rescorer = new_                org.elasticsearch.search.rescore.QueryRescorerBuilder(queryBuilder)__        if (randomBoolean()) {_            rescorer.setQueryWeight(randomFloat())__        }_        if (randomBoolean()) {_            rescorer.setRescoreQueryWeight(randomFloat())__        }_        if (randomBoolean()) {_            rescorer.setScoreMode(randomFrom(QueryRescoreMode.values()))__        }_        if (randomBoolean()) {_            rescorer.windowSize(randomIntBetween(0, 100))__        }_        return rescorer__    };create,random,shape,that,is,put,under,test;public,static,query,rescorer,builder,random,rescore,builder,query,builder,query,builder,new,match,all,query,builder,boost,random,float,query,name,random,alpha,of,length,20,org,elasticsearch,search,rescore,query,rescorer,builder,rescorer,new,org,elasticsearch,search,rescore,query,rescorer,builder,query,builder,if,random,boolean,rescorer,set,query,weight,random,float,if,random,boolean,rescorer,set,rescore,query,weight,random,float,if,random,boolean,rescorer,set,score,mode,random,from,query,rescore,mode,values,if,random,boolean,rescorer,window,size,random,int,between,0,100,return,rescorer
QueryRescorerBuilderTests -> public static QueryRescorerBuilder randomRescoreBuilder();1545252138;create random shape that is put under test;public static QueryRescorerBuilder randomRescoreBuilder() {_        QueryBuilder queryBuilder = new MatchAllQueryBuilder().boost(randomFloat())_                .queryName(randomAlphaOfLength(20))__        org.elasticsearch.search.rescore.QueryRescorerBuilder rescorer = new_                org.elasticsearch.search.rescore.QueryRescorerBuilder(queryBuilder)__        if (randomBoolean()) {_            rescorer.setQueryWeight(randomFloat())__        }_        if (randomBoolean()) {_            rescorer.setRescoreQueryWeight(randomFloat())__        }_        if (randomBoolean()) {_            rescorer.setScoreMode(randomFrom(QueryRescoreMode.values()))__        }_        if (randomBoolean()) {_            rescorer.windowSize(randomIntBetween(0, 100))__        }_        return rescorer__    };create,random,shape,that,is,put,under,test;public,static,query,rescorer,builder,random,rescore,builder,query,builder,query,builder,new,match,all,query,builder,boost,random,float,query,name,random,alpha,of,length,20,org,elasticsearch,search,rescore,query,rescorer,builder,rescorer,new,org,elasticsearch,search,rescore,query,rescorer,builder,query,builder,if,random,boolean,rescorer,set,query,weight,random,float,if,random,boolean,rescorer,set,rescore,query,weight,random,float,if,random,boolean,rescorer,set,score,mode,random,from,query,rescore,mode,values,if,random,boolean,rescorer,window,size,random,int,between,0,100,return,rescorer
QueryRescorerBuilderTests -> public void testSerialization() throws IOException;1524684173;Test serialization and deserialization of the rescore builder;public void testSerialization() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            RescorerBuilder<?> original = randomRescoreBuilder()__            RescorerBuilder<?> deserialized = copy(original)__            assertEquals(deserialized, original)__            assertEquals(deserialized.hashCode(), original.hashCode())__            assertNotSame(deserialized, original)__        }_    };test,serialization,and,deserialization,of,the,rescore,builder;public,void,test,serialization,throws,ioexception,for,int,runs,0,runs,runs,rescorer,builder,original,random,rescore,builder,rescorer,builder,deserialized,copy,original,assert,equals,deserialized,original,assert,equals,deserialized,hash,code,original,hash,code,assert,not,same,deserialized,original
QueryRescorerBuilderTests -> public void testSerialization() throws IOException;1528167589;Test serialization and deserialization of the rescore builder;public void testSerialization() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            RescorerBuilder<?> original = randomRescoreBuilder()__            RescorerBuilder<?> deserialized = copy(original)__            assertEquals(deserialized, original)__            assertEquals(deserialized.hashCode(), original.hashCode())__            assertNotSame(deserialized, original)__        }_    };test,serialization,and,deserialization,of,the,rescore,builder;public,void,test,serialization,throws,ioexception,for,int,runs,0,runs,runs,rescorer,builder,original,random,rescore,builder,rescorer,builder,deserialized,copy,original,assert,equals,deserialized,original,assert,equals,deserialized,hash,code,original,hash,code,assert,not,same,deserialized,original
QueryRescorerBuilderTests -> public void testSerialization() throws IOException;1529916084;Test serialization and deserialization of the rescore builder;public void testSerialization() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            RescorerBuilder<?> original = randomRescoreBuilder()__            RescorerBuilder<?> deserialized = copy(original)__            assertEquals(deserialized, original)__            assertEquals(deserialized.hashCode(), original.hashCode())__            assertNotSame(deserialized, original)__        }_    };test,serialization,and,deserialization,of,the,rescore,builder;public,void,test,serialization,throws,ioexception,for,int,runs,0,runs,runs,rescorer,builder,original,random,rescore,builder,rescorer,builder,deserialized,copy,original,assert,equals,deserialized,original,assert,equals,deserialized,hash,code,original,hash,code,assert,not,same,deserialized,original
QueryRescorerBuilderTests -> public void testSerialization() throws IOException;1538067637;Test serialization and deserialization of the rescore builder;public void testSerialization() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            RescorerBuilder<?> original = randomRescoreBuilder()__            RescorerBuilder<?> deserialized = copy(original)__            assertEquals(deserialized, original)__            assertEquals(deserialized.hashCode(), original.hashCode())__            assertNotSame(deserialized, original)__        }_    };test,serialization,and,deserialization,of,the,rescore,builder;public,void,test,serialization,throws,ioexception,for,int,runs,0,runs,runs,rescorer,builder,original,random,rescore,builder,rescorer,builder,deserialized,copy,original,assert,equals,deserialized,original,assert,equals,deserialized,hash,code,original,hash,code,assert,not,same,deserialized,original
QueryRescorerBuilderTests -> public void testSerialization() throws IOException;1545252138;Test serialization and deserialization of the rescore builder;public void testSerialization() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            RescorerBuilder<?> original = randomRescoreBuilder()__            RescorerBuilder<?> deserialized = copy(original)__            assertEquals(deserialized, original)__            assertEquals(deserialized.hashCode(), original.hashCode())__            assertNotSame(deserialized, original)__        }_    };test,serialization,and,deserialization,of,the,rescore,builder;public,void,test,serialization,throws,ioexception,for,int,runs,0,runs,runs,rescorer,builder,original,random,rescore,builder,rescorer,builder,deserialized,copy,original,assert,equals,deserialized,original,assert,equals,deserialized,hash,code,original,hash,code,assert,not,same,deserialized,original
QueryRescorerBuilderTests -> public void testBuildRescoreSearchContext() throws ElasticsearchParseException, IOException;1524684173;test that build() outputs a {@link RescoreContext} that has the same properties_than the test builder;public void testBuildRescoreSearchContext() throws ElasticsearchParseException, IOException {_        final long nowInMillis = randomNonNegativeLong()__        Settings indexSettings = Settings.builder()_                .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).build()__        IndexSettings idxSettings = IndexSettingsModule.newIndexSettings(randomAlphaOfLengthBetween(1, 10), indexSettings)__        _        QueryShardContext mockShardContext = new QueryShardContext(0, idxSettings, null, null, null, null, null, xContentRegistry(),_            namedWriteableRegistry, null, null, () -> nowInMillis, null) {_            @Override_            public MappedFieldType fieldMapper(String name) {_                TextFieldMapper.Builder builder = new TextFieldMapper.Builder(name)__                return builder.build(new Mapper.BuilderContext(idxSettings.getSettings(), new ContentPath(1))).fieldType()__            }_        }___        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            QueryRescorerBuilder rescoreBuilder = randomRescoreBuilder()__            QueryRescoreContext rescoreContext = (QueryRescoreContext) rescoreBuilder.buildContext(mockShardContext)__            int expectedWindowSize = rescoreBuilder.windowSize() == null ? RescorerBuilder.DEFAULT_WINDOW_SIZE :_                rescoreBuilder.windowSize().intValue()__            assertEquals(expectedWindowSize, rescoreContext.getWindowSize())__            Query expectedQuery = Rewriteable.rewrite(rescoreBuilder.getRescoreQuery(), mockShardContext).toQuery(mockShardContext)__            assertEquals(expectedQuery, rescoreContext.query())__            assertEquals(rescoreBuilder.getQueryWeight(), rescoreContext.queryWeight(), Float.MIN_VALUE)__            assertEquals(rescoreBuilder.getRescoreQueryWeight(), rescoreContext.rescoreQueryWeight(), Float.MIN_VALUE)__            assertEquals(rescoreBuilder.getScoreMode(), rescoreContext.scoreMode())__        }_    };test,that,build,outputs,a,link,rescore,context,that,has,the,same,properties,than,the,test,builder;public,void,test,build,rescore,search,context,throws,elasticsearch,parse,exception,ioexception,final,long,now,in,millis,random,non,negative,long,settings,index,settings,settings,builder,put,index,meta,data,version,current,build,index,settings,idx,settings,index,settings,module,new,index,settings,random,alpha,of,length,between,1,10,index,settings,query,shard,context,mock,shard,context,new,query,shard,context,0,idx,settings,null,null,null,null,null,x,content,registry,named,writeable,registry,null,null,now,in,millis,null,override,public,mapped,field,type,field,mapper,string,name,text,field,mapper,builder,builder,new,text,field,mapper,builder,name,return,builder,build,new,mapper,builder,context,idx,settings,get,settings,new,content,path,1,field,type,for,int,runs,0,runs,runs,query,rescorer,builder,rescore,builder,random,rescore,builder,query,rescore,context,rescore,context,query,rescore,context,rescore,builder,build,context,mock,shard,context,int,expected,window,size,rescore,builder,window,size,null,rescorer,builder,rescore,builder,window,size,int,value,assert,equals,expected,window,size,rescore,context,get,window,size,query,expected,query,rewriteable,rewrite,rescore,builder,get,rescore,query,mock,shard,context,to,query,mock,shard,context,assert,equals,expected,query,rescore,context,query,assert,equals,rescore,builder,get,query,weight,rescore,context,query,weight,float,assert,equals,rescore,builder,get,rescore,query,weight,rescore,context,rescore,query,weight,float,assert,equals,rescore,builder,get,score,mode,rescore,context,score,mode
QueryRescorerBuilderTests -> public void testBuildRescoreSearchContext() throws ElasticsearchParseException, IOException;1528167589;test that build() outputs a {@link RescoreContext} that has the same properties_than the test builder;public void testBuildRescoreSearchContext() throws ElasticsearchParseException, IOException {_        final long nowInMillis = randomNonNegativeLong()__        Settings indexSettings = Settings.builder()_                .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).build()__        IndexSettings idxSettings = IndexSettingsModule.newIndexSettings(randomAlphaOfLengthBetween(1, 10), indexSettings)__        _        QueryShardContext mockShardContext = new QueryShardContext(0, idxSettings, null, null, null, null, null, xContentRegistry(),_            namedWriteableRegistry, null, null, () -> nowInMillis, null) {_            @Override_            public MappedFieldType fieldMapper(String name) {_                TextFieldMapper.Builder builder = new TextFieldMapper.Builder(name)__                return builder.build(new Mapper.BuilderContext(idxSettings.getSettings(), new ContentPath(1))).fieldType()__            }_        }___        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            QueryRescorerBuilder rescoreBuilder = randomRescoreBuilder()__            QueryRescoreContext rescoreContext = (QueryRescoreContext) rescoreBuilder.buildContext(mockShardContext)__            int expectedWindowSize = rescoreBuilder.windowSize() == null ? RescorerBuilder.DEFAULT_WINDOW_SIZE :_                rescoreBuilder.windowSize().intValue()__            assertEquals(expectedWindowSize, rescoreContext.getWindowSize())__            Query expectedQuery = Rewriteable.rewrite(rescoreBuilder.getRescoreQuery(), mockShardContext).toQuery(mockShardContext)__            assertEquals(expectedQuery, rescoreContext.query())__            assertEquals(rescoreBuilder.getQueryWeight(), rescoreContext.queryWeight(), Float.MIN_VALUE)__            assertEquals(rescoreBuilder.getRescoreQueryWeight(), rescoreContext.rescoreQueryWeight(), Float.MIN_VALUE)__            assertEquals(rescoreBuilder.getScoreMode(), rescoreContext.scoreMode())__        }_    };test,that,build,outputs,a,link,rescore,context,that,has,the,same,properties,than,the,test,builder;public,void,test,build,rescore,search,context,throws,elasticsearch,parse,exception,ioexception,final,long,now,in,millis,random,non,negative,long,settings,index,settings,settings,builder,put,index,meta,data,version,current,build,index,settings,idx,settings,index,settings,module,new,index,settings,random,alpha,of,length,between,1,10,index,settings,query,shard,context,mock,shard,context,new,query,shard,context,0,idx,settings,null,null,null,null,null,x,content,registry,named,writeable,registry,null,null,now,in,millis,null,override,public,mapped,field,type,field,mapper,string,name,text,field,mapper,builder,builder,new,text,field,mapper,builder,name,return,builder,build,new,mapper,builder,context,idx,settings,get,settings,new,content,path,1,field,type,for,int,runs,0,runs,runs,query,rescorer,builder,rescore,builder,random,rescore,builder,query,rescore,context,rescore,context,query,rescore,context,rescore,builder,build,context,mock,shard,context,int,expected,window,size,rescore,builder,window,size,null,rescorer,builder,rescore,builder,window,size,int,value,assert,equals,expected,window,size,rescore,context,get,window,size,query,expected,query,rewriteable,rewrite,rescore,builder,get,rescore,query,mock,shard,context,to,query,mock,shard,context,assert,equals,expected,query,rescore,context,query,assert,equals,rescore,builder,get,query,weight,rescore,context,query,weight,float,assert,equals,rescore,builder,get,rescore,query,weight,rescore,context,rescore,query,weight,float,assert,equals,rescore,builder,get,score,mode,rescore,context,score,mode
QueryRescorerBuilderTests -> public void testBuildRescoreSearchContext() throws ElasticsearchParseException, IOException;1529916084;test that build() outputs a {@link RescoreContext} that has the same properties_than the test builder;public void testBuildRescoreSearchContext() throws ElasticsearchParseException, IOException {_        final long nowInMillis = randomNonNegativeLong()__        Settings indexSettings = Settings.builder()_                .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).build()__        IndexSettings idxSettings = IndexSettingsModule.newIndexSettings(randomAlphaOfLengthBetween(1, 10), indexSettings)__        _        QueryShardContext mockShardContext = new QueryShardContext(0, idxSettings, null, null, null, null, null, xContentRegistry(),_            namedWriteableRegistry, null, null, () -> nowInMillis, null) {_            @Override_            public MappedFieldType fieldMapper(String name) {_                TextFieldMapper.Builder builder = new TextFieldMapper.Builder(name)__                return builder.build(new Mapper.BuilderContext(idxSettings.getSettings(), new ContentPath(1))).fieldType()__            }_        }___        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            QueryRescorerBuilder rescoreBuilder = randomRescoreBuilder()__            QueryRescoreContext rescoreContext = (QueryRescoreContext) rescoreBuilder.buildContext(mockShardContext)__            int expectedWindowSize = rescoreBuilder.windowSize() == null ? RescorerBuilder.DEFAULT_WINDOW_SIZE :_                rescoreBuilder.windowSize().intValue()__            assertEquals(expectedWindowSize, rescoreContext.getWindowSize())__            Query expectedQuery = Rewriteable.rewrite(rescoreBuilder.getRescoreQuery(), mockShardContext).toQuery(mockShardContext)__            assertEquals(expectedQuery, rescoreContext.query())__            assertEquals(rescoreBuilder.getQueryWeight(), rescoreContext.queryWeight(), Float.MIN_VALUE)__            assertEquals(rescoreBuilder.getRescoreQueryWeight(), rescoreContext.rescoreQueryWeight(), Float.MIN_VALUE)__            assertEquals(rescoreBuilder.getScoreMode(), rescoreContext.scoreMode())__        }_    };test,that,build,outputs,a,link,rescore,context,that,has,the,same,properties,than,the,test,builder;public,void,test,build,rescore,search,context,throws,elasticsearch,parse,exception,ioexception,final,long,now,in,millis,random,non,negative,long,settings,index,settings,settings,builder,put,index,meta,data,version,current,build,index,settings,idx,settings,index,settings,module,new,index,settings,random,alpha,of,length,between,1,10,index,settings,query,shard,context,mock,shard,context,new,query,shard,context,0,idx,settings,null,null,null,null,null,x,content,registry,named,writeable,registry,null,null,now,in,millis,null,override,public,mapped,field,type,field,mapper,string,name,text,field,mapper,builder,builder,new,text,field,mapper,builder,name,return,builder,build,new,mapper,builder,context,idx,settings,get,settings,new,content,path,1,field,type,for,int,runs,0,runs,runs,query,rescorer,builder,rescore,builder,random,rescore,builder,query,rescore,context,rescore,context,query,rescore,context,rescore,builder,build,context,mock,shard,context,int,expected,window,size,rescore,builder,window,size,null,rescorer,builder,rescore,builder,window,size,int,value,assert,equals,expected,window,size,rescore,context,get,window,size,query,expected,query,rewriteable,rewrite,rescore,builder,get,rescore,query,mock,shard,context,to,query,mock,shard,context,assert,equals,expected,query,rescore,context,query,assert,equals,rescore,builder,get,query,weight,rescore,context,query,weight,float,assert,equals,rescore,builder,get,rescore,query,weight,rescore,context,rescore,query,weight,float,assert,equals,rescore,builder,get,score,mode,rescore,context,score,mode
QueryRescorerBuilderTests -> public void testBuildRescoreSearchContext() throws ElasticsearchParseException, IOException;1538067637;test that build() outputs a {@link RescoreContext} that has the same properties_than the test builder;public void testBuildRescoreSearchContext() throws ElasticsearchParseException, IOException {_        final long nowInMillis = randomNonNegativeLong()__        Settings indexSettings = Settings.builder()_                .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).build()__        IndexSettings idxSettings = IndexSettingsModule.newIndexSettings(randomAlphaOfLengthBetween(1, 10), indexSettings)__        _        QueryShardContext mockShardContext = new QueryShardContext(0, idxSettings, null, null, null, null, null, xContentRegistry(),_            namedWriteableRegistry, null, null, () -> nowInMillis, null) {_            @Override_            public MappedFieldType fieldMapper(String name) {_                TextFieldMapper.Builder builder = new TextFieldMapper.Builder(name)__                return builder.build(new Mapper.BuilderContext(idxSettings.getSettings(), new ContentPath(1))).fieldType()__            }_        }___        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            QueryRescorerBuilder rescoreBuilder = randomRescoreBuilder()__            QueryRescoreContext rescoreContext = (QueryRescoreContext) rescoreBuilder.buildContext(mockShardContext)__            int expectedWindowSize = rescoreBuilder.windowSize() == null ? RescorerBuilder.DEFAULT_WINDOW_SIZE :_                rescoreBuilder.windowSize().intValue()__            assertEquals(expectedWindowSize, rescoreContext.getWindowSize())__            Query expectedQuery = Rewriteable.rewrite(rescoreBuilder.getRescoreQuery(), mockShardContext).toQuery(mockShardContext)__            assertEquals(expectedQuery, rescoreContext.query())__            assertEquals(rescoreBuilder.getQueryWeight(), rescoreContext.queryWeight(), Float.MIN_VALUE)__            assertEquals(rescoreBuilder.getRescoreQueryWeight(), rescoreContext.rescoreQueryWeight(), Float.MIN_VALUE)__            assertEquals(rescoreBuilder.getScoreMode(), rescoreContext.scoreMode())__        }_    };test,that,build,outputs,a,link,rescore,context,that,has,the,same,properties,than,the,test,builder;public,void,test,build,rescore,search,context,throws,elasticsearch,parse,exception,ioexception,final,long,now,in,millis,random,non,negative,long,settings,index,settings,settings,builder,put,index,meta,data,version,current,build,index,settings,idx,settings,index,settings,module,new,index,settings,random,alpha,of,length,between,1,10,index,settings,query,shard,context,mock,shard,context,new,query,shard,context,0,idx,settings,null,null,null,null,null,x,content,registry,named,writeable,registry,null,null,now,in,millis,null,override,public,mapped,field,type,field,mapper,string,name,text,field,mapper,builder,builder,new,text,field,mapper,builder,name,return,builder,build,new,mapper,builder,context,idx,settings,get,settings,new,content,path,1,field,type,for,int,runs,0,runs,runs,query,rescorer,builder,rescore,builder,random,rescore,builder,query,rescore,context,rescore,context,query,rescore,context,rescore,builder,build,context,mock,shard,context,int,expected,window,size,rescore,builder,window,size,null,rescorer,builder,rescore,builder,window,size,int,value,assert,equals,expected,window,size,rescore,context,get,window,size,query,expected,query,rewriteable,rewrite,rescore,builder,get,rescore,query,mock,shard,context,to,query,mock,shard,context,assert,equals,expected,query,rescore,context,query,assert,equals,rescore,builder,get,query,weight,rescore,context,query,weight,float,assert,equals,rescore,builder,get,rescore,query,weight,rescore,context,rescore,query,weight,float,assert,equals,rescore,builder,get,score,mode,rescore,context,score,mode
QueryRescorerBuilderTests -> public void testBuildRescoreSearchContext() throws ElasticsearchParseException, IOException;1545252138;test that build() outputs a {@link RescoreContext} that has the same properties_than the test builder;public void testBuildRescoreSearchContext() throws ElasticsearchParseException, IOException {_        final long nowInMillis = randomNonNegativeLong()__        Settings indexSettings = Settings.builder()_                .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).build()__        IndexSettings idxSettings = IndexSettingsModule.newIndexSettings(randomAlphaOfLengthBetween(1, 10), indexSettings)__        _        QueryShardContext mockShardContext = new QueryShardContext(0, idxSettings, null, null, null, null, null, xContentRegistry(),_            namedWriteableRegistry, null, null, () -> nowInMillis, null) {_            @Override_            public MappedFieldType fieldMapper(String name) {_                TextFieldMapper.Builder builder = new TextFieldMapper.Builder(name)__                return builder.build(new Mapper.BuilderContext(idxSettings.getSettings(), new ContentPath(1))).fieldType()__            }_        }___        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            QueryRescorerBuilder rescoreBuilder = randomRescoreBuilder()__            QueryRescoreContext rescoreContext = (QueryRescoreContext) rescoreBuilder.buildContext(mockShardContext)__            int expectedWindowSize = rescoreBuilder.windowSize() == null ? RescorerBuilder.DEFAULT_WINDOW_SIZE :_                rescoreBuilder.windowSize().intValue()__            assertEquals(expectedWindowSize, rescoreContext.getWindowSize())__            Query expectedQuery = Rewriteable.rewrite(rescoreBuilder.getRescoreQuery(), mockShardContext).toQuery(mockShardContext)__            assertEquals(expectedQuery, rescoreContext.query())__            assertEquals(rescoreBuilder.getQueryWeight(), rescoreContext.queryWeight(), Float.MIN_VALUE)__            assertEquals(rescoreBuilder.getRescoreQueryWeight(), rescoreContext.rescoreQueryWeight(), Float.MIN_VALUE)__            assertEquals(rescoreBuilder.getScoreMode(), rescoreContext.scoreMode())__        }_    };test,that,build,outputs,a,link,rescore,context,that,has,the,same,properties,than,the,test,builder;public,void,test,build,rescore,search,context,throws,elasticsearch,parse,exception,ioexception,final,long,now,in,millis,random,non,negative,long,settings,index,settings,settings,builder,put,index,meta,data,version,current,build,index,settings,idx,settings,index,settings,module,new,index,settings,random,alpha,of,length,between,1,10,index,settings,query,shard,context,mock,shard,context,new,query,shard,context,0,idx,settings,null,null,null,null,null,x,content,registry,named,writeable,registry,null,null,now,in,millis,null,override,public,mapped,field,type,field,mapper,string,name,text,field,mapper,builder,builder,new,text,field,mapper,builder,name,return,builder,build,new,mapper,builder,context,idx,settings,get,settings,new,content,path,1,field,type,for,int,runs,0,runs,runs,query,rescorer,builder,rescore,builder,random,rescore,builder,query,rescore,context,rescore,context,query,rescore,context,rescore,builder,build,context,mock,shard,context,int,expected,window,size,rescore,builder,window,size,null,rescorer,builder,rescore,builder,window,size,int,value,assert,equals,expected,window,size,rescore,context,get,window,size,query,expected,query,rewriteable,rewrite,rescore,builder,get,rescore,query,mock,shard,context,to,query,mock,shard,context,assert,equals,expected,query,rescore,context,query,assert,equals,rescore,builder,get,query,weight,rescore,context,query,weight,float,assert,equals,rescore,builder,get,rescore,query,weight,rescore,context,rescore,query,weight,float,assert,equals,rescore,builder,get,score,mode,rescore,context,score,mode
QueryRescorerBuilderTests -> @BeforeClass     public static void init();1524684173;setup for the whole base test class;@BeforeClass_    public static void init() {_        SearchModule searchModule = new SearchModule(Settings.EMPTY, false, emptyList())__        namedWriteableRegistry = new NamedWriteableRegistry(searchModule.getNamedWriteables())__        xContentRegistry = new NamedXContentRegistry(searchModule.getNamedXContents())__    };setup,for,the,whole,base,test,class;before,class,public,static,void,init,search,module,search,module,new,search,module,settings,empty,false,empty,list,named,writeable,registry,new,named,writeable,registry,search,module,get,named,writeables,x,content,registry,new,named,xcontent,registry,search,module,get,named,xcontents
QueryRescorerBuilderTests -> @BeforeClass     public static void init();1528167589;setup for the whole base test class;@BeforeClass_    public static void init() {_        SearchModule searchModule = new SearchModule(Settings.EMPTY, false, emptyList())__        namedWriteableRegistry = new NamedWriteableRegistry(searchModule.getNamedWriteables())__        xContentRegistry = new NamedXContentRegistry(searchModule.getNamedXContents())__    };setup,for,the,whole,base,test,class;before,class,public,static,void,init,search,module,search,module,new,search,module,settings,empty,false,empty,list,named,writeable,registry,new,named,writeable,registry,search,module,get,named,writeables,x,content,registry,new,named,xcontent,registry,search,module,get,named,xcontents
QueryRescorerBuilderTests -> @BeforeClass     public static void init();1529916084;setup for the whole base test class;@BeforeClass_    public static void init() {_        SearchModule searchModule = new SearchModule(Settings.EMPTY, false, emptyList())__        namedWriteableRegistry = new NamedWriteableRegistry(searchModule.getNamedWriteables())__        xContentRegistry = new NamedXContentRegistry(searchModule.getNamedXContents())__    };setup,for,the,whole,base,test,class;before,class,public,static,void,init,search,module,search,module,new,search,module,settings,empty,false,empty,list,named,writeable,registry,new,named,writeable,registry,search,module,get,named,writeables,x,content,registry,new,named,xcontent,registry,search,module,get,named,xcontents
QueryRescorerBuilderTests -> @BeforeClass     public static void init();1538067637;setup for the whole base test class;@BeforeClass_    public static void init() {_        SearchModule searchModule = new SearchModule(Settings.EMPTY, false, emptyList())__        namedWriteableRegistry = new NamedWriteableRegistry(searchModule.getNamedWriteables())__        xContentRegistry = new NamedXContentRegistry(searchModule.getNamedXContents())__    };setup,for,the,whole,base,test,class;before,class,public,static,void,init,search,module,search,module,new,search,module,settings,empty,false,empty,list,named,writeable,registry,new,named,writeable,registry,search,module,get,named,writeables,x,content,registry,new,named,xcontent,registry,search,module,get,named,xcontents
QueryRescorerBuilderTests -> @BeforeClass     public static void init();1545252138;setup for the whole base test class;@BeforeClass_    public static void init() {_        SearchModule searchModule = new SearchModule(Settings.EMPTY, false, emptyList())__        namedWriteableRegistry = new NamedWriteableRegistry(searchModule.getNamedWriteables())__        xContentRegistry = new NamedXContentRegistry(searchModule.getNamedXContents())__    };setup,for,the,whole,base,test,class;before,class,public,static,void,init,search,module,search,module,new,search,module,settings,empty,false,empty,list,named,writeable,registry,new,named,writeable,registry,search,module,get,named,writeables,x,content,registry,new,named,xcontent,registry,search,module,get,named,xcontents
QueryRescorerBuilderTests -> public void testFromXContent() throws IOException;1524684173;creates random rescorer, renders it to xContent and back to new instance that should be equal to original;public void testFromXContent() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            RescorerBuilder<?> rescoreBuilder = randomRescoreBuilder()__            XContentBuilder builder = XContentFactory.contentBuilder(randomFrom(XContentType.values()))__            if (randomBoolean()) {_                builder.prettyPrint()__            }_            rescoreBuilder.toXContent(builder, ToXContent.EMPTY_PARAMS)__            XContentBuilder shuffled = shuffleXContent(builder)____            XContentParser parser = createParser(shuffled)__            parser.nextToken()__            RescorerBuilder<?> secondRescoreBuilder = RescorerBuilder.parseFromXContent(parser)__            assertNotSame(rescoreBuilder, secondRescoreBuilder)__            assertEquals(rescoreBuilder, secondRescoreBuilder)__            assertEquals(rescoreBuilder.hashCode(), secondRescoreBuilder.hashCode())__        }_    };creates,random,rescorer,renders,it,to,x,content,and,back,to,new,instance,that,should,be,equal,to,original;public,void,test,from,xcontent,throws,ioexception,for,int,runs,0,runs,runs,rescorer,builder,rescore,builder,random,rescore,builder,xcontent,builder,builder,xcontent,factory,content,builder,random,from,xcontent,type,values,if,random,boolean,builder,pretty,print,rescore,builder,to,xcontent,builder,to,xcontent,xcontent,builder,shuffled,shuffle,xcontent,builder,xcontent,parser,parser,create,parser,shuffled,parser,next,token,rescorer,builder,second,rescore,builder,rescorer,builder,parse,from,xcontent,parser,assert,not,same,rescore,builder,second,rescore,builder,assert,equals,rescore,builder,second,rescore,builder,assert,equals,rescore,builder,hash,code,second,rescore,builder,hash,code
QueryRescorerBuilderTests -> public void testFromXContent() throws IOException;1528167589;creates random rescorer, renders it to xContent and back to new instance that should be equal to original;public void testFromXContent() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            RescorerBuilder<?> rescoreBuilder = randomRescoreBuilder()__            XContentBuilder builder = XContentFactory.contentBuilder(randomFrom(XContentType.values()))__            if (randomBoolean()) {_                builder.prettyPrint()__            }_            rescoreBuilder.toXContent(builder, ToXContent.EMPTY_PARAMS)__            XContentBuilder shuffled = shuffleXContent(builder)____            XContentParser parser = createParser(shuffled)__            parser.nextToken()__            RescorerBuilder<?> secondRescoreBuilder = RescorerBuilder.parseFromXContent(parser)__            assertNotSame(rescoreBuilder, secondRescoreBuilder)__            assertEquals(rescoreBuilder, secondRescoreBuilder)__            assertEquals(rescoreBuilder.hashCode(), secondRescoreBuilder.hashCode())__        }_    };creates,random,rescorer,renders,it,to,x,content,and,back,to,new,instance,that,should,be,equal,to,original;public,void,test,from,xcontent,throws,ioexception,for,int,runs,0,runs,runs,rescorer,builder,rescore,builder,random,rescore,builder,xcontent,builder,builder,xcontent,factory,content,builder,random,from,xcontent,type,values,if,random,boolean,builder,pretty,print,rescore,builder,to,xcontent,builder,to,xcontent,xcontent,builder,shuffled,shuffle,xcontent,builder,xcontent,parser,parser,create,parser,shuffled,parser,next,token,rescorer,builder,second,rescore,builder,rescorer,builder,parse,from,xcontent,parser,assert,not,same,rescore,builder,second,rescore,builder,assert,equals,rescore,builder,second,rescore,builder,assert,equals,rescore,builder,hash,code,second,rescore,builder,hash,code
QueryRescorerBuilderTests -> public void testFromXContent() throws IOException;1529916084;creates random rescorer, renders it to xContent and back to new instance that should be equal to original;public void testFromXContent() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            RescorerBuilder<?> rescoreBuilder = randomRescoreBuilder()__            XContentBuilder builder = XContentFactory.contentBuilder(randomFrom(XContentType.values()))__            if (randomBoolean()) {_                builder.prettyPrint()__            }_            rescoreBuilder.toXContent(builder, ToXContent.EMPTY_PARAMS)__            XContentBuilder shuffled = shuffleXContent(builder)____            try (XContentParser parser = createParser(shuffled)) {_                parser.nextToken()__                RescorerBuilder<?> secondRescoreBuilder = RescorerBuilder.parseFromXContent(parser)__                assertNotSame(rescoreBuilder, secondRescoreBuilder)__                assertEquals(rescoreBuilder, secondRescoreBuilder)__                assertEquals(rescoreBuilder.hashCode(), secondRescoreBuilder.hashCode())__            }_        }_    };creates,random,rescorer,renders,it,to,x,content,and,back,to,new,instance,that,should,be,equal,to,original;public,void,test,from,xcontent,throws,ioexception,for,int,runs,0,runs,runs,rescorer,builder,rescore,builder,random,rescore,builder,xcontent,builder,builder,xcontent,factory,content,builder,random,from,xcontent,type,values,if,random,boolean,builder,pretty,print,rescore,builder,to,xcontent,builder,to,xcontent,xcontent,builder,shuffled,shuffle,xcontent,builder,try,xcontent,parser,parser,create,parser,shuffled,parser,next,token,rescorer,builder,second,rescore,builder,rescorer,builder,parse,from,xcontent,parser,assert,not,same,rescore,builder,second,rescore,builder,assert,equals,rescore,builder,second,rescore,builder,assert,equals,rescore,builder,hash,code,second,rescore,builder,hash,code
QueryRescorerBuilderTests -> public void testFromXContent() throws IOException;1538067637;creates random rescorer, renders it to xContent and back to new instance that should be equal to original;public void testFromXContent() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            RescorerBuilder<?> rescoreBuilder = randomRescoreBuilder()__            XContentBuilder builder = XContentFactory.contentBuilder(randomFrom(XContentType.values()))__            if (randomBoolean()) {_                builder.prettyPrint()__            }_            rescoreBuilder.toXContent(builder, ToXContent.EMPTY_PARAMS)__            XContentBuilder shuffled = shuffleXContent(builder)____            try (XContentParser parser = createParser(shuffled)) {_                parser.nextToken()__                RescorerBuilder<?> secondRescoreBuilder = RescorerBuilder.parseFromXContent(parser)__                assertNotSame(rescoreBuilder, secondRescoreBuilder)__                assertEquals(rescoreBuilder, secondRescoreBuilder)__                assertEquals(rescoreBuilder.hashCode(), secondRescoreBuilder.hashCode())__            }_        }_    };creates,random,rescorer,renders,it,to,x,content,and,back,to,new,instance,that,should,be,equal,to,original;public,void,test,from,xcontent,throws,ioexception,for,int,runs,0,runs,runs,rescorer,builder,rescore,builder,random,rescore,builder,xcontent,builder,builder,xcontent,factory,content,builder,random,from,xcontent,type,values,if,random,boolean,builder,pretty,print,rescore,builder,to,xcontent,builder,to,xcontent,xcontent,builder,shuffled,shuffle,xcontent,builder,try,xcontent,parser,parser,create,parser,shuffled,parser,next,token,rescorer,builder,second,rescore,builder,rescorer,builder,parse,from,xcontent,parser,assert,not,same,rescore,builder,second,rescore,builder,assert,equals,rescore,builder,second,rescore,builder,assert,equals,rescore,builder,hash,code,second,rescore,builder,hash,code
QueryRescorerBuilderTests -> public void testFromXContent() throws IOException;1545252138;creates random rescorer, renders it to xContent and back to new instance that should be equal to original;public void testFromXContent() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            RescorerBuilder<?> rescoreBuilder = randomRescoreBuilder()__            XContentBuilder builder = XContentFactory.contentBuilder(randomFrom(XContentType.values()))__            if (randomBoolean()) {_                builder.prettyPrint()__            }_            rescoreBuilder.toXContent(builder, ToXContent.EMPTY_PARAMS)__            XContentBuilder shuffled = shuffleXContent(builder)____            try (XContentParser parser = createParser(shuffled)) {_                parser.nextToken()__                RescorerBuilder<?> secondRescoreBuilder = RescorerBuilder.parseFromXContent(parser)__                assertNotSame(rescoreBuilder, secondRescoreBuilder)__                assertEquals(rescoreBuilder, secondRescoreBuilder)__                assertEquals(rescoreBuilder.hashCode(), secondRescoreBuilder.hashCode())__            }_        }_    };creates,random,rescorer,renders,it,to,x,content,and,back,to,new,instance,that,should,be,equal,to,original;public,void,test,from,xcontent,throws,ioexception,for,int,runs,0,runs,runs,rescorer,builder,rescore,builder,random,rescore,builder,xcontent,builder,builder,xcontent,factory,content,builder,random,from,xcontent,type,values,if,random,boolean,builder,pretty,print,rescore,builder,to,xcontent,builder,to,xcontent,xcontent,builder,shuffled,shuffle,xcontent,builder,try,xcontent,parser,parser,create,parser,shuffled,parser,next,token,rescorer,builder,second,rescore,builder,rescorer,builder,parse,from,xcontent,parser,assert,not,same,rescore,builder,second,rescore,builder,assert,equals,rescore,builder,second,rescore,builder,assert,equals,rescore,builder,hash,code,second,rescore,builder,hash,code
QueryRescorerBuilderTests -> public void testUnknownFieldsExpection() throws IOException;1524684173;test parsing exceptions for incorrect rescorer syntax;public void testUnknownFieldsExpection() throws IOException {__        String rescoreElement = "{\n" +_                "    \"window_size\" : 20,\n" +_                "    \"bad_rescorer_name\" : { }\n" +_                "}\n"__        {_            XContentParser parser = createParser(rescoreElement)__            Exception e = expectThrows(NamedObjectNotFoundException.class, () -> RescorerBuilder.parseFromXContent(parser))__            assertEquals("[3:27] unable to parse RescorerBuilder with name [bad_rescorer_name]: parser not found", e.getMessage())__        }__        rescoreElement = "{\n" +_                "    \"bad_fieldName\" : 20\n" +_                "}\n"__        {_            XContentParser parser = createParser(rescoreElement)__            Exception e = expectThrows(ParsingException.class, () -> RescorerBuilder.parseFromXContent(parser))__            assertEquals("rescore doesn't support [bad_fieldName]", e.getMessage())__        }__        rescoreElement = "{\n" +_                "    \"window_size\" : 20,\n" +_                "    \"query\" : [ ]\n" +_                "}\n"__        {_            XContentParser parser = createParser(rescoreElement)__            Exception e = expectThrows(ParsingException.class, () -> RescorerBuilder.parseFromXContent(parser))__            assertEquals("unexpected token [START_ARRAY] after [query]", e.getMessage())__        }__        rescoreElement = "{ }"__        {_            XContentParser parser = createParser(rescoreElement)__            Exception e = expectThrows(ParsingException.class, () -> RescorerBuilder.parseFromXContent(parser))__            assertEquals("missing rescore type", e.getMessage())__        }__        rescoreElement = "{\n" +_                "    \"window_size\" : 20,\n" +_                "    \"query\" : { \"bad_fieldname\" : 1.0  } \n" +_                "}\n"__        {_            XContentParser parser = createParser(rescoreElement)__            Exception e = expectThrows(IllegalArgumentException.class, () -> RescorerBuilder.parseFromXContent(parser))__            assertEquals("[query] unknown field [bad_fieldname], parser not found", e.getMessage())__        }__        rescoreElement = "{\n" +_                "    \"window_size\" : 20,\n" +_                "    \"query\" : { \"rescore_query\" : { \"unknown_queryname\" : { } } } \n" +_                "}\n"__        {_            XContentParser parser = createParser(rescoreElement)__            Exception e = expectThrows(XContentParseException.class, () -> RescorerBuilder.parseFromXContent(parser))__            assertThat(e.getMessage(), containsString("[query] failed to parse field [rescore_query]"))__        }__        rescoreElement = "{\n" +_                "    \"window_size\" : 20,\n" +_                "    \"query\" : { \"rescore_query\" : { \"match_all\" : { } } } \n"_                + "}\n"__        XContentParser parser = createParser(rescoreElement)__        RescorerBuilder.parseFromXContent(parser)__    };test,parsing,exceptions,for,incorrect,rescorer,syntax;public,void,test,unknown,fields,expection,throws,ioexception,string,rescore,element,n,20,n,n,n,xcontent,parser,parser,create,parser,rescore,element,exception,e,expect,throws,named,object,not,found,exception,class,rescorer,builder,parse,from,xcontent,parser,assert,equals,3,27,unable,to,parse,rescorer,builder,with,name,parser,not,found,e,get,message,rescore,element,n,20,n,n,xcontent,parser,parser,create,parser,rescore,element,exception,e,expect,throws,parsing,exception,class,rescorer,builder,parse,from,xcontent,parser,assert,equals,rescore,doesn,t,support,e,get,message,rescore,element,n,20,n,query,n,n,xcontent,parser,parser,create,parser,rescore,element,exception,e,expect,throws,parsing,exception,class,rescorer,builder,parse,from,xcontent,parser,assert,equals,unexpected,token,after,query,e,get,message,rescore,element,xcontent,parser,parser,create,parser,rescore,element,exception,e,expect,throws,parsing,exception,class,rescorer,builder,parse,from,xcontent,parser,assert,equals,missing,rescore,type,e,get,message,rescore,element,n,20,n,query,1,0,n,n,xcontent,parser,parser,create,parser,rescore,element,exception,e,expect,throws,illegal,argument,exception,class,rescorer,builder,parse,from,xcontent,parser,assert,equals,query,unknown,field,parser,not,found,e,get,message,rescore,element,n,20,n,query,n,n,xcontent,parser,parser,create,parser,rescore,element,exception,e,expect,throws,xcontent,parse,exception,class,rescorer,builder,parse,from,xcontent,parser,assert,that,e,get,message,contains,string,query,failed,to,parse,field,rescore,element,n,20,n,query,n,n,xcontent,parser,parser,create,parser,rescore,element,rescorer,builder,parse,from,xcontent,parser
QueryRescorerBuilderTests -> public void testUnknownFieldsExpection() throws IOException;1528167589;test parsing exceptions for incorrect rescorer syntax;public void testUnknownFieldsExpection() throws IOException {__        String rescoreElement = "{\n" +_                "    \"window_size\" : 20,\n" +_                "    \"bad_rescorer_name\" : { }\n" +_                "}\n"__        {_            XContentParser parser = createParser(rescoreElement)__            Exception e = expectThrows(NamedObjectNotFoundException.class, () -> RescorerBuilder.parseFromXContent(parser))__            assertEquals("[3:27] unable to parse RescorerBuilder with name [bad_rescorer_name]: parser not found", e.getMessage())__        }__        rescoreElement = "{\n" +_                "    \"bad_fieldName\" : 20\n" +_                "}\n"__        {_            XContentParser parser = createParser(rescoreElement)__            Exception e = expectThrows(ParsingException.class, () -> RescorerBuilder.parseFromXContent(parser))__            assertEquals("rescore doesn't support [bad_fieldName]", e.getMessage())__        }__        rescoreElement = "{\n" +_                "    \"window_size\" : 20,\n" +_                "    \"query\" : [ ]\n" +_                "}\n"__        {_            XContentParser parser = createParser(rescoreElement)__            Exception e = expectThrows(ParsingException.class, () -> RescorerBuilder.parseFromXContent(parser))__            assertEquals("unexpected token [START_ARRAY] after [query]", e.getMessage())__        }__        rescoreElement = "{ }"__        {_            XContentParser parser = createParser(rescoreElement)__            Exception e = expectThrows(ParsingException.class, () -> RescorerBuilder.parseFromXContent(parser))__            assertEquals("missing rescore type", e.getMessage())__        }__        rescoreElement = "{\n" +_                "    \"window_size\" : 20,\n" +_                "    \"query\" : { \"bad_fieldname\" : 1.0  } \n" +_                "}\n"__        {_            XContentParser parser = createParser(rescoreElement)__            XContentParseException e = expectThrows(XContentParseException.class, () -> RescorerBuilder.parseFromXContent(parser))__            assertEquals("[3:17] [query] unknown field [bad_fieldname], parser not found", e.getMessage())__        }__        rescoreElement = "{\n" +_                "    \"window_size\" : 20,\n" +_                "    \"query\" : { \"rescore_query\" : { \"unknown_queryname\" : { } } } \n" +_                "}\n"__        {_            XContentParser parser = createParser(rescoreElement)__            Exception e = expectThrows(XContentParseException.class, () -> RescorerBuilder.parseFromXContent(parser))__            assertThat(e.getMessage(), containsString("[query] failed to parse field [rescore_query]"))__        }__        rescoreElement = "{\n" +_                "    \"window_size\" : 20,\n" +_                "    \"query\" : { \"rescore_query\" : { \"match_all\" : { } } } \n"_                + "}\n"__        XContentParser parser = createParser(rescoreElement)__        RescorerBuilder.parseFromXContent(parser)__    };test,parsing,exceptions,for,incorrect,rescorer,syntax;public,void,test,unknown,fields,expection,throws,ioexception,string,rescore,element,n,20,n,n,n,xcontent,parser,parser,create,parser,rescore,element,exception,e,expect,throws,named,object,not,found,exception,class,rescorer,builder,parse,from,xcontent,parser,assert,equals,3,27,unable,to,parse,rescorer,builder,with,name,parser,not,found,e,get,message,rescore,element,n,20,n,n,xcontent,parser,parser,create,parser,rescore,element,exception,e,expect,throws,parsing,exception,class,rescorer,builder,parse,from,xcontent,parser,assert,equals,rescore,doesn,t,support,e,get,message,rescore,element,n,20,n,query,n,n,xcontent,parser,parser,create,parser,rescore,element,exception,e,expect,throws,parsing,exception,class,rescorer,builder,parse,from,xcontent,parser,assert,equals,unexpected,token,after,query,e,get,message,rescore,element,xcontent,parser,parser,create,parser,rescore,element,exception,e,expect,throws,parsing,exception,class,rescorer,builder,parse,from,xcontent,parser,assert,equals,missing,rescore,type,e,get,message,rescore,element,n,20,n,query,1,0,n,n,xcontent,parser,parser,create,parser,rescore,element,xcontent,parse,exception,e,expect,throws,xcontent,parse,exception,class,rescorer,builder,parse,from,xcontent,parser,assert,equals,3,17,query,unknown,field,parser,not,found,e,get,message,rescore,element,n,20,n,query,n,n,xcontent,parser,parser,create,parser,rescore,element,exception,e,expect,throws,xcontent,parse,exception,class,rescorer,builder,parse,from,xcontent,parser,assert,that,e,get,message,contains,string,query,failed,to,parse,field,rescore,element,n,20,n,query,n,n,xcontent,parser,parser,create,parser,rescore,element,rescorer,builder,parse,from,xcontent,parser
QueryRescorerBuilderTests -> public void testUnknownFieldsExpection() throws IOException;1529916084;test parsing exceptions for incorrect rescorer syntax;public void testUnknownFieldsExpection() throws IOException {__        String rescoreElement = "{\n" +_            "    \"window_size\" : 20,\n" +_            "    \"bad_rescorer_name\" : { }\n" +_            "}\n"__        try (XContentParser parser = createParser(rescoreElement)) {_            Exception e = expectThrows(NamedObjectNotFoundException.class, () -> RescorerBuilder.parseFromXContent(parser))__            assertEquals("[3:27] unable to parse RescorerBuilder with name [bad_rescorer_name]: parser not found", e.getMessage())__        }_        rescoreElement = "{\n" +_            "    \"bad_fieldName\" : 20\n" +_            "}\n"__        try (XContentParser parser = createParser(rescoreElement)) {_            Exception e = expectThrows(ParsingException.class, () -> RescorerBuilder.parseFromXContent(parser))__            assertEquals("rescore doesn't support [bad_fieldName]", e.getMessage())__        }__        rescoreElement = "{\n" +_            "    \"window_size\" : 20,\n" +_            "    \"query\" : [ ]\n" +_            "}\n"__        try (XContentParser parser = createParser(rescoreElement)) {_            Exception e = expectThrows(ParsingException.class, () -> RescorerBuilder.parseFromXContent(parser))__            assertEquals("unexpected token [START_ARRAY] after [query]", e.getMessage())__        }__        rescoreElement = "{ }"__        try (XContentParser parser = createParser(rescoreElement)) {_            Exception e = expectThrows(ParsingException.class, () -> RescorerBuilder.parseFromXContent(parser))__            assertEquals("missing rescore type", e.getMessage())__        }__        rescoreElement = "{\n" +_            "    \"window_size\" : 20,\n" +_            "    \"query\" : { \"bad_fieldname\" : 1.0  } \n" +_            "}\n"__        try (XContentParser parser = createParser(rescoreElement)) {_            XContentParseException e = expectThrows(XContentParseException.class, () -> RescorerBuilder.parseFromXContent(parser))__            assertEquals("[3:17] [query] unknown field [bad_fieldname], parser not found", e.getMessage())__        }__        rescoreElement = "{\n" +_            "    \"window_size\" : 20,\n" +_            "    \"query\" : { \"rescore_query\" : { \"unknown_queryname\" : { } } } \n" +_            "}\n"__        try (XContentParser parser = createParser(rescoreElement)) {_            Exception e = expectThrows(XContentParseException.class, () -> RescorerBuilder.parseFromXContent(parser))__            assertThat(e.getMessage(), containsString("[query] failed to parse field [rescore_query]"))__        }__        rescoreElement = "{\n" +_            "    \"window_size\" : 20,\n" +_            "    \"query\" : { \"rescore_query\" : { \"match_all\" : { } } } \n"_            + "}\n"__        try (XContentParser parser = createParser(rescoreElement)) {_            RescorerBuilder.parseFromXContent(parser)__        }_    };test,parsing,exceptions,for,incorrect,rescorer,syntax;public,void,test,unknown,fields,expection,throws,ioexception,string,rescore,element,n,20,n,n,n,try,xcontent,parser,parser,create,parser,rescore,element,exception,e,expect,throws,named,object,not,found,exception,class,rescorer,builder,parse,from,xcontent,parser,assert,equals,3,27,unable,to,parse,rescorer,builder,with,name,parser,not,found,e,get,message,rescore,element,n,20,n,n,try,xcontent,parser,parser,create,parser,rescore,element,exception,e,expect,throws,parsing,exception,class,rescorer,builder,parse,from,xcontent,parser,assert,equals,rescore,doesn,t,support,e,get,message,rescore,element,n,20,n,query,n,n,try,xcontent,parser,parser,create,parser,rescore,element,exception,e,expect,throws,parsing,exception,class,rescorer,builder,parse,from,xcontent,parser,assert,equals,unexpected,token,after,query,e,get,message,rescore,element,try,xcontent,parser,parser,create,parser,rescore,element,exception,e,expect,throws,parsing,exception,class,rescorer,builder,parse,from,xcontent,parser,assert,equals,missing,rescore,type,e,get,message,rescore,element,n,20,n,query,1,0,n,n,try,xcontent,parser,parser,create,parser,rescore,element,xcontent,parse,exception,e,expect,throws,xcontent,parse,exception,class,rescorer,builder,parse,from,xcontent,parser,assert,equals,3,17,query,unknown,field,parser,not,found,e,get,message,rescore,element,n,20,n,query,n,n,try,xcontent,parser,parser,create,parser,rescore,element,exception,e,expect,throws,xcontent,parse,exception,class,rescorer,builder,parse,from,xcontent,parser,assert,that,e,get,message,contains,string,query,failed,to,parse,field,rescore,element,n,20,n,query,n,n,try,xcontent,parser,parser,create,parser,rescore,element,rescorer,builder,parse,from,xcontent,parser
QueryRescorerBuilderTests -> public void testUnknownFieldsExpection() throws IOException;1538067637;test parsing exceptions for incorrect rescorer syntax;public void testUnknownFieldsExpection() throws IOException {__        String rescoreElement = "{\n" +_            "    \"window_size\" : 20,\n" +_            "    \"bad_rescorer_name\" : { }\n" +_            "}\n"__        try (XContentParser parser = createParser(rescoreElement)) {_            Exception e = expectThrows(NamedObjectNotFoundException.class, () -> RescorerBuilder.parseFromXContent(parser))__            assertEquals("[3:27] unable to parse RescorerBuilder with name [bad_rescorer_name]: parser not found", e.getMessage())__        }_        rescoreElement = "{\n" +_            "    \"bad_fieldName\" : 20\n" +_            "}\n"__        try (XContentParser parser = createParser(rescoreElement)) {_            Exception e = expectThrows(ParsingException.class, () -> RescorerBuilder.parseFromXContent(parser))__            assertEquals("rescore doesn't support [bad_fieldName]", e.getMessage())__        }__        rescoreElement = "{\n" +_            "    \"window_size\" : 20,\n" +_            "    \"query\" : [ ]\n" +_            "}\n"__        try (XContentParser parser = createParser(rescoreElement)) {_            Exception e = expectThrows(ParsingException.class, () -> RescorerBuilder.parseFromXContent(parser))__            assertEquals("unexpected token [START_ARRAY] after [query]", e.getMessage())__        }__        rescoreElement = "{ }"__        try (XContentParser parser = createParser(rescoreElement)) {_            Exception e = expectThrows(ParsingException.class, () -> RescorerBuilder.parseFromXContent(parser))__            assertEquals("missing rescore type", e.getMessage())__        }__        rescoreElement = "{\n" +_            "    \"window_size\" : 20,\n" +_            "    \"query\" : { \"bad_fieldname\" : 1.0  } \n" +_            "}\n"__        try (XContentParser parser = createParser(rescoreElement)) {_            XContentParseException e = expectThrows(XContentParseException.class, () -> RescorerBuilder.parseFromXContent(parser))__            assertEquals("[3:17] [query] unknown field [bad_fieldname], parser not found", e.getMessage())__        }__        rescoreElement = "{\n" +_            "    \"window_size\" : 20,\n" +_            "    \"query\" : { \"rescore_query\" : { \"unknown_queryname\" : { } } } \n" +_            "}\n"__        try (XContentParser parser = createParser(rescoreElement)) {_            Exception e = expectThrows(XContentParseException.class, () -> RescorerBuilder.parseFromXContent(parser))__            assertThat(e.getMessage(), containsString("[query] failed to parse field [rescore_query]"))__        }__        rescoreElement = "{\n" +_            "    \"window_size\" : 20,\n" +_            "    \"query\" : { \"rescore_query\" : { \"match_all\" : { } } } \n"_            + "}\n"__        try (XContentParser parser = createParser(rescoreElement)) {_            RescorerBuilder.parseFromXContent(parser)__        }_    };test,parsing,exceptions,for,incorrect,rescorer,syntax;public,void,test,unknown,fields,expection,throws,ioexception,string,rescore,element,n,20,n,n,n,try,xcontent,parser,parser,create,parser,rescore,element,exception,e,expect,throws,named,object,not,found,exception,class,rescorer,builder,parse,from,xcontent,parser,assert,equals,3,27,unable,to,parse,rescorer,builder,with,name,parser,not,found,e,get,message,rescore,element,n,20,n,n,try,xcontent,parser,parser,create,parser,rescore,element,exception,e,expect,throws,parsing,exception,class,rescorer,builder,parse,from,xcontent,parser,assert,equals,rescore,doesn,t,support,e,get,message,rescore,element,n,20,n,query,n,n,try,xcontent,parser,parser,create,parser,rescore,element,exception,e,expect,throws,parsing,exception,class,rescorer,builder,parse,from,xcontent,parser,assert,equals,unexpected,token,after,query,e,get,message,rescore,element,try,xcontent,parser,parser,create,parser,rescore,element,exception,e,expect,throws,parsing,exception,class,rescorer,builder,parse,from,xcontent,parser,assert,equals,missing,rescore,type,e,get,message,rescore,element,n,20,n,query,1,0,n,n,try,xcontent,parser,parser,create,parser,rescore,element,xcontent,parse,exception,e,expect,throws,xcontent,parse,exception,class,rescorer,builder,parse,from,xcontent,parser,assert,equals,3,17,query,unknown,field,parser,not,found,e,get,message,rescore,element,n,20,n,query,n,n,try,xcontent,parser,parser,create,parser,rescore,element,exception,e,expect,throws,xcontent,parse,exception,class,rescorer,builder,parse,from,xcontent,parser,assert,that,e,get,message,contains,string,query,failed,to,parse,field,rescore,element,n,20,n,query,n,n,try,xcontent,parser,parser,create,parser,rescore,element,rescorer,builder,parse,from,xcontent,parser
QueryRescorerBuilderTests -> public void testUnknownFieldsExpection() throws IOException;1545252138;test parsing exceptions for incorrect rescorer syntax;public void testUnknownFieldsExpection() throws IOException {__        String rescoreElement = "{\n" +_            "    \"window_size\" : 20,\n" +_            "    \"bad_rescorer_name\" : { }\n" +_            "}\n"__        try (XContentParser parser = createParser(rescoreElement)) {_            Exception e = expectThrows(NamedObjectNotFoundException.class, () -> RescorerBuilder.parseFromXContent(parser))__            assertEquals("[3:27] unable to parse RescorerBuilder with name [bad_rescorer_name]: parser not found", e.getMessage())__        }_        rescoreElement = "{\n" +_            "    \"bad_fieldName\" : 20\n" +_            "}\n"__        try (XContentParser parser = createParser(rescoreElement)) {_            Exception e = expectThrows(ParsingException.class, () -> RescorerBuilder.parseFromXContent(parser))__            assertEquals("rescore doesn't support [bad_fieldName]", e.getMessage())__        }__        rescoreElement = "{\n" +_            "    \"window_size\" : 20,\n" +_            "    \"query\" : [ ]\n" +_            "}\n"__        try (XContentParser parser = createParser(rescoreElement)) {_            Exception e = expectThrows(ParsingException.class, () -> RescorerBuilder.parseFromXContent(parser))__            assertEquals("unexpected token [START_ARRAY] after [query]", e.getMessage())__        }__        rescoreElement = "{ }"__        try (XContentParser parser = createParser(rescoreElement)) {_            Exception e = expectThrows(ParsingException.class, () -> RescorerBuilder.parseFromXContent(parser))__            assertEquals("missing rescore type", e.getMessage())__        }__        rescoreElement = "{\n" +_            "    \"window_size\" : 20,\n" +_            "    \"query\" : { \"bad_fieldname\" : 1.0  } \n" +_            "}\n"__        try (XContentParser parser = createParser(rescoreElement)) {_            XContentParseException e = expectThrows(XContentParseException.class, () -> RescorerBuilder.parseFromXContent(parser))__            assertEquals("[3:17] [query] unknown field [bad_fieldname], parser not found", e.getMessage())__        }__        rescoreElement = "{\n" +_            "    \"window_size\" : 20,\n" +_            "    \"query\" : { \"rescore_query\" : { \"unknown_queryname\" : { } } } \n" +_            "}\n"__        try (XContentParser parser = createParser(rescoreElement)) {_            Exception e = expectThrows(XContentParseException.class, () -> RescorerBuilder.parseFromXContent(parser))__            assertThat(e.getMessage(), containsString("[query] failed to parse field [rescore_query]"))__        }__        rescoreElement = "{\n" +_            "    \"window_size\" : 20,\n" +_            "    \"query\" : { \"rescore_query\" : { \"match_all\" : { } } } \n"_            + "}\n"__        try (XContentParser parser = createParser(rescoreElement)) {_            RescorerBuilder.parseFromXContent(parser)__        }_    };test,parsing,exceptions,for,incorrect,rescorer,syntax;public,void,test,unknown,fields,expection,throws,ioexception,string,rescore,element,n,20,n,n,n,try,xcontent,parser,parser,create,parser,rescore,element,exception,e,expect,throws,named,object,not,found,exception,class,rescorer,builder,parse,from,xcontent,parser,assert,equals,3,27,unable,to,parse,rescorer,builder,with,name,parser,not,found,e,get,message,rescore,element,n,20,n,n,try,xcontent,parser,parser,create,parser,rescore,element,exception,e,expect,throws,parsing,exception,class,rescorer,builder,parse,from,xcontent,parser,assert,equals,rescore,doesn,t,support,e,get,message,rescore,element,n,20,n,query,n,n,try,xcontent,parser,parser,create,parser,rescore,element,exception,e,expect,throws,parsing,exception,class,rescorer,builder,parse,from,xcontent,parser,assert,equals,unexpected,token,after,query,e,get,message,rescore,element,try,xcontent,parser,parser,create,parser,rescore,element,exception,e,expect,throws,parsing,exception,class,rescorer,builder,parse,from,xcontent,parser,assert,equals,missing,rescore,type,e,get,message,rescore,element,n,20,n,query,1,0,n,n,try,xcontent,parser,parser,create,parser,rescore,element,xcontent,parse,exception,e,expect,throws,xcontent,parse,exception,class,rescorer,builder,parse,from,xcontent,parser,assert,equals,3,17,query,unknown,field,parser,not,found,e,get,message,rescore,element,n,20,n,query,n,n,try,xcontent,parser,parser,create,parser,rescore,element,exception,e,expect,throws,xcontent,parse,exception,class,rescorer,builder,parse,from,xcontent,parser,assert,that,e,get,message,contains,string,query,failed,to,parse,field,rescore,element,n,20,n,query,n,n,try,xcontent,parser,parser,create,parser,rescore,element,rescorer,builder,parse,from,xcontent,parser
QueryRescorerBuilderTests -> private XContentParser createParser(String rescoreElement) throws IOException;1524684173;create a new parser from the rescorer string representation and reset context with it;private XContentParser createParser(String rescoreElement) throws IOException {_        XContentParser parser = createParser(JsonXContent.jsonXContent, rescoreElement)__        _        assertTrue(parser.nextToken() == XContentParser.Token.START_OBJECT)__        return parser__    };create,a,new,parser,from,the,rescorer,string,representation,and,reset,context,with,it;private,xcontent,parser,create,parser,string,rescore,element,throws,ioexception,xcontent,parser,parser,create,parser,json,xcontent,json,xcontent,rescore,element,assert,true,parser,next,token,xcontent,parser,token,return,parser
QueryRescorerBuilderTests -> private XContentParser createParser(String rescoreElement) throws IOException;1528167589;create a new parser from the rescorer string representation and reset context with it;private XContentParser createParser(String rescoreElement) throws IOException {_        XContentParser parser = createParser(JsonXContent.jsonXContent, rescoreElement)__        _        assertTrue(parser.nextToken() == XContentParser.Token.START_OBJECT)__        return parser__    };create,a,new,parser,from,the,rescorer,string,representation,and,reset,context,with,it;private,xcontent,parser,create,parser,string,rescore,element,throws,ioexception,xcontent,parser,parser,create,parser,json,xcontent,json,xcontent,rescore,element,assert,true,parser,next,token,xcontent,parser,token,return,parser
QueryRescorerBuilderTests -> private XContentParser createParser(String rescoreElement) throws IOException;1529916084;create a new parser from the rescorer string representation and reset context with it;private XContentParser createParser(String rescoreElement) throws IOException {_        XContentParser parser = createParser(JsonXContent.jsonXContent, rescoreElement)__        _        assertTrue(parser.nextToken() == XContentParser.Token.START_OBJECT)__        return parser__    };create,a,new,parser,from,the,rescorer,string,representation,and,reset,context,with,it;private,xcontent,parser,create,parser,string,rescore,element,throws,ioexception,xcontent,parser,parser,create,parser,json,xcontent,json,xcontent,rescore,element,assert,true,parser,next,token,xcontent,parser,token,return,parser
QueryRescorerBuilderTests -> private XContentParser createParser(String rescoreElement) throws IOException;1538067637;create a new parser from the rescorer string representation and reset context with it;private XContentParser createParser(String rescoreElement) throws IOException {_        XContentParser parser = createParser(JsonXContent.jsonXContent, rescoreElement)__        _        assertTrue(parser.nextToken() == XContentParser.Token.START_OBJECT)__        return parser__    };create,a,new,parser,from,the,rescorer,string,representation,and,reset,context,with,it;private,xcontent,parser,create,parser,string,rescore,element,throws,ioexception,xcontent,parser,parser,create,parser,json,xcontent,json,xcontent,rescore,element,assert,true,parser,next,token,xcontent,parser,token,return,parser
QueryRescorerBuilderTests -> private XContentParser createParser(String rescoreElement) throws IOException;1545252138;create a new parser from the rescorer string representation and reset context with it;private XContentParser createParser(String rescoreElement) throws IOException {_        XContentParser parser = createParser(JsonXContent.jsonXContent, rescoreElement)__        _        assertTrue(parser.nextToken() == XContentParser.Token.START_OBJECT)__        return parser__    };create,a,new,parser,from,the,rescorer,string,representation,and,reset,context,with,it;private,xcontent,parser,create,parser,string,rescore,element,throws,ioexception,xcontent,parser,parser,create,parser,json,xcontent,json,xcontent,rescore,element,assert,true,parser,next,token,xcontent,parser,token,return,parser
