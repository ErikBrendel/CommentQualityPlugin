commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;public void testPageCacheLimitHeapSetting() {     assertMemorySizeSetting(PageCacheRecycler.LIMIT_HEAP_SETTING, "cache.recycler.page.limit.heap", new ByteSizeValue((long) (JvmInfo.jvmInfo().getMem().getHeapMax().getBytes() * 0.1))). }
false;public;0;4;;public void testIndexBufferSizeSetting() {     assertMemorySizeSetting(IndexingMemoryController.INDEX_BUFFER_SIZE_SETTING, "indices.memory.index_buffer_size", new ByteSizeValue((long) (JvmInfo.jvmInfo().getMem().getHeapMax().getBytes() * 0.1))). }
false;public;0;4;;public void testQueryCacheSizeSetting() {     assertMemorySizeSetting(IndicesQueryCache.INDICES_CACHE_QUERY_SIZE_SETTING, "indices.queries.cache.size", new ByteSizeValue((long) (JvmInfo.jvmInfo().getMem().getHeapMax().getBytes() * 0.1))). }
false;public;0;4;;public void testIndicesRequestCacheSetting() {     assertMemorySizeSetting(IndicesRequestCache.INDICES_CACHE_QUERY_SIZE, "indices.requests.cache.size", new ByteSizeValue((long) (JvmInfo.jvmInfo().getMem().getHeapMax().getBytes() * 0.01))). }
false;public;0;17;;public void testCircuitBreakerSettings() {     // default is chosen based on actual heap size     double defaultTotalPercentage.     if (JvmInfo.jvmInfo().getMem().getHeapMax().getBytes() < new ByteSizeValue(1, ByteSizeUnit.GB).getBytes()) {         defaultTotalPercentage = 0.95d.     } else {         defaultTotalPercentage = 0.7d.     }     assertMemorySizeSetting(HierarchyCircuitBreakerService.TOTAL_CIRCUIT_BREAKER_LIMIT_SETTING, "indices.breaker.total.limit", new ByteSizeValue((long) (JvmInfo.jvmInfo().getMem().getHeapMax().getBytes() * defaultTotalPercentage))).     assertMemorySizeSetting(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_LIMIT_SETTING, "indices.breaker.fielddata.limit", new ByteSizeValue((long) (JvmInfo.jvmInfo().getMem().getHeapMax().getBytes() * 0.4))).     assertMemorySizeSetting(HierarchyCircuitBreakerService.REQUEST_CIRCUIT_BREAKER_LIMIT_SETTING, "indices.breaker.request.limit", new ByteSizeValue((long) (JvmInfo.jvmInfo().getMem().getHeapMax().getBytes() * 0.6))).     assertMemorySizeSetting(HierarchyCircuitBreakerService.IN_FLIGHT_REQUESTS_CIRCUIT_BREAKER_LIMIT_SETTING, "network.breaker.inflight_requests.limit", new ByteSizeValue((JvmInfo.jvmInfo().getMem().getHeapMax().getBytes()))). }
false;public;0;4;;public void testIndicesFieldDataCacheSetting() {     assertMemorySizeSetting(IndicesFieldDataCache.INDICES_FIELDDATA_CACHE_SIZE_KEY, "indices.fielddata.cache.size", new ByteSizeValue(-1)). }
false;private;3;12;;private void assertMemorySizeSetting(Setting<ByteSizeValue> setting, String settingKey, ByteSizeValue defaultValue) {     assertThat(setting, notNullValue()).     assertThat(setting.getKey(), equalTo(settingKey)).     assertThat(setting.getProperties(), hasItem(Property.NodeScope)).     assertThat(setting.getDefault(Settings.EMPTY), equalTo(defaultValue)).     Settings settingWithPercentage = Settings.builder().put(settingKey, "25%").build().     assertThat(setting.get(settingWithPercentage), equalTo(new ByteSizeValue((long) (JvmInfo.jvmInfo().getMem().getHeapMax().getBytes() * 0.25)))).     Settings settingWithBytesValue = Settings.builder().put(settingKey, "1024b").build().     assertThat(setting.get(settingWithBytesValue), equalTo(new ByteSizeValue(1024))). }
