commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;4;;@Override protected void execute(Terminal terminal, OptionSet options) throws Exception {     throw new UserException(ExitCodes.DATA_ERROR, "Bad input"). }
false;protected;0;4;;@Override protected boolean addShutdownHook() {     return false. }
false;protected;2;4;;@Override protected void execute(Terminal terminal, OptionSet options) throws Exception {     throw new UserException(ExitCodes.USAGE, "something was no good"). }
false;protected;0;4;;@Override protected boolean addShutdownHook() {     return false. }
false;protected;2;7;;@Override protected void execute(Terminal terminal, OptionSet options) throws Exception {     terminal.println("Normal output").     terminal.println(Terminal.Verbosity.SILENT, "Silent output").     terminal.println(Terminal.Verbosity.VERBOSE, "Verbose output").     executed = true. }
false;protected;1;4;;@Override protected void printAdditionalHelp(Terminal terminal) {     terminal.println("Some extra help"). }
false;protected;0;4;;@Override protected boolean addShutdownHook() {     return false. }
false;public;0;20;;public void testHelp() throws Exception {     NoopCommand command = new NoopCommand().     MockTerminal terminal = new MockTerminal().     String[] args = { "-h" }.     int status = command.main(args, terminal).     String output = terminal.getOutput().     assertEquals(output, ExitCodes.OK, status).     assertTrue(output, output.contains("Does nothing")).     assertTrue(output, output.contains("Some extra help")).     assertFalse(command.executed).     command = new NoopCommand().     String[] args2 = { "--help" }.     status = command.main(args2, terminal).     output = terminal.getOutput().     assertEquals(output, ExitCodes.OK, status).     assertTrue(output, output.contains("Does nothing")).     assertTrue(output, output.contains("Some extra help")).     assertFalse(command.executed). }
false;public;0;10;;public void testVerbositySilentAndVerbose() throws Exception {     MockTerminal terminal = new MockTerminal().     NoopCommand command = new NoopCommand().     String[] args = { "-v", "-s" }.     OptionException e = expectThrows(OptionException.class, () -> {         command.mainWithoutErrorHandling(args, terminal).     }).     assertTrue(e.getMessage(), e.getMessage().contains("Option(s) [v/verbose] are unavailable given other options on the command line")). }
false;public;0;8;;public void testSilentVerbosity() throws Exception {     MockTerminal terminal = new MockTerminal().     NoopCommand command = new NoopCommand().     String[] args = { "-s" }.     command.main(args, terminal).     String output = terminal.getOutput().     assertTrue(output, output.contains("Silent output")). }
false;public;0;9;;public void testNormalVerbosity() throws Exception {     MockTerminal terminal = new MockTerminal().     terminal.setVerbosity(Terminal.Verbosity.SILENT).     NoopCommand command = new NoopCommand().     String[] args = {}.     command.main(args, terminal).     String output = terminal.getOutput().     assertTrue(output, output.contains("Normal output")). }
false;public;0;8;;public void testVerboseVerbosity() throws Exception {     MockTerminal terminal = new MockTerminal().     NoopCommand command = new NoopCommand().     String[] args = { "-v" }.     command.main(args, terminal).     String output = terminal.getOutput().     assertTrue(output, output.contains("Verbose output")). }
false;public;0;9;;public void testUserError() throws Exception {     MockTerminal terminal = new MockTerminal().     UserErrorCommand command = new UserErrorCommand().     String[] args = {}.     int status = command.main(args, terminal).     String output = terminal.getOutput().     assertEquals(output, ExitCodes.DATA_ERROR, status).     assertTrue(output, output.contains("ERROR: Bad input")). }
false;public;0;10;;public void testUsageError() throws Exception {     MockTerminal terminal = new MockTerminal().     UsageErrorCommand command = new UsageErrorCommand().     String[] args = {}.     int status = command.main(args, terminal).     String output = terminal.getOutput().     assertEquals(output, ExitCodes.USAGE, status).     assertTrue(output, output.contains("Throws a usage error")).     assertTrue(output, output.contains("ERROR: something was no good")). }
