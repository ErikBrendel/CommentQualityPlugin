commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public void testGetOverList() {     test(Arrays.asList("a", "b", "c")). }
false;public;0;4;;@Override public boolean hasNext() {     return position < 3. }
false;public;0;10;;@Override public String next() {     if (position < 3) {         String s = position == 0 ? "a" : position == 1 ? "b" : "c".         position++.         return s.     } else {         throw new NoSuchElementException().     } }
false;public;0;23;;public void testGetOverIterable() {     Iterable<String> iterable = () -> new Iterator<String>() {          private int position = 0.          @Override         public boolean hasNext() {             return position < 3.         }          @Override         public String next() {             if (position < 3) {                 String s = position == 0 ? "a" : position == 1 ? "b" : "c".                 position++.                 return s.             } else {                 throw new NoSuchElementException().             }         }     }.     test(iterable). }
false;public;0;27;;public void testFlatten() {     List<List<Integer>> list = new ArrayList<>().     list.add(new ArrayList<>()).     Iterable<Integer> allInts = Iterables.flatten(list).     int count = 0.     for (@SuppressWarnings("unused") int x : allInts) {         count++.     }     assertEquals(0, count).     list.add(new ArrayList<>()).     list.get(1).add(0).     // changes to the outer list are not seen since flatten pre-caches outer list on init:     count = 0.     for (@SuppressWarnings("unused") int x : allInts) {         count++.     }     assertEquals(0, count).     // but changes to the original inner lists are seen:     list.get(0).add(0).     for (@SuppressWarnings("unused") int x : allInts) {         count++.     }     assertEquals(1, count). }
false;private;1;17;;private void test(Iterable<String> iterable) {     try {         Iterables.get(iterable, -1).         fail("expected IllegalArgumentException").     } catch (IllegalArgumentException e) {         assertThat(e, hasToString("java.lang.IllegalArgumentException: position >= 0")).     }     assertEquals("a", Iterables.get(iterable, 0)).     assertEquals("b", Iterables.get(iterable, 1)).     assertEquals("c", Iterables.get(iterable, 2)).     try {         Iterables.get(iterable, 3).         fail("expected IndexOutOfBoundsException").     } catch (IndexOutOfBoundsException e) {         assertThat(e, hasToString("java.lang.IndexOutOfBoundsException: 3")).     } }
