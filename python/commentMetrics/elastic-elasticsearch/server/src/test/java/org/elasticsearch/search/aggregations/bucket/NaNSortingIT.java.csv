commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override public AvgAggregationBuilder builder() {     AvgAggregationBuilder factory = avg(name).     factory.field("numeric_field").     return factory. }
false;public;1;4;;@Override public double getValue(Aggregation aggregation) {     return ((Avg) aggregation).getValue(). }
false;public;0;6;;@Override public ExtendedStatsAggregationBuilder builder() {     ExtendedStatsAggregationBuilder factory = extendedStats(name).     factory.field("numeric_field").     return factory. }
false;public;0;4;;@Override public String sortKey() {     return name + ".variance". }
false;public;1;4;;@Override public double getValue(Aggregation aggregation) {     return ((ExtendedStats) aggregation).getVariance(). }
false;public;0;6;;@Override public ExtendedStatsAggregationBuilder builder() {     ExtendedStatsAggregationBuilder factory = extendedStats(name).     factory.field("numeric_field").     return factory. }
false;public;0;4;;@Override public String sortKey() {     return name + ".std_deviation". }
false;public;1;4;;@Override public double getValue(Aggregation aggregation) {     return ((ExtendedStats) aggregation).getStdDeviation(). }
false;public,abstract;0;2;;public abstract ValuesSourceAggregationBuilder.LeafOnly<ValuesSource.Numeric, ? extends ValuesSourceAggregationBuilder.LeafOnly<ValuesSource.Numeric, ?>> builder().
false;public;0;3;;public String sortKey() {     return name. }
false;public,abstract;1;1;;public abstract double getValue(Aggregation aggregation).
false;public;0;17;;@Override public void setupSuiteScopeCluster() throws Exception {     assertAcked(client().admin().indices().prepareCreate("idx").addMapping("type", "string_value", "type=keyword").get()).     final int numDocs = randomIntBetween(2, 10).     for (int i = 0. i < numDocs. ++i) {         final long value = randomInt(5).         XContentBuilder source = jsonBuilder().startObject().field("long_value", value).field("double_value", value + 0.05).field("string_value", "str_" + value).         if (randomBoolean()) {             source.field("numeric_value", randomDouble()).         }         client().prepareIndex("idx", "type").setSource(source.endObject()).get().     }     refresh().     ensureSearchable(). }
false;private;3;10;;private void assertCorrectlySorted(Terms terms, boolean asc, SubAggregation agg) {     assertThat(terms, notNullValue()).     double previousValue = asc ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY.     for (Terms.Bucket bucket : terms.getBuckets()) {         Aggregation sub = bucket.getAggregations().get(agg.name).         double value = agg.getValue(sub).         assertTrue(Comparators.compareDiscardNaN(previousValue, value, asc) <= 0).         previousValue = value.     } }
false;private;3;10;;private void assertCorrectlySorted(Histogram histo, boolean asc, SubAggregation agg) {     assertThat(histo, notNullValue()).     double previousValue = asc ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY.     for (Histogram.Bucket bucket : histo.getBuckets()) {         Aggregation sub = bucket.getAggregations().get(agg.name).         double value = agg.getValue(sub).         assertTrue(Comparators.compareDiscardNaN(previousValue, value, asc) <= 0).         previousValue = value.     } }
false;public;1;12;;public void testTerms(String fieldName) {     final boolean asc = randomBoolean().     SubAggregation agg = randomFrom(SubAggregation.values()).     SearchResponse response = client().prepareSearch("idx").addAggregation(terms("terms").field(fieldName).collectMode(randomFrom(SubAggCollectionMode.values())).subAggregation(agg.builder()).order(BucketOrder.aggregation(agg.sortKey(), asc))).get().     assertSearchResponse(response).     final Terms terms = response.getAggregations().get("terms").     assertCorrectlySorted(terms, asc, agg). }
false;public;0;3;;public void testStringTerms() {     testTerms("string_value"). }
false;public;0;3;;public void testLongTerms() {     testTerms("long_value"). }
false;public;0;3;;public void testDoubleTerms() {     testTerms("double_value"). }
false;public;0;13;;public void testLongHistogram() {     final boolean asc = randomBoolean().     SubAggregation agg = randomFrom(SubAggregation.values()).     SearchResponse response = client().prepareSearch("idx").addAggregation(histogram("histo").field("long_value").interval(randomIntBetween(1, 2)).subAggregation(agg.builder()).order(BucketOrder.aggregation(agg.sortKey(), asc))).get().     assertSearchResponse(response).     final Histogram histo = response.getAggregations().get("histo").     assertCorrectlySorted(histo, asc, agg). }
