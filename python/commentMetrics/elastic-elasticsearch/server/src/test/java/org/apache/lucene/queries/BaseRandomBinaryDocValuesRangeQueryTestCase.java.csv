commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public void testMultiValued() throws Exception { // Can't test this how BaseRangeFieldQueryTestCase works now, because we're using BinaryDocValuesField here. }
false;protected,final;1;11;;@Override protected final Field newRangeField(Range box) {     AbstractRange<?> testRange = (AbstractRange<?>) box.     RangeFieldMapper.Range range = new RangeFieldMapper.Range(rangeType(), testRange.getMin(), testRange.getMax(), true, true).     try {         BytesRef encodeRange = rangeType().encodeRanges(Collections.singleton(range)).         return new BinaryDocValuesField(fieldName(), encodeRange).     } catch (IOException e) {         throw new RuntimeException(e).     } }
false;protected,final;1;5;;@Override protected final Query newIntersectsQuery(Range box) {     AbstractRange<?> testRange = (AbstractRange<?>) box.     return rangeType().dvRangeQuery(fieldName(), INTERSECTS, testRange.getMin(), testRange.getMax(), true, true). }
false;protected,final;1;5;;@Override protected final Query newContainsQuery(Range box) {     AbstractRange<?> testRange = (AbstractRange<?>) box.     return rangeType().dvRangeQuery(fieldName(), CONTAINS, testRange.getMin(), testRange.getMax(), true, true). }
false;protected,final;1;5;;@Override protected final Query newWithinQuery(Range box) {     AbstractRange<?> testRange = (AbstractRange<?>) box.     return rangeType().dvRangeQuery(fieldName(), WITHIN, testRange.getMin(), testRange.getMax(), true, true). }
false;protected,final;1;5;;@Override protected final Query newCrossesQuery(Range box) {     AbstractRange<?> testRange = (AbstractRange<?>) box.     return rangeType().dvRangeQuery(fieldName(), CROSSES, testRange.getMin(), testRange.getMax(), true, true). }
false;protected,final;0;4;;@Override protected final int dimension() {     return 1. }
false;protected,abstract;0;1;;protected abstract String fieldName().
false;protected,abstract;0;1;;protected abstract RangeFieldMapper.RangeType rangeType().
false;protected,final;0;3;;protected final int numDimensions() {     return 1. }
false;protected,final;1;5;;@Override protected final Object getMin(int dim) {     assert dim == 0.     return getMin(). }
false;public,abstract;0;1;;public abstract T getMin().
false;protected,final;1;5;;@Override protected final Object getMax(int dim) {     assert dim == 0.     return getMax(). }
false;public,abstract;0;1;;public abstract T getMax().
false;protected,final;1;5;;@Override protected final boolean isEqual(Range o) {     AbstractRange<?> other = (AbstractRange<?>) o.     return Objects.equals(getMin(), other.getMin()) && Objects.equals(getMax(), other.getMax()). }
false;public,final;0;4;;@Override public final String toString() {     return "Box(" + getMin() + " TO " + getMax() + ")". }
