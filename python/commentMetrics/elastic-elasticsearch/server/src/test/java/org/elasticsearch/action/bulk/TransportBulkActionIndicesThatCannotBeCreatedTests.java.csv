commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;public void testNonExceptional() {     BulkRequest bulkRequest = new BulkRequest().     bulkRequest.add(new IndexRequest(randomAlphaOfLength(5))).     bulkRequest.add(new IndexRequest(randomAlphaOfLength(5))).     bulkRequest.add(new DeleteRequest(randomAlphaOfLength(5))).     bulkRequest.add(new UpdateRequest(randomAlphaOfLength(5), randomAlphaOfLength(5), randomAlphaOfLength(5))).     // Test emulating auto_create_index=false     indicesThatCannotBeCreatedTestCase(emptySet(), bulkRequest, null).     // Test emulating auto_create_index=true     indicesThatCannotBeCreatedTestCase(emptySet(), bulkRequest, index -> true).     // Test emulating all indices already created     indicesThatCannotBeCreatedTestCase(emptySet(), bulkRequest, index -> false).     // Test emulating auto_create_index=true with some indices already created.     indicesThatCannotBeCreatedTestCase(emptySet(), bulkRequest, index -> randomBoolean()). }
false;public;0;10;;public void testAllFail() {     BulkRequest bulkRequest = new BulkRequest().     bulkRequest.add(new IndexRequest("no")).     bulkRequest.add(new IndexRequest("can't")).     bulkRequest.add(new DeleteRequest("do").version(0).versionType(VersionType.EXTERNAL)).     bulkRequest.add(new UpdateRequest("nothin", randomAlphaOfLength(5), randomAlphaOfLength(5))).     indicesThatCannotBeCreatedTestCase(new HashSet<>(Arrays.asList("no", "can't", "do", "nothin")), bulkRequest, index -> {         throw new IndexNotFoundException("Can't make it because I say so").     }). }
false;public;0;19;;public void testSomeFail() {     BulkRequest bulkRequest = new BulkRequest().     bulkRequest.add(new IndexRequest("ok")).     bulkRequest.add(new IndexRequest("bad")).     // Emulate auto_create_index=-bad,+*     indicesThatCannotBeCreatedTestCase(singleton("bad"), bulkRequest, index -> {         if (index.equals("bad")) {             throw new IndexNotFoundException("Can't make it because I say so").         }         return true.     }).     // Emulate auto_create_index=false but the "ok" index already exists     indicesThatCannotBeCreatedTestCase(singleton("bad"), bulkRequest, index -> {         if (index.equals("bad")) {             throw new IndexNotFoundException("Can't make it because I say so").         }         return false.     }). }
false;;6;5;;@Override void executeBulk(Task task, BulkRequest bulkRequest, long startTimeNanos, ActionListener<BulkResponse> listener, AtomicArray<BulkItemResponse> responses, Map<String, IndexNotFoundException> indicesThatCannotBeCreated) {     assertEquals(expected, indicesThatCannotBeCreated.keySet()). }
false;;0;4;;@Override boolean needToCheck() {     // Use "null" to mean "no indices can be created so don't bother checking"     return null != shouldAutoCreate. }
false;;2;4;;@Override boolean shouldAutoCreate(String index, ClusterState state) {     return shouldAutoCreate.apply(index). }
false;;3;5;;@Override void createIndex(String index, TimeValue timeout, ActionListener<CreateIndexResponse> listener) {     // If we try to create an index just immediately assume it worked     listener.onResponse(new CreateIndexResponse(true, true, index) {     }). }
false;private;3;32;;private void indicesThatCannotBeCreatedTestCase(Set<String> expected, BulkRequest bulkRequest, Function<String, Boolean> shouldAutoCreate) {     ClusterService clusterService = mock(ClusterService.class).     ClusterState state = mock(ClusterState.class).     when(state.getMetaData()).thenReturn(MetaData.EMPTY_META_DATA).     when(clusterService.state()).thenReturn(state).     TransportBulkAction action = new TransportBulkAction(null, mock(TransportService.class), clusterService, null, null, null, mock(ActionFilters.class), null, null) {          @Override         void executeBulk(Task task, BulkRequest bulkRequest, long startTimeNanos, ActionListener<BulkResponse> listener, AtomicArray<BulkItemResponse> responses, Map<String, IndexNotFoundException> indicesThatCannotBeCreated) {             assertEquals(expected, indicesThatCannotBeCreated.keySet()).         }          @Override         boolean needToCheck() {             // Use "null" to mean "no indices can be created so don't bother checking"             return null != shouldAutoCreate.         }          @Override         boolean shouldAutoCreate(String index, ClusterState state) {             return shouldAutoCreate.apply(index).         }          @Override         void createIndex(String index, TimeValue timeout, ActionListener<CreateIndexResponse> listener) {             // If we try to create an index just immediately assume it worked             listener.onResponse(new CreateIndexResponse(true, true, index) {             }).         }     }.     action.doExecute(null, bulkRequest, null). }
