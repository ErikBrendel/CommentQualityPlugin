commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;9;;public static NestedIdentity createTestItem(int depth) {     String field = frequently() ? randomAlphaOfLengthBetween(1, 20) : randomRealisticUnicodeOfCodepointLengthBetween(1, 20).     int offset = randomInt(10).     NestedIdentity child = null.     if (depth > 0) {         child = createTestItem(depth - 1).     }     return new NestedIdentity(field, offset, child). }
false;public;0;14;;public void testFromXContent() throws IOException {     NestedIdentity nestedIdentity = createTestItem(randomInt(3)).     XContentType xcontentType = randomFrom(XContentType.values()).     XContentBuilder builder = XContentFactory.contentBuilder(xcontentType).     if (randomBoolean()) {         builder.prettyPrint().     }     builder = nestedIdentity.innerToXContent(builder, ToXContent.EMPTY_PARAMS).     try (XContentParser parser = createParser(builder)) {         NestedIdentity parsedNestedIdentity = NestedIdentity.fromXContent(parser).         assertEquals(nestedIdentity, parsedNestedIdentity).         assertNull(parser.nextToken()).     } }
false;public;0;33;;public void testToXContent() throws IOException {     NestedIdentity nestedIdentity = new NestedIdentity("foo", 5, null).     XContentBuilder builder = JsonXContent.contentBuilder().     builder.prettyPrint().     builder.startObject().     nestedIdentity.toXContent(builder, ToXContent.EMPTY_PARAMS).     builder.endObject().     assertEquals("{\n" + "  \"_nested\" : {\n" + "    \"field\" : \"foo\",\n" + "    \"offset\" : 5\n" + "  }\n" + "}", Strings.toString(builder)).     nestedIdentity = new NestedIdentity("foo", 5, new NestedIdentity("bar", 3, null)).     builder = JsonXContent.contentBuilder().     builder.prettyPrint().     builder.startObject().     nestedIdentity.toXContent(builder, ToXContent.EMPTY_PARAMS).     builder.endObject().     assertEquals("{\n" + "  \"_nested\" : {\n" + "    \"field\" : \"foo\",\n" + "    \"offset\" : 5,\n" + "    \"_nested\" : {\n" + "      \"field\" : \"bar\",\n" + "      \"offset\" : 3\n" + "    }\n" + "  }\n" + "}", Strings.toString(builder)). }
true;public;0;3;/**  * Test equality and hashCode properties  */ ;/**  * Test equality and hashCode properties  */ public void testEqualsAndHashcode() {     checkEqualsAndHashCode(createTestItem(randomInt(3)), NestedIdentityTests::copy, NestedIdentityTests::mutate). }
false;public;0;12;;public void testSerialization() throws IOException {     NestedIdentity nestedIdentity = createTestItem(randomInt(3)).     try (BytesStreamOutput output = new BytesStreamOutput()) {         nestedIdentity.writeTo(output).         try (StreamInput in = output.bytes().streamInput()) {             NestedIdentity deserializedCopy = new NestedIdentity(in).             assertEquals(nestedIdentity, deserializedCopy).             assertEquals(nestedIdentity.hashCode(), deserializedCopy.hashCode()).             assertNotSame(nestedIdentity, deserializedCopy).         }     } }
false;private,static;1;14;;private static NestedIdentity mutate(NestedIdentity original) {     if (original == null) {         return createTestItem(0).     }     List<Supplier<NestedIdentity>> mutations = new ArrayList<>().     int offset = original.getOffset().     NestedIdentity child = (NestedIdentity) original.getChild().     String fieldName = original.getField().string().     mutations.add(() -> new NestedIdentity(original.getField().string() + "_prefix", offset, child)).     mutations.add(() -> new NestedIdentity(fieldName, offset + 1, child)).     mutations.add(() -> new NestedIdentity(fieldName, offset, mutate(child))).     return randomFrom(mutations).get(). }
false;private,static;1;4;;private static NestedIdentity copy(NestedIdentity original) {     NestedIdentity child = original.getChild().     return new NestedIdentity(original.getField().string(), original.getOffset(), child != null ? copy(child) : null). }
