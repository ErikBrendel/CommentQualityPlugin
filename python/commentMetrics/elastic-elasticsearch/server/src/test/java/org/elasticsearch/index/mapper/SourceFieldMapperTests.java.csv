commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> getPlugins() {     return pluginList(InternalSettingsPlugin.class). }
false;public;0;24;;public void testNoFormat() throws Exception {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_source").endObject().endObject().endObject()).     DocumentMapperParser parser = createIndex("test").mapperService().documentMapperParser().     DocumentMapper documentMapper = parser.parse("type", new CompressedXContent(mapping)).     ParsedDocument doc = documentMapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field", "value").endObject()), XContentType.JSON)).     assertThat(XContentFactory.xContentType(doc.source().toBytesRef().bytes), equalTo(XContentType.JSON)).     documentMapper = parser.parse("type", new CompressedXContent(mapping)).     doc = documentMapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.smileBuilder().startObject().field("field", "value").endObject()), XContentType.SMILE)).     assertThat(XContentHelper.xContentType(doc.source()), equalTo(XContentType.SMILE)). }
false;public;0;23;;public void testIncludes() throws Exception {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_source").array("includes", new String[] { "path1*" }).endObject().endObject().endObject()).     DocumentMapper documentMapper = createIndex("test").mapperService().documentMapperParser().parse("type", new CompressedXContent(mapping)).     ParsedDocument doc = documentMapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().startObject("path1").field("field1", "value1").endObject().startObject("path2").field("field2", "value2").endObject().endObject()), XContentType.JSON)).     IndexableField sourceField = doc.rootDoc().getField("_source").     Map<String, Object> sourceAsMap.     try (XContentParser parser = createParser(JsonXContent.jsonXContent, new BytesArray(sourceField.binaryValue()))) {         sourceAsMap = parser.map().     }     assertThat(sourceAsMap.containsKey("path1"), equalTo(true)).     assertThat(sourceAsMap.containsKey("path2"), equalTo(false)). }
false;public;0;23;;public void testExcludes() throws Exception {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_source").array("excludes", new String[] { "path1*" }).endObject().endObject().endObject()).     DocumentMapper documentMapper = createIndex("test").mapperService().documentMapperParser().parse("type", new CompressedXContent(mapping)).     ParsedDocument doc = documentMapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().startObject("path1").field("field1", "value1").endObject().startObject("path2").field("field2", "value2").endObject().endObject()), XContentType.JSON)).     IndexableField sourceField = doc.rootDoc().getField("_source").     Map<String, Object> sourceAsMap.     try (XContentParser parser = createParser(JsonXContent.jsonXContent, new BytesArray(sourceField.binaryValue()))) {         sourceAsMap = parser.map().     }     assertThat(sourceAsMap.containsKey("path1"), equalTo(false)).     assertThat(sourceAsMap.containsKey("path2"), equalTo(true)). }
false;private;4;16;;private void assertConflicts(String mapping1, String mapping2, DocumentMapperParser parser, String... conflicts) throws IOException {     DocumentMapper docMapper = parser.parse("type", new CompressedXContent(mapping1)).     docMapper = parser.parse("type", docMapper.mappingSource()).     if (conflicts.length == 0) {         docMapper.merge(parser.parse("type", new CompressedXContent(mapping2)).mapping()).     } else {         try {             docMapper.merge(parser.parse("type", new CompressedXContent(mapping2)).mapping()).             fail().         } catch (IllegalArgumentException e) {             for (String conflict : conflicts) {                 assertThat(e.getMessage(), containsString(conflict)).             }         }     } }
false;public;0;15;;public void testEnabledNotUpdateable() throws Exception {     DocumentMapperParser parser = createIndex("test").mapperService().documentMapperParser().     // using default of true     String mapping1 = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").endObject().endObject()).     String mapping2 = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_source").field("enabled", false).endObject().endObject().endObject()).     assertConflicts(mapping1, mapping2, parser, "Cannot update enabled setting for [_source]").     // not changing is ok     String mapping3 = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_source").field("enabled", true).endObject().endObject().endObject()).     assertConflicts(mapping1, mapping3, parser). }
false;public;0;17;;public void testIncludesNotUpdateable() throws Exception {     DocumentMapperParser parser = createIndex("test").mapperService().documentMapperParser().     String defaultMapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").endObject().endObject()).     String mapping1 = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_source").array("includes", "foo.*").endObject().endObject().endObject()).     assertConflicts(defaultMapping, mapping1, parser, "Cannot update includes setting for [_source]").     assertConflicts(mapping1, defaultMapping, parser, "Cannot update includes setting for [_source]").     String mapping2 = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_source").array("includes", "foo.*", "bar.*").endObject().endObject().endObject()).     assertConflicts(mapping1, mapping2, parser, "Cannot update includes setting for [_source]").     // not changing is ok     assertConflicts(mapping1, mapping1, parser). }
false;public;0;17;;public void testExcludesNotUpdateable() throws Exception {     DocumentMapperParser parser = createIndex("test").mapperService().documentMapperParser().     String defaultMapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").endObject().endObject()).     String mapping1 = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_source").array("excludes", "foo.*").endObject().endObject().endObject()).     assertConflicts(defaultMapping, mapping1, parser, "Cannot update excludes setting for [_source]").     assertConflicts(mapping1, defaultMapping, parser, "Cannot update excludes setting for [_source]").     String mapping2 = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_source").array("excludes", "foo.*", "bar.*").endObject().endObject().endObject()).     assertConflicts(mapping1, mapping2, parser, "Cannot update excludes setting for [_source]").     // not changing is ok     assertConflicts(mapping1, mapping1, parser). }
false;public;0;20;;public void testComplete() throws Exception {     DocumentMapperParser parser = createIndex("test").mapperService().documentMapperParser().     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").endObject().endObject()).     assertTrue(parser.parse("type", new CompressedXContent(mapping)).sourceMapper().isComplete()).     mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_source").field("enabled", false).endObject().endObject().endObject()).     assertFalse(parser.parse("type", new CompressedXContent(mapping)).sourceMapper().isComplete()).     mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_source").array("includes", "foo.*").endObject().endObject().endObject()).     assertFalse(parser.parse("type", new CompressedXContent(mapping)).sourceMapper().isComplete()).     mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_source").array("excludes", "foo.*").endObject().endObject().endObject()).     assertFalse(parser.parse("type", new CompressedXContent(mapping)).sourceMapper().isComplete()). }
false;public;0;15;;public void testSourceObjectContainsExtraTokens() throws Exception {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").endObject().endObject()).     DocumentMapper documentMapper = createIndex("test").mapperService().documentMapperParser().parse("type", new CompressedXContent(mapping)).     try {         documentMapper.parse(new SourceToParse("test", "type", "1", new BytesArray("{}}"), // extra end object (invalid JSON)         XContentType.JSON)).         fail("Expected parse exception").     } catch (MapperParsingException e) {         assertNotNull(e.getRootCause()).         String message = e.getRootCause().getMessage().         assertTrue(message, message.contains("Unexpected close marker '}'")).     } }
