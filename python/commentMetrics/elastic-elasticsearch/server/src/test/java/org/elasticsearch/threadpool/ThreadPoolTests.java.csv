commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;public void testBoundedByBelowMin() {     int min = randomIntBetween(0, 32).     int max = randomIntBetween(min + 1, 64).     int value = randomIntBetween(Integer.MIN_VALUE, min - 1).     assertThat(ThreadPool.boundedBy(value, min, max), equalTo(min)). }
false;public;0;6;;public void testBoundedByAboveMax() {     int min = randomIntBetween(0, 32).     int max = randomIntBetween(min + 1, 64).     int value = randomIntBetween(max + 1, Integer.MAX_VALUE).     assertThat(ThreadPool.boundedBy(value, min, max), equalTo(max)). }
false;public;0;6;;public void testBoundedByBetweenMinAndMax() {     int min = randomIntBetween(0, 32).     int max = randomIntBetween(min + 1, 64).     int value = randomIntBetween(min, max).     assertThat(ThreadPool.boundedBy(value, min, max), equalTo(value)). }
false;public;0;13;;public void testAbsoluteTime() throws Exception {     TestThreadPool threadPool = new TestThreadPool("test").     try {         long currentTime = System.currentTimeMillis().         long gotTime = threadPool.absoluteTimeInMillis().         long delta = Math.abs(gotTime - currentTime).         assertTrue("thread pool cached absolute time " + gotTime + " is too far from real current time " + currentTime, // the delta can be large, we just care it is the same order of magnitude         delta < 10000).     } finally {         threadPool.shutdown().         threadPool.close().     } }
false;public;0;5;;public void testEstimatedTimeIntervalSettingAcceptsOnlyZeroAndPositiveTime() {     Settings settings = Settings.builder().put("thread_pool.estimated_time_interval", -1).build().     Exception e = expectThrows(IllegalArgumentException.class, () -> ESTIMATED_TIME_INTERVAL_SETTING.get(settings)).     assertEquals("failed to parse value [-1] for setting [thread_pool.estimated_time_interval], must be >= [0ms]", e.getMessage()). }
