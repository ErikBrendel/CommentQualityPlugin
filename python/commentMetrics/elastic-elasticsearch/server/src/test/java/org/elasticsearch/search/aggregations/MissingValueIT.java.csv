commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected int maximumNumberOfShards() {     return 2. }
false;protected;0;9;;@Override protected void setupSuiteScopeCluster() throws Exception {     assertAcked(prepareCreate("idx").addMapping("type", "date", "type=date", "location", "type=geo_point", "str", "type=keyword").get()).     indexRandom(true, client().prepareIndex("idx", "type", "1").setSource(), client().prepareIndex("idx", "type", "2").setSource("str", "foo", "long", 3L, "double", 5.5, "date", "2015-05-07", "location", "1,2")). }
false;public;0;8;;public void testUnmappedTerms() {     SearchResponse response = client().prepareSearch("idx").addAggregation(terms("my_terms").field("non_existing_field").missing("bar")).get().     assertSearchResponse(response).     Terms terms = response.getAggregations().get("my_terms").     assertEquals(1, terms.getBuckets().size()).     assertEquals(2, terms.getBucketByKey("bar").getDocCount()). }
false;public;0;20;;public void testStringTerms() {     for (ExecutionMode mode : ExecutionMode.values()) {         SearchResponse response = client().prepareSearch("idx").addAggregation(terms("my_terms").field("str").executionHint(mode.toString()).missing("bar")).get().         assertSearchResponse(response).         Terms terms = response.getAggregations().get("my_terms").         assertEquals(2, terms.getBuckets().size()).         assertEquals(1, terms.getBucketByKey("foo").getDocCount()).         assertEquals(1, terms.getBucketByKey("bar").getDocCount()).         response = client().prepareSearch("idx").addAggregation(terms("my_terms").field("str").missing("foo")).get().         assertSearchResponse(response).         terms = response.getAggregations().get("my_terms").         assertEquals(1, terms.getBuckets().size()).         assertEquals(2, terms.getBucketByKey("foo").getDocCount()).     } }
false;public;0;16;;public void testLongTerms() {     SearchResponse response = client().prepareSearch("idx").addAggregation(terms("my_terms").field("long").missing(4)).get().     assertSearchResponse(response).     Terms terms = response.getAggregations().get("my_terms").     assertEquals(2, terms.getBuckets().size()).     assertEquals(1, terms.getBucketByKey("3").getDocCount()).     assertEquals(1, terms.getBucketByKey("4").getDocCount()).     response = client().prepareSearch("idx").addAggregation(terms("my_terms").field("long").missing(3)).get().     assertSearchResponse(response).     terms = response.getAggregations().get("my_terms").     assertEquals(1, terms.getBuckets().size()).     assertEquals(2, terms.getBucketByKey("3").getDocCount()). }
false;public;0;15;;public void testDoubleTerms() {     SearchResponse response = client().prepareSearch("idx").addAggregation(terms("my_terms").field("double").missing(4.5)).get().     assertSearchResponse(response).     Terms terms = response.getAggregations().get("my_terms").     assertEquals(2, terms.getBuckets().size()).     assertEquals(1, terms.getBucketByKey("4.5").getDocCount()).     assertEquals(1, terms.getBucketByKey("5.5").getDocCount()).     response = client().prepareSearch("idx").addAggregation(terms("my_terms").field("double").missing(5.5)).get().     assertSearchResponse(response).     terms = response.getAggregations().get("my_terms").     assertEquals(1, terms.getBuckets().size()).     assertEquals(2, terms.getBucketByKey("5.5").getDocCount()). }
false;public;0;9;;public void testUnmappedHistogram() {     SearchResponse response = client().prepareSearch("idx").addAggregation(histogram("my_histogram").field("non-existing_field").interval(5).missing(12)).get().     assertSearchResponse(response).     Histogram histogram = response.getAggregations().get("my_histogram").     assertEquals(1, histogram.getBuckets().size()).     assertEquals(10d, histogram.getBuckets().get(0).getKey()).     assertEquals(2, histogram.getBuckets().get(0).getDocCount()). }
false;public;0;19;;public void testHistogram() {     SearchResponse response = client().prepareSearch("idx").addAggregation(histogram("my_histogram").field("long").interval(5).missing(7)).get().     assertSearchResponse(response).     Histogram histogram = response.getAggregations().get("my_histogram").     assertEquals(2, histogram.getBuckets().size()).     assertEquals(0d, histogram.getBuckets().get(0).getKey()).     assertEquals(1, histogram.getBuckets().get(0).getDocCount()).     assertEquals(5d, histogram.getBuckets().get(1).getKey()).     assertEquals(1, histogram.getBuckets().get(1).getDocCount()).     response = client().prepareSearch("idx").addAggregation(histogram("my_histogram").field("long").interval(5).missing(3)).get().     assertSearchResponse(response).     histogram = response.getAggregations().get("my_histogram").     assertEquals(1, histogram.getBuckets().size()).     assertEquals(0d, histogram.getBuckets().get(0).getKey()).     assertEquals(2, histogram.getBuckets().get(0).getDocCount()). }
false;public;0;23;;public void testDateHistogram() {     SearchResponse response = client().prepareSearch("idx").addAggregation(dateHistogram("my_histogram").field("date").dateHistogramInterval(DateHistogramInterval.YEAR).missing("2014-05-07")).get().     assertSearchResponse(response).     Histogram histogram = response.getAggregations().get("my_histogram").     assertEquals(2, histogram.getBuckets().size()).     assertEquals("2014-01-01T00:00:00.000Z", histogram.getBuckets().get(0).getKeyAsString()).     assertEquals(1, histogram.getBuckets().get(0).getDocCount()).     assertEquals("2015-01-01T00:00:00.000Z", histogram.getBuckets().get(1).getKeyAsString()).     assertEquals(1, histogram.getBuckets().get(1).getDocCount()).     response = client().prepareSearch("idx").addAggregation(dateHistogram("my_histogram").field("date").dateHistogramInterval(DateHistogramInterval.YEAR).missing("2015-05-07")).get().     assertSearchResponse(response).     histogram = response.getAggregations().get("my_histogram").     assertEquals(1, histogram.getBuckets().size()).     assertEquals("2015-01-01T00:00:00.000Z", histogram.getBuckets().get(0).getKeyAsString()).     assertEquals(2, histogram.getBuckets().get(0).getDocCount()). }
false;public;0;7;;public void testCardinality() {     SearchResponse response = client().prepareSearch("idx").addAggregation(cardinality("card").field("long").missing(2)).get().     assertSearchResponse(response).     Cardinality cardinality = response.getAggregations().get("card").     assertEquals(2, cardinality.getValue()). }
false;public;0;7;;public void testPercentiles() {     SearchResponse response = client().prepareSearch("idx").addAggregation(percentiles("percentiles").field("long").missing(1000)).get().     assertSearchResponse(response).     Percentiles percentiles = response.getAggregations().get("percentiles").     assertEquals(1000, percentiles.percentile(100), 0). }
false;public;0;8;;public void testStats() {     SearchResponse response = client().prepareSearch("idx").addAggregation(stats("stats").field("long").missing(5)).get().     assertSearchResponse(response).     Stats stats = response.getAggregations().get("stats").     assertEquals(2, stats.getCount()).     assertEquals(4, stats.getAvg(), 0). }
false;public;0;10;;public void testUnmappedGeoBounds() {     SearchResponse response = client().prepareSearch("idx").addAggregation(geoBounds("bounds").field("non_existing_field").missing("2,1")).get().     assertSearchResponse(response).     GeoBounds bounds = response.getAggregations().get("bounds").     assertThat(bounds.bottomRight().lat(), closeTo(2.0, 1E-5)).     assertThat(bounds.bottomRight().lon(), closeTo(1.0, 1E-5)).     assertThat(bounds.topLeft().lat(), closeTo(2.0, 1E-5)).     assertThat(bounds.topLeft().lon(), closeTo(1.0, 1E-5)). }
false;public;0;10;;public void testGeoBounds() {     SearchResponse response = client().prepareSearch("idx").addAggregation(geoBounds("bounds").field("location").missing("2,1")).get().     assertSearchResponse(response).     GeoBounds bounds = response.getAggregations().get("bounds").     assertThat(bounds.bottomRight().lat(), closeTo(1.0, 1E-5)).     assertThat(bounds.bottomRight().lon(), closeTo(2.0, 1E-5)).     assertThat(bounds.topLeft().lat(), closeTo(2.0, 1E-5)).     assertThat(bounds.topLeft().lon(), closeTo(1.0, 1E-5)). }
false;public;0;9;;public void testGeoCentroid() {     SearchResponse response = client().prepareSearch("idx").addAggregation(geoCentroid("centroid").field("location").missing("2,1")).get().     assertSearchResponse(response).     GeoCentroid centroid = response.getAggregations().get("centroid").     GeoPoint point = new GeoPoint(1.5, 1.5).     assertThat(point.lat(), closeTo(centroid.centroid().lat(), 1E-5)).     assertThat(point.lon(), closeTo(centroid.centroid().lon(), 1E-5)). }
