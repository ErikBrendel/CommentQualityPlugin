commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void beforeClass() {     threadPool = new TestThreadPool("TransportMasterNodeActionTests"). }
false;public;0;16;;@Override @Before public void setUp() throws Exception {     super.setUp().     transport = new CapturingTransport().     clusterService = createClusterService(threadPool).     transportService = transport.createTransportService(clusterService.getSettings(), threadPool, TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> clusterService.localNode(), null, Collections.emptySet()).     transportService.start().     transportService.acceptIncomingRequests().     localNode = new DiscoveryNode("local_node", buildNewFakeTransportAddress(), Collections.emptyMap(), Collections.singleton(DiscoveryNode.Role.MASTER), Version.CURRENT).     remoteNode = new DiscoveryNode("remote_node", buildNewFakeTransportAddress(), Collections.emptyMap(), Collections.singleton(DiscoveryNode.Role.MASTER), Version.CURRENT).     allNodes = new DiscoveryNode[] { localNode, remoteNode }. }
false;public;0;6;;@After public void tearDown() throws Exception {     super.tearDown().     clusterService.close().     transportService.close(). }
false;public,static;0;5;;@AfterClass public static void afterClass() {     ThreadPool.terminate(threadPool, 30, TimeUnit.SECONDS).     threadPool = null. }
false;;3;8;;void assertListenerThrows(String msg, ActionFuture<?> listener, Class<?> klass) throws InterruptedException {     try {         listener.get().         fail(msg).     } catch (ExecutionException ex) {         assertThat(ex.getCause(), instanceOf(klass)).     } }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;1;7;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     Response response = (Response) o.     return identity == response.identity. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(identity). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeLong(identity). }
false;public;1;5;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     identity = in.readLong(). }
false;protected;3;5;;@Override protected void doExecute(Task task, final Request request, ActionListener<Response> listener) {     // remove unneeded threading by wrapping listener with SAME to prevent super.doExecute from wrapping it with LISTENER     super.doExecute(task, request, new ThreadedActionListener<>(logger, threadPool, ThreadPool.Names.SAME, listener, false)). }
false;protected;0;5;;@Override protected String executor() {     // very lightweight operation in memory, no need to fork to a thread     return ThreadPool.Names.SAME. }
false;protected;0;4;;@Override protected Response newResponse() {     return new Response(). }
false;protected;3;4;;@Override protected void masterOperation(Request request, ClusterState state, ActionListener<Response> listener) throws Exception {     // default implementation, overridden in specific tests     listener.onResponse(new Response()). }
false;protected;2;4;;@Override protected ClusterBlockException checkBlock(Request request, ClusterState state) {     // default implementation, overridden in specific tests     return null. }
false;protected;4;8;;@Override protected void masterOperation(Task task, Request request, ClusterState state, ActionListener<Response> listener) {     if (masterOperationFailure) {         listener.onFailure(exception).     } else {         listener.onResponse(response).     } }
false;public;0;34;;public void testLocalOperationWithoutBlocks() throws ExecutionException, InterruptedException {     final boolean masterOperationFailure = randomBoolean().     Request request = new Request().     PlainActionFuture<Response> listener = new PlainActionFuture<>().     final Exception exception = new Exception().     final Response response = new Response().     setState(clusterService, ClusterStateCreationUtils.state(localNode, localNode, allNodes)).     new Action("internal:testAction", transportService, clusterService, threadPool) {          @Override         protected void masterOperation(Task task, Request request, ClusterState state, ActionListener<Response> listener) {             if (masterOperationFailure) {                 listener.onFailure(exception).             } else {                 listener.onResponse(response).             }         }     }.execute(request, listener).     assertTrue(listener.isDone()).     if (masterOperationFailure) {         try {             listener.get().             fail("Expected exception but returned proper result").         } catch (ExecutionException ex) {             assertThat(ex.getCause(), equalTo(exception)).         }     } else {         assertThat(listener.get(), equalTo(response)).     } }
false;protected;2;5;;@Override protected ClusterBlockException checkBlock(Request request, ClusterState state) {     Set<ClusterBlock> blocks = state.blocks().global().     return blocks.isEmpty() ? null : new ClusterBlockException(blocks). }
false;public;0;43;;public void testLocalOperationWithBlocks() throws ExecutionException, InterruptedException {     final boolean retryableBlock = randomBoolean().     final boolean unblockBeforeTimeout = randomBoolean().     Request request = new Request().masterNodeTimeout(TimeValue.timeValueSeconds(unblockBeforeTimeout ? 60 : 0)).     PlainActionFuture<Response> listener = new PlainActionFuture<>().     ClusterBlock block = new ClusterBlock(1, "", retryableBlock, true, false, randomFrom(RestStatus.values()), ClusterBlockLevel.ALL).     ClusterState stateWithBlock = ClusterState.builder(ClusterStateCreationUtils.state(localNode, localNode, allNodes)).blocks(ClusterBlocks.builder().addGlobalBlock(block)).build().     setState(clusterService, stateWithBlock).     new Action("internal:testAction", transportService, clusterService, threadPool) {          @Override         protected ClusterBlockException checkBlock(Request request, ClusterState state) {             Set<ClusterBlock> blocks = state.blocks().global().             return blocks.isEmpty() ? null : new ClusterBlockException(blocks).         }     }.execute(request, listener).     if (retryableBlock && unblockBeforeTimeout) {         assertFalse(listener.isDone()).         setState(clusterService, ClusterState.builder(ClusterStateCreationUtils.state(localNode, localNode, allNodes)).blocks(ClusterBlocks.EMPTY_CLUSTER_BLOCK).build()).         assertTrue(listener.isDone()).         listener.get().         return.     }     assertTrue(listener.isDone()).     if (retryableBlock) {         try {             listener.get().             fail("Expected exception but returned proper result").         } catch (ExecutionException ex) {             assertThat(ex.getCause(), instanceOf(MasterNotDiscoveredException.class)).             assertThat(ex.getCause().getCause(), instanceOf(ClusterBlockException.class)).         }     } else {         assertListenerThrows("ClusterBlockException should be thrown", listener, ClusterBlockException.class).     } }
false;protected;2;9;;@Override protected ClusterBlockException checkBlock(Request request, ClusterState state) {     Set<ClusterBlock> blocks = state.blocks().global().     if (throwExceptionOnRetry == false || blocks.isEmpty()) {         throw new RuntimeException("checkBlock has thrown exception").     }     return new ClusterBlockException(blocks). }
false;public;0;32;;public void testCheckBlockThrowsException() throws InterruptedException {     boolean throwExceptionOnRetry = randomBoolean().     Request request = new Request().masterNodeTimeout(TimeValue.timeValueSeconds(60)).     PlainActionFuture<Response> listener = new PlainActionFuture<>().     ClusterBlock block = new ClusterBlock(1, "", true, true, false, randomFrom(RestStatus.values()), ClusterBlockLevel.ALL).     ClusterState stateWithBlock = ClusterState.builder(ClusterStateCreationUtils.state(localNode, localNode, allNodes)).blocks(ClusterBlocks.builder().addGlobalBlock(block)).build().     setState(clusterService, stateWithBlock).     new Action("internal:testAction", transportService, clusterService, threadPool) {          @Override         protected ClusterBlockException checkBlock(Request request, ClusterState state) {             Set<ClusterBlock> blocks = state.blocks().global().             if (throwExceptionOnRetry == false || blocks.isEmpty()) {                 throw new RuntimeException("checkBlock has thrown exception").             }             return new ClusterBlockException(blocks).         }     }.execute(request, listener).     if (throwExceptionOnRetry == false) {         assertListenerThrows("checkBlock has thrown exception", listener, RuntimeException.class).     } else {         assertFalse(listener.isDone()).         setState(clusterService, ClusterState.builder(ClusterStateCreationUtils.state(localNode, localNode, allNodes)).blocks(ClusterBlocks.EMPTY_CLUSTER_BLOCK).build()).         assertListenerThrows("checkBlock has thrown exception", listener, RuntimeException.class).     } }
false;protected;1;4;;@Override protected boolean localExecute(Request request) {     return true. }
false;public;0;16;;public void testForceLocalOperation() throws ExecutionException, InterruptedException {     Request request = new Request().     PlainActionFuture<Response> listener = new PlainActionFuture<>().     setState(clusterService, ClusterStateCreationUtils.state(localNode, randomFrom(localNode, remoteNode, null), allNodes)).     new Action("internal:testAction", transportService, clusterService, threadPool) {          @Override         protected boolean localExecute(Request request) {             return true.         }     }.execute(request, listener).     assertTrue(listener.isDone()).     listener.get(). }
false;public;0;8;;public void testMasterNotAvailable() throws ExecutionException, InterruptedException {     Request request = new Request().masterNodeTimeout(TimeValue.timeValueSeconds(0)).     setState(clusterService, ClusterStateCreationUtils.state(localNode, null, allNodes)).     PlainActionFuture<Response> listener = new PlainActionFuture<>().     new Action("internal:testAction", transportService, clusterService, threadPool).execute(request, listener).     assertTrue(listener.isDone()).     assertListenerThrows("MasterNotDiscoveredException should be thrown", listener, MasterNotDiscoveredException.class). }
false;public;0;10;;public void testMasterBecomesAvailable() throws ExecutionException, InterruptedException {     Request request = new Request().     setState(clusterService, ClusterStateCreationUtils.state(localNode, null, allNodes)).     PlainActionFuture<Response> listener = new PlainActionFuture<>().     new Action("internal:testAction", transportService, clusterService, threadPool).execute(request, listener).     assertFalse(listener.isDone()).     setState(clusterService, ClusterStateCreationUtils.state(localNode, localNode, allNodes)).     assertTrue(listener.isDone()).     listener.get(). }
false;public;0;18;;public void testDelegateToMaster() throws ExecutionException, InterruptedException {     Request request = new Request().     setState(clusterService, ClusterStateCreationUtils.state(localNode, remoteNode, allNodes)).     PlainActionFuture<Response> listener = new PlainActionFuture<>().     new Action("internal:testAction", transportService, clusterService, threadPool).execute(request, listener).     assertThat(transport.capturedRequests().length, equalTo(1)).     CapturingTransport.CapturedRequest capturedRequest = transport.capturedRequests()[0].     assertTrue(capturedRequest.node.isMasterNode()).     assertThat(capturedRequest.request, equalTo(request)).     assertThat(capturedRequest.action, equalTo("internal:testAction")).     Response response = new Response().     transport.handleResponse(capturedRequest.requestId, response).     assertTrue(listener.isDone()).     assertThat(listener.get(), equalTo(response)). }
false;public;0;73;;public void testDelegateToFailingMaster() throws ExecutionException, InterruptedException {     boolean failsWithConnectTransportException = randomBoolean().     boolean rejoinSameMaster = failsWithConnectTransportException && randomBoolean().     Request request = new Request().masterNodeTimeout(TimeValue.timeValueSeconds(failsWithConnectTransportException ? 60 : 0)).     DiscoveryNode masterNode = this.remoteNode.     setState(clusterService, ClusterState.builder(ClusterStateCreationUtils.state(localNode, masterNode, allNodes)).version(// use a random base version so it can go down when simulating a restart.     randomIntBetween(0, 10))).     PlainActionFuture<Response> listener = new PlainActionFuture<>().     new Action("internal:testAction", transportService, clusterService, threadPool).execute(request, listener).     CapturingTransport.CapturedRequest[] capturedRequests = transport.getCapturedRequestsAndClear().     assertThat(capturedRequests.length, equalTo(1)).     CapturingTransport.CapturedRequest capturedRequest = capturedRequests[0].     assertTrue(capturedRequest.node.isMasterNode()).     assertThat(capturedRequest.request, equalTo(request)).     assertThat(capturedRequest.action, equalTo("internal:testAction")).     if (rejoinSameMaster) {         transport.handleRemoteError(capturedRequest.requestId, new ConnectTransportException(masterNode, "Fake error")).         assertFalse(listener.isDone()).         if (randomBoolean()) {             // simulate master node removal             final DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.builder(clusterService.state().nodes()).             nodesBuilder.masterNodeId(null).             setState(clusterService, ClusterState.builder(clusterService.state()).nodes(nodesBuilder)).         }         if (randomBoolean()) {             // reset the same state to increment a version simulating a join of an existing node             // simulating use being disconnected             final DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.builder(clusterService.state().nodes()).             nodesBuilder.masterNodeId(masterNode.getId()).             setState(clusterService, ClusterState.builder(clusterService.state()).nodes(nodesBuilder)).         } else {             // simulate master restart followed by a state recovery - this will reset the cluster state version             final DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.builder(clusterService.state().nodes()).             nodesBuilder.remove(masterNode).             masterNode = new DiscoveryNode(masterNode.getId(), masterNode.getAddress(), masterNode.getVersion()).             nodesBuilder.add(masterNode).             nodesBuilder.masterNodeId(masterNode.getId()).             final ClusterState.Builder builder = ClusterState.builder(clusterService.state()).nodes(nodesBuilder).             setState(clusterService, builder.version(0)).         }         assertFalse(listener.isDone()).         capturedRequests = transport.getCapturedRequestsAndClear().         assertThat(capturedRequests.length, equalTo(1)).         capturedRequest = capturedRequests[0].         assertTrue(capturedRequest.node.isMasterNode()).         assertThat(capturedRequest.request, equalTo(request)).         assertThat(capturedRequest.action, equalTo("internal:testAction")).     } else if (failsWithConnectTransportException) {         transport.handleRemoteError(capturedRequest.requestId, new ConnectTransportException(masterNode, "Fake error")).         assertFalse(listener.isDone()).         setState(clusterService, ClusterStateCreationUtils.state(localNode, localNode, allNodes)).         assertTrue(listener.isDone()).         listener.get().     } else {         ElasticsearchException t = new ElasticsearchException("test").         t.addHeader("header", "is here").         transport.handleRemoteError(capturedRequest.requestId, t).         assertTrue(listener.isDone()).         try {             listener.get().             fail("Expected exception but returned proper result").         } catch (ExecutionException ex) {             final Throwable cause = ex.getCause().getCause().             assertThat(cause, instanceOf(ElasticsearchException.class)).             final ElasticsearchException es = (ElasticsearchException) cause.             assertThat(es.getMessage(), equalTo(t.getMessage())).             assertThat(es.getHeader("header"), equalTo(t.getHeader("header"))).         }     } }
false;protected;3;9;;@Override protected void masterOperation(Request request, ClusterState state, ActionListener<Response> listener) throws Exception {     // The other node has become master, simulate failures of this node while publishing cluster state through ZenDiscovery     setState(clusterService, ClusterStateCreationUtils.state(localNode, remoteNode, allNodes)).     Exception failure = randomBoolean() ? new FailedToCommitClusterStateException("Fake error") : new NotMasterException("Fake error").     listener.onFailure(failure). }
false;public;0;30;;public void testMasterFailoverAfterStepDown() throws ExecutionException, InterruptedException {     Request request = new Request().masterNodeTimeout(TimeValue.timeValueHours(1)).     PlainActionFuture<Response> listener = new PlainActionFuture<>().     final Response response = new Response().     setState(clusterService, ClusterStateCreationUtils.state(localNode, localNode, allNodes)).     new Action("internal:testAction", transportService, clusterService, threadPool) {          @Override         protected void masterOperation(Request request, ClusterState state, ActionListener<Response> listener) throws Exception {             // The other node has become master, simulate failures of this node while publishing cluster state through ZenDiscovery             setState(clusterService, ClusterStateCreationUtils.state(localNode, remoteNode, allNodes)).             Exception failure = randomBoolean() ? new FailedToCommitClusterStateException("Fake error") : new NotMasterException("Fake error").             listener.onFailure(failure).         }     }.execute(request, listener).     assertThat(transport.capturedRequests().length, equalTo(1)).     CapturingTransport.CapturedRequest capturedRequest = transport.capturedRequests()[0].     assertTrue(capturedRequest.node.isMasterNode()).     assertThat(capturedRequest.request, equalTo(request)).     assertThat(capturedRequest.action, equalTo("internal:testAction")).     transport.handleResponse(capturedRequest.requestId, response).     assertTrue(listener.isDone()).     assertThat(listener.get(), equalTo(response)). }
