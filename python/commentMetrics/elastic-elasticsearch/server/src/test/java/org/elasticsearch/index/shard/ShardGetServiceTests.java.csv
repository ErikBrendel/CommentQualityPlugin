commented;modifiers;parameterAmount;loc;comment;code
false;public;0;53;;public void testGetForUpdate() throws IOException {     Settings settings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 1).put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1).build().     IndexMetaData metaData = IndexMetaData.builder("test").putMapping("test", "{ \"properties\": { \"foo\":  { \"type\": \"text\"}}}").settings(settings).primaryTerm(0, 1).build().     IndexShard primary = newShard(new ShardId(metaData.getIndex(), 0), true, "n1", metaData, null).     recoverShardFromStore(primary).     Engine.IndexResult test = indexDoc(primary, "test", "0", "{\"foo\" : \"bar\"}").     assertTrue(primary.getEngine().refreshNeeded()).     GetResult testGet = primary.getService().getForUpdate("test", "0", UNASSIGNED_SEQ_NO, UNASSIGNED_PRIMARY_TERM).     assertFalse(testGet.getFields().containsKey(RoutingFieldMapper.NAME)).     assertEquals(new String(testGet.source(), StandardCharsets.UTF_8), "{\"foo\" : \"bar\"}").     try (Engine.Searcher searcher = primary.getEngine().acquireSearcher("test", Engine.SearcherScope.INTERNAL)) {         // we refreshed         assertEquals(searcher.reader().maxDoc(), 1).     }     Engine.IndexResult test1 = indexDoc(primary, "test", "1", "{\"foo\" : \"baz\"}", XContentType.JSON, "foobar").     assertTrue(primary.getEngine().refreshNeeded()).     GetResult testGet1 = primary.getService().getForUpdate("test", "1", UNASSIGNED_SEQ_NO, UNASSIGNED_PRIMARY_TERM).     assertEquals(new String(testGet1.source(), StandardCharsets.UTF_8), "{\"foo\" : \"baz\"}").     assertTrue(testGet1.getFields().containsKey(RoutingFieldMapper.NAME)).     assertEquals("foobar", testGet1.getFields().get(RoutingFieldMapper.NAME).getValue()).     try (Engine.Searcher searcher = primary.getEngine().acquireSearcher("test", Engine.SearcherScope.INTERNAL)) {         // we read from the translog         assertEquals(searcher.reader().maxDoc(), 1).     }     primary.getEngine().refresh("test").     try (Engine.Searcher searcher = primary.getEngine().acquireSearcher("test", Engine.SearcherScope.INTERNAL)) {         assertEquals(searcher.reader().maxDoc(), 2).     }     // now again from the reader     Engine.IndexResult test2 = indexDoc(primary, "test", "1", "{\"foo\" : \"baz\"}", XContentType.JSON, "foobar").     assertTrue(primary.getEngine().refreshNeeded()).     testGet1 = primary.getService().getForUpdate("test", "1", UNASSIGNED_SEQ_NO, UNASSIGNED_PRIMARY_TERM).     assertEquals(new String(testGet1.source(), StandardCharsets.UTF_8), "{\"foo\" : \"baz\"}").     assertTrue(testGet1.getFields().containsKey(RoutingFieldMapper.NAME)).     assertEquals("foobar", testGet1.getFields().get(RoutingFieldMapper.NAME).getValue()).     final long primaryTerm = primary.getOperationPrimaryTerm().     testGet1 = primary.getService().getForUpdate("test", "1", test2.getSeqNo(), primaryTerm).     assertEquals(new String(testGet1.source(), StandardCharsets.UTF_8), "{\"foo\" : \"baz\"}").     expectThrows(VersionConflictEngineException.class, () -> primary.getService().getForUpdate("test", "1", test2.getSeqNo() + 1, primaryTerm)).     expectThrows(VersionConflictEngineException.class, () -> primary.getService().getForUpdate("test", "1", test2.getSeqNo(), primaryTerm + 1)).     closeShards(primary). }
false;public;0;25;;public void testTypelessGetForUpdate() throws IOException {     Settings settings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 1).put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1).build().     IndexMetaData metaData = IndexMetaData.builder("index").putMapping("some_type", "{ \"properties\": { \"foo\":  { \"type\": \"text\"}}}").settings(settings).primaryTerm(0, 1).build().     IndexShard shard = newShard(new ShardId(metaData.getIndex(), 0), true, "n1", metaData, null).     recoverShardFromStore(shard).     Engine.IndexResult indexResult = indexDoc(shard, "some_type", "0", "{\"foo\" : \"bar\"}").     assertTrue(indexResult.isCreated()).     GetResult getResult = shard.getService().getForUpdate("some_type", "0", UNASSIGNED_SEQ_NO, UNASSIGNED_PRIMARY_TERM).     assertTrue(getResult.isExists()).     getResult = shard.getService().getForUpdate("some_other_type", "0", UNASSIGNED_SEQ_NO, UNASSIGNED_PRIMARY_TERM).     assertFalse(getResult.isExists()).     getResult = shard.getService().getForUpdate("_doc", "0", UNASSIGNED_SEQ_NO, UNASSIGNED_PRIMARY_TERM).     assertTrue(getResult.isExists()).     closeShards(shard). }
