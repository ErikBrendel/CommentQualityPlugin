commented;modifiers;parameterAmount;loc;comment;code
false;public;0;33;;public void testSerialization() throws Exception {     InetAddress[] inetAddresses = InetAddress.getAllByName("0.0.0.0").     List<TransportAddress> transportAddressList = new ArrayList<>().     for (InetAddress address : inetAddresses) {         transportAddressList.add(new TransportAddress(address, randomIntBetween(9200, 9299))).     }     final BoundTransportAddress transportAddress = new BoundTransportAddress(transportAddressList.toArray(new TransportAddress[0]), transportAddressList.get(0)).     assertThat(transportAddress.boundAddresses().length, equalTo(transportAddressList.size())).     // serialize     BytesStreamOutput streamOutput = new BytesStreamOutput().     transportAddress.writeTo(streamOutput).     StreamInput in = streamOutput.bytes().streamInput().     BoundTransportAddress serializedAddress.     if (randomBoolean()) {         serializedAddress = BoundTransportAddress.readBoundTransportAddress(in).     } else {         serializedAddress = new BoundTransportAddress().         serializedAddress.readFrom(in).     }     assertThat(serializedAddress, not(sameInstance(transportAddress))).     assertThat(serializedAddress.boundAddresses().length, equalTo(transportAddress.boundAddresses().length)).     assertThat(serializedAddress.publishAddress(), equalTo(transportAddress.publishAddress())).     TransportAddress[] serializedBoundAddresses = serializedAddress.boundAddresses().     TransportAddress[] boundAddresses = transportAddress.boundAddresses().     for (int i = 0. i < serializedBoundAddresses.length. i++) {         assertThat(serializedBoundAddresses[i], equalTo(boundAddresses[i])).     } }
false;public;0;9;;public void testBadBoundAddressArray() {     try {         TransportAddress[] badArray = randomBoolean() ? null : new TransportAddress[0].         new BoundTransportAddress(badArray, new TransportAddress(InetAddress.getLoopbackAddress(), 80)).         fail("expected an exception to be thrown due to no bound address").     } catch (IllegalArgumentException e) {     // expected     } }
