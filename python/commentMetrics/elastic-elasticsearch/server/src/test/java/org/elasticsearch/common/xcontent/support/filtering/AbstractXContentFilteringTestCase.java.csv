commented;modifiers;parameterAmount;loc;comment;code
false;protected,final;4;3;;protected final void testFilter(Builder expected, Builder actual, Set<String> includes, Set<String> excludes) throws IOException {     assertFilterResult(expected.apply(createBuilder()), actual.apply(createBuilder(includes, excludes))). }
false;protected,abstract;2;1;;protected abstract void assertFilterResult(XContentBuilder expected, XContentBuilder actual).
false;protected,abstract;0;1;;protected abstract XContentType getXContentType().
false;private;0;3;;private XContentBuilder createBuilder() throws IOException {     return XContentBuilder.builder(getXContentType().xContent()). }
false;private;2;3;;private XContentBuilder createBuilder(Set<String> includes, Set<String> excludes) throws IOException {     return XContentBuilder.builder(getXContentType().xContent(), includes, excludes). }
false;public;0;12;;public void testSingleFieldObject() throws IOException {     final Builder sample = builder -> builder.startObject().startObject("foo").field("bar", "test").endObject().endObject().     Builder expected = builder -> builder.startObject().startObject("foo").field("bar", "test").endObject().endObject().     testFilter(expected, sample, singleton("foo.bar"), emptySet()).     testFilter(expected, sample, emptySet(), singleton("foo.baz")).     testFilter(expected, sample, singleton("foo"), singleton("foo.baz")).     expected = builder -> builder.startObject().endObject().     testFilter(expected, sample, emptySet(), singleton("foo.bar")).     testFilter(expected, sample, singleton("foo"), singleton("foo.b*")). }
false;static;2;3;;static void assertXContentBuilderAsString(final XContentBuilder expected, final XContentBuilder actual) {     assertThat(Strings.toString(actual), is(Strings.toString(expected))). }
false;static;2;35;;static void assertXContentBuilderAsBytes(final XContentBuilder expected, final XContentBuilder actual) {     XContent xContent = XContentFactory.xContent(actual.contentType()).     try (XContentParser jsonParser = xContent.createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, BytesReference.bytes(expected).streamInput()).         XContentParser testParser = xContent.createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, BytesReference.bytes(actual).streamInput())) {         while (true) {             XContentParser.Token token1 = jsonParser.nextToken().             XContentParser.Token token2 = testParser.nextToken().             if (token1 == null) {                 assertThat(token2, nullValue()).                 return.             }             assertThat(token1, equalTo(token2)).             switch(token1) {                 case FIELD_NAME:                     assertThat(jsonParser.currentName(), equalTo(testParser.currentName())).                     break.                 case VALUE_STRING:                     assertThat(jsonParser.text(), equalTo(testParser.text())).                     break.                 case VALUE_NUMBER:                     assertThat(jsonParser.numberType(), equalTo(testParser.numberType())).                     assertThat(jsonParser.numberValue(), equalTo(testParser.numberValue())).                     break.             }         }     } catch (Exception e) {         fail("Fail to verify the result of the XContentBuilder: " + e.getMessage()).     } }
