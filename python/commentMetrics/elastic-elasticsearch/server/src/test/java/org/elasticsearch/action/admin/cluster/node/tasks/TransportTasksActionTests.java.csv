# id;timestamp;commentText;codeText;commentWords;codeWords
TransportTasksActionTests -> public void testTaskNodeFiltering() throws ExecutionException, InterruptedException, IOException;1524684173;This test starts nodes actions that blocks on all nodes. While node actions are blocked in the middle of execution_it executes a tasks action that targets these blocked node actions. The test verifies that task actions are only_getting executed on nodes that are not listed in the node filter.;public void testTaskNodeFiltering() throws ExecutionException, InterruptedException, IOException {_        setupTestNodes(Settings.EMPTY)__        connectNodes(testNodes)__        CountDownLatch checkLatch = new CountDownLatch(1)__        _        ActionFuture<NodesResponse> future = startBlockingTestNodesAction(checkLatch)___        String[] allNodes = new String[testNodes.length]__        for (int i = 0_ i < testNodes.length_ i++) {_            allNodes[i] = testNodes[i].getNodeId()__        }__        int filterNodesSize = randomInt(allNodes.length)__        Set<String> filterNodes = new HashSet<>(randomSubsetOf(filterNodesSize, allNodes))__        logger.info("Filtering out nodes {} size: {}", filterNodes, filterNodesSize)___        TestTasksAction[] tasksActions = new TestTasksAction[nodesCount]__        for (int i = 0_ i < testNodes.length_ i++) {_            final int node = i__            _            _            tasksActions[i] = new TestTasksAction(CLUSTER_SETTINGS, "testTasksAction", threadPool,_                testNodes[i].clusterService, testNodes[i].transportService) {__                @Override_                protected String[] filterNodeIds(DiscoveryNodes nodes, String[] nodesIds) {_                    String[] superNodes = super.filterNodeIds(nodes, nodesIds)__                    List<String> filteredNodes = new ArrayList<>()__                    for (String node : superNodes) {_                        if (filterNodes.contains(node) == false) {_                            filteredNodes.add(node)__                        }_                    }_                    return filteredNodes.toArray(new String[filteredNodes.size()])__                }__                @Override_                protected void taskOperation(TestTasksRequest request, Task task, ActionListener<TestTaskResponse> listener) {_                    if (randomBoolean()) {_                        listener.onResponse(new TestTaskResponse(testNodes[node].getNodeId()))__                    } else {_                        threadPool.generic().execute(() -> listener.onResponse(new TestTaskResponse(testNodes[node].getNodeId())))__                    }_                }_            }__        }__        _        _        TestTasksRequest testTasksRequest = new TestTasksRequest()__        testTasksRequest.setActions("testAction[n]")_ _        TestTasksResponse response = tasksActions[randomIntBetween(0, nodesCount - 1)].execute(testTasksRequest).get()___        _        assertEquals(testNodes.length - filterNodes.size(), response.tasks.size())__        assertEquals(0, response.getTaskFailures().size())_ _        assertEquals(0, response.getNodeFailures().size())_ __        _        for (TestTaskResponse taskResponse : response.tasks) {_            String nodeId = taskResponse.getStatus()__            assertFalse("Found response from filtered node " + nodeId, filterNodes.contains(nodeId))__        }__        _        checkLatch.countDown()__        NodesResponse responses = future.get()__        assertEquals(0, responses.failureCount())__    };this,test,starts,nodes,actions,that,blocks,on,all,nodes,while,node,actions,are,blocked,in,the,middle,of,execution,it,executes,a,tasks,action,that,targets,these,blocked,node,actions,the,test,verifies,that,task,actions,are,only,getting,executed,on,nodes,that,are,not,listed,in,the,node,filter;public,void,test,task,node,filtering,throws,execution,exception,interrupted,exception,ioexception,setup,test,nodes,settings,empty,connect,nodes,test,nodes,count,down,latch,check,latch,new,count,down,latch,1,action,future,nodes,response,future,start,blocking,test,nodes,action,check,latch,string,all,nodes,new,string,test,nodes,length,for,int,i,0,i,test,nodes,length,i,all,nodes,i,test,nodes,i,get,node,id,int,filter,nodes,size,random,int,all,nodes,length,set,string,filter,nodes,new,hash,set,random,subset,of,filter,nodes,size,all,nodes,logger,info,filtering,out,nodes,size,filter,nodes,filter,nodes,size,test,tasks,action,tasks,actions,new,test,tasks,action,nodes,count,for,int,i,0,i,test,nodes,length,i,final,int,node,i,tasks,actions,i,new,test,tasks,action,test,tasks,action,thread,pool,test,nodes,i,cluster,service,test,nodes,i,transport,service,override,protected,string,filter,node,ids,discovery,nodes,nodes,string,nodes,ids,string,super,nodes,super,filter,node,ids,nodes,nodes,ids,list,string,filtered,nodes,new,array,list,for,string,node,super,nodes,if,filter,nodes,contains,node,false,filtered,nodes,add,node,return,filtered,nodes,to,array,new,string,filtered,nodes,size,override,protected,void,task,operation,test,tasks,request,request,task,task,action,listener,test,task,response,listener,if,random,boolean,listener,on,response,new,test,task,response,test,nodes,node,get,node,id,else,thread,pool,generic,execute,listener,on,response,new,test,task,response,test,nodes,node,get,node,id,test,tasks,request,test,tasks,request,new,test,tasks,request,test,tasks,request,set,actions,test,action,n,test,tasks,response,response,tasks,actions,random,int,between,0,nodes,count,1,execute,test,tasks,request,get,assert,equals,test,nodes,length,filter,nodes,size,response,tasks,size,assert,equals,0,response,get,task,failures,size,assert,equals,0,response,get,node,failures,size,for,test,task,response,task,response,response,tasks,string,node,id,task,response,get,status,assert,false,found,response,from,filtered,node,node,id,filter,nodes,contains,node,id,check,latch,count,down,nodes,response,responses,future,get,assert,equals,0,responses,failure,count
TransportTasksActionTests -> public void testTaskNodeFiltering() throws ExecutionException, InterruptedException, IOException;1528893677;This test starts nodes actions that blocks on all nodes. While node actions are blocked in the middle of execution_it executes a tasks action that targets these blocked node actions. The test verifies that task actions are only_getting executed on nodes that are not listed in the node filter.;public void testTaskNodeFiltering() throws ExecutionException, InterruptedException, IOException {_        setupTestNodes(Settings.EMPTY)__        connectNodes(testNodes)__        CountDownLatch checkLatch = new CountDownLatch(1)__        _        ActionFuture<NodesResponse> future = startBlockingTestNodesAction(checkLatch)___        String[] allNodes = new String[testNodes.length]__        for (int i = 0_ i < testNodes.length_ i++) {_            allNodes[i] = testNodes[i].getNodeId()__        }__        int filterNodesSize = randomInt(allNodes.length)__        Set<String> filterNodes = new HashSet<>(randomSubsetOf(filterNodesSize, allNodes))__        logger.info("Filtering out nodes {} size: {}", filterNodes, filterNodesSize)___        TestTasksAction[] tasksActions = new TestTasksAction[nodesCount]__        for (int i = 0_ i < testNodes.length_ i++) {_            final int node = i__            _            _            tasksActions[i] = new TestTasksAction(CLUSTER_SETTINGS, "testTasksAction", threadPool,_                testNodes[i].clusterService, testNodes[i].transportService) {__                @Override_                protected String[] filterNodeIds(DiscoveryNodes nodes, String[] nodesIds) {_                    String[] superNodes = super.filterNodeIds(nodes, nodesIds)__                    List<String> filteredNodes = new ArrayList<>()__                    for (String node : superNodes) {_                        if (filterNodes.contains(node) == false) {_                            filteredNodes.add(node)__                        }_                    }_                    return filteredNodes.toArray(new String[filteredNodes.size()])__                }__                @Override_                protected void taskOperation(TestTasksRequest request, Task task, ActionListener<TestTaskResponse> listener) {_                    if (randomBoolean()) {_                        listener.onResponse(new TestTaskResponse(testNodes[node].getNodeId()))__                    } else {_                        threadPool.generic().execute(() -> listener.onResponse(new TestTaskResponse(testNodes[node].getNodeId())))__                    }_                }_            }__        }__        _        _        TestTasksRequest testTasksRequest = new TestTasksRequest()__        testTasksRequest.setActions("testAction[n]")_ _        TestTasksResponse response = ActionTestUtils.executeBlocking(tasksActions[randomIntBetween(0, nodesCount - 1)], testTasksRequest)___        _        assertEquals(testNodes.length - filterNodes.size(), response.tasks.size())__        assertEquals(0, response.getTaskFailures().size())_ _        assertEquals(0, response.getNodeFailures().size())_ __        _        for (TestTaskResponse taskResponse : response.tasks) {_            String nodeId = taskResponse.getStatus()__            assertFalse("Found response from filtered node " + nodeId, filterNodes.contains(nodeId))__        }__        _        checkLatch.countDown()__        NodesResponse responses = future.get()__        assertEquals(0, responses.failureCount())__    };this,test,starts,nodes,actions,that,blocks,on,all,nodes,while,node,actions,are,blocked,in,the,middle,of,execution,it,executes,a,tasks,action,that,targets,these,blocked,node,actions,the,test,verifies,that,task,actions,are,only,getting,executed,on,nodes,that,are,not,listed,in,the,node,filter;public,void,test,task,node,filtering,throws,execution,exception,interrupted,exception,ioexception,setup,test,nodes,settings,empty,connect,nodes,test,nodes,count,down,latch,check,latch,new,count,down,latch,1,action,future,nodes,response,future,start,blocking,test,nodes,action,check,latch,string,all,nodes,new,string,test,nodes,length,for,int,i,0,i,test,nodes,length,i,all,nodes,i,test,nodes,i,get,node,id,int,filter,nodes,size,random,int,all,nodes,length,set,string,filter,nodes,new,hash,set,random,subset,of,filter,nodes,size,all,nodes,logger,info,filtering,out,nodes,size,filter,nodes,filter,nodes,size,test,tasks,action,tasks,actions,new,test,tasks,action,nodes,count,for,int,i,0,i,test,nodes,length,i,final,int,node,i,tasks,actions,i,new,test,tasks,action,test,tasks,action,thread,pool,test,nodes,i,cluster,service,test,nodes,i,transport,service,override,protected,string,filter,node,ids,discovery,nodes,nodes,string,nodes,ids,string,super,nodes,super,filter,node,ids,nodes,nodes,ids,list,string,filtered,nodes,new,array,list,for,string,node,super,nodes,if,filter,nodes,contains,node,false,filtered,nodes,add,node,return,filtered,nodes,to,array,new,string,filtered,nodes,size,override,protected,void,task,operation,test,tasks,request,request,task,task,action,listener,test,task,response,listener,if,random,boolean,listener,on,response,new,test,task,response,test,nodes,node,get,node,id,else,thread,pool,generic,execute,listener,on,response,new,test,task,response,test,nodes,node,get,node,id,test,tasks,request,test,tasks,request,new,test,tasks,request,test,tasks,request,set,actions,test,action,n,test,tasks,response,response,action,test,utils,execute,blocking,tasks,actions,random,int,between,0,nodes,count,1,test,tasks,request,assert,equals,test,nodes,length,filter,nodes,size,response,tasks,size,assert,equals,0,response,get,task,failures,size,assert,equals,0,response,get,node,failures,size,for,test,task,response,task,response,response,tasks,string,node,id,task,response,get,status,assert,false,found,response,from,filtered,node,node,id,filter,nodes,contains,node,id,check,latch,count,down,nodes,response,responses,future,get,assert,equals,0,responses,failure,count
TransportTasksActionTests -> public void testTaskNodeFiltering() throws ExecutionException, InterruptedException, IOException;1528977744;This test starts nodes actions that blocks on all nodes. While node actions are blocked in the middle of execution_it executes a tasks action that targets these blocked node actions. The test verifies that task actions are only_getting executed on nodes that are not listed in the node filter.;public void testTaskNodeFiltering() throws ExecutionException, InterruptedException, IOException {_        setupTestNodes(Settings.EMPTY)__        connectNodes(testNodes)__        CountDownLatch checkLatch = new CountDownLatch(1)__        _        ActionFuture<NodesResponse> future = startBlockingTestNodesAction(checkLatch)___        String[] allNodes = new String[testNodes.length]__        for (int i = 0_ i < testNodes.length_ i++) {_            allNodes[i] = testNodes[i].getNodeId()__        }__        int filterNodesSize = randomInt(allNodes.length)__        Set<String> filterNodes = new HashSet<>(randomSubsetOf(filterNodesSize, allNodes))__        logger.info("Filtering out nodes {} size: {}", filterNodes, filterNodesSize)___        TestTasksAction[] tasksActions = new TestTasksAction[nodesCount]__        for (int i = 0_ i < testNodes.length_ i++) {_            final int node = i__            _            _            tasksActions[i] = new TestTasksAction(CLUSTER_SETTINGS, "testTasksAction", threadPool,_                testNodes[i].clusterService, testNodes[i].transportService) {__                @Override_                protected String[] filterNodeIds(DiscoveryNodes nodes, String[] nodesIds) {_                    String[] superNodes = super.filterNodeIds(nodes, nodesIds)__                    List<String> filteredNodes = new ArrayList<>()__                    for (String node : superNodes) {_                        if (filterNodes.contains(node) == false) {_                            filteredNodes.add(node)__                        }_                    }_                    return filteredNodes.toArray(new String[filteredNodes.size()])__                }__                @Override_                protected void taskOperation(TestTasksRequest request, Task task, ActionListener<TestTaskResponse> listener) {_                    if (randomBoolean()) {_                        listener.onResponse(new TestTaskResponse(testNodes[node].getNodeId()))__                    } else {_                        threadPool.generic().execute(() -> listener.onResponse(new TestTaskResponse(testNodes[node].getNodeId())))__                    }_                }_            }__        }__        _        _        TestTasksRequest testTasksRequest = new TestTasksRequest()__        testTasksRequest.setActions("testAction[n]")_ _        TestTasksResponse response = ActionTestUtils.executeBlocking(tasksActions[randomIntBetween(0, nodesCount - 1)], testTasksRequest)___        _        assertEquals(testNodes.length - filterNodes.size(), response.tasks.size())__        assertEquals(0, response.getTaskFailures().size())_ _        assertEquals(0, response.getNodeFailures().size())_ __        _        for (TestTaskResponse taskResponse : response.tasks) {_            String nodeId = taskResponse.getStatus()__            assertFalse("Found response from filtered node " + nodeId, filterNodes.contains(nodeId))__        }__        _        checkLatch.countDown()__        NodesResponse responses = future.get()__        assertEquals(0, responses.failureCount())__    };this,test,starts,nodes,actions,that,blocks,on,all,nodes,while,node,actions,are,blocked,in,the,middle,of,execution,it,executes,a,tasks,action,that,targets,these,blocked,node,actions,the,test,verifies,that,task,actions,are,only,getting,executed,on,nodes,that,are,not,listed,in,the,node,filter;public,void,test,task,node,filtering,throws,execution,exception,interrupted,exception,ioexception,setup,test,nodes,settings,empty,connect,nodes,test,nodes,count,down,latch,check,latch,new,count,down,latch,1,action,future,nodes,response,future,start,blocking,test,nodes,action,check,latch,string,all,nodes,new,string,test,nodes,length,for,int,i,0,i,test,nodes,length,i,all,nodes,i,test,nodes,i,get,node,id,int,filter,nodes,size,random,int,all,nodes,length,set,string,filter,nodes,new,hash,set,random,subset,of,filter,nodes,size,all,nodes,logger,info,filtering,out,nodes,size,filter,nodes,filter,nodes,size,test,tasks,action,tasks,actions,new,test,tasks,action,nodes,count,for,int,i,0,i,test,nodes,length,i,final,int,node,i,tasks,actions,i,new,test,tasks,action,test,tasks,action,thread,pool,test,nodes,i,cluster,service,test,nodes,i,transport,service,override,protected,string,filter,node,ids,discovery,nodes,nodes,string,nodes,ids,string,super,nodes,super,filter,node,ids,nodes,nodes,ids,list,string,filtered,nodes,new,array,list,for,string,node,super,nodes,if,filter,nodes,contains,node,false,filtered,nodes,add,node,return,filtered,nodes,to,array,new,string,filtered,nodes,size,override,protected,void,task,operation,test,tasks,request,request,task,task,action,listener,test,task,response,listener,if,random,boolean,listener,on,response,new,test,task,response,test,nodes,node,get,node,id,else,thread,pool,generic,execute,listener,on,response,new,test,task,response,test,nodes,node,get,node,id,test,tasks,request,test,tasks,request,new,test,tasks,request,test,tasks,request,set,actions,test,action,n,test,tasks,response,response,action,test,utils,execute,blocking,tasks,actions,random,int,between,0,nodes,count,1,test,tasks,request,assert,equals,test,nodes,length,filter,nodes,size,response,tasks,size,assert,equals,0,response,get,task,failures,size,assert,equals,0,response,get,node,failures,size,for,test,task,response,task,response,response,tasks,string,node,id,task,response,get,status,assert,false,found,response,from,filtered,node,node,id,filter,nodes,contains,node,id,check,latch,count,down,nodes,response,responses,future,get,assert,equals,0,responses,failure,count
TransportTasksActionTests -> public void testTaskNodeFiltering() throws ExecutionException, InterruptedException, IOException;1529487105;This test starts nodes actions that blocks on all nodes. While node actions are blocked in the middle of execution_it executes a tasks action that targets these blocked node actions. The test verifies that task actions are only_getting executed on nodes that are not listed in the node filter.;public void testTaskNodeFiltering() throws ExecutionException, InterruptedException, IOException {_        setupTestNodes(Settings.EMPTY)__        connectNodes(testNodes)__        CountDownLatch checkLatch = new CountDownLatch(1)__        _        ActionFuture<NodesResponse> future = startBlockingTestNodesAction(checkLatch)___        String[] allNodes = new String[testNodes.length]__        for (int i = 0_ i < testNodes.length_ i++) {_            allNodes[i] = testNodes[i].getNodeId()__        }__        int filterNodesSize = randomInt(allNodes.length)__        Set<String> filterNodes = new HashSet<>(randomSubsetOf(filterNodesSize, allNodes))__        logger.info("Filtering out nodes {} size: {}", filterNodes, filterNodesSize)___        TestTasksAction[] tasksActions = new TestTasksAction[nodesCount]__        for (int i = 0_ i < testNodes.length_ i++) {_            final int node = i__            _            _            tasksActions[i] = new TestTasksAction(CLUSTER_SETTINGS, "testTasksAction", threadPool,_                testNodes[i].clusterService, testNodes[i].transportService) {__                @Override_                protected String[] filterNodeIds(DiscoveryNodes nodes, String[] nodesIds) {_                    String[] superNodes = super.filterNodeIds(nodes, nodesIds)__                    List<String> filteredNodes = new ArrayList<>()__                    for (String node : superNodes) {_                        if (filterNodes.contains(node) == false) {_                            filteredNodes.add(node)__                        }_                    }_                    return filteredNodes.toArray(new String[filteredNodes.size()])__                }__                @Override_                protected void taskOperation(TestTasksRequest request, Task task, ActionListener<TestTaskResponse> listener) {_                    if (randomBoolean()) {_                        listener.onResponse(new TestTaskResponse(testNodes[node].getNodeId()))__                    } else {_                        threadPool.generic().execute(() -> listener.onResponse(new TestTaskResponse(testNodes[node].getNodeId())))__                    }_                }_            }__        }__        _        _        TestTasksRequest testTasksRequest = new TestTasksRequest()__        testTasksRequest.setActions("testAction[n]")_ _        TestTasksResponse response = ActionTestUtils.executeBlocking(tasksActions[randomIntBetween(0, nodesCount - 1)], testTasksRequest)___        _        assertEquals(testNodes.length - filterNodes.size(), response.tasks.size())__        assertEquals(0, response.getTaskFailures().size())_ _        assertEquals(0, response.getNodeFailures().size())_ __        _        for (TestTaskResponse taskResponse : response.tasks) {_            String nodeId = taskResponse.getStatus()__            assertFalse("Found response from filtered node " + nodeId, filterNodes.contains(nodeId))__        }__        _        checkLatch.countDown()__        NodesResponse responses = future.get()__        assertEquals(0, responses.failureCount())__    };this,test,starts,nodes,actions,that,blocks,on,all,nodes,while,node,actions,are,blocked,in,the,middle,of,execution,it,executes,a,tasks,action,that,targets,these,blocked,node,actions,the,test,verifies,that,task,actions,are,only,getting,executed,on,nodes,that,are,not,listed,in,the,node,filter;public,void,test,task,node,filtering,throws,execution,exception,interrupted,exception,ioexception,setup,test,nodes,settings,empty,connect,nodes,test,nodes,count,down,latch,check,latch,new,count,down,latch,1,action,future,nodes,response,future,start,blocking,test,nodes,action,check,latch,string,all,nodes,new,string,test,nodes,length,for,int,i,0,i,test,nodes,length,i,all,nodes,i,test,nodes,i,get,node,id,int,filter,nodes,size,random,int,all,nodes,length,set,string,filter,nodes,new,hash,set,random,subset,of,filter,nodes,size,all,nodes,logger,info,filtering,out,nodes,size,filter,nodes,filter,nodes,size,test,tasks,action,tasks,actions,new,test,tasks,action,nodes,count,for,int,i,0,i,test,nodes,length,i,final,int,node,i,tasks,actions,i,new,test,tasks,action,test,tasks,action,thread,pool,test,nodes,i,cluster,service,test,nodes,i,transport,service,override,protected,string,filter,node,ids,discovery,nodes,nodes,string,nodes,ids,string,super,nodes,super,filter,node,ids,nodes,nodes,ids,list,string,filtered,nodes,new,array,list,for,string,node,super,nodes,if,filter,nodes,contains,node,false,filtered,nodes,add,node,return,filtered,nodes,to,array,new,string,filtered,nodes,size,override,protected,void,task,operation,test,tasks,request,request,task,task,action,listener,test,task,response,listener,if,random,boolean,listener,on,response,new,test,task,response,test,nodes,node,get,node,id,else,thread,pool,generic,execute,listener,on,response,new,test,task,response,test,nodes,node,get,node,id,test,tasks,request,test,tasks,request,new,test,tasks,request,test,tasks,request,set,actions,test,action,n,test,tasks,response,response,action,test,utils,execute,blocking,tasks,actions,random,int,between,0,nodes,count,1,test,tasks,request,assert,equals,test,nodes,length,filter,nodes,size,response,tasks,size,assert,equals,0,response,get,task,failures,size,assert,equals,0,response,get,node,failures,size,for,test,task,response,task,response,response,tasks,string,node,id,task,response,get,status,assert,false,found,response,from,filtered,node,node,id,filter,nodes,contains,node,id,check,latch,count,down,nodes,response,responses,future,get,assert,equals,0,responses,failure,count
TransportTasksActionTests -> public void testTaskNodeFiltering() throws ExecutionException, InterruptedException, IOException;1529658035;This test starts nodes actions that blocks on all nodes. While node actions are blocked in the middle of execution_it executes a tasks action that targets these blocked node actions. The test verifies that task actions are only_getting executed on nodes that are not listed in the node filter.;public void testTaskNodeFiltering() throws ExecutionException, InterruptedException, IOException {_        setupTestNodes(Settings.EMPTY)__        connectNodes(testNodes)__        CountDownLatch checkLatch = new CountDownLatch(1)__        _        ActionFuture<NodesResponse> future = startBlockingTestNodesAction(checkLatch)___        String[] allNodes = new String[testNodes.length]__        for (int i = 0_ i < testNodes.length_ i++) {_            allNodes[i] = testNodes[i].getNodeId()__        }__        int filterNodesSize = randomInt(allNodes.length)__        Set<String> filterNodes = new HashSet<>(randomSubsetOf(filterNodesSize, allNodes))__        logger.info("Filtering out nodes {} size: {}", filterNodes, filterNodesSize)___        TestTasksAction[] tasksActions = new TestTasksAction[nodesCount]__        for (int i = 0_ i < testNodes.length_ i++) {_            final int node = i__            _            _            tasksActions[i] = new TestTasksAction(CLUSTER_SETTINGS, "testTasksAction",_                testNodes[i].clusterService, testNodes[i].transportService) {__                @Override_                protected String[] filterNodeIds(DiscoveryNodes nodes, String[] nodesIds) {_                    String[] superNodes = super.filterNodeIds(nodes, nodesIds)__                    List<String> filteredNodes = new ArrayList<>()__                    for (String node : superNodes) {_                        if (filterNodes.contains(node) == false) {_                            filteredNodes.add(node)__                        }_                    }_                    return filteredNodes.toArray(new String[filteredNodes.size()])__                }__                @Override_                protected void taskOperation(TestTasksRequest request, Task task, ActionListener<TestTaskResponse> listener) {_                    if (randomBoolean()) {_                        listener.onResponse(new TestTaskResponse(testNodes[node].getNodeId()))__                    } else {_                        threadPool.generic().execute(() -> listener.onResponse(new TestTaskResponse(testNodes[node].getNodeId())))__                    }_                }_            }__        }__        _        _        TestTasksRequest testTasksRequest = new TestTasksRequest()__        testTasksRequest.setActions("testAction[n]")_ _        TestTasksResponse response = ActionTestUtils.executeBlocking(tasksActions[randomIntBetween(0, nodesCount - 1)], testTasksRequest)___        _        assertEquals(testNodes.length - filterNodes.size(), response.tasks.size())__        assertEquals(0, response.getTaskFailures().size())_ _        assertEquals(0, response.getNodeFailures().size())_ __        _        for (TestTaskResponse taskResponse : response.tasks) {_            String nodeId = taskResponse.getStatus()__            assertFalse("Found response from filtered node " + nodeId, filterNodes.contains(nodeId))__        }__        _        checkLatch.countDown()__        NodesResponse responses = future.get()__        assertEquals(0, responses.failureCount())__    };this,test,starts,nodes,actions,that,blocks,on,all,nodes,while,node,actions,are,blocked,in,the,middle,of,execution,it,executes,a,tasks,action,that,targets,these,blocked,node,actions,the,test,verifies,that,task,actions,are,only,getting,executed,on,nodes,that,are,not,listed,in,the,node,filter;public,void,test,task,node,filtering,throws,execution,exception,interrupted,exception,ioexception,setup,test,nodes,settings,empty,connect,nodes,test,nodes,count,down,latch,check,latch,new,count,down,latch,1,action,future,nodes,response,future,start,blocking,test,nodes,action,check,latch,string,all,nodes,new,string,test,nodes,length,for,int,i,0,i,test,nodes,length,i,all,nodes,i,test,nodes,i,get,node,id,int,filter,nodes,size,random,int,all,nodes,length,set,string,filter,nodes,new,hash,set,random,subset,of,filter,nodes,size,all,nodes,logger,info,filtering,out,nodes,size,filter,nodes,filter,nodes,size,test,tasks,action,tasks,actions,new,test,tasks,action,nodes,count,for,int,i,0,i,test,nodes,length,i,final,int,node,i,tasks,actions,i,new,test,tasks,action,test,tasks,action,test,nodes,i,cluster,service,test,nodes,i,transport,service,override,protected,string,filter,node,ids,discovery,nodes,nodes,string,nodes,ids,string,super,nodes,super,filter,node,ids,nodes,nodes,ids,list,string,filtered,nodes,new,array,list,for,string,node,super,nodes,if,filter,nodes,contains,node,false,filtered,nodes,add,node,return,filtered,nodes,to,array,new,string,filtered,nodes,size,override,protected,void,task,operation,test,tasks,request,request,task,task,action,listener,test,task,response,listener,if,random,boolean,listener,on,response,new,test,task,response,test,nodes,node,get,node,id,else,thread,pool,generic,execute,listener,on,response,new,test,task,response,test,nodes,node,get,node,id,test,tasks,request,test,tasks,request,new,test,tasks,request,test,tasks,request,set,actions,test,action,n,test,tasks,response,response,action,test,utils,execute,blocking,tasks,actions,random,int,between,0,nodes,count,1,test,tasks,request,assert,equals,test,nodes,length,filter,nodes,size,response,tasks,size,assert,equals,0,response,get,task,failures,size,assert,equals,0,response,get,node,failures,size,for,test,task,response,task,response,response,tasks,string,node,id,task,response,get,status,assert,false,found,response,from,filtered,node,node,id,filter,nodes,contains,node,id,check,latch,count,down,nodes,response,responses,future,get,assert,equals,0,responses,failure,count
TransportTasksActionTests -> public void testTaskNodeFiltering() throws ExecutionException, InterruptedException, IOException;1531179852;This test starts nodes actions that blocks on all nodes. While node actions are blocked in the middle of execution_it executes a tasks action that targets these blocked node actions. The test verifies that task actions are only_getting executed on nodes that are not listed in the node filter.;public void testTaskNodeFiltering() throws ExecutionException, InterruptedException, IOException {_        setupTestNodes(Settings.EMPTY)__        connectNodes(testNodes)__        CountDownLatch checkLatch = new CountDownLatch(1)__        _        ActionFuture<NodesResponse> future = startBlockingTestNodesAction(checkLatch)___        String[] allNodes = new String[testNodes.length]__        for (int i = 0_ i < testNodes.length_ i++) {_            allNodes[i] = testNodes[i].getNodeId()__        }__        int filterNodesSize = randomInt(allNodes.length)__        Set<String> filterNodes = new HashSet<>(randomSubsetOf(filterNodesSize, allNodes))__        logger.info("Filtering out nodes {} size: {}", filterNodes, filterNodesSize)___        TestTasksAction[] tasksActions = new TestTasksAction[nodesCount]__        for (int i = 0_ i < testNodes.length_ i++) {_            final int node = i__            _            _            tasksActions[i] = new TestTasksAction(CLUSTER_SETTINGS, "internal:testTasksAction",_                testNodes[i].clusterService, testNodes[i].transportService) {__                @Override_                protected String[] filterNodeIds(DiscoveryNodes nodes, String[] nodesIds) {_                    String[] superNodes = super.filterNodeIds(nodes, nodesIds)__                    List<String> filteredNodes = new ArrayList<>()__                    for (String node : superNodes) {_                        if (filterNodes.contains(node) == false) {_                            filteredNodes.add(node)__                        }_                    }_                    return filteredNodes.toArray(new String[filteredNodes.size()])__                }__                @Override_                protected void taskOperation(TestTasksRequest request, Task task, ActionListener<TestTaskResponse> listener) {_                    if (randomBoolean()) {_                        listener.onResponse(new TestTaskResponse(testNodes[node].getNodeId()))__                    } else {_                        threadPool.generic().execute(() -> listener.onResponse(new TestTaskResponse(testNodes[node].getNodeId())))__                    }_                }_            }__        }__        _        _        TestTasksRequest testTasksRequest = new TestTasksRequest()__        testTasksRequest.setActions("internal:testAction[n]")_ _        TestTasksResponse response = ActionTestUtils.executeBlocking(tasksActions[randomIntBetween(0, nodesCount - 1)], testTasksRequest)___        _        assertEquals(testNodes.length - filterNodes.size(), response.tasks.size())__        assertEquals(0, response.getTaskFailures().size())_ _        assertEquals(0, response.getNodeFailures().size())_ __        _        for (TestTaskResponse taskResponse : response.tasks) {_            String nodeId = taskResponse.getStatus()__            assertFalse("Found response from filtered node " + nodeId, filterNodes.contains(nodeId))__        }__        _        checkLatch.countDown()__        NodesResponse responses = future.get()__        assertEquals(0, responses.failureCount())__    };this,test,starts,nodes,actions,that,blocks,on,all,nodes,while,node,actions,are,blocked,in,the,middle,of,execution,it,executes,a,tasks,action,that,targets,these,blocked,node,actions,the,test,verifies,that,task,actions,are,only,getting,executed,on,nodes,that,are,not,listed,in,the,node,filter;public,void,test,task,node,filtering,throws,execution,exception,interrupted,exception,ioexception,setup,test,nodes,settings,empty,connect,nodes,test,nodes,count,down,latch,check,latch,new,count,down,latch,1,action,future,nodes,response,future,start,blocking,test,nodes,action,check,latch,string,all,nodes,new,string,test,nodes,length,for,int,i,0,i,test,nodes,length,i,all,nodes,i,test,nodes,i,get,node,id,int,filter,nodes,size,random,int,all,nodes,length,set,string,filter,nodes,new,hash,set,random,subset,of,filter,nodes,size,all,nodes,logger,info,filtering,out,nodes,size,filter,nodes,filter,nodes,size,test,tasks,action,tasks,actions,new,test,tasks,action,nodes,count,for,int,i,0,i,test,nodes,length,i,final,int,node,i,tasks,actions,i,new,test,tasks,action,internal,test,tasks,action,test,nodes,i,cluster,service,test,nodes,i,transport,service,override,protected,string,filter,node,ids,discovery,nodes,nodes,string,nodes,ids,string,super,nodes,super,filter,node,ids,nodes,nodes,ids,list,string,filtered,nodes,new,array,list,for,string,node,super,nodes,if,filter,nodes,contains,node,false,filtered,nodes,add,node,return,filtered,nodes,to,array,new,string,filtered,nodes,size,override,protected,void,task,operation,test,tasks,request,request,task,task,action,listener,test,task,response,listener,if,random,boolean,listener,on,response,new,test,task,response,test,nodes,node,get,node,id,else,thread,pool,generic,execute,listener,on,response,new,test,task,response,test,nodes,node,get,node,id,test,tasks,request,test,tasks,request,new,test,tasks,request,test,tasks,request,set,actions,internal,test,action,n,test,tasks,response,response,action,test,utils,execute,blocking,tasks,actions,random,int,between,0,nodes,count,1,test,tasks,request,assert,equals,test,nodes,length,filter,nodes,size,response,tasks,size,assert,equals,0,response,get,task,failures,size,assert,equals,0,response,get,node,failures,size,for,test,task,response,task,response,response,tasks,string,node,id,task,response,get,status,assert,false,found,response,from,filtered,node,node,id,filter,nodes,contains,node,id,check,latch,count,down,nodes,response,responses,future,get,assert,equals,0,responses,failure,count
TransportTasksActionTests -> public void testTaskNodeFiltering() throws ExecutionException, InterruptedException, IOException;1541419698;This test starts nodes actions that blocks on all nodes. While node actions are blocked in the middle of execution_it executes a tasks action that targets these blocked node actions. The test verifies that task actions are only_getting executed on nodes that are not listed in the node filter.;public void testTaskNodeFiltering() throws ExecutionException, InterruptedException, IOException {_        setupTestNodes(Settings.EMPTY)__        connectNodes(testNodes)__        CountDownLatch checkLatch = new CountDownLatch(1)__        _        ActionFuture<NodesResponse> future = startBlockingTestNodesAction(checkLatch)___        String[] allNodes = new String[testNodes.length]__        for (int i = 0_ i < testNodes.length_ i++) {_            allNodes[i] = testNodes[i].getNodeId()__        }__        int filterNodesSize = randomInt(allNodes.length)__        Set<String> filterNodes = new HashSet<>(randomSubsetOf(filterNodesSize, allNodes))__        logger.info("Filtering out nodes {} size: {}", filterNodes, filterNodesSize)___        TestTasksAction[] tasksActions = new TestTasksAction[nodesCount]__        for (int i = 0_ i < testNodes.length_ i++) {_            final int node = i__            _            _            tasksActions[i] = new TestTasksAction("internal:testTasksAction",_                testNodes[i].clusterService, testNodes[i].transportService) {__                @Override_                protected String[] filterNodeIds(DiscoveryNodes nodes, String[] nodesIds) {_                    String[] superNodes = super.filterNodeIds(nodes, nodesIds)__                    List<String> filteredNodes = new ArrayList<>()__                    for (String node : superNodes) {_                        if (filterNodes.contains(node) == false) {_                            filteredNodes.add(node)__                        }_                    }_                    return filteredNodes.toArray(new String[filteredNodes.size()])__                }__                @Override_                protected void taskOperation(TestTasksRequest request, Task task, ActionListener<TestTaskResponse> listener) {_                    if (randomBoolean()) {_                        listener.onResponse(new TestTaskResponse(testNodes[node].getNodeId()))__                    } else {_                        threadPool.generic().execute(() -> listener.onResponse(new TestTaskResponse(testNodes[node].getNodeId())))__                    }_                }_            }__        }__        _        _        TestTasksRequest testTasksRequest = new TestTasksRequest()__        testTasksRequest.setActions("internal:testAction[n]")_ _        TestTasksResponse response = ActionTestUtils.executeBlocking(tasksActions[randomIntBetween(0, nodesCount - 1)], testTasksRequest)___        _        assertEquals(testNodes.length - filterNodes.size(), response.tasks.size())__        assertEquals(0, response.getTaskFailures().size())_ _        assertEquals(0, response.getNodeFailures().size())_ __        _        for (TestTaskResponse taskResponse : response.tasks) {_            String nodeId = taskResponse.getStatus()__            assertFalse("Found response from filtered node " + nodeId, filterNodes.contains(nodeId))__        }__        _        checkLatch.countDown()__        NodesResponse responses = future.get()__        assertEquals(0, responses.failureCount())__    };this,test,starts,nodes,actions,that,blocks,on,all,nodes,while,node,actions,are,blocked,in,the,middle,of,execution,it,executes,a,tasks,action,that,targets,these,blocked,node,actions,the,test,verifies,that,task,actions,are,only,getting,executed,on,nodes,that,are,not,listed,in,the,node,filter;public,void,test,task,node,filtering,throws,execution,exception,interrupted,exception,ioexception,setup,test,nodes,settings,empty,connect,nodes,test,nodes,count,down,latch,check,latch,new,count,down,latch,1,action,future,nodes,response,future,start,blocking,test,nodes,action,check,latch,string,all,nodes,new,string,test,nodes,length,for,int,i,0,i,test,nodes,length,i,all,nodes,i,test,nodes,i,get,node,id,int,filter,nodes,size,random,int,all,nodes,length,set,string,filter,nodes,new,hash,set,random,subset,of,filter,nodes,size,all,nodes,logger,info,filtering,out,nodes,size,filter,nodes,filter,nodes,size,test,tasks,action,tasks,actions,new,test,tasks,action,nodes,count,for,int,i,0,i,test,nodes,length,i,final,int,node,i,tasks,actions,i,new,test,tasks,action,internal,test,tasks,action,test,nodes,i,cluster,service,test,nodes,i,transport,service,override,protected,string,filter,node,ids,discovery,nodes,nodes,string,nodes,ids,string,super,nodes,super,filter,node,ids,nodes,nodes,ids,list,string,filtered,nodes,new,array,list,for,string,node,super,nodes,if,filter,nodes,contains,node,false,filtered,nodes,add,node,return,filtered,nodes,to,array,new,string,filtered,nodes,size,override,protected,void,task,operation,test,tasks,request,request,task,task,action,listener,test,task,response,listener,if,random,boolean,listener,on,response,new,test,task,response,test,nodes,node,get,node,id,else,thread,pool,generic,execute,listener,on,response,new,test,task,response,test,nodes,node,get,node,id,test,tasks,request,test,tasks,request,new,test,tasks,request,test,tasks,request,set,actions,internal,test,action,n,test,tasks,response,response,action,test,utils,execute,blocking,tasks,actions,random,int,between,0,nodes,count,1,test,tasks,request,assert,equals,test,nodes,length,filter,nodes,size,response,tasks,size,assert,equals,0,response,get,task,failures,size,assert,equals,0,response,get,node,failures,size,for,test,task,response,task,response,response,tasks,string,node,id,task,response,get,status,assert,false,found,response,from,filtered,node,node,id,filter,nodes,contains,node,id,check,latch,count,down,nodes,response,responses,future,get,assert,equals,0,responses,failure,count
TransportTasksActionTests -> public void testTaskNodeFiltering() throws ExecutionException, InterruptedException, IOException;1543820669;This test starts nodes actions that blocks on all nodes. While node actions are blocked in the middle of execution_it executes a tasks action that targets these blocked node actions. The test verifies that task actions are only_getting executed on nodes that are not listed in the node filter.;public void testTaskNodeFiltering() throws ExecutionException, InterruptedException, IOException {_        setupTestNodes(Settings.EMPTY)__        connectNodes(testNodes)__        CountDownLatch checkLatch = new CountDownLatch(1)__        _        ActionFuture<NodesResponse> future = startBlockingTestNodesAction(checkLatch)___        String[] allNodes = new String[testNodes.length]__        for (int i = 0_ i < testNodes.length_ i++) {_            allNodes[i] = testNodes[i].getNodeId()__        }__        int filterNodesSize = randomInt(allNodes.length)__        Set<String> filterNodes = new HashSet<>(randomSubsetOf(filterNodesSize, allNodes))__        logger.info("Filtering out nodes {} size: {}", filterNodes, filterNodesSize)___        TestTasksAction[] tasksActions = new TestTasksAction[nodesCount]__        for (int i = 0_ i < testNodes.length_ i++) {_            final int node = i__            _            _            tasksActions[i] = new TestTasksAction("internal:testTasksAction",_                testNodes[i].clusterService, testNodes[i].transportService) {__                @Override_                protected String[] filterNodeIds(DiscoveryNodes nodes, String[] nodesIds) {_                    String[] superNodes = super.filterNodeIds(nodes, nodesIds)__                    List<String> filteredNodes = new ArrayList<>()__                    for (String node : superNodes) {_                        if (filterNodes.contains(node) == false) {_                            filteredNodes.add(node)__                        }_                    }_                    return filteredNodes.toArray(new String[filteredNodes.size()])__                }__                @Override_                protected void taskOperation(TestTasksRequest request, Task task, ActionListener<TestTaskResponse> listener) {_                    if (randomBoolean()) {_                        listener.onResponse(new TestTaskResponse(testNodes[node].getNodeId()))__                    } else {_                        threadPool.generic().execute(() -> listener.onResponse(new TestTaskResponse(testNodes[node].getNodeId())))__                    }_                }_            }__        }__        _        _        TestTasksRequest testTasksRequest = new TestTasksRequest()__        testTasksRequest.setActions("internal:testAction[n]")_ _        TestTasksResponse response = ActionTestUtils.executeBlocking(tasksActions[randomIntBetween(0, nodesCount - 1)], testTasksRequest)___        _        assertEquals(testNodes.length - filterNodes.size(), response.tasks.size())__        assertEquals(0, response.getTaskFailures().size())_ _        assertEquals(0, response.getNodeFailures().size())_ __        _        for (TestTaskResponse taskResponse : response.tasks) {_            String nodeId = taskResponse.getStatus()__            assertFalse("Found response from filtered node " + nodeId, filterNodes.contains(nodeId))__        }__        _        checkLatch.countDown()__        NodesResponse responses = future.get()__        assertEquals(0, responses.failureCount())__    };this,test,starts,nodes,actions,that,blocks,on,all,nodes,while,node,actions,are,blocked,in,the,middle,of,execution,it,executes,a,tasks,action,that,targets,these,blocked,node,actions,the,test,verifies,that,task,actions,are,only,getting,executed,on,nodes,that,are,not,listed,in,the,node,filter;public,void,test,task,node,filtering,throws,execution,exception,interrupted,exception,ioexception,setup,test,nodes,settings,empty,connect,nodes,test,nodes,count,down,latch,check,latch,new,count,down,latch,1,action,future,nodes,response,future,start,blocking,test,nodes,action,check,latch,string,all,nodes,new,string,test,nodes,length,for,int,i,0,i,test,nodes,length,i,all,nodes,i,test,nodes,i,get,node,id,int,filter,nodes,size,random,int,all,nodes,length,set,string,filter,nodes,new,hash,set,random,subset,of,filter,nodes,size,all,nodes,logger,info,filtering,out,nodes,size,filter,nodes,filter,nodes,size,test,tasks,action,tasks,actions,new,test,tasks,action,nodes,count,for,int,i,0,i,test,nodes,length,i,final,int,node,i,tasks,actions,i,new,test,tasks,action,internal,test,tasks,action,test,nodes,i,cluster,service,test,nodes,i,transport,service,override,protected,string,filter,node,ids,discovery,nodes,nodes,string,nodes,ids,string,super,nodes,super,filter,node,ids,nodes,nodes,ids,list,string,filtered,nodes,new,array,list,for,string,node,super,nodes,if,filter,nodes,contains,node,false,filtered,nodes,add,node,return,filtered,nodes,to,array,new,string,filtered,nodes,size,override,protected,void,task,operation,test,tasks,request,request,task,task,action,listener,test,task,response,listener,if,random,boolean,listener,on,response,new,test,task,response,test,nodes,node,get,node,id,else,thread,pool,generic,execute,listener,on,response,new,test,task,response,test,nodes,node,get,node,id,test,tasks,request,test,tasks,request,new,test,tasks,request,test,tasks,request,set,actions,internal,test,action,n,test,tasks,response,response,action,test,utils,execute,blocking,tasks,actions,random,int,between,0,nodes,count,1,test,tasks,request,assert,equals,test,nodes,length,filter,nodes,size,response,tasks,size,assert,equals,0,response,get,task,failures,size,assert,equals,0,response,get,node,failures,size,for,test,task,response,task,response,response,tasks,string,node,id,task,response,get,status,assert,false,found,response,from,filtered,node,node,id,filter,nodes,contains,node,id,check,latch,count,down,nodes,response,responses,future,get,assert,equals,0,responses,failure,count
TransportTasksActionTests -> public void testTaskNodeFiltering() throws ExecutionException, InterruptedException, IOException;1544012050;This test starts nodes actions that blocks on all nodes. While node actions are blocked in the middle of execution_it executes a tasks action that targets these blocked node actions. The test verifies that task actions are only_getting executed on nodes that are not listed in the node filter.;public void testTaskNodeFiltering() throws ExecutionException, InterruptedException, IOException {_        setupTestNodes(Settings.EMPTY)__        connectNodes(testNodes)__        CountDownLatch checkLatch = new CountDownLatch(1)__        _        ActionFuture<NodesResponse> future = startBlockingTestNodesAction(checkLatch)___        String[] allNodes = new String[testNodes.length]__        for (int i = 0_ i < testNodes.length_ i++) {_            allNodes[i] = testNodes[i].getNodeId()__        }__        int filterNodesSize = randomInt(allNodes.length)__        Set<String> filterNodes = new HashSet<>(randomSubsetOf(filterNodesSize, allNodes))__        logger.info("Filtering out nodes {} size: {}", filterNodes, filterNodesSize)___        TestTasksAction[] tasksActions = new TestTasksAction[nodesCount]__        for (int i = 0_ i < testNodes.length_ i++) {_            final int node = i__            _            _            tasksActions[i] = new TestTasksAction("internal:testTasksAction",_                testNodes[i].clusterService, testNodes[i].transportService) {__                @Override_                protected String[] filterNodeIds(DiscoveryNodes nodes, String[] nodesIds) {_                    String[] superNodes = super.filterNodeIds(nodes, nodesIds)__                    List<String> filteredNodes = new ArrayList<>()__                    for (String node : superNodes) {_                        if (filterNodes.contains(node) == false) {_                            filteredNodes.add(node)__                        }_                    }_                    return filteredNodes.toArray(new String[filteredNodes.size()])__                }__                @Override_                protected void taskOperation(TestTasksRequest request, Task task, ActionListener<TestTaskResponse> listener) {_                    if (randomBoolean()) {_                        listener.onResponse(new TestTaskResponse(testNodes[node].getNodeId()))__                    } else {_                        threadPool.generic().execute(() -> listener.onResponse(new TestTaskResponse(testNodes[node].getNodeId())))__                    }_                }_            }__        }__        _        _        TestTasksRequest testTasksRequest = new TestTasksRequest()__        testTasksRequest.setActions("internal:testAction[n]")_ _        TestTasksResponse response = ActionTestUtils.executeBlocking(tasksActions[randomIntBetween(0, nodesCount - 1)], testTasksRequest)___        _        assertEquals(testNodes.length - filterNodes.size(), response.tasks.size())__        assertEquals(0, response.getTaskFailures().size())_ _        assertEquals(0, response.getNodeFailures().size())_ __        _        for (TestTaskResponse taskResponse : response.tasks) {_            String nodeId = taskResponse.getStatus()__            assertFalse("Found response from filtered node " + nodeId, filterNodes.contains(nodeId))__        }__        _        checkLatch.countDown()__        NodesResponse responses = future.get()__        assertEquals(0, responses.failureCount())__    };this,test,starts,nodes,actions,that,blocks,on,all,nodes,while,node,actions,are,blocked,in,the,middle,of,execution,it,executes,a,tasks,action,that,targets,these,blocked,node,actions,the,test,verifies,that,task,actions,are,only,getting,executed,on,nodes,that,are,not,listed,in,the,node,filter;public,void,test,task,node,filtering,throws,execution,exception,interrupted,exception,ioexception,setup,test,nodes,settings,empty,connect,nodes,test,nodes,count,down,latch,check,latch,new,count,down,latch,1,action,future,nodes,response,future,start,blocking,test,nodes,action,check,latch,string,all,nodes,new,string,test,nodes,length,for,int,i,0,i,test,nodes,length,i,all,nodes,i,test,nodes,i,get,node,id,int,filter,nodes,size,random,int,all,nodes,length,set,string,filter,nodes,new,hash,set,random,subset,of,filter,nodes,size,all,nodes,logger,info,filtering,out,nodes,size,filter,nodes,filter,nodes,size,test,tasks,action,tasks,actions,new,test,tasks,action,nodes,count,for,int,i,0,i,test,nodes,length,i,final,int,node,i,tasks,actions,i,new,test,tasks,action,internal,test,tasks,action,test,nodes,i,cluster,service,test,nodes,i,transport,service,override,protected,string,filter,node,ids,discovery,nodes,nodes,string,nodes,ids,string,super,nodes,super,filter,node,ids,nodes,nodes,ids,list,string,filtered,nodes,new,array,list,for,string,node,super,nodes,if,filter,nodes,contains,node,false,filtered,nodes,add,node,return,filtered,nodes,to,array,new,string,filtered,nodes,size,override,protected,void,task,operation,test,tasks,request,request,task,task,action,listener,test,task,response,listener,if,random,boolean,listener,on,response,new,test,task,response,test,nodes,node,get,node,id,else,thread,pool,generic,execute,listener,on,response,new,test,task,response,test,nodes,node,get,node,id,test,tasks,request,test,tasks,request,new,test,tasks,request,test,tasks,request,set,actions,internal,test,action,n,test,tasks,response,response,action,test,utils,execute,blocking,tasks,actions,random,int,between,0,nodes,count,1,test,tasks,request,assert,equals,test,nodes,length,filter,nodes,size,response,tasks,size,assert,equals,0,response,get,task,failures,size,assert,equals,0,response,get,node,failures,size,for,test,task,response,task,response,response,tasks,string,node,id,task,response,get,status,assert,false,found,response,from,filtered,node,node,id,filter,nodes,contains,node,id,check,latch,count,down,nodes,response,responses,future,get,assert,equals,0,responses,failure,count
