commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;public void testParseStemExclusion() {     /* Comma separated list */     Settings settings = Settings.builder().put("stem_exclusion", "foo,bar").build().     CharArraySet set = Analysis.parseStemExclusion(settings, CharArraySet.EMPTY_SET).     assertThat(set.contains("foo"), is(true)).     assertThat(set.contains("bar"), is(true)).     assertThat(set.contains("baz"), is(false)).     /* Array */     settings = Settings.builder().putList("stem_exclusion", "foo", "bar").build().     set = Analysis.parseStemExclusion(settings, CharArraySet.EMPTY_SET).     assertThat(set.contains("foo"), is(true)).     assertThat(set.contains("bar"), is(true)).     assertThat(set.contains("baz"), is(false)). }
false;public;0;12;;public void testParseNonExistingFile() {     Path tempDir = createTempDir().     Settings nodeSettings = Settings.builder().put("foo.bar_path", tempDir.resolve("foo.dict")).put(Environment.PATH_HOME_SETTING.getKey(), tempDir).build().     Environment env = TestEnvironment.newEnvironment(nodeSettings).     IllegalArgumentException ex = expectThrows(IllegalArgumentException.class, () -> Analysis.getWordList(env, nodeSettings, "foo.bar")).     assertEquals("IOException while reading foo.bar_path: " + tempDir.resolve("foo.dict").toString(), ex.getMessage()).     assertTrue(ex.getCause().toString(), ex.getCause() instanceof FileNotFoundException || ex.getCause() instanceof NoSuchFileException). }
false;public;0;18;;public void testParseFalseEncodedFile() throws IOException {     Path tempDir = createTempDir().     Path dict = tempDir.resolve("foo.dict").     Settings nodeSettings = Settings.builder().put("foo.bar_path", dict).put(Environment.PATH_HOME_SETTING.getKey(), tempDir).build().     try (OutputStream writer = Files.newOutputStream(dict)) {         // some invalid UTF-8         writer.write(new byte[] { (byte) 0xff, 0x00, 0x00 }).         writer.write('\n').     }     Environment env = TestEnvironment.newEnvironment(nodeSettings).     IllegalArgumentException ex = expectThrows(IllegalArgumentException.class, () -> Analysis.getWordList(env, nodeSettings, "foo.bar")).     assertEquals("Unsupported character encoding detected while reading foo.bar_path: " + tempDir.resolve("foo.dict").toString() + " - files must be UTF-8 encoded", ex.getMessage()).     assertTrue(ex.getCause().toString(), ex.getCause() instanceof MalformedInputException || ex.getCause() instanceof CharacterCodingException). }
false;public;0;17;;public void testParseWordList() throws IOException {     Path tempDir = createTempDir().     Path dict = tempDir.resolve("foo.dict").     Settings nodeSettings = Settings.builder().put("foo.bar_path", dict).put(Environment.PATH_HOME_SETTING.getKey(), tempDir).build().     try (BufferedWriter writer = Files.newBufferedWriter(dict, StandardCharsets.UTF_8)) {         writer.write("hello").         writer.write('\n').         writer.write("world").         writer.write('\n').     }     Environment env = TestEnvironment.newEnvironment(nodeSettings).     List<String> wordList = Analysis.getWordList(env, nodeSettings, "foo.bar").     assertEquals(Arrays.asList("hello", "world"), wordList). }
