commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setUp() throws Exception {     super.setUp().     Settings settings = Settings.builder().put(NODE_NAME_SETTING.getKey(), "node").build().     taskQueue = new DeterministicTaskQueue(settings, random()). }
false;public;0;16;;public void testListenerTimeout() {     AtomicBoolean success = new AtomicBoolean(false).     AtomicReference<Exception> exception = new AtomicReference<>().     ActionListener<Void> listener = wrap(success, exception).     ActionListener<Void> wrapped = ListenerTimeouts.wrapWithTimeout(taskQueue.getThreadPool(), listener, timeout, generic, "test").     assertTrue(taskQueue.hasDeferredTasks()).     taskQueue.advanceTime().     taskQueue.runAllRunnableTasks().     wrapped.onResponse(null).     wrapped.onFailure(new IOException("incorrect exception")).     assertFalse(success.get()).     assertThat(exception.get(), instanceOf(ElasticsearchTimeoutException.class)). }
false;public;0;17;;public void testFinishNormallyBeforeTimeout() {     AtomicBoolean success = new AtomicBoolean(false).     AtomicReference<Exception> exception = new AtomicReference<>().     ActionListener<Void> listener = wrap(success, exception).     ActionListener<Void> wrapped = ListenerTimeouts.wrapWithTimeout(taskQueue.getThreadPool(), listener, timeout, generic, "test").     wrapped.onResponse(null).     wrapped.onFailure(new IOException("boom")).     wrapped.onResponse(null).     assertTrue(taskQueue.hasDeferredTasks()).     taskQueue.advanceTime().     taskQueue.runAllRunnableTasks().     assertTrue(success.get()).     assertNull(exception.get()). }
false;public;0;15;;public void testFinishExceptionallyBeforeTimeout() {     AtomicBoolean success = new AtomicBoolean(false).     AtomicReference<Exception> exception = new AtomicReference<>().     ActionListener<Void> listener = wrap(success, exception).     ActionListener<Void> wrapped = ListenerTimeouts.wrapWithTimeout(taskQueue.getThreadPool(), listener, timeout, generic, "test").     wrapped.onFailure(new IOException("boom")).     assertTrue(taskQueue.hasDeferredTasks()).     taskQueue.advanceTime().     taskQueue.runAllRunnableTasks().     assertFalse(success.get()).     assertThat(exception.get(), instanceOf(IOException.class)). }
false;public;1;5;;@Override public void onResponse(Void aVoid) {     assertTrue(completed.compareAndSet(false, true)).     assertTrue(success.compareAndSet(false, true)). }
false;public;1;5;;@Override public void onFailure(Exception e) {     assertTrue(completed.compareAndSet(false, true)).     assertTrue(exception.compareAndSet(null, e)). }
false;private;2;18;;private ActionListener<Void> wrap(AtomicBoolean success, AtomicReference<Exception> exception) {     return new ActionListener<Void>() {          private final AtomicBoolean completed = new AtomicBoolean().          @Override         public void onResponse(Void aVoid) {             assertTrue(completed.compareAndSet(false, true)).             assertTrue(success.compareAndSet(false, true)).         }          @Override         public void onFailure(Exception e) {             assertTrue(completed.compareAndSet(false, true)).             assertTrue(exception.compareAndSet(null, e)).         }     }. }
