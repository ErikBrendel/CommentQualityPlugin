commented;modifiers;parameterAmount;loc;comment;code
false;protected,abstract;2;1;;protected abstract QB createQueryBuilder(String fieldName, Object value).
false;public;0;7;;public void testIllegalArguments() throws QueryShardException {     String term = randomAlphaOfLengthBetween(1, 30).     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> createQueryBuilder(null, term)).     assertEquals("field name is null or empty", e.getMessage()).     e = expectThrows(IllegalArgumentException.class, () -> createQueryBuilder("", term)).     assertEquals("field name is null or empty", e.getMessage()). }
false;protected;0;21;;@Override protected Map<String, QB> getAlternateVersions() {     HashMap<String, QB> alternateVersions = new HashMap<>().     QB tempQuery = createTestQueryBuilder().     QB testQuery = createQueryBuilder(tempQuery.fieldName(), tempQuery.value()).     boolean isString = testQuery.value() instanceof String.     Object value.     if (isString) {         JsonStringEncoder encoder = JsonStringEncoder.getInstance().         value = "\"" + new String(encoder.quoteAsString((String) testQuery.value())) + "\"".     } else {         value = testQuery.value().     }     String contentString = "{\n" + "    \"" + testQuery.getName() + "\" : {\n" + "        \"" + testQuery.fieldName() + "\" : " + value + "\n" + "    }\n" + "}".     alternateVersions.put(contentString, testQuery).     return alternateVersions. }
