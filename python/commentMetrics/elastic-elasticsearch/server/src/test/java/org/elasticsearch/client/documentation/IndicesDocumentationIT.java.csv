commented;modifiers;parameterAmount;loc;comment;code
true;public;0;49;/**  * This test method is used to generate the Put Mapping Java Indices API documentation  * at "docs/java-api/admin/indices/put-mapping.asciidoc" so the documentation gets tested  * so that it compiles and runs without throwing errors at runtime.  */ ;/**  * This test method is used to generate the Put Mapping Java Indices API documentation  * at "docs/java-api/admin/indices/put-mapping.asciidoc" so the documentation gets tested  * so that it compiles and runs without throwing errors at runtime.  */ public void testPutMappingDocumentation() throws Exception {     Client client = client().     // tag::index-with-mapping     // <1>     client.admin().indices().prepareCreate("twitter").addMapping("_doc", "message", // <2>     "type=text").get().     // end::index-with-mapping     GetMappingsResponse getMappingsResponse = client.admin().indices().prepareGetMappings("twitter").get().     assertEquals(1, getMappingsResponse.getMappings().size()).     ImmutableOpenMap<String, MappingMetaData> indexMapping = getMappingsResponse.getMappings().get("twitter").     assertThat(indexMapping.get("_doc"), instanceOf(MappingMetaData.class)).     // we need to delete in order to create a fresh new index with another type     client.admin().indices().prepareDelete("twitter").get().     client.admin().indices().prepareCreate("twitter").get().     // tag::putMapping-request-source     // <1>     client.admin().indices().preparePutMapping("twitter").setType("_doc").setSource("{\n" + "  \"properties\": {\n" + // <2>     "    \"name\": {\n" + "      \"type\": \"text\"\n" + "    }\n" + "  }\n" + "}", XContentType.JSON).get().     // You can also provide the type in the source document     client.admin().indices().preparePutMapping("twitter").setType("_doc").setSource("{\n" + // <3>     "    \"_doc\":{\n" + "        \"properties\": {\n" + "            \"name\": {\n" + "                \"type\": \"text\"\n" + "            }\n" + "        }\n" + "    }\n" + "}", XContentType.JSON).get().     // end::putMapping-request-source     getMappingsResponse = client.admin().indices().prepareGetMappings("twitter").get().     assertEquals(1, getMappingsResponse.getMappings().size()).     indexMapping = getMappingsResponse.getMappings().get("twitter").     assertEquals(singletonMap("properties", singletonMap("name", singletonMap("type", "text"))), indexMapping.get("_doc").getSourceAsMap()). }
