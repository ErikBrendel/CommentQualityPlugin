commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;public void testResolveNodeByIdOrName() {     DiscoveryNodes discoveryNodes = buildDiscoveryNodes().     DiscoveryNode[] nodes = discoveryNodes.getNodes().values().toArray(DiscoveryNode.class).     DiscoveryNode node = randomFrom(nodes).     DiscoveryNode resolvedNode = discoveryNodes.resolveNode(randomBoolean() ? node.getId() : node.getName()).     assertThat(resolvedNode.getId(), equalTo(node.getId())). }
false;public;0;18;;public void testResolveNodeByAttribute() {     DiscoveryNodes discoveryNodes = buildDiscoveryNodes().     NodeSelector nodeSelector = randomFrom(NodeSelector.values()).     Set<String> matchingNodeIds = nodeSelector.matchingNodeIds(discoveryNodes).     try {         DiscoveryNode resolvedNode = discoveryNodes.resolveNode(nodeSelector.selector).         assertThat(matchingNodeIds.size(), equalTo(1)).         assertThat(resolvedNode.getId(), equalTo(matchingNodeIds.iterator().next())).     } catch (IllegalArgumentException e) {         if (matchingNodeIds.size() == 0) {             assertThat(e.getMessage(), equalTo("failed to resolve [" + nodeSelector.selector + "], no matching nodes")).         } else if (matchingNodeIds.size() > 1) {             assertThat(e.getMessage(), containsString("where expected to be resolved to a single node")).         } else {             fail("resolveNode shouldn't have failed for [" + nodeSelector.selector + "]").         }     } }
false;public;0;19;;public void testAll() {     final DiscoveryNodes discoveryNodes = buildDiscoveryNodes().     final String[] allNodes = StreamSupport.stream(discoveryNodes.spliterator(), false).map(DiscoveryNode::getId).toArray(String[]::new).     assertThat(discoveryNodes.resolveNodes(), arrayContainingInAnyOrder(allNodes)).     assertThat(discoveryNodes.resolveNodes(new String[0]), arrayContainingInAnyOrder(allNodes)).     assertThat(discoveryNodes.resolveNodes("_all"), arrayContainingInAnyOrder(allNodes)).     final String[] nonMasterNodes = StreamSupport.stream(discoveryNodes.getNodes().values().spliterator(), false).map(n -> n.value).filter(n -> n.isMasterNode() == false).map(DiscoveryNode::getId).toArray(String[]::new).     assertThat(discoveryNodes.resolveNodes("_all", "master:false"), arrayContainingInAnyOrder(nonMasterNodes)).     assertThat(discoveryNodes.resolveNodes("master:false", "_all"), arrayContainingInAnyOrder(allNodes)). }
false;public;0;22;;public void testCoordinatorOnlyNodes() {     final DiscoveryNodes discoveryNodes = buildDiscoveryNodes().     final String[] coordinatorOnlyNodes = StreamSupport.stream(discoveryNodes.getNodes().values().spliterator(), false).map(n -> n.value).filter(n -> n.isDataNode() == false && n.isIngestNode() == false && n.isMasterNode() == false).map(DiscoveryNode::getId).toArray(String[]::new).     final String[] nonCoordinatorOnlyNodes = StreamSupport.stream(discoveryNodes.getNodes().values().spliterator(), false).map(n -> n.value).filter(n -> n.isMasterNode() || n.isDataNode() || n.isIngestNode()).map(DiscoveryNode::getId).toArray(String[]::new).     assertThat(discoveryNodes.resolveNodes("coordinating_only:true"), arrayContainingInAnyOrder(coordinatorOnlyNodes)).     assertThat(discoveryNodes.resolveNodes("_all", "data:false", "ingest:false", "master:false"), arrayContainingInAnyOrder(coordinatorOnlyNodes)).     assertThat(discoveryNodes.resolveNodes("_all", "coordinating_only:false"), arrayContainingInAnyOrder(nonCoordinatorOnlyNodes)). }
false;public;0;33;;public void testResolveNodesIds() {     DiscoveryNodes discoveryNodes = buildDiscoveryNodes().     int numSelectors = randomIntBetween(1, 5).     Set<String> nodeSelectors = new HashSet<>().     Set<String> expectedNodeIdsSet = new HashSet<>().     for (int i = 0. i < numSelectors. i++) {         NodeSelector nodeSelector = randomFrom(NodeSelector.values()).         if (nodeSelectors.add(nodeSelector.selector)) {             expectedNodeIdsSet.addAll(nodeSelector.matchingNodeIds(discoveryNodes)).         }     }     int numNodeIds = randomIntBetween(0, 3).     String[] nodeIds = discoveryNodes.getNodes().keys().toArray(String.class).     for (int i = 0. i < numNodeIds. i++) {         String nodeId = randomFrom(nodeIds).         nodeSelectors.add(nodeId).         expectedNodeIdsSet.add(nodeId).     }     int numNodeNames = randomIntBetween(0, 3).     DiscoveryNode[] nodes = discoveryNodes.getNodes().values().toArray(DiscoveryNode.class).     for (int i = 0. i < numNodeNames. i++) {         DiscoveryNode discoveryNode = randomFrom(nodes).         nodeSelectors.add(discoveryNode.getName()).         expectedNodeIdsSet.add(discoveryNode.getId()).     }     String[] resolvedNodesIds = discoveryNodes.resolveNodes(nodeSelectors.toArray(new String[nodeSelectors.size()])).     Arrays.sort(resolvedNodesIds).     String[] expectedNodesIds = expectedNodeIdsSet.toArray(new String[expectedNodeIdsSet.size()]).     Arrays.sort(expectedNodesIds).     assertThat(resolvedNodesIds, equalTo(expectedNodesIds)). }
false;public;0;11;;public void testMastersFirst() {     final List<DiscoveryNode> inputNodes = randomNodes(10).     final DiscoveryNodes.Builder discoBuilder = DiscoveryNodes.builder().     inputNodes.forEach(discoBuilder::add).     final List<DiscoveryNode> returnedNodes = discoBuilder.build().mastersFirstStream().collect(Collectors.toList()).     assertEquals(returnedNodes.size(), inputNodes.size()).     assertEquals(new HashSet<>(returnedNodes), new HashSet<>(inputNodes)).     final List<DiscoveryNode> sortedNodes = new ArrayList<>(returnedNodes).     Collections.sort(sortedNodes, Comparator.comparing(n -> n.isMasterNode() == false)).     assertEquals(sortedNodes, returnedNodes). }
false;public;0;68;;public void testDeltas() {     Set<DiscoveryNode> nodesA = new HashSet<>().     nodesA.addAll(randomNodes(1 + randomInt(10))).     Set<DiscoveryNode> nodesB = new HashSet<>().     nodesB.addAll(randomNodes(1 + randomInt(5))).     for (DiscoveryNode node : randomSubsetOf(nodesA)) {         if (randomBoolean()) {             // change an attribute             Map<String, String> attrs = new HashMap<>(node.getAttributes()).             attrs.put("new", "new").             final TransportAddress nodeAddress = node.getAddress().             node = new DiscoveryNode(node.getName(), node.getId(), node.getEphemeralId(), nodeAddress.address().getHostString(), nodeAddress.getAddress(), nodeAddress, attrs, node.getRoles(), node.getVersion()).         }         nodesB.add(node).     }     DiscoveryNode masterA = randomBoolean() ? null : RandomPicks.randomFrom(random(), nodesA).     DiscoveryNode masterB = randomBoolean() ? null : RandomPicks.randomFrom(random(), nodesB).     DiscoveryNodes.Builder builderA = DiscoveryNodes.builder().     nodesA.stream().forEach(builderA::add).     final String masterAId = masterA == null ? null : masterA.getId().     builderA.masterNodeId(masterAId).     builderA.localNodeId(RandomPicks.randomFrom(random(), nodesA).getId()).     DiscoveryNodes.Builder builderB = DiscoveryNodes.builder().     nodesB.stream().forEach(builderB::add).     final String masterBId = masterB == null ? null : masterB.getId().     builderB.masterNodeId(masterBId).     builderB.localNodeId(RandomPicks.randomFrom(random(), nodesB).getId()).     final DiscoveryNodes discoNodesA = builderA.build().     final DiscoveryNodes discoNodesB = builderB.build().     logger.info("nodes A: {}", discoNodesA).     logger.info("nodes B: {}", discoNodesB).     DiscoveryNodes.Delta delta = discoNodesB.delta(discoNodesA).     if (masterA == null) {         assertThat(delta.previousMasterNode(), nullValue()).     } else {         assertThat(delta.previousMasterNode().getId(), equalTo(masterAId)).     }     if (masterB == null) {         assertThat(delta.newMasterNode(), nullValue()).     } else {         assertThat(delta.newMasterNode().getId(), equalTo(masterBId)).     }     if (Objects.equals(masterAId, masterBId)) {         assertFalse(delta.masterNodeChanged()).     } else {         assertTrue(delta.masterNodeChanged()).     }     Set<DiscoveryNode> newNodes = new HashSet<>(nodesB).     newNodes.removeAll(nodesA).     assertThat(delta.added(), equalTo(newNodes.isEmpty() == false)).     assertThat(delta.addedNodes(), containsInAnyOrder(newNodes.stream().collect(Collectors.toList()).toArray())).     assertThat(delta.addedNodes().size(), equalTo(newNodes.size())).     Set<DiscoveryNode> removedNodes = new HashSet<>(nodesA).     removedNodes.removeAll(nodesB).     assertThat(delta.removed(), equalTo(removedNodes.isEmpty() == false)).     assertThat(delta.removedNodes(), containsInAnyOrder(removedNodes.stream().collect(Collectors.toList()).toArray())).     assertThat(delta.removedNodes().size(), equalTo(removedNodes.size())). }
false;private,static;1;13;;private static List<DiscoveryNode> randomNodes(final int numNodes) {     List<DiscoveryNode> nodesList = new ArrayList<>().     for (int i = 0. i < numNodes. i++) {         Map<String, String> attributes = new HashMap<>().         if (frequently()) {             attributes.put("custom", randomBoolean() ? "match" : randomAlphaOfLengthBetween(3, 5)).         }         final DiscoveryNode node = newNode(idGenerator.getAndIncrement(), attributes, new HashSet<>(randomSubsetOf(Arrays.asList(DiscoveryNode.Role.values())))).         nodesList.add(node).     }     return nodesList. }
false;private,static;0;11;;private static DiscoveryNodes buildDiscoveryNodes() {     int numNodes = randomIntBetween(1, 10).     DiscoveryNodes.Builder discoBuilder = DiscoveryNodes.builder().     List<DiscoveryNode> nodesList = randomNodes(numNodes).     for (DiscoveryNode node : nodesList) {         discoBuilder = discoBuilder.add(node).     }     discoBuilder.localNodeId(randomFrom(nodesList).getId()).     discoBuilder.masterNodeId(randomFrom(nodesList).getId()).     return discoBuilder.build(). }
false;private,static;3;4;;private static DiscoveryNode newNode(int nodeId, Map<String, String> attributes, Set<DiscoveryNode.Role> roles) {     return new DiscoveryNode("name_" + nodeId, "node_" + nodeId, buildNewFakeTransportAddress(), attributes, roles, Version.CURRENT). }
false;;1;4;;@Override Set<String> matchingNodeIds(DiscoveryNodes nodes) {     return Collections.singleton(nodes.getLocalNodeId()). }
false;;1;4;;@Override Set<String> matchingNodeIds(DiscoveryNodes nodes) {     return Collections.singleton(nodes.getMasterNodeId()). }
false;;1;6;;@Override Set<String> matchingNodeIds(DiscoveryNodes nodes) {     Set<String> ids = new HashSet<>().     nodes.getMasterNodes().keysIt().forEachRemaining(ids::add).     return ids. }
false;;1;6;;@Override Set<String> matchingNodeIds(DiscoveryNodes nodes) {     Set<String> ids = new HashSet<>().     nodes.getDataNodes().keysIt().forEachRemaining(ids::add).     return ids. }
false;;1;6;;@Override Set<String> matchingNodeIds(DiscoveryNodes nodes) {     Set<String> ids = new HashSet<>().     nodes.getIngestNodes().keysIt().forEachRemaining(ids::add).     return ids. }
false;;1;6;;@Override Set<String> matchingNodeIds(DiscoveryNodes nodes) {     Set<String> ids = new HashSet<>().     nodes.getCoordinatingOnlyNodes().keysIt().forEachRemaining(ids::add).     return ids. }
false;;1;10;;@Override Set<String> matchingNodeIds(DiscoveryNodes nodes) {     Set<String> ids = new HashSet<>().     nodes.getNodes().valuesIt().forEachRemaining(node -> {         if ("value".equals(node.getAttributes().get("attr"))) {             ids.add(node.getId()).         }     }).     return ids. }
false;abstract;1;1;;abstract Set<String> matchingNodeIds(DiscoveryNodes nodes).
false;public;0;17;;public void testMaxMinNodeVersion() {     DiscoveryNodes.Builder discoBuilder = DiscoveryNodes.builder().     discoBuilder.add(new DiscoveryNode("name_" + 1, "node_" + 1, buildNewFakeTransportAddress(), Collections.emptyMap(), new HashSet<>(randomSubsetOf(Arrays.asList(DiscoveryNode.Role.values()))), Version.fromString("5.1.0"))).     discoBuilder.add(new DiscoveryNode("name_" + 2, "node_" + 2, buildNewFakeTransportAddress(), Collections.emptyMap(), new HashSet<>(randomSubsetOf(Arrays.asList(DiscoveryNode.Role.values()))), Version.fromString("6.3.0"))).     discoBuilder.add(new DiscoveryNode("name_" + 3, "node_" + 3, buildNewFakeTransportAddress(), Collections.emptyMap(), new HashSet<>(randomSubsetOf(Arrays.asList(DiscoveryNode.Role.values()))), Version.fromString("1.1.0"))).     discoBuilder.localNodeId("name_1").     discoBuilder.masterNodeId("name_2").     DiscoveryNodes build = discoBuilder.build().     assertEquals(Version.fromString("6.3.0"), build.getMaxNodeVersion()).     assertEquals(Version.fromString("1.1.0"), build.getMinNodeVersion()). }
