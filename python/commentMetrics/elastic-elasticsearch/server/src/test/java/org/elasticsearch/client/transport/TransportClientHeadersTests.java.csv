commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Override public void tearDown() throws Exception {     try {         // stop this first before we bubble up since         // transportService uses the threadpool that super.tearDown will close         transportService.stop().         transportService.close().     } finally {         super.tearDown().     } }
false;protected;2;20;;@Override protected Client buildClient(Settings headersSettings, Action[] testedActions) {     transportService = MockTransportService.createNewService(Settings.EMPTY, Version.CURRENT, threadPool, null).     transportService.start().     transportService.acceptIncomingRequests().     String transport = getTestTransportType().     TransportClient client = new MockTransportClient(Settings.builder().put("client.transport.sniff", false).put("cluster.name", "cluster1").put("node.name", "transport_client_" + this.getTestName()).put(NetworkModule.TRANSPORT_TYPE_SETTING.getKey(), transport).put(headersSettings).build(), InternalTransportServiceInterceptor.TestPlugin.class).     InternalTransportServiceInterceptor.TestPlugin plugin = client.injector.getInstance(PluginsService.class).filterPlugins(InternalTransportServiceInterceptor.TestPlugin.class).stream().findFirst().get().     plugin.instance.threadPool = client.threadPool().     plugin.instance.address = transportService.boundAddress().publishAddress().     client.addTransportAddress(transportService.boundAddress().publishAddress()).     return client. }
false;public;0;26;;public void testWithSniffing() throws Exception {     String transport = getTestTransportType().     try (TransportClient client = new MockTransportClient(Settings.builder().put("client.transport.sniff", true).put("cluster.name", "cluster1").put("node.name", "transport_client_" + this.getTestName() + "_1").put("client.transport.nodes_sampler_interval", "1s").put(NetworkModule.TRANSPORT_TYPE_SETTING.getKey(), transport).put(HEADER_SETTINGS).put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).build(), InternalTransportServiceInterceptor.TestPlugin.class)) {         InternalTransportServiceInterceptor.TestPlugin plugin = client.injector.getInstance(PluginsService.class).filterPlugins(InternalTransportServiceInterceptor.TestPlugin.class).stream().findFirst().get().         plugin.instance.threadPool = client.threadPool().         plugin.instance.address = transportService.boundAddress().publishAddress().         client.addTransportAddress(transportService.boundAddress().publishAddress()).         if (!plugin.instance.clusterStateLatch.await(5, TimeUnit.SECONDS)) {             fail("takes way too long to get the cluster state").         }         assertEquals(1, client.connectedNodes().size()).         assertEquals(client.connectedNodes().get(0).getAddress(), transportService.boundAddress().publishAddress()).     } }
false;public;4;6;;@Override public <T extends TransportRequest> TransportRequestHandler<T> interceptHandler(String action, String executor, boolean forceExecution, TransportRequestHandler<T> actualHandler) {     return instance.interceptHandler(action, executor, forceExecution, actualHandler). }
false;public;1;4;;@Override public AsyncSender interceptSender(AsyncSender sender) {     return instance.interceptSender(sender). }
false;public;2;17;;@Override public List<TransportInterceptor> getTransportInterceptors(NamedWriteableRegistry namedWriteableRegistry, ThreadContext threadContext) {     return Collections.singletonList(new TransportInterceptor() {          @Override         public <T extends TransportRequest> TransportRequestHandler<T> interceptHandler(String action, String executor, boolean forceExecution, TransportRequestHandler<T> actualHandler) {             return instance.interceptHandler(action, executor, forceExecution, actualHandler).         }          @Override         public AsyncSender interceptSender(AsyncSender sender) {             return instance.interceptSender(sender).         }     }). }
false;public;5;28;;@Override public <T extends TransportResponse> void sendRequest(Transport.Connection connection, String action, TransportRequest request, TransportRequestOptions options, TransportResponseHandler<T> handler) {     final ClusterName clusterName = new ClusterName("cluster1").     if (TransportLivenessAction.NAME.equals(action)) {         assertHeaders(threadPool).         ((TransportResponseHandler<LivenessResponse>) handler).handleResponse(new LivenessResponse(clusterName, connection.getNode())).     } else if (ClusterStateAction.NAME.equals(action)) {         assertHeaders(threadPool).         ClusterName cluster1 = clusterName.         ClusterState.Builder builder = ClusterState.builder(cluster1).         // the sniffer detects only data nodes         builder.nodes(DiscoveryNodes.builder().add(new DiscoveryNode("node_id", "someId", "some_ephemeralId_id", address.address().getHostString(), address.getAddress(), address, Collections.emptyMap(), Collections.singleton(DiscoveryNode.Role.DATA), Version.CURRENT))).         ((TransportResponseHandler<ClusterStateResponse>) handler).handleResponse(new ClusterStateResponse(cluster1, builder.build(), 0L, false)).         clusterStateLatch.countDown().     } else if (TransportService.HANDSHAKE_ACTION_NAME.equals(action)) {         ((TransportResponseHandler<TransportService.HandshakeResponse>) handler).handleResponse(new TransportService.HandshakeResponse(connection.getNode(), clusterName, connection.getNode().getVersion())).     } else {         handler.handleException(new TransportException("", new InternalException(action))).     } }
false;public;1;33;;@Override public AsyncSender interceptSender(AsyncSender sender) {     return new AsyncSender() {          @Override         public <T extends TransportResponse> void sendRequest(Transport.Connection connection, String action, TransportRequest request, TransportRequestOptions options, TransportResponseHandler<T> handler) {             final ClusterName clusterName = new ClusterName("cluster1").             if (TransportLivenessAction.NAME.equals(action)) {                 assertHeaders(threadPool).                 ((TransportResponseHandler<LivenessResponse>) handler).handleResponse(new LivenessResponse(clusterName, connection.getNode())).             } else if (ClusterStateAction.NAME.equals(action)) {                 assertHeaders(threadPool).                 ClusterName cluster1 = clusterName.                 ClusterState.Builder builder = ClusterState.builder(cluster1).                 // the sniffer detects only data nodes                 builder.nodes(DiscoveryNodes.builder().add(new DiscoveryNode("node_id", "someId", "some_ephemeralId_id", address.address().getHostString(), address.getAddress(), address, Collections.emptyMap(), Collections.singleton(DiscoveryNode.Role.DATA), Version.CURRENT))).                 ((TransportResponseHandler<ClusterStateResponse>) handler).handleResponse(new ClusterStateResponse(cluster1, builder.build(), 0L, false)).                 clusterStateLatch.countDown().             } else if (TransportService.HANDSHAKE_ACTION_NAME.equals(action)) {                 ((TransportResponseHandler<TransportService.HandshakeResponse>) handler).handleResponse(new TransportService.HandshakeResponse(connection.getNode(), clusterName, connection.getNode().getVersion())).             } else {                 handler.handleException(new TransportException("", new InternalException(action))).             }         }     }. }
