commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override public GeoPoint nextValue() {     if (docID != 0) {         fail().     }     return points[i++]. }
false;public;1;5;;@Override public boolean advanceExact(int docId) {     docID = docId.     return points.length > 0. }
false;public;0;7;;@Override public int docValueCount() {     if (docID != 0) {         return 0.     }     return points.length. }
false;private,static;1;28;;private static MultiGeoPointValues wrap(final GeoPoint... points) {     return new MultiGeoPointValues() {          int docID = -1.          int i.          @Override         public GeoPoint nextValue() {             if (docID != 0) {                 fail().             }             return points[i++].         }          @Override         public boolean advanceExact(int docId) {             docID = docId.             return points.length > 0.         }          @Override         public int docValueCount() {             if (docID != 0) {                 return 0.             }             return points.length.         }     }. }
false;private,static;0;3;;private static double randomLat() {     return randomDouble() * 180 - 90. }
false;private,static;0;3;;private static double randomLon() {     return randomDouble() * 360 - 180. }
false;public;0;19;;public void testGeoGetLatLon() throws IOException {     final double lat1 = randomLat().     final double lat2 = randomLat().     final double lon1 = randomLon().     final double lon2 = randomLon().     final MultiGeoPointValues values = wrap(new GeoPoint(lat1, lon1), new GeoPoint(lat2, lon2)).     final ScriptDocValues.GeoPoints script = new ScriptDocValues.GeoPoints(values).     script.setNextDocId(1).     assertEquals(true, script.isEmpty()).     script.setNextDocId(0).     assertEquals(false, script.isEmpty()).     assertEquals(new GeoPoint(lat1, lon1), script.getValue()).     assertEquals(lat1, script.getLat(), 0).     assertEquals(lon1, script.getLon(), 0).     assertTrue(Arrays.equals(new double[] { lat1, lat2 }, script.getLats())).     assertTrue(Arrays.equals(new double[] { lon1, lon2 }, script.getLons())). }
false;public;0;25;;public void testGeoDistance() throws IOException {     final double lat = randomLat().     final double lon = randomLon().     final MultiGeoPointValues values = wrap(new GeoPoint(lat, lon)).     final ScriptDocValues.GeoPoints script = new ScriptDocValues.GeoPoints(values).     script.setNextDocId(0).     final ScriptDocValues.GeoPoints emptyScript = new ScriptDocValues.GeoPoints(wrap()).     emptyScript.setNextDocId(0).     final double otherLat = randomLat().     final double otherLon = randomLon().     assertEquals(GeoUtils.arcDistance(lat, lon, otherLat, otherLon) / 1000d, script.arcDistance(otherLat, otherLon) / 1000d, 0.01).     assertEquals(GeoUtils.arcDistance(lat, lon, otherLat, otherLon) / 1000d, script.arcDistanceWithDefault(otherLat, otherLon, 42) / 1000d, 0.01).     assertEquals(42, emptyScript.arcDistanceWithDefault(otherLat, otherLon, 42), 0).     assertEquals(GeoUtils.planeDistance(lat, lon, otherLat, otherLon) / 1000d, script.planeDistance(otherLat, otherLon) / 1000d, 0.01).     assertEquals(GeoUtils.planeDistance(lat, lon, otherLat, otherLon) / 1000d, script.planeDistanceWithDefault(otherLat, otherLon, 42) / 1000d, 0.01).     assertEquals(42, emptyScript.planeDistanceWithDefault(otherLat, otherLon, 42), 0). }
