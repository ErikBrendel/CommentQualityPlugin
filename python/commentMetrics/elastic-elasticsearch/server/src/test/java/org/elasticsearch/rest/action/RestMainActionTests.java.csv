commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Method method() {     return Method.HEAD. }
false;public;0;23;;public void testHeadResponse() throws Exception {     final String nodeName = "node1".     final ClusterName clusterName = new ClusterName("cluster1").     final String clusterUUID = randomAlphaOfLengthBetween(10, 20).     final Version version = Version.CURRENT.     final Build build = Build.CURRENT.     final MainResponse mainResponse = new MainResponse(nodeName, version, clusterName, clusterUUID, build).     XContentBuilder builder = JsonXContent.contentBuilder().     RestRequest restRequest = new FakeRestRequest() {          @Override         public Method method() {             return Method.HEAD.         }     }.     BytesRestResponse response = RestMainAction.convertMainResponse(mainResponse, restRequest, builder).     assertNotNull(response).     assertThat(response.status(), equalTo(RestStatus.OK)). // the empty responses are handled in the HTTP layer so we do // not assert on them here }
false;public;0;31;;public void testGetResponse() throws Exception {     final String nodeName = "node1".     final ClusterName clusterName = new ClusterName("cluster1").     final String clusterUUID = randomAlphaOfLengthBetween(10, 20).     final Version version = Version.CURRENT.     final Build build = Build.CURRENT.     final boolean prettyPrint = randomBoolean().     final MainResponse mainResponse = new MainResponse(nodeName, version, clusterName, clusterUUID, build).     XContentBuilder builder = JsonXContent.contentBuilder().     Map<String, String> params = new HashMap<>().     if (prettyPrint == false) {         params.put("pretty", String.valueOf(prettyPrint)).     }     RestRequest restRequest = new FakeRestRequest.Builder(xContentRegistry()).withParams(params).build().     BytesRestResponse response = RestMainAction.convertMainResponse(mainResponse, restRequest, builder).     assertNotNull(response).     assertThat(response.status(), equalTo(RestStatus.OK)).     assertThat(response.content().length(), greaterThan(0)).     XContentBuilder responseBuilder = JsonXContent.contentBuilder().     if (prettyPrint) {         // do this to mimic what the rest layer does         responseBuilder.prettyPrint().lfAtEnd().     }     mainResponse.toXContent(responseBuilder, ToXContent.EMPTY_PARAMS).     BytesReference xcontentBytes = BytesReference.bytes(responseBuilder).     assertEquals(xcontentBytes, response.content()). }
