commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;public void testInvalidUpdateOnClosedIndex() {     createIndex("test").     assertAcked(client().admin().indices().prepareClose("test").get()).     IllegalArgumentException exception = expectThrows(IllegalArgumentException.class, () -> client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().put("index.analysis.char_filter.invalid_char.type", "invalid")).get()).     assertEquals(exception.getMessage(), "Unknown char_filter type [invalid] for [invalid_char]"). }
false;public;0;14;;public void testInvalidDynamicUpdate() {     createIndex("test").     IllegalArgumentException exception = expectThrows(IllegalArgumentException.class, () -> client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().put("index.dummy", "boom")).execute().actionGet()).     assertEquals(exception.getCause().getMessage(), "this setting goes boom").     IndexMetaData indexMetaData = client().admin().cluster().prepareState().execute().actionGet().getState().metaData().index("test").     assertNotEquals(indexMetaData.getSettings().get("index.dummy"), "invalid dynamic value"). }
false;protected;0;5;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     return Arrays.asList(DummySettingPlugin.class, FinalSettingPlugin.class). }
false;public;1;7;;@Override public void onIndexModule(IndexModule indexModule) {     indexModule.addSettingsUpdateConsumer(DUMMY_SETTING, (s) -> {     }, (s) -> {         if (s.equals("boom"))             throw new IllegalArgumentException("this setting goes boom").     }). }
false;public;0;5;;@Override public List<Setting<?>> getSettings() {     return Arrays.asList(DUMMY_SETTING, DUMMY_ACCOUNT_PW, DUMMY_ACCOUNT_USER, DUMMY_ACCOUNT_PW_CLUSTER, DUMMY_ACCOUNT_USER_CLUSTER). }
false;public;1;3;;@Override public void onIndexModule(IndexModule indexModule) { }
false;public;0;4;;@Override public List<Setting<?>> getSettings() {     return Collections.singletonList(FINAL_SETTING). }
true;protected;1;6;/**  * Needed by {@link UpdateSettingsIT#testEngineGCDeletesSetting()}  */ ;/**  * Needed by {@link UpdateSettingsIT#testEngineGCDeletesSetting()}  */ @Override protected Settings nodeSettings(int nodeOrdinal) {     return Settings.builder().put(super.nodeSettings(nodeOrdinal)).put("thread_pool.estimated_time_interval", 0).build(). }
false;public;0;44;;public void testUpdateDependentClusterSettings() {     IllegalArgumentException iae = expectThrows(IllegalArgumentException.class, () -> client().admin().cluster().prepareUpdateSettings().setPersistentSettings(Settings.builder().put("cluster.acc.test.pw", "asdf")).get()).     assertEquals("missing required setting [cluster.acc.test.user] for setting [cluster.acc.test.pw]", iae.getMessage()).     iae = expectThrows(IllegalArgumentException.class, () -> client().admin().cluster().prepareUpdateSettings().setTransientSettings(Settings.builder().put("cluster.acc.test.pw", "asdf")).get()).     assertEquals("missing required setting [cluster.acc.test.user] for setting [cluster.acc.test.pw]", iae.getMessage()).     iae = expectThrows(IllegalArgumentException.class, () -> client().admin().cluster().prepareUpdateSettings().setTransientSettings(Settings.builder().put("cluster.acc.test.pw", "asdf")).setPersistentSettings(Settings.builder().put("cluster.acc.test.user", "asdf")).get()).     assertEquals("missing required setting [cluster.acc.test.user] for setting [cluster.acc.test.pw]", iae.getMessage()).     if (randomBoolean()) {         client().admin().cluster().prepareUpdateSettings().setTransientSettings(Settings.builder().put("cluster.acc.test.pw", "asdf").put("cluster.acc.test.user", "asdf")).get().         iae = expectThrows(IllegalArgumentException.class, () -> client().admin().cluster().prepareUpdateSettings().setTransientSettings(Settings.builder().putNull("cluster.acc.test.user")).get()).         assertEquals("missing required setting [cluster.acc.test.user] for setting [cluster.acc.test.pw]", iae.getMessage()).         client().admin().cluster().prepareUpdateSettings().setTransientSettings(Settings.builder().putNull("cluster.acc.test.pw").putNull("cluster.acc.test.user")).get().     } else {         client().admin().cluster().prepareUpdateSettings().setPersistentSettings(Settings.builder().put("cluster.acc.test.pw", "asdf").put("cluster.acc.test.user", "asdf")).get().         iae = expectThrows(IllegalArgumentException.class, () -> client().admin().cluster().prepareUpdateSettings().setPersistentSettings(Settings.builder().putNull("cluster.acc.test.user")).get()).         assertEquals("missing required setting [cluster.acc.test.user] for setting [cluster.acc.test.pw]", iae.getMessage()).         client().admin().cluster().prepareUpdateSettings().setPersistentSettings(Settings.builder().putNull("cluster.acc.test.pw").putNull("cluster.acc.test.user")).get().     } }
false;public;0;72;;public void testUpdateDependentIndexSettings() {     IllegalArgumentException iae = expectThrows(IllegalArgumentException.class, () -> prepareCreate("test", Settings.builder().put("index.acc.test.pw", "asdf")).get()).     assertEquals("missing required setting [index.acc.test.user] for setting [index.acc.test.pw]", iae.getMessage()).     createIndex("test").     for (int i = 0. i < 2. i++) {         if (i == 1) {             // now do it on a closed index             client().admin().indices().prepareClose("test").get().         }         iae = expectThrows(IllegalArgumentException.class, () -> client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().put("index.acc.test.pw", "asdf")).execute().actionGet()).         assertEquals("missing required setting [index.acc.test.user] for setting [index.acc.test.pw]", iae.getMessage()).         // user has no dependency         client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().put("index.acc.test.user", "asdf")).execute().actionGet().         // now we are consistent         client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().put("index.acc.test.pw", "test")).execute().actionGet().         // now try to remove it and make sure it fails         iae = expectThrows(IllegalArgumentException.class, () -> client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().putNull("index.acc.test.user")).execute().actionGet()).         assertEquals("missing required setting [index.acc.test.user] for setting [index.acc.test.pw]", iae.getMessage()).         // now we are consistent         client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().putNull("index.acc.test.pw").putNull("index.acc.test.user")).execute().actionGet().     } }
false;public;0;36;;public void testResetDefaultWithWildcard() {     createIndex("test").     client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().put("index.refresh_interval", -1)).execute().actionGet().     IndexMetaData indexMetaData = client().admin().cluster().prepareState().execute().actionGet().getState().metaData().index("test").     assertEquals(indexMetaData.getSettings().get("index.refresh_interval"), "-1").     for (IndicesService service : internalCluster().getInstances(IndicesService.class)) {         IndexService indexService = service.indexService(resolveIndex("test")).         if (indexService != null) {             assertEquals(indexService.getIndexSettings().getRefreshInterval().millis(), -1).         }     }     client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().putNull("index.ref*")).execute().actionGet().     indexMetaData = client().admin().cluster().prepareState().execute().actionGet().getState().metaData().index("test").     assertNull(indexMetaData.getSettings().get("index.refresh_interval")).     for (IndicesService service : internalCluster().getInstances(IndicesService.class)) {         IndexService indexService = service.indexService(resolveIndex("test")).         if (indexService != null) {             assertEquals(indexService.getIndexSettings().getRefreshInterval().millis(), 1000).         }     } }
false;public;0;41;;public void testResetDefault() {     createIndex("test").     client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().put("index.refresh_interval", -1).put("index.translog.flush_threshold_size", "1024b").put("index.translog.generation_threshold_size", "4096b")).execute().actionGet().     IndexMetaData indexMetaData = client().admin().cluster().prepareState().execute().actionGet().getState().metaData().index("test").     assertEquals(indexMetaData.getSettings().get("index.refresh_interval"), "-1").     for (IndicesService service : internalCluster().getInstances(IndicesService.class)) {         IndexService indexService = service.indexService(resolveIndex("test")).         if (indexService != null) {             assertEquals(indexService.getIndexSettings().getRefreshInterval().millis(), -1).             assertEquals(indexService.getIndexSettings().getFlushThresholdSize().getBytes(), 1024).             assertEquals(indexService.getIndexSettings().getGenerationThresholdSize().getBytes(), 4096).         }     }     client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().putNull("index.refresh_interval")).execute().actionGet().     indexMetaData = client().admin().cluster().prepareState().execute().actionGet().getState().metaData().index("test").     assertNull(indexMetaData.getSettings().get("index.refresh_interval")).     for (IndicesService service : internalCluster().getInstances(IndicesService.class)) {         IndexService indexService = service.indexService(resolveIndex("test")).         if (indexService != null) {             assertEquals(indexService.getIndexSettings().getRefreshInterval().millis(), 1000).             assertEquals(indexService.getIndexSettings().getFlushThresholdSize().getBytes(), 1024).             assertEquals(indexService.getIndexSettings().getGenerationThresholdSize().getBytes(), 4096).         }     } }
false;public;0;113;;public void testOpenCloseUpdateSettings() throws Exception {     createIndex("test").     expectThrows(IllegalArgumentException.class, () -> client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().put("index.refresh_interval", // this one can change     -1).put("index.fielddata.cache", // this one can't     "none")).execute().actionGet()).     expectThrows(IllegalArgumentException.class, () -> client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().put("index.refresh_interval", // this one can change     -1).put("index.final", // this one can't     "no")).execute().actionGet()).     IndexMetaData indexMetaData = client().admin().cluster().prepareState().execute().actionGet().getState().metaData().index("test").     assertThat(indexMetaData.getSettings().get("index.refresh_interval"), nullValue()).     assertThat(indexMetaData.getSettings().get("index.fielddata.cache"), nullValue()).     assertThat(indexMetaData.getSettings().get("index.final"), nullValue()).     // Now verify via dedicated get settings api:     GetSettingsResponse getSettingsResponse = client().admin().indices().prepareGetSettings("test").get().     assertThat(getSettingsResponse.getSetting("test", "index.refresh_interval"), nullValue()).     assertThat(getSettingsResponse.getSetting("test", "index.fielddata.cache"), nullValue()).     assertThat(getSettingsResponse.getSetting("test", "index.final"), nullValue()).     client().admin().indices().prepareUpdateSettings("test").setSettings(// this one can change     Settings.builder().put("index.refresh_interval", -1)).execute().actionGet().     indexMetaData = client().admin().cluster().prepareState().execute().actionGet().getState().metaData().index("test").     assertThat(indexMetaData.getSettings().get("index.refresh_interval"), equalTo("-1")).     // Now verify via dedicated get settings api:     getSettingsResponse = client().admin().indices().prepareGetSettings("test").get().     assertThat(getSettingsResponse.getSetting("test", "index.refresh_interval"), equalTo("-1")).     // now close the index, change the non dynamic setting, and see that it applies     // Wait for the index to turn green before attempting to close it     ClusterHealthResponse health = client().admin().cluster().prepareHealth().setTimeout("30s").setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet().     assertThat(health.isTimedOut(), equalTo(false)).     client().admin().indices().prepareClose("test").execute().actionGet().     client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 1)).execute().actionGet().     indexMetaData = client().admin().cluster().prepareState().execute().actionGet().getState().metaData().index("test").     assertThat(indexMetaData.getNumberOfReplicas(), equalTo(1)).     client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().put("index.refresh_interval", // this one can change     "1s").put("index.fielddata.cache", // this one can't     "none")).execute().actionGet().     indexMetaData = client().admin().cluster().prepareState().execute().actionGet().getState().metaData().index("test").     assertThat(indexMetaData.getSettings().get("index.refresh_interval"), equalTo("1s")).     assertThat(indexMetaData.getSettings().get("index.fielddata.cache"), equalTo("none")).     IllegalArgumentException ex = expectThrows(IllegalArgumentException.class, () -> client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().put("index.refresh_interval", // this one can change     -1).put("index.final", // this one really can't     "no")).execute().actionGet()).     assertThat(ex.getMessage(), containsString("final test setting [index.final], not updateable")).     indexMetaData = client().admin().cluster().prepareState().execute().actionGet().getState().metaData().index("test").     assertThat(indexMetaData.getSettings().get("index.refresh_interval"), equalTo("1s")).     assertThat(indexMetaData.getSettings().get("index.final"), nullValue()).     // Now verify via dedicated get settings api:     getSettingsResponse = client().admin().indices().prepareGetSettings("test").get().     assertThat(getSettingsResponse.getSetting("test", "index.refresh_interval"), equalTo("1s")).     assertThat(getSettingsResponse.getSetting("test", "index.final"), nullValue()). }
false;public;0;23;;public void testEngineGCDeletesSetting() throws Exception {     createIndex("test").     client().prepareIndex("test", "type", "1").setSource("f", 1).get().     DeleteResponse response = client().prepareDelete("test", "type", "1").get().     long seqNo = response.getSeqNo().     long primaryTerm = response.getPrimaryTerm().     // delete is still in cache this should work     client().prepareIndex("test", "type", "1").setSource("f", 2).setIfSeqNo(seqNo).setIfPrimaryTerm(primaryTerm).get().     assertAcked(client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().put("index.gc_deletes", 0))).     response = client().prepareDelete("test", "type", "1").get().     seqNo = response.getSeqNo().     // Make sure the time has advanced for InternalEngine#resolveDocVersion()     for (ThreadPool threadPool : internalCluster().getInstances(ThreadPool.class)) {         long startTime = threadPool.relativeTimeInMillis().         assertBusy(() -> assertThat(threadPool.relativeTimeInMillis(), greaterThan(startTime))).     }     // delete is should not be in cache     assertThrows(client().prepareIndex("test", "type", "1").setSource("f", 3).setIfSeqNo(seqNo).setIfPrimaryTerm(primaryTerm), VersionConflictEngineException.class). }
false;public;0;25;;public void testUpdateSettingsWithBlocks() {     createIndex("test").     ensureGreen("test").     Settings.Builder builder = Settings.builder().put("index.refresh_interval", -1).     for (String blockSetting : Arrays.asList(SETTING_BLOCKS_READ, SETTING_BLOCKS_WRITE)) {         try {             enableIndexBlock("test", blockSetting).             assertAcked(client().admin().indices().prepareUpdateSettings("test").setSettings(builder)).         } finally {             disableIndexBlock("test", blockSetting).         }     }     // Closing an index is blocked     for (String blockSetting : Arrays.asList(SETTING_READ_ONLY, SETTING_BLOCKS_METADATA)) {         try {             enableIndexBlock("test", blockSetting).             assertBlocked(client().admin().indices().prepareUpdateSettings("test").setSettings(builder)).         } finally {             disableIndexBlock("test", blockSetting).         }     } }
false;public;0;49;;public void testSettingsVersion() {     createIndex("test").     ensureGreen("test").     {         final long settingsVersion = client().admin().cluster().prepareState().get().getState().metaData().index("test").getSettingsVersion().         assertAcked(client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().put("index.refresh_interval", "500ms")).get()).         final long newSettingsVersion = client().admin().cluster().prepareState().get().getState().metaData().index("test").getSettingsVersion().         assertThat(newSettingsVersion, equalTo(1 + settingsVersion)).     }     {         final boolean block = randomBoolean().         assertAcked(client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().put("index.blocks.read_only", block)).get()).         final long settingsVersion = client().admin().cluster().prepareState().get().getState().metaData().index("test").getSettingsVersion().         assertAcked(client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().put("index.blocks.read_only", block == false)).get()).         final long newSettingsVersion = client().admin().cluster().prepareState().get().getState().metaData().index("test").getSettingsVersion().         assertThat(newSettingsVersion, equalTo(1 + settingsVersion)).         // if the read-only block is present, remove it         if (block == false) {             assertAcked(client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().put("index.blocks.read_only", false)).get()).         }     } }
false;public;0;52;;public void testSettingsVersionUnchanged() {     createIndex("test").     ensureGreen("test").     {         final long settingsVersion = client().admin().cluster().prepareState().get().getState().metaData().index("test").getSettingsVersion().         final String refreshInterval = client().admin().indices().prepareGetSettings("test").get().getSetting("test", "index.refresh_interval").         assertAcked(client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().put("index.refresh_interval", refreshInterval)).get()).         final long newSettingsVersion = client().admin().cluster().prepareState().get().getState().metaData().index("test").getSettingsVersion().         assertThat(newSettingsVersion, equalTo(settingsVersion)).     }     {         final boolean block = randomBoolean().         assertAcked(client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().put("index.blocks.read_only", block)).get()).         // now put the same block again         final long settingsVersion = client().admin().cluster().prepareState().get().getState().metaData().index("test").getSettingsVersion().         assertAcked(client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().put("index.blocks.read_only", block)).get()).         final long newSettingsVersion = client().admin().cluster().prepareState().get().getState().metaData().index("test").getSettingsVersion().         assertThat(newSettingsVersion, equalTo(settingsVersion)).         // if the read-only block is present, remove it         if (block) {             assertAcked(client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().put("index.blocks.read_only", false)).get()).         }     } }
true;public;0;17;/**  * The setting {@link IndexMetaData#SETTING_NUMBER_OF_REPLICAS} is special due to handling in  * {@link IndexMetaData.Builder#numberOfReplicas(int)}. Therefore we have a dedicated test that this setting is handled properly with  * respect to settings version when applying a settings change that does not change the number of replicas.  */ ;/**  * The setting {@link IndexMetaData#SETTING_NUMBER_OF_REPLICAS} is special due to handling in  * {@link IndexMetaData.Builder#numberOfReplicas(int)}. Therefore we have a dedicated test that this setting is handled properly with  * respect to settings version when applying a settings change that does not change the number of replicas.  */ public void testNumberOfReplicasSettingsVersionUnchanged() {     createIndex("test").     final long settingsVersion = client().admin().cluster().prepareState().get().getState().metaData().index("test").getSettingsVersion().     final int numberOfReplicas = Integer.valueOf(client().admin().indices().prepareGetSettings("test").get().getSetting("test", "index.number_of_replicas")).     assertAcked(client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().put("index.number_of_replicas", numberOfReplicas)).get()).     final long newSettingsVersion = client().admin().cluster().prepareState().get().getState().metaData().index("test").getSettingsVersion().     assertThat(newSettingsVersion, equalTo(settingsVersion)). }
true;public;0;18;/**  * The setting {@link IndexMetaData#SETTING_NUMBER_OF_REPLICAS} is special due to handling in  * {@link IndexMetaData.Builder#numberOfReplicas(int)}. Therefore we have a dedicated test that this setting is handled properly with  * respect to settings version when changing the number of replicas.  */ ;/**  * The setting {@link IndexMetaData#SETTING_NUMBER_OF_REPLICAS} is special due to handling in  * {@link IndexMetaData.Builder#numberOfReplicas(int)}. Therefore we have a dedicated test that this setting is handled properly with  * respect to settings version when changing the number of replicas.  */ public void testNumberOfReplicasSettingsVersion() {     createIndex("test").     final long settingsVersion = client().admin().cluster().prepareState().get().getState().metaData().index("test").getSettingsVersion().     final int numberOfReplicas = Integer.valueOf(client().admin().indices().prepareGetSettings("test").get().getSetting("test", "index.number_of_replicas")).     assertAcked(client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().put("index.number_of_replicas", 1 + numberOfReplicas)).get()).     final long newSettingsVersion = client().admin().cluster().prepareState().get().getState().metaData().index("test").getSettingsVersion().     assertThat(newSettingsVersion, equalTo(1 + settingsVersion)). }
