# id;timestamp;commentText;codeText;commentWords;codeWords
UpdateSettingsIT -> public void testNumberOfReplicasSettingsVersionUnchanged();1539723533;The setting {@link IndexMetaData#SETTING_NUMBER_OF_REPLICAS} is special due to handling in_{@link IndexMetaData.Builder#numberOfReplicas(int)}. Therefore we have a dedicated test that this setting is handled properly with_respect to settings version when applying a settings change that does not change the number of replicas.;public void testNumberOfReplicasSettingsVersionUnchanged() {_        createIndex("test")___        final long settingsVersion =_                client().admin().cluster().prepareState().get().getState().metaData().index("test").getSettingsVersion()__        final int numberOfReplicas = Integer.valueOf(_                client().admin().indices().prepareGetSettings("test").get().getSetting("test", "index.number_of_replicas"))__        assertAcked(client()_                .admin()_                .indices()_                .prepareUpdateSettings("test")_                .setSettings(Settings.builder().put("index.number_of_replicas", numberOfReplicas))_                .get())__        final long newSettingsVersion =_                client().admin().cluster().prepareState().get().getState().metaData().index("test").getSettingsVersion()__        assertThat(newSettingsVersion, equalTo(settingsVersion))__    };the,setting,link,index,meta,data,is,special,due,to,handling,in,link,index,meta,data,builder,number,of,replicas,int,therefore,we,have,a,dedicated,test,that,this,setting,is,handled,properly,with,respect,to,settings,version,when,applying,a,settings,change,that,does,not,change,the,number,of,replicas;public,void,test,number,of,replicas,settings,version,unchanged,create,index,test,final,long,settings,version,client,admin,cluster,prepare,state,get,get,state,meta,data,index,test,get,settings,version,final,int,number,of,replicas,integer,value,of,client,admin,indices,prepare,get,settings,test,get,get,setting,test,index,assert,acked,client,admin,indices,prepare,update,settings,test,set,settings,settings,builder,put,index,number,of,replicas,get,final,long,new,settings,version,client,admin,cluster,prepare,state,get,get,state,meta,data,index,test,get,settings,version,assert,that,new,settings,version,equal,to,settings,version
UpdateSettingsIT -> public void testNumberOfReplicasSettingsVersionUnchanged();1540847035;The setting {@link IndexMetaData#SETTING_NUMBER_OF_REPLICAS} is special due to handling in_{@link IndexMetaData.Builder#numberOfReplicas(int)}. Therefore we have a dedicated test that this setting is handled properly with_respect to settings version when applying a settings change that does not change the number of replicas.;public void testNumberOfReplicasSettingsVersionUnchanged() {_        createIndex("test")___        final long settingsVersion =_                client().admin().cluster().prepareState().get().getState().metaData().index("test").getSettingsVersion()__        final int numberOfReplicas = Integer.valueOf(_                client().admin().indices().prepareGetSettings("test").get().getSetting("test", "index.number_of_replicas"))__        assertAcked(client()_                .admin()_                .indices()_                .prepareUpdateSettings("test")_                .setSettings(Settings.builder().put("index.number_of_replicas", numberOfReplicas))_                .get())__        final long newSettingsVersion =_                client().admin().cluster().prepareState().get().getState().metaData().index("test").getSettingsVersion()__        assertThat(newSettingsVersion, equalTo(settingsVersion))__    };the,setting,link,index,meta,data,is,special,due,to,handling,in,link,index,meta,data,builder,number,of,replicas,int,therefore,we,have,a,dedicated,test,that,this,setting,is,handled,properly,with,respect,to,settings,version,when,applying,a,settings,change,that,does,not,change,the,number,of,replicas;public,void,test,number,of,replicas,settings,version,unchanged,create,index,test,final,long,settings,version,client,admin,cluster,prepare,state,get,get,state,meta,data,index,test,get,settings,version,final,int,number,of,replicas,integer,value,of,client,admin,indices,prepare,get,settings,test,get,get,setting,test,index,assert,acked,client,admin,indices,prepare,update,settings,test,set,settings,settings,builder,put,index,number,of,replicas,get,final,long,new,settings,version,client,admin,cluster,prepare,state,get,get,state,meta,data,index,test,get,settings,version,assert,that,new,settings,version,equal,to,settings,version
UpdateSettingsIT -> public void testNumberOfReplicasSettingsVersionUnchanged();1549396415;The setting {@link IndexMetaData#SETTING_NUMBER_OF_REPLICAS} is special due to handling in_{@link IndexMetaData.Builder#numberOfReplicas(int)}. Therefore we have a dedicated test that this setting is handled properly with_respect to settings version when applying a settings change that does not change the number of replicas.;public void testNumberOfReplicasSettingsVersionUnchanged() {_        createIndex("test")___        final long settingsVersion =_                client().admin().cluster().prepareState().get().getState().metaData().index("test").getSettingsVersion()__        final int numberOfReplicas = Integer.valueOf(_                client().admin().indices().prepareGetSettings("test").get().getSetting("test", "index.number_of_replicas"))__        assertAcked(client()_                .admin()_                .indices()_                .prepareUpdateSettings("test")_                .setSettings(Settings.builder().put("index.number_of_replicas", numberOfReplicas))_                .get())__        final long newSettingsVersion =_                client().admin().cluster().prepareState().get().getState().metaData().index("test").getSettingsVersion()__        assertThat(newSettingsVersion, equalTo(settingsVersion))__    };the,setting,link,index,meta,data,is,special,due,to,handling,in,link,index,meta,data,builder,number,of,replicas,int,therefore,we,have,a,dedicated,test,that,this,setting,is,handled,properly,with,respect,to,settings,version,when,applying,a,settings,change,that,does,not,change,the,number,of,replicas;public,void,test,number,of,replicas,settings,version,unchanged,create,index,test,final,long,settings,version,client,admin,cluster,prepare,state,get,get,state,meta,data,index,test,get,settings,version,final,int,number,of,replicas,integer,value,of,client,admin,indices,prepare,get,settings,test,get,get,setting,test,index,assert,acked,client,admin,indices,prepare,update,settings,test,set,settings,settings,builder,put,index,number,of,replicas,get,final,long,new,settings,version,client,admin,cluster,prepare,state,get,get,state,meta,data,index,test,get,settings,version,assert,that,new,settings,version,equal,to,settings,version
UpdateSettingsIT -> public void testNumberOfReplicasSettingsVersionUnchanged();1550746427;The setting {@link IndexMetaData#SETTING_NUMBER_OF_REPLICAS} is special due to handling in_{@link IndexMetaData.Builder#numberOfReplicas(int)}. Therefore we have a dedicated test that this setting is handled properly with_respect to settings version when applying a settings change that does not change the number of replicas.;public void testNumberOfReplicasSettingsVersionUnchanged() {_        createIndex("test")___        final long settingsVersion =_                client().admin().cluster().prepareState().get().getState().metaData().index("test").getSettingsVersion()__        final int numberOfReplicas = Integer.valueOf(_                client().admin().indices().prepareGetSettings("test").get().getSetting("test", "index.number_of_replicas"))__        assertAcked(client()_                .admin()_                .indices()_                .prepareUpdateSettings("test")_                .setSettings(Settings.builder().put("index.number_of_replicas", numberOfReplicas))_                .get())__        final long newSettingsVersion =_                client().admin().cluster().prepareState().get().getState().metaData().index("test").getSettingsVersion()__        assertThat(newSettingsVersion, equalTo(settingsVersion))__    };the,setting,link,index,meta,data,is,special,due,to,handling,in,link,index,meta,data,builder,number,of,replicas,int,therefore,we,have,a,dedicated,test,that,this,setting,is,handled,properly,with,respect,to,settings,version,when,applying,a,settings,change,that,does,not,change,the,number,of,replicas;public,void,test,number,of,replicas,settings,version,unchanged,create,index,test,final,long,settings,version,client,admin,cluster,prepare,state,get,get,state,meta,data,index,test,get,settings,version,final,int,number,of,replicas,integer,value,of,client,admin,indices,prepare,get,settings,test,get,get,setting,test,index,assert,acked,client,admin,indices,prepare,update,settings,test,set,settings,settings,builder,put,index,number,of,replicas,get,final,long,new,settings,version,client,admin,cluster,prepare,state,get,get,state,meta,data,index,test,get,settings,version,assert,that,new,settings,version,equal,to,settings,version
UpdateSettingsIT -> public void testNumberOfReplicasSettingsVersion();1539723533;The setting {@link IndexMetaData#SETTING_NUMBER_OF_REPLICAS} is special due to handling in_{@link IndexMetaData.Builder#numberOfReplicas(int)}. Therefore we have a dedicated test that this setting is handled properly with_respect to settings version when changing the number of replicas.;public void testNumberOfReplicasSettingsVersion() {_        createIndex("test")___        final long settingsVersion =_                client().admin().cluster().prepareState().get().getState().metaData().index("test").getSettingsVersion()__        final int numberOfReplicas =_                Integer.valueOf(_                        client().admin().indices().prepareGetSettings("test").get().getSetting("test", "index.number_of_replicas"))__        assertAcked(client()_                .admin()_                .indices()_                .prepareUpdateSettings("test")_                .setSettings(Settings.builder().put("index.number_of_replicas", 1 + numberOfReplicas))_                .get())__        final long newSettingsVersion =_                client().admin().cluster().prepareState().get().getState().metaData().index("test").getSettingsVersion()__        assertThat(newSettingsVersion, equalTo(1 + settingsVersion))__    };the,setting,link,index,meta,data,is,special,due,to,handling,in,link,index,meta,data,builder,number,of,replicas,int,therefore,we,have,a,dedicated,test,that,this,setting,is,handled,properly,with,respect,to,settings,version,when,changing,the,number,of,replicas;public,void,test,number,of,replicas,settings,version,create,index,test,final,long,settings,version,client,admin,cluster,prepare,state,get,get,state,meta,data,index,test,get,settings,version,final,int,number,of,replicas,integer,value,of,client,admin,indices,prepare,get,settings,test,get,get,setting,test,index,assert,acked,client,admin,indices,prepare,update,settings,test,set,settings,settings,builder,put,index,1,number,of,replicas,get,final,long,new,settings,version,client,admin,cluster,prepare,state,get,get,state,meta,data,index,test,get,settings,version,assert,that,new,settings,version,equal,to,1,settings,version
UpdateSettingsIT -> public void testNumberOfReplicasSettingsVersion();1540847035;The setting {@link IndexMetaData#SETTING_NUMBER_OF_REPLICAS} is special due to handling in_{@link IndexMetaData.Builder#numberOfReplicas(int)}. Therefore we have a dedicated test that this setting is handled properly with_respect to settings version when changing the number of replicas.;public void testNumberOfReplicasSettingsVersion() {_        createIndex("test")___        final long settingsVersion =_                client().admin().cluster().prepareState().get().getState().metaData().index("test").getSettingsVersion()__        final int numberOfReplicas =_                Integer.valueOf(_                        client().admin().indices().prepareGetSettings("test").get().getSetting("test", "index.number_of_replicas"))__        assertAcked(client()_                .admin()_                .indices()_                .prepareUpdateSettings("test")_                .setSettings(Settings.builder().put("index.number_of_replicas", 1 + numberOfReplicas))_                .get())__        final long newSettingsVersion =_                client().admin().cluster().prepareState().get().getState().metaData().index("test").getSettingsVersion()__        assertThat(newSettingsVersion, equalTo(1 + settingsVersion))__    };the,setting,link,index,meta,data,is,special,due,to,handling,in,link,index,meta,data,builder,number,of,replicas,int,therefore,we,have,a,dedicated,test,that,this,setting,is,handled,properly,with,respect,to,settings,version,when,changing,the,number,of,replicas;public,void,test,number,of,replicas,settings,version,create,index,test,final,long,settings,version,client,admin,cluster,prepare,state,get,get,state,meta,data,index,test,get,settings,version,final,int,number,of,replicas,integer,value,of,client,admin,indices,prepare,get,settings,test,get,get,setting,test,index,assert,acked,client,admin,indices,prepare,update,settings,test,set,settings,settings,builder,put,index,1,number,of,replicas,get,final,long,new,settings,version,client,admin,cluster,prepare,state,get,get,state,meta,data,index,test,get,settings,version,assert,that,new,settings,version,equal,to,1,settings,version
UpdateSettingsIT -> public void testNumberOfReplicasSettingsVersion();1549396415;The setting {@link IndexMetaData#SETTING_NUMBER_OF_REPLICAS} is special due to handling in_{@link IndexMetaData.Builder#numberOfReplicas(int)}. Therefore we have a dedicated test that this setting is handled properly with_respect to settings version when changing the number of replicas.;public void testNumberOfReplicasSettingsVersion() {_        createIndex("test")___        final long settingsVersion =_                client().admin().cluster().prepareState().get().getState().metaData().index("test").getSettingsVersion()__        final int numberOfReplicas =_                Integer.valueOf(_                        client().admin().indices().prepareGetSettings("test").get().getSetting("test", "index.number_of_replicas"))__        assertAcked(client()_                .admin()_                .indices()_                .prepareUpdateSettings("test")_                .setSettings(Settings.builder().put("index.number_of_replicas", 1 + numberOfReplicas))_                .get())__        final long newSettingsVersion =_                client().admin().cluster().prepareState().get().getState().metaData().index("test").getSettingsVersion()__        assertThat(newSettingsVersion, equalTo(1 + settingsVersion))__    };the,setting,link,index,meta,data,is,special,due,to,handling,in,link,index,meta,data,builder,number,of,replicas,int,therefore,we,have,a,dedicated,test,that,this,setting,is,handled,properly,with,respect,to,settings,version,when,changing,the,number,of,replicas;public,void,test,number,of,replicas,settings,version,create,index,test,final,long,settings,version,client,admin,cluster,prepare,state,get,get,state,meta,data,index,test,get,settings,version,final,int,number,of,replicas,integer,value,of,client,admin,indices,prepare,get,settings,test,get,get,setting,test,index,assert,acked,client,admin,indices,prepare,update,settings,test,set,settings,settings,builder,put,index,1,number,of,replicas,get,final,long,new,settings,version,client,admin,cluster,prepare,state,get,get,state,meta,data,index,test,get,settings,version,assert,that,new,settings,version,equal,to,1,settings,version
UpdateSettingsIT -> public void testNumberOfReplicasSettingsVersion();1550746427;The setting {@link IndexMetaData#SETTING_NUMBER_OF_REPLICAS} is special due to handling in_{@link IndexMetaData.Builder#numberOfReplicas(int)}. Therefore we have a dedicated test that this setting is handled properly with_respect to settings version when changing the number of replicas.;public void testNumberOfReplicasSettingsVersion() {_        createIndex("test")___        final long settingsVersion =_                client().admin().cluster().prepareState().get().getState().metaData().index("test").getSettingsVersion()__        final int numberOfReplicas =_                Integer.valueOf(_                        client().admin().indices().prepareGetSettings("test").get().getSetting("test", "index.number_of_replicas"))__        assertAcked(client()_                .admin()_                .indices()_                .prepareUpdateSettings("test")_                .setSettings(Settings.builder().put("index.number_of_replicas", 1 + numberOfReplicas))_                .get())__        final long newSettingsVersion =_                client().admin().cluster().prepareState().get().getState().metaData().index("test").getSettingsVersion()__        assertThat(newSettingsVersion, equalTo(1 + settingsVersion))__    };the,setting,link,index,meta,data,is,special,due,to,handling,in,link,index,meta,data,builder,number,of,replicas,int,therefore,we,have,a,dedicated,test,that,this,setting,is,handled,properly,with,respect,to,settings,version,when,changing,the,number,of,replicas;public,void,test,number,of,replicas,settings,version,create,index,test,final,long,settings,version,client,admin,cluster,prepare,state,get,get,state,meta,data,index,test,get,settings,version,final,int,number,of,replicas,integer,value,of,client,admin,indices,prepare,get,settings,test,get,get,setting,test,index,assert,acked,client,admin,indices,prepare,update,settings,test,set,settings,settings,builder,put,index,1,number,of,replicas,get,final,long,new,settings,version,client,admin,cluster,prepare,state,get,get,state,meta,data,index,test,get,settings,version,assert,that,new,settings,version,equal,to,1,settings,version
