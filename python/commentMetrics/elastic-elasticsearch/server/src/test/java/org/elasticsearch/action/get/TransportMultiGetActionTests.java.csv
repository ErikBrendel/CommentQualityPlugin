commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public TaskManager getTaskManager() {     return taskManager. }
false;protected;3;3;;@Override protected void doExecute(Task task, MultiGetShardRequest request, ActionListener<MultiGetShardResponse> listener) { }
false;public,static;0;75;;@BeforeClass public static void beforeClass() throws Exception {     threadPool = new TestThreadPool(TransportMultiGetActionTests.class.getSimpleName()).     transportService = new TransportService(Settings.EMPTY, mock(Transport.class), threadPool, TransportService.NOOP_TRANSPORT_INTERCEPTOR, boundAddress -> DiscoveryNode.createLocal(Settings.builder().put("node.name", "node1").build(), boundAddress.publishAddress(), randomBase64UUID()), null, emptySet()) {          @Override         public TaskManager getTaskManager() {             return taskManager.         }     }.     final Index index1 = new Index("index1", randomBase64UUID()).     final Index index2 = new Index("index2", randomBase64UUID()).     final ClusterState clusterState = ClusterState.builder(new ClusterName(TransportMultiGetActionTests.class.getSimpleName())).metaData(new MetaData.Builder().put(new IndexMetaData.Builder(index1.getName()).settings(Settings.builder().put("index.version.created", Version.CURRENT).put("index.number_of_shards", 1).put("index.number_of_replicas", 1).put(IndexMetaData.SETTING_INDEX_UUID, index1.getUUID())).putMapping("_doc", XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder().startObject().startObject("_doc").startObject("_routing").field("required", false).endObject().endObject().endObject()), true, XContentType.JSON))).put(new IndexMetaData.Builder(index2.getName()).settings(Settings.builder().put("index.version.created", Version.CURRENT).put("index.number_of_shards", 1).put("index.number_of_replicas", 1).put(IndexMetaData.SETTING_INDEX_UUID, index1.getUUID())).putMapping("_doc", XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder().startObject().startObject("_doc").startObject("_routing").field("required", true).endObject().endObject().endObject()), true, XContentType.JSON)))).build().     final ShardIterator index1ShardIterator = mock(ShardIterator.class).     when(index1ShardIterator.shardId()).thenReturn(new ShardId(index1, randomInt())).     final ShardIterator index2ShardIterator = mock(ShardIterator.class).     when(index2ShardIterator.shardId()).thenReturn(new ShardId(index2, randomInt())).     final OperationRouting operationRouting = mock(OperationRouting.class).     when(operationRouting.getShards(eq(clusterState), eq(index1.getName()), anyString(), anyString(), anyString())).thenReturn(index1ShardIterator).     when(operationRouting.shardId(eq(clusterState), eq(index1.getName()), anyString(), anyString())).thenReturn(new ShardId(index1, randomInt())).     when(operationRouting.getShards(eq(clusterState), eq(index2.getName()), anyString(), anyString(), anyString())).thenReturn(index2ShardIterator).     when(operationRouting.shardId(eq(clusterState), eq(index2.getName()), anyString(), anyString())).thenReturn(new ShardId(index2, randomInt())).     clusterService = mock(ClusterService.class).     when(clusterService.localNode()).thenReturn(transportService.getLocalNode()).     when(clusterService.state()).thenReturn(clusterState).     when(clusterService.operationRouting()).thenReturn(operationRouting).     shardAction = new TransportShardMultiGetAction(clusterService, transportService, mock(IndicesService.class), threadPool, new ActionFilters(emptySet()), new Resolver()) {          @Override         protected void doExecute(Task task, MultiGetShardRequest request, ActionListener<MultiGetShardResponse> listener) {         }     }. }
false;public,static;0;9;;@AfterClass public static void afterClass() {     ThreadPool.terminate(threadPool, 30, TimeUnit.SECONDS).     threadPool = null.     transportService = null.     clusterService = null.     transportAction = null.     shardAction = null. }
false;protected;3;9;;@Override protected void executeShardAction(final ActionListener<MultiGetResponse> listener, final AtomicArray<MultiGetItemResponse> responses, final Map<ShardId, MultiGetShardRequest> shardRequests) {     shardActionInvoked.set(true).     assertEquals(2, responses.length()).     assertNull(responses.get(0)).     assertNull(responses.get(1)). }
false;public;0;24;;public void testTransportMultiGetAction() {     final Task task = createTask().     final NodeClient client = new NodeClient(Settings.EMPTY, threadPool).     final MultiGetRequestBuilder request = new MultiGetRequestBuilder(client, MultiGetAction.INSTANCE).     request.add(new MultiGetRequest.Item("index1", "_doc", "1")).     request.add(new MultiGetRequest.Item("index1", "_doc", "2")).     final AtomicBoolean shardActionInvoked = new AtomicBoolean(false).     transportAction = new TransportMultiGetAction(transportService, clusterService, shardAction, new ActionFilters(emptySet()), new Resolver()) {          @Override         protected void executeShardAction(final ActionListener<MultiGetResponse> listener, final AtomicArray<MultiGetItemResponse> responses, final Map<ShardId, MultiGetShardRequest> shardRequests) {             shardActionInvoked.set(true).             assertEquals(2, responses.length()).             assertNull(responses.get(0)).             assertNull(responses.get(1)).         }     }.     transportAction.execute(task, request.request(), new ActionListenerAdapter()).     assertTrue(shardActionInvoked.get()). }
false;protected;3;11;;@Override protected void executeShardAction(final ActionListener<MultiGetResponse> listener, final AtomicArray<MultiGetItemResponse> responses, final Map<ShardId, MultiGetShardRequest> shardRequests) {     shardActionInvoked.set(true).     assertEquals(2, responses.length()).     assertNull(responses.get(0)).     assertThat(responses.get(1).getFailure().getFailure(), instanceOf(RoutingMissingException.class)).     assertThat(responses.get(1).getFailure().getFailure().getMessage(), equalTo("routing is required for [index2]/[_doc]/[2]")). }
false;public;0;27;;public void testTransportMultiGetAction_withMissingRouting() {     final Task task = createTask().     final NodeClient client = new NodeClient(Settings.EMPTY, threadPool).     final MultiGetRequestBuilder request = new MultiGetRequestBuilder(client, MultiGetAction.INSTANCE).     request.add(new MultiGetRequest.Item("index2", "_doc", "1").routing("1")).     request.add(new MultiGetRequest.Item("index2", "_doc", "2")).     final AtomicBoolean shardActionInvoked = new AtomicBoolean(false).     transportAction = new TransportMultiGetAction(transportService, clusterService, shardAction, new ActionFilters(emptySet()), new Resolver()) {          @Override         protected void executeShardAction(final ActionListener<MultiGetResponse> listener, final AtomicArray<MultiGetItemResponse> responses, final Map<ShardId, MultiGetShardRequest> shardRequests) {             shardActionInvoked.set(true).             assertEquals(2, responses.length()).             assertNull(responses.get(0)).             assertThat(responses.get(1).getFailure().getFailure(), instanceOf(RoutingMissingException.class)).             assertThat(responses.get(1).getFailure().getFailure().getMessage(), equalTo("routing is required for [index2]/[_doc]/[2]")).         }     }.     transportAction.execute(task, request.request(), new ActionListenerAdapter()).     assertTrue(shardActionInvoked.get()). }
false;private,static;0;4;;private static Task createTask() {     return new Task(randomLong(), "transport", MultiGetAction.NAME, "description", new TaskId(randomLong() + ":" + randomLong()), emptyMap()). }
false;public;2;4;;@Override public Index concreteSingleIndex(ClusterState state, IndicesRequest request) {     return new Index("index1", randomBase64UUID()). }
false;public;1;3;;@Override public void onResponse(MultiGetResponse response) { }
false;public;1;3;;@Override public void onFailure(Exception e) { }
