# id;timestamp;commentText;codeText;commentWords;codeWords
QueryStringQueryBuilderTests -> public void testToQueryRegExpQueryMaxDeterminizedStatesParsing() throws Exception;1524684173;Validates that {@code max_determinized_states} can be parsed and lowers the allowed number of determinized states.;public void testToQueryRegExpQueryMaxDeterminizedStatesParsing() throws Exception {_        assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0)__        XContentBuilder builder = JsonXContent.contentBuilder()__        builder.startObject()_ {_            builder.startObject("query_string")_ {_                builder.field("query", "/[ac]*a[ac]{1,10}/")__                builder.field("default_field", STRING_FIELD_NAME)__                builder.field("max_determinized_states", 10)__            }_            builder.endObject()__        }_        builder.endObject()___        QueryBuilder queryBuilder = parseInnerQueryBuilder(createParser(builder))__        TooComplexToDeterminizeException e = expectThrows(TooComplexToDeterminizeException.class,_                () -> queryBuilder.toQuery(createShardContext()))__        assertThat(e.getMessage(), containsString("Determinizing [ac]*"))__        assertThat(e.getMessage(), containsString("would result in more than 10 states"))__    };validates,that,code,can,be,parsed,and,lowers,the,allowed,number,of,determinized,states;public,void,test,to,query,reg,exp,query,max,determinized,states,parsing,throws,exception,assume,true,test,runs,only,when,at,least,a,type,is,registered,get,current,types,length,0,xcontent,builder,builder,json,xcontent,content,builder,builder,start,object,builder,start,object,builder,field,query,ac,a,ac,1,10,builder,field,builder,field,10,builder,end,object,builder,end,object,query,builder,query,builder,parse,inner,query,builder,create,parser,builder,too,complex,to,determinize,exception,e,expect,throws,too,complex,to,determinize,exception,class,query,builder,to,query,create,shard,context,assert,that,e,get,message,contains,string,determinizing,ac,assert,that,e,get,message,contains,string,would,result,in,more,than,10,states
QueryStringQueryBuilderTests -> public void testToQueryRegExpQueryMaxDeterminizedStatesParsing() throws Exception;1528706846;Validates that {@code max_determinized_states} can be parsed and lowers the allowed number of determinized states.;public void testToQueryRegExpQueryMaxDeterminizedStatesParsing() throws Exception {_        assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0)__        XContentBuilder builder = JsonXContent.contentBuilder()__        builder.startObject()_ {_            builder.startObject("query_string")_ {_                builder.field("query", "/[ac]*a[ac]{1,10}/")__                builder.field("default_field", STRING_FIELD_NAME)__                builder.field("max_determinized_states", 10)__            }_            builder.endObject()__        }_        builder.endObject()___        QueryBuilder queryBuilder = parseInnerQueryBuilder(createParser(builder))__        TooComplexToDeterminizeException e = expectThrows(TooComplexToDeterminizeException.class,_                () -> queryBuilder.toQuery(createShardContext()))__        assertThat(e.getMessage(), containsString("Determinizing [ac]*"))__        assertThat(e.getMessage(), containsString("would result in more than 10 states"))__    };validates,that,code,can,be,parsed,and,lowers,the,allowed,number,of,determinized,states;public,void,test,to,query,reg,exp,query,max,determinized,states,parsing,throws,exception,assume,true,test,runs,only,when,at,least,a,type,is,registered,get,current,types,length,0,xcontent,builder,builder,json,xcontent,content,builder,builder,start,object,builder,start,object,builder,field,query,ac,a,ac,1,10,builder,field,builder,field,10,builder,end,object,builder,end,object,query,builder,query,builder,parse,inner,query,builder,create,parser,builder,too,complex,to,determinize,exception,e,expect,throws,too,complex,to,determinize,exception,class,query,builder,to,query,create,shard,context,assert,that,e,get,message,contains,string,determinizing,ac,assert,that,e,get,message,contains,string,would,result,in,more,than,10,states
QueryStringQueryBuilderTests -> public void testToQueryRegExpQueryMaxDeterminizedStatesParsing() throws Exception;1531937412;Validates that {@code max_determinized_states} can be parsed and lowers the allowed number of determinized states.;public void testToQueryRegExpQueryMaxDeterminizedStatesParsing() throws Exception {_        assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0)__        XContentBuilder builder = JsonXContent.contentBuilder()__        builder.startObject()_ {_            builder.startObject("query_string")_ {_                builder.field("query", "/[ac]*a[ac]{1,10}/")__                builder.field("default_field", STRING_FIELD_NAME)__                builder.field("max_determinized_states", 10)__            }_            builder.endObject()__        }_        builder.endObject()___        QueryBuilder queryBuilder = parseInnerQueryBuilder(createParser(builder))__        TooComplexToDeterminizeException e = expectThrows(TooComplexToDeterminizeException.class,_                () -> queryBuilder.toQuery(createShardContext()))__        assertThat(e.getMessage(), containsString("Determinizing [ac]*"))__        assertThat(e.getMessage(), containsString("would result in more than 10 states"))__    };validates,that,code,can,be,parsed,and,lowers,the,allowed,number,of,determinized,states;public,void,test,to,query,reg,exp,query,max,determinized,states,parsing,throws,exception,assume,true,test,runs,only,when,at,least,a,type,is,registered,get,current,types,length,0,xcontent,builder,builder,json,xcontent,content,builder,builder,start,object,builder,start,object,builder,field,query,ac,a,ac,1,10,builder,field,builder,field,10,builder,end,object,builder,end,object,query,builder,query,builder,parse,inner,query,builder,create,parser,builder,too,complex,to,determinize,exception,e,expect,throws,too,complex,to,determinize,exception,class,query,builder,to,query,create,shard,context,assert,that,e,get,message,contains,string,determinizing,ac,assert,that,e,get,message,contains,string,would,result,in,more,than,10,states
QueryStringQueryBuilderTests -> public void testToQueryRegExpQueryMaxDeterminizedStatesParsing() throws Exception;1532353780;Validates that {@code max_determinized_states} can be parsed and lowers the allowed number of determinized states.;public void testToQueryRegExpQueryMaxDeterminizedStatesParsing() throws Exception {_        assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0)__        XContentBuilder builder = JsonXContent.contentBuilder()__        builder.startObject()_ {_            builder.startObject("query_string")_ {_                builder.field("query", "/[ac]*a[ac]{1,10}/")__                builder.field("default_field", STRING_FIELD_NAME)__                builder.field("max_determinized_states", 10)__            }_            builder.endObject()__        }_        builder.endObject()___        QueryBuilder queryBuilder = parseInnerQueryBuilder(createParser(builder))__        TooComplexToDeterminizeException e = expectThrows(TooComplexToDeterminizeException.class,_                () -> queryBuilder.toQuery(createShardContext()))__        assertThat(e.getMessage(), containsString("Determinizing [ac]*"))__        assertThat(e.getMessage(), containsString("would result in more than 10 states"))__    };validates,that,code,can,be,parsed,and,lowers,the,allowed,number,of,determinized,states;public,void,test,to,query,reg,exp,query,max,determinized,states,parsing,throws,exception,assume,true,test,runs,only,when,at,least,a,type,is,registered,get,current,types,length,0,xcontent,builder,builder,json,xcontent,content,builder,builder,start,object,builder,start,object,builder,field,query,ac,a,ac,1,10,builder,field,builder,field,10,builder,end,object,builder,end,object,query,builder,query,builder,parse,inner,query,builder,create,parser,builder,too,complex,to,determinize,exception,e,expect,throws,too,complex,to,determinize,exception,class,query,builder,to,query,create,shard,context,assert,that,e,get,message,contains,string,determinizing,ac,assert,that,e,get,message,contains,string,would,result,in,more,than,10,states
QueryStringQueryBuilderTests -> public void testToQueryRegExpQueryMaxDeterminizedStatesParsing() throws Exception;1532685069;Validates that {@code max_determinized_states} can be parsed and lowers the allowed number of determinized states.;public void testToQueryRegExpQueryMaxDeterminizedStatesParsing() throws Exception {_        XContentBuilder builder = JsonXContent.contentBuilder()__        builder.startObject()_ {_            builder.startObject("query_string")_ {_                builder.field("query", "/[ac]*a[ac]{1,10}/")__                builder.field("default_field", STRING_FIELD_NAME)__                builder.field("max_determinized_states", 10)__            }_            builder.endObject()__        }_        builder.endObject()___        QueryBuilder queryBuilder = parseInnerQueryBuilder(createParser(builder))__        TooComplexToDeterminizeException e = expectThrows(TooComplexToDeterminizeException.class,_                () -> queryBuilder.toQuery(createShardContext()))__        assertThat(e.getMessage(), containsString("Determinizing [ac]*"))__        assertThat(e.getMessage(), containsString("would result in more than 10 states"))__    };validates,that,code,can,be,parsed,and,lowers,the,allowed,number,of,determinized,states;public,void,test,to,query,reg,exp,query,max,determinized,states,parsing,throws,exception,xcontent,builder,builder,json,xcontent,content,builder,builder,start,object,builder,start,object,builder,field,query,ac,a,ac,1,10,builder,field,builder,field,10,builder,end,object,builder,end,object,query,builder,query,builder,parse,inner,query,builder,create,parser,builder,too,complex,to,determinize,exception,e,expect,throws,too,complex,to,determinize,exception,class,query,builder,to,query,create,shard,context,assert,that,e,get,message,contains,string,determinizing,ac,assert,that,e,get,message,contains,string,would,result,in,more,than,10,states
QueryStringQueryBuilderTests -> public void testToQueryRegExpQueryMaxDeterminizedStatesParsing() throws Exception;1535046779;Validates that {@code max_determinized_states} can be parsed and lowers the allowed number of determinized states.;public void testToQueryRegExpQueryMaxDeterminizedStatesParsing() throws Exception {_        XContentBuilder builder = JsonXContent.contentBuilder()__        builder.startObject()_ {_            builder.startObject("query_string")_ {_                builder.field("query", "/[ac]*a[ac]{1,10}/")__                builder.field("default_field", STRING_FIELD_NAME)__                builder.field("max_determinized_states", 10)__            }_            builder.endObject()__        }_        builder.endObject()___        QueryBuilder queryBuilder = parseInnerQueryBuilder(createParser(builder))__        TooComplexToDeterminizeException e = expectThrows(TooComplexToDeterminizeException.class,_                () -> queryBuilder.toQuery(createShardContext()))__        assertThat(e.getMessage(), containsString("Determinizing [ac]*"))__        assertThat(e.getMessage(), containsString("would result in more than 10 states"))__    };validates,that,code,can,be,parsed,and,lowers,the,allowed,number,of,determinized,states;public,void,test,to,query,reg,exp,query,max,determinized,states,parsing,throws,exception,xcontent,builder,builder,json,xcontent,content,builder,builder,start,object,builder,start,object,builder,field,query,ac,a,ac,1,10,builder,field,builder,field,10,builder,end,object,builder,end,object,query,builder,query,builder,parse,inner,query,builder,create,parser,builder,too,complex,to,determinize,exception,e,expect,throws,too,complex,to,determinize,exception,class,query,builder,to,query,create,shard,context,assert,that,e,get,message,contains,string,determinizing,ac,assert,that,e,get,message,contains,string,would,result,in,more,than,10,states
QueryStringQueryBuilderTests -> public void testToQueryRegExpQueryMaxDeterminizedStatesParsing() throws Exception;1536314350;Validates that {@code max_determinized_states} can be parsed and lowers the allowed number of determinized states.;public void testToQueryRegExpQueryMaxDeterminizedStatesParsing() throws Exception {_        XContentBuilder builder = JsonXContent.contentBuilder()__        builder.startObject()_ {_            builder.startObject("query_string")_ {_                builder.field("query", "/[ac]*a[ac]{1,10}/")__                builder.field("default_field", STRING_FIELD_NAME)__                builder.field("max_determinized_states", 10)__            }_            builder.endObject()__        }_        builder.endObject()___        QueryBuilder queryBuilder = parseInnerQueryBuilder(createParser(builder))__        TooComplexToDeterminizeException e = expectThrows(TooComplexToDeterminizeException.class,_                () -> queryBuilder.toQuery(createShardContext()))__        assertThat(e.getMessage(), containsString("Determinizing [ac]*"))__        assertThat(e.getMessage(), containsString("would result in more than 10 states"))__    };validates,that,code,can,be,parsed,and,lowers,the,allowed,number,of,determinized,states;public,void,test,to,query,reg,exp,query,max,determinized,states,parsing,throws,exception,xcontent,builder,builder,json,xcontent,content,builder,builder,start,object,builder,start,object,builder,field,query,ac,a,ac,1,10,builder,field,builder,field,10,builder,end,object,builder,end,object,query,builder,query,builder,parse,inner,query,builder,create,parser,builder,too,complex,to,determinize,exception,e,expect,throws,too,complex,to,determinize,exception,class,query,builder,to,query,create,shard,context,assert,that,e,get,message,contains,string,determinizing,ac,assert,that,e,get,message,contains,string,would,result,in,more,than,10,states
QueryStringQueryBuilderTests -> public void testToQueryRegExpQueryMaxDeterminizedStatesParsing() throws Exception;1538509426;Validates that {@code max_determinized_states} can be parsed and lowers the allowed number of determinized states.;public void testToQueryRegExpQueryMaxDeterminizedStatesParsing() throws Exception {_        XContentBuilder builder = JsonXContent.contentBuilder()__        builder.startObject()_ {_            builder.startObject("query_string")_ {_                builder.field("query", "/[ac]*a[ac]{1,10}/")__                builder.field("default_field", STRING_FIELD_NAME)__                builder.field("max_determinized_states", 10)__            }_            builder.endObject()__        }_        builder.endObject()___        QueryBuilder queryBuilder = parseInnerQueryBuilder(createParser(builder))__        TooComplexToDeterminizeException e = expectThrows(TooComplexToDeterminizeException.class,_                () -> queryBuilder.toQuery(createShardContext()))__        assertThat(e.getMessage(), containsString("Determinizing [ac]*"))__        assertThat(e.getMessage(), containsString("would result in more than 10 states"))__    };validates,that,code,can,be,parsed,and,lowers,the,allowed,number,of,determinized,states;public,void,test,to,query,reg,exp,query,max,determinized,states,parsing,throws,exception,xcontent,builder,builder,json,xcontent,content,builder,builder,start,object,builder,start,object,builder,field,query,ac,a,ac,1,10,builder,field,builder,field,10,builder,end,object,builder,end,object,query,builder,query,builder,parse,inner,query,builder,create,parser,builder,too,complex,to,determinize,exception,e,expect,throws,too,complex,to,determinize,exception,class,query,builder,to,query,create,shard,context,assert,that,e,get,message,contains,string,determinizing,ac,assert,that,e,get,message,contains,string,would,result,in,more,than,10,states
QueryStringQueryBuilderTests -> public void testToQueryRegExpQueryMaxDeterminizedStatesParsing() throws Exception;1542355687;Validates that {@code max_determinized_states} can be parsed and lowers the allowed number of determinized states.;public void testToQueryRegExpQueryMaxDeterminizedStatesParsing() throws Exception {_        XContentBuilder builder = JsonXContent.contentBuilder()__        builder.startObject()_ {_            builder.startObject("query_string")_ {_                builder.field("query", "/[ac]*a[ac]{1,10}/")__                builder.field("default_field", STRING_FIELD_NAME)__                builder.field("max_determinized_states", 10)__            }_            builder.endObject()__        }_        builder.endObject()___        QueryBuilder queryBuilder = parseInnerQueryBuilder(createParser(builder))__        TooComplexToDeterminizeException e = expectThrows(TooComplexToDeterminizeException.class,_                () -> queryBuilder.toQuery(createShardContext()))__        assertThat(e.getMessage(), containsString("Determinizing [ac]*"))__        assertThat(e.getMessage(), containsString("would result in more than 10 states"))__    };validates,that,code,can,be,parsed,and,lowers,the,allowed,number,of,determinized,states;public,void,test,to,query,reg,exp,query,max,determinized,states,parsing,throws,exception,xcontent,builder,builder,json,xcontent,content,builder,builder,start,object,builder,start,object,builder,field,query,ac,a,ac,1,10,builder,field,builder,field,10,builder,end,object,builder,end,object,query,builder,query,builder,parse,inner,query,builder,create,parser,builder,too,complex,to,determinize,exception,e,expect,throws,too,complex,to,determinize,exception,class,query,builder,to,query,create,shard,context,assert,that,e,get,message,contains,string,determinizing,ac,assert,that,e,get,message,contains,string,would,result,in,more,than,10,states
QueryStringQueryBuilderTests -> public void testToQueryRegExpQueryMaxDeterminizedStatesParsing() throws Exception;1542726437;Validates that {@code max_determinized_states} can be parsed and lowers the allowed number of determinized states.;public void testToQueryRegExpQueryMaxDeterminizedStatesParsing() throws Exception {_        XContentBuilder builder = JsonXContent.contentBuilder()__        builder.startObject()_ {_            builder.startObject("query_string")_ {_                builder.field("query", "/[ac]*a[ac]{1,10}/")__                builder.field("default_field", STRING_FIELD_NAME)__                builder.field("max_determinized_states", 10)__            }_            builder.endObject()__        }_        builder.endObject()___        QueryBuilder queryBuilder = parseInnerQueryBuilder(createParser(builder))__        TooComplexToDeterminizeException e = expectThrows(TooComplexToDeterminizeException.class,_                () -> queryBuilder.toQuery(createShardContext()))__        assertThat(e.getMessage(), containsString("Determinizing [ac]*"))__        assertThat(e.getMessage(), containsString("would result in more than 10 states"))__    };validates,that,code,can,be,parsed,and,lowers,the,allowed,number,of,determinized,states;public,void,test,to,query,reg,exp,query,max,determinized,states,parsing,throws,exception,xcontent,builder,builder,json,xcontent,content,builder,builder,start,object,builder,start,object,builder,field,query,ac,a,ac,1,10,builder,field,builder,field,10,builder,end,object,builder,end,object,query,builder,query,builder,parse,inner,query,builder,create,parser,builder,too,complex,to,determinize,exception,e,expect,throws,too,complex,to,determinize,exception,class,query,builder,to,query,create,shard,context,assert,that,e,get,message,contains,string,determinizing,ac,assert,that,e,get,message,contains,string,would,result,in,more,than,10,states
QueryStringQueryBuilderTests -> public void testToQueryRegExpQueryMaxDeterminizedStatesParsing() throws Exception;1542962543;Validates that {@code max_determinized_states} can be parsed and lowers the allowed number of determinized states.;public void testToQueryRegExpQueryMaxDeterminizedStatesParsing() throws Exception {_        XContentBuilder builder = JsonXContent.contentBuilder()__        builder.startObject()_ {_            builder.startObject("query_string")_ {_                builder.field("query", "/[ac]*a[ac]{1,10}/")__                builder.field("default_field", STRING_FIELD_NAME)__                builder.field("max_determinized_states", 10)__            }_            builder.endObject()__        }_        builder.endObject()___        QueryBuilder queryBuilder = parseInnerQueryBuilder(createParser(builder))__        TooComplexToDeterminizeException e = expectThrows(TooComplexToDeterminizeException.class,_                () -> queryBuilder.toQuery(createShardContext()))__        assertThat(e.getMessage(), containsString("Determinizing [ac]*"))__        assertThat(e.getMessage(), containsString("would result in more than 10 states"))__    };validates,that,code,can,be,parsed,and,lowers,the,allowed,number,of,determinized,states;public,void,test,to,query,reg,exp,query,max,determinized,states,parsing,throws,exception,xcontent,builder,builder,json,xcontent,content,builder,builder,start,object,builder,start,object,builder,field,query,ac,a,ac,1,10,builder,field,builder,field,10,builder,end,object,builder,end,object,query,builder,query,builder,parse,inner,query,builder,create,parser,builder,too,complex,to,determinize,exception,e,expect,throws,too,complex,to,determinize,exception,class,query,builder,to,query,create,shard,context,assert,that,e,get,message,contains,string,determinizing,ac,assert,that,e,get,message,contains,string,would,result,in,more,than,10,states
QueryStringQueryBuilderTests -> public void testToQueryRegExpQueryMaxDeterminizedStatesParsing() throws Exception;1543399743;Validates that {@code max_determinized_states} can be parsed and lowers the allowed number of determinized states.;public void testToQueryRegExpQueryMaxDeterminizedStatesParsing() throws Exception {_        XContentBuilder builder = JsonXContent.contentBuilder()__        builder.startObject()_ {_            builder.startObject("query_string")_ {_                builder.field("query", "/[ac]*a[ac]{1,10}/")__                builder.field("default_field", STRING_FIELD_NAME)__                builder.field("max_determinized_states", 10)__            }_            builder.endObject()__        }_        builder.endObject()___        QueryBuilder queryBuilder = parseInnerQueryBuilder(createParser(builder))__        TooComplexToDeterminizeException e = expectThrows(TooComplexToDeterminizeException.class,_                () -> queryBuilder.toQuery(createShardContext()))__        assertThat(e.getMessage(), containsString("Determinizing [ac]*"))__        assertThat(e.getMessage(), containsString("would result in more than 10 states"))__    };validates,that,code,can,be,parsed,and,lowers,the,allowed,number,of,determinized,states;public,void,test,to,query,reg,exp,query,max,determinized,states,parsing,throws,exception,xcontent,builder,builder,json,xcontent,content,builder,builder,start,object,builder,start,object,builder,field,query,ac,a,ac,1,10,builder,field,builder,field,10,builder,end,object,builder,end,object,query,builder,query,builder,parse,inner,query,builder,create,parser,builder,too,complex,to,determinize,exception,e,expect,throws,too,complex,to,determinize,exception,class,query,builder,to,query,create,shard,context,assert,that,e,get,message,contains,string,determinizing,ac,assert,that,e,get,message,contains,string,would,result,in,more,than,10,states
QueryStringQueryBuilderTests -> public void testToQueryRegExpQueryMaxDeterminizedStatesParsing() throws Exception;1543432527;Validates that {@code max_determinized_states} can be parsed and lowers the allowed number of determinized states.;public void testToQueryRegExpQueryMaxDeterminizedStatesParsing() throws Exception {_        XContentBuilder builder = JsonXContent.contentBuilder()__        builder.startObject()_ {_            builder.startObject("query_string")_ {_                builder.field("query", "/[ac]*a[ac]{1,10}/")__                builder.field("default_field", STRING_FIELD_NAME)__                builder.field("max_determinized_states", 10)__            }_            builder.endObject()__        }_        builder.endObject()___        QueryBuilder queryBuilder = parseInnerQueryBuilder(createParser(builder))__        TooComplexToDeterminizeException e = expectThrows(TooComplexToDeterminizeException.class,_                () -> queryBuilder.toQuery(createShardContext()))__        assertThat(e.getMessage(), containsString("Determinizing [ac]*"))__        assertThat(e.getMessage(), containsString("would result in more than 10 states"))__    };validates,that,code,can,be,parsed,and,lowers,the,allowed,number,of,determinized,states;public,void,test,to,query,reg,exp,query,max,determinized,states,parsing,throws,exception,xcontent,builder,builder,json,xcontent,content,builder,builder,start,object,builder,start,object,builder,field,query,ac,a,ac,1,10,builder,field,builder,field,10,builder,end,object,builder,end,object,query,builder,query,builder,parse,inner,query,builder,create,parser,builder,too,complex,to,determinize,exception,e,expect,throws,too,complex,to,determinize,exception,class,query,builder,to,query,create,shard,context,assert,that,e,get,message,contains,string,determinizing,ac,assert,that,e,get,message,contains,string,would,result,in,more,than,10,states
QueryStringQueryBuilderTests -> public void testToQueryRegExpQueryMaxDeterminizedStatesParsing() throws Exception;1545079094;Validates that {@code max_determinized_states} can be parsed and lowers the allowed number of determinized states.;public void testToQueryRegExpQueryMaxDeterminizedStatesParsing() throws Exception {_        XContentBuilder builder = JsonXContent.contentBuilder()__        builder.startObject()_ {_            builder.startObject("query_string")_ {_                builder.field("query", "/[ac]*a[ac]{1,10}/")__                builder.field("default_field", STRING_FIELD_NAME)__                builder.field("max_determinized_states", 10)__            }_            builder.endObject()__        }_        builder.endObject()___        QueryBuilder queryBuilder = parseInnerQueryBuilder(createParser(builder))__        TooComplexToDeterminizeException e = expectThrows(TooComplexToDeterminizeException.class,_                () -> queryBuilder.toQuery(createShardContext()))__        assertThat(e.getMessage(), containsString("Determinizing [ac]*"))__        assertThat(e.getMessage(), containsString("would result in more than 10 states"))__    };validates,that,code,can,be,parsed,and,lowers,the,allowed,number,of,determinized,states;public,void,test,to,query,reg,exp,query,max,determinized,states,parsing,throws,exception,xcontent,builder,builder,json,xcontent,content,builder,builder,start,object,builder,start,object,builder,field,query,ac,a,ac,1,10,builder,field,builder,field,10,builder,end,object,builder,end,object,query,builder,query,builder,parse,inner,query,builder,create,parser,builder,too,complex,to,determinize,exception,e,expect,throws,too,complex,to,determinize,exception,class,query,builder,to,query,create,shard,context,assert,that,e,get,message,contains,string,determinizing,ac,assert,that,e,get,message,contains,string,would,result,in,more,than,10,states
QueryStringQueryBuilderTests -> public void testToQueryRegExpQueryMaxDeterminizedStatesParsing() throws Exception;1545098986;Validates that {@code max_determinized_states} can be parsed and lowers the allowed number of determinized states.;public void testToQueryRegExpQueryMaxDeterminizedStatesParsing() throws Exception {_        XContentBuilder builder = JsonXContent.contentBuilder()__        builder.startObject()_ {_            builder.startObject("query_string")_ {_                builder.field("query", "/[ac]*a[ac]{1,10}/")__                builder.field("default_field", STRING_FIELD_NAME)__                builder.field("max_determinized_states", 10)__            }_            builder.endObject()__        }_        builder.endObject()___        QueryBuilder queryBuilder = parseInnerQueryBuilder(createParser(builder))__        TooComplexToDeterminizeException e = expectThrows(TooComplexToDeterminizeException.class,_                () -> queryBuilder.toQuery(createShardContext()))__        assertThat(e.getMessage(), containsString("Determinizing [ac]*"))__        assertThat(e.getMessage(), containsString("would result in more than 10 states"))__    };validates,that,code,can,be,parsed,and,lowers,the,allowed,number,of,determinized,states;public,void,test,to,query,reg,exp,query,max,determinized,states,parsing,throws,exception,xcontent,builder,builder,json,xcontent,content,builder,builder,start,object,builder,start,object,builder,field,query,ac,a,ac,1,10,builder,field,builder,field,10,builder,end,object,builder,end,object,query,builder,query,builder,parse,inner,query,builder,create,parser,builder,too,complex,to,determinize,exception,e,expect,throws,too,complex,to,determinize,exception,class,query,builder,to,query,create,shard,context,assert,that,e,get,message,contains,string,determinizing,ac,assert,that,e,get,message,contains,string,would,result,in,more,than,10,states
QueryStringQueryBuilderTests -> public void testToQueryRegExpQueryMaxDeterminizedStatesParsing() throws Exception;1546459944;Validates that {@code max_determinized_states} can be parsed and lowers the allowed number of determinized states.;public void testToQueryRegExpQueryMaxDeterminizedStatesParsing() throws Exception {_        XContentBuilder builder = JsonXContent.contentBuilder()__        builder.startObject()_ {_            builder.startObject("query_string")_ {_                builder.field("query", "/[ac]*a[ac]{1,10}/")__                builder.field("default_field", STRING_FIELD_NAME)__                builder.field("max_determinized_states", 10)__            }_            builder.endObject()__        }_        builder.endObject()___        QueryBuilder queryBuilder = parseInnerQueryBuilder(createParser(builder))__        TooComplexToDeterminizeException e = expectThrows(TooComplexToDeterminizeException.class,_                () -> queryBuilder.toQuery(createShardContext()))__        assertThat(e.getMessage(), containsString("Determinizing [ac]*"))__        assertThat(e.getMessage(), containsString("would result in more than 10 states"))__    };validates,that,code,can,be,parsed,and,lowers,the,allowed,number,of,determinized,states;public,void,test,to,query,reg,exp,query,max,determinized,states,parsing,throws,exception,xcontent,builder,builder,json,xcontent,content,builder,builder,start,object,builder,start,object,builder,field,query,ac,a,ac,1,10,builder,field,builder,field,10,builder,end,object,builder,end,object,query,builder,query,builder,parse,inner,query,builder,create,parser,builder,too,complex,to,determinize,exception,e,expect,throws,too,complex,to,determinize,exception,class,query,builder,to,query,create,shard,context,assert,that,e,get,message,contains,string,determinizing,ac,assert,that,e,get,message,contains,string,would,result,in,more,than,10,states
QueryStringQueryBuilderTests -> public void testToQueryRegExpQueryMaxDeterminizedStatesParsing() throws Exception;1547734228;Validates that {@code max_determinized_states} can be parsed and lowers the allowed number of determinized states.;public void testToQueryRegExpQueryMaxDeterminizedStatesParsing() throws Exception {_        XContentBuilder builder = JsonXContent.contentBuilder()__        builder.startObject()_ {_            builder.startObject("query_string")_ {_                builder.field("query", "/[ac]*a[ac]{1,10}/")__                builder.field("default_field", STRING_FIELD_NAME)__                builder.field("max_determinized_states", 10)__            }_            builder.endObject()__        }_        builder.endObject()___        QueryBuilder queryBuilder = parseInnerQueryBuilder(createParser(builder))__        TooComplexToDeterminizeException e = expectThrows(TooComplexToDeterminizeException.class,_                () -> queryBuilder.toQuery(createShardContext()))__        assertThat(e.getMessage(), containsString("Determinizing [ac]*"))__        assertThat(e.getMessage(), containsString("would result in more than 10 states"))__    };validates,that,code,can,be,parsed,and,lowers,the,allowed,number,of,determinized,states;public,void,test,to,query,reg,exp,query,max,determinized,states,parsing,throws,exception,xcontent,builder,builder,json,xcontent,content,builder,builder,start,object,builder,start,object,builder,field,query,ac,a,ac,1,10,builder,field,builder,field,10,builder,end,object,builder,end,object,query,builder,query,builder,parse,inner,query,builder,create,parser,builder,too,complex,to,determinize,exception,e,expect,throws,too,complex,to,determinize,exception,class,query,builder,to,query,create,shard,context,assert,that,e,get,message,contains,string,determinizing,ac,assert,that,e,get,message,contains,string,would,result,in,more,than,10,states
QueryStringQueryBuilderTests -> public void testToQueryRegExpQueryMaxDeterminizedStatesParsing() throws Exception;1548236405;Validates that {@code max_determinized_states} can be parsed and lowers the allowed number of determinized states.;public void testToQueryRegExpQueryMaxDeterminizedStatesParsing() throws Exception {_        XContentBuilder builder = JsonXContent.contentBuilder()__        builder.startObject()_ {_            builder.startObject("query_string")_ {_                builder.field("query", "/[ac]*a[ac]{1,10}/")__                builder.field("default_field", STRING_FIELD_NAME)__                builder.field("max_determinized_states", 10)__            }_            builder.endObject()__        }_        builder.endObject()___        QueryBuilder queryBuilder = parseInnerQueryBuilder(createParser(builder))__        TooComplexToDeterminizeException e = expectThrows(TooComplexToDeterminizeException.class,_                () -> queryBuilder.toQuery(createShardContext()))__        assertThat(e.getMessage(), containsString("Determinizing [ac]*"))__        assertThat(e.getMessage(), containsString("would result in more than 10 states"))__    };validates,that,code,can,be,parsed,and,lowers,the,allowed,number,of,determinized,states;public,void,test,to,query,reg,exp,query,max,determinized,states,parsing,throws,exception,xcontent,builder,builder,json,xcontent,content,builder,builder,start,object,builder,start,object,builder,field,query,ac,a,ac,1,10,builder,field,builder,field,10,builder,end,object,builder,end,object,query,builder,query,builder,parse,inner,query,builder,create,parser,builder,too,complex,to,determinize,exception,e,expect,throws,too,complex,to,determinize,exception,class,query,builder,to,query,create,shard,context,assert,that,e,get,message,contains,string,determinizing,ac,assert,that,e,get,message,contains,string,would,result,in,more,than,10,states
QueryStringQueryBuilderTests -> public void testToQueryRegExpQueryMaxDeterminizedStatesParsing() throws Exception;1549017700;Validates that {@code max_determinized_states} can be parsed and lowers the allowed number of determinized states.;public void testToQueryRegExpQueryMaxDeterminizedStatesParsing() throws Exception {_        XContentBuilder builder = JsonXContent.contentBuilder()__        builder.startObject()_ {_            builder.startObject("query_string")_ {_                builder.field("query", "/[ac]*a[ac]{1,10}/")__                builder.field("default_field", STRING_FIELD_NAME)__                builder.field("max_determinized_states", 10)__            }_            builder.endObject()__        }_        builder.endObject()___        QueryBuilder queryBuilder = parseInnerQueryBuilder(createParser(builder))__        TooComplexToDeterminizeException e = expectThrows(TooComplexToDeterminizeException.class,_                () -> queryBuilder.toQuery(createShardContext()))__        assertThat(e.getMessage(), containsString("Determinizing [ac]*"))__        assertThat(e.getMessage(), containsString("would result in more than 10 states"))__    };validates,that,code,can,be,parsed,and,lowers,the,allowed,number,of,determinized,states;public,void,test,to,query,reg,exp,query,max,determinized,states,parsing,throws,exception,xcontent,builder,builder,json,xcontent,content,builder,builder,start,object,builder,start,object,builder,field,query,ac,a,ac,1,10,builder,field,builder,field,10,builder,end,object,builder,end,object,query,builder,query,builder,parse,inner,query,builder,create,parser,builder,too,complex,to,determinize,exception,e,expect,throws,too,complex,to,determinize,exception,class,query,builder,to,query,create,shard,context,assert,that,e,get,message,contains,string,determinizing,ac,assert,that,e,get,message,contains,string,would,result,in,more,than,10,states
QueryStringQueryBuilderTests -> public void testEnabledPositionIncrements() throws Exception;1524684173;Validates that {@code max_determinized_states} can be parsed and lowers the allowed number of determinized states.;public void testEnabledPositionIncrements() throws Exception {_        assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0)___        XContentBuilder builder = JsonXContent.contentBuilder()__        builder.startObject()_ {_            builder.startObject("query_string")_ {_                builder.field("query", "text")__                builder.field("default_field", STRING_FIELD_NAME)__                builder.field("enable_position_increments", false)__            }_            builder.endObject()__        }_        builder.endObject()___        QueryStringQueryBuilder queryBuilder = (QueryStringQueryBuilder) parseInnerQueryBuilder(createParser(builder))__        assertFalse(queryBuilder.enablePositionIncrements())__    };validates,that,code,can,be,parsed,and,lowers,the,allowed,number,of,determinized,states;public,void,test,enabled,position,increments,throws,exception,assume,true,test,runs,only,when,at,least,a,type,is,registered,get,current,types,length,0,xcontent,builder,builder,json,xcontent,content,builder,builder,start,object,builder,start,object,builder,field,query,text,builder,field,builder,field,false,builder,end,object,builder,end,object,query,string,query,builder,query,builder,query,string,query,builder,parse,inner,query,builder,create,parser,builder,assert,false,query,builder,enable,position,increments
QueryStringQueryBuilderTests -> public void testEnabledPositionIncrements() throws Exception;1528706846;Validates that {@code max_determinized_states} can be parsed and lowers the allowed number of determinized states.;public void testEnabledPositionIncrements() throws Exception {_        assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0)___        XContentBuilder builder = JsonXContent.contentBuilder()__        builder.startObject()_ {_            builder.startObject("query_string")_ {_                builder.field("query", "text")__                builder.field("default_field", STRING_FIELD_NAME)__                builder.field("enable_position_increments", false)__            }_            builder.endObject()__        }_        builder.endObject()___        QueryStringQueryBuilder queryBuilder = (QueryStringQueryBuilder) parseInnerQueryBuilder(createParser(builder))__        assertFalse(queryBuilder.enablePositionIncrements())__    };validates,that,code,can,be,parsed,and,lowers,the,allowed,number,of,determinized,states;public,void,test,enabled,position,increments,throws,exception,assume,true,test,runs,only,when,at,least,a,type,is,registered,get,current,types,length,0,xcontent,builder,builder,json,xcontent,content,builder,builder,start,object,builder,start,object,builder,field,query,text,builder,field,builder,field,false,builder,end,object,builder,end,object,query,string,query,builder,query,builder,query,string,query,builder,parse,inner,query,builder,create,parser,builder,assert,false,query,builder,enable,position,increments
QueryStringQueryBuilderTests -> public void testEnabledPositionIncrements() throws Exception;1531937412;Validates that {@code max_determinized_states} can be parsed and lowers the allowed number of determinized states.;public void testEnabledPositionIncrements() throws Exception {_        assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0)___        XContentBuilder builder = JsonXContent.contentBuilder()__        builder.startObject()_ {_            builder.startObject("query_string")_ {_                builder.field("query", "text")__                builder.field("default_field", STRING_FIELD_NAME)__                builder.field("enable_position_increments", false)__            }_            builder.endObject()__        }_        builder.endObject()___        QueryStringQueryBuilder queryBuilder = (QueryStringQueryBuilder) parseInnerQueryBuilder(createParser(builder))__        assertFalse(queryBuilder.enablePositionIncrements())__    };validates,that,code,can,be,parsed,and,lowers,the,allowed,number,of,determinized,states;public,void,test,enabled,position,increments,throws,exception,assume,true,test,runs,only,when,at,least,a,type,is,registered,get,current,types,length,0,xcontent,builder,builder,json,xcontent,content,builder,builder,start,object,builder,start,object,builder,field,query,text,builder,field,builder,field,false,builder,end,object,builder,end,object,query,string,query,builder,query,builder,query,string,query,builder,parse,inner,query,builder,create,parser,builder,assert,false,query,builder,enable,position,increments
QueryStringQueryBuilderTests -> public void testEnabledPositionIncrements() throws Exception;1532353780;Validates that {@code max_determinized_states} can be parsed and lowers the allowed number of determinized states.;public void testEnabledPositionIncrements() throws Exception {_        assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0)___        XContentBuilder builder = JsonXContent.contentBuilder()__        builder.startObject()_ {_            builder.startObject("query_string")_ {_                builder.field("query", "text")__                builder.field("default_field", STRING_FIELD_NAME)__                builder.field("enable_position_increments", false)__            }_            builder.endObject()__        }_        builder.endObject()___        QueryStringQueryBuilder queryBuilder = (QueryStringQueryBuilder) parseInnerQueryBuilder(createParser(builder))__        assertFalse(queryBuilder.enablePositionIncrements())__    };validates,that,code,can,be,parsed,and,lowers,the,allowed,number,of,determinized,states;public,void,test,enabled,position,increments,throws,exception,assume,true,test,runs,only,when,at,least,a,type,is,registered,get,current,types,length,0,xcontent,builder,builder,json,xcontent,content,builder,builder,start,object,builder,start,object,builder,field,query,text,builder,field,builder,field,false,builder,end,object,builder,end,object,query,string,query,builder,query,builder,query,string,query,builder,parse,inner,query,builder,create,parser,builder,assert,false,query,builder,enable,position,increments
QueryStringQueryBuilderTests -> public void testEnabledPositionIncrements() throws Exception;1532685069;Validates that {@code max_determinized_states} can be parsed and lowers the allowed number of determinized states.;public void testEnabledPositionIncrements() throws Exception {__        XContentBuilder builder = JsonXContent.contentBuilder()__        builder.startObject()_ {_            builder.startObject("query_string")_ {_                builder.field("query", "text")__                builder.field("default_field", STRING_FIELD_NAME)__                builder.field("enable_position_increments", false)__            }_            builder.endObject()__        }_        builder.endObject()___        QueryStringQueryBuilder queryBuilder = (QueryStringQueryBuilder) parseInnerQueryBuilder(createParser(builder))__        assertFalse(queryBuilder.enablePositionIncrements())__    };validates,that,code,can,be,parsed,and,lowers,the,allowed,number,of,determinized,states;public,void,test,enabled,position,increments,throws,exception,xcontent,builder,builder,json,xcontent,content,builder,builder,start,object,builder,start,object,builder,field,query,text,builder,field,builder,field,false,builder,end,object,builder,end,object,query,string,query,builder,query,builder,query,string,query,builder,parse,inner,query,builder,create,parser,builder,assert,false,query,builder,enable,position,increments
QueryStringQueryBuilderTests -> public void testEnabledPositionIncrements() throws Exception;1535046779;Validates that {@code max_determinized_states} can be parsed and lowers the allowed number of determinized states.;public void testEnabledPositionIncrements() throws Exception {__        XContentBuilder builder = JsonXContent.contentBuilder()__        builder.startObject()_ {_            builder.startObject("query_string")_ {_                builder.field("query", "text")__                builder.field("default_field", STRING_FIELD_NAME)__                builder.field("enable_position_increments", false)__            }_            builder.endObject()__        }_        builder.endObject()___        QueryStringQueryBuilder queryBuilder = (QueryStringQueryBuilder) parseInnerQueryBuilder(createParser(builder))__        assertFalse(queryBuilder.enablePositionIncrements())__    };validates,that,code,can,be,parsed,and,lowers,the,allowed,number,of,determinized,states;public,void,test,enabled,position,increments,throws,exception,xcontent,builder,builder,json,xcontent,content,builder,builder,start,object,builder,start,object,builder,field,query,text,builder,field,builder,field,false,builder,end,object,builder,end,object,query,string,query,builder,query,builder,query,string,query,builder,parse,inner,query,builder,create,parser,builder,assert,false,query,builder,enable,position,increments
QueryStringQueryBuilderTests -> public void testEnabledPositionIncrements() throws Exception;1536314350;Validates that {@code max_determinized_states} can be parsed and lowers the allowed number of determinized states.;public void testEnabledPositionIncrements() throws Exception {__        XContentBuilder builder = JsonXContent.contentBuilder()__        builder.startObject()_ {_            builder.startObject("query_string")_ {_                builder.field("query", "text")__                builder.field("default_field", STRING_FIELD_NAME)__                builder.field("enable_position_increments", false)__            }_            builder.endObject()__        }_        builder.endObject()___        QueryStringQueryBuilder queryBuilder = (QueryStringQueryBuilder) parseInnerQueryBuilder(createParser(builder))__        assertFalse(queryBuilder.enablePositionIncrements())__    };validates,that,code,can,be,parsed,and,lowers,the,allowed,number,of,determinized,states;public,void,test,enabled,position,increments,throws,exception,xcontent,builder,builder,json,xcontent,content,builder,builder,start,object,builder,start,object,builder,field,query,text,builder,field,builder,field,false,builder,end,object,builder,end,object,query,string,query,builder,query,builder,query,string,query,builder,parse,inner,query,builder,create,parser,builder,assert,false,query,builder,enable,position,increments
QueryStringQueryBuilderTests -> public void testEnabledPositionIncrements() throws Exception;1538509426;Validates that {@code max_determinized_states} can be parsed and lowers the allowed number of determinized states.;public void testEnabledPositionIncrements() throws Exception {__        XContentBuilder builder = JsonXContent.contentBuilder()__        builder.startObject()_ {_            builder.startObject("query_string")_ {_                builder.field("query", "text")__                builder.field("default_field", STRING_FIELD_NAME)__                builder.field("enable_position_increments", false)__            }_            builder.endObject()__        }_        builder.endObject()___        QueryStringQueryBuilder queryBuilder = (QueryStringQueryBuilder) parseInnerQueryBuilder(createParser(builder))__        assertFalse(queryBuilder.enablePositionIncrements())__    };validates,that,code,can,be,parsed,and,lowers,the,allowed,number,of,determinized,states;public,void,test,enabled,position,increments,throws,exception,xcontent,builder,builder,json,xcontent,content,builder,builder,start,object,builder,start,object,builder,field,query,text,builder,field,builder,field,false,builder,end,object,builder,end,object,query,string,query,builder,query,builder,query,string,query,builder,parse,inner,query,builder,create,parser,builder,assert,false,query,builder,enable,position,increments
QueryStringQueryBuilderTests -> public void testEnabledPositionIncrements() throws Exception;1542355687;Validates that {@code max_determinized_states} can be parsed and lowers the allowed number of determinized states.;public void testEnabledPositionIncrements() throws Exception {__        XContentBuilder builder = JsonXContent.contentBuilder()__        builder.startObject()_ {_            builder.startObject("query_string")_ {_                builder.field("query", "text")__                builder.field("default_field", STRING_FIELD_NAME)__                builder.field("enable_position_increments", false)__            }_            builder.endObject()__        }_        builder.endObject()___        QueryStringQueryBuilder queryBuilder = (QueryStringQueryBuilder) parseInnerQueryBuilder(createParser(builder))__        assertFalse(queryBuilder.enablePositionIncrements())__    };validates,that,code,can,be,parsed,and,lowers,the,allowed,number,of,determinized,states;public,void,test,enabled,position,increments,throws,exception,xcontent,builder,builder,json,xcontent,content,builder,builder,start,object,builder,start,object,builder,field,query,text,builder,field,builder,field,false,builder,end,object,builder,end,object,query,string,query,builder,query,builder,query,string,query,builder,parse,inner,query,builder,create,parser,builder,assert,false,query,builder,enable,position,increments
QueryStringQueryBuilderTests -> public void testEnabledPositionIncrements() throws Exception;1542726437;Validates that {@code max_determinized_states} can be parsed and lowers the allowed number of determinized states.;public void testEnabledPositionIncrements() throws Exception {__        XContentBuilder builder = JsonXContent.contentBuilder()__        builder.startObject()_ {_            builder.startObject("query_string")_ {_                builder.field("query", "text")__                builder.field("default_field", STRING_FIELD_NAME)__                builder.field("enable_position_increments", false)__            }_            builder.endObject()__        }_        builder.endObject()___        QueryStringQueryBuilder queryBuilder = (QueryStringQueryBuilder) parseInnerQueryBuilder(createParser(builder))__        assertFalse(queryBuilder.enablePositionIncrements())__    };validates,that,code,can,be,parsed,and,lowers,the,allowed,number,of,determinized,states;public,void,test,enabled,position,increments,throws,exception,xcontent,builder,builder,json,xcontent,content,builder,builder,start,object,builder,start,object,builder,field,query,text,builder,field,builder,field,false,builder,end,object,builder,end,object,query,string,query,builder,query,builder,query,string,query,builder,parse,inner,query,builder,create,parser,builder,assert,false,query,builder,enable,position,increments
QueryStringQueryBuilderTests -> public void testEnabledPositionIncrements() throws Exception;1542962543;Validates that {@code max_determinized_states} can be parsed and lowers the allowed number of determinized states.;public void testEnabledPositionIncrements() throws Exception {__        XContentBuilder builder = JsonXContent.contentBuilder()__        builder.startObject()_ {_            builder.startObject("query_string")_ {_                builder.field("query", "text")__                builder.field("default_field", STRING_FIELD_NAME)__                builder.field("enable_position_increments", false)__            }_            builder.endObject()__        }_        builder.endObject()___        QueryStringQueryBuilder queryBuilder = (QueryStringQueryBuilder) parseInnerQueryBuilder(createParser(builder))__        assertFalse(queryBuilder.enablePositionIncrements())__    };validates,that,code,can,be,parsed,and,lowers,the,allowed,number,of,determinized,states;public,void,test,enabled,position,increments,throws,exception,xcontent,builder,builder,json,xcontent,content,builder,builder,start,object,builder,start,object,builder,field,query,text,builder,field,builder,field,false,builder,end,object,builder,end,object,query,string,query,builder,query,builder,query,string,query,builder,parse,inner,query,builder,create,parser,builder,assert,false,query,builder,enable,position,increments
QueryStringQueryBuilderTests -> public void testEnabledPositionIncrements() throws Exception;1543399743;Validates that {@code max_determinized_states} can be parsed and lowers the allowed number of determinized states.;public void testEnabledPositionIncrements() throws Exception {__        XContentBuilder builder = JsonXContent.contentBuilder()__        builder.startObject()_ {_            builder.startObject("query_string")_ {_                builder.field("query", "text")__                builder.field("default_field", STRING_FIELD_NAME)__                builder.field("enable_position_increments", false)__            }_            builder.endObject()__        }_        builder.endObject()___        QueryStringQueryBuilder queryBuilder = (QueryStringQueryBuilder) parseInnerQueryBuilder(createParser(builder))__        assertFalse(queryBuilder.enablePositionIncrements())__    };validates,that,code,can,be,parsed,and,lowers,the,allowed,number,of,determinized,states;public,void,test,enabled,position,increments,throws,exception,xcontent,builder,builder,json,xcontent,content,builder,builder,start,object,builder,start,object,builder,field,query,text,builder,field,builder,field,false,builder,end,object,builder,end,object,query,string,query,builder,query,builder,query,string,query,builder,parse,inner,query,builder,create,parser,builder,assert,false,query,builder,enable,position,increments
QueryStringQueryBuilderTests -> public void testEnabledPositionIncrements() throws Exception;1543432527;Validates that {@code max_determinized_states} can be parsed and lowers the allowed number of determinized states.;public void testEnabledPositionIncrements() throws Exception {__        XContentBuilder builder = JsonXContent.contentBuilder()__        builder.startObject()_ {_            builder.startObject("query_string")_ {_                builder.field("query", "text")__                builder.field("default_field", STRING_FIELD_NAME)__                builder.field("enable_position_increments", false)__            }_            builder.endObject()__        }_        builder.endObject()___        QueryStringQueryBuilder queryBuilder = (QueryStringQueryBuilder) parseInnerQueryBuilder(createParser(builder))__        assertFalse(queryBuilder.enablePositionIncrements())__    };validates,that,code,can,be,parsed,and,lowers,the,allowed,number,of,determinized,states;public,void,test,enabled,position,increments,throws,exception,xcontent,builder,builder,json,xcontent,content,builder,builder,start,object,builder,start,object,builder,field,query,text,builder,field,builder,field,false,builder,end,object,builder,end,object,query,string,query,builder,query,builder,query,string,query,builder,parse,inner,query,builder,create,parser,builder,assert,false,query,builder,enable,position,increments
QueryStringQueryBuilderTests -> public void testEnabledPositionIncrements() throws Exception;1545079094;Validates that {@code max_determinized_states} can be parsed and lowers the allowed number of determinized states.;public void testEnabledPositionIncrements() throws Exception {__        XContentBuilder builder = JsonXContent.contentBuilder()__        builder.startObject()_ {_            builder.startObject("query_string")_ {_                builder.field("query", "text")__                builder.field("default_field", STRING_FIELD_NAME)__                builder.field("enable_position_increments", false)__            }_            builder.endObject()__        }_        builder.endObject()___        QueryStringQueryBuilder queryBuilder = (QueryStringQueryBuilder) parseInnerQueryBuilder(createParser(builder))__        assertFalse(queryBuilder.enablePositionIncrements())__    };validates,that,code,can,be,parsed,and,lowers,the,allowed,number,of,determinized,states;public,void,test,enabled,position,increments,throws,exception,xcontent,builder,builder,json,xcontent,content,builder,builder,start,object,builder,start,object,builder,field,query,text,builder,field,builder,field,false,builder,end,object,builder,end,object,query,string,query,builder,query,builder,query,string,query,builder,parse,inner,query,builder,create,parser,builder,assert,false,query,builder,enable,position,increments
QueryStringQueryBuilderTests -> public void testEnabledPositionIncrements() throws Exception;1545098986;Validates that {@code max_determinized_states} can be parsed and lowers the allowed number of determinized states.;public void testEnabledPositionIncrements() throws Exception {__        XContentBuilder builder = JsonXContent.contentBuilder()__        builder.startObject()_ {_            builder.startObject("query_string")_ {_                builder.field("query", "text")__                builder.field("default_field", STRING_FIELD_NAME)__                builder.field("enable_position_increments", false)__            }_            builder.endObject()__        }_        builder.endObject()___        QueryStringQueryBuilder queryBuilder = (QueryStringQueryBuilder) parseInnerQueryBuilder(createParser(builder))__        assertFalse(queryBuilder.enablePositionIncrements())__    };validates,that,code,can,be,parsed,and,lowers,the,allowed,number,of,determinized,states;public,void,test,enabled,position,increments,throws,exception,xcontent,builder,builder,json,xcontent,content,builder,builder,start,object,builder,start,object,builder,field,query,text,builder,field,builder,field,false,builder,end,object,builder,end,object,query,string,query,builder,query,builder,query,string,query,builder,parse,inner,query,builder,create,parser,builder,assert,false,query,builder,enable,position,increments
QueryStringQueryBuilderTests -> public void testEnabledPositionIncrements() throws Exception;1546459944;Validates that {@code max_determinized_states} can be parsed and lowers the allowed number of determinized states.;public void testEnabledPositionIncrements() throws Exception {__        XContentBuilder builder = JsonXContent.contentBuilder()__        builder.startObject()_ {_            builder.startObject("query_string")_ {_                builder.field("query", "text")__                builder.field("default_field", STRING_FIELD_NAME)__                builder.field("enable_position_increments", false)__            }_            builder.endObject()__        }_        builder.endObject()___        QueryStringQueryBuilder queryBuilder = (QueryStringQueryBuilder) parseInnerQueryBuilder(createParser(builder))__        assertFalse(queryBuilder.enablePositionIncrements())__    };validates,that,code,can,be,parsed,and,lowers,the,allowed,number,of,determinized,states;public,void,test,enabled,position,increments,throws,exception,xcontent,builder,builder,json,xcontent,content,builder,builder,start,object,builder,start,object,builder,field,query,text,builder,field,builder,field,false,builder,end,object,builder,end,object,query,string,query,builder,query,builder,query,string,query,builder,parse,inner,query,builder,create,parser,builder,assert,false,query,builder,enable,position,increments
QueryStringQueryBuilderTests -> public void testEnabledPositionIncrements() throws Exception;1547734228;Validates that {@code max_determinized_states} can be parsed and lowers the allowed number of determinized states.;public void testEnabledPositionIncrements() throws Exception {__        XContentBuilder builder = JsonXContent.contentBuilder()__        builder.startObject()_ {_            builder.startObject("query_string")_ {_                builder.field("query", "text")__                builder.field("default_field", STRING_FIELD_NAME)__                builder.field("enable_position_increments", false)__            }_            builder.endObject()__        }_        builder.endObject()___        QueryStringQueryBuilder queryBuilder = (QueryStringQueryBuilder) parseInnerQueryBuilder(createParser(builder))__        assertFalse(queryBuilder.enablePositionIncrements())__    };validates,that,code,can,be,parsed,and,lowers,the,allowed,number,of,determinized,states;public,void,test,enabled,position,increments,throws,exception,xcontent,builder,builder,json,xcontent,content,builder,builder,start,object,builder,start,object,builder,field,query,text,builder,field,builder,field,false,builder,end,object,builder,end,object,query,string,query,builder,query,builder,query,string,query,builder,parse,inner,query,builder,create,parser,builder,assert,false,query,builder,enable,position,increments
QueryStringQueryBuilderTests -> public void testEnabledPositionIncrements() throws Exception;1548236405;Validates that {@code max_determinized_states} can be parsed and lowers the allowed number of determinized states.;public void testEnabledPositionIncrements() throws Exception {__        XContentBuilder builder = JsonXContent.contentBuilder()__        builder.startObject()_ {_            builder.startObject("query_string")_ {_                builder.field("query", "text")__                builder.field("default_field", STRING_FIELD_NAME)__                builder.field("enable_position_increments", false)__            }_            builder.endObject()__        }_        builder.endObject()___        QueryStringQueryBuilder queryBuilder = (QueryStringQueryBuilder) parseInnerQueryBuilder(createParser(builder))__        assertFalse(queryBuilder.enablePositionIncrements())__    };validates,that,code,can,be,parsed,and,lowers,the,allowed,number,of,determinized,states;public,void,test,enabled,position,increments,throws,exception,xcontent,builder,builder,json,xcontent,content,builder,builder,start,object,builder,start,object,builder,field,query,text,builder,field,builder,field,false,builder,end,object,builder,end,object,query,string,query,builder,query,builder,query,string,query,builder,parse,inner,query,builder,create,parser,builder,assert,false,query,builder,enable,position,increments
QueryStringQueryBuilderTests -> public void testEnabledPositionIncrements() throws Exception;1549017700;Validates that {@code max_determinized_states} can be parsed and lowers the allowed number of determinized states.;public void testEnabledPositionIncrements() throws Exception {__        XContentBuilder builder = JsonXContent.contentBuilder()__        builder.startObject()_ {_            builder.startObject("query_string")_ {_                builder.field("query", "text")__                builder.field("default_field", STRING_FIELD_NAME)__                builder.field("enable_position_increments", false)__            }_            builder.endObject()__        }_        builder.endObject()___        QueryStringQueryBuilder queryBuilder = (QueryStringQueryBuilder) parseInnerQueryBuilder(createParser(builder))__        assertFalse(queryBuilder.enablePositionIncrements())__    };validates,that,code,can,be,parsed,and,lowers,the,allowed,number,of,determinized,states;public,void,test,enabled,position,increments,throws,exception,xcontent,builder,builder,json,xcontent,content,builder,builder,start,object,builder,start,object,builder,field,query,text,builder,field,builder,field,false,builder,end,object,builder,end,object,query,string,query,builder,query,builder,query,string,query,builder,parse,inner,query,builder,create,parser,builder,assert,false,query,builder,enable,position,increments
QueryStringQueryBuilderTests -> public void testQuoteAnalyzer() throws Exception;1524684173;the quote analyzer should overwrite any other forced analyzer in quoted parts of the query;public void testQuoteAnalyzer() throws Exception {_        assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0)__        _        Query query = new QueryStringQueryBuilder("ONE \"TWO THREE\"")_                .field(STRING_FIELD_NAME)_                .analyzer("whitespace")_                .quoteAnalyzer("simple")_                .toQuery(createShardContext())__        Query expectedQuery =_                new BooleanQuery.Builder()_                        .add(new BooleanClause(new TermQuery(new Term(STRING_FIELD_NAME, "ONE")), Occur.SHOULD))_                        .add(new BooleanClause(new PhraseQuery.Builder()_                                .add(new Term(STRING_FIELD_NAME, "two"), 0)_                                .add(new Term(STRING_FIELD_NAME, "three"), 1)_                                .build(), Occur.SHOULD))_                    .build()__        assertEquals(expectedQuery, query)__    };the,quote,analyzer,should,overwrite,any,other,forced,analyzer,in,quoted,parts,of,the,query;public,void,test,quote,analyzer,throws,exception,assume,true,test,runs,only,when,at,least,a,type,is,registered,get,current,types,length,0,query,query,new,query,string,query,builder,one,two,three,field,analyzer,whitespace,quote,analyzer,simple,to,query,create,shard,context,query,expected,query,new,boolean,query,builder,add,new,boolean,clause,new,term,query,new,term,one,occur,should,add,new,boolean,clause,new,phrase,query,builder,add,new,term,two,0,add,new,term,three,1,build,occur,should,build,assert,equals,expected,query,query
QueryStringQueryBuilderTests -> public void testQuoteAnalyzer() throws Exception;1528706846;the quote analyzer should overwrite any other forced analyzer in quoted parts of the query;public void testQuoteAnalyzer() throws Exception {_        assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0)__        _        Query query = new QueryStringQueryBuilder("ONE \"TWO THREE\"")_                .field(STRING_FIELD_NAME)_                .analyzer("whitespace")_                .quoteAnalyzer("simple")_                .toQuery(createShardContext())__        Query expectedQuery =_                new BooleanQuery.Builder()_                        .add(new BooleanClause(new TermQuery(new Term(STRING_FIELD_NAME, "ONE")), Occur.SHOULD))_                        .add(new BooleanClause(new PhraseQuery.Builder()_                                .add(new Term(STRING_FIELD_NAME, "two"), 0)_                                .add(new Term(STRING_FIELD_NAME, "three"), 1)_                                .build(), Occur.SHOULD))_                    .build()__        assertEquals(expectedQuery, query)__    };the,quote,analyzer,should,overwrite,any,other,forced,analyzer,in,quoted,parts,of,the,query;public,void,test,quote,analyzer,throws,exception,assume,true,test,runs,only,when,at,least,a,type,is,registered,get,current,types,length,0,query,query,new,query,string,query,builder,one,two,three,field,analyzer,whitespace,quote,analyzer,simple,to,query,create,shard,context,query,expected,query,new,boolean,query,builder,add,new,boolean,clause,new,term,query,new,term,one,occur,should,add,new,boolean,clause,new,phrase,query,builder,add,new,term,two,0,add,new,term,three,1,build,occur,should,build,assert,equals,expected,query,query
QueryStringQueryBuilderTests -> public void testQuoteAnalyzer() throws Exception;1531937412;the quote analyzer should overwrite any other forced analyzer in quoted parts of the query;public void testQuoteAnalyzer() throws Exception {_        assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0)__        _        Query query = new QueryStringQueryBuilder("ONE \"TWO THREE\"")_                .field(STRING_FIELD_NAME)_                .analyzer("whitespace")_                .quoteAnalyzer("simple")_                .toQuery(createShardContext())__        Query expectedQuery =_                new BooleanQuery.Builder()_                        .add(new BooleanClause(new TermQuery(new Term(STRING_FIELD_NAME, "ONE")), Occur.SHOULD))_                        .add(new BooleanClause(new PhraseQuery.Builder()_                                .add(new Term(STRING_FIELD_NAME, "two"), 0)_                                .add(new Term(STRING_FIELD_NAME, "three"), 1)_                                .build(), Occur.SHOULD))_                    .build()__        assertEquals(expectedQuery, query)__    };the,quote,analyzer,should,overwrite,any,other,forced,analyzer,in,quoted,parts,of,the,query;public,void,test,quote,analyzer,throws,exception,assume,true,test,runs,only,when,at,least,a,type,is,registered,get,current,types,length,0,query,query,new,query,string,query,builder,one,two,three,field,analyzer,whitespace,quote,analyzer,simple,to,query,create,shard,context,query,expected,query,new,boolean,query,builder,add,new,boolean,clause,new,term,query,new,term,one,occur,should,add,new,boolean,clause,new,phrase,query,builder,add,new,term,two,0,add,new,term,three,1,build,occur,should,build,assert,equals,expected,query,query
QueryStringQueryBuilderTests -> public void testQuoteAnalyzer() throws Exception;1532353780;the quote analyzer should overwrite any other forced analyzer in quoted parts of the query;public void testQuoteAnalyzer() throws Exception {_        assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0)__        _        Query query = new QueryStringQueryBuilder("ONE \"TWO THREE\"")_                .field(STRING_FIELD_NAME)_                .analyzer("whitespace")_                .quoteAnalyzer("simple")_                .toQuery(createShardContext())__        Query expectedQuery =_                new BooleanQuery.Builder()_                        .add(new BooleanClause(new TermQuery(new Term(STRING_FIELD_NAME, "ONE")), Occur.SHOULD))_                        .add(new BooleanClause(new PhraseQuery.Builder()_                                .add(new Term(STRING_FIELD_NAME, "two"), 0)_                                .add(new Term(STRING_FIELD_NAME, "three"), 1)_                                .build(), Occur.SHOULD))_                    .build()__        assertEquals(expectedQuery, query)__    };the,quote,analyzer,should,overwrite,any,other,forced,analyzer,in,quoted,parts,of,the,query;public,void,test,quote,analyzer,throws,exception,assume,true,test,runs,only,when,at,least,a,type,is,registered,get,current,types,length,0,query,query,new,query,string,query,builder,one,two,three,field,analyzer,whitespace,quote,analyzer,simple,to,query,create,shard,context,query,expected,query,new,boolean,query,builder,add,new,boolean,clause,new,term,query,new,term,one,occur,should,add,new,boolean,clause,new,phrase,query,builder,add,new,term,two,0,add,new,term,three,1,build,occur,should,build,assert,equals,expected,query,query
QueryStringQueryBuilderTests -> public void testQuoteAnalyzer() throws Exception;1532685069;the quote analyzer should overwrite any other forced analyzer in quoted parts of the query;public void testQuoteAnalyzer() throws Exception {_        _        Query query = new QueryStringQueryBuilder("ONE \"TWO THREE\"")_                .field(STRING_FIELD_NAME)_                .analyzer("whitespace")_                .quoteAnalyzer("simple")_                .toQuery(createShardContext())__        Query expectedQuery =_                new BooleanQuery.Builder()_                        .add(new BooleanClause(new TermQuery(new Term(STRING_FIELD_NAME, "ONE")), Occur.SHOULD))_                        .add(new BooleanClause(new PhraseQuery.Builder()_                                .add(new Term(STRING_FIELD_NAME, "two"), 0)_                                .add(new Term(STRING_FIELD_NAME, "three"), 1)_                                .build(), Occur.SHOULD))_                    .build()__        assertEquals(expectedQuery, query)__    };the,quote,analyzer,should,overwrite,any,other,forced,analyzer,in,quoted,parts,of,the,query;public,void,test,quote,analyzer,throws,exception,query,query,new,query,string,query,builder,one,two,three,field,analyzer,whitespace,quote,analyzer,simple,to,query,create,shard,context,query,expected,query,new,boolean,query,builder,add,new,boolean,clause,new,term,query,new,term,one,occur,should,add,new,boolean,clause,new,phrase,query,builder,add,new,term,two,0,add,new,term,three,1,build,occur,should,build,assert,equals,expected,query,query
QueryStringQueryBuilderTests -> public void testQuoteAnalyzer() throws Exception;1535046779;the quote analyzer should overwrite any other forced analyzer in quoted parts of the query;public void testQuoteAnalyzer() throws Exception {_        _        Query query = new QueryStringQueryBuilder("ONE \"TWO THREE\"")_                .field(STRING_FIELD_NAME)_                .analyzer("whitespace")_                .quoteAnalyzer("simple")_                .toQuery(createShardContext())__        Query expectedQuery =_                new BooleanQuery.Builder()_                        .add(new BooleanClause(new TermQuery(new Term(STRING_FIELD_NAME, "ONE")), Occur.SHOULD))_                        .add(new BooleanClause(new PhraseQuery.Builder()_                                .add(new Term(STRING_FIELD_NAME, "two"), 0)_                                .add(new Term(STRING_FIELD_NAME, "three"), 1)_                                .build(), Occur.SHOULD))_                    .build()__        assertEquals(expectedQuery, query)__    };the,quote,analyzer,should,overwrite,any,other,forced,analyzer,in,quoted,parts,of,the,query;public,void,test,quote,analyzer,throws,exception,query,query,new,query,string,query,builder,one,two,three,field,analyzer,whitespace,quote,analyzer,simple,to,query,create,shard,context,query,expected,query,new,boolean,query,builder,add,new,boolean,clause,new,term,query,new,term,one,occur,should,add,new,boolean,clause,new,phrase,query,builder,add,new,term,two,0,add,new,term,three,1,build,occur,should,build,assert,equals,expected,query,query
QueryStringQueryBuilderTests -> public void testQuoteAnalyzer() throws Exception;1536314350;the quote analyzer should overwrite any other forced analyzer in quoted parts of the query;public void testQuoteAnalyzer() throws Exception {_        _        Query query = new QueryStringQueryBuilder("ONE \"TWO THREE\"")_                .field(STRING_FIELD_NAME)_                .analyzer("whitespace")_                .quoteAnalyzer("simple")_                .toQuery(createShardContext())__        Query expectedQuery =_                new BooleanQuery.Builder()_                        .add(new BooleanClause(new TermQuery(new Term(STRING_FIELD_NAME, "ONE")), Occur.SHOULD))_                        .add(new BooleanClause(new PhraseQuery.Builder()_                                .add(new Term(STRING_FIELD_NAME, "two"), 0)_                                .add(new Term(STRING_FIELD_NAME, "three"), 1)_                                .build(), Occur.SHOULD))_                    .build()__        assertEquals(expectedQuery, query)__    };the,quote,analyzer,should,overwrite,any,other,forced,analyzer,in,quoted,parts,of,the,query;public,void,test,quote,analyzer,throws,exception,query,query,new,query,string,query,builder,one,two,three,field,analyzer,whitespace,quote,analyzer,simple,to,query,create,shard,context,query,expected,query,new,boolean,query,builder,add,new,boolean,clause,new,term,query,new,term,one,occur,should,add,new,boolean,clause,new,phrase,query,builder,add,new,term,two,0,add,new,term,three,1,build,occur,should,build,assert,equals,expected,query,query
QueryStringQueryBuilderTests -> public void testQuoteAnalyzer() throws Exception;1538509426;the quote analyzer should overwrite any other forced analyzer in quoted parts of the query;public void testQuoteAnalyzer() throws Exception {_        _        Query query = new QueryStringQueryBuilder("ONE \"TWO THREE\"")_                .field(STRING_FIELD_NAME)_                .analyzer("whitespace")_                .quoteAnalyzer("simple")_                .toQuery(createShardContext())__        Query expectedQuery =_                new BooleanQuery.Builder()_                        .add(new BooleanClause(new TermQuery(new Term(STRING_FIELD_NAME, "ONE")), Occur.SHOULD))_                        .add(new BooleanClause(new PhraseQuery.Builder()_                                .add(new Term(STRING_FIELD_NAME, "two"), 0)_                                .add(new Term(STRING_FIELD_NAME, "three"), 1)_                                .build(), Occur.SHOULD))_                    .build()__        assertEquals(expectedQuery, query)__    };the,quote,analyzer,should,overwrite,any,other,forced,analyzer,in,quoted,parts,of,the,query;public,void,test,quote,analyzer,throws,exception,query,query,new,query,string,query,builder,one,two,three,field,analyzer,whitespace,quote,analyzer,simple,to,query,create,shard,context,query,expected,query,new,boolean,query,builder,add,new,boolean,clause,new,term,query,new,term,one,occur,should,add,new,boolean,clause,new,phrase,query,builder,add,new,term,two,0,add,new,term,three,1,build,occur,should,build,assert,equals,expected,query,query
QueryStringQueryBuilderTests -> public void testQuoteAnalyzer() throws Exception;1542355687;the quote analyzer should overwrite any other forced analyzer in quoted parts of the query;public void testQuoteAnalyzer() throws Exception {_        _        Query query = new QueryStringQueryBuilder("ONE \"TWO THREE\"")_                .field(STRING_FIELD_NAME)_                .analyzer("whitespace")_                .quoteAnalyzer("simple")_                .toQuery(createShardContext())__        Query expectedQuery =_                new BooleanQuery.Builder()_                        .add(new BooleanClause(new TermQuery(new Term(STRING_FIELD_NAME, "ONE")), Occur.SHOULD))_                        .add(new BooleanClause(new PhraseQuery.Builder()_                                .add(new Term(STRING_FIELD_NAME, "two"), 0)_                                .add(new Term(STRING_FIELD_NAME, "three"), 1)_                                .build(), Occur.SHOULD))_                    .build()__        assertEquals(expectedQuery, query)__    };the,quote,analyzer,should,overwrite,any,other,forced,analyzer,in,quoted,parts,of,the,query;public,void,test,quote,analyzer,throws,exception,query,query,new,query,string,query,builder,one,two,three,field,analyzer,whitespace,quote,analyzer,simple,to,query,create,shard,context,query,expected,query,new,boolean,query,builder,add,new,boolean,clause,new,term,query,new,term,one,occur,should,add,new,boolean,clause,new,phrase,query,builder,add,new,term,two,0,add,new,term,three,1,build,occur,should,build,assert,equals,expected,query,query
QueryStringQueryBuilderTests -> public void testQuoteAnalyzer() throws Exception;1542726437;the quote analyzer should overwrite any other forced analyzer in quoted parts of the query;public void testQuoteAnalyzer() throws Exception {_        _        Query query = new QueryStringQueryBuilder("ONE \"TWO THREE\"")_                .field(STRING_FIELD_NAME)_                .analyzer("whitespace")_                .quoteAnalyzer("simple")_                .toQuery(createShardContext())__        Query expectedQuery =_                new BooleanQuery.Builder()_                        .add(new BooleanClause(new TermQuery(new Term(STRING_FIELD_NAME, "ONE")), Occur.SHOULD))_                        .add(new BooleanClause(new PhraseQuery.Builder()_                                .add(new Term(STRING_FIELD_NAME, "two"), 0)_                                .add(new Term(STRING_FIELD_NAME, "three"), 1)_                                .build(), Occur.SHOULD))_                    .build()__        assertEquals(expectedQuery, query)__    };the,quote,analyzer,should,overwrite,any,other,forced,analyzer,in,quoted,parts,of,the,query;public,void,test,quote,analyzer,throws,exception,query,query,new,query,string,query,builder,one,two,three,field,analyzer,whitespace,quote,analyzer,simple,to,query,create,shard,context,query,expected,query,new,boolean,query,builder,add,new,boolean,clause,new,term,query,new,term,one,occur,should,add,new,boolean,clause,new,phrase,query,builder,add,new,term,two,0,add,new,term,three,1,build,occur,should,build,assert,equals,expected,query,query
QueryStringQueryBuilderTests -> public void testQuoteAnalyzer() throws Exception;1542962543;the quote analyzer should overwrite any other forced analyzer in quoted parts of the query;public void testQuoteAnalyzer() throws Exception {_        _        Query query = new QueryStringQueryBuilder("ONE \"TWO THREE\"")_                .field(STRING_FIELD_NAME)_                .analyzer("whitespace")_                .quoteAnalyzer("simple")_                .toQuery(createShardContext())__        Query expectedQuery =_                new BooleanQuery.Builder()_                        .add(new BooleanClause(new TermQuery(new Term(STRING_FIELD_NAME, "ONE")), Occur.SHOULD))_                        .add(new BooleanClause(new PhraseQuery.Builder()_                                .add(new Term(STRING_FIELD_NAME, "two"), 0)_                                .add(new Term(STRING_FIELD_NAME, "three"), 1)_                                .build(), Occur.SHOULD))_                    .build()__        assertEquals(expectedQuery, query)__    };the,quote,analyzer,should,overwrite,any,other,forced,analyzer,in,quoted,parts,of,the,query;public,void,test,quote,analyzer,throws,exception,query,query,new,query,string,query,builder,one,two,three,field,analyzer,whitespace,quote,analyzer,simple,to,query,create,shard,context,query,expected,query,new,boolean,query,builder,add,new,boolean,clause,new,term,query,new,term,one,occur,should,add,new,boolean,clause,new,phrase,query,builder,add,new,term,two,0,add,new,term,three,1,build,occur,should,build,assert,equals,expected,query,query
QueryStringQueryBuilderTests -> public void testQuoteAnalyzer() throws Exception;1543399743;the quote analyzer should overwrite any other forced analyzer in quoted parts of the query;public void testQuoteAnalyzer() throws Exception {_        _        Query query = new QueryStringQueryBuilder("ONE \"TWO THREE\"")_                .field(STRING_FIELD_NAME)_                .analyzer("whitespace")_                .quoteAnalyzer("simple")_                .toQuery(createShardContext())__        Query expectedQuery =_                new BooleanQuery.Builder()_                        .add(new BooleanClause(new TermQuery(new Term(STRING_FIELD_NAME, "ONE")), Occur.SHOULD))_                        .add(new BooleanClause(new PhraseQuery.Builder()_                                .add(new Term(STRING_FIELD_NAME, "two"), 0)_                                .add(new Term(STRING_FIELD_NAME, "three"), 1)_                                .build(), Occur.SHOULD))_                    .build()__        assertEquals(expectedQuery, query)__    };the,quote,analyzer,should,overwrite,any,other,forced,analyzer,in,quoted,parts,of,the,query;public,void,test,quote,analyzer,throws,exception,query,query,new,query,string,query,builder,one,two,three,field,analyzer,whitespace,quote,analyzer,simple,to,query,create,shard,context,query,expected,query,new,boolean,query,builder,add,new,boolean,clause,new,term,query,new,term,one,occur,should,add,new,boolean,clause,new,phrase,query,builder,add,new,term,two,0,add,new,term,three,1,build,occur,should,build,assert,equals,expected,query,query
QueryStringQueryBuilderTests -> public void testQuoteAnalyzer() throws Exception;1543432527;the quote analyzer should overwrite any other forced analyzer in quoted parts of the query;public void testQuoteAnalyzer() throws Exception {_        _        Query query = new QueryStringQueryBuilder("ONE \"TWO THREE\"")_                .field(STRING_FIELD_NAME)_                .analyzer("whitespace")_                .quoteAnalyzer("simple")_                .toQuery(createShardContext())__        Query expectedQuery =_                new BooleanQuery.Builder()_                        .add(new BooleanClause(new TermQuery(new Term(STRING_FIELD_NAME, "ONE")), Occur.SHOULD))_                        .add(new BooleanClause(new PhraseQuery.Builder()_                                .add(new Term(STRING_FIELD_NAME, "two"), 0)_                                .add(new Term(STRING_FIELD_NAME, "three"), 1)_                                .build(), Occur.SHOULD))_                    .build()__        assertEquals(expectedQuery, query)__    };the,quote,analyzer,should,overwrite,any,other,forced,analyzer,in,quoted,parts,of,the,query;public,void,test,quote,analyzer,throws,exception,query,query,new,query,string,query,builder,one,two,three,field,analyzer,whitespace,quote,analyzer,simple,to,query,create,shard,context,query,expected,query,new,boolean,query,builder,add,new,boolean,clause,new,term,query,new,term,one,occur,should,add,new,boolean,clause,new,phrase,query,builder,add,new,term,two,0,add,new,term,three,1,build,occur,should,build,assert,equals,expected,query,query
QueryStringQueryBuilderTests -> public void testQuoteAnalyzer() throws Exception;1545079094;the quote analyzer should overwrite any other forced analyzer in quoted parts of the query;public void testQuoteAnalyzer() throws Exception {_        _        Query query = new QueryStringQueryBuilder("ONE \"TWO THREE\"")_                .field(STRING_FIELD_NAME)_                .analyzer("whitespace")_                .quoteAnalyzer("simple")_                .toQuery(createShardContext())__        Query expectedQuery =_                new BooleanQuery.Builder()_                        .add(new BooleanClause(new TermQuery(new Term(STRING_FIELD_NAME, "ONE")), Occur.SHOULD))_                        .add(new BooleanClause(new PhraseQuery.Builder()_                                .add(new Term(STRING_FIELD_NAME, "two"), 0)_                                .add(new Term(STRING_FIELD_NAME, "three"), 1)_                                .build(), Occur.SHOULD))_                    .build()__        assertEquals(expectedQuery, query)__    };the,quote,analyzer,should,overwrite,any,other,forced,analyzer,in,quoted,parts,of,the,query;public,void,test,quote,analyzer,throws,exception,query,query,new,query,string,query,builder,one,two,three,field,analyzer,whitespace,quote,analyzer,simple,to,query,create,shard,context,query,expected,query,new,boolean,query,builder,add,new,boolean,clause,new,term,query,new,term,one,occur,should,add,new,boolean,clause,new,phrase,query,builder,add,new,term,two,0,add,new,term,three,1,build,occur,should,build,assert,equals,expected,query,query
QueryStringQueryBuilderTests -> public void testQuoteAnalyzer() throws Exception;1545098986;the quote analyzer should overwrite any other forced analyzer in quoted parts of the query;public void testQuoteAnalyzer() throws Exception {_        _        Query query = new QueryStringQueryBuilder("ONE \"TWO THREE\"")_                .field(STRING_FIELD_NAME)_                .analyzer("whitespace")_                .quoteAnalyzer("simple")_                .toQuery(createShardContext())__        Query expectedQuery =_                new BooleanQuery.Builder()_                        .add(new BooleanClause(new TermQuery(new Term(STRING_FIELD_NAME, "ONE")), Occur.SHOULD))_                        .add(new BooleanClause(new PhraseQuery.Builder()_                                .add(new Term(STRING_FIELD_NAME, "two"), 0)_                                .add(new Term(STRING_FIELD_NAME, "three"), 1)_                                .build(), Occur.SHOULD))_                    .build()__        assertEquals(expectedQuery, query)__    };the,quote,analyzer,should,overwrite,any,other,forced,analyzer,in,quoted,parts,of,the,query;public,void,test,quote,analyzer,throws,exception,query,query,new,query,string,query,builder,one,two,three,field,analyzer,whitespace,quote,analyzer,simple,to,query,create,shard,context,query,expected,query,new,boolean,query,builder,add,new,boolean,clause,new,term,query,new,term,one,occur,should,add,new,boolean,clause,new,phrase,query,builder,add,new,term,two,0,add,new,term,three,1,build,occur,should,build,assert,equals,expected,query,query
QueryStringQueryBuilderTests -> public void testQuoteAnalyzer() throws Exception;1546459944;the quote analyzer should overwrite any other forced analyzer in quoted parts of the query;public void testQuoteAnalyzer() throws Exception {_        _        Query query = new QueryStringQueryBuilder("ONE \"TWO THREE\"")_                .field(STRING_FIELD_NAME)_                .analyzer("whitespace")_                .quoteAnalyzer("simple")_                .toQuery(createShardContext())__        Query expectedQuery =_                new BooleanQuery.Builder()_                        .add(new BooleanClause(new TermQuery(new Term(STRING_FIELD_NAME, "ONE")), Occur.SHOULD))_                        .add(new BooleanClause(new PhraseQuery.Builder()_                                .add(new Term(STRING_FIELD_NAME, "two"), 0)_                                .add(new Term(STRING_FIELD_NAME, "three"), 1)_                                .build(), Occur.SHOULD))_                    .build()__        assertEquals(expectedQuery, query)__    };the,quote,analyzer,should,overwrite,any,other,forced,analyzer,in,quoted,parts,of,the,query;public,void,test,quote,analyzer,throws,exception,query,query,new,query,string,query,builder,one,two,three,field,analyzer,whitespace,quote,analyzer,simple,to,query,create,shard,context,query,expected,query,new,boolean,query,builder,add,new,boolean,clause,new,term,query,new,term,one,occur,should,add,new,boolean,clause,new,phrase,query,builder,add,new,term,two,0,add,new,term,three,1,build,occur,should,build,assert,equals,expected,query,query
QueryStringQueryBuilderTests -> public void testQuoteAnalyzer() throws Exception;1547734228;the quote analyzer should overwrite any other forced analyzer in quoted parts of the query;public void testQuoteAnalyzer() throws Exception {_        _        Query query = new QueryStringQueryBuilder("ONE \"TWO THREE\"")_                .field(STRING_FIELD_NAME)_                .analyzer("whitespace")_                .quoteAnalyzer("simple")_                .toQuery(createShardContext())__        Query expectedQuery =_                new BooleanQuery.Builder()_                        .add(new BooleanClause(new TermQuery(new Term(STRING_FIELD_NAME, "ONE")), Occur.SHOULD))_                        .add(new BooleanClause(new PhraseQuery.Builder()_                                .add(new Term(STRING_FIELD_NAME, "two"), 0)_                                .add(new Term(STRING_FIELD_NAME, "three"), 1)_                                .build(), Occur.SHOULD))_                    .build()__        assertEquals(expectedQuery, query)__    };the,quote,analyzer,should,overwrite,any,other,forced,analyzer,in,quoted,parts,of,the,query;public,void,test,quote,analyzer,throws,exception,query,query,new,query,string,query,builder,one,two,three,field,analyzer,whitespace,quote,analyzer,simple,to,query,create,shard,context,query,expected,query,new,boolean,query,builder,add,new,boolean,clause,new,term,query,new,term,one,occur,should,add,new,boolean,clause,new,phrase,query,builder,add,new,term,two,0,add,new,term,three,1,build,occur,should,build,assert,equals,expected,query,query
QueryStringQueryBuilderTests -> public void testQuoteAnalyzer() throws Exception;1548236405;the quote analyzer should overwrite any other forced analyzer in quoted parts of the query;public void testQuoteAnalyzer() throws Exception {_        _        Query query = new QueryStringQueryBuilder("ONE \"TWO THREE\"")_                .field(STRING_FIELD_NAME)_                .analyzer("whitespace")_                .quoteAnalyzer("simple")_                .toQuery(createShardContext())__        Query expectedQuery =_                new BooleanQuery.Builder()_                        .add(new BooleanClause(new TermQuery(new Term(STRING_FIELD_NAME, "ONE")), Occur.SHOULD))_                        .add(new BooleanClause(new PhraseQuery.Builder()_                                .add(new Term(STRING_FIELD_NAME, "two"), 0)_                                .add(new Term(STRING_FIELD_NAME, "three"), 1)_                                .build(), Occur.SHOULD))_                    .build()__        assertEquals(expectedQuery, query)__    };the,quote,analyzer,should,overwrite,any,other,forced,analyzer,in,quoted,parts,of,the,query;public,void,test,quote,analyzer,throws,exception,query,query,new,query,string,query,builder,one,two,three,field,analyzer,whitespace,quote,analyzer,simple,to,query,create,shard,context,query,expected,query,new,boolean,query,builder,add,new,boolean,clause,new,term,query,new,term,one,occur,should,add,new,boolean,clause,new,phrase,query,builder,add,new,term,two,0,add,new,term,three,1,build,occur,should,build,assert,equals,expected,query,query
QueryStringQueryBuilderTests -> public void testQuoteAnalyzer() throws Exception;1549017700;the quote analyzer should overwrite any other forced analyzer in quoted parts of the query;public void testQuoteAnalyzer() throws Exception {_        _        Query query = new QueryStringQueryBuilder("ONE \"TWO THREE\"")_                .field(STRING_FIELD_NAME)_                .analyzer("whitespace")_                .quoteAnalyzer("simple")_                .toQuery(createShardContext())__        Query expectedQuery =_                new BooleanQuery.Builder()_                        .add(new BooleanClause(new TermQuery(new Term(STRING_FIELD_NAME, "ONE")), Occur.SHOULD))_                        .add(new BooleanClause(new PhraseQuery.Builder()_                                .add(new Term(STRING_FIELD_NAME, "two"), 0)_                                .add(new Term(STRING_FIELD_NAME, "three"), 1)_                                .build(), Occur.SHOULD))_                    .build()__        assertEquals(expectedQuery, query)__    };the,quote,analyzer,should,overwrite,any,other,forced,analyzer,in,quoted,parts,of,the,query;public,void,test,quote,analyzer,throws,exception,query,query,new,query,string,query,builder,one,two,three,field,analyzer,whitespace,quote,analyzer,simple,to,query,create,shard,context,query,expected,query,new,boolean,query,builder,add,new,boolean,clause,new,term,query,new,term,one,occur,should,add,new,boolean,clause,new,phrase,query,builder,add,new,term,two,0,add,new,term,three,1,build,occur,should,build,assert,equals,expected,query,query
