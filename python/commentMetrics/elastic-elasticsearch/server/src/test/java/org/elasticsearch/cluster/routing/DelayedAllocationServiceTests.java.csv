# id;timestamp;commentText;codeText;commentWords;codeWords
DelayedAllocationServiceTests -> public void testDelayedUnassignedScheduleRerouteAfterDelayedReroute() throws Exception;1524684173;This tests that a new delayed reroute is scheduled right after a delayed reroute was run;public void testDelayedUnassignedScheduleRerouteAfterDelayedReroute() throws Exception {_        TimeValue shortDelaySetting = timeValueMillis(100)__        TimeValue longDelaySetting = TimeValue.timeValueSeconds(1)__        MetaData metaData = MetaData.builder()_            .put(IndexMetaData.builder("short_delay")_                .settings(settings(Version.CURRENT).put(UnassignedInfo.INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING.getKey(), shortDelaySetting))_                .numberOfShards(1).numberOfReplicas(1))_            .put(IndexMetaData.builder("long_delay")_                .settings(settings(Version.CURRENT).put(UnassignedInfo.INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING.getKey(), longDelaySetting))_                .numberOfShards(1).numberOfReplicas(1))_            .build()__        ClusterState clusterState = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData)_            .routingTable(RoutingTable.builder().addAsNew(metaData.index("short_delay")).addAsNew(metaData.index("long_delay")).build())_            .nodes(DiscoveryNodes.builder()_                .add(newNode("node0", singleton(DiscoveryNode.Role.MASTER))).localNodeId("node0").masterNodeId("node0")_                .add(newNode("node1")).add(newNode("node2")).add(newNode("node3")).add(newNode("node4"))).build()__        _        clusterState = allocationService.reroute(clusterState, "reroute")__        _        clusterState = allocationService.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING))__        _        clusterState = allocationService.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING))__        assertThat("all shards should be started", clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(4))___        _        ShardRouting shortDelayReplica = null__        for (ShardRouting shardRouting : clusterState.getRoutingTable().allShards("short_delay")) {_            if (shardRouting.primary() == false) {_                shortDelayReplica = shardRouting__                break__            }_        }_        assertNotNull(shortDelayReplica)___        _        ShardRouting longDelayReplica = null__        for (ShardRouting shardRouting : clusterState.getRoutingTable().allShards("long_delay")) {_            if (shardRouting.primary() == false) {_                longDelayReplica = shardRouting__                break__            }_        }_        assertNotNull(longDelayReplica)___        final long baseTimestampNanos = System.nanoTime()___        _        ClusterState clusterStateBeforeNodeLeft = clusterState__        clusterState = ClusterState.builder(clusterState)_            .nodes(DiscoveryNodes.builder(clusterState.nodes())_                .remove(shortDelayReplica.currentNodeId())_                .remove(longDelayReplica.currentNodeId()))_            .build()__        _        allocationService.setNanoTimeOverride(baseTimestampNanos)__        clusterState = allocationService.deassociateDeadNodes(clusterState, true, "reroute")__        final ClusterState stateWithDelayedShards = clusterState__        assertEquals(2, UnassignedInfo.getNumberOfDelayedUnassigned(stateWithDelayedShards))__        RoutingNodes.UnassignedShards.UnassignedIterator iter = stateWithDelayedShards.getRoutingNodes().unassigned().iterator()__        assertEquals(baseTimestampNanos, iter.next().unassignedInfo().getUnassignedTimeInNanos())__        assertEquals(baseTimestampNanos, iter.next().unassignedInfo().getUnassignedTimeInNanos())___        _        CountDownLatch latch1 = new CountDownLatch(1)__        AtomicReference<ClusterStateUpdateTask> clusterStateUpdateTask1 = new AtomicReference<>()__        doAnswer(invocationOnMock -> {_            clusterStateUpdateTask1.set((ClusterStateUpdateTask)invocationOnMock.getArguments()[1])__            latch1.countDown()__            return null__        }).when(clusterService).submitStateUpdateTask(eq(CLUSTER_UPDATE_TASK_SOURCE), any(ClusterStateUpdateTask.class))__        assertNull(delayedAllocationService.delayedRerouteTask.get())__        long delayUntilClusterChangeEvent = TimeValue.timeValueNanos(randomInt((int)shortDelaySetting.nanos() - 1)).nanos()__        long clusterChangeEventTimestampNanos = baseTimestampNanos + delayUntilClusterChangeEvent__        delayedAllocationService.setNanoTimeOverride(clusterChangeEventTimestampNanos)__        delayedAllocationService.clusterChanged(_            new ClusterChangedEvent("fake node left", stateWithDelayedShards, clusterStateBeforeNodeLeft))___        _        DelayedAllocationService.DelayedRerouteTask firstDelayedRerouteTask = delayedAllocationService.delayedRerouteTask.get()__        assertNotNull(firstDelayedRerouteTask)__        assertFalse(firstDelayedRerouteTask.cancelScheduling.get())__        assertThat(firstDelayedRerouteTask.baseTimestampNanos, equalTo(clusterChangeEventTimestampNanos))__        assertThat(firstDelayedRerouteTask.nextDelay.nanos(),_            equalTo(UnassignedInfo.findNextDelayedAllocation(clusterChangeEventTimestampNanos, stateWithDelayedShards)))__        assertThat(firstDelayedRerouteTask.nextDelay.nanos(),_            equalTo(shortDelaySetting.nanos() - (clusterChangeEventTimestampNanos - baseTimestampNanos)))___        _        assertTrue(latch1.await(30, TimeUnit.SECONDS))__        verify(clusterService).submitStateUpdateTask(eq(CLUSTER_UPDATE_TASK_SOURCE), eq(clusterStateUpdateTask1.get()))___        _        long nanoTimeForReroute = clusterChangeEventTimestampNanos + shortDelaySetting.nanos() + timeValueMillis(randomInt(50)).nanos()__        allocationService.setNanoTimeOverride(nanoTimeForReroute)__        _        ClusterState stateWithOnlyOneDelayedShard = clusterStateUpdateTask1.get().execute(stateWithDelayedShards)__        _        assertEquals(1, UnassignedInfo.getNumberOfDelayedUnassigned(stateWithOnlyOneDelayedShard))__        _        assertNull(delayedAllocationService.delayedRerouteTask.get())___        _        CountDownLatch latch2 = new CountDownLatch(1)__        AtomicReference<ClusterStateUpdateTask> clusterStateUpdateTask2 = new AtomicReference<>()__        doAnswer(invocationOnMock -> {_            clusterStateUpdateTask2.set((ClusterStateUpdateTask)invocationOnMock.getArguments()[1])__            latch2.countDown()__            return null__        }).when(clusterService).submitStateUpdateTask(eq(CLUSTER_UPDATE_TASK_SOURCE), any(ClusterStateUpdateTask.class))__        _        delayUntilClusterChangeEvent = timeValueMillis(randomInt(50)).nanos()__        clusterChangeEventTimestampNanos = nanoTimeForReroute + delayUntilClusterChangeEvent__        delayedAllocationService.setNanoTimeOverride(clusterChangeEventTimestampNanos)__        delayedAllocationService.clusterChanged(_            new ClusterChangedEvent(CLUSTER_UPDATE_TASK_SOURCE, stateWithOnlyOneDelayedShard, stateWithDelayedShards))___        _        DelayedAllocationService.DelayedRerouteTask secondDelayedRerouteTask = delayedAllocationService.delayedRerouteTask.get()__        assertNotNull(secondDelayedRerouteTask)__        assertFalse(secondDelayedRerouteTask.cancelScheduling.get())__        assertThat(secondDelayedRerouteTask.baseTimestampNanos, equalTo(clusterChangeEventTimestampNanos))__        assertThat(secondDelayedRerouteTask.nextDelay.nanos(),_            equalTo(UnassignedInfo.findNextDelayedAllocation(clusterChangeEventTimestampNanos, stateWithOnlyOneDelayedShard)))__        assertThat(secondDelayedRerouteTask.nextDelay.nanos(),_            equalTo(longDelaySetting.nanos() - (clusterChangeEventTimestampNanos - baseTimestampNanos)))___        _        assertTrue(latch2.await(30, TimeUnit.SECONDS))__        verify(clusterService).submitStateUpdateTask(eq(CLUSTER_UPDATE_TASK_SOURCE), eq(clusterStateUpdateTask2.get()))___        _        nanoTimeForReroute = clusterChangeEventTimestampNanos + longDelaySetting.nanos() + timeValueMillis(randomInt(50)).nanos()__        allocationService.setNanoTimeOverride(nanoTimeForReroute)__        _        ClusterState stateWithNoDelayedShards = clusterStateUpdateTask2.get().execute(stateWithOnlyOneDelayedShard)__        _        assertEquals(0, UnassignedInfo.getNumberOfDelayedUnassigned(stateWithNoDelayedShards))__        _        assertNull(delayedAllocationService.delayedRerouteTask.get())___        _        delayedAllocationService.setNanoTimeOverride(nanoTimeForReroute + timeValueMillis(randomInt(50)).nanos())__        delayedAllocationService.clusterChanged(_            new ClusterChangedEvent(CLUSTER_UPDATE_TASK_SOURCE, stateWithNoDelayedShards, stateWithOnlyOneDelayedShard))__        _        assertNull(delayedAllocationService.delayedRerouteTask.get())__        _        verifyNoMoreInteractions(clusterService)__    };this,tests,that,a,new,delayed,reroute,is,scheduled,right,after,a,delayed,reroute,was,run;public,void,test,delayed,unassigned,schedule,reroute,after,delayed,reroute,throws,exception,time,value,short,delay,setting,time,value,millis,100,time,value,long,delay,setting,time,value,time,value,seconds,1,meta,data,meta,data,meta,data,builder,put,index,meta,data,builder,settings,settings,version,current,put,unassigned,info,get,key,short,delay,setting,number,of,shards,1,number,of,replicas,1,put,index,meta,data,builder,settings,settings,version,current,put,unassigned,info,get,key,long,delay,setting,number,of,shards,1,number,of,replicas,1,build,cluster,state,cluster,state,cluster,state,builder,cluster,name,get,default,settings,empty,meta,data,meta,data,routing,table,routing,table,builder,add,as,new,meta,data,index,add,as,new,meta,data,index,build,nodes,discovery,nodes,builder,add,new,node,node0,singleton,discovery,node,role,master,local,node,id,node0,master,node,id,node0,add,new,node,node1,add,new,node,node2,add,new,node,node3,add,new,node,node4,build,cluster,state,allocation,service,reroute,cluster,state,reroute,cluster,state,allocation,service,apply,started,shards,cluster,state,cluster,state,get,routing,nodes,shards,with,state,initializing,cluster,state,allocation,service,apply,started,shards,cluster,state,cluster,state,get,routing,nodes,shards,with,state,initializing,assert,that,all,shards,should,be,started,cluster,state,get,routing,nodes,shards,with,state,started,size,equal,to,4,shard,routing,short,delay,replica,null,for,shard,routing,shard,routing,cluster,state,get,routing,table,all,shards,if,shard,routing,primary,false,short,delay,replica,shard,routing,break,assert,not,null,short,delay,replica,shard,routing,long,delay,replica,null,for,shard,routing,shard,routing,cluster,state,get,routing,table,all,shards,if,shard,routing,primary,false,long,delay,replica,shard,routing,break,assert,not,null,long,delay,replica,final,long,base,timestamp,nanos,system,nano,time,cluster,state,cluster,state,before,node,left,cluster,state,cluster,state,cluster,state,builder,cluster,state,nodes,discovery,nodes,builder,cluster,state,nodes,remove,short,delay,replica,current,node,id,remove,long,delay,replica,current,node,id,build,allocation,service,set,nano,time,override,base,timestamp,nanos,cluster,state,allocation,service,deassociate,dead,nodes,cluster,state,true,reroute,final,cluster,state,state,with,delayed,shards,cluster,state,assert,equals,2,unassigned,info,get,number,of,delayed,unassigned,state,with,delayed,shards,routing,nodes,unassigned,shards,unassigned,iterator,iter,state,with,delayed,shards,get,routing,nodes,unassigned,iterator,assert,equals,base,timestamp,nanos,iter,next,unassigned,info,get,unassigned,time,in,nanos,assert,equals,base,timestamp,nanos,iter,next,unassigned,info,get,unassigned,time,in,nanos,count,down,latch,latch1,new,count,down,latch,1,atomic,reference,cluster,state,update,task,cluster,state,update,task1,new,atomic,reference,do,answer,invocation,on,mock,cluster,state,update,task1,set,cluster,state,update,task,invocation,on,mock,get,arguments,1,latch1,count,down,return,null,when,cluster,service,submit,state,update,task,eq,any,cluster,state,update,task,class,assert,null,delayed,allocation,service,delayed,reroute,task,get,long,delay,until,cluster,change,event,time,value,time,value,nanos,random,int,int,short,delay,setting,nanos,1,nanos,long,cluster,change,event,timestamp,nanos,base,timestamp,nanos,delay,until,cluster,change,event,delayed,allocation,service,set,nano,time,override,cluster,change,event,timestamp,nanos,delayed,allocation,service,cluster,changed,new,cluster,changed,event,fake,node,left,state,with,delayed,shards,cluster,state,before,node,left,delayed,allocation,service,delayed,reroute,task,first,delayed,reroute,task,delayed,allocation,service,delayed,reroute,task,get,assert,not,null,first,delayed,reroute,task,assert,false,first,delayed,reroute,task,cancel,scheduling,get,assert,that,first,delayed,reroute,task,base,timestamp,nanos,equal,to,cluster,change,event,timestamp,nanos,assert,that,first,delayed,reroute,task,next,delay,nanos,equal,to,unassigned,info,find,next,delayed,allocation,cluster,change,event,timestamp,nanos,state,with,delayed,shards,assert,that,first,delayed,reroute,task,next,delay,nanos,equal,to,short,delay,setting,nanos,cluster,change,event,timestamp,nanos,base,timestamp,nanos,assert,true,latch1,await,30,time,unit,seconds,verify,cluster,service,submit,state,update,task,eq,eq,cluster,state,update,task1,get,long,nano,time,for,reroute,cluster,change,event,timestamp,nanos,short,delay,setting,nanos,time,value,millis,random,int,50,nanos,allocation,service,set,nano,time,override,nano,time,for,reroute,cluster,state,state,with,only,one,delayed,shard,cluster,state,update,task1,get,execute,state,with,delayed,shards,assert,equals,1,unassigned,info,get,number,of,delayed,unassigned,state,with,only,one,delayed,shard,assert,null,delayed,allocation,service,delayed,reroute,task,get,count,down,latch,latch2,new,count,down,latch,1,atomic,reference,cluster,state,update,task,cluster,state,update,task2,new,atomic,reference,do,answer,invocation,on,mock,cluster,state,update,task2,set,cluster,state,update,task,invocation,on,mock,get,arguments,1,latch2,count,down,return,null,when,cluster,service,submit,state,update,task,eq,any,cluster,state,update,task,class,delay,until,cluster,change,event,time,value,millis,random,int,50,nanos,cluster,change,event,timestamp,nanos,nano,time,for,reroute,delay,until,cluster,change,event,delayed,allocation,service,set,nano,time,override,cluster,change,event,timestamp,nanos,delayed,allocation,service,cluster,changed,new,cluster,changed,event,state,with,only,one,delayed,shard,state,with,delayed,shards,delayed,allocation,service,delayed,reroute,task,second,delayed,reroute,task,delayed,allocation,service,delayed,reroute,task,get,assert,not,null,second,delayed,reroute,task,assert,false,second,delayed,reroute,task,cancel,scheduling,get,assert,that,second,delayed,reroute,task,base,timestamp,nanos,equal,to,cluster,change,event,timestamp,nanos,assert,that,second,delayed,reroute,task,next,delay,nanos,equal,to,unassigned,info,find,next,delayed,allocation,cluster,change,event,timestamp,nanos,state,with,only,one,delayed,shard,assert,that,second,delayed,reroute,task,next,delay,nanos,equal,to,long,delay,setting,nanos,cluster,change,event,timestamp,nanos,base,timestamp,nanos,assert,true,latch2,await,30,time,unit,seconds,verify,cluster,service,submit,state,update,task,eq,eq,cluster,state,update,task2,get,nano,time,for,reroute,cluster,change,event,timestamp,nanos,long,delay,setting,nanos,time,value,millis,random,int,50,nanos,allocation,service,set,nano,time,override,nano,time,for,reroute,cluster,state,state,with,no,delayed,shards,cluster,state,update,task2,get,execute,state,with,only,one,delayed,shard,assert,equals,0,unassigned,info,get,number,of,delayed,unassigned,state,with,no,delayed,shards,assert,null,delayed,allocation,service,delayed,reroute,task,get,delayed,allocation,service,set,nano,time,override,nano,time,for,reroute,time,value,millis,random,int,50,nanos,delayed,allocation,service,cluster,changed,new,cluster,changed,event,state,with,no,delayed,shards,state,with,only,one,delayed,shard,assert,null,delayed,allocation,service,delayed,reroute,task,get,verify,no,more,interactions,cluster,service
DelayedAllocationServiceTests -> public void testDelayedUnassignedScheduleRerouteAfterDelayedReroute() throws Exception;1547625930;This tests that a new delayed reroute is scheduled right after a delayed reroute was run;public void testDelayedUnassignedScheduleRerouteAfterDelayedReroute() throws Exception {_        TimeValue shortDelaySetting = timeValueMillis(100)__        TimeValue longDelaySetting = TimeValue.timeValueSeconds(1)__        MetaData metaData = MetaData.builder()_            .put(IndexMetaData.builder("short_delay")_                .settings(settings(Version.CURRENT).put(UnassignedInfo.INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING.getKey(), shortDelaySetting))_                .numberOfShards(1).numberOfReplicas(1))_            .put(IndexMetaData.builder("long_delay")_                .settings(settings(Version.CURRENT).put(UnassignedInfo.INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING.getKey(), longDelaySetting))_                .numberOfShards(1).numberOfReplicas(1))_            .build()__        ClusterState clusterState = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData)_            .routingTable(RoutingTable.builder().addAsNew(metaData.index("short_delay")).addAsNew(metaData.index("long_delay")).build())_            .nodes(DiscoveryNodes.builder()_                .add(newNode("node0", singleton(DiscoveryNode.Role.MASTER))).localNodeId("node0").masterNodeId("node0")_                .add(newNode("node1")).add(newNode("node2")).add(newNode("node3")).add(newNode("node4"))).build()__        _        clusterState = allocationService.reroute(clusterState, "reroute")__        _        clusterState = allocationService.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING))__        _        clusterState = allocationService.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING))__        assertThat("all shards should be started", clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(4))___        _        ShardRouting shortDelayReplica = null__        for (ShardRouting shardRouting : clusterState.getRoutingTable().allShards("short_delay")) {_            if (shardRouting.primary() == false) {_                shortDelayReplica = shardRouting__                break__            }_        }_        assertNotNull(shortDelayReplica)___        _        ShardRouting longDelayReplica = null__        for (ShardRouting shardRouting : clusterState.getRoutingTable().allShards("long_delay")) {_            if (shardRouting.primary() == false) {_                longDelayReplica = shardRouting__                break__            }_        }_        assertNotNull(longDelayReplica)___        final long baseTimestampNanos = System.nanoTime()___        _        ClusterState clusterStateBeforeNodeLeft = clusterState__        clusterState = ClusterState.builder(clusterState)_            .nodes(DiscoveryNodes.builder(clusterState.nodes())_                .remove(shortDelayReplica.currentNodeId())_                .remove(longDelayReplica.currentNodeId()))_            .build()__        _        allocationService.setNanoTimeOverride(baseTimestampNanos)__        clusterState = allocationService.deassociateDeadNodes(clusterState, true, "reroute")__        final ClusterState stateWithDelayedShards = clusterState__        assertEquals(2, UnassignedInfo.getNumberOfDelayedUnassigned(stateWithDelayedShards))__        RoutingNodes.UnassignedShards.UnassignedIterator iter = stateWithDelayedShards.getRoutingNodes().unassigned().iterator()__        assertEquals(baseTimestampNanos, iter.next().unassignedInfo().getUnassignedTimeInNanos())__        assertEquals(baseTimestampNanos, iter.next().unassignedInfo().getUnassignedTimeInNanos())___        _        CountDownLatch latch1 = new CountDownLatch(1)__        AtomicReference<ClusterStateUpdateTask> clusterStateUpdateTask1 = new AtomicReference<>()__        doAnswer(invocationOnMock -> {_            clusterStateUpdateTask1.set((ClusterStateUpdateTask)invocationOnMock.getArguments()[1])__            latch1.countDown()__            return null__        }).when(clusterService).submitStateUpdateTask(eq(CLUSTER_UPDATE_TASK_SOURCE), any(ClusterStateUpdateTask.class))__        assertNull(delayedAllocationService.delayedRerouteTask.get())__        long delayUntilClusterChangeEvent = TimeValue.timeValueNanos(randomInt((int)shortDelaySetting.nanos() - 1)).nanos()__        long clusterChangeEventTimestampNanos = baseTimestampNanos + delayUntilClusterChangeEvent__        delayedAllocationService.setNanoTimeOverride(clusterChangeEventTimestampNanos)__        delayedAllocationService.clusterChanged(_            new ClusterChangedEvent("fake node left", stateWithDelayedShards, clusterStateBeforeNodeLeft))___        _        DelayedAllocationService.DelayedRerouteTask firstDelayedRerouteTask = delayedAllocationService.delayedRerouteTask.get()__        assertNotNull(firstDelayedRerouteTask)__        assertFalse(firstDelayedRerouteTask.cancelScheduling.get())__        assertThat(firstDelayedRerouteTask.baseTimestampNanos, equalTo(clusterChangeEventTimestampNanos))__        assertThat(firstDelayedRerouteTask.nextDelay.nanos(),_            equalTo(UnassignedInfo.findNextDelayedAllocation(clusterChangeEventTimestampNanos, stateWithDelayedShards)))__        assertThat(firstDelayedRerouteTask.nextDelay.nanos(),_            equalTo(shortDelaySetting.nanos() - (clusterChangeEventTimestampNanos - baseTimestampNanos)))___        _        assertTrue(latch1.await(30, TimeUnit.SECONDS))__        verify(clusterService).submitStateUpdateTask(eq(CLUSTER_UPDATE_TASK_SOURCE), eq(clusterStateUpdateTask1.get()))___        _        long nanoTimeForReroute = clusterChangeEventTimestampNanos + shortDelaySetting.nanos() + timeValueMillis(randomInt(50)).nanos()__        allocationService.setNanoTimeOverride(nanoTimeForReroute)__        _        ClusterState stateWithOnlyOneDelayedShard = clusterStateUpdateTask1.get().execute(stateWithDelayedShards)__        _        assertEquals(1, UnassignedInfo.getNumberOfDelayedUnassigned(stateWithOnlyOneDelayedShard))__        _        assertNull(delayedAllocationService.delayedRerouteTask.get())___        _        CountDownLatch latch2 = new CountDownLatch(1)__        AtomicReference<ClusterStateUpdateTask> clusterStateUpdateTask2 = new AtomicReference<>()__        doAnswer(invocationOnMock -> {_            clusterStateUpdateTask2.set((ClusterStateUpdateTask)invocationOnMock.getArguments()[1])__            latch2.countDown()__            return null__        }).when(clusterService).submitStateUpdateTask(eq(CLUSTER_UPDATE_TASK_SOURCE), any(ClusterStateUpdateTask.class))__        _        delayUntilClusterChangeEvent = timeValueMillis(randomInt(50)).nanos()__        clusterChangeEventTimestampNanos = nanoTimeForReroute + delayUntilClusterChangeEvent__        delayedAllocationService.setNanoTimeOverride(clusterChangeEventTimestampNanos)__        delayedAllocationService.clusterChanged(_            new ClusterChangedEvent(CLUSTER_UPDATE_TASK_SOURCE, stateWithOnlyOneDelayedShard, stateWithDelayedShards))___        _        DelayedAllocationService.DelayedRerouteTask secondDelayedRerouteTask = delayedAllocationService.delayedRerouteTask.get()__        assertNotNull(secondDelayedRerouteTask)__        assertFalse(secondDelayedRerouteTask.cancelScheduling.get())__        assertThat(secondDelayedRerouteTask.baseTimestampNanos, equalTo(clusterChangeEventTimestampNanos))__        assertThat(secondDelayedRerouteTask.nextDelay.nanos(),_            equalTo(UnassignedInfo.findNextDelayedAllocation(clusterChangeEventTimestampNanos, stateWithOnlyOneDelayedShard)))__        assertThat(secondDelayedRerouteTask.nextDelay.nanos(),_            equalTo(longDelaySetting.nanos() - (clusterChangeEventTimestampNanos - baseTimestampNanos)))___        _        assertTrue(latch2.await(30, TimeUnit.SECONDS))__        verify(clusterService).submitStateUpdateTask(eq(CLUSTER_UPDATE_TASK_SOURCE), eq(clusterStateUpdateTask2.get()))___        _        nanoTimeForReroute = clusterChangeEventTimestampNanos + longDelaySetting.nanos() + timeValueMillis(randomInt(50)).nanos()__        allocationService.setNanoTimeOverride(nanoTimeForReroute)__        _        ClusterState stateWithNoDelayedShards = clusterStateUpdateTask2.get().execute(stateWithOnlyOneDelayedShard)__        _        assertEquals(0, UnassignedInfo.getNumberOfDelayedUnassigned(stateWithNoDelayedShards))__        _        assertNull(delayedAllocationService.delayedRerouteTask.get())___        _        delayedAllocationService.setNanoTimeOverride(nanoTimeForReroute + timeValueMillis(randomInt(50)).nanos())__        delayedAllocationService.clusterChanged(_            new ClusterChangedEvent(CLUSTER_UPDATE_TASK_SOURCE, stateWithNoDelayedShards, stateWithOnlyOneDelayedShard))__        _        assertNull(delayedAllocationService.delayedRerouteTask.get())__        _        verifyNoMoreInteractions(clusterService)__    };this,tests,that,a,new,delayed,reroute,is,scheduled,right,after,a,delayed,reroute,was,run;public,void,test,delayed,unassigned,schedule,reroute,after,delayed,reroute,throws,exception,time,value,short,delay,setting,time,value,millis,100,time,value,long,delay,setting,time,value,time,value,seconds,1,meta,data,meta,data,meta,data,builder,put,index,meta,data,builder,settings,settings,version,current,put,unassigned,info,get,key,short,delay,setting,number,of,shards,1,number,of,replicas,1,put,index,meta,data,builder,settings,settings,version,current,put,unassigned,info,get,key,long,delay,setting,number,of,shards,1,number,of,replicas,1,build,cluster,state,cluster,state,cluster,state,builder,cluster,name,get,default,settings,empty,meta,data,meta,data,routing,table,routing,table,builder,add,as,new,meta,data,index,add,as,new,meta,data,index,build,nodes,discovery,nodes,builder,add,new,node,node0,singleton,discovery,node,role,master,local,node,id,node0,master,node,id,node0,add,new,node,node1,add,new,node,node2,add,new,node,node3,add,new,node,node4,build,cluster,state,allocation,service,reroute,cluster,state,reroute,cluster,state,allocation,service,apply,started,shards,cluster,state,cluster,state,get,routing,nodes,shards,with,state,initializing,cluster,state,allocation,service,apply,started,shards,cluster,state,cluster,state,get,routing,nodes,shards,with,state,initializing,assert,that,all,shards,should,be,started,cluster,state,get,routing,nodes,shards,with,state,started,size,equal,to,4,shard,routing,short,delay,replica,null,for,shard,routing,shard,routing,cluster,state,get,routing,table,all,shards,if,shard,routing,primary,false,short,delay,replica,shard,routing,break,assert,not,null,short,delay,replica,shard,routing,long,delay,replica,null,for,shard,routing,shard,routing,cluster,state,get,routing,table,all,shards,if,shard,routing,primary,false,long,delay,replica,shard,routing,break,assert,not,null,long,delay,replica,final,long,base,timestamp,nanos,system,nano,time,cluster,state,cluster,state,before,node,left,cluster,state,cluster,state,cluster,state,builder,cluster,state,nodes,discovery,nodes,builder,cluster,state,nodes,remove,short,delay,replica,current,node,id,remove,long,delay,replica,current,node,id,build,allocation,service,set,nano,time,override,base,timestamp,nanos,cluster,state,allocation,service,deassociate,dead,nodes,cluster,state,true,reroute,final,cluster,state,state,with,delayed,shards,cluster,state,assert,equals,2,unassigned,info,get,number,of,delayed,unassigned,state,with,delayed,shards,routing,nodes,unassigned,shards,unassigned,iterator,iter,state,with,delayed,shards,get,routing,nodes,unassigned,iterator,assert,equals,base,timestamp,nanos,iter,next,unassigned,info,get,unassigned,time,in,nanos,assert,equals,base,timestamp,nanos,iter,next,unassigned,info,get,unassigned,time,in,nanos,count,down,latch,latch1,new,count,down,latch,1,atomic,reference,cluster,state,update,task,cluster,state,update,task1,new,atomic,reference,do,answer,invocation,on,mock,cluster,state,update,task1,set,cluster,state,update,task,invocation,on,mock,get,arguments,1,latch1,count,down,return,null,when,cluster,service,submit,state,update,task,eq,any,cluster,state,update,task,class,assert,null,delayed,allocation,service,delayed,reroute,task,get,long,delay,until,cluster,change,event,time,value,time,value,nanos,random,int,int,short,delay,setting,nanos,1,nanos,long,cluster,change,event,timestamp,nanos,base,timestamp,nanos,delay,until,cluster,change,event,delayed,allocation,service,set,nano,time,override,cluster,change,event,timestamp,nanos,delayed,allocation,service,cluster,changed,new,cluster,changed,event,fake,node,left,state,with,delayed,shards,cluster,state,before,node,left,delayed,allocation,service,delayed,reroute,task,first,delayed,reroute,task,delayed,allocation,service,delayed,reroute,task,get,assert,not,null,first,delayed,reroute,task,assert,false,first,delayed,reroute,task,cancel,scheduling,get,assert,that,first,delayed,reroute,task,base,timestamp,nanos,equal,to,cluster,change,event,timestamp,nanos,assert,that,first,delayed,reroute,task,next,delay,nanos,equal,to,unassigned,info,find,next,delayed,allocation,cluster,change,event,timestamp,nanos,state,with,delayed,shards,assert,that,first,delayed,reroute,task,next,delay,nanos,equal,to,short,delay,setting,nanos,cluster,change,event,timestamp,nanos,base,timestamp,nanos,assert,true,latch1,await,30,time,unit,seconds,verify,cluster,service,submit,state,update,task,eq,eq,cluster,state,update,task1,get,long,nano,time,for,reroute,cluster,change,event,timestamp,nanos,short,delay,setting,nanos,time,value,millis,random,int,50,nanos,allocation,service,set,nano,time,override,nano,time,for,reroute,cluster,state,state,with,only,one,delayed,shard,cluster,state,update,task1,get,execute,state,with,delayed,shards,assert,equals,1,unassigned,info,get,number,of,delayed,unassigned,state,with,only,one,delayed,shard,assert,null,delayed,allocation,service,delayed,reroute,task,get,count,down,latch,latch2,new,count,down,latch,1,atomic,reference,cluster,state,update,task,cluster,state,update,task2,new,atomic,reference,do,answer,invocation,on,mock,cluster,state,update,task2,set,cluster,state,update,task,invocation,on,mock,get,arguments,1,latch2,count,down,return,null,when,cluster,service,submit,state,update,task,eq,any,cluster,state,update,task,class,delay,until,cluster,change,event,time,value,millis,random,int,50,nanos,cluster,change,event,timestamp,nanos,nano,time,for,reroute,delay,until,cluster,change,event,delayed,allocation,service,set,nano,time,override,cluster,change,event,timestamp,nanos,delayed,allocation,service,cluster,changed,new,cluster,changed,event,state,with,only,one,delayed,shard,state,with,delayed,shards,delayed,allocation,service,delayed,reroute,task,second,delayed,reroute,task,delayed,allocation,service,delayed,reroute,task,get,assert,not,null,second,delayed,reroute,task,assert,false,second,delayed,reroute,task,cancel,scheduling,get,assert,that,second,delayed,reroute,task,base,timestamp,nanos,equal,to,cluster,change,event,timestamp,nanos,assert,that,second,delayed,reroute,task,next,delay,nanos,equal,to,unassigned,info,find,next,delayed,allocation,cluster,change,event,timestamp,nanos,state,with,only,one,delayed,shard,assert,that,second,delayed,reroute,task,next,delay,nanos,equal,to,long,delay,setting,nanos,cluster,change,event,timestamp,nanos,base,timestamp,nanos,assert,true,latch2,await,30,time,unit,seconds,verify,cluster,service,submit,state,update,task,eq,eq,cluster,state,update,task2,get,nano,time,for,reroute,cluster,change,event,timestamp,nanos,long,delay,setting,nanos,time,value,millis,random,int,50,nanos,allocation,service,set,nano,time,override,nano,time,for,reroute,cluster,state,state,with,no,delayed,shards,cluster,state,update,task2,get,execute,state,with,only,one,delayed,shard,assert,equals,0,unassigned,info,get,number,of,delayed,unassigned,state,with,no,delayed,shards,assert,null,delayed,allocation,service,delayed,reroute,task,get,delayed,allocation,service,set,nano,time,override,nano,time,for,reroute,time,value,millis,random,int,50,nanos,delayed,allocation,service,cluster,changed,new,cluster,changed,event,state,with,no,delayed,shards,state,with,only,one,delayed,shard,assert,null,delayed,allocation,service,delayed,reroute,task,get,verify,no,more,interactions,cluster,service
DelayedAllocationServiceTests -> public void testDelayedUnassignedScheduleRerouteAfterDelayedReroute() throws Exception;1548259585;This tests that a new delayed reroute is scheduled right after a delayed reroute was run;public void testDelayedUnassignedScheduleRerouteAfterDelayedReroute() throws Exception {_        TimeValue shortDelaySetting = timeValueMillis(100)__        TimeValue longDelaySetting = TimeValue.timeValueSeconds(1)__        MetaData metaData = MetaData.builder()_            .put(IndexMetaData.builder("short_delay")_                .settings(settings(Version.CURRENT).put(UnassignedInfo.INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING.getKey(), shortDelaySetting))_                .numberOfShards(1).numberOfReplicas(1))_            .put(IndexMetaData.builder("long_delay")_                .settings(settings(Version.CURRENT).put(UnassignedInfo.INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING.getKey(), longDelaySetting))_                .numberOfShards(1).numberOfReplicas(1))_            .build()__        ClusterState clusterState = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData)_            .routingTable(RoutingTable.builder().addAsNew(metaData.index("short_delay")).addAsNew(metaData.index("long_delay")).build())_            .nodes(DiscoveryNodes.builder()_                .add(newNode("node0", singleton(DiscoveryNode.Role.MASTER))).localNodeId("node0").masterNodeId("node0")_                .add(newNode("node1")).add(newNode("node2")).add(newNode("node3")).add(newNode("node4"))).build()__        _        clusterState = allocationService.reroute(clusterState, "reroute")__        _        clusterState = allocationService.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING))__        _        clusterState = allocationService.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING))__        assertThat("all shards should be started", clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(4))___        _        ShardRouting shortDelayReplica = null__        for (ShardRouting shardRouting : clusterState.getRoutingTable().allShards("short_delay")) {_            if (shardRouting.primary() == false) {_                shortDelayReplica = shardRouting__                break__            }_        }_        assertNotNull(shortDelayReplica)___        _        ShardRouting longDelayReplica = null__        for (ShardRouting shardRouting : clusterState.getRoutingTable().allShards("long_delay")) {_            if (shardRouting.primary() == false) {_                longDelayReplica = shardRouting__                break__            }_        }_        assertNotNull(longDelayReplica)___        final long baseTimestampNanos = System.nanoTime()___        _        ClusterState clusterStateBeforeNodeLeft = clusterState__        clusterState = ClusterState.builder(clusterState)_            .nodes(DiscoveryNodes.builder(clusterState.nodes())_                .remove(shortDelayReplica.currentNodeId())_                .remove(longDelayReplica.currentNodeId()))_            .build()__        _        allocationService.setNanoTimeOverride(baseTimestampNanos)__        clusterState = allocationService.disassociateDeadNodes(clusterState, true, "reroute")__        final ClusterState stateWithDelayedShards = clusterState__        assertEquals(2, UnassignedInfo.getNumberOfDelayedUnassigned(stateWithDelayedShards))__        RoutingNodes.UnassignedShards.UnassignedIterator iter = stateWithDelayedShards.getRoutingNodes().unassigned().iterator()__        assertEquals(baseTimestampNanos, iter.next().unassignedInfo().getUnassignedTimeInNanos())__        assertEquals(baseTimestampNanos, iter.next().unassignedInfo().getUnassignedTimeInNanos())___        _        CountDownLatch latch1 = new CountDownLatch(1)__        AtomicReference<ClusterStateUpdateTask> clusterStateUpdateTask1 = new AtomicReference<>()__        doAnswer(invocationOnMock -> {_            clusterStateUpdateTask1.set((ClusterStateUpdateTask)invocationOnMock.getArguments()[1])__            latch1.countDown()__            return null__        }).when(clusterService).submitStateUpdateTask(eq(CLUSTER_UPDATE_TASK_SOURCE), any(ClusterStateUpdateTask.class))__        assertNull(delayedAllocationService.delayedRerouteTask.get())__        long delayUntilClusterChangeEvent = TimeValue.timeValueNanos(randomInt((int)shortDelaySetting.nanos() - 1)).nanos()__        long clusterChangeEventTimestampNanos = baseTimestampNanos + delayUntilClusterChangeEvent__        delayedAllocationService.setNanoTimeOverride(clusterChangeEventTimestampNanos)__        delayedAllocationService.clusterChanged(_            new ClusterChangedEvent("fake node left", stateWithDelayedShards, clusterStateBeforeNodeLeft))___        _        DelayedAllocationService.DelayedRerouteTask firstDelayedRerouteTask = delayedAllocationService.delayedRerouteTask.get()__        assertNotNull(firstDelayedRerouteTask)__        assertFalse(firstDelayedRerouteTask.cancelScheduling.get())__        assertThat(firstDelayedRerouteTask.baseTimestampNanos, equalTo(clusterChangeEventTimestampNanos))__        assertThat(firstDelayedRerouteTask.nextDelay.nanos(),_            equalTo(UnassignedInfo.findNextDelayedAllocation(clusterChangeEventTimestampNanos, stateWithDelayedShards)))__        assertThat(firstDelayedRerouteTask.nextDelay.nanos(),_            equalTo(shortDelaySetting.nanos() - (clusterChangeEventTimestampNanos - baseTimestampNanos)))___        _        assertTrue(latch1.await(30, TimeUnit.SECONDS))__        verify(clusterService).submitStateUpdateTask(eq(CLUSTER_UPDATE_TASK_SOURCE), eq(clusterStateUpdateTask1.get()))___        _        long nanoTimeForReroute = clusterChangeEventTimestampNanos + shortDelaySetting.nanos() + timeValueMillis(randomInt(50)).nanos()__        allocationService.setNanoTimeOverride(nanoTimeForReroute)__        _        ClusterState stateWithOnlyOneDelayedShard = clusterStateUpdateTask1.get().execute(stateWithDelayedShards)__        _        assertEquals(1, UnassignedInfo.getNumberOfDelayedUnassigned(stateWithOnlyOneDelayedShard))__        _        assertNull(delayedAllocationService.delayedRerouteTask.get())___        _        CountDownLatch latch2 = new CountDownLatch(1)__        AtomicReference<ClusterStateUpdateTask> clusterStateUpdateTask2 = new AtomicReference<>()__        doAnswer(invocationOnMock -> {_            clusterStateUpdateTask2.set((ClusterStateUpdateTask)invocationOnMock.getArguments()[1])__            latch2.countDown()__            return null__        }).when(clusterService).submitStateUpdateTask(eq(CLUSTER_UPDATE_TASK_SOURCE), any(ClusterStateUpdateTask.class))__        _        delayUntilClusterChangeEvent = timeValueMillis(randomInt(50)).nanos()__        clusterChangeEventTimestampNanos = nanoTimeForReroute + delayUntilClusterChangeEvent__        delayedAllocationService.setNanoTimeOverride(clusterChangeEventTimestampNanos)__        delayedAllocationService.clusterChanged(_            new ClusterChangedEvent(CLUSTER_UPDATE_TASK_SOURCE, stateWithOnlyOneDelayedShard, stateWithDelayedShards))___        _        DelayedAllocationService.DelayedRerouteTask secondDelayedRerouteTask = delayedAllocationService.delayedRerouteTask.get()__        assertNotNull(secondDelayedRerouteTask)__        assertFalse(secondDelayedRerouteTask.cancelScheduling.get())__        assertThat(secondDelayedRerouteTask.baseTimestampNanos, equalTo(clusterChangeEventTimestampNanos))__        assertThat(secondDelayedRerouteTask.nextDelay.nanos(),_            equalTo(UnassignedInfo.findNextDelayedAllocation(clusterChangeEventTimestampNanos, stateWithOnlyOneDelayedShard)))__        assertThat(secondDelayedRerouteTask.nextDelay.nanos(),_            equalTo(longDelaySetting.nanos() - (clusterChangeEventTimestampNanos - baseTimestampNanos)))___        _        assertTrue(latch2.await(30, TimeUnit.SECONDS))__        verify(clusterService).submitStateUpdateTask(eq(CLUSTER_UPDATE_TASK_SOURCE), eq(clusterStateUpdateTask2.get()))___        _        nanoTimeForReroute = clusterChangeEventTimestampNanos + longDelaySetting.nanos() + timeValueMillis(randomInt(50)).nanos()__        allocationService.setNanoTimeOverride(nanoTimeForReroute)__        _        ClusterState stateWithNoDelayedShards = clusterStateUpdateTask2.get().execute(stateWithOnlyOneDelayedShard)__        _        assertEquals(0, UnassignedInfo.getNumberOfDelayedUnassigned(stateWithNoDelayedShards))__        _        assertNull(delayedAllocationService.delayedRerouteTask.get())___        _        delayedAllocationService.setNanoTimeOverride(nanoTimeForReroute + timeValueMillis(randomInt(50)).nanos())__        delayedAllocationService.clusterChanged(_            new ClusterChangedEvent(CLUSTER_UPDATE_TASK_SOURCE, stateWithNoDelayedShards, stateWithOnlyOneDelayedShard))__        _        assertNull(delayedAllocationService.delayedRerouteTask.get())__        _        verifyNoMoreInteractions(clusterService)__    };this,tests,that,a,new,delayed,reroute,is,scheduled,right,after,a,delayed,reroute,was,run;public,void,test,delayed,unassigned,schedule,reroute,after,delayed,reroute,throws,exception,time,value,short,delay,setting,time,value,millis,100,time,value,long,delay,setting,time,value,time,value,seconds,1,meta,data,meta,data,meta,data,builder,put,index,meta,data,builder,settings,settings,version,current,put,unassigned,info,get,key,short,delay,setting,number,of,shards,1,number,of,replicas,1,put,index,meta,data,builder,settings,settings,version,current,put,unassigned,info,get,key,long,delay,setting,number,of,shards,1,number,of,replicas,1,build,cluster,state,cluster,state,cluster,state,builder,cluster,name,get,default,settings,empty,meta,data,meta,data,routing,table,routing,table,builder,add,as,new,meta,data,index,add,as,new,meta,data,index,build,nodes,discovery,nodes,builder,add,new,node,node0,singleton,discovery,node,role,master,local,node,id,node0,master,node,id,node0,add,new,node,node1,add,new,node,node2,add,new,node,node3,add,new,node,node4,build,cluster,state,allocation,service,reroute,cluster,state,reroute,cluster,state,allocation,service,apply,started,shards,cluster,state,cluster,state,get,routing,nodes,shards,with,state,initializing,cluster,state,allocation,service,apply,started,shards,cluster,state,cluster,state,get,routing,nodes,shards,with,state,initializing,assert,that,all,shards,should,be,started,cluster,state,get,routing,nodes,shards,with,state,started,size,equal,to,4,shard,routing,short,delay,replica,null,for,shard,routing,shard,routing,cluster,state,get,routing,table,all,shards,if,shard,routing,primary,false,short,delay,replica,shard,routing,break,assert,not,null,short,delay,replica,shard,routing,long,delay,replica,null,for,shard,routing,shard,routing,cluster,state,get,routing,table,all,shards,if,shard,routing,primary,false,long,delay,replica,shard,routing,break,assert,not,null,long,delay,replica,final,long,base,timestamp,nanos,system,nano,time,cluster,state,cluster,state,before,node,left,cluster,state,cluster,state,cluster,state,builder,cluster,state,nodes,discovery,nodes,builder,cluster,state,nodes,remove,short,delay,replica,current,node,id,remove,long,delay,replica,current,node,id,build,allocation,service,set,nano,time,override,base,timestamp,nanos,cluster,state,allocation,service,disassociate,dead,nodes,cluster,state,true,reroute,final,cluster,state,state,with,delayed,shards,cluster,state,assert,equals,2,unassigned,info,get,number,of,delayed,unassigned,state,with,delayed,shards,routing,nodes,unassigned,shards,unassigned,iterator,iter,state,with,delayed,shards,get,routing,nodes,unassigned,iterator,assert,equals,base,timestamp,nanos,iter,next,unassigned,info,get,unassigned,time,in,nanos,assert,equals,base,timestamp,nanos,iter,next,unassigned,info,get,unassigned,time,in,nanos,count,down,latch,latch1,new,count,down,latch,1,atomic,reference,cluster,state,update,task,cluster,state,update,task1,new,atomic,reference,do,answer,invocation,on,mock,cluster,state,update,task1,set,cluster,state,update,task,invocation,on,mock,get,arguments,1,latch1,count,down,return,null,when,cluster,service,submit,state,update,task,eq,any,cluster,state,update,task,class,assert,null,delayed,allocation,service,delayed,reroute,task,get,long,delay,until,cluster,change,event,time,value,time,value,nanos,random,int,int,short,delay,setting,nanos,1,nanos,long,cluster,change,event,timestamp,nanos,base,timestamp,nanos,delay,until,cluster,change,event,delayed,allocation,service,set,nano,time,override,cluster,change,event,timestamp,nanos,delayed,allocation,service,cluster,changed,new,cluster,changed,event,fake,node,left,state,with,delayed,shards,cluster,state,before,node,left,delayed,allocation,service,delayed,reroute,task,first,delayed,reroute,task,delayed,allocation,service,delayed,reroute,task,get,assert,not,null,first,delayed,reroute,task,assert,false,first,delayed,reroute,task,cancel,scheduling,get,assert,that,first,delayed,reroute,task,base,timestamp,nanos,equal,to,cluster,change,event,timestamp,nanos,assert,that,first,delayed,reroute,task,next,delay,nanos,equal,to,unassigned,info,find,next,delayed,allocation,cluster,change,event,timestamp,nanos,state,with,delayed,shards,assert,that,first,delayed,reroute,task,next,delay,nanos,equal,to,short,delay,setting,nanos,cluster,change,event,timestamp,nanos,base,timestamp,nanos,assert,true,latch1,await,30,time,unit,seconds,verify,cluster,service,submit,state,update,task,eq,eq,cluster,state,update,task1,get,long,nano,time,for,reroute,cluster,change,event,timestamp,nanos,short,delay,setting,nanos,time,value,millis,random,int,50,nanos,allocation,service,set,nano,time,override,nano,time,for,reroute,cluster,state,state,with,only,one,delayed,shard,cluster,state,update,task1,get,execute,state,with,delayed,shards,assert,equals,1,unassigned,info,get,number,of,delayed,unassigned,state,with,only,one,delayed,shard,assert,null,delayed,allocation,service,delayed,reroute,task,get,count,down,latch,latch2,new,count,down,latch,1,atomic,reference,cluster,state,update,task,cluster,state,update,task2,new,atomic,reference,do,answer,invocation,on,mock,cluster,state,update,task2,set,cluster,state,update,task,invocation,on,mock,get,arguments,1,latch2,count,down,return,null,when,cluster,service,submit,state,update,task,eq,any,cluster,state,update,task,class,delay,until,cluster,change,event,time,value,millis,random,int,50,nanos,cluster,change,event,timestamp,nanos,nano,time,for,reroute,delay,until,cluster,change,event,delayed,allocation,service,set,nano,time,override,cluster,change,event,timestamp,nanos,delayed,allocation,service,cluster,changed,new,cluster,changed,event,state,with,only,one,delayed,shard,state,with,delayed,shards,delayed,allocation,service,delayed,reroute,task,second,delayed,reroute,task,delayed,allocation,service,delayed,reroute,task,get,assert,not,null,second,delayed,reroute,task,assert,false,second,delayed,reroute,task,cancel,scheduling,get,assert,that,second,delayed,reroute,task,base,timestamp,nanos,equal,to,cluster,change,event,timestamp,nanos,assert,that,second,delayed,reroute,task,next,delay,nanos,equal,to,unassigned,info,find,next,delayed,allocation,cluster,change,event,timestamp,nanos,state,with,only,one,delayed,shard,assert,that,second,delayed,reroute,task,next,delay,nanos,equal,to,long,delay,setting,nanos,cluster,change,event,timestamp,nanos,base,timestamp,nanos,assert,true,latch2,await,30,time,unit,seconds,verify,cluster,service,submit,state,update,task,eq,eq,cluster,state,update,task2,get,nano,time,for,reroute,cluster,change,event,timestamp,nanos,long,delay,setting,nanos,time,value,millis,random,int,50,nanos,allocation,service,set,nano,time,override,nano,time,for,reroute,cluster,state,state,with,no,delayed,shards,cluster,state,update,task2,get,execute,state,with,only,one,delayed,shard,assert,equals,0,unassigned,info,get,number,of,delayed,unassigned,state,with,no,delayed,shards,assert,null,delayed,allocation,service,delayed,reroute,task,get,delayed,allocation,service,set,nano,time,override,nano,time,for,reroute,time,value,millis,random,int,50,nanos,delayed,allocation,service,cluster,changed,new,cluster,changed,event,state,with,no,delayed,shards,state,with,only,one,delayed,shard,assert,null,delayed,allocation,service,delayed,reroute,task,get,verify,no,more,interactions,cluster,service
