# id;timestamp;commentText;codeText;commentWords;codeWords
BoolQueryBuilderTests -> public void testTooManyQueriesInObject() throws IOException;1524684173;test that two queries in object throws error;public void testTooManyQueriesInObject() throws IOException {_        assumeFalse("Test only makes sense if XContent parser doesn't have strict duplicate checks enabled",_            XContent.isStrictDuplicateDetectionEnabled())__        String clauseType = randomFrom("must", "should", "must_not", "filter")__        _        String query = "{\n" +_                "  \"bool\": {\n" +_                "    \"" + clauseType + "\": {\n" +_                "      \"match\": {\n" +_                "        \"foo\": \"bar\"\n" +_                "      },\n" +_                "      \"match\": {\n" +_                "        \"baz\": \"buzz\"\n" +_                "      }\n" +_                "    }\n" +_                "  }\n" +_                "}"__        ParsingException ex = expectThrows(ParsingException.class, () -> parseQuery(query))__        assertEquals("[match] malformed query, expected [END_OBJECT] but found [FIELD_NAME]", ex.getMessage())__    };test,that,two,queries,in,object,throws,error;public,void,test,too,many,queries,in,object,throws,ioexception,assume,false,test,only,makes,sense,if,xcontent,parser,doesn,t,have,strict,duplicate,checks,enabled,xcontent,is,strict,duplicate,detection,enabled,string,clause,type,random,from,must,should,filter,string,query,n,bool,n,clause,type,n,match,n,foo,bar,n,n,match,n,baz,buzz,n,n,n,n,parsing,exception,ex,expect,throws,parsing,exception,class,parse,query,query,assert,equals,match,malformed,query,expected,but,found,ex,get,message
BoolQueryBuilderTests -> public void testTooManyQueriesInObject() throws IOException;1529916084;test that two queries in object throws error;public void testTooManyQueriesInObject() throws IOException {_        assumeFalse("Test only makes sense if XContent parser doesn't have strict duplicate checks enabled",_            XContent.isStrictDuplicateDetectionEnabled())__        String clauseType = randomFrom("must", "should", "must_not", "filter")__        _        String query = "{\n" +_                "  \"bool\": {\n" +_                "    \"" + clauseType + "\": {\n" +_                "      \"match\": {\n" +_                "        \"foo\": \"bar\"\n" +_                "      },\n" +_                "      \"match\": {\n" +_                "        \"baz\": \"buzz\"\n" +_                "      }\n" +_                "    }\n" +_                "  }\n" +_                "}"__        ParsingException ex = expectThrows(ParsingException.class, () -> parseQuery(query))__        assertEquals("[match] malformed query, expected [END_OBJECT] but found [FIELD_NAME]", ex.getMessage())__    };test,that,two,queries,in,object,throws,error;public,void,test,too,many,queries,in,object,throws,ioexception,assume,false,test,only,makes,sense,if,xcontent,parser,doesn,t,have,strict,duplicate,checks,enabled,xcontent,is,strict,duplicate,detection,enabled,string,clause,type,random,from,must,should,filter,string,query,n,bool,n,clause,type,n,match,n,foo,bar,n,n,match,n,baz,buzz,n,n,n,n,parsing,exception,ex,expect,throws,parsing,exception,class,parse,query,query,assert,equals,match,malformed,query,expected,but,found,ex,get,message
BoolQueryBuilderTests -> public void testUnknownQueryName() throws IOException;1524684173;test that unknown query names in the clauses throw an error;public void testUnknownQueryName() throws IOException {_        String query = "{\"bool\" : {\"must\" : { \"unknown_query\" : { } } } }"___        ParsingException ex = expectThrows(ParsingException.class, () -> parseQuery(query))__        assertEquals("no [query] registered for [unknown_query]", ex.getMessage())__    };test,that,unknown,query,names,in,the,clauses,throw,an,error;public,void,test,unknown,query,name,throws,ioexception,string,query,bool,must,parsing,exception,ex,expect,throws,parsing,exception,class,parse,query,query,assert,equals,no,query,registered,for,ex,get,message
BoolQueryBuilderTests -> public void testUnknownQueryName() throws IOException;1529916084;test that unknown query names in the clauses throw an error;public void testUnknownQueryName() throws IOException {_        String query = "{\"bool\" : {\"must\" : { \"unknown_query\" : { } } } }"___        ParsingException ex = expectThrows(ParsingException.class, () -> parseQuery(query))__        assertEquals("no [query] registered for [unknown_query]", ex.getMessage())__    };test,that,unknown,query,names,in,the,clauses,throw,an,error;public,void,test,unknown,query,name,throws,ioexception,string,query,bool,must,parsing,exception,ex,expect,throws,parsing,exception,class,parse,query,query,assert,equals,no,query,registered,for,ex,get,message
BoolQueryBuilderTests -> public void testUnknownQueryName() throws IOException;1539951844;test that unknown query names in the clauses throw an error;public void testUnknownQueryName() throws IOException {_        String query = "{\"bool\" : {\"must\" : { \"unknown_query\" : { } } } }"___        ParsingException ex = expectThrows(ParsingException.class, () -> parseQuery(query))__        assertEquals("no [query] registered for [unknown_query]", ex.getMessage())__    };test,that,unknown,query,names,in,the,clauses,throw,an,error;public,void,test,unknown,query,name,throws,ioexception,string,query,bool,must,parsing,exception,ex,expect,throws,parsing,exception,class,parse,query,query,assert,equals,no,query,registered,for,ex,get,message
BoolQueryBuilderTests -> public void testUnknownQueryName() throws IOException;1542697754;test that unknown query names in the clauses throw an error;public void testUnknownQueryName() throws IOException {_        String query = "{\"bool\" : {\"must\" : { \"unknown_query\" : { } } } }"___        ParsingException ex = expectThrows(ParsingException.class, () -> parseQuery(query))__        assertEquals("no [query] registered for [unknown_query]", ex.getMessage())__    };test,that,unknown,query,names,in,the,clauses,throw,an,error;public,void,test,unknown,query,name,throws,ioexception,string,query,bool,must,parsing,exception,ex,expect,throws,parsing,exception,class,parse,query,query,assert,equals,no,query,registered,for,ex,get,message
BoolQueryBuilderTests -> public void testUnknownQueryName() throws IOException;1543834151;test that unknown query names in the clauses throw an error;public void testUnknownQueryName() throws IOException {_        String query = "{\"bool\" : {\"must\" : { \"unknown_query\" : { } } } }"___        ParsingException ex = expectThrows(ParsingException.class, () -> parseQuery(query))__        assertEquals("no [query] registered for [unknown_query]", ex.getMessage())__    };test,that,unknown,query,names,in,the,clauses,throw,an,error;public,void,test,unknown,query,name,throws,ioexception,string,query,bool,must,parsing,exception,ex,expect,throws,parsing,exception,class,parse,query,query,assert,equals,no,query,registered,for,ex,get,message
