commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;public void testFromXContent() throws Exception {     ClearScrollRequest clearScrollRequest = new ClearScrollRequest().     if (randomBoolean()) {         // test that existing values get overridden         clearScrollRequest = createClearScrollRequest().     }     try (XContentParser parser = createParser(XContentFactory.jsonBuilder().startObject().array("scroll_id", "value_1", "value_2").endObject())) {         clearScrollRequest.fromXContent(parser).     }     assertThat(clearScrollRequest.scrollIds(), contains("value_1", "value_2")). }
false;public;0;14;;public void testFromXContentWithoutArray() throws Exception {     ClearScrollRequest clearScrollRequest = new ClearScrollRequest().     if (randomBoolean()) {         // test that existing values get overridden         clearScrollRequest = createClearScrollRequest().     }     try (XContentParser parser = createParser(XContentFactory.jsonBuilder().startObject().field("scroll_id", "value_1").endObject())) {         clearScrollRequest.fromXContent(parser).     }     assertThat(clearScrollRequest.scrollIds(), contains("value_1")). }
false;public;0;11;;public void testFromXContentWithUnknownParamThrowsException() throws Exception {     XContentParser invalidContent = createParser(XContentFactory.jsonBuilder().startObject().array("scroll_id", "value_1", "value_2").field("unknown", "keyword").endObject()).     ClearScrollRequest clearScrollRequest = new ClearScrollRequest().     Exception e = expectThrows(IllegalArgumentException.class, () -> clearScrollRequest.fromXContent(invalidContent)).     assertThat(e.getMessage(), startsWith("Unknown parameter [unknown]")). }
false;public;0;8;;public void testToXContent() throws IOException {     ClearScrollRequest clearScrollRequest = new ClearScrollRequest().     clearScrollRequest.addScrollId("SCROLL_ID").     try (XContentBuilder builder = JsonXContent.contentBuilder()) {         clearScrollRequest.toXContent(builder, ToXContent.EMPTY_PARAMS).         assertEquals("{\"scroll_id\":[\"SCROLL_ID\"]}", Strings.toString(builder)).     } }
false;public;0;12;;public void testFromAndToXContent() throws IOException {     XContentType xContentType = randomFrom(XContentType.values()).     ClearScrollRequest originalRequest = createClearScrollRequest().     BytesReference originalBytes = toShuffledXContent(originalRequest, xContentType, ToXContent.EMPTY_PARAMS, randomBoolean()).     ClearScrollRequest parsedRequest = new ClearScrollRequest().     try (XContentParser parser = createParser(xContentType.xContent(), originalBytes)) {         parsedRequest.fromXContent(parser).     }     assertEquals(originalRequest.scrollIds(), parsedRequest.scrollIds()).     BytesReference parsedBytes = XContentHelper.toXContent(parsedRequest, xContentType, randomBoolean()).     assertToXContentEquivalent(originalBytes, parsedBytes, xContentType). }
false;public,static;0;8;;public static ClearScrollRequest createClearScrollRequest() {     ClearScrollRequest clearScrollRequest = new ClearScrollRequest().     int numScrolls = randomIntBetween(1, 10).     for (int i = 0. i < numScrolls. i++) {         clearScrollRequest.addScrollId(randomAlphaOfLengthBetween(3, 10)).     }     return clearScrollRequest. }
