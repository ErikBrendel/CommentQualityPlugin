commented;modifiers;parameterAmount;loc;comment;code
false;public;0;43;;public void testSameHost() {     AllocationService strategy = createAllocationService(Settings.builder().put(SameShardAllocationDecider.CLUSTER_ROUTING_ALLOCATION_SAME_HOST_SETTING.getKey(), true).build()).     MetaData metaData = MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(2).numberOfReplicas(1)).build().     RoutingTable routingTable = RoutingTable.builder().addAsNew(metaData.index("test")).build().     ClusterState clusterState = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(routingTable).build().     logger.info("--> adding two nodes with the same host").     clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(new DiscoveryNode("node1", "node1", "node1", "test1", "test1", buildNewFakeTransportAddress(), emptyMap(), MASTER_DATA_ROLES, Version.CURRENT)).add(new DiscoveryNode("node2", "node2", "node2", "test1", "test1", buildNewFakeTransportAddress(), emptyMap(), MASTER_DATA_ROLES, Version.CURRENT))).build().     clusterState = strategy.reroute(clusterState, "reroute").     assertThat(numberOfShardsOfType(clusterState.getRoutingNodes(), ShardRoutingState.INITIALIZING), equalTo(2)).     logger.info("--> start all primary shards, no replica will be started since its on the same host").     clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING)).     assertThat(numberOfShardsOfType(clusterState.getRoutingNodes(), ShardRoutingState.STARTED), equalTo(2)).     assertThat(numberOfShardsOfType(clusterState.getRoutingNodes(), ShardRoutingState.INITIALIZING), equalTo(0)).     logger.info("--> add another node, with a different host, replicas will be allocating").     clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).add(new DiscoveryNode("node3", "node3", "node3", "test2", "test2", buildNewFakeTransportAddress(), emptyMap(), MASTER_DATA_ROLES, Version.CURRENT))).build().     clusterState = strategy.reroute(clusterState, "reroute").     assertThat(numberOfShardsOfType(clusterState.getRoutingNodes(), ShardRoutingState.STARTED), equalTo(2)).     assertThat(numberOfShardsOfType(clusterState.getRoutingNodes(), ShardRoutingState.INITIALIZING), equalTo(2)).     for (ShardRouting shardRouting : clusterState.getRoutingNodes().shardsWithState(INITIALIZING)) {         assertThat(shardRouting.currentNodeId(), equalTo("node3")).     } }
false;public;0;26;;public void testForceAllocatePrimaryOnSameNodeNotAllowed() {     SameShardAllocationDecider decider = new SameShardAllocationDecider(Settings.EMPTY, new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)).     ClusterState clusterState = ClusterStateCreationUtils.state("idx", randomIntBetween(2, 4), 1).     Index index = clusterState.getMetaData().index("idx").getIndex().     ShardRouting primaryShard = clusterState.routingTable().index(index).shard(0).primaryShard().     RoutingNode routingNode = clusterState.getRoutingNodes().node(primaryShard.currentNodeId()).     RoutingAllocation routingAllocation = new RoutingAllocation(new AllocationDeciders(Collections.emptyList()), new RoutingNodes(clusterState, false), clusterState, ClusterInfo.EMPTY, System.nanoTime()).     // can't force allocate same shard copy to the same node     ShardRouting newPrimary = TestShardRouting.newShardRouting(primaryShard.shardId(), null, true, ShardRoutingState.UNASSIGNED).     Decision decision = decider.canForceAllocatePrimary(newPrimary, routingNode, routingAllocation).     assertEquals(Decision.Type.NO, decision.type()).     // can force allocate to a different node     RoutingNode unassignedNode = null.     for (RoutingNode node : clusterState.getRoutingNodes()) {         if (node.isEmpty()) {             unassignedNode = node.             break.         }     }     decision = decider.canForceAllocatePrimary(newPrimary, unassignedNode, routingAllocation).     assertEquals(Decision.Type.YES, decision.type()). }
