commented;modifiers;parameterAmount;loc;comment;code
false;public;0;37;;public void testIndexingWithNoContexts() throws Exception {     XContentBuilder mapping = jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("completion").field("type", "completion").startArray("contexts").startObject().field("name", "ctx").field("type", "geo").endObject().endArray().endObject().endObject().endObject().endObject().     MapperService mapperService = createIndex("test", Settings.EMPTY, "type1", mapping).mapperService().     MappedFieldType completionFieldType = mapperService.fullName("completion").     ParsedDocument parsedDocument = mapperService.documentMapper().parse(new SourceToParse("test", "type1", "1", BytesReference.bytes(jsonBuilder().startObject().startArray("completion").startObject().array("input", "suggestion1", "suggestion2").field("weight", 3).endObject().startObject().array("input", "suggestion3", "suggestion4").field("weight", 4).endObject().startObject().array("input", "suggestion5", "suggestion6", "suggestion7").field("weight", 5).endObject().endArray().endObject()), XContentType.JSON)).     IndexableField[] fields = parsedDocument.rootDoc().getFields(completionFieldType.name()).     assertContextSuggestFields(fields, 7). }
false;public;0;36;;public void testIndexingWithSimpleContexts() throws Exception {     XContentBuilder mapping = jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("completion").field("type", "completion").startArray("contexts").startObject().field("name", "ctx").field("type", "geo").endObject().endArray().endObject().endObject().endObject().endObject().     MapperService mapperService = createIndex("test", Settings.EMPTY, "type1", mapping).mapperService().     MappedFieldType completionFieldType = mapperService.fullName("completion").     ParsedDocument parsedDocument = mapperService.documentMapper().parse(new SourceToParse("test", "type1", "1", BytesReference.bytes(jsonBuilder().startObject().startArray("completion").startObject().array("input", "suggestion5", "suggestion6", "suggestion7").startObject("contexts").startObject("ctx").field("lat", 43.6624803).field("lon", -79.3863353).endObject().endObject().field("weight", 5).endObject().endArray().endObject()), XContentType.JSON)).     IndexableField[] fields = parsedDocument.rootDoc().getFields(completionFieldType.name()).     assertContextSuggestFields(fields, 3). }
false;public;0;39;;public void testIndexingWithContextList() throws Exception {     XContentBuilder mapping = jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("completion").field("type", "completion").startArray("contexts").startObject().field("name", "ctx").field("type", "geo").endObject().endArray().endObject().endObject().endObject().endObject().     MapperService mapperService = createIndex("test", Settings.EMPTY, "type1", mapping).mapperService().     MappedFieldType completionFieldType = mapperService.fullName("completion").     ParsedDocument parsedDocument = mapperService.documentMapper().parse(new SourceToParse("test", "type1", "1", BytesReference.bytes(jsonBuilder().startObject().startObject("completion").array("input", "suggestion5", "suggestion6", "suggestion7").startObject("contexts").startArray("ctx").startObject().field("lat", 43.6624803).field("lon", -79.3863353).endObject().startObject().field("lat", 43.6624718).field("lon", -79.3873227).endObject().endArray().endObject().field("weight", 5).endObject().endObject()), XContentType.JSON)).     IndexableField[] fields = parsedDocument.rootDoc().getFields(completionFieldType.name()).     assertContextSuggestFields(fields, 3). }
false;public;0;37;;public void testIndexingWithMultipleContexts() throws Exception {     XContentBuilder mapping = jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("completion").field("type", "completion").startArray("contexts").startObject().field("name", "loc1").field("type", "geo").endObject().startObject().field("name", "loc2").field("type", "geo").endObject().endArray().endObject().endObject().endObject().endObject().     MapperService mapperService = createIndex("test", Settings.EMPTY, "type1", mapping).mapperService().     MappedFieldType completionFieldType = mapperService.fullName("completion").     XContentBuilder builder = jsonBuilder().startObject().startArray("completion").startObject().array("input", "suggestion5", "suggestion6", "suggestion7").field("weight", 5).startObject("contexts").array("loc1", "ezs42e44yx96").array("loc2", "wh0n9447fwrc").endObject().endObject().endArray().endObject().     ParsedDocument parsedDocument = mapperService.documentMapper().parse(new SourceToParse("test", "type1", "1", BytesReference.bytes(builder), XContentType.JSON)).     IndexableField[] fields = parsedDocument.rootDoc().getFields(completionFieldType.name()).     assertContextSuggestFields(fields, 3). }
false;public;0;33;;public void testMalformedGeoField() throws Exception {     XContentBuilder mapping = jsonBuilder().     mapping.startObject().     mapping.startObject("type1").     mapping.startObject("properties").     mapping.startObject("pin").     String type = randomFrom("text", "keyword", "long").     mapping.field("type", type).     mapping.endObject().     mapping.startObject("suggestion").     mapping.field("type", "completion").     mapping.field("analyzer", "simple").     mapping.startArray("contexts").     mapping.startObject().     mapping.field("name", "st").     mapping.field("type", "geo").     mapping.field("path", "pin").     mapping.field("precision", 5).     mapping.endObject().     mapping.endArray().     mapping.endObject().     mapping.endObject().     mapping.endObject().     mapping.endObject().     ElasticsearchParseException ex = expectThrows(ElasticsearchParseException.class, () -> createIndex("test", Settings.EMPTY, "type1", mapping)).     assertThat(ex.getMessage(), equalTo("field [pin] referenced in context [st] must be mapped to geo_point, found [" + type + "]")). }
false;public;0;29;;public void testMissingGeoField() throws Exception {     XContentBuilder mapping = jsonBuilder().     mapping.startObject().     mapping.startObject("type1").     mapping.startObject("properties").     mapping.startObject("suggestion").     mapping.field("type", "completion").     mapping.field("analyzer", "simple").     mapping.startArray("contexts").     mapping.startObject().     mapping.field("name", "st").     mapping.field("type", "geo").     mapping.field("path", "pin").     mapping.field("precision", 5).     mapping.endObject().     mapping.endArray().     mapping.endObject().     mapping.endObject().     mapping.endObject().     mapping.endObject().     ElasticsearchParseException ex = expectThrows(ElasticsearchParseException.class, () -> createIndex("test", Settings.EMPTY, "type1", mapping)).     assertThat(ex.getMessage(), equalTo("field [pin] referenced in context [st] is not defined in the mapping")). }
false;public;0;15;;public void testParsingQueryContextBasic() throws Exception {     XContentBuilder builder = jsonBuilder().value("ezs42e44yx96").     XContentParser parser = createParser(JsonXContent.jsonXContent, BytesReference.bytes(builder)).     GeoContextMapping mapping = ContextBuilder.geo("geo").build().     List<ContextMapping.InternalQueryContext> internalQueryContexts = mapping.parseQueryContext(parser).     assertThat(internalQueryContexts.size(), equalTo(1 + 8)).     Collection<String> locations = new ArrayList<>().     locations.add("ezs42e").     addNeighbors("ezs42e", GeoContextMapping.DEFAULT_PRECISION, locations).     for (ContextMapping.InternalQueryContext internalQueryContext : internalQueryContexts) {         assertThat(internalQueryContext.context, isIn(locations)).         assertThat(internalQueryContext.boost, equalTo(1)).         assertThat(internalQueryContext.isPrefix, equalTo(false)).     } }
false;public;0;18;;public void testParsingQueryContextGeoPoint() throws Exception {     XContentBuilder builder = jsonBuilder().startObject().field("lat", 23.654242).field("lon", 90.047153).endObject().     XContentParser parser = createParser(JsonXContent.jsonXContent, BytesReference.bytes(builder)).     GeoContextMapping mapping = ContextBuilder.geo("geo").build().     List<ContextMapping.InternalQueryContext> internalQueryContexts = mapping.parseQueryContext(parser).     assertThat(internalQueryContexts.size(), equalTo(1 + 8)).     Collection<String> locations = new ArrayList<>().     locations.add("wh0n94").     addNeighbors("wh0n94", GeoContextMapping.DEFAULT_PRECISION, locations).     for (ContextMapping.InternalQueryContext internalQueryContext : internalQueryContexts) {         assertThat(internalQueryContext.context, isIn(locations)).         assertThat(internalQueryContext.boost, equalTo(1)).         assertThat(internalQueryContext.isPrefix, equalTo(false)).     } }
false;public;0;27;;public void testParsingQueryContextObject() throws Exception {     XContentBuilder builder = jsonBuilder().startObject().startObject("context").field("lat", 23.654242).field("lon", 90.047153).endObject().field("boost", 10).array("neighbours", 1, 2, 3).endObject().     XContentParser parser = createParser(JsonXContent.jsonXContent, BytesReference.bytes(builder)).     GeoContextMapping mapping = ContextBuilder.geo("geo").build().     List<ContextMapping.InternalQueryContext> internalQueryContexts = mapping.parseQueryContext(parser).     assertThat(internalQueryContexts.size(), equalTo(1 + 1 + 8 + 1 + 8 + 1 + 8)).     Collection<String> locations = new ArrayList<>().     locations.add("wh0n94").     locations.add("w").     addNeighbors("w", 1, locations).     locations.add("wh").     addNeighbors("wh", 2, locations).     locations.add("wh0").     addNeighbors("wh0", 3, locations).     for (ContextMapping.InternalQueryContext internalQueryContext : internalQueryContexts) {         assertThat(internalQueryContext.context, isIn(locations)).         assertThat(internalQueryContext.boost, equalTo(10)).         assertThat(internalQueryContext.isPrefix, equalTo(internalQueryContext.context.length() < GeoContextMapping.DEFAULT_PRECISION)).     } }
false;public;0;46;;public void testParsingQueryContextObjectArray() throws Exception {     XContentBuilder builder = jsonBuilder().startArray().startObject().startObject("context").field("lat", 23.654242).field("lon", 90.047153).endObject().field("boost", 10).array("neighbours", 1, 2, 3).endObject().startObject().startObject("context").field("lat", 22.337374).field("lon", 92.112583).endObject().field("boost", 2).array("neighbours", 5).endObject().endArray().     XContentParser parser = createParser(JsonXContent.jsonXContent, BytesReference.bytes(builder)).     GeoContextMapping mapping = ContextBuilder.geo("geo").build().     List<ContextMapping.InternalQueryContext> internalQueryContexts = mapping.parseQueryContext(parser).     assertThat(internalQueryContexts.size(), equalTo(1 + 1 + 8 + 1 + 8 + 1 + 8 + 1 + 1 + 8)).     Collection<String> firstLocations = new ArrayList<>().     firstLocations.add("wh0n94").     firstLocations.add("w").     addNeighbors("w", 1, firstLocations).     firstLocations.add("wh").     addNeighbors("wh", 2, firstLocations).     firstLocations.add("wh0").     addNeighbors("wh0", 3, firstLocations).     Collection<String> secondLocations = new ArrayList<>().     secondLocations.add("w5cx04").     secondLocations.add("w5cx0").     addNeighbors("w5cx0", 5, secondLocations).     for (ContextMapping.InternalQueryContext internalQueryContext : internalQueryContexts) {         if (firstLocations.contains(internalQueryContext.context)) {             assertThat(internalQueryContext.boost, equalTo(10)).         } else if (secondLocations.contains(internalQueryContext.context)) {             assertThat(internalQueryContext.boost, equalTo(2)).         } else {             fail(internalQueryContext.context + " was not expected").         }         assertThat(internalQueryContext.isPrefix, equalTo(internalQueryContext.context.length() < GeoContextMapping.DEFAULT_PRECISION)).     } }
false;public;0;39;;public void testParsingQueryContextMixed() throws Exception {     XContentBuilder builder = jsonBuilder().startArray().startObject().startObject("context").field("lat", 23.654242).field("lon", 90.047153).endObject().field("boost", 10).array("neighbours", 1, 2).endObject().startObject().field("lat", 22.337374).field("lon", 92.112583).endObject().endArray().     XContentParser parser = createParser(JsonXContent.jsonXContent, BytesReference.bytes(builder)).     GeoContextMapping mapping = ContextBuilder.geo("geo").build().     List<ContextMapping.InternalQueryContext> internalQueryContexts = mapping.parseQueryContext(parser).     assertThat(internalQueryContexts.size(), equalTo(1 + 1 + 8 + 1 + 8 + 1 + 8)).     Collection<String> firstLocations = new ArrayList<>().     firstLocations.add("wh0n94").     firstLocations.add("w").     addNeighbors("w", 1, firstLocations).     firstLocations.add("wh").     addNeighbors("wh", 2, firstLocations).     Collection<String> secondLocations = new ArrayList<>().     secondLocations.add("w5cx04").     addNeighbors("w5cx04", 6, secondLocations).     for (ContextMapping.InternalQueryContext internalQueryContext : internalQueryContexts) {         if (firstLocations.contains(internalQueryContext.context)) {             assertThat(internalQueryContext.boost, equalTo(10)).         } else if (secondLocations.contains(internalQueryContext.context)) {             assertThat(internalQueryContext.boost, equalTo(1)).         } else {             fail(internalQueryContext.context + " was not expected").         }         assertThat(internalQueryContext.isPrefix, equalTo(internalQueryContext.context.length() < GeoContextMapping.DEFAULT_PRECISION)).     } }
