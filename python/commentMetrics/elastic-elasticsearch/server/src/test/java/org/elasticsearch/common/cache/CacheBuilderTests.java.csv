commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;public void testSettingExpireAfterAccess() {     IllegalArgumentException iae = expectThrows(IllegalArgumentException.class, () -> CacheBuilder.builder().setExpireAfterAccess(TimeValue.MINUS_ONE)).     assertThat(iae.getMessage(), containsString("expireAfterAccess <=")).     iae = expectThrows(IllegalArgumentException.class, () -> CacheBuilder.builder().setExpireAfterAccess(TimeValue.ZERO)).     assertThat(iae.getMessage(), containsString("expireAfterAccess <=")).     final TimeValue timeValue = TimeValue.parseTimeValue(randomPositiveTimeValue(), "").     Cache<Object, Object> cache = CacheBuilder.builder().setExpireAfterAccess(timeValue).build().     assertEquals(timeValue.getNanos(), cache.getExpireAfterAccessNanos()). }
false;public;0;10;;public void testSettingExpireAfterWrite() {     IllegalArgumentException iae = expectThrows(IllegalArgumentException.class, () -> CacheBuilder.builder().setExpireAfterWrite(TimeValue.MINUS_ONE)).     assertThat(iae.getMessage(), containsString("expireAfterWrite <=")).     iae = expectThrows(IllegalArgumentException.class, () -> CacheBuilder.builder().setExpireAfterWrite(TimeValue.ZERO)).     assertThat(iae.getMessage(), containsString("expireAfterWrite <=")).     final TimeValue timeValue = TimeValue.parseTimeValue(randomPositiveTimeValue(), "").     Cache<Object, Object> cache = CacheBuilder.builder().setExpireAfterWrite(timeValue).build().     assertEquals(timeValue.getNanos(), cache.getExpireAfterWriteNanos()). }
