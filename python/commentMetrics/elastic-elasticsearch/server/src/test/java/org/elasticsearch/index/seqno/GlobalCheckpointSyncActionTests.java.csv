commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;public void setUp() throws Exception {     super.setUp().     threadPool = new TestThreadPool(getClass().getName()).     transport = new CapturingTransport().     clusterService = createClusterService(threadPool).     transportService = transport.createTransportService(clusterService.getSettings(), threadPool, TransportService.NOOP_TRANSPORT_INTERCEPTOR, boundAddress -> clusterService.localNode(), null, Collections.emptySet()).     transportService.start().     transportService.acceptIncomingRequests().     shardStateAction = new ShardStateAction(clusterService, transportService, null, null, threadPool). }
false;public;0;8;;public void tearDown() throws Exception {     try {         IOUtils.close(transportService, clusterService, transport).     } finally {         terminate(threadPool).     }     super.tearDown(). }
false;public;0;52;;public void testTranslogSyncAfterGlobalCheckpointSync() throws Exception {     final IndicesService indicesService = mock(IndicesService.class).     final Index index = new Index("index", "uuid").     final IndexService indexService = mock(IndexService.class).     when(indicesService.indexServiceSafe(index)).thenReturn(indexService).     final int id = randomIntBetween(0, 4).     final IndexShard indexShard = mock(IndexShard.class).     when(indexService.getShard(id)).thenReturn(indexShard).     final ShardId shardId = new ShardId(index, id).     when(indexShard.shardId()).thenReturn(shardId).     final Translog.Durability durability = randomFrom(Translog.Durability.ASYNC, Translog.Durability.REQUEST).     when(indexShard.getTranslogDurability()).thenReturn(durability).     final long globalCheckpoint = randomIntBetween(Math.toIntExact(SequenceNumbers.NO_OPS_PERFORMED), Integer.MAX_VALUE).     final long lastSyncedGlobalCheckpoint.     if (randomBoolean() && globalCheckpoint != SequenceNumbers.NO_OPS_PERFORMED) {         lastSyncedGlobalCheckpoint = randomIntBetween(Math.toIntExact(SequenceNumbers.NO_OPS_PERFORMED), Math.toIntExact(globalCheckpoint) - 1).         assert lastSyncedGlobalCheckpoint < globalCheckpoint.     } else {         lastSyncedGlobalCheckpoint = globalCheckpoint.     }     when(indexShard.getGlobalCheckpoint()).thenReturn(globalCheckpoint).     when(indexShard.getLastSyncedGlobalCheckpoint()).thenReturn(lastSyncedGlobalCheckpoint).     final GlobalCheckpointSyncAction action = new GlobalCheckpointSyncAction(Settings.EMPTY, transportService, clusterService, indicesService, threadPool, shardStateAction, new ActionFilters(Collections.emptySet()), new IndexNameExpressionResolver()).     final GlobalCheckpointSyncAction.Request primaryRequest = new GlobalCheckpointSyncAction.Request(indexShard.shardId()).     if (randomBoolean()) {         action.shardOperationOnPrimary(primaryRequest, indexShard).     } else {         action.shardOperationOnReplica(new GlobalCheckpointSyncAction.Request(indexShard.shardId()), indexShard).     }     if (durability == Translog.Durability.ASYNC || lastSyncedGlobalCheckpoint == globalCheckpoint) {         verify(indexShard, never()).sync().     } else {         verify(indexShard).sync().     } }
