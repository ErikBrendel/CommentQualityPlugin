commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public ClusterState apply(ClusterState part) {     fail("this diff shouldn't be applied").     return part. }
false;public;1;4;;@Override public void writeTo(StreamOutput out) throws IOException {     throw new IOException("Simulated failure of diff serialization"). }
false;public;1;15;;@Override public Diff<ClusterState> diff(ClusterState previousState) {     return new Diff<ClusterState>() {          @Override         public ClusterState apply(ClusterState part) {             fail("this diff shouldn't be applied").             return part.         }          @Override         public void writeTo(StreamOutput out) throws IOException {             throw new IOException("Simulated failure of diff serialization").         }     }. }
false;public;0;45;;public void testDiffSerializationFailure() {     DeterministicTaskQueue deterministicTaskQueue = new DeterministicTaskQueue(Settings.builder().put(Node.NODE_NAME_SETTING.getKey(), "test").build(), random()).     final ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS).     final DiscoveryNode localNode = new DiscoveryNode("localNode", buildNewFakeTransportAddress(), Version.CURRENT).     final TransportService transportService = new CapturingTransport().createTransportService(Settings.EMPTY, deterministicTaskQueue.getThreadPool(), TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> localNode, clusterSettings, Collections.emptySet()).     final PublicationTransportHandler handler = new PublicationTransportHandler(transportService, writableRegistry(), pu -> null, (pu, l) -> {     }).     transportService.start().     transportService.acceptIncomingRequests().     final DiscoveryNode otherNode = new DiscoveryNode("otherNode", buildNewFakeTransportAddress(), Version.CURRENT).     final ClusterState clusterState = CoordinationStateTests.clusterState(2L, 1L, DiscoveryNodes.builder().add(localNode).add(otherNode).localNodeId(localNode.getId()).build(), VotingConfiguration.EMPTY_CONFIG, VotingConfiguration.EMPTY_CONFIG, 0L).     final ClusterState unserializableClusterState = new ClusterState(clusterState.version(), clusterState.stateUUID(), clusterState) {          @Override         public Diff<ClusterState> diff(ClusterState previousState) {             return new Diff<ClusterState>() {                  @Override                 public ClusterState apply(ClusterState part) {                     fail("this diff shouldn't be applied").                     return part.                 }                  @Override                 public void writeTo(StreamOutput out) throws IOException {                     throw new IOException("Simulated failure of diff serialization").                 }             }.         }     }.     ElasticsearchException e = expectThrows(ElasticsearchException.class, () -> handler.newPublicationContext(new ClusterChangedEvent("test", unserializableClusterState, clusterState))).     assertNotNull(e.getCause()).     assertThat(e.getCause(), instanceOf(IOException.class)).     assertThat(e.getCause().getMessage(), containsString("Simulated failure of diff serialization")). }
