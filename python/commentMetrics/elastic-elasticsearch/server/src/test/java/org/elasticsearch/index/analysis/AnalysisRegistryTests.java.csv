# id;timestamp;commentText;codeText;commentWords;codeWords
AnalysisRegistryTests -> public void testConfigureCamelCaseTokenFilter() throws IOException;1524684173;Tests that {@code camelCase} filter names and {@code snake_case} filter names don't collide.;public void testConfigureCamelCaseTokenFilter() throws IOException {_        Settings settings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).build()__        Settings indexSettings = Settings.builder()_                .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)_                .put("index.analysis.filter.testFilter.type", "mock")_                .put("index.analysis.filter.test_filter.type", "mock")_                .put("index.analysis.analyzer.custom_analyzer_with_camel_case.tokenizer", "standard")_                .putList("index.analysis.analyzer.custom_analyzer_with_camel_case.filter", "lowercase", "testFilter")_                .put("index.analysis.analyzer.custom_analyzer_with_snake_case.tokenizer", "standard")_                .putList("index.analysis.analyzer.custom_analyzer_with_snake_case.filter", "lowercase", "test_filter").build()___        IndexSettings idxSettings = IndexSettingsModule.newIndexSettings("index", indexSettings)___        _        AnalysisPlugin plugin = new AnalysisPlugin() {_            class MockFactory extends AbstractTokenFilterFactory {_                MockFactory(IndexSettings indexSettings, Environment env, String name, Settings settings) {_                    super(indexSettings, name, settings)__                }__                @Override_                public TokenStream create(TokenStream tokenStream) {_                    if (name().equals("test_filter")) {_                        return new MockTokenFilter(tokenStream, MockTokenFilter.EMPTY_STOPSET)__                    }_                    return new MockTokenFilter(tokenStream, MockTokenFilter.ENGLISH_STOPSET)__                }_            }__            @Override_            public Map<String, AnalysisProvider<TokenFilterFactory>> getTokenFilters() {_                return singletonMap("mock", MockFactory::new)__            }_        }__        IndexAnalyzers indexAnalyzers = new AnalysisModule(TestEnvironment.newEnvironment(settings),_                singletonList(plugin)).getAnalysisRegistry().build(idxSettings)___        _        try (NamedAnalyzer custom_analyser = indexAnalyzers.get("custom_analyzer_with_camel_case")) {_            assertNotNull(custom_analyser)__            TokenStream tokenStream = custom_analyser.tokenStream("foo", "has a foo")__            tokenStream.reset()__            CharTermAttribute charTermAttribute = tokenStream.addAttribute(CharTermAttribute.class)__            assertTrue(tokenStream.incrementToken())__            assertEquals("has", charTermAttribute.toString())__            assertTrue(tokenStream.incrementToken())__            assertEquals("foo", charTermAttribute.toString())__            assertFalse(tokenStream.incrementToken())__        }__        _        try (NamedAnalyzer custom_analyser = indexAnalyzers.get("custom_analyzer_with_snake_case")) {_            assertNotNull(custom_analyser)__            TokenStream tokenStream = custom_analyser.tokenStream("foo", "has a foo")__            tokenStream.reset()__            CharTermAttribute charTermAttribute = tokenStream.addAttribute(CharTermAttribute.class)__            assertTrue(tokenStream.incrementToken())__            assertEquals("has", charTermAttribute.toString())__            assertTrue(tokenStream.incrementToken())__            assertEquals("a", charTermAttribute.toString())__            assertTrue(tokenStream.incrementToken())__            assertEquals("foo", charTermAttribute.toString())__            assertFalse(tokenStream.incrementToken())__        }_    };tests,that,code,camel,case,filter,names,and,code,filter,names,don,t,collide;public,void,test,configure,camel,case,token,filter,throws,ioexception,settings,settings,settings,builder,put,environment,get,key,create,temp,dir,to,string,build,settings,index,settings,settings,builder,put,index,meta,data,version,current,put,index,analysis,filter,test,filter,type,mock,put,index,analysis,filter,type,mock,put,index,analysis,analyzer,tokenizer,standard,put,list,index,analysis,analyzer,filter,lowercase,test,filter,put,index,analysis,analyzer,tokenizer,standard,put,list,index,analysis,analyzer,filter,lowercase,build,index,settings,idx,settings,index,settings,module,new,index,settings,index,index,settings,analysis,plugin,plugin,new,analysis,plugin,class,mock,factory,extends,abstract,token,filter,factory,mock,factory,index,settings,index,settings,environment,env,string,name,settings,settings,super,index,settings,name,settings,override,public,token,stream,create,token,stream,token,stream,if,name,equals,return,new,mock,token,filter,token,stream,mock,token,filter,return,new,mock,token,filter,token,stream,mock,token,filter,override,public,map,string,analysis,provider,token,filter,factory,get,token,filters,return,singleton,map,mock,mock,factory,new,index,analyzers,index,analyzers,new,analysis,module,test,environment,new,environment,settings,singleton,list,plugin,get,analysis,registry,build,idx,settings,try,named,analyzer,index,analyzers,get,assert,not,null,token,stream,token,stream,token,stream,foo,has,a,foo,token,stream,reset,char,term,attribute,char,term,attribute,token,stream,add,attribute,char,term,attribute,class,assert,true,token,stream,increment,token,assert,equals,has,char,term,attribute,to,string,assert,true,token,stream,increment,token,assert,equals,foo,char,term,attribute,to,string,assert,false,token,stream,increment,token,try,named,analyzer,index,analyzers,get,assert,not,null,token,stream,token,stream,token,stream,foo,has,a,foo,token,stream,reset,char,term,attribute,char,term,attribute,token,stream,add,attribute,char,term,attribute,class,assert,true,token,stream,increment,token,assert,equals,has,char,term,attribute,to,string,assert,true,token,stream,increment,token,assert,equals,a,char,term,attribute,to,string,assert,true,token,stream,increment,token,assert,equals,foo,char,term,attribute,to,string,assert,false,token,stream,increment,token
AnalysisRegistryTests -> public void testConfigureCamelCaseTokenFilter() throws IOException;1528304883;Tests that {@code camelCase} filter names and {@code snake_case} filter names don't collide.;public void testConfigureCamelCaseTokenFilter() throws IOException {_        Settings settings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).build()__        Settings indexSettings = Settings.builder()_                .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)_                .put("index.analysis.filter.testFilter.type", "mock")_                .put("index.analysis.filter.test_filter.type", "mock")_                .put("index.analysis.analyzer.custom_analyzer_with_camel_case.tokenizer", "standard")_                .putList("index.analysis.analyzer.custom_analyzer_with_camel_case.filter", "lowercase", "testFilter")_                .put("index.analysis.analyzer.custom_analyzer_with_snake_case.tokenizer", "standard")_                .putList("index.analysis.analyzer.custom_analyzer_with_snake_case.filter", "lowercase", "test_filter").build()___        IndexSettings idxSettings = IndexSettingsModule.newIndexSettings("index", indexSettings)___        _        AnalysisPlugin plugin = new AnalysisPlugin() {_            class MockFactory extends AbstractTokenFilterFactory {_                MockFactory(IndexSettings indexSettings, Environment env, String name, Settings settings) {_                    super(indexSettings, name, settings)__                }__                @Override_                public TokenStream create(TokenStream tokenStream) {_                    if (name().equals("test_filter")) {_                        return new MockTokenFilter(tokenStream, MockTokenFilter.EMPTY_STOPSET)__                    }_                    return new MockTokenFilter(tokenStream, MockTokenFilter.ENGLISH_STOPSET)__                }_            }__            @Override_            public Map<String, AnalysisProvider<TokenFilterFactory>> getTokenFilters() {_                return singletonMap("mock", MockFactory::new)__            }_        }__        IndexAnalyzers indexAnalyzers = new AnalysisModule(TestEnvironment.newEnvironment(settings),_                singletonList(plugin)).getAnalysisRegistry().build(idxSettings)___        _        try (NamedAnalyzer custom_analyser = indexAnalyzers.get("custom_analyzer_with_camel_case")) {_            assertNotNull(custom_analyser)__            TokenStream tokenStream = custom_analyser.tokenStream("foo", "has a foo")__            tokenStream.reset()__            CharTermAttribute charTermAttribute = tokenStream.addAttribute(CharTermAttribute.class)__            assertTrue(tokenStream.incrementToken())__            assertEquals("has", charTermAttribute.toString())__            assertTrue(tokenStream.incrementToken())__            assertEquals("foo", charTermAttribute.toString())__            assertFalse(tokenStream.incrementToken())__        }__        _        try (NamedAnalyzer custom_analyser = indexAnalyzers.get("custom_analyzer_with_snake_case")) {_            assertNotNull(custom_analyser)__            TokenStream tokenStream = custom_analyser.tokenStream("foo", "has a foo")__            tokenStream.reset()__            CharTermAttribute charTermAttribute = tokenStream.addAttribute(CharTermAttribute.class)__            assertTrue(tokenStream.incrementToken())__            assertEquals("has", charTermAttribute.toString())__            assertTrue(tokenStream.incrementToken())__            assertEquals("a", charTermAttribute.toString())__            assertTrue(tokenStream.incrementToken())__            assertEquals("foo", charTermAttribute.toString())__            assertFalse(tokenStream.incrementToken())__        }_    };tests,that,code,camel,case,filter,names,and,code,filter,names,don,t,collide;public,void,test,configure,camel,case,token,filter,throws,ioexception,settings,settings,settings,builder,put,environment,get,key,create,temp,dir,to,string,build,settings,index,settings,settings,builder,put,index,meta,data,version,current,put,index,analysis,filter,test,filter,type,mock,put,index,analysis,filter,type,mock,put,index,analysis,analyzer,tokenizer,standard,put,list,index,analysis,analyzer,filter,lowercase,test,filter,put,index,analysis,analyzer,tokenizer,standard,put,list,index,analysis,analyzer,filter,lowercase,build,index,settings,idx,settings,index,settings,module,new,index,settings,index,index,settings,analysis,plugin,plugin,new,analysis,plugin,class,mock,factory,extends,abstract,token,filter,factory,mock,factory,index,settings,index,settings,environment,env,string,name,settings,settings,super,index,settings,name,settings,override,public,token,stream,create,token,stream,token,stream,if,name,equals,return,new,mock,token,filter,token,stream,mock,token,filter,return,new,mock,token,filter,token,stream,mock,token,filter,override,public,map,string,analysis,provider,token,filter,factory,get,token,filters,return,singleton,map,mock,mock,factory,new,index,analyzers,index,analyzers,new,analysis,module,test,environment,new,environment,settings,singleton,list,plugin,get,analysis,registry,build,idx,settings,try,named,analyzer,index,analyzers,get,assert,not,null,token,stream,token,stream,token,stream,foo,has,a,foo,token,stream,reset,char,term,attribute,char,term,attribute,token,stream,add,attribute,char,term,attribute,class,assert,true,token,stream,increment,token,assert,equals,has,char,term,attribute,to,string,assert,true,token,stream,increment,token,assert,equals,foo,char,term,attribute,to,string,assert,false,token,stream,increment,token,try,named,analyzer,index,analyzers,get,assert,not,null,token,stream,token,stream,token,stream,foo,has,a,foo,token,stream,reset,char,term,attribute,char,term,attribute,token,stream,add,attribute,char,term,attribute,class,assert,true,token,stream,increment,token,assert,equals,has,char,term,attribute,to,string,assert,true,token,stream,increment,token,assert,equals,a,char,term,attribute,to,string,assert,true,token,stream,increment,token,assert,equals,foo,char,term,attribute,to,string,assert,false,token,stream,increment,token
AnalysisRegistryTests -> public void testConfigureCamelCaseTokenFilter() throws IOException;1529487105;Tests that {@code camelCase} filter names and {@code snake_case} filter names don't collide.;public void testConfigureCamelCaseTokenFilter() throws IOException {_        Settings settings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).build()__        Settings indexSettings = Settings.builder()_                .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)_                .put("index.analysis.filter.testFilter.type", "mock")_                .put("index.analysis.filter.test_filter.type", "mock")_                .put("index.analysis.analyzer.custom_analyzer_with_camel_case.tokenizer", "standard")_                .putList("index.analysis.analyzer.custom_analyzer_with_camel_case.filter", "lowercase", "testFilter")_                .put("index.analysis.analyzer.custom_analyzer_with_snake_case.tokenizer", "standard")_                .putList("index.analysis.analyzer.custom_analyzer_with_snake_case.filter", "lowercase", "test_filter").build()___        IndexSettings idxSettings = IndexSettingsModule.newIndexSettings("index", indexSettings)___        _        AnalysisPlugin plugin = new AnalysisPlugin() {_            class MockFactory extends AbstractTokenFilterFactory {_                MockFactory(IndexSettings indexSettings, Environment env, String name, Settings settings) {_                    super(indexSettings, name, settings)__                }__                @Override_                public TokenStream create(TokenStream tokenStream) {_                    if (name().equals("test_filter")) {_                        return new MockTokenFilter(tokenStream, MockTokenFilter.EMPTY_STOPSET)__                    }_                    return new MockTokenFilter(tokenStream, MockTokenFilter.ENGLISH_STOPSET)__                }_            }__            @Override_            public Map<String, AnalysisProvider<TokenFilterFactory>> getTokenFilters() {_                return singletonMap("mock", MockFactory::new)__            }_        }__        IndexAnalyzers indexAnalyzers = new AnalysisModule(TestEnvironment.newEnvironment(settings),_                singletonList(plugin)).getAnalysisRegistry().build(idxSettings)___        _        try (NamedAnalyzer custom_analyser = indexAnalyzers.get("custom_analyzer_with_camel_case")) {_            assertNotNull(custom_analyser)__            TokenStream tokenStream = custom_analyser.tokenStream("foo", "has a foo")__            tokenStream.reset()__            CharTermAttribute charTermAttribute = tokenStream.addAttribute(CharTermAttribute.class)__            assertTrue(tokenStream.incrementToken())__            assertEquals("has", charTermAttribute.toString())__            assertTrue(tokenStream.incrementToken())__            assertEquals("foo", charTermAttribute.toString())__            assertFalse(tokenStream.incrementToken())__        }__        _        try (NamedAnalyzer custom_analyser = indexAnalyzers.get("custom_analyzer_with_snake_case")) {_            assertNotNull(custom_analyser)__            TokenStream tokenStream = custom_analyser.tokenStream("foo", "has a foo")__            tokenStream.reset()__            CharTermAttribute charTermAttribute = tokenStream.addAttribute(CharTermAttribute.class)__            assertTrue(tokenStream.incrementToken())__            assertEquals("has", charTermAttribute.toString())__            assertTrue(tokenStream.incrementToken())__            assertEquals("a", charTermAttribute.toString())__            assertTrue(tokenStream.incrementToken())__            assertEquals("foo", charTermAttribute.toString())__            assertFalse(tokenStream.incrementToken())__        }_    };tests,that,code,camel,case,filter,names,and,code,filter,names,don,t,collide;public,void,test,configure,camel,case,token,filter,throws,ioexception,settings,settings,settings,builder,put,environment,get,key,create,temp,dir,to,string,build,settings,index,settings,settings,builder,put,index,meta,data,version,current,put,index,analysis,filter,test,filter,type,mock,put,index,analysis,filter,type,mock,put,index,analysis,analyzer,tokenizer,standard,put,list,index,analysis,analyzer,filter,lowercase,test,filter,put,index,analysis,analyzer,tokenizer,standard,put,list,index,analysis,analyzer,filter,lowercase,build,index,settings,idx,settings,index,settings,module,new,index,settings,index,index,settings,analysis,plugin,plugin,new,analysis,plugin,class,mock,factory,extends,abstract,token,filter,factory,mock,factory,index,settings,index,settings,environment,env,string,name,settings,settings,super,index,settings,name,settings,override,public,token,stream,create,token,stream,token,stream,if,name,equals,return,new,mock,token,filter,token,stream,mock,token,filter,return,new,mock,token,filter,token,stream,mock,token,filter,override,public,map,string,analysis,provider,token,filter,factory,get,token,filters,return,singleton,map,mock,mock,factory,new,index,analyzers,index,analyzers,new,analysis,module,test,environment,new,environment,settings,singleton,list,plugin,get,analysis,registry,build,idx,settings,try,named,analyzer,index,analyzers,get,assert,not,null,token,stream,token,stream,token,stream,foo,has,a,foo,token,stream,reset,char,term,attribute,char,term,attribute,token,stream,add,attribute,char,term,attribute,class,assert,true,token,stream,increment,token,assert,equals,has,char,term,attribute,to,string,assert,true,token,stream,increment,token,assert,equals,foo,char,term,attribute,to,string,assert,false,token,stream,increment,token,try,named,analyzer,index,analyzers,get,assert,not,null,token,stream,token,stream,token,stream,foo,has,a,foo,token,stream,reset,char,term,attribute,char,term,attribute,token,stream,add,attribute,char,term,attribute,class,assert,true,token,stream,increment,token,assert,equals,has,char,term,attribute,to,string,assert,true,token,stream,increment,token,assert,equals,a,char,term,attribute,to,string,assert,true,token,stream,increment,token,assert,equals,foo,char,term,attribute,to,string,assert,false,token,stream,increment,token
AnalysisRegistryTests -> public void testConfigureCamelCaseTokenFilter() throws IOException;1535139672;Tests that {@code camelCase} filter names and {@code snake_case} filter names don't collide.;public void testConfigureCamelCaseTokenFilter() throws IOException {_        Settings settings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).build()__        Settings indexSettings = Settings.builder()_                .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)_                .put("index.analysis.filter.testFilter.type", "mock")_                .put("index.analysis.filter.test_filter.type", "mock")_                .put("index.analysis.analyzer.custom_analyzer_with_camel_case.tokenizer", "standard")_                .putList("index.analysis.analyzer.custom_analyzer_with_camel_case.filter", "lowercase", "testFilter")_                .put("index.analysis.analyzer.custom_analyzer_with_snake_case.tokenizer", "standard")_                .putList("index.analysis.analyzer.custom_analyzer_with_snake_case.filter", "lowercase", "test_filter").build()___        IndexSettings idxSettings = IndexSettingsModule.newIndexSettings("index", indexSettings)___        _        AnalysisPlugin plugin = new AnalysisPlugin() {_            class MockFactory extends AbstractTokenFilterFactory {_                MockFactory(IndexSettings indexSettings, Environment env, String name, Settings settings) {_                    super(indexSettings, name, settings)__                }__                @Override_                public TokenStream create(TokenStream tokenStream) {_                    if (name().equals("test_filter")) {_                        return new MockTokenFilter(tokenStream, MockTokenFilter.EMPTY_STOPSET)__                    }_                    return new MockTokenFilter(tokenStream, MockTokenFilter.ENGLISH_STOPSET)__                }_            }__            @Override_            public Map<String, AnalysisProvider<TokenFilterFactory>> getTokenFilters() {_                return singletonMap("mock", MockFactory::new)__            }_        }__        IndexAnalyzers indexAnalyzers = new AnalysisModule(TestEnvironment.newEnvironment(settings),_                singletonList(plugin)).getAnalysisRegistry().build(idxSettings)___        _        try (NamedAnalyzer custom_analyser = indexAnalyzers.get("custom_analyzer_with_camel_case")) {_            assertNotNull(custom_analyser)__            TokenStream tokenStream = custom_analyser.tokenStream("foo", "has a foo")__            tokenStream.reset()__            CharTermAttribute charTermAttribute = tokenStream.addAttribute(CharTermAttribute.class)__            assertTrue(tokenStream.incrementToken())__            assertEquals("has", charTermAttribute.toString())__            assertTrue(tokenStream.incrementToken())__            assertEquals("foo", charTermAttribute.toString())__            assertFalse(tokenStream.incrementToken())__        }__        _        try (NamedAnalyzer custom_analyser = indexAnalyzers.get("custom_analyzer_with_snake_case")) {_            assertNotNull(custom_analyser)__            TokenStream tokenStream = custom_analyser.tokenStream("foo", "has a foo")__            tokenStream.reset()__            CharTermAttribute charTermAttribute = tokenStream.addAttribute(CharTermAttribute.class)__            assertTrue(tokenStream.incrementToken())__            assertEquals("has", charTermAttribute.toString())__            assertTrue(tokenStream.incrementToken())__            assertEquals("a", charTermAttribute.toString())__            assertTrue(tokenStream.incrementToken())__            assertEquals("foo", charTermAttribute.toString())__            assertFalse(tokenStream.incrementToken())__        }_    };tests,that,code,camel,case,filter,names,and,code,filter,names,don,t,collide;public,void,test,configure,camel,case,token,filter,throws,ioexception,settings,settings,settings,builder,put,environment,get,key,create,temp,dir,to,string,build,settings,index,settings,settings,builder,put,index,meta,data,version,current,put,index,analysis,filter,test,filter,type,mock,put,index,analysis,filter,type,mock,put,index,analysis,analyzer,tokenizer,standard,put,list,index,analysis,analyzer,filter,lowercase,test,filter,put,index,analysis,analyzer,tokenizer,standard,put,list,index,analysis,analyzer,filter,lowercase,build,index,settings,idx,settings,index,settings,module,new,index,settings,index,index,settings,analysis,plugin,plugin,new,analysis,plugin,class,mock,factory,extends,abstract,token,filter,factory,mock,factory,index,settings,index,settings,environment,env,string,name,settings,settings,super,index,settings,name,settings,override,public,token,stream,create,token,stream,token,stream,if,name,equals,return,new,mock,token,filter,token,stream,mock,token,filter,return,new,mock,token,filter,token,stream,mock,token,filter,override,public,map,string,analysis,provider,token,filter,factory,get,token,filters,return,singleton,map,mock,mock,factory,new,index,analyzers,index,analyzers,new,analysis,module,test,environment,new,environment,settings,singleton,list,plugin,get,analysis,registry,build,idx,settings,try,named,analyzer,index,analyzers,get,assert,not,null,token,stream,token,stream,token,stream,foo,has,a,foo,token,stream,reset,char,term,attribute,char,term,attribute,token,stream,add,attribute,char,term,attribute,class,assert,true,token,stream,increment,token,assert,equals,has,char,term,attribute,to,string,assert,true,token,stream,increment,token,assert,equals,foo,char,term,attribute,to,string,assert,false,token,stream,increment,token,try,named,analyzer,index,analyzers,get,assert,not,null,token,stream,token,stream,token,stream,foo,has,a,foo,token,stream,reset,char,term,attribute,char,term,attribute,token,stream,add,attribute,char,term,attribute,class,assert,true,token,stream,increment,token,assert,equals,has,char,term,attribute,to,string,assert,true,token,stream,increment,token,assert,equals,a,char,term,attribute,to,string,assert,true,token,stream,increment,token,assert,equals,foo,char,term,attribute,to,string,assert,false,token,stream,increment,token
