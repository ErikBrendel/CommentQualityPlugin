commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;3;;private static AnalyzerProvider<?> analyzerProvider(final String name) {     return new PreBuiltAnalyzerProvider(name, AnalyzerScope.INDEX, new EnglishAnalyzer()). }
false;private,static;1;4;;private static AnalysisRegistry emptyAnalysisRegistry(Settings settings) {     return new AnalysisRegistry(TestEnvironment.newEnvironment(settings), emptyMap(), emptyMap(), emptyMap(), emptyMap(), emptyMap(), emptyMap(), emptyMap(), emptyMap(), emptyMap()). }
false;private,static;1;5;;private static IndexSettings indexSettingsOfCurrentVersion(Settings.Builder settings) {     return IndexSettingsModule.newIndexSettings("index", settings.put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).build()). }
false;public;0;7;;@Override public void setUp() throws Exception {     super.setUp().     emptyRegistry = emptyAnalysisRegistry(Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).build()). }
false;public;0;13;;public void testDefaultAnalyzers() throws IOException {     Version version = VersionUtils.randomVersion(random()).     Settings settings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, version).put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).build().     IndexSettings idxSettings = IndexSettingsModule.newIndexSettings("index", settings).     IndexAnalyzers indexAnalyzers = emptyRegistry.build(idxSettings).     assertThat(indexAnalyzers.getDefaultIndexAnalyzer().analyzer(), instanceOf(StandardAnalyzer.class)).     assertThat(indexAnalyzers.getDefaultSearchAnalyzer().analyzer(), instanceOf(StandardAnalyzer.class)).     assertThat(indexAnalyzers.getDefaultSearchQuoteAnalyzer().analyzer(), instanceOf(StandardAnalyzer.class)). }
false;public;0;10;;public void testOverrideDefaultAnalyzer() throws IOException {     Version version = VersionUtils.randomVersion(random()).     Settings settings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, version).build().     IndexAnalyzers indexAnalyzers = emptyRegistry.build(IndexSettingsModule.newIndexSettings("index", settings), singletonMap("default", analyzerProvider("default")), emptyMap(), emptyMap(), emptyMap(), emptyMap()).     assertThat(indexAnalyzers.getDefaultIndexAnalyzer().analyzer(), instanceOf(EnglishAnalyzer.class)).     assertThat(indexAnalyzers.getDefaultSearchAnalyzer().analyzer(), instanceOf(EnglishAnalyzer.class)).     assertThat(indexAnalyzers.getDefaultSearchQuoteAnalyzer().analyzer(), instanceOf(EnglishAnalyzer.class)). }
false;public;0;9;;public void testOverrideDefaultIndexAnalyzerIsUnsupported() {     Version version = VersionUtils.randomVersionBetween(random(), Version.V_6_0_0_alpha1, Version.CURRENT).     Settings settings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, version).build().     AnalyzerProvider<?> defaultIndex = new PreBuiltAnalyzerProvider("default_index", AnalyzerScope.INDEX, new EnglishAnalyzer()).     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> emptyRegistry.build(IndexSettingsModule.newIndexSettings("index", settings), singletonMap("default_index", defaultIndex), emptyMap(), emptyMap(), emptyMap(), emptyMap())).     assertTrue(e.getMessage().contains("[index.analysis.analyzer.default_index] is not supported")). }
false;public;0;9;;public void testOverrideDefaultSearchAnalyzer() {     Version version = VersionUtils.randomVersion(random()).     Settings settings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, version).build().     IndexAnalyzers indexAnalyzers = emptyRegistry.build(IndexSettingsModule.newIndexSettings("index", settings), singletonMap("default_search", analyzerProvider("default_search")), emptyMap(), emptyMap(), emptyMap(), emptyMap()).     assertThat(indexAnalyzers.getDefaultIndexAnalyzer().analyzer(), instanceOf(StandardAnalyzer.class)).     assertThat(indexAnalyzers.getDefaultSearchAnalyzer().analyzer(), instanceOf(EnglishAnalyzer.class)).     assertThat(indexAnalyzers.getDefaultSearchQuoteAnalyzer().analyzer(), instanceOf(EnglishAnalyzer.class)). }
false;public;1;7;;@Override public TokenStream create(TokenStream tokenStream) {     if (name().equals("test_filter")) {         return new MockTokenFilter(tokenStream, MockTokenFilter.EMPTY_STOPSET).     }     return new MockTokenFilter(tokenStream, MockTokenFilter.ENGLISH_STOPSET). }
false;public;0;4;;@Override public Map<String, AnalysisProvider<TokenFilterFactory>> getTokenFilters() {     return singletonMap("mock", MockFactory::new). }
true;public;0;66;/**  * Tests that {@code camelCase} filter names and {@code snake_case} filter names don't collide.  */ ;/**  * Tests that {@code camelCase} filter names and {@code snake_case} filter names don't collide.  */ public void testConfigureCamelCaseTokenFilter() throws IOException {     Settings settings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).build().     Settings indexSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).put("index.analysis.filter.testFilter.type", "mock").put("index.analysis.filter.test_filter.type", "mock").put("index.analysis.analyzer.custom_analyzer_with_camel_case.tokenizer", "standard").putList("index.analysis.analyzer.custom_analyzer_with_camel_case.filter", "lowercase", "testFilter").put("index.analysis.analyzer.custom_analyzer_with_snake_case.tokenizer", "standard").putList("index.analysis.analyzer.custom_analyzer_with_snake_case.filter", "lowercase", "test_filter").build().     IndexSettings idxSettings = IndexSettingsModule.newIndexSettings("index", indexSettings).     /* The snake_case version of the name should not filter out any stopwords while the          * camelCase version will filter out English stopwords. */     AnalysisPlugin plugin = new AnalysisPlugin() {          class MockFactory extends AbstractTokenFilterFactory {              MockFactory(IndexSettings indexSettings, Environment env, String name, Settings settings) {                 super(indexSettings, name, settings).             }              @Override             public TokenStream create(TokenStream tokenStream) {                 if (name().equals("test_filter")) {                     return new MockTokenFilter(tokenStream, MockTokenFilter.EMPTY_STOPSET).                 }                 return new MockTokenFilter(tokenStream, MockTokenFilter.ENGLISH_STOPSET).             }         }          @Override         public Map<String, AnalysisProvider<TokenFilterFactory>> getTokenFilters() {             return singletonMap("mock", MockFactory::new).         }     }.     IndexAnalyzers indexAnalyzers = new AnalysisModule(TestEnvironment.newEnvironment(settings), singletonList(plugin)).getAnalysisRegistry().build(idxSettings).     // This shouldn't contain English stopwords     try (NamedAnalyzer custom_analyser = indexAnalyzers.get("custom_analyzer_with_camel_case")) {         assertNotNull(custom_analyser).         TokenStream tokenStream = custom_analyser.tokenStream("foo", "has a foo").         tokenStream.reset().         CharTermAttribute charTermAttribute = tokenStream.addAttribute(CharTermAttribute.class).         assertTrue(tokenStream.incrementToken()).         assertEquals("has", charTermAttribute.toString()).         assertTrue(tokenStream.incrementToken()).         assertEquals("foo", charTermAttribute.toString()).         assertFalse(tokenStream.incrementToken()).     }     // This *should* contain English stopwords     try (NamedAnalyzer custom_analyser = indexAnalyzers.get("custom_analyzer_with_snake_case")) {         assertNotNull(custom_analyser).         TokenStream tokenStream = custom_analyser.tokenStream("foo", "has a foo").         tokenStream.reset().         CharTermAttribute charTermAttribute = tokenStream.addAttribute(CharTermAttribute.class).         assertTrue(tokenStream.incrementToken()).         assertEquals("has", charTermAttribute.toString()).         assertTrue(tokenStream.incrementToken()).         assertEquals("a", charTermAttribute.toString()).         assertTrue(tokenStream.incrementToken()).         assertEquals("foo", charTermAttribute.toString()).         assertFalse(tokenStream.incrementToken()).     } }
false;public;0;13;;public void testBuiltInAnalyzersAreCached() throws IOException {     Settings settings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).build().     Settings indexSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).build().     IndexSettings idxSettings = IndexSettingsModule.newIndexSettings("index", indexSettings).     IndexAnalyzers indexAnalyzers = emptyAnalysisRegistry(settings).build(idxSettings).     IndexAnalyzers otherIndexAnalyzers = emptyAnalysisRegistry(settings).build(idxSettings).     final int numIters = randomIntBetween(5, 20).     for (int i = 0. i < numIters. i++) {         PreBuiltAnalyzers preBuiltAnalyzers = RandomPicks.randomFrom(random(), PreBuiltAnalyzers.values()).         assertSame(indexAnalyzers.get(preBuiltAnalyzers.name()), otherIndexAnalyzers.get(preBuiltAnalyzers.name())).     } }
false;public;0;14;;public void testNoTypeOrTokenizerErrorMessage() throws IOException {     Version version = VersionUtils.randomVersion(random()).     Settings settings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, version).put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).putList("index.analysis.analyzer.test_analyzer.filter", new String[] { "lowercase", "stop", "shingle" }).putList("index.analysis.analyzer.test_analyzer.char_filter", new String[] { "html_strip" }).build().     IndexSettings idxSettings = IndexSettingsModule.newIndexSettings("index", settings).     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> emptyAnalysisRegistry(settings).build(idxSettings)).     assertThat(e.getMessage(), equalTo("analyzer [test_analyzer] must specify either an analyzer type, or a tokenizer")). }
false;public;0;5;;public void testCloseIndexAnalyzersMultipleTimes() throws IOException {     IndexAnalyzers indexAnalyzers = emptyRegistry.build(indexSettingsOfCurrentVersion(Settings.builder())).     indexAnalyzers.close().     indexAnalyzers.close(). }
false;public;0;11;;public void testEnsureCloseInvocationProperlyDelegated() throws IOException {     Settings settings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).build().     PreBuiltAnalyzerProviderFactory mock = mock(PreBuiltAnalyzerProviderFactory.class).     AnalysisRegistry registry = new AnalysisRegistry(TestEnvironment.newEnvironment(settings), emptyMap(), emptyMap(), emptyMap(), emptyMap(), emptyMap(), emptyMap(), emptyMap(), emptyMap(), Collections.singletonMap("key", mock)).     registry.close().     verify(mock).close(). }
