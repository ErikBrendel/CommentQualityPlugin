commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;public void testDecisionEquality() {     Decision.Multi d = new Decision.Multi().     Decision.Multi d2 = new Decision.Multi().     d.add(Decision.single(Decision.Type.NO, "no label", "because I said no")).     d.add(Decision.single(Decision.Type.YES, "yes label", "yes please")).     d.add(Decision.single(Decision.Type.THROTTLE, "throttle label", "wait a sec")).     d2.add(Decision.single(Decision.Type.NO, "no label", "because I said no")).     d2.add(Decision.single(Decision.Type.YES, "yes label", "yes please")).     d2.add(Decision.single(Decision.Type.THROTTLE, "throttle label", "wait a sec")).     assertEquals(d, d2). }
false;public;0;22;;public void testExplanationSerialization() throws Exception {     ClusterAllocationExplanation cae = randomClusterAllocationExplanation(randomBoolean()).     BytesStreamOutput out = new BytesStreamOutput().     cae.writeTo(out).     StreamInput in = out.bytes().streamInput().     ClusterAllocationExplanation cae2 = new ClusterAllocationExplanation(in).     assertEquals(cae.getShard(), cae2.getShard()).     assertEquals(cae.isPrimary(), cae2.isPrimary()).     assertTrue(cae2.isPrimary()).     assertEquals(cae.getUnassignedInfo(), cae2.getUnassignedInfo()).     assertEquals(cae.getCurrentNode(), cae2.getCurrentNode()).     assertEquals(cae.getShardState(), cae2.getShardState()).     if (cae.getClusterInfo() == null) {         assertNull(cae2.getClusterInfo()).     } else {         assertNotNull(cae2.getClusterInfo()).         assertEquals(cae.getClusterInfo().getNodeMostAvailableDiskUsages().size(), cae2.getClusterInfo().getNodeMostAvailableDiskUsages().size()).     }     assertEquals(cae.getShardAllocationDecision().getAllocateDecision(), cae2.getShardAllocationDecision().getAllocateDecision()).     assertEquals(cae.getShardAllocationDecision().getMoveDecision(), cae2.getShardAllocationDecision().getMoveDecision()). }
false;public;0;10;;public void testExplanationToXContent() throws Exception {     ClusterAllocationExplanation cae = randomClusterAllocationExplanation(true).     XContentBuilder builder = XContentFactory.jsonBuilder().     cae.toXContent(builder, ToXContent.EMPTY_PARAMS).     assertEquals("{\"index\":\"idx\",\"shard\":0,\"primary\":true,\"current_state\":\"started\",\"current_node\":" + "{\"id\":\"node-0\",\"name\":\"\",\"transport_address\":\"" + cae.getCurrentNode().getAddress() + "\",\"weight_ranking\":3},\"can_remain_on_current_node\":\"yes\",\"can_rebalance_cluster\":\"yes\"," + "\"can_rebalance_to_other_node\":\"no\",\"rebalance_explanation\":\"cannot rebalance as no target node exists " + "that can both allocate this shard and improve the cluster balance\"}", Strings.toString(builder)). }
false;private,static;1;16;;private static ClusterAllocationExplanation randomClusterAllocationExplanation(boolean assignedShard) {     ShardRouting shardRouting = TestShardRouting.newShardRouting(new ShardId(new Index("idx", "123"), 0), assignedShard ? "node-0" : null, true, assignedShard ? ShardRoutingState.STARTED : ShardRoutingState.UNASSIGNED).     DiscoveryNode node = assignedShard ? new DiscoveryNode("node-0", buildNewFakeTransportAddress(), emptyMap(), emptySet(), Version.CURRENT) : null.     ShardAllocationDecision shardAllocationDecision.     if (assignedShard) {         MoveDecision moveDecision = MoveDecision.cannotRebalance(Decision.YES, AllocationDecision.NO, 3, null).withRemainDecision(Decision.YES).         shardAllocationDecision = new ShardAllocationDecision(AllocateUnassignedDecision.NOT_TAKEN, moveDecision).     } else {         AllocateUnassignedDecision allocateDecision = AllocateUnassignedDecision.no(UnassignedInfo.AllocationStatus.DECIDERS_NO, null).         shardAllocationDecision = new ShardAllocationDecision(allocateDecision, MoveDecision.NOT_TAKEN).     }     return new ClusterAllocationExplanation(shardRouting, node, null, null, shardAllocationDecision). }
