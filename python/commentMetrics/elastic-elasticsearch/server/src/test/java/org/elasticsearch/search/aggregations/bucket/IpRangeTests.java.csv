commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;15;;private static String randomIp(boolean v4) {     try {         if (v4) {             byte[] ipv4 = new byte[4].             random().nextBytes(ipv4).             return NetworkAddress.format(InetAddress.getByAddress(ipv4)).         } else {             byte[] ipv6 = new byte[16].             random().nextBytes(ipv6).             return NetworkAddress.format(InetAddress.getByAddress(ipv6)).         }     } catch (UnknownHostException e) {         throw new AssertionError().     } }
false;protected;0;42;;@Override protected IpRangeAggregationBuilder createTestAggregatorBuilder() {     int numRanges = randomIntBetween(1, 10).     IpRangeAggregationBuilder factory = new IpRangeAggregationBuilder(randomAlphaOfLengthBetween(3, 10)).     for (int i = 0. i < numRanges. i++) {         String key = null.         if (randomBoolean()) {             key = randomAlphaOfLengthBetween(1, 20).         }         switch(randomInt(3)) {             case 0:                 boolean v4 = randomBoolean().                 int prefixLength.                 if (v4) {                     prefixLength = randomInt(32).                 } else {                     prefixLength = randomInt(128).                 }                 factory.addMaskRange(key, randomIp(v4) + "/" + prefixLength).                 break.             case 1:                 factory.addUnboundedFrom(key, randomIp(randomBoolean())).                 break.             case 2:                 factory.addUnboundedTo(key, randomIp(randomBoolean())).                 break.             case 3:                 factory.addRange(key, randomIp(randomBoolean()), randomIp(randomBoolean())).                 break.             default:                 fail().         }     }     factory.field(IP_FIELD_NAME).     if (randomBoolean()) {         factory.keyed(randomBoolean()).     }     if (randomBoolean()) {         factory.missing(randomIp(randomBoolean())).     }     return factory. }
false;public;0;37;;public void testMask() {     IpRangeAggregationBuilder b1 = new IpRangeAggregationBuilder("foo").     IpRangeAggregationBuilder b2 = new IpRangeAggregationBuilder("foo").     b1.addMaskRange("bar", "192.168.10.12/16").     b2.addRange("bar", "192.168.0.0", "192.169.0.0").     assertEquals(b1, b2).     b1 = new IpRangeAggregationBuilder("foo").     b2 = new IpRangeAggregationBuilder("foo").     b1.addMaskRange("bar", "192.168.0.0/31").     b2.addRange("bar", "192.168.0.0", "192.168.0.2").     assertEquals(b1, b2).     b1 = new IpRangeAggregationBuilder("foo").     b2 = new IpRangeAggregationBuilder("foo").     b1.addMaskRange("bar", "0.0.0.0/0").     b2.addRange("bar", "0.0.0.0", "::1:0:0:0").     assertEquals(b1, b2).     b1 = new IpRangeAggregationBuilder("foo").     b2 = new IpRangeAggregationBuilder("foo").     b1.addMaskRange("bar", "fe80::821f:2ff:fe4a:c5bd/64").     b2.addRange("bar", "fe80::", "fe80:0:0:1::").     assertEquals(b1, b2).     b1 = new IpRangeAggregationBuilder("foo").     b2 = new IpRangeAggregationBuilder("foo").     b1.addMaskRange("bar", "::/16").     b2.addRange("bar", null, "1::").     assertEquals(b1, b2).     b1 = new IpRangeAggregationBuilder("foo").     b2 = new IpRangeAggregationBuilder("foo").     b1.addMaskRange("bar", "::/0").     b2.addRange("bar", null, null).     assertEquals(b1, b2). }
