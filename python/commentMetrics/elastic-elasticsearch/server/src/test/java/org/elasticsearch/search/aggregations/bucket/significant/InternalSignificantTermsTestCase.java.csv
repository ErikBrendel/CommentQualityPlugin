commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public void setUp() throws Exception {     super.setUp().     significanceHeuristic = randomSignificanceHeuristic(). }
false;protected,final;4;27;;@Override protected final InternalSignificantTerms createTestInstance(String name, List<PipelineAggregator> pipelineAggregators, Map<String, Object> metaData, InternalAggregations aggregations) {     final int requiredSize = randomIntBetween(1, 5).     final int numBuckets = randomNumberOfBuckets().     long subsetSize = 0.     long supersetSize = 0.     int[] subsetDfs = new int[numBuckets].     int[] supersetDfs = new int[numBuckets].     for (int i = 0. i < numBuckets. ++i) {         int subsetDf = randomIntBetween(1, 10).         subsetDfs[i] = subsetDf.         int supersetDf = randomIntBetween(subsetDf, 20).         supersetDfs[i] = supersetDf.         subsetSize += subsetDf.         supersetSize += supersetDf.     }     return createTestInstance(name, pipelineAggregators, metaData, aggregations, requiredSize, numBuckets, subsetSize, subsetDfs, supersetSize, supersetDfs, significanceHeuristic). }
false;protected,abstract;11;8;;protected abstract InternalSignificantTerms createTestInstance(String name, List<PipelineAggregator> pipelineAggregators, Map<String, Object> metaData, InternalAggregations aggregations, int requiredSize, int numBuckets, long subsetSize, int[] subsetDfs, long supersetSize, int[] supersetDfs, SignificanceHeuristic significanceHeuristic).
false;protected;3;7;;@Override protected InternalSignificantTerms createUnmappedInstance(String name, List<PipelineAggregator> pipelineAggregators, Map<String, Object> metaData) {     InternalSignificantTerms<?, ?> testInstance = createTestInstance(name, pipelineAggregators, metaData).     return new UnmappedSignificantTerms(name, testInstance.requiredSize, testInstance.minDocCount, pipelineAggregators, metaData). }
false;protected;2;20;;@Override protected void assertReduced(InternalSignificantTerms<?, ?> reduced, List<InternalSignificantTerms<?, ?>> inputs) {     assertEquals(inputs.stream().mapToLong(InternalSignificantTerms::getSubsetSize).sum(), reduced.getSubsetSize()).     assertEquals(inputs.stream().mapToLong(InternalSignificantTerms::getSupersetSize).sum(), reduced.getSupersetSize()).     List<Function<SignificantTerms.Bucket, Long>> counts = Arrays.asList(SignificantTerms.Bucket::getSubsetDf, SignificantTerms.Bucket::getSupersetDf, SignificantTerms.Bucket::getDocCount).     for (Function<SignificantTerms.Bucket, Long> count : counts) {         Map<Object, Long> reducedCounts = toCounts(reduced.getBuckets().stream(), count).         Map<Object, Long> totalCounts = toCounts(inputs.stream().map(SignificantTerms::getBuckets).flatMap(List::stream), count).         Map<Object, Long> expectedReducedCounts = new HashMap<>(totalCounts).         expectedReducedCounts.keySet().retainAll(reducedCounts.keySet()).         assertEquals(expectedReducedCounts, reducedCounts).     } }
false;protected;3;17;;@Override protected void assertMultiBucketsAggregation(MultiBucketsAggregation expected, MultiBucketsAggregation actual, boolean checkOrder) {     super.assertMultiBucketsAggregation(expected, actual, checkOrder).     assertTrue(expected instanceof InternalSignificantTerms).     assertTrue(actual instanceof ParsedSignificantTerms).     InternalSignificantTerms expectedSigTerms = (InternalSignificantTerms) expected.     ParsedSignificantTerms actualSigTerms = (ParsedSignificantTerms) actual.     assertEquals(expectedSigTerms.getSubsetSize(), actualSigTerms.getSubsetSize()).     assertEquals(expectedSigTerms.getSupersetSize(), actualSigTerms.getSupersetSize()).     for (SignificantTerms.Bucket bucket : (SignificantTerms) expected) {         String key = bucket.getKeyAsString().         assertBucket(expectedSigTerms.getBucketByKey(key), actualSigTerms.getBucketByKey(key), checkOrder).     } }
false;protected;3;17;;@Override protected void assertBucket(MultiBucketsAggregation.Bucket expected, MultiBucketsAggregation.Bucket actual, boolean checkOrder) {     super.assertBucket(expected, actual, checkOrder).     assertTrue(expected instanceof InternalSignificantTerms.Bucket).     assertTrue(actual instanceof ParsedSignificantTerms.ParsedBucket).     SignificantTerms.Bucket expectedSigTerm = (SignificantTerms.Bucket) expected.     SignificantTerms.Bucket actualSigTerm = (SignificantTerms.Bucket) actual.     assertEquals(expectedSigTerm.getSignificanceScore(), actualSigTerm.getSignificanceScore(), 0.0).     assertEquals(expectedSigTerm.getSubsetDf(), actualSigTerm.getSubsetDf()).     assertEquals(expectedSigTerm.getDocCount(), actualSigTerm.getSubsetDf()).     assertEquals(expectedSigTerm.getSupersetDf(), actualSigTerm.getSupersetDf()).     assertEquals(expectedSigTerm.getSubsetSize(), actualSigTerm.getSubsetSize()).     assertEquals(expectedSigTerm.getSupersetSize(), actualSigTerm.getSupersetSize()). }
false;private,static;2;4;;private static Map<Object, Long> toCounts(Stream<? extends SignificantTerms.Bucket> buckets, Function<SignificantTerms.Bucket, Long> fn) {     return buckets.collect(Collectors.toMap(SignificantTerms.Bucket::getKey, fn, Long::sum)). }
false;private,static;0;7;;private static SignificanceHeuristic randomSignificanceHeuristic() {     return randomFrom(new JLHScore(), new MutualInformation(randomBoolean(), randomBoolean()), new GND(randomBoolean()), new ChiSquare(randomBoolean(), randomBoolean())). }
