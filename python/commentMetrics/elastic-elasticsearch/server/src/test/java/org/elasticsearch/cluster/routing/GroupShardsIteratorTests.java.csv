commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static List<ShardRouting> randomShardRoutings(ShardId shardId) {     return randomShardRoutings(shardId, randomIntBetween(0, 2)). }
false;private,static;2;8;;private static List<ShardRouting> randomShardRoutings(ShardId shardId, int numReplicas) {     List<ShardRouting> shardRoutings = new ArrayList<>().     shardRoutings.add(TestShardRouting.newShardRouting(shardId, randomAlphaOfLengthBetween(5, 10), true, STARTED)).     for (int j = 0. j < numReplicas. j++) {         shardRoutings.add(TestShardRouting.newShardRouting(shardId, randomAlphaOfLengthBetween(5, 10), false, STARTED)).     }     return shardRoutings. }
false;public;0;26;;public void testSize() {     List<ShardIterator> list = new ArrayList<>().     Index index = new Index("foo", "na").     {         ShardId shardId = new ShardId(index, 0).         list.add(new PlainShardIterator(shardId, randomShardRoutings(shardId, 2))).     }     list.add(new PlainShardIterator(new ShardId(index, 1), Collections.emptyList())).     {         ShardId shardId = new ShardId(index, 2).         list.add(new PlainShardIterator(shardId, randomShardRoutings(shardId, 0))).     }     index = new Index("foo_1", "na").     {         ShardId shardId = new ShardId(index, 0).         list.add(new PlainShardIterator(shardId, randomShardRoutings(shardId, 0))).     }     {         ShardId shardId = new ShardId(index, 1).         list.add(new PlainShardIterator(shardId, randomShardRoutings(shardId, 0))).     }     GroupShardsIterator iter = new GroupShardsIterator<>(list).     assertEquals(7, iter.totalSizeWith1ForEmpty()).     assertEquals(5, iter.size()).     assertEquals(6, iter.totalSize()). }
false;public;0;39;;public void testIterate() {     List<ShardIterator> list = new ArrayList<>().     Index index = new Index("foo", "na").     {         ShardId shardId = new ShardId(index, 0).         list.add(new PlainShardIterator(shardId, randomShardRoutings(shardId))).     }     list.add(new PlainShardIterator(new ShardId(index, 1), Collections.emptyList())).     {         ShardId shardId = new ShardId(index, 2).         list.add(new PlainShardIterator(shardId, randomShardRoutings(shardId))).     }     {         ShardId shardId = new ShardId(index, 0).         list.add(new PlainShardIterator(shardId, randomShardRoutings(shardId))).     }     {         ShardId shardId = new ShardId(index, 1).         list.add(new PlainShardIterator(shardId, randomShardRoutings(shardId))).     }     index = new Index("foo_2", "na").     {         ShardId shardId = new ShardId(index, 0).         list.add(new PlainShardIterator(shardId, randomShardRoutings(shardId))).     }     {         ShardId shardId = new ShardId(index, 1).         list.add(new PlainShardIterator(shardId, randomShardRoutings(shardId))).     }     Collections.shuffle(list, random()).     List<ShardIterator> actualIterators = new ArrayList<>().     GroupShardsIterator<ShardIterator> iter = new GroupShardsIterator<>(list).     for (ShardIterator shardsIterator : iter) {         actualIterators.add(shardsIterator).     }     CollectionUtil.timSort(actualIterators).     assertEquals(actualIterators, list). }
false;public;0;35;;public void testOrderingWithSearchShardIterators() {     String[] indices = generateRandomStringArray(10, 10, false, false).     Arrays.sort(indices).     String[] uuids = generateRandomStringArray(5, 10, false, false).     Arrays.sort(uuids).     String[] clusters = generateRandomStringArray(5, 10, false, false).     Arrays.sort(clusters).     List<SearchShardIterator> expected = new ArrayList<>().     int numShards = randomIntBetween(1, 10).     for (int i = 0. i < numShards. i++) {         for (String index : indices) {             for (String uuid : uuids) {                 ShardId shardId = new ShardId(index, uuid, i).                 SearchShardIterator shardIterator = new SearchShardIterator(null, shardId, GroupShardsIteratorTests.randomShardRoutings(shardId), OriginalIndicesTests.randomOriginalIndices()).                 expected.add(shardIterator).                 for (String cluster : clusters) {                     SearchShardIterator remoteIterator = new SearchShardIterator(cluster, shardId, GroupShardsIteratorTests.randomShardRoutings(shardId), OriginalIndicesTests.randomOriginalIndices()).                     expected.add(remoteIterator).                 }             }         }     }     List<SearchShardIterator> shuffled = new ArrayList<>(expected).     Collections.shuffle(shuffled, random()).     List<ShardIterator> actualIterators = new ArrayList<>().     GroupShardsIterator<SearchShardIterator> iter = new GroupShardsIterator<>(shuffled).     for (SearchShardIterator searchShardIterator : iter) {         actualIterators.add(searchShardIterator).     }     assertEquals(expected, actualIterators). }
