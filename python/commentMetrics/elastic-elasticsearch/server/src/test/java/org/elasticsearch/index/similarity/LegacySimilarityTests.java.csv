commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean forbidPrivateIndexSettings() {     return false. }
false;public;0;13;;public void testResolveDefaultSimilaritiesOn6xIndex() {     final Settings indexSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, // otherwise classic is forbidden     Version.V_6_3_0).build().     final SimilarityService similarityService = createIndex("foo", indexSettings).similarityService().     assertThat(similarityService.getSimilarity("classic").get(), instanceOf(ClassicSimilarity.class)).     assertWarnings("The [classic] similarity is now deprecated in favour of BM25, which is generally " + "accepted as a better alternative. Use the [BM25] similarity or build a custom [scripted] similarity " + "instead.").     assertThat(similarityService.getSimilarity("BM25").get(), instanceOf(LegacyBM25Similarity.class)).     assertThat(similarityService.getSimilarity("boolean").get(), instanceOf(BooleanSimilarity.class)).     assertThat(similarityService.getSimilarity("default"), equalTo(null)). }
false;public;0;33;;public void testResolveSimilaritiesFromMappingClassic() throws IOException {     try (XContentBuilder mapping = XContentFactory.jsonBuilder()) {         mapping.startObject().         {             mapping.startObject("type").             {                 mapping.startObject("properties").                 {                     mapping.startObject("field1").                     {                         mapping.field("type", "text").                         mapping.field("similarity", "my_similarity").                     }                     mapping.endObject().                 }                 mapping.endObject().             }             mapping.endObject().         }         mapping.endObject().         final Settings indexSettings = Settings.builder().put(IndexMetaData.SETTING_INDEX_VERSION_CREATED.getKey(), // otherwise classic is forbidden         Version.V_6_3_0).put("index.similarity.my_similarity.type", "classic").put("index.similarity.my_similarity.discount_overlaps", false).build().         final MapperService mapperService = createIndex("foo", indexSettings, "type", mapping).mapperService().         assertThat(mapperService.fullName("field1").similarity().get(), instanceOf(ClassicSimilarity.class)).         final ClassicSimilarity similarity = (ClassicSimilarity) mapperService.fullName("field1").similarity().get().         assertThat(similarity.getDiscountOverlaps(), equalTo(false)).     } }
