# id;timestamp;commentText;codeText;commentWords;codeWords
TasksIT -> private List<TaskInfo> findEvents(String actionMasks, Function<Tuple<Boolean, TaskInfo>, Boolean> criteria);1524684173;Returns all events that satisfy the criteria across all nodes__@param actionMasks action masks to match_@return number of events that satisfy the criteria;private List<TaskInfo> findEvents(String actionMasks, Function<Tuple<Boolean, TaskInfo>, Boolean> criteria) {_        List<TaskInfo> events = new ArrayList<>()__        for (Map.Entry<Tuple<String, String>, RecordingTaskManagerListener> entry : listeners.entrySet()) {_            if (actionMasks == null || entry.getKey().v2().equals(actionMasks)) {_                for (Tuple<Boolean, TaskInfo> taskEvent : entry.getValue().getEvents()) {_                    if (criteria.apply(taskEvent)) {_                        events.add(taskEvent.v2())__                    }_                }_            }_        }_        return events__    };returns,all,events,that,satisfy,the,criteria,across,all,nodes,param,action,masks,action,masks,to,match,return,number,of,events,that,satisfy,the,criteria;private,list,task,info,find,events,string,action,masks,function,tuple,boolean,task,info,boolean,criteria,list,task,info,events,new,array,list,for,map,entry,tuple,string,string,recording,task,manager,listener,entry,listeners,entry,set,if,action,masks,null,entry,get,key,v2,equals,action,masks,for,tuple,boolean,task,info,task,event,entry,get,value,get,events,if,criteria,apply,task,event,events,add,task,event,v2,return,events
TasksIT -> private List<TaskInfo> findEvents(String actionMasks, Function<Tuple<Boolean, TaskInfo>, Boolean> criteria);1526510804;Returns all events that satisfy the criteria across all nodes__@param actionMasks action masks to match_@return number of events that satisfy the criteria;private List<TaskInfo> findEvents(String actionMasks, Function<Tuple<Boolean, TaskInfo>, Boolean> criteria) {_        List<TaskInfo> events = new ArrayList<>()__        for (Map.Entry<Tuple<String, String>, RecordingTaskManagerListener> entry : listeners.entrySet()) {_            if (actionMasks == null || entry.getKey().v2().equals(actionMasks)) {_                for (Tuple<Boolean, TaskInfo> taskEvent : entry.getValue().getEvents()) {_                    if (criteria.apply(taskEvent)) {_                        events.add(taskEvent.v2())__                    }_                }_            }_        }_        return events__    };returns,all,events,that,satisfy,the,criteria,across,all,nodes,param,action,masks,action,masks,to,match,return,number,of,events,that,satisfy,the,criteria;private,list,task,info,find,events,string,action,masks,function,tuple,boolean,task,info,boolean,criteria,list,task,info,events,new,array,list,for,map,entry,tuple,string,string,recording,task,manager,listener,entry,listeners,entry,set,if,action,masks,null,entry,get,key,v2,equals,action,masks,for,tuple,boolean,task,info,task,event,entry,get,value,get,events,if,criteria,apply,task,event,events,add,task,event,v2,return,events
TasksIT -> private List<TaskInfo> findEvents(String actionMasks, Function<Tuple<Boolean, TaskInfo>, Boolean> criteria);1527840262;Returns all events that satisfy the criteria across all nodes__@param actionMasks action masks to match_@return number of events that satisfy the criteria;private List<TaskInfo> findEvents(String actionMasks, Function<Tuple<Boolean, TaskInfo>, Boolean> criteria) {_        List<TaskInfo> events = new ArrayList<>()__        for (Map.Entry<Tuple<String, String>, RecordingTaskManagerListener> entry : listeners.entrySet()) {_            if (actionMasks == null || entry.getKey().v2().equals(actionMasks)) {_                for (Tuple<Boolean, TaskInfo> taskEvent : entry.getValue().getEvents()) {_                    if (criteria.apply(taskEvent)) {_                        events.add(taskEvent.v2())__                    }_                }_            }_        }_        return events__    };returns,all,events,that,satisfy,the,criteria,across,all,nodes,param,action,masks,action,masks,to,match,return,number,of,events,that,satisfy,the,criteria;private,list,task,info,find,events,string,action,masks,function,tuple,boolean,task,info,boolean,criteria,list,task,info,events,new,array,list,for,map,entry,tuple,string,string,recording,task,manager,listener,entry,listeners,entry,set,if,action,masks,null,entry,get,key,v2,equals,action,masks,for,tuple,boolean,task,info,task,event,entry,get,value,get,events,if,criteria,apply,task,event,events,add,task,event,v2,return,events
TasksIT -> private List<TaskInfo> findEvents(String actionMasks, Function<Tuple<Boolean, TaskInfo>, Boolean> criteria);1528762805;Returns all events that satisfy the criteria across all nodes__@param actionMasks action masks to match_@return number of events that satisfy the criteria;private List<TaskInfo> findEvents(String actionMasks, Function<Tuple<Boolean, TaskInfo>, Boolean> criteria) {_        List<TaskInfo> events = new ArrayList<>()__        for (Map.Entry<Tuple<String, String>, RecordingTaskManagerListener> entry : listeners.entrySet()) {_            if (actionMasks == null || entry.getKey().v2().equals(actionMasks)) {_                for (Tuple<Boolean, TaskInfo> taskEvent : entry.getValue().getEvents()) {_                    if (criteria.apply(taskEvent)) {_                        events.add(taskEvent.v2())__                    }_                }_            }_        }_        return events__    };returns,all,events,that,satisfy,the,criteria,across,all,nodes,param,action,masks,action,masks,to,match,return,number,of,events,that,satisfy,the,criteria;private,list,task,info,find,events,string,action,masks,function,tuple,boolean,task,info,boolean,criteria,list,task,info,events,new,array,list,for,map,entry,tuple,string,string,recording,task,manager,listener,entry,listeners,entry,set,if,action,masks,null,entry,get,key,v2,equals,action,masks,for,tuple,boolean,task,info,task,event,entry,get,value,get,events,if,criteria,apply,task,event,events,add,task,event,v2,return,events
TasksIT -> private List<TaskInfo> findEvents(String actionMasks, Function<Tuple<Boolean, TaskInfo>, Boolean> criteria);1531179852;Returns all events that satisfy the criteria across all nodes__@param actionMasks action masks to match_@return number of events that satisfy the criteria;private List<TaskInfo> findEvents(String actionMasks, Function<Tuple<Boolean, TaskInfo>, Boolean> criteria) {_        List<TaskInfo> events = new ArrayList<>()__        for (Map.Entry<Tuple<String, String>, RecordingTaskManagerListener> entry : listeners.entrySet()) {_            if (actionMasks == null || entry.getKey().v2().equals(actionMasks)) {_                for (Tuple<Boolean, TaskInfo> taskEvent : entry.getValue().getEvents()) {_                    if (criteria.apply(taskEvent)) {_                        events.add(taskEvent.v2())__                    }_                }_            }_        }_        return events__    };returns,all,events,that,satisfy,the,criteria,across,all,nodes,param,action,masks,action,masks,to,match,return,number,of,events,that,satisfy,the,criteria;private,list,task,info,find,events,string,action,masks,function,tuple,boolean,task,info,boolean,criteria,list,task,info,events,new,array,list,for,map,entry,tuple,string,string,recording,task,manager,listener,entry,listeners,entry,set,if,action,masks,null,entry,get,key,v2,equals,action,masks,for,tuple,boolean,task,info,task,event,entry,get,value,get,events,if,criteria,apply,task,event,events,add,task,event,v2,return,events
TasksIT -> private List<TaskInfo> findEvents(String actionMasks, Function<Tuple<Boolean, TaskInfo>, Boolean> criteria);1543415307;Returns all events that satisfy the criteria across all nodes__@param actionMasks action masks to match_@return number of events that satisfy the criteria;private List<TaskInfo> findEvents(String actionMasks, Function<Tuple<Boolean, TaskInfo>, Boolean> criteria) {_        List<TaskInfo> events = new ArrayList<>()__        for (Map.Entry<Tuple<String, String>, RecordingTaskManagerListener> entry : listeners.entrySet()) {_            if (actionMasks == null || entry.getKey().v2().equals(actionMasks)) {_                for (Tuple<Boolean, TaskInfo> taskEvent : entry.getValue().getEvents()) {_                    if (criteria.apply(taskEvent)) {_                        events.add(taskEvent.v2())__                    }_                }_            }_        }_        return events__    };returns,all,events,that,satisfy,the,criteria,across,all,nodes,param,action,masks,action,masks,to,match,return,number,of,events,that,satisfy,the,criteria;private,list,task,info,find,events,string,action,masks,function,tuple,boolean,task,info,boolean,criteria,list,task,info,events,new,array,list,for,map,entry,tuple,string,string,recording,task,manager,listener,entry,listeners,entry,set,if,action,masks,null,entry,get,key,v2,equals,action,masks,for,tuple,boolean,task,info,task,event,entry,get,value,get,events,if,criteria,apply,task,event,events,add,task,event,v2,return,events
TasksIT -> private List<TaskInfo> findEvents(String actionMasks, Function<Tuple<Boolean, TaskInfo>, Boolean> criteria);1544035746;Returns all events that satisfy the criteria across all nodes__@param actionMasks action masks to match_@return number of events that satisfy the criteria;private List<TaskInfo> findEvents(String actionMasks, Function<Tuple<Boolean, TaskInfo>, Boolean> criteria) {_        List<TaskInfo> events = new ArrayList<>()__        for (Map.Entry<Tuple<String, String>, RecordingTaskManagerListener> entry : listeners.entrySet()) {_            if (actionMasks == null || entry.getKey().v2().equals(actionMasks)) {_                for (Tuple<Boolean, TaskInfo> taskEvent : entry.getValue().getEvents()) {_                    if (criteria.apply(taskEvent)) {_                        events.add(taskEvent.v2())__                    }_                }_            }_        }_        return events__    };returns,all,events,that,satisfy,the,criteria,across,all,nodes,param,action,masks,action,masks,to,match,return,number,of,events,that,satisfy,the,criteria;private,list,task,info,find,events,string,action,masks,function,tuple,boolean,task,info,boolean,criteria,list,task,info,events,new,array,list,for,map,entry,tuple,string,string,recording,task,manager,listener,entry,listeners,entry,set,if,action,masks,null,entry,get,key,v2,equals,action,masks,for,tuple,boolean,task,info,task,event,entry,get,value,get,events,if,criteria,apply,task,event,events,add,task,event,v2,return,events
TasksIT -> private List<TaskInfo> findEvents(String actionMasks, Function<Tuple<Boolean, TaskInfo>, Boolean> criteria);1548458964;Returns all events that satisfy the criteria across all nodes__@param actionMasks action masks to match_@return number of events that satisfy the criteria;private List<TaskInfo> findEvents(String actionMasks, Function<Tuple<Boolean, TaskInfo>, Boolean> criteria) {_        List<TaskInfo> events = new ArrayList<>()__        for (Map.Entry<Tuple<String, String>, RecordingTaskManagerListener> entry : listeners.entrySet()) {_            if (actionMasks == null || entry.getKey().v2().equals(actionMasks)) {_                for (Tuple<Boolean, TaskInfo> taskEvent : entry.getValue().getEvents()) {_                    if (criteria.apply(taskEvent)) {_                        events.add(taskEvent.v2())__                    }_                }_            }_        }_        return events__    };returns,all,events,that,satisfy,the,criteria,across,all,nodes,param,action,masks,action,masks,to,match,return,number,of,events,that,satisfy,the,criteria;private,list,task,info,find,events,string,action,masks,function,tuple,boolean,task,info,boolean,criteria,list,task,info,events,new,array,list,for,map,entry,tuple,string,string,recording,task,manager,listener,entry,listeners,entry,set,if,action,masks,null,entry,get,key,v2,equals,action,masks,for,tuple,boolean,task,info,task,event,entry,get,value,get,events,if,criteria,apply,task,event,events,add,task,event,v2,return,events
TasksIT -> private List<TaskInfo> findEvents(String actionMasks, Function<Tuple<Boolean, TaskInfo>, Boolean> criteria);1548958612;Returns all events that satisfy the criteria across all nodes__@param actionMasks action masks to match_@return number of events that satisfy the criteria;private List<TaskInfo> findEvents(String actionMasks, Function<Tuple<Boolean, TaskInfo>, Boolean> criteria) {_        List<TaskInfo> events = new ArrayList<>()__        for (Map.Entry<Tuple<String, String>, RecordingTaskManagerListener> entry : listeners.entrySet()) {_            if (actionMasks == null || entry.getKey().v2().equals(actionMasks)) {_                for (Tuple<Boolean, TaskInfo> taskEvent : entry.getValue().getEvents()) {_                    if (criteria.apply(taskEvent)) {_                        events.add(taskEvent.v2())__                    }_                }_            }_        }_        return events__    };returns,all,events,that,satisfy,the,criteria,across,all,nodes,param,action,masks,action,masks,to,match,return,number,of,events,that,satisfy,the,criteria;private,list,task,info,find,events,string,action,masks,function,tuple,boolean,task,info,boolean,criteria,list,task,info,events,new,array,list,for,map,entry,tuple,string,string,recording,task,manager,listener,entry,listeners,entry,set,if,action,masks,null,entry,get,key,v2,equals,action,masks,for,tuple,boolean,task,info,task,event,entry,get,value,get,events,if,criteria,apply,task,event,events,add,task,event,v2,return,events
TasksIT -> private void resetTaskManageListeners(String actionMasks);1524684173;Resets all recording task event listeners with the given action mask on all nodes;private void resetTaskManageListeners(String actionMasks) {_        for (Map.Entry<Tuple<String, String>, RecordingTaskManagerListener> entry : listeners.entrySet()) {_            if (actionMasks == null || entry.getKey().v2().equals(actionMasks)) {_                entry.getValue().reset()__            }_        }_    };resets,all,recording,task,event,listeners,with,the,given,action,mask,on,all,nodes;private,void,reset,task,manage,listeners,string,action,masks,for,map,entry,tuple,string,string,recording,task,manager,listener,entry,listeners,entry,set,if,action,masks,null,entry,get,key,v2,equals,action,masks,entry,get,value,reset
TasksIT -> private void resetTaskManageListeners(String actionMasks);1526510804;Resets all recording task event listeners with the given action mask on all nodes;private void resetTaskManageListeners(String actionMasks) {_        for (Map.Entry<Tuple<String, String>, RecordingTaskManagerListener> entry : listeners.entrySet()) {_            if (actionMasks == null || entry.getKey().v2().equals(actionMasks)) {_                entry.getValue().reset()__            }_        }_    };resets,all,recording,task,event,listeners,with,the,given,action,mask,on,all,nodes;private,void,reset,task,manage,listeners,string,action,masks,for,map,entry,tuple,string,string,recording,task,manager,listener,entry,listeners,entry,set,if,action,masks,null,entry,get,key,v2,equals,action,masks,entry,get,value,reset
TasksIT -> private void resetTaskManageListeners(String actionMasks);1527840262;Resets all recording task event listeners with the given action mask on all nodes;private void resetTaskManageListeners(String actionMasks) {_        for (Map.Entry<Tuple<String, String>, RecordingTaskManagerListener> entry : listeners.entrySet()) {_            if (actionMasks == null || entry.getKey().v2().equals(actionMasks)) {_                entry.getValue().reset()__            }_        }_    };resets,all,recording,task,event,listeners,with,the,given,action,mask,on,all,nodes;private,void,reset,task,manage,listeners,string,action,masks,for,map,entry,tuple,string,string,recording,task,manager,listener,entry,listeners,entry,set,if,action,masks,null,entry,get,key,v2,equals,action,masks,entry,get,value,reset
TasksIT -> private void resetTaskManageListeners(String actionMasks);1528762805;Resets all recording task event listeners with the given action mask on all nodes;private void resetTaskManageListeners(String actionMasks) {_        for (Map.Entry<Tuple<String, String>, RecordingTaskManagerListener> entry : listeners.entrySet()) {_            if (actionMasks == null || entry.getKey().v2().equals(actionMasks)) {_                entry.getValue().reset()__            }_        }_    };resets,all,recording,task,event,listeners,with,the,given,action,mask,on,all,nodes;private,void,reset,task,manage,listeners,string,action,masks,for,map,entry,tuple,string,string,recording,task,manager,listener,entry,listeners,entry,set,if,action,masks,null,entry,get,key,v2,equals,action,masks,entry,get,value,reset
TasksIT -> private void resetTaskManageListeners(String actionMasks);1531179852;Resets all recording task event listeners with the given action mask on all nodes;private void resetTaskManageListeners(String actionMasks) {_        for (Map.Entry<Tuple<String, String>, RecordingTaskManagerListener> entry : listeners.entrySet()) {_            if (actionMasks == null || entry.getKey().v2().equals(actionMasks)) {_                entry.getValue().reset()__            }_        }_    };resets,all,recording,task,event,listeners,with,the,given,action,mask,on,all,nodes;private,void,reset,task,manage,listeners,string,action,masks,for,map,entry,tuple,string,string,recording,task,manager,listener,entry,listeners,entry,set,if,action,masks,null,entry,get,key,v2,equals,action,masks,entry,get,value,reset
TasksIT -> private void resetTaskManageListeners(String actionMasks);1543415307;Resets all recording task event listeners with the given action mask on all nodes;private void resetTaskManageListeners(String actionMasks) {_        for (Map.Entry<Tuple<String, String>, RecordingTaskManagerListener> entry : listeners.entrySet()) {_            if (actionMasks == null || entry.getKey().v2().equals(actionMasks)) {_                entry.getValue().reset()__            }_        }_    };resets,all,recording,task,event,listeners,with,the,given,action,mask,on,all,nodes;private,void,reset,task,manage,listeners,string,action,masks,for,map,entry,tuple,string,string,recording,task,manager,listener,entry,listeners,entry,set,if,action,masks,null,entry,get,key,v2,equals,action,masks,entry,get,value,reset
TasksIT -> private void resetTaskManageListeners(String actionMasks);1544035746;Resets all recording task event listeners with the given action mask on all nodes;private void resetTaskManageListeners(String actionMasks) {_        for (Map.Entry<Tuple<String, String>, RecordingTaskManagerListener> entry : listeners.entrySet()) {_            if (actionMasks == null || entry.getKey().v2().equals(actionMasks)) {_                entry.getValue().reset()__            }_        }_    };resets,all,recording,task,event,listeners,with,the,given,action,mask,on,all,nodes;private,void,reset,task,manage,listeners,string,action,masks,for,map,entry,tuple,string,string,recording,task,manager,listener,entry,listeners,entry,set,if,action,masks,null,entry,get,key,v2,equals,action,masks,entry,get,value,reset
TasksIT -> private void resetTaskManageListeners(String actionMasks);1548458964;Resets all recording task event listeners with the given action mask on all nodes;private void resetTaskManageListeners(String actionMasks) {_        for (Map.Entry<Tuple<String, String>, RecordingTaskManagerListener> entry : listeners.entrySet()) {_            if (actionMasks == null || entry.getKey().v2().equals(actionMasks)) {_                entry.getValue().reset()__            }_        }_    };resets,all,recording,task,event,listeners,with,the,given,action,mask,on,all,nodes;private,void,reset,task,manage,listeners,string,action,masks,for,map,entry,tuple,string,string,recording,task,manager,listener,entry,listeners,entry,set,if,action,masks,null,entry,get,key,v2,equals,action,masks,entry,get,value,reset
TasksIT -> private void resetTaskManageListeners(String actionMasks);1548958612;Resets all recording task event listeners with the given action mask on all nodes;private void resetTaskManageListeners(String actionMasks) {_        for (Map.Entry<Tuple<String, String>, RecordingTaskManagerListener> entry : listeners.entrySet()) {_            if (actionMasks == null || entry.getKey().v2().equals(actionMasks)) {_                entry.getValue().reset()__            }_        }_    };resets,all,recording,task,event,listeners,with,the,given,action,mask,on,all,nodes;private,void,reset,task,manage,listeners,string,action,masks,for,map,entry,tuple,string,string,recording,task,manager,listener,entry,listeners,entry,set,if,action,masks,null,entry,get,key,v2,equals,action,masks,entry,get,value,reset
TasksIT -> private TaskId waitForTestTaskStartOnAllNodes() throws Exception;1524684173;Wait for the test task to be running on all nodes and return the TaskId of the primary task.;private TaskId waitForTestTaskStartOnAllNodes() throws Exception {_        assertBusy(() -> {_            List<TaskInfo> tasks = client().admin().cluster().prepareListTasks().setActions(TestTaskPlugin.TestTaskAction.NAME + "[n]")_                    .get().getTasks()__            assertEquals(internalCluster().size(), tasks.size())__        })__        List<TaskInfo> task = client().admin().cluster().prepareListTasks().setActions(TestTaskPlugin.TestTaskAction.NAME).get().getTasks()__        assertThat(task, hasSize(1))__        return task.get(0).getTaskId()__    };wait,for,the,test,task,to,be,running,on,all,nodes,and,return,the,task,id,of,the,primary,task;private,task,id,wait,for,test,task,start,on,all,nodes,throws,exception,assert,busy,list,task,info,tasks,client,admin,cluster,prepare,list,tasks,set,actions,test,task,plugin,test,task,action,name,n,get,get,tasks,assert,equals,internal,cluster,size,tasks,size,list,task,info,task,client,admin,cluster,prepare,list,tasks,set,actions,test,task,plugin,test,task,action,name,get,get,tasks,assert,that,task,has,size,1,return,task,get,0,get,task,id
TasksIT -> private TaskId waitForTestTaskStartOnAllNodes() throws Exception;1526510804;Wait for the test task to be running on all nodes and return the TaskId of the primary task.;private TaskId waitForTestTaskStartOnAllNodes() throws Exception {_        assertBusy(() -> {_            List<TaskInfo> tasks = client().admin().cluster().prepareListTasks().setActions(TestTaskPlugin.TestTaskAction.NAME + "[n]")_                    .get().getTasks()__            assertEquals(internalCluster().size(), tasks.size())__        })__        List<TaskInfo> task = client().admin().cluster().prepareListTasks().setActions(TestTaskPlugin.TestTaskAction.NAME).get().getTasks()__        assertThat(task, hasSize(1))__        return task.get(0).getTaskId()__    };wait,for,the,test,task,to,be,running,on,all,nodes,and,return,the,task,id,of,the,primary,task;private,task,id,wait,for,test,task,start,on,all,nodes,throws,exception,assert,busy,list,task,info,tasks,client,admin,cluster,prepare,list,tasks,set,actions,test,task,plugin,test,task,action,name,n,get,get,tasks,assert,equals,internal,cluster,size,tasks,size,list,task,info,task,client,admin,cluster,prepare,list,tasks,set,actions,test,task,plugin,test,task,action,name,get,get,tasks,assert,that,task,has,size,1,return,task,get,0,get,task,id
TasksIT -> private TaskId waitForTestTaskStartOnAllNodes() throws Exception;1527840262;Wait for the test task to be running on all nodes and return the TaskId of the primary task.;private TaskId waitForTestTaskStartOnAllNodes() throws Exception {_        assertBusy(() -> {_            List<TaskInfo> tasks = client().admin().cluster().prepareListTasks().setActions(TestTaskPlugin.TestTaskAction.NAME + "[n]")_                    .get().getTasks()__            assertEquals(internalCluster().size(), tasks.size())__        })__        List<TaskInfo> task = client().admin().cluster().prepareListTasks().setActions(TestTaskPlugin.TestTaskAction.NAME).get().getTasks()__        assertThat(task, hasSize(1))__        return task.get(0).getTaskId()__    };wait,for,the,test,task,to,be,running,on,all,nodes,and,return,the,task,id,of,the,primary,task;private,task,id,wait,for,test,task,start,on,all,nodes,throws,exception,assert,busy,list,task,info,tasks,client,admin,cluster,prepare,list,tasks,set,actions,test,task,plugin,test,task,action,name,n,get,get,tasks,assert,equals,internal,cluster,size,tasks,size,list,task,info,task,client,admin,cluster,prepare,list,tasks,set,actions,test,task,plugin,test,task,action,name,get,get,tasks,assert,that,task,has,size,1,return,task,get,0,get,task,id
TasksIT -> private TaskId waitForTestTaskStartOnAllNodes() throws Exception;1528762805;Wait for the test task to be running on all nodes and return the TaskId of the primary task.;private TaskId waitForTestTaskStartOnAllNodes() throws Exception {_        assertBusy(() -> {_            List<TaskInfo> tasks = client().admin().cluster().prepareListTasks().setActions(TestTaskPlugin.TestTaskAction.NAME + "[n]")_                    .get().getTasks()__            assertEquals(internalCluster().size(), tasks.size())__        })__        List<TaskInfo> task = client().admin().cluster().prepareListTasks().setActions(TestTaskPlugin.TestTaskAction.NAME).get().getTasks()__        assertThat(task, hasSize(1))__        return task.get(0).getTaskId()__    };wait,for,the,test,task,to,be,running,on,all,nodes,and,return,the,task,id,of,the,primary,task;private,task,id,wait,for,test,task,start,on,all,nodes,throws,exception,assert,busy,list,task,info,tasks,client,admin,cluster,prepare,list,tasks,set,actions,test,task,plugin,test,task,action,name,n,get,get,tasks,assert,equals,internal,cluster,size,tasks,size,list,task,info,task,client,admin,cluster,prepare,list,tasks,set,actions,test,task,plugin,test,task,action,name,get,get,tasks,assert,that,task,has,size,1,return,task,get,0,get,task,id
TasksIT -> private TaskId waitForTestTaskStartOnAllNodes() throws Exception;1531179852;Wait for the test task to be running on all nodes and return the TaskId of the primary task.;private TaskId waitForTestTaskStartOnAllNodes() throws Exception {_        assertBusy(() -> {_            List<TaskInfo> tasks = client().admin().cluster().prepareListTasks().setActions(TestTaskPlugin.TestTaskAction.NAME + "[n]")_                    .get().getTasks()__            assertEquals(internalCluster().size(), tasks.size())__        })__        List<TaskInfo> task = client().admin().cluster().prepareListTasks().setActions(TestTaskPlugin.TestTaskAction.NAME).get().getTasks()__        assertThat(task, hasSize(1))__        return task.get(0).getTaskId()__    };wait,for,the,test,task,to,be,running,on,all,nodes,and,return,the,task,id,of,the,primary,task;private,task,id,wait,for,test,task,start,on,all,nodes,throws,exception,assert,busy,list,task,info,tasks,client,admin,cluster,prepare,list,tasks,set,actions,test,task,plugin,test,task,action,name,n,get,get,tasks,assert,equals,internal,cluster,size,tasks,size,list,task,info,task,client,admin,cluster,prepare,list,tasks,set,actions,test,task,plugin,test,task,action,name,get,get,tasks,assert,that,task,has,size,1,return,task,get,0,get,task,id
TasksIT -> private TaskId waitForTestTaskStartOnAllNodes() throws Exception;1543415307;Wait for the test task to be running on all nodes and return the TaskId of the primary task.;private TaskId waitForTestTaskStartOnAllNodes() throws Exception {_        assertBusy(() -> {_            List<TaskInfo> tasks = client().admin().cluster().prepareListTasks().setActions(TestTaskPlugin.TestTaskAction.NAME + "[n]")_                    .get().getTasks()__            assertEquals(internalCluster().size(), tasks.size())__        })__        List<TaskInfo> task = client().admin().cluster().prepareListTasks().setActions(TestTaskPlugin.TestTaskAction.NAME).get().getTasks()__        assertThat(task, hasSize(1))__        return task.get(0).getTaskId()__    };wait,for,the,test,task,to,be,running,on,all,nodes,and,return,the,task,id,of,the,primary,task;private,task,id,wait,for,test,task,start,on,all,nodes,throws,exception,assert,busy,list,task,info,tasks,client,admin,cluster,prepare,list,tasks,set,actions,test,task,plugin,test,task,action,name,n,get,get,tasks,assert,equals,internal,cluster,size,tasks,size,list,task,info,task,client,admin,cluster,prepare,list,tasks,set,actions,test,task,plugin,test,task,action,name,get,get,tasks,assert,that,task,has,size,1,return,task,get,0,get,task,id
TasksIT -> private TaskId waitForTestTaskStartOnAllNodes() throws Exception;1544035746;Wait for the test task to be running on all nodes and return the TaskId of the primary task.;private TaskId waitForTestTaskStartOnAllNodes() throws Exception {_        assertBusy(() -> {_            List<TaskInfo> tasks = client().admin().cluster().prepareListTasks().setActions(TestTaskPlugin.TestTaskAction.NAME + "[n]")_                    .get().getTasks()__            assertEquals(internalCluster().size(), tasks.size())__        })__        List<TaskInfo> task = client().admin().cluster().prepareListTasks().setActions(TestTaskPlugin.TestTaskAction.NAME).get().getTasks()__        assertThat(task, hasSize(1))__        return task.get(0).getTaskId()__    };wait,for,the,test,task,to,be,running,on,all,nodes,and,return,the,task,id,of,the,primary,task;private,task,id,wait,for,test,task,start,on,all,nodes,throws,exception,assert,busy,list,task,info,tasks,client,admin,cluster,prepare,list,tasks,set,actions,test,task,plugin,test,task,action,name,n,get,get,tasks,assert,equals,internal,cluster,size,tasks,size,list,task,info,task,client,admin,cluster,prepare,list,tasks,set,actions,test,task,plugin,test,task,action,name,get,get,tasks,assert,that,task,has,size,1,return,task,get,0,get,task,id
TasksIT -> private TaskId waitForTestTaskStartOnAllNodes() throws Exception;1548458964;Wait for the test task to be running on all nodes and return the TaskId of the primary task.;private TaskId waitForTestTaskStartOnAllNodes() throws Exception {_        assertBusy(() -> {_            List<TaskInfo> tasks = client().admin().cluster().prepareListTasks().setActions(TestTaskPlugin.TestTaskAction.NAME + "[n]")_                    .get().getTasks()__            assertEquals(internalCluster().size(), tasks.size())__        })__        List<TaskInfo> task = client().admin().cluster().prepareListTasks().setActions(TestTaskPlugin.TestTaskAction.NAME).get().getTasks()__        assertThat(task, hasSize(1))__        return task.get(0).getTaskId()__    };wait,for,the,test,task,to,be,running,on,all,nodes,and,return,the,task,id,of,the,primary,task;private,task,id,wait,for,test,task,start,on,all,nodes,throws,exception,assert,busy,list,task,info,tasks,client,admin,cluster,prepare,list,tasks,set,actions,test,task,plugin,test,task,action,name,n,get,get,tasks,assert,equals,internal,cluster,size,tasks,size,list,task,info,task,client,admin,cluster,prepare,list,tasks,set,actions,test,task,plugin,test,task,action,name,get,get,tasks,assert,that,task,has,size,1,return,task,get,0,get,task,id
TasksIT -> private TaskId waitForTestTaskStartOnAllNodes() throws Exception;1548958612;Wait for the test task to be running on all nodes and return the TaskId of the primary task.;private TaskId waitForTestTaskStartOnAllNodes() throws Exception {_        assertBusy(() -> {_            List<TaskInfo> tasks = client().admin().cluster().prepareListTasks().setActions(TestTaskPlugin.TestTaskAction.NAME + "[n]")_                    .get().getTasks()__            assertEquals(internalCluster().size(), tasks.size())__        })__        List<TaskInfo> task = client().admin().cluster().prepareListTasks().setActions(TestTaskPlugin.TestTaskAction.NAME).get().getTasks()__        assertThat(task, hasSize(1))__        return task.get(0).getTaskId()__    };wait,for,the,test,task,to,be,running,on,all,nodes,and,return,the,task,id,of,the,primary,task;private,task,id,wait,for,test,task,start,on,all,nodes,throws,exception,assert,busy,list,task,info,tasks,client,admin,cluster,prepare,list,tasks,set,actions,test,task,plugin,test,task,action,name,n,get,get,tasks,assert,equals,internal,cluster,size,tasks,size,list,task,info,task,client,admin,cluster,prepare,list,tasks,set,actions,test,task,plugin,test,task,action,name,get,get,tasks,assert,that,task,has,size,1,return,task,get,0,get,task,id
TasksIT -> public void testCanFetchIndexStatus() throws Exception;1524684173;Very basic "is it plugged in" style test that indexes a document and makes sure that you can fetch the status of the process. The_goal here is to verify that the large moving parts that make fetching task status work fit together rather than to verify any_particular status results from indexing. For that, look at {@link TransportReplicationActionTests}. We intentionally don't use the_task recording mechanism used in other places in this test so we can make sure that the status fetching works properly over the wire.;public void testCanFetchIndexStatus() throws Exception {_        _        CountDownLatch taskRegistered = new CountDownLatch(1)__        CountDownLatch letTaskFinish = new CountDownLatch(1)__        Thread index = null__        try {_            for (TransportService transportService : internalCluster().getInstances(TransportService.class)) {_                ((MockTaskManager) transportService.getTaskManager()).addListener(new MockTaskManagerListener() {_                    @Override_                    public void onTaskRegistered(Task task) {_                        if (task.getAction().startsWith(IndexAction.NAME)) {_                            taskRegistered.countDown()__                            logger.debug("Blocking [{}] starting", task)__                            try {_                                assertTrue(letTaskFinish.await(10, TimeUnit.SECONDS))__                            } catch (InterruptedException e) {_                                throw new RuntimeException(e)__                            }_                        }_                    }__                    @Override_                    public void onTaskUnregistered(Task task) {_                    }__                    @Override_                    public void waitForTaskCompletion(Task task) {_                    }_                })__            }_            _            index = new Thread(() -> {_                IndexResponse indexResponse = client().prepareIndex("test", "test").setSource("test", "test").get()__                assertArrayEquals(ReplicationResponse.EMPTY, indexResponse.getShardInfo().getFailures())__            })__            index.start()__            assertTrue(taskRegistered.await(10, TimeUnit.SECONDS))_ __            ListTasksResponse listResponse = client().admin().cluster().prepareListTasks().setActions("indices:data/write/index*")_                    .setDetailed(true).get()__            assertThat(listResponse.getTasks(), not(empty()))__            for (TaskInfo task : listResponse.getTasks()) {_                assertNotNull(task.getStatus())__                GetTaskResponse getResponse = client().admin().cluster().prepareGetTask(task.getTaskId()).get()__                assertFalse("task should still be running", getResponse.getTask().isCompleted())__                TaskInfo fetchedWithGet = getResponse.getTask().getTask()__                assertEquals(task.getId(), fetchedWithGet.getId())__                assertEquals(task.getType(), fetchedWithGet.getType())__                assertEquals(task.getAction(), fetchedWithGet.getAction())__                assertEquals(task.getDescription(), fetchedWithGet.getDescription())__                assertEquals(task.getStatus(), fetchedWithGet.getStatus())__                assertEquals(task.getStartTime(), fetchedWithGet.getStartTime())__                assertThat(fetchedWithGet.getRunningTimeNanos(), greaterThanOrEqualTo(task.getRunningTimeNanos()))__                assertEquals(task.isCancellable(), fetchedWithGet.isCancellable())__                assertEquals(task.getParentTaskId(), fetchedWithGet.getParentTaskId())__            }_        } finally {_            letTaskFinish.countDown()__            if (index != null) {_                index.join()__            }_            assertBusy(() -> {_                assertEquals(emptyList(),_                        client().admin().cluster().prepareListTasks().setActions("indices:data/write/index*").get().getTasks())__            })__        }_    };very,basic,is,it,plugged,in,style,test,that,indexes,a,document,and,makes,sure,that,you,can,fetch,the,status,of,the,process,the,goal,here,is,to,verify,that,the,large,moving,parts,that,make,fetching,task,status,work,fit,together,rather,than,to,verify,any,particular,status,results,from,indexing,for,that,look,at,link,transport,replication,action,tests,we,intentionally,don,t,use,the,task,recording,mechanism,used,in,other,places,in,this,test,so,we,can,make,sure,that,the,status,fetching,works,properly,over,the,wire;public,void,test,can,fetch,index,status,throws,exception,count,down,latch,task,registered,new,count,down,latch,1,count,down,latch,let,task,finish,new,count,down,latch,1,thread,index,null,try,for,transport,service,transport,service,internal,cluster,get,instances,transport,service,class,mock,task,manager,transport,service,get,task,manager,add,listener,new,mock,task,manager,listener,override,public,void,on,task,registered,task,task,if,task,get,action,starts,with,index,action,name,task,registered,count,down,logger,debug,blocking,starting,task,try,assert,true,let,task,finish,await,10,time,unit,seconds,catch,interrupted,exception,e,throw,new,runtime,exception,e,override,public,void,on,task,unregistered,task,task,override,public,void,wait,for,task,completion,task,task,index,new,thread,index,response,index,response,client,prepare,index,test,test,set,source,test,test,get,assert,array,equals,replication,response,empty,index,response,get,shard,info,get,failures,index,start,assert,true,task,registered,await,10,time,unit,seconds,list,tasks,response,list,response,client,admin,cluster,prepare,list,tasks,set,actions,indices,data,write,index,set,detailed,true,get,assert,that,list,response,get,tasks,not,empty,for,task,info,task,list,response,get,tasks,assert,not,null,task,get,status,get,task,response,get,response,client,admin,cluster,prepare,get,task,task,get,task,id,get,assert,false,task,should,still,be,running,get,response,get,task,is,completed,task,info,fetched,with,get,get,response,get,task,get,task,assert,equals,task,get,id,fetched,with,get,get,id,assert,equals,task,get,type,fetched,with,get,get,type,assert,equals,task,get,action,fetched,with,get,get,action,assert,equals,task,get,description,fetched,with,get,get,description,assert,equals,task,get,status,fetched,with,get,get,status,assert,equals,task,get,start,time,fetched,with,get,get,start,time,assert,that,fetched,with,get,get,running,time,nanos,greater,than,or,equal,to,task,get,running,time,nanos,assert,equals,task,is,cancellable,fetched,with,get,is,cancellable,assert,equals,task,get,parent,task,id,fetched,with,get,get,parent,task,id,finally,let,task,finish,count,down,if,index,null,index,join,assert,busy,assert,equals,empty,list,client,admin,cluster,prepare,list,tasks,set,actions,indices,data,write,index,get,get,tasks
TasksIT -> public void testCanFetchIndexStatus() throws Exception;1526510804;Very basic "is it plugged in" style test that indexes a document and makes sure that you can fetch the status of the process. The_goal here is to verify that the large moving parts that make fetching task status work fit together rather than to verify any_particular status results from indexing. For that, look at {@link TransportReplicationActionTests}. We intentionally don't use the_task recording mechanism used in other places in this test so we can make sure that the status fetching works properly over the wire.;public void testCanFetchIndexStatus() throws Exception {_        _        CountDownLatch taskRegistered = new CountDownLatch(1)__        CountDownLatch letTaskFinish = new CountDownLatch(1)__        Thread index = null__        try {_            for (TransportService transportService : internalCluster().getInstances(TransportService.class)) {_                ((MockTaskManager) transportService.getTaskManager()).addListener(new MockTaskManagerListener() {_                    @Override_                    public void onTaskRegistered(Task task) {_                        if (task.getAction().startsWith(IndexAction.NAME)) {_                            taskRegistered.countDown()__                            logger.debug("Blocking [{}] starting", task)__                            try {_                                assertTrue(letTaskFinish.await(10, TimeUnit.SECONDS))__                            } catch (InterruptedException e) {_                                throw new RuntimeException(e)__                            }_                        }_                    }__                    @Override_                    public void onTaskUnregistered(Task task) {_                    }__                    @Override_                    public void waitForTaskCompletion(Task task) {_                    }_                })__            }_            _            index = new Thread(() -> {_                IndexResponse indexResponse = client().prepareIndex("test", "test").setSource("test", "test").get()__                assertArrayEquals(ReplicationResponse.EMPTY, indexResponse.getShardInfo().getFailures())__            })__            index.start()__            assertTrue(taskRegistered.await(10, TimeUnit.SECONDS))_ __            ListTasksResponse listResponse = client().admin().cluster().prepareListTasks().setActions("indices:data/write/index*")_                    .setDetailed(true).get()__            assertThat(listResponse.getTasks(), not(empty()))__            for (TaskInfo task : listResponse.getTasks()) {_                assertNotNull(task.getStatus())__                GetTaskResponse getResponse = client().admin().cluster().prepareGetTask(task.getTaskId()).get()__                assertFalse("task should still be running", getResponse.getTask().isCompleted())__                TaskInfo fetchedWithGet = getResponse.getTask().getTask()__                assertEquals(task.getId(), fetchedWithGet.getId())__                assertEquals(task.getType(), fetchedWithGet.getType())__                assertEquals(task.getAction(), fetchedWithGet.getAction())__                assertEquals(task.getDescription(), fetchedWithGet.getDescription())__                assertEquals(task.getStatus(), fetchedWithGet.getStatus())__                assertEquals(task.getStartTime(), fetchedWithGet.getStartTime())__                assertThat(fetchedWithGet.getRunningTimeNanos(), greaterThanOrEqualTo(task.getRunningTimeNanos()))__                assertEquals(task.isCancellable(), fetchedWithGet.isCancellable())__                assertEquals(task.getParentTaskId(), fetchedWithGet.getParentTaskId())__            }_        } finally {_            letTaskFinish.countDown()__            if (index != null) {_                index.join()__            }_            assertBusy(() -> {_                assertEquals(emptyList(),_                        client().admin().cluster().prepareListTasks().setActions("indices:data/write/index*").get().getTasks())__            })__        }_    };very,basic,is,it,plugged,in,style,test,that,indexes,a,document,and,makes,sure,that,you,can,fetch,the,status,of,the,process,the,goal,here,is,to,verify,that,the,large,moving,parts,that,make,fetching,task,status,work,fit,together,rather,than,to,verify,any,particular,status,results,from,indexing,for,that,look,at,link,transport,replication,action,tests,we,intentionally,don,t,use,the,task,recording,mechanism,used,in,other,places,in,this,test,so,we,can,make,sure,that,the,status,fetching,works,properly,over,the,wire;public,void,test,can,fetch,index,status,throws,exception,count,down,latch,task,registered,new,count,down,latch,1,count,down,latch,let,task,finish,new,count,down,latch,1,thread,index,null,try,for,transport,service,transport,service,internal,cluster,get,instances,transport,service,class,mock,task,manager,transport,service,get,task,manager,add,listener,new,mock,task,manager,listener,override,public,void,on,task,registered,task,task,if,task,get,action,starts,with,index,action,name,task,registered,count,down,logger,debug,blocking,starting,task,try,assert,true,let,task,finish,await,10,time,unit,seconds,catch,interrupted,exception,e,throw,new,runtime,exception,e,override,public,void,on,task,unregistered,task,task,override,public,void,wait,for,task,completion,task,task,index,new,thread,index,response,index,response,client,prepare,index,test,test,set,source,test,test,get,assert,array,equals,replication,response,empty,index,response,get,shard,info,get,failures,index,start,assert,true,task,registered,await,10,time,unit,seconds,list,tasks,response,list,response,client,admin,cluster,prepare,list,tasks,set,actions,indices,data,write,index,set,detailed,true,get,assert,that,list,response,get,tasks,not,empty,for,task,info,task,list,response,get,tasks,assert,not,null,task,get,status,get,task,response,get,response,client,admin,cluster,prepare,get,task,task,get,task,id,get,assert,false,task,should,still,be,running,get,response,get,task,is,completed,task,info,fetched,with,get,get,response,get,task,get,task,assert,equals,task,get,id,fetched,with,get,get,id,assert,equals,task,get,type,fetched,with,get,get,type,assert,equals,task,get,action,fetched,with,get,get,action,assert,equals,task,get,description,fetched,with,get,get,description,assert,equals,task,get,status,fetched,with,get,get,status,assert,equals,task,get,start,time,fetched,with,get,get,start,time,assert,that,fetched,with,get,get,running,time,nanos,greater,than,or,equal,to,task,get,running,time,nanos,assert,equals,task,is,cancellable,fetched,with,get,is,cancellable,assert,equals,task,get,parent,task,id,fetched,with,get,get,parent,task,id,finally,let,task,finish,count,down,if,index,null,index,join,assert,busy,assert,equals,empty,list,client,admin,cluster,prepare,list,tasks,set,actions,indices,data,write,index,get,get,tasks
TasksIT -> public void testCanFetchIndexStatus() throws Exception;1527840262;Very basic "is it plugged in" style test that indexes a document and makes sure that you can fetch the status of the process. The_goal here is to verify that the large moving parts that make fetching task status work fit together rather than to verify any_particular status results from indexing. For that, look at {@link TransportReplicationActionTests}. We intentionally don't use the_task recording mechanism used in other places in this test so we can make sure that the status fetching works properly over the wire.;public void testCanFetchIndexStatus() throws Exception {_        _        CountDownLatch taskRegistered = new CountDownLatch(1)__        CountDownLatch letTaskFinish = new CountDownLatch(1)__        Thread index = null__        try {_            for (TransportService transportService : internalCluster().getInstances(TransportService.class)) {_                ((MockTaskManager) transportService.getTaskManager()).addListener(new MockTaskManagerListener() {_                    @Override_                    public void onTaskRegistered(Task task) {_                        if (task.getAction().startsWith(IndexAction.NAME)) {_                            taskRegistered.countDown()__                            logger.debug("Blocking [{}] starting", task)__                            try {_                                assertTrue(letTaskFinish.await(10, TimeUnit.SECONDS))__                            } catch (InterruptedException e) {_                                throw new RuntimeException(e)__                            }_                        }_                    }__                    @Override_                    public void onTaskUnregistered(Task task) {_                    }__                    @Override_                    public void waitForTaskCompletion(Task task) {_                    }_                })__            }_            _            index = new Thread(() -> {_                IndexResponse indexResponse = client().prepareIndex("test", "test").setSource("test", "test").get()__                assertArrayEquals(ReplicationResponse.EMPTY, indexResponse.getShardInfo().getFailures())__            })__            index.start()__            assertTrue(taskRegistered.await(10, TimeUnit.SECONDS))_ __            ListTasksResponse listResponse = client().admin().cluster().prepareListTasks().setActions("indices:data/write/index*")_                    .setDetailed(true).get()__            assertThat(listResponse.getTasks(), not(empty()))__            for (TaskInfo task : listResponse.getTasks()) {_                assertNotNull(task.getStatus())__                GetTaskResponse getResponse = client().admin().cluster().prepareGetTask(task.getTaskId()).get()__                assertFalse("task should still be running", getResponse.getTask().isCompleted())__                TaskInfo fetchedWithGet = getResponse.getTask().getTask()__                assertEquals(task.getId(), fetchedWithGet.getId())__                assertEquals(task.getType(), fetchedWithGet.getType())__                assertEquals(task.getAction(), fetchedWithGet.getAction())__                assertEquals(task.getDescription(), fetchedWithGet.getDescription())__                assertEquals(task.getStatus(), fetchedWithGet.getStatus())__                assertEquals(task.getStartTime(), fetchedWithGet.getStartTime())__                assertThat(fetchedWithGet.getRunningTimeNanos(), greaterThanOrEqualTo(task.getRunningTimeNanos()))__                assertEquals(task.isCancellable(), fetchedWithGet.isCancellable())__                assertEquals(task.getParentTaskId(), fetchedWithGet.getParentTaskId())__            }_        } finally {_            letTaskFinish.countDown()__            if (index != null) {_                index.join()__            }_            assertBusy(() -> {_                assertEquals(emptyList(),_                        client().admin().cluster().prepareListTasks().setActions("indices:data/write/index*").get().getTasks())__            })__        }_    };very,basic,is,it,plugged,in,style,test,that,indexes,a,document,and,makes,sure,that,you,can,fetch,the,status,of,the,process,the,goal,here,is,to,verify,that,the,large,moving,parts,that,make,fetching,task,status,work,fit,together,rather,than,to,verify,any,particular,status,results,from,indexing,for,that,look,at,link,transport,replication,action,tests,we,intentionally,don,t,use,the,task,recording,mechanism,used,in,other,places,in,this,test,so,we,can,make,sure,that,the,status,fetching,works,properly,over,the,wire;public,void,test,can,fetch,index,status,throws,exception,count,down,latch,task,registered,new,count,down,latch,1,count,down,latch,let,task,finish,new,count,down,latch,1,thread,index,null,try,for,transport,service,transport,service,internal,cluster,get,instances,transport,service,class,mock,task,manager,transport,service,get,task,manager,add,listener,new,mock,task,manager,listener,override,public,void,on,task,registered,task,task,if,task,get,action,starts,with,index,action,name,task,registered,count,down,logger,debug,blocking,starting,task,try,assert,true,let,task,finish,await,10,time,unit,seconds,catch,interrupted,exception,e,throw,new,runtime,exception,e,override,public,void,on,task,unregistered,task,task,override,public,void,wait,for,task,completion,task,task,index,new,thread,index,response,index,response,client,prepare,index,test,test,set,source,test,test,get,assert,array,equals,replication,response,empty,index,response,get,shard,info,get,failures,index,start,assert,true,task,registered,await,10,time,unit,seconds,list,tasks,response,list,response,client,admin,cluster,prepare,list,tasks,set,actions,indices,data,write,index,set,detailed,true,get,assert,that,list,response,get,tasks,not,empty,for,task,info,task,list,response,get,tasks,assert,not,null,task,get,status,get,task,response,get,response,client,admin,cluster,prepare,get,task,task,get,task,id,get,assert,false,task,should,still,be,running,get,response,get,task,is,completed,task,info,fetched,with,get,get,response,get,task,get,task,assert,equals,task,get,id,fetched,with,get,get,id,assert,equals,task,get,type,fetched,with,get,get,type,assert,equals,task,get,action,fetched,with,get,get,action,assert,equals,task,get,description,fetched,with,get,get,description,assert,equals,task,get,status,fetched,with,get,get,status,assert,equals,task,get,start,time,fetched,with,get,get,start,time,assert,that,fetched,with,get,get,running,time,nanos,greater,than,or,equal,to,task,get,running,time,nanos,assert,equals,task,is,cancellable,fetched,with,get,is,cancellable,assert,equals,task,get,parent,task,id,fetched,with,get,get,parent,task,id,finally,let,task,finish,count,down,if,index,null,index,join,assert,busy,assert,equals,empty,list,client,admin,cluster,prepare,list,tasks,set,actions,indices,data,write,index,get,get,tasks
TasksIT -> public void testCanFetchIndexStatus() throws Exception;1528762805;Very basic "is it plugged in" style test that indexes a document and makes sure that you can fetch the status of the process. The_goal here is to verify that the large moving parts that make fetching task status work fit together rather than to verify any_particular status results from indexing. For that, look at {@link TransportReplicationActionTests}. We intentionally don't use the_task recording mechanism used in other places in this test so we can make sure that the status fetching works properly over the wire.;public void testCanFetchIndexStatus() throws Exception {_        _        CountDownLatch taskRegistered = new CountDownLatch(1)__        CountDownLatch letTaskFinish = new CountDownLatch(1)__        Thread index = null__        try {_            for (TransportService transportService : internalCluster().getInstances(TransportService.class)) {_                ((MockTaskManager) transportService.getTaskManager()).addListener(new MockTaskManagerListener() {_                    @Override_                    public void onTaskRegistered(Task task) {_                        if (task.getAction().startsWith(IndexAction.NAME)) {_                            taskRegistered.countDown()__                            logger.debug("Blocking [{}] starting", task)__                            try {_                                assertTrue(letTaskFinish.await(10, TimeUnit.SECONDS))__                            } catch (InterruptedException e) {_                                throw new RuntimeException(e)__                            }_                        }_                    }__                    @Override_                    public void onTaskUnregistered(Task task) {_                    }__                    @Override_                    public void waitForTaskCompletion(Task task) {_                    }_                })__            }_            _            index = new Thread(() -> {_                IndexResponse indexResponse = client().prepareIndex("test", "test").setSource("test", "test").get()__                assertArrayEquals(ReplicationResponse.EMPTY, indexResponse.getShardInfo().getFailures())__            })__            index.start()__            assertTrue(taskRegistered.await(10, TimeUnit.SECONDS))_ __            ListTasksResponse listResponse = client().admin().cluster().prepareListTasks().setActions("indices:data/write/index*")_                    .setDetailed(true).get()__            assertThat(listResponse.getTasks(), not(empty()))__            for (TaskInfo task : listResponse.getTasks()) {_                assertNotNull(task.getStatus())__                GetTaskResponse getResponse = client().admin().cluster().prepareGetTask(task.getTaskId()).get()__                assertFalse("task should still be running", getResponse.getTask().isCompleted())__                TaskInfo fetchedWithGet = getResponse.getTask().getTask()__                assertEquals(task.getId(), fetchedWithGet.getId())__                assertEquals(task.getType(), fetchedWithGet.getType())__                assertEquals(task.getAction(), fetchedWithGet.getAction())__                assertEquals(task.getDescription(), fetchedWithGet.getDescription())__                assertEquals(task.getStatus(), fetchedWithGet.getStatus())__                assertEquals(task.getStartTime(), fetchedWithGet.getStartTime())__                assertThat(fetchedWithGet.getRunningTimeNanos(), greaterThanOrEqualTo(task.getRunningTimeNanos()))__                assertEquals(task.isCancellable(), fetchedWithGet.isCancellable())__                assertEquals(task.getParentTaskId(), fetchedWithGet.getParentTaskId())__            }_        } finally {_            letTaskFinish.countDown()__            if (index != null) {_                index.join()__            }_            assertBusy(() -> {_                assertEquals(emptyList(),_                        client().admin().cluster().prepareListTasks().setActions("indices:data/write/index*").get().getTasks())__            })__        }_    };very,basic,is,it,plugged,in,style,test,that,indexes,a,document,and,makes,sure,that,you,can,fetch,the,status,of,the,process,the,goal,here,is,to,verify,that,the,large,moving,parts,that,make,fetching,task,status,work,fit,together,rather,than,to,verify,any,particular,status,results,from,indexing,for,that,look,at,link,transport,replication,action,tests,we,intentionally,don,t,use,the,task,recording,mechanism,used,in,other,places,in,this,test,so,we,can,make,sure,that,the,status,fetching,works,properly,over,the,wire;public,void,test,can,fetch,index,status,throws,exception,count,down,latch,task,registered,new,count,down,latch,1,count,down,latch,let,task,finish,new,count,down,latch,1,thread,index,null,try,for,transport,service,transport,service,internal,cluster,get,instances,transport,service,class,mock,task,manager,transport,service,get,task,manager,add,listener,new,mock,task,manager,listener,override,public,void,on,task,registered,task,task,if,task,get,action,starts,with,index,action,name,task,registered,count,down,logger,debug,blocking,starting,task,try,assert,true,let,task,finish,await,10,time,unit,seconds,catch,interrupted,exception,e,throw,new,runtime,exception,e,override,public,void,on,task,unregistered,task,task,override,public,void,wait,for,task,completion,task,task,index,new,thread,index,response,index,response,client,prepare,index,test,test,set,source,test,test,get,assert,array,equals,replication,response,empty,index,response,get,shard,info,get,failures,index,start,assert,true,task,registered,await,10,time,unit,seconds,list,tasks,response,list,response,client,admin,cluster,prepare,list,tasks,set,actions,indices,data,write,index,set,detailed,true,get,assert,that,list,response,get,tasks,not,empty,for,task,info,task,list,response,get,tasks,assert,not,null,task,get,status,get,task,response,get,response,client,admin,cluster,prepare,get,task,task,get,task,id,get,assert,false,task,should,still,be,running,get,response,get,task,is,completed,task,info,fetched,with,get,get,response,get,task,get,task,assert,equals,task,get,id,fetched,with,get,get,id,assert,equals,task,get,type,fetched,with,get,get,type,assert,equals,task,get,action,fetched,with,get,get,action,assert,equals,task,get,description,fetched,with,get,get,description,assert,equals,task,get,status,fetched,with,get,get,status,assert,equals,task,get,start,time,fetched,with,get,get,start,time,assert,that,fetched,with,get,get,running,time,nanos,greater,than,or,equal,to,task,get,running,time,nanos,assert,equals,task,is,cancellable,fetched,with,get,is,cancellable,assert,equals,task,get,parent,task,id,fetched,with,get,get,parent,task,id,finally,let,task,finish,count,down,if,index,null,index,join,assert,busy,assert,equals,empty,list,client,admin,cluster,prepare,list,tasks,set,actions,indices,data,write,index,get,get,tasks
TasksIT -> public void testCanFetchIndexStatus() throws Exception;1531179852;Very basic "is it plugged in" style test that indexes a document and makes sure that you can fetch the status of the process. The_goal here is to verify that the large moving parts that make fetching task status work fit together rather than to verify any_particular status results from indexing. For that, look at {@link TransportReplicationActionTests}. We intentionally don't use the_task recording mechanism used in other places in this test so we can make sure that the status fetching works properly over the wire.;public void testCanFetchIndexStatus() throws Exception {_        _        CountDownLatch taskRegistered = new CountDownLatch(1)__        CountDownLatch letTaskFinish = new CountDownLatch(1)__        Thread index = null__        try {_            for (TransportService transportService : internalCluster().getInstances(TransportService.class)) {_                ((MockTaskManager) transportService.getTaskManager()).addListener(new MockTaskManagerListener() {_                    @Override_                    public void onTaskRegistered(Task task) {_                        if (task.getAction().startsWith(IndexAction.NAME)) {_                            taskRegistered.countDown()__                            logger.debug("Blocking [{}] starting", task)__                            try {_                                assertTrue(letTaskFinish.await(10, TimeUnit.SECONDS))__                            } catch (InterruptedException e) {_                                throw new RuntimeException(e)__                            }_                        }_                    }__                    @Override_                    public void onTaskUnregistered(Task task) {_                    }__                    @Override_                    public void waitForTaskCompletion(Task task) {_                    }_                })__            }_            _            index = new Thread(() -> {_                IndexResponse indexResponse = client().prepareIndex("test", "test").setSource("test", "test").get()__                assertArrayEquals(ReplicationResponse.EMPTY, indexResponse.getShardInfo().getFailures())__            })__            index.start()__            assertTrue(taskRegistered.await(10, TimeUnit.SECONDS))_ __            ListTasksResponse listResponse = client().admin().cluster().prepareListTasks().setActions("indices:data/write/index*")_                    .setDetailed(true).get()__            assertThat(listResponse.getTasks(), not(empty()))__            for (TaskInfo task : listResponse.getTasks()) {_                assertNotNull(task.getStatus())__                GetTaskResponse getResponse = client().admin().cluster().prepareGetTask(task.getTaskId()).get()__                assertFalse("task should still be running", getResponse.getTask().isCompleted())__                TaskInfo fetchedWithGet = getResponse.getTask().getTask()__                assertEquals(task.getId(), fetchedWithGet.getId())__                assertEquals(task.getType(), fetchedWithGet.getType())__                assertEquals(task.getAction(), fetchedWithGet.getAction())__                assertEquals(task.getDescription(), fetchedWithGet.getDescription())__                assertEquals(task.getStatus(), fetchedWithGet.getStatus())__                assertEquals(task.getStartTime(), fetchedWithGet.getStartTime())__                assertThat(fetchedWithGet.getRunningTimeNanos(), greaterThanOrEqualTo(task.getRunningTimeNanos()))__                assertEquals(task.isCancellable(), fetchedWithGet.isCancellable())__                assertEquals(task.getParentTaskId(), fetchedWithGet.getParentTaskId())__            }_        } finally {_            letTaskFinish.countDown()__            if (index != null) {_                index.join()__            }_            assertBusy(() -> {_                assertEquals(emptyList(),_                        client().admin().cluster().prepareListTasks().setActions("indices:data/write/index*").get().getTasks())__            })__        }_    };very,basic,is,it,plugged,in,style,test,that,indexes,a,document,and,makes,sure,that,you,can,fetch,the,status,of,the,process,the,goal,here,is,to,verify,that,the,large,moving,parts,that,make,fetching,task,status,work,fit,together,rather,than,to,verify,any,particular,status,results,from,indexing,for,that,look,at,link,transport,replication,action,tests,we,intentionally,don,t,use,the,task,recording,mechanism,used,in,other,places,in,this,test,so,we,can,make,sure,that,the,status,fetching,works,properly,over,the,wire;public,void,test,can,fetch,index,status,throws,exception,count,down,latch,task,registered,new,count,down,latch,1,count,down,latch,let,task,finish,new,count,down,latch,1,thread,index,null,try,for,transport,service,transport,service,internal,cluster,get,instances,transport,service,class,mock,task,manager,transport,service,get,task,manager,add,listener,new,mock,task,manager,listener,override,public,void,on,task,registered,task,task,if,task,get,action,starts,with,index,action,name,task,registered,count,down,logger,debug,blocking,starting,task,try,assert,true,let,task,finish,await,10,time,unit,seconds,catch,interrupted,exception,e,throw,new,runtime,exception,e,override,public,void,on,task,unregistered,task,task,override,public,void,wait,for,task,completion,task,task,index,new,thread,index,response,index,response,client,prepare,index,test,test,set,source,test,test,get,assert,array,equals,replication,response,empty,index,response,get,shard,info,get,failures,index,start,assert,true,task,registered,await,10,time,unit,seconds,list,tasks,response,list,response,client,admin,cluster,prepare,list,tasks,set,actions,indices,data,write,index,set,detailed,true,get,assert,that,list,response,get,tasks,not,empty,for,task,info,task,list,response,get,tasks,assert,not,null,task,get,status,get,task,response,get,response,client,admin,cluster,prepare,get,task,task,get,task,id,get,assert,false,task,should,still,be,running,get,response,get,task,is,completed,task,info,fetched,with,get,get,response,get,task,get,task,assert,equals,task,get,id,fetched,with,get,get,id,assert,equals,task,get,type,fetched,with,get,get,type,assert,equals,task,get,action,fetched,with,get,get,action,assert,equals,task,get,description,fetched,with,get,get,description,assert,equals,task,get,status,fetched,with,get,get,status,assert,equals,task,get,start,time,fetched,with,get,get,start,time,assert,that,fetched,with,get,get,running,time,nanos,greater,than,or,equal,to,task,get,running,time,nanos,assert,equals,task,is,cancellable,fetched,with,get,is,cancellable,assert,equals,task,get,parent,task,id,fetched,with,get,get,parent,task,id,finally,let,task,finish,count,down,if,index,null,index,join,assert,busy,assert,equals,empty,list,client,admin,cluster,prepare,list,tasks,set,actions,indices,data,write,index,get,get,tasks
TasksIT -> public void testCanFetchIndexStatus() throws Exception;1543415307;Very basic "is it plugged in" style test that indexes a document and makes sure that you can fetch the status of the process. The_goal here is to verify that the large moving parts that make fetching task status work fit together rather than to verify any_particular status results from indexing. For that, look at {@link TransportReplicationActionTests}. We intentionally don't use the_task recording mechanism used in other places in this test so we can make sure that the status fetching works properly over the wire.;public void testCanFetchIndexStatus() throws Exception {_        _        CountDownLatch taskRegistered = new CountDownLatch(1)__        CountDownLatch letTaskFinish = new CountDownLatch(1)__        Thread index = null__        try {_            for (TransportService transportService : internalCluster().getInstances(TransportService.class)) {_                ((MockTaskManager) transportService.getTaskManager()).addListener(new MockTaskManagerListener() {_                    @Override_                    public void onTaskRegistered(Task task) {_                        if (task.getAction().startsWith(IndexAction.NAME)) {_                            taskRegistered.countDown()__                            logger.debug("Blocking [{}] starting", task)__                            try {_                                assertTrue(letTaskFinish.await(10, TimeUnit.SECONDS))__                            } catch (InterruptedException e) {_                                throw new RuntimeException(e)__                            }_                        }_                    }__                    @Override_                    public void onTaskUnregistered(Task task) {_                    }__                    @Override_                    public void waitForTaskCompletion(Task task) {_                    }_                })__            }_            _            index = new Thread(() -> {_                IndexResponse indexResponse = client().prepareIndex("test", "test").setSource("test", "test").get()__                assertArrayEquals(ReplicationResponse.EMPTY, indexResponse.getShardInfo().getFailures())__            })__            index.start()__            assertTrue(taskRegistered.await(10, TimeUnit.SECONDS))_ __            ListTasksResponse listResponse = client().admin().cluster().prepareListTasks().setActions("indices:data/write/index*")_                    .setDetailed(true).get()__            assertThat(listResponse.getTasks(), not(empty()))__            for (TaskInfo task : listResponse.getTasks()) {_                assertNotNull(task.getStatus())__                GetTaskResponse getResponse = client().admin().cluster().prepareGetTask(task.getTaskId()).get()__                assertFalse("task should still be running", getResponse.getTask().isCompleted())__                TaskInfo fetchedWithGet = getResponse.getTask().getTask()__                assertEquals(task.getId(), fetchedWithGet.getId())__                assertEquals(task.getType(), fetchedWithGet.getType())__                assertEquals(task.getAction(), fetchedWithGet.getAction())__                assertEquals(task.getDescription(), fetchedWithGet.getDescription())__                assertEquals(task.getStatus(), fetchedWithGet.getStatus())__                assertEquals(task.getStartTime(), fetchedWithGet.getStartTime())__                assertThat(fetchedWithGet.getRunningTimeNanos(), greaterThanOrEqualTo(task.getRunningTimeNanos()))__                assertEquals(task.isCancellable(), fetchedWithGet.isCancellable())__                assertEquals(task.getParentTaskId(), fetchedWithGet.getParentTaskId())__            }_        } finally {_            letTaskFinish.countDown()__            if (index != null) {_                index.join()__            }_            assertBusy(() -> {_                assertEquals(emptyList(),_                        client().admin().cluster().prepareListTasks().setActions("indices:data/write/index*").get().getTasks())__            })__        }_    };very,basic,is,it,plugged,in,style,test,that,indexes,a,document,and,makes,sure,that,you,can,fetch,the,status,of,the,process,the,goal,here,is,to,verify,that,the,large,moving,parts,that,make,fetching,task,status,work,fit,together,rather,than,to,verify,any,particular,status,results,from,indexing,for,that,look,at,link,transport,replication,action,tests,we,intentionally,don,t,use,the,task,recording,mechanism,used,in,other,places,in,this,test,so,we,can,make,sure,that,the,status,fetching,works,properly,over,the,wire;public,void,test,can,fetch,index,status,throws,exception,count,down,latch,task,registered,new,count,down,latch,1,count,down,latch,let,task,finish,new,count,down,latch,1,thread,index,null,try,for,transport,service,transport,service,internal,cluster,get,instances,transport,service,class,mock,task,manager,transport,service,get,task,manager,add,listener,new,mock,task,manager,listener,override,public,void,on,task,registered,task,task,if,task,get,action,starts,with,index,action,name,task,registered,count,down,logger,debug,blocking,starting,task,try,assert,true,let,task,finish,await,10,time,unit,seconds,catch,interrupted,exception,e,throw,new,runtime,exception,e,override,public,void,on,task,unregistered,task,task,override,public,void,wait,for,task,completion,task,task,index,new,thread,index,response,index,response,client,prepare,index,test,test,set,source,test,test,get,assert,array,equals,replication,response,empty,index,response,get,shard,info,get,failures,index,start,assert,true,task,registered,await,10,time,unit,seconds,list,tasks,response,list,response,client,admin,cluster,prepare,list,tasks,set,actions,indices,data,write,index,set,detailed,true,get,assert,that,list,response,get,tasks,not,empty,for,task,info,task,list,response,get,tasks,assert,not,null,task,get,status,get,task,response,get,response,client,admin,cluster,prepare,get,task,task,get,task,id,get,assert,false,task,should,still,be,running,get,response,get,task,is,completed,task,info,fetched,with,get,get,response,get,task,get,task,assert,equals,task,get,id,fetched,with,get,get,id,assert,equals,task,get,type,fetched,with,get,get,type,assert,equals,task,get,action,fetched,with,get,get,action,assert,equals,task,get,description,fetched,with,get,get,description,assert,equals,task,get,status,fetched,with,get,get,status,assert,equals,task,get,start,time,fetched,with,get,get,start,time,assert,that,fetched,with,get,get,running,time,nanos,greater,than,or,equal,to,task,get,running,time,nanos,assert,equals,task,is,cancellable,fetched,with,get,is,cancellable,assert,equals,task,get,parent,task,id,fetched,with,get,get,parent,task,id,finally,let,task,finish,count,down,if,index,null,index,join,assert,busy,assert,equals,empty,list,client,admin,cluster,prepare,list,tasks,set,actions,indices,data,write,index,get,get,tasks
TasksIT -> public void testCanFetchIndexStatus() throws Exception;1544035746;Very basic "is it plugged in" style test that indexes a document and makes sure that you can fetch the status of the process. The_goal here is to verify that the large moving parts that make fetching task status work fit together rather than to verify any_particular status results from indexing. For that, look at {@link TransportReplicationActionTests}. We intentionally don't use the_task recording mechanism used in other places in this test so we can make sure that the status fetching works properly over the wire.;public void testCanFetchIndexStatus() throws Exception {_        _        CountDownLatch taskRegistered = new CountDownLatch(1)__        CountDownLatch letTaskFinish = new CountDownLatch(1)__        Thread index = null__        try {_            for (TransportService transportService : internalCluster().getInstances(TransportService.class)) {_                ((MockTaskManager) transportService.getTaskManager()).addListener(new MockTaskManagerListener() {_                    @Override_                    public void onTaskRegistered(Task task) {_                        if (task.getAction().startsWith(IndexAction.NAME)) {_                            taskRegistered.countDown()__                            logger.debug("Blocking [{}] starting", task)__                            try {_                                assertTrue(letTaskFinish.await(10, TimeUnit.SECONDS))__                            } catch (InterruptedException e) {_                                throw new RuntimeException(e)__                            }_                        }_                    }__                    @Override_                    public void onTaskUnregistered(Task task) {_                    }__                    @Override_                    public void waitForTaskCompletion(Task task) {_                    }_                })__            }_            _            index = new Thread(() -> {_                IndexResponse indexResponse = client().prepareIndex("test", "test").setSource("test", "test").get()__                assertArrayEquals(ReplicationResponse.EMPTY, indexResponse.getShardInfo().getFailures())__            })__            index.start()__            assertTrue(taskRegistered.await(10, TimeUnit.SECONDS))_ __            ListTasksResponse listResponse = client().admin().cluster().prepareListTasks().setActions("indices:data/write/index*")_                    .setDetailed(true).get()__            assertThat(listResponse.getTasks(), not(empty()))__            for (TaskInfo task : listResponse.getTasks()) {_                assertNotNull(task.getStatus())__                GetTaskResponse getResponse = client().admin().cluster().prepareGetTask(task.getTaskId()).get()__                assertFalse("task should still be running", getResponse.getTask().isCompleted())__                TaskInfo fetchedWithGet = getResponse.getTask().getTask()__                assertEquals(task.getId(), fetchedWithGet.getId())__                assertEquals(task.getType(), fetchedWithGet.getType())__                assertEquals(task.getAction(), fetchedWithGet.getAction())__                assertEquals(task.getDescription(), fetchedWithGet.getDescription())__                assertEquals(task.getStatus(), fetchedWithGet.getStatus())__                assertEquals(task.getStartTime(), fetchedWithGet.getStartTime())__                assertThat(fetchedWithGet.getRunningTimeNanos(), greaterThanOrEqualTo(task.getRunningTimeNanos()))__                assertEquals(task.isCancellable(), fetchedWithGet.isCancellable())__                assertEquals(task.getParentTaskId(), fetchedWithGet.getParentTaskId())__            }_        } finally {_            letTaskFinish.countDown()__            if (index != null) {_                index.join()__            }_            assertBusy(() -> {_                assertEquals(emptyList(),_                        client().admin().cluster().prepareListTasks().setActions("indices:data/write/index*").get().getTasks())__            })__        }_    };very,basic,is,it,plugged,in,style,test,that,indexes,a,document,and,makes,sure,that,you,can,fetch,the,status,of,the,process,the,goal,here,is,to,verify,that,the,large,moving,parts,that,make,fetching,task,status,work,fit,together,rather,than,to,verify,any,particular,status,results,from,indexing,for,that,look,at,link,transport,replication,action,tests,we,intentionally,don,t,use,the,task,recording,mechanism,used,in,other,places,in,this,test,so,we,can,make,sure,that,the,status,fetching,works,properly,over,the,wire;public,void,test,can,fetch,index,status,throws,exception,count,down,latch,task,registered,new,count,down,latch,1,count,down,latch,let,task,finish,new,count,down,latch,1,thread,index,null,try,for,transport,service,transport,service,internal,cluster,get,instances,transport,service,class,mock,task,manager,transport,service,get,task,manager,add,listener,new,mock,task,manager,listener,override,public,void,on,task,registered,task,task,if,task,get,action,starts,with,index,action,name,task,registered,count,down,logger,debug,blocking,starting,task,try,assert,true,let,task,finish,await,10,time,unit,seconds,catch,interrupted,exception,e,throw,new,runtime,exception,e,override,public,void,on,task,unregistered,task,task,override,public,void,wait,for,task,completion,task,task,index,new,thread,index,response,index,response,client,prepare,index,test,test,set,source,test,test,get,assert,array,equals,replication,response,empty,index,response,get,shard,info,get,failures,index,start,assert,true,task,registered,await,10,time,unit,seconds,list,tasks,response,list,response,client,admin,cluster,prepare,list,tasks,set,actions,indices,data,write,index,set,detailed,true,get,assert,that,list,response,get,tasks,not,empty,for,task,info,task,list,response,get,tasks,assert,not,null,task,get,status,get,task,response,get,response,client,admin,cluster,prepare,get,task,task,get,task,id,get,assert,false,task,should,still,be,running,get,response,get,task,is,completed,task,info,fetched,with,get,get,response,get,task,get,task,assert,equals,task,get,id,fetched,with,get,get,id,assert,equals,task,get,type,fetched,with,get,get,type,assert,equals,task,get,action,fetched,with,get,get,action,assert,equals,task,get,description,fetched,with,get,get,description,assert,equals,task,get,status,fetched,with,get,get,status,assert,equals,task,get,start,time,fetched,with,get,get,start,time,assert,that,fetched,with,get,get,running,time,nanos,greater,than,or,equal,to,task,get,running,time,nanos,assert,equals,task,is,cancellable,fetched,with,get,is,cancellable,assert,equals,task,get,parent,task,id,fetched,with,get,get,parent,task,id,finally,let,task,finish,count,down,if,index,null,index,join,assert,busy,assert,equals,empty,list,client,admin,cluster,prepare,list,tasks,set,actions,indices,data,write,index,get,get,tasks
TasksIT -> public void testCanFetchIndexStatus() throws Exception;1548458964;Very basic "is it plugged in" style test that indexes a document and makes sure that you can fetch the status of the process. The_goal here is to verify that the large moving parts that make fetching task status work fit together rather than to verify any_particular status results from indexing. For that, look at {@link TransportReplicationActionTests}. We intentionally don't use the_task recording mechanism used in other places in this test so we can make sure that the status fetching works properly over the wire.;public void testCanFetchIndexStatus() throws Exception {_        _        CountDownLatch taskRegistered = new CountDownLatch(1)__        CountDownLatch letTaskFinish = new CountDownLatch(1)__        Thread index = null__        try {_            for (TransportService transportService : internalCluster().getInstances(TransportService.class)) {_                ((MockTaskManager) transportService.getTaskManager()).addListener(new MockTaskManagerListener() {_                    @Override_                    public void onTaskRegistered(Task task) {_                        if (task.getAction().startsWith(IndexAction.NAME)) {_                            taskRegistered.countDown()__                            logger.debug("Blocking [{}] starting", task)__                            try {_                                assertTrue(letTaskFinish.await(10, TimeUnit.SECONDS))__                            } catch (InterruptedException e) {_                                throw new RuntimeException(e)__                            }_                        }_                    }__                    @Override_                    public void onTaskUnregistered(Task task) {_                    }__                    @Override_                    public void waitForTaskCompletion(Task task) {_                    }_                })__            }_            _            index = new Thread(() -> {_                IndexResponse indexResponse = client().prepareIndex("test", "test").setSource("test", "test").get()__                assertArrayEquals(ReplicationResponse.EMPTY, indexResponse.getShardInfo().getFailures())__            })__            index.start()__            assertTrue(taskRegistered.await(10, TimeUnit.SECONDS))_ __            ListTasksResponse listResponse = client().admin().cluster().prepareListTasks().setActions("indices:data/write/index*")_                    .setDetailed(true).get()__            assertThat(listResponse.getTasks(), not(empty()))__            for (TaskInfo task : listResponse.getTasks()) {_                assertNotNull(task.getStatus())__                GetTaskResponse getResponse = client().admin().cluster().prepareGetTask(task.getTaskId()).get()__                assertFalse("task should still be running", getResponse.getTask().isCompleted())__                TaskInfo fetchedWithGet = getResponse.getTask().getTask()__                assertEquals(task.getId(), fetchedWithGet.getId())__                assertEquals(task.getType(), fetchedWithGet.getType())__                assertEquals(task.getAction(), fetchedWithGet.getAction())__                assertEquals(task.getDescription(), fetchedWithGet.getDescription())__                assertEquals(task.getStatus(), fetchedWithGet.getStatus())__                assertEquals(task.getStartTime(), fetchedWithGet.getStartTime())__                assertThat(fetchedWithGet.getRunningTimeNanos(), greaterThanOrEqualTo(task.getRunningTimeNanos()))__                assertEquals(task.isCancellable(), fetchedWithGet.isCancellable())__                assertEquals(task.getParentTaskId(), fetchedWithGet.getParentTaskId())__            }_        } finally {_            letTaskFinish.countDown()__            if (index != null) {_                index.join()__            }_            assertBusy(() -> {_                assertEquals(emptyList(),_                        client().admin().cluster().prepareListTasks().setActions("indices:data/write/index*").get().getTasks())__            })__        }_    };very,basic,is,it,plugged,in,style,test,that,indexes,a,document,and,makes,sure,that,you,can,fetch,the,status,of,the,process,the,goal,here,is,to,verify,that,the,large,moving,parts,that,make,fetching,task,status,work,fit,together,rather,than,to,verify,any,particular,status,results,from,indexing,for,that,look,at,link,transport,replication,action,tests,we,intentionally,don,t,use,the,task,recording,mechanism,used,in,other,places,in,this,test,so,we,can,make,sure,that,the,status,fetching,works,properly,over,the,wire;public,void,test,can,fetch,index,status,throws,exception,count,down,latch,task,registered,new,count,down,latch,1,count,down,latch,let,task,finish,new,count,down,latch,1,thread,index,null,try,for,transport,service,transport,service,internal,cluster,get,instances,transport,service,class,mock,task,manager,transport,service,get,task,manager,add,listener,new,mock,task,manager,listener,override,public,void,on,task,registered,task,task,if,task,get,action,starts,with,index,action,name,task,registered,count,down,logger,debug,blocking,starting,task,try,assert,true,let,task,finish,await,10,time,unit,seconds,catch,interrupted,exception,e,throw,new,runtime,exception,e,override,public,void,on,task,unregistered,task,task,override,public,void,wait,for,task,completion,task,task,index,new,thread,index,response,index,response,client,prepare,index,test,test,set,source,test,test,get,assert,array,equals,replication,response,empty,index,response,get,shard,info,get,failures,index,start,assert,true,task,registered,await,10,time,unit,seconds,list,tasks,response,list,response,client,admin,cluster,prepare,list,tasks,set,actions,indices,data,write,index,set,detailed,true,get,assert,that,list,response,get,tasks,not,empty,for,task,info,task,list,response,get,tasks,assert,not,null,task,get,status,get,task,response,get,response,client,admin,cluster,prepare,get,task,task,get,task,id,get,assert,false,task,should,still,be,running,get,response,get,task,is,completed,task,info,fetched,with,get,get,response,get,task,get,task,assert,equals,task,get,id,fetched,with,get,get,id,assert,equals,task,get,type,fetched,with,get,get,type,assert,equals,task,get,action,fetched,with,get,get,action,assert,equals,task,get,description,fetched,with,get,get,description,assert,equals,task,get,status,fetched,with,get,get,status,assert,equals,task,get,start,time,fetched,with,get,get,start,time,assert,that,fetched,with,get,get,running,time,nanos,greater,than,or,equal,to,task,get,running,time,nanos,assert,equals,task,is,cancellable,fetched,with,get,is,cancellable,assert,equals,task,get,parent,task,id,fetched,with,get,get,parent,task,id,finally,let,task,finish,count,down,if,index,null,index,join,assert,busy,assert,equals,empty,list,client,admin,cluster,prepare,list,tasks,set,actions,indices,data,write,index,get,get,tasks
TasksIT -> public void testCanFetchIndexStatus() throws Exception;1548958612;Very basic "is it plugged in" style test that indexes a document and makes sure that you can fetch the status of the process. The_goal here is to verify that the large moving parts that make fetching task status work fit together rather than to verify any_particular status results from indexing. For that, look at {@link TransportReplicationActionTests}. We intentionally don't use the_task recording mechanism used in other places in this test so we can make sure that the status fetching works properly over the wire.;public void testCanFetchIndexStatus() throws Exception {_        _        CountDownLatch taskRegistered = new CountDownLatch(1)__        CountDownLatch letTaskFinish = new CountDownLatch(1)__        Thread index = null__        try {_            for (TransportService transportService : internalCluster().getInstances(TransportService.class)) {_                ((MockTaskManager) transportService.getTaskManager()).addListener(new MockTaskManagerListener() {_                    @Override_                    public void onTaskRegistered(Task task) {_                        if (task.getAction().startsWith(IndexAction.NAME)) {_                            taskRegistered.countDown()__                            logger.debug("Blocking [{}] starting", task)__                            try {_                                assertTrue(letTaskFinish.await(10, TimeUnit.SECONDS))__                            } catch (InterruptedException e) {_                                throw new RuntimeException(e)__                            }_                        }_                    }__                    @Override_                    public void onTaskUnregistered(Task task) {_                    }__                    @Override_                    public void waitForTaskCompletion(Task task) {_                    }_                })__            }_            _            index = new Thread(() -> {_                IndexResponse indexResponse = client().prepareIndex("test", "test").setSource("test", "test").get()__                assertArrayEquals(ReplicationResponse.EMPTY, indexResponse.getShardInfo().getFailures())__            })__            index.start()__            assertTrue(taskRegistered.await(10, TimeUnit.SECONDS))_ __            ListTasksResponse listResponse = client().admin().cluster().prepareListTasks().setActions("indices:data/write/index*")_                    .setDetailed(true).get()__            assertThat(listResponse.getTasks(), not(empty()))__            for (TaskInfo task : listResponse.getTasks()) {_                assertNotNull(task.getStatus())__                GetTaskResponse getResponse = client().admin().cluster().prepareGetTask(task.getTaskId()).get()__                assertFalse("task should still be running", getResponse.getTask().isCompleted())__                TaskInfo fetchedWithGet = getResponse.getTask().getTask()__                assertEquals(task.getId(), fetchedWithGet.getId())__                assertEquals(task.getType(), fetchedWithGet.getType())__                assertEquals(task.getAction(), fetchedWithGet.getAction())__                assertEquals(task.getDescription(), fetchedWithGet.getDescription())__                assertEquals(task.getStatus(), fetchedWithGet.getStatus())__                assertEquals(task.getStartTime(), fetchedWithGet.getStartTime())__                assertThat(fetchedWithGet.getRunningTimeNanos(), greaterThanOrEqualTo(task.getRunningTimeNanos()))__                assertEquals(task.isCancellable(), fetchedWithGet.isCancellable())__                assertEquals(task.getParentTaskId(), fetchedWithGet.getParentTaskId())__            }_        } finally {_            letTaskFinish.countDown()__            if (index != null) {_                index.join()__            }_            assertBusy(() -> {_                assertEquals(emptyList(),_                        client().admin().cluster().prepareListTasks().setActions("indices:data/write/index*").get().getTasks())__            })__        }_    };very,basic,is,it,plugged,in,style,test,that,indexes,a,document,and,makes,sure,that,you,can,fetch,the,status,of,the,process,the,goal,here,is,to,verify,that,the,large,moving,parts,that,make,fetching,task,status,work,fit,together,rather,than,to,verify,any,particular,status,results,from,indexing,for,that,look,at,link,transport,replication,action,tests,we,intentionally,don,t,use,the,task,recording,mechanism,used,in,other,places,in,this,test,so,we,can,make,sure,that,the,status,fetching,works,properly,over,the,wire;public,void,test,can,fetch,index,status,throws,exception,count,down,latch,task,registered,new,count,down,latch,1,count,down,latch,let,task,finish,new,count,down,latch,1,thread,index,null,try,for,transport,service,transport,service,internal,cluster,get,instances,transport,service,class,mock,task,manager,transport,service,get,task,manager,add,listener,new,mock,task,manager,listener,override,public,void,on,task,registered,task,task,if,task,get,action,starts,with,index,action,name,task,registered,count,down,logger,debug,blocking,starting,task,try,assert,true,let,task,finish,await,10,time,unit,seconds,catch,interrupted,exception,e,throw,new,runtime,exception,e,override,public,void,on,task,unregistered,task,task,override,public,void,wait,for,task,completion,task,task,index,new,thread,index,response,index,response,client,prepare,index,test,test,set,source,test,test,get,assert,array,equals,replication,response,empty,index,response,get,shard,info,get,failures,index,start,assert,true,task,registered,await,10,time,unit,seconds,list,tasks,response,list,response,client,admin,cluster,prepare,list,tasks,set,actions,indices,data,write,index,set,detailed,true,get,assert,that,list,response,get,tasks,not,empty,for,task,info,task,list,response,get,tasks,assert,not,null,task,get,status,get,task,response,get,response,client,admin,cluster,prepare,get,task,task,get,task,id,get,assert,false,task,should,still,be,running,get,response,get,task,is,completed,task,info,fetched,with,get,get,response,get,task,get,task,assert,equals,task,get,id,fetched,with,get,get,id,assert,equals,task,get,type,fetched,with,get,get,type,assert,equals,task,get,action,fetched,with,get,get,action,assert,equals,task,get,description,fetched,with,get,get,description,assert,equals,task,get,status,fetched,with,get,get,status,assert,equals,task,get,start,time,fetched,with,get,get,start,time,assert,that,fetched,with,get,get,running,time,nanos,greater,than,or,equal,to,task,get,running,time,nanos,assert,equals,task,is,cancellable,fetched,with,get,is,cancellable,assert,equals,task,get,parent,task,id,fetched,with,get,get,parent,task,id,finally,let,task,finish,count,down,if,index,null,index,join,assert,busy,assert,equals,empty,list,client,admin,cluster,prepare,list,tasks,set,actions,indices,data,write,index,get,get,tasks
TasksIT -> private int numberOfEvents(String actionMasks, Function<Tuple<Boolean, TaskInfo>, Boolean> criteria);1524684173;Returns the number of events that satisfy the criteria across all nodes__@param actionMasks action masks to match_@return number of events that satisfy the criteria;private int numberOfEvents(String actionMasks, Function<Tuple<Boolean, TaskInfo>, Boolean> criteria) {_        return findEvents(actionMasks, criteria).size()__    };returns,the,number,of,events,that,satisfy,the,criteria,across,all,nodes,param,action,masks,action,masks,to,match,return,number,of,events,that,satisfy,the,criteria;private,int,number,of,events,string,action,masks,function,tuple,boolean,task,info,boolean,criteria,return,find,events,action,masks,criteria,size
TasksIT -> private int numberOfEvents(String actionMasks, Function<Tuple<Boolean, TaskInfo>, Boolean> criteria);1526510804;Returns the number of events that satisfy the criteria across all nodes__@param actionMasks action masks to match_@return number of events that satisfy the criteria;private int numberOfEvents(String actionMasks, Function<Tuple<Boolean, TaskInfo>, Boolean> criteria) {_        return findEvents(actionMasks, criteria).size()__    };returns,the,number,of,events,that,satisfy,the,criteria,across,all,nodes,param,action,masks,action,masks,to,match,return,number,of,events,that,satisfy,the,criteria;private,int,number,of,events,string,action,masks,function,tuple,boolean,task,info,boolean,criteria,return,find,events,action,masks,criteria,size
TasksIT -> private int numberOfEvents(String actionMasks, Function<Tuple<Boolean, TaskInfo>, Boolean> criteria);1527840262;Returns the number of events that satisfy the criteria across all nodes__@param actionMasks action masks to match_@return number of events that satisfy the criteria;private int numberOfEvents(String actionMasks, Function<Tuple<Boolean, TaskInfo>, Boolean> criteria) {_        return findEvents(actionMasks, criteria).size()__    };returns,the,number,of,events,that,satisfy,the,criteria,across,all,nodes,param,action,masks,action,masks,to,match,return,number,of,events,that,satisfy,the,criteria;private,int,number,of,events,string,action,masks,function,tuple,boolean,task,info,boolean,criteria,return,find,events,action,masks,criteria,size
TasksIT -> private int numberOfEvents(String actionMasks, Function<Tuple<Boolean, TaskInfo>, Boolean> criteria);1528762805;Returns the number of events that satisfy the criteria across all nodes__@param actionMasks action masks to match_@return number of events that satisfy the criteria;private int numberOfEvents(String actionMasks, Function<Tuple<Boolean, TaskInfo>, Boolean> criteria) {_        return findEvents(actionMasks, criteria).size()__    };returns,the,number,of,events,that,satisfy,the,criteria,across,all,nodes,param,action,masks,action,masks,to,match,return,number,of,events,that,satisfy,the,criteria;private,int,number,of,events,string,action,masks,function,tuple,boolean,task,info,boolean,criteria,return,find,events,action,masks,criteria,size
TasksIT -> private int numberOfEvents(String actionMasks, Function<Tuple<Boolean, TaskInfo>, Boolean> criteria);1531179852;Returns the number of events that satisfy the criteria across all nodes__@param actionMasks action masks to match_@return number of events that satisfy the criteria;private int numberOfEvents(String actionMasks, Function<Tuple<Boolean, TaskInfo>, Boolean> criteria) {_        return findEvents(actionMasks, criteria).size()__    };returns,the,number,of,events,that,satisfy,the,criteria,across,all,nodes,param,action,masks,action,masks,to,match,return,number,of,events,that,satisfy,the,criteria;private,int,number,of,events,string,action,masks,function,tuple,boolean,task,info,boolean,criteria,return,find,events,action,masks,criteria,size
TasksIT -> private int numberOfEvents(String actionMasks, Function<Tuple<Boolean, TaskInfo>, Boolean> criteria);1543415307;Returns the number of events that satisfy the criteria across all nodes__@param actionMasks action masks to match_@return number of events that satisfy the criteria;private int numberOfEvents(String actionMasks, Function<Tuple<Boolean, TaskInfo>, Boolean> criteria) {_        return findEvents(actionMasks, criteria).size()__    };returns,the,number,of,events,that,satisfy,the,criteria,across,all,nodes,param,action,masks,action,masks,to,match,return,number,of,events,that,satisfy,the,criteria;private,int,number,of,events,string,action,masks,function,tuple,boolean,task,info,boolean,criteria,return,find,events,action,masks,criteria,size
TasksIT -> private int numberOfEvents(String actionMasks, Function<Tuple<Boolean, TaskInfo>, Boolean> criteria);1544035746;Returns the number of events that satisfy the criteria across all nodes__@param actionMasks action masks to match_@return number of events that satisfy the criteria;private int numberOfEvents(String actionMasks, Function<Tuple<Boolean, TaskInfo>, Boolean> criteria) {_        return findEvents(actionMasks, criteria).size()__    };returns,the,number,of,events,that,satisfy,the,criteria,across,all,nodes,param,action,masks,action,masks,to,match,return,number,of,events,that,satisfy,the,criteria;private,int,number,of,events,string,action,masks,function,tuple,boolean,task,info,boolean,criteria,return,find,events,action,masks,criteria,size
TasksIT -> private int numberOfEvents(String actionMasks, Function<Tuple<Boolean, TaskInfo>, Boolean> criteria);1548458964;Returns the number of events that satisfy the criteria across all nodes__@param actionMasks action masks to match_@return number of events that satisfy the criteria;private int numberOfEvents(String actionMasks, Function<Tuple<Boolean, TaskInfo>, Boolean> criteria) {_        return findEvents(actionMasks, criteria).size()__    };returns,the,number,of,events,that,satisfy,the,criteria,across,all,nodes,param,action,masks,action,masks,to,match,return,number,of,events,that,satisfy,the,criteria;private,int,number,of,events,string,action,masks,function,tuple,boolean,task,info,boolean,criteria,return,find,events,action,masks,criteria,size
TasksIT -> private int numberOfEvents(String actionMasks, Function<Tuple<Boolean, TaskInfo>, Boolean> criteria);1548958612;Returns the number of events that satisfy the criteria across all nodes__@param actionMasks action masks to match_@return number of events that satisfy the criteria;private int numberOfEvents(String actionMasks, Function<Tuple<Boolean, TaskInfo>, Boolean> criteria) {_        return findEvents(actionMasks, criteria).size()__    };returns,the,number,of,events,that,satisfy,the,criteria,across,all,nodes,param,action,masks,action,masks,to,match,return,number,of,events,that,satisfy,the,criteria;private,int,number,of,events,string,action,masks,function,tuple,boolean,task,info,boolean,criteria,return,find,events,action,masks,criteria,size
TasksIT -> private void registerTaskManageListeners(String actionMasks);1524684173;Registers recording task event listeners with the given action mask on all nodes;private void registerTaskManageListeners(String actionMasks) {_        for (String nodeName : internalCluster().getNodeNames()) {_            DiscoveryNode node = internalCluster().getInstance(ClusterService.class, nodeName).localNode()__            RecordingTaskManagerListener listener = new RecordingTaskManagerListener(node.getId(), actionMasks.split(","))__            ((MockTaskManager) internalCluster().getInstance(TransportService.class, nodeName).getTaskManager()).addListener(listener)__            RecordingTaskManagerListener oldListener = listeners.put(new Tuple<>(node.getName(), actionMasks), listener)__            assertNull(oldListener)__        }_    };registers,recording,task,event,listeners,with,the,given,action,mask,on,all,nodes;private,void,register,task,manage,listeners,string,action,masks,for,string,node,name,internal,cluster,get,node,names,discovery,node,node,internal,cluster,get,instance,cluster,service,class,node,name,local,node,recording,task,manager,listener,listener,new,recording,task,manager,listener,node,get,id,action,masks,split,mock,task,manager,internal,cluster,get,instance,transport,service,class,node,name,get,task,manager,add,listener,listener,recording,task,manager,listener,old,listener,listeners,put,new,tuple,node,get,name,action,masks,listener,assert,null,old,listener
TasksIT -> private void registerTaskManageListeners(String actionMasks);1526510804;Registers recording task event listeners with the given action mask on all nodes;private void registerTaskManageListeners(String actionMasks) {_        for (String nodeName : internalCluster().getNodeNames()) {_            DiscoveryNode node = internalCluster().getInstance(ClusterService.class, nodeName).localNode()__            RecordingTaskManagerListener listener = new RecordingTaskManagerListener(node.getId(), actionMasks.split(","))__            ((MockTaskManager) internalCluster().getInstance(TransportService.class, nodeName).getTaskManager()).addListener(listener)__            RecordingTaskManagerListener oldListener = listeners.put(new Tuple<>(node.getName(), actionMasks), listener)__            assertNull(oldListener)__        }_    };registers,recording,task,event,listeners,with,the,given,action,mask,on,all,nodes;private,void,register,task,manage,listeners,string,action,masks,for,string,node,name,internal,cluster,get,node,names,discovery,node,node,internal,cluster,get,instance,cluster,service,class,node,name,local,node,recording,task,manager,listener,listener,new,recording,task,manager,listener,node,get,id,action,masks,split,mock,task,manager,internal,cluster,get,instance,transport,service,class,node,name,get,task,manager,add,listener,listener,recording,task,manager,listener,old,listener,listeners,put,new,tuple,node,get,name,action,masks,listener,assert,null,old,listener
TasksIT -> private void registerTaskManageListeners(String actionMasks);1527840262;Registers recording task event listeners with the given action mask on all nodes;private void registerTaskManageListeners(String actionMasks) {_        for (String nodeName : internalCluster().getNodeNames()) {_            DiscoveryNode node = internalCluster().getInstance(ClusterService.class, nodeName).localNode()__            RecordingTaskManagerListener listener = new RecordingTaskManagerListener(node.getId(), actionMasks.split(","))__            ((MockTaskManager) internalCluster().getInstance(TransportService.class, nodeName).getTaskManager()).addListener(listener)__            RecordingTaskManagerListener oldListener = listeners.put(new Tuple<>(node.getName(), actionMasks), listener)__            assertNull(oldListener)__        }_    };registers,recording,task,event,listeners,with,the,given,action,mask,on,all,nodes;private,void,register,task,manage,listeners,string,action,masks,for,string,node,name,internal,cluster,get,node,names,discovery,node,node,internal,cluster,get,instance,cluster,service,class,node,name,local,node,recording,task,manager,listener,listener,new,recording,task,manager,listener,node,get,id,action,masks,split,mock,task,manager,internal,cluster,get,instance,transport,service,class,node,name,get,task,manager,add,listener,listener,recording,task,manager,listener,old,listener,listeners,put,new,tuple,node,get,name,action,masks,listener,assert,null,old,listener
TasksIT -> private void registerTaskManageListeners(String actionMasks);1528762805;Registers recording task event listeners with the given action mask on all nodes;private void registerTaskManageListeners(String actionMasks) {_        for (String nodeName : internalCluster().getNodeNames()) {_            DiscoveryNode node = internalCluster().getInstance(ClusterService.class, nodeName).localNode()__            RecordingTaskManagerListener listener = new RecordingTaskManagerListener(node.getId(), actionMasks.split(","))__            ((MockTaskManager) internalCluster().getInstance(TransportService.class, nodeName).getTaskManager()).addListener(listener)__            RecordingTaskManagerListener oldListener = listeners.put(new Tuple<>(node.getName(), actionMasks), listener)__            assertNull(oldListener)__        }_    };registers,recording,task,event,listeners,with,the,given,action,mask,on,all,nodes;private,void,register,task,manage,listeners,string,action,masks,for,string,node,name,internal,cluster,get,node,names,discovery,node,node,internal,cluster,get,instance,cluster,service,class,node,name,local,node,recording,task,manager,listener,listener,new,recording,task,manager,listener,node,get,id,action,masks,split,mock,task,manager,internal,cluster,get,instance,transport,service,class,node,name,get,task,manager,add,listener,listener,recording,task,manager,listener,old,listener,listeners,put,new,tuple,node,get,name,action,masks,listener,assert,null,old,listener
TasksIT -> private void registerTaskManageListeners(String actionMasks);1531179852;Registers recording task event listeners with the given action mask on all nodes;private void registerTaskManageListeners(String actionMasks) {_        for (String nodeName : internalCluster().getNodeNames()) {_            DiscoveryNode node = internalCluster().getInstance(ClusterService.class, nodeName).localNode()__            RecordingTaskManagerListener listener = new RecordingTaskManagerListener(node.getId(), actionMasks.split(","))__            ((MockTaskManager) internalCluster().getInstance(TransportService.class, nodeName).getTaskManager()).addListener(listener)__            RecordingTaskManagerListener oldListener = listeners.put(new Tuple<>(node.getName(), actionMasks), listener)__            assertNull(oldListener)__        }_    };registers,recording,task,event,listeners,with,the,given,action,mask,on,all,nodes;private,void,register,task,manage,listeners,string,action,masks,for,string,node,name,internal,cluster,get,node,names,discovery,node,node,internal,cluster,get,instance,cluster,service,class,node,name,local,node,recording,task,manager,listener,listener,new,recording,task,manager,listener,node,get,id,action,masks,split,mock,task,manager,internal,cluster,get,instance,transport,service,class,node,name,get,task,manager,add,listener,listener,recording,task,manager,listener,old,listener,listeners,put,new,tuple,node,get,name,action,masks,listener,assert,null,old,listener
TasksIT -> private void registerTaskManageListeners(String actionMasks);1543415307;Registers recording task event listeners with the given action mask on all nodes;private void registerTaskManageListeners(String actionMasks) {_        for (String nodeName : internalCluster().getNodeNames()) {_            DiscoveryNode node = internalCluster().getInstance(ClusterService.class, nodeName).localNode()__            RecordingTaskManagerListener listener = new RecordingTaskManagerListener(node.getId(), actionMasks.split(","))__            ((MockTaskManager) internalCluster().getInstance(TransportService.class, nodeName).getTaskManager()).addListener(listener)__            RecordingTaskManagerListener oldListener = listeners.put(new Tuple<>(node.getName(), actionMasks), listener)__            assertNull(oldListener)__        }_    };registers,recording,task,event,listeners,with,the,given,action,mask,on,all,nodes;private,void,register,task,manage,listeners,string,action,masks,for,string,node,name,internal,cluster,get,node,names,discovery,node,node,internal,cluster,get,instance,cluster,service,class,node,name,local,node,recording,task,manager,listener,listener,new,recording,task,manager,listener,node,get,id,action,masks,split,mock,task,manager,internal,cluster,get,instance,transport,service,class,node,name,get,task,manager,add,listener,listener,recording,task,manager,listener,old,listener,listeners,put,new,tuple,node,get,name,action,masks,listener,assert,null,old,listener
TasksIT -> private void registerTaskManageListeners(String actionMasks);1544035746;Registers recording task event listeners with the given action mask on all nodes;private void registerTaskManageListeners(String actionMasks) {_        for (String nodeName : internalCluster().getNodeNames()) {_            DiscoveryNode node = internalCluster().getInstance(ClusterService.class, nodeName).localNode()__            RecordingTaskManagerListener listener = new RecordingTaskManagerListener(node.getId(), actionMasks.split(","))__            ((MockTaskManager) internalCluster().getInstance(TransportService.class, nodeName).getTaskManager()).addListener(listener)__            RecordingTaskManagerListener oldListener = listeners.put(new Tuple<>(node.getName(), actionMasks), listener)__            assertNull(oldListener)__        }_    };registers,recording,task,event,listeners,with,the,given,action,mask,on,all,nodes;private,void,register,task,manage,listeners,string,action,masks,for,string,node,name,internal,cluster,get,node,names,discovery,node,node,internal,cluster,get,instance,cluster,service,class,node,name,local,node,recording,task,manager,listener,listener,new,recording,task,manager,listener,node,get,id,action,masks,split,mock,task,manager,internal,cluster,get,instance,transport,service,class,node,name,get,task,manager,add,listener,listener,recording,task,manager,listener,old,listener,listeners,put,new,tuple,node,get,name,action,masks,listener,assert,null,old,listener
TasksIT -> private void registerTaskManageListeners(String actionMasks);1548458964;Registers recording task event listeners with the given action mask on all nodes;private void registerTaskManageListeners(String actionMasks) {_        for (String nodeName : internalCluster().getNodeNames()) {_            DiscoveryNode node = internalCluster().getInstance(ClusterService.class, nodeName).localNode()__            RecordingTaskManagerListener listener = new RecordingTaskManagerListener(node.getId(), actionMasks.split(","))__            ((MockTaskManager) internalCluster().getInstance(TransportService.class, nodeName).getTaskManager()).addListener(listener)__            RecordingTaskManagerListener oldListener = listeners.put(new Tuple<>(node.getName(), actionMasks), listener)__            assertNull(oldListener)__        }_    };registers,recording,task,event,listeners,with,the,given,action,mask,on,all,nodes;private,void,register,task,manage,listeners,string,action,masks,for,string,node,name,internal,cluster,get,node,names,discovery,node,node,internal,cluster,get,instance,cluster,service,class,node,name,local,node,recording,task,manager,listener,listener,new,recording,task,manager,listener,node,get,id,action,masks,split,mock,task,manager,internal,cluster,get,instance,transport,service,class,node,name,get,task,manager,add,listener,listener,recording,task,manager,listener,old,listener,listeners,put,new,tuple,node,get,name,action,masks,listener,assert,null,old,listener
TasksIT -> private void registerTaskManageListeners(String actionMasks);1548958612;Registers recording task event listeners with the given action mask on all nodes;private void registerTaskManageListeners(String actionMasks) {_        for (String nodeName : internalCluster().getNodeNames()) {_            DiscoveryNode node = internalCluster().getInstance(ClusterService.class, nodeName).localNode()__            RecordingTaskManagerListener listener = new RecordingTaskManagerListener(node.getId(), actionMasks.split(","))__            ((MockTaskManager) internalCluster().getInstance(TransportService.class, nodeName).getTaskManager()).addListener(listener)__            RecordingTaskManagerListener oldListener = listeners.put(new Tuple<>(node.getName(), actionMasks), listener)__            assertNull(oldListener)__        }_    };registers,recording,task,event,listeners,with,the,given,action,mask,on,all,nodes;private,void,register,task,manage,listeners,string,action,masks,for,string,node,name,internal,cluster,get,node,names,discovery,node,node,internal,cluster,get,instance,cluster,service,class,node,name,local,node,recording,task,manager,listener,listener,new,recording,task,manager,listener,node,get,id,action,masks,split,mock,task,manager,internal,cluster,get,instance,transport,service,class,node,name,get,task,manager,add,listener,listener,recording,task,manager,listener,old,listener,listeners,put,new,tuple,node,get,name,action,masks,listener,assert,null,old,listener
TasksIT -> private void waitForTimeoutTestCase(Function<TaskId, ? extends Iterable<? extends Throwable>> wait) throws Exception;1524684173;Test waiting for a task that times out._@param wait wait for the running task and return all the failures you accumulated waiting for it;private void waitForTimeoutTestCase(Function<TaskId, ? extends Iterable<? extends Throwable>> wait) throws Exception {_        _        ActionFuture<TestTaskPlugin.NodesResponse> future = TestTaskPlugin.TestTaskAction.INSTANCE.newRequestBuilder(client()).execute()__        try {_            TaskId taskId = waitForTestTaskStartOnAllNodes()___            _            assertBusy(() -> client().admin().cluster().prepareGetTask(taskId).get())___            _            _            Iterable<? extends Throwable> failures = wait.apply(taskId)___            for (Throwable failure : failures) {_                assertNotNull(_                        ExceptionsHelper.unwrap(failure, ElasticsearchTimeoutException.class, ReceiveTimeoutTransportException.class))__            }_        } finally {_            _            TestTaskPlugin.UnblockTestTasksAction.INSTANCE.newRequestBuilder(client()).get()__        }_        future.get()__    };test,waiting,for,a,task,that,times,out,param,wait,wait,for,the,running,task,and,return,all,the,failures,you,accumulated,waiting,for,it;private,void,wait,for,timeout,test,case,function,task,id,extends,iterable,extends,throwable,wait,throws,exception,action,future,test,task,plugin,nodes,response,future,test,task,plugin,test,task,action,instance,new,request,builder,client,execute,try,task,id,task,id,wait,for,test,task,start,on,all,nodes,assert,busy,client,admin,cluster,prepare,get,task,task,id,get,iterable,extends,throwable,failures,wait,apply,task,id,for,throwable,failure,failures,assert,not,null,exceptions,helper,unwrap,failure,elasticsearch,timeout,exception,class,receive,timeout,transport,exception,class,finally,test,task,plugin,unblock,test,tasks,action,instance,new,request,builder,client,get,future,get
TasksIT -> private void waitForTimeoutTestCase(Function<TaskId, ? extends Iterable<? extends Throwable>> wait) throws Exception;1526510804;Test waiting for a task that times out._@param wait wait for the running task and return all the failures you accumulated waiting for it;private void waitForTimeoutTestCase(Function<TaskId, ? extends Iterable<? extends Throwable>> wait) throws Exception {_        _        ActionFuture<TestTaskPlugin.NodesResponse> future = TestTaskPlugin.TestTaskAction.INSTANCE.newRequestBuilder(client()).execute()__        try {_            TaskId taskId = waitForTestTaskStartOnAllNodes()___            _            assertBusy(() -> client().admin().cluster().prepareGetTask(taskId).get())___            _            _            Iterable<? extends Throwable> failures = wait.apply(taskId)___            for (Throwable failure : failures) {_                assertNotNull(_                        ExceptionsHelper.unwrap(failure, ElasticsearchTimeoutException.class, ReceiveTimeoutTransportException.class))__            }_        } finally {_            _            TestTaskPlugin.UnblockTestTasksAction.INSTANCE.newRequestBuilder(client()).get()__        }_        future.get()__    };test,waiting,for,a,task,that,times,out,param,wait,wait,for,the,running,task,and,return,all,the,failures,you,accumulated,waiting,for,it;private,void,wait,for,timeout,test,case,function,task,id,extends,iterable,extends,throwable,wait,throws,exception,action,future,test,task,plugin,nodes,response,future,test,task,plugin,test,task,action,instance,new,request,builder,client,execute,try,task,id,task,id,wait,for,test,task,start,on,all,nodes,assert,busy,client,admin,cluster,prepare,get,task,task,id,get,iterable,extends,throwable,failures,wait,apply,task,id,for,throwable,failure,failures,assert,not,null,exceptions,helper,unwrap,failure,elasticsearch,timeout,exception,class,receive,timeout,transport,exception,class,finally,test,task,plugin,unblock,test,tasks,action,instance,new,request,builder,client,get,future,get
TasksIT -> private void waitForTimeoutTestCase(Function<TaskId, ? extends Iterable<? extends Throwable>> wait) throws Exception;1527840262;Test waiting for a task that times out._@param wait wait for the running task and return all the failures you accumulated waiting for it;private void waitForTimeoutTestCase(Function<TaskId, ? extends Iterable<? extends Throwable>> wait) throws Exception {_        _        ActionFuture<TestTaskPlugin.NodesResponse> future = new TestTaskPlugin.NodesRequestBuilder(client(),_            TestTaskPlugin.TestTaskAction.INSTANCE).execute()__        try {_            TaskId taskId = waitForTestTaskStartOnAllNodes()___            _            assertBusy(() -> client().admin().cluster().prepareGetTask(taskId).get())___            _            _            Iterable<? extends Throwable> failures = wait.apply(taskId)___            for (Throwable failure : failures) {_                assertNotNull(_                        ExceptionsHelper.unwrap(failure, ElasticsearchTimeoutException.class, ReceiveTimeoutTransportException.class))__            }_        } finally {_            _            new TestTaskPlugin.UnblockTestTasksRequestBuilder(client(), TestTaskPlugin.UnblockTestTasksAction.INSTANCE).get()__        }_        future.get()__    };test,waiting,for,a,task,that,times,out,param,wait,wait,for,the,running,task,and,return,all,the,failures,you,accumulated,waiting,for,it;private,void,wait,for,timeout,test,case,function,task,id,extends,iterable,extends,throwable,wait,throws,exception,action,future,test,task,plugin,nodes,response,future,new,test,task,plugin,nodes,request,builder,client,test,task,plugin,test,task,action,instance,execute,try,task,id,task,id,wait,for,test,task,start,on,all,nodes,assert,busy,client,admin,cluster,prepare,get,task,task,id,get,iterable,extends,throwable,failures,wait,apply,task,id,for,throwable,failure,failures,assert,not,null,exceptions,helper,unwrap,failure,elasticsearch,timeout,exception,class,receive,timeout,transport,exception,class,finally,new,test,task,plugin,unblock,test,tasks,request,builder,client,test,task,plugin,unblock,test,tasks,action,instance,get,future,get
TasksIT -> private void waitForTimeoutTestCase(Function<TaskId, ? extends Iterable<? extends Throwable>> wait) throws Exception;1528762805;Test waiting for a task that times out._@param wait wait for the running task and return all the failures you accumulated waiting for it;private void waitForTimeoutTestCase(Function<TaskId, ? extends Iterable<? extends Throwable>> wait) throws Exception {_        _        ActionFuture<TestTaskPlugin.NodesResponse> future = new TestTaskPlugin.NodesRequestBuilder(client(),_            TestTaskPlugin.TestTaskAction.INSTANCE).execute()__        try {_            TaskId taskId = waitForTestTaskStartOnAllNodes()___            _            assertBusy(() -> client().admin().cluster().prepareGetTask(taskId).get())___            _            _            Iterable<? extends Throwable> failures = wait.apply(taskId)___            for (Throwable failure : failures) {_                assertNotNull(_                        ExceptionsHelper.unwrap(failure, ElasticsearchTimeoutException.class, ReceiveTimeoutTransportException.class))__            }_        } finally {_            _            new TestTaskPlugin.UnblockTestTasksRequestBuilder(client(), TestTaskPlugin.UnblockTestTasksAction.INSTANCE).get()__        }_        future.get()__    };test,waiting,for,a,task,that,times,out,param,wait,wait,for,the,running,task,and,return,all,the,failures,you,accumulated,waiting,for,it;private,void,wait,for,timeout,test,case,function,task,id,extends,iterable,extends,throwable,wait,throws,exception,action,future,test,task,plugin,nodes,response,future,new,test,task,plugin,nodes,request,builder,client,test,task,plugin,test,task,action,instance,execute,try,task,id,task,id,wait,for,test,task,start,on,all,nodes,assert,busy,client,admin,cluster,prepare,get,task,task,id,get,iterable,extends,throwable,failures,wait,apply,task,id,for,throwable,failure,failures,assert,not,null,exceptions,helper,unwrap,failure,elasticsearch,timeout,exception,class,receive,timeout,transport,exception,class,finally,new,test,task,plugin,unblock,test,tasks,request,builder,client,test,task,plugin,unblock,test,tasks,action,instance,get,future,get
TasksIT -> private void waitForTimeoutTestCase(Function<TaskId, ? extends Iterable<? extends Throwable>> wait) throws Exception;1531179852;Test waiting for a task that times out._@param wait wait for the running task and return all the failures you accumulated waiting for it;private void waitForTimeoutTestCase(Function<TaskId, ? extends Iterable<? extends Throwable>> wait) throws Exception {_        _        ActionFuture<TestTaskPlugin.NodesResponse> future = new TestTaskPlugin.NodesRequestBuilder(client(),_            TestTaskPlugin.TestTaskAction.INSTANCE).execute()__        try {_            TaskId taskId = waitForTestTaskStartOnAllNodes()___            _            assertBusy(() -> client().admin().cluster().prepareGetTask(taskId).get())___            _            _            Iterable<? extends Throwable> failures = wait.apply(taskId)___            for (Throwable failure : failures) {_                assertNotNull(_                        ExceptionsHelper.unwrap(failure, ElasticsearchTimeoutException.class, ReceiveTimeoutTransportException.class))__            }_        } finally {_            _            new TestTaskPlugin.UnblockTestTasksRequestBuilder(client(), TestTaskPlugin.UnblockTestTasksAction.INSTANCE).get()__        }_        future.get()__    };test,waiting,for,a,task,that,times,out,param,wait,wait,for,the,running,task,and,return,all,the,failures,you,accumulated,waiting,for,it;private,void,wait,for,timeout,test,case,function,task,id,extends,iterable,extends,throwable,wait,throws,exception,action,future,test,task,plugin,nodes,response,future,new,test,task,plugin,nodes,request,builder,client,test,task,plugin,test,task,action,instance,execute,try,task,id,task,id,wait,for,test,task,start,on,all,nodes,assert,busy,client,admin,cluster,prepare,get,task,task,id,get,iterable,extends,throwable,failures,wait,apply,task,id,for,throwable,failure,failures,assert,not,null,exceptions,helper,unwrap,failure,elasticsearch,timeout,exception,class,receive,timeout,transport,exception,class,finally,new,test,task,plugin,unblock,test,tasks,request,builder,client,test,task,plugin,unblock,test,tasks,action,instance,get,future,get
TasksIT -> private void waitForTimeoutTestCase(Function<TaskId, ? extends Iterable<? extends Throwable>> wait) throws Exception;1543415307;Test waiting for a task that times out._@param wait wait for the running task and return all the failures you accumulated waiting for it;private void waitForTimeoutTestCase(Function<TaskId, ? extends Iterable<? extends Throwable>> wait) throws Exception {_        _        ActionFuture<TestTaskPlugin.NodesResponse> future = new TestTaskPlugin.NodesRequestBuilder(client(),_            TestTaskPlugin.TestTaskAction.INSTANCE).execute()__        try {_            TaskId taskId = waitForTestTaskStartOnAllNodes()___            _            assertBusy(() -> client().admin().cluster().prepareGetTask(taskId).get())___            _            _            Iterable<? extends Throwable> failures = wait.apply(taskId)___            for (Throwable failure : failures) {_                assertNotNull(_                        ExceptionsHelper.unwrap(failure, ElasticsearchTimeoutException.class, ReceiveTimeoutTransportException.class))__            }_        } finally {_            _            new TestTaskPlugin.UnblockTestTasksRequestBuilder(client(), TestTaskPlugin.UnblockTestTasksAction.INSTANCE).get()__        }_        future.get()__    };test,waiting,for,a,task,that,times,out,param,wait,wait,for,the,running,task,and,return,all,the,failures,you,accumulated,waiting,for,it;private,void,wait,for,timeout,test,case,function,task,id,extends,iterable,extends,throwable,wait,throws,exception,action,future,test,task,plugin,nodes,response,future,new,test,task,plugin,nodes,request,builder,client,test,task,plugin,test,task,action,instance,execute,try,task,id,task,id,wait,for,test,task,start,on,all,nodes,assert,busy,client,admin,cluster,prepare,get,task,task,id,get,iterable,extends,throwable,failures,wait,apply,task,id,for,throwable,failure,failures,assert,not,null,exceptions,helper,unwrap,failure,elasticsearch,timeout,exception,class,receive,timeout,transport,exception,class,finally,new,test,task,plugin,unblock,test,tasks,request,builder,client,test,task,plugin,unblock,test,tasks,action,instance,get,future,get
TasksIT -> private void waitForTimeoutTestCase(Function<TaskId, ? extends Iterable<? extends Throwable>> wait) throws Exception;1544035746;Test waiting for a task that times out._@param wait wait for the running task and return all the failures you accumulated waiting for it;private void waitForTimeoutTestCase(Function<TaskId, ? extends Iterable<? extends Throwable>> wait) throws Exception {_        _        ActionFuture<TestTaskPlugin.NodesResponse> future = new TestTaskPlugin.NodesRequestBuilder(client(),_            TestTaskPlugin.TestTaskAction.INSTANCE).execute()__        try {_            TaskId taskId = waitForTestTaskStartOnAllNodes()___            _            assertBusy(() -> client().admin().cluster().prepareGetTask(taskId).get())___            _            _            Iterable<? extends Throwable> failures = wait.apply(taskId)___            for (Throwable failure : failures) {_                assertNotNull(_                        ExceptionsHelper.unwrap(failure, ElasticsearchTimeoutException.class, ReceiveTimeoutTransportException.class))__            }_        } finally {_            _            new TestTaskPlugin.UnblockTestTasksRequestBuilder(client(), TestTaskPlugin.UnblockTestTasksAction.INSTANCE).get()__        }_        future.get()__    };test,waiting,for,a,task,that,times,out,param,wait,wait,for,the,running,task,and,return,all,the,failures,you,accumulated,waiting,for,it;private,void,wait,for,timeout,test,case,function,task,id,extends,iterable,extends,throwable,wait,throws,exception,action,future,test,task,plugin,nodes,response,future,new,test,task,plugin,nodes,request,builder,client,test,task,plugin,test,task,action,instance,execute,try,task,id,task,id,wait,for,test,task,start,on,all,nodes,assert,busy,client,admin,cluster,prepare,get,task,task,id,get,iterable,extends,throwable,failures,wait,apply,task,id,for,throwable,failure,failures,assert,not,null,exceptions,helper,unwrap,failure,elasticsearch,timeout,exception,class,receive,timeout,transport,exception,class,finally,new,test,task,plugin,unblock,test,tasks,request,builder,client,test,task,plugin,unblock,test,tasks,action,instance,get,future,get
TasksIT -> private void waitForTimeoutTestCase(Function<TaskId, ? extends Iterable<? extends Throwable>> wait) throws Exception;1548458964;Test waiting for a task that times out._@param wait wait for the running task and return all the failures you accumulated waiting for it;private void waitForTimeoutTestCase(Function<TaskId, ? extends Iterable<? extends Throwable>> wait) throws Exception {_        _        ActionFuture<TestTaskPlugin.NodesResponse> future = new TestTaskPlugin.NodesRequestBuilder(client(),_            TestTaskPlugin.TestTaskAction.INSTANCE).execute()__        try {_            TaskId taskId = waitForTestTaskStartOnAllNodes()___            _            assertBusy(() -> client().admin().cluster().prepareGetTask(taskId).get())___            _            _            Iterable<? extends Throwable> failures = wait.apply(taskId)___            for (Throwable failure : failures) {_                assertNotNull(_                        ExceptionsHelper.unwrap(failure, ElasticsearchTimeoutException.class, ReceiveTimeoutTransportException.class))__            }_        } finally {_            _            new TestTaskPlugin.UnblockTestTasksRequestBuilder(client(), TestTaskPlugin.UnblockTestTasksAction.INSTANCE).get()__        }_        future.get()__    };test,waiting,for,a,task,that,times,out,param,wait,wait,for,the,running,task,and,return,all,the,failures,you,accumulated,waiting,for,it;private,void,wait,for,timeout,test,case,function,task,id,extends,iterable,extends,throwable,wait,throws,exception,action,future,test,task,plugin,nodes,response,future,new,test,task,plugin,nodes,request,builder,client,test,task,plugin,test,task,action,instance,execute,try,task,id,task,id,wait,for,test,task,start,on,all,nodes,assert,busy,client,admin,cluster,prepare,get,task,task,id,get,iterable,extends,throwable,failures,wait,apply,task,id,for,throwable,failure,failures,assert,not,null,exceptions,helper,unwrap,failure,elasticsearch,timeout,exception,class,receive,timeout,transport,exception,class,finally,new,test,task,plugin,unblock,test,tasks,request,builder,client,test,task,plugin,unblock,test,tasks,action,instance,get,future,get
TasksIT -> private void waitForTimeoutTestCase(Function<TaskId, ? extends Iterable<? extends Throwable>> wait) throws Exception;1548958612;Test waiting for a task that times out._@param wait wait for the running task and return all the failures you accumulated waiting for it;private void waitForTimeoutTestCase(Function<TaskId, ? extends Iterable<? extends Throwable>> wait) throws Exception {_        _        ActionFuture<TestTaskPlugin.NodesResponse> future = new TestTaskPlugin.NodesRequestBuilder(client(),_            TestTaskPlugin.TestTaskAction.INSTANCE).execute()__        try {_            TaskId taskId = waitForTestTaskStartOnAllNodes()___            _            assertBusy(() -> client().admin().cluster().prepareGetTask(taskId).get())___            _            _            Iterable<? extends Throwable> failures = wait.apply(taskId)___            for (Throwable failure : failures) {_                assertNotNull(_                        ExceptionsHelper.unwrap(failure, ElasticsearchTimeoutException.class, ReceiveTimeoutTransportException.class))__            }_        } finally {_            _            new TestTaskPlugin.UnblockTestTasksRequestBuilder(client(), TestTaskPlugin.UnblockTestTasksAction.INSTANCE).get()__        }_        future.get()__    };test,waiting,for,a,task,that,times,out,param,wait,wait,for,the,running,task,and,return,all,the,failures,you,accumulated,waiting,for,it;private,void,wait,for,timeout,test,case,function,task,id,extends,iterable,extends,throwable,wait,throws,exception,action,future,test,task,plugin,nodes,response,future,new,test,task,plugin,nodes,request,builder,client,test,task,plugin,test,task,action,instance,execute,try,task,id,task,id,wait,for,test,task,start,on,all,nodes,assert,busy,client,admin,cluster,prepare,get,task,task,id,get,iterable,extends,throwable,failures,wait,apply,task,id,for,throwable,failure,failures,assert,not,null,exceptions,helper,unwrap,failure,elasticsearch,timeout,exception,class,receive,timeout,transport,exception,class,finally,new,test,task,plugin,unblock,test,tasks,request,builder,client,test,task,plugin,unblock,test,tasks,action,instance,get,future,get
TasksIT -> private <T> void waitForCompletionTestCase(boolean storeResult, Function<TaskId, ActionFuture<T>> wait, Consumer<T> validator)             throws Exception;1524684173;Test wait for completion._@param storeResult should the task store its results_@param wait start waiting for a task. Accepts that id of the task to wait for and returns a future waiting for it._@param validator validate the response and return the task ids that were found;private <T> void waitForCompletionTestCase(boolean storeResult, Function<TaskId, ActionFuture<T>> wait, Consumer<T> validator)_            throws Exception {_        _        ActionFuture<TestTaskPlugin.NodesResponse> future = TestTaskPlugin.TestTaskAction.INSTANCE.newRequestBuilder(client())_                .setShouldStoreResult(storeResult).execute()___        ActionFuture<T> waitResponseFuture__        TaskId taskId__        try {_            taskId = waitForTestTaskStartOnAllNodes()___            _            assertBusy(() -> client().admin().cluster().prepareGetTask(taskId).get())___            _            CountDownLatch waitForWaitingToStart = new CountDownLatch(1)__            for (TransportService transportService : internalCluster().getInstances(TransportService.class)) {_                ((MockTaskManager) transportService.getTaskManager()).addListener(new MockTaskManagerListener() {_                    @Override_                    public void waitForTaskCompletion(Task task) {_                        waitForWaitingToStart.countDown()__                    }__                    @Override_                    public void onTaskRegistered(Task task) {_                    }__                    @Override_                    public void onTaskUnregistered(Task task) {_                    }_                })__            }__            _            waitResponseFuture = wait.apply(taskId)___            _            waitForWaitingToStart.await()__        } finally {_            _            TestTaskPlugin.UnblockTestTasksAction.INSTANCE.newRequestBuilder(client()).get()__        }__        _        T waitResponse = waitResponseFuture.get()__        validator.accept(waitResponse)___        TestTaskPlugin.NodesResponse response = future.get()__        assertEquals(emptyList(), response.failures())__    };test,wait,for,completion,param,store,result,should,the,task,store,its,results,param,wait,start,waiting,for,a,task,accepts,that,id,of,the,task,to,wait,for,and,returns,a,future,waiting,for,it,param,validator,validate,the,response,and,return,the,task,ids,that,were,found;private,t,void,wait,for,completion,test,case,boolean,store,result,function,task,id,action,future,t,wait,consumer,t,validator,throws,exception,action,future,test,task,plugin,nodes,response,future,test,task,plugin,test,task,action,instance,new,request,builder,client,set,should,store,result,store,result,execute,action,future,t,wait,response,future,task,id,task,id,try,task,id,wait,for,test,task,start,on,all,nodes,assert,busy,client,admin,cluster,prepare,get,task,task,id,get,count,down,latch,wait,for,waiting,to,start,new,count,down,latch,1,for,transport,service,transport,service,internal,cluster,get,instances,transport,service,class,mock,task,manager,transport,service,get,task,manager,add,listener,new,mock,task,manager,listener,override,public,void,wait,for,task,completion,task,task,wait,for,waiting,to,start,count,down,override,public,void,on,task,registered,task,task,override,public,void,on,task,unregistered,task,task,wait,response,future,wait,apply,task,id,wait,for,waiting,to,start,await,finally,test,task,plugin,unblock,test,tasks,action,instance,new,request,builder,client,get,t,wait,response,wait,response,future,get,validator,accept,wait,response,test,task,plugin,nodes,response,response,future,get,assert,equals,empty,list,response,failures
TasksIT -> private <T> void waitForCompletionTestCase(boolean storeResult, Function<TaskId, ActionFuture<T>> wait, Consumer<T> validator)             throws Exception;1526510804;Test wait for completion._@param storeResult should the task store its results_@param wait start waiting for a task. Accepts that id of the task to wait for and returns a future waiting for it._@param validator validate the response and return the task ids that were found;private <T> void waitForCompletionTestCase(boolean storeResult, Function<TaskId, ActionFuture<T>> wait, Consumer<T> validator)_            throws Exception {_        _        ActionFuture<TestTaskPlugin.NodesResponse> future = TestTaskPlugin.TestTaskAction.INSTANCE.newRequestBuilder(client())_                .setShouldStoreResult(storeResult).execute()___        ActionFuture<T> waitResponseFuture__        TaskId taskId__        try {_            taskId = waitForTestTaskStartOnAllNodes()___            _            assertBusy(() -> client().admin().cluster().prepareGetTask(taskId).get())___            _            CountDownLatch waitForWaitingToStart = new CountDownLatch(1)__            for (TransportService transportService : internalCluster().getInstances(TransportService.class)) {_                ((MockTaskManager) transportService.getTaskManager()).addListener(new MockTaskManagerListener() {_                    @Override_                    public void waitForTaskCompletion(Task task) {_                        waitForWaitingToStart.countDown()__                    }__                    @Override_                    public void onTaskRegistered(Task task) {_                    }__                    @Override_                    public void onTaskUnregistered(Task task) {_                    }_                })__            }__            _            waitResponseFuture = wait.apply(taskId)___            _            waitForWaitingToStart.await()__        } finally {_            _            TestTaskPlugin.UnblockTestTasksAction.INSTANCE.newRequestBuilder(client()).get()__        }__        _        T waitResponse = waitResponseFuture.get()__        validator.accept(waitResponse)___        TestTaskPlugin.NodesResponse response = future.get()__        assertEquals(emptyList(), response.failures())__    };test,wait,for,completion,param,store,result,should,the,task,store,its,results,param,wait,start,waiting,for,a,task,accepts,that,id,of,the,task,to,wait,for,and,returns,a,future,waiting,for,it,param,validator,validate,the,response,and,return,the,task,ids,that,were,found;private,t,void,wait,for,completion,test,case,boolean,store,result,function,task,id,action,future,t,wait,consumer,t,validator,throws,exception,action,future,test,task,plugin,nodes,response,future,test,task,plugin,test,task,action,instance,new,request,builder,client,set,should,store,result,store,result,execute,action,future,t,wait,response,future,task,id,task,id,try,task,id,wait,for,test,task,start,on,all,nodes,assert,busy,client,admin,cluster,prepare,get,task,task,id,get,count,down,latch,wait,for,waiting,to,start,new,count,down,latch,1,for,transport,service,transport,service,internal,cluster,get,instances,transport,service,class,mock,task,manager,transport,service,get,task,manager,add,listener,new,mock,task,manager,listener,override,public,void,wait,for,task,completion,task,task,wait,for,waiting,to,start,count,down,override,public,void,on,task,registered,task,task,override,public,void,on,task,unregistered,task,task,wait,response,future,wait,apply,task,id,wait,for,waiting,to,start,await,finally,test,task,plugin,unblock,test,tasks,action,instance,new,request,builder,client,get,t,wait,response,wait,response,future,get,validator,accept,wait,response,test,task,plugin,nodes,response,response,future,get,assert,equals,empty,list,response,failures
TasksIT -> private <T> void waitForCompletionTestCase(boolean storeResult, Function<TaskId, ActionFuture<T>> wait, Consumer<T> validator)             throws Exception;1527840262;Test wait for completion._@param storeResult should the task store its results_@param wait start waiting for a task. Accepts that id of the task to wait for and returns a future waiting for it._@param validator validate the response and return the task ids that were found;private <T> void waitForCompletionTestCase(boolean storeResult, Function<TaskId, ActionFuture<T>> wait, Consumer<T> validator)_            throws Exception {_        _        ActionFuture<TestTaskPlugin.NodesResponse> future = new TestTaskPlugin.NodesRequestBuilder(client(),_            TestTaskPlugin.TestTaskAction.INSTANCE).setShouldStoreResult(storeResult).execute()___        ActionFuture<T> waitResponseFuture__        TaskId taskId__        try {_            taskId = waitForTestTaskStartOnAllNodes()___            _            assertBusy(() -> client().admin().cluster().prepareGetTask(taskId).get())___            _            CountDownLatch waitForWaitingToStart = new CountDownLatch(1)__            for (TransportService transportService : internalCluster().getInstances(TransportService.class)) {_                ((MockTaskManager) transportService.getTaskManager()).addListener(new MockTaskManagerListener() {_                    @Override_                    public void waitForTaskCompletion(Task task) {_                        waitForWaitingToStart.countDown()__                    }__                    @Override_                    public void onTaskRegistered(Task task) {_                    }__                    @Override_                    public void onTaskUnregistered(Task task) {_                    }_                })__            }__            _            waitResponseFuture = wait.apply(taskId)___            _            waitForWaitingToStart.await()__        } finally {_            _            new TestTaskPlugin.UnblockTestTasksRequestBuilder(client(), TestTaskPlugin.UnblockTestTasksAction.INSTANCE).get()__        }__        _        T waitResponse = waitResponseFuture.get()__        validator.accept(waitResponse)___        TestTaskPlugin.NodesResponse response = future.get()__        assertEquals(emptyList(), response.failures())__    };test,wait,for,completion,param,store,result,should,the,task,store,its,results,param,wait,start,waiting,for,a,task,accepts,that,id,of,the,task,to,wait,for,and,returns,a,future,waiting,for,it,param,validator,validate,the,response,and,return,the,task,ids,that,were,found;private,t,void,wait,for,completion,test,case,boolean,store,result,function,task,id,action,future,t,wait,consumer,t,validator,throws,exception,action,future,test,task,plugin,nodes,response,future,new,test,task,plugin,nodes,request,builder,client,test,task,plugin,test,task,action,instance,set,should,store,result,store,result,execute,action,future,t,wait,response,future,task,id,task,id,try,task,id,wait,for,test,task,start,on,all,nodes,assert,busy,client,admin,cluster,prepare,get,task,task,id,get,count,down,latch,wait,for,waiting,to,start,new,count,down,latch,1,for,transport,service,transport,service,internal,cluster,get,instances,transport,service,class,mock,task,manager,transport,service,get,task,manager,add,listener,new,mock,task,manager,listener,override,public,void,wait,for,task,completion,task,task,wait,for,waiting,to,start,count,down,override,public,void,on,task,registered,task,task,override,public,void,on,task,unregistered,task,task,wait,response,future,wait,apply,task,id,wait,for,waiting,to,start,await,finally,new,test,task,plugin,unblock,test,tasks,request,builder,client,test,task,plugin,unblock,test,tasks,action,instance,get,t,wait,response,wait,response,future,get,validator,accept,wait,response,test,task,plugin,nodes,response,response,future,get,assert,equals,empty,list,response,failures
TasksIT -> private <T> void waitForCompletionTestCase(boolean storeResult, Function<TaskId, ActionFuture<T>> wait, Consumer<T> validator)             throws Exception;1528762805;Test wait for completion._@param storeResult should the task store its results_@param wait start waiting for a task. Accepts that id of the task to wait for and returns a future waiting for it._@param validator validate the response and return the task ids that were found;private <T> void waitForCompletionTestCase(boolean storeResult, Function<TaskId, ActionFuture<T>> wait, Consumer<T> validator)_            throws Exception {_        _        ActionFuture<TestTaskPlugin.NodesResponse> future = new TestTaskPlugin.NodesRequestBuilder(client(),_            TestTaskPlugin.TestTaskAction.INSTANCE).setShouldStoreResult(storeResult).execute()___        ActionFuture<T> waitResponseFuture__        TaskId taskId__        try {_            taskId = waitForTestTaskStartOnAllNodes()___            _            assertBusy(() -> client().admin().cluster().prepareGetTask(taskId).get())___            _            CountDownLatch waitForWaitingToStart = new CountDownLatch(1)__            for (TransportService transportService : internalCluster().getInstances(TransportService.class)) {_                ((MockTaskManager) transportService.getTaskManager()).addListener(new MockTaskManagerListener() {_                    @Override_                    public void waitForTaskCompletion(Task task) {_                        waitForWaitingToStart.countDown()__                    }__                    @Override_                    public void onTaskRegistered(Task task) {_                    }__                    @Override_                    public void onTaskUnregistered(Task task) {_                    }_                })__            }__            _            waitResponseFuture = wait.apply(taskId)___            _            waitForWaitingToStart.await()__        } finally {_            _            new TestTaskPlugin.UnblockTestTasksRequestBuilder(client(), TestTaskPlugin.UnblockTestTasksAction.INSTANCE).get()__        }__        _        T waitResponse = waitResponseFuture.get()__        validator.accept(waitResponse)___        TestTaskPlugin.NodesResponse response = future.get()__        assertEquals(emptyList(), response.failures())__    };test,wait,for,completion,param,store,result,should,the,task,store,its,results,param,wait,start,waiting,for,a,task,accepts,that,id,of,the,task,to,wait,for,and,returns,a,future,waiting,for,it,param,validator,validate,the,response,and,return,the,task,ids,that,were,found;private,t,void,wait,for,completion,test,case,boolean,store,result,function,task,id,action,future,t,wait,consumer,t,validator,throws,exception,action,future,test,task,plugin,nodes,response,future,new,test,task,plugin,nodes,request,builder,client,test,task,plugin,test,task,action,instance,set,should,store,result,store,result,execute,action,future,t,wait,response,future,task,id,task,id,try,task,id,wait,for,test,task,start,on,all,nodes,assert,busy,client,admin,cluster,prepare,get,task,task,id,get,count,down,latch,wait,for,waiting,to,start,new,count,down,latch,1,for,transport,service,transport,service,internal,cluster,get,instances,transport,service,class,mock,task,manager,transport,service,get,task,manager,add,listener,new,mock,task,manager,listener,override,public,void,wait,for,task,completion,task,task,wait,for,waiting,to,start,count,down,override,public,void,on,task,registered,task,task,override,public,void,on,task,unregistered,task,task,wait,response,future,wait,apply,task,id,wait,for,waiting,to,start,await,finally,new,test,task,plugin,unblock,test,tasks,request,builder,client,test,task,plugin,unblock,test,tasks,action,instance,get,t,wait,response,wait,response,future,get,validator,accept,wait,response,test,task,plugin,nodes,response,response,future,get,assert,equals,empty,list,response,failures
TasksIT -> private <T> void waitForCompletionTestCase(boolean storeResult, Function<TaskId, ActionFuture<T>> wait, Consumer<T> validator)             throws Exception;1531179852;Test wait for completion._@param storeResult should the task store its results_@param wait start waiting for a task. Accepts that id of the task to wait for and returns a future waiting for it._@param validator validate the response and return the task ids that were found;private <T> void waitForCompletionTestCase(boolean storeResult, Function<TaskId, ActionFuture<T>> wait, Consumer<T> validator)_            throws Exception {_        _        ActionFuture<TestTaskPlugin.NodesResponse> future = new TestTaskPlugin.NodesRequestBuilder(client(),_            TestTaskPlugin.TestTaskAction.INSTANCE).setShouldStoreResult(storeResult).execute()___        ActionFuture<T> waitResponseFuture__        TaskId taskId__        try {_            taskId = waitForTestTaskStartOnAllNodes()___            _            assertBusy(() -> client().admin().cluster().prepareGetTask(taskId).get())___            _            CountDownLatch waitForWaitingToStart = new CountDownLatch(1)__            for (TransportService transportService : internalCluster().getInstances(TransportService.class)) {_                ((MockTaskManager) transportService.getTaskManager()).addListener(new MockTaskManagerListener() {_                    @Override_                    public void waitForTaskCompletion(Task task) {_                        waitForWaitingToStart.countDown()__                    }__                    @Override_                    public void onTaskRegistered(Task task) {_                    }__                    @Override_                    public void onTaskUnregistered(Task task) {_                    }_                })__            }__            _            waitResponseFuture = wait.apply(taskId)___            _            waitForWaitingToStart.await()__        } finally {_            _            new TestTaskPlugin.UnblockTestTasksRequestBuilder(client(), TestTaskPlugin.UnblockTestTasksAction.INSTANCE).get()__        }__        _        T waitResponse = waitResponseFuture.get()__        validator.accept(waitResponse)___        TestTaskPlugin.NodesResponse response = future.get()__        assertEquals(emptyList(), response.failures())__    };test,wait,for,completion,param,store,result,should,the,task,store,its,results,param,wait,start,waiting,for,a,task,accepts,that,id,of,the,task,to,wait,for,and,returns,a,future,waiting,for,it,param,validator,validate,the,response,and,return,the,task,ids,that,were,found;private,t,void,wait,for,completion,test,case,boolean,store,result,function,task,id,action,future,t,wait,consumer,t,validator,throws,exception,action,future,test,task,plugin,nodes,response,future,new,test,task,plugin,nodes,request,builder,client,test,task,plugin,test,task,action,instance,set,should,store,result,store,result,execute,action,future,t,wait,response,future,task,id,task,id,try,task,id,wait,for,test,task,start,on,all,nodes,assert,busy,client,admin,cluster,prepare,get,task,task,id,get,count,down,latch,wait,for,waiting,to,start,new,count,down,latch,1,for,transport,service,transport,service,internal,cluster,get,instances,transport,service,class,mock,task,manager,transport,service,get,task,manager,add,listener,new,mock,task,manager,listener,override,public,void,wait,for,task,completion,task,task,wait,for,waiting,to,start,count,down,override,public,void,on,task,registered,task,task,override,public,void,on,task,unregistered,task,task,wait,response,future,wait,apply,task,id,wait,for,waiting,to,start,await,finally,new,test,task,plugin,unblock,test,tasks,request,builder,client,test,task,plugin,unblock,test,tasks,action,instance,get,t,wait,response,wait,response,future,get,validator,accept,wait,response,test,task,plugin,nodes,response,response,future,get,assert,equals,empty,list,response,failures
TasksIT -> private <T> void waitForCompletionTestCase(boolean storeResult, Function<TaskId, ActionFuture<T>> wait, Consumer<T> validator)             throws Exception;1543415307;Test wait for completion._@param storeResult should the task store its results_@param wait start waiting for a task. Accepts that id of the task to wait for and returns a future waiting for it._@param validator validate the response and return the task ids that were found;private <T> void waitForCompletionTestCase(boolean storeResult, Function<TaskId, ActionFuture<T>> wait, Consumer<T> validator)_            throws Exception {_        _        ActionFuture<TestTaskPlugin.NodesResponse> future = new TestTaskPlugin.NodesRequestBuilder(client(),_            TestTaskPlugin.TestTaskAction.INSTANCE).setShouldStoreResult(storeResult).execute()___        ActionFuture<T> waitResponseFuture__        TaskId taskId__        try {_            taskId = waitForTestTaskStartOnAllNodes()___            _            assertBusy(() -> client().admin().cluster().prepareGetTask(taskId).get())___            _            CountDownLatch waitForWaitingToStart = new CountDownLatch(1)__            for (TransportService transportService : internalCluster().getInstances(TransportService.class)) {_                ((MockTaskManager) transportService.getTaskManager()).addListener(new MockTaskManagerListener() {_                    @Override_                    public void waitForTaskCompletion(Task task) {_                        waitForWaitingToStart.countDown()__                    }__                    @Override_                    public void onTaskRegistered(Task task) {_                    }__                    @Override_                    public void onTaskUnregistered(Task task) {_                    }_                })__            }__            _            waitResponseFuture = wait.apply(taskId)___            _            waitForWaitingToStart.await()__        } finally {_            _            new TestTaskPlugin.UnblockTestTasksRequestBuilder(client(), TestTaskPlugin.UnblockTestTasksAction.INSTANCE).get()__        }__        _        T waitResponse = waitResponseFuture.get()__        validator.accept(waitResponse)___        TestTaskPlugin.NodesResponse response = future.get()__        assertEquals(emptyList(), response.failures())__    };test,wait,for,completion,param,store,result,should,the,task,store,its,results,param,wait,start,waiting,for,a,task,accepts,that,id,of,the,task,to,wait,for,and,returns,a,future,waiting,for,it,param,validator,validate,the,response,and,return,the,task,ids,that,were,found;private,t,void,wait,for,completion,test,case,boolean,store,result,function,task,id,action,future,t,wait,consumer,t,validator,throws,exception,action,future,test,task,plugin,nodes,response,future,new,test,task,plugin,nodes,request,builder,client,test,task,plugin,test,task,action,instance,set,should,store,result,store,result,execute,action,future,t,wait,response,future,task,id,task,id,try,task,id,wait,for,test,task,start,on,all,nodes,assert,busy,client,admin,cluster,prepare,get,task,task,id,get,count,down,latch,wait,for,waiting,to,start,new,count,down,latch,1,for,transport,service,transport,service,internal,cluster,get,instances,transport,service,class,mock,task,manager,transport,service,get,task,manager,add,listener,new,mock,task,manager,listener,override,public,void,wait,for,task,completion,task,task,wait,for,waiting,to,start,count,down,override,public,void,on,task,registered,task,task,override,public,void,on,task,unregistered,task,task,wait,response,future,wait,apply,task,id,wait,for,waiting,to,start,await,finally,new,test,task,plugin,unblock,test,tasks,request,builder,client,test,task,plugin,unblock,test,tasks,action,instance,get,t,wait,response,wait,response,future,get,validator,accept,wait,response,test,task,plugin,nodes,response,response,future,get,assert,equals,empty,list,response,failures
TasksIT -> private <T> void waitForCompletionTestCase(boolean storeResult, Function<TaskId, ActionFuture<T>> wait, Consumer<T> validator)             throws Exception;1544035746;Test wait for completion._@param storeResult should the task store its results_@param wait start waiting for a task. Accepts that id of the task to wait for and returns a future waiting for it._@param validator validate the response and return the task ids that were found;private <T> void waitForCompletionTestCase(boolean storeResult, Function<TaskId, ActionFuture<T>> wait, Consumer<T> validator)_            throws Exception {_        _        ActionFuture<TestTaskPlugin.NodesResponse> future = new TestTaskPlugin.NodesRequestBuilder(client(),_            TestTaskPlugin.TestTaskAction.INSTANCE).setShouldStoreResult(storeResult).execute()___        ActionFuture<T> waitResponseFuture__        TaskId taskId__        try {_            taskId = waitForTestTaskStartOnAllNodes()___            _            assertBusy(() -> client().admin().cluster().prepareGetTask(taskId).get())___            _            CountDownLatch waitForWaitingToStart = new CountDownLatch(1)__            for (TransportService transportService : internalCluster().getInstances(TransportService.class)) {_                ((MockTaskManager) transportService.getTaskManager()).addListener(new MockTaskManagerListener() {_                    @Override_                    public void waitForTaskCompletion(Task task) {_                        waitForWaitingToStart.countDown()__                    }__                    @Override_                    public void onTaskRegistered(Task task) {_                    }__                    @Override_                    public void onTaskUnregistered(Task task) {_                    }_                })__            }__            _            waitResponseFuture = wait.apply(taskId)___            _            waitForWaitingToStart.await()__        } finally {_            _            new TestTaskPlugin.UnblockTestTasksRequestBuilder(client(), TestTaskPlugin.UnblockTestTasksAction.INSTANCE).get()__        }__        _        T waitResponse = waitResponseFuture.get()__        validator.accept(waitResponse)___        TestTaskPlugin.NodesResponse response = future.get()__        assertEquals(emptyList(), response.failures())__    };test,wait,for,completion,param,store,result,should,the,task,store,its,results,param,wait,start,waiting,for,a,task,accepts,that,id,of,the,task,to,wait,for,and,returns,a,future,waiting,for,it,param,validator,validate,the,response,and,return,the,task,ids,that,were,found;private,t,void,wait,for,completion,test,case,boolean,store,result,function,task,id,action,future,t,wait,consumer,t,validator,throws,exception,action,future,test,task,plugin,nodes,response,future,new,test,task,plugin,nodes,request,builder,client,test,task,plugin,test,task,action,instance,set,should,store,result,store,result,execute,action,future,t,wait,response,future,task,id,task,id,try,task,id,wait,for,test,task,start,on,all,nodes,assert,busy,client,admin,cluster,prepare,get,task,task,id,get,count,down,latch,wait,for,waiting,to,start,new,count,down,latch,1,for,transport,service,transport,service,internal,cluster,get,instances,transport,service,class,mock,task,manager,transport,service,get,task,manager,add,listener,new,mock,task,manager,listener,override,public,void,wait,for,task,completion,task,task,wait,for,waiting,to,start,count,down,override,public,void,on,task,registered,task,task,override,public,void,on,task,unregistered,task,task,wait,response,future,wait,apply,task,id,wait,for,waiting,to,start,await,finally,new,test,task,plugin,unblock,test,tasks,request,builder,client,test,task,plugin,unblock,test,tasks,action,instance,get,t,wait,response,wait,response,future,get,validator,accept,wait,response,test,task,plugin,nodes,response,response,future,get,assert,equals,empty,list,response,failures
TasksIT -> private <T> void waitForCompletionTestCase(boolean storeResult, Function<TaskId, ActionFuture<T>> wait, Consumer<T> validator)             throws Exception;1548458964;Test wait for completion._@param storeResult should the task store its results_@param wait start waiting for a task. Accepts that id of the task to wait for and returns a future waiting for it._@param validator validate the response and return the task ids that were found;private <T> void waitForCompletionTestCase(boolean storeResult, Function<TaskId, ActionFuture<T>> wait, Consumer<T> validator)_            throws Exception {_        _        ActionFuture<TestTaskPlugin.NodesResponse> future = new TestTaskPlugin.NodesRequestBuilder(client(),_            TestTaskPlugin.TestTaskAction.INSTANCE).setShouldStoreResult(storeResult).execute()___        ActionFuture<T> waitResponseFuture__        TaskId taskId__        try {_            taskId = waitForTestTaskStartOnAllNodes()___            _            assertBusy(() -> client().admin().cluster().prepareGetTask(taskId).get())___            _            CountDownLatch waitForWaitingToStart = new CountDownLatch(1)__            for (TransportService transportService : internalCluster().getInstances(TransportService.class)) {_                ((MockTaskManager) transportService.getTaskManager()).addListener(new MockTaskManagerListener() {_                    @Override_                    public void waitForTaskCompletion(Task task) {_                        waitForWaitingToStart.countDown()__                    }__                    @Override_                    public void onTaskRegistered(Task task) {_                    }__                    @Override_                    public void onTaskUnregistered(Task task) {_                    }_                })__            }__            _            waitResponseFuture = wait.apply(taskId)___            _            waitForWaitingToStart.await()__        } finally {_            _            new TestTaskPlugin.UnblockTestTasksRequestBuilder(client(), TestTaskPlugin.UnblockTestTasksAction.INSTANCE).get()__        }__        _        T waitResponse = waitResponseFuture.get()__        validator.accept(waitResponse)___        TestTaskPlugin.NodesResponse response = future.get()__        assertEquals(emptyList(), response.failures())__    };test,wait,for,completion,param,store,result,should,the,task,store,its,results,param,wait,start,waiting,for,a,task,accepts,that,id,of,the,task,to,wait,for,and,returns,a,future,waiting,for,it,param,validator,validate,the,response,and,return,the,task,ids,that,were,found;private,t,void,wait,for,completion,test,case,boolean,store,result,function,task,id,action,future,t,wait,consumer,t,validator,throws,exception,action,future,test,task,plugin,nodes,response,future,new,test,task,plugin,nodes,request,builder,client,test,task,plugin,test,task,action,instance,set,should,store,result,store,result,execute,action,future,t,wait,response,future,task,id,task,id,try,task,id,wait,for,test,task,start,on,all,nodes,assert,busy,client,admin,cluster,prepare,get,task,task,id,get,count,down,latch,wait,for,waiting,to,start,new,count,down,latch,1,for,transport,service,transport,service,internal,cluster,get,instances,transport,service,class,mock,task,manager,transport,service,get,task,manager,add,listener,new,mock,task,manager,listener,override,public,void,wait,for,task,completion,task,task,wait,for,waiting,to,start,count,down,override,public,void,on,task,registered,task,task,override,public,void,on,task,unregistered,task,task,wait,response,future,wait,apply,task,id,wait,for,waiting,to,start,await,finally,new,test,task,plugin,unblock,test,tasks,request,builder,client,test,task,plugin,unblock,test,tasks,action,instance,get,t,wait,response,wait,response,future,get,validator,accept,wait,response,test,task,plugin,nodes,response,response,future,get,assert,equals,empty,list,response,failures
TasksIT -> private <T> void waitForCompletionTestCase(boolean storeResult, Function<TaskId, ActionFuture<T>> wait, Consumer<T> validator)             throws Exception;1548958612;Test wait for completion._@param storeResult should the task store its results_@param wait start waiting for a task. Accepts that id of the task to wait for and returns a future waiting for it._@param validator validate the response and return the task ids that were found;private <T> void waitForCompletionTestCase(boolean storeResult, Function<TaskId, ActionFuture<T>> wait, Consumer<T> validator)_            throws Exception {_        _        ActionFuture<TestTaskPlugin.NodesResponse> future = new TestTaskPlugin.NodesRequestBuilder(client(),_            TestTaskPlugin.TestTaskAction.INSTANCE).setShouldStoreResult(storeResult).execute()___        ActionFuture<T> waitResponseFuture__        TaskId taskId__        try {_            taskId = waitForTestTaskStartOnAllNodes()___            _            assertBusy(() -> client().admin().cluster().prepareGetTask(taskId).get())___            _            CountDownLatch waitForWaitingToStart = new CountDownLatch(1)__            for (TransportService transportService : internalCluster().getInstances(TransportService.class)) {_                ((MockTaskManager) transportService.getTaskManager()).addListener(new MockTaskManagerListener() {_                    @Override_                    public void waitForTaskCompletion(Task task) {_                        waitForWaitingToStart.countDown()__                    }__                    @Override_                    public void onTaskRegistered(Task task) {_                    }__                    @Override_                    public void onTaskUnregistered(Task task) {_                    }_                })__            }__            _            waitResponseFuture = wait.apply(taskId)___            _            waitForWaitingToStart.await()__        } finally {_            _            new TestTaskPlugin.UnblockTestTasksRequestBuilder(client(), TestTaskPlugin.UnblockTestTasksAction.INSTANCE).get()__        }__        _        T waitResponse = waitResponseFuture.get()__        validator.accept(waitResponse)___        TestTaskPlugin.NodesResponse response = future.get()__        assertEquals(emptyList(), response.failures())__    };test,wait,for,completion,param,store,result,should,the,task,store,its,results,param,wait,start,waiting,for,a,task,accepts,that,id,of,the,task,to,wait,for,and,returns,a,future,waiting,for,it,param,validator,validate,the,response,and,return,the,task,ids,that,were,found;private,t,void,wait,for,completion,test,case,boolean,store,result,function,task,id,action,future,t,wait,consumer,t,validator,throws,exception,action,future,test,task,plugin,nodes,response,future,new,test,task,plugin,nodes,request,builder,client,test,task,plugin,test,task,action,instance,set,should,store,result,store,result,execute,action,future,t,wait,response,future,task,id,task,id,try,task,id,wait,for,test,task,start,on,all,nodes,assert,busy,client,admin,cluster,prepare,get,task,task,id,get,count,down,latch,wait,for,waiting,to,start,new,count,down,latch,1,for,transport,service,transport,service,internal,cluster,get,instances,transport,service,class,mock,task,manager,transport,service,get,task,manager,add,listener,new,mock,task,manager,listener,override,public,void,wait,for,task,completion,task,task,wait,for,waiting,to,start,count,down,override,public,void,on,task,registered,task,task,override,public,void,on,task,unregistered,task,task,wait,response,future,wait,apply,task,id,wait,for,waiting,to,start,await,finally,new,test,task,plugin,unblock,test,tasks,request,builder,client,test,task,plugin,unblock,test,tasks,action,instance,get,t,wait,response,wait,response,future,get,validator,accept,wait,response,test,task,plugin,nodes,response,response,future,get,assert,equals,empty,list,response,failures
TasksIT -> private void assertParentTask(List<TaskInfo> tasks, TaskInfo parentTask);1524684173;Asserts that all tasks in the tasks list have the same parentTask;private void assertParentTask(List<TaskInfo> tasks, TaskInfo parentTask) {_        for (TaskInfo task : tasks) {_            assertParentTask(task, parentTask)__        }_    };asserts,that,all,tasks,in,the,tasks,list,have,the,same,parent,task;private,void,assert,parent,task,list,task,info,tasks,task,info,parent,task,for,task,info,task,tasks,assert,parent,task,task,parent,task
TasksIT -> private void assertParentTask(List<TaskInfo> tasks, TaskInfo parentTask);1526510804;Asserts that all tasks in the tasks list have the same parentTask;private void assertParentTask(List<TaskInfo> tasks, TaskInfo parentTask) {_        for (TaskInfo task : tasks) {_            assertParentTask(task, parentTask)__        }_    };asserts,that,all,tasks,in,the,tasks,list,have,the,same,parent,task;private,void,assert,parent,task,list,task,info,tasks,task,info,parent,task,for,task,info,task,tasks,assert,parent,task,task,parent,task
TasksIT -> private void assertParentTask(List<TaskInfo> tasks, TaskInfo parentTask);1527840262;Asserts that all tasks in the tasks list have the same parentTask;private void assertParentTask(List<TaskInfo> tasks, TaskInfo parentTask) {_        for (TaskInfo task : tasks) {_            assertParentTask(task, parentTask)__        }_    };asserts,that,all,tasks,in,the,tasks,list,have,the,same,parent,task;private,void,assert,parent,task,list,task,info,tasks,task,info,parent,task,for,task,info,task,tasks,assert,parent,task,task,parent,task
TasksIT -> private void assertParentTask(List<TaskInfo> tasks, TaskInfo parentTask);1528762805;Asserts that all tasks in the tasks list have the same parentTask;private void assertParentTask(List<TaskInfo> tasks, TaskInfo parentTask) {_        for (TaskInfo task : tasks) {_            assertParentTask(task, parentTask)__        }_    };asserts,that,all,tasks,in,the,tasks,list,have,the,same,parent,task;private,void,assert,parent,task,list,task,info,tasks,task,info,parent,task,for,task,info,task,tasks,assert,parent,task,task,parent,task
TasksIT -> private void assertParentTask(List<TaskInfo> tasks, TaskInfo parentTask);1531179852;Asserts that all tasks in the tasks list have the same parentTask;private void assertParentTask(List<TaskInfo> tasks, TaskInfo parentTask) {_        for (TaskInfo task : tasks) {_            assertParentTask(task, parentTask)__        }_    };asserts,that,all,tasks,in,the,tasks,list,have,the,same,parent,task;private,void,assert,parent,task,list,task,info,tasks,task,info,parent,task,for,task,info,task,tasks,assert,parent,task,task,parent,task
TasksIT -> private void assertParentTask(List<TaskInfo> tasks, TaskInfo parentTask);1543415307;Asserts that all tasks in the tasks list have the same parentTask;private void assertParentTask(List<TaskInfo> tasks, TaskInfo parentTask) {_        for (TaskInfo task : tasks) {_            assertParentTask(task, parentTask)__        }_    };asserts,that,all,tasks,in,the,tasks,list,have,the,same,parent,task;private,void,assert,parent,task,list,task,info,tasks,task,info,parent,task,for,task,info,task,tasks,assert,parent,task,task,parent,task
TasksIT -> private void assertParentTask(List<TaskInfo> tasks, TaskInfo parentTask);1544035746;Asserts that all tasks in the tasks list have the same parentTask;private void assertParentTask(List<TaskInfo> tasks, TaskInfo parentTask) {_        for (TaskInfo task : tasks) {_            assertParentTask(task, parentTask)__        }_    };asserts,that,all,tasks,in,the,tasks,list,have,the,same,parent,task;private,void,assert,parent,task,list,task,info,tasks,task,info,parent,task,for,task,info,task,tasks,assert,parent,task,task,parent,task
TasksIT -> private void assertParentTask(List<TaskInfo> tasks, TaskInfo parentTask);1548458964;Asserts that all tasks in the tasks list have the same parentTask;private void assertParentTask(List<TaskInfo> tasks, TaskInfo parentTask) {_        for (TaskInfo task : tasks) {_            assertParentTask(task, parentTask)__        }_    };asserts,that,all,tasks,in,the,tasks,list,have,the,same,parent,task;private,void,assert,parent,task,list,task,info,tasks,task,info,parent,task,for,task,info,task,tasks,assert,parent,task,task,parent,task
TasksIT -> private void assertParentTask(List<TaskInfo> tasks, TaskInfo parentTask);1548958612;Asserts that all tasks in the tasks list have the same parentTask;private void assertParentTask(List<TaskInfo> tasks, TaskInfo parentTask) {_        for (TaskInfo task : tasks) {_            assertParentTask(task, parentTask)__        }_    };asserts,that,all,tasks,in,the,tasks,list,have,the,same,parent,task;private,void,assert,parent,task,list,task,info,tasks,task,info,parent,task,for,task,info,task,tasks,assert,parent,task,task,parent,task
TasksIT -> private GetTaskResponse expectFinishedTask(TaskId taskId) throws IOException;1524684173;Fetch the task status from the list tasks API using it's "fallback to get from the task index" behavior. Asserts some obvious stuff_about the fetched task and returns a map of it's status.;private GetTaskResponse expectFinishedTask(TaskId taskId) throws IOException {_        GetTaskResponse response = client().admin().cluster().prepareGetTask(taskId).get()__        assertTrue("the task should have been completed before fetching", response.getTask().isCompleted())__        TaskInfo info = response.getTask().getTask()__        assertEquals(taskId, info.getTaskId())__        assertNull(info.getStatus())_ _        return response__    };fetch,the,task,status,from,the,list,tasks,api,using,it,s,fallback,to,get,from,the,task,index,behavior,asserts,some,obvious,stuff,about,the,fetched,task,and,returns,a,map,of,it,s,status;private,get,task,response,expect,finished,task,task,id,task,id,throws,ioexception,get,task,response,response,client,admin,cluster,prepare,get,task,task,id,get,assert,true,the,task,should,have,been,completed,before,fetching,response,get,task,is,completed,task,info,info,response,get,task,get,task,assert,equals,task,id,info,get,task,id,assert,null,info,get,status,return,response
TasksIT -> private GetTaskResponse expectFinishedTask(TaskId taskId) throws IOException;1526510804;Fetch the task status from the list tasks API using it's "fallback to get from the task index" behavior. Asserts some obvious stuff_about the fetched task and returns a map of it's status.;private GetTaskResponse expectFinishedTask(TaskId taskId) throws IOException {_        GetTaskResponse response = client().admin().cluster().prepareGetTask(taskId).get()__        assertTrue("the task should have been completed before fetching", response.getTask().isCompleted())__        TaskInfo info = response.getTask().getTask()__        assertEquals(taskId, info.getTaskId())__        assertNull(info.getStatus())_ _        return response__    };fetch,the,task,status,from,the,list,tasks,api,using,it,s,fallback,to,get,from,the,task,index,behavior,asserts,some,obvious,stuff,about,the,fetched,task,and,returns,a,map,of,it,s,status;private,get,task,response,expect,finished,task,task,id,task,id,throws,ioexception,get,task,response,response,client,admin,cluster,prepare,get,task,task,id,get,assert,true,the,task,should,have,been,completed,before,fetching,response,get,task,is,completed,task,info,info,response,get,task,get,task,assert,equals,task,id,info,get,task,id,assert,null,info,get,status,return,response
TasksIT -> private GetTaskResponse expectFinishedTask(TaskId taskId) throws IOException;1527840262;Fetch the task status from the list tasks API using it's "fallback to get from the task index" behavior. Asserts some obvious stuff_about the fetched task and returns a map of it's status.;private GetTaskResponse expectFinishedTask(TaskId taskId) throws IOException {_        GetTaskResponse response = client().admin().cluster().prepareGetTask(taskId).get()__        assertTrue("the task should have been completed before fetching", response.getTask().isCompleted())__        TaskInfo info = response.getTask().getTask()__        assertEquals(taskId, info.getTaskId())__        assertNull(info.getStatus())_ _        return response__    };fetch,the,task,status,from,the,list,tasks,api,using,it,s,fallback,to,get,from,the,task,index,behavior,asserts,some,obvious,stuff,about,the,fetched,task,and,returns,a,map,of,it,s,status;private,get,task,response,expect,finished,task,task,id,task,id,throws,ioexception,get,task,response,response,client,admin,cluster,prepare,get,task,task,id,get,assert,true,the,task,should,have,been,completed,before,fetching,response,get,task,is,completed,task,info,info,response,get,task,get,task,assert,equals,task,id,info,get,task,id,assert,null,info,get,status,return,response
TasksIT -> private GetTaskResponse expectFinishedTask(TaskId taskId) throws IOException;1528762805;Fetch the task status from the list tasks API using it's "fallback to get from the task index" behavior. Asserts some obvious stuff_about the fetched task and returns a map of it's status.;private GetTaskResponse expectFinishedTask(TaskId taskId) throws IOException {_        GetTaskResponse response = client().admin().cluster().prepareGetTask(taskId).get()__        assertTrue("the task should have been completed before fetching", response.getTask().isCompleted())__        TaskInfo info = response.getTask().getTask()__        assertEquals(taskId, info.getTaskId())__        assertNull(info.getStatus())_ _        return response__    };fetch,the,task,status,from,the,list,tasks,api,using,it,s,fallback,to,get,from,the,task,index,behavior,asserts,some,obvious,stuff,about,the,fetched,task,and,returns,a,map,of,it,s,status;private,get,task,response,expect,finished,task,task,id,task,id,throws,ioexception,get,task,response,response,client,admin,cluster,prepare,get,task,task,id,get,assert,true,the,task,should,have,been,completed,before,fetching,response,get,task,is,completed,task,info,info,response,get,task,get,task,assert,equals,task,id,info,get,task,id,assert,null,info,get,status,return,response
TasksIT -> private GetTaskResponse expectFinishedTask(TaskId taskId) throws IOException;1531179852;Fetch the task status from the list tasks API using it's "fallback to get from the task index" behavior. Asserts some obvious stuff_about the fetched task and returns a map of it's status.;private GetTaskResponse expectFinishedTask(TaskId taskId) throws IOException {_        GetTaskResponse response = client().admin().cluster().prepareGetTask(taskId).get()__        assertTrue("the task should have been completed before fetching", response.getTask().isCompleted())__        TaskInfo info = response.getTask().getTask()__        assertEquals(taskId, info.getTaskId())__        assertNull(info.getStatus())_ _        return response__    };fetch,the,task,status,from,the,list,tasks,api,using,it,s,fallback,to,get,from,the,task,index,behavior,asserts,some,obvious,stuff,about,the,fetched,task,and,returns,a,map,of,it,s,status;private,get,task,response,expect,finished,task,task,id,task,id,throws,ioexception,get,task,response,response,client,admin,cluster,prepare,get,task,task,id,get,assert,true,the,task,should,have,been,completed,before,fetching,response,get,task,is,completed,task,info,info,response,get,task,get,task,assert,equals,task,id,info,get,task,id,assert,null,info,get,status,return,response
TasksIT -> private GetTaskResponse expectFinishedTask(TaskId taskId) throws IOException;1543415307;Fetch the task status from the list tasks API using it's "fallback to get from the task index" behavior. Asserts some obvious stuff_about the fetched task and returns a map of it's status.;private GetTaskResponse expectFinishedTask(TaskId taskId) throws IOException {_        GetTaskResponse response = client().admin().cluster().prepareGetTask(taskId).get()__        assertTrue("the task should have been completed before fetching", response.getTask().isCompleted())__        TaskInfo info = response.getTask().getTask()__        assertEquals(taskId, info.getTaskId())__        assertNull(info.getStatus())_ _        return response__    };fetch,the,task,status,from,the,list,tasks,api,using,it,s,fallback,to,get,from,the,task,index,behavior,asserts,some,obvious,stuff,about,the,fetched,task,and,returns,a,map,of,it,s,status;private,get,task,response,expect,finished,task,task,id,task,id,throws,ioexception,get,task,response,response,client,admin,cluster,prepare,get,task,task,id,get,assert,true,the,task,should,have,been,completed,before,fetching,response,get,task,is,completed,task,info,info,response,get,task,get,task,assert,equals,task,id,info,get,task,id,assert,null,info,get,status,return,response
TasksIT -> private GetTaskResponse expectFinishedTask(TaskId taskId) throws IOException;1544035746;Fetch the task status from the list tasks API using it's "fallback to get from the task index" behavior. Asserts some obvious stuff_about the fetched task and returns a map of it's status.;private GetTaskResponse expectFinishedTask(TaskId taskId) throws IOException {_        GetTaskResponse response = client().admin().cluster().prepareGetTask(taskId).get()__        assertTrue("the task should have been completed before fetching", response.getTask().isCompleted())__        TaskInfo info = response.getTask().getTask()__        assertEquals(taskId, info.getTaskId())__        assertNull(info.getStatus())_ _        return response__    };fetch,the,task,status,from,the,list,tasks,api,using,it,s,fallback,to,get,from,the,task,index,behavior,asserts,some,obvious,stuff,about,the,fetched,task,and,returns,a,map,of,it,s,status;private,get,task,response,expect,finished,task,task,id,task,id,throws,ioexception,get,task,response,response,client,admin,cluster,prepare,get,task,task,id,get,assert,true,the,task,should,have,been,completed,before,fetching,response,get,task,is,completed,task,info,info,response,get,task,get,task,assert,equals,task,id,info,get,task,id,assert,null,info,get,status,return,response
TasksIT -> private GetTaskResponse expectFinishedTask(TaskId taskId) throws IOException;1548458964;Fetch the task status from the list tasks API using it's "fallback to get from the task index" behavior. Asserts some obvious stuff_about the fetched task and returns a map of it's status.;private GetTaskResponse expectFinishedTask(TaskId taskId) throws IOException {_        GetTaskResponse response = client().admin().cluster().prepareGetTask(taskId).get()__        assertTrue("the task should have been completed before fetching", response.getTask().isCompleted())__        TaskInfo info = response.getTask().getTask()__        assertEquals(taskId, info.getTaskId())__        assertNull(info.getStatus())_ _        return response__    };fetch,the,task,status,from,the,list,tasks,api,using,it,s,fallback,to,get,from,the,task,index,behavior,asserts,some,obvious,stuff,about,the,fetched,task,and,returns,a,map,of,it,s,status;private,get,task,response,expect,finished,task,task,id,task,id,throws,ioexception,get,task,response,response,client,admin,cluster,prepare,get,task,task,id,get,assert,true,the,task,should,have,been,completed,before,fetching,response,get,task,is,completed,task,info,info,response,get,task,get,task,assert,equals,task,id,info,get,task,id,assert,null,info,get,status,return,response
TasksIT -> private GetTaskResponse expectFinishedTask(TaskId taskId) throws IOException;1548958612;Fetch the task status from the list tasks API using it's "fallback to get from the task index" behavior. Asserts some obvious stuff_about the fetched task and returns a map of it's status.;private GetTaskResponse expectFinishedTask(TaskId taskId) throws IOException {_        GetTaskResponse response = client().admin().cluster().prepareGetTask(taskId).get()__        assertTrue("the task should have been completed before fetching", response.getTask().isCompleted())__        TaskInfo info = response.getTask().getTask()__        assertEquals(taskId, info.getTaskId())__        assertNull(info.getStatus())_ _        return response__    };fetch,the,task,status,from,the,list,tasks,api,using,it,s,fallback,to,get,from,the,task,index,behavior,asserts,some,obvious,stuff,about,the,fetched,task,and,returns,a,map,of,it,s,status;private,get,task,response,expect,finished,task,task,id,task,id,throws,ioexception,get,task,response,response,client,admin,cluster,prepare,get,task,task,id,get,assert,true,the,task,should,have,been,completed,before,fetching,response,get,task,is,completed,task,info,info,response,get,task,get,task,assert,equals,task,id,info,get,task,id,assert,null,info,get,status,return,response
