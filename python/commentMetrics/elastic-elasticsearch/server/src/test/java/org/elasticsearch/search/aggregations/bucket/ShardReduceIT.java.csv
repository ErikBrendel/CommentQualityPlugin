commented;modifiers;parameterAmount;loc;comment;code
false;private;2;15;;private IndexRequestBuilder indexDoc(String date, int value) throws Exception {     return client().prepareIndex("idx", "type").setSource(jsonBuilder().startObject().field("value", value).field("ip", "10.0.0." + value).field("location", GeoHashUtils.stringEncode(5, 52, GeoHashUtils.PRECISION)).field("date", date).field("term-l", 1).field("term-d", 1.5).field("term-s", "term").startObject("nested").field("date", date).endObject().endObject()). }
false;public;0;12;;@Override public void setupSuiteScopeCluster() throws Exception {     assertAcked(prepareCreate("idx").addMapping("type", "nested", "type=nested", "ip", "type=ip", "location", "type=geo_point", "term-s", "type=keyword")).     indexRandom(true, indexDoc("2014-01-01", 1), indexDoc("2014-01-02", 2), indexDoc("2014-01-04", 3)).     ensureSearchable(). }
false;public;0;14;;public void testGlobal() throws Exception {     SearchResponse response = client().prepareSearch("idx").setQuery(QueryBuilders.matchAllQuery()).addAggregation(global("global").subAggregation(dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.DAY).minDocCount(0))).get().     assertSearchResponse(response).     Global global = response.getAggregations().get("global").     Histogram histo = global.getAggregations().get("histo").     assertThat(histo.getBuckets().size(), equalTo(4)). }
false;public;0;14;;public void testFilter() throws Exception {     SearchResponse response = client().prepareSearch("idx").setQuery(QueryBuilders.matchAllQuery()).addAggregation(filter("filter", QueryBuilders.matchAllQuery()).subAggregation(dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.DAY).minDocCount(0))).get().     assertSearchResponse(response).     Filter filter = response.getAggregations().get("filter").     Histogram histo = filter.getAggregations().get("histo").     assertThat(histo.getBuckets().size(), equalTo(4)). }
false;public;0;14;;public void testMissing() throws Exception {     SearchResponse response = client().prepareSearch("idx").setQuery(QueryBuilders.matchAllQuery()).addAggregation(missing("missing").field("foobar").subAggregation(dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.DAY).minDocCount(0))).get().     assertSearchResponse(response).     Missing missing = response.getAggregations().get("missing").     Histogram histo = missing.getAggregations().get("histo").     assertThat(histo.getBuckets().size(), equalTo(4)). }
false;public;0;18;;public void testGlobalWithFilterWithMissing() throws Exception {     SearchResponse response = client().prepareSearch("idx").setQuery(QueryBuilders.matchAllQuery()).addAggregation(global("global").subAggregation(filter("filter", QueryBuilders.matchAllQuery()).subAggregation(missing("missing").field("foobar").subAggregation(dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.DAY).minDocCount(0))))).get().     assertSearchResponse(response).     Global global = response.getAggregations().get("global").     Filter filter = global.getAggregations().get("filter").     Missing missing = filter.getAggregations().get("missing").     Histogram histo = missing.getAggregations().get("histo").     assertThat(histo.getBuckets().size(), equalTo(4)). }
false;public;0;14;;public void testNested() throws Exception {     SearchResponse response = client().prepareSearch("idx").setQuery(QueryBuilders.matchAllQuery()).addAggregation(nested("nested", "nested").subAggregation(dateHistogram("histo").field("nested.date").dateHistogramInterval(DateHistogramInterval.DAY).minDocCount(0))).get().     assertSearchResponse(response).     Nested nested = response.getAggregations().get("nested").     Histogram histo = nested.getAggregations().get("histo").     assertThat(histo.getBuckets().size(), equalTo(4)). }
false;public;0;15;;public void testStringTerms() throws Exception {     SearchResponse response = client().prepareSearch("idx").setQuery(QueryBuilders.matchAllQuery()).addAggregation(terms("terms").field("term-s").collectMode(randomFrom(SubAggCollectionMode.values())).subAggregation(dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.DAY).minDocCount(0))).get().     assertSearchResponse(response).     Terms terms = response.getAggregations().get("terms").     Histogram histo = terms.getBucketByKey("term").getAggregations().get("histo").     assertThat(histo.getBuckets().size(), equalTo(4)). }
false;public;0;15;;public void testLongTerms() throws Exception {     SearchResponse response = client().prepareSearch("idx").setQuery(QueryBuilders.matchAllQuery()).addAggregation(terms("terms").field("term-l").collectMode(randomFrom(SubAggCollectionMode.values())).subAggregation(dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.DAY).minDocCount(0))).get().     assertSearchResponse(response).     Terms terms = response.getAggregations().get("terms").     Histogram histo = terms.getBucketByKey("1").getAggregations().get("histo").     assertThat(histo.getBuckets().size(), equalTo(4)). }
false;public;0;15;;public void testDoubleTerms() throws Exception {     SearchResponse response = client().prepareSearch("idx").setQuery(QueryBuilders.matchAllQuery()).addAggregation(terms("terms").field("term-d").collectMode(randomFrom(SubAggCollectionMode.values())).subAggregation(dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.DAY).minDocCount(0))).get().     assertSearchResponse(response).     Terms terms = response.getAggregations().get("terms").     Histogram histo = terms.getBucketByKey("1.5").getAggregations().get("histo").     assertThat(histo.getBuckets().size(), equalTo(4)). }
false;public;0;14;;public void testRange() throws Exception {     SearchResponse response = client().prepareSearch("idx").setQuery(QueryBuilders.matchAllQuery()).addAggregation(range("range").field("value").addRange("r1", 0, 10).subAggregation(dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.DAY).minDocCount(0))).get().     assertSearchResponse(response).     Range range = response.getAggregations().get("range").     Histogram histo = range.getBuckets().get(0).getAggregations().get("histo").     assertThat(histo.getBuckets().size(), equalTo(4)). }
false;public;0;14;;public void testDateRange() throws Exception {     SearchResponse response = client().prepareSearch("idx").setQuery(QueryBuilders.matchAllQuery()).addAggregation(dateRange("range").field("date").addRange("r1", "2014-01-01", "2014-01-10").subAggregation(dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.DAY).minDocCount(0))).get().     assertSearchResponse(response).     Range range = response.getAggregations().get("range").     Histogram histo = range.getBuckets().get(0).getAggregations().get("histo").     assertThat(histo.getBuckets().size(), equalTo(4)). }
false;public;0;14;;public void testIpRange() throws Exception {     SearchResponse response = client().prepareSearch("idx").setQuery(QueryBuilders.matchAllQuery()).addAggregation(ipRange("range").field("ip").addRange("r1", "10.0.0.1", "10.0.0.10").subAggregation(dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.DAY).minDocCount(0))).get().     assertSearchResponse(response).     Range range = response.getAggregations().get("range").     Histogram histo = range.getBuckets().get(0).getAggregations().get("histo").     assertThat(histo.getBuckets().size(), equalTo(4)). }
false;public;0;14;;public void testHistogram() throws Exception {     SearchResponse response = client().prepareSearch("idx").setQuery(QueryBuilders.matchAllQuery()).addAggregation(histogram("topHisto").field("value").interval(5).subAggregation(dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.DAY).minDocCount(0))).get().     assertSearchResponse(response).     Histogram topHisto = response.getAggregations().get("topHisto").     Histogram histo = topHisto.getBuckets().get(0).getAggregations().get("histo").     assertThat(histo.getBuckets().size(), equalTo(4)). }
false;public;0;15;;public void testDateHistogram() throws Exception {     SearchResponse response = client().prepareSearch("idx").setQuery(QueryBuilders.matchAllQuery()).addAggregation(dateHistogram("topHisto").field("date").dateHistogramInterval(DateHistogramInterval.MONTH).subAggregation(dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.DAY).minDocCount(0))).get().     assertSearchResponse(response).     Histogram topHisto = response.getAggregations().get("topHisto").     Histogram histo = topHisto.getBuckets().iterator().next().getAggregations().get("histo").     assertThat(histo.getBuckets().size(), equalTo(4)). }
false;public;0;14;;public void testGeoHashGrid() throws Exception {     SearchResponse response = client().prepareSearch("idx").setQuery(QueryBuilders.matchAllQuery()).addAggregation(geohashGrid("grid").field("location").subAggregation(dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.DAY).minDocCount(0))).get().     assertSearchResponse(response).     GeoGrid grid = response.getAggregations().get("grid").     Histogram histo = grid.getBuckets().iterator().next().getAggregations().get("histo").     assertThat(histo.getBuckets().size(), equalTo(4)). }
false;public;0;14;;public void testGeoTileGrid() throws Exception {     SearchResponse response = client().prepareSearch("idx").setQuery(QueryBuilders.matchAllQuery()).addAggregation(geotileGrid("grid").field("location").subAggregation(dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.DAY).minDocCount(0))).get().     assertSearchResponse(response).     GeoGrid grid = response.getAggregations().get("grid").     Histogram histo = grid.getBuckets().iterator().next().getAggregations().get("histo").     assertThat(histo.getBuckets().size(), equalTo(4)). }
