commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Index index() {     return in.index(). }
false;public;0;4;;@Override public String getFieldName() {     return in.getFieldName(). }
false;public;1;4;;@Override public AtomicFieldData load(LeafReaderContext context) {     return in.load(context). }
false;public;1;4;;@Override public AtomicFieldData loadDirect(LeafReaderContext context) throws Exception {     return in.loadDirect(context). }
false;public;4;5;;@Override public SortField sortField(@Nullable Object missingValue, MultiValueMode sortMode, Nested nested, boolean reverse) {     XFieldComparatorSource source = new BytesRefFieldComparatorSource(this, missingValue, sortMode, nested).     return new SortField(getFieldName(), source, reverse). }
false;public;0;4;;@Override public void clear() {     in.clear(). }
false;public,static;1;36;;public static IndexFieldData<AtomicFieldData> hideOrdinals(final IndexFieldData<?> in) {     return new IndexFieldData<AtomicFieldData>() {          @Override         public Index index() {             return in.index().         }          @Override         public String getFieldName() {             return in.getFieldName().         }          @Override         public AtomicFieldData load(LeafReaderContext context) {             return in.load(context).         }          @Override         public AtomicFieldData loadDirect(LeafReaderContext context) throws Exception {             return in.loadDirect(context).         }          @Override         public SortField sortField(@Nullable Object missingValue, MultiValueMode sortMode, Nested nested, boolean reverse) {             XFieldComparatorSource source = new BytesRefFieldComparatorSource(this, missingValue, sortMode, nested).             return new SortField(getFieldName(), source, reverse).         }          @Override         public void clear() {             in.clear().         }     }. }
false;public;1;5;;@SuppressWarnings("unchecked") @Override public IndexFieldData<AtomicFieldData> getForField(String fieldName) {     return hideOrdinals(super.getForField(fieldName)). }
false;public;0;4;;@Override public void testTermsEnum() throws Exception {     assumeTrue("We can't test this, since the returned IFD instance doesn't implement IndexFieldData.WithOrdinals", false). }
