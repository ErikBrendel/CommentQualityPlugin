commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;public void testDuplicateRecoveries() throws IOException {     IndexShard primary = newStartedShard(true).     PeerRecoverySourceService peerRecoverySourceService = new PeerRecoverySourceService(mock(TransportService.class), mock(IndicesService.class), new RecoverySettings(Settings.EMPTY, new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))).     StartRecoveryRequest startRecoveryRequest = new StartRecoveryRequest(primary.shardId(), randomAlphaOfLength(10), getFakeDiscoNode("source"), getFakeDiscoNode("target"), Store.MetadataSnapshot.EMPTY, randomBoolean(), randomLong(), SequenceNumbers.UNASSIGNED_SEQ_NO).     RecoverySourceHandler handler = peerRecoverySourceService.ongoingRecoveries.addNewRecovery(startRecoveryRequest, primary).     DelayRecoveryException delayRecoveryException = expectThrows(DelayRecoveryException.class, () -> peerRecoverySourceService.ongoingRecoveries.addNewRecovery(startRecoveryRequest, primary)).     assertThat(delayRecoveryException.getMessage(), containsString("recovery with same target already registered")).     peerRecoverySourceService.ongoingRecoveries.remove(primary, handler).     // re-adding after removing previous attempt works     handler = peerRecoverySourceService.ongoingRecoveries.addNewRecovery(startRecoveryRequest, primary).     peerRecoverySourceService.ongoingRecoveries.remove(primary, handler).     closeShards(primary). }
