commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     return Collections.singleton(AggregationTestScriptsPlugin.class). }
false;public;0;18;;@Override public void testEmptyAggregation() throws Exception {     SearchResponse searchResponse = client().prepareSearch("empty_bucket_idx").setQuery(matchAllQuery()).addAggregation(histogram("histo").field("value").interval(1L).minDocCount(0).subAggregation(max("max").field("value"))).get().     assertThat(searchResponse.getHits().getTotalHits().value, equalTo(2L)).     Histogram histo = searchResponse.getAggregations().get("histo").     assertThat(histo, notNullValue()).     Histogram.Bucket bucket = histo.getBuckets().get(1).     assertThat(bucket, notNullValue()).     Max max = bucket.getAggregations().get("max").     assertThat(max, notNullValue()).     assertThat(max.getName(), equalTo("max")).     assertThat(max.getValue(), equalTo(Double.NEGATIVE_INFINITY)). }
false;public;0;14;;@Override public void testUnmapped() throws Exception {     SearchResponse searchResponse = client().prepareSearch("idx_unmapped").setQuery(matchAllQuery()).addAggregation(max("max").field("value")).get().     assertThat(searchResponse.getHits().getTotalHits().value, equalTo(0L)).     Max max = searchResponse.getAggregations().get("max").     assertThat(max, notNullValue()).     assertThat(max.getName(), equalTo("max")).     assertThat(max.getValue(), equalTo(Double.NEGATIVE_INFINITY)). }
false;public;0;14;;@Override public void testSingleValuedField() throws Exception {     SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery()).addAggregation(max("max").field("value")).get().     assertHitCount(searchResponse, 10).     Max max = searchResponse.getAggregations().get("max").     assertThat(max, notNullValue()).     assertThat(max.getName(), equalTo("max")).     assertThat(max.getValue(), equalTo(10.0)). }
false;public;0;12;;public void testSingleValuedFieldWithFormatter() throws Exception {     SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery()).addAggregation(max("max").format("0000.0").field("value")).get().     assertHitCount(searchResponse, 10).     Max max = searchResponse.getAggregations().get("max").     assertThat(max, notNullValue()).     assertThat(max.getName(), equalTo("max")).     assertThat(max.getValue(), equalTo(10.0)).     assertThat(max.getValueAsString(), equalTo("0010.0")). }
false;public;0;23;;@Override public void testSingleValuedFieldGetProperty() throws Exception {     SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery()).addAggregation(global("global").subAggregation(max("max").field("value"))).get().     assertHitCount(searchResponse, 10).     Global global = searchResponse.getAggregations().get("global").     assertThat(global, notNullValue()).     assertThat(global.getName(), equalTo("global")).     assertThat(global.getDocCount(), equalTo(10L)).     assertThat(global.getAggregations(), notNullValue()).     assertThat(global.getAggregations().asMap().size(), equalTo(1)).     Max max = global.getAggregations().get("max").     assertThat(max, notNullValue()).     assertThat(max.getName(), equalTo("max")).     double expectedMaxValue = 10.0.     assertThat(max.getValue(), equalTo(expectedMaxValue)).     assertThat((Max) ((InternalAggregation) global).getProperty("max"), equalTo(max)).     assertThat((double) ((InternalAggregation) global).getProperty("max.value"), equalTo(expectedMaxValue)).     assertThat((double) ((InternalAggregation) max).getProperty("value"), equalTo(expectedMaxValue)). }
false;public;0;14;;@Override public void testSingleValuedFieldPartiallyUnmapped() throws Exception {     SearchResponse searchResponse = client().prepareSearch("idx", "idx_unmapped").setQuery(matchAllQuery()).addAggregation(max("max").field("value")).get().     assertHitCount(searchResponse, 10).     Max max = searchResponse.getAggregations().get("max").     assertThat(max, notNullValue()).     assertThat(max.getName(), equalTo("max")).     assertThat(max.getValue(), equalTo(10.0)). }
false;public;0;17;;@Override public void testSingleValuedFieldWithValueScript() throws Exception {     SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery()).addAggregation(max("max").field("value").script(new Script(ScriptType.INLINE, AggregationTestScriptsPlugin.NAME, "_value + 1", emptyMap()))).get().     assertHitCount(searchResponse, 10).     Max max = searchResponse.getAggregations().get("max").     assertThat(max, notNullValue()).     assertThat(max.getName(), equalTo("max")).     assertThat(max.getValue(), equalTo(11.0)). }
false;public;0;19;;@Override public void testSingleValuedFieldWithValueScriptWithParams() throws Exception {     Map<String, Object> params = new HashMap<>().     params.put("inc", 1).     SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery()).addAggregation(max("max").field("value").script(new Script(ScriptType.INLINE, AggregationTestScriptsPlugin.NAME, "_value + inc", params))).get().     assertHitCount(searchResponse, 10).     Max max = searchResponse.getAggregations().get("max").     assertThat(max, notNullValue()).     assertThat(max.getName(), equalTo("max")).     assertThat(max.getValue(), equalTo(11.0)). }
false;public;0;14;;@Override public void testMultiValuedField() throws Exception {     SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery()).addAggregation(max("max").field("values")).get().     assertHitCount(searchResponse, 10).     Max max = searchResponse.getAggregations().get("max").     assertThat(max, notNullValue()).     assertThat(max.getName(), equalTo("max")).     assertThat(max.getValue(), equalTo(12.0)). }
false;public;0;17;;@Override public void testMultiValuedFieldWithValueScript() throws Exception {     SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery()).addAggregation(max("max").field("values").script(new Script(ScriptType.INLINE, AggregationTestScriptsPlugin.NAME, "_value + 1", emptyMap()))).get().     assertHitCount(searchResponse, 10).     Max max = searchResponse.getAggregations().get("max").     assertThat(max, notNullValue()).     assertThat(max.getName(), equalTo("max")).     assertThat(max.getValue(), equalTo(13.0)). }
false;public;0;19;;@Override public void testMultiValuedFieldWithValueScriptWithParams() throws Exception {     Map<String, Object> params = new HashMap<>().     params.put("inc", 1).     SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery()).addAggregation(max("max").field("values").script(new Script(ScriptType.INLINE, AggregationTestScriptsPlugin.NAME, "_value + inc", params))).get().     assertHitCount(searchResponse, 10).     Max max = searchResponse.getAggregations().get("max").     assertThat(max, notNullValue()).     assertThat(max.getName(), equalTo("max")).     assertThat(max.getValue(), equalTo(13.0)). }
false;public;0;16;;@Override public void testScriptSingleValued() throws Exception {     SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery()).addAggregation(max("max").script(new Script(ScriptType.INLINE, AggregationTestScriptsPlugin.NAME, "doc['value'].value", emptyMap()))).get().     assertHitCount(searchResponse, 10).     Max max = searchResponse.getAggregations().get("max").     assertThat(max, notNullValue()).     assertThat(max.getName(), equalTo("max")).     assertThat(max.getValue(), equalTo(10.0)). }
false;public;0;19;;@Override public void testScriptSingleValuedWithParams() throws Exception {     Map<String, Object> params = new HashMap<>().     params.put("inc", 1).     Script script = new Script(ScriptType.INLINE, AggregationTestScriptsPlugin.NAME, "doc['value'].value + inc", params).     SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery()).addAggregation(max("max").script(script)).get().     assertHitCount(searchResponse, 10).     Max max = searchResponse.getAggregations().get("max").     assertThat(max, notNullValue()).     assertThat(max.getName(), equalTo("max")).     assertThat(max.getValue(), equalTo(11.0)). }
false;public;0;17;;@Override public void testScriptMultiValued() throws Exception {     SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery()).addAggregation(max("max").script(new Script(ScriptType.INLINE, AggregationTestScriptsPlugin.NAME, "doc['values']", Collections.emptyMap()))).get().     assertHitCount(searchResponse, 10).     Max max = searchResponse.getAggregations().get("max").     assertThat(max, notNullValue()).     assertThat(max.getName(), equalTo("max")).     assertThat(max.getValue(), equalTo(12.0)). }
false;public;0;19;;@Override public void testScriptMultiValuedWithParams() throws Exception {     Map<String, Object> params = new HashMap<>().     params.put("inc", 1).     Script script = new Script(ScriptType.INLINE, AggregationTestScriptsPlugin.NAME, "[ doc['value'].value, doc['value'].value + inc ]", params).     SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery()).addAggregation(max("max").script(script)).get().     assertHitCount(searchResponse, 10).     Max max = searchResponse.getAggregations().get("max").     assertThat(max, notNullValue()).     assertThat(max.getName(), equalTo("max")).     assertThat(max.getValue(), equalTo(11.0)). }
false;public;0;29;;@Override public void testOrderByEmptyAggregation() throws Exception {     SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery()).addAggregation(terms("terms").field("value").order(BucketOrder.compound(BucketOrder.aggregation("filter>max", true))).subAggregation(filter("filter", termQuery("value", 100)).subAggregation(max("max").field("value")))).get().     assertHitCount(searchResponse, 10).     Terms terms = searchResponse.getAggregations().get("terms").     assertThat(terms, notNullValue()).     List<? extends Terms.Bucket> buckets = terms.getBuckets().     assertThat(buckets, notNullValue()).     assertThat(buckets.size(), equalTo(10)).     for (int i = 0. i < 10. i++) {         Terms.Bucket bucket = buckets.get(i).         assertThat(bucket, notNullValue()).         assertThat(bucket.getKeyAsNumber(), equalTo((long) i + 1)).         assertThat(bucket.getDocCount(), equalTo(1L)).         Filter filter = bucket.getAggregations().get("filter").         assertThat(filter, notNullValue()).         assertThat(filter.getDocCount(), equalTo(0L)).         Max max = filter.getAggregations().get("max").         assertThat(max, notNullValue()).         assertThat(max.value(), equalTo(Double.NEGATIVE_INFINITY)).     } }
true;public;0;34;/**  * Make sure that a request using a script does not get cached and a request  * not using a script does get cached.  */ ;/**  * Make sure that a request using a script does not get cached and a request  * not using a script does get cached.  */ public void testDontCacheScripts() throws Exception {     assertAcked(prepareCreate("cache_test_idx").addMapping("type", "d", "type=long").setSettings(Settings.builder().put("requests.cache.enable", true).put("number_of_shards", 1).put("number_of_replicas", 1)).get()).     indexRandom(true, client().prepareIndex("cache_test_idx", "type", "1").setSource("s", 1), client().prepareIndex("cache_test_idx", "type", "2").setSource("s", 2)).     // Make sure we are starting with a clear cache     assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache().getHitCount(), equalTo(0L)).     assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache().getMissCount(), equalTo(0L)).     // Test that a request using a script does not get cached     SearchResponse r = client().prepareSearch("cache_test_idx").setSize(0).addAggregation(max("foo").field("d").script(new Script(ScriptType.INLINE, AggregationTestScriptsPlugin.NAME, "_value + 1", emptyMap()))).get().     assertSearchResponse(r).     assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache().getHitCount(), equalTo(0L)).     assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache().getMissCount(), equalTo(0L)).     // To make sure that the cache is working test that a request not using     // a script is cached     r = client().prepareSearch("cache_test_idx").setSize(0).addAggregation(max("foo").field("d")).get().     assertSearchResponse(r).     assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache().getHitCount(), equalTo(0L)).     assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache().getMissCount(), equalTo(1L)). }
false;public;0;17;;public void testEarlyTermination() throws Exception {     SearchResponse searchResponse = client().prepareSearch("idx").setTrackTotalHits(false).setQuery(matchAllQuery()).addAggregation(max("max").field("values")).addAggregation(count("count").field("values")).get().     Max max = searchResponse.getAggregations().get("max").     assertThat(max, notNullValue()).     assertThat(max.getName(), equalTo("max")).     assertThat(max.getValue(), equalTo(12.0)).     ValueCount count = searchResponse.getAggregations().get("count").     assertThat(count.getName(), equalTo("count")).     assertThat(count.getValue(), equalTo(20L)). }
