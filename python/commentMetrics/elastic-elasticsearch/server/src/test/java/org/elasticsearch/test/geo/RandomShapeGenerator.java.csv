# id;timestamp;commentText;codeText;commentWords;codeWords
RandomShapeGenerator -> public static Rectangle xRandomRectangle(Random r, Point nearP);1524684173;creates a small random rectangle by default to keep shape test performance at bay;public static Rectangle xRandomRectangle(Random r, Point nearP) {_        return xRandomRectangle(r, nearP, ctx.getWorldBounds(), true)__    };creates,a,small,random,rectangle,by,default,to,keep,shape,test,performance,at,bay;public,static,rectangle,x,random,rectangle,random,r,point,near,p,return,x,random,rectangle,r,near,p,ctx,get,world,bounds,true
RandomShapeGenerator -> public static Rectangle xRandomRectangle(Random r, Point nearP);1542742188;creates a small random rectangle by default to keep shape test performance at bay;public static Rectangle xRandomRectangle(Random r, Point nearP) {_        return xRandomRectangle(r, nearP, ctx.getWorldBounds(), true)__    };creates,a,small,random,rectangle,by,default,to,keep,shape,test,performance,at,bay;public,static,rectangle,x,random,rectangle,random,r,point,near,p,return,x,random,rectangle,r,near,p,ctx,get,world,bounds,true
RandomShapeGenerator -> public static Rectangle xRandomRectangle(Random r, Point nearP);1542820501;creates a small random rectangle by default to keep shape test performance at bay;public static Rectangle xRandomRectangle(Random r, Point nearP) {_        return xRandomRectangle(r, nearP, ctx.getWorldBounds(), true)__    };creates,a,small,random,rectangle,by,default,to,keep,shape,test,performance,at,bay;public,static,rectangle,x,random,rectangle,random,r,point,near,p,return,x,random,rectangle,r,near,p,ctx,get,world,bounds,true
RandomShapeGenerator -> public static Rectangle xRandomRectangle(Random r, Point nearP);1545079094;creates a small random rectangle by default to keep shape test performance at bay;public static Rectangle xRandomRectangle(Random r, Point nearP) {_        return xRandomRectangle(r, nearP, ctx.getWorldBounds(), true)__    };creates,a,small,random,rectangle,by,default,to,keep,shape,test,performance,at,bay;public,static,rectangle,x,random,rectangle,random,r,point,near,p,return,x,random,rectangle,r,near,p,ctx,get,world,bounds,true
RandomShapeGenerator -> public static Rectangle xRandomRectangle(Random r, Point nearP);1545098986;creates a small random rectangle by default to keep shape test performance at bay;public static Rectangle xRandomRectangle(Random r, Point nearP) {_        return xRandomRectangle(r, nearP, ctx.getWorldBounds(), true)__    };creates,a,small,random,rectangle,by,default,to,keep,shape,test,performance,at,bay;public,static,rectangle,x,random,rectangle,random,r,point,near,p,return,x,random,rectangle,r,near,p,ctx,get,world,bounds,true
RandomShapeGenerator -> public static Rectangle xRandomRectangle(Random r, Point nearP);1545148496;creates a small random rectangle by default to keep shape test performance at bay;public static Rectangle xRandomRectangle(Random r, Point nearP) {_        return xRandomRectangle(r, nearP, ctx.getWorldBounds(), true)__    };creates,a,small,random,rectangle,by,default,to,keep,shape,test,performance,at,bay;public,static,rectangle,x,random,rectangle,random,r,point,near,p,return,x,random,rectangle,r,near,p,ctx,get,world,bounds,true
RandomShapeGenerator -> private static ShapeBuilder createShape(Random r, Point nearPoint, Rectangle within, ShapeType st, boolean validate) throws             InvalidShapeException;1524684173;Creates a random shape useful for randomized testing, NOTE: exercise caution when using this to build random GeometryCollections_as creating a large random number of random shapes can result in massive resource consumption_see: {@link GeoShapeQueryTests#testShapeFilterWithRandomGeoCollection}__The following options are included_@param nearPoint Create a shape near a provided point_@param within Create a shape within the provided rectangle (note: if not null this will override the provided point)_@param st Create a random shape of the provided type_@return the ShapeBuilder for a random shape;private static ShapeBuilder createShape(Random r, Point nearPoint, Rectangle within, ShapeType st, boolean validate) throws_            InvalidShapeException {__        if (st == null) {_            st = ShapeType.randomType(r)__        }__        if (within == null) {_            within = xRandomRectangle(r, nearPoint)__        }__        _        _        _        switch (st) {_            case POINT:_                Point p = xRandomPointIn(r, within)__                PointBuilder pb = new PointBuilder().coordinate(new Coordinate(p.getX(), p.getY(), Double.NaN))__                return pb__            case MULTIPOINT:_            case LINESTRING:_                _                _                _                int numPoints = RandomNumbers.randomIntBetween(r, 3, 10)__                CoordinatesBuilder coordinatesBuilder = new CoordinatesBuilder()__                for (int i=0_ i<numPoints_ ++i) {_                    p = xRandomPointIn(r, within)__                    coordinatesBuilder.coordinate(p.getX(), p.getY())__                }_                ShapeBuilder pcb = (st == ShapeType.MULTIPOINT) ? new MultiPointBuilder(coordinatesBuilder.build()) : new LineStringBuilder(coordinatesBuilder)__                return pcb__            case MULTILINESTRING:_                MultiLineStringBuilder mlsb = new MultiLineStringBuilder()__                for (int i=0_ i<RandomNumbers.randomIntBetween(r, 1, 10)_ ++i) {_                    mlsb.linestring((LineStringBuilder) createShape(r, nearPoint, within, ShapeType.LINESTRING, false))__                }_                return mlsb__            case POLYGON:_                numPoints = RandomNumbers.randomIntBetween(r, 5, 25)__                Coordinate[] coordinates = new Coordinate[numPoints]__                for (int i=0_ i<numPoints_ ++i) {_                    p = (Point) createShape(r, nearPoint, within, ShapeType.POINT, false).build()__                    coordinates[i] = new Coordinate(p.getX(), p.getY())__                }_                _                _                Geometry shell = new ConvexHull(coordinates, ctx.getGeometryFactory()).getConvexHull()__                Coordinate[] shellCoords = shell.getCoordinates()__                _                _                if (shellCoords.length < 3) {_                    shellCoords = new Coordinate[4]__                    shellCoords[0] = new Coordinate(within.getMinX(), within.getMinY())__                    shellCoords[1] = new Coordinate(within.getMinX(), within.getMaxY())__                    shellCoords[2] = new Coordinate(within.getMaxX(), within.getMaxY())__                    shellCoords[3] = new Coordinate(within.getMaxX(), within.getMinY())__                }_                PolygonBuilder pgb = new PolygonBuilder(new CoordinatesBuilder().coordinates(shellCoords).close())__                if (validate) {_                    _                    _                    _                    _                    try {_                        pgb.build()__                    } catch (AssertionError | InvalidShapeException e) {_                        _                        _                        return null__                    }_                }_                return pgb__            default:_                throw new ElasticsearchException("Unable to create shape of type [" + st + "]")__        }_    };creates,a,random,shape,useful,for,randomized,testing,note,exercise,caution,when,using,this,to,build,random,geometry,collections,as,creating,a,large,random,number,of,random,shapes,can,result,in,massive,resource,consumption,see,link,geo,shape,query,tests,test,shape,filter,with,random,geo,collection,the,following,options,are,included,param,near,point,create,a,shape,near,a,provided,point,param,within,create,a,shape,within,the,provided,rectangle,note,if,not,null,this,will,override,the,provided,point,param,st,create,a,random,shape,of,the,provided,type,return,the,shape,builder,for,a,random,shape;private,static,shape,builder,create,shape,random,r,point,near,point,rectangle,within,shape,type,st,boolean,validate,throws,invalid,shape,exception,if,st,null,st,shape,type,random,type,r,if,within,null,within,x,random,rectangle,r,near,point,switch,st,case,point,point,p,x,random,point,in,r,within,point,builder,pb,new,point,builder,coordinate,new,coordinate,p,get,x,p,get,y,double,na,n,return,pb,case,multipoint,case,linestring,int,num,points,random,numbers,random,int,between,r,3,10,coordinates,builder,coordinates,builder,new,coordinates,builder,for,int,i,0,i,num,points,i,p,x,random,point,in,r,within,coordinates,builder,coordinate,p,get,x,p,get,y,shape,builder,pcb,st,shape,type,multipoint,new,multi,point,builder,coordinates,builder,build,new,line,string,builder,coordinates,builder,return,pcb,case,multilinestring,multi,line,string,builder,mlsb,new,multi,line,string,builder,for,int,i,0,i,random,numbers,random,int,between,r,1,10,i,mlsb,linestring,line,string,builder,create,shape,r,near,point,within,shape,type,linestring,false,return,mlsb,case,polygon,num,points,random,numbers,random,int,between,r,5,25,coordinate,coordinates,new,coordinate,num,points,for,int,i,0,i,num,points,i,p,point,create,shape,r,near,point,within,shape,type,point,false,build,coordinates,i,new,coordinate,p,get,x,p,get,y,geometry,shell,new,convex,hull,coordinates,ctx,get,geometry,factory,get,convex,hull,coordinate,shell,coords,shell,get,coordinates,if,shell,coords,length,3,shell,coords,new,coordinate,4,shell,coords,0,new,coordinate,within,get,min,x,within,get,min,y,shell,coords,1,new,coordinate,within,get,min,x,within,get,max,y,shell,coords,2,new,coordinate,within,get,max,x,within,get,max,y,shell,coords,3,new,coordinate,within,get,max,x,within,get,min,y,polygon,builder,pgb,new,polygon,builder,new,coordinates,builder,coordinates,shell,coords,close,if,validate,try,pgb,build,catch,assertion,error,invalid,shape,exception,e,return,null,return,pgb,default,throw,new,elasticsearch,exception,unable,to,create,shape,of,type,st
RandomShapeGenerator -> private static ShapeBuilder createShape(Random r, Point nearPoint, Rectangle within, ShapeType st, boolean validate) throws             InvalidShapeException;1542742188;Creates a random shape useful for randomized testing, NOTE: exercise caution when using this to build random GeometryCollections_as creating a large random number of random shapes can result in massive resource consumption_see: {@link GeoShapeQueryTests#testShapeFilterWithRandomGeoCollection}__The following options are included_@param nearPoint Create a shape near a provided point_@param within Create a shape within the provided rectangle (note: if not null this will override the provided point)_@param st Create a random shape of the provided type_@return the ShapeBuilder for a random shape;private static ShapeBuilder createShape(Random r, Point nearPoint, Rectangle within, ShapeType st, boolean validate) throws_            InvalidShapeException {__        if (st == null) {_            st = ShapeType.randomType(r)__        }__        if (within == null) {_            within = xRandomRectangle(r, nearPoint)__        }__        _        _        _        switch (st) {_            case POINT:_                Point p = xRandomPointIn(r, within)__                PointBuilder pb = new PointBuilder().coordinate(new Coordinate(p.getX(), p.getY(), Double.NaN))__                return pb__            case MULTIPOINT:_            case LINESTRING:_                _                _                _                int numPoints = RandomNumbers.randomIntBetween(r, 3, 10)__                CoordinatesBuilder coordinatesBuilder = new CoordinatesBuilder()__                for (int i=0_ i<numPoints_ ++i) {_                    p = xRandomPointIn(r, within)__                    coordinatesBuilder.coordinate(p.getX(), p.getY())__                }_                ShapeBuilder pcb = (st == ShapeType.MULTIPOINT)_                    ? new MultiPointBuilder(coordinatesBuilder.build())_                    : new LineStringBuilder(coordinatesBuilder)__                return pcb__            case MULTILINESTRING:_                MultiLineStringBuilder mlsb = new MultiLineStringBuilder()__                for (int i=0_ i<RandomNumbers.randomIntBetween(r, 1, 10)_ ++i) {_                    mlsb.linestring((LineStringBuilder) createShape(r, nearPoint, within, ShapeType.LINESTRING, false))__                }_                return mlsb__            case POLYGON:_                numPoints = RandomNumbers.randomIntBetween(r, 5, 25)__                Coordinate[] coordinates = new Coordinate[numPoints]__                for (int i=0_ i<numPoints_ ++i) {_                    p = (Point) createShape(r, nearPoint, within, ShapeType.POINT, false).build()__                    coordinates[i] = new Coordinate(p.getX(), p.getY())__                }_                _                _                Geometry shell = new ConvexHull(coordinates, ctx.getGeometryFactory()).getConvexHull()__                Coordinate[] shellCoords = shell.getCoordinates()__                _                _                if (shellCoords.length < 3) {_                    shellCoords = new Coordinate[4]__                    shellCoords[0] = new Coordinate(within.getMinX(), within.getMinY())__                    shellCoords[1] = new Coordinate(within.getMinX(), within.getMaxY())__                    shellCoords[2] = new Coordinate(within.getMaxX(), within.getMaxY())__                    shellCoords[3] = new Coordinate(within.getMaxX(), within.getMinY())__                }_                PolygonBuilder pgb = new PolygonBuilder(new CoordinatesBuilder().coordinates(shellCoords).close())__                if (validate) {_                    _                    _                    _                    _                    try {_                        pgb.build()__                    } catch (AssertionError | InvalidShapeException e) {_                        _                        _                        return null__                    }_                }_                return pgb__            default:_                throw new ElasticsearchException("Unable to create shape of type [" + st + "]")__        }_    };creates,a,random,shape,useful,for,randomized,testing,note,exercise,caution,when,using,this,to,build,random,geometry,collections,as,creating,a,large,random,number,of,random,shapes,can,result,in,massive,resource,consumption,see,link,geo,shape,query,tests,test,shape,filter,with,random,geo,collection,the,following,options,are,included,param,near,point,create,a,shape,near,a,provided,point,param,within,create,a,shape,within,the,provided,rectangle,note,if,not,null,this,will,override,the,provided,point,param,st,create,a,random,shape,of,the,provided,type,return,the,shape,builder,for,a,random,shape;private,static,shape,builder,create,shape,random,r,point,near,point,rectangle,within,shape,type,st,boolean,validate,throws,invalid,shape,exception,if,st,null,st,shape,type,random,type,r,if,within,null,within,x,random,rectangle,r,near,point,switch,st,case,point,point,p,x,random,point,in,r,within,point,builder,pb,new,point,builder,coordinate,new,coordinate,p,get,x,p,get,y,double,na,n,return,pb,case,multipoint,case,linestring,int,num,points,random,numbers,random,int,between,r,3,10,coordinates,builder,coordinates,builder,new,coordinates,builder,for,int,i,0,i,num,points,i,p,x,random,point,in,r,within,coordinates,builder,coordinate,p,get,x,p,get,y,shape,builder,pcb,st,shape,type,multipoint,new,multi,point,builder,coordinates,builder,build,new,line,string,builder,coordinates,builder,return,pcb,case,multilinestring,multi,line,string,builder,mlsb,new,multi,line,string,builder,for,int,i,0,i,random,numbers,random,int,between,r,1,10,i,mlsb,linestring,line,string,builder,create,shape,r,near,point,within,shape,type,linestring,false,return,mlsb,case,polygon,num,points,random,numbers,random,int,between,r,5,25,coordinate,coordinates,new,coordinate,num,points,for,int,i,0,i,num,points,i,p,point,create,shape,r,near,point,within,shape,type,point,false,build,coordinates,i,new,coordinate,p,get,x,p,get,y,geometry,shell,new,convex,hull,coordinates,ctx,get,geometry,factory,get,convex,hull,coordinate,shell,coords,shell,get,coordinates,if,shell,coords,length,3,shell,coords,new,coordinate,4,shell,coords,0,new,coordinate,within,get,min,x,within,get,min,y,shell,coords,1,new,coordinate,within,get,min,x,within,get,max,y,shell,coords,2,new,coordinate,within,get,max,x,within,get,max,y,shell,coords,3,new,coordinate,within,get,max,x,within,get,min,y,polygon,builder,pgb,new,polygon,builder,new,coordinates,builder,coordinates,shell,coords,close,if,validate,try,pgb,build,catch,assertion,error,invalid,shape,exception,e,return,null,return,pgb,default,throw,new,elasticsearch,exception,unable,to,create,shape,of,type,st
RandomShapeGenerator -> private static ShapeBuilder createShape(Random r, Point nearPoint, Rectangle within, ShapeType st, boolean validate) throws             InvalidShapeException;1542820501;Creates a random shape useful for randomized testing, NOTE: exercise caution when using this to build random GeometryCollections_as creating a large random number of random shapes can result in massive resource consumption__The following options are included_@param nearPoint Create a shape near a provided point_@param within Create a shape within the provided rectangle (note: if not null this will override the provided point)_@param st Create a random shape of the provided type_@return the ShapeBuilder for a random shape;private static ShapeBuilder createShape(Random r, Point nearPoint, Rectangle within, ShapeType st, boolean validate) throws_            InvalidShapeException {__        if (st == null) {_            st = ShapeType.randomType(r)__        }__        if (within == null) {_            within = xRandomRectangle(r, nearPoint)__        }__        _        _        _        switch (st) {_            case POINT:_                Point p = xRandomPointIn(r, within)__                PointBuilder pb = new PointBuilder().coordinate(new Coordinate(p.getX(), p.getY(), Double.NaN))__                return pb__            case MULTIPOINT:_            case LINESTRING:_                _                _                _                int numPoints = RandomNumbers.randomIntBetween(r, 3, 10)__                CoordinatesBuilder coordinatesBuilder = new CoordinatesBuilder()__                for (int i=0_ i<numPoints_ ++i) {_                    p = xRandomPointIn(r, within)__                    coordinatesBuilder.coordinate(p.getX(), p.getY())__                }_                ShapeBuilder pcb = (st == ShapeType.MULTIPOINT)_                    ? new MultiPointBuilder(coordinatesBuilder.build())_                    : new LineStringBuilder(coordinatesBuilder)__                return pcb__            case MULTILINESTRING:_                MultiLineStringBuilder mlsb = new MultiLineStringBuilder()__                for (int i=0_ i<RandomNumbers.randomIntBetween(r, 1, 10)_ ++i) {_                    mlsb.linestring((LineStringBuilder) createShape(r, nearPoint, within, ShapeType.LINESTRING, false))__                }_                return mlsb__            case POLYGON:_                numPoints = RandomNumbers.randomIntBetween(r, 5, 25)__                Coordinate[] coordinates = new Coordinate[numPoints]__                for (int i=0_ i<numPoints_ ++i) {_                    p = (Point) createShape(r, nearPoint, within, ShapeType.POINT, false).buildS4J()__                    coordinates[i] = new Coordinate(p.getX(), p.getY())__                }_                _                _                Geometry shell = new ConvexHull(coordinates, ctx.getGeometryFactory()).getConvexHull()__                Coordinate[] shellCoords = shell.getCoordinates()__                _                _                if (shellCoords.length < 3) {_                    shellCoords = new Coordinate[4]__                    shellCoords[0] = new Coordinate(within.getMinX(), within.getMinY())__                    shellCoords[1] = new Coordinate(within.getMinX(), within.getMaxY())__                    shellCoords[2] = new Coordinate(within.getMaxX(), within.getMaxY())__                    shellCoords[3] = new Coordinate(within.getMaxX(), within.getMinY())__                }_                PolygonBuilder pgb = new PolygonBuilder(new CoordinatesBuilder().coordinates(shellCoords).close())__                if (validate) {_                    _                    _                    _                    _                    try {_                        pgb.buildS4J()__                    } catch (AssertionError | InvalidShapeException e) {_                        _                        _                        return null__                    }_                }_                return pgb__            default:_                throw new ElasticsearchException("Unable to create shape of type [" + st + "]")__        }_    };creates,a,random,shape,useful,for,randomized,testing,note,exercise,caution,when,using,this,to,build,random,geometry,collections,as,creating,a,large,random,number,of,random,shapes,can,result,in,massive,resource,consumption,the,following,options,are,included,param,near,point,create,a,shape,near,a,provided,point,param,within,create,a,shape,within,the,provided,rectangle,note,if,not,null,this,will,override,the,provided,point,param,st,create,a,random,shape,of,the,provided,type,return,the,shape,builder,for,a,random,shape;private,static,shape,builder,create,shape,random,r,point,near,point,rectangle,within,shape,type,st,boolean,validate,throws,invalid,shape,exception,if,st,null,st,shape,type,random,type,r,if,within,null,within,x,random,rectangle,r,near,point,switch,st,case,point,point,p,x,random,point,in,r,within,point,builder,pb,new,point,builder,coordinate,new,coordinate,p,get,x,p,get,y,double,na,n,return,pb,case,multipoint,case,linestring,int,num,points,random,numbers,random,int,between,r,3,10,coordinates,builder,coordinates,builder,new,coordinates,builder,for,int,i,0,i,num,points,i,p,x,random,point,in,r,within,coordinates,builder,coordinate,p,get,x,p,get,y,shape,builder,pcb,st,shape,type,multipoint,new,multi,point,builder,coordinates,builder,build,new,line,string,builder,coordinates,builder,return,pcb,case,multilinestring,multi,line,string,builder,mlsb,new,multi,line,string,builder,for,int,i,0,i,random,numbers,random,int,between,r,1,10,i,mlsb,linestring,line,string,builder,create,shape,r,near,point,within,shape,type,linestring,false,return,mlsb,case,polygon,num,points,random,numbers,random,int,between,r,5,25,coordinate,coordinates,new,coordinate,num,points,for,int,i,0,i,num,points,i,p,point,create,shape,r,near,point,within,shape,type,point,false,build,s4j,coordinates,i,new,coordinate,p,get,x,p,get,y,geometry,shell,new,convex,hull,coordinates,ctx,get,geometry,factory,get,convex,hull,coordinate,shell,coords,shell,get,coordinates,if,shell,coords,length,3,shell,coords,new,coordinate,4,shell,coords,0,new,coordinate,within,get,min,x,within,get,min,y,shell,coords,1,new,coordinate,within,get,min,x,within,get,max,y,shell,coords,2,new,coordinate,within,get,max,x,within,get,max,y,shell,coords,3,new,coordinate,within,get,max,x,within,get,min,y,polygon,builder,pgb,new,polygon,builder,new,coordinates,builder,coordinates,shell,coords,close,if,validate,try,pgb,build,s4j,catch,assertion,error,invalid,shape,exception,e,return,null,return,pgb,default,throw,new,elasticsearch,exception,unable,to,create,shape,of,type,st
RandomShapeGenerator -> private static ShapeBuilder createShape(Random r, Point nearPoint, Rectangle within, ShapeType st, boolean validate) throws             InvalidShapeException;1545079094;Creates a random shape useful for randomized testing, NOTE: exercise caution when using this to build random GeometryCollections_as creating a large random number of random shapes can result in massive resource consumption_see: {@link GeoShapeQueryTests#testQueryRandomGeoCollection()}__The following options are included_@param nearPoint Create a shape near a provided point_@param within Create a shape within the provided rectangle (note: if not null this will override the provided point)_@param st Create a random shape of the provided type_@return the ShapeBuilder for a random shape;private static ShapeBuilder createShape(Random r, Point nearPoint, Rectangle within, ShapeType st, boolean validate) throws_            InvalidShapeException {__        if (st == null) {_            st = ShapeType.randomType(r)__        }__        if (within == null) {_            within = xRandomRectangle(r, nearPoint)__        }__        _        _        _        switch (st) {_            case POINT:_                Point p = xRandomPointIn(r, within)__                PointBuilder pb = new PointBuilder().coordinate(new Coordinate(p.getX(), p.getY(), Double.NaN))__                return pb__            case MULTIPOINT:_            case LINESTRING:_                _                _                _                int numPoints = RandomNumbers.randomIntBetween(r, 3, 10)__                CoordinatesBuilder coordinatesBuilder = new CoordinatesBuilder()__                for (int i=0_ i<numPoints_ ++i) {_                    p = xRandomPointIn(r, within)__                    coordinatesBuilder.coordinate(p.getX(), p.getY())__                }_                ShapeBuilder pcb = (st == ShapeType.MULTIPOINT)_                    ? new MultiPointBuilder(coordinatesBuilder.build())_                    : new LineStringBuilder(coordinatesBuilder)__                return pcb__            case MULTILINESTRING:_                MultiLineStringBuilder mlsb = new MultiLineStringBuilder()__                for (int i=0_ i<RandomNumbers.randomIntBetween(r, 1, 10)_ ++i) {_                    mlsb.linestring((LineStringBuilder) createShape(r, nearPoint, within, ShapeType.LINESTRING, false))__                }_                return mlsb__            case POLYGON:_                numPoints = RandomNumbers.randomIntBetween(r, 5, 25)__                Coordinate[] coordinates = new Coordinate[numPoints]__                for (int i=0_ i<numPoints_ ++i) {_                    p = (Point) createShape(r, nearPoint, within, ShapeType.POINT, false).buildS4J()__                    coordinates[i] = new Coordinate(p.getX(), p.getY())__                }_                _                _                Geometry shell = new ConvexHull(coordinates, ctx.getGeometryFactory()).getConvexHull()__                Coordinate[] shellCoords = shell.getCoordinates()__                _                _                if (shellCoords.length < 3) {_                    shellCoords = new Coordinate[4]__                    shellCoords[0] = new Coordinate(within.getMinX(), within.getMinY())__                    shellCoords[1] = new Coordinate(within.getMinX(), within.getMaxY())__                    shellCoords[2] = new Coordinate(within.getMaxX(), within.getMaxY())__                    shellCoords[3] = new Coordinate(within.getMaxX(), within.getMinY())__                }_                PolygonBuilder pgb = new PolygonBuilder(new CoordinatesBuilder().coordinates(shellCoords).close())__                if (validate) {_                    _                    _                    _                    _                    try {_                        pgb.buildS4J()__                    } catch (AssertionError | InvalidShapeException e) {_                        _                        _                        return null__                    }_                }_                return pgb__            default:_                throw new ElasticsearchException("Unable to create shape of type [" + st + "]")__        }_    };creates,a,random,shape,useful,for,randomized,testing,note,exercise,caution,when,using,this,to,build,random,geometry,collections,as,creating,a,large,random,number,of,random,shapes,can,result,in,massive,resource,consumption,see,link,geo,shape,query,tests,test,query,random,geo,collection,the,following,options,are,included,param,near,point,create,a,shape,near,a,provided,point,param,within,create,a,shape,within,the,provided,rectangle,note,if,not,null,this,will,override,the,provided,point,param,st,create,a,random,shape,of,the,provided,type,return,the,shape,builder,for,a,random,shape;private,static,shape,builder,create,shape,random,r,point,near,point,rectangle,within,shape,type,st,boolean,validate,throws,invalid,shape,exception,if,st,null,st,shape,type,random,type,r,if,within,null,within,x,random,rectangle,r,near,point,switch,st,case,point,point,p,x,random,point,in,r,within,point,builder,pb,new,point,builder,coordinate,new,coordinate,p,get,x,p,get,y,double,na,n,return,pb,case,multipoint,case,linestring,int,num,points,random,numbers,random,int,between,r,3,10,coordinates,builder,coordinates,builder,new,coordinates,builder,for,int,i,0,i,num,points,i,p,x,random,point,in,r,within,coordinates,builder,coordinate,p,get,x,p,get,y,shape,builder,pcb,st,shape,type,multipoint,new,multi,point,builder,coordinates,builder,build,new,line,string,builder,coordinates,builder,return,pcb,case,multilinestring,multi,line,string,builder,mlsb,new,multi,line,string,builder,for,int,i,0,i,random,numbers,random,int,between,r,1,10,i,mlsb,linestring,line,string,builder,create,shape,r,near,point,within,shape,type,linestring,false,return,mlsb,case,polygon,num,points,random,numbers,random,int,between,r,5,25,coordinate,coordinates,new,coordinate,num,points,for,int,i,0,i,num,points,i,p,point,create,shape,r,near,point,within,shape,type,point,false,build,s4j,coordinates,i,new,coordinate,p,get,x,p,get,y,geometry,shell,new,convex,hull,coordinates,ctx,get,geometry,factory,get,convex,hull,coordinate,shell,coords,shell,get,coordinates,if,shell,coords,length,3,shell,coords,new,coordinate,4,shell,coords,0,new,coordinate,within,get,min,x,within,get,min,y,shell,coords,1,new,coordinate,within,get,min,x,within,get,max,y,shell,coords,2,new,coordinate,within,get,max,x,within,get,max,y,shell,coords,3,new,coordinate,within,get,max,x,within,get,min,y,polygon,builder,pgb,new,polygon,builder,new,coordinates,builder,coordinates,shell,coords,close,if,validate,try,pgb,build,s4j,catch,assertion,error,invalid,shape,exception,e,return,null,return,pgb,default,throw,new,elasticsearch,exception,unable,to,create,shape,of,type,st
RandomShapeGenerator -> private static ShapeBuilder createShape(Random r, Point nearPoint, Rectangle within, ShapeType st, boolean validate) throws             InvalidShapeException;1545098986;Creates a random shape useful for randomized testing, NOTE: exercise caution when using this to build random GeometryCollections_as creating a large random number of random shapes can result in massive resource consumption__The following options are included_@param nearPoint Create a shape near a provided point_@param within Create a shape within the provided rectangle (note: if not null this will override the provided point)_@param st Create a random shape of the provided type_@return the ShapeBuilder for a random shape;private static ShapeBuilder createShape(Random r, Point nearPoint, Rectangle within, ShapeType st, boolean validate) throws_            InvalidShapeException {__        if (st == null) {_            st = ShapeType.randomType(r)__        }__        if (within == null) {_            within = xRandomRectangle(r, nearPoint)__        }__        _        _        _        switch (st) {_            case POINT:_                Point p = xRandomPointIn(r, within)__                PointBuilder pb = new PointBuilder().coordinate(new Coordinate(p.getX(), p.getY(), Double.NaN))__                return pb__            case MULTIPOINT:_            case LINESTRING:_                _                _                _                int numPoints = RandomNumbers.randomIntBetween(r, 3, 10)__                CoordinatesBuilder coordinatesBuilder = new CoordinatesBuilder()__                for (int i=0_ i<numPoints_ ++i) {_                    p = xRandomPointIn(r, within)__                    coordinatesBuilder.coordinate(p.getX(), p.getY())__                }_                ShapeBuilder pcb = (st == ShapeType.MULTIPOINT)_                    ? new MultiPointBuilder(coordinatesBuilder.build())_                    : new LineStringBuilder(coordinatesBuilder)__                return pcb__            case MULTILINESTRING:_                MultiLineStringBuilder mlsb = new MultiLineStringBuilder()__                for (int i=0_ i<RandomNumbers.randomIntBetween(r, 1, 10)_ ++i) {_                    mlsb.linestring((LineStringBuilder) createShape(r, nearPoint, within, ShapeType.LINESTRING, false))__                }_                return mlsb__            case POLYGON:_                numPoints = RandomNumbers.randomIntBetween(r, 5, 25)__                Coordinate[] coordinates = new Coordinate[numPoints]__                for (int i=0_ i<numPoints_ ++i) {_                    p = (Point) createShape(r, nearPoint, within, ShapeType.POINT, false).buildS4J()__                    coordinates[i] = new Coordinate(p.getX(), p.getY())__                }_                _                _                Geometry shell = new ConvexHull(coordinates, ctx.getGeometryFactory()).getConvexHull()__                Coordinate[] shellCoords = shell.getCoordinates()__                _                _                if (shellCoords.length < 3) {_                    shellCoords = new Coordinate[4]__                    shellCoords[0] = new Coordinate(within.getMinX(), within.getMinY())__                    shellCoords[1] = new Coordinate(within.getMinX(), within.getMaxY())__                    shellCoords[2] = new Coordinate(within.getMaxX(), within.getMaxY())__                    shellCoords[3] = new Coordinate(within.getMaxX(), within.getMinY())__                }_                PolygonBuilder pgb = new PolygonBuilder(new CoordinatesBuilder().coordinates(shellCoords).close())__                if (validate) {_                    _                    _                    _                    _                    try {_                        pgb.buildS4J()__                    } catch (AssertionError | InvalidShapeException e) {_                        _                        _                        return null__                    }_                }_                return pgb__            default:_                throw new ElasticsearchException("Unable to create shape of type [" + st + "]")__        }_    };creates,a,random,shape,useful,for,randomized,testing,note,exercise,caution,when,using,this,to,build,random,geometry,collections,as,creating,a,large,random,number,of,random,shapes,can,result,in,massive,resource,consumption,the,following,options,are,included,param,near,point,create,a,shape,near,a,provided,point,param,within,create,a,shape,within,the,provided,rectangle,note,if,not,null,this,will,override,the,provided,point,param,st,create,a,random,shape,of,the,provided,type,return,the,shape,builder,for,a,random,shape;private,static,shape,builder,create,shape,random,r,point,near,point,rectangle,within,shape,type,st,boolean,validate,throws,invalid,shape,exception,if,st,null,st,shape,type,random,type,r,if,within,null,within,x,random,rectangle,r,near,point,switch,st,case,point,point,p,x,random,point,in,r,within,point,builder,pb,new,point,builder,coordinate,new,coordinate,p,get,x,p,get,y,double,na,n,return,pb,case,multipoint,case,linestring,int,num,points,random,numbers,random,int,between,r,3,10,coordinates,builder,coordinates,builder,new,coordinates,builder,for,int,i,0,i,num,points,i,p,x,random,point,in,r,within,coordinates,builder,coordinate,p,get,x,p,get,y,shape,builder,pcb,st,shape,type,multipoint,new,multi,point,builder,coordinates,builder,build,new,line,string,builder,coordinates,builder,return,pcb,case,multilinestring,multi,line,string,builder,mlsb,new,multi,line,string,builder,for,int,i,0,i,random,numbers,random,int,between,r,1,10,i,mlsb,linestring,line,string,builder,create,shape,r,near,point,within,shape,type,linestring,false,return,mlsb,case,polygon,num,points,random,numbers,random,int,between,r,5,25,coordinate,coordinates,new,coordinate,num,points,for,int,i,0,i,num,points,i,p,point,create,shape,r,near,point,within,shape,type,point,false,build,s4j,coordinates,i,new,coordinate,p,get,x,p,get,y,geometry,shell,new,convex,hull,coordinates,ctx,get,geometry,factory,get,convex,hull,coordinate,shell,coords,shell,get,coordinates,if,shell,coords,length,3,shell,coords,new,coordinate,4,shell,coords,0,new,coordinate,within,get,min,x,within,get,min,y,shell,coords,1,new,coordinate,within,get,min,x,within,get,max,y,shell,coords,2,new,coordinate,within,get,max,x,within,get,max,y,shell,coords,3,new,coordinate,within,get,max,x,within,get,min,y,polygon,builder,pgb,new,polygon,builder,new,coordinates,builder,coordinates,shell,coords,close,if,validate,try,pgb,build,s4j,catch,assertion,error,invalid,shape,exception,e,return,null,return,pgb,default,throw,new,elasticsearch,exception,unable,to,create,shape,of,type,st
RandomShapeGenerator -> private static ShapeBuilder createShape(Random r, Point nearPoint, Rectangle within, ShapeType st, boolean validate) throws             InvalidShapeException;1545148496;Creates a random shape useful for randomized testing, NOTE: exercise caution when using this to build random GeometryCollections_as creating a large random number of random shapes can result in massive resource consumption_see: {@link GeoShapeQueryTests#testQueryRandomGeoCollection()}__The following options are included_@param nearPoint Create a shape near a provided point_@param within Create a shape within the provided rectangle (note: if not null this will override the provided point)_@param st Create a random shape of the provided type_@return the ShapeBuilder for a random shape;private static ShapeBuilder createShape(Random r, Point nearPoint, Rectangle within, ShapeType st, boolean validate) throws_            InvalidShapeException {__        if (st == null) {_            st = ShapeType.randomType(r)__        }__        if (within == null) {_            within = xRandomRectangle(r, nearPoint)__        }__        _        _        _        switch (st) {_            case POINT:_                Point p = xRandomPointIn(r, within)__                PointBuilder pb = new PointBuilder().coordinate(new Coordinate(p.getX(), p.getY(), Double.NaN))__                return pb__            case MULTIPOINT:_            case LINESTRING:_                _                _                _                int numPoints = RandomNumbers.randomIntBetween(r, 3, 10)__                CoordinatesBuilder coordinatesBuilder = new CoordinatesBuilder()__                for (int i=0_ i<numPoints_ ++i) {_                    p = xRandomPointIn(r, within)__                    coordinatesBuilder.coordinate(p.getX(), p.getY())__                }_                ShapeBuilder pcb = (st == ShapeType.MULTIPOINT)_                    ? new MultiPointBuilder(coordinatesBuilder.build())_                    : new LineStringBuilder(coordinatesBuilder)__                return pcb__            case MULTILINESTRING:_                MultiLineStringBuilder mlsb = new MultiLineStringBuilder()__                for (int i=0_ i<RandomNumbers.randomIntBetween(r, 1, 10)_ ++i) {_                    mlsb.linestring((LineStringBuilder) createShape(r, nearPoint, within, ShapeType.LINESTRING, false))__                }_                return mlsb__            case POLYGON:_                numPoints = RandomNumbers.randomIntBetween(r, 5, 25)__                Coordinate[] coordinates = new Coordinate[numPoints]__                for (int i=0_ i<numPoints_ ++i) {_                    p = (Point) createShape(r, nearPoint, within, ShapeType.POINT, false).buildS4J()__                    coordinates[i] = new Coordinate(p.getX(), p.getY())__                }_                _                _                Geometry shell = new ConvexHull(coordinates, ctx.getGeometryFactory()).getConvexHull()__                Coordinate[] shellCoords = shell.getCoordinates()__                _                _                if (shellCoords.length < 3) {_                    shellCoords = new Coordinate[4]__                    shellCoords[0] = new Coordinate(within.getMinX(), within.getMinY())__                    shellCoords[1] = new Coordinate(within.getMinX(), within.getMaxY())__                    shellCoords[2] = new Coordinate(within.getMaxX(), within.getMaxY())__                    shellCoords[3] = new Coordinate(within.getMaxX(), within.getMinY())__                }_                PolygonBuilder pgb = new PolygonBuilder(new CoordinatesBuilder().coordinates(shellCoords).close())__                if (validate) {_                    _                    _                    _                    _                    try {_                        pgb.buildS4J()__                    } catch (AssertionError | InvalidShapeException e) {_                        _                        _                        return null__                    }_                }_                return pgb__            default:_                throw new ElasticsearchException("Unable to create shape of type [" + st + "]")__        }_    };creates,a,random,shape,useful,for,randomized,testing,note,exercise,caution,when,using,this,to,build,random,geometry,collections,as,creating,a,large,random,number,of,random,shapes,can,result,in,massive,resource,consumption,see,link,geo,shape,query,tests,test,query,random,geo,collection,the,following,options,are,included,param,near,point,create,a,shape,near,a,provided,point,param,within,create,a,shape,within,the,provided,rectangle,note,if,not,null,this,will,override,the,provided,point,param,st,create,a,random,shape,of,the,provided,type,return,the,shape,builder,for,a,random,shape;private,static,shape,builder,create,shape,random,r,point,near,point,rectangle,within,shape,type,st,boolean,validate,throws,invalid,shape,exception,if,st,null,st,shape,type,random,type,r,if,within,null,within,x,random,rectangle,r,near,point,switch,st,case,point,point,p,x,random,point,in,r,within,point,builder,pb,new,point,builder,coordinate,new,coordinate,p,get,x,p,get,y,double,na,n,return,pb,case,multipoint,case,linestring,int,num,points,random,numbers,random,int,between,r,3,10,coordinates,builder,coordinates,builder,new,coordinates,builder,for,int,i,0,i,num,points,i,p,x,random,point,in,r,within,coordinates,builder,coordinate,p,get,x,p,get,y,shape,builder,pcb,st,shape,type,multipoint,new,multi,point,builder,coordinates,builder,build,new,line,string,builder,coordinates,builder,return,pcb,case,multilinestring,multi,line,string,builder,mlsb,new,multi,line,string,builder,for,int,i,0,i,random,numbers,random,int,between,r,1,10,i,mlsb,linestring,line,string,builder,create,shape,r,near,point,within,shape,type,linestring,false,return,mlsb,case,polygon,num,points,random,numbers,random,int,between,r,5,25,coordinate,coordinates,new,coordinate,num,points,for,int,i,0,i,num,points,i,p,point,create,shape,r,near,point,within,shape,type,point,false,build,s4j,coordinates,i,new,coordinate,p,get,x,p,get,y,geometry,shell,new,convex,hull,coordinates,ctx,get,geometry,factory,get,convex,hull,coordinate,shell,coords,shell,get,coordinates,if,shell,coords,length,3,shell,coords,new,coordinate,4,shell,coords,0,new,coordinate,within,get,min,x,within,get,min,y,shell,coords,1,new,coordinate,within,get,min,x,within,get,max,y,shell,coords,2,new,coordinate,within,get,max,x,within,get,max,y,shell,coords,3,new,coordinate,within,get,max,x,within,get,min,y,polygon,builder,pgb,new,polygon,builder,new,coordinates,builder,coordinates,shell,coords,close,if,validate,try,pgb,build,s4j,catch,assertion,error,invalid,shape,exception,e,return,null,return,pgb,default,throw,new,elasticsearch,exception,unable,to,create,shape,of,type,st
