commented;modifiers;parameterAmount;loc;comment;code
false;public;0;44;;public void testWaitForMetaDataVersion() throws Exception {     ClusterStateRequest clusterStateRequest = new ClusterStateRequest().     clusterStateRequest.waitForTimeout(TimeValue.timeValueHours(1)).     ActionFuture<ClusterStateResponse> future1 = client().admin().cluster().state(clusterStateRequest).     assertThat(future1.isDone(), is(true)).     assertThat(future1.actionGet().isWaitForTimedOut(), is(false)).     long metadataVersion = future1.actionGet().getState().getMetaData().version().     // Verify that cluster state api returns after the cluster settings have been updated:     clusterStateRequest = new ClusterStateRequest().     clusterStateRequest.waitForMetaDataVersion(metadataVersion + 1).     ActionFuture<ClusterStateResponse> future2 = client().admin().cluster().state(clusterStateRequest).     assertThat(future2.isDone(), is(false)).     ClusterUpdateSettingsRequest updateSettingsRequest = new ClusterUpdateSettingsRequest().     // Pick an arbitrary dynamic cluster setting and change it. Just to get metadata version incremented:     updateSettingsRequest.transientSettings(Settings.builder().put("cluster.max_shards_per_node", 999)).     assertAcked(client().admin().cluster().updateSettings(updateSettingsRequest).actionGet()).     assertBusy(() -> {         assertThat(future2.isDone(), is(true)).     }).     ClusterStateResponse response = future2.actionGet().     assertThat(response.isWaitForTimedOut(), is(false)).     assertThat(response.getState().metaData().version(), equalTo(metadataVersion + 1)).     // Verify that the timed out property has been set"     metadataVersion = response.getState().getMetaData().version().     clusterStateRequest.waitForMetaDataVersion(metadataVersion + 1).     // Fail fast     clusterStateRequest.waitForTimeout(TimeValue.timeValueMillis(500)).     ActionFuture<ClusterStateResponse> future3 = client().admin().cluster().state(clusterStateRequest).     assertBusy(() -> {         assertThat(future3.isDone(), is(true)).     }).     response = future3.actionGet().     assertThat(response.isWaitForTimedOut(), is(true)).     assertThat(response.getState(), nullValue()).     // Remove transient setting, otherwise test fails with the reason that this test leaves state behind:     updateSettingsRequest = new ClusterUpdateSettingsRequest().     updateSettingsRequest.transientSettings(Settings.builder().put("cluster.max_shards_per_node", (String) null)).     assertAcked(client().admin().cluster().updateSettings(updateSettingsRequest).actionGet()). }
