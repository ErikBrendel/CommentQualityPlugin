# id;timestamp;commentText;codeText;commentWords;codeWords
InternalPercentilesBucketTests -> public void testPercentOrder();1540486836;check that we don't rely on the percent array order and that the iterator returns the values in the original order;public void testPercentOrder() {_        final double[] percents =  new double[]{ 0.50, 0.25, 0.01, 0.99, 0.60 }__        InternalPercentilesBucket aggregation = createTestInstance("test", Collections.emptyList(), Collections.emptyMap(), percents)__        Iterator<Percentile> iterator = aggregation.iterator()__        for (double percent : percents) {_            assertTrue(iterator.hasNext())__            Percentile percentile = iterator.next()__            assertEquals(percent, percentile.getPercent(), 0.0d)__            assertEquals(aggregation.percentile(percent), percentile.getValue(), 0.0d)__        }_    };check,that,we,don,t,rely,on,the,percent,array,order,and,that,the,iterator,returns,the,values,in,the,original,order;public,void,test,percent,order,final,double,percents,new,double,0,50,0,25,0,01,0,99,0,60,internal,percentiles,bucket,aggregation,create,test,instance,test,collections,empty,list,collections,empty,map,percents,iterator,percentile,iterator,aggregation,iterator,for,double,percent,percents,assert,true,iterator,has,next,percentile,percentile,iterator,next,assert,equals,percent,percentile,get,percent,0,0d,assert,equals,aggregation,percentile,percent,percentile,get,value,0,0d
InternalPercentilesBucketTests -> public void testPercentOrder();1544822574;check that we don't rely on the percent array order and that the iterator returns the values in the original order;public void testPercentOrder() {_        final double[] percents =  new double[]{ 0.50, 0.25, 0.01, 0.99, 0.60 }__        InternalPercentilesBucket aggregation = createTestInstance("test", Collections.emptyList(),_            Collections.emptyMap(), percents, randomBoolean())__        Iterator<Percentile> iterator = aggregation.iterator()__        for (double percent : percents) {_            assertTrue(iterator.hasNext())__            Percentile percentile = iterator.next()__            assertEquals(percent, percentile.getPercent(), 0.0d)__            assertEquals(aggregation.percentile(percent), percentile.getValue(), 0.0d)__        }_    };check,that,we,don,t,rely,on,the,percent,array,order,and,that,the,iterator,returns,the,values,in,the,original,order;public,void,test,percent,order,final,double,percents,new,double,0,50,0,25,0,01,0,99,0,60,internal,percentiles,bucket,aggregation,create,test,instance,test,collections,empty,list,collections,empty,map,percents,random,boolean,iterator,percentile,iterator,aggregation,iterator,for,double,percent,percents,assert,true,iterator,has,next,percentile,percentile,iterator,next,assert,equals,percent,percentile,get,percent,0,0d,assert,equals,aggregation,percentile,percent,percentile,get,value,0,0d
InternalPercentilesBucketTests -> public void testPercentOrder();1548422582;check that we don't rely on the percent array order and that the iterator returns the values in the original order;public void testPercentOrder() {_        final double[] percents =  new double[]{ 0.50, 0.25, 0.01, 0.99, 0.60 }__        InternalPercentilesBucket aggregation = createTestInstance("test", Collections.emptyList(),_            Collections.emptyMap(), percents, randomBoolean())__        Iterator<Percentile> iterator = aggregation.iterator()__        for (double percent : percents) {_            assertTrue(iterator.hasNext())__            Percentile percentile = iterator.next()__            assertEquals(percent, percentile.getPercent(), 0.0d)__            assertEquals(aggregation.percentile(percent), percentile.getValue(), 0.0d)__        }_    };check,that,we,don,t,rely,on,the,percent,array,order,and,that,the,iterator,returns,the,values,in,the,original,order;public,void,test,percent,order,final,double,percents,new,double,0,50,0,25,0,01,0,99,0,60,internal,percentiles,bucket,aggregation,create,test,instance,test,collections,empty,list,collections,empty,map,percents,random,boolean,iterator,percentile,iterator,aggregation,iterator,for,double,percent,percents,assert,true,iterator,has,next,percentile,percentile,iterator,next,assert,equals,percent,percentile,get,percent,0,0d,assert,equals,aggregation,percentile,percent,percentile,get,value,0,0d
