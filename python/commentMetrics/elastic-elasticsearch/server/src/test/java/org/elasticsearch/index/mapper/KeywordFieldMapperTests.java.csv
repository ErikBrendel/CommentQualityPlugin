commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public List<PreConfiguredTokenFilter> getPreConfiguredTokenFilters() {     return singletonList(PreConfiguredTokenFilter.singleton("mock_other_lowercase", true, MockLowerCaseFilter::new)). }
false;public;0;4;;@Override public Tokenizer create() {     return new MockTokenizer(MockTokenizer.KEYWORD, false). }
false;public;0;13;;@Override public Map<String, AnalysisModule.AnalysisProvider<TokenizerFactory>> getTokenizers() {     return singletonMap("keyword", (indexSettings, environment, name, settings) -> {         class Factory implements TokenizerFactory {              @Override             public Tokenizer create() {                 return new MockTokenizer(MockTokenizer.KEYWORD, false).             }         }         return new Factory().     }). }
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> getPlugins() {     return pluginList(InternalSettingsPlugin.class, MockAnalysisPlugin.class). }
false;public;0;9;;@Before public void setup() {     indexService = createIndex("test", Settings.builder().put("index.analysis.normalizer.my_lowercase.type", "custom").putList("index.analysis.normalizer.my_lowercase.filter", "lowercase").put("index.analysis.normalizer.my_other_lowercase.type", "custom").putList("index.analysis.normalizer.my_other_lowercase.filter", "mock_other_lowercase").build()).     parser = indexService.mapperService().documentMapperParser(). }
false;public;0;36;;public void testDefaults() throws Exception {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "keyword").endObject().endObject().endObject().endObject()).     DocumentMapper mapper = parser.parse("type", new CompressedXContent(mapping)).     assertEquals(mapping, mapper.mappingSource().toString()).     ParsedDocument doc = mapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field", "1234").endObject()), XContentType.JSON)).     IndexableField[] fields = doc.rootDoc().getFields("field").     assertEquals(2, fields.length).     assertEquals(new BytesRef("1234"), fields[0].binaryValue()).     IndexableFieldType fieldType = fields[0].fieldType().     assertThat(fieldType.omitNorms(), equalTo(true)).     assertFalse(fieldType.tokenized()).     assertFalse(fieldType.stored()).     assertThat(fieldType.indexOptions(), equalTo(IndexOptions.DOCS)).     assertThat(fieldType.storeTermVectors(), equalTo(false)).     assertThat(fieldType.storeTermVectorOffsets(), equalTo(false)).     assertThat(fieldType.storeTermVectorPositions(), equalTo(false)).     assertThat(fieldType.storeTermVectorPayloads(), equalTo(false)).     assertEquals(DocValuesType.NONE, fieldType.docValuesType()).     assertEquals(new BytesRef("1234"), fields[1].binaryValue()).     fieldType = fields[1].fieldType().     assertThat(fieldType.indexOptions(), equalTo(IndexOptions.NONE)).     assertEquals(DocValuesType.SORTED_SET, fieldType.docValuesType()). }
false;public;0;29;;public void testIgnoreAbove() throws IOException {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "keyword").field("ignore_above", 5).endObject().endObject().endObject().endObject()).     DocumentMapper mapper = parser.parse("type", new CompressedXContent(mapping)).     assertEquals(mapping, mapper.mappingSource().toString()).     ParsedDocument doc = mapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field", "elk").endObject()), XContentType.JSON)).     IndexableField[] fields = doc.rootDoc().getFields("field").     assertEquals(2, fields.length).     doc = mapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field", "elasticsearch").endObject()), XContentType.JSON)).     fields = doc.rootDoc().getFields("field").     assertEquals(0, fields.length). }
false;public;0;44;;public void testNullValue() throws IOException {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "keyword").endObject().endObject().endObject().endObject()).     DocumentMapper mapper = parser.parse("type", new CompressedXContent(mapping)).     assertEquals(mapping, mapper.mappingSource().toString()).     ParsedDocument doc = mapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().nullField("field").endObject()), XContentType.JSON)).     assertArrayEquals(new IndexableField[0], doc.rootDoc().getFields("field")).     mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "keyword").field("null_value", "uri").endObject().endObject().endObject().endObject()).     mapper = parser.parse("type", new CompressedXContent(mapping)).     assertEquals(mapping, mapper.mappingSource().toString()).     doc = mapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().endObject()), XContentType.JSON)).     IndexableField[] fields = doc.rootDoc().getFields("field").     assertEquals(0, fields.length).     doc = mapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().nullField("field").endObject()), XContentType.JSON)).     fields = doc.rootDoc().getFields("field").     assertEquals(2, fields.length).     assertEquals(new BytesRef("uri"), fields[0].binaryValue()). }
false;public;0;20;;public void testEnableStore() throws IOException {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "keyword").field("store", true).endObject().endObject().endObject().endObject()).     DocumentMapper mapper = parser.parse("type", new CompressedXContent(mapping)).     assertEquals(mapping, mapper.mappingSource().toString()).     ParsedDocument doc = mapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field", "1234").endObject()), XContentType.JSON)).     IndexableField[] fields = doc.rootDoc().getFields("field").     assertEquals(2, fields.length).     assertTrue(fields[0].fieldType().stored()). }
false;public;0;21;;public void testDisableIndex() throws IOException {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "keyword").field("index", false).endObject().endObject().endObject().endObject()).     DocumentMapper mapper = parser.parse("type", new CompressedXContent(mapping)).     assertEquals(mapping, mapper.mappingSource().toString()).     ParsedDocument doc = mapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field", "1234").endObject()), XContentType.JSON)).     IndexableField[] fields = doc.rootDoc().getFields("field").     assertEquals(1, fields.length).     assertEquals(IndexOptions.NONE, fields[0].fieldType().indexOptions()).     assertEquals(DocValuesType.SORTED_SET, fields[0].fieldType().docValuesType()). }
false;public;0;20;;public void testDisableDocValues() throws IOException {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "keyword").field("doc_values", false).endObject().endObject().endObject().endObject()).     DocumentMapper mapper = parser.parse("type", new CompressedXContent(mapping)).     assertEquals(mapping, mapper.mappingSource().toString()).     ParsedDocument doc = mapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field", "1234").endObject()), XContentType.JSON)).     IndexableField[] fields = doc.rootDoc().getFields("field").     assertEquals(1, fields.length).     assertEquals(DocValuesType.NONE, fields[0].fieldType().docValuesType()). }
false;public;0;31;;public void testIndexOptions() throws IOException {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "keyword").field("index_options", "freqs").endObject().endObject().endObject().endObject()).     DocumentMapper mapper = parser.parse("type", new CompressedXContent(mapping)).     assertEquals(mapping, mapper.mappingSource().toString()).     ParsedDocument doc = mapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field", "1234").endObject()), XContentType.JSON)).     IndexableField[] fields = doc.rootDoc().getFields("field").     assertEquals(2, fields.length).     assertEquals(IndexOptions.DOCS_AND_FREQS, fields[0].fieldType().indexOptions()).     for (String indexOptions : Arrays.asList("positions", "offsets")) {         final String mapping2 = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "keyword").field("index_options", indexOptions).endObject().endObject().endObject().endObject()).         IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> parser.parse("type", new CompressedXContent(mapping2))).         assertEquals("The [keyword] field does not support positions, got [index_options]=" + indexOptions, e.getMessage()).     } }
false;public;0;9;;public void testBoost() throws IOException {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "keyword").field("boost", 2f).endObject().endObject().endObject().endObject()).     DocumentMapper mapper = parser.parse("type", new CompressedXContent(mapping)).     assertEquals(mapping, mapper.mappingSource().toString()). }
false;public;0;28;;public void testEnableNorms() throws IOException {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "keyword").field("doc_values", false).field("norms", true).endObject().endObject().endObject().endObject()).     DocumentMapper mapper = parser.parse("type", new CompressedXContent(mapping)).     assertEquals(mapping, mapper.mappingSource().toString()).     ParsedDocument doc = mapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field", "1234").endObject()), XContentType.JSON)).     IndexableField[] fields = doc.rootDoc().getFields("field").     assertEquals(1, fields.length).     assertFalse(fields[0].fieldType().omitNorms()).     IndexableField[] fieldNamesFields = doc.rootDoc().getFields(FieldNamesFieldMapper.NAME).     assertEquals(0, fieldNamesFields.length). }
false;public;0;37;;public void testNormalizer() throws IOException {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "keyword").field("normalizer", "my_lowercase").endObject().endObject().endObject().endObject()).     DocumentMapper mapper = parser.parse("type", new CompressedXContent(mapping)).     assertEquals(mapping, mapper.mappingSource().toString()).     ParsedDocument doc = mapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field", "AbC").endObject()), XContentType.JSON)).     IndexableField[] fields = doc.rootDoc().getFields("field").     assertEquals(2, fields.length).     assertEquals(new BytesRef("abc"), fields[0].binaryValue()).     IndexableFieldType fieldType = fields[0].fieldType().     assertThat(fieldType.omitNorms(), equalTo(true)).     assertFalse(fieldType.tokenized()).     assertFalse(fieldType.stored()).     assertThat(fieldType.indexOptions(), equalTo(IndexOptions.DOCS)).     assertThat(fieldType.storeTermVectors(), equalTo(false)).     assertThat(fieldType.storeTermVectorOffsets(), equalTo(false)).     assertThat(fieldType.storeTermVectorPositions(), equalTo(false)).     assertThat(fieldType.storeTermVectorPayloads(), equalTo(false)).     assertEquals(DocValuesType.NONE, fieldType.docValuesType()).     assertEquals(new BytesRef("abc"), fields[1].binaryValue()).     fieldType = fields[1].fieldType().     assertThat(fieldType.indexOptions(), equalTo(IndexOptions.NONE)).     assertEquals(DocValuesType.SORTED_SET, fieldType.docValuesType()). }
false;public;0;18;;public void testUpdateNormalizer() throws IOException {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "keyword").field("normalizer", "my_lowercase").endObject().endObject().endObject().endObject()).     indexService.mapperService().merge("type", new CompressedXContent(mapping), MergeReason.MAPPING_UPDATE).     String mapping2 = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "keyword").field("normalizer", "my_other_lowercase").endObject().endObject().endObject().endObject()).     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> indexService.mapperService().merge("type", new CompressedXContent(mapping2), MergeReason.MAPPING_UPDATE)).     assertEquals("Mapper for [field] conflicts with existing mapping:\n[mapper [field] has different [normalizer]]", e.getMessage()). }
false;public;0;16;;public void testEmptyName() throws IOException {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("").field("type", "keyword").endObject().endObject().endObject().endObject()).     // Empty name not allowed in index created after 5.0     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> parser.parse("type", new CompressedXContent(mapping))).     assertThat(e.getMessage(), containsString("name cannot be empty string")). }
false;public;0;54;;public void testSplitQueriesOnWhitespace() throws IOException {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "keyword").endObject().startObject("field_with_normalizer").field("type", "keyword").field("normalizer", "my_lowercase").field("split_queries_on_whitespace", true).endObject().endObject().endObject().endObject()).     indexService.mapperService().merge("type", new CompressedXContent(mapping), MergeReason.MAPPING_UPDATE).     MappedFieldType fieldType = indexService.mapperService().fullName("field").     assertThat(fieldType, instanceOf(KeywordFieldMapper.KeywordFieldType.class)).     KeywordFieldMapper.KeywordFieldType ft = (KeywordFieldMapper.KeywordFieldType) fieldType.     assertTokenStreamContents(ft.searchAnalyzer().analyzer().tokenStream("", "Hello World"), new String[] { "Hello World" }).     fieldType = indexService.mapperService().fullName("field_with_normalizer").     assertThat(fieldType, instanceOf(KeywordFieldMapper.KeywordFieldType.class)).     ft = (KeywordFieldMapper.KeywordFieldType) fieldType.     assertThat(ft.searchAnalyzer().name(), equalTo("my_lowercase")).     assertTokenStreamContents(ft.searchAnalyzer().analyzer().tokenStream("", "Hello World"), new String[] { "hello", "world" }).     mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "keyword").field("split_queries_on_whitespace", true).endObject().startObject("field_with_normalizer").field("type", "keyword").field("normalizer", "my_lowercase").field("split_queries_on_whitespace", false).endObject().endObject().endObject().endObject()).     indexService.mapperService().merge("type", new CompressedXContent(mapping), MergeReason.MAPPING_UPDATE).     fieldType = indexService.mapperService().fullName("field").     assertThat(fieldType, instanceOf(KeywordFieldMapper.KeywordFieldType.class)).     ft = (KeywordFieldMapper.KeywordFieldType) fieldType.     assertTokenStreamContents(ft.searchAnalyzer().analyzer().tokenStream("", "Hello World"), new String[] { "Hello", "World" }).     fieldType = indexService.mapperService().fullName("field_with_normalizer").     assertThat(fieldType, instanceOf(KeywordFieldMapper.KeywordFieldType.class)).     ft = (KeywordFieldMapper.KeywordFieldType) fieldType.     assertThat(ft.searchAnalyzer().name(), equalTo("my_lowercase")).     assertTokenStreamContents(ft.searchAnalyzer().analyzer().tokenStream("", "Hello World"), new String[] { "hello world" }). }
