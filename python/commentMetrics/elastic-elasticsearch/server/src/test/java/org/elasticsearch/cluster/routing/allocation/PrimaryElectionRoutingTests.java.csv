commented;modifiers;parameterAmount;loc;comment;code
false;public;0;51;;public void testBackupElectionToPrimaryWhenPrimaryCanBeAllocatedToAnotherNode() {     AllocationService strategy = createAllocationService(Settings.builder().put("cluster.routing.allocation.node_concurrent_recoveries", 10).build()).     logger.info("Building initial routing table").     MetaData metaData = MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1)).build().     RoutingTable routingTable = RoutingTable.builder().addAsNew(metaData.index("test")).build().     ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(routingTable).build().     logger.info("Adding two nodes and performing rerouting").     clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode("node1"))).build().     clusterState = strategy.reroute(clusterState, "reroute").     clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode("node2"))).build().     clusterState = strategy.reroute(clusterState, "reroute").     logger.info("Start the primary shard (on node1)").     RoutingNodes routingNodes = clusterState.getRoutingNodes().     clusterState = strategy.applyStartedShards(clusterState, routingNodes.node("node1").shardsWithState(INITIALIZING)).     logger.info("Start the backup shard (on node2)").     routingNodes = clusterState.getRoutingNodes().     clusterState = strategy.applyStartedShards(clusterState, routingNodes.node("node2").shardsWithState(INITIALIZING)).     logger.info("Adding third node and reroute and kill first node").     clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode("node3")).remove("node1")).build().     RoutingTable prevRoutingTable = clusterState.routingTable().     clusterState = strategy.disassociateDeadNodes(clusterState, true, "reroute").     routingNodes = clusterState.getRoutingNodes().     routingTable = clusterState.routingTable().     assertThat(prevRoutingTable != routingTable, equalTo(true)).     assertThat(routingTable.index("test").shards().size(), equalTo(1)).     assertThat(routingNodes.node("node1"), nullValue()).     assertThat(routingNodes.node("node2").numberOfShardsWithState(STARTED), equalTo(1)).     assertThat(routingNodes.node("node3").numberOfShardsWithState(INITIALIZING), equalTo(1)).     // verify where the primary is     assertThat(routingTable.index("test").shard(0).primaryShard().currentNodeId(), equalTo("node2")).     assertThat(clusterState.metaData().index("test").primaryTerm(0), equalTo(2L)).     assertThat(routingTable.index("test").shard(0).replicaShards().get(0).currentNodeId(), equalTo("node3")). }
false;public;0;47;;public void testRemovingInitializingReplicasIfPrimariesFails() {     AllocationService allocation = createAllocationService(Settings.builder().put("cluster.routing.allocation.node_concurrent_recoveries", 10).build()).     logger.info("Building initial routing table").     MetaData metaData = MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(2).numberOfReplicas(1)).build().     RoutingTable routingTable = RoutingTable.builder().addAsNew(metaData.index("test")).build().     ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(routingTable).build().     logger.info("Adding two nodes and performing rerouting").     clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode("node1")).add(newNode("node2"))).build().     clusterState = allocation.reroute(clusterState, "reroute").     logger.info("Start the primary shards").     RoutingNodes routingNodes = clusterState.getRoutingNodes().     clusterState = allocation.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING)).     routingNodes = clusterState.getRoutingNodes().     assertThat(routingNodes.shardsWithState(STARTED).size(), equalTo(2)).     assertThat(routingNodes.shardsWithState(INITIALIZING).size(), equalTo(2)).     assertThat(clusterState.metaData().index("test").primaryTerm(0), equalTo(1L)).     assertThat(clusterState.metaData().index("test").primaryTerm(1), equalTo(1L)).     // now, fail one node, while the replica is initializing, and it also holds a primary     logger.info("--> fail node with primary").     String nodeIdToFail = clusterState.routingTable().index("test").shard(0).primaryShard().currentNodeId().     String nodeIdRemaining = nodeIdToFail.equals("node1") ? "node2" : "node1".     clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode(nodeIdRemaining))).build().     clusterState = allocation.disassociateDeadNodes(clusterState, true, "reroute").     routingNodes = clusterState.getRoutingNodes().     assertThat(routingNodes.shardsWithState(STARTED).size(), equalTo(1)).     assertThat(routingNodes.shardsWithState(INITIALIZING).size(), equalTo(0)).     // 2 replicas and one primary     assertThat(routingNodes.shardsWithState(UNASSIGNED).size(), equalTo(3)).     assertThat(routingNodes.node(nodeIdRemaining).shardsWithState(STARTED).get(0).primary(), equalTo(true)).     assertThat(clusterState.metaData().index("test").primaryTerm(0), equalTo(2L)). }
