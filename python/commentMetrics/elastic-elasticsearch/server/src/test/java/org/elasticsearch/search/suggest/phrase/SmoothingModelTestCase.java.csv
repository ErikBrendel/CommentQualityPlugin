# id;timestamp;commentText;codeText;commentWords;codeWords
SmoothingModelTestCase -> public void testFromXContent() throws IOException;1524684173;Test that creates new smoothing model from a random test smoothing model and checks both for equality;public void testFromXContent() throws IOException {_        SmoothingModel testModel = createTestModel()__        XContentBuilder contentBuilder = XContentFactory.contentBuilder(randomFrom(XContentType.values()))__        if (randomBoolean()) {_            contentBuilder.prettyPrint()__        }_        contentBuilder.startObject()__        testModel.innerToXContent(contentBuilder, ToXContent.EMPTY_PARAMS)__        contentBuilder.endObject()__        XContentParser parser = createParser(shuffleXContent(contentBuilder))__        parser.nextToken()_  _        SmoothingModel parsedModel = fromXContent(parser)__        assertNotSame(testModel, parsedModel)__        assertEquals(testModel, parsedModel)__        assertEquals(testModel.hashCode(), parsedModel.hashCode())__    };test,that,creates,new,smoothing,model,from,a,random,test,smoothing,model,and,checks,both,for,equality;public,void,test,from,xcontent,throws,ioexception,smoothing,model,test,model,create,test,model,xcontent,builder,content,builder,xcontent,factory,content,builder,random,from,xcontent,type,values,if,random,boolean,content,builder,pretty,print,content,builder,start,object,test,model,inner,to,xcontent,content,builder,to,xcontent,content,builder,end,object,xcontent,parser,parser,create,parser,shuffle,xcontent,content,builder,parser,next,token,smoothing,model,parsed,model,from,xcontent,parser,assert,not,same,test,model,parsed,model,assert,equals,test,model,parsed,model,assert,equals,test,model,hash,code,parsed,model,hash,code
SmoothingModelTestCase -> public void testFromXContent() throws IOException;1529916084;Test that creates new smoothing model from a random test smoothing model and checks both for equality;public void testFromXContent() throws IOException {_        SmoothingModel testModel = createTestModel()__        XContentBuilder contentBuilder = XContentFactory.contentBuilder(randomFrom(XContentType.values()))__        if (randomBoolean()) {_            contentBuilder.prettyPrint()__        }_        contentBuilder.startObject()__        testModel.innerToXContent(contentBuilder, ToXContent.EMPTY_PARAMS)__        contentBuilder.endObject()__        try (XContentParser parser = createParser(shuffleXContent(contentBuilder))) {_            parser.nextToken()_  _            SmoothingModel parsedModel = fromXContent(parser)__            assertNotSame(testModel, parsedModel)__            assertEquals(testModel, parsedModel)__            assertEquals(testModel.hashCode(), parsedModel.hashCode())__        }_    };test,that,creates,new,smoothing,model,from,a,random,test,smoothing,model,and,checks,both,for,equality;public,void,test,from,xcontent,throws,ioexception,smoothing,model,test,model,create,test,model,xcontent,builder,content,builder,xcontent,factory,content,builder,random,from,xcontent,type,values,if,random,boolean,content,builder,pretty,print,content,builder,start,object,test,model,inner,to,xcontent,content,builder,to,xcontent,content,builder,end,object,try,xcontent,parser,parser,create,parser,shuffle,xcontent,content,builder,parser,next,token,smoothing,model,parsed,model,from,xcontent,parser,assert,not,same,test,model,parsed,model,assert,equals,test,model,parsed,model,assert,equals,test,model,hash,code,parsed,model,hash,code
SmoothingModelTestCase -> public void testFromXContent() throws IOException;1541501723;Test that creates new smoothing model from a random test smoothing model and checks both for equality;public void testFromXContent() throws IOException {_        SmoothingModel testModel = createTestModel()__        XContentBuilder contentBuilder = XContentFactory.contentBuilder(randomFrom(XContentType.values()))__        if (randomBoolean()) {_            contentBuilder.prettyPrint()__        }_        contentBuilder.startObject()__        testModel.innerToXContent(contentBuilder, ToXContent.EMPTY_PARAMS)__        contentBuilder.endObject()__        try (XContentParser parser = createParser(shuffleXContent(contentBuilder))) {_            parser.nextToken()_  _            SmoothingModel parsedModel = fromXContent(parser)__            assertNotSame(testModel, parsedModel)__            assertEquals(testModel, parsedModel)__            assertEquals(testModel.hashCode(), parsedModel.hashCode())__        }_    };test,that,creates,new,smoothing,model,from,a,random,test,smoothing,model,and,checks,both,for,equality;public,void,test,from,xcontent,throws,ioexception,smoothing,model,test,model,create,test,model,xcontent,builder,content,builder,xcontent,factory,content,builder,random,from,xcontent,type,values,if,random,boolean,content,builder,pretty,print,content,builder,start,object,test,model,inner,to,xcontent,content,builder,to,xcontent,content,builder,end,object,try,xcontent,parser,parser,create,parser,shuffle,xcontent,content,builder,parser,next,token,smoothing,model,parsed,model,from,xcontent,parser,assert,not,same,test,model,parsed,model,assert,equals,test,model,parsed,model,assert,equals,test,model,hash,code,parsed,model,hash,code
SmoothingModelTestCase -> @BeforeClass     public static void init();1524684173;setup for the whole base test class;@BeforeClass_    public static void init() {_        if (namedWriteableRegistry == null) {_            List<NamedWriteableRegistry.Entry> namedWriteables = new ArrayList<>()__            SearchModule.registerSmoothingModels(namedWriteables)__            namedWriteableRegistry = new NamedWriteableRegistry(namedWriteables)__        }_    };setup,for,the,whole,base,test,class;before,class,public,static,void,init,if,named,writeable,registry,null,list,named,writeable,registry,entry,named,writeables,new,array,list,search,module,register,smoothing,models,named,writeables,named,writeable,registry,new,named,writeable,registry,named,writeables
SmoothingModelTestCase -> @BeforeClass     public static void init();1529916084;setup for the whole base test class;@BeforeClass_    public static void init() {_        if (namedWriteableRegistry == null) {_            List<NamedWriteableRegistry.Entry> namedWriteables = new ArrayList<>()__            SearchModule.registerSmoothingModels(namedWriteables)__            namedWriteableRegistry = new NamedWriteableRegistry(namedWriteables)__        }_    };setup,for,the,whole,base,test,class;before,class,public,static,void,init,if,named,writeable,registry,null,list,named,writeable,registry,entry,named,writeables,new,array,list,search,module,register,smoothing,models,named,writeables,named,writeable,registry,new,named,writeable,registry,named,writeables
SmoothingModelTestCase -> @BeforeClass     public static void init();1541501723;setup for the whole base test class;@BeforeClass_    public static void init() {_        if (namedWriteableRegistry == null) {_            List<NamedWriteableRegistry.Entry> namedWriteables = new ArrayList<>()__            SearchModule.registerSmoothingModels(namedWriteables)__            namedWriteableRegistry = new NamedWriteableRegistry(namedWriteables)__        }_    };setup,for,the,whole,base,test,class;before,class,public,static,void,init,if,named,writeable,registry,null,list,named,writeable,registry,entry,named,writeables,new,array,list,search,module,register,smoothing,models,named,writeables,named,writeable,registry,new,named,writeable,registry,named,writeables
SmoothingModelTestCase -> public void testBuildWordScorer() throws IOException;1524684173;Test the WordScorer emitted by the smoothing model;public void testBuildWordScorer() throws IOException {_        SmoothingModel testModel = createTestModel()__        Map<String, Analyzer> mapping = new HashMap<>()__        mapping.put("field", new WhitespaceAnalyzer())__        PerFieldAnalyzerWrapper wrapper = new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(), mapping)__        IndexWriter writer = new IndexWriter(new RAMDirectory(), new IndexWriterConfig(wrapper))__        Document doc = new Document()__        doc.add(new Field("field", "someText", TextField.TYPE_NOT_STORED))__        writer.addDocument(doc)__        DirectoryReader ir = DirectoryReader.open(writer)___        WordScorer wordScorer = testModel.buildWordScorerFactory().newScorer(ir, MultiFields.getTerms(ir, "field"), "field", 0.9d,_                BytesRefs.toBytesRef(" "))__        assertWordScorer(wordScorer, testModel)__    };test,the,word,scorer,emitted,by,the,smoothing,model;public,void,test,build,word,scorer,throws,ioexception,smoothing,model,test,model,create,test,model,map,string,analyzer,mapping,new,hash,map,mapping,put,field,new,whitespace,analyzer,per,field,analyzer,wrapper,wrapper,new,per,field,analyzer,wrapper,new,whitespace,analyzer,mapping,index,writer,writer,new,index,writer,new,ramdirectory,new,index,writer,config,wrapper,document,doc,new,document,doc,add,new,field,field,some,text,text,field,writer,add,document,doc,directory,reader,ir,directory,reader,open,writer,word,scorer,word,scorer,test,model,build,word,scorer,factory,new,scorer,ir,multi,fields,get,terms,ir,field,field,0,9d,bytes,refs,to,bytes,ref,assert,word,scorer,word,scorer,test,model
SmoothingModelTestCase -> public void testBuildWordScorer() throws IOException;1529916084;Test the WordScorer emitted by the smoothing model;public void testBuildWordScorer() throws IOException {_        SmoothingModel testModel = createTestModel()__        Map<String, Analyzer> mapping = new HashMap<>()__        mapping.put("field", new WhitespaceAnalyzer())__        PerFieldAnalyzerWrapper wrapper = new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(), mapping)__        IndexWriter writer = new IndexWriter(new RAMDirectory(), new IndexWriterConfig(wrapper))__        Document doc = new Document()__        doc.add(new Field("field", "someText", TextField.TYPE_NOT_STORED))__        writer.addDocument(doc)__        DirectoryReader ir = DirectoryReader.open(writer)___        WordScorer wordScorer = testModel.buildWordScorerFactory().newScorer(ir, MultiFields.getTerms(ir, "field"), "field", 0.9d,_                BytesRefs.toBytesRef(" "))__        assertWordScorer(wordScorer, testModel)__    };test,the,word,scorer,emitted,by,the,smoothing,model;public,void,test,build,word,scorer,throws,ioexception,smoothing,model,test,model,create,test,model,map,string,analyzer,mapping,new,hash,map,mapping,put,field,new,whitespace,analyzer,per,field,analyzer,wrapper,wrapper,new,per,field,analyzer,wrapper,new,whitespace,analyzer,mapping,index,writer,writer,new,index,writer,new,ramdirectory,new,index,writer,config,wrapper,document,doc,new,document,doc,add,new,field,field,some,text,text,field,writer,add,document,doc,directory,reader,ir,directory,reader,open,writer,word,scorer,word,scorer,test,model,build,word,scorer,factory,new,scorer,ir,multi,fields,get,terms,ir,field,field,0,9d,bytes,refs,to,bytes,ref,assert,word,scorer,word,scorer,test,model
SmoothingModelTestCase -> public void testBuildWordScorer() throws IOException;1541501723;Test the WordScorer emitted by the smoothing model;public void testBuildWordScorer() throws IOException {_        SmoothingModel testModel = createTestModel()__        Map<String, Analyzer> mapping = new HashMap<>()__        mapping.put("field", new WhitespaceAnalyzer())__        PerFieldAnalyzerWrapper wrapper = new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(), mapping)__        IndexWriter writer = new IndexWriter(new RAMDirectory(), new IndexWriterConfig(wrapper))__        Document doc = new Document()__        doc.add(new Field("field", "someText", TextField.TYPE_NOT_STORED))__        writer.addDocument(doc)__        DirectoryReader ir = DirectoryReader.open(writer)___        WordScorer wordScorer = testModel.buildWordScorerFactory().newScorer(ir, MultiTerms.getTerms(ir, "field"), "field", 0.9d,_                BytesRefs.toBytesRef(" "))__        assertWordScorer(wordScorer, testModel)__    };test,the,word,scorer,emitted,by,the,smoothing,model;public,void,test,build,word,scorer,throws,ioexception,smoothing,model,test,model,create,test,model,map,string,analyzer,mapping,new,hash,map,mapping,put,field,new,whitespace,analyzer,per,field,analyzer,wrapper,wrapper,new,per,field,analyzer,wrapper,new,whitespace,analyzer,mapping,index,writer,writer,new,index,writer,new,ramdirectory,new,index,writer,config,wrapper,document,doc,new,document,doc,add,new,field,field,some,text,text,field,writer,add,document,doc,directory,reader,ir,directory,reader,open,writer,word,scorer,word,scorer,test,model,build,word,scorer,factory,new,scorer,ir,multi,terms,get,terms,ir,field,field,0,9d,bytes,refs,to,bytes,ref,assert,word,scorer,word,scorer,test,model
SmoothingModelTestCase -> public void testEqualsAndHashcode() throws IOException;1524684173;Test equality and hashCode properties;public void testEqualsAndHashcode() throws IOException {_        checkEqualsAndHashCode(createTestModel(), this::copy, this::createMutation)__    };test,equality,and,hash,code,properties;public,void,test,equals,and,hashcode,throws,ioexception,check,equals,and,hash,code,create,test,model,this,copy,this,create,mutation
SmoothingModelTestCase -> public void testEqualsAndHashcode() throws IOException;1529916084;Test equality and hashCode properties;public void testEqualsAndHashcode() throws IOException {_        checkEqualsAndHashCode(createTestModel(), this::copy, this::createMutation)__    };test,equality,and,hash,code,properties;public,void,test,equals,and,hashcode,throws,ioexception,check,equals,and,hash,code,create,test,model,this,copy,this,create,mutation
SmoothingModelTestCase -> public void testEqualsAndHashcode() throws IOException;1541501723;Test equality and hashCode properties;public void testEqualsAndHashcode() throws IOException {_        checkEqualsAndHashCode(createTestModel(), this::copy, this::createMutation)__    };test,equality,and,hash,code,properties;public,void,test,equals,and,hashcode,throws,ioexception,check,equals,and,hash,code,create,test,model,this,copy,this,create,mutation
SmoothingModelTestCase -> protected abstract SmoothingModel createTestModel()_;1524684173;create random model that is put under test;protected abstract SmoothingModel createTestModel()_;create,random,model,that,is,put,under,test;protected,abstract,smoothing,model,create,test,model
SmoothingModelTestCase -> protected abstract SmoothingModel createTestModel()_;1529916084;create random model that is put under test;protected abstract SmoothingModel createTestModel()_;create,random,model,that,is,put,under,test;protected,abstract,smoothing,model,create,test,model
SmoothingModelTestCase -> protected abstract SmoothingModel createTestModel()_;1541501723;create random model that is put under test;protected abstract SmoothingModel createTestModel()_;create,random,model,that,is,put,under,test;protected,abstract,smoothing,model,create,test,model
SmoothingModelTestCase -> abstract void assertWordScorer(WordScorer wordScorer, SmoothingModel testModel)_;1524684173;implementation dependant assertions on the wordScorer produced by the smoothing model under test;abstract void assertWordScorer(WordScorer wordScorer, SmoothingModel testModel)_;implementation,dependant,assertions,on,the,word,scorer,produced,by,the,smoothing,model,under,test;abstract,void,assert,word,scorer,word,scorer,word,scorer,smoothing,model,test,model
SmoothingModelTestCase -> abstract void assertWordScorer(WordScorer wordScorer, SmoothingModel testModel)_;1529916084;implementation dependant assertions on the wordScorer produced by the smoothing model under test;abstract void assertWordScorer(WordScorer wordScorer, SmoothingModel testModel)_;implementation,dependant,assertions,on,the,word,scorer,produced,by,the,smoothing,model,under,test;abstract,void,assert,word,scorer,word,scorer,word,scorer,smoothing,model,test,model
SmoothingModelTestCase -> abstract void assertWordScorer(WordScorer wordScorer, SmoothingModel testModel)_;1541501723;implementation dependant assertions on the wordScorer produced by the smoothing model under test;abstract void assertWordScorer(WordScorer wordScorer, SmoothingModel testModel)_;implementation,dependant,assertions,on,the,word,scorer,produced,by,the,smoothing,model,under,test;abstract,void,assert,word,scorer,word,scorer,word,scorer,smoothing,model,test,model
SmoothingModelTestCase -> protected abstract SmoothingModel createMutation(SmoothingModel original) throws IOException_;1524684173;mutate the given model so the returned smoothing model is different;protected abstract SmoothingModel createMutation(SmoothingModel original) throws IOException_;mutate,the,given,model,so,the,returned,smoothing,model,is,different;protected,abstract,smoothing,model,create,mutation,smoothing,model,original,throws,ioexception
SmoothingModelTestCase -> protected abstract SmoothingModel createMutation(SmoothingModel original) throws IOException_;1529916084;mutate the given model so the returned smoothing model is different;protected abstract SmoothingModel createMutation(SmoothingModel original) throws IOException_;mutate,the,given,model,so,the,returned,smoothing,model,is,different;protected,abstract,smoothing,model,create,mutation,smoothing,model,original,throws,ioexception
SmoothingModelTestCase -> protected abstract SmoothingModel createMutation(SmoothingModel original) throws IOException_;1541501723;mutate the given model so the returned smoothing model is different;protected abstract SmoothingModel createMutation(SmoothingModel original) throws IOException_;mutate,the,given,model,so,the,returned,smoothing,model,is,different;protected,abstract,smoothing,model,create,mutation,smoothing,model,original,throws,ioexception
SmoothingModelTestCase -> public void testSerialization() throws IOException;1524684173;Test serialization and deserialization of the tested model.;public void testSerialization() throws IOException {_        SmoothingModel testModel = createTestModel()__        SmoothingModel deserializedModel = copy(testModel)__        assertEquals(testModel, deserializedModel)__        assertEquals(testModel.hashCode(), deserializedModel.hashCode())__        assertNotSame(testModel, deserializedModel)__    };test,serialization,and,deserialization,of,the,tested,model;public,void,test,serialization,throws,ioexception,smoothing,model,test,model,create,test,model,smoothing,model,deserialized,model,copy,test,model,assert,equals,test,model,deserialized,model,assert,equals,test,model,hash,code,deserialized,model,hash,code,assert,not,same,test,model,deserialized,model
SmoothingModelTestCase -> public void testSerialization() throws IOException;1529916084;Test serialization and deserialization of the tested model.;public void testSerialization() throws IOException {_        SmoothingModel testModel = createTestModel()__        SmoothingModel deserializedModel = copy(testModel)__        assertEquals(testModel, deserializedModel)__        assertEquals(testModel.hashCode(), deserializedModel.hashCode())__        assertNotSame(testModel, deserializedModel)__    };test,serialization,and,deserialization,of,the,tested,model;public,void,test,serialization,throws,ioexception,smoothing,model,test,model,create,test,model,smoothing,model,deserialized,model,copy,test,model,assert,equals,test,model,deserialized,model,assert,equals,test,model,hash,code,deserialized,model,hash,code,assert,not,same,test,model,deserialized,model
SmoothingModelTestCase -> public void testSerialization() throws IOException;1541501723;Test serialization and deserialization of the tested model.;public void testSerialization() throws IOException {_        SmoothingModel testModel = createTestModel()__        SmoothingModel deserializedModel = copy(testModel)__        assertEquals(testModel, deserializedModel)__        assertEquals(testModel.hashCode(), deserializedModel.hashCode())__        assertNotSame(testModel, deserializedModel)__    };test,serialization,and,deserialization,of,the,tested,model;public,void,test,serialization,throws,ioexception,smoothing,model,test,model,create,test,model,smoothing,model,deserialized,model,copy,test,model,assert,equals,test,model,deserialized,model,assert,equals,test,model,hash,code,deserialized,model,hash,code,assert,not,same,test,model,deserialized,model
