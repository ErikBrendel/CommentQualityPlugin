commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void beforeClass() {     threadPool = new TestThreadPool("ShardReplicationTests"). }
false;public,static;0;5;;@AfterClass public static void afterClass() {     ThreadPool.terminate(threadPool, 30, TimeUnit.SECONDS).     threadPool = null. }
false;public;0;70;;public void testResyncDoesNotBlockOnPrimaryAction() throws Exception {     try (ClusterService clusterService = createClusterService(threadPool)) {         final String indexName = randomAlphaOfLength(5).         setState(clusterService, state(indexName, true, ShardRoutingState.STARTED)).         setState(clusterService, ClusterState.builder(clusterService.state()).blocks(ClusterBlocks.builder().addGlobalBlock(NoMasterBlockService.NO_MASTER_BLOCK_ALL).addIndexBlock(indexName, IndexMetaData.INDEX_WRITE_BLOCK))).         try (MockNioTransport transport = new MockNioTransport(Settings.EMPTY, Version.CURRENT, threadPool, new NetworkService(emptyList()), PageCacheRecycler.NON_RECYCLING_INSTANCE, new NamedWriteableRegistry(emptyList()), new NoneCircuitBreakerService())) {             final MockTransportService transportService = new MockTransportService(Settings.EMPTY, transport, threadPool, NOOP_TRANSPORT_INTERCEPTOR, x -> clusterService.localNode(), null, Collections.emptySet()).             transportService.start().             transportService.acceptIncomingRequests().             final ShardStateAction shardStateAction = new ShardStateAction(clusterService, transportService, null, null, threadPool).             final IndexMetaData indexMetaData = clusterService.state().metaData().index(indexName).             final Index index = indexMetaData.getIndex().             final ShardId shardId = new ShardId(index, 0).             final IndexShardRoutingTable shardRoutingTable = clusterService.state().routingTable().shardRoutingTable(shardId).             final ShardRouting primaryShardRouting = clusterService.state().routingTable().shardRoutingTable(shardId).primaryShard().             final String allocationId = primaryShardRouting.allocationId().getId().             final long primaryTerm = indexMetaData.primaryTerm(shardId.id()).             final IndexShard indexShard = mock(IndexShard.class).             when(indexShard.shardId()).thenReturn(shardId).             when(indexShard.routingEntry()).thenReturn(primaryShardRouting).             when(indexShard.getPendingPrimaryTerm()).thenReturn(primaryTerm).             doAnswer(invocation -> {                 ActionListener<Releasable> callback = (ActionListener<Releasable>) invocation.getArguments()[0].                 callback.onResponse(() -> logger.trace("released")).                 return null.             }).when(indexShard).acquirePrimaryOperationPermit(any(ActionListener.class), anyString(), anyObject()).             when(indexShard.getReplicationGroup()).thenReturn(new ReplicationGroup(shardRoutingTable, clusterService.state().metaData().index(index).inSyncAllocationIds(shardId.id()), shardRoutingTable.getAllAllocationIds())).             final IndexService indexService = mock(IndexService.class).             when(indexService.getShard(eq(shardId.id()))).thenReturn(indexShard).             final IndicesService indexServices = mock(IndicesService.class).             when(indexServices.indexServiceSafe(eq(index))).thenReturn(indexService).             final IndexNameExpressionResolver resolver = new IndexNameExpressionResolver().             final TransportResyncReplicationAction action = new TransportResyncReplicationAction(Settings.EMPTY, transportService, clusterService, indexServices, threadPool, shardStateAction, new ActionFilters(new HashSet<>()), resolver).             assertThat(action.globalBlockLevel(), nullValue()).             assertThat(action.indexBlockLevel(), nullValue()).             final Task task = mock(Task.class).             when(task.getId()).thenReturn(randomNonNegativeLong()).             final byte[] bytes = "{}".getBytes(Charset.forName("UTF-8")).             final ResyncReplicationRequest request = new ResyncReplicationRequest(shardId, 42L, 100, new Translog.Operation[] { new Translog.Index("type", "id", 0, primaryTerm, 0L, bytes, null, -1) }).             final PlainActionFuture<ResyncReplicationResponse> listener = new PlainActionFuture<>().             action.sync(request, task, allocationId, primaryTerm, listener).             assertThat(listener.get().getShardInfo().getFailed(), equalTo(0)).             assertThat(listener.isDone(), is(true)).         }     } }
