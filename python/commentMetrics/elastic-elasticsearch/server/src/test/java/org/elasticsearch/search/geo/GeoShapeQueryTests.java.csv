# id;timestamp;commentText;codeText;commentWords;codeWords
GeoShapeQueryTests -> public void testPointQuery() throws Exception;1545079094;tests querying a random geometry collection with a point;public void testPointQuery() throws Exception {_        _        GeometryCollectionBuilder gcb = RandomShapeGenerator.createGeometryCollection(random())__        double[] pt = new double[] {GeoTestUtil.nextLongitude(), GeoTestUtil.nextLatitude()}__        PointBuilder pb = new PointBuilder(pt[0], pt[1])__        gcb.shape(pb)__        if (randomBoolean()) {_            client().admin().indices().prepareCreate("test").addMapping("type", "location", "type=geo_shape")_                .execute().actionGet()__        } else {_            client().admin().indices().prepareCreate("test").addMapping("type", "location", "type=geo_shape,tree=quadtree")_                .execute().actionGet()__        }_        XContentBuilder docSource = gcb.toXContent(jsonBuilder().startObject().field("location"), null).endObject()__        client().prepareIndex("test", "type", "1").setSource(docSource).setRefreshPolicy(IMMEDIATE).get()___        GeoShapeQueryBuilder geoShapeQueryBuilder = QueryBuilders.geoShapeQuery("location", pb)__        geoShapeQueryBuilder.relation(ShapeRelation.INTERSECTS)__        SearchResponse result = client().prepareSearch("test").setTypes("type").setQuery(geoShapeQueryBuilder).get()__        assertSearchResponse(result)__        assertHitCount(result, 1)__    };tests,querying,a,random,geometry,collection,with,a,point;public,void,test,point,query,throws,exception,geometry,collection,builder,gcb,random,shape,generator,create,geometry,collection,random,double,pt,new,double,geo,test,util,next,longitude,geo,test,util,next,latitude,point,builder,pb,new,point,builder,pt,0,pt,1,gcb,shape,pb,if,random,boolean,client,admin,indices,prepare,create,test,add,mapping,type,location,type,execute,action,get,else,client,admin,indices,prepare,create,test,add,mapping,type,location,type,tree,quadtree,execute,action,get,xcontent,builder,doc,source,gcb,to,xcontent,json,builder,start,object,field,location,null,end,object,client,prepare,index,test,type,1,set,source,doc,source,set,refresh,policy,immediate,get,geo,shape,query,builder,geo,shape,query,builder,query,builders,geo,shape,query,location,pb,geo,shape,query,builder,relation,shape,relation,intersects,search,response,result,client,prepare,search,test,set,types,type,set,query,geo,shape,query,builder,get,assert,search,response,result,assert,hit,count,result,1
GeoShapeQueryTests -> public void testPointQuery() throws Exception;1545148496;tests querying a random geometry collection with a point;public void testPointQuery() throws Exception {_        _        GeometryCollectionBuilder gcb = RandomShapeGenerator.createGeometryCollection(random())__        double[] pt = new double[] {GeoTestUtil.nextLongitude(), GeoTestUtil.nextLatitude()}__        PointBuilder pb = new PointBuilder(pt[0], pt[1])__        gcb.shape(pb)__        if (randomBoolean()) {_            client().admin().indices().prepareCreate("test").addMapping("type", "location", "type=geo_shape")_                .execute().actionGet()__        } else {_            client().admin().indices().prepareCreate("test").addMapping("type", "location", "type=geo_shape,tree=quadtree")_                .execute().actionGet()__        }_        XContentBuilder docSource = gcb.toXContent(jsonBuilder().startObject().field("location"), null).endObject()__        client().prepareIndex("test", "type", "1").setSource(docSource).setRefreshPolicy(IMMEDIATE).get()___        GeoShapeQueryBuilder geoShapeQueryBuilder = QueryBuilders.geoShapeQuery("location", pb)__        geoShapeQueryBuilder.relation(ShapeRelation.INTERSECTS)__        SearchResponse result = client().prepareSearch("test").setTypes("type").setQuery(geoShapeQueryBuilder).get()__        assertSearchResponse(result)__        assertHitCount(result, 1)__    };tests,querying,a,random,geometry,collection,with,a,point;public,void,test,point,query,throws,exception,geometry,collection,builder,gcb,random,shape,generator,create,geometry,collection,random,double,pt,new,double,geo,test,util,next,longitude,geo,test,util,next,latitude,point,builder,pb,new,point,builder,pt,0,pt,1,gcb,shape,pb,if,random,boolean,client,admin,indices,prepare,create,test,add,mapping,type,location,type,execute,action,get,else,client,admin,indices,prepare,create,test,add,mapping,type,location,type,tree,quadtree,execute,action,get,xcontent,builder,doc,source,gcb,to,xcontent,json,builder,start,object,field,location,null,end,object,client,prepare,index,test,type,1,set,source,doc,source,set,refresh,policy,immediate,get,geo,shape,query,builder,geo,shape,query,builder,query,builders,geo,shape,query,location,pb,geo,shape,query,builder,relation,shape,relation,intersects,search,response,result,client,prepare,search,test,set,types,type,set,query,geo,shape,query,builder,get,assert,search,response,result,assert,hit,count,result,1
GeoShapeQueryTests -> public void testPointQuery() throws Exception;1547002001;tests querying a random geometry collection with a point;public void testPointQuery() throws Exception {_        _        GeometryCollectionBuilder gcb = RandomShapeGenerator.createGeometryCollection(random())__        double[] pt = new double[] {GeoTestUtil.nextLongitude(), GeoTestUtil.nextLatitude()}__        PointBuilder pb = new PointBuilder(pt[0], pt[1])__        gcb.shape(pb)__        if (randomBoolean()) {_            client().admin().indices().prepareCreate("test").addMapping("type", "location", "type=geo_shape")_                .execute().actionGet()__        } else {_            client().admin().indices().prepareCreate("test").addMapping("type", "location", "type=geo_shape,tree=quadtree")_                .execute().actionGet()__        }_        XContentBuilder docSource = gcb.toXContent(jsonBuilder().startObject().field("location"), null).endObject()__        client().prepareIndex("test", "type", "1").setSource(docSource).setRefreshPolicy(IMMEDIATE).get()___        GeoShapeQueryBuilder geoShapeQueryBuilder = QueryBuilders.geoShapeQuery("location", pb)__        geoShapeQueryBuilder.relation(ShapeRelation.INTERSECTS)__        SearchResponse result = client().prepareSearch("test").setQuery(geoShapeQueryBuilder).get()__        assertSearchResponse(result)__        assertHitCount(result, 1)__    };tests,querying,a,random,geometry,collection,with,a,point;public,void,test,point,query,throws,exception,geometry,collection,builder,gcb,random,shape,generator,create,geometry,collection,random,double,pt,new,double,geo,test,util,next,longitude,geo,test,util,next,latitude,point,builder,pb,new,point,builder,pt,0,pt,1,gcb,shape,pb,if,random,boolean,client,admin,indices,prepare,create,test,add,mapping,type,location,type,execute,action,get,else,client,admin,indices,prepare,create,test,add,mapping,type,location,type,tree,quadtree,execute,action,get,xcontent,builder,doc,source,gcb,to,xcontent,json,builder,start,object,field,location,null,end,object,client,prepare,index,test,type,1,set,source,doc,source,set,refresh,policy,immediate,get,geo,shape,query,builder,geo,shape,query,builder,query,builders,geo,shape,query,location,pb,geo,shape,query,builder,relation,shape,relation,intersects,search,response,result,client,prepare,search,test,set,query,geo,shape,query,builder,get,assert,search,response,result,assert,hit,count,result,1
GeoShapeQueryTests -> public void testPointQuery() throws Exception;1548264354;tests querying a random geometry collection with a point;public void testPointQuery() throws Exception {_        _        GeometryCollectionBuilder gcb = RandomShapeGenerator.createGeometryCollection(random())__        double[] pt = new double[] {GeoTestUtil.nextLongitude(), GeoTestUtil.nextLatitude()}__        PointBuilder pb = new PointBuilder(pt[0], pt[1])__        gcb.shape(pb)__        if (randomBoolean()) {_            client().admin().indices().prepareCreate("test").addMapping("type", "location", "type=geo_shape")_                .execute().actionGet()__        } else {_            client().admin().indices().prepareCreate("test").addMapping("type", "location", "type=geo_shape,tree=quadtree")_                .execute().actionGet()__        }_        XContentBuilder docSource = gcb.toXContent(jsonBuilder().startObject().field("location"), null).endObject()__        client().prepareIndex("test", "type", "1").setSource(docSource).setRefreshPolicy(IMMEDIATE).get()___        GeoShapeQueryBuilder geoShapeQueryBuilder = QueryBuilders.geoShapeQuery("location", pb)__        geoShapeQueryBuilder.relation(ShapeRelation.INTERSECTS)__        SearchResponse result = client().prepareSearch("test").setQuery(geoShapeQueryBuilder).get()__        assertSearchResponse(result)__        assertHitCount(result, 1)__    };tests,querying,a,random,geometry,collection,with,a,point;public,void,test,point,query,throws,exception,geometry,collection,builder,gcb,random,shape,generator,create,geometry,collection,random,double,pt,new,double,geo,test,util,next,longitude,geo,test,util,next,latitude,point,builder,pb,new,point,builder,pt,0,pt,1,gcb,shape,pb,if,random,boolean,client,admin,indices,prepare,create,test,add,mapping,type,location,type,execute,action,get,else,client,admin,indices,prepare,create,test,add,mapping,type,location,type,tree,quadtree,execute,action,get,xcontent,builder,doc,source,gcb,to,xcontent,json,builder,start,object,field,location,null,end,object,client,prepare,index,test,type,1,set,source,doc,source,set,refresh,policy,immediate,get,geo,shape,query,builder,geo,shape,query,builder,query,builders,geo,shape,query,location,pb,geo,shape,query,builder,relation,shape,relation,intersects,search,response,result,client,prepare,search,test,set,query,geo,shape,query,builder,get,assert,search,response,result,assert,hit,count,result,1
GeoShapeQueryTests -> public void testPointQuery() throws Exception;1551117379;tests querying a random geometry collection with a point;public void testPointQuery() throws Exception {_        _        GeometryCollectionBuilder gcb = RandomShapeGenerator.createGeometryCollection(random())__        double[] pt = new double[] {GeoTestUtil.nextLongitude(), GeoTestUtil.nextLatitude()}__        PointBuilder pb = new PointBuilder(pt[0], pt[1])__        gcb.shape(pb)__        if (randomBoolean()) {_            client().admin().indices().prepareCreate("test").addMapping("type", "location", "type=geo_shape")_                .execute().actionGet()__        } else {_            client().admin().indices().prepareCreate("test").addMapping("type", "location", "type=geo_shape,tree=quadtree")_                .execute().actionGet()__        }_        XContentBuilder docSource = gcb.toXContent(jsonBuilder().startObject().field("location"), null).endObject()__        client().prepareIndex("test", "type", "1").setSource(docSource).setRefreshPolicy(IMMEDIATE).get()___        GeoShapeQueryBuilder geoShapeQueryBuilder = QueryBuilders.geoShapeQuery("location", pb)__        geoShapeQueryBuilder.relation(ShapeRelation.INTERSECTS)__        SearchResponse result = client().prepareSearch("test").setQuery(geoShapeQueryBuilder).get()__        assertSearchResponse(result)__        assertHitCount(result, 1)__    };tests,querying,a,random,geometry,collection,with,a,point;public,void,test,point,query,throws,exception,geometry,collection,builder,gcb,random,shape,generator,create,geometry,collection,random,double,pt,new,double,geo,test,util,next,longitude,geo,test,util,next,latitude,point,builder,pb,new,point,builder,pt,0,pt,1,gcb,shape,pb,if,random,boolean,client,admin,indices,prepare,create,test,add,mapping,type,location,type,execute,action,get,else,client,admin,indices,prepare,create,test,add,mapping,type,location,type,tree,quadtree,execute,action,get,xcontent,builder,doc,source,gcb,to,xcontent,json,builder,start,object,field,location,null,end,object,client,prepare,index,test,type,1,set,source,doc,source,set,refresh,policy,immediate,get,geo,shape,query,builder,geo,shape,query,builder,query,builders,geo,shape,query,location,pb,geo,shape,query,builder,relation,shape,relation,intersects,search,response,result,client,prepare,search,test,set,query,geo,shape,query,builder,get,assert,search,response,result,assert,hit,count,result,1
