commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;6;;@Override protected InternalSum createTestInstance(String name, List<PipelineAggregator> pipelineAggregators, Map<String, Object> metaData) {     double value = frequently() ? randomDouble() : randomFrom(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, Double.NaN).     DocValueFormat formatter = randomFrom(new DocValueFormat.Decimal("###.##"), DocValueFormat.RAW).     return new InternalSum(name, value, formatter, pipelineAggregators, metaData). }
false;protected;0;4;;@Override protected Writeable.Reader<InternalSum> instanceReader() {     return InternalSum::new. }
false;protected;2;5;;@Override protected void assertReduced(InternalSum reduced, List<InternalSum> inputs) {     double expectedSum = inputs.stream().mapToDouble(InternalSum::getValue).sum().     assertEquals(expectedSum, reduced.getValue(), 0.0001d). }
false;public;0;30;;public void testSummationAccuracy() {     // Summing up a normal array and expect an accurate value     double[] values = new double[] { 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.9, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7 }.     verifySummationOfDoubles(values, 13.5, 0d).     // Summing up an array which contains NaN and infinities and expect a result same as naive summation     int n = randomIntBetween(5, 10).     values = new double[n].     double sum = 0.     for (int i = 0. i < n. i++) {         values[i] = frequently() ? randomFrom(Double.NaN, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY) : randomDoubleBetween(Double.MIN_VALUE, Double.MAX_VALUE, true).         sum += values[i].     }     verifySummationOfDoubles(values, sum, TOLERANCE).     // Summing up some big double values and expect infinity result     n = randomIntBetween(5, 10).     double[] largeValues = new double[n].     for (int i = 0. i < n. i++) {         largeValues[i] = Double.MAX_VALUE.     }     verifySummationOfDoubles(largeValues, Double.POSITIVE_INFINITY, 0d).     for (int i = 0. i < n. i++) {         largeValues[i] = -Double.MAX_VALUE.     }     verifySummationOfDoubles(largeValues, Double.NEGATIVE_INFINITY, 0d). }
false;private;3;9;;private void verifySummationOfDoubles(double[] values, double expected, double delta) {     List<InternalAggregation> aggregations = new ArrayList<>(values.length).     for (double value : values) {         aggregations.add(new InternalSum("dummy1", value, null, null, null)).     }     InternalSum internalSum = new InternalSum("dummy", 0, null, null, null).     InternalSum reduced = internalSum.doReduce(aggregations, null).     assertEquals(expected, reduced.value(), delta). }
false;protected;2;6;;@Override protected void assertFromXContent(InternalSum sum, ParsedAggregation parsedAggregation) {     ParsedSum parsed = ((ParsedSum) parsedAggregation).     assertEquals(sum.getValue(), parsed.getValue(), Double.MIN_VALUE).     assertEquals(sum.getValueAsString(), parsed.getValueAsString()). }
false;protected;1;31;;@Override protected InternalSum mutateInstance(InternalSum instance) {     String name = instance.getName().     double value = instance.getValue().     DocValueFormat formatter = instance.format.     List<PipelineAggregator> pipelineAggregators = instance.pipelineAggregators().     Map<String, Object> metaData = instance.getMetaData().     switch(between(0, 2)) {         case 0:             name += randomAlphaOfLength(5).             break.         case 1:             if (Double.isFinite(value)) {                 value += between(1, 100).             } else {                 value = between(1, 100).             }             break.         case 2:             if (metaData == null) {                 metaData = new HashMap<>(1).             } else {                 metaData = new HashMap<>(instance.getMetaData()).             }             metaData.put(randomAlphaOfLength(15), randomInt()).             break.         default:             throw new AssertionError("Illegal randomisation branch").     }     return new InternalSum(name, value, formatter, pipelineAggregators, metaData). }
