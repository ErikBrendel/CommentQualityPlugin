commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;public void testIndexTemplateInvalidNumberOfShards() {     PutRequest request = new PutRequest("test", "test_shards").     request.patterns(Collections.singletonList("test_shards*")).     request.settings(Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, "0").put("index.shard.check_on_startup", "blargh").build()).     List<Throwable> throwables = putTemplate(xContentRegistry(), request).     assertEquals(throwables.size(), 1).     assertThat(throwables.get(0), instanceOf(InvalidIndexTemplateException.class)).     assertThat(throwables.get(0).getMessage(), containsString("Failed to parse value [0] for setting [index.number_of_shards] must be >= 1")).     assertThat(throwables.get(0).getMessage(), containsString("unknown value for [index.shard.check_on_startup] " + "must be one of [true, false, checksum] but was: blargh")). }
false;public;0;13;;public void testIndexTemplateValidationAccumulatesValidationErrors() {     PutRequest request = new PutRequest("test", "putTemplate shards").     request.patterns(Collections.singletonList("_test_shards*")).     request.settings(Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, "0").build()).     List<Throwable> throwables = putTemplate(xContentRegistry(), request).     assertEquals(throwables.size(), 1).     assertThat(throwables.get(0), instanceOf(InvalidIndexTemplateException.class)).     assertThat(throwables.get(0).getMessage(), containsString("name must not contain a space")).     assertThat(throwables.get(0).getMessage(), containsString("template must not start with '_'")).     assertThat(throwables.get(0).getMessage(), containsString("Failed to parse value [0] for setting [index.number_of_shards] must be >= 1")). }
false;public;0;10;;public void testIndexTemplateWithAliasNameEqualToTemplatePattern() {     PutRequest request = new PutRequest("api", "foobar_template").     request.patterns(Arrays.asList("foo", "foobar")).     request.aliases(Collections.singleton(new Alias("foobar"))).     List<Throwable> errors = putTemplate(xContentRegistry(), request).     assertThat(errors.size(), equalTo(1)).     assertThat(errors.get(0), instanceOf(IllegalArgumentException.class)).     assertThat(errors.get(0).getMessage(), equalTo("Alias [foobar] cannot be the same as any pattern in [foo, foobar]")). }
false;public;0;12;;public void testIndexTemplateWithValidateMapping() throws Exception {     PutRequest request = new PutRequest("api", "validate_template").     request.patterns(Collections.singletonList("te*")).     request.putMapping("type1", Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("field2").field("type", "text").field("analyzer", "custom_1").endObject().endObject().endObject().endObject())).     List<Throwable> errors = putTemplateDetail(request).     assertThat(errors.size(), equalTo(1)).     assertThat(errors.get(0), instanceOf(MapperParsingException.class)).     assertThat(errors.get(0).getMessage(), containsString("analyzer [custom_1] not found for field [field2]")). }
false;public;0;10;;public void testBrokenMapping() throws Exception {     PutRequest request = new PutRequest("api", "broken_mapping").     request.patterns(Collections.singletonList("te*")).     request.putMapping("type1", "abcde").     List<Throwable> errors = putTemplateDetail(request).     assertThat(errors.size(), equalTo(1)).     assertThat(errors.get(0), instanceOf(MapperParsingException.class)).     assertThat(errors.get(0).getMessage(), containsString("Failed to parse mapping ")). }
false;public;0;14;;public void testAliasInvalidFilterInvalidJson() throws Exception {     // invalid json: put index template fails     PutRequest request = new PutRequest("api", "blank_mapping").     request.patterns(Collections.singletonList("te*")).     request.putMapping("type1", "{}").     Set<Alias> aliases = new HashSet<>().     aliases.add(new Alias("invalid_alias").filter("abcde")).     request.aliases(aliases).     List<Throwable> errors = putTemplateDetail(request).     assertThat(errors.size(), equalTo(1)).     assertThat(errors.get(0), instanceOf(IllegalArgumentException.class)).     assertThat(errors.get(0).getMessage(), equalTo("failed to parse filter for alias [invalid_alias]")). }
false;public;0;12;;public void testFindTemplates() throws Exception {     // Delete all existing templates     client().admin().indices().prepareDeleteTemplate("*").get().     putTemplateDetail(new PutRequest("test", "foo-1").patterns(Arrays.asList("foo-*")).order(1)).     putTemplateDetail(new PutRequest("test", "foo-2").patterns(Arrays.asList("foo-*")).order(2)).     putTemplateDetail(new PutRequest("test", "bar").patterns(Arrays.asList("bar-*")).order(between(0, 100))).     final ClusterState state = client().admin().cluster().prepareState().get().getState().     assertThat(MetaDataIndexTemplateService.findTemplates(state.metaData(), "foo-1234").stream().map(IndexTemplateMetaData::name).collect(Collectors.toList()), contains("foo-2", "foo-1")).     assertThat(MetaDataIndexTemplateService.findTemplates(state.metaData(), "bar-xyz").stream().map(IndexTemplateMetaData::name).collect(Collectors.toList()), contains("bar")).     assertThat(MetaDataIndexTemplateService.findTemplates(state.metaData(), "baz"), empty()). }
false;public;1;4;;@Override public void onResponse(MetaDataIndexTemplateService.PutResponse response) { }
false;public;1;4;;@Override public void onFailure(Exception e) {     throwables.add(e). }
false;private,static;2;30;;private static List<Throwable> putTemplate(NamedXContentRegistry xContentRegistry, PutRequest request) {     MetaDataCreateIndexService createIndexService = new MetaDataCreateIndexService(Settings.EMPTY, null, null, null, null, null, IndexScopedSettings.DEFAULT_SCOPED_SETTINGS, null, xContentRegistry, true).     MetaDataIndexTemplateService service = new MetaDataIndexTemplateService(null, createIndexService, new AliasValidator(), null, new IndexScopedSettings(Settings.EMPTY, IndexScopedSettings.BUILT_IN_INDEX_SETTINGS), xContentRegistry).     final List<Throwable> throwables = new ArrayList<>().     service.putTemplate(request, new MetaDataIndexTemplateService.PutListener() {          @Override         public void onResponse(MetaDataIndexTemplateService.PutResponse response) {         }          @Override         public void onFailure(Exception e) {             throwables.add(e).         }     }).     return throwables. }
false;public;1;4;;@Override public void onResponse(MetaDataIndexTemplateService.PutResponse response) {     latch.countDown(). }
false;public;1;5;;@Override public void onFailure(Exception e) {     throwables.add(e).     latch.countDown(). }
false;private;1;35;;private List<Throwable> putTemplateDetail(PutRequest request) throws Exception {     IndicesService indicesService = getInstanceFromNode(IndicesService.class).     ClusterService clusterService = getInstanceFromNode(ClusterService.class).     MetaDataCreateIndexService createIndexService = new MetaDataCreateIndexService(Settings.EMPTY, clusterService, indicesService, null, null, null, null, null, xContentRegistry(), true).     MetaDataIndexTemplateService service = new MetaDataIndexTemplateService(clusterService, createIndexService, new AliasValidator(), indicesService, new IndexScopedSettings(Settings.EMPTY, IndexScopedSettings.BUILT_IN_INDEX_SETTINGS), xContentRegistry()).     final List<Throwable> throwables = new ArrayList<>().     final CountDownLatch latch = new CountDownLatch(1).     service.putTemplate(request, new MetaDataIndexTemplateService.PutListener() {          @Override         public void onResponse(MetaDataIndexTemplateService.PutResponse response) {             latch.countDown().         }          @Override         public void onFailure(Exception e) {             throwables.add(e).             latch.countDown().         }     }).     latch.await().     return throwables. }
