commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected Environment createEnv(Map<String, String> settings) throws UserException {     return env. }
false;protected;0;9;;@Override protected Command newCommand() {     return new RemoveSettingKeyStoreCommand() {          @Override         protected Environment createEnv(Map<String, String> settings) throws UserException {             return env.         }     }. }
false;public;0;5;;public void testMissing() throws Exception {     UserException e = expectThrows(UserException.class, () -> execute("foo")).     assertEquals(ExitCodes.DATA_ERROR, e.exitCode).     assertThat(e.getMessage(), containsString("keystore not found")). }
false;public;0;6;;public void testNoSettings() throws Exception {     createKeystore("").     UserException e = expectThrows(UserException.class, this::execute).     assertEquals(ExitCodes.USAGE, e.exitCode).     assertThat(e.getMessage(), containsString("Must supply at least one setting")). }
false;public;0;6;;public void testNonExistentSetting() throws Exception {     createKeystore("").     UserException e = expectThrows(UserException.class, () -> execute("foo")).     assertEquals(ExitCodes.CONFIG, e.exitCode).     assertThat(e.getMessage(), containsString("[foo] does not exist")). }
false;public;0;5;;public void testOne() throws Exception {     createKeystore("", "foo", "bar").     execute("foo").     assertFalse(loadKeystore("").getSettingNames().contains("foo")). }
false;public;0;9;;public void testMany() throws Exception {     createKeystore("", "foo", "1", "bar", "2", "baz", "3").     execute("foo", "baz").     Set<String> settings = loadKeystore("").getSettingNames().     assertFalse(settings.contains("foo")).     assertFalse(settings.contains("baz")).     assertTrue(settings.contains("bar")).     // account for keystore.seed too     assertEquals(2, settings.size()). }
