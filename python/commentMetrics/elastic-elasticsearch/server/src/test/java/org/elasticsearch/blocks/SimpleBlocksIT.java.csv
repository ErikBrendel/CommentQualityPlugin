commented;modifiers;parameterAmount;loc;comment;code
false;public;0;42;;public void testVerifyIndexAndClusterReadOnly() throws Exception {     // cluster.read_only = null: write and metadata not blocked     canCreateIndex("test1").     canIndexDocument("test1").     setIndexReadOnly("test1", "false").     canIndexExists("test1").     // cluster.read_only = true: block write and metadata     setClusterReadOnly(true).     canNotCreateIndex("test2").     // even if index has index.read_only = false     canNotIndexDocument("test1").     canIndexExists("test1").     // cluster.read_only = false: removes the block     setClusterReadOnly(false).     canCreateIndex("test2").     canIndexDocument("test2").     canIndexDocument("test1").     canIndexExists("test1").     // newly created an index has no blocks     canCreateIndex("ro").     canIndexDocument("ro").     canIndexExists("ro").     // adds index write and metadata block     setIndexReadOnly("ro", "true").     canNotIndexDocument("ro").     canIndexExists("ro").     // other indices not blocked     canCreateIndex("rw").     canIndexDocument("rw").     canIndexExists("rw").     // blocks can be removed     setIndexReadOnly("ro", "false").     canIndexDocument("ro").     canIndexExists("ro"). }
false;public;0;12;;public void testIndexReadWriteMetaDataBlocks() {     canCreateIndex("test1").     canIndexDocument("test1").     client().admin().indices().prepareUpdateSettings("test1").setSettings(Settings.builder().put(IndexMetaData.SETTING_BLOCKS_WRITE, true)).execute().actionGet().     canNotIndexDocument("test1").     client().admin().indices().prepareUpdateSettings("test1").setSettings(Settings.builder().put(IndexMetaData.SETTING_BLOCKS_WRITE, false)).execute().actionGet().     canIndexDocument("test1"). }
false;private;1;8;;private void canCreateIndex(String index) {     try {         CreateIndexResponse r = client().admin().indices().prepareCreate(index).execute().actionGet().         assertThat(r, notNullValue()).     } catch (ClusterBlockException e) {         fail().     } }
false;private;1;8;;private void canNotCreateIndex(String index) {     try {         client().admin().indices().prepareCreate(index).execute().actionGet().         fail().     } catch (ClusterBlockException e) {     // all is well     } }
false;private;1;10;;private void canIndexDocument(String index) {     try {         IndexRequestBuilder builder = client().prepareIndex(index, "zzz").         builder.setSource("foo", "bar").         IndexResponse r = builder.execute().actionGet().         assertThat(r, notNullValue()).     } catch (ClusterBlockException e) {         fail().     } }
false;private;1;10;;private void canNotIndexDocument(String index) {     try {         IndexRequestBuilder builder = client().prepareIndex(index, "zzz").         builder.setSource("foo", "bar").         builder.execute().actionGet().         fail().     } catch (ClusterBlockException e) {     // all is well     } }
false;private;1;8;;private void canIndexExists(String index) {     try {         IndicesExistsResponse r = client().admin().indices().prepareExists(index).execute().actionGet().         assertThat(r, notNullValue()).     } catch (ClusterBlockException e) {         fail().     } }
false;private;2;9;;private void setIndexReadOnly(String index, Object value) {     HashMap<String, Object> newSettings = new HashMap<>().     newSettings.put(IndexMetaData.SETTING_READ_ONLY, value).     UpdateSettingsRequestBuilder settingsRequest = client().admin().indices().prepareUpdateSettings(index).     settingsRequest.setSettings(newSettings).     AcknowledgedResponse settingsResponse = settingsRequest.execute().actionGet().     assertThat(settingsResponse, notNullValue()). }
