commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;5;;@Override protected SpanContainingQueryBuilder doCreateTestQueryBuilder() {     SpanTermQueryBuilder[] spanTermQueries = new SpanTermQueryBuilderTests().createSpanTermQueryBuilders(2).     return new SpanContainingQueryBuilder(spanTermQueries[0], spanTermQueries[1]). }
false;protected;3;4;;@Override protected void doAssertLuceneQuery(SpanContainingQueryBuilder queryBuilder, Query query, SearchContext context) throws IOException {     assertThat(query, instanceOf(SpanContainingQuery.class)). }
false;public;0;5;;public void testIllegalArguments() {     SpanTermQueryBuilder spanTermQuery = new SpanTermQueryBuilder("field", "value").     expectThrows(IllegalArgumentException.class, () -> new SpanContainingQueryBuilder(null, spanTermQuery)).     expectThrows(IllegalArgumentException.class, () -> new SpanContainingQueryBuilder(spanTermQuery, null)). }
false;public;0;45;;public void testFromJson() throws IOException {     String json = "{\n" + "  \"span_containing\" : {\n" + "    \"big\" : {\n" + "      \"span_near\" : {\n" + "        \"clauses\" : [ {\n" + "          \"span_term\" : {\n" + "            \"field1\" : {\n" + "              \"value\" : \"bar\",\n" + "              \"boost\" : 1.0\n" + "            }\n" + "          }\n" + "        }, {\n" + "          \"span_term\" : {\n" + "            \"field1\" : {\n" + "              \"value\" : \"baz\",\n" + "              \"boost\" : 1.0\n" + "            }\n" + "          }\n" + "        } ],\n" + "        \"slop\" : 5,\n" + "        \"in_order\" : true,\n" + "        \"boost\" : 1.0\n" + "      }\n" + "    },\n" + "    \"little\" : {\n" + "      \"span_term\" : {\n" + "        \"field1\" : {\n" + "          \"value\" : \"foo\",\n" + "          \"boost\" : 1.0\n" + "        }\n" + "      }\n" + "    },\n" + "    \"boost\" : 2.0\n" + "  }\n" + "}".     SpanContainingQueryBuilder parsed = (SpanContainingQueryBuilder) parseQuery(json).     checkGeneratedJson(json, parsed).     assertEquals(json, 2, ((SpanNearQueryBuilder) parsed.bigQuery()).clauses().size()).     assertEquals(json, "foo", ((SpanTermQueryBuilder) parsed.littleQuery()).value()).     assertEquals(json, 2.0, parsed.boost(), 0.0). }
false;public;0;42;;public void testFromJsoWithNonDefaultBoostInBigQuery() {     String json = "{\n" + "  \"span_containing\" : {\n" + "    \"big\" : {\n" + "      \"span_near\" : {\n" + "        \"clauses\" : [ {\n" + "          \"span_term\" : {\n" + "            \"field1\" : {\n" + "              \"value\" : \"bar\",\n" + "              \"boost\" : 1.0\n" + "            }\n" + "          }\n" + "        }, {\n" + "          \"span_term\" : {\n" + "            \"field1\" : {\n" + "              \"value\" : \"baz\",\n" + "              \"boost\" : 1.0\n" + "            }\n" + "          }\n" + "        } ],\n" + "        \"slop\" : 5,\n" + "        \"in_order\" : true,\n" + "        \"boost\" : 2.0\n" + "      }\n" + "    },\n" + "    \"little\" : {\n" + "      \"span_term\" : {\n" + "        \"field1\" : {\n" + "          \"value\" : \"foo\",\n" + "          \"boost\" : 1.0\n" + "        }\n" + "      }\n" + "    },\n" + "    \"boost\" : 1.0\n" + "  }\n" + "}".     Exception exception = expectThrows(ParsingException.class, () -> parseQuery(json)).     assertThat(exception.getMessage(), equalTo("span_containing [big] as a nested span clause can't have non-default boost value [2.0]")). }
false;public;0;42;;public void testFromJsonWithNonDefaultBoostInLittleQuery() {     String json = "{\n" + "  \"span_containing\" : {\n" + "    \"little\" : {\n" + "      \"span_near\" : {\n" + "        \"clauses\" : [ {\n" + "          \"span_term\" : {\n" + "            \"field1\" : {\n" + "              \"value\" : \"bar\",\n" + "              \"boost\" : 1.0\n" + "            }\n" + "          }\n" + "        }, {\n" + "          \"span_term\" : {\n" + "            \"field1\" : {\n" + "              \"value\" : \"baz\",\n" + "              \"boost\" : 1.0\n" + "            }\n" + "          }\n" + "        } ],\n" + "        \"slop\" : 5,\n" + "        \"in_order\" : true,\n" + "        \"boost\" : 2.0\n" + "      }\n" + "    },\n" + "    \"big\" : {\n" + "      \"span_term\" : {\n" + "        \"field1\" : {\n" + "          \"value\" : \"foo\",\n" + "          \"boost\" : 1.0\n" + "        }\n" + "      }\n" + "    },\n" + "    \"boost\" : 1.0\n" + "  }\n" + "}".     Exception exception = expectThrows(ParsingException.class, () -> parseQuery(json)).     assertThat(exception.getMessage(), equalTo("span_containing [little] as a nested span clause can't have non-default boost value [2.0]")). }
