commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> getPlugins() {     return pluginList(InternalSettingsPlugin.class). }
false;protected;0;4;;@Override protected boolean forbidPrivateIndexSettings() {     return false. }
false;public;0;48;;public void testExternalValues() throws Exception {     Version version = VersionUtils.randomVersionBetween(random(), Version.V_6_0_0, Version.CURRENT).     Settings settings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, version).build().     IndexService indexService = createIndex("test", settings).     MapperRegistry mapperRegistry = new MapperRegistry(singletonMap(ExternalMapperPlugin.EXTERNAL, new ExternalMapper.TypeParser(ExternalMapperPlugin.EXTERNAL, "foo")), singletonMap(ExternalMetadataMapper.CONTENT_TYPE, new ExternalMetadataMapper.TypeParser()), MapperPlugin.NOOP_FIELD_FILTER).     Supplier<QueryShardContext> queryShardContext = () -> {         return indexService.newQueryShardContext(0, null, () -> {             throw new UnsupportedOperationException().         }, null).     }.     DocumentMapperParser parser = new DocumentMapperParser(indexService.getIndexSettings(), indexService.mapperService(), indexService.getIndexAnalyzers(), indexService.xContentRegistry(), indexService.similarityService(), mapperRegistry, queryShardContext).     DocumentMapper documentMapper = parser.parse("type", new CompressedXContent(Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject(ExternalMetadataMapper.CONTENT_TYPE).endObject().startObject("properties").startObject("field").field("type", "external").endObject().endObject().endObject().endObject()))).     ParsedDocument doc = documentMapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field", "1234").endObject()), XContentType.JSON)).     assertThat(doc.rootDoc().getField("field.bool"), notNullValue()).     assertThat(doc.rootDoc().getField("field.bool").stringValue(), is("T")).     assertThat(doc.rootDoc().getField("field.point"), notNullValue()).     GeoPoint point = new GeoPoint().resetFromIndexableField(doc.rootDoc().getField("field.point")).     assertThat(point.lat(), closeTo(42.0, 1e-5)).     assertThat(point.lon(), closeTo(51.0, 1e-5)).     assertThat(doc.rootDoc().getField("field.shape"), notNullValue()).     assertThat(doc.rootDoc().getField("field.field"), notNullValue()).     assertThat(doc.rootDoc().getField("field.field").stringValue(), is("foo")).     assertThat(doc.rootDoc().getField(ExternalMetadataMapper.FIELD_NAME).stringValue(), is(ExternalMetadataMapper.FIELD_VALUE)). }
false;public;0;62;;public void testExternalValuesWithMultifield() throws Exception {     IndexService indexService = createIndex("test").     Map<String, Mapper.TypeParser> mapperParsers = new HashMap<>().     mapperParsers.put(ExternalMapperPlugin.EXTERNAL, new ExternalMapper.TypeParser(ExternalMapperPlugin.EXTERNAL, "foo")).     mapperParsers.put(TextFieldMapper.CONTENT_TYPE, new TextFieldMapper.TypeParser()).     mapperParsers.put(KeywordFieldMapper.CONTENT_TYPE, new KeywordFieldMapper.TypeParser()).     MapperRegistry mapperRegistry = new MapperRegistry(mapperParsers, Collections.emptyMap(), MapperPlugin.NOOP_FIELD_FILTER).     Supplier<QueryShardContext> queryShardContext = () -> {         return indexService.newQueryShardContext(0, null, () -> {             throw new UnsupportedOperationException().         }, null).     }.     DocumentMapperParser parser = new DocumentMapperParser(indexService.getIndexSettings(), indexService.mapperService(), indexService.getIndexAnalyzers(), indexService.xContentRegistry(), indexService.similarityService(), mapperRegistry, queryShardContext).     DocumentMapper documentMapper = parser.parse("type", new CompressedXContent(Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", ExternalMapperPlugin.EXTERNAL).startObject("fields").startObject("field").field("type", "text").field("store", true).startObject("fields").startObject("raw").field("type", "keyword").field("store", true).endObject().endObject().endObject().endObject().endObject().endObject().endObject().endObject()))).     ParsedDocument doc = documentMapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field", "1234").endObject()), XContentType.JSON)).     assertThat(doc.rootDoc().getField("field.bool"), notNullValue()).     assertThat(doc.rootDoc().getField("field.bool").stringValue(), is("T")).     assertThat(doc.rootDoc().getField("field.point"), notNullValue()).     GeoPoint point = new GeoPoint().resetFromIndexableField(doc.rootDoc().getField("field.point")).     assertThat(point.lat(), closeTo(42.0, 1E-5)).     assertThat(point.lon(), closeTo(51.0, 1E-5)).     IndexableField shape = doc.rootDoc().getField("field.shape").     assertThat(shape, notNullValue()).     IndexableField field = doc.rootDoc().getField("field.field").     assertThat(field, notNullValue()).     assertThat(field.stringValue(), is("foo")).     IndexableField raw = doc.rootDoc().getField("field.field.raw").     assertThat(raw, notNullValue()).     assertThat(raw.binaryValue(), is(new BytesRef("foo"))). }
false;public;0;65;;public void testExternalValuesWithMultifieldTwoLevels() throws Exception {     IndexService indexService = createIndex("test").     Map<String, Mapper.TypeParser> mapperParsers = new HashMap<>().     mapperParsers.put(ExternalMapperPlugin.EXTERNAL, new ExternalMapper.TypeParser(ExternalMapperPlugin.EXTERNAL, "foo")).     mapperParsers.put(ExternalMapperPlugin.EXTERNAL_BIS, new ExternalMapper.TypeParser(ExternalMapperPlugin.EXTERNAL, "bar")).     mapperParsers.put(TextFieldMapper.CONTENT_TYPE, new TextFieldMapper.TypeParser()).     MapperRegistry mapperRegistry = new MapperRegistry(mapperParsers, Collections.emptyMap(), MapperPlugin.NOOP_FIELD_FILTER).     Supplier<QueryShardContext> queryShardContext = () -> {         return indexService.newQueryShardContext(0, null, () -> {             throw new UnsupportedOperationException().         }, null).     }.     DocumentMapperParser parser = new DocumentMapperParser(indexService.getIndexSettings(), indexService.mapperService(), indexService.getIndexAnalyzers(), indexService.xContentRegistry(), indexService.similarityService(), mapperRegistry, queryShardContext).     DocumentMapper documentMapper = parser.parse("type", new CompressedXContent(Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", ExternalMapperPlugin.EXTERNAL).startObject("fields").startObject("field").field("type", "text").startObject("fields").startObject("generated").field("type", ExternalMapperPlugin.EXTERNAL_BIS).endObject().startObject("raw").field("type", "text").endObject().endObject().endObject().startObject("raw").field("type", "text").endObject().endObject().endObject().endObject().endObject().endObject()))).     ParsedDocument doc = documentMapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field", "1234").endObject()), XContentType.JSON)).     assertThat(doc.rootDoc().getField("field.bool"), notNullValue()).     assertThat(doc.rootDoc().getField("field.bool").stringValue(), is("T")).     assertThat(doc.rootDoc().getField("field.point"), notNullValue()).     assertThat(doc.rootDoc().getField("field.shape"), notNullValue()).     assertThat(doc.rootDoc().getField("field.field"), notNullValue()).     assertThat(doc.rootDoc().getField("field.field").stringValue(), is("foo")).     assertThat(doc.rootDoc().getField("field.field.generated.generated"), notNullValue()).     assertThat(doc.rootDoc().getField("field.field.generated.generated").stringValue(), is("bar")).     assertThat(doc.rootDoc().getField("field.field.raw"), notNullValue()).     assertThat(doc.rootDoc().getField("field.field.raw").stringValue(), is("foo")).     assertThat(doc.rootDoc().getField("field.raw"), notNullValue()).     assertThat(doc.rootDoc().getField("field.raw").stringValue(), is("foo")). }
