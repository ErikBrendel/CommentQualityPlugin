# id;timestamp;commentText;codeText;commentWords;codeWords
DiscoveryDisruptionIT -> @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/37685")     public void testClusterJoinDespiteOfPublishingIssues() throws Exception;1548145883;Test cluster join with issues in cluster state publishing *;@AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/37685")_    public void testClusterJoinDespiteOfPublishingIssues() throws Exception {_        String masterNode = internalCluster().startMasterOnlyNode()__        String nonMasterNode = internalCluster().startDataOnlyNode()___        DiscoveryNodes discoveryNodes = internalCluster().getInstance(ClusterService.class, nonMasterNode).state().nodes()___        TransportService masterTranspotService =_                internalCluster().getInstance(TransportService.class, discoveryNodes.getMasterNode().getName())___        logger.info("blocking requests from non master [{}] to master [{}]", nonMasterNode, masterNode)__        MockTransportService nonMasterTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class,_                nonMasterNode)__        nonMasterTransportService.addFailToSendNoConnectRule(masterTranspotService)___        assertNoMaster(nonMasterNode)___        logger.info("blocking cluster state publishing from master [{}] to non master [{}]", masterNode, nonMasterNode)__        MockTransportService masterTransportService =_                (MockTransportService) internalCluster().getInstance(TransportService.class, masterNode)__        TransportService localTransportService =_                internalCluster().getInstance(TransportService.class, discoveryNodes.getLocalNode().getName())__        if (randomBoolean()) {_            masterTransportService.addFailToSendNoConnectRule(localTransportService, PublishClusterStateAction.SEND_ACTION_NAME,_                PublicationTransportHandler.PUBLISH_STATE_ACTION_NAME)__        } else {_            masterTransportService.addFailToSendNoConnectRule(localTransportService, PublishClusterStateAction.COMMIT_ACTION_NAME,_                PublicationTransportHandler.COMMIT_STATE_ACTION_NAME)__        }__        logger.info("allowing requests from non master [{}] to master [{}], waiting for two join request", nonMasterNode, masterNode)__        final CountDownLatch countDownLatch = new CountDownLatch(2)__        nonMasterTransportService.addSendBehavior(masterTransportService, (connection, requestId, action, request, options) -> {_            if (action.equals(MembershipAction.DISCOVERY_JOIN_ACTION_NAME) ||_                action.equals(JoinHelper.JOIN_ACTION_NAME)) {_                countDownLatch.countDown()__            }_            connection.sendRequest(requestId, action, request, options)__        })___        nonMasterTransportService.addConnectBehavior(masterTransportService, Transport::openConnection)___        countDownLatch.await()___        logger.info("waiting for cluster to reform")__        masterTransportService.clearRule(localTransportService)__        nonMasterTransportService.clearRule(localTransportService)___        ensureStableCluster(2)___        _        _        internalCluster().stopRandomNonMasterNode()__    };test,cluster,join,with,issues,in,cluster,state,publishing;awaits,fix,bug,url,https,github,com,elastic,elasticsearch,issues,37685,public,void,test,cluster,join,despite,of,publishing,issues,throws,exception,string,master,node,internal,cluster,start,master,only,node,string,non,master,node,internal,cluster,start,data,only,node,discovery,nodes,discovery,nodes,internal,cluster,get,instance,cluster,service,class,non,master,node,state,nodes,transport,service,master,transpot,service,internal,cluster,get,instance,transport,service,class,discovery,nodes,get,master,node,get,name,logger,info,blocking,requests,from,non,master,to,master,non,master,node,master,node,mock,transport,service,non,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,non,master,node,non,master,transport,service,add,fail,to,send,no,connect,rule,master,transpot,service,assert,no,master,non,master,node,logger,info,blocking,cluster,state,publishing,from,master,to,non,master,master,node,non,master,node,mock,transport,service,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,master,node,transport,service,local,transport,service,internal,cluster,get,instance,transport,service,class,discovery,nodes,get,local,node,get,name,if,random,boolean,master,transport,service,add,fail,to,send,no,connect,rule,local,transport,service,publish,cluster,state,action,publication,transport,handler,else,master,transport,service,add,fail,to,send,no,connect,rule,local,transport,service,publish,cluster,state,action,publication,transport,handler,logger,info,allowing,requests,from,non,master,to,master,waiting,for,two,join,request,non,master,node,master,node,final,count,down,latch,count,down,latch,new,count,down,latch,2,non,master,transport,service,add,send,behavior,master,transport,service,connection,request,id,action,request,options,if,action,equals,membership,action,action,equals,join,helper,count,down,latch,count,down,connection,send,request,request,id,action,request,options,non,master,transport,service,add,connect,behavior,master,transport,service,transport,open,connection,count,down,latch,await,logger,info,waiting,for,cluster,to,reform,master,transport,service,clear,rule,local,transport,service,non,master,transport,service,clear,rule,local,transport,service,ensure,stable,cluster,2,internal,cluster,stop,random,non,master,node
DiscoveryDisruptionIT -> @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/37685")     public void testClusterJoinDespiteOfPublishingIssues() throws Exception;1548147027;Test cluster join with issues in cluster state publishing *;@AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/37685")_    public void testClusterJoinDespiteOfPublishingIssues() throws Exception {_        String masterNode = internalCluster().startMasterOnlyNode()__        String nonMasterNode = internalCluster().startDataOnlyNode()___        DiscoveryNodes discoveryNodes = internalCluster().getInstance(ClusterService.class, nonMasterNode).state().nodes()___        TransportService masterTranspotService =_                internalCluster().getInstance(TransportService.class, discoveryNodes.getMasterNode().getName())___        logger.info("blocking requests from non master [{}] to master [{}]", nonMasterNode, masterNode)__        MockTransportService nonMasterTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class,_                nonMasterNode)__        nonMasterTransportService.addFailToSendNoConnectRule(masterTranspotService)___        assertNoMaster(nonMasterNode)___        logger.info("blocking cluster state publishing from master [{}] to non master [{}]", masterNode, nonMasterNode)__        MockTransportService masterTransportService =_                (MockTransportService) internalCluster().getInstance(TransportService.class, masterNode)__        TransportService localTransportService =_                internalCluster().getInstance(TransportService.class, discoveryNodes.getLocalNode().getName())__        if (randomBoolean()) {_            masterTransportService.addFailToSendNoConnectRule(localTransportService, PublishClusterStateAction.SEND_ACTION_NAME,_                PublicationTransportHandler.PUBLISH_STATE_ACTION_NAME)__        } else {_            masterTransportService.addFailToSendNoConnectRule(localTransportService, PublishClusterStateAction.COMMIT_ACTION_NAME,_                PublicationTransportHandler.COMMIT_STATE_ACTION_NAME)__        }__        logger.info("allowing requests from non master [{}] to master [{}], waiting for two join request", nonMasterNode, masterNode)__        final CountDownLatch countDownLatch = new CountDownLatch(2)__        nonMasterTransportService.addSendBehavior(masterTransportService, (connection, requestId, action, request, options) -> {_            if (action.equals(MembershipAction.DISCOVERY_JOIN_ACTION_NAME) ||_                action.equals(JoinHelper.JOIN_ACTION_NAME)) {_                countDownLatch.countDown()__            }_            connection.sendRequest(requestId, action, request, options)__        })___        nonMasterTransportService.addConnectBehavior(masterTransportService, Transport::openConnection)___        countDownLatch.await()___        logger.info("waiting for cluster to reform")__        masterTransportService.clearRule(localTransportService)__        nonMasterTransportService.clearRule(localTransportService)___        ensureStableCluster(2)___        _        _        internalCluster().stopRandomNonMasterNode()__    };test,cluster,join,with,issues,in,cluster,state,publishing;awaits,fix,bug,url,https,github,com,elastic,elasticsearch,issues,37685,public,void,test,cluster,join,despite,of,publishing,issues,throws,exception,string,master,node,internal,cluster,start,master,only,node,string,non,master,node,internal,cluster,start,data,only,node,discovery,nodes,discovery,nodes,internal,cluster,get,instance,cluster,service,class,non,master,node,state,nodes,transport,service,master,transpot,service,internal,cluster,get,instance,transport,service,class,discovery,nodes,get,master,node,get,name,logger,info,blocking,requests,from,non,master,to,master,non,master,node,master,node,mock,transport,service,non,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,non,master,node,non,master,transport,service,add,fail,to,send,no,connect,rule,master,transpot,service,assert,no,master,non,master,node,logger,info,blocking,cluster,state,publishing,from,master,to,non,master,master,node,non,master,node,mock,transport,service,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,master,node,transport,service,local,transport,service,internal,cluster,get,instance,transport,service,class,discovery,nodes,get,local,node,get,name,if,random,boolean,master,transport,service,add,fail,to,send,no,connect,rule,local,transport,service,publish,cluster,state,action,publication,transport,handler,else,master,transport,service,add,fail,to,send,no,connect,rule,local,transport,service,publish,cluster,state,action,publication,transport,handler,logger,info,allowing,requests,from,non,master,to,master,waiting,for,two,join,request,non,master,node,master,node,final,count,down,latch,count,down,latch,new,count,down,latch,2,non,master,transport,service,add,send,behavior,master,transport,service,connection,request,id,action,request,options,if,action,equals,membership,action,action,equals,join,helper,count,down,latch,count,down,connection,send,request,request,id,action,request,options,non,master,transport,service,add,connect,behavior,master,transport,service,transport,open,connection,count,down,latch,await,logger,info,waiting,for,cluster,to,reform,master,transport,service,clear,rule,local,transport,service,non,master,transport,service,clear,rule,local,transport,service,ensure,stable,cluster,2,internal,cluster,stop,random,non,master,node
DiscoveryDisruptionIT -> @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/37685")     public void testClusterJoinDespiteOfPublishingIssues() throws Exception;1549094096;Test cluster join with issues in cluster state publishing *;@AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/37685")_    public void testClusterJoinDespiteOfPublishingIssues() throws Exception {_        String masterNode = internalCluster().startMasterOnlyNode()__        String nonMasterNode = internalCluster().startDataOnlyNode()___        DiscoveryNodes discoveryNodes = internalCluster().getInstance(ClusterService.class, nonMasterNode).state().nodes()___        TransportService masterTranspotService =_                internalCluster().getInstance(TransportService.class, discoveryNodes.getMasterNode().getName())___        logger.info("blocking requests from non master [{}] to master [{}]", nonMasterNode, masterNode)__        MockTransportService nonMasterTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class,_                nonMasterNode)__        nonMasterTransportService.addFailToSendNoConnectRule(masterTranspotService)___        assertNoMaster(nonMasterNode)___        logger.info("blocking cluster state publishing from master [{}] to non master [{}]", masterNode, nonMasterNode)__        MockTransportService masterTransportService =_                (MockTransportService) internalCluster().getInstance(TransportService.class, masterNode)__        TransportService localTransportService =_                internalCluster().getInstance(TransportService.class, discoveryNodes.getLocalNode().getName())__        if (randomBoolean()) {_            masterTransportService.addFailToSendNoConnectRule(localTransportService, PublishClusterStateAction.SEND_ACTION_NAME,_                PublicationTransportHandler.PUBLISH_STATE_ACTION_NAME)__        } else {_            masterTransportService.addFailToSendNoConnectRule(localTransportService, PublishClusterStateAction.COMMIT_ACTION_NAME,_                PublicationTransportHandler.COMMIT_STATE_ACTION_NAME)__        }__        logger.info("allowing requests from non master [{}] to master [{}], waiting for two join request", nonMasterNode, masterNode)__        final CountDownLatch countDownLatch = new CountDownLatch(2)__        nonMasterTransportService.addSendBehavior(masterTransportService, (connection, requestId, action, request, options) -> {_            if (action.equals(MembershipAction.DISCOVERY_JOIN_ACTION_NAME) ||_                action.equals(JoinHelper.JOIN_ACTION_NAME)) {_                countDownLatch.countDown()__            }_            connection.sendRequest(requestId, action, request, options)__        })___        nonMasterTransportService.addConnectBehavior(masterTransportService, Transport::openConnection)___        countDownLatch.await()___        logger.info("waiting for cluster to reform")__        masterTransportService.clearRule(localTransportService)__        nonMasterTransportService.clearRule(localTransportService)___        ensureStableCluster(2)___        _        _        internalCluster().stopRandomNonMasterNode()__    };test,cluster,join,with,issues,in,cluster,state,publishing;awaits,fix,bug,url,https,github,com,elastic,elasticsearch,issues,37685,public,void,test,cluster,join,despite,of,publishing,issues,throws,exception,string,master,node,internal,cluster,start,master,only,node,string,non,master,node,internal,cluster,start,data,only,node,discovery,nodes,discovery,nodes,internal,cluster,get,instance,cluster,service,class,non,master,node,state,nodes,transport,service,master,transpot,service,internal,cluster,get,instance,transport,service,class,discovery,nodes,get,master,node,get,name,logger,info,blocking,requests,from,non,master,to,master,non,master,node,master,node,mock,transport,service,non,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,non,master,node,non,master,transport,service,add,fail,to,send,no,connect,rule,master,transpot,service,assert,no,master,non,master,node,logger,info,blocking,cluster,state,publishing,from,master,to,non,master,master,node,non,master,node,mock,transport,service,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,master,node,transport,service,local,transport,service,internal,cluster,get,instance,transport,service,class,discovery,nodes,get,local,node,get,name,if,random,boolean,master,transport,service,add,fail,to,send,no,connect,rule,local,transport,service,publish,cluster,state,action,publication,transport,handler,else,master,transport,service,add,fail,to,send,no,connect,rule,local,transport,service,publish,cluster,state,action,publication,transport,handler,logger,info,allowing,requests,from,non,master,to,master,waiting,for,two,join,request,non,master,node,master,node,final,count,down,latch,count,down,latch,new,count,down,latch,2,non,master,transport,service,add,send,behavior,master,transport,service,connection,request,id,action,request,options,if,action,equals,membership,action,action,equals,join,helper,count,down,latch,count,down,connection,send,request,request,id,action,request,options,non,master,transport,service,add,connect,behavior,master,transport,service,transport,open,connection,count,down,latch,await,logger,info,waiting,for,cluster,to,reform,master,transport,service,clear,rule,local,transport,service,non,master,transport,service,clear,rule,local,transport,service,ensure,stable,cluster,2,internal,cluster,stop,random,non,master,node
DiscoveryDisruptionIT -> public void testUnicastSinglePingResponseContainsMaster() throws Exception;1524684173;A 4 node cluster with m_m_n set to 3 and each node has one unicast endpoint. One node partitions from the master node._The temporal unicast responses is empty. When partition is solved the one ping response contains a master node._The rejoining node should take this master node and connect.;public void testUnicastSinglePingResponseContainsMaster() throws Exception {_        List<String> nodes = startCluster(4, -1, new int[]{0})__        _        final String masterNode = internalCluster().getMasterName()__        logger.info("---> legit elected master node={}", masterNode)__        List<String> otherNodes = new ArrayList<>(nodes)__        otherNodes.remove(masterNode)__        otherNodes.remove(nodes.get(0))_ _        final String isolatedNode = otherNodes.get(0)___        _        _        ZenPing zenPing = ((TestZenDiscovery) internalCluster().getInstance(Discovery.class)).getZenPing()__        if (zenPing instanceof UnicastZenPing) {_            ((UnicastZenPing) zenPing).clearTemporalResponses()__        }__        _        NetworkDisruption networkDisconnect = new NetworkDisruption(new TwoPartitions(masterNode, isolatedNode),_                new NetworkDisconnect())__        setDisruptionScheme(networkDisconnect)__        networkDisconnect.startDisrupting()__        _        ensureStableCluster(3, masterNode)___        _        assertNoMaster(isolatedNode)__        networkDisconnect.stopDisrupting()__        _        ensureStableCluster(4)__        _        _        assertMaster(masterNode, nodes)__    };a,4,node,cluster,with,set,to,3,and,each,node,has,one,unicast,endpoint,one,node,partitions,from,the,master,node,the,temporal,unicast,responses,is,empty,when,partition,is,solved,the,one,ping,response,contains,a,master,node,the,rejoining,node,should,take,this,master,node,and,connect;public,void,test,unicast,single,ping,response,contains,master,throws,exception,list,string,nodes,start,cluster,4,1,new,int,0,final,string,master,node,internal,cluster,get,master,name,logger,info,legit,elected,master,node,master,node,list,string,other,nodes,new,array,list,nodes,other,nodes,remove,master,node,other,nodes,remove,nodes,get,0,final,string,isolated,node,other,nodes,get,0,zen,ping,zen,ping,test,zen,discovery,internal,cluster,get,instance,discovery,class,get,zen,ping,if,zen,ping,instanceof,unicast,zen,ping,unicast,zen,ping,zen,ping,clear,temporal,responses,network,disruption,network,disconnect,new,network,disruption,new,two,partitions,master,node,isolated,node,new,network,disconnect,set,disruption,scheme,network,disconnect,network,disconnect,start,disrupting,ensure,stable,cluster,3,master,node,assert,no,master,isolated,node,network,disconnect,stop,disrupting,ensure,stable,cluster,4,assert,master,master,node,nodes
DiscoveryDisruptionIT -> public void testUnicastSinglePingResponseContainsMaster() throws Exception;1527096592;A 4 node cluster with m_m_n set to 3 and each node has one unicast endpoint. One node partitions from the master node._The temporal unicast responses is empty. When partition is solved the one ping response contains a master node._The rejoining node should take this master node and connect.;public void testUnicastSinglePingResponseContainsMaster() throws Exception {_        List<String> nodes = startCluster(4, -1, new int[]{0})__        _        final String masterNode = internalCluster().getMasterName()__        logger.info("---> legit elected master node={}", masterNode)__        List<String> otherNodes = new ArrayList<>(nodes)__        otherNodes.remove(masterNode)__        otherNodes.remove(nodes.get(0))_ _        final String isolatedNode = otherNodes.get(0)___        _        _        ZenPing zenPing = ((TestZenDiscovery) internalCluster().getInstance(Discovery.class)).getZenPing()__        if (zenPing instanceof UnicastZenPing) {_            ((UnicastZenPing) zenPing).clearTemporalResponses()__        }__        _        NetworkDisruption networkDisconnect = new NetworkDisruption(new TwoPartitions(masterNode, isolatedNode),_                new NetworkDisconnect())__        setDisruptionScheme(networkDisconnect)__        networkDisconnect.startDisrupting()__        _        ensureStableCluster(3, masterNode)___        _        assertNoMaster(isolatedNode)__        networkDisconnect.stopDisrupting()__        _        ensureStableCluster(4)__        _        _        assertMaster(masterNode, nodes)__    };a,4,node,cluster,with,set,to,3,and,each,node,has,one,unicast,endpoint,one,node,partitions,from,the,master,node,the,temporal,unicast,responses,is,empty,when,partition,is,solved,the,one,ping,response,contains,a,master,node,the,rejoining,node,should,take,this,master,node,and,connect;public,void,test,unicast,single,ping,response,contains,master,throws,exception,list,string,nodes,start,cluster,4,1,new,int,0,final,string,master,node,internal,cluster,get,master,name,logger,info,legit,elected,master,node,master,node,list,string,other,nodes,new,array,list,nodes,other,nodes,remove,master,node,other,nodes,remove,nodes,get,0,final,string,isolated,node,other,nodes,get,0,zen,ping,zen,ping,test,zen,discovery,internal,cluster,get,instance,discovery,class,get,zen,ping,if,zen,ping,instanceof,unicast,zen,ping,unicast,zen,ping,zen,ping,clear,temporal,responses,network,disruption,network,disconnect,new,network,disruption,new,two,partitions,master,node,isolated,node,new,network,disconnect,set,disruption,scheme,network,disconnect,network,disconnect,start,disrupting,ensure,stable,cluster,3,master,node,assert,no,master,isolated,node,network,disconnect,stop,disrupting,ensure,stable,cluster,4,assert,master,master,node,nodes
DiscoveryDisruptionIT -> public void testUnicastSinglePingResponseContainsMaster() throws Exception;1534203100;A 4 node cluster with m_m_n set to 3 and each node has one unicast endpoint. One node partitions from the master node._The temporal unicast responses is empty. When partition is solved the one ping response contains a master node._The rejoining node should take this master node and connect.;public void testUnicastSinglePingResponseContainsMaster() throws Exception {_        List<String> nodes = startCluster(4, -1, new int[]{0})__        _        final String masterNode = internalCluster().getMasterName()__        logger.info("---> legit elected master node={}", masterNode)__        List<String> otherNodes = new ArrayList<>(nodes)__        otherNodes.remove(masterNode)__        otherNodes.remove(nodes.get(0))_ _        final String isolatedNode = otherNodes.get(0)___        _        _        ZenPing zenPing = ((TestZenDiscovery) internalCluster().getInstance(Discovery.class)).getZenPing()__        if (zenPing instanceof UnicastZenPing) {_            ((UnicastZenPing) zenPing).clearTemporalResponses()__        }__        _        NetworkDisruption networkDisconnect = new NetworkDisruption(new TwoPartitions(masterNode, isolatedNode),_                new NetworkDisconnect())__        setDisruptionScheme(networkDisconnect)__        networkDisconnect.startDisrupting()__        _        ensureStableCluster(3, masterNode)___        _        assertNoMaster(isolatedNode)__        networkDisconnect.stopDisrupting()__        _        ensureStableCluster(4)__        _        _        assertMaster(masterNode, nodes)__    };a,4,node,cluster,with,set,to,3,and,each,node,has,one,unicast,endpoint,one,node,partitions,from,the,master,node,the,temporal,unicast,responses,is,empty,when,partition,is,solved,the,one,ping,response,contains,a,master,node,the,rejoining,node,should,take,this,master,node,and,connect;public,void,test,unicast,single,ping,response,contains,master,throws,exception,list,string,nodes,start,cluster,4,1,new,int,0,final,string,master,node,internal,cluster,get,master,name,logger,info,legit,elected,master,node,master,node,list,string,other,nodes,new,array,list,nodes,other,nodes,remove,master,node,other,nodes,remove,nodes,get,0,final,string,isolated,node,other,nodes,get,0,zen,ping,zen,ping,test,zen,discovery,internal,cluster,get,instance,discovery,class,get,zen,ping,if,zen,ping,instanceof,unicast,zen,ping,unicast,zen,ping,zen,ping,clear,temporal,responses,network,disruption,network,disconnect,new,network,disruption,new,two,partitions,master,node,isolated,node,new,network,disconnect,set,disruption,scheme,network,disconnect,network,disconnect,start,disrupting,ensure,stable,cluster,3,master,node,assert,no,master,isolated,node,network,disconnect,stop,disrupting,ensure,stable,cluster,4,assert,master,master,node,nodes
DiscoveryDisruptionIT -> public void testUnicastSinglePingResponseContainsMaster() throws Exception;1539723533;A 4 node cluster with m_m_n set to 3 and each node has one unicast endpoint. One node partitions from the master node._The temporal unicast responses is empty. When partition is solved the one ping response contains a master node._The rejoining node should take this master node and connect.;public void testUnicastSinglePingResponseContainsMaster() throws Exception {_        internalCluster().setHostsListContainsOnlyFirstNode(true)__        List<String> nodes = startCluster(4, -1)__        _        final String masterNode = internalCluster().getMasterName()__        logger.info("---> legit elected master node={}", masterNode)__        List<String> otherNodes = new ArrayList<>(nodes)__        otherNodes.remove(masterNode)__        otherNodes.remove(nodes.get(0))_ _        final String isolatedNode = otherNodes.get(0)___        _        _        ZenPing zenPing = ((TestZenDiscovery) internalCluster().getInstance(Discovery.class)).getZenPing()__        if (zenPing instanceof UnicastZenPing) {_            ((UnicastZenPing) zenPing).clearTemporalResponses()__        }__        _        NetworkDisruption networkDisconnect = new NetworkDisruption(new TwoPartitions(masterNode, isolatedNode),_                new NetworkDisconnect())__        setDisruptionScheme(networkDisconnect)__        networkDisconnect.startDisrupting()__        _        ensureStableCluster(3, masterNode)___        _        assertNoMaster(isolatedNode)__        networkDisconnect.stopDisrupting()__        _        ensureStableCluster(4)__        _        _        assertMaster(masterNode, nodes)__    };a,4,node,cluster,with,set,to,3,and,each,node,has,one,unicast,endpoint,one,node,partitions,from,the,master,node,the,temporal,unicast,responses,is,empty,when,partition,is,solved,the,one,ping,response,contains,a,master,node,the,rejoining,node,should,take,this,master,node,and,connect;public,void,test,unicast,single,ping,response,contains,master,throws,exception,internal,cluster,set,hosts,list,contains,only,first,node,true,list,string,nodes,start,cluster,4,1,final,string,master,node,internal,cluster,get,master,name,logger,info,legit,elected,master,node,master,node,list,string,other,nodes,new,array,list,nodes,other,nodes,remove,master,node,other,nodes,remove,nodes,get,0,final,string,isolated,node,other,nodes,get,0,zen,ping,zen,ping,test,zen,discovery,internal,cluster,get,instance,discovery,class,get,zen,ping,if,zen,ping,instanceof,unicast,zen,ping,unicast,zen,ping,zen,ping,clear,temporal,responses,network,disruption,network,disconnect,new,network,disruption,new,two,partitions,master,node,isolated,node,new,network,disconnect,set,disruption,scheme,network,disconnect,network,disconnect,start,disrupting,ensure,stable,cluster,3,master,node,assert,no,master,isolated,node,network,disconnect,stop,disrupting,ensure,stable,cluster,4,assert,master,master,node,nodes
DiscoveryDisruptionIT -> public void testUnicastSinglePingResponseContainsMaster() throws Exception;1541008027;A 4 node cluster with m_m_n set to 3 and each node has one unicast endpoint. One node partitions from the master node._The temporal unicast responses is empty. When partition is solved the one ping response contains a master node._The rejoining node should take this master node and connect.;public void testUnicastSinglePingResponseContainsMaster() throws Exception {_        internalCluster().setHostsListContainsOnlyFirstNode(true)__        List<String> nodes = startCluster(4)__        _        final String masterNode = internalCluster().getMasterName()__        logger.info("---> legit elected master node={}", masterNode)__        List<String> otherNodes = new ArrayList<>(nodes)__        otherNodes.remove(masterNode)__        otherNodes.remove(nodes.get(0))_ _        final String isolatedNode = otherNodes.get(0)___        _        _        ZenPing zenPing = ((TestZenDiscovery) internalCluster().getInstance(Discovery.class)).getZenPing()__        if (zenPing instanceof UnicastZenPing) {_            ((UnicastZenPing) zenPing).clearTemporalResponses()__        }__        _        NetworkDisruption networkDisconnect = new NetworkDisruption(new TwoPartitions(masterNode, isolatedNode),_                new NetworkDisconnect())__        setDisruptionScheme(networkDisconnect)__        networkDisconnect.startDisrupting()__        _        ensureStableCluster(3, masterNode)___        _        assertNoMaster(isolatedNode)__        networkDisconnect.stopDisrupting()__        _        ensureStableCluster(4)__        _        _        assertMaster(masterNode, nodes)__    };a,4,node,cluster,with,set,to,3,and,each,node,has,one,unicast,endpoint,one,node,partitions,from,the,master,node,the,temporal,unicast,responses,is,empty,when,partition,is,solved,the,one,ping,response,contains,a,master,node,the,rejoining,node,should,take,this,master,node,and,connect;public,void,test,unicast,single,ping,response,contains,master,throws,exception,internal,cluster,set,hosts,list,contains,only,first,node,true,list,string,nodes,start,cluster,4,final,string,master,node,internal,cluster,get,master,name,logger,info,legit,elected,master,node,master,node,list,string,other,nodes,new,array,list,nodes,other,nodes,remove,master,node,other,nodes,remove,nodes,get,0,final,string,isolated,node,other,nodes,get,0,zen,ping,zen,ping,test,zen,discovery,internal,cluster,get,instance,discovery,class,get,zen,ping,if,zen,ping,instanceof,unicast,zen,ping,unicast,zen,ping,zen,ping,clear,temporal,responses,network,disruption,network,disconnect,new,network,disruption,new,two,partitions,master,node,isolated,node,new,network,disconnect,set,disruption,scheme,network,disconnect,network,disconnect,start,disrupting,ensure,stable,cluster,3,master,node,assert,no,master,isolated,node,network,disconnect,stop,disrupting,ensure,stable,cluster,4,assert,master,master,node,nodes
DiscoveryDisruptionIT -> public void testUnicastSinglePingResponseContainsMaster() throws Exception;1544081506;A 4 node cluster with m_m_n set to 3 and each node has one unicast endpoint. One node partitions from the master node._The temporal unicast responses is empty. When partition is solved the one ping response contains a master node._The rejoining node should take this master node and connect.;public void testUnicastSinglePingResponseContainsMaster() throws Exception {_        internalCluster().setHostsListContainsOnlyFirstNode(true)__        List<String> nodes = startCluster(4)__        _        final String masterNode = internalCluster().getMasterName()__        logger.info("---> legit elected master node={}", masterNode)__        List<String> otherNodes = new ArrayList<>(nodes)__        otherNodes.remove(masterNode)__        otherNodes.remove(nodes.get(0))_ _        final String isolatedNode = otherNodes.get(0)___        _        _        clearTemporalResponses()___        _        NetworkDisruption networkDisconnect = new NetworkDisruption(new TwoPartitions(masterNode, isolatedNode),_                new NetworkDisconnect())__        setDisruptionScheme(networkDisconnect)__        networkDisconnect.startDisrupting()__        _        ensureStableCluster(3, masterNode)___        _        assertNoMaster(isolatedNode)__        networkDisconnect.stopDisrupting()__        _        ensureStableCluster(4)__        _        _        assertMaster(masterNode, nodes)__    };a,4,node,cluster,with,set,to,3,and,each,node,has,one,unicast,endpoint,one,node,partitions,from,the,master,node,the,temporal,unicast,responses,is,empty,when,partition,is,solved,the,one,ping,response,contains,a,master,node,the,rejoining,node,should,take,this,master,node,and,connect;public,void,test,unicast,single,ping,response,contains,master,throws,exception,internal,cluster,set,hosts,list,contains,only,first,node,true,list,string,nodes,start,cluster,4,final,string,master,node,internal,cluster,get,master,name,logger,info,legit,elected,master,node,master,node,list,string,other,nodes,new,array,list,nodes,other,nodes,remove,master,node,other,nodes,remove,nodes,get,0,final,string,isolated,node,other,nodes,get,0,clear,temporal,responses,network,disruption,network,disconnect,new,network,disruption,new,two,partitions,master,node,isolated,node,new,network,disconnect,set,disruption,scheme,network,disconnect,network,disconnect,start,disrupting,ensure,stable,cluster,3,master,node,assert,no,master,isolated,node,network,disconnect,stop,disrupting,ensure,stable,cluster,4,assert,master,master,node,nodes
DiscoveryDisruptionIT -> public void testUnicastSinglePingResponseContainsMaster() throws Exception;1545945560;A 4 node cluster with m_m_n set to 3 and each node has one unicast endpoint. One node partitions from the master node._The temporal unicast responses is empty. When partition is solved the one ping response contains a master node._The rejoining node should take this master node and connect.;public void testUnicastSinglePingResponseContainsMaster() throws Exception {_        internalCluster().setHostsListContainsOnlyFirstNode(true)__        List<String> nodes = startCluster(4)__        _        final String masterNode = internalCluster().getMasterName()__        logger.info("---> legit elected master node={}", masterNode)__        List<String> otherNodes = new ArrayList<>(nodes)__        otherNodes.remove(masterNode)__        otherNodes.remove(nodes.get(0))_ _        final String isolatedNode = otherNodes.get(0)___        _        _        clearTemporalResponses()___        _        NetworkDisruption networkDisconnect = new NetworkDisruption(new TwoPartitions(masterNode, isolatedNode),_                new NetworkDisconnect())__        setDisruptionScheme(networkDisconnect)__        networkDisconnect.startDisrupting()__        _        ensureStableCluster(3, masterNode)___        _        assertNoMaster(isolatedNode)__        networkDisconnect.stopDisrupting()__        _        ensureStableCluster(4)__        _        _        assertMaster(masterNode, nodes)__    };a,4,node,cluster,with,set,to,3,and,each,node,has,one,unicast,endpoint,one,node,partitions,from,the,master,node,the,temporal,unicast,responses,is,empty,when,partition,is,solved,the,one,ping,response,contains,a,master,node,the,rejoining,node,should,take,this,master,node,and,connect;public,void,test,unicast,single,ping,response,contains,master,throws,exception,internal,cluster,set,hosts,list,contains,only,first,node,true,list,string,nodes,start,cluster,4,final,string,master,node,internal,cluster,get,master,name,logger,info,legit,elected,master,node,master,node,list,string,other,nodes,new,array,list,nodes,other,nodes,remove,master,node,other,nodes,remove,nodes,get,0,final,string,isolated,node,other,nodes,get,0,clear,temporal,responses,network,disruption,network,disconnect,new,network,disruption,new,two,partitions,master,node,isolated,node,new,network,disconnect,set,disruption,scheme,network,disconnect,network,disconnect,start,disrupting,ensure,stable,cluster,3,master,node,assert,no,master,isolated,node,network,disconnect,stop,disrupting,ensure,stable,cluster,4,assert,master,master,node,nodes
DiscoveryDisruptionIT -> public void testUnicastSinglePingResponseContainsMaster() throws Exception;1548144964;A 4 node cluster with m_m_n set to 3 and each node has one unicast endpoint. One node partitions from the master node._The temporal unicast responses is empty. When partition is solved the one ping response contains a master node._The rejoining node should take this master node and connect.;public void testUnicastSinglePingResponseContainsMaster() throws Exception {_        internalCluster().setHostsListContainsOnlyFirstNode(true)__        List<String> nodes = startCluster(4)__        _        final String masterNode = internalCluster().getMasterName()__        logger.info("---> legit elected master node={}", masterNode)__        List<String> otherNodes = new ArrayList<>(nodes)__        otherNodes.remove(masterNode)__        otherNodes.remove(nodes.get(0))_ _        final String isolatedNode = otherNodes.get(0)___        _        _        clearTemporalResponses()___        _        NetworkDisruption networkDisconnect = new NetworkDisruption(new TwoPartitions(masterNode, isolatedNode),_                new NetworkDisconnect())__        setDisruptionScheme(networkDisconnect)__        networkDisconnect.startDisrupting()__        _        ensureStableCluster(3, masterNode)___        _        assertNoMaster(isolatedNode)__        networkDisconnect.stopDisrupting()__        _        ensureStableCluster(4)__        _        _        assertMaster(masterNode, nodes)__    };a,4,node,cluster,with,set,to,3,and,each,node,has,one,unicast,endpoint,one,node,partitions,from,the,master,node,the,temporal,unicast,responses,is,empty,when,partition,is,solved,the,one,ping,response,contains,a,master,node,the,rejoining,node,should,take,this,master,node,and,connect;public,void,test,unicast,single,ping,response,contains,master,throws,exception,internal,cluster,set,hosts,list,contains,only,first,node,true,list,string,nodes,start,cluster,4,final,string,master,node,internal,cluster,get,master,name,logger,info,legit,elected,master,node,master,node,list,string,other,nodes,new,array,list,nodes,other,nodes,remove,master,node,other,nodes,remove,nodes,get,0,final,string,isolated,node,other,nodes,get,0,clear,temporal,responses,network,disruption,network,disconnect,new,network,disruption,new,two,partitions,master,node,isolated,node,new,network,disconnect,set,disruption,scheme,network,disconnect,network,disconnect,start,disrupting,ensure,stable,cluster,3,master,node,assert,no,master,isolated,node,network,disconnect,stop,disrupting,ensure,stable,cluster,4,assert,master,master,node,nodes
DiscoveryDisruptionIT -> public void testUnicastSinglePingResponseContainsMaster() throws Exception;1548145883;A 4 node cluster with m_m_n set to 3 and each node has one unicast endpoint. One node partitions from the master node._The temporal unicast responses is empty. When partition is solved the one ping response contains a master node._The rejoining node should take this master node and connect.;public void testUnicastSinglePingResponseContainsMaster() throws Exception {_        internalCluster().setHostsListContainsOnlyFirstNode(true)__        List<String> nodes = startCluster(4)__        _        final String masterNode = internalCluster().getMasterName()__        logger.info("---> legit elected master node={}", masterNode)__        List<String> otherNodes = new ArrayList<>(nodes)__        otherNodes.remove(masterNode)__        otherNodes.remove(nodes.get(0))_ _        final String isolatedNode = otherNodes.get(0)___        _        _        clearTemporalResponses()___        _        NetworkDisruption networkDisconnect = new NetworkDisruption(new TwoPartitions(masterNode, isolatedNode),_                new NetworkDisconnect())__        setDisruptionScheme(networkDisconnect)__        networkDisconnect.startDisrupting()__        _        ensureStableCluster(3, masterNode)___        _        assertNoMaster(isolatedNode)__        networkDisconnect.stopDisrupting()__        _        ensureStableCluster(4)__        _        _        assertMaster(masterNode, nodes)__    };a,4,node,cluster,with,set,to,3,and,each,node,has,one,unicast,endpoint,one,node,partitions,from,the,master,node,the,temporal,unicast,responses,is,empty,when,partition,is,solved,the,one,ping,response,contains,a,master,node,the,rejoining,node,should,take,this,master,node,and,connect;public,void,test,unicast,single,ping,response,contains,master,throws,exception,internal,cluster,set,hosts,list,contains,only,first,node,true,list,string,nodes,start,cluster,4,final,string,master,node,internal,cluster,get,master,name,logger,info,legit,elected,master,node,master,node,list,string,other,nodes,new,array,list,nodes,other,nodes,remove,master,node,other,nodes,remove,nodes,get,0,final,string,isolated,node,other,nodes,get,0,clear,temporal,responses,network,disruption,network,disconnect,new,network,disruption,new,two,partitions,master,node,isolated,node,new,network,disconnect,set,disruption,scheme,network,disconnect,network,disconnect,start,disrupting,ensure,stable,cluster,3,master,node,assert,no,master,isolated,node,network,disconnect,stop,disrupting,ensure,stable,cluster,4,assert,master,master,node,nodes
DiscoveryDisruptionIT -> public void testClusterJoinDespiteOfPublishingIssues() throws Exception;1524684173;Test cluster join with issues in cluster state publishing *;public void testClusterJoinDespiteOfPublishingIssues() throws Exception {_        List<String> nodes = startCluster(2, 1)___        String masterNode = internalCluster().getMasterName()__        String nonMasterNode__        if (masterNode.equals(nodes.get(0))) {_            nonMasterNode = nodes.get(1)__        } else {_            nonMasterNode = nodes.get(0)__        }__        DiscoveryNodes discoveryNodes = internalCluster().getInstance(ClusterService.class, nonMasterNode).state().nodes()___        TransportService masterTranspotService =_                internalCluster().getInstance(TransportService.class, discoveryNodes.getMasterNode().getName())___        logger.info("blocking requests from non master [{}] to master [{}]", nonMasterNode, masterNode)__        MockTransportService nonMasterTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class,_                nonMasterNode)__        nonMasterTransportService.addFailToSendNoConnectRule(masterTranspotService)___        assertNoMaster(nonMasterNode)___        logger.info("blocking cluster state publishing from master [{}] to non master [{}]", masterNode, nonMasterNode)__        MockTransportService masterTransportService =_                (MockTransportService) internalCluster().getInstance(TransportService.class, masterNode)__        TransportService localTransportService =_                internalCluster().getInstance(TransportService.class, discoveryNodes.getLocalNode().getName())__        if (randomBoolean()) {_            masterTransportService.addFailToSendNoConnectRule(localTransportService, PublishClusterStateAction.SEND_ACTION_NAME)__        } else {_            masterTransportService.addFailToSendNoConnectRule(localTransportService, PublishClusterStateAction.COMMIT_ACTION_NAME)__        }__        logger.info("allowing requests from non master [{}] to master [{}], waiting for two join request", nonMasterNode, masterNode)__        final CountDownLatch countDownLatch = new CountDownLatch(2)__        nonMasterTransportService.addDelegate(masterTranspotService, new MockTransportService.DelegateTransport(nonMasterTransportService_                .original()) {_            @Override_            protected void sendRequest(Transport.Connection connection, long requestId, String action, TransportRequest request,_                                       TransportRequestOptions options) throws IOException {_                if (action.equals(MembershipAction.DISCOVERY_JOIN_ACTION_NAME)) {_                    countDownLatch.countDown()__                }_                super.sendRequest(connection, requestId, action, request, options)__            }__            @Override_            public Transport.Connection openConnection(DiscoveryNode node, ConnectionProfile profile) throws IOException {_                return super.openConnection(node, profile)__            }__        })___        countDownLatch.await()___        logger.info("waiting for cluster to reform")__        masterTransportService.clearRule(localTransportService)__        nonMasterTransportService.clearRule(localTransportService)___        ensureStableCluster(2)___        _        _        internalCluster().stopRandomNonMasterNode()__    };test,cluster,join,with,issues,in,cluster,state,publishing;public,void,test,cluster,join,despite,of,publishing,issues,throws,exception,list,string,nodes,start,cluster,2,1,string,master,node,internal,cluster,get,master,name,string,non,master,node,if,master,node,equals,nodes,get,0,non,master,node,nodes,get,1,else,non,master,node,nodes,get,0,discovery,nodes,discovery,nodes,internal,cluster,get,instance,cluster,service,class,non,master,node,state,nodes,transport,service,master,transpot,service,internal,cluster,get,instance,transport,service,class,discovery,nodes,get,master,node,get,name,logger,info,blocking,requests,from,non,master,to,master,non,master,node,master,node,mock,transport,service,non,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,non,master,node,non,master,transport,service,add,fail,to,send,no,connect,rule,master,transpot,service,assert,no,master,non,master,node,logger,info,blocking,cluster,state,publishing,from,master,to,non,master,master,node,non,master,node,mock,transport,service,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,master,node,transport,service,local,transport,service,internal,cluster,get,instance,transport,service,class,discovery,nodes,get,local,node,get,name,if,random,boolean,master,transport,service,add,fail,to,send,no,connect,rule,local,transport,service,publish,cluster,state,action,else,master,transport,service,add,fail,to,send,no,connect,rule,local,transport,service,publish,cluster,state,action,logger,info,allowing,requests,from,non,master,to,master,waiting,for,two,join,request,non,master,node,master,node,final,count,down,latch,count,down,latch,new,count,down,latch,2,non,master,transport,service,add,delegate,master,transpot,service,new,mock,transport,service,delegate,transport,non,master,transport,service,original,override,protected,void,send,request,transport,connection,connection,long,request,id,string,action,transport,request,request,transport,request,options,options,throws,ioexception,if,action,equals,membership,action,count,down,latch,count,down,super,send,request,connection,request,id,action,request,options,override,public,transport,connection,open,connection,discovery,node,node,connection,profile,profile,throws,ioexception,return,super,open,connection,node,profile,count,down,latch,await,logger,info,waiting,for,cluster,to,reform,master,transport,service,clear,rule,local,transport,service,non,master,transport,service,clear,rule,local,transport,service,ensure,stable,cluster,2,internal,cluster,stop,random,non,master,node
DiscoveryDisruptionIT -> public void testClusterJoinDespiteOfPublishingIssues() throws Exception;1527096592;Test cluster join with issues in cluster state publishing *;public void testClusterJoinDespiteOfPublishingIssues() throws Exception {_        List<String> nodes = startCluster(2, 1)___        String masterNode = internalCluster().getMasterName()__        String nonMasterNode__        if (masterNode.equals(nodes.get(0))) {_            nonMasterNode = nodes.get(1)__        } else {_            nonMasterNode = nodes.get(0)__        }__        DiscoveryNodes discoveryNodes = internalCluster().getInstance(ClusterService.class, nonMasterNode).state().nodes()___        TransportService masterTranspotService =_                internalCluster().getInstance(TransportService.class, discoveryNodes.getMasterNode().getName())___        logger.info("blocking requests from non master [{}] to master [{}]", nonMasterNode, masterNode)__        MockTransportService nonMasterTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class,_                nonMasterNode)__        nonMasterTransportService.addFailToSendNoConnectRule(masterTranspotService)___        assertNoMaster(nonMasterNode)___        logger.info("blocking cluster state publishing from master [{}] to non master [{}]", masterNode, nonMasterNode)__        MockTransportService masterTransportService =_                (MockTransportService) internalCluster().getInstance(TransportService.class, masterNode)__        TransportService localTransportService =_                internalCluster().getInstance(TransportService.class, discoveryNodes.getLocalNode().getName())__        if (randomBoolean()) {_            masterTransportService.addFailToSendNoConnectRule(localTransportService, PublishClusterStateAction.SEND_ACTION_NAME)__        } else {_            masterTransportService.addFailToSendNoConnectRule(localTransportService, PublishClusterStateAction.COMMIT_ACTION_NAME)__        }__        logger.info("allowing requests from non master [{}] to master [{}], waiting for two join request", nonMasterNode, masterNode)__        final CountDownLatch countDownLatch = new CountDownLatch(2)__        nonMasterTransportService.addDelegate(masterTranspotService, new MockTransportService.DelegateTransport(nonMasterTransportService_                .original()) {_            @Override_            protected void sendRequest(Transport.Connection connection, long requestId, String action, TransportRequest request,_                                       TransportRequestOptions options) throws IOException {_                if (action.equals(MembershipAction.DISCOVERY_JOIN_ACTION_NAME)) {_                    countDownLatch.countDown()__                }_                super.sendRequest(connection, requestId, action, request, options)__            }__            @Override_            public Transport.Connection openConnection(DiscoveryNode node, ConnectionProfile profile) throws IOException {_                return super.openConnection(node, profile)__            }__        })___        countDownLatch.await()___        logger.info("waiting for cluster to reform")__        masterTransportService.clearRule(localTransportService)__        nonMasterTransportService.clearRule(localTransportService)___        ensureStableCluster(2)___        _        _        internalCluster().stopRandomNonMasterNode()__    };test,cluster,join,with,issues,in,cluster,state,publishing;public,void,test,cluster,join,despite,of,publishing,issues,throws,exception,list,string,nodes,start,cluster,2,1,string,master,node,internal,cluster,get,master,name,string,non,master,node,if,master,node,equals,nodes,get,0,non,master,node,nodes,get,1,else,non,master,node,nodes,get,0,discovery,nodes,discovery,nodes,internal,cluster,get,instance,cluster,service,class,non,master,node,state,nodes,transport,service,master,transpot,service,internal,cluster,get,instance,transport,service,class,discovery,nodes,get,master,node,get,name,logger,info,blocking,requests,from,non,master,to,master,non,master,node,master,node,mock,transport,service,non,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,non,master,node,non,master,transport,service,add,fail,to,send,no,connect,rule,master,transpot,service,assert,no,master,non,master,node,logger,info,blocking,cluster,state,publishing,from,master,to,non,master,master,node,non,master,node,mock,transport,service,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,master,node,transport,service,local,transport,service,internal,cluster,get,instance,transport,service,class,discovery,nodes,get,local,node,get,name,if,random,boolean,master,transport,service,add,fail,to,send,no,connect,rule,local,transport,service,publish,cluster,state,action,else,master,transport,service,add,fail,to,send,no,connect,rule,local,transport,service,publish,cluster,state,action,logger,info,allowing,requests,from,non,master,to,master,waiting,for,two,join,request,non,master,node,master,node,final,count,down,latch,count,down,latch,new,count,down,latch,2,non,master,transport,service,add,delegate,master,transpot,service,new,mock,transport,service,delegate,transport,non,master,transport,service,original,override,protected,void,send,request,transport,connection,connection,long,request,id,string,action,transport,request,request,transport,request,options,options,throws,ioexception,if,action,equals,membership,action,count,down,latch,count,down,super,send,request,connection,request,id,action,request,options,override,public,transport,connection,open,connection,discovery,node,node,connection,profile,profile,throws,ioexception,return,super,open,connection,node,profile,count,down,latch,await,logger,info,waiting,for,cluster,to,reform,master,transport,service,clear,rule,local,transport,service,non,master,transport,service,clear,rule,local,transport,service,ensure,stable,cluster,2,internal,cluster,stop,random,non,master,node
DiscoveryDisruptionIT -> public void testClusterJoinDespiteOfPublishingIssues() throws Exception;1534203100;Test cluster join with issues in cluster state publishing *;public void testClusterJoinDespiteOfPublishingIssues() throws Exception {_        List<String> nodes = startCluster(2, 1)___        String masterNode = internalCluster().getMasterName()__        String nonMasterNode__        if (masterNode.equals(nodes.get(0))) {_            nonMasterNode = nodes.get(1)__        } else {_            nonMasterNode = nodes.get(0)__        }__        DiscoveryNodes discoveryNodes = internalCluster().getInstance(ClusterService.class, nonMasterNode).state().nodes()___        TransportService masterTranspotService =_                internalCluster().getInstance(TransportService.class, discoveryNodes.getMasterNode().getName())___        logger.info("blocking requests from non master [{}] to master [{}]", nonMasterNode, masterNode)__        MockTransportService nonMasterTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class,_                nonMasterNode)__        nonMasterTransportService.addFailToSendNoConnectRule(masterTranspotService)___        assertNoMaster(nonMasterNode)___        logger.info("blocking cluster state publishing from master [{}] to non master [{}]", masterNode, nonMasterNode)__        MockTransportService masterTransportService =_                (MockTransportService) internalCluster().getInstance(TransportService.class, masterNode)__        TransportService localTransportService =_                internalCluster().getInstance(TransportService.class, discoveryNodes.getLocalNode().getName())__        if (randomBoolean()) {_            masterTransportService.addFailToSendNoConnectRule(localTransportService, PublishClusterStateAction.SEND_ACTION_NAME)__        } else {_            masterTransportService.addFailToSendNoConnectRule(localTransportService, PublishClusterStateAction.COMMIT_ACTION_NAME)__        }__        logger.info("allowing requests from non master [{}] to master [{}], waiting for two join request", nonMasterNode, masterNode)__        final CountDownLatch countDownLatch = new CountDownLatch(2)__        nonMasterTransportService.addSendBehavior(masterTransportService, (connection, requestId, action, request, options) -> {_            if (action.equals(MembershipAction.DISCOVERY_JOIN_ACTION_NAME)) {_                countDownLatch.countDown()__            }_            connection.sendRequest(requestId, action, request, options)__        })___        nonMasterTransportService.addConnectBehavior(masterTransportService, Transport::openConnection)___        countDownLatch.await()___        logger.info("waiting for cluster to reform")__        masterTransportService.clearRule(localTransportService)__        nonMasterTransportService.clearRule(localTransportService)___        ensureStableCluster(2)___        _        _        internalCluster().stopRandomNonMasterNode()__    };test,cluster,join,with,issues,in,cluster,state,publishing;public,void,test,cluster,join,despite,of,publishing,issues,throws,exception,list,string,nodes,start,cluster,2,1,string,master,node,internal,cluster,get,master,name,string,non,master,node,if,master,node,equals,nodes,get,0,non,master,node,nodes,get,1,else,non,master,node,nodes,get,0,discovery,nodes,discovery,nodes,internal,cluster,get,instance,cluster,service,class,non,master,node,state,nodes,transport,service,master,transpot,service,internal,cluster,get,instance,transport,service,class,discovery,nodes,get,master,node,get,name,logger,info,blocking,requests,from,non,master,to,master,non,master,node,master,node,mock,transport,service,non,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,non,master,node,non,master,transport,service,add,fail,to,send,no,connect,rule,master,transpot,service,assert,no,master,non,master,node,logger,info,blocking,cluster,state,publishing,from,master,to,non,master,master,node,non,master,node,mock,transport,service,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,master,node,transport,service,local,transport,service,internal,cluster,get,instance,transport,service,class,discovery,nodes,get,local,node,get,name,if,random,boolean,master,transport,service,add,fail,to,send,no,connect,rule,local,transport,service,publish,cluster,state,action,else,master,transport,service,add,fail,to,send,no,connect,rule,local,transport,service,publish,cluster,state,action,logger,info,allowing,requests,from,non,master,to,master,waiting,for,two,join,request,non,master,node,master,node,final,count,down,latch,count,down,latch,new,count,down,latch,2,non,master,transport,service,add,send,behavior,master,transport,service,connection,request,id,action,request,options,if,action,equals,membership,action,count,down,latch,count,down,connection,send,request,request,id,action,request,options,non,master,transport,service,add,connect,behavior,master,transport,service,transport,open,connection,count,down,latch,await,logger,info,waiting,for,cluster,to,reform,master,transport,service,clear,rule,local,transport,service,non,master,transport,service,clear,rule,local,transport,service,ensure,stable,cluster,2,internal,cluster,stop,random,non,master,node
DiscoveryDisruptionIT -> public void testClusterJoinDespiteOfPublishingIssues() throws Exception;1539723533;Test cluster join with issues in cluster state publishing *;public void testClusterJoinDespiteOfPublishingIssues() throws Exception {_        List<String> nodes = startCluster(2, 1)___        String masterNode = internalCluster().getMasterName()__        String nonMasterNode__        if (masterNode.equals(nodes.get(0))) {_            nonMasterNode = nodes.get(1)__        } else {_            nonMasterNode = nodes.get(0)__        }__        DiscoveryNodes discoveryNodes = internalCluster().getInstance(ClusterService.class, nonMasterNode).state().nodes()___        TransportService masterTranspotService =_                internalCluster().getInstance(TransportService.class, discoveryNodes.getMasterNode().getName())___        logger.info("blocking requests from non master [{}] to master [{}]", nonMasterNode, masterNode)__        MockTransportService nonMasterTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class,_                nonMasterNode)__        nonMasterTransportService.addFailToSendNoConnectRule(masterTranspotService)___        assertNoMaster(nonMasterNode)___        logger.info("blocking cluster state publishing from master [{}] to non master [{}]", masterNode, nonMasterNode)__        MockTransportService masterTransportService =_                (MockTransportService) internalCluster().getInstance(TransportService.class, masterNode)__        TransportService localTransportService =_                internalCluster().getInstance(TransportService.class, discoveryNodes.getLocalNode().getName())__        if (randomBoolean()) {_            masterTransportService.addFailToSendNoConnectRule(localTransportService, PublishClusterStateAction.SEND_ACTION_NAME)__        } else {_            masterTransportService.addFailToSendNoConnectRule(localTransportService, PublishClusterStateAction.COMMIT_ACTION_NAME)__        }__        logger.info("allowing requests from non master [{}] to master [{}], waiting for two join request", nonMasterNode, masterNode)__        final CountDownLatch countDownLatch = new CountDownLatch(2)__        nonMasterTransportService.addSendBehavior(masterTransportService, (connection, requestId, action, request, options) -> {_            if (action.equals(MembershipAction.DISCOVERY_JOIN_ACTION_NAME)) {_                countDownLatch.countDown()__            }_            connection.sendRequest(requestId, action, request, options)__        })___        nonMasterTransportService.addConnectBehavior(masterTransportService, Transport::openConnection)___        countDownLatch.await()___        logger.info("waiting for cluster to reform")__        masterTransportService.clearRule(localTransportService)__        nonMasterTransportService.clearRule(localTransportService)___        ensureStableCluster(2)___        _        _        internalCluster().stopRandomNonMasterNode()__    };test,cluster,join,with,issues,in,cluster,state,publishing;public,void,test,cluster,join,despite,of,publishing,issues,throws,exception,list,string,nodes,start,cluster,2,1,string,master,node,internal,cluster,get,master,name,string,non,master,node,if,master,node,equals,nodes,get,0,non,master,node,nodes,get,1,else,non,master,node,nodes,get,0,discovery,nodes,discovery,nodes,internal,cluster,get,instance,cluster,service,class,non,master,node,state,nodes,transport,service,master,transpot,service,internal,cluster,get,instance,transport,service,class,discovery,nodes,get,master,node,get,name,logger,info,blocking,requests,from,non,master,to,master,non,master,node,master,node,mock,transport,service,non,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,non,master,node,non,master,transport,service,add,fail,to,send,no,connect,rule,master,transpot,service,assert,no,master,non,master,node,logger,info,blocking,cluster,state,publishing,from,master,to,non,master,master,node,non,master,node,mock,transport,service,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,master,node,transport,service,local,transport,service,internal,cluster,get,instance,transport,service,class,discovery,nodes,get,local,node,get,name,if,random,boolean,master,transport,service,add,fail,to,send,no,connect,rule,local,transport,service,publish,cluster,state,action,else,master,transport,service,add,fail,to,send,no,connect,rule,local,transport,service,publish,cluster,state,action,logger,info,allowing,requests,from,non,master,to,master,waiting,for,two,join,request,non,master,node,master,node,final,count,down,latch,count,down,latch,new,count,down,latch,2,non,master,transport,service,add,send,behavior,master,transport,service,connection,request,id,action,request,options,if,action,equals,membership,action,count,down,latch,count,down,connection,send,request,request,id,action,request,options,non,master,transport,service,add,connect,behavior,master,transport,service,transport,open,connection,count,down,latch,await,logger,info,waiting,for,cluster,to,reform,master,transport,service,clear,rule,local,transport,service,non,master,transport,service,clear,rule,local,transport,service,ensure,stable,cluster,2,internal,cluster,stop,random,non,master,node
DiscoveryDisruptionIT -> public void testClusterJoinDespiteOfPublishingIssues() throws Exception;1541008027;Test cluster join with issues in cluster state publishing *;public void testClusterJoinDespiteOfPublishingIssues() throws Exception {_        String masterNode = internalCluster().startMasterOnlyNode(Settings.EMPTY)__        String nonMasterNode = internalCluster().startDataOnlyNode(Settings.EMPTY)___        DiscoveryNodes discoveryNodes = internalCluster().getInstance(ClusterService.class, nonMasterNode).state().nodes()___        TransportService masterTranspotService =_                internalCluster().getInstance(TransportService.class, discoveryNodes.getMasterNode().getName())___        logger.info("blocking requests from non master [{}] to master [{}]", nonMasterNode, masterNode)__        MockTransportService nonMasterTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class,_                nonMasterNode)__        nonMasterTransportService.addFailToSendNoConnectRule(masterTranspotService)___        assertNoMaster(nonMasterNode)___        logger.info("blocking cluster state publishing from master [{}] to non master [{}]", masterNode, nonMasterNode)__        MockTransportService masterTransportService =_                (MockTransportService) internalCluster().getInstance(TransportService.class, masterNode)__        TransportService localTransportService =_                internalCluster().getInstance(TransportService.class, discoveryNodes.getLocalNode().getName())__        if (randomBoolean()) {_            masterTransportService.addFailToSendNoConnectRule(localTransportService, PublishClusterStateAction.SEND_ACTION_NAME)__        } else {_            masterTransportService.addFailToSendNoConnectRule(localTransportService, PublishClusterStateAction.COMMIT_ACTION_NAME)__        }__        logger.info("allowing requests from non master [{}] to master [{}], waiting for two join request", nonMasterNode, masterNode)__        final CountDownLatch countDownLatch = new CountDownLatch(2)__        nonMasterTransportService.addSendBehavior(masterTransportService, (connection, requestId, action, request, options) -> {_            if (action.equals(MembershipAction.DISCOVERY_JOIN_ACTION_NAME)) {_                countDownLatch.countDown()__            }_            connection.sendRequest(requestId, action, request, options)__        })___        nonMasterTransportService.addConnectBehavior(masterTransportService, Transport::openConnection)___        countDownLatch.await()___        logger.info("waiting for cluster to reform")__        masterTransportService.clearRule(localTransportService)__        nonMasterTransportService.clearRule(localTransportService)___        ensureStableCluster(2)___        _        _        internalCluster().stopRandomNonMasterNode()__    };test,cluster,join,with,issues,in,cluster,state,publishing;public,void,test,cluster,join,despite,of,publishing,issues,throws,exception,string,master,node,internal,cluster,start,master,only,node,settings,empty,string,non,master,node,internal,cluster,start,data,only,node,settings,empty,discovery,nodes,discovery,nodes,internal,cluster,get,instance,cluster,service,class,non,master,node,state,nodes,transport,service,master,transpot,service,internal,cluster,get,instance,transport,service,class,discovery,nodes,get,master,node,get,name,logger,info,blocking,requests,from,non,master,to,master,non,master,node,master,node,mock,transport,service,non,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,non,master,node,non,master,transport,service,add,fail,to,send,no,connect,rule,master,transpot,service,assert,no,master,non,master,node,logger,info,blocking,cluster,state,publishing,from,master,to,non,master,master,node,non,master,node,mock,transport,service,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,master,node,transport,service,local,transport,service,internal,cluster,get,instance,transport,service,class,discovery,nodes,get,local,node,get,name,if,random,boolean,master,transport,service,add,fail,to,send,no,connect,rule,local,transport,service,publish,cluster,state,action,else,master,transport,service,add,fail,to,send,no,connect,rule,local,transport,service,publish,cluster,state,action,logger,info,allowing,requests,from,non,master,to,master,waiting,for,two,join,request,non,master,node,master,node,final,count,down,latch,count,down,latch,new,count,down,latch,2,non,master,transport,service,add,send,behavior,master,transport,service,connection,request,id,action,request,options,if,action,equals,membership,action,count,down,latch,count,down,connection,send,request,request,id,action,request,options,non,master,transport,service,add,connect,behavior,master,transport,service,transport,open,connection,count,down,latch,await,logger,info,waiting,for,cluster,to,reform,master,transport,service,clear,rule,local,transport,service,non,master,transport,service,clear,rule,local,transport,service,ensure,stable,cluster,2,internal,cluster,stop,random,non,master,node
DiscoveryDisruptionIT -> public void testClusterJoinDespiteOfPublishingIssues() throws Exception;1544081506;Test cluster join with issues in cluster state publishing *;public void testClusterJoinDespiteOfPublishingIssues() throws Exception {_        _        String masterNode = internalCluster().startMasterOnlyNode(_            Settings.builder().put(TestZenDiscovery.USE_ZEN2.getKey(), false).build())__        String nonMasterNode = internalCluster().startDataOnlyNode(_            Settings.builder().put(TestZenDiscovery.USE_ZEN2.getKey(), false).build())___        DiscoveryNodes discoveryNodes = internalCluster().getInstance(ClusterService.class, nonMasterNode).state().nodes()___        TransportService masterTranspotService =_                internalCluster().getInstance(TransportService.class, discoveryNodes.getMasterNode().getName())___        logger.info("blocking requests from non master [{}] to master [{}]", nonMasterNode, masterNode)__        MockTransportService nonMasterTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class,_                nonMasterNode)__        nonMasterTransportService.addFailToSendNoConnectRule(masterTranspotService)___        assertNoMaster(nonMasterNode)___        logger.info("blocking cluster state publishing from master [{}] to non master [{}]", masterNode, nonMasterNode)__        MockTransportService masterTransportService =_                (MockTransportService) internalCluster().getInstance(TransportService.class, masterNode)__        TransportService localTransportService =_                internalCluster().getInstance(TransportService.class, discoveryNodes.getLocalNode().getName())__        if (randomBoolean()) {_            masterTransportService.addFailToSendNoConnectRule(localTransportService, PublishClusterStateAction.SEND_ACTION_NAME,_                PublicationTransportHandler.PUBLISH_STATE_ACTION_NAME)__        } else {_            masterTransportService.addFailToSendNoConnectRule(localTransportService, PublishClusterStateAction.COMMIT_ACTION_NAME,_                PublicationTransportHandler.COMMIT_STATE_ACTION_NAME)__        }__        logger.info("allowing requests from non master [{}] to master [{}], waiting for two join request", nonMasterNode, masterNode)__        final CountDownLatch countDownLatch = new CountDownLatch(2)__        nonMasterTransportService.addSendBehavior(masterTransportService, (connection, requestId, action, request, options) -> {_            if (action.equals(MembershipAction.DISCOVERY_JOIN_ACTION_NAME) ||_                action.equals(JoinHelper.JOIN_ACTION_NAME)) {_                countDownLatch.countDown()__            }_            connection.sendRequest(requestId, action, request, options)__        })___        nonMasterTransportService.addConnectBehavior(masterTransportService, Transport::openConnection)___        countDownLatch.await()___        logger.info("waiting for cluster to reform")__        masterTransportService.clearRule(localTransportService)__        nonMasterTransportService.clearRule(localTransportService)___        ensureStableCluster(2)___        _        _        internalCluster().stopRandomNonMasterNode()__    };test,cluster,join,with,issues,in,cluster,state,publishing;public,void,test,cluster,join,despite,of,publishing,issues,throws,exception,string,master,node,internal,cluster,start,master,only,node,settings,builder,put,test,zen,discovery,get,key,false,build,string,non,master,node,internal,cluster,start,data,only,node,settings,builder,put,test,zen,discovery,get,key,false,build,discovery,nodes,discovery,nodes,internal,cluster,get,instance,cluster,service,class,non,master,node,state,nodes,transport,service,master,transpot,service,internal,cluster,get,instance,transport,service,class,discovery,nodes,get,master,node,get,name,logger,info,blocking,requests,from,non,master,to,master,non,master,node,master,node,mock,transport,service,non,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,non,master,node,non,master,transport,service,add,fail,to,send,no,connect,rule,master,transpot,service,assert,no,master,non,master,node,logger,info,blocking,cluster,state,publishing,from,master,to,non,master,master,node,non,master,node,mock,transport,service,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,master,node,transport,service,local,transport,service,internal,cluster,get,instance,transport,service,class,discovery,nodes,get,local,node,get,name,if,random,boolean,master,transport,service,add,fail,to,send,no,connect,rule,local,transport,service,publish,cluster,state,action,publication,transport,handler,else,master,transport,service,add,fail,to,send,no,connect,rule,local,transport,service,publish,cluster,state,action,publication,transport,handler,logger,info,allowing,requests,from,non,master,to,master,waiting,for,two,join,request,non,master,node,master,node,final,count,down,latch,count,down,latch,new,count,down,latch,2,non,master,transport,service,add,send,behavior,master,transport,service,connection,request,id,action,request,options,if,action,equals,membership,action,action,equals,join,helper,count,down,latch,count,down,connection,send,request,request,id,action,request,options,non,master,transport,service,add,connect,behavior,master,transport,service,transport,open,connection,count,down,latch,await,logger,info,waiting,for,cluster,to,reform,master,transport,service,clear,rule,local,transport,service,non,master,transport,service,clear,rule,local,transport,service,ensure,stable,cluster,2,internal,cluster,stop,random,non,master,node
DiscoveryDisruptionIT -> public void testClusterJoinDespiteOfPublishingIssues() throws Exception;1545945560;Test cluster join with issues in cluster state publishing *;public void testClusterJoinDespiteOfPublishingIssues() throws Exception {_        String masterNode = internalCluster().startMasterOnlyNode()__        String nonMasterNode = internalCluster().startDataOnlyNode()___        DiscoveryNodes discoveryNodes = internalCluster().getInstance(ClusterService.class, nonMasterNode).state().nodes()___        TransportService masterTranspotService =_                internalCluster().getInstance(TransportService.class, discoveryNodes.getMasterNode().getName())___        logger.info("blocking requests from non master [{}] to master [{}]", nonMasterNode, masterNode)__        MockTransportService nonMasterTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class,_                nonMasterNode)__        nonMasterTransportService.addFailToSendNoConnectRule(masterTranspotService)___        assertNoMaster(nonMasterNode)___        logger.info("blocking cluster state publishing from master [{}] to non master [{}]", masterNode, nonMasterNode)__        MockTransportService masterTransportService =_                (MockTransportService) internalCluster().getInstance(TransportService.class, masterNode)__        TransportService localTransportService =_                internalCluster().getInstance(TransportService.class, discoveryNodes.getLocalNode().getName())__        if (randomBoolean()) {_            masterTransportService.addFailToSendNoConnectRule(localTransportService, PublishClusterStateAction.SEND_ACTION_NAME,_                PublicationTransportHandler.PUBLISH_STATE_ACTION_NAME)__        } else {_            masterTransportService.addFailToSendNoConnectRule(localTransportService, PublishClusterStateAction.COMMIT_ACTION_NAME,_                PublicationTransportHandler.COMMIT_STATE_ACTION_NAME)__        }__        logger.info("allowing requests from non master [{}] to master [{}], waiting for two join request", nonMasterNode, masterNode)__        final CountDownLatch countDownLatch = new CountDownLatch(2)__        nonMasterTransportService.addSendBehavior(masterTransportService, (connection, requestId, action, request, options) -> {_            if (action.equals(MembershipAction.DISCOVERY_JOIN_ACTION_NAME) ||_                action.equals(JoinHelper.JOIN_ACTION_NAME)) {_                countDownLatch.countDown()__            }_            connection.sendRequest(requestId, action, request, options)__        })___        nonMasterTransportService.addConnectBehavior(masterTransportService, Transport::openConnection)___        countDownLatch.await()___        logger.info("waiting for cluster to reform")__        masterTransportService.clearRule(localTransportService)__        nonMasterTransportService.clearRule(localTransportService)___        ensureStableCluster(2)___        _        _        internalCluster().stopRandomNonMasterNode()__    };test,cluster,join,with,issues,in,cluster,state,publishing;public,void,test,cluster,join,despite,of,publishing,issues,throws,exception,string,master,node,internal,cluster,start,master,only,node,string,non,master,node,internal,cluster,start,data,only,node,discovery,nodes,discovery,nodes,internal,cluster,get,instance,cluster,service,class,non,master,node,state,nodes,transport,service,master,transpot,service,internal,cluster,get,instance,transport,service,class,discovery,nodes,get,master,node,get,name,logger,info,blocking,requests,from,non,master,to,master,non,master,node,master,node,mock,transport,service,non,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,non,master,node,non,master,transport,service,add,fail,to,send,no,connect,rule,master,transpot,service,assert,no,master,non,master,node,logger,info,blocking,cluster,state,publishing,from,master,to,non,master,master,node,non,master,node,mock,transport,service,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,master,node,transport,service,local,transport,service,internal,cluster,get,instance,transport,service,class,discovery,nodes,get,local,node,get,name,if,random,boolean,master,transport,service,add,fail,to,send,no,connect,rule,local,transport,service,publish,cluster,state,action,publication,transport,handler,else,master,transport,service,add,fail,to,send,no,connect,rule,local,transport,service,publish,cluster,state,action,publication,transport,handler,logger,info,allowing,requests,from,non,master,to,master,waiting,for,two,join,request,non,master,node,master,node,final,count,down,latch,count,down,latch,new,count,down,latch,2,non,master,transport,service,add,send,behavior,master,transport,service,connection,request,id,action,request,options,if,action,equals,membership,action,action,equals,join,helper,count,down,latch,count,down,connection,send,request,request,id,action,request,options,non,master,transport,service,add,connect,behavior,master,transport,service,transport,open,connection,count,down,latch,await,logger,info,waiting,for,cluster,to,reform,master,transport,service,clear,rule,local,transport,service,non,master,transport,service,clear,rule,local,transport,service,ensure,stable,cluster,2,internal,cluster,stop,random,non,master,node
DiscoveryDisruptionIT -> public void testClusterJoinDespiteOfPublishingIssues() throws Exception;1548144964;Test cluster join with issues in cluster state publishing *;public void testClusterJoinDespiteOfPublishingIssues() throws Exception {_        String masterNode = internalCluster().startMasterOnlyNode()__        String nonMasterNode = internalCluster().startDataOnlyNode()___        DiscoveryNodes discoveryNodes = internalCluster().getInstance(ClusterService.class, nonMasterNode).state().nodes()___        TransportService masterTranspotService =_                internalCluster().getInstance(TransportService.class, discoveryNodes.getMasterNode().getName())___        logger.info("blocking requests from non master [{}] to master [{}]", nonMasterNode, masterNode)__        MockTransportService nonMasterTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class,_                nonMasterNode)__        nonMasterTransportService.addFailToSendNoConnectRule(masterTranspotService)___        assertNoMaster(nonMasterNode)___        logger.info("blocking cluster state publishing from master [{}] to non master [{}]", masterNode, nonMasterNode)__        MockTransportService masterTransportService =_                (MockTransportService) internalCluster().getInstance(TransportService.class, masterNode)__        TransportService localTransportService =_                internalCluster().getInstance(TransportService.class, discoveryNodes.getLocalNode().getName())__        if (randomBoolean()) {_            masterTransportService.addFailToSendNoConnectRule(localTransportService, PublishClusterStateAction.SEND_ACTION_NAME,_                PublicationTransportHandler.PUBLISH_STATE_ACTION_NAME)__        } else {_            masterTransportService.addFailToSendNoConnectRule(localTransportService, PublishClusterStateAction.COMMIT_ACTION_NAME,_                PublicationTransportHandler.COMMIT_STATE_ACTION_NAME)__        }__        logger.info("allowing requests from non master [{}] to master [{}], waiting for two join request", nonMasterNode, masterNode)__        final CountDownLatch countDownLatch = new CountDownLatch(2)__        nonMasterTransportService.addSendBehavior(masterTransportService, (connection, requestId, action, request, options) -> {_            if (action.equals(MembershipAction.DISCOVERY_JOIN_ACTION_NAME) ||_                action.equals(JoinHelper.JOIN_ACTION_NAME)) {_                countDownLatch.countDown()__            }_            connection.sendRequest(requestId, action, request, options)__        })___        nonMasterTransportService.addConnectBehavior(masterTransportService, Transport::openConnection)___        countDownLatch.await()___        logger.info("waiting for cluster to reform")__        masterTransportService.clearRule(localTransportService)__        nonMasterTransportService.clearRule(localTransportService)___        ensureStableCluster(2)___        _        _        internalCluster().stopRandomNonMasterNode()__    };test,cluster,join,with,issues,in,cluster,state,publishing;public,void,test,cluster,join,despite,of,publishing,issues,throws,exception,string,master,node,internal,cluster,start,master,only,node,string,non,master,node,internal,cluster,start,data,only,node,discovery,nodes,discovery,nodes,internal,cluster,get,instance,cluster,service,class,non,master,node,state,nodes,transport,service,master,transpot,service,internal,cluster,get,instance,transport,service,class,discovery,nodes,get,master,node,get,name,logger,info,blocking,requests,from,non,master,to,master,non,master,node,master,node,mock,transport,service,non,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,non,master,node,non,master,transport,service,add,fail,to,send,no,connect,rule,master,transpot,service,assert,no,master,non,master,node,logger,info,blocking,cluster,state,publishing,from,master,to,non,master,master,node,non,master,node,mock,transport,service,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,master,node,transport,service,local,transport,service,internal,cluster,get,instance,transport,service,class,discovery,nodes,get,local,node,get,name,if,random,boolean,master,transport,service,add,fail,to,send,no,connect,rule,local,transport,service,publish,cluster,state,action,publication,transport,handler,else,master,transport,service,add,fail,to,send,no,connect,rule,local,transport,service,publish,cluster,state,action,publication,transport,handler,logger,info,allowing,requests,from,non,master,to,master,waiting,for,two,join,request,non,master,node,master,node,final,count,down,latch,count,down,latch,new,count,down,latch,2,non,master,transport,service,add,send,behavior,master,transport,service,connection,request,id,action,request,options,if,action,equals,membership,action,action,equals,join,helper,count,down,latch,count,down,connection,send,request,request,id,action,request,options,non,master,transport,service,add,connect,behavior,master,transport,service,transport,open,connection,count,down,latch,await,logger,info,waiting,for,cluster,to,reform,master,transport,service,clear,rule,local,transport,service,non,master,transport,service,clear,rule,local,transport,service,ensure,stable,cluster,2,internal,cluster,stop,random,non,master,node
DiscoveryDisruptionIT -> public void testClusterJoinDespiteOfPublishingIssues() throws Exception;1550066058;Test cluster join with issues in cluster state publishing *;public void testClusterJoinDespiteOfPublishingIssues() throws Exception {_        String masterNode = internalCluster().startMasterOnlyNode()__        String nonMasterNode = internalCluster().startDataOnlyNode()___        DiscoveryNodes discoveryNodes = internalCluster().getInstance(ClusterService.class, nonMasterNode).state().nodes()___        TransportService masterTranspotService =_                internalCluster().getInstance(TransportService.class, discoveryNodes.getMasterNode().getName())___        logger.info("blocking requests from non master [{}] to master [{}]", nonMasterNode, masterNode)__        MockTransportService nonMasterTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class,_                nonMasterNode)__        nonMasterTransportService.addFailToSendNoConnectRule(masterTranspotService)___        assertNoMaster(nonMasterNode)___        logger.info("blocking cluster state publishing from master [{}] to non master [{}]", masterNode, nonMasterNode)__        MockTransportService masterTransportService =_                (MockTransportService) internalCluster().getInstance(TransportService.class, masterNode)__        TransportService localTransportService =_                internalCluster().getInstance(TransportService.class, discoveryNodes.getLocalNode().getName())__        if (randomBoolean()) {_            masterTransportService.addFailToSendNoConnectRule(localTransportService, PublishClusterStateAction.SEND_ACTION_NAME,_                PublicationTransportHandler.PUBLISH_STATE_ACTION_NAME)__        } else {_            masterTransportService.addFailToSendNoConnectRule(localTransportService, PublishClusterStateAction.COMMIT_ACTION_NAME,_                PublicationTransportHandler.COMMIT_STATE_ACTION_NAME)__        }__        logger.info("allowing requests from non master [{}] to master [{}], waiting for two join request", nonMasterNode, masterNode)__        final CountDownLatch countDownLatch = new CountDownLatch(2)__        nonMasterTransportService.addSendBehavior(masterTransportService, (connection, requestId, action, request, options) -> {_            if (action.equals(MembershipAction.DISCOVERY_JOIN_ACTION_NAME) ||_                action.equals(JoinHelper.JOIN_ACTION_NAME)) {_                countDownLatch.countDown()__            }_            connection.sendRequest(requestId, action, request, options)__        })___        nonMasterTransportService.addConnectBehavior(masterTransportService, Transport::openConnection)___        countDownLatch.await()___        logger.info("waiting for cluster to reform")__        masterTransportService.clearRule(localTransportService)__        nonMasterTransportService.clearRule(localTransportService)___        ensureStableCluster(2)___        _        _        internalCluster().stopRandomNonMasterNode()__    };test,cluster,join,with,issues,in,cluster,state,publishing;public,void,test,cluster,join,despite,of,publishing,issues,throws,exception,string,master,node,internal,cluster,start,master,only,node,string,non,master,node,internal,cluster,start,data,only,node,discovery,nodes,discovery,nodes,internal,cluster,get,instance,cluster,service,class,non,master,node,state,nodes,transport,service,master,transpot,service,internal,cluster,get,instance,transport,service,class,discovery,nodes,get,master,node,get,name,logger,info,blocking,requests,from,non,master,to,master,non,master,node,master,node,mock,transport,service,non,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,non,master,node,non,master,transport,service,add,fail,to,send,no,connect,rule,master,transpot,service,assert,no,master,non,master,node,logger,info,blocking,cluster,state,publishing,from,master,to,non,master,master,node,non,master,node,mock,transport,service,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,master,node,transport,service,local,transport,service,internal,cluster,get,instance,transport,service,class,discovery,nodes,get,local,node,get,name,if,random,boolean,master,transport,service,add,fail,to,send,no,connect,rule,local,transport,service,publish,cluster,state,action,publication,transport,handler,else,master,transport,service,add,fail,to,send,no,connect,rule,local,transport,service,publish,cluster,state,action,publication,transport,handler,logger,info,allowing,requests,from,non,master,to,master,waiting,for,two,join,request,non,master,node,master,node,final,count,down,latch,count,down,latch,new,count,down,latch,2,non,master,transport,service,add,send,behavior,master,transport,service,connection,request,id,action,request,options,if,action,equals,membership,action,action,equals,join,helper,count,down,latch,count,down,connection,send,request,request,id,action,request,options,non,master,transport,service,add,connect,behavior,master,transport,service,transport,open,connection,count,down,latch,await,logger,info,waiting,for,cluster,to,reform,master,transport,service,clear,rule,local,transport,service,non,master,transport,service,clear,rule,local,transport,service,ensure,stable,cluster,2,internal,cluster,stop,random,non,master,node
DiscoveryDisruptionIT -> public void testNodeNotReachableFromMaster() throws Exception;1524684173;Adds an asymmetric break between a master and one of the nodes and makes_sure that the node is removed form the cluster, that the node start pinging and that_the cluster reforms when healed.;public void testNodeNotReachableFromMaster() throws Exception {_        startCluster(3)___        String masterNode = internalCluster().getMasterName()__        String nonMasterNode = null__        while (nonMasterNode == null) {_            nonMasterNode = randomFrom(internalCluster().getNodeNames())__            if (nonMasterNode.equals(masterNode)) {_                nonMasterNode = null__            }_        }__        logger.info("blocking request from master [{}] to [{}]", masterNode, nonMasterNode)__        MockTransportService masterTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class,_                masterNode)__        if (randomBoolean()) {_            masterTransportService.addUnresponsiveRule(internalCluster().getInstance(TransportService.class, nonMasterNode))__        } else {_            masterTransportService.addFailToSendNoConnectRule(internalCluster().getInstance(TransportService.class, nonMasterNode))__        }__        logger.info("waiting for [{}] to be removed from cluster", nonMasterNode)__        ensureStableCluster(2, masterNode)___        logger.info("waiting for [{}] to have no master", nonMasterNode)__        assertNoMaster(nonMasterNode)___        logger.info("healing partition and checking cluster reforms")__        masterTransportService.clearAllRules()___        ensureStableCluster(3)__    };adds,an,asymmetric,break,between,a,master,and,one,of,the,nodes,and,makes,sure,that,the,node,is,removed,form,the,cluster,that,the,node,start,pinging,and,that,the,cluster,reforms,when,healed;public,void,test,node,not,reachable,from,master,throws,exception,start,cluster,3,string,master,node,internal,cluster,get,master,name,string,non,master,node,null,while,non,master,node,null,non,master,node,random,from,internal,cluster,get,node,names,if,non,master,node,equals,master,node,non,master,node,null,logger,info,blocking,request,from,master,to,master,node,non,master,node,mock,transport,service,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,master,node,if,random,boolean,master,transport,service,add,unresponsive,rule,internal,cluster,get,instance,transport,service,class,non,master,node,else,master,transport,service,add,fail,to,send,no,connect,rule,internal,cluster,get,instance,transport,service,class,non,master,node,logger,info,waiting,for,to,be,removed,from,cluster,non,master,node,ensure,stable,cluster,2,master,node,logger,info,waiting,for,to,have,no,master,non,master,node,assert,no,master,non,master,node,logger,info,healing,partition,and,checking,cluster,reforms,master,transport,service,clear,all,rules,ensure,stable,cluster,3
DiscoveryDisruptionIT -> public void testNodeNotReachableFromMaster() throws Exception;1527096592;Adds an asymmetric break between a master and one of the nodes and makes_sure that the node is removed form the cluster, that the node start pinging and that_the cluster reforms when healed.;public void testNodeNotReachableFromMaster() throws Exception {_        startCluster(3)___        String masterNode = internalCluster().getMasterName()__        String nonMasterNode = null__        while (nonMasterNode == null) {_            nonMasterNode = randomFrom(internalCluster().getNodeNames())__            if (nonMasterNode.equals(masterNode)) {_                nonMasterNode = null__            }_        }__        logger.info("blocking request from master [{}] to [{}]", masterNode, nonMasterNode)__        MockTransportService masterTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class,_                masterNode)__        if (randomBoolean()) {_            masterTransportService.addUnresponsiveRule(internalCluster().getInstance(TransportService.class, nonMasterNode))__        } else {_            masterTransportService.addFailToSendNoConnectRule(internalCluster().getInstance(TransportService.class, nonMasterNode))__        }__        logger.info("waiting for [{}] to be removed from cluster", nonMasterNode)__        ensureStableCluster(2, masterNode)___        logger.info("waiting for [{}] to have no master", nonMasterNode)__        assertNoMaster(nonMasterNode)___        logger.info("healing partition and checking cluster reforms")__        masterTransportService.clearAllRules()___        ensureStableCluster(3)__    };adds,an,asymmetric,break,between,a,master,and,one,of,the,nodes,and,makes,sure,that,the,node,is,removed,form,the,cluster,that,the,node,start,pinging,and,that,the,cluster,reforms,when,healed;public,void,test,node,not,reachable,from,master,throws,exception,start,cluster,3,string,master,node,internal,cluster,get,master,name,string,non,master,node,null,while,non,master,node,null,non,master,node,random,from,internal,cluster,get,node,names,if,non,master,node,equals,master,node,non,master,node,null,logger,info,blocking,request,from,master,to,master,node,non,master,node,mock,transport,service,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,master,node,if,random,boolean,master,transport,service,add,unresponsive,rule,internal,cluster,get,instance,transport,service,class,non,master,node,else,master,transport,service,add,fail,to,send,no,connect,rule,internal,cluster,get,instance,transport,service,class,non,master,node,logger,info,waiting,for,to,be,removed,from,cluster,non,master,node,ensure,stable,cluster,2,master,node,logger,info,waiting,for,to,have,no,master,non,master,node,assert,no,master,non,master,node,logger,info,healing,partition,and,checking,cluster,reforms,master,transport,service,clear,all,rules,ensure,stable,cluster,3
DiscoveryDisruptionIT -> public void testNodeNotReachableFromMaster() throws Exception;1534203100;Adds an asymmetric break between a master and one of the nodes and makes_sure that the node is removed form the cluster, that the node start pinging and that_the cluster reforms when healed.;public void testNodeNotReachableFromMaster() throws Exception {_        startCluster(3)___        String masterNode = internalCluster().getMasterName()__        String nonMasterNode = null__        while (nonMasterNode == null) {_            nonMasterNode = randomFrom(internalCluster().getNodeNames())__            if (nonMasterNode.equals(masterNode)) {_                nonMasterNode = null__            }_        }__        logger.info("blocking request from master [{}] to [{}]", masterNode, nonMasterNode)__        MockTransportService masterTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class,_                masterNode)__        if (randomBoolean()) {_            masterTransportService.addUnresponsiveRule(internalCluster().getInstance(TransportService.class, nonMasterNode))__        } else {_            masterTransportService.addFailToSendNoConnectRule(internalCluster().getInstance(TransportService.class, nonMasterNode))__        }__        logger.info("waiting for [{}] to be removed from cluster", nonMasterNode)__        ensureStableCluster(2, masterNode)___        logger.info("waiting for [{}] to have no master", nonMasterNode)__        assertNoMaster(nonMasterNode)___        logger.info("healing partition and checking cluster reforms")__        masterTransportService.clearAllRules()___        ensureStableCluster(3)__    };adds,an,asymmetric,break,between,a,master,and,one,of,the,nodes,and,makes,sure,that,the,node,is,removed,form,the,cluster,that,the,node,start,pinging,and,that,the,cluster,reforms,when,healed;public,void,test,node,not,reachable,from,master,throws,exception,start,cluster,3,string,master,node,internal,cluster,get,master,name,string,non,master,node,null,while,non,master,node,null,non,master,node,random,from,internal,cluster,get,node,names,if,non,master,node,equals,master,node,non,master,node,null,logger,info,blocking,request,from,master,to,master,node,non,master,node,mock,transport,service,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,master,node,if,random,boolean,master,transport,service,add,unresponsive,rule,internal,cluster,get,instance,transport,service,class,non,master,node,else,master,transport,service,add,fail,to,send,no,connect,rule,internal,cluster,get,instance,transport,service,class,non,master,node,logger,info,waiting,for,to,be,removed,from,cluster,non,master,node,ensure,stable,cluster,2,master,node,logger,info,waiting,for,to,have,no,master,non,master,node,assert,no,master,non,master,node,logger,info,healing,partition,and,checking,cluster,reforms,master,transport,service,clear,all,rules,ensure,stable,cluster,3
DiscoveryDisruptionIT -> public void testNodeNotReachableFromMaster() throws Exception;1539723533;Adds an asymmetric break between a master and one of the nodes and makes_sure that the node is removed form the cluster, that the node start pinging and that_the cluster reforms when healed.;public void testNodeNotReachableFromMaster() throws Exception {_        startCluster(3)___        String masterNode = internalCluster().getMasterName()__        String nonMasterNode = null__        while (nonMasterNode == null) {_            nonMasterNode = randomFrom(internalCluster().getNodeNames())__            if (nonMasterNode.equals(masterNode)) {_                nonMasterNode = null__            }_        }__        logger.info("blocking request from master [{}] to [{}]", masterNode, nonMasterNode)__        MockTransportService masterTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class,_                masterNode)__        if (randomBoolean()) {_            masterTransportService.addUnresponsiveRule(internalCluster().getInstance(TransportService.class, nonMasterNode))__        } else {_            masterTransportService.addFailToSendNoConnectRule(internalCluster().getInstance(TransportService.class, nonMasterNode))__        }__        logger.info("waiting for [{}] to be removed from cluster", nonMasterNode)__        ensureStableCluster(2, masterNode)___        logger.info("waiting for [{}] to have no master", nonMasterNode)__        assertNoMaster(nonMasterNode)___        logger.info("healing partition and checking cluster reforms")__        masterTransportService.clearAllRules()___        ensureStableCluster(3)__    };adds,an,asymmetric,break,between,a,master,and,one,of,the,nodes,and,makes,sure,that,the,node,is,removed,form,the,cluster,that,the,node,start,pinging,and,that,the,cluster,reforms,when,healed;public,void,test,node,not,reachable,from,master,throws,exception,start,cluster,3,string,master,node,internal,cluster,get,master,name,string,non,master,node,null,while,non,master,node,null,non,master,node,random,from,internal,cluster,get,node,names,if,non,master,node,equals,master,node,non,master,node,null,logger,info,blocking,request,from,master,to,master,node,non,master,node,mock,transport,service,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,master,node,if,random,boolean,master,transport,service,add,unresponsive,rule,internal,cluster,get,instance,transport,service,class,non,master,node,else,master,transport,service,add,fail,to,send,no,connect,rule,internal,cluster,get,instance,transport,service,class,non,master,node,logger,info,waiting,for,to,be,removed,from,cluster,non,master,node,ensure,stable,cluster,2,master,node,logger,info,waiting,for,to,have,no,master,non,master,node,assert,no,master,non,master,node,logger,info,healing,partition,and,checking,cluster,reforms,master,transport,service,clear,all,rules,ensure,stable,cluster,3
DiscoveryDisruptionIT -> public void testNodeNotReachableFromMaster() throws Exception;1541008027;Adds an asymmetric break between a master and one of the nodes and makes_sure that the node is removed form the cluster, that the node start pinging and that_the cluster reforms when healed.;public void testNodeNotReachableFromMaster() throws Exception {_        startCluster(3)___        String masterNode = internalCluster().getMasterName()__        String nonMasterNode = null__        while (nonMasterNode == null) {_            nonMasterNode = randomFrom(internalCluster().getNodeNames())__            if (nonMasterNode.equals(masterNode)) {_                nonMasterNode = null__            }_        }__        logger.info("blocking request from master [{}] to [{}]", masterNode, nonMasterNode)__        MockTransportService masterTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class,_                masterNode)__        if (randomBoolean()) {_            masterTransportService.addUnresponsiveRule(internalCluster().getInstance(TransportService.class, nonMasterNode))__        } else {_            masterTransportService.addFailToSendNoConnectRule(internalCluster().getInstance(TransportService.class, nonMasterNode))__        }__        logger.info("waiting for [{}] to be removed from cluster", nonMasterNode)__        ensureStableCluster(2, masterNode)___        logger.info("waiting for [{}] to have no master", nonMasterNode)__        assertNoMaster(nonMasterNode)___        logger.info("healing partition and checking cluster reforms")__        masterTransportService.clearAllRules()___        ensureStableCluster(3)__    };adds,an,asymmetric,break,between,a,master,and,one,of,the,nodes,and,makes,sure,that,the,node,is,removed,form,the,cluster,that,the,node,start,pinging,and,that,the,cluster,reforms,when,healed;public,void,test,node,not,reachable,from,master,throws,exception,start,cluster,3,string,master,node,internal,cluster,get,master,name,string,non,master,node,null,while,non,master,node,null,non,master,node,random,from,internal,cluster,get,node,names,if,non,master,node,equals,master,node,non,master,node,null,logger,info,blocking,request,from,master,to,master,node,non,master,node,mock,transport,service,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,master,node,if,random,boolean,master,transport,service,add,unresponsive,rule,internal,cluster,get,instance,transport,service,class,non,master,node,else,master,transport,service,add,fail,to,send,no,connect,rule,internal,cluster,get,instance,transport,service,class,non,master,node,logger,info,waiting,for,to,be,removed,from,cluster,non,master,node,ensure,stable,cluster,2,master,node,logger,info,waiting,for,to,have,no,master,non,master,node,assert,no,master,non,master,node,logger,info,healing,partition,and,checking,cluster,reforms,master,transport,service,clear,all,rules,ensure,stable,cluster,3
DiscoveryDisruptionIT -> public void testNodeNotReachableFromMaster() throws Exception;1544081506;Adds an asymmetric break between a master and one of the nodes and makes_sure that the node is removed form the cluster, that the node start pinging and that_the cluster reforms when healed.;public void testNodeNotReachableFromMaster() throws Exception {_        startCluster(3)___        String masterNode = internalCluster().getMasterName()__        String nonMasterNode = null__        while (nonMasterNode == null) {_            nonMasterNode = randomFrom(internalCluster().getNodeNames())__            if (nonMasterNode.equals(masterNode)) {_                nonMasterNode = null__            }_        }__        logger.info("blocking request from master [{}] to [{}]", masterNode, nonMasterNode)__        MockTransportService masterTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class,_                masterNode)__        if (randomBoolean()) {_            masterTransportService.addUnresponsiveRule(internalCluster().getInstance(TransportService.class, nonMasterNode))__        } else {_            masterTransportService.addFailToSendNoConnectRule(internalCluster().getInstance(TransportService.class, nonMasterNode))__        }__        logger.info("waiting for [{}] to be removed from cluster", nonMasterNode)__        ensureStableCluster(2, masterNode)___        logger.info("waiting for [{}] to have no master", nonMasterNode)__        assertNoMaster(nonMasterNode)___        logger.info("healing partition and checking cluster reforms")__        masterTransportService.clearAllRules()___        ensureStableCluster(3)__    };adds,an,asymmetric,break,between,a,master,and,one,of,the,nodes,and,makes,sure,that,the,node,is,removed,form,the,cluster,that,the,node,start,pinging,and,that,the,cluster,reforms,when,healed;public,void,test,node,not,reachable,from,master,throws,exception,start,cluster,3,string,master,node,internal,cluster,get,master,name,string,non,master,node,null,while,non,master,node,null,non,master,node,random,from,internal,cluster,get,node,names,if,non,master,node,equals,master,node,non,master,node,null,logger,info,blocking,request,from,master,to,master,node,non,master,node,mock,transport,service,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,master,node,if,random,boolean,master,transport,service,add,unresponsive,rule,internal,cluster,get,instance,transport,service,class,non,master,node,else,master,transport,service,add,fail,to,send,no,connect,rule,internal,cluster,get,instance,transport,service,class,non,master,node,logger,info,waiting,for,to,be,removed,from,cluster,non,master,node,ensure,stable,cluster,2,master,node,logger,info,waiting,for,to,have,no,master,non,master,node,assert,no,master,non,master,node,logger,info,healing,partition,and,checking,cluster,reforms,master,transport,service,clear,all,rules,ensure,stable,cluster,3
DiscoveryDisruptionIT -> public void testNodeNotReachableFromMaster() throws Exception;1545945560;Adds an asymmetric break between a master and one of the nodes and makes_sure that the node is removed form the cluster, that the node start pinging and that_the cluster reforms when healed.;public void testNodeNotReachableFromMaster() throws Exception {_        startCluster(3)___        String masterNode = internalCluster().getMasterName()__        String nonMasterNode = null__        while (nonMasterNode == null) {_            nonMasterNode = randomFrom(internalCluster().getNodeNames())__            if (nonMasterNode.equals(masterNode)) {_                nonMasterNode = null__            }_        }__        logger.info("blocking request from master [{}] to [{}]", masterNode, nonMasterNode)__        MockTransportService masterTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class,_                masterNode)__        if (randomBoolean()) {_            masterTransportService.addUnresponsiveRule(internalCluster().getInstance(TransportService.class, nonMasterNode))__        } else {_            masterTransportService.addFailToSendNoConnectRule(internalCluster().getInstance(TransportService.class, nonMasterNode))__        }__        logger.info("waiting for [{}] to be removed from cluster", nonMasterNode)__        ensureStableCluster(2, masterNode)___        logger.info("waiting for [{}] to have no master", nonMasterNode)__        assertNoMaster(nonMasterNode)___        logger.info("healing partition and checking cluster reforms")__        masterTransportService.clearAllRules()___        ensureStableCluster(3)__    };adds,an,asymmetric,break,between,a,master,and,one,of,the,nodes,and,makes,sure,that,the,node,is,removed,form,the,cluster,that,the,node,start,pinging,and,that,the,cluster,reforms,when,healed;public,void,test,node,not,reachable,from,master,throws,exception,start,cluster,3,string,master,node,internal,cluster,get,master,name,string,non,master,node,null,while,non,master,node,null,non,master,node,random,from,internal,cluster,get,node,names,if,non,master,node,equals,master,node,non,master,node,null,logger,info,blocking,request,from,master,to,master,node,non,master,node,mock,transport,service,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,master,node,if,random,boolean,master,transport,service,add,unresponsive,rule,internal,cluster,get,instance,transport,service,class,non,master,node,else,master,transport,service,add,fail,to,send,no,connect,rule,internal,cluster,get,instance,transport,service,class,non,master,node,logger,info,waiting,for,to,be,removed,from,cluster,non,master,node,ensure,stable,cluster,2,master,node,logger,info,waiting,for,to,have,no,master,non,master,node,assert,no,master,non,master,node,logger,info,healing,partition,and,checking,cluster,reforms,master,transport,service,clear,all,rules,ensure,stable,cluster,3
DiscoveryDisruptionIT -> public void testNodeNotReachableFromMaster() throws Exception;1548144964;Adds an asymmetric break between a master and one of the nodes and makes_sure that the node is removed form the cluster, that the node start pinging and that_the cluster reforms when healed.;public void testNodeNotReachableFromMaster() throws Exception {_        startCluster(3)___        String masterNode = internalCluster().getMasterName()__        String nonMasterNode = null__        while (nonMasterNode == null) {_            nonMasterNode = randomFrom(internalCluster().getNodeNames())__            if (nonMasterNode.equals(masterNode)) {_                nonMasterNode = null__            }_        }__        logger.info("blocking request from master [{}] to [{}]", masterNode, nonMasterNode)__        MockTransportService masterTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class,_                masterNode)__        if (randomBoolean()) {_            masterTransportService.addUnresponsiveRule(internalCluster().getInstance(TransportService.class, nonMasterNode))__        } else {_            masterTransportService.addFailToSendNoConnectRule(internalCluster().getInstance(TransportService.class, nonMasterNode))__        }__        logger.info("waiting for [{}] to be removed from cluster", nonMasterNode)__        ensureStableCluster(2, masterNode)___        logger.info("waiting for [{}] to have no master", nonMasterNode)__        assertNoMaster(nonMasterNode)___        logger.info("healing partition and checking cluster reforms")__        masterTransportService.clearAllRules()___        ensureStableCluster(3)__    };adds,an,asymmetric,break,between,a,master,and,one,of,the,nodes,and,makes,sure,that,the,node,is,removed,form,the,cluster,that,the,node,start,pinging,and,that,the,cluster,reforms,when,healed;public,void,test,node,not,reachable,from,master,throws,exception,start,cluster,3,string,master,node,internal,cluster,get,master,name,string,non,master,node,null,while,non,master,node,null,non,master,node,random,from,internal,cluster,get,node,names,if,non,master,node,equals,master,node,non,master,node,null,logger,info,blocking,request,from,master,to,master,node,non,master,node,mock,transport,service,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,master,node,if,random,boolean,master,transport,service,add,unresponsive,rule,internal,cluster,get,instance,transport,service,class,non,master,node,else,master,transport,service,add,fail,to,send,no,connect,rule,internal,cluster,get,instance,transport,service,class,non,master,node,logger,info,waiting,for,to,be,removed,from,cluster,non,master,node,ensure,stable,cluster,2,master,node,logger,info,waiting,for,to,have,no,master,non,master,node,assert,no,master,non,master,node,logger,info,healing,partition,and,checking,cluster,reforms,master,transport,service,clear,all,rules,ensure,stable,cluster,3
DiscoveryDisruptionIT -> public void testNodeNotReachableFromMaster() throws Exception;1548145883;Adds an asymmetric break between a master and one of the nodes and makes_sure that the node is removed form the cluster, that the node start pinging and that_the cluster reforms when healed.;public void testNodeNotReachableFromMaster() throws Exception {_        startCluster(3)___        String masterNode = internalCluster().getMasterName()__        String nonMasterNode = null__        while (nonMasterNode == null) {_            nonMasterNode = randomFrom(internalCluster().getNodeNames())__            if (nonMasterNode.equals(masterNode)) {_                nonMasterNode = null__            }_        }__        logger.info("blocking request from master [{}] to [{}]", masterNode, nonMasterNode)__        MockTransportService masterTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class,_                masterNode)__        if (randomBoolean()) {_            masterTransportService.addUnresponsiveRule(internalCluster().getInstance(TransportService.class, nonMasterNode))__        } else {_            masterTransportService.addFailToSendNoConnectRule(internalCluster().getInstance(TransportService.class, nonMasterNode))__        }__        logger.info("waiting for [{}] to be removed from cluster", nonMasterNode)__        ensureStableCluster(2, masterNode)___        logger.info("waiting for [{}] to have no master", nonMasterNode)__        assertNoMaster(nonMasterNode)___        logger.info("healing partition and checking cluster reforms")__        masterTransportService.clearAllRules()___        ensureStableCluster(3)__    };adds,an,asymmetric,break,between,a,master,and,one,of,the,nodes,and,makes,sure,that,the,node,is,removed,form,the,cluster,that,the,node,start,pinging,and,that,the,cluster,reforms,when,healed;public,void,test,node,not,reachable,from,master,throws,exception,start,cluster,3,string,master,node,internal,cluster,get,master,name,string,non,master,node,null,while,non,master,node,null,non,master,node,random,from,internal,cluster,get,node,names,if,non,master,node,equals,master,node,non,master,node,null,logger,info,blocking,request,from,master,to,master,node,non,master,node,mock,transport,service,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,master,node,if,random,boolean,master,transport,service,add,unresponsive,rule,internal,cluster,get,instance,transport,service,class,non,master,node,else,master,transport,service,add,fail,to,send,no,connect,rule,internal,cluster,get,instance,transport,service,class,non,master,node,logger,info,waiting,for,to,be,removed,from,cluster,non,master,node,ensure,stable,cluster,2,master,node,logger,info,waiting,for,to,have,no,master,non,master,node,assert,no,master,non,master,node,logger,info,healing,partition,and,checking,cluster,reforms,master,transport,service,clear,all,rules,ensure,stable,cluster,3
DiscoveryDisruptionIT -> public void testNodeNotReachableFromMaster() throws Exception;1548147027;Adds an asymmetric break between a master and one of the nodes and makes_sure that the node is removed form the cluster, that the node start pinging and that_the cluster reforms when healed.;public void testNodeNotReachableFromMaster() throws Exception {_        startCluster(3)___        String masterNode = internalCluster().getMasterName()__        String nonMasterNode = null__        while (nonMasterNode == null) {_            nonMasterNode = randomFrom(internalCluster().getNodeNames())__            if (nonMasterNode.equals(masterNode)) {_                nonMasterNode = null__            }_        }__        logger.info("blocking request from master [{}] to [{}]", masterNode, nonMasterNode)__        MockTransportService masterTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class,_                masterNode)__        if (randomBoolean()) {_            masterTransportService.addUnresponsiveRule(internalCluster().getInstance(TransportService.class, nonMasterNode))__        } else {_            masterTransportService.addFailToSendNoConnectRule(internalCluster().getInstance(TransportService.class, nonMasterNode))__        }__        logger.info("waiting for [{}] to be removed from cluster", nonMasterNode)__        ensureStableCluster(2, masterNode)___        logger.info("waiting for [{}] to have no master", nonMasterNode)__        assertNoMaster(nonMasterNode)___        logger.info("healing partition and checking cluster reforms")__        masterTransportService.clearAllRules()___        ensureStableCluster(3)__    };adds,an,asymmetric,break,between,a,master,and,one,of,the,nodes,and,makes,sure,that,the,node,is,removed,form,the,cluster,that,the,node,start,pinging,and,that,the,cluster,reforms,when,healed;public,void,test,node,not,reachable,from,master,throws,exception,start,cluster,3,string,master,node,internal,cluster,get,master,name,string,non,master,node,null,while,non,master,node,null,non,master,node,random,from,internal,cluster,get,node,names,if,non,master,node,equals,master,node,non,master,node,null,logger,info,blocking,request,from,master,to,master,node,non,master,node,mock,transport,service,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,master,node,if,random,boolean,master,transport,service,add,unresponsive,rule,internal,cluster,get,instance,transport,service,class,non,master,node,else,master,transport,service,add,fail,to,send,no,connect,rule,internal,cluster,get,instance,transport,service,class,non,master,node,logger,info,waiting,for,to,be,removed,from,cluster,non,master,node,ensure,stable,cluster,2,master,node,logger,info,waiting,for,to,have,no,master,non,master,node,assert,no,master,non,master,node,logger,info,healing,partition,and,checking,cluster,reforms,master,transport,service,clear,all,rules,ensure,stable,cluster,3
DiscoveryDisruptionIT -> public void testNodeNotReachableFromMaster() throws Exception;1549094096;Adds an asymmetric break between a master and one of the nodes and makes_sure that the node is removed form the cluster, that the node start pinging and that_the cluster reforms when healed.;public void testNodeNotReachableFromMaster() throws Exception {_        startCluster(3)___        String masterNode = internalCluster().getMasterName()__        String nonMasterNode = null__        while (nonMasterNode == null) {_            nonMasterNode = randomFrom(internalCluster().getNodeNames())__            if (nonMasterNode.equals(masterNode)) {_                nonMasterNode = null__            }_        }__        logger.info("blocking request from master [{}] to [{}]", masterNode, nonMasterNode)__        MockTransportService masterTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class,_                masterNode)__        if (randomBoolean()) {_            masterTransportService.addUnresponsiveRule(internalCluster().getInstance(TransportService.class, nonMasterNode))__        } else {_            masterTransportService.addFailToSendNoConnectRule(internalCluster().getInstance(TransportService.class, nonMasterNode))__        }__        logger.info("waiting for [{}] to be removed from cluster", nonMasterNode)__        ensureStableCluster(2, masterNode)___        logger.info("waiting for [{}] to have no master", nonMasterNode)__        assertNoMaster(nonMasterNode)___        logger.info("healing partition and checking cluster reforms")__        masterTransportService.clearAllRules()___        ensureStableCluster(3)__    };adds,an,asymmetric,break,between,a,master,and,one,of,the,nodes,and,makes,sure,that,the,node,is,removed,form,the,cluster,that,the,node,start,pinging,and,that,the,cluster,reforms,when,healed;public,void,test,node,not,reachable,from,master,throws,exception,start,cluster,3,string,master,node,internal,cluster,get,master,name,string,non,master,node,null,while,non,master,node,null,non,master,node,random,from,internal,cluster,get,node,names,if,non,master,node,equals,master,node,non,master,node,null,logger,info,blocking,request,from,master,to,master,node,non,master,node,mock,transport,service,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,master,node,if,random,boolean,master,transport,service,add,unresponsive,rule,internal,cluster,get,instance,transport,service,class,non,master,node,else,master,transport,service,add,fail,to,send,no,connect,rule,internal,cluster,get,instance,transport,service,class,non,master,node,logger,info,waiting,for,to,be,removed,from,cluster,non,master,node,ensure,stable,cluster,2,master,node,logger,info,waiting,for,to,have,no,master,non,master,node,assert,no,master,non,master,node,logger,info,healing,partition,and,checking,cluster,reforms,master,transport,service,clear,all,rules,ensure,stable,cluster,3
DiscoveryDisruptionIT -> public void testNodeNotReachableFromMaster() throws Exception;1550066058;Adds an asymmetric break between a master and one of the nodes and makes_sure that the node is removed form the cluster, that the node start pinging and that_the cluster reforms when healed.;public void testNodeNotReachableFromMaster() throws Exception {_        startCluster(3)___        String masterNode = internalCluster().getMasterName()__        String nonMasterNode = null__        while (nonMasterNode == null) {_            nonMasterNode = randomFrom(internalCluster().getNodeNames())__            if (nonMasterNode.equals(masterNode)) {_                nonMasterNode = null__            }_        }__        logger.info("blocking request from master [{}] to [{}]", masterNode, nonMasterNode)__        MockTransportService masterTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class,_                masterNode)__        if (randomBoolean()) {_            masterTransportService.addUnresponsiveRule(internalCluster().getInstance(TransportService.class, nonMasterNode))__        } else {_            masterTransportService.addFailToSendNoConnectRule(internalCluster().getInstance(TransportService.class, nonMasterNode))__        }__        logger.info("waiting for [{}] to be removed from cluster", nonMasterNode)__        ensureStableCluster(2, masterNode)___        logger.info("waiting for [{}] to have no master", nonMasterNode)__        assertNoMaster(nonMasterNode)___        logger.info("healing partition and checking cluster reforms")__        masterTransportService.clearAllRules()___        ensureStableCluster(3)__    };adds,an,asymmetric,break,between,a,master,and,one,of,the,nodes,and,makes,sure,that,the,node,is,removed,form,the,cluster,that,the,node,start,pinging,and,that,the,cluster,reforms,when,healed;public,void,test,node,not,reachable,from,master,throws,exception,start,cluster,3,string,master,node,internal,cluster,get,master,name,string,non,master,node,null,while,non,master,node,null,non,master,node,random,from,internal,cluster,get,node,names,if,non,master,node,equals,master,node,non,master,node,null,logger,info,blocking,request,from,master,to,master,node,non,master,node,mock,transport,service,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,master,node,if,random,boolean,master,transport,service,add,unresponsive,rule,internal,cluster,get,instance,transport,service,class,non,master,node,else,master,transport,service,add,fail,to,send,no,connect,rule,internal,cluster,get,instance,transport,service,class,non,master,node,logger,info,waiting,for,to,be,removed,from,cluster,non,master,node,ensure,stable,cluster,2,master,node,logger,info,waiting,for,to,have,no,master,non,master,node,assert,no,master,non,master,node,logger,info,healing,partition,and,checking,cluster,reforms,master,transport,service,clear,all,rules,ensure,stable,cluster,3
