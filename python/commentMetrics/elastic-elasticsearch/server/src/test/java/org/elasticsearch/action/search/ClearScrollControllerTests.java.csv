commented;modifiers;parameterAmount;loc;comment;code
false;public;1;9;;@Override public void onResponse(ClearScrollResponse clearScrollResponse) {     try {         assertEquals(3, clearScrollResponse.getNumFreed()).         assertTrue(clearScrollResponse.isSucceeded()).     } finally {         latch.countDown().     } }
false;public;1;8;;@Override public void onFailure(Exception e) {     try {         throw new AssertionError(e).     } finally {         latch.countDown().     } }
false;public;2;6;;@Override public void sendClearAllScrollContexts(Transport.Connection connection, ActionListener<TransportResponse> listener) {     nodesInvoked.add(connection.getNode()).     // response is unused     Thread t = new Thread(() -> listener.onResponse(TransportResponse.Empty.INSTANCE)).     t.start(). }
false;;2;4;;@Override Transport.Connection getConnection(String clusterAlias, DiscoveryNode node) {     return new SearchAsyncActionTests.MockConnection(node). }
false;public;0;50;;public void testClearAll() throws IOException, InterruptedException {     DiscoveryNode node1 = new DiscoveryNode("node_1", buildNewFakeTransportAddress(), Version.CURRENT).     DiscoveryNode node2 = new DiscoveryNode("node_2", buildNewFakeTransportAddress(), Version.CURRENT).     DiscoveryNode node3 = new DiscoveryNode("node_3", buildNewFakeTransportAddress(), Version.CURRENT).     DiscoveryNodes nodes = DiscoveryNodes.builder().add(node1).add(node2).add(node3).build().     CountDownLatch latch = new CountDownLatch(1).     ActionListener<ClearScrollResponse> listener = new ActionListener<ClearScrollResponse>() {          @Override         public void onResponse(ClearScrollResponse clearScrollResponse) {             try {                 assertEquals(3, clearScrollResponse.getNumFreed()).                 assertTrue(clearScrollResponse.isSucceeded()).             } finally {                 latch.countDown().             }         }          @Override         public void onFailure(Exception e) {             try {                 throw new AssertionError(e).             } finally {                 latch.countDown().             }         }     }.     List<DiscoveryNode> nodesInvoked = new CopyOnWriteArrayList<>().     SearchTransportService searchTransportService = new SearchTransportService(null, null) {          @Override         public void sendClearAllScrollContexts(Transport.Connection connection, ActionListener<TransportResponse> listener) {             nodesInvoked.add(connection.getNode()).             // response is unused             Thread t = new Thread(() -> listener.onResponse(TransportResponse.Empty.INSTANCE)).             t.start().         }          @Override         Transport.Connection getConnection(String clusterAlias, DiscoveryNode node) {             return new SearchAsyncActionTests.MockConnection(node).         }     }.     ClearScrollRequest clearScrollRequest = new ClearScrollRequest().     clearScrollRequest.scrollIds(Arrays.asList("_all")).     ClearScrollController controller = new ClearScrollController(clearScrollRequest, listener, nodes, logger, searchTransportService).     controller.run().     latch.await().     assertEquals(3, nodesInvoked.size()).     Collections.sort(nodesInvoked, Comparator.comparing(DiscoveryNode::getId)).     assertEquals(nodesInvoked, Arrays.asList(node1, node2, node3)). }
false;public;1;10;;@Override public void onResponse(ClearScrollResponse clearScrollResponse) {     try {         assertEquals(numFreed.get(), clearScrollResponse.getNumFreed()).         assertTrue(clearScrollResponse.isSucceeded()).     } finally {         latch.countDown().     } }
false;public;1;8;;@Override public void onFailure(Exception e) {     try {         throw new AssertionError(e).     } finally {         latch.countDown().     } }
false;public;3;11;;@Override public void sendFreeContext(Transport.Connection connection, long contextId, ActionListener<SearchFreeContextResponse> listener) {     nodesInvoked.add(connection.getNode()).     boolean freed = randomBoolean().     if (freed) {         numFreed.incrementAndGet().     }     Thread t = new Thread(() -> listener.onResponse(new SearchFreeContextResponse(freed))).     t.start(). }
false;;2;4;;@Override Transport.Connection getConnection(String clusterAlias, DiscoveryNode node) {     return new SearchAsyncActionTests.MockConnection(node). }
false;public;0;69;;public void testClearScrollIds() throws IOException, InterruptedException {     DiscoveryNode node1 = new DiscoveryNode("node_1", buildNewFakeTransportAddress(), Version.CURRENT).     DiscoveryNode node2 = new DiscoveryNode("node_2", buildNewFakeTransportAddress(), Version.CURRENT).     DiscoveryNode node3 = new DiscoveryNode("node_3", buildNewFakeTransportAddress(), Version.CURRENT).     AtomicArray<SearchPhaseResult> array = new AtomicArray<>(3).     SearchAsyncActionTests.TestSearchPhaseResult testSearchPhaseResult1 = new SearchAsyncActionTests.TestSearchPhaseResult(1, node1).     testSearchPhaseResult1.setSearchShardTarget(new SearchShardTarget("node_1", new ShardId("idx", "uuid1", 2), null, null)).     SearchAsyncActionTests.TestSearchPhaseResult testSearchPhaseResult2 = new SearchAsyncActionTests.TestSearchPhaseResult(12, node2).     testSearchPhaseResult2.setSearchShardTarget(new SearchShardTarget("node_2", new ShardId("idy", "uuid2", 42), null, null)).     SearchAsyncActionTests.TestSearchPhaseResult testSearchPhaseResult3 = new SearchAsyncActionTests.TestSearchPhaseResult(42, node3).     testSearchPhaseResult3.setSearchShardTarget(new SearchShardTarget("node_3", new ShardId("idy", "uuid2", 43), null, null)).     array.setOnce(0, testSearchPhaseResult1).     array.setOnce(1, testSearchPhaseResult2).     array.setOnce(2, testSearchPhaseResult3).     AtomicInteger numFreed = new AtomicInteger(0).     String scrollId = TransportSearchHelper.buildScrollId(array).     DiscoveryNodes nodes = DiscoveryNodes.builder().add(node1).add(node2).add(node3).build().     CountDownLatch latch = new CountDownLatch(1).     ActionListener<ClearScrollResponse> listener = new ActionListener<ClearScrollResponse>() {          @Override         public void onResponse(ClearScrollResponse clearScrollResponse) {             try {                 assertEquals(numFreed.get(), clearScrollResponse.getNumFreed()).                 assertTrue(clearScrollResponse.isSucceeded()).             } finally {                 latch.countDown().             }         }          @Override         public void onFailure(Exception e) {             try {                 throw new AssertionError(e).             } finally {                 latch.countDown().             }         }     }.     List<DiscoveryNode> nodesInvoked = new CopyOnWriteArrayList<>().     SearchTransportService searchTransportService = new SearchTransportService(null, null) {          @Override         public void sendFreeContext(Transport.Connection connection, long contextId, ActionListener<SearchFreeContextResponse> listener) {             nodesInvoked.add(connection.getNode()).             boolean freed = randomBoolean().             if (freed) {                 numFreed.incrementAndGet().             }             Thread t = new Thread(() -> listener.onResponse(new SearchFreeContextResponse(freed))).             t.start().         }          @Override         Transport.Connection getConnection(String clusterAlias, DiscoveryNode node) {             return new SearchAsyncActionTests.MockConnection(node).         }     }.     ClearScrollRequest clearScrollRequest = new ClearScrollRequest().     clearScrollRequest.scrollIds(Arrays.asList(scrollId)).     ClearScrollController controller = new ClearScrollController(clearScrollRequest, listener, nodes, logger, searchTransportService).     controller.run().     latch.await().     assertEquals(3, nodesInvoked.size()).     Collections.sort(nodesInvoked, Comparator.comparing(DiscoveryNode::getId)).     assertEquals(nodesInvoked, Arrays.asList(node1, node2, node3)). }
false;public;1;15;;@Override public void onResponse(ClearScrollResponse clearScrollResponse) {     try {         assertEquals(numFreed.get(), clearScrollResponse.getNumFreed()).         if (numFailures.get() > 0) {             assertFalse(clearScrollResponse.isSucceeded()).         } else {             assertTrue(clearScrollResponse.isSucceeded()).         }     } finally {         latch.countDown().     } }
false;public;1;8;;@Override public void onFailure(Exception e) {     try {         throw new AssertionError(e).     } finally {         latch.countDown().     } }
false;public;3;19;;@Override public void sendFreeContext(Transport.Connection connection, long contextId, ActionListener<SearchFreeContextResponse> listener) {     nodesInvoked.add(connection.getNode()).     boolean freed = randomBoolean().     boolean fail = randomBoolean().     Thread t = new Thread(() -> {         if (fail) {             numFailures.incrementAndGet().             listener.onFailure(new IllegalArgumentException("boom")).         } else {             if (freed) {                 numFreed.incrementAndGet().             }             listener.onResponse(new SearchFreeContextResponse(freed)).         }     }).     t.start(). }
false;;2;9;;@Override Transport.Connection getConnection(String clusterAlias, DiscoveryNode node) {     if (randomBoolean()) {         numFailures.incrementAndGet().         numConnectionFailures.incrementAndGet().         throw new NodeNotConnectedException(node, "boom").     }     return new SearchAsyncActionTests.MockConnection(node). }
false;public;0;88;;public void testClearScrollIdsWithFailure() throws IOException, InterruptedException {     DiscoveryNode node1 = new DiscoveryNode("node_1", buildNewFakeTransportAddress(), Version.CURRENT).     DiscoveryNode node2 = new DiscoveryNode("node_2", buildNewFakeTransportAddress(), Version.CURRENT).     DiscoveryNode node3 = new DiscoveryNode("node_3", buildNewFakeTransportAddress(), Version.CURRENT).     AtomicArray<SearchPhaseResult> array = new AtomicArray<>(3).     SearchAsyncActionTests.TestSearchPhaseResult testSearchPhaseResult1 = new SearchAsyncActionTests.TestSearchPhaseResult(1, node1).     testSearchPhaseResult1.setSearchShardTarget(new SearchShardTarget("node_1", new ShardId("idx", "uuid1", 2), null, null)).     SearchAsyncActionTests.TestSearchPhaseResult testSearchPhaseResult2 = new SearchAsyncActionTests.TestSearchPhaseResult(12, node2).     testSearchPhaseResult2.setSearchShardTarget(new SearchShardTarget("node_2", new ShardId("idy", "uuid2", 42), null, null)).     SearchAsyncActionTests.TestSearchPhaseResult testSearchPhaseResult3 = new SearchAsyncActionTests.TestSearchPhaseResult(42, node3).     testSearchPhaseResult3.setSearchShardTarget(new SearchShardTarget("node_3", new ShardId("idy", "uuid2", 43), null, null)).     array.setOnce(0, testSearchPhaseResult1).     array.setOnce(1, testSearchPhaseResult2).     array.setOnce(2, testSearchPhaseResult3).     AtomicInteger numFreed = new AtomicInteger(0).     AtomicInteger numFailures = new AtomicInteger(0).     AtomicInteger numConnectionFailures = new AtomicInteger(0).     String scrollId = TransportSearchHelper.buildScrollId(array).     DiscoveryNodes nodes = DiscoveryNodes.builder().add(node1).add(node2).add(node3).build().     CountDownLatch latch = new CountDownLatch(1).     ActionListener<ClearScrollResponse> listener = new ActionListener<ClearScrollResponse>() {          @Override         public void onResponse(ClearScrollResponse clearScrollResponse) {             try {                 assertEquals(numFreed.get(), clearScrollResponse.getNumFreed()).                 if (numFailures.get() > 0) {                     assertFalse(clearScrollResponse.isSucceeded()).                 } else {                     assertTrue(clearScrollResponse.isSucceeded()).                 }             } finally {                 latch.countDown().             }         }          @Override         public void onFailure(Exception e) {             try {                 throw new AssertionError(e).             } finally {                 latch.countDown().             }         }     }.     List<DiscoveryNode> nodesInvoked = new CopyOnWriteArrayList<>().     SearchTransportService searchTransportService = new SearchTransportService(null, null) {          @Override         public void sendFreeContext(Transport.Connection connection, long contextId, ActionListener<SearchFreeContextResponse> listener) {             nodesInvoked.add(connection.getNode()).             boolean freed = randomBoolean().             boolean fail = randomBoolean().             Thread t = new Thread(() -> {                 if (fail) {                     numFailures.incrementAndGet().                     listener.onFailure(new IllegalArgumentException("boom")).                 } else {                     if (freed) {                         numFreed.incrementAndGet().                     }                     listener.onResponse(new SearchFreeContextResponse(freed)).                 }             }).             t.start().         }          @Override         Transport.Connection getConnection(String clusterAlias, DiscoveryNode node) {             if (randomBoolean()) {                 numFailures.incrementAndGet().                 numConnectionFailures.incrementAndGet().                 throw new NodeNotConnectedException(node, "boom").             }             return new SearchAsyncActionTests.MockConnection(node).         }     }.     ClearScrollRequest clearScrollRequest = new ClearScrollRequest().     clearScrollRequest.scrollIds(Arrays.asList(scrollId)).     ClearScrollController controller = new ClearScrollController(clearScrollRequest, listener, nodes, logger, searchTransportService).     controller.run().     latch.await().     assertEquals(3 - numConnectionFailures.get(), nodesInvoked.size()). }
