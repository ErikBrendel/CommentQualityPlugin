commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;public void testDeleteMissing() {     Index index = new Index("missing", "doesn't matter").     ClusterState state = ClusterState.builder(ClusterName.DEFAULT).build().     IndexNotFoundException e = expectThrows(IndexNotFoundException.class, () -> service.deleteIndices(state, singleton(index))).     assertEquals(index, e.getIndex()). }
false;public;0;14;;public void testDeleteSnapshotting() {     String index = randomAlphaOfLength(5).     Snapshot snapshot = new Snapshot("doesn't matter", new SnapshotId("snapshot name", "snapshot uuid")).     SnapshotsInProgress snaps = new SnapshotsInProgress(new SnapshotsInProgress.Entry(snapshot, true, false, SnapshotsInProgress.State.INIT, singletonList(new IndexId(index, "doesn't matter")), System.currentTimeMillis(), (long) randomIntBetween(0, 1000), ImmutableOpenMap.of())).     ClusterState state = ClusterState.builder(clusterState(index)).putCustom(SnapshotsInProgress.TYPE, snaps).build().     Exception e = expectThrows(SnapshotInProgressException.class, () -> service.deleteIndices(state, singleton(state.metaData().getIndices().get(index).getIndex()))).     assertEquals("Cannot delete indices that are being snapshotted: [[" + index + "]]. Try again after snapshot finishes " + "or cancel the currently running snapshot.", e.getMessage()). }
false;public;0;19;;public void testDeleteUnassigned() {     // Create an unassigned index     String index = randomAlphaOfLength(5).     ClusterState before = clusterState(index).     // Mock the built reroute     when(allocationService.reroute(any(ClusterState.class), any(String.class))).then(i -> i.getArguments()[0]).     // Remove it     ClusterState after = service.deleteIndices(before, singleton(before.metaData().getIndices().get(index).getIndex())).     // It is gone     assertNull(after.metaData().getIndices().get(index)).     assertNull(after.routingTable().index(index)).     assertNull(after.blocks().indices().get(index)).     // Make sure we actually attempted to reroute     verify(allocationService).reroute(any(ClusterState.class), any(String.class)). }
false;private;1;12;;private ClusterState clusterState(String index) {     IndexMetaData indexMetaData = IndexMetaData.builder(index).settings(Settings.builder().put("index.version.created", VersionUtils.randomVersion(random()))).numberOfShards(1).numberOfReplicas(1).build().     return ClusterState.builder(ClusterName.DEFAULT).metaData(MetaData.builder().put(indexMetaData, false)).routingTable(RoutingTable.builder().addAsNew(indexMetaData).build()).blocks(ClusterBlocks.builder().addBlocks(indexMetaData)).build(). }
