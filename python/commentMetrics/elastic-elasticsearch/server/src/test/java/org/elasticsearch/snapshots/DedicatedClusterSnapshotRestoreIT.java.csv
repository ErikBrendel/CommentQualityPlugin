# id;timestamp;commentText;codeText;commentWords;codeWords
DedicatedClusterSnapshotRestoreIT -> public void testRestoreShrinkIndex() throws Exception;1524684173;Tests that a shrunken index (created via the shrink APIs) and subsequently snapshotted_can be restored when the node the shrunken index was created on is no longer part of_the cluster.;public void testRestoreShrinkIndex() throws Exception {_        logger.info("-->  starting a master node and a data node")__        internalCluster().startMasterOnlyNode()__        internalCluster().startDataOnlyNode()___        final Client client = client()__        final String repo = "test-repo"__        final String snapshot = "test-snap"__        final String sourceIdx = "test-idx"__        final String shrunkIdx = "test-idx-shrunk"___        logger.info("-->  creating repository")__        assertAcked(client.admin().cluster().preparePutRepository(repo).setType("fs")_            .setSettings(Settings.builder().put("location", randomRepoPath())_                             .put("compress", randomBoolean())))___        assertAcked(prepareCreate(sourceIdx, 0, Settings.builder()_            .put("number_of_shards", between(2, 10)).put("number_of_replicas", 0)))__        ensureGreen()___        logger.info("--> indexing some data")__        IndexRequestBuilder[] builders = new IndexRequestBuilder[randomIntBetween(10, 100)]__        for (int i = 0_ i < builders.length_ i++) {_            builders[i] = client().prepareIndex(sourceIdx, "type1",_                Integer.toString(i)).setSource("field1", "bar " + i)__        }_        indexRandom(true, builders)__        flushAndRefresh()___        logger.info("--> shrink the index")__        assertAcked(client.admin().indices().prepareUpdateSettings(sourceIdx)_            .setSettings(Settings.builder().put("index.blocks.write", true)).get())__        assertAcked(client.admin().indices().prepareResizeIndex(sourceIdx, shrunkIdx).get())___        logger.info("--> snapshot the shrunk index")__        CreateSnapshotResponse createResponse = client.admin().cluster()_            .prepareCreateSnapshot(repo, snapshot)_            .setWaitForCompletion(true).setIndices(shrunkIdx).get()__        assertEquals(SnapshotState.SUCCESS, createResponse.getSnapshotInfo().state())___        logger.info("--> delete index and stop the data node")__        assertAcked(client.admin().indices().prepareDelete(sourceIdx).get())__        assertAcked(client.admin().indices().prepareDelete(shrunkIdx).get())__        internalCluster().stopRandomDataNode()__        client().admin().cluster().prepareHealth().setTimeout("30s").setWaitForNodes("1")___        logger.info("--> start a new data node")__        final Settings dataSettings = Settings.builder()_            .put(Node.NODE_NAME_SETTING.getKey(), randomAlphaOfLength(5))_            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()) _            .build()__        internalCluster().startDataOnlyNode(dataSettings)__        client().admin().cluster().prepareHealth().setTimeout("30s").setWaitForNodes("2")___        logger.info("--> restore the shrunk index and ensure all shards are allocated")__        RestoreSnapshotResponse restoreResponse = client().admin().cluster()_            .prepareRestoreSnapshot(repo, snapshot).setWaitForCompletion(true)_            .setIndices(shrunkIdx).get()__        assertEquals(restoreResponse.getRestoreInfo().totalShards(),_            restoreResponse.getRestoreInfo().successfulShards())__        ensureYellow()__    };tests,that,a,shrunken,index,created,via,the,shrink,apis,and,subsequently,snapshotted,can,be,restored,when,the,node,the,shrunken,index,was,created,on,is,no,longer,part,of,the,cluster;public,void,test,restore,shrink,index,throws,exception,logger,info,starting,a,master,node,and,a,data,node,internal,cluster,start,master,only,node,internal,cluster,start,data,only,node,final,client,client,client,final,string,repo,test,repo,final,string,snapshot,test,snap,final,string,source,idx,test,idx,final,string,shrunk,idx,test,idx,shrunk,logger,info,creating,repository,assert,acked,client,admin,cluster,prepare,put,repository,repo,set,type,fs,set,settings,settings,builder,put,location,random,repo,path,put,compress,random,boolean,assert,acked,prepare,create,source,idx,0,settings,builder,put,between,2,10,put,0,ensure,green,logger,info,indexing,some,data,index,request,builder,builders,new,index,request,builder,random,int,between,10,100,for,int,i,0,i,builders,length,i,builders,i,client,prepare,index,source,idx,type1,integer,to,string,i,set,source,field1,bar,i,index,random,true,builders,flush,and,refresh,logger,info,shrink,the,index,assert,acked,client,admin,indices,prepare,update,settings,source,idx,set,settings,settings,builder,put,index,blocks,write,true,get,assert,acked,client,admin,indices,prepare,resize,index,source,idx,shrunk,idx,get,logger,info,snapshot,the,shrunk,index,create,snapshot,response,create,response,client,admin,cluster,prepare,create,snapshot,repo,snapshot,set,wait,for,completion,true,set,indices,shrunk,idx,get,assert,equals,snapshot,state,success,create,response,get,snapshot,info,state,logger,info,delete,index,and,stop,the,data,node,assert,acked,client,admin,indices,prepare,delete,source,idx,get,assert,acked,client,admin,indices,prepare,delete,shrunk,idx,get,internal,cluster,stop,random,data,node,client,admin,cluster,prepare,health,set,timeout,30s,set,wait,for,nodes,1,logger,info,start,a,new,data,node,final,settings,data,settings,settings,builder,put,node,get,key,random,alpha,of,length,5,put,environment,get,key,create,temp,dir,build,internal,cluster,start,data,only,node,data,settings,client,admin,cluster,prepare,health,set,timeout,30s,set,wait,for,nodes,2,logger,info,restore,the,shrunk,index,and,ensure,all,shards,are,allocated,restore,snapshot,response,restore,response,client,admin,cluster,prepare,restore,snapshot,repo,snapshot,set,wait,for,completion,true,set,indices,shrunk,idx,get,assert,equals,restore,response,get,restore,info,total,shards,restore,response,get,restore,info,successful,shards,ensure,yellow
DedicatedClusterSnapshotRestoreIT -> public void testRestoreShrinkIndex() throws Exception;1526449283;Tests that a shrunken index (created via the shrink APIs) and subsequently snapshotted_can be restored when the node the shrunken index was created on is no longer part of_the cluster.;public void testRestoreShrinkIndex() throws Exception {_        logger.info("-->  starting a master node and a data node")__        internalCluster().startMasterOnlyNode()__        internalCluster().startDataOnlyNode()___        final Client client = client()__        final String repo = "test-repo"__        final String snapshot = "test-snap"__        final String sourceIdx = "test-idx"__        final String shrunkIdx = "test-idx-shrunk"___        logger.info("-->  creating repository")__        assertAcked(client.admin().cluster().preparePutRepository(repo).setType("fs")_            .setSettings(Settings.builder().put("location", randomRepoPath())_                             .put("compress", randomBoolean())))___        assertAcked(prepareCreate(sourceIdx, 0, Settings.builder()_            .put("number_of_shards", between(2, 10)).put("number_of_replicas", 0)))__        ensureGreen()___        logger.info("--> indexing some data")__        IndexRequestBuilder[] builders = new IndexRequestBuilder[randomIntBetween(10, 100)]__        for (int i = 0_ i < builders.length_ i++) {_            builders[i] = client().prepareIndex(sourceIdx, "type1",_                Integer.toString(i)).setSource("field1", "bar " + i)__        }_        indexRandom(true, builders)__        flushAndRefresh()___        logger.info("--> shrink the index")__        assertAcked(client.admin().indices().prepareUpdateSettings(sourceIdx)_            .setSettings(Settings.builder().put("index.blocks.write", true)).get())__        assertAcked(client.admin().indices().prepareResizeIndex(sourceIdx, shrunkIdx).get())___        logger.info("--> snapshot the shrunk index")__        CreateSnapshotResponse createResponse = client.admin().cluster()_            .prepareCreateSnapshot(repo, snapshot)_            .setWaitForCompletion(true).setIndices(shrunkIdx).get()__        assertEquals(SnapshotState.SUCCESS, createResponse.getSnapshotInfo().state())___        logger.info("--> delete index and stop the data node")__        assertAcked(client.admin().indices().prepareDelete(sourceIdx).get())__        assertAcked(client.admin().indices().prepareDelete(shrunkIdx).get())__        internalCluster().stopRandomDataNode()__        client().admin().cluster().prepareHealth().setTimeout("30s").setWaitForNodes("1")___        logger.info("--> start a new data node")__        final Settings dataSettings = Settings.builder()_            .put(Node.NODE_NAME_SETTING.getKey(), randomAlphaOfLength(5))_            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()) _            .build()__        internalCluster().startDataOnlyNode(dataSettings)__        client().admin().cluster().prepareHealth().setTimeout("30s").setWaitForNodes("2")___        logger.info("--> restore the shrunk index and ensure all shards are allocated")__        RestoreSnapshotResponse restoreResponse = client().admin().cluster()_            .prepareRestoreSnapshot(repo, snapshot).setWaitForCompletion(true)_            .setIndices(shrunkIdx).get()__        assertEquals(restoreResponse.getRestoreInfo().totalShards(),_            restoreResponse.getRestoreInfo().successfulShards())__        ensureYellow()__    };tests,that,a,shrunken,index,created,via,the,shrink,apis,and,subsequently,snapshotted,can,be,restored,when,the,node,the,shrunken,index,was,created,on,is,no,longer,part,of,the,cluster;public,void,test,restore,shrink,index,throws,exception,logger,info,starting,a,master,node,and,a,data,node,internal,cluster,start,master,only,node,internal,cluster,start,data,only,node,final,client,client,client,final,string,repo,test,repo,final,string,snapshot,test,snap,final,string,source,idx,test,idx,final,string,shrunk,idx,test,idx,shrunk,logger,info,creating,repository,assert,acked,client,admin,cluster,prepare,put,repository,repo,set,type,fs,set,settings,settings,builder,put,location,random,repo,path,put,compress,random,boolean,assert,acked,prepare,create,source,idx,0,settings,builder,put,between,2,10,put,0,ensure,green,logger,info,indexing,some,data,index,request,builder,builders,new,index,request,builder,random,int,between,10,100,for,int,i,0,i,builders,length,i,builders,i,client,prepare,index,source,idx,type1,integer,to,string,i,set,source,field1,bar,i,index,random,true,builders,flush,and,refresh,logger,info,shrink,the,index,assert,acked,client,admin,indices,prepare,update,settings,source,idx,set,settings,settings,builder,put,index,blocks,write,true,get,assert,acked,client,admin,indices,prepare,resize,index,source,idx,shrunk,idx,get,logger,info,snapshot,the,shrunk,index,create,snapshot,response,create,response,client,admin,cluster,prepare,create,snapshot,repo,snapshot,set,wait,for,completion,true,set,indices,shrunk,idx,get,assert,equals,snapshot,state,success,create,response,get,snapshot,info,state,logger,info,delete,index,and,stop,the,data,node,assert,acked,client,admin,indices,prepare,delete,source,idx,get,assert,acked,client,admin,indices,prepare,delete,shrunk,idx,get,internal,cluster,stop,random,data,node,client,admin,cluster,prepare,health,set,timeout,30s,set,wait,for,nodes,1,logger,info,start,a,new,data,node,final,settings,data,settings,settings,builder,put,node,get,key,random,alpha,of,length,5,put,environment,get,key,create,temp,dir,build,internal,cluster,start,data,only,node,data,settings,client,admin,cluster,prepare,health,set,timeout,30s,set,wait,for,nodes,2,logger,info,restore,the,shrunk,index,and,ensure,all,shards,are,allocated,restore,snapshot,response,restore,response,client,admin,cluster,prepare,restore,snapshot,repo,snapshot,set,wait,for,completion,true,set,indices,shrunk,idx,get,assert,equals,restore,response,get,restore,info,total,shards,restore,response,get,restore,info,successful,shards,ensure,yellow
DedicatedClusterSnapshotRestoreIT -> public void testRestoreShrinkIndex() throws Exception;1527583663;Tests that a shrunken index (created via the shrink APIs) and subsequently snapshotted_can be restored when the node the shrunken index was created on is no longer part of_the cluster.;public void testRestoreShrinkIndex() throws Exception {_        logger.info("-->  starting a master node and a data node")__        internalCluster().startMasterOnlyNode()__        internalCluster().startDataOnlyNode()___        final Client client = client()__        final String repo = "test-repo"__        final String snapshot = "test-snap"__        final String sourceIdx = "test-idx"__        final String shrunkIdx = "test-idx-shrunk"___        logger.info("-->  creating repository")__        assertAcked(client.admin().cluster().preparePutRepository(repo).setType("fs")_            .setSettings(Settings.builder().put("location", randomRepoPath())_                             .put("compress", randomBoolean())))___        assertAcked(prepareCreate(sourceIdx, 0, Settings.builder()_            .put("number_of_shards", between(2, 10)).put("number_of_replicas", 0)))__        ensureGreen()___        logger.info("--> indexing some data")__        IndexRequestBuilder[] builders = new IndexRequestBuilder[randomIntBetween(10, 100)]__        for (int i = 0_ i < builders.length_ i++) {_            builders[i] = client().prepareIndex(sourceIdx, "type1",_                Integer.toString(i)).setSource("field1", "bar " + i)__        }_        indexRandom(true, builders)__        flushAndRefresh()___        logger.info("--> shrink the index")__        assertAcked(client.admin().indices().prepareUpdateSettings(sourceIdx)_            .setSettings(Settings.builder().put("index.blocks.write", true)).get())__        assertAcked(client.admin().indices().prepareResizeIndex(sourceIdx, shrunkIdx).get())___        logger.info("--> snapshot the shrunk index")__        CreateSnapshotResponse createResponse = client.admin().cluster()_            .prepareCreateSnapshot(repo, snapshot)_            .setWaitForCompletion(true).setIndices(shrunkIdx).get()__        assertEquals(SnapshotState.SUCCESS, createResponse.getSnapshotInfo().state())___        logger.info("--> delete index and stop the data node")__        assertAcked(client.admin().indices().prepareDelete(sourceIdx).get())__        assertAcked(client.admin().indices().prepareDelete(shrunkIdx).get())__        internalCluster().stopRandomDataNode()__        client().admin().cluster().prepareHealth().setTimeout("30s").setWaitForNodes("1")___        logger.info("--> start a new data node")__        final Settings dataSettings = Settings.builder()_            .put(Node.NODE_NAME_SETTING.getKey(), randomAlphaOfLength(5))_            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()) _            .build()__        internalCluster().startDataOnlyNode(dataSettings)__        client().admin().cluster().prepareHealth().setTimeout("30s").setWaitForNodes("2")___        logger.info("--> restore the shrunk index and ensure all shards are allocated")__        RestoreSnapshotResponse restoreResponse = client().admin().cluster()_            .prepareRestoreSnapshot(repo, snapshot).setWaitForCompletion(true)_            .setIndices(shrunkIdx).get()__        assertEquals(restoreResponse.getRestoreInfo().totalShards(),_            restoreResponse.getRestoreInfo().successfulShards())__        ensureYellow()__    };tests,that,a,shrunken,index,created,via,the,shrink,apis,and,subsequently,snapshotted,can,be,restored,when,the,node,the,shrunken,index,was,created,on,is,no,longer,part,of,the,cluster;public,void,test,restore,shrink,index,throws,exception,logger,info,starting,a,master,node,and,a,data,node,internal,cluster,start,master,only,node,internal,cluster,start,data,only,node,final,client,client,client,final,string,repo,test,repo,final,string,snapshot,test,snap,final,string,source,idx,test,idx,final,string,shrunk,idx,test,idx,shrunk,logger,info,creating,repository,assert,acked,client,admin,cluster,prepare,put,repository,repo,set,type,fs,set,settings,settings,builder,put,location,random,repo,path,put,compress,random,boolean,assert,acked,prepare,create,source,idx,0,settings,builder,put,between,2,10,put,0,ensure,green,logger,info,indexing,some,data,index,request,builder,builders,new,index,request,builder,random,int,between,10,100,for,int,i,0,i,builders,length,i,builders,i,client,prepare,index,source,idx,type1,integer,to,string,i,set,source,field1,bar,i,index,random,true,builders,flush,and,refresh,logger,info,shrink,the,index,assert,acked,client,admin,indices,prepare,update,settings,source,idx,set,settings,settings,builder,put,index,blocks,write,true,get,assert,acked,client,admin,indices,prepare,resize,index,source,idx,shrunk,idx,get,logger,info,snapshot,the,shrunk,index,create,snapshot,response,create,response,client,admin,cluster,prepare,create,snapshot,repo,snapshot,set,wait,for,completion,true,set,indices,shrunk,idx,get,assert,equals,snapshot,state,success,create,response,get,snapshot,info,state,logger,info,delete,index,and,stop,the,data,node,assert,acked,client,admin,indices,prepare,delete,source,idx,get,assert,acked,client,admin,indices,prepare,delete,shrunk,idx,get,internal,cluster,stop,random,data,node,client,admin,cluster,prepare,health,set,timeout,30s,set,wait,for,nodes,1,logger,info,start,a,new,data,node,final,settings,data,settings,settings,builder,put,node,get,key,random,alpha,of,length,5,put,environment,get,key,create,temp,dir,build,internal,cluster,start,data,only,node,data,settings,client,admin,cluster,prepare,health,set,timeout,30s,set,wait,for,nodes,2,logger,info,restore,the,shrunk,index,and,ensure,all,shards,are,allocated,restore,snapshot,response,restore,response,client,admin,cluster,prepare,restore,snapshot,repo,snapshot,set,wait,for,completion,true,set,indices,shrunk,idx,get,assert,equals,restore,response,get,restore,info,total,shards,restore,response,get,restore,info,successful,shards,ensure,yellow
DedicatedClusterSnapshotRestoreIT -> public void testRestoreShrinkIndex() throws Exception;1528103657;Tests that a shrunken index (created via the shrink APIs) and subsequently snapshotted_can be restored when the node the shrunken index was created on is no longer part of_the cluster.;public void testRestoreShrinkIndex() throws Exception {_        logger.info("-->  starting a master node and a data node")__        internalCluster().startMasterOnlyNode()__        internalCluster().startDataOnlyNode()___        final Client client = client()__        final String repo = "test-repo"__        final String snapshot = "test-snap"__        final String sourceIdx = "test-idx"__        final String shrunkIdx = "test-idx-shrunk"___        logger.info("-->  creating repository")__        assertAcked(client.admin().cluster().preparePutRepository(repo).setType("fs")_            .setSettings(Settings.builder().put("location", randomRepoPath())_                             .put("compress", randomBoolean())))___        assertAcked(prepareCreate(sourceIdx, 0, Settings.builder()_            .put("number_of_shards", between(2, 10)).put("number_of_replicas", 0)))__        ensureGreen()___        logger.info("--> indexing some data")__        IndexRequestBuilder[] builders = new IndexRequestBuilder[randomIntBetween(10, 100)]__        for (int i = 0_ i < builders.length_ i++) {_            builders[i] = client().prepareIndex(sourceIdx, "type1",_                Integer.toString(i)).setSource("field1", "bar " + i)__        }_        indexRandom(true, builders)__        flushAndRefresh()___        logger.info("--> shrink the index")__        assertAcked(client.admin().indices().prepareUpdateSettings(sourceIdx)_            .setSettings(Settings.builder().put("index.blocks.write", true)).get())__        assertAcked(client.admin().indices().prepareResizeIndex(sourceIdx, shrunkIdx).get())___        logger.info("--> snapshot the shrunk index")__        CreateSnapshotResponse createResponse = client.admin().cluster()_            .prepareCreateSnapshot(repo, snapshot)_            .setWaitForCompletion(true).setIndices(shrunkIdx).get()__        assertEquals(SnapshotState.SUCCESS, createResponse.getSnapshotInfo().state())___        logger.info("--> delete index and stop the data node")__        assertAcked(client.admin().indices().prepareDelete(sourceIdx).get())__        assertAcked(client.admin().indices().prepareDelete(shrunkIdx).get())__        internalCluster().stopRandomDataNode()__        client().admin().cluster().prepareHealth().setTimeout("30s").setWaitForNodes("1")___        logger.info("--> start a new data node")__        final Settings dataSettings = Settings.builder()_            .put(Node.NODE_NAME_SETTING.getKey(), randomAlphaOfLength(5))_            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()) _            .build()__        internalCluster().startDataOnlyNode(dataSettings)__        client().admin().cluster().prepareHealth().setTimeout("30s").setWaitForNodes("2")___        logger.info("--> restore the shrunk index and ensure all shards are allocated")__        RestoreSnapshotResponse restoreResponse = client().admin().cluster()_            .prepareRestoreSnapshot(repo, snapshot).setWaitForCompletion(true)_            .setIndices(shrunkIdx).get()__        assertEquals(restoreResponse.getRestoreInfo().totalShards(),_            restoreResponse.getRestoreInfo().successfulShards())__        ensureYellow()__    };tests,that,a,shrunken,index,created,via,the,shrink,apis,and,subsequently,snapshotted,can,be,restored,when,the,node,the,shrunken,index,was,created,on,is,no,longer,part,of,the,cluster;public,void,test,restore,shrink,index,throws,exception,logger,info,starting,a,master,node,and,a,data,node,internal,cluster,start,master,only,node,internal,cluster,start,data,only,node,final,client,client,client,final,string,repo,test,repo,final,string,snapshot,test,snap,final,string,source,idx,test,idx,final,string,shrunk,idx,test,idx,shrunk,logger,info,creating,repository,assert,acked,client,admin,cluster,prepare,put,repository,repo,set,type,fs,set,settings,settings,builder,put,location,random,repo,path,put,compress,random,boolean,assert,acked,prepare,create,source,idx,0,settings,builder,put,between,2,10,put,0,ensure,green,logger,info,indexing,some,data,index,request,builder,builders,new,index,request,builder,random,int,between,10,100,for,int,i,0,i,builders,length,i,builders,i,client,prepare,index,source,idx,type1,integer,to,string,i,set,source,field1,bar,i,index,random,true,builders,flush,and,refresh,logger,info,shrink,the,index,assert,acked,client,admin,indices,prepare,update,settings,source,idx,set,settings,settings,builder,put,index,blocks,write,true,get,assert,acked,client,admin,indices,prepare,resize,index,source,idx,shrunk,idx,get,logger,info,snapshot,the,shrunk,index,create,snapshot,response,create,response,client,admin,cluster,prepare,create,snapshot,repo,snapshot,set,wait,for,completion,true,set,indices,shrunk,idx,get,assert,equals,snapshot,state,success,create,response,get,snapshot,info,state,logger,info,delete,index,and,stop,the,data,node,assert,acked,client,admin,indices,prepare,delete,source,idx,get,assert,acked,client,admin,indices,prepare,delete,shrunk,idx,get,internal,cluster,stop,random,data,node,client,admin,cluster,prepare,health,set,timeout,30s,set,wait,for,nodes,1,logger,info,start,a,new,data,node,final,settings,data,settings,settings,builder,put,node,get,key,random,alpha,of,length,5,put,environment,get,key,create,temp,dir,build,internal,cluster,start,data,only,node,data,settings,client,admin,cluster,prepare,health,set,timeout,30s,set,wait,for,nodes,2,logger,info,restore,the,shrunk,index,and,ensure,all,shards,are,allocated,restore,snapshot,response,restore,response,client,admin,cluster,prepare,restore,snapshot,repo,snapshot,set,wait,for,completion,true,set,indices,shrunk,idx,get,assert,equals,restore,response,get,restore,info,total,shards,restore,response,get,restore,info,successful,shards,ensure,yellow
DedicatedClusterSnapshotRestoreIT -> public void testRestoreShrinkIndex() throws Exception;1533230566;Tests that a shrunken index (created via the shrink APIs) and subsequently snapshotted_can be restored when the node the shrunken index was created on is no longer part of_the cluster.;public void testRestoreShrinkIndex() throws Exception {_        logger.info("-->  starting a master node and a data node")__        internalCluster().startMasterOnlyNode()__        internalCluster().startDataOnlyNode()___        final Client client = client()__        final String repo = "test-repo"__        final String snapshot = "test-snap"__        final String sourceIdx = "test-idx"__        final String shrunkIdx = "test-idx-shrunk"___        logger.info("-->  creating repository")__        assertAcked(client.admin().cluster().preparePutRepository(repo).setType("fs")_            .setSettings(Settings.builder().put("location", randomRepoPath())_                             .put("compress", randomBoolean())))___        assertAcked(prepareCreate(sourceIdx, 0, Settings.builder()_            .put("number_of_shards", between(2, 10)).put("number_of_replicas", 0)))__        ensureGreen()___        logger.info("--> indexing some data")__        IndexRequestBuilder[] builders = new IndexRequestBuilder[randomIntBetween(10, 100)]__        for (int i = 0_ i < builders.length_ i++) {_            builders[i] = client().prepareIndex(sourceIdx, "type1",_                Integer.toString(i)).setSource("field1", "bar " + i)__        }_        indexRandom(true, builders)__        flushAndRefresh()___        logger.info("--> shrink the index")__        assertAcked(client.admin().indices().prepareUpdateSettings(sourceIdx)_            .setSettings(Settings.builder().put("index.blocks.write", true)).get())__        assertAcked(client.admin().indices().prepareResizeIndex(sourceIdx, shrunkIdx).get())___        logger.info("--> snapshot the shrunk index")__        CreateSnapshotResponse createResponse = client.admin().cluster()_            .prepareCreateSnapshot(repo, snapshot)_            .setWaitForCompletion(true).setIndices(shrunkIdx).get()__        assertEquals(SnapshotState.SUCCESS, createResponse.getSnapshotInfo().state())___        logger.info("--> delete index and stop the data node")__        assertAcked(client.admin().indices().prepareDelete(sourceIdx).get())__        assertAcked(client.admin().indices().prepareDelete(shrunkIdx).get())__        internalCluster().stopRandomDataNode()__        client().admin().cluster().prepareHealth().setTimeout("30s").setWaitForNodes("1")___        logger.info("--> start a new data node")__        final Settings dataSettings = Settings.builder()_            .put(Node.NODE_NAME_SETTING.getKey(), randomAlphaOfLength(5))_            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()) _            .build()__        internalCluster().startDataOnlyNode(dataSettings)__        client().admin().cluster().prepareHealth().setTimeout("30s").setWaitForNodes("2")___        logger.info("--> restore the shrunk index and ensure all shards are allocated")__        RestoreSnapshotResponse restoreResponse = client().admin().cluster()_            .prepareRestoreSnapshot(repo, snapshot).setWaitForCompletion(true)_            .setIndices(shrunkIdx).get()__        assertEquals(restoreResponse.getRestoreInfo().totalShards(),_            restoreResponse.getRestoreInfo().successfulShards())__        ensureYellow()__    };tests,that,a,shrunken,index,created,via,the,shrink,apis,and,subsequently,snapshotted,can,be,restored,when,the,node,the,shrunken,index,was,created,on,is,no,longer,part,of,the,cluster;public,void,test,restore,shrink,index,throws,exception,logger,info,starting,a,master,node,and,a,data,node,internal,cluster,start,master,only,node,internal,cluster,start,data,only,node,final,client,client,client,final,string,repo,test,repo,final,string,snapshot,test,snap,final,string,source,idx,test,idx,final,string,shrunk,idx,test,idx,shrunk,logger,info,creating,repository,assert,acked,client,admin,cluster,prepare,put,repository,repo,set,type,fs,set,settings,settings,builder,put,location,random,repo,path,put,compress,random,boolean,assert,acked,prepare,create,source,idx,0,settings,builder,put,between,2,10,put,0,ensure,green,logger,info,indexing,some,data,index,request,builder,builders,new,index,request,builder,random,int,between,10,100,for,int,i,0,i,builders,length,i,builders,i,client,prepare,index,source,idx,type1,integer,to,string,i,set,source,field1,bar,i,index,random,true,builders,flush,and,refresh,logger,info,shrink,the,index,assert,acked,client,admin,indices,prepare,update,settings,source,idx,set,settings,settings,builder,put,index,blocks,write,true,get,assert,acked,client,admin,indices,prepare,resize,index,source,idx,shrunk,idx,get,logger,info,snapshot,the,shrunk,index,create,snapshot,response,create,response,client,admin,cluster,prepare,create,snapshot,repo,snapshot,set,wait,for,completion,true,set,indices,shrunk,idx,get,assert,equals,snapshot,state,success,create,response,get,snapshot,info,state,logger,info,delete,index,and,stop,the,data,node,assert,acked,client,admin,indices,prepare,delete,source,idx,get,assert,acked,client,admin,indices,prepare,delete,shrunk,idx,get,internal,cluster,stop,random,data,node,client,admin,cluster,prepare,health,set,timeout,30s,set,wait,for,nodes,1,logger,info,start,a,new,data,node,final,settings,data,settings,settings,builder,put,node,get,key,random,alpha,of,length,5,put,environment,get,key,create,temp,dir,build,internal,cluster,start,data,only,node,data,settings,client,admin,cluster,prepare,health,set,timeout,30s,set,wait,for,nodes,2,logger,info,restore,the,shrunk,index,and,ensure,all,shards,are,allocated,restore,snapshot,response,restore,response,client,admin,cluster,prepare,restore,snapshot,repo,snapshot,set,wait,for,completion,true,set,indices,shrunk,idx,get,assert,equals,restore,response,get,restore,info,total,shards,restore,response,get,restore,info,successful,shards,ensure,yellow
DedicatedClusterSnapshotRestoreIT -> public void testRestoreShrinkIndex() throws Exception;1534362961;Tests that a shrunken index (created via the shrink APIs) and subsequently snapshotted_can be restored when the node the shrunken index was created on is no longer part of_the cluster.;public void testRestoreShrinkIndex() throws Exception {_        logger.info("-->  starting a master node and a data node")__        internalCluster().startMasterOnlyNode()__        internalCluster().startDataOnlyNode()___        final Client client = client()__        final String repo = "test-repo"__        final String snapshot = "test-snap"__        final String sourceIdx = "test-idx"__        final String shrunkIdx = "test-idx-shrunk"___        logger.info("-->  creating repository")__        assertAcked(client.admin().cluster().preparePutRepository(repo).setType("fs")_            .setSettings(Settings.builder().put("location", randomRepoPath())_                             .put("compress", randomBoolean())))___        assertAcked(prepareCreate(sourceIdx, 0, Settings.builder()_            .put("number_of_shards", between(2, 10)).put("number_of_replicas", 0)))__        ensureGreen()___        logger.info("--> indexing some data")__        IndexRequestBuilder[] builders = new IndexRequestBuilder[randomIntBetween(10, 100)]__        for (int i = 0_ i < builders.length_ i++) {_            builders[i] = client().prepareIndex(sourceIdx, "type1",_                Integer.toString(i)).setSource("field1", "bar " + i)__        }_        indexRandom(true, builders)__        flushAndRefresh()___        logger.info("--> shrink the index")__        assertAcked(client.admin().indices().prepareUpdateSettings(sourceIdx)_            .setSettings(Settings.builder().put("index.blocks.write", true)).get())__        assertAcked(client.admin().indices().prepareResizeIndex(sourceIdx, shrunkIdx).get())___        logger.info("--> snapshot the shrunk index")__        CreateSnapshotResponse createResponse = client.admin().cluster()_            .prepareCreateSnapshot(repo, snapshot)_            .setWaitForCompletion(true).setIndices(shrunkIdx).get()__        assertEquals(SnapshotState.SUCCESS, createResponse.getSnapshotInfo().state())___        logger.info("--> delete index and stop the data node")__        assertAcked(client.admin().indices().prepareDelete(sourceIdx).get())__        assertAcked(client.admin().indices().prepareDelete(shrunkIdx).get())__        internalCluster().stopRandomDataNode()__        client().admin().cluster().prepareHealth().setTimeout("30s").setWaitForNodes("1")___        logger.info("--> start a new data node")__        final Settings dataSettings = Settings.builder()_            .put(Node.NODE_NAME_SETTING.getKey(), randomAlphaOfLength(5))_            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()) _            .build()__        internalCluster().startDataOnlyNode(dataSettings)__        client().admin().cluster().prepareHealth().setTimeout("30s").setWaitForNodes("2")___        logger.info("--> restore the shrunk index and ensure all shards are allocated")__        RestoreSnapshotResponse restoreResponse = client().admin().cluster()_            .prepareRestoreSnapshot(repo, snapshot).setWaitForCompletion(true)_            .setIndices(shrunkIdx).get()__        assertEquals(restoreResponse.getRestoreInfo().totalShards(),_            restoreResponse.getRestoreInfo().successfulShards())__        ensureYellow()__    };tests,that,a,shrunken,index,created,via,the,shrink,apis,and,subsequently,snapshotted,can,be,restored,when,the,node,the,shrunken,index,was,created,on,is,no,longer,part,of,the,cluster;public,void,test,restore,shrink,index,throws,exception,logger,info,starting,a,master,node,and,a,data,node,internal,cluster,start,master,only,node,internal,cluster,start,data,only,node,final,client,client,client,final,string,repo,test,repo,final,string,snapshot,test,snap,final,string,source,idx,test,idx,final,string,shrunk,idx,test,idx,shrunk,logger,info,creating,repository,assert,acked,client,admin,cluster,prepare,put,repository,repo,set,type,fs,set,settings,settings,builder,put,location,random,repo,path,put,compress,random,boolean,assert,acked,prepare,create,source,idx,0,settings,builder,put,between,2,10,put,0,ensure,green,logger,info,indexing,some,data,index,request,builder,builders,new,index,request,builder,random,int,between,10,100,for,int,i,0,i,builders,length,i,builders,i,client,prepare,index,source,idx,type1,integer,to,string,i,set,source,field1,bar,i,index,random,true,builders,flush,and,refresh,logger,info,shrink,the,index,assert,acked,client,admin,indices,prepare,update,settings,source,idx,set,settings,settings,builder,put,index,blocks,write,true,get,assert,acked,client,admin,indices,prepare,resize,index,source,idx,shrunk,idx,get,logger,info,snapshot,the,shrunk,index,create,snapshot,response,create,response,client,admin,cluster,prepare,create,snapshot,repo,snapshot,set,wait,for,completion,true,set,indices,shrunk,idx,get,assert,equals,snapshot,state,success,create,response,get,snapshot,info,state,logger,info,delete,index,and,stop,the,data,node,assert,acked,client,admin,indices,prepare,delete,source,idx,get,assert,acked,client,admin,indices,prepare,delete,shrunk,idx,get,internal,cluster,stop,random,data,node,client,admin,cluster,prepare,health,set,timeout,30s,set,wait,for,nodes,1,logger,info,start,a,new,data,node,final,settings,data,settings,settings,builder,put,node,get,key,random,alpha,of,length,5,put,environment,get,key,create,temp,dir,build,internal,cluster,start,data,only,node,data,settings,client,admin,cluster,prepare,health,set,timeout,30s,set,wait,for,nodes,2,logger,info,restore,the,shrunk,index,and,ensure,all,shards,are,allocated,restore,snapshot,response,restore,response,client,admin,cluster,prepare,restore,snapshot,repo,snapshot,set,wait,for,completion,true,set,indices,shrunk,idx,get,assert,equals,restore,response,get,restore,info,total,shards,restore,response,get,restore,info,successful,shards,ensure,yellow
DedicatedClusterSnapshotRestoreIT -> public void testRestoreShrinkIndex() throws Exception;1541092382;Tests that a shrunken index (created via the shrink APIs) and subsequently snapshotted_can be restored when the node the shrunken index was created on is no longer part of_the cluster.;public void testRestoreShrinkIndex() throws Exception {_        logger.info("-->  starting a master node and a data node")__        internalCluster().startMasterOnlyNode()__        internalCluster().startDataOnlyNode()___        final Client client = client()__        final String repo = "test-repo"__        final String snapshot = "test-snap"__        final String sourceIdx = "test-idx"__        final String shrunkIdx = "test-idx-shrunk"___        logger.info("-->  creating repository")__        assertAcked(client.admin().cluster().preparePutRepository(repo).setType("fs")_            .setSettings(Settings.builder().put("location", randomRepoPath())_                             .put("compress", randomBoolean())))___        assertAcked(prepareCreate(sourceIdx, 0, Settings.builder()_            .put("number_of_shards", between(2, 10)).put("number_of_replicas", 0)))__        ensureGreen()___        logger.info("--> indexing some data")__        IndexRequestBuilder[] builders = new IndexRequestBuilder[randomIntBetween(10, 100)]__        for (int i = 0_ i < builders.length_ i++) {_            builders[i] = client().prepareIndex(sourceIdx, "type1",_                Integer.toString(i)).setSource("field1", "bar " + i)__        }_        indexRandom(true, builders)__        flushAndRefresh()___        logger.info("--> shrink the index")__        assertAcked(client.admin().indices().prepareUpdateSettings(sourceIdx)_            .setSettings(Settings.builder().put("index.blocks.write", true)).get())__        assertAcked(client.admin().indices().prepareResizeIndex(sourceIdx, shrunkIdx).get())___        logger.info("--> snapshot the shrunk index")__        CreateSnapshotResponse createResponse = client.admin().cluster()_            .prepareCreateSnapshot(repo, snapshot)_            .setWaitForCompletion(true).setIndices(shrunkIdx).get()__        assertEquals(SnapshotState.SUCCESS, createResponse.getSnapshotInfo().state())___        logger.info("--> delete index and stop the data node")__        assertAcked(client.admin().indices().prepareDelete(sourceIdx).get())__        assertAcked(client.admin().indices().prepareDelete(shrunkIdx).get())__        internalCluster().stopRandomDataNode()__        client().admin().cluster().prepareHealth().setTimeout("30s").setWaitForNodes("1")___        logger.info("--> start a new data node")__        final Settings dataSettings = Settings.builder()_            .put(Node.NODE_NAME_SETTING.getKey(), randomAlphaOfLength(5))_            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()) _            .build()__        internalCluster().startDataOnlyNode(dataSettings)__        client().admin().cluster().prepareHealth().setTimeout("30s").setWaitForNodes("2")___        logger.info("--> restore the shrunk index and ensure all shards are allocated")__        RestoreSnapshotResponse restoreResponse = client().admin().cluster()_            .prepareRestoreSnapshot(repo, snapshot).setWaitForCompletion(true)_            .setIndices(shrunkIdx).get()__        assertEquals(restoreResponse.getRestoreInfo().totalShards(),_            restoreResponse.getRestoreInfo().successfulShards())__        ensureYellow()__    };tests,that,a,shrunken,index,created,via,the,shrink,apis,and,subsequently,snapshotted,can,be,restored,when,the,node,the,shrunken,index,was,created,on,is,no,longer,part,of,the,cluster;public,void,test,restore,shrink,index,throws,exception,logger,info,starting,a,master,node,and,a,data,node,internal,cluster,start,master,only,node,internal,cluster,start,data,only,node,final,client,client,client,final,string,repo,test,repo,final,string,snapshot,test,snap,final,string,source,idx,test,idx,final,string,shrunk,idx,test,idx,shrunk,logger,info,creating,repository,assert,acked,client,admin,cluster,prepare,put,repository,repo,set,type,fs,set,settings,settings,builder,put,location,random,repo,path,put,compress,random,boolean,assert,acked,prepare,create,source,idx,0,settings,builder,put,between,2,10,put,0,ensure,green,logger,info,indexing,some,data,index,request,builder,builders,new,index,request,builder,random,int,between,10,100,for,int,i,0,i,builders,length,i,builders,i,client,prepare,index,source,idx,type1,integer,to,string,i,set,source,field1,bar,i,index,random,true,builders,flush,and,refresh,logger,info,shrink,the,index,assert,acked,client,admin,indices,prepare,update,settings,source,idx,set,settings,settings,builder,put,index,blocks,write,true,get,assert,acked,client,admin,indices,prepare,resize,index,source,idx,shrunk,idx,get,logger,info,snapshot,the,shrunk,index,create,snapshot,response,create,response,client,admin,cluster,prepare,create,snapshot,repo,snapshot,set,wait,for,completion,true,set,indices,shrunk,idx,get,assert,equals,snapshot,state,success,create,response,get,snapshot,info,state,logger,info,delete,index,and,stop,the,data,node,assert,acked,client,admin,indices,prepare,delete,source,idx,get,assert,acked,client,admin,indices,prepare,delete,shrunk,idx,get,internal,cluster,stop,random,data,node,client,admin,cluster,prepare,health,set,timeout,30s,set,wait,for,nodes,1,logger,info,start,a,new,data,node,final,settings,data,settings,settings,builder,put,node,get,key,random,alpha,of,length,5,put,environment,get,key,create,temp,dir,build,internal,cluster,start,data,only,node,data,settings,client,admin,cluster,prepare,health,set,timeout,30s,set,wait,for,nodes,2,logger,info,restore,the,shrunk,index,and,ensure,all,shards,are,allocated,restore,snapshot,response,restore,response,client,admin,cluster,prepare,restore,snapshot,repo,snapshot,set,wait,for,completion,true,set,indices,shrunk,idx,get,assert,equals,restore,response,get,restore,info,total,shards,restore,response,get,restore,info,successful,shards,ensure,yellow
DedicatedClusterSnapshotRestoreIT -> public void testRestoreShrinkIndex() throws Exception;1542742188;Tests that a shrunken index (created via the shrink APIs) and subsequently snapshotted_can be restored when the node the shrunken index was created on is no longer part of_the cluster.;public void testRestoreShrinkIndex() throws Exception {_        logger.info("-->  starting a master node and a data node")__        internalCluster().startMasterOnlyNode()__        internalCluster().startDataOnlyNode()___        final Client client = client()__        final String repo = "test-repo"__        final String snapshot = "test-snap"__        final String sourceIdx = "test-idx"__        final String shrunkIdx = "test-idx-shrunk"___        logger.info("-->  creating repository")__        assertAcked(client.admin().cluster().preparePutRepository(repo).setType("fs")_            .setSettings(Settings.builder().put("location", randomRepoPath())_                             .put("compress", randomBoolean())))___        assertAcked(prepareCreate(sourceIdx, 0, Settings.builder()_            .put("number_of_shards", between(2, 10)).put("number_of_replicas", 0)))__        ensureGreen()___        logger.info("--> indexing some data")__        IndexRequestBuilder[] builders = new IndexRequestBuilder[randomIntBetween(10, 100)]__        for (int i = 0_ i < builders.length_ i++) {_            builders[i] = client().prepareIndex(sourceIdx, "type1",_                Integer.toString(i)).setSource("field1", "bar " + i)__        }_        indexRandom(true, builders)__        flushAndRefresh()___        logger.info("--> shrink the index")__        assertAcked(client.admin().indices().prepareUpdateSettings(sourceIdx)_            .setSettings(Settings.builder().put("index.blocks.write", true)).get())__        assertAcked(client.admin().indices().prepareResizeIndex(sourceIdx, shrunkIdx).get())___        logger.info("--> snapshot the shrunk index")__        CreateSnapshotResponse createResponse = client.admin().cluster()_            .prepareCreateSnapshot(repo, snapshot)_            .setWaitForCompletion(true).setIndices(shrunkIdx).get()__        assertEquals(SnapshotState.SUCCESS, createResponse.getSnapshotInfo().state())___        logger.info("--> delete index and stop the data node")__        assertAcked(client.admin().indices().prepareDelete(sourceIdx).get())__        assertAcked(client.admin().indices().prepareDelete(shrunkIdx).get())__        internalCluster().stopRandomDataNode()__        client().admin().cluster().prepareHealth().setTimeout("30s").setWaitForNodes("1")___        logger.info("--> start a new data node")__        final Settings dataSettings = Settings.builder()_            .put(Node.NODE_NAME_SETTING.getKey(), randomAlphaOfLength(5))_            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()) _            .build()__        internalCluster().startDataOnlyNode(dataSettings)__        client().admin().cluster().prepareHealth().setTimeout("30s").setWaitForNodes("2")___        logger.info("--> restore the shrunk index and ensure all shards are allocated")__        RestoreSnapshotResponse restoreResponse = client().admin().cluster()_            .prepareRestoreSnapshot(repo, snapshot).setWaitForCompletion(true)_            .setIndices(shrunkIdx).get()__        assertEquals(restoreResponse.getRestoreInfo().totalShards(),_            restoreResponse.getRestoreInfo().successfulShards())__        ensureYellow()__    };tests,that,a,shrunken,index,created,via,the,shrink,apis,and,subsequently,snapshotted,can,be,restored,when,the,node,the,shrunken,index,was,created,on,is,no,longer,part,of,the,cluster;public,void,test,restore,shrink,index,throws,exception,logger,info,starting,a,master,node,and,a,data,node,internal,cluster,start,master,only,node,internal,cluster,start,data,only,node,final,client,client,client,final,string,repo,test,repo,final,string,snapshot,test,snap,final,string,source,idx,test,idx,final,string,shrunk,idx,test,idx,shrunk,logger,info,creating,repository,assert,acked,client,admin,cluster,prepare,put,repository,repo,set,type,fs,set,settings,settings,builder,put,location,random,repo,path,put,compress,random,boolean,assert,acked,prepare,create,source,idx,0,settings,builder,put,between,2,10,put,0,ensure,green,logger,info,indexing,some,data,index,request,builder,builders,new,index,request,builder,random,int,between,10,100,for,int,i,0,i,builders,length,i,builders,i,client,prepare,index,source,idx,type1,integer,to,string,i,set,source,field1,bar,i,index,random,true,builders,flush,and,refresh,logger,info,shrink,the,index,assert,acked,client,admin,indices,prepare,update,settings,source,idx,set,settings,settings,builder,put,index,blocks,write,true,get,assert,acked,client,admin,indices,prepare,resize,index,source,idx,shrunk,idx,get,logger,info,snapshot,the,shrunk,index,create,snapshot,response,create,response,client,admin,cluster,prepare,create,snapshot,repo,snapshot,set,wait,for,completion,true,set,indices,shrunk,idx,get,assert,equals,snapshot,state,success,create,response,get,snapshot,info,state,logger,info,delete,index,and,stop,the,data,node,assert,acked,client,admin,indices,prepare,delete,source,idx,get,assert,acked,client,admin,indices,prepare,delete,shrunk,idx,get,internal,cluster,stop,random,data,node,client,admin,cluster,prepare,health,set,timeout,30s,set,wait,for,nodes,1,logger,info,start,a,new,data,node,final,settings,data,settings,settings,builder,put,node,get,key,random,alpha,of,length,5,put,environment,get,key,create,temp,dir,build,internal,cluster,start,data,only,node,data,settings,client,admin,cluster,prepare,health,set,timeout,30s,set,wait,for,nodes,2,logger,info,restore,the,shrunk,index,and,ensure,all,shards,are,allocated,restore,snapshot,response,restore,response,client,admin,cluster,prepare,restore,snapshot,repo,snapshot,set,wait,for,completion,true,set,indices,shrunk,idx,get,assert,equals,restore,response,get,restore,info,total,shards,restore,response,get,restore,info,successful,shards,ensure,yellow
DedicatedClusterSnapshotRestoreIT -> public void testRestoreShrinkIndex() throws Exception;1543851569;Tests that a shrunken index (created via the shrink APIs) and subsequently snapshotted_can be restored when the node the shrunken index was created on is no longer part of_the cluster.;public void testRestoreShrinkIndex() throws Exception {_        logger.info("-->  starting a master node and a data node")__        internalCluster().startMasterOnlyNode()__        internalCluster().startDataOnlyNode()___        final Client client = client()__        final String repo = "test-repo"__        final String snapshot = "test-snap"__        final String sourceIdx = "test-idx"__        final String shrunkIdx = "test-idx-shrunk"___        logger.info("-->  creating repository")__        assertAcked(client.admin().cluster().preparePutRepository(repo).setType("fs")_            .setSettings(Settings.builder().put("location", randomRepoPath())_                             .put("compress", randomBoolean())))___        assertAcked(prepareCreate(sourceIdx, 0, Settings.builder()_            .put("number_of_shards", between(2, 10)).put("number_of_replicas", 0)))__        ensureGreen()___        logger.info("--> indexing some data")__        IndexRequestBuilder[] builders = new IndexRequestBuilder[randomIntBetween(10, 100)]__        for (int i = 0_ i < builders.length_ i++) {_            builders[i] = client().prepareIndex(sourceIdx, "type1",_                Integer.toString(i)).setSource("field1", "bar " + i)__        }_        indexRandom(true, builders)__        flushAndRefresh()___        logger.info("--> shrink the index")__        assertAcked(client.admin().indices().prepareUpdateSettings(sourceIdx)_            .setSettings(Settings.builder().put("index.blocks.write", true)).get())__        assertAcked(client.admin().indices().prepareResizeIndex(sourceIdx, shrunkIdx).get())___        logger.info("--> snapshot the shrunk index")__        CreateSnapshotResponse createResponse = client.admin().cluster()_            .prepareCreateSnapshot(repo, snapshot)_            .setWaitForCompletion(true).setIndices(shrunkIdx).get()__        assertEquals(SnapshotState.SUCCESS, createResponse.getSnapshotInfo().state())___        logger.info("--> delete index and stop the data node")__        assertAcked(client.admin().indices().prepareDelete(sourceIdx).get())__        assertAcked(client.admin().indices().prepareDelete(shrunkIdx).get())__        internalCluster().stopRandomDataNode()__        client().admin().cluster().prepareHealth().setTimeout("30s").setWaitForNodes("1")___        logger.info("--> start a new data node")__        final Settings dataSettings = Settings.builder()_            .put(Node.NODE_NAME_SETTING.getKey(), randomAlphaOfLength(5))_            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()) _            .build()__        internalCluster().startDataOnlyNode(dataSettings)__        client().admin().cluster().prepareHealth().setTimeout("30s").setWaitForNodes("2")___        logger.info("--> restore the shrunk index and ensure all shards are allocated")__        RestoreSnapshotResponse restoreResponse = client().admin().cluster()_            .prepareRestoreSnapshot(repo, snapshot).setWaitForCompletion(true)_            .setIndices(shrunkIdx).get()__        assertEquals(restoreResponse.getRestoreInfo().totalShards(),_            restoreResponse.getRestoreInfo().successfulShards())__        ensureYellow()__    };tests,that,a,shrunken,index,created,via,the,shrink,apis,and,subsequently,snapshotted,can,be,restored,when,the,node,the,shrunken,index,was,created,on,is,no,longer,part,of,the,cluster;public,void,test,restore,shrink,index,throws,exception,logger,info,starting,a,master,node,and,a,data,node,internal,cluster,start,master,only,node,internal,cluster,start,data,only,node,final,client,client,client,final,string,repo,test,repo,final,string,snapshot,test,snap,final,string,source,idx,test,idx,final,string,shrunk,idx,test,idx,shrunk,logger,info,creating,repository,assert,acked,client,admin,cluster,prepare,put,repository,repo,set,type,fs,set,settings,settings,builder,put,location,random,repo,path,put,compress,random,boolean,assert,acked,prepare,create,source,idx,0,settings,builder,put,between,2,10,put,0,ensure,green,logger,info,indexing,some,data,index,request,builder,builders,new,index,request,builder,random,int,between,10,100,for,int,i,0,i,builders,length,i,builders,i,client,prepare,index,source,idx,type1,integer,to,string,i,set,source,field1,bar,i,index,random,true,builders,flush,and,refresh,logger,info,shrink,the,index,assert,acked,client,admin,indices,prepare,update,settings,source,idx,set,settings,settings,builder,put,index,blocks,write,true,get,assert,acked,client,admin,indices,prepare,resize,index,source,idx,shrunk,idx,get,logger,info,snapshot,the,shrunk,index,create,snapshot,response,create,response,client,admin,cluster,prepare,create,snapshot,repo,snapshot,set,wait,for,completion,true,set,indices,shrunk,idx,get,assert,equals,snapshot,state,success,create,response,get,snapshot,info,state,logger,info,delete,index,and,stop,the,data,node,assert,acked,client,admin,indices,prepare,delete,source,idx,get,assert,acked,client,admin,indices,prepare,delete,shrunk,idx,get,internal,cluster,stop,random,data,node,client,admin,cluster,prepare,health,set,timeout,30s,set,wait,for,nodes,1,logger,info,start,a,new,data,node,final,settings,data,settings,settings,builder,put,node,get,key,random,alpha,of,length,5,put,environment,get,key,create,temp,dir,build,internal,cluster,start,data,only,node,data,settings,client,admin,cluster,prepare,health,set,timeout,30s,set,wait,for,nodes,2,logger,info,restore,the,shrunk,index,and,ensure,all,shards,are,allocated,restore,snapshot,response,restore,response,client,admin,cluster,prepare,restore,snapshot,repo,snapshot,set,wait,for,completion,true,set,indices,shrunk,idx,get,assert,equals,restore,response,get,restore,info,total,shards,restore,response,get,restore,info,successful,shards,ensure,yellow
DedicatedClusterSnapshotRestoreIT -> public void testRestoreShrinkIndex() throws Exception;1544035746;Tests that a shrunken index (created via the shrink APIs) and subsequently snapshotted_can be restored when the node the shrunken index was created on is no longer part of_the cluster.;public void testRestoreShrinkIndex() throws Exception {_        logger.info("-->  starting a master node and a data node")__        internalCluster().startMasterOnlyNode()__        internalCluster().startDataOnlyNode()___        final Client client = client()__        final String repo = "test-repo"__        final String snapshot = "test-snap"__        final String sourceIdx = "test-idx"__        final String shrunkIdx = "test-idx-shrunk"___        logger.info("-->  creating repository")__        assertAcked(client.admin().cluster().preparePutRepository(repo).setType("fs")_            .setSettings(Settings.builder().put("location", randomRepoPath())_                             .put("compress", randomBoolean())))___        assertAcked(prepareCreate(sourceIdx, 0, Settings.builder()_            .put("number_of_shards", between(2, 10)).put("number_of_replicas", 0)))__        ensureGreen()___        logger.info("--> indexing some data")__        IndexRequestBuilder[] builders = new IndexRequestBuilder[randomIntBetween(10, 100)]__        for (int i = 0_ i < builders.length_ i++) {_            builders[i] = client().prepareIndex(sourceIdx, "type1",_                Integer.toString(i)).setSource("field1", "bar " + i)__        }_        indexRandom(true, builders)__        flushAndRefresh()___        logger.info("--> shrink the index")__        assertAcked(client.admin().indices().prepareUpdateSettings(sourceIdx)_            .setSettings(Settings.builder().put("index.blocks.write", true)).get())__        assertAcked(client.admin().indices().prepareResizeIndex(sourceIdx, shrunkIdx).get())___        logger.info("--> snapshot the shrunk index")__        CreateSnapshotResponse createResponse = client.admin().cluster()_            .prepareCreateSnapshot(repo, snapshot)_            .setWaitForCompletion(true).setIndices(shrunkIdx).get()__        assertEquals(SnapshotState.SUCCESS, createResponse.getSnapshotInfo().state())___        logger.info("--> delete index and stop the data node")__        assertAcked(client.admin().indices().prepareDelete(sourceIdx).get())__        assertAcked(client.admin().indices().prepareDelete(shrunkIdx).get())__        internalCluster().stopRandomDataNode()__        client().admin().cluster().prepareHealth().setTimeout("30s").setWaitForNodes("1")___        logger.info("--> start a new data node")__        final Settings dataSettings = Settings.builder()_            .put(Node.NODE_NAME_SETTING.getKey(), randomAlphaOfLength(5))_            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()) _            .build()__        internalCluster().startDataOnlyNode(dataSettings)__        client().admin().cluster().prepareHealth().setTimeout("30s").setWaitForNodes("2")___        logger.info("--> restore the shrunk index and ensure all shards are allocated")__        RestoreSnapshotResponse restoreResponse = client().admin().cluster()_            .prepareRestoreSnapshot(repo, snapshot).setWaitForCompletion(true)_            .setIndices(shrunkIdx).get()__        assertEquals(restoreResponse.getRestoreInfo().totalShards(),_            restoreResponse.getRestoreInfo().successfulShards())__        ensureYellow()__    };tests,that,a,shrunken,index,created,via,the,shrink,apis,and,subsequently,snapshotted,can,be,restored,when,the,node,the,shrunken,index,was,created,on,is,no,longer,part,of,the,cluster;public,void,test,restore,shrink,index,throws,exception,logger,info,starting,a,master,node,and,a,data,node,internal,cluster,start,master,only,node,internal,cluster,start,data,only,node,final,client,client,client,final,string,repo,test,repo,final,string,snapshot,test,snap,final,string,source,idx,test,idx,final,string,shrunk,idx,test,idx,shrunk,logger,info,creating,repository,assert,acked,client,admin,cluster,prepare,put,repository,repo,set,type,fs,set,settings,settings,builder,put,location,random,repo,path,put,compress,random,boolean,assert,acked,prepare,create,source,idx,0,settings,builder,put,between,2,10,put,0,ensure,green,logger,info,indexing,some,data,index,request,builder,builders,new,index,request,builder,random,int,between,10,100,for,int,i,0,i,builders,length,i,builders,i,client,prepare,index,source,idx,type1,integer,to,string,i,set,source,field1,bar,i,index,random,true,builders,flush,and,refresh,logger,info,shrink,the,index,assert,acked,client,admin,indices,prepare,update,settings,source,idx,set,settings,settings,builder,put,index,blocks,write,true,get,assert,acked,client,admin,indices,prepare,resize,index,source,idx,shrunk,idx,get,logger,info,snapshot,the,shrunk,index,create,snapshot,response,create,response,client,admin,cluster,prepare,create,snapshot,repo,snapshot,set,wait,for,completion,true,set,indices,shrunk,idx,get,assert,equals,snapshot,state,success,create,response,get,snapshot,info,state,logger,info,delete,index,and,stop,the,data,node,assert,acked,client,admin,indices,prepare,delete,source,idx,get,assert,acked,client,admin,indices,prepare,delete,shrunk,idx,get,internal,cluster,stop,random,data,node,client,admin,cluster,prepare,health,set,timeout,30s,set,wait,for,nodes,1,logger,info,start,a,new,data,node,final,settings,data,settings,settings,builder,put,node,get,key,random,alpha,of,length,5,put,environment,get,key,create,temp,dir,build,internal,cluster,start,data,only,node,data,settings,client,admin,cluster,prepare,health,set,timeout,30s,set,wait,for,nodes,2,logger,info,restore,the,shrunk,index,and,ensure,all,shards,are,allocated,restore,snapshot,response,restore,response,client,admin,cluster,prepare,restore,snapshot,repo,snapshot,set,wait,for,completion,true,set,indices,shrunk,idx,get,assert,equals,restore,response,get,restore,info,total,shards,restore,response,get,restore,info,successful,shards,ensure,yellow
DedicatedClusterSnapshotRestoreIT -> public void testRestoreShrinkIndex() throws Exception;1544043998;Tests that a shrunken index (created via the shrink APIs) and subsequently snapshotted_can be restored when the node the shrunken index was created on is no longer part of_the cluster.;public void testRestoreShrinkIndex() throws Exception {_        logger.info("-->  starting a master node and a data node")__        internalCluster().startMasterOnlyNode()__        internalCluster().startDataOnlyNode()___        final Client client = client()__        final String repo = "test-repo"__        final String snapshot = "test-snap"__        final String sourceIdx = "test-idx"__        final String shrunkIdx = "test-idx-shrunk"___        logger.info("-->  creating repository")__        assertAcked(client.admin().cluster().preparePutRepository(repo).setType("fs")_            .setSettings(Settings.builder().put("location", randomRepoPath())_                             .put("compress", randomBoolean())))___        assertAcked(prepareCreate(sourceIdx, 0, Settings.builder()_            .put("number_of_shards", between(2, 10)).put("number_of_replicas", 0)))__        ensureGreen()___        logger.info("--> indexing some data")__        IndexRequestBuilder[] builders = new IndexRequestBuilder[randomIntBetween(10, 100)]__        for (int i = 0_ i < builders.length_ i++) {_            builders[i] = client().prepareIndex(sourceIdx, "type1",_                Integer.toString(i)).setSource("field1", "bar " + i)__        }_        indexRandom(true, builders)__        flushAndRefresh()___        logger.info("--> shrink the index")__        assertAcked(client.admin().indices().prepareUpdateSettings(sourceIdx)_            .setSettings(Settings.builder().put("index.blocks.write", true)).get())__        assertAcked(client.admin().indices().prepareResizeIndex(sourceIdx, shrunkIdx).get())___        logger.info("--> snapshot the shrunk index")__        CreateSnapshotResponse createResponse = client.admin().cluster()_            .prepareCreateSnapshot(repo, snapshot)_            .setWaitForCompletion(true).setIndices(shrunkIdx).get()__        assertEquals(SnapshotState.SUCCESS, createResponse.getSnapshotInfo().state())___        logger.info("--> delete index and stop the data node")__        assertAcked(client.admin().indices().prepareDelete(sourceIdx).get())__        assertAcked(client.admin().indices().prepareDelete(shrunkIdx).get())__        internalCluster().stopRandomDataNode()__        client().admin().cluster().prepareHealth().setTimeout("30s").setWaitForNodes("1")___        logger.info("--> start a new data node")__        final Settings dataSettings = Settings.builder()_            .put(Node.NODE_NAME_SETTING.getKey(), randomAlphaOfLength(5))_            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()) _            .build()__        internalCluster().startDataOnlyNode(dataSettings)__        client().admin().cluster().prepareHealth().setTimeout("30s").setWaitForNodes("2")___        logger.info("--> restore the shrunk index and ensure all shards are allocated")__        RestoreSnapshotResponse restoreResponse = client().admin().cluster()_            .prepareRestoreSnapshot(repo, snapshot).setWaitForCompletion(true)_            .setIndices(shrunkIdx).get()__        assertEquals(restoreResponse.getRestoreInfo().totalShards(),_            restoreResponse.getRestoreInfo().successfulShards())__        ensureYellow()__    };tests,that,a,shrunken,index,created,via,the,shrink,apis,and,subsequently,snapshotted,can,be,restored,when,the,node,the,shrunken,index,was,created,on,is,no,longer,part,of,the,cluster;public,void,test,restore,shrink,index,throws,exception,logger,info,starting,a,master,node,and,a,data,node,internal,cluster,start,master,only,node,internal,cluster,start,data,only,node,final,client,client,client,final,string,repo,test,repo,final,string,snapshot,test,snap,final,string,source,idx,test,idx,final,string,shrunk,idx,test,idx,shrunk,logger,info,creating,repository,assert,acked,client,admin,cluster,prepare,put,repository,repo,set,type,fs,set,settings,settings,builder,put,location,random,repo,path,put,compress,random,boolean,assert,acked,prepare,create,source,idx,0,settings,builder,put,between,2,10,put,0,ensure,green,logger,info,indexing,some,data,index,request,builder,builders,new,index,request,builder,random,int,between,10,100,for,int,i,0,i,builders,length,i,builders,i,client,prepare,index,source,idx,type1,integer,to,string,i,set,source,field1,bar,i,index,random,true,builders,flush,and,refresh,logger,info,shrink,the,index,assert,acked,client,admin,indices,prepare,update,settings,source,idx,set,settings,settings,builder,put,index,blocks,write,true,get,assert,acked,client,admin,indices,prepare,resize,index,source,idx,shrunk,idx,get,logger,info,snapshot,the,shrunk,index,create,snapshot,response,create,response,client,admin,cluster,prepare,create,snapshot,repo,snapshot,set,wait,for,completion,true,set,indices,shrunk,idx,get,assert,equals,snapshot,state,success,create,response,get,snapshot,info,state,logger,info,delete,index,and,stop,the,data,node,assert,acked,client,admin,indices,prepare,delete,source,idx,get,assert,acked,client,admin,indices,prepare,delete,shrunk,idx,get,internal,cluster,stop,random,data,node,client,admin,cluster,prepare,health,set,timeout,30s,set,wait,for,nodes,1,logger,info,start,a,new,data,node,final,settings,data,settings,settings,builder,put,node,get,key,random,alpha,of,length,5,put,environment,get,key,create,temp,dir,build,internal,cluster,start,data,only,node,data,settings,client,admin,cluster,prepare,health,set,timeout,30s,set,wait,for,nodes,2,logger,info,restore,the,shrunk,index,and,ensure,all,shards,are,allocated,restore,snapshot,response,restore,response,client,admin,cluster,prepare,restore,snapshot,repo,snapshot,set,wait,for,completion,true,set,indices,shrunk,idx,get,assert,equals,restore,response,get,restore,info,total,shards,restore,response,get,restore,info,successful,shards,ensure,yellow
DedicatedClusterSnapshotRestoreIT -> public void testRestoreShrinkIndex() throws Exception;1544081506;Tests that a shrunken index (created via the shrink APIs) and subsequently snapshotted_can be restored when the node the shrunken index was created on is no longer part of_the cluster.;public void testRestoreShrinkIndex() throws Exception {_        logger.info("-->  starting a master node and a data node")__        internalCluster().startMasterOnlyNode()__        internalCluster().startDataOnlyNode()___        final Client client = client()__        final String repo = "test-repo"__        final String snapshot = "test-snap"__        final String sourceIdx = "test-idx"__        final String shrunkIdx = "test-idx-shrunk"___        logger.info("-->  creating repository")__        assertAcked(client.admin().cluster().preparePutRepository(repo).setType("fs")_            .setSettings(Settings.builder().put("location", randomRepoPath())_                             .put("compress", randomBoolean())))___        assertAcked(prepareCreate(sourceIdx, 0, Settings.builder()_            .put("number_of_shards", between(2, 10)).put("number_of_replicas", 0)))__        ensureGreen()___        logger.info("--> indexing some data")__        IndexRequestBuilder[] builders = new IndexRequestBuilder[randomIntBetween(10, 100)]__        for (int i = 0_ i < builders.length_ i++) {_            builders[i] = client().prepareIndex(sourceIdx, "type1",_                Integer.toString(i)).setSource("field1", "bar " + i)__        }_        indexRandom(true, builders)__        flushAndRefresh()___        logger.info("--> shrink the index")__        assertAcked(client.admin().indices().prepareUpdateSettings(sourceIdx)_            .setSettings(Settings.builder().put("index.blocks.write", true)).get())__        assertAcked(client.admin().indices().prepareResizeIndex(sourceIdx, shrunkIdx).get())___        logger.info("--> snapshot the shrunk index")__        CreateSnapshotResponse createResponse = client.admin().cluster()_            .prepareCreateSnapshot(repo, snapshot)_            .setWaitForCompletion(true).setIndices(shrunkIdx).get()__        assertEquals(SnapshotState.SUCCESS, createResponse.getSnapshotInfo().state())___        logger.info("--> delete index and stop the data node")__        assertAcked(client.admin().indices().prepareDelete(sourceIdx).get())__        assertAcked(client.admin().indices().prepareDelete(shrunkIdx).get())__        internalCluster().stopRandomDataNode()__        client().admin().cluster().prepareHealth().setTimeout("30s").setWaitForNodes("1")___        logger.info("--> start a new data node")__        final Settings dataSettings = Settings.builder()_            .put(Node.NODE_NAME_SETTING.getKey(), randomAlphaOfLength(5))_            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()) _            .build()__        internalCluster().startDataOnlyNode(dataSettings)__        client().admin().cluster().prepareHealth().setTimeout("30s").setWaitForNodes("2")___        logger.info("--> restore the shrunk index and ensure all shards are allocated")__        RestoreSnapshotResponse restoreResponse = client().admin().cluster()_            .prepareRestoreSnapshot(repo, snapshot).setWaitForCompletion(true)_            .setIndices(shrunkIdx).get()__        assertEquals(restoreResponse.getRestoreInfo().totalShards(),_            restoreResponse.getRestoreInfo().successfulShards())__        ensureYellow()__    };tests,that,a,shrunken,index,created,via,the,shrink,apis,and,subsequently,snapshotted,can,be,restored,when,the,node,the,shrunken,index,was,created,on,is,no,longer,part,of,the,cluster;public,void,test,restore,shrink,index,throws,exception,logger,info,starting,a,master,node,and,a,data,node,internal,cluster,start,master,only,node,internal,cluster,start,data,only,node,final,client,client,client,final,string,repo,test,repo,final,string,snapshot,test,snap,final,string,source,idx,test,idx,final,string,shrunk,idx,test,idx,shrunk,logger,info,creating,repository,assert,acked,client,admin,cluster,prepare,put,repository,repo,set,type,fs,set,settings,settings,builder,put,location,random,repo,path,put,compress,random,boolean,assert,acked,prepare,create,source,idx,0,settings,builder,put,between,2,10,put,0,ensure,green,logger,info,indexing,some,data,index,request,builder,builders,new,index,request,builder,random,int,between,10,100,for,int,i,0,i,builders,length,i,builders,i,client,prepare,index,source,idx,type1,integer,to,string,i,set,source,field1,bar,i,index,random,true,builders,flush,and,refresh,logger,info,shrink,the,index,assert,acked,client,admin,indices,prepare,update,settings,source,idx,set,settings,settings,builder,put,index,blocks,write,true,get,assert,acked,client,admin,indices,prepare,resize,index,source,idx,shrunk,idx,get,logger,info,snapshot,the,shrunk,index,create,snapshot,response,create,response,client,admin,cluster,prepare,create,snapshot,repo,snapshot,set,wait,for,completion,true,set,indices,shrunk,idx,get,assert,equals,snapshot,state,success,create,response,get,snapshot,info,state,logger,info,delete,index,and,stop,the,data,node,assert,acked,client,admin,indices,prepare,delete,source,idx,get,assert,acked,client,admin,indices,prepare,delete,shrunk,idx,get,internal,cluster,stop,random,data,node,client,admin,cluster,prepare,health,set,timeout,30s,set,wait,for,nodes,1,logger,info,start,a,new,data,node,final,settings,data,settings,settings,builder,put,node,get,key,random,alpha,of,length,5,put,environment,get,key,create,temp,dir,build,internal,cluster,start,data,only,node,data,settings,client,admin,cluster,prepare,health,set,timeout,30s,set,wait,for,nodes,2,logger,info,restore,the,shrunk,index,and,ensure,all,shards,are,allocated,restore,snapshot,response,restore,response,client,admin,cluster,prepare,restore,snapshot,repo,snapshot,set,wait,for,completion,true,set,indices,shrunk,idx,get,assert,equals,restore,response,get,restore,info,total,shards,restore,response,get,restore,info,successful,shards,ensure,yellow
DedicatedClusterSnapshotRestoreIT -> public void testRestoreShrinkIndex() throws Exception;1544100208;Tests that a shrunken index (created via the shrink APIs) and subsequently snapshotted_can be restored when the node the shrunken index was created on is no longer part of_the cluster.;public void testRestoreShrinkIndex() throws Exception {_        logger.info("-->  starting a master node and a data node")__        internalCluster().startMasterOnlyNode()__        internalCluster().startDataOnlyNode()___        final Client client = client()__        final String repo = "test-repo"__        final String snapshot = "test-snap"__        final String sourceIdx = "test-idx"__        final String shrunkIdx = "test-idx-shrunk"___        logger.info("-->  creating repository")__        assertAcked(client.admin().cluster().preparePutRepository(repo).setType("fs")_            .setSettings(Settings.builder().put("location", randomRepoPath())_                             .put("compress", randomBoolean())))___        assertAcked(prepareCreate(sourceIdx, 0, Settings.builder()_            .put("number_of_shards", between(2, 10)).put("number_of_replicas", 0)))__        ensureGreen()___        logger.info("--> indexing some data")__        IndexRequestBuilder[] builders = new IndexRequestBuilder[randomIntBetween(10, 100)]__        for (int i = 0_ i < builders.length_ i++) {_            builders[i] = client().prepareIndex(sourceIdx, "type1",_                Integer.toString(i)).setSource("field1", "bar " + i)__        }_        indexRandom(true, builders)__        flushAndRefresh()___        logger.info("--> shrink the index")__        assertAcked(client.admin().indices().prepareUpdateSettings(sourceIdx)_            .setSettings(Settings.builder().put("index.blocks.write", true)).get())__        assertAcked(client.admin().indices().prepareResizeIndex(sourceIdx, shrunkIdx).get())___        logger.info("--> snapshot the shrunk index")__        CreateSnapshotResponse createResponse = client.admin().cluster()_            .prepareCreateSnapshot(repo, snapshot)_            .setWaitForCompletion(true).setIndices(shrunkIdx).get()__        assertEquals(SnapshotState.SUCCESS, createResponse.getSnapshotInfo().state())___        logger.info("--> delete index and stop the data node")__        assertAcked(client.admin().indices().prepareDelete(sourceIdx).get())__        assertAcked(client.admin().indices().prepareDelete(shrunkIdx).get())__        internalCluster().stopRandomDataNode()__        client().admin().cluster().prepareHealth().setTimeout("30s").setWaitForNodes("1")___        logger.info("--> start a new data node")__        final Settings dataSettings = Settings.builder()_            .put(Node.NODE_NAME_SETTING.getKey(), randomAlphaOfLength(5))_            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()) _            .build()__        internalCluster().startDataOnlyNode(dataSettings)__        client().admin().cluster().prepareHealth().setTimeout("30s").setWaitForNodes("2")___        logger.info("--> restore the shrunk index and ensure all shards are allocated")__        RestoreSnapshotResponse restoreResponse = client().admin().cluster()_            .prepareRestoreSnapshot(repo, snapshot).setWaitForCompletion(true)_            .setIndices(shrunkIdx).get()__        assertEquals(restoreResponse.getRestoreInfo().totalShards(),_            restoreResponse.getRestoreInfo().successfulShards())__        ensureYellow()__    };tests,that,a,shrunken,index,created,via,the,shrink,apis,and,subsequently,snapshotted,can,be,restored,when,the,node,the,shrunken,index,was,created,on,is,no,longer,part,of,the,cluster;public,void,test,restore,shrink,index,throws,exception,logger,info,starting,a,master,node,and,a,data,node,internal,cluster,start,master,only,node,internal,cluster,start,data,only,node,final,client,client,client,final,string,repo,test,repo,final,string,snapshot,test,snap,final,string,source,idx,test,idx,final,string,shrunk,idx,test,idx,shrunk,logger,info,creating,repository,assert,acked,client,admin,cluster,prepare,put,repository,repo,set,type,fs,set,settings,settings,builder,put,location,random,repo,path,put,compress,random,boolean,assert,acked,prepare,create,source,idx,0,settings,builder,put,between,2,10,put,0,ensure,green,logger,info,indexing,some,data,index,request,builder,builders,new,index,request,builder,random,int,between,10,100,for,int,i,0,i,builders,length,i,builders,i,client,prepare,index,source,idx,type1,integer,to,string,i,set,source,field1,bar,i,index,random,true,builders,flush,and,refresh,logger,info,shrink,the,index,assert,acked,client,admin,indices,prepare,update,settings,source,idx,set,settings,settings,builder,put,index,blocks,write,true,get,assert,acked,client,admin,indices,prepare,resize,index,source,idx,shrunk,idx,get,logger,info,snapshot,the,shrunk,index,create,snapshot,response,create,response,client,admin,cluster,prepare,create,snapshot,repo,snapshot,set,wait,for,completion,true,set,indices,shrunk,idx,get,assert,equals,snapshot,state,success,create,response,get,snapshot,info,state,logger,info,delete,index,and,stop,the,data,node,assert,acked,client,admin,indices,prepare,delete,source,idx,get,assert,acked,client,admin,indices,prepare,delete,shrunk,idx,get,internal,cluster,stop,random,data,node,client,admin,cluster,prepare,health,set,timeout,30s,set,wait,for,nodes,1,logger,info,start,a,new,data,node,final,settings,data,settings,settings,builder,put,node,get,key,random,alpha,of,length,5,put,environment,get,key,create,temp,dir,build,internal,cluster,start,data,only,node,data,settings,client,admin,cluster,prepare,health,set,timeout,30s,set,wait,for,nodes,2,logger,info,restore,the,shrunk,index,and,ensure,all,shards,are,allocated,restore,snapshot,response,restore,response,client,admin,cluster,prepare,restore,snapshot,repo,snapshot,set,wait,for,completion,true,set,indices,shrunk,idx,get,assert,equals,restore,response,get,restore,info,total,shards,restore,response,get,restore,info,successful,shards,ensure,yellow
DedicatedClusterSnapshotRestoreIT -> public void testRestoreShrinkIndex() throws Exception;1545215361;Tests that a shrunken index (created via the shrink APIs) and subsequently snapshotted_can be restored when the node the shrunken index was created on is no longer part of_the cluster.;public void testRestoreShrinkIndex() throws Exception {_        logger.info("-->  starting a master node and a data node")__        internalCluster().startMasterOnlyNode()__        internalCluster().startDataOnlyNode()___        final Client client = client()__        final String repo = "test-repo"__        final String snapshot = "test-snap"__        final String sourceIdx = "test-idx"__        final String shrunkIdx = "test-idx-shrunk"___        logger.info("-->  creating repository")__        assertAcked(client.admin().cluster().preparePutRepository(repo).setType("fs")_            .setSettings(Settings.builder().put("location", randomRepoPath())_                             .put("compress", randomBoolean())))___        assertAcked(prepareCreate(sourceIdx, 0, Settings.builder()_            .put("number_of_shards", between(2, 10)).put("number_of_replicas", 0)))__        ensureGreen()___        logger.info("--> indexing some data")__        IndexRequestBuilder[] builders = new IndexRequestBuilder[randomIntBetween(10, 100)]__        for (int i = 0_ i < builders.length_ i++) {_            builders[i] = client().prepareIndex(sourceIdx, "type1",_                Integer.toString(i)).setSource("field1", "bar " + i)__        }_        indexRandom(true, builders)__        flushAndRefresh()___        logger.info("--> shrink the index")__        assertAcked(client.admin().indices().prepareUpdateSettings(sourceIdx)_            .setSettings(Settings.builder().put("index.blocks.write", true)).get())__        assertAcked(client.admin().indices().prepareResizeIndex(sourceIdx, shrunkIdx).get())___        logger.info("--> snapshot the shrunk index")__        CreateSnapshotResponse createResponse = client.admin().cluster()_            .prepareCreateSnapshot(repo, snapshot)_            .setWaitForCompletion(true).setIndices(shrunkIdx).get()__        assertEquals(SnapshotState.SUCCESS, createResponse.getSnapshotInfo().state())___        logger.info("--> delete index and stop the data node")__        assertAcked(client.admin().indices().prepareDelete(sourceIdx).get())__        assertAcked(client.admin().indices().prepareDelete(shrunkIdx).get())__        internalCluster().stopRandomDataNode()__        client().admin().cluster().prepareHealth().setTimeout("30s").setWaitForNodes("1")___        logger.info("--> start a new data node")__        final Settings dataSettings = Settings.builder()_            .put(Node.NODE_NAME_SETTING.getKey(), randomAlphaOfLength(5))_            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()) _            .build()__        internalCluster().startDataOnlyNode(dataSettings)__        client().admin().cluster().prepareHealth().setTimeout("30s").setWaitForNodes("2")___        logger.info("--> restore the shrunk index and ensure all shards are allocated")__        RestoreSnapshotResponse restoreResponse = client().admin().cluster()_            .prepareRestoreSnapshot(repo, snapshot).setWaitForCompletion(true)_            .setIndices(shrunkIdx).get()__        assertEquals(restoreResponse.getRestoreInfo().totalShards(),_            restoreResponse.getRestoreInfo().successfulShards())__        ensureYellow()__    };tests,that,a,shrunken,index,created,via,the,shrink,apis,and,subsequently,snapshotted,can,be,restored,when,the,node,the,shrunken,index,was,created,on,is,no,longer,part,of,the,cluster;public,void,test,restore,shrink,index,throws,exception,logger,info,starting,a,master,node,and,a,data,node,internal,cluster,start,master,only,node,internal,cluster,start,data,only,node,final,client,client,client,final,string,repo,test,repo,final,string,snapshot,test,snap,final,string,source,idx,test,idx,final,string,shrunk,idx,test,idx,shrunk,logger,info,creating,repository,assert,acked,client,admin,cluster,prepare,put,repository,repo,set,type,fs,set,settings,settings,builder,put,location,random,repo,path,put,compress,random,boolean,assert,acked,prepare,create,source,idx,0,settings,builder,put,between,2,10,put,0,ensure,green,logger,info,indexing,some,data,index,request,builder,builders,new,index,request,builder,random,int,between,10,100,for,int,i,0,i,builders,length,i,builders,i,client,prepare,index,source,idx,type1,integer,to,string,i,set,source,field1,bar,i,index,random,true,builders,flush,and,refresh,logger,info,shrink,the,index,assert,acked,client,admin,indices,prepare,update,settings,source,idx,set,settings,settings,builder,put,index,blocks,write,true,get,assert,acked,client,admin,indices,prepare,resize,index,source,idx,shrunk,idx,get,logger,info,snapshot,the,shrunk,index,create,snapshot,response,create,response,client,admin,cluster,prepare,create,snapshot,repo,snapshot,set,wait,for,completion,true,set,indices,shrunk,idx,get,assert,equals,snapshot,state,success,create,response,get,snapshot,info,state,logger,info,delete,index,and,stop,the,data,node,assert,acked,client,admin,indices,prepare,delete,source,idx,get,assert,acked,client,admin,indices,prepare,delete,shrunk,idx,get,internal,cluster,stop,random,data,node,client,admin,cluster,prepare,health,set,timeout,30s,set,wait,for,nodes,1,logger,info,start,a,new,data,node,final,settings,data,settings,settings,builder,put,node,get,key,random,alpha,of,length,5,put,environment,get,key,create,temp,dir,build,internal,cluster,start,data,only,node,data,settings,client,admin,cluster,prepare,health,set,timeout,30s,set,wait,for,nodes,2,logger,info,restore,the,shrunk,index,and,ensure,all,shards,are,allocated,restore,snapshot,response,restore,response,client,admin,cluster,prepare,restore,snapshot,repo,snapshot,set,wait,for,completion,true,set,indices,shrunk,idx,get,assert,equals,restore,response,get,restore,info,total,shards,restore,response,get,restore,info,successful,shards,ensure,yellow
DedicatedClusterSnapshotRestoreIT -> public void testRestoreShrinkIndex() throws Exception;1545909497;Tests that a shrunken index (created via the shrink APIs) and subsequently snapshotted_can be restored when the node the shrunken index was created on is no longer part of_the cluster.;public void testRestoreShrinkIndex() throws Exception {_        logger.info("-->  starting a master node and a data node")__        internalCluster().startMasterOnlyNode()__        internalCluster().startDataOnlyNode()___        final Client client = client()__        final String repo = "test-repo"__        final String snapshot = "test-snap"__        final String sourceIdx = "test-idx"__        final String shrunkIdx = "test-idx-shrunk"___        logger.info("-->  creating repository")__        assertAcked(client.admin().cluster().preparePutRepository(repo).setType("fs")_            .setSettings(Settings.builder().put("location", randomRepoPath())_                             .put("compress", randomBoolean())))___        assertAcked(prepareCreate(sourceIdx, 0, Settings.builder()_            .put("number_of_shards", between(2, 10)).put("number_of_replicas", 0)))__        ensureGreen()___        logger.info("--> indexing some data")__        IndexRequestBuilder[] builders = new IndexRequestBuilder[randomIntBetween(10, 100)]__        for (int i = 0_ i < builders.length_ i++) {_            builders[i] = client().prepareIndex(sourceIdx, "type1",_                Integer.toString(i)).setSource("field1", "bar " + i)__        }_        indexRandom(true, builders)__        flushAndRefresh()___        logger.info("--> shrink the index")__        assertAcked(client.admin().indices().prepareUpdateSettings(sourceIdx)_            .setSettings(Settings.builder().put("index.blocks.write", true)).get())__        assertAcked(client.admin().indices().prepareResizeIndex(sourceIdx, shrunkIdx).get())___        logger.info("--> snapshot the shrunk index")__        CreateSnapshotResponse createResponse = client.admin().cluster()_            .prepareCreateSnapshot(repo, snapshot)_            .setWaitForCompletion(true).setIndices(shrunkIdx).get()__        assertEquals(SnapshotState.SUCCESS, createResponse.getSnapshotInfo().state())___        logger.info("--> delete index and stop the data node")__        assertAcked(client.admin().indices().prepareDelete(sourceIdx).get())__        assertAcked(client.admin().indices().prepareDelete(shrunkIdx).get())__        internalCluster().stopRandomDataNode()__        client().admin().cluster().prepareHealth().setTimeout("30s").setWaitForNodes("1")___        logger.info("--> start a new data node")__        final Settings dataSettings = Settings.builder()_            .put(Node.NODE_NAME_SETTING.getKey(), randomAlphaOfLength(5))_            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()) _            .build()__        internalCluster().startDataOnlyNode(dataSettings)__        client().admin().cluster().prepareHealth().setTimeout("30s").setWaitForNodes("2")___        logger.info("--> restore the shrunk index and ensure all shards are allocated")__        RestoreSnapshotResponse restoreResponse = client().admin().cluster()_            .prepareRestoreSnapshot(repo, snapshot).setWaitForCompletion(true)_            .setIndices(shrunkIdx).get()__        assertEquals(restoreResponse.getRestoreInfo().totalShards(),_            restoreResponse.getRestoreInfo().successfulShards())__        ensureYellow()__    };tests,that,a,shrunken,index,created,via,the,shrink,apis,and,subsequently,snapshotted,can,be,restored,when,the,node,the,shrunken,index,was,created,on,is,no,longer,part,of,the,cluster;public,void,test,restore,shrink,index,throws,exception,logger,info,starting,a,master,node,and,a,data,node,internal,cluster,start,master,only,node,internal,cluster,start,data,only,node,final,client,client,client,final,string,repo,test,repo,final,string,snapshot,test,snap,final,string,source,idx,test,idx,final,string,shrunk,idx,test,idx,shrunk,logger,info,creating,repository,assert,acked,client,admin,cluster,prepare,put,repository,repo,set,type,fs,set,settings,settings,builder,put,location,random,repo,path,put,compress,random,boolean,assert,acked,prepare,create,source,idx,0,settings,builder,put,between,2,10,put,0,ensure,green,logger,info,indexing,some,data,index,request,builder,builders,new,index,request,builder,random,int,between,10,100,for,int,i,0,i,builders,length,i,builders,i,client,prepare,index,source,idx,type1,integer,to,string,i,set,source,field1,bar,i,index,random,true,builders,flush,and,refresh,logger,info,shrink,the,index,assert,acked,client,admin,indices,prepare,update,settings,source,idx,set,settings,settings,builder,put,index,blocks,write,true,get,assert,acked,client,admin,indices,prepare,resize,index,source,idx,shrunk,idx,get,logger,info,snapshot,the,shrunk,index,create,snapshot,response,create,response,client,admin,cluster,prepare,create,snapshot,repo,snapshot,set,wait,for,completion,true,set,indices,shrunk,idx,get,assert,equals,snapshot,state,success,create,response,get,snapshot,info,state,logger,info,delete,index,and,stop,the,data,node,assert,acked,client,admin,indices,prepare,delete,source,idx,get,assert,acked,client,admin,indices,prepare,delete,shrunk,idx,get,internal,cluster,stop,random,data,node,client,admin,cluster,prepare,health,set,timeout,30s,set,wait,for,nodes,1,logger,info,start,a,new,data,node,final,settings,data,settings,settings,builder,put,node,get,key,random,alpha,of,length,5,put,environment,get,key,create,temp,dir,build,internal,cluster,start,data,only,node,data,settings,client,admin,cluster,prepare,health,set,timeout,30s,set,wait,for,nodes,2,logger,info,restore,the,shrunk,index,and,ensure,all,shards,are,allocated,restore,snapshot,response,restore,response,client,admin,cluster,prepare,restore,snapshot,repo,snapshot,set,wait,for,completion,true,set,indices,shrunk,idx,get,assert,equals,restore,response,get,restore,info,total,shards,restore,response,get,restore,info,successful,shards,ensure,yellow
DedicatedClusterSnapshotRestoreIT -> public void testRestoreShrinkIndex() throws Exception;1547030937;Tests that a shrunken index (created via the shrink APIs) and subsequently snapshotted_can be restored when the node the shrunken index was created on is no longer part of_the cluster.;public void testRestoreShrinkIndex() throws Exception {_        logger.info("-->  starting a master node and a data node")__        internalCluster().startMasterOnlyNode()__        internalCluster().startDataOnlyNode()___        final Client client = client()__        final String repo = "test-repo"__        final String snapshot = "test-snap"__        final String sourceIdx = "test-idx"__        final String shrunkIdx = "test-idx-shrunk"___        logger.info("-->  creating repository")__        assertAcked(client.admin().cluster().preparePutRepository(repo).setType("fs")_            .setSettings(Settings.builder().put("location", randomRepoPath())_                             .put("compress", randomBoolean())))___        assertAcked(prepareCreate(sourceIdx, 0, Settings.builder()_            .put("number_of_shards", between(2, 10)).put("number_of_replicas", 0)))__        ensureGreen()___        logger.info("--> indexing some data")__        IndexRequestBuilder[] builders = new IndexRequestBuilder[randomIntBetween(10, 100)]__        for (int i = 0_ i < builders.length_ i++) {_            builders[i] = client().prepareIndex(sourceIdx, "type1",_                Integer.toString(i)).setSource("field1", "bar " + i)__        }_        indexRandom(true, builders)__        flushAndRefresh()___        logger.info("--> shrink the index")__        assertAcked(client.admin().indices().prepareUpdateSettings(sourceIdx)_            .setSettings(Settings.builder().put("index.blocks.write", true)).get())__        assertAcked(client.admin().indices().prepareResizeIndex(sourceIdx, shrunkIdx).get())___        logger.info("--> snapshot the shrunk index")__        CreateSnapshotResponse createResponse = client.admin().cluster()_            .prepareCreateSnapshot(repo, snapshot)_            .setWaitForCompletion(true).setIndices(shrunkIdx).get()__        assertEquals(SnapshotState.SUCCESS, createResponse.getSnapshotInfo().state())___        logger.info("--> delete index and stop the data node")__        assertAcked(client.admin().indices().prepareDelete(sourceIdx).get())__        assertAcked(client.admin().indices().prepareDelete(shrunkIdx).get())__        internalCluster().stopRandomDataNode()__        client().admin().cluster().prepareHealth().setTimeout("30s").setWaitForNodes("1")___        logger.info("--> start a new data node")__        final Settings dataSettings = Settings.builder()_            .put(Node.NODE_NAME_SETTING.getKey(), randomAlphaOfLength(5))_            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()) _            .build()__        internalCluster().startDataOnlyNode(dataSettings)__        client().admin().cluster().prepareHealth().setTimeout("30s").setWaitForNodes("2")___        logger.info("--> restore the shrunk index and ensure all shards are allocated")__        RestoreSnapshotResponse restoreResponse = client().admin().cluster()_            .prepareRestoreSnapshot(repo, snapshot).setWaitForCompletion(true)_            .setIndices(shrunkIdx).get()__        assertEquals(restoreResponse.getRestoreInfo().totalShards(),_            restoreResponse.getRestoreInfo().successfulShards())__        ensureYellow()__    };tests,that,a,shrunken,index,created,via,the,shrink,apis,and,subsequently,snapshotted,can,be,restored,when,the,node,the,shrunken,index,was,created,on,is,no,longer,part,of,the,cluster;public,void,test,restore,shrink,index,throws,exception,logger,info,starting,a,master,node,and,a,data,node,internal,cluster,start,master,only,node,internal,cluster,start,data,only,node,final,client,client,client,final,string,repo,test,repo,final,string,snapshot,test,snap,final,string,source,idx,test,idx,final,string,shrunk,idx,test,idx,shrunk,logger,info,creating,repository,assert,acked,client,admin,cluster,prepare,put,repository,repo,set,type,fs,set,settings,settings,builder,put,location,random,repo,path,put,compress,random,boolean,assert,acked,prepare,create,source,idx,0,settings,builder,put,between,2,10,put,0,ensure,green,logger,info,indexing,some,data,index,request,builder,builders,new,index,request,builder,random,int,between,10,100,for,int,i,0,i,builders,length,i,builders,i,client,prepare,index,source,idx,type1,integer,to,string,i,set,source,field1,bar,i,index,random,true,builders,flush,and,refresh,logger,info,shrink,the,index,assert,acked,client,admin,indices,prepare,update,settings,source,idx,set,settings,settings,builder,put,index,blocks,write,true,get,assert,acked,client,admin,indices,prepare,resize,index,source,idx,shrunk,idx,get,logger,info,snapshot,the,shrunk,index,create,snapshot,response,create,response,client,admin,cluster,prepare,create,snapshot,repo,snapshot,set,wait,for,completion,true,set,indices,shrunk,idx,get,assert,equals,snapshot,state,success,create,response,get,snapshot,info,state,logger,info,delete,index,and,stop,the,data,node,assert,acked,client,admin,indices,prepare,delete,source,idx,get,assert,acked,client,admin,indices,prepare,delete,shrunk,idx,get,internal,cluster,stop,random,data,node,client,admin,cluster,prepare,health,set,timeout,30s,set,wait,for,nodes,1,logger,info,start,a,new,data,node,final,settings,data,settings,settings,builder,put,node,get,key,random,alpha,of,length,5,put,environment,get,key,create,temp,dir,build,internal,cluster,start,data,only,node,data,settings,client,admin,cluster,prepare,health,set,timeout,30s,set,wait,for,nodes,2,logger,info,restore,the,shrunk,index,and,ensure,all,shards,are,allocated,restore,snapshot,response,restore,response,client,admin,cluster,prepare,restore,snapshot,repo,snapshot,set,wait,for,completion,true,set,indices,shrunk,idx,get,assert,equals,restore,response,get,restore,info,total,shards,restore,response,get,restore,info,successful,shards,ensure,yellow
DedicatedClusterSnapshotRestoreIT -> public void testRestoreShrinkIndex() throws Exception;1547655256;Tests that a shrunken index (created via the shrink APIs) and subsequently snapshotted_can be restored when the node the shrunken index was created on is no longer part of_the cluster.;public void testRestoreShrinkIndex() throws Exception {_        logger.info("-->  starting a master node and a data node")__        internalCluster().startMasterOnlyNode()__        internalCluster().startDataOnlyNode()___        final Client client = client()__        final String repo = "test-repo"__        final String snapshot = "test-snap"__        final String sourceIdx = "test-idx"__        final String shrunkIdx = "test-idx-shrunk"___        logger.info("-->  creating repository")__        assertAcked(client.admin().cluster().preparePutRepository(repo).setType("fs")_            .setSettings(Settings.builder().put("location", randomRepoPath())_                             .put("compress", randomBoolean())))___        assertAcked(prepareCreate(sourceIdx, 0, Settings.builder()_            .put("number_of_shards", between(2, 10)).put("number_of_replicas", 0)))__        ensureGreen()___        logger.info("--> indexing some data")__        IndexRequestBuilder[] builders = new IndexRequestBuilder[randomIntBetween(10, 100)]__        for (int i = 0_ i < builders.length_ i++) {_            builders[i] = client().prepareIndex(sourceIdx, "type1",_                Integer.toString(i)).setSource("field1", "bar " + i)__        }_        indexRandom(true, builders)__        flushAndRefresh()___        logger.info("--> shrink the index")__        assertAcked(client.admin().indices().prepareUpdateSettings(sourceIdx)_            .setSettings(Settings.builder().put("index.blocks.write", true)).get())__        assertAcked(client.admin().indices().prepareResizeIndex(sourceIdx, shrunkIdx).get())___        logger.info("--> snapshot the shrunk index")__        CreateSnapshotResponse createResponse = client.admin().cluster()_            .prepareCreateSnapshot(repo, snapshot)_            .setWaitForCompletion(true).setIndices(shrunkIdx).get()__        assertEquals(SnapshotState.SUCCESS, createResponse.getSnapshotInfo().state())___        logger.info("--> delete index and stop the data node")__        assertAcked(client.admin().indices().prepareDelete(sourceIdx).get())__        assertAcked(client.admin().indices().prepareDelete(shrunkIdx).get())__        internalCluster().stopRandomDataNode()__        client().admin().cluster().prepareHealth().setTimeout("30s").setWaitForNodes("1")___        logger.info("--> start a new data node")__        final Settings dataSettings = Settings.builder()_            .put(Node.NODE_NAME_SETTING.getKey(), randomAlphaOfLength(5))_            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()) _            .build()__        internalCluster().startDataOnlyNode(dataSettings)__        client().admin().cluster().prepareHealth().setTimeout("30s").setWaitForNodes("2")___        logger.info("--> restore the shrunk index and ensure all shards are allocated")__        RestoreSnapshotResponse restoreResponse = client().admin().cluster()_            .prepareRestoreSnapshot(repo, snapshot).setWaitForCompletion(true)_            .setIndices(shrunkIdx).get()__        assertEquals(restoreResponse.getRestoreInfo().totalShards(),_            restoreResponse.getRestoreInfo().successfulShards())__        ensureYellow()__    };tests,that,a,shrunken,index,created,via,the,shrink,apis,and,subsequently,snapshotted,can,be,restored,when,the,node,the,shrunken,index,was,created,on,is,no,longer,part,of,the,cluster;public,void,test,restore,shrink,index,throws,exception,logger,info,starting,a,master,node,and,a,data,node,internal,cluster,start,master,only,node,internal,cluster,start,data,only,node,final,client,client,client,final,string,repo,test,repo,final,string,snapshot,test,snap,final,string,source,idx,test,idx,final,string,shrunk,idx,test,idx,shrunk,logger,info,creating,repository,assert,acked,client,admin,cluster,prepare,put,repository,repo,set,type,fs,set,settings,settings,builder,put,location,random,repo,path,put,compress,random,boolean,assert,acked,prepare,create,source,idx,0,settings,builder,put,between,2,10,put,0,ensure,green,logger,info,indexing,some,data,index,request,builder,builders,new,index,request,builder,random,int,between,10,100,for,int,i,0,i,builders,length,i,builders,i,client,prepare,index,source,idx,type1,integer,to,string,i,set,source,field1,bar,i,index,random,true,builders,flush,and,refresh,logger,info,shrink,the,index,assert,acked,client,admin,indices,prepare,update,settings,source,idx,set,settings,settings,builder,put,index,blocks,write,true,get,assert,acked,client,admin,indices,prepare,resize,index,source,idx,shrunk,idx,get,logger,info,snapshot,the,shrunk,index,create,snapshot,response,create,response,client,admin,cluster,prepare,create,snapshot,repo,snapshot,set,wait,for,completion,true,set,indices,shrunk,idx,get,assert,equals,snapshot,state,success,create,response,get,snapshot,info,state,logger,info,delete,index,and,stop,the,data,node,assert,acked,client,admin,indices,prepare,delete,source,idx,get,assert,acked,client,admin,indices,prepare,delete,shrunk,idx,get,internal,cluster,stop,random,data,node,client,admin,cluster,prepare,health,set,timeout,30s,set,wait,for,nodes,1,logger,info,start,a,new,data,node,final,settings,data,settings,settings,builder,put,node,get,key,random,alpha,of,length,5,put,environment,get,key,create,temp,dir,build,internal,cluster,start,data,only,node,data,settings,client,admin,cluster,prepare,health,set,timeout,30s,set,wait,for,nodes,2,logger,info,restore,the,shrunk,index,and,ensure,all,shards,are,allocated,restore,snapshot,response,restore,response,client,admin,cluster,prepare,restore,snapshot,repo,snapshot,set,wait,for,completion,true,set,indices,shrunk,idx,get,assert,equals,restore,response,get,restore,info,total,shards,restore,response,get,restore,info,successful,shards,ensure,yellow
DedicatedClusterSnapshotRestoreIT -> public void testRestoreShrinkIndex() throws Exception;1547825802;Tests that a shrunken index (created via the shrink APIs) and subsequently snapshotted_can be restored when the node the shrunken index was created on is no longer part of_the cluster.;public void testRestoreShrinkIndex() throws Exception {_        logger.info("-->  starting a master node and a data node")__        internalCluster().startMasterOnlyNode()__        internalCluster().startDataOnlyNode()___        final Client client = client()__        final String repo = "test-repo"__        final String snapshot = "test-snap"__        final String sourceIdx = "test-idx"__        final String shrunkIdx = "test-idx-shrunk"___        logger.info("-->  creating repository")__        assertAcked(client.admin().cluster().preparePutRepository(repo).setType("fs")_            .setSettings(Settings.builder().put("location", randomRepoPath())_                             .put("compress", randomBoolean())))___        assertAcked(prepareCreate(sourceIdx, 0, Settings.builder()_            .put("number_of_shards", between(2, 10)).put("number_of_replicas", 0)))__        ensureGreen()___        logger.info("--> indexing some data")__        IndexRequestBuilder[] builders = new IndexRequestBuilder[randomIntBetween(10, 100)]__        for (int i = 0_ i < builders.length_ i++) {_            builders[i] = client().prepareIndex(sourceIdx, "type1",_                Integer.toString(i)).setSource("field1", "bar " + i)__        }_        indexRandom(true, builders)__        flushAndRefresh()___        logger.info("--> shrink the index")__        assertAcked(client.admin().indices().prepareUpdateSettings(sourceIdx)_            .setSettings(Settings.builder().put("index.blocks.write", true)).get())__        assertAcked(client.admin().indices().prepareResizeIndex(sourceIdx, shrunkIdx).get())___        logger.info("--> snapshot the shrunk index")__        CreateSnapshotResponse createResponse = client.admin().cluster()_            .prepareCreateSnapshot(repo, snapshot)_            .setWaitForCompletion(true).setIndices(shrunkIdx).get()__        assertEquals(SnapshotState.SUCCESS, createResponse.getSnapshotInfo().state())___        logger.info("--> delete index and stop the data node")__        assertAcked(client.admin().indices().prepareDelete(sourceIdx).get())__        assertAcked(client.admin().indices().prepareDelete(shrunkIdx).get())__        internalCluster().stopRandomDataNode()__        client().admin().cluster().prepareHealth().setTimeout("30s").setWaitForNodes("1")___        logger.info("--> start a new data node")__        final Settings dataSettings = Settings.builder()_            .put(Node.NODE_NAME_SETTING.getKey(), randomAlphaOfLength(5))_            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()) _            .build()__        internalCluster().startDataOnlyNode(dataSettings)__        client().admin().cluster().prepareHealth().setTimeout("30s").setWaitForNodes("2")___        logger.info("--> restore the shrunk index and ensure all shards are allocated")__        RestoreSnapshotResponse restoreResponse = client().admin().cluster()_            .prepareRestoreSnapshot(repo, snapshot).setWaitForCompletion(true)_            .setIndices(shrunkIdx).get()__        assertEquals(restoreResponse.getRestoreInfo().totalShards(),_            restoreResponse.getRestoreInfo().successfulShards())__        ensureYellow()__    };tests,that,a,shrunken,index,created,via,the,shrink,apis,and,subsequently,snapshotted,can,be,restored,when,the,node,the,shrunken,index,was,created,on,is,no,longer,part,of,the,cluster;public,void,test,restore,shrink,index,throws,exception,logger,info,starting,a,master,node,and,a,data,node,internal,cluster,start,master,only,node,internal,cluster,start,data,only,node,final,client,client,client,final,string,repo,test,repo,final,string,snapshot,test,snap,final,string,source,idx,test,idx,final,string,shrunk,idx,test,idx,shrunk,logger,info,creating,repository,assert,acked,client,admin,cluster,prepare,put,repository,repo,set,type,fs,set,settings,settings,builder,put,location,random,repo,path,put,compress,random,boolean,assert,acked,prepare,create,source,idx,0,settings,builder,put,between,2,10,put,0,ensure,green,logger,info,indexing,some,data,index,request,builder,builders,new,index,request,builder,random,int,between,10,100,for,int,i,0,i,builders,length,i,builders,i,client,prepare,index,source,idx,type1,integer,to,string,i,set,source,field1,bar,i,index,random,true,builders,flush,and,refresh,logger,info,shrink,the,index,assert,acked,client,admin,indices,prepare,update,settings,source,idx,set,settings,settings,builder,put,index,blocks,write,true,get,assert,acked,client,admin,indices,prepare,resize,index,source,idx,shrunk,idx,get,logger,info,snapshot,the,shrunk,index,create,snapshot,response,create,response,client,admin,cluster,prepare,create,snapshot,repo,snapshot,set,wait,for,completion,true,set,indices,shrunk,idx,get,assert,equals,snapshot,state,success,create,response,get,snapshot,info,state,logger,info,delete,index,and,stop,the,data,node,assert,acked,client,admin,indices,prepare,delete,source,idx,get,assert,acked,client,admin,indices,prepare,delete,shrunk,idx,get,internal,cluster,stop,random,data,node,client,admin,cluster,prepare,health,set,timeout,30s,set,wait,for,nodes,1,logger,info,start,a,new,data,node,final,settings,data,settings,settings,builder,put,node,get,key,random,alpha,of,length,5,put,environment,get,key,create,temp,dir,build,internal,cluster,start,data,only,node,data,settings,client,admin,cluster,prepare,health,set,timeout,30s,set,wait,for,nodes,2,logger,info,restore,the,shrunk,index,and,ensure,all,shards,are,allocated,restore,snapshot,response,restore,response,client,admin,cluster,prepare,restore,snapshot,repo,snapshot,set,wait,for,completion,true,set,indices,shrunk,idx,get,assert,equals,restore,response,get,restore,info,total,shards,restore,response,get,restore,info,successful,shards,ensure,yellow
DedicatedClusterSnapshotRestoreIT -> public void testRestoreShrinkIndex() throws Exception;1549180095;Tests that a shrunken index (created via the shrink APIs) and subsequently snapshotted_can be restored when the node the shrunken index was created on is no longer part of_the cluster.;public void testRestoreShrinkIndex() throws Exception {_        logger.info("-->  starting a master node and a data node")__        internalCluster().startMasterOnlyNode()__        internalCluster().startDataOnlyNode()___        final Client client = client()__        final String repo = "test-repo"__        final String snapshot = "test-snap"__        final String sourceIdx = "test-idx"__        final String shrunkIdx = "test-idx-shrunk"___        logger.info("-->  creating repository")__        assertAcked(client.admin().cluster().preparePutRepository(repo).setType("fs")_            .setSettings(Settings.builder().put("location", randomRepoPath())_                             .put("compress", randomBoolean())))___        assertAcked(prepareCreate(sourceIdx, 0, Settings.builder()_            .put("number_of_shards", between(2, 10)).put("number_of_replicas", 0)))__        ensureGreen()___        logger.info("--> indexing some data")__        IndexRequestBuilder[] builders = new IndexRequestBuilder[randomIntBetween(10, 100)]__        for (int i = 0_ i < builders.length_ i++) {_            builders[i] = client().prepareIndex(sourceIdx, "type1",_                Integer.toString(i)).setSource("field1", "bar " + i)__        }_        indexRandom(true, builders)__        flushAndRefresh()___        logger.info("--> shrink the index")__        assertAcked(client.admin().indices().prepareUpdateSettings(sourceIdx)_            .setSettings(Settings.builder().put("index.blocks.write", true)).get())__        assertAcked(client.admin().indices().prepareResizeIndex(sourceIdx, shrunkIdx).get())___        logger.info("--> snapshot the shrunk index")__        CreateSnapshotResponse createResponse = client.admin().cluster()_            .prepareCreateSnapshot(repo, snapshot)_            .setWaitForCompletion(true).setIndices(shrunkIdx).get()__        assertEquals(SnapshotState.SUCCESS, createResponse.getSnapshotInfo().state())___        logger.info("--> delete index and stop the data node")__        assertAcked(client.admin().indices().prepareDelete(sourceIdx).get())__        assertAcked(client.admin().indices().prepareDelete(shrunkIdx).get())__        internalCluster().stopRandomDataNode()__        client().admin().cluster().prepareHealth().setTimeout("30s").setWaitForNodes("1")___        logger.info("--> start a new data node")__        final Settings dataSettings = Settings.builder()_            .put(Node.NODE_NAME_SETTING.getKey(), randomAlphaOfLength(5))_            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()) _            .build()__        internalCluster().startDataOnlyNode(dataSettings)__        client().admin().cluster().prepareHealth().setTimeout("30s").setWaitForNodes("2")___        logger.info("--> restore the shrunk index and ensure all shards are allocated")__        RestoreSnapshotResponse restoreResponse = client().admin().cluster()_            .prepareRestoreSnapshot(repo, snapshot).setWaitForCompletion(true)_            .setIndices(shrunkIdx).get()__        assertEquals(restoreResponse.getRestoreInfo().totalShards(),_            restoreResponse.getRestoreInfo().successfulShards())__        ensureYellow()__    };tests,that,a,shrunken,index,created,via,the,shrink,apis,and,subsequently,snapshotted,can,be,restored,when,the,node,the,shrunken,index,was,created,on,is,no,longer,part,of,the,cluster;public,void,test,restore,shrink,index,throws,exception,logger,info,starting,a,master,node,and,a,data,node,internal,cluster,start,master,only,node,internal,cluster,start,data,only,node,final,client,client,client,final,string,repo,test,repo,final,string,snapshot,test,snap,final,string,source,idx,test,idx,final,string,shrunk,idx,test,idx,shrunk,logger,info,creating,repository,assert,acked,client,admin,cluster,prepare,put,repository,repo,set,type,fs,set,settings,settings,builder,put,location,random,repo,path,put,compress,random,boolean,assert,acked,prepare,create,source,idx,0,settings,builder,put,between,2,10,put,0,ensure,green,logger,info,indexing,some,data,index,request,builder,builders,new,index,request,builder,random,int,between,10,100,for,int,i,0,i,builders,length,i,builders,i,client,prepare,index,source,idx,type1,integer,to,string,i,set,source,field1,bar,i,index,random,true,builders,flush,and,refresh,logger,info,shrink,the,index,assert,acked,client,admin,indices,prepare,update,settings,source,idx,set,settings,settings,builder,put,index,blocks,write,true,get,assert,acked,client,admin,indices,prepare,resize,index,source,idx,shrunk,idx,get,logger,info,snapshot,the,shrunk,index,create,snapshot,response,create,response,client,admin,cluster,prepare,create,snapshot,repo,snapshot,set,wait,for,completion,true,set,indices,shrunk,idx,get,assert,equals,snapshot,state,success,create,response,get,snapshot,info,state,logger,info,delete,index,and,stop,the,data,node,assert,acked,client,admin,indices,prepare,delete,source,idx,get,assert,acked,client,admin,indices,prepare,delete,shrunk,idx,get,internal,cluster,stop,random,data,node,client,admin,cluster,prepare,health,set,timeout,30s,set,wait,for,nodes,1,logger,info,start,a,new,data,node,final,settings,data,settings,settings,builder,put,node,get,key,random,alpha,of,length,5,put,environment,get,key,create,temp,dir,build,internal,cluster,start,data,only,node,data,settings,client,admin,cluster,prepare,health,set,timeout,30s,set,wait,for,nodes,2,logger,info,restore,the,shrunk,index,and,ensure,all,shards,are,allocated,restore,snapshot,response,restore,response,client,admin,cluster,prepare,restore,snapshot,repo,snapshot,set,wait,for,completion,true,set,indices,shrunk,idx,get,assert,equals,restore,response,get,restore,info,total,shards,restore,response,get,restore,info,successful,shards,ensure,yellow
DedicatedClusterSnapshotRestoreIT -> public void testRestoreShrinkIndex() throws Exception;1549381458;Tests that a shrunken index (created via the shrink APIs) and subsequently snapshotted_can be restored when the node the shrunken index was created on is no longer part of_the cluster.;public void testRestoreShrinkIndex() throws Exception {_        logger.info("-->  starting a master node and a data node")__        internalCluster().startMasterOnlyNode()__        internalCluster().startDataOnlyNode()___        final Client client = client()__        final String repo = "test-repo"__        final String snapshot = "test-snap"__        final String sourceIdx = "test-idx"__        final String shrunkIdx = "test-idx-shrunk"___        logger.info("-->  creating repository")__        assertAcked(client.admin().cluster().preparePutRepository(repo).setType("fs")_            .setSettings(Settings.builder().put("location", randomRepoPath())_                             .put("compress", randomBoolean())))___        assertAcked(prepareCreate(sourceIdx, 0, Settings.builder()_            .put("number_of_shards", between(2, 10)).put("number_of_replicas", 0)))__        ensureGreen()___        logger.info("--> indexing some data")__        IndexRequestBuilder[] builders = new IndexRequestBuilder[randomIntBetween(10, 100)]__        for (int i = 0_ i < builders.length_ i++) {_            builders[i] = client().prepareIndex(sourceIdx, "type1",_                Integer.toString(i)).setSource("field1", "bar " + i)__        }_        indexRandom(true, builders)__        flushAndRefresh()___        logger.info("--> shrink the index")__        assertAcked(client.admin().indices().prepareUpdateSettings(sourceIdx)_            .setSettings(Settings.builder().put("index.blocks.write", true)).get())__        assertAcked(client.admin().indices().prepareResizeIndex(sourceIdx, shrunkIdx).get())___        logger.info("--> snapshot the shrunk index")__        CreateSnapshotResponse createResponse = client.admin().cluster()_            .prepareCreateSnapshot(repo, snapshot)_            .setWaitForCompletion(true).setIndices(shrunkIdx).get()__        assertEquals(SnapshotState.SUCCESS, createResponse.getSnapshotInfo().state())___        logger.info("--> delete index and stop the data node")__        assertAcked(client.admin().indices().prepareDelete(sourceIdx).get())__        assertAcked(client.admin().indices().prepareDelete(shrunkIdx).get())__        internalCluster().stopRandomDataNode()__        client().admin().cluster().prepareHealth().setTimeout("30s").setWaitForNodes("1")___        logger.info("--> start a new data node")__        final Settings dataSettings = Settings.builder()_            .put(Node.NODE_NAME_SETTING.getKey(), randomAlphaOfLength(5))_            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()) _            .build()__        internalCluster().startDataOnlyNode(dataSettings)__        client().admin().cluster().prepareHealth().setTimeout("30s").setWaitForNodes("2")___        logger.info("--> restore the shrunk index and ensure all shards are allocated")__        RestoreSnapshotResponse restoreResponse = client().admin().cluster()_            .prepareRestoreSnapshot(repo, snapshot).setWaitForCompletion(true)_            .setIndices(shrunkIdx).get()__        assertEquals(restoreResponse.getRestoreInfo().totalShards(),_            restoreResponse.getRestoreInfo().successfulShards())__        ensureYellow()__    };tests,that,a,shrunken,index,created,via,the,shrink,apis,and,subsequently,snapshotted,can,be,restored,when,the,node,the,shrunken,index,was,created,on,is,no,longer,part,of,the,cluster;public,void,test,restore,shrink,index,throws,exception,logger,info,starting,a,master,node,and,a,data,node,internal,cluster,start,master,only,node,internal,cluster,start,data,only,node,final,client,client,client,final,string,repo,test,repo,final,string,snapshot,test,snap,final,string,source,idx,test,idx,final,string,shrunk,idx,test,idx,shrunk,logger,info,creating,repository,assert,acked,client,admin,cluster,prepare,put,repository,repo,set,type,fs,set,settings,settings,builder,put,location,random,repo,path,put,compress,random,boolean,assert,acked,prepare,create,source,idx,0,settings,builder,put,between,2,10,put,0,ensure,green,logger,info,indexing,some,data,index,request,builder,builders,new,index,request,builder,random,int,between,10,100,for,int,i,0,i,builders,length,i,builders,i,client,prepare,index,source,idx,type1,integer,to,string,i,set,source,field1,bar,i,index,random,true,builders,flush,and,refresh,logger,info,shrink,the,index,assert,acked,client,admin,indices,prepare,update,settings,source,idx,set,settings,settings,builder,put,index,blocks,write,true,get,assert,acked,client,admin,indices,prepare,resize,index,source,idx,shrunk,idx,get,logger,info,snapshot,the,shrunk,index,create,snapshot,response,create,response,client,admin,cluster,prepare,create,snapshot,repo,snapshot,set,wait,for,completion,true,set,indices,shrunk,idx,get,assert,equals,snapshot,state,success,create,response,get,snapshot,info,state,logger,info,delete,index,and,stop,the,data,node,assert,acked,client,admin,indices,prepare,delete,source,idx,get,assert,acked,client,admin,indices,prepare,delete,shrunk,idx,get,internal,cluster,stop,random,data,node,client,admin,cluster,prepare,health,set,timeout,30s,set,wait,for,nodes,1,logger,info,start,a,new,data,node,final,settings,data,settings,settings,builder,put,node,get,key,random,alpha,of,length,5,put,environment,get,key,create,temp,dir,build,internal,cluster,start,data,only,node,data,settings,client,admin,cluster,prepare,health,set,timeout,30s,set,wait,for,nodes,2,logger,info,restore,the,shrunk,index,and,ensure,all,shards,are,allocated,restore,snapshot,response,restore,response,client,admin,cluster,prepare,restore,snapshot,repo,snapshot,set,wait,for,completion,true,set,indices,shrunk,idx,get,assert,equals,restore,response,get,restore,info,total,shards,restore,response,get,restore,info,successful,shards,ensure,yellow
DedicatedClusterSnapshotRestoreIT -> public void testRestoreShrinkIndex() throws Exception;1549637959;Tests that a shrunken index (created via the shrink APIs) and subsequently snapshotted_can be restored when the node the shrunken index was created on is no longer part of_the cluster.;public void testRestoreShrinkIndex() throws Exception {_        logger.info("-->  starting a master node and a data node")__        internalCluster().startMasterOnlyNode()__        internalCluster().startDataOnlyNode()___        final Client client = client()__        final String repo = "test-repo"__        final String snapshot = "test-snap"__        final String sourceIdx = "test-idx"__        final String shrunkIdx = "test-idx-shrunk"___        logger.info("-->  creating repository")__        assertAcked(client.admin().cluster().preparePutRepository(repo).setType("fs")_            .setSettings(Settings.builder().put("location", randomRepoPath())_                             .put("compress", randomBoolean())))___        assertAcked(prepareCreate(sourceIdx, 0, Settings.builder()_            .put("number_of_shards", between(2, 10)).put("number_of_replicas", 0)))__        ensureGreen()___        logger.info("--> indexing some data")__        IndexRequestBuilder[] builders = new IndexRequestBuilder[randomIntBetween(10, 100)]__        for (int i = 0_ i < builders.length_ i++) {_            builders[i] = client().prepareIndex(sourceIdx, "type1",_                Integer.toString(i)).setSource("field1", "bar " + i)__        }_        indexRandom(true, builders)__        flushAndRefresh()___        logger.info("--> shrink the index")__        assertAcked(client.admin().indices().prepareUpdateSettings(sourceIdx)_            .setSettings(Settings.builder().put("index.blocks.write", true)).get())__        assertAcked(client.admin().indices().prepareResizeIndex(sourceIdx, shrunkIdx).get())___        logger.info("--> snapshot the shrunk index")__        CreateSnapshotResponse createResponse = client.admin().cluster()_            .prepareCreateSnapshot(repo, snapshot)_            .setWaitForCompletion(true).setIndices(shrunkIdx).get()__        assertEquals(SnapshotState.SUCCESS, createResponse.getSnapshotInfo().state())___        logger.info("--> delete index and stop the data node")__        assertAcked(client.admin().indices().prepareDelete(sourceIdx).get())__        assertAcked(client.admin().indices().prepareDelete(shrunkIdx).get())__        internalCluster().stopRandomDataNode()__        client().admin().cluster().prepareHealth().setTimeout("30s").setWaitForNodes("1")___        logger.info("--> start a new data node")__        final Settings dataSettings = Settings.builder()_            .put(Node.NODE_NAME_SETTING.getKey(), randomAlphaOfLength(5))_            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()) _            .build()__        internalCluster().startDataOnlyNode(dataSettings)__        client().admin().cluster().prepareHealth().setTimeout("30s").setWaitForNodes("2")___        logger.info("--> restore the shrunk index and ensure all shards are allocated")__        RestoreSnapshotResponse restoreResponse = client().admin().cluster()_            .prepareRestoreSnapshot(repo, snapshot).setWaitForCompletion(true)_            .setIndices(shrunkIdx).get()__        assertEquals(restoreResponse.getRestoreInfo().totalShards(),_            restoreResponse.getRestoreInfo().successfulShards())__        ensureYellow()__    };tests,that,a,shrunken,index,created,via,the,shrink,apis,and,subsequently,snapshotted,can,be,restored,when,the,node,the,shrunken,index,was,created,on,is,no,longer,part,of,the,cluster;public,void,test,restore,shrink,index,throws,exception,logger,info,starting,a,master,node,and,a,data,node,internal,cluster,start,master,only,node,internal,cluster,start,data,only,node,final,client,client,client,final,string,repo,test,repo,final,string,snapshot,test,snap,final,string,source,idx,test,idx,final,string,shrunk,idx,test,idx,shrunk,logger,info,creating,repository,assert,acked,client,admin,cluster,prepare,put,repository,repo,set,type,fs,set,settings,settings,builder,put,location,random,repo,path,put,compress,random,boolean,assert,acked,prepare,create,source,idx,0,settings,builder,put,between,2,10,put,0,ensure,green,logger,info,indexing,some,data,index,request,builder,builders,new,index,request,builder,random,int,between,10,100,for,int,i,0,i,builders,length,i,builders,i,client,prepare,index,source,idx,type1,integer,to,string,i,set,source,field1,bar,i,index,random,true,builders,flush,and,refresh,logger,info,shrink,the,index,assert,acked,client,admin,indices,prepare,update,settings,source,idx,set,settings,settings,builder,put,index,blocks,write,true,get,assert,acked,client,admin,indices,prepare,resize,index,source,idx,shrunk,idx,get,logger,info,snapshot,the,shrunk,index,create,snapshot,response,create,response,client,admin,cluster,prepare,create,snapshot,repo,snapshot,set,wait,for,completion,true,set,indices,shrunk,idx,get,assert,equals,snapshot,state,success,create,response,get,snapshot,info,state,logger,info,delete,index,and,stop,the,data,node,assert,acked,client,admin,indices,prepare,delete,source,idx,get,assert,acked,client,admin,indices,prepare,delete,shrunk,idx,get,internal,cluster,stop,random,data,node,client,admin,cluster,prepare,health,set,timeout,30s,set,wait,for,nodes,1,logger,info,start,a,new,data,node,final,settings,data,settings,settings,builder,put,node,get,key,random,alpha,of,length,5,put,environment,get,key,create,temp,dir,build,internal,cluster,start,data,only,node,data,settings,client,admin,cluster,prepare,health,set,timeout,30s,set,wait,for,nodes,2,logger,info,restore,the,shrunk,index,and,ensure,all,shards,are,allocated,restore,snapshot,response,restore,response,client,admin,cluster,prepare,restore,snapshot,repo,snapshot,set,wait,for,completion,true,set,indices,shrunk,idx,get,assert,equals,restore,response,get,restore,info,total,shards,restore,response,get,restore,info,successful,shards,ensure,yellow
