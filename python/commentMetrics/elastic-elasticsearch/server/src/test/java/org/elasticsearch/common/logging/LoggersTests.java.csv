commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void append(LogEvent event) {     lastEvent = event.toImmutable(). }
false;;0;3;;ParameterizedMessage lastParameterizedMessage() {     return (ParameterizedMessage) lastEvent.getMessage(). }
false;public;0;40;;public void testParameterizedMessageLambda() throws Exception {     final MockAppender appender = new MockAppender("trace_appender").     appender.start().     final Logger testLogger = LogManager.getLogger(LoggersTests.class).     Loggers.addAppender(testLogger, appender).     Loggers.setLevel(testLogger, Level.TRACE).     Throwable ex = randomException().     testLogger.error(() -> new ParameterizedMessage("an error message"), ex).     assertThat(appender.lastEvent.getLevel(), equalTo(Level.ERROR)).     assertThat(appender.lastEvent.getThrown(), equalTo(ex)).     assertThat(appender.lastParameterizedMessage().getFormattedMessage(), equalTo("an error message")).     ex = randomException().     testLogger.warn(() -> new ParameterizedMessage("a warn message: [{}]", "long gc"), ex).     assertThat(appender.lastEvent.getLevel(), equalTo(Level.WARN)).     assertThat(appender.lastEvent.getThrown(), equalTo(ex)).     assertThat(appender.lastParameterizedMessage().getFormattedMessage(), equalTo("a warn message: [long gc]")).     assertThat(appender.lastParameterizedMessage().getParameters(), arrayContaining("long gc")).     testLogger.info(() -> new ParameterizedMessage("an info message a=[{}], b=[{}], c=[{}]", 1, 2, 3)).     assertThat(appender.lastEvent.getLevel(), equalTo(Level.INFO)).     assertThat(appender.lastEvent.getThrown(), nullValue()).     assertThat(appender.lastParameterizedMessage().getFormattedMessage(), equalTo("an info message a=[1], b=[2], c=[3]")).     assertThat(appender.lastParameterizedMessage().getParameters(), arrayContaining(1, 2, 3)).     ex = randomException().     testLogger.debug(() -> new ParameterizedMessage("a debug message options = {}", Arrays.asList("yes", "no")), ex).     assertThat(appender.lastEvent.getLevel(), equalTo(Level.DEBUG)).     assertThat(appender.lastEvent.getThrown(), equalTo(ex)).     assertThat(appender.lastParameterizedMessage().getFormattedMessage(), equalTo("a debug message options = [yes, no]")).     assertThat(appender.lastParameterizedMessage().getParameters(), arrayContaining(Arrays.asList("yes", "no"))).     ex = randomException().     testLogger.trace(() -> new ParameterizedMessage("a trace message. element = [{}]", new Object[] { null }), ex).     assertThat(appender.lastEvent.getLevel(), equalTo(Level.TRACE)).     assertThat(appender.lastEvent.getThrown(), equalTo(ex)).     assertThat(appender.lastParameterizedMessage().getFormattedMessage(), equalTo("a trace message. element = [null]")).     assertThat(appender.lastParameterizedMessage().getParameters(), arrayContaining(new Object[] { null })). }
false;private;0;8;;private Throwable randomException() {     return randomFrom(new IOException("file not found"), new UnknownHostException("unknown hostname"), new OutOfMemoryError("out of space"), new IllegalArgumentException("index must be between 10 and 100")). }
