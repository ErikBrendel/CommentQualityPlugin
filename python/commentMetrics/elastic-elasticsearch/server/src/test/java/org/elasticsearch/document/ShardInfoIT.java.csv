commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;public void testIndexAndDelete() throws Exception {     prepareIndex(1).     IndexResponse indexResponse = client().prepareIndex("idx", "type").setSource("{}", XContentType.JSON).get().     assertShardInfo(indexResponse).     DeleteResponse deleteResponse = client().prepareDelete("idx", "type", indexResponse.getId()).get().     assertShardInfo(deleteResponse). }
false;public;0;6;;public void testUpdate() throws Exception {     prepareIndex(1).     UpdateResponse updateResponse = client().prepareUpdate("idx", "type", "1").setDoc("{}", XContentType.JSON).setDocAsUpsert(true).get().     assertShardInfo(updateResponse). }
false;public;0;21;;public void testBulkWithIndexAndDeleteItems() throws Exception {     prepareIndex(1).     BulkRequestBuilder bulkRequestBuilder = client().prepareBulk().     for (int i = 0. i < 10. i++) {         bulkRequestBuilder.add(client().prepareIndex("idx", "type").setSource("{}", XContentType.JSON)).     }     BulkResponse bulkResponse = bulkRequestBuilder.get().     bulkRequestBuilder = client().prepareBulk().     for (BulkItemResponse item : bulkResponse) {         assertThat(item.isFailed(), equalTo(false)).         assertShardInfo(item.getResponse()).         bulkRequestBuilder.add(client().prepareDelete("idx", "type", item.getId())).     }     bulkResponse = bulkRequestBuilder.get().     for (BulkItemResponse item : bulkResponse) {         assertThat(item.isFailed(), equalTo(false)).         assertShardInfo(item.getResponse()).     } }
false;public;0;15;;public void testBulkWithUpdateItems() throws Exception {     prepareIndex(1).     BulkRequestBuilder bulkRequestBuilder = client().prepareBulk().     for (int i = 0. i < 10. i++) {         bulkRequestBuilder.add(client().prepareUpdate("idx", "type", Integer.toString(i)).setDoc("{}", XContentType.JSON).setDocAsUpsert(true)).     }     BulkResponse bulkResponse = bulkRequestBuilder.get().     for (BulkItemResponse item : bulkResponse) {         assertThat(item.getFailure(), nullValue()).         assertThat(item.isFailed(), equalTo(false)).         assertShardInfo(item.getResponse()).     } }
false;private;1;3;;private void prepareIndex(int numberOfPrimaryShards) throws Exception {     prepareIndex(numberOfPrimaryShards, false). }
false;private;2;17;;private void prepareIndex(int numberOfPrimaryShards, boolean routingRequired) throws Exception {     numNodes = cluster().numDataNodes().     logger.info("Number of nodes: {}", numNodes).     int maxNumberOfCopies = (numNodes * 2) - 1.     numCopies = randomIntBetween(numNodes, maxNumberOfCopies).     logger.info("Number of copies: {}", numCopies).     assertAcked(prepareCreate("idx").setSettings(Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, numberOfPrimaryShards).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, numCopies - 1)).addMapping("type", "_routing", "required=" + routingRequired).get()).     for (int i = 0. i < numberOfPrimaryShards. i++) {         ensureActiveShardCopies(i, numNodes).     } }
false;private;1;3;;private void assertShardInfo(ReplicationResponse response) {     assertShardInfo(response, numCopies, numNodes). }
false;private;3;4;;private void assertShardInfo(ReplicationResponse response, int expectedTotal, int expectedSuccessful) {     assertThat(response.getShardInfo().getTotal(), greaterThanOrEqualTo(expectedTotal)).     assertThat(response.getShardInfo().getSuccessful(), greaterThanOrEqualTo(expectedSuccessful)). }
false;private;2;18;;private void ensureActiveShardCopies(final int shardId, final int copyCount) throws Exception {     assertBusy(() -> {         ClusterState state = client().admin().cluster().prepareState().get().getState().         assertThat(state.routingTable().index("idx"), not(nullValue())).         assertThat(state.routingTable().index("idx").shard(shardId), not(nullValue())).         assertThat(state.routingTable().index("idx").shard(shardId).activeShards().size(), equalTo(copyCount)).         ClusterHealthResponse healthResponse = client().admin().cluster().prepareHealth("idx").setWaitForNoRelocatingShards(true).get().         assertThat(healthResponse.isTimedOut(), equalTo(false)).         RecoveryResponse recoveryResponse = client().admin().indices().prepareRecoveries("idx").setActiveOnly(true).get().         assertThat(recoveryResponse.shardRecoveryStates().get("idx").size(), equalTo(0)).     }). }
