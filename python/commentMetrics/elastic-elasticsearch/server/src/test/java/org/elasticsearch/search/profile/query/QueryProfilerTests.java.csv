commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;19;;@BeforeClass public static void setup() throws IOException {     dir = newDirectory().     RandomIndexWriter w = new RandomIndexWriter(random(), dir).     final int numDocs = TestUtil.nextInt(random(), 1, 20).     for (int i = 0. i < numDocs. ++i) {         final int numHoles = random().nextInt(5).         for (int j = 0. j < numHoles. ++j) {             w.addDocument(new Document()).         }         Document doc = new Document().         doc.add(new StringField("foo", "bar", Store.NO)).         w.addDocument(doc).     }     reader = w.getReader().     w.close().     Engine.Searcher engineSearcher = new Engine.Searcher("test", new IndexSearcher(reader), null).     searcher = new ContextIndexSearcher(engineSearcher, IndexSearcher.getDefaultQueryCache(), MAYBE_CACHE_POLICY). }
false;public,static;0;7;;@AfterClass public static void cleanup() throws IOException {     IOUtils.close(reader, dir).     dir = null.     reader = null.     searcher = null. }
false;public;0;25;;public void testBasic() throws IOException {     QueryProfiler profiler = new QueryProfiler().     searcher.setProfiler(profiler).     Query query = new TermQuery(new Term("foo", "bar")).     searcher.search(query, 1).     List<ProfileResult> results = profiler.getTree().     assertEquals(1, results.size()).     Map<String, Long> breakdown = results.get(0).getTimeBreakdown().     assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString()).longValue(), greaterThan(0L)).     assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString()).longValue(), greaterThan(0L)).     assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString()).longValue(), greaterThan(0L)).     assertThat(breakdown.get(QueryTimingType.ADVANCE.toString()).longValue(), equalTo(0L)).     assertThat(breakdown.get(QueryTimingType.SCORE.toString()).longValue(), greaterThan(0L)).     assertThat(breakdown.get(QueryTimingType.MATCH.toString()).longValue(), equalTo(0L)).     assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString() + "_count").longValue(), greaterThan(0L)).     assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString() + "_count").longValue(), greaterThan(0L)).     assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString() + "_count").longValue(), greaterThan(0L)).     assertThat(breakdown.get(QueryTimingType.ADVANCE.toString() + "_count").longValue(), equalTo(0L)).     assertThat(breakdown.get(QueryTimingType.SCORE.toString() + "_count").longValue(), greaterThan(0L)).     assertThat(breakdown.get(QueryTimingType.MATCH.toString() + "_count").longValue(), equalTo(0L)).     long rewriteTime = profiler.getRewriteTime().     assertThat(rewriteTime, greaterThan(0L)). }
false;public;0;45;;public void testConstantScoreQuery() throws IOException {     QueryProfiler profiler = new QueryProfiler().     searcher.setProfiler(profiler).     Query query = new ConstantScoreQuery(new TermQuery(new Term("foo", "bar"))).     searcher.search(query, 1).     List<ProfileResult> results = profiler.getTree().     assertEquals(1, results.size()).     Map<String, Long> breakdownConstantScoreQuery = results.get(0).getTimeBreakdown().     assertEquals(1, results.get(0).getProfiledChildren().size()).     Map<String, Long> breakdownTermQuery = results.get(0).getProfiledChildren().get(0).getTimeBreakdown().     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.CREATE_WEIGHT.toString()).longValue(), greaterThan(0L)).     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.BUILD_SCORER.toString()).longValue(), greaterThan(0L)).     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.NEXT_DOC.toString()).longValue(), greaterThan(0L)).     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.ADVANCE.toString()).longValue(), equalTo(0L)).     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.SCORE.toString()).longValue(), greaterThan(0L)).     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.MATCH.toString()).longValue(), equalTo(0L)).     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.CREATE_WEIGHT.toString() + "_count").longValue(), greaterThan(0L)).     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.BUILD_SCORER.toString() + "_count").longValue(), greaterThan(0L)).     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.NEXT_DOC.toString() + "_count").longValue(), greaterThan(0L)).     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.ADVANCE.toString() + "_count").longValue(), equalTo(0L)).     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.SCORE.toString() + "_count").longValue(), greaterThan(0L)).     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.MATCH.toString() + "_count").longValue(), equalTo(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.CREATE_WEIGHT.toString()).longValue(), greaterThan(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.BUILD_SCORER.toString()).longValue(), greaterThan(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.NEXT_DOC.toString()).longValue(), greaterThan(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.ADVANCE.toString()).longValue(), equalTo(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.SCORE.toString()).longValue(), equalTo(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.MATCH.toString()).longValue(), equalTo(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.CREATE_WEIGHT.toString() + "_count").longValue(), greaterThan(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.BUILD_SCORER.toString() + "_count").longValue(), greaterThan(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.NEXT_DOC.toString() + "_count").longValue(), greaterThan(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.ADVANCE.toString() + "_count").longValue(), equalTo(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.SCORE.toString() + "_count").longValue(), equalTo(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.MATCH.toString() + "_count").longValue(), equalTo(0L)).     assertEquals(breakdownConstantScoreQuery.get(QueryTimingType.NEXT_DOC.toString()).longValue(), breakdownTermQuery.get(QueryTimingType.NEXT_DOC.toString()).longValue()).     long rewriteTime = profiler.getRewriteTime().     assertThat(rewriteTime, greaterThan(0L)). }
false;public;0;48;;public void testConstantScoreTotalHitsBeingCachedQuery() throws IOException {     Query query = new ConstantScoreQuery(new TermQuery(new Term("foo", "bar"))).     // clean cache and make sure queries will be cached     searcher.setQueryCache(IndexSearcher.getDefaultQueryCache()).     searcher.setQueryCachingPolicy(ALWAYS_CACHE_POLICY).     QueryProfiler profiler = new QueryProfiler().     searcher.setProfiler(profiler).     TotalHitCountCollector collector = new TotalHitCountCollector().     searcher.search(query, collector).     List<ProfileResult> results = profiler.getTree().     assertEquals(1, results.size()).     Map<String, Long> breakdownConstantScoreQuery = results.get(0).getTimeBreakdown().     assertEquals(1, results.get(0).getProfiledChildren().size()).     Map<String, Long> breakdownTermQuery = results.get(0).getProfiledChildren().get(0).getTimeBreakdown().     // In this case scorers for constant score query and term query are disconnected.     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.CREATE_WEIGHT.toString()).longValue(), greaterThan(0L)).     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.BUILD_SCORER.toString()).longValue(), greaterThan(0L)).     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.NEXT_DOC.toString()).longValue(), greaterThan(0L)).     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.ADVANCE.toString()).longValue(), equalTo(0L)).     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.SCORE.toString()).longValue(), equalTo(0L)).     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.MATCH.toString()).longValue(), equalTo(0L)).     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.CREATE_WEIGHT.toString() + "_count").longValue(), greaterThan(0L)).     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.BUILD_SCORER.toString() + "_count").longValue(), greaterThan(0L)).     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.NEXT_DOC.toString() + "_count").longValue(), greaterThan(0L)).     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.ADVANCE.toString() + "_count").longValue(), equalTo(0L)).     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.SCORE.toString() + "_count").longValue(), equalTo(0L)).     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.MATCH.toString() + "_count").longValue(), equalTo(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.CREATE_WEIGHT.toString()).longValue(), greaterThan(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.BUILD_SCORER.toString()).longValue(), greaterThan(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.NEXT_DOC.toString()).longValue(), greaterThan(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.ADVANCE.toString()).longValue(), equalTo(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.SCORE.toString()).longValue(), equalTo(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.MATCH.toString()).longValue(), equalTo(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.CREATE_WEIGHT.toString() + "_count").longValue(), greaterThan(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.BUILD_SCORER.toString() + "_count").longValue(), greaterThan(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.NEXT_DOC.toString() + "_count").longValue(), greaterThan(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.ADVANCE.toString() + "_count").longValue(), equalTo(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.SCORE.toString() + "_count").longValue(), equalTo(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.MATCH.toString() + "_count").longValue(), equalTo(0L)).     long rewriteTime = profiler.getRewriteTime().     assertThat(rewriteTime, greaterThan(0L)). }
false;public;0;53;;public void testConstantScoreTotalHitsNotCachedQuery() throws IOException {     Query query = new ConstantScoreQuery(new TermQuery(new Term("foo", "bar"))).     // clean cache and make sure queries will not be cached     searcher.setQueryCache(IndexSearcher.getDefaultQueryCache()).     searcher.setQueryCachingPolicy(NEVER_CACHE_POLICY).     QueryProfiler profiler = new QueryProfiler().     searcher.setProfiler(profiler).     TotalHitCountCollector collector = new TotalHitCountCollector().     searcher.search(query, collector).     List<ProfileResult> results = profiler.getTree().     assertEquals(1, results.size()).     Map<String, Long> breakdownConstantScoreQuery = results.get(0).getTimeBreakdown().     assertEquals(1, results.get(0).getProfiledChildren().size()).     Map<String, Long> breakdownTermQuery = results.get(0).getProfiledChildren().get(0).getTimeBreakdown().     // Timing from the scorer of term query are inherited by constant score query scorer.     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.CREATE_WEIGHT.toString()).longValue(), greaterThan(0L)).     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.BUILD_SCORER.toString()).longValue(), greaterThan(0L)).     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.NEXT_DOC.toString()).longValue(), greaterThan(0L)).     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.ADVANCE.toString()).longValue(), equalTo(0L)).     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.SCORE.toString()).longValue(), equalTo(0L)).     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.MATCH.toString()).longValue(), equalTo(0L)).     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.CREATE_WEIGHT.toString() + "_count").longValue(), greaterThan(0L)).     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.BUILD_SCORER.toString() + "_count").longValue(), greaterThan(0L)).     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.NEXT_DOC.toString() + "_count").longValue(), greaterThan(0L)).     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.ADVANCE.toString() + "_count").longValue(), equalTo(0L)).     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.SCORE.toString() + "_count").longValue(), equalTo(0L)).     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.MATCH.toString() + "_count").longValue(), equalTo(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.BUILD_SCORER.toString()).longValue(), greaterThan(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.NEXT_DOC.toString()).longValue(), greaterThan(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.ADVANCE.toString()).longValue(), equalTo(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.SCORE.toString()).longValue(), equalTo(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.MATCH.toString()).longValue(), equalTo(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.CREATE_WEIGHT.toString() + "_count").longValue(), greaterThan(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.BUILD_SCORER.toString() + "_count").longValue(), greaterThan(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.NEXT_DOC.toString() + "_count").longValue(), greaterThan(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.ADVANCE.toString() + "_count").longValue(), equalTo(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.SCORE.toString() + "_count").longValue(), equalTo(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.MATCH.toString() + "_count").longValue(), equalTo(0L)).     assertEquals(breakdownConstantScoreQuery.get(QueryTimingType.NEXT_DOC.toString()).longValue(), breakdownTermQuery.get(QueryTimingType.NEXT_DOC.toString()).longValue()).     long rewriteTime = profiler.getRewriteTime().     assertThat(rewriteTime, greaterThan(0L)). }
false;public;0;52;;public void testConstantScoreTotalHitsCachedQuery() throws IOException {     Query query = new ConstantScoreQuery(new TermQuery(new Term("foo", "bar"))).     // clean cache and make sure queries will be cached     searcher.setQueryCache(IndexSearcher.getDefaultQueryCache()).     searcher.setQueryCachingPolicy(ALWAYS_CACHE_POLICY).     // Put query on cache     TotalHitCountCollector collector = new TotalHitCountCollector().     searcher.search(query, collector).     QueryProfiler profiler = new QueryProfiler().     searcher.setProfiler(profiler).     collector = new TotalHitCountCollector().     searcher.search(query, collector).     List<ProfileResult> results = profiler.getTree().     assertEquals(1, results.size()).     Map<String, Long> breakdownConstantScoreQuery = results.get(0).getTimeBreakdown().     assertEquals(1, results.get(0).getProfiledChildren().size()).     Map<String, Long> breakdownTermQuery = results.get(0).getProfiledChildren().get(0).getTimeBreakdown().     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.CREATE_WEIGHT.toString()).longValue(), greaterThan(0L)).     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.BUILD_SCORER.toString()).longValue(), greaterThan(0L)).     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.NEXT_DOC.toString()).longValue(), greaterThan(0L)).     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.ADVANCE.toString()).longValue(), equalTo(0L)).     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.SCORE.toString()).longValue(), equalTo(0L)).     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.MATCH.toString()).longValue(), equalTo(0L)).     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.CREATE_WEIGHT.toString() + "_count").longValue(), greaterThan(0L)).     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.BUILD_SCORER.toString() + "_count").longValue(), greaterThan(0L)).     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.NEXT_DOC.toString() + "_count").longValue(), greaterThan(0L)).     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.ADVANCE.toString() + "_count").longValue(), equalTo(0L)).     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.SCORE.toString() + "_count").longValue(), equalTo(0L)).     assertThat(breakdownConstantScoreQuery.get(QueryTimingType.MATCH.toString() + "_count").longValue(), equalTo(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.CREATE_WEIGHT.toString()).longValue(), greaterThan(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.BUILD_SCORER.toString()).longValue(), equalTo(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.NEXT_DOC.toString()).longValue(), equalTo(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.ADVANCE.toString()).longValue(), equalTo(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.SCORE.toString()).longValue(), equalTo(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.MATCH.toString()).longValue(), equalTo(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.CREATE_WEIGHT.toString() + "_count").longValue(), greaterThan(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.BUILD_SCORER.toString() + "_count").longValue(), equalTo(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.NEXT_DOC.toString() + "_count").longValue(), equalTo(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.ADVANCE.toString() + "_count").longValue(), equalTo(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.SCORE.toString() + "_count").longValue(), equalTo(0L)).     assertThat(breakdownTermQuery.get(QueryTimingType.MATCH.toString() + "_count").longValue(), equalTo(0L)).     long rewriteTime = profiler.getRewriteTime().     assertThat(rewriteTime, greaterThan(0L)). }
false;public;0;25;;public void testNoScoring() throws IOException {     QueryProfiler profiler = new QueryProfiler().     searcher.setProfiler(profiler).     Query query = new TermQuery(new Term("foo", "bar")).     // scores are not needed     searcher.search(query, 1, Sort.INDEXORDER).     List<ProfileResult> results = profiler.getTree().     assertEquals(1, results.size()).     Map<String, Long> breakdown = results.get(0).getTimeBreakdown().     assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString()).longValue(), greaterThan(0L)).     assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString()).longValue(), greaterThan(0L)).     assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString()).longValue(), greaterThan(0L)).     assertThat(breakdown.get(QueryTimingType.ADVANCE.toString()).longValue(), equalTo(0L)).     assertThat(breakdown.get(QueryTimingType.SCORE.toString()).longValue(), equalTo(0L)).     assertThat(breakdown.get(QueryTimingType.MATCH.toString()).longValue(), equalTo(0L)).     assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString() + "_count").longValue(), greaterThan(0L)).     assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString() + "_count").longValue(), greaterThan(0L)).     assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString() + "_count").longValue(), greaterThan(0L)).     assertThat(breakdown.get(QueryTimingType.ADVANCE.toString() + "_count").longValue(), equalTo(0L)).     assertThat(breakdown.get(QueryTimingType.SCORE.toString() + "_count").longValue(), equalTo(0L)).     assertThat(breakdown.get(QueryTimingType.MATCH.toString() + "_count").longValue(), equalTo(0L)).     long rewriteTime = profiler.getRewriteTime().     assertThat(rewriteTime, greaterThan(0L)). }
false;public;0;11;;public void testUseIndexStats() throws IOException {     QueryProfiler profiler = new QueryProfiler().     searcher.setProfiler(profiler).     Query query = new TermQuery(new Term("foo", "bar")).     // will use index stats     searcher.count(query).     List<ProfileResult> results = profiler.getTree().     assertEquals(0, results.size()).     long rewriteTime = profiler.getRewriteTime().     assertThat(rewriteTime, greaterThan(0L)). }
false;public;0;30;;public void testApproximations() throws IOException {     QueryProfiler profiler = new QueryProfiler().     Engine.Searcher engineSearcher = new Engine.Searcher("test", new IndexSearcher(reader), reader::close).     // disable query caching since we want to test approximations, which won't     // be exposed on a cached entry     ContextIndexSearcher searcher = new ContextIndexSearcher(engineSearcher, null, MAYBE_CACHE_POLICY).     searcher.setProfiler(profiler).     Query query = new RandomApproximationQuery(new TermQuery(new Term("foo", "bar")), random()).     searcher.count(query).     List<ProfileResult> results = profiler.getTree().     assertEquals(1, results.size()).     Map<String, Long> breakdown = results.get(0).getTimeBreakdown().     assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString()).longValue(), greaterThan(0L)).     assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString()).longValue(), greaterThan(0L)).     assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString()).longValue(), greaterThan(0L)).     assertThat(breakdown.get(QueryTimingType.ADVANCE.toString()).longValue(), equalTo(0L)).     assertThat(breakdown.get(QueryTimingType.SCORE.toString()).longValue(), equalTo(0L)).     assertThat(breakdown.get(QueryTimingType.MATCH.toString()).longValue(), greaterThan(0L)).     assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString() + "_count").longValue(), greaterThan(0L)).     assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString() + "_count").longValue(), greaterThan(0L)).     assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString() + "_count").longValue(), greaterThan(0L)).     assertThat(breakdown.get(QueryTimingType.ADVANCE.toString() + "_count").longValue(), equalTo(0L)).     assertThat(breakdown.get(QueryTimingType.SCORE.toString() + "_count").longValue(), equalTo(0L)).     assertThat(breakdown.get(QueryTimingType.MATCH.toString() + "_count").longValue(), greaterThan(0L)).     long rewriteTime = profiler.getRewriteTime().     assertThat(rewriteTime, greaterThan(0L)). }
false;public;0;13;;public void testCollector() throws IOException {     TotalHitCountCollector collector = new TotalHitCountCollector().     ProfileCollector profileCollector = new ProfileCollector(collector).     assertEquals(0, profileCollector.getTime()).     final LeafCollector leafCollector = profileCollector.getLeafCollector(reader.leaves().get(0)).     assertThat(profileCollector.getTime(), greaterThan(0L)).     long time = profileCollector.getTime().     leafCollector.setScorer(null).     assertThat(profileCollector.getTime(), greaterThan(time)).     time = profileCollector.getTime().     leafCollector.collect(0).     assertThat(profileCollector.getTime(), greaterThan(time)). }
false;public;1;4;;@Override public String toString(String field) {     return getClass().getSimpleName(). }
false;public;1;4;;@Override public boolean equals(Object obj) {     return this == obj. }
false;public;0;4;;@Override public int hashCode() {     return 0. }
false;public;1;4;;@Override public void extractTerms(Set<Term> terms) {     throw new UnsupportedOperationException(). }
false;public;2;4;;@Override public Explanation explain(LeafReaderContext context, int doc) throws IOException {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public Scorer scorer(LeafReaderContext context) throws IOException {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public Scorer get(long loadCost) throws IOException {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public long cost() {     return 42. }
false;public;1;15;;@Override public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {     return new ScorerSupplier() {          @Override         public Scorer get(long loadCost) throws IOException {             throw new UnsupportedOperationException().         }          @Override         public long cost() {             return 42.         }     }. }
false;public;1;4;;@Override public boolean isCacheable(LeafReaderContext ctx) {     return true. }
false;public;3;40;;@Override public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {     return new Weight(this) {          @Override         public void extractTerms(Set<Term> terms) {             throw new UnsupportedOperationException().         }          @Override         public Explanation explain(LeafReaderContext context, int doc) throws IOException {             throw new UnsupportedOperationException().         }          @Override         public Scorer scorer(LeafReaderContext context) throws IOException {             throw new UnsupportedOperationException().         }          @Override         public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {             return new ScorerSupplier() {                  @Override                 public Scorer get(long loadCost) throws IOException {                     throw new UnsupportedOperationException().                 }                  @Override                 public long cost() {                     return 42.                 }             }.         }          @Override         public boolean isCacheable(LeafReaderContext ctx) {             return true.         }     }. }
false;public;0;16;;public void testScorerSupplier() throws IOException {     Directory dir = newDirectory().     IndexWriter w = new IndexWriter(dir, newIndexWriterConfig()).     w.addDocument(new Document()).     DirectoryReader reader = DirectoryReader.open(w).     w.close().     IndexSearcher s = newSearcher(reader).     s.setQueryCache(null).     Weight weight = s.createWeight(s.rewrite(new DummyQuery()), randomFrom(ScoreMode.values()), 1f).     // exception when getting the scorer     expectThrows(UnsupportedOperationException.class, () -> weight.scorer(s.getIndexReader().leaves().get(0))).     // no exception, means scorerSupplier is delegated     weight.scorerSupplier(s.getIndexReader().leaves().get(0)).     reader.close().     dir.close(). }
false;public;1;2;;@Override public void onUse(Query query) { }
false;public;1;4;;@Override public boolean shouldCache(Query query) throws IOException {     return true. }
false;public;1;2;;@Override public void onUse(Query query) { }
false;public;1;4;;@Override public boolean shouldCache(Query query) throws IOException {     return false. }
