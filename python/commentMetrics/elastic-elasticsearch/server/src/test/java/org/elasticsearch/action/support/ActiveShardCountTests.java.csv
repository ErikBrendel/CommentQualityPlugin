commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;public void testFromIntValue() {     assertSame(ActiveShardCount.from(0), ActiveShardCount.NONE).     final int value = randomIntBetween(1, 50).     assertEquals(ActiveShardCount.from(value).toString(), Integer.toString(value)).     expectThrows(IllegalArgumentException.class, () -> ActiveShardCount.from(randomIntBetween(-10, -1))). }
false;public;0;6;;public void testSerialization() throws IOException {     doWriteRead(ActiveShardCount.ALL).     doWriteRead(ActiveShardCount.DEFAULT).     doWriteRead(ActiveShardCount.NONE).     doWriteRead(ActiveShardCount.from(randomIntBetween(1, 50))). }
false;public;0;11;;public void testParseString() {     assertSame(ActiveShardCount.parseString("all"), ActiveShardCount.ALL).     assertSame(ActiveShardCount.parseString(null), ActiveShardCount.DEFAULT).     assertSame(ActiveShardCount.parseString("0"), ActiveShardCount.NONE).     int value = randomIntBetween(1, 50).     assertEquals(ActiveShardCount.parseString(value + ""), ActiveShardCount.from(value)).     expectThrows(IllegalArgumentException.class, () -> ActiveShardCount.parseString(randomAlphaOfLengthBetween(4, 8))).     // magic numbers not exposed through API     expectThrows(IllegalArgumentException.class, () -> ActiveShardCount.parseString("-1")).     expectThrows(IllegalArgumentException.class, () -> ActiveShardCount.parseString("-2")).     expectThrows(IllegalArgumentException.class, () -> ActiveShardCount.parseString(randomIntBetween(-10, -3) + "")). }
false;public;0;7;;public void testValidate() {     assertTrue(ActiveShardCount.parseString("all").validate(randomIntBetween(0, 10))).     final int numReplicas = randomIntBetween(0, 10).     assertTrue(ActiveShardCount.from(randomIntBetween(0, numReplicas + 1)).validate(numReplicas)).     // invalid values shouldn't validate     assertFalse(ActiveShardCount.from(numReplicas + randomIntBetween(2, 10)).validate(numReplicas)). }
false;private;1;13;;private void doWriteRead(ActiveShardCount activeShardCount) throws IOException {     final BytesStreamOutput out = new BytesStreamOutput().     activeShardCount.writeTo(out).     final ByteBufferStreamInput in = new ByteBufferStreamInput(ByteBuffer.wrap(out.bytes().toBytesRef().bytes)).     ActiveShardCount readActiveShardCount = ActiveShardCount.readFrom(in).     if (activeShardCount == ActiveShardCount.DEFAULT || activeShardCount == ActiveShardCount.ALL || activeShardCount == ActiveShardCount.NONE) {         assertSame(activeShardCount, readActiveShardCount).     } else {         assertEquals(activeShardCount, readActiveShardCount).     } }
false;public;0;12;;public void testEnoughShardsActiveZero() {     final String indexName = "test-idx".     final int numberOfShards = randomIntBetween(1, 5).     final int numberOfReplicas = randomIntBetween(4, 7).     final ActiveShardCount waitForActiveShards = ActiveShardCount.NONE.     ClusterState clusterState = initializeWithNewIndex(indexName, numberOfShards, numberOfReplicas).     assertTrue(waitForActiveShards.enoughShardsActive(clusterState, indexName)).     clusterState = startPrimaries(clusterState, indexName).     assertTrue(waitForActiveShards.enoughShardsActive(clusterState, indexName)).     clusterState = startAllShards(clusterState, indexName).     assertTrue(waitForActiveShards.enoughShardsActive(clusterState, indexName)). }
false;public;0;3;;public void testEnoughShardsActiveLevelOne() {     runTestForOneActiveShard(ActiveShardCount.ONE). }
false;public;0;4;;public void testEnoughShardsActiveLevelDefault() {     // default is 1     runTestForOneActiveShard(ActiveShardCount.DEFAULT). }
false;public;0;17;;public void testEnoughShardsActiveRandom() {     final String indexName = "test-idx".     final int numberOfShards = randomIntBetween(1, 5).     final int numberOfReplicas = randomIntBetween(4, 7).     final int activeShardCount = randomIntBetween(2, numberOfReplicas).     final ActiveShardCount waitForActiveShards = ActiveShardCount.from(activeShardCount).     ClusterState clusterState = initializeWithNewIndex(indexName, numberOfShards, numberOfReplicas).     assertFalse(waitForActiveShards.enoughShardsActive(clusterState, indexName)).     clusterState = startPrimaries(clusterState, indexName).     assertFalse(waitForActiveShards.enoughShardsActive(clusterState, indexName)).     clusterState = startLessThanWaitOnShards(clusterState, indexName, activeShardCount - 2).     assertFalse(waitForActiveShards.enoughShardsActive(clusterState, indexName)).     clusterState = startWaitOnShards(clusterState, indexName, activeShardCount - 1).     assertTrue(waitForActiveShards.enoughShardsActive(clusterState, indexName)).     clusterState = startAllShards(clusterState, indexName).     assertTrue(waitForActiveShards.enoughShardsActive(clusterState, indexName)). }
false;public;0;15;;public void testEnoughShardsActiveLevelAll() {     final String indexName = "test-idx".     final int numberOfShards = randomIntBetween(1, 5).     final int numberOfReplicas = randomIntBetween(4, 7).     // both values should represent "all"     final ActiveShardCount waitForActiveShards = randomBoolean() ? ActiveShardCount.from(numberOfReplicas + 1) : ActiveShardCount.ALL.     ClusterState clusterState = initializeWithNewIndex(indexName, numberOfShards, numberOfReplicas).     assertFalse(waitForActiveShards.enoughShardsActive(clusterState, indexName)).     clusterState = startPrimaries(clusterState, indexName).     assertFalse(waitForActiveShards.enoughShardsActive(clusterState, indexName)).     clusterState = startLessThanWaitOnShards(clusterState, indexName, numberOfReplicas - randomIntBetween(1, numberOfReplicas)).     assertFalse(waitForActiveShards.enoughShardsActive(clusterState, indexName)).     clusterState = startAllShards(clusterState, indexName).     assertTrue(waitForActiveShards.enoughShardsActive(clusterState, indexName)). }
false;public;0;18;;public void testEnoughShardsActiveValueBased() {     // enough shards active case     int threshold = randomIntBetween(1, 50).     ActiveShardCount waitForActiveShards = ActiveShardCount.from(randomIntBetween(0, threshold)).     assertTrue(waitForActiveShards.enoughShardsActive(randomIntBetween(threshold, 50))).     // not enough shards active     waitForActiveShards = ActiveShardCount.from(randomIntBetween(threshold, 50)).     assertFalse(waitForActiveShards.enoughShardsActive(randomIntBetween(0, threshold - 1))).     // wait for zero shards should always pass     assertTrue(ActiveShardCount.from(0).enoughShardsActive(randomIntBetween(0, 50))).     // invalid values     Exception e = expectThrows(IllegalStateException.class, () -> ActiveShardCount.ALL.enoughShardsActive(randomIntBetween(0, 50))).     assertEquals("not enough information to resolve to shard count", e.getMessage()).     e = expectThrows(IllegalStateException.class, () -> ActiveShardCount.DEFAULT.enoughShardsActive(randomIntBetween(0, 50))).     assertEquals("not enough information to resolve to shard count", e.getMessage()).     e = expectThrows(IllegalArgumentException.class, () -> ActiveShardCount.NONE.enoughShardsActive(randomIntBetween(-10, -1))).     assertEquals("activeShardCount cannot be negative", e.getMessage()). }
false;public;0;10;;public void testEnoughShardsActiveWithClosedIndex() {     final String indexName = "test-idx".     final int numberOfShards = randomIntBetween(1, 5).     final int numberOfReplicas = randomIntBetween(4, 7).     final ClusterState clusterState = initializeWithClosedIndex(indexName, numberOfShards, numberOfReplicas).     for (ActiveShardCount waitForActiveShards : Arrays.asList(ActiveShardCount.DEFAULT, ActiveShardCount.ALL, ActiveShardCount.ONE)) {         assertTrue(waitForActiveShards.enoughShardsActive(clusterState, indexName)).     } }
false;private;1;13;;private void runTestForOneActiveShard(final ActiveShardCount activeShardCount) {     final String indexName = "test-idx".     final int numberOfShards = randomIntBetween(1, 5).     final int numberOfReplicas = randomIntBetween(4, 7).     assert activeShardCount == ActiveShardCount.ONE || activeShardCount == ActiveShardCount.DEFAULT.     final ActiveShardCount waitForActiveShards = activeShardCount.     ClusterState clusterState = initializeWithNewIndex(indexName, numberOfShards, numberOfReplicas).     assertFalse(waitForActiveShards.enoughShardsActive(clusterState, indexName)).     clusterState = startPrimaries(clusterState, indexName).     assertTrue(waitForActiveShards.enoughShardsActive(clusterState, indexName)).     clusterState = startAllShards(clusterState, indexName).     assertTrue(waitForActiveShards.enoughShardsActive(clusterState, indexName)). }
false;private;3;12;;private ClusterState initializeWithNewIndex(final String indexName, final int numShards, final int numReplicas) {     // initial index creation and new routing table info     final IndexMetaData indexMetaData = IndexMetaData.builder(indexName).settings(settings(Version.CURRENT).put(IndexMetaData.SETTING_INDEX_UUID, UUIDs.randomBase64UUID())).numberOfShards(numShards).numberOfReplicas(numReplicas).build().     final MetaData metaData = MetaData.builder().put(indexMetaData, true).build().     final RoutingTable routingTable = RoutingTable.builder().addAsNew(indexMetaData).build().     return ClusterState.builder(new ClusterName("test_cluster")).metaData(metaData).routingTable(routingTable).build(). }
false;private;3;11;;private ClusterState initializeWithClosedIndex(final String indexName, final int numShards, final int numReplicas) {     final IndexMetaData indexMetaData = IndexMetaData.builder(indexName).settings(settings(Version.CURRENT).put(IndexMetaData.SETTING_INDEX_UUID, UUIDs.randomBase64UUID())).numberOfShards(numShards).numberOfReplicas(numReplicas).state(IndexMetaData.State.CLOSE).build().     final MetaData metaData = MetaData.builder().put(indexMetaData, true).build().     return ClusterState.builder(new ClusterName("test_cluster")).metaData(metaData).build(). }
false;private;2;17;;private ClusterState startPrimaries(final ClusterState clusterState, final String indexName) {     RoutingTable routingTable = clusterState.routingTable().     IndexRoutingTable indexRoutingTable = routingTable.index(indexName).     IndexRoutingTable.Builder newIndexRoutingTable = IndexRoutingTable.builder(indexRoutingTable.getIndex()).     for (final ObjectCursor<IndexShardRoutingTable> shardEntry : indexRoutingTable.getShards().values()) {         final IndexShardRoutingTable shardRoutingTable = shardEntry.value.         for (ShardRouting shardRouting : shardRoutingTable.getShards()) {             if (shardRouting.primary()) {                 shardRouting = shardRouting.initialize(randomAlphaOfLength(8), null, shardRouting.getExpectedShardSize()).moveToStarted().             }             newIndexRoutingTable.addShard(shardRouting).         }     }     routingTable = RoutingTable.builder(routingTable).add(newIndexRoutingTable).build().     return ClusterState.builder(clusterState).routingTable(routingTable).build(). }
false;private;3;25;;private ClusterState startLessThanWaitOnShards(final ClusterState clusterState, final String indexName, final int numShardsToStart) {     RoutingTable routingTable = clusterState.routingTable().     IndexRoutingTable indexRoutingTable = routingTable.index(indexName).     IndexRoutingTable.Builder newIndexRoutingTable = IndexRoutingTable.builder(indexRoutingTable.getIndex()).     for (final ObjectCursor<IndexShardRoutingTable> shardEntry : indexRoutingTable.getShards().values()) {         final IndexShardRoutingTable shardRoutingTable = shardEntry.value.         assert shardRoutingTable.getSize() > 2.         int numToStart = numShardsToStart.         // want less than half, and primary is already started         for (ShardRouting shardRouting : shardRoutingTable.getShards()) {             if (shardRouting.primary()) {                 assertTrue(shardRouting.active()).             } else {                 if (numToStart > 0) {                     shardRouting = shardRouting.initialize(randomAlphaOfLength(8), null, shardRouting.getExpectedShardSize()).moveToStarted().                     numToStart--.                 }             }             newIndexRoutingTable.addShard(shardRouting).         }     }     routingTable = RoutingTable.builder(routingTable).add(newIndexRoutingTable).build().     return ClusterState.builder(clusterState).routingTable(routingTable).build(). }
false;private;3;28;;private ClusterState startWaitOnShards(final ClusterState clusterState, final String indexName, final int numShardsToStart) {     RoutingTable routingTable = clusterState.routingTable().     IndexRoutingTable indexRoutingTable = routingTable.index(indexName).     IndexRoutingTable.Builder newIndexRoutingTable = IndexRoutingTable.builder(indexRoutingTable.getIndex()).     for (final ObjectCursor<IndexShardRoutingTable> shardEntry : indexRoutingTable.getShards().values()) {         final IndexShardRoutingTable shardRoutingTable = shardEntry.value.         assert shardRoutingTable.getSize() > 2.         int numToStart = numShardsToStart.         for (ShardRouting shardRouting : shardRoutingTable.getShards()) {             if (shardRouting.primary()) {                 assertTrue(shardRouting.active()).             } else {                 if (shardRouting.active() == false) {                     if (numToStart > 0) {                         shardRouting = shardRouting.initialize(randomAlphaOfLength(8), null, shardRouting.getExpectedShardSize()).moveToStarted().                         numToStart--.                     }                 } else {                     numToStart--.                 }             }             newIndexRoutingTable.addShard(shardRouting).         }     }     routingTable = RoutingTable.builder(routingTable).add(newIndexRoutingTable).build().     return ClusterState.builder(clusterState).routingTable(routingTable).build(). }
false;private;2;21;;private ClusterState startAllShards(final ClusterState clusterState, final String indexName) {     RoutingTable routingTable = clusterState.routingTable().     IndexRoutingTable indexRoutingTable = routingTable.index(indexName).     IndexRoutingTable.Builder newIndexRoutingTable = IndexRoutingTable.builder(indexRoutingTable.getIndex()).     for (final ObjectCursor<IndexShardRoutingTable> shardEntry : indexRoutingTable.getShards().values()) {         final IndexShardRoutingTable shardRoutingTable = shardEntry.value.         for (ShardRouting shardRouting : shardRoutingTable.getShards()) {             if (shardRouting.primary()) {                 assertTrue(shardRouting.active()).             } else {                 if (shardRouting.active() == false) {                     shardRouting = shardRouting.initialize(randomAlphaOfLength(8), null, shardRouting.getExpectedShardSize()).moveToStarted().                 }             }             newIndexRoutingTable.addShard(shardRouting).         }     }     routingTable = RoutingTable.builder(routingTable).add(newIndexRoutingTable).build().     return ClusterState.builder(clusterState).routingTable(routingTable).build(). }
