commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isForceExecution() {     return isForceExecution. }
false;public;0;4;;@Override public void onAfter() {     onAfter.set(true). }
false;public;1;4;;@Override public void onRejection(final Exception e) {     onRejection.set(e). }
false;public;1;4;;@Override public void onFailure(final Exception e) {     onFailure.set(e). }
false;protected;0;4;;@Override protected void doRun() throws Exception {     doRun.set(true). }
false;public;0;52;;public void testTimedRunnableDelegatesToAbstractRunnable() {     final boolean isForceExecution = randomBoolean().     final AtomicBoolean onAfter = new AtomicBoolean().     final AtomicReference<Exception> onRejection = new AtomicReference<>().     final AtomicReference<Exception> onFailure = new AtomicReference<>().     final AtomicBoolean doRun = new AtomicBoolean().     final AbstractRunnable runnable = new AbstractRunnable() {          @Override         public boolean isForceExecution() {             return isForceExecution.         }          @Override         public void onAfter() {             onAfter.set(true).         }          @Override         public void onRejection(final Exception e) {             onRejection.set(e).         }          @Override         public void onFailure(final Exception e) {             onFailure.set(e).         }          @Override         protected void doRun() throws Exception {             doRun.set(true).         }     }.     final TimedRunnable timedRunnable = new TimedRunnable(runnable).     assertThat(timedRunnable.isForceExecution(), equalTo(isForceExecution)).     timedRunnable.onAfter().     assertTrue(onAfter.get()).     final Exception rejection = new RejectedExecutionException().     timedRunnable.onRejection(rejection).     assertThat(onRejection.get(), equalTo(rejection)).     final Exception failure = new Exception().     timedRunnable.onFailure(failure).     assertThat(onFailure.get(), equalTo(failure)).     timedRunnable.run().     assertTrue(doRun.get()). }
false;public;0;4;;@Override public void onAfter() {     onAfter.set(true). }
false;public;1;4;;@Override public void onFailure(final Exception e) {     onFailure.set(e). }
false;protected;0;5;;@Override protected void doRun() throws Exception {     doRun.set(true).     throw exception. }
false;public;0;31;;public void testTimedRunnableDelegatesRunInFailureCase() {     final AtomicBoolean onAfter = new AtomicBoolean().     final AtomicReference<Exception> onFailure = new AtomicReference<>().     final AtomicBoolean doRun = new AtomicBoolean().     final Exception exception = new Exception().     final AbstractRunnable runnable = new AbstractRunnable() {          @Override         public void onAfter() {             onAfter.set(true).         }          @Override         public void onFailure(final Exception e) {             onFailure.set(e).         }          @Override         protected void doRun() throws Exception {             doRun.set(true).             throw exception.         }     }.     final TimedRunnable timedRunnable = new TimedRunnable(runnable).     timedRunnable.run().     assertTrue(doRun.get()).     assertThat(onFailure.get(), equalTo(exception)).     assertTrue(onAfter.get()). }
