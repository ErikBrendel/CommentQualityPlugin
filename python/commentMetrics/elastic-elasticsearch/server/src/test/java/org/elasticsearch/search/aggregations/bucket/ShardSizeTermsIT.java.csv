commented;modifiers;parameterAmount;loc;comment;code
false;public;0;22;;public void testNoShardSizeString() throws Exception {     createIdx("type=keyword").     indexData().     SearchResponse response = client().prepareSearch("idx").setTypes("type").setQuery(matchAllQuery()).addAggregation(terms("keys").field("key").size(3).collectMode(randomFrom(SubAggCollectionMode.values())).order(BucketOrder.count(false))).get().     Terms terms = response.getAggregations().get("keys").     List<? extends Terms.Bucket> buckets = terms.getBuckets().     assertThat(buckets.size(), equalTo(3)).     Map<String, Long> expected = new HashMap<>().     expected.put("1", 8L).     expected.put("3", 8L).     expected.put("2", 5L).     for (Terms.Bucket bucket : buckets) {         assertThat(bucket.getDocCount(), equalTo(expected.get(bucket.getKeyAsString()))).     } }
false;public;0;22;;public void testShardSizeEqualsSizeString() throws Exception {     createIdx("type=keyword").     indexData().     SearchResponse response = client().prepareSearch("idx").setTypes("type").setQuery(matchAllQuery()).addAggregation(terms("keys").field("key").size(3).shardSize(3).collectMode(randomFrom(SubAggCollectionMode.values())).order(BucketOrder.count(false))).get().     Terms terms = response.getAggregations().get("keys").     List<? extends Terms.Bucket> buckets = terms.getBuckets().     assertThat(buckets.size(), equalTo(3)).     Map<String, Long> expected = new HashMap<>().     expected.put("1", 8L).     expected.put("3", 8L).     expected.put("2", 4L).     for (Terms.Bucket bucket : buckets) {         assertThat(bucket.getDocCount(), equalTo(expected.get(bucket.getKeyAsString()))).     } }
false;public;0;23;;public void testWithShardSizeString() throws Exception {     createIdx("type=keyword").     indexData().     SearchResponse response = client().prepareSearch("idx").setTypes("type").setQuery(matchAllQuery()).addAggregation(terms("keys").field("key").size(3).collectMode(randomFrom(SubAggCollectionMode.values())).shardSize(5).order(BucketOrder.count(false))).get().     Terms terms = response.getAggregations().get("keys").     List<? extends Terms.Bucket> buckets = terms.getBuckets().     // we still only return 3 entries (based on the 'size' param)     assertThat(buckets.size(), equalTo(3)).     Map<String, Long> expected = new HashMap<>().     expected.put("1", 8L).     expected.put("3", 8L).     // <-- count is now fixed     expected.put("2", 5L).     for (Terms.Bucket bucket : buckets) {         assertThat(bucket.getDocCount(), equalTo(expected.get(bucket.getKeyAsString()))).     } }
false;public;0;23;;public void testWithShardSizeStringSingleShard() throws Exception {     createIdx("type=keyword").     indexData().     SearchResponse response = client().prepareSearch("idx").setTypes("type").setRouting(routing1).setQuery(matchAllQuery()).addAggregation(terms("keys").field("key").size(3).collectMode(randomFrom(SubAggCollectionMode.values())).shardSize(5).order(BucketOrder.count(false))).get().     Terms terms = response.getAggregations().get("keys").     List<? extends Terms.Bucket> buckets = terms.getBuckets().     // we still only return 3 entries (based on the 'size' param)     assertThat(buckets.size(), equalTo(3)).     Map<String, Long> expected = new HashMap<>().     expected.put("1", 5L).     expected.put("2", 4L).     // <-- count is now fixed     expected.put("3", 3L).     for (Terms.Bucket bucket : buckets) {         assertThat(bucket.getDocCount(), equalTo(expected.get(bucket.getKey()))).     } }
false;public;0;22;;public void testNoShardSizeTermOrderString() throws Exception {     createIdx("type=keyword").     indexData().     SearchResponse response = client().prepareSearch("idx").setTypes("type").setQuery(matchAllQuery()).addAggregation(terms("keys").field("key").size(3).collectMode(randomFrom(SubAggCollectionMode.values())).order(BucketOrder.key(true))).get().     Terms terms = response.getAggregations().get("keys").     List<? extends Terms.Bucket> buckets = terms.getBuckets().     assertThat(buckets.size(), equalTo(3)).     Map<String, Long> expected = new HashMap<>().     expected.put("1", 8L).     expected.put("2", 5L).     expected.put("3", 8L).     for (Terms.Bucket bucket : buckets) {         assertThat(bucket.getDocCount(), equalTo(expected.get(bucket.getKeyAsString()))).     } }
false;public;0;22;;public void testNoShardSizeLong() throws Exception {     createIdx("type=long").     indexData().     SearchResponse response = client().prepareSearch("idx").setTypes("type").setQuery(matchAllQuery()).addAggregation(terms("keys").field("key").size(3).collectMode(randomFrom(SubAggCollectionMode.values())).order(BucketOrder.count(false))).get().     Terms terms = response.getAggregations().get("keys").     List<? extends Terms.Bucket> buckets = terms.getBuckets().     assertThat(buckets.size(), equalTo(3)).     Map<Integer, Long> expected = new HashMap<>().     expected.put(1, 8L).     expected.put(3, 8L).     expected.put(2, 5L).     for (Terms.Bucket bucket : buckets) {         assertThat(bucket.getDocCount(), equalTo(expected.get(bucket.getKeyAsNumber().intValue()))).     } }
false;public;0;22;;public void testShardSizeEqualsSizeLong() throws Exception {     createIdx("type=long").     indexData().     SearchResponse response = client().prepareSearch("idx").setTypes("type").setQuery(matchAllQuery()).addAggregation(terms("keys").field("key").size(3).shardSize(3).collectMode(randomFrom(SubAggCollectionMode.values())).order(BucketOrder.count(false))).get().     Terms terms = response.getAggregations().get("keys").     List<? extends Terms.Bucket> buckets = terms.getBuckets().     assertThat(buckets.size(), equalTo(3)).     Map<Integer, Long> expected = new HashMap<>().     expected.put(1, 8L).     expected.put(3, 8L).     expected.put(2, 4L).     for (Terms.Bucket bucket : buckets) {         assertThat(bucket.getDocCount(), equalTo(expected.get(bucket.getKeyAsNumber().intValue()))).     } }
false;public;0;22;;public void testWithShardSizeLong() throws Exception {     createIdx("type=long").     indexData().     SearchResponse response = client().prepareSearch("idx").setTypes("type").setQuery(matchAllQuery()).addAggregation(terms("keys").field("key").size(3).collectMode(randomFrom(SubAggCollectionMode.values())).shardSize(5).order(BucketOrder.count(false))).get().     Terms terms = response.getAggregations().get("keys").     List<? extends Terms.Bucket> buckets = terms.getBuckets().     // we still only return 3 entries (based on the 'size' param)     assertThat(buckets.size(), equalTo(3)).     Map<Integer, Long> expected = new HashMap<>().     expected.put(1, 8L).     expected.put(3, 8L).     // <-- count is now fixed     expected.put(2, 5L).     for (Terms.Bucket bucket : buckets) {         assertThat(bucket.getDocCount(), equalTo(expected.get(bucket.getKeyAsNumber().intValue()))).     } }
false;public;0;23;;public void testWithShardSizeLongSingleShard() throws Exception {     createIdx("type=long").     indexData().     SearchResponse response = client().prepareSearch("idx").setTypes("type").setRouting(routing1).setQuery(matchAllQuery()).addAggregation(terms("keys").field("key").size(3).collectMode(randomFrom(SubAggCollectionMode.values())).shardSize(5).order(BucketOrder.count(false))).get().     Terms terms = response.getAggregations().get("keys").     List<? extends Terms.Bucket> buckets = terms.getBuckets().     // we still only return 3 entries (based on the 'size' param)     assertThat(buckets.size(), equalTo(3)).     Map<Integer, Long> expected = new HashMap<>().     expected.put(1, 5L).     expected.put(2, 4L).     expected.put(3, 3L).     for (Terms.Bucket bucket : buckets) {         assertThat(bucket.getDocCount(), equalTo(expected.get(bucket.getKeyAsNumber().intValue()))).     } }
false;public;0;22;;public void testNoShardSizeTermOrderLong() throws Exception {     createIdx("type=long").     indexData().     SearchResponse response = client().prepareSearch("idx").setTypes("type").setQuery(matchAllQuery()).addAggregation(terms("keys").field("key").size(3).collectMode(randomFrom(SubAggCollectionMode.values())).order(BucketOrder.key(true))).get().     Terms terms = response.getAggregations().get("keys").     List<? extends Terms.Bucket> buckets = terms.getBuckets().     assertThat(buckets.size(), equalTo(3)).     Map<Integer, Long> expected = new HashMap<>().     expected.put(1, 8L).     expected.put(2, 5L).     expected.put(3, 8L).     for (Terms.Bucket bucket : buckets) {         assertThat(bucket.getDocCount(), equalTo(expected.get(bucket.getKeyAsNumber().intValue()))).     } }
false;public;0;22;;public void testNoShardSizeDouble() throws Exception {     createIdx("type=double").     indexData().     SearchResponse response = client().prepareSearch("idx").setTypes("type").setQuery(matchAllQuery()).addAggregation(terms("keys").field("key").size(3).collectMode(randomFrom(SubAggCollectionMode.values())).order(BucketOrder.count(false))).get().     Terms terms = response.getAggregations().get("keys").     List<? extends Terms.Bucket> buckets = terms.getBuckets().     assertThat(buckets.size(), equalTo(3)).     Map<Integer, Long> expected = new HashMap<>().     expected.put(1, 8L).     expected.put(3, 8L).     expected.put(2, 5L).     for (Terms.Bucket bucket : buckets) {         assertThat(bucket.getDocCount(), equalTo(expected.get(bucket.getKeyAsNumber().intValue()))).     } }
false;public;0;22;;public void testShardSizeEqualsSizeDouble() throws Exception {     createIdx("type=double").     indexData().     SearchResponse response = client().prepareSearch("idx").setTypes("type").setQuery(matchAllQuery()).addAggregation(terms("keys").field("key").size(3).shardSize(3).collectMode(randomFrom(SubAggCollectionMode.values())).order(BucketOrder.count(false))).get().     Terms terms = response.getAggregations().get("keys").     List<? extends Terms.Bucket> buckets = terms.getBuckets().     assertThat(buckets.size(), equalTo(3)).     Map<Integer, Long> expected = new HashMap<>().     expected.put(1, 8L).     expected.put(3, 8L).     expected.put(2, 4L).     for (Terms.Bucket bucket : buckets) {         assertThat(bucket.getDocCount(), equalTo(expected.get(bucket.getKeyAsNumber().intValue()))).     } }
false;public;0;22;;public void testWithShardSizeDouble() throws Exception {     createIdx("type=double").     indexData().     SearchResponse response = client().prepareSearch("idx").setTypes("type").setQuery(matchAllQuery()).addAggregation(terms("keys").field("key").size(3).collectMode(randomFrom(SubAggCollectionMode.values())).shardSize(5).order(BucketOrder.count(false))).get().     Terms terms = response.getAggregations().get("keys").     List<? extends Terms.Bucket> buckets = terms.getBuckets().     assertThat(buckets.size(), equalTo(3)).     Map<Integer, Long> expected = new HashMap<>().     expected.put(1, 8L).     expected.put(3, 8L).     // <-- count is now fixed     expected.put(2, 5L).     for (Terms.Bucket bucket : buckets) {         assertThat(bucket.getDocCount(), equalTo(expected.get(bucket.getKeyAsNumber().intValue()))).     } }
false;public;0;22;;public void testWithShardSizeDoubleSingleShard() throws Exception {     createIdx("type=double").     indexData().     SearchResponse response = client().prepareSearch("idx").setTypes("type").setRouting(routing1).setQuery(matchAllQuery()).addAggregation(terms("keys").field("key").size(3).collectMode(randomFrom(SubAggCollectionMode.values())).shardSize(5).order(BucketOrder.count(false))).get().     Terms terms = response.getAggregations().get("keys").     List<? extends Terms.Bucket> buckets = terms.getBuckets().     assertThat(buckets.size(), equalTo(3)).     Map<Integer, Long> expected = new HashMap<>().     expected.put(1, 5L).     expected.put(2, 4L).     expected.put(3, 3L).     for (Terms.Bucket bucket : buckets) {         assertThat(bucket.getDocCount(), equalTo(expected.get(bucket.getKeyAsNumber().intValue()))).     } }
false;public;0;22;;public void testNoShardSizeTermOrderDouble() throws Exception {     createIdx("type=double").     indexData().     SearchResponse response = client().prepareSearch("idx").setTypes("type").setQuery(matchAllQuery()).addAggregation(terms("keys").field("key").size(3).collectMode(randomFrom(SubAggCollectionMode.values())).order(BucketOrder.key(true))).get().     Terms terms = response.getAggregations().get("keys").     List<? extends Terms.Bucket> buckets = terms.getBuckets().     assertThat(buckets.size(), equalTo(3)).     Map<Integer, Long> expected = new HashMap<>().     expected.put(1, 8L).     expected.put(2, 5L).     expected.put(3, 8L).     for (Terms.Bucket bucket : buckets) {         assertThat(bucket.getDocCount(), equalTo(expected.get(bucket.getKeyAsNumber().intValue()))).     } }
