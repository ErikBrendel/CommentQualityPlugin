commented;modifiers;parameterAmount;loc;comment;code
false;private,static;4;15;;private static ValidateQueryResponse createRandomValidateQueryResponse(int totalShards, int successfulShards, int failedShards, List<DefaultShardOperationFailedException> failures) {     boolean valid = failedShards == 0.     List<QueryExplanation> queryExplanations = new ArrayList<>(totalShards).     for (DefaultShardOperationFailedException failure : failures) {         queryExplanations.add(new QueryExplanation(failure.index(), failure.shardId(), false, failure.reason(), null)).     }     return new ValidateQueryResponse(valid, queryExplanations, totalShards, successfulShards, failedShards, failures). }
false;private,static;0;25;;private static ValidateQueryResponse createRandomValidateQueryResponse() {     int totalShards = randomIntBetween(1, 10).     int successfulShards = randomIntBetween(0, totalShards).     int failedShards = totalShards - successfulShards.     boolean valid = failedShards == 0.     List<QueryExplanation> queryExplanations = new ArrayList<>(totalShards).     List<DefaultShardOperationFailedException> shardFailures = new ArrayList<>(failedShards).     for (int i = 0. i < successfulShards. i++) {         QueryExplanation queryExplanation = QueryExplanationTests.createRandomQueryExplanation(true).         queryExplanations.add(queryExplanation).     }     for (int i = 0. i < failedShards. i++) {         QueryExplanation queryExplanation = QueryExplanationTests.createRandomQueryExplanation(false).         ElasticsearchException exc = new ElasticsearchException("some_error_" + randomInt()).         shardFailures.add(new DefaultShardOperationFailedException(queryExplanation.getIndex(), queryExplanation.getShard(), exc)).         queryExplanations.add(queryExplanation).     }     Collections.shuffle(queryExplanations, random()).     return new ValidateQueryResponse(valid, queryExplanations, totalShards, successfulShards, failedShards, shardFailures). }
false;protected;1;4;;@Override protected ValidateQueryResponse doParseInstance(XContentParser parser) throws IOException {     return ValidateQueryResponse.fromXContent(parser). }
false;protected;0;4;;@Override protected ValidateQueryResponse createTestInstance() {     return createRandomValidateQueryResponse(). }
false;protected;2;8;;@Override protected void assertEqualInstances(ValidateQueryResponse response, ValidateQueryResponse parsedResponse) {     super.assertEqualInstances(response, parsedResponse).     Set<QueryExplanation> queryExplSet = new HashSet<>(response.getQueryExplanation()).     assertEquals(response.isValid(), parsedResponse.isValid()).     assertEquals(response.getQueryExplanation().size(), parsedResponse.getQueryExplanation().size()).     assertTrue(queryExplSet.containsAll(parsedResponse.getQueryExplanation())). }
false;protected;4;5;;@Override protected ValidateQueryResponse createTestInstance(int totalShards, int successfulShards, int failedShards, List<DefaultShardOperationFailedException> failures) {     return createRandomValidateQueryResponse(totalShards, successfulShards, failedShards, failures). }
false;public;0;6;;@Override public void testToXContent() {     ValidateQueryResponse response = createTestInstance(10, 10, 0, new ArrayList<>()).     String output = Strings.toString(response).     assertEquals("{\"_shards\":{\"total\":10,\"successful\":10,\"failed\":0},\"valid\":true}", output). }
