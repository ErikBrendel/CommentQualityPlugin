commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void onResponse(IndexResponse response) {     latch.countDown(). }
false;public;1;5;;@Override public void onFailure(Exception e) {     throwable.add(e).     latch.countDown(). }
true;public;0;43;// see #3544 ;// see #3544 public void testConcurrentDynamicMapping() throws Exception {     final String fieldName = "field".     final String mapping = "{ \"" + mappingType + "\": {" + "\"dynamic_templates\": [" + "{ \"" + fieldName + "\": {" + "\"path_match\": \"*\"," + "\"mapping\": {" + "\"type\": \"text\"," + "\"store\": true," + "\"analyzer\": \"whitespace\" } } } ] } }".     // The 'fieldNames' array is used to help with retrieval of index terms     // after testing     int iters = scaledRandomIntBetween(5, 15).     for (int i = 0. i < iters. i++) {         cluster().wipeIndices("test").         assertAcked(prepareCreate("test").addMapping(mappingType, mapping, XContentType.JSON)).         int numDocs = scaledRandomIntBetween(10, 100).         final CountDownLatch latch = new CountDownLatch(numDocs).         final List<Throwable> throwable = new CopyOnWriteArrayList<>().         int currentID = 0.         for (int j = 0. j < numDocs. j++) {             Map<String, Object> source = new HashMap<>().             source.put(fieldName, "test-user").             client().prepareIndex("test", mappingType, Integer.toString(currentID++)).setSource(source).execute(new ActionListener<IndexResponse>() {                  @Override                 public void onResponse(IndexResponse response) {                     latch.countDown().                 }                  @Override                 public void onFailure(Exception e) {                     throwable.add(e).                     latch.countDown().                 }             }).         }         latch.await().         assertThat(throwable, emptyIterable()).         refresh().         assertHitCount(client().prepareSearch("test").setQuery(QueryBuilders.matchQuery(fieldName, "test-user")).get(), numDocs).         assertHitCount(client().prepareSearch("test").setQuery(QueryBuilders.matchQuery(fieldName, "test user")).get(), 0).     } }
