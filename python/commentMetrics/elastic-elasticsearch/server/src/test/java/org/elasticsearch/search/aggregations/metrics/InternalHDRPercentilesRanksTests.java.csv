commented;modifiers;parameterAmount;loc;comment;code
false;protected;7;9;;@Override protected InternalHDRPercentileRanks createTestInstance(String name, List<PipelineAggregator> aggregators, Map<String, Object> metadata, boolean keyed, DocValueFormat format, double[] percents, double[] values) {     final DoubleHistogram state = new DoubleHistogram(3).     Arrays.stream(values).forEach(state::recordValue).     return new InternalHDRPercentileRanks(name, percents, state, keyed, format, aggregators, metadata). }
false;protected;2;9;;@Override protected void assertReduced(InternalHDRPercentileRanks reduced, List<InternalHDRPercentileRanks> inputs) {     // it is hard to check the values due to the inaccuracy of the algorithm     long totalCount = 0.     for (InternalHDRPercentileRanks ranks : inputs) {         totalCount += ranks.state.getTotalCount().     }     assertEquals(totalCount, reduced.state.getTotalCount()). }
false;protected;0;4;;@Override protected Reader<InternalHDRPercentileRanks> instanceReader() {     return InternalHDRPercentileRanks::new. }
false;protected;0;4;;@Override protected Class<? extends ParsedPercentiles> implementationClass() {     return ParsedHDRPercentileRanks.class. }
false;protected;1;40;;@Override protected InternalHDRPercentileRanks mutateInstance(InternalHDRPercentileRanks instance) {     String name = instance.getName().     double[] percents = instance.keys.     DoubleHistogram state = instance.state.     boolean keyed = instance.keyed.     DocValueFormat formatter = instance.formatter().     List<PipelineAggregator> pipelineAggregators = instance.pipelineAggregators().     Map<String, Object> metaData = instance.getMetaData().     switch(between(0, 4)) {         case 0:             name += randomAlphaOfLength(5).             break.         case 1:             percents = Arrays.copyOf(percents, percents.length + 1).             percents[percents.length - 1] = randomDouble() * 100.             Arrays.sort(percents).             break.         case 2:             state = new DoubleHistogram(state).             for (int i = 0. i < between(10, 100). i++) {                 state.recordValue(randomDouble()).             }             break.         case 3:             keyed = keyed == false.             break.         case 4:             if (metaData == null) {                 metaData = new HashMap<>(1).             } else {                 metaData = new HashMap<>(instance.getMetaData()).             }             metaData.put(randomAlphaOfLength(15), randomInt()).             break.         default:             throw new AssertionError("Illegal randomisation branch").     }     return new InternalHDRPercentileRanks(name, percents, state, keyed, formatter, pipelineAggregators, metaData). }
