commented;modifiers;parameterAmount;loc;comment;code
false;public;0;23;;public void testReasonOrdinalOrder() {     UnassignedInfo.Reason[] order = new UnassignedInfo.Reason[] { UnassignedInfo.Reason.INDEX_CREATED, UnassignedInfo.Reason.CLUSTER_RECOVERED, UnassignedInfo.Reason.INDEX_REOPENED, UnassignedInfo.Reason.DANGLING_INDEX_IMPORTED, UnassignedInfo.Reason.NEW_INDEX_RESTORED, UnassignedInfo.Reason.EXISTING_INDEX_RESTORED, UnassignedInfo.Reason.REPLICA_ADDED, UnassignedInfo.Reason.ALLOCATION_FAILED, UnassignedInfo.Reason.NODE_LEFT, UnassignedInfo.Reason.REROUTE_CANCELLED, UnassignedInfo.Reason.REINITIALIZED, UnassignedInfo.Reason.REALLOCATED_REPLICA, UnassignedInfo.Reason.PRIMARY_FAILED, UnassignedInfo.Reason.FORCED_EMPTY_PRIMARY, UnassignedInfo.Reason.MANUAL_ALLOCATION, UnassignedInfo.Reason.INDEX_CLOSED }.     for (int i = 0. i < order.length. i++) {         assertThat(order[i].ordinal(), equalTo(i)).     }     assertThat(UnassignedInfo.Reason.values().length, equalTo(order.length)). }
false;public;0;17;;public void testSerialization() throws Exception {     UnassignedInfo.Reason reason = RandomPicks.randomFrom(random(), UnassignedInfo.Reason.values()).     UnassignedInfo meta = reason == UnassignedInfo.Reason.ALLOCATION_FAILED ? new UnassignedInfo(reason, randomBoolean() ? randomAlphaOfLength(4) : null, null, randomIntBetween(1, 100), System.nanoTime(), System.currentTimeMillis(), false, AllocationStatus.NO_ATTEMPT) : new UnassignedInfo(reason, randomBoolean() ? randomAlphaOfLength(4) : null).     BytesStreamOutput out = new BytesStreamOutput().     meta.writeTo(out).     out.close().     UnassignedInfo read = new UnassignedInfo(out.bytes().streamInput()).     assertThat(read.getReason(), equalTo(meta.getReason())).     assertThat(read.getUnassignedTimeInMillis(), equalTo(meta.getUnassignedTimeInMillis())).     assertThat(read.getMessage(), equalTo(meta.getMessage())).     assertThat(read.getDetails(), equalTo(meta.getDetails())).     assertThat(read.getNumFailedAllocations(), equalTo(meta.getNumFailedAllocations())). }
false;public;0;14;;public void testBwcSerialization() throws Exception {     final UnassignedInfo unassignedInfo = new UnassignedInfo(UnassignedInfo.Reason.INDEX_CLOSED, "message").     BytesStreamOutput out = new BytesStreamOutput().     out.setVersion(VersionUtils.randomVersionBetween(random(), Version.V_6_0_0, VersionUtils.getPreviousVersion(Version.V_7_0_0))).     unassignedInfo.writeTo(out).     out.close().     UnassignedInfo read = new UnassignedInfo(out.bytes().streamInput()).     assertThat(read.getReason(), equalTo(UnassignedInfo.Reason.REINITIALIZED)).     assertThat(read.getUnassignedTimeInMillis(), equalTo(unassignedInfo.getUnassignedTimeInMillis())).     assertThat(read.getMessage(), equalTo(unassignedInfo.getMessage())).     assertThat(read.getDetails(), equalTo(unassignedInfo.getDetails())).     assertThat(read.getNumFailedAllocations(), equalTo(unassignedInfo.getNumFailedAllocations())). }
false;public;0;12;;public void testIndexCreated() {     MetaData metaData = MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(randomIntBetween(1, 3)).numberOfReplicas(randomIntBetween(0, 3))).build().     ClusterState clusterState = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(RoutingTable.builder().addAsNew(metaData.index("test")).build()).build().     for (ShardRouting shard : clusterState.getRoutingNodes().shardsWithState(UNASSIGNED)) {         assertThat(shard.unassignedInfo().getReason(), equalTo(UnassignedInfo.Reason.INDEX_CREATED)).     } }
false;public;0;12;;public void testClusterRecovered() {     MetaData metaData = MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(randomIntBetween(1, 3)).numberOfReplicas(randomIntBetween(0, 3))).build().     ClusterState clusterState = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(RoutingTable.builder().addAsRecovery(metaData.index("test")).build()).build().     for (ShardRouting shard : clusterState.getRoutingNodes().shardsWithState(UNASSIGNED)) {         assertThat(shard.unassignedInfo().getReason(), equalTo(UnassignedInfo.Reason.CLUSTER_RECOVERED)).     } }
false;public;0;12;;public void testIndexReopened() {     MetaData metaData = MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(randomIntBetween(1, 3)).numberOfReplicas(randomIntBetween(0, 3))).build().     ClusterState clusterState = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(RoutingTable.builder().addAsFromCloseToOpen(metaData.index("test")).build()).build().     for (ShardRouting shard : clusterState.getRoutingNodes().shardsWithState(UNASSIGNED)) {         assertThat(shard.unassignedInfo().getReason(), equalTo(UnassignedInfo.Reason.INDEX_REOPENED)).     } }
false;public;0;15;;public void testNewIndexRestored() {     MetaData metaData = MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(randomIntBetween(1, 3)).numberOfReplicas(randomIntBetween(0, 3))).build().     ClusterState clusterState = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(RoutingTable.builder().addAsNewRestore(metaData.index("test"), new SnapshotRecoverySource(UUIDs.randomBase64UUID(), new Snapshot("rep1", new SnapshotId("snp1", UUIDs.randomBase64UUID())), Version.CURRENT, "test"), new IntHashSet()).build()).build().     for (ShardRouting shard : clusterState.getRoutingNodes().shardsWithState(UNASSIGNED)) {         assertThat(shard.unassignedInfo().getReason(), equalTo(UnassignedInfo.Reason.NEW_INDEX_RESTORED)).     } }
false;public;0;15;;public void testExistingIndexRestored() {     MetaData metaData = MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(randomIntBetween(1, 3)).numberOfReplicas(randomIntBetween(0, 3))).build().     ClusterState clusterState = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(RoutingTable.builder().addAsRestore(metaData.index("test"), new SnapshotRecoverySource(UUIDs.randomBase64UUID(), new Snapshot("rep1", new SnapshotId("snp1", UUIDs.randomBase64UUID())), Version.CURRENT, "test")).build()).build().     for (ShardRouting shard : clusterState.getRoutingNodes().shardsWithState(UNASSIGNED)) {         assertThat(shard.unassignedInfo().getReason(), equalTo(UnassignedInfo.Reason.EXISTING_INDEX_RESTORED)).     } }
false;public;0;12;;public void testDanglingIndexImported() {     MetaData metaData = MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(randomIntBetween(1, 3)).numberOfReplicas(randomIntBetween(0, 3))).build().     ClusterState clusterState = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(RoutingTable.builder().addAsFromDangling(metaData.index("test")).build()).build().     for (ShardRouting shard : clusterState.getRoutingNodes().shardsWithState(UNASSIGNED)) {         assertThat(shard.unassignedInfo().getReason(), equalTo(UnassignedInfo.Reason.DANGLING_INDEX_IMPORTED)).     } }
false;public;0;25;;public void testReplicaAdded() {     AllocationService allocation = createAllocationService().     MetaData metaData = MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(0)).build().     final Index index = metaData.index("test").getIndex().     ClusterState clusterState = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(RoutingTable.builder().addAsNew(metaData.index(index)).build()).build().     clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode("node1"))).build().     clusterState = allocation.reroute(clusterState, "reroute").     // starting primaries     clusterState = allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING)).     IndexRoutingTable.Builder builder = IndexRoutingTable.builder(index).     for (IndexShardRoutingTable indexShardRoutingTable : clusterState.routingTable().index(index)) {         builder.addIndexShard(indexShardRoutingTable).     }     builder.addReplica().     clusterState = ClusterState.builder(clusterState).routingTable(RoutingTable.builder(clusterState.routingTable()).add(builder).build()).build().     assertThat(clusterState.getRoutingNodes().shardsWithState(UNASSIGNED).size(), equalTo(1)).     assertThat(clusterState.getRoutingNodes().shardsWithState(UNASSIGNED).get(0).unassignedInfo(), notNullValue()).     assertThat(clusterState.getRoutingNodes().shardsWithState(UNASSIGNED).get(0).unassignedInfo().getReason(), equalTo(UnassignedInfo.Reason.REPLICA_ADDED)). }
true;public;0;11;/**  * The unassigned meta is kept when a shard goes to INITIALIZING, but cleared when it moves to STARTED.  */ ;/**  * The unassigned meta is kept when a shard goes to INITIALIZING, but cleared when it moves to STARTED.  */ public void testStateTransitionMetaHandling() {     ShardRouting shard = TestShardRouting.newShardRouting("test", 1, null, null, true, ShardRoutingState.UNASSIGNED, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null)).     assertThat(shard.unassignedInfo(), notNullValue()).     shard = shard.initialize("test_node", null, -1).     assertThat(shard.state(), equalTo(ShardRoutingState.INITIALIZING)).     assertThat(shard.unassignedInfo(), notNullValue()).     shard = shard.moveToStarted().     assertThat(shard.state(), equalTo(ShardRoutingState.STARTED)).     assertThat(shard.unassignedInfo(), nullValue()). }
true;public;0;28;/**  * Tests that during reroute when a node is detected as leaving the cluster, the right unassigned meta is set  */ ;/**  * Tests that during reroute when a node is detected as leaving the cluster, the right unassigned meta is set  */ public void testNodeLeave() {     AllocationService allocation = createAllocationService().     MetaData metaData = MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1)).build().     ClusterState clusterState = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(RoutingTable.builder().addAsNew(metaData.index("test")).build()).build().     clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode("node1")).add(newNode("node2"))).build().     clusterState = allocation.reroute(clusterState, "reroute").     // starting primaries     clusterState = allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING)).     // starting replicas     clusterState = allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING)).     assertThat(clusterState.getRoutingNodes().unassigned().size() > 0, equalTo(false)).     // remove node2 and reroute     clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).remove("node2")).build().     clusterState = allocation.disassociateDeadNodes(clusterState, true, "reroute").     // verify that NODE_LEAVE is the reason for meta     assertThat(clusterState.getRoutingNodes().unassigned().size() > 0, equalTo(true)).     assertThat(clusterState.getRoutingNodes().shardsWithState(UNASSIGNED).size(), equalTo(1)).     assertThat(clusterState.getRoutingNodes().shardsWithState(UNASSIGNED).get(0).unassignedInfo(), notNullValue()).     assertThat(clusterState.getRoutingNodes().shardsWithState(UNASSIGNED).get(0).unassignedInfo().getReason(), equalTo(UnassignedInfo.Reason.NODE_LEFT)).     assertThat(clusterState.getRoutingNodes().shardsWithState(UNASSIGNED).get(0).unassignedInfo().getUnassignedTimeInMillis(), greaterThan(0L)). }
true;public;0;33;/**  * Verifies that when a shard fails, reason is properly set and details are preserved.  */ ;/**  * Verifies that when a shard fails, reason is properly set and details are preserved.  */ public void testFailedShard() {     AllocationService allocation = createAllocationService().     MetaData metaData = MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1)).build().     ClusterState clusterState = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(RoutingTable.builder().addAsNew(metaData.index("test")).build()).build().     clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode("node1")).add(newNode("node2"))).build().     clusterState = allocation.reroute(clusterState, "reroute").     // starting primaries     clusterState = allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING)).     // starting replicas     clusterState = allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING)).     assertThat(clusterState.getRoutingNodes().unassigned().size() > 0, equalTo(false)).     // fail shard     ShardRouting shardToFail = clusterState.getRoutingNodes().shardsWithState(STARTED).get(0).     clusterState = allocation.applyFailedShards(clusterState, Collections.singletonList(new FailedShard(shardToFail, "test fail", null, randomBoolean()))).     // verify the reason and details     assertThat(clusterState.getRoutingNodes().unassigned().size() > 0, equalTo(true)).     assertThat(clusterState.getRoutingNodes().shardsWithState(UNASSIGNED).size(), equalTo(1)).     assertThat(clusterState.getRoutingNodes().shardsWithState(UNASSIGNED).get(0).unassignedInfo(), notNullValue()).     assertThat(clusterState.getRoutingNodes().shardsWithState(UNASSIGNED).get(0).unassignedInfo().getReason(), equalTo(UnassignedInfo.Reason.ALLOCATION_FAILED)).     assertThat(clusterState.getRoutingNodes().shardsWithState(UNASSIGNED).get(0).unassignedInfo().getMessage(), equalTo("failed shard on node [" + shardToFail.currentNodeId() + "]: test fail")).     assertThat(clusterState.getRoutingNodes().shardsWithState(UNASSIGNED).get(0).unassignedInfo().getDetails(), equalTo("failed shard on node [" + shardToFail.currentNodeId() + "]: test fail")).     assertThat(clusterState.getRoutingNodes().shardsWithState(UNASSIGNED).get(0).unassignedInfo().getUnassignedTimeInMillis(), greaterThan(0L)). }
true;public;0;17;/**  * Verifies that delayed allocation calculation are correct.  */ ;/**  * Verifies that delayed allocation calculation are correct.  */ public void testRemainingDelayCalculation() throws Exception {     final long baseTime = System.nanoTime().     UnassignedInfo unassignedInfo = new UnassignedInfo(UnassignedInfo.Reason.NODE_LEFT, "test", null, 0, baseTime, System.currentTimeMillis(), randomBoolean(), AllocationStatus.NO_ATTEMPT).     final long totalDelayNanos = TimeValue.timeValueMillis(10).nanos().     final Settings indexSettings = Settings.builder().put(UnassignedInfo.INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING.getKey(), TimeValue.timeValueNanos(totalDelayNanos)).build().     long delay = unassignedInfo.getRemainingDelay(baseTime, indexSettings).     assertThat(delay, equalTo(totalDelayNanos)).     long delta1 = randomIntBetween(1, (int) (totalDelayNanos - 1)).     delay = unassignedInfo.getRemainingDelay(baseTime + delta1, indexSettings).     assertThat(delay, equalTo(totalDelayNanos - delta1)).     delay = unassignedInfo.getRemainingDelay(baseTime + totalDelayNanos, indexSettings).     assertThat(delay, equalTo(0L)).     delay = unassignedInfo.getRemainingDelay(baseTime + totalDelayNanos + randomIntBetween(1, 20), indexSettings).     assertThat(delay, equalTo(0L)). }
false;public;0;24;;public void testNumberOfDelayedUnassigned() throws Exception {     MockAllocationService allocation = createAllocationService(Settings.EMPTY, new DelayedShardsMockGatewayAllocator()).     MetaData metaData = MetaData.builder().put(IndexMetaData.builder("test1").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1)).put(IndexMetaData.builder("test2").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1)).build().     ClusterState clusterState = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(RoutingTable.builder().addAsNew(metaData.index("test1")).addAsNew(metaData.index("test2")).build()).build().     clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode("node1")).add(newNode("node2"))).build().     clusterState = allocation.reroute(clusterState, "reroute").     assertThat(UnassignedInfo.getNumberOfDelayedUnassigned(clusterState), equalTo(0)).     // starting primaries     clusterState = allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING)).     // starting replicas     clusterState = allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING)).     assertThat(clusterState.getRoutingNodes().unassigned().size() > 0, equalTo(false)).     // remove node2 and reroute     clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).remove("node2")).build().     // make sure both replicas are marked as delayed (i.e. not reallocated)     clusterState = allocation.disassociateDeadNodes(clusterState, true, "reroute").     assertThat(clusterState.toString(), UnassignedInfo.getNumberOfDelayedUnassigned(clusterState), equalTo(2)). }
false;public;0;40;;public void testFindNextDelayedAllocation() {     MockAllocationService allocation = createAllocationService(Settings.EMPTY, new DelayedShardsMockGatewayAllocator()).     final TimeValue delayTest1 = TimeValue.timeValueMillis(randomIntBetween(1, 200)).     final TimeValue delayTest2 = TimeValue.timeValueMillis(randomIntBetween(1, 200)).     final long expectMinDelaySettingsNanos = Math.min(delayTest1.nanos(), delayTest2.nanos()).     MetaData metaData = MetaData.builder().put(IndexMetaData.builder("test1").settings(settings(Version.CURRENT).put(UnassignedInfo.INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING.getKey(), delayTest1)).numberOfShards(1).numberOfReplicas(1)).put(IndexMetaData.builder("test2").settings(settings(Version.CURRENT).put(UnassignedInfo.INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING.getKey(), delayTest2)).numberOfShards(1).numberOfReplicas(1)).build().     ClusterState clusterState = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(RoutingTable.builder().addAsNew(metaData.index("test1")).addAsNew(metaData.index("test2")).build()).build().     clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode("node1")).add(newNode("node2"))).build().     clusterState = allocation.reroute(clusterState, "reroute").     assertThat(UnassignedInfo.getNumberOfDelayedUnassigned(clusterState), equalTo(0)).     // starting primaries     clusterState = allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING)).     // starting replicas     clusterState = allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING)).     assertThat(clusterState.getRoutingNodes().unassigned().size() > 0, equalTo(false)).     // remove node2 and reroute     final long baseTime = System.nanoTime().     allocation.setNanoTimeOverride(baseTime).     clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).remove("node2")).build().     clusterState = allocation.disassociateDeadNodes(clusterState, true, "reroute").     final long delta = randomBoolean() ? 0 : randomInt((int) expectMinDelaySettingsNanos - 1).     if (delta > 0) {         allocation.setNanoTimeOverride(baseTime + delta).         clusterState = allocation.reroute(clusterState, "time moved").     }     assertThat(UnassignedInfo.findNextDelayedAllocation(baseTime + delta, clusterState), equalTo(expectMinDelaySettingsNanos - delta)). }
false;public;0;9;;public void testAllocationStatusSerialization() throws IOException {     for (AllocationStatus allocationStatus : AllocationStatus.values()) {         BytesStreamOutput out = new BytesStreamOutput().         allocationStatus.writeTo(out).         ByteBufferStreamInput in = new ByteBufferStreamInput(ByteBuffer.wrap(out.bytes().toBytesRef().bytes)).         AllocationStatus readStatus = AllocationStatus.readFrom(in).         assertThat(readStatus, equalTo(allocationStatus)).     } }
