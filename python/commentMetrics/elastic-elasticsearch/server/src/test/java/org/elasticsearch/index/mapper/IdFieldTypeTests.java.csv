commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected MappedFieldType createDefaultFieldType() {     return new IdFieldMapper.IdFieldType(). }
false;public;0;7;;public void testRangeQuery() {     MappedFieldType ft = createDefaultFieldType().     ft.setName("_id").     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> ft.rangeQuery(null, null, randomBoolean(), randomBoolean(), null, null, null, null)).     assertEquals("Field [_id] of type [_id] does not support range queries", e.getMessage()). }
false;public;0;27;;public void testTermsQuery() throws Exception {     QueryShardContext context = Mockito.mock(QueryShardContext.class).     Settings indexSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0).put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1).put(IndexMetaData.SETTING_INDEX_UUID, UUIDs.randomBase64UUID()).build().     IndexMetaData indexMetaData = IndexMetaData.builder(IndexMetaData.INDEX_UUID_NA_VALUE).settings(indexSettings).build().     IndexSettings mockSettings = new IndexSettings(indexMetaData, Settings.EMPTY).     Mockito.when(context.getIndexSettings()).thenReturn(mockSettings).     Mockito.when(context.indexVersionCreated()).thenReturn(indexSettings.getAsVersion(IndexMetaData.SETTING_VERSION_CREATED, null)).     MapperService mapperService = Mockito.mock(MapperService.class).     Collection<String> types = Collections.emptySet().     Mockito.when(context.queryTypes()).thenReturn(types).     Mockito.when(context.getMapperService()).thenReturn(mapperService).     MappedFieldType ft = IdFieldMapper.defaultFieldType(mockSettings).     ft.setName(IdFieldMapper.NAME).     Query query = ft.termQuery("id", context).     assertEquals(new TermInSetQuery("_id", Uid.encodeId("id")), query).     types = Collections.singleton("type").     Mockito.when(context.queryTypes()).thenReturn(types).     query = ft.termQuery("id", context).     assertEquals(new TermInSetQuery("_id", Uid.encodeId("id")), query). }
