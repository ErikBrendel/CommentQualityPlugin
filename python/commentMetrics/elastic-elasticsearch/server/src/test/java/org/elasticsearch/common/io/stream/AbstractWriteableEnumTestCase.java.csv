commented;modifiers;parameterAmount;loc;comment;code
true;public,abstract;0;1;/**  * Test that the ordinals for the enum are consistent (i.e. the order hasn't changed)  * because writing an enum to a stream often uses the ordinal value.  */ ;/**  * Test that the ordinals for the enum are consistent (i.e. the order hasn't changed)  * because writing an enum to a stream often uses the ordinal value.  */ public abstract void testValidOrdinals().
true;public,abstract;0;1;/**  * Test that the conversion from a string to enum is correct.  */ ;/**  * Test that the conversion from a string to enum is correct.  */ public abstract void testFromString().
true;public,abstract;0;1;/**  * Test that the correct enum value is produced from the serialized value in the {@link StreamInput}.  */ ;/**  * Test that the correct enum value is produced from the serialized value in the {@link StreamInput}.  */ public abstract void testReadFrom() throws IOException.
true;public,abstract;0;1;/**  * Test that the correct serialized value is produced from the {@link StreamOutput}.  */ ;/**  * Test that the correct serialized value is produced from the {@link StreamOutput}.  */ public abstract void testWriteTo() throws IOException.
true;protected,static;2;8;// a convenience method for testing the write of a writeable enum ;// a convenience method for testing the write of a writeable enum protected static void assertWriteToStream(final Writeable writeableEnum, final int ordinal) throws IOException {     try (BytesStreamOutput out = new BytesStreamOutput()) {         writeableEnum.writeTo(out).         try (StreamInput in = out.bytes().streamInput()) {             assertThat(in.readVInt(), equalTo(ordinal)).         }     } }
true;protected;2;8;// a convenience method for testing the read of a writeable enum ;// a convenience method for testing the read of a writeable enum protected void assertReadFromStream(final int ordinal, final Writeable expected) throws IOException {     try (BytesStreamOutput out = new BytesStreamOutput()) {         out.writeVInt(ordinal).         try (StreamInput in = out.bytes().streamInput()) {             assertThat(reader.read(in), equalTo(expected)).         }     } }
