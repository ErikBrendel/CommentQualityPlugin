# id;timestamp;commentText;codeText;commentWords;codeWords
DateRangeIT -> public void testDontCacheScripts() throws Exception;1524684173;Make sure that a request using a script does not get cached and a request_not using a script does get cached.;public void testDontCacheScripts() throws Exception {_        assertAcked(prepareCreate("cache_test_idx").addMapping("type", "date", "type=date")_                .setSettings(Settings.builder().put("requests.cache.enable", true).put("number_of_shards", 1).put("number_of_replicas", 1))_                .get())__        indexRandom(true,_                client().prepareIndex("cache_test_idx", "type", "1")_                        .setSource(jsonBuilder().startObject().timeField("date", date(1, 1)).endObject()),_                client().prepareIndex("cache_test_idx", "type", "2")_                        .setSource(jsonBuilder().startObject().timeField("date", date(2, 1)).endObject()))___        _        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "date")__        SearchResponse r = client().prepareSearch("cache_test_idx").setSize(0).addAggregation(dateRange("foo").field("date")_                .script(new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.DOUBLE_PLUS_ONE_MONTH, params))_                .addRange(new DateTime(2012, 1, 1, 0, 0, 0, 0, DateTimeZone.UTC), new DateTime(2013, 1, 1, 0, 0, 0, 0, DateTimeZone.UTC)))_                .get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        _        r = client().prepareSearch("cache_test_idx").setSize(0).addAggregation(dateRange("foo").field("date")_                .addRange(new DateTime(2012, 1, 1, 0, 0, 0, 0, DateTimeZone.UTC), new DateTime(2013, 1, 1, 0, 0, 0, 0, DateTimeZone.UTC)))_                .get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(1L))__    };make,sure,that,a,request,using,a,script,does,not,get,cached,and,a,request,not,using,a,script,does,get,cached;public,void,test,dont,cache,scripts,throws,exception,assert,acked,prepare,create,add,mapping,type,date,type,date,set,settings,settings,builder,put,requests,cache,enable,true,put,1,put,1,get,index,random,true,client,prepare,index,type,1,set,source,json,builder,start,object,time,field,date,date,1,1,end,object,client,prepare,index,type,2,set,source,json,builder,start,object,time,field,date,date,2,1,end,object,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,map,string,object,params,new,hash,map,params,put,fieldname,date,search,response,r,client,prepare,search,set,size,0,add,aggregation,date,range,foo,field,date,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,add,range,new,date,time,2012,1,1,0,0,0,0,date,time,zone,utc,new,date,time,2013,1,1,0,0,0,0,date,time,zone,utc,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,r,client,prepare,search,set,size,0,add,aggregation,date,range,foo,field,date,add,range,new,date,time,2012,1,1,0,0,0,0,date,time,zone,utc,new,date,time,2013,1,1,0,0,0,0,date,time,zone,utc,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,1l
DateRangeIT -> public void testDontCacheScripts() throws Exception;1536314350;Make sure that a request using a script does not get cached and a request_not using a script does get cached.;public void testDontCacheScripts() throws Exception {_        assertAcked(prepareCreate("cache_test_idx").addMapping("type", "date", "type=date")_                .setSettings(Settings.builder().put("requests.cache.enable", true).put("number_of_shards", 1).put("number_of_replicas", 1))_                .get())__        indexRandom(true,_                client().prepareIndex("cache_test_idx", "type", "1")_                        .setSource(jsonBuilder().startObject().timeField("date", date(1, 1)).endObject()),_                client().prepareIndex("cache_test_idx", "type", "2")_                        .setSource(jsonBuilder().startObject().timeField("date", date(2, 1)).endObject()))___        _        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "date")__        SearchResponse r = client().prepareSearch("cache_test_idx").setSize(0).addAggregation(dateRange("foo").field("date")_                .script(new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.DOUBLE_PLUS_ONE_MONTH, params))_                .addRange(new DateTime(2012, 1, 1, 0, 0, 0, 0, DateTimeZone.UTC), new DateTime(2013, 1, 1, 0, 0, 0, 0, DateTimeZone.UTC)))_                .get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        _        r = client().prepareSearch("cache_test_idx").setSize(0).addAggregation(dateRange("foo").field("date")_                .addRange(new DateTime(2012, 1, 1, 0, 0, 0, 0, DateTimeZone.UTC), new DateTime(2013, 1, 1, 0, 0, 0, 0, DateTimeZone.UTC)))_                .get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(1L))__    };make,sure,that,a,request,using,a,script,does,not,get,cached,and,a,request,not,using,a,script,does,get,cached;public,void,test,dont,cache,scripts,throws,exception,assert,acked,prepare,create,add,mapping,type,date,type,date,set,settings,settings,builder,put,requests,cache,enable,true,put,1,put,1,get,index,random,true,client,prepare,index,type,1,set,source,json,builder,start,object,time,field,date,date,1,1,end,object,client,prepare,index,type,2,set,source,json,builder,start,object,time,field,date,date,2,1,end,object,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,map,string,object,params,new,hash,map,params,put,fieldname,date,search,response,r,client,prepare,search,set,size,0,add,aggregation,date,range,foo,field,date,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,add,range,new,date,time,2012,1,1,0,0,0,0,date,time,zone,utc,new,date,time,2013,1,1,0,0,0,0,date,time,zone,utc,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,r,client,prepare,search,set,size,0,add,aggregation,date,range,foo,field,date,add,range,new,date,time,2012,1,1,0,0,0,0,date,time,zone,utc,new,date,time,2013,1,1,0,0,0,0,date,time,zone,utc,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,1l
DateRangeIT -> public void testDontCacheScripts() throws Exception;1544035746;Make sure that a request using a script does not get cached and a request_not using a script does get cached.;public void testDontCacheScripts() throws Exception {_        assertAcked(prepareCreate("cache_test_idx").addMapping("type", "date", "type=date")_                .setSettings(Settings.builder().put("requests.cache.enable", true).put("number_of_shards", 1).put("number_of_replicas", 1))_                .get())__        indexRandom(true,_                client().prepareIndex("cache_test_idx", "type", "1")_                        .setSource(jsonBuilder().startObject().timeField("date", date(1, 1)).endObject()),_                client().prepareIndex("cache_test_idx", "type", "2")_                        .setSource(jsonBuilder().startObject().timeField("date", date(2, 1)).endObject()))___        _        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "date")__        SearchResponse r = client().prepareSearch("cache_test_idx").setSize(0).addAggregation(dateRange("foo").field("date")_                .script(new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.DOUBLE_PLUS_ONE_MONTH, params))_                .addRange(new DateTime(2012, 1, 1, 0, 0, 0, 0, DateTimeZone.UTC), new DateTime(2013, 1, 1, 0, 0, 0, 0, DateTimeZone.UTC)))_                .get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        _        r = client().prepareSearch("cache_test_idx").setSize(0).addAggregation(dateRange("foo").field("date")_                .addRange(new DateTime(2012, 1, 1, 0, 0, 0, 0, DateTimeZone.UTC), new DateTime(2013, 1, 1, 0, 0, 0, 0, DateTimeZone.UTC)))_                .get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(1L))__    };make,sure,that,a,request,using,a,script,does,not,get,cached,and,a,request,not,using,a,script,does,get,cached;public,void,test,dont,cache,scripts,throws,exception,assert,acked,prepare,create,add,mapping,type,date,type,date,set,settings,settings,builder,put,requests,cache,enable,true,put,1,put,1,get,index,random,true,client,prepare,index,type,1,set,source,json,builder,start,object,time,field,date,date,1,1,end,object,client,prepare,index,type,2,set,source,json,builder,start,object,time,field,date,date,2,1,end,object,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,map,string,object,params,new,hash,map,params,put,fieldname,date,search,response,r,client,prepare,search,set,size,0,add,aggregation,date,range,foo,field,date,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,add,range,new,date,time,2012,1,1,0,0,0,0,date,time,zone,utc,new,date,time,2013,1,1,0,0,0,0,date,time,zone,utc,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,r,client,prepare,search,set,size,0,add,aggregation,date,range,foo,field,date,add,range,new,date,time,2012,1,1,0,0,0,0,date,time,zone,utc,new,date,time,2013,1,1,0,0,0,0,date,time,zone,utc,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,1l
DateRangeIT -> public void testDontCacheScripts() throws Exception;1544110272;Make sure that a request using a script does not get cached and a request_not using a script does get cached.;public void testDontCacheScripts() throws Exception {_        assertAcked(prepareCreate("cache_test_idx").addMapping("type", "date", "type=date")_                .setSettings(Settings.builder().put("requests.cache.enable", true).put("number_of_shards", 1).put("number_of_replicas", 1))_                .get())__        indexRandom(true,_                client().prepareIndex("cache_test_idx", "type", "1")_                        .setSource(jsonBuilder().startObject().timeField("date", date(1, 1)).endObject()),_                client().prepareIndex("cache_test_idx", "type", "2")_                        .setSource(jsonBuilder().startObject().timeField("date", date(2, 1)).endObject()))___        _        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "date")__        SearchResponse r = client().prepareSearch("cache_test_idx").setSize(0).addAggregation(dateRange("foo").field("date")_                .script(new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.DOUBLE_PLUS_ONE_MONTH, params))_                .addRange(new DateTime(2012, 1, 1, 0, 0, 0, 0, DateTimeZone.UTC), new DateTime(2013, 1, 1, 0, 0, 0, 0, DateTimeZone.UTC)))_                .get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        _        r = client().prepareSearch("cache_test_idx").setSize(0).addAggregation(dateRange("foo").field("date")_                .addRange(new DateTime(2012, 1, 1, 0, 0, 0, 0, DateTimeZone.UTC), new DateTime(2013, 1, 1, 0, 0, 0, 0, DateTimeZone.UTC)))_                .get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(1L))__    };make,sure,that,a,request,using,a,script,does,not,get,cached,and,a,request,not,using,a,script,does,get,cached;public,void,test,dont,cache,scripts,throws,exception,assert,acked,prepare,create,add,mapping,type,date,type,date,set,settings,settings,builder,put,requests,cache,enable,true,put,1,put,1,get,index,random,true,client,prepare,index,type,1,set,source,json,builder,start,object,time,field,date,date,1,1,end,object,client,prepare,index,type,2,set,source,json,builder,start,object,time,field,date,date,2,1,end,object,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,map,string,object,params,new,hash,map,params,put,fieldname,date,search,response,r,client,prepare,search,set,size,0,add,aggregation,date,range,foo,field,date,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,add,range,new,date,time,2012,1,1,0,0,0,0,date,time,zone,utc,new,date,time,2013,1,1,0,0,0,0,date,time,zone,utc,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,r,client,prepare,search,set,size,0,add,aggregation,date,range,foo,field,date,add,range,new,date,time,2012,1,1,0,0,0,0,date,time,zone,utc,new,date,time,2013,1,1,0,0,0,0,date,time,zone,utc,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,1l
DateRangeIT -> public void testDontCacheScripts() throws Exception;1544600864;Make sure that a request using a script does not get cached and a request_not using a script does get cached.;public void testDontCacheScripts() throws Exception {_        assertAcked(prepareCreate("cache_test_idx").addMapping("type", "date", "type=date")_                .setSettings(Settings.builder().put("requests.cache.enable", true).put("number_of_shards", 1).put("number_of_replicas", 1))_                .get())__        indexRandom(true,_                client().prepareIndex("cache_test_idx", "type", "1")_                        .setSource(jsonBuilder().startObject().timeField("date", date(1, 1)).endObject()),_                client().prepareIndex("cache_test_idx", "type", "2")_                        .setSource(jsonBuilder().startObject().timeField("date", date(2, 1)).endObject()))___        _        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "date")__        SearchResponse r = client().prepareSearch("cache_test_idx").setSize(0).addAggregation(dateRange("foo").field("date")_                .script(new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.DOUBLE_PLUS_ONE_MONTH, params))_                .addRange(new DateTime(2012, 1, 1, 0, 0, 0, 0, DateTimeZone.UTC), new DateTime(2013, 1, 1, 0, 0, 0, 0, DateTimeZone.UTC)))_                .get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        _        r = client().prepareSearch("cache_test_idx").setSize(0).addAggregation(dateRange("foo").field("date")_                .addRange(new DateTime(2012, 1, 1, 0, 0, 0, 0, DateTimeZone.UTC), new DateTime(2013, 1, 1, 0, 0, 0, 0, DateTimeZone.UTC)))_                .get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(1L))__    };make,sure,that,a,request,using,a,script,does,not,get,cached,and,a,request,not,using,a,script,does,get,cached;public,void,test,dont,cache,scripts,throws,exception,assert,acked,prepare,create,add,mapping,type,date,type,date,set,settings,settings,builder,put,requests,cache,enable,true,put,1,put,1,get,index,random,true,client,prepare,index,type,1,set,source,json,builder,start,object,time,field,date,date,1,1,end,object,client,prepare,index,type,2,set,source,json,builder,start,object,time,field,date,date,2,1,end,object,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,map,string,object,params,new,hash,map,params,put,fieldname,date,search,response,r,client,prepare,search,set,size,0,add,aggregation,date,range,foo,field,date,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,add,range,new,date,time,2012,1,1,0,0,0,0,date,time,zone,utc,new,date,time,2013,1,1,0,0,0,0,date,time,zone,utc,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,r,client,prepare,search,set,size,0,add,aggregation,date,range,foo,field,date,add,range,new,date,time,2012,1,1,0,0,0,0,date,time,zone,utc,new,date,time,2013,1,1,0,0,0,0,date,time,zone,utc,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,1l
DateRangeIT -> public void testDontCacheScripts() throws Exception;1548236405;Make sure that a request using a script does not get cached and a request_not using a script does get cached.;public void testDontCacheScripts() throws Exception {_        assertAcked(prepareCreate("cache_test_idx").addMapping("type", "date", "type=date")_                .setSettings(Settings.builder().put("requests.cache.enable", true).put("number_of_shards", 1).put("number_of_replicas", 1))_                .get())__        indexRandom(true,_                client().prepareIndex("cache_test_idx", "type", "1")_                        .setSource(jsonBuilder().startObject().timeField("date", date(1, 1)).endObject()),_                client().prepareIndex("cache_test_idx", "type", "2")_                        .setSource(jsonBuilder().startObject().timeField("date", date(2, 1)).endObject()))___        _        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "date")__        SearchResponse r = client().prepareSearch("cache_test_idx").setSize(0).addAggregation(dateRange("foo").field("date")_                .script(new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.DOUBLE_PLUS_ONE_MONTH, params))_                .addRange(ZonedDateTime.of(2012, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC),_                    ZonedDateTime.of(2013, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)))_                .get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        _        r = client().prepareSearch("cache_test_idx").setSize(0).addAggregation(dateRange("foo").field("date")_                .addRange(ZonedDateTime.of(2012, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC),_                    ZonedDateTime.of(2013, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)))_                .get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(1L))__    };make,sure,that,a,request,using,a,script,does,not,get,cached,and,a,request,not,using,a,script,does,get,cached;public,void,test,dont,cache,scripts,throws,exception,assert,acked,prepare,create,add,mapping,type,date,type,date,set,settings,settings,builder,put,requests,cache,enable,true,put,1,put,1,get,index,random,true,client,prepare,index,type,1,set,source,json,builder,start,object,time,field,date,date,1,1,end,object,client,prepare,index,type,2,set,source,json,builder,start,object,time,field,date,date,2,1,end,object,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,map,string,object,params,new,hash,map,params,put,fieldname,date,search,response,r,client,prepare,search,set,size,0,add,aggregation,date,range,foo,field,date,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,add,range,zoned,date,time,of,2012,1,1,0,0,0,0,zone,offset,utc,zoned,date,time,of,2013,1,1,0,0,0,0,zone,offset,utc,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,r,client,prepare,search,set,size,0,add,aggregation,date,range,foo,field,date,add,range,zoned,date,time,of,2012,1,1,0,0,0,0,zone,offset,utc,zoned,date,time,of,2013,1,1,0,0,0,0,zone,offset,utc,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,1l
DateRangeIT -> public void testDontCacheScripts() throws Exception;1549008228;Make sure that a request using a script does not get cached and a request_not using a script does get cached.;public void testDontCacheScripts() throws Exception {_        assertAcked(prepareCreate("cache_test_idx").addMapping("type", "date", "type=date")_                .setSettings(Settings.builder().put("requests.cache.enable", true).put("number_of_shards", 1).put("number_of_replicas", 1))_                .get())__        indexRandom(true,_                client().prepareIndex("cache_test_idx", "type", "1")_                        .setSource(jsonBuilder().startObject().timeField("date", date(1, 1)).endObject()),_                client().prepareIndex("cache_test_idx", "type", "2")_                        .setSource(jsonBuilder().startObject().timeField("date", date(2, 1)).endObject()))___        _        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "date")__        SearchResponse r = client().prepareSearch("cache_test_idx").setSize(0).addAggregation(dateRange("foo").field("date")_                .script(new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.DOUBLE_PLUS_ONE_MONTH, params))_                .addRange(ZonedDateTime.of(2012, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC),_                    ZonedDateTime.of(2013, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)))_                .get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        _        r = client().prepareSearch("cache_test_idx").setSize(0).addAggregation(dateRange("foo").field("date")_                .addRange(ZonedDateTime.of(2012, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC),_                    ZonedDateTime.of(2013, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)))_                .get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(1L))__    };make,sure,that,a,request,using,a,script,does,not,get,cached,and,a,request,not,using,a,script,does,get,cached;public,void,test,dont,cache,scripts,throws,exception,assert,acked,prepare,create,add,mapping,type,date,type,date,set,settings,settings,builder,put,requests,cache,enable,true,put,1,put,1,get,index,random,true,client,prepare,index,type,1,set,source,json,builder,start,object,time,field,date,date,1,1,end,object,client,prepare,index,type,2,set,source,json,builder,start,object,time,field,date,date,2,1,end,object,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,map,string,object,params,new,hash,map,params,put,fieldname,date,search,response,r,client,prepare,search,set,size,0,add,aggregation,date,range,foo,field,date,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,add,range,zoned,date,time,of,2012,1,1,0,0,0,0,zone,offset,utc,zoned,date,time,of,2013,1,1,0,0,0,0,zone,offset,utc,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,r,client,prepare,search,set,size,0,add,aggregation,date,range,foo,field,date,add,range,zoned,date,time,of,2012,1,1,0,0,0,0,zone,offset,utc,zoned,date,time,of,2013,1,1,0,0,0,0,zone,offset,utc,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,1l
DateRangeIT -> public void testRangeWithFormatNumericValue() throws Exception;1524684173;Test querying ranges on date mapping specifying a format with to/from_values specified as numeric value;public void testRangeWithFormatNumericValue() throws Exception {_        String indexName = "dateformat_numeric_test_idx"__        assertAcked(prepareCreate(indexName).addMapping("type", "date", "type=date,format=epoch_second"))__        indexRandom(true,_                client().prepareIndex(indexName, "type", "1").setSource(jsonBuilder().startObject().field("date", 1000).endObject()),_                client().prepareIndex(indexName, "type", "2").setSource(jsonBuilder().startObject().field("date", 2000).endObject()),_                client().prepareIndex(indexName, "type", "3").setSource(jsonBuilder().startObject().field("date", 3000).endObject()))___        _        _        SearchResponse searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(dateRange("date_range").field("date").addRange(1000, 3000).addRange(3000, 4000)).get()__        assertThat(searchResponse.getHits().getTotalHits(), equalTo(3L))__        List<Bucket> buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "1000-3000", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "3000-4000", 3000000L, 4000000L)___        _        searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(dateRange("date_range").field("date").addRange("1000", "3000").addRange("3000", "4000")).get()__        assertThat(searchResponse.getHits().getTotalHits(), equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "1000-3000", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "3000-4000", 3000000L, 4000000L)___        _        searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(dateRange("date_range").field("date").addRange(1.0e3, 3000.8123).addRange(3000.8123, 4.0e3)).get()__        assertThat(searchResponse.getHits().getTotalHits(), equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "1000-3000", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "3000-4000", 3000000L, 4000000L)___        _        searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(dateRange("date_range").field("date").addRange("1.0e3", "3.0e3").addRange("3.0e3", "4.0e3")).get()__        assertThat(searchResponse.getHits().getTotalHits(), equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "1000-3000", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "3000-4000", 3000000L, 4000000L)___        searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(dateRange("date_range").field("date").addRange("1000.123", "3000.8").addRange("3000.8", "4000.3")).get()__        assertThat(searchResponse.getHits().getTotalHits(), equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "1000-3000", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "3000-4000", 3000000L, 4000000L)___        _        _        searchResponse = client().prepareSearch(indexName).setSize(0).addAggregation(_                dateRange("date_range").field("date").addRange("00.16.40", "00.50.00").addRange("00.50.00", "01.06.40").format("HH.mm.ss"))_                .get()__        assertThat(searchResponse.getHits().getTotalHits(), equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "00.16.40-00.50.00", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "00.50.00-01.06.40", 3000000L, 4000000L)___        _        _        searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(_                        dateRange("date_range").field("date").addRange(1000000, 3000000).addRange(3000000, 4000000).format("epoch_millis"))_                .get()__        assertThat(searchResponse.getHits().getTotalHits(), equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "1000000-3000000", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "3000000-4000000", 3000000L, 4000000L)__    };test,querying,ranges,on,date,mapping,specifying,a,format,with,to,from,values,specified,as,numeric,value;public,void,test,range,with,format,numeric,value,throws,exception,string,index,name,assert,acked,prepare,create,index,name,add,mapping,type,date,type,date,format,index,random,true,client,prepare,index,index,name,type,1,set,source,json,builder,start,object,field,date,1000,end,object,client,prepare,index,index,name,type,2,set,source,json,builder,start,object,field,date,2000,end,object,client,prepare,index,index,name,type,3,set,source,json,builder,start,object,field,date,3000,end,object,search,response,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1000,3000,add,range,3000,4000,get,assert,that,search,response,get,hits,get,total,hits,equal,to,3l,list,bucket,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,1000,3000,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000,4000,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1000,3000,add,range,3000,4000,get,assert,that,search,response,get,hits,get,total,hits,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,1000,3000,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000,4000,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1,0e3,3000,8123,add,range,3000,8123,4,0e3,get,assert,that,search,response,get,hits,get,total,hits,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,1000,3000,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000,4000,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1,0e3,3,0e3,add,range,3,0e3,4,0e3,get,assert,that,search,response,get,hits,get,total,hits,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,1000,3000,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000,4000,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1000,123,3000,8,add,range,3000,8,4000,3,get,assert,that,search,response,get,hits,get,total,hits,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,1000,3000,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000,4000,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,00,16,40,00,50,00,add,range,00,50,00,01,06,40,format,hh,mm,ss,get,assert,that,search,response,get,hits,get,total,hits,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,00,16,40,00,50,00,1000000l,3000000l,assert,bucket,buckets,get,1,1l,00,50,00,01,06,40,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1000000,3000000,add,range,3000000,4000000,format,get,assert,that,search,response,get,hits,get,total,hits,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,1000000,3000000,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000000,4000000,3000000l,4000000l
DateRangeIT -> public void testRangeWithFormatNumericValue() throws Exception;1536314350;Test querying ranges on date mapping specifying a format with to/from_values specified as numeric value;public void testRangeWithFormatNumericValue() throws Exception {_        String indexName = "dateformat_numeric_test_idx"__        assertAcked(prepareCreate(indexName).addMapping("type", "date", "type=date,format=epoch_second"))__        indexRandom(true,_                client().prepareIndex(indexName, "type", "1").setSource(jsonBuilder().startObject().field("date", 1000).endObject()),_                client().prepareIndex(indexName, "type", "2").setSource(jsonBuilder().startObject().field("date", 2000).endObject()),_                client().prepareIndex(indexName, "type", "3").setSource(jsonBuilder().startObject().field("date", 3000).endObject()))___        _        _        SearchResponse searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(dateRange("date_range").field("date").addRange(1000, 3000).addRange(3000, 4000)).get()__        assertThat(searchResponse.getHits().getTotalHits(), equalTo(3L))__        List<Bucket> buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "1000-3000", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "3000-4000", 3000000L, 4000000L)___        _        searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(dateRange("date_range").field("date").addRange("1000", "3000").addRange("3000", "4000")).get()__        assertThat(searchResponse.getHits().getTotalHits(), equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "1000-3000", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "3000-4000", 3000000L, 4000000L)___        _        searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(dateRange("date_range").field("date").addRange(1.0e3, 3000.8123).addRange(3000.8123, 4.0e3)).get()__        assertThat(searchResponse.getHits().getTotalHits(), equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "1000-3000", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "3000-4000", 3000000L, 4000000L)___        _        searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(dateRange("date_range").field("date").addRange("1.0e3", "3.0e3").addRange("3.0e3", "4.0e3")).get()__        assertThat(searchResponse.getHits().getTotalHits(), equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "1000-3000", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "3000-4000", 3000000L, 4000000L)___        searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(dateRange("date_range").field("date").addRange("1000.123", "3000.8").addRange("3000.8", "4000.3")).get()__        assertThat(searchResponse.getHits().getTotalHits(), equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "1000-3000", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "3000-4000", 3000000L, 4000000L)___        _        _        searchResponse = client().prepareSearch(indexName).setSize(0).addAggregation(_                dateRange("date_range").field("date").addRange("00.16.40", "00.50.00").addRange("00.50.00", "01.06.40").format("HH.mm.ss"))_                .get()__        assertThat(searchResponse.getHits().getTotalHits(), equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "00.16.40-00.50.00", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "00.50.00-01.06.40", 3000000L, 4000000L)___        _        _        searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(_                        dateRange("date_range").field("date").addRange(1000000, 3000000).addRange(3000000, 4000000).format("epoch_millis"))_                .get()__        assertThat(searchResponse.getHits().getTotalHits(), equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "1000000-3000000", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "3000000-4000000", 3000000L, 4000000L)__    };test,querying,ranges,on,date,mapping,specifying,a,format,with,to,from,values,specified,as,numeric,value;public,void,test,range,with,format,numeric,value,throws,exception,string,index,name,assert,acked,prepare,create,index,name,add,mapping,type,date,type,date,format,index,random,true,client,prepare,index,index,name,type,1,set,source,json,builder,start,object,field,date,1000,end,object,client,prepare,index,index,name,type,2,set,source,json,builder,start,object,field,date,2000,end,object,client,prepare,index,index,name,type,3,set,source,json,builder,start,object,field,date,3000,end,object,search,response,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1000,3000,add,range,3000,4000,get,assert,that,search,response,get,hits,get,total,hits,equal,to,3l,list,bucket,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,1000,3000,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000,4000,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1000,3000,add,range,3000,4000,get,assert,that,search,response,get,hits,get,total,hits,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,1000,3000,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000,4000,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1,0e3,3000,8123,add,range,3000,8123,4,0e3,get,assert,that,search,response,get,hits,get,total,hits,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,1000,3000,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000,4000,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1,0e3,3,0e3,add,range,3,0e3,4,0e3,get,assert,that,search,response,get,hits,get,total,hits,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,1000,3000,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000,4000,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1000,123,3000,8,add,range,3000,8,4000,3,get,assert,that,search,response,get,hits,get,total,hits,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,1000,3000,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000,4000,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,00,16,40,00,50,00,add,range,00,50,00,01,06,40,format,hh,mm,ss,get,assert,that,search,response,get,hits,get,total,hits,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,00,16,40,00,50,00,1000000l,3000000l,assert,bucket,buckets,get,1,1l,00,50,00,01,06,40,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1000000,3000000,add,range,3000000,4000000,format,get,assert,that,search,response,get,hits,get,total,hits,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,1000000,3000000,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000000,4000000,3000000l,4000000l
DateRangeIT -> public void testRangeWithFormatNumericValue() throws Exception;1544035746;Test querying ranges on date mapping specifying a format with to/from_values specified as numeric value;public void testRangeWithFormatNumericValue() throws Exception {_        String indexName = "dateformat_numeric_test_idx"__        assertAcked(prepareCreate(indexName).addMapping("type", "date", "type=date,format=epoch_second"))__        indexRandom(true,_                client().prepareIndex(indexName, "type", "1").setSource(jsonBuilder().startObject().field("date", 1000).endObject()),_                client().prepareIndex(indexName, "type", "2").setSource(jsonBuilder().startObject().field("date", 2000).endObject()),_                client().prepareIndex(indexName, "type", "3").setSource(jsonBuilder().startObject().field("date", 3000).endObject()))___        _        _        SearchResponse searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(dateRange("date_range").field("date").addRange(1000, 3000).addRange(3000, 4000)).get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        List<Bucket> buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "1000-3000", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "3000-4000", 3000000L, 4000000L)___        _        searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(dateRange("date_range").field("date").addRange("1000", "3000").addRange("3000", "4000")).get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "1000-3000", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "3000-4000", 3000000L, 4000000L)___        _        searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(dateRange("date_range").field("date").addRange(1.0e3, 3000.8123).addRange(3000.8123, 4.0e3)).get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "1000-3000", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "3000-4000", 3000000L, 4000000L)___        _        searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(dateRange("date_range").field("date").addRange("1.0e3", "3.0e3").addRange("3.0e3", "4.0e3")).get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "1000-3000", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "3000-4000", 3000000L, 4000000L)___        searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(dateRange("date_range").field("date").addRange("1000.123", "3000.8").addRange("3000.8", "4000.3")).get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "1000-3000", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "3000-4000", 3000000L, 4000000L)___        _        _        searchResponse = client().prepareSearch(indexName).setSize(0).addAggregation(_                dateRange("date_range").field("date").addRange("00.16.40", "00.50.00").addRange("00.50.00", "01.06.40").format("HH.mm.ss"))_                .get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "00.16.40-00.50.00", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "00.50.00-01.06.40", 3000000L, 4000000L)___        _        _        searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(_                        dateRange("date_range").field("date").addRange(1000000, 3000000).addRange(3000000, 4000000).format("epoch_millis"))_                .get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "1000000-3000000", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "3000000-4000000", 3000000L, 4000000L)__    };test,querying,ranges,on,date,mapping,specifying,a,format,with,to,from,values,specified,as,numeric,value;public,void,test,range,with,format,numeric,value,throws,exception,string,index,name,assert,acked,prepare,create,index,name,add,mapping,type,date,type,date,format,index,random,true,client,prepare,index,index,name,type,1,set,source,json,builder,start,object,field,date,1000,end,object,client,prepare,index,index,name,type,2,set,source,json,builder,start,object,field,date,2000,end,object,client,prepare,index,index,name,type,3,set,source,json,builder,start,object,field,date,3000,end,object,search,response,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1000,3000,add,range,3000,4000,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,list,bucket,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,1000,3000,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000,4000,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1000,3000,add,range,3000,4000,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,1000,3000,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000,4000,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1,0e3,3000,8123,add,range,3000,8123,4,0e3,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,1000,3000,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000,4000,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1,0e3,3,0e3,add,range,3,0e3,4,0e3,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,1000,3000,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000,4000,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1000,123,3000,8,add,range,3000,8,4000,3,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,1000,3000,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000,4000,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,00,16,40,00,50,00,add,range,00,50,00,01,06,40,format,hh,mm,ss,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,00,16,40,00,50,00,1000000l,3000000l,assert,bucket,buckets,get,1,1l,00,50,00,01,06,40,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1000000,3000000,add,range,3000000,4000000,format,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,1000000,3000000,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000000,4000000,3000000l,4000000l
DateRangeIT -> public void testRangeWithFormatNumericValue() throws Exception;1544110272;Test querying ranges on date mapping specifying a format with to/from_values specified as numeric value;public void testRangeWithFormatNumericValue() throws Exception {_        String indexName = "dateformat_numeric_test_idx"__        assertAcked(prepareCreate(indexName).addMapping("type", "date", "type=date,format=epoch_second"))__        indexRandom(true,_                client().prepareIndex(indexName, "type", "1").setSource(jsonBuilder().startObject().field("date", 1000).endObject()),_                client().prepareIndex(indexName, "type", "2").setSource(jsonBuilder().startObject().field("date", 2000).endObject()),_                client().prepareIndex(indexName, "type", "3").setSource(jsonBuilder().startObject().field("date", 3000).endObject()))___        _        _        SearchResponse searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(dateRange("date_range").field("date").addRange(1000, 3000).addRange(3000, 4000)).get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        List<Bucket> buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "1000-3000", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "3000-4000", 3000000L, 4000000L)___        _        searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(dateRange("date_range").field("date").addRange("1000", "3000").addRange("3000", "4000")).get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "1000-3000", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "3000-4000", 3000000L, 4000000L)___        _        searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(dateRange("date_range").field("date").addRange(1.0e3, 3000.8123).addRange(3000.8123, 4.0e3)).get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "1000-3000", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "3000-4000", 3000000L, 4000000L)___        _        searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(dateRange("date_range").field("date").addRange("1.0e3", "3.0e3").addRange("3.0e3", "4.0e3")).get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "1000-3000", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "3000-4000", 3000000L, 4000000L)___        searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(dateRange("date_range").field("date").addRange("1000.123", "3000.8").addRange("3000.8", "4000.3")).get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "1000-3000", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "3000-4000", 3000000L, 4000000L)___        _        _        searchResponse = client().prepareSearch(indexName).setSize(0).addAggregation(_                dateRange("date_range").field("date").addRange("00.16.40", "00.50.00").addRange("00.50.00", "01.06.40").format("HH.mm.ss"))_                .get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "00.16.40-00.50.00", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "00.50.00-01.06.40", 3000000L, 4000000L)___        _        _        searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(_                        dateRange("date_range").field("date").addRange(1000000, 3000000).addRange(3000000, 4000000).format("epoch_millis"))_                .get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "1000000-3000000", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "3000000-4000000", 3000000L, 4000000L)__    };test,querying,ranges,on,date,mapping,specifying,a,format,with,to,from,values,specified,as,numeric,value;public,void,test,range,with,format,numeric,value,throws,exception,string,index,name,assert,acked,prepare,create,index,name,add,mapping,type,date,type,date,format,index,random,true,client,prepare,index,index,name,type,1,set,source,json,builder,start,object,field,date,1000,end,object,client,prepare,index,index,name,type,2,set,source,json,builder,start,object,field,date,2000,end,object,client,prepare,index,index,name,type,3,set,source,json,builder,start,object,field,date,3000,end,object,search,response,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1000,3000,add,range,3000,4000,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,list,bucket,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,1000,3000,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000,4000,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1000,3000,add,range,3000,4000,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,1000,3000,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000,4000,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1,0e3,3000,8123,add,range,3000,8123,4,0e3,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,1000,3000,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000,4000,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1,0e3,3,0e3,add,range,3,0e3,4,0e3,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,1000,3000,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000,4000,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1000,123,3000,8,add,range,3000,8,4000,3,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,1000,3000,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000,4000,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,00,16,40,00,50,00,add,range,00,50,00,01,06,40,format,hh,mm,ss,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,00,16,40,00,50,00,1000000l,3000000l,assert,bucket,buckets,get,1,1l,00,50,00,01,06,40,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1000000,3000000,add,range,3000000,4000000,format,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,1000000,3000000,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000000,4000000,3000000l,4000000l
DateRangeIT -> public void testRangeWithFormatNumericValue() throws Exception;1544600864;Test querying ranges on date mapping specifying a format with to/from_values specified as numeric value;public void testRangeWithFormatNumericValue() throws Exception {_        String indexName = "dateformat_numeric_test_idx"__        assertAcked(prepareCreate(indexName).addMapping("type", "date", "type=date,format=epoch_second"))__        indexRandom(true,_                client().prepareIndex(indexName, "type", "1").setSource(jsonBuilder().startObject().field("date", 1000).endObject()),_                client().prepareIndex(indexName, "type", "2").setSource(jsonBuilder().startObject().field("date", 2000).endObject()),_                client().prepareIndex(indexName, "type", "3").setSource(jsonBuilder().startObject().field("date", 3000).endObject()))___        _        _        SearchResponse searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(dateRange("date_range").field("date").addRange(1000, 3000).addRange(3000, 4000)).get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        List<Bucket> buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "1000-3000", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "3000-4000", 3000000L, 4000000L)___        _        searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(dateRange("date_range").field("date").addRange("1000", "3000").addRange("3000", "4000")).get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "1000-3000", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "3000-4000", 3000000L, 4000000L)___        _        searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(dateRange("date_range").field("date").addRange(1.0e3, 3000.8123).addRange(3000.8123, 4.0e3)).get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "1000-3000", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "3000-4000", 3000000L, 4000000L)___        _        searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(dateRange("date_range").field("date").addRange("1.0e3", "3.0e3").addRange("3.0e3", "4.0e3")).get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "1000-3000", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "3000-4000", 3000000L, 4000000L)___        searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(dateRange("date_range").field("date").addRange("1000.123", "3000.8").addRange("3000.8", "4000.3")).get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "1000-3000", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "3000-4000", 3000000L, 4000000L)___        _        _        searchResponse = client().prepareSearch(indexName).setSize(0).addAggregation(_                dateRange("date_range").field("date").addRange("00.16.40", "00.50.00").addRange("00.50.00", "01.06.40").format("HH.mm.ss"))_                .get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "00.16.40-00.50.00", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "00.50.00-01.06.40", 3000000L, 4000000L)___        _        _        searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(_                        dateRange("date_range").field("date").addRange(1000000, 3000000).addRange(3000000, 4000000).format("epoch_millis"))_                .get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "1000000-3000000", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "3000000-4000000", 3000000L, 4000000L)__    };test,querying,ranges,on,date,mapping,specifying,a,format,with,to,from,values,specified,as,numeric,value;public,void,test,range,with,format,numeric,value,throws,exception,string,index,name,assert,acked,prepare,create,index,name,add,mapping,type,date,type,date,format,index,random,true,client,prepare,index,index,name,type,1,set,source,json,builder,start,object,field,date,1000,end,object,client,prepare,index,index,name,type,2,set,source,json,builder,start,object,field,date,2000,end,object,client,prepare,index,index,name,type,3,set,source,json,builder,start,object,field,date,3000,end,object,search,response,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1000,3000,add,range,3000,4000,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,list,bucket,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,1000,3000,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000,4000,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1000,3000,add,range,3000,4000,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,1000,3000,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000,4000,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1,0e3,3000,8123,add,range,3000,8123,4,0e3,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,1000,3000,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000,4000,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1,0e3,3,0e3,add,range,3,0e3,4,0e3,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,1000,3000,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000,4000,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1000,123,3000,8,add,range,3000,8,4000,3,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,1000,3000,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000,4000,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,00,16,40,00,50,00,add,range,00,50,00,01,06,40,format,hh,mm,ss,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,00,16,40,00,50,00,1000000l,3000000l,assert,bucket,buckets,get,1,1l,00,50,00,01,06,40,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1000000,3000000,add,range,3000000,4000000,format,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,1000000,3000000,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000000,4000000,3000000l,4000000l
DateRangeIT -> public void testRangeWithFormatNumericValue() throws Exception;1548236405;Test querying ranges on date mapping specifying a format with to/from_values specified as numeric value;public void testRangeWithFormatNumericValue() throws Exception {_        String indexName = "dateformat_numeric_test_idx"__        assertAcked(prepareCreate(indexName).addMapping("type", "date", "type=date,format=epoch_second"))__        indexRandom(true,_                client().prepareIndex(indexName, "type", "1").setSource(jsonBuilder().startObject().field("date", 1002).endObject()),_                client().prepareIndex(indexName, "type", "2").setSource(jsonBuilder().startObject().field("date", 2000).endObject()),_                client().prepareIndex(indexName, "type", "3").setSource(jsonBuilder().startObject().field("date", 3008).endObject()))___        _        _        SearchResponse searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(dateRange("date_range").field("date").addRange(1000, 3000).addRange(3000, 4000)).get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        List<Bucket> buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        if (JavaVersion.current().getVersion().get(0) == 8) {_            assertBucket(buckets.get(0), 2L, "1000.0-3000.0", 1000000L, 3000000L)__            assertBucket(buckets.get(1), 1L, "3000.0-4000.0", 3000000L, 4000000L)__        } else {_            assertBucket(buckets.get(0), 2L, "1000-3000", 1000000L, 3000000L)__            assertBucket(buckets.get(1), 1L, "3000-4000", 3000000L, 4000000L)__        }__        _        searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(dateRange("date_range").field("date").addRange("1000", "3000").addRange("3000", "4000")).get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        if (JavaVersion.current().getVersion().get(0) == 8) {_            assertBucket(buckets.get(0), 2L, "1000.0-3000.0", 1000000L, 3000000L)__            assertBucket(buckets.get(1), 1L, "3000.0-4000.0", 3000000L, 4000000L)__        } else {_            assertBucket(buckets.get(0), 2L, "1000-3000", 1000000L, 3000000L)__            assertBucket(buckets.get(1), 1L, "3000-4000", 3000000L, 4000000L)__        }__        _        searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(dateRange("date_range").field("date").addRange(1.0e3, 3000.8123).addRange(3000.8123, 4.0e3)).get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        if (JavaVersion.current().getVersion().get(0) == 8) {_            assertBucket(buckets.get(0), 2L, "1000.0-3000.0", 1000000L, 3000000L)__            assertBucket(buckets.get(1), 1L, "3000.0-4000.0", 3000000L, 4000000L)__        } else {_            assertBucket(buckets.get(0), 2L, "1000-3000", 1000000L, 3000000L)__            assertBucket(buckets.get(1), 1L, "3000-4000", 3000000L, 4000000L)__        }__        _        _        searchResponse = client().prepareSearch(indexName).setSize(0).addAggregation(_                dateRange("date_range").field("date").addRange("00.16.40", "00.50.00").addRange("00.50.00", "01.06.40").format("HH.mm.ss"))_                .get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "00.16.40-00.50.00", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "00.50.00-01.06.40", 3000000L, 4000000L)___        _        _        searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(_                        dateRange("date_range").field("date").addRange(1000000, 3000000).addRange(3000000, 4000000).format("epoch_millis"))_                .get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "1000000-3000000", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "3000000-4000000", 3000000L, 4000000L)__    };test,querying,ranges,on,date,mapping,specifying,a,format,with,to,from,values,specified,as,numeric,value;public,void,test,range,with,format,numeric,value,throws,exception,string,index,name,assert,acked,prepare,create,index,name,add,mapping,type,date,type,date,format,index,random,true,client,prepare,index,index,name,type,1,set,source,json,builder,start,object,field,date,1002,end,object,client,prepare,index,index,name,type,2,set,source,json,builder,start,object,field,date,2000,end,object,client,prepare,index,index,name,type,3,set,source,json,builder,start,object,field,date,3008,end,object,search,response,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1000,3000,add,range,3000,4000,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,list,bucket,buckets,check,buckets,search,response,get,aggregations,get,2,if,java,version,current,get,version,get,0,8,assert,bucket,buckets,get,0,2l,1000,0,3000,0,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000,0,4000,0,3000000l,4000000l,else,assert,bucket,buckets,get,0,2l,1000,3000,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000,4000,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1000,3000,add,range,3000,4000,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,if,java,version,current,get,version,get,0,8,assert,bucket,buckets,get,0,2l,1000,0,3000,0,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000,0,4000,0,3000000l,4000000l,else,assert,bucket,buckets,get,0,2l,1000,3000,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000,4000,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1,0e3,3000,8123,add,range,3000,8123,4,0e3,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,if,java,version,current,get,version,get,0,8,assert,bucket,buckets,get,0,2l,1000,0,3000,0,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000,0,4000,0,3000000l,4000000l,else,assert,bucket,buckets,get,0,2l,1000,3000,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000,4000,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,00,16,40,00,50,00,add,range,00,50,00,01,06,40,format,hh,mm,ss,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,00,16,40,00,50,00,1000000l,3000000l,assert,bucket,buckets,get,1,1l,00,50,00,01,06,40,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1000000,3000000,add,range,3000000,4000000,format,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,1000000,3000000,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000000,4000000,3000000l,4000000l
DateRangeIT -> public void testRangeWithFormatNumericValue() throws Exception;1549008228;Test querying ranges on date mapping specifying a format with to/from_values specified as numeric value;public void testRangeWithFormatNumericValue() throws Exception {_        String indexName = "dateformat_numeric_test_idx"__        assertAcked(prepareCreate(indexName).addMapping("type", "date", "type=date,format=epoch_second"))__        indexRandom(true,_                client().prepareIndex(indexName, "type", "1").setSource(jsonBuilder().startObject().field("date", 1002).endObject()),_                client().prepareIndex(indexName, "type", "2").setSource(jsonBuilder().startObject().field("date", 2000).endObject()),_                client().prepareIndex(indexName, "type", "3").setSource(jsonBuilder().startObject().field("date", 3008).endObject()))___        _        _        SearchResponse searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(dateRange("date_range").field("date").addRange(1000, 3000).addRange(3000, 4000)).get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        List<Bucket> buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "1000-3000", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "3000-4000", 3000000L, 4000000L)___        _        searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(dateRange("date_range").field("date").addRange("1000", "3000").addRange("3000", "4000")).get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "1000-3000", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "3000-4000", 3000000L, 4000000L)___        _        searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(dateRange("date_range").field("date").addRange(1.0e3, 3000.8123).addRange(3000.8123, 4.0e3)).get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "1000-3000", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "3000-4000", 3000000L, 4000000L)___        _        _        searchResponse = client().prepareSearch(indexName).setSize(0).addAggregation(_                dateRange("date_range").field("date").addRange("00.16.40", "00.50.00").addRange("00.50.00", "01.06.40").format("HH.mm.ss"))_                .get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "00.16.40-00.50.00", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "00.50.00-01.06.40", 3000000L, 4000000L)___        _        _        searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(_                        dateRange("date_range").field("date").addRange(1000000, 3000000).addRange(3000000, 4000000).format("epoch_millis"))_                .get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "1000000-3000000", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "3000000-4000000", 3000000L, 4000000L)__    };test,querying,ranges,on,date,mapping,specifying,a,format,with,to,from,values,specified,as,numeric,value;public,void,test,range,with,format,numeric,value,throws,exception,string,index,name,assert,acked,prepare,create,index,name,add,mapping,type,date,type,date,format,index,random,true,client,prepare,index,index,name,type,1,set,source,json,builder,start,object,field,date,1002,end,object,client,prepare,index,index,name,type,2,set,source,json,builder,start,object,field,date,2000,end,object,client,prepare,index,index,name,type,3,set,source,json,builder,start,object,field,date,3008,end,object,search,response,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1000,3000,add,range,3000,4000,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,list,bucket,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,1000,3000,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000,4000,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1000,3000,add,range,3000,4000,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,1000,3000,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000,4000,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1,0e3,3000,8123,add,range,3000,8123,4,0e3,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,1000,3000,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000,4000,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,00,16,40,00,50,00,add,range,00,50,00,01,06,40,format,hh,mm,ss,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,00,16,40,00,50,00,1000000l,3000000l,assert,bucket,buckets,get,1,1l,00,50,00,01,06,40,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1000000,3000000,add,range,3000000,4000000,format,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,1000000,3000000,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000000,4000000,3000000l,4000000l
DateRangeIT -> public void testRangeWithFormatStringValue() throws Exception;1524684173;Test querying ranges on date mapping specifying a format with to/from_values specified as Strings;public void testRangeWithFormatStringValue() throws Exception {_        String indexName = "dateformat_test_idx"__        assertAcked(prepareCreate(indexName).addMapping("type", "date", "type=date,format=strict_hour_minute_second"))__        indexRandom(true,_                client().prepareIndex(indexName, "type", "1").setSource(jsonBuilder().startObject().field("date", "00:16:40").endObject()),_                client().prepareIndex(indexName, "type", "2").setSource(jsonBuilder().startObject().field("date", "00:33:20").endObject()),_                client().prepareIndex(indexName, "type", "3").setSource(jsonBuilder().startObject().field("date", "00:50:00").endObject()))___        _        _        SearchResponse searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(dateRange("date_range").field("date").addRange("00:16:40", "00:50:00").addRange("00:50:00", "01:06:40"))_                .get()__        assertThat(searchResponse.getHits().getTotalHits(), equalTo(3L))__        List<Range.Bucket> buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "00:16:40-00:50:00", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "00:50:00-01:06:40", 3000000L, 4000000L)___        _        _        searchResponse = client().prepareSearch(indexName).setSize(0).addAggregation(_                dateRange("date_range").field("date").addRange("00.16.40", "00.50.00").addRange("00.50.00", "01.06.40").format("HH.mm.ss"))_                .get()__        assertThat(searchResponse.getHits().getTotalHits(), equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "00.16.40-00.50.00", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "00.50.00-01.06.40", 3000000L, 4000000L)___        _        _        searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(_                        dateRange("date_range").field("date").addRange(1000000, 3000000).addRange(3000000, 4000000).format("epoch_millis"))_                .get()__        assertThat(searchResponse.getHits().getTotalHits(), equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "1000000-3000000", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "3000000-4000000", 3000000L, 4000000L)___        _        Exception e = expectThrows(Exception.class, () -> client().prepareSearch(indexName).setSize(0)_                .addAggregation(dateRange("date_range").field("date").addRange(1000000, 3000000).addRange(3000000, 4000000)).get())__        Throwable cause = e.getCause()__        assertThat(cause, instanceOf(ElasticsearchParseException.class))__        assertEquals("failed to parse date field [1000000] with format [strict_hour_minute_second]", cause.getMessage())__    };test,querying,ranges,on,date,mapping,specifying,a,format,with,to,from,values,specified,as,strings;public,void,test,range,with,format,string,value,throws,exception,string,index,name,assert,acked,prepare,create,index,name,add,mapping,type,date,type,date,format,index,random,true,client,prepare,index,index,name,type,1,set,source,json,builder,start,object,field,date,00,16,40,end,object,client,prepare,index,index,name,type,2,set,source,json,builder,start,object,field,date,00,33,20,end,object,client,prepare,index,index,name,type,3,set,source,json,builder,start,object,field,date,00,50,00,end,object,search,response,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,00,16,40,00,50,00,add,range,00,50,00,01,06,40,get,assert,that,search,response,get,hits,get,total,hits,equal,to,3l,list,range,bucket,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,00,16,40,00,50,00,1000000l,3000000l,assert,bucket,buckets,get,1,1l,00,50,00,01,06,40,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,00,16,40,00,50,00,add,range,00,50,00,01,06,40,format,hh,mm,ss,get,assert,that,search,response,get,hits,get,total,hits,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,00,16,40,00,50,00,1000000l,3000000l,assert,bucket,buckets,get,1,1l,00,50,00,01,06,40,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1000000,3000000,add,range,3000000,4000000,format,get,assert,that,search,response,get,hits,get,total,hits,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,1000000,3000000,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000000,4000000,3000000l,4000000l,exception,e,expect,throws,exception,class,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1000000,3000000,add,range,3000000,4000000,get,throwable,cause,e,get,cause,assert,that,cause,instance,of,elasticsearch,parse,exception,class,assert,equals,failed,to,parse,date,field,1000000,with,format,cause,get,message
DateRangeIT -> public void testRangeWithFormatStringValue() throws Exception;1536314350;Test querying ranges on date mapping specifying a format with to/from_values specified as Strings;public void testRangeWithFormatStringValue() throws Exception {_        String indexName = "dateformat_test_idx"__        assertAcked(prepareCreate(indexName).addMapping("type", "date", "type=date,format=strict_hour_minute_second"))__        indexRandom(true,_                client().prepareIndex(indexName, "type", "1").setSource(jsonBuilder().startObject().field("date", "00:16:40").endObject()),_                client().prepareIndex(indexName, "type", "2").setSource(jsonBuilder().startObject().field("date", "00:33:20").endObject()),_                client().prepareIndex(indexName, "type", "3").setSource(jsonBuilder().startObject().field("date", "00:50:00").endObject()))___        _        _        SearchResponse searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(dateRange("date_range").field("date").addRange("00:16:40", "00:50:00").addRange("00:50:00", "01:06:40"))_                .get()__        assertThat(searchResponse.getHits().getTotalHits(), equalTo(3L))__        List<Range.Bucket> buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "00:16:40-00:50:00", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "00:50:00-01:06:40", 3000000L, 4000000L)___        _        _        searchResponse = client().prepareSearch(indexName).setSize(0).addAggregation(_                dateRange("date_range").field("date").addRange("00.16.40", "00.50.00").addRange("00.50.00", "01.06.40").format("HH.mm.ss"))_                .get()__        assertThat(searchResponse.getHits().getTotalHits(), equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "00.16.40-00.50.00", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "00.50.00-01.06.40", 3000000L, 4000000L)___        _        _        searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(_                        dateRange("date_range").field("date").addRange(1000000, 3000000).addRange(3000000, 4000000).format("epoch_millis"))_                .get()__        assertThat(searchResponse.getHits().getTotalHits(), equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "1000000-3000000", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "3000000-4000000", 3000000L, 4000000L)___        _        Exception e = expectThrows(Exception.class, () -> client().prepareSearch(indexName).setSize(0)_                .addAggregation(dateRange("date_range").field("date").addRange(1000000, 3000000).addRange(3000000, 4000000)).get())__        Throwable cause = e.getCause()__        assertThat(cause, instanceOf(ElasticsearchParseException.class))__        assertEquals("failed to parse date field [1000000] with format [strict_hour_minute_second]", cause.getMessage())__    };test,querying,ranges,on,date,mapping,specifying,a,format,with,to,from,values,specified,as,strings;public,void,test,range,with,format,string,value,throws,exception,string,index,name,assert,acked,prepare,create,index,name,add,mapping,type,date,type,date,format,index,random,true,client,prepare,index,index,name,type,1,set,source,json,builder,start,object,field,date,00,16,40,end,object,client,prepare,index,index,name,type,2,set,source,json,builder,start,object,field,date,00,33,20,end,object,client,prepare,index,index,name,type,3,set,source,json,builder,start,object,field,date,00,50,00,end,object,search,response,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,00,16,40,00,50,00,add,range,00,50,00,01,06,40,get,assert,that,search,response,get,hits,get,total,hits,equal,to,3l,list,range,bucket,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,00,16,40,00,50,00,1000000l,3000000l,assert,bucket,buckets,get,1,1l,00,50,00,01,06,40,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,00,16,40,00,50,00,add,range,00,50,00,01,06,40,format,hh,mm,ss,get,assert,that,search,response,get,hits,get,total,hits,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,00,16,40,00,50,00,1000000l,3000000l,assert,bucket,buckets,get,1,1l,00,50,00,01,06,40,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1000000,3000000,add,range,3000000,4000000,format,get,assert,that,search,response,get,hits,get,total,hits,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,1000000,3000000,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000000,4000000,3000000l,4000000l,exception,e,expect,throws,exception,class,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1000000,3000000,add,range,3000000,4000000,get,throwable,cause,e,get,cause,assert,that,cause,instance,of,elasticsearch,parse,exception,class,assert,equals,failed,to,parse,date,field,1000000,with,format,cause,get,message
DateRangeIT -> public void testRangeWithFormatStringValue() throws Exception;1544035746;Test querying ranges on date mapping specifying a format with to/from_values specified as Strings;public void testRangeWithFormatStringValue() throws Exception {_        String indexName = "dateformat_test_idx"__        assertAcked(prepareCreate(indexName).addMapping("type", "date", "type=date,format=strict_hour_minute_second"))__        indexRandom(true,_                client().prepareIndex(indexName, "type", "1").setSource(jsonBuilder().startObject().field("date", "00:16:40").endObject()),_                client().prepareIndex(indexName, "type", "2").setSource(jsonBuilder().startObject().field("date", "00:33:20").endObject()),_                client().prepareIndex(indexName, "type", "3").setSource(jsonBuilder().startObject().field("date", "00:50:00").endObject()))___        _        _        SearchResponse searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(dateRange("date_range").field("date").addRange("00:16:40", "00:50:00").addRange("00:50:00", "01:06:40"))_                .get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        List<Range.Bucket> buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "00:16:40-00:50:00", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "00:50:00-01:06:40", 3000000L, 4000000L)___        _        _        searchResponse = client().prepareSearch(indexName).setSize(0).addAggregation(_                dateRange("date_range").field("date").addRange("00.16.40", "00.50.00").addRange("00.50.00", "01.06.40").format("HH.mm.ss"))_                .get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "00.16.40-00.50.00", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "00.50.00-01.06.40", 3000000L, 4000000L)___        _        _        searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(_                        dateRange("date_range").field("date").addRange(1000000, 3000000).addRange(3000000, 4000000).format("epoch_millis"))_                .get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "1000000-3000000", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "3000000-4000000", 3000000L, 4000000L)___        _        Exception e = expectThrows(Exception.class, () -> client().prepareSearch(indexName).setSize(0)_                .addAggregation(dateRange("date_range").field("date").addRange(1000000, 3000000).addRange(3000000, 4000000)).get())__        Throwable cause = e.getCause()__        assertThat(cause, instanceOf(ElasticsearchParseException.class))__        assertEquals("failed to parse date field [1000000] with format [strict_hour_minute_second]", cause.getMessage())__    };test,querying,ranges,on,date,mapping,specifying,a,format,with,to,from,values,specified,as,strings;public,void,test,range,with,format,string,value,throws,exception,string,index,name,assert,acked,prepare,create,index,name,add,mapping,type,date,type,date,format,index,random,true,client,prepare,index,index,name,type,1,set,source,json,builder,start,object,field,date,00,16,40,end,object,client,prepare,index,index,name,type,2,set,source,json,builder,start,object,field,date,00,33,20,end,object,client,prepare,index,index,name,type,3,set,source,json,builder,start,object,field,date,00,50,00,end,object,search,response,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,00,16,40,00,50,00,add,range,00,50,00,01,06,40,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,list,range,bucket,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,00,16,40,00,50,00,1000000l,3000000l,assert,bucket,buckets,get,1,1l,00,50,00,01,06,40,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,00,16,40,00,50,00,add,range,00,50,00,01,06,40,format,hh,mm,ss,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,00,16,40,00,50,00,1000000l,3000000l,assert,bucket,buckets,get,1,1l,00,50,00,01,06,40,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1000000,3000000,add,range,3000000,4000000,format,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,1000000,3000000,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000000,4000000,3000000l,4000000l,exception,e,expect,throws,exception,class,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1000000,3000000,add,range,3000000,4000000,get,throwable,cause,e,get,cause,assert,that,cause,instance,of,elasticsearch,parse,exception,class,assert,equals,failed,to,parse,date,field,1000000,with,format,cause,get,message
DateRangeIT -> public void testRangeWithFormatStringValue() throws Exception;1544110272;Test querying ranges on date mapping specifying a format with to/from_values specified as Strings;public void testRangeWithFormatStringValue() throws Exception {_        String indexName = "dateformat_test_idx"__        assertAcked(prepareCreate(indexName).addMapping("type", "date", "type=date,format=strict_hour_minute_second"))__        indexRandom(true,_                client().prepareIndex(indexName, "type", "1").setSource(jsonBuilder().startObject().field("date", "00:16:40").endObject()),_                client().prepareIndex(indexName, "type", "2").setSource(jsonBuilder().startObject().field("date", "00:33:20").endObject()),_                client().prepareIndex(indexName, "type", "3").setSource(jsonBuilder().startObject().field("date", "00:50:00").endObject()))___        _        _        SearchResponse searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(dateRange("date_range").field("date").addRange("00:16:40", "00:50:00").addRange("00:50:00", "01:06:40"))_                .get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        List<Range.Bucket> buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "00:16:40-00:50:00", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "00:50:00-01:06:40", 3000000L, 4000000L)___        _        _        searchResponse = client().prepareSearch(indexName).setSize(0).addAggregation(_                dateRange("date_range").field("date").addRange("00.16.40", "00.50.00").addRange("00.50.00", "01.06.40").format("HH.mm.ss"))_                .get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "00.16.40-00.50.00", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "00.50.00-01.06.40", 3000000L, 4000000L)___        _        _        searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(_                        dateRange("date_range").field("date").addRange(1000000, 3000000).addRange(3000000, 4000000).format("epoch_millis"))_                .get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "1000000-3000000", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "3000000-4000000", 3000000L, 4000000L)___        _        Exception e = expectThrows(Exception.class, () -> client().prepareSearch(indexName).setSize(0)_                .addAggregation(dateRange("date_range").field("date").addRange(1000000, 3000000).addRange(3000000, 4000000)).get())__        Throwable cause = e.getCause()__        assertThat(cause, instanceOf(ElasticsearchParseException.class))__        assertEquals("failed to parse date field [1000000] with format [strict_hour_minute_second]", cause.getMessage())__    };test,querying,ranges,on,date,mapping,specifying,a,format,with,to,from,values,specified,as,strings;public,void,test,range,with,format,string,value,throws,exception,string,index,name,assert,acked,prepare,create,index,name,add,mapping,type,date,type,date,format,index,random,true,client,prepare,index,index,name,type,1,set,source,json,builder,start,object,field,date,00,16,40,end,object,client,prepare,index,index,name,type,2,set,source,json,builder,start,object,field,date,00,33,20,end,object,client,prepare,index,index,name,type,3,set,source,json,builder,start,object,field,date,00,50,00,end,object,search,response,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,00,16,40,00,50,00,add,range,00,50,00,01,06,40,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,list,range,bucket,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,00,16,40,00,50,00,1000000l,3000000l,assert,bucket,buckets,get,1,1l,00,50,00,01,06,40,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,00,16,40,00,50,00,add,range,00,50,00,01,06,40,format,hh,mm,ss,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,00,16,40,00,50,00,1000000l,3000000l,assert,bucket,buckets,get,1,1l,00,50,00,01,06,40,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1000000,3000000,add,range,3000000,4000000,format,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,1000000,3000000,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000000,4000000,3000000l,4000000l,exception,e,expect,throws,exception,class,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1000000,3000000,add,range,3000000,4000000,get,throwable,cause,e,get,cause,assert,that,cause,instance,of,elasticsearch,parse,exception,class,assert,equals,failed,to,parse,date,field,1000000,with,format,cause,get,message
DateRangeIT -> public void testRangeWithFormatStringValue() throws Exception;1544600864;Test querying ranges on date mapping specifying a format with to/from_values specified as Strings;public void testRangeWithFormatStringValue() throws Exception {_        String indexName = "dateformat_test_idx"__        assertAcked(prepareCreate(indexName).addMapping("type", "date", "type=date,format=strict_hour_minute_second"))__        indexRandom(true,_                client().prepareIndex(indexName, "type", "1").setSource(jsonBuilder().startObject().field("date", "00:16:40").endObject()),_                client().prepareIndex(indexName, "type", "2").setSource(jsonBuilder().startObject().field("date", "00:33:20").endObject()),_                client().prepareIndex(indexName, "type", "3").setSource(jsonBuilder().startObject().field("date", "00:50:00").endObject()))___        _        _        SearchResponse searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(dateRange("date_range").field("date").addRange("00:16:40", "00:50:00").addRange("00:50:00", "01:06:40"))_                .get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        List<Range.Bucket> buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "00:16:40-00:50:00", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "00:50:00-01:06:40", 3000000L, 4000000L)___        _        _        searchResponse = client().prepareSearch(indexName).setSize(0).addAggregation(_                dateRange("date_range").field("date").addRange("00.16.40", "00.50.00").addRange("00.50.00", "01.06.40").format("HH.mm.ss"))_                .get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "00.16.40-00.50.00", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "00.50.00-01.06.40", 3000000L, 4000000L)___        _        _        searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(_                        dateRange("date_range").field("date").addRange(1000000, 3000000).addRange(3000000, 4000000).format("epoch_millis"))_                .get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "1000000-3000000", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "3000000-4000000", 3000000L, 4000000L)___        _        Exception e = expectThrows(Exception.class, () -> client().prepareSearch(indexName).setSize(0)_                .addAggregation(dateRange("date_range").field("date").addRange(1000000, 3000000).addRange(3000000, 4000000)).get())__        Throwable cause = e.getCause()__        assertThat(cause.getMessage(),_            containsString("failed to parse date field [1000000] with format [strict_hour_minute_second]"))__    };test,querying,ranges,on,date,mapping,specifying,a,format,with,to,from,values,specified,as,strings;public,void,test,range,with,format,string,value,throws,exception,string,index,name,assert,acked,prepare,create,index,name,add,mapping,type,date,type,date,format,index,random,true,client,prepare,index,index,name,type,1,set,source,json,builder,start,object,field,date,00,16,40,end,object,client,prepare,index,index,name,type,2,set,source,json,builder,start,object,field,date,00,33,20,end,object,client,prepare,index,index,name,type,3,set,source,json,builder,start,object,field,date,00,50,00,end,object,search,response,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,00,16,40,00,50,00,add,range,00,50,00,01,06,40,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,list,range,bucket,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,00,16,40,00,50,00,1000000l,3000000l,assert,bucket,buckets,get,1,1l,00,50,00,01,06,40,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,00,16,40,00,50,00,add,range,00,50,00,01,06,40,format,hh,mm,ss,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,00,16,40,00,50,00,1000000l,3000000l,assert,bucket,buckets,get,1,1l,00,50,00,01,06,40,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1000000,3000000,add,range,3000000,4000000,format,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,1000000,3000000,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000000,4000000,3000000l,4000000l,exception,e,expect,throws,exception,class,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1000000,3000000,add,range,3000000,4000000,get,throwable,cause,e,get,cause,assert,that,cause,get,message,contains,string,failed,to,parse,date,field,1000000,with,format
DateRangeIT -> public void testRangeWithFormatStringValue() throws Exception;1548236405;Test querying ranges on date mapping specifying a format with to/from_values specified as Strings;public void testRangeWithFormatStringValue() throws Exception {_        String indexName = "dateformat_test_idx"__        assertAcked(prepareCreate(indexName).addMapping("type", "date", "type=date,format=strict_hour_minute_second"))__        indexRandom(true,_                client().prepareIndex(indexName, "type", "1").setSource(jsonBuilder().startObject().field("date", "00:16:40").endObject()),_                client().prepareIndex(indexName, "type", "2").setSource(jsonBuilder().startObject().field("date", "00:33:20").endObject()),_                client().prepareIndex(indexName, "type", "3").setSource(jsonBuilder().startObject().field("date", "00:50:00").endObject()))___        _        _        SearchResponse searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(dateRange("date_range").field("date").addRange("00:16:40", "00:50:00").addRange("00:50:00", "01:06:40"))_                .get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        List<Range.Bucket> buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "00:16:40-00:50:00", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "00:50:00-01:06:40", 3000000L, 4000000L)___        _        _        searchResponse = client().prepareSearch(indexName).setSize(0).addAggregation(_                dateRange("date_range").field("date").addRange("00.16.40", "00.50.00").addRange("00.50.00", "01.06.40").format("HH.mm.ss"))_                .get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "00.16.40-00.50.00", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "00.50.00-01.06.40", 3000000L, 4000000L)___        _        _        searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(_                        dateRange("date_range").field("date").addRange(1000000, 3000000).addRange(3000000, 4000000).format("epoch_millis"))_                .get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "1000000-3000000", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "3000000-4000000", 3000000L, 4000000L)___        _        ElasticsearchException e = expectThrows(ElasticsearchException.class, () -> client().prepareSearch(indexName).setSize(0)_                .addAggregation(dateRange("date_range").field("date").addRange(1000000, 3000000).addRange(3000000, 4000000)).get())__        assertThat(e.getDetailedMessage(),_            containsString("failed to parse date field [1000000] with format [strict_hour_minute_second]"))__    };test,querying,ranges,on,date,mapping,specifying,a,format,with,to,from,values,specified,as,strings;public,void,test,range,with,format,string,value,throws,exception,string,index,name,assert,acked,prepare,create,index,name,add,mapping,type,date,type,date,format,index,random,true,client,prepare,index,index,name,type,1,set,source,json,builder,start,object,field,date,00,16,40,end,object,client,prepare,index,index,name,type,2,set,source,json,builder,start,object,field,date,00,33,20,end,object,client,prepare,index,index,name,type,3,set,source,json,builder,start,object,field,date,00,50,00,end,object,search,response,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,00,16,40,00,50,00,add,range,00,50,00,01,06,40,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,list,range,bucket,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,00,16,40,00,50,00,1000000l,3000000l,assert,bucket,buckets,get,1,1l,00,50,00,01,06,40,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,00,16,40,00,50,00,add,range,00,50,00,01,06,40,format,hh,mm,ss,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,00,16,40,00,50,00,1000000l,3000000l,assert,bucket,buckets,get,1,1l,00,50,00,01,06,40,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1000000,3000000,add,range,3000000,4000000,format,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,1000000,3000000,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000000,4000000,3000000l,4000000l,elasticsearch,exception,e,expect,throws,elasticsearch,exception,class,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1000000,3000000,add,range,3000000,4000000,get,assert,that,e,get,detailed,message,contains,string,failed,to,parse,date,field,1000000,with,format
DateRangeIT -> public void testRangeWithFormatStringValue() throws Exception;1549008228;Test querying ranges on date mapping specifying a format with to/from_values specified as Strings;public void testRangeWithFormatStringValue() throws Exception {_        String indexName = "dateformat_test_idx"__        assertAcked(prepareCreate(indexName).addMapping("type", "date", "type=date,format=strict_hour_minute_second"))__        indexRandom(true,_                client().prepareIndex(indexName, "type", "1").setSource(jsonBuilder().startObject().field("date", "00:16:40").endObject()),_                client().prepareIndex(indexName, "type", "2").setSource(jsonBuilder().startObject().field("date", "00:33:20").endObject()),_                client().prepareIndex(indexName, "type", "3").setSource(jsonBuilder().startObject().field("date", "00:50:00").endObject()))___        _        _        SearchResponse searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(dateRange("date_range").field("date").addRange("00:16:40", "00:50:00").addRange("00:50:00", "01:06:40"))_                .get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        List<Range.Bucket> buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "00:16:40-00:50:00", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "00:50:00-01:06:40", 3000000L, 4000000L)___        _        _        searchResponse = client().prepareSearch(indexName).setSize(0).addAggregation(_                dateRange("date_range").field("date").addRange("00.16.40", "00.50.00").addRange("00.50.00", "01.06.40").format("HH.mm.ss"))_                .get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "00.16.40-00.50.00", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "00.50.00-01.06.40", 3000000L, 4000000L)___        _        _        searchResponse = client().prepareSearch(indexName).setSize(0)_                .addAggregation(_                        dateRange("date_range").field("date").addRange(1000000, 3000000).addRange(3000000, 4000000).format("epoch_millis"))_                .get()__        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(3L))__        buckets = checkBuckets(searchResponse.getAggregations().get("date_range"), "date_range", 2)__        assertBucket(buckets.get(0), 2L, "1000000-3000000", 1000000L, 3000000L)__        assertBucket(buckets.get(1), 1L, "3000000-4000000", 3000000L, 4000000L)___        _        ElasticsearchException e = expectThrows(ElasticsearchException.class, () -> client().prepareSearch(indexName).setSize(0)_                .addAggregation(dateRange("date_range").field("date").addRange(1000000, 3000000).addRange(3000000, 4000000)).get())__        assertThat(e.getDetailedMessage(),_            containsString("failed to parse date field [1000000] with format [strict_hour_minute_second]"))__    };test,querying,ranges,on,date,mapping,specifying,a,format,with,to,from,values,specified,as,strings;public,void,test,range,with,format,string,value,throws,exception,string,index,name,assert,acked,prepare,create,index,name,add,mapping,type,date,type,date,format,index,random,true,client,prepare,index,index,name,type,1,set,source,json,builder,start,object,field,date,00,16,40,end,object,client,prepare,index,index,name,type,2,set,source,json,builder,start,object,field,date,00,33,20,end,object,client,prepare,index,index,name,type,3,set,source,json,builder,start,object,field,date,00,50,00,end,object,search,response,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,00,16,40,00,50,00,add,range,00,50,00,01,06,40,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,list,range,bucket,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,00,16,40,00,50,00,1000000l,3000000l,assert,bucket,buckets,get,1,1l,00,50,00,01,06,40,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,00,16,40,00,50,00,add,range,00,50,00,01,06,40,format,hh,mm,ss,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,00,16,40,00,50,00,1000000l,3000000l,assert,bucket,buckets,get,1,1l,00,50,00,01,06,40,3000000l,4000000l,search,response,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1000000,3000000,add,range,3000000,4000000,format,get,assert,that,search,response,get,hits,get,total,hits,value,equal,to,3l,buckets,check,buckets,search,response,get,aggregations,get,2,assert,bucket,buckets,get,0,2l,1000000,3000000,1000000l,3000000l,assert,bucket,buckets,get,1,1l,3000000,4000000,3000000l,4000000l,elasticsearch,exception,e,expect,throws,elasticsearch,exception,class,client,prepare,search,index,name,set,size,0,add,aggregation,date,range,field,date,add,range,1000000,3000000,add,range,3000000,4000000,get,assert,that,e,get,detailed,message,contains,string,failed,to,parse,date,field,1000000,with,format
