commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;public void testCleanupWhenEmpty() throws Exception {     try (NodeEnvironment env = newNodeEnvironment()) {         MetaStateService metaStateService = new MetaStateService(env, xContentRegistry()).         DanglingIndicesState danglingState = createDanglingIndicesState(env, metaStateService).         assertTrue(danglingState.getDanglingIndices().isEmpty()).         MetaData metaData = MetaData.builder().build().         danglingState.cleanupAllocatedDangledIndices(metaData).         assertTrue(danglingState.getDanglingIndices().isEmpty()).     } }
false;public;0;17;;public void testDanglingIndicesDiscovery() throws Exception {     try (NodeEnvironment env = newNodeEnvironment()) {         MetaStateService metaStateService = new MetaStateService(env, xContentRegistry()).         DanglingIndicesState danglingState = createDanglingIndicesState(env, metaStateService).         assertTrue(danglingState.getDanglingIndices().isEmpty()).         MetaData metaData = MetaData.builder().build().         final Settings.Builder settings = Settings.builder().put(indexSettings).put(IndexMetaData.SETTING_INDEX_UUID, "test1UUID").         IndexMetaData dangledIndex = IndexMetaData.builder("test1").settings(settings).build().         metaStateService.writeIndex("test_write", dangledIndex).         Map<Index, IndexMetaData> newDanglingIndices = danglingState.findNewDanglingIndices(metaData).         assertTrue(newDanglingIndices.containsKey(dangledIndex.getIndex())).         metaData = MetaData.builder().put(dangledIndex, false).build().         newDanglingIndices = danglingState.findNewDanglingIndices(metaData).         assertFalse(newDanglingIndices.containsKey(dangledIndex.getIndex())).     } }
false;public;0;23;;public void testInvalidIndexFolder() throws Exception {     try (NodeEnvironment env = newNodeEnvironment()) {         MetaStateService metaStateService = new MetaStateService(env, xContentRegistry()).         DanglingIndicesState danglingState = createDanglingIndicesState(env, metaStateService).         MetaData metaData = MetaData.builder().build().         final String uuid = "test1UUID".         final Settings.Builder settings = Settings.builder().put(indexSettings).put(IndexMetaData.SETTING_INDEX_UUID, uuid).         IndexMetaData dangledIndex = IndexMetaData.builder("test1").settings(settings).build().         metaStateService.writeIndex("test_write", dangledIndex).         for (Path path : env.resolveIndexFolder(uuid)) {             if (Files.exists(path)) {                 Files.move(path, path.resolveSibling("invalidUUID"), StandardCopyOption.ATOMIC_MOVE).             }         }         try {             danglingState.findNewDanglingIndices(metaData).             fail("no exception thrown for invalid folder name").         } catch (IllegalStateException e) {             assertThat(e.getMessage(), equalTo("[invalidUUID] invalid index folder name, rename to [test1UUID]")).         }     } }
false;public;0;43;;public void testDanglingProcessing() throws Exception {     try (NodeEnvironment env = newNodeEnvironment()) {         MetaStateService metaStateService = new MetaStateService(env, xContentRegistry()).         DanglingIndicesState danglingState = createDanglingIndicesState(env, metaStateService).         MetaData metaData = MetaData.builder().build().         final Settings.Builder settings = Settings.builder().put(indexSettings).put(IndexMetaData.SETTING_INDEX_UUID, "test1UUID").         IndexMetaData dangledIndex = IndexMetaData.builder("test1").settings(settings).build().         metaStateService.writeIndex("test_write", dangledIndex).         // check that several runs when not in the metadata still keep the dangled index around         int numberOfChecks = randomIntBetween(1, 10).         for (int i = 0. i < numberOfChecks. i++) {             Map<Index, IndexMetaData> newDanglingIndices = danglingState.findNewDanglingIndices(metaData).             assertThat(newDanglingIndices.size(), equalTo(1)).             assertThat(newDanglingIndices.keySet(), Matchers.hasItems(dangledIndex.getIndex())).             assertTrue(danglingState.getDanglingIndices().isEmpty()).         }         for (int i = 0. i < numberOfChecks. i++) {             danglingState.findNewAndAddDanglingIndices(metaData).             assertThat(danglingState.getDanglingIndices().size(), equalTo(1)).             assertThat(danglingState.getDanglingIndices().keySet(), Matchers.hasItems(dangledIndex.getIndex())).         }         // simulate allocation to the metadata         metaData = MetaData.builder(metaData).put(dangledIndex, true).build().         // check that several runs when in the metadata, but not cleaned yet, still keeps dangled         for (int i = 0. i < numberOfChecks. i++) {             Map<Index, IndexMetaData> newDanglingIndices = danglingState.findNewDanglingIndices(metaData).             assertTrue(newDanglingIndices.isEmpty()).             assertThat(danglingState.getDanglingIndices().size(), equalTo(1)).             assertThat(danglingState.getDanglingIndices().keySet(), Matchers.hasItems(dangledIndex.getIndex())).         }         danglingState.cleanupAllocatedDangledIndices(metaData).         assertTrue(danglingState.getDanglingIndices().isEmpty()).     } }
false;public;0;15;;public void testDanglingIndicesNotImportedWhenTombstonePresent() throws Exception {     try (NodeEnvironment env = newNodeEnvironment()) {         MetaStateService metaStateService = new MetaStateService(env, xContentRegistry()).         DanglingIndicesState danglingState = createDanglingIndicesState(env, metaStateService).         final Settings.Builder settings = Settings.builder().put(indexSettings).put(IndexMetaData.SETTING_INDEX_UUID, "test1UUID").         IndexMetaData dangledIndex = IndexMetaData.builder("test1").settings(settings).build().         metaStateService.writeIndex("test_write", dangledIndex).         final IndexGraveyard graveyard = IndexGraveyard.builder().addTombstone(dangledIndex.getIndex()).build().         final MetaData metaData = MetaData.builder().indexGraveyard(graveyard).build().         assertThat(danglingState.findNewDanglingIndices(metaData).size(), equalTo(0)).     } }
false;private;2;3;;private DanglingIndicesState createDanglingIndicesState(NodeEnvironment env, MetaStateService metaStateService) {     return new DanglingIndicesState(env, metaStateService, null, mock(ClusterService.class)). }
