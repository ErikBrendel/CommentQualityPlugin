commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;public void testZeroBytesPerSecondIsNoRateLimit() {     clusterSettings.applySettings(Settings.builder().put(RecoverySettings.INDICES_RECOVERY_MAX_BYTES_PER_SEC_SETTING.getKey(), 0).build()).     assertEquals(null, recoverySettings.rateLimiter()). }
false;public;0;8;;public void testRetryDelayStateSync() {     long duration = between(1, 1000).     TimeUnit timeUnit = randomFrom(TimeUnit.MILLISECONDS, TimeUnit.SECONDS, TimeUnit.MINUTES, TimeUnit.HOURS).     clusterSettings.applySettings(Settings.builder().put(RecoverySettings.INDICES_RECOVERY_RETRY_DELAY_STATE_SYNC_SETTING.getKey(), duration, timeUnit).build()).     assertEquals(new TimeValue(duration, timeUnit), recoverySettings.retryDelayStateSync()). }
false;public;0;8;;public void testRetryDelayNetwork() {     long duration = between(1, 1000).     TimeUnit timeUnit = randomFrom(TimeUnit.MILLISECONDS, TimeUnit.SECONDS, TimeUnit.MINUTES, TimeUnit.HOURS).     clusterSettings.applySettings(Settings.builder().put(RecoverySettings.INDICES_RECOVERY_RETRY_DELAY_NETWORK_SETTING.getKey(), duration, timeUnit).build()).     assertEquals(new TimeValue(duration, timeUnit), recoverySettings.retryDelayNetwork()). }
false;public;0;8;;public void testActivityTimeout() {     long duration = between(1, 1000).     TimeUnit timeUnit = randomFrom(TimeUnit.MILLISECONDS, TimeUnit.SECONDS, TimeUnit.MINUTES, TimeUnit.HOURS).     clusterSettings.applySettings(Settings.builder().put(RecoverySettings.INDICES_RECOVERY_ACTIVITY_TIMEOUT_SETTING.getKey(), duration, timeUnit).build()).     assertEquals(new TimeValue(duration, timeUnit), recoverySettings.activityTimeout()). }
false;public;0;8;;public void testInternalActionTimeout() {     long duration = between(1, 1000).     TimeUnit timeUnit = randomFrom(TimeUnit.MILLISECONDS, TimeUnit.SECONDS, TimeUnit.MINUTES, TimeUnit.HOURS).     clusterSettings.applySettings(Settings.builder().put(RecoverySettings.INDICES_RECOVERY_INTERNAL_ACTION_TIMEOUT_SETTING.getKey(), duration, timeUnit).build()).     assertEquals(new TimeValue(duration, timeUnit), recoverySettings.internalActionTimeout()). }
false;public;0;8;;public void testInternalLongActionTimeout() {     long duration = between(1, 1000).     TimeUnit timeUnit = randomFrom(TimeUnit.MILLISECONDS, TimeUnit.SECONDS, TimeUnit.MINUTES, TimeUnit.HOURS).     clusterSettings.applySettings(Settings.builder().put(RecoverySettings.INDICES_RECOVERY_INTERNAL_LONG_ACTION_TIMEOUT_SETTING.getKey(), duration, timeUnit).build()).     assertEquals(new TimeValue(duration, timeUnit), recoverySettings.internalActionLongTimeout()). }
