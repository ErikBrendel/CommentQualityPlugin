commented;modifiers;parameterAmount;loc;comment;code
false;private;0;29;;private Node startNode() throws NodeValidationException {     final Path tempDir = createTempDir().     String nodeName = "node_s_0".     Settings settings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName("single-node-cluster", random().nextLong())).put(Environment.PATH_HOME_SETTING.getKey(), tempDir).put(Environment.PATH_REPO_SETTING.getKey(), tempDir.resolve("repo")).put(Environment.PATH_SHARED_DATA_SETTING.getKey(), createTempDir().getParent()).put(Node.NODE_NAME_SETTING.getKey(), nodeName).put(ScriptService.SCRIPT_MAX_COMPILATIONS_RATE.getKey(), "1000/1m").put(EsExecutors.PROCESSORS_SETTING.getKey(), // limit the number of threads created     1).put("transport.type", getTestTransportType()).put(Node.NODE_DATA_SETTING.getKey(), true).put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), random().nextLong()).put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), "1b").put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), "1b").put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), "1b").put(HierarchyCircuitBreakerService.USE_REAL_MEMORY_USAGE_SETTING.getKey(), false).putList(// empty list disables a port scan for other nodes     DISCOVERY_SEED_HOSTS_SETTING.getKey()).putList(INITIAL_MASTER_NODES_SETTING.getKey(), nodeName).build().     Node node = new MockNode(settings, Arrays.asList(MockNioTransportPlugin.class, MockHttpTransport.TestPlugin.class), true).     node.start().     return node. }
false;public;0;7;;public void testCloseEmptyIndicesService() throws Exception {     Node node = startNode().     IndicesService indicesService = node.injector().getInstance(IndicesService.class).     assertEquals(1, indicesService.indicesRefCount.refCount()).     node.close().     assertEquals(0, indicesService.indicesRefCount.refCount()). }
false;public;0;13;;public void testCloseNonEmptyIndicesService() throws Exception {     Node node = startNode().     IndicesService indicesService = node.injector().getInstance(IndicesService.class).     assertEquals(1, indicesService.indicesRefCount.refCount()).     assertAcked(node.client().admin().indices().prepareCreate("test").setSettings(Settings.builder().put(SETTING_NUMBER_OF_SHARDS, 1).put(SETTING_NUMBER_OF_REPLICAS, 0))).     assertEquals(2, indicesService.indicesRefCount.refCount()).     node.close().     assertEquals(0, indicesService.indicesRefCount.refCount()). }
false;public;0;20;;public void testCloseWhileOngoingRequest() throws Exception {     Node node = startNode().     IndicesService indicesService = node.injector().getInstance(IndicesService.class).     assertEquals(1, indicesService.indicesRefCount.refCount()).     assertAcked(node.client().admin().indices().prepareCreate("test").setSettings(Settings.builder().put(SETTING_NUMBER_OF_SHARDS, 1).put(SETTING_NUMBER_OF_REPLICAS, 0))).     assertEquals(2, indicesService.indicesRefCount.refCount()).     IndexService indexService = indicesService.iterator().next().     IndexShard shard = indexService.getShard(0).     shard.store().incRef().     node.close().     assertEquals(1, indicesService.indicesRefCount.refCount()).     shard.store().decRef().     assertEquals(0, indicesService.indicesRefCount.refCount()). }
