commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public void testValidOrdinals() {     assertThat(SortBy.SCORE.ordinal(), equalTo(0)).     assertThat(SortBy.FREQUENCY.ordinal(), equalTo(1)). }
false;public;0;17;;@Override public void testFromString() {     assertThat(SortBy.resolve("score"), equalTo(SortBy.SCORE)).     assertThat(SortBy.resolve("frequency"), equalTo(SortBy.FREQUENCY)).     final String doesntExist = "doesnt_exist".     try {         SortBy.resolve(doesntExist).         fail("SortBy should not have an element " + doesntExist).     } catch (IllegalArgumentException e) {     }     try {         SortBy.resolve(null).         fail("SortBy.resolve on a null value should throw an exception.").     } catch (NullPointerException e) {         assertThat(e.getMessage(), equalTo("Input string is null")).     } }
false;public;0;5;;@Override public void testWriteTo() throws IOException {     assertWriteToStream(SortBy.SCORE, 0).     assertWriteToStream(SortBy.FREQUENCY, 1). }
false;public;0;5;;@Override public void testReadFrom() throws IOException {     assertReadFromStream(0, SortBy.SCORE).     assertReadFromStream(1, SortBy.FREQUENCY). }
