commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;15;;public static RegexOptions randomRegexOptions() {     final RegexOptions.Builder builder = RegexOptions.builder().     maybeSet(builder::setMaxDeterminizedStates, randomIntBetween(1, 1000)).     StringBuilder sb = new StringBuilder().     for (RegexpFlag regexpFlag : RegexpFlag.values()) {         if (randomBoolean()) {             if (sb.length() != 0) {                 sb.append("|").             }             sb.append(regexpFlag.name()).         }     }     maybeSet(builder::setFlags, sb.toString()).     return builder.build(). }
false;protected;1;5;;protected RegexOptions createMutation(RegexOptions original) throws IOException {     final RegexOptions.Builder builder = RegexOptions.builder().     builder.setMaxDeterminizedStates(randomValueOtherThan(original.getMaxDeterminizedStates(), () -> randomIntBetween(1, 10))).     return builder.build(). }
true;public;0;10;/**  * Test serialization and deserialization  */ ;/**  * Test serialization and deserialization  */ public void testSerialization() throws IOException {     for (int i = 0. i < NUMBER_OF_RUNS. i++) {         RegexOptions testOptions = randomRegexOptions().         RegexOptions deserializedModel = copyWriteable(testOptions, new NamedWriteableRegistry(Collections.emptyList()), RegexOptions::new).         assertEquals(testOptions, deserializedModel).         assertEquals(testOptions.hashCode(), deserializedModel.hashCode()).         assertNotSame(testOptions, deserializedModel).     } }
false;public;0;9;;public void testIllegalArgument() {     final RegexOptions.Builder builder = RegexOptions.builder().     try {         builder.setMaxDeterminizedStates(-randomIntBetween(1, Integer.MAX_VALUE)).         fail("max determinized state must be positive").     } catch (IllegalArgumentException e) {         assertEquals(e.getMessage(), "maxDeterminizedStates must not be negative").     } }
