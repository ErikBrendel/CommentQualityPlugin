commented;modifiers;parameterAmount;loc;comment;code
false;private;3;28;;private ShardRouting genShardRouting(String index, int shardId, boolean primary) {     ShardRoutingState state.     int stateRandomizer = RandomizedContext.current().getRandom().nextInt(40).     if (stateRandomizer > 5) {         state = ShardRoutingState.STARTED.     } else if (stateRandomizer > 3) {         state = ShardRoutingState.RELOCATING.     } else {         state = ShardRoutingState.INITIALIZING.     }     switch(state) {         case STARTED:             return TestShardRouting.newShardRouting(index, shardId, "node_" + Integer.toString(node_id++), null, primary, ShardRoutingState.STARTED).         case INITIALIZING:             return TestShardRouting.newShardRouting(index, shardId, "node_" + Integer.toString(node_id++), null, primary, ShardRoutingState.INITIALIZING).         case RELOCATING:             return TestShardRouting.newShardRouting(index, shardId, "node_" + Integer.toString(node_id++), "node_" + Integer.toString(node_id++), primary, ShardRoutingState.RELOCATING).         default:             throw new ElasticsearchException("Unknown state: " + state.name()).     } }
false;public;3;14;;public IndexShardRoutingTable genShardRoutingTable(IndexMetaData indexMetaData, int shardId, ShardCounter counter) {     final String index = indexMetaData.getIndex().getName().     IndexShardRoutingTable.Builder builder = new IndexShardRoutingTable.Builder(new ShardId(index, "_na_", shardId)).     ShardRouting shardRouting = genShardRouting(index, shardId, true).     counter.update(shardRouting).     builder.addShard(shardRouting).     for (int replicas = indexMetaData.getNumberOfReplicas(). replicas > 0. replicas--) {         shardRouting = genShardRouting(index, shardId, false).         counter.update(shardRouting).         builder.addShard(shardRouting).     }     return builder.build(). }
false;public;2;7;;public IndexRoutingTable genIndexRoutingTable(IndexMetaData indexMetaData, ShardCounter counter) {     IndexRoutingTable.Builder builder = IndexRoutingTable.builder(indexMetaData.getIndex()).     for (int shard = 0. shard < indexMetaData.getNumberOfShards(). shard++) {         builder.addIndexShard(genShardRoutingTable(indexMetaData, shard, counter)).     }     return builder.build(). }
false;public;0;13;;public ClusterHealthStatus status() {     if (primaryInactive > 0) {         if (inactivePrimaryCausesRed) {             return ClusterHealthStatus.RED.         } else {             return ClusterHealthStatus.YELLOW.         }     }     if (unassigned > 0 || initializing > 0) {         return ClusterHealthStatus.YELLOW.     }     return ClusterHealthStatus.GREEN. }
false;public;1;24;;public void update(ShardRouting shardRouting) {     if (shardRouting.active()) {         active++.         if (shardRouting.primary()) {             primaryActive++.         }         if (shardRouting.relocating()) {             relocating++.         }         return.     }     if (shardRouting.primary()) {         primaryInactive++.         if (inactivePrimaryCausesRed == false) {             inactivePrimaryCausesRed = getInactivePrimaryHealth(shardRouting) == ClusterHealthStatus.RED.         }     }     if (shardRouting.initializing()) {         initializing++.     } else {         unassigned++.     } }
