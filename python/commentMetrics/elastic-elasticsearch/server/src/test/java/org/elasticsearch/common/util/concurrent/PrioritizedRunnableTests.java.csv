commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;@Override public void run() { }
true;public;0;13;// test unit conversion with a controlled clock ;// test unit conversion with a controlled clock public void testGetAgeInMillis() throws Exception {     AtomicLong time = new AtomicLong().     PrioritizedRunnable runnable = new PrioritizedRunnable(Priority.NORMAL, time::get) {          @Override         public void run() {         }     }.     assertEquals(0, runnable.getAgeInMillis()).     int milliseconds = randomIntBetween(1, 256).     time.addAndGet(TimeUnit.NANOSECONDS.convert(milliseconds, TimeUnit.MILLISECONDS)).     assertEquals(milliseconds, runnable.getAgeInMillis()). }
false;public;0;3;;@Override public void run() { }
true;public;0;13;// test age advances with System#nanoTime ;// test age advances with System#nanoTime public void testGetAgeInMillisWithRealClock() throws InterruptedException {     PrioritizedRunnable runnable = new PrioritizedRunnable(Priority.NORMAL) {          @Override         public void run() {         }     }.     long elapsed = spinForAtLeastOneMillisecond().     // creation happened before start, so age will be at least as     // large as elapsed     assertThat(runnable.getAgeInMillis(), greaterThanOrEqualTo(TimeUnit.MILLISECONDS.convert(elapsed, TimeUnit.NANOSECONDS))). }
