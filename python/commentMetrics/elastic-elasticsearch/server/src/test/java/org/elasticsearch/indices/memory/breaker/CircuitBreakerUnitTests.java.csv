commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static long pctBytes(String percentString) {     return Settings.EMPTY.getAsMemory("", percentString).getBytes(). }
false;public;0;11;;public void testBreakerSettingsValidationWithValidSettings() {     // parent: {:limit 70}, fd: {:limit 50}, request: {:limit 20}     BreakerSettings fd = new BreakerSettings(CircuitBreaker.FIELDDATA, pctBytes("50%"), 1.0).     BreakerSettings request = new BreakerSettings(CircuitBreaker.REQUEST, pctBytes("20%"), 1.0).     HierarchyCircuitBreakerService.validateSettings(new BreakerSettings[] { fd, request }).     // parent: {:limit 70}, fd: {:limit 40}, request: {:limit 30}     fd = new BreakerSettings(CircuitBreaker.FIELDDATA, pctBytes("40%"), 1.0).     request = new BreakerSettings(CircuitBreaker.REQUEST, pctBytes("30%"), 1.0).     HierarchyCircuitBreakerService.validateSettings(new BreakerSettings[] { fd, request }). }
false;public;0;12;;public void testBreakerSettingsValidationNegativeOverhead() {     // parent: {:limit 70}, fd: {:limit 50}, request: {:limit 20}     BreakerSettings fd = new BreakerSettings(CircuitBreaker.FIELDDATA, pctBytes("50%"), -0.1).     BreakerSettings request = new BreakerSettings(CircuitBreaker.REQUEST, pctBytes("20%"), 1.0).     try {         HierarchyCircuitBreakerService.validateSettings(new BreakerSettings[] { fd, request }).         fail("settings are invalid but validate settings did not throw an exception").     } catch (Exception e) {         assertThat("Incorrect message: " + e.getMessage(), e.getMessage().contains("must be non-negative"), equalTo(true)).     } }
false;public;0;12;;public void testRegisterCustomBreaker() throws Exception {     CircuitBreakerService service = new HierarchyCircuitBreakerService(Settings.EMPTY, new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)).     String customName = "custom".     BreakerSettings settings = new BreakerSettings(customName, 20, 1.0).     service.registerBreaker(settings).     CircuitBreaker breaker = service.getBreaker(customName).     assertThat(breaker, notNullValue()).     assertThat(breaker, instanceOf(CircuitBreaker.class)).     assertThat(breaker.getName(), is(customName)). }
