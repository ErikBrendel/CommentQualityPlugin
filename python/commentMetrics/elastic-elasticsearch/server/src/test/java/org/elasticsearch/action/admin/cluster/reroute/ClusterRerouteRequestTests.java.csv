commented;modifiers;parameterAmount;loc;comment;code
false;private;0;11;;private ClusterRerouteRequest randomRequest() {     ClusterRerouteRequest request = new ClusterRerouteRequest().     int commands = between(0, 10).     for (int i = 0. i < commands. i++) {         request.add(randomFrom(RANDOM_COMMAND_GENERATORS).get()).     }     request.dryRun(randomBoolean()).     request.explain(randomBoolean()).     request.setRetryFailed(randomBoolean()).     return request. }
false;public;0;52;;public void testEqualsAndHashCode() {     for (int round = 0. round < ROUNDS. round++) {         ClusterRerouteRequest request = randomRequest().         assertEquals(request, request).         assertEquals(request.hashCode(), request.hashCode()).         ClusterRerouteRequest copy = new ClusterRerouteRequest().add(request.getCommands().commands().toArray(new AllocationCommand[0])).         copy.dryRun(request.dryRun()).explain(request.explain()).timeout(request.timeout()).setRetryFailed(request.isRetryFailed()).         copy.masterNodeTimeout(request.masterNodeTimeout()).         assertEquals(request, copy).         // Commutative         assertEquals(copy, request).         assertEquals(request.hashCode(), copy.hashCode()).         // Changing dryRun makes requests not equal         copy.dryRun(!copy.dryRun()).         assertNotEquals(request, copy).         assertNotEquals(request.hashCode(), copy.hashCode()).         copy.dryRun(!copy.dryRun()).         assertEquals(request, copy).         assertEquals(request.hashCode(), copy.hashCode()).         // Changing explain makes requests not equal         copy.explain(!copy.explain()).         assertNotEquals(request, copy).         assertNotEquals(request.hashCode(), copy.hashCode()).         copy.explain(!copy.explain()).         assertEquals(request, copy).         assertEquals(request.hashCode(), copy.hashCode()).         // Changing timeout makes requests not equal         copy.timeout(timeValueMillis(request.timeout().millis() + 1)).         assertNotEquals(request, copy).         assertNotEquals(request.hashCode(), copy.hashCode()).         copy.timeout(request.timeout()).         assertEquals(request, copy).         assertEquals(request.hashCode(), copy.hashCode()).         // Changing masterNodeTime makes requests not equal         copy.masterNodeTimeout(timeValueMillis(request.masterNodeTimeout().millis() + 1)).         assertNotEquals(request, copy).         assertNotEquals(request.hashCode(), copy.hashCode()).         copy.masterNodeTimeout(request.masterNodeTimeout()).         assertEquals(request, copy).         assertEquals(request.hashCode(), copy.hashCode()).         // Changing commands makes requests not equal         copy.add(randomFrom(RANDOM_COMMAND_GENERATORS).get()).         assertNotEquals(request, copy).     // Can't check hashCode because we can't be sure that changing commands changes the hashCode. It usually does but might not.     } }
false;public;0;9;;public void testSerialization() throws IOException {     for (int round = 0. round < ROUNDS. round++) {         ClusterRerouteRequest request = randomRequest().         ClusterRerouteRequest copy = roundTripThroughBytes(request).         assertEquals(request, copy).         assertEquals(request.hashCode(), copy.hashCode()).         assertNotSame(request, copy).     } }
false;public;0;9;;public void testParsing() throws IOException {     for (int round = 0. round < ROUNDS. round++) {         ClusterRerouteRequest request = randomRequest().         ClusterRerouteRequest copy = roundTripThroughRestRequest(request).         assertEquals(request, copy).         assertEquals(request.hashCode(), copy.hashCode()).         assertNotSame(request, copy).     } }
false;private;1;10;;private ClusterRerouteRequest roundTripThroughBytes(ClusterRerouteRequest original) throws IOException {     try (BytesStreamOutput output = new BytesStreamOutput()) {         original.writeTo(output).         try (StreamInput in = new NamedWriteableAwareStreamInput(output.bytes().streamInput(), namedWriteableRegistry)) {             ClusterRerouteRequest copy = new ClusterRerouteRequest().             copy.readFrom(in).             return copy.         }     } }
false;private;1;4;;private ClusterRerouteRequest roundTripThroughRestRequest(ClusterRerouteRequest original) throws IOException {     RestRequest restRequest = toRestRequest(original).     return RestClusterRerouteAction.createRequest(restRequest). }
false;private;1;37;;private RestRequest toRestRequest(ClusterRerouteRequest original) throws IOException {     Map<String, String> params = new HashMap<>().     XContentBuilder builder = XContentFactory.contentBuilder(randomFrom(XContentType.values())).     boolean hasBody = false.     if (randomBoolean()) {         builder.prettyPrint().     }     builder.startObject().     if (randomBoolean()) {         params.put("dry_run", Boolean.toString(original.dryRun())).     } else {         hasBody = true.         builder.field("dry_run", original.dryRun()).     }     params.put("explain", Boolean.toString(original.explain())).     if (false == original.timeout().equals(AcknowledgedRequest.DEFAULT_ACK_TIMEOUT) || randomBoolean()) {         params.put("timeout", original.timeout().toString()).     }     if (original.isRetryFailed() || randomBoolean()) {         params.put("retry_failed", Boolean.toString(original.isRetryFailed())).     }     if (false == original.masterNodeTimeout().equals(MasterNodeRequest.DEFAULT_MASTER_NODE_TIMEOUT) || randomBoolean()) {         params.put("master_timeout", original.masterNodeTimeout().toString()).     }     if (original.getCommands() != null) {         hasBody = true.         original.getCommands().toXContent(builder, ToXContent.EMPTY_PARAMS).     }     builder.endObject().     FakeRestRequest.Builder requestBuilder = new FakeRestRequest.Builder(xContentRegistry()).     requestBuilder.withParams(params).     if (hasBody) {         requestBuilder.withContent(BytesReference.bytes(builder), builder.contentType()).     }     return requestBuilder.build(). }
false;protected;0;4;;@Override protected NamedXContentRegistry xContentRegistry() {     return new NamedXContentRegistry(NetworkModule.getNamedXContents()). }
