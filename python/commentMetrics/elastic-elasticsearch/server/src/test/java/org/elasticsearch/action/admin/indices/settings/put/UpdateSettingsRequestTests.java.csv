commented;modifiers;parameterAmount;loc;comment;code
false;public;2;8;;public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.startObject("settings").     this.settings().toXContent(builder, params).     builder.endObject().     builder.endObject().     return builder. }
false;protected;0;18;;@Override protected UpdateSettingsRequest createTestInstance() {     UpdateSettingsRequest testRequest = UpdateSettingsRequestStreamableTests.createTestItem().     if (enclosedSettings) {         UpdateSettingsRequest requestWithEnclosingSettings = new UpdateSettingsRequest(testRequest.settings()) {              public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {                 builder.startObject().                 builder.startObject("settings").                 this.settings().toXContent(builder, params).                 builder.endObject().                 builder.endObject().                 return builder.             }         }.         return requestWithEnclosingSettings.     }     return testRequest. }
false;protected;1;4;;@Override protected UpdateSettingsRequest doParseInstance(XContentParser parser) throws IOException {     return new UpdateSettingsRequest().fromXContent(parser). }
false;protected;0;6;;@Override protected boolean supportsUnknownFields() {     // then all other top-level elements will be ignored during the parsing     return enclosedSettings. }
false;protected;0;7;;@Override protected Predicate<String> getRandomFieldsExcludeFilter() {     if (enclosedSettings) {         return field -> field.startsWith("settings").     }     return field -> true. }
false;protected;2;7;;@Override protected void assertEqualInstances(UpdateSettingsRequest expectedInstance, UpdateSettingsRequest newInstance) {     // here only the settings should be tested, as this test covers explicitly only the XContent parsing     // the rest of the request fields are tested by the StreamableTests     super.assertEqualInstances(new UpdateSettingsRequest(expectedInstance.settings()), new UpdateSettingsRequest(newInstance.settings())). }
false;protected;0;6;;@Override protected boolean assertToXContentEquivalence() {     // parsed.toXContent is not equivalent to the test instance     return !enclosedSettings. }
