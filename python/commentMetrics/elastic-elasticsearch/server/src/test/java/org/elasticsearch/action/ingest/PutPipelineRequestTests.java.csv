commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;public void testSerializationWithXContent() throws IOException {     PutPipelineRequest request = new PutPipelineRequest("1", new BytesArray("{}".getBytes(StandardCharsets.UTF_8)), XContentType.JSON).     assertEquals(XContentType.JSON, request.getXContentType()).     BytesStreamOutput output = new BytesStreamOutput().     request.writeTo(output).     StreamInput in = StreamInput.wrap(output.bytes().toBytesRef().bytes).     PutPipelineRequest serialized = new PutPipelineRequest().     serialized.readFrom(in).     assertEquals(XContentType.JSON, serialized.getXContentType()).     assertEquals("{}", serialized.getSource().utf8ToString()). }
false;public;0;20;;public void testToXContent() throws IOException {     XContentType xContentType = randomFrom(XContentType.values()).     XContentBuilder pipelineBuilder = XContentBuilder.builder(xContentType.xContent()).     pipelineBuilder.startObject().field(Pipeline.DESCRIPTION_KEY, "some random set of processors").     pipelineBuilder.startArray(Pipeline.PROCESSORS_KEY).     // Start first processor     pipelineBuilder.startObject().     pipelineBuilder.startObject("set").     pipelineBuilder.field("field", "foo").     pipelineBuilder.field("value", "bar").     pipelineBuilder.endObject().     pipelineBuilder.endObject().     // End first processor     pipelineBuilder.endArray().     pipelineBuilder.endObject().     PutPipelineRequest request = new PutPipelineRequest("1", BytesReference.bytes(pipelineBuilder), xContentType).     XContentBuilder requestBuilder = XContentBuilder.builder(xContentType.xContent()).     BytesReference actualRequestBody = BytesReference.bytes(request.toXContent(requestBuilder, ToXContent.EMPTY_PARAMS)).     assertEquals(BytesReference.bytes(pipelineBuilder), actualRequestBody). }
