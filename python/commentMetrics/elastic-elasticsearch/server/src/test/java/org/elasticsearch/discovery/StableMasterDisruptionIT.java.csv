commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     return Collections.singletonList(TestPlugin.class). }
true;public;0;37;/**  * Test that no split brain occurs under partial network partition. See https://github.com/elastic/elasticsearch/issues/2488  */ ;/**  * Test that no split brain occurs under partial network partition. See https://github.com/elastic/elasticsearch/issues/2488  */ public void testFailWithMinimumMasterNodesConfigured() throws Exception {     List<String> nodes = internalCluster().startNodes(3).     ensureStableCluster(3).     // Figure out what is the elected master node     final String masterNode = internalCluster().getMasterName().     logger.info("---> legit elected master node={}", masterNode).     // Pick a node that isn't the elected master.     Set<String> nonMasters = new HashSet<>(nodes).     nonMasters.remove(masterNode).     final String unluckyNode = randomFrom(nonMasters.toArray(Strings.EMPTY_ARRAY)).     // Simulate a network issue between the unlucky node and elected master node in both directions.     NetworkDisruption networkDisconnect = new NetworkDisruption(new NetworkDisruption.TwoPartitions(masterNode, unluckyNode), new NetworkDisruption.NetworkDisconnect()).     setDisruptionScheme(networkDisconnect).     networkDisconnect.startDisrupting().     // Wait until elected master has removed that the unlucky node...     ensureStableCluster(2, masterNode).     // The unlucky node must report *no* master node, since it can't connect to master and in fact it should     // continuously ping until network failures have been resolved. However     // It may a take a bit before the node detects it has been cut off from the elected master     ensureNoMaster(unluckyNode).     networkDisconnect.stopDisrupting().     // Wait until the master node sees all 3 nodes again.     ensureStableCluster(3).     // The elected master shouldn't have changed, since the unlucky node never could have elected itself as master     assertThat(internalCluster().getMasterName(), equalTo(masterNode)). }
false;private;1;4;;private void ensureNoMaster(String node) throws Exception {     assertBusy(() -> assertNull(client(node).admin().cluster().state(new ClusterStateRequest().local(true)).get().getState().nodes().getMasterNode())). }
true;public;0;3;/**  * Verify that nodes fault detection detects a disconnected node after master reelection  */ ;/**  * Verify that nodes fault detection detects a disconnected node after master reelection  */ public void testFollowerCheckerDetectsDisconnectedNodeAfterMasterReelection() throws Exception {     testFollowerCheckerAfterMasterReelection(new NetworkDisconnect(), Settings.EMPTY). }
true;public;0;7;/**  * Verify that nodes fault detection detects an unresponsive node after master reelection  */ ;/**  * Verify that nodes fault detection detects an unresponsive node after master reelection  */ public void testFollowerCheckerDetectsUnresponsiveNodeAfterMasterReelection() throws Exception {     testFollowerCheckerAfterMasterReelection(new NetworkUnresponsive(), Settings.builder().put(LeaderChecker.LEADER_CHECK_TIMEOUT_SETTING.getKey(), "1s").put(LeaderChecker.LEADER_CHECK_RETRY_COUNT_SETTING.getKey(), "4").put(FollowersChecker.FOLLOWER_CHECK_TIMEOUT_SETTING.getKey(), "1s").put(FollowersChecker.FOLLOWER_CHECK_RETRY_COUNT_SETTING.getKey(), 1).build()). }
false;private;2;30;;private void testFollowerCheckerAfterMasterReelection(NetworkLinkDisruptionType networkLinkDisruptionType, Settings settings) throws Exception {     internalCluster().startNodes(4, settings).     ensureStableCluster(4).     logger.info("--> stopping current master").     internalCluster().stopCurrentMasterNode().     ensureStableCluster(3).     final String master = internalCluster().getMasterName().     final List<String> nonMasters = Arrays.stream(internalCluster().getNodeNames()).filter(n -> master.equals(n) == false).collect(Collectors.toList()).     final String isolatedNode = randomFrom(nonMasters).     final String otherNode = nonMasters.get(nonMasters.get(0).equals(isolatedNode) ? 1 : 0).     logger.info("--> isolating [{}]", isolatedNode).     final NetworkDisruption networkDisruption = new NetworkDisruption(new TwoPartitions(singleton(isolatedNode), Sets.newHashSet(master, otherNode)), networkLinkDisruptionType).     setDisruptionScheme(networkDisruption).     networkDisruption.startDisrupting().     logger.info("--> waiting for master to remove it").     ensureStableCluster(2, master).     ensureNoMaster(isolatedNode).     networkDisruption.stopDisrupting().     ensureStableCluster(3). }
