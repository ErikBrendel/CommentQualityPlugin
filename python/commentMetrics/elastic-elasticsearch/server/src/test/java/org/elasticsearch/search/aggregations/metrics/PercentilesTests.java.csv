commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;30;;@Override protected PercentilesAggregationBuilder createTestAggregatorBuilder() {     PercentilesAggregationBuilder factory = new PercentilesAggregationBuilder(randomAlphaOfLengthBetween(1, 20)).     if (randomBoolean()) {         factory.keyed(randomBoolean()).     }     if (randomBoolean()) {         int percentsSize = randomIntBetween(1, 20).         double[] percents = new double[percentsSize].         for (int i = 0. i < percentsSize. i++) {             percents[i] = randomDouble() * 100.         }         factory.percentiles(percents).     }     if (randomBoolean()) {         factory.numberOfSignificantValueDigits(randomIntBetween(0, 5)).     }     if (randomBoolean()) {         factory.compression(randomIntBetween(1, 50000)).     }     String field = randomNumericField().     randomFieldOrScript(factory, field).     if (randomBoolean()) {         factory.missing("MISSING").     }     if (randomBoolean()) {         factory.format("###.00").     }     return factory. }
false;public;0;8;;public void testNullOrEmptyPercentilesThrows() throws IOException {     PercentilesAggregationBuilder builder = new PercentilesAggregationBuilder("testAgg").     IllegalArgumentException ex = expectThrows(IllegalArgumentException.class, () -> builder.percentiles(null)).     assertEquals("[percents] must not be null: [testAgg]", ex.getMessage()).     ex = expectThrows(IllegalArgumentException.class, () -> builder.percentiles(new double[0])).     assertEquals("[percents] must not be empty: [testAgg]", ex.getMessage()). }
false;public;0;20;;public void testExceptionMultipleMethods() throws IOException {     final String illegalAgg = "{\n" + "       \"percentiles\": {\n" + "           \"field\": \"load_time\",\n" + "           \"percents\": [99],\n" + "           \"tdigest\": {\n" + "               \"compression\": 200\n" + "           },\n" + "           \"hdr\": {\n" + "               \"number_of_significant_value_digits\": 3\n" + "           }\n" + "   }\n" + "}".     XContentParser parser = createParser(JsonXContent.jsonXContent, illegalAgg).     assertEquals(XContentParser.Token.START_OBJECT, parser.nextToken()).     assertEquals(XContentParser.Token.FIELD_NAME, parser.nextToken()).     XContentParseException e = expectThrows(XContentParseException.class, () -> PercentilesAggregationBuilder.parse("myPercentiles", parser)).     assertThat(e.getMessage(), containsString("[percentiles] failed to parse field [hdr]")). }
