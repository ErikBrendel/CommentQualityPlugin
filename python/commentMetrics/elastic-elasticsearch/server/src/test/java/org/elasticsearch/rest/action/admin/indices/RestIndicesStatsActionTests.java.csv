commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override public void setUp() throws Exception {     super.setUp().     UsageService usageService = new UsageService().     action = new RestIndicesStatsAction(Settings.EMPTY, new RestController(Collections.emptySet(), null, null, null, usageService)). }
false;public;0;10;;public void testUnrecognizedMetric() throws IOException {     final HashMap<String, String> params = new HashMap<>().     final String metric = randomAlphaOfLength(64).     params.put("metric", metric).     final RestRequest request = new FakeRestRequest.Builder(xContentRegistry()).withPath("/_stats").withParams(params).build().     final IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> action.prepareRequest(request, mock(NodeClient.class))).     assertThat(e, hasToString(containsString("request [/_stats] contains unrecognized metric: [" + metric + "]"))). }
false;public;0;13;;public void testUnrecognizedMetricDidYouMean() throws IOException {     final HashMap<String, String> params = new HashMap<>().     params.put("metric", "request_cache,fieldata,unrecognized").     final RestRequest request = new FakeRestRequest.Builder(xContentRegistry()).withPath("/_stats").withParams(params).build().     final IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> action.prepareRequest(request, mock(NodeClient.class))).     assertThat(e, hasToString(containsString("request [/_stats] contains unrecognized metrics: [fieldata] -> did you mean [fielddata]?, [unrecognized]"))). }
false;public;0;10;;public void testAllRequestWithOtherMetrics() throws IOException {     final HashMap<String, String> params = new HashMap<>().     final String metric = randomSubsetOf(1, RestIndicesStatsAction.METRICS.keySet()).get(0).     params.put("metric", "_all," + metric).     final RestRequest request = new FakeRestRequest.Builder(xContentRegistry()).withPath("/_stats").withParams(params).build().     final IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> action.prepareRequest(request, mock(NodeClient.class))).     assertThat(e, hasToString(containsString("request [/_stats] contains _all and individual metrics [_all," + metric + "]"))). }
