commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;public void testPrimaryTermOutOfRange() {     final long primaryTerm = randomLongBetween(Long.MIN_VALUE, 0).     final IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new RetentionLeases(primaryTerm, randomNonNegativeLong(), Collections.emptyList())).     assertThat(e, hasToString(containsString("primary term must be positive but was [" + primaryTerm + "]"))). }
false;public;0;7;;public void testVersionOutOfRange() {     final long version = randomLongBetween(Long.MIN_VALUE, -1).     final IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new RetentionLeases(randomLongBetween(1, Long.MAX_VALUE), version, Collections.emptyList())).     assertThat(e, hasToString(containsString("version must be non-negative but was [" + version + "]"))). }
false;public;0;8;;public void testSupersedesByPrimaryTerm() {     final long lowerPrimaryTerm = randomLongBetween(1, Long.MAX_VALUE).     final RetentionLeases left = new RetentionLeases(lowerPrimaryTerm, randomLongBetween(1, Long.MAX_VALUE), Collections.emptyList()).     final long higherPrimaryTerm = randomLongBetween(lowerPrimaryTerm + 1, Long.MAX_VALUE).     final RetentionLeases right = new RetentionLeases(higherPrimaryTerm, randomLongBetween(1, Long.MAX_VALUE), Collections.emptyList()).     assertTrue(right.supersedes(left)).     assertFalse(left.supersedes(right)). }
false;public;0;9;;public void testSupersedesByVersion() {     final long primaryTerm = randomLongBetween(1, Long.MAX_VALUE).     final long lowerVersion = randomLongBetween(1, Long.MAX_VALUE).     final long higherVersion = randomLongBetween(lowerVersion + 1, Long.MAX_VALUE).     final RetentionLeases left = new RetentionLeases(primaryTerm, lowerVersion, Collections.emptyList()).     final RetentionLeases right = new RetentionLeases(primaryTerm, higherVersion, Collections.emptyList()).     assertTrue(right.supersedes(left)).     assertFalse(left.supersedes(right)). }
false;public;0;11;;public void testRetentionLeasesRejectsDuplicates() {     final RetentionLeases retentionLeases = randomRetentionLeases(false).     final RetentionLease retentionLease = randomFrom(retentionLeases.leases()).     final IllegalStateException e = expectThrows(IllegalStateException.class, () -> new RetentionLeases(retentionLeases.primaryTerm(), retentionLeases.version(), Stream.concat(retentionLeases.leases().stream(), Stream.of(retentionLease)).collect(Collectors.toList()))).     assertThat(e, hasToString(containsString("duplicate retention lease ID [" + retentionLease.id() + "]"))). }
false;public;0;8;;public void testLeasesPreservesIterationOrder() {     final RetentionLeases retentionLeases = randomRetentionLeases(true).     if (retentionLeases.leases().isEmpty()) {         assertThat(retentionLeases.leases(), empty()).     } else {         assertThat(retentionLeases.leases(), contains(retentionLeases.leases().toArray(new RetentionLease[0]))).     } }
false;public;0;6;;public void testRetentionLeasesMetaDataStateFormat() throws IOException {     final Path path = createTempDir().     final RetentionLeases retentionLeases = randomRetentionLeases(true).     RetentionLeases.FORMAT.writeAndCleanup(retentionLeases, path).     assertThat(RetentionLeases.FORMAT.loadLatestState(logger, NamedXContentRegistry.EMPTY, path), equalTo(retentionLeases)). }
false;private;1;15;;private RetentionLeases randomRetentionLeases(boolean allowEmpty) {     final long primaryTerm = randomNonNegativeLong().     final long version = randomNonNegativeLong().     final int length = randomIntBetween(allowEmpty ? 0 : 1, 8).     final List<RetentionLease> leases = new ArrayList<>(length).     for (int i = 0. i < length. i++) {         final String id = randomAlphaOfLength(8).         final long retainingSequenceNumber = randomNonNegativeLong().         final long timestamp = randomNonNegativeLong().         final String source = randomAlphaOfLength(8).         final RetentionLease retentionLease = new RetentionLease(id, retainingSequenceNumber, timestamp, source).         leases.add(retentionLease).     }     return new RetentionLeases(primaryTerm, version, leases). }
