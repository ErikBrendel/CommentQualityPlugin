commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Override public void setUp() throws Exception {     super.setUp().     hasReduceScript = randomBoolean().     // we want the same value types (also for nested lists, maps) for all random aggregations     int levels = randomIntBetween(1, 3).     valueTypes = new Supplier[levels].     for (int i = 0. i < levels. i++) {         if (i < levels - 1) {             valueTypes[i] = randomFrom(nestedValueSuppliers).         } else {             // the last one needs to be a leaf value, not map or list             valueTypes[i] = randomFrom(leafValueSuppliers).         }     } }
false;protected;3;14;;@Override protected InternalScriptedMetric createTestInstance(String name, List<PipelineAggregator> pipelineAggregators, Map<String, Object> metaData) {     Map<String, Object> params = new HashMap<>().     if (randomBoolean()) {         params.put(randomAlphaOfLength(5), randomAlphaOfLength(5)).     }     Script reduceScript = null.     if (hasReduceScript) {         reduceScript = new Script(ScriptType.INLINE, MockScriptEngine.NAME, REDUCE_SCRIPT_NAME, params).     }     Object randomValue = randomValue(valueTypes, 0).     return new InternalScriptedMetric(name, randomValue, reduceScript, pipelineAggregators, metaData). }
false;private,static;2;18;;@SuppressWarnings("unchecked") private static Object randomValue(Supplier<Object>[] valueTypes, int level) {     Object value = valueTypes[level].get().     if (value instanceof Map) {         int elements = randomIntBetween(1, 5).         Map<String, Object> map = (Map<String, Object>) value.         for (int i = 0. i < elements. i++) {             map.put(randomAlphaOfLength(5), randomValue(valueTypes, level + 1)).         }     } else if (value instanceof List) {         int elements = randomIntBetween(1, 5).         List<Object> list = (List<Object>) value.         for (int i = 0. i < elements. i++) {             list.add(randomValue(valueTypes, level + 1)).         }     }     return value. }
true;protected;0;10;/**  * Mock of the script service. The script that is run looks at the  * "states" context variable visible when executing the script and simply returns the count.  * This should be equal to the number of input InternalScriptedMetrics that are reduced  * in total.  */ ;/**  * Mock of the script service. The script that is run looks at the  * "states" context variable visible when executing the script and simply returns the count.  * This should be equal to the number of input InternalScriptedMetrics that are reduced  * in total.  */ @Override protected ScriptService mockScriptService() {     // mock script always returns the size of the input aggs list as result     @SuppressWarnings("unchecked")     MockScriptEngine scriptEngine = new MockScriptEngine(MockScriptEngine.NAME, Collections.singletonMap(REDUCE_SCRIPT_NAME, script -> ((List<Object>) script.get("states")).size()), Collections.emptyMap()).     Map<String, ScriptEngine> engines = Collections.singletonMap(scriptEngine.getType(), scriptEngine).     return new ScriptService(Settings.EMPTY, engines, ScriptModule.CORE_CONTEXTS). }
false;protected;2;12;;@Override protected void assertReduced(InternalScriptedMetric reduced, List<InternalScriptedMetric> inputs) {     InternalScriptedMetric firstAgg = inputs.get(0).     assertEquals(firstAgg.getName(), reduced.getName()).     assertEquals(firstAgg.pipelineAggregators(), reduced.pipelineAggregators()).     assertEquals(firstAgg.getMetaData(), reduced.getMetaData()).     if (hasReduceScript) {         assertEquals(inputs.size(), reduced.aggregation()).     } else {         assertEquals(inputs.size(), ((List<Object>) reduced.aggregation()).size()).     } }
false;protected;0;4;;@Override protected Reader<InternalScriptedMetric> instanceReader() {     return InternalScriptedMetric::new. }
false;protected;2;7;;@Override protected void assertFromXContent(InternalScriptedMetric aggregation, ParsedAggregation parsedAggregation) {     assertTrue(parsedAggregation instanceof ParsedScriptedMetric).     ParsedScriptedMetric parsed = (ParsedScriptedMetric) parsedAggregation.     assertValues(aggregation.aggregation(), parsed.aggregation()). }
false;private,static;2;40;;private static void assertValues(Object expected, Object actual) {     if (expected instanceof Long) {         // longs that fit into the integer range are parsed back as integer         if (actual instanceof Integer) {             assertEquals(((Long) expected).intValue(), actual).         } else {             assertEquals(expected, actual).         }     } else if (expected instanceof Float) {         // based on the xContent type, floats are sometimes parsed back as doubles         if (actual instanceof Double) {             assertEquals(expected, ((Double) actual).floatValue()).         } else {             assertEquals(expected, actual).         }     } else if (expected instanceof GeoPoint) {         assertTrue(actual instanceof Map).         GeoPoint point = (GeoPoint) expected.         Map<String, Object> pointMap = (Map<String, Object>) actual.         assertEquals(point.getLat(), pointMap.get("lat")).         assertEquals(point.getLon(), pointMap.get("lon")).     } else if (expected instanceof Map) {         Map<String, Object> expectedMap = (Map<String, Object>) expected.         Map<String, Object> actualMap = (Map<String, Object>) actual.         assertEquals(expectedMap.size(), actualMap.size()).         for (String key : expectedMap.keySet()) {             assertValues(expectedMap.get(key), actualMap.get(key)).         }     } else if (expected instanceof List) {         List<Object> expectedList = (List<Object>) expected.         List<Object> actualList = (List<Object>) actual.         assertEquals(expectedList.size(), actualList.size()).         Iterator<Object> actualIterator = actualList.iterator().         for (Object element : expectedList) {             assertValues(element, actualIterator.next()).         }     } else {         assertEquals(expected, actual).     } }
false;protected;0;4;;@Override protected Predicate<String> excludePathsFromXContentInsertion() {     return path -> path.contains(CommonFields.VALUE.getPreferredName()). }
false;protected;1;45;;@Override protected InternalScriptedMetric mutateInstance(InternalScriptedMetric instance) throws IOException {     String name = instance.getName().     Object value = instance.aggregation().     Script reduceScript = instance.reduceScript.     List<PipelineAggregator> pipelineAggregators = instance.pipelineAggregators().     Map<String, Object> metaData = instance.getMetaData().     switch(between(0, 3)) {         case 0:             name += randomAlphaOfLength(5).             break.         case 1:             Object newValue = randomValue(valueTypes, 0).             while ((newValue == null && value == null) || (newValue != null && newValue.equals(value))) {                 int levels = randomIntBetween(1, 3).                 Supplier[] valueTypes = new Supplier[levels].                 for (int i = 0. i < levels. i++) {                     if (i < levels - 1) {                         valueTypes[i] = randomFrom(nestedValueSuppliers).                     } else {                         // the last one needs to be a leaf value, not map or                         // list                         valueTypes[i] = randomFrom(leafValueSuppliers).                     }                 }                 newValue = randomValue(valueTypes, 0).             }             value = newValue.             break.         case 2:             reduceScript = new Script(ScriptType.INLINE, MockScriptEngine.NAME, REDUCE_SCRIPT_NAME + "-mutated", Collections.emptyMap()).             break.         case 3:             if (metaData == null) {                 metaData = new HashMap<>(1).             } else {                 metaData = new HashMap<>(instance.getMetaData()).             }             metaData.put(randomAlphaOfLength(15), randomInt()).             break.         default:             throw new AssertionError("Illegal randomisation branch").     }     return new InternalScriptedMetric(name, value, reduceScript, pipelineAggregators, metaData). }
