commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;@Before public void setupFixture() {     deterministicTaskQueue = new DeterministicTaskQueue(Settings.builder().put(NODE_NAME_SETTING.getKey(), "node").build(), random()).     failedNodes = new HashSet<>().     Settings.Builder settingsBuilder = Settings.builder().     if (randomBoolean()) {         followerLagTimeout = TimeValue.timeValueMillis(randomLongBetween(2, 100000)).         settingsBuilder.put(CLUSTER_FOLLOWER_LAG_TIMEOUT_SETTING.getKey(), followerLagTimeout.millis() + "ms").     } else {         followerLagTimeout = CLUSTER_FOLLOWER_LAG_TIMEOUT_SETTING.get(Settings.EMPTY).     }     lagDetector = new LagDetector(settingsBuilder.build(), deterministicTaskQueue.getThreadPool(), failedNodes::add, () -> localNode).     localNode = CoordinationStateTests.createNode("local").     node1 = CoordinationStateTests.createNode("node1").     node2 = CoordinationStateTests.createNode("node2"). }
false;public;0;9;;public void testLagDetectorNotStartedIfNodeHasAlreadyAppliedVersion() {     lagDetector.setTrackedNodes(Collections.singletonList(node1)).     lagDetector.setAppliedVersion(node1, 1).     lagDetector.startLagDetector(1).     final long startTime = deterministicTaskQueue.getCurrentTimeMillis().     deterministicTaskQueue.runAllTasks().     assertThat("no lag detector started", deterministicTaskQueue.getCurrentTimeMillis(), is(startTime)).     assertThat(failedNodes, empty()). }
false;public;0;9;;public void testNoLagDetectedIfNodeAppliesVersionAfterLagDetectorStarted() {     lagDetector.setTrackedNodes(Collections.singletonList(node1)).     lagDetector.startLagDetector(1).     lagDetector.setAppliedVersion(node1, 1).     final long startTime = deterministicTaskQueue.getCurrentTimeMillis().     deterministicTaskQueue.runAllTasks().     assertThat("lag detector started", deterministicTaskQueue.getCurrentTimeMillis(), greaterThan(startTime)).     assertThat(failedNodes, empty()). }
false;public;0;8;;public void testNoLagDetectedIfNodeAppliesVersionJustBeforeTimeout() {     lagDetector.setTrackedNodes(Collections.singletonList(node1)).     lagDetector.startLagDetector(1).     deterministicTaskQueue.scheduleAt(deterministicTaskQueue.getCurrentTimeMillis() + followerLagTimeout.millis() - 1, () -> lagDetector.setAppliedVersion(node1, 1)).     deterministicTaskQueue.runAllTasksInTimeOrder().     assertThat(failedNodes, empty()). }
false;public;0;8;;public void testLagDetectedIfNodeAppliesVersionJustAfterTimeout() {     lagDetector.setTrackedNodes(Collections.singletonList(node1)).     lagDetector.startLagDetector(1).     deterministicTaskQueue.scheduleAt(deterministicTaskQueue.getCurrentTimeMillis() + followerLagTimeout.millis() + 1, () -> lagDetector.setAppliedVersion(node1, 1)).     deterministicTaskQueue.runAllTasksInTimeOrder().     assertThat(failedNodes, contains(node1)). }
false;public;0;6;;public void testNoLagDetectedOnLocalNode() {     lagDetector.setTrackedNodes(Collections.singletonList(localNode)).     lagDetector.startLagDetector(1).     deterministicTaskQueue.runAllTasksInTimeOrder().     assertThat(failedNodes, empty()). }
false;public;0;7;;public void testNoLagDetectedIfNodeAppliesLaterVersionAfterLagDetectorStarted() {     lagDetector.setTrackedNodes(Collections.singletonList(node1)).     lagDetector.startLagDetector(1).     lagDetector.setAppliedVersion(node1, 2).     deterministicTaskQueue.runAllTasks().     assertThat(failedNodes, empty()). }
false;public;0;7;;public void testLagDetectedIfNodeAppliesEarlierVersionAfterLagDetectorStarted() {     lagDetector.setTrackedNodes(Collections.singletonList(node1)).     lagDetector.startLagDetector(2).     lagDetector.setAppliedVersion(node1, 1).     deterministicTaskQueue.runAllTasks().     assertThat(failedNodes, contains(node1)). }
false;public;0;11;;public void testNoLagDetectedIfNodeIsRemovedAfterLagDetectorStarted() {     lagDetector.setTrackedNodes(Collections.singletonList(node1)).     lagDetector.startLagDetector(1).     lagDetector.setTrackedNodes(Collections.singletonList(node2)).     deterministicTaskQueue.runAllTasks().     assertThat(failedNodes, empty()).     lagDetector.startLagDetector(2).     deterministicTaskQueue.runAllTasks().     assertThat(failedNodes, contains(node2)). }
false;public;0;12;;public void testNoLagDetectedIfDetectorIsClearedAfterLagDetectorStarted() {     lagDetector.setTrackedNodes(Collections.singletonList(node1)).     lagDetector.startLagDetector(1).     lagDetector.clearTrackedNodes().     deterministicTaskQueue.runAllTasks().     assertThat(failedNodes, empty()).     lagDetector.setTrackedNodes(Collections.singletonList(node1)).     lagDetector.startLagDetector(2).     deterministicTaskQueue.runAllTasks().     assertThat(failedNodes, contains(node1)). }
false;public;0;8;;public void testDetectorIgnoresNodesAddedAfterStarted() {     lagDetector.setTrackedNodes(Collections.singletonList(node1)).     lagDetector.startLagDetector(1).     lagDetector.setTrackedNodes(Arrays.asList(node1, node2)).     lagDetector.setAppliedVersion(node1, 1).     deterministicTaskQueue.runAllTasks().     assertThat(failedNodes, empty()). }
false;public;0;7;;public void testDetectorKeepsTrackingExistingNodesEvenIfNewOnesAdded() {     lagDetector.setTrackedNodes(Collections.singletonList(node1)).     lagDetector.startLagDetector(1).     lagDetector.setTrackedNodes(Arrays.asList(node1, node2)).     deterministicTaskQueue.runAllTasks().     assertThat(failedNodes, contains(node1)). }
false;public;0;12;;public void testDetectorIgnoresApplicationsFromUnknownNodes() {     lagDetector.setTrackedNodes(Collections.singletonList(node1)).     lagDetector.startLagDetector(1).     lagDetector.setAppliedVersion(node2, 1).     deterministicTaskQueue.runAllTasks().     assertThat(failedNodes, contains(node1)).     failedNodes.clear().     lagDetector.startLagDetector(2).     deterministicTaskQueue.runAllTasks().     assertThat(failedNodes, contains(node1)). }
false;public;0;60;;public void testLagDetection() {     lagDetector.setTrackedNodes(Collections.singletonList(node1)).     lagDetector.setAppliedVersion(node1, 1).     lagDetector.startLagDetector(1).     {         final long startTime = deterministicTaskQueue.getCurrentTimeMillis().         deterministicTaskQueue.runAllTasks().         assertThat("no lag detector started", deterministicTaskQueue.getCurrentTimeMillis(), is(startTime)).     }     assertThat(failedNodes, empty()).     lagDetector.setTrackedNodes(Collections.singletonList(node1)).     lagDetector.startLagDetector(2).     lagDetector.setAppliedVersion(node1, 2).     {         final long startTime = deterministicTaskQueue.getCurrentTimeMillis().         deterministicTaskQueue.runAllTasks().         assertThat("lag detector started", deterministicTaskQueue.getCurrentTimeMillis(), greaterThan(startTime)).     }     assertThat(failedNodes, empty()).     lagDetector.startLagDetector(3).     deterministicTaskQueue.scheduleAt(deterministicTaskQueue.getCurrentTimeMillis() + followerLagTimeout.millis() - 1, () -> lagDetector.setAppliedVersion(node1, 3)).     assertThat(failedNodes, empty()).     lagDetector.startLagDetector(4).     deterministicTaskQueue.scheduleAt(deterministicTaskQueue.getCurrentTimeMillis() + followerLagTimeout.millis() + 1, () -> lagDetector.setAppliedVersion(node1, 4)).     deterministicTaskQueue.runAllTasksInTimeOrder().     assertThat(failedNodes, contains(node1)).     failedNodes.clear().     lagDetector.startLagDetector(5).     lagDetector.clearTrackedNodes().     lagDetector.setTrackedNodes(Collections.singletonList(node1)).     deterministicTaskQueue.runAllTasksInTimeOrder().     // clearing tracked nodes cancels earlier lag detector ...     assertThat(failedNodes, empty()).     lagDetector.startLagDetector(6).     deterministicTaskQueue.runAllTasksInTimeOrder().     assertThat(failedNodes, contains(node1)).     // ... but later lag detectors still work     failedNodes.clear().     lagDetector.setTrackedNodes(Collections.singletonList(node2)).     lagDetector.setAppliedVersion(node2, 7).     lagDetector.startLagDetector(7).     deterministicTaskQueue.runAllTasksInTimeOrder().     // removing a node from the tracked set means it is not tracked     assertThat(failedNodes, empty()).     lagDetector.startLagDetector(8).     deterministicTaskQueue.runAllTasksInTimeOrder().     assertThat(failedNodes, contains(node2)).     failedNodes.clear().     lagDetector.startLagDetector(9).     lagDetector.setTrackedNodes(Collections.singletonList(node1)).     deterministicTaskQueue.runAllTasksInTimeOrder().     // nodes added after a lag detector was started are also ignored     assertThat(failedNodes, empty()). }
