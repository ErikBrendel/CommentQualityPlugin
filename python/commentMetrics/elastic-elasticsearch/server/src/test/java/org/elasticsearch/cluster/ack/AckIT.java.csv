commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;9;;@Override protected Settings nodeSettings(int nodeOrdinal) {     // otherwise the operation is most likely acknowledged even if it doesn't support ack     return Settings.builder().put(super.nodeSettings(nodeOrdinal)).put(DiscoverySettings.COMMIT_TIMEOUT_SETTING.getKey(), // explicitly set so it won't default to publish timeout     "30s").put(DiscoverySettings.PUBLISH_TIMEOUT_SETTING.getKey(), // don't wait post commit to check acking     "0s").build(). }
false;public;0;11;;public void testUpdateSettingsAcknowledgement() {     createIndex("test").     assertAcked(client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().put("refresh_interval", 9999, TimeUnit.MILLISECONDS))).     for (Client client : clients()) {         String refreshInterval = getLocalClusterState(client).metaData().index("test").getSettings().get("index.refresh_interval").         assertThat(refreshInterval, equalTo("9999ms")).     } }
false;public;0;6;;public void testUpdateSettingsNoAcknowledgement() {     createIndex("test").     AcknowledgedResponse updateSettingsResponse = client().admin().indices().prepareUpdateSettings("test").setTimeout("0s").setSettings(Settings.builder().put("refresh_interval", 9999, TimeUnit.MILLISECONDS)).get().     assertThat(updateSettingsResponse.isAcknowledged(), equalTo(false)). }
false;public;0;35;;public void testClusterRerouteAcknowledgement() throws InterruptedException {     assertAcked(prepareCreate("test").setSettings(Settings.builder().put(indexSettings()).put(SETTING_NUMBER_OF_SHARDS, between(cluster().numDataNodes(), DEFAULT_MAX_NUM_SHARDS)).put(SETTING_NUMBER_OF_REPLICAS, 0))).     ensureGreen().     MoveAllocationCommand moveAllocationCommand = getAllocationCommand().     final Index index = client().admin().cluster().prepareState().get().getState().metaData().index("test").getIndex().     final ShardId commandShard = new ShardId(index, moveAllocationCommand.shardId()).     assertAcked(client().admin().cluster().prepareReroute().add(moveAllocationCommand)).     for (Client client : clients()) {         ClusterState clusterState = getLocalClusterState(client).         for (ShardRouting shardRouting : clusterState.getRoutingNodes().node(moveAllocationCommand.fromNode())) {             // if the shard that we wanted to move is still on the same node, it must be relocating             if (shardRouting.shardId().equals(commandShard)) {                 assertThat(shardRouting.relocating(), equalTo(true)).             }         }         boolean found = false.         for (ShardRouting shardRouting : clusterState.getRoutingNodes().node(moveAllocationCommand.toNode())) {             if (shardRouting.shardId().equals(commandShard)) {                 assertThat(shardRouting.state(), anyOf(equalTo(ShardRoutingState.INITIALIZING), equalTo(ShardRoutingState.STARTED))).                 found = true.                 break.             }         }         assertThat(found, equalTo(true)).     } }
false;public;0;13;;public void testClusterRerouteNoAcknowledgement() throws InterruptedException {     client().admin().indices().prepareCreate("test").setSettings(Settings.builder().put(SETTING_NUMBER_OF_SHARDS, between(cluster().numDataNodes(), DEFAULT_MAX_NUM_SHARDS)).put(SETTING_NUMBER_OF_REPLICAS, 0)).get().     ensureGreen().     MoveAllocationCommand moveAllocationCommand = getAllocationCommand().     ClusterRerouteResponse clusterRerouteResponse = client().admin().cluster().prepareReroute().setTimeout("0s").add(moveAllocationCommand).get().     assertThat(clusterRerouteResponse.isAcknowledged(), equalTo(false)). }
false;public;0;35;;public void testClusterRerouteAcknowledgementDryRun() throws InterruptedException {     client().admin().indices().prepareCreate("test").setSettings(Settings.builder().put(SETTING_NUMBER_OF_SHARDS, between(cluster().numDataNodes(), DEFAULT_MAX_NUM_SHARDS)).put(SETTING_NUMBER_OF_REPLICAS, 0)).get().     ensureGreen().     MoveAllocationCommand moveAllocationCommand = getAllocationCommand().     final Index index = client().admin().cluster().prepareState().get().getState().metaData().index("test").getIndex().     final ShardId commandShard = new ShardId(index, moveAllocationCommand.shardId()).     assertAcked(client().admin().cluster().prepareReroute().setDryRun(true).add(moveAllocationCommand)).     // testing only on master with the latest cluster state as we didn't make any change thus     // we cannot guarantee that all nodes hold the same cluster state version. We only know there     // was no need to change anything, thus no need for ack on this update.     ClusterStateResponse clusterStateResponse = client().admin().cluster().prepareState().get().     boolean found = false.     for (ShardRouting shardRouting : clusterStateResponse.getState().getRoutingNodes().node(moveAllocationCommand.fromNode())) {         // the shard that we wanted to move is still on the same node, as we had dryRun flag         if (shardRouting.shardId().equals(commandShard)) {             assertThat(shardRouting.started(), equalTo(true)).             found = true.             break.         }     }     assertThat(found, equalTo(true)).     for (ShardRouting shardRouting : clusterStateResponse.getState().getRoutingNodes().node(moveAllocationCommand.toNode())) {         if (shardRouting.shardId().equals(commandShard)) {             fail("shard [" + shardRouting + "] shouldn't be on node [" + moveAllocationCommand.toString() + "]").         }     } }
false;public;0;14;;public void testClusterRerouteNoAcknowledgementDryRun() throws InterruptedException {     client().admin().indices().prepareCreate("test").setSettings(Settings.builder().put(SETTING_NUMBER_OF_SHARDS, between(cluster().numDataNodes(), DEFAULT_MAX_NUM_SHARDS)).put(SETTING_NUMBER_OF_REPLICAS, 0)).get().     ensureGreen().     MoveAllocationCommand moveAllocationCommand = getAllocationCommand().     ClusterRerouteResponse clusterRerouteResponse = client().admin().cluster().prepareReroute().setTimeout("0s").setDryRun(true).add(moveAllocationCommand).get().     // acknowledged anyway as no changes were made     assertThat(clusterRerouteResponse.isAcknowledged(), equalTo(true)). }
false;private;0;27;;private MoveAllocationCommand getAllocationCommand() {     String fromNodeId = null.     String toNodeId = null.     ShardRouting shardToBeMoved = null.     ClusterStateResponse clusterStateResponse = client().admin().cluster().prepareState().get().     for (RoutingNode routingNode : clusterStateResponse.getState().getRoutingNodes()) {         if (routingNode.node().isDataNode()) {             if (fromNodeId == null && routingNode.numberOfOwningShards() > 0) {                 fromNodeId = routingNode.nodeId().                 shardToBeMoved = routingNode.copyShards().get(randomInt(routingNode.size() - 1)).             } else {                 toNodeId = routingNode.nodeId().             }             if (toNodeId != null && fromNodeId != null) {                 break.             }         }     }     assertNotNull(fromNodeId).     assertNotNull(toNodeId).     assertNotNull(shardToBeMoved).     logger.info("==> going to move shard [{}] from [{}] to [{}]", shardToBeMoved, fromNodeId, toNodeId).     return new MoveAllocationCommand(shardToBeMoved.getIndexName(), shardToBeMoved.id(), fromNodeId, toNodeId). }
false;public;0;16;;public void testIndicesAliasesAcknowledgement() {     createIndex("test").     // as the previous operation was acknowledged     for (int i = 0. i < 2. i++) {         assertAcked(client().admin().indices().prepareAliases().addAlias("test", "alias")).         for (Client client : clients()) {             AliasMetaData aliasMetaData = ((AliasOrIndex.Alias) getLocalClusterState(client).metaData().getAliasAndIndexLookup().get("alias")).getFirstAliasMetaData().             assertThat(aliasMetaData.alias(), equalTo("alias")).         }     } }
false;public;0;7;;public void testIndicesAliasesNoAcknowledgement() {     createIndex("test").     AcknowledgedResponse indicesAliasesResponse = client().admin().indices().prepareAliases().addAlias("test", "alias").setTimeout("0s").get().     assertThat(indicesAliasesResponse.isAcknowledged(), equalTo(false)). }
false;public;0;11;;public void testCloseIndexAcknowledgement() {     createIndex("test").     ensureGreen().     assertAcked(client().admin().indices().prepareClose("test")).     for (Client client : clients()) {         IndexMetaData indexMetaData = getLocalClusterState(client).metaData().indices().get("test").         assertThat(indexMetaData.getState(), equalTo(State.CLOSE)).     } }
false;public;0;7;;public void testCloseIndexNoAcknowledgement() {     createIndex("test").     ensureGreen().     AcknowledgedResponse closeIndexResponse = client().admin().indices().prepareClose("test").setTimeout("0s").get().     assertThat(closeIndexResponse.isAcknowledged(), equalTo(false)). }
false;public;0;13;;public void testOpenIndexAcknowledgement() {     createIndex("test").     ensureGreen().     assertAcked(client().admin().indices().prepareClose("test")).     assertAcked(client().admin().indices().prepareOpen("test")).     for (Client client : clients()) {         IndexMetaData indexMetaData = getLocalClusterState(client).metaData().indices().get("test").         assertThat(indexMetaData.getState(), equalTo(State.OPEN)).     } }
false;public;0;10;;public void testPutMappingAcknowledgement() {     createIndex("test").     ensureGreen().     assertAcked(client().admin().indices().preparePutMapping("test").setType("test").setSource("field", "type=keyword")).     for (Client client : clients()) {         assertThat(getLocalClusterState(client).metaData().indices().get("test").getMappings().get("test"), notNullValue()).     } }
false;public;0;8;;public void testPutMappingNoAcknowledgement() {     createIndex("test").     ensureGreen().     AcknowledgedResponse putMappingResponse = client().admin().indices().preparePutMapping("test").setType("test").setSource("field", "type=keyword").setTimeout("0s").get().     assertThat(putMappingResponse.isAcknowledged(), equalTo(false)). }
false;public;0;11;;public void testCreateIndexAcknowledgement() {     createIndex("test").     for (Client client : clients()) {         assertThat(getLocalClusterState(client).metaData().indices().containsKey("test"), equalTo(true)).     }     // let's wait for green, otherwise there can be issues with after test checks (mock directory wrapper etc.)     // but we do want to check that the new index is on all nodes cluster state even before green     ensureGreen(). }
false;public;0;7;;public void testCreateIndexNoAcknowledgement() {     CreateIndexResponse createIndexResponse = client().admin().indices().prepareCreate("test").setTimeout("0s").get().     assertThat(createIndexResponse.isAcknowledged(), equalTo(false)).     // let's wait for green, otherwise there can be issues with after test checks (mock directory wrapper etc.)     ensureGreen(). }
false;private,static;1;3;;private static ClusterState getLocalClusterState(Client client) {     return client.admin().cluster().prepareState().setLocal(true).get().getState(). }
