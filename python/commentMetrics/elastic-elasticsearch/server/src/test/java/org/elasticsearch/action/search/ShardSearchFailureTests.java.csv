commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;13;;public static ShardSearchFailure createTestItem(String indexUuid) {     String randomMessage = randomAlphaOfLengthBetween(3, 20).     Exception ex = new ParsingException(0, 0, randomMessage, new IllegalArgumentException("some bad argument")).     SearchShardTarget searchShardTarget = null.     if (randomBoolean()) {         String nodeId = randomAlphaOfLengthBetween(5, 10).         String indexName = randomAlphaOfLengthBetween(5, 10).         String clusterAlias = randomBoolean() ? randomAlphaOfLengthBetween(5, 10) : null.         searchShardTarget = new SearchShardTarget(nodeId, new ShardId(new Index(indexName, indexUuid), randomInt()), clusterAlias, OriginalIndices.NONE).     }     return new ShardSearchFailure(ex, searchShardTarget). }
false;public;0;3;;public void testFromXContent() throws IOException {     doFromXContentTestWithRandomFields(false). }
true;public;0;3;/**  * This test adds random fields and objects to the xContent rendered out to  * ensure we can parse it back to be forward compatible with additions to  * the xContent  */ ;/**  * This test adds random fields and objects to the xContent rendered out to  * ensure we can parse it back to be forward compatible with additions to  * the xContent  */ public void testFromXContentWithRandomFields() throws IOException {     doFromXContentTestWithRandomFields(true). }
false;private;1;33;;private void doFromXContentTestWithRandomFields(boolean addRandomFields) throws IOException {     ShardSearchFailure response = createTestItem(IndexMetaData.INDEX_UUID_NA_VALUE).     XContentType xContentType = randomFrom(XContentType.values()).     boolean humanReadable = randomBoolean().     BytesReference originalBytes = toShuffledXContent(response, xContentType, ToXContent.EMPTY_PARAMS, humanReadable).     BytesReference mutated.     if (addRandomFields) {         mutated = insertRandomFields(xContentType, originalBytes, null, random()).     } else {         mutated = originalBytes.     }     ShardSearchFailure parsed.     try (XContentParser parser = createParser(xContentType.xContent(), mutated)) {         assertEquals(XContentParser.Token.START_OBJECT, parser.nextToken()).         parsed = ShardSearchFailure.fromXContent(parser).         assertEquals(XContentParser.Token.END_OBJECT, parser.currentToken()).         assertNull(parser.nextToken()).     }     assertEquals(response.index(), parsed.index()).     assertEquals(response.shard(), parsed.shard()).     assertEquals(response.shardId(), parsed.shardId()).     /*          * we cannot compare the cause, because it will be wrapped in an outer          * ElasticSearchException best effort: try to check that the original          * message appears somewhere in the rendered xContent          */     String originalMsg = response.getCause().getMessage().     assertEquals(parsed.getCause().getMessage(), "Elasticsearch exception [type=parsing_exception, reason=" + originalMsg + "]").     String nestedMsg = response.getCause().getCause().getMessage().     assertEquals(parsed.getCause().getCause().getMessage(), "Elasticsearch exception [type=illegal_argument_exception, reason=" + nestedMsg + "]"). }
false;public;0;17;;public void testToXContent() throws IOException {     ShardSearchFailure failure = new ShardSearchFailure(new ParsingException(0, 0, "some message", null), new SearchShardTarget("nodeId", new ShardId(new Index("indexName", "indexUuid"), 123), null, OriginalIndices.NONE)).     BytesReference xContent = toXContent(failure, XContentType.JSON, randomBoolean()).     assertEquals("{\"shard\":123," + "\"index\":\"indexName\"," + "\"node\":\"nodeId\"," + "\"reason\":{" + "\"type\":\"parsing_exception\"," + "\"reason\":\"some message\"," + "\"line\":0," + "\"col\":0" + "}" + "}", xContent.utf8ToString()). }
false;public;0;17;;public void testToXContentWithClusterAlias() throws IOException {     ShardSearchFailure failure = new ShardSearchFailure(new ParsingException(0, 0, "some message", null), new SearchShardTarget("nodeId", new ShardId(new Index("indexName", "indexUuid"), 123), "cluster1", OriginalIndices.NONE)).     BytesReference xContent = toXContent(failure, XContentType.JSON, randomBoolean()).     assertEquals("{\"shard\":123," + "\"index\":\"cluster1:indexName\"," + "\"node\":\"nodeId\"," + "\"reason\":{" + "\"type\":\"parsing_exception\"," + "\"reason\":\"some message\"," + "\"line\":0," + "\"col\":0" + "}" + "}", xContent.utf8ToString()). }
false;public;0;10;;public void testSerialization() throws IOException {     ShardSearchFailure testItem = createTestItem(randomAlphaOfLength(12)).     ShardSearchFailure deserializedInstance = copyStreamable(testItem, writableRegistry(), ShardSearchFailure::new, VersionUtils.randomVersion(random())).     assertEquals(testItem.index(), deserializedInstance.index()).     assertEquals(testItem.shard(), deserializedInstance.shard()).     assertEquals(testItem.shardId(), deserializedInstance.shardId()).     assertEquals(testItem.reason(), deserializedInstance.reason()).     assertEquals(testItem.status(), deserializedInstance.status()). }
