# id;timestamp;commentText;codeText;commentWords;codeWords
GetFieldMappingsResponseTests -> @Override     protected ToXContent.Params getToXContentParams();1547500081;For now, we only unit test the legacy typed responses. This will soon no longer be the case,_as we introduce support for typeless xContent parsing in {@link GetFieldMappingsResponse}.;@Override_    protected ToXContent.Params getToXContentParams() {_        return new ToXContent.MapParams(Collections.singletonMap(INCLUDE_TYPE_NAME_PARAMETER, "true"))__    };for,now,we,only,unit,test,the,legacy,typed,responses,this,will,soon,no,longer,be,the,case,as,we,introduce,support,for,typeless,x,content,parsing,in,link,get,field,mappings,response;override,protected,to,xcontent,params,get,to,xcontent,params,return,new,to,xcontent,map,params,collections,singleton,map,true
GetFieldMappingsResponseTests -> @Override     protected ToXContent.Params getToXContentParams();1548633742;For xContent roundtrip testing we force the xContent output to still contain types because the parser_still expects them. The new typeless parsing is implemented in the client side GetFieldMappingsResponse.;@Override_    protected ToXContent.Params getToXContentParams() {_        return new ToXContent.MapParams(Collections.singletonMap(INCLUDE_TYPE_NAME_PARAMETER, "true"))__    };for,x,content,roundtrip,testing,we,force,the,x,content,output,to,still,contain,types,because,the,parser,still,expects,them,the,new,typeless,parsing,is,implemented,in,the,client,side,get,field,mappings,response;override,protected,to,xcontent,params,get,to,xcontent,params,return,new,to,xcontent,map,params,collections,singleton,map,true
