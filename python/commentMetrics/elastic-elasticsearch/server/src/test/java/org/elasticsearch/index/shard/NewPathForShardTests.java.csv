commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;8;;@BeforeClass public static void installMockUsableSpaceFS() throws Exception {     FileSystem current = PathUtils.getDefaultFileSystem().     aPathPart = current.getSeparator() + 'a' + current.getSeparator().     bPathPart = current.getSeparator() + 'b' + current.getSeparator().     FileSystemProvider mock = new MockUsableSpaceFileSystemProvider(current).     PathUtilsForTesting.installMock(mock.getFileSystem(null)). }
false;public,static;0;6;;@AfterClass public static void removeMockUsableSpaceFS() throws Exception {     PathUtilsForTesting.teardown().     aFileStore = null.     bFileStore = null. }
false;public;1;8;;@Override public FileStore getFileStore(Path path) throws IOException {     if (path.toString().contains(aPathPart)) {         return aFileStore.     } else {         return bFileStore.     } }
false;public;0;4;;@Override public String type() {     return "mock". }
false;public;0;4;;@Override public String name() {     return desc. }
false;public;0;4;;@Override public String toString() {     return desc. }
false;public;0;4;;@Override public boolean isReadOnly() {     return false. }
false;public;0;4;;@Override public long getTotalSpace() throws IOException {     return usableSpace * 3. }
false;public;0;4;;@Override public long getUsableSpace() throws IOException {     return usableSpace. }
false;public;0;4;;@Override public long getUnallocatedSpace() throws IOException {     return usableSpace * 2. }
false;public;1;4;;@Override public boolean supportsFileAttributeView(Class<? extends FileAttributeView> type) {     return false. }
false;public;1;4;;@Override public boolean supportsFileAttributeView(String name) {     return false. }
false;public;1;4;;@Override public <V extends FileStoreAttributeView> V getFileStoreAttributeView(Class<V> type) {     return null. }
false;public;1;4;;@Override public Object getAttribute(String attribute) throws IOException {     return null. }
false;static;1;3;;static void createFakeShard(ShardPath path) throws IOException {     Files.createDirectories(path.resolveIndex().getParent()). }
false;public;0;54;;public void testSelectNewPathForShard() throws Exception {     Path path = PathUtils.get(createTempDir().toString()).     // Use 2 data paths:     String[] paths = new String[] { path.resolve("a").toString(), path.resolve("b").toString() }.     Settings settings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), path).putList(Environment.PATH_DATA_SETTING.getKey(), paths).build().     NodeEnvironment nodeEnv = new NodeEnvironment(settings, TestEnvironment.newEnvironment(settings)).     // Make sure all our mocking above actually worked:     NodePath[] nodePaths = nodeEnv.nodePaths().     assertEquals(2, nodePaths.length).     assertEquals("mocka", nodePaths[0].fileStore.name()).     assertEquals("mockb", nodePaths[1].fileStore.name()).     // Path a has lots of free space, but b has little, so new shard should go to a:     aFileStore.usableSpace = 100000.     bFileStore.usableSpace = 1000.     ShardId shardId = new ShardId("index", "_na_", 0).     ShardPath result = ShardPath.selectNewPathForShard(nodeEnv, shardId, INDEX_SETTINGS, 100, Collections.<Path, Integer>emptyMap()).     assertTrue(result.getDataPath().toString().contains(aPathPart)).     // Test the reverse: b has lots of free space, but a has little, so new shard should go to b:     aFileStore.usableSpace = 1000.     bFileStore.usableSpace = 100000.     shardId = new ShardId("index", "_na_", 0).     result = ShardPath.selectNewPathForShard(nodeEnv, shardId, INDEX_SETTINGS, 100, Collections.<Path, Integer>emptyMap()).     assertTrue(result.getDataPath().toString().contains(bPathPart)).     // Now a and be have equal usable space. we allocate two shards to the node, and each should go to different paths:     aFileStore.usableSpace = 100000.     bFileStore.usableSpace = 100000.     Map<Path, Integer> dataPathToShardCount = new HashMap<>().     ShardPath result1 = ShardPath.selectNewPathForShard(nodeEnv, shardId, INDEX_SETTINGS, 100, dataPathToShardCount).     createFakeShard(result1).     dataPathToShardCount.put(NodeEnvironment.shardStatePathToDataPath(result1.getDataPath()), 1).     ShardPath result2 = ShardPath.selectNewPathForShard(nodeEnv, shardId, INDEX_SETTINGS, 100, dataPathToShardCount).     createFakeShard(result2).     // #11122: this was the original failure: on a node with 2 disks that have nearly equal     // free space, we would always allocate all N incoming shards to the one path that     // had the most free space, never using the other drive unless new shards arrive     // after the first shards started using storage:     assertNotEquals(result1.getDataPath(), result2.getDataPath()).     nodeEnv.close(). }
false;public;0;56;;public void testSelectNewPathForShardEvenly() throws Exception {     Path path = PathUtils.get(createTempDir().toString()).     // Use 2 data paths:     String[] paths = new String[] { path.resolve("a").toString(), path.resolve("b").toString() }.     Settings settings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), path).putList(Environment.PATH_DATA_SETTING.getKey(), paths).build().     NodeEnvironment nodeEnv = new NodeEnvironment(settings, TestEnvironment.newEnvironment(settings)).     // Make sure all our mocking above actually worked:     NodePath[] nodePaths = nodeEnv.nodePaths().     assertEquals(2, nodePaths.length).     assertEquals("mocka", nodePaths[0].fileStore.name()).     assertEquals("mockb", nodePaths[1].fileStore.name()).     // Path a has lots of free space, but b has little, so new shard should go to a:     aFileStore.usableSpace = 100000.     bFileStore.usableSpace = 10000.     ShardId shardId = new ShardId("index", "uid1", 0).     ShardPath result = ShardPath.selectNewPathForShard(nodeEnv, shardId, INDEX_SETTINGS, 100, Collections.<Path, Integer>emptyMap()).     createFakeShard(result).     // First shard should go to a     assertThat(result.getDataPath().toString(), containsString(aPathPart)).     shardId = new ShardId("index", "uid1", 1).     result = ShardPath.selectNewPathForShard(nodeEnv, shardId, INDEX_SETTINGS, 100, Collections.<Path, Integer>emptyMap()).     createFakeShard(result).     // Second shard should go to b     assertThat(result.getDataPath().toString(), containsString(bPathPart)).     Map<Path, Integer> dataPathToShardCount = new HashMap<>().     shardId = new ShardId("index2", "uid2", 0).     IndexSettings idxSettings = IndexSettingsModule.newIndexSettings("index2", Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 3).build()).     ShardPath result1 = ShardPath.selectNewPathForShard(nodeEnv, shardId, idxSettings, 100, dataPathToShardCount).     createFakeShard(result1).     dataPathToShardCount.put(NodeEnvironment.shardStatePathToDataPath(result1.getDataPath()), 1).     shardId = new ShardId("index2", "uid2", 1).     ShardPath result2 = ShardPath.selectNewPathForShard(nodeEnv, shardId, idxSettings, 100, dataPathToShardCount).     createFakeShard(result2).     dataPathToShardCount.put(NodeEnvironment.shardStatePathToDataPath(result2.getDataPath()), 1).     shardId = new ShardId("index2", "uid2", 2).     ShardPath result3 = ShardPath.selectNewPathForShard(nodeEnv, shardId, idxSettings, 100, dataPathToShardCount).     createFakeShard(result3).     // 2 shards go to 'a' and 1 to 'b'     assertThat(result1.getDataPath().toString(), containsString(aPathPart)).     assertThat(result2.getDataPath().toString(), containsString(bPathPart)).     assertThat(result3.getDataPath().toString(), containsString(aPathPart)).     nodeEnv.close(). }
false;public;0;24;;public void testGettingPathWithMostFreeSpace() throws Exception {     Path path = PathUtils.get(createTempDir().toString()).     // Use 2 data paths:     String[] paths = new String[] { path.resolve("a").toString(), path.resolve("b").toString() }.     Settings settings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), path).putList(Environment.PATH_DATA_SETTING.getKey(), paths).build().     NodeEnvironment nodeEnv = new NodeEnvironment(settings, TestEnvironment.newEnvironment(settings)).     aFileStore.usableSpace = 100000.     bFileStore.usableSpace = 1000.     assertThat(ShardPath.getPathWithMostFreeSpace(nodeEnv), equalTo(nodeEnv.nodePaths()[0])).     aFileStore.usableSpace = 10000.     bFileStore.usableSpace = 20000.     assertThat(ShardPath.getPathWithMostFreeSpace(nodeEnv), equalTo(nodeEnv.nodePaths()[1])).     nodeEnv.close(). }
false;public;0;66;;public void testTieBreakWithMostShards() throws Exception {     Path path = PathUtils.get(createTempDir().toString()).     // Use 2 data paths:     String[] paths = new String[] { path.resolve("a").toString(), path.resolve("b").toString() }.     Settings settings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), path).putList(Environment.PATH_DATA_SETTING.getKey(), paths).build().     NodeEnvironment nodeEnv = new NodeEnvironment(settings, TestEnvironment.newEnvironment(settings)).     // Make sure all our mocking above actually worked:     NodePath[] nodePaths = nodeEnv.nodePaths().     assertEquals(2, nodePaths.length).     assertEquals("mocka", nodePaths[0].fileStore.name()).     assertEquals("mockb", nodePaths[1].fileStore.name()).     // Path a has lots of free space, but b has little, so new shard should go to a:     aFileStore.usableSpace = 100000.     bFileStore.usableSpace = 10000.     Map<Path, Integer> dataPathToShardCount = new HashMap<>().     ShardId shardId = new ShardId("index", "uid1", 0).     ShardPath result = ShardPath.selectNewPathForShard(nodeEnv, shardId, INDEX_SETTINGS, 100, dataPathToShardCount).     createFakeShard(result).     // First shard should go to a     assertThat(result.getDataPath().toString(), containsString(aPathPart)).     dataPathToShardCount.compute(NodeEnvironment.shardStatePathToDataPath(result.getDataPath()), (k, v) -> v == null ? 1 : v + 1).     shardId = new ShardId("index", "uid1", 1).     result = ShardPath.selectNewPathForShard(nodeEnv, shardId, INDEX_SETTINGS, 100, dataPathToShardCount).     createFakeShard(result).     // Second shard should go to b     assertThat(result.getDataPath().toString(), containsString(bPathPart)).     dataPathToShardCount.compute(NodeEnvironment.shardStatePathToDataPath(result.getDataPath()), (k, v) -> v == null ? 1 : v + 1).     shardId = new ShardId("index2", "uid3", 0).     result = ShardPath.selectNewPathForShard(nodeEnv, shardId, INDEX_SETTINGS, 100, dataPathToShardCount).     createFakeShard(result).     // Shard for new index should go to a     assertThat(result.getDataPath().toString(), containsString(aPathPart)).     dataPathToShardCount.compute(NodeEnvironment.shardStatePathToDataPath(result.getDataPath()), (k, v) -> v == null ? 1 : v + 1).     shardId = new ShardId("index2", "uid2", 0).     IndexSettings idxSettings = IndexSettingsModule.newIndexSettings("index2", Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 3).build()).     ShardPath result1 = ShardPath.selectNewPathForShard(nodeEnv, shardId, idxSettings, 100, dataPathToShardCount).     createFakeShard(result1).     dataPathToShardCount.compute(NodeEnvironment.shardStatePathToDataPath(result1.getDataPath()), (k, v) -> v == null ? 1 : v + 1).     shardId = new ShardId("index2", "uid2", 1).     ShardPath result2 = ShardPath.selectNewPathForShard(nodeEnv, shardId, idxSettings, 100, dataPathToShardCount).     createFakeShard(result2).     dataPathToShardCount.compute(NodeEnvironment.shardStatePathToDataPath(result2.getDataPath()), (k, v) -> v == null ? 1 : v + 1).     shardId = new ShardId("index2", "uid2", 2).     ShardPath result3 = ShardPath.selectNewPathForShard(nodeEnv, shardId, idxSettings, 100, dataPathToShardCount).     createFakeShard(result3).     // 2 shards go to 'b' and 1 to 'a'     assertThat(result1.getDataPath().toString(), containsString(bPathPart)).     assertThat(result2.getDataPath().toString(), containsString(aPathPart)).     assertThat(result3.getDataPath().toString(), containsString(bPathPart)).     nodeEnv.close(). }
