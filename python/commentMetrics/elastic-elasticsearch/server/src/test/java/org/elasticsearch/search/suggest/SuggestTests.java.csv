commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;3;;public static List<NamedXContentRegistry.Entry> getDefaultNamedXContents() {     return namedXContents. }
false;static;0;3;;static NamedXContentRegistry getSuggestersRegistry() {     return xContentRegistry. }
false;protected;0;4;;@Override protected NamedXContentRegistry xContentRegistry() {     return getSuggestersRegistry(). }
false;public,static;0;8;;public static Suggest createTestItem() {     int numEntries = randomIntBetween(0, 5).     List<Suggestion<? extends Entry<? extends Option>>> suggestions = new ArrayList<>().     for (int i = 0. i < numEntries. i++) {         suggestions.add(SuggestionTests.createTestItem()).     }     return new Suggest(suggestions). }
false;public;0;24;;public void testFromXContent() throws IOException {     ToXContent.Params params = new ToXContent.MapParams(Collections.singletonMap(RestSearchAction.TYPED_KEYS_PARAM, "true")).     Suggest suggest = createTestItem().     XContentType xContentType = randomFrom(XContentType.values()).     boolean humanReadable = randomBoolean().     BytesReference originalBytes = toShuffledXContent(suggest, xContentType, params, humanReadable).     Suggest parsed.     try (XContentParser parser = createParser(xContentType.xContent(), originalBytes)) {         ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation).         ensureFieldName(parser, parser.nextToken(), Suggest.NAME).         ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation).         parsed = Suggest.fromXContent(parser).         assertEquals(XContentParser.Token.END_OBJECT, parser.currentToken()).         assertEquals(XContentParser.Token.END_OBJECT, parser.nextToken()).         assertNull(parser.nextToken()).     }     assertEquals(suggest.size(), parsed.size()).     for (Suggestion suggestion : suggest) {         Suggestion<? extends Entry<? extends Option>> parsedSuggestion = parsed.getSuggestion(suggestion.getName()).         assertNotNull(parsedSuggestion).         assertEquals(suggestion.getClass(), parsedSuggestion.getClass()).     }     assertToXContentEquivalent(originalBytes, toXContent(parsed, xContentType, params, humanReadable), xContentType). }
false;public;0;24;;public void testToXContent() throws IOException {     PhraseSuggestion.Entry.Option option = new PhraseSuggestion.Entry.Option(new Text("someText"), new Text("somethingHighlighted"), 1.3f, true).     PhraseSuggestion.Entry entry = new PhraseSuggestion.Entry(new Text("entryText"), 42, 313).     entry.addOption(option).     PhraseSuggestion suggestion = new PhraseSuggestion("suggestionName", 5).     suggestion.addTerm(entry).     Suggest suggest = new Suggest(Collections.singletonList(suggestion)).     BytesReference xContent = toXContent(suggest, XContentType.JSON, randomBoolean()).     assertEquals("{\"suggest\":" + "{\"suggestionName\":" + "[{\"text\":\"entryText\"," + "\"offset\":42," + "\"length\":313," + "\"options\":[{\"text\":\"someText\"," + "\"highlighted\":\"somethingHighlighted\"," + "\"score\":1.3," + "\"collate_match\":true}]" + "}]" + "}" + "}", xContent.utf8ToString()). }
false;public;0;17;;public void testFilter() throws Exception {     List<Suggest.Suggestion<? extends Suggest.Suggestion.Entry<? extends Suggest.Suggestion.Entry.Option>>> suggestions.     CompletionSuggestion completionSuggestion = new CompletionSuggestion(randomAlphaOfLength(10), 2, false).     PhraseSuggestion phraseSuggestion = new PhraseSuggestion(randomAlphaOfLength(10), 2).     TermSuggestion termSuggestion = new TermSuggestion(randomAlphaOfLength(10), 2, SortBy.SCORE).     suggestions = Arrays.asList(completionSuggestion, phraseSuggestion, termSuggestion).     Suggest suggest = new Suggest(suggestions).     List<PhraseSuggestion> phraseSuggestions = suggest.filter(PhraseSuggestion.class).     assertThat(phraseSuggestions.size(), equalTo(1)).     assertThat(phraseSuggestions.get(0), equalTo(phraseSuggestion)).     List<TermSuggestion> termSuggestions = suggest.filter(TermSuggestion.class).     assertThat(termSuggestions.size(), equalTo(1)).     assertThat(termSuggestions.get(0), equalTo(termSuggestion)).     List<CompletionSuggestion> completionSuggestions = suggest.filter(CompletionSuggestion.class).     assertThat(completionSuggestions.size(), equalTo(1)).     assertThat(completionSuggestions.get(0), equalTo(completionSuggestion)). }
false;public;0;18;;public void testSuggestionOrdering() throws Exception {     List<Suggest.Suggestion<? extends Suggest.Suggestion.Entry<? extends Suggest.Suggestion.Entry.Option>>> suggestions.     suggestions = new ArrayList<>().     int n = randomIntBetween(2, 5).     for (int i = 0. i < n. i++) {         suggestions.add(new CompletionSuggestion(randomAlphaOfLength(10), randomIntBetween(3, 5), false)).     }     Collections.shuffle(suggestions, random()).     Suggest suggest = new Suggest(suggestions).     List<Suggest.Suggestion<? extends Suggest.Suggestion.Entry<? extends Suggest.Suggestion.Entry.Option>>> sortedSuggestions.     sortedSuggestions = new ArrayList<>(suggestions).     sortedSuggestions.sort((o1, o2) -> o1.getName().compareTo(o2.getName())).     List<CompletionSuggestion> completionSuggestions = suggest.filter(CompletionSuggestion.class).     assertThat(completionSuggestions.size(), equalTo(n)).     for (int i = 0. i < n. i++) {         assertThat(completionSuggestions.get(i).getName(), equalTo(sortedSuggestions.get(i).getName())).     } }
false;public;0;15;;public void testParsingExceptionOnUnknownSuggestion() throws IOException {     XContentBuilder builder = XContentFactory.jsonBuilder().     builder.startObject().     {         builder.startArray("unknownSuggestion").         builder.endArray().     }     builder.endObject().     BytesReference originalBytes = BytesReference.bytes(builder).     try (XContentParser parser = createParser(builder.contentType().xContent(), originalBytes)) {         assertEquals(XContentParser.Token.START_OBJECT, parser.nextToken()).         ParsingException ex = expectThrows(ParsingException.class, () -> Suggest.fromXContent(parser)).         assertEquals("Could not parse suggestion keyed as [unknownSuggestion]", ex.getMessage()).     } }
false;public;0;23;;public void testMergingSuggestionOptions() {     String suggestedWord = randomAlphaOfLength(10).     String secondWord = randomAlphaOfLength(10).     Text suggestionText = new Text(suggestedWord + " " + secondWord).     Text highlighted = new Text("<em>" + suggestedWord + "</em> " + secondWord).     PhraseSuggestion.Entry.Option option1 = new PhraseSuggestion.Entry.Option(suggestionText, highlighted, 0.7f, false).     PhraseSuggestion.Entry.Option option2 = new PhraseSuggestion.Entry.Option(suggestionText, highlighted, 0.8f, true).     PhraseSuggestion.Entry.Option option3 = new PhraseSuggestion.Entry.Option(suggestionText, highlighted, 0.6f).     assertEquals(suggestionText, option1.getText()).     assertEquals(highlighted, option1.getHighlighted()).     assertFalse(option1.collateMatch()).     assertTrue(option1.getScore() > 0.6f).     option1.mergeInto(option2).     assertEquals(suggestionText, option1.getText()).     assertEquals(highlighted, option1.getHighlighted()).     assertTrue(option1.collateMatch()).     assertTrue(option1.getScore() > 0.7f).     option1.mergeInto(option3).     assertEquals(suggestionText, option1.getText()).     assertEquals(highlighted, option1.getHighlighted()).     assertTrue(option1.getScore() > 0.7f).     assertTrue(option1.collateMatch()). }
false;public;0;34;;public void testSerialization() throws IOException {     final Version bwcVersion = VersionUtils.randomVersionBetween(random(), Version.CURRENT.minimumCompatibilityVersion(), Version.CURRENT).     final Suggest suggest = createTestItem().     final Suggest bwcSuggest.     NamedWriteableRegistry registry = new NamedWriteableRegistry(new SearchModule(Settings.EMPTY, false, emptyList()).getNamedWriteables()).     try (BytesStreamOutput out = new BytesStreamOutput()) {         out.setVersion(bwcVersion).         suggest.writeTo(out).         try (NamedWriteableAwareStreamInput in = new NamedWriteableAwareStreamInput(out.bytes().streamInput(), registry)) {             in.setVersion(bwcVersion).             bwcSuggest = new Suggest(in).         }     }     assertEquals(suggest, bwcSuggest).     final Suggest backAgain.     try (BytesStreamOutput out = new BytesStreamOutput()) {         out.setVersion(Version.CURRENT).         bwcSuggest.writeTo(out).         try (NamedWriteableAwareStreamInput in = new NamedWriteableAwareStreamInput(out.bytes().streamInput(), registry)) {             in.setVersion(Version.CURRENT).             backAgain = new Suggest(in).         }     }     assertEquals(suggest, backAgain). }
