commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     return Collections.singleton(CustomScriptPlugin.class). }
false;protected;0;29;;@Override protected Map<String, Function<Map<String, Object>, Object>> pluginScripts() {     Map<String, Function<Map<String, Object>, Object>> scripts = new HashMap<>().     scripts.put("_value", vars -> vars.get("_value")).     scripts.put("doc['str_value'].value", vars -> {         Map<?, ?> doc = (Map<?, ?>) vars.get("doc").         return doc.get("str_value").     }).     scripts.put("doc['str_values']", vars -> {         Map<?, ?> doc = (Map<?, ?>) vars.get("doc").         ScriptDocValues.Strings strValue = (ScriptDocValues.Strings) doc.get("str_values").         return strValue.     }).     scripts.put("doc[' + singleNumericField() + '].value", vars -> {         Map<?, ?> doc = (Map<?, ?>) vars.get("doc").         return doc.get(singleNumericField()).     }).     scripts.put("doc[' + multiNumericField(false) + ']", vars -> {         Map<?, ?> doc = (Map<?, ?>) vars.get("doc").         return (ScriptDocValues<?>) doc.get(multiNumericField(false)).     }).     return scripts. }
false;public;0;7;;@Override public Settings indexSettings() {     return Settings.builder().put("index.number_of_shards", numberOfShards()).put("index.number_of_replicas", numberOfReplicas()).build(). }
false;public;0;50;;@Override public void setupSuiteScopeCluster() throws Exception {     prepareCreate("idx").addMapping("type", jsonBuilder().startObject().startObject("type").startObject("properties").startObject("str_value").field("type", "keyword").endObject().startObject("str_values").field("type", "keyword").endObject().startObject("l_value").field("type", "long").endObject().startObject("l_values").field("type", "long").endObject().startObject("d_value").field("type", "double").endObject().startObject("d_values").field("type", "double").endObject().endObject().endObject().endObject()).get().     numDocs = randomIntBetween(2, 100).     precisionThreshold = randomIntBetween(0, 1 << randomInt(20)).     IndexRequestBuilder[] builders = new IndexRequestBuilder[(int) numDocs].     for (int i = 0. i < numDocs. ++i) {         builders[i] = client().prepareIndex("idx", "type").setSource(jsonBuilder().startObject().field("str_value", "s" + i).array("str_values", new String[] { "s" + (i * 2), "s" + (i * 2 + 1) }).field("l_value", i).array("l_values", new int[] { i * 2, i * 2 + 1 }).field("d_value", i).array("d_values", new double[] { i * 2, i * 2 + 1 }).endObject()).     }     indexRandom(true, builders).     createIndex("idx_unmapped").     IndexRequestBuilder[] dummyDocsBuilder = new IndexRequestBuilder[10].     for (int i = 0. i < dummyDocsBuilder.length. i++) {         dummyDocsBuilder[i] = client().prepareIndex("idx", "type").setSource("a_field", "1").     }     indexRandom(true, dummyDocsBuilder).     ensureSearchable(). }
false;private;2;9;;private void assertCount(Cardinality count, long value) {     if (value <= precisionThreshold) {         // linear counting should be picked, and should be accurate         assertEquals(value, count.getValue()).     } else {         // error is not bound, so let's just make sure it is > 0         assertThat(count.getValue(), greaterThan(0L)).     } }
false;private,static;0;3;;private static String singleNumericField() {     return randomBoolean() ? "l_value" : "d_value". }
false;private,static;1;3;;private static String multiNumericField(boolean hash) {     return randomBoolean() ? "l_values" : "d_values". }
false;public;0;12;;public void testUnmapped() throws Exception {     SearchResponse response = client().prepareSearch("idx_unmapped").setTypes("type").addAggregation(cardinality("cardinality").precisionThreshold(precisionThreshold).field("str_value")).get().     assertSearchResponse(response).     Cardinality count = response.getAggregations().get("cardinality").     assertThat(count, notNullValue()).     assertThat(count.getName(), equalTo("cardinality")).     assertCount(count, 0). }
false;public;0;12;;public void testPartiallyUnmapped() throws Exception {     SearchResponse response = client().prepareSearch("idx", "idx_unmapped").setTypes("type").addAggregation(cardinality("cardinality").precisionThreshold(precisionThreshold).field("str_value")).get().     assertSearchResponse(response).     Cardinality count = response.getAggregations().get("cardinality").     assertThat(count, notNullValue()).     assertThat(count.getName(), equalTo("cardinality")).     assertCount(count, numDocs). }
false;public;0;12;;public void testSingleValuedString() throws Exception {     SearchResponse response = client().prepareSearch("idx").setTypes("type").addAggregation(cardinality("cardinality").precisionThreshold(precisionThreshold).field("str_value")).get().     assertSearchResponse(response).     Cardinality count = response.getAggregations().get("cardinality").     assertThat(count, notNullValue()).     assertThat(count.getName(), equalTo("cardinality")).     assertCount(count, numDocs). }
false;public;0;12;;public void testSingleValuedNumeric() throws Exception {     SearchResponse response = client().prepareSearch("idx").setTypes("type").addAggregation(cardinality("cardinality").precisionThreshold(precisionThreshold).field(singleNumericField())).get().     assertSearchResponse(response).     Cardinality count = response.getAggregations().get("cardinality").     assertThat(count, notNullValue()).     assertThat(count.getName(), equalTo("cardinality")).     assertCount(count, numDocs). }
false;public;0;25;;public void testSingleValuedNumericGetProperty() throws Exception {     SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery()).addAggregation(global("global").subAggregation(cardinality("cardinality").precisionThreshold(precisionThreshold).field(singleNumericField()))).get().     assertSearchResponse(searchResponse).     Global global = searchResponse.getAggregations().get("global").     assertThat(global, notNullValue()).     assertThat(global.getName(), equalTo("global")).     // assertThat(global.getDocCount(), equalTo(numDocs)).     assertThat(global.getAggregations(), notNullValue()).     assertThat(global.getAggregations().asMap().size(), equalTo(1)).     Cardinality cardinality = global.getAggregations().get("cardinality").     assertThat(cardinality, notNullValue()).     assertThat(cardinality.getName(), equalTo("cardinality")).     long expectedValue = numDocs.     assertCount(cardinality, expectedValue).     assertThat(((InternalAggregation) global).getProperty("cardinality"), equalTo(cardinality)).     assertThat(((InternalAggregation) global).getProperty("cardinality.value"), equalTo((double) cardinality.getValue())).     assertThat((double) ((InternalAggregation) cardinality).getProperty("value"), equalTo((double) cardinality.getValue())). }
false;public;0;12;;public void testSingleValuedNumericHashed() throws Exception {     SearchResponse response = client().prepareSearch("idx").setTypes("type").addAggregation(cardinality("cardinality").precisionThreshold(precisionThreshold).field(singleNumericField())).get().     assertSearchResponse(response).     Cardinality count = response.getAggregations().get("cardinality").     assertThat(count, notNullValue()).     assertThat(count.getName(), equalTo("cardinality")).     assertCount(count, numDocs). }
false;public;0;12;;public void testMultiValuedString() throws Exception {     SearchResponse response = client().prepareSearch("idx").setTypes("type").addAggregation(cardinality("cardinality").precisionThreshold(precisionThreshold).field("str_values")).get().     assertSearchResponse(response).     Cardinality count = response.getAggregations().get("cardinality").     assertThat(count, notNullValue()).     assertThat(count.getName(), equalTo("cardinality")).     assertCount(count, numDocs * 2). }
false;public;0;12;;public void testMultiValuedNumeric() throws Exception {     SearchResponse response = client().prepareSearch("idx").setTypes("type").addAggregation(cardinality("cardinality").precisionThreshold(precisionThreshold).field(multiNumericField(false))).get().     assertSearchResponse(response).     Cardinality count = response.getAggregations().get("cardinality").     assertThat(count, notNullValue()).     assertThat(count.getName(), equalTo("cardinality")).     assertCount(count, numDocs * 2). }
false;public;0;12;;public void testMultiValuedNumericHashed() throws Exception {     SearchResponse response = client().prepareSearch("idx").setTypes("type").addAggregation(cardinality("cardinality").precisionThreshold(precisionThreshold).field(multiNumericField(true))).get().     assertSearchResponse(response).     Cardinality count = response.getAggregations().get("cardinality").     assertThat(count, notNullValue()).     assertThat(count.getName(), equalTo("cardinality")).     assertCount(count, numDocs * 2). }
false;public;0;15;;public void testSingleValuedStringScript() throws Exception {     SearchResponse response = client().prepareSearch("idx").setTypes("type").addAggregation(cardinality("cardinality").precisionThreshold(precisionThreshold).script(new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, "doc['str_value'].value", emptyMap()))).get().     assertSearchResponse(response).     Cardinality count = response.getAggregations().get("cardinality").     assertThat(count, notNullValue()).     assertThat(count.getName(), equalTo("cardinality")).     assertCount(count, numDocs). }
false;public;0;15;;public void testMultiValuedStringScript() throws Exception {     SearchResponse response = client().prepareSearch("idx").setTypes("type").addAggregation(cardinality("cardinality").precisionThreshold(precisionThreshold).script(new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, "doc['str_values']", emptyMap()))).get().     assertSearchResponse(response).     Cardinality count = response.getAggregations().get("cardinality").     assertThat(count, notNullValue()).     assertThat(count.getName(), equalTo("cardinality")).     assertCount(count, numDocs * 2). }
false;public;0;13;;public void testSingleValuedNumericScript() throws Exception {     Script script = new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, "doc[' + singleNumericField() + '].value", emptyMap()).     SearchResponse response = client().prepareSearch("idx").setTypes("type").addAggregation(cardinality("cardinality").precisionThreshold(precisionThreshold).script(script)).get().     assertSearchResponse(response).     Cardinality count = response.getAggregations().get("cardinality").     assertThat(count, notNullValue()).     assertThat(count.getName(), equalTo("cardinality")).     assertCount(count, numDocs). }
false;public;0;14;;public void testMultiValuedNumericScript() throws Exception {     Script script = new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, "doc[' + multiNumericField(false) + ']", Collections.emptyMap()).     SearchResponse response = client().prepareSearch("idx").setTypes("type").addAggregation(cardinality("cardinality").precisionThreshold(precisionThreshold).script(script)).get().     assertSearchResponse(response).     Cardinality count = response.getAggregations().get("cardinality").     assertThat(count, notNullValue()).     assertThat(count.getName(), equalTo("cardinality")).     assertCount(count, numDocs * 2). }
false;public;0;16;;public void testSingleValuedStringValueScript() throws Exception {     SearchResponse response = client().prepareSearch("idx").setTypes("type").addAggregation(cardinality("cardinality").precisionThreshold(precisionThreshold).field("str_value").script(new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, "_value", emptyMap()))).get().     assertSearchResponse(response).     Cardinality count = response.getAggregations().get("cardinality").     assertThat(count, notNullValue()).     assertThat(count.getName(), equalTo("cardinality")).     assertCount(count, numDocs). }
false;public;0;16;;public void testMultiValuedStringValueScript() throws Exception {     SearchResponse response = client().prepareSearch("idx").setTypes("type").addAggregation(cardinality("cardinality").precisionThreshold(precisionThreshold).field("str_values").script(new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, "_value", emptyMap()))).get().     assertSearchResponse(response).     Cardinality count = response.getAggregations().get("cardinality").     assertThat(count, notNullValue()).     assertThat(count.getName(), equalTo("cardinality")).     assertCount(count, numDocs * 2). }
false;public;0;16;;public void testSingleValuedNumericValueScript() throws Exception {     SearchResponse response = client().prepareSearch("idx").setTypes("type").addAggregation(cardinality("cardinality").precisionThreshold(precisionThreshold).field(singleNumericField()).script(new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, "_value", emptyMap()))).get().     assertSearchResponse(response).     Cardinality count = response.getAggregations().get("cardinality").     assertThat(count, notNullValue()).     assertThat(count.getName(), equalTo("cardinality")).     assertCount(count, numDocs). }
false;public;0;16;;public void testMultiValuedNumericValueScript() throws Exception {     SearchResponse response = client().prepareSearch("idx").setTypes("type").addAggregation(cardinality("cardinality").precisionThreshold(precisionThreshold).field(multiNumericField(false)).script(new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, "_value", emptyMap()))).get().     assertSearchResponse(response).     Cardinality count = response.getAggregations().get("cardinality").     assertThat(count, notNullValue()).     assertThat(count.getName(), equalTo("cardinality")).     assertCount(count, numDocs * 2). }
false;public;0;17;;public void testAsSubAgg() throws Exception {     SearchResponse response = client().prepareSearch("idx").setTypes("type").addAggregation(terms("terms").field("str_value").collectMode(randomFrom(SubAggCollectionMode.values())).subAggregation(cardinality("cardinality").precisionThreshold(precisionThreshold).field("str_values"))).get().     assertSearchResponse(response).     Terms terms = response.getAggregations().get("terms").     for (Terms.Bucket bucket : terms.getBuckets()) {         Cardinality count = bucket.getAggregations().get("cardinality").         assertThat(count, notNullValue()).         assertThat(count.getName(), equalTo("cardinality")).         assertCount(count, 2).     } }
true;public;0;35;/**  * Make sure that a request using a script does not get cached and a request  * not using a script does get cached.  */ ;/**  * Make sure that a request using a script does not get cached and a request  * not using a script does get cached.  */ public void testDontCacheScripts() throws Exception {     assertAcked(prepareCreate("cache_test_idx").addMapping("type", "d", "type=long").setSettings(Settings.builder().put("requests.cache.enable", true).put("number_of_shards", 1).put("number_of_replicas", 1)).get()).     indexRandom(true, client().prepareIndex("cache_test_idx", "type", "1").setSource("s", 1), client().prepareIndex("cache_test_idx", "type", "2").setSource("s", 2)).     // Make sure we are starting with a clear cache     assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache().getHitCount(), equalTo(0L)).     assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache().getMissCount(), equalTo(0L)).     // Test that a request using a script does not get cached     SearchResponse r = client().prepareSearch("cache_test_idx").setSize(0).addAggregation(cardinality("foo").field("d").script(new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, "_value", emptyMap()))).get().     assertSearchResponse(r).     assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache().getHitCount(), equalTo(0L)).     assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache().getMissCount(), equalTo(0L)).     // To make sure that the cache is working test that a request not using     // a script is cached     r = client().prepareSearch("cache_test_idx").setSize(0).addAggregation(cardinality("foo").field("d")).get().     assertSearchResponse(r).     assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache().getHitCount(), equalTo(0L)).     assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache().getMissCount(), equalTo(1L)). }
