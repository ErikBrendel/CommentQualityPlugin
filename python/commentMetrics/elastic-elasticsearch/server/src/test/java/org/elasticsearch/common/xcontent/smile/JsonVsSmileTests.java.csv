commented;modifiers;parameterAmount;loc;comment;code
false;public;0;35;;public void testCompareParsingTokens() throws IOException {     BytesStreamOutput xsonOs = new BytesStreamOutput().     XContentGenerator xsonGen = XContentFactory.xContent(XContentType.SMILE).createGenerator(xsonOs).     BytesStreamOutput jsonOs = new BytesStreamOutput().     XContentGenerator jsonGen = XContentFactory.xContent(XContentType.JSON).createGenerator(jsonOs).     xsonGen.writeStartObject().     jsonGen.writeStartObject().     xsonGen.writeStringField("test", "value").     jsonGen.writeStringField("test", "value").     xsonGen.writeFieldName("arr").     xsonGen.writeStartArray().     jsonGen.writeFieldName("arr").     jsonGen.writeStartArray().     xsonGen.writeNumber(1).     jsonGen.writeNumber(1).     xsonGen.writeNull().     jsonGen.writeNull().     xsonGen.writeEndArray().     jsonGen.writeEndArray().     xsonGen.writeEndObject().     jsonGen.writeEndObject().     xsonGen.close().     jsonGen.close().     try (XContentParser jsonParser = createParser(JsonXContent.jsonXContent, jsonOs.bytes()).         XContentParser smileParser = createParser(SmileXContent.smileXContent, xsonOs.bytes())) {         verifySameTokens(jsonParser, smileParser).     } }
false;private;2;23;;private void verifySameTokens(XContentParser parser1, XContentParser parser2) throws IOException {     while (true) {         XContentParser.Token token1 = parser1.nextToken().         XContentParser.Token token2 = parser2.nextToken().         if (token1 == null) {             assertThat(token2, nullValue()).             return.         }         assertThat(token1, equalTo(token2)).         switch(token1) {             case FIELD_NAME:                 assertThat(parser1.currentName(), equalTo(parser2.currentName())).                 break.             case VALUE_STRING:                 assertThat(parser1.text(), equalTo(parser2.text())).                 break.             case VALUE_NUMBER:                 assertThat(parser1.numberType(), equalTo(parser2.numberType())).                 assertThat(parser1.numberValue(), equalTo(parser2.numberValue())).                 break.         }     } }
