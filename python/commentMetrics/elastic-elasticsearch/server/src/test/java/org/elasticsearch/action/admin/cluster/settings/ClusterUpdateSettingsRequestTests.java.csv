commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public void testFromXContent() throws IOException {     doFromXContentTestWithRandomFields(false). }
false;public;0;3;;public void testFromXContentWithRandomFields() throws IOException {     doFromXContentTestWithRandomFields(true). }
false;private;1;24;;private void doFromXContentTestWithRandomFields(boolean addRandomFields) throws IOException {     final ClusterUpdateSettingsRequest request = createTestItem().     boolean humanReadable = randomBoolean().     final XContentType xContentType = XContentType.JSON.     BytesReference originalBytes = toShuffledXContent(request, xContentType, ToXContent.EMPTY_PARAMS, humanReadable).     if (addRandomFields) {         String unsupportedField = "unsupported_field".         BytesReference mutated = BytesReference.bytes(XContentTestUtils.insertIntoXContent(xContentType.xContent(), originalBytes, Collections.singletonList(""), () -> unsupportedField, () -> randomAlphaOfLengthBetween(3, 10))).         XContentParseException iae = expectThrows(XContentParseException.class, () -> ClusterUpdateSettingsRequest.fromXContent(createParser(xContentType.xContent(), mutated))).         assertThat(iae.getMessage(), containsString("[cluster_update_settings_request] unknown field [" + unsupportedField + "], parser not found")).     } else {         try (XContentParser parser = createParser(xContentType.xContent(), originalBytes)) {             ClusterUpdateSettingsRequest parsedRequest = ClusterUpdateSettingsRequest.fromXContent(parser).             assertNull(parser.nextToken()).             assertThat(parsedRequest.transientSettings(), equalTo(request.transientSettings())).             assertThat(parsedRequest.persistentSettings(), equalTo(request.persistentSettings())).         }     } }
false;private,static;0;6;;private static ClusterUpdateSettingsRequest createTestItem() {     ClusterUpdateSettingsRequest request = new ClusterUpdateSettingsRequest().     request.persistentSettings(ClusterUpdateSettingsResponseTests.randomClusterSettings(0, 2)).     request.transientSettings(ClusterUpdateSettingsResponseTests.randomClusterSettings(0, 2)).     return request. }
