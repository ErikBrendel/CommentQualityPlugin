# id;timestamp;commentText;codeText;commentWords;codeWords
AnalysisModuleTests -> public void testPluginPreConfiguredTokenizers() throws IOException;1524684173;Tests that plugins can register pre-configured token filters that vary in behavior based on Elasticsearch version, Lucene version,_and that do not vary based on version at all.;public void testPluginPreConfiguredTokenizers() throws IOException {_        boolean noVersionSupportsMultiTerm = randomBoolean()__        boolean luceneVersionSupportsMultiTerm = randomBoolean()__        boolean elasticsearchVersionSupportsMultiTerm = randomBoolean()___        _        final class FixedTokenizer extends Tokenizer {_            private final CharTermAttribute term = addAttribute(CharTermAttribute.class)__            private final char[] chars__            private boolean read = false___            protected FixedTokenizer(String chars) {_                this.chars = chars.toCharArray()__            }__            @Override_            public boolean incrementToken() throws IOException {_                if (read) {_                    return false__                }_                clearAttributes()__                read = true__                term.resizeBuffer(chars.length)__                System.arraycopy(chars, 0, term.buffer(), 0, chars.length)__                term.setLength(chars.length)__                return true__            }__            @Override_            public void reset() throws IOException {_                super.reset()__                read = false__            }_        }_        AnalysisRegistry registry = new AnalysisModule(TestEnvironment.newEnvironment(emptyNodeSettings),_                singletonList(new AnalysisPlugin() {_            @Override_            public List<PreConfiguredTokenizer> getPreConfiguredTokenizers() {_                return Arrays.asList(_                        PreConfiguredTokenizer.singleton("no_version", () -> new FixedTokenizer("no_version"),_                                noVersionSupportsMultiTerm ? () -> AppendTokenFilter.factoryForSuffix("no_version") : null),_                        PreConfiguredTokenizer.luceneVersion("lucene_version",_                                luceneVersion -> new FixedTokenizer(luceneVersion.toString()),_                                luceneVersionSupportsMultiTerm ?_                                        luceneVersion -> AppendTokenFilter.factoryForSuffix(luceneVersion.toString()) : null),_                        PreConfiguredTokenizer.elasticsearchVersion("elasticsearch_version",_                                esVersion -> new FixedTokenizer(esVersion.toString()),_                                elasticsearchVersionSupportsMultiTerm ?_                                        esVersion -> AppendTokenFilter.factoryForSuffix(esVersion.toString()) : null)_                        )__            }_        })).getAnalysisRegistry()___        Version version = VersionUtils.randomVersion(random())__        IndexAnalyzers analyzers = getIndexAnalyzers(registry, Settings.builder()_                .put("index.analysis.analyzer.no_version.tokenizer", "no_version")_                .put("index.analysis.analyzer.lucene_version.tokenizer", "lucene_version")_                .put("index.analysis.analyzer.elasticsearch_version.tokenizer", "elasticsearch_version")_                .put(IndexMetaData.SETTING_VERSION_CREATED, version)_                .build())__        assertTokenStreamContents(analyzers.get("no_version").tokenStream("", "test"), new String[] {"no_version"})__        assertTokenStreamContents(analyzers.get("lucene_version").tokenStream("", "test"), new String[] {version.luceneVersion.toString()})__        assertTokenStreamContents(analyzers.get("elasticsearch_version").tokenStream("", "test"), new String[] {version.toString()})___        _______    };tests,that,plugins,can,register,pre,configured,token,filters,that,vary,in,behavior,based,on,elasticsearch,version,lucene,version,and,that,do,not,vary,based,on,version,at,all;public,void,test,plugin,pre,configured,tokenizers,throws,ioexception,boolean,no,version,supports,multi,term,random,boolean,boolean,lucene,version,supports,multi,term,random,boolean,boolean,elasticsearch,version,supports,multi,term,random,boolean,final,class,fixed,tokenizer,extends,tokenizer,private,final,char,term,attribute,term,add,attribute,char,term,attribute,class,private,final,char,chars,private,boolean,read,false,protected,fixed,tokenizer,string,chars,this,chars,chars,to,char,array,override,public,boolean,increment,token,throws,ioexception,if,read,return,false,clear,attributes,read,true,term,resize,buffer,chars,length,system,arraycopy,chars,0,term,buffer,0,chars,length,term,set,length,chars,length,return,true,override,public,void,reset,throws,ioexception,super,reset,read,false,analysis,registry,registry,new,analysis,module,test,environment,new,environment,empty,node,settings,singleton,list,new,analysis,plugin,override,public,list,pre,configured,tokenizer,get,pre,configured,tokenizers,return,arrays,as,list,pre,configured,tokenizer,singleton,new,fixed,tokenizer,no,version,supports,multi,term,append,token,filter,factory,for,suffix,null,pre,configured,tokenizer,lucene,version,lucene,version,new,fixed,tokenizer,lucene,version,to,string,lucene,version,supports,multi,term,lucene,version,append,token,filter,factory,for,suffix,lucene,version,to,string,null,pre,configured,tokenizer,elasticsearch,version,es,version,new,fixed,tokenizer,es,version,to,string,elasticsearch,version,supports,multi,term,es,version,append,token,filter,factory,for,suffix,es,version,to,string,null,get,analysis,registry,version,version,version,utils,random,version,random,index,analyzers,analyzers,get,index,analyzers,registry,settings,builder,put,index,analysis,analyzer,tokenizer,put,index,analysis,analyzer,tokenizer,put,index,analysis,analyzer,tokenizer,put,index,meta,data,version,build,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,version,lucene,version,to,string,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,version,to,string
AnalysisModuleTests -> public void testPluginPreConfiguredTokenizers() throws IOException;1527622193;Tests that plugins can register pre-configured token filters that vary in behavior based on Elasticsearch version, Lucene version,_and that do not vary based on version at all.;public void testPluginPreConfiguredTokenizers() throws IOException {_        boolean noVersionSupportsMultiTerm = randomBoolean()__        boolean luceneVersionSupportsMultiTerm = randomBoolean()__        boolean elasticsearchVersionSupportsMultiTerm = randomBoolean()___        _        final class FixedTokenizer extends Tokenizer {_            private final CharTermAttribute term = addAttribute(CharTermAttribute.class)__            private final char[] chars__            private boolean read = false___            protected FixedTokenizer(String chars) {_                this.chars = chars.toCharArray()__            }__            @Override_            public boolean incrementToken() throws IOException {_                if (read) {_                    return false__                }_                clearAttributes()__                read = true__                term.resizeBuffer(chars.length)__                System.arraycopy(chars, 0, term.buffer(), 0, chars.length)__                term.setLength(chars.length)__                return true__            }__            @Override_            public void reset() throws IOException {_                super.reset()__                read = false__            }_        }_        AnalysisRegistry registry = new AnalysisModule(TestEnvironment.newEnvironment(emptyNodeSettings),_                singletonList(new AnalysisPlugin() {_            @Override_            public List<PreConfiguredTokenizer> getPreConfiguredTokenizers() {_                return Arrays.asList(_                        PreConfiguredTokenizer.singleton("no_version", () -> new FixedTokenizer("no_version"),_                                noVersionSupportsMultiTerm ? () -> AppendTokenFilter.factoryForSuffix("no_version") : null),_                        PreConfiguredTokenizer.luceneVersion("lucene_version",_                                luceneVersion -> new FixedTokenizer(luceneVersion.toString()),_                                luceneVersionSupportsMultiTerm ?_                                        luceneVersion -> AppendTokenFilter.factoryForSuffix(luceneVersion.toString()) : null),_                        PreConfiguredTokenizer.elasticsearchVersion("elasticsearch_version",_                                esVersion -> new FixedTokenizer(esVersion.toString()),_                                elasticsearchVersionSupportsMultiTerm ?_                                        esVersion -> AppendTokenFilter.factoryForSuffix(esVersion.toString()) : null)_                        )__            }_        })).getAnalysisRegistry()___        Version version = VersionUtils.randomVersion(random())__        IndexAnalyzers analyzers = getIndexAnalyzers(registry, Settings.builder()_                .put("index.analysis.analyzer.no_version.tokenizer", "no_version")_                .put("index.analysis.analyzer.lucene_version.tokenizer", "lucene_version")_                .put("index.analysis.analyzer.elasticsearch_version.tokenizer", "elasticsearch_version")_                .put(IndexMetaData.SETTING_VERSION_CREATED, version)_                .build())__        assertTokenStreamContents(analyzers.get("no_version").tokenStream("", "test"), new String[] {"no_version"})__        assertTokenStreamContents(analyzers.get("lucene_version").tokenStream("", "test"), new String[] {version.luceneVersion.toString()})__        assertTokenStreamContents(analyzers.get("elasticsearch_version").tokenStream("", "test"), new String[] {version.toString()})___        _______    };tests,that,plugins,can,register,pre,configured,token,filters,that,vary,in,behavior,based,on,elasticsearch,version,lucene,version,and,that,do,not,vary,based,on,version,at,all;public,void,test,plugin,pre,configured,tokenizers,throws,ioexception,boolean,no,version,supports,multi,term,random,boolean,boolean,lucene,version,supports,multi,term,random,boolean,boolean,elasticsearch,version,supports,multi,term,random,boolean,final,class,fixed,tokenizer,extends,tokenizer,private,final,char,term,attribute,term,add,attribute,char,term,attribute,class,private,final,char,chars,private,boolean,read,false,protected,fixed,tokenizer,string,chars,this,chars,chars,to,char,array,override,public,boolean,increment,token,throws,ioexception,if,read,return,false,clear,attributes,read,true,term,resize,buffer,chars,length,system,arraycopy,chars,0,term,buffer,0,chars,length,term,set,length,chars,length,return,true,override,public,void,reset,throws,ioexception,super,reset,read,false,analysis,registry,registry,new,analysis,module,test,environment,new,environment,empty,node,settings,singleton,list,new,analysis,plugin,override,public,list,pre,configured,tokenizer,get,pre,configured,tokenizers,return,arrays,as,list,pre,configured,tokenizer,singleton,new,fixed,tokenizer,no,version,supports,multi,term,append,token,filter,factory,for,suffix,null,pre,configured,tokenizer,lucene,version,lucene,version,new,fixed,tokenizer,lucene,version,to,string,lucene,version,supports,multi,term,lucene,version,append,token,filter,factory,for,suffix,lucene,version,to,string,null,pre,configured,tokenizer,elasticsearch,version,es,version,new,fixed,tokenizer,es,version,to,string,elasticsearch,version,supports,multi,term,es,version,append,token,filter,factory,for,suffix,es,version,to,string,null,get,analysis,registry,version,version,version,utils,random,version,random,index,analyzers,analyzers,get,index,analyzers,registry,settings,builder,put,index,analysis,analyzer,tokenizer,put,index,analysis,analyzer,tokenizer,put,index,analysis,analyzer,tokenizer,put,index,meta,data,version,build,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,version,lucene,version,to,string,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,version,to,string
AnalysisModuleTests -> public void testPluginPreConfiguredTokenizers() throws IOException;1529341607;Tests that plugins can register pre-configured token filters that vary in behavior based on Elasticsearch version, Lucene version,_and that do not vary based on version at all.;public void testPluginPreConfiguredTokenizers() throws IOException {_        boolean noVersionSupportsMultiTerm = randomBoolean()__        boolean luceneVersionSupportsMultiTerm = randomBoolean()__        boolean elasticsearchVersionSupportsMultiTerm = randomBoolean()___        _        final class FixedTokenizer extends Tokenizer {_            private final CharTermAttribute term = addAttribute(CharTermAttribute.class)__            private final char[] chars__            private boolean read = false___            protected FixedTokenizer(String chars) {_                this.chars = chars.toCharArray()__            }__            @Override_            public boolean incrementToken() throws IOException {_                if (read) {_                    return false__                }_                clearAttributes()__                read = true__                term.resizeBuffer(chars.length)__                System.arraycopy(chars, 0, term.buffer(), 0, chars.length)__                term.setLength(chars.length)__                return true__            }__            @Override_            public void reset() throws IOException {_                super.reset()__                read = false__            }_        }_        AnalysisRegistry registry = new AnalysisModule(TestEnvironment.newEnvironment(emptyNodeSettings),_                singletonList(new AnalysisPlugin() {_            @Override_            public List<PreConfiguredTokenizer> getPreConfiguredTokenizers() {_                return Arrays.asList(_                        PreConfiguredTokenizer.singleton("no_version", () -> new FixedTokenizer("no_version"),_                                noVersionSupportsMultiTerm ? () -> AppendTokenFilter.factoryForSuffix("no_version") : null),_                        PreConfiguredTokenizer.luceneVersion("lucene_version",_                                luceneVersion -> new FixedTokenizer(luceneVersion.toString()),_                                luceneVersionSupportsMultiTerm ?_                                        luceneVersion -> AppendTokenFilter.factoryForSuffix(luceneVersion.toString()) : null),_                        PreConfiguredTokenizer.elasticsearchVersion("elasticsearch_version",_                                esVersion -> new FixedTokenizer(esVersion.toString()),_                                elasticsearchVersionSupportsMultiTerm ?_                                        esVersion -> AppendTokenFilter.factoryForSuffix(esVersion.toString()) : null)_                        )__            }_        })).getAnalysisRegistry()___        Version version = VersionUtils.randomVersion(random())__        IndexAnalyzers analyzers = getIndexAnalyzers(registry, Settings.builder()_                .put("index.analysis.analyzer.no_version.tokenizer", "no_version")_                .put("index.analysis.analyzer.lucene_version.tokenizer", "lucene_version")_                .put("index.analysis.analyzer.elasticsearch_version.tokenizer", "elasticsearch_version")_                .put(IndexMetaData.SETTING_VERSION_CREATED, version)_                .build())__        assertTokenStreamContents(analyzers.get("no_version").tokenStream("", "test"), new String[] {"no_version"})__        assertTokenStreamContents(analyzers.get("lucene_version").tokenStream("", "test"), new String[] {version.luceneVersion.toString()})__        assertTokenStreamContents(analyzers.get("elasticsearch_version").tokenStream("", "test"), new String[] {version.toString()})___        _______    };tests,that,plugins,can,register,pre,configured,token,filters,that,vary,in,behavior,based,on,elasticsearch,version,lucene,version,and,that,do,not,vary,based,on,version,at,all;public,void,test,plugin,pre,configured,tokenizers,throws,ioexception,boolean,no,version,supports,multi,term,random,boolean,boolean,lucene,version,supports,multi,term,random,boolean,boolean,elasticsearch,version,supports,multi,term,random,boolean,final,class,fixed,tokenizer,extends,tokenizer,private,final,char,term,attribute,term,add,attribute,char,term,attribute,class,private,final,char,chars,private,boolean,read,false,protected,fixed,tokenizer,string,chars,this,chars,chars,to,char,array,override,public,boolean,increment,token,throws,ioexception,if,read,return,false,clear,attributes,read,true,term,resize,buffer,chars,length,system,arraycopy,chars,0,term,buffer,0,chars,length,term,set,length,chars,length,return,true,override,public,void,reset,throws,ioexception,super,reset,read,false,analysis,registry,registry,new,analysis,module,test,environment,new,environment,empty,node,settings,singleton,list,new,analysis,plugin,override,public,list,pre,configured,tokenizer,get,pre,configured,tokenizers,return,arrays,as,list,pre,configured,tokenizer,singleton,new,fixed,tokenizer,no,version,supports,multi,term,append,token,filter,factory,for,suffix,null,pre,configured,tokenizer,lucene,version,lucene,version,new,fixed,tokenizer,lucene,version,to,string,lucene,version,supports,multi,term,lucene,version,append,token,filter,factory,for,suffix,lucene,version,to,string,null,pre,configured,tokenizer,elasticsearch,version,es,version,new,fixed,tokenizer,es,version,to,string,elasticsearch,version,supports,multi,term,es,version,append,token,filter,factory,for,suffix,es,version,to,string,null,get,analysis,registry,version,version,version,utils,random,version,random,index,analyzers,analyzers,get,index,analyzers,registry,settings,builder,put,index,analysis,analyzer,tokenizer,put,index,analysis,analyzer,tokenizer,put,index,analysis,analyzer,tokenizer,put,index,meta,data,version,build,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,version,lucene,version,to,string,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,version,to,string
AnalysisModuleTests -> public void testPluginPreConfiguredTokenizers() throws IOException;1535139672;Tests that plugins can register pre-configured token filters that vary in behavior based on Elasticsearch version, Lucene version,_and that do not vary based on version at all.;public void testPluginPreConfiguredTokenizers() throws IOException {_        boolean noVersionSupportsMultiTerm = randomBoolean()__        boolean luceneVersionSupportsMultiTerm = randomBoolean()__        boolean elasticsearchVersionSupportsMultiTerm = randomBoolean()___        _        final class FixedTokenizer extends Tokenizer {_            private final CharTermAttribute term = addAttribute(CharTermAttribute.class)__            private final char[] chars__            private boolean read = false___            protected FixedTokenizer(String chars) {_                this.chars = chars.toCharArray()__            }__            @Override_            public boolean incrementToken() throws IOException {_                if (read) {_                    return false__                }_                clearAttributes()__                read = true__                term.resizeBuffer(chars.length)__                System.arraycopy(chars, 0, term.buffer(), 0, chars.length)__                term.setLength(chars.length)__                return true__            }__            @Override_            public void reset() throws IOException {_                super.reset()__                read = false__            }_        }_        AnalysisRegistry registry = new AnalysisModule(TestEnvironment.newEnvironment(emptyNodeSettings),_                singletonList(new AnalysisPlugin() {_            @Override_            public List<PreConfiguredTokenizer> getPreConfiguredTokenizers() {_                return Arrays.asList(_                        PreConfiguredTokenizer.singleton("no_version", () -> new FixedTokenizer("no_version"),_                                noVersionSupportsMultiTerm ? () -> AppendTokenFilter.factoryForSuffix("no_version") : null),_                        PreConfiguredTokenizer.luceneVersion("lucene_version",_                                luceneVersion -> new FixedTokenizer(luceneVersion.toString()),_                                luceneVersionSupportsMultiTerm ?_                                        luceneVersion -> AppendTokenFilter.factoryForSuffix(luceneVersion.toString()) : null),_                        PreConfiguredTokenizer.elasticsearchVersion("elasticsearch_version",_                                esVersion -> new FixedTokenizer(esVersion.toString()),_                                elasticsearchVersionSupportsMultiTerm ?_                                        esVersion -> AppendTokenFilter.factoryForSuffix(esVersion.toString()) : null)_                        )__            }_        })).getAnalysisRegistry()___        Version version = VersionUtils.randomVersion(random())__        IndexAnalyzers analyzers = getIndexAnalyzers(registry, Settings.builder()_                .put("index.analysis.analyzer.no_version.tokenizer", "no_version")_                .put("index.analysis.analyzer.lucene_version.tokenizer", "lucene_version")_                .put("index.analysis.analyzer.elasticsearch_version.tokenizer", "elasticsearch_version")_                .put(IndexMetaData.SETTING_VERSION_CREATED, version)_                .build())__        assertTokenStreamContents(analyzers.get("no_version").tokenStream("", "test"), new String[] {"no_version"})__        assertTokenStreamContents(analyzers.get("lucene_version").tokenStream("", "test"), new String[] {version.luceneVersion.toString()})__        assertTokenStreamContents(analyzers.get("elasticsearch_version").tokenStream("", "test"), new String[] {version.toString()})___        _______    };tests,that,plugins,can,register,pre,configured,token,filters,that,vary,in,behavior,based,on,elasticsearch,version,lucene,version,and,that,do,not,vary,based,on,version,at,all;public,void,test,plugin,pre,configured,tokenizers,throws,ioexception,boolean,no,version,supports,multi,term,random,boolean,boolean,lucene,version,supports,multi,term,random,boolean,boolean,elasticsearch,version,supports,multi,term,random,boolean,final,class,fixed,tokenizer,extends,tokenizer,private,final,char,term,attribute,term,add,attribute,char,term,attribute,class,private,final,char,chars,private,boolean,read,false,protected,fixed,tokenizer,string,chars,this,chars,chars,to,char,array,override,public,boolean,increment,token,throws,ioexception,if,read,return,false,clear,attributes,read,true,term,resize,buffer,chars,length,system,arraycopy,chars,0,term,buffer,0,chars,length,term,set,length,chars,length,return,true,override,public,void,reset,throws,ioexception,super,reset,read,false,analysis,registry,registry,new,analysis,module,test,environment,new,environment,empty,node,settings,singleton,list,new,analysis,plugin,override,public,list,pre,configured,tokenizer,get,pre,configured,tokenizers,return,arrays,as,list,pre,configured,tokenizer,singleton,new,fixed,tokenizer,no,version,supports,multi,term,append,token,filter,factory,for,suffix,null,pre,configured,tokenizer,lucene,version,lucene,version,new,fixed,tokenizer,lucene,version,to,string,lucene,version,supports,multi,term,lucene,version,append,token,filter,factory,for,suffix,lucene,version,to,string,null,pre,configured,tokenizer,elasticsearch,version,es,version,new,fixed,tokenizer,es,version,to,string,elasticsearch,version,supports,multi,term,es,version,append,token,filter,factory,for,suffix,es,version,to,string,null,get,analysis,registry,version,version,version,utils,random,version,random,index,analyzers,analyzers,get,index,analyzers,registry,settings,builder,put,index,analysis,analyzer,tokenizer,put,index,analysis,analyzer,tokenizer,put,index,analysis,analyzer,tokenizer,put,index,meta,data,version,build,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,version,lucene,version,to,string,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,version,to,string
AnalysisModuleTests -> public void testPluginPreConfiguredTokenizers() throws IOException;1536314350;Tests that plugins can register pre-configured token filters that vary in behavior based on Elasticsearch version, Lucene version,_and that do not vary based on version at all.;public void testPluginPreConfiguredTokenizers() throws IOException {_        boolean noVersionSupportsMultiTerm = randomBoolean()__        boolean luceneVersionSupportsMultiTerm = randomBoolean()__        boolean elasticsearchVersionSupportsMultiTerm = randomBoolean()___        _        final class FixedTokenizer extends Tokenizer {_            private final CharTermAttribute term = addAttribute(CharTermAttribute.class)__            private final char[] chars__            private boolean read = false___            protected FixedTokenizer(String chars) {_                this.chars = chars.toCharArray()__            }__            @Override_            public boolean incrementToken() throws IOException {_                if (read) {_                    return false__                }_                clearAttributes()__                read = true__                term.resizeBuffer(chars.length)__                System.arraycopy(chars, 0, term.buffer(), 0, chars.length)__                term.setLength(chars.length)__                return true__            }__            @Override_            public void reset() throws IOException {_                super.reset()__                read = false__            }_        }_        AnalysisRegistry registry = new AnalysisModule(TestEnvironment.newEnvironment(emptyNodeSettings),_            singletonList(new AnalysisPlugin() {_                @Override_                public List<PreConfiguredTokenizer> getPreConfiguredTokenizers() {_                    return Arrays.asList(_                        PreConfiguredTokenizer.singleton("no_version", () -> new FixedTokenizer("no_version"),_                            noVersionSupportsMultiTerm ? () -> AppendTokenFilter.factoryForSuffix("no_version") : null),_                        PreConfiguredTokenizer.luceneVersion("lucene_version",_                            luceneVersion -> new FixedTokenizer(luceneVersion.toString()),_                            luceneVersionSupportsMultiTerm ?_                                luceneVersion -> AppendTokenFilter.factoryForSuffix(luceneVersion.toString()) : null),_                        PreConfiguredTokenizer.elasticsearchVersion("elasticsearch_version",_                            esVersion -> new FixedTokenizer(esVersion.toString()),_                            elasticsearchVersionSupportsMultiTerm ?_                                esVersion -> AppendTokenFilter.factoryForSuffix(esVersion.toString()) : null)_                    )__                }_            })).getAnalysisRegistry()___        Version version = VersionUtils.randomVersion(random())__        IndexAnalyzers analyzers = getIndexAnalyzers(registry, Settings.builder()_            .put("index.analysis.analyzer.no_version.tokenizer", "no_version")_            .put("index.analysis.analyzer.lucene_version.tokenizer", "lucene_version")_            .put("index.analysis.analyzer.elasticsearch_version.tokenizer", "elasticsearch_version")_            .put(IndexMetaData.SETTING_VERSION_CREATED, version)_            .build())__        assertTokenStreamContents(analyzers.get("no_version").tokenStream("", "test"), new String[]{"no_version"})__        assertTokenStreamContents(analyzers.get("lucene_version").tokenStream("", "test"), new String[]{version.luceneVersion.toString()})__        assertTokenStreamContents(analyzers.get("elasticsearch_version").tokenStream("", "test"), new String[]{version.toString()})___        _______    };tests,that,plugins,can,register,pre,configured,token,filters,that,vary,in,behavior,based,on,elasticsearch,version,lucene,version,and,that,do,not,vary,based,on,version,at,all;public,void,test,plugin,pre,configured,tokenizers,throws,ioexception,boolean,no,version,supports,multi,term,random,boolean,boolean,lucene,version,supports,multi,term,random,boolean,boolean,elasticsearch,version,supports,multi,term,random,boolean,final,class,fixed,tokenizer,extends,tokenizer,private,final,char,term,attribute,term,add,attribute,char,term,attribute,class,private,final,char,chars,private,boolean,read,false,protected,fixed,tokenizer,string,chars,this,chars,chars,to,char,array,override,public,boolean,increment,token,throws,ioexception,if,read,return,false,clear,attributes,read,true,term,resize,buffer,chars,length,system,arraycopy,chars,0,term,buffer,0,chars,length,term,set,length,chars,length,return,true,override,public,void,reset,throws,ioexception,super,reset,read,false,analysis,registry,registry,new,analysis,module,test,environment,new,environment,empty,node,settings,singleton,list,new,analysis,plugin,override,public,list,pre,configured,tokenizer,get,pre,configured,tokenizers,return,arrays,as,list,pre,configured,tokenizer,singleton,new,fixed,tokenizer,no,version,supports,multi,term,append,token,filter,factory,for,suffix,null,pre,configured,tokenizer,lucene,version,lucene,version,new,fixed,tokenizer,lucene,version,to,string,lucene,version,supports,multi,term,lucene,version,append,token,filter,factory,for,suffix,lucene,version,to,string,null,pre,configured,tokenizer,elasticsearch,version,es,version,new,fixed,tokenizer,es,version,to,string,elasticsearch,version,supports,multi,term,es,version,append,token,filter,factory,for,suffix,es,version,to,string,null,get,analysis,registry,version,version,version,utils,random,version,random,index,analyzers,analyzers,get,index,analyzers,registry,settings,builder,put,index,analysis,analyzer,tokenizer,put,index,analysis,analyzer,tokenizer,put,index,analysis,analyzer,tokenizer,put,index,meta,data,version,build,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,version,lucene,version,to,string,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,version,to,string
AnalysisModuleTests -> public void testPluginPreConfiguredTokenizers() throws IOException;1541592065;Tests that plugins can register pre-configured token filters that vary in behavior based on Elasticsearch version, Lucene version,_and that do not vary based on version at all.;public void testPluginPreConfiguredTokenizers() throws IOException {_        boolean noVersionSupportsMultiTerm = randomBoolean()__        boolean luceneVersionSupportsMultiTerm = randomBoolean()__        boolean elasticsearchVersionSupportsMultiTerm = randomBoolean()___        _        final class FixedTokenizer extends Tokenizer {_            private final CharTermAttribute term = addAttribute(CharTermAttribute.class)__            private final char[] chars__            private boolean read = false___            protected FixedTokenizer(String chars) {_                this.chars = chars.toCharArray()__            }__            @Override_            public boolean incrementToken() throws IOException {_                if (read) {_                    return false__                }_                clearAttributes()__                read = true__                term.resizeBuffer(chars.length)__                System.arraycopy(chars, 0, term.buffer(), 0, chars.length)__                term.setLength(chars.length)__                return true__            }__            @Override_            public void reset() throws IOException {_                super.reset()__                read = false__            }_        }_        AnalysisRegistry registry = new AnalysisModule(TestEnvironment.newEnvironment(emptyNodeSettings),_            singletonList(new AnalysisPlugin() {_                @Override_                public List<PreConfiguredTokenizer> getPreConfiguredTokenizers() {_                    return Arrays.asList(_                        PreConfiguredTokenizer.singleton("no_version", () -> new FixedTokenizer("no_version"),_                            noVersionSupportsMultiTerm ? () -> AppendTokenFilter.factoryForSuffix("no_version") : null),_                        PreConfiguredTokenizer.luceneVersion("lucene_version",_                            luceneVersion -> new FixedTokenizer(luceneVersion.toString()),_                            luceneVersionSupportsMultiTerm ?_                                luceneVersion -> AppendTokenFilter.factoryForSuffix(luceneVersion.toString()) : null),_                        PreConfiguredTokenizer.elasticsearchVersion("elasticsearch_version",_                            esVersion -> new FixedTokenizer(esVersion.toString()),_                            elasticsearchVersionSupportsMultiTerm ?_                                esVersion -> AppendTokenFilter.factoryForSuffix(esVersion.toString()) : null)_                    )__                }_            })).getAnalysisRegistry()___        Version version = VersionUtils.randomVersion(random())__        IndexAnalyzers analyzers = getIndexAnalyzers(registry, Settings.builder()_            .put("index.analysis.analyzer.no_version.tokenizer", "no_version")_            .put("index.analysis.analyzer.lucene_version.tokenizer", "lucene_version")_            .put("index.analysis.analyzer.elasticsearch_version.tokenizer", "elasticsearch_version")_            .put(IndexMetaData.SETTING_VERSION_CREATED, version)_            .build())__        assertTokenStreamContents(analyzers.get("no_version").tokenStream("", "test"), new String[]{"no_version"})__        assertTokenStreamContents(analyzers.get("lucene_version").tokenStream("", "test"), new String[]{version.luceneVersion.toString()})__        assertTokenStreamContents(analyzers.get("elasticsearch_version").tokenStream("", "test"), new String[]{version.toString()})___        _______    };tests,that,plugins,can,register,pre,configured,token,filters,that,vary,in,behavior,based,on,elasticsearch,version,lucene,version,and,that,do,not,vary,based,on,version,at,all;public,void,test,plugin,pre,configured,tokenizers,throws,ioexception,boolean,no,version,supports,multi,term,random,boolean,boolean,lucene,version,supports,multi,term,random,boolean,boolean,elasticsearch,version,supports,multi,term,random,boolean,final,class,fixed,tokenizer,extends,tokenizer,private,final,char,term,attribute,term,add,attribute,char,term,attribute,class,private,final,char,chars,private,boolean,read,false,protected,fixed,tokenizer,string,chars,this,chars,chars,to,char,array,override,public,boolean,increment,token,throws,ioexception,if,read,return,false,clear,attributes,read,true,term,resize,buffer,chars,length,system,arraycopy,chars,0,term,buffer,0,chars,length,term,set,length,chars,length,return,true,override,public,void,reset,throws,ioexception,super,reset,read,false,analysis,registry,registry,new,analysis,module,test,environment,new,environment,empty,node,settings,singleton,list,new,analysis,plugin,override,public,list,pre,configured,tokenizer,get,pre,configured,tokenizers,return,arrays,as,list,pre,configured,tokenizer,singleton,new,fixed,tokenizer,no,version,supports,multi,term,append,token,filter,factory,for,suffix,null,pre,configured,tokenizer,lucene,version,lucene,version,new,fixed,tokenizer,lucene,version,to,string,lucene,version,supports,multi,term,lucene,version,append,token,filter,factory,for,suffix,lucene,version,to,string,null,pre,configured,tokenizer,elasticsearch,version,es,version,new,fixed,tokenizer,es,version,to,string,elasticsearch,version,supports,multi,term,es,version,append,token,filter,factory,for,suffix,es,version,to,string,null,get,analysis,registry,version,version,version,utils,random,version,random,index,analyzers,analyzers,get,index,analyzers,registry,settings,builder,put,index,analysis,analyzer,tokenizer,put,index,analysis,analyzer,tokenizer,put,index,analysis,analyzer,tokenizer,put,index,meta,data,version,build,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,version,lucene,version,to,string,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,version,to,string
AnalysisModuleTests -> public void testPluginPreConfiguredTokenizers() throws IOException;1542897779;Tests that plugins can register pre-configured token filters that vary in behavior based on Elasticsearch version, Lucene version,_and that do not vary based on version at all.;public void testPluginPreConfiguredTokenizers() throws IOException {__        _        final class FixedTokenizer extends Tokenizer {_            private final CharTermAttribute term = addAttribute(CharTermAttribute.class)__            private final char[] chars__            private boolean read = false___            protected FixedTokenizer(String chars) {_                this.chars = chars.toCharArray()__            }__            @Override_            public boolean incrementToken() throws IOException {_                if (read) {_                    return false__                }_                clearAttributes()__                read = true__                term.resizeBuffer(chars.length)__                System.arraycopy(chars, 0, term.buffer(), 0, chars.length)__                term.setLength(chars.length)__                return true__            }__            @Override_            public void reset() throws IOException {_                super.reset()__                read = false__            }_        }_        AnalysisRegistry registry = new AnalysisModule(TestEnvironment.newEnvironment(emptyNodeSettings),_            singletonList(new AnalysisPlugin() {_                @Override_                public List<PreConfiguredTokenizer> getPreConfiguredTokenizers() {_                    return Arrays.asList(_                        PreConfiguredTokenizer.singleton("no_version", () -> new FixedTokenizer("no_version")),_                        PreConfiguredTokenizer.luceneVersion("lucene_version",_                            luceneVersion -> new FixedTokenizer(luceneVersion.toString())),_                        PreConfiguredTokenizer.elasticsearchVersion("elasticsearch_version",_                            esVersion -> new FixedTokenizer(esVersion.toString()))_                    )__                }_            })).getAnalysisRegistry()___        Version version = VersionUtils.randomVersion(random())__        IndexAnalyzers analyzers = getIndexAnalyzers(registry, Settings.builder()_            .put("index.analysis.analyzer.no_version.tokenizer", "no_version")_            .put("index.analysis.analyzer.lucene_version.tokenizer", "lucene_version")_            .put("index.analysis.analyzer.elasticsearch_version.tokenizer", "elasticsearch_version")_            .put(IndexMetaData.SETTING_VERSION_CREATED, version)_            .build())__        assertTokenStreamContents(analyzers.get("no_version").tokenStream("", "test"), new String[]{"no_version"})__        assertTokenStreamContents(analyzers.get("lucene_version").tokenStream("", "test"), new String[]{version.luceneVersion.toString()})__        assertTokenStreamContents(analyzers.get("elasticsearch_version").tokenStream("", "test"), new String[]{version.toString()})___        _______    };tests,that,plugins,can,register,pre,configured,token,filters,that,vary,in,behavior,based,on,elasticsearch,version,lucene,version,and,that,do,not,vary,based,on,version,at,all;public,void,test,plugin,pre,configured,tokenizers,throws,ioexception,final,class,fixed,tokenizer,extends,tokenizer,private,final,char,term,attribute,term,add,attribute,char,term,attribute,class,private,final,char,chars,private,boolean,read,false,protected,fixed,tokenizer,string,chars,this,chars,chars,to,char,array,override,public,boolean,increment,token,throws,ioexception,if,read,return,false,clear,attributes,read,true,term,resize,buffer,chars,length,system,arraycopy,chars,0,term,buffer,0,chars,length,term,set,length,chars,length,return,true,override,public,void,reset,throws,ioexception,super,reset,read,false,analysis,registry,registry,new,analysis,module,test,environment,new,environment,empty,node,settings,singleton,list,new,analysis,plugin,override,public,list,pre,configured,tokenizer,get,pre,configured,tokenizers,return,arrays,as,list,pre,configured,tokenizer,singleton,new,fixed,tokenizer,pre,configured,tokenizer,lucene,version,lucene,version,new,fixed,tokenizer,lucene,version,to,string,pre,configured,tokenizer,elasticsearch,version,es,version,new,fixed,tokenizer,es,version,to,string,get,analysis,registry,version,version,version,utils,random,version,random,index,analyzers,analyzers,get,index,analyzers,registry,settings,builder,put,index,analysis,analyzer,tokenizer,put,index,analysis,analyzer,tokenizer,put,index,analysis,analyzer,tokenizer,put,index,meta,data,version,build,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,version,lucene,version,to,string,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,version,to,string
AnalysisModuleTests -> public void testPluginPreConfiguredTokenizers() throws IOException;1549644913;Tests that plugins can register pre-configured token filters that vary in behavior based on Elasticsearch version, Lucene version,_and that do not vary based on version at all.;public void testPluginPreConfiguredTokenizers() throws IOException {__        _        final class FixedTokenizer extends Tokenizer {_            private final CharTermAttribute term = addAttribute(CharTermAttribute.class)__            private final char[] chars__            private boolean read = false___            protected FixedTokenizer(String chars) {_                this.chars = chars.toCharArray()__            }__            @Override_            public boolean incrementToken() throws IOException {_                if (read) {_                    return false__                }_                clearAttributes()__                read = true__                term.resizeBuffer(chars.length)__                System.arraycopy(chars, 0, term.buffer(), 0, chars.length)__                term.setLength(chars.length)__                return true__            }__            @Override_            public void reset() throws IOException {_                super.reset()__                read = false__            }_        }_        AnalysisRegistry registry = new AnalysisModule(TestEnvironment.newEnvironment(emptyNodeSettings),_            singletonList(new AnalysisPlugin() {_                @Override_                public List<PreConfiguredTokenizer> getPreConfiguredTokenizers() {_                    return Arrays.asList(_                        PreConfiguredTokenizer.singleton("no_version", () -> new FixedTokenizer("no_version")),_                        PreConfiguredTokenizer.luceneVersion("lucene_version",_                            luceneVersion -> new FixedTokenizer(luceneVersion.toString())),_                        PreConfiguredTokenizer.elasticsearchVersion("elasticsearch_version",_                            esVersion -> new FixedTokenizer(esVersion.toString()))_                    )__                }_            })).getAnalysisRegistry()___        Version version = VersionUtils.randomVersion(random())__        IndexAnalyzers analyzers = getIndexAnalyzers(registry, Settings.builder()_            .put("index.analysis.analyzer.no_version.tokenizer", "no_version")_            .put("index.analysis.analyzer.lucene_version.tokenizer", "lucene_version")_            .put("index.analysis.analyzer.elasticsearch_version.tokenizer", "elasticsearch_version")_            .put(IndexMetaData.SETTING_VERSION_CREATED, version)_            .build())__        assertTokenStreamContents(analyzers.get("no_version").tokenStream("", "test"), new String[]{"no_version"})__        assertTokenStreamContents(analyzers.get("lucene_version").tokenStream("", "test"), new String[]{version.luceneVersion.toString()})__        assertTokenStreamContents(analyzers.get("elasticsearch_version").tokenStream("", "test"), new String[]{version.toString()})___        _______    };tests,that,plugins,can,register,pre,configured,token,filters,that,vary,in,behavior,based,on,elasticsearch,version,lucene,version,and,that,do,not,vary,based,on,version,at,all;public,void,test,plugin,pre,configured,tokenizers,throws,ioexception,final,class,fixed,tokenizer,extends,tokenizer,private,final,char,term,attribute,term,add,attribute,char,term,attribute,class,private,final,char,chars,private,boolean,read,false,protected,fixed,tokenizer,string,chars,this,chars,chars,to,char,array,override,public,boolean,increment,token,throws,ioexception,if,read,return,false,clear,attributes,read,true,term,resize,buffer,chars,length,system,arraycopy,chars,0,term,buffer,0,chars,length,term,set,length,chars,length,return,true,override,public,void,reset,throws,ioexception,super,reset,read,false,analysis,registry,registry,new,analysis,module,test,environment,new,environment,empty,node,settings,singleton,list,new,analysis,plugin,override,public,list,pre,configured,tokenizer,get,pre,configured,tokenizers,return,arrays,as,list,pre,configured,tokenizer,singleton,new,fixed,tokenizer,pre,configured,tokenizer,lucene,version,lucene,version,new,fixed,tokenizer,lucene,version,to,string,pre,configured,tokenizer,elasticsearch,version,es,version,new,fixed,tokenizer,es,version,to,string,get,analysis,registry,version,version,version,utils,random,version,random,index,analyzers,analyzers,get,index,analyzers,registry,settings,builder,put,index,analysis,analyzer,tokenizer,put,index,analysis,analyzer,tokenizer,put,index,analysis,analyzer,tokenizer,put,index,meta,data,version,build,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,version,lucene,version,to,string,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,version,to,string
AnalysisModuleTests -> public void testPluginPreConfiguredTokenizers() throws IOException;1549876755;Tests that plugins can register pre-configured token filters that vary in behavior based on Elasticsearch version, Lucene version,_and that do not vary based on version at all.;public void testPluginPreConfiguredTokenizers() throws IOException {__        _        final class FixedTokenizer extends Tokenizer {_            private final CharTermAttribute term = addAttribute(CharTermAttribute.class)__            private final char[] chars__            private boolean read = false___            protected FixedTokenizer(String chars) {_                this.chars = chars.toCharArray()__            }__            @Override_            public boolean incrementToken() throws IOException {_                if (read) {_                    return false__                }_                clearAttributes()__                read = true__                term.resizeBuffer(chars.length)__                System.arraycopy(chars, 0, term.buffer(), 0, chars.length)__                term.setLength(chars.length)__                return true__            }__            @Override_            public void reset() throws IOException {_                super.reset()__                read = false__            }_        }_        AnalysisRegistry registry = new AnalysisModule(TestEnvironment.newEnvironment(emptyNodeSettings),_            singletonList(new AnalysisPlugin() {_                @Override_                public List<PreConfiguredTokenizer> getPreConfiguredTokenizers() {_                    return Arrays.asList(_                        PreConfiguredTokenizer.singleton("no_version", () -> new FixedTokenizer("no_version")),_                        PreConfiguredTokenizer.luceneVersion("lucene_version",_                            luceneVersion -> new FixedTokenizer(luceneVersion.toString())),_                        PreConfiguredTokenizer.elasticsearchVersion("elasticsearch_version",_                            esVersion -> new FixedTokenizer(esVersion.toString()))_                    )__                }_            })).getAnalysisRegistry()___        Version version = VersionUtils.randomVersion(random())__        IndexAnalyzers analyzers = getIndexAnalyzers(registry, Settings.builder()_            .put("index.analysis.analyzer.no_version.tokenizer", "no_version")_            .put("index.analysis.analyzer.lucene_version.tokenizer", "lucene_version")_            .put("index.analysis.analyzer.elasticsearch_version.tokenizer", "elasticsearch_version")_            .put(IndexMetaData.SETTING_VERSION_CREATED, version)_            .build())__        assertTokenStreamContents(analyzers.get("no_version").tokenStream("", "test"), new String[]{"no_version"})__        assertTokenStreamContents(analyzers.get("lucene_version").tokenStream("", "test"), new String[]{version.luceneVersion.toString()})__        assertTokenStreamContents(analyzers.get("elasticsearch_version").tokenStream("", "test"), new String[]{version.toString()})___        _______    };tests,that,plugins,can,register,pre,configured,token,filters,that,vary,in,behavior,based,on,elasticsearch,version,lucene,version,and,that,do,not,vary,based,on,version,at,all;public,void,test,plugin,pre,configured,tokenizers,throws,ioexception,final,class,fixed,tokenizer,extends,tokenizer,private,final,char,term,attribute,term,add,attribute,char,term,attribute,class,private,final,char,chars,private,boolean,read,false,protected,fixed,tokenizer,string,chars,this,chars,chars,to,char,array,override,public,boolean,increment,token,throws,ioexception,if,read,return,false,clear,attributes,read,true,term,resize,buffer,chars,length,system,arraycopy,chars,0,term,buffer,0,chars,length,term,set,length,chars,length,return,true,override,public,void,reset,throws,ioexception,super,reset,read,false,analysis,registry,registry,new,analysis,module,test,environment,new,environment,empty,node,settings,singleton,list,new,analysis,plugin,override,public,list,pre,configured,tokenizer,get,pre,configured,tokenizers,return,arrays,as,list,pre,configured,tokenizer,singleton,new,fixed,tokenizer,pre,configured,tokenizer,lucene,version,lucene,version,new,fixed,tokenizer,lucene,version,to,string,pre,configured,tokenizer,elasticsearch,version,es,version,new,fixed,tokenizer,es,version,to,string,get,analysis,registry,version,version,version,utils,random,version,random,index,analyzers,analyzers,get,index,analyzers,registry,settings,builder,put,index,analysis,analyzer,tokenizer,put,index,analysis,analyzer,tokenizer,put,index,analysis,analyzer,tokenizer,put,index,meta,data,version,build,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,version,lucene,version,to,string,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,version,to,string
AnalysisModuleTests -> public void testPluginPreConfiguredCharFilters() throws IOException;1524684173;Tests that plugins can register pre-configured char filters that vary in behavior based on Elasticsearch version, Lucene version,_and that do not vary based on version at all.;public void testPluginPreConfiguredCharFilters() throws IOException {_        boolean noVersionSupportsMultiTerm = randomBoolean()__        boolean luceneVersionSupportsMultiTerm = randomBoolean()__        boolean elasticsearchVersionSupportsMultiTerm = randomBoolean()__        AnalysisRegistry registry = new AnalysisModule(TestEnvironment.newEnvironment(emptyNodeSettings),_                singletonList(new AnalysisPlugin() {_            @Override_            public List<PreConfiguredCharFilter> getPreConfiguredCharFilters() {_                return Arrays.asList(_                        PreConfiguredCharFilter.singleton("no_version", noVersionSupportsMultiTerm,_                                tokenStream -> new AppendCharFilter(tokenStream, "no_version")),_                        PreConfiguredCharFilter.luceneVersion("lucene_version", luceneVersionSupportsMultiTerm,_                                (tokenStream, luceneVersion) -> new AppendCharFilter(tokenStream, luceneVersion.toString())),_                        PreConfiguredCharFilter.elasticsearchVersion("elasticsearch_version", elasticsearchVersionSupportsMultiTerm,_                                (tokenStream, esVersion) -> new AppendCharFilter(tokenStream, esVersion.toString()))_                        )__            }_        })).getAnalysisRegistry()___        Version version = VersionUtils.randomVersion(random())__        IndexAnalyzers analyzers = getIndexAnalyzers(registry, Settings.builder()_                .put("index.analysis.analyzer.no_version.tokenizer", "keyword")_                .put("index.analysis.analyzer.no_version.char_filter", "no_version")_                .put("index.analysis.analyzer.lucene_version.tokenizer", "keyword")_                .put("index.analysis.analyzer.lucene_version.char_filter", "lucene_version")_                .put("index.analysis.analyzer.elasticsearch_version.tokenizer", "keyword")_                .put("index.analysis.analyzer.elasticsearch_version.char_filter", "elasticsearch_version")_                .put(IndexMetaData.SETTING_VERSION_CREATED, version)_                .build())__        assertTokenStreamContents(analyzers.get("no_version").tokenStream("", "test"), new String[] {"testno_version"})__        assertTokenStreamContents(analyzers.get("lucene_version").tokenStream("", "test"), new String[] {"test" + version.luceneVersion})__        assertTokenStreamContents(analyzers.get("elasticsearch_version").tokenStream("", "test"), new String[] {"test" + version})___        assertEquals("test" + (noVersionSupportsMultiTerm ? "no_version" : ""),_                analyzers.get("no_version").normalize("", "test").utf8ToString())__        assertEquals("test" + (luceneVersionSupportsMultiTerm ? version.luceneVersion.toString() : ""),_                analyzers.get("lucene_version").normalize("", "test").utf8ToString())__        assertEquals("test" + (elasticsearchVersionSupportsMultiTerm ? version.toString() : ""),_                analyzers.get("elasticsearch_version").normalize("", "test").utf8ToString())__    };tests,that,plugins,can,register,pre,configured,char,filters,that,vary,in,behavior,based,on,elasticsearch,version,lucene,version,and,that,do,not,vary,based,on,version,at,all;public,void,test,plugin,pre,configured,char,filters,throws,ioexception,boolean,no,version,supports,multi,term,random,boolean,boolean,lucene,version,supports,multi,term,random,boolean,boolean,elasticsearch,version,supports,multi,term,random,boolean,analysis,registry,registry,new,analysis,module,test,environment,new,environment,empty,node,settings,singleton,list,new,analysis,plugin,override,public,list,pre,configured,char,filter,get,pre,configured,char,filters,return,arrays,as,list,pre,configured,char,filter,singleton,no,version,supports,multi,term,token,stream,new,append,char,filter,token,stream,pre,configured,char,filter,lucene,version,lucene,version,supports,multi,term,token,stream,lucene,version,new,append,char,filter,token,stream,lucene,version,to,string,pre,configured,char,filter,elasticsearch,version,elasticsearch,version,supports,multi,term,token,stream,es,version,new,append,char,filter,token,stream,es,version,to,string,get,analysis,registry,version,version,version,utils,random,version,random,index,analyzers,analyzers,get,index,analyzers,registry,settings,builder,put,index,analysis,analyzer,tokenizer,keyword,put,index,analysis,analyzer,put,index,analysis,analyzer,tokenizer,keyword,put,index,analysis,analyzer,put,index,analysis,analyzer,tokenizer,keyword,put,index,analysis,analyzer,put,index,meta,data,version,build,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,test,version,lucene,version,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,test,version,assert,equals,test,no,version,supports,multi,term,analyzers,get,normalize,test,utf8to,string,assert,equals,test,lucene,version,supports,multi,term,version,lucene,version,to,string,analyzers,get,normalize,test,utf8to,string,assert,equals,test,elasticsearch,version,supports,multi,term,version,to,string,analyzers,get,normalize,test,utf8to,string
AnalysisModuleTests -> public void testPluginPreConfiguredCharFilters() throws IOException;1527622193;Tests that plugins can register pre-configured char filters that vary in behavior based on Elasticsearch version, Lucene version,_and that do not vary based on version at all.;public void testPluginPreConfiguredCharFilters() throws IOException {_        boolean noVersionSupportsMultiTerm = randomBoolean()__        boolean luceneVersionSupportsMultiTerm = randomBoolean()__        boolean elasticsearchVersionSupportsMultiTerm = randomBoolean()__        AnalysisRegistry registry = new AnalysisModule(TestEnvironment.newEnvironment(emptyNodeSettings),_                singletonList(new AnalysisPlugin() {_            @Override_            public List<PreConfiguredCharFilter> getPreConfiguredCharFilters() {_                return Arrays.asList(_                        PreConfiguredCharFilter.singleton("no_version", noVersionSupportsMultiTerm,_                                tokenStream -> new AppendCharFilter(tokenStream, "no_version")),_                        PreConfiguredCharFilter.luceneVersion("lucene_version", luceneVersionSupportsMultiTerm,_                                (tokenStream, luceneVersion) -> new AppendCharFilter(tokenStream, luceneVersion.toString())),_                        PreConfiguredCharFilter.elasticsearchVersion("elasticsearch_version", elasticsearchVersionSupportsMultiTerm,_                                (tokenStream, esVersion) -> new AppendCharFilter(tokenStream, esVersion.toString()))_                        )__            }__            @Override_            public Map<String, AnalysisProvider<TokenizerFactory>> getTokenizers() {_                _                return singletonMap("keyword", (indexSettings, environment, name, settings) ->_                    () -> new MockTokenizer(MockTokenizer.KEYWORD, false))__            }_        })).getAnalysisRegistry()___        Version version = VersionUtils.randomVersion(random())__        IndexAnalyzers analyzers = getIndexAnalyzers(registry, Settings.builder()_                .put("index.analysis.analyzer.no_version.tokenizer", "keyword")_                .put("index.analysis.analyzer.no_version.char_filter", "no_version")_                .put("index.analysis.analyzer.lucene_version.tokenizer", "keyword")_                .put("index.analysis.analyzer.lucene_version.char_filter", "lucene_version")_                .put("index.analysis.analyzer.elasticsearch_version.tokenizer", "keyword")_                .put("index.analysis.analyzer.elasticsearch_version.char_filter", "elasticsearch_version")_                .put(IndexMetaData.SETTING_VERSION_CREATED, version)_                .build())__        assertTokenStreamContents(analyzers.get("no_version").tokenStream("", "test"), new String[] {"testno_version"})__        assertTokenStreamContents(analyzers.get("lucene_version").tokenStream("", "test"), new String[] {"test" + version.luceneVersion})__        assertTokenStreamContents(analyzers.get("elasticsearch_version").tokenStream("", "test"), new String[] {"test" + version})___        assertEquals("test" + (noVersionSupportsMultiTerm ? "no_version" : ""),_                analyzers.get("no_version").normalize("", "test").utf8ToString())__        assertEquals("test" + (luceneVersionSupportsMultiTerm ? version.luceneVersion.toString() : ""),_                analyzers.get("lucene_version").normalize("", "test").utf8ToString())__        assertEquals("test" + (elasticsearchVersionSupportsMultiTerm ? version.toString() : ""),_                analyzers.get("elasticsearch_version").normalize("", "test").utf8ToString())__    };tests,that,plugins,can,register,pre,configured,char,filters,that,vary,in,behavior,based,on,elasticsearch,version,lucene,version,and,that,do,not,vary,based,on,version,at,all;public,void,test,plugin,pre,configured,char,filters,throws,ioexception,boolean,no,version,supports,multi,term,random,boolean,boolean,lucene,version,supports,multi,term,random,boolean,boolean,elasticsearch,version,supports,multi,term,random,boolean,analysis,registry,registry,new,analysis,module,test,environment,new,environment,empty,node,settings,singleton,list,new,analysis,plugin,override,public,list,pre,configured,char,filter,get,pre,configured,char,filters,return,arrays,as,list,pre,configured,char,filter,singleton,no,version,supports,multi,term,token,stream,new,append,char,filter,token,stream,pre,configured,char,filter,lucene,version,lucene,version,supports,multi,term,token,stream,lucene,version,new,append,char,filter,token,stream,lucene,version,to,string,pre,configured,char,filter,elasticsearch,version,elasticsearch,version,supports,multi,term,token,stream,es,version,new,append,char,filter,token,stream,es,version,to,string,override,public,map,string,analysis,provider,tokenizer,factory,get,tokenizers,return,singleton,map,keyword,index,settings,environment,name,settings,new,mock,tokenizer,mock,tokenizer,keyword,false,get,analysis,registry,version,version,version,utils,random,version,random,index,analyzers,analyzers,get,index,analyzers,registry,settings,builder,put,index,analysis,analyzer,tokenizer,keyword,put,index,analysis,analyzer,put,index,analysis,analyzer,tokenizer,keyword,put,index,analysis,analyzer,put,index,analysis,analyzer,tokenizer,keyword,put,index,analysis,analyzer,put,index,meta,data,version,build,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,test,version,lucene,version,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,test,version,assert,equals,test,no,version,supports,multi,term,analyzers,get,normalize,test,utf8to,string,assert,equals,test,lucene,version,supports,multi,term,version,lucene,version,to,string,analyzers,get,normalize,test,utf8to,string,assert,equals,test,elasticsearch,version,supports,multi,term,version,to,string,analyzers,get,normalize,test,utf8to,string
AnalysisModuleTests -> public void testPluginPreConfiguredCharFilters() throws IOException;1529341607;Tests that plugins can register pre-configured char filters that vary in behavior based on Elasticsearch version, Lucene version,_and that do not vary based on version at all.;public void testPluginPreConfiguredCharFilters() throws IOException {_        boolean noVersionSupportsMultiTerm = randomBoolean()__        boolean luceneVersionSupportsMultiTerm = randomBoolean()__        boolean elasticsearchVersionSupportsMultiTerm = randomBoolean()__        AnalysisRegistry registry = new AnalysisModule(TestEnvironment.newEnvironment(emptyNodeSettings),_                singletonList(new AnalysisPlugin() {_            @Override_            public List<PreConfiguredCharFilter> getPreConfiguredCharFilters() {_                return Arrays.asList(_                        PreConfiguredCharFilter.singleton("no_version", noVersionSupportsMultiTerm,_                                tokenStream -> new AppendCharFilter(tokenStream, "no_version")),_                        PreConfiguredCharFilter.luceneVersion("lucene_version", luceneVersionSupportsMultiTerm,_                                (tokenStream, luceneVersion) -> new AppendCharFilter(tokenStream, luceneVersion.toString())),_                        PreConfiguredCharFilter.elasticsearchVersion("elasticsearch_version", elasticsearchVersionSupportsMultiTerm,_                                (tokenStream, esVersion) -> new AppendCharFilter(tokenStream, esVersion.toString()))_                        )__            }__            @Override_            public Map<String, AnalysisProvider<TokenizerFactory>> getTokenizers() {_                _                return singletonMap("keyword", (indexSettings, environment, name, settings) ->_                    () -> new MockTokenizer(MockTokenizer.KEYWORD, false))__            }_        })).getAnalysisRegistry()___        Version version = VersionUtils.randomVersion(random())__        IndexAnalyzers analyzers = getIndexAnalyzers(registry, Settings.builder()_                .put("index.analysis.analyzer.no_version.tokenizer", "keyword")_                .put("index.analysis.analyzer.no_version.char_filter", "no_version")_                .put("index.analysis.analyzer.lucene_version.tokenizer", "keyword")_                .put("index.analysis.analyzer.lucene_version.char_filter", "lucene_version")_                .put("index.analysis.analyzer.elasticsearch_version.tokenizer", "keyword")_                .put("index.analysis.analyzer.elasticsearch_version.char_filter", "elasticsearch_version")_                .put(IndexMetaData.SETTING_VERSION_CREATED, version)_                .build())__        assertTokenStreamContents(analyzers.get("no_version").tokenStream("", "test"), new String[] {"testno_version"})__        assertTokenStreamContents(analyzers.get("lucene_version").tokenStream("", "test"), new String[] {"test" + version.luceneVersion})__        assertTokenStreamContents(analyzers.get("elasticsearch_version").tokenStream("", "test"), new String[] {"test" + version})___        assertEquals("test" + (noVersionSupportsMultiTerm ? "no_version" : ""),_                analyzers.get("no_version").normalize("", "test").utf8ToString())__        assertEquals("test" + (luceneVersionSupportsMultiTerm ? version.luceneVersion.toString() : ""),_                analyzers.get("lucene_version").normalize("", "test").utf8ToString())__        assertEquals("test" + (elasticsearchVersionSupportsMultiTerm ? version.toString() : ""),_                analyzers.get("elasticsearch_version").normalize("", "test").utf8ToString())__    };tests,that,plugins,can,register,pre,configured,char,filters,that,vary,in,behavior,based,on,elasticsearch,version,lucene,version,and,that,do,not,vary,based,on,version,at,all;public,void,test,plugin,pre,configured,char,filters,throws,ioexception,boolean,no,version,supports,multi,term,random,boolean,boolean,lucene,version,supports,multi,term,random,boolean,boolean,elasticsearch,version,supports,multi,term,random,boolean,analysis,registry,registry,new,analysis,module,test,environment,new,environment,empty,node,settings,singleton,list,new,analysis,plugin,override,public,list,pre,configured,char,filter,get,pre,configured,char,filters,return,arrays,as,list,pre,configured,char,filter,singleton,no,version,supports,multi,term,token,stream,new,append,char,filter,token,stream,pre,configured,char,filter,lucene,version,lucene,version,supports,multi,term,token,stream,lucene,version,new,append,char,filter,token,stream,lucene,version,to,string,pre,configured,char,filter,elasticsearch,version,elasticsearch,version,supports,multi,term,token,stream,es,version,new,append,char,filter,token,stream,es,version,to,string,override,public,map,string,analysis,provider,tokenizer,factory,get,tokenizers,return,singleton,map,keyword,index,settings,environment,name,settings,new,mock,tokenizer,mock,tokenizer,keyword,false,get,analysis,registry,version,version,version,utils,random,version,random,index,analyzers,analyzers,get,index,analyzers,registry,settings,builder,put,index,analysis,analyzer,tokenizer,keyword,put,index,analysis,analyzer,put,index,analysis,analyzer,tokenizer,keyword,put,index,analysis,analyzer,put,index,analysis,analyzer,tokenizer,keyword,put,index,analysis,analyzer,put,index,meta,data,version,build,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,test,version,lucene,version,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,test,version,assert,equals,test,no,version,supports,multi,term,analyzers,get,normalize,test,utf8to,string,assert,equals,test,lucene,version,supports,multi,term,version,lucene,version,to,string,analyzers,get,normalize,test,utf8to,string,assert,equals,test,elasticsearch,version,supports,multi,term,version,to,string,analyzers,get,normalize,test,utf8to,string
AnalysisModuleTests -> public void testPluginPreConfiguredCharFilters() throws IOException;1535139672;Tests that plugins can register pre-configured char filters that vary in behavior based on Elasticsearch version, Lucene version,_and that do not vary based on version at all.;public void testPluginPreConfiguredCharFilters() throws IOException {_        boolean noVersionSupportsMultiTerm = randomBoolean()__        boolean luceneVersionSupportsMultiTerm = randomBoolean()__        boolean elasticsearchVersionSupportsMultiTerm = randomBoolean()__        AnalysisRegistry registry = new AnalysisModule(TestEnvironment.newEnvironment(emptyNodeSettings),_                singletonList(new AnalysisPlugin() {_            @Override_            public List<PreConfiguredCharFilter> getPreConfiguredCharFilters() {_                return Arrays.asList(_                        PreConfiguredCharFilter.singleton("no_version", noVersionSupportsMultiTerm,_                                tokenStream -> new AppendCharFilter(tokenStream, "no_version")),_                        PreConfiguredCharFilter.luceneVersion("lucene_version", luceneVersionSupportsMultiTerm,_                                (tokenStream, luceneVersion) -> new AppendCharFilter(tokenStream, luceneVersion.toString())),_                        PreConfiguredCharFilter.elasticsearchVersion("elasticsearch_version", elasticsearchVersionSupportsMultiTerm,_                                (tokenStream, esVersion) -> new AppendCharFilter(tokenStream, esVersion.toString()))_                        )__            }__            @Override_            public Map<String, AnalysisProvider<TokenizerFactory>> getTokenizers() {_                _                return singletonMap("keyword", (indexSettings, environment, name, settings) ->_                    () -> new MockTokenizer(MockTokenizer.KEYWORD, false))__            }_        })).getAnalysisRegistry()___        Version version = VersionUtils.randomVersion(random())__        IndexAnalyzers analyzers = getIndexAnalyzers(registry, Settings.builder()_                .put("index.analysis.analyzer.no_version.tokenizer", "keyword")_                .put("index.analysis.analyzer.no_version.char_filter", "no_version")_                .put("index.analysis.analyzer.lucene_version.tokenizer", "keyword")_                .put("index.analysis.analyzer.lucene_version.char_filter", "lucene_version")_                .put("index.analysis.analyzer.elasticsearch_version.tokenizer", "keyword")_                .put("index.analysis.analyzer.elasticsearch_version.char_filter", "elasticsearch_version")_                .put(IndexMetaData.SETTING_VERSION_CREATED, version)_                .build())__        assertTokenStreamContents(analyzers.get("no_version").tokenStream("", "test"), new String[] {"testno_version"})__        assertTokenStreamContents(analyzers.get("lucene_version").tokenStream("", "test"), new String[] {"test" + version.luceneVersion})__        assertTokenStreamContents(analyzers.get("elasticsearch_version").tokenStream("", "test"), new String[] {"test" + version})___        assertEquals("test" + (noVersionSupportsMultiTerm ? "no_version" : ""),_                analyzers.get("no_version").normalize("", "test").utf8ToString())__        assertEquals("test" + (luceneVersionSupportsMultiTerm ? version.luceneVersion.toString() : ""),_                analyzers.get("lucene_version").normalize("", "test").utf8ToString())__        assertEquals("test" + (elasticsearchVersionSupportsMultiTerm ? version.toString() : ""),_                analyzers.get("elasticsearch_version").normalize("", "test").utf8ToString())__    };tests,that,plugins,can,register,pre,configured,char,filters,that,vary,in,behavior,based,on,elasticsearch,version,lucene,version,and,that,do,not,vary,based,on,version,at,all;public,void,test,plugin,pre,configured,char,filters,throws,ioexception,boolean,no,version,supports,multi,term,random,boolean,boolean,lucene,version,supports,multi,term,random,boolean,boolean,elasticsearch,version,supports,multi,term,random,boolean,analysis,registry,registry,new,analysis,module,test,environment,new,environment,empty,node,settings,singleton,list,new,analysis,plugin,override,public,list,pre,configured,char,filter,get,pre,configured,char,filters,return,arrays,as,list,pre,configured,char,filter,singleton,no,version,supports,multi,term,token,stream,new,append,char,filter,token,stream,pre,configured,char,filter,lucene,version,lucene,version,supports,multi,term,token,stream,lucene,version,new,append,char,filter,token,stream,lucene,version,to,string,pre,configured,char,filter,elasticsearch,version,elasticsearch,version,supports,multi,term,token,stream,es,version,new,append,char,filter,token,stream,es,version,to,string,override,public,map,string,analysis,provider,tokenizer,factory,get,tokenizers,return,singleton,map,keyword,index,settings,environment,name,settings,new,mock,tokenizer,mock,tokenizer,keyword,false,get,analysis,registry,version,version,version,utils,random,version,random,index,analyzers,analyzers,get,index,analyzers,registry,settings,builder,put,index,analysis,analyzer,tokenizer,keyword,put,index,analysis,analyzer,put,index,analysis,analyzer,tokenizer,keyword,put,index,analysis,analyzer,put,index,analysis,analyzer,tokenizer,keyword,put,index,analysis,analyzer,put,index,meta,data,version,build,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,test,version,lucene,version,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,test,version,assert,equals,test,no,version,supports,multi,term,analyzers,get,normalize,test,utf8to,string,assert,equals,test,lucene,version,supports,multi,term,version,lucene,version,to,string,analyzers,get,normalize,test,utf8to,string,assert,equals,test,elasticsearch,version,supports,multi,term,version,to,string,analyzers,get,normalize,test,utf8to,string
AnalysisModuleTests -> public void testPluginPreConfiguredCharFilters() throws IOException;1536314350;Tests that plugins can register pre-configured char filters that vary in behavior based on Elasticsearch version, Lucene version,_and that do not vary based on version at all.;public void testPluginPreConfiguredCharFilters() throws IOException {_        boolean noVersionSupportsMultiTerm = randomBoolean()__        boolean luceneVersionSupportsMultiTerm = randomBoolean()__        boolean elasticsearchVersionSupportsMultiTerm = randomBoolean()__        AnalysisRegistry registry = new AnalysisModule(TestEnvironment.newEnvironment(emptyNodeSettings),_                singletonList(new AnalysisPlugin() {_            @Override_            public List<PreConfiguredCharFilter> getPreConfiguredCharFilters() {_                return Arrays.asList(_                        PreConfiguredCharFilter.singleton("no_version", noVersionSupportsMultiTerm,_                                tokenStream -> new AppendCharFilter(tokenStream, "no_version")),_                        PreConfiguredCharFilter.luceneVersion("lucene_version", luceneVersionSupportsMultiTerm,_                                (tokenStream, luceneVersion) -> new AppendCharFilter(tokenStream, luceneVersion.toString())),_                        PreConfiguredCharFilter.elasticsearchVersion("elasticsearch_version", elasticsearchVersionSupportsMultiTerm,_                                (tokenStream, esVersion) -> new AppendCharFilter(tokenStream, esVersion.toString()))_                        )__            }__            @Override_            public Map<String, AnalysisProvider<TokenizerFactory>> getTokenizers() {_                _                return singletonMap("keyword", (indexSettings, environment, name, settings) ->_                    () -> new MockTokenizer(MockTokenizer.KEYWORD, false))__            }_        })).getAnalysisRegistry()___        Version version = VersionUtils.randomVersion(random())__        IndexAnalyzers analyzers = getIndexAnalyzers(registry, Settings.builder()_                .put("index.analysis.analyzer.no_version.tokenizer", "keyword")_                .put("index.analysis.analyzer.no_version.char_filter", "no_version")_                .put("index.analysis.analyzer.lucene_version.tokenizer", "keyword")_                .put("index.analysis.analyzer.lucene_version.char_filter", "lucene_version")_                .put("index.analysis.analyzer.elasticsearch_version.tokenizer", "keyword")_                .put("index.analysis.analyzer.elasticsearch_version.char_filter", "elasticsearch_version")_                .put(IndexMetaData.SETTING_VERSION_CREATED, version)_                .build())__        assertTokenStreamContents(analyzers.get("no_version").tokenStream("", "test"), new String[] {"testno_version"})__        assertTokenStreamContents(analyzers.get("lucene_version").tokenStream("", "test"), new String[] {"test" + version.luceneVersion})__        assertTokenStreamContents(analyzers.get("elasticsearch_version").tokenStream("", "test"), new String[] {"test" + version})___        assertEquals("test" + (noVersionSupportsMultiTerm ? "no_version" : ""),_                analyzers.get("no_version").normalize("", "test").utf8ToString())__        assertEquals("test" + (luceneVersionSupportsMultiTerm ? version.luceneVersion.toString() : ""),_                analyzers.get("lucene_version").normalize("", "test").utf8ToString())__        assertEquals("test" + (elasticsearchVersionSupportsMultiTerm ? version.toString() : ""),_                analyzers.get("elasticsearch_version").normalize("", "test").utf8ToString())__    };tests,that,plugins,can,register,pre,configured,char,filters,that,vary,in,behavior,based,on,elasticsearch,version,lucene,version,and,that,do,not,vary,based,on,version,at,all;public,void,test,plugin,pre,configured,char,filters,throws,ioexception,boolean,no,version,supports,multi,term,random,boolean,boolean,lucene,version,supports,multi,term,random,boolean,boolean,elasticsearch,version,supports,multi,term,random,boolean,analysis,registry,registry,new,analysis,module,test,environment,new,environment,empty,node,settings,singleton,list,new,analysis,plugin,override,public,list,pre,configured,char,filter,get,pre,configured,char,filters,return,arrays,as,list,pre,configured,char,filter,singleton,no,version,supports,multi,term,token,stream,new,append,char,filter,token,stream,pre,configured,char,filter,lucene,version,lucene,version,supports,multi,term,token,stream,lucene,version,new,append,char,filter,token,stream,lucene,version,to,string,pre,configured,char,filter,elasticsearch,version,elasticsearch,version,supports,multi,term,token,stream,es,version,new,append,char,filter,token,stream,es,version,to,string,override,public,map,string,analysis,provider,tokenizer,factory,get,tokenizers,return,singleton,map,keyword,index,settings,environment,name,settings,new,mock,tokenizer,mock,tokenizer,keyword,false,get,analysis,registry,version,version,version,utils,random,version,random,index,analyzers,analyzers,get,index,analyzers,registry,settings,builder,put,index,analysis,analyzer,tokenizer,keyword,put,index,analysis,analyzer,put,index,analysis,analyzer,tokenizer,keyword,put,index,analysis,analyzer,put,index,analysis,analyzer,tokenizer,keyword,put,index,analysis,analyzer,put,index,meta,data,version,build,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,test,version,lucene,version,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,test,version,assert,equals,test,no,version,supports,multi,term,analyzers,get,normalize,test,utf8to,string,assert,equals,test,lucene,version,supports,multi,term,version,lucene,version,to,string,analyzers,get,normalize,test,utf8to,string,assert,equals,test,elasticsearch,version,supports,multi,term,version,to,string,analyzers,get,normalize,test,utf8to,string
AnalysisModuleTests -> public void testPluginPreConfiguredCharFilters() throws IOException;1541592065;Tests that plugins can register pre-configured char filters that vary in behavior based on Elasticsearch version, Lucene version,_and that do not vary based on version at all.;public void testPluginPreConfiguredCharFilters() throws IOException {_        boolean noVersionSupportsMultiTerm = randomBoolean()__        boolean luceneVersionSupportsMultiTerm = randomBoolean()__        boolean elasticsearchVersionSupportsMultiTerm = randomBoolean()__        AnalysisRegistry registry = new AnalysisModule(TestEnvironment.newEnvironment(emptyNodeSettings),_                singletonList(new AnalysisPlugin() {_            @Override_            public List<PreConfiguredCharFilter> getPreConfiguredCharFilters() {_                return Arrays.asList(_                        PreConfiguredCharFilter.singleton("no_version", noVersionSupportsMultiTerm,_                                tokenStream -> new AppendCharFilter(tokenStream, "no_version")),_                        PreConfiguredCharFilter.luceneVersion("lucene_version", luceneVersionSupportsMultiTerm,_                                (tokenStream, luceneVersion) -> new AppendCharFilter(tokenStream, luceneVersion.toString())),_                        PreConfiguredCharFilter.elasticsearchVersion("elasticsearch_version", elasticsearchVersionSupportsMultiTerm,_                                (tokenStream, esVersion) -> new AppendCharFilter(tokenStream, esVersion.toString()))_                        )__            }__            @Override_            public Map<String, AnalysisProvider<TokenizerFactory>> getTokenizers() {_                _                return singletonMap("keyword", (indexSettings, environment, name, settings) ->_                    () -> new MockTokenizer(MockTokenizer.KEYWORD, false))__            }_        })).getAnalysisRegistry()___        Version version = VersionUtils.randomVersion(random())__        IndexAnalyzers analyzers = getIndexAnalyzers(registry, Settings.builder()_                .put("index.analysis.analyzer.no_version.tokenizer", "keyword")_                .put("index.analysis.analyzer.no_version.char_filter", "no_version")_                .put("index.analysis.analyzer.lucene_version.tokenizer", "keyword")_                .put("index.analysis.analyzer.lucene_version.char_filter", "lucene_version")_                .put("index.analysis.analyzer.elasticsearch_version.tokenizer", "keyword")_                .put("index.analysis.analyzer.elasticsearch_version.char_filter", "elasticsearch_version")_                .put(IndexMetaData.SETTING_VERSION_CREATED, version)_                .build())__        assertTokenStreamContents(analyzers.get("no_version").tokenStream("", "test"), new String[] {"testno_version"})__        assertTokenStreamContents(analyzers.get("lucene_version").tokenStream("", "test"), new String[] {"test" + version.luceneVersion})__        assertTokenStreamContents(analyzers.get("elasticsearch_version").tokenStream("", "test"), new String[] {"test" + version})___        assertEquals("test" + (noVersionSupportsMultiTerm ? "no_version" : ""),_                analyzers.get("no_version").normalize("", "test").utf8ToString())__        assertEquals("test" + (luceneVersionSupportsMultiTerm ? version.luceneVersion.toString() : ""),_                analyzers.get("lucene_version").normalize("", "test").utf8ToString())__        assertEquals("test" + (elasticsearchVersionSupportsMultiTerm ? version.toString() : ""),_                analyzers.get("elasticsearch_version").normalize("", "test").utf8ToString())__    };tests,that,plugins,can,register,pre,configured,char,filters,that,vary,in,behavior,based,on,elasticsearch,version,lucene,version,and,that,do,not,vary,based,on,version,at,all;public,void,test,plugin,pre,configured,char,filters,throws,ioexception,boolean,no,version,supports,multi,term,random,boolean,boolean,lucene,version,supports,multi,term,random,boolean,boolean,elasticsearch,version,supports,multi,term,random,boolean,analysis,registry,registry,new,analysis,module,test,environment,new,environment,empty,node,settings,singleton,list,new,analysis,plugin,override,public,list,pre,configured,char,filter,get,pre,configured,char,filters,return,arrays,as,list,pre,configured,char,filter,singleton,no,version,supports,multi,term,token,stream,new,append,char,filter,token,stream,pre,configured,char,filter,lucene,version,lucene,version,supports,multi,term,token,stream,lucene,version,new,append,char,filter,token,stream,lucene,version,to,string,pre,configured,char,filter,elasticsearch,version,elasticsearch,version,supports,multi,term,token,stream,es,version,new,append,char,filter,token,stream,es,version,to,string,override,public,map,string,analysis,provider,tokenizer,factory,get,tokenizers,return,singleton,map,keyword,index,settings,environment,name,settings,new,mock,tokenizer,mock,tokenizer,keyword,false,get,analysis,registry,version,version,version,utils,random,version,random,index,analyzers,analyzers,get,index,analyzers,registry,settings,builder,put,index,analysis,analyzer,tokenizer,keyword,put,index,analysis,analyzer,put,index,analysis,analyzer,tokenizer,keyword,put,index,analysis,analyzer,put,index,analysis,analyzer,tokenizer,keyword,put,index,analysis,analyzer,put,index,meta,data,version,build,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,test,version,lucene,version,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,test,version,assert,equals,test,no,version,supports,multi,term,analyzers,get,normalize,test,utf8to,string,assert,equals,test,lucene,version,supports,multi,term,version,lucene,version,to,string,analyzers,get,normalize,test,utf8to,string,assert,equals,test,elasticsearch,version,supports,multi,term,version,to,string,analyzers,get,normalize,test,utf8to,string
AnalysisModuleTests -> public void testPluginPreConfiguredCharFilters() throws IOException;1542897779;Tests that plugins can register pre-configured char filters that vary in behavior based on Elasticsearch version, Lucene version,_and that do not vary based on version at all.;public void testPluginPreConfiguredCharFilters() throws IOException {_        boolean noVersionSupportsMultiTerm = randomBoolean()__        boolean luceneVersionSupportsMultiTerm = randomBoolean()__        boolean elasticsearchVersionSupportsMultiTerm = randomBoolean()__        AnalysisRegistry registry = new AnalysisModule(TestEnvironment.newEnvironment(emptyNodeSettings),_                singletonList(new AnalysisPlugin() {_            @Override_            public List<PreConfiguredCharFilter> getPreConfiguredCharFilters() {_                return Arrays.asList(_                        PreConfiguredCharFilter.singleton("no_version", noVersionSupportsMultiTerm,_                                tokenStream -> new AppendCharFilter(tokenStream, "no_version")),_                        PreConfiguredCharFilter.luceneVersion("lucene_version", luceneVersionSupportsMultiTerm,_                                (tokenStream, luceneVersion) -> new AppendCharFilter(tokenStream, luceneVersion.toString())),_                        PreConfiguredCharFilter.elasticsearchVersion("elasticsearch_version", elasticsearchVersionSupportsMultiTerm,_                                (tokenStream, esVersion) -> new AppendCharFilter(tokenStream, esVersion.toString()))_                        )__            }__            @Override_            public Map<String, AnalysisProvider<TokenizerFactory>> getTokenizers() {_                _                return singletonMap("keyword", (indexSettings, environment, name, settings) ->_                    () -> new MockTokenizer(MockTokenizer.KEYWORD, false))__            }_        })).getAnalysisRegistry()___        Version version = VersionUtils.randomVersion(random())__        IndexAnalyzers analyzers = getIndexAnalyzers(registry, Settings.builder()_                .put("index.analysis.analyzer.no_version.tokenizer", "keyword")_                .put("index.analysis.analyzer.no_version.char_filter", "no_version")_                .put("index.analysis.analyzer.lucene_version.tokenizer", "keyword")_                .put("index.analysis.analyzer.lucene_version.char_filter", "lucene_version")_                .put("index.analysis.analyzer.elasticsearch_version.tokenizer", "keyword")_                .put("index.analysis.analyzer.elasticsearch_version.char_filter", "elasticsearch_version")_                .put(IndexMetaData.SETTING_VERSION_CREATED, version)_                .build())__        assertTokenStreamContents(analyzers.get("no_version").tokenStream("", "test"), new String[] {"testno_version"})__        assertTokenStreamContents(analyzers.get("lucene_version").tokenStream("", "test"), new String[] {"test" + version.luceneVersion})__        assertTokenStreamContents(analyzers.get("elasticsearch_version").tokenStream("", "test"), new String[] {"test" + version})___        assertEquals("test" + (noVersionSupportsMultiTerm ? "no_version" : ""),_                analyzers.get("no_version").normalize("", "test").utf8ToString())__        assertEquals("test" + (luceneVersionSupportsMultiTerm ? version.luceneVersion.toString() : ""),_                analyzers.get("lucene_version").normalize("", "test").utf8ToString())__        assertEquals("test" + (elasticsearchVersionSupportsMultiTerm ? version.toString() : ""),_                analyzers.get("elasticsearch_version").normalize("", "test").utf8ToString())__    };tests,that,plugins,can,register,pre,configured,char,filters,that,vary,in,behavior,based,on,elasticsearch,version,lucene,version,and,that,do,not,vary,based,on,version,at,all;public,void,test,plugin,pre,configured,char,filters,throws,ioexception,boolean,no,version,supports,multi,term,random,boolean,boolean,lucene,version,supports,multi,term,random,boolean,boolean,elasticsearch,version,supports,multi,term,random,boolean,analysis,registry,registry,new,analysis,module,test,environment,new,environment,empty,node,settings,singleton,list,new,analysis,plugin,override,public,list,pre,configured,char,filter,get,pre,configured,char,filters,return,arrays,as,list,pre,configured,char,filter,singleton,no,version,supports,multi,term,token,stream,new,append,char,filter,token,stream,pre,configured,char,filter,lucene,version,lucene,version,supports,multi,term,token,stream,lucene,version,new,append,char,filter,token,stream,lucene,version,to,string,pre,configured,char,filter,elasticsearch,version,elasticsearch,version,supports,multi,term,token,stream,es,version,new,append,char,filter,token,stream,es,version,to,string,override,public,map,string,analysis,provider,tokenizer,factory,get,tokenizers,return,singleton,map,keyword,index,settings,environment,name,settings,new,mock,tokenizer,mock,tokenizer,keyword,false,get,analysis,registry,version,version,version,utils,random,version,random,index,analyzers,analyzers,get,index,analyzers,registry,settings,builder,put,index,analysis,analyzer,tokenizer,keyword,put,index,analysis,analyzer,put,index,analysis,analyzer,tokenizer,keyword,put,index,analysis,analyzer,put,index,analysis,analyzer,tokenizer,keyword,put,index,analysis,analyzer,put,index,meta,data,version,build,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,test,version,lucene,version,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,test,version,assert,equals,test,no,version,supports,multi,term,analyzers,get,normalize,test,utf8to,string,assert,equals,test,lucene,version,supports,multi,term,version,lucene,version,to,string,analyzers,get,normalize,test,utf8to,string,assert,equals,test,elasticsearch,version,supports,multi,term,version,to,string,analyzers,get,normalize,test,utf8to,string
AnalysisModuleTests -> public void testPluginPreConfiguredCharFilters() throws IOException;1549644913;Tests that plugins can register pre-configured char filters that vary in behavior based on Elasticsearch version, Lucene version,_and that do not vary based on version at all.;public void testPluginPreConfiguredCharFilters() throws IOException {_        boolean noVersionSupportsMultiTerm = randomBoolean()__        boolean luceneVersionSupportsMultiTerm = randomBoolean()__        boolean elasticsearchVersionSupportsMultiTerm = randomBoolean()__        AnalysisRegistry registry = new AnalysisModule(TestEnvironment.newEnvironment(emptyNodeSettings),_                singletonList(new AnalysisPlugin() {_            @Override_            public List<PreConfiguredCharFilter> getPreConfiguredCharFilters() {_                return Arrays.asList(_                        PreConfiguredCharFilter.singleton("no_version", noVersionSupportsMultiTerm,_                                tokenStream -> new AppendCharFilter(tokenStream, "no_version")),_                        PreConfiguredCharFilter.luceneVersion("lucene_version", luceneVersionSupportsMultiTerm,_                                (tokenStream, luceneVersion) -> new AppendCharFilter(tokenStream, luceneVersion.toString())),_                        PreConfiguredCharFilter.elasticsearchVersion("elasticsearch_version", elasticsearchVersionSupportsMultiTerm,_                                (tokenStream, esVersion) -> new AppendCharFilter(tokenStream, esVersion.toString()))_                        )__            }__            @Override_            public Map<String, AnalysisProvider<TokenizerFactory>> getTokenizers() {_                _                return singletonMap("keyword", (indexSettings, environment, name, settings) ->_                    () -> new MockTokenizer(MockTokenizer.KEYWORD, false))__            }_        })).getAnalysisRegistry()___        Version version = VersionUtils.randomVersion(random())__        IndexAnalyzers analyzers = getIndexAnalyzers(registry, Settings.builder()_                .put("index.analysis.analyzer.no_version.tokenizer", "keyword")_                .put("index.analysis.analyzer.no_version.char_filter", "no_version")_                .put("index.analysis.analyzer.lucene_version.tokenizer", "keyword")_                .put("index.analysis.analyzer.lucene_version.char_filter", "lucene_version")_                .put("index.analysis.analyzer.elasticsearch_version.tokenizer", "keyword")_                .put("index.analysis.analyzer.elasticsearch_version.char_filter", "elasticsearch_version")_                .put(IndexMetaData.SETTING_VERSION_CREATED, version)_                .build())__        assertTokenStreamContents(analyzers.get("no_version").tokenStream("", "test"), new String[] {"testno_version"})__        assertTokenStreamContents(analyzers.get("lucene_version").tokenStream("", "test"), new String[] {"test" + version.luceneVersion})__        assertTokenStreamContents(analyzers.get("elasticsearch_version").tokenStream("", "test"), new String[] {"test" + version})___        assertEquals("test" + (noVersionSupportsMultiTerm ? "no_version" : ""),_                analyzers.get("no_version").normalize("", "test").utf8ToString())__        assertEquals("test" + (luceneVersionSupportsMultiTerm ? version.luceneVersion.toString() : ""),_                analyzers.get("lucene_version").normalize("", "test").utf8ToString())__        assertEquals("test" + (elasticsearchVersionSupportsMultiTerm ? version.toString() : ""),_                analyzers.get("elasticsearch_version").normalize("", "test").utf8ToString())__    };tests,that,plugins,can,register,pre,configured,char,filters,that,vary,in,behavior,based,on,elasticsearch,version,lucene,version,and,that,do,not,vary,based,on,version,at,all;public,void,test,plugin,pre,configured,char,filters,throws,ioexception,boolean,no,version,supports,multi,term,random,boolean,boolean,lucene,version,supports,multi,term,random,boolean,boolean,elasticsearch,version,supports,multi,term,random,boolean,analysis,registry,registry,new,analysis,module,test,environment,new,environment,empty,node,settings,singleton,list,new,analysis,plugin,override,public,list,pre,configured,char,filter,get,pre,configured,char,filters,return,arrays,as,list,pre,configured,char,filter,singleton,no,version,supports,multi,term,token,stream,new,append,char,filter,token,stream,pre,configured,char,filter,lucene,version,lucene,version,supports,multi,term,token,stream,lucene,version,new,append,char,filter,token,stream,lucene,version,to,string,pre,configured,char,filter,elasticsearch,version,elasticsearch,version,supports,multi,term,token,stream,es,version,new,append,char,filter,token,stream,es,version,to,string,override,public,map,string,analysis,provider,tokenizer,factory,get,tokenizers,return,singleton,map,keyword,index,settings,environment,name,settings,new,mock,tokenizer,mock,tokenizer,keyword,false,get,analysis,registry,version,version,version,utils,random,version,random,index,analyzers,analyzers,get,index,analyzers,registry,settings,builder,put,index,analysis,analyzer,tokenizer,keyword,put,index,analysis,analyzer,put,index,analysis,analyzer,tokenizer,keyword,put,index,analysis,analyzer,put,index,analysis,analyzer,tokenizer,keyword,put,index,analysis,analyzer,put,index,meta,data,version,build,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,test,version,lucene,version,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,test,version,assert,equals,test,no,version,supports,multi,term,analyzers,get,normalize,test,utf8to,string,assert,equals,test,lucene,version,supports,multi,term,version,lucene,version,to,string,analyzers,get,normalize,test,utf8to,string,assert,equals,test,elasticsearch,version,supports,multi,term,version,to,string,analyzers,get,normalize,test,utf8to,string
AnalysisModuleTests -> public void testPluginPreConfiguredCharFilters() throws IOException;1549876755;Tests that plugins can register pre-configured char filters that vary in behavior based on Elasticsearch version, Lucene version,_and that do not vary based on version at all.;public void testPluginPreConfiguredCharFilters() throws IOException {_        boolean noVersionSupportsMultiTerm = randomBoolean()__        boolean luceneVersionSupportsMultiTerm = randomBoolean()__        boolean elasticsearchVersionSupportsMultiTerm = randomBoolean()__        AnalysisRegistry registry = new AnalysisModule(TestEnvironment.newEnvironment(emptyNodeSettings),_                singletonList(new AnalysisPlugin() {_            @Override_            public List<PreConfiguredCharFilter> getPreConfiguredCharFilters() {_                return Arrays.asList(_                        PreConfiguredCharFilter.singleton("no_version", noVersionSupportsMultiTerm,_                                tokenStream -> new AppendCharFilter(tokenStream, "no_version")),_                        PreConfiguredCharFilter.luceneVersion("lucene_version", luceneVersionSupportsMultiTerm,_                                (tokenStream, luceneVersion) -> new AppendCharFilter(tokenStream, luceneVersion.toString())),_                        PreConfiguredCharFilter.elasticsearchVersion("elasticsearch_version", elasticsearchVersionSupportsMultiTerm,_                                (tokenStream, esVersion) -> new AppendCharFilter(tokenStream, esVersion.toString()))_                        )__            }__            @Override_            public Map<String, AnalysisProvider<TokenizerFactory>> getTokenizers() {_                _                return singletonMap("keyword", (indexSettings, environment, name, settings) ->_                    () -> new MockTokenizer(MockTokenizer.KEYWORD, false))__            }_        })).getAnalysisRegistry()___        Version version = VersionUtils.randomVersion(random())__        IndexAnalyzers analyzers = getIndexAnalyzers(registry, Settings.builder()_                .put("index.analysis.analyzer.no_version.tokenizer", "keyword")_                .put("index.analysis.analyzer.no_version.char_filter", "no_version")_                .put("index.analysis.analyzer.lucene_version.tokenizer", "keyword")_                .put("index.analysis.analyzer.lucene_version.char_filter", "lucene_version")_                .put("index.analysis.analyzer.elasticsearch_version.tokenizer", "keyword")_                .put("index.analysis.analyzer.elasticsearch_version.char_filter", "elasticsearch_version")_                .put(IndexMetaData.SETTING_VERSION_CREATED, version)_                .build())__        assertTokenStreamContents(analyzers.get("no_version").tokenStream("", "test"), new String[] {"testno_version"})__        assertTokenStreamContents(analyzers.get("lucene_version").tokenStream("", "test"), new String[] {"test" + version.luceneVersion})__        assertTokenStreamContents(analyzers.get("elasticsearch_version").tokenStream("", "test"), new String[] {"test" + version})___        assertEquals("test" + (noVersionSupportsMultiTerm ? "no_version" : ""),_                analyzers.get("no_version").normalize("", "test").utf8ToString())__        assertEquals("test" + (luceneVersionSupportsMultiTerm ? version.luceneVersion.toString() : ""),_                analyzers.get("lucene_version").normalize("", "test").utf8ToString())__        assertEquals("test" + (elasticsearchVersionSupportsMultiTerm ? version.toString() : ""),_                analyzers.get("elasticsearch_version").normalize("", "test").utf8ToString())__    };tests,that,plugins,can,register,pre,configured,char,filters,that,vary,in,behavior,based,on,elasticsearch,version,lucene,version,and,that,do,not,vary,based,on,version,at,all;public,void,test,plugin,pre,configured,char,filters,throws,ioexception,boolean,no,version,supports,multi,term,random,boolean,boolean,lucene,version,supports,multi,term,random,boolean,boolean,elasticsearch,version,supports,multi,term,random,boolean,analysis,registry,registry,new,analysis,module,test,environment,new,environment,empty,node,settings,singleton,list,new,analysis,plugin,override,public,list,pre,configured,char,filter,get,pre,configured,char,filters,return,arrays,as,list,pre,configured,char,filter,singleton,no,version,supports,multi,term,token,stream,new,append,char,filter,token,stream,pre,configured,char,filter,lucene,version,lucene,version,supports,multi,term,token,stream,lucene,version,new,append,char,filter,token,stream,lucene,version,to,string,pre,configured,char,filter,elasticsearch,version,elasticsearch,version,supports,multi,term,token,stream,es,version,new,append,char,filter,token,stream,es,version,to,string,override,public,map,string,analysis,provider,tokenizer,factory,get,tokenizers,return,singleton,map,keyword,index,settings,environment,name,settings,new,mock,tokenizer,mock,tokenizer,keyword,false,get,analysis,registry,version,version,version,utils,random,version,random,index,analyzers,analyzers,get,index,analyzers,registry,settings,builder,put,index,analysis,analyzer,tokenizer,keyword,put,index,analysis,analyzer,put,index,analysis,analyzer,tokenizer,keyword,put,index,analysis,analyzer,put,index,analysis,analyzer,tokenizer,keyword,put,index,analysis,analyzer,put,index,meta,data,version,build,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,test,version,lucene,version,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,test,version,assert,equals,test,no,version,supports,multi,term,analyzers,get,normalize,test,utf8to,string,assert,equals,test,lucene,version,supports,multi,term,version,lucene,version,to,string,analyzers,get,normalize,test,utf8to,string,assert,equals,test,elasticsearch,version,supports,multi,term,version,to,string,analyzers,get,normalize,test,utf8to,string
AnalysisModuleTests -> public void testPluginPreConfiguredTokenFilters() throws IOException;1524684173;Tests that plugins can register pre-configured token filters that vary in behavior based on Elasticsearch version, Lucene version,_and that do not vary based on version at all.;public void testPluginPreConfiguredTokenFilters() throws IOException {_        boolean noVersionSupportsMultiTerm = randomBoolean()__        boolean luceneVersionSupportsMultiTerm = randomBoolean()__        boolean elasticsearchVersionSupportsMultiTerm = randomBoolean()__        AnalysisRegistry registry = new AnalysisModule(TestEnvironment.newEnvironment(emptyNodeSettings),_                singletonList(new AnalysisPlugin() {_            @Override_            public List<PreConfiguredTokenFilter> getPreConfiguredTokenFilters() {_                return Arrays.asList(_                        PreConfiguredTokenFilter.singleton("no_version", noVersionSupportsMultiTerm,_                                tokenStream -> new AppendTokenFilter(tokenStream, "no_version")),_                        PreConfiguredTokenFilter.luceneVersion("lucene_version", luceneVersionSupportsMultiTerm,_                                (tokenStream, luceneVersion) -> new AppendTokenFilter(tokenStream, luceneVersion.toString())),_                        PreConfiguredTokenFilter.elasticsearchVersion("elasticsearch_version", elasticsearchVersionSupportsMultiTerm,_                                (tokenStream, esVersion) -> new AppendTokenFilter(tokenStream, esVersion.toString()))_                        )__            }_        })).getAnalysisRegistry()___        Version version = VersionUtils.randomVersion(random())__        IndexAnalyzers analyzers = getIndexAnalyzers(registry, Settings.builder()_                .put("index.analysis.analyzer.no_version.tokenizer", "keyword")_                .put("index.analysis.analyzer.no_version.filter", "no_version")_                .put("index.analysis.analyzer.lucene_version.tokenizer", "keyword")_                .put("index.analysis.analyzer.lucene_version.filter", "lucene_version")_                .put("index.analysis.analyzer.elasticsearch_version.tokenizer", "keyword")_                .put("index.analysis.analyzer.elasticsearch_version.filter", "elasticsearch_version")_                .put(IndexMetaData.SETTING_VERSION_CREATED, version)_                .build())__        assertTokenStreamContents(analyzers.get("no_version").tokenStream("", "test"), new String[] {"testno_version"})__        assertTokenStreamContents(analyzers.get("lucene_version").tokenStream("", "test"), new String[] {"test" + version.luceneVersion})__        assertTokenStreamContents(analyzers.get("elasticsearch_version").tokenStream("", "test"), new String[] {"test" + version})___        assertEquals("test" + (noVersionSupportsMultiTerm ? "no_version" : ""),_                analyzers.get("no_version").normalize("", "test").utf8ToString())__        assertEquals("test" + (luceneVersionSupportsMultiTerm ? version.luceneVersion.toString() : ""),_                analyzers.get("lucene_version").normalize("", "test").utf8ToString())__        assertEquals("test" + (elasticsearchVersionSupportsMultiTerm ? version.toString() : ""),_                analyzers.get("elasticsearch_version").normalize("", "test").utf8ToString())__    };tests,that,plugins,can,register,pre,configured,token,filters,that,vary,in,behavior,based,on,elasticsearch,version,lucene,version,and,that,do,not,vary,based,on,version,at,all;public,void,test,plugin,pre,configured,token,filters,throws,ioexception,boolean,no,version,supports,multi,term,random,boolean,boolean,lucene,version,supports,multi,term,random,boolean,boolean,elasticsearch,version,supports,multi,term,random,boolean,analysis,registry,registry,new,analysis,module,test,environment,new,environment,empty,node,settings,singleton,list,new,analysis,plugin,override,public,list,pre,configured,token,filter,get,pre,configured,token,filters,return,arrays,as,list,pre,configured,token,filter,singleton,no,version,supports,multi,term,token,stream,new,append,token,filter,token,stream,pre,configured,token,filter,lucene,version,lucene,version,supports,multi,term,token,stream,lucene,version,new,append,token,filter,token,stream,lucene,version,to,string,pre,configured,token,filter,elasticsearch,version,elasticsearch,version,supports,multi,term,token,stream,es,version,new,append,token,filter,token,stream,es,version,to,string,get,analysis,registry,version,version,version,utils,random,version,random,index,analyzers,analyzers,get,index,analyzers,registry,settings,builder,put,index,analysis,analyzer,tokenizer,keyword,put,index,analysis,analyzer,filter,put,index,analysis,analyzer,tokenizer,keyword,put,index,analysis,analyzer,filter,put,index,analysis,analyzer,tokenizer,keyword,put,index,analysis,analyzer,filter,put,index,meta,data,version,build,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,test,version,lucene,version,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,test,version,assert,equals,test,no,version,supports,multi,term,analyzers,get,normalize,test,utf8to,string,assert,equals,test,lucene,version,supports,multi,term,version,lucene,version,to,string,analyzers,get,normalize,test,utf8to,string,assert,equals,test,elasticsearch,version,supports,multi,term,version,to,string,analyzers,get,normalize,test,utf8to,string
AnalysisModuleTests -> public void testPluginPreConfiguredTokenFilters() throws IOException;1527622193;Tests that plugins can register pre-configured token filters that vary in behavior based on Elasticsearch version, Lucene version,_and that do not vary based on version at all.;public void testPluginPreConfiguredTokenFilters() throws IOException {_        boolean noVersionSupportsMultiTerm = randomBoolean()__        boolean luceneVersionSupportsMultiTerm = randomBoolean()__        boolean elasticsearchVersionSupportsMultiTerm = randomBoolean()__        AnalysisRegistry registry = new AnalysisModule(TestEnvironment.newEnvironment(emptyNodeSettings),_                singletonList(new AnalysisPlugin() {_            @Override_            public List<PreConfiguredTokenFilter> getPreConfiguredTokenFilters() {_                return Arrays.asList(_                        PreConfiguredTokenFilter.singleton("no_version", noVersionSupportsMultiTerm,_                                tokenStream -> new AppendTokenFilter(tokenStream, "no_version")),_                        PreConfiguredTokenFilter.luceneVersion("lucene_version", luceneVersionSupportsMultiTerm,_                                (tokenStream, luceneVersion) -> new AppendTokenFilter(tokenStream, luceneVersion.toString())),_                        PreConfiguredTokenFilter.elasticsearchVersion("elasticsearch_version", elasticsearchVersionSupportsMultiTerm,_                                (tokenStream, esVersion) -> new AppendTokenFilter(tokenStream, esVersion.toString()))_                        )__            }_        })).getAnalysisRegistry()___        Version version = VersionUtils.randomVersion(random())__        IndexAnalyzers analyzers = getIndexAnalyzers(registry, Settings.builder()_                .put("index.analysis.analyzer.no_version.tokenizer", "standard")_                .put("index.analysis.analyzer.no_version.filter", "no_version")_                .put("index.analysis.analyzer.lucene_version.tokenizer", "standard")_                .put("index.analysis.analyzer.lucene_version.filter", "lucene_version")_                .put("index.analysis.analyzer.elasticsearch_version.tokenizer", "standard")_                .put("index.analysis.analyzer.elasticsearch_version.filter", "elasticsearch_version")_                .put(IndexMetaData.SETTING_VERSION_CREATED, version)_                .build())__        assertTokenStreamContents(analyzers.get("no_version").tokenStream("", "test"), new String[] {"testno_version"})__        assertTokenStreamContents(analyzers.get("lucene_version").tokenStream("", "test"), new String[] {"test" + version.luceneVersion})__        assertTokenStreamContents(analyzers.get("elasticsearch_version").tokenStream("", "test"), new String[] {"test" + version})___        assertEquals("test" + (noVersionSupportsMultiTerm ? "no_version" : ""),_                analyzers.get("no_version").normalize("", "test").utf8ToString())__        assertEquals("test" + (luceneVersionSupportsMultiTerm ? version.luceneVersion.toString() : ""),_                analyzers.get("lucene_version").normalize("", "test").utf8ToString())__        assertEquals("test" + (elasticsearchVersionSupportsMultiTerm ? version.toString() : ""),_                analyzers.get("elasticsearch_version").normalize("", "test").utf8ToString())__    };tests,that,plugins,can,register,pre,configured,token,filters,that,vary,in,behavior,based,on,elasticsearch,version,lucene,version,and,that,do,not,vary,based,on,version,at,all;public,void,test,plugin,pre,configured,token,filters,throws,ioexception,boolean,no,version,supports,multi,term,random,boolean,boolean,lucene,version,supports,multi,term,random,boolean,boolean,elasticsearch,version,supports,multi,term,random,boolean,analysis,registry,registry,new,analysis,module,test,environment,new,environment,empty,node,settings,singleton,list,new,analysis,plugin,override,public,list,pre,configured,token,filter,get,pre,configured,token,filters,return,arrays,as,list,pre,configured,token,filter,singleton,no,version,supports,multi,term,token,stream,new,append,token,filter,token,stream,pre,configured,token,filter,lucene,version,lucene,version,supports,multi,term,token,stream,lucene,version,new,append,token,filter,token,stream,lucene,version,to,string,pre,configured,token,filter,elasticsearch,version,elasticsearch,version,supports,multi,term,token,stream,es,version,new,append,token,filter,token,stream,es,version,to,string,get,analysis,registry,version,version,version,utils,random,version,random,index,analyzers,analyzers,get,index,analyzers,registry,settings,builder,put,index,analysis,analyzer,tokenizer,standard,put,index,analysis,analyzer,filter,put,index,analysis,analyzer,tokenizer,standard,put,index,analysis,analyzer,filter,put,index,analysis,analyzer,tokenizer,standard,put,index,analysis,analyzer,filter,put,index,meta,data,version,build,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,test,version,lucene,version,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,test,version,assert,equals,test,no,version,supports,multi,term,analyzers,get,normalize,test,utf8to,string,assert,equals,test,lucene,version,supports,multi,term,version,lucene,version,to,string,analyzers,get,normalize,test,utf8to,string,assert,equals,test,elasticsearch,version,supports,multi,term,version,to,string,analyzers,get,normalize,test,utf8to,string
AnalysisModuleTests -> public void testPluginPreConfiguredTokenFilters() throws IOException;1529341607;Tests that plugins can register pre-configured token filters that vary in behavior based on Elasticsearch version, Lucene version,_and that do not vary based on version at all.;public void testPluginPreConfiguredTokenFilters() throws IOException {_        boolean noVersionSupportsMultiTerm = randomBoolean()__        boolean luceneVersionSupportsMultiTerm = randomBoolean()__        boolean elasticsearchVersionSupportsMultiTerm = randomBoolean()__        AnalysisRegistry registry = new AnalysisModule(TestEnvironment.newEnvironment(emptyNodeSettings),_                singletonList(new AnalysisPlugin() {_            @Override_            public List<PreConfiguredTokenFilter> getPreConfiguredTokenFilters() {_                return Arrays.asList(_                        PreConfiguredTokenFilter.singleton("no_version", noVersionSupportsMultiTerm,_                                tokenStream -> new AppendTokenFilter(tokenStream, "no_version")),_                        PreConfiguredTokenFilter.luceneVersion("lucene_version", luceneVersionSupportsMultiTerm,_                                (tokenStream, luceneVersion) -> new AppendTokenFilter(tokenStream, luceneVersion.toString())),_                        PreConfiguredTokenFilter.elasticsearchVersion("elasticsearch_version", elasticsearchVersionSupportsMultiTerm,_                                (tokenStream, esVersion) -> new AppendTokenFilter(tokenStream, esVersion.toString()))_                        )__            }_        })).getAnalysisRegistry()___        Version version = VersionUtils.randomVersion(random())__        IndexAnalyzers analyzers = getIndexAnalyzers(registry, Settings.builder()_                .put("index.analysis.analyzer.no_version.tokenizer", "standard")_                .put("index.analysis.analyzer.no_version.filter", "no_version")_                .put("index.analysis.analyzer.lucene_version.tokenizer", "standard")_                .put("index.analysis.analyzer.lucene_version.filter", "lucene_version")_                .put("index.analysis.analyzer.elasticsearch_version.tokenizer", "standard")_                .put("index.analysis.analyzer.elasticsearch_version.filter", "elasticsearch_version")_                .put(IndexMetaData.SETTING_VERSION_CREATED, version)_                .build())__        assertTokenStreamContents(analyzers.get("no_version").tokenStream("", "test"), new String[] {"testno_version"})__        assertTokenStreamContents(analyzers.get("lucene_version").tokenStream("", "test"), new String[] {"test" + version.luceneVersion})__        assertTokenStreamContents(analyzers.get("elasticsearch_version").tokenStream("", "test"), new String[] {"test" + version})___        assertEquals("test" + (noVersionSupportsMultiTerm ? "no_version" : ""),_                analyzers.get("no_version").normalize("", "test").utf8ToString())__        assertEquals("test" + (luceneVersionSupportsMultiTerm ? version.luceneVersion.toString() : ""),_                analyzers.get("lucene_version").normalize("", "test").utf8ToString())__        assertEquals("test" + (elasticsearchVersionSupportsMultiTerm ? version.toString() : ""),_                analyzers.get("elasticsearch_version").normalize("", "test").utf8ToString())__    };tests,that,plugins,can,register,pre,configured,token,filters,that,vary,in,behavior,based,on,elasticsearch,version,lucene,version,and,that,do,not,vary,based,on,version,at,all;public,void,test,plugin,pre,configured,token,filters,throws,ioexception,boolean,no,version,supports,multi,term,random,boolean,boolean,lucene,version,supports,multi,term,random,boolean,boolean,elasticsearch,version,supports,multi,term,random,boolean,analysis,registry,registry,new,analysis,module,test,environment,new,environment,empty,node,settings,singleton,list,new,analysis,plugin,override,public,list,pre,configured,token,filter,get,pre,configured,token,filters,return,arrays,as,list,pre,configured,token,filter,singleton,no,version,supports,multi,term,token,stream,new,append,token,filter,token,stream,pre,configured,token,filter,lucene,version,lucene,version,supports,multi,term,token,stream,lucene,version,new,append,token,filter,token,stream,lucene,version,to,string,pre,configured,token,filter,elasticsearch,version,elasticsearch,version,supports,multi,term,token,stream,es,version,new,append,token,filter,token,stream,es,version,to,string,get,analysis,registry,version,version,version,utils,random,version,random,index,analyzers,analyzers,get,index,analyzers,registry,settings,builder,put,index,analysis,analyzer,tokenizer,standard,put,index,analysis,analyzer,filter,put,index,analysis,analyzer,tokenizer,standard,put,index,analysis,analyzer,filter,put,index,analysis,analyzer,tokenizer,standard,put,index,analysis,analyzer,filter,put,index,meta,data,version,build,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,test,version,lucene,version,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,test,version,assert,equals,test,no,version,supports,multi,term,analyzers,get,normalize,test,utf8to,string,assert,equals,test,lucene,version,supports,multi,term,version,lucene,version,to,string,analyzers,get,normalize,test,utf8to,string,assert,equals,test,elasticsearch,version,supports,multi,term,version,to,string,analyzers,get,normalize,test,utf8to,string
AnalysisModuleTests -> public void testPluginPreConfiguredTokenFilters() throws IOException;1535139672;Tests that plugins can register pre-configured token filters that vary in behavior based on Elasticsearch version, Lucene version,_and that do not vary based on version at all.;public void testPluginPreConfiguredTokenFilters() throws IOException {_        boolean noVersionSupportsMultiTerm = randomBoolean()__        boolean luceneVersionSupportsMultiTerm = randomBoolean()__        boolean elasticsearchVersionSupportsMultiTerm = randomBoolean()__        AnalysisRegistry registry = new AnalysisModule(TestEnvironment.newEnvironment(emptyNodeSettings),_                singletonList(new AnalysisPlugin() {_            @Override_            public List<PreConfiguredTokenFilter> getPreConfiguredTokenFilters() {_                return Arrays.asList(_                        PreConfiguredTokenFilter.singleton("no_version", noVersionSupportsMultiTerm,_                                tokenStream -> new AppendTokenFilter(tokenStream, "no_version")),_                        PreConfiguredTokenFilter.luceneVersion("lucene_version", luceneVersionSupportsMultiTerm,_                                (tokenStream, luceneVersion) -> new AppendTokenFilter(tokenStream, luceneVersion.toString())),_                        PreConfiguredTokenFilter.elasticsearchVersion("elasticsearch_version", elasticsearchVersionSupportsMultiTerm,_                                (tokenStream, esVersion) -> new AppendTokenFilter(tokenStream, esVersion.toString()))_                        )__            }_        })).getAnalysisRegistry()___        Version version = VersionUtils.randomVersion(random())__        IndexAnalyzers analyzers = getIndexAnalyzers(registry, Settings.builder()_                .put("index.analysis.analyzer.no_version.tokenizer", "standard")_                .put("index.analysis.analyzer.no_version.filter", "no_version")_                .put("index.analysis.analyzer.lucene_version.tokenizer", "standard")_                .put("index.analysis.analyzer.lucene_version.filter", "lucene_version")_                .put("index.analysis.analyzer.elasticsearch_version.tokenizer", "standard")_                .put("index.analysis.analyzer.elasticsearch_version.filter", "elasticsearch_version")_                .put(IndexMetaData.SETTING_VERSION_CREATED, version)_                .build())__        assertTokenStreamContents(analyzers.get("no_version").tokenStream("", "test"), new String[] {"testno_version"})__        assertTokenStreamContents(analyzers.get("lucene_version").tokenStream("", "test"), new String[] {"test" + version.luceneVersion})__        assertTokenStreamContents(analyzers.get("elasticsearch_version").tokenStream("", "test"), new String[] {"test" + version})___        assertEquals("test" + (noVersionSupportsMultiTerm ? "no_version" : ""),_                analyzers.get("no_version").normalize("", "test").utf8ToString())__        assertEquals("test" + (luceneVersionSupportsMultiTerm ? version.luceneVersion.toString() : ""),_                analyzers.get("lucene_version").normalize("", "test").utf8ToString())__        assertEquals("test" + (elasticsearchVersionSupportsMultiTerm ? version.toString() : ""),_                analyzers.get("elasticsearch_version").normalize("", "test").utf8ToString())__    };tests,that,plugins,can,register,pre,configured,token,filters,that,vary,in,behavior,based,on,elasticsearch,version,lucene,version,and,that,do,not,vary,based,on,version,at,all;public,void,test,plugin,pre,configured,token,filters,throws,ioexception,boolean,no,version,supports,multi,term,random,boolean,boolean,lucene,version,supports,multi,term,random,boolean,boolean,elasticsearch,version,supports,multi,term,random,boolean,analysis,registry,registry,new,analysis,module,test,environment,new,environment,empty,node,settings,singleton,list,new,analysis,plugin,override,public,list,pre,configured,token,filter,get,pre,configured,token,filters,return,arrays,as,list,pre,configured,token,filter,singleton,no,version,supports,multi,term,token,stream,new,append,token,filter,token,stream,pre,configured,token,filter,lucene,version,lucene,version,supports,multi,term,token,stream,lucene,version,new,append,token,filter,token,stream,lucene,version,to,string,pre,configured,token,filter,elasticsearch,version,elasticsearch,version,supports,multi,term,token,stream,es,version,new,append,token,filter,token,stream,es,version,to,string,get,analysis,registry,version,version,version,utils,random,version,random,index,analyzers,analyzers,get,index,analyzers,registry,settings,builder,put,index,analysis,analyzer,tokenizer,standard,put,index,analysis,analyzer,filter,put,index,analysis,analyzer,tokenizer,standard,put,index,analysis,analyzer,filter,put,index,analysis,analyzer,tokenizer,standard,put,index,analysis,analyzer,filter,put,index,meta,data,version,build,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,test,version,lucene,version,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,test,version,assert,equals,test,no,version,supports,multi,term,analyzers,get,normalize,test,utf8to,string,assert,equals,test,lucene,version,supports,multi,term,version,lucene,version,to,string,analyzers,get,normalize,test,utf8to,string,assert,equals,test,elasticsearch,version,supports,multi,term,version,to,string,analyzers,get,normalize,test,utf8to,string
AnalysisModuleTests -> public void testPluginPreConfiguredTokenFilters() throws IOException;1536314350;Tests that plugins can register pre-configured token filters that vary in behavior based on Elasticsearch version, Lucene version,_and that do not vary based on version at all.;public void testPluginPreConfiguredTokenFilters() throws IOException {_        boolean noVersionSupportsMultiTerm = randomBoolean()__        boolean luceneVersionSupportsMultiTerm = randomBoolean()__        boolean elasticsearchVersionSupportsMultiTerm = randomBoolean()__        AnalysisRegistry registry = new AnalysisModule(TestEnvironment.newEnvironment(emptyNodeSettings),_                singletonList(new AnalysisPlugin() {_            @Override_            public List<PreConfiguredTokenFilter> getPreConfiguredTokenFilters() {_                return Arrays.asList(_                        PreConfiguredTokenFilter.singleton("no_version", noVersionSupportsMultiTerm,_                                tokenStream -> new AppendTokenFilter(tokenStream, "no_version")),_                        PreConfiguredTokenFilter.luceneVersion("lucene_version", luceneVersionSupportsMultiTerm,_                                (tokenStream, luceneVersion) -> new AppendTokenFilter(tokenStream, luceneVersion.toString())),_                        PreConfiguredTokenFilter.elasticsearchVersion("elasticsearch_version", elasticsearchVersionSupportsMultiTerm,_                                (tokenStream, esVersion) -> new AppendTokenFilter(tokenStream, esVersion.toString()))_                        )__            }_        })).getAnalysisRegistry()___        Version version = VersionUtils.randomVersion(random())__        IndexAnalyzers analyzers = getIndexAnalyzers(registry, Settings.builder()_                .put("index.analysis.analyzer.no_version.tokenizer", "standard")_                .put("index.analysis.analyzer.no_version.filter", "no_version")_                .put("index.analysis.analyzer.lucene_version.tokenizer", "standard")_                .put("index.analysis.analyzer.lucene_version.filter", "lucene_version")_                .put("index.analysis.analyzer.elasticsearch_version.tokenizer", "standard")_                .put("index.analysis.analyzer.elasticsearch_version.filter", "elasticsearch_version")_                .put(IndexMetaData.SETTING_VERSION_CREATED, version)_                .build())__        assertTokenStreamContents(analyzers.get("no_version").tokenStream("", "test"), new String[] {"testno_version"})__        assertTokenStreamContents(analyzers.get("lucene_version").tokenStream("", "test"), new String[] {"test" + version.luceneVersion})__        assertTokenStreamContents(analyzers.get("elasticsearch_version").tokenStream("", "test"), new String[] {"test" + version})___        assertEquals("test" + (noVersionSupportsMultiTerm ? "no_version" : ""),_                analyzers.get("no_version").normalize("", "test").utf8ToString())__        assertEquals("test" + (luceneVersionSupportsMultiTerm ? version.luceneVersion.toString() : ""),_                analyzers.get("lucene_version").normalize("", "test").utf8ToString())__        assertEquals("test" + (elasticsearchVersionSupportsMultiTerm ? version.toString() : ""),_                analyzers.get("elasticsearch_version").normalize("", "test").utf8ToString())__    };tests,that,plugins,can,register,pre,configured,token,filters,that,vary,in,behavior,based,on,elasticsearch,version,lucene,version,and,that,do,not,vary,based,on,version,at,all;public,void,test,plugin,pre,configured,token,filters,throws,ioexception,boolean,no,version,supports,multi,term,random,boolean,boolean,lucene,version,supports,multi,term,random,boolean,boolean,elasticsearch,version,supports,multi,term,random,boolean,analysis,registry,registry,new,analysis,module,test,environment,new,environment,empty,node,settings,singleton,list,new,analysis,plugin,override,public,list,pre,configured,token,filter,get,pre,configured,token,filters,return,arrays,as,list,pre,configured,token,filter,singleton,no,version,supports,multi,term,token,stream,new,append,token,filter,token,stream,pre,configured,token,filter,lucene,version,lucene,version,supports,multi,term,token,stream,lucene,version,new,append,token,filter,token,stream,lucene,version,to,string,pre,configured,token,filter,elasticsearch,version,elasticsearch,version,supports,multi,term,token,stream,es,version,new,append,token,filter,token,stream,es,version,to,string,get,analysis,registry,version,version,version,utils,random,version,random,index,analyzers,analyzers,get,index,analyzers,registry,settings,builder,put,index,analysis,analyzer,tokenizer,standard,put,index,analysis,analyzer,filter,put,index,analysis,analyzer,tokenizer,standard,put,index,analysis,analyzer,filter,put,index,analysis,analyzer,tokenizer,standard,put,index,analysis,analyzer,filter,put,index,meta,data,version,build,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,test,version,lucene,version,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,test,version,assert,equals,test,no,version,supports,multi,term,analyzers,get,normalize,test,utf8to,string,assert,equals,test,lucene,version,supports,multi,term,version,lucene,version,to,string,analyzers,get,normalize,test,utf8to,string,assert,equals,test,elasticsearch,version,supports,multi,term,version,to,string,analyzers,get,normalize,test,utf8to,string
AnalysisModuleTests -> public void testPluginPreConfiguredTokenFilters() throws IOException;1541592065;Tests that plugins can register pre-configured token filters that vary in behavior based on Elasticsearch version, Lucene version,_and that do not vary based on version at all.;public void testPluginPreConfiguredTokenFilters() throws IOException {_        boolean noVersionSupportsMultiTerm = randomBoolean()__        boolean luceneVersionSupportsMultiTerm = randomBoolean()__        boolean elasticsearchVersionSupportsMultiTerm = randomBoolean()__        AnalysisRegistry registry = new AnalysisModule(TestEnvironment.newEnvironment(emptyNodeSettings),_                singletonList(new AnalysisPlugin() {_            @Override_            public List<PreConfiguredTokenFilter> getPreConfiguredTokenFilters() {_                return Arrays.asList(_                        PreConfiguredTokenFilter.singleton("no_version", noVersionSupportsMultiTerm,_                                tokenStream -> new AppendTokenFilter(tokenStream, "no_version")),_                        PreConfiguredTokenFilter.luceneVersion("lucene_version", luceneVersionSupportsMultiTerm,_                                (tokenStream, luceneVersion) -> new AppendTokenFilter(tokenStream, luceneVersion.toString())),_                        PreConfiguredTokenFilter.elasticsearchVersion("elasticsearch_version", elasticsearchVersionSupportsMultiTerm,_                                (tokenStream, esVersion) -> new AppendTokenFilter(tokenStream, esVersion.toString()))_                        )__            }_        })).getAnalysisRegistry()___        Version version = VersionUtils.randomVersion(random())__        IndexAnalyzers analyzers = getIndexAnalyzers(registry, Settings.builder()_                .put("index.analysis.analyzer.no_version.tokenizer", "standard")_                .put("index.analysis.analyzer.no_version.filter", "no_version")_                .put("index.analysis.analyzer.lucene_version.tokenizer", "standard")_                .put("index.analysis.analyzer.lucene_version.filter", "lucene_version")_                .put("index.analysis.analyzer.elasticsearch_version.tokenizer", "standard")_                .put("index.analysis.analyzer.elasticsearch_version.filter", "elasticsearch_version")_                .put(IndexMetaData.SETTING_VERSION_CREATED, version)_                .build())__        assertTokenStreamContents(analyzers.get("no_version").tokenStream("", "test"), new String[] {"testno_version"})__        assertTokenStreamContents(analyzers.get("lucene_version").tokenStream("", "test"), new String[] {"test" + version.luceneVersion})__        assertTokenStreamContents(analyzers.get("elasticsearch_version").tokenStream("", "test"), new String[] {"test" + version})___        assertEquals("test" + (noVersionSupportsMultiTerm ? "no_version" : ""),_                analyzers.get("no_version").normalize("", "test").utf8ToString())__        assertEquals("test" + (luceneVersionSupportsMultiTerm ? version.luceneVersion.toString() : ""),_                analyzers.get("lucene_version").normalize("", "test").utf8ToString())__        assertEquals("test" + (elasticsearchVersionSupportsMultiTerm ? version.toString() : ""),_                analyzers.get("elasticsearch_version").normalize("", "test").utf8ToString())__    };tests,that,plugins,can,register,pre,configured,token,filters,that,vary,in,behavior,based,on,elasticsearch,version,lucene,version,and,that,do,not,vary,based,on,version,at,all;public,void,test,plugin,pre,configured,token,filters,throws,ioexception,boolean,no,version,supports,multi,term,random,boolean,boolean,lucene,version,supports,multi,term,random,boolean,boolean,elasticsearch,version,supports,multi,term,random,boolean,analysis,registry,registry,new,analysis,module,test,environment,new,environment,empty,node,settings,singleton,list,new,analysis,plugin,override,public,list,pre,configured,token,filter,get,pre,configured,token,filters,return,arrays,as,list,pre,configured,token,filter,singleton,no,version,supports,multi,term,token,stream,new,append,token,filter,token,stream,pre,configured,token,filter,lucene,version,lucene,version,supports,multi,term,token,stream,lucene,version,new,append,token,filter,token,stream,lucene,version,to,string,pre,configured,token,filter,elasticsearch,version,elasticsearch,version,supports,multi,term,token,stream,es,version,new,append,token,filter,token,stream,es,version,to,string,get,analysis,registry,version,version,version,utils,random,version,random,index,analyzers,analyzers,get,index,analyzers,registry,settings,builder,put,index,analysis,analyzer,tokenizer,standard,put,index,analysis,analyzer,filter,put,index,analysis,analyzer,tokenizer,standard,put,index,analysis,analyzer,filter,put,index,analysis,analyzer,tokenizer,standard,put,index,analysis,analyzer,filter,put,index,meta,data,version,build,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,test,version,lucene,version,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,test,version,assert,equals,test,no,version,supports,multi,term,analyzers,get,normalize,test,utf8to,string,assert,equals,test,lucene,version,supports,multi,term,version,lucene,version,to,string,analyzers,get,normalize,test,utf8to,string,assert,equals,test,elasticsearch,version,supports,multi,term,version,to,string,analyzers,get,normalize,test,utf8to,string
AnalysisModuleTests -> public void testPluginPreConfiguredTokenFilters() throws IOException;1542897779;Tests that plugins can register pre-configured token filters that vary in behavior based on Elasticsearch version, Lucene version,_and that do not vary based on version at all.;public void testPluginPreConfiguredTokenFilters() throws IOException {_        boolean noVersionSupportsMultiTerm = randomBoolean()__        boolean luceneVersionSupportsMultiTerm = randomBoolean()__        boolean elasticsearchVersionSupportsMultiTerm = randomBoolean()__        AnalysisRegistry registry = new AnalysisModule(TestEnvironment.newEnvironment(emptyNodeSettings),_                singletonList(new AnalysisPlugin() {_            @Override_            public List<PreConfiguredTokenFilter> getPreConfiguredTokenFilters() {_                return Arrays.asList(_                        PreConfiguredTokenFilter.singleton("no_version", noVersionSupportsMultiTerm,_                                tokenStream -> new AppendTokenFilter(tokenStream, "no_version")),_                        PreConfiguredTokenFilter.luceneVersion("lucene_version", luceneVersionSupportsMultiTerm,_                                (tokenStream, luceneVersion) -> new AppendTokenFilter(tokenStream, luceneVersion.toString())),_                        PreConfiguredTokenFilter.elasticsearchVersion("elasticsearch_version", elasticsearchVersionSupportsMultiTerm,_                                (tokenStream, esVersion) -> new AppendTokenFilter(tokenStream, esVersion.toString()))_                        )__            }_        })).getAnalysisRegistry()___        Version version = VersionUtils.randomVersion(random())__        IndexAnalyzers analyzers = getIndexAnalyzers(registry, Settings.builder()_                .put("index.analysis.analyzer.no_version.tokenizer", "standard")_                .put("index.analysis.analyzer.no_version.filter", "no_version")_                .put("index.analysis.analyzer.lucene_version.tokenizer", "standard")_                .put("index.analysis.analyzer.lucene_version.filter", "lucene_version")_                .put("index.analysis.analyzer.elasticsearch_version.tokenizer", "standard")_                .put("index.analysis.analyzer.elasticsearch_version.filter", "elasticsearch_version")_                .put(IndexMetaData.SETTING_VERSION_CREATED, version)_                .build())__        assertTokenStreamContents(analyzers.get("no_version").tokenStream("", "test"), new String[] {"testno_version"})__        assertTokenStreamContents(analyzers.get("lucene_version").tokenStream("", "test"), new String[] {"test" + version.luceneVersion})__        assertTokenStreamContents(analyzers.get("elasticsearch_version").tokenStream("", "test"), new String[] {"test" + version})___        assertEquals("test" + (noVersionSupportsMultiTerm ? "no_version" : ""),_                analyzers.get("no_version").normalize("", "test").utf8ToString())__        assertEquals("test" + (luceneVersionSupportsMultiTerm ? version.luceneVersion.toString() : ""),_                analyzers.get("lucene_version").normalize("", "test").utf8ToString())__        assertEquals("test" + (elasticsearchVersionSupportsMultiTerm ? version.toString() : ""),_                analyzers.get("elasticsearch_version").normalize("", "test").utf8ToString())__    };tests,that,plugins,can,register,pre,configured,token,filters,that,vary,in,behavior,based,on,elasticsearch,version,lucene,version,and,that,do,not,vary,based,on,version,at,all;public,void,test,plugin,pre,configured,token,filters,throws,ioexception,boolean,no,version,supports,multi,term,random,boolean,boolean,lucene,version,supports,multi,term,random,boolean,boolean,elasticsearch,version,supports,multi,term,random,boolean,analysis,registry,registry,new,analysis,module,test,environment,new,environment,empty,node,settings,singleton,list,new,analysis,plugin,override,public,list,pre,configured,token,filter,get,pre,configured,token,filters,return,arrays,as,list,pre,configured,token,filter,singleton,no,version,supports,multi,term,token,stream,new,append,token,filter,token,stream,pre,configured,token,filter,lucene,version,lucene,version,supports,multi,term,token,stream,lucene,version,new,append,token,filter,token,stream,lucene,version,to,string,pre,configured,token,filter,elasticsearch,version,elasticsearch,version,supports,multi,term,token,stream,es,version,new,append,token,filter,token,stream,es,version,to,string,get,analysis,registry,version,version,version,utils,random,version,random,index,analyzers,analyzers,get,index,analyzers,registry,settings,builder,put,index,analysis,analyzer,tokenizer,standard,put,index,analysis,analyzer,filter,put,index,analysis,analyzer,tokenizer,standard,put,index,analysis,analyzer,filter,put,index,analysis,analyzer,tokenizer,standard,put,index,analysis,analyzer,filter,put,index,meta,data,version,build,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,test,version,lucene,version,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,test,version,assert,equals,test,no,version,supports,multi,term,analyzers,get,normalize,test,utf8to,string,assert,equals,test,lucene,version,supports,multi,term,version,lucene,version,to,string,analyzers,get,normalize,test,utf8to,string,assert,equals,test,elasticsearch,version,supports,multi,term,version,to,string,analyzers,get,normalize,test,utf8to,string
AnalysisModuleTests -> public void testPluginPreConfiguredTokenFilters() throws IOException;1549644913;Tests that plugins can register pre-configured token filters that vary in behavior based on Elasticsearch version, Lucene version,_and that do not vary based on version at all.;public void testPluginPreConfiguredTokenFilters() throws IOException {_        boolean noVersionSupportsMultiTerm = randomBoolean()__        boolean luceneVersionSupportsMultiTerm = randomBoolean()__        boolean elasticsearchVersionSupportsMultiTerm = randomBoolean()__        AnalysisRegistry registry = new AnalysisModule(TestEnvironment.newEnvironment(emptyNodeSettings),_                singletonList(new AnalysisPlugin() {_            @Override_            public List<PreConfiguredTokenFilter> getPreConfiguredTokenFilters() {_                return Arrays.asList(_                        PreConfiguredTokenFilter.singleton("no_version", noVersionSupportsMultiTerm,_                                tokenStream -> new AppendTokenFilter(tokenStream, "no_version")),_                        PreConfiguredTokenFilter.luceneVersion("lucene_version", luceneVersionSupportsMultiTerm,_                                (tokenStream, luceneVersion) -> new AppendTokenFilter(tokenStream, luceneVersion.toString())),_                        PreConfiguredTokenFilter.elasticsearchVersion("elasticsearch_version", elasticsearchVersionSupportsMultiTerm,_                                (tokenStream, esVersion) -> new AppendTokenFilter(tokenStream, esVersion.toString()))_                        )__            }_        })).getAnalysisRegistry()___        Version version = VersionUtils.randomVersion(random())__        IndexAnalyzers analyzers = getIndexAnalyzers(registry, Settings.builder()_                .put("index.analysis.analyzer.no_version.tokenizer", "standard")_                .put("index.analysis.analyzer.no_version.filter", "no_version")_                .put("index.analysis.analyzer.lucene_version.tokenizer", "standard")_                .put("index.analysis.analyzer.lucene_version.filter", "lucene_version")_                .put("index.analysis.analyzer.elasticsearch_version.tokenizer", "standard")_                .put("index.analysis.analyzer.elasticsearch_version.filter", "elasticsearch_version")_                .put(IndexMetaData.SETTING_VERSION_CREATED, version)_                .build())__        assertTokenStreamContents(analyzers.get("no_version").tokenStream("", "test"), new String[] {"testno_version"})__        assertTokenStreamContents(analyzers.get("lucene_version").tokenStream("", "test"), new String[] {"test" + version.luceneVersion})__        assertTokenStreamContents(analyzers.get("elasticsearch_version").tokenStream("", "test"), new String[] {"test" + version})___        assertEquals("test" + (noVersionSupportsMultiTerm ? "no_version" : ""),_                analyzers.get("no_version").normalize("", "test").utf8ToString())__        assertEquals("test" + (luceneVersionSupportsMultiTerm ? version.luceneVersion.toString() : ""),_                analyzers.get("lucene_version").normalize("", "test").utf8ToString())__        assertEquals("test" + (elasticsearchVersionSupportsMultiTerm ? version.toString() : ""),_                analyzers.get("elasticsearch_version").normalize("", "test").utf8ToString())__    };tests,that,plugins,can,register,pre,configured,token,filters,that,vary,in,behavior,based,on,elasticsearch,version,lucene,version,and,that,do,not,vary,based,on,version,at,all;public,void,test,plugin,pre,configured,token,filters,throws,ioexception,boolean,no,version,supports,multi,term,random,boolean,boolean,lucene,version,supports,multi,term,random,boolean,boolean,elasticsearch,version,supports,multi,term,random,boolean,analysis,registry,registry,new,analysis,module,test,environment,new,environment,empty,node,settings,singleton,list,new,analysis,plugin,override,public,list,pre,configured,token,filter,get,pre,configured,token,filters,return,arrays,as,list,pre,configured,token,filter,singleton,no,version,supports,multi,term,token,stream,new,append,token,filter,token,stream,pre,configured,token,filter,lucene,version,lucene,version,supports,multi,term,token,stream,lucene,version,new,append,token,filter,token,stream,lucene,version,to,string,pre,configured,token,filter,elasticsearch,version,elasticsearch,version,supports,multi,term,token,stream,es,version,new,append,token,filter,token,stream,es,version,to,string,get,analysis,registry,version,version,version,utils,random,version,random,index,analyzers,analyzers,get,index,analyzers,registry,settings,builder,put,index,analysis,analyzer,tokenizer,standard,put,index,analysis,analyzer,filter,put,index,analysis,analyzer,tokenizer,standard,put,index,analysis,analyzer,filter,put,index,analysis,analyzer,tokenizer,standard,put,index,analysis,analyzer,filter,put,index,meta,data,version,build,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,test,version,lucene,version,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,test,version,assert,equals,test,no,version,supports,multi,term,analyzers,get,normalize,test,utf8to,string,assert,equals,test,lucene,version,supports,multi,term,version,lucene,version,to,string,analyzers,get,normalize,test,utf8to,string,assert,equals,test,elasticsearch,version,supports,multi,term,version,to,string,analyzers,get,normalize,test,utf8to,string
AnalysisModuleTests -> public void testPluginPreConfiguredTokenFilters() throws IOException;1549876755;Tests that plugins can register pre-configured token filters that vary in behavior based on Elasticsearch version, Lucene version,_and that do not vary based on version at all.;public void testPluginPreConfiguredTokenFilters() throws IOException {_        boolean noVersionSupportsMultiTerm = randomBoolean()__        boolean luceneVersionSupportsMultiTerm = randomBoolean()__        boolean elasticsearchVersionSupportsMultiTerm = randomBoolean()__        AnalysisRegistry registry = new AnalysisModule(TestEnvironment.newEnvironment(emptyNodeSettings),_                singletonList(new AnalysisPlugin() {_            @Override_            public List<PreConfiguredTokenFilter> getPreConfiguredTokenFilters() {_                return Arrays.asList(_                        PreConfiguredTokenFilter.singleton("no_version", noVersionSupportsMultiTerm,_                                tokenStream -> new AppendTokenFilter(tokenStream, "no_version")),_                        PreConfiguredTokenFilter.luceneVersion("lucene_version", luceneVersionSupportsMultiTerm,_                                (tokenStream, luceneVersion) -> new AppendTokenFilter(tokenStream, luceneVersion.toString())),_                        PreConfiguredTokenFilter.elasticsearchVersion("elasticsearch_version", elasticsearchVersionSupportsMultiTerm,_                                (tokenStream, esVersion) -> new AppendTokenFilter(tokenStream, esVersion.toString()))_                        )__            }_        })).getAnalysisRegistry()___        Version version = VersionUtils.randomVersion(random())__        IndexAnalyzers analyzers = getIndexAnalyzers(registry, Settings.builder()_                .put("index.analysis.analyzer.no_version.tokenizer", "standard")_                .put("index.analysis.analyzer.no_version.filter", "no_version")_                .put("index.analysis.analyzer.lucene_version.tokenizer", "standard")_                .put("index.analysis.analyzer.lucene_version.filter", "lucene_version")_                .put("index.analysis.analyzer.elasticsearch_version.tokenizer", "standard")_                .put("index.analysis.analyzer.elasticsearch_version.filter", "elasticsearch_version")_                .put(IndexMetaData.SETTING_VERSION_CREATED, version)_                .build())__        assertTokenStreamContents(analyzers.get("no_version").tokenStream("", "test"), new String[] {"testno_version"})__        assertTokenStreamContents(analyzers.get("lucene_version").tokenStream("", "test"), new String[] {"test" + version.luceneVersion})__        assertTokenStreamContents(analyzers.get("elasticsearch_version").tokenStream("", "test"), new String[] {"test" + version})___        assertEquals("test" + (noVersionSupportsMultiTerm ? "no_version" : ""),_                analyzers.get("no_version").normalize("", "test").utf8ToString())__        assertEquals("test" + (luceneVersionSupportsMultiTerm ? version.luceneVersion.toString() : ""),_                analyzers.get("lucene_version").normalize("", "test").utf8ToString())__        assertEquals("test" + (elasticsearchVersionSupportsMultiTerm ? version.toString() : ""),_                analyzers.get("elasticsearch_version").normalize("", "test").utf8ToString())__    };tests,that,plugins,can,register,pre,configured,token,filters,that,vary,in,behavior,based,on,elasticsearch,version,lucene,version,and,that,do,not,vary,based,on,version,at,all;public,void,test,plugin,pre,configured,token,filters,throws,ioexception,boolean,no,version,supports,multi,term,random,boolean,boolean,lucene,version,supports,multi,term,random,boolean,boolean,elasticsearch,version,supports,multi,term,random,boolean,analysis,registry,registry,new,analysis,module,test,environment,new,environment,empty,node,settings,singleton,list,new,analysis,plugin,override,public,list,pre,configured,token,filter,get,pre,configured,token,filters,return,arrays,as,list,pre,configured,token,filter,singleton,no,version,supports,multi,term,token,stream,new,append,token,filter,token,stream,pre,configured,token,filter,lucene,version,lucene,version,supports,multi,term,token,stream,lucene,version,new,append,token,filter,token,stream,lucene,version,to,string,pre,configured,token,filter,elasticsearch,version,elasticsearch,version,supports,multi,term,token,stream,es,version,new,append,token,filter,token,stream,es,version,to,string,get,analysis,registry,version,version,version,utils,random,version,random,index,analyzers,analyzers,get,index,analyzers,registry,settings,builder,put,index,analysis,analyzer,tokenizer,standard,put,index,analysis,analyzer,filter,put,index,analysis,analyzer,tokenizer,standard,put,index,analysis,analyzer,filter,put,index,analysis,analyzer,tokenizer,standard,put,index,analysis,analyzer,filter,put,index,meta,data,version,build,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,test,version,lucene,version,assert,token,stream,contents,analyzers,get,token,stream,test,new,string,test,version,assert,equals,test,no,version,supports,multi,term,analyzers,get,normalize,test,utf8to,string,assert,equals,test,lucene,version,supports,multi,term,version,lucene,version,to,string,analyzers,get,normalize,test,utf8to,string,assert,equals,test,elasticsearch,version,supports,multi,term,version,to,string,analyzers,get,normalize,test,utf8to,string
