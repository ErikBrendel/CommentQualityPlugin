commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;public void testConcatentation() {     List<Integer> threeTwoOne = Arrays.asList(3, 2, 1).     List<Integer> fourFiveSix = Arrays.asList(4, 5, 6).     Iterator<Integer> concat = Iterators.concat(threeTwoOne.iterator(), fourFiveSix.iterator()).     assertContainsInOrder(concat, 3, 2, 1, 4, 5, 6). }
false;public;0;4;;public void testNoConcatenation() {     Iterator<Integer> iterator = Iterators.<Integer>concat().     assertEmptyIterator(iterator). }
false;public;0;4;;public void testEmptyConcatenation() {     Iterator<Integer> iterator = Iterators.<Integer>concat(empty()).     assertEmptyIterator(iterator). }
false;public;0;4;;public void testMultipleEmptyConcatenation() {     Iterator<Integer> iterator = Iterators.concat(empty(), empty()).     assertEmptyIterator(iterator). }
false;public;0;4;;public void testSingleton() {     int value = randomInt().     assertSingleton(value, singletonIterator(value)). }
false;public;0;4;;public void testEmptyBeforeSingleton() {     int value = randomInt().     assertSingleton(value, empty(), singletonIterator(value)). }
false;public;0;4;;public void testEmptyAfterSingleton() {     int value = randomInt().     assertSingleton(value, singletonIterator(value), empty()). }
false;public;0;10;;public void testRandomSingleton() {     int numberOfIterators = randomIntBetween(1, 1000).     int singletonIndex = randomIntBetween(0, numberOfIterators - 1).     int value = randomInt().     Iterator<Integer>[] iterators = new Iterator[numberOfIterators].     for (int i = 0. i < numberOfIterators. i++) {         iterators[i] = i != singletonIndex ? empty() : singletonIterator(value).     }     assertSingleton(value, iterators). }
false;public;0;16;;public void testRandomIterators() {     int numberOfIterators = randomIntBetween(1, 1000).     Iterator<Integer>[] iterators = new Iterator[numberOfIterators].     List<Integer> values = new ArrayList<>().     for (int i = 0. i < numberOfIterators. i++) {         int numberOfValues = randomIntBetween(0, 256).         List<Integer> theseValues = new ArrayList<>().         for (int j = 0. j < numberOfValues. j++) {             int value = randomInt().             values.add(value).             theseValues.add(value).         }         iterators[i] = theseValues.iterator().     }     assertContainsInOrder(Iterators.concat(iterators), values.toArray(new Integer[values.size()])). }
false;public;0;6;;public void testTwoEntries() {     int first = randomInt().     int second = randomInt().     Iterator<Integer> concat = Iterators.concat(singletonIterator(first), empty(), empty(), singletonIterator(second)).     assertContainsInOrder(concat, first, second). }
false;public;0;8;;public void testNull() {     try {         Iterators.concat((Iterator<?>) null).         fail("expected " + NullPointerException.class.getSimpleName()).     } catch (NullPointerException e) {     } }
false;public;0;8;;public void testNullIterator() {     try {         Iterators.concat(singletonIterator(1), empty(), null, empty(), singletonIterator(2)).         fail("expected " + NullPointerException.class.getSimpleName()).     } catch (NullPointerException e) {     } }
false;private;1;3;;private <T> Iterator<T> singletonIterator(T value) {     return Collections.singleton(value).iterator(). }
false;private;2;4;;private <T> void assertSingleton(T value, Iterator<T>... iterators) {     Iterator<T> concat = Iterators.concat(iterators).     assertContainsInOrder(concat, value). }
false;public;0;4;;@Override public boolean hasNext() {     return false. }
false;public;0;4;;@Override public T next() {     throw new NoSuchElementException(). }
false;private;0;13;;private <T> Iterator<T> empty() {     return new Iterator<T>() {          @Override         public boolean hasNext() {             return false.         }          @Override         public T next() {             throw new NoSuchElementException().         }     }. }
false;private;2;7;;private <T> void assertContainsInOrder(Iterator<T> iterator, T... values) {     for (T value : values) {         assertTrue(iterator.hasNext()).         assertEquals(value, iterator.next()).     }     assertNoSuchElementException(iterator). }
false;private;1;4;;private <T> void assertEmptyIterator(Iterator<T> iterator) {     assertFalse(iterator.hasNext()).     assertNoSuchElementException(iterator). }
false;private;1;8;;private <T> void assertNoSuchElementException(Iterator<T> iterator) {     try {         iterator.next().         fail("expected " + NoSuchElementException.class.getSimpleName()).     } catch (NoSuchElementException e) {     } }
