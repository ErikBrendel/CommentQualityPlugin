commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;public void testAllowPartialsWithRedState() throws Exception {     final int numShards = cluster().numDataNodes() + 2.     buildRedIndex(numShards).     SearchResponse searchResponse = client().prepareSearch().setSize(0).setAllowPartialSearchResults(true).get().     assertThat(RestStatus.OK, equalTo(searchResponse.status())).     assertThat("Expect no shards failed", searchResponse.getFailedShards(), equalTo(0)).     assertThat("Expect no shards skipped", searchResponse.getSkippedShards(), equalTo(0)).     assertThat("Expect subset of shards successful", searchResponse.getSuccessfulShards(), lessThan(numShards)).     assertThat("Expected total shards", searchResponse.getTotalShards(), equalTo(numShards)). }
false;public;0;13;;public void testClusterAllowPartialsWithRedState() throws Exception {     final int numShards = cluster().numDataNodes() + 2.     buildRedIndex(numShards).     setClusterDefaultAllowPartialResults(true).     SearchResponse searchResponse = client().prepareSearch().setSize(0).get().     assertThat(RestStatus.OK, equalTo(searchResponse.status())).     assertThat("Expect no shards failed", searchResponse.getFailedShards(), equalTo(0)).     assertThat("Expect no shards skipped", searchResponse.getSkippedShards(), equalTo(0)).     assertThat("Expect subset of shards successful", searchResponse.getSuccessfulShards(), lessThan(numShards)).     assertThat("Expected total shards", searchResponse.getTotalShards(), equalTo(numShards)). }
false;public;0;9;;public void testDisallowPartialsWithRedState() throws Exception {     buildRedIndex(cluster().numDataNodes() + 2).     SearchPhaseExecutionException ex = expectThrows(SearchPhaseExecutionException.class, () -> client().prepareSearch().setSize(0).setAllowPartialSearchResults(false).get()).     assertThat(ex.getDetailedMessage(), containsString("Search rejected due to missing shard")). }
false;public;0;10;;public void testClusterDisallowPartialsWithRedState() throws Exception {     buildRedIndex(cluster().numDataNodes() + 2).     setClusterDefaultAllowPartialResults(false).     SearchPhaseExecutionException ex = expectThrows(SearchPhaseExecutionException.class, () -> client().prepareSearch().setSize(0).get()).     assertThat(ex.getDetailedMessage(), containsString("Search rejected due to missing shard")). }
false;private;1;13;;private void setClusterDefaultAllowPartialResults(boolean allowPartialResults) {     String key = SearchService.DEFAULT_ALLOW_PARTIAL_SEARCH_RESULTS.getKey().     Settings transientSettings = Settings.builder().put(key, allowPartialResults).build().     ClusterUpdateSettingsResponse response1 = client().admin().cluster().prepareUpdateSettings().setTransientSettings(transientSettings).get().     assertAcked(response1).     assertEquals(response1.getTransientSettings().getAsBoolean(key, null), allowPartialResults). }
false;private;1;20;;private void buildRedIndex(int numShards) throws Exception {     assertAcked(prepareCreate("test").setSettings(Settings.builder().put("index.number_of_shards", numShards).put("index.number_of_replicas", 0))).     ensureGreen().     for (int i = 0. i < 10. i++) {         client().prepareIndex("test", "type1", "" + i).setSource("field1", "value1").get().     }     refresh().     internalCluster().stopRandomDataNode().     client().admin().cluster().prepareHealth().setWaitForStatus(ClusterHealthStatus.RED).get().     assertBusy(() -> {         ClusterState clusterState = client().admin().cluster().prepareState().get().getState().         List<ShardRouting> unassigneds = clusterState.getRoutingTable().shardsWithState(ShardRoutingState.UNASSIGNED).         assertThat(unassigneds.size(), greaterThan(0)).     }). }
false;public;0;5;;@After public void cleanup() throws Exception {     assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(Settings.builder().putNull(SearchService.DEFAULT_ALLOW_PARTIAL_SEARCH_RESULTS.getKey()))). }
