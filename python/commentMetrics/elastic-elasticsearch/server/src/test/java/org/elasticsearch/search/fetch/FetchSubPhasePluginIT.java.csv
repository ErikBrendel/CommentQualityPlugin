commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     return Collections.singletonList(FetchTermVectorsPlugin.class). }
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> transportClientPlugins() {     return nodePlugins(). }
false;public;0;32;;@SuppressWarnings("unchecked") public void testPlugin() throws Exception {     client().admin().indices().prepareCreate("test").addMapping("type1", jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("test").field("type", "text").field("term_vector", "yes").endObject().endObject().endObject().endObject()).get().     client().index(indexRequest("test").type("type1").id("1").source(jsonBuilder().startObject().field("test", "I am sam i am").endObject())).actionGet().     client().admin().indices().prepareRefresh().get().     SearchResponse response = client().prepareSearch().setSource(new SearchSourceBuilder().ext(Collections.singletonList(new TermVectorsFetchBuilder("test")))).get().     assertSearchResponse(response).     assertThat(((Map<String, Integer>) response.getHits().getAt(0).field("term_vectors_fetch").getValues().get(0)).get("i"), equalTo(2)).     assertThat(((Map<String, Integer>) response.getHits().getAt(0).field("term_vectors_fetch").getValues().get(0)).get("am"), equalTo(2)).     assertThat(((Map<String, Integer>) response.getHits().getAt(0).field("term_vectors_fetch").getValues().get(0)).get("sam"), equalTo(1)). }
false;public;1;4;;@Override public List<FetchSubPhase> getFetchSubPhases(FetchPhaseConstructionContext context) {     return singletonList(new TermVectorsFetchSubPhase()). }
false;public;0;5;;@Override public List<SearchExtSpec<?>> getSearchExts() {     return Collections.singletonList(new SearchExtSpec<>(TermVectorsFetchSubPhase.NAME, TermVectorsFetchBuilder::new, TermVectorsFetchBuilder::fromXContent)). }
false;public;2;30;;@Override public void hitExecute(SearchContext context, HitContext hitContext) {     TermVectorsFetchBuilder fetchSubPhaseBuilder = (TermVectorsFetchBuilder) context.getSearchExt(NAME).     if (fetchSubPhaseBuilder == null) {         return.     }     String field = fetchSubPhaseBuilder.getField().     if (hitContext.hit().fieldsOrNull() == null) {         hitContext.hit().fields(new HashMap<>()).     }     DocumentField hitField = hitContext.hit().getFields().get(NAME).     if (hitField == null) {         hitField = new DocumentField(NAME, new ArrayList<>(1)).         hitContext.hit().getFields().put(NAME, hitField).     }     TermVectorsRequest termVectorsRequest = new TermVectorsRequest(context.indexShard().shardId().getIndex().getName(), hitContext.hit().getType(), hitContext.hit().getId()).     TermVectorsResponse termVector = TermVectorsService.getTermVectors(context.indexShard(), termVectorsRequest).     try {         Map<String, Integer> tv = new HashMap<>().         TermsEnum terms = termVector.getFields().terms(field).iterator().         BytesRef term.         while ((term = terms.next()) != null) {             tv.put(term.utf8ToString(), terms.postings(null, PostingsEnum.ALL).freq()).         }         hitField.getValues().add(tv).     } catch (IOException e) {         LogManager.getLogger(FetchSubPhasePluginIT.class).info("Swallowed exception", e).     } }
false;public,static;1;13;;public static TermVectorsFetchBuilder fromXContent(XContentParser parser) throws IOException {     String field.     XContentParser.Token token = parser.currentToken().     if (token == XContentParser.Token.VALUE_STRING) {         field = parser.text().     } else {         throw new ParsingException(parser.getTokenLocation(), "Expected a VALUE_STRING but got " + token).     }     if (field == null) {         throw new ParsingException(parser.getTokenLocation(), "no fields specified for " + TermVectorsFetchSubPhase.NAME).     }     return new TermVectorsFetchBuilder(field). }
false;private;0;3;;private String getField() {     return field. }
false;public;1;11;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     TermVectorsFetchBuilder that = (TermVectorsFetchBuilder) o.     return Objects.equals(field, that.field). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(field). }
false;public;0;4;;@Override public String getWriteableName() {     return TermVectorsFetchSubPhase.NAME. }
false;public;1;4;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(field). }
false;public;2;4;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     return builder.field(TermVectorsFetchSubPhase.NAME, field). }
