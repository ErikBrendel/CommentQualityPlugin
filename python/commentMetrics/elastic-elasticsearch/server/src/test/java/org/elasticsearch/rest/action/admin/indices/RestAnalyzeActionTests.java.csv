commented;modifiers;parameterAmount;loc;comment;code
false;public;0;21;;public void testParseXContentForAnalyzeRequest() throws Exception {     try (XContentParser content = createParser(XContentFactory.jsonBuilder().startObject().field("text", "THIS IS A TEST").field("tokenizer", "keyword").array("filter", "lowercase").endObject())) {         AnalyzeRequest analyzeRequest = new AnalyzeRequest("for test").         RestAnalyzeAction.buildFromContent(content, analyzeRequest).         assertThat(analyzeRequest.text().length, equalTo(1)).         assertThat(analyzeRequest.text(), equalTo(new String[] { "THIS IS A TEST" })).         assertThat(analyzeRequest.tokenizer().name, equalTo("keyword")).         assertThat(analyzeRequest.tokenFilters().size(), equalTo(1)).         for (AnalyzeRequest.NameOrDefinition filter : analyzeRequest.tokenFilters()) {             assertThat(filter.name, equalTo("lowercase")).         }     } }
false;public;0;36;;public void testParseXContentForAnalyzeRequestWithCustomFilters() throws Exception {     try (XContentParser content = createParser(XContentFactory.jsonBuilder().startObject().field("text", "THIS IS A TEST").field("tokenizer", "keyword").startArray("filter").value("lowercase").startObject().field("type", "stop").array("stopwords", "foo", "buzz").endObject().endArray().startArray("char_filter").startObject().field("type", "mapping").array("mappings", "ph => f", "qu => q").endObject().endArray().field("normalizer", "normalizer").endObject())) {         AnalyzeRequest analyzeRequest = new AnalyzeRequest("for test").         RestAnalyzeAction.buildFromContent(content, analyzeRequest).         assertThat(analyzeRequest.text().length, equalTo(1)).         assertThat(analyzeRequest.text(), equalTo(new String[] { "THIS IS A TEST" })).         assertThat(analyzeRequest.tokenizer().name, equalTo("keyword")).         assertThat(analyzeRequest.tokenFilters().size(), equalTo(2)).         assertThat(analyzeRequest.tokenFilters().get(0).name, equalTo("lowercase")).         assertThat(analyzeRequest.tokenFilters().get(1).definition, notNullValue()).         assertThat(analyzeRequest.charFilters().size(), equalTo(1)).         assertThat(analyzeRequest.charFilters().get(0).definition, notNullValue()).         assertThat(analyzeRequest.normalizer(), equalTo("normalizer")).     } }
false;public;0;7;;public void testParseXContentForAnalyzeRequestWithInvalidJsonThrowsException() throws Exception {     RestAnalyzeAction action = new RestAnalyzeAction(Settings.EMPTY, mock(RestController.class)).     RestRequest request = new FakeRestRequest.Builder(xContentRegistry()).withContent(new BytesArray("{invalid_json}"), XContentType.JSON).build().     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> action.handleRequest(request, null, null)).     assertThat(e.getMessage(), equalTo("Failed to parse request body")). }
false;public;0;12;;public void testParseXContentForAnalyzeRequestWithUnknownParamThrowsException() throws Exception {     AnalyzeRequest analyzeRequest = new AnalyzeRequest("for test").     try (XContentParser invalidContent = createParser(XContentFactory.jsonBuilder().startObject().field("text", "THIS IS A TEST").field("unknown", "keyword").endObject())) {         IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> RestAnalyzeAction.buildFromContent(invalidContent, analyzeRequest)).         assertThat(e.getMessage(), startsWith("Unknown parameter [unknown]")).     } }
false;public;0;11;;public void testParseXContentForAnalyzeRequestWithInvalidStringExplainParamThrowsException() throws Exception {     AnalyzeRequest analyzeRequest = new AnalyzeRequest("for test").     try (XContentParser invalidExplain = createParser(XContentFactory.jsonBuilder().startObject().field("explain", "fals").endObject())) {         IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> RestAnalyzeAction.buildFromContent(invalidExplain, analyzeRequest)).         assertThat(e.getMessage(), startsWith("explain must be either 'true' or 'false'")).     } }
false;public;0;11;;public void testParseXContentForAnalyzeRequestWithInvalidNormalizerThrowsException() throws Exception {     AnalyzeRequest analyzeRequest = new AnalyzeRequest("for test").     try (XContentParser invalidExplain = createParser(XContentFactory.jsonBuilder().startObject().field("normalizer", true).endObject())) {         IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> RestAnalyzeAction.buildFromContent(invalidExplain, analyzeRequest)).         assertThat(e.getMessage(), startsWith("normalizer should be normalizer's name")).     } }
false;public;0;45;;public void testDeprecatedParamIn2xException() throws Exception {     try (XContentParser parser = createParser(XContentFactory.jsonBuilder().startObject().field("text", "THIS IS A TEST").field("tokenizer", "keyword").array("filters", "lowercase").endObject())) {         IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> RestAnalyzeAction.buildFromContent(parser, new AnalyzeRequest("for test"))).         assertThat(e.getMessage(), startsWith("Unknown parameter [filters]")).     }     try (XContentParser parser = createParser(XContentFactory.jsonBuilder().startObject().field("text", "THIS IS A TEST").field("tokenizer", "keyword").array("token_filters", "lowercase").endObject())) {         IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> RestAnalyzeAction.buildFromContent(parser, new AnalyzeRequest("for test"))).         assertThat(e.getMessage(), startsWith("Unknown parameter [token_filters]")).     }     try (XContentParser parser = createParser(XContentFactory.jsonBuilder().startObject().field("text", "THIS IS A TEST").field("tokenizer", "keyword").array("char_filters", "lowercase").endObject())) {         IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> RestAnalyzeAction.buildFromContent(parser, new AnalyzeRequest("for test"))).         assertThat(e.getMessage(), startsWith("Unknown parameter [char_filters]")).     }     try (XContentParser parser = createParser(XContentFactory.jsonBuilder().startObject().field("text", "THIS IS A TEST").field("tokenizer", "keyword").array("token_filter", "lowercase").endObject())) {         IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> RestAnalyzeAction.buildFromContent(parser, new AnalyzeRequest("for test"))).         assertThat(e.getMessage(), startsWith("Unknown parameter [token_filter]")).     } }
