commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;public void testIllegalLang() {     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> LocaleUtils.parse("yz")).     assertThat(e.getMessage(), Matchers.containsString("Unknown language: yz")).     e = expectThrows(IllegalArgumentException.class, () -> LocaleUtils.parse("yz-CA")).     assertThat(e.getMessage(), Matchers.containsString("Unknown language: yz")). }
false;public;0;9;;public void testIllegalCountry() {     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> LocaleUtils.parse("en-YZ")).     assertThat(e.getMessage(), Matchers.containsString("Unknown country: YZ")).     e = expectThrows(IllegalArgumentException.class, () -> LocaleUtils.parse("en-YZ-foobar")).     assertThat(e.getMessage(), Matchers.containsString("Unknown country: YZ")). }
false;public;0;5;;public void testIllegalNumberOfParts() {     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> LocaleUtils.parse("en-US-foo-bar")).     assertThat(e.getMessage(), Matchers.containsString("Locales can have at most 3 parts but got 4")). }
false;public;0;5;;public void testUnderscores() {     Locale locale1 = LocaleUtils.parse("fr_FR").     Locale locale2 = LocaleUtils.parse("fr-FR").     assertEquals(locale2, locale1). }
false;public;0;6;;public void testSimple() {     assertEquals(Locale.FRENCH, LocaleUtils.parse("fr")).     assertEquals(Locale.FRANCE, LocaleUtils.parse("fr-FR")).     assertEquals(Locale.ROOT, LocaleUtils.parse("root")).     assertEquals(Locale.ROOT, LocaleUtils.parse("")). }
