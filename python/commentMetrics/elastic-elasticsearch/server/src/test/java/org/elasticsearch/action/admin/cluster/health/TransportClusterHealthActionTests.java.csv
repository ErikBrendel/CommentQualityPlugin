commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;public void testWaitForInitializingShards() throws Exception {     final String[] indices = { "test" }.     final ClusterHealthRequest request = new ClusterHealthRequest().     request.waitForNoInitializingShards(true).     ClusterState clusterState = randomClusterStateWithInitializingShards("test", 0).     ClusterHealthResponse response = new ClusterHealthResponse("", indices, clusterState).     assertThat(TransportClusterHealthAction.prepareResponse(request, response, clusterState, null), equalTo(1)).     request.waitForNoInitializingShards(true).     clusterState = randomClusterStateWithInitializingShards("test", between(1, 10)).     response = new ClusterHealthResponse("", indices, clusterState).     assertThat(TransportClusterHealthAction.prepareResponse(request, response, clusterState, null), equalTo(0)).     request.waitForNoInitializingShards(false).     clusterState = randomClusterStateWithInitializingShards("test", randomInt(20)).     response = new ClusterHealthResponse("", indices, clusterState).     assertThat(TransportClusterHealthAction.prepareResponse(request, response, clusterState, null), equalTo(0)). }
false;public;0;13;;public void testWaitForAllShards() {     final String[] indices = { "test" }.     final ClusterHealthRequest request = new ClusterHealthRequest().     request.waitForActiveShards(ActiveShardCount.ALL).     ClusterState clusterState = randomClusterStateWithInitializingShards("test", 1).     ClusterHealthResponse response = new ClusterHealthResponse("", indices, clusterState).     assertThat(TransportClusterHealthAction.prepareResponse(request, response, clusterState, null), equalTo(0)).     clusterState = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).build().     response = new ClusterHealthResponse("", indices, clusterState).     assertThat(TransportClusterHealthAction.prepareResponse(request, response, clusterState, null), equalTo(1)). }
false;;2;38;;ClusterState randomClusterStateWithInitializingShards(String index, final int initializingShards) {     final IndexMetaData indexMetaData = IndexMetaData.builder(index).settings(settings(Version.CURRENT)).numberOfShards(between(1, 10)).numberOfReplicas(randomInt(20)).build().     final List<ShardRoutingState> shardRoutingStates = new ArrayList<>().     IntStream.range(0, between(1, 30)).forEach(i -> shardRoutingStates.add(randomFrom(ShardRoutingState.STARTED, ShardRoutingState.UNASSIGNED, ShardRoutingState.RELOCATING))).     IntStream.range(0, initializingShards).forEach(i -> shardRoutingStates.add(ShardRoutingState.INITIALIZING)).     Randomness.shuffle(shardRoutingStates).     final ShardId shardId = new ShardId(new Index("index", "uuid"), 0).     final IndexRoutingTable.Builder routingTable = new IndexRoutingTable.Builder(indexMetaData.getIndex()).     // Primary     {         ShardRoutingState state = shardRoutingStates.remove(0).         String node = state == ShardRoutingState.UNASSIGNED ? null : "node".         routingTable.addShard(TestShardRouting.newShardRouting(shardId, node, "relocating", true, state)).     }     // Replicas     for (int i = 0. i < shardRoutingStates.size(). i++) {         ShardRoutingState state = shardRoutingStates.get(i).         String node = state == ShardRoutingState.UNASSIGNED ? null : "node" + i.         routingTable.addShard(TestShardRouting.newShardRouting(shardId, node, "relocating" + i, randomBoolean(), state)).     }     return ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(MetaData.builder().put(indexMetaData, true)).routingTable(RoutingTable.builder().add(routingTable.build()).build()).build(). }
