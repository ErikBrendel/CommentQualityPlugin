commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;25;;@Override protected StoredScriptSource createTestInstance() {     XContentType xContentType = randomFrom(XContentType.JSON, XContentType.YAML).     try {         XContentBuilder template = XContentBuilder.builder(xContentType.xContent()).         template.startObject().         template.startObject("script").         {             template.field("lang", "mustache").             template.startObject("source").             template.startObject("query").startObject("match").field("title", "{{query_string}}").endObject().             template.endObject().             template.endObject().         }         template.endObject().         template.endObject().         Map<String, String> options = new HashMap<>().         if (randomBoolean()) {             options.put(Script.CONTENT_TYPE_OPTION, xContentType.mediaType()).         }         return StoredScriptSource.parse(BytesReference.bytes(template), xContentType).     } catch (IOException e) {         throw new AssertionError("Failed to create test instance", e).     } }
false;protected;1;4;;@Override protected StoredScriptSource doParseInstance(XContentParser parser) {     return StoredScriptSource.fromXContent(parser, false). }
false;protected;0;4;;@Override protected Reader<StoredScriptSource> instanceReader() {     return StoredScriptSource::new. }
false;protected;1;30;;@Override protected StoredScriptSource mutateInstance(StoredScriptSource instance) throws IOException {     String source = instance.getSource().     String lang = instance.getLang().     Map<String, String> options = instance.getOptions().     XContentType newXContentType = randomFrom(XContentType.JSON, XContentType.YAML).     XContentBuilder newTemplate = XContentBuilder.builder(newXContentType.xContent()).     newTemplate.startObject().     newTemplate.startObject("query").     newTemplate.startObject("match").     newTemplate.field("body", "{{query_string}}").     newTemplate.endObject().     newTemplate.endObject().     newTemplate.endObject().     switch(between(0, 2)) {         case 0:             source = Strings.toString(newTemplate).             break.         case 1:             lang = randomAlphaOfLengthBetween(1, 20).             break.         case 2:         default:             options = new HashMap<>(options).             options.put(randomAlphaOfLengthBetween(1, 20), randomAlphaOfLengthBetween(1, 20)).     }     return new StoredScriptSource(lang, source, options). }
