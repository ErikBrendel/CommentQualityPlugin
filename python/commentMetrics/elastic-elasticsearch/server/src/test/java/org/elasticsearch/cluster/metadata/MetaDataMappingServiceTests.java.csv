commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> getPlugins() {     return Collections.singleton(InternalSettingsPlugin.class). }
false;public;0;22;;public void testMappingClusterStateUpdateDoesntChangeExistingIndices() throws Exception {     final IndexService indexService = createIndex("test", client().admin().indices().prepareCreate("test").addMapping("type")).     final CompressedXContent currentMapping = indexService.mapperService().documentMapper("type").mappingSource().     final MetaDataMappingService mappingService = getInstanceFromNode(MetaDataMappingService.class).     final ClusterService clusterService = getInstanceFromNode(ClusterService.class).     // TODO - it will be nice to get a random mapping generator     final PutMappingClusterStateUpdateRequest request = new PutMappingClusterStateUpdateRequest().type("type").     request.indices(new Index[] { indexService.index() }).     request.source("{ \"properties\": { \"field\": { \"type\": \"text\" }}}").     final ClusterStateTaskExecutor.ClusterTasksResult<PutMappingClusterStateUpdateRequest> result = mappingService.putMappingExecutor.execute(clusterService.state(), Collections.singletonList(request)).     // the task completed successfully     assertThat(result.executionResults.size(), equalTo(1)).     assertTrue(result.executionResults.values().iterator().next().isSuccess()).     // the task really was a mapping update     assertThat(indexService.mapperService().documentMapper("type").mappingSource(), not(equalTo(result.resultingState.metaData().index("test").getMappings().get("type").source()))).     // since we never committed the cluster state update, the in-memory state is unchanged     assertThat(indexService.mapperService().documentMapper("type").mappingSource(), equalTo(currentMapping)). }
false;public;0;17;;public void testClusterStateIsNotChangedWithIdenticalMappings() throws Exception {     createIndex("test", client().admin().indices().prepareCreate("test").addMapping("type")).     final MetaDataMappingService mappingService = getInstanceFromNode(MetaDataMappingService.class).     final ClusterService clusterService = getInstanceFromNode(ClusterService.class).     final PutMappingClusterStateUpdateRequest request = new PutMappingClusterStateUpdateRequest().type("type").     request.source("{ \"properties\" { \"field\": { \"type\": \"text\" }}}").     ClusterState result = mappingService.putMappingExecutor.execute(clusterService.state(), Collections.singletonList(request)).resultingState.     assertFalse(result != clusterService.state()).     ClusterState result2 = mappingService.putMappingExecutor.execute(result, Collections.singletonList(request)).resultingState.     assertSame(result, result2). }
false;public;0;14;;public void testMappingVersion() throws Exception {     final IndexService indexService = createIndex("test", client().admin().indices().prepareCreate("test").addMapping("type")).     final long previousVersion = indexService.getMetaData().getMappingVersion().     final MetaDataMappingService mappingService = getInstanceFromNode(MetaDataMappingService.class).     final ClusterService clusterService = getInstanceFromNode(ClusterService.class).     final PutMappingClusterStateUpdateRequest request = new PutMappingClusterStateUpdateRequest().type("type").     request.indices(new Index[] { indexService.index() }).     request.source("{ \"properties\": { \"field\": { \"type\": \"text\" }}}").     final ClusterStateTaskExecutor.ClusterTasksResult<PutMappingClusterStateUpdateRequest> result = mappingService.putMappingExecutor.execute(clusterService.state(), Collections.singletonList(request)).     assertThat(result.executionResults.size(), equalTo(1)).     assertTrue(result.executionResults.values().iterator().next().isSuccess()).     assertThat(result.resultingState.metaData().index("test").getMappingVersion(), equalTo(1 + previousVersion)). }
false;public;0;14;;public void testMappingVersionUnchanged() throws Exception {     final IndexService indexService = createIndex("test", client().admin().indices().prepareCreate("test").addMapping("type")).     final long previousVersion = indexService.getMetaData().getMappingVersion().     final MetaDataMappingService mappingService = getInstanceFromNode(MetaDataMappingService.class).     final ClusterService clusterService = getInstanceFromNode(ClusterService.class).     final PutMappingClusterStateUpdateRequest request = new PutMappingClusterStateUpdateRequest().type("type").     request.indices(new Index[] { indexService.index() }).     request.source("{ \"properties\": {}}").     final ClusterStateTaskExecutor.ClusterTasksResult<PutMappingClusterStateUpdateRequest> result = mappingService.putMappingExecutor.execute(clusterService.state(), Collections.singletonList(request)).     assertThat(result.executionResults.size(), equalTo(1)).     assertTrue(result.executionResults.values().iterator().next().isSuccess()).     assertThat(result.resultingState.metaData().index("test").getMappingVersion(), equalTo(previousVersion)). }
