commented;modifiers;parameterAmount;loc;comment;code
false;protected,abstract;0;2;;@Override protected abstract String getFieldDataType().
false;protected;2;4;;protected Field randomGeoPointField(String fieldName, Field.Store store) {     GeoPoint point = randomPoint(random()).     return new LatLonDocValuesField(fieldName, point.lat(), point.lon()). }
false;protected;0;4;;@Override protected boolean hasDocValues() {     return true. }
false;protected;0;4;;@Override protected long minRamBytesUsed() {     return 0. }
false;protected;0;14;;@Override protected void fillAllMissing() throws Exception {     Document d = new Document().     d.add(new StringField("_id", "1", Field.Store.NO)).     writer.addDocument(d).     d = new Document().     d.add(new StringField("_id", "2", Field.Store.NO)).     writer.addDocument(d).     d = new Document().     d.add(new StringField("_id", "3", Field.Store.NO)).     writer.addDocument(d). }
false;public;0;4;;@Override public void testSortMultiValuesFields() {     assumeFalse("Only test on non geo_point fields", getFieldDataType().equals("geo_point")). }
false;protected;2;3;;protected void assertValues(MultiGeoPointValues values, int docId) throws IOException {     assertValues(values, docId, false). }
false;protected;2;3;;protected void assertMissing(MultiGeoPointValues values, int docId) throws IOException {     assertValues(values, docId, true). }
false;private;3;11;;private void assertValues(MultiGeoPointValues values, int docId, boolean missing) throws IOException {     assertEquals(missing == false, values.advanceExact(docId)).     if (missing == false) {         final int docCount = values.docValueCount().         for (int i = 0. i < docCount. ++i) {             final GeoPoint point = values.nextValue().             assertThat(point.lat(), allOf(greaterThanOrEqualTo(GeoUtils.MIN_LAT), lessThanOrEqualTo(GeoUtils.MAX_LAT))).             assertThat(point.lon(), allOf(greaterThanOrEqualTo(GeoUtils.MIN_LON), lessThanOrEqualTo(GeoUtils.MAX_LON))).         }     } }
