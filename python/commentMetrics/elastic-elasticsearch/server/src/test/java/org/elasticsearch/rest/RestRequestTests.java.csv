commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public void testContentConsumesContent() {     runConsumesContentTest(RestRequest::content, true). }
false;public;0;3;;public void testRequiredContentConsumesContent() {     runConsumesContentTest(RestRequest::requiredContent, true). }
false;public;0;3;;public void testContentParserConsumesContent() {     runConsumesContentTest(RestRequest::contentParser, true). }
false;public;0;3;;public void testContentOrSourceParamConsumesContent() {     runConsumesContentTest(RestRequest::contentOrSourceParam, true). }
false;public;0;3;;public void testContentOrSourceParamsParserConsumesContent() {     runConsumesContentTest(RestRequest::contentOrSourceParamParser, true). }
false;public;0;4;;public void testWithContentOrSourceParamParserOrNullConsumesContent() {     @SuppressWarnings("unchecked")     CheckedConsumer<XContentParser, IOException> consumer = mock(CheckedConsumer.class).     runConsumesContentTest(request -> request.withContentOrSourceParamParserOrNull(consumer), true). }
false;public;0;4;;public void testApplyContentParserConsumesContent() {     @SuppressWarnings("unchecked")     CheckedConsumer<XContentParser, IOException> consumer = mock(CheckedConsumer.class).     runConsumesContentTest(request -> request.applyContentParser(consumer), true). }
false;public;0;3;;public void testHasContentDoesNotConsumesContent() {     runConsumesContentTest(RestRequest::hasContent, false). }
false;private;2;16;;private <T extends Exception> void runConsumesContentTest(final CheckedConsumer<RestRequest, T> consumer, final boolean expected) {     final HttpRequest httpRequest = mock(HttpRequest.class).     when(httpRequest.uri()).thenReturn("").     when(httpRequest.content()).thenReturn(new BytesArray(new byte[1])).     final RestRequest request = RestRequest.request(mock(NamedXContentRegistry.class), httpRequest, mock(HttpChannel.class)).     request.setXContentType(XContentType.JSON).     assertFalse(request.isContentConsumed()).     try {         consumer.accept(request).     } catch (final Exception e) {         throw new RuntimeException(e).     }     assertThat(request.isContentConsumed(), equalTo(expected)). }
false;public;0;12;;public void testContentParser() throws IOException {     Exception e = expectThrows(ElasticsearchParseException.class, () -> contentRestRequest("", emptyMap()).contentParser()).     assertEquals("request body is required", e.getMessage()).     e = expectThrows(ElasticsearchParseException.class, () -> contentRestRequest("", singletonMap("source", "{}")).contentParser()).     assertEquals("request body is required", e.getMessage()).     assertEquals(emptyMap(), contentRestRequest("{}", emptyMap()).contentParser().map()).     e = expectThrows(ElasticsearchParseException.class, () -> contentRestRequest("", emptyMap(), emptyMap()).contentParser()).     assertEquals("request body is required", e.getMessage()). }
false;public;0;7;;public void testApplyContentParser() throws IOException {     contentRestRequest("", emptyMap()).applyContentParser(p -> fail("Shouldn't have been called")).     contentRestRequest("", singletonMap("source", "{}")).applyContentParser(p -> fail("Shouldn't have been called")).     AtomicReference<Object> source = new AtomicReference<>().     contentRestRequest("{}", emptyMap()).applyContentParser(p -> source.set(p.map())).     assertEquals(emptyMap(), source.get()). }
false;public;0;17;;public void testContentOrSourceParam() throws IOException {     Exception e = expectThrows(ElasticsearchParseException.class, () -> contentRestRequest("", emptyMap()).contentOrSourceParam()).     assertEquals("request body or source parameter is required", e.getMessage()).     assertEquals(new BytesArray("stuff"), contentRestRequest("stuff", emptyMap()).contentOrSourceParam().v2()).     assertEquals(new BytesArray("stuff"), contentRestRequest("stuff", MapBuilder.<String, String>newMapBuilder().put("source", "stuff2").put("source_content_type", "application/json").immutableMap()).contentOrSourceParam().v2()).     assertEquals(new BytesArray("{\"foo\": \"stuff\"}"), contentRestRequest("", MapBuilder.<String, String>newMapBuilder().put("source", "{\"foo\": \"stuff\"}").put("source_content_type", "application/json").immutableMap()).contentOrSourceParam().v2()).     e = expectThrows(IllegalStateException.class, () -> contentRestRequest("", MapBuilder.<String, String>newMapBuilder().put("source", "stuff2").immutableMap()).contentOrSourceParam()).     assertEquals("source and source_content_type parameters are required", e.getMessage()). }
false;public;0;6;;public void testHasContentOrSourceParam() throws IOException {     assertEquals(false, contentRestRequest("", emptyMap()).hasContentOrSourceParam()).     assertEquals(true, contentRestRequest("stuff", emptyMap()).hasContentOrSourceParam()).     assertEquals(true, contentRestRequest("stuff", singletonMap("source", "stuff2")).hasContentOrSourceParam()).     assertEquals(true, contentRestRequest("", singletonMap("source", "stuff")).hasContentOrSourceParam()). }
false;public;0;9;;public void testContentOrSourceParamParser() throws IOException {     Exception e = expectThrows(ElasticsearchParseException.class, () -> contentRestRequest("", emptyMap()).contentOrSourceParamParser()).     assertEquals("request body or source parameter is required", e.getMessage()).     assertEquals(emptyMap(), contentRestRequest("{}", emptyMap()).contentOrSourceParamParser().map()).     assertEquals(emptyMap(), contentRestRequest("{}", singletonMap("source", "stuff2")).contentOrSourceParamParser().map()).     assertEquals(emptyMap(), contentRestRequest("", MapBuilder.<String, String>newMapBuilder().put("source", "{}").put("source_content_type", "application/json").immutableMap()).contentOrSourceParamParser().map()). }
false;public;0;10;;public void testWithContentOrSourceParamParserOrNull() throws IOException {     contentRestRequest("", emptyMap()).withContentOrSourceParamParserOrNull(parser -> assertNull(parser)).     contentRestRequest("{}", emptyMap()).withContentOrSourceParamParserOrNull(parser -> assertEquals(emptyMap(), parser.map())).     contentRestRequest("{}", singletonMap("source", "stuff2")).withContentOrSourceParamParserOrNull(parser -> assertEquals(emptyMap(), parser.map())).     contentRestRequest("", MapBuilder.<String, String>newMapBuilder().put("source_content_type", "application/json").put("source", "{}").immutableMap()).withContentOrSourceParamParserOrNull(parser -> assertEquals(emptyMap(), parser.map())). }
false;public;0;13;;public void testContentTypeParsing() {     for (XContentType xContentType : XContentType.values()) {         Map<String, List<String>> map = new HashMap<>().         map.put("Content-Type", Collections.singletonList(xContentType.mediaType())).         RestRequest restRequest = contentRestRequest("", Collections.emptyMap(), map).         assertEquals(xContentType, restRequest.getXContentType()).         map = new HashMap<>().         map.put("Content-Type", Collections.singletonList(xContentType.mediaTypeWithoutParameters())).         restRequest = contentRestRequest("", Collections.emptyMap(), map).         assertEquals(xContentType, restRequest.getXContentType()).     } }
false;public;0;6;;public void testPlainTextSupport() {     RestRequest restRequest = contentRestRequest(randomAlphaOfLengthBetween(1, 30), Collections.emptyMap(), Collections.singletonMap("Content-Type", Collections.singletonList(randomFrom("text/plain", "text/plain. charset=utf-8", "text/plain.charset=utf-8")))).     assertNull(restRequest.getXContentType()). }
false;public;0;12;;public void testMalformedContentTypeHeader() {     final String type = randomFrom("text", "text/:ain. charset=utf-8", "text/plain\".charset=utf-8", ":", "/", "t:/plain").     final RestRequest.ContentTypeHeaderException e = expectThrows(RestRequest.ContentTypeHeaderException.class, () -> {         final Map<String, List<String>> headers = Collections.singletonMap("Content-Type", Collections.singletonList(type)).         contentRestRequest("", Collections.emptyMap(), headers).     }).     assertNotNull(e.getCause()).     assertThat(e.getCause(), instanceOf(IllegalArgumentException.class)).     assertThat(e.getMessage(), equalTo("java.lang.IllegalArgumentException: invalid Content-Type header [" + type + "]")). }
false;public;0;4;;public void testNoContentTypeHeader() {     RestRequest contentRestRequest = contentRestRequest("", Collections.emptyMap(), Collections.emptyMap()).     assertNull(contentRestRequest.getXContentType()). }
false;public;0;9;;public void testMultipleContentTypeHeaders() {     List<String> headers = new ArrayList<>(randomUnique(() -> randomAlphaOfLengthBetween(1, 16), randomIntBetween(2, 10))).     final RestRequest.ContentTypeHeaderException e = expectThrows(RestRequest.ContentTypeHeaderException.class, () -> contentRestRequest("", Collections.emptyMap(), Collections.singletonMap("Content-Type", headers))).     assertNotNull(e.getCause()).     assertThat(e.getCause(), instanceOf((IllegalArgumentException.class))).     assertThat(e.getMessage(), equalTo("java.lang.IllegalArgumentException: only one Content-Type header should be provided")). }
false;public;0;17;;public void testRequiredContent() {     Exception e = expectThrows(ElasticsearchParseException.class, () -> contentRestRequest("", emptyMap()).requiredContent()).     assertEquals("request body is required", e.getMessage()).     assertEquals(new BytesArray("stuff"), contentRestRequest("stuff", emptyMap()).requiredContent()).     assertEquals(new BytesArray("stuff"), contentRestRequest("stuff", MapBuilder.<String, String>newMapBuilder().put("source", "stuff2").put("source_content_type", "application/json").immutableMap()).requiredContent()).     e = expectThrows(ElasticsearchParseException.class, () -> contentRestRequest("", MapBuilder.<String, String>newMapBuilder().put("source", "{\"foo\": \"stuff\"}").put("source_content_type", "application/json").immutableMap()).requiredContent()).     assertEquals("request body is required", e.getMessage()).     e = expectThrows(IllegalStateException.class, () -> contentRestRequest("test", null, Collections.emptyMap()).requiredContent()).     assertEquals("unknown content type", e.getMessage()). }
false;private,static;2;5;;private static RestRequest contentRestRequest(String content, Map<String, String> params) {     Map<String, List<String>> headers = new HashMap<>().     headers.put("Content-Type", Collections.singletonList("application/json")).     return contentRestRequest(content, params, headers). }
false;private,static;3;7;;private static RestRequest contentRestRequest(String content, Map<String, String> params, Map<String, List<String>> headers) {     FakeRestRequest.Builder builder = new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY).     builder.withHeaders(headers).     builder.withContent(new BytesArray(content), null).     builder.withParams(params).     return new ContentRestRequest(builder.build()). }
false;public;0;4;;@Override public Method method() {     return restRequest.method(). }
false;public;0;4;;@Override public String uri() {     return restRequest.uri(). }
false;public;0;4;;@Override public BytesReference content() {     return restRequest.content(). }
