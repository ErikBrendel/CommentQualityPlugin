commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;public void testCloseableCharsDoesNotModifySecureString() {     final char[] password = randomAlphaOfLengthBetween(1, 32).toCharArray().     SecureString secureString = new SecureString(password).     assertSecureStringEqualToChars(password, secureString).     try (SecureString copy = secureString.clone()) {         assertArrayEquals(password, copy.getChars()).         assertThat(copy.getChars(), not(sameInstance(password))).     }     assertSecureStringEqualToChars(password, secureString). }
false;public;0;13;;public void testClosingSecureStringDoesNotModifyCloseableChars() {     final char[] password = randomAlphaOfLengthBetween(1, 32).toCharArray().     SecureString secureString = new SecureString(password).     assertSecureStringEqualToChars(password, secureString).     SecureString copy = secureString.clone().     assertArrayEquals(password, copy.getChars()).     assertThat(copy.getChars(), not(sameInstance(password))).     final char[] passwordCopy = Arrays.copyOf(password, password.length).     assertArrayEquals(password, passwordCopy).     secureString.close().     assertNotEquals(password[0], passwordCopy[0]).     assertArrayEquals(passwordCopy, copy.getChars()). }
false;public;0;15;;public void testClosingChars() {     final char[] password = randomAlphaOfLengthBetween(1, 32).toCharArray().     SecureString secureString = new SecureString(password).     assertSecureStringEqualToChars(password, secureString).     SecureString copy = secureString.clone().     assertArrayEquals(password, copy.getChars()).     assertThat(copy.getChars(), not(sameInstance(password))).     copy.close().     if (randomBoolean()) {         // close another time and no exception is thrown         copy.close().     }     IllegalStateException e = expectThrows(IllegalStateException.class, copy::getChars).     assertThat(e.getMessage(), containsString("already been closed")). }
false;public;0;12;;public void testGetCloseableCharsAfterSecureStringClosed() {     final char[] password = randomAlphaOfLengthBetween(1, 32).toCharArray().     SecureString secureString = new SecureString(password).     assertSecureStringEqualToChars(password, secureString).     secureString.close().     if (randomBoolean()) {         // close another time and no exception is thrown         secureString.close().     }     IllegalStateException e = expectThrows(IllegalStateException.class, secureString::clone).     assertThat(e.getMessage(), containsString("already been closed")). }
false;private;2;10;;private void assertSecureStringEqualToChars(char[] expected, SecureString secureString) {     int pos = 0.     for (int i : secureString.chars().toArray()) {         if (pos >= expected.length) {             fail("Index " + i + " greated than or equal to array length " + expected.length).         } else {             assertEquals(expected[pos++], (char) i).         }     } }
