commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;public void testParseValidFromInts() throws Exception {     int precision = randomIntBetween(0, GeoTileUtils.MAX_ZOOM).     XContentParser stParser = createParser(JsonXContent.jsonXContent, "{\"field\":\"my_loc\", \"precision\":" + precision + ", \"size\": 500, \"shard_size\": 550}").     XContentParser.Token token = stParser.nextToken().     assertSame(XContentParser.Token.START_OBJECT, token).     // can create a factory     assertNotNull(GeoTileGridAggregationBuilder.parse("geotile_grid", stParser)). }
false;public;0;9;;public void testParseValidFromStrings() throws Exception {     int precision = randomIntBetween(0, GeoTileUtils.MAX_ZOOM).     XContentParser stParser = createParser(JsonXContent.jsonXContent, "{\"field\":\"my_loc\", \"precision\":\"" + precision + "\", \"size\": \"500\", \"shard_size\": \"550\"}").     XContentParser.Token token = stParser.nextToken().     assertSame(XContentParser.Token.START_OBJECT, token).     // can create a factory     assertNotNull(GeoTileGridAggregationBuilder.parse("geotile_grid", stParser)). }
false;public;0;9;;public void testParseErrorOnBooleanPrecision() throws Exception {     XContentParser stParser = createParser(JsonXContent.jsonXContent, "{\"field\":\"my_loc\", \"precision\":false}").     XContentParser.Token token = stParser.nextToken().     assertSame(XContentParser.Token.START_OBJECT, token).     XContentParseException e = expectThrows(XContentParseException.class, () -> GeoTileGridAggregationBuilder.parse("geotile_grid", stParser)).     assertThat(ExceptionsHelper.detailedMessage(e), containsString("[geotile_grid] precision doesn't support values of type: VALUE_BOOLEAN")). }
false;public;0;12;;public void testParseErrorOnPrecisionOutOfRange() throws Exception {     XContentParser stParser = createParser(JsonXContent.jsonXContent, "{\"field\":\"my_loc\", \"precision\":\"30\"}").     XContentParser.Token token = stParser.nextToken().     assertSame(XContentParser.Token.START_OBJECT, token).     try {         GeoTileGridAggregationBuilder.parse("geotile_grid", stParser).         fail().     } catch (XContentParseException ex) {         assertThat(ex.getCause(), instanceOf(IllegalArgumentException.class)).         assertEquals("Invalid geotile_grid precision of 30. Must be between 0 and 29.", ex.getCause().getMessage()).     } }
