commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;3;;@Override protected void doExecute(Task task, ActionRequest request, ActionListener listener) { }
true;public,static;0;16;/**  * Configures {@link NodeClient} to stub {@link ValidateQueryAction} transport action.  * <p>  * This lower level of validation is out of the scope of this test.  */ ;/**  * Configures {@link NodeClient} to stub {@link ValidateQueryAction} transport action.  * <p>  * This lower level of validation is out of the scope of this test.  */ @BeforeClass public static void stubValidateQueryAction() {     final TaskManager taskManager = new TaskManager(Settings.EMPTY, threadPool, Collections.emptySet()).     final TransportAction transportAction = new TransportAction(ValidateQueryAction.NAME, new ActionFilters(Collections.emptySet()), taskManager) {          @Override         protected void doExecute(Task task, ActionRequest request, ActionListener listener) {         }     }.     final Map<Action, TransportAction> actions = new HashMap<>().     actions.put(ValidateQueryAction.INSTANCE, transportAction).     client.initialize(actions, () -> "local", null). }
false;public,static;0;11;;@AfterClass public static void terminateThreadPool() throws InterruptedException {     terminate(threadPool).     threadPool = null.     client = null.     usageService = null.     controller = null.     action = null. }
false;public;0;15;;public void testRestValidateQueryAction() throws Exception {     // GIVEN a valid query     final String content = "{\"query\":{\"bool\":{\"must\":{\"term\":{\"user\":\"kimchy\"}}}}}".     final RestRequest request = createRestRequest(content).     final FakeRestChannel channel = new FakeRestChannel(request, true, 0).     // WHEN     action.handleRequest(request, channel, client).     // THEN query is valid (i.e. not marked as invalid)     assertThat(channel.responses().get(), equalTo(0)).     assertThat(channel.errors().get(), equalTo(0)).     assertNull(channel.capturedResponse()). }
false;public;0;15;;public void testRestValidateQueryAction_emptyQuery() throws Exception {     // GIVEN an empty (i.e. invalid) query wrapped into a valid JSON     final String content = "{\"query\":{}}".     final RestRequest request = createRestRequest(content).     final FakeRestChannel channel = new FakeRestChannel(request, true, 0).     // WHEN     action.handleRequest(request, channel, client).     // THEN query is marked as invalid     assertThat(channel.responses().get(), equalTo(1)).     assertThat(channel.errors().get(), equalTo(0)).     assertThat(channel.capturedResponse().content().utf8ToString(), containsString("{\"valid\":false}")). }
false;public;0;15;;public void testRestValidateQueryAction_malformedQuery() throws Exception {     // GIVEN an invalid query due to a malformed JSON     final String content = "{malformed_json}".     final RestRequest request = createRestRequest(content).     final FakeRestChannel channel = new FakeRestChannel(request, true, 0).     // WHEN     action.handleRequest(request, channel, client).     // THEN query is marked as invalid     assertThat(channel.responses().get(), equalTo(1)).     assertThat(channel.errors().get(), equalTo(0)).     assertThat(channel.capturedResponse().content().utf8ToString(), containsString("{\"valid\":false}")). }
false;private;1;7;;private RestRequest createRestRequest(String content) {     return new FakeRestRequest.Builder(xContentRegistry()).withPath("index1/type1/_validate/query").withParams(emptyMap()).withContent(new BytesArray(content), XContentType.JSON).build(). }
false;public;0;9;;public void testTypeInPath() {     RestRequest request = new FakeRestRequest.Builder(xContentRegistry()).withMethod(RestRequest.Method.GET).withPath("/some_index/some_type/_validate/query").build().     performRequest(request).     assertWarnings(RestValidateQueryAction.TYPES_DEPRECATION_MESSAGE). }
false;public;0;12;;public void testTypeParameter() {     Map<String, String> params = new HashMap<>().     params.put("type", "some_type").     RestRequest request = new FakeRestRequest.Builder(xContentRegistry()).withMethod(RestRequest.Method.GET).withPath("_validate/query").withParams(params).build().     performRequest(request).     assertWarnings(RestValidateQueryAction.TYPES_DEPRECATION_MESSAGE). }
false;private;1;5;;private void performRequest(RestRequest request) {     RestChannel channel = new FakeRestChannel(request, false, 1).     ThreadContext threadContext = new ThreadContext(Settings.EMPTY).     controller.dispatchRequest(request, channel, threadContext). }
