# id;timestamp;commentText;codeText;commentWords;codeWords
TestTranslog -> public static long minTranslogGenUsedInRecovery(Path translogPath) throws IOException;1533641732;Lists all existing commits in a given index path, then read the minimum translog generation that will be used in recoverFromTranslog.;public static long minTranslogGenUsedInRecovery(Path translogPath) throws IOException {_        try (NIOFSDirectory directory = new NIOFSDirectory(translogPath.getParent().resolve("index"))) {_            List<IndexCommit> commits = DirectoryReader.listCommits(directory)__            final String translogUUID = commits.get(commits.size() - 1).getUserData().get(Translog.TRANSLOG_UUID_KEY)__            long globalCheckpoint = Translog.readGlobalCheckpoint(translogPath, translogUUID)__            IndexCommit recoveringCommit = CombinedDeletionPolicy.findSafeCommitPoint(commits, globalCheckpoint)__            return Long.parseLong(recoveringCommit.getUserData().get(Translog.TRANSLOG_GENERATION_KEY))__        }_    };lists,all,existing,commits,in,a,given,index,path,then,read,the,minimum,translog,generation,that,will,be,used,in,recover,from,translog;public,static,long,min,translog,gen,used,in,recovery,path,translog,path,throws,ioexception,try,niofsdirectory,directory,new,niofsdirectory,translog,path,get,parent,resolve,index,list,index,commit,commits,directory,reader,list,commits,directory,final,string,translog,uuid,commits,get,commits,size,1,get,user,data,get,translog,long,global,checkpoint,translog,read,global,checkpoint,translog,path,translog,uuid,index,commit,recovering,commit,combined,deletion,policy,find,safe,commit,point,commits,global,checkpoint,return,long,parse,long,recovering,commit,get,user,data,get,translog
TestTranslog -> public static long minTranslogGenUsedInRecovery(Path translogPath) throws IOException;1537371806;Lists all existing commits in a given index path, then read the minimum translog generation that will be used in recoverFromTranslog.;public static long minTranslogGenUsedInRecovery(Path translogPath) throws IOException {_        try (NIOFSDirectory directory = new NIOFSDirectory(translogPath.getParent().resolve("index"))) {_            List<IndexCommit> commits = DirectoryReader.listCommits(directory)__            final String translogUUID = commits.get(commits.size() - 1).getUserData().get(Translog.TRANSLOG_UUID_KEY)__            long globalCheckpoint = Translog.readGlobalCheckpoint(translogPath, translogUUID)__            IndexCommit recoveringCommit = CombinedDeletionPolicy.findSafeCommitPoint(commits, globalCheckpoint)__            return Long.parseLong(recoveringCommit.getUserData().get(Translog.TRANSLOG_GENERATION_KEY))__        }_    };lists,all,existing,commits,in,a,given,index,path,then,read,the,minimum,translog,generation,that,will,be,used,in,recover,from,translog;public,static,long,min,translog,gen,used,in,recovery,path,translog,path,throws,ioexception,try,niofsdirectory,directory,new,niofsdirectory,translog,path,get,parent,resolve,index,list,index,commit,commits,directory,reader,list,commits,directory,final,string,translog,uuid,commits,get,commits,size,1,get,user,data,get,translog,long,global,checkpoint,translog,read,global,checkpoint,translog,path,translog,uuid,index,commit,recovering,commit,combined,deletion,policy,find,safe,commit,point,commits,global,checkpoint,return,long,parse,long,recovering,commit,get,user,data,get,translog
TestTranslog -> public static long minTranslogGenUsedInRecovery(Path translogPath) throws IOException;1545596061;Lists all existing commits in a given index path, then read the minimum translog generation that will be used in recoverFromTranslog.;public static long minTranslogGenUsedInRecovery(Path translogPath) throws IOException {_        try (NIOFSDirectory directory = new NIOFSDirectory(translogPath.getParent().resolve("index"))) {_            List<IndexCommit> commits = DirectoryReader.listCommits(directory)__            final String translogUUID = commits.get(commits.size() - 1).getUserData().get(Translog.TRANSLOG_UUID_KEY)__            long globalCheckpoint = Translog.readGlobalCheckpoint(translogPath, translogUUID)__            IndexCommit recoveringCommit = CombinedDeletionPolicy.findSafeCommitPoint(commits, globalCheckpoint)__            return Long.parseLong(recoveringCommit.getUserData().get(Translog.TRANSLOG_GENERATION_KEY))__        }_    };lists,all,existing,commits,in,a,given,index,path,then,read,the,minimum,translog,generation,that,will,be,used,in,recover,from,translog;public,static,long,min,translog,gen,used,in,recovery,path,translog,path,throws,ioexception,try,niofsdirectory,directory,new,niofsdirectory,translog,path,get,parent,resolve,index,list,index,commit,commits,directory,reader,list,commits,directory,final,string,translog,uuid,commits,get,commits,size,1,get,user,data,get,translog,long,global,checkpoint,translog,read,global,checkpoint,translog,path,translog,uuid,index,commit,recovering,commit,combined,deletion,policy,find,safe,commit,point,commits,global,checkpoint,return,long,parse,long,recovering,commit,get,user,data,get,translog
TestTranslog -> public static long getCurrentTerm(Translog translog);1524684173;Returns the primary term associated with the current translog writer of the given translog.;public static long getCurrentTerm(Translog translog) {_        return translog.getCurrent().getPrimaryTerm()__    };returns,the,primary,term,associated,with,the,current,translog,writer,of,the,given,translog;public,static,long,get,current,term,translog,translog,return,translog,get,current,get,primary,term
TestTranslog -> public static long getCurrentTerm(Translog translog);1533641732;Returns the primary term associated with the current translog writer of the given translog.;public static long getCurrentTerm(Translog translog) {_        return translog.getCurrent().getPrimaryTerm()__    };returns,the,primary,term,associated,with,the,current,translog,writer,of,the,given,translog;public,static,long,get,current,term,translog,translog,return,translog,get,current,get,primary,term
TestTranslog -> public static long getCurrentTerm(Translog translog);1537371806;Returns the primary term associated with the current translog writer of the given translog.;public static long getCurrentTerm(Translog translog) {_        return translog.getCurrent().getPrimaryTerm()__    };returns,the,primary,term,associated,with,the,current,translog,writer,of,the,given,translog;public,static,long,get,current,term,translog,translog,return,translog,get,current,get,primary,term
TestTranslog -> public static long getCurrentTerm(Translog translog);1545596061;Returns the primary term associated with the current translog writer of the given translog.;public static long getCurrentTerm(Translog translog) {_        return translog.getCurrent().getPrimaryTerm()__    };returns,the,primary,term,associated,with,the,current,translog,writer,of,the,given,translog;public,static,long,get,current,term,translog,translog,return,translog,get,current,get,primary,term
TestTranslog -> public static Path corruptRandomTranslogFile(Logger logger, Random random, Path translogDir, long minGeneration) throws IOException;1537371806;Corrupts random translog file (translog-N.tlog) from the given translog directory.__@return a translog file which has been corrupted.;public static Path corruptRandomTranslogFile(Logger logger, Random random, Path translogDir, long minGeneration) throws IOException {_        Set<Path> candidates = new TreeSet<>()_ _        logger.info("--> Translog dir [{}], minUsedTranslogGen [{}]", translogDir, minGeneration)__        try (DirectoryStream<Path> stream = Files.newDirectoryStream(translogDir)) {_            for (Path item : stream) {_                if (Files.isRegularFile(item)) {_                    final Matcher matcher = TRANSLOG_FILE_PATTERN.matcher(item.getFileName().toString())__                    if (matcher.matches() && Long.parseLong(matcher.group(1)) >= minGeneration) {_                        candidates.add(item)__                    }_                }_            }_        }_        assertThat(candidates, is(not(empty())))___        Path corruptedFile = RandomPicks.randomFrom(random, candidates)__        corruptFile(logger, random, corruptedFile)__        return corruptedFile__    };corrupts,random,translog,file,translog,n,tlog,from,the,given,translog,directory,return,a,translog,file,which,has,been,corrupted;public,static,path,corrupt,random,translog,file,logger,logger,random,random,path,translog,dir,long,min,generation,throws,ioexception,set,path,candidates,new,tree,set,logger,info,translog,dir,min,used,translog,gen,translog,dir,min,generation,try,directory,stream,path,stream,files,new,directory,stream,translog,dir,for,path,item,stream,if,files,is,regular,file,item,final,matcher,matcher,matcher,item,get,file,name,to,string,if,matcher,matches,long,parse,long,matcher,group,1,min,generation,candidates,add,item,assert,that,candidates,is,not,empty,path,corrupted,file,random,picks,random,from,random,candidates,corrupt,file,logger,random,corrupted,file,return,corrupted,file
TestTranslog -> public static Path corruptRandomTranslogFile(Logger logger, Random random, Path translogDir, long minGeneration) throws IOException;1545596061;Corrupts random translog file (translog-N.tlog) from the given translog directory.__@return a translog file which has been corrupted.;public static Path corruptRandomTranslogFile(Logger logger, Random random, Path translogDir, long minGeneration) throws IOException {_        Set<Path> candidates = new TreeSet<>()_ _        logger.info("--> Translog dir [{}], minUsedTranslogGen [{}]", translogDir, minGeneration)__        try (DirectoryStream<Path> stream = Files.newDirectoryStream(translogDir)) {_            for (Path item : stream) {_                if (Files.isRegularFile(item)) {_                    final Matcher matcher = TRANSLOG_FILE_PATTERN.matcher(item.getFileName().toString())__                    if (matcher.matches() && Long.parseLong(matcher.group(1)) >= minGeneration) {_                        candidates.add(item)__                    }_                }_            }_        }_        assertThat(candidates, is(not(empty())))___        Path corruptedFile = RandomPicks.randomFrom(random, candidates)__        corruptFile(logger, random, corruptedFile)__        return corruptedFile__    };corrupts,random,translog,file,translog,n,tlog,from,the,given,translog,directory,return,a,translog,file,which,has,been,corrupted;public,static,path,corrupt,random,translog,file,logger,logger,random,random,path,translog,dir,long,min,generation,throws,ioexception,set,path,candidates,new,tree,set,logger,info,translog,dir,min,used,translog,gen,translog,dir,min,generation,try,directory,stream,path,stream,files,new,directory,stream,translog,dir,for,path,item,stream,if,files,is,regular,file,item,final,matcher,matcher,matcher,item,get,file,name,to,string,if,matcher,matches,long,parse,long,matcher,group,1,min,generation,candidates,add,item,assert,that,candidates,is,not,empty,path,corrupted,file,random,picks,random,from,random,candidates,corrupt,file,logger,random,corrupted,file,return,corrupted,file
