commented;modifiers;parameterAmount;loc;comment;code
false;;0;1;;Map<String, Supplier<SeedHostsProvider>> impl().
false;default;2;5;;@Override default Map<String, Supplier<SeedHostsProvider>> getSeedHostProviders(TransportService transportService, NetworkService networkService) {     return impl(). }
false;public;0;11;;@Before public void setupDummyServices() {     threadPool = mock(ThreadPool.class).     when(threadPool.getThreadContext()).thenReturn(new ThreadContext(Settings.EMPTY)).     transportService = MockTransportService.createNewService(Settings.EMPTY, Version.CURRENT, threadPool, null).     masterService = mock(MasterService.class).     namedWriteableRegistry = new NamedWriteableRegistry(Collections.emptyList()).     clusterApplier = mock(ClusterApplier.class).     clusterSettings = new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS).     gatewayMetaState = mock(GatewayMetaState.class). }
false;public;0;4;;@After public void clearDummyServices() throws IOException {     IOUtils.close(transportService). }
false;private;2;4;;private DiscoveryModule newModule(Settings settings, List<DiscoveryPlugin> plugins) {     return new DiscoveryModule(settings, threadPool, transportService, namedWriteableRegistry, null, masterService, clusterApplier, clusterSettings, plugins, null, createTempDir().toAbsolutePath(), gatewayMetaState). }
false;public;0;4;;public void testDefaults() {     DiscoveryModule module = newModule(Settings.EMPTY, Collections.emptyList()).     assertTrue(module.getDiscovery() instanceof Coordinator). }
false;public;0;6;;public void testUnknownDiscovery() {     Settings settings = Settings.builder().put(DiscoveryModule.DISCOVERY_TYPE_SETTING.getKey(), "dne").build().     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> newModule(settings, Collections.emptyList())).     assertEquals("Unknown discovery type [dne]", e.getMessage()). }
false;public;0;10;;public void testSeedProviders() {     Settings settings = Settings.builder().put(DiscoveryModule.DISCOVERY_SEED_PROVIDERS_SETTING.getKey(), "custom").build().     AtomicBoolean created = new AtomicBoolean(false).     DummyHostsProviderPlugin plugin = () -> Collections.singletonMap("custom", () -> {         created.set(true).         return hostsResolver -> Collections.emptyList().     }).     newModule(settings, Collections.singletonList(plugin)).     assertTrue(created.get()). }
false;public;0;12;;public void testLegacyHostsProvider() {     Settings settings = Settings.builder().put(DiscoveryModule.LEGACY_DISCOVERY_HOSTS_PROVIDER_SETTING.getKey(), "custom").build().     AtomicBoolean created = new AtomicBoolean(false).     DummyHostsProviderPlugin plugin = () -> Collections.singletonMap("custom", () -> {         created.set(true).         return hostsResolver -> Collections.emptyList().     }).     newModule(settings, Collections.singletonList(plugin)).     assertTrue(created.get()).     assertWarnings("[discovery.zen.hosts_provider] setting was deprecated in Elasticsearch and will be removed in a future release! " + "See the breaking changes documentation for the next major version."). }
false;public;0;7;;public void testLegacyAndNonLegacyProvidersRejected() {     Settings settings = Settings.builder().putList(DiscoveryModule.DISCOVERY_SEED_PROVIDERS_SETTING.getKey()).putList(DiscoveryModule.LEGACY_DISCOVERY_HOSTS_PROVIDER_SETTING.getKey()).build().     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> newModule(settings, Collections.emptyList())).     assertEquals("it is forbidden to set both [discovery.seed_providers] and [discovery.zen.hosts_provider]", e.getMessage()). }
false;public;0;6;;public void testUnknownSeedsProvider() {     Settings settings = Settings.builder().put(DiscoveryModule.DISCOVERY_SEED_PROVIDERS_SETTING.getKey(), "dne").build().     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> newModule(settings, Collections.emptyList())).     assertEquals("Unknown seed providers [dne]", e.getMessage()). }
false;public;0;7;;public void testDuplicateSeedsProvider() {     DummyHostsProviderPlugin plugin1 = () -> Collections.singletonMap("dup", () -> null).     DummyHostsProviderPlugin plugin2 = () -> Collections.singletonMap("dup", () -> null).     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> newModule(Settings.EMPTY, Arrays.asList(plugin1, plugin2))).     assertEquals("Cannot register seed provider [dup] twice", e.getMessage()). }
false;public;0;6;;public void testSettingsSeedsProvider() {     DummyHostsProviderPlugin plugin = () -> Collections.singletonMap("settings", () -> null).     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> newModule(Settings.EMPTY, Arrays.asList(plugin))).     assertEquals("Cannot register seed provider [settings] twice", e.getMessage()). }
false;public;0;23;;public void testMultipleSeedsProviders() {     AtomicBoolean created1 = new AtomicBoolean(false).     DummyHostsProviderPlugin plugin1 = () -> Collections.singletonMap("provider1", () -> {         created1.set(true).         return hostsResolver -> Collections.emptyList().     }).     AtomicBoolean created2 = new AtomicBoolean(false).     DummyHostsProviderPlugin plugin2 = () -> Collections.singletonMap("provider2", () -> {         created2.set(true).         return hostsResolver -> Collections.emptyList().     }).     AtomicBoolean created3 = new AtomicBoolean(false).     DummyHostsProviderPlugin plugin3 = () -> Collections.singletonMap("provider3", () -> {         created3.set(true).         return hostsResolver -> Collections.emptyList().     }).     Settings settings = Settings.builder().putList(DiscoveryModule.DISCOVERY_SEED_PROVIDERS_SETTING.getKey(), "provider1", "provider3").build().     newModule(settings, Arrays.asList(plugin1, plugin2, plugin3)).     assertTrue(created1.get()).     assertFalse(created2.get()).     assertTrue(created3.get()). }
false;public;0;7;;public void testLazyConstructionSeedsProvider() {     DummyHostsProviderPlugin plugin = () -> Collections.singletonMap("custom", () -> {         throw new AssertionError("created hosts provider which was not selected").     }).     newModule(Settings.EMPTY, Collections.singletonList(plugin)). }
false;public;0;4;;@Override public BiConsumer<DiscoveryNode, ClusterState> getJoinValidator() {     return consumer. }
false;public;0;15;;public void testJoinValidator() {     BiConsumer<DiscoveryNode, ClusterState> consumer = (a, b) -> {     }.     // TODO: move to zen2 once join validators are implemented     DiscoveryModule module = newModule(Settings.builder().put(DiscoveryModule.DISCOVERY_TYPE_SETTING.getKey(), DiscoveryModule.ZEN_DISCOVERY_TYPE).build(), Collections.singletonList(new DiscoveryPlugin() {          @Override         public BiConsumer<DiscoveryNode, ClusterState> getJoinValidator() {             return consumer.         }     })).     ZenDiscovery discovery = (ZenDiscovery) module.getDiscovery().     Collection<BiConsumer<DiscoveryNode, ClusterState>> onJoinValidators = discovery.getOnJoinValidators().     assertEquals(2, onJoinValidators.size()).     assertTrue(onJoinValidators.contains(consumer)). }
