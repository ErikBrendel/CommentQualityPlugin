# id;timestamp;commentText;codeText;commentWords;codeWords
IndexNameExpressionResolverTests -> public void testConcreteIndicesAllPatternRandom();1524684173;test resolving _all pattern (null, empty array or "_all") for random IndicesOptions;public void testConcreteIndicesAllPatternRandom() {_        for (int i = 0_ i < 10_ i++) {_            final String[] allIndices__            switch (randomIntBetween(0, 2)) {_                case 0:_                    allIndices = null__                    break__                case 1:_                    allIndices = new String[0]__                    break__                case 2:_                    allIndices = new String[] { MetaData.ALL }__                    break__                default:_                    throw new UnsupportedOperationException()__            }_            final IndicesOptions indicesOptions = IndicesOptions.fromOptions(randomBoolean(), randomBoolean(),_                    randomBoolean(), randomBoolean())___            {_                ClusterState state = ClusterState.builder(new ClusterName("_name")).metaData(MetaData.builder().build()).build()__                IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, indicesOptions)___                _                if (indicesOptions.allowNoIndices()) {_                    String[] concreteIndices = indexNameExpressionResolver.concreteIndexNames(context, allIndices)__                    assertThat(concreteIndices, notNullValue())__                    assertThat(concreteIndices.length, equalTo(0))__                } else {_                    expectThrows(IndexNotFoundException.class, () -> indexNameExpressionResolver.concreteIndexNames(context, allIndices))__                }_            }__            {_                _                MetaData.Builder mdBuilder = MetaData.builder()_                        .put(indexBuilder("aaa").state(State.OPEN).putAlias(AliasMetaData.builder("aaa_alias1")))_                        .put(indexBuilder("bbb").state(State.OPEN).putAlias(AliasMetaData.builder("bbb_alias1")))_                        .put(indexBuilder("ccc").state(State.CLOSE).putAlias(AliasMetaData.builder("ccc_alias1")))__                ClusterState state = ClusterState.builder(new ClusterName("_name")).metaData(mdBuilder).build()__                IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, indicesOptions)__                if (indicesOptions.expandWildcardsOpen() || indicesOptions.expandWildcardsClosed() || indicesOptions.allowNoIndices()) {_                    String[] concreteIndices = indexNameExpressionResolver.concreteIndexNames(context, allIndices)__                    assertThat(concreteIndices, notNullValue())__                    int expectedNumberOfIndices = 0__                    if (indicesOptions.expandWildcardsOpen()) {_                        expectedNumberOfIndices += 2__                    }_                    if (indicesOptions.expandWildcardsClosed()) {_                        expectedNumberOfIndices += 1__                    }_                    assertThat(concreteIndices.length, equalTo(expectedNumberOfIndices))__                } else {_                    expectThrows(IndexNotFoundException.class, () -> indexNameExpressionResolver.concreteIndexNames(context, allIndices))__                }_            }_        }_    };test,resolving,pattern,null,empty,array,or,for,random,indices,options;public,void,test,concrete,indices,all,pattern,random,for,int,i,0,i,10,i,final,string,all,indices,switch,random,int,between,0,2,case,0,all,indices,null,break,case,1,all,indices,new,string,0,break,case,2,all,indices,new,string,meta,data,all,break,default,throw,new,unsupported,operation,exception,final,indices,options,indices,options,indices,options,from,options,random,boolean,random,boolean,random,boolean,random,boolean,cluster,state,state,cluster,state,builder,new,cluster,name,meta,data,meta,data,builder,build,build,index,name,expression,resolver,context,context,new,index,name,expression,resolver,context,state,indices,options,if,indices,options,allow,no,indices,string,concrete,indices,index,name,expression,resolver,concrete,index,names,context,all,indices,assert,that,concrete,indices,not,null,value,assert,that,concrete,indices,length,equal,to,0,else,expect,throws,index,not,found,exception,class,index,name,expression,resolver,concrete,index,names,context,all,indices,meta,data,builder,md,builder,meta,data,builder,put,index,builder,aaa,state,state,open,put,alias,alias,meta,data,builder,put,index,builder,bbb,state,state,open,put,alias,alias,meta,data,builder,put,index,builder,ccc,state,state,close,put,alias,alias,meta,data,builder,cluster,state,state,cluster,state,builder,new,cluster,name,meta,data,md,builder,build,index,name,expression,resolver,context,context,new,index,name,expression,resolver,context,state,indices,options,if,indices,options,expand,wildcards,open,indices,options,expand,wildcards,closed,indices,options,allow,no,indices,string,concrete,indices,index,name,expression,resolver,concrete,index,names,context,all,indices,assert,that,concrete,indices,not,null,value,int,expected,number,of,indices,0,if,indices,options,expand,wildcards,open,expected,number,of,indices,2,if,indices,options,expand,wildcards,closed,expected,number,of,indices,1,assert,that,concrete,indices,length,equal,to,expected,number,of,indices,else,expect,throws,index,not,found,exception,class,index,name,expression,resolver,concrete,index,names,context,all,indices
IndexNameExpressionResolverTests -> public void testConcreteIndicesAllPatternRandom();1532028790;test resolving _all pattern (null, empty array or "_all") for random IndicesOptions;public void testConcreteIndicesAllPatternRandom() {_        for (int i = 0_ i < 10_ i++) {_            final String[] allIndices__            switch (randomIntBetween(0, 2)) {_                case 0:_                    allIndices = null__                    break__                case 1:_                    allIndices = new String[0]__                    break__                case 2:_                    allIndices = new String[] { MetaData.ALL }__                    break__                default:_                    throw new UnsupportedOperationException()__            }_            final IndicesOptions indicesOptions = IndicesOptions.fromOptions(randomBoolean(), randomBoolean(),_                    randomBoolean(), randomBoolean())___            {_                ClusterState state = ClusterState.builder(new ClusterName("_name")).metaData(MetaData.builder().build()).build()__                IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, indicesOptions)___                _                if (indicesOptions.allowNoIndices()) {_                    String[] concreteIndices = indexNameExpressionResolver.concreteIndexNames(context, allIndices)__                    assertThat(concreteIndices, notNullValue())__                    assertThat(concreteIndices.length, equalTo(0))__                } else {_                    expectThrows(IndexNotFoundException.class, () -> indexNameExpressionResolver.concreteIndexNames(context, allIndices))__                }_            }__            {_                _                MetaData.Builder mdBuilder = MetaData.builder()_                        .put(indexBuilder("aaa").state(State.OPEN).putAlias(AliasMetaData.builder("aaa_alias1")))_                        .put(indexBuilder("bbb").state(State.OPEN).putAlias(AliasMetaData.builder("bbb_alias1")))_                        .put(indexBuilder("ccc").state(State.CLOSE).putAlias(AliasMetaData.builder("ccc_alias1")))__                ClusterState state = ClusterState.builder(new ClusterName("_name")).metaData(mdBuilder).build()__                IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, indicesOptions)__                if (indicesOptions.expandWildcardsOpen() || indicesOptions.expandWildcardsClosed() || indicesOptions.allowNoIndices()) {_                    String[] concreteIndices = indexNameExpressionResolver.concreteIndexNames(context, allIndices)__                    assertThat(concreteIndices, notNullValue())__                    int expectedNumberOfIndices = 0__                    if (indicesOptions.expandWildcardsOpen()) {_                        expectedNumberOfIndices += 2__                    }_                    if (indicesOptions.expandWildcardsClosed()) {_                        expectedNumberOfIndices += 1__                    }_                    assertThat(concreteIndices.length, equalTo(expectedNumberOfIndices))__                } else {_                    expectThrows(IndexNotFoundException.class, () -> indexNameExpressionResolver.concreteIndexNames(context, allIndices))__                }_            }_        }_    };test,resolving,pattern,null,empty,array,or,for,random,indices,options;public,void,test,concrete,indices,all,pattern,random,for,int,i,0,i,10,i,final,string,all,indices,switch,random,int,between,0,2,case,0,all,indices,null,break,case,1,all,indices,new,string,0,break,case,2,all,indices,new,string,meta,data,all,break,default,throw,new,unsupported,operation,exception,final,indices,options,indices,options,indices,options,from,options,random,boolean,random,boolean,random,boolean,random,boolean,cluster,state,state,cluster,state,builder,new,cluster,name,meta,data,meta,data,builder,build,build,index,name,expression,resolver,context,context,new,index,name,expression,resolver,context,state,indices,options,if,indices,options,allow,no,indices,string,concrete,indices,index,name,expression,resolver,concrete,index,names,context,all,indices,assert,that,concrete,indices,not,null,value,assert,that,concrete,indices,length,equal,to,0,else,expect,throws,index,not,found,exception,class,index,name,expression,resolver,concrete,index,names,context,all,indices,meta,data,builder,md,builder,meta,data,builder,put,index,builder,aaa,state,state,open,put,alias,alias,meta,data,builder,put,index,builder,bbb,state,state,open,put,alias,alias,meta,data,builder,put,index,builder,ccc,state,state,close,put,alias,alias,meta,data,builder,cluster,state,state,cluster,state,builder,new,cluster,name,meta,data,md,builder,build,index,name,expression,resolver,context,context,new,index,name,expression,resolver,context,state,indices,options,if,indices,options,expand,wildcards,open,indices,options,expand,wildcards,closed,indices,options,allow,no,indices,string,concrete,indices,index,name,expression,resolver,concrete,index,names,context,all,indices,assert,that,concrete,indices,not,null,value,int,expected,number,of,indices,0,if,indices,options,expand,wildcards,open,expected,number,of,indices,2,if,indices,options,expand,wildcards,closed,expected,number,of,indices,1,assert,that,concrete,indices,length,equal,to,expected,number,of,indices,else,expect,throws,index,not,found,exception,class,index,name,expression,resolver,concrete,index,names,context,all,indices
IndexNameExpressionResolverTests -> public void testConcreteIndicesAllPatternRandom();1540486836;test resolving _all pattern (null, empty array or "_all") for random IndicesOptions;public void testConcreteIndicesAllPatternRandom() {_        for (int i = 0_ i < 10_ i++) {_            final String[] allIndices__            switch (randomIntBetween(0, 2)) {_                case 0:_                    allIndices = null__                    break__                case 1:_                    allIndices = new String[0]__                    break__                case 2:_                    allIndices = new String[] { MetaData.ALL }__                    break__                default:_                    throw new UnsupportedOperationException()__            }_            final IndicesOptions indicesOptions = IndicesOptions.fromOptions(randomBoolean(), randomBoolean(),_                    randomBoolean(), randomBoolean())___            {_                ClusterState state = ClusterState.builder(new ClusterName("_name")).metaData(MetaData.builder().build()).build()__                IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, indicesOptions)___                _                if (indicesOptions.allowNoIndices()) {_                    String[] concreteIndices = indexNameExpressionResolver.concreteIndexNames(context, allIndices)__                    assertThat(concreteIndices, notNullValue())__                    assertThat(concreteIndices.length, equalTo(0))__                } else {_                    expectThrows(IndexNotFoundException.class, () -> indexNameExpressionResolver.concreteIndexNames(context, allIndices))__                }_            }__            {_                _                MetaData.Builder mdBuilder = MetaData.builder()_                        .put(indexBuilder("aaa").state(State.OPEN).putAlias(AliasMetaData.builder("aaa_alias1")))_                        .put(indexBuilder("bbb").state(State.OPEN).putAlias(AliasMetaData.builder("bbb_alias1")))_                        .put(indexBuilder("ccc").state(State.CLOSE).putAlias(AliasMetaData.builder("ccc_alias1")))__                ClusterState state = ClusterState.builder(new ClusterName("_name")).metaData(mdBuilder).build()__                IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, indicesOptions)__                if (indicesOptions.expandWildcardsOpen() || indicesOptions.expandWildcardsClosed() || indicesOptions.allowNoIndices()) {_                    String[] concreteIndices = indexNameExpressionResolver.concreteIndexNames(context, allIndices)__                    assertThat(concreteIndices, notNullValue())__                    int expectedNumberOfIndices = 0__                    if (indicesOptions.expandWildcardsOpen()) {_                        expectedNumberOfIndices += 2__                    }_                    if (indicesOptions.expandWildcardsClosed()) {_                        expectedNumberOfIndices += 1__                    }_                    assertThat(concreteIndices.length, equalTo(expectedNumberOfIndices))__                } else {_                    expectThrows(IndexNotFoundException.class, () -> indexNameExpressionResolver.concreteIndexNames(context, allIndices))__                }_            }_        }_    };test,resolving,pattern,null,empty,array,or,for,random,indices,options;public,void,test,concrete,indices,all,pattern,random,for,int,i,0,i,10,i,final,string,all,indices,switch,random,int,between,0,2,case,0,all,indices,null,break,case,1,all,indices,new,string,0,break,case,2,all,indices,new,string,meta,data,all,break,default,throw,new,unsupported,operation,exception,final,indices,options,indices,options,indices,options,from,options,random,boolean,random,boolean,random,boolean,random,boolean,cluster,state,state,cluster,state,builder,new,cluster,name,meta,data,meta,data,builder,build,build,index,name,expression,resolver,context,context,new,index,name,expression,resolver,context,state,indices,options,if,indices,options,allow,no,indices,string,concrete,indices,index,name,expression,resolver,concrete,index,names,context,all,indices,assert,that,concrete,indices,not,null,value,assert,that,concrete,indices,length,equal,to,0,else,expect,throws,index,not,found,exception,class,index,name,expression,resolver,concrete,index,names,context,all,indices,meta,data,builder,md,builder,meta,data,builder,put,index,builder,aaa,state,state,open,put,alias,alias,meta,data,builder,put,index,builder,bbb,state,state,open,put,alias,alias,meta,data,builder,put,index,builder,ccc,state,state,close,put,alias,alias,meta,data,builder,cluster,state,state,cluster,state,builder,new,cluster,name,meta,data,md,builder,build,index,name,expression,resolver,context,context,new,index,name,expression,resolver,context,state,indices,options,if,indices,options,expand,wildcards,open,indices,options,expand,wildcards,closed,indices,options,allow,no,indices,string,concrete,indices,index,name,expression,resolver,concrete,index,names,context,all,indices,assert,that,concrete,indices,not,null,value,int,expected,number,of,indices,0,if,indices,options,expand,wildcards,open,expected,number,of,indices,2,if,indices,options,expand,wildcards,closed,expected,number,of,indices,1,assert,that,concrete,indices,length,equal,to,expected,number,of,indices,else,expect,throws,index,not,found,exception,class,index,name,expression,resolver,concrete,index,names,context,all,indices
IndexNameExpressionResolverTests -> public void testConcreteIndicesAllPatternRandom();1540847035;test resolving _all pattern (null, empty array or "_all") for random IndicesOptions;public void testConcreteIndicesAllPatternRandom() {_        for (int i = 0_ i < 10_ i++) {_            final String[] allIndices__            switch (randomIntBetween(0, 2)) {_                case 0:_                    allIndices = null__                    break__                case 1:_                    allIndices = new String[0]__                    break__                case 2:_                    allIndices = new String[] { MetaData.ALL }__                    break__                default:_                    throw new UnsupportedOperationException()__            }_            final IndicesOptions indicesOptions = IndicesOptions.fromOptions(randomBoolean(), randomBoolean(),_                    randomBoolean(), randomBoolean())___            {_                ClusterState state = ClusterState.builder(new ClusterName("_name")).metaData(MetaData.builder().build()).build()__                IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, indicesOptions)___                _                if (indicesOptions.allowNoIndices()) {_                    String[] concreteIndices = indexNameExpressionResolver.concreteIndexNames(context, allIndices)__                    assertThat(concreteIndices, notNullValue())__                    assertThat(concreteIndices.length, equalTo(0))__                } else {_                    expectThrows(IndexNotFoundException.class, () -> indexNameExpressionResolver.concreteIndexNames(context, allIndices))__                }_            }__            {_                _                MetaData.Builder mdBuilder = MetaData.builder()_                        .put(indexBuilder("aaa").state(State.OPEN).putAlias(AliasMetaData.builder("aaa_alias1")))_                        .put(indexBuilder("bbb").state(State.OPEN).putAlias(AliasMetaData.builder("bbb_alias1")))_                        .put(indexBuilder("ccc").state(State.CLOSE).putAlias(AliasMetaData.builder("ccc_alias1")))__                ClusterState state = ClusterState.builder(new ClusterName("_name")).metaData(mdBuilder).build()__                IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, indicesOptions)__                if (indicesOptions.expandWildcardsOpen() || indicesOptions.expandWildcardsClosed() || indicesOptions.allowNoIndices()) {_                    String[] concreteIndices = indexNameExpressionResolver.concreteIndexNames(context, allIndices)__                    assertThat(concreteIndices, notNullValue())__                    int expectedNumberOfIndices = 0__                    if (indicesOptions.expandWildcardsOpen()) {_                        expectedNumberOfIndices += 2__                    }_                    if (indicesOptions.expandWildcardsClosed()) {_                        expectedNumberOfIndices += 1__                    }_                    assertThat(concreteIndices.length, equalTo(expectedNumberOfIndices))__                } else {_                    expectThrows(IndexNotFoundException.class, () -> indexNameExpressionResolver.concreteIndexNames(context, allIndices))__                }_            }_        }_    };test,resolving,pattern,null,empty,array,or,for,random,indices,options;public,void,test,concrete,indices,all,pattern,random,for,int,i,0,i,10,i,final,string,all,indices,switch,random,int,between,0,2,case,0,all,indices,null,break,case,1,all,indices,new,string,0,break,case,2,all,indices,new,string,meta,data,all,break,default,throw,new,unsupported,operation,exception,final,indices,options,indices,options,indices,options,from,options,random,boolean,random,boolean,random,boolean,random,boolean,cluster,state,state,cluster,state,builder,new,cluster,name,meta,data,meta,data,builder,build,build,index,name,expression,resolver,context,context,new,index,name,expression,resolver,context,state,indices,options,if,indices,options,allow,no,indices,string,concrete,indices,index,name,expression,resolver,concrete,index,names,context,all,indices,assert,that,concrete,indices,not,null,value,assert,that,concrete,indices,length,equal,to,0,else,expect,throws,index,not,found,exception,class,index,name,expression,resolver,concrete,index,names,context,all,indices,meta,data,builder,md,builder,meta,data,builder,put,index,builder,aaa,state,state,open,put,alias,alias,meta,data,builder,put,index,builder,bbb,state,state,open,put,alias,alias,meta,data,builder,put,index,builder,ccc,state,state,close,put,alias,alias,meta,data,builder,cluster,state,state,cluster,state,builder,new,cluster,name,meta,data,md,builder,build,index,name,expression,resolver,context,context,new,index,name,expression,resolver,context,state,indices,options,if,indices,options,expand,wildcards,open,indices,options,expand,wildcards,closed,indices,options,allow,no,indices,string,concrete,indices,index,name,expression,resolver,concrete,index,names,context,all,indices,assert,that,concrete,indices,not,null,value,int,expected,number,of,indices,0,if,indices,options,expand,wildcards,open,expected,number,of,indices,2,if,indices,options,expand,wildcards,closed,expected,number,of,indices,1,assert,that,concrete,indices,length,equal,to,expected,number,of,indices,else,expect,throws,index,not,found,exception,class,index,name,expression,resolver,concrete,index,names,context,all,indices
IndexNameExpressionResolverTests -> public void testConcreteIndicesAllPatternRandom();1541092382;test resolving _all pattern (null, empty array or "_all") for random IndicesOptions;public void testConcreteIndicesAllPatternRandom() {_        for (int i = 0_ i < 10_ i++) {_            final String[] allIndices__            switch (randomIntBetween(0, 2)) {_                case 0:_                    allIndices = null__                    break__                case 1:_                    allIndices = new String[0]__                    break__                case 2:_                    allIndices = new String[] { MetaData.ALL }__                    break__                default:_                    throw new UnsupportedOperationException()__            }_            final IndicesOptions indicesOptions = IndicesOptions.fromOptions(randomBoolean(), randomBoolean(),_                    randomBoolean(), randomBoolean())___            {_                ClusterState state = ClusterState.builder(new ClusterName("_name")).metaData(MetaData.builder().build()).build()__                IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, indicesOptions)___                _                if (indicesOptions.allowNoIndices()) {_                    String[] concreteIndices = indexNameExpressionResolver.concreteIndexNames(context, allIndices)__                    assertThat(concreteIndices, notNullValue())__                    assertThat(concreteIndices.length, equalTo(0))__                } else {_                    expectThrows(IndexNotFoundException.class, () -> indexNameExpressionResolver.concreteIndexNames(context, allIndices))__                }_            }__            {_                _                MetaData.Builder mdBuilder = MetaData.builder()_                        .put(indexBuilder("aaa").state(State.OPEN).putAlias(AliasMetaData.builder("aaa_alias1")))_                        .put(indexBuilder("bbb").state(State.OPEN).putAlias(AliasMetaData.builder("bbb_alias1")))_                        .put(indexBuilder("ccc").state(State.CLOSE).putAlias(AliasMetaData.builder("ccc_alias1")))__                ClusterState state = ClusterState.builder(new ClusterName("_name")).metaData(mdBuilder).build()__                IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, indicesOptions)__                if (indicesOptions.expandWildcardsOpen() || indicesOptions.expandWildcardsClosed() || indicesOptions.allowNoIndices()) {_                    String[] concreteIndices = indexNameExpressionResolver.concreteIndexNames(context, allIndices)__                    assertThat(concreteIndices, notNullValue())__                    int expectedNumberOfIndices = 0__                    if (indicesOptions.expandWildcardsOpen()) {_                        expectedNumberOfIndices += 2__                    }_                    if (indicesOptions.expandWildcardsClosed()) {_                        expectedNumberOfIndices += 1__                    }_                    assertThat(concreteIndices.length, equalTo(expectedNumberOfIndices))__                } else {_                    expectThrows(IndexNotFoundException.class, () -> indexNameExpressionResolver.concreteIndexNames(context, allIndices))__                }_            }_        }_    };test,resolving,pattern,null,empty,array,or,for,random,indices,options;public,void,test,concrete,indices,all,pattern,random,for,int,i,0,i,10,i,final,string,all,indices,switch,random,int,between,0,2,case,0,all,indices,null,break,case,1,all,indices,new,string,0,break,case,2,all,indices,new,string,meta,data,all,break,default,throw,new,unsupported,operation,exception,final,indices,options,indices,options,indices,options,from,options,random,boolean,random,boolean,random,boolean,random,boolean,cluster,state,state,cluster,state,builder,new,cluster,name,meta,data,meta,data,builder,build,build,index,name,expression,resolver,context,context,new,index,name,expression,resolver,context,state,indices,options,if,indices,options,allow,no,indices,string,concrete,indices,index,name,expression,resolver,concrete,index,names,context,all,indices,assert,that,concrete,indices,not,null,value,assert,that,concrete,indices,length,equal,to,0,else,expect,throws,index,not,found,exception,class,index,name,expression,resolver,concrete,index,names,context,all,indices,meta,data,builder,md,builder,meta,data,builder,put,index,builder,aaa,state,state,open,put,alias,alias,meta,data,builder,put,index,builder,bbb,state,state,open,put,alias,alias,meta,data,builder,put,index,builder,ccc,state,state,close,put,alias,alias,meta,data,builder,cluster,state,state,cluster,state,builder,new,cluster,name,meta,data,md,builder,build,index,name,expression,resolver,context,context,new,index,name,expression,resolver,context,state,indices,options,if,indices,options,expand,wildcards,open,indices,options,expand,wildcards,closed,indices,options,allow,no,indices,string,concrete,indices,index,name,expression,resolver,concrete,index,names,context,all,indices,assert,that,concrete,indices,not,null,value,int,expected,number,of,indices,0,if,indices,options,expand,wildcards,open,expected,number,of,indices,2,if,indices,options,expand,wildcards,closed,expected,number,of,indices,1,assert,that,concrete,indices,length,equal,to,expected,number,of,indices,else,expect,throws,index,not,found,exception,class,index,name,expression,resolver,concrete,index,names,context,all,indices
IndexNameExpressionResolverTests -> public void testConcreteIndicesAllPatternRandom();1541493930;test resolving _all pattern (null, empty array or "_all") for random IndicesOptions;public void testConcreteIndicesAllPatternRandom() {_        for (int i = 0_ i < 10_ i++) {_            final String[] allIndices__            switch (randomIntBetween(0, 2)) {_                case 0:_                    allIndices = null__                    break__                case 1:_                    allIndices = new String[0]__                    break__                case 2:_                    allIndices = new String[] { MetaData.ALL }__                    break__                default:_                    throw new UnsupportedOperationException()__            }_            final IndicesOptions indicesOptions = IndicesOptions.fromOptions(randomBoolean(), randomBoolean(),_                    randomBoolean(), randomBoolean())___            {_                ClusterState state = ClusterState.builder(new ClusterName("_name")).metaData(MetaData.builder().build()).build()__                IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, indicesOptions)___                _                if (indicesOptions.allowNoIndices()) {_                    String[] concreteIndices = indexNameExpressionResolver.concreteIndexNames(context, allIndices)__                    assertThat(concreteIndices, notNullValue())__                    assertThat(concreteIndices.length, equalTo(0))__                } else {_                    expectThrows(IndexNotFoundException.class, () -> indexNameExpressionResolver.concreteIndexNames(context, allIndices))__                }_            }__            {_                _                MetaData.Builder mdBuilder = MetaData.builder()_                        .put(indexBuilder("aaa").state(State.OPEN).putAlias(AliasMetaData.builder("aaa_alias1")))_                        .put(indexBuilder("bbb").state(State.OPEN).putAlias(AliasMetaData.builder("bbb_alias1")))_                        .put(indexBuilder("ccc").state(State.CLOSE).putAlias(AliasMetaData.builder("ccc_alias1")))__                ClusterState state = ClusterState.builder(new ClusterName("_name")).metaData(mdBuilder).build()__                IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, indicesOptions)__                if (indicesOptions.expandWildcardsOpen() || indicesOptions.expandWildcardsClosed() || indicesOptions.allowNoIndices()) {_                    String[] concreteIndices = indexNameExpressionResolver.concreteIndexNames(context, allIndices)__                    assertThat(concreteIndices, notNullValue())__                    int expectedNumberOfIndices = 0__                    if (indicesOptions.expandWildcardsOpen()) {_                        expectedNumberOfIndices += 2__                    }_                    if (indicesOptions.expandWildcardsClosed()) {_                        expectedNumberOfIndices += 1__                    }_                    assertThat(concreteIndices.length, equalTo(expectedNumberOfIndices))__                } else {_                    expectThrows(IndexNotFoundException.class, () -> indexNameExpressionResolver.concreteIndexNames(context, allIndices))__                }_            }_        }_    };test,resolving,pattern,null,empty,array,or,for,random,indices,options;public,void,test,concrete,indices,all,pattern,random,for,int,i,0,i,10,i,final,string,all,indices,switch,random,int,between,0,2,case,0,all,indices,null,break,case,1,all,indices,new,string,0,break,case,2,all,indices,new,string,meta,data,all,break,default,throw,new,unsupported,operation,exception,final,indices,options,indices,options,indices,options,from,options,random,boolean,random,boolean,random,boolean,random,boolean,cluster,state,state,cluster,state,builder,new,cluster,name,meta,data,meta,data,builder,build,build,index,name,expression,resolver,context,context,new,index,name,expression,resolver,context,state,indices,options,if,indices,options,allow,no,indices,string,concrete,indices,index,name,expression,resolver,concrete,index,names,context,all,indices,assert,that,concrete,indices,not,null,value,assert,that,concrete,indices,length,equal,to,0,else,expect,throws,index,not,found,exception,class,index,name,expression,resolver,concrete,index,names,context,all,indices,meta,data,builder,md,builder,meta,data,builder,put,index,builder,aaa,state,state,open,put,alias,alias,meta,data,builder,put,index,builder,bbb,state,state,open,put,alias,alias,meta,data,builder,put,index,builder,ccc,state,state,close,put,alias,alias,meta,data,builder,cluster,state,state,cluster,state,builder,new,cluster,name,meta,data,md,builder,build,index,name,expression,resolver,context,context,new,index,name,expression,resolver,context,state,indices,options,if,indices,options,expand,wildcards,open,indices,options,expand,wildcards,closed,indices,options,allow,no,indices,string,concrete,indices,index,name,expression,resolver,concrete,index,names,context,all,indices,assert,that,concrete,indices,not,null,value,int,expected,number,of,indices,0,if,indices,options,expand,wildcards,open,expected,number,of,indices,2,if,indices,options,expand,wildcards,closed,expected,number,of,indices,1,assert,that,concrete,indices,length,equal,to,expected,number,of,indices,else,expect,throws,index,not,found,exception,class,index,name,expression,resolver,concrete,index,names,context,all,indices
IndexNameExpressionResolverTests -> public void testConcreteIndicesAllPatternRandom();1541612607;test resolving _all pattern (null, empty array or "_all") for random IndicesOptions;public void testConcreteIndicesAllPatternRandom() {_        for (int i = 0_ i < 10_ i++) {_            final String[] allIndices__            switch (randomIntBetween(0, 2)) {_                case 0:_                    allIndices = null__                    break__                case 1:_                    allIndices = new String[0]__                    break__                case 2:_                    allIndices = new String[] { MetaData.ALL }__                    break__                default:_                    throw new UnsupportedOperationException()__            }_            final IndicesOptions indicesOptions = IndicesOptions.fromOptions(randomBoolean(), randomBoolean(),_                    randomBoolean(), randomBoolean())___            {_                ClusterState state = ClusterState.builder(new ClusterName("_name")).metaData(MetaData.builder().build()).build()__                IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, indicesOptions)___                _                if (indicesOptions.allowNoIndices()) {_                    String[] concreteIndices = indexNameExpressionResolver.concreteIndexNames(context, allIndices)__                    assertThat(concreteIndices, notNullValue())__                    assertThat(concreteIndices.length, equalTo(0))__                } else {_                    expectThrows(IndexNotFoundException.class, () -> indexNameExpressionResolver.concreteIndexNames(context, allIndices))__                }_            }__            {_                _                MetaData.Builder mdBuilder = MetaData.builder()_                        .put(indexBuilder("aaa").state(State.OPEN).putAlias(AliasMetaData.builder("aaa_alias1")))_                        .put(indexBuilder("bbb").state(State.OPEN).putAlias(AliasMetaData.builder("bbb_alias1")))_                        .put(indexBuilder("ccc").state(State.CLOSE).putAlias(AliasMetaData.builder("ccc_alias1")))__                ClusterState state = ClusterState.builder(new ClusterName("_name")).metaData(mdBuilder).build()__                IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, indicesOptions)__                if (indicesOptions.expandWildcardsOpen() || indicesOptions.expandWildcardsClosed() || indicesOptions.allowNoIndices()) {_                    String[] concreteIndices = indexNameExpressionResolver.concreteIndexNames(context, allIndices)__                    assertThat(concreteIndices, notNullValue())__                    int expectedNumberOfIndices = 0__                    if (indicesOptions.expandWildcardsOpen()) {_                        expectedNumberOfIndices += 2__                    }_                    if (indicesOptions.expandWildcardsClosed()) {_                        expectedNumberOfIndices += 1__                    }_                    assertThat(concreteIndices.length, equalTo(expectedNumberOfIndices))__                } else {_                    expectThrows(IndexNotFoundException.class, () -> indexNameExpressionResolver.concreteIndexNames(context, allIndices))__                }_            }_        }_    };test,resolving,pattern,null,empty,array,or,for,random,indices,options;public,void,test,concrete,indices,all,pattern,random,for,int,i,0,i,10,i,final,string,all,indices,switch,random,int,between,0,2,case,0,all,indices,null,break,case,1,all,indices,new,string,0,break,case,2,all,indices,new,string,meta,data,all,break,default,throw,new,unsupported,operation,exception,final,indices,options,indices,options,indices,options,from,options,random,boolean,random,boolean,random,boolean,random,boolean,cluster,state,state,cluster,state,builder,new,cluster,name,meta,data,meta,data,builder,build,build,index,name,expression,resolver,context,context,new,index,name,expression,resolver,context,state,indices,options,if,indices,options,allow,no,indices,string,concrete,indices,index,name,expression,resolver,concrete,index,names,context,all,indices,assert,that,concrete,indices,not,null,value,assert,that,concrete,indices,length,equal,to,0,else,expect,throws,index,not,found,exception,class,index,name,expression,resolver,concrete,index,names,context,all,indices,meta,data,builder,md,builder,meta,data,builder,put,index,builder,aaa,state,state,open,put,alias,alias,meta,data,builder,put,index,builder,bbb,state,state,open,put,alias,alias,meta,data,builder,put,index,builder,ccc,state,state,close,put,alias,alias,meta,data,builder,cluster,state,state,cluster,state,builder,new,cluster,name,meta,data,md,builder,build,index,name,expression,resolver,context,context,new,index,name,expression,resolver,context,state,indices,options,if,indices,options,expand,wildcards,open,indices,options,expand,wildcards,closed,indices,options,allow,no,indices,string,concrete,indices,index,name,expression,resolver,concrete,index,names,context,all,indices,assert,that,concrete,indices,not,null,value,int,expected,number,of,indices,0,if,indices,options,expand,wildcards,open,expected,number,of,indices,2,if,indices,options,expand,wildcards,closed,expected,number,of,indices,1,assert,that,concrete,indices,length,equal,to,expected,number,of,indices,else,expect,throws,index,not,found,exception,class,index,name,expression,resolver,concrete,index,names,context,all,indices
IndexNameExpressionResolverTests -> public void testConcreteIndicesWildcardNoMatch();1524684173;test resolving wildcard pattern that matches no index of alias for random IndicesOptions;public void testConcreteIndicesWildcardNoMatch() {_        for (int i = 0_ i < 10_ i++) {_            IndicesOptions indicesOptions = IndicesOptions.fromOptions(randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean())__            MetaData.Builder mdBuilder = MetaData.builder()_                    .put(indexBuilder("aaa").state(State.OPEN).putAlias(AliasMetaData.builder("aaa_alias1")))_                    .put(indexBuilder("bbb").state(State.OPEN).putAlias(AliasMetaData.builder("bbb_alias1")))_                    .put(indexBuilder("ccc").state(State.CLOSE).putAlias(AliasMetaData.builder("ccc_alias1")))__            ClusterState state = ClusterState.builder(new ClusterName("_name")).metaData(mdBuilder).build()__            IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, indicesOptions)___            _            if (indicesOptions.allowNoIndices()) {_                String[] concreteIndices = indexNameExpressionResolver.concreteIndexNames(context, "Foo*")__                assertThat(concreteIndices, notNullValue())__                assertThat(concreteIndices.length, equalTo(0))__            } else {_                expectThrows(IndexNotFoundException.class, () -> indexNameExpressionResolver.concreteIndexNames(context, "Foo*"))__            }_        }_    };test,resolving,wildcard,pattern,that,matches,no,index,of,alias,for,random,indices,options;public,void,test,concrete,indices,wildcard,no,match,for,int,i,0,i,10,i,indices,options,indices,options,indices,options,from,options,random,boolean,random,boolean,random,boolean,random,boolean,meta,data,builder,md,builder,meta,data,builder,put,index,builder,aaa,state,state,open,put,alias,alias,meta,data,builder,put,index,builder,bbb,state,state,open,put,alias,alias,meta,data,builder,put,index,builder,ccc,state,state,close,put,alias,alias,meta,data,builder,cluster,state,state,cluster,state,builder,new,cluster,name,meta,data,md,builder,build,index,name,expression,resolver,context,context,new,index,name,expression,resolver,context,state,indices,options,if,indices,options,allow,no,indices,string,concrete,indices,index,name,expression,resolver,concrete,index,names,context,foo,assert,that,concrete,indices,not,null,value,assert,that,concrete,indices,length,equal,to,0,else,expect,throws,index,not,found,exception,class,index,name,expression,resolver,concrete,index,names,context,foo
IndexNameExpressionResolverTests -> public void testConcreteIndicesWildcardNoMatch();1532028790;test resolving wildcard pattern that matches no index of alias for random IndicesOptions;public void testConcreteIndicesWildcardNoMatch() {_        for (int i = 0_ i < 10_ i++) {_            IndicesOptions indicesOptions = IndicesOptions.fromOptions(randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean())__            MetaData.Builder mdBuilder = MetaData.builder()_                    .put(indexBuilder("aaa").state(State.OPEN).putAlias(AliasMetaData.builder("aaa_alias1")))_                    .put(indexBuilder("bbb").state(State.OPEN).putAlias(AliasMetaData.builder("bbb_alias1")))_                    .put(indexBuilder("ccc").state(State.CLOSE).putAlias(AliasMetaData.builder("ccc_alias1")))__            ClusterState state = ClusterState.builder(new ClusterName("_name")).metaData(mdBuilder).build()__            IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, indicesOptions)___            _            if (indicesOptions.allowNoIndices()) {_                String[] concreteIndices = indexNameExpressionResolver.concreteIndexNames(context, "Foo*")__                assertThat(concreteIndices, notNullValue())__                assertThat(concreteIndices.length, equalTo(0))__            } else {_                expectThrows(IndexNotFoundException.class, () -> indexNameExpressionResolver.concreteIndexNames(context, "Foo*"))__            }_        }_    };test,resolving,wildcard,pattern,that,matches,no,index,of,alias,for,random,indices,options;public,void,test,concrete,indices,wildcard,no,match,for,int,i,0,i,10,i,indices,options,indices,options,indices,options,from,options,random,boolean,random,boolean,random,boolean,random,boolean,meta,data,builder,md,builder,meta,data,builder,put,index,builder,aaa,state,state,open,put,alias,alias,meta,data,builder,put,index,builder,bbb,state,state,open,put,alias,alias,meta,data,builder,put,index,builder,ccc,state,state,close,put,alias,alias,meta,data,builder,cluster,state,state,cluster,state,builder,new,cluster,name,meta,data,md,builder,build,index,name,expression,resolver,context,context,new,index,name,expression,resolver,context,state,indices,options,if,indices,options,allow,no,indices,string,concrete,indices,index,name,expression,resolver,concrete,index,names,context,foo,assert,that,concrete,indices,not,null,value,assert,that,concrete,indices,length,equal,to,0,else,expect,throws,index,not,found,exception,class,index,name,expression,resolver,concrete,index,names,context,foo
IndexNameExpressionResolverTests -> public void testConcreteIndicesWildcardNoMatch();1540486836;test resolving wildcard pattern that matches no index of alias for random IndicesOptions;public void testConcreteIndicesWildcardNoMatch() {_        for (int i = 0_ i < 10_ i++) {_            IndicesOptions indicesOptions = IndicesOptions.fromOptions(randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean())__            MetaData.Builder mdBuilder = MetaData.builder()_                    .put(indexBuilder("aaa").state(State.OPEN).putAlias(AliasMetaData.builder("aaa_alias1")))_                    .put(indexBuilder("bbb").state(State.OPEN).putAlias(AliasMetaData.builder("bbb_alias1")))_                    .put(indexBuilder("ccc").state(State.CLOSE).putAlias(AliasMetaData.builder("ccc_alias1")))__            ClusterState state = ClusterState.builder(new ClusterName("_name")).metaData(mdBuilder).build()__            IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, indicesOptions)___            _            if (indicesOptions.allowNoIndices()) {_                String[] concreteIndices = indexNameExpressionResolver.concreteIndexNames(context, "Foo*")__                assertThat(concreteIndices, notNullValue())__                assertThat(concreteIndices.length, equalTo(0))__            } else {_                expectThrows(IndexNotFoundException.class, () -> indexNameExpressionResolver.concreteIndexNames(context, "Foo*"))__            }_        }_    };test,resolving,wildcard,pattern,that,matches,no,index,of,alias,for,random,indices,options;public,void,test,concrete,indices,wildcard,no,match,for,int,i,0,i,10,i,indices,options,indices,options,indices,options,from,options,random,boolean,random,boolean,random,boolean,random,boolean,meta,data,builder,md,builder,meta,data,builder,put,index,builder,aaa,state,state,open,put,alias,alias,meta,data,builder,put,index,builder,bbb,state,state,open,put,alias,alias,meta,data,builder,put,index,builder,ccc,state,state,close,put,alias,alias,meta,data,builder,cluster,state,state,cluster,state,builder,new,cluster,name,meta,data,md,builder,build,index,name,expression,resolver,context,context,new,index,name,expression,resolver,context,state,indices,options,if,indices,options,allow,no,indices,string,concrete,indices,index,name,expression,resolver,concrete,index,names,context,foo,assert,that,concrete,indices,not,null,value,assert,that,concrete,indices,length,equal,to,0,else,expect,throws,index,not,found,exception,class,index,name,expression,resolver,concrete,index,names,context,foo
IndexNameExpressionResolverTests -> public void testConcreteIndicesWildcardNoMatch();1540847035;test resolving wildcard pattern that matches no index of alias for random IndicesOptions;public void testConcreteIndicesWildcardNoMatch() {_        for (int i = 0_ i < 10_ i++) {_            IndicesOptions indicesOptions = IndicesOptions.fromOptions(randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean())__            MetaData.Builder mdBuilder = MetaData.builder()_                    .put(indexBuilder("aaa").state(State.OPEN).putAlias(AliasMetaData.builder("aaa_alias1")))_                    .put(indexBuilder("bbb").state(State.OPEN).putAlias(AliasMetaData.builder("bbb_alias1")))_                    .put(indexBuilder("ccc").state(State.CLOSE).putAlias(AliasMetaData.builder("ccc_alias1")))__            ClusterState state = ClusterState.builder(new ClusterName("_name")).metaData(mdBuilder).build()__            IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, indicesOptions)___            _            if (indicesOptions.allowNoIndices()) {_                String[] concreteIndices = indexNameExpressionResolver.concreteIndexNames(context, "Foo*")__                assertThat(concreteIndices, notNullValue())__                assertThat(concreteIndices.length, equalTo(0))__            } else {_                expectThrows(IndexNotFoundException.class, () -> indexNameExpressionResolver.concreteIndexNames(context, "Foo*"))__            }_        }_    };test,resolving,wildcard,pattern,that,matches,no,index,of,alias,for,random,indices,options;public,void,test,concrete,indices,wildcard,no,match,for,int,i,0,i,10,i,indices,options,indices,options,indices,options,from,options,random,boolean,random,boolean,random,boolean,random,boolean,meta,data,builder,md,builder,meta,data,builder,put,index,builder,aaa,state,state,open,put,alias,alias,meta,data,builder,put,index,builder,bbb,state,state,open,put,alias,alias,meta,data,builder,put,index,builder,ccc,state,state,close,put,alias,alias,meta,data,builder,cluster,state,state,cluster,state,builder,new,cluster,name,meta,data,md,builder,build,index,name,expression,resolver,context,context,new,index,name,expression,resolver,context,state,indices,options,if,indices,options,allow,no,indices,string,concrete,indices,index,name,expression,resolver,concrete,index,names,context,foo,assert,that,concrete,indices,not,null,value,assert,that,concrete,indices,length,equal,to,0,else,expect,throws,index,not,found,exception,class,index,name,expression,resolver,concrete,index,names,context,foo
IndexNameExpressionResolverTests -> public void testConcreteIndicesWildcardNoMatch();1541092382;test resolving wildcard pattern that matches no index of alias for random IndicesOptions;public void testConcreteIndicesWildcardNoMatch() {_        for (int i = 0_ i < 10_ i++) {_            IndicesOptions indicesOptions = IndicesOptions.fromOptions(randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean())__            MetaData.Builder mdBuilder = MetaData.builder()_                    .put(indexBuilder("aaa").state(State.OPEN).putAlias(AliasMetaData.builder("aaa_alias1")))_                    .put(indexBuilder("bbb").state(State.OPEN).putAlias(AliasMetaData.builder("bbb_alias1")))_                    .put(indexBuilder("ccc").state(State.CLOSE).putAlias(AliasMetaData.builder("ccc_alias1")))__            ClusterState state = ClusterState.builder(new ClusterName("_name")).metaData(mdBuilder).build()__            IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, indicesOptions)___            _            if (indicesOptions.allowNoIndices()) {_                String[] concreteIndices = indexNameExpressionResolver.concreteIndexNames(context, "Foo*")__                assertThat(concreteIndices, notNullValue())__                assertThat(concreteIndices.length, equalTo(0))__            } else {_                expectThrows(IndexNotFoundException.class, () -> indexNameExpressionResolver.concreteIndexNames(context, "Foo*"))__            }_        }_    };test,resolving,wildcard,pattern,that,matches,no,index,of,alias,for,random,indices,options;public,void,test,concrete,indices,wildcard,no,match,for,int,i,0,i,10,i,indices,options,indices,options,indices,options,from,options,random,boolean,random,boolean,random,boolean,random,boolean,meta,data,builder,md,builder,meta,data,builder,put,index,builder,aaa,state,state,open,put,alias,alias,meta,data,builder,put,index,builder,bbb,state,state,open,put,alias,alias,meta,data,builder,put,index,builder,ccc,state,state,close,put,alias,alias,meta,data,builder,cluster,state,state,cluster,state,builder,new,cluster,name,meta,data,md,builder,build,index,name,expression,resolver,context,context,new,index,name,expression,resolver,context,state,indices,options,if,indices,options,allow,no,indices,string,concrete,indices,index,name,expression,resolver,concrete,index,names,context,foo,assert,that,concrete,indices,not,null,value,assert,that,concrete,indices,length,equal,to,0,else,expect,throws,index,not,found,exception,class,index,name,expression,resolver,concrete,index,names,context,foo
IndexNameExpressionResolverTests -> public void testConcreteIndicesWildcardNoMatch();1541493930;test resolving wildcard pattern that matches no index of alias for random IndicesOptions;public void testConcreteIndicesWildcardNoMatch() {_        for (int i = 0_ i < 10_ i++) {_            IndicesOptions indicesOptions = IndicesOptions.fromOptions(randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean())__            MetaData.Builder mdBuilder = MetaData.builder()_                    .put(indexBuilder("aaa").state(State.OPEN).putAlias(AliasMetaData.builder("aaa_alias1")))_                    .put(indexBuilder("bbb").state(State.OPEN).putAlias(AliasMetaData.builder("bbb_alias1")))_                    .put(indexBuilder("ccc").state(State.CLOSE).putAlias(AliasMetaData.builder("ccc_alias1")))__            ClusterState state = ClusterState.builder(new ClusterName("_name")).metaData(mdBuilder).build()__            IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, indicesOptions)___            _            if (indicesOptions.allowNoIndices()) {_                String[] concreteIndices = indexNameExpressionResolver.concreteIndexNames(context, "Foo*")__                assertThat(concreteIndices, notNullValue())__                assertThat(concreteIndices.length, equalTo(0))__            } else {_                expectThrows(IndexNotFoundException.class, () -> indexNameExpressionResolver.concreteIndexNames(context, "Foo*"))__            }_        }_    };test,resolving,wildcard,pattern,that,matches,no,index,of,alias,for,random,indices,options;public,void,test,concrete,indices,wildcard,no,match,for,int,i,0,i,10,i,indices,options,indices,options,indices,options,from,options,random,boolean,random,boolean,random,boolean,random,boolean,meta,data,builder,md,builder,meta,data,builder,put,index,builder,aaa,state,state,open,put,alias,alias,meta,data,builder,put,index,builder,bbb,state,state,open,put,alias,alias,meta,data,builder,put,index,builder,ccc,state,state,close,put,alias,alias,meta,data,builder,cluster,state,state,cluster,state,builder,new,cluster,name,meta,data,md,builder,build,index,name,expression,resolver,context,context,new,index,name,expression,resolver,context,state,indices,options,if,indices,options,allow,no,indices,string,concrete,indices,index,name,expression,resolver,concrete,index,names,context,foo,assert,that,concrete,indices,not,null,value,assert,that,concrete,indices,length,equal,to,0,else,expect,throws,index,not,found,exception,class,index,name,expression,resolver,concrete,index,names,context,foo
IndexNameExpressionResolverTests -> public void testConcreteIndicesWildcardNoMatch();1541612607;test resolving wildcard pattern that matches no index of alias for random IndicesOptions;public void testConcreteIndicesWildcardNoMatch() {_        for (int i = 0_ i < 10_ i++) {_            IndicesOptions indicesOptions = IndicesOptions.fromOptions(randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean())__            MetaData.Builder mdBuilder = MetaData.builder()_                    .put(indexBuilder("aaa").state(State.OPEN).putAlias(AliasMetaData.builder("aaa_alias1")))_                    .put(indexBuilder("bbb").state(State.OPEN).putAlias(AliasMetaData.builder("bbb_alias1")))_                    .put(indexBuilder("ccc").state(State.CLOSE).putAlias(AliasMetaData.builder("ccc_alias1")))__            ClusterState state = ClusterState.builder(new ClusterName("_name")).metaData(mdBuilder).build()__            IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, indicesOptions)___            _            if (indicesOptions.allowNoIndices()) {_                String[] concreteIndices = indexNameExpressionResolver.concreteIndexNames(context, "Foo*")__                assertThat(concreteIndices, notNullValue())__                assertThat(concreteIndices.length, equalTo(0))__            } else {_                expectThrows(IndexNotFoundException.class, () -> indexNameExpressionResolver.concreteIndexNames(context, "Foo*"))__            }_        }_    };test,resolving,wildcard,pattern,that,matches,no,index,of,alias,for,random,indices,options;public,void,test,concrete,indices,wildcard,no,match,for,int,i,0,i,10,i,indices,options,indices,options,indices,options,from,options,random,boolean,random,boolean,random,boolean,random,boolean,meta,data,builder,md,builder,meta,data,builder,put,index,builder,aaa,state,state,open,put,alias,alias,meta,data,builder,put,index,builder,bbb,state,state,open,put,alias,alias,meta,data,builder,put,index,builder,ccc,state,state,close,put,alias,alias,meta,data,builder,cluster,state,state,cluster,state,builder,new,cluster,name,meta,data,md,builder,build,index,name,expression,resolver,context,context,new,index,name,expression,resolver,context,state,indices,options,if,indices,options,allow,no,indices,string,concrete,indices,index,name,expression,resolver,concrete,index,names,context,foo,assert,that,concrete,indices,not,null,value,assert,that,concrete,indices,length,equal,to,0,else,expect,throws,index,not,found,exception,class,index,name,expression,resolver,concrete,index,names,context,foo
