commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     return Collections.singleton(CustomScriptPlugin.class). }
false;protected;0;30;;@Override protected Map<String, Function<Map<String, Object>, Object>> pluginScripts() {     Map<String, Function<Map<String, Object>, Object>> scripts = super.pluginScripts().     scripts.put("(long) (_value / 1000 + 1)", vars -> (long) ((double) vars.get("_value") / 1000 + 1)).     scripts.put("doc['" + MULTI_VALUED_FIELD_NAME + "']", vars -> {         Map<?, ?> doc = (Map) vars.get("doc").         return doc.get(MULTI_VALUED_FIELD_NAME).     }).     scripts.put("doc['" + MULTI_VALUED_FIELD_NAME + "'].value", vars -> {         Map<?, ?> doc = (Map) vars.get("doc").         ScriptDocValues.Doubles value = (ScriptDocValues.Doubles) doc.get(MULTI_VALUED_FIELD_NAME).         return value.getValue().     }).     scripts.put("doc['" + SINGLE_VALUED_FIELD_NAME + "'].value", vars -> {         Map<?, ?> doc = (Map) vars.get("doc").         ScriptDocValues.Doubles value = (ScriptDocValues.Doubles) doc.get(SINGLE_VALUED_FIELD_NAME).         return value.getValue().     }).     scripts.put("ceil(_score.doubleValue()/3)", vars -> {         Number score = (Number) vars.get("_score").         return Math.ceil(score.doubleValue() / 3).     }).     return scripts. }
false;public;0;36;;@Override public void setupSuiteScopeCluster() throws Exception {     createIndex("idx").     List<IndexRequestBuilder> builders = new ArrayList<>().     for (int i = 0. i < NUM_DOCS. i++) {         builders.add(client().prepareIndex("idx", "type").setSource(jsonBuilder().startObject().field(SINGLE_VALUED_FIELD_NAME, (double) i).field("num_tag", // used to test order by single-bucket sub agg         i < NUM_DOCS / 2 + 1 ? 1 : 0).field("constant", 1).startArray(MULTI_VALUED_FIELD_NAME).value((double) i).value(i + 1d).endArray().endObject())).     }     for (int i = 0. i < 100. i++) {         builders.add(client().prepareIndex("high_card_idx", "type").setSource(jsonBuilder().startObject().field(SINGLE_VALUED_FIELD_NAME, (double) i).startArray(MULTI_VALUED_FIELD_NAME).value((double) i).value(i + 1d).endArray().endObject())).     }     createIndex("idx_unmapped").     assertAcked(prepareCreate("empty_bucket_idx").addMapping("type", SINGLE_VALUED_FIELD_NAME, "type=integer")).     for (int i = 0. i < 2. i++) {         builders.add(client().prepareIndex("empty_bucket_idx", "type", "" + i).setSource(jsonBuilder().startObject().field(SINGLE_VALUED_FIELD_NAME, i * 2).endObject())).     }     getMultiSortDocs(builders).     indexRandom(true, builders).     ensureSearchable(). }
false;private;1;109;;private void getMultiSortDocs(List<IndexRequestBuilder> builders) throws IOException {     expectedMultiSortBuckets = new HashMap<>().     Map<String, Object> bucketProps = new HashMap<>().     bucketProps.put("_term", 1d).     bucketProps.put("_count", 3L).     bucketProps.put("avg_l", 1d).     bucketProps.put("sum_d", 6d).     expectedMultiSortBuckets.put((Double) bucketProps.get("_term"), bucketProps).     bucketProps = new HashMap<>().     bucketProps.put("_term", 2d).     bucketProps.put("_count", 3L).     bucketProps.put("avg_l", 2d).     bucketProps.put("sum_d", 6d).     expectedMultiSortBuckets.put((Double) bucketProps.get("_term"), bucketProps).     bucketProps = new HashMap<>().     bucketProps.put("_term", 3d).     bucketProps.put("_count", 2L).     bucketProps.put("avg_l", 3d).     bucketProps.put("sum_d", 3d).     expectedMultiSortBuckets.put((Double) bucketProps.get("_term"), bucketProps).     bucketProps = new HashMap<>().     bucketProps.put("_term", 4d).     bucketProps.put("_count", 2L).     bucketProps.put("avg_l", 3d).     bucketProps.put("sum_d", 4d).     expectedMultiSortBuckets.put((Double) bucketProps.get("_term"), bucketProps).     bucketProps = new HashMap<>().     bucketProps.put("_term", 5d).     bucketProps.put("_count", 2L).     bucketProps.put("avg_l", 5d).     bucketProps.put("sum_d", 3d).     expectedMultiSortBuckets.put((Double) bucketProps.get("_term"), bucketProps).     bucketProps = new HashMap<>().     bucketProps.put("_term", 6d).     bucketProps.put("_count", 1L).     bucketProps.put("avg_l", 5d).     bucketProps.put("sum_d", 1d).     expectedMultiSortBuckets.put((Double) bucketProps.get("_term"), bucketProps).     bucketProps = new HashMap<>().     bucketProps.put("_term", 7d).     bucketProps.put("_count", 1L).     bucketProps.put("avg_l", 5d).     bucketProps.put("sum_d", 1d).     expectedMultiSortBuckets.put((Double) bucketProps.get("_term"), bucketProps).     assertAcked(prepareCreate("sort_idx").addMapping("multi_sort_type", SINGLE_VALUED_FIELD_NAME, "type=double")).     for (int i = 1. i <= 3. i++) {         builders.add(client().prepareIndex("sort_idx", "multi_sort_type").setSource(jsonBuilder().startObject().field(SINGLE_VALUED_FIELD_NAME, 1).field("l", 1).field("d", i).endObject())).         builders.add(client().prepareIndex("sort_idx", "multi_sort_type").setSource(jsonBuilder().startObject().field(SINGLE_VALUED_FIELD_NAME, 2).field("l", 2).field("d", i).endObject())).     }     builders.add(client().prepareIndex("sort_idx", "multi_sort_type").setSource(jsonBuilder().startObject().field(SINGLE_VALUED_FIELD_NAME, 3).field("l", 3).field("d", 1).endObject())).     builders.add(client().prepareIndex("sort_idx", "multi_sort_type").setSource(jsonBuilder().startObject().field(SINGLE_VALUED_FIELD_NAME, 3).field("l", 3).field("d", 2).endObject())).     builders.add(client().prepareIndex("sort_idx", "multi_sort_type").setSource(jsonBuilder().startObject().field(SINGLE_VALUED_FIELD_NAME, 4).field("l", 3).field("d", 1).endObject())).     builders.add(client().prepareIndex("sort_idx", "multi_sort_type").setSource(jsonBuilder().startObject().field(SINGLE_VALUED_FIELD_NAME, 4).field("l", 3).field("d", 3).endObject())).     builders.add(client().prepareIndex("sort_idx", "multi_sort_type").setSource(jsonBuilder().startObject().field(SINGLE_VALUED_FIELD_NAME, 5).field("l", 5).field("d", 1).endObject())).     builders.add(client().prepareIndex("sort_idx", "multi_sort_type").setSource(jsonBuilder().startObject().field(SINGLE_VALUED_FIELD_NAME, 5).field("l", 5).field("d", 2).endObject())).     builders.add(client().prepareIndex("sort_idx", "multi_sort_type").setSource(jsonBuilder().startObject().field(SINGLE_VALUED_FIELD_NAME, 6).field("l", 5).field("d", 1).endObject())).     builders.add(client().prepareIndex("sort_idx", "multi_sort_type").setSource(jsonBuilder().startObject().field(SINGLE_VALUED_FIELD_NAME, 7).field("l", 5).field("d", 1).endObject())). }
false;private;1;3;;private String key(Terms.Bucket bucket) {     return bucket.getKeyAsString(). }
true;public;0;8;// the main purpose of this test is to make sure we're not allocating 2GB of memory per shard ;// the main purpose of this test is to make sure we're not allocating 2GB of memory per shard public void testSizeIsZero() {     IllegalArgumentException exception = expectThrows(IllegalArgumentException.class, () -> client().prepareSearch("high_card_idx").addAggregation(terms("terms").field(SINGLE_VALUED_FIELD_NAME).minDocCount(randomInt(1)).size(0).collectMode(randomFrom(SubAggCollectionMode.values()))).get()).     assertThat(exception.getMessage(), containsString("[size] must be greater than 0. Found [0] in [terms]")). }
false;public;0;3;;public void testSingleValueFieldWithPartitionedFiltering() throws Exception {     runTestFieldWithPartitionedFiltering(SINGLE_VALUED_FIELD_NAME). }
false;public;0;3;;public void testMultiValueFieldWithPartitionedFiltering() throws Exception {     runTestFieldWithPartitionedFiltering(MULTI_VALUED_FIELD_NAME). }
false;private;1;29;;private void runTestFieldWithPartitionedFiltering(String field) throws Exception {     // Find total number of unique terms     SearchResponse allResponse = client().prepareSearch("idx").addAggregation(terms("terms").field(field).size(10000).collectMode(randomFrom(SubAggCollectionMode.values()))).get().     assertSearchResponse(allResponse).     Terms terms = allResponse.getAggregations().get("terms").     assertThat(terms, notNullValue()).     assertThat(terms.getName(), equalTo("terms")).     int expectedCardinality = terms.getBuckets().size().     // Gather terms using partitioned aggregations     final int numPartitions = randomIntBetween(2, 4).     Set<Number> foundTerms = new HashSet<>().     for (int partition = 0. partition < numPartitions. partition++) {         SearchResponse response = client().prepareSearch("idx").addAggregation(terms("terms").field(field).includeExclude(new IncludeExclude(partition, numPartitions)).collectMode(randomFrom(SubAggCollectionMode.values()))).get().         assertSearchResponse(response).         terms = response.getAggregations().get("terms").         assertThat(terms, notNullValue()).         assertThat(terms.getName(), equalTo("terms")).         for (Bucket bucket : terms.getBuckets()) {             assertTrue(foundTerms.add(bucket.getKeyAsNumber())).             assertThat(bucket.getKeyAsNumber(), instanceOf(Double.class)).         }     }     assertEquals(expectedCardinality, foundTerms.size()). }
false;public;0;24;;public void testSingleValuedFieldWithValueScript() throws Exception {     SearchResponse response = client().prepareSearch("idx").addAggregation(terms("terms").field(SINGLE_VALUED_FIELD_NAME).collectMode(randomFrom(SubAggCollectionMode.values())).script(new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, "_value + 1", Collections.emptyMap()))).get().     assertSearchResponse(response).     Terms terms = response.getAggregations().get("terms").     assertThat(terms, notNullValue()).     assertThat(terms.getName(), equalTo("terms")).     assertThat(terms.getBuckets().size(), equalTo(5)).     for (int i = 0. i < 5. i++) {         Terms.Bucket bucket = terms.getBucketByKey("" + (i + 1d)).         assertThat(bucket, notNullValue()).         assertThat(key(bucket), equalTo("" + (i + 1d))).         assertThat(bucket.getKeyAsNumber().intValue(), equalTo(i + 1)).         assertThat(bucket.getDocCount(), equalTo(1L)).     } }
false;public;0;28;;public void testMultiValuedFieldWithValueScript() throws Exception {     SearchResponse response = client().prepareSearch("idx").addAggregation(terms("terms").field(MULTI_VALUED_FIELD_NAME).collectMode(randomFrom(SubAggCollectionMode.values())).script(new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, "_value + 1", Collections.emptyMap()))).get().     assertSearchResponse(response).     Terms terms = response.getAggregations().get("terms").     assertThat(terms, notNullValue()).     assertThat(terms.getName(), equalTo("terms")).     assertThat(terms.getBuckets().size(), equalTo(6)).     for (int i = 0. i < 6. i++) {         Terms.Bucket bucket = terms.getBucketByKey("" + (i + 1d)).         assertThat(bucket, notNullValue()).         assertThat(key(bucket), equalTo("" + (i + 1d))).         assertThat(bucket.getKeyAsNumber().intValue(), equalTo(i + 1)).         if (i == 0 || i == 5) {             assertThat(bucket.getDocCount(), equalTo(1L)).         } else {             assertThat(bucket.getDocCount(), equalTo(2L)).         }     } }
false;public;0;23;;public void testMultiValuedFieldWithValueScriptNotUnique() throws Exception {     SearchResponse response = client().prepareSearch("idx").addAggregation(terms("terms").field(MULTI_VALUED_FIELD_NAME).collectMode(randomFrom(SubAggCollectionMode.values())).script(new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, "(long) (_value / 1000 + 1)", Collections.emptyMap()))).get().     assertSearchResponse(response).     Terms terms = response.getAggregations().get("terms").     assertThat(terms, notNullValue()).     assertThat(terms.getName(), equalTo("terms")).     assertThat(terms.getBuckets().size(), equalTo(1)).     Terms.Bucket bucket = terms.getBucketByKey("1.0").     assertThat(bucket, notNullValue()).     assertThat(key(bucket), equalTo("1.0")).     assertThat(bucket.getKeyAsNumber().intValue(), equalTo(1)).     assertThat(bucket.getDocCount(), equalTo(5L)). }
false;public;0;25;;/*      [1, 2]     [2, 3]     [3, 4]     [4, 5]     [5, 6]      1 - count: 1 - sum: 1     2 - count: 2 - sum: 4     3 - count: 2 - sum: 6     4 - count: 2 - sum: 8     5 - count: 2 - sum: 10     6 - count: 1 - sum: 6      */ public void testScriptSingleValue() throws Exception {     SearchResponse response = client().prepareSearch("idx").addAggregation(terms("terms").collectMode(randomFrom(SubAggCollectionMode.values())).script(new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, "doc['" + MULTI_VALUED_FIELD_NAME + "'].value", Collections.emptyMap()))).get().     assertSearchResponse(response).     Terms terms = response.getAggregations().get("terms").     assertThat(terms, notNullValue()).     assertThat(terms.getName(), equalTo("terms")).     assertThat(terms.getBuckets().size(), equalTo(5)).     for (int i = 0. i < 5. i++) {         Terms.Bucket bucket = terms.getBucketByKey("" + (double) i).         assertThat(bucket, notNullValue()).         assertThat(key(bucket), equalTo("" + (double) i)).         assertThat(bucket.getKeyAsNumber().intValue(), equalTo(i)).         assertThat(bucket.getDocCount(), equalTo(1L)).     } }
false;public;0;29;;public void testScriptMultiValued() throws Exception {     SearchResponse response = client().prepareSearch("idx").addAggregation(terms("terms").collectMode(randomFrom(SubAggCollectionMode.values())).script(new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, "doc['" + MULTI_VALUED_FIELD_NAME + "']", Collections.emptyMap()))).get().     assertSearchResponse(response).     Terms terms = response.getAggregations().get("terms").     assertThat(terms, notNullValue()).     assertThat(terms.getName(), equalTo("terms")).     assertThat(terms.getBuckets().size(), equalTo(6)).     for (int i = 0. i < 6. i++) {         Terms.Bucket bucket = terms.getBucketByKey("" + (double) i).         assertThat(bucket, notNullValue()).         assertThat(key(bucket), equalTo("" + (double) i)).         assertThat(bucket.getKeyAsNumber().intValue(), equalTo(i)).         if (i == 0 || i == 5) {             assertThat(bucket.getDocCount(), equalTo(1L)).         } else {             assertThat(bucket.getDocCount(), equalTo(2L)).         }     } }
false;public;0;23;;public void testPartiallyUnmapped() throws Exception {     SearchResponse response = client().prepareSearch("idx_unmapped", "idx").addAggregation(terms("terms").field(SINGLE_VALUED_FIELD_NAME).collectMode(randomFrom(SubAggCollectionMode.values()))).get().     assertSearchResponse(response).     Terms terms = response.getAggregations().get("terms").     assertThat(terms, notNullValue()).     assertThat(terms.getName(), equalTo("terms")).     assertThat(terms.getBuckets().size(), equalTo(5)).     for (int i = 0. i < 5. i++) {         Terms.Bucket bucket = terms.getBucketByKey("" + (double) i).         assertThat(bucket, notNullValue()).         assertThat(key(bucket), equalTo("" + (double) i)).         assertThat(bucket.getKeyAsNumber().intValue(), equalTo(i)).         assertThat(bucket.getDocCount(), equalTo(1L)).     } }
false;public;0;25;;public void testPartiallyUnmappedWithFormat() throws Exception {     SearchResponse response = client().prepareSearch("idx_unmapped", "idx").addAggregation(terms("terms").field(SINGLE_VALUED_FIELD_NAME).collectMode(randomFrom(SubAggCollectionMode.values())).format("0000.00")).get().     assertSearchResponse(response).     Terms terms = response.getAggregations().get("terms").     assertThat(terms, notNullValue()).     assertThat(terms.getName(), equalTo("terms")).     assertThat(terms.getBuckets().size(), equalTo(5)).     for (int i = 0. i < 5. i++) {         String key = String.format(Locale.ROOT, "%07.2f", (double) i).         Terms.Bucket bucket = terms.getBucketByKey(key).         assertThat(bucket, notNullValue()).         assertThat(key(bucket), equalTo(key)).         assertThat(bucket.getKeyAsNumber().intValue(), equalTo(i)).         assertThat(bucket.getDocCount(), equalTo(1L)).     } }
false;public;0;43;;public void testSingleValuedFieldOrderedBySingleValueSubAggregationAscWithSubTermsAgg() throws Exception {     boolean asc = true.     SearchResponse response = client().prepareSearch("idx").addAggregation(terms("terms").field(SINGLE_VALUED_FIELD_NAME).collectMode(randomFrom(SubAggCollectionMode.values())).order(BucketOrder.aggregation("avg_i", asc)).subAggregation(avg("avg_i").field(SINGLE_VALUED_FIELD_NAME)).subAggregation(terms("subTerms").field(MULTI_VALUED_FIELD_NAME).collectMode(randomFrom(SubAggCollectionMode.values())))).get().     assertSearchResponse(response).     Terms terms = response.getAggregations().get("terms").     assertThat(terms, notNullValue()).     assertThat(terms.getName(), equalTo("terms")).     assertThat(terms.getBuckets().size(), equalTo(5)).     for (int i = 0. i < 5. i++) {         Terms.Bucket bucket = terms.getBucketByKey("" + (double) i).         assertThat(bucket, notNullValue()).         assertThat(key(bucket), equalTo("" + (double) i)).         assertThat(bucket.getDocCount(), equalTo(1L)).         Avg avg = bucket.getAggregations().get("avg_i").         assertThat(avg, notNullValue()).         assertThat(avg.getValue(), equalTo((double) i)).         Terms subTermsAgg = bucket.getAggregations().get("subTerms").         assertThat(subTermsAgg, notNullValue()).         assertThat(subTermsAgg.getBuckets().size(), equalTo(2)).         double j = i.         for (Terms.Bucket subBucket : subTermsAgg.getBuckets()) {             assertThat(subBucket, notNullValue()).             assertThat(key(subBucket), equalTo(String.valueOf(j))).             assertThat(subBucket.getDocCount(), equalTo(1L)).             j++.         }     } }
false;public;0;35;;public void testSingleValuedFieldOrderedBySingleBucketSubAggregationAsc() throws Exception {     boolean asc = randomBoolean().     SearchResponse response = client().prepareSearch("idx").addAggregation(terms("num_tags").field("num_tag").collectMode(randomFrom(SubAggCollectionMode.values())).order(BucketOrder.aggregation("filter", asc)).subAggregation(filter("filter", QueryBuilders.matchAllQuery()))).get().     assertSearchResponse(response).     Terms tags = response.getAggregations().get("num_tags").     assertThat(tags, notNullValue()).     assertThat(tags.getName(), equalTo("num_tags")).     assertThat(tags.getBuckets().size(), equalTo(2)).     Iterator<? extends Terms.Bucket> iters = tags.getBuckets().iterator().     Terms.Bucket tag = iters.next().     assertThat(tag, notNullValue()).     assertThat(key(tag), equalTo(asc ? "0" : "1")).     assertThat(tag.getDocCount(), equalTo(asc ? 2L : 3L)).     Filter filter = tag.getAggregations().get("filter").     assertThat(filter, notNullValue()).     assertThat(filter.getDocCount(), equalTo(asc ? 2L : 3L)).     tag = iters.next().     assertThat(tag, notNullValue()).     assertThat(key(tag), equalTo(asc ? "1" : "0")).     assertThat(tag.getDocCount(), equalTo(asc ? 3L : 2L)).     filter = tag.getAggregations().get("filter").     assertThat(filter, notNullValue()).     assertThat(filter.getDocCount(), equalTo(asc ? 3L : 2L)). }
false;public;0;55;;public void testSingleValuedFieldOrderedBySubAggregationAscMultiHierarchyLevels() throws Exception {     boolean asc = randomBoolean().     SearchResponse response = client().prepareSearch("idx").addAggregation(terms("tags").field("num_tag").collectMode(randomFrom(SubAggCollectionMode.values())).order(BucketOrder.aggregation("filter1>filter2>max", asc)).subAggregation(filter("filter1", QueryBuilders.matchAllQuery()).subAggregation(filter("filter2", QueryBuilders.matchAllQuery()).subAggregation(max("max").field(SINGLE_VALUED_FIELD_NAME))))).get().     assertSearchResponse(response).     Terms tags = response.getAggregations().get("tags").     assertThat(tags, notNullValue()).     assertThat(tags.getName(), equalTo("tags")).     assertThat(tags.getBuckets().size(), equalTo(2)).     Iterator<? extends Terms.Bucket> iters = tags.getBuckets().iterator().     // the max for "1" is 2     // the max for "0" is 4     Terms.Bucket tag = iters.next().     assertThat(tag, notNullValue()).     assertThat(key(tag), equalTo(asc ? "1" : "0")).     assertThat(tag.getDocCount(), equalTo(asc ? 3L : 2L)).     Filter filter1 = tag.getAggregations().get("filter1").     assertThat(filter1, notNullValue()).     assertThat(filter1.getDocCount(), equalTo(asc ? 3L : 2L)).     Filter filter2 = filter1.getAggregations().get("filter2").     assertThat(filter2, notNullValue()).     assertThat(filter2.getDocCount(), equalTo(asc ? 3L : 2L)).     Max max = filter2.getAggregations().get("max").     assertThat(max, notNullValue()).     assertThat(max.getValue(), equalTo(asc ? 2.0 : 4.0)).     tag = iters.next().     assertThat(tag, notNullValue()).     assertThat(key(tag), equalTo(asc ? "0" : "1")).     assertThat(tag.getDocCount(), equalTo(asc ? 2L : 3L)).     filter1 = tag.getAggregations().get("filter1").     assertThat(filter1, notNullValue()).     assertThat(filter1.getDocCount(), equalTo(asc ? 2L : 3L)).     filter2 = filter1.getAggregations().get("filter2").     assertThat(filter2, notNullValue()).     assertThat(filter2.getDocCount(), equalTo(asc ? 2L : 3L)).     max = filter2.getAggregations().get("max").     assertThat(max, notNullValue()).     assertThat(max.getValue(), equalTo(asc ? 4.0 : 2.0)). }
false;public;0;15;;public void testSingleValuedFieldOrderedByMissingSubAggregation() throws Exception {     for (String index : Arrays.asList("idx", "idx_unmapped")) {         try {             client().prepareSearch(index).addAggregation(terms("terms").field(SINGLE_VALUED_FIELD_NAME).collectMode(randomFrom(SubAggCollectionMode.values())).order(BucketOrder.aggregation("avg_i", true))).get().             fail("Expected search to fail when trying to sort terms aggregation by sug-aggregation that doesn't exist").         } catch (ElasticsearchException e) {         // expected         }     } }
false;public;0;20;;public void testSingleValuedFieldOrderedByNonMetricsOrMultiBucketSubAggregation() throws Exception {     for (String index : Arrays.asList("idx", "idx_unmapped")) {         try {             client().prepareSearch(index).addAggregation(terms("terms").field(SINGLE_VALUED_FIELD_NAME).collectMode(randomFrom(SubAggCollectionMode.values())).order(BucketOrder.aggregation("num_tags", true)).subAggregation(terms("num_tags").field("num_tags").collectMode(randomFrom(SubAggCollectionMode.values())))).get().             fail("Expected search to fail when trying to sort terms aggregation by sug-aggregation which is not of a metrics type").         } catch (ElasticsearchException e) {         // expected         }     } }
false;public;0;17;;public void testSingleValuedFieldOrderedByMultiValuedSubAggregationWithUnknownMetric() throws Exception {     for (String index : Arrays.asList("idx", "idx_unmapped")) {         try {             client().prepareSearch(index).addAggregation(terms("terms").field(SINGLE_VALUED_FIELD_NAME + "2").collectMode(randomFrom(SubAggCollectionMode.values())).order(BucketOrder.aggregation("stats.foo", true)).subAggregation(stats("stats").field(SINGLE_VALUED_FIELD_NAME))).get().             fail("Expected search to fail when trying to sort terms aggregation by multi-valued sug-aggregation " + "with an unknown specified metric to order by").         } catch (ElasticsearchException e) {         // expected         }     } }
false;public;0;17;;public void testSingleValuedFieldOrderedByMultiValuedSubAggregationWithoutMetric() throws Exception {     for (String index : Arrays.asList("idx", "idx_unmapped")) {         try {             client().prepareSearch(index).addAggregation(terms("terms").field(SINGLE_VALUED_FIELD_NAME).collectMode(randomFrom(SubAggCollectionMode.values())).order(BucketOrder.aggregation("stats", true)).subAggregation(stats("stats").field(SINGLE_VALUED_FIELD_NAME))).get().             fail("Expected search to fail when trying to sort terms aggregation by multi-valued sug-aggregation " + "where the metric name is not specified").         } catch (ElasticsearchException e) {         // expected         }     } }
false;public;0;27;;public void testSingleValuedFieldOrderedByMultiValueSubAggregationAsc() throws Exception {     boolean asc = true.     SearchResponse response = client().prepareSearch("idx").addAggregation(terms("terms").field(SINGLE_VALUED_FIELD_NAME).collectMode(randomFrom(SubAggCollectionMode.values())).order(BucketOrder.aggregation("stats.avg", asc)).subAggregation(stats("stats").field(SINGLE_VALUED_FIELD_NAME))).get().     assertSearchResponse(response).     Terms terms = response.getAggregations().get("terms").     assertThat(terms, notNullValue()).     assertThat(terms.getName(), equalTo("terms")).     assertThat(terms.getBuckets().size(), equalTo(5)).     for (int i = 0. i < 5. i++) {         Terms.Bucket bucket = terms.getBucketByKey("" + (double) i).         assertThat(bucket, notNullValue()).         assertThat(key(bucket), equalTo("" + (double) i)).         assertThat(bucket.getDocCount(), equalTo(1L)).         Stats stats = bucket.getAggregations().get("stats").         assertThat(stats, notNullValue()).         assertThat(stats.getMax(), equalTo((double) i)).     } }
false;public;0;27;;public void testSingleValuedFieldOrderedByMultiValueSubAggregationDesc() throws Exception {     boolean asc = false.     SearchResponse response = client().prepareSearch("idx").addAggregation(terms("terms").field(SINGLE_VALUED_FIELD_NAME).collectMode(randomFrom(SubAggCollectionMode.values())).order(BucketOrder.aggregation("stats.avg", asc)).subAggregation(stats("stats").field(SINGLE_VALUED_FIELD_NAME))).get().     assertSearchResponse(response).     Terms terms = response.getAggregations().get("terms").     assertThat(terms, notNullValue()).     assertThat(terms.getName(), equalTo("terms")).     assertThat(terms.getBuckets().size(), equalTo(5)).     for (int i = 4. i >= 0. i--) {         Terms.Bucket bucket = terms.getBucketByKey("" + (double) i).         assertThat(bucket, notNullValue()).         assertThat(key(bucket), equalTo("" + (double) i)).         assertThat(bucket.getDocCount(), equalTo(1L)).         Stats stats = bucket.getAggregations().get("stats").         assertThat(stats, notNullValue()).         assertThat(stats.getMax(), equalTo((double) i)).     } }
false;public;0;28;;public void testSingleValuedFieldOrderedByMultiValueExtendedStatsAsc() throws Exception {     boolean asc = true.     SearchResponse response = client().prepareSearch("idx").addAggregation(terms("terms").field(SINGLE_VALUED_FIELD_NAME).collectMode(randomFrom(SubAggCollectionMode.values())).order(BucketOrder.aggregation("stats.variance", asc)).subAggregation(extendedStats("stats").field(SINGLE_VALUED_FIELD_NAME))).get().     assertSearchResponse(response).     Terms terms = response.getAggregations().get("terms").     assertThat(terms, notNullValue()).     assertThat(terms.getName(), equalTo("terms")).     assertThat(terms.getBuckets().size(), equalTo(5)).     for (int i = 0. i < 5. i++) {         Terms.Bucket bucket = terms.getBucketByKey("" + (double) i).         assertThat(bucket, notNullValue()).         assertThat(key(bucket), equalTo("" + (double) i)).         assertThat(bucket.getDocCount(), equalTo(1L)).         ExtendedStats stats = bucket.getAggregations().get("stats").         assertThat(stats, notNullValue()).         assertThat(stats.getMax(), equalTo((double) i)).     } }
false;public;0;31;;public void testScriptScore() {     Script scoringScript = new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, "doc['" + SINGLE_VALUED_FIELD_NAME + "'].value", Collections.emptyMap()).     Script aggregationScript = new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, "ceil(_score.doubleValue()/3)", Collections.emptyMap()).     SearchResponse response = client().prepareSearch("idx").setQuery(functionScoreQuery(scriptFunction(scoringScript))).addAggregation(terms("terms").collectMode(randomFrom(SubAggCollectionMode.values())).script(aggregationScript)).get().     assertSearchResponse(response).     Terms terms = response.getAggregations().get("terms").     assertThat(terms, notNullValue()).     assertThat(terms.getName(), equalTo("terms")).     assertThat(terms.getBuckets().size(), equalTo(3)).     for (int i = 0. i < 3. i++) {         Terms.Bucket bucket = terms.getBucketByKey("" + (double) i).         assertThat(bucket, notNullValue()).         assertThat(key(bucket), equalTo("" + (double) i)).         assertThat(bucket.getKeyAsNumber().intValue(), equalTo(i)).         assertThat(bucket.getDocCount(), equalTo(i == 1 ? 3L : 1L)).     } }
false;public;0;4;;public void testSingleValuedFieldOrderedBySingleValueSubAggregationAscAndTermsDesc() throws Exception {     double[] expectedKeys = new double[] { 1, 2, 4, 3, 7, 6, 5 }.     assertMultiSortResponse(expectedKeys, BucketOrder.aggregation("avg_l", true), BucketOrder.key(false)). }
false;public;0;4;;public void testSingleValuedFieldOrderedBySingleValueSubAggregationAscAndTermsAsc() throws Exception {     double[] expectedKeys = new double[] { 1, 2, 3, 4, 5, 6, 7 }.     assertMultiSortResponse(expectedKeys, BucketOrder.aggregation("avg_l", true), BucketOrder.key(true)). }
false;public;0;4;;public void testSingleValuedFieldOrderedBySingleValueSubAggregationDescAndTermsAsc() throws Exception {     double[] expectedKeys = new double[] { 5, 6, 7, 3, 4, 2, 1 }.     assertMultiSortResponse(expectedKeys, BucketOrder.aggregation("avg_l", false), BucketOrder.key(true)). }
false;public;0;4;;public void testSingleValuedFieldOrderedByCountAscAndSingleValueSubAggregationAsc() throws Exception {     double[] expectedKeys = new double[] { 6, 7, 3, 4, 5, 1, 2 }.     assertMultiSortResponse(expectedKeys, BucketOrder.count(true), BucketOrder.aggregation("avg_l", true)). }
false;public;0;4;;public void testSingleValuedFieldOrderedBySingleValueSubAggregationAscSingleValueSubAggregationAsc() throws Exception {     double[] expectedKeys = new double[] { 6, 7, 3, 5, 4, 1, 2 }.     assertMultiSortResponse(expectedKeys, BucketOrder.aggregation("sum_d", true), BucketOrder.aggregation("avg_l", true)). }
false;public;0;6;;public void testSingleValuedFieldOrderedByThreeCriteria() throws Exception {     double[] expectedKeys = new double[] { 2, 1, 4, 5, 3, 6, 7 }.     assertMultiSortResponse(expectedKeys, BucketOrder.count(false), BucketOrder.aggregation("sum_d", false), BucketOrder.aggregation("avg_l", false)). }
false;public;0;4;;public void testSingleValuedFieldOrderedBySingleValueSubAggregationAscAsCompound() throws Exception {     double[] expectedKeys = new double[] { 1, 2, 3, 4, 5, 6, 7 }.     assertMultiSortResponse(expectedKeys, BucketOrder.aggregation("avg_l", true)). }
false;private;2;30;;private void assertMultiSortResponse(double[] expectedKeys, BucketOrder... order) {     SearchResponse response = client().prepareSearch("sort_idx").setTypes("multi_sort_type").addAggregation(terms("terms").field(SINGLE_VALUED_FIELD_NAME).collectMode(randomFrom(SubAggCollectionMode.values())).order(BucketOrder.compound(order)).subAggregation(avg("avg_l").field("l")).subAggregation(sum("sum_d").field("d"))).get().     assertSearchResponse(response).     Terms terms = response.getAggregations().get("terms").     assertThat(terms, notNullValue()).     assertThat(terms.getName(), equalTo("terms")).     assertThat(terms.getBuckets().size(), equalTo(expectedKeys.length)).     int i = 0.     for (Terms.Bucket bucket : terms.getBuckets()) {         assertThat(bucket, notNullValue()).         assertThat(key(bucket), equalTo(String.valueOf(expectedKeys[i]))).         assertThat(bucket.getDocCount(), equalTo(expectedMultiSortBuckets.get(expectedKeys[i]).get("_count"))).         Avg avg = bucket.getAggregations().get("avg_l").         assertThat(avg, notNullValue()).         assertThat(avg.getValue(), equalTo(expectedMultiSortBuckets.get(expectedKeys[i]).get("avg_l"))).         Sum sum = bucket.getAggregations().get("sum_d").         assertThat(sum, notNullValue()).         assertThat(sum.getValue(), equalTo(expectedMultiSortBuckets.get(expectedKeys[i]).get("sum_d"))).         i++.     } }
false;public;0;3;;public void testOtherDocCount() {     testOtherDocCount(SINGLE_VALUED_FIELD_NAME, MULTI_VALUED_FIELD_NAME). }
true;public;0;34;/**  * Make sure that a request using a script does not get cached and a request  * not using a script does get cached.  */ ;/**  * Make sure that a request using a script does not get cached and a request  * not using a script does get cached.  */ public void testDontCacheScripts() throws Exception {     assertAcked(prepareCreate("cache_test_idx").addMapping("type", "d", "type=float").setSettings(Settings.builder().put("requests.cache.enable", true).put("number_of_shards", 1).put("number_of_replicas", 1)).get()).     indexRandom(true, client().prepareIndex("cache_test_idx", "type", "1").setSource("s", 1.5), client().prepareIndex("cache_test_idx", "type", "2").setSource("s", 2.5)).     // Make sure we are starting with a clear cache     assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache().getHitCount(), equalTo(0L)).     assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache().getMissCount(), equalTo(0L)).     // Test that a request using a script does not get cached     SearchResponse r = client().prepareSearch("cache_test_idx").setSize(0).addAggregation(terms("terms").field("d").script(new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, "_value + 1", Collections.emptyMap()))).get().     assertSearchResponse(r).     assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache().getHitCount(), equalTo(0L)).     assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache().getMissCount(), equalTo(0L)).     // To make sure that the cache is working test that a request not using     // a script is cached     r = client().prepareSearch("cache_test_idx").setSize(0).addAggregation(terms("terms").field("d")).get().     assertSearchResponse(r).     assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache().getHitCount(), equalTo(0L)).     assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache().getMissCount(), equalTo(1L)). }
