commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected FieldCapabilitiesResponse doParseInstance(XContentParser parser) throws IOException {     return FieldCapabilitiesResponse.fromXContent(parser). }
false;protected;0;4;;@Override protected FieldCapabilitiesResponse createBlankInstance() {     return new FieldCapabilitiesResponse(). }
false;protected;0;30;;@Override protected FieldCapabilitiesResponse createTestInstance() {     if (randomBoolean()) {         // merged responses         Map<String, Map<String, FieldCapabilities>> responses = new HashMap<>().         String[] fields = generateRandomStringArray(5, 10, false, true).         assertNotNull(fields).         for (String field : fields) {             Map<String, FieldCapabilities> typesToCapabilities = new HashMap<>().             String[] types = generateRandomStringArray(5, 10, false, false).             assertNotNull(types).             for (String type : types) {                 typesToCapabilities.put(type, FieldCapabilitiesTests.randomFieldCaps(field)).             }             responses.put(field, typesToCapabilities).         }         return new FieldCapabilitiesResponse(responses).     } else {         // non-merged responses         List<FieldCapabilitiesIndexResponse> responses = new ArrayList<>().         int numResponse = randomIntBetween(0, 10).         for (int i = 0. i < numResponse. i++) {             responses.add(createRandomIndexResponse()).         }         return new FieldCapabilitiesResponse(responses).     } }
false;private;0;11;;private FieldCapabilitiesIndexResponse createRandomIndexResponse() {     Map<String, FieldCapabilities> responses = new HashMap<>().     String[] fields = generateRandomStringArray(5, 10, false, true).     assertNotNull(fields).     for (String field : fields) {         responses.put(field, FieldCapabilitiesTests.randomFieldCaps(field)).     }     return new FieldCapabilitiesIndexResponse(randomAsciiLettersOfLength(10), responses). }
false;protected;1;26;;@Override protected FieldCapabilitiesResponse mutateInstance(FieldCapabilitiesResponse response) {     Map<String, Map<String, FieldCapabilities>> mutatedResponses = new HashMap<>(response.get()).     int mutation = response.get().isEmpty() ? 0 : randomIntBetween(0, 2).     switch(mutation) {         case 0:             String toAdd = randomAlphaOfLength(10).             mutatedResponses.put(toAdd, Collections.singletonMap(randomAlphaOfLength(10), FieldCapabilitiesTests.randomFieldCaps(toAdd))).             break.         case 1:             String toRemove = randomFrom(mutatedResponses.keySet()).             mutatedResponses.remove(toRemove).             break.         case 2:             String toReplace = randomFrom(mutatedResponses.keySet()).             mutatedResponses.put(toReplace, Collections.singletonMap(randomAlphaOfLength(10), FieldCapabilitiesTests.randomFieldCaps(toReplace))).             break.     }     return new FieldCapabilitiesResponse(mutatedResponses). }
false;protected;0;7;;@Override protected Predicate<String> getRandomFieldsExcludeFilter() {     // maps only contain type names.     return field -> field.matches("fields(\\.\\w+)?"). }
false;public;0;36;;public void testToXContent() throws IOException {     FieldCapabilitiesResponse response = createSimpleResponse().     XContentBuilder builder = XContentFactory.contentBuilder(XContentType.JSON).     response.toXContent(builder, ToXContent.EMPTY_PARAMS).     String generatedResponse = BytesReference.bytes(builder).utf8ToString().     assertEquals(("{" + "    \"fields\": {" + "        \"rating\": { " + "            \"keyword\": {" + "                \"type\": \"keyword\"," + "                \"searchable\": false," + "                \"aggregatable\": true," + "                \"indices\": [\"index3\", \"index4\"]," + "                \"non_searchable_indices\": [\"index4\"] " + "            }," + "            \"long\": {" + "                \"type\": \"long\"," + "                \"searchable\": true," + "                \"aggregatable\": false," + "                \"indices\": [\"index1\", \"index2\"]," + "                \"non_aggregatable_indices\": [\"index1\"] " + "            }" + "        }," + "        \"title\": { " + "            \"text\": {" + "                \"type\": \"text\"," + "                \"searchable\": true," + "                \"aggregatable\": false" + "            }" + "        }" + "    }" + "}").replaceAll("\\s+", ""), generatedResponse). }
false;public;0;4;;public void testEmptyResponse() throws IOException {     FieldCapabilitiesResponse testInstance = new FieldCapabilitiesResponse().     assertSerialization(testInstance). }
false;private,static;0;21;;private static FieldCapabilitiesResponse createSimpleResponse() {     Map<String, FieldCapabilities> titleCapabilities = new HashMap<>().     titleCapabilities.put("text", new FieldCapabilities("title", "text", true, false)).     Map<String, FieldCapabilities> ratingCapabilities = new HashMap<>().     ratingCapabilities.put("long", new FieldCapabilities("rating", "long", true, false, new String[] { "index1", "index2" }, null, new String[] { "index1" })).     ratingCapabilities.put("keyword", new FieldCapabilities("rating", "keyword", false, true, new String[] { "index3", "index4" }, new String[] { "index4" }, null)).     Map<String, Map<String, FieldCapabilities>> responses = new HashMap<>().     responses.put("title", titleCapabilities).     responses.put("rating", ratingCapabilities).     return new FieldCapabilitiesResponse(responses). }
