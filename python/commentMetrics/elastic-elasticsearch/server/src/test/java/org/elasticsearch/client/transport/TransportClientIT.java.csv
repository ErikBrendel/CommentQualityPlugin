commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;public void testPickingUpChangesInDiscoveryNode() {     String nodeName = internalCluster().startNode(Settings.builder().put(Node.NODE_DATA_SETTING.getKey(), false)).     TransportClient client = (TransportClient) internalCluster().client(nodeName).     assertThat(client.connectedNodes().get(0).isDataNode(), equalTo(false)). }
false;public;0;31;;public void testNodeVersionIsUpdated() throws IOException, NodeValidationException {     TransportClient client = (TransportClient) internalCluster().client().     try (Node node = new MockNode(Settings.builder().put(internalCluster().getDefaultSettings()).put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()).put("node.name", "testNodeVersionIsUpdated").put("transport.type", getTestTransportType()).put(Node.NODE_DATA_SETTING.getKey(), false).put("cluster.name", "foobar").putList(ClusterBootstrapService.INITIAL_MASTER_NODES_SETTING.getKey(), "testNodeVersionIsUpdated").build(), Arrays.asList(getTestTransportPlugin(), MockHttpTransport.TestPlugin.class)).start()) {         TransportAddress transportAddress = node.injector().getInstance(TransportService.class).boundAddress().publishAddress().         client.addTransportAddress(transportAddress).         // since we force transport clients there has to be one node started that we connect to.         assertThat(client.connectedNodes().size(), greaterThanOrEqualTo(1)).         // connected nodes have updated version         for (DiscoveryNode discoveryNode : client.connectedNodes()) {             assertThat(discoveryNode.getVersion(), equalTo(Version.CURRENT)).         }         for (DiscoveryNode discoveryNode : client.listedNodes()) {             assertThat(discoveryNode.getId(), startsWith("#transport#-")).             assertThat(discoveryNode.getVersion(), equalTo(Version.CURRENT.minimumCompatibilityVersion())).         }         assertThat(client.filteredNodes().size(), equalTo(1)).         for (DiscoveryNode discoveryNode : client.filteredNodes()) {             assertThat(discoveryNode.getVersion(), equalTo(Version.CURRENT.minimumCompatibilityVersion())).         }     } }
false;public;0;5;;public void testThatTransportClientSettingIsSet() {     TransportClient client = (TransportClient) internalCluster().client().     Settings settings = client.injector.getInstance(Settings.class).     assertThat(Client.CLIENT_TYPE_SETTING_S.get(settings), is("transport")). }
false;public;0;11;;public void testThatTransportClientSettingCannotBeChanged() {     String transport = getTestTransportType().     Settings baseSettings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()).put(NetworkModule.TRANSPORT_TYPE_SETTING.getKey(), transport).build().     try (TransportClient client = new MockTransportClient(baseSettings)) {         Settings settings = client.injector.getInstance(Settings.class).         assertThat(Client.CLIENT_TYPE_SETTING_S.get(settings), is("transport")).     } }
