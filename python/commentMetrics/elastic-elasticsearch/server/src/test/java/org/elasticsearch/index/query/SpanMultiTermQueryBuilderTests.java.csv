commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;19;;@Override protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {     XContentBuilder mapping = jsonBuilder().startObject().startObject("_doc").startObject("properties").startObject("prefix_field").field("type", "text").startObject("index_prefixes").endObject().endObject().startObject("prefix_field_alias").field("type", "alias").field("path", "prefix_field").endObject().startObject("body").field("type", "text").endObject().endObject().endObject().endObject().     mapperService.merge("_doc", new CompressedXContent(Strings.toString(mapping)), MapperService.MergeReason.MAPPING_UPDATE). }
false;protected;0;5;;@Override protected SpanMultiTermQueryBuilder doCreateTestQueryBuilder() {     MultiTermQueryBuilder multiTermQueryBuilder = RandomQueryBuilder.createMultiTermQuery(random()).     return new SpanMultiTermQueryBuilder(multiTermQueryBuilder). }
false;protected;3;26;;@Override protected void doAssertLuceneQuery(SpanMultiTermQueryBuilder queryBuilder, Query query, SearchContext context) throws IOException {     if (query instanceof SpanMatchNoDocsQuery) {         return.     }     assertThat(query, either(instanceOf(SpanMultiTermQueryWrapper.class)).or(instanceOf(FieldMaskingSpanQuery.class))).     if (query instanceof SpanMultiTermQueryWrapper) {         SpanMultiTermQueryWrapper wrapper = (SpanMultiTermQueryWrapper) query.         Query innerQuery = queryBuilder.innerQuery().toQuery(context.getQueryShardContext()).         if (queryBuilder.innerQuery().boost() != AbstractQueryBuilder.DEFAULT_BOOST) {             assertThat(innerQuery, instanceOf(BoostQuery.class)).             BoostQuery boostQuery = (BoostQuery) innerQuery.             innerQuery = boostQuery.getQuery().         }         assertThat(innerQuery, instanceOf(MultiTermQuery.class)).         MultiTermQuery multiQuery = (MultiTermQuery) innerQuery.         if (multiQuery.getRewriteMethod() instanceof TopTermsRewrite) {             assertThat(wrapper.getRewriteMethod(), instanceOf(SpanMultiTermQueryWrapper.TopTermsSpanBooleanQueryRewrite.class)).         } else {             assertThat(wrapper.getRewriteMethod(), instanceOf(SpanBooleanQueryRewriteWithMaxClause.class)).         }     } else if (query instanceof FieldMaskingSpanQuery) {         FieldMaskingSpanQuery mask = (FieldMaskingSpanQuery) query.         assertThat(mask.getMaskedQuery(), instanceOf(TermQuery.class)).     } }
false;public;0;3;;public void testIllegalArgument() {     expectThrows(IllegalArgumentException.class, () -> new SpanMultiTermQueryBuilder((MultiTermQueryBuilder) null)). }
false;public;1;4;;@Override public Query toQuery(QueryShardContext context) throws IOException {     return new TermQuery(new Term("foo", "bar")). }
false;public;1;4;;@Override public QueryBuilder queryName(String queryName) {     return this. }
false;public;0;4;;@Override public String queryName() {     return "foo". }
false;public;0;4;;@Override public float boost() {     return 1f. }
false;public;1;4;;@Override public QueryBuilder boost(float boost) {     return this. }
false;public;0;4;;@Override public String getName() {     return "foo". }
false;public;0;4;;@Override public String getWriteableName() {     return "foo". }
false;public;2;4;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     return builder. }
false;public;1;4;;@Override public void writeTo(StreamOutput out) throws IOException { }
false;public;0;4;;@Override public String fieldName() {     return "foo". }
true;public;0;7;/**  * test checks that we throw an {@link UnsupportedOperationException} if the query wrapped  * by {@link SpanMultiTermQueryBuilder} does not generate a lucene {@link MultiTermQuery}.  * This is currently the case for {@link RangeQueryBuilder} when the target field is mapped  * to a date.  */ ;/**  * test checks that we throw an {@link UnsupportedOperationException} if the query wrapped  * by {@link SpanMultiTermQueryBuilder} does not generate a lucene {@link MultiTermQuery}.  * This is currently the case for {@link RangeQueryBuilder} when the target field is mapped  * to a date.  */ public void testUnsupportedInnerQueryType() throws IOException {     MultiTermQueryBuilder query = new TermMultiTermQueryBuilder().     SpanMultiTermQueryBuilder spanMultiTermQuery = new SpanMultiTermQueryBuilder(query).     UnsupportedOperationException e = expectThrows(UnsupportedOperationException.class, () -> spanMultiTermQuery.toQuery(createShardContext())).     assertThat(e.getMessage(), startsWith("unsupported inner query")). }
false;public;0;5;;public void testToQueryInnerSpanMultiTerm() throws IOException {     Query query = new SpanOrQueryBuilder(createTestQueryBuilder()).toQuery(createShardContext()).     // verify that the result is still a span query, despite the boost that might get set (SpanBoostQuery rather than BoostQuery)     assertThat(query, instanceOf(SpanQuery.class)). }
false;public;0;38;;public void testToQueryInnerTermQuery() throws IOException {     String fieldName = randomFrom("prefix_field", "prefix_field_alias").     final QueryShardContext context = createShardContext().     {         Query query = new SpanMultiTermQueryBuilder(new PrefixQueryBuilder(fieldName, "foo")).toQuery(context).         if (context.getIndexSettings().getIndexVersionCreated().onOrAfter(Version.V_6_4_0)) {             assertThat(query, instanceOf(FieldMaskingSpanQuery.class)).             FieldMaskingSpanQuery fieldQuery = (FieldMaskingSpanQuery) query.             assertThat(fieldQuery.getMaskedQuery(), instanceOf(SpanTermQuery.class)).             assertThat(fieldQuery.getField(), equalTo("prefix_field")).             SpanTermQuery termQuery = (SpanTermQuery) fieldQuery.getMaskedQuery().             assertThat(termQuery.getTerm().field(), equalTo("prefix_field._index_prefix")).             assertThat(termQuery.getTerm().text(), equalTo("foo")).         } else {             assertThat(query, instanceOf(SpanMultiTermQueryWrapper.class)).             SpanMultiTermQueryWrapper wrapper = (SpanMultiTermQueryWrapper) query.             assertThat(wrapper.getWrappedQuery(), instanceOf(PrefixQuery.class)).             PrefixQuery prefixQuery = (PrefixQuery) wrapper.getWrappedQuery().             assertThat(prefixQuery.getField(), equalTo("prefix_field")).             assertThat(prefixQuery.getPrefix().text(), equalTo("foo")).         }     }     {         Query query = new SpanMultiTermQueryBuilder(new PrefixQueryBuilder(fieldName, "f")).toQuery(context).         assertThat(query, instanceOf(SpanMultiTermQueryWrapper.class)).         SpanMultiTermQueryWrapper wrapper = (SpanMultiTermQueryWrapper) query.         assertThat(wrapper.getWrappedQuery(), instanceOf(PrefixQuery.class)).         assertThat(wrapper.getField(), equalTo("prefix_field")).         PrefixQuery prefixQuery = (PrefixQuery) wrapper.getWrappedQuery().         assertThat(prefixQuery.getField(), equalTo("prefix_field")).         assertThat(prefixQuery.getPrefix().text(), equalTo("f")).         assertThat(wrapper.getRewriteMethod(), instanceOf(SpanBooleanQueryRewriteWithMaxClause.class)).         SpanBooleanQueryRewriteWithMaxClause rewrite = (SpanBooleanQueryRewriteWithMaxClause) wrapper.getRewriteMethod().         assertThat(rewrite.getMaxExpansions(), equalTo(BooleanQuery.getMaxClauseCount())).         assertTrue(rewrite.isHardLimit()).     } }
false;public;0;22;;public void testFromJson() throws IOException {     String json = "{\n" + "  \"span_multi\" : {\n" + "    \"match\" : {\n" + "      \"prefix\" : {\n" + "        \"user\" : {\n" + "          \"value\" : \"ki\",\n" + "          \"boost\" : 1.08\n" + "        }\n" + "      }\n" + "    },\n" + "    \"boost\" : 1.0\n" + "  }\n" + "}".     SpanMultiTermQueryBuilder parsed = (SpanMultiTermQueryBuilder) parseQuery(json).     checkGeneratedJson(json, parsed).     assertEquals(json, "ki", ((PrefixQueryBuilder) parsed.innerQuery()).value()).     assertEquals(json, 1.08, parsed.innerQuery().boost(), 0.0001). }
false;public;0;10;;public void testDefaultMaxRewriteBuilder() throws Exception {     Query query = QueryBuilders.spanMultiTermQueryBuilder(QueryBuilders.prefixQuery("body", "b")).toQuery(createShardContext()).     assertTrue(query instanceof SpanMultiTermQueryWrapper).     if (query instanceof SpanMultiTermQueryWrapper) {         MultiTermQuery.RewriteMethod rewriteMethod = ((SpanMultiTermQueryWrapper) query).getRewriteMethod().         assertTrue(rewriteMethod instanceof SpanBooleanQueryRewriteWithMaxClause).     } }
false;public;0;23;;public void testTermExpansionExceptionOnSpanFailure() throws Exception {     try (Directory directory = newDirectory()) {         try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory, new WhitespaceAnalyzer())) {             for (int i = 0. i < 3. i++) {                 iw.addDocument(singleton(new TextField("body", "foo bar" + Integer.toString(i), Field.Store.NO))).             }             try (IndexReader reader = iw.getReader()) {                 int origBoolMaxClauseCount = BooleanQuery.getMaxClauseCount().                 BooleanQuery.setMaxClauseCount(1).                 try {                     QueryBuilder queryBuilder = new SpanMultiTermQueryBuilder(QueryBuilders.prefixQuery("body", "bar")).                     Query query = queryBuilder.toQuery(createShardContext(reader)).                     RuntimeException exc = expectThrows(RuntimeException.class, () -> query.rewrite(reader)).                     assertThat(exc.getMessage(), containsString("maxClauseCount")).                 } finally {                     BooleanQuery.setMaxClauseCount(origBoolMaxClauseCount).                 }             }         }     } }
false;public;0;12;;public void testTopNMultiTermsRewriteInsideSpan() throws Exception {     Query query = QueryBuilders.spanMultiTermQueryBuilder(QueryBuilders.prefixQuery("body", "b").rewrite("top_terms_boost_2000")).toQuery(createShardContext()).     assertTrue(query instanceof SpanMultiTermQueryWrapper).     if (query instanceof SpanMultiTermQueryWrapper) {         MultiTermQuery.RewriteMethod rewriteMethod = ((SpanMultiTermQueryWrapper) query).getRewriteMethod().         assertFalse(rewriteMethod instanceof SpanBooleanQueryRewriteWithMaxClause).     } }
