# id;timestamp;commentText;codeText;commentWords;codeWords
SpanMultiTermQueryBuilderTests -> public void testUnsupportedInnerQueryType() throws IOException;1524684173;test checks that we throw an {@link UnsupportedOperationException} if the query wrapped_by {@link SpanMultiTermQueryBuilder} does not generate a lucene {@link MultiTermQuery}._This is currently the case for {@link RangeQueryBuilder} when the target field is mapped_to a date.;public void testUnsupportedInnerQueryType() throws IOException {_        MultiTermQueryBuilder query = new MultiTermQueryBuilder() {_            @Override_            public Query toQuery(QueryShardContext context) throws IOException {_                return new TermQuery(new Term("foo", "bar"))__            }__            @Override_            public Query toFilter(QueryShardContext context) throws IOException {_                return toQuery(context)__            }__            @Override_            public QueryBuilder queryName(String queryName) {_                return this__            }__            @Override_            public String queryName() {_                return "foo"__            }__            @Override_            public float boost() {_                return 1f__            }__            @Override_            public QueryBuilder boost(float boost) {_                return this__            }__            @Override_            public String getName() {_                return "foo"__            }__            @Override_            public String getWriteableName() {_                return "foo"__            }__            @Override_            public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {_                return builder__            }__            @Override_            public void writeTo(StreamOutput out) throws IOException {__            }_        }__        SpanMultiTermQueryBuilder spamMultiTermQuery = new SpanMultiTermQueryBuilder(query)__        UnsupportedOperationException e = expectThrows(UnsupportedOperationException.class,_                () -> spamMultiTermQuery.toQuery(createShardContext()))__        assertThat(e.getMessage(), containsString("unsupported inner query, should be " + MultiTermQuery.class.getName()))__    };test,checks,that,we,throw,an,link,unsupported,operation,exception,if,the,query,wrapped,by,link,span,multi,term,query,builder,does,not,generate,a,lucene,link,multi,term,query,this,is,currently,the,case,for,link,range,query,builder,when,the,target,field,is,mapped,to,a,date;public,void,test,unsupported,inner,query,type,throws,ioexception,multi,term,query,builder,query,new,multi,term,query,builder,override,public,query,to,query,query,shard,context,context,throws,ioexception,return,new,term,query,new,term,foo,bar,override,public,query,to,filter,query,shard,context,context,throws,ioexception,return,to,query,context,override,public,query,builder,query,name,string,query,name,return,this,override,public,string,query,name,return,foo,override,public,float,boost,return,1f,override,public,query,builder,boost,float,boost,return,this,override,public,string,get,name,return,foo,override,public,string,get,writeable,name,return,foo,override,public,xcontent,builder,to,xcontent,xcontent,builder,builder,params,params,throws,ioexception,return,builder,override,public,void,write,to,stream,output,out,throws,ioexception,span,multi,term,query,builder,spam,multi,term,query,new,span,multi,term,query,builder,query,unsupported,operation,exception,e,expect,throws,unsupported,operation,exception,class,spam,multi,term,query,to,query,create,shard,context,assert,that,e,get,message,contains,string,unsupported,inner,query,should,be,multi,term,query,class,get,name
SpanMultiTermQueryBuilderTests -> public void testUnsupportedInnerQueryType() throws IOException;1528167589;test checks that we throw an {@link UnsupportedOperationException} if the query wrapped_by {@link SpanMultiTermQueryBuilder} does not generate a lucene {@link MultiTermQuery}._This is currently the case for {@link RangeQueryBuilder} when the target field is mapped_to a date.;public void testUnsupportedInnerQueryType() throws IOException {_        MultiTermQueryBuilder query = new TermMultiTermQueryBuilder()__        SpanMultiTermQueryBuilder spamMultiTermQuery = new SpanMultiTermQueryBuilder(query)__        UnsupportedOperationException e = expectThrows(UnsupportedOperationException.class,_                () -> spamMultiTermQuery.toQuery(createShardContext()))__        assertThat(e.getMessage(), containsString("unsupported inner query generated by " + TermMultiTermQueryBuilder.class.getName() +_            ", should be " + MultiTermQuery.class.getName()))__    };test,checks,that,we,throw,an,link,unsupported,operation,exception,if,the,query,wrapped,by,link,span,multi,term,query,builder,does,not,generate,a,lucene,link,multi,term,query,this,is,currently,the,case,for,link,range,query,builder,when,the,target,field,is,mapped,to,a,date;public,void,test,unsupported,inner,query,type,throws,ioexception,multi,term,query,builder,query,new,term,multi,term,query,builder,span,multi,term,query,builder,spam,multi,term,query,new,span,multi,term,query,builder,query,unsupported,operation,exception,e,expect,throws,unsupported,operation,exception,class,spam,multi,term,query,to,query,create,shard,context,assert,that,e,get,message,contains,string,unsupported,inner,query,generated,by,term,multi,term,query,builder,class,get,name,should,be,multi,term,query,class,get,name
SpanMultiTermQueryBuilderTests -> public void testUnsupportedInnerQueryType() throws IOException;1528706846;test checks that we throw an {@link UnsupportedOperationException} if the query wrapped_by {@link SpanMultiTermQueryBuilder} does not generate a lucene {@link MultiTermQuery}._This is currently the case for {@link RangeQueryBuilder} when the target field is mapped_to a date.;public void testUnsupportedInnerQueryType() throws IOException {_        MultiTermQueryBuilder query = new TermMultiTermQueryBuilder()__        SpanMultiTermQueryBuilder spamMultiTermQuery = new SpanMultiTermQueryBuilder(query)__        UnsupportedOperationException e = expectThrows(UnsupportedOperationException.class,_                () -> spamMultiTermQuery.toQuery(createShardContext()))__        assertThat(e.getMessage(), containsString("unsupported inner query generated by " + TermMultiTermQueryBuilder.class.getName() +_            ", should be " + MultiTermQuery.class.getName()))__    };test,checks,that,we,throw,an,link,unsupported,operation,exception,if,the,query,wrapped,by,link,span,multi,term,query,builder,does,not,generate,a,lucene,link,multi,term,query,this,is,currently,the,case,for,link,range,query,builder,when,the,target,field,is,mapped,to,a,date;public,void,test,unsupported,inner,query,type,throws,ioexception,multi,term,query,builder,query,new,term,multi,term,query,builder,span,multi,term,query,builder,spam,multi,term,query,new,span,multi,term,query,builder,query,unsupported,operation,exception,e,expect,throws,unsupported,operation,exception,class,spam,multi,term,query,to,query,create,shard,context,assert,that,e,get,message,contains,string,unsupported,inner,query,generated,by,term,multi,term,query,builder,class,get,name,should,be,multi,term,query,class,get,name
SpanMultiTermQueryBuilderTests -> public void testUnsupportedInnerQueryType() throws IOException;1531937412;test checks that we throw an {@link UnsupportedOperationException} if the query wrapped_by {@link SpanMultiTermQueryBuilder} does not generate a lucene {@link MultiTermQuery}._This is currently the case for {@link RangeQueryBuilder} when the target field is mapped_to a date.;public void testUnsupportedInnerQueryType() throws IOException {_        MultiTermQueryBuilder query = new TermMultiTermQueryBuilder()__        SpanMultiTermQueryBuilder spamMultiTermQuery = new SpanMultiTermQueryBuilder(query)__        UnsupportedOperationException e = expectThrows(UnsupportedOperationException.class,_                () -> spamMultiTermQuery.toQuery(createShardContext()))__        assertThat(e.getMessage(), containsString("unsupported inner query generated by " + TermMultiTermQueryBuilder.class.getName() +_            ", should be " + MultiTermQuery.class.getName()))__    };test,checks,that,we,throw,an,link,unsupported,operation,exception,if,the,query,wrapped,by,link,span,multi,term,query,builder,does,not,generate,a,lucene,link,multi,term,query,this,is,currently,the,case,for,link,range,query,builder,when,the,target,field,is,mapped,to,a,date;public,void,test,unsupported,inner,query,type,throws,ioexception,multi,term,query,builder,query,new,term,multi,term,query,builder,span,multi,term,query,builder,spam,multi,term,query,new,span,multi,term,query,builder,query,unsupported,operation,exception,e,expect,throws,unsupported,operation,exception,class,spam,multi,term,query,to,query,create,shard,context,assert,that,e,get,message,contains,string,unsupported,inner,query,generated,by,term,multi,term,query,builder,class,get,name,should,be,multi,term,query,class,get,name
SpanMultiTermQueryBuilderTests -> public void testUnsupportedInnerQueryType() throws IOException;1538067637;test checks that we throw an {@link UnsupportedOperationException} if the query wrapped_by {@link SpanMultiTermQueryBuilder} does not generate a lucene {@link MultiTermQuery}._This is currently the case for {@link RangeQueryBuilder} when the target field is mapped_to a date.;public void testUnsupportedInnerQueryType() throws IOException {_        MultiTermQueryBuilder query = new TermMultiTermQueryBuilder()__        SpanMultiTermQueryBuilder spamMultiTermQuery = new SpanMultiTermQueryBuilder(query)__        UnsupportedOperationException e = expectThrows(UnsupportedOperationException.class,_                () -> spamMultiTermQuery.toQuery(createShardContext()))__        assertThat(e.getMessage(), containsString("unsupported inner query generated by " + TermMultiTermQueryBuilder.class.getName() +_            ", should be " + MultiTermQuery.class.getName()))__    };test,checks,that,we,throw,an,link,unsupported,operation,exception,if,the,query,wrapped,by,link,span,multi,term,query,builder,does,not,generate,a,lucene,link,multi,term,query,this,is,currently,the,case,for,link,range,query,builder,when,the,target,field,is,mapped,to,a,date;public,void,test,unsupported,inner,query,type,throws,ioexception,multi,term,query,builder,query,new,term,multi,term,query,builder,span,multi,term,query,builder,spam,multi,term,query,new,span,multi,term,query,builder,query,unsupported,operation,exception,e,expect,throws,unsupported,operation,exception,class,spam,multi,term,query,to,query,create,shard,context,assert,that,e,get,message,contains,string,unsupported,inner,query,generated,by,term,multi,term,query,builder,class,get,name,should,be,multi,term,query,class,get,name
SpanMultiTermQueryBuilderTests -> public void testUnsupportedInnerQueryType() throws IOException;1543834151;test checks that we throw an {@link UnsupportedOperationException} if the query wrapped_by {@link SpanMultiTermQueryBuilder} does not generate a lucene {@link MultiTermQuery}._This is currently the case for {@link RangeQueryBuilder} when the target field is mapped_to a date.;public void testUnsupportedInnerQueryType() throws IOException {_        MultiTermQueryBuilder query = new TermMultiTermQueryBuilder()__        SpanMultiTermQueryBuilder spamMultiTermQuery = new SpanMultiTermQueryBuilder(query)__        UnsupportedOperationException e = expectThrows(UnsupportedOperationException.class,_                () -> spamMultiTermQuery.toQuery(createShardContext()))__        assertThat(e.getMessage(), containsString("unsupported inner query generated by " + TermMultiTermQueryBuilder.class.getName() +_            ", should be " + MultiTermQuery.class.getName()))__    };test,checks,that,we,throw,an,link,unsupported,operation,exception,if,the,query,wrapped,by,link,span,multi,term,query,builder,does,not,generate,a,lucene,link,multi,term,query,this,is,currently,the,case,for,link,range,query,builder,when,the,target,field,is,mapped,to,a,date;public,void,test,unsupported,inner,query,type,throws,ioexception,multi,term,query,builder,query,new,term,multi,term,query,builder,span,multi,term,query,builder,spam,multi,term,query,new,span,multi,term,query,builder,query,unsupported,operation,exception,e,expect,throws,unsupported,operation,exception,class,spam,multi,term,query,to,query,create,shard,context,assert,that,e,get,message,contains,string,unsupported,inner,query,generated,by,term,multi,term,query,builder,class,get,name,should,be,multi,term,query,class,get,name
SpanMultiTermQueryBuilderTests -> public void testUnsupportedInnerQueryType() throws IOException;1547734228;test checks that we throw an {@link UnsupportedOperationException} if the query wrapped_by {@link SpanMultiTermQueryBuilder} does not generate a lucene {@link MultiTermQuery}._This is currently the case for {@link RangeQueryBuilder} when the target field is mapped_to a date.;public void testUnsupportedInnerQueryType() throws IOException {_        MultiTermQueryBuilder query = new TermMultiTermQueryBuilder()__        SpanMultiTermQueryBuilder spanMultiTermQuery = new SpanMultiTermQueryBuilder(query)__        UnsupportedOperationException e = expectThrows(UnsupportedOperationException.class,_                () -> spanMultiTermQuery.toQuery(createShardContext()))__        assertThat(e.getMessage(), startsWith("unsupported inner query"))__    };test,checks,that,we,throw,an,link,unsupported,operation,exception,if,the,query,wrapped,by,link,span,multi,term,query,builder,does,not,generate,a,lucene,link,multi,term,query,this,is,currently,the,case,for,link,range,query,builder,when,the,target,field,is,mapped,to,a,date;public,void,test,unsupported,inner,query,type,throws,ioexception,multi,term,query,builder,query,new,term,multi,term,query,builder,span,multi,term,query,builder,span,multi,term,query,new,span,multi,term,query,builder,query,unsupported,operation,exception,e,expect,throws,unsupported,operation,exception,class,span,multi,term,query,to,query,create,shard,context,assert,that,e,get,message,starts,with,unsupported,inner,query
