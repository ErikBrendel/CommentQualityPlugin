commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;public void testNoDocs() throws IOException {     testCase(new MatchAllDocsQuery(), iw -> {     // Intentionally not writing any docs     }, hdr -> {         assertEquals(0L, hdr.state.getTotalCount()).         assertFalse(AggregationInspectionHelper.hasValue(hdr)).     }). }
false;public;0;9;;public void testNoMatchingField() throws IOException {     testCase(new MatchAllDocsQuery(), iw -> {         iw.addDocument(singleton(new SortedNumericDocValuesField("wrong_number", 7))).         iw.addDocument(singleton(new SortedNumericDocValuesField("wrong_number", 1))).     }, hdr -> {         assertEquals(0L, hdr.state.getTotalCount()).         assertFalse(AggregationInspectionHelper.hasValue(hdr)).     }). }
false;public;0;16;;public void testSomeMatchesSortedNumericDocValues() throws IOException {     testCase(new DocValuesFieldExistsQuery("number"), iw -> {         iw.addDocument(singleton(new SortedNumericDocValuesField("number", 60))).         iw.addDocument(singleton(new SortedNumericDocValuesField("number", 40))).         iw.addDocument(singleton(new SortedNumericDocValuesField("number", 20))).         iw.addDocument(singleton(new SortedNumericDocValuesField("number", 10))).     }, hdr -> {         assertEquals(4L, hdr.state.getTotalCount()).         double approximation = 0.05d.         assertEquals(10.0d, hdr.percentile(25), approximation).         assertEquals(20.0d, hdr.percentile(50), approximation).         assertEquals(40.0d, hdr.percentile(75), approximation).         assertEquals(60.0d, hdr.percentile(99), approximation).         assertTrue(AggregationInspectionHelper.hasValue(hdr)).     }). }
false;public;0;16;;public void testSomeMatchesNumericDocValues() throws IOException {     testCase(new DocValuesFieldExistsQuery("number"), iw -> {         iw.addDocument(singleton(new NumericDocValuesField("number", 60))).         iw.addDocument(singleton(new NumericDocValuesField("number", 40))).         iw.addDocument(singleton(new NumericDocValuesField("number", 20))).         iw.addDocument(singleton(new NumericDocValuesField("number", 10))).     }, hdr -> {         assertEquals(4L, hdr.state.getTotalCount()).         double approximation = 0.05d.         assertEquals(10.0d, hdr.percentile(25), approximation).         assertEquals(20.0d, hdr.percentile(50), approximation).         assertEquals(40.0d, hdr.percentile(75), approximation).         assertEquals(60.0d, hdr.percentile(99), approximation).         assertTrue(AggregationInspectionHelper.hasValue(hdr)).     }). }
false;public;0;19;;public void testQueryFiltering() throws IOException {     final CheckedConsumer<RandomIndexWriter, IOException> docs = iw -> {         iw.addDocument(asList(new LongPoint("row", 4), new SortedNumericDocValuesField("number", 60))).         iw.addDocument(asList(new LongPoint("row", 3), new SortedNumericDocValuesField("number", 40))).         iw.addDocument(asList(new LongPoint("row", 2), new SortedNumericDocValuesField("number", 20))).         iw.addDocument(asList(new LongPoint("row", 1), new SortedNumericDocValuesField("number", 10))).     }.     testCase(LongPoint.newRangeQuery("row", 0, 2), docs, hdr -> {         assertEquals(2L, hdr.state.getTotalCount()).         assertEquals(10.0d, hdr.percentile(randomDoubleBetween(1, 50, true)), 0.05d).         assertTrue(AggregationInspectionHelper.hasValue(hdr)).     }).     testCase(LongPoint.newRangeQuery("row", 5, 10), docs, hdr -> {         assertEquals(0L, hdr.state.getTotalCount()).         assertFalse(AggregationInspectionHelper.hasValue(hdr)).     }). }
false;private;3;24;;private void testCase(Query query, CheckedConsumer<RandomIndexWriter, IOException> buildIndex, Consumer<InternalHDRPercentiles> verify) throws IOException {     try (Directory directory = newDirectory()) {         try (RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory)) {             buildIndex.accept(indexWriter).         }         try (IndexReader indexReader = DirectoryReader.open(directory)) {             IndexSearcher indexSearcher = newSearcher(indexReader, true, true).             PercentilesAggregationBuilder builder = new PercentilesAggregationBuilder("test").field("number").method(PercentilesMethod.HDR).             MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.LONG).             fieldType.setName("number").             HDRPercentilesAggregator aggregator = createAggregator(builder, indexSearcher, fieldType).             aggregator.preCollection().             indexSearcher.search(query, aggregator).             aggregator.postCollection().             verify.accept((InternalHDRPercentiles) aggregator.buildAggregation(0L)).         }     } }
