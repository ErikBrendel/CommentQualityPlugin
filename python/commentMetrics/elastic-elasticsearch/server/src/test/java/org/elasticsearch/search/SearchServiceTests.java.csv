# id;timestamp;commentText;codeText;commentWords;codeWords
SearchServiceTests -> public void testMaxScriptFieldsSearch() throws IOException;1524684173;test that getting more than the allowed number of script_fields throws an exception;public void testMaxScriptFieldsSearch() throws IOException {_        createIndex("index")__        final SearchService service = getInstanceFromNode(SearchService.class)__        final IndicesService indicesService = getInstanceFromNode(IndicesService.class)__        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex("index"))__        final IndexShard indexShard = indexService.getShard(0)___        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder()__        _        int maxScriptFields = indexService.getIndexSettings().getMaxScriptFields()__        for (int i = 0_ i < maxScriptFields_ i++) {_            searchSourceBuilder.scriptField("field" + i,_                    new Script(ScriptType.INLINE, MockScriptEngine.NAME, CustomScriptPlugin.DUMMY_SCRIPT, Collections.emptyMap()))__        }_        try (SearchContext context = service.createContext(new ShardSearchLocalRequest(indexShard.shardId(), 1, SearchType.DEFAULT,_                searchSourceBuilder, new String[0], false, new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, true))) {_            assertNotNull(context)__            searchSourceBuilder.scriptField("anotherScriptField",_                    new Script(ScriptType.INLINE, MockScriptEngine.NAME, CustomScriptPlugin.DUMMY_SCRIPT, Collections.emptyMap()))__            IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,_                    () -> service.createContext(new ShardSearchLocalRequest(indexShard.shardId(), 1, SearchType.DEFAULT,_                            searchSourceBuilder, new String[0], false, new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, true)))__            assertEquals(_                    "Trying to retrieve too many script_fields. Must be less than or equal to: [" + maxScriptFields + "] but was ["_                            + (maxScriptFields + 1)_                            + "]. This limit can be set by changing the [index.max_script_fields] index level setting.",_                    ex.getMessage())__        }_    };test,that,getting,more,than,the,allowed,number,of,throws,an,exception;public,void,test,max,script,fields,search,throws,ioexception,create,index,index,final,search,service,service,get,instance,from,node,search,service,class,final,indices,service,indices,service,get,instance,from,node,indices,service,class,final,index,service,index,service,indices,service,index,service,safe,resolve,index,index,final,index,shard,index,shard,index,service,get,shard,0,search,source,builder,search,source,builder,new,search,source,builder,int,max,script,fields,index,service,get,index,settings,get,max,script,fields,for,int,i,0,i,max,script,fields,i,search,source,builder,script,field,field,i,new,script,script,type,inline,mock,script,engine,name,custom,script,plugin,collections,empty,map,try,search,context,context,service,create,context,new,shard,search,local,request,index,shard,shard,id,1,search,type,default,search,source,builder,new,string,0,false,new,alias,filter,null,strings,1,0f,true,assert,not,null,context,search,source,builder,script,field,another,script,field,new,script,script,type,inline,mock,script,engine,name,custom,script,plugin,collections,empty,map,illegal,argument,exception,ex,expect,throws,illegal,argument,exception,class,service,create,context,new,shard,search,local,request,index,shard,shard,id,1,search,type,default,search,source,builder,new,string,0,false,new,alias,filter,null,strings,1,0f,true,assert,equals,trying,to,retrieve,too,many,must,be,less,than,or,equal,to,max,script,fields,but,was,max,script,fields,1,this,limit,can,be,set,by,changing,the,index,index,level,setting,ex,get,message
SearchServiceTests -> public void testMaxScriptFieldsSearch() throws IOException;1524780945;test that getting more than the allowed number of script_fields throws an exception;public void testMaxScriptFieldsSearch() throws IOException {_        createIndex("index")__        final SearchService service = getInstanceFromNode(SearchService.class)__        final IndicesService indicesService = getInstanceFromNode(IndicesService.class)__        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex("index"))__        final IndexShard indexShard = indexService.getShard(0)___        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder()__        _        int maxScriptFields = indexService.getIndexSettings().getMaxScriptFields()__        for (int i = 0_ i < maxScriptFields_ i++) {_            searchSourceBuilder.scriptField("field" + i,_                    new Script(ScriptType.INLINE, MockScriptEngine.NAME, CustomScriptPlugin.DUMMY_SCRIPT, Collections.emptyMap()))__        }_        try (SearchContext context = service.createContext(new ShardSearchLocalRequest(indexShard.shardId(), 1, SearchType.DEFAULT,_                searchSourceBuilder, new String[0], false, new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, true, null, null))) {_            assertNotNull(context)__            searchSourceBuilder.scriptField("anotherScriptField",_                    new Script(ScriptType.INLINE, MockScriptEngine.NAME, CustomScriptPlugin.DUMMY_SCRIPT, Collections.emptyMap()))__            IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,_                    () -> service.createContext(new ShardSearchLocalRequest(indexShard.shardId(), 1, SearchType.DEFAULT,_                            searchSourceBuilder, new String[0], false, new AliasFilter(null, Strings.EMPTY_ARRAY),_                        1.0f, true, null, null)))__            assertEquals(_                    "Trying to retrieve too many script_fields. Must be less than or equal to: [" + maxScriptFields + "] but was ["_                            + (maxScriptFields + 1)_                            + "]. This limit can be set by changing the [index.max_script_fields] index level setting.",_                    ex.getMessage())__        }_    };test,that,getting,more,than,the,allowed,number,of,throws,an,exception;public,void,test,max,script,fields,search,throws,ioexception,create,index,index,final,search,service,service,get,instance,from,node,search,service,class,final,indices,service,indices,service,get,instance,from,node,indices,service,class,final,index,service,index,service,indices,service,index,service,safe,resolve,index,index,final,index,shard,index,shard,index,service,get,shard,0,search,source,builder,search,source,builder,new,search,source,builder,int,max,script,fields,index,service,get,index,settings,get,max,script,fields,for,int,i,0,i,max,script,fields,i,search,source,builder,script,field,field,i,new,script,script,type,inline,mock,script,engine,name,custom,script,plugin,collections,empty,map,try,search,context,context,service,create,context,new,shard,search,local,request,index,shard,shard,id,1,search,type,default,search,source,builder,new,string,0,false,new,alias,filter,null,strings,1,0f,true,null,null,assert,not,null,context,search,source,builder,script,field,another,script,field,new,script,script,type,inline,mock,script,engine,name,custom,script,plugin,collections,empty,map,illegal,argument,exception,ex,expect,throws,illegal,argument,exception,class,service,create,context,new,shard,search,local,request,index,shard,shard,id,1,search,type,default,search,source,builder,new,string,0,false,new,alias,filter,null,strings,1,0f,true,null,null,assert,equals,trying,to,retrieve,too,many,must,be,less,than,or,equal,to,max,script,fields,but,was,max,script,fields,1,this,limit,can,be,set,by,changing,the,index,index,level,setting,ex,get,message
SearchServiceTests -> public void testMaxScriptFieldsSearch() throws IOException;1533641732;test that getting more than the allowed number of script_fields throws an exception;public void testMaxScriptFieldsSearch() throws IOException {_        createIndex("index")__        final SearchService service = getInstanceFromNode(SearchService.class)__        final IndicesService indicesService = getInstanceFromNode(IndicesService.class)__        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex("index"))__        final IndexShard indexShard = indexService.getShard(0)___        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder()__        _        int maxScriptFields = indexService.getIndexSettings().getMaxScriptFields()__        for (int i = 0_ i < maxScriptFields_ i++) {_            searchSourceBuilder.scriptField("field" + i,_                    new Script(ScriptType.INLINE, MockScriptEngine.NAME, CustomScriptPlugin.DUMMY_SCRIPT, Collections.emptyMap()))__        }_        try (SearchContext context = service.createContext(new ShardSearchLocalRequest(indexShard.shardId(), 1, SearchType.DEFAULT,_                searchSourceBuilder, new String[0], false, new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, true, null, null))) {_            assertNotNull(context)__            searchSourceBuilder.scriptField("anotherScriptField",_                    new Script(ScriptType.INLINE, MockScriptEngine.NAME, CustomScriptPlugin.DUMMY_SCRIPT, Collections.emptyMap()))__            IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,_                    () -> service.createContext(new ShardSearchLocalRequest(indexShard.shardId(), 1, SearchType.DEFAULT,_                            searchSourceBuilder, new String[0], false, new AliasFilter(null, Strings.EMPTY_ARRAY),_                        1.0f, true, null, null)))__            assertEquals(_                    "Trying to retrieve too many script_fields. Must be less than or equal to: [" + maxScriptFields + "] but was ["_                            + (maxScriptFields + 1)_                            + "]. This limit can be set by changing the [index.max_script_fields] index level setting.",_                    ex.getMessage())__        }_    };test,that,getting,more,than,the,allowed,number,of,throws,an,exception;public,void,test,max,script,fields,search,throws,ioexception,create,index,index,final,search,service,service,get,instance,from,node,search,service,class,final,indices,service,indices,service,get,instance,from,node,indices,service,class,final,index,service,index,service,indices,service,index,service,safe,resolve,index,index,final,index,shard,index,shard,index,service,get,shard,0,search,source,builder,search,source,builder,new,search,source,builder,int,max,script,fields,index,service,get,index,settings,get,max,script,fields,for,int,i,0,i,max,script,fields,i,search,source,builder,script,field,field,i,new,script,script,type,inline,mock,script,engine,name,custom,script,plugin,collections,empty,map,try,search,context,context,service,create,context,new,shard,search,local,request,index,shard,shard,id,1,search,type,default,search,source,builder,new,string,0,false,new,alias,filter,null,strings,1,0f,true,null,null,assert,not,null,context,search,source,builder,script,field,another,script,field,new,script,script,type,inline,mock,script,engine,name,custom,script,plugin,collections,empty,map,illegal,argument,exception,ex,expect,throws,illegal,argument,exception,class,service,create,context,new,shard,search,local,request,index,shard,shard,id,1,search,type,default,search,source,builder,new,string,0,false,new,alias,filter,null,strings,1,0f,true,null,null,assert,equals,trying,to,retrieve,too,many,must,be,less,than,or,equal,to,max,script,fields,but,was,max,script,fields,1,this,limit,can,be,set,by,changing,the,index,index,level,setting,ex,get,message
SearchServiceTests -> public void testMaxScriptFieldsSearch() throws IOException;1537806831;test that getting more than the allowed number of script_fields throws an exception;public void testMaxScriptFieldsSearch() throws IOException {_        createIndex("index")__        final SearchService service = getInstanceFromNode(SearchService.class)__        final IndicesService indicesService = getInstanceFromNode(IndicesService.class)__        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex("index"))__        final IndexShard indexShard = indexService.getShard(0)___        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder()__        _        int maxScriptFields = indexService.getIndexSettings().getMaxScriptFields()__        for (int i = 0_ i < maxScriptFields_ i++) {_            searchSourceBuilder.scriptField("field" + i,_                    new Script(ScriptType.INLINE, MockScriptEngine.NAME, CustomScriptPlugin.DUMMY_SCRIPT, Collections.emptyMap()))__        }_        try (SearchContext context = service.createContext(new ShardSearchLocalRequest(indexShard.shardId(), 1, SearchType.DEFAULT,_                searchSourceBuilder, new String[0], false, new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, true, null, null))) {_            assertNotNull(context)__            searchSourceBuilder.scriptField("anotherScriptField",_                    new Script(ScriptType.INLINE, MockScriptEngine.NAME, CustomScriptPlugin.DUMMY_SCRIPT, Collections.emptyMap()))__            IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,_                    () -> service.createContext(new ShardSearchLocalRequest(indexShard.shardId(), 1, SearchType.DEFAULT,_                            searchSourceBuilder, new String[0], false, new AliasFilter(null, Strings.EMPTY_ARRAY),_                        1.0f, true, null, null)))__            assertEquals(_                    "Trying to retrieve too many script_fields. Must be less than or equal to: [" + maxScriptFields + "] but was ["_                            + (maxScriptFields + 1)_                            + "]. This limit can be set by changing the [index.max_script_fields] index level setting.",_                    ex.getMessage())__        }_    };test,that,getting,more,than,the,allowed,number,of,throws,an,exception;public,void,test,max,script,fields,search,throws,ioexception,create,index,index,final,search,service,service,get,instance,from,node,search,service,class,final,indices,service,indices,service,get,instance,from,node,indices,service,class,final,index,service,index,service,indices,service,index,service,safe,resolve,index,index,final,index,shard,index,shard,index,service,get,shard,0,search,source,builder,search,source,builder,new,search,source,builder,int,max,script,fields,index,service,get,index,settings,get,max,script,fields,for,int,i,0,i,max,script,fields,i,search,source,builder,script,field,field,i,new,script,script,type,inline,mock,script,engine,name,custom,script,plugin,collections,empty,map,try,search,context,context,service,create,context,new,shard,search,local,request,index,shard,shard,id,1,search,type,default,search,source,builder,new,string,0,false,new,alias,filter,null,strings,1,0f,true,null,null,assert,not,null,context,search,source,builder,script,field,another,script,field,new,script,script,type,inline,mock,script,engine,name,custom,script,plugin,collections,empty,map,illegal,argument,exception,ex,expect,throws,illegal,argument,exception,class,service,create,context,new,shard,search,local,request,index,shard,shard,id,1,search,type,default,search,source,builder,new,string,0,false,new,alias,filter,null,strings,1,0f,true,null,null,assert,equals,trying,to,retrieve,too,many,must,be,less,than,or,equal,to,max,script,fields,but,was,max,script,fields,1,this,limit,can,be,set,by,changing,the,index,index,level,setting,ex,get,message
SearchServiceTests -> public void testMaxScriptFieldsSearch() throws IOException;1541493930;test that getting more than the allowed number of script_fields throws an exception;public void testMaxScriptFieldsSearch() throws IOException {_        createIndex("index")__        final SearchService service = getInstanceFromNode(SearchService.class)__        final IndicesService indicesService = getInstanceFromNode(IndicesService.class)__        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex("index"))__        final IndexShard indexShard = indexService.getShard(0)___        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder()__        _        int maxScriptFields = indexService.getIndexSettings().getMaxScriptFields()__        for (int i = 0_ i < maxScriptFields_ i++) {_            searchSourceBuilder.scriptField("field" + i,_                    new Script(ScriptType.INLINE, MockScriptEngine.NAME, CustomScriptPlugin.DUMMY_SCRIPT, Collections.emptyMap()))__        }_        try (SearchContext context = service.createContext(new ShardSearchLocalRequest(indexShard.shardId(), 1, SearchType.DEFAULT,_                searchSourceBuilder, new String[0], false, new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, true, null, null))) {_            assertNotNull(context)__            searchSourceBuilder.scriptField("anotherScriptField",_                    new Script(ScriptType.INLINE, MockScriptEngine.NAME, CustomScriptPlugin.DUMMY_SCRIPT, Collections.emptyMap()))__            IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,_                    () -> service.createContext(new ShardSearchLocalRequest(indexShard.shardId(), 1, SearchType.DEFAULT,_                            searchSourceBuilder, new String[0], false, new AliasFilter(null, Strings.EMPTY_ARRAY),_                        1.0f, true, null, null)))__            assertEquals(_                    "Trying to retrieve too many script_fields. Must be less than or equal to: [" + maxScriptFields + "] but was ["_                            + (maxScriptFields + 1)_                            + "]. This limit can be set by changing the [index.max_script_fields] index level setting.",_                    ex.getMessage())__        }_    };test,that,getting,more,than,the,allowed,number,of,throws,an,exception;public,void,test,max,script,fields,search,throws,ioexception,create,index,index,final,search,service,service,get,instance,from,node,search,service,class,final,indices,service,indices,service,get,instance,from,node,indices,service,class,final,index,service,index,service,indices,service,index,service,safe,resolve,index,index,final,index,shard,index,shard,index,service,get,shard,0,search,source,builder,search,source,builder,new,search,source,builder,int,max,script,fields,index,service,get,index,settings,get,max,script,fields,for,int,i,0,i,max,script,fields,i,search,source,builder,script,field,field,i,new,script,script,type,inline,mock,script,engine,name,custom,script,plugin,collections,empty,map,try,search,context,context,service,create,context,new,shard,search,local,request,index,shard,shard,id,1,search,type,default,search,source,builder,new,string,0,false,new,alias,filter,null,strings,1,0f,true,null,null,assert,not,null,context,search,source,builder,script,field,another,script,field,new,script,script,type,inline,mock,script,engine,name,custom,script,plugin,collections,empty,map,illegal,argument,exception,ex,expect,throws,illegal,argument,exception,class,service,create,context,new,shard,search,local,request,index,shard,shard,id,1,search,type,default,search,source,builder,new,string,0,false,new,alias,filter,null,strings,1,0f,true,null,null,assert,equals,trying,to,retrieve,too,many,must,be,less,than,or,equal,to,max,script,fields,but,was,max,script,fields,1,this,limit,can,be,set,by,changing,the,index,index,level,setting,ex,get,message
SearchServiceTests -> public void testMaxScriptFieldsSearch() throws IOException;1541612607;test that getting more than the allowed number of script_fields throws an exception;public void testMaxScriptFieldsSearch() throws IOException {_        createIndex("index")__        final SearchService service = getInstanceFromNode(SearchService.class)__        final IndicesService indicesService = getInstanceFromNode(IndicesService.class)__        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex("index"))__        final IndexShard indexShard = indexService.getShard(0)___        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder()__        _        int maxScriptFields = indexService.getIndexSettings().getMaxScriptFields()__        for (int i = 0_ i < maxScriptFields_ i++) {_            searchSourceBuilder.scriptField("field" + i,_                    new Script(ScriptType.INLINE, MockScriptEngine.NAME, CustomScriptPlugin.DUMMY_SCRIPT, Collections.emptyMap()))__        }_        try (SearchContext context = service.createContext(new ShardSearchLocalRequest(indexShard.shardId(), 1, SearchType.DEFAULT,_                searchSourceBuilder, new String[0], false, new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, true, null, null))) {_            assertNotNull(context)__            searchSourceBuilder.scriptField("anotherScriptField",_                    new Script(ScriptType.INLINE, MockScriptEngine.NAME, CustomScriptPlugin.DUMMY_SCRIPT, Collections.emptyMap()))__            IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,_                    () -> service.createContext(new ShardSearchLocalRequest(indexShard.shardId(), 1, SearchType.DEFAULT,_                            searchSourceBuilder, new String[0], false, new AliasFilter(null, Strings.EMPTY_ARRAY),_                        1.0f, true, null, null)))__            assertEquals(_                    "Trying to retrieve too many script_fields. Must be less than or equal to: [" + maxScriptFields + "] but was ["_                            + (maxScriptFields + 1)_                            + "]. This limit can be set by changing the [index.max_script_fields] index level setting.",_                    ex.getMessage())__        }_    };test,that,getting,more,than,the,allowed,number,of,throws,an,exception;public,void,test,max,script,fields,search,throws,ioexception,create,index,index,final,search,service,service,get,instance,from,node,search,service,class,final,indices,service,indices,service,get,instance,from,node,indices,service,class,final,index,service,index,service,indices,service,index,service,safe,resolve,index,index,final,index,shard,index,shard,index,service,get,shard,0,search,source,builder,search,source,builder,new,search,source,builder,int,max,script,fields,index,service,get,index,settings,get,max,script,fields,for,int,i,0,i,max,script,fields,i,search,source,builder,script,field,field,i,new,script,script,type,inline,mock,script,engine,name,custom,script,plugin,collections,empty,map,try,search,context,context,service,create,context,new,shard,search,local,request,index,shard,shard,id,1,search,type,default,search,source,builder,new,string,0,false,new,alias,filter,null,strings,1,0f,true,null,null,assert,not,null,context,search,source,builder,script,field,another,script,field,new,script,script,type,inline,mock,script,engine,name,custom,script,plugin,collections,empty,map,illegal,argument,exception,ex,expect,throws,illegal,argument,exception,class,service,create,context,new,shard,search,local,request,index,shard,shard,id,1,search,type,default,search,source,builder,new,string,0,false,new,alias,filter,null,strings,1,0f,true,null,null,assert,equals,trying,to,retrieve,too,many,must,be,less,than,or,equal,to,max,script,fields,but,was,max,script,fields,1,this,limit,can,be,set,by,changing,the,index,index,level,setting,ex,get,message
SearchServiceTests -> public void testMaxScriptFieldsSearch() throws IOException;1543841718;test that getting more than the allowed number of script_fields throws an exception;public void testMaxScriptFieldsSearch() throws IOException {_        createIndex("index")__        final SearchService service = getInstanceFromNode(SearchService.class)__        final IndicesService indicesService = getInstanceFromNode(IndicesService.class)__        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex("index"))__        final IndexShard indexShard = indexService.getShard(0)___        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder()__        _        int maxScriptFields = indexService.getIndexSettings().getMaxScriptFields()__        for (int i = 0_ i < maxScriptFields_ i++) {_            searchSourceBuilder.scriptField("field" + i,_                    new Script(ScriptType.INLINE, MockScriptEngine.NAME, CustomScriptPlugin.DUMMY_SCRIPT, Collections.emptyMap()))__        }_        try (SearchContext context = service.createContext(new ShardSearchLocalRequest(indexShard.shardId(), 1, SearchType.DEFAULT,_                searchSourceBuilder, new String[0], false, new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, true, null, null))) {_            assertNotNull(context)__            searchSourceBuilder.scriptField("anotherScriptField",_                    new Script(ScriptType.INLINE, MockScriptEngine.NAME, CustomScriptPlugin.DUMMY_SCRIPT, Collections.emptyMap()))__            IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,_                    () -> service.createContext(new ShardSearchLocalRequest(indexShard.shardId(), 1, SearchType.DEFAULT,_                            searchSourceBuilder, new String[0], false, new AliasFilter(null, Strings.EMPTY_ARRAY),_                        1.0f, true, null, null)))__            assertEquals(_                    "Trying to retrieve too many script_fields. Must be less than or equal to: [" + maxScriptFields + "] but was ["_                            + (maxScriptFields + 1)_                            + "]. This limit can be set by changing the [index.max_script_fields] index level setting.",_                    ex.getMessage())__        }_    };test,that,getting,more,than,the,allowed,number,of,throws,an,exception;public,void,test,max,script,fields,search,throws,ioexception,create,index,index,final,search,service,service,get,instance,from,node,search,service,class,final,indices,service,indices,service,get,instance,from,node,indices,service,class,final,index,service,index,service,indices,service,index,service,safe,resolve,index,index,final,index,shard,index,shard,index,service,get,shard,0,search,source,builder,search,source,builder,new,search,source,builder,int,max,script,fields,index,service,get,index,settings,get,max,script,fields,for,int,i,0,i,max,script,fields,i,search,source,builder,script,field,field,i,new,script,script,type,inline,mock,script,engine,name,custom,script,plugin,collections,empty,map,try,search,context,context,service,create,context,new,shard,search,local,request,index,shard,shard,id,1,search,type,default,search,source,builder,new,string,0,false,new,alias,filter,null,strings,1,0f,true,null,null,assert,not,null,context,search,source,builder,script,field,another,script,field,new,script,script,type,inline,mock,script,engine,name,custom,script,plugin,collections,empty,map,illegal,argument,exception,ex,expect,throws,illegal,argument,exception,class,service,create,context,new,shard,search,local,request,index,shard,shard,id,1,search,type,default,search,source,builder,new,string,0,false,new,alias,filter,null,strings,1,0f,true,null,null,assert,equals,trying,to,retrieve,too,many,must,be,less,than,or,equal,to,max,script,fields,but,was,max,script,fields,1,this,limit,can,be,set,by,changing,the,index,index,level,setting,ex,get,message
SearchServiceTests -> public void testMaxScriptFieldsSearch() throws IOException;1543863430;test that getting more than the allowed number of script_fields throws an exception;public void testMaxScriptFieldsSearch() throws IOException {_        createIndex("index")__        final SearchService service = getInstanceFromNode(SearchService.class)__        final IndicesService indicesService = getInstanceFromNode(IndicesService.class)__        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex("index"))__        final IndexShard indexShard = indexService.getShard(0)___        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder()__        _        int maxScriptFields = indexService.getIndexSettings().getMaxScriptFields()__        for (int i = 0_ i < maxScriptFields_ i++) {_            searchSourceBuilder.scriptField("field" + i,_                    new Script(ScriptType.INLINE, MockScriptEngine.NAME, CustomScriptPlugin.DUMMY_SCRIPT, Collections.emptyMap()))__        }_        try (SearchContext context = service.createContext(new ShardSearchLocalRequest(indexShard.shardId(), 1, SearchType.DEFAULT,_                searchSourceBuilder, new String[0], false, new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, true, null, null))) {_            assertNotNull(context)__            searchSourceBuilder.scriptField("anotherScriptField",_                    new Script(ScriptType.INLINE, MockScriptEngine.NAME, CustomScriptPlugin.DUMMY_SCRIPT, Collections.emptyMap()))__            IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,_                    () -> service.createContext(new ShardSearchLocalRequest(indexShard.shardId(), 1, SearchType.DEFAULT,_                            searchSourceBuilder, new String[0], false, new AliasFilter(null, Strings.EMPTY_ARRAY),_                        1.0f, true, null, null)))__            assertEquals(_                    "Trying to retrieve too many script_fields. Must be less than or equal to: [" + maxScriptFields + "] but was ["_                            + (maxScriptFields + 1)_                            + "]. This limit can be set by changing the [index.max_script_fields] index level setting.",_                    ex.getMessage())__        }_    };test,that,getting,more,than,the,allowed,number,of,throws,an,exception;public,void,test,max,script,fields,search,throws,ioexception,create,index,index,final,search,service,service,get,instance,from,node,search,service,class,final,indices,service,indices,service,get,instance,from,node,indices,service,class,final,index,service,index,service,indices,service,index,service,safe,resolve,index,index,final,index,shard,index,shard,index,service,get,shard,0,search,source,builder,search,source,builder,new,search,source,builder,int,max,script,fields,index,service,get,index,settings,get,max,script,fields,for,int,i,0,i,max,script,fields,i,search,source,builder,script,field,field,i,new,script,script,type,inline,mock,script,engine,name,custom,script,plugin,collections,empty,map,try,search,context,context,service,create,context,new,shard,search,local,request,index,shard,shard,id,1,search,type,default,search,source,builder,new,string,0,false,new,alias,filter,null,strings,1,0f,true,null,null,assert,not,null,context,search,source,builder,script,field,another,script,field,new,script,script,type,inline,mock,script,engine,name,custom,script,plugin,collections,empty,map,illegal,argument,exception,ex,expect,throws,illegal,argument,exception,class,service,create,context,new,shard,search,local,request,index,shard,shard,id,1,search,type,default,search,source,builder,new,string,0,false,new,alias,filter,null,strings,1,0f,true,null,null,assert,equals,trying,to,retrieve,too,many,must,be,less,than,or,equal,to,max,script,fields,but,was,max,script,fields,1,this,limit,can,be,set,by,changing,the,index,index,level,setting,ex,get,message
SearchServiceTests -> public void testMaxScriptFieldsSearch() throws IOException;1545997405;test that getting more than the allowed number of script_fields throws an exception;public void testMaxScriptFieldsSearch() throws IOException {_        createIndex("index")__        final SearchService service = getInstanceFromNode(SearchService.class)__        final IndicesService indicesService = getInstanceFromNode(IndicesService.class)__        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex("index"))__        final IndexShard indexShard = indexService.getShard(0)___        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder()__        _        int maxScriptFields = indexService.getIndexSettings().getMaxScriptFields()__        for (int i = 0_ i < maxScriptFields_ i++) {_            searchSourceBuilder.scriptField("field" + i,_                    new Script(ScriptType.INLINE, MockScriptEngine.NAME, CustomScriptPlugin.DUMMY_SCRIPT, Collections.emptyMap()))__        }_        try (SearchContext context = service.createContext(new ShardSearchLocalRequest(indexShard.shardId(), 1, SearchType.DEFAULT,_                searchSourceBuilder, new String[0], false, new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, true, null, null))) {_            assertNotNull(context)__            searchSourceBuilder.scriptField("anotherScriptField",_                    new Script(ScriptType.INLINE, MockScriptEngine.NAME, CustomScriptPlugin.DUMMY_SCRIPT, Collections.emptyMap()))__            IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,_                    () -> service.createContext(new ShardSearchLocalRequest(indexShard.shardId(), 1, SearchType.DEFAULT,_                            searchSourceBuilder, new String[0], false, new AliasFilter(null, Strings.EMPTY_ARRAY),_                        1.0f, true, null, null)))__            assertEquals(_                    "Trying to retrieve too many script_fields. Must be less than or equal to: [" + maxScriptFields + "] but was ["_                            + (maxScriptFields + 1)_                            + "]. This limit can be set by changing the [index.max_script_fields] index level setting.",_                    ex.getMessage())__        }_    };test,that,getting,more,than,the,allowed,number,of,throws,an,exception;public,void,test,max,script,fields,search,throws,ioexception,create,index,index,final,search,service,service,get,instance,from,node,search,service,class,final,indices,service,indices,service,get,instance,from,node,indices,service,class,final,index,service,index,service,indices,service,index,service,safe,resolve,index,index,final,index,shard,index,shard,index,service,get,shard,0,search,source,builder,search,source,builder,new,search,source,builder,int,max,script,fields,index,service,get,index,settings,get,max,script,fields,for,int,i,0,i,max,script,fields,i,search,source,builder,script,field,field,i,new,script,script,type,inline,mock,script,engine,name,custom,script,plugin,collections,empty,map,try,search,context,context,service,create,context,new,shard,search,local,request,index,shard,shard,id,1,search,type,default,search,source,builder,new,string,0,false,new,alias,filter,null,strings,1,0f,true,null,null,assert,not,null,context,search,source,builder,script,field,another,script,field,new,script,script,type,inline,mock,script,engine,name,custom,script,plugin,collections,empty,map,illegal,argument,exception,ex,expect,throws,illegal,argument,exception,class,service,create,context,new,shard,search,local,request,index,shard,shard,id,1,search,type,default,search,source,builder,new,string,0,false,new,alias,filter,null,strings,1,0f,true,null,null,assert,equals,trying,to,retrieve,too,many,must,be,less,than,or,equal,to,max,script,fields,but,was,max,script,fields,1,this,limit,can,be,set,by,changing,the,index,index,level,setting,ex,get,message
SearchServiceTests -> public void testMaxScriptFieldsSearch() throws IOException;1549896917;test that getting more than the allowed number of script_fields throws an exception;public void testMaxScriptFieldsSearch() throws IOException {_        createIndex("index")__        final SearchService service = getInstanceFromNode(SearchService.class)__        final IndicesService indicesService = getInstanceFromNode(IndicesService.class)__        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex("index"))__        final IndexShard indexShard = indexService.getShard(0)___        SearchRequest searchRequest = new SearchRequest().allowPartialSearchResults(true)__        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder()__        searchRequest.source(searchSourceBuilder)__        _        int maxScriptFields = indexService.getIndexSettings().getMaxScriptFields()__        for (int i = 0_ i < maxScriptFields_ i++) {_            searchSourceBuilder.scriptField("field" + i,_                    new Script(ScriptType.INLINE, MockScriptEngine.NAME, CustomScriptPlugin.DUMMY_SCRIPT, Collections.emptyMap()))__        }_        try (SearchContext context = service.createContext(new ShardSearchLocalRequest(searchRequest, indexShard.shardId(), 1,_            new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, -1, null, null))) {_            assertNotNull(context)__            searchSourceBuilder.scriptField("anotherScriptField",_                    new Script(ScriptType.INLINE, MockScriptEngine.NAME, CustomScriptPlugin.DUMMY_SCRIPT, Collections.emptyMap()))__            IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,_                    () -> service.createContext(new ShardSearchLocalRequest(searchRequest, indexShard.shardId(), 1,_                        new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, -1, null, null)))__            assertEquals(_                    "Trying to retrieve too many script_fields. Must be less than or equal to: [" + maxScriptFields + "] but was ["_                            + (maxScriptFields + 1)_                            + "]. This limit can be set by changing the [index.max_script_fields] index level setting.",_                    ex.getMessage())__        }_    };test,that,getting,more,than,the,allowed,number,of,throws,an,exception;public,void,test,max,script,fields,search,throws,ioexception,create,index,index,final,search,service,service,get,instance,from,node,search,service,class,final,indices,service,indices,service,get,instance,from,node,indices,service,class,final,index,service,index,service,indices,service,index,service,safe,resolve,index,index,final,index,shard,index,shard,index,service,get,shard,0,search,request,search,request,new,search,request,allow,partial,search,results,true,search,source,builder,search,source,builder,new,search,source,builder,search,request,source,search,source,builder,int,max,script,fields,index,service,get,index,settings,get,max,script,fields,for,int,i,0,i,max,script,fields,i,search,source,builder,script,field,field,i,new,script,script,type,inline,mock,script,engine,name,custom,script,plugin,collections,empty,map,try,search,context,context,service,create,context,new,shard,search,local,request,search,request,index,shard,shard,id,1,new,alias,filter,null,strings,1,0f,1,null,null,assert,not,null,context,search,source,builder,script,field,another,script,field,new,script,script,type,inline,mock,script,engine,name,custom,script,plugin,collections,empty,map,illegal,argument,exception,ex,expect,throws,illegal,argument,exception,class,service,create,context,new,shard,search,local,request,search,request,index,shard,shard,id,1,new,alias,filter,null,strings,1,0f,1,null,null,assert,equals,trying,to,retrieve,too,many,must,be,less,than,or,equal,to,max,script,fields,but,was,max,script,fields,1,this,limit,can,be,set,by,changing,the,index,index,level,setting,ex,get,message
SearchServiceTests -> public void testMaxDocvalueFieldsSearch() throws IOException;1524684173;test that getting more than the allowed number of docvalue_fields throws an exception;public void testMaxDocvalueFieldsSearch() throws IOException {_        createIndex("index")__        final SearchService service = getInstanceFromNode(SearchService.class)__        final IndicesService indicesService = getInstanceFromNode(IndicesService.class)__        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex("index"))__        final IndexShard indexShard = indexService.getShard(0)___        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder()__        _        for (int i = 0_ i < indexService.getIndexSettings().getMaxDocvalueFields()_ i++) {_            searchSourceBuilder.docValueField("field" + i)__        }_        try (SearchContext context = service.createContext(new ShardSearchLocalRequest(indexShard.shardId(), 1, SearchType.DEFAULT,_                searchSourceBuilder, new String[0], false, new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, true))) {_            assertNotNull(context)__            searchSourceBuilder.docValueField("one_field_too_much")__            IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,_                    () -> service.createContext(new ShardSearchLocalRequest(indexShard.shardId(), 1, SearchType.DEFAULT,_                            searchSourceBuilder, new String[0], false, new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, true)))__            assertEquals(_                    "Trying to retrieve too many docvalue_fields. Must be less than or equal to: [100] but was [101]. "_                            + "This limit can be set by changing the [index.max_docvalue_fields_search] index level setting.",_                    ex.getMessage())__        }_    };test,that,getting,more,than,the,allowed,number,of,throws,an,exception;public,void,test,max,docvalue,fields,search,throws,ioexception,create,index,index,final,search,service,service,get,instance,from,node,search,service,class,final,indices,service,indices,service,get,instance,from,node,indices,service,class,final,index,service,index,service,indices,service,index,service,safe,resolve,index,index,final,index,shard,index,shard,index,service,get,shard,0,search,source,builder,search,source,builder,new,search,source,builder,for,int,i,0,i,index,service,get,index,settings,get,max,docvalue,fields,i,search,source,builder,doc,value,field,field,i,try,search,context,context,service,create,context,new,shard,search,local,request,index,shard,shard,id,1,search,type,default,search,source,builder,new,string,0,false,new,alias,filter,null,strings,1,0f,true,assert,not,null,context,search,source,builder,doc,value,field,illegal,argument,exception,ex,expect,throws,illegal,argument,exception,class,service,create,context,new,shard,search,local,request,index,shard,shard,id,1,search,type,default,search,source,builder,new,string,0,false,new,alias,filter,null,strings,1,0f,true,assert,equals,trying,to,retrieve,too,many,must,be,less,than,or,equal,to,100,but,was,101,this,limit,can,be,set,by,changing,the,index,index,level,setting,ex,get,message
SearchServiceTests -> public void testMaxDocvalueFieldsSearch() throws IOException;1524780945;test that getting more than the allowed number of docvalue_fields throws an exception;public void testMaxDocvalueFieldsSearch() throws IOException {_        createIndex("index")__        final SearchService service = getInstanceFromNode(SearchService.class)__        final IndicesService indicesService = getInstanceFromNode(IndicesService.class)__        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex("index"))__        final IndexShard indexShard = indexService.getShard(0)___        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder()__        _        for (int i = 0_ i < indexService.getIndexSettings().getMaxDocvalueFields()_ i++) {_            searchSourceBuilder.docValueField("field" + i)__        }_        try (SearchContext context = service.createContext(new ShardSearchLocalRequest(indexShard.shardId(), 1, SearchType.DEFAULT,_                searchSourceBuilder, new String[0], false, new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, true, null, null))) {_            assertNotNull(context)__            searchSourceBuilder.docValueField("one_field_too_much")__            IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,_                    () -> service.createContext(new ShardSearchLocalRequest(indexShard.shardId(), 1, SearchType.DEFAULT,_                            searchSourceBuilder, new String[0], false, new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f,_                        true, null, null)))__            assertEquals(_                    "Trying to retrieve too many docvalue_fields. Must be less than or equal to: [100] but was [101]. "_                            + "This limit can be set by changing the [index.max_docvalue_fields_search] index level setting.",_                    ex.getMessage())__        }_    };test,that,getting,more,than,the,allowed,number,of,throws,an,exception;public,void,test,max,docvalue,fields,search,throws,ioexception,create,index,index,final,search,service,service,get,instance,from,node,search,service,class,final,indices,service,indices,service,get,instance,from,node,indices,service,class,final,index,service,index,service,indices,service,index,service,safe,resolve,index,index,final,index,shard,index,shard,index,service,get,shard,0,search,source,builder,search,source,builder,new,search,source,builder,for,int,i,0,i,index,service,get,index,settings,get,max,docvalue,fields,i,search,source,builder,doc,value,field,field,i,try,search,context,context,service,create,context,new,shard,search,local,request,index,shard,shard,id,1,search,type,default,search,source,builder,new,string,0,false,new,alias,filter,null,strings,1,0f,true,null,null,assert,not,null,context,search,source,builder,doc,value,field,illegal,argument,exception,ex,expect,throws,illegal,argument,exception,class,service,create,context,new,shard,search,local,request,index,shard,shard,id,1,search,type,default,search,source,builder,new,string,0,false,new,alias,filter,null,strings,1,0f,true,null,null,assert,equals,trying,to,retrieve,too,many,must,be,less,than,or,equal,to,100,but,was,101,this,limit,can,be,set,by,changing,the,index,index,level,setting,ex,get,message
SearchServiceTests -> public void testMaxDocvalueFieldsSearch() throws IOException;1533641732;test that getting more than the allowed number of docvalue_fields throws an exception;public void testMaxDocvalueFieldsSearch() throws IOException {_        createIndex("index")__        final SearchService service = getInstanceFromNode(SearchService.class)__        final IndicesService indicesService = getInstanceFromNode(IndicesService.class)__        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex("index"))__        final IndexShard indexShard = indexService.getShard(0)___        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder()__        _        for (int i = 0_ i < indexService.getIndexSettings().getMaxDocvalueFields()_ i++) {_            searchSourceBuilder.docValueField("field" + i)__        }_        try (SearchContext context = service.createContext(new ShardSearchLocalRequest(indexShard.shardId(), 1, SearchType.DEFAULT,_                searchSourceBuilder, new String[0], false, new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, true, null, null))) {_            assertNotNull(context)__            searchSourceBuilder.docValueField("one_field_too_much")__            IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,_                    () -> service.createContext(new ShardSearchLocalRequest(indexShard.shardId(), 1, SearchType.DEFAULT,_                            searchSourceBuilder, new String[0], false, new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f,_                        true, null, null)))__            assertEquals(_                    "Trying to retrieve too many docvalue_fields. Must be less than or equal to: [100] but was [101]. "_                            + "This limit can be set by changing the [index.max_docvalue_fields_search] index level setting.",_                    ex.getMessage())__        }_    };test,that,getting,more,than,the,allowed,number,of,throws,an,exception;public,void,test,max,docvalue,fields,search,throws,ioexception,create,index,index,final,search,service,service,get,instance,from,node,search,service,class,final,indices,service,indices,service,get,instance,from,node,indices,service,class,final,index,service,index,service,indices,service,index,service,safe,resolve,index,index,final,index,shard,index,shard,index,service,get,shard,0,search,source,builder,search,source,builder,new,search,source,builder,for,int,i,0,i,index,service,get,index,settings,get,max,docvalue,fields,i,search,source,builder,doc,value,field,field,i,try,search,context,context,service,create,context,new,shard,search,local,request,index,shard,shard,id,1,search,type,default,search,source,builder,new,string,0,false,new,alias,filter,null,strings,1,0f,true,null,null,assert,not,null,context,search,source,builder,doc,value,field,illegal,argument,exception,ex,expect,throws,illegal,argument,exception,class,service,create,context,new,shard,search,local,request,index,shard,shard,id,1,search,type,default,search,source,builder,new,string,0,false,new,alias,filter,null,strings,1,0f,true,null,null,assert,equals,trying,to,retrieve,too,many,must,be,less,than,or,equal,to,100,but,was,101,this,limit,can,be,set,by,changing,the,index,index,level,setting,ex,get,message
SearchServiceTests -> public void testMaxDocvalueFieldsSearch() throws IOException;1537806831;test that getting more than the allowed number of docvalue_fields throws an exception;public void testMaxDocvalueFieldsSearch() throws IOException {_        createIndex("index")__        final SearchService service = getInstanceFromNode(SearchService.class)__        final IndicesService indicesService = getInstanceFromNode(IndicesService.class)__        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex("index"))__        final IndexShard indexShard = indexService.getShard(0)___        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder()__        _        for (int i = 0_ i < indexService.getIndexSettings().getMaxDocvalueFields()_ i++) {_            searchSourceBuilder.docValueField("field" + i)__        }_        try (SearchContext context = service.createContext(new ShardSearchLocalRequest(indexShard.shardId(), 1, SearchType.DEFAULT,_                searchSourceBuilder, new String[0], false, new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, true, null, null))) {_            assertNotNull(context)__            searchSourceBuilder.docValueField("one_field_too_much")__            IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,_                    () -> service.createContext(new ShardSearchLocalRequest(indexShard.shardId(), 1, SearchType.DEFAULT,_                            searchSourceBuilder, new String[0], false, new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f,_                        true, null, null)))__            assertEquals(_                    "Trying to retrieve too many docvalue_fields. Must be less than or equal to: [100] but was [101]. "_                            + "This limit can be set by changing the [index.max_docvalue_fields_search] index level setting.",_                    ex.getMessage())__        }_    };test,that,getting,more,than,the,allowed,number,of,throws,an,exception;public,void,test,max,docvalue,fields,search,throws,ioexception,create,index,index,final,search,service,service,get,instance,from,node,search,service,class,final,indices,service,indices,service,get,instance,from,node,indices,service,class,final,index,service,index,service,indices,service,index,service,safe,resolve,index,index,final,index,shard,index,shard,index,service,get,shard,0,search,source,builder,search,source,builder,new,search,source,builder,for,int,i,0,i,index,service,get,index,settings,get,max,docvalue,fields,i,search,source,builder,doc,value,field,field,i,try,search,context,context,service,create,context,new,shard,search,local,request,index,shard,shard,id,1,search,type,default,search,source,builder,new,string,0,false,new,alias,filter,null,strings,1,0f,true,null,null,assert,not,null,context,search,source,builder,doc,value,field,illegal,argument,exception,ex,expect,throws,illegal,argument,exception,class,service,create,context,new,shard,search,local,request,index,shard,shard,id,1,search,type,default,search,source,builder,new,string,0,false,new,alias,filter,null,strings,1,0f,true,null,null,assert,equals,trying,to,retrieve,too,many,must,be,less,than,or,equal,to,100,but,was,101,this,limit,can,be,set,by,changing,the,index,index,level,setting,ex,get,message
SearchServiceTests -> public void testMaxDocvalueFieldsSearch() throws IOException;1541493930;test that getting more than the allowed number of docvalue_fields throws an exception;public void testMaxDocvalueFieldsSearch() throws IOException {_        createIndex("index")__        final SearchService service = getInstanceFromNode(SearchService.class)__        final IndicesService indicesService = getInstanceFromNode(IndicesService.class)__        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex("index"))__        final IndexShard indexShard = indexService.getShard(0)___        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder()__        _        for (int i = 0_ i < indexService.getIndexSettings().getMaxDocvalueFields()_ i++) {_            searchSourceBuilder.docValueField("field" + i)__        }_        try (SearchContext context = service.createContext(new ShardSearchLocalRequest(indexShard.shardId(), 1, SearchType.DEFAULT,_                searchSourceBuilder, new String[0], false, new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, true, null, null))) {_            assertNotNull(context)__            searchSourceBuilder.docValueField("one_field_too_much")__            IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,_                    () -> service.createContext(new ShardSearchLocalRequest(indexShard.shardId(), 1, SearchType.DEFAULT,_                            searchSourceBuilder, new String[0], false, new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f,_                        true, null, null)))__            assertEquals(_                    "Trying to retrieve too many docvalue_fields. Must be less than or equal to: [100] but was [101]. "_                            + "This limit can be set by changing the [index.max_docvalue_fields_search] index level setting.",_                    ex.getMessage())__        }_    };test,that,getting,more,than,the,allowed,number,of,throws,an,exception;public,void,test,max,docvalue,fields,search,throws,ioexception,create,index,index,final,search,service,service,get,instance,from,node,search,service,class,final,indices,service,indices,service,get,instance,from,node,indices,service,class,final,index,service,index,service,indices,service,index,service,safe,resolve,index,index,final,index,shard,index,shard,index,service,get,shard,0,search,source,builder,search,source,builder,new,search,source,builder,for,int,i,0,i,index,service,get,index,settings,get,max,docvalue,fields,i,search,source,builder,doc,value,field,field,i,try,search,context,context,service,create,context,new,shard,search,local,request,index,shard,shard,id,1,search,type,default,search,source,builder,new,string,0,false,new,alias,filter,null,strings,1,0f,true,null,null,assert,not,null,context,search,source,builder,doc,value,field,illegal,argument,exception,ex,expect,throws,illegal,argument,exception,class,service,create,context,new,shard,search,local,request,index,shard,shard,id,1,search,type,default,search,source,builder,new,string,0,false,new,alias,filter,null,strings,1,0f,true,null,null,assert,equals,trying,to,retrieve,too,many,must,be,less,than,or,equal,to,100,but,was,101,this,limit,can,be,set,by,changing,the,index,index,level,setting,ex,get,message
SearchServiceTests -> public void testMaxDocvalueFieldsSearch() throws IOException;1541612607;test that getting more than the allowed number of docvalue_fields throws an exception;public void testMaxDocvalueFieldsSearch() throws IOException {_        createIndex("index")__        final SearchService service = getInstanceFromNode(SearchService.class)__        final IndicesService indicesService = getInstanceFromNode(IndicesService.class)__        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex("index"))__        final IndexShard indexShard = indexService.getShard(0)___        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder()__        _        for (int i = 0_ i < indexService.getIndexSettings().getMaxDocvalueFields()_ i++) {_            searchSourceBuilder.docValueField("field" + i)__        }_        try (SearchContext context = service.createContext(new ShardSearchLocalRequest(indexShard.shardId(), 1, SearchType.DEFAULT,_                searchSourceBuilder, new String[0], false, new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, true, null, null))) {_            assertNotNull(context)__            searchSourceBuilder.docValueField("one_field_too_much")__            IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,_                    () -> service.createContext(new ShardSearchLocalRequest(indexShard.shardId(), 1, SearchType.DEFAULT,_                            searchSourceBuilder, new String[0], false, new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f,_                        true, null, null)))__            assertEquals(_                    "Trying to retrieve too many docvalue_fields. Must be less than or equal to: [100] but was [101]. "_                            + "This limit can be set by changing the [index.max_docvalue_fields_search] index level setting.",_                    ex.getMessage())__        }_    };test,that,getting,more,than,the,allowed,number,of,throws,an,exception;public,void,test,max,docvalue,fields,search,throws,ioexception,create,index,index,final,search,service,service,get,instance,from,node,search,service,class,final,indices,service,indices,service,get,instance,from,node,indices,service,class,final,index,service,index,service,indices,service,index,service,safe,resolve,index,index,final,index,shard,index,shard,index,service,get,shard,0,search,source,builder,search,source,builder,new,search,source,builder,for,int,i,0,i,index,service,get,index,settings,get,max,docvalue,fields,i,search,source,builder,doc,value,field,field,i,try,search,context,context,service,create,context,new,shard,search,local,request,index,shard,shard,id,1,search,type,default,search,source,builder,new,string,0,false,new,alias,filter,null,strings,1,0f,true,null,null,assert,not,null,context,search,source,builder,doc,value,field,illegal,argument,exception,ex,expect,throws,illegal,argument,exception,class,service,create,context,new,shard,search,local,request,index,shard,shard,id,1,search,type,default,search,source,builder,new,string,0,false,new,alias,filter,null,strings,1,0f,true,null,null,assert,equals,trying,to,retrieve,too,many,must,be,less,than,or,equal,to,100,but,was,101,this,limit,can,be,set,by,changing,the,index,index,level,setting,ex,get,message
SearchServiceTests -> public void testMaxDocvalueFieldsSearch() throws IOException;1543841718;test that getting more than the allowed number of docvalue_fields throws an exception;public void testMaxDocvalueFieldsSearch() throws IOException {_        createIndex("index")__        final SearchService service = getInstanceFromNode(SearchService.class)__        final IndicesService indicesService = getInstanceFromNode(IndicesService.class)__        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex("index"))__        final IndexShard indexShard = indexService.getShard(0)___        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder()__        _        for (int i = 0_ i < indexService.getIndexSettings().getMaxDocvalueFields()_ i++) {_            searchSourceBuilder.docValueField("field" + i)__        }_        try (SearchContext context = service.createContext(new ShardSearchLocalRequest(indexShard.shardId(), 1, SearchType.DEFAULT,_                searchSourceBuilder, new String[0], false, new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, true, null, null))) {_            assertNotNull(context)__            searchSourceBuilder.docValueField("one_field_too_much")__            IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,_                    () -> service.createContext(new ShardSearchLocalRequest(indexShard.shardId(), 1, SearchType.DEFAULT,_                            searchSourceBuilder, new String[0], false, new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f,_                        true, null, null)))__            assertEquals(_                    "Trying to retrieve too many docvalue_fields. Must be less than or equal to: [100] but was [101]. "_                            + "This limit can be set by changing the [index.max_docvalue_fields_search] index level setting.",_                    ex.getMessage())__        }_    };test,that,getting,more,than,the,allowed,number,of,throws,an,exception;public,void,test,max,docvalue,fields,search,throws,ioexception,create,index,index,final,search,service,service,get,instance,from,node,search,service,class,final,indices,service,indices,service,get,instance,from,node,indices,service,class,final,index,service,index,service,indices,service,index,service,safe,resolve,index,index,final,index,shard,index,shard,index,service,get,shard,0,search,source,builder,search,source,builder,new,search,source,builder,for,int,i,0,i,index,service,get,index,settings,get,max,docvalue,fields,i,search,source,builder,doc,value,field,field,i,try,search,context,context,service,create,context,new,shard,search,local,request,index,shard,shard,id,1,search,type,default,search,source,builder,new,string,0,false,new,alias,filter,null,strings,1,0f,true,null,null,assert,not,null,context,search,source,builder,doc,value,field,illegal,argument,exception,ex,expect,throws,illegal,argument,exception,class,service,create,context,new,shard,search,local,request,index,shard,shard,id,1,search,type,default,search,source,builder,new,string,0,false,new,alias,filter,null,strings,1,0f,true,null,null,assert,equals,trying,to,retrieve,too,many,must,be,less,than,or,equal,to,100,but,was,101,this,limit,can,be,set,by,changing,the,index,index,level,setting,ex,get,message
SearchServiceTests -> public void testMaxDocvalueFieldsSearch() throws IOException;1543863430;test that getting more than the allowed number of docvalue_fields throws an exception;public void testMaxDocvalueFieldsSearch() throws IOException {_        createIndex("index")__        final SearchService service = getInstanceFromNode(SearchService.class)__        final IndicesService indicesService = getInstanceFromNode(IndicesService.class)__        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex("index"))__        final IndexShard indexShard = indexService.getShard(0)___        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder()__        _        for (int i = 0_ i < indexService.getIndexSettings().getMaxDocvalueFields()_ i++) {_            searchSourceBuilder.docValueField("field" + i)__        }_        try (SearchContext context = service.createContext(new ShardSearchLocalRequest(indexShard.shardId(), 1, SearchType.DEFAULT,_                searchSourceBuilder, new String[0], false, new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, true, null, null))) {_            assertNotNull(context)__            searchSourceBuilder.docValueField("one_field_too_much")__            IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,_                    () -> service.createContext(new ShardSearchLocalRequest(indexShard.shardId(), 1, SearchType.DEFAULT,_                            searchSourceBuilder, new String[0], false, new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f,_                        true, null, null)))__            assertEquals(_                    "Trying to retrieve too many docvalue_fields. Must be less than or equal to: [100] but was [101]. "_                            + "This limit can be set by changing the [index.max_docvalue_fields_search] index level setting.",_                    ex.getMessage())__        }_    };test,that,getting,more,than,the,allowed,number,of,throws,an,exception;public,void,test,max,docvalue,fields,search,throws,ioexception,create,index,index,final,search,service,service,get,instance,from,node,search,service,class,final,indices,service,indices,service,get,instance,from,node,indices,service,class,final,index,service,index,service,indices,service,index,service,safe,resolve,index,index,final,index,shard,index,shard,index,service,get,shard,0,search,source,builder,search,source,builder,new,search,source,builder,for,int,i,0,i,index,service,get,index,settings,get,max,docvalue,fields,i,search,source,builder,doc,value,field,field,i,try,search,context,context,service,create,context,new,shard,search,local,request,index,shard,shard,id,1,search,type,default,search,source,builder,new,string,0,false,new,alias,filter,null,strings,1,0f,true,null,null,assert,not,null,context,search,source,builder,doc,value,field,illegal,argument,exception,ex,expect,throws,illegal,argument,exception,class,service,create,context,new,shard,search,local,request,index,shard,shard,id,1,search,type,default,search,source,builder,new,string,0,false,new,alias,filter,null,strings,1,0f,true,null,null,assert,equals,trying,to,retrieve,too,many,must,be,less,than,or,equal,to,100,but,was,101,this,limit,can,be,set,by,changing,the,index,index,level,setting,ex,get,message
SearchServiceTests -> public void testMaxDocvalueFieldsSearch() throws IOException;1545997405;test that getting more than the allowed number of docvalue_fields throws an exception;public void testMaxDocvalueFieldsSearch() throws IOException {_        createIndex("index")__        final SearchService service = getInstanceFromNode(SearchService.class)__        final IndicesService indicesService = getInstanceFromNode(IndicesService.class)__        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex("index"))__        final IndexShard indexShard = indexService.getShard(0)___        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder()__        _        for (int i = 0_ i < indexService.getIndexSettings().getMaxDocvalueFields()_ i++) {_            searchSourceBuilder.docValueField("field" + i)__        }_        try (SearchContext context = service.createContext(new ShardSearchLocalRequest(indexShard.shardId(), 1, SearchType.DEFAULT,_                searchSourceBuilder, new String[0], false, new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, true, null, null))) {_            assertNotNull(context)__            searchSourceBuilder.docValueField("one_field_too_much")__            IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,_                    () -> service.createContext(new ShardSearchLocalRequest(indexShard.shardId(), 1, SearchType.DEFAULT,_                            searchSourceBuilder, new String[0], false, new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f,_                        true, null, null)))__            assertEquals(_                    "Trying to retrieve too many docvalue_fields. Must be less than or equal to: [100] but was [101]. "_                            + "This limit can be set by changing the [index.max_docvalue_fields_search] index level setting.",_                    ex.getMessage())__        }_    };test,that,getting,more,than,the,allowed,number,of,throws,an,exception;public,void,test,max,docvalue,fields,search,throws,ioexception,create,index,index,final,search,service,service,get,instance,from,node,search,service,class,final,indices,service,indices,service,get,instance,from,node,indices,service,class,final,index,service,index,service,indices,service,index,service,safe,resolve,index,index,final,index,shard,index,shard,index,service,get,shard,0,search,source,builder,search,source,builder,new,search,source,builder,for,int,i,0,i,index,service,get,index,settings,get,max,docvalue,fields,i,search,source,builder,doc,value,field,field,i,try,search,context,context,service,create,context,new,shard,search,local,request,index,shard,shard,id,1,search,type,default,search,source,builder,new,string,0,false,new,alias,filter,null,strings,1,0f,true,null,null,assert,not,null,context,search,source,builder,doc,value,field,illegal,argument,exception,ex,expect,throws,illegal,argument,exception,class,service,create,context,new,shard,search,local,request,index,shard,shard,id,1,search,type,default,search,source,builder,new,string,0,false,new,alias,filter,null,strings,1,0f,true,null,null,assert,equals,trying,to,retrieve,too,many,must,be,less,than,or,equal,to,100,but,was,101,this,limit,can,be,set,by,changing,the,index,index,level,setting,ex,get,message
SearchServiceTests -> public void testMaxDocvalueFieldsSearch() throws IOException;1549896917;test that getting more than the allowed number of docvalue_fields throws an exception;public void testMaxDocvalueFieldsSearch() throws IOException {_        createIndex("index")__        final SearchService service = getInstanceFromNode(SearchService.class)__        final IndicesService indicesService = getInstanceFromNode(IndicesService.class)__        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex("index"))__        final IndexShard indexShard = indexService.getShard(0)___        SearchRequest searchRequest = new SearchRequest().allowPartialSearchResults(true)__        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder()__        searchRequest.source(searchSourceBuilder)__        _        for (int i = 0_ i < indexService.getIndexSettings().getMaxDocvalueFields()_ i++) {_            searchSourceBuilder.docValueField("field" + i)__        }_        try (SearchContext context = service.createContext(new ShardSearchLocalRequest(searchRequest, indexShard.shardId(), 1,_            new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, -1, null, null))) {_            assertNotNull(context)__            searchSourceBuilder.docValueField("one_field_too_much")__            IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,_                    () -> service.createContext(new ShardSearchLocalRequest(searchRequest, indexShard.shardId(), 1,_                        new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, -1, null, null)))__            assertEquals(_                    "Trying to retrieve too many docvalue_fields. Must be less than or equal to: [100] but was [101]. "_                            + "This limit can be set by changing the [index.max_docvalue_fields_search] index level setting.",_                    ex.getMessage())__        }_    };test,that,getting,more,than,the,allowed,number,of,throws,an,exception;public,void,test,max,docvalue,fields,search,throws,ioexception,create,index,index,final,search,service,service,get,instance,from,node,search,service,class,final,indices,service,indices,service,get,instance,from,node,indices,service,class,final,index,service,index,service,indices,service,index,service,safe,resolve,index,index,final,index,shard,index,shard,index,service,get,shard,0,search,request,search,request,new,search,request,allow,partial,search,results,true,search,source,builder,search,source,builder,new,search,source,builder,search,request,source,search,source,builder,for,int,i,0,i,index,service,get,index,settings,get,max,docvalue,fields,i,search,source,builder,doc,value,field,field,i,try,search,context,context,service,create,context,new,shard,search,local,request,search,request,index,shard,shard,id,1,new,alias,filter,null,strings,1,0f,1,null,null,assert,not,null,context,search,source,builder,doc,value,field,illegal,argument,exception,ex,expect,throws,illegal,argument,exception,class,service,create,context,new,shard,search,local,request,search,request,index,shard,shard,id,1,new,alias,filter,null,strings,1,0f,1,null,null,assert,equals,trying,to,retrieve,too,many,must,be,less,than,or,equal,to,100,but,was,101,this,limit,can,be,set,by,changing,the,index,index,level,setting,ex,get,message
SearchServiceTests -> public void testMaxOpenScrollContexts() throws RuntimeException;1543863430;test that creating more than the allowed number of scroll contexts throws an exception;public void testMaxOpenScrollContexts() throws RuntimeException {_        createIndex("index")__        client().prepareIndex("index", "type", "1").setSource("field", "value").setRefreshPolicy(IMMEDIATE).get()___        final SearchService service = getInstanceFromNode(SearchService.class)__        final IndicesService indicesService = getInstanceFromNode(IndicesService.class)__        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex("index"))__        final IndexShard indexShard = indexService.getShard(0)___        _        LinkedList<String> clearScrollIds = new LinkedList<>()___        for (int i = 0_ i < SearchService.MAX_OPEN_SCROLL_CONTEXT.get(Settings.EMPTY)_ i++) {_            SearchResponse searchResponse = client().prepareSearch("index").setSize(1).setScroll("1m").get()___            if (randomInt(4) == 0) clearScrollIds.addLast(searchResponse.getScrollId())__        }__        ClearScrollRequest clearScrollRequest = new ClearScrollRequest()__        clearScrollRequest.setScrollIds(clearScrollIds)__        client().clearScroll(clearScrollRequest)___        for (int i = 0_ i < clearScrollIds.size()_ i++) {_            client().prepareSearch("index").setSize(1).setScroll("1m").get()__        }__        ElasticsearchException ex = expectThrows(ElasticsearchException.class,_            () -> service.createAndPutContext(new ShardScrollRequestTest(indexShard.shardId())))__        assertEquals(_            "Trying to create too many scroll contexts. Must be less than or equal to: [" +_                SearchService.MAX_OPEN_SCROLL_CONTEXT.get(Settings.EMPTY) + "]. " +_                "This limit can be set by changing the [search.max_open_scroll_context] setting.",_            ex.getMessage())__    };test,that,creating,more,than,the,allowed,number,of,scroll,contexts,throws,an,exception;public,void,test,max,open,scroll,contexts,throws,runtime,exception,create,index,index,client,prepare,index,index,type,1,set,source,field,value,set,refresh,policy,immediate,get,final,search,service,service,get,instance,from,node,search,service,class,final,indices,service,indices,service,get,instance,from,node,indices,service,class,final,index,service,index,service,indices,service,index,service,safe,resolve,index,index,final,index,shard,index,shard,index,service,get,shard,0,linked,list,string,clear,scroll,ids,new,linked,list,for,int,i,0,i,search,service,get,settings,empty,i,search,response,search,response,client,prepare,search,index,set,size,1,set,scroll,1m,get,if,random,int,4,0,clear,scroll,ids,add,last,search,response,get,scroll,id,clear,scroll,request,clear,scroll,request,new,clear,scroll,request,clear,scroll,request,set,scroll,ids,clear,scroll,ids,client,clear,scroll,clear,scroll,request,for,int,i,0,i,clear,scroll,ids,size,i,client,prepare,search,index,set,size,1,set,scroll,1m,get,elasticsearch,exception,ex,expect,throws,elasticsearch,exception,class,service,create,and,put,context,new,shard,scroll,request,test,index,shard,shard,id,assert,equals,trying,to,create,too,many,scroll,contexts,must,be,less,than,or,equal,to,search,service,get,settings,empty,this,limit,can,be,set,by,changing,the,search,setting,ex,get,message
SearchServiceTests -> public void testMaxOpenScrollContexts() throws RuntimeException;1545997405;test that creating more than the allowed number of scroll contexts throws an exception;public void testMaxOpenScrollContexts() throws RuntimeException {_        createIndex("index")__        client().prepareIndex("index", "type", "1").setSource("field", "value").setRefreshPolicy(IMMEDIATE).get()___        final SearchService service = getInstanceFromNode(SearchService.class)__        final IndicesService indicesService = getInstanceFromNode(IndicesService.class)__        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex("index"))__        final IndexShard indexShard = indexService.getShard(0)___        _        LinkedList<String> clearScrollIds = new LinkedList<>()___        for (int i = 0_ i < SearchService.MAX_OPEN_SCROLL_CONTEXT.get(Settings.EMPTY)_ i++) {_            SearchResponse searchResponse = client().prepareSearch("index").setSize(1).setScroll("1m").get()___            if (randomInt(4) == 0) clearScrollIds.addLast(searchResponse.getScrollId())__        }__        ClearScrollRequest clearScrollRequest = new ClearScrollRequest()__        clearScrollRequest.setScrollIds(clearScrollIds)__        client().clearScroll(clearScrollRequest)___        for (int i = 0_ i < clearScrollIds.size()_ i++) {_            client().prepareSearch("index").setSize(1).setScroll("1m").get()__        }__        ElasticsearchException ex = expectThrows(ElasticsearchException.class,_            () -> service.createAndPutContext(new ShardScrollRequestTest(indexShard.shardId())))__        assertEquals(_            "Trying to create too many scroll contexts. Must be less than or equal to: [" +_                SearchService.MAX_OPEN_SCROLL_CONTEXT.get(Settings.EMPTY) + "]. " +_                "This limit can be set by changing the [search.max_open_scroll_context] setting.",_            ex.getMessage())__    };test,that,creating,more,than,the,allowed,number,of,scroll,contexts,throws,an,exception;public,void,test,max,open,scroll,contexts,throws,runtime,exception,create,index,index,client,prepare,index,index,type,1,set,source,field,value,set,refresh,policy,immediate,get,final,search,service,service,get,instance,from,node,search,service,class,final,indices,service,indices,service,get,instance,from,node,indices,service,class,final,index,service,index,service,indices,service,index,service,safe,resolve,index,index,final,index,shard,index,shard,index,service,get,shard,0,linked,list,string,clear,scroll,ids,new,linked,list,for,int,i,0,i,search,service,get,settings,empty,i,search,response,search,response,client,prepare,search,index,set,size,1,set,scroll,1m,get,if,random,int,4,0,clear,scroll,ids,add,last,search,response,get,scroll,id,clear,scroll,request,clear,scroll,request,new,clear,scroll,request,clear,scroll,request,set,scroll,ids,clear,scroll,ids,client,clear,scroll,clear,scroll,request,for,int,i,0,i,clear,scroll,ids,size,i,client,prepare,search,index,set,size,1,set,scroll,1m,get,elasticsearch,exception,ex,expect,throws,elasticsearch,exception,class,service,create,and,put,context,new,shard,scroll,request,test,index,shard,shard,id,assert,equals,trying,to,create,too,many,scroll,contexts,must,be,less,than,or,equal,to,search,service,get,settings,empty,this,limit,can,be,set,by,changing,the,search,setting,ex,get,message
SearchServiceTests -> public void testMaxOpenScrollContexts() throws RuntimeException;1549896917;test that creating more than the allowed number of scroll contexts throws an exception;public void testMaxOpenScrollContexts() throws RuntimeException {_        createIndex("index")__        client().prepareIndex("index", "type", "1").setSource("field", "value").setRefreshPolicy(IMMEDIATE).get()___        final SearchService service = getInstanceFromNode(SearchService.class)__        final IndicesService indicesService = getInstanceFromNode(IndicesService.class)__        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex("index"))__        final IndexShard indexShard = indexService.getShard(0)___        _        LinkedList<String> clearScrollIds = new LinkedList<>()___        for (int i = 0_ i < SearchService.MAX_OPEN_SCROLL_CONTEXT.get(Settings.EMPTY)_ i++) {_            SearchResponse searchResponse = client().prepareSearch("index").setSize(1).setScroll("1m").get()___            if (randomInt(4) == 0) clearScrollIds.addLast(searchResponse.getScrollId())__        }__        ClearScrollRequest clearScrollRequest = new ClearScrollRequest()__        clearScrollRequest.setScrollIds(clearScrollIds)__        client().clearScroll(clearScrollRequest)___        for (int i = 0_ i < clearScrollIds.size()_ i++) {_            client().prepareSearch("index").setSize(1).setScroll("1m").get()__        }__        ElasticsearchException ex = expectThrows(ElasticsearchException.class,_            () -> service.createAndPutContext(new ShardScrollRequestTest(indexShard.shardId())))__        assertEquals(_            "Trying to create too many scroll contexts. Must be less than or equal to: [" +_                SearchService.MAX_OPEN_SCROLL_CONTEXT.get(Settings.EMPTY) + "]. " +_                "This limit can be set by changing the [search.max_open_scroll_context] setting.",_            ex.getMessage())__    };test,that,creating,more,than,the,allowed,number,of,scroll,contexts,throws,an,exception;public,void,test,max,open,scroll,contexts,throws,runtime,exception,create,index,index,client,prepare,index,index,type,1,set,source,field,value,set,refresh,policy,immediate,get,final,search,service,service,get,instance,from,node,search,service,class,final,indices,service,indices,service,get,instance,from,node,indices,service,class,final,index,service,index,service,indices,service,index,service,safe,resolve,index,index,final,index,shard,index,shard,index,service,get,shard,0,linked,list,string,clear,scroll,ids,new,linked,list,for,int,i,0,i,search,service,get,settings,empty,i,search,response,search,response,client,prepare,search,index,set,size,1,set,scroll,1m,get,if,random,int,4,0,clear,scroll,ids,add,last,search,response,get,scroll,id,clear,scroll,request,clear,scroll,request,new,clear,scroll,request,clear,scroll,request,set,scroll,ids,clear,scroll,ids,client,clear,scroll,clear,scroll,request,for,int,i,0,i,clear,scroll,ids,size,i,client,prepare,search,index,set,size,1,set,scroll,1m,get,elasticsearch,exception,ex,expect,throws,elasticsearch,exception,class,service,create,and,put,context,new,shard,scroll,request,test,index,shard,shard,id,assert,equals,trying,to,create,too,many,scroll,contexts,must,be,less,than,or,equal,to,search,service,get,settings,empty,this,limit,can,be,set,by,changing,the,search,setting,ex,get,message
