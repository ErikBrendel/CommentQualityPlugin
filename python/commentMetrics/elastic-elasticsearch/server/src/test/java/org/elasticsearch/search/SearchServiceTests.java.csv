commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean resetNodeAfterTest() {     return true. }
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> getPlugins() {     return pluginList(FailOnRewriteQueryPlugin.class, CustomScriptPlugin.class, InternalOrPrivateSettingsPlugin.class). }
false;protected;0;4;;@Override protected Map<String, Function<Map<String, Object>, Object>> pluginScripts() {     return Collections.singletonMap(DUMMY_SCRIPT, vars -> "dummy"). }
false;public;1;8;;@Override public void onNewContext(SearchContext context) {     if ("throttled_threadpool_index".equals(context.indexShard().shardId().getIndex().getName())) {         assertThat(Thread.currentThread().getName(), startsWith("elasticsearch[node_s_0][search_throttled]")).     } else {         assertThat(Thread.currentThread().getName(), startsWith("elasticsearch[node_s_0][search]")).     } }
false;public;2;8;;@Override public void onFetchPhase(SearchContext context, long tookInNanos) {     if ("throttled_threadpool_index".equals(context.indexShard().shardId().getIndex().getName())) {         assertThat(Thread.currentThread().getName(), startsWith("elasticsearch[node_s_0][search_throttled]")).     } else {         assertThat(Thread.currentThread().getName(), startsWith("elasticsearch[node_s_0][search]")).     } }
false;public;2;8;;@Override public void onQueryPhase(SearchContext context, long tookInNanos) {     if ("throttled_threadpool_index".equals(context.indexShard().shardId().getIndex().getName())) {         assertThat(Thread.currentThread().getName(), startsWith("elasticsearch[node_s_0][search_throttled]")).     } else {         assertThat(Thread.currentThread().getName(), startsWith("elasticsearch[node_s_0][search]")).     } }
false;public;1;31;;@Override public void onIndexModule(IndexModule indexModule) {     indexModule.addSearchOperationListener(new SearchOperationListener() {          @Override         public void onNewContext(SearchContext context) {             if ("throttled_threadpool_index".equals(context.indexShard().shardId().getIndex().getName())) {                 assertThat(Thread.currentThread().getName(), startsWith("elasticsearch[node_s_0][search_throttled]")).             } else {                 assertThat(Thread.currentThread().getName(), startsWith("elasticsearch[node_s_0][search]")).             }         }          @Override         public void onFetchPhase(SearchContext context, long tookInNanos) {             if ("throttled_threadpool_index".equals(context.indexShard().shardId().getIndex().getName())) {                 assertThat(Thread.currentThread().getName(), startsWith("elasticsearch[node_s_0][search_throttled]")).             } else {                 assertThat(Thread.currentThread().getName(), startsWith("elasticsearch[node_s_0][search]")).             }         }          @Override         public void onQueryPhase(SearchContext context, long tookInNanos) {             if ("throttled_threadpool_index".equals(context.indexShard().shardId().getIndex().getName())) {                 assertThat(Thread.currentThread().getName(), startsWith("elasticsearch[node_s_0][search_throttled]")).             } else {                 assertThat(Thread.currentThread().getName(), startsWith("elasticsearch[node_s_0][search]")).             }         }     }). }
false;protected;0;4;;@Override protected Settings nodeSettings() {     return Settings.builder().put("search.default_search_timeout", "5s").build(). }
false;public;0;11;;public void testClearOnClose() {     createIndex("index").     client().prepareIndex("index", "type", "1").setSource("field", "value").setRefreshPolicy(IMMEDIATE).get().     SearchResponse searchResponse = client().prepareSearch("index").setSize(1).setScroll("1m").get().     assertThat(searchResponse.getScrollId(), is(notNullValue())).     SearchService service = getInstanceFromNode(SearchService.class).     assertEquals(1, service.getActiveContexts()).     // this kills the keep-alive reaper we have to reset the node after this test     service.doClose().     assertEquals(0, service.getActiveContexts()). }
false;public;0;11;;public void testClearOnStop() {     createIndex("index").     client().prepareIndex("index", "type", "1").setSource("field", "value").setRefreshPolicy(IMMEDIATE).get().     SearchResponse searchResponse = client().prepareSearch("index").setSize(1).setScroll("1m").get().     assertThat(searchResponse.getScrollId(), is(notNullValue())).     SearchService service = getInstanceFromNode(SearchService.class).     assertEquals(1, service.getActiveContexts()).     service.doStop().     assertEquals(0, service.getActiveContexts()). }
false;public;0;11;;public void testClearIndexDelete() {     createIndex("index").     client().prepareIndex("index", "type", "1").setSource("field", "value").setRefreshPolicy(IMMEDIATE).get().     SearchResponse searchResponse = client().prepareSearch("index").setSize(1).setScroll("1m").get().     assertThat(searchResponse.getScrollId(), is(notNullValue())).     SearchService service = getInstanceFromNode(SearchService.class).     assertEquals(1, service.getActiveContexts()).     assertAcked(client().admin().indices().prepareDelete("index")).     assertEquals(0, service.getActiveContexts()). }
false;public;0;16;;public void testCloseSearchContextOnRewriteException() {     createIndex("index").     client().prepareIndex("index", "type", "1").setSource("field", "value").setRefreshPolicy(IMMEDIATE).get().     SearchService service = getInstanceFromNode(SearchService.class).     IndicesService indicesService = getInstanceFromNode(IndicesService.class).     IndexService indexService = indicesService.indexServiceSafe(resolveIndex("index")).     IndexShard indexShard = indexService.getShard(0).     final int activeContexts = service.getActiveContexts().     final int activeRefs = indexShard.store().refCount().     expectThrows(SearchPhaseExecutionException.class, () -> client().prepareSearch("index").setQuery(new FailOnRewriteQueryBuilder()).get()).     assertEquals(activeContexts, service.getActiveContexts()).     assertEquals(activeRefs, indexShard.store().refCount()). }
false;public;1;4;;@Override public void onResponse(IndexResponse indexResponse) {     semaphore.release(). }
false;public;1;4;;@Override public void onFailure(Exception e) {     semaphore.release(). }
false;public;0;28;;@Override public void run() {     startGun.countDown().     while (running.get()) {         service.afterIndexRemoved(indexService.index(), indexService.getIndexSettings(), DELETED).         if (randomBoolean()) {             // context in a non-sane way.             try {                 semaphore.acquire().             } catch (InterruptedException e) {                 throw new AssertionError(e).             }             client().prepareIndex("index", "type").setSource("field", "value").setRefreshPolicy(randomFrom(WriteRequest.RefreshPolicy.values())).execute(new ActionListener<IndexResponse>() {                  @Override                 public void onResponse(IndexResponse indexResponse) {                     semaphore.release().                 }                  @Override                 public void onFailure(Exception e) {                     semaphore.release().                 }             }).         }     } }
false;public;0;79;;public void testSearchWhileIndexDeleted() throws InterruptedException {     createIndex("index").     client().prepareIndex("index", "type", "1").setSource("field", "value").setRefreshPolicy(IMMEDIATE).get().     SearchService service = getInstanceFromNode(SearchService.class).     IndicesService indicesService = getInstanceFromNode(IndicesService.class).     IndexService indexService = indicesService.indexServiceSafe(resolveIndex("index")).     IndexShard indexShard = indexService.getShard(0).     AtomicBoolean running = new AtomicBoolean(true).     CountDownLatch startGun = new CountDownLatch(1).     Semaphore semaphore = new Semaphore(Integer.MAX_VALUE).     final Thread thread = new Thread() {          @Override         public void run() {             startGun.countDown().             while (running.get()) {                 service.afterIndexRemoved(indexService.index(), indexService.getIndexSettings(), DELETED).                 if (randomBoolean()) {                     // context in a non-sane way.                     try {                         semaphore.acquire().                     } catch (InterruptedException e) {                         throw new AssertionError(e).                     }                     client().prepareIndex("index", "type").setSource("field", "value").setRefreshPolicy(randomFrom(WriteRequest.RefreshPolicy.values())).execute(new ActionListener<IndexResponse>() {                          @Override                         public void onResponse(IndexResponse indexResponse) {                             semaphore.release().                         }                          @Override                         public void onFailure(Exception e) {                             semaphore.release().                         }                     }).                 }             }         }     }.     thread.start().     startGun.await().     try {         final int rounds = scaledRandomIntBetween(100, 10000).         SearchRequest searchRequest = new SearchRequest().allowPartialSearchResults(true).         for (int i = 0. i < rounds. i++) {             try {                 try {                     PlainActionFuture<SearchPhaseResult> result = new PlainActionFuture<>().                     service.executeQueryPhase(new ShardSearchLocalRequest(searchRequest, indexShard.shardId(), 1, new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, -1, null, null), new SearchTask(123L, "", "", "", null, Collections.emptyMap()), result).                     SearchPhaseResult searchPhaseResult = result.get().                     IntArrayList intCursors = new IntArrayList(1).                     intCursors.add(0).                     ShardFetchRequest req = new ShardFetchRequest(searchPhaseResult.getRequestId(), intCursors, null).                     PlainActionFuture<FetchSearchResult> listener = new PlainActionFuture<>().                     service.executeFetchPhase(req, new SearchTask(123L, "", "", "", null, Collections.emptyMap()), listener).                     listener.get().                 } catch (ExecutionException ex) {                     assertThat(ex.getCause(), instanceOf(RuntimeException.class)).                     throw ((RuntimeException) ex.getCause()).                 }             } catch (AlreadyClosedException ex) {                 throw ex.             } catch (IllegalStateException ex) {                 assertEquals("search context is already closed can't increment refCount current count [0]", ex.getMessage()).             } catch (SearchContextMissingException ex) {             // that's fine             }         }     } finally {         running.set(false).         thread.join().         semaphore.acquire(Integer.MAX_VALUE).     } }
false;public;0;42;;public void testTimeout() throws IOException {     createIndex("index").     final SearchService service = getInstanceFromNode(SearchService.class).     final IndicesService indicesService = getInstanceFromNode(IndicesService.class).     final IndexService indexService = indicesService.indexServiceSafe(resolveIndex("index")).     final IndexShard indexShard = indexService.getShard(0).     SearchRequest searchRequest = new SearchRequest().allowPartialSearchResults(true).     final SearchContext contextWithDefaultTimeout = service.createContext(new ShardSearchLocalRequest(searchRequest, indexShard.shardId(), 1, new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, -1, null, null)).     try {         // the search context should inherit the default timeout         assertThat(contextWithDefaultTimeout.timeout(), equalTo(TimeValue.timeValueSeconds(5))).     } finally {         contextWithDefaultTimeout.decRef().         service.freeContext(contextWithDefaultTimeout.id()).     }     final long seconds = randomIntBetween(6, 10).     searchRequest.source(new SearchSourceBuilder().timeout(TimeValue.timeValueSeconds(seconds))).     final SearchContext context = service.createContext(new ShardSearchLocalRequest(searchRequest, indexShard.shardId(), 1, new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, -1, null, null)).     try {         // the search context should inherit the query timeout         assertThat(context.timeout(), equalTo(TimeValue.timeValueSeconds(seconds))).     } finally {         context.decRef().         service.freeContext(context.id()).     } }
true;public;0;27;/**  * test that getting more than the allowed number of docvalue_fields throws an exception  */ ;/**  * test that getting more than the allowed number of docvalue_fields throws an exception  */ public void testMaxDocvalueFieldsSearch() throws IOException {     createIndex("index").     final SearchService service = getInstanceFromNode(SearchService.class).     final IndicesService indicesService = getInstanceFromNode(IndicesService.class).     final IndexService indexService = indicesService.indexServiceSafe(resolveIndex("index")).     final IndexShard indexShard = indexService.getShard(0).     SearchRequest searchRequest = new SearchRequest().allowPartialSearchResults(true).     SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder().     searchRequest.source(searchSourceBuilder).     // adding the maximum allowed number of docvalue_fields to retrieve     for (int i = 0. i < indexService.getIndexSettings().getMaxDocvalueFields(). i++) {         searchSourceBuilder.docValueField("field" + i).     }     try (SearchContext context = service.createContext(new ShardSearchLocalRequest(searchRequest, indexShard.shardId(), 1, new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, -1, null, null))) {         assertNotNull(context).         searchSourceBuilder.docValueField("one_field_too_much").         IllegalArgumentException ex = expectThrows(IllegalArgumentException.class, () -> service.createContext(new ShardSearchLocalRequest(searchRequest, indexShard.shardId(), 1, new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, -1, null, null))).         assertEquals("Trying to retrieve too many docvalue_fields. Must be less than or equal to: [100] but was [101]. " + "This limit can be set by changing the [index.max_docvalue_fields_search] index level setting.", ex.getMessage()).     } }
true;public;0;31;/**  * test that getting more than the allowed number of script_fields throws an exception  */ ;/**  * test that getting more than the allowed number of script_fields throws an exception  */ public void testMaxScriptFieldsSearch() throws IOException {     createIndex("index").     final SearchService service = getInstanceFromNode(SearchService.class).     final IndicesService indicesService = getInstanceFromNode(IndicesService.class).     final IndexService indexService = indicesService.indexServiceSafe(resolveIndex("index")).     final IndexShard indexShard = indexService.getShard(0).     SearchRequest searchRequest = new SearchRequest().allowPartialSearchResults(true).     SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder().     searchRequest.source(searchSourceBuilder).     // adding the maximum allowed number of script_fields to retrieve     int maxScriptFields = indexService.getIndexSettings().getMaxScriptFields().     for (int i = 0. i < maxScriptFields. i++) {         searchSourceBuilder.scriptField("field" + i, new Script(ScriptType.INLINE, MockScriptEngine.NAME, CustomScriptPlugin.DUMMY_SCRIPT, Collections.emptyMap())).     }     try (SearchContext context = service.createContext(new ShardSearchLocalRequest(searchRequest, indexShard.shardId(), 1, new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, -1, null, null))) {         assertNotNull(context).         searchSourceBuilder.scriptField("anotherScriptField", new Script(ScriptType.INLINE, MockScriptEngine.NAME, CustomScriptPlugin.DUMMY_SCRIPT, Collections.emptyMap())).         IllegalArgumentException ex = expectThrows(IllegalArgumentException.class, () -> service.createContext(new ShardSearchLocalRequest(searchRequest, indexShard.shardId(), 1, new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, -1, null, null))).         assertEquals("Trying to retrieve too many script_fields. Must be less than or equal to: [" + maxScriptFields + "] but was [" + (maxScriptFields + 1) + "]. This limit can be set by changing the [index.max_script_fields] index level setting.", ex.getMessage()).     } }
false;public;0;18;;public void testIgnoreScriptfieldIfSizeZero() throws IOException {     createIndex("index").     final SearchService service = getInstanceFromNode(SearchService.class).     final IndicesService indicesService = getInstanceFromNode(IndicesService.class).     final IndexService indexService = indicesService.indexServiceSafe(resolveIndex("index")).     final IndexShard indexShard = indexService.getShard(0).     SearchRequest searchRequest = new SearchRequest().allowPartialSearchResults(true).     SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder().     searchRequest.source(searchSourceBuilder).     searchSourceBuilder.scriptField("field" + 0, new Script(ScriptType.INLINE, MockScriptEngine.NAME, CustomScriptPlugin.DUMMY_SCRIPT, Collections.emptyMap())).     searchSourceBuilder.size(0).     try (SearchContext context = service.createContext(new ShardSearchLocalRequest(searchRequest, indexShard.shardId(), 1, new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, -1, null, null))) {         assertEquals(0, context.scriptFields().fields().size()).     } }
true;public;0;34;/**  * test that creating more than the allowed number of scroll contexts throws an exception  */ ;/**  * test that creating more than the allowed number of scroll contexts throws an exception  */ public void testMaxOpenScrollContexts() throws RuntimeException {     createIndex("index").     client().prepareIndex("index", "type", "1").setSource("field", "value").setRefreshPolicy(IMMEDIATE).get().     final SearchService service = getInstanceFromNode(SearchService.class).     final IndicesService indicesService = getInstanceFromNode(IndicesService.class).     final IndexService indexService = indicesService.indexServiceSafe(resolveIndex("index")).     final IndexShard indexShard = indexService.getShard(0).     // Open all possible scrolls, clear some of them, then open more until the limit is reached     LinkedList<String> clearScrollIds = new LinkedList<>().     for (int i = 0. i < SearchService.MAX_OPEN_SCROLL_CONTEXT.get(Settings.EMPTY). i++) {         SearchResponse searchResponse = client().prepareSearch("index").setSize(1).setScroll("1m").get().         if (randomInt(4) == 0)             clearScrollIds.addLast(searchResponse.getScrollId()).     }     ClearScrollRequest clearScrollRequest = new ClearScrollRequest().     clearScrollRequest.setScrollIds(clearScrollIds).     client().clearScroll(clearScrollRequest).     for (int i = 0. i < clearScrollIds.size(). i++) {         client().prepareSearch("index").setSize(1).setScroll("1m").get().     }     ElasticsearchException ex = expectThrows(ElasticsearchException.class, () -> service.createAndPutContext(new ShardScrollRequestTest(indexShard.shardId()))).     assertEquals("Trying to create too many scroll contexts. Must be less than or equal to: [" + SearchService.MAX_OPEN_SCROLL_CONTEXT.get(Settings.EMPTY) + "]. " + "This limit can be set by changing the [search.max_open_scroll_context] setting.", ex.getMessage()). }
false;public;0;6;;@Override public List<QuerySpec<?>> getQueries() {     return singletonList(new QuerySpec<>("fail_on_rewrite_query", FailOnRewriteQueryBuilder::new, parseContext -> {         throw new UnsupportedOperationException("No query parser for this plugin").     })). }
false;protected;1;7;;@Override protected QueryBuilder doRewrite(QueryRewriteContext queryRewriteContext) {     if (queryRewriteContext.convertToShardContext() != null) {         throw new IllegalStateException("Fail on rewrite phase").     }     return this. }
false;protected;1;3;;@Override protected void doWriteTo(StreamOutput out) { }
false;protected;2;3;;@Override protected void doXContent(XContentBuilder builder, Params params) { }
false;protected;1;4;;@Override protected Query doToQuery(QueryShardContext context) {     return null. }
false;protected;1;4;;@Override protected boolean doEquals(FailOnRewriteQueryBuilder other) {     return false. }
false;protected;0;4;;@Override protected int doHashCode() {     return 0. }
false;public;0;4;;@Override public String getWriteableName() {     return null. }
false;public;0;4;;@Override public Scroll scroll() {     return this.scroll. }
false;public;0;31;;public void testCanMatch() throws IOException {     createIndex("index").     final SearchService service = getInstanceFromNode(SearchService.class).     final IndicesService indicesService = getInstanceFromNode(IndicesService.class).     final IndexService indexService = indicesService.indexServiceSafe(resolveIndex("index")).     final IndexShard indexShard = indexService.getShard(0).     SearchRequest searchRequest = new SearchRequest().allowPartialSearchResults(true).     assertTrue(service.canMatch(new ShardSearchLocalRequest(searchRequest, indexShard.shardId(), 1, new AliasFilter(null, Strings.EMPTY_ARRAY), 1f, -1, null, null))).     searchRequest.source(new SearchSourceBuilder()).     assertTrue(service.canMatch(new ShardSearchLocalRequest(searchRequest, indexShard.shardId(), 1, new AliasFilter(null, Strings.EMPTY_ARRAY), 1f, -1, null, null))).     searchRequest.source(new SearchSourceBuilder().query(new MatchAllQueryBuilder())).     assertTrue(service.canMatch(new ShardSearchLocalRequest(searchRequest, indexShard.shardId(), 1, new AliasFilter(null, Strings.EMPTY_ARRAY), 1f, -1, null, null))).     searchRequest.source(new SearchSourceBuilder().query(new MatchNoneQueryBuilder()).aggregation(new TermsAggregationBuilder("test", ValueType.STRING).minDocCount(0))).     assertTrue(service.canMatch(new ShardSearchLocalRequest(searchRequest, indexShard.shardId(), 1, new AliasFilter(null, Strings.EMPTY_ARRAY), 1f, -1, null, null))).     searchRequest.source(new SearchSourceBuilder().query(new MatchNoneQueryBuilder()).aggregation(new GlobalAggregationBuilder("test"))).     assertTrue(service.canMatch(new ShardSearchLocalRequest(searchRequest, indexShard.shardId(), 1, new AliasFilter(null, Strings.EMPTY_ARRAY), 1f, -1, null, null))).     searchRequest.source(new SearchSourceBuilder().query(new MatchNoneQueryBuilder())).     assertFalse(service.canMatch(new ShardSearchLocalRequest(searchRequest, indexShard.shardId(), 1, new AliasFilter(null, Strings.EMPTY_ARRAY), 1f, -1, null, null))). }
false;public;0;16;;public void testCanRewriteToMatchNone() {     assertFalse(SearchService.canRewriteToMatchNone(new SearchSourceBuilder().query(new MatchNoneQueryBuilder()).aggregation(new GlobalAggregationBuilder("test")))).     assertFalse(SearchService.canRewriteToMatchNone(new SearchSourceBuilder())).     assertFalse(SearchService.canRewriteToMatchNone(null)).     assertFalse(SearchService.canRewriteToMatchNone(new SearchSourceBuilder().query(new MatchNoneQueryBuilder()).aggregation(new TermsAggregationBuilder("test", ValueType.STRING).minDocCount(0)))).     assertTrue(SearchService.canRewriteToMatchNone(new SearchSourceBuilder().query(new TermQueryBuilder("foo", "bar")))).     assertTrue(SearchService.canRewriteToMatchNone(new SearchSourceBuilder().query(new MatchNoneQueryBuilder()).aggregation(new TermsAggregationBuilder("test", ValueType.STRING).minDocCount(1)))).     assertFalse(SearchService.canRewriteToMatchNone(new SearchSourceBuilder().query(new MatchNoneQueryBuilder()).aggregation(new TermsAggregationBuilder("test", ValueType.STRING).minDocCount(1)).suggest(new SuggestBuilder()))).     assertFalse(SearchService.canRewriteToMatchNone(new SearchSourceBuilder().query(new TermQueryBuilder("foo", "bar")).suggest(new SuggestBuilder()))). }
false;public;0;34;;public void testSetSearchThrottled() {     createIndex("throttled_threadpool_index").     client().execute(InternalOrPrivateSettingsPlugin.UpdateInternalOrPrivateAction.INSTANCE, new InternalOrPrivateSettingsPlugin.UpdateInternalOrPrivateAction.Request("throttled_threadpool_index", IndexSettings.INDEX_SEARCH_THROTTLED.getKey(), "true")).actionGet().     final SearchService service = getInstanceFromNode(SearchService.class).     Index index = resolveIndex("throttled_threadpool_index").     assertTrue(service.getIndicesService().indexServiceSafe(index).getIndexSettings().isSearchThrottled()).     client().prepareIndex("throttled_threadpool_index", "_doc", "1").setSource("field", "value").setRefreshPolicy(IMMEDIATE).get().     SearchResponse searchResponse = client().prepareSearch("throttled_threadpool_index").setIndicesOptions(IndicesOptions.STRICT_EXPAND_OPEN_FORBID_CLOSED).setSize(1).get().     assertSearchHits(searchResponse, "1").     // we add a search action listener in a plugin above to assert that this is actually used     client().execute(InternalOrPrivateSettingsPlugin.UpdateInternalOrPrivateAction.INSTANCE, new InternalOrPrivateSettingsPlugin.UpdateInternalOrPrivateAction.Request("throttled_threadpool_index", IndexSettings.INDEX_SEARCH_THROTTLED.getKey(), "false")).actionGet().     IllegalArgumentException iae = expectThrows(IllegalArgumentException.class, () -> client().admin().indices().prepareUpdateSettings("throttled_threadpool_index").setSettings(Settings.builder().put(IndexSettings.INDEX_SEARCH_THROTTLED.getKey(), false)).get()).     assertEquals("can not update private setting [index.search.throttled]. this setting is managed by Elasticsearch", iae.getMessage()).     assertFalse(service.getIndicesService().indexServiceSafe(index).getIndexSettings().isSearchThrottled()).     SearchRequest searchRequest = new SearchRequest().allowPartialSearchResults(false).     ShardSearchLocalRequest req = new ShardSearchLocalRequest(searchRequest, new ShardId(index, 0), 1, new AliasFilter(null, Strings.EMPTY_ARRAY), 1f, -1, null, null).     Thread currentThread = Thread.currentThread().     // we still make sure can match is executed on the network thread     service.canMatch(req, ActionListener.wrap(r -> assertSame(Thread.currentThread(), currentThread), e -> fail("unexpected"))). }
false;public;0;12;;public void testExpandSearchThrottled() {     createIndex("throttled_threadpool_index").     client().execute(InternalOrPrivateSettingsPlugin.UpdateInternalOrPrivateAction.INSTANCE, new InternalOrPrivateSettingsPlugin.UpdateInternalOrPrivateAction.Request("throttled_threadpool_index", IndexSettings.INDEX_SEARCH_THROTTLED.getKey(), "true")).actionGet().     client().prepareIndex("throttled_threadpool_index", "_doc", "1").setSource("field", "value").setRefreshPolicy(IMMEDIATE).get().     assertHitCount(client().prepareSearch().get(), 0L).     assertHitCount(client().prepareSearch().setIndicesOptions(IndicesOptions.STRICT_EXPAND_OPEN_FORBID_CLOSED).get(), 1L). }
false;public;0;12;;public void testCreateReduceContext() {     final SearchService service = getInstanceFromNode(SearchService.class).     {         InternalAggregation.ReduceContext reduceContext = service.createReduceContext(true).         expectThrows(MultiBucketConsumerService.TooManyBucketsException.class, () -> reduceContext.consumeBucketsAndMaybeBreak(MultiBucketConsumerService.DEFAULT_MAX_BUCKETS + 1)).     }     {         InternalAggregation.ReduceContext reduceContext = service.createReduceContext(false).         reduceContext.consumeBucketsAndMaybeBreak(MultiBucketConsumerService.DEFAULT_MAX_BUCKETS + 1).     } }
false;public;0;23;;public void testCreateSearchContext() throws IOException {     String index = randomAlphaOfLengthBetween(5, 10).toLowerCase(Locale.ROOT).     IndexService indexService = createIndex(index).     final SearchService service = getInstanceFromNode(SearchService.class).     ShardId shardId = new ShardId(indexService.index(), 0).     long nowInMillis = System.currentTimeMillis().     String clusterAlias = randomBoolean() ? null : randomAlphaOfLengthBetween(3, 10).     SearchRequest searchRequest = new SearchRequest().     searchRequest.allowPartialSearchResults(randomBoolean()).     ShardSearchTransportRequest request = new ShardSearchTransportRequest(OriginalIndices.NONE, searchRequest, shardId, indexService.numberOfShards(), AliasFilter.EMPTY, 1f, nowInMillis, clusterAlias, Strings.EMPTY_ARRAY).     DefaultSearchContext searchContext = service.createSearchContext(request, new TimeValue(System.currentTimeMillis())).     SearchShardTarget searchShardTarget = searchContext.shardTarget().     QueryShardContext queryShardContext = searchContext.getQueryShardContext().     String expectedIndexName = clusterAlias == null ? index : clusterAlias + ":" + index.     assertEquals(expectedIndexName, queryShardContext.getFullyQualifiedIndex().getName()).     assertEquals(expectedIndexName, searchShardTarget.getFullyQualifiedIndexName()).     assertEquals(clusterAlias, searchShardTarget.getClusterAlias()).     assertEquals(shardId, searchShardTarget.getShardId()).     assertSame(searchShardTarget, searchContext.dfsResult().getSearchShardTarget()).     assertSame(searchShardTarget, searchContext.queryResult().getSearchShardTarget()).     assertSame(searchShardTarget, searchContext.fetchResult().getSearchShardTarget()). }
