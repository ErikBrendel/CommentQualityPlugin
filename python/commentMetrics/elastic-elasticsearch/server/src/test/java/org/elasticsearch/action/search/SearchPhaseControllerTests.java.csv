# id;timestamp;commentText;codeText;commentWords;codeWords
SearchPhaseControllerTests -> private static AtomicArray<SearchPhaseResult> generateQueryResults(int nShards, List<CompletionSuggestion> suggestions,                                                                        int searchHitsSize, boolean useConstantScore);1551177682;Generate random query results received from the provided number of shards, including the provided_number of search hits and randomly generated completion suggestions based on the name and size of the provided ones._Note that <code>shardIndex</code> is already set to the generated completion suggestions to simulate what_{@link SearchPhaseController#reducedQueryPhase(Collection, boolean, int, boolean)} does, meaning that the returned query results_can be fed directly to_{@link SearchPhaseController#sortDocs(boolean, Collection, Collection, SearchPhaseController.TopDocsStats, int, int, List)};private static AtomicArray<SearchPhaseResult> generateQueryResults(int nShards, List<CompletionSuggestion> suggestions,_                                                                       int searchHitsSize, boolean useConstantScore) {_        AtomicArray<SearchPhaseResult> queryResults = new AtomicArray<>(nShards)__        for (int shardIndex = 0_ shardIndex < nShards_ shardIndex++) {_            String clusterAlias = randomBoolean() ? null : "remote"__            SearchShardTarget searchShardTarget = new SearchShardTarget("", new ShardId("", "", shardIndex),_                clusterAlias, OriginalIndices.NONE)__            QuerySearchResult querySearchResult = new QuerySearchResult(shardIndex, searchShardTarget)__            final TopDocs topDocs__            float maxScore = 0__            if (searchHitsSize == 0) {_                topDocs = Lucene.EMPTY_TOP_DOCS__            } else {_                int nDocs = randomIntBetween(0, searchHitsSize)__                ScoreDoc[] scoreDocs = new ScoreDoc[nDocs]__                for (int i = 0_ i < nDocs_ i++) {_                    float score = useConstantScore ? 1.0F : Math.abs(randomFloat())__                    scoreDocs[i] = new ScoreDoc(i, score)__                    maxScore = Math.max(score, maxScore)__                }_                topDocs = new TopDocs(new TotalHits(scoreDocs.length, TotalHits.Relation.EQUAL_TO), scoreDocs)__            }_            List<CompletionSuggestion> shardSuggestion = new ArrayList<>()__            for (CompletionSuggestion completionSuggestion : suggestions) {_                CompletionSuggestion suggestion = new CompletionSuggestion(_                    completionSuggestion.getName(), completionSuggestion.getSize(), false)__                final CompletionSuggestion.Entry completionEntry = new CompletionSuggestion.Entry(new Text(""), 0, 5)__                suggestion.addTerm(completionEntry)__                int optionSize = randomIntBetween(1, suggestion.getSize())__                float maxScoreValue = randomIntBetween(suggestion.getSize(), (int) Float.MAX_VALUE)__                for (int i = 0_ i < optionSize_ i++) {_                    completionEntry.addOption(new CompletionSuggestion.Entry.Option(i, new Text(""), maxScoreValue,_                        Collections.emptyMap()))__                    float dec = randomIntBetween(0, optionSize)__                    if (dec <= maxScoreValue) {_                        maxScoreValue -= dec__                    }_                }_                suggestion.setShardIndex(shardIndex)__                shardSuggestion.add(suggestion)__            }_            querySearchResult.topDocs(new TopDocsAndMaxScore(topDocs, maxScore), null)__            querySearchResult.size(searchHitsSize)__            querySearchResult.suggest(new Suggest(new ArrayList<>(shardSuggestion)))__            querySearchResult.setShardIndex(shardIndex)__            queryResults.set(shardIndex, querySearchResult)__        }_        return queryResults__    };generate,random,query,results,received,from,the,provided,number,of,shards,including,the,provided,number,of,search,hits,and,randomly,generated,completion,suggestions,based,on,the,name,and,size,of,the,provided,ones,note,that,code,shard,index,code,is,already,set,to,the,generated,completion,suggestions,to,simulate,what,link,search,phase,controller,reduced,query,phase,collection,boolean,int,boolean,does,meaning,that,the,returned,query,results,can,be,fed,directly,to,link,search,phase,controller,sort,docs,boolean,collection,collection,search,phase,controller,top,docs,stats,int,int,list;private,static,atomic,array,search,phase,result,generate,query,results,int,n,shards,list,completion,suggestion,suggestions,int,search,hits,size,boolean,use,constant,score,atomic,array,search,phase,result,query,results,new,atomic,array,n,shards,for,int,shard,index,0,shard,index,n,shards,shard,index,string,cluster,alias,random,boolean,null,remote,search,shard,target,search,shard,target,new,search,shard,target,new,shard,id,shard,index,cluster,alias,original,indices,none,query,search,result,query,search,result,new,query,search,result,shard,index,search,shard,target,final,top,docs,top,docs,float,max,score,0,if,search,hits,size,0,top,docs,lucene,else,int,n,docs,random,int,between,0,search,hits,size,score,doc,score,docs,new,score,doc,n,docs,for,int,i,0,i,n,docs,i,float,score,use,constant,score,1,0f,math,abs,random,float,score,docs,i,new,score,doc,i,score,max,score,math,max,score,max,score,top,docs,new,top,docs,new,total,hits,score,docs,length,total,hits,relation,score,docs,list,completion,suggestion,shard,suggestion,new,array,list,for,completion,suggestion,completion,suggestion,suggestions,completion,suggestion,suggestion,new,completion,suggestion,completion,suggestion,get,name,completion,suggestion,get,size,false,final,completion,suggestion,entry,completion,entry,new,completion,suggestion,entry,new,text,0,5,suggestion,add,term,completion,entry,int,option,size,random,int,between,1,suggestion,get,size,float,max,score,value,random,int,between,suggestion,get,size,int,float,for,int,i,0,i,option,size,i,completion,entry,add,option,new,completion,suggestion,entry,option,i,new,text,max,score,value,collections,empty,map,float,dec,random,int,between,0,option,size,if,dec,max,score,value,max,score,value,dec,suggestion,set,shard,index,shard,index,shard,suggestion,add,suggestion,query,search,result,top,docs,new,top,docs,and,max,score,top,docs,max,score,null,query,search,result,size,search,hits,size,query,search,result,suggest,new,suggest,new,array,list,shard,suggestion,query,search,result,set,shard,index,shard,index,query,results,set,shard,index,query,search,result,return,query,results
SearchPhaseControllerTests -> private static AtomicArray<SearchPhaseResult> generateQueryResults(int nShards, List<CompletionSuggestion> suggestions,                                                                        int searchHitsSize, boolean useConstantScore);1551195022;Generate random query results received from the provided number of shards, including the provided_number of search hits and randomly generated completion suggestions based on the name and size of the provided ones._Note that <code>shardIndex</code> is already set to the generated completion suggestions to simulate what_{@link SearchPhaseController#reducedQueryPhase(Collection, boolean, int, boolean)} does, meaning that the returned query results_can be fed directly to_{@link SearchPhaseController#sortDocs(boolean, Collection, Collection, SearchPhaseController.TopDocsStats, int, int, List)};private static AtomicArray<SearchPhaseResult> generateQueryResults(int nShards, List<CompletionSuggestion> suggestions,_                                                                       int searchHitsSize, boolean useConstantScore) {_        AtomicArray<SearchPhaseResult> queryResults = new AtomicArray<>(nShards)__        for (int shardIndex = 0_ shardIndex < nShards_ shardIndex++) {_            String clusterAlias = randomBoolean() ? null : "remote"__            SearchShardTarget searchShardTarget = new SearchShardTarget("", new ShardId("", "", shardIndex),_                clusterAlias, OriginalIndices.NONE)__            QuerySearchResult querySearchResult = new QuerySearchResult(shardIndex, searchShardTarget)__            final TopDocs topDocs__            float maxScore = 0__            if (searchHitsSize == 0) {_                topDocs = Lucene.EMPTY_TOP_DOCS__            } else {_                int nDocs = randomIntBetween(0, searchHitsSize)__                ScoreDoc[] scoreDocs = new ScoreDoc[nDocs]__                for (int i = 0_ i < nDocs_ i++) {_                    float score = useConstantScore ? 1.0F : Math.abs(randomFloat())__                    scoreDocs[i] = new ScoreDoc(i, score)__                    maxScore = Math.max(score, maxScore)__                }_                topDocs = new TopDocs(new TotalHits(scoreDocs.length, TotalHits.Relation.EQUAL_TO), scoreDocs)__            }_            List<CompletionSuggestion> shardSuggestion = new ArrayList<>()__            for (CompletionSuggestion completionSuggestion : suggestions) {_                CompletionSuggestion suggestion = new CompletionSuggestion(_                    completionSuggestion.getName(), completionSuggestion.getSize(), false)__                final CompletionSuggestion.Entry completionEntry = new CompletionSuggestion.Entry(new Text(""), 0, 5)__                suggestion.addTerm(completionEntry)__                int optionSize = randomIntBetween(1, suggestion.getSize())__                float maxScoreValue = randomIntBetween(suggestion.getSize(), (int) Float.MAX_VALUE)__                for (int i = 0_ i < optionSize_ i++) {_                    completionEntry.addOption(new CompletionSuggestion.Entry.Option(i, new Text(""), maxScoreValue,_                        Collections.emptyMap()))__                    float dec = randomIntBetween(0, optionSize)__                    if (dec <= maxScoreValue) {_                        maxScoreValue -= dec__                    }_                }_                suggestion.setShardIndex(shardIndex)__                shardSuggestion.add(suggestion)__            }_            querySearchResult.topDocs(new TopDocsAndMaxScore(topDocs, maxScore), null)__            querySearchResult.size(searchHitsSize)__            querySearchResult.suggest(new Suggest(new ArrayList<>(shardSuggestion)))__            querySearchResult.setShardIndex(shardIndex)__            queryResults.set(shardIndex, querySearchResult)__        }_        return queryResults__    };generate,random,query,results,received,from,the,provided,number,of,shards,including,the,provided,number,of,search,hits,and,randomly,generated,completion,suggestions,based,on,the,name,and,size,of,the,provided,ones,note,that,code,shard,index,code,is,already,set,to,the,generated,completion,suggestions,to,simulate,what,link,search,phase,controller,reduced,query,phase,collection,boolean,int,boolean,does,meaning,that,the,returned,query,results,can,be,fed,directly,to,link,search,phase,controller,sort,docs,boolean,collection,collection,search,phase,controller,top,docs,stats,int,int,list;private,static,atomic,array,search,phase,result,generate,query,results,int,n,shards,list,completion,suggestion,suggestions,int,search,hits,size,boolean,use,constant,score,atomic,array,search,phase,result,query,results,new,atomic,array,n,shards,for,int,shard,index,0,shard,index,n,shards,shard,index,string,cluster,alias,random,boolean,null,remote,search,shard,target,search,shard,target,new,search,shard,target,new,shard,id,shard,index,cluster,alias,original,indices,none,query,search,result,query,search,result,new,query,search,result,shard,index,search,shard,target,final,top,docs,top,docs,float,max,score,0,if,search,hits,size,0,top,docs,lucene,else,int,n,docs,random,int,between,0,search,hits,size,score,doc,score,docs,new,score,doc,n,docs,for,int,i,0,i,n,docs,i,float,score,use,constant,score,1,0f,math,abs,random,float,score,docs,i,new,score,doc,i,score,max,score,math,max,score,max,score,top,docs,new,top,docs,new,total,hits,score,docs,length,total,hits,relation,score,docs,list,completion,suggestion,shard,suggestion,new,array,list,for,completion,suggestion,completion,suggestion,suggestions,completion,suggestion,suggestion,new,completion,suggestion,completion,suggestion,get,name,completion,suggestion,get,size,false,final,completion,suggestion,entry,completion,entry,new,completion,suggestion,entry,new,text,0,5,suggestion,add,term,completion,entry,int,option,size,random,int,between,1,suggestion,get,size,float,max,score,value,random,int,between,suggestion,get,size,int,float,for,int,i,0,i,option,size,i,completion,entry,add,option,new,completion,suggestion,entry,option,i,new,text,max,score,value,collections,empty,map,float,dec,random,int,between,0,option,size,if,dec,max,score,value,max,score,value,dec,suggestion,set,shard,index,shard,index,shard,suggestion,add,suggestion,query,search,result,top,docs,new,top,docs,and,max,score,top,docs,max,score,null,query,search,result,size,search,hits,size,query,search,result,suggest,new,suggest,new,array,list,shard,suggestion,query,search,result,set,shard,index,shard,index,query,results,set,shard,index,query,search,result,return,query,results
