commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;13;;public static HighlightField createTestItem() {     String name = frequently() ? randomAlphaOfLengthBetween(5, 20) : randomRealisticUnicodeOfCodepointLengthBetween(5, 20).     Text[] fragments = null.     if (frequently()) {         int size = randomIntBetween(0, 5).         fragments = new Text[size].         for (int i = 0. i < size. i++) {             fragments[i] = new Text(frequently() ? randomAlphaOfLengthBetween(10, 30) : randomRealisticUnicodeOfCodepointLengthBetween(10, 30)).         }     }     return new HighlightField(name, fragments). }
false;public;0;22;;public void testFromXContent() throws IOException {     HighlightField highlightField = createTestItem().     XContentType xcontentType = randomFrom(XContentType.values()).     XContentBuilder builder = XContentFactory.contentBuilder(xcontentType).     if (randomBoolean()) {         builder.prettyPrint().     }     // we need to wrap xContent output in proper object to create a parser for it     builder.startObject().     builder = highlightField.toXContent(builder, ToXContent.EMPTY_PARAMS).     builder.endObject().     try (XContentParser parser = createParser(builder)) {         // skip to the opening object token, fromXContent advances from here and starts with the field name         parser.nextToken().         parser.nextToken().         HighlightField parsedField = HighlightField.fromXContent(parser).         assertEquals(highlightField, parsedField).         if (highlightField.fragments() != null) {             assertEquals(XContentParser.Token.END_ARRAY, parser.currentToken()).         }         assertEquals(XContentParser.Token.END_OBJECT, parser.nextToken()).         assertNull(parser.nextToken()).     } }
false;public;0;26;;public void testToXContent() throws IOException {     HighlightField field = new HighlightField("foo", new Text[] { new Text("bar"), new Text("baz") }).     XContentBuilder builder = JsonXContent.contentBuilder().     builder.prettyPrint().     builder.startObject().     field.toXContent(builder, ToXContent.EMPTY_PARAMS).     builder.endObject().     assertEquals("{\n" + "  \"foo\" : [\n" + "    \"bar\",\n" + "    \"baz\"\n" + "  ]\n" + "}", Strings.toString(builder)).     field = new HighlightField("foo", null).     builder = JsonXContent.contentBuilder().     builder.prettyPrint().     builder.startObject().     field.toXContent(builder, ToXContent.EMPTY_PARAMS).     builder.endObject().     assertEquals("{\n" + "  \"foo\" : null\n" + "}", Strings.toString(builder)). }
true;public;0;3;/**  * Test equality and hashCode properties  */ ;/**  * Test equality and hashCode properties  */ public void testEqualsAndHashcode() {     checkEqualsAndHashCode(createTestItem(), HighlightFieldTests::copy, HighlightFieldTests::mutate). }
false;public;0;12;;public void testSerialization() throws IOException {     HighlightField testField = createTestItem().     try (BytesStreamOutput output = new BytesStreamOutput()) {         testField.writeTo(output).         try (StreamInput in = output.bytes().streamInput()) {             HighlightField deserializedCopy = HighlightField.readHighlightField(in).             assertEquals(testField, deserializedCopy).             assertEquals(testField.hashCode(), deserializedCopy.hashCode()).             assertNotSame(testField, deserializedCopy).         }     } }
false;private,static;1;14;;private static HighlightField mutate(HighlightField original) {     Text[] fragments = original.getFragments().     if (randomBoolean()) {         return new HighlightField(original.getName() + "_suffix", fragments).     } else {         if (fragments == null) {             fragments = new Text[] { new Text("field") }.         } else {             fragments = Arrays.copyOf(fragments, fragments.length + 1).             fragments[fragments.length - 1] = new Text("something new").         }         return new HighlightField(original.getName(), fragments).     } }
false;private,static;1;3;;private static HighlightField copy(HighlightField original) {     return new HighlightField(original.getName(), original.getFragments()). }
