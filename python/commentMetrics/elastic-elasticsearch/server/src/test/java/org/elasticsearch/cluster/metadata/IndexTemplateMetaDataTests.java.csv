commented;modifiers;parameterAmount;loc;comment;code
false;public;0;33;;public void testIndexTemplateMetaDataXContentRoundTrip() throws Exception {     ToXContent.Params params = new ToXContent.MapParams(singletonMap("reduce_mappings", "true")).     String template = "{\"index_patterns\" : [ \".test-*\" ],\"order\" : 1000," + "\"settings\" : {\"number_of_shards\" : 1,\"number_of_replicas\" : 0}," + "\"mappings\" : {\"doc\" :" + "{\"properties\":{\"" + randomAlphaOfLength(10) + "\":{\"type\":\"text\"},\"" + randomAlphaOfLength(10) + "\":{\"type\":\"keyword\"}}" + "}}}".     BytesReference templateBytes = new BytesArray(template).     final IndexTemplateMetaData indexTemplateMetaData.     try (XContentParser parser = XContentHelper.createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, templateBytes, XContentType.JSON)) {         indexTemplateMetaData = IndexTemplateMetaData.Builder.fromXContent(parser, "test").     }     final BytesReference templateBytesRoundTrip.     try (XContentBuilder builder = XContentBuilder.builder(JsonXContent.jsonXContent)) {         builder.startObject().         IndexTemplateMetaData.Builder.toXContentWithTypes(indexTemplateMetaData, builder, params).         builder.endObject().         templateBytesRoundTrip = BytesReference.bytes(builder).     }     final IndexTemplateMetaData indexTemplateMetaDataRoundTrip.     try (XContentParser parser = XContentHelper.createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, templateBytesRoundTrip, XContentType.JSON)) {         indexTemplateMetaDataRoundTrip = IndexTemplateMetaData.Builder.fromXContent(parser, "test").     }     assertThat(indexTemplateMetaData, equalTo(indexTemplateMetaDataRoundTrip)). }
false;public;0;43;;public void testValidateInvalidIndexPatterns() throws Exception {     final IllegalArgumentException emptyPatternError = expectThrows(IllegalArgumentException.class, () -> {         new IndexTemplateMetaData(randomRealisticUnicodeOfLengthBetween(5, 10), randomInt(), randomInt(), Collections.emptyList(), Settings.EMPTY, ImmutableOpenMap.of(), ImmutableOpenMap.of()).     }).     assertThat(emptyPatternError.getMessage(), equalTo("Index patterns must not be null or empty. got []")).     final IllegalArgumentException nullPatternError = expectThrows(IllegalArgumentException.class, () -> {         new IndexTemplateMetaData(randomRealisticUnicodeOfLengthBetween(5, 10), randomInt(), randomInt(), null, Settings.EMPTY, ImmutableOpenMap.of(), ImmutableOpenMap.of()).     }).     assertThat(nullPatternError.getMessage(), equalTo("Index patterns must not be null or empty. got null")).     final String templateWithEmptyPattern = "{\"index_patterns\" : [],\"order\" : 1000," + "\"settings\" : {\"number_of_shards\" : 10,\"number_of_replicas\" : 1}," + "\"mappings\" : {\"doc\" :" + "{\"properties\":{\"" + randomAlphaOfLength(10) + "\":{\"type\":\"text\"},\"" + randomAlphaOfLength(10) + "\":{\"type\":\"keyword\"}}" + "}}}".     try (XContentParser parser = XContentHelper.createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, new BytesArray(templateWithEmptyPattern), XContentType.JSON)) {         final IllegalArgumentException ex = expectThrows(IllegalArgumentException.class, () -> IndexTemplateMetaData.Builder.fromXContent(parser, randomAlphaOfLengthBetween(1, 100))).         assertThat(ex.getMessage(), equalTo("Index patterns must not be null or empty. got []")).     }     final String templateWithoutPattern = "{\"order\" : 1000," + "\"settings\" : {\"number_of_shards\" : 10,\"number_of_replicas\" : 1}," + "\"mappings\" : {\"doc\" :" + "{\"properties\":{\"" + randomAlphaOfLength(10) + "\":{\"type\":\"text\"},\"" + randomAlphaOfLength(10) + "\":{\"type\":\"keyword\"}}" + "}}}".     try (XContentParser parser = XContentHelper.createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, new BytesArray(templateWithoutPattern), XContentType.JSON)) {         final IllegalArgumentException ex = expectThrows(IllegalArgumentException.class, () -> IndexTemplateMetaData.Builder.fromXContent(parser, randomAlphaOfLengthBetween(1, 100))).         assertThat(ex.getMessage(), equalTo("Index patterns must not be null or empty. got null")).     } }
false;public;0;10;;public void testParseTemplateWithAliases() throws Exception {     String templateInJSON = "{\"aliases\": {\"log\":{}}, \"index_patterns\": [\"pattern-1\"]}".     try (XContentParser parser = XContentHelper.createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, new BytesArray(templateInJSON), XContentType.JSON)) {         IndexTemplateMetaData template = IndexTemplateMetaData.Builder.fromXContent(parser, randomAlphaOfLengthBetween(1, 100)).         assertThat(template.aliases().containsKey("log"), equalTo(true)).         assertThat(template.patterns(), contains("pattern-1")).     } }
false;public;0;38;;public void testFromToXContent() throws Exception {     String templateName = randomUnicodeOfCodepointLengthBetween(1, 10).     IndexTemplateMetaData.Builder templateBuilder = IndexTemplateMetaData.builder(templateName).     templateBuilder.patterns(Arrays.asList("pattern-1")).     int numAlias = between(0, 5).     for (int i = 0. i < numAlias. i++) {         AliasMetaData.Builder alias = AliasMetaData.builder(randomRealisticUnicodeOfLengthBetween(1, 100)).         if (randomBoolean()) {             alias.indexRouting(randomRealisticUnicodeOfLengthBetween(1, 100)).         }         if (randomBoolean()) {             alias.searchRouting(randomRealisticUnicodeOfLengthBetween(1, 100)).         }         templateBuilder.putAlias(alias).     }     if (randomBoolean()) {         templateBuilder.settings(Settings.builder().put("index.setting-1", randomLong())).         templateBuilder.settings(Settings.builder().put("index.setting-2", randomTimeValue())).     }     if (randomBoolean()) {         templateBuilder.order(randomInt()).     }     if (randomBoolean()) {         templateBuilder.version(between(0, 100)).     }     if (randomBoolean()) {         templateBuilder.putMapping("doc", "{\"doc\":{\"properties\":{\"type\":\"text\"}}}").     }     IndexTemplateMetaData template = templateBuilder.build().     XContentBuilder builder = XContentBuilder.builder(randomFrom(XContentType.JSON.xContent())).     builder.startObject().     IndexTemplateMetaData.Builder.toXContentWithTypes(template, builder, ToXContent.EMPTY_PARAMS).     builder.endObject().     try (XContentParser parser = createParser(shuffleXContent(builder))) {         IndexTemplateMetaData parsed = IndexTemplateMetaData.Builder.fromXContent(parser, templateName).         assertThat(parsed, equalTo(template)).     } }
