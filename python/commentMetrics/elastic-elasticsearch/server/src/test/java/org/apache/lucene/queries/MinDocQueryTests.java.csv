commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;public void testBasics() {     MinDocQuery query1 = new MinDocQuery(42).     MinDocQuery query2 = new MinDocQuery(42).     MinDocQuery query3 = new MinDocQuery(43).     QueryUtils.check(query1).     QueryUtils.checkEqual(query1, query2).     QueryUtils.checkUnequal(query1, query3).     MinDocQuery query4 = new MinDocQuery(42, new Object()).     MinDocQuery query5 = new MinDocQuery(42, new Object()).     QueryUtils.checkUnequal(query4, query5). }
false;public;0;8;;public void testRewrite() throws Exception {     IndexReader reader = new MultiReader().     MinDocQuery query = new MinDocQuery(42).     Query rewritten = query.rewrite(reader).     QueryUtils.checkUnequal(query, rewritten).     Query rewritten2 = rewritten.rewrite(reader).     assertSame(rewritten, rewritten2). }
false;public;0;17;;public void testRandom() throws IOException {     final int numDocs = randomIntBetween(10, 200).     final Document doc = new Document().     final Directory dir = newDirectory().     final RandomIndexWriter w = new RandomIndexWriter(random(), dir).     for (int i = 0. i < numDocs. ++i) {         w.addDocument(doc).     }     final IndexReader reader = w.getReader().     final IndexSearcher searcher = newSearcher(reader).     for (int i = 0. i <= numDocs. ++i) {         assertEquals(numDocs - i, searcher.count(new MinDocQuery(i))).     }     w.close().     reader.close().     dir.close(). }
