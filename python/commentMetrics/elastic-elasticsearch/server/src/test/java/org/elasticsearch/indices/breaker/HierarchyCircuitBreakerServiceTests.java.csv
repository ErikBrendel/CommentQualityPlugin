# id;timestamp;commentText;codeText;commentWords;codeWords
HierarchyCircuitBreakerServiceTests -> public void testBorrowingSiblingBreakerMemory() throws Exception;1531179852;Test that a breaker correctly redistributes to a different breaker, in_this case, the request breaker borrows space from the fielddata breaker;public void testBorrowingSiblingBreakerMemory() throws Exception {_        Settings clusterSettings = Settings.builder()_            .put(HierarchyCircuitBreakerService.TOTAL_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), "200mb")_            .put(HierarchyCircuitBreakerService.REQUEST_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), "150mb")_            .put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), "150mb")_            .build()__        try (CircuitBreakerService service = new HierarchyCircuitBreakerService(clusterSettings,_            new ClusterSettings(clusterSettings, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))) {_            CircuitBreaker requestCircuitBreaker = service.getBreaker(MemoryCircuitBreaker.REQUEST)__            CircuitBreaker fieldDataCircuitBreaker = service.getBreaker(MemoryCircuitBreaker.FIELDDATA)___            assertEquals(new ByteSizeValue(200, ByteSizeUnit.MB).getBytes(),_                service.stats().getStats(MemoryCircuitBreaker.PARENT).getLimit())__            assertEquals(new ByteSizeValue(150, ByteSizeUnit.MB).getBytes(), requestCircuitBreaker.getLimit())__            assertEquals(new ByteSizeValue(150, ByteSizeUnit.MB).getBytes(), fieldDataCircuitBreaker.getLimit())___            double fieldDataUsedBytes = fieldDataCircuitBreaker_                .addEstimateBytesAndMaybeBreak(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(), "should not break")__            assertEquals(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(), fieldDataUsedBytes, 0.0)__            double requestUsedBytes = requestCircuitBreaker.addEstimateBytesAndMaybeBreak(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(),_                "should not break")__            assertEquals(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(), requestUsedBytes, 0.0)__            requestUsedBytes = requestCircuitBreaker.addEstimateBytesAndMaybeBreak(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(),_                "should not break")__            assertEquals(new ByteSizeValue(100, ByteSizeUnit.MB).getBytes(), requestUsedBytes, 0.0)__            CircuitBreakingException exception = expectThrows(CircuitBreakingException.class, () -> requestCircuitBreaker_                .addEstimateBytesAndMaybeBreak(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(), "should break"))__            assertThat(exception.getMessage(), containsString("[parent] Data too large, data for [should break] would be"))__            assertThat(exception.getMessage(), containsString("which is larger than the limit of [209715200/200mb]"))__        }_    };test,that,a,breaker,correctly,redistributes,to,a,different,breaker,in,this,case,the,request,breaker,borrows,space,from,the,fielddata,breaker;public,void,test,borrowing,sibling,breaker,memory,throws,exception,settings,cluster,settings,settings,builder,put,hierarchy,circuit,breaker,service,get,key,200mb,put,hierarchy,circuit,breaker,service,get,key,150mb,put,hierarchy,circuit,breaker,service,get,key,150mb,build,try,circuit,breaker,service,service,new,hierarchy,circuit,breaker,service,cluster,settings,new,cluster,settings,cluster,settings,cluster,settings,circuit,breaker,request,circuit,breaker,service,get,breaker,memory,circuit,breaker,request,circuit,breaker,field,data,circuit,breaker,service,get,breaker,memory,circuit,breaker,fielddata,assert,equals,new,byte,size,value,200,byte,size,unit,mb,get,bytes,service,stats,get,stats,memory,circuit,breaker,parent,get,limit,assert,equals,new,byte,size,value,150,byte,size,unit,mb,get,bytes,request,circuit,breaker,get,limit,assert,equals,new,byte,size,value,150,byte,size,unit,mb,get,bytes,field,data,circuit,breaker,get,limit,double,field,data,used,bytes,field,data,circuit,breaker,add,estimate,bytes,and,maybe,break,new,byte,size,value,50,byte,size,unit,mb,get,bytes,should,not,break,assert,equals,new,byte,size,value,50,byte,size,unit,mb,get,bytes,field,data,used,bytes,0,0,double,request,used,bytes,request,circuit,breaker,add,estimate,bytes,and,maybe,break,new,byte,size,value,50,byte,size,unit,mb,get,bytes,should,not,break,assert,equals,new,byte,size,value,50,byte,size,unit,mb,get,bytes,request,used,bytes,0,0,request,used,bytes,request,circuit,breaker,add,estimate,bytes,and,maybe,break,new,byte,size,value,50,byte,size,unit,mb,get,bytes,should,not,break,assert,equals,new,byte,size,value,100,byte,size,unit,mb,get,bytes,request,used,bytes,0,0,circuit,breaking,exception,exception,expect,throws,circuit,breaking,exception,class,request,circuit,breaker,add,estimate,bytes,and,maybe,break,new,byte,size,value,50,byte,size,unit,mb,get,bytes,should,break,assert,that,exception,get,message,contains,string,parent,data,too,large,data,for,should,break,would,be,assert,that,exception,get,message,contains,string,which,is,larger,than,the,limit,of,209715200,200mb
HierarchyCircuitBreakerServiceTests -> public void testBorrowingSiblingBreakerMemory() throws Exception;1531729807;Test that a breaker correctly redistributes to a different breaker, in_this case, the request breaker borrows space from the fielddata breaker;public void testBorrowingSiblingBreakerMemory() throws Exception {_        Settings clusterSettings = Settings.builder()_            .put(HierarchyCircuitBreakerService.USE_REAL_MEMORY_USAGE_SETTING.getKey(), false)_            .put(HierarchyCircuitBreakerService.TOTAL_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), "200mb")_            .put(HierarchyCircuitBreakerService.REQUEST_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), "150mb")_            .put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), "150mb")_            .build()__        try (CircuitBreakerService service = new HierarchyCircuitBreakerService(clusterSettings,_            new ClusterSettings(clusterSettings, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))) {_            CircuitBreaker requestCircuitBreaker = service.getBreaker(MemoryCircuitBreaker.REQUEST)__            CircuitBreaker fieldDataCircuitBreaker = service.getBreaker(MemoryCircuitBreaker.FIELDDATA)___            assertEquals(new ByteSizeValue(200, ByteSizeUnit.MB).getBytes(),_                service.stats().getStats(MemoryCircuitBreaker.PARENT).getLimit())__            assertEquals(new ByteSizeValue(150, ByteSizeUnit.MB).getBytes(), requestCircuitBreaker.getLimit())__            assertEquals(new ByteSizeValue(150, ByteSizeUnit.MB).getBytes(), fieldDataCircuitBreaker.getLimit())___            double fieldDataUsedBytes = fieldDataCircuitBreaker_                .addEstimateBytesAndMaybeBreak(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(), "should not break")__            assertEquals(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(), fieldDataUsedBytes, 0.0)__            double requestUsedBytes = requestCircuitBreaker.addEstimateBytesAndMaybeBreak(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(),_                "should not break")__            assertEquals(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(), requestUsedBytes, 0.0)__            requestUsedBytes = requestCircuitBreaker.addEstimateBytesAndMaybeBreak(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(),_                "should not break")__            assertEquals(new ByteSizeValue(100, ByteSizeUnit.MB).getBytes(), requestUsedBytes, 0.0)__            CircuitBreakingException exception = expectThrows(CircuitBreakingException.class, () -> requestCircuitBreaker_                .addEstimateBytesAndMaybeBreak(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(), "should break"))__            assertThat(exception.getMessage(), containsString("[parent] Data too large, data for [should break] would be"))__            assertThat(exception.getMessage(), containsString("which is larger than the limit of [209715200/200mb]"))__        }_    };test,that,a,breaker,correctly,redistributes,to,a,different,breaker,in,this,case,the,request,breaker,borrows,space,from,the,fielddata,breaker;public,void,test,borrowing,sibling,breaker,memory,throws,exception,settings,cluster,settings,settings,builder,put,hierarchy,circuit,breaker,service,get,key,false,put,hierarchy,circuit,breaker,service,get,key,200mb,put,hierarchy,circuit,breaker,service,get,key,150mb,put,hierarchy,circuit,breaker,service,get,key,150mb,build,try,circuit,breaker,service,service,new,hierarchy,circuit,breaker,service,cluster,settings,new,cluster,settings,cluster,settings,cluster,settings,circuit,breaker,request,circuit,breaker,service,get,breaker,memory,circuit,breaker,request,circuit,breaker,field,data,circuit,breaker,service,get,breaker,memory,circuit,breaker,fielddata,assert,equals,new,byte,size,value,200,byte,size,unit,mb,get,bytes,service,stats,get,stats,memory,circuit,breaker,parent,get,limit,assert,equals,new,byte,size,value,150,byte,size,unit,mb,get,bytes,request,circuit,breaker,get,limit,assert,equals,new,byte,size,value,150,byte,size,unit,mb,get,bytes,field,data,circuit,breaker,get,limit,double,field,data,used,bytes,field,data,circuit,breaker,add,estimate,bytes,and,maybe,break,new,byte,size,value,50,byte,size,unit,mb,get,bytes,should,not,break,assert,equals,new,byte,size,value,50,byte,size,unit,mb,get,bytes,field,data,used,bytes,0,0,double,request,used,bytes,request,circuit,breaker,add,estimate,bytes,and,maybe,break,new,byte,size,value,50,byte,size,unit,mb,get,bytes,should,not,break,assert,equals,new,byte,size,value,50,byte,size,unit,mb,get,bytes,request,used,bytes,0,0,request,used,bytes,request,circuit,breaker,add,estimate,bytes,and,maybe,break,new,byte,size,value,50,byte,size,unit,mb,get,bytes,should,not,break,assert,equals,new,byte,size,value,100,byte,size,unit,mb,get,bytes,request,used,bytes,0,0,circuit,breaking,exception,exception,expect,throws,circuit,breaking,exception,class,request,circuit,breaker,add,estimate,bytes,and,maybe,break,new,byte,size,value,50,byte,size,unit,mb,get,bytes,should,break,assert,that,exception,get,message,contains,string,parent,data,too,large,data,for,should,break,would,be,assert,that,exception,get,message,contains,string,which,is,larger,than,the,limit,of,209715200,200mb
HierarchyCircuitBreakerServiceTests -> public void testBorrowingSiblingBreakerMemory() throws Exception;1531910483;Test that a breaker correctly redistributes to a different breaker, in_this case, the request breaker borrows space from the fielddata breaker;public void testBorrowingSiblingBreakerMemory() throws Exception {_        Settings clusterSettings = Settings.builder()_            .put(HierarchyCircuitBreakerService.USE_REAL_MEMORY_USAGE_SETTING.getKey(), false)_            .put(HierarchyCircuitBreakerService.TOTAL_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), "200mb")_            .put(HierarchyCircuitBreakerService.REQUEST_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), "150mb")_            .put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), "150mb")_            .build()__        try (CircuitBreakerService service = new HierarchyCircuitBreakerService(clusterSettings,_            new ClusterSettings(clusterSettings, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))) {_            CircuitBreaker requestCircuitBreaker = service.getBreaker(MemoryCircuitBreaker.REQUEST)__            CircuitBreaker fieldDataCircuitBreaker = service.getBreaker(MemoryCircuitBreaker.FIELDDATA)___            assertEquals(new ByteSizeValue(200, ByteSizeUnit.MB).getBytes(),_                service.stats().getStats(MemoryCircuitBreaker.PARENT).getLimit())__            assertEquals(new ByteSizeValue(150, ByteSizeUnit.MB).getBytes(), requestCircuitBreaker.getLimit())__            assertEquals(new ByteSizeValue(150, ByteSizeUnit.MB).getBytes(), fieldDataCircuitBreaker.getLimit())___            double fieldDataUsedBytes = fieldDataCircuitBreaker_                .addEstimateBytesAndMaybeBreak(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(), "should not break")__            assertEquals(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(), fieldDataUsedBytes, 0.0)__            double requestUsedBytes = requestCircuitBreaker.addEstimateBytesAndMaybeBreak(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(),_                "should not break")__            assertEquals(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(), requestUsedBytes, 0.0)__            requestUsedBytes = requestCircuitBreaker.addEstimateBytesAndMaybeBreak(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(),_                "should not break")__            assertEquals(new ByteSizeValue(100, ByteSizeUnit.MB).getBytes(), requestUsedBytes, 0.0)__            CircuitBreakingException exception = expectThrows(CircuitBreakingException.class, () -> requestCircuitBreaker_                .addEstimateBytesAndMaybeBreak(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(), "should break"))__            assertThat(exception.getMessage(), containsString("[parent] Data too large, data for [should break] would be"))__            assertThat(exception.getMessage(), containsString("which is larger than the limit of [209715200/200mb]"))__        }_    };test,that,a,breaker,correctly,redistributes,to,a,different,breaker,in,this,case,the,request,breaker,borrows,space,from,the,fielddata,breaker;public,void,test,borrowing,sibling,breaker,memory,throws,exception,settings,cluster,settings,settings,builder,put,hierarchy,circuit,breaker,service,get,key,false,put,hierarchy,circuit,breaker,service,get,key,200mb,put,hierarchy,circuit,breaker,service,get,key,150mb,put,hierarchy,circuit,breaker,service,get,key,150mb,build,try,circuit,breaker,service,service,new,hierarchy,circuit,breaker,service,cluster,settings,new,cluster,settings,cluster,settings,cluster,settings,circuit,breaker,request,circuit,breaker,service,get,breaker,memory,circuit,breaker,request,circuit,breaker,field,data,circuit,breaker,service,get,breaker,memory,circuit,breaker,fielddata,assert,equals,new,byte,size,value,200,byte,size,unit,mb,get,bytes,service,stats,get,stats,memory,circuit,breaker,parent,get,limit,assert,equals,new,byte,size,value,150,byte,size,unit,mb,get,bytes,request,circuit,breaker,get,limit,assert,equals,new,byte,size,value,150,byte,size,unit,mb,get,bytes,field,data,circuit,breaker,get,limit,double,field,data,used,bytes,field,data,circuit,breaker,add,estimate,bytes,and,maybe,break,new,byte,size,value,50,byte,size,unit,mb,get,bytes,should,not,break,assert,equals,new,byte,size,value,50,byte,size,unit,mb,get,bytes,field,data,used,bytes,0,0,double,request,used,bytes,request,circuit,breaker,add,estimate,bytes,and,maybe,break,new,byte,size,value,50,byte,size,unit,mb,get,bytes,should,not,break,assert,equals,new,byte,size,value,50,byte,size,unit,mb,get,bytes,request,used,bytes,0,0,request,used,bytes,request,circuit,breaker,add,estimate,bytes,and,maybe,break,new,byte,size,value,50,byte,size,unit,mb,get,bytes,should,not,break,assert,equals,new,byte,size,value,100,byte,size,unit,mb,get,bytes,request,used,bytes,0,0,circuit,breaking,exception,exception,expect,throws,circuit,breaking,exception,class,request,circuit,breaker,add,estimate,bytes,and,maybe,break,new,byte,size,value,50,byte,size,unit,mb,get,bytes,should,break,assert,that,exception,get,message,contains,string,parent,data,too,large,data,for,should,break,would,be,assert,that,exception,get,message,contains,string,which,is,larger,than,the,limit,of,209715200,200mb
HierarchyCircuitBreakerServiceTests -> public void testBorrowingSiblingBreakerMemory() throws Exception;1532353780;Test that a breaker correctly redistributes to a different breaker, in_this case, the request breaker borrows space from the fielddata breaker;public void testBorrowingSiblingBreakerMemory() throws Exception {_        Settings clusterSettings = Settings.builder()_            .put(HierarchyCircuitBreakerService.USE_REAL_MEMORY_USAGE_SETTING.getKey(), false)_            .put(HierarchyCircuitBreakerService.TOTAL_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), "200mb")_            .put(HierarchyCircuitBreakerService.REQUEST_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), "150mb")_            .put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), "150mb")_            .build()__        try (CircuitBreakerService service = new HierarchyCircuitBreakerService(clusterSettings,_            new ClusterSettings(clusterSettings, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))) {_            CircuitBreaker requestCircuitBreaker = service.getBreaker(MemoryCircuitBreaker.REQUEST)__            CircuitBreaker fieldDataCircuitBreaker = service.getBreaker(MemoryCircuitBreaker.FIELDDATA)___            assertEquals(new ByteSizeValue(200, ByteSizeUnit.MB).getBytes(),_                service.stats().getStats(MemoryCircuitBreaker.PARENT).getLimit())__            assertEquals(new ByteSizeValue(150, ByteSizeUnit.MB).getBytes(), requestCircuitBreaker.getLimit())__            assertEquals(new ByteSizeValue(150, ByteSizeUnit.MB).getBytes(), fieldDataCircuitBreaker.getLimit())___            double fieldDataUsedBytes = fieldDataCircuitBreaker_                .addEstimateBytesAndMaybeBreak(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(), "should not break")__            assertEquals(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(), fieldDataUsedBytes, 0.0)__            double requestUsedBytes = requestCircuitBreaker.addEstimateBytesAndMaybeBreak(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(),_                "should not break")__            assertEquals(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(), requestUsedBytes, 0.0)__            requestUsedBytes = requestCircuitBreaker.addEstimateBytesAndMaybeBreak(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(),_                "should not break")__            assertEquals(new ByteSizeValue(100, ByteSizeUnit.MB).getBytes(), requestUsedBytes, 0.0)__            CircuitBreakingException exception = expectThrows(CircuitBreakingException.class, () -> requestCircuitBreaker_                .addEstimateBytesAndMaybeBreak(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(), "should break"))__            assertThat(exception.getMessage(), containsString("[parent] Data too large, data for [should break] would be"))__            assertThat(exception.getMessage(), containsString("which is larger than the limit of [209715200/200mb]"))__            assertThat(exception.getMessage(),_                containsString("usages [request=157286400/150mb, fielddata=54001664/51.5mb, in_flight_requests=0/0b, accounting=0/0b]"))__        }_    };test,that,a,breaker,correctly,redistributes,to,a,different,breaker,in,this,case,the,request,breaker,borrows,space,from,the,fielddata,breaker;public,void,test,borrowing,sibling,breaker,memory,throws,exception,settings,cluster,settings,settings,builder,put,hierarchy,circuit,breaker,service,get,key,false,put,hierarchy,circuit,breaker,service,get,key,200mb,put,hierarchy,circuit,breaker,service,get,key,150mb,put,hierarchy,circuit,breaker,service,get,key,150mb,build,try,circuit,breaker,service,service,new,hierarchy,circuit,breaker,service,cluster,settings,new,cluster,settings,cluster,settings,cluster,settings,circuit,breaker,request,circuit,breaker,service,get,breaker,memory,circuit,breaker,request,circuit,breaker,field,data,circuit,breaker,service,get,breaker,memory,circuit,breaker,fielddata,assert,equals,new,byte,size,value,200,byte,size,unit,mb,get,bytes,service,stats,get,stats,memory,circuit,breaker,parent,get,limit,assert,equals,new,byte,size,value,150,byte,size,unit,mb,get,bytes,request,circuit,breaker,get,limit,assert,equals,new,byte,size,value,150,byte,size,unit,mb,get,bytes,field,data,circuit,breaker,get,limit,double,field,data,used,bytes,field,data,circuit,breaker,add,estimate,bytes,and,maybe,break,new,byte,size,value,50,byte,size,unit,mb,get,bytes,should,not,break,assert,equals,new,byte,size,value,50,byte,size,unit,mb,get,bytes,field,data,used,bytes,0,0,double,request,used,bytes,request,circuit,breaker,add,estimate,bytes,and,maybe,break,new,byte,size,value,50,byte,size,unit,mb,get,bytes,should,not,break,assert,equals,new,byte,size,value,50,byte,size,unit,mb,get,bytes,request,used,bytes,0,0,request,used,bytes,request,circuit,breaker,add,estimate,bytes,and,maybe,break,new,byte,size,value,50,byte,size,unit,mb,get,bytes,should,not,break,assert,equals,new,byte,size,value,100,byte,size,unit,mb,get,bytes,request,used,bytes,0,0,circuit,breaking,exception,exception,expect,throws,circuit,breaking,exception,class,request,circuit,breaker,add,estimate,bytes,and,maybe,break,new,byte,size,value,50,byte,size,unit,mb,get,bytes,should,break,assert,that,exception,get,message,contains,string,parent,data,too,large,data,for,should,break,would,be,assert,that,exception,get,message,contains,string,which,is,larger,than,the,limit,of,209715200,200mb,assert,that,exception,get,message,contains,string,usages,request,157286400,150mb,fielddata,54001664,51,5mb,0,0b,accounting,0,0b
HierarchyCircuitBreakerServiceTests -> public void testBorrowingSiblingBreakerMemory() throws Exception;1541160764;Test that a breaker correctly redistributes to a different breaker, in_this case, the request breaker borrows space from the fielddata breaker;public void testBorrowingSiblingBreakerMemory() throws Exception {_        Settings clusterSettings = Settings.builder()_            .put(HierarchyCircuitBreakerService.USE_REAL_MEMORY_USAGE_SETTING.getKey(), false)_            .put(HierarchyCircuitBreakerService.TOTAL_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), "200mb")_            .put(HierarchyCircuitBreakerService.REQUEST_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), "150mb")_            .put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), "150mb")_            .build()__        try (CircuitBreakerService service = new HierarchyCircuitBreakerService(clusterSettings,_            new ClusterSettings(clusterSettings, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))) {_            CircuitBreaker requestCircuitBreaker = service.getBreaker(MemoryCircuitBreaker.REQUEST)__            CircuitBreaker fieldDataCircuitBreaker = service.getBreaker(MemoryCircuitBreaker.FIELDDATA)___            assertEquals(new ByteSizeValue(200, ByteSizeUnit.MB).getBytes(),_                service.stats().getStats(MemoryCircuitBreaker.PARENT).getLimit())__            assertEquals(new ByteSizeValue(150, ByteSizeUnit.MB).getBytes(), requestCircuitBreaker.getLimit())__            assertEquals(new ByteSizeValue(150, ByteSizeUnit.MB).getBytes(), fieldDataCircuitBreaker.getLimit())___            double fieldDataUsedBytes = fieldDataCircuitBreaker_                .addEstimateBytesAndMaybeBreak(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(), "should not break")__            assertEquals(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(), fieldDataUsedBytes, 0.0)__            double requestUsedBytes = requestCircuitBreaker.addEstimateBytesAndMaybeBreak(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(),_                "should not break")__            assertEquals(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(), requestUsedBytes, 0.0)__            requestUsedBytes = requestCircuitBreaker.addEstimateBytesAndMaybeBreak(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(),_                "should not break")__            assertEquals(new ByteSizeValue(100, ByteSizeUnit.MB).getBytes(), requestUsedBytes, 0.0)__            CircuitBreakingException exception = expectThrows(CircuitBreakingException.class, () -> requestCircuitBreaker_                .addEstimateBytesAndMaybeBreak(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(), "should break"))__            assertThat(exception.getMessage(), containsString("[parent] Data too large, data for [should break] would be"))__            assertThat(exception.getMessage(), containsString("which is larger than the limit of [209715200/200mb]"))__            assertThat(exception.getMessage(),_                containsString("usages [request=157286400/150mb, fielddata=54001664/51.5mb, in_flight_requests=0/0b, accounting=0/0b]"))__            assertThat(exception.getDurability(), equalTo(CircuitBreaker.Durability.TRANSIENT))__        }_    };test,that,a,breaker,correctly,redistributes,to,a,different,breaker,in,this,case,the,request,breaker,borrows,space,from,the,fielddata,breaker;public,void,test,borrowing,sibling,breaker,memory,throws,exception,settings,cluster,settings,settings,builder,put,hierarchy,circuit,breaker,service,get,key,false,put,hierarchy,circuit,breaker,service,get,key,200mb,put,hierarchy,circuit,breaker,service,get,key,150mb,put,hierarchy,circuit,breaker,service,get,key,150mb,build,try,circuit,breaker,service,service,new,hierarchy,circuit,breaker,service,cluster,settings,new,cluster,settings,cluster,settings,cluster,settings,circuit,breaker,request,circuit,breaker,service,get,breaker,memory,circuit,breaker,request,circuit,breaker,field,data,circuit,breaker,service,get,breaker,memory,circuit,breaker,fielddata,assert,equals,new,byte,size,value,200,byte,size,unit,mb,get,bytes,service,stats,get,stats,memory,circuit,breaker,parent,get,limit,assert,equals,new,byte,size,value,150,byte,size,unit,mb,get,bytes,request,circuit,breaker,get,limit,assert,equals,new,byte,size,value,150,byte,size,unit,mb,get,bytes,field,data,circuit,breaker,get,limit,double,field,data,used,bytes,field,data,circuit,breaker,add,estimate,bytes,and,maybe,break,new,byte,size,value,50,byte,size,unit,mb,get,bytes,should,not,break,assert,equals,new,byte,size,value,50,byte,size,unit,mb,get,bytes,field,data,used,bytes,0,0,double,request,used,bytes,request,circuit,breaker,add,estimate,bytes,and,maybe,break,new,byte,size,value,50,byte,size,unit,mb,get,bytes,should,not,break,assert,equals,new,byte,size,value,50,byte,size,unit,mb,get,bytes,request,used,bytes,0,0,request,used,bytes,request,circuit,breaker,add,estimate,bytes,and,maybe,break,new,byte,size,value,50,byte,size,unit,mb,get,bytes,should,not,break,assert,equals,new,byte,size,value,100,byte,size,unit,mb,get,bytes,request,used,bytes,0,0,circuit,breaking,exception,exception,expect,throws,circuit,breaking,exception,class,request,circuit,breaker,add,estimate,bytes,and,maybe,break,new,byte,size,value,50,byte,size,unit,mb,get,bytes,should,break,assert,that,exception,get,message,contains,string,parent,data,too,large,data,for,should,break,would,be,assert,that,exception,get,message,contains,string,which,is,larger,than,the,limit,of,209715200,200mb,assert,that,exception,get,message,contains,string,usages,request,157286400,150mb,fielddata,54001664,51,5mb,0,0b,accounting,0,0b,assert,that,exception,get,durability,equal,to,circuit,breaker,durability,transient
HierarchyCircuitBreakerServiceTests -> public void testBorrowingSiblingBreakerMemory() throws Exception;1541687604;Test that a breaker correctly redistributes to a different breaker, in_this case, the request breaker borrows space from the fielddata breaker;public void testBorrowingSiblingBreakerMemory() throws Exception {_        Settings clusterSettings = Settings.builder()_            .put(HierarchyCircuitBreakerService.USE_REAL_MEMORY_USAGE_SETTING.getKey(), false)_            .put(HierarchyCircuitBreakerService.TOTAL_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), "200mb")_            .put(HierarchyCircuitBreakerService.REQUEST_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), "150mb")_            .put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), "150mb")_            .build()__        try (CircuitBreakerService service = new HierarchyCircuitBreakerService(clusterSettings,_            new ClusterSettings(clusterSettings, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))) {_            CircuitBreaker requestCircuitBreaker = service.getBreaker(CircuitBreaker.REQUEST)__            CircuitBreaker fieldDataCircuitBreaker = service.getBreaker(CircuitBreaker.FIELDDATA)___            assertEquals(new ByteSizeValue(200, ByteSizeUnit.MB).getBytes(),_                service.stats().getStats(CircuitBreaker.PARENT).getLimit())__            assertEquals(new ByteSizeValue(150, ByteSizeUnit.MB).getBytes(), requestCircuitBreaker.getLimit())__            assertEquals(new ByteSizeValue(150, ByteSizeUnit.MB).getBytes(), fieldDataCircuitBreaker.getLimit())___            double fieldDataUsedBytes = fieldDataCircuitBreaker_                .addEstimateBytesAndMaybeBreak(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(), "should not break")__            assertEquals(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(), fieldDataUsedBytes, 0.0)__            double requestUsedBytes = requestCircuitBreaker.addEstimateBytesAndMaybeBreak(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(),_                "should not break")__            assertEquals(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(), requestUsedBytes, 0.0)__            requestUsedBytes = requestCircuitBreaker.addEstimateBytesAndMaybeBreak(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(),_                "should not break")__            assertEquals(new ByteSizeValue(100, ByteSizeUnit.MB).getBytes(), requestUsedBytes, 0.0)__            CircuitBreakingException exception = expectThrows(CircuitBreakingException.class, () -> requestCircuitBreaker_                .addEstimateBytesAndMaybeBreak(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(), "should break"))__            assertThat(exception.getMessage(), containsString("[parent] Data too large, data for [should break] would be"))__            assertThat(exception.getMessage(), containsString("which is larger than the limit of [209715200/200mb]"))__            assertThat(exception.getMessage(),_                containsString("usages [request=157286400/150mb, fielddata=54001664/51.5mb, in_flight_requests=0/0b, accounting=0/0b]"))__            assertThat(exception.getDurability(), equalTo(CircuitBreaker.Durability.TRANSIENT))__        }_    };test,that,a,breaker,correctly,redistributes,to,a,different,breaker,in,this,case,the,request,breaker,borrows,space,from,the,fielddata,breaker;public,void,test,borrowing,sibling,breaker,memory,throws,exception,settings,cluster,settings,settings,builder,put,hierarchy,circuit,breaker,service,get,key,false,put,hierarchy,circuit,breaker,service,get,key,200mb,put,hierarchy,circuit,breaker,service,get,key,150mb,put,hierarchy,circuit,breaker,service,get,key,150mb,build,try,circuit,breaker,service,service,new,hierarchy,circuit,breaker,service,cluster,settings,new,cluster,settings,cluster,settings,cluster,settings,circuit,breaker,request,circuit,breaker,service,get,breaker,circuit,breaker,request,circuit,breaker,field,data,circuit,breaker,service,get,breaker,circuit,breaker,fielddata,assert,equals,new,byte,size,value,200,byte,size,unit,mb,get,bytes,service,stats,get,stats,circuit,breaker,parent,get,limit,assert,equals,new,byte,size,value,150,byte,size,unit,mb,get,bytes,request,circuit,breaker,get,limit,assert,equals,new,byte,size,value,150,byte,size,unit,mb,get,bytes,field,data,circuit,breaker,get,limit,double,field,data,used,bytes,field,data,circuit,breaker,add,estimate,bytes,and,maybe,break,new,byte,size,value,50,byte,size,unit,mb,get,bytes,should,not,break,assert,equals,new,byte,size,value,50,byte,size,unit,mb,get,bytes,field,data,used,bytes,0,0,double,request,used,bytes,request,circuit,breaker,add,estimate,bytes,and,maybe,break,new,byte,size,value,50,byte,size,unit,mb,get,bytes,should,not,break,assert,equals,new,byte,size,value,50,byte,size,unit,mb,get,bytes,request,used,bytes,0,0,request,used,bytes,request,circuit,breaker,add,estimate,bytes,and,maybe,break,new,byte,size,value,50,byte,size,unit,mb,get,bytes,should,not,break,assert,equals,new,byte,size,value,100,byte,size,unit,mb,get,bytes,request,used,bytes,0,0,circuit,breaking,exception,exception,expect,throws,circuit,breaking,exception,class,request,circuit,breaker,add,estimate,bytes,and,maybe,break,new,byte,size,value,50,byte,size,unit,mb,get,bytes,should,break,assert,that,exception,get,message,contains,string,parent,data,too,large,data,for,should,break,would,be,assert,that,exception,get,message,contains,string,which,is,larger,than,the,limit,of,209715200,200mb,assert,that,exception,get,message,contains,string,usages,request,157286400,150mb,fielddata,54001664,51,5mb,0,0b,accounting,0,0b,assert,that,exception,get,durability,equal,to,circuit,breaker,durability,transient
