# id;timestamp;commentText;codeText;commentWords;codeWords
SimulatePipelineResponseTests -> public void testFromXContentWithFailures() throws IOException;1529658035;Test parsing {@link SimulatePipelineResponse} with inner failures as they don't support asserting on xcontent equivalence, given that_exceptions are not parsed back as the same original class. We run the usual {@link AbstractXContentTestCase#testFromXContent()}_without failures, and this other test with failures where we disable asserting on xcontent equivalence at the end.;public void testFromXContentWithFailures() throws IOException {_        Supplier<SimulatePipelineResponse> instanceSupplier = SimulatePipelineResponseTests::createTestInstanceWithFailures__        _        boolean assertToXContentEquivalence = false__        AbstractXContentTestCase.testFromXContent(NUMBER_OF_TEST_RUNS, instanceSupplier, supportsUnknownFields(), getShuffleFieldsExceptions(),_            getRandomFieldsExcludeFilter(), this::createParser, this::doParseInstance,_            this::assertEqualInstances, assertToXContentEquivalence, getToXContentParams())__    };test,parsing,link,simulate,pipeline,response,with,inner,failures,as,they,don,t,support,asserting,on,xcontent,equivalence,given,that,exceptions,are,not,parsed,back,as,the,same,original,class,we,run,the,usual,link,abstract,xcontent,test,case,test,from,xcontent,without,failures,and,this,other,test,with,failures,where,we,disable,asserting,on,xcontent,equivalence,at,the,end;public,void,test,from,xcontent,with,failures,throws,ioexception,supplier,simulate,pipeline,response,instance,supplier,simulate,pipeline,response,tests,create,test,instance,with,failures,boolean,assert,to,xcontent,equivalence,false,abstract,xcontent,test,case,test,from,xcontent,instance,supplier,supports,unknown,fields,get,shuffle,fields,exceptions,get,random,fields,exclude,filter,this,create,parser,this,do,parse,instance,this,assert,equal,instances,assert,to,xcontent,equivalence,get,to,xcontent,params
SimulatePipelineResponseTests -> public void testFromXContentWithFailures() throws IOException;1531179852;Test parsing {@link SimulatePipelineResponse} with inner failures as they don't support asserting on xcontent equivalence, given that_exceptions are not parsed back as the same original class. We run the usual {@link AbstractXContentTestCase#testFromXContent()}_without failures, and this other test with failures where we disable asserting on xcontent equivalence at the end.;public void testFromXContentWithFailures() throws IOException {_        Supplier<SimulatePipelineResponse> instanceSupplier = SimulatePipelineResponseTests::createTestInstanceWithFailures__        _        boolean assertToXContentEquivalence = false__        AbstractXContentTestCase.testFromXContent(NUMBER_OF_TEST_RUNS, instanceSupplier, supportsUnknownFields(), getShuffleFieldsExceptions(),_            getRandomFieldsExcludeFilter(), this::createParser, this::doParseInstance,_            this::assertEqualInstances, assertToXContentEquivalence, getToXContentParams())__    };test,parsing,link,simulate,pipeline,response,with,inner,failures,as,they,don,t,support,asserting,on,xcontent,equivalence,given,that,exceptions,are,not,parsed,back,as,the,same,original,class,we,run,the,usual,link,abstract,xcontent,test,case,test,from,xcontent,without,failures,and,this,other,test,with,failures,where,we,disable,asserting,on,xcontent,equivalence,at,the,end;public,void,test,from,xcontent,with,failures,throws,ioexception,supplier,simulate,pipeline,response,instance,supplier,simulate,pipeline,response,tests,create,test,instance,with,failures,boolean,assert,to,xcontent,equivalence,false,abstract,xcontent,test,case,test,from,xcontent,instance,supplier,supports,unknown,fields,get,shuffle,fields,exceptions,get,random,fields,exclude,filter,this,create,parser,this,do,parse,instance,this,assert,equal,instances,assert,to,xcontent,equivalence,get,to,xcontent,params
SimulatePipelineResponseTests -> public void testFromXContentWithFailures() throws IOException;1540583181;Test parsing {@link SimulatePipelineResponse} with inner failures as they don't support asserting on xcontent equivalence, given that_exceptions are not parsed back as the same original class. We run the usual {@link AbstractXContentTestCase#testFromXContent()}_without failures, and this other test with failures where we disable asserting on xcontent equivalence at the end.;public void testFromXContentWithFailures() throws IOException {_        Supplier<SimulatePipelineResponse> instanceSupplier = SimulatePipelineResponseTests::createTestInstanceWithFailures__        _        boolean assertToXContentEquivalence = false__        AbstractXContentTestCase.testFromXContent(NUMBER_OF_TEST_RUNS, instanceSupplier, supportsUnknownFields(),_                getShuffleFieldsExceptions(), getRandomFieldsExcludeFilter(), this::createParser, this::doParseInstance,_                this::assertEqualInstances, assertToXContentEquivalence, getToXContentParams())__    };test,parsing,link,simulate,pipeline,response,with,inner,failures,as,they,don,t,support,asserting,on,xcontent,equivalence,given,that,exceptions,are,not,parsed,back,as,the,same,original,class,we,run,the,usual,link,abstract,xcontent,test,case,test,from,xcontent,without,failures,and,this,other,test,with,failures,where,we,disable,asserting,on,xcontent,equivalence,at,the,end;public,void,test,from,xcontent,with,failures,throws,ioexception,supplier,simulate,pipeline,response,instance,supplier,simulate,pipeline,response,tests,create,test,instance,with,failures,boolean,assert,to,xcontent,equivalence,false,abstract,xcontent,test,case,test,from,xcontent,instance,supplier,supports,unknown,fields,get,shuffle,fields,exceptions,get,random,fields,exclude,filter,this,create,parser,this,do,parse,instance,this,assert,equal,instances,assert,to,xcontent,equivalence,get,to,xcontent,params
