commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> getPlugins() {     return Collections.singleton(InternalSettingsPlugin.class). }
false;public;0;13;;public void testIncludeInObjectNotAllowed() throws Exception {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").endObject().endObject()).     DocumentMapper docMapper = createIndex("test").mapperService().documentMapperParser().parse("type", new CompressedXContent(mapping)).     try {         docMapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("_id", "1").endObject()), XContentType.JSON)).         fail("Expected failure to parse metadata field").     } catch (MapperParsingException e) {         assertTrue(e.getMessage(), e.getMessage().contains("Field [_id] is a metadata field and cannot be added inside a document")).     } }
false;public;0;12;;public void testDefaults() throws IOException {     Settings indexSettings = Settings.EMPTY.     MapperService mapperService = createIndex("test", indexSettings).mapperService().     DocumentMapper mapper = mapperService.merge("type", new CompressedXContent("{\"type\":{}}"), MergeReason.MAPPING_UPDATE).     ParsedDocument document = mapper.parse(new SourceToParse("index", "type", "id", new BytesArray("{}"), XContentType.JSON)).     IndexableField[] fields = document.rootDoc().getFields(IdFieldMapper.NAME).     assertEquals(1, fields.length).     assertEquals(IndexOptions.DOCS, fields[0].fieldType().indexOptions()).     assertTrue(fields[0].fieldType().stored()).     assertEquals(Uid.encodeId("id"), fields[0].binaryValue()). }
