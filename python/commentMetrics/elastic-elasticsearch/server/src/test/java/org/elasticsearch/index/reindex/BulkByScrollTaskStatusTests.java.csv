# id;timestamp;commentText;codeText;commentWords;codeWords
BulkByScrollTaskStatusTests -> public void testFromXContentWithFailures() throws IOException;1535552903;Test parsing {@link Status} with inner failures as they don't support asserting on xcontent equivalence, given that_exceptions are not parsed back as the same original class. We run the usual {@link AbstractXContentTestCase#testFromXContent()}_without failures, and this other test with failures where we disable asserting on xcontent equivalence at the end.;public void testFromXContentWithFailures() throws IOException {_        Supplier<Status> instanceSupplier = BulkByScrollTaskStatusTests::randomStatus__        _        _        boolean supportsUnknownFields = true__        _        boolean assertToXContentEquivalence = false__        AbstractXContentTestCase.testFromXContent(NUMBER_OF_TEST_RUNS, instanceSupplier, supportsUnknownFields, Strings.EMPTY_ARRAY,_            getRandomFieldsExcludeFilter(), this::createParser, this::doParseInstance,_            this::assertEqualInstances, assertToXContentEquivalence, ToXContent.EMPTY_PARAMS)__    };test,parsing,link,status,with,inner,failures,as,they,don,t,support,asserting,on,xcontent,equivalence,given,that,exceptions,are,not,parsed,back,as,the,same,original,class,we,run,the,usual,link,abstract,xcontent,test,case,test,from,xcontent,without,failures,and,this,other,test,with,failures,where,we,disable,asserting,on,xcontent,equivalence,at,the,end;public,void,test,from,xcontent,with,failures,throws,ioexception,supplier,status,instance,supplier,bulk,by,scroll,task,status,tests,random,status,boolean,supports,unknown,fields,true,boolean,assert,to,xcontent,equivalence,false,abstract,xcontent,test,case,test,from,xcontent,instance,supplier,supports,unknown,fields,strings,get,random,fields,exclude,filter,this,create,parser,this,do,parse,instance,this,assert,equal,instances,assert,to,xcontent,equivalence,to,xcontent
BulkByScrollTaskStatusTests -> public void testFromXContentWithFailures() throws IOException;1535965276;Test parsing {@link Status} with inner failures as they don't support asserting on xcontent equivalence, given that_exceptions are not parsed back as the same original class. We run the usual {@link AbstractXContentTestCase#testFromXContent()}_without failures, and this other test with failures where we disable asserting on xcontent equivalence at the end.;public void testFromXContentWithFailures() throws IOException {_        Supplier<Status> instanceSupplier = BulkByScrollTaskStatusTests::randomStatus__        _        _        boolean supportsUnknownFields = true__        _        boolean assertToXContentEquivalence = false__        AbstractXContentTestCase.testFromXContent(NUMBER_OF_TEST_RUNS, instanceSupplier, supportsUnknownFields, Strings.EMPTY_ARRAY,_            getRandomFieldsExcludeFilter(), this::createParser, this::doParseInstance,_            this::assertEqualInstances, assertToXContentEquivalence, ToXContent.EMPTY_PARAMS)__    };test,parsing,link,status,with,inner,failures,as,they,don,t,support,asserting,on,xcontent,equivalence,given,that,exceptions,are,not,parsed,back,as,the,same,original,class,we,run,the,usual,link,abstract,xcontent,test,case,test,from,xcontent,without,failures,and,this,other,test,with,failures,where,we,disable,asserting,on,xcontent,equivalence,at,the,end;public,void,test,from,xcontent,with,failures,throws,ioexception,supplier,status,instance,supplier,bulk,by,scroll,task,status,tests,random,status,boolean,supports,unknown,fields,true,boolean,assert,to,xcontent,equivalence,false,abstract,xcontent,test,case,test,from,xcontent,instance,supplier,supports,unknown,fields,strings,get,random,fields,exclude,filter,this,create,parser,this,do,parse,instance,this,assert,equal,instances,assert,to,xcontent,equivalence,to,xcontent
BulkByScrollTaskStatusTests -> public static void assertTaskStatusEquals(Version version, BulkByScrollTask.Status expected, BulkByScrollTask.Status actual);1524684173;Assert that two task statuses are equal after serialization._@param version the version at which expected was serialized;public static void assertTaskStatusEquals(Version version, BulkByScrollTask.Status expected, BulkByScrollTask.Status actual) {_        assertEquals(expected.getTotal(), actual.getTotal())__        assertEquals(expected.getUpdated(), actual.getUpdated())__        assertEquals(expected.getCreated(), actual.getCreated())__        assertEquals(expected.getDeleted(), actual.getDeleted())__        assertEquals(expected.getBatches(), actual.getBatches())__        assertEquals(expected.getVersionConflicts(), actual.getVersionConflicts())__        assertEquals(expected.getNoops(), actual.getNoops())__        assertEquals(expected.getBulkRetries(), actual.getBulkRetries())__        assertEquals(expected.getSearchRetries(), actual.getSearchRetries())__        assertEquals(expected.getThrottled(), actual.getThrottled())__        assertEquals(expected.getRequestsPerSecond(), actual.getRequestsPerSecond(), 0f)__        assertEquals(expected.getReasonCancelled(), actual.getReasonCancelled())__        assertEquals(expected.getThrottledUntil(), actual.getThrottledUntil())__        if (version.onOrAfter(Version.V_5_1_1)) {_            assertThat(actual.getSliceStatuses(), Matchers.hasSize(expected.getSliceStatuses().size()))__            for (int i = 0_ i < expected.getSliceStatuses().size()_ i++) {_                BulkByScrollTask.StatusOrException sliceStatus = expected.getSliceStatuses().get(i)__                if (sliceStatus == null) {_                    assertNull(actual.getSliceStatuses().get(i))__                } else if (sliceStatus.getException() == null) {_                    assertNull(actual.getSliceStatuses().get(i).getException())__                    assertTaskStatusEquals(version, sliceStatus.getStatus(), actual.getSliceStatuses().get(i).getStatus())__                } else {_                    assertNull(actual.getSliceStatuses().get(i).getStatus())__                    _                    assertEquals(sliceStatus.getException().getMessage(), actual.getSliceStatuses().get(i).getException().getMessage())__                }_            }_        } else {_            assertEquals(emptyList(), actual.getSliceStatuses())__        }_    };assert,that,two,task,statuses,are,equal,after,serialization,param,version,the,version,at,which,expected,was,serialized;public,static,void,assert,task,status,equals,version,version,bulk,by,scroll,task,status,expected,bulk,by,scroll,task,status,actual,assert,equals,expected,get,total,actual,get,total,assert,equals,expected,get,updated,actual,get,updated,assert,equals,expected,get,created,actual,get,created,assert,equals,expected,get,deleted,actual,get,deleted,assert,equals,expected,get,batches,actual,get,batches,assert,equals,expected,get,version,conflicts,actual,get,version,conflicts,assert,equals,expected,get,noops,actual,get,noops,assert,equals,expected,get,bulk,retries,actual,get,bulk,retries,assert,equals,expected,get,search,retries,actual,get,search,retries,assert,equals,expected,get,throttled,actual,get,throttled,assert,equals,expected,get,requests,per,second,actual,get,requests,per,second,0f,assert,equals,expected,get,reason,cancelled,actual,get,reason,cancelled,assert,equals,expected,get,throttled,until,actual,get,throttled,until,if,version,on,or,after,version,assert,that,actual,get,slice,statuses,matchers,has,size,expected,get,slice,statuses,size,for,int,i,0,i,expected,get,slice,statuses,size,i,bulk,by,scroll,task,status,or,exception,slice,status,expected,get,slice,statuses,get,i,if,slice,status,null,assert,null,actual,get,slice,statuses,get,i,else,if,slice,status,get,exception,null,assert,null,actual,get,slice,statuses,get,i,get,exception,assert,task,status,equals,version,slice,status,get,status,actual,get,slice,statuses,get,i,get,status,else,assert,null,actual,get,slice,statuses,get,i,get,status,assert,equals,slice,status,get,exception,get,message,actual,get,slice,statuses,get,i,get,exception,get,message,else,assert,equals,empty,list,actual,get,slice,statuses
BulkByScrollTaskStatusTests -> public static void assertTaskStatusEquals(Version version, BulkByScrollTask.Status expected, BulkByScrollTask.Status actual);1528762805;Assert that two task statuses are equal after serialization._@param version the version at which expected was serialized;public static void assertTaskStatusEquals(Version version, BulkByScrollTask.Status expected, BulkByScrollTask.Status actual) {_        assertEquals(expected.getTotal(), actual.getTotal())__        assertEquals(expected.getUpdated(), actual.getUpdated())__        assertEquals(expected.getCreated(), actual.getCreated())__        assertEquals(expected.getDeleted(), actual.getDeleted())__        assertEquals(expected.getBatches(), actual.getBatches())__        assertEquals(expected.getVersionConflicts(), actual.getVersionConflicts())__        assertEquals(expected.getNoops(), actual.getNoops())__        assertEquals(expected.getBulkRetries(), actual.getBulkRetries())__        assertEquals(expected.getSearchRetries(), actual.getSearchRetries())__        assertEquals(expected.getThrottled(), actual.getThrottled())__        assertEquals(expected.getRequestsPerSecond(), actual.getRequestsPerSecond(), 0f)__        assertEquals(expected.getReasonCancelled(), actual.getReasonCancelled())__        assertEquals(expected.getThrottledUntil(), actual.getThrottledUntil())__        if (version.onOrAfter(Version.V_5_1_1)) {_            assertThat(actual.getSliceStatuses(), Matchers.hasSize(expected.getSliceStatuses().size()))__            for (int i = 0_ i < expected.getSliceStatuses().size()_ i++) {_                BulkByScrollTask.StatusOrException sliceStatus = expected.getSliceStatuses().get(i)__                if (sliceStatus == null) {_                    assertNull(actual.getSliceStatuses().get(i))__                } else if (sliceStatus.getException() == null) {_                    assertNull(actual.getSliceStatuses().get(i).getException())__                    assertTaskStatusEquals(version, sliceStatus.getStatus(), actual.getSliceStatuses().get(i).getStatus())__                } else {_                    assertNull(actual.getSliceStatuses().get(i).getStatus())__                    _                    assertEquals(sliceStatus.getException().getMessage(), actual.getSliceStatuses().get(i).getException().getMessage())__                }_            }_        } else {_            assertEquals(emptyList(), actual.getSliceStatuses())__        }_    };assert,that,two,task,statuses,are,equal,after,serialization,param,version,the,version,at,which,expected,was,serialized;public,static,void,assert,task,status,equals,version,version,bulk,by,scroll,task,status,expected,bulk,by,scroll,task,status,actual,assert,equals,expected,get,total,actual,get,total,assert,equals,expected,get,updated,actual,get,updated,assert,equals,expected,get,created,actual,get,created,assert,equals,expected,get,deleted,actual,get,deleted,assert,equals,expected,get,batches,actual,get,batches,assert,equals,expected,get,version,conflicts,actual,get,version,conflicts,assert,equals,expected,get,noops,actual,get,noops,assert,equals,expected,get,bulk,retries,actual,get,bulk,retries,assert,equals,expected,get,search,retries,actual,get,search,retries,assert,equals,expected,get,throttled,actual,get,throttled,assert,equals,expected,get,requests,per,second,actual,get,requests,per,second,0f,assert,equals,expected,get,reason,cancelled,actual,get,reason,cancelled,assert,equals,expected,get,throttled,until,actual,get,throttled,until,if,version,on,or,after,version,assert,that,actual,get,slice,statuses,matchers,has,size,expected,get,slice,statuses,size,for,int,i,0,i,expected,get,slice,statuses,size,i,bulk,by,scroll,task,status,or,exception,slice,status,expected,get,slice,statuses,get,i,if,slice,status,null,assert,null,actual,get,slice,statuses,get,i,else,if,slice,status,get,exception,null,assert,null,actual,get,slice,statuses,get,i,get,exception,assert,task,status,equals,version,slice,status,get,status,actual,get,slice,statuses,get,i,get,status,else,assert,null,actual,get,slice,statuses,get,i,get,status,assert,equals,slice,status,get,exception,get,message,actual,get,slice,statuses,get,i,get,exception,get,message,else,assert,equals,empty,list,actual,get,slice,statuses
BulkByScrollTaskStatusTests -> public static void assertTaskStatusEquals(Version version, BulkByScrollTask.Status expected, BulkByScrollTask.Status actual);1535139672;Assert that two task statuses are equal after serialization._@param version the version at which expected was serialized;public static void assertTaskStatusEquals(Version version, BulkByScrollTask.Status expected, BulkByScrollTask.Status actual) {_        assertEquals(expected.getTotal(), actual.getTotal())__        assertEquals(expected.getUpdated(), actual.getUpdated())__        assertEquals(expected.getCreated(), actual.getCreated())__        assertEquals(expected.getDeleted(), actual.getDeleted())__        assertEquals(expected.getBatches(), actual.getBatches())__        assertEquals(expected.getVersionConflicts(), actual.getVersionConflicts())__        assertEquals(expected.getNoops(), actual.getNoops())__        assertEquals(expected.getBulkRetries(), actual.getBulkRetries())__        assertEquals(expected.getSearchRetries(), actual.getSearchRetries())__        assertEquals(expected.getThrottled(), actual.getThrottled())__        assertEquals(expected.getRequestsPerSecond(), actual.getRequestsPerSecond(), 0f)__        assertEquals(expected.getReasonCancelled(), actual.getReasonCancelled())__        assertEquals(expected.getThrottledUntil(), actual.getThrottledUntil())__        assertThat(actual.getSliceStatuses(), Matchers.hasSize(expected.getSliceStatuses().size()))__        for (int i = 0_ i < expected.getSliceStatuses().size()_ i++) {_            BulkByScrollTask.StatusOrException sliceStatus = expected.getSliceStatuses().get(i)__            if (sliceStatus == null) {_                assertNull(actual.getSliceStatuses().get(i))__            } else if (sliceStatus.getException() == null) {_                assertNull(actual.getSliceStatuses().get(i).getException())__                assertTaskStatusEquals(version, sliceStatus.getStatus(), actual.getSliceStatuses().get(i).getStatus())__            } else {_                assertNull(actual.getSliceStatuses().get(i).getStatus())__                _                assertEquals(sliceStatus.getException().getMessage(), actual.getSliceStatuses().get(i).getException().getMessage())__            }_        }_    };assert,that,two,task,statuses,are,equal,after,serialization,param,version,the,version,at,which,expected,was,serialized;public,static,void,assert,task,status,equals,version,version,bulk,by,scroll,task,status,expected,bulk,by,scroll,task,status,actual,assert,equals,expected,get,total,actual,get,total,assert,equals,expected,get,updated,actual,get,updated,assert,equals,expected,get,created,actual,get,created,assert,equals,expected,get,deleted,actual,get,deleted,assert,equals,expected,get,batches,actual,get,batches,assert,equals,expected,get,version,conflicts,actual,get,version,conflicts,assert,equals,expected,get,noops,actual,get,noops,assert,equals,expected,get,bulk,retries,actual,get,bulk,retries,assert,equals,expected,get,search,retries,actual,get,search,retries,assert,equals,expected,get,throttled,actual,get,throttled,assert,equals,expected,get,requests,per,second,actual,get,requests,per,second,0f,assert,equals,expected,get,reason,cancelled,actual,get,reason,cancelled,assert,equals,expected,get,throttled,until,actual,get,throttled,until,assert,that,actual,get,slice,statuses,matchers,has,size,expected,get,slice,statuses,size,for,int,i,0,i,expected,get,slice,statuses,size,i,bulk,by,scroll,task,status,or,exception,slice,status,expected,get,slice,statuses,get,i,if,slice,status,null,assert,null,actual,get,slice,statuses,get,i,else,if,slice,status,get,exception,null,assert,null,actual,get,slice,statuses,get,i,get,exception,assert,task,status,equals,version,slice,status,get,status,actual,get,slice,statuses,get,i,get,status,else,assert,null,actual,get,slice,statuses,get,i,get,status,assert,equals,slice,status,get,exception,get,message,actual,get,slice,statuses,get,i,get,exception,get,message
BulkByScrollTaskStatusTests -> public static void assertTaskStatusEquals(Version version, BulkByScrollTask.Status expected, BulkByScrollTask.Status actual);1535552903;Assert that two task statuses are equal after serialization._@param version the version at which expected was serialized;public static void assertTaskStatusEquals(Version version, BulkByScrollTask.Status expected, BulkByScrollTask.Status actual) {_        assertEquals(expected.getTotal(), actual.getTotal())__        assertEquals(expected.getUpdated(), actual.getUpdated())__        assertEquals(expected.getCreated(), actual.getCreated())__        assertEquals(expected.getDeleted(), actual.getDeleted())__        assertEquals(expected.getBatches(), actual.getBatches())__        assertEquals(expected.getVersionConflicts(), actual.getVersionConflicts())__        assertEquals(expected.getNoops(), actual.getNoops())__        assertEquals(expected.getBulkRetries(), actual.getBulkRetries())__        assertEquals(expected.getSearchRetries(), actual.getSearchRetries())__        assertEquals(expected.getThrottled(), actual.getThrottled())__        assertEquals(expected.getRequestsPerSecond(), actual.getRequestsPerSecond(), 0f)__        assertEquals(expected.getReasonCancelled(), actual.getReasonCancelled())__        assertEquals(expected.getThrottledUntil(), actual.getThrottledUntil())__        assertThat(actual.getSliceStatuses(), Matchers.hasSize(expected.getSliceStatuses().size()))__        for (int i = 0_ i < expected.getSliceStatuses().size()_ i++) {_            BulkByScrollTask.StatusOrException sliceStatus = expected.getSliceStatuses().get(i)__            if (sliceStatus == null) {_                assertNull(actual.getSliceStatuses().get(i))__            } else if (sliceStatus.getException() == null) {_                assertNull(actual.getSliceStatuses().get(i).getException())__                assertTaskStatusEquals(version, sliceStatus.getStatus(), actual.getSliceStatuses().get(i).getStatus())__            } else {_                assertNull(actual.getSliceStatuses().get(i).getStatus())__                _                assertEquals(sliceStatus.getException().getMessage(), actual.getSliceStatuses().get(i).getException().getMessage())__            }_        }_    };assert,that,two,task,statuses,are,equal,after,serialization,param,version,the,version,at,which,expected,was,serialized;public,static,void,assert,task,status,equals,version,version,bulk,by,scroll,task,status,expected,bulk,by,scroll,task,status,actual,assert,equals,expected,get,total,actual,get,total,assert,equals,expected,get,updated,actual,get,updated,assert,equals,expected,get,created,actual,get,created,assert,equals,expected,get,deleted,actual,get,deleted,assert,equals,expected,get,batches,actual,get,batches,assert,equals,expected,get,version,conflicts,actual,get,version,conflicts,assert,equals,expected,get,noops,actual,get,noops,assert,equals,expected,get,bulk,retries,actual,get,bulk,retries,assert,equals,expected,get,search,retries,actual,get,search,retries,assert,equals,expected,get,throttled,actual,get,throttled,assert,equals,expected,get,requests,per,second,actual,get,requests,per,second,0f,assert,equals,expected,get,reason,cancelled,actual,get,reason,cancelled,assert,equals,expected,get,throttled,until,actual,get,throttled,until,assert,that,actual,get,slice,statuses,matchers,has,size,expected,get,slice,statuses,size,for,int,i,0,i,expected,get,slice,statuses,size,i,bulk,by,scroll,task,status,or,exception,slice,status,expected,get,slice,statuses,get,i,if,slice,status,null,assert,null,actual,get,slice,statuses,get,i,else,if,slice,status,get,exception,null,assert,null,actual,get,slice,statuses,get,i,get,exception,assert,task,status,equals,version,slice,status,get,status,actual,get,slice,statuses,get,i,get,status,else,assert,null,actual,get,slice,statuses,get,i,get,status,assert,equals,slice,status,get,exception,get,message,actual,get,slice,statuses,get,i,get,exception,get,message
BulkByScrollTaskStatusTests -> public static void assertTaskStatusEquals(Version version, BulkByScrollTask.Status expected, BulkByScrollTask.Status actual);1535965276;Assert that two task statuses are equal after serialization._@param version the version at which expected was serialized;public static void assertTaskStatusEquals(Version version, BulkByScrollTask.Status expected, BulkByScrollTask.Status actual) {_        assertEquals(expected.getTotal(), actual.getTotal())__        assertEquals(expected.getUpdated(), actual.getUpdated())__        assertEquals(expected.getCreated(), actual.getCreated())__        assertEquals(expected.getDeleted(), actual.getDeleted())__        assertEquals(expected.getBatches(), actual.getBatches())__        assertEquals(expected.getVersionConflicts(), actual.getVersionConflicts())__        assertEquals(expected.getNoops(), actual.getNoops())__        assertEquals(expected.getBulkRetries(), actual.getBulkRetries())__        assertEquals(expected.getSearchRetries(), actual.getSearchRetries())__        assertEquals(expected.getThrottled(), actual.getThrottled())__        assertEquals(expected.getRequestsPerSecond(), actual.getRequestsPerSecond(), 0f)__        assertEquals(expected.getReasonCancelled(), actual.getReasonCancelled())__        assertEquals(expected.getThrottledUntil(), actual.getThrottledUntil())__        assertThat(actual.getSliceStatuses(), Matchers.hasSize(expected.getSliceStatuses().size()))__        for (int i = 0_ i < expected.getSliceStatuses().size()_ i++) {_            BulkByScrollTask.StatusOrException sliceStatus = expected.getSliceStatuses().get(i)__            if (sliceStatus == null) {_                assertNull(actual.getSliceStatuses().get(i))__            } else if (sliceStatus.getException() == null) {_                assertNull(actual.getSliceStatuses().get(i).getException())__                assertTaskStatusEquals(version, sliceStatus.getStatus(), actual.getSliceStatuses().get(i).getStatus())__            } else {_                assertNull(actual.getSliceStatuses().get(i).getStatus())__                _                assertEquals(sliceStatus.getException().getMessage(), actual.getSliceStatuses().get(i).getException().getMessage())__            }_        }_    };assert,that,two,task,statuses,are,equal,after,serialization,param,version,the,version,at,which,expected,was,serialized;public,static,void,assert,task,status,equals,version,version,bulk,by,scroll,task,status,expected,bulk,by,scroll,task,status,actual,assert,equals,expected,get,total,actual,get,total,assert,equals,expected,get,updated,actual,get,updated,assert,equals,expected,get,created,actual,get,created,assert,equals,expected,get,deleted,actual,get,deleted,assert,equals,expected,get,batches,actual,get,batches,assert,equals,expected,get,version,conflicts,actual,get,version,conflicts,assert,equals,expected,get,noops,actual,get,noops,assert,equals,expected,get,bulk,retries,actual,get,bulk,retries,assert,equals,expected,get,search,retries,actual,get,search,retries,assert,equals,expected,get,throttled,actual,get,throttled,assert,equals,expected,get,requests,per,second,actual,get,requests,per,second,0f,assert,equals,expected,get,reason,cancelled,actual,get,reason,cancelled,assert,equals,expected,get,throttled,until,actual,get,throttled,until,assert,that,actual,get,slice,statuses,matchers,has,size,expected,get,slice,statuses,size,for,int,i,0,i,expected,get,slice,statuses,size,i,bulk,by,scroll,task,status,or,exception,slice,status,expected,get,slice,statuses,get,i,if,slice,status,null,assert,null,actual,get,slice,statuses,get,i,else,if,slice,status,get,exception,null,assert,null,actual,get,slice,statuses,get,i,get,exception,assert,task,status,equals,version,slice,status,get,status,actual,get,slice,statuses,get,i,get,status,else,assert,null,actual,get,slice,statuses,get,i,get,status,assert,equals,slice,status,get,exception,get,message,actual,get,slice,statuses,get,i,get,exception,get,message
