commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;public void testSimpleTerm() throws IOException {     CannedTokenStream ts = new CannedTokenStream(new Token("term1", 1, 2)).     IntervalsSource source = BUILDER.analyzeText(new CachingTokenFilter(ts), -1, true).     IntervalsSource expected = Intervals.term("term1").     assertEquals(expected, source). }
false;public;0;16;;public void testOrdered() throws IOException {     CannedTokenStream ts = new CannedTokenStream(new Token("term1", 1, 2), new Token("term2", 3, 4), new Token("term3", 5, 6)).     IntervalsSource source = BUILDER.analyzeText(new CachingTokenFilter(ts), -1, true).     IntervalsSource expected = Intervals.ordered(Intervals.term("term1"), Intervals.term("term2"), Intervals.term("term3")).     assertEquals(expected, source). }
false;public;0;16;;public void testUnordered() throws IOException {     CannedTokenStream ts = new CannedTokenStream(new Token("term1", 1, 2), new Token("term2", 3, 4), new Token("term3", 5, 6)).     IntervalsSource source = BUILDER.analyzeText(new CachingTokenFilter(ts), -1, false).     IntervalsSource expected = Intervals.unordered(Intervals.term("term1"), Intervals.term("term2"), Intervals.term("term3")).     assertEquals(expected, source). }
false;public;0;16;;public void testPhrase() throws IOException {     CannedTokenStream ts = new CannedTokenStream(new Token("term1", 1, 2), new Token("term2", 3, 4), new Token("term3", 5, 6)).     IntervalsSource source = BUILDER.analyzeText(new CachingTokenFilter(ts), 0, true).     IntervalsSource expected = Intervals.phrase(Intervals.term("term1"), Intervals.term("term2"), Intervals.term("term3")).     assertEquals(expected, source). }
false;public;0;17;;public void testSimpleSynonyms() throws IOException {     CannedTokenStream ts = new CannedTokenStream(new Token("term1", 1, 2), new Token("term2", 3, 4), new Token("term4", 0, 3, 4), new Token("term3", 5, 6)).     IntervalsSource source = BUILDER.analyzeText(new CachingTokenFilter(ts), -1, true).     IntervalsSource expected = Intervals.ordered(Intervals.term("term1"), Intervals.or(Intervals.term("term2"), Intervals.term("term4")), Intervals.term("term3")).     assertEquals(expected, source). }
false;public;0;25;;public void testGraphSynonyms() throws IOException {     // term1 term2/term3:2 term4 term5     Token graphToken = new Token("term2", 3, 4).     graphToken.setPositionLength(2).     CannedTokenStream ts = new CannedTokenStream(new Token("term1", 1, 2), graphToken, new Token("term3", 0, 3, 4), new Token("term4", 5, 6), new Token("term5", 6, 7)).     IntervalsSource source = BUILDER.analyzeText(new CachingTokenFilter(ts), -1, true).     IntervalsSource expected = Intervals.ordered(Intervals.term("term1"), Intervals.or(Intervals.term("term2"), Intervals.phrase("term3", "term4")), Intervals.term("term5")).     assertEquals(expected, source). }
