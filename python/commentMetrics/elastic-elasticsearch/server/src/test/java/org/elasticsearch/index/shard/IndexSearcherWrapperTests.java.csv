commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public DirectoryReader wrap(DirectoryReader reader) throws IOException {     return new FieldMaskingReader("field", reader, closeCalls). }
false;public;1;4;;@Override public IndexSearcher wrap(IndexSearcher searcher) throws EngineException {     return searcher. }
false;public;0;49;;public void testReaderCloseListenerIsCalled() throws IOException {     Directory dir = newDirectory().     IndexWriterConfig iwc = newIndexWriterConfig().     IndexWriter writer = new IndexWriter(dir, iwc).     Document doc = new Document().     doc.add(new StringField("id", "1", random().nextBoolean() ? Field.Store.YES : Field.Store.NO)).     doc.add(new TextField("field", "doc", random().nextBoolean() ? Field.Store.YES : Field.Store.NO)).     writer.addDocument(doc).     DirectoryReader open = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer), new ShardId("foo", "_na_", 1)).     IndexSearcher searcher = new IndexSearcher(open).     assertEquals(1, searcher.search(new TermQuery(new Term("field", "doc")), 1).totalHits.value).     final AtomicInteger closeCalls = new AtomicInteger(0).     IndexSearcherWrapper wrapper = new IndexSearcherWrapper() {          @Override         public DirectoryReader wrap(DirectoryReader reader) throws IOException {             return new FieldMaskingReader("field", reader, closeCalls).         }          @Override         public IndexSearcher wrap(IndexSearcher searcher) throws EngineException {             return searcher.         }     }.     final int sourceRefCount = open.getRefCount().     final AtomicInteger count = new AtomicInteger().     final AtomicInteger outerCount = new AtomicInteger().     final AtomicBoolean closeCalled = new AtomicBoolean(false).     final Engine.Searcher wrap = wrapper.wrap(new Engine.Searcher("foo", searcher, () -> closeCalled.set(true))).     assertEquals(1, wrap.reader().getRefCount()).     ElasticsearchDirectoryReader.addReaderCloseListener(wrap.getDirectoryReader(), key -> {         if (key == open.getReaderCacheHelper().getKey()) {             count.incrementAndGet().         }         outerCount.incrementAndGet().     }).     assertEquals(0, wrap.searcher().search(new TermQuery(new Term("field", "doc")), 1).totalHits.value).     wrap.close().     assertFalse("wrapped reader is closed", wrap.reader().tryIncRef()).     assertEquals(sourceRefCount, open.getRefCount()).     assertTrue(closeCalled.get()).     assertEquals(1, closeCalls.get()).     IOUtils.close(open, writer, dir).     assertEquals(1, outerCount.get()).     assertEquals(1, count.get()).     assertEquals(0, open.getRefCount()).     assertEquals(1, closeCalls.get()). }
false;public;1;4;;@Override public DirectoryReader wrap(DirectoryReader reader) throws IOException {     return new FieldMaskingReader("field", reader, closeCalls). }
false;public;1;4;;@Override public IndexSearcher wrap(IndexSearcher searcher) throws EngineException {     return searcher. }
false;public;0;41;;public void testIsCacheable() throws IOException {     Directory dir = newDirectory().     IndexWriterConfig iwc = newIndexWriterConfig().     IndexWriter writer = new IndexWriter(dir, iwc).     Document doc = new Document().     doc.add(new StringField("id", "1", random().nextBoolean() ? Field.Store.YES : Field.Store.NO)).     doc.add(new TextField("field", "doc", random().nextBoolean() ? Field.Store.YES : Field.Store.NO)).     writer.addDocument(doc).     DirectoryReader open = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer), new ShardId("foo", "_na_", 1)).     IndexSearcher searcher = new IndexSearcher(open).     assertEquals(1, searcher.search(new TermQuery(new Term("field", "doc")), 1).totalHits.value).     searcher.setSimilarity(iwc.getSimilarity()).     final AtomicInteger closeCalls = new AtomicInteger(0).     IndexSearcherWrapper wrapper = new IndexSearcherWrapper() {          @Override         public DirectoryReader wrap(DirectoryReader reader) throws IOException {             return new FieldMaskingReader("field", reader, closeCalls).         }          @Override         public IndexSearcher wrap(IndexSearcher searcher) throws EngineException {             return searcher.         }     }.     final ConcurrentHashMap<Object, TopDocs> cache = new ConcurrentHashMap<>().     AtomicBoolean closeCalled = new AtomicBoolean(false).     try (Engine.Searcher wrap = wrapper.wrap(new Engine.Searcher("foo", searcher, () -> closeCalled.set(true)))) {         ElasticsearchDirectoryReader.addReaderCloseListener(wrap.getDirectoryReader(), key -> {             cache.remove(key).         }).         TopDocs search = wrap.searcher().search(new TermQuery(new Term("field", "doc")), 1).         cache.put(wrap.reader().getReaderCacheHelper().getKey(), search).     }     assertTrue(closeCalled.get()).     assertEquals(1, closeCalls.get()).     assertEquals(1, cache.size()).     IOUtils.close(open, writer, dir).     assertEquals(0, cache.size()).     assertEquals(1, closeCalls.get()). }
false;public;0;19;;public void testNoWrap() throws IOException {     Directory dir = newDirectory().     IndexWriterConfig iwc = newIndexWriterConfig().     IndexWriter writer = new IndexWriter(dir, iwc).     Document doc = new Document().     doc.add(new StringField("id", "1", random().nextBoolean() ? Field.Store.YES : Field.Store.NO)).     doc.add(new TextField("field", "doc", random().nextBoolean() ? Field.Store.YES : Field.Store.NO)).     writer.addDocument(doc).     DirectoryReader open = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer), new ShardId("foo", "_na_", 1)).     IndexSearcher searcher = new IndexSearcher(open).     assertEquals(1, searcher.search(new TermQuery(new Term("field", "doc")), 1).totalHits.value).     searcher.setSimilarity(iwc.getSimilarity()).     IndexSearcherWrapper wrapper = new IndexSearcherWrapper().     try (Engine.Searcher engineSearcher = new Engine.Searcher("foo", searcher, open::close)) {         final Engine.Searcher wrap = wrapper.wrap(engineSearcher).         assertSame(wrap, engineSearcher).     }     IOUtils.close(writer, dir). }
false;public;1;4;;@Override public LeafReader wrap(LeafReader reader) {     return new FieldFilterLeafReader(reader, Collections.singleton(field), true). }
false;protected;1;4;;@Override protected DirectoryReader doWrapDirectoryReader(DirectoryReader in) throws IOException {     return new FieldMaskingReader(field, in, closeCalls). }
false;public;0;4;;@Override public CacheHelper getReaderCacheHelper() {     return in.getReaderCacheHelper(). }
false;protected;0;5;;@Override protected void doClose() throws IOException {     super.doClose().     closeCalls.incrementAndGet(). }
