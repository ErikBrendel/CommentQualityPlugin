commented;modifiers;parameterAmount;loc;comment;code
false;public;0;35;;public void testReplay() throws Exception {     Directory directory = newDirectory().     RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory).     int numDocs = randomIntBetween(1, 128).     int maxNumValues = randomInt(16).     for (int i = 0. i < numDocs. i++) {         Document document = new Document().         document.add(new StringField("field", String.valueOf(randomInt(maxNumValues)), Field.Store.NO)).         indexWriter.addDocument(document).     }     indexWriter.close().     IndexReader indexReader = DirectoryReader.open(directory).     IndexSearcher indexSearcher = new IndexSearcher(indexReader).     TermQuery termQuery = new TermQuery(new Term("field", String.valueOf(randomInt(maxNumValues)))).     TopDocs topDocs = indexSearcher.search(termQuery, numDocs).     BestDocsDeferringCollector collector = new BestDocsDeferringCollector(numDocs, new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY), new NoneCircuitBreakerService())).     Set<Integer> deferredCollectedDocIds = new HashSet<>().     collector.setDeferredCollector(Collections.singleton(testCollector(deferredCollectedDocIds))).     collector.preCollection().     indexSearcher.search(termQuery, collector).     collector.postCollection().     collector.replay(0).     assertEquals(topDocs.scoreDocs.length, deferredCollectedDocIds.size()).     for (ScoreDoc scoreDoc : topDocs.scoreDocs) {         assertTrue("expected docid [" + scoreDoc.doc + "] is missing", deferredCollectedDocIds.contains(scoreDoc.doc)).     }     collector.close().     indexReader.close().     directory.close(). }
false;public;2;4;;@Override public void collect(int doc, long bucket) throws IOException {     docIds.add(ctx.docBase + doc). }
false;public;1;9;;@Override public LeafBucketCollector getLeafCollector(LeafReaderContext ctx) throws IOException {     return new LeafBucketCollector() {          @Override         public void collect(int doc, long bucket) throws IOException {             docIds.add(ctx.docBase + doc).         }     }. }
false;public;0;4;;@Override public void preCollection() throws IOException { }
false;public;0;4;;@Override public void postCollection() throws IOException { }
false;public;0;4;;@Override public ScoreMode scoreMode() {     return ScoreMode.COMPLETE_NO_SCORES. }
false;private;1;28;;private BucketCollector testCollector(Set<Integer> docIds) {     return new BucketCollector() {          @Override         public LeafBucketCollector getLeafCollector(LeafReaderContext ctx) throws IOException {             return new LeafBucketCollector() {                  @Override                 public void collect(int doc, long bucket) throws IOException {                     docIds.add(ctx.docBase + doc).                 }             }.         }          @Override         public void preCollection() throws IOException {         }          @Override         public void postCollection() throws IOException {         }          @Override         public ScoreMode scoreMode() {             return ScoreMode.COMPLETE_NO_SCORES.         }     }. }
