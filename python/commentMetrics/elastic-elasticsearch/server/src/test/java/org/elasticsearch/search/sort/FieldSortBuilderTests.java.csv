# id;timestamp;commentText;codeText;commentWords;codeWords
FieldSortBuilderTests -> public void testModeNonNumericField() throws IOException;1524684173;Test that MIN, MAX mode work on non-numeric fields, but other modes throw exception;public void testModeNonNumericField() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()___        FieldSortBuilder sortBuilder = new FieldSortBuilder(MAPPED_STRING_FIELDNAME).sortMode(SortMode.MIN)__        SortField sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField, instanceOf(SortedSetSortField.class))__        assertEquals(SortedSetSelector.Type.MIN, ((SortedSetSortField) sortField).getSelector())___        sortBuilder = new FieldSortBuilder(MAPPED_STRING_FIELDNAME).sortMode(SortMode.MAX)__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField, instanceOf(SortedSetSortField.class))__        assertEquals(SortedSetSelector.Type.MAX, ((SortedSetSortField) sortField).getSelector())___        String expectedError = "we only support AVG, MEDIAN and SUM on number based fields"__        QueryShardException e = expectThrows(QueryShardException.class,_                () -> new FieldSortBuilder(MAPPED_STRING_FIELDNAME).sortMode(SortMode.AVG).build(shardContextMock))__        assertEquals(expectedError, e.getMessage())___        e = expectThrows(QueryShardException.class,_                () -> new FieldSortBuilder(MAPPED_STRING_FIELDNAME).sortMode(SortMode.SUM).build(shardContextMock))__        assertEquals(expectedError, e.getMessage())___        e = expectThrows(QueryShardException.class,_                () -> new FieldSortBuilder(MAPPED_STRING_FIELDNAME).sortMode(SortMode.MEDIAN).build(shardContextMock))__        assertEquals(expectedError, e.getMessage())__    };test,that,min,max,mode,work,on,non,numeric,fields,but,other,modes,throw,exception;public,void,test,mode,non,numeric,field,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,field,sort,builder,sort,builder,new,field,sort,builder,sort,mode,sort,mode,min,sort,field,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,instance,of,sorted,set,sort,field,class,assert,equals,sorted,set,selector,type,min,sorted,set,sort,field,sort,field,get,selector,sort,builder,new,field,sort,builder,sort,mode,sort,mode,max,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,instance,of,sorted,set,sort,field,class,assert,equals,sorted,set,selector,type,max,sorted,set,sort,field,sort,field,get,selector,string,expected,error,we,only,support,avg,median,and,sum,on,number,based,fields,query,shard,exception,e,expect,throws,query,shard,exception,class,new,field,sort,builder,sort,mode,sort,mode,avg,build,shard,context,mock,assert,equals,expected,error,e,get,message,e,expect,throws,query,shard,exception,class,new,field,sort,builder,sort,mode,sort,mode,sum,build,shard,context,mock,assert,equals,expected,error,e,get,message,e,expect,throws,query,shard,exception,class,new,field,sort,builder,sort,mode,sort,mode,median,build,shard,context,mock,assert,equals,expected,error,e,get,message
FieldSortBuilderTests -> public void testModeNonNumericField() throws IOException;1528167589;Test that MIN, MAX mode work on non-numeric fields, but other modes throw exception;public void testModeNonNumericField() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()___        FieldSortBuilder sortBuilder = new FieldSortBuilder(MAPPED_STRING_FIELDNAME).sortMode(SortMode.MIN)__        SortField sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField, instanceOf(SortedSetSortField.class))__        assertEquals(SortedSetSelector.Type.MIN, ((SortedSetSortField) sortField).getSelector())___        sortBuilder = new FieldSortBuilder(MAPPED_STRING_FIELDNAME).sortMode(SortMode.MAX)__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField, instanceOf(SortedSetSortField.class))__        assertEquals(SortedSetSelector.Type.MAX, ((SortedSetSortField) sortField).getSelector())___        String expectedError = "we only support AVG, MEDIAN and SUM on number based fields"__        QueryShardException e = expectThrows(QueryShardException.class,_                () -> new FieldSortBuilder(MAPPED_STRING_FIELDNAME).sortMode(SortMode.AVG).build(shardContextMock))__        assertEquals(expectedError, e.getMessage())___        e = expectThrows(QueryShardException.class,_                () -> new FieldSortBuilder(MAPPED_STRING_FIELDNAME).sortMode(SortMode.SUM).build(shardContextMock))__        assertEquals(expectedError, e.getMessage())___        e = expectThrows(QueryShardException.class,_                () -> new FieldSortBuilder(MAPPED_STRING_FIELDNAME).sortMode(SortMode.MEDIAN).build(shardContextMock))__        assertEquals(expectedError, e.getMessage())__    };test,that,min,max,mode,work,on,non,numeric,fields,but,other,modes,throw,exception;public,void,test,mode,non,numeric,field,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,field,sort,builder,sort,builder,new,field,sort,builder,sort,mode,sort,mode,min,sort,field,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,instance,of,sorted,set,sort,field,class,assert,equals,sorted,set,selector,type,min,sorted,set,sort,field,sort,field,get,selector,sort,builder,new,field,sort,builder,sort,mode,sort,mode,max,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,instance,of,sorted,set,sort,field,class,assert,equals,sorted,set,selector,type,max,sorted,set,sort,field,sort,field,get,selector,string,expected,error,we,only,support,avg,median,and,sum,on,number,based,fields,query,shard,exception,e,expect,throws,query,shard,exception,class,new,field,sort,builder,sort,mode,sort,mode,avg,build,shard,context,mock,assert,equals,expected,error,e,get,message,e,expect,throws,query,shard,exception,class,new,field,sort,builder,sort,mode,sort,mode,sum,build,shard,context,mock,assert,equals,expected,error,e,get,message,e,expect,throws,query,shard,exception,class,new,field,sort,builder,sort,mode,sort,mode,median,build,shard,context,mock,assert,equals,expected,error,e,get,message
FieldSortBuilderTests -> public void testModeNonNumericField() throws IOException;1529916084;Test that MIN, MAX mode work on non-numeric fields, but other modes throw exception;public void testModeNonNumericField() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()___        FieldSortBuilder sortBuilder = new FieldSortBuilder(MAPPED_STRING_FIELDNAME).sortMode(SortMode.MIN)__        SortField sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField, instanceOf(SortedSetSortField.class))__        assertEquals(SortedSetSelector.Type.MIN, ((SortedSetSortField) sortField).getSelector())___        sortBuilder = new FieldSortBuilder(MAPPED_STRING_FIELDNAME).sortMode(SortMode.MAX)__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField, instanceOf(SortedSetSortField.class))__        assertEquals(SortedSetSelector.Type.MAX, ((SortedSetSortField) sortField).getSelector())___        String expectedError = "we only support AVG, MEDIAN and SUM on number based fields"__        QueryShardException e = expectThrows(QueryShardException.class,_                () -> new FieldSortBuilder(MAPPED_STRING_FIELDNAME).sortMode(SortMode.AVG).build(shardContextMock))__        assertEquals(expectedError, e.getMessage())___        e = expectThrows(QueryShardException.class,_                () -> new FieldSortBuilder(MAPPED_STRING_FIELDNAME).sortMode(SortMode.SUM).build(shardContextMock))__        assertEquals(expectedError, e.getMessage())___        e = expectThrows(QueryShardException.class,_                () -> new FieldSortBuilder(MAPPED_STRING_FIELDNAME).sortMode(SortMode.MEDIAN).build(shardContextMock))__        assertEquals(expectedError, e.getMessage())__    };test,that,min,max,mode,work,on,non,numeric,fields,but,other,modes,throw,exception;public,void,test,mode,non,numeric,field,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,field,sort,builder,sort,builder,new,field,sort,builder,sort,mode,sort,mode,min,sort,field,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,instance,of,sorted,set,sort,field,class,assert,equals,sorted,set,selector,type,min,sorted,set,sort,field,sort,field,get,selector,sort,builder,new,field,sort,builder,sort,mode,sort,mode,max,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,instance,of,sorted,set,sort,field,class,assert,equals,sorted,set,selector,type,max,sorted,set,sort,field,sort,field,get,selector,string,expected,error,we,only,support,avg,median,and,sum,on,number,based,fields,query,shard,exception,e,expect,throws,query,shard,exception,class,new,field,sort,builder,sort,mode,sort,mode,avg,build,shard,context,mock,assert,equals,expected,error,e,get,message,e,expect,throws,query,shard,exception,class,new,field,sort,builder,sort,mode,sort,mode,sum,build,shard,context,mock,assert,equals,expected,error,e,get,message,e,expect,throws,query,shard,exception,class,new,field,sort,builder,sort,mode,sort,mode,median,build,shard,context,mock,assert,equals,expected,error,e,get,message
FieldSortBuilderTests -> public void testModeNonNumericField() throws IOException;1539615817;Test that MIN, MAX mode work on non-numeric fields, but other modes throw exception;public void testModeNonNumericField() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()___        FieldSortBuilder sortBuilder = new FieldSortBuilder(MAPPED_STRING_FIELDNAME).sortMode(SortMode.MIN)__        SortField sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField, instanceOf(SortedSetSortField.class))__        assertEquals(SortedSetSelector.Type.MIN, ((SortedSetSortField) sortField).getSelector())___        sortBuilder = new FieldSortBuilder(MAPPED_STRING_FIELDNAME).sortMode(SortMode.MAX)__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField, instanceOf(SortedSetSortField.class))__        assertEquals(SortedSetSelector.Type.MAX, ((SortedSetSortField) sortField).getSelector())___        String expectedError = "we only support AVG, MEDIAN and SUM on number based fields"__        QueryShardException e = expectThrows(QueryShardException.class,_                () -> new FieldSortBuilder(MAPPED_STRING_FIELDNAME).sortMode(SortMode.AVG).build(shardContextMock))__        assertEquals(expectedError, e.getMessage())___        e = expectThrows(QueryShardException.class,_                () -> new FieldSortBuilder(MAPPED_STRING_FIELDNAME).sortMode(SortMode.SUM).build(shardContextMock))__        assertEquals(expectedError, e.getMessage())___        e = expectThrows(QueryShardException.class,_                () -> new FieldSortBuilder(MAPPED_STRING_FIELDNAME).sortMode(SortMode.MEDIAN).build(shardContextMock))__        assertEquals(expectedError, e.getMessage())__    };test,that,min,max,mode,work,on,non,numeric,fields,but,other,modes,throw,exception;public,void,test,mode,non,numeric,field,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,field,sort,builder,sort,builder,new,field,sort,builder,sort,mode,sort,mode,min,sort,field,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,instance,of,sorted,set,sort,field,class,assert,equals,sorted,set,selector,type,min,sorted,set,sort,field,sort,field,get,selector,sort,builder,new,field,sort,builder,sort,mode,sort,mode,max,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,instance,of,sorted,set,sort,field,class,assert,equals,sorted,set,selector,type,max,sorted,set,sort,field,sort,field,get,selector,string,expected,error,we,only,support,avg,median,and,sum,on,number,based,fields,query,shard,exception,e,expect,throws,query,shard,exception,class,new,field,sort,builder,sort,mode,sort,mode,avg,build,shard,context,mock,assert,equals,expected,error,e,get,message,e,expect,throws,query,shard,exception,class,new,field,sort,builder,sort,mode,sort,mode,sum,build,shard,context,mock,assert,equals,expected,error,e,get,message,e,expect,throws,query,shard,exception,class,new,field,sort,builder,sort,mode,sort,mode,median,build,shard,context,mock,assert,equals,expected,error,e,get,message
FieldSortBuilderTests -> public void testBuildNested() throws IOException;1524684173;Test that the sort builder nested object gets created in the SortField;public void testBuildNested() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()___        FieldSortBuilder sortBuilder = new FieldSortBuilder("fieldName")_                .setNestedSort(new NestedSortBuilder("path").setFilter(QueryBuilders.termQuery(MAPPED_STRING_FIELDNAME, "value")))__        SortField sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        XFieldComparatorSource comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        Nested nested = comparatorSource.nested()__        assertNotNull(nested)__        assertEquals(new TermQuery(new Term(MAPPED_STRING_FIELDNAME, "value")), nested.getInnerQuery())___        sortBuilder = new FieldSortBuilder("fieldName").setNestedPath("path")__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        nested = comparatorSource.nested()__        assertNotNull(nested)__        assertEquals(new TermQuery(new Term(TypeFieldMapper.NAME, "__path")), nested.getInnerQuery())___        sortBuilder = new FieldSortBuilder("fieldName").setNestedPath("path")_                .setNestedFilter(QueryBuilders.termQuery(MAPPED_STRING_FIELDNAME, "value"))__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        nested = comparatorSource.nested()__        assertNotNull(nested)__        assertEquals(new TermQuery(new Term(MAPPED_STRING_FIELDNAME, "value")), nested.getInnerQuery())___        _        sortBuilder = new FieldSortBuilder("fieldName").setNestedFilter(QueryBuilders.termQuery(MAPPED_STRING_FIELDNAME, "value"))__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField, instanceOf(SortedNumericSortField.class))__    };test,that,the,sort,builder,nested,object,gets,created,in,the,sort,field;public,void,test,build,nested,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,field,sort,builder,sort,builder,new,field,sort,builder,field,name,set,nested,sort,new,nested,sort,builder,path,set,filter,query,builders,term,query,value,sort,field,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,xfield,comparator,source,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,nested,nested,comparator,source,nested,assert,not,null,nested,assert,equals,new,term,query,new,term,value,nested,get,inner,query,sort,builder,new,field,sort,builder,field,name,set,nested,path,path,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,nested,comparator,source,nested,assert,not,null,nested,assert,equals,new,term,query,new,term,type,field,mapper,name,nested,get,inner,query,sort,builder,new,field,sort,builder,field,name,set,nested,path,path,set,nested,filter,query,builders,term,query,value,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,nested,comparator,source,nested,assert,not,null,nested,assert,equals,new,term,query,new,term,value,nested,get,inner,query,sort,builder,new,field,sort,builder,field,name,set,nested,filter,query,builders,term,query,value,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,instance,of,sorted,numeric,sort,field,class
FieldSortBuilderTests -> public void testBuildNested() throws IOException;1528167589;Test that the sort builder nested object gets created in the SortField;public void testBuildNested() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()___        FieldSortBuilder sortBuilder = new FieldSortBuilder("fieldName")_                .setNestedSort(new NestedSortBuilder("path").setFilter(QueryBuilders.termQuery(MAPPED_STRING_FIELDNAME, "value")))__        SortField sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        XFieldComparatorSource comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        Nested nested = comparatorSource.nested()__        assertNotNull(nested)__        assertEquals(new TermQuery(new Term(MAPPED_STRING_FIELDNAME, "value")), nested.getInnerQuery())___        sortBuilder = new FieldSortBuilder("fieldName").setNestedPath("path")__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        nested = comparatorSource.nested()__        assertNotNull(nested)__        assertEquals(new TermQuery(new Term(TypeFieldMapper.NAME, "__path")), nested.getInnerQuery())___        sortBuilder = new FieldSortBuilder("fieldName").setNestedPath("path")_                .setNestedFilter(QueryBuilders.termQuery(MAPPED_STRING_FIELDNAME, "value"))__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        nested = comparatorSource.nested()__        assertNotNull(nested)__        assertEquals(new TermQuery(new Term(MAPPED_STRING_FIELDNAME, "value")), nested.getInnerQuery())___        _        sortBuilder = new FieldSortBuilder("fieldName").setNestedFilter(QueryBuilders.termQuery(MAPPED_STRING_FIELDNAME, "value"))__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField, instanceOf(SortedNumericSortField.class))__    };test,that,the,sort,builder,nested,object,gets,created,in,the,sort,field;public,void,test,build,nested,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,field,sort,builder,sort,builder,new,field,sort,builder,field,name,set,nested,sort,new,nested,sort,builder,path,set,filter,query,builders,term,query,value,sort,field,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,xfield,comparator,source,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,nested,nested,comparator,source,nested,assert,not,null,nested,assert,equals,new,term,query,new,term,value,nested,get,inner,query,sort,builder,new,field,sort,builder,field,name,set,nested,path,path,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,nested,comparator,source,nested,assert,not,null,nested,assert,equals,new,term,query,new,term,type,field,mapper,name,nested,get,inner,query,sort,builder,new,field,sort,builder,field,name,set,nested,path,path,set,nested,filter,query,builders,term,query,value,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,nested,comparator,source,nested,assert,not,null,nested,assert,equals,new,term,query,new,term,value,nested,get,inner,query,sort,builder,new,field,sort,builder,field,name,set,nested,filter,query,builders,term,query,value,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,instance,of,sorted,numeric,sort,field,class
FieldSortBuilderTests -> public void testBuildNested() throws IOException;1529916084;Test that the sort builder nested object gets created in the SortField;public void testBuildNested() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()___        FieldSortBuilder sortBuilder = new FieldSortBuilder("fieldName")_                .setNestedSort(new NestedSortBuilder("path").setFilter(QueryBuilders.termQuery(MAPPED_STRING_FIELDNAME, "value")))__        SortField sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        XFieldComparatorSource comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        Nested nested = comparatorSource.nested()__        assertNotNull(nested)__        assertEquals(new TermQuery(new Term(MAPPED_STRING_FIELDNAME, "value")), nested.getInnerQuery())___        sortBuilder = new FieldSortBuilder("fieldName").setNestedPath("path")__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        nested = comparatorSource.nested()__        assertNotNull(nested)__        assertEquals(new TermQuery(new Term(TypeFieldMapper.NAME, "__path")), nested.getInnerQuery())___        sortBuilder = new FieldSortBuilder("fieldName").setNestedPath("path")_                .setNestedFilter(QueryBuilders.termQuery(MAPPED_STRING_FIELDNAME, "value"))__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        nested = comparatorSource.nested()__        assertNotNull(nested)__        assertEquals(new TermQuery(new Term(MAPPED_STRING_FIELDNAME, "value")), nested.getInnerQuery())___        _        sortBuilder = new FieldSortBuilder("fieldName").setNestedFilter(QueryBuilders.termQuery(MAPPED_STRING_FIELDNAME, "value"))__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField, instanceOf(SortedNumericSortField.class))__    };test,that,the,sort,builder,nested,object,gets,created,in,the,sort,field;public,void,test,build,nested,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,field,sort,builder,sort,builder,new,field,sort,builder,field,name,set,nested,sort,new,nested,sort,builder,path,set,filter,query,builders,term,query,value,sort,field,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,xfield,comparator,source,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,nested,nested,comparator,source,nested,assert,not,null,nested,assert,equals,new,term,query,new,term,value,nested,get,inner,query,sort,builder,new,field,sort,builder,field,name,set,nested,path,path,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,nested,comparator,source,nested,assert,not,null,nested,assert,equals,new,term,query,new,term,type,field,mapper,name,nested,get,inner,query,sort,builder,new,field,sort,builder,field,name,set,nested,path,path,set,nested,filter,query,builders,term,query,value,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,nested,comparator,source,nested,assert,not,null,nested,assert,equals,new,term,query,new,term,value,nested,get,inner,query,sort,builder,new,field,sort,builder,field,name,set,nested,filter,query,builders,term,query,value,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,instance,of,sorted,numeric,sort,field,class
FieldSortBuilderTests -> public void testBuildNested() throws IOException;1539615817;Test that the sort builder nested object gets created in the SortField;public void testBuildNested() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()___        FieldSortBuilder sortBuilder = new FieldSortBuilder("fieldName")_                .setNestedSort(new NestedSortBuilder("path").setFilter(QueryBuilders.termQuery(MAPPED_STRING_FIELDNAME, "value")))__        SortField sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        XFieldComparatorSource comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        Nested nested = comparatorSource.nested()__        assertNotNull(nested)__        assertEquals(new TermQuery(new Term(MAPPED_STRING_FIELDNAME, "value")), nested.getInnerQuery())___        sortBuilder = new FieldSortBuilder("fieldName").setNestedPath("path")__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        nested = comparatorSource.nested()__        assertNotNull(nested)__        assertEquals(new TermQuery(new Term(TypeFieldMapper.NAME, "__path")), nested.getInnerQuery())___        sortBuilder = new FieldSortBuilder("fieldName").setNestedPath("path")_                .setNestedFilter(QueryBuilders.termQuery(MAPPED_STRING_FIELDNAME, "value"))__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        nested = comparatorSource.nested()__        assertNotNull(nested)__        assertEquals(new TermQuery(new Term(MAPPED_STRING_FIELDNAME, "value")), nested.getInnerQuery())___        _        sortBuilder = new FieldSortBuilder("fieldName").setNestedFilter(QueryBuilders.termQuery(MAPPED_STRING_FIELDNAME, "value"))__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField, instanceOf(SortedNumericSortField.class))__    };test,that,the,sort,builder,nested,object,gets,created,in,the,sort,field;public,void,test,build,nested,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,field,sort,builder,sort,builder,new,field,sort,builder,field,name,set,nested,sort,new,nested,sort,builder,path,set,filter,query,builders,term,query,value,sort,field,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,xfield,comparator,source,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,nested,nested,comparator,source,nested,assert,not,null,nested,assert,equals,new,term,query,new,term,value,nested,get,inner,query,sort,builder,new,field,sort,builder,field,name,set,nested,path,path,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,nested,comparator,source,nested,assert,not,null,nested,assert,equals,new,term,query,new,term,type,field,mapper,name,nested,get,inner,query,sort,builder,new,field,sort,builder,field,name,set,nested,path,path,set,nested,filter,query,builders,term,query,value,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,nested,comparator,source,nested,assert,not,null,nested,assert,equals,new,term,query,new,term,value,nested,get,inner,query,sort,builder,new,field,sort,builder,field,name,set,nested,filter,query,builders,term,query,value,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,instance,of,sorted,numeric,sort,field,class
FieldSortBuilderTests -> public void testBuildSortFieldOrder() throws IOException;1524684173;Test that the sort builder order gets transfered correctly to the SortField;public void testBuildSortFieldOrder() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()__        FieldSortBuilder fieldSortBuilder = new FieldSortBuilder("value")__        SortField sortField = fieldSortBuilder.build(shardContextMock).field__        SortedNumericSortField expectedSortField = new SortedNumericSortField("value", SortField.Type.DOUBLE, false)__        expectedSortField.setMissingValue(Double.POSITIVE_INFINITY)__        assertEquals(expectedSortField, sortField)___        fieldSortBuilder = new FieldSortBuilder("value").order(SortOrder.ASC)__        sortField = fieldSortBuilder.build(shardContextMock).field__        expectedSortField = new SortedNumericSortField("value", SortField.Type.DOUBLE, false)__        expectedSortField.setMissingValue(Double.POSITIVE_INFINITY)__        assertEquals(expectedSortField, sortField)___        fieldSortBuilder = new FieldSortBuilder("value").order(SortOrder.DESC)__        sortField = fieldSortBuilder.build(shardContextMock).field__        expectedSortField = new SortedNumericSortField("value", SortField.Type.DOUBLE, true, SortedNumericSelector.Type.MAX)__        expectedSortField.setMissingValue(Double.NEGATIVE_INFINITY)__        assertEquals(expectedSortField, sortField)__    };test,that,the,sort,builder,order,gets,transfered,correctly,to,the,sort,field;public,void,test,build,sort,field,order,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,field,sort,builder,field,sort,builder,new,field,sort,builder,value,sort,field,sort,field,field,sort,builder,build,shard,context,mock,field,sorted,numeric,sort,field,expected,sort,field,new,sorted,numeric,sort,field,value,sort,field,type,double,false,expected,sort,field,set,missing,value,double,assert,equals,expected,sort,field,sort,field,field,sort,builder,new,field,sort,builder,value,order,sort,order,asc,sort,field,field,sort,builder,build,shard,context,mock,field,expected,sort,field,new,sorted,numeric,sort,field,value,sort,field,type,double,false,expected,sort,field,set,missing,value,double,assert,equals,expected,sort,field,sort,field,field,sort,builder,new,field,sort,builder,value,order,sort,order,desc,sort,field,field,sort,builder,build,shard,context,mock,field,expected,sort,field,new,sorted,numeric,sort,field,value,sort,field,type,double,true,sorted,numeric,selector,type,max,expected,sort,field,set,missing,value,double,assert,equals,expected,sort,field,sort,field
FieldSortBuilderTests -> public void testBuildSortFieldOrder() throws IOException;1528167589;Test that the sort builder order gets transfered correctly to the SortField;public void testBuildSortFieldOrder() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()__        FieldSortBuilder fieldSortBuilder = new FieldSortBuilder("value")__        SortField sortField = fieldSortBuilder.build(shardContextMock).field__        SortedNumericSortField expectedSortField = new SortedNumericSortField("value", SortField.Type.DOUBLE, false)__        expectedSortField.setMissingValue(Double.POSITIVE_INFINITY)__        assertEquals(expectedSortField, sortField)___        fieldSortBuilder = new FieldSortBuilder("value").order(SortOrder.ASC)__        sortField = fieldSortBuilder.build(shardContextMock).field__        expectedSortField = new SortedNumericSortField("value", SortField.Type.DOUBLE, false)__        expectedSortField.setMissingValue(Double.POSITIVE_INFINITY)__        assertEquals(expectedSortField, sortField)___        fieldSortBuilder = new FieldSortBuilder("value").order(SortOrder.DESC)__        sortField = fieldSortBuilder.build(shardContextMock).field__        expectedSortField = new SortedNumericSortField("value", SortField.Type.DOUBLE, true, SortedNumericSelector.Type.MAX)__        expectedSortField.setMissingValue(Double.NEGATIVE_INFINITY)__        assertEquals(expectedSortField, sortField)__    };test,that,the,sort,builder,order,gets,transfered,correctly,to,the,sort,field;public,void,test,build,sort,field,order,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,field,sort,builder,field,sort,builder,new,field,sort,builder,value,sort,field,sort,field,field,sort,builder,build,shard,context,mock,field,sorted,numeric,sort,field,expected,sort,field,new,sorted,numeric,sort,field,value,sort,field,type,double,false,expected,sort,field,set,missing,value,double,assert,equals,expected,sort,field,sort,field,field,sort,builder,new,field,sort,builder,value,order,sort,order,asc,sort,field,field,sort,builder,build,shard,context,mock,field,expected,sort,field,new,sorted,numeric,sort,field,value,sort,field,type,double,false,expected,sort,field,set,missing,value,double,assert,equals,expected,sort,field,sort,field,field,sort,builder,new,field,sort,builder,value,order,sort,order,desc,sort,field,field,sort,builder,build,shard,context,mock,field,expected,sort,field,new,sorted,numeric,sort,field,value,sort,field,type,double,true,sorted,numeric,selector,type,max,expected,sort,field,set,missing,value,double,assert,equals,expected,sort,field,sort,field
FieldSortBuilderTests -> public void testBuildSortFieldOrder() throws IOException;1529916084;Test that the sort builder order gets transfered correctly to the SortField;public void testBuildSortFieldOrder() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()__        FieldSortBuilder fieldSortBuilder = new FieldSortBuilder("value")__        SortField sortField = fieldSortBuilder.build(shardContextMock).field__        SortedNumericSortField expectedSortField = new SortedNumericSortField("value", SortField.Type.DOUBLE, false)__        expectedSortField.setMissingValue(Double.POSITIVE_INFINITY)__        assertEquals(expectedSortField, sortField)___        fieldSortBuilder = new FieldSortBuilder("value").order(SortOrder.ASC)__        sortField = fieldSortBuilder.build(shardContextMock).field__        expectedSortField = new SortedNumericSortField("value", SortField.Type.DOUBLE, false)__        expectedSortField.setMissingValue(Double.POSITIVE_INFINITY)__        assertEquals(expectedSortField, sortField)___        fieldSortBuilder = new FieldSortBuilder("value").order(SortOrder.DESC)__        sortField = fieldSortBuilder.build(shardContextMock).field__        expectedSortField = new SortedNumericSortField("value", SortField.Type.DOUBLE, true, SortedNumericSelector.Type.MAX)__        expectedSortField.setMissingValue(Double.NEGATIVE_INFINITY)__        assertEquals(expectedSortField, sortField)__    };test,that,the,sort,builder,order,gets,transfered,correctly,to,the,sort,field;public,void,test,build,sort,field,order,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,field,sort,builder,field,sort,builder,new,field,sort,builder,value,sort,field,sort,field,field,sort,builder,build,shard,context,mock,field,sorted,numeric,sort,field,expected,sort,field,new,sorted,numeric,sort,field,value,sort,field,type,double,false,expected,sort,field,set,missing,value,double,assert,equals,expected,sort,field,sort,field,field,sort,builder,new,field,sort,builder,value,order,sort,order,asc,sort,field,field,sort,builder,build,shard,context,mock,field,expected,sort,field,new,sorted,numeric,sort,field,value,sort,field,type,double,false,expected,sort,field,set,missing,value,double,assert,equals,expected,sort,field,sort,field,field,sort,builder,new,field,sort,builder,value,order,sort,order,desc,sort,field,field,sort,builder,build,shard,context,mock,field,expected,sort,field,new,sorted,numeric,sort,field,value,sort,field,type,double,true,sorted,numeric,selector,type,max,expected,sort,field,set,missing,value,double,assert,equals,expected,sort,field,sort,field
FieldSortBuilderTests -> public void testBuildSortFieldOrder() throws IOException;1539615817;Test that the sort builder order gets transferred correctly to the SortField;public void testBuildSortFieldOrder() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()__        FieldSortBuilder fieldSortBuilder = new FieldSortBuilder("value")__        SortField sortField = fieldSortBuilder.build(shardContextMock).field__        SortedNumericSortField expectedSortField = new SortedNumericSortField("value", SortField.Type.DOUBLE, false)__        expectedSortField.setMissingValue(Double.POSITIVE_INFINITY)__        assertEquals(expectedSortField, sortField)___        fieldSortBuilder = new FieldSortBuilder("value").order(SortOrder.ASC)__        sortField = fieldSortBuilder.build(shardContextMock).field__        expectedSortField = new SortedNumericSortField("value", SortField.Type.DOUBLE, false)__        expectedSortField.setMissingValue(Double.POSITIVE_INFINITY)__        assertEquals(expectedSortField, sortField)___        fieldSortBuilder = new FieldSortBuilder("value").order(SortOrder.DESC)__        sortField = fieldSortBuilder.build(shardContextMock).field__        expectedSortField = new SortedNumericSortField("value", SortField.Type.DOUBLE, true, SortedNumericSelector.Type.MAX)__        expectedSortField.setMissingValue(Double.NEGATIVE_INFINITY)__        assertEquals(expectedSortField, sortField)__    };test,that,the,sort,builder,order,gets,transferred,correctly,to,the,sort,field;public,void,test,build,sort,field,order,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,field,sort,builder,field,sort,builder,new,field,sort,builder,value,sort,field,sort,field,field,sort,builder,build,shard,context,mock,field,sorted,numeric,sort,field,expected,sort,field,new,sorted,numeric,sort,field,value,sort,field,type,double,false,expected,sort,field,set,missing,value,double,assert,equals,expected,sort,field,sort,field,field,sort,builder,new,field,sort,builder,value,order,sort,order,asc,sort,field,field,sort,builder,build,shard,context,mock,field,expected,sort,field,new,sorted,numeric,sort,field,value,sort,field,type,double,false,expected,sort,field,set,missing,value,double,assert,equals,expected,sort,field,sort,field,field,sort,builder,new,field,sort,builder,value,order,sort,order,desc,sort,field,field,sort,builder,build,shard,context,mock,field,expected,sort,field,new,sorted,numeric,sort,field,value,sort,field,type,double,true,sorted,numeric,selector,type,max,expected,sort,field,set,missing,value,double,assert,equals,expected,sort,field,sort,field
FieldSortBuilderTests -> public void testNestedRewrites() throws IOException;1524684173;Test the nested Filter gets rewritten;public void testNestedRewrites() throws IOException {_        FieldSortBuilder sortBuilder = new FieldSortBuilder(MAPPED_STRING_FIELDNAME)__        RangeQueryBuilder rangeQuery = new RangeQueryBuilder("fieldName") {_            @Override_            public QueryBuilder doRewrite(QueryRewriteContext queryShardContext) throws IOException {_                return new MatchNoneQueryBuilder()__            }_        }__        sortBuilder.setNestedPath("path").setNestedFilter(rangeQuery)__        FieldSortBuilder rewritten = (FieldSortBuilder) sortBuilder_                .rewrite(createMockShardContext())__        assertNotSame(rangeQuery, rewritten.getNestedFilter())__    };test,the,nested,filter,gets,rewritten;public,void,test,nested,rewrites,throws,ioexception,field,sort,builder,sort,builder,new,field,sort,builder,range,query,builder,range,query,new,range,query,builder,field,name,override,public,query,builder,do,rewrite,query,rewrite,context,query,shard,context,throws,ioexception,return,new,match,none,query,builder,sort,builder,set,nested,path,path,set,nested,filter,range,query,field,sort,builder,rewritten,field,sort,builder,sort,builder,rewrite,create,mock,shard,context,assert,not,same,range,query,rewritten,get,nested,filter
FieldSortBuilderTests -> public void testNestedRewrites() throws IOException;1528167589;Test the nested Filter gets rewritten;public void testNestedRewrites() throws IOException {_        FieldSortBuilder sortBuilder = new FieldSortBuilder(MAPPED_STRING_FIELDNAME)__        RangeQueryBuilder rangeQuery = new RangeQueryBuilder("fieldName") {_            @Override_            public QueryBuilder doRewrite(QueryRewriteContext queryShardContext) throws IOException {_                return new MatchNoneQueryBuilder()__            }_        }__        sortBuilder.setNestedPath("path").setNestedFilter(rangeQuery)__        FieldSortBuilder rewritten = sortBuilder_                .rewrite(createMockShardContext())__        assertNotSame(rangeQuery, rewritten.getNestedFilter())__    };test,the,nested,filter,gets,rewritten;public,void,test,nested,rewrites,throws,ioexception,field,sort,builder,sort,builder,new,field,sort,builder,range,query,builder,range,query,new,range,query,builder,field,name,override,public,query,builder,do,rewrite,query,rewrite,context,query,shard,context,throws,ioexception,return,new,match,none,query,builder,sort,builder,set,nested,path,path,set,nested,filter,range,query,field,sort,builder,rewritten,sort,builder,rewrite,create,mock,shard,context,assert,not,same,range,query,rewritten,get,nested,filter
FieldSortBuilderTests -> public void testNestedRewrites() throws IOException;1529916084;Test the nested Filter gets rewritten;public void testNestedRewrites() throws IOException {_        FieldSortBuilder sortBuilder = new FieldSortBuilder(MAPPED_STRING_FIELDNAME)__        RangeQueryBuilder rangeQuery = new RangeQueryBuilder("fieldName") {_            @Override_            public QueryBuilder doRewrite(QueryRewriteContext queryShardContext) throws IOException {_                return new MatchNoneQueryBuilder()__            }_        }__        sortBuilder.setNestedPath("path").setNestedFilter(rangeQuery)__        FieldSortBuilder rewritten = sortBuilder_                .rewrite(createMockShardContext())__        assertNotSame(rangeQuery, rewritten.getNestedFilter())__    };test,the,nested,filter,gets,rewritten;public,void,test,nested,rewrites,throws,ioexception,field,sort,builder,sort,builder,new,field,sort,builder,range,query,builder,range,query,new,range,query,builder,field,name,override,public,query,builder,do,rewrite,query,rewrite,context,query,shard,context,throws,ioexception,return,new,match,none,query,builder,sort,builder,set,nested,path,path,set,nested,filter,range,query,field,sort,builder,rewritten,sort,builder,rewrite,create,mock,shard,context,assert,not,same,range,query,rewritten,get,nested,filter
FieldSortBuilderTests -> public void testNestedRewrites() throws IOException;1539615817;Test the nested Filter gets rewritten;public void testNestedRewrites() throws IOException {_        FieldSortBuilder sortBuilder = new FieldSortBuilder(MAPPED_STRING_FIELDNAME)__        RangeQueryBuilder rangeQuery = new RangeQueryBuilder("fieldName") {_            @Override_            public QueryBuilder doRewrite(QueryRewriteContext queryShardContext) throws IOException {_                return new MatchNoneQueryBuilder()__            }_        }__        sortBuilder.setNestedPath("path").setNestedFilter(rangeQuery)__        FieldSortBuilder rewritten = sortBuilder_                .rewrite(createMockShardContext())__        assertNotSame(rangeQuery, rewritten.getNestedFilter())__    };test,the,nested,filter,gets,rewritten;public,void,test,nested,rewrites,throws,ioexception,field,sort,builder,sort,builder,new,field,sort,builder,range,query,builder,range,query,new,range,query,builder,field,name,override,public,query,builder,do,rewrite,query,rewrite,context,query,shard,context,throws,ioexception,return,new,match,none,query,builder,sort,builder,set,nested,path,path,set,nested,filter,range,query,field,sort,builder,rewritten,sort,builder,rewrite,create,mock,shard,context,assert,not,same,range,query,rewritten,get,nested,filter
FieldSortBuilderTests -> public void testNestedSortRewrites() throws IOException;1524684173;Test the nested sort gets rewritten;public void testNestedSortRewrites() throws IOException {_        FieldSortBuilder sortBuilder = new FieldSortBuilder(MAPPED_STRING_FIELDNAME)__        RangeQueryBuilder rangeQuery = new RangeQueryBuilder("fieldName") {_            @Override_            public QueryBuilder doRewrite(QueryRewriteContext queryShardContext) throws IOException {_                return new MatchNoneQueryBuilder()__            }_        }__        sortBuilder.setNestedSort(new NestedSortBuilder("path").setFilter(rangeQuery))__        FieldSortBuilder rewritten = (FieldSortBuilder) sortBuilder_                .rewrite(createMockShardContext())__        assertNotSame(rangeQuery, rewritten.getNestedSort().getFilter())__    };test,the,nested,sort,gets,rewritten;public,void,test,nested,sort,rewrites,throws,ioexception,field,sort,builder,sort,builder,new,field,sort,builder,range,query,builder,range,query,new,range,query,builder,field,name,override,public,query,builder,do,rewrite,query,rewrite,context,query,shard,context,throws,ioexception,return,new,match,none,query,builder,sort,builder,set,nested,sort,new,nested,sort,builder,path,set,filter,range,query,field,sort,builder,rewritten,field,sort,builder,sort,builder,rewrite,create,mock,shard,context,assert,not,same,range,query,rewritten,get,nested,sort,get,filter
FieldSortBuilderTests -> public void testNestedSortRewrites() throws IOException;1528167589;Test the nested sort gets rewritten;public void testNestedSortRewrites() throws IOException {_        FieldSortBuilder sortBuilder = new FieldSortBuilder(MAPPED_STRING_FIELDNAME)__        RangeQueryBuilder rangeQuery = new RangeQueryBuilder("fieldName") {_            @Override_            public QueryBuilder doRewrite(QueryRewriteContext queryShardContext) throws IOException {_                return new MatchNoneQueryBuilder()__            }_        }__        sortBuilder.setNestedSort(new NestedSortBuilder("path").setFilter(rangeQuery))__        FieldSortBuilder rewritten = sortBuilder_                .rewrite(createMockShardContext())__        assertNotSame(rangeQuery, rewritten.getNestedSort().getFilter())__    };test,the,nested,sort,gets,rewritten;public,void,test,nested,sort,rewrites,throws,ioexception,field,sort,builder,sort,builder,new,field,sort,builder,range,query,builder,range,query,new,range,query,builder,field,name,override,public,query,builder,do,rewrite,query,rewrite,context,query,shard,context,throws,ioexception,return,new,match,none,query,builder,sort,builder,set,nested,sort,new,nested,sort,builder,path,set,filter,range,query,field,sort,builder,rewritten,sort,builder,rewrite,create,mock,shard,context,assert,not,same,range,query,rewritten,get,nested,sort,get,filter
FieldSortBuilderTests -> public void testNestedSortRewrites() throws IOException;1529916084;Test the nested sort gets rewritten;public void testNestedSortRewrites() throws IOException {_        FieldSortBuilder sortBuilder = new FieldSortBuilder(MAPPED_STRING_FIELDNAME)__        RangeQueryBuilder rangeQuery = new RangeQueryBuilder("fieldName") {_            @Override_            public QueryBuilder doRewrite(QueryRewriteContext queryShardContext) throws IOException {_                return new MatchNoneQueryBuilder()__            }_        }__        sortBuilder.setNestedSort(new NestedSortBuilder("path").setFilter(rangeQuery))__        FieldSortBuilder rewritten = sortBuilder_                .rewrite(createMockShardContext())__        assertNotSame(rangeQuery, rewritten.getNestedSort().getFilter())__    };test,the,nested,sort,gets,rewritten;public,void,test,nested,sort,rewrites,throws,ioexception,field,sort,builder,sort,builder,new,field,sort,builder,range,query,builder,range,query,new,range,query,builder,field,name,override,public,query,builder,do,rewrite,query,rewrite,context,query,shard,context,throws,ioexception,return,new,match,none,query,builder,sort,builder,set,nested,sort,new,nested,sort,builder,path,set,filter,range,query,field,sort,builder,rewritten,sort,builder,rewrite,create,mock,shard,context,assert,not,same,range,query,rewritten,get,nested,sort,get,filter
FieldSortBuilderTests -> public void testNestedSortRewrites() throws IOException;1539615817;Test the nested sort gets rewritten;public void testNestedSortRewrites() throws IOException {_        FieldSortBuilder sortBuilder = new FieldSortBuilder(MAPPED_STRING_FIELDNAME)__        RangeQueryBuilder rangeQuery = new RangeQueryBuilder("fieldName") {_            @Override_            public QueryBuilder doRewrite(QueryRewriteContext queryShardContext) throws IOException {_                return new MatchNoneQueryBuilder()__            }_        }__        sortBuilder.setNestedSort(new NestedSortBuilder("path").setFilter(rangeQuery))__        FieldSortBuilder rewritten = sortBuilder_                .rewrite(createMockShardContext())__        assertNotSame(rangeQuery, rewritten.getNestedSort().getFilter())__    };test,the,nested,sort,gets,rewritten;public,void,test,nested,sort,rewrites,throws,ioexception,field,sort,builder,sort,builder,new,field,sort,builder,range,query,builder,range,query,new,range,query,builder,field,name,override,public,query,builder,do,rewrite,query,rewrite,context,query,shard,context,throws,ioexception,return,new,match,none,query,builder,sort,builder,set,nested,sort,new,nested,sort,builder,path,set,filter,range,query,field,sort,builder,rewritten,sort,builder,rewrite,create,mock,shard,context,assert,not,same,range,query,rewritten,get,nested,sort,get,filter
FieldSortBuilderTests -> public void testBuildSortFieldMissingValue() throws IOException;1524684173;Test that missing values get transfered correctly to the SortField;public void testBuildSortFieldMissingValue() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()__        FieldSortBuilder fieldSortBuilder = new FieldSortBuilder("value").missing("_first")__        SortField sortField = fieldSortBuilder.build(shardContextMock).field__        SortedNumericSortField expectedSortField = new SortedNumericSortField("value", SortField.Type.DOUBLE)__        expectedSortField.setMissingValue(Double.NEGATIVE_INFINITY)__        assertEquals(expectedSortField, sortField)___        fieldSortBuilder = new FieldSortBuilder("value").missing("_last")__        sortField = fieldSortBuilder.build(shardContextMock).field__        expectedSortField = new SortedNumericSortField("value", SortField.Type.DOUBLE)__        expectedSortField.setMissingValue(Double.POSITIVE_INFINITY)__        assertEquals(expectedSortField, sortField)___        Double randomDouble = randomDouble()__        fieldSortBuilder = new FieldSortBuilder("value").missing(randomDouble)__        sortField = fieldSortBuilder.build(shardContextMock).field__        expectedSortField = new SortedNumericSortField("value", SortField.Type.DOUBLE)__        expectedSortField.setMissingValue(randomDouble)__        assertEquals(expectedSortField, sortField)___        fieldSortBuilder = new FieldSortBuilder("value").missing(randomDouble.toString())__        sortField = fieldSortBuilder.build(shardContextMock).field__        expectedSortField = new SortedNumericSortField("value", SortField.Type.DOUBLE)__        expectedSortField.setMissingValue(randomDouble)__        assertEquals(expectedSortField, sortField)__    };test,that,missing,values,get,transfered,correctly,to,the,sort,field;public,void,test,build,sort,field,missing,value,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,field,sort,builder,field,sort,builder,new,field,sort,builder,value,missing,sort,field,sort,field,field,sort,builder,build,shard,context,mock,field,sorted,numeric,sort,field,expected,sort,field,new,sorted,numeric,sort,field,value,sort,field,type,double,expected,sort,field,set,missing,value,double,assert,equals,expected,sort,field,sort,field,field,sort,builder,new,field,sort,builder,value,missing,sort,field,field,sort,builder,build,shard,context,mock,field,expected,sort,field,new,sorted,numeric,sort,field,value,sort,field,type,double,expected,sort,field,set,missing,value,double,assert,equals,expected,sort,field,sort,field,double,random,double,random,double,field,sort,builder,new,field,sort,builder,value,missing,random,double,sort,field,field,sort,builder,build,shard,context,mock,field,expected,sort,field,new,sorted,numeric,sort,field,value,sort,field,type,double,expected,sort,field,set,missing,value,random,double,assert,equals,expected,sort,field,sort,field,field,sort,builder,new,field,sort,builder,value,missing,random,double,to,string,sort,field,field,sort,builder,build,shard,context,mock,field,expected,sort,field,new,sorted,numeric,sort,field,value,sort,field,type,double,expected,sort,field,set,missing,value,random,double,assert,equals,expected,sort,field,sort,field
FieldSortBuilderTests -> public void testBuildSortFieldMissingValue() throws IOException;1528167589;Test that missing values get transfered correctly to the SortField;public void testBuildSortFieldMissingValue() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()__        FieldSortBuilder fieldSortBuilder = new FieldSortBuilder("value").missing("_first")__        SortField sortField = fieldSortBuilder.build(shardContextMock).field__        SortedNumericSortField expectedSortField = new SortedNumericSortField("value", SortField.Type.DOUBLE)__        expectedSortField.setMissingValue(Double.NEGATIVE_INFINITY)__        assertEquals(expectedSortField, sortField)___        fieldSortBuilder = new FieldSortBuilder("value").missing("_last")__        sortField = fieldSortBuilder.build(shardContextMock).field__        expectedSortField = new SortedNumericSortField("value", SortField.Type.DOUBLE)__        expectedSortField.setMissingValue(Double.POSITIVE_INFINITY)__        assertEquals(expectedSortField, sortField)___        Double randomDouble = randomDouble()__        fieldSortBuilder = new FieldSortBuilder("value").missing(randomDouble)__        sortField = fieldSortBuilder.build(shardContextMock).field__        expectedSortField = new SortedNumericSortField("value", SortField.Type.DOUBLE)__        expectedSortField.setMissingValue(randomDouble)__        assertEquals(expectedSortField, sortField)___        fieldSortBuilder = new FieldSortBuilder("value").missing(randomDouble.toString())__        sortField = fieldSortBuilder.build(shardContextMock).field__        expectedSortField = new SortedNumericSortField("value", SortField.Type.DOUBLE)__        expectedSortField.setMissingValue(randomDouble)__        assertEquals(expectedSortField, sortField)__    };test,that,missing,values,get,transfered,correctly,to,the,sort,field;public,void,test,build,sort,field,missing,value,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,field,sort,builder,field,sort,builder,new,field,sort,builder,value,missing,sort,field,sort,field,field,sort,builder,build,shard,context,mock,field,sorted,numeric,sort,field,expected,sort,field,new,sorted,numeric,sort,field,value,sort,field,type,double,expected,sort,field,set,missing,value,double,assert,equals,expected,sort,field,sort,field,field,sort,builder,new,field,sort,builder,value,missing,sort,field,field,sort,builder,build,shard,context,mock,field,expected,sort,field,new,sorted,numeric,sort,field,value,sort,field,type,double,expected,sort,field,set,missing,value,double,assert,equals,expected,sort,field,sort,field,double,random,double,random,double,field,sort,builder,new,field,sort,builder,value,missing,random,double,sort,field,field,sort,builder,build,shard,context,mock,field,expected,sort,field,new,sorted,numeric,sort,field,value,sort,field,type,double,expected,sort,field,set,missing,value,random,double,assert,equals,expected,sort,field,sort,field,field,sort,builder,new,field,sort,builder,value,missing,random,double,to,string,sort,field,field,sort,builder,build,shard,context,mock,field,expected,sort,field,new,sorted,numeric,sort,field,value,sort,field,type,double,expected,sort,field,set,missing,value,random,double,assert,equals,expected,sort,field,sort,field
FieldSortBuilderTests -> public void testBuildSortFieldMissingValue() throws IOException;1529916084;Test that missing values get transfered correctly to the SortField;public void testBuildSortFieldMissingValue() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()__        FieldSortBuilder fieldSortBuilder = new FieldSortBuilder("value").missing("_first")__        SortField sortField = fieldSortBuilder.build(shardContextMock).field__        SortedNumericSortField expectedSortField = new SortedNumericSortField("value", SortField.Type.DOUBLE)__        expectedSortField.setMissingValue(Double.NEGATIVE_INFINITY)__        assertEquals(expectedSortField, sortField)___        fieldSortBuilder = new FieldSortBuilder("value").missing("_last")__        sortField = fieldSortBuilder.build(shardContextMock).field__        expectedSortField = new SortedNumericSortField("value", SortField.Type.DOUBLE)__        expectedSortField.setMissingValue(Double.POSITIVE_INFINITY)__        assertEquals(expectedSortField, sortField)___        Double randomDouble = randomDouble()__        fieldSortBuilder = new FieldSortBuilder("value").missing(randomDouble)__        sortField = fieldSortBuilder.build(shardContextMock).field__        expectedSortField = new SortedNumericSortField("value", SortField.Type.DOUBLE)__        expectedSortField.setMissingValue(randomDouble)__        assertEquals(expectedSortField, sortField)___        fieldSortBuilder = new FieldSortBuilder("value").missing(randomDouble.toString())__        sortField = fieldSortBuilder.build(shardContextMock).field__        expectedSortField = new SortedNumericSortField("value", SortField.Type.DOUBLE)__        expectedSortField.setMissingValue(randomDouble)__        assertEquals(expectedSortField, sortField)__    };test,that,missing,values,get,transfered,correctly,to,the,sort,field;public,void,test,build,sort,field,missing,value,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,field,sort,builder,field,sort,builder,new,field,sort,builder,value,missing,sort,field,sort,field,field,sort,builder,build,shard,context,mock,field,sorted,numeric,sort,field,expected,sort,field,new,sorted,numeric,sort,field,value,sort,field,type,double,expected,sort,field,set,missing,value,double,assert,equals,expected,sort,field,sort,field,field,sort,builder,new,field,sort,builder,value,missing,sort,field,field,sort,builder,build,shard,context,mock,field,expected,sort,field,new,sorted,numeric,sort,field,value,sort,field,type,double,expected,sort,field,set,missing,value,double,assert,equals,expected,sort,field,sort,field,double,random,double,random,double,field,sort,builder,new,field,sort,builder,value,missing,random,double,sort,field,field,sort,builder,build,shard,context,mock,field,expected,sort,field,new,sorted,numeric,sort,field,value,sort,field,type,double,expected,sort,field,set,missing,value,random,double,assert,equals,expected,sort,field,sort,field,field,sort,builder,new,field,sort,builder,value,missing,random,double,to,string,sort,field,field,sort,builder,build,shard,context,mock,field,expected,sort,field,new,sorted,numeric,sort,field,value,sort,field,type,double,expected,sort,field,set,missing,value,random,double,assert,equals,expected,sort,field,sort,field
FieldSortBuilderTests -> public void testBuildSortFieldMissingValue() throws IOException;1539615817;Test that missing values get transferred correctly to the SortField;public void testBuildSortFieldMissingValue() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()__        FieldSortBuilder fieldSortBuilder = new FieldSortBuilder("value").missing("_first")__        SortField sortField = fieldSortBuilder.build(shardContextMock).field__        SortedNumericSortField expectedSortField = new SortedNumericSortField("value", SortField.Type.DOUBLE)__        expectedSortField.setMissingValue(Double.NEGATIVE_INFINITY)__        assertEquals(expectedSortField, sortField)___        fieldSortBuilder = new FieldSortBuilder("value").missing("_last")__        sortField = fieldSortBuilder.build(shardContextMock).field__        expectedSortField = new SortedNumericSortField("value", SortField.Type.DOUBLE)__        expectedSortField.setMissingValue(Double.POSITIVE_INFINITY)__        assertEquals(expectedSortField, sortField)___        Double randomDouble = randomDouble()__        fieldSortBuilder = new FieldSortBuilder("value").missing(randomDouble)__        sortField = fieldSortBuilder.build(shardContextMock).field__        expectedSortField = new SortedNumericSortField("value", SortField.Type.DOUBLE)__        expectedSortField.setMissingValue(randomDouble)__        assertEquals(expectedSortField, sortField)___        fieldSortBuilder = new FieldSortBuilder("value").missing(randomDouble.toString())__        sortField = fieldSortBuilder.build(shardContextMock).field__        expectedSortField = new SortedNumericSortField("value", SortField.Type.DOUBLE)__        expectedSortField.setMissingValue(randomDouble)__        assertEquals(expectedSortField, sortField)__    };test,that,missing,values,get,transferred,correctly,to,the,sort,field;public,void,test,build,sort,field,missing,value,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,field,sort,builder,field,sort,builder,new,field,sort,builder,value,missing,sort,field,sort,field,field,sort,builder,build,shard,context,mock,field,sorted,numeric,sort,field,expected,sort,field,new,sorted,numeric,sort,field,value,sort,field,type,double,expected,sort,field,set,missing,value,double,assert,equals,expected,sort,field,sort,field,field,sort,builder,new,field,sort,builder,value,missing,sort,field,field,sort,builder,build,shard,context,mock,field,expected,sort,field,new,sorted,numeric,sort,field,value,sort,field,type,double,expected,sort,field,set,missing,value,double,assert,equals,expected,sort,field,sort,field,double,random,double,random,double,field,sort,builder,new,field,sort,builder,value,missing,random,double,sort,field,field,sort,builder,build,shard,context,mock,field,expected,sort,field,new,sorted,numeric,sort,field,value,sort,field,type,double,expected,sort,field,set,missing,value,random,double,assert,equals,expected,sort,field,sort,field,field,sort,builder,new,field,sort,builder,value,missing,random,double,to,string,sort,field,field,sort,builder,build,shard,context,mock,field,expected,sort,field,new,sorted,numeric,sort,field,value,sort,field,type,double,expected,sort,field,set,missing,value,random,double,assert,equals,expected,sort,field,sort,field
FieldSortBuilderTests -> public void testMultiValueMode() throws IOException;1524684173;Test that the sort builder mode gets transfered correctly to the SortField;public void testMultiValueMode() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()___        FieldSortBuilder sortBuilder = new FieldSortBuilder("value").sortMode(SortMode.MIN)__        SortField sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField, instanceOf(SortedNumericSortField.class))__        SortedNumericSortField numericSortField = (SortedNumericSortField) sortField__        assertEquals(SortedNumericSelector.Type.MIN, numericSortField.getSelector())___        sortBuilder = new FieldSortBuilder("value").sortMode(SortMode.MAX)__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField, instanceOf(SortedNumericSortField.class))__        numericSortField = (SortedNumericSortField) sortField__        assertEquals(SortedNumericSelector.Type.MAX, numericSortField.getSelector())___        sortBuilder = new FieldSortBuilder("value").sortMode(SortMode.SUM)__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        XFieldComparatorSource comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.SUM, comparatorSource.sortMode())___        sortBuilder = new FieldSortBuilder("value").sortMode(SortMode.AVG)__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.AVG, comparatorSource.sortMode())___        sortBuilder = new FieldSortBuilder("value").sortMode(SortMode.MEDIAN)__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.MEDIAN, comparatorSource.sortMode())___        _        sortBuilder = new FieldSortBuilder("value")__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField, instanceOf(SortedNumericSortField.class))__        numericSortField = (SortedNumericSortField) sortField__        assertEquals(SortedNumericSelector.Type.MIN, numericSortField.getSelector())___        sortBuilder = new FieldSortBuilder("value").order(SortOrder.DESC)__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField, instanceOf(SortedNumericSortField.class))__        numericSortField = (SortedNumericSortField) sortField__        assertEquals(SortedNumericSelector.Type.MAX, numericSortField.getSelector())__    };test,that,the,sort,builder,mode,gets,transfered,correctly,to,the,sort,field;public,void,test,multi,value,mode,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,field,sort,builder,sort,builder,new,field,sort,builder,value,sort,mode,sort,mode,min,sort,field,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,instance,of,sorted,numeric,sort,field,class,sorted,numeric,sort,field,numeric,sort,field,sorted,numeric,sort,field,sort,field,assert,equals,sorted,numeric,selector,type,min,numeric,sort,field,get,selector,sort,builder,new,field,sort,builder,value,sort,mode,sort,mode,max,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,instance,of,sorted,numeric,sort,field,class,numeric,sort,field,sorted,numeric,sort,field,sort,field,assert,equals,sorted,numeric,selector,type,max,numeric,sort,field,get,selector,sort,builder,new,field,sort,builder,value,sort,mode,sort,mode,sum,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,xfield,comparator,source,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,sum,comparator,source,sort,mode,sort,builder,new,field,sort,builder,value,sort,mode,sort,mode,avg,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,avg,comparator,source,sort,mode,sort,builder,new,field,sort,builder,value,sort,mode,sort,mode,median,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,median,comparator,source,sort,mode,sort,builder,new,field,sort,builder,value,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,instance,of,sorted,numeric,sort,field,class,numeric,sort,field,sorted,numeric,sort,field,sort,field,assert,equals,sorted,numeric,selector,type,min,numeric,sort,field,get,selector,sort,builder,new,field,sort,builder,value,order,sort,order,desc,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,instance,of,sorted,numeric,sort,field,class,numeric,sort,field,sorted,numeric,sort,field,sort,field,assert,equals,sorted,numeric,selector,type,max,numeric,sort,field,get,selector
FieldSortBuilderTests -> public void testMultiValueMode() throws IOException;1528167589;Test that the sort builder mode gets transfered correctly to the SortField;public void testMultiValueMode() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()___        FieldSortBuilder sortBuilder = new FieldSortBuilder("value").sortMode(SortMode.MIN)__        SortField sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField, instanceOf(SortedNumericSortField.class))__        SortedNumericSortField numericSortField = (SortedNumericSortField) sortField__        assertEquals(SortedNumericSelector.Type.MIN, numericSortField.getSelector())___        sortBuilder = new FieldSortBuilder("value").sortMode(SortMode.MAX)__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField, instanceOf(SortedNumericSortField.class))__        numericSortField = (SortedNumericSortField) sortField__        assertEquals(SortedNumericSelector.Type.MAX, numericSortField.getSelector())___        sortBuilder = new FieldSortBuilder("value").sortMode(SortMode.SUM)__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        XFieldComparatorSource comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.SUM, comparatorSource.sortMode())___        sortBuilder = new FieldSortBuilder("value").sortMode(SortMode.AVG)__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.AVG, comparatorSource.sortMode())___        sortBuilder = new FieldSortBuilder("value").sortMode(SortMode.MEDIAN)__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.MEDIAN, comparatorSource.sortMode())___        _        sortBuilder = new FieldSortBuilder("value")__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField, instanceOf(SortedNumericSortField.class))__        numericSortField = (SortedNumericSortField) sortField__        assertEquals(SortedNumericSelector.Type.MIN, numericSortField.getSelector())___        sortBuilder = new FieldSortBuilder("value").order(SortOrder.DESC)__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField, instanceOf(SortedNumericSortField.class))__        numericSortField = (SortedNumericSortField) sortField__        assertEquals(SortedNumericSelector.Type.MAX, numericSortField.getSelector())__    };test,that,the,sort,builder,mode,gets,transfered,correctly,to,the,sort,field;public,void,test,multi,value,mode,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,field,sort,builder,sort,builder,new,field,sort,builder,value,sort,mode,sort,mode,min,sort,field,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,instance,of,sorted,numeric,sort,field,class,sorted,numeric,sort,field,numeric,sort,field,sorted,numeric,sort,field,sort,field,assert,equals,sorted,numeric,selector,type,min,numeric,sort,field,get,selector,sort,builder,new,field,sort,builder,value,sort,mode,sort,mode,max,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,instance,of,sorted,numeric,sort,field,class,numeric,sort,field,sorted,numeric,sort,field,sort,field,assert,equals,sorted,numeric,selector,type,max,numeric,sort,field,get,selector,sort,builder,new,field,sort,builder,value,sort,mode,sort,mode,sum,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,xfield,comparator,source,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,sum,comparator,source,sort,mode,sort,builder,new,field,sort,builder,value,sort,mode,sort,mode,avg,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,avg,comparator,source,sort,mode,sort,builder,new,field,sort,builder,value,sort,mode,sort,mode,median,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,median,comparator,source,sort,mode,sort,builder,new,field,sort,builder,value,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,instance,of,sorted,numeric,sort,field,class,numeric,sort,field,sorted,numeric,sort,field,sort,field,assert,equals,sorted,numeric,selector,type,min,numeric,sort,field,get,selector,sort,builder,new,field,sort,builder,value,order,sort,order,desc,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,instance,of,sorted,numeric,sort,field,class,numeric,sort,field,sorted,numeric,sort,field,sort,field,assert,equals,sorted,numeric,selector,type,max,numeric,sort,field,get,selector
FieldSortBuilderTests -> public void testMultiValueMode() throws IOException;1529916084;Test that the sort builder mode gets transfered correctly to the SortField;public void testMultiValueMode() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()___        FieldSortBuilder sortBuilder = new FieldSortBuilder("value").sortMode(SortMode.MIN)__        SortField sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField, instanceOf(SortedNumericSortField.class))__        SortedNumericSortField numericSortField = (SortedNumericSortField) sortField__        assertEquals(SortedNumericSelector.Type.MIN, numericSortField.getSelector())___        sortBuilder = new FieldSortBuilder("value").sortMode(SortMode.MAX)__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField, instanceOf(SortedNumericSortField.class))__        numericSortField = (SortedNumericSortField) sortField__        assertEquals(SortedNumericSelector.Type.MAX, numericSortField.getSelector())___        sortBuilder = new FieldSortBuilder("value").sortMode(SortMode.SUM)__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        XFieldComparatorSource comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.SUM, comparatorSource.sortMode())___        sortBuilder = new FieldSortBuilder("value").sortMode(SortMode.AVG)__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.AVG, comparatorSource.sortMode())___        sortBuilder = new FieldSortBuilder("value").sortMode(SortMode.MEDIAN)__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.MEDIAN, comparatorSource.sortMode())___        _        sortBuilder = new FieldSortBuilder("value")__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField, instanceOf(SortedNumericSortField.class))__        numericSortField = (SortedNumericSortField) sortField__        assertEquals(SortedNumericSelector.Type.MIN, numericSortField.getSelector())___        sortBuilder = new FieldSortBuilder("value").order(SortOrder.DESC)__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField, instanceOf(SortedNumericSortField.class))__        numericSortField = (SortedNumericSortField) sortField__        assertEquals(SortedNumericSelector.Type.MAX, numericSortField.getSelector())__    };test,that,the,sort,builder,mode,gets,transfered,correctly,to,the,sort,field;public,void,test,multi,value,mode,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,field,sort,builder,sort,builder,new,field,sort,builder,value,sort,mode,sort,mode,min,sort,field,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,instance,of,sorted,numeric,sort,field,class,sorted,numeric,sort,field,numeric,sort,field,sorted,numeric,sort,field,sort,field,assert,equals,sorted,numeric,selector,type,min,numeric,sort,field,get,selector,sort,builder,new,field,sort,builder,value,sort,mode,sort,mode,max,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,instance,of,sorted,numeric,sort,field,class,numeric,sort,field,sorted,numeric,sort,field,sort,field,assert,equals,sorted,numeric,selector,type,max,numeric,sort,field,get,selector,sort,builder,new,field,sort,builder,value,sort,mode,sort,mode,sum,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,xfield,comparator,source,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,sum,comparator,source,sort,mode,sort,builder,new,field,sort,builder,value,sort,mode,sort,mode,avg,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,avg,comparator,source,sort,mode,sort,builder,new,field,sort,builder,value,sort,mode,sort,mode,median,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,median,comparator,source,sort,mode,sort,builder,new,field,sort,builder,value,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,instance,of,sorted,numeric,sort,field,class,numeric,sort,field,sorted,numeric,sort,field,sort,field,assert,equals,sorted,numeric,selector,type,min,numeric,sort,field,get,selector,sort,builder,new,field,sort,builder,value,order,sort,order,desc,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,instance,of,sorted,numeric,sort,field,class,numeric,sort,field,sorted,numeric,sort,field,sort,field,assert,equals,sorted,numeric,selector,type,max,numeric,sort,field,get,selector
FieldSortBuilderTests -> public void testMultiValueMode() throws IOException;1539615817;Test that the sort builder mode gets transferred correctly to the SortField;public void testMultiValueMode() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()___        FieldSortBuilder sortBuilder = new FieldSortBuilder("value").sortMode(SortMode.MIN)__        SortField sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField, instanceOf(SortedNumericSortField.class))__        SortedNumericSortField numericSortField = (SortedNumericSortField) sortField__        assertEquals(SortedNumericSelector.Type.MIN, numericSortField.getSelector())___        sortBuilder = new FieldSortBuilder("value").sortMode(SortMode.MAX)__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField, instanceOf(SortedNumericSortField.class))__        numericSortField = (SortedNumericSortField) sortField__        assertEquals(SortedNumericSelector.Type.MAX, numericSortField.getSelector())___        sortBuilder = new FieldSortBuilder("value").sortMode(SortMode.SUM)__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        XFieldComparatorSource comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.SUM, comparatorSource.sortMode())___        sortBuilder = new FieldSortBuilder("value").sortMode(SortMode.AVG)__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.AVG, comparatorSource.sortMode())___        sortBuilder = new FieldSortBuilder("value").sortMode(SortMode.MEDIAN)__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.MEDIAN, comparatorSource.sortMode())___        _        sortBuilder = new FieldSortBuilder("value")__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField, instanceOf(SortedNumericSortField.class))__        numericSortField = (SortedNumericSortField) sortField__        assertEquals(SortedNumericSelector.Type.MIN, numericSortField.getSelector())___        sortBuilder = new FieldSortBuilder("value").order(SortOrder.DESC)__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField, instanceOf(SortedNumericSortField.class))__        numericSortField = (SortedNumericSortField) sortField__        assertEquals(SortedNumericSelector.Type.MAX, numericSortField.getSelector())__    };test,that,the,sort,builder,mode,gets,transferred,correctly,to,the,sort,field;public,void,test,multi,value,mode,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,field,sort,builder,sort,builder,new,field,sort,builder,value,sort,mode,sort,mode,min,sort,field,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,instance,of,sorted,numeric,sort,field,class,sorted,numeric,sort,field,numeric,sort,field,sorted,numeric,sort,field,sort,field,assert,equals,sorted,numeric,selector,type,min,numeric,sort,field,get,selector,sort,builder,new,field,sort,builder,value,sort,mode,sort,mode,max,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,instance,of,sorted,numeric,sort,field,class,numeric,sort,field,sorted,numeric,sort,field,sort,field,assert,equals,sorted,numeric,selector,type,max,numeric,sort,field,get,selector,sort,builder,new,field,sort,builder,value,sort,mode,sort,mode,sum,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,xfield,comparator,source,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,sum,comparator,source,sort,mode,sort,builder,new,field,sort,builder,value,sort,mode,sort,mode,avg,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,avg,comparator,source,sort,mode,sort,builder,new,field,sort,builder,value,sort,mode,sort,mode,median,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,median,comparator,source,sort,mode,sort,builder,new,field,sort,builder,value,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,instance,of,sorted,numeric,sort,field,class,numeric,sort,field,sorted,numeric,sort,field,sort,field,assert,equals,sorted,numeric,selector,type,min,numeric,sort,field,get,selector,sort,builder,new,field,sort,builder,value,order,sort,order,desc,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,instance,of,sorted,numeric,sort,field,class,numeric,sort,field,sorted,numeric,sort,field,sort,field,assert,equals,sorted,numeric,selector,type,max,numeric,sort,field,get,selector
FieldSortBuilderTests -> public void testNestedSortBothThrows() throws IOException;1524684173;Test we can either set nested sort via path/filter or via nested sort builder, not both;public void testNestedSortBothThrows() throws IOException {_        FieldSortBuilder sortBuilder = new FieldSortBuilder(MAPPED_STRING_FIELDNAME)__        IllegalArgumentException iae = expectThrows(IllegalArgumentException.class,_                () -> sortBuilder.setNestedPath("nestedPath").setNestedSort(new NestedSortBuilder("otherPath")))__        assertEquals("Setting both nested_path/nested_filter and nested not allowed", iae.getMessage())__        iae = expectThrows(IllegalArgumentException.class,_                () -> sortBuilder.setNestedSort(new NestedSortBuilder("otherPath")).setNestedPath("nestedPath"))__        assertEquals("Setting both nested_path/nested_filter and nested not allowed", iae.getMessage())__        iae = expectThrows(IllegalArgumentException.class,_                () -> sortBuilder.setNestedSort(new NestedSortBuilder("otherPath")).setNestedFilter(QueryBuilders.matchAllQuery()))__        assertEquals("Setting both nested_path/nested_filter and nested not allowed", iae.getMessage())__    };test,we,can,either,set,nested,sort,via,path,filter,or,via,nested,sort,builder,not,both;public,void,test,nested,sort,both,throws,throws,ioexception,field,sort,builder,sort,builder,new,field,sort,builder,illegal,argument,exception,iae,expect,throws,illegal,argument,exception,class,sort,builder,set,nested,path,nested,path,set,nested,sort,new,nested,sort,builder,other,path,assert,equals,setting,both,and,nested,not,allowed,iae,get,message,iae,expect,throws,illegal,argument,exception,class,sort,builder,set,nested,sort,new,nested,sort,builder,other,path,set,nested,path,nested,path,assert,equals,setting,both,and,nested,not,allowed,iae,get,message,iae,expect,throws,illegal,argument,exception,class,sort,builder,set,nested,sort,new,nested,sort,builder,other,path,set,nested,filter,query,builders,match,all,query,assert,equals,setting,both,and,nested,not,allowed,iae,get,message
FieldSortBuilderTests -> public void testNestedSortBothThrows() throws IOException;1528167589;Test we can either set nested sort via path/filter or via nested sort builder, not both;public void testNestedSortBothThrows() throws IOException {_        FieldSortBuilder sortBuilder = new FieldSortBuilder(MAPPED_STRING_FIELDNAME)__        IllegalArgumentException iae = expectThrows(IllegalArgumentException.class,_                () -> sortBuilder.setNestedPath("nestedPath").setNestedSort(new NestedSortBuilder("otherPath")))__        assertEquals("Setting both nested_path/nested_filter and nested not allowed", iae.getMessage())__        iae = expectThrows(IllegalArgumentException.class,_                () -> sortBuilder.setNestedSort(new NestedSortBuilder("otherPath")).setNestedPath("nestedPath"))__        assertEquals("Setting both nested_path/nested_filter and nested not allowed", iae.getMessage())__        iae = expectThrows(IllegalArgumentException.class,_                () -> sortBuilder.setNestedSort(new NestedSortBuilder("otherPath")).setNestedFilter(QueryBuilders.matchAllQuery()))__        assertEquals("Setting both nested_path/nested_filter and nested not allowed", iae.getMessage())__    };test,we,can,either,set,nested,sort,via,path,filter,or,via,nested,sort,builder,not,both;public,void,test,nested,sort,both,throws,throws,ioexception,field,sort,builder,sort,builder,new,field,sort,builder,illegal,argument,exception,iae,expect,throws,illegal,argument,exception,class,sort,builder,set,nested,path,nested,path,set,nested,sort,new,nested,sort,builder,other,path,assert,equals,setting,both,and,nested,not,allowed,iae,get,message,iae,expect,throws,illegal,argument,exception,class,sort,builder,set,nested,sort,new,nested,sort,builder,other,path,set,nested,path,nested,path,assert,equals,setting,both,and,nested,not,allowed,iae,get,message,iae,expect,throws,illegal,argument,exception,class,sort,builder,set,nested,sort,new,nested,sort,builder,other,path,set,nested,filter,query,builders,match,all,query,assert,equals,setting,both,and,nested,not,allowed,iae,get,message
FieldSortBuilderTests -> public void testNestedSortBothThrows() throws IOException;1529916084;Test we can either set nested sort via path/filter or via nested sort builder, not both;public void testNestedSortBothThrows() throws IOException {_        FieldSortBuilder sortBuilder = new FieldSortBuilder(MAPPED_STRING_FIELDNAME)__        IllegalArgumentException iae = expectThrows(IllegalArgumentException.class,_                () -> sortBuilder.setNestedPath("nestedPath").setNestedSort(new NestedSortBuilder("otherPath")))__        assertEquals("Setting both nested_path/nested_filter and nested not allowed", iae.getMessage())__        iae = expectThrows(IllegalArgumentException.class,_                () -> sortBuilder.setNestedSort(new NestedSortBuilder("otherPath")).setNestedPath("nestedPath"))__        assertEquals("Setting both nested_path/nested_filter and nested not allowed", iae.getMessage())__        iae = expectThrows(IllegalArgumentException.class,_                () -> sortBuilder.setNestedSort(new NestedSortBuilder("otherPath")).setNestedFilter(QueryBuilders.matchAllQuery()))__        assertEquals("Setting both nested_path/nested_filter and nested not allowed", iae.getMessage())__    };test,we,can,either,set,nested,sort,via,path,filter,or,via,nested,sort,builder,not,both;public,void,test,nested,sort,both,throws,throws,ioexception,field,sort,builder,sort,builder,new,field,sort,builder,illegal,argument,exception,iae,expect,throws,illegal,argument,exception,class,sort,builder,set,nested,path,nested,path,set,nested,sort,new,nested,sort,builder,other,path,assert,equals,setting,both,and,nested,not,allowed,iae,get,message,iae,expect,throws,illegal,argument,exception,class,sort,builder,set,nested,sort,new,nested,sort,builder,other,path,set,nested,path,nested,path,assert,equals,setting,both,and,nested,not,allowed,iae,get,message,iae,expect,throws,illegal,argument,exception,class,sort,builder,set,nested,sort,new,nested,sort,builder,other,path,set,nested,filter,query,builders,match,all,query,assert,equals,setting,both,and,nested,not,allowed,iae,get,message
FieldSortBuilderTests -> public void testNestedSortBothThrows() throws IOException;1539615817;Test we can either set nested sort via path/filter or via nested sort builder, not both;public void testNestedSortBothThrows() throws IOException {_        FieldSortBuilder sortBuilder = new FieldSortBuilder(MAPPED_STRING_FIELDNAME)__        IllegalArgumentException iae = expectThrows(IllegalArgumentException.class,_                () -> sortBuilder.setNestedPath("nestedPath").setNestedSort(new NestedSortBuilder("otherPath")))__        assertEquals("Setting both nested_path/nested_filter and nested not allowed", iae.getMessage())__        iae = expectThrows(IllegalArgumentException.class,_                () -> sortBuilder.setNestedSort(new NestedSortBuilder("otherPath")).setNestedPath("nestedPath"))__        assertEquals("Setting both nested_path/nested_filter and nested not allowed", iae.getMessage())__        iae = expectThrows(IllegalArgumentException.class,_                () -> sortBuilder.setNestedSort(new NestedSortBuilder("otherPath")).setNestedFilter(QueryBuilders.matchAllQuery()))__        assertEquals("Setting both nested_path/nested_filter and nested not allowed", iae.getMessage())__    };test,we,can,either,set,nested,sort,via,path,filter,or,via,nested,sort,builder,not,both;public,void,test,nested,sort,both,throws,throws,ioexception,field,sort,builder,sort,builder,new,field,sort,builder,illegal,argument,exception,iae,expect,throws,illegal,argument,exception,class,sort,builder,set,nested,path,nested,path,set,nested,sort,new,nested,sort,builder,other,path,assert,equals,setting,both,and,nested,not,allowed,iae,get,message,iae,expect,throws,illegal,argument,exception,class,sort,builder,set,nested,sort,new,nested,sort,builder,other,path,set,nested,path,nested,path,assert,equals,setting,both,and,nested,not,allowed,iae,get,message,iae,expect,throws,illegal,argument,exception,class,sort,builder,set,nested,sort,new,nested,sort,builder,other,path,set,nested,filter,query,builders,match,all,query,assert,equals,setting,both,and,nested,not,allowed,iae,get,message
