commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected FieldSortBuilder createTestItem() {     return randomFieldSortBuilder(). }
false;public;0;33;;public FieldSortBuilder randomFieldSortBuilder() {     String fieldName = rarely() ? FieldSortBuilder.DOC_FIELD_NAME : randomAlphaOfLengthBetween(1, 10).     FieldSortBuilder builder = new FieldSortBuilder(fieldName).     if (randomBoolean()) {         builder.order(randomFrom(SortOrder.values())).     }     if (randomBoolean()) {         builder.missing(randomFrom(missingContent)).     }     if (randomBoolean()) {         builder.unmappedType(randomAlphaOfLengthBetween(1, 10)).     }     if (randomBoolean()) {         builder.sortMode(randomFrom(SortMode.values())).     }     if (randomBoolean()) {         if (randomBoolean()) {             builder.setNestedSort(createRandomNestedSort(3)).         } else {             // the following are alternative ways to setNestedSort for nested sorting             if (randomBoolean()) {                 builder.setNestedFilter(randomNestedFilter()).             }             if (randomBoolean()) {                 builder.setNestedPath(randomAlphaOfLengthBetween(1, 10)).             }         }     }     return builder. }
false;protected;1;36;;@Override protected FieldSortBuilder mutate(FieldSortBuilder original) throws IOException {     FieldSortBuilder mutated = new FieldSortBuilder(original).     int parameter = randomIntBetween(0, 4).     switch(parameter) {         case 0:             if (original.getNestedPath() == null && original.getNestedFilter() == null) {                 mutated.setNestedSort(randomValueOtherThan(original.getNestedSort(), () -> NestedSortBuilderTests.createRandomNestedSort(3))).             } else {                 if (randomBoolean()) {                     mutated.setNestedPath(randomValueOtherThan(original.getNestedPath(), () -> randomAlphaOfLengthBetween(1, 10))).                 } else {                     mutated.setNestedFilter(randomValueOtherThan(original.getNestedFilter(), () -> randomNestedFilter())).                 }             }             break.         case 1:             mutated.sortMode(randomValueOtherThan(original.sortMode(), () -> randomFrom(SortMode.values()))).             break.         case 2:             mutated.unmappedType(randomValueOtherThan(original.unmappedType(), () -> randomAlphaOfLengthBetween(1, 10))).             break.         case 3:             mutated.missing(randomValueOtherThan(original.missing(), () -> randomFrom(missingContent))).             break.         case 4:             mutated.order(randomValueOtherThan(original.order(), () -> randomFrom(SortOrder.values()))).             break.         default:             throw new IllegalStateException("Unsupported mutation.").     }     return mutated. }
false;protected;3;15;;@Override protected void sortFieldAssertions(FieldSortBuilder builder, SortField sortField, DocValueFormat format) throws IOException {     SortField.Type expectedType.     if (builder.getFieldName().equals(FieldSortBuilder.DOC_FIELD_NAME)) {         expectedType = SortField.Type.DOC.     } else {         expectedType = SortField.Type.CUSTOM.     }     assertEquals(expectedType, sortField.getType()).     assertEquals(builder.order() == SortOrder.ASC ? false : true, sortField.getReverse()).     if (expectedType == SortField.Type.CUSTOM) {         assertEquals(builder.getFieldName(), sortField.getField()).     }     assertEquals(DocValueFormat.RAW, format). }
true;public;0;27;/**  * Test that missing values get transferred correctly to the SortField  */ ;/**  * Test that missing values get transferred correctly to the SortField  */ public void testBuildSortFieldMissingValue() throws IOException {     QueryShardContext shardContextMock = createMockShardContext().     FieldSortBuilder fieldSortBuilder = new FieldSortBuilder("value").missing("_first").     SortField sortField = fieldSortBuilder.build(shardContextMock).field.     SortedNumericSortField expectedSortField = new SortedNumericSortField("value", SortField.Type.DOUBLE).     expectedSortField.setMissingValue(Double.NEGATIVE_INFINITY).     assertEquals(expectedSortField, sortField).     fieldSortBuilder = new FieldSortBuilder("value").missing("_last").     sortField = fieldSortBuilder.build(shardContextMock).field.     expectedSortField = new SortedNumericSortField("value", SortField.Type.DOUBLE).     expectedSortField.setMissingValue(Double.POSITIVE_INFINITY).     assertEquals(expectedSortField, sortField).     Double randomDouble = randomDouble().     fieldSortBuilder = new FieldSortBuilder("value").missing(randomDouble).     sortField = fieldSortBuilder.build(shardContextMock).field.     expectedSortField = new SortedNumericSortField("value", SortField.Type.DOUBLE).     expectedSortField.setMissingValue(randomDouble).     assertEquals(expectedSortField, sortField).     fieldSortBuilder = new FieldSortBuilder("value").missing(randomDouble.toString()).     sortField = fieldSortBuilder.build(shardContextMock).field.     expectedSortField = new SortedNumericSortField("value", SortField.Type.DOUBLE).     expectedSortField.setMissingValue(randomDouble).     assertEquals(expectedSortField, sortField). }
true;public;0;20;/**  * Test that the sort builder order gets transferred correctly to the SortField  */ ;/**  * Test that the sort builder order gets transferred correctly to the SortField  */ public void testBuildSortFieldOrder() throws IOException {     QueryShardContext shardContextMock = createMockShardContext().     FieldSortBuilder fieldSortBuilder = new FieldSortBuilder("value").     SortField sortField = fieldSortBuilder.build(shardContextMock).field.     SortedNumericSortField expectedSortField = new SortedNumericSortField("value", SortField.Type.DOUBLE, false).     expectedSortField.setMissingValue(Double.POSITIVE_INFINITY).     assertEquals(expectedSortField, sortField).     fieldSortBuilder = new FieldSortBuilder("value").order(SortOrder.ASC).     sortField = fieldSortBuilder.build(shardContextMock).field.     expectedSortField = new SortedNumericSortField("value", SortField.Type.DOUBLE, false).     expectedSortField.setMissingValue(Double.POSITIVE_INFINITY).     assertEquals(expectedSortField, sortField).     fieldSortBuilder = new FieldSortBuilder("value").order(SortOrder.DESC).     sortField = fieldSortBuilder.build(shardContextMock).field.     expectedSortField = new SortedNumericSortField("value", SortField.Type.DOUBLE, true, SortedNumericSelector.Type.MAX).     expectedSortField.setMissingValue(Double.NEGATIVE_INFINITY).     assertEquals(expectedSortField, sortField). }
true;public;0;46;/**  * Test that the sort builder mode gets transferred correctly to the SortField  */ ;/**  * Test that the sort builder mode gets transferred correctly to the SortField  */ public void testMultiValueMode() throws IOException {     QueryShardContext shardContextMock = createMockShardContext().     FieldSortBuilder sortBuilder = new FieldSortBuilder("value").sortMode(SortMode.MIN).     SortField sortField = sortBuilder.build(shardContextMock).field.     assertThat(sortField, instanceOf(SortedNumericSortField.class)).     SortedNumericSortField numericSortField = (SortedNumericSortField) sortField.     assertEquals(SortedNumericSelector.Type.MIN, numericSortField.getSelector()).     sortBuilder = new FieldSortBuilder("value").sortMode(SortMode.MAX).     sortField = sortBuilder.build(shardContextMock).field.     assertThat(sortField, instanceOf(SortedNumericSortField.class)).     numericSortField = (SortedNumericSortField) sortField.     assertEquals(SortedNumericSelector.Type.MAX, numericSortField.getSelector()).     sortBuilder = new FieldSortBuilder("value").sortMode(SortMode.SUM).     sortField = sortBuilder.build(shardContextMock).field.     assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class)).     XFieldComparatorSource comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource().     assertEquals(MultiValueMode.SUM, comparatorSource.sortMode()).     sortBuilder = new FieldSortBuilder("value").sortMode(SortMode.AVG).     sortField = sortBuilder.build(shardContextMock).field.     assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class)).     comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource().     assertEquals(MultiValueMode.AVG, comparatorSource.sortMode()).     sortBuilder = new FieldSortBuilder("value").sortMode(SortMode.MEDIAN).     sortField = sortBuilder.build(shardContextMock).field.     assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class)).     comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource().     assertEquals(MultiValueMode.MEDIAN, comparatorSource.sortMode()).     // sort mode should also be set by build() implicitly to MIN or MAX if not set explicitly on builder     sortBuilder = new FieldSortBuilder("value").     sortField = sortBuilder.build(shardContextMock).field.     assertThat(sortField, instanceOf(SortedNumericSortField.class)).     numericSortField = (SortedNumericSortField) sortField.     assertEquals(SortedNumericSelector.Type.MIN, numericSortField.getSelector()).     sortBuilder = new FieldSortBuilder("value").order(SortOrder.DESC).     sortField = sortBuilder.build(shardContextMock).field.     assertThat(sortField, instanceOf(SortedNumericSortField.class)).     numericSortField = (SortedNumericSortField) sortField.     assertEquals(SortedNumericSelector.Type.MAX, numericSortField.getSelector()). }
true;public;0;34;/**  * Test that the sort builder nested object gets created in the SortField  */ ;/**  * Test that the sort builder nested object gets created in the SortField  */ public void testBuildNested() throws IOException {     QueryShardContext shardContextMock = createMockShardContext().     FieldSortBuilder sortBuilder = new FieldSortBuilder("fieldName").setNestedSort(new NestedSortBuilder("path").setFilter(QueryBuilders.termQuery(MAPPED_STRING_FIELDNAME, "value"))).     SortField sortField = sortBuilder.build(shardContextMock).field.     assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class)).     XFieldComparatorSource comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource().     Nested nested = comparatorSource.nested().     assertNotNull(nested).     assertEquals(new TermQuery(new Term(MAPPED_STRING_FIELDNAME, "value")), nested.getInnerQuery()).     sortBuilder = new FieldSortBuilder("fieldName").setNestedPath("path").     sortField = sortBuilder.build(shardContextMock).field.     assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class)).     comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource().     nested = comparatorSource.nested().     assertNotNull(nested).     assertEquals(new TermQuery(new Term(TypeFieldMapper.NAME, "__path")), nested.getInnerQuery()).     sortBuilder = new FieldSortBuilder("fieldName").setNestedPath("path").setNestedFilter(QueryBuilders.termQuery(MAPPED_STRING_FIELDNAME, "value")).     sortField = sortBuilder.build(shardContextMock).field.     assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class)).     comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource().     nested = comparatorSource.nested().     assertNotNull(nested).     assertEquals(new TermQuery(new Term(MAPPED_STRING_FIELDNAME, "value")), nested.getInnerQuery()).     // if nested path is missing, we omit any filter and return a SortedNumericSortField     sortBuilder = new FieldSortBuilder("fieldName").setNestedFilter(QueryBuilders.termQuery(MAPPED_STRING_FIELDNAME, "value")).     sortField = sortBuilder.build(shardContextMock).field.     assertThat(sortField, instanceOf(SortedNumericSortField.class)). }
false;public;0;13;;public void testUnknownOptionFails() throws IOException {     String json = "{ \"post_date\" : {\"reverse\" : true} },\n".     try (XContentParser parser = createParser(JsonXContent.jsonXContent, json)) {         // need to skip until parser is located on second START_OBJECT         parser.nextToken().         parser.nextToken().         parser.nextToken().         XContentParseException e = expectThrows(XContentParseException.class, () -> FieldSortBuilder.fromXContent(parser, "")).         assertEquals("[1:18] [field_sort] unknown field [reverse], parser not found", e.getMessage()).     } }
false;protected;1;11;;@Override protected MappedFieldType provideMappedFieldType(String name) {     if (name.equals(MAPPED_STRING_FIELDNAME)) {         KeywordFieldMapper.KeywordFieldType fieldType = new KeywordFieldMapper.KeywordFieldType().         fieldType.setName(name).         fieldType.setHasDocValues(true).         return fieldType.     } else {         return super.provideMappedFieldType(name).     } }
true;public;0;26;/**  * Test that MIN, MAX mode work on non-numeric fields, but other modes throw exception  */ ;/**  * Test that MIN, MAX mode work on non-numeric fields, but other modes throw exception  */ public void testModeNonNumericField() throws IOException {     QueryShardContext shardContextMock = createMockShardContext().     FieldSortBuilder sortBuilder = new FieldSortBuilder(MAPPED_STRING_FIELDNAME).sortMode(SortMode.MIN).     SortField sortField = sortBuilder.build(shardContextMock).field.     assertThat(sortField, instanceOf(SortedSetSortField.class)).     assertEquals(SortedSetSelector.Type.MIN, ((SortedSetSortField) sortField).getSelector()).     sortBuilder = new FieldSortBuilder(MAPPED_STRING_FIELDNAME).sortMode(SortMode.MAX).     sortField = sortBuilder.build(shardContextMock).field.     assertThat(sortField, instanceOf(SortedSetSortField.class)).     assertEquals(SortedSetSelector.Type.MAX, ((SortedSetSortField) sortField).getSelector()).     String expectedError = "we only support AVG, MEDIAN and SUM on number based fields".     QueryShardException e = expectThrows(QueryShardException.class, () -> new FieldSortBuilder(MAPPED_STRING_FIELDNAME).sortMode(SortMode.AVG).build(shardContextMock)).     assertEquals(expectedError, e.getMessage()).     e = expectThrows(QueryShardException.class, () -> new FieldSortBuilder(MAPPED_STRING_FIELDNAME).sortMode(SortMode.SUM).build(shardContextMock)).     assertEquals(expectedError, e.getMessage()).     e = expectThrows(QueryShardException.class, () -> new FieldSortBuilder(MAPPED_STRING_FIELDNAME).sortMode(SortMode.MEDIAN).build(shardContextMock)).     assertEquals(expectedError, e.getMessage()). }
true;public;0;12;/**  * Test we can either set nested sort via path/filter or via nested sort builder, not both  */ ;/**  * Test we can either set nested sort via path/filter or via nested sort builder, not both  */ public void testNestedSortBothThrows() throws IOException {     FieldSortBuilder sortBuilder = new FieldSortBuilder(MAPPED_STRING_FIELDNAME).     IllegalArgumentException iae = expectThrows(IllegalArgumentException.class, () -> sortBuilder.setNestedPath("nestedPath").setNestedSort(new NestedSortBuilder("otherPath"))).     assertEquals("Setting both nested_path/nested_filter and nested not allowed", iae.getMessage()).     iae = expectThrows(IllegalArgumentException.class, () -> sortBuilder.setNestedSort(new NestedSortBuilder("otherPath")).setNestedPath("nestedPath")).     assertEquals("Setting both nested_path/nested_filter and nested not allowed", iae.getMessage()).     iae = expectThrows(IllegalArgumentException.class, () -> sortBuilder.setNestedSort(new NestedSortBuilder("otherPath")).setNestedFilter(QueryBuilders.matchAllQuery())).     assertEquals("Setting both nested_path/nested_filter and nested not allowed", iae.getMessage()). }
false;public;1;4;;@Override public QueryBuilder doRewrite(QueryRewriteContext queryShardContext) throws IOException {     return new MatchNoneQueryBuilder(). }
true;public;0;13;/**  * Test the nested Filter gets rewritten  */ ;/**  * Test the nested Filter gets rewritten  */ public void testNestedRewrites() throws IOException {     FieldSortBuilder sortBuilder = new FieldSortBuilder(MAPPED_STRING_FIELDNAME).     RangeQueryBuilder rangeQuery = new RangeQueryBuilder("fieldName") {          @Override         public QueryBuilder doRewrite(QueryRewriteContext queryShardContext) throws IOException {             return new MatchNoneQueryBuilder().         }     }.     sortBuilder.setNestedPath("path").setNestedFilter(rangeQuery).     FieldSortBuilder rewritten = sortBuilder.rewrite(createMockShardContext()).     assertNotSame(rangeQuery, rewritten.getNestedFilter()). }
false;public;1;4;;@Override public QueryBuilder doRewrite(QueryRewriteContext queryShardContext) throws IOException {     return new MatchNoneQueryBuilder(). }
true;public;0;13;/**  * Test the nested sort gets rewritten  */ ;/**  * Test the nested sort gets rewritten  */ public void testNestedSortRewrites() throws IOException {     FieldSortBuilder sortBuilder = new FieldSortBuilder(MAPPED_STRING_FIELDNAME).     RangeQueryBuilder rangeQuery = new RangeQueryBuilder("fieldName") {          @Override         public QueryBuilder doRewrite(QueryRewriteContext queryShardContext) throws IOException {             return new MatchNoneQueryBuilder().         }     }.     sortBuilder.setNestedSort(new NestedSortBuilder("path").setFilter(rangeQuery)).     FieldSortBuilder rewritten = sortBuilder.rewrite(createMockShardContext()).     assertNotSame(rangeQuery, rewritten.getNestedSort().getFilter()). }
false;protected;1;13;;@Override protected void assertWarnings(FieldSortBuilder testItem) {     List<String> expectedWarnings = new ArrayList<>().     if (testItem.getNestedFilter() != null) {         expectedWarnings.add("[nested_filter] has been deprecated in favour for the [nested] parameter").     }     if (testItem.getNestedPath() != null) {         expectedWarnings.add("[nested_path] has been deprecated in favor of the [nested] parameter").     }     if (expectedWarnings.isEmpty() == false) {         assertWarnings(expectedWarnings.toArray(new String[expectedWarnings.size()])).     } }
false;protected;2;4;;@Override protected FieldSortBuilder fromXContent(XContentParser parser, String fieldName) throws IOException {     return FieldSortBuilder.fromXContent(parser, fieldName). }
