commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;5;;@BeforeClass public static void beforeClass() {     threadPool = new TestThreadPool("BroadcastReplicationTests").     circuitBreakerService = new NoneCircuitBreakerService(). }
false;public;0;15;;@Override @Before public void setUp() throws Exception {     super.setUp().     MockNioTransport transport = new MockNioTransport(Settings.EMPTY, Version.CURRENT, threadPool, new NetworkService(Collections.emptyList()), PageCacheRecycler.NON_RECYCLING_INSTANCE, new NamedWriteableRegistry(Collections.emptyList()), circuitBreakerService).     clusterService = createClusterService(threadPool).     transportService = new TransportService(clusterService.getSettings(), transport, threadPool, TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> clusterService.localNode(), null, Collections.emptySet()).     transportService.start().     transportService.acceptIncomingRequests().     broadcastReplicationAction = new TestBroadcastReplicationAction(clusterService, transportService, new ActionFilters(new HashSet<>()), new IndexNameExpressionResolver(), null). }
false;public;0;6;;@Override @After public void tearDown() throws Exception {     super.tearDown().     IOUtils.close(clusterService, transportService). }
false;public,static;0;5;;@AfterClass public static void afterClass() {     ThreadPool.terminate(threadPool, 30, TimeUnit.SECONDS).     threadPool = null. }
false;public;0;19;;public void testNotStartedPrimary() throws InterruptedException, ExecutionException, IOException {     final String index = "test".     setState(clusterService, state(index, randomBoolean(), randomBoolean() ? ShardRoutingState.INITIALIZING : ShardRoutingState.UNASSIGNED, ShardRoutingState.UNASSIGNED)).     logger.debug("--> using initial state:\n{}", clusterService.state()).     PlainActionFuture<BroadcastResponse> response = PlainActionFuture.newFuture().     broadcastReplicationAction.execute(new DummyBroadcastRequest().indices(index), response).     for (Tuple<ShardId, ActionListener<ReplicationResponse>> shardRequests : broadcastReplicationAction.capturedShardRequests) {         if (randomBoolean()) {             shardRequests.v2().onFailure(new NoShardAvailableActionException(shardRequests.v1())).         } else {             shardRequests.v2().onFailure(new UnavailableShardsException(shardRequests.v1(), "test exception")).         }     }     response.get().     logger.info("total shards: {}, ", response.get().getTotalShards()).     // we expect no failures here because UnavailableShardsException does not count as failed     assertBroadcastResponse(2, 0, 0, response.get(), null). }
false;public;0;15;;public void testStartedPrimary() throws InterruptedException, ExecutionException, IOException {     final String index = "test".     setState(clusterService, state(index, randomBoolean(), ShardRoutingState.STARTED)).     logger.debug("--> using initial state:\n{}", clusterService.state()).     PlainActionFuture<BroadcastResponse> response = PlainActionFuture.newFuture().     broadcastReplicationAction.execute(new DummyBroadcastRequest().indices(index), response).     for (Tuple<ShardId, ActionListener<ReplicationResponse>> shardRequests : broadcastReplicationAction.capturedShardRequests) {         ReplicationResponse replicationResponse = new ReplicationResponse().         replicationResponse.setShardInfo(new ReplicationResponse.ShardInfo(1, 1)).         shardRequests.v2().onResponse(replicationResponse).     }     logger.info("total shards: {}, ", response.get().getTotalShards()).     assertBroadcastResponse(1, 1, 0, response.get(), null). }
false;public;0;33;;public void testResultCombine() throws InterruptedException, ExecutionException, IOException {     final String index = "test".     int numShards = 1 + randomInt(3).     setState(clusterService, stateWithAssignedPrimariesAndOneReplica(index, numShards)).     logger.debug("--> using initial state:\n{}", clusterService.state()).     PlainActionFuture<BroadcastResponse> response = PlainActionFuture.newFuture().     broadcastReplicationAction.execute(new DummyBroadcastRequest().indices(index), response).     int succeeded = 0.     int failed = 0.     for (Tuple<ShardId, ActionListener<ReplicationResponse>> shardRequests : broadcastReplicationAction.capturedShardRequests) {         if (randomBoolean()) {             ReplicationResponse.ShardInfo.Failure[] failures = new ReplicationResponse.ShardInfo.Failure[0].             int shardsSucceeded = randomInt(1) + 1.             succeeded += shardsSucceeded.             ReplicationResponse replicationResponse = new ReplicationResponse().             if (shardsSucceeded == 1 && randomBoolean()) {                 // sometimes add failure (no failure means shard unavailable)                 failures = new ReplicationResponse.ShardInfo.Failure[1].                 failures[0] = new ReplicationResponse.ShardInfo.Failure(shardRequests.v1(), null, new Exception("pretend shard failed"), RestStatus.GATEWAY_TIMEOUT, false).                 failed++.             }             replicationResponse.setShardInfo(new ReplicationResponse.ShardInfo(2, shardsSucceeded, failures)).             shardRequests.v2().onResponse(replicationResponse).         } else {             // sometimes fail             failed += 2.             // just add a general exception and see if failed shards will be incremented by 2             shardRequests.v2().onFailure(new Exception("pretend shard failed")).         }     }     assertBroadcastResponse(2 * numShards, succeeded, failed, response.get(), Exception.class). }
false;public;0;6;;public void testNoShards() throws InterruptedException, ExecutionException, IOException {     setState(clusterService, stateWithNoShard()).     logger.debug("--> using initial state:\n{}", clusterService.state()).     BroadcastResponse response = executeAndAssertImmediateResponse(broadcastReplicationAction, new DummyBroadcastRequest()).     assertBroadcastResponse(0, 0, 0, response, null). }
false;public;0;10;;public void testShardsList() throws InterruptedException, ExecutionException {     final String index = "test".     final ShardId shardId = new ShardId(index, "_na_", 0).     ClusterState clusterState = state(index, randomBoolean(), randomBoolean() ? ShardRoutingState.INITIALIZING : ShardRoutingState.UNASSIGNED, ShardRoutingState.UNASSIGNED).     logger.debug("--> using initial state:\n{}", clusterService.state()).     List<ShardId> shards = broadcastReplicationAction.shards(new DummyBroadcastRequest().indices(shardId.getIndexName()), clusterState).     assertThat(shards.size(), equalTo(1)).     assertThat(shards.get(0), equalTo(shardId)). }
false;protected;0;4;;@Override protected ReplicationResponse newShardResponse() {     return new ReplicationResponse(). }
false;protected;2;4;;@Override protected BasicReplicationRequest newShardRequest(DummyBroadcastRequest request, ShardId shardId) {     return new BasicReplicationRequest().setShardId(shardId). }
false;protected;4;5;;@Override protected BroadcastResponse newResponse(int successfulShards, int failedShards, int totalNumCopies, List<DefaultShardOperationFailedException> shardFailures) {     return new BroadcastResponse(totalNumCopies, successfulShards, failedShards, shardFailures). }
false;protected;4;5;;@Override protected void shardExecute(Task task, DummyBroadcastRequest request, ShardId shardId, ActionListener<ReplicationResponse> shardActionListener) {     capturedShardRequests.add(new Tuple<>(shardId, shardActionListener)). }
false;public;2;9;;public FlushResponse assertImmediateResponse(String index, TransportFlushAction flushAction) {     Date beginDate = new Date().     FlushResponse flushResponse = ActionTestUtils.executeBlocking(flushAction, new FlushRequest(index)).     Date endDate = new Date().     long maxTime = 500.     assertThat("this should not take longer than " + maxTime + " ms. The request hangs somewhere", endDate.getTime() - beginDate.getTime(), lessThanOrEqualTo(maxTime)).     return flushResponse. }
false;public;2;7;;public BroadcastResponse executeAndAssertImmediateResponse(TransportBroadcastReplicationAction<DummyBroadcastRequest, BroadcastResponse, ?, ?> broadcastAction, DummyBroadcastRequest request) {     PlainActionFuture<BroadcastResponse> response = PlainActionFuture.newFuture().     broadcastAction.execute(request, response).     return response.actionGet("5s"). }
false;private;5;8;;private void assertBroadcastResponse(int total, int successful, int failed, BroadcastResponse response, Class<?> exceptionClass) {     assertThat(response.getSuccessfulShards(), equalTo(successful)).     assertThat(response.getTotalShards(), equalTo(total)).     assertThat(response.getFailedShards(), equalTo(failed)).     for (int i = 0. i < failed. i++) {         assertThat(response.getShardFailures()[0].getCause().getCause(), instanceOf(exceptionClass)).     } }
