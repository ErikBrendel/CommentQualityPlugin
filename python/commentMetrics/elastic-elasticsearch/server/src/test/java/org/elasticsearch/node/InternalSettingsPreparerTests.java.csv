commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void createBaseEnvSettings() {     homeDir = createTempDir().     baseEnvSettings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), homeDir).build(). }
false;public;0;5;;@After public void clearBaseEnvSettings() {     homeDir = null.     baseEnvSettings = null. }
false;public;0;16;;public void testEmptySettings() {     Settings settings = InternalSettingsPreparer.prepareSettings(Settings.EMPTY).     assertNull(settings.get("node.name")).     // a cluster name was set     assertNotNull(settings.get(ClusterName.CLUSTER_NAME_SETTING.getKey())).     int size = settings.names().size().     String defaultNodeName = randomAlphaOfLength(8).     Environment env = InternalSettingsPreparer.prepareEnvironment(baseEnvSettings, emptyMap(), null, () -> defaultNodeName).     settings = env.settings().     assertEquals(defaultNodeName, settings.get("node.name")).     // a cluster name was set     assertNotNull(settings.get(ClusterName.CLUSTER_NAME_SETTING.getKey())).     assertEquals(settings.toString(), size + 1, /* path.home is in the base settings */     settings.names().size()).     String home = Environment.PATH_HOME_SETTING.get(baseEnvSettings).     String configDir = env.configFile().toString().     assertTrue(configDir, configDir.startsWith(home)). }
false;public;0;6;;public void testDefaultClusterName() {     Settings settings = InternalSettingsPreparer.prepareSettings(Settings.EMPTY).     assertEquals("elasticsearch", settings.get("cluster.name")).     settings = InternalSettingsPreparer.prepareSettings(Settings.builder().put("cluster.name", "foobar").build()).     assertEquals("foobar", settings.get("cluster.name")). }
false;public;0;13;;public void testGarbageIsNotSwallowed() throws IOException {     try {         InputStream garbage = getClass().getResourceAsStream("/config/garbage/garbage.yml").         Path home = createTempDir().         Path config = home.resolve("config").         Files.createDirectory(config).         Files.copy(garbage, config.resolve("elasticsearch.yml")).         InternalSettingsPreparer.prepareEnvironment(Settings.builder().put(baseEnvSettings).build(), emptyMap(), null, () -> "default_node_name").     } catch (SettingsException e) {         assertEquals("Failed to load settings from [elasticsearch.yml]", e.getMessage()).     } }
false;public;0;9;;public void testYamlNotAllowed() throws IOException {     InputStream yaml = getClass().getResourceAsStream("/config/elasticsearch.yml").     Path config = homeDir.resolve("config").     Files.createDirectory(config).     Files.copy(yaml, config.resolve("elasticsearch.yaml")).     SettingsException e = expectThrows(SettingsException.class, () -> InternalSettingsPreparer.prepareEnvironment(Settings.builder().put(baseEnvSettings).build(), emptyMap(), null, DEFAULT_NODE_NAME_SHOULDNT_BE_CALLED)).     assertEquals("elasticsearch.yaml was deprecated in 5.5.0 and must be renamed to elasticsearch.yml", e.getMessage()). }
false;public;0;9;;public void testJsonNotAllowed() throws IOException {     InputStream yaml = getClass().getResourceAsStream("/config/elasticsearch.json").     Path config = homeDir.resolve("config").     Files.createDirectory(config).     Files.copy(yaml, config.resolve("elasticsearch.json")).     SettingsException e = expectThrows(SettingsException.class, () -> InternalSettingsPreparer.prepareEnvironment(Settings.builder().put(baseEnvSettings).build(), emptyMap(), null, DEFAULT_NODE_NAME_SHOULDNT_BE_CALLED)).     assertEquals("elasticsearch.json was deprecated in 5.5.0 and must be converted to elasticsearch.yml", e.getMessage()). }
false;public;0;9;;public void testSecureSettings() {     MockSecureSettings secureSettings = new MockSecureSettings().     secureSettings.setString("foo", "secret").     Settings input = Settings.builder().put(baseEnvSettings).setSecureSettings(secureSettings).build().     Environment env = InternalSettingsPreparer.prepareEnvironment(input, emptyMap(), null, () -> "default_node_name").     Setting<SecureString> fakeSetting = SecureSetting.secureString("foo", null).     assertEquals("secret", fakeSetting.get(env.settings()).toString()). }
false;public;0;7;;public void testDefaultPropertiesDoNothing() throws Exception {     Map<String, String> props = Collections.singletonMap("default.setting", "foo").     Environment env = InternalSettingsPreparer.prepareEnvironment(baseEnvSettings, props, null, () -> "default_node_name").     assertEquals("foo", env.settings().get("default.setting")).     assertNull(env.settings().get("setting")). }
