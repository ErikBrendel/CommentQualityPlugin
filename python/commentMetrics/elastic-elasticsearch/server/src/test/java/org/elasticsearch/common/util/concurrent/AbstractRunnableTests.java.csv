commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void onFailure(Exception e) {     fail(e.toString()). }
false;protected;0;4;;@Override protected void doRun() throws Exception {     runCallable.call(). }
false;public;0;19;;public void testRunSuccess() throws Exception {     Callable<?> runCallable = mock(Callable.class).     AbstractRunnable runnable = new AbstractRunnable() {          @Override         public void onFailure(Exception e) {             fail(e.toString()).         }          @Override         protected void doRun() throws Exception {             runCallable.call().         }     }.     runnable.run().     verify(runCallable).call(). }
false;public;1;4;;@Override public void onFailure(Exception e) {     assertSame(exception, e). }
false;protected;0;4;;@Override protected void doRun() throws Exception {     throw exception. }
false;public;0;17;;public void testRunFailure() throws Exception {     RuntimeException exception = new RuntimeException().     AbstractRunnable runnable = new AbstractRunnable() {          @Override         public void onFailure(Exception e) {             assertSame(exception, e).         }          @Override         protected void doRun() throws Exception {             throw exception.         }     }.     runnable.run(). }
false;public;1;4;;@Override public void onFailure(Exception e) {     fail(e.toString()). }
false;protected;0;4;;@Override protected void doRun() throws Exception {     runCallable.call(). }
false;public;0;9;;@Override public void onAfter() {     try {         afterCallable.call().     } catch (Exception e) {         fail(e.toString()).     } }
false;public;0;34;;public void testOnAfterSuccess() throws Exception {     Callable<?> runCallable = mock(Callable.class).     Callable<?> afterCallable = mock(Callable.class).     AbstractRunnable runnable = new AbstractRunnable() {          @Override         public void onFailure(Exception e) {             fail(e.toString()).         }          @Override         protected void doRun() throws Exception {             runCallable.call().         }          @Override         public void onAfter() {             try {                 afterCallable.call().             } catch (Exception e) {                 fail(e.toString()).             }         }     }.     runnable.run().     InOrder inOrder = inOrder(runCallable, afterCallable).     inOrder.verify(runCallable).call().     inOrder.verify(afterCallable).call(). }
false;public;1;4;;@Override public void onFailure(Exception e) {     assertSame(exception, e). }
false;protected;0;4;;@Override protected void doRun() throws Exception {     throw exception. }
false;public;0;9;;@Override public void onAfter() {     try {         afterCallable.call().     } catch (Exception e) {         fail(e.toString()).     } }
false;public;0;30;;public void testOnAfterFailure() throws Exception {     RuntimeException exception = new RuntimeException().     Callable<?> afterCallable = mock(Callable.class).     AbstractRunnable runnable = new AbstractRunnable() {          @Override         public void onFailure(Exception e) {             assertSame(exception, e).         }          @Override         protected void doRun() throws Exception {             throw exception.         }          @Override         public void onAfter() {             try {                 afterCallable.call().             } catch (Exception e) {                 fail(e.toString()).             }         }     }.     runnable.run().     verify(afterCallable).call(). }
false;public;1;12;;@Override public void onFailure(Exception e) {     assertSame(exception, e).     try {         failureCallable.call().     } catch (Exception inner) {         inner.addSuppressed(e).         fail(inner.toString()).     } }
false;protected;0;4;;@Override protected void doRun() throws Exception {     fail("Not tested"). }
false;public;0;26;;public void testOnRejection() throws Exception {     RuntimeException exception = new RuntimeException().     Callable<?> failureCallable = mock(Callable.class).     AbstractRunnable runnable = new AbstractRunnable() {          @Override         public void onFailure(Exception e) {             assertSame(exception, e).             try {                 failureCallable.call().             } catch (Exception inner) {                 inner.addSuppressed(e).                 fail(inner.toString()).             }         }          @Override         protected void doRun() throws Exception {             fail("Not tested").         }     }.     runnable.onRejection(exception). }
false;public;1;4;;@Override public void onFailure(Exception e) {     fail(e.toString()). }
false;protected;0;4;;@Override protected void doRun() throws Exception {     fail("Not tested"). }
false;public;0;15;;public void testIsForceExecutuonDefaultsFalse() {     AbstractRunnable runnable = new AbstractRunnable() {          @Override         public void onFailure(Exception e) {             fail(e.toString()).         }          @Override         protected void doRun() throws Exception {             fail("Not tested").         }     }.     assertFalse(runnable.isForceExecution()). }
