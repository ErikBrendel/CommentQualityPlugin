commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setupAction() {     action = new RestCreateIndexAction(Settings.EMPTY, controller()). }
false;public;0;18;;public void testIncludeTypeName() throws IOException {     Map<String, String> params = new HashMap<>().     params.put(INCLUDE_TYPE_NAME_PARAMETER, randomFrom("true", "false")).     RestRequest deprecatedRequest = new FakeRestRequest.Builder(xContentRegistry()).withMethod(RestRequest.Method.PUT).withPath("/some_index").withParams(params).build().     action.prepareRequest(deprecatedRequest, mock(NodeClient.class)).     assertWarnings(RestCreateIndexAction.TYPES_DEPRECATION_MESSAGE).     RestRequest validRequest = new FakeRestRequest.Builder(xContentRegistry()).withMethod(RestRequest.Method.PUT).withPath("/some_index").build().     action.prepareRequest(validRequest, mock(NodeClient.class)). }
false;public;0;36;;public void testPrepareTypelessRequest() throws IOException {     XContentBuilder content = XContentFactory.jsonBuilder().startObject().startObject("mappings").startObject("properties").startObject("field1").field("type", "keyword").endObject().startObject("field2").field("type", "text").endObject().endObject().endObject().startObject("aliases").startObject("read_alias").endObject().endObject().endObject().     Map<String, Object> contentAsMap = XContentHelper.convertToMap(BytesReference.bytes(content), true, content.contentType()).v2().     boolean includeTypeName = false.     Map<String, Object> source = RestCreateIndexAction.prepareMappings(contentAsMap, includeTypeName).     XContentBuilder expectedContent = XContentFactory.jsonBuilder().startObject().startObject("mappings").startObject("_doc").startObject("properties").startObject("field1").field("type", "keyword").endObject().startObject("field2").field("type", "text").endObject().endObject().endObject().endObject().startObject("aliases").startObject("read_alias").endObject().endObject().endObject().     Map<String, Object> expectedContentAsMap = XContentHelper.convertToMap(BytesReference.bytes(expectedContent), true, expectedContent.contentType()).v2().     assertEquals(expectedContentAsMap, source). }
false;public;0;22;;public void testPrepareTypedRequest() throws IOException {     XContentBuilder content = XContentFactory.jsonBuilder().startObject().startObject("mappings").startObject("type").startObject("properties").startObject("field1").field("type", "keyword").endObject().startObject("field2").field("type", "text").endObject().endObject().endObject().endObject().startObject("aliases").startObject("read_alias").endObject().endObject().endObject().     Map<String, Object> contentAsMap = XContentHelper.convertToMap(BytesReference.bytes(content), true, content.contentType()).v2().     boolean includeTypeName = true.     Map<String, Object> source = RestCreateIndexAction.prepareMappings(contentAsMap, includeTypeName).     assertEquals(contentAsMap, source). }
false;public;0;15;;public void testMalformedMappings() throws IOException {     XContentBuilder content = XContentFactory.jsonBuilder().startObject().field("mappings", "some string").startObject("aliases").startObject("read_alias").endObject().endObject().endObject().     Map<String, Object> contentAsMap = XContentHelper.convertToMap(BytesReference.bytes(content), true, content.contentType()).v2().     boolean includeTypeName = false.     Map<String, Object> source = RestCreateIndexAction.prepareMappings(contentAsMap, includeTypeName).     assertEquals(contentAsMap, source). }
