# id;timestamp;commentText;codeText;commentWords;codeWords
MultiMatchQueryBuilderTests -> public void testFuzzinessNotAllowedTypes() throws IOException;1524684173;`fuzziness` is not allowed for `cross_fields`, `phrase` and `phrase_prefix` and should throw an error;public void testFuzzinessNotAllowedTypes() throws IOException {_        String[] notAllowedTypes = new String[]{ Type.CROSS_FIELDS.parseField().getPreferredName(),_            Type.PHRASE.parseField().getPreferredName(), Type.PHRASE_PREFIX.parseField().getPreferredName()}__        for (String type : notAllowedTypes) {_            String json =_                    "{\n" +_                    "  \"multi_match\" : {\n" +_                    "    \"query\" : \"quick brown fox\",\n" +_                    "    \"fields\" : [ \"title^1.0\", \"title.original^1.0\", \"title.shingles^1.0\" ],\n" +_                    "    \"type\" : \"" + type + "\",\n" +_                    "    \"fuzziness\" : 1" +_                    "  }\n" +_                    "}"___            ParsingException e = expectThrows(ParsingException.class, () -> parseQuery(json))__            assertEquals("Fuzziness not allowed for type [" + type +"]", e.getMessage())__        }_    };fuzziness,is,not,allowed,for,phrase,and,and,should,throw,an,error;public,void,test,fuzziness,not,allowed,types,throws,ioexception,string,not,allowed,types,new,string,type,parse,field,get,preferred,name,type,phrase,parse,field,get,preferred,name,type,parse,field,get,preferred,name,for,string,type,not,allowed,types,string,json,n,n,query,quick,brown,fox,n,fields,title,1,0,title,original,1,0,title,shingles,1,0,n,type,type,n,fuzziness,1,n,parsing,exception,e,expect,throws,parsing,exception,class,parse,query,json,assert,equals,fuzziness,not,allowed,for,type,type,e,get,message
MultiMatchQueryBuilderTests -> public void testFuzzinessNotAllowedTypes() throws IOException;1528167589;`fuzziness` is not allowed for `cross_fields`, `phrase` and `phrase_prefix` and should throw an error;public void testFuzzinessNotAllowedTypes() throws IOException {_        String[] notAllowedTypes = new String[]{ Type.CROSS_FIELDS.parseField().getPreferredName(),_            Type.PHRASE.parseField().getPreferredName(), Type.PHRASE_PREFIX.parseField().getPreferredName()}__        for (String type : notAllowedTypes) {_            String json =_                    "{\n" +_                    "  \"multi_match\" : {\n" +_                    "    \"query\" : \"quick brown fox\",\n" +_                    "    \"fields\" : [ \"title^1.0\", \"title.original^1.0\", \"title.shingles^1.0\" ],\n" +_                    "    \"type\" : \"" + type + "\",\n" +_                    "    \"fuzziness\" : 1" +_                    "  }\n" +_                    "}"___            ParsingException e = expectThrows(ParsingException.class, () -> parseQuery(json))__            assertEquals("Fuzziness not allowed for type [" + type +"]", e.getMessage())__        }_    };fuzziness,is,not,allowed,for,phrase,and,and,should,throw,an,error;public,void,test,fuzziness,not,allowed,types,throws,ioexception,string,not,allowed,types,new,string,type,parse,field,get,preferred,name,type,phrase,parse,field,get,preferred,name,type,parse,field,get,preferred,name,for,string,type,not,allowed,types,string,json,n,n,query,quick,brown,fox,n,fields,title,1,0,title,original,1,0,title,shingles,1,0,n,type,type,n,fuzziness,1,n,parsing,exception,e,expect,throws,parsing,exception,class,parse,query,json,assert,equals,fuzziness,not,allowed,for,type,type,e,get,message
MultiMatchQueryBuilderTests -> public void testFuzzinessNotAllowedTypes() throws IOException;1528762805;`fuzziness` is not allowed for `cross_fields`, `phrase` and `phrase_prefix` and should throw an error;public void testFuzzinessNotAllowedTypes() throws IOException {_        String[] notAllowedTypes = new String[]{ Type.CROSS_FIELDS.parseField().getPreferredName(),_            Type.PHRASE.parseField().getPreferredName(), Type.PHRASE_PREFIX.parseField().getPreferredName()}__        for (String type : notAllowedTypes) {_            String json =_                    "{\n" +_                    "  \"multi_match\" : {\n" +_                    "    \"query\" : \"quick brown fox\",\n" +_                    "    \"fields\" : [ \"title^1.0\", \"title.original^1.0\", \"title.shingles^1.0\" ],\n" +_                    "    \"type\" : \"" + type + "\",\n" +_                    "    \"fuzziness\" : 1" +_                    "  }\n" +_                    "}"___            ParsingException e = expectThrows(ParsingException.class, () -> parseQuery(json))__            assertEquals("Fuzziness not allowed for type [" + type +"]", e.getMessage())__        }_    };fuzziness,is,not,allowed,for,phrase,and,and,should,throw,an,error;public,void,test,fuzziness,not,allowed,types,throws,ioexception,string,not,allowed,types,new,string,type,parse,field,get,preferred,name,type,phrase,parse,field,get,preferred,name,type,parse,field,get,preferred,name,for,string,type,not,allowed,types,string,json,n,n,query,quick,brown,fox,n,fields,title,1,0,title,original,1,0,title,shingles,1,0,n,type,type,n,fuzziness,1,n,parsing,exception,e,expect,throws,parsing,exception,class,parse,query,json,assert,equals,fuzziness,not,allowed,for,type,type,e,get,message
MultiMatchQueryBuilderTests -> public void testFuzzinessNotAllowedTypes() throws IOException;1531937412;`fuzziness` is not allowed for `cross_fields`, `phrase` and `phrase_prefix` and should throw an error;public void testFuzzinessNotAllowedTypes() throws IOException {_        String[] notAllowedTypes = new String[]{ Type.CROSS_FIELDS.parseField().getPreferredName(),_            Type.PHRASE.parseField().getPreferredName(), Type.PHRASE_PREFIX.parseField().getPreferredName()}__        for (String type : notAllowedTypes) {_            String json =_                    "{\n" +_                    "  \"multi_match\" : {\n" +_                    "    \"query\" : \"quick brown fox\",\n" +_                    "    \"fields\" : [ \"title^1.0\", \"title.original^1.0\", \"title.shingles^1.0\" ],\n" +_                    "    \"type\" : \"" + type + "\",\n" +_                    "    \"fuzziness\" : 1" +_                    "  }\n" +_                    "}"___            ParsingException e = expectThrows(ParsingException.class, () -> parseQuery(json))__            assertEquals("Fuzziness not allowed for type [" + type +"]", e.getMessage())__        }_    };fuzziness,is,not,allowed,for,phrase,and,and,should,throw,an,error;public,void,test,fuzziness,not,allowed,types,throws,ioexception,string,not,allowed,types,new,string,type,parse,field,get,preferred,name,type,phrase,parse,field,get,preferred,name,type,parse,field,get,preferred,name,for,string,type,not,allowed,types,string,json,n,n,query,quick,brown,fox,n,fields,title,1,0,title,original,1,0,title,shingles,1,0,n,type,type,n,fuzziness,1,n,parsing,exception,e,expect,throws,parsing,exception,class,parse,query,json,assert,equals,fuzziness,not,allowed,for,type,type,e,get,message
MultiMatchQueryBuilderTests -> public void testFuzzinessNotAllowedTypes() throws IOException;1532685069;`fuzziness` is not allowed for `cross_fields`, `phrase` and `phrase_prefix` and should throw an error;public void testFuzzinessNotAllowedTypes() throws IOException {_        String[] notAllowedTypes = new String[]{ Type.CROSS_FIELDS.parseField().getPreferredName(),_            Type.PHRASE.parseField().getPreferredName(), Type.PHRASE_PREFIX.parseField().getPreferredName()}__        for (String type : notAllowedTypes) {_            String json =_                    "{\n" +_                    "  \"multi_match\" : {\n" +_                    "    \"query\" : \"quick brown fox\",\n" +_                    "    \"fields\" : [ \"title^1.0\", \"title.original^1.0\", \"title.shingles^1.0\" ],\n" +_                    "    \"type\" : \"" + type + "\",\n" +_                    "    \"fuzziness\" : 1" +_                    "  }\n" +_                    "}"___            ParsingException e = expectThrows(ParsingException.class, () -> parseQuery(json))__            assertEquals("Fuzziness not allowed for type [" + type +"]", e.getMessage())__        }_    };fuzziness,is,not,allowed,for,phrase,and,and,should,throw,an,error;public,void,test,fuzziness,not,allowed,types,throws,ioexception,string,not,allowed,types,new,string,type,parse,field,get,preferred,name,type,phrase,parse,field,get,preferred,name,type,parse,field,get,preferred,name,for,string,type,not,allowed,types,string,json,n,n,query,quick,brown,fox,n,fields,title,1,0,title,original,1,0,title,shingles,1,0,n,type,type,n,fuzziness,1,n,parsing,exception,e,expect,throws,parsing,exception,class,parse,query,json,assert,equals,fuzziness,not,allowed,for,type,type,e,get,message
MultiMatchQueryBuilderTests -> public void testFuzzinessNotAllowedTypes() throws IOException;1535046779;`fuzziness` is not allowed for `cross_fields`, `phrase` and `phrase_prefix` and should throw an error;public void testFuzzinessNotAllowedTypes() throws IOException {_        String[] notAllowedTypes = new String[]{ Type.CROSS_FIELDS.parseField().getPreferredName(),_            Type.PHRASE.parseField().getPreferredName(), Type.PHRASE_PREFIX.parseField().getPreferredName()}__        for (String type : notAllowedTypes) {_            String json =_                    "{\n" +_                    "  \"multi_match\" : {\n" +_                    "    \"query\" : \"quick brown fox\",\n" +_                    "    \"fields\" : [ \"title^1.0\", \"title.original^1.0\", \"title.shingles^1.0\" ],\n" +_                    "    \"type\" : \"" + type + "\",\n" +_                    "    \"fuzziness\" : 1" +_                    "  }\n" +_                    "}"___            ParsingException e = expectThrows(ParsingException.class, () -> parseQuery(json))__            assertEquals("Fuzziness not allowed for type [" + type +"]", e.getMessage())__        }_    };fuzziness,is,not,allowed,for,phrase,and,and,should,throw,an,error;public,void,test,fuzziness,not,allowed,types,throws,ioexception,string,not,allowed,types,new,string,type,parse,field,get,preferred,name,type,phrase,parse,field,get,preferred,name,type,parse,field,get,preferred,name,for,string,type,not,allowed,types,string,json,n,n,query,quick,brown,fox,n,fields,title,1,0,title,original,1,0,title,shingles,1,0,n,type,type,n,fuzziness,1,n,parsing,exception,e,expect,throws,parsing,exception,class,parse,query,json,assert,equals,fuzziness,not,allowed,for,type,type,e,get,message
MultiMatchQueryBuilderTests -> public void testFuzzinessNotAllowedTypes() throws IOException;1542697754;`fuzziness` is not allowed for `cross_fields`, `phrase` and `phrase_prefix` and should throw an error;public void testFuzzinessNotAllowedTypes() throws IOException {_        String[] notAllowedTypes = new String[]{ Type.CROSS_FIELDS.parseField().getPreferredName(),_            Type.PHRASE.parseField().getPreferredName(), Type.PHRASE_PREFIX.parseField().getPreferredName()}__        for (String type : notAllowedTypes) {_            String json =_                    "{\n" +_                    "  \"multi_match\" : {\n" +_                    "    \"query\" : \"quick brown fox\",\n" +_                    "    \"fields\" : [ \"title^1.0\", \"title.original^1.0\", \"title.shingles^1.0\" ],\n" +_                    "    \"type\" : \"" + type + "\",\n" +_                    "    \"fuzziness\" : 1" +_                    "  }\n" +_                    "}"___            ParsingException e = expectThrows(ParsingException.class, () -> parseQuery(json))__            assertEquals("Fuzziness not allowed for type [" + type +"]", e.getMessage())__        }_    };fuzziness,is,not,allowed,for,phrase,and,and,should,throw,an,error;public,void,test,fuzziness,not,allowed,types,throws,ioexception,string,not,allowed,types,new,string,type,parse,field,get,preferred,name,type,phrase,parse,field,get,preferred,name,type,parse,field,get,preferred,name,for,string,type,not,allowed,types,string,json,n,n,query,quick,brown,fox,n,fields,title,1,0,title,original,1,0,title,shingles,1,0,n,type,type,n,fuzziness,1,n,parsing,exception,e,expect,throws,parsing,exception,class,parse,query,json,assert,equals,fuzziness,not,allowed,for,type,type,e,get,message
MultiMatchQueryBuilderTests -> public void testFuzzinessNotAllowedTypes() throws IOException;1544728396;`fuzziness` is not allowed for `cross_fields`, `phrase` and `phrase_prefix` and should throw an error;public void testFuzzinessNotAllowedTypes() throws IOException {_        String[] notAllowedTypes = new String[]{ Type.CROSS_FIELDS.parseField().getPreferredName(),_            Type.PHRASE.parseField().getPreferredName(), Type.PHRASE_PREFIX.parseField().getPreferredName()}__        for (String type : notAllowedTypes) {_            String json =_                    "{\n" +_                    "  \"multi_match\" : {\n" +_                    "    \"query\" : \"quick brown fox\",\n" +_                    "    \"fields\" : [ \"title^1.0\", \"title.original^1.0\", \"title.shingles^1.0\" ],\n" +_                    "    \"type\" : \"" + type + "\",\n" +_                    "    \"fuzziness\" : 1" +_                    "  }\n" +_                    "}"___            ParsingException e = expectThrows(ParsingException.class, () -> parseQuery(json))__            assertEquals("Fuzziness not allowed for type [" + type +"]", e.getMessage())__        }_    };fuzziness,is,not,allowed,for,phrase,and,and,should,throw,an,error;public,void,test,fuzziness,not,allowed,types,throws,ioexception,string,not,allowed,types,new,string,type,parse,field,get,preferred,name,type,phrase,parse,field,get,preferred,name,type,parse,field,get,preferred,name,for,string,type,not,allowed,types,string,json,n,n,query,quick,brown,fox,n,fields,title,1,0,title,original,1,0,title,shingles,1,0,n,type,type,n,fuzziness,1,n,parsing,exception,e,expect,throws,parsing,exception,class,parse,query,json,assert,equals,fuzziness,not,allowed,for,type,type,e,get,message
MultiMatchQueryBuilderTests -> public void testFuzzinessNotAllowedTypes() throws IOException;1547734228;`fuzziness` is not allowed for `cross_fields`, `phrase` and `phrase_prefix` and should throw an error;public void testFuzzinessNotAllowedTypes() throws IOException {_        String[] notAllowedTypes = new String[]{ Type.CROSS_FIELDS.parseField().getPreferredName(),_            Type.PHRASE.parseField().getPreferredName(), Type.PHRASE_PREFIX.parseField().getPreferredName()}__        for (String type : notAllowedTypes) {_            String json =_                    "{\n" +_                    "  \"multi_match\" : {\n" +_                    "    \"query\" : \"quick brown fox\",\n" +_                    "    \"fields\" : [ \"title^1.0\", \"title.original^1.0\", \"title.shingles^1.0\" ],\n" +_                    "    \"type\" : \"" + type + "\",\n" +_                    "    \"fuzziness\" : 1" +_                    "  }\n" +_                    "}"___            ParsingException e = expectThrows(ParsingException.class, () -> parseQuery(json))__            assertEquals("Fuzziness not allowed for type [" + type +"]", e.getMessage())__        }_    };fuzziness,is,not,allowed,for,phrase,and,and,should,throw,an,error;public,void,test,fuzziness,not,allowed,types,throws,ioexception,string,not,allowed,types,new,string,type,parse,field,get,preferred,name,type,phrase,parse,field,get,preferred,name,type,parse,field,get,preferred,name,for,string,type,not,allowed,types,string,json,n,n,query,quick,brown,fox,n,fields,title,1,0,title,original,1,0,title,shingles,1,0,n,type,type,n,fuzziness,1,n,parsing,exception,e,expect,throws,parsing,exception,class,parse,query,json,assert,equals,fuzziness,not,allowed,for,type,type,e,get,message
MultiMatchQueryBuilderTests -> public void testFuzzinessNotAllowedTypes() throws IOException;1549017700;`fuzziness` is not allowed for `cross_fields`, `phrase` and `phrase_prefix` and should throw an error;public void testFuzzinessNotAllowedTypes() throws IOException {_        String[] notAllowedTypes = new String[]{ Type.CROSS_FIELDS.parseField().getPreferredName(),_            Type.PHRASE.parseField().getPreferredName(), Type.PHRASE_PREFIX.parseField().getPreferredName()}__        for (String type : notAllowedTypes) {_            String json =_                    "{\n" +_                    "  \"multi_match\" : {\n" +_                    "    \"query\" : \"quick brown fox\",\n" +_                    "    \"fields\" : [ \"title^1.0\", \"title.original^1.0\", \"title.shingles^1.0\" ],\n" +_                    "    \"type\" : \"" + type + "\",\n" +_                    "    \"fuzziness\" : 1" +_                    "  }\n" +_                    "}"___            ParsingException e = expectThrows(ParsingException.class, () -> parseQuery(json))__            assertEquals("Fuzziness not allowed for type [" + type +"]", e.getMessage())__        }_    };fuzziness,is,not,allowed,for,phrase,and,and,should,throw,an,error;public,void,test,fuzziness,not,allowed,types,throws,ioexception,string,not,allowed,types,new,string,type,parse,field,get,preferred,name,type,phrase,parse,field,get,preferred,name,type,parse,field,get,preferred,name,for,string,type,not,allowed,types,string,json,n,n,query,quick,brown,fox,n,fields,title,1,0,title,original,1,0,title,shingles,1,0,n,type,type,n,fuzziness,1,n,parsing,exception,e,expect,throws,parsing,exception,class,parse,query,json,assert,equals,fuzziness,not,allowed,for,type,type,e,get,message
