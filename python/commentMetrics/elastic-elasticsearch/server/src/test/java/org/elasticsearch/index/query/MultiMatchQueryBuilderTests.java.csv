commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;79;;@Override protected MultiMatchQueryBuilder doCreateTestQueryBuilder() {     String fieldName = randomFrom(STRING_FIELD_NAME, INT_FIELD_NAME, DOUBLE_FIELD_NAME, BOOLEAN_FIELD_NAME, DATE_FIELD_NAME, MISSING_FIELD_NAME, MISSING_WILDCARD_FIELD_NAME).     final Object value.     if (fieldName.equals(STRING_FIELD_NAME)) {         value = getRandomQueryText().     } else {         value = getRandomValueForFieldName(fieldName).     }     final MultiMatchQueryBuilder query.     if (rarely()) {         query = new MultiMatchQueryBuilder(value, fieldName).         if (randomBoolean()) {             query.lenient(randomBoolean()).         }         // field with random boost         if (randomBoolean()) {             query.field(fieldName, randomFloat() * 10).         }     } else {         query = new MultiMatchQueryBuilder(value).         query.lenient(true).     }     // sets other parameters of the multi match query     if (randomBoolean()) {         if (fieldName.equals(STRING_FIELD_NAME)) {             query.type(randomFrom(MultiMatchQueryBuilder.Type.values())).         } else {             query.type(randomValueOtherThan(MultiMatchQueryBuilder.Type.PHRASE_PREFIX, () -> randomFrom(MultiMatchQueryBuilder.Type.values()))).         }     }     if (randomBoolean()) {         query.operator(randomFrom(Operator.values())).     }     if (randomBoolean() && fieldName.equals(STRING_FIELD_NAME)) {         query.analyzer(randomAnalyzer()).     }     if (randomBoolean()) {         query.slop(randomIntBetween(0, 5)).     }     if (fieldName.equals(STRING_FIELD_NAME) && randomBoolean() && (query.type() == Type.BEST_FIELDS || query.type() == Type.MOST_FIELDS)) {         query.fuzziness(randomFuzziness(fieldName)).     }     if (randomBoolean()) {         query.prefixLength(randomIntBetween(0, 5)).     }     if (randomBoolean()) {         query.maxExpansions(randomIntBetween(1, 5)).     }     if (randomBoolean()) {         query.minimumShouldMatch(randomMinimumShouldMatch()).     }     if (randomBoolean()) {         query.fuzzyRewrite(getRandomRewriteMethod()).     }     if (randomBoolean()) {         query.tieBreaker(randomFloat()).     }     if (randomBoolean()) {         query.cutoffFrequency((float) 10 / randomIntBetween(1, 100)).     }     if (randomBoolean()) {         query.zeroTermsQuery(randomFrom(MatchQuery.ZeroTermsQuery.NONE, MatchQuery.ZeroTermsQuery.ALL)).     }     if (randomBoolean()) {         query.autoGenerateSynonymsPhraseQuery(randomBoolean()).     }     if (randomBoolean()) {         query.fuzzyTranspositions(randomBoolean()).     }     // test with fields with boost and patterns delegated to the tests further below     return query. }
false;protected;0;12;;@Override protected Map<String, MultiMatchQueryBuilder> getAlternateVersions() {     Map<String, MultiMatchQueryBuilder> alternateVersions = new HashMap<>().     String query = "{\n" + "    \"multi_match\": {\n" + "        \"query\": \"foo bar\",\n" + "        \"fields\": \"myField\"\n" + "    }\n" + "}".     alternateVersions.put(query, new MultiMatchQueryBuilder("foo bar", "myField")).     return alternateVersions. }
false;protected;3;10;;@Override protected void doAssertLuceneQuery(MultiMatchQueryBuilder queryBuilder, Query query, SearchContext context) throws IOException {     // we rely on integration tests for deeper checks here     assertThat(query, either(instanceOf(BoostQuery.class)).or(instanceOf(TermQuery.class)).or(instanceOf(BooleanQuery.class)).or(instanceOf(DisjunctionMaxQuery.class)).or(instanceOf(FuzzyQuery.class)).or(instanceOf(MultiPhrasePrefixQuery.class)).or(instanceOf(MatchAllDocsQuery.class)).or(instanceOf(ExtendedCommonTermsQuery.class)).or(instanceOf(MatchNoDocsQuery.class)).or(instanceOf(PhraseQuery.class)).or(instanceOf(PointRangeQuery.class)).or(instanceOf(IndexOrDocValuesQuery.class))). }
false;public;0;6;;public void testIllegaArguments() {     expectThrows(IllegalArgumentException.class, () -> new MultiMatchQueryBuilder(null, "field")).     expectThrows(IllegalArgumentException.class, () -> new MultiMatchQueryBuilder("value", (String[]) null)).     expectThrows(IllegalArgumentException.class, () -> new MultiMatchQueryBuilder("value", new String[] { "" })).     expectThrows(IllegalArgumentException.class, () -> new MultiMatchQueryBuilder("value", "field").type(null)). }
false;public;0;16;;public void testToQueryBoost() throws IOException {     QueryShardContext shardContext = createShardContext().     MultiMatchQueryBuilder multiMatchQueryBuilder = new MultiMatchQueryBuilder("test").     multiMatchQueryBuilder.field(STRING_FIELD_NAME, 5f).     Query query = multiMatchQueryBuilder.toQuery(shardContext).     assertTermOrBoostQuery(query, STRING_FIELD_NAME, "test", 5f).     multiMatchQueryBuilder = new MultiMatchQueryBuilder("test").     multiMatchQueryBuilder.field(STRING_FIELD_NAME, 5f).     multiMatchQueryBuilder.boost(2f).     query = multiMatchQueryBuilder.toQuery(shardContext).     assertThat(query, instanceOf(BoostQuery.class)).     BoostQuery boostQuery = (BoostQuery) query.     assertThat(boostQuery.getBoost(), equalTo(2f)).     assertTermOrBoostQuery(boostQuery.getQuery(), STRING_FIELD_NAME, "test", 5f). }
false;public;0;8;;public void testToQueryMultipleTermsBooleanQuery() throws Exception {     Query query = multiMatchQuery("test1 test2").field(STRING_FIELD_NAME).toQuery(createShardContext()).     assertThat(query, instanceOf(BooleanQuery.class)).     BooleanQuery bQuery = (BooleanQuery) query.     assertThat(bQuery.clauses().size(), equalTo(2)).     assertThat(assertBooleanSubQuery(query, TermQuery.class, 0).getTerm(), equalTo(new Term(STRING_FIELD_NAME, "test1"))).     assertThat(assertBooleanSubQuery(query, TermQuery.class, 1).getTerm(), equalTo(new Term(STRING_FIELD_NAME, "test2"))). }
false;public;0;10;;public void testToQueryMultipleFieldsDisableDismax() throws Exception {     Query query = multiMatchQuery("test").field(STRING_FIELD_NAME).field(STRING_FIELD_NAME_2).tieBreaker(1.0f).toQuery(createShardContext()).     assertThat(query, instanceOf(DisjunctionMaxQuery.class)).     DisjunctionMaxQuery dQuery = (DisjunctionMaxQuery) query.     assertThat(dQuery.getTieBreakerMultiplier(), equalTo(1.0f)).     assertThat(dQuery.getDisjuncts().size(), equalTo(2)).     assertThat(assertDisjunctionSubQuery(query, TermQuery.class, 0).getTerm(), equalTo(new Term(STRING_FIELD_NAME, "test"))).     assertThat(assertDisjunctionSubQuery(query, TermQuery.class, 1).getTerm(), equalTo(new Term(STRING_FIELD_NAME_2, "test"))). }
false;public;0;11;;public void testToQueryMultipleFieldsDisMaxQuery() throws Exception {     Query query = multiMatchQuery("test").field(STRING_FIELD_NAME).field(STRING_FIELD_NAME_2).toQuery(createShardContext()).     assertThat(query, instanceOf(DisjunctionMaxQuery.class)).     DisjunctionMaxQuery disMaxQuery = (DisjunctionMaxQuery) query.     assertThat(disMaxQuery.getTieBreakerMultiplier(), equalTo(0.0f)).     List<Query> disjuncts = disMaxQuery.getDisjuncts().     assertThat(disjuncts.get(0), instanceOf(TermQuery.class)).     assertThat(((TermQuery) disjuncts.get(0)).getTerm(), equalTo(new Term(STRING_FIELD_NAME, "test"))).     assertThat(disjuncts.get(1), instanceOf(TermQuery.class)).     assertThat(((TermQuery) disjuncts.get(1)).getTerm(), equalTo(new Term(STRING_FIELD_NAME_2, "test"))). }
false;public;0;10;;public void testToQueryFieldsWildcard() throws Exception {     Query query = multiMatchQuery("test").field("mapped_str*").tieBreaker(1.0f).toQuery(createShardContext()).     assertThat(query, instanceOf(DisjunctionMaxQuery.class)).     DisjunctionMaxQuery dQuery = (DisjunctionMaxQuery) query.     assertThat(dQuery.getTieBreakerMultiplier(), equalTo(1.0f)).     assertThat(dQuery.getDisjuncts().size(), equalTo(3)).     assertThat(assertDisjunctionSubQuery(query, TermQuery.class, 0).getTerm(), equalTo(new Term(STRING_FIELD_NAME, "test"))).     assertThat(assertDisjunctionSubQuery(query, TermQuery.class, 1).getTerm(), equalTo(new Term(STRING_FIELD_NAME_2, "test"))).     assertThat(assertDisjunctionSubQuery(query, TermQuery.class, 2).getTerm(), equalTo(new Term(STRING_FIELD_NAME, "test"))). }
false;public;0;6;;public void testToQueryFieldMissing() throws Exception {     assertThat(multiMatchQuery("test").field(MISSING_WILDCARD_FIELD_NAME).toQuery(createShardContext()), instanceOf(MatchNoDocsQuery.class)).     assertThat(multiMatchQuery("test").field(MISSING_FIELD_NAME).toQuery(createShardContext()), instanceOf(MatchNoDocsQuery.class)). }
false;public;0;28;;public void testFromJson() throws IOException {     String json = "{\n" + "  \"multi_match\" : {\n" + "    \"query\" : \"quick brown fox\",\n" + "    \"fields\" : [ \"title^1.0\", \"title.original^1.0\", \"title.shingles^1.0\" ],\n" + "    \"type\" : \"most_fields\",\n" + "    \"operator\" : \"OR\",\n" + "    \"slop\" : 0,\n" + "    \"prefix_length\" : 0,\n" + "    \"max_expansions\" : 50,\n" + "    \"lenient\" : false,\n" + "    \"zero_terms_query\" : \"NONE\",\n" + "    \"auto_generate_synonyms_phrase_query\" : true,\n" + "    \"fuzzy_transpositions\" : false,\n" + "    \"boost\" : 1.0\n" + "  }\n" + "}".     MultiMatchQueryBuilder parsed = (MultiMatchQueryBuilder) parseQuery(json).     checkGeneratedJson(json, parsed).     assertEquals(json, "quick brown fox", parsed.value()).     assertEquals(json, 3, parsed.fields().size()).     assertEquals(json, MultiMatchQueryBuilder.Type.MOST_FIELDS, parsed.type()).     assertEquals(json, Operator.OR, parsed.operator()).     assertEquals(json, false, parsed.fuzzyTranspositions()). }
true;public;0;18;/**  * `fuzziness` is not allowed for `cross_fields`, `phrase` and `phrase_prefix` and should throw an error  */ ;/**  * `fuzziness` is not allowed for `cross_fields`, `phrase` and `phrase_prefix` and should throw an error  */ public void testFuzzinessNotAllowedTypes() throws IOException {     String[] notAllowedTypes = new String[] { Type.CROSS_FIELDS.parseField().getPreferredName(), Type.PHRASE.parseField().getPreferredName(), Type.PHRASE_PREFIX.parseField().getPreferredName() }.     for (String type : notAllowedTypes) {         String json = "{\n" + "  \"multi_match\" : {\n" + "    \"query\" : \"quick brown fox\",\n" + "    \"fields\" : [ \"title^1.0\", \"title.original^1.0\", \"title.shingles^1.0\" ],\n" + "    \"type\" : \"" + type + "\",\n" + "    \"fuzziness\" : 1" + "  }\n" + "}".         ParsingException e = expectThrows(ParsingException.class, () -> parseQuery(json)).         assertEquals("Fuzziness not allowed for type [" + type + "]", e.getMessage()).     } }
false;public;0;12;;public void testQueryParameterArrayException() {     String json = "{\n" + "  \"multi_match\" : {\n" + "    \"query\" : [\"quick\", \"brown\", \"fox\"]\n" + "    \"fields\" : [ \"title^1.0\", \"title.original^1.0\", \"title.shingles^1.0\" ]" + "  }\n" + "}".     ParsingException e = expectThrows(ParsingException.class, () -> parseQuery(json)).     assertEquals("[multi_match] unknown token [START_ARRAY] after [query]", e.getMessage()). }
false;public;0;8;;public void testExceptionUsingAnalyzerOnNumericField() {     QueryShardContext shardContext = createShardContext().     MultiMatchQueryBuilder multiMatchQueryBuilder = new MultiMatchQueryBuilder(6.075210893508043E-4).     multiMatchQueryBuilder.field(DOUBLE_FIELD_NAME).     multiMatchQueryBuilder.analyzer("simple").     NumberFormatException e = expectThrows(NumberFormatException.class, () -> multiMatchQueryBuilder.toQuery(shardContext)).     assertEquals("For input string: \"e\"", e.getMessage()). }
false;public;0;17;;public void testFuzzinessOnNonStringField() throws Exception {     MultiMatchQueryBuilder query = new MultiMatchQueryBuilder(42).field(INT_FIELD_NAME).field(BOOLEAN_FIELD_NAME).     query.fuzziness(randomFuzziness(INT_FIELD_NAME)).     QueryShardContext context = createShardContext().     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> query.toQuery(context)).     assertThat(e.getMessage(), containsString("Can only use fuzzy queries on keyword and text fields")).     // triggers a different code path     query.analyzer("keyword").     e = expectThrows(IllegalArgumentException.class, () -> query.toQuery(context)).     assertThat(e.getMessage(), containsString("Can only use fuzzy queries on keyword and text fields")).     query.lenient(true).     // no exception     query.toQuery(context).     query.analyzer(null).     // no exception     query.toQuery(context). }
false;public;0;13;;public void testToFuzzyQuery() throws Exception {     MultiMatchQueryBuilder qb = new MultiMatchQueryBuilder("text").field(STRING_FIELD_NAME).     qb.fuzziness(Fuzziness.TWO).     qb.prefixLength(2).     qb.maxExpansions(5).     qb.fuzzyTranspositions(false).     Query query = qb.toQuery(createShardContext()).     FuzzyQuery expected = new FuzzyQuery(new Term(STRING_FIELD_NAME, "text"), 2, 2, 5, false).     assertEquals(expected, query). }
false;public;0;50;;public void testDefaultField() throws Exception {     QueryShardContext context = createShardContext().     MultiMatchQueryBuilder builder = new MultiMatchQueryBuilder("hello").     // should pass because we set lenient to true when default field is `*`     Query query = builder.toQuery(context).     assertThat(query, instanceOf(DisjunctionMaxQuery.class)).     context.getIndexSettings().updateIndexMetaData(newIndexMeta("index", context.getIndexSettings().getSettings(), Settings.builder().putList("index.query.default_field", STRING_FIELD_NAME, STRING_FIELD_NAME_2 + "^5").build())).     MultiMatchQueryBuilder qb = new MultiMatchQueryBuilder("hello").     query = qb.toQuery(context).     DisjunctionMaxQuery expected = new DisjunctionMaxQuery(Arrays.asList(new TermQuery(new Term(STRING_FIELD_NAME, "hello")), new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2, "hello")), 5.0f)), 0.0f).     assertEquals(expected, query).     context.getIndexSettings().updateIndexMetaData(newIndexMeta("index", context.getIndexSettings().getSettings(), Settings.builder().putList("index.query.default_field", STRING_FIELD_NAME, STRING_FIELD_NAME_2 + "^5", INT_FIELD_NAME).build())).     // should fail because lenient defaults to false     IllegalArgumentException exc = expectThrows(IllegalArgumentException.class, () -> qb.toQuery(context)).     assertThat(exc, instanceOf(NumberFormatException.class)).     assertThat(exc.getMessage(), equalTo("For input string: \"hello\"")).     // explicitly sets lenient     qb.lenient(true).     query = qb.toQuery(context).     expected = new DisjunctionMaxQuery(Arrays.asList(new TermQuery(new Term(STRING_FIELD_NAME, "hello")), new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2, "hello")), 5.0f), new MatchNoDocsQuery("failed [mapped_int] query, caused by number_format_exception:[For input string: \"hello\"]")), 0.0f).     assertEquals(expected, query).     context.getIndexSettings().updateIndexMetaData(newIndexMeta("index", context.getIndexSettings().getSettings(), Settings.builder().putNull("index.query.default_field").build())). }
false;public;0;63;;public void testWithStopWords() throws Exception {     Query query = new MultiMatchQueryBuilder("the quick fox").field(STRING_FIELD_NAME).analyzer("stop").toQuery(createShardContext()).     Query expected = new BooleanQuery.Builder().add(new TermQuery(new Term(STRING_FIELD_NAME, "quick")), BooleanClause.Occur.SHOULD).add(new TermQuery(new Term(STRING_FIELD_NAME, "fox")), BooleanClause.Occur.SHOULD).build().     assertEquals(expected, query).     query = new MultiMatchQueryBuilder("the quick fox").field(STRING_FIELD_NAME).field(STRING_FIELD_NAME_2).analyzer("stop").toQuery(createShardContext()).     expected = new DisjunctionMaxQuery(Arrays.asList(new BooleanQuery.Builder().add(new TermQuery(new Term(STRING_FIELD_NAME, "quick")), BooleanClause.Occur.SHOULD).add(new TermQuery(new Term(STRING_FIELD_NAME, "fox")), BooleanClause.Occur.SHOULD).build(), new BooleanQuery.Builder().add(new TermQuery(new Term(STRING_FIELD_NAME_2, "quick")), BooleanClause.Occur.SHOULD).add(new TermQuery(new Term(STRING_FIELD_NAME_2, "fox")), BooleanClause.Occur.SHOULD).build()), 0f).     assertEquals(expected, query).     query = new MultiMatchQueryBuilder("the").field(STRING_FIELD_NAME).field(STRING_FIELD_NAME_2).analyzer("stop").toQuery(createShardContext()).     expected = new DisjunctionMaxQuery(Arrays.asList(new MatchNoDocsQuery(), new MatchNoDocsQuery()), 0f).     assertEquals(expected, query).     query = new BoolQueryBuilder().should(new MultiMatchQueryBuilder("the").field(STRING_FIELD_NAME).analyzer("stop")).toQuery(createShardContext()).     expected = new BooleanQuery.Builder().add(new MatchNoDocsQuery(), BooleanClause.Occur.SHOULD).build().     assertEquals(expected, query).     query = new BoolQueryBuilder().should(new MultiMatchQueryBuilder("the").field(STRING_FIELD_NAME).field(STRING_FIELD_NAME_2).analyzer("stop")).toQuery(createShardContext()).     expected = new BooleanQuery.Builder().add(new DisjunctionMaxQuery(Arrays.asList(new MatchNoDocsQuery(), new MatchNoDocsQuery()), 0f), BooleanClause.Occur.SHOULD).build().     assertEquals(expected, query). }
false;public;0;8;;public void testNegativeFieldBoost() {     IllegalArgumentException exc = expectThrows(IllegalArgumentException.class, () -> new MultiMatchQueryBuilder("the quick fox").field(STRING_FIELD_NAME, -1.0f).field(STRING_FIELD_NAME_2).toQuery(createShardContext())).     assertThat(exc.getMessage(), containsString("negative [boost]")). }
false;private,static;3;6;;private static IndexMetaData newIndexMeta(String name, Settings oldIndexSettings, Settings indexSettings) {     Settings build = Settings.builder().put(oldIndexSettings).put(indexSettings).build().     return IndexMetaData.builder(name).settings(build).build(). }
