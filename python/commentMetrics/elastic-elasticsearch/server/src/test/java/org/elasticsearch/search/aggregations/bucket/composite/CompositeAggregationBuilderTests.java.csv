commented;modifiers;parameterAmount;loc;comment;code
false;private;0;21;;private DateHistogramValuesSourceBuilder randomDateHistogramSourceBuilder() {     DateHistogramValuesSourceBuilder histo = new DateHistogramValuesSourceBuilder(randomAlphaOfLengthBetween(5, 10)).     if (randomBoolean()) {         histo.field(randomAlphaOfLengthBetween(1, 20)).     } else {         histo.script(new Script(randomAlphaOfLengthBetween(10, 20))).     }     if (randomBoolean()) {         histo.dateHistogramInterval(randomFrom(DateHistogramInterval.days(10), DateHistogramInterval.minutes(1), DateHistogramInterval.weeks(1))).     } else {         histo.interval(randomNonNegativeLong()).     }     if (randomBoolean()) {         histo.timeZone(randomZone()).     }     if (randomBoolean()) {         histo.missingBucket(true).     }     return histo. }
false;private;0;13;;private TermsValuesSourceBuilder randomTermsSourceBuilder() {     TermsValuesSourceBuilder terms = new TermsValuesSourceBuilder(randomAlphaOfLengthBetween(5, 10)).     if (randomBoolean()) {         terms.field(randomAlphaOfLengthBetween(1, 20)).     } else {         terms.script(new Script(randomAlphaOfLengthBetween(10, 20))).     }     terms.order(randomFrom(SortOrder.values())).     if (randomBoolean()) {         terms.missingBucket(true).     }     return terms. }
false;private;0;13;;private HistogramValuesSourceBuilder randomHistogramSourceBuilder() {     HistogramValuesSourceBuilder histo = new HistogramValuesSourceBuilder(randomAlphaOfLengthBetween(5, 10)).     if (randomBoolean()) {         histo.field(randomAlphaOfLengthBetween(1, 20)).     } else {         histo.script(new Script(randomAlphaOfLengthBetween(10, 20))).     }     if (randomBoolean()) {         histo.missingBucket(true).     }     histo.interval(randomDoubleBetween(Math.nextUp(0), Double.MAX_VALUE, false)).     return histo. }
false;protected;0;22;;@Override protected CompositeAggregationBuilder createTestAggregatorBuilder() {     int numSources = randomIntBetween(1, 10).     List<CompositeValuesSourceBuilder<?>> sources = new ArrayList<>().     for (int i = 0. i < numSources. i++) {         int type = randomIntBetween(0, 2).         switch(type) {             case 0:                 sources.add(randomTermsSourceBuilder()).                 break.             case 1:                 sources.add(randomDateHistogramSourceBuilder()).                 break.             case 2:                 sources.add(randomHistogramSourceBuilder()).                 break.             default:                 throw new AssertionError("wrong branch").         }     }     return new CompositeAggregationBuilder(randomAlphaOfLength(10), sources). }
