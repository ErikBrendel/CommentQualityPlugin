commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;11;;@Override protected FieldMaskingSpanQueryBuilder doCreateTestQueryBuilder() {     String fieldName.     if (randomBoolean()) {         fieldName = randomFrom(MAPPED_FIELD_NAMES).     } else {         fieldName = randomAlphaOfLengthBetween(1, 10).     }     SpanTermQueryBuilder innerQuery = new SpanTermQueryBuilderTests().createTestQueryBuilder().     return new FieldMaskingSpanQueryBuilder(innerQuery, fieldName). }
false;protected;3;8;;@Override protected void doAssertLuceneQuery(FieldMaskingSpanQueryBuilder queryBuilder, Query query, SearchContext context) throws IOException {     String fieldInQuery = expectedFieldName(queryBuilder.fieldName()).     assertThat(query, instanceOf(FieldMaskingSpanQuery.class)).     FieldMaskingSpanQuery fieldMaskingSpanQuery = (FieldMaskingSpanQuery) query.     assertThat(fieldMaskingSpanQuery.getField(), equalTo(fieldInQuery)).     assertThat(fieldMaskingSpanQuery.getMaskedQuery(), equalTo(queryBuilder.innerQuery().toQuery(context.getQueryShardContext()))). }
false;public;0;6;;public void testIllegalArguments() {     expectThrows(IllegalArgumentException.class, () -> new FieldMaskingSpanQueryBuilder(null, "maskedField")).     SpanQueryBuilder span = new SpanTermQueryBuilder("name", "value").     expectThrows(IllegalArgumentException.class, () -> new FieldMaskingSpanQueryBuilder(span, null)).     expectThrows(IllegalArgumentException.class, () -> new FieldMaskingSpanQueryBuilder(span, "")). }
false;public;0;22;;public void testFromJson() throws IOException {     String json = "{\n" + "  \"field_masking_span\" : {\n" + "    \"query\" : {\n" + "      \"span_term\" : {\n" + "        \"value\" : {\n" + "          \"value\" : 0.5,\n" + "          \"boost\" : 0.23\n" + "        }\n" + "      }\n" + "    },\n" + "    \"field\" : \"mapped_geo_shape\",\n" + "    \"boost\" : 42.0,\n" + "    \"_name\" : \"KPI\"\n" + "  }\n" + "}".     FieldMaskingSpanQueryBuilder parsed = (FieldMaskingSpanQueryBuilder) parseQuery(json).     checkGeneratedJson(json, parsed).     assertEquals(json, 42.0, parsed.boost(), 0.00001).     assertEquals(json, 0.23, parsed.innerQuery().boost(), 0.00001). }
