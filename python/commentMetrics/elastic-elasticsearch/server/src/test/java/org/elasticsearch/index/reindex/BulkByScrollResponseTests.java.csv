commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;public void testRountTrip() throws IOException {     BulkByScrollResponse response = new BulkByScrollResponse(timeValueMillis(randomNonNegativeLong()), BulkByScrollTaskStatusTests.randomStatus(), randomIndexingFailures(), randomSearchFailures(), randomBoolean()).     BulkByScrollResponse tripped = new BulkByScrollResponse().     try (BytesStreamOutput out = new BytesStreamOutput()) {         response.writeTo(out).         try (StreamInput in = out.bytes().streamInput()) {             tripped.readFrom(in).         }     }     assertResponseEquals(response, tripped). }
false;private;0;5;;private List<Failure> randomIndexingFailures() {     return usually() ? emptyList() : singletonList(new Failure(randomSimpleString(random()), randomSimpleString(random()), randomSimpleString(random()), new IllegalArgumentException("test"))). }
false;private;0;14;;private List<ScrollableHitSource.SearchFailure> randomSearchFailures() {     if (randomBoolean()) {         return emptyList().     }     String index = null.     Integer shardId = null.     String nodeId = null.     if (randomBoolean()) {         index = randomAlphaOfLength(5).         shardId = randomInt().         nodeId = usually() ? randomAlphaOfLength(5) : null.     }     return singletonList(new ScrollableHitSource.SearchFailure(new ElasticsearchException("foo"), index, shardId, nodeId)). }
false;private;2;24;;private void assertResponseEquals(BulkByScrollResponse expected, BulkByScrollResponse actual) {     assertEquals(expected.getTook(), actual.getTook()).     BulkByScrollTaskStatusTests.assertTaskStatusEquals(Version.CURRENT, expected.getStatus(), actual.getStatus()).     assertEquals(expected.getBulkFailures().size(), actual.getBulkFailures().size()).     for (int i = 0. i < expected.getBulkFailures().size(). i++) {         Failure expectedFailure = expected.getBulkFailures().get(i).         Failure actualFailure = actual.getBulkFailures().get(i).         assertEquals(expectedFailure.getIndex(), actualFailure.getIndex()).         assertEquals(expectedFailure.getType(), actualFailure.getType()).         assertEquals(expectedFailure.getId(), actualFailure.getId()).         assertEquals(expectedFailure.getMessage(), actualFailure.getMessage()).         assertEquals(expectedFailure.getStatus(), actualFailure.getStatus()).     }     assertEquals(expected.getSearchFailures().size(), actual.getSearchFailures().size()).     for (int i = 0. i < expected.getSearchFailures().size(). i++) {         ScrollableHitSource.SearchFailure expectedFailure = expected.getSearchFailures().get(i).         ScrollableHitSource.SearchFailure actualFailure = actual.getSearchFailures().get(i).         assertEquals(expectedFailure.getIndex(), actualFailure.getIndex()).         assertEquals(expectedFailure.getShardId(), actualFailure.getShardId()).         assertEquals(expectedFailure.getNodeId(), actualFailure.getNodeId()).         assertEquals(expectedFailure.getReason().getClass(), actualFailure.getReason().getClass()).         assertEquals(expectedFailure.getReason().getMessage(), actualFailure.getReason().getMessage()).     } }
false;public,static;4;25;;public static void assertEqualBulkResponse(BulkByScrollResponse expected, BulkByScrollResponse actual, boolean includeUpdated, boolean includeCreated) {     assertEquals(expected.getTook(), actual.getTook()).     BulkByScrollTaskStatusTests.assertEqualStatus(expected.getStatus(), actual.getStatus(), includeUpdated, includeCreated).     assertEquals(expected.getBulkFailures().size(), actual.getBulkFailures().size()).     for (int i = 0. i < expected.getBulkFailures().size(). i++) {         Failure expectedFailure = expected.getBulkFailures().get(i).         Failure actualFailure = actual.getBulkFailures().get(i).         assertEquals(expectedFailure.getIndex(), actualFailure.getIndex()).         assertEquals(expectedFailure.getType(), actualFailure.getType()).         assertEquals(expectedFailure.getId(), actualFailure.getId()).         assertThat(expectedFailure.getMessage(), containsString(actualFailure.getMessage())).         assertEquals(expectedFailure.getStatus(), actualFailure.getStatus()).     }     assertEquals(expected.getSearchFailures().size(), actual.getSearchFailures().size()).     for (int i = 0. i < expected.getSearchFailures().size(). i++) {         ScrollableHitSource.SearchFailure expectedFailure = expected.getSearchFailures().get(i).         ScrollableHitSource.SearchFailure actualFailure = actual.getSearchFailures().get(i).         assertEquals(expectedFailure.getIndex(), actualFailure.getIndex()).         assertEquals(expectedFailure.getShardId(), actualFailure.getShardId()).         assertEquals(expectedFailure.getNodeId(), actualFailure.getNodeId()).         assertThat(expectedFailure.getReason().getMessage(), containsString(actualFailure.getReason().getMessage())).     } }
false;protected;2;4;;@Override protected void assertEqualInstances(BulkByScrollResponse expected, BulkByScrollResponse actual) {     assertEqualBulkResponse(expected, actual, includeUpdated, includeCreated). }
false;protected;0;9;;@Override protected BulkByScrollResponse createTestInstance() {     // failures are tested separately, so we can test XContent equivalence at least when we have no failures     return new BulkByScrollResponse(timeValueMillis(randomNonNegativeLong()), BulkByScrollTaskStatusTests.randomStatusWithoutException(), emptyList(), emptyList(), randomBoolean()). }
false;protected;1;4;;@Override protected BulkByScrollResponse doParseInstance(XContentParser parser) throws IOException {     return BulkByScrollResponse.fromXContent(parser). }
false;protected;0;4;;@Override protected boolean supportsUnknownFields() {     return true. }
false;protected;0;17;;@Override protected ToXContent.Params getToXContentParams() {     Map<String, String> params = new HashMap<>().     if (randomBoolean()) {         includeUpdated = false.         params.put(Status.INCLUDE_UPDATED, "false").     } else {         includeUpdated = true.     }     if (randomBoolean()) {         includeCreated = false.         params.put(Status.INCLUDE_CREATED, "false").     } else {         includeCreated = true.     }     return new ToXContent.MapParams(params). }
