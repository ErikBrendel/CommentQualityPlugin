commented;modifiers;parameterAmount;loc;comment;code
false;public;0;55;;public void testBasicOperationsCache() throws Exception {     ShardRequestCache requestCacheStats = new ShardRequestCache().     IndicesRequestCache cache = new IndicesRequestCache(Settings.EMPTY).     Directory dir = newDirectory().     IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()).     writer.addDocument(newDoc(0, "foo")).     DirectoryReader reader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer), new ShardId("foo", "bar", 1)).     TermQueryBuilder termQuery = new TermQueryBuilder("id", "0").     BytesReference termBytes = XContentHelper.toXContent(termQuery, XContentType.JSON, false).     AtomicBoolean indexShard = new AtomicBoolean(true).     // initial cache     TestEntity entity = new TestEntity(requestCacheStats, indexShard).     Loader loader = new Loader(reader, 0).     BytesReference value = cache.getOrCompute(entity, loader, reader, termBytes, () -> termQuery.toString()).     assertEquals("foo", value.streamInput().readString()).     assertEquals(0, requestCacheStats.stats().getHitCount()).     assertEquals(1, requestCacheStats.stats().getMissCount()).     assertEquals(0, requestCacheStats.stats().getEvictions()).     assertFalse(loader.loadedFromCache).     assertEquals(1, cache.count()).     // cache hit     entity = new TestEntity(requestCacheStats, indexShard).     loader = new Loader(reader, 0).     value = cache.getOrCompute(entity, loader, reader, termBytes, () -> termQuery.toString()).     assertEquals("foo", value.streamInput().readString()).     assertEquals(1, requestCacheStats.stats().getHitCount()).     assertEquals(1, requestCacheStats.stats().getMissCount()).     assertEquals(0, requestCacheStats.stats().getEvictions()).     assertTrue(loader.loadedFromCache).     assertEquals(1, cache.count()).     assertTrue(requestCacheStats.stats().getMemorySize().bytesAsInt() > value.length()).     assertEquals(1, cache.numRegisteredCloseListeners()).     // Closing the cache doesn't modify an already returned CacheEntity     if (randomBoolean()) {         reader.close().     } else {         // closed shard but reader is still open         indexShard.set(false).         cache.clear(entity).     }     cache.cleanCache().     assertEquals(1, requestCacheStats.stats().getHitCount()).     assertEquals(1, requestCacheStats.stats().getMissCount()).     assertEquals(0, requestCacheStats.stats().getEvictions()).     assertTrue(loader.loadedFromCache).     assertEquals(0, cache.count()).     assertEquals(0, requestCacheStats.stats().getMemorySize().bytesAsInt()).     IOUtils.close(reader, writer, dir, cache).     assertEquals(0, cache.numRegisteredCloseListeners()). }
false;public;0;94;;public void testCacheDifferentReaders() throws Exception {     IndicesRequestCache cache = new IndicesRequestCache(Settings.EMPTY).     AtomicBoolean indexShard = new AtomicBoolean(true).     ShardRequestCache requestCacheStats = new ShardRequestCache().     Directory dir = newDirectory().     IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()).     writer.addDocument(newDoc(0, "foo")).     DirectoryReader reader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer), new ShardId("foo", "bar", 1)).     TermQueryBuilder termQuery = new TermQueryBuilder("id", "0").     BytesReference termBytes = XContentHelper.toXContent(termQuery, XContentType.JSON, false).     if (randomBoolean()) {         writer.flush().         IOUtils.close(writer).         writer = new IndexWriter(dir, newIndexWriterConfig()).     }     writer.updateDocument(new Term("id", "0"), newDoc(0, "bar")).     DirectoryReader secondReader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer), new ShardId("foo", "bar", 1)).     // initial cache     TestEntity entity = new TestEntity(requestCacheStats, indexShard).     Loader loader = new Loader(reader, 0).     BytesReference value = cache.getOrCompute(entity, loader, reader, termBytes, () -> termQuery.toString()).     assertEquals("foo", value.streamInput().readString()).     assertEquals(0, requestCacheStats.stats().getHitCount()).     assertEquals(1, requestCacheStats.stats().getMissCount()).     assertEquals(0, requestCacheStats.stats().getEvictions()).     assertFalse(loader.loadedFromCache).     assertEquals(1, cache.count()).     assertTrue(requestCacheStats.stats().getMemorySize().bytesAsInt() > value.length()).     final int cacheSize = requestCacheStats.stats().getMemorySize().bytesAsInt().     assertEquals(1, cache.numRegisteredCloseListeners()).     // cache the second     TestEntity secondEntity = new TestEntity(requestCacheStats, indexShard).     loader = new Loader(secondReader, 0).     value = cache.getOrCompute(entity, loader, secondReader, termBytes, () -> termQuery.toString()).     assertEquals("bar", value.streamInput().readString()).     assertEquals(0, requestCacheStats.stats().getHitCount()).     assertEquals(2, requestCacheStats.stats().getMissCount()).     assertEquals(0, requestCacheStats.stats().getEvictions()).     assertFalse(loader.loadedFromCache).     assertEquals(2, cache.count()).     assertTrue(requestCacheStats.stats().getMemorySize().bytesAsInt() > cacheSize + value.length()).     assertEquals(2, cache.numRegisteredCloseListeners()).     secondEntity = new TestEntity(requestCacheStats, indexShard).     loader = new Loader(secondReader, 0).     value = cache.getOrCompute(secondEntity, loader, secondReader, termBytes, () -> termQuery.toString()).     assertEquals("bar", value.streamInput().readString()).     assertEquals(1, requestCacheStats.stats().getHitCount()).     assertEquals(2, requestCacheStats.stats().getMissCount()).     assertEquals(0, requestCacheStats.stats().getEvictions()).     assertTrue(loader.loadedFromCache).     assertEquals(2, cache.count()).     entity = new TestEntity(requestCacheStats, indexShard).     loader = new Loader(reader, 0).     value = cache.getOrCompute(entity, loader, reader, termBytes, () -> termQuery.toString()).     assertEquals("foo", value.streamInput().readString()).     assertEquals(2, requestCacheStats.stats().getHitCount()).     assertEquals(2, requestCacheStats.stats().getMissCount()).     assertEquals(0, requestCacheStats.stats().getEvictions()).     assertTrue(loader.loadedFromCache).     assertEquals(2, cache.count()).     // Closing the cache doesn't change returned entities     reader.close().     cache.cleanCache().     assertEquals(2, requestCacheStats.stats().getMissCount()).     assertEquals(0, requestCacheStats.stats().getEvictions()).     assertTrue(loader.loadedFromCache).     assertEquals(1, cache.count()).     assertEquals(cacheSize, requestCacheStats.stats().getMemorySize().bytesAsInt()).     assertEquals(1, cache.numRegisteredCloseListeners()).     // release     if (randomBoolean()) {         secondReader.close().     } else {         // closed shard but reader is still open         indexShard.set(false).         cache.clear(secondEntity).     }     cache.cleanCache().     assertEquals(2, requestCacheStats.stats().getMissCount()).     assertEquals(0, requestCacheStats.stats().getEvictions()).     assertTrue(loader.loadedFromCache).     assertEquals(0, cache.count()).     assertEquals(0, requestCacheStats.stats().getMemorySize().bytesAsInt()).     IOUtils.close(secondReader, writer, dir, cache).     assertEquals(0, cache.numRegisteredCloseListeners()). }
false;public;0;69;;public void testEviction() throws Exception {     final ByteSizeValue size.     {         IndicesRequestCache cache = new IndicesRequestCache(Settings.EMPTY).         AtomicBoolean indexShard = new AtomicBoolean(true).         ShardRequestCache requestCacheStats = new ShardRequestCache().         Directory dir = newDirectory().         IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()).         writer.addDocument(newDoc(0, "foo")).         DirectoryReader reader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer), new ShardId("foo", "bar", 1)).         TermQueryBuilder termQuery = new TermQueryBuilder("id", "0").         BytesReference termBytes = XContentHelper.toXContent(termQuery, XContentType.JSON, false).         TestEntity entity = new TestEntity(requestCacheStats, indexShard).         Loader loader = new Loader(reader, 0).         writer.updateDocument(new Term("id", "0"), newDoc(0, "bar")).         DirectoryReader secondReader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer), new ShardId("foo", "bar", 1)).         TestEntity secondEntity = new TestEntity(requestCacheStats, indexShard).         Loader secondLoader = new Loader(secondReader, 0).         BytesReference value1 = cache.getOrCompute(entity, loader, reader, termBytes, () -> termQuery.toString()).         assertEquals("foo", value1.streamInput().readString()).         BytesReference value2 = cache.getOrCompute(secondEntity, secondLoader, secondReader, termBytes, () -> termQuery.toString()).         assertEquals("bar", value2.streamInput().readString()).         size = requestCacheStats.stats().getMemorySize().         IOUtils.close(reader, secondReader, writer, dir, cache).     }     IndicesRequestCache cache = new IndicesRequestCache(Settings.builder().put(IndicesRequestCache.INDICES_CACHE_QUERY_SIZE.getKey(), size.getBytes() + 1 + "b").build()).     AtomicBoolean indexShard = new AtomicBoolean(true).     ShardRequestCache requestCacheStats = new ShardRequestCache().     Directory dir = newDirectory().     IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()).     writer.addDocument(newDoc(0, "foo")).     DirectoryReader reader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer), new ShardId("foo", "bar", 1)).     TermQueryBuilder termQuery = new TermQueryBuilder("id", "0").     BytesReference termBytes = XContentHelper.toXContent(termQuery, XContentType.JSON, false).     TestEntity entity = new TestEntity(requestCacheStats, indexShard).     Loader loader = new Loader(reader, 0).     writer.updateDocument(new Term("id", "0"), newDoc(0, "bar")).     DirectoryReader secondReader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer), new ShardId("foo", "bar", 1)).     TestEntity secondEntity = new TestEntity(requestCacheStats, indexShard).     Loader secondLoader = new Loader(secondReader, 0).     writer.updateDocument(new Term("id", "0"), newDoc(0, "baz")).     DirectoryReader thirdReader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer), new ShardId("foo", "bar", 1)).     TestEntity thirddEntity = new TestEntity(requestCacheStats, indexShard).     Loader thirdLoader = new Loader(thirdReader, 0).     BytesReference value1 = cache.getOrCompute(entity, loader, reader, termBytes, () -> termQuery.toString()).     assertEquals("foo", value1.streamInput().readString()).     BytesReference value2 = cache.getOrCompute(secondEntity, secondLoader, secondReader, termBytes, () -> termQuery.toString()).     assertEquals("bar", value2.streamInput().readString()).     logger.info("Memory size: {}", requestCacheStats.stats().getMemorySize()).     BytesReference value3 = cache.getOrCompute(thirddEntity, thirdLoader, thirdReader, termBytes, () -> termQuery.toString()).     assertEquals("baz", value3.streamInput().readString()).     assertEquals(2, cache.count()).     assertEquals(1, requestCacheStats.stats().getEvictions()).     IOUtils.close(reader, secondReader, thirdReader, writer, dir, cache). }
false;public;0;51;;public void testClearAllEntityIdentity() throws Exception {     IndicesRequestCache cache = new IndicesRequestCache(Settings.EMPTY).     AtomicBoolean indexShard = new AtomicBoolean(true).     ShardRequestCache requestCacheStats = new ShardRequestCache().     Directory dir = newDirectory().     IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()).     writer.addDocument(newDoc(0, "foo")).     DirectoryReader reader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer), new ShardId("foo", "bar", 1)).     TermQueryBuilder termQuery = new TermQueryBuilder("id", "0").     BytesReference termBytes = XContentHelper.toXContent(termQuery, XContentType.JSON, false).     TestEntity entity = new TestEntity(requestCacheStats, indexShard).     Loader loader = new Loader(reader, 0).     writer.updateDocument(new Term("id", "0"), newDoc(0, "bar")).     DirectoryReader secondReader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer), new ShardId("foo", "bar", 1)).     TestEntity secondEntity = new TestEntity(requestCacheStats, indexShard).     Loader secondLoader = new Loader(secondReader, 0).     writer.updateDocument(new Term("id", "0"), newDoc(0, "baz")).     DirectoryReader thirdReader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer), new ShardId("foo", "bar", 1)).     AtomicBoolean differentIdentity = new AtomicBoolean(true).     TestEntity thirddEntity = new TestEntity(requestCacheStats, differentIdentity).     Loader thirdLoader = new Loader(thirdReader, 0).     BytesReference value1 = cache.getOrCompute(entity, loader, reader, termBytes, () -> termQuery.toString()).     assertEquals("foo", value1.streamInput().readString()).     BytesReference value2 = cache.getOrCompute(secondEntity, secondLoader, secondReader, termBytes, () -> termQuery.toString()).     assertEquals("bar", value2.streamInput().readString()).     logger.info("Memory size: {}", requestCacheStats.stats().getMemorySize()).     BytesReference value3 = cache.getOrCompute(thirddEntity, thirdLoader, thirdReader, termBytes, () -> termQuery.toString()).     assertEquals("baz", value3.streamInput().readString()).     assertEquals(3, cache.count()).     final long hitCount = requestCacheStats.stats().getHitCount().     // clear all for the indexShard Idendity even though is't still open     cache.clear(randomFrom(entity, secondEntity)).     cache.cleanCache().     assertEquals(1, cache.count()).     // third has not been validated since it's a different identity     value3 = cache.getOrCompute(thirddEntity, thirdLoader, thirdReader, termBytes, () -> termQuery.toString()).     assertEquals(hitCount + 1, requestCacheStats.stats().getHitCount()).     assertEquals("baz", value3.streamInput().readString()).     IOUtils.close(reader, secondReader, thirdReader, writer, dir, cache). }
false;public;2;4;;public Iterable<Field> newDoc(int id, String value) {     return Arrays.asList(newField("id", Integer.toString(id), StringField.TYPE_STORED), newField("value", value, StringField.TYPE_STORED)). }
false;public;0;14;;@Override public BytesReference get() {     try (BytesStreamOutput out = new BytesStreamOutput()) {         IndexSearcher searcher = new IndexSearcher(reader).         TopDocs topDocs = searcher.search(new TermQuery(new Term("id", Integer.toString(id))), 1).         assertEquals(1, topDocs.totalHits.value).         Document document = reader.document(topDocs.scoreDocs[0].doc).         out.writeString(document.get("value")).         loadedFromCache = false.         return out.bytes().     } catch (IOException e) {         throw new RuntimeException(e).     } }
false;public;0;68;;public void testInvalidate() throws Exception {     ShardRequestCache requestCacheStats = new ShardRequestCache().     IndicesRequestCache cache = new IndicesRequestCache(Settings.EMPTY).     Directory dir = newDirectory().     IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()).     writer.addDocument(newDoc(0, "foo")).     DirectoryReader reader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer), new ShardId("foo", "bar", 1)).     TermQueryBuilder termQuery = new TermQueryBuilder("id", "0").     BytesReference termBytes = XContentHelper.toXContent(termQuery, XContentType.JSON, false).     AtomicBoolean indexShard = new AtomicBoolean(true).     // initial cache     TestEntity entity = new TestEntity(requestCacheStats, indexShard).     Loader loader = new Loader(reader, 0).     BytesReference value = cache.getOrCompute(entity, loader, reader, termBytes, () -> termQuery.toString()).     assertEquals("foo", value.streamInput().readString()).     assertEquals(0, requestCacheStats.stats().getHitCount()).     assertEquals(1, requestCacheStats.stats().getMissCount()).     assertEquals(0, requestCacheStats.stats().getEvictions()).     assertFalse(loader.loadedFromCache).     assertEquals(1, cache.count()).     // cache hit     entity = new TestEntity(requestCacheStats, indexShard).     loader = new Loader(reader, 0).     value = cache.getOrCompute(entity, loader, reader, termBytes, () -> termQuery.toString()).     assertEquals("foo", value.streamInput().readString()).     assertEquals(1, requestCacheStats.stats().getHitCount()).     assertEquals(1, requestCacheStats.stats().getMissCount()).     assertEquals(0, requestCacheStats.stats().getEvictions()).     assertTrue(loader.loadedFromCache).     assertEquals(1, cache.count()).     assertTrue(requestCacheStats.stats().getMemorySize().bytesAsInt() > value.length()).     assertEquals(1, cache.numRegisteredCloseListeners()).     // load again after invalidate     entity = new TestEntity(requestCacheStats, indexShard).     loader = new Loader(reader, 0).     cache.invalidate(entity, reader, termBytes).     value = cache.getOrCompute(entity, loader, reader, termBytes, () -> termQuery.toString()).     assertEquals("foo", value.streamInput().readString()).     assertEquals(1, requestCacheStats.stats().getHitCount()).     assertEquals(2, requestCacheStats.stats().getMissCount()).     assertEquals(0, requestCacheStats.stats().getEvictions()).     assertFalse(loader.loadedFromCache).     assertEquals(1, cache.count()).     assertTrue(requestCacheStats.stats().getMemorySize().bytesAsInt() > value.length()).     assertEquals(1, cache.numRegisteredCloseListeners()).     // release     if (randomBoolean()) {         reader.close().     } else {         // closed shard but reader is still open         indexShard.set(false).         cache.clear(entity).     }     cache.cleanCache().     assertEquals(1, requestCacheStats.stats().getHitCount()).     assertEquals(2, requestCacheStats.stats().getMissCount()).     assertEquals(0, requestCacheStats.stats().getEvictions()).     assertEquals(0, cache.count()).     assertEquals(0, requestCacheStats.stats().getMemorySize().bytesAsInt()).     IOUtils.close(reader, writer, dir, cache).     assertEquals(0, cache.numRegisteredCloseListeners()). }
false;public;0;26;;public void testEqualsKey() throws IOException {     AtomicBoolean trueBoolean = new AtomicBoolean(true).     AtomicBoolean falseBoolean = new AtomicBoolean(false).     Directory dir = newDirectory().     IndexWriterConfig config = newIndexWriterConfig().     IndexWriter writer = new IndexWriter(dir, config).     IndexReader reader1 = DirectoryReader.open(writer).     IndexReader.CacheKey rKey1 = reader1.getReaderCacheHelper().getKey().     writer.addDocument(new Document()).     IndexReader reader2 = DirectoryReader.open(writer).     IndexReader.CacheKey rKey2 = reader2.getReaderCacheHelper().getKey().     IOUtils.close(reader1, reader2, writer, dir).     IndicesRequestCache.Key key1 = new IndicesRequestCache.Key(new TestEntity(null, trueBoolean), rKey1, new TestBytesReference(1)).     IndicesRequestCache.Key key2 = new IndicesRequestCache.Key(new TestEntity(null, trueBoolean), rKey1, new TestBytesReference(1)).     IndicesRequestCache.Key key3 = new IndicesRequestCache.Key(new TestEntity(null, falseBoolean), rKey1, new TestBytesReference(1)).     IndicesRequestCache.Key key4 = new IndicesRequestCache.Key(new TestEntity(null, trueBoolean), rKey2, new TestBytesReference(1)).     IndicesRequestCache.Key key5 = new IndicesRequestCache.Key(new TestEntity(null, trueBoolean), rKey1, new TestBytesReference(2)).     String s = "Some other random object".     assertEquals(key1, key1).     assertEquals(key1, key2).     assertNotEquals(key1, null).     assertNotEquals(key1, s).     assertNotEquals(key1, key3).     assertNotEquals(key1, key4).     assertNotEquals(key1, key5). }
false;public;1;4;;@Override public boolean equals(Object other) {     return other instanceof TestBytesReference && this.dummyValue == ((TestBytesReference) other).dummyValue. }
false;public;0;6;;@Override public int hashCode() {     int result = super.hashCode().     result = 31 * result + dummyValue.     return result. }
false;public;1;4;;@Override public byte get(int index) {     return 0. }
false;public;0;4;;@Override public int length() {     return 0. }
false;public;2;4;;@Override public BytesReference slice(int from, int length) {     return null. }
false;public;0;4;;@Override public BytesRef toBytesRef() {     return null. }
false;public;0;4;;@Override public long ramBytesUsed() {     return 0. }
false;public;0;4;;@Override public boolean isFragment() {     return false. }
false;protected;0;4;;@Override protected ShardRequestCache stats() {     return shardRequestCache. }
false;public;0;4;;@Override public boolean isOpen() {     return standInForIndexShard.get(). }
false;public;0;4;;@Override public Object getCacheIdentity() {     return standInForIndexShard. }
false;public;0;4;;@Override public long ramBytesUsed() {     return 42. }
