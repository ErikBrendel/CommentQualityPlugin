commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;9;;@Override protected InternalDerivative createTestInstance(String name, List<PipelineAggregator> pipelineAggregators, Map<String, Object> metaData) {     DocValueFormat formatter = randomNumericDocValueFormat().     double value = frequently() ? randomDoubleBetween(-100000, 100000, true) : randomFrom(new Double[] { Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, Double.NaN }).     double normalizationFactor = frequently() ? randomDoubleBetween(0, 100000, true) : 0.     return new InternalDerivative(name, value, normalizationFactor, formatter, pipelineAggregators, metaData). }
false;public;0;5;;@Override public void testReduceRandom() {     expectThrows(UnsupportedOperationException.class, () -> createTestInstance("name", Collections.emptyList(), null).reduce(null, null)). }
false;protected;2;4;;@Override protected void assertReduced(InternalDerivative reduced, List<InternalDerivative> inputs) { // no test since reduce operation is unsupported }
false;protected;0;4;;@Override protected Reader<InternalDerivative> instanceReader() {     return InternalDerivative::new. }
false;protected;2;12;;@Override protected void assertFromXContent(InternalDerivative derivative, ParsedAggregation parsedAggregation) {     ParsedDerivative parsed = ((ParsedDerivative) parsedAggregation).     if (Double.isInfinite(derivative.getValue()) == false && Double.isNaN(derivative.getValue()) == false) {         assertEquals(derivative.getValue(), parsed.value(), Double.MIN_VALUE).         assertEquals(derivative.getValueAsString(), parsed.getValueAsString()).     } else {         // we write Double.NEGATIVE_INFINITY, Double.POSITIVE amd Double.NAN to xContent as 'null', so we         // cannot differentiate between them. Also we cannot recreate the exact String representation         assertEquals(parsed.value(), Double.NaN, Double.MIN_VALUE).     } }
false;protected;1;35;;@Override protected InternalDerivative mutateInstance(InternalDerivative instance) {     String name = instance.getName().     double value = instance.getValue().     double normalizationFactor = instance.getNormalizationFactor().     DocValueFormat formatter = instance.formatter().     List<PipelineAggregator> pipelineAggregators = instance.pipelineAggregators().     Map<String, Object> metaData = instance.getMetaData().     switch(between(0, 2)) {         case 0:             name += randomAlphaOfLength(5).             break.         case 1:             if (Double.isFinite(value)) {                 value += between(1, 100).             } else {                 value = randomDoubleBetween(0, 100000, true).             }             break.         case 2:             normalizationFactor += between(1, 100).             break.         case 3:             if (metaData == null) {                 metaData = new HashMap<>(1).             } else {                 metaData = new HashMap<>(instance.getMetaData()).             }             metaData.put(randomAlphaOfLength(15), randomInt()).             break.         default:             throw new AssertionError("Illegal randomisation branch").     }     return new InternalDerivative(name, value, normalizationFactor, formatter, pipelineAggregators, metaData). }
