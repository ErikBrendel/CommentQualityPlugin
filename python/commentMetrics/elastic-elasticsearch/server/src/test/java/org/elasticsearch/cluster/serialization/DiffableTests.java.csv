commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean diffableValues() {     return true. }
false;protected;2;4;;@Override protected TestDiffable createValue(Integer key, boolean before) {     return new TestDiffable(String.valueOf(before ? key : key + 1)). }
false;protected;2;4;;@Override protected MapDiff diff(Map<Integer, TestDiffable> before, Map<Integer, TestDiffable> after) {     return DiffableUtils.diff(before, after, keySerializer). }
false;protected;1;6;;@Override protected MapDiff readDiff(StreamInput in) throws IOException {     return useProtoForDiffableSerialization ? DiffableUtils.readJdkMapDiff(in, keySerializer, TestDiffable::readFrom, TestDiffable::readDiffFrom) : DiffableUtils.readJdkMapDiff(in, keySerializer, diffableValueSerializer()). }
false;protected;0;4;;@Override protected boolean diffableValues() {     return false. }
false;protected;2;4;;@Override protected String createValue(Integer key, boolean before) {     return String.valueOf(before ? key : key + 1). }
false;protected;2;4;;@Override protected MapDiff diff(Map<Integer, String> before, Map<Integer, String> after) {     return DiffableUtils.diff(before, after, keySerializer, nonDiffableValueSerializer()). }
false;protected;1;4;;@Override protected MapDiff readDiff(StreamInput in) throws IOException {     return DiffableUtils.readJdkMapDiff(in, keySerializer, nonDiffableValueSerializer()). }
false;public;0;47;;public void testJKDMapDiff() throws IOException {     new JdkMapDriver<TestDiffable>() {          @Override         protected boolean diffableValues() {             return true.         }          @Override         protected TestDiffable createValue(Integer key, boolean before) {             return new TestDiffable(String.valueOf(before ? key : key + 1)).         }          @Override         protected MapDiff diff(Map<Integer, TestDiffable> before, Map<Integer, TestDiffable> after) {             return DiffableUtils.diff(before, after, keySerializer).         }          @Override         protected MapDiff readDiff(StreamInput in) throws IOException {             return useProtoForDiffableSerialization ? DiffableUtils.readJdkMapDiff(in, keySerializer, TestDiffable::readFrom, TestDiffable::readDiffFrom) : DiffableUtils.readJdkMapDiff(in, keySerializer, diffableValueSerializer()).         }     }.execute().     new JdkMapDriver<String>() {          @Override         protected boolean diffableValues() {             return false.         }          @Override         protected String createValue(Integer key, boolean before) {             return String.valueOf(before ? key : key + 1).         }          @Override         protected MapDiff diff(Map<Integer, String> before, Map<Integer, String> after) {             return DiffableUtils.diff(before, after, keySerializer, nonDiffableValueSerializer()).         }          @Override         protected MapDiff readDiff(StreamInput in) throws IOException {             return DiffableUtils.readJdkMapDiff(in, keySerializer, nonDiffableValueSerializer()).         }     }.execute(). }
false;protected;0;4;;@Override protected boolean diffableValues() {     return true. }
false;protected;2;4;;@Override protected TestDiffable createValue(Integer key, boolean before) {     return new TestDiffable(String.valueOf(before ? key : key + 1)). }
false;protected;2;4;;@Override protected MapDiff diff(ImmutableOpenMap<Integer, TestDiffable> before, ImmutableOpenMap<Integer, TestDiffable> after) {     return DiffableUtils.diff(before, after, keySerializer). }
false;protected;1;6;;@Override protected MapDiff readDiff(StreamInput in) throws IOException {     return useProtoForDiffableSerialization ? DiffableUtils.readImmutableOpenMapDiff(in, keySerializer, TestDiffable::readFrom, TestDiffable::readDiffFrom) : DiffableUtils.readImmutableOpenMapDiff(in, keySerializer, diffableValueSerializer()). }
false;protected;0;4;;@Override protected boolean diffableValues() {     return false. }
false;protected;2;4;;@Override protected String createValue(Integer key, boolean before) {     return String.valueOf(before ? key : key + 1). }
false;protected;2;4;;@Override protected MapDiff diff(ImmutableOpenMap<Integer, String> before, ImmutableOpenMap<Integer, String> after) {     return DiffableUtils.diff(before, after, keySerializer, nonDiffableValueSerializer()). }
false;protected;1;4;;@Override protected MapDiff readDiff(StreamInput in) throws IOException {     return DiffableUtils.readImmutableOpenMapDiff(in, keySerializer, nonDiffableValueSerializer()). }
false;public;0;47;;public void testImmutableOpenMapDiff() throws IOException {     new ImmutableOpenMapDriver<TestDiffable>() {          @Override         protected boolean diffableValues() {             return true.         }          @Override         protected TestDiffable createValue(Integer key, boolean before) {             return new TestDiffable(String.valueOf(before ? key : key + 1)).         }          @Override         protected MapDiff diff(ImmutableOpenMap<Integer, TestDiffable> before, ImmutableOpenMap<Integer, TestDiffable> after) {             return DiffableUtils.diff(before, after, keySerializer).         }          @Override         protected MapDiff readDiff(StreamInput in) throws IOException {             return useProtoForDiffableSerialization ? DiffableUtils.readImmutableOpenMapDiff(in, keySerializer, TestDiffable::readFrom, TestDiffable::readDiffFrom) : DiffableUtils.readImmutableOpenMapDiff(in, keySerializer, diffableValueSerializer()).         }     }.execute().     new ImmutableOpenMapDriver<String>() {          @Override         protected boolean diffableValues() {             return false.         }          @Override         protected String createValue(Integer key, boolean before) {             return String.valueOf(before ? key : key + 1).         }          @Override         protected MapDiff diff(ImmutableOpenMap<Integer, String> before, ImmutableOpenMap<Integer, String> after) {             return DiffableUtils.diff(before, after, keySerializer, nonDiffableValueSerializer()).         }          @Override         protected MapDiff readDiff(StreamInput in) throws IOException {             return DiffableUtils.readImmutableOpenMapDiff(in, keySerializer, nonDiffableValueSerializer()).         }     }.execute(). }
false;protected;0;4;;@Override protected boolean diffableValues() {     return true. }
false;protected;2;4;;@Override protected TestDiffable createValue(Integer key, boolean before) {     return new TestDiffable(String.valueOf(before ? key : key + 1)). }
false;protected;2;4;;@Override protected MapDiff diff(ImmutableOpenIntMap<TestDiffable> before, ImmutableOpenIntMap<TestDiffable> after) {     return DiffableUtils.diff(before, after, keySerializer). }
false;protected;1;6;;@Override protected MapDiff readDiff(StreamInput in) throws IOException {     return useProtoForDiffableSerialization ? DiffableUtils.readImmutableOpenIntMapDiff(in, keySerializer, TestDiffable::readFrom, TestDiffable::readDiffFrom) : DiffableUtils.readImmutableOpenIntMapDiff(in, keySerializer, diffableValueSerializer()). }
false;protected;0;4;;@Override protected boolean diffableValues() {     return false. }
false;protected;2;4;;@Override protected String createValue(Integer key, boolean before) {     return String.valueOf(before ? key : key + 1). }
false;protected;2;4;;@Override protected MapDiff diff(ImmutableOpenIntMap<String> before, ImmutableOpenIntMap<String> after) {     return DiffableUtils.diff(before, after, keySerializer, nonDiffableValueSerializer()). }
false;protected;1;4;;@Override protected MapDiff readDiff(StreamInput in) throws IOException {     return DiffableUtils.readImmutableOpenIntMapDiff(in, keySerializer, nonDiffableValueSerializer()). }
false;public;0;47;;public void testImmutableOpenIntMapDiff() throws IOException {     new ImmutableOpenIntMapDriver<TestDiffable>() {          @Override         protected boolean diffableValues() {             return true.         }          @Override         protected TestDiffable createValue(Integer key, boolean before) {             return new TestDiffable(String.valueOf(before ? key : key + 1)).         }          @Override         protected MapDiff diff(ImmutableOpenIntMap<TestDiffable> before, ImmutableOpenIntMap<TestDiffable> after) {             return DiffableUtils.diff(before, after, keySerializer).         }          @Override         protected MapDiff readDiff(StreamInput in) throws IOException {             return useProtoForDiffableSerialization ? DiffableUtils.readImmutableOpenIntMapDiff(in, keySerializer, TestDiffable::readFrom, TestDiffable::readDiffFrom) : DiffableUtils.readImmutableOpenIntMapDiff(in, keySerializer, diffableValueSerializer()).         }     }.execute().     new ImmutableOpenIntMapDriver<String>() {          @Override         protected boolean diffableValues() {             return false.         }          @Override         protected String createValue(Integer key, boolean before) {             return String.valueOf(before ? key : key + 1).         }          @Override         protected MapDiff diff(ImmutableOpenIntMap<String> before, ImmutableOpenIntMap<String> after) {             return DiffableUtils.diff(before, after, keySerializer, nonDiffableValueSerializer()).         }          @Override         protected MapDiff readDiff(StreamInput in) throws IOException {             return DiffableUtils.readImmutableOpenIntMapDiff(in, keySerializer, nonDiffableValueSerializer()).         }     }.execute(). }
false;private;0;9;;private Set<Integer> randomPositiveIntSet() {     int maxSetSize = randomInt(6).     Set<Integer> result = new HashSet<>().     for (int i = 0. i < maxSetSize. i++) {         // due to duplicates, set size can be smaller than maxSetSize         result.add(randomIntBetween(0, 100)).     }     return result. }
true;protected,abstract;0;1;/**  * whether we operate on {@link org.elasticsearch.cluster.Diffable} values  */ ;/**  * whether we operate on {@link org.elasticsearch.cluster.Diffable} values  */ protected abstract boolean diffableValues().
true;protected,abstract;2;1;/**  * functions that determines value in "before" or "after" map based on key  */ ;/**  * functions that determines value in "before" or "after" map based on key  */ protected abstract V createValue(Integer key, boolean before).
true;protected,abstract;1;1;/**  * creates map based on JDK-based map  */ ;/**  * creates map based on JDK-based map  */ protected abstract T createMap(Map<Integer, V> values).
true;protected,abstract;2;1;/**  * calculates diff between two maps  */ ;/**  * calculates diff between two maps  */ protected abstract MapDiff<Integer, V, T> diff(T before, T after).
true;protected,abstract;1;1;/**  * reads diff of maps from stream  */ ;/**  * reads diff of maps from stream  */ protected abstract MapDiff<Integer, V, T> readDiff(StreamInput in) throws IOException.
true;protected,abstract;2;1;/**  * gets element at key "key" in map "map"  */ ;/**  * gets element at key "key" in map "map"  */ protected abstract V get(T map, Integer key).
true;protected,abstract;1;1;/**  * returns size of given map  */ ;/**  * returns size of given map  */ protected abstract int size(T map).
true;public;0;75;/**  * executes the actual test  */ ;/**  * executes the actual test  */ public void execute() throws IOException {     logger.debug("Keys in 'before' map: {}", keys).     logger.debug("Keys to remove: {}", keysToRemove).     logger.debug("Keys to override: {}", keysToOverride).     logger.debug("Keys to add: {}", keysToAdd).     logger.debug("--> creating 'before' map").     Map<Integer, V> before = new HashMap<>().     for (Integer key : keys) {         before.put(key, createValue(key, true)).     }     T beforeMap = createMap(before).     logger.debug("--> creating 'after' map").     Map<Integer, V> after = new HashMap<>().     after.putAll(before).     for (Integer key : keysToRemove) {         after.remove(key).     }     for (Integer key : keysToOverride) {         after.put(key, createValue(key, false)).     }     for (Integer key : keysToAdd) {         after.put(key, createValue(key, false)).     }     T afterMap = createMap(unmodifiableMap(after)).     MapDiff<Integer, V, T> diffMap = diff(beforeMap, afterMap).     // check properties of diffMap     assertThat(new HashSet(diffMap.getDeletes()), equalTo(keysToRemove)).     if (diffableValues()) {         assertThat(diffMap.getDiffs().keySet(), equalTo(keysToOverride)).         for (Integer key : keysToOverride) {             assertThat(diffMap.getDiffs().get(key).apply(get(beforeMap, key)), equalTo(get(afterMap, key))).         }         assertThat(diffMap.getUpserts().keySet(), equalTo(keysToAdd)).         for (Integer key : keysToAdd) {             assertThat(diffMap.getUpserts().get(key), equalTo(get(afterMap, key))).         }     } else {         assertThat(diffMap.getDiffs(), equalTo(emptyMap())).         Set<Integer> keysToAddAndOverride = Sets.union(keysToAdd, keysToOverride).         assertThat(diffMap.getUpserts().keySet(), equalTo(keysToAddAndOverride)).         for (Integer key : keysToAddAndOverride) {             assertThat(diffMap.getUpserts().get(key), equalTo(get(afterMap, key))).         }     }     if (randomBoolean()) {         logger.debug("--> serializing diff").         BytesStreamOutput out = new BytesStreamOutput().         diffMap.writeTo(out).         StreamInput in = out.bytes().streamInput().         logger.debug("--> reading diff back").         diffMap = readDiff(in).     }     T appliedDiffMap = diffMap.apply(beforeMap).     // check properties of appliedDiffMap     assertThat(size(appliedDiffMap), equalTo(keys.size() - keysToRemove.size() + keysToAdd.size())).     for (Integer key : keysToRemove) {         assertThat(get(appliedDiffMap, key), nullValue()).     }     for (Integer key : keysUnchanged) {         assertThat(get(appliedDiffMap, key), equalTo(get(beforeMap, key))).     }     for (Integer key : keysToOverride) {         assertThat(get(appliedDiffMap, key), not(equalTo(get(beforeMap, key)))).         assertThat(get(appliedDiffMap, key), equalTo(get(afterMap, key))).     }     for (Integer key : keysToAdd) {         assertThat(get(appliedDiffMap, key), equalTo(get(afterMap, key))).     } }
false;protected;1;4;;@Override protected Map<Integer, V> createMap(Map values) {     return values. }
false;protected;2;4;;@Override protected V get(Map<Integer, V> map, Integer key) {     return map.get(key). }
false;protected;1;4;;@Override protected int size(Map<Integer, V> map) {     return map.size(). }
false;protected;1;4;;@Override protected ImmutableOpenMap<Integer, V> createMap(Map values) {     return ImmutableOpenMap.<Integer, V>builder().putAll(values).build(). }
false;protected;2;4;;@Override protected V get(ImmutableOpenMap<Integer, V> map, Integer key) {     return map.get(key). }
false;protected;1;4;;@Override protected int size(ImmutableOpenMap<Integer, V> map) {     return map.size(). }
false;protected;1;4;;@Override protected ImmutableOpenIntMap<V> createMap(Map values) {     return ImmutableOpenIntMap.<V>builder().putAll(values).build(). }
false;protected;2;4;;@Override protected V get(ImmutableOpenIntMap<V> map, Integer key) {     return map.get(key). }
false;protected;1;4;;@Override protected int size(ImmutableOpenIntMap<V> map) {     return map.size(). }
false;public;2;4;;@Override public TestDiffable read(StreamInput in, K key) throws IOException {     return new TestDiffable(in.readString()). }
false;public;2;4;;@Override public Diff<TestDiffable> readDiff(StreamInput in, K key) throws IOException {     return AbstractDiffable.readDiffFrom(TestDiffable::readFrom, in). }
false;private,static;0;13;;private static <K> DiffableUtils.DiffableValueSerializer<K, TestDiffable> diffableValueSerializer() {     return new DiffableUtils.DiffableValueSerializer<K, TestDiffable>() {          @Override         public TestDiffable read(StreamInput in, K key) throws IOException {             return new TestDiffable(in.readString()).         }          @Override         public Diff<TestDiffable> readDiff(StreamInput in, K key) throws IOException {             return AbstractDiffable.readDiffFrom(TestDiffable::readFrom, in).         }     }. }
false;public;2;4;;@Override public void write(String value, StreamOutput out) throws IOException {     out.writeString(value). }
false;public;2;4;;@Override public String read(StreamInput in, K key) throws IOException {     return in.readString(). }
false;private,static;0;13;;private static <K> DiffableUtils.NonDiffableValueSerializer<K, String> nonDiffableValueSerializer() {     return new DiffableUtils.NonDiffableValueSerializer<K, String>() {          @Override         public void write(String value, StreamOutput out) throws IOException {             out.writeString(value).         }          @Override         public String read(StreamInput in, K key) throws IOException {             return in.readString().         }     }. }
false;public;0;3;;public String value() {     return value. }
false;public,static;1;3;;public static TestDiffable readFrom(StreamInput in) throws IOException {     return new TestDiffable(in.readString()). }
false;public,static;1;3;;public static Diff<TestDiffable> readDiffFrom(StreamInput in) throws IOException {     return readDiffFrom(TestDiffable::readFrom, in). }
false;public;1;4;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(value). }
false;public;1;10;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     TestDiffable that = (TestDiffable) o.     return !(value != null ? !value.equals(that.value) : that.value != null). }
false;public;0;4;;@Override public int hashCode() {     return value != null ? value.hashCode() : 0. }
