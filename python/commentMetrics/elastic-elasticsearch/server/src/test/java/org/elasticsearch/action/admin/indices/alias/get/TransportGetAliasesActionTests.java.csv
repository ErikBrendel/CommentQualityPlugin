commented;modifiers;parameterAmount;loc;comment;code
false;public;0;31;;public void testPostProcess() {     GetAliasesRequest request = new GetAliasesRequest().     ImmutableOpenMap<String, List<AliasMetaData>> aliases = ImmutableOpenMap.<String, List<AliasMetaData>>builder().fPut("b", Collections.singletonList(new AliasMetaData.Builder("y").build())).build().     ImmutableOpenMap<String, List<AliasMetaData>> result = TransportGetAliasesAction.postProcess(request, new String[] { "a", "b", "c" }, aliases).     assertThat(result.size(), equalTo(3)).     assertThat(result.get("a").size(), equalTo(0)).     assertThat(result.get("b").size(), equalTo(1)).     assertThat(result.get("c").size(), equalTo(0)).     request = new GetAliasesRequest().     request.replaceAliases("y", "z").     aliases = ImmutableOpenMap.<String, List<AliasMetaData>>builder().fPut("b", Collections.singletonList(new AliasMetaData.Builder("y").build())).build().     result = TransportGetAliasesAction.postProcess(request, new String[] { "a", "b", "c" }, aliases).     assertThat(result.size(), equalTo(3)).     assertThat(result.get("a").size(), equalTo(0)).     assertThat(result.get("b").size(), equalTo(1)).     assertThat(result.get("c").size(), equalTo(0)).     request = new GetAliasesRequest("y", "z").     aliases = ImmutableOpenMap.<String, List<AliasMetaData>>builder().fPut("b", Collections.singletonList(new AliasMetaData.Builder("y").build())).build().     result = TransportGetAliasesAction.postProcess(request, new String[] { "a", "b", "c" }, aliases).     assertThat(result.size(), equalTo(1)).     assertThat(result.get("b").size(), equalTo(1)). }
