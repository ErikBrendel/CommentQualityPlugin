commented;modifiers;parameterAmount;loc;comment;code
false;protected,final;2;14;;@Override protected final void assertFromXContent(T aggregation, ParsedAggregation parsedAggregation) {     assertTrue(parsedAggregation instanceof Percentiles).     Percentiles parsedPercentiles = (Percentiles) parsedAggregation.     for (Percentile percentile : aggregation) {         Double percent = percentile.getPercent().         assertEquals(aggregation.percentile(percent), parsedPercentiles.percentile(percent), 0).         assertEquals(aggregation.percentileAsString(percent), parsedPercentiles.percentileAsString(percent)).     }     Class<? extends ParsedPercentiles> parsedClass = implementationClass().     assertTrue(parsedClass != null && parsedClass.isInstance(parsedAggregation)). }
false;public,static;0;8;;public static double[] randomPercents() {     List<Double> randomCdfValues = randomSubsetOf(randomIntBetween(1, 7), 0.01d, 0.05d, 0.25d, 0.50d, 0.75d, 0.95d, 0.99d).     double[] percents = new double[randomCdfValues.size()].     for (int i = 0. i < randomCdfValues.size(). i++) {         percents[i] = randomCdfValues.get(i).     }     return percents. }
false;protected;2;5;;@Override protected void assertPercentile(T agg, Double value) {     assertThat(agg.percentile(value), equalTo(Double.NaN)).     assertThat(agg.percentileAsString(value), equalTo("NaN")). }
