commented;modifiers;parameterAmount;loc;comment;code
false;public;0;25;;public void testFlags() {     String[] supportedFlags = new String[] { "CASE_INSENSITIVE", "MULTILINE", "DOTALL", "UNICODE_CASE", "CANON_EQ", "UNIX_LINES", "LITERAL", "COMMENTS", "UNICODE_CHAR_CLASS", "UNICODE_CHARACTER_CLASS" }.     int[] flags = new int[] { Pattern.CASE_INSENSITIVE, Pattern.MULTILINE, Pattern.DOTALL, Pattern.UNICODE_CASE, Pattern.CANON_EQ, Pattern.UNIX_LINES, Pattern.LITERAL, Pattern.COMMENTS, Regex.UNICODE_CHARACTER_CLASS }.     Random random = random().     int num = 10 + random.nextInt(100).     for (int i = 0. i < num. i++) {         int numFlags = random.nextInt(flags.length + 1).         int current = 0.         StringBuilder builder = new StringBuilder().         for (int j = 0. j < numFlags. j++) {             int index = random.nextInt(flags.length).             current |= flags[index].             builder.append(supportedFlags[index]).             if (j < numFlags - 1) {                 builder.append("|").             }         }         String flagsToString = Regex.flagsToString(current).         assertThat(Regex.flagsFromString(builder.toString()), equalTo(current)).         assertThat(Regex.flagsFromString(builder.toString()), equalTo(Regex.flagsFromString(flagsToString))).         // accepts the flags?         Pattern.compile("\\w\\d{1,2}", current).     } }
false;public;0;11;;public void testDoubleWildcardMatch() {     assertTrue(Regex.simpleMatch("ddd", "ddd")).     assertTrue(Regex.simpleMatch("d*d*d", "dadd")).     assertTrue(Regex.simpleMatch("**ddd", "dddd")).     assertFalse(Regex.simpleMatch("**ddd", "fff")).     assertTrue(Regex.simpleMatch("fff*ddd", "fffabcddd")).     assertTrue(Regex.simpleMatch("fff**ddd", "fffabcddd")).     assertFalse(Regex.simpleMatch("fff**ddd", "fffabcdd")).     assertTrue(Regex.simpleMatch("fff*******ddd", "fffabcddd")).     assertFalse(Regex.simpleMatch("fff******ddd", "fffabcdd")). }
