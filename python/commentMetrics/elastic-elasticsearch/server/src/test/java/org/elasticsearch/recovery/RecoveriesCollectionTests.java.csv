commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void onRecoveryDone(RecoveryState state) { }
false;public;3;4;;@Override public void onRecoveryFailure(RecoveryState state, RecoveryFailedException e, boolean sendShardFailure) { }
false;public;0;16;;public void testLastAccessTimeUpdate() throws Exception {     try (ReplicationGroup shards = createGroup(0)) {         final RecoveriesCollection collection = new RecoveriesCollection(logger, threadPool, v -> {         }).         final long recoveryId = startRecovery(collection, shards.getPrimaryNode(), shards.addReplica()).         try (RecoveriesCollection.RecoveryRef status = collection.getRecovery(recoveryId)) {             final long lastSeenTime = status.target().lastAccessTime().             assertBusy(() -> {                 try (RecoveriesCollection.RecoveryRef currentStatus = collection.getRecovery(recoveryId)) {                     assertThat("access time failed to update", lastSeenTime, lessThan(currentStatus.target().lastAccessTime())).                 }             }).         } finally {             collection.cancelRecovery(recoveryId, "life").         }     } }
false;public;1;4;;@Override public void onRecoveryDone(RecoveryState state) {     latch.countDown(). }
false;public;3;5;;@Override public void onRecoveryFailure(RecoveryState state, RecoveryFailedException e, boolean sendShardFailure) {     failed.set(true).     latch.countDown(). }
false;public;0;27;;public void testRecoveryTimeout() throws Exception {     try (ReplicationGroup shards = createGroup(0)) {         final RecoveriesCollection collection = new RecoveriesCollection(logger, threadPool, v -> {         }).         final AtomicBoolean failed = new AtomicBoolean().         final CountDownLatch latch = new CountDownLatch(1).         final long recoveryId = startRecovery(collection, shards.getPrimaryNode(), shards.addReplica(), new PeerRecoveryTargetService.RecoveryListener() {              @Override             public void onRecoveryDone(RecoveryState state) {                 latch.countDown().             }              @Override             public void onRecoveryFailure(RecoveryState state, RecoveryFailedException e, boolean sendShardFailure) {                 failed.set(true).                 latch.countDown().             }         }, TimeValue.timeValueMillis(100)).         try {             latch.await(30, TimeUnit.SECONDS).             assertTrue("recovery failed to timeout", failed.get()).         } finally {             collection.cancelRecovery(recoveryId, "meh").         }     } }
false;public;0;15;;public void testRecoveryCancellation() throws Exception {     try (ReplicationGroup shards = createGroup(0)) {         final RecoveriesCollection collection = new RecoveriesCollection(logger, threadPool, v -> {         }).         final long recoveryId = startRecovery(collection, shards.getPrimaryNode(), shards.addReplica()).         final long recoveryId2 = startRecovery(collection, shards.getPrimaryNode(), shards.addReplica()).         try (RecoveriesCollection.RecoveryRef recoveryRef = collection.getRecovery(recoveryId)) {             ShardId shardId = recoveryRef.target().shardId().             assertTrue("failed to cancel recoveries", collection.cancelRecoveriesForShard(shardId, "test")).             assertThat("all recoveries should be cancelled", collection.size(), equalTo(0)).         } finally {             collection.cancelRecovery(recoveryId, "meh").             collection.cancelRecovery(recoveryId2, "meh").         }     } }
false;public;0;38;;public void testResetRecovery() throws Exception {     try (ReplicationGroup shards = createGroup(0)) {         shards.startAll().         int numDocs = randomIntBetween(1, 15).         shards.indexDocs(numDocs).         final RecoveriesCollection collection = new RecoveriesCollection(logger, threadPool, v -> {         }).         IndexShard shard = shards.addReplica().         final long recoveryId = startRecovery(collection, shards.getPrimaryNode(), shard).         RecoveryTarget recoveryTarget = collection.getRecoveryTarget(recoveryId).         final int currentAsTarget = shard.recoveryStats().currentAsTarget().         final int referencesToStore = recoveryTarget.store().refCount().         IndexShard indexShard = recoveryTarget.indexShard().         Store store = recoveryTarget.store().         String tempFileName = recoveryTarget.getTempNameForFile("foobar").         RecoveryTarget resetRecovery = collection.resetRecovery(recoveryId, TimeValue.timeValueMinutes(60)).         final long resetRecoveryId = resetRecovery.recoveryId().         assertNotSame(recoveryTarget, resetRecovery).         assertNotSame(recoveryTarget.cancellableThreads(), resetRecovery.cancellableThreads()).         assertSame(indexShard, resetRecovery.indexShard()).         assertSame(store, resetRecovery.store()).         assertEquals(referencesToStore, resetRecovery.store().refCount()).         assertEquals(currentAsTarget, shard.recoveryStats().currentAsTarget()).         assertEquals(recoveryTarget.refCount(), 0).         expectThrows(ElasticsearchException.class, () -> recoveryTarget.store()).         expectThrows(ElasticsearchException.class, () -> recoveryTarget.indexShard()).         String resetTempFileName = resetRecovery.getTempNameForFile("foobar").         assertNotEquals(tempFileName, resetTempFileName).         assertEquals(currentAsTarget, shard.recoveryStats().currentAsTarget()).         try (RecoveriesCollection.RecoveryRef newRecoveryRef = collection.getRecovery(resetRecoveryId)) {             shards.recoverReplica(shard, (s, n) -> {                 assertSame(s, newRecoveryRef.target().indexShard()).                 return newRecoveryRef.target().             }, false).         }         shards.assertAllEqual(numDocs).         assertNull("recovery is done", collection.getRecovery(recoveryId)).     } }
false;;3;3;;long startRecovery(RecoveriesCollection collection, DiscoveryNode sourceNode, IndexShard shard) {     return startRecovery(collection, sourceNode, shard, listener, TimeValue.timeValueMinutes(60)). }
false;;5;7;;long startRecovery(RecoveriesCollection collection, DiscoveryNode sourceNode, IndexShard indexShard, PeerRecoveryTargetService.RecoveryListener listener, TimeValue timeValue) {     final DiscoveryNode rNode = getDiscoveryNode(indexShard.routingEntry().currentNodeId()).     indexShard.markAsRecovering("remote", new RecoveryState(indexShard.routingEntry(), sourceNode, rNode)).     indexShard.prepareForIndexRecovery().     return collection.startRecovery(indexShard, sourceNode, listener, timeValue). }
