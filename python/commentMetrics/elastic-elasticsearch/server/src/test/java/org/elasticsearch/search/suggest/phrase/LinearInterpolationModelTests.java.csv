commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected SmoothingModel createTestModel() {     return createRandomModel(). }
false;static;0;8;;static LinearInterpolation createRandomModel() {     double trigramLambda = randomDoubleBetween(0.0, 10.0, false).     double bigramLambda = randomDoubleBetween(0.0, 10.0, false).     double unigramLambda = randomDoubleBetween(0.0, 10.0, false).     // normalize so parameters sum to 1     double sum = trigramLambda + bigramLambda + unigramLambda.     return new LinearInterpolation(trigramLambda / sum, bigramLambda / sum, unigramLambda / sum). }
true;protected;1;17;/**  * mutate the given model so the returned smoothing model is different  */ ;/**  * mutate the given model so the returned smoothing model is different  */ @Override protected LinearInterpolation createMutation(SmoothingModel input) {     LinearInterpolation original = (LinearInterpolation) input.     // swap two values permute original lambda values     switch(randomIntBetween(0, 2)) {         case 0:             // swap first two             return new LinearInterpolation(original.getBigramLambda(), original.getTrigramLambda(), original.getUnigramLambda()).         case 1:             // swap last two             return new LinearInterpolation(original.getTrigramLambda(), original.getUnigramLambda(), original.getBigramLambda()).         case 2:         default:             // swap first and last             return new LinearInterpolation(original.getUnigramLambda(), original.getBigramLambda(), original.getTrigramLambda()).     } }
false;;2;9;;@Override void assertWordScorer(WordScorer wordScorer, SmoothingModel in) {     LinearInterpolation testModel = (LinearInterpolation) in.     LinearInterpolatingScorer testScorer = (LinearInterpolatingScorer) wordScorer.     assertThat(wordScorer, instanceOf(LinearInterpolatingScorer.class)).     assertEquals(testModel.getTrigramLambda(), (testScorer).trigramLambda(), 1e-15).     assertEquals(testModel.getBigramLambda(), (testScorer).bigramLambda(), 1e-15).     assertEquals(testModel.getUnigramLambda(), (testScorer).unigramLambda(), 1e-15). }
false;protected;1;4;;@Override protected SmoothingModel fromXContent(XContentParser parser) throws IOException {     return LinearInterpolation.fromXContent(parser). }
