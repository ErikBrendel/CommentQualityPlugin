# id;timestamp;commentText;codeText;commentWords;codeWords
RefreshListenersTests -> @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/37261")     public void testConcurrentRefresh() throws Exception;1547034201;Attempts to add a listener at the same time as a refresh occurs by having a background thread force a refresh as fast as it can while_adding listeners. This can catch the situation where a refresh happens right as the listener is being added such that the listener_misses the refresh and has to catch the next one. If the listener wasn't able to properly catch the next one then this would fail.;@AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/37261")_    public void testConcurrentRefresh() throws Exception {_        AtomicBoolean run = new AtomicBoolean(true)__        Thread refresher = new Thread(() -> {_            while (run.get()) {_                engine.refresh("test")__            }_        })__        refresher.start()__        try {_            for (int i = 0_ i < 1000_ i++) {_                Engine.IndexResult index = index("1")__                DummyRefreshListener listener = new DummyRefreshListener()__                boolean immediate = listeners.addOrNotify(index.getTranslogLocation(), listener)__                if (immediate) {_                    assertNotNull(listener.forcedRefresh.get())__                } else {_                    assertBusy(() -> assertNotNull(listener.forcedRefresh.get()))__                }_                assertFalse(listener.forcedRefresh.get())__                listener.assertNoError()__            }_        } finally {_            run.set(false)__            refresher.join()__        }_    };attempts,to,add,a,listener,at,the,same,time,as,a,refresh,occurs,by,having,a,background,thread,force,a,refresh,as,fast,as,it,can,while,adding,listeners,this,can,catch,the,situation,where,a,refresh,happens,right,as,the,listener,is,being,added,such,that,the,listener,misses,the,refresh,and,has,to,catch,the,next,one,if,the,listener,wasn,t,able,to,properly,catch,the,next,one,then,this,would,fail;awaits,fix,bug,url,https,github,com,elastic,elasticsearch,issues,37261,public,void,test,concurrent,refresh,throws,exception,atomic,boolean,run,new,atomic,boolean,true,thread,refresher,new,thread,while,run,get,engine,refresh,test,refresher,start,try,for,int,i,0,i,1000,i,engine,index,result,index,index,1,dummy,refresh,listener,listener,new,dummy,refresh,listener,boolean,immediate,listeners,add,or,notify,index,get,translog,location,listener,if,immediate,assert,not,null,listener,forced,refresh,get,else,assert,busy,assert,not,null,listener,forced,refresh,get,assert,false,listener,forced,refresh,get,listener,assert,no,error,finally,run,set,false,refresher,join
RefreshListenersTests -> @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/37261")     public void testConcurrentRefresh() throws Exception;1547174095;Attempts to add a listener at the same time as a refresh occurs by having a background thread force a refresh as fast as it can while_adding listeners. This can catch the situation where a refresh happens right as the listener is being added such that the listener_misses the refresh and has to catch the next one. If the listener wasn't able to properly catch the next one then this would fail.;@AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/37261")_    public void testConcurrentRefresh() throws Exception {_        AtomicBoolean run = new AtomicBoolean(true)__        Thread refresher = new Thread(() -> {_            while (run.get()) {_                engine.refresh("test")__            }_        })__        refresher.start()__        try {_            for (int i = 0_ i < 1000_ i++) {_                Engine.IndexResult index = index("1")__                DummyRefreshListener listener = new DummyRefreshListener()__                boolean immediate = listeners.addOrNotify(index.getTranslogLocation(), listener)__                if (immediate) {_                    assertNotNull(listener.forcedRefresh.get())__                } else {_                    assertBusy(() -> assertNotNull(listener.forcedRefresh.get()))__                }_                assertFalse(listener.forcedRefresh.get())__                listener.assertNoError()__            }_        } finally {_            run.set(false)__            refresher.join()__        }_    };attempts,to,add,a,listener,at,the,same,time,as,a,refresh,occurs,by,having,a,background,thread,force,a,refresh,as,fast,as,it,can,while,adding,listeners,this,can,catch,the,situation,where,a,refresh,happens,right,as,the,listener,is,being,added,such,that,the,listener,misses,the,refresh,and,has,to,catch,the,next,one,if,the,listener,wasn,t,able,to,properly,catch,the,next,one,then,this,would,fail;awaits,fix,bug,url,https,github,com,elastic,elasticsearch,issues,37261,public,void,test,concurrent,refresh,throws,exception,atomic,boolean,run,new,atomic,boolean,true,thread,refresher,new,thread,while,run,get,engine,refresh,test,refresher,start,try,for,int,i,0,i,1000,i,engine,index,result,index,index,1,dummy,refresh,listener,listener,new,dummy,refresh,listener,boolean,immediate,listeners,add,or,notify,index,get,translog,location,listener,if,immediate,assert,not,null,listener,forced,refresh,get,else,assert,busy,assert,not,null,listener,forced,refresh,get,assert,false,listener,forced,refresh,get,listener,assert,no,error,finally,run,set,false,refresher,join
RefreshListenersTests -> public void testConcurrentRefresh() throws Exception;1524684173;Attempts to add a listener at the same time as a refresh occurs by having a background thread force a refresh as fast as it can while_adding listeners. This can catch the situation where a refresh happens right as the listener is being added such that the listener_misses the refresh and has to catch the next one. If the listener wasn't able to properly catch the next one then this would fail.;public void testConcurrentRefresh() throws Exception {_        AtomicBoolean run = new AtomicBoolean(true)__        Thread refresher = new Thread(() -> {_            while (run.get()) {_                engine.refresh("test")__            }_        })__        refresher.start()__        try {_            for (int i = 0_ i < 1000_ i++) {_                Engine.IndexResult index = index("1")__                DummyRefreshListener listener = new DummyRefreshListener()__                boolean immediate = listeners.addOrNotify(index.getTranslogLocation(), listener)__                if (immediate) {_                    assertNotNull(listener.forcedRefresh.get())__                } else {_                    assertBusy(() -> assertNotNull(listener.forcedRefresh.get()))__                }_                assertFalse(listener.forcedRefresh.get())__                listener.assertNoError()__            }_        } finally {_            run.set(false)__            refresher.join()__        }_    };attempts,to,add,a,listener,at,the,same,time,as,a,refresh,occurs,by,having,a,background,thread,force,a,refresh,as,fast,as,it,can,while,adding,listeners,this,can,catch,the,situation,where,a,refresh,happens,right,as,the,listener,is,being,added,such,that,the,listener,misses,the,refresh,and,has,to,catch,the,next,one,if,the,listener,wasn,t,able,to,properly,catch,the,next,one,then,this,would,fail;public,void,test,concurrent,refresh,throws,exception,atomic,boolean,run,new,atomic,boolean,true,thread,refresher,new,thread,while,run,get,engine,refresh,test,refresher,start,try,for,int,i,0,i,1000,i,engine,index,result,index,index,1,dummy,refresh,listener,listener,new,dummy,refresh,listener,boolean,immediate,listeners,add,or,notify,index,get,translog,location,listener,if,immediate,assert,not,null,listener,forced,refresh,get,else,assert,busy,assert,not,null,listener,forced,refresh,get,assert,false,listener,forced,refresh,get,listener,assert,no,error,finally,run,set,false,refresher,join
RefreshListenersTests -> public void testConcurrentRefresh() throws Exception;1535046779;Attempts to add a listener at the same time as a refresh occurs by having a background thread force a refresh as fast as it can while_adding listeners. This can catch the situation where a refresh happens right as the listener is being added such that the listener_misses the refresh and has to catch the next one. If the listener wasn't able to properly catch the next one then this would fail.;public void testConcurrentRefresh() throws Exception {_        AtomicBoolean run = new AtomicBoolean(true)__        Thread refresher = new Thread(() -> {_            while (run.get()) {_                engine.refresh("test")__            }_        })__        refresher.start()__        try {_            for (int i = 0_ i < 1000_ i++) {_                Engine.IndexResult index = index("1")__                DummyRefreshListener listener = new DummyRefreshListener()__                boolean immediate = listeners.addOrNotify(index.getTranslogLocation(), listener)__                if (immediate) {_                    assertNotNull(listener.forcedRefresh.get())__                } else {_                    assertBusy(() -> assertNotNull(listener.forcedRefresh.get()))__                }_                assertFalse(listener.forcedRefresh.get())__                listener.assertNoError()__            }_        } finally {_            run.set(false)__            refresher.join()__        }_    };attempts,to,add,a,listener,at,the,same,time,as,a,refresh,occurs,by,having,a,background,thread,force,a,refresh,as,fast,as,it,can,while,adding,listeners,this,can,catch,the,situation,where,a,refresh,happens,right,as,the,listener,is,being,added,such,that,the,listener,misses,the,refresh,and,has,to,catch,the,next,one,if,the,listener,wasn,t,able,to,properly,catch,the,next,one,then,this,would,fail;public,void,test,concurrent,refresh,throws,exception,atomic,boolean,run,new,atomic,boolean,true,thread,refresher,new,thread,while,run,get,engine,refresh,test,refresher,start,try,for,int,i,0,i,1000,i,engine,index,result,index,index,1,dummy,refresh,listener,listener,new,dummy,refresh,listener,boolean,immediate,listeners,add,or,notify,index,get,translog,location,listener,if,immediate,assert,not,null,listener,forced,refresh,get,else,assert,busy,assert,not,null,listener,forced,refresh,get,assert,false,listener,forced,refresh,get,listener,assert,no,error,finally,run,set,false,refresher,join
RefreshListenersTests -> public void testConcurrentRefresh() throws Exception;1535723122;Attempts to add a listener at the same time as a refresh occurs by having a background thread force a refresh as fast as it can while_adding listeners. This can catch the situation where a refresh happens right as the listener is being added such that the listener_misses the refresh and has to catch the next one. If the listener wasn't able to properly catch the next one then this would fail.;public void testConcurrentRefresh() throws Exception {_        AtomicBoolean run = new AtomicBoolean(true)__        Thread refresher = new Thread(() -> {_            while (run.get()) {_                engine.refresh("test")__            }_        })__        refresher.start()__        try {_            for (int i = 0_ i < 1000_ i++) {_                Engine.IndexResult index = index("1")__                DummyRefreshListener listener = new DummyRefreshListener()__                boolean immediate = listeners.addOrNotify(index.getTranslogLocation(), listener)__                if (immediate) {_                    assertNotNull(listener.forcedRefresh.get())__                } else {_                    assertBusy(() -> assertNotNull(listener.forcedRefresh.get()))__                }_                assertFalse(listener.forcedRefresh.get())__                listener.assertNoError()__            }_        } finally {_            run.set(false)__            refresher.join()__        }_    };attempts,to,add,a,listener,at,the,same,time,as,a,refresh,occurs,by,having,a,background,thread,force,a,refresh,as,fast,as,it,can,while,adding,listeners,this,can,catch,the,situation,where,a,refresh,happens,right,as,the,listener,is,being,added,such,that,the,listener,misses,the,refresh,and,has,to,catch,the,next,one,if,the,listener,wasn,t,able,to,properly,catch,the,next,one,then,this,would,fail;public,void,test,concurrent,refresh,throws,exception,atomic,boolean,run,new,atomic,boolean,true,thread,refresher,new,thread,while,run,get,engine,refresh,test,refresher,start,try,for,int,i,0,i,1000,i,engine,index,result,index,index,1,dummy,refresh,listener,listener,new,dummy,refresh,listener,boolean,immediate,listeners,add,or,notify,index,get,translog,location,listener,if,immediate,assert,not,null,listener,forced,refresh,get,else,assert,busy,assert,not,null,listener,forced,refresh,get,assert,false,listener,forced,refresh,get,listener,assert,no,error,finally,run,set,false,refresher,join
RefreshListenersTests -> public void testConcurrentRefresh() throws Exception;1536314350;Attempts to add a listener at the same time as a refresh occurs by having a background thread force a refresh as fast as it can while_adding listeners. This can catch the situation where a refresh happens right as the listener is being added such that the listener_misses the refresh and has to catch the next one. If the listener wasn't able to properly catch the next one then this would fail.;public void testConcurrentRefresh() throws Exception {_        AtomicBoolean run = new AtomicBoolean(true)__        Thread refresher = new Thread(() -> {_            while (run.get()) {_                engine.refresh("test")__            }_        })__        refresher.start()__        try {_            for (int i = 0_ i < 1000_ i++) {_                Engine.IndexResult index = index("1")__                DummyRefreshListener listener = new DummyRefreshListener()__                boolean immediate = listeners.addOrNotify(index.getTranslogLocation(), listener)__                if (immediate) {_                    assertNotNull(listener.forcedRefresh.get())__                } else {_                    assertBusy(() -> assertNotNull(listener.forcedRefresh.get()))__                }_                assertFalse(listener.forcedRefresh.get())__                listener.assertNoError()__            }_        } finally {_            run.set(false)__            refresher.join()__        }_    };attempts,to,add,a,listener,at,the,same,time,as,a,refresh,occurs,by,having,a,background,thread,force,a,refresh,as,fast,as,it,can,while,adding,listeners,this,can,catch,the,situation,where,a,refresh,happens,right,as,the,listener,is,being,added,such,that,the,listener,misses,the,refresh,and,has,to,catch,the,next,one,if,the,listener,wasn,t,able,to,properly,catch,the,next,one,then,this,would,fail;public,void,test,concurrent,refresh,throws,exception,atomic,boolean,run,new,atomic,boolean,true,thread,refresher,new,thread,while,run,get,engine,refresh,test,refresher,start,try,for,int,i,0,i,1000,i,engine,index,result,index,index,1,dummy,refresh,listener,listener,new,dummy,refresh,listener,boolean,immediate,listeners,add,or,notify,index,get,translog,location,listener,if,immediate,assert,not,null,listener,forced,refresh,get,else,assert,busy,assert,not,null,listener,forced,refresh,get,assert,false,listener,forced,refresh,get,listener,assert,no,error,finally,run,set,false,refresher,join
RefreshListenersTests -> public void testConcurrentRefresh() throws Exception;1536611444;Attempts to add a listener at the same time as a refresh occurs by having a background thread force a refresh as fast as it can while_adding listeners. This can catch the situation where a refresh happens right as the listener is being added such that the listener_misses the refresh and has to catch the next one. If the listener wasn't able to properly catch the next one then this would fail.;public void testConcurrentRefresh() throws Exception {_        AtomicBoolean run = new AtomicBoolean(true)__        Thread refresher = new Thread(() -> {_            while (run.get()) {_                engine.refresh("test")__            }_        })__        refresher.start()__        try {_            for (int i = 0_ i < 1000_ i++) {_                Engine.IndexResult index = index("1")__                DummyRefreshListener listener = new DummyRefreshListener()__                boolean immediate = listeners.addOrNotify(index.getTranslogLocation(), listener)__                if (immediate) {_                    assertNotNull(listener.forcedRefresh.get())__                } else {_                    assertBusy(() -> assertNotNull(listener.forcedRefresh.get()))__                }_                assertFalse(listener.forcedRefresh.get())__                listener.assertNoError()__            }_        } finally {_            run.set(false)__            refresher.join()__        }_    };attempts,to,add,a,listener,at,the,same,time,as,a,refresh,occurs,by,having,a,background,thread,force,a,refresh,as,fast,as,it,can,while,adding,listeners,this,can,catch,the,situation,where,a,refresh,happens,right,as,the,listener,is,being,added,such,that,the,listener,misses,the,refresh,and,has,to,catch,the,next,one,if,the,listener,wasn,t,able,to,properly,catch,the,next,one,then,this,would,fail;public,void,test,concurrent,refresh,throws,exception,atomic,boolean,run,new,atomic,boolean,true,thread,refresher,new,thread,while,run,get,engine,refresh,test,refresher,start,try,for,int,i,0,i,1000,i,engine,index,result,index,index,1,dummy,refresh,listener,listener,new,dummy,refresh,listener,boolean,immediate,listeners,add,or,notify,index,get,translog,location,listener,if,immediate,assert,not,null,listener,forced,refresh,get,else,assert,busy,assert,not,null,listener,forced,refresh,get,assert,false,listener,forced,refresh,get,listener,assert,no,error,finally,run,set,false,refresher,join
RefreshListenersTests -> public void testConcurrentRefresh() throws Exception;1537806831;Attempts to add a listener at the same time as a refresh occurs by having a background thread force a refresh as fast as it can while_adding listeners. This can catch the situation where a refresh happens right as the listener is being added such that the listener_misses the refresh and has to catch the next one. If the listener wasn't able to properly catch the next one then this would fail.;public void testConcurrentRefresh() throws Exception {_        AtomicBoolean run = new AtomicBoolean(true)__        Thread refresher = new Thread(() -> {_            while (run.get()) {_                engine.refresh("test")__            }_        })__        refresher.start()__        try {_            for (int i = 0_ i < 1000_ i++) {_                Engine.IndexResult index = index("1")__                DummyRefreshListener listener = new DummyRefreshListener()__                boolean immediate = listeners.addOrNotify(index.getTranslogLocation(), listener)__                if (immediate) {_                    assertNotNull(listener.forcedRefresh.get())__                } else {_                    assertBusy(() -> assertNotNull(listener.forcedRefresh.get()))__                }_                assertFalse(listener.forcedRefresh.get())__                listener.assertNoError()__            }_        } finally {_            run.set(false)__            refresher.join()__        }_    };attempts,to,add,a,listener,at,the,same,time,as,a,refresh,occurs,by,having,a,background,thread,force,a,refresh,as,fast,as,it,can,while,adding,listeners,this,can,catch,the,situation,where,a,refresh,happens,right,as,the,listener,is,being,added,such,that,the,listener,misses,the,refresh,and,has,to,catch,the,next,one,if,the,listener,wasn,t,able,to,properly,catch,the,next,one,then,this,would,fail;public,void,test,concurrent,refresh,throws,exception,atomic,boolean,run,new,atomic,boolean,true,thread,refresher,new,thread,while,run,get,engine,refresh,test,refresher,start,try,for,int,i,0,i,1000,i,engine,index,result,index,index,1,dummy,refresh,listener,listener,new,dummy,refresh,listener,boolean,immediate,listeners,add,or,notify,index,get,translog,location,listener,if,immediate,assert,not,null,listener,forced,refresh,get,else,assert,busy,assert,not,null,listener,forced,refresh,get,assert,false,listener,forced,refresh,get,listener,assert,no,error,finally,run,set,false,refresher,join
RefreshListenersTests -> public void testConcurrentRefresh() throws Exception;1538067637;Attempts to add a listener at the same time as a refresh occurs by having a background thread force a refresh as fast as it can while_adding listeners. This can catch the situation where a refresh happens right as the listener is being added such that the listener_misses the refresh and has to catch the next one. If the listener wasn't able to properly catch the next one then this would fail.;public void testConcurrentRefresh() throws Exception {_        AtomicBoolean run = new AtomicBoolean(true)__        Thread refresher = new Thread(() -> {_            while (run.get()) {_                engine.refresh("test")__            }_        })__        refresher.start()__        try {_            for (int i = 0_ i < 1000_ i++) {_                Engine.IndexResult index = index("1")__                DummyRefreshListener listener = new DummyRefreshListener()__                boolean immediate = listeners.addOrNotify(index.getTranslogLocation(), listener)__                if (immediate) {_                    assertNotNull(listener.forcedRefresh.get())__                } else {_                    assertBusy(() -> assertNotNull(listener.forcedRefresh.get()))__                }_                assertFalse(listener.forcedRefresh.get())__                listener.assertNoError()__            }_        } finally {_            run.set(false)__            refresher.join()__        }_    };attempts,to,add,a,listener,at,the,same,time,as,a,refresh,occurs,by,having,a,background,thread,force,a,refresh,as,fast,as,it,can,while,adding,listeners,this,can,catch,the,situation,where,a,refresh,happens,right,as,the,listener,is,being,added,such,that,the,listener,misses,the,refresh,and,has,to,catch,the,next,one,if,the,listener,wasn,t,able,to,properly,catch,the,next,one,then,this,would,fail;public,void,test,concurrent,refresh,throws,exception,atomic,boolean,run,new,atomic,boolean,true,thread,refresher,new,thread,while,run,get,engine,refresh,test,refresher,start,try,for,int,i,0,i,1000,i,engine,index,result,index,index,1,dummy,refresh,listener,listener,new,dummy,refresh,listener,boolean,immediate,listeners,add,or,notify,index,get,translog,location,listener,if,immediate,assert,not,null,listener,forced,refresh,get,else,assert,busy,assert,not,null,listener,forced,refresh,get,assert,false,listener,forced,refresh,get,listener,assert,no,error,finally,run,set,false,refresher,join
RefreshListenersTests -> public void testConcurrentRefresh() throws Exception;1543942400;Attempts to add a listener at the same time as a refresh occurs by having a background thread force a refresh as fast as it can while_adding listeners. This can catch the situation where a refresh happens right as the listener is being added such that the listener_misses the refresh and has to catch the next one. If the listener wasn't able to properly catch the next one then this would fail.;public void testConcurrentRefresh() throws Exception {_        AtomicBoolean run = new AtomicBoolean(true)__        Thread refresher = new Thread(() -> {_            while (run.get()) {_                engine.refresh("test")__            }_        })__        refresher.start()__        try {_            for (int i = 0_ i < 1000_ i++) {_                Engine.IndexResult index = index("1")__                DummyRefreshListener listener = new DummyRefreshListener()__                boolean immediate = listeners.addOrNotify(index.getTranslogLocation(), listener)__                if (immediate) {_                    assertNotNull(listener.forcedRefresh.get())__                } else {_                    assertBusy(() -> assertNotNull(listener.forcedRefresh.get()))__                }_                assertFalse(listener.forcedRefresh.get())__                listener.assertNoError()__            }_        } finally {_            run.set(false)__            refresher.join()__        }_    };attempts,to,add,a,listener,at,the,same,time,as,a,refresh,occurs,by,having,a,background,thread,force,a,refresh,as,fast,as,it,can,while,adding,listeners,this,can,catch,the,situation,where,a,refresh,happens,right,as,the,listener,is,being,added,such,that,the,listener,misses,the,refresh,and,has,to,catch,the,next,one,if,the,listener,wasn,t,able,to,properly,catch,the,next,one,then,this,would,fail;public,void,test,concurrent,refresh,throws,exception,atomic,boolean,run,new,atomic,boolean,true,thread,refresher,new,thread,while,run,get,engine,refresh,test,refresher,start,try,for,int,i,0,i,1000,i,engine,index,result,index,index,1,dummy,refresh,listener,listener,new,dummy,refresh,listener,boolean,immediate,listeners,add,or,notify,index,get,translog,location,listener,if,immediate,assert,not,null,listener,forced,refresh,get,else,assert,busy,assert,not,null,listener,forced,refresh,get,assert,false,listener,forced,refresh,get,listener,assert,no,error,finally,run,set,false,refresher,join
RefreshListenersTests -> public void testConcurrentRefresh() throws Exception;1546011771;Attempts to add a listener at the same time as a refresh occurs by having a background thread force a refresh as fast as it can while_adding listeners. This can catch the situation where a refresh happens right as the listener is being added such that the listener_misses the refresh and has to catch the next one. If the listener wasn't able to properly catch the next one then this would fail.;public void testConcurrentRefresh() throws Exception {_        AtomicBoolean run = new AtomicBoolean(true)__        Thread refresher = new Thread(() -> {_            while (run.get()) {_                engine.refresh("test")__            }_        })__        refresher.start()__        try {_            for (int i = 0_ i < 1000_ i++) {_                Engine.IndexResult index = index("1")__                DummyRefreshListener listener = new DummyRefreshListener()__                boolean immediate = listeners.addOrNotify(index.getTranslogLocation(), listener)__                if (immediate) {_                    assertNotNull(listener.forcedRefresh.get())__                } else {_                    assertBusy(() -> assertNotNull(listener.forcedRefresh.get()))__                }_                assertFalse(listener.forcedRefresh.get())__                listener.assertNoError()__            }_        } finally {_            run.set(false)__            refresher.join()__        }_    };attempts,to,add,a,listener,at,the,same,time,as,a,refresh,occurs,by,having,a,background,thread,force,a,refresh,as,fast,as,it,can,while,adding,listeners,this,can,catch,the,situation,where,a,refresh,happens,right,as,the,listener,is,being,added,such,that,the,listener,misses,the,refresh,and,has,to,catch,the,next,one,if,the,listener,wasn,t,able,to,properly,catch,the,next,one,then,this,would,fail;public,void,test,concurrent,refresh,throws,exception,atomic,boolean,run,new,atomic,boolean,true,thread,refresher,new,thread,while,run,get,engine,refresh,test,refresher,start,try,for,int,i,0,i,1000,i,engine,index,result,index,index,1,dummy,refresh,listener,listener,new,dummy,refresh,listener,boolean,immediate,listeners,add,or,notify,index,get,translog,location,listener,if,immediate,assert,not,null,listener,forced,refresh,get,else,assert,busy,assert,not,null,listener,forced,refresh,get,assert,false,listener,forced,refresh,get,listener,assert,no,error,finally,run,set,false,refresher,join
RefreshListenersTests -> public void testConcurrentRefresh() throws Exception;1546875837;Attempts to add a listener at the same time as a refresh occurs by having a background thread force a refresh as fast as it can while_adding listeners. This can catch the situation where a refresh happens right as the listener is being added such that the listener_misses the refresh and has to catch the next one. If the listener wasn't able to properly catch the next one then this would fail.;public void testConcurrentRefresh() throws Exception {_        AtomicBoolean run = new AtomicBoolean(true)__        Thread refresher = new Thread(() -> {_            while (run.get()) {_                engine.refresh("test")__            }_        })__        refresher.start()__        try {_            for (int i = 0_ i < 1000_ i++) {_                Engine.IndexResult index = index("1")__                DummyRefreshListener listener = new DummyRefreshListener()__                boolean immediate = listeners.addOrNotify(index.getTranslogLocation(), listener)__                if (immediate) {_                    assertNotNull(listener.forcedRefresh.get())__                } else {_                    assertBusy(() -> assertNotNull(listener.forcedRefresh.get()))__                }_                assertFalse(listener.forcedRefresh.get())__                listener.assertNoError()__            }_        } finally {_            run.set(false)__            refresher.join()__        }_    };attempts,to,add,a,listener,at,the,same,time,as,a,refresh,occurs,by,having,a,background,thread,force,a,refresh,as,fast,as,it,can,while,adding,listeners,this,can,catch,the,situation,where,a,refresh,happens,right,as,the,listener,is,being,added,such,that,the,listener,misses,the,refresh,and,has,to,catch,the,next,one,if,the,listener,wasn,t,able,to,properly,catch,the,next,one,then,this,would,fail;public,void,test,concurrent,refresh,throws,exception,atomic,boolean,run,new,atomic,boolean,true,thread,refresher,new,thread,while,run,get,engine,refresh,test,refresher,start,try,for,int,i,0,i,1000,i,engine,index,result,index,index,1,dummy,refresh,listener,listener,new,dummy,refresh,listener,boolean,immediate,listeners,add,or,notify,index,get,translog,location,listener,if,immediate,assert,not,null,listener,forced,refresh,get,else,assert,busy,assert,not,null,listener,forced,refresh,get,assert,false,listener,forced,refresh,get,listener,assert,no,error,finally,run,set,false,refresher,join
RefreshListenersTests -> public void testConcurrentRefresh() throws Exception;1547198139;Attempts to add a listener at the same time as a refresh occurs by having a background thread force a refresh as fast as it can while_adding listeners. This can catch the situation where a refresh happens right as the listener is being added such that the listener_misses the refresh and has to catch the next one. If the listener wasn't able to properly catch the next one then this would fail.;public void testConcurrentRefresh() throws Exception {_        AtomicBoolean run = new AtomicBoolean(true)__        Thread refresher = new Thread(() -> {_            while (run.get()) {_                engine.refresh("test")__            }_        })__        refresher.start()__        try {_            for (int i = 0_ i < 1000_ i++) {_                Engine.IndexResult index = index("1")__                DummyRefreshListener listener = new DummyRefreshListener()__                boolean immediate = listeners.addOrNotify(index.getTranslogLocation(), listener)__                if (immediate) {_                    assertNotNull(listener.forcedRefresh.get())__                } else {_                    assertBusy(() -> assertNotNull(listener.forcedRefresh.get()), 1, TimeUnit.MINUTES)__                }_                assertFalse(listener.forcedRefresh.get())__                listener.assertNoError()__            }_        } finally {_            run.set(false)__            refresher.join()__        }_    };attempts,to,add,a,listener,at,the,same,time,as,a,refresh,occurs,by,having,a,background,thread,force,a,refresh,as,fast,as,it,can,while,adding,listeners,this,can,catch,the,situation,where,a,refresh,happens,right,as,the,listener,is,being,added,such,that,the,listener,misses,the,refresh,and,has,to,catch,the,next,one,if,the,listener,wasn,t,able,to,properly,catch,the,next,one,then,this,would,fail;public,void,test,concurrent,refresh,throws,exception,atomic,boolean,run,new,atomic,boolean,true,thread,refresher,new,thread,while,run,get,engine,refresh,test,refresher,start,try,for,int,i,0,i,1000,i,engine,index,result,index,index,1,dummy,refresh,listener,listener,new,dummy,refresh,listener,boolean,immediate,listeners,add,or,notify,index,get,translog,location,listener,if,immediate,assert,not,null,listener,forced,refresh,get,else,assert,busy,assert,not,null,listener,forced,refresh,get,1,time,unit,minutes,assert,false,listener,forced,refresh,get,listener,assert,no,error,finally,run,set,false,refresher,join
RefreshListenersTests -> public void testConcurrentRefresh() throws Exception;1549059559;Attempts to add a listener at the same time as a refresh occurs by having a background thread force a refresh as fast as it can while_adding listeners. This can catch the situation where a refresh happens right as the listener is being added such that the listener_misses the refresh and has to catch the next one. If the listener wasn't able to properly catch the next one then this would fail.;public void testConcurrentRefresh() throws Exception {_        AtomicBoolean run = new AtomicBoolean(true)__        Thread refresher = new Thread(() -> {_            while (run.get()) {_                engine.refresh("test")__            }_        })__        refresher.start()__        try {_            for (int i = 0_ i < 1000_ i++) {_                Engine.IndexResult index = index("1")__                DummyRefreshListener listener = new DummyRefreshListener()__                boolean immediate = listeners.addOrNotify(index.getTranslogLocation(), listener)__                if (immediate) {_                    assertNotNull(listener.forcedRefresh.get())__                } else {_                    assertBusy(() -> assertNotNull(listener.forcedRefresh.get()), 1, TimeUnit.MINUTES)__                }_                assertFalse(listener.forcedRefresh.get())__                listener.assertNoError()__            }_        } finally {_            run.set(false)__            refresher.join()__        }_    };attempts,to,add,a,listener,at,the,same,time,as,a,refresh,occurs,by,having,a,background,thread,force,a,refresh,as,fast,as,it,can,while,adding,listeners,this,can,catch,the,situation,where,a,refresh,happens,right,as,the,listener,is,being,added,such,that,the,listener,misses,the,refresh,and,has,to,catch,the,next,one,if,the,listener,wasn,t,able,to,properly,catch,the,next,one,then,this,would,fail;public,void,test,concurrent,refresh,throws,exception,atomic,boolean,run,new,atomic,boolean,true,thread,refresher,new,thread,while,run,get,engine,refresh,test,refresher,start,try,for,int,i,0,i,1000,i,engine,index,result,index,index,1,dummy,refresh,listener,listener,new,dummy,refresh,listener,boolean,immediate,listeners,add,or,notify,index,get,translog,location,listener,if,immediate,assert,not,null,listener,forced,refresh,get,else,assert,busy,assert,not,null,listener,forced,refresh,get,1,time,unit,minutes,assert,false,listener,forced,refresh,get,listener,assert,no,error,finally,run,set,false,refresher,join
RefreshListenersTests -> public void testLotsOfThreads() throws Exception;1524684173;Uses a bunch of threads to index, wait for refresh, and non-realtime get documents to validate that they are visible after waiting_regardless of what crazy sequence of events causes the refresh listener to fire.;public void testLotsOfThreads() throws Exception {_        int threadCount = between(3, 10)__        maxListeners = between(1, threadCount * 2)___        _        Cancellable refresher = threadPool.scheduleWithFixedDelay(() -> engine.refresh("because test"), timeValueMillis(100), Names.SAME)___        _        Thread[] indexers = new Thread[threadCount]__        for (int thread = 0_ thread < threadCount_ thread++) {_            final String threadId = String.format(Locale.ROOT, "%04d", thread)__            indexers[thread] = new Thread(() -> {_                for (int iteration = 1_ iteration <= 50_ iteration++) {_                    try {_                        String testFieldValue = String.format(Locale.ROOT, "%s%04d", threadId, iteration)__                        Engine.IndexResult index = index(threadId, testFieldValue)__                        assertEquals(iteration, index.getVersion())___                        DummyRefreshListener listener = new DummyRefreshListener()__                        listeners.addOrNotify(index.getTranslogLocation(), listener)__                        assertBusy(() -> assertNotNull("listener never called", listener.forcedRefresh.get()))__                        if (threadCount < maxListeners) {_                            assertFalse(listener.forcedRefresh.get())__                        }_                        listener.assertNoError()___                        Engine.Get get = new Engine.Get(false, false, "test", threadId, new Term(IdFieldMapper.NAME, threadId))__                        try (Engine.GetResult getResult = engine.get(get, engine::acquireSearcher)) {_                            assertTrue("document not found", getResult.exists())__                            assertEquals(iteration, getResult.version())__                            SingleFieldsVisitor visitor = new SingleFieldsVisitor("test")__                            getResult.docIdAndVersion().reader.document(getResult.docIdAndVersion().docId, visitor)__                            assertEquals(Arrays.asList(testFieldValue), visitor.fields().get("test"))__                        }_                    } catch (Exception t) {_                        throw new RuntimeException("failure on the [" + iteration + "] iteration of thread [" + threadId + "]", t)__                    }_                }_            })__            indexers[thread].start()__        }__        for (Thread indexer: indexers) {_            indexer.join()__        }_        refresher.cancel()__    };uses,a,bunch,of,threads,to,index,wait,for,refresh,and,non,realtime,get,documents,to,validate,that,they,are,visible,after,waiting,regardless,of,what,crazy,sequence,of,events,causes,the,refresh,listener,to,fire;public,void,test,lots,of,threads,throws,exception,int,thread,count,between,3,10,max,listeners,between,1,thread,count,2,cancellable,refresher,thread,pool,schedule,with,fixed,delay,engine,refresh,because,test,time,value,millis,100,names,same,thread,indexers,new,thread,thread,count,for,int,thread,0,thread,thread,count,thread,final,string,thread,id,string,format,locale,root,04d,thread,indexers,thread,new,thread,for,int,iteration,1,iteration,50,iteration,try,string,test,field,value,string,format,locale,root,s,04d,thread,id,iteration,engine,index,result,index,index,thread,id,test,field,value,assert,equals,iteration,index,get,version,dummy,refresh,listener,listener,new,dummy,refresh,listener,listeners,add,or,notify,index,get,translog,location,listener,assert,busy,assert,not,null,listener,never,called,listener,forced,refresh,get,if,thread,count,max,listeners,assert,false,listener,forced,refresh,get,listener,assert,no,error,engine,get,get,new,engine,get,false,false,test,thread,id,new,term,id,field,mapper,name,thread,id,try,engine,get,result,get,result,engine,get,get,engine,acquire,searcher,assert,true,document,not,found,get,result,exists,assert,equals,iteration,get,result,version,single,fields,visitor,visitor,new,single,fields,visitor,test,get,result,doc,id,and,version,reader,document,get,result,doc,id,and,version,doc,id,visitor,assert,equals,arrays,as,list,test,field,value,visitor,fields,get,test,catch,exception,t,throw,new,runtime,exception,failure,on,the,iteration,iteration,of,thread,thread,id,t,indexers,thread,start,for,thread,indexer,indexers,indexer,join,refresher,cancel
RefreshListenersTests -> public void testLotsOfThreads() throws Exception;1535046779;Uses a bunch of threads to index, wait for refresh, and non-realtime get documents to validate that they are visible after waiting_regardless of what crazy sequence of events causes the refresh listener to fire.;public void testLotsOfThreads() throws Exception {_        int threadCount = between(3, 10)__        maxListeners = between(1, threadCount * 2)___        _        Cancellable refresher = threadPool.scheduleWithFixedDelay(() -> engine.refresh("because test"), timeValueMillis(100), Names.SAME)___        _        Thread[] indexers = new Thread[threadCount]__        for (int thread = 0_ thread < threadCount_ thread++) {_            final String threadId = String.format(Locale.ROOT, "%04d", thread)__            indexers[thread] = new Thread(() -> {_                for (int iteration = 1_ iteration <= 50_ iteration++) {_                    try {_                        String testFieldValue = String.format(Locale.ROOT, "%s%04d", threadId, iteration)__                        Engine.IndexResult index = index(threadId, testFieldValue)__                        assertEquals(iteration, index.getVersion())___                        DummyRefreshListener listener = new DummyRefreshListener()__                        listeners.addOrNotify(index.getTranslogLocation(), listener)__                        assertBusy(() -> assertNotNull("listener never called", listener.forcedRefresh.get()))__                        if (threadCount < maxListeners) {_                            assertFalse(listener.forcedRefresh.get())__                        }_                        listener.assertNoError()___                        Engine.Get get = new Engine.Get(false, false, "test", threadId, new Term(IdFieldMapper.NAME, threadId))__                        try (Engine.GetResult getResult = engine.get(get, engine::acquireSearcher)) {_                            assertTrue("document not found", getResult.exists())__                            assertEquals(iteration, getResult.version())__                            SingleFieldsVisitor visitor = new SingleFieldsVisitor("test")__                            getResult.docIdAndVersion().reader.document(getResult.docIdAndVersion().docId, visitor)__                            assertEquals(Arrays.asList(testFieldValue), visitor.fields().get("test"))__                        }_                    } catch (Exception t) {_                        throw new RuntimeException("failure on the [" + iteration + "] iteration of thread [" + threadId + "]", t)__                    }_                }_            })__            indexers[thread].start()__        }__        for (Thread indexer: indexers) {_            indexer.join()__        }_        refresher.cancel()__    };uses,a,bunch,of,threads,to,index,wait,for,refresh,and,non,realtime,get,documents,to,validate,that,they,are,visible,after,waiting,regardless,of,what,crazy,sequence,of,events,causes,the,refresh,listener,to,fire;public,void,test,lots,of,threads,throws,exception,int,thread,count,between,3,10,max,listeners,between,1,thread,count,2,cancellable,refresher,thread,pool,schedule,with,fixed,delay,engine,refresh,because,test,time,value,millis,100,names,same,thread,indexers,new,thread,thread,count,for,int,thread,0,thread,thread,count,thread,final,string,thread,id,string,format,locale,root,04d,thread,indexers,thread,new,thread,for,int,iteration,1,iteration,50,iteration,try,string,test,field,value,string,format,locale,root,s,04d,thread,id,iteration,engine,index,result,index,index,thread,id,test,field,value,assert,equals,iteration,index,get,version,dummy,refresh,listener,listener,new,dummy,refresh,listener,listeners,add,or,notify,index,get,translog,location,listener,assert,busy,assert,not,null,listener,never,called,listener,forced,refresh,get,if,thread,count,max,listeners,assert,false,listener,forced,refresh,get,listener,assert,no,error,engine,get,get,new,engine,get,false,false,test,thread,id,new,term,id,field,mapper,name,thread,id,try,engine,get,result,get,result,engine,get,get,engine,acquire,searcher,assert,true,document,not,found,get,result,exists,assert,equals,iteration,get,result,version,single,fields,visitor,visitor,new,single,fields,visitor,test,get,result,doc,id,and,version,reader,document,get,result,doc,id,and,version,doc,id,visitor,assert,equals,arrays,as,list,test,field,value,visitor,fields,get,test,catch,exception,t,throw,new,runtime,exception,failure,on,the,iteration,iteration,of,thread,thread,id,t,indexers,thread,start,for,thread,indexer,indexers,indexer,join,refresher,cancel
RefreshListenersTests -> public void testLotsOfThreads() throws Exception;1535723122;Uses a bunch of threads to index, wait for refresh, and non-realtime get documents to validate that they are visible after waiting_regardless of what crazy sequence of events causes the refresh listener to fire.;public void testLotsOfThreads() throws Exception {_        int threadCount = between(3, 10)__        maxListeners = between(1, threadCount * 2)___        _        Cancellable refresher = threadPool.scheduleWithFixedDelay(() -> engine.refresh("because test"), timeValueMillis(100), Names.SAME)___        _        Thread[] indexers = new Thread[threadCount]__        for (int thread = 0_ thread < threadCount_ thread++) {_            final String threadId = String.format(Locale.ROOT, "%04d", thread)__            indexers[thread] = new Thread(() -> {_                for (int iteration = 1_ iteration <= 50_ iteration++) {_                    try {_                        String testFieldValue = String.format(Locale.ROOT, "%s%04d", threadId, iteration)__                        Engine.IndexResult index = index(threadId, testFieldValue)__                        assertEquals(iteration, index.getVersion())___                        DummyRefreshListener listener = new DummyRefreshListener()__                        listeners.addOrNotify(index.getTranslogLocation(), listener)__                        assertBusy(() -> assertNotNull("listener never called", listener.forcedRefresh.get()))__                        if (threadCount < maxListeners) {_                            assertFalse(listener.forcedRefresh.get())__                        }_                        listener.assertNoError()___                        Engine.Get get = new Engine.Get(false, false, "test", threadId, new Term(IdFieldMapper.NAME, threadId))__                        try (Engine.GetResult getResult = engine.get(get, engine::acquireSearcher)) {_                            assertTrue("document not found", getResult.exists())__                            assertEquals(iteration, getResult.version())__                            SingleFieldsVisitor visitor = new SingleFieldsVisitor("test")__                            getResult.docIdAndVersion().reader.document(getResult.docIdAndVersion().docId, visitor)__                            assertEquals(Arrays.asList(testFieldValue), visitor.fields().get("test"))__                        }_                    } catch (Exception t) {_                        throw new RuntimeException("failure on the [" + iteration + "] iteration of thread [" + threadId + "]", t)__                    }_                }_            })__            indexers[thread].start()__        }__        for (Thread indexer: indexers) {_            indexer.join()__        }_        refresher.cancel()__    };uses,a,bunch,of,threads,to,index,wait,for,refresh,and,non,realtime,get,documents,to,validate,that,they,are,visible,after,waiting,regardless,of,what,crazy,sequence,of,events,causes,the,refresh,listener,to,fire;public,void,test,lots,of,threads,throws,exception,int,thread,count,between,3,10,max,listeners,between,1,thread,count,2,cancellable,refresher,thread,pool,schedule,with,fixed,delay,engine,refresh,because,test,time,value,millis,100,names,same,thread,indexers,new,thread,thread,count,for,int,thread,0,thread,thread,count,thread,final,string,thread,id,string,format,locale,root,04d,thread,indexers,thread,new,thread,for,int,iteration,1,iteration,50,iteration,try,string,test,field,value,string,format,locale,root,s,04d,thread,id,iteration,engine,index,result,index,index,thread,id,test,field,value,assert,equals,iteration,index,get,version,dummy,refresh,listener,listener,new,dummy,refresh,listener,listeners,add,or,notify,index,get,translog,location,listener,assert,busy,assert,not,null,listener,never,called,listener,forced,refresh,get,if,thread,count,max,listeners,assert,false,listener,forced,refresh,get,listener,assert,no,error,engine,get,get,new,engine,get,false,false,test,thread,id,new,term,id,field,mapper,name,thread,id,try,engine,get,result,get,result,engine,get,get,engine,acquire,searcher,assert,true,document,not,found,get,result,exists,assert,equals,iteration,get,result,version,single,fields,visitor,visitor,new,single,fields,visitor,test,get,result,doc,id,and,version,reader,document,get,result,doc,id,and,version,doc,id,visitor,assert,equals,arrays,as,list,test,field,value,visitor,fields,get,test,catch,exception,t,throw,new,runtime,exception,failure,on,the,iteration,iteration,of,thread,thread,id,t,indexers,thread,start,for,thread,indexer,indexers,indexer,join,refresher,cancel
RefreshListenersTests -> public void testLotsOfThreads() throws Exception;1536314350;Uses a bunch of threads to index, wait for refresh, and non-realtime get documents to validate that they are visible after waiting_regardless of what crazy sequence of events causes the refresh listener to fire.;public void testLotsOfThreads() throws Exception {_        int threadCount = between(3, 10)__        maxListeners = between(1, threadCount * 2)___        _        Cancellable refresher = threadPool.scheduleWithFixedDelay(() -> engine.refresh("because test"), timeValueMillis(100), Names.SAME)___        _        Thread[] indexers = new Thread[threadCount]__        for (int thread = 0_ thread < threadCount_ thread++) {_            final String threadId = String.format(Locale.ROOT, "%04d", thread)__            indexers[thread] = new Thread(() -> {_                for (int iteration = 1_ iteration <= 50_ iteration++) {_                    try {_                        String testFieldValue = String.format(Locale.ROOT, "%s%04d", threadId, iteration)__                        Engine.IndexResult index = index(threadId, testFieldValue)__                        assertEquals(iteration, index.getVersion())___                        DummyRefreshListener listener = new DummyRefreshListener()__                        listeners.addOrNotify(index.getTranslogLocation(), listener)__                        assertBusy(() -> assertNotNull("listener never called", listener.forcedRefresh.get()))__                        if (threadCount < maxListeners) {_                            assertFalse(listener.forcedRefresh.get())__                        }_                        listener.assertNoError()___                        Engine.Get get = new Engine.Get(false, false, "test", threadId, new Term(IdFieldMapper.NAME, threadId))__                        try (Engine.GetResult getResult = engine.get(get, engine::acquireSearcher)) {_                            assertTrue("document not found", getResult.exists())__                            assertEquals(iteration, getResult.version())__                            SingleFieldsVisitor visitor = new SingleFieldsVisitor("test")__                            getResult.docIdAndVersion().reader.document(getResult.docIdAndVersion().docId, visitor)__                            assertEquals(Arrays.asList(testFieldValue), visitor.fields().get("test"))__                        }_                    } catch (Exception t) {_                        throw new RuntimeException("failure on the [" + iteration + "] iteration of thread [" + threadId + "]", t)__                    }_                }_            })__            indexers[thread].start()__        }__        for (Thread indexer: indexers) {_            indexer.join()__        }_        refresher.cancel()__    };uses,a,bunch,of,threads,to,index,wait,for,refresh,and,non,realtime,get,documents,to,validate,that,they,are,visible,after,waiting,regardless,of,what,crazy,sequence,of,events,causes,the,refresh,listener,to,fire;public,void,test,lots,of,threads,throws,exception,int,thread,count,between,3,10,max,listeners,between,1,thread,count,2,cancellable,refresher,thread,pool,schedule,with,fixed,delay,engine,refresh,because,test,time,value,millis,100,names,same,thread,indexers,new,thread,thread,count,for,int,thread,0,thread,thread,count,thread,final,string,thread,id,string,format,locale,root,04d,thread,indexers,thread,new,thread,for,int,iteration,1,iteration,50,iteration,try,string,test,field,value,string,format,locale,root,s,04d,thread,id,iteration,engine,index,result,index,index,thread,id,test,field,value,assert,equals,iteration,index,get,version,dummy,refresh,listener,listener,new,dummy,refresh,listener,listeners,add,or,notify,index,get,translog,location,listener,assert,busy,assert,not,null,listener,never,called,listener,forced,refresh,get,if,thread,count,max,listeners,assert,false,listener,forced,refresh,get,listener,assert,no,error,engine,get,get,new,engine,get,false,false,test,thread,id,new,term,id,field,mapper,name,thread,id,try,engine,get,result,get,result,engine,get,get,engine,acquire,searcher,assert,true,document,not,found,get,result,exists,assert,equals,iteration,get,result,version,single,fields,visitor,visitor,new,single,fields,visitor,test,get,result,doc,id,and,version,reader,document,get,result,doc,id,and,version,doc,id,visitor,assert,equals,arrays,as,list,test,field,value,visitor,fields,get,test,catch,exception,t,throw,new,runtime,exception,failure,on,the,iteration,iteration,of,thread,thread,id,t,indexers,thread,start,for,thread,indexer,indexers,indexer,join,refresher,cancel
RefreshListenersTests -> public void testLotsOfThreads() throws Exception;1536611444;Uses a bunch of threads to index, wait for refresh, and non-realtime get documents to validate that they are visible after waiting_regardless of what crazy sequence of events causes the refresh listener to fire.;public void testLotsOfThreads() throws Exception {_        int threadCount = between(3, 10)__        maxListeners = between(1, threadCount * 2)___        _        Cancellable refresher = threadPool.scheduleWithFixedDelay(() -> engine.refresh("because test"), timeValueMillis(100), Names.SAME)___        _        Thread[] indexers = new Thread[threadCount]__        for (int thread = 0_ thread < threadCount_ thread++) {_            final String threadId = String.format(Locale.ROOT, "%04d", thread)__            indexers[thread] = new Thread(() -> {_                for (int iteration = 1_ iteration <= 50_ iteration++) {_                    try {_                        String testFieldValue = String.format(Locale.ROOT, "%s%04d", threadId, iteration)__                        Engine.IndexResult index = index(threadId, testFieldValue)__                        assertEquals(iteration, index.getVersion())___                        DummyRefreshListener listener = new DummyRefreshListener()__                        listeners.addOrNotify(index.getTranslogLocation(), listener)__                        assertBusy(() -> assertNotNull("listener never called", listener.forcedRefresh.get()))__                        if (threadCount < maxListeners) {_                            assertFalse(listener.forcedRefresh.get())__                        }_                        listener.assertNoError()___                        Engine.Get get = new Engine.Get(false, false, "test", threadId, new Term(IdFieldMapper.NAME, threadId))__                        try (Engine.GetResult getResult = engine.get(get, engine::acquireSearcher)) {_                            assertTrue("document not found", getResult.exists())__                            assertEquals(iteration, getResult.version())__                            SingleFieldsVisitor visitor = new SingleFieldsVisitor("test")__                            getResult.docIdAndVersion().reader.document(getResult.docIdAndVersion().docId, visitor)__                            assertEquals(Arrays.asList(testFieldValue), visitor.fields().get("test"))__                        }_                    } catch (Exception t) {_                        throw new RuntimeException("failure on the [" + iteration + "] iteration of thread [" + threadId + "]", t)__                    }_                }_            })__            indexers[thread].start()__        }__        for (Thread indexer: indexers) {_            indexer.join()__        }_        refresher.cancel()__    };uses,a,bunch,of,threads,to,index,wait,for,refresh,and,non,realtime,get,documents,to,validate,that,they,are,visible,after,waiting,regardless,of,what,crazy,sequence,of,events,causes,the,refresh,listener,to,fire;public,void,test,lots,of,threads,throws,exception,int,thread,count,between,3,10,max,listeners,between,1,thread,count,2,cancellable,refresher,thread,pool,schedule,with,fixed,delay,engine,refresh,because,test,time,value,millis,100,names,same,thread,indexers,new,thread,thread,count,for,int,thread,0,thread,thread,count,thread,final,string,thread,id,string,format,locale,root,04d,thread,indexers,thread,new,thread,for,int,iteration,1,iteration,50,iteration,try,string,test,field,value,string,format,locale,root,s,04d,thread,id,iteration,engine,index,result,index,index,thread,id,test,field,value,assert,equals,iteration,index,get,version,dummy,refresh,listener,listener,new,dummy,refresh,listener,listeners,add,or,notify,index,get,translog,location,listener,assert,busy,assert,not,null,listener,never,called,listener,forced,refresh,get,if,thread,count,max,listeners,assert,false,listener,forced,refresh,get,listener,assert,no,error,engine,get,get,new,engine,get,false,false,test,thread,id,new,term,id,field,mapper,name,thread,id,try,engine,get,result,get,result,engine,get,get,engine,acquire,searcher,assert,true,document,not,found,get,result,exists,assert,equals,iteration,get,result,version,single,fields,visitor,visitor,new,single,fields,visitor,test,get,result,doc,id,and,version,reader,document,get,result,doc,id,and,version,doc,id,visitor,assert,equals,arrays,as,list,test,field,value,visitor,fields,get,test,catch,exception,t,throw,new,runtime,exception,failure,on,the,iteration,iteration,of,thread,thread,id,t,indexers,thread,start,for,thread,indexer,indexers,indexer,join,refresher,cancel
RefreshListenersTests -> public void testLotsOfThreads() throws Exception;1537806831;Uses a bunch of threads to index, wait for refresh, and non-realtime get documents to validate that they are visible after waiting_regardless of what crazy sequence of events causes the refresh listener to fire.;public void testLotsOfThreads() throws Exception {_        int threadCount = between(3, 10)__        maxListeners = between(1, threadCount * 2)___        _        Cancellable refresher = threadPool.scheduleWithFixedDelay(() -> engine.refresh("because test"), timeValueMillis(100), Names.SAME)___        _        Thread[] indexers = new Thread[threadCount]__        for (int thread = 0_ thread < threadCount_ thread++) {_            final String threadId = String.format(Locale.ROOT, "%04d", thread)__            indexers[thread] = new Thread(() -> {_                for (int iteration = 1_ iteration <= 50_ iteration++) {_                    try {_                        String testFieldValue = String.format(Locale.ROOT, "%s%04d", threadId, iteration)__                        Engine.IndexResult index = index(threadId, testFieldValue)__                        assertEquals(iteration, index.getVersion())___                        DummyRefreshListener listener = new DummyRefreshListener()__                        listeners.addOrNotify(index.getTranslogLocation(), listener)__                        assertBusy(() -> assertNotNull("listener never called", listener.forcedRefresh.get()))__                        if (threadCount < maxListeners) {_                            assertFalse(listener.forcedRefresh.get())__                        }_                        listener.assertNoError()___                        Engine.Get get = new Engine.Get(false, false, "test", threadId, new Term(IdFieldMapper.NAME, threadId))__                        try (Engine.GetResult getResult = engine.get(get, engine::acquireSearcher)) {_                            assertTrue("document not found", getResult.exists())__                            assertEquals(iteration, getResult.version())__                            SingleFieldsVisitor visitor = new SingleFieldsVisitor("test")__                            getResult.docIdAndVersion().reader.document(getResult.docIdAndVersion().docId, visitor)__                            assertEquals(Arrays.asList(testFieldValue), visitor.fields().get("test"))__                        }_                    } catch (Exception t) {_                        throw new RuntimeException("failure on the [" + iteration + "] iteration of thread [" + threadId + "]", t)__                    }_                }_            })__            indexers[thread].start()__        }__        for (Thread indexer: indexers) {_            indexer.join()__        }_        refresher.cancel()__    };uses,a,bunch,of,threads,to,index,wait,for,refresh,and,non,realtime,get,documents,to,validate,that,they,are,visible,after,waiting,regardless,of,what,crazy,sequence,of,events,causes,the,refresh,listener,to,fire;public,void,test,lots,of,threads,throws,exception,int,thread,count,between,3,10,max,listeners,between,1,thread,count,2,cancellable,refresher,thread,pool,schedule,with,fixed,delay,engine,refresh,because,test,time,value,millis,100,names,same,thread,indexers,new,thread,thread,count,for,int,thread,0,thread,thread,count,thread,final,string,thread,id,string,format,locale,root,04d,thread,indexers,thread,new,thread,for,int,iteration,1,iteration,50,iteration,try,string,test,field,value,string,format,locale,root,s,04d,thread,id,iteration,engine,index,result,index,index,thread,id,test,field,value,assert,equals,iteration,index,get,version,dummy,refresh,listener,listener,new,dummy,refresh,listener,listeners,add,or,notify,index,get,translog,location,listener,assert,busy,assert,not,null,listener,never,called,listener,forced,refresh,get,if,thread,count,max,listeners,assert,false,listener,forced,refresh,get,listener,assert,no,error,engine,get,get,new,engine,get,false,false,test,thread,id,new,term,id,field,mapper,name,thread,id,try,engine,get,result,get,result,engine,get,get,engine,acquire,searcher,assert,true,document,not,found,get,result,exists,assert,equals,iteration,get,result,version,single,fields,visitor,visitor,new,single,fields,visitor,test,get,result,doc,id,and,version,reader,document,get,result,doc,id,and,version,doc,id,visitor,assert,equals,arrays,as,list,test,field,value,visitor,fields,get,test,catch,exception,t,throw,new,runtime,exception,failure,on,the,iteration,iteration,of,thread,thread,id,t,indexers,thread,start,for,thread,indexer,indexers,indexer,join,refresher,cancel
RefreshListenersTests -> public void testLotsOfThreads() throws Exception;1538067637;Uses a bunch of threads to index, wait for refresh, and non-realtime get documents to validate that they are visible after waiting_regardless of what crazy sequence of events causes the refresh listener to fire.;public void testLotsOfThreads() throws Exception {_        int threadCount = between(3, 10)__        maxListeners = between(1, threadCount * 2)___        _        Cancellable refresher = threadPool.scheduleWithFixedDelay(() -> engine.refresh("because test"), timeValueMillis(100), Names.SAME)___        _        Thread[] indexers = new Thread[threadCount]__        for (int thread = 0_ thread < threadCount_ thread++) {_            final String threadId = String.format(Locale.ROOT, "%04d", thread)__            indexers[thread] = new Thread(() -> {_                for (int iteration = 1_ iteration <= 50_ iteration++) {_                    try {_                        String testFieldValue = String.format(Locale.ROOT, "%s%04d", threadId, iteration)__                        Engine.IndexResult index = index(threadId, testFieldValue)__                        assertEquals(iteration, index.getVersion())___                        DummyRefreshListener listener = new DummyRefreshListener()__                        listeners.addOrNotify(index.getTranslogLocation(), listener)__                        assertBusy(() -> assertNotNull("listener never called", listener.forcedRefresh.get()))__                        if (threadCount < maxListeners) {_                            assertFalse(listener.forcedRefresh.get())__                        }_                        listener.assertNoError()___                        Engine.Get get = new Engine.Get(false, false, "test", threadId, new Term(IdFieldMapper.NAME, threadId))__                        try (Engine.GetResult getResult = engine.get(get, engine::acquireSearcher)) {_                            assertTrue("document not found", getResult.exists())__                            assertEquals(iteration, getResult.version())__                            org.apache.lucene.document.Document document =_                                    getResult.docIdAndVersion().reader.document(getResult.docIdAndVersion().docId)__                            assertEquals(new String[] {testFieldValue}, document.getValues("test"))__                        }_                    } catch (Exception t) {_                        throw new RuntimeException("failure on the [" + iteration + "] iteration of thread [" + threadId + "]", t)__                    }_                }_            })__            indexers[thread].start()__        }__        for (Thread indexer: indexers) {_            indexer.join()__        }_        refresher.cancel()__    };uses,a,bunch,of,threads,to,index,wait,for,refresh,and,non,realtime,get,documents,to,validate,that,they,are,visible,after,waiting,regardless,of,what,crazy,sequence,of,events,causes,the,refresh,listener,to,fire;public,void,test,lots,of,threads,throws,exception,int,thread,count,between,3,10,max,listeners,between,1,thread,count,2,cancellable,refresher,thread,pool,schedule,with,fixed,delay,engine,refresh,because,test,time,value,millis,100,names,same,thread,indexers,new,thread,thread,count,for,int,thread,0,thread,thread,count,thread,final,string,thread,id,string,format,locale,root,04d,thread,indexers,thread,new,thread,for,int,iteration,1,iteration,50,iteration,try,string,test,field,value,string,format,locale,root,s,04d,thread,id,iteration,engine,index,result,index,index,thread,id,test,field,value,assert,equals,iteration,index,get,version,dummy,refresh,listener,listener,new,dummy,refresh,listener,listeners,add,or,notify,index,get,translog,location,listener,assert,busy,assert,not,null,listener,never,called,listener,forced,refresh,get,if,thread,count,max,listeners,assert,false,listener,forced,refresh,get,listener,assert,no,error,engine,get,get,new,engine,get,false,false,test,thread,id,new,term,id,field,mapper,name,thread,id,try,engine,get,result,get,result,engine,get,get,engine,acquire,searcher,assert,true,document,not,found,get,result,exists,assert,equals,iteration,get,result,version,org,apache,lucene,document,document,document,get,result,doc,id,and,version,reader,document,get,result,doc,id,and,version,doc,id,assert,equals,new,string,test,field,value,document,get,values,test,catch,exception,t,throw,new,runtime,exception,failure,on,the,iteration,iteration,of,thread,thread,id,t,indexers,thread,start,for,thread,indexer,indexers,indexer,join,refresher,cancel
RefreshListenersTests -> public void testLotsOfThreads() throws Exception;1543942400;Uses a bunch of threads to index, wait for refresh, and non-realtime get documents to validate that they are visible after waiting_regardless of what crazy sequence of events causes the refresh listener to fire.;public void testLotsOfThreads() throws Exception {_        int threadCount = between(3, 10)__        maxListeners = between(1, threadCount * 2)___        _        Cancellable refresher = threadPool.scheduleWithFixedDelay(() -> engine.refresh("because test"), timeValueMillis(100), Names.SAME)___        _        Thread[] indexers = new Thread[threadCount]__        for (int thread = 0_ thread < threadCount_ thread++) {_            final String threadId = String.format(Locale.ROOT, "%04d", thread)__            indexers[thread] = new Thread(() -> {_                for (int iteration = 1_ iteration <= 50_ iteration++) {_                    try {_                        String testFieldValue = String.format(Locale.ROOT, "%s%04d", threadId, iteration)__                        Engine.IndexResult index = index(threadId, testFieldValue)__                        assertEquals(iteration, index.getVersion())___                        DummyRefreshListener listener = new DummyRefreshListener()__                        listeners.addOrNotify(index.getTranslogLocation(), listener)__                        assertBusy(() -> assertNotNull("listener never called", listener.forcedRefresh.get()))__                        if (threadCount < maxListeners) {_                            assertFalse(listener.forcedRefresh.get())__                        }_                        listener.assertNoError()___                        Engine.Get get = new Engine.Get(false, false, "test", threadId, new Term(IdFieldMapper.NAME, threadId))__                        try (Engine.GetResult getResult = engine.get(get, engine::acquireSearcher)) {_                            assertTrue("document not found", getResult.exists())__                            assertEquals(iteration, getResult.version())__                            org.apache.lucene.document.Document document =_                                    getResult.docIdAndVersion().reader.document(getResult.docIdAndVersion().docId)__                            assertEquals(new String[] {testFieldValue}, document.getValues("test"))__                        }_                    } catch (Exception t) {_                        throw new RuntimeException("failure on the [" + iteration + "] iteration of thread [" + threadId + "]", t)__                    }_                }_            })__            indexers[thread].start()__        }__        for (Thread indexer: indexers) {_            indexer.join()__        }_        refresher.cancel()__    };uses,a,bunch,of,threads,to,index,wait,for,refresh,and,non,realtime,get,documents,to,validate,that,they,are,visible,after,waiting,regardless,of,what,crazy,sequence,of,events,causes,the,refresh,listener,to,fire;public,void,test,lots,of,threads,throws,exception,int,thread,count,between,3,10,max,listeners,between,1,thread,count,2,cancellable,refresher,thread,pool,schedule,with,fixed,delay,engine,refresh,because,test,time,value,millis,100,names,same,thread,indexers,new,thread,thread,count,for,int,thread,0,thread,thread,count,thread,final,string,thread,id,string,format,locale,root,04d,thread,indexers,thread,new,thread,for,int,iteration,1,iteration,50,iteration,try,string,test,field,value,string,format,locale,root,s,04d,thread,id,iteration,engine,index,result,index,index,thread,id,test,field,value,assert,equals,iteration,index,get,version,dummy,refresh,listener,listener,new,dummy,refresh,listener,listeners,add,or,notify,index,get,translog,location,listener,assert,busy,assert,not,null,listener,never,called,listener,forced,refresh,get,if,thread,count,max,listeners,assert,false,listener,forced,refresh,get,listener,assert,no,error,engine,get,get,new,engine,get,false,false,test,thread,id,new,term,id,field,mapper,name,thread,id,try,engine,get,result,get,result,engine,get,get,engine,acquire,searcher,assert,true,document,not,found,get,result,exists,assert,equals,iteration,get,result,version,org,apache,lucene,document,document,document,get,result,doc,id,and,version,reader,document,get,result,doc,id,and,version,doc,id,assert,equals,new,string,test,field,value,document,get,values,test,catch,exception,t,throw,new,runtime,exception,failure,on,the,iteration,iteration,of,thread,thread,id,t,indexers,thread,start,for,thread,indexer,indexers,indexer,join,refresher,cancel
RefreshListenersTests -> public void testLotsOfThreads() throws Exception;1546011771;Uses a bunch of threads to index, wait for refresh, and non-realtime get documents to validate that they are visible after waiting_regardless of what crazy sequence of events causes the refresh listener to fire.;public void testLotsOfThreads() throws Exception {_        int threadCount = between(3, 10)__        maxListeners = between(1, threadCount * 2)___        _        Cancellable refresher = threadPool.scheduleWithFixedDelay(() -> engine.refresh("because test"), timeValueMillis(100), Names.SAME)___        _        Thread[] indexers = new Thread[threadCount]__        for (int thread = 0_ thread < threadCount_ thread++) {_            final String threadId = String.format(Locale.ROOT, "%04d", thread)__            indexers[thread] = new Thread(() -> {_                for (int iteration = 1_ iteration <= 50_ iteration++) {_                    try {_                        String testFieldValue = String.format(Locale.ROOT, "%s%04d", threadId, iteration)__                        Engine.IndexResult index = index(threadId, testFieldValue)__                        assertEquals(iteration, index.getVersion())___                        DummyRefreshListener listener = new DummyRefreshListener()__                        listeners.addOrNotify(index.getTranslogLocation(), listener)__                        assertBusy(() -> assertNotNull("listener never called", listener.forcedRefresh.get()))__                        if (threadCount < maxListeners) {_                            assertFalse(listener.forcedRefresh.get())__                        }_                        listener.assertNoError()___                        Engine.Get get = new Engine.Get(false, false, "test", threadId, new Term(IdFieldMapper.NAME, threadId))__                        try (Engine.GetResult getResult = engine.get(get, engine::acquireSearcher)) {_                            assertTrue("document not found", getResult.exists())__                            assertEquals(iteration, getResult.version())__                            org.apache.lucene.document.Document document =_                                    getResult.docIdAndVersion().reader.document(getResult.docIdAndVersion().docId)__                            assertEquals(new String[] {testFieldValue}, document.getValues("test"))__                        }_                    } catch (Exception t) {_                        throw new RuntimeException("failure on the [" + iteration + "] iteration of thread [" + threadId + "]", t)__                    }_                }_            })__            indexers[thread].start()__        }__        for (Thread indexer: indexers) {_            indexer.join()__        }_        refresher.cancel()__    };uses,a,bunch,of,threads,to,index,wait,for,refresh,and,non,realtime,get,documents,to,validate,that,they,are,visible,after,waiting,regardless,of,what,crazy,sequence,of,events,causes,the,refresh,listener,to,fire;public,void,test,lots,of,threads,throws,exception,int,thread,count,between,3,10,max,listeners,between,1,thread,count,2,cancellable,refresher,thread,pool,schedule,with,fixed,delay,engine,refresh,because,test,time,value,millis,100,names,same,thread,indexers,new,thread,thread,count,for,int,thread,0,thread,thread,count,thread,final,string,thread,id,string,format,locale,root,04d,thread,indexers,thread,new,thread,for,int,iteration,1,iteration,50,iteration,try,string,test,field,value,string,format,locale,root,s,04d,thread,id,iteration,engine,index,result,index,index,thread,id,test,field,value,assert,equals,iteration,index,get,version,dummy,refresh,listener,listener,new,dummy,refresh,listener,listeners,add,or,notify,index,get,translog,location,listener,assert,busy,assert,not,null,listener,never,called,listener,forced,refresh,get,if,thread,count,max,listeners,assert,false,listener,forced,refresh,get,listener,assert,no,error,engine,get,get,new,engine,get,false,false,test,thread,id,new,term,id,field,mapper,name,thread,id,try,engine,get,result,get,result,engine,get,get,engine,acquire,searcher,assert,true,document,not,found,get,result,exists,assert,equals,iteration,get,result,version,org,apache,lucene,document,document,document,get,result,doc,id,and,version,reader,document,get,result,doc,id,and,version,doc,id,assert,equals,new,string,test,field,value,document,get,values,test,catch,exception,t,throw,new,runtime,exception,failure,on,the,iteration,iteration,of,thread,thread,id,t,indexers,thread,start,for,thread,indexer,indexers,indexer,join,refresher,cancel
RefreshListenersTests -> public void testLotsOfThreads() throws Exception;1546875837;Uses a bunch of threads to index, wait for refresh, and non-realtime get documents to validate that they are visible after waiting_regardless of what crazy sequence of events causes the refresh listener to fire.;public void testLotsOfThreads() throws Exception {_        int threadCount = between(3, 10)__        maxListeners = between(1, threadCount * 2)___        _        Cancellable refresher = threadPool.scheduleWithFixedDelay(() -> engine.refresh("because test"), timeValueMillis(100), Names.SAME)___        _        Thread[] indexers = new Thread[threadCount]__        for (int thread = 0_ thread < threadCount_ thread++) {_            final String threadId = String.format(Locale.ROOT, "%04d", thread)__            indexers[thread] = new Thread(() -> {_                for (int iteration = 1_ iteration <= 50_ iteration++) {_                    try {_                        String testFieldValue = String.format(Locale.ROOT, "%s%04d", threadId, iteration)__                        Engine.IndexResult index = index(threadId, testFieldValue)__                        assertEquals(iteration, index.getVersion())___                        DummyRefreshListener listener = new DummyRefreshListener()__                        listeners.addOrNotify(index.getTranslogLocation(), listener)__                        assertBusy(() -> assertNotNull("listener never called", listener.forcedRefresh.get()))__                        if (threadCount < maxListeners) {_                            assertFalse(listener.forcedRefresh.get())__                        }_                        listener.assertNoError()___                        Engine.Get get = new Engine.Get(false, false, "test", threadId, new Term(IdFieldMapper.NAME, threadId))__                        try (Engine.GetResult getResult = engine.get(get, engine::acquireSearcher)) {_                            assertTrue("document not found", getResult.exists())__                            assertEquals(iteration, getResult.version())__                            org.apache.lucene.document.Document document =_                                    getResult.docIdAndVersion().reader.document(getResult.docIdAndVersion().docId)__                            assertEquals(new String[] {testFieldValue}, document.getValues("test"))__                        }_                    } catch (Exception t) {_                        throw new RuntimeException("failure on the [" + iteration + "] iteration of thread [" + threadId + "]", t)__                    }_                }_            })__            indexers[thread].start()__        }__        for (Thread indexer: indexers) {_            indexer.join()__        }_        refresher.cancel()__    };uses,a,bunch,of,threads,to,index,wait,for,refresh,and,non,realtime,get,documents,to,validate,that,they,are,visible,after,waiting,regardless,of,what,crazy,sequence,of,events,causes,the,refresh,listener,to,fire;public,void,test,lots,of,threads,throws,exception,int,thread,count,between,3,10,max,listeners,between,1,thread,count,2,cancellable,refresher,thread,pool,schedule,with,fixed,delay,engine,refresh,because,test,time,value,millis,100,names,same,thread,indexers,new,thread,thread,count,for,int,thread,0,thread,thread,count,thread,final,string,thread,id,string,format,locale,root,04d,thread,indexers,thread,new,thread,for,int,iteration,1,iteration,50,iteration,try,string,test,field,value,string,format,locale,root,s,04d,thread,id,iteration,engine,index,result,index,index,thread,id,test,field,value,assert,equals,iteration,index,get,version,dummy,refresh,listener,listener,new,dummy,refresh,listener,listeners,add,or,notify,index,get,translog,location,listener,assert,busy,assert,not,null,listener,never,called,listener,forced,refresh,get,if,thread,count,max,listeners,assert,false,listener,forced,refresh,get,listener,assert,no,error,engine,get,get,new,engine,get,false,false,test,thread,id,new,term,id,field,mapper,name,thread,id,try,engine,get,result,get,result,engine,get,get,engine,acquire,searcher,assert,true,document,not,found,get,result,exists,assert,equals,iteration,get,result,version,org,apache,lucene,document,document,document,get,result,doc,id,and,version,reader,document,get,result,doc,id,and,version,doc,id,assert,equals,new,string,test,field,value,document,get,values,test,catch,exception,t,throw,new,runtime,exception,failure,on,the,iteration,iteration,of,thread,thread,id,t,indexers,thread,start,for,thread,indexer,indexers,indexer,join,refresher,cancel
RefreshListenersTests -> public void testLotsOfThreads() throws Exception;1547034201;Uses a bunch of threads to index, wait for refresh, and non-realtime get documents to validate that they are visible after waiting_regardless of what crazy sequence of events causes the refresh listener to fire.;public void testLotsOfThreads() throws Exception {_        int threadCount = between(3, 10)__        maxListeners = between(1, threadCount * 2)___        _        Cancellable refresher = threadPool.scheduleWithFixedDelay(() -> engine.refresh("because test"), timeValueMillis(100), Names.SAME)___        _        Thread[] indexers = new Thread[threadCount]__        for (int thread = 0_ thread < threadCount_ thread++) {_            final String threadId = String.format(Locale.ROOT, "%04d", thread)__            indexers[thread] = new Thread(() -> {_                for (int iteration = 1_ iteration <= 50_ iteration++) {_                    try {_                        String testFieldValue = String.format(Locale.ROOT, "%s%04d", threadId, iteration)__                        Engine.IndexResult index = index(threadId, testFieldValue)__                        assertEquals(iteration, index.getVersion())___                        DummyRefreshListener listener = new DummyRefreshListener()__                        listeners.addOrNotify(index.getTranslogLocation(), listener)__                        assertBusy(() -> assertNotNull("listener never called", listener.forcedRefresh.get()))__                        if (threadCount < maxListeners) {_                            assertFalse(listener.forcedRefresh.get())__                        }_                        listener.assertNoError()___                        Engine.Get get = new Engine.Get(false, false, "test", threadId, new Term(IdFieldMapper.NAME, threadId))__                        try (Engine.GetResult getResult = engine.get(get, engine::acquireSearcher)) {_                            assertTrue("document not found", getResult.exists())__                            assertEquals(iteration, getResult.version())__                            org.apache.lucene.document.Document document =_                                    getResult.docIdAndVersion().reader.document(getResult.docIdAndVersion().docId)__                            assertEquals(new String[] {testFieldValue}, document.getValues("test"))__                        }_                    } catch (Exception t) {_                        throw new RuntimeException("failure on the [" + iteration + "] iteration of thread [" + threadId + "]", t)__                    }_                }_            })__            indexers[thread].start()__        }__        for (Thread indexer: indexers) {_            indexer.join()__        }_        refresher.cancel()__    };uses,a,bunch,of,threads,to,index,wait,for,refresh,and,non,realtime,get,documents,to,validate,that,they,are,visible,after,waiting,regardless,of,what,crazy,sequence,of,events,causes,the,refresh,listener,to,fire;public,void,test,lots,of,threads,throws,exception,int,thread,count,between,3,10,max,listeners,between,1,thread,count,2,cancellable,refresher,thread,pool,schedule,with,fixed,delay,engine,refresh,because,test,time,value,millis,100,names,same,thread,indexers,new,thread,thread,count,for,int,thread,0,thread,thread,count,thread,final,string,thread,id,string,format,locale,root,04d,thread,indexers,thread,new,thread,for,int,iteration,1,iteration,50,iteration,try,string,test,field,value,string,format,locale,root,s,04d,thread,id,iteration,engine,index,result,index,index,thread,id,test,field,value,assert,equals,iteration,index,get,version,dummy,refresh,listener,listener,new,dummy,refresh,listener,listeners,add,or,notify,index,get,translog,location,listener,assert,busy,assert,not,null,listener,never,called,listener,forced,refresh,get,if,thread,count,max,listeners,assert,false,listener,forced,refresh,get,listener,assert,no,error,engine,get,get,new,engine,get,false,false,test,thread,id,new,term,id,field,mapper,name,thread,id,try,engine,get,result,get,result,engine,get,get,engine,acquire,searcher,assert,true,document,not,found,get,result,exists,assert,equals,iteration,get,result,version,org,apache,lucene,document,document,document,get,result,doc,id,and,version,reader,document,get,result,doc,id,and,version,doc,id,assert,equals,new,string,test,field,value,document,get,values,test,catch,exception,t,throw,new,runtime,exception,failure,on,the,iteration,iteration,of,thread,thread,id,t,indexers,thread,start,for,thread,indexer,indexers,indexer,join,refresher,cancel
RefreshListenersTests -> public void testLotsOfThreads() throws Exception;1547174095;Uses a bunch of threads to index, wait for refresh, and non-realtime get documents to validate that they are visible after waiting_regardless of what crazy sequence of events causes the refresh listener to fire.;public void testLotsOfThreads() throws Exception {_        int threadCount = between(3, 10)__        maxListeners = between(1, threadCount * 2)___        _        Cancellable refresher = threadPool.scheduleWithFixedDelay(() -> engine.refresh("because test"), timeValueMillis(100), Names.SAME)___        _        Thread[] indexers = new Thread[threadCount]__        for (int thread = 0_ thread < threadCount_ thread++) {_            final String threadId = String.format(Locale.ROOT, "%04d", thread)__            indexers[thread] = new Thread(() -> {_                for (int iteration = 1_ iteration <= 50_ iteration++) {_                    try {_                        String testFieldValue = String.format(Locale.ROOT, "%s%04d", threadId, iteration)__                        Engine.IndexResult index = index(threadId, testFieldValue)__                        assertEquals(iteration, index.getVersion())___                        DummyRefreshListener listener = new DummyRefreshListener()__                        listeners.addOrNotify(index.getTranslogLocation(), listener)__                        assertBusy(() -> assertNotNull("listener never called", listener.forcedRefresh.get()))__                        if (threadCount < maxListeners) {_                            assertFalse(listener.forcedRefresh.get())__                        }_                        listener.assertNoError()___                        Engine.Get get = new Engine.Get(false, false, "test", threadId, new Term(IdFieldMapper.NAME, threadId))__                        try (Engine.GetResult getResult = engine.get(get, engine::acquireSearcher)) {_                            assertTrue("document not found", getResult.exists())__                            assertEquals(iteration, getResult.version())__                            org.apache.lucene.document.Document document =_                                    getResult.docIdAndVersion().reader.document(getResult.docIdAndVersion().docId)__                            assertEquals(new String[] {testFieldValue}, document.getValues("test"))__                        }_                    } catch (Exception t) {_                        throw new RuntimeException("failure on the [" + iteration + "] iteration of thread [" + threadId + "]", t)__                    }_                }_            })__            indexers[thread].start()__        }__        for (Thread indexer: indexers) {_            indexer.join()__        }_        refresher.cancel()__    };uses,a,bunch,of,threads,to,index,wait,for,refresh,and,non,realtime,get,documents,to,validate,that,they,are,visible,after,waiting,regardless,of,what,crazy,sequence,of,events,causes,the,refresh,listener,to,fire;public,void,test,lots,of,threads,throws,exception,int,thread,count,between,3,10,max,listeners,between,1,thread,count,2,cancellable,refresher,thread,pool,schedule,with,fixed,delay,engine,refresh,because,test,time,value,millis,100,names,same,thread,indexers,new,thread,thread,count,for,int,thread,0,thread,thread,count,thread,final,string,thread,id,string,format,locale,root,04d,thread,indexers,thread,new,thread,for,int,iteration,1,iteration,50,iteration,try,string,test,field,value,string,format,locale,root,s,04d,thread,id,iteration,engine,index,result,index,index,thread,id,test,field,value,assert,equals,iteration,index,get,version,dummy,refresh,listener,listener,new,dummy,refresh,listener,listeners,add,or,notify,index,get,translog,location,listener,assert,busy,assert,not,null,listener,never,called,listener,forced,refresh,get,if,thread,count,max,listeners,assert,false,listener,forced,refresh,get,listener,assert,no,error,engine,get,get,new,engine,get,false,false,test,thread,id,new,term,id,field,mapper,name,thread,id,try,engine,get,result,get,result,engine,get,get,engine,acquire,searcher,assert,true,document,not,found,get,result,exists,assert,equals,iteration,get,result,version,org,apache,lucene,document,document,document,get,result,doc,id,and,version,reader,document,get,result,doc,id,and,version,doc,id,assert,equals,new,string,test,field,value,document,get,values,test,catch,exception,t,throw,new,runtime,exception,failure,on,the,iteration,iteration,of,thread,thread,id,t,indexers,thread,start,for,thread,indexer,indexers,indexer,join,refresher,cancel
RefreshListenersTests -> public void testLotsOfThreads() throws Exception;1547198139;Uses a bunch of threads to index, wait for refresh, and non-realtime get documents to validate that they are visible after waiting_regardless of what crazy sequence of events causes the refresh listener to fire.;public void testLotsOfThreads() throws Exception {_        int threadCount = between(3, 10)__        maxListeners = between(1, threadCount * 2)___        _        Cancellable refresher = threadPool.scheduleWithFixedDelay(() -> engine.refresh("because test"), timeValueMillis(100), Names.SAME)___        _        Thread[] indexers = new Thread[threadCount]__        for (int thread = 0_ thread < threadCount_ thread++) {_            final String threadId = String.format(Locale.ROOT, "%04d", thread)__            indexers[thread] = new Thread(() -> {_                for (int iteration = 1_ iteration <= 50_ iteration++) {_                    try {_                        String testFieldValue = String.format(Locale.ROOT, "%s%04d", threadId, iteration)__                        Engine.IndexResult index = index(threadId, testFieldValue)__                        assertEquals(iteration, index.getVersion())___                        DummyRefreshListener listener = new DummyRefreshListener()__                        listeners.addOrNotify(index.getTranslogLocation(), listener)__                        assertBusy(() -> assertNotNull("listener never called", listener.forcedRefresh.get()), 1, TimeUnit.MINUTES)__                        if (threadCount < maxListeners) {_                            assertFalse(listener.forcedRefresh.get())__                        }_                        listener.assertNoError()___                        Engine.Get get = new Engine.Get(false, false, "test", threadId, new Term(IdFieldMapper.NAME, threadId))__                        try (Engine.GetResult getResult = engine.get(get, engine::acquireSearcher)) {_                            assertTrue("document not found", getResult.exists())__                            assertEquals(iteration, getResult.version())__                            org.apache.lucene.document.Document document =_                                    getResult.docIdAndVersion().reader.document(getResult.docIdAndVersion().docId)__                            assertEquals(new String[] {testFieldValue}, document.getValues("test"))__                        }_                    } catch (Exception t) {_                        throw new RuntimeException("failure on the [" + iteration + "] iteration of thread [" + threadId + "]", t)__                    }_                }_            })__            indexers[thread].start()__        }__        for (Thread indexer: indexers) {_            indexer.join()__        }_        refresher.cancel()__    };uses,a,bunch,of,threads,to,index,wait,for,refresh,and,non,realtime,get,documents,to,validate,that,they,are,visible,after,waiting,regardless,of,what,crazy,sequence,of,events,causes,the,refresh,listener,to,fire;public,void,test,lots,of,threads,throws,exception,int,thread,count,between,3,10,max,listeners,between,1,thread,count,2,cancellable,refresher,thread,pool,schedule,with,fixed,delay,engine,refresh,because,test,time,value,millis,100,names,same,thread,indexers,new,thread,thread,count,for,int,thread,0,thread,thread,count,thread,final,string,thread,id,string,format,locale,root,04d,thread,indexers,thread,new,thread,for,int,iteration,1,iteration,50,iteration,try,string,test,field,value,string,format,locale,root,s,04d,thread,id,iteration,engine,index,result,index,index,thread,id,test,field,value,assert,equals,iteration,index,get,version,dummy,refresh,listener,listener,new,dummy,refresh,listener,listeners,add,or,notify,index,get,translog,location,listener,assert,busy,assert,not,null,listener,never,called,listener,forced,refresh,get,1,time,unit,minutes,if,thread,count,max,listeners,assert,false,listener,forced,refresh,get,listener,assert,no,error,engine,get,get,new,engine,get,false,false,test,thread,id,new,term,id,field,mapper,name,thread,id,try,engine,get,result,get,result,engine,get,get,engine,acquire,searcher,assert,true,document,not,found,get,result,exists,assert,equals,iteration,get,result,version,org,apache,lucene,document,document,document,get,result,doc,id,and,version,reader,document,get,result,doc,id,and,version,doc,id,assert,equals,new,string,test,field,value,document,get,values,test,catch,exception,t,throw,new,runtime,exception,failure,on,the,iteration,iteration,of,thread,thread,id,t,indexers,thread,start,for,thread,indexer,indexers,indexer,join,refresher,cancel
RefreshListenersTests -> public void testLotsOfThreads() throws Exception;1549059559;Uses a bunch of threads to index, wait for refresh, and non-realtime get documents to validate that they are visible after waiting_regardless of what crazy sequence of events causes the refresh listener to fire.;public void testLotsOfThreads() throws Exception {_        int threadCount = between(3, 10)__        maxListeners = between(1, threadCount * 2)___        _        Cancellable refresher = threadPool.scheduleWithFixedDelay(() -> engine.refresh("because test"), timeValueMillis(100), Names.SAME)___        _        Thread[] indexers = new Thread[threadCount]__        for (int thread = 0_ thread < threadCount_ thread++) {_            final String threadId = String.format(Locale.ROOT, "%04d", thread)__            indexers[thread] = new Thread(() -> {_                for (int iteration = 1_ iteration <= 50_ iteration++) {_                    try {_                        String testFieldValue = String.format(Locale.ROOT, "%s%04d", threadId, iteration)__                        Engine.IndexResult index = index(threadId, testFieldValue)__                        assertEquals(iteration, index.getVersion())___                        DummyRefreshListener listener = new DummyRefreshListener()__                        listeners.addOrNotify(index.getTranslogLocation(), listener)__                        assertBusy(() -> assertNotNull("listener never called", listener.forcedRefresh.get()), 1, TimeUnit.MINUTES)__                        if (threadCount < maxListeners) {_                            assertFalse(listener.forcedRefresh.get())__                        }_                        listener.assertNoError()___                        Engine.Get get = new Engine.Get(false, false, "test", threadId, new Term(IdFieldMapper.NAME, threadId))__                        try (Engine.GetResult getResult = engine.get(get, engine::acquireSearcher)) {_                            assertTrue("document not found", getResult.exists())__                            assertEquals(iteration, getResult.version())__                            org.apache.lucene.document.Document document =_                                    getResult.docIdAndVersion().reader.document(getResult.docIdAndVersion().docId)__                            assertEquals(new String[] {testFieldValue}, document.getValues("test"))__                        }_                    } catch (Exception t) {_                        throw new RuntimeException("failure on the [" + iteration + "] iteration of thread [" + threadId + "]", t)__                    }_                }_            })__            indexers[thread].start()__        }__        for (Thread indexer: indexers) {_            indexer.join()__        }_        refresher.cancel()__    };uses,a,bunch,of,threads,to,index,wait,for,refresh,and,non,realtime,get,documents,to,validate,that,they,are,visible,after,waiting,regardless,of,what,crazy,sequence,of,events,causes,the,refresh,listener,to,fire;public,void,test,lots,of,threads,throws,exception,int,thread,count,between,3,10,max,listeners,between,1,thread,count,2,cancellable,refresher,thread,pool,schedule,with,fixed,delay,engine,refresh,because,test,time,value,millis,100,names,same,thread,indexers,new,thread,thread,count,for,int,thread,0,thread,thread,count,thread,final,string,thread,id,string,format,locale,root,04d,thread,indexers,thread,new,thread,for,int,iteration,1,iteration,50,iteration,try,string,test,field,value,string,format,locale,root,s,04d,thread,id,iteration,engine,index,result,index,index,thread,id,test,field,value,assert,equals,iteration,index,get,version,dummy,refresh,listener,listener,new,dummy,refresh,listener,listeners,add,or,notify,index,get,translog,location,listener,assert,busy,assert,not,null,listener,never,called,listener,forced,refresh,get,1,time,unit,minutes,if,thread,count,max,listeners,assert,false,listener,forced,refresh,get,listener,assert,no,error,engine,get,get,new,engine,get,false,false,test,thread,id,new,term,id,field,mapper,name,thread,id,try,engine,get,result,get,result,engine,get,get,engine,acquire,searcher,assert,true,document,not,found,get,result,exists,assert,equals,iteration,get,result,version,org,apache,lucene,document,document,document,get,result,doc,id,and,version,reader,document,get,result,doc,id,and,version,doc,id,assert,equals,new,string,test,field,value,document,get,values,test,catch,exception,t,throw,new,runtime,exception,failure,on,the,iteration,iteration,of,thread,thread,id,t,indexers,thread,start,for,thread,indexer,indexers,indexer,join,refresher,cancel
