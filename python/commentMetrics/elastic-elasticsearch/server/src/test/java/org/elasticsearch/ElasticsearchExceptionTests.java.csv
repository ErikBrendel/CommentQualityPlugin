# id;timestamp;commentText;codeText;commentWords;codeWords
ElasticsearchExceptionTests -> public void testFromXContentWithIgnoredMetadataAndHeaders() throws IOException;1524684173;Test that some values like arrays of numbers are ignored when parsing back_an exception.;public void testFromXContentWithIgnoredMetadataAndHeaders() throws IOException {_        final XContent xContent = randomFrom(XContentType.values()).xContent()___        _        _        _        BytesReference originalBytes__        try (XContentBuilder builder = XContentBuilder.builder(xContent)) {_            builder.startObject()_                    .field("metadata_int", 1)_                    .array("metadata_array_of_ints", new int[]{8, 13, 21})_                    .field("reason", "Custom reason")_                    .array("metadata_array_of_boolean", new boolean[]{false, false})_                    .startArray("metadata_array_of_objects")_                        .startObject()_                            .field("object_array_one", "value_one")_                        .endObject()_                        .startObject()_                            .field("object_array_two", "value_two")_                        .endObject()_                    .endArray()_                    .field("type", "custom_exception")_                    .field("metadata_long", 1L)_                    .array("metadata_array_of_longs", new long[]{2L, 3L, 5L})_                    .field("metadata_other", "some metadata")_                    .startObject("header")_                        .field("header_string", "some header")_                        .array("header_array_of_strings", new String[]{"foo", "bar", "baz"})_                    .endObject()_                    .startObject("metadata_object")_                        .field("object_field", "value")_                    .endObject()_            .endObject()__            try (XContentBuilder shuffledBuilder = shuffleXContent(builder)) {_                originalBytes = BytesReference.bytes(shuffledBuilder)__            }_        }__        ElasticsearchException parsedException__        try (XContentParser parser = createParser(xContent, originalBytes)) {_            assertEquals(XContentParser.Token.START_OBJECT, parser.nextToken())__            parsedException = ElasticsearchException.fromXContent(parser)__            assertEquals(XContentParser.Token.END_OBJECT, parser.currentToken())__            assertNull(parser.nextToken())__        }__        assertNotNull(parsedException)__        assertEquals("Elasticsearch exception [type=custom_exception, reason=Custom reason]", parsedException.getMessage())__        assertEquals(2, parsedException.getHeaderKeys().size())__        assertThat(parsedException.getHeader("header_string"), hasItem("some header"))__        assertThat(parsedException.getHeader("header_array_of_strings"), hasItems("foo", "bar", "baz"))__        assertEquals(1, parsedException.getMetadataKeys().size())__        assertThat(parsedException.getMetadata("es.metadata_other"), hasItem("some metadata"))__    };test,that,some,values,like,arrays,of,numbers,are,ignored,when,parsing,back,an,exception;public,void,test,from,xcontent,with,ignored,metadata,and,headers,throws,ioexception,final,xcontent,x,content,random,from,xcontent,type,values,x,content,bytes,reference,original,bytes,try,xcontent,builder,builder,xcontent,builder,builder,x,content,builder,start,object,field,1,array,new,int,8,13,21,field,reason,custom,reason,array,new,boolean,false,false,start,array,start,object,field,end,object,start,object,field,end,object,end,array,field,type,field,1l,array,new,long,2l,3l,5l,field,some,metadata,start,object,header,field,some,header,array,new,string,foo,bar,baz,end,object,start,object,field,value,end,object,end,object,try,xcontent,builder,shuffled,builder,shuffle,xcontent,builder,original,bytes,bytes,reference,bytes,shuffled,builder,elasticsearch,exception,parsed,exception,try,xcontent,parser,parser,create,parser,x,content,original,bytes,assert,equals,xcontent,parser,token,parser,next,token,parsed,exception,elasticsearch,exception,from,xcontent,parser,assert,equals,xcontent,parser,token,parser,current,token,assert,null,parser,next,token,assert,not,null,parsed,exception,assert,equals,elasticsearch,exception,type,reason,custom,reason,parsed,exception,get,message,assert,equals,2,parsed,exception,get,header,keys,size,assert,that,parsed,exception,get,header,has,item,some,header,assert,that,parsed,exception,get,header,has,items,foo,bar,baz,assert,equals,1,parsed,exception,get,metadata,keys,size,assert,that,parsed,exception,get,metadata,es,has,item,some,metadata
ElasticsearchExceptionTests -> public void testFromXContentWithIgnoredMetadataAndHeaders() throws IOException;1525248068;Test that some values like arrays of numbers are ignored when parsing back_an exception.;public void testFromXContentWithIgnoredMetadataAndHeaders() throws IOException {_        final XContent xContent = randomFrom(XContentType.values()).xContent()___        _        _        _        BytesReference originalBytes__        try (XContentBuilder builder = XContentBuilder.builder(xContent)) {_            builder.startObject()_                    .field("metadata_int", 1)_                    .array("metadata_array_of_ints", new int[]{8, 13, 21})_                    .field("reason", "Custom reason")_                    .array("metadata_array_of_boolean", new boolean[]{false, false})_                    .startArray("metadata_array_of_objects")_                        .startObject()_                            .field("object_array_one", "value_one")_                        .endObject()_                        .startObject()_                            .field("object_array_two", "value_two")_                        .endObject()_                    .endArray()_                    .field("type", "custom_exception")_                    .field("metadata_long", 1L)_                    .array("metadata_array_of_longs", new long[]{2L, 3L, 5L})_                    .field("metadata_other", "some metadata")_                    .startObject("header")_                        .field("header_string", "some header")_                        .array("header_array_of_strings", new String[]{"foo", "bar", "baz"})_                    .endObject()_                    .startObject("metadata_object")_                        .field("object_field", "value")_                    .endObject()_            .endObject()__            try (XContentBuilder shuffledBuilder = shuffleXContent(builder)) {_                originalBytes = BytesReference.bytes(shuffledBuilder)__            }_        }__        ElasticsearchException parsedException__        try (XContentParser parser = createParser(xContent, originalBytes)) {_            assertEquals(XContentParser.Token.START_OBJECT, parser.nextToken())__            parsedException = ElasticsearchException.fromXContent(parser)__            assertEquals(XContentParser.Token.END_OBJECT, parser.currentToken())__            assertNull(parser.nextToken())__        }__        assertNotNull(parsedException)__        assertEquals("Elasticsearch exception [type=custom_exception, reason=Custom reason]", parsedException.getMessage())__        assertEquals(2, parsedException.getHeaderKeys().size())__        assertThat(parsedException.getHeader("header_string"), hasItem("some header"))__        assertThat(parsedException.getHeader("header_array_of_strings"), hasItems("foo", "bar", "baz"))__        assertEquals(1, parsedException.getMetadataKeys().size())__        assertThat(parsedException.getMetadata("es.metadata_other"), hasItem("some metadata"))__    };test,that,some,values,like,arrays,of,numbers,are,ignored,when,parsing,back,an,exception;public,void,test,from,xcontent,with,ignored,metadata,and,headers,throws,ioexception,final,xcontent,x,content,random,from,xcontent,type,values,x,content,bytes,reference,original,bytes,try,xcontent,builder,builder,xcontent,builder,builder,x,content,builder,start,object,field,1,array,new,int,8,13,21,field,reason,custom,reason,array,new,boolean,false,false,start,array,start,object,field,end,object,start,object,field,end,object,end,array,field,type,field,1l,array,new,long,2l,3l,5l,field,some,metadata,start,object,header,field,some,header,array,new,string,foo,bar,baz,end,object,start,object,field,value,end,object,end,object,try,xcontent,builder,shuffled,builder,shuffle,xcontent,builder,original,bytes,bytes,reference,bytes,shuffled,builder,elasticsearch,exception,parsed,exception,try,xcontent,parser,parser,create,parser,x,content,original,bytes,assert,equals,xcontent,parser,token,parser,next,token,parsed,exception,elasticsearch,exception,from,xcontent,parser,assert,equals,xcontent,parser,token,parser,current,token,assert,null,parser,next,token,assert,not,null,parsed,exception,assert,equals,elasticsearch,exception,type,reason,custom,reason,parsed,exception,get,message,assert,equals,2,parsed,exception,get,header,keys,size,assert,that,parsed,exception,get,header,has,item,some,header,assert,that,parsed,exception,get,header,has,items,foo,bar,baz,assert,equals,1,parsed,exception,get,metadata,keys,size,assert,that,parsed,exception,get,metadata,es,has,item,some,metadata
ElasticsearchExceptionTests -> public void testFromXContentWithIgnoredMetadataAndHeaders() throws IOException;1540486836;Test that some values like arrays of numbers are ignored when parsing back_an exception.;public void testFromXContentWithIgnoredMetadataAndHeaders() throws IOException {_        final XContent xContent = randomFrom(XContentType.values()).xContent()___        _        _        _        BytesReference originalBytes__        try (XContentBuilder builder = XContentBuilder.builder(xContent)) {_            builder.startObject()_                    .field("metadata_int", 1)_                    .array("metadata_array_of_ints", new int[]{8, 13, 21})_                    .field("reason", "Custom reason")_                    .array("metadata_array_of_boolean", new boolean[]{false, false})_                    .startArray("metadata_array_of_objects")_                        .startObject()_                            .field("object_array_one", "value_one")_                        .endObject()_                        .startObject()_                            .field("object_array_two", "value_two")_                        .endObject()_                    .endArray()_                    .field("type", "custom_exception")_                    .field("metadata_long", 1L)_                    .array("metadata_array_of_longs", new long[]{2L, 3L, 5L})_                    .field("metadata_other", "some metadata")_                    .startObject("header")_                        .field("header_string", "some header")_                        .array("header_array_of_strings", new String[]{"foo", "bar", "baz"})_                    .endObject()_                    .startObject("metadata_object")_                        .field("object_field", "value")_                    .endObject()_            .endObject()__            try (XContentBuilder shuffledBuilder = shuffleXContent(builder)) {_                originalBytes = BytesReference.bytes(shuffledBuilder)__            }_        }__        ElasticsearchException parsedException__        try (XContentParser parser = createParser(xContent, originalBytes)) {_            assertEquals(XContentParser.Token.START_OBJECT, parser.nextToken())__            parsedException = ElasticsearchException.fromXContent(parser)__            assertEquals(XContentParser.Token.END_OBJECT, parser.currentToken())__            assertNull(parser.nextToken())__        }__        assertNotNull(parsedException)__        assertEquals("Elasticsearch exception [type=custom_exception, reason=Custom reason]", parsedException.getMessage())__        assertEquals(2, parsedException.getHeaderKeys().size())__        assertThat(parsedException.getHeader("header_string"), hasItem("some header"))__        assertThat(parsedException.getHeader("header_array_of_strings"), hasItems("foo", "bar", "baz"))__        assertEquals(1, parsedException.getMetadataKeys().size())__        assertThat(parsedException.getMetadata("es.metadata_other"), hasItem("some metadata"))__    };test,that,some,values,like,arrays,of,numbers,are,ignored,when,parsing,back,an,exception;public,void,test,from,xcontent,with,ignored,metadata,and,headers,throws,ioexception,final,xcontent,x,content,random,from,xcontent,type,values,x,content,bytes,reference,original,bytes,try,xcontent,builder,builder,xcontent,builder,builder,x,content,builder,start,object,field,1,array,new,int,8,13,21,field,reason,custom,reason,array,new,boolean,false,false,start,array,start,object,field,end,object,start,object,field,end,object,end,array,field,type,field,1l,array,new,long,2l,3l,5l,field,some,metadata,start,object,header,field,some,header,array,new,string,foo,bar,baz,end,object,start,object,field,value,end,object,end,object,try,xcontent,builder,shuffled,builder,shuffle,xcontent,builder,original,bytes,bytes,reference,bytes,shuffled,builder,elasticsearch,exception,parsed,exception,try,xcontent,parser,parser,create,parser,x,content,original,bytes,assert,equals,xcontent,parser,token,parser,next,token,parsed,exception,elasticsearch,exception,from,xcontent,parser,assert,equals,xcontent,parser,token,parser,current,token,assert,null,parser,next,token,assert,not,null,parsed,exception,assert,equals,elasticsearch,exception,type,reason,custom,reason,parsed,exception,get,message,assert,equals,2,parsed,exception,get,header,keys,size,assert,that,parsed,exception,get,header,has,item,some,header,assert,that,parsed,exception,get,header,has,items,foo,bar,baz,assert,equals,1,parsed,exception,get,metadata,keys,size,assert,that,parsed,exception,get,metadata,es,has,item,some,metadata
ElasticsearchExceptionTests -> public void testFromXContentWithIgnoredMetadataAndHeaders() throws IOException;1541160764;Test that some values like arrays of numbers are ignored when parsing back_an exception.;public void testFromXContentWithIgnoredMetadataAndHeaders() throws IOException {_        final XContent xContent = randomFrom(XContentType.values()).xContent()___        _        _        _        BytesReference originalBytes__        try (XContentBuilder builder = XContentBuilder.builder(xContent)) {_            builder.startObject()_                    .field("metadata_int", 1)_                    .array("metadata_array_of_ints", new int[]{8, 13, 21})_                    .field("reason", "Custom reason")_                    .array("metadata_array_of_boolean", new boolean[]{false, false})_                    .startArray("metadata_array_of_objects")_                        .startObject()_                            .field("object_array_one", "value_one")_                        .endObject()_                        .startObject()_                            .field("object_array_two", "value_two")_                        .endObject()_                    .endArray()_                    .field("type", "custom_exception")_                    .field("metadata_long", 1L)_                    .array("metadata_array_of_longs", new long[]{2L, 3L, 5L})_                    .field("metadata_other", "some metadata")_                    .startObject("header")_                        .field("header_string", "some header")_                        .array("header_array_of_strings", new String[]{"foo", "bar", "baz"})_                    .endObject()_                    .startObject("metadata_object")_                        .field("object_field", "value")_                    .endObject()_            .endObject()__            try (XContentBuilder shuffledBuilder = shuffleXContent(builder)) {_                originalBytes = BytesReference.bytes(shuffledBuilder)__            }_        }__        ElasticsearchException parsedException__        try (XContentParser parser = createParser(xContent, originalBytes)) {_            assertEquals(XContentParser.Token.START_OBJECT, parser.nextToken())__            parsedException = ElasticsearchException.fromXContent(parser)__            assertEquals(XContentParser.Token.END_OBJECT, parser.currentToken())__            assertNull(parser.nextToken())__        }__        assertNotNull(parsedException)__        assertEquals("Elasticsearch exception [type=custom_exception, reason=Custom reason]", parsedException.getMessage())__        assertEquals(2, parsedException.getHeaderKeys().size())__        assertThat(parsedException.getHeader("header_string"), hasItem("some header"))__        assertThat(parsedException.getHeader("header_array_of_strings"), hasItems("foo", "bar", "baz"))__        assertEquals(1, parsedException.getMetadataKeys().size())__        assertThat(parsedException.getMetadata("es.metadata_other"), hasItem("some metadata"))__    };test,that,some,values,like,arrays,of,numbers,are,ignored,when,parsing,back,an,exception;public,void,test,from,xcontent,with,ignored,metadata,and,headers,throws,ioexception,final,xcontent,x,content,random,from,xcontent,type,values,x,content,bytes,reference,original,bytes,try,xcontent,builder,builder,xcontent,builder,builder,x,content,builder,start,object,field,1,array,new,int,8,13,21,field,reason,custom,reason,array,new,boolean,false,false,start,array,start,object,field,end,object,start,object,field,end,object,end,array,field,type,field,1l,array,new,long,2l,3l,5l,field,some,metadata,start,object,header,field,some,header,array,new,string,foo,bar,baz,end,object,start,object,field,value,end,object,end,object,try,xcontent,builder,shuffled,builder,shuffle,xcontent,builder,original,bytes,bytes,reference,bytes,shuffled,builder,elasticsearch,exception,parsed,exception,try,xcontent,parser,parser,create,parser,x,content,original,bytes,assert,equals,xcontent,parser,token,parser,next,token,parsed,exception,elasticsearch,exception,from,xcontent,parser,assert,equals,xcontent,parser,token,parser,current,token,assert,null,parser,next,token,assert,not,null,parsed,exception,assert,equals,elasticsearch,exception,type,reason,custom,reason,parsed,exception,get,message,assert,equals,2,parsed,exception,get,header,keys,size,assert,that,parsed,exception,get,header,has,item,some,header,assert,that,parsed,exception,get,header,has,items,foo,bar,baz,assert,equals,1,parsed,exception,get,metadata,keys,size,assert,that,parsed,exception,get,metadata,es,has,item,some,metadata
ElasticsearchExceptionTests -> public void testFromXContentWithIgnoredMetadataAndHeaders() throws IOException;1548770291;Test that some values like arrays of numbers are ignored when parsing back_an exception.;public void testFromXContentWithIgnoredMetadataAndHeaders() throws IOException {_        final XContent xContent = randomFrom(XContentType.values()).xContent()___        _        _        _        BytesReference originalBytes__        try (XContentBuilder builder = XContentBuilder.builder(xContent)) {_            builder.startObject()_                    .field("metadata_int", 1)_                    .array("metadata_array_of_ints", new int[]{8, 13, 21})_                    .field("reason", "Custom reason")_                    .array("metadata_array_of_boolean", new boolean[]{false, false})_                    .startArray("metadata_array_of_objects")_                        .startObject()_                            .field("object_array_one", "value_one")_                        .endObject()_                        .startObject()_                            .field("object_array_two", "value_two")_                        .endObject()_                    .endArray()_                    .field("type", "custom_exception")_                    .field("metadata_long", 1L)_                    .array("metadata_array_of_longs", new long[]{2L, 3L, 5L})_                    .field("metadata_other", "some metadata")_                    .startObject("header")_                        .field("header_string", "some header")_                        .array("header_array_of_strings", new String[]{"foo", "bar", "baz"})_                    .endObject()_                    .startObject("metadata_object")_                        .field("object_field", "value")_                    .endObject()_            .endObject()__            try (XContentBuilder shuffledBuilder = shuffleXContent(builder)) {_                originalBytes = BytesReference.bytes(shuffledBuilder)__            }_        }__        ElasticsearchException parsedException__        try (XContentParser parser = createParser(xContent, originalBytes)) {_            assertEquals(XContentParser.Token.START_OBJECT, parser.nextToken())__            parsedException = ElasticsearchException.fromXContent(parser)__            assertEquals(XContentParser.Token.END_OBJECT, parser.currentToken())__            assertNull(parser.nextToken())__        }__        assertNotNull(parsedException)__        assertEquals("Elasticsearch exception [type=custom_exception, reason=Custom reason]", parsedException.getMessage())__        assertEquals(2, parsedException.getHeaderKeys().size())__        assertThat(parsedException.getHeader("header_string"), hasItem("some header"))__        assertThat(parsedException.getHeader("header_array_of_strings"), hasItems("foo", "bar", "baz"))__        assertEquals(1, parsedException.getMetadataKeys().size())__        assertThat(parsedException.getMetadata("es.metadata_other"), hasItem("some metadata"))__    };test,that,some,values,like,arrays,of,numbers,are,ignored,when,parsing,back,an,exception;public,void,test,from,xcontent,with,ignored,metadata,and,headers,throws,ioexception,final,xcontent,x,content,random,from,xcontent,type,values,x,content,bytes,reference,original,bytes,try,xcontent,builder,builder,xcontent,builder,builder,x,content,builder,start,object,field,1,array,new,int,8,13,21,field,reason,custom,reason,array,new,boolean,false,false,start,array,start,object,field,end,object,start,object,field,end,object,end,array,field,type,field,1l,array,new,long,2l,3l,5l,field,some,metadata,start,object,header,field,some,header,array,new,string,foo,bar,baz,end,object,start,object,field,value,end,object,end,object,try,xcontent,builder,shuffled,builder,shuffle,xcontent,builder,original,bytes,bytes,reference,bytes,shuffled,builder,elasticsearch,exception,parsed,exception,try,xcontent,parser,parser,create,parser,x,content,original,bytes,assert,equals,xcontent,parser,token,parser,next,token,parsed,exception,elasticsearch,exception,from,xcontent,parser,assert,equals,xcontent,parser,token,parser,current,token,assert,null,parser,next,token,assert,not,null,parsed,exception,assert,equals,elasticsearch,exception,type,reason,custom,reason,parsed,exception,get,message,assert,equals,2,parsed,exception,get,header,keys,size,assert,that,parsed,exception,get,header,has,item,some,header,assert,that,parsed,exception,get,header,has,items,foo,bar,baz,assert,equals,1,parsed,exception,get,metadata,keys,size,assert,that,parsed,exception,get,metadata,es,has,item,some,metadata
ElasticsearchExceptionTests -> public void testFromXContentWithIgnoredMetadataAndHeaders() throws IOException;1549356476;Test that some values like arrays of numbers are ignored when parsing back_an exception.;public void testFromXContentWithIgnoredMetadataAndHeaders() throws IOException {_        final XContent xContent = randomFrom(XContentType.values()).xContent()___        _        _        _        BytesReference originalBytes__        try (XContentBuilder builder = XContentBuilder.builder(xContent)) {_            builder.startObject()_                    .field("metadata_int", 1)_                    .array("metadata_array_of_ints", new int[]{8, 13, 21})_                    .field("reason", "Custom reason")_                    .array("metadata_array_of_boolean", new boolean[]{false, false})_                    .startArray("metadata_array_of_objects")_                        .startObject()_                            .field("object_array_one", "value_one")_                        .endObject()_                        .startObject()_                            .field("object_array_two", "value_two")_                        .endObject()_                    .endArray()_                    .field("type", "custom_exception")_                    .field("metadata_long", 1L)_                    .array("metadata_array_of_longs", new long[]{2L, 3L, 5L})_                    .field("metadata_other", "some metadata")_                    .startObject("header")_                        .field("header_string", "some header")_                        .array("header_array_of_strings", new String[]{"foo", "bar", "baz"})_                    .endObject()_                    .startObject("metadata_object")_                        .field("object_field", "value")_                    .endObject()_            .endObject()__            try (XContentBuilder shuffledBuilder = shuffleXContent(builder)) {_                originalBytes = BytesReference.bytes(shuffledBuilder)__            }_        }__        ElasticsearchException parsedException__        try (XContentParser parser = createParser(xContent, originalBytes)) {_            assertEquals(XContentParser.Token.START_OBJECT, parser.nextToken())__            parsedException = ElasticsearchException.fromXContent(parser)__            assertEquals(XContentParser.Token.END_OBJECT, parser.currentToken())__            assertNull(parser.nextToken())__        }__        assertNotNull(parsedException)__        assertEquals("Elasticsearch exception [type=custom_exception, reason=Custom reason]", parsedException.getMessage())__        assertEquals(2, parsedException.getHeaderKeys().size())__        assertThat(parsedException.getHeader("header_string"), hasItem("some header"))__        assertThat(parsedException.getHeader("header_array_of_strings"), hasItems("foo", "bar", "baz"))__        assertEquals(1, parsedException.getMetadataKeys().size())__        assertThat(parsedException.getMetadata("es.metadata_other"), hasItem("some metadata"))__    };test,that,some,values,like,arrays,of,numbers,are,ignored,when,parsing,back,an,exception;public,void,test,from,xcontent,with,ignored,metadata,and,headers,throws,ioexception,final,xcontent,x,content,random,from,xcontent,type,values,x,content,bytes,reference,original,bytes,try,xcontent,builder,builder,xcontent,builder,builder,x,content,builder,start,object,field,1,array,new,int,8,13,21,field,reason,custom,reason,array,new,boolean,false,false,start,array,start,object,field,end,object,start,object,field,end,object,end,array,field,type,field,1l,array,new,long,2l,3l,5l,field,some,metadata,start,object,header,field,some,header,array,new,string,foo,bar,baz,end,object,start,object,field,value,end,object,end,object,try,xcontent,builder,shuffled,builder,shuffle,xcontent,builder,original,bytes,bytes,reference,bytes,shuffled,builder,elasticsearch,exception,parsed,exception,try,xcontent,parser,parser,create,parser,x,content,original,bytes,assert,equals,xcontent,parser,token,parser,next,token,parsed,exception,elasticsearch,exception,from,xcontent,parser,assert,equals,xcontent,parser,token,parser,current,token,assert,null,parser,next,token,assert,not,null,parsed,exception,assert,equals,elasticsearch,exception,type,reason,custom,reason,parsed,exception,get,message,assert,equals,2,parsed,exception,get,header,keys,size,assert,that,parsed,exception,get,header,has,item,some,header,assert,that,parsed,exception,get,header,has,items,foo,bar,baz,assert,equals,1,parsed,exception,get,metadata,keys,size,assert,that,parsed,exception,get,metadata,es,has,item,some,metadata
ElasticsearchExceptionTests -> private static boolean contains(Throwable t, Class<? extends Throwable> exType);1524684173;Check whether this exception contains an exception of the given type:_either it is of the given class itself or it contains a nested cause_of the given type.__@param exType the exception type to look for_@return whether there is a nested exception of the specified type;private static boolean contains(Throwable t, Class<? extends Throwable> exType) {_        if (exType == null) {_            return false__        }_        for (Throwable cause = t_ t != null_ t = t.getCause()) {_            if (exType.isInstance(cause)) {_                return true__            }_        }_        return false__    };check,whether,this,exception,contains,an,exception,of,the,given,type,either,it,is,of,the,given,class,itself,or,it,contains,a,nested,cause,of,the,given,type,param,ex,type,the,exception,type,to,look,for,return,whether,there,is,a,nested,exception,of,the,specified,type;private,static,boolean,contains,throwable,t,class,extends,throwable,ex,type,if,ex,type,null,return,false,for,throwable,cause,t,t,null,t,t,get,cause,if,ex,type,is,instance,cause,return,true,return,false
ElasticsearchExceptionTests -> private static boolean contains(Throwable t, Class<? extends Throwable> exType);1525248068;Check whether this exception contains an exception of the given type:_either it is of the given class itself or it contains a nested cause_of the given type.__@param exType the exception type to look for_@return whether there is a nested exception of the specified type;private static boolean contains(Throwable t, Class<? extends Throwable> exType) {_        if (exType == null) {_            return false__        }_        for (Throwable cause = t_ t != null_ t = t.getCause()) {_            if (exType.isInstance(cause)) {_                return true__            }_        }_        return false__    };check,whether,this,exception,contains,an,exception,of,the,given,type,either,it,is,of,the,given,class,itself,or,it,contains,a,nested,cause,of,the,given,type,param,ex,type,the,exception,type,to,look,for,return,whether,there,is,a,nested,exception,of,the,specified,type;private,static,boolean,contains,throwable,t,class,extends,throwable,ex,type,if,ex,type,null,return,false,for,throwable,cause,t,t,null,t,t,get,cause,if,ex,type,is,instance,cause,return,true,return,false
ElasticsearchExceptionTests -> private static boolean contains(Throwable t, Class<? extends Throwable> exType);1540486836;Check whether this exception contains an exception of the given type:_either it is of the given class itself or it contains a nested cause_of the given type.__@param exType the exception type to look for_@return whether there is a nested exception of the specified type;private static boolean contains(Throwable t, Class<? extends Throwable> exType) {_        if (exType == null) {_            return false__        }_        for (Throwable cause = t_ t != null_ t = t.getCause()) {_            if (exType.isInstance(cause)) {_                return true__            }_        }_        return false__    };check,whether,this,exception,contains,an,exception,of,the,given,type,either,it,is,of,the,given,class,itself,or,it,contains,a,nested,cause,of,the,given,type,param,ex,type,the,exception,type,to,look,for,return,whether,there,is,a,nested,exception,of,the,specified,type;private,static,boolean,contains,throwable,t,class,extends,throwable,ex,type,if,ex,type,null,return,false,for,throwable,cause,t,t,null,t,t,get,cause,if,ex,type,is,instance,cause,return,true,return,false
ElasticsearchExceptionTests -> private static boolean contains(Throwable t, Class<? extends Throwable> exType);1541160764;Check whether this exception contains an exception of the given type:_either it is of the given class itself or it contains a nested cause_of the given type.__@param exType the exception type to look for_@return whether there is a nested exception of the specified type;private static boolean contains(Throwable t, Class<? extends Throwable> exType) {_        if (exType == null) {_            return false__        }_        for (Throwable cause = t_ t != null_ t = t.getCause()) {_            if (exType.isInstance(cause)) {_                return true__            }_        }_        return false__    };check,whether,this,exception,contains,an,exception,of,the,given,type,either,it,is,of,the,given,class,itself,or,it,contains,a,nested,cause,of,the,given,type,param,ex,type,the,exception,type,to,look,for,return,whether,there,is,a,nested,exception,of,the,specified,type;private,static,boolean,contains,throwable,t,class,extends,throwable,ex,type,if,ex,type,null,return,false,for,throwable,cause,t,t,null,t,t,get,cause,if,ex,type,is,instance,cause,return,true,return,false
ElasticsearchExceptionTests -> private static boolean contains(Throwable t, Class<? extends Throwable> exType);1548770291;Check whether this exception contains an exception of the given type:_either it is of the given class itself or it contains a nested cause_of the given type.__@param exType the exception type to look for_@return whether there is a nested exception of the specified type;private static boolean contains(Throwable t, Class<? extends Throwable> exType) {_        if (exType == null) {_            return false__        }_        for (Throwable cause = t_ t != null_ t = t.getCause()) {_            if (exType.isInstance(cause)) {_                return true__            }_        }_        return false__    };check,whether,this,exception,contains,an,exception,of,the,given,type,either,it,is,of,the,given,class,itself,or,it,contains,a,nested,cause,of,the,given,type,param,ex,type,the,exception,type,to,look,for,return,whether,there,is,a,nested,exception,of,the,specified,type;private,static,boolean,contains,throwable,t,class,extends,throwable,ex,type,if,ex,type,null,return,false,for,throwable,cause,t,t,null,t,t,get,cause,if,ex,type,is,instance,cause,return,true,return,false
ElasticsearchExceptionTests -> private static boolean contains(Throwable t, Class<? extends Throwable> exType);1549356476;Check whether this exception contains an exception of the given type:_either it is of the given class itself or it contains a nested cause_of the given type.__@param exType the exception type to look for_@return whether there is a nested exception of the specified type;private static boolean contains(Throwable t, Class<? extends Throwable> exType) {_        if (exType == null) {_            return false__        }_        for (Throwable cause = t_ t != null_ t = t.getCause()) {_            if (exType.isInstance(cause)) {_                return true__            }_        }_        return false__    };check,whether,this,exception,contains,an,exception,of,the,given,type,either,it,is,of,the,given,class,itself,or,it,contains,a,nested,cause,of,the,given,type,param,ex,type,the,exception,type,to,look,for,return,whether,there,is,a,nested,exception,of,the,specified,type;private,static,boolean,contains,throwable,t,class,extends,throwable,ex,type,if,ex,type,null,return,false,for,throwable,cause,t,t,null,t,t,get,cause,if,ex,type,is,instance,cause,return,true,return,false
ElasticsearchExceptionTests -> private static void assertToXContentAsJson(ToXContent e, String expectedJson) throws IOException;1524684173;Builds a {@link ToXContent} using a JSON XContentBuilder and compares the result to the given json in string format.__By default, the stack trace of the exception is not rendered. The parameter `errorTrace` forces the stack trace to_be rendered like the REST API does when the "error_trace" parameter is set to true.;private static void assertToXContentAsJson(ToXContent e, String expectedJson) throws IOException {_        BytesReference actual = XContentHelper.toXContent(e, XContentType.JSON, randomBoolean())__        assertToXContentEquivalent(new BytesArray(expectedJson), actual, XContentType.JSON)__    };builds,a,link,to,xcontent,using,a,json,xcontent,builder,and,compares,the,result,to,the,given,json,in,string,format,by,default,the,stack,trace,of,the,exception,is,not,rendered,the,parameter,error,trace,forces,the,stack,trace,to,be,rendered,like,the,rest,api,does,when,the,parameter,is,set,to,true;private,static,void,assert,to,xcontent,as,json,to,xcontent,e,string,expected,json,throws,ioexception,bytes,reference,actual,xcontent,helper,to,xcontent,e,xcontent,type,json,random,boolean,assert,to,xcontent,equivalent,new,bytes,array,expected,json,actual,xcontent,type,json
ElasticsearchExceptionTests -> private static void assertToXContentAsJson(ToXContent e, String expectedJson) throws IOException;1525248068;Builds a {@link ToXContent} using a JSON XContentBuilder and compares the result to the given json in string format.__By default, the stack trace of the exception is not rendered. The parameter `errorTrace` forces the stack trace to_be rendered like the REST API does when the "error_trace" parameter is set to true.;private static void assertToXContentAsJson(ToXContent e, String expectedJson) throws IOException {_        BytesReference actual = XContentHelper.toXContent(e, XContentType.JSON, randomBoolean())__        assertToXContentEquivalent(new BytesArray(expectedJson), actual, XContentType.JSON)__    };builds,a,link,to,xcontent,using,a,json,xcontent,builder,and,compares,the,result,to,the,given,json,in,string,format,by,default,the,stack,trace,of,the,exception,is,not,rendered,the,parameter,error,trace,forces,the,stack,trace,to,be,rendered,like,the,rest,api,does,when,the,parameter,is,set,to,true;private,static,void,assert,to,xcontent,as,json,to,xcontent,e,string,expected,json,throws,ioexception,bytes,reference,actual,xcontent,helper,to,xcontent,e,xcontent,type,json,random,boolean,assert,to,xcontent,equivalent,new,bytes,array,expected,json,actual,xcontent,type,json
ElasticsearchExceptionTests -> private static void assertToXContentAsJson(ToXContent e, String expectedJson) throws IOException;1540486836;Builds a {@link ToXContent} using a JSON XContentBuilder and compares the result to the given json in string format.__By default, the stack trace of the exception is not rendered. The parameter `errorTrace` forces the stack trace to_be rendered like the REST API does when the "error_trace" parameter is set to true.;private static void assertToXContentAsJson(ToXContent e, String expectedJson) throws IOException {_        BytesReference actual = XContentHelper.toXContent(e, XContentType.JSON, randomBoolean())__        assertToXContentEquivalent(new BytesArray(expectedJson), actual, XContentType.JSON)__    };builds,a,link,to,xcontent,using,a,json,xcontent,builder,and,compares,the,result,to,the,given,json,in,string,format,by,default,the,stack,trace,of,the,exception,is,not,rendered,the,parameter,error,trace,forces,the,stack,trace,to,be,rendered,like,the,rest,api,does,when,the,parameter,is,set,to,true;private,static,void,assert,to,xcontent,as,json,to,xcontent,e,string,expected,json,throws,ioexception,bytes,reference,actual,xcontent,helper,to,xcontent,e,xcontent,type,json,random,boolean,assert,to,xcontent,equivalent,new,bytes,array,expected,json,actual,xcontent,type,json
ElasticsearchExceptionTests -> private static void assertToXContentAsJson(ToXContent e, String expectedJson) throws IOException;1541160764;Builds a {@link ToXContent} using a JSON XContentBuilder and compares the result to the given json in string format.__By default, the stack trace of the exception is not rendered. The parameter `errorTrace` forces the stack trace to_be rendered like the REST API does when the "error_trace" parameter is set to true.;private static void assertToXContentAsJson(ToXContent e, String expectedJson) throws IOException {_        BytesReference actual = XContentHelper.toXContent(e, XContentType.JSON, randomBoolean())__        assertToXContentEquivalent(new BytesArray(expectedJson), actual, XContentType.JSON)__    };builds,a,link,to,xcontent,using,a,json,xcontent,builder,and,compares,the,result,to,the,given,json,in,string,format,by,default,the,stack,trace,of,the,exception,is,not,rendered,the,parameter,error,trace,forces,the,stack,trace,to,be,rendered,like,the,rest,api,does,when,the,parameter,is,set,to,true;private,static,void,assert,to,xcontent,as,json,to,xcontent,e,string,expected,json,throws,ioexception,bytes,reference,actual,xcontent,helper,to,xcontent,e,xcontent,type,json,random,boolean,assert,to,xcontent,equivalent,new,bytes,array,expected,json,actual,xcontent,type,json
ElasticsearchExceptionTests -> private static void assertToXContentAsJson(ToXContent e, String expectedJson) throws IOException;1548770291;Builds a {@link ToXContent} using a JSON XContentBuilder and compares the result to the given json in string format.__By default, the stack trace of the exception is not rendered. The parameter `errorTrace` forces the stack trace to_be rendered like the REST API does when the "error_trace" parameter is set to true.;private static void assertToXContentAsJson(ToXContent e, String expectedJson) throws IOException {_        BytesReference actual = XContentHelper.toXContent(e, XContentType.JSON, randomBoolean())__        assertToXContentEquivalent(new BytesArray(expectedJson), actual, XContentType.JSON)__    };builds,a,link,to,xcontent,using,a,json,xcontent,builder,and,compares,the,result,to,the,given,json,in,string,format,by,default,the,stack,trace,of,the,exception,is,not,rendered,the,parameter,error,trace,forces,the,stack,trace,to,be,rendered,like,the,rest,api,does,when,the,parameter,is,set,to,true;private,static,void,assert,to,xcontent,as,json,to,xcontent,e,string,expected,json,throws,ioexception,bytes,reference,actual,xcontent,helper,to,xcontent,e,xcontent,type,json,random,boolean,assert,to,xcontent,equivalent,new,bytes,array,expected,json,actual,xcontent,type,json
ElasticsearchExceptionTests -> private static void assertToXContentAsJson(ToXContent e, String expectedJson) throws IOException;1549356476;Builds a {@link ToXContent} using a JSON XContentBuilder and compares the result to the given json in string format.__By default, the stack trace of the exception is not rendered. The parameter `errorTrace` forces the stack trace to_be rendered like the REST API does when the "error_trace" parameter is set to true.;private static void assertToXContentAsJson(ToXContent e, String expectedJson) throws IOException {_        BytesReference actual = XContentHelper.toXContent(e, XContentType.JSON, randomBoolean())__        assertToXContentEquivalent(new BytesArray(expectedJson), actual, XContentType.JSON)__    };builds,a,link,to,xcontent,using,a,json,xcontent,builder,and,compares,the,result,to,the,given,json,in,string,format,by,default,the,stack,trace,of,the,exception,is,not,rendered,the,parameter,error,trace,forces,the,stack,trace,to,be,rendered,like,the,rest,api,does,when,the,parameter,is,set,to,true;private,static,void,assert,to,xcontent,as,json,to,xcontent,e,string,expected,json,throws,ioexception,bytes,reference,actual,xcontent,helper,to,xcontent,e,xcontent,type,json,random,boolean,assert,to,xcontent,equivalent,new,bytes,array,expected,json,actual,xcontent,type,json
