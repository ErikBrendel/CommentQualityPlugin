commented;modifiers;parameterAmount;loc;comment;code
false;public;0;40;;@Override public void setupSuiteScopeCluster() throws Exception {     assertAcked(client().admin().indices().prepareCreate("idx").addMapping("type", "tag", "type=keyword").get()).     List<IndexRequestBuilder> builders = new ArrayList<>().     numDocs = randomIntBetween(5, 20).     numDocsMissing = randomIntBetween(1, numDocs - 1).     for (int i = 0. i < numDocsMissing. i++) {         builders.add(client().prepareIndex("idx", "type", "" + i).setSource(jsonBuilder().startObject().field("value", i).endObject())).     }     for (int i = numDocsMissing. i < numDocs. i++) {         builders.add(client().prepareIndex("idx", "type", "" + i).setSource(jsonBuilder().startObject().field("tag", "tag1").endObject())).     }     createIndex("unmapped_idx").     numDocsUnmapped = randomIntBetween(2, 5).     for (int i = 0. i < numDocsUnmapped. i++) {         builders.add(client().prepareIndex("unmapped_idx", "type", "" + i).setSource(jsonBuilder().startObject().field("value", i).endObject())).     }     prepareCreate("empty_bucket_idx").addMapping("type", "value", "type=integer").get().     for (int i = 0. i < 2. i++) {         builders.add(client().prepareIndex("empty_bucket_idx", "type", "" + i).setSource(jsonBuilder().startObject().field("value", i * 2).endObject())).     }     indexRandom(true, builders).     ensureSearchable(). }
false;public;0;13;;public void testUnmapped() throws Exception {     SearchResponse response = client().prepareSearch("unmapped_idx").addAggregation(missing("missing_tag").field("tag")).get().     assertSearchResponse(response).     Missing missing = response.getAggregations().get("missing_tag").     assertThat(missing, notNullValue()).     assertThat(missing.getName(), equalTo("missing_tag")).     assertThat(missing.getDocCount(), equalTo((long) numDocsUnmapped)). }
false;public;0;13;;public void testPartiallyUnmapped() throws Exception {     SearchResponse response = client().prepareSearch("idx", "unmapped_idx").addAggregation(missing("missing_tag").field("tag")).get().     assertSearchResponse(response).     Missing missing = response.getAggregations().get("missing_tag").     assertThat(missing, notNullValue()).     assertThat(missing.getName(), equalTo("missing_tag")).     assertThat(missing.getDocCount(), equalTo((long) numDocsMissing + numDocsUnmapped)). }
false;public;0;13;;public void testSimple() throws Exception {     SearchResponse response = client().prepareSearch("idx").addAggregation(missing("missing_tag").field("tag")).get().     assertSearchResponse(response).     Missing missing = response.getAggregations().get("missing_tag").     assertThat(missing, notNullValue()).     assertThat(missing.getName(), equalTo("missing_tag")).     assertThat(missing.getDocCount(), equalTo((long) numDocsMissing)). }
false;public;0;31;;public void testWithSubAggregation() throws Exception {     SearchResponse response = client().prepareSearch("idx", "unmapped_idx").addAggregation(missing("missing_tag").field("tag").subAggregation(avg("avg_value").field("value"))).get().     assertSearchResponse(response).     assertThat("Not all shards are initialized", response.getSuccessfulShards(), equalTo(response.getTotalShards())).     Missing missing = response.getAggregations().get("missing_tag").     assertThat(missing, notNullValue()).     assertThat(missing.getName(), equalTo("missing_tag")).     assertThat(missing.getDocCount(), equalTo((long) numDocsMissing + numDocsUnmapped)).     assertThat((long) ((InternalAggregation) missing).getProperty("_count"), equalTo((long) numDocsMissing + numDocsUnmapped)).     assertThat(missing.getAggregations().asList().isEmpty(), is(false)).     long sum = 0.     for (int i = 0. i < numDocsMissing. ++i) {         sum += i.     }     for (int i = 0. i < numDocsUnmapped. ++i) {         sum += i.     }     Avg avgValue = missing.getAggregations().get("avg_value").     assertThat(avgValue, notNullValue()).     assertThat(avgValue.getName(), equalTo("avg_value")).     assertThat(avgValue.getValue(), equalTo((double) sum / (numDocsMissing + numDocsUnmapped))).     assertThat((double) ((InternalAggregation) missing).getProperty("avg_value.value"), equalTo((double) sum / (numDocsMissing + numDocsUnmapped))). }
false;public;0;18;;public void testEmptyAggregation() throws Exception {     SearchResponse searchResponse = client().prepareSearch("empty_bucket_idx").setQuery(matchAllQuery()).addAggregation(histogram("histo").field("value").interval(1L).minDocCount(0).subAggregation(missing("missing").field("value"))).get().     assertThat(searchResponse.getHits().getTotalHits().value, equalTo(2L)).     Histogram histo = searchResponse.getAggregations().get("histo").     assertThat(histo, Matchers.notNullValue()).     Histogram.Bucket bucket = histo.getBuckets().get(1).     assertThat(bucket, Matchers.notNullValue()).     Missing missing = bucket.getAggregations().get("missing").     assertThat(missing, Matchers.notNullValue()).     assertThat(missing.getName(), equalTo("missing")).     assertThat(missing.getDocCount(), is(0L)). }
