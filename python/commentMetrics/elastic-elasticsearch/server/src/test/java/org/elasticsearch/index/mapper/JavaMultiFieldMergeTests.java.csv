commented;modifiers;parameterAmount;loc;comment;code
false;public;0;53;;public void testMergeMultiField() throws Exception {     String mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json").     MapperService mapperService = createIndex("test").mapperService().     mapperService.merge("person", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE).     assertNotSame(IndexOptions.NONE, mapperService.fullName("name").indexOptions()).     assertThat(mapperService.fullName("name.indexed"), nullValue()).     BytesReference json = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("name", "some name").endObject()).     Document doc = mapperService.documentMapper().parse(new SourceToParse("test", "person", "1", json, XContentType.JSON)).rootDoc().     IndexableField f = doc.getField("name").     assertThat(f, notNullValue()).     f = doc.getField("name.indexed").     assertThat(f, nullValue()).     mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/multifield/merge/test-mapping2.json").     mapperService.merge("person", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE).     assertNotSame(IndexOptions.NONE, mapperService.fullName("name").indexOptions()).     assertThat(mapperService.fullName("name.indexed"), notNullValue()).     assertThat(mapperService.fullName("name.not_indexed"), notNullValue()).     assertThat(mapperService.fullName("name.not_indexed2"), nullValue()).     assertThat(mapperService.fullName("name.not_indexed3"), nullValue()).     doc = mapperService.documentMapper().parse(new SourceToParse("test", "person", "1", json, XContentType.JSON)).rootDoc().     f = doc.getField("name").     assertThat(f, notNullValue()).     f = doc.getField("name.indexed").     assertThat(f, notNullValue()).     mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/multifield/merge/test-mapping3.json").     mapperService.merge("person", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE).     assertNotSame(IndexOptions.NONE, mapperService.fullName("name").indexOptions()).     assertThat(mapperService.fullName("name.indexed"), notNullValue()).     assertThat(mapperService.fullName("name.not_indexed"), notNullValue()).     assertThat(mapperService.fullName("name.not_indexed2"), notNullValue()).     assertThat(mapperService.fullName("name.not_indexed3"), nullValue()).     mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/multifield/merge/test-mapping4.json").     mapperService.merge("person", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE).     assertNotSame(IndexOptions.NONE, mapperService.fullName("name").indexOptions()).     assertThat(mapperService.fullName("name.indexed"), notNullValue()).     assertThat(mapperService.fullName("name.not_indexed"), notNullValue()).     assertThat(mapperService.fullName("name.not_indexed2"), notNullValue()).     assertThat(mapperService.fullName("name.not_indexed3"), notNullValue()). }
false;public;0;62;;public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception {     String mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json").     MapperService mapperService = createIndex("test").mapperService().     mapperService.merge("person", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE).     assertNotSame(IndexOptions.NONE, mapperService.fullName("name").indexOptions()).     assertThat(mapperService.fullName("name.indexed"), nullValue()).     BytesReference json = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("name", "some name").endObject()).     Document doc = mapperService.documentMapper().parse(new SourceToParse("test", "person", "1", json, XContentType.JSON)).rootDoc().     IndexableField f = doc.getField("name").     assertThat(f, notNullValue()).     f = doc.getField("name.indexed").     assertThat(f, nullValue()).     mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/multifield/merge/upgrade1.json").     mapperService.merge("person", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE).     assertNotSame(IndexOptions.NONE, mapperService.fullName("name").indexOptions()).     assertThat(mapperService.fullName("name.indexed"), notNullValue()).     assertThat(mapperService.fullName("name.not_indexed"), notNullValue()).     assertThat(mapperService.fullName("name.not_indexed2"), nullValue()).     assertThat(mapperService.fullName("name.not_indexed3"), nullValue()).     doc = mapperService.documentMapper().parse(new SourceToParse("test", "person", "1", json, XContentType.JSON)).rootDoc().     f = doc.getField("name").     assertThat(f, notNullValue()).     f = doc.getField("name.indexed").     assertThat(f, notNullValue()).     mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/multifield/merge/upgrade2.json").     mapperService.merge("person", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE).     assertNotSame(IndexOptions.NONE, mapperService.fullName("name").indexOptions()).     assertThat(mapperService.fullName("name.indexed"), notNullValue()).     assertThat(mapperService.fullName("name.not_indexed"), notNullValue()).     assertThat(mapperService.fullName("name.not_indexed2"), notNullValue()).     assertThat(mapperService.fullName("name.not_indexed3"), nullValue()).     mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/multifield/merge/upgrade3.json").     try {         mapperService.merge("person", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE).         fail().     } catch (IllegalArgumentException e) {         assertThat(e.getMessage(), containsString("mapper [name] has different [index] values")).         assertThat(e.getMessage(), containsString("mapper [name] has different [store] values")).     }     // There are conflicts, so the `name.not_indexed3` has not been added     assertNotSame(IndexOptions.NONE, mapperService.fullName("name").indexOptions()).     assertThat(mapperService.fullName("name.indexed"), notNullValue()).     assertThat(mapperService.fullName("name.not_indexed"), notNullValue()).     assertThat(mapperService.fullName("name.not_indexed2"), notNullValue()).     assertThat(mapperService.fullName("name.not_indexed3"), nullValue()). }
