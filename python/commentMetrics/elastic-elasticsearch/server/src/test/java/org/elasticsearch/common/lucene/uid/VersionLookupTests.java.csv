commented;modifiers;parameterAmount;loc;comment;code
true;public;0;31;/**  * test version lookup actually works  */ ;/**  * test version lookup actually works  */ public void testSimple() throws Exception {     Directory dir = newDirectory().     IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Lucene.STANDARD_ANALYZER).setMergePolicy(NoMergePolicy.INSTANCE)).     Document doc = new Document().     doc.add(new Field(IdFieldMapper.NAME, "6", IdFieldMapper.Defaults.FIELD_TYPE)).     doc.add(new NumericDocValuesField(VersionFieldMapper.NAME, 87)).     writer.addDocument(doc).     writer.addDocument(new Document()).     DirectoryReader reader = DirectoryReader.open(writer).     LeafReaderContext segment = reader.leaves().get(0).     PerThreadIDVersionAndSeqNoLookup lookup = new PerThreadIDVersionAndSeqNoLookup(segment.reader(), IdFieldMapper.NAME).     // found doc     DocIdAndVersion result = lookup.lookupVersion(new BytesRef("6"), randomBoolean(), segment).     assertNotNull(result).     assertEquals(87, result.version).     assertEquals(0, result.docId).     // not found doc     assertNull(lookup.lookupVersion(new BytesRef("7"), randomBoolean(), segment)).     // deleted doc     writer.deleteDocuments(new Term(IdFieldMapper.NAME, "6")).     reader.close().     reader = DirectoryReader.open(writer).     segment = reader.leaves().get(0).     lookup = new PerThreadIDVersionAndSeqNoLookup(segment.reader(), IdFieldMapper.NAME).     assertNull(lookup.lookupVersion(new BytesRef("6"), randomBoolean(), segment)).     reader.close().     writer.close().     dir.close(). }
true;public;0;39;/**  * test version lookup with two documents matching the ID  */ ;/**  * test version lookup with two documents matching the ID  */ public void testTwoDocuments() throws Exception {     Directory dir = newDirectory().     IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Lucene.STANDARD_ANALYZER).setMergePolicy(NoMergePolicy.INSTANCE)).     Document doc = new Document().     doc.add(new Field(IdFieldMapper.NAME, "6", IdFieldMapper.Defaults.FIELD_TYPE)).     doc.add(new NumericDocValuesField(VersionFieldMapper.NAME, 87)).     writer.addDocument(doc).     writer.addDocument(doc).     writer.addDocument(new Document()).     DirectoryReader reader = DirectoryReader.open(writer).     LeafReaderContext segment = reader.leaves().get(0).     PerThreadIDVersionAndSeqNoLookup lookup = new PerThreadIDVersionAndSeqNoLookup(segment.reader(), IdFieldMapper.NAME).     // return the last doc when there are duplicates     DocIdAndVersion result = lookup.lookupVersion(new BytesRef("6"), randomBoolean(), segment).     assertNotNull(result).     assertEquals(87, result.version).     assertEquals(1, result.docId).     // delete the first doc only     assertTrue(writer.tryDeleteDocument(reader, 0) >= 0).     reader.close().     reader = DirectoryReader.open(writer).     segment = reader.leaves().get(0).     lookup = new PerThreadIDVersionAndSeqNoLookup(segment.reader(), IdFieldMapper.NAME).     result = lookup.lookupVersion(new BytesRef("6"), randomBoolean(), segment).     assertNotNull(result).     assertEquals(87, result.version).     assertEquals(1, result.docId).     // delete both docs     assertTrue(writer.tryDeleteDocument(reader, 1) >= 0).     reader.close().     reader = DirectoryReader.open(writer).     segment = reader.leaves().get(0).     lookup = new PerThreadIDVersionAndSeqNoLookup(segment.reader(), IdFieldMapper.NAME).     assertNull(lookup.lookupVersion(new BytesRef("6"), randomBoolean(), segment)).     reader.close().     writer.close().     dir.close(). }
