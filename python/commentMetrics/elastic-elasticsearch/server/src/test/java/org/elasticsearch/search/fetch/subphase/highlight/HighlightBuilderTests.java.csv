# id;timestamp;commentText;codeText;commentWords;codeWords
HighlightBuilderTests -> @BeforeClass     public static void init();1524684173;setup for the whole base test class;@BeforeClass_    public static void init() {_        SearchModule searchModule = new SearchModule(Settings.EMPTY, false, emptyList())__        namedWriteableRegistry = new NamedWriteableRegistry(searchModule.getNamedWriteables())__        xContentRegistry = new NamedXContentRegistry(searchModule.getNamedXContents())__    };setup,for,the,whole,base,test,class;before,class,public,static,void,init,search,module,search,module,new,search,module,settings,empty,false,empty,list,named,writeable,registry,new,named,writeable,registry,search,module,get,named,writeables,x,content,registry,new,named,xcontent,registry,search,module,get,named,xcontents
HighlightBuilderTests -> @BeforeClass     public static void init();1528167589;setup for the whole base test class;@BeforeClass_    public static void init() {_        SearchModule searchModule = new SearchModule(Settings.EMPTY, false, emptyList())__        namedWriteableRegistry = new NamedWriteableRegistry(searchModule.getNamedWriteables())__        xContentRegistry = new NamedXContentRegistry(searchModule.getNamedXContents())__    };setup,for,the,whole,base,test,class;before,class,public,static,void,init,search,module,search,module,new,search,module,settings,empty,false,empty,list,named,writeable,registry,new,named,writeable,registry,search,module,get,named,writeables,x,content,registry,new,named,xcontent,registry,search,module,get,named,xcontents
HighlightBuilderTests -> @BeforeClass     public static void init();1529916084;setup for the whole base test class;@BeforeClass_    public static void init() {_        SearchModule searchModule = new SearchModule(Settings.EMPTY, false, emptyList())__        namedWriteableRegistry = new NamedWriteableRegistry(searchModule.getNamedWriteables())__        xContentRegistry = new NamedXContentRegistry(searchModule.getNamedXContents())__    };setup,for,the,whole,base,test,class;before,class,public,static,void,init,search,module,search,module,new,search,module,settings,empty,false,empty,list,named,writeable,registry,new,named,writeable,registry,search,module,get,named,writeables,x,content,registry,new,named,xcontent,registry,search,module,get,named,xcontents
HighlightBuilderTests -> @BeforeClass     public static void init();1534755962;setup for the whole base test class;@BeforeClass_    public static void init() {_        SearchModule searchModule = new SearchModule(Settings.EMPTY, false, emptyList())__        namedWriteableRegistry = new NamedWriteableRegistry(searchModule.getNamedWriteables())__        xContentRegistry = new NamedXContentRegistry(searchModule.getNamedXContents())__    };setup,for,the,whole,base,test,class;before,class,public,static,void,init,search,module,search,module,new,search,module,settings,empty,false,empty,list,named,writeable,registry,new,named,writeable,registry,search,module,get,named,writeables,x,content,registry,new,named,xcontent,registry,search,module,get,named,xcontents
HighlightBuilderTests -> @BeforeClass     public static void init();1537806831;setup for the whole base test class;@BeforeClass_    public static void init() {_        SearchModule searchModule = new SearchModule(Settings.EMPTY, false, emptyList())__        namedWriteableRegistry = new NamedWriteableRegistry(searchModule.getNamedWriteables())__        xContentRegistry = new NamedXContentRegistry(searchModule.getNamedXContents())__    };setup,for,the,whole,base,test,class;before,class,public,static,void,init,search,module,search,module,new,search,module,settings,empty,false,empty,list,named,writeable,registry,new,named,writeable,registry,search,module,get,named,writeables,x,content,registry,new,named,xcontent,registry,search,module,get,named,xcontents
HighlightBuilderTests -> public void testSerialization() throws IOException;1524684173;Test serialization and deserialization of the highlighter builder;public void testSerialization() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            HighlightBuilder original = randomHighlighterBuilder()__            HighlightBuilder deserialized = serializedCopy(original)__            assertEquals(deserialized, original)__            assertEquals(deserialized.hashCode(), original.hashCode())__            assertNotSame(deserialized, original)__        }_    };test,serialization,and,deserialization,of,the,highlighter,builder;public,void,test,serialization,throws,ioexception,for,int,runs,0,runs,runs,highlight,builder,original,random,highlighter,builder,highlight,builder,deserialized,serialized,copy,original,assert,equals,deserialized,original,assert,equals,deserialized,hash,code,original,hash,code,assert,not,same,deserialized,original
HighlightBuilderTests -> public void testSerialization() throws IOException;1528167589;Test serialization and deserialization of the highlighter builder;public void testSerialization() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            HighlightBuilder original = randomHighlighterBuilder()__            HighlightBuilder deserialized = serializedCopy(original)__            assertEquals(deserialized, original)__            assertEquals(deserialized.hashCode(), original.hashCode())__            assertNotSame(deserialized, original)__        }_    };test,serialization,and,deserialization,of,the,highlighter,builder;public,void,test,serialization,throws,ioexception,for,int,runs,0,runs,runs,highlight,builder,original,random,highlighter,builder,highlight,builder,deserialized,serialized,copy,original,assert,equals,deserialized,original,assert,equals,deserialized,hash,code,original,hash,code,assert,not,same,deserialized,original
HighlightBuilderTests -> public void testSerialization() throws IOException;1529916084;Test serialization and deserialization of the highlighter builder;public void testSerialization() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            HighlightBuilder original = randomHighlighterBuilder()__            HighlightBuilder deserialized = serializedCopy(original)__            assertEquals(deserialized, original)__            assertEquals(deserialized.hashCode(), original.hashCode())__            assertNotSame(deserialized, original)__        }_    };test,serialization,and,deserialization,of,the,highlighter,builder;public,void,test,serialization,throws,ioexception,for,int,runs,0,runs,runs,highlight,builder,original,random,highlighter,builder,highlight,builder,deserialized,serialized,copy,original,assert,equals,deserialized,original,assert,equals,deserialized,hash,code,original,hash,code,assert,not,same,deserialized,original
HighlightBuilderTests -> public void testSerialization() throws IOException;1534755962;Test serialization and deserialization of the highlighter builder;public void testSerialization() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            HighlightBuilder original = randomHighlighterBuilder()__            HighlightBuilder deserialized = serializedCopy(original)__            assertEquals(deserialized, original)__            assertEquals(deserialized.hashCode(), original.hashCode())__            assertNotSame(deserialized, original)__        }_    };test,serialization,and,deserialization,of,the,highlighter,builder;public,void,test,serialization,throws,ioexception,for,int,runs,0,runs,runs,highlight,builder,original,random,highlighter,builder,highlight,builder,deserialized,serialized,copy,original,assert,equals,deserialized,original,assert,equals,deserialized,hash,code,original,hash,code,assert,not,same,deserialized,original
HighlightBuilderTests -> public void testSerialization() throws IOException;1537806831;Test serialization and deserialization of the highlighter builder;public void testSerialization() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            HighlightBuilder original = randomHighlighterBuilder()__            HighlightBuilder deserialized = serializedCopy(original)__            assertEquals(deserialized, original)__            assertEquals(deserialized.hashCode(), original.hashCode())__            assertNotSame(deserialized, original)__        }_    };test,serialization,and,deserialization,of,the,highlighter,builder;public,void,test,serialization,throws,ioexception,for,int,runs,0,runs,runs,highlight,builder,original,random,highlighter,builder,highlight,builder,deserialized,serialized,copy,original,assert,equals,deserialized,original,assert,equals,deserialized,hash,code,original,hash,code,assert,not,same,deserialized,original
HighlightBuilderTests -> private static HighlightBuilder mutate(HighlightBuilder original) throws IOException;1524684173;mutate the given highlighter builder so the returned one is different in one aspect;private static HighlightBuilder mutate(HighlightBuilder original) throws IOException {_        HighlightBuilder mutation = serializedCopy(original)__        if (randomBoolean()) {_            mutateCommonOptions(mutation)__        } else {_            switch (randomIntBetween(0, 2)) {_                _                case 0:_                    mutation.useExplicitFieldOrder(!original.useExplicitFieldOrder())_ break__                case 1:_                    mutation.encoder(original.encoder() + randomAlphaOfLength(2))_ break__                case 2:_                    if (randomBoolean()) {_                        _                        mutation.field(new Field(randomAlphaOfLength(10)))__                    } else {_                        _                        List<Field> originalFields = original.fields()__                        Field fieldToChange = originalFields.get(randomInt(originalFields.size() - 1))__                        if (randomBoolean()) {_                            fieldToChange.fragmentOffset(randomIntBetween(101, 200))__                        } else {_                            fieldToChange.matchedFields(randomStringArray(5, 10))__                        }_                    }_                    break__            }_        }_        return mutation__    };mutate,the,given,highlighter,builder,so,the,returned,one,is,different,in,one,aspect;private,static,highlight,builder,mutate,highlight,builder,original,throws,ioexception,highlight,builder,mutation,serialized,copy,original,if,random,boolean,mutate,common,options,mutation,else,switch,random,int,between,0,2,case,0,mutation,use,explicit,field,order,original,use,explicit,field,order,break,case,1,mutation,encoder,original,encoder,random,alpha,of,length,2,break,case,2,if,random,boolean,mutation,field,new,field,random,alpha,of,length,10,else,list,field,original,fields,original,fields,field,field,to,change,original,fields,get,random,int,original,fields,size,1,if,random,boolean,field,to,change,fragment,offset,random,int,between,101,200,else,field,to,change,matched,fields,random,string,array,5,10,break,return,mutation
HighlightBuilderTests -> private static HighlightBuilder mutate(HighlightBuilder original) throws IOException;1528167589;mutate the given highlighter builder so the returned one is different in one aspect;private static HighlightBuilder mutate(HighlightBuilder original) throws IOException {_        HighlightBuilder mutation = serializedCopy(original)__        if (randomBoolean()) {_            mutateCommonOptions(mutation)__        } else {_            switch (randomIntBetween(0, 2)) {_                _                case 0:_                    mutation.useExplicitFieldOrder(!original.useExplicitFieldOrder())_ break__                case 1:_                    mutation.encoder(original.encoder() + randomAlphaOfLength(2))_ break__                case 2:_                    if (randomBoolean()) {_                        _                        mutation.field(new Field(randomAlphaOfLength(10)))__                    } else {_                        _                        List<Field> originalFields = original.fields()__                        Field fieldToChange = originalFields.get(randomInt(originalFields.size() - 1))__                        if (randomBoolean()) {_                            fieldToChange.fragmentOffset(randomIntBetween(101, 200))__                        } else {_                            fieldToChange.matchedFields(randomStringArray(5, 10))__                        }_                    }_                    break__            }_        }_        return mutation__    };mutate,the,given,highlighter,builder,so,the,returned,one,is,different,in,one,aspect;private,static,highlight,builder,mutate,highlight,builder,original,throws,ioexception,highlight,builder,mutation,serialized,copy,original,if,random,boolean,mutate,common,options,mutation,else,switch,random,int,between,0,2,case,0,mutation,use,explicit,field,order,original,use,explicit,field,order,break,case,1,mutation,encoder,original,encoder,random,alpha,of,length,2,break,case,2,if,random,boolean,mutation,field,new,field,random,alpha,of,length,10,else,list,field,original,fields,original,fields,field,field,to,change,original,fields,get,random,int,original,fields,size,1,if,random,boolean,field,to,change,fragment,offset,random,int,between,101,200,else,field,to,change,matched,fields,random,string,array,5,10,break,return,mutation
HighlightBuilderTests -> private static HighlightBuilder mutate(HighlightBuilder original) throws IOException;1529916084;mutate the given highlighter builder so the returned one is different in one aspect;private static HighlightBuilder mutate(HighlightBuilder original) throws IOException {_        HighlightBuilder mutation = serializedCopy(original)__        if (randomBoolean()) {_            mutateCommonOptions(mutation)__        } else {_            switch (randomIntBetween(0, 2)) {_                _                case 0:_                    mutation.useExplicitFieldOrder(!original.useExplicitFieldOrder())_ break__                case 1:_                    mutation.encoder(original.encoder() + randomAlphaOfLength(2))_ break__                case 2:_                    if (randomBoolean()) {_                        _                        mutation.field(new Field(randomAlphaOfLength(10)))__                    } else {_                        _                        List<Field> originalFields = original.fields()__                        Field fieldToChange = originalFields.get(randomInt(originalFields.size() - 1))__                        if (randomBoolean()) {_                            fieldToChange.fragmentOffset(randomIntBetween(101, 200))__                        } else {_                            fieldToChange.matchedFields(randomStringArray(5, 10))__                        }_                    }_                    break__            }_        }_        return mutation__    };mutate,the,given,highlighter,builder,so,the,returned,one,is,different,in,one,aspect;private,static,highlight,builder,mutate,highlight,builder,original,throws,ioexception,highlight,builder,mutation,serialized,copy,original,if,random,boolean,mutate,common,options,mutation,else,switch,random,int,between,0,2,case,0,mutation,use,explicit,field,order,original,use,explicit,field,order,break,case,1,mutation,encoder,original,encoder,random,alpha,of,length,2,break,case,2,if,random,boolean,mutation,field,new,field,random,alpha,of,length,10,else,list,field,original,fields,original,fields,field,field,to,change,original,fields,get,random,int,original,fields,size,1,if,random,boolean,field,to,change,fragment,offset,random,int,between,101,200,else,field,to,change,matched,fields,random,string,array,5,10,break,return,mutation
HighlightBuilderTests -> private static HighlightBuilder mutate(HighlightBuilder original) throws IOException;1534755962;mutate the given highlighter builder so the returned one is different in one aspect;private static HighlightBuilder mutate(HighlightBuilder original) throws IOException {_        HighlightBuilder mutation = serializedCopy(original)__        if (randomBoolean()) {_            mutateCommonOptions(mutation)__        } else {_            switch (randomIntBetween(0, 2)) {_                _                case 0:_                    mutation.useExplicitFieldOrder(!original.useExplicitFieldOrder())_ break__                case 1:_                    mutation.encoder(original.encoder() + randomAlphaOfLength(2))_ break__                case 2:_                    if (randomBoolean()) {_                        _                        mutation.field(new Field(randomAlphaOfLength(10)))__                    } else {_                        _                        List<Field> originalFields = original.fields()__                        Field fieldToChange = originalFields.get(randomInt(originalFields.size() - 1))__                        if (randomBoolean()) {_                            fieldToChange.fragmentOffset(randomIntBetween(101, 200))__                        } else {_                            fieldToChange.matchedFields(randomStringArray(5, 10))__                        }_                    }_                    break__            }_        }_        return mutation__    };mutate,the,given,highlighter,builder,so,the,returned,one,is,different,in,one,aspect;private,static,highlight,builder,mutate,highlight,builder,original,throws,ioexception,highlight,builder,mutation,serialized,copy,original,if,random,boolean,mutate,common,options,mutation,else,switch,random,int,between,0,2,case,0,mutation,use,explicit,field,order,original,use,explicit,field,order,break,case,1,mutation,encoder,original,encoder,random,alpha,of,length,2,break,case,2,if,random,boolean,mutation,field,new,field,random,alpha,of,length,10,else,list,field,original,fields,original,fields,field,field,to,change,original,fields,get,random,int,original,fields,size,1,if,random,boolean,field,to,change,fragment,offset,random,int,between,101,200,else,field,to,change,matched,fields,random,string,array,5,10,break,return,mutation
HighlightBuilderTests -> private static HighlightBuilder mutate(HighlightBuilder original) throws IOException;1537806831;mutate the given highlighter builder so the returned one is different in one aspect;private static HighlightBuilder mutate(HighlightBuilder original) throws IOException {_        HighlightBuilder mutation = serializedCopy(original)__        if (randomBoolean()) {_            mutateCommonOptions(mutation)__        } else {_            switch (randomIntBetween(0, 2)) {_                _                case 0:_                    mutation.useExplicitFieldOrder(!original.useExplicitFieldOrder())__                    break__                case 1:_                    mutation.encoder(original.encoder() + randomAlphaOfLength(2))__                    break__                case 2:_                    if (randomBoolean()) {_                        _                        mutation.field(new Field(randomAlphaOfLength(10)))__                    } else {_                        _                        List<Field> originalFields = original.fields()__                        Field fieldToChange = originalFields.get(randomInt(originalFields.size() - 1))__                        if (randomBoolean()) {_                            fieldToChange.fragmentOffset(randomIntBetween(101, 200))__                        } else {_                            fieldToChange.matchedFields(randomStringArray(5, 10))__                        }_                    }_                    break__            }_        }_        return mutation__    };mutate,the,given,highlighter,builder,so,the,returned,one,is,different,in,one,aspect;private,static,highlight,builder,mutate,highlight,builder,original,throws,ioexception,highlight,builder,mutation,serialized,copy,original,if,random,boolean,mutate,common,options,mutation,else,switch,random,int,between,0,2,case,0,mutation,use,explicit,field,order,original,use,explicit,field,order,break,case,1,mutation,encoder,original,encoder,random,alpha,of,length,2,break,case,2,if,random,boolean,mutation,field,new,field,random,alpha,of,length,10,else,list,field,original,fields,original,fields,field,field,to,change,original,fields,get,random,int,original,fields,size,1,if,random,boolean,field,to,change,fragment,offset,random,int,between,101,200,else,field,to,change,matched,fields,random,string,array,5,10,break,return,mutation
HighlightBuilderTests -> private static BiConsumer<Function<AbstractHighlighterBuilder<?>, Object>, Function<FieldOptions, Object>> mergeBeforeChek(             HighlightBuilder highlightBuilder, Field fieldBuilder, FieldOptions options);1524684173;Create a generic helper function that performs all the work of merging the global highlight builder parameter,_the (potential) overwrite on the field level and the default value from {@link HighlightBuilder#defaultOptions}_before making the assertion that the value in the highlight builder and the actual value in the {@link FieldOptions}_passed in is the same.__@param highlightBuilder provides the (optional) global builder parameter_@param fieldBuilder provides the (optional) field level parameter, if present this overwrites the global value_@param options the target field options that are checked;private static BiConsumer<Function<AbstractHighlighterBuilder<?>, Object>, Function<FieldOptions, Object>> mergeBeforeChek(_            HighlightBuilder highlightBuilder, Field fieldBuilder, FieldOptions options) {_        return (highlightBuilderParameterAccessor, fieldOptionsParameterAccessor) -> {_            Object expectedValue = null__            Object globalLevelValue = highlightBuilderParameterAccessor.apply(highlightBuilder)__            Object fieldLevelValue = highlightBuilderParameterAccessor.apply(fieldBuilder)__            if (fieldLevelValue != null) {_                expectedValue = fieldLevelValue__            } else if (globalLevelValue != null) {_                expectedValue = globalLevelValue__            } else {_                expectedValue = fieldOptionsParameterAccessor.apply(HighlightBuilder.defaultOptions)__            }_            Object actualValue = fieldOptionsParameterAccessor.apply(options)__            if (actualValue instanceof String[]) {_                assertArrayEquals((String[]) expectedValue, (String[]) actualValue)__            } else if (actualValue instanceof Character[]) {_                if (expectedValue instanceof char[]) {_                    assertArrayEquals(HighlightBuilder.convertCharArray((char[]) expectedValue), (Character[]) actualValue)__                } else {_                    assertArrayEquals((Character[]) expectedValue, (Character[]) actualValue)__                }_            } else {_                assertEquals(expectedValue, actualValue)__            }_        }__    };create,a,generic,helper,function,that,performs,all,the,work,of,merging,the,global,highlight,builder,parameter,the,potential,overwrite,on,the,field,level,and,the,default,value,from,link,highlight,builder,default,options,before,making,the,assertion,that,the,value,in,the,highlight,builder,and,the,actual,value,in,the,link,field,options,passed,in,is,the,same,param,highlight,builder,provides,the,optional,global,builder,parameter,param,field,builder,provides,the,optional,field,level,parameter,if,present,this,overwrites,the,global,value,param,options,the,target,field,options,that,are,checked;private,static,bi,consumer,function,abstract,highlighter,builder,object,function,field,options,object,merge,before,chek,highlight,builder,highlight,builder,field,field,builder,field,options,options,return,highlight,builder,parameter,accessor,field,options,parameter,accessor,object,expected,value,null,object,global,level,value,highlight,builder,parameter,accessor,apply,highlight,builder,object,field,level,value,highlight,builder,parameter,accessor,apply,field,builder,if,field,level,value,null,expected,value,field,level,value,else,if,global,level,value,null,expected,value,global,level,value,else,expected,value,field,options,parameter,accessor,apply,highlight,builder,default,options,object,actual,value,field,options,parameter,accessor,apply,options,if,actual,value,instanceof,string,assert,array,equals,string,expected,value,string,actual,value,else,if,actual,value,instanceof,character,if,expected,value,instanceof,char,assert,array,equals,highlight,builder,convert,char,array,char,expected,value,character,actual,value,else,assert,array,equals,character,expected,value,character,actual,value,else,assert,equals,expected,value,actual,value
HighlightBuilderTests -> private static BiConsumer<Function<AbstractHighlighterBuilder<?>, Object>, Function<FieldOptions, Object>> mergeBeforeChek(             HighlightBuilder highlightBuilder, Field fieldBuilder, FieldOptions options);1528167589;Create a generic helper function that performs all the work of merging the global highlight builder parameter,_the (potential) overwrite on the field level and the default value from {@link HighlightBuilder#defaultOptions}_before making the assertion that the value in the highlight builder and the actual value in the {@link FieldOptions}_passed in is the same.__@param highlightBuilder provides the (optional) global builder parameter_@param fieldBuilder provides the (optional) field level parameter, if present this overwrites the global value_@param options the target field options that are checked;private static BiConsumer<Function<AbstractHighlighterBuilder<?>, Object>, Function<FieldOptions, Object>> mergeBeforeChek(_            HighlightBuilder highlightBuilder, Field fieldBuilder, FieldOptions options) {_        return (highlightBuilderParameterAccessor, fieldOptionsParameterAccessor) -> {_            Object expectedValue = null__            Object globalLevelValue = highlightBuilderParameterAccessor.apply(highlightBuilder)__            Object fieldLevelValue = highlightBuilderParameterAccessor.apply(fieldBuilder)__            if (fieldLevelValue != null) {_                expectedValue = fieldLevelValue__            } else if (globalLevelValue != null) {_                expectedValue = globalLevelValue__            } else {_                expectedValue = fieldOptionsParameterAccessor.apply(HighlightBuilder.defaultOptions)__            }_            Object actualValue = fieldOptionsParameterAccessor.apply(options)__            if (actualValue instanceof String[]) {_                assertArrayEquals((String[]) expectedValue, (String[]) actualValue)__            } else if (actualValue instanceof Character[]) {_                if (expectedValue instanceof char[]) {_                    assertArrayEquals(HighlightBuilder.convertCharArray((char[]) expectedValue), (Character[]) actualValue)__                } else {_                    assertArrayEquals((Character[]) expectedValue, (Character[]) actualValue)__                }_            } else {_                assertEquals(expectedValue, actualValue)__            }_        }__    };create,a,generic,helper,function,that,performs,all,the,work,of,merging,the,global,highlight,builder,parameter,the,potential,overwrite,on,the,field,level,and,the,default,value,from,link,highlight,builder,default,options,before,making,the,assertion,that,the,value,in,the,highlight,builder,and,the,actual,value,in,the,link,field,options,passed,in,is,the,same,param,highlight,builder,provides,the,optional,global,builder,parameter,param,field,builder,provides,the,optional,field,level,parameter,if,present,this,overwrites,the,global,value,param,options,the,target,field,options,that,are,checked;private,static,bi,consumer,function,abstract,highlighter,builder,object,function,field,options,object,merge,before,chek,highlight,builder,highlight,builder,field,field,builder,field,options,options,return,highlight,builder,parameter,accessor,field,options,parameter,accessor,object,expected,value,null,object,global,level,value,highlight,builder,parameter,accessor,apply,highlight,builder,object,field,level,value,highlight,builder,parameter,accessor,apply,field,builder,if,field,level,value,null,expected,value,field,level,value,else,if,global,level,value,null,expected,value,global,level,value,else,expected,value,field,options,parameter,accessor,apply,highlight,builder,default,options,object,actual,value,field,options,parameter,accessor,apply,options,if,actual,value,instanceof,string,assert,array,equals,string,expected,value,string,actual,value,else,if,actual,value,instanceof,character,if,expected,value,instanceof,char,assert,array,equals,highlight,builder,convert,char,array,char,expected,value,character,actual,value,else,assert,array,equals,character,expected,value,character,actual,value,else,assert,equals,expected,value,actual,value
HighlightBuilderTests -> private static BiConsumer<Function<AbstractHighlighterBuilder<?>, Object>, Function<FieldOptions, Object>> mergeBeforeChek(             HighlightBuilder highlightBuilder, Field fieldBuilder, FieldOptions options);1529916084;Create a generic helper function that performs all the work of merging the global highlight builder parameter,_the (potential) overwrite on the field level and the default value from {@link HighlightBuilder#defaultOptions}_before making the assertion that the value in the highlight builder and the actual value in the {@link FieldOptions}_passed in is the same.__@param highlightBuilder provides the (optional) global builder parameter_@param fieldBuilder provides the (optional) field level parameter, if present this overwrites the global value_@param options the target field options that are checked;private static BiConsumer<Function<AbstractHighlighterBuilder<?>, Object>, Function<FieldOptions, Object>> mergeBeforeChek(_            HighlightBuilder highlightBuilder, Field fieldBuilder, FieldOptions options) {_        return (highlightBuilderParameterAccessor, fieldOptionsParameterAccessor) -> {_            Object expectedValue = null__            Object globalLevelValue = highlightBuilderParameterAccessor.apply(highlightBuilder)__            Object fieldLevelValue = highlightBuilderParameterAccessor.apply(fieldBuilder)__            if (fieldLevelValue != null) {_                expectedValue = fieldLevelValue__            } else if (globalLevelValue != null) {_                expectedValue = globalLevelValue__            } else {_                expectedValue = fieldOptionsParameterAccessor.apply(HighlightBuilder.defaultOptions)__            }_            Object actualValue = fieldOptionsParameterAccessor.apply(options)__            if (actualValue instanceof String[]) {_                assertArrayEquals((String[]) expectedValue, (String[]) actualValue)__            } else if (actualValue instanceof Character[]) {_                if (expectedValue instanceof char[]) {_                    assertArrayEquals(HighlightBuilder.convertCharArray((char[]) expectedValue), (Character[]) actualValue)__                } else {_                    assertArrayEquals((Character[]) expectedValue, (Character[]) actualValue)__                }_            } else {_                assertEquals(expectedValue, actualValue)__            }_        }__    };create,a,generic,helper,function,that,performs,all,the,work,of,merging,the,global,highlight,builder,parameter,the,potential,overwrite,on,the,field,level,and,the,default,value,from,link,highlight,builder,default,options,before,making,the,assertion,that,the,value,in,the,highlight,builder,and,the,actual,value,in,the,link,field,options,passed,in,is,the,same,param,highlight,builder,provides,the,optional,global,builder,parameter,param,field,builder,provides,the,optional,field,level,parameter,if,present,this,overwrites,the,global,value,param,options,the,target,field,options,that,are,checked;private,static,bi,consumer,function,abstract,highlighter,builder,object,function,field,options,object,merge,before,chek,highlight,builder,highlight,builder,field,field,builder,field,options,options,return,highlight,builder,parameter,accessor,field,options,parameter,accessor,object,expected,value,null,object,global,level,value,highlight,builder,parameter,accessor,apply,highlight,builder,object,field,level,value,highlight,builder,parameter,accessor,apply,field,builder,if,field,level,value,null,expected,value,field,level,value,else,if,global,level,value,null,expected,value,global,level,value,else,expected,value,field,options,parameter,accessor,apply,highlight,builder,default,options,object,actual,value,field,options,parameter,accessor,apply,options,if,actual,value,instanceof,string,assert,array,equals,string,expected,value,string,actual,value,else,if,actual,value,instanceof,character,if,expected,value,instanceof,char,assert,array,equals,highlight,builder,convert,char,array,char,expected,value,character,actual,value,else,assert,array,equals,character,expected,value,character,actual,value,else,assert,equals,expected,value,actual,value
HighlightBuilderTests -> private static BiConsumer<Function<AbstractHighlighterBuilder<?>, Object>, Function<FieldOptions, Object>> mergeBeforeChek(             HighlightBuilder highlightBuilder, Field fieldBuilder, FieldOptions options);1534755962;Create a generic helper function that performs all the work of merging the global highlight builder parameter,_the (potential) overwrite on the field level and the default value from {@link HighlightBuilder#defaultOptions}_before making the assertion that the value in the highlight builder and the actual value in the {@link FieldOptions}_passed in is the same.__@param highlightBuilder provides the (optional) global builder parameter_@param fieldBuilder provides the (optional) field level parameter, if present this overwrites the global value_@param options the target field options that are checked;private static BiConsumer<Function<AbstractHighlighterBuilder<?>, Object>, Function<FieldOptions, Object>> mergeBeforeChek(_            HighlightBuilder highlightBuilder, Field fieldBuilder, FieldOptions options) {_        return (highlightBuilderParameterAccessor, fieldOptionsParameterAccessor) -> {_            Object expectedValue = null__            Object globalLevelValue = highlightBuilderParameterAccessor.apply(highlightBuilder)__            Object fieldLevelValue = highlightBuilderParameterAccessor.apply(fieldBuilder)__            if (fieldLevelValue != null) {_                expectedValue = fieldLevelValue__            } else if (globalLevelValue != null) {_                expectedValue = globalLevelValue__            } else {_                expectedValue = fieldOptionsParameterAccessor.apply(HighlightBuilder.defaultOptions)__            }_            Object actualValue = fieldOptionsParameterAccessor.apply(options)__            if (actualValue instanceof String[]) {_                assertArrayEquals((String[]) expectedValue, (String[]) actualValue)__            } else if (actualValue instanceof Character[]) {_                if (expectedValue instanceof char[]) {_                    assertArrayEquals(HighlightBuilder.convertCharArray((char[]) expectedValue), (Character[]) actualValue)__                } else {_                    assertArrayEquals((Character[]) expectedValue, (Character[]) actualValue)__                }_            } else {_                assertEquals(expectedValue, actualValue)__            }_        }__    };create,a,generic,helper,function,that,performs,all,the,work,of,merging,the,global,highlight,builder,parameter,the,potential,overwrite,on,the,field,level,and,the,default,value,from,link,highlight,builder,default,options,before,making,the,assertion,that,the,value,in,the,highlight,builder,and,the,actual,value,in,the,link,field,options,passed,in,is,the,same,param,highlight,builder,provides,the,optional,global,builder,parameter,param,field,builder,provides,the,optional,field,level,parameter,if,present,this,overwrites,the,global,value,param,options,the,target,field,options,that,are,checked;private,static,bi,consumer,function,abstract,highlighter,builder,object,function,field,options,object,merge,before,chek,highlight,builder,highlight,builder,field,field,builder,field,options,options,return,highlight,builder,parameter,accessor,field,options,parameter,accessor,object,expected,value,null,object,global,level,value,highlight,builder,parameter,accessor,apply,highlight,builder,object,field,level,value,highlight,builder,parameter,accessor,apply,field,builder,if,field,level,value,null,expected,value,field,level,value,else,if,global,level,value,null,expected,value,global,level,value,else,expected,value,field,options,parameter,accessor,apply,highlight,builder,default,options,object,actual,value,field,options,parameter,accessor,apply,options,if,actual,value,instanceof,string,assert,array,equals,string,expected,value,string,actual,value,else,if,actual,value,instanceof,character,if,expected,value,instanceof,char,assert,array,equals,highlight,builder,convert,char,array,char,expected,value,character,actual,value,else,assert,array,equals,character,expected,value,character,actual,value,else,assert,equals,expected,value,actual,value
HighlightBuilderTests -> private static BiConsumer<Function<AbstractHighlighterBuilder<?>, Object>, Function<FieldOptions, Object>> mergeBeforeChek(             HighlightBuilder highlightBuilder, Field fieldBuilder, FieldOptions options);1537806831;Create a generic helper function that performs all the work of merging the global highlight builder parameter,_the (potential) overwrite on the field level and the default value from {@link HighlightBuilder#defaultOptions}_before making the assertion that the value in the highlight builder and the actual value in the {@link FieldOptions}_passed in is the same.__@param highlightBuilder provides the (optional) global builder parameter_@param fieldBuilder provides the (optional) field level parameter, if present this overwrites the global value_@param options the target field options that are checked;private static BiConsumer<Function<AbstractHighlighterBuilder<?>, Object>, Function<FieldOptions, Object>> mergeBeforeChek(_            HighlightBuilder highlightBuilder, Field fieldBuilder, FieldOptions options) {_        return (highlightBuilderParameterAccessor, fieldOptionsParameterAccessor) -> {_            Object expectedValue = null__            Object globalLevelValue = highlightBuilderParameterAccessor.apply(highlightBuilder)__            Object fieldLevelValue = highlightBuilderParameterAccessor.apply(fieldBuilder)__            if (fieldLevelValue != null) {_                expectedValue = fieldLevelValue__            } else if (globalLevelValue != null) {_                expectedValue = globalLevelValue__            } else {_                expectedValue = fieldOptionsParameterAccessor.apply(HighlightBuilder.defaultOptions)__            }_            Object actualValue = fieldOptionsParameterAccessor.apply(options)__            if (actualValue instanceof String[]) {_                assertArrayEquals((String[]) expectedValue, (String[]) actualValue)__            } else if (actualValue instanceof Character[]) {_                if (expectedValue instanceof char[]) {_                    assertArrayEquals(HighlightBuilder.convertCharArray((char[]) expectedValue), (Character[]) actualValue)__                } else {_                    assertArrayEquals((Character[]) expectedValue, (Character[]) actualValue)__                }_            } else {_                assertEquals(expectedValue, actualValue)__            }_        }__    };create,a,generic,helper,function,that,performs,all,the,work,of,merging,the,global,highlight,builder,parameter,the,potential,overwrite,on,the,field,level,and,the,default,value,from,link,highlight,builder,default,options,before,making,the,assertion,that,the,value,in,the,highlight,builder,and,the,actual,value,in,the,link,field,options,passed,in,is,the,same,param,highlight,builder,provides,the,optional,global,builder,parameter,param,field,builder,provides,the,optional,field,level,parameter,if,present,this,overwrites,the,global,value,param,options,the,target,field,options,that,are,checked;private,static,bi,consumer,function,abstract,highlighter,builder,object,function,field,options,object,merge,before,chek,highlight,builder,highlight,builder,field,field,builder,field,options,options,return,highlight,builder,parameter,accessor,field,options,parameter,accessor,object,expected,value,null,object,global,level,value,highlight,builder,parameter,accessor,apply,highlight,builder,object,field,level,value,highlight,builder,parameter,accessor,apply,field,builder,if,field,level,value,null,expected,value,field,level,value,else,if,global,level,value,null,expected,value,global,level,value,else,expected,value,field,options,parameter,accessor,apply,highlight,builder,default,options,object,actual,value,field,options,parameter,accessor,apply,options,if,actual,value,instanceof,string,assert,array,equals,string,expected,value,string,actual,value,else,if,actual,value,instanceof,character,if,expected,value,instanceof,char,assert,array,equals,highlight,builder,convert,char,array,char,expected,value,character,actual,value,else,assert,array,equals,character,expected,value,character,actual,value,else,assert,equals,expected,value,actual,value
HighlightBuilderTests -> public void testUnknownObjectFieldnameExpection() throws IOException;1524684173;test that unknown field name cause exception;public void testUnknownObjectFieldnameExpection() throws IOException {_        {_            IllegalArgumentException e = expectParseThrows(IllegalArgumentException.class, "{\n" +_                    "    \"bad_fieldname\" :  { \"field\" : \"value\" }\n \n" +_                    "}\n")__            assertEquals("[highlight] unknown field [bad_fieldname], parser not found", e.getMessage())__        }__        {_            XContentParseException e = expectParseThrows(XContentParseException.class, "{\n" +_                    "  \"fields\" : {\n" +_                    "     \"body\" : {\n" +_                    "        \"bad_fieldname\" : { \"field\" : \"value\" }\n" +_                    "     }\n" +_                    "   }\n" +_                    "}\n")__            assertThat(e.getMessage(), containsString("[highlight] failed to parse field [fields]"))__            assertThat(e.getCause().getMessage(), containsString("[fields] failed to parse field [body]"))__            assertEquals("[highlight_field] unknown field [bad_fieldname], parser not found", e.getCause().getCause().getMessage())__        }_    };test,that,unknown,field,name,cause,exception;public,void,test,unknown,object,fieldname,expection,throws,ioexception,illegal,argument,exception,e,expect,parse,throws,illegal,argument,exception,class,n,field,value,n,n,n,assert,equals,highlight,unknown,field,parser,not,found,e,get,message,xcontent,parse,exception,e,expect,parse,throws,xcontent,parse,exception,class,n,fields,n,body,n,field,value,n,n,n,n,assert,that,e,get,message,contains,string,highlight,failed,to,parse,field,fields,assert,that,e,get,cause,get,message,contains,string,fields,failed,to,parse,field,body,assert,equals,unknown,field,parser,not,found,e,get,cause,get,cause,get,message
HighlightBuilderTests -> public void testUnknownObjectFieldnameExpection() throws IOException;1528167589;test that unknown field name cause exception;public void testUnknownObjectFieldnameExpection() throws IOException {_        {_            XContentParseException e = expectParseThrows(XContentParseException.class, "{\n" +_                    "    \"bad_fieldname\" :  { \"field\" : \"value\" }\n \n" +_                    "}\n")__            assertEquals("[2:5] [highlight] unknown field [bad_fieldname], parser not found", e.getMessage())__        }__        {_            XContentParseException e = expectParseThrows(XContentParseException.class, "{\n" +_                    "  \"fields\" : {\n" +_                    "     \"body\" : {\n" +_                    "        \"bad_fieldname\" : { \"field\" : \"value\" }\n" +_                    "     }\n" +_                    "   }\n" +_                    "}\n")__            assertThat(e.getMessage(), containsString("[highlight] failed to parse field [fields]"))__            assertThat(e.getCause().getMessage(), containsString("[fields] failed to parse field [body]"))__            assertEquals("[4:9] [highlight_field] unknown field [bad_fieldname], parser not found", e.getCause().getCause().getMessage())__        }_    };test,that,unknown,field,name,cause,exception;public,void,test,unknown,object,fieldname,expection,throws,ioexception,xcontent,parse,exception,e,expect,parse,throws,xcontent,parse,exception,class,n,field,value,n,n,n,assert,equals,2,5,highlight,unknown,field,parser,not,found,e,get,message,xcontent,parse,exception,e,expect,parse,throws,xcontent,parse,exception,class,n,fields,n,body,n,field,value,n,n,n,n,assert,that,e,get,message,contains,string,highlight,failed,to,parse,field,fields,assert,that,e,get,cause,get,message,contains,string,fields,failed,to,parse,field,body,assert,equals,4,9,unknown,field,parser,not,found,e,get,cause,get,cause,get,message
HighlightBuilderTests -> public void testUnknownObjectFieldnameExpection() throws IOException;1529916084;test that unknown field name cause exception;public void testUnknownObjectFieldnameExpection() throws IOException {_        {_            XContentParseException e = expectParseThrows(XContentParseException.class, "{\n" +_                    "    \"bad_fieldname\" :  { \"field\" : \"value\" }\n \n" +_                    "}\n")__            assertEquals("[2:5] [highlight] unknown field [bad_fieldname], parser not found", e.getMessage())__        }__        {_            XContentParseException e = expectParseThrows(XContentParseException.class, "{\n" +_                    "  \"fields\" : {\n" +_                    "     \"body\" : {\n" +_                    "        \"bad_fieldname\" : { \"field\" : \"value\" }\n" +_                    "     }\n" +_                    "   }\n" +_                    "}\n")__            assertThat(e.getMessage(), containsString("[highlight] failed to parse field [fields]"))__            assertThat(e.getCause().getMessage(), containsString("[fields] failed to parse field [body]"))__            assertEquals("[4:9] [highlight_field] unknown field [bad_fieldname], parser not found", e.getCause().getCause().getMessage())__        }_    };test,that,unknown,field,name,cause,exception;public,void,test,unknown,object,fieldname,expection,throws,ioexception,xcontent,parse,exception,e,expect,parse,throws,xcontent,parse,exception,class,n,field,value,n,n,n,assert,equals,2,5,highlight,unknown,field,parser,not,found,e,get,message,xcontent,parse,exception,e,expect,parse,throws,xcontent,parse,exception,class,n,fields,n,body,n,field,value,n,n,n,n,assert,that,e,get,message,contains,string,highlight,failed,to,parse,field,fields,assert,that,e,get,cause,get,message,contains,string,fields,failed,to,parse,field,body,assert,equals,4,9,unknown,field,parser,not,found,e,get,cause,get,cause,get,message
HighlightBuilderTests -> public void testUnknownObjectFieldnameExpection() throws IOException;1534755962;test that unknown field name cause exception;public void testUnknownObjectFieldnameExpection() throws IOException {_        {_            XContentParseException e = expectParseThrows(XContentParseException.class, "{\n" +_                    "    \"bad_fieldname\" :  { \"field\" : \"value\" }\n \n" +_                    "}\n")__            assertEquals("[2:5] [highlight] unknown field [bad_fieldname], parser not found", e.getMessage())__        }__        {_            XContentParseException e = expectParseThrows(XContentParseException.class, "{\n" +_                    "  \"fields\" : {\n" +_                    "     \"body\" : {\n" +_                    "        \"bad_fieldname\" : { \"field\" : \"value\" }\n" +_                    "     }\n" +_                    "   }\n" +_                    "}\n")__            assertThat(e.getMessage(), containsString("[highlight] failed to parse field [fields]"))__            assertThat(e.getCause().getMessage(), containsString("[fields] failed to parse field [body]"))__            assertEquals("[4:9] [highlight_field] unknown field [bad_fieldname], parser not found", e.getCause().getCause().getMessage())__        }_    };test,that,unknown,field,name,cause,exception;public,void,test,unknown,object,fieldname,expection,throws,ioexception,xcontent,parse,exception,e,expect,parse,throws,xcontent,parse,exception,class,n,field,value,n,n,n,assert,equals,2,5,highlight,unknown,field,parser,not,found,e,get,message,xcontent,parse,exception,e,expect,parse,throws,xcontent,parse,exception,class,n,fields,n,body,n,field,value,n,n,n,n,assert,that,e,get,message,contains,string,highlight,failed,to,parse,field,fields,assert,that,e,get,cause,get,message,contains,string,fields,failed,to,parse,field,body,assert,equals,4,9,unknown,field,parser,not,found,e,get,cause,get,cause,get,message
HighlightBuilderTests -> public void testUnknownObjectFieldnameExpection() throws IOException;1537806831;test that unknown field name cause exception;public void testUnknownObjectFieldnameExpection() throws IOException {_        {_            XContentParseException e = expectParseThrows(XContentParseException.class, "{\n" +_                    "    \"bad_fieldname\" :  { \"field\" : \"value\" }\n \n" +_                    "}\n")__            assertEquals("[2:5] [highlight] unknown field [bad_fieldname], parser not found", e.getMessage())__        }__        {_            XContentParseException e = expectParseThrows(XContentParseException.class, "{\n" +_                    "  \"fields\" : {\n" +_                    "     \"body\" : {\n" +_                    "        \"bad_fieldname\" : { \"field\" : \"value\" }\n" +_                    "     }\n" +_                    "   }\n" +_                    "}\n")__            assertThat(e.getMessage(), containsString("[highlight] failed to parse field [fields]"))__            assertThat(e.getCause().getMessage(), containsString("[fields] failed to parse field [body]"))__            assertEquals("[4:9] [highlight_field] unknown field [bad_fieldname], parser not found", e.getCause().getCause().getMessage())__        }_    };test,that,unknown,field,name,cause,exception;public,void,test,unknown,object,fieldname,expection,throws,ioexception,xcontent,parse,exception,e,expect,parse,throws,xcontent,parse,exception,class,n,field,value,n,n,n,assert,equals,2,5,highlight,unknown,field,parser,not,found,e,get,message,xcontent,parse,exception,e,expect,parse,throws,xcontent,parse,exception,class,n,fields,n,body,n,field,value,n,n,n,n,assert,that,e,get,message,contains,string,highlight,failed,to,parse,field,fields,assert,that,e,get,cause,get,message,contains,string,fields,failed,to,parse,field,body,assert,equals,4,9,unknown,field,parser,not,found,e,get,cause,get,cause,get,message
HighlightBuilderTests -> public static HighlightBuilder randomHighlighterBuilder();1524684173;create random highlight builder that is put under test;public static HighlightBuilder randomHighlighterBuilder() {_        HighlightBuilder testHighlighter = new HighlightBuilder()__        setRandomCommonOptions(testHighlighter)__        testHighlighter.useExplicitFieldOrder(randomBoolean())__        if (randomBoolean()) {_            testHighlighter.encoder(randomFrom(Arrays.asList(new String[]{"default", "html"})))__        }_        int numberOfFields = randomIntBetween(1,5)__        for (int i = 0_ i < numberOfFields_ i++) {_            Field field = new Field(i + "_" + randomAlphaOfLengthBetween(1, 10))__            setRandomCommonOptions(field)__            if (randomBoolean()) {_                field.fragmentOffset(randomIntBetween(1, 100))__            }_            if (randomBoolean()) {_                field.matchedFields(randomStringArray(0, 4))__            }_            testHighlighter.field(field)__        }_        return testHighlighter__    };create,random,highlight,builder,that,is,put,under,test;public,static,highlight,builder,random,highlighter,builder,highlight,builder,test,highlighter,new,highlight,builder,set,random,common,options,test,highlighter,test,highlighter,use,explicit,field,order,random,boolean,if,random,boolean,test,highlighter,encoder,random,from,arrays,as,list,new,string,default,html,int,number,of,fields,random,int,between,1,5,for,int,i,0,i,number,of,fields,i,field,field,new,field,i,random,alpha,of,length,between,1,10,set,random,common,options,field,if,random,boolean,field,fragment,offset,random,int,between,1,100,if,random,boolean,field,matched,fields,random,string,array,0,4,test,highlighter,field,field,return,test,highlighter
HighlightBuilderTests -> public static HighlightBuilder randomHighlighterBuilder();1528167589;create random highlight builder that is put under test;public static HighlightBuilder randomHighlighterBuilder() {_        HighlightBuilder testHighlighter = new HighlightBuilder()__        setRandomCommonOptions(testHighlighter)__        testHighlighter.useExplicitFieldOrder(randomBoolean())__        if (randomBoolean()) {_            testHighlighter.encoder(randomFrom(Arrays.asList(new String[]{"default", "html"})))__        }_        int numberOfFields = randomIntBetween(1,5)__        for (int i = 0_ i < numberOfFields_ i++) {_            Field field = new Field(i + "_" + randomAlphaOfLengthBetween(1, 10))__            setRandomCommonOptions(field)__            if (randomBoolean()) {_                field.fragmentOffset(randomIntBetween(1, 100))__            }_            if (randomBoolean()) {_                field.matchedFields(randomStringArray(0, 4))__            }_            testHighlighter.field(field)__        }_        return testHighlighter__    };create,random,highlight,builder,that,is,put,under,test;public,static,highlight,builder,random,highlighter,builder,highlight,builder,test,highlighter,new,highlight,builder,set,random,common,options,test,highlighter,test,highlighter,use,explicit,field,order,random,boolean,if,random,boolean,test,highlighter,encoder,random,from,arrays,as,list,new,string,default,html,int,number,of,fields,random,int,between,1,5,for,int,i,0,i,number,of,fields,i,field,field,new,field,i,random,alpha,of,length,between,1,10,set,random,common,options,field,if,random,boolean,field,fragment,offset,random,int,between,1,100,if,random,boolean,field,matched,fields,random,string,array,0,4,test,highlighter,field,field,return,test,highlighter
HighlightBuilderTests -> public static HighlightBuilder randomHighlighterBuilder();1529916084;create random highlight builder that is put under test;public static HighlightBuilder randomHighlighterBuilder() {_        HighlightBuilder testHighlighter = new HighlightBuilder()__        setRandomCommonOptions(testHighlighter)__        testHighlighter.useExplicitFieldOrder(randomBoolean())__        if (randomBoolean()) {_            testHighlighter.encoder(randomFrom(Arrays.asList(new String[]{"default", "html"})))__        }_        int numberOfFields = randomIntBetween(1,5)__        for (int i = 0_ i < numberOfFields_ i++) {_            Field field = new Field(i + "_" + randomAlphaOfLengthBetween(1, 10))__            setRandomCommonOptions(field)__            if (randomBoolean()) {_                field.fragmentOffset(randomIntBetween(1, 100))__            }_            if (randomBoolean()) {_                field.matchedFields(randomStringArray(0, 4))__            }_            testHighlighter.field(field)__        }_        return testHighlighter__    };create,random,highlight,builder,that,is,put,under,test;public,static,highlight,builder,random,highlighter,builder,highlight,builder,test,highlighter,new,highlight,builder,set,random,common,options,test,highlighter,test,highlighter,use,explicit,field,order,random,boolean,if,random,boolean,test,highlighter,encoder,random,from,arrays,as,list,new,string,default,html,int,number,of,fields,random,int,between,1,5,for,int,i,0,i,number,of,fields,i,field,field,new,field,i,random,alpha,of,length,between,1,10,set,random,common,options,field,if,random,boolean,field,fragment,offset,random,int,between,1,100,if,random,boolean,field,matched,fields,random,string,array,0,4,test,highlighter,field,field,return,test,highlighter
HighlightBuilderTests -> public static HighlightBuilder randomHighlighterBuilder();1534755962;create random highlight builder that is put under test;public static HighlightBuilder randomHighlighterBuilder() {_        HighlightBuilder testHighlighter = new HighlightBuilder()__        setRandomCommonOptions(testHighlighter)__        testHighlighter.useExplicitFieldOrder(randomBoolean())__        if (randomBoolean()) {_            testHighlighter.encoder(randomFrom(Arrays.asList(new String[]{"default", "html"})))__        }_        int numberOfFields = randomIntBetween(1,5)__        for (int i = 0_ i < numberOfFields_ i++) {_            Field field = new Field(i + "_" + randomAlphaOfLengthBetween(1, 10))__            setRandomCommonOptions(field)__            if (randomBoolean()) {_                field.fragmentOffset(randomIntBetween(1, 100))__            }_            if (randomBoolean()) {_                field.matchedFields(randomStringArray(0, 4))__            }_            testHighlighter.field(field)__        }_        return testHighlighter__    };create,random,highlight,builder,that,is,put,under,test;public,static,highlight,builder,random,highlighter,builder,highlight,builder,test,highlighter,new,highlight,builder,set,random,common,options,test,highlighter,test,highlighter,use,explicit,field,order,random,boolean,if,random,boolean,test,highlighter,encoder,random,from,arrays,as,list,new,string,default,html,int,number,of,fields,random,int,between,1,5,for,int,i,0,i,number,of,fields,i,field,field,new,field,i,random,alpha,of,length,between,1,10,set,random,common,options,field,if,random,boolean,field,fragment,offset,random,int,between,1,100,if,random,boolean,field,matched,fields,random,string,array,0,4,test,highlighter,field,field,return,test,highlighter
HighlightBuilderTests -> public static HighlightBuilder randomHighlighterBuilder();1537806831;create random highlight builder that is put under test;public static HighlightBuilder randomHighlighterBuilder() {_        HighlightBuilder testHighlighter = new HighlightBuilder()__        setRandomCommonOptions(testHighlighter)__        testHighlighter.useExplicitFieldOrder(randomBoolean())__        if (randomBoolean()) {_            testHighlighter.encoder(randomFrom(Arrays.asList(new String[]{"default", "html"})))__        }_        int numberOfFields = randomIntBetween(1,5)__        for (int i = 0_ i < numberOfFields_ i++) {_            Field field = new Field(i + "_" + randomAlphaOfLengthBetween(1, 10))__            setRandomCommonOptions(field)__            if (randomBoolean()) {_                field.fragmentOffset(randomIntBetween(1, 100))__            }_            if (randomBoolean()) {_                field.matchedFields(randomStringArray(0, 4))__            }_            testHighlighter.field(field)__        }_        return testHighlighter__    };create,random,highlight,builder,that,is,put,under,test;public,static,highlight,builder,random,highlighter,builder,highlight,builder,test,highlighter,new,highlight,builder,set,random,common,options,test,highlighter,test,highlighter,use,explicit,field,order,random,boolean,if,random,boolean,test,highlighter,encoder,random,from,arrays,as,list,new,string,default,html,int,number,of,fields,random,int,between,1,5,for,int,i,0,i,number,of,fields,i,field,field,new,field,i,random,alpha,of,length,between,1,10,set,random,common,options,field,if,random,boolean,field,fragment,offset,random,int,between,1,100,if,random,boolean,field,matched,fields,random,string,array,0,4,test,highlighter,field,field,return,test,highlighter
HighlightBuilderTests -> public void testFromXContent() throws IOException;1524684173;creates random highlighter, renders it to xContent and back to new instance that should be equal to original;public void testFromXContent() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            HighlightBuilder highlightBuilder = randomHighlighterBuilder()__            XContentBuilder builder = XContentFactory.contentBuilder(randomFrom(XContentType.values()))__            if (randomBoolean()) {_                builder.prettyPrint()__            }__            XContentBuilder shuffled__            if (randomBoolean()) {_                _                highlightBuilder.useExplicitFieldOrder(true)__                highlightBuilder.toXContent(builder, ToXContent.EMPTY_PARAMS)__                shuffled = shuffleXContent(builder)__            } else {_                highlightBuilder.toXContent(builder, ToXContent.EMPTY_PARAMS)__                shuffled = shuffleXContent(builder, "fields")__            }__            XContentParser parser = createParser(shuffled)__            parser.nextToken()__            HighlightBuilder secondHighlightBuilder__            try {_                secondHighlightBuilder = HighlightBuilder.fromXContent(parser)__            } catch (RuntimeException e) {_                throw new RuntimeException("Error parsing " + highlightBuilder, e)__            }_            assertNotSame(highlightBuilder, secondHighlightBuilder)__            assertEquals(highlightBuilder, secondHighlightBuilder)__            assertEquals(highlightBuilder.hashCode(), secondHighlightBuilder.hashCode())__        }_    };creates,random,highlighter,renders,it,to,x,content,and,back,to,new,instance,that,should,be,equal,to,original;public,void,test,from,xcontent,throws,ioexception,for,int,runs,0,runs,runs,highlight,builder,highlight,builder,random,highlighter,builder,xcontent,builder,builder,xcontent,factory,content,builder,random,from,xcontent,type,values,if,random,boolean,builder,pretty,print,xcontent,builder,shuffled,if,random,boolean,highlight,builder,use,explicit,field,order,true,highlight,builder,to,xcontent,builder,to,xcontent,shuffled,shuffle,xcontent,builder,else,highlight,builder,to,xcontent,builder,to,xcontent,shuffled,shuffle,xcontent,builder,fields,xcontent,parser,parser,create,parser,shuffled,parser,next,token,highlight,builder,second,highlight,builder,try,second,highlight,builder,highlight,builder,from,xcontent,parser,catch,runtime,exception,e,throw,new,runtime,exception,error,parsing,highlight,builder,e,assert,not,same,highlight,builder,second,highlight,builder,assert,equals,highlight,builder,second,highlight,builder,assert,equals,highlight,builder,hash,code,second,highlight,builder,hash,code
HighlightBuilderTests -> public void testFromXContent() throws IOException;1528167589;creates random highlighter, renders it to xContent and back to new instance that should be equal to original;public void testFromXContent() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            HighlightBuilder highlightBuilder = randomHighlighterBuilder()__            XContentBuilder builder = XContentFactory.contentBuilder(randomFrom(XContentType.values()))__            if (randomBoolean()) {_                builder.prettyPrint()__            }__            XContentBuilder shuffled__            if (randomBoolean()) {_                _                highlightBuilder.useExplicitFieldOrder(true)__                highlightBuilder.toXContent(builder, ToXContent.EMPTY_PARAMS)__                shuffled = shuffleXContent(builder)__            } else {_                highlightBuilder.toXContent(builder, ToXContent.EMPTY_PARAMS)__                shuffled = shuffleXContent(builder, "fields")__            }__            XContentParser parser = createParser(shuffled)__            parser.nextToken()__            HighlightBuilder secondHighlightBuilder__            try {_                secondHighlightBuilder = HighlightBuilder.fromXContent(parser)__            } catch (RuntimeException e) {_                throw new RuntimeException("Error parsing " + highlightBuilder, e)__            }_            assertNotSame(highlightBuilder, secondHighlightBuilder)__            assertEquals(highlightBuilder, secondHighlightBuilder)__            assertEquals(highlightBuilder.hashCode(), secondHighlightBuilder.hashCode())__        }_    };creates,random,highlighter,renders,it,to,x,content,and,back,to,new,instance,that,should,be,equal,to,original;public,void,test,from,xcontent,throws,ioexception,for,int,runs,0,runs,runs,highlight,builder,highlight,builder,random,highlighter,builder,xcontent,builder,builder,xcontent,factory,content,builder,random,from,xcontent,type,values,if,random,boolean,builder,pretty,print,xcontent,builder,shuffled,if,random,boolean,highlight,builder,use,explicit,field,order,true,highlight,builder,to,xcontent,builder,to,xcontent,shuffled,shuffle,xcontent,builder,else,highlight,builder,to,xcontent,builder,to,xcontent,shuffled,shuffle,xcontent,builder,fields,xcontent,parser,parser,create,parser,shuffled,parser,next,token,highlight,builder,second,highlight,builder,try,second,highlight,builder,highlight,builder,from,xcontent,parser,catch,runtime,exception,e,throw,new,runtime,exception,error,parsing,highlight,builder,e,assert,not,same,highlight,builder,second,highlight,builder,assert,equals,highlight,builder,second,highlight,builder,assert,equals,highlight,builder,hash,code,second,highlight,builder,hash,code
HighlightBuilderTests -> public void testFromXContent() throws IOException;1529916084;creates random highlighter, renders it to xContent and back to new instance that should be equal to original;public void testFromXContent() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            HighlightBuilder highlightBuilder = randomHighlighterBuilder()__            XContentBuilder builder = XContentFactory.contentBuilder(randomFrom(XContentType.values()))__            if (randomBoolean()) {_                builder.prettyPrint()__            }__            XContentBuilder shuffled__            if (randomBoolean()) {_                _                highlightBuilder.useExplicitFieldOrder(true)__                highlightBuilder.toXContent(builder, ToXContent.EMPTY_PARAMS)__                shuffled = shuffleXContent(builder)__            } else {_                highlightBuilder.toXContent(builder, ToXContent.EMPTY_PARAMS)__                shuffled = shuffleXContent(builder, "fields")__            }__            try (XContentParser parser = createParser(shuffled)) {_                parser.nextToken()__                HighlightBuilder secondHighlightBuilder__                try {_                    secondHighlightBuilder = HighlightBuilder.fromXContent(parser)__                } catch (RuntimeException e) {_                    throw new RuntimeException("Error parsing " + highlightBuilder, e)__                }_                assertNotSame(highlightBuilder, secondHighlightBuilder)__                assertEquals(highlightBuilder, secondHighlightBuilder)__                assertEquals(highlightBuilder.hashCode(), secondHighlightBuilder.hashCode())__            }_        }_    };creates,random,highlighter,renders,it,to,x,content,and,back,to,new,instance,that,should,be,equal,to,original;public,void,test,from,xcontent,throws,ioexception,for,int,runs,0,runs,runs,highlight,builder,highlight,builder,random,highlighter,builder,xcontent,builder,builder,xcontent,factory,content,builder,random,from,xcontent,type,values,if,random,boolean,builder,pretty,print,xcontent,builder,shuffled,if,random,boolean,highlight,builder,use,explicit,field,order,true,highlight,builder,to,xcontent,builder,to,xcontent,shuffled,shuffle,xcontent,builder,else,highlight,builder,to,xcontent,builder,to,xcontent,shuffled,shuffle,xcontent,builder,fields,try,xcontent,parser,parser,create,parser,shuffled,parser,next,token,highlight,builder,second,highlight,builder,try,second,highlight,builder,highlight,builder,from,xcontent,parser,catch,runtime,exception,e,throw,new,runtime,exception,error,parsing,highlight,builder,e,assert,not,same,highlight,builder,second,highlight,builder,assert,equals,highlight,builder,second,highlight,builder,assert,equals,highlight,builder,hash,code,second,highlight,builder,hash,code
HighlightBuilderTests -> public void testFromXContent() throws IOException;1534755962;creates random highlighter, renders it to xContent and back to new instance that should be equal to original;public void testFromXContent() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            HighlightBuilder highlightBuilder = randomHighlighterBuilder()__            XContentBuilder builder = XContentFactory.contentBuilder(randomFrom(XContentType.values()))__            if (randomBoolean()) {_                builder.prettyPrint()__            }__            XContentBuilder shuffled__            if (randomBoolean()) {_                _                highlightBuilder.useExplicitFieldOrder(true)__                highlightBuilder.toXContent(builder, ToXContent.EMPTY_PARAMS)__                shuffled = shuffleXContent(builder)__            } else {_                highlightBuilder.toXContent(builder, ToXContent.EMPTY_PARAMS)__                shuffled = shuffleXContent(builder, "fields")__            }__            try (XContentParser parser = createParser(shuffled)) {_                parser.nextToken()__                HighlightBuilder secondHighlightBuilder__                try {_                    secondHighlightBuilder = HighlightBuilder.fromXContent(parser)__                } catch (RuntimeException e) {_                    throw new RuntimeException("Error parsing " + highlightBuilder, e)__                }_                assertNotSame(highlightBuilder, secondHighlightBuilder)__                assertEquals(highlightBuilder, secondHighlightBuilder)__                assertEquals(highlightBuilder.hashCode(), secondHighlightBuilder.hashCode())__            }_        }_    };creates,random,highlighter,renders,it,to,x,content,and,back,to,new,instance,that,should,be,equal,to,original;public,void,test,from,xcontent,throws,ioexception,for,int,runs,0,runs,runs,highlight,builder,highlight,builder,random,highlighter,builder,xcontent,builder,builder,xcontent,factory,content,builder,random,from,xcontent,type,values,if,random,boolean,builder,pretty,print,xcontent,builder,shuffled,if,random,boolean,highlight,builder,use,explicit,field,order,true,highlight,builder,to,xcontent,builder,to,xcontent,shuffled,shuffle,xcontent,builder,else,highlight,builder,to,xcontent,builder,to,xcontent,shuffled,shuffle,xcontent,builder,fields,try,xcontent,parser,parser,create,parser,shuffled,parser,next,token,highlight,builder,second,highlight,builder,try,second,highlight,builder,highlight,builder,from,xcontent,parser,catch,runtime,exception,e,throw,new,runtime,exception,error,parsing,highlight,builder,e,assert,not,same,highlight,builder,second,highlight,builder,assert,equals,highlight,builder,second,highlight,builder,assert,equals,highlight,builder,hash,code,second,highlight,builder,hash,code
HighlightBuilderTests -> public void testFromXContent() throws IOException;1537806831;creates random highlighter, renders it to xContent and back to new instance that should be equal to original;public void testFromXContent() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            HighlightBuilder highlightBuilder = randomHighlighterBuilder()__            XContentBuilder builder = XContentFactory.contentBuilder(randomFrom(XContentType.values()))__            if (randomBoolean()) {_                builder.prettyPrint()__            }__            XContentBuilder shuffled__            if (randomBoolean()) {_                _                highlightBuilder.useExplicitFieldOrder(true)__                highlightBuilder.toXContent(builder, ToXContent.EMPTY_PARAMS)__                shuffled = shuffleXContent(builder)__            } else {_                highlightBuilder.toXContent(builder, ToXContent.EMPTY_PARAMS)__                shuffled = shuffleXContent(builder, "fields")__            }__            try (XContentParser parser = createParser(shuffled)) {_                parser.nextToken()__                HighlightBuilder secondHighlightBuilder__                try {_                    secondHighlightBuilder = HighlightBuilder.fromXContent(parser)__                } catch (RuntimeException e) {_                    throw new RuntimeException("Error parsing " + highlightBuilder, e)__                }_                assertNotSame(highlightBuilder, secondHighlightBuilder)__                assertEquals(highlightBuilder, secondHighlightBuilder)__                assertEquals(highlightBuilder.hashCode(), secondHighlightBuilder.hashCode())__            }_        }_    };creates,random,highlighter,renders,it,to,x,content,and,back,to,new,instance,that,should,be,equal,to,original;public,void,test,from,xcontent,throws,ioexception,for,int,runs,0,runs,runs,highlight,builder,highlight,builder,random,highlighter,builder,xcontent,builder,builder,xcontent,factory,content,builder,random,from,xcontent,type,values,if,random,boolean,builder,pretty,print,xcontent,builder,shuffled,if,random,boolean,highlight,builder,use,explicit,field,order,true,highlight,builder,to,xcontent,builder,to,xcontent,shuffled,shuffle,xcontent,builder,else,highlight,builder,to,xcontent,builder,to,xcontent,shuffled,shuffle,xcontent,builder,fields,try,xcontent,parser,parser,create,parser,shuffled,parser,next,token,highlight,builder,second,highlight,builder,try,second,highlight,builder,highlight,builder,from,xcontent,parser,catch,runtime,exception,e,throw,new,runtime,exception,error,parsing,highlight,builder,e,assert,not,same,highlight,builder,second,highlight,builder,assert,equals,highlight,builder,second,highlight,builder,assert,equals,highlight,builder,hash,code,second,highlight,builder,hash,code
HighlightBuilderTests -> public void testParsingTagsSchema() throws IOException;1524684173;`tags_schema` is not produced by toXContent in the builder but should be parseable, so this_adds a simple json test for this.;public void testParsingTagsSchema() throws IOException {__        String highlightElement = "{\n" +_                "    \"tags_schema\" : \"styled\"\n" +_                "}\n"__        XContentParser parser = createParser(JsonXContent.jsonXContent, highlightElement)___        HighlightBuilder highlightBuilder = HighlightBuilder.fromXContent(parser)__        assertArrayEquals("setting tags_schema 'styled' should alter pre_tags", HighlightBuilder.DEFAULT_STYLED_PRE_TAG,_                highlightBuilder.preTags())__        assertArrayEquals("setting tags_schema 'styled' should alter post_tags", HighlightBuilder.DEFAULT_STYLED_POST_TAGS,_                highlightBuilder.postTags())___        highlightElement = "{\n" +_                "    \"tags_schema\" : \"default\"\n" +_                "}\n"__        parser = createParser(JsonXContent.jsonXContent, highlightElement)___        highlightBuilder = HighlightBuilder.fromXContent(parser)__        assertArrayEquals("setting tags_schema 'default' should alter pre_tags", HighlightBuilder.DEFAULT_PRE_TAGS,_                highlightBuilder.preTags())__        assertArrayEquals("setting tags_schema 'default' should alter post_tags", HighlightBuilder.DEFAULT_POST_TAGS,_                highlightBuilder.postTags())___        XContentParseException e = expectParseThrows(XContentParseException.class, "{\n" +_                "    \"tags_schema\" : \"somthing_else\"\n" +_                "}\n")__        assertThat(e.getMessage(), containsString("[highlight] failed to parse field [tags_schema]"))__        assertEquals("Unknown tag schema [somthing_else]", e.getCause().getMessage())__    };is,not,produced,by,to,xcontent,in,the,builder,but,should,be,parseable,so,this,adds,a,simple,json,test,for,this;public,void,test,parsing,tags,schema,throws,ioexception,string,highlight,element,n,styled,n,n,xcontent,parser,parser,create,parser,json,xcontent,json,xcontent,highlight,element,highlight,builder,highlight,builder,highlight,builder,from,xcontent,parser,assert,array,equals,setting,styled,should,alter,highlight,builder,highlight,builder,pre,tags,assert,array,equals,setting,styled,should,alter,highlight,builder,highlight,builder,post,tags,highlight,element,n,default,n,n,parser,create,parser,json,xcontent,json,xcontent,highlight,element,highlight,builder,highlight,builder,from,xcontent,parser,assert,array,equals,setting,default,should,alter,highlight,builder,highlight,builder,pre,tags,assert,array,equals,setting,default,should,alter,highlight,builder,highlight,builder,post,tags,xcontent,parse,exception,e,expect,parse,throws,xcontent,parse,exception,class,n,n,n,assert,that,e,get,message,contains,string,highlight,failed,to,parse,field,assert,equals,unknown,tag,schema,e,get,cause,get,message
HighlightBuilderTests -> public void testParsingTagsSchema() throws IOException;1528167589;`tags_schema` is not produced by toXContent in the builder but should be parseable, so this_adds a simple json test for this.;public void testParsingTagsSchema() throws IOException {__        String highlightElement = "{\n" +_                "    \"tags_schema\" : \"styled\"\n" +_                "}\n"__        XContentParser parser = createParser(JsonXContent.jsonXContent, highlightElement)___        HighlightBuilder highlightBuilder = HighlightBuilder.fromXContent(parser)__        assertArrayEquals("setting tags_schema 'styled' should alter pre_tags", HighlightBuilder.DEFAULT_STYLED_PRE_TAG,_                highlightBuilder.preTags())__        assertArrayEquals("setting tags_schema 'styled' should alter post_tags", HighlightBuilder.DEFAULT_STYLED_POST_TAGS,_                highlightBuilder.postTags())___        highlightElement = "{\n" +_                "    \"tags_schema\" : \"default\"\n" +_                "}\n"__        parser = createParser(JsonXContent.jsonXContent, highlightElement)___        highlightBuilder = HighlightBuilder.fromXContent(parser)__        assertArrayEquals("setting tags_schema 'default' should alter pre_tags", HighlightBuilder.DEFAULT_PRE_TAGS,_                highlightBuilder.preTags())__        assertArrayEquals("setting tags_schema 'default' should alter post_tags", HighlightBuilder.DEFAULT_POST_TAGS,_                highlightBuilder.postTags())___        XContentParseException e = expectParseThrows(XContentParseException.class, "{\n" +_                "    \"tags_schema\" : \"somthing_else\"\n" +_                "}\n")__        assertThat(e.getMessage(), containsString("[highlight] failed to parse field [tags_schema]"))__        assertEquals("Unknown tag schema [somthing_else]", e.getCause().getMessage())__    };is,not,produced,by,to,xcontent,in,the,builder,but,should,be,parseable,so,this,adds,a,simple,json,test,for,this;public,void,test,parsing,tags,schema,throws,ioexception,string,highlight,element,n,styled,n,n,xcontent,parser,parser,create,parser,json,xcontent,json,xcontent,highlight,element,highlight,builder,highlight,builder,highlight,builder,from,xcontent,parser,assert,array,equals,setting,styled,should,alter,highlight,builder,highlight,builder,pre,tags,assert,array,equals,setting,styled,should,alter,highlight,builder,highlight,builder,post,tags,highlight,element,n,default,n,n,parser,create,parser,json,xcontent,json,xcontent,highlight,element,highlight,builder,highlight,builder,from,xcontent,parser,assert,array,equals,setting,default,should,alter,highlight,builder,highlight,builder,pre,tags,assert,array,equals,setting,default,should,alter,highlight,builder,highlight,builder,post,tags,xcontent,parse,exception,e,expect,parse,throws,xcontent,parse,exception,class,n,n,n,assert,that,e,get,message,contains,string,highlight,failed,to,parse,field,assert,equals,unknown,tag,schema,e,get,cause,get,message
HighlightBuilderTests -> public void testParsingTagsSchema() throws IOException;1529916084;`tags_schema` is not produced by toXContent in the builder but should be parseable, so this_adds a simple json test for this.;public void testParsingTagsSchema() throws IOException {__        String highlightElement = "{\n" +_                "    \"tags_schema\" : \"styled\"\n" +_                "}\n"__        try (XContentParser parser = createParser(JsonXContent.jsonXContent, highlightElement)) {__            HighlightBuilder highlightBuilder = HighlightBuilder.fromXContent(parser)__            assertArrayEquals("setting tags_schema 'styled' should alter pre_tags", HighlightBuilder.DEFAULT_STYLED_PRE_TAG,_                highlightBuilder.preTags())__            assertArrayEquals("setting tags_schema 'styled' should alter post_tags", HighlightBuilder.DEFAULT_STYLED_POST_TAGS,_                highlightBuilder.postTags())___            highlightElement = "{\n" +_                "    \"tags_schema\" : \"default\"\n" +_                "}\n"__        }_        try (XContentParser parser = createParser(JsonXContent.jsonXContent, highlightElement)) {__            HighlightBuilder highlightBuilder = HighlightBuilder.fromXContent(parser)__            assertArrayEquals("setting tags_schema 'default' should alter pre_tags", HighlightBuilder.DEFAULT_PRE_TAGS,_                highlightBuilder.preTags())__            assertArrayEquals("setting tags_schema 'default' should alter post_tags", HighlightBuilder.DEFAULT_POST_TAGS,_                highlightBuilder.postTags())___            XContentParseException e = expectParseThrows(XContentParseException.class, "{\n" +_                "    \"tags_schema\" : \"somthing_else\"\n" +_                "}\n")__            assertThat(e.getMessage(), containsString("[highlight] failed to parse field [tags_schema]"))__            assertEquals("Unknown tag schema [somthing_else]", e.getCause().getMessage())__        }_    };is,not,produced,by,to,xcontent,in,the,builder,but,should,be,parseable,so,this,adds,a,simple,json,test,for,this;public,void,test,parsing,tags,schema,throws,ioexception,string,highlight,element,n,styled,n,n,try,xcontent,parser,parser,create,parser,json,xcontent,json,xcontent,highlight,element,highlight,builder,highlight,builder,highlight,builder,from,xcontent,parser,assert,array,equals,setting,styled,should,alter,highlight,builder,highlight,builder,pre,tags,assert,array,equals,setting,styled,should,alter,highlight,builder,highlight,builder,post,tags,highlight,element,n,default,n,n,try,xcontent,parser,parser,create,parser,json,xcontent,json,xcontent,highlight,element,highlight,builder,highlight,builder,highlight,builder,from,xcontent,parser,assert,array,equals,setting,default,should,alter,highlight,builder,highlight,builder,pre,tags,assert,array,equals,setting,default,should,alter,highlight,builder,highlight,builder,post,tags,xcontent,parse,exception,e,expect,parse,throws,xcontent,parse,exception,class,n,n,n,assert,that,e,get,message,contains,string,highlight,failed,to,parse,field,assert,equals,unknown,tag,schema,e,get,cause,get,message
HighlightBuilderTests -> public void testParsingTagsSchema() throws IOException;1534755962;`tags_schema` is not produced by toXContent in the builder but should be parseable, so this_adds a simple json test for this.;public void testParsingTagsSchema() throws IOException {__        String highlightElement = "{\n" +_                "    \"tags_schema\" : \"styled\"\n" +_                "}\n"__        try (XContentParser parser = createParser(JsonXContent.jsonXContent, highlightElement)) {__            HighlightBuilder highlightBuilder = HighlightBuilder.fromXContent(parser)__            assertArrayEquals("setting tags_schema 'styled' should alter pre_tags", HighlightBuilder.DEFAULT_STYLED_PRE_TAG,_                highlightBuilder.preTags())__            assertArrayEquals("setting tags_schema 'styled' should alter post_tags", HighlightBuilder.DEFAULT_STYLED_POST_TAGS,_                highlightBuilder.postTags())___            highlightElement = "{\n" +_                "    \"tags_schema\" : \"default\"\n" +_                "}\n"__        }_        try (XContentParser parser = createParser(JsonXContent.jsonXContent, highlightElement)) {__            HighlightBuilder highlightBuilder = HighlightBuilder.fromXContent(parser)__            assertArrayEquals("setting tags_schema 'default' should alter pre_tags", HighlightBuilder.DEFAULT_PRE_TAGS,_                highlightBuilder.preTags())__            assertArrayEquals("setting tags_schema 'default' should alter post_tags", HighlightBuilder.DEFAULT_POST_TAGS,_                highlightBuilder.postTags())___            XContentParseException e = expectParseThrows(XContentParseException.class, "{\n" +_                "    \"tags_schema\" : \"somthing_else\"\n" +_                "}\n")__            assertThat(e.getMessage(), containsString("[highlight] failed to parse field [tags_schema]"))__            assertEquals("Unknown tag schema [somthing_else]", e.getCause().getMessage())__        }_    };is,not,produced,by,to,xcontent,in,the,builder,but,should,be,parseable,so,this,adds,a,simple,json,test,for,this;public,void,test,parsing,tags,schema,throws,ioexception,string,highlight,element,n,styled,n,n,try,xcontent,parser,parser,create,parser,json,xcontent,json,xcontent,highlight,element,highlight,builder,highlight,builder,highlight,builder,from,xcontent,parser,assert,array,equals,setting,styled,should,alter,highlight,builder,highlight,builder,pre,tags,assert,array,equals,setting,styled,should,alter,highlight,builder,highlight,builder,post,tags,highlight,element,n,default,n,n,try,xcontent,parser,parser,create,parser,json,xcontent,json,xcontent,highlight,element,highlight,builder,highlight,builder,highlight,builder,from,xcontent,parser,assert,array,equals,setting,default,should,alter,highlight,builder,highlight,builder,pre,tags,assert,array,equals,setting,default,should,alter,highlight,builder,highlight,builder,post,tags,xcontent,parse,exception,e,expect,parse,throws,xcontent,parse,exception,class,n,n,n,assert,that,e,get,message,contains,string,highlight,failed,to,parse,field,assert,equals,unknown,tag,schema,e,get,cause,get,message
HighlightBuilderTests -> public void testParsingTagsSchema() throws IOException;1537806831;`tags_schema` is not produced by toXContent in the builder but should be parseable, so this_adds a simple json test for this.;public void testParsingTagsSchema() throws IOException {__        String highlightElement = "{\n" +_                "    \"tags_schema\" : \"styled\"\n" +_                "}\n"__        try (XContentParser parser = createParser(JsonXContent.jsonXContent, highlightElement)) {__            HighlightBuilder highlightBuilder = HighlightBuilder.fromXContent(parser)__            assertArrayEquals("setting tags_schema 'styled' should alter pre_tags", HighlightBuilder.DEFAULT_STYLED_PRE_TAG,_                highlightBuilder.preTags())__            assertArrayEquals("setting tags_schema 'styled' should alter post_tags", HighlightBuilder.DEFAULT_STYLED_POST_TAGS,_                highlightBuilder.postTags())___            highlightElement = "{\n" +_                "    \"tags_schema\" : \"default\"\n" +_                "}\n"__        }_        try (XContentParser parser = createParser(JsonXContent.jsonXContent, highlightElement)) {__            HighlightBuilder highlightBuilder = HighlightBuilder.fromXContent(parser)__            assertArrayEquals("setting tags_schema 'default' should alter pre_tags", HighlightBuilder.DEFAULT_PRE_TAGS,_                highlightBuilder.preTags())__            assertArrayEquals("setting tags_schema 'default' should alter post_tags", HighlightBuilder.DEFAULT_POST_TAGS,_                highlightBuilder.postTags())___            XContentParseException e = expectParseThrows(XContentParseException.class, "{\n" +_                "    \"tags_schema\" : \"somthing_else\"\n" +_                "}\n")__            assertThat(e.getMessage(), containsString("[highlight] failed to parse field [tags_schema]"))__            assertEquals("Unknown tag schema [somthing_else]", e.getCause().getMessage())__        }_    };is,not,produced,by,to,xcontent,in,the,builder,but,should,be,parseable,so,this,adds,a,simple,json,test,for,this;public,void,test,parsing,tags,schema,throws,ioexception,string,highlight,element,n,styled,n,n,try,xcontent,parser,parser,create,parser,json,xcontent,json,xcontent,highlight,element,highlight,builder,highlight,builder,highlight,builder,from,xcontent,parser,assert,array,equals,setting,styled,should,alter,highlight,builder,highlight,builder,pre,tags,assert,array,equals,setting,styled,should,alter,highlight,builder,highlight,builder,post,tags,highlight,element,n,default,n,n,try,xcontent,parser,parser,create,parser,json,xcontent,json,xcontent,highlight,element,highlight,builder,highlight,builder,highlight,builder,from,xcontent,parser,assert,array,equals,setting,default,should,alter,highlight,builder,highlight,builder,pre,tags,assert,array,equals,setting,default,should,alter,highlight,builder,highlight,builder,post,tags,xcontent,parse,exception,e,expect,parse,throws,xcontent,parse,exception,class,n,n,n,assert,that,e,get,message,contains,string,highlight,failed,to,parse,field,assert,equals,unknown,tag,schema,e,get,cause,get,message
HighlightBuilderTests -> public void testBuildSearchContextHighlight() throws IOException;1524684173;test that build() outputs a {@link SearchContextHighlight} that is has similar parameters_than what we have in the random {@link HighlightBuilder};public void testBuildSearchContextHighlight() throws IOException {_        Settings indexSettings = Settings.builder()_                .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).build()__        Index index = new Index(randomAlphaOfLengthBetween(1, 10), "_na_")__        IndexSettings idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings)__        _        QueryShardContext mockShardContext = new QueryShardContext(0, idxSettings, null, null, null, null, null, xContentRegistry(),_            namedWriteableRegistry, null, null, System::currentTimeMillis, null) {_            @Override_            public MappedFieldType fieldMapper(String name) {_                TextFieldMapper.Builder builder = new TextFieldMapper.Builder(name)__                return builder.build(new Mapper.BuilderContext(idxSettings.getSettings(), new ContentPath(1))).fieldType()__            }_        }__        mockShardContext.setMapUnmappedFieldAsString(true)___        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            HighlightBuilder highlightBuilder = randomHighlighterBuilder()__            SearchContextHighlight highlight = highlightBuilder.build(mockShardContext)__            for (SearchContextHighlight.Field field : highlight.fields()) {_                String encoder = highlightBuilder.encoder() != null ? highlightBuilder.encoder() : HighlightBuilder.DEFAULT_ENCODER__                assertEquals(encoder, field.fieldOptions().encoder())__                final Field fieldBuilder = getFieldBuilderByName(highlightBuilder, field.field())__                assertNotNull("expected a highlight builder for field " + field.field(), fieldBuilder)__                FieldOptions fieldOptions = field.fieldOptions()___                BiConsumer<Function<AbstractHighlighterBuilder<?>, Object>, Function<FieldOptions, Object>> checkSame =_                        mergeBeforeChek(highlightBuilder, fieldBuilder, fieldOptions)___                checkSame.accept(AbstractHighlighterBuilder::boundaryChars, FieldOptions::boundaryChars)__                checkSame.accept(AbstractHighlighterBuilder::boundaryScannerType, FieldOptions::boundaryScannerType)__                checkSame.accept(AbstractHighlighterBuilder::boundaryMaxScan, FieldOptions::boundaryMaxScan)__                checkSame.accept(AbstractHighlighterBuilder::fragmentSize, FieldOptions::fragmentCharSize)__                checkSame.accept(AbstractHighlighterBuilder::fragmenter, FieldOptions::fragmenter)__                checkSame.accept(AbstractHighlighterBuilder::requireFieldMatch, FieldOptions::requireFieldMatch)__                checkSame.accept(AbstractHighlighterBuilder::noMatchSize, FieldOptions::noMatchSize)__                checkSame.accept(AbstractHighlighterBuilder::numOfFragments, FieldOptions::numberOfFragments)__                checkSame.accept(AbstractHighlighterBuilder::phraseLimit, FieldOptions::phraseLimit)__                checkSame.accept(AbstractHighlighterBuilder::highlighterType, FieldOptions::highlighterType)__                checkSame.accept(AbstractHighlighterBuilder::highlightFilter, FieldOptions::highlightFilter)__                checkSame.accept(AbstractHighlighterBuilder::preTags, FieldOptions::preTags)__                checkSame.accept(AbstractHighlighterBuilder::postTags, FieldOptions::postTags)__                checkSame.accept(AbstractHighlighterBuilder::options, FieldOptions::options)__                checkSame.accept(AbstractHighlighterBuilder::order, op -> op.scoreOrdered() ? Order.SCORE : Order.NONE)__                assertEquals(fieldBuilder.fragmentOffset, fieldOptions.fragmentOffset())__                if (fieldBuilder.matchedFields != null) {_                    String[] copy = Arrays.copyOf(fieldBuilder.matchedFields, fieldBuilder.matchedFields.length)__                    Arrays.sort(copy)__                    assertArrayEquals(copy,_                            new TreeSet<>(fieldOptions.matchedFields()).toArray(new String[fieldOptions.matchedFields().size()]))__                } else {_                    assertNull(fieldOptions.matchedFields())__                }_                Query expectedValue = null__                if (fieldBuilder.highlightQuery != null) {_                    expectedValue = Rewriteable.rewrite(fieldBuilder.highlightQuery, mockShardContext).toQuery(mockShardContext)__                } else if (highlightBuilder.highlightQuery != null) {_                    expectedValue = Rewriteable.rewrite(highlightBuilder.highlightQuery, mockShardContext).toQuery(mockShardContext)__                }_                assertEquals(expectedValue, fieldOptions.highlightQuery())__            }_        }_    };test,that,build,outputs,a,link,search,context,highlight,that,is,has,similar,parameters,than,what,we,have,in,the,random,link,highlight,builder;public,void,test,build,search,context,highlight,throws,ioexception,settings,index,settings,settings,builder,put,index,meta,data,version,current,build,index,index,new,index,random,alpha,of,length,between,1,10,index,settings,idx,settings,index,settings,module,new,index,settings,index,index,settings,query,shard,context,mock,shard,context,new,query,shard,context,0,idx,settings,null,null,null,null,null,x,content,registry,named,writeable,registry,null,null,system,current,time,millis,null,override,public,mapped,field,type,field,mapper,string,name,text,field,mapper,builder,builder,new,text,field,mapper,builder,name,return,builder,build,new,mapper,builder,context,idx,settings,get,settings,new,content,path,1,field,type,mock,shard,context,set,map,unmapped,field,as,string,true,for,int,runs,0,runs,runs,highlight,builder,highlight,builder,random,highlighter,builder,search,context,highlight,highlight,highlight,builder,build,mock,shard,context,for,search,context,highlight,field,field,highlight,fields,string,encoder,highlight,builder,encoder,null,highlight,builder,encoder,highlight,builder,assert,equals,encoder,field,field,options,encoder,final,field,field,builder,get,field,builder,by,name,highlight,builder,field,field,assert,not,null,expected,a,highlight,builder,for,field,field,field,field,builder,field,options,field,options,field,field,options,bi,consumer,function,abstract,highlighter,builder,object,function,field,options,object,check,same,merge,before,chek,highlight,builder,field,builder,field,options,check,same,accept,abstract,highlighter,builder,boundary,chars,field,options,boundary,chars,check,same,accept,abstract,highlighter,builder,boundary,scanner,type,field,options,boundary,scanner,type,check,same,accept,abstract,highlighter,builder,boundary,max,scan,field,options,boundary,max,scan,check,same,accept,abstract,highlighter,builder,fragment,size,field,options,fragment,char,size,check,same,accept,abstract,highlighter,builder,fragmenter,field,options,fragmenter,check,same,accept,abstract,highlighter,builder,require,field,match,field,options,require,field,match,check,same,accept,abstract,highlighter,builder,no,match,size,field,options,no,match,size,check,same,accept,abstract,highlighter,builder,num,of,fragments,field,options,number,of,fragments,check,same,accept,abstract,highlighter,builder,phrase,limit,field,options,phrase,limit,check,same,accept,abstract,highlighter,builder,highlighter,type,field,options,highlighter,type,check,same,accept,abstract,highlighter,builder,highlight,filter,field,options,highlight,filter,check,same,accept,abstract,highlighter,builder,pre,tags,field,options,pre,tags,check,same,accept,abstract,highlighter,builder,post,tags,field,options,post,tags,check,same,accept,abstract,highlighter,builder,options,field,options,options,check,same,accept,abstract,highlighter,builder,order,op,op,score,ordered,order,score,order,none,assert,equals,field,builder,fragment,offset,field,options,fragment,offset,if,field,builder,matched,fields,null,string,copy,arrays,copy,of,field,builder,matched,fields,field,builder,matched,fields,length,arrays,sort,copy,assert,array,equals,copy,new,tree,set,field,options,matched,fields,to,array,new,string,field,options,matched,fields,size,else,assert,null,field,options,matched,fields,query,expected,value,null,if,field,builder,highlight,query,null,expected,value,rewriteable,rewrite,field,builder,highlight,query,mock,shard,context,to,query,mock,shard,context,else,if,highlight,builder,highlight,query,null,expected,value,rewriteable,rewrite,highlight,builder,highlight,query,mock,shard,context,to,query,mock,shard,context,assert,equals,expected,value,field,options,highlight,query
HighlightBuilderTests -> public void testBuildSearchContextHighlight() throws IOException;1528167589;test that build() outputs a {@link SearchContextHighlight} that is has similar parameters_than what we have in the random {@link HighlightBuilder};public void testBuildSearchContextHighlight() throws IOException {_        Settings indexSettings = Settings.builder()_                .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).build()__        Index index = new Index(randomAlphaOfLengthBetween(1, 10), "_na_")__        IndexSettings idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings)__        _        QueryShardContext mockShardContext = new QueryShardContext(0, idxSettings, null, null, null, null, null, xContentRegistry(),_            namedWriteableRegistry, null, null, System::currentTimeMillis, null) {_            @Override_            public MappedFieldType fieldMapper(String name) {_                TextFieldMapper.Builder builder = new TextFieldMapper.Builder(name)__                return builder.build(new Mapper.BuilderContext(idxSettings.getSettings(), new ContentPath(1))).fieldType()__            }_        }__        mockShardContext.setMapUnmappedFieldAsString(true)___        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            HighlightBuilder highlightBuilder = randomHighlighterBuilder()__            SearchContextHighlight highlight = highlightBuilder.build(mockShardContext)__            for (SearchContextHighlight.Field field : highlight.fields()) {_                String encoder = highlightBuilder.encoder() != null ? highlightBuilder.encoder() : HighlightBuilder.DEFAULT_ENCODER__                assertEquals(encoder, field.fieldOptions().encoder())__                final Field fieldBuilder = getFieldBuilderByName(highlightBuilder, field.field())__                assertNotNull("expected a highlight builder for field " + field.field(), fieldBuilder)__                FieldOptions fieldOptions = field.fieldOptions()___                BiConsumer<Function<AbstractHighlighterBuilder<?>, Object>, Function<FieldOptions, Object>> checkSame =_                        mergeBeforeChek(highlightBuilder, fieldBuilder, fieldOptions)___                checkSame.accept(AbstractHighlighterBuilder::boundaryChars, FieldOptions::boundaryChars)__                checkSame.accept(AbstractHighlighterBuilder::boundaryScannerType, FieldOptions::boundaryScannerType)__                checkSame.accept(AbstractHighlighterBuilder::boundaryMaxScan, FieldOptions::boundaryMaxScan)__                checkSame.accept(AbstractHighlighterBuilder::fragmentSize, FieldOptions::fragmentCharSize)__                checkSame.accept(AbstractHighlighterBuilder::fragmenter, FieldOptions::fragmenter)__                checkSame.accept(AbstractHighlighterBuilder::requireFieldMatch, FieldOptions::requireFieldMatch)__                checkSame.accept(AbstractHighlighterBuilder::noMatchSize, FieldOptions::noMatchSize)__                checkSame.accept(AbstractHighlighterBuilder::numOfFragments, FieldOptions::numberOfFragments)__                checkSame.accept(AbstractHighlighterBuilder::phraseLimit, FieldOptions::phraseLimit)__                checkSame.accept(AbstractHighlighterBuilder::highlighterType, FieldOptions::highlighterType)__                checkSame.accept(AbstractHighlighterBuilder::highlightFilter, FieldOptions::highlightFilter)__                checkSame.accept(AbstractHighlighterBuilder::preTags, FieldOptions::preTags)__                checkSame.accept(AbstractHighlighterBuilder::postTags, FieldOptions::postTags)__                checkSame.accept(AbstractHighlighterBuilder::options, FieldOptions::options)__                checkSame.accept(AbstractHighlighterBuilder::order, op -> op.scoreOrdered() ? Order.SCORE : Order.NONE)__                assertEquals(fieldBuilder.fragmentOffset, fieldOptions.fragmentOffset())__                if (fieldBuilder.matchedFields != null) {_                    String[] copy = Arrays.copyOf(fieldBuilder.matchedFields, fieldBuilder.matchedFields.length)__                    Arrays.sort(copy)__                    assertArrayEquals(copy,_                            new TreeSet<>(fieldOptions.matchedFields()).toArray(new String[fieldOptions.matchedFields().size()]))__                } else {_                    assertNull(fieldOptions.matchedFields())__                }_                Query expectedValue = null__                if (fieldBuilder.highlightQuery != null) {_                    expectedValue = Rewriteable.rewrite(fieldBuilder.highlightQuery, mockShardContext).toQuery(mockShardContext)__                } else if (highlightBuilder.highlightQuery != null) {_                    expectedValue = Rewriteable.rewrite(highlightBuilder.highlightQuery, mockShardContext).toQuery(mockShardContext)__                }_                assertEquals(expectedValue, fieldOptions.highlightQuery())__            }_        }_    };test,that,build,outputs,a,link,search,context,highlight,that,is,has,similar,parameters,than,what,we,have,in,the,random,link,highlight,builder;public,void,test,build,search,context,highlight,throws,ioexception,settings,index,settings,settings,builder,put,index,meta,data,version,current,build,index,index,new,index,random,alpha,of,length,between,1,10,index,settings,idx,settings,index,settings,module,new,index,settings,index,index,settings,query,shard,context,mock,shard,context,new,query,shard,context,0,idx,settings,null,null,null,null,null,x,content,registry,named,writeable,registry,null,null,system,current,time,millis,null,override,public,mapped,field,type,field,mapper,string,name,text,field,mapper,builder,builder,new,text,field,mapper,builder,name,return,builder,build,new,mapper,builder,context,idx,settings,get,settings,new,content,path,1,field,type,mock,shard,context,set,map,unmapped,field,as,string,true,for,int,runs,0,runs,runs,highlight,builder,highlight,builder,random,highlighter,builder,search,context,highlight,highlight,highlight,builder,build,mock,shard,context,for,search,context,highlight,field,field,highlight,fields,string,encoder,highlight,builder,encoder,null,highlight,builder,encoder,highlight,builder,assert,equals,encoder,field,field,options,encoder,final,field,field,builder,get,field,builder,by,name,highlight,builder,field,field,assert,not,null,expected,a,highlight,builder,for,field,field,field,field,builder,field,options,field,options,field,field,options,bi,consumer,function,abstract,highlighter,builder,object,function,field,options,object,check,same,merge,before,chek,highlight,builder,field,builder,field,options,check,same,accept,abstract,highlighter,builder,boundary,chars,field,options,boundary,chars,check,same,accept,abstract,highlighter,builder,boundary,scanner,type,field,options,boundary,scanner,type,check,same,accept,abstract,highlighter,builder,boundary,max,scan,field,options,boundary,max,scan,check,same,accept,abstract,highlighter,builder,fragment,size,field,options,fragment,char,size,check,same,accept,abstract,highlighter,builder,fragmenter,field,options,fragmenter,check,same,accept,abstract,highlighter,builder,require,field,match,field,options,require,field,match,check,same,accept,abstract,highlighter,builder,no,match,size,field,options,no,match,size,check,same,accept,abstract,highlighter,builder,num,of,fragments,field,options,number,of,fragments,check,same,accept,abstract,highlighter,builder,phrase,limit,field,options,phrase,limit,check,same,accept,abstract,highlighter,builder,highlighter,type,field,options,highlighter,type,check,same,accept,abstract,highlighter,builder,highlight,filter,field,options,highlight,filter,check,same,accept,abstract,highlighter,builder,pre,tags,field,options,pre,tags,check,same,accept,abstract,highlighter,builder,post,tags,field,options,post,tags,check,same,accept,abstract,highlighter,builder,options,field,options,options,check,same,accept,abstract,highlighter,builder,order,op,op,score,ordered,order,score,order,none,assert,equals,field,builder,fragment,offset,field,options,fragment,offset,if,field,builder,matched,fields,null,string,copy,arrays,copy,of,field,builder,matched,fields,field,builder,matched,fields,length,arrays,sort,copy,assert,array,equals,copy,new,tree,set,field,options,matched,fields,to,array,new,string,field,options,matched,fields,size,else,assert,null,field,options,matched,fields,query,expected,value,null,if,field,builder,highlight,query,null,expected,value,rewriteable,rewrite,field,builder,highlight,query,mock,shard,context,to,query,mock,shard,context,else,if,highlight,builder,highlight,query,null,expected,value,rewriteable,rewrite,highlight,builder,highlight,query,mock,shard,context,to,query,mock,shard,context,assert,equals,expected,value,field,options,highlight,query
HighlightBuilderTests -> public void testBuildSearchContextHighlight() throws IOException;1529916084;test that build() outputs a {@link SearchContextHighlight} that is has similar parameters_than what we have in the random {@link HighlightBuilder};public void testBuildSearchContextHighlight() throws IOException {_        Settings indexSettings = Settings.builder()_                .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).build()__        Index index = new Index(randomAlphaOfLengthBetween(1, 10), "_na_")__        IndexSettings idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings)__        _        QueryShardContext mockShardContext = new QueryShardContext(0, idxSettings, null, null, null, null, null, xContentRegistry(),_            namedWriteableRegistry, null, null, System::currentTimeMillis, null) {_            @Override_            public MappedFieldType fieldMapper(String name) {_                TextFieldMapper.Builder builder = new TextFieldMapper.Builder(name)__                return builder.build(new Mapper.BuilderContext(idxSettings.getSettings(), new ContentPath(1))).fieldType()__            }_        }__        mockShardContext.setMapUnmappedFieldAsString(true)___        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            HighlightBuilder highlightBuilder = randomHighlighterBuilder()__            SearchContextHighlight highlight = highlightBuilder.build(mockShardContext)__            for (SearchContextHighlight.Field field : highlight.fields()) {_                String encoder = highlightBuilder.encoder() != null ? highlightBuilder.encoder() : HighlightBuilder.DEFAULT_ENCODER__                assertEquals(encoder, field.fieldOptions().encoder())__                final Field fieldBuilder = getFieldBuilderByName(highlightBuilder, field.field())__                assertNotNull("expected a highlight builder for field " + field.field(), fieldBuilder)__                FieldOptions fieldOptions = field.fieldOptions()___                BiConsumer<Function<AbstractHighlighterBuilder<?>, Object>, Function<FieldOptions, Object>> checkSame =_                        mergeBeforeChek(highlightBuilder, fieldBuilder, fieldOptions)___                checkSame.accept(AbstractHighlighterBuilder::boundaryChars, FieldOptions::boundaryChars)__                checkSame.accept(AbstractHighlighterBuilder::boundaryScannerType, FieldOptions::boundaryScannerType)__                checkSame.accept(AbstractHighlighterBuilder::boundaryMaxScan, FieldOptions::boundaryMaxScan)__                checkSame.accept(AbstractHighlighterBuilder::fragmentSize, FieldOptions::fragmentCharSize)__                checkSame.accept(AbstractHighlighterBuilder::fragmenter, FieldOptions::fragmenter)__                checkSame.accept(AbstractHighlighterBuilder::requireFieldMatch, FieldOptions::requireFieldMatch)__                checkSame.accept(AbstractHighlighterBuilder::noMatchSize, FieldOptions::noMatchSize)__                checkSame.accept(AbstractHighlighterBuilder::numOfFragments, FieldOptions::numberOfFragments)__                checkSame.accept(AbstractHighlighterBuilder::phraseLimit, FieldOptions::phraseLimit)__                checkSame.accept(AbstractHighlighterBuilder::highlighterType, FieldOptions::highlighterType)__                checkSame.accept(AbstractHighlighterBuilder::highlightFilter, FieldOptions::highlightFilter)__                checkSame.accept(AbstractHighlighterBuilder::preTags, FieldOptions::preTags)__                checkSame.accept(AbstractHighlighterBuilder::postTags, FieldOptions::postTags)__                checkSame.accept(AbstractHighlighterBuilder::options, FieldOptions::options)__                checkSame.accept(AbstractHighlighterBuilder::order, op -> op.scoreOrdered() ? Order.SCORE : Order.NONE)__                assertEquals(fieldBuilder.fragmentOffset, fieldOptions.fragmentOffset())__                if (fieldBuilder.matchedFields != null) {_                    String[] copy = Arrays.copyOf(fieldBuilder.matchedFields, fieldBuilder.matchedFields.length)__                    Arrays.sort(copy)__                    assertArrayEquals(copy,_                            new TreeSet<>(fieldOptions.matchedFields()).toArray(new String[fieldOptions.matchedFields().size()]))__                } else {_                    assertNull(fieldOptions.matchedFields())__                }_                Query expectedValue = null__                if (fieldBuilder.highlightQuery != null) {_                    expectedValue = Rewriteable.rewrite(fieldBuilder.highlightQuery, mockShardContext).toQuery(mockShardContext)__                } else if (highlightBuilder.highlightQuery != null) {_                    expectedValue = Rewriteable.rewrite(highlightBuilder.highlightQuery, mockShardContext).toQuery(mockShardContext)__                }_                assertEquals(expectedValue, fieldOptions.highlightQuery())__            }_        }_    };test,that,build,outputs,a,link,search,context,highlight,that,is,has,similar,parameters,than,what,we,have,in,the,random,link,highlight,builder;public,void,test,build,search,context,highlight,throws,ioexception,settings,index,settings,settings,builder,put,index,meta,data,version,current,build,index,index,new,index,random,alpha,of,length,between,1,10,index,settings,idx,settings,index,settings,module,new,index,settings,index,index,settings,query,shard,context,mock,shard,context,new,query,shard,context,0,idx,settings,null,null,null,null,null,x,content,registry,named,writeable,registry,null,null,system,current,time,millis,null,override,public,mapped,field,type,field,mapper,string,name,text,field,mapper,builder,builder,new,text,field,mapper,builder,name,return,builder,build,new,mapper,builder,context,idx,settings,get,settings,new,content,path,1,field,type,mock,shard,context,set,map,unmapped,field,as,string,true,for,int,runs,0,runs,runs,highlight,builder,highlight,builder,random,highlighter,builder,search,context,highlight,highlight,highlight,builder,build,mock,shard,context,for,search,context,highlight,field,field,highlight,fields,string,encoder,highlight,builder,encoder,null,highlight,builder,encoder,highlight,builder,assert,equals,encoder,field,field,options,encoder,final,field,field,builder,get,field,builder,by,name,highlight,builder,field,field,assert,not,null,expected,a,highlight,builder,for,field,field,field,field,builder,field,options,field,options,field,field,options,bi,consumer,function,abstract,highlighter,builder,object,function,field,options,object,check,same,merge,before,chek,highlight,builder,field,builder,field,options,check,same,accept,abstract,highlighter,builder,boundary,chars,field,options,boundary,chars,check,same,accept,abstract,highlighter,builder,boundary,scanner,type,field,options,boundary,scanner,type,check,same,accept,abstract,highlighter,builder,boundary,max,scan,field,options,boundary,max,scan,check,same,accept,abstract,highlighter,builder,fragment,size,field,options,fragment,char,size,check,same,accept,abstract,highlighter,builder,fragmenter,field,options,fragmenter,check,same,accept,abstract,highlighter,builder,require,field,match,field,options,require,field,match,check,same,accept,abstract,highlighter,builder,no,match,size,field,options,no,match,size,check,same,accept,abstract,highlighter,builder,num,of,fragments,field,options,number,of,fragments,check,same,accept,abstract,highlighter,builder,phrase,limit,field,options,phrase,limit,check,same,accept,abstract,highlighter,builder,highlighter,type,field,options,highlighter,type,check,same,accept,abstract,highlighter,builder,highlight,filter,field,options,highlight,filter,check,same,accept,abstract,highlighter,builder,pre,tags,field,options,pre,tags,check,same,accept,abstract,highlighter,builder,post,tags,field,options,post,tags,check,same,accept,abstract,highlighter,builder,options,field,options,options,check,same,accept,abstract,highlighter,builder,order,op,op,score,ordered,order,score,order,none,assert,equals,field,builder,fragment,offset,field,options,fragment,offset,if,field,builder,matched,fields,null,string,copy,arrays,copy,of,field,builder,matched,fields,field,builder,matched,fields,length,arrays,sort,copy,assert,array,equals,copy,new,tree,set,field,options,matched,fields,to,array,new,string,field,options,matched,fields,size,else,assert,null,field,options,matched,fields,query,expected,value,null,if,field,builder,highlight,query,null,expected,value,rewriteable,rewrite,field,builder,highlight,query,mock,shard,context,to,query,mock,shard,context,else,if,highlight,builder,highlight,query,null,expected,value,rewriteable,rewrite,highlight,builder,highlight,query,mock,shard,context,to,query,mock,shard,context,assert,equals,expected,value,field,options,highlight,query
HighlightBuilderTests -> public void testBuildSearchContextHighlight() throws IOException;1534755962;test that build() outputs a {@link SearchContextHighlight} that is has similar parameters_than what we have in the random {@link HighlightBuilder};public void testBuildSearchContextHighlight() throws IOException {_        Settings indexSettings = Settings.builder()_                .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).build()__        Index index = new Index(randomAlphaOfLengthBetween(1, 10), "_na_")__        IndexSettings idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings)__        _        QueryShardContext mockShardContext = new QueryShardContext(0, idxSettings, null, null, null, null, null, xContentRegistry(),_            namedWriteableRegistry, null, null, System::currentTimeMillis, null) {_            @Override_            public MappedFieldType fieldMapper(String name) {_                TextFieldMapper.Builder builder = new TextFieldMapper.Builder(name)__                return builder.build(new Mapper.BuilderContext(idxSettings.getSettings(), new ContentPath(1))).fieldType()__            }_        }__        mockShardContext.setMapUnmappedFieldAsString(true)___        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            HighlightBuilder highlightBuilder = randomHighlighterBuilder()__            SearchContextHighlight highlight = highlightBuilder.build(mockShardContext)__            for (SearchContextHighlight.Field field : highlight.fields()) {_                String encoder = highlightBuilder.encoder() != null ? highlightBuilder.encoder() : HighlightBuilder.DEFAULT_ENCODER__                assertEquals(encoder, field.fieldOptions().encoder())__                final Field fieldBuilder = getFieldBuilderByName(highlightBuilder, field.field())__                assertNotNull("expected a highlight builder for field " + field.field(), fieldBuilder)__                FieldOptions fieldOptions = field.fieldOptions()___                BiConsumer<Function<AbstractHighlighterBuilder<?>, Object>, Function<FieldOptions, Object>> checkSame =_                        mergeBeforeChek(highlightBuilder, fieldBuilder, fieldOptions)___                checkSame.accept(AbstractHighlighterBuilder::boundaryChars, FieldOptions::boundaryChars)__                checkSame.accept(AbstractHighlighterBuilder::boundaryScannerType, FieldOptions::boundaryScannerType)__                checkSame.accept(AbstractHighlighterBuilder::boundaryMaxScan, FieldOptions::boundaryMaxScan)__                checkSame.accept(AbstractHighlighterBuilder::fragmentSize, FieldOptions::fragmentCharSize)__                checkSame.accept(AbstractHighlighterBuilder::fragmenter, FieldOptions::fragmenter)__                checkSame.accept(AbstractHighlighterBuilder::requireFieldMatch, FieldOptions::requireFieldMatch)__                checkSame.accept(AbstractHighlighterBuilder::noMatchSize, FieldOptions::noMatchSize)__                checkSame.accept(AbstractHighlighterBuilder::numOfFragments, FieldOptions::numberOfFragments)__                checkSame.accept(AbstractHighlighterBuilder::phraseLimit, FieldOptions::phraseLimit)__                checkSame.accept(AbstractHighlighterBuilder::highlighterType, FieldOptions::highlighterType)__                checkSame.accept(AbstractHighlighterBuilder::highlightFilter, FieldOptions::highlightFilter)__                checkSame.accept(AbstractHighlighterBuilder::preTags, FieldOptions::preTags)__                checkSame.accept(AbstractHighlighterBuilder::postTags, FieldOptions::postTags)__                checkSame.accept(AbstractHighlighterBuilder::options, FieldOptions::options)__                checkSame.accept(AbstractHighlighterBuilder::order, op -> op.scoreOrdered() ? Order.SCORE : Order.NONE)__                assertEquals(fieldBuilder.fragmentOffset, fieldOptions.fragmentOffset())__                if (fieldBuilder.matchedFields != null) {_                    String[] copy = Arrays.copyOf(fieldBuilder.matchedFields, fieldBuilder.matchedFields.length)__                    Arrays.sort(copy)__                    assertArrayEquals(copy,_                            new TreeSet<>(fieldOptions.matchedFields()).toArray(new String[fieldOptions.matchedFields().size()]))__                } else {_                    assertNull(fieldOptions.matchedFields())__                }_                Query expectedValue = null__                if (fieldBuilder.highlightQuery != null) {_                    expectedValue = Rewriteable.rewrite(fieldBuilder.highlightQuery, mockShardContext).toQuery(mockShardContext)__                } else if (highlightBuilder.highlightQuery != null) {_                    expectedValue = Rewriteable.rewrite(highlightBuilder.highlightQuery, mockShardContext).toQuery(mockShardContext)__                }_                assertEquals(expectedValue, fieldOptions.highlightQuery())__            }_        }_    };test,that,build,outputs,a,link,search,context,highlight,that,is,has,similar,parameters,than,what,we,have,in,the,random,link,highlight,builder;public,void,test,build,search,context,highlight,throws,ioexception,settings,index,settings,settings,builder,put,index,meta,data,version,current,build,index,index,new,index,random,alpha,of,length,between,1,10,index,settings,idx,settings,index,settings,module,new,index,settings,index,index,settings,query,shard,context,mock,shard,context,new,query,shard,context,0,idx,settings,null,null,null,null,null,x,content,registry,named,writeable,registry,null,null,system,current,time,millis,null,override,public,mapped,field,type,field,mapper,string,name,text,field,mapper,builder,builder,new,text,field,mapper,builder,name,return,builder,build,new,mapper,builder,context,idx,settings,get,settings,new,content,path,1,field,type,mock,shard,context,set,map,unmapped,field,as,string,true,for,int,runs,0,runs,runs,highlight,builder,highlight,builder,random,highlighter,builder,search,context,highlight,highlight,highlight,builder,build,mock,shard,context,for,search,context,highlight,field,field,highlight,fields,string,encoder,highlight,builder,encoder,null,highlight,builder,encoder,highlight,builder,assert,equals,encoder,field,field,options,encoder,final,field,field,builder,get,field,builder,by,name,highlight,builder,field,field,assert,not,null,expected,a,highlight,builder,for,field,field,field,field,builder,field,options,field,options,field,field,options,bi,consumer,function,abstract,highlighter,builder,object,function,field,options,object,check,same,merge,before,chek,highlight,builder,field,builder,field,options,check,same,accept,abstract,highlighter,builder,boundary,chars,field,options,boundary,chars,check,same,accept,abstract,highlighter,builder,boundary,scanner,type,field,options,boundary,scanner,type,check,same,accept,abstract,highlighter,builder,boundary,max,scan,field,options,boundary,max,scan,check,same,accept,abstract,highlighter,builder,fragment,size,field,options,fragment,char,size,check,same,accept,abstract,highlighter,builder,fragmenter,field,options,fragmenter,check,same,accept,abstract,highlighter,builder,require,field,match,field,options,require,field,match,check,same,accept,abstract,highlighter,builder,no,match,size,field,options,no,match,size,check,same,accept,abstract,highlighter,builder,num,of,fragments,field,options,number,of,fragments,check,same,accept,abstract,highlighter,builder,phrase,limit,field,options,phrase,limit,check,same,accept,abstract,highlighter,builder,highlighter,type,field,options,highlighter,type,check,same,accept,abstract,highlighter,builder,highlight,filter,field,options,highlight,filter,check,same,accept,abstract,highlighter,builder,pre,tags,field,options,pre,tags,check,same,accept,abstract,highlighter,builder,post,tags,field,options,post,tags,check,same,accept,abstract,highlighter,builder,options,field,options,options,check,same,accept,abstract,highlighter,builder,order,op,op,score,ordered,order,score,order,none,assert,equals,field,builder,fragment,offset,field,options,fragment,offset,if,field,builder,matched,fields,null,string,copy,arrays,copy,of,field,builder,matched,fields,field,builder,matched,fields,length,arrays,sort,copy,assert,array,equals,copy,new,tree,set,field,options,matched,fields,to,array,new,string,field,options,matched,fields,size,else,assert,null,field,options,matched,fields,query,expected,value,null,if,field,builder,highlight,query,null,expected,value,rewriteable,rewrite,field,builder,highlight,query,mock,shard,context,to,query,mock,shard,context,else,if,highlight,builder,highlight,query,null,expected,value,rewriteable,rewrite,highlight,builder,highlight,query,mock,shard,context,to,query,mock,shard,context,assert,equals,expected,value,field,options,highlight,query
HighlightBuilderTests -> public void testBuildSearchContextHighlight() throws IOException;1537806831;test that build() outputs a {@link SearchContextHighlight} that is has similar parameters_than what we have in the random {@link HighlightBuilder};public void testBuildSearchContextHighlight() throws IOException {_        Settings indexSettings = Settings.builder()_                .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).build()__        Index index = new Index(randomAlphaOfLengthBetween(1, 10), "_na_")__        IndexSettings idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings)__        _        QueryShardContext mockShardContext = new QueryShardContext(0, idxSettings, null, null, null, null, null, xContentRegistry(),_            namedWriteableRegistry, null, null, System::currentTimeMillis, null) {_            @Override_            public MappedFieldType fieldMapper(String name) {_                TextFieldMapper.Builder builder = new TextFieldMapper.Builder(name)__                return builder.build(new Mapper.BuilderContext(idxSettings.getSettings(), new ContentPath(1))).fieldType()__            }_        }__        mockShardContext.setMapUnmappedFieldAsString(true)___        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            HighlightBuilder highlightBuilder = randomHighlighterBuilder()__            SearchContextHighlight highlight = highlightBuilder.build(mockShardContext)__            for (SearchContextHighlight.Field field : highlight.fields()) {_                String encoder = highlightBuilder.encoder() != null ? highlightBuilder.encoder() : HighlightBuilder.DEFAULT_ENCODER__                assertEquals(encoder, field.fieldOptions().encoder())__                final Field fieldBuilder = getFieldBuilderByName(highlightBuilder, field.field())__                assertNotNull("expected a highlight builder for field " + field.field(), fieldBuilder)__                FieldOptions fieldOptions = field.fieldOptions()___                BiConsumer<Function<AbstractHighlighterBuilder<?>, Object>, Function<FieldOptions, Object>> checkSame =_                        mergeBeforeChek(highlightBuilder, fieldBuilder, fieldOptions)___                checkSame.accept(AbstractHighlighterBuilder::boundaryChars, FieldOptions::boundaryChars)__                checkSame.accept(AbstractHighlighterBuilder::boundaryScannerType, FieldOptions::boundaryScannerType)__                checkSame.accept(AbstractHighlighterBuilder::boundaryMaxScan, FieldOptions::boundaryMaxScan)__                checkSame.accept(AbstractHighlighterBuilder::fragmentSize, FieldOptions::fragmentCharSize)__                checkSame.accept(AbstractHighlighterBuilder::fragmenter, FieldOptions::fragmenter)__                checkSame.accept(AbstractHighlighterBuilder::requireFieldMatch, FieldOptions::requireFieldMatch)__                checkSame.accept(AbstractHighlighterBuilder::noMatchSize, FieldOptions::noMatchSize)__                checkSame.accept(AbstractHighlighterBuilder::numOfFragments, FieldOptions::numberOfFragments)__                checkSame.accept(AbstractHighlighterBuilder::phraseLimit, FieldOptions::phraseLimit)__                checkSame.accept(AbstractHighlighterBuilder::highlighterType, FieldOptions::highlighterType)__                checkSame.accept(AbstractHighlighterBuilder::highlightFilter, FieldOptions::highlightFilter)__                checkSame.accept(AbstractHighlighterBuilder::preTags, FieldOptions::preTags)__                checkSame.accept(AbstractHighlighterBuilder::postTags, FieldOptions::postTags)__                checkSame.accept(AbstractHighlighterBuilder::options, FieldOptions::options)__                checkSame.accept(AbstractHighlighterBuilder::order, op -> op.scoreOrdered() ? Order.SCORE : Order.NONE)__                assertEquals(fieldBuilder.fragmentOffset, fieldOptions.fragmentOffset())__                if (fieldBuilder.matchedFields != null) {_                    String[] copy = Arrays.copyOf(fieldBuilder.matchedFields, fieldBuilder.matchedFields.length)__                    Arrays.sort(copy)__                    assertArrayEquals(copy,_                            new TreeSet<>(fieldOptions.matchedFields()).toArray(new String[fieldOptions.matchedFields().size()]))__                } else {_                    assertNull(fieldOptions.matchedFields())__                }_                Query expectedValue = null__                if (fieldBuilder.highlightQuery != null) {_                    expectedValue = Rewriteable.rewrite(fieldBuilder.highlightQuery, mockShardContext).toQuery(mockShardContext)__                } else if (highlightBuilder.highlightQuery != null) {_                    expectedValue = Rewriteable.rewrite(highlightBuilder.highlightQuery, mockShardContext).toQuery(mockShardContext)__                }_                assertEquals(expectedValue, fieldOptions.highlightQuery())__            }_        }_    };test,that,build,outputs,a,link,search,context,highlight,that,is,has,similar,parameters,than,what,we,have,in,the,random,link,highlight,builder;public,void,test,build,search,context,highlight,throws,ioexception,settings,index,settings,settings,builder,put,index,meta,data,version,current,build,index,index,new,index,random,alpha,of,length,between,1,10,index,settings,idx,settings,index,settings,module,new,index,settings,index,index,settings,query,shard,context,mock,shard,context,new,query,shard,context,0,idx,settings,null,null,null,null,null,x,content,registry,named,writeable,registry,null,null,system,current,time,millis,null,override,public,mapped,field,type,field,mapper,string,name,text,field,mapper,builder,builder,new,text,field,mapper,builder,name,return,builder,build,new,mapper,builder,context,idx,settings,get,settings,new,content,path,1,field,type,mock,shard,context,set,map,unmapped,field,as,string,true,for,int,runs,0,runs,runs,highlight,builder,highlight,builder,random,highlighter,builder,search,context,highlight,highlight,highlight,builder,build,mock,shard,context,for,search,context,highlight,field,field,highlight,fields,string,encoder,highlight,builder,encoder,null,highlight,builder,encoder,highlight,builder,assert,equals,encoder,field,field,options,encoder,final,field,field,builder,get,field,builder,by,name,highlight,builder,field,field,assert,not,null,expected,a,highlight,builder,for,field,field,field,field,builder,field,options,field,options,field,field,options,bi,consumer,function,abstract,highlighter,builder,object,function,field,options,object,check,same,merge,before,chek,highlight,builder,field,builder,field,options,check,same,accept,abstract,highlighter,builder,boundary,chars,field,options,boundary,chars,check,same,accept,abstract,highlighter,builder,boundary,scanner,type,field,options,boundary,scanner,type,check,same,accept,abstract,highlighter,builder,boundary,max,scan,field,options,boundary,max,scan,check,same,accept,abstract,highlighter,builder,fragment,size,field,options,fragment,char,size,check,same,accept,abstract,highlighter,builder,fragmenter,field,options,fragmenter,check,same,accept,abstract,highlighter,builder,require,field,match,field,options,require,field,match,check,same,accept,abstract,highlighter,builder,no,match,size,field,options,no,match,size,check,same,accept,abstract,highlighter,builder,num,of,fragments,field,options,number,of,fragments,check,same,accept,abstract,highlighter,builder,phrase,limit,field,options,phrase,limit,check,same,accept,abstract,highlighter,builder,highlighter,type,field,options,highlighter,type,check,same,accept,abstract,highlighter,builder,highlight,filter,field,options,highlight,filter,check,same,accept,abstract,highlighter,builder,pre,tags,field,options,pre,tags,check,same,accept,abstract,highlighter,builder,post,tags,field,options,post,tags,check,same,accept,abstract,highlighter,builder,options,field,options,options,check,same,accept,abstract,highlighter,builder,order,op,op,score,ordered,order,score,order,none,assert,equals,field,builder,fragment,offset,field,options,fragment,offset,if,field,builder,matched,fields,null,string,copy,arrays,copy,of,field,builder,matched,fields,field,builder,matched,fields,length,arrays,sort,copy,assert,array,equals,copy,new,tree,set,field,options,matched,fields,to,array,new,string,field,options,matched,fields,size,else,assert,null,field,options,matched,fields,query,expected,value,null,if,field,builder,highlight,query,null,expected,value,rewriteable,rewrite,field,builder,highlight,query,mock,shard,context,to,query,mock,shard,context,else,if,highlight,builder,highlight,query,null,expected,value,rewriteable,rewrite,highlight,builder,highlight,query,mock,shard,context,to,query,mock,shard,context,assert,equals,expected,value,field,options,highlight,query
HighlightBuilderTests -> public void testParsingEmptyStructure() throws IOException;1524684173;test parsing empty highlight or empty fields blocks;public void testParsingEmptyStructure() throws IOException {_        String highlightElement = "{ }"__        XContentParser parser = createParser(JsonXContent.jsonXContent, highlightElement)___        HighlightBuilder highlightBuilder = HighlightBuilder.fromXContent(parser)__        assertEquals("expected plain HighlightBuilder", new HighlightBuilder(), highlightBuilder)___        highlightElement = "{ \"fields\" : { } }"__        parser = createParser(JsonXContent.jsonXContent, highlightElement)___        highlightBuilder = HighlightBuilder.fromXContent(parser)__        assertEquals("defining no field should return plain HighlightBuilder", new HighlightBuilder(), highlightBuilder)___        highlightElement = "{ \"fields\" : { \"foo\" : { } } }"__        parser = createParser(JsonXContent.jsonXContent, highlightElement)___        highlightBuilder = HighlightBuilder.fromXContent(parser)__        assertEquals("expected HighlightBuilder with field", new HighlightBuilder().field(new Field("foo")), highlightBuilder)__    };test,parsing,empty,highlight,or,empty,fields,blocks;public,void,test,parsing,empty,structure,throws,ioexception,string,highlight,element,xcontent,parser,parser,create,parser,json,xcontent,json,xcontent,highlight,element,highlight,builder,highlight,builder,highlight,builder,from,xcontent,parser,assert,equals,expected,plain,highlight,builder,new,highlight,builder,highlight,builder,highlight,element,fields,parser,create,parser,json,xcontent,json,xcontent,highlight,element,highlight,builder,highlight,builder,from,xcontent,parser,assert,equals,defining,no,field,should,return,plain,highlight,builder,new,highlight,builder,highlight,builder,highlight,element,fields,foo,parser,create,parser,json,xcontent,json,xcontent,highlight,element,highlight,builder,highlight,builder,from,xcontent,parser,assert,equals,expected,highlight,builder,with,field,new,highlight,builder,field,new,field,foo,highlight,builder
HighlightBuilderTests -> public void testParsingEmptyStructure() throws IOException;1528167589;test parsing empty highlight or empty fields blocks;public void testParsingEmptyStructure() throws IOException {_        String highlightElement = "{ }"__        XContentParser parser = createParser(JsonXContent.jsonXContent, highlightElement)___        HighlightBuilder highlightBuilder = HighlightBuilder.fromXContent(parser)__        assertEquals("expected plain HighlightBuilder", new HighlightBuilder(), highlightBuilder)___        highlightElement = "{ \"fields\" : { } }"__        parser = createParser(JsonXContent.jsonXContent, highlightElement)___        highlightBuilder = HighlightBuilder.fromXContent(parser)__        assertEquals("defining no field should return plain HighlightBuilder", new HighlightBuilder(), highlightBuilder)___        highlightElement = "{ \"fields\" : { \"foo\" : { } } }"__        parser = createParser(JsonXContent.jsonXContent, highlightElement)___        highlightBuilder = HighlightBuilder.fromXContent(parser)__        assertEquals("expected HighlightBuilder with field", new HighlightBuilder().field(new Field("foo")), highlightBuilder)__    };test,parsing,empty,highlight,or,empty,fields,blocks;public,void,test,parsing,empty,structure,throws,ioexception,string,highlight,element,xcontent,parser,parser,create,parser,json,xcontent,json,xcontent,highlight,element,highlight,builder,highlight,builder,highlight,builder,from,xcontent,parser,assert,equals,expected,plain,highlight,builder,new,highlight,builder,highlight,builder,highlight,element,fields,parser,create,parser,json,xcontent,json,xcontent,highlight,element,highlight,builder,highlight,builder,from,xcontent,parser,assert,equals,defining,no,field,should,return,plain,highlight,builder,new,highlight,builder,highlight,builder,highlight,element,fields,foo,parser,create,parser,json,xcontent,json,xcontent,highlight,element,highlight,builder,highlight,builder,from,xcontent,parser,assert,equals,expected,highlight,builder,with,field,new,highlight,builder,field,new,field,foo,highlight,builder
HighlightBuilderTests -> public void testParsingEmptyStructure() throws IOException;1529916084;test parsing empty highlight or empty fields blocks;public void testParsingEmptyStructure() throws IOException {_        String highlightElement = "{ }"__        try (XContentParser parser = createParser(JsonXContent.jsonXContent, highlightElement)) {_            HighlightBuilder highlightBuilder = HighlightBuilder.fromXContent(parser)__            assertEquals("expected plain HighlightBuilder", new HighlightBuilder(), highlightBuilder)__        }__        highlightElement = "{ \"fields\" : { } }"__        try (XContentParser parser = createParser(JsonXContent.jsonXContent, highlightElement)) {_            HighlightBuilder highlightBuilder = HighlightBuilder.fromXContent(parser)__            assertEquals("defining no field should return plain HighlightBuilder", new HighlightBuilder(), highlightBuilder)__        }__        highlightElement = "{ \"fields\" : { \"foo\" : { } } }"__        try (XContentParser parser = createParser(JsonXContent.jsonXContent, highlightElement)) {_            HighlightBuilder highlightBuilder = HighlightBuilder.fromXContent(parser)__            assertEquals("expected HighlightBuilder with field", new HighlightBuilder().field(new Field("foo")), highlightBuilder)__        }_    };test,parsing,empty,highlight,or,empty,fields,blocks;public,void,test,parsing,empty,structure,throws,ioexception,string,highlight,element,try,xcontent,parser,parser,create,parser,json,xcontent,json,xcontent,highlight,element,highlight,builder,highlight,builder,highlight,builder,from,xcontent,parser,assert,equals,expected,plain,highlight,builder,new,highlight,builder,highlight,builder,highlight,element,fields,try,xcontent,parser,parser,create,parser,json,xcontent,json,xcontent,highlight,element,highlight,builder,highlight,builder,highlight,builder,from,xcontent,parser,assert,equals,defining,no,field,should,return,plain,highlight,builder,new,highlight,builder,highlight,builder,highlight,element,fields,foo,try,xcontent,parser,parser,create,parser,json,xcontent,json,xcontent,highlight,element,highlight,builder,highlight,builder,highlight,builder,from,xcontent,parser,assert,equals,expected,highlight,builder,with,field,new,highlight,builder,field,new,field,foo,highlight,builder
HighlightBuilderTests -> public void testParsingEmptyStructure() throws IOException;1534755962;test parsing empty highlight or empty fields blocks;public void testParsingEmptyStructure() throws IOException {_        String highlightElement = "{ }"__        try (XContentParser parser = createParser(JsonXContent.jsonXContent, highlightElement)) {_            HighlightBuilder highlightBuilder = HighlightBuilder.fromXContent(parser)__            assertEquals("expected plain HighlightBuilder", new HighlightBuilder(), highlightBuilder)__        }__        highlightElement = "{ \"fields\" : { } }"__        try (XContentParser parser = createParser(JsonXContent.jsonXContent, highlightElement)) {_            HighlightBuilder highlightBuilder = HighlightBuilder.fromXContent(parser)__            assertEquals("defining no field should return plain HighlightBuilder", new HighlightBuilder(), highlightBuilder)__        }__        highlightElement = "{ \"fields\" : { \"foo\" : { } } }"__        try (XContentParser parser = createParser(JsonXContent.jsonXContent, highlightElement)) {_            HighlightBuilder highlightBuilder = HighlightBuilder.fromXContent(parser)__            assertEquals("expected HighlightBuilder with field", new HighlightBuilder().field(new Field("foo")), highlightBuilder)__        }_    };test,parsing,empty,highlight,or,empty,fields,blocks;public,void,test,parsing,empty,structure,throws,ioexception,string,highlight,element,try,xcontent,parser,parser,create,parser,json,xcontent,json,xcontent,highlight,element,highlight,builder,highlight,builder,highlight,builder,from,xcontent,parser,assert,equals,expected,plain,highlight,builder,new,highlight,builder,highlight,builder,highlight,element,fields,try,xcontent,parser,parser,create,parser,json,xcontent,json,xcontent,highlight,element,highlight,builder,highlight,builder,highlight,builder,from,xcontent,parser,assert,equals,defining,no,field,should,return,plain,highlight,builder,new,highlight,builder,highlight,builder,highlight,element,fields,foo,try,xcontent,parser,parser,create,parser,json,xcontent,json,xcontent,highlight,element,highlight,builder,highlight,builder,highlight,builder,from,xcontent,parser,assert,equals,expected,highlight,builder,with,field,new,highlight,builder,field,new,field,foo,highlight,builder
HighlightBuilderTests -> public void testParsingEmptyStructure() throws IOException;1537806831;test parsing empty highlight or empty fields blocks;public void testParsingEmptyStructure() throws IOException {_        String highlightElement = "{ }"__        try (XContentParser parser = createParser(JsonXContent.jsonXContent, highlightElement)) {_            HighlightBuilder highlightBuilder = HighlightBuilder.fromXContent(parser)__            assertEquals("expected plain HighlightBuilder", new HighlightBuilder(), highlightBuilder)__        }__        highlightElement = "{ \"fields\" : { } }"__        try (XContentParser parser = createParser(JsonXContent.jsonXContent, highlightElement)) {_            HighlightBuilder highlightBuilder = HighlightBuilder.fromXContent(parser)__            assertEquals("defining no field should return plain HighlightBuilder", new HighlightBuilder(), highlightBuilder)__        }__        highlightElement = "{ \"fields\" : { \"foo\" : { } } }"__        try (XContentParser parser = createParser(JsonXContent.jsonXContent, highlightElement)) {_            HighlightBuilder highlightBuilder = HighlightBuilder.fromXContent(parser)__            assertEquals("expected HighlightBuilder with field", new HighlightBuilder().field(new Field("foo")), highlightBuilder)__        }_    };test,parsing,empty,highlight,or,empty,fields,blocks;public,void,test,parsing,empty,structure,throws,ioexception,string,highlight,element,try,xcontent,parser,parser,create,parser,json,xcontent,json,xcontent,highlight,element,highlight,builder,highlight,builder,highlight,builder,from,xcontent,parser,assert,equals,expected,plain,highlight,builder,new,highlight,builder,highlight,builder,highlight,element,fields,try,xcontent,parser,parser,create,parser,json,xcontent,json,xcontent,highlight,element,highlight,builder,highlight,builder,highlight,builder,from,xcontent,parser,assert,equals,defining,no,field,should,return,plain,highlight,builder,new,highlight,builder,highlight,builder,highlight,element,fields,foo,try,xcontent,parser,parser,create,parser,json,xcontent,json,xcontent,highlight,element,highlight,builder,highlight,builder,highlight,builder,from,xcontent,parser,assert,equals,expected,highlight,builder,with,field,new,highlight,builder,field,new,field,foo,highlight,builder
HighlightBuilderTests -> public void testValidOrderOrdinals();1524684173;test ordinals of {@link Order}, since serialization depends on it;public void testValidOrderOrdinals() {_        assertThat(Order.NONE.ordinal(), equalTo(0))__        assertThat(Order.SCORE.ordinal(), equalTo(1))__    };test,ordinals,of,link,order,since,serialization,depends,on,it;public,void,test,valid,order,ordinals,assert,that,order,none,ordinal,equal,to,0,assert,that,order,score,ordinal,equal,to,1
HighlightBuilderTests -> public void testValidOrderOrdinals();1528167589;test ordinals of {@link Order}, since serialization depends on it;public void testValidOrderOrdinals() {_        assertThat(Order.NONE.ordinal(), equalTo(0))__        assertThat(Order.SCORE.ordinal(), equalTo(1))__    };test,ordinals,of,link,order,since,serialization,depends,on,it;public,void,test,valid,order,ordinals,assert,that,order,none,ordinal,equal,to,0,assert,that,order,score,ordinal,equal,to,1
HighlightBuilderTests -> public void testValidOrderOrdinals();1529916084;test ordinals of {@link Order}, since serialization depends on it;public void testValidOrderOrdinals() {_        assertThat(Order.NONE.ordinal(), equalTo(0))__        assertThat(Order.SCORE.ordinal(), equalTo(1))__    };test,ordinals,of,link,order,since,serialization,depends,on,it;public,void,test,valid,order,ordinals,assert,that,order,none,ordinal,equal,to,0,assert,that,order,score,ordinal,equal,to,1
HighlightBuilderTests -> public void testValidOrderOrdinals();1534755962;test ordinals of {@link Order}, since serialization depends on it;public void testValidOrderOrdinals() {_        assertThat(Order.NONE.ordinal(), equalTo(0))__        assertThat(Order.SCORE.ordinal(), equalTo(1))__    };test,ordinals,of,link,order,since,serialization,depends,on,it;public,void,test,valid,order,ordinals,assert,that,order,none,ordinal,equal,to,0,assert,that,order,score,ordinal,equal,to,1
HighlightBuilderTests -> public void testValidOrderOrdinals();1537806831;test ordinals of {@link Order}, since serialization depends on it;public void testValidOrderOrdinals() {_        assertThat(Order.NONE.ordinal(), equalTo(0))__        assertThat(Order.SCORE.ordinal(), equalTo(1))__    };test,ordinals,of,link,order,since,serialization,depends,on,it;public,void,test,valid,order,ordinals,assert,that,order,none,ordinal,equal,to,0,assert,that,order,score,ordinal,equal,to,1
HighlightBuilderTests -> public void testEqualsAndHashcode() throws IOException;1524684173;Test equality and hashCode properties;public void testEqualsAndHashcode() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            checkEqualsAndHashCode(randomHighlighterBuilder(), HighlightBuilderTests::serializedCopy, HighlightBuilderTests::mutate)__        }_    };test,equality,and,hash,code,properties;public,void,test,equals,and,hashcode,throws,ioexception,for,int,runs,0,runs,runs,check,equals,and,hash,code,random,highlighter,builder,highlight,builder,tests,serialized,copy,highlight,builder,tests,mutate
HighlightBuilderTests -> public void testEqualsAndHashcode() throws IOException;1528167589;Test equality and hashCode properties;public void testEqualsAndHashcode() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            checkEqualsAndHashCode(randomHighlighterBuilder(), HighlightBuilderTests::serializedCopy, HighlightBuilderTests::mutate)__        }_    };test,equality,and,hash,code,properties;public,void,test,equals,and,hashcode,throws,ioexception,for,int,runs,0,runs,runs,check,equals,and,hash,code,random,highlighter,builder,highlight,builder,tests,serialized,copy,highlight,builder,tests,mutate
HighlightBuilderTests -> public void testEqualsAndHashcode() throws IOException;1529916084;Test equality and hashCode properties;public void testEqualsAndHashcode() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            checkEqualsAndHashCode(randomHighlighterBuilder(), HighlightBuilderTests::serializedCopy, HighlightBuilderTests::mutate)__        }_    };test,equality,and,hash,code,properties;public,void,test,equals,and,hashcode,throws,ioexception,for,int,runs,0,runs,runs,check,equals,and,hash,code,random,highlighter,builder,highlight,builder,tests,serialized,copy,highlight,builder,tests,mutate
HighlightBuilderTests -> public void testEqualsAndHashcode() throws IOException;1534755962;Test equality and hashCode properties;public void testEqualsAndHashcode() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            checkEqualsAndHashCode(randomHighlighterBuilder(), HighlightBuilderTests::serializedCopy, HighlightBuilderTests::mutate)__        }_    };test,equality,and,hash,code,properties;public,void,test,equals,and,hashcode,throws,ioexception,for,int,runs,0,runs,runs,check,equals,and,hash,code,random,highlighter,builder,highlight,builder,tests,serialized,copy,highlight,builder,tests,mutate
HighlightBuilderTests -> public void testEqualsAndHashcode() throws IOException;1537806831;Test equality and hashCode properties;public void testEqualsAndHashcode() throws IOException {_        for (int runs = 0_ runs < NUMBER_OF_TESTBUILDERS_ runs++) {_            checkEqualsAndHashCode(randomHighlighterBuilder(), HighlightBuilderTests::serializedCopy, HighlightBuilderTests::mutate)__        }_    };test,equality,and,hash,code,properties;public,void,test,equals,and,hashcode,throws,ioexception,for,int,runs,0,runs,runs,check,equals,and,hash,code,random,highlighter,builder,highlight,builder,tests,serialized,copy,highlight,builder,tests,mutate
HighlightBuilderTests -> public void testUnknownFieldnameExpection() throws IOException;1524684173;test that unknown field name cause exception;public void testUnknownFieldnameExpection() throws IOException {_        {_            IllegalArgumentException e = expectParseThrows(IllegalArgumentException.class, "{\n" +_                    "    \"bad_fieldname\" : \"value\"\n" +_                    "}\n")__            assertEquals("[highlight] unknown field [bad_fieldname], parser not found", e.getMessage())__        }__        {_            XContentParseException e = expectParseThrows(XContentParseException.class, "{\n" +_                    "  \"fields\" : {\n" +_                    "     \"body\" : {\n" +_                    "        \"bad_fieldname\" : \"value\"\n" +_                    "     }\n" +_                    "   }\n" +_                    "}\n")__            assertThat(e.getMessage(), containsString("[highlight] failed to parse field [fields]"))__            assertThat(e.getCause().getMessage(), containsString("[fields] failed to parse field [body]"))__            assertEquals("[highlight_field] unknown field [bad_fieldname], parser not found", e.getCause().getCause().getMessage())__        }_    };test,that,unknown,field,name,cause,exception;public,void,test,unknown,fieldname,expection,throws,ioexception,illegal,argument,exception,e,expect,parse,throws,illegal,argument,exception,class,n,value,n,n,assert,equals,highlight,unknown,field,parser,not,found,e,get,message,xcontent,parse,exception,e,expect,parse,throws,xcontent,parse,exception,class,n,fields,n,body,n,value,n,n,n,n,assert,that,e,get,message,contains,string,highlight,failed,to,parse,field,fields,assert,that,e,get,cause,get,message,contains,string,fields,failed,to,parse,field,body,assert,equals,unknown,field,parser,not,found,e,get,cause,get,cause,get,message
HighlightBuilderTests -> public void testUnknownFieldnameExpection() throws IOException;1528167589;test that unknown field name cause exception;public void testUnknownFieldnameExpection() throws IOException {_        {_            XContentParseException e = expectParseThrows(XContentParseException.class, "{\n" +_                    "    \"bad_fieldname\" : \"value\"\n" +_                    "}\n")__            assertEquals("[2:5] [highlight] unknown field [bad_fieldname], parser not found", e.getMessage())__        }__        {_            XContentParseException e = expectParseThrows(XContentParseException.class, "{\n" +_                    "  \"fields\" : {\n" +_                    "     \"body\" : {\n" +_                    "        \"bad_fieldname\" : \"value\"\n" +_                    "     }\n" +_                    "   }\n" +_                    "}\n")__            assertThat(e.getMessage(), containsString("[highlight] failed to parse field [fields]"))__            assertThat(e.getCause().getMessage(), containsString("[fields] failed to parse field [body]"))__            assertEquals("[4:9] [highlight_field] unknown field [bad_fieldname], parser not found", e.getCause().getCause().getMessage())__        }_    };test,that,unknown,field,name,cause,exception;public,void,test,unknown,fieldname,expection,throws,ioexception,xcontent,parse,exception,e,expect,parse,throws,xcontent,parse,exception,class,n,value,n,n,assert,equals,2,5,highlight,unknown,field,parser,not,found,e,get,message,xcontent,parse,exception,e,expect,parse,throws,xcontent,parse,exception,class,n,fields,n,body,n,value,n,n,n,n,assert,that,e,get,message,contains,string,highlight,failed,to,parse,field,fields,assert,that,e,get,cause,get,message,contains,string,fields,failed,to,parse,field,body,assert,equals,4,9,unknown,field,parser,not,found,e,get,cause,get,cause,get,message
HighlightBuilderTests -> public void testUnknownFieldnameExpection() throws IOException;1529916084;test that unknown field name cause exception;public void testUnknownFieldnameExpection() throws IOException {_        {_            XContentParseException e = expectParseThrows(XContentParseException.class, "{\n" +_                    "    \"bad_fieldname\" : \"value\"\n" +_                    "}\n")__            assertEquals("[2:5] [highlight] unknown field [bad_fieldname], parser not found", e.getMessage())__        }__        {_            XContentParseException e = expectParseThrows(XContentParseException.class, "{\n" +_                    "  \"fields\" : {\n" +_                    "     \"body\" : {\n" +_                    "        \"bad_fieldname\" : \"value\"\n" +_                    "     }\n" +_                    "   }\n" +_                    "}\n")__            assertThat(e.getMessage(), containsString("[highlight] failed to parse field [fields]"))__            assertThat(e.getCause().getMessage(), containsString("[fields] failed to parse field [body]"))__            assertEquals("[4:9] [highlight_field] unknown field [bad_fieldname], parser not found", e.getCause().getCause().getMessage())__        }_    };test,that,unknown,field,name,cause,exception;public,void,test,unknown,fieldname,expection,throws,ioexception,xcontent,parse,exception,e,expect,parse,throws,xcontent,parse,exception,class,n,value,n,n,assert,equals,2,5,highlight,unknown,field,parser,not,found,e,get,message,xcontent,parse,exception,e,expect,parse,throws,xcontent,parse,exception,class,n,fields,n,body,n,value,n,n,n,n,assert,that,e,get,message,contains,string,highlight,failed,to,parse,field,fields,assert,that,e,get,cause,get,message,contains,string,fields,failed,to,parse,field,body,assert,equals,4,9,unknown,field,parser,not,found,e,get,cause,get,cause,get,message
HighlightBuilderTests -> public void testUnknownFieldnameExpection() throws IOException;1534755962;test that unknown field name cause exception;public void testUnknownFieldnameExpection() throws IOException {_        {_            XContentParseException e = expectParseThrows(XContentParseException.class, "{\n" +_                    "    \"bad_fieldname\" : \"value\"\n" +_                    "}\n")__            assertEquals("[2:5] [highlight] unknown field [bad_fieldname], parser not found", e.getMessage())__        }__        {_            XContentParseException e = expectParseThrows(XContentParseException.class, "{\n" +_                    "  \"fields\" : {\n" +_                    "     \"body\" : {\n" +_                    "        \"bad_fieldname\" : \"value\"\n" +_                    "     }\n" +_                    "   }\n" +_                    "}\n")__            assertThat(e.getMessage(), containsString("[highlight] failed to parse field [fields]"))__            assertThat(e.getCause().getMessage(), containsString("[fields] failed to parse field [body]"))__            assertEquals("[4:9] [highlight_field] unknown field [bad_fieldname], parser not found", e.getCause().getCause().getMessage())__        }_    };test,that,unknown,field,name,cause,exception;public,void,test,unknown,fieldname,expection,throws,ioexception,xcontent,parse,exception,e,expect,parse,throws,xcontent,parse,exception,class,n,value,n,n,assert,equals,2,5,highlight,unknown,field,parser,not,found,e,get,message,xcontent,parse,exception,e,expect,parse,throws,xcontent,parse,exception,class,n,fields,n,body,n,value,n,n,n,n,assert,that,e,get,message,contains,string,highlight,failed,to,parse,field,fields,assert,that,e,get,cause,get,message,contains,string,fields,failed,to,parse,field,body,assert,equals,4,9,unknown,field,parser,not,found,e,get,cause,get,cause,get,message
HighlightBuilderTests -> public void testUnknownFieldnameExpection() throws IOException;1537806831;test that unknown field name cause exception;public void testUnknownFieldnameExpection() throws IOException {_        {_            XContentParseException e = expectParseThrows(XContentParseException.class, "{\n" +_                    "    \"bad_fieldname\" : \"value\"\n" +_                    "}\n")__            assertEquals("[2:5] [highlight] unknown field [bad_fieldname], parser not found", e.getMessage())__        }__        {_            XContentParseException e = expectParseThrows(XContentParseException.class, "{\n" +_                    "  \"fields\" : {\n" +_                    "     \"body\" : {\n" +_                    "        \"bad_fieldname\" : \"value\"\n" +_                    "     }\n" +_                    "   }\n" +_                    "}\n")__            assertThat(e.getMessage(), containsString("[highlight] failed to parse field [fields]"))__            assertThat(e.getCause().getMessage(), containsString("[fields] failed to parse field [body]"))__            assertEquals("[4:9] [highlight_field] unknown field [bad_fieldname], parser not found", e.getCause().getCause().getMessage())__        }_    };test,that,unknown,field,name,cause,exception;public,void,test,unknown,fieldname,expection,throws,ioexception,xcontent,parse,exception,e,expect,parse,throws,xcontent,parse,exception,class,n,value,n,n,assert,equals,2,5,highlight,unknown,field,parser,not,found,e,get,message,xcontent,parse,exception,e,expect,parse,throws,xcontent,parse,exception,class,n,fields,n,body,n,value,n,n,n,n,assert,that,e,get,message,contains,string,highlight,failed,to,parse,field,fields,assert,that,e,get,cause,get,message,contains,string,fields,failed,to,parse,field,body,assert,equals,4,9,unknown,field,parser,not,found,e,get,cause,get,cause,get,message
HighlightBuilderTests -> public void testUnknownArrayNameExpection() throws IOException;1524684173;test that unknown array fields cause exception;public void testUnknownArrayNameExpection() throws IOException {_        {_            IllegalArgumentException e = expectParseThrows(IllegalArgumentException.class, "{\n" +_                    "    \"bad_fieldname\" : [ \"field1\" 1 \"field2\" ]\n" +_                    "}\n")__            assertEquals("[highlight] unknown field [bad_fieldname], parser not found", e.getMessage())__        }__        {_            XContentParseException e = expectParseThrows(XContentParseException.class, "{\n" +_                    "  \"fields\" : {\n" +_                    "     \"body\" : {\n" +_                    "        \"bad_fieldname\" : [ \"field1\" , \"field2\" ]\n" +_                    "     }\n" +_                    "   }\n" +_                    "}\n")__            assertThat(e.getMessage(), containsString("[highlight] failed to parse field [fields]"))__            assertThat(e.getCause().getMessage(), containsString("[fields] failed to parse field [body]"))__            assertEquals("[highlight_field] unknown field [bad_fieldname], parser not found", e.getCause().getCause().getMessage())__        }_    };test,that,unknown,array,fields,cause,exception;public,void,test,unknown,array,name,expection,throws,ioexception,illegal,argument,exception,e,expect,parse,throws,illegal,argument,exception,class,n,field1,1,field2,n,n,assert,equals,highlight,unknown,field,parser,not,found,e,get,message,xcontent,parse,exception,e,expect,parse,throws,xcontent,parse,exception,class,n,fields,n,body,n,field1,field2,n,n,n,n,assert,that,e,get,message,contains,string,highlight,failed,to,parse,field,fields,assert,that,e,get,cause,get,message,contains,string,fields,failed,to,parse,field,body,assert,equals,unknown,field,parser,not,found,e,get,cause,get,cause,get,message
HighlightBuilderTests -> public void testUnknownArrayNameExpection() throws IOException;1528167589;test that unknown array fields cause exception;public void testUnknownArrayNameExpection() throws IOException {_        {_            XContentParseException e = expectParseThrows(XContentParseException.class, "{\n" +_                    "    \"bad_fieldname\" : [ \"field1\" 1 \"field2\" ]\n" +_                    "}\n")__            assertEquals("[2:5] [highlight] unknown field [bad_fieldname], parser not found", e.getMessage())__        }__        {_            XContentParseException e = expectParseThrows(XContentParseException.class, "{\n" +_                    "  \"fields\" : {\n" +_                    "     \"body\" : {\n" +_                    "        \"bad_fieldname\" : [ \"field1\" , \"field2\" ]\n" +_                    "     }\n" +_                    "   }\n" +_                    "}\n")__            assertThat(e.getMessage(), containsString("[highlight] failed to parse field [fields]"))__            assertThat(e.getCause().getMessage(), containsString("[fields] failed to parse field [body]"))__            assertEquals("[4:9] [highlight_field] unknown field [bad_fieldname], parser not found", e.getCause().getCause().getMessage())__        }_    };test,that,unknown,array,fields,cause,exception;public,void,test,unknown,array,name,expection,throws,ioexception,xcontent,parse,exception,e,expect,parse,throws,xcontent,parse,exception,class,n,field1,1,field2,n,n,assert,equals,2,5,highlight,unknown,field,parser,not,found,e,get,message,xcontent,parse,exception,e,expect,parse,throws,xcontent,parse,exception,class,n,fields,n,body,n,field1,field2,n,n,n,n,assert,that,e,get,message,contains,string,highlight,failed,to,parse,field,fields,assert,that,e,get,cause,get,message,contains,string,fields,failed,to,parse,field,body,assert,equals,4,9,unknown,field,parser,not,found,e,get,cause,get,cause,get,message
HighlightBuilderTests -> public void testUnknownArrayNameExpection() throws IOException;1529916084;test that unknown array fields cause exception;public void testUnknownArrayNameExpection() throws IOException {_        {_            XContentParseException e = expectParseThrows(XContentParseException.class, "{\n" +_                    "    \"bad_fieldname\" : [ \"field1\" 1 \"field2\" ]\n" +_                    "}\n")__            assertEquals("[2:5] [highlight] unknown field [bad_fieldname], parser not found", e.getMessage())__        }__        {_            XContentParseException e = expectParseThrows(XContentParseException.class, "{\n" +_                    "  \"fields\" : {\n" +_                    "     \"body\" : {\n" +_                    "        \"bad_fieldname\" : [ \"field1\" , \"field2\" ]\n" +_                    "     }\n" +_                    "   }\n" +_                    "}\n")__            assertThat(e.getMessage(), containsString("[highlight] failed to parse field [fields]"))__            assertThat(e.getCause().getMessage(), containsString("[fields] failed to parse field [body]"))__            assertEquals("[4:9] [highlight_field] unknown field [bad_fieldname], parser not found", e.getCause().getCause().getMessage())__        }_    };test,that,unknown,array,fields,cause,exception;public,void,test,unknown,array,name,expection,throws,ioexception,xcontent,parse,exception,e,expect,parse,throws,xcontent,parse,exception,class,n,field1,1,field2,n,n,assert,equals,2,5,highlight,unknown,field,parser,not,found,e,get,message,xcontent,parse,exception,e,expect,parse,throws,xcontent,parse,exception,class,n,fields,n,body,n,field1,field2,n,n,n,n,assert,that,e,get,message,contains,string,highlight,failed,to,parse,field,fields,assert,that,e,get,cause,get,message,contains,string,fields,failed,to,parse,field,body,assert,equals,4,9,unknown,field,parser,not,found,e,get,cause,get,cause,get,message
HighlightBuilderTests -> public void testUnknownArrayNameExpection() throws IOException;1534755962;test that unknown array fields cause exception;public void testUnknownArrayNameExpection() throws IOException {_        {_            XContentParseException e = expectParseThrows(XContentParseException.class, "{\n" +_                    "    \"bad_fieldname\" : [ \"field1\" 1 \"field2\" ]\n" +_                    "}\n")__            assertEquals("[2:5] [highlight] unknown field [bad_fieldname], parser not found", e.getMessage())__        }__        {_            XContentParseException e = expectParseThrows(XContentParseException.class, "{\n" +_                    "  \"fields\" : {\n" +_                    "     \"body\" : {\n" +_                    "        \"bad_fieldname\" : [ \"field1\" , \"field2\" ]\n" +_                    "     }\n" +_                    "   }\n" +_                    "}\n")__            assertThat(e.getMessage(), containsString("[highlight] failed to parse field [fields]"))__            assertThat(e.getCause().getMessage(), containsString("[fields] failed to parse field [body]"))__            assertEquals("[4:9] [highlight_field] unknown field [bad_fieldname], parser not found", e.getCause().getCause().getMessage())__        }_    };test,that,unknown,array,fields,cause,exception;public,void,test,unknown,array,name,expection,throws,ioexception,xcontent,parse,exception,e,expect,parse,throws,xcontent,parse,exception,class,n,field1,1,field2,n,n,assert,equals,2,5,highlight,unknown,field,parser,not,found,e,get,message,xcontent,parse,exception,e,expect,parse,throws,xcontent,parse,exception,class,n,fields,n,body,n,field1,field2,n,n,n,n,assert,that,e,get,message,contains,string,highlight,failed,to,parse,field,fields,assert,that,e,get,cause,get,message,contains,string,fields,failed,to,parse,field,body,assert,equals,4,9,unknown,field,parser,not,found,e,get,cause,get,cause,get,message
HighlightBuilderTests -> public void testUnknownArrayNameExpection() throws IOException;1537806831;test that unknown array fields cause exception;public void testUnknownArrayNameExpection() throws IOException {_        {_            XContentParseException e = expectParseThrows(XContentParseException.class, "{\n" +_                    "    \"bad_fieldname\" : [ \"field1\" 1 \"field2\" ]\n" +_                    "}\n")__            assertEquals("[2:5] [highlight] unknown field [bad_fieldname], parser not found", e.getMessage())__        }__        {_            XContentParseException e = expectParseThrows(XContentParseException.class, "{\n" +_                    "  \"fields\" : {\n" +_                    "     \"body\" : {\n" +_                    "        \"bad_fieldname\" : [ \"field1\" , \"field2\" ]\n" +_                    "     }\n" +_                    "   }\n" +_                    "}\n")__            assertThat(e.getMessage(), containsString("[highlight] failed to parse field [fields]"))__            assertThat(e.getCause().getMessage(), containsString("[fields] failed to parse field [body]"))__            assertEquals("[4:9] [highlight_field] unknown field [bad_fieldname], parser not found", e.getCause().getCause().getMessage())__        }_    };test,that,unknown,array,fields,cause,exception;public,void,test,unknown,array,name,expection,throws,ioexception,xcontent,parse,exception,e,expect,parse,throws,xcontent,parse,exception,class,n,field1,1,field2,n,n,assert,equals,2,5,highlight,unknown,field,parser,not,found,e,get,message,xcontent,parse,exception,e,expect,parse,throws,xcontent,parse,exception,class,n,fields,n,body,n,field1,field2,n,n,n,n,assert,that,e,get,message,contains,string,highlight,failed,to,parse,field,fields,assert,that,e,get,cause,get,message,contains,string,fields,failed,to,parse,field,body,assert,equals,4,9,unknown,field,parser,not,found,e,get,cause,get,cause,get,message
HighlightBuilderTests -> private static String[] randomStringArray(int minSize, int maxSize);1524684173;Create array of unique Strings. If not unique, e.g. duplicates field names_would be dropped in {@link FieldOptions.Builder#matchedFields(Set)}, resulting in test glitches;private static String[] randomStringArray(int minSize, int maxSize) {_        int size = randomIntBetween(minSize, maxSize)__        Set<String> randomStrings = new HashSet<>(size)__        for (int f = 0_ f < size_ f++) {_            randomStrings.add(randomAlphaOfLengthBetween(3, 10))__        }_        return randomStrings.toArray(new String[randomStrings.size()])__    };create,array,of,unique,strings,if,not,unique,e,g,duplicates,field,names,would,be,dropped,in,link,field,options,builder,matched,fields,set,resulting,in,test,glitches;private,static,string,random,string,array,int,min,size,int,max,size,int,size,random,int,between,min,size,max,size,set,string,random,strings,new,hash,set,size,for,int,f,0,f,size,f,random,strings,add,random,alpha,of,length,between,3,10,return,random,strings,to,array,new,string,random,strings,size
HighlightBuilderTests -> private static String[] randomStringArray(int minSize, int maxSize);1528167589;Create array of unique Strings. If not unique, e.g. duplicates field names_would be dropped in {@link FieldOptions.Builder#matchedFields(Set)}, resulting in test glitches;private static String[] randomStringArray(int minSize, int maxSize) {_        int size = randomIntBetween(minSize, maxSize)__        Set<String> randomStrings = new HashSet<>(size)__        for (int f = 0_ f < size_ f++) {_            randomStrings.add(randomAlphaOfLengthBetween(3, 10))__        }_        return randomStrings.toArray(new String[randomStrings.size()])__    };create,array,of,unique,strings,if,not,unique,e,g,duplicates,field,names,would,be,dropped,in,link,field,options,builder,matched,fields,set,resulting,in,test,glitches;private,static,string,random,string,array,int,min,size,int,max,size,int,size,random,int,between,min,size,max,size,set,string,random,strings,new,hash,set,size,for,int,f,0,f,size,f,random,strings,add,random,alpha,of,length,between,3,10,return,random,strings,to,array,new,string,random,strings,size
HighlightBuilderTests -> private static String[] randomStringArray(int minSize, int maxSize);1529916084;Create array of unique Strings. If not unique, e.g. duplicates field names_would be dropped in {@link FieldOptions.Builder#matchedFields(Set)}, resulting in test glitches;private static String[] randomStringArray(int minSize, int maxSize) {_        int size = randomIntBetween(minSize, maxSize)__        Set<String> randomStrings = new HashSet<>(size)__        for (int f = 0_ f < size_ f++) {_            randomStrings.add(randomAlphaOfLengthBetween(3, 10))__        }_        return randomStrings.toArray(new String[randomStrings.size()])__    };create,array,of,unique,strings,if,not,unique,e,g,duplicates,field,names,would,be,dropped,in,link,field,options,builder,matched,fields,set,resulting,in,test,glitches;private,static,string,random,string,array,int,min,size,int,max,size,int,size,random,int,between,min,size,max,size,set,string,random,strings,new,hash,set,size,for,int,f,0,f,size,f,random,strings,add,random,alpha,of,length,between,3,10,return,random,strings,to,array,new,string,random,strings,size
HighlightBuilderTests -> private static String[] randomStringArray(int minSize, int maxSize);1534755962;Create array of unique Strings. If not unique, e.g. duplicates field names_would be dropped in {@link FieldOptions.Builder#matchedFields(Set)}, resulting in test glitches;private static String[] randomStringArray(int minSize, int maxSize) {_        int size = randomIntBetween(minSize, maxSize)__        Set<String> randomStrings = new HashSet<>(size)__        for (int f = 0_ f < size_ f++) {_            randomStrings.add(randomAlphaOfLengthBetween(3, 10))__        }_        return randomStrings.toArray(new String[randomStrings.size()])__    };create,array,of,unique,strings,if,not,unique,e,g,duplicates,field,names,would,be,dropped,in,link,field,options,builder,matched,fields,set,resulting,in,test,glitches;private,static,string,random,string,array,int,min,size,int,max,size,int,size,random,int,between,min,size,max,size,set,string,random,strings,new,hash,set,size,for,int,f,0,f,size,f,random,strings,add,random,alpha,of,length,between,3,10,return,random,strings,to,array,new,string,random,strings,size
HighlightBuilderTests -> private static String[] randomStringArray(int minSize, int maxSize);1537806831;Create array of unique Strings. If not unique, e.g. duplicates field names_would be dropped in {@link FieldOptions.Builder#matchedFields(Set)}, resulting in test glitches;private static String[] randomStringArray(int minSize, int maxSize) {_        int size = randomIntBetween(minSize, maxSize)__        Set<String> randomStrings = new HashSet<>(size)__        for (int f = 0_ f < size_ f++) {_            randomStrings.add(randomAlphaOfLengthBetween(3, 10))__        }_        return randomStrings.toArray(new String[randomStrings.size()])__    };create,array,of,unique,strings,if,not,unique,e,g,duplicates,field,names,would,be,dropped,in,link,field,options,builder,matched,fields,set,resulting,in,test,glitches;private,static,string,random,string,array,int,min,size,int,max,size,int,size,random,int,between,min,size,max,size,set,string,random,strings,new,hash,set,size,for,int,f,0,f,size,f,random,strings,add,random,alpha,of,length,between,3,10,return,random,strings,to,array,new,string,random,strings,size
