commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     return Arrays.asList(MockIndexEventListener.TestPlugin.class). }
false;public;2;7;;@Override public void beforeIndexAddedToCluster(Index index, Settings indexSettings) {     beforeAddedCount.incrementAndGet().     if (MockIndexEventListener.TestPlugin.INDEX_FAIL.get(indexSettings)) {         throw new ElasticsearchException("failing on purpose").     } }
false;public;2;4;;@Override public void beforeIndexCreated(Index index, Settings indexSettings) {     allCreatedCount.incrementAndGet(). }
false;public;0;44;;public void testBeforeIndexAddedToCluster() throws Exception {     String node1 = internalCluster().startNode().     String node2 = internalCluster().startNode().     String node3 = internalCluster().startNode().     final AtomicInteger beforeAddedCount = new AtomicInteger(0).     final AtomicInteger allCreatedCount = new AtomicInteger(0).     IndexEventListener listener = new IndexEventListener() {          @Override         public void beforeIndexAddedToCluster(Index index, Settings indexSettings) {             beforeAddedCount.incrementAndGet().             if (MockIndexEventListener.TestPlugin.INDEX_FAIL.get(indexSettings)) {                 throw new ElasticsearchException("failing on purpose").             }         }          @Override         public void beforeIndexCreated(Index index, Settings indexSettings) {             allCreatedCount.incrementAndGet().         }     }.     internalCluster().getInstance(MockIndexEventListener.TestEventListener.class, node1).setNewDelegate(listener).     internalCluster().getInstance(MockIndexEventListener.TestEventListener.class, node2).setNewDelegate(listener).     internalCluster().getInstance(MockIndexEventListener.TestEventListener.class, node3).setNewDelegate(listener).     client().admin().indices().prepareCreate("test").setSettings(Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 3).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 1)).get().     ensureGreen("test").     assertThat("beforeIndexAddedToCluster called only once", beforeAddedCount.get(), equalTo(1)).     assertThat("beforeIndexCreated called on each data node", allCreatedCount.get(), greaterThanOrEqualTo(3)).     try {         client().admin().indices().prepareCreate("failed").setSettings(Settings.builder().put("index.fail", true)).get().         fail("should have thrown an exception during creation").     } catch (Exception e) {         assertTrue(e.getMessage().contains("failing on purpose")).         ClusterStateResponse resp = client().admin().cluster().prepareState().get().         assertFalse(resp.getState().routingTable().indicesRouting().keys().contains("failed")).     } }
false;public;2;4;;@Override public void beforeIndexCreated(Index index, Settings indexSettings) {     throw new RuntimeException("FAIL"). }
true;public;0;20;/**  * Tests that if an *index* structure creation fails on relocation to a new node, the shard  * is not stuck but properly failed.  */ ;/**  * Tests that if an *index* structure creation fails on relocation to a new node, the shard  * is not stuck but properly failed.  */ public void testIndexShardFailedOnRelocation() throws Throwable {     String node1 = internalCluster().startNode().     client().admin().indices().prepareCreate("index1").setSettings(Settings.builder().put(SETTING_NUMBER_OF_SHARDS, 1).put(SETTING_NUMBER_OF_REPLICAS, 0)).get().     ensureGreen("index1").     String node2 = internalCluster().startNode().     internalCluster().getInstance(MockIndexEventListener.TestEventListener.class, node2).setNewDelegate(new IndexShardStateChangeListener() {          @Override         public void beforeIndexCreated(Index index, Settings indexSettings) {             throw new RuntimeException("FAIL").         }     }).     client().admin().cluster().prepareReroute().add(new MoveAllocationCommand("index1", 0, node1, node2)).get().     ensureGreen("index1").     ClusterState state = client().admin().cluster().prepareState().get().getState().     List<ShardRouting> shard = state.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).     assertThat(shard, hasSize(1)).     assertThat(state.nodes().resolveNode(shard.get(0).currentNodeId()).getName(), Matchers.equalTo(node1)). }
false;public;0;72;;public void testIndexStateShardChanged() throws Throwable {     // start with a single node     String node1 = internalCluster().startNode().     IndexShardStateChangeListener stateChangeListenerNode1 = new IndexShardStateChangeListener().     // add a listener that keeps track of the shard state changes     internalCluster().getInstance(MockIndexEventListener.TestEventListener.class, node1).setNewDelegate(stateChangeListenerNode1).     // create an index that should fail     try {         client().admin().indices().prepareCreate("failed").setSettings(Settings.builder().put(SETTING_NUMBER_OF_SHARDS, 1).put("index.fail", true)).get().         fail("should have thrown an exception").     } catch (ElasticsearchException e) {         assertTrue(e.getMessage().contains("failing on purpose")).         ClusterStateResponse resp = client().admin().cluster().prepareState().get().         assertFalse(resp.getState().routingTable().indicesRouting().keys().contains("failed")).     }     // create an index     assertAcked(client().admin().indices().prepareCreate("test").setSettings(Settings.builder().put(SETTING_NUMBER_OF_SHARDS, 6).put(SETTING_NUMBER_OF_REPLICAS, 0))).     ensureGreen().     assertThat(stateChangeListenerNode1.creationSettings.getAsInt(SETTING_NUMBER_OF_SHARDS, -1), equalTo(6)).     assertThat(stateChangeListenerNode1.creationSettings.getAsInt(SETTING_NUMBER_OF_REPLICAS, -1), equalTo(0)).     // new shards got started     assertShardStatesMatch(stateChangeListenerNode1, 6, CREATED, RECOVERING, POST_RECOVERY, STARTED).     // add a node: 3 out of the 6 shards will be relocated to it     // disable allocation before starting a new node, as we need to register the listener first     assertAcked(client().admin().cluster().prepareUpdateSettings().setPersistentSettings(Settings.builder().put(EnableAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ENABLE_SETTING.getKey(), "none"))).     String node2 = internalCluster().startNode().     IndexShardStateChangeListener stateChangeListenerNode2 = new IndexShardStateChangeListener().     // add a listener that keeps track of the shard state changes     internalCluster().getInstance(MockIndexEventListener.TestEventListener.class, node2).setNewDelegate(stateChangeListenerNode2).     // re-enable allocation     assertAcked(client().admin().cluster().prepareUpdateSettings().setPersistentSettings(Settings.builder().put(EnableAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ENABLE_SETTING.getKey(), "all"))).     ensureGreen().     // the 3 relocated shards get closed on the first node     assertShardStatesMatch(stateChangeListenerNode1, 3, CLOSED).     // the 3 relocated shards get created on the second node     assertShardStatesMatch(stateChangeListenerNode2, 3, CREATED, RECOVERING, POST_RECOVERY, STARTED).     // increase replicas from 0 to 1     assertAcked(client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().put(SETTING_NUMBER_OF_REPLICAS, 1))).     ensureGreen().     // 3 replicas are allocated to the first node     assertShardStatesMatch(stateChangeListenerNode1, 3, CREATED, RECOVERING, POST_RECOVERY, STARTED).     // 3 replicas are allocated to the second node     assertShardStatesMatch(stateChangeListenerNode2, 3, CREATED, RECOVERING, POST_RECOVERY, STARTED).     // close the index     assertAcked(client().admin().indices().prepareClose("test")).     assertThat(stateChangeListenerNode1.afterCloseSettings.getAsInt(SETTING_NUMBER_OF_SHARDS, -1), equalTo(6)).     assertThat(stateChangeListenerNode1.afterCloseSettings.getAsInt(SETTING_NUMBER_OF_REPLICAS, -1), equalTo(1)).     assertShardStatesMatch(stateChangeListenerNode1, 6, CLOSED, CREATED, RECOVERING, POST_RECOVERY, STARTED).     assertShardStatesMatch(stateChangeListenerNode2, 6, CLOSED, CREATED, RECOVERING, POST_RECOVERY, STARTED). }
false;private,static;3;29;;private static void assertShardStatesMatch(final IndexShardStateChangeListener stateChangeListener, final int numShards, final IndexShardState... shardStates) throws InterruptedException {     BooleanSupplier waitPredicate = () -> {         if (stateChangeListener.shardStates.size() != numShards) {             return false.         }         for (List<IndexShardState> indexShardStates : stateChangeListener.shardStates.values()) {             if (indexShardStates == null || indexShardStates.size() != shardStates.length) {                 return false.             }             for (int i = 0. i < shardStates.length. i++) {                 if (indexShardStates.get(i) != shardStates[i]) {                     return false.                 }             }         }         return true.     }.     if (!awaitBusy(waitPredicate, 1, TimeUnit.MINUTES)) {         fail("failed to observe expect shard states\n" + "expected: [" + numShards + "] shards with states: " + Strings.arrayToCommaDelimitedString(shardStates) + "\n" + "observed:\n" + stateChangeListener).     }     stateChangeListener.shardStates.clear(). }
false;public;4;11;;@Override public void indexShardStateChanged(IndexShard indexShard, @Nullable IndexShardState previousState, IndexShardState newState, @Nullable String reason) {     List<IndexShardState> shardStates = this.shardStates.putIfAbsent(indexShard.shardId(), new CopyOnWriteArrayList<>(new IndexShardState[] { newState })).     if (shardStates != null) {         shardStates.add(newState).     } }
false;public;2;7;;@Override public void beforeIndexCreated(Index index, Settings indexSettings) {     this.creationSettings = indexSettings.     if (indexSettings.getAsBoolean("index.fail", false)) {         throw new ElasticsearchException("failing on purpose").     } }
false;public;3;4;;@Override public void afterIndexShardClosed(ShardId shardId, @Nullable IndexShard indexShard, Settings indexSettings) {     this.afterCloseSettings = indexSettings. }
false;public;0;8;;@Override public String toString() {     StringBuilder sb = new StringBuilder().     for (Map.Entry<ShardId, List<IndexShardState>> entry : shardStates.entrySet()) {         sb.append(entry.getKey()).append(" --> ").append(Strings.collectionToCommaDelimitedString(entry.getValue())).append("\n").     }     return sb.toString(). }
