commented;modifiers;parameterAmount;loc;comment;code
false;;1;3;;void addReachableNode(DiscoveryNode node) {     reachableNodes.put(node.getAddress(), node). }
false;public;0;26;;@Override public void run() {     if (unreachableAddresses.contains(transportAddress)) {         assertTrue(inFlightConnectionAttempts.remove(transportAddress)).         listener.onFailure(new IOException("cannot connect to " + transportAddress)).         return.     }     for (final Map.Entry<TransportAddress, DiscoveryNode> addressAndNode : reachableNodes.entrySet()) {         if (addressAndNode.getKey().equals(transportAddress)) {             final DiscoveryNode discoveryNode = addressAndNode.getValue().             if (discoveryNode.isMasterNode()) {                 disconnectedNodes.remove(discoveryNode).                 connectedNodes.add(discoveryNode).                 assertTrue(inFlightConnectionAttempts.remove(transportAddress)).                 listener.onResponse(discoveryNode).                 return.             } else {                 listener.onFailure(new ElasticsearchException("non-master node " + discoveryNode)).                 return.             }         }     }     throw new AssertionError(transportAddress + " unknown"). }
false;public;0;4;;@Override public String toString() {     return "connection attempt to " + transportAddress. }
false;public;2;44;;@Override public void connectToRemoteMasterNode(TransportAddress transportAddress, ActionListener<DiscoveryNode> listener) {     assert localNode.getAddress().equals(transportAddress) == false : "should not probe local node".     final boolean isNotInFlight = inFlightConnectionAttempts.add(transportAddress).     assertTrue(isNotInFlight).     final long connectResultTime = deterministicTaskQueue.getCurrentTimeMillis() + (slowAddresses.contains(transportAddress) ? CONNECTION_TIMEOUT_MILLIS : 0).     deterministicTaskQueue.scheduleAt(connectResultTime, new Runnable() {          @Override         public void run() {             if (unreachableAddresses.contains(transportAddress)) {                 assertTrue(inFlightConnectionAttempts.remove(transportAddress)).                 listener.onFailure(new IOException("cannot connect to " + transportAddress)).                 return.             }             for (final Map.Entry<TransportAddress, DiscoveryNode> addressAndNode : reachableNodes.entrySet()) {                 if (addressAndNode.getKey().equals(transportAddress)) {                     final DiscoveryNode discoveryNode = addressAndNode.getValue().                     if (discoveryNode.isMasterNode()) {                         disconnectedNodes.remove(discoveryNode).                         connectedNodes.add(discoveryNode).                         assertTrue(inFlightConnectionAttempts.remove(transportAddress)).                         listener.onResponse(discoveryNode).                         return.                     } else {                         listener.onFailure(new ElasticsearchException("non-master node " + discoveryNode)).                         return.                     }                 }             }             throw new AssertionError(transportAddress + " unknown").         }          @Override         public String toString() {             return "connection attempt to " + transportAddress.         }     }). }
false;protected;2;8;;@Override protected void onActiveMasterFound(DiscoveryNode masterNode, long term) {     assert holdsLock() == false : "PeerFinder lock held in error".     assertThat(discoveredMasterNode, nullValue()).     assertFalse(discoveredMasterTerm.isPresent()).     discoveredMasterNode = masterNode.     discoveredMasterTerm = OptionalLong.of(term). }
false;protected;0;6;;@Override protected void onFoundPeersUpdated() {     assert holdsLock() == false : "PeerFinder lock held in error".     foundPeersFromNotification = getFoundPeers().     logger.trace("onFoundPeersUpdated({})", foundPeersFromNotification). }
false;public;0;4;;@Override public void run() {     onResult.accept(providedAddresses). }
false;public;0;4;;@Override public String toString() {     return "PeerFinderTests#resolveConfiguredHosts". }
false;private;1;17;;private void resolveConfiguredHosts(Consumer<List<TransportAddress>> onResult) {     if (addressResolveDelay >= 0) {         deterministicTaskQueue.scheduleAt(deterministicTaskQueue.getCurrentTimeMillis() + addressResolveDelay, new Runnable() {              @Override             public void run() {                 onResult.accept(providedAddresses).             }              @Override             public String toString() {                 return "PeerFinderTests#resolveConfiguredHosts".             }         }).     } else {         assertThat(addressResolveDelay, is(-1L)).     } }
false;private;1;5;;private void updateLastAcceptedNodes(Consumer<DiscoveryNodes.Builder> onBuilder) {     final Builder builder = DiscoveryNodes.builder(lastAcceptedNodes).     onBuilder.accept(builder).     lastAcceptedNodes = builder.build(). }
false;public;0;34;;@Before public void setup() {     capturingTransport = new CapturingTransport().     transportAddressConnector = new MockTransportAddressConnector().     providedAddresses = new ArrayList<>().     addressResolveDelay = 0L.     final Settings settings = Settings.builder().put(NODE_NAME_SETTING.getKey(), "node").build().     deterministicTaskQueue = new DeterministicTaskQueue(settings, random()).     localNode = newDiscoveryNode("local-node").     ConnectionManager innerConnectionManager = new ConnectionManager(settings, capturingTransport).     StubbableConnectionManager connectionManager = new StubbableConnectionManager(innerConnectionManager, settings, capturingTransport).     connectionManager.setDefaultNodeConnectedBehavior((cm, discoveryNode) -> {         final boolean isConnected = connectedNodes.contains(discoveryNode).         final boolean isDisconnected = disconnectedNodes.contains(discoveryNode).         assert isConnected != isDisconnected : discoveryNode + ": isConnected=" + isConnected + ", isDisconnected=" + isDisconnected.         return isConnected.     }).     connectionManager.setDefaultGetConnectionBehavior((cm, discoveryNode) -> capturingTransport.createConnection(discoveryNode)).     transportService = new TransportService(settings, capturingTransport, deterministicTaskQueue.getThreadPool(), TransportService.NOOP_TRANSPORT_INTERCEPTOR, boundTransportAddress -> localNode, null, emptySet(), connectionManager).     transportService.start().     transportService.acceptIncomingRequests().     lastAcceptedNodes = DiscoveryNodes.builder().localNodeId(localNode.getId()).add(localNode).build().     peerFinder = new TestPeerFinder(settings, transportService, transportAddressConnector).     foundPeersFromNotification = emptyList(). }
false;public;0;5;;@After public void deactivateAndRunRemainingTasks() {     peerFinder.deactivate(localNode).     deterministicTaskQueue.runAllRunnableTasks(). }
false;public;0;10;;public void testAddsReachableNodesFromUnicastHostsList() {     final DiscoveryNode otherNode = newDiscoveryNode("node-from-hosts-list").     providedAddresses.add(otherNode.getAddress()).     transportAddressConnector.addReachableNode(otherNode).     peerFinder.activate(lastAcceptedNodes).     runAllRunnableTasks().     assertFoundPeers(otherNode). }
false;public;0;14;;public void testDoesNotReturnDuplicateNodesWithDistinctAddresses() {     final DiscoveryNode otherNode = newDiscoveryNode("node-from-hosts-list").     final TransportAddress alternativeAddress = buildNewFakeTransportAddress().     providedAddresses.add(otherNode.getAddress()).     providedAddresses.add(alternativeAddress).     transportAddressConnector.addReachableNode(otherNode).     transportAddressConnector.reachableNodes.put(alternativeAddress, otherNode).     peerFinder.activate(lastAcceptedNodes).     runAllRunnableTasks().     assertFoundPeers(otherNode). }
false;public;0;18;;public void testAddsReachableNodesFromUnicastHostsListProvidedLater() {     final DiscoveryNode otherNode = newDiscoveryNode("node-from-hosts-list").     providedAddresses.add(otherNode.getAddress()).     transportAddressConnector.addReachableNode(otherNode).     addressResolveDelay = 10000.     peerFinder.activate(lastAcceptedNodes).     runAllRunnableTasks().     assertFoundPeers().     final long successTime = addressResolveDelay + PeerFinder.DISCOVERY_FIND_PEERS_INTERVAL_SETTING.get(Settings.EMPTY).millis().     while (deterministicTaskQueue.getCurrentTimeMillis() < successTime) {         deterministicTaskQueue.advanceTime().         runAllRunnableTasks().     }     assertFoundPeers(otherNode). }
false;public;0;18;;public void testDoesNotRequireAddressResolutionToSucceed() {     final DiscoveryNode otherNode = newDiscoveryNode("node-from-hosts-list").     providedAddresses.add(otherNode.getAddress()).     transportAddressConnector.addReachableNode(otherNode).     addressResolveDelay = -1.     peerFinder.activate(lastAcceptedNodes).     runAllRunnableTasks().     assertFoundPeers().     final long successTime = 10000 + PeerFinder.DISCOVERY_FIND_PEERS_INTERVAL_SETTING.get(Settings.EMPTY).millis().     while (deterministicTaskQueue.getCurrentTimeMillis() < successTime) {         deterministicTaskQueue.advanceTime().         runAllRunnableTasks().     }     assertFoundPeers(). }
false;public;0;10;;public void testDoesNotAddUnreachableNodesFromUnicastHostsList() {     final DiscoveryNode otherNode = newDiscoveryNode("node-from-hosts-list").     providedAddresses.add(otherNode.getAddress()).     transportAddressConnector.unreachableAddresses.add(otherNode.getAddress()).     peerFinder.activate(lastAcceptedNodes).     runAllRunnableTasks().     assertFoundPeers(). }
false;public;0;14;;public void testDoesNotAddNonMasterEligibleNodesFromUnicastHostsList() {     final DiscoveryNode nonMasterNode = new DiscoveryNode("node-from-hosts-list", buildNewFakeTransportAddress(), emptyMap(), emptySet(), Version.CURRENT).     providedAddresses.add(nonMasterNode.getAddress()).     transportAddressConnector.addReachableNode(nonMasterNode).     peerFinder.activate(lastAcceptedNodes).     runAllRunnableTasks().     assertFoundPeers().     assertThat(capturingTransport.capturedRequests(), emptyArray()). }
false;public;0;14;;public void testChecksUnicastHostsForChanges() {     peerFinder.activate(lastAcceptedNodes).     runAllRunnableTasks().     assertFoundPeers().     final DiscoveryNode otherNode = newDiscoveryNode("node-from-hosts-list").     providedAddresses.add(otherNode.getAddress()).     transportAddressConnector.addReachableNode(otherNode).     deterministicTaskQueue.advanceTime().     runAllRunnableTasks().     assertFoundPeers(otherNode). }
false;public;0;17;;public void testDeactivationClearsPastKnowledge() {     final DiscoveryNode otherNode = newDiscoveryNode("node-from-hosts-list").     providedAddresses.add(otherNode.getAddress()).     transportAddressConnector.addReachableNode(otherNode).     peerFinder.activate(lastAcceptedNodes).     runAllRunnableTasks().     assertFoundPeers(otherNode).     peerFinder.deactivate(localNode).     providedAddresses.clear().     peerFinder.activate(lastAcceptedNodes).     runAllRunnableTasks().     assertFoundPeers(). }
false;public;0;10;;public void testAddsReachableNodesFromClusterState() {     final DiscoveryNode otherNode = newDiscoveryNode("node-in-cluster-state").     updateLastAcceptedNodes(b -> b.add(otherNode)).     transportAddressConnector.addReachableNode(otherNode).     peerFinder.activate(lastAcceptedNodes).     runAllRunnableTasks().     assertFoundPeers(otherNode). }
false;public;0;9;;public void testDoesNotAddUnreachableNodesFromClusterState() {     final DiscoveryNode otherNode = newDiscoveryNode("node-in-cluster-state").     updateLastAcceptedNodes(b -> b.add(otherNode)).     transportAddressConnector.unreachableAddresses.add(otherNode.getAddress()).     peerFinder.activate(lastAcceptedNodes).     runAllRunnableTasks().     assertFoundPeers(). }
false;public;0;13;;public void testAddsReachableNodesFromIncomingRequests() {     final DiscoveryNode sourceNode = newDiscoveryNode("request-source").     final DiscoveryNode otherKnownNode = newDiscoveryNode("other-known-node").     transportAddressConnector.addReachableNode(sourceNode).     transportAddressConnector.addReachableNode(otherKnownNode).     peerFinder.activate(lastAcceptedNodes).     peerFinder.handlePeersRequest(new PeersRequest(sourceNode, Collections.singletonList(otherKnownNode))).     runAllRunnableTasks().     assertFoundPeers(sourceNode, otherKnownNode). }
false;public;0;13;;public void testDoesNotAddReachableNonMasterEligibleNodesFromIncomingRequests() {     final DiscoveryNode sourceNode = new DiscoveryNode("request-source", buildNewFakeTransportAddress(), emptyMap(), emptySet(), Version.CURRENT).     final DiscoveryNode otherKnownNode = newDiscoveryNode("other-known-node").     transportAddressConnector.addReachableNode(otherKnownNode).     peerFinder.activate(lastAcceptedNodes).     peerFinder.handlePeersRequest(new PeersRequest(sourceNode, Collections.singletonList(otherKnownNode))).     runAllRunnableTasks().     assertFoundPeers(otherKnownNode). }
false;public;0;13;;public void testDoesNotAddUnreachableNodesFromIncomingRequests() {     final DiscoveryNode sourceNode = newDiscoveryNode("request-source").     final DiscoveryNode otherKnownNode = newDiscoveryNode("other-known-node").     transportAddressConnector.addReachableNode(sourceNode).     transportAddressConnector.unreachableAddresses.add(otherKnownNode.getAddress()).     peerFinder.activate(lastAcceptedNodes).     peerFinder.handlePeersRequest(new PeersRequest(sourceNode, Collections.singletonList(otherKnownNode))).     runAllRunnableTasks().     assertFoundPeers(sourceNode). }
false;public;0;13;;public void testDoesNotAddUnreachableSourceNodeFromIncomingRequests() {     final DiscoveryNode sourceNode = newDiscoveryNode("request-source").     final DiscoveryNode otherKnownNode = newDiscoveryNode("other-known-node").     transportAddressConnector.unreachableAddresses.add(sourceNode.getAddress()).     transportAddressConnector.addReachableNode(otherKnownNode).     peerFinder.activate(lastAcceptedNodes).     peerFinder.handlePeersRequest(new PeersRequest(sourceNode, Collections.singletonList(otherKnownNode))).     runAllRunnableTasks().     assertFoundPeers(otherKnownNode). }
false;public;0;22;;public void testRespondsToRequestWhenActive() {     final DiscoveryNode sourceNode = newDiscoveryNode("request-source").     transportAddressConnector.addReachableNode(sourceNode).     peerFinder.activate(lastAcceptedNodes).     final PeersResponse peersResponse1 = peerFinder.handlePeersRequest(new PeersRequest(sourceNode, Collections.emptyList())).     assertFalse(peersResponse1.getMasterNode().isPresent()).     // sourceNode is not yet known     assertThat(peersResponse1.getKnownPeers(), empty()).     assertThat(peersResponse1.getTerm(), is(0L)).     runAllRunnableTasks().     assertFoundPeers(sourceNode).     final long updatedTerm = randomNonNegativeLong().     peerFinder.setCurrentTerm(updatedTerm).     final PeersResponse peersResponse2 = peerFinder.handlePeersRequest(new PeersRequest(sourceNode, Collections.emptyList())).     assertFalse(peersResponse2.getMasterNode().isPresent()).     assertThat(peersResponse2.getKnownPeers(), contains(sourceNode)).     assertThat(peersResponse2.getTerm(), is(updatedTerm)). }
false;public;0;15;;public void testDelegatesRequestHandlingWhenInactive() {     final DiscoveryNode masterNode = newDiscoveryNode("master-node").     final DiscoveryNode sourceNode = newDiscoveryNode("request-source").     transportAddressConnector.addReachableNode(sourceNode).     peerFinder.activate(DiscoveryNodes.EMPTY_NODES).     final long term = randomNonNegativeLong().     peerFinder.setCurrentTerm(term).     peerFinder.deactivate(masterNode).     final PeersResponse expectedResponse = new PeersResponse(Optional.of(masterNode), Collections.emptyList(), term).     final PeersResponse peersResponse = peerFinder.handlePeersRequest(new PeersRequest(sourceNode, Collections.emptyList())).     assertThat(peersResponse, equalTo(expectedResponse)). }
false;public;1;4;;@Override public PeersResponse read(StreamInput in) throws IOException {     return new PeersResponse(in). }
false;public;1;7;;@Override public void handleResponse(PeersResponse response) {     assertTrue(responseReceived.compareAndSet(false, true)).     assertFalse(response.getMasterNode().isPresent()).     // sourceNode is not yet known     assertThat(response.getKnownPeers(), empty()).     assertThat(response.getTerm(), is(0L)). }
false;public;1;4;;@Override public void handleException(TransportException exp) {     throw new AssertionError("unexpected", exp). }
false;public;0;4;;@Override public String executor() {     return Names.SAME. }
false;public;0;39;;public void testReceivesRequestsFromTransportService() {     final DiscoveryNode sourceNode = newDiscoveryNode("request-source").     transportAddressConnector.addReachableNode(sourceNode).     peerFinder.activate(lastAcceptedNodes).     final AtomicBoolean responseReceived = new AtomicBoolean().     transportService.sendRequest(localNode, REQUEST_PEERS_ACTION_NAME, new PeersRequest(sourceNode, Collections.emptyList()), new TransportResponseHandler<PeersResponse>() {          @Override         public PeersResponse read(StreamInput in) throws IOException {             return new PeersResponse(in).         }          @Override         public void handleResponse(PeersResponse response) {             assertTrue(responseReceived.compareAndSet(false, true)).             assertFalse(response.getMasterNode().isPresent()).             // sourceNode is not yet known             assertThat(response.getKnownPeers(), empty()).             assertThat(response.getTerm(), is(0L)).         }          @Override         public void handleException(TransportException exp) {             throw new AssertionError("unexpected", exp).         }          @Override         public String executor() {             return Names.SAME.         }     }).     runAllRunnableTasks().     assertTrue(responseReceived.get()).     assertFoundPeers(sourceNode). }
false;public;0;15;;public void testRequestsPeersIncludingKnownPeersInRequest() {     final DiscoveryNode otherNode = newDiscoveryNode("node-from-hosts-list").     providedAddresses.add(otherNode.getAddress()).     transportAddressConnector.addReachableNode(otherNode).     peerFinder.activate(lastAcceptedNodes).     runAllRunnableTasks().     assertFoundPeers(otherNode).     final CapturedRequest[] capturedRequests = capturingTransport.getCapturedRequestsAndClear().     assertThat(capturedRequests.length, is(1)).     final PeersRequest peersRequest = (PeersRequest) capturedRequests[0].request.     assertThat(peersRequest.getKnownPeers(), contains(otherNode)). }
false;public;0;20;;public void testAddsReachablePeersFromResponse() {     final DiscoveryNode otherNode = newDiscoveryNode("node-from-hosts-list").     providedAddresses.add(otherNode.getAddress()).     transportAddressConnector.addReachableNode(otherNode).     peerFinder.activate(lastAcceptedNodes).     runAllRunnableTasks().     assertFoundPeers(otherNode).     final DiscoveryNode discoveredNode = newDiscoveryNode("discovered-node").     transportAddressConnector.addReachableNode(discoveredNode).     respondToRequests(node -> {         assertThat(node, is(otherNode)).         return new PeersResponse(Optional.empty(), singletonList(discoveredNode), randomNonNegativeLong()).     }).     runAllRunnableTasks().     assertFoundPeers(otherNode, discoveredNode). }
false;public;0;22;;public void testAddsReachableMasterFromResponse() {     final DiscoveryNode otherNode = newDiscoveryNode("node-from-hosts-list").     providedAddresses.add(otherNode.getAddress()).     transportAddressConnector.addReachableNode(otherNode).     peerFinder.activate(lastAcceptedNodes).     runAllRunnableTasks().     assertFoundPeers(otherNode).     final DiscoveryNode discoveredMaster = newDiscoveryNode("discovered-master").     respondToRequests(node -> {         assertThat(node, is(otherNode)).         return new PeersResponse(Optional.of(discoveredMaster), emptyList(), randomNonNegativeLong()).     }).     transportAddressConnector.addReachableNode(discoveredMaster).     runAllRunnableTasks().     assertFoundPeers(otherNode, discoveredMaster).     assertThat(peerFinder.discoveredMasterNode, nullValue()).     assertFalse(peerFinder.discoveredMasterTerm.isPresent()). }
false;public;0;21;;public void testHandlesDiscoveryOfMasterFromResponseFromMaster() {     final DiscoveryNode otherNode = newDiscoveryNode("node-from-hosts-list").     providedAddresses.add(otherNode.getAddress()).     transportAddressConnector.addReachableNode(otherNode).     peerFinder.activate(lastAcceptedNodes).     runAllRunnableTasks().     assertFoundPeers(otherNode).     final long term = randomNonNegativeLong().     respondToRequests(node -> {         assertThat(node, is(otherNode)).         return new PeersResponse(Optional.of(otherNode), emptyList(), term).     }).     runAllRunnableTasks().     assertFoundPeers(otherNode).     assertThat(peerFinder.discoveredMasterNode, is(otherNode)).     assertThat(peerFinder.discoveredMasterTerm, is(OptionalLong.of(term))). }
false;public;0;32;;public void testOnlyRequestsPeersOncePerRoundButDoesRetryNextRound() {     final DiscoveryNode sourceNode = newDiscoveryNode("request-source").     transportAddressConnector.addReachableNode(sourceNode).     peerFinder.activate(lastAcceptedNodes).     peerFinder.handlePeersRequest(new PeersRequest(sourceNode, emptyList())).     runAllRunnableTasks().     assertFoundPeers(sourceNode).     respondToRequests(node -> {         assertThat(node, is(sourceNode)).         return new PeersResponse(Optional.empty(), singletonList(sourceNode), randomNonNegativeLong()).     }).     peerFinder.handlePeersRequest(new PeersRequest(sourceNode, emptyList())).     runAllRunnableTasks().     respondToRequests(node -> {         throw new AssertionError("there should have been no further requests").     }).     final DiscoveryNode otherNode = newDiscoveryNode("otherNode").     transportAddressConnector.addReachableNode(otherNode).     deterministicTaskQueue.advanceTime().     runAllRunnableTasks().     respondToRequests(node -> {         assertThat(node, is(sourceNode)).         return new PeersResponse(Optional.empty(), singletonList(otherNode), randomNonNegativeLong()).     }).     runAllRunnableTasks().     assertFoundPeers(sourceNode, otherNode). }
false;public;0;16;;public void testDoesNotReconnectToNodesOnceConnected() {     final DiscoveryNode otherNode = newDiscoveryNode("node-from-hosts-list").     providedAddresses.add(otherNode.getAddress()).     transportAddressConnector.addReachableNode(otherNode).     peerFinder.activate(lastAcceptedNodes).     runAllRunnableTasks().     assertFoundPeers(otherNode).     transportAddressConnector.reachableNodes.clear().     deterministicTaskQueue.advanceTime().     runAllRunnableTasks().     assertFoundPeers(otherNode). }
false;public;0;19;;public void testDiscardsDisconnectedNodes() {     final DiscoveryNode otherNode = newDiscoveryNode("original-node").     providedAddresses.add(otherNode.getAddress()).     transportAddressConnector.addReachableNode(otherNode).     peerFinder.activate(lastAcceptedNodes).     runAllRunnableTasks().     assertFoundPeers(otherNode).     transportAddressConnector.reachableNodes.clear().     transportAddressConnector.unreachableAddresses.add(otherNode.getAddress()).     connectedNodes.remove(otherNode).     disconnectedNodes.add(otherNode).     deterministicTaskQueue.advanceTime().     runAllRunnableTasks().     assertFoundPeers(). }
false;public;0;34;;public void testDoesNotMakeMultipleConcurrentConnectionAttemptsToOneAddress() {     final DiscoveryNode otherNode = newDiscoveryNode("node-from-hosts-list").     providedAddresses.add(otherNode.getAddress()).     transportAddressConnector.unreachableAddresses.add(otherNode.getAddress()).     transportAddressConnector.slowAddresses.add(otherNode.getAddress()).     peerFinder.activate(lastAcceptedNodes).     runAllRunnableTasks().     assertFoundPeers().     deterministicTaskQueue.advanceTime().     // MockTransportAddressConnector verifies no multiple connection attempts     runAllRunnableTasks().     assertFoundPeers().     transportAddressConnector.slowAddresses.clear().     transportAddressConnector.unreachableAddresses.clear().     transportAddressConnector.addReachableNode(otherNode).     while (deterministicTaskQueue.getCurrentTimeMillis() < CONNECTION_TIMEOUT_MILLIS) {         assertFoundPeers().         deterministicTaskQueue.advanceTime().         runAllRunnableTasks().     }     // need to wait for the connection to timeout, then for another wakeup, before discovering the peer     final long expectedTime = CONNECTION_TIMEOUT_MILLIS + PeerFinder.DISCOVERY_FIND_PEERS_INTERVAL_SETTING.get(Settings.EMPTY).millis().     while (deterministicTaskQueue.getCurrentTimeMillis() < expectedTime) {         deterministicTaskQueue.advanceTime().         runAllRunnableTasks().     }     assertFoundPeers(otherNode). }
false;public;0;44;;public void testTimesOutAndRetriesConnectionsToBlackholedNodes() {     final DiscoveryNode otherNode = newDiscoveryNode("node-from-hosts-list").     final DiscoveryNode nodeToFind = newDiscoveryNode("node-to-find").     providedAddresses.add(otherNode.getAddress()).     transportAddressConnector.addReachableNode(otherNode).     transportAddressConnector.addReachableNode(nodeToFind).     peerFinder.activate(lastAcceptedNodes).     while (true) {         deterministicTaskQueue.advanceTime().         // MockTransportAddressConnector verifies no multiple connection attempts         runAllRunnableTasks().         if (capturingTransport.getCapturedRequestsAndClear().length > 0) {             break.         }     }     final long timeoutAtMillis = deterministicTaskQueue.getCurrentTimeMillis() + PeerFinder.DISCOVERY_REQUEST_PEERS_TIMEOUT_SETTING.get(Settings.EMPTY).millis().     while (deterministicTaskQueue.getCurrentTimeMillis() < timeoutAtMillis) {         assertFoundPeers(otherNode).         deterministicTaskQueue.advanceTime().         runAllRunnableTasks().     }     // need to wait for the connection to timeout, then for another wakeup, before discovering the peer     final long expectedTime = timeoutAtMillis + PeerFinder.DISCOVERY_FIND_PEERS_INTERVAL_SETTING.get(Settings.EMPTY).millis().     while (deterministicTaskQueue.getCurrentTimeMillis() < expectedTime) {         deterministicTaskQueue.advanceTime().         runAllRunnableTasks().     }     respondToRequests(node -> {         assertThat(node, is(otherNode)).         return new PeersResponse(Optional.empty(), singletonList(nodeToFind), randomNonNegativeLong()).     }).     deterministicTaskQueue.advanceTime().     runAllRunnableTasks().     assertFoundPeers(nodeToFind, otherNode). }
false;public;0;22;;public void testReconnectsToDisconnectedNodes() {     final DiscoveryNode otherNode = newDiscoveryNode("original-node").     providedAddresses.add(otherNode.getAddress()).     transportAddressConnector.addReachableNode(otherNode).     peerFinder.activate(lastAcceptedNodes).     runAllRunnableTasks().     assertFoundPeers(otherNode).     transportAddressConnector.reachableNodes.clear().     final DiscoveryNode rebootedOtherNode = new DiscoveryNode("rebooted-node", otherNode.getAddress(), Version.CURRENT).     transportAddressConnector.addReachableNode(rebootedOtherNode).     connectedNodes.remove(otherNode).     disconnectedNodes.add(otherNode).     deterministicTaskQueue.advanceTime().     runAllRunnableTasks().     assertFoundPeers(rebootedOtherNode). }
false;private;1;10;;private void respondToRequests(Function<DiscoveryNode, PeersResponse> responseFactory) {     final CapturedRequest[] capturedRequests = capturingTransport.getCapturedRequestsAndClear().     for (final CapturedRequest capturedRequest : capturedRequests) {         assertThat(capturedRequest.action, is(REQUEST_PEERS_ACTION_NAME)).         assertThat(capturedRequest.request, instanceOf(PeersRequest.class)).         final PeersRequest peersRequest = (PeersRequest) capturedRequest.request.         assertThat(peersRequest.getSourceNode(), is(localNode)).         capturingTransport.handleResponse(capturedRequests[0].requestId, responseFactory.apply(capturedRequest.node)).     } }
false;private;1;9;;private void assertFoundPeers(DiscoveryNode... expectedNodesArray) {     final Set<DiscoveryNode> expectedNodes = Arrays.stream(expectedNodesArray).collect(Collectors.toSet()).     final List<DiscoveryNode> actualNodesList = StreamSupport.stream(peerFinder.getFoundPeers().spliterator(), false).collect(Collectors.toList()).     final HashSet<DiscoveryNode> actualNodesSet = new HashSet<>(actualNodesList).     assertThat(actualNodesSet, equalTo(expectedNodes)).     assertTrue("no duplicates in " + actualNodesList, actualNodesSet.size() == actualNodesList.size()).     assertNotifiedOfAllUpdates(). }
false;private;0;5;;private void assertNotifiedOfAllUpdates() {     final Stream<DiscoveryNode> actualNodes = StreamSupport.stream(peerFinder.getFoundPeers().spliterator(), false).     final Stream<DiscoveryNode> notifiedNodes = StreamSupport.stream(foundPeersFromNotification.spliterator(), false).     assertThat(notifiedNodes.collect(Collectors.toSet()), equalTo(actualNodes.collect(Collectors.toSet()))). }
false;private;1;3;;private DiscoveryNode newDiscoveryNode(String nodeId) {     return new DiscoveryNode(nodeId, buildNewFakeTransportAddress(), Version.CURRENT). }
false;public;0;4;;@Override public void run() {     PeerFinderTests.this.assertNotifiedOfAllUpdates(). }
false;public;0;4;;@Override public String toString() {     return "assertNotifiedOfAllUpdates". }
false;private;0;15;;private void runAllRunnableTasks() {     deterministicTaskQueue.scheduleNow(new Runnable() {          @Override         public void run() {             PeerFinderTests.this.assertNotifiedOfAllUpdates().         }          @Override         public String toString() {             return "assertNotifiedOfAllUpdates".         }     }).     deterministicTaskQueue.runAllRunnableTasks().     assertNotifiedOfAllUpdates(). }
