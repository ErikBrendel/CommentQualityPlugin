commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;public void testDefaultSimilarity() {     Settings settings = Settings.builder().build().     IndexSettings indexSettings = IndexSettingsModule.newIndexSettings("test", settings).     SimilarityService service = new SimilarityService(indexSettings, null, Collections.emptyMap()).     assertThat(service.getDefaultSimilarity(), instanceOf(LegacyBM25Similarity.class)). }
true;public;0;10;// Tests #16594 ;// Tests #16594 public void testOverrideBuiltInSimilarity() {     Settings settings = Settings.builder().put("index.similarity.BM25.type", "classic").build().     IndexSettings indexSettings = IndexSettingsModule.newIndexSettings("test", settings).     try {         new SimilarityService(indexSettings, null, Collections.emptyMap()).         fail("can't override bm25").     } catch (IllegalArgumentException ex) {         assertEquals(ex.getMessage(), "Cannot redefine built-in Similarity [BM25]").     } }
false;public;0;7;;public void testOverrideDefaultSimilarity() {     Settings settings = Settings.builder().put("index.similarity.default.type", "boolean").build().     IndexSettings indexSettings = IndexSettingsModule.newIndexSettings("test", settings).     SimilarityService service = new SimilarityService(indexSettings, null, Collections.emptyMap()).     assertTrue(service.getDefaultSimilarity() instanceof BooleanSimilarity). }
false;public;1;4;;@Override public long computeNorm(FieldInvertState state) {     return state.getLength(). }
false;public;2;4;;@Override public float score(float freq, long norm) {     return -1. }
false;public;3;11;;@Override public SimScorer scorer(float boost, CollectionStatistics collectionStats, TermStatistics... termStats) {     return new SimScorer() {          @Override         public float score(float freq, long norm) {             return -1.         }     }. }
false;public;1;4;;@Override public long computeNorm(FieldInvertState state) {     return state.getLength(). }
false;public;2;4;;@Override public float score(float freq, long norm) {     return 1 / (freq + norm). }
false;public;3;11;;@Override public SimScorer scorer(float boost, CollectionStatistics collectionStats, TermStatistics... termStats) {     return new SimScorer() {          @Override         public float score(float freq, long norm) {             return 1 / (freq + norm).         }     }. }
false;public;1;4;;@Override public long computeNorm(FieldInvertState state) {     return state.getLength(). }
false;public;2;4;;@Override public float score(float freq, long norm) {     return freq + norm. }
false;public;3;11;;@Override public SimScorer scorer(float boost, CollectionStatistics collectionStats, TermStatistics... termStats) {     return new SimScorer() {          @Override         public float score(float freq, long norm) {             return freq + norm.         }     }. }
false;public;0;70;;public void testSimilarityValidation() {     Similarity negativeScoresSim = new Similarity() {          @Override         public long computeNorm(FieldInvertState state) {             return state.getLength().         }          @Override         public SimScorer scorer(float boost, CollectionStatistics collectionStats, TermStatistics... termStats) {             return new SimScorer() {                  @Override                 public float score(float freq, long norm) {                     return -1.                 }             }.         }     }.     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> SimilarityService.validateSimilarity(Version.V_7_0_0, negativeScoresSim)).     assertThat(e.getMessage(), Matchers.containsString("Similarities should not return negative scores")).     Similarity decreasingScoresWithFreqSim = new Similarity() {          @Override         public long computeNorm(FieldInvertState state) {             return state.getLength().         }          @Override         public SimScorer scorer(float boost, CollectionStatistics collectionStats, TermStatistics... termStats) {             return new SimScorer() {                  @Override                 public float score(float freq, long norm) {                     return 1 / (freq + norm).                 }             }.         }     }.     e = expectThrows(IllegalArgumentException.class, () -> SimilarityService.validateSimilarity(Version.V_7_0_0, decreasingScoresWithFreqSim)).     assertThat(e.getMessage(), Matchers.containsString("Similarity scores should not decrease when term frequency increases")).     Similarity increasingScoresWithNormSim = new Similarity() {          @Override         public long computeNorm(FieldInvertState state) {             return state.getLength().         }          @Override         public SimScorer scorer(float boost, CollectionStatistics collectionStats, TermStatistics... termStats) {             return new SimScorer() {                  @Override                 public float score(float freq, long norm) {                     return freq + norm.                 }             }.         }     }.     e = expectThrows(IllegalArgumentException.class, () -> SimilarityService.validateSimilarity(Version.V_7_0_0, increasingScoresWithNormSim)).     assertThat(e.getMessage(), Matchers.containsString("Similarity scores should not increase when norm increases")). }
