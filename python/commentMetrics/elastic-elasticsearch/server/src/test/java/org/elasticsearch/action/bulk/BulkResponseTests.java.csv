commented;modifiers;parameterAmount;loc;comment;code
false;public;0;64;;public void testToAndFromXContent() throws IOException {     XContentType xContentType = randomFrom(XContentType.values()).     boolean humanReadable = randomBoolean().     long took = randomFrom(randomNonNegativeLong(), -1L).     long ingestTook = randomFrom(randomNonNegativeLong(), NO_INGEST_TOOK).     int nbBulkItems = randomIntBetween(1, 10).     BulkItemResponse[] bulkItems = new BulkItemResponse[nbBulkItems].     BulkItemResponse[] expectedBulkItems = new BulkItemResponse[nbBulkItems].     for (int i = 0. i < nbBulkItems. i++) {         DocWriteRequest.OpType opType = randomFrom(DocWriteRequest.OpType.values()).         if (frequently()) {             Tuple<? extends DocWriteResponse, ? extends DocWriteResponse> randomDocWriteResponses = null.             if (opType == DocWriteRequest.OpType.INDEX || opType == DocWriteRequest.OpType.CREATE) {                 randomDocWriteResponses = IndexResponseTests.randomIndexResponse().             } else if (opType == DocWriteRequest.OpType.DELETE) {                 randomDocWriteResponses = DeleteResponseTests.randomDeleteResponse().             } else if (opType == DocWriteRequest.OpType.UPDATE) {                 randomDocWriteResponses = UpdateResponseTests.randomUpdateResponse(xContentType).             } else {                 fail("Test does not support opType [" + opType + "]").             }             bulkItems[i] = new BulkItemResponse(i, opType, randomDocWriteResponses.v1()).             expectedBulkItems[i] = new BulkItemResponse(i, opType, randomDocWriteResponses.v2()).         } else {             String index = randomAlphaOfLength(5).             String type = randomAlphaOfLength(5).             String id = randomAlphaOfLength(5).             Tuple<Throwable, ElasticsearchException> failures = randomExceptions().             Exception bulkItemCause = (Exception) failures.v1().             bulkItems[i] = new BulkItemResponse(i, opType, new BulkItemResponse.Failure(index, type, id, bulkItemCause)).             expectedBulkItems[i] = new BulkItemResponse(i, opType, new BulkItemResponse.Failure(index, type, id, failures.v2(), ExceptionsHelper.status(bulkItemCause))).         }     }     BulkResponse bulkResponse = new BulkResponse(bulkItems, took, ingestTook).     BytesReference originalBytes = toShuffledXContent(bulkResponse, xContentType, ToXContent.EMPTY_PARAMS, humanReadable).     BulkResponse parsedBulkResponse.     try (XContentParser parser = createParser(xContentType.xContent(), originalBytes)) {         parsedBulkResponse = BulkResponse.fromXContent(parser).         assertNull(parser.nextToken()).     }     assertEquals(took, parsedBulkResponse.getTook().getMillis()).     assertEquals(ingestTook, parsedBulkResponse.getIngestTookInMillis()).     assertEquals(expectedBulkItems.length, parsedBulkResponse.getItems().length).     for (int i = 0. i < expectedBulkItems.length. i++) {         assertBulkItemResponse(expectedBulkItems[i], parsedBulkResponse.getItems()[i]).     }     BytesReference finalBytes = toXContent(parsedBulkResponse, xContentType, humanReadable).     BytesReference expectedFinalBytes = toXContent(parsedBulkResponse, xContentType, humanReadable).     assertToXContentEquivalent(expectedFinalBytes, finalBytes, xContentType). }
