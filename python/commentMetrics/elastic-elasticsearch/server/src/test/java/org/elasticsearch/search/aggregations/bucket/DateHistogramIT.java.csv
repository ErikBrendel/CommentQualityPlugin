# id;timestamp;commentText;codeText;commentWords;codeWords
DateHistogramIT -> public void testSingleValueFieldWithExtendedBoundsTimezone() throws Exception;1524684173;Test date histogram aggregation with hour interval, timezone shift and_extended bounds (see https://github.com/elastic/elasticsearch/issues/12278);public void testSingleValueFieldWithExtendedBoundsTimezone() throws Exception {_        String index = "test12278"__        prepareCreate(index)_                .setSettings(Settings.builder().put(indexSettings()).put("index.number_of_shards", 1).put("index.number_of_replicas", 0))_                .execute().actionGet()___        DateMathParser parser = new DateMathParser(Joda.getStrictStandardDateFormatter())___        _        _        List<IndexRequestBuilder> builders = new ArrayList<>()__        int timeZoneHourOffset = randomIntBetween(-12, 12)__        DateTimeZone timezone = DateTimeZone.forOffsetHours(timeZoneHourOffset)__        DateTime timeZoneStartToday = new DateTime(parser.parse("now/d", System::currentTimeMillis, false, timezone), DateTimeZone.UTC)__        DateTime timeZoneNoonToday = new DateTime(parser.parse("now/d+12h", System::currentTimeMillis, false, timezone), DateTimeZone.UTC)__        builders.add(indexDoc(index, timeZoneStartToday, 1))__        builders.add(indexDoc(index, timeZoneNoonToday, 2))__        indexRandom(true, builders)__        ensureSearchable(index)___        SearchResponse response = null__        _        response = client()_                .prepareSearch(index)_                .setQuery(QueryBuilders.rangeQuery("date").from("now/d").to("now/d").includeLower(true).includeUpper(true).timeZone(timezone.getID()))_                .addAggregation(_                        dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.hours(1)).timeZone(timezone).minDocCount(0)_                                .extendedBounds(new ExtendedBounds("now/d", "now/d+23h"))_                ).execute().actionGet()__        assertSearchResponse(response)___        assertThat("Expected 24 buckets for one day aggregation with hourly interval", response.getHits().getTotalHits(), equalTo(2L))___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(24))___        for (int i = 0_ i < buckets.size()_ i++) {_            Histogram.Bucket bucket = buckets.get(i)__            assertThat(bucket, notNullValue())__            assertThat("InternalBucket " + i + " had wrong key", (DateTime) bucket.getKey(), equalTo(new DateTime(timeZoneStartToday.getMillis() + (i * 60 * 60 * 1000), DateTimeZone.UTC)))__            if (i == 0 || i == 12) {_                assertThat(bucket.getDocCount(), equalTo(1L))__            } else {_                assertThat(bucket.getDocCount(), equalTo(0L))__            }_        }_        internalCluster().wipeIndices(index)__    };test,date,histogram,aggregation,with,hour,interval,timezone,shift,and,extended,bounds,see,https,github,com,elastic,elasticsearch,issues,12278;public,void,test,single,value,field,with,extended,bounds,timezone,throws,exception,string,index,test12278,prepare,create,index,set,settings,settings,builder,put,index,settings,put,index,1,put,index,0,execute,action,get,date,math,parser,parser,new,date,math,parser,joda,get,strict,standard,date,formatter,list,index,request,builder,builders,new,array,list,int,time,zone,hour,offset,random,int,between,12,12,date,time,zone,timezone,date,time,zone,for,offset,hours,time,zone,hour,offset,date,time,time,zone,start,today,new,date,time,parser,parse,now,d,system,current,time,millis,false,timezone,date,time,zone,utc,date,time,time,zone,noon,today,new,date,time,parser,parse,now,d,12h,system,current,time,millis,false,timezone,date,time,zone,utc,builders,add,index,doc,index,time,zone,start,today,1,builders,add,index,doc,index,time,zone,noon,today,2,index,random,true,builders,ensure,searchable,index,search,response,response,null,response,client,prepare,search,index,set,query,query,builders,range,query,date,from,now,d,to,now,d,include,lower,true,include,upper,true,time,zone,timezone,get,id,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,hours,1,time,zone,timezone,min,doc,count,0,extended,bounds,new,extended,bounds,now,d,now,d,23h,execute,action,get,assert,search,response,response,assert,that,expected,24,buckets,for,one,day,aggregation,with,hourly,interval,response,get,hits,get,total,hits,equal,to,2l,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,24,for,int,i,0,i,buckets,size,i,histogram,bucket,bucket,buckets,get,i,assert,that,bucket,not,null,value,assert,that,internal,bucket,i,had,wrong,key,date,time,bucket,get,key,equal,to,new,date,time,time,zone,start,today,get,millis,i,60,60,1000,date,time,zone,utc,if,i,0,i,12,assert,that,bucket,get,doc,count,equal,to,1l,else,assert,that,bucket,get,doc,count,equal,to,0l,internal,cluster,wipe,indices,index
DateHistogramIT -> public void testSingleValueFieldWithExtendedBoundsTimezone() throws Exception;1529487105;Test date histogram aggregation with hour interval, timezone shift and_extended bounds (see https://github.com/elastic/elasticsearch/issues/12278);public void testSingleValueFieldWithExtendedBoundsTimezone() throws Exception {_        String index = "test12278"__        prepareCreate(index)_                .setSettings(Settings.builder().put(indexSettings()).put("index.number_of_shards", 1).put("index.number_of_replicas", 0))_                .execute().actionGet()___        DateMathParser parser = new DateMathParser(Joda.getStrictStandardDateFormatter())___        _        _        List<IndexRequestBuilder> builders = new ArrayList<>()__        int timeZoneHourOffset = randomIntBetween(-12, 12)__        DateTimeZone timezone = DateTimeZone.forOffsetHours(timeZoneHourOffset)__        DateTime timeZoneStartToday = new DateTime(parser.parse("now/d", System::currentTimeMillis, false, timezone), DateTimeZone.UTC)__        DateTime timeZoneNoonToday = new DateTime(parser.parse("now/d+12h", System::currentTimeMillis, false, timezone), DateTimeZone.UTC)__        builders.add(indexDoc(index, timeZoneStartToday, 1))__        builders.add(indexDoc(index, timeZoneNoonToday, 2))__        indexRandom(true, builders)__        ensureSearchable(index)___        SearchResponse response = null__        _        response = client()_                .prepareSearch(index)_                .setQuery(QueryBuilders.rangeQuery("date").from("now/d").to("now/d").includeLower(true).includeUpper(true).timeZone(timezone.getID()))_                .addAggregation(_                        dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.hours(1)).timeZone(timezone).minDocCount(0)_                                .extendedBounds(new ExtendedBounds("now/d", "now/d+23h"))_                ).execute().actionGet()__        assertSearchResponse(response)___        assertThat("Expected 24 buckets for one day aggregation with hourly interval", response.getHits().getTotalHits(), equalTo(2L))___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(24))___        for (int i = 0_ i < buckets.size()_ i++) {_            Histogram.Bucket bucket = buckets.get(i)__            assertThat(bucket, notNullValue())__            assertThat("InternalBucket " + i + " had wrong key", (DateTime) bucket.getKey(), equalTo(new DateTime(timeZoneStartToday.getMillis() + (i * 60 * 60 * 1000), DateTimeZone.UTC)))__            if (i == 0 || i == 12) {_                assertThat(bucket.getDocCount(), equalTo(1L))__            } else {_                assertThat(bucket.getDocCount(), equalTo(0L))__            }_        }_        internalCluster().wipeIndices(index)__    };test,date,histogram,aggregation,with,hour,interval,timezone,shift,and,extended,bounds,see,https,github,com,elastic,elasticsearch,issues,12278;public,void,test,single,value,field,with,extended,bounds,timezone,throws,exception,string,index,test12278,prepare,create,index,set,settings,settings,builder,put,index,settings,put,index,1,put,index,0,execute,action,get,date,math,parser,parser,new,date,math,parser,joda,get,strict,standard,date,formatter,list,index,request,builder,builders,new,array,list,int,time,zone,hour,offset,random,int,between,12,12,date,time,zone,timezone,date,time,zone,for,offset,hours,time,zone,hour,offset,date,time,time,zone,start,today,new,date,time,parser,parse,now,d,system,current,time,millis,false,timezone,date,time,zone,utc,date,time,time,zone,noon,today,new,date,time,parser,parse,now,d,12h,system,current,time,millis,false,timezone,date,time,zone,utc,builders,add,index,doc,index,time,zone,start,today,1,builders,add,index,doc,index,time,zone,noon,today,2,index,random,true,builders,ensure,searchable,index,search,response,response,null,response,client,prepare,search,index,set,query,query,builders,range,query,date,from,now,d,to,now,d,include,lower,true,include,upper,true,time,zone,timezone,get,id,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,hours,1,time,zone,timezone,min,doc,count,0,extended,bounds,new,extended,bounds,now,d,now,d,23h,execute,action,get,assert,search,response,response,assert,that,expected,24,buckets,for,one,day,aggregation,with,hourly,interval,response,get,hits,get,total,hits,equal,to,2l,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,24,for,int,i,0,i,buckets,size,i,histogram,bucket,bucket,buckets,get,i,assert,that,bucket,not,null,value,assert,that,internal,bucket,i,had,wrong,key,date,time,bucket,get,key,equal,to,new,date,time,time,zone,start,today,get,millis,i,60,60,1000,date,time,zone,utc,if,i,0,i,12,assert,that,bucket,get,doc,count,equal,to,1l,else,assert,that,bucket,get,doc,count,equal,to,0l,internal,cluster,wipe,indices,index
DateHistogramIT -> public void testSingleValueFieldWithExtendedBoundsTimezone() throws Exception;1531179852;Test date histogram aggregation with hour interval, timezone shift and_extended bounds (see https://github.com/elastic/elasticsearch/issues/12278);public void testSingleValueFieldWithExtendedBoundsTimezone() throws Exception {_        String index = "test12278"__        prepareCreate(index)_                .setSettings(Settings.builder().put(indexSettings()).put("index.number_of_shards", 1).put("index.number_of_replicas", 0))_                .execute().actionGet()___        DateMathParser parser = new DateMathParser(Joda.getStrictStandardDateFormatter())___        _        _        List<IndexRequestBuilder> builders = new ArrayList<>()__        int timeZoneHourOffset = randomIntBetween(-12, 12)__        DateTimeZone timezone = DateTimeZone.forOffsetHours(timeZoneHourOffset)__        DateTime timeZoneStartToday = new DateTime(parser.parse("now/d", System::currentTimeMillis, false, timezone), DateTimeZone.UTC)__        DateTime timeZoneNoonToday = new DateTime(parser.parse("now/d+12h", System::currentTimeMillis, false, timezone), DateTimeZone.UTC)__        builders.add(indexDoc(index, timeZoneStartToday, 1))__        builders.add(indexDoc(index, timeZoneNoonToday, 2))__        indexRandom(true, builders)__        ensureSearchable(index)___        SearchResponse response = null__        _        response = client()_                .prepareSearch(index)_                .setQuery(QueryBuilders.rangeQuery("date").from("now/d").to("now/d").includeLower(true).includeUpper(true).timeZone(timezone.getID()))_                .addAggregation(_                        dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.hours(1)).timeZone(timezone).minDocCount(0)_                                .extendedBounds(new ExtendedBounds("now/d", "now/d+23h"))_                ).execute().actionGet()__        assertSearchResponse(response)___        assertThat("Expected 24 buckets for one day aggregation with hourly interval", response.getHits().getTotalHits(), equalTo(2L))___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(24))___        for (int i = 0_ i < buckets.size()_ i++) {_            Histogram.Bucket bucket = buckets.get(i)__            assertThat(bucket, notNullValue())__            assertThat("InternalBucket " + i + " had wrong key", (DateTime) bucket.getKey(), equalTo(new DateTime(timeZoneStartToday.getMillis() + (i * 60 * 60 * 1000), DateTimeZone.UTC)))__            if (i == 0 || i == 12) {_                assertThat(bucket.getDocCount(), equalTo(1L))__            } else {_                assertThat(bucket.getDocCount(), equalTo(0L))__            }_        }_        internalCluster().wipeIndices(index)__    };test,date,histogram,aggregation,with,hour,interval,timezone,shift,and,extended,bounds,see,https,github,com,elastic,elasticsearch,issues,12278;public,void,test,single,value,field,with,extended,bounds,timezone,throws,exception,string,index,test12278,prepare,create,index,set,settings,settings,builder,put,index,settings,put,index,1,put,index,0,execute,action,get,date,math,parser,parser,new,date,math,parser,joda,get,strict,standard,date,formatter,list,index,request,builder,builders,new,array,list,int,time,zone,hour,offset,random,int,between,12,12,date,time,zone,timezone,date,time,zone,for,offset,hours,time,zone,hour,offset,date,time,time,zone,start,today,new,date,time,parser,parse,now,d,system,current,time,millis,false,timezone,date,time,zone,utc,date,time,time,zone,noon,today,new,date,time,parser,parse,now,d,12h,system,current,time,millis,false,timezone,date,time,zone,utc,builders,add,index,doc,index,time,zone,start,today,1,builders,add,index,doc,index,time,zone,noon,today,2,index,random,true,builders,ensure,searchable,index,search,response,response,null,response,client,prepare,search,index,set,query,query,builders,range,query,date,from,now,d,to,now,d,include,lower,true,include,upper,true,time,zone,timezone,get,id,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,hours,1,time,zone,timezone,min,doc,count,0,extended,bounds,new,extended,bounds,now,d,now,d,23h,execute,action,get,assert,search,response,response,assert,that,expected,24,buckets,for,one,day,aggregation,with,hourly,interval,response,get,hits,get,total,hits,equal,to,2l,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,24,for,int,i,0,i,buckets,size,i,histogram,bucket,bucket,buckets,get,i,assert,that,bucket,not,null,value,assert,that,internal,bucket,i,had,wrong,key,date,time,bucket,get,key,equal,to,new,date,time,time,zone,start,today,get,millis,i,60,60,1000,date,time,zone,utc,if,i,0,i,12,assert,that,bucket,get,doc,count,equal,to,1l,else,assert,that,bucket,get,doc,count,equal,to,0l,internal,cluster,wipe,indices,index
DateHistogramIT -> public void testSingleValueFieldWithExtendedBoundsTimezone() throws Exception;1536314350;Test date histogram aggregation with hour interval, timezone shift and_extended bounds (see https://github.com/elastic/elasticsearch/issues/12278);public void testSingleValueFieldWithExtendedBoundsTimezone() throws Exception {_        String index = "test12278"__        prepareCreate(index)_                .setSettings(Settings.builder().put(indexSettings()).put("index.number_of_shards", 1).put("index.number_of_replicas", 0))_                .execute().actionGet()___        DateMathParser parser = new DateMathParser(Joda.getStrictStandardDateFormatter())___        _        _        List<IndexRequestBuilder> builders = new ArrayList<>()__        int timeZoneHourOffset = randomIntBetween(-12, 12)__        DateTimeZone timezone = DateTimeZone.forOffsetHours(timeZoneHourOffset)__        DateTime timeZoneStartToday = new DateTime(parser.parse("now/d", System::currentTimeMillis, false, timezone), DateTimeZone.UTC)__        DateTime timeZoneNoonToday = new DateTime(parser.parse("now/d+12h", System::currentTimeMillis, false, timezone), DateTimeZone.UTC)__        builders.add(indexDoc(index, timeZoneStartToday, 1))__        builders.add(indexDoc(index, timeZoneNoonToday, 2))__        indexRandom(true, builders)__        ensureSearchable(index)___        SearchResponse response = null__        _        response = client()_                .prepareSearch(index)_                .setQuery(QueryBuilders.rangeQuery("date").from("now/d").to("now/d").includeLower(true).includeUpper(true).timeZone(timezone.getID()))_                .addAggregation(_                        dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.hours(1)).timeZone(timezone).minDocCount(0)_                                .extendedBounds(new ExtendedBounds("now/d", "now/d+23h"))_                ).execute().actionGet()__        assertSearchResponse(response)___        assertThat("Expected 24 buckets for one day aggregation with hourly interval", response.getHits().getTotalHits(), equalTo(2L))___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(24))___        for (int i = 0_ i < buckets.size()_ i++) {_            Histogram.Bucket bucket = buckets.get(i)__            assertThat(bucket, notNullValue())__            assertThat("InternalBucket " + i + " had wrong key", (DateTime) bucket.getKey(), equalTo(new DateTime(timeZoneStartToday.getMillis() + (i * 60 * 60 * 1000), DateTimeZone.UTC)))__            if (i == 0 || i == 12) {_                assertThat(bucket.getDocCount(), equalTo(1L))__            } else {_                assertThat(bucket.getDocCount(), equalTo(0L))__            }_        }_        internalCluster().wipeIndices(index)__    };test,date,histogram,aggregation,with,hour,interval,timezone,shift,and,extended,bounds,see,https,github,com,elastic,elasticsearch,issues,12278;public,void,test,single,value,field,with,extended,bounds,timezone,throws,exception,string,index,test12278,prepare,create,index,set,settings,settings,builder,put,index,settings,put,index,1,put,index,0,execute,action,get,date,math,parser,parser,new,date,math,parser,joda,get,strict,standard,date,formatter,list,index,request,builder,builders,new,array,list,int,time,zone,hour,offset,random,int,between,12,12,date,time,zone,timezone,date,time,zone,for,offset,hours,time,zone,hour,offset,date,time,time,zone,start,today,new,date,time,parser,parse,now,d,system,current,time,millis,false,timezone,date,time,zone,utc,date,time,time,zone,noon,today,new,date,time,parser,parse,now,d,12h,system,current,time,millis,false,timezone,date,time,zone,utc,builders,add,index,doc,index,time,zone,start,today,1,builders,add,index,doc,index,time,zone,noon,today,2,index,random,true,builders,ensure,searchable,index,search,response,response,null,response,client,prepare,search,index,set,query,query,builders,range,query,date,from,now,d,to,now,d,include,lower,true,include,upper,true,time,zone,timezone,get,id,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,hours,1,time,zone,timezone,min,doc,count,0,extended,bounds,new,extended,bounds,now,d,now,d,23h,execute,action,get,assert,search,response,response,assert,that,expected,24,buckets,for,one,day,aggregation,with,hourly,interval,response,get,hits,get,total,hits,equal,to,2l,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,24,for,int,i,0,i,buckets,size,i,histogram,bucket,bucket,buckets,get,i,assert,that,bucket,not,null,value,assert,that,internal,bucket,i,had,wrong,key,date,time,bucket,get,key,equal,to,new,date,time,time,zone,start,today,get,millis,i,60,60,1000,date,time,zone,utc,if,i,0,i,12,assert,that,bucket,get,doc,count,equal,to,1l,else,assert,that,bucket,get,doc,count,equal,to,0l,internal,cluster,wipe,indices,index
DateHistogramIT -> public void testSingleValueFieldWithExtendedBoundsTimezone() throws Exception;1538067637;Test date histogram aggregation with hour interval, timezone shift and_extended bounds (see https://github.com/elastic/elasticsearch/issues/12278);public void testSingleValueFieldWithExtendedBoundsTimezone() throws Exception {_        String index = "test12278"__        prepareCreate(index)_                .setSettings(Settings.builder().put(indexSettings()).put("index.number_of_shards", 1).put("index.number_of_replicas", 0))_                .execute().actionGet()___        DateMathParser parser = Joda.getStrictStandardDateFormatter().toDateMathParser()___        _        _        List<IndexRequestBuilder> builders = new ArrayList<>()__        int timeZoneHourOffset = randomIntBetween(-12, 12)__        DateTimeZone timezone = DateTimeZone.forOffsetHours(timeZoneHourOffset)__        DateTime timeZoneStartToday = new DateTime(parser.parse("now/d", System::currentTimeMillis, false, timezone), DateTimeZone.UTC)__        DateTime timeZoneNoonToday = new DateTime(parser.parse("now/d+12h", System::currentTimeMillis, false, timezone), DateTimeZone.UTC)__        builders.add(indexDoc(index, timeZoneStartToday, 1))__        builders.add(indexDoc(index, timeZoneNoonToday, 2))__        indexRandom(true, builders)__        ensureSearchable(index)___        SearchResponse response = null__        _        response = client()_                .prepareSearch(index)_                .setQuery(QueryBuilders.rangeQuery("date").from("now/d").to("now/d").includeLower(true).includeUpper(true).timeZone(timezone.getID()))_                .addAggregation(_                        dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.hours(1)).timeZone(timezone).minDocCount(0)_                                .extendedBounds(new ExtendedBounds("now/d", "now/d+23h"))_                ).execute().actionGet()__        assertSearchResponse(response)___        assertThat("Expected 24 buckets for one day aggregation with hourly interval", response.getHits().getTotalHits(), equalTo(2L))___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(24))___        for (int i = 0_ i < buckets.size()_ i++) {_            Histogram.Bucket bucket = buckets.get(i)__            assertThat(bucket, notNullValue())__            assertThat("InternalBucket " + i + " had wrong key", (DateTime) bucket.getKey(), equalTo(new DateTime(timeZoneStartToday.getMillis() + (i * 60 * 60 * 1000), DateTimeZone.UTC)))__            if (i == 0 || i == 12) {_                assertThat(bucket.getDocCount(), equalTo(1L))__            } else {_                assertThat(bucket.getDocCount(), equalTo(0L))__            }_        }_        internalCluster().wipeIndices(index)__    };test,date,histogram,aggregation,with,hour,interval,timezone,shift,and,extended,bounds,see,https,github,com,elastic,elasticsearch,issues,12278;public,void,test,single,value,field,with,extended,bounds,timezone,throws,exception,string,index,test12278,prepare,create,index,set,settings,settings,builder,put,index,settings,put,index,1,put,index,0,execute,action,get,date,math,parser,parser,joda,get,strict,standard,date,formatter,to,date,math,parser,list,index,request,builder,builders,new,array,list,int,time,zone,hour,offset,random,int,between,12,12,date,time,zone,timezone,date,time,zone,for,offset,hours,time,zone,hour,offset,date,time,time,zone,start,today,new,date,time,parser,parse,now,d,system,current,time,millis,false,timezone,date,time,zone,utc,date,time,time,zone,noon,today,new,date,time,parser,parse,now,d,12h,system,current,time,millis,false,timezone,date,time,zone,utc,builders,add,index,doc,index,time,zone,start,today,1,builders,add,index,doc,index,time,zone,noon,today,2,index,random,true,builders,ensure,searchable,index,search,response,response,null,response,client,prepare,search,index,set,query,query,builders,range,query,date,from,now,d,to,now,d,include,lower,true,include,upper,true,time,zone,timezone,get,id,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,hours,1,time,zone,timezone,min,doc,count,0,extended,bounds,new,extended,bounds,now,d,now,d,23h,execute,action,get,assert,search,response,response,assert,that,expected,24,buckets,for,one,day,aggregation,with,hourly,interval,response,get,hits,get,total,hits,equal,to,2l,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,24,for,int,i,0,i,buckets,size,i,histogram,bucket,bucket,buckets,get,i,assert,that,bucket,not,null,value,assert,that,internal,bucket,i,had,wrong,key,date,time,bucket,get,key,equal,to,new,date,time,time,zone,start,today,get,millis,i,60,60,1000,date,time,zone,utc,if,i,0,i,12,assert,that,bucket,get,doc,count,equal,to,1l,else,assert,that,bucket,get,doc,count,equal,to,0l,internal,cluster,wipe,indices,index
DateHistogramIT -> public void testSingleValueFieldWithExtendedBoundsTimezone() throws Exception;1541668945;Test date histogram aggregation with hour interval, timezone shift and_extended bounds (see https://github.com/elastic/elasticsearch/issues/12278);public void testSingleValueFieldWithExtendedBoundsTimezone() throws Exception {_        String index = "test12278"__        prepareCreate(index)_                .setSettings(Settings.builder().put(indexSettings()).put("index.number_of_shards", 1).put("index.number_of_replicas", 0))_                .execute().actionGet()___        DateMathParser parser = Joda.getStrictStandardDateFormatter().toDateMathParser()___        _        _        List<IndexRequestBuilder> builders = new ArrayList<>()__        int timeZoneHourOffset = randomIntBetween(-12, 12)__        DateTimeZone timezone = DateTimeZone.forOffsetHours(timeZoneHourOffset)__        DateTime timeZoneStartToday = new DateTime(parser.parse("now/d", System::currentTimeMillis, false, timezone), DateTimeZone.UTC)__        DateTime timeZoneNoonToday = new DateTime(parser.parse("now/d+12h", System::currentTimeMillis, false, timezone), DateTimeZone.UTC)__        builders.add(indexDoc(index, timeZoneStartToday, 1))__        builders.add(indexDoc(index, timeZoneNoonToday, 2))__        indexRandom(true, builders)__        ensureSearchable(index)___        SearchResponse response = null__        _        response = client()_                .prepareSearch(index)_                .setQuery(QueryBuilders.rangeQuery("date").from("now/d").to("now/d").includeLower(true).includeUpper(true).timeZone(timezone.getID()))_                .addAggregation(_                        dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.hours(1)).timeZone(timezone).minDocCount(0)_                                .extendedBounds(new ExtendedBounds("now/d", "now/d+23h"))_                ).execute().actionGet()__        assertSearchResponse(response)___        assertThat("Expected 24 buckets for one day aggregation with hourly interval", response.getHits().getTotalHits(), equalTo(2L))___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(24))___        for (int i = 0_ i < buckets.size()_ i++) {_            Histogram.Bucket bucket = buckets.get(i)__            assertThat(bucket, notNullValue())__            assertThat("InternalBucket " + i + " had wrong key", (DateTime) bucket.getKey(), equalTo(new DateTime(timeZoneStartToday.getMillis() + (i * 60 * 60 * 1000), DateTimeZone.UTC)))__            if (i == 0 || i == 12) {_                assertThat(bucket.getDocCount(), equalTo(1L))__            } else {_                assertThat(bucket.getDocCount(), equalTo(0L))__            }_        }_        internalCluster().wipeIndices(index)__    };test,date,histogram,aggregation,with,hour,interval,timezone,shift,and,extended,bounds,see,https,github,com,elastic,elasticsearch,issues,12278;public,void,test,single,value,field,with,extended,bounds,timezone,throws,exception,string,index,test12278,prepare,create,index,set,settings,settings,builder,put,index,settings,put,index,1,put,index,0,execute,action,get,date,math,parser,parser,joda,get,strict,standard,date,formatter,to,date,math,parser,list,index,request,builder,builders,new,array,list,int,time,zone,hour,offset,random,int,between,12,12,date,time,zone,timezone,date,time,zone,for,offset,hours,time,zone,hour,offset,date,time,time,zone,start,today,new,date,time,parser,parse,now,d,system,current,time,millis,false,timezone,date,time,zone,utc,date,time,time,zone,noon,today,new,date,time,parser,parse,now,d,12h,system,current,time,millis,false,timezone,date,time,zone,utc,builders,add,index,doc,index,time,zone,start,today,1,builders,add,index,doc,index,time,zone,noon,today,2,index,random,true,builders,ensure,searchable,index,search,response,response,null,response,client,prepare,search,index,set,query,query,builders,range,query,date,from,now,d,to,now,d,include,lower,true,include,upper,true,time,zone,timezone,get,id,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,hours,1,time,zone,timezone,min,doc,count,0,extended,bounds,new,extended,bounds,now,d,now,d,23h,execute,action,get,assert,search,response,response,assert,that,expected,24,buckets,for,one,day,aggregation,with,hourly,interval,response,get,hits,get,total,hits,equal,to,2l,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,24,for,int,i,0,i,buckets,size,i,histogram,bucket,bucket,buckets,get,i,assert,that,bucket,not,null,value,assert,that,internal,bucket,i,had,wrong,key,date,time,bucket,get,key,equal,to,new,date,time,time,zone,start,today,get,millis,i,60,60,1000,date,time,zone,utc,if,i,0,i,12,assert,that,bucket,get,doc,count,equal,to,1l,else,assert,that,bucket,get,doc,count,equal,to,0l,internal,cluster,wipe,indices,index
DateHistogramIT -> public void testSingleValueFieldWithExtendedBoundsTimezone() throws Exception;1544035746;Test date histogram aggregation with hour interval, timezone shift and_extended bounds (see https://github.com/elastic/elasticsearch/issues/12278);public void testSingleValueFieldWithExtendedBoundsTimezone() throws Exception {_        String index = "test12278"__        prepareCreate(index)_                .setSettings(Settings.builder().put(indexSettings()).put("index.number_of_shards", 1).put("index.number_of_replicas", 0))_                .execute().actionGet()___        DateMathParser parser = Joda.getStrictStandardDateFormatter().toDateMathParser()___        _        _        List<IndexRequestBuilder> builders = new ArrayList<>()__        int timeZoneHourOffset = randomIntBetween(-12, 12)__        DateTimeZone timezone = DateTimeZone.forOffsetHours(timeZoneHourOffset)__        DateTime timeZoneStartToday = new DateTime(parser.parse("now/d", System::currentTimeMillis, false, timezone), DateTimeZone.UTC)__        DateTime timeZoneNoonToday = new DateTime(parser.parse("now/d+12h", System::currentTimeMillis, false, timezone), DateTimeZone.UTC)__        builders.add(indexDoc(index, timeZoneStartToday, 1))__        builders.add(indexDoc(index, timeZoneNoonToday, 2))__        indexRandom(true, builders)__        ensureSearchable(index)___        SearchResponse response = null__        _        response = client()_                .prepareSearch(index)_                .setQuery(QueryBuilders.rangeQuery("date").from("now/d").to("now/d").includeLower(true).includeUpper(true).timeZone(timezone.getID()))_                .addAggregation(_                        dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.hours(1)).timeZone(timezone).minDocCount(0)_                                .extendedBounds(new ExtendedBounds("now/d", "now/d+23h"))_                ).execute().actionGet()__        assertSearchResponse(response)___        assertThat("Expected 24 buckets for one day aggregation with hourly interval", response.getHits().getTotalHits().value, equalTo(2L))___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(24))___        for (int i = 0_ i < buckets.size()_ i++) {_            Histogram.Bucket bucket = buckets.get(i)__            assertThat(bucket, notNullValue())__            assertThat("InternalBucket " + i + " had wrong key", (DateTime) bucket.getKey(), equalTo(new DateTime(timeZoneStartToday.getMillis() + (i * 60 * 60 * 1000), DateTimeZone.UTC)))__            if (i == 0 || i == 12) {_                assertThat(bucket.getDocCount(), equalTo(1L))__            } else {_                assertThat(bucket.getDocCount(), equalTo(0L))__            }_        }_        internalCluster().wipeIndices(index)__    };test,date,histogram,aggregation,with,hour,interval,timezone,shift,and,extended,bounds,see,https,github,com,elastic,elasticsearch,issues,12278;public,void,test,single,value,field,with,extended,bounds,timezone,throws,exception,string,index,test12278,prepare,create,index,set,settings,settings,builder,put,index,settings,put,index,1,put,index,0,execute,action,get,date,math,parser,parser,joda,get,strict,standard,date,formatter,to,date,math,parser,list,index,request,builder,builders,new,array,list,int,time,zone,hour,offset,random,int,between,12,12,date,time,zone,timezone,date,time,zone,for,offset,hours,time,zone,hour,offset,date,time,time,zone,start,today,new,date,time,parser,parse,now,d,system,current,time,millis,false,timezone,date,time,zone,utc,date,time,time,zone,noon,today,new,date,time,parser,parse,now,d,12h,system,current,time,millis,false,timezone,date,time,zone,utc,builders,add,index,doc,index,time,zone,start,today,1,builders,add,index,doc,index,time,zone,noon,today,2,index,random,true,builders,ensure,searchable,index,search,response,response,null,response,client,prepare,search,index,set,query,query,builders,range,query,date,from,now,d,to,now,d,include,lower,true,include,upper,true,time,zone,timezone,get,id,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,hours,1,time,zone,timezone,min,doc,count,0,extended,bounds,new,extended,bounds,now,d,now,d,23h,execute,action,get,assert,search,response,response,assert,that,expected,24,buckets,for,one,day,aggregation,with,hourly,interval,response,get,hits,get,total,hits,value,equal,to,2l,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,24,for,int,i,0,i,buckets,size,i,histogram,bucket,bucket,buckets,get,i,assert,that,bucket,not,null,value,assert,that,internal,bucket,i,had,wrong,key,date,time,bucket,get,key,equal,to,new,date,time,time,zone,start,today,get,millis,i,60,60,1000,date,time,zone,utc,if,i,0,i,12,assert,that,bucket,get,doc,count,equal,to,1l,else,assert,that,bucket,get,doc,count,equal,to,0l,internal,cluster,wipe,indices,index
DateHistogramIT -> public void testSingleValueFieldWithExtendedBoundsTimezone() throws Exception;1544110272;Test date histogram aggregation with hour interval, timezone shift and_extended bounds (see https://github.com/elastic/elasticsearch/issues/12278);public void testSingleValueFieldWithExtendedBoundsTimezone() throws Exception {_        String index = "test12278"__        prepareCreate(index)_                .setSettings(Settings.builder().put(indexSettings()).put("index.number_of_shards", 1).put("index.number_of_replicas", 0))_                .get()___        DateMathParser parser = Joda.getStrictStandardDateFormatter().toDateMathParser()___        _        _        List<IndexRequestBuilder> builders = new ArrayList<>()__        int timeZoneHourOffset = randomIntBetween(-12, 12)__        DateTimeZone timezone = DateTimeZone.forOffsetHours(timeZoneHourOffset)__        DateTime timeZoneStartToday = new DateTime(parser.parse("now/d", System::currentTimeMillis, false, timezone), DateTimeZone.UTC)__        DateTime timeZoneNoonToday = new DateTime(parser.parse("now/d+12h", System::currentTimeMillis, false, timezone), DateTimeZone.UTC)__        builders.add(indexDoc(index, timeZoneStartToday, 1))__        builders.add(indexDoc(index, timeZoneNoonToday, 2))__        indexRandom(true, builders)__        ensureSearchable(index)___        SearchResponse response = null__        _        response = client()_                .prepareSearch(index)_                .setQuery(QueryBuilders.rangeQuery("date")_                        .from("now/d").to("now/d").includeLower(true).includeUpper(true).timeZone(timezone.getID()))_                .addAggregation(_                        dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.hours(1))_                                .timeZone(timezone).minDocCount(0).extendedBounds(new ExtendedBounds("now/d", "now/d+23h"))_                ).get()__        assertSearchResponse(response)___        assertThat("Expected 24 buckets for one day aggregation with hourly interval", response.getHits().getTotalHits().value,_                equalTo(2L))___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(24))___        for (int i = 0_ i < buckets.size()_ i++) {_            Histogram.Bucket bucket = buckets.get(i)__            assertThat(bucket, notNullValue())__            assertThat("InternalBucket " + i + " had wrong key", (DateTime) bucket.getKey(),_                    equalTo(new DateTime(timeZoneStartToday.getMillis() + (i * 60 * 60 * 1000), DateTimeZone.UTC)))__            if (i == 0 || i == 12) {_                assertThat(bucket.getDocCount(), equalTo(1L))__            } else {_                assertThat(bucket.getDocCount(), equalTo(0L))__            }_        }_        internalCluster().wipeIndices(index)__    };test,date,histogram,aggregation,with,hour,interval,timezone,shift,and,extended,bounds,see,https,github,com,elastic,elasticsearch,issues,12278;public,void,test,single,value,field,with,extended,bounds,timezone,throws,exception,string,index,test12278,prepare,create,index,set,settings,settings,builder,put,index,settings,put,index,1,put,index,0,get,date,math,parser,parser,joda,get,strict,standard,date,formatter,to,date,math,parser,list,index,request,builder,builders,new,array,list,int,time,zone,hour,offset,random,int,between,12,12,date,time,zone,timezone,date,time,zone,for,offset,hours,time,zone,hour,offset,date,time,time,zone,start,today,new,date,time,parser,parse,now,d,system,current,time,millis,false,timezone,date,time,zone,utc,date,time,time,zone,noon,today,new,date,time,parser,parse,now,d,12h,system,current,time,millis,false,timezone,date,time,zone,utc,builders,add,index,doc,index,time,zone,start,today,1,builders,add,index,doc,index,time,zone,noon,today,2,index,random,true,builders,ensure,searchable,index,search,response,response,null,response,client,prepare,search,index,set,query,query,builders,range,query,date,from,now,d,to,now,d,include,lower,true,include,upper,true,time,zone,timezone,get,id,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,hours,1,time,zone,timezone,min,doc,count,0,extended,bounds,new,extended,bounds,now,d,now,d,23h,get,assert,search,response,response,assert,that,expected,24,buckets,for,one,day,aggregation,with,hourly,interval,response,get,hits,get,total,hits,value,equal,to,2l,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,24,for,int,i,0,i,buckets,size,i,histogram,bucket,bucket,buckets,get,i,assert,that,bucket,not,null,value,assert,that,internal,bucket,i,had,wrong,key,date,time,bucket,get,key,equal,to,new,date,time,time,zone,start,today,get,millis,i,60,60,1000,date,time,zone,utc,if,i,0,i,12,assert,that,bucket,get,doc,count,equal,to,1l,else,assert,that,bucket,get,doc,count,equal,to,0l,internal,cluster,wipe,indices,index
DateHistogramIT -> public void testSingleValueFieldWithExtendedBoundsTimezone() throws Exception;1544232221;Test date histogram aggregation with hour interval, timezone shift and_extended bounds (see https://github.com/elastic/elasticsearch/issues/12278);public void testSingleValueFieldWithExtendedBoundsTimezone() throws Exception {_        String index = "test12278"__        prepareCreate(index)_                .setSettings(Settings.builder().put(indexSettings()).put("index.number_of_shards", 1).put("index.number_of_replicas", 0))_                .get()___        DateMathParser parser = Joda.getStrictStandardDateFormatter().toDateMathParser()___        _        _        List<IndexRequestBuilder> builders = new ArrayList<>()__        int timeZoneHourOffset = randomIntBetween(-12, 12)__        DateTimeZone timezone = DateTimeZone.forOffsetHours(timeZoneHourOffset)__        DateTime timeZoneStartToday = new DateTime(parser.parse("now/d", System::currentTimeMillis, false, timezone), DateTimeZone.UTC)__        DateTime timeZoneNoonToday = new DateTime(parser.parse("now/d+12h", System::currentTimeMillis, false, timezone), DateTimeZone.UTC)__        builders.add(indexDoc(index, timeZoneStartToday, 1))__        builders.add(indexDoc(index, timeZoneNoonToday, 2))__        indexRandom(true, builders)__        ensureSearchable(index)___        SearchResponse response = null__        _        response = client()_                .prepareSearch(index)_                .setQuery(QueryBuilders.rangeQuery("date")_                        .from("now/d").to("now/d").includeLower(true).includeUpper(true).timeZone(timezone.getID()))_                .addAggregation(_                        dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.hours(1))_                                .timeZone(timezone).minDocCount(0).extendedBounds(new ExtendedBounds("now/d", "now/d+23h"))_                ).get()__        assertSearchResponse(response)___        assertThat("Expected 24 buckets for one day aggregation with hourly interval", response.getHits().getTotalHits().value,_                equalTo(2L))___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(24))___        for (int i = 0_ i < buckets.size()_ i++) {_            Histogram.Bucket bucket = buckets.get(i)__            assertThat(bucket, notNullValue())__            assertThat("InternalBucket " + i + " had wrong key", (DateTime) bucket.getKey(),_                    equalTo(new DateTime(timeZoneStartToday.getMillis() + (i * 60 * 60 * 1000), DateTimeZone.UTC)))__            if (i == 0 || i == 12) {_                assertThat(bucket.getDocCount(), equalTo(1L))__            } else {_                assertThat(bucket.getDocCount(), equalTo(0L))__            }_        }_        internalCluster().wipeIndices(index)__    };test,date,histogram,aggregation,with,hour,interval,timezone,shift,and,extended,bounds,see,https,github,com,elastic,elasticsearch,issues,12278;public,void,test,single,value,field,with,extended,bounds,timezone,throws,exception,string,index,test12278,prepare,create,index,set,settings,settings,builder,put,index,settings,put,index,1,put,index,0,get,date,math,parser,parser,joda,get,strict,standard,date,formatter,to,date,math,parser,list,index,request,builder,builders,new,array,list,int,time,zone,hour,offset,random,int,between,12,12,date,time,zone,timezone,date,time,zone,for,offset,hours,time,zone,hour,offset,date,time,time,zone,start,today,new,date,time,parser,parse,now,d,system,current,time,millis,false,timezone,date,time,zone,utc,date,time,time,zone,noon,today,new,date,time,parser,parse,now,d,12h,system,current,time,millis,false,timezone,date,time,zone,utc,builders,add,index,doc,index,time,zone,start,today,1,builders,add,index,doc,index,time,zone,noon,today,2,index,random,true,builders,ensure,searchable,index,search,response,response,null,response,client,prepare,search,index,set,query,query,builders,range,query,date,from,now,d,to,now,d,include,lower,true,include,upper,true,time,zone,timezone,get,id,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,hours,1,time,zone,timezone,min,doc,count,0,extended,bounds,new,extended,bounds,now,d,now,d,23h,get,assert,search,response,response,assert,that,expected,24,buckets,for,one,day,aggregation,with,hourly,interval,response,get,hits,get,total,hits,value,equal,to,2l,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,24,for,int,i,0,i,buckets,size,i,histogram,bucket,bucket,buckets,get,i,assert,that,bucket,not,null,value,assert,that,internal,bucket,i,had,wrong,key,date,time,bucket,get,key,equal,to,new,date,time,time,zone,start,today,get,millis,i,60,60,1000,date,time,zone,utc,if,i,0,i,12,assert,that,bucket,get,doc,count,equal,to,1l,else,assert,that,bucket,get,doc,count,equal,to,0l,internal,cluster,wipe,indices,index
DateHistogramIT -> public void testSingleValueFieldWithExtendedBoundsTimezone() throws Exception;1544600864;Test date histogram aggregation with hour interval, timezone shift and_extended bounds (see https://github.com/elastic/elasticsearch/issues/12278);public void testSingleValueFieldWithExtendedBoundsTimezone() throws Exception {_        String index = "test12278"__        prepareCreate(index)_                .setSettings(Settings.builder().put(indexSettings()).put("index.number_of_shards", 1).put("index.number_of_replicas", 0))_                .get()___        DateMathParser parser = Joda.getStrictStandardDateFormatter().toDateMathParser()___        _        _        List<IndexRequestBuilder> builders = new ArrayList<>()__        int timeZoneHourOffset = randomIntBetween(-12, 12)__        DateTimeZone timezone = DateTimeZone.forOffsetHours(timeZoneHourOffset)__        DateTime timeZoneStartToday = new DateTime(parser.parse("now/d", System::currentTimeMillis, false, timezone), DateTimeZone.UTC)__        DateTime timeZoneNoonToday = new DateTime(parser.parse("now/d+12h", System::currentTimeMillis, false, timezone), DateTimeZone.UTC)__        builders.add(indexDoc(index, timeZoneStartToday, 1))__        builders.add(indexDoc(index, timeZoneNoonToday, 2))__        indexRandom(true, builders)__        ensureSearchable(index)___        SearchResponse response = null__        _        response = client()_                .prepareSearch(index)_                .setQuery(QueryBuilders.rangeQuery("date")_                        .from("now/d").to("now/d").includeLower(true).includeUpper(true).timeZone(timezone.getID()))_                .addAggregation(_                        dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.hours(1))_                                .timeZone(timezone).minDocCount(0).extendedBounds(new ExtendedBounds("now/d", "now/d+23h"))_                ).get()__        assertSearchResponse(response)___        assertThat("Expected 24 buckets for one day aggregation with hourly interval", response.getHits().getTotalHits().value,_                equalTo(2L))___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(24))___        for (int i = 0_ i < buckets.size()_ i++) {_            Histogram.Bucket bucket = buckets.get(i)__            assertThat(bucket, notNullValue())__            assertThat("InternalBucket " + i + " had wrong key", (DateTime) bucket.getKey(),_                    equalTo(new DateTime(timeZoneStartToday.getMillis() + (i * 60 * 60 * 1000), DateTimeZone.UTC)))__            if (i == 0 || i == 12) {_                assertThat(bucket.getDocCount(), equalTo(1L))__            } else {_                assertThat(bucket.getDocCount(), equalTo(0L))__            }_        }_        internalCluster().wipeIndices(index)__    };test,date,histogram,aggregation,with,hour,interval,timezone,shift,and,extended,bounds,see,https,github,com,elastic,elasticsearch,issues,12278;public,void,test,single,value,field,with,extended,bounds,timezone,throws,exception,string,index,test12278,prepare,create,index,set,settings,settings,builder,put,index,settings,put,index,1,put,index,0,get,date,math,parser,parser,joda,get,strict,standard,date,formatter,to,date,math,parser,list,index,request,builder,builders,new,array,list,int,time,zone,hour,offset,random,int,between,12,12,date,time,zone,timezone,date,time,zone,for,offset,hours,time,zone,hour,offset,date,time,time,zone,start,today,new,date,time,parser,parse,now,d,system,current,time,millis,false,timezone,date,time,zone,utc,date,time,time,zone,noon,today,new,date,time,parser,parse,now,d,12h,system,current,time,millis,false,timezone,date,time,zone,utc,builders,add,index,doc,index,time,zone,start,today,1,builders,add,index,doc,index,time,zone,noon,today,2,index,random,true,builders,ensure,searchable,index,search,response,response,null,response,client,prepare,search,index,set,query,query,builders,range,query,date,from,now,d,to,now,d,include,lower,true,include,upper,true,time,zone,timezone,get,id,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,hours,1,time,zone,timezone,min,doc,count,0,extended,bounds,new,extended,bounds,now,d,now,d,23h,get,assert,search,response,response,assert,that,expected,24,buckets,for,one,day,aggregation,with,hourly,interval,response,get,hits,get,total,hits,value,equal,to,2l,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,24,for,int,i,0,i,buckets,size,i,histogram,bucket,bucket,buckets,get,i,assert,that,bucket,not,null,value,assert,that,internal,bucket,i,had,wrong,key,date,time,bucket,get,key,equal,to,new,date,time,time,zone,start,today,get,millis,i,60,60,1000,date,time,zone,utc,if,i,0,i,12,assert,that,bucket,get,doc,count,equal,to,1l,else,assert,that,bucket,get,doc,count,equal,to,0l,internal,cluster,wipe,indices,index
DateHistogramIT -> public void testSingleValueFieldWithExtendedBoundsTimezone() throws Exception;1548236405;Test date histogram aggregation with hour interval, timezone shift and_extended bounds (see https://github.com/elastic/elasticsearch/issues/12278);public void testSingleValueFieldWithExtendedBoundsTimezone() throws Exception {_        String index = "test12278"__        prepareCreate(index)_                .setSettings(Settings.builder().put(indexSettings()).put("index.number_of_shards", 1).put("index.number_of_replicas", 0))_                .get()___        DateMathParser parser = DateFormatter.forPattern("yyyy/MM/dd HH:mm:ss||yyyy/MM/dd||epoch_millis").toDateMathParser()___        _        _        List<IndexRequestBuilder> builders = new ArrayList<>()__        int timeZoneHourOffset = randomIntBetween(-12, 12)__        ZoneId timezone = ZoneOffset.ofHours(timeZoneHourOffset)__        ZonedDateTime timeZoneStartToday = parser.parse("now/d", System::currentTimeMillis, false, timezone).atZone(ZoneOffset.UTC)__        ZonedDateTime timeZoneNoonToday = parser.parse("now/d+12h", System::currentTimeMillis, false, timezone).atZone(ZoneOffset.UTC)__        builders.add(indexDoc(index, timeZoneStartToday, 1))__        builders.add(indexDoc(index, timeZoneNoonToday, 2))__        indexRandom(true, builders)__        ensureSearchable(index)___        SearchResponse response = null__        _        response = client()_                .prepareSearch(index)_                .setQuery(QueryBuilders.rangeQuery("date")_                    .from("now/d").to("now/d").includeLower(true).includeUpper(true).timeZone(timezone.getId()))_                .addAggregation(_                        dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.hours(1))_                                .timeZone(timezone).minDocCount(0).extendedBounds(new ExtendedBounds("now/d", "now/d+23h"))_                ).get()__        assertSearchResponse(response)___        assertThat("Expected 24 buckets for one day aggregation with hourly interval", response.getHits().getTotalHits().value,_                equalTo(2L))___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(24))___        for (int i = 0_ i < buckets.size()_ i++) {_            Histogram.Bucket bucket = buckets.get(i)__            assertThat(bucket, notNullValue())__            ZonedDateTime zonedDateTime = timeZoneStartToday.plus(i * 60 * 60 * 1000, ChronoUnit.MILLIS)__            assertThat("InternalBucket " + i + " had wrong key", (ZonedDateTime) bucket.getKey(), equalTo(zonedDateTime))__            if (i == 0 || i == 12) {_                assertThat(bucket.getDocCount(), equalTo(1L))__            } else {_                assertThat(bucket.getDocCount(), equalTo(0L))__            }_        }_        internalCluster().wipeIndices(index)__    };test,date,histogram,aggregation,with,hour,interval,timezone,shift,and,extended,bounds,see,https,github,com,elastic,elasticsearch,issues,12278;public,void,test,single,value,field,with,extended,bounds,timezone,throws,exception,string,index,test12278,prepare,create,index,set,settings,settings,builder,put,index,settings,put,index,1,put,index,0,get,date,math,parser,parser,date,formatter,for,pattern,yyyy,mm,dd,hh,mm,ss,yyyy,mm,dd,to,date,math,parser,list,index,request,builder,builders,new,array,list,int,time,zone,hour,offset,random,int,between,12,12,zone,id,timezone,zone,offset,of,hours,time,zone,hour,offset,zoned,date,time,time,zone,start,today,parser,parse,now,d,system,current,time,millis,false,timezone,at,zone,zone,offset,utc,zoned,date,time,time,zone,noon,today,parser,parse,now,d,12h,system,current,time,millis,false,timezone,at,zone,zone,offset,utc,builders,add,index,doc,index,time,zone,start,today,1,builders,add,index,doc,index,time,zone,noon,today,2,index,random,true,builders,ensure,searchable,index,search,response,response,null,response,client,prepare,search,index,set,query,query,builders,range,query,date,from,now,d,to,now,d,include,lower,true,include,upper,true,time,zone,timezone,get,id,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,hours,1,time,zone,timezone,min,doc,count,0,extended,bounds,new,extended,bounds,now,d,now,d,23h,get,assert,search,response,response,assert,that,expected,24,buckets,for,one,day,aggregation,with,hourly,interval,response,get,hits,get,total,hits,value,equal,to,2l,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,24,for,int,i,0,i,buckets,size,i,histogram,bucket,bucket,buckets,get,i,assert,that,bucket,not,null,value,zoned,date,time,zoned,date,time,time,zone,start,today,plus,i,60,60,1000,chrono,unit,millis,assert,that,internal,bucket,i,had,wrong,key,zoned,date,time,bucket,get,key,equal,to,zoned,date,time,if,i,0,i,12,assert,that,bucket,get,doc,count,equal,to,1l,else,assert,that,bucket,get,doc,count,equal,to,0l,internal,cluster,wipe,indices,index
DateHistogramIT -> public void testSingleValueFieldWithExtendedBoundsTimezone() throws Exception;1548921340;Test date histogram aggregation with hour interval, timezone shift and_extended bounds (see https://github.com/elastic/elasticsearch/issues/12278);public void testSingleValueFieldWithExtendedBoundsTimezone() throws Exception {_        String index = "test12278"__        prepareCreate(index)_                .setSettings(Settings.builder().put(indexSettings()).put("index.number_of_shards", 1).put("index.number_of_replicas", 0))_                .get()___        DateMathParser parser = DateFormatter.forPattern("yyyy/MM/dd HH:mm:ss||yyyy/MM/dd||epoch_millis").toDateMathParser()___        _        _        List<IndexRequestBuilder> builders = new ArrayList<>()__        int timeZoneHourOffset = randomIntBetween(-12, 12)__        ZoneId timezone = ZoneOffset.ofHours(timeZoneHourOffset)__        ZonedDateTime timeZoneStartToday = parser.parse("now/d", System::currentTimeMillis, false, timezone).atZone(ZoneOffset.UTC)__        ZonedDateTime timeZoneNoonToday = parser.parse("now/d+12h", System::currentTimeMillis, false, timezone).atZone(ZoneOffset.UTC)__        builders.add(indexDoc(index, timeZoneStartToday, 1))__        builders.add(indexDoc(index, timeZoneNoonToday, 2))__        indexRandom(true, builders)__        ensureSearchable(index)___        SearchResponse response = null__        _        response = client()_                .prepareSearch(index)_                .setQuery(QueryBuilders.rangeQuery("date")_                    .from("now/d").to("now/d").includeLower(true).includeUpper(true).timeZone(timezone.getId()))_                .addAggregation(_                        dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.hours(1))_                                .timeZone(timezone).minDocCount(0).extendedBounds(new ExtendedBounds("now/d", "now/d+23h"))_                ).get()__        assertSearchResponse(response)___        assertThat("Expected 24 buckets for one day aggregation with hourly interval", response.getHits().getTotalHits().value,_                equalTo(2L))___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(24))___        for (int i = 0_ i < buckets.size()_ i++) {_            Histogram.Bucket bucket = buckets.get(i)__            assertThat(bucket, notNullValue())__            ZonedDateTime zonedDateTime = timeZoneStartToday.plus(i * 60 * 60 * 1000, ChronoUnit.MILLIS)__            assertThat("InternalBucket " + i + " had wrong key", (ZonedDateTime) bucket.getKey(), equalTo(zonedDateTime))__            if (i == 0 || i == 12) {_                assertThat(bucket.getDocCount(), equalTo(1L))__            } else {_                assertThat(bucket.getDocCount(), equalTo(0L))__            }_        }_        internalCluster().wipeIndices(index)__    };test,date,histogram,aggregation,with,hour,interval,timezone,shift,and,extended,bounds,see,https,github,com,elastic,elasticsearch,issues,12278;public,void,test,single,value,field,with,extended,bounds,timezone,throws,exception,string,index,test12278,prepare,create,index,set,settings,settings,builder,put,index,settings,put,index,1,put,index,0,get,date,math,parser,parser,date,formatter,for,pattern,yyyy,mm,dd,hh,mm,ss,yyyy,mm,dd,to,date,math,parser,list,index,request,builder,builders,new,array,list,int,time,zone,hour,offset,random,int,between,12,12,zone,id,timezone,zone,offset,of,hours,time,zone,hour,offset,zoned,date,time,time,zone,start,today,parser,parse,now,d,system,current,time,millis,false,timezone,at,zone,zone,offset,utc,zoned,date,time,time,zone,noon,today,parser,parse,now,d,12h,system,current,time,millis,false,timezone,at,zone,zone,offset,utc,builders,add,index,doc,index,time,zone,start,today,1,builders,add,index,doc,index,time,zone,noon,today,2,index,random,true,builders,ensure,searchable,index,search,response,response,null,response,client,prepare,search,index,set,query,query,builders,range,query,date,from,now,d,to,now,d,include,lower,true,include,upper,true,time,zone,timezone,get,id,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,hours,1,time,zone,timezone,min,doc,count,0,extended,bounds,new,extended,bounds,now,d,now,d,23h,get,assert,search,response,response,assert,that,expected,24,buckets,for,one,day,aggregation,with,hourly,interval,response,get,hits,get,total,hits,value,equal,to,2l,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,24,for,int,i,0,i,buckets,size,i,histogram,bucket,bucket,buckets,get,i,assert,that,bucket,not,null,value,zoned,date,time,zoned,date,time,time,zone,start,today,plus,i,60,60,1000,chrono,unit,millis,assert,that,internal,bucket,i,had,wrong,key,zoned,date,time,bucket,get,key,equal,to,zoned,date,time,if,i,0,i,12,assert,that,bucket,get,doc,count,equal,to,1l,else,assert,that,bucket,get,doc,count,equal,to,0l,internal,cluster,wipe,indices,index
DateHistogramIT -> public void testSingleValueFieldWithExtendedBoundsTimezone() throws Exception;1550743790;Test date histogram aggregation with hour interval, timezone shift and_extended bounds (see https://github.com/elastic/elasticsearch/issues/12278);public void testSingleValueFieldWithExtendedBoundsTimezone() throws Exception {_        String index = "test12278"__        prepareCreate(index)_                .setSettings(Settings.builder().put(indexSettings()).put("index.number_of_shards", 1).put("index.number_of_replicas", 0))_                .get()___        DateMathParser parser = DateFormatter.forPattern("yyyy/MM/dd HH:mm:ss||yyyy/MM/dd||epoch_millis").toDateMathParser()___        _        _        List<IndexRequestBuilder> builders = new ArrayList<>()__        int timeZoneHourOffset = randomIntBetween(-12, 12)__        ZoneId timezone = ZoneOffset.ofHours(timeZoneHourOffset)__        ZonedDateTime timeZoneStartToday = parser.parse("now/d", System::currentTimeMillis, false, timezone).atZone(ZoneOffset.UTC)__        ZonedDateTime timeZoneNoonToday = parser.parse("now/d+12h", System::currentTimeMillis, false, timezone).atZone(ZoneOffset.UTC)__        builders.add(indexDoc(index, timeZoneStartToday, 1))__        builders.add(indexDoc(index, timeZoneNoonToday, 2))__        indexRandom(true, builders)__        ensureSearchable(index)___        SearchResponse response = null__        _        response = client()_                .prepareSearch(index)_                .setQuery(QueryBuilders.rangeQuery("date")_                    .from("now/d").to("now/d").includeLower(true).includeUpper(true).timeZone(timezone.getId()))_                .addAggregation(_                        dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.hours(1))_                                .timeZone(timezone).minDocCount(0).extendedBounds(new ExtendedBounds("now/d", "now/d+23h"))_                ).get()__        assertSearchResponse(response)___        assertThat("Expected 24 buckets for one day aggregation with hourly interval", response.getHits().getTotalHits().value,_                equalTo(2L))___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(24))___        for (int i = 0_ i < buckets.size()_ i++) {_            Histogram.Bucket bucket = buckets.get(i)__            assertThat(bucket, notNullValue())__            ZonedDateTime zonedDateTime = timeZoneStartToday.plus(i * 60 * 60 * 1000, ChronoUnit.MILLIS)__            assertThat("InternalBucket " + i + " had wrong key", (ZonedDateTime) bucket.getKey(), equalTo(zonedDateTime))__            if (i == 0 || i == 12) {_                assertThat(bucket.getDocCount(), equalTo(1L))__            } else {_                assertThat(bucket.getDocCount(), equalTo(0L))__            }_        }_        internalCluster().wipeIndices(index)__    };test,date,histogram,aggregation,with,hour,interval,timezone,shift,and,extended,bounds,see,https,github,com,elastic,elasticsearch,issues,12278;public,void,test,single,value,field,with,extended,bounds,timezone,throws,exception,string,index,test12278,prepare,create,index,set,settings,settings,builder,put,index,settings,put,index,1,put,index,0,get,date,math,parser,parser,date,formatter,for,pattern,yyyy,mm,dd,hh,mm,ss,yyyy,mm,dd,to,date,math,parser,list,index,request,builder,builders,new,array,list,int,time,zone,hour,offset,random,int,between,12,12,zone,id,timezone,zone,offset,of,hours,time,zone,hour,offset,zoned,date,time,time,zone,start,today,parser,parse,now,d,system,current,time,millis,false,timezone,at,zone,zone,offset,utc,zoned,date,time,time,zone,noon,today,parser,parse,now,d,12h,system,current,time,millis,false,timezone,at,zone,zone,offset,utc,builders,add,index,doc,index,time,zone,start,today,1,builders,add,index,doc,index,time,zone,noon,today,2,index,random,true,builders,ensure,searchable,index,search,response,response,null,response,client,prepare,search,index,set,query,query,builders,range,query,date,from,now,d,to,now,d,include,lower,true,include,upper,true,time,zone,timezone,get,id,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,hours,1,time,zone,timezone,min,doc,count,0,extended,bounds,new,extended,bounds,now,d,now,d,23h,get,assert,search,response,response,assert,that,expected,24,buckets,for,one,day,aggregation,with,hourly,interval,response,get,hits,get,total,hits,value,equal,to,2l,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,24,for,int,i,0,i,buckets,size,i,histogram,bucket,bucket,buckets,get,i,assert,that,bucket,not,null,value,zoned,date,time,zoned,date,time,time,zone,start,today,plus,i,60,60,1000,chrono,unit,millis,assert,that,internal,bucket,i,had,wrong,key,zoned,date,time,bucket,get,key,equal,to,zoned,date,time,if,i,0,i,12,assert,that,bucket,get,doc,count,equal,to,1l,else,assert,that,bucket,get,doc,count,equal,to,0l,internal,cluster,wipe,indices,index
DateHistogramIT -> public void testExceptionOnNegativeInterval();1524684173;see issue #9634, negative dateHistogramInterval in date_histogram should raise exception;public void testExceptionOnNegativeInterval() {_        try {_            client().prepareSearch("idx")_                    .addAggregation(dateHistogram("histo").field("date").interval(-TimeUnit.DAYS.toMillis(1)).minDocCount(0)).execute()_                    .actionGet()__            fail()__        } catch (IllegalArgumentException e) {_            assertThat(e.toString(), containsString("[interval] must be 1 or greater for histogram aggregation [histo]"))__        }_    };see,issue,9634,negative,date,histogram,interval,in,should,raise,exception;public,void,test,exception,on,negative,interval,try,client,prepare,search,idx,add,aggregation,date,histogram,histo,field,date,interval,time,unit,days,to,millis,1,min,doc,count,0,execute,action,get,fail,catch,illegal,argument,exception,e,assert,that,e,to,string,contains,string,interval,must,be,1,or,greater,for,histogram,aggregation,histo
DateHistogramIT -> public void testExceptionOnNegativeInterval();1529487105;see issue #9634, negative dateHistogramInterval in date_histogram should raise exception;public void testExceptionOnNegativeInterval() {_        try {_            client().prepareSearch("idx")_                    .addAggregation(dateHistogram("histo").field("date").interval(-TimeUnit.DAYS.toMillis(1)).minDocCount(0)).execute()_                    .actionGet()__            fail()__        } catch (IllegalArgumentException e) {_            assertThat(e.toString(), containsString("[interval] must be 1 or greater for histogram aggregation [histo]"))__        }_    };see,issue,9634,negative,date,histogram,interval,in,should,raise,exception;public,void,test,exception,on,negative,interval,try,client,prepare,search,idx,add,aggregation,date,histogram,histo,field,date,interval,time,unit,days,to,millis,1,min,doc,count,0,execute,action,get,fail,catch,illegal,argument,exception,e,assert,that,e,to,string,contains,string,interval,must,be,1,or,greater,for,histogram,aggregation,histo
DateHistogramIT -> public void testExceptionOnNegativeInterval();1531179852;see issue #9634, negative dateHistogramInterval in date_histogram should raise exception;public void testExceptionOnNegativeInterval() {_        try {_            client().prepareSearch("idx")_                    .addAggregation(dateHistogram("histo").field("date").interval(-TimeUnit.DAYS.toMillis(1)).minDocCount(0)).execute()_                    .actionGet()__            fail()__        } catch (IllegalArgumentException e) {_            assertThat(e.toString(), containsString("[interval] must be 1 or greater for histogram aggregation [histo]"))__        }_    };see,issue,9634,negative,date,histogram,interval,in,should,raise,exception;public,void,test,exception,on,negative,interval,try,client,prepare,search,idx,add,aggregation,date,histogram,histo,field,date,interval,time,unit,days,to,millis,1,min,doc,count,0,execute,action,get,fail,catch,illegal,argument,exception,e,assert,that,e,to,string,contains,string,interval,must,be,1,or,greater,for,histogram,aggregation,histo
DateHistogramIT -> public void testExceptionOnNegativeInterval();1536314350;see issue #9634, negative dateHistogramInterval in date_histogram should raise exception;public void testExceptionOnNegativeInterval() {_        try {_            client().prepareSearch("idx")_                    .addAggregation(dateHistogram("histo").field("date").interval(-TimeUnit.DAYS.toMillis(1)).minDocCount(0)).execute()_                    .actionGet()__            fail()__        } catch (IllegalArgumentException e) {_            assertThat(e.toString(), containsString("[interval] must be 1 or greater for histogram aggregation [histo]"))__        }_    };see,issue,9634,negative,date,histogram,interval,in,should,raise,exception;public,void,test,exception,on,negative,interval,try,client,prepare,search,idx,add,aggregation,date,histogram,histo,field,date,interval,time,unit,days,to,millis,1,min,doc,count,0,execute,action,get,fail,catch,illegal,argument,exception,e,assert,that,e,to,string,contains,string,interval,must,be,1,or,greater,for,histogram,aggregation,histo
DateHistogramIT -> public void testExceptionOnNegativeInterval();1538067637;see issue #9634, negative dateHistogramInterval in date_histogram should raise exception;public void testExceptionOnNegativeInterval() {_        try {_            client().prepareSearch("idx")_                    .addAggregation(dateHistogram("histo").field("date").interval(-TimeUnit.DAYS.toMillis(1)).minDocCount(0)).execute()_                    .actionGet()__            fail()__        } catch (IllegalArgumentException e) {_            assertThat(e.toString(), containsString("[interval] must be 1 or greater for histogram aggregation [histo]"))__        }_    };see,issue,9634,negative,date,histogram,interval,in,should,raise,exception;public,void,test,exception,on,negative,interval,try,client,prepare,search,idx,add,aggregation,date,histogram,histo,field,date,interval,time,unit,days,to,millis,1,min,doc,count,0,execute,action,get,fail,catch,illegal,argument,exception,e,assert,that,e,to,string,contains,string,interval,must,be,1,or,greater,for,histogram,aggregation,histo
DateHistogramIT -> public void testExceptionOnNegativeInterval();1541668945;see issue #9634, negative dateHistogramInterval in date_histogram should raise exception;public void testExceptionOnNegativeInterval() {_        try {_            client().prepareSearch("idx")_                    .addAggregation(dateHistogram("histo").field("date").interval(-TimeUnit.DAYS.toMillis(1)).minDocCount(0)).execute()_                    .actionGet()__            fail()__        } catch (IllegalArgumentException e) {_            assertThat(e.toString(), containsString("[interval] must be 1 or greater for histogram aggregation [histo]"))__        }_    };see,issue,9634,negative,date,histogram,interval,in,should,raise,exception;public,void,test,exception,on,negative,interval,try,client,prepare,search,idx,add,aggregation,date,histogram,histo,field,date,interval,time,unit,days,to,millis,1,min,doc,count,0,execute,action,get,fail,catch,illegal,argument,exception,e,assert,that,e,to,string,contains,string,interval,must,be,1,or,greater,for,histogram,aggregation,histo
DateHistogramIT -> public void testExceptionOnNegativeInterval();1544035746;see issue #9634, negative dateHistogramInterval in date_histogram should raise exception;public void testExceptionOnNegativeInterval() {_        try {_            client().prepareSearch("idx")_                    .addAggregation(dateHistogram("histo").field("date").interval(-TimeUnit.DAYS.toMillis(1)).minDocCount(0)).execute()_                    .actionGet()__            fail()__        } catch (IllegalArgumentException e) {_            assertThat(e.toString(), containsString("[interval] must be 1 or greater for histogram aggregation [histo]"))__        }_    };see,issue,9634,negative,date,histogram,interval,in,should,raise,exception;public,void,test,exception,on,negative,interval,try,client,prepare,search,idx,add,aggregation,date,histogram,histo,field,date,interval,time,unit,days,to,millis,1,min,doc,count,0,execute,action,get,fail,catch,illegal,argument,exception,e,assert,that,e,to,string,contains,string,interval,must,be,1,or,greater,for,histogram,aggregation,histo
DateHistogramIT -> public void testExceptionOnNegativeInterval();1544110272;see issue #9634, negative dateHistogramInterval in date_histogram should raise exception;public void testExceptionOnNegativeInterval() {_        try {_            client().prepareSearch("idx")_                    .addAggregation(dateHistogram("histo").field("date").interval(-TimeUnit.DAYS.toMillis(1)).minDocCount(0)).get()__            fail()__        } catch (IllegalArgumentException e) {_            assertThat(e.toString(), containsString("[interval] must be 1 or greater for histogram aggregation [histo]"))__        }_    };see,issue,9634,negative,date,histogram,interval,in,should,raise,exception;public,void,test,exception,on,negative,interval,try,client,prepare,search,idx,add,aggregation,date,histogram,histo,field,date,interval,time,unit,days,to,millis,1,min,doc,count,0,get,fail,catch,illegal,argument,exception,e,assert,that,e,to,string,contains,string,interval,must,be,1,or,greater,for,histogram,aggregation,histo
DateHistogramIT -> public void testExceptionOnNegativeInterval();1544232221;see issue #9634, negative dateHistogramInterval in date_histogram should raise exception;public void testExceptionOnNegativeInterval() {_        try {_            client().prepareSearch("idx")_                    .addAggregation(dateHistogram("histo").field("date").interval(-TimeUnit.DAYS.toMillis(1)).minDocCount(0)).get()__            fail()__        } catch (IllegalArgumentException e) {_            assertThat(e.toString(), containsString("[interval] must be 1 or greater for histogram aggregation [histo]"))__        }_    };see,issue,9634,negative,date,histogram,interval,in,should,raise,exception;public,void,test,exception,on,negative,interval,try,client,prepare,search,idx,add,aggregation,date,histogram,histo,field,date,interval,time,unit,days,to,millis,1,min,doc,count,0,get,fail,catch,illegal,argument,exception,e,assert,that,e,to,string,contains,string,interval,must,be,1,or,greater,for,histogram,aggregation,histo
DateHistogramIT -> public void testExceptionOnNegativeInterval();1544600864;see issue #9634, negative dateHistogramInterval in date_histogram should raise exception;public void testExceptionOnNegativeInterval() {_        try {_            client().prepareSearch("idx")_                    .addAggregation(dateHistogram("histo").field("date").interval(-TimeUnit.DAYS.toMillis(1)).minDocCount(0)).get()__            fail()__        } catch (IllegalArgumentException e) {_            assertThat(e.toString(), containsString("[interval] must be 1 or greater for histogram aggregation [histo]"))__        }_    };see,issue,9634,negative,date,histogram,interval,in,should,raise,exception;public,void,test,exception,on,negative,interval,try,client,prepare,search,idx,add,aggregation,date,histogram,histo,field,date,interval,time,unit,days,to,millis,1,min,doc,count,0,get,fail,catch,illegal,argument,exception,e,assert,that,e,to,string,contains,string,interval,must,be,1,or,greater,for,histogram,aggregation,histo
DateHistogramIT -> public void testExceptionOnNegativeInterval();1548236405;see issue #9634, negative dateHistogramInterval in date_histogram should raise exception;public void testExceptionOnNegativeInterval() {_        try {_            client().prepareSearch("idx")_                    .addAggregation(dateHistogram("histo").field("date").interval(-TimeUnit.DAYS.toMillis(1)).minDocCount(0)).get()__            fail()__        } catch (IllegalArgumentException e) {_            assertThat(e.toString(), containsString("[interval] must be 1 or greater for histogram aggregation [histo]"))__        }_    };see,issue,9634,negative,date,histogram,interval,in,should,raise,exception;public,void,test,exception,on,negative,interval,try,client,prepare,search,idx,add,aggregation,date,histogram,histo,field,date,interval,time,unit,days,to,millis,1,min,doc,count,0,get,fail,catch,illegal,argument,exception,e,assert,that,e,to,string,contains,string,interval,must,be,1,or,greater,for,histogram,aggregation,histo
DateHistogramIT -> public void testExceptionOnNegativeInterval();1548921340;see issue #9634, negative dateHistogramInterval in date_histogram should raise exception;public void testExceptionOnNegativeInterval() {_        try {_            client().prepareSearch("idx")_                    .addAggregation(dateHistogram("histo").field("date").interval(-TimeUnit.DAYS.toMillis(1)).minDocCount(0)).get()__            fail()__        } catch (IllegalArgumentException e) {_            assertThat(e.toString(), containsString("[interval] must be 1 or greater for histogram aggregation [histo]"))__        }_    };see,issue,9634,negative,date,histogram,interval,in,should,raise,exception;public,void,test,exception,on,negative,interval,try,client,prepare,search,idx,add,aggregation,date,histogram,histo,field,date,interval,time,unit,days,to,millis,1,min,doc,count,0,get,fail,catch,illegal,argument,exception,e,assert,that,e,to,string,contains,string,interval,must,be,1,or,greater,for,histogram,aggregation,histo
DateHistogramIT -> public void testExceptionOnNegativeInterval();1550743790;see issue #9634, negative dateHistogramInterval in date_histogram should raise exception;public void testExceptionOnNegativeInterval() {_        try {_            client().prepareSearch("idx")_                    .addAggregation(dateHistogram("histo").field("date").interval(-TimeUnit.DAYS.toMillis(1)).minDocCount(0)).get()__            fail()__        } catch (IllegalArgumentException e) {_            assertThat(e.toString(), containsString("[interval] must be 1 or greater for histogram aggregation [histo]"))__        }_    };see,issue,9634,negative,date,histogram,interval,in,should,raise,exception;public,void,test,exception,on,negative,interval,try,client,prepare,search,idx,add,aggregation,date,histogram,histo,field,date,interval,time,unit,days,to,millis,1,min,doc,count,0,get,fail,catch,illegal,argument,exception,e,assert,that,e,to,string,contains,string,interval,must,be,1,or,greater,for,histogram,aggregation,histo
DateHistogramIT -> public void testDontCacheScripts() throws Exception;1524684173;Make sure that a request using a script does not get cached and a request_not using a script does get cached.;public void testDontCacheScripts() throws Exception {_        assertAcked(prepareCreate("cache_test_idx").addMapping("type", "d", "type=date")_                .setSettings(Settings.builder().put("requests.cache.enable", true).put("number_of_shards", 1).put("number_of_replicas", 1))_                .get())__        indexRandom(true, client().prepareIndex("cache_test_idx", "type", "1").setSource("d", date(1, 1)),_                client().prepareIndex("cache_test_idx", "type", "2").setSource("d", date(2, 1)))___        _        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "d")__        SearchResponse r = client().prepareSearch("cache_test_idx").setSize(0).addAggregation(dateHistogram("histo").field("d")_                .script(new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.LONG_PLUS_ONE_MONTH, params))_                .dateHistogramInterval(DateHistogramInterval.MONTH)).get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        _        r = client().prepareSearch("cache_test_idx").setSize(0)_                .addAggregation(dateHistogram("histo").field("d").dateHistogramInterval(DateHistogramInterval.MONTH)).get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(1L))__    };make,sure,that,a,request,using,a,script,does,not,get,cached,and,a,request,not,using,a,script,does,get,cached;public,void,test,dont,cache,scripts,throws,exception,assert,acked,prepare,create,add,mapping,type,d,type,date,set,settings,settings,builder,put,requests,cache,enable,true,put,1,put,1,get,index,random,true,client,prepare,index,type,1,set,source,d,date,1,1,client,prepare,index,type,2,set,source,d,date,2,1,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,map,string,object,params,new,hash,map,params,put,fieldname,d,search,response,r,client,prepare,search,set,size,0,add,aggregation,date,histogram,histo,field,d,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,date,histogram,interval,date,histogram,interval,month,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,r,client,prepare,search,set,size,0,add,aggregation,date,histogram,histo,field,d,date,histogram,interval,date,histogram,interval,month,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,1l
DateHistogramIT -> public void testDontCacheScripts() throws Exception;1529487105;Make sure that a request using a script does not get cached and a request_not using a script does get cached.;public void testDontCacheScripts() throws Exception {_        assertAcked(prepareCreate("cache_test_idx").addMapping("type", "d", "type=date")_                .setSettings(Settings.builder().put("requests.cache.enable", true).put("number_of_shards", 1).put("number_of_replicas", 1))_                .get())__        indexRandom(true, client().prepareIndex("cache_test_idx", "type", "1").setSource("d", date(1, 1)),_                client().prepareIndex("cache_test_idx", "type", "2").setSource("d", date(2, 1)))___        _        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "d")__        SearchResponse r = client().prepareSearch("cache_test_idx").setSize(0).addAggregation(dateHistogram("histo").field("d")_                .script(new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.LONG_PLUS_ONE_MONTH, params))_                .dateHistogramInterval(DateHistogramInterval.MONTH)).get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        _        r = client().prepareSearch("cache_test_idx").setSize(0)_                .addAggregation(dateHistogram("histo").field("d").dateHistogramInterval(DateHistogramInterval.MONTH)).get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(1L))__    };make,sure,that,a,request,using,a,script,does,not,get,cached,and,a,request,not,using,a,script,does,get,cached;public,void,test,dont,cache,scripts,throws,exception,assert,acked,prepare,create,add,mapping,type,d,type,date,set,settings,settings,builder,put,requests,cache,enable,true,put,1,put,1,get,index,random,true,client,prepare,index,type,1,set,source,d,date,1,1,client,prepare,index,type,2,set,source,d,date,2,1,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,map,string,object,params,new,hash,map,params,put,fieldname,d,search,response,r,client,prepare,search,set,size,0,add,aggregation,date,histogram,histo,field,d,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,date,histogram,interval,date,histogram,interval,month,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,r,client,prepare,search,set,size,0,add,aggregation,date,histogram,histo,field,d,date,histogram,interval,date,histogram,interval,month,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,1l
DateHistogramIT -> public void testDontCacheScripts() throws Exception;1531179852;Make sure that a request using a script does not get cached and a request_not using a script does get cached.;public void testDontCacheScripts() throws Exception {_        assertAcked(prepareCreate("cache_test_idx").addMapping("type", "d", "type=date")_                .setSettings(Settings.builder().put("requests.cache.enable", true).put("number_of_shards", 1).put("number_of_replicas", 1))_                .get())__        indexRandom(true, client().prepareIndex("cache_test_idx", "type", "1").setSource("d", date(1, 1)),_                client().prepareIndex("cache_test_idx", "type", "2").setSource("d", date(2, 1)))___        _        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "d")__        SearchResponse r = client().prepareSearch("cache_test_idx").setSize(0).addAggregation(dateHistogram("histo").field("d")_                .script(new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.LONG_PLUS_ONE_MONTH, params))_                .dateHistogramInterval(DateHistogramInterval.MONTH)).get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        _        r = client().prepareSearch("cache_test_idx").setSize(0)_                .addAggregation(dateHistogram("histo").field("d").dateHistogramInterval(DateHistogramInterval.MONTH)).get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(1L))__    };make,sure,that,a,request,using,a,script,does,not,get,cached,and,a,request,not,using,a,script,does,get,cached;public,void,test,dont,cache,scripts,throws,exception,assert,acked,prepare,create,add,mapping,type,d,type,date,set,settings,settings,builder,put,requests,cache,enable,true,put,1,put,1,get,index,random,true,client,prepare,index,type,1,set,source,d,date,1,1,client,prepare,index,type,2,set,source,d,date,2,1,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,map,string,object,params,new,hash,map,params,put,fieldname,d,search,response,r,client,prepare,search,set,size,0,add,aggregation,date,histogram,histo,field,d,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,date,histogram,interval,date,histogram,interval,month,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,r,client,prepare,search,set,size,0,add,aggregation,date,histogram,histo,field,d,date,histogram,interval,date,histogram,interval,month,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,1l
DateHistogramIT -> public void testDontCacheScripts() throws Exception;1536314350;Make sure that a request using a script does not get cached and a request_not using a script does get cached.;public void testDontCacheScripts() throws Exception {_        assertAcked(prepareCreate("cache_test_idx").addMapping("type", "d", "type=date")_                .setSettings(Settings.builder().put("requests.cache.enable", true).put("number_of_shards", 1).put("number_of_replicas", 1))_                .get())__        indexRandom(true, client().prepareIndex("cache_test_idx", "type", "1").setSource("d", date(1, 1)),_                client().prepareIndex("cache_test_idx", "type", "2").setSource("d", date(2, 1)))___        _        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "d")__        SearchResponse r = client().prepareSearch("cache_test_idx").setSize(0).addAggregation(dateHistogram("histo").field("d")_                .script(new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.LONG_PLUS_ONE_MONTH, params))_                .dateHistogramInterval(DateHistogramInterval.MONTH)).get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        _        r = client().prepareSearch("cache_test_idx").setSize(0)_                .addAggregation(dateHistogram("histo").field("d").dateHistogramInterval(DateHistogramInterval.MONTH)).get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(1L))__    };make,sure,that,a,request,using,a,script,does,not,get,cached,and,a,request,not,using,a,script,does,get,cached;public,void,test,dont,cache,scripts,throws,exception,assert,acked,prepare,create,add,mapping,type,d,type,date,set,settings,settings,builder,put,requests,cache,enable,true,put,1,put,1,get,index,random,true,client,prepare,index,type,1,set,source,d,date,1,1,client,prepare,index,type,2,set,source,d,date,2,1,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,map,string,object,params,new,hash,map,params,put,fieldname,d,search,response,r,client,prepare,search,set,size,0,add,aggregation,date,histogram,histo,field,d,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,date,histogram,interval,date,histogram,interval,month,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,r,client,prepare,search,set,size,0,add,aggregation,date,histogram,histo,field,d,date,histogram,interval,date,histogram,interval,month,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,1l
DateHistogramIT -> public void testDontCacheScripts() throws Exception;1538067637;Make sure that a request using a script does not get cached and a request_not using a script does get cached.;public void testDontCacheScripts() throws Exception {_        assertAcked(prepareCreate("cache_test_idx").addMapping("type", "d", "type=date")_                .setSettings(Settings.builder().put("requests.cache.enable", true).put("number_of_shards", 1).put("number_of_replicas", 1))_                .get())__        indexRandom(true, client().prepareIndex("cache_test_idx", "type", "1").setSource("d", date(1, 1)),_                client().prepareIndex("cache_test_idx", "type", "2").setSource("d", date(2, 1)))___        _        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "d")__        SearchResponse r = client().prepareSearch("cache_test_idx").setSize(0).addAggregation(dateHistogram("histo").field("d")_                .script(new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.LONG_PLUS_ONE_MONTH, params))_                .dateHistogramInterval(DateHistogramInterval.MONTH)).get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        _        r = client().prepareSearch("cache_test_idx").setSize(0)_                .addAggregation(dateHistogram("histo").field("d").dateHistogramInterval(DateHistogramInterval.MONTH)).get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(1L))__    };make,sure,that,a,request,using,a,script,does,not,get,cached,and,a,request,not,using,a,script,does,get,cached;public,void,test,dont,cache,scripts,throws,exception,assert,acked,prepare,create,add,mapping,type,d,type,date,set,settings,settings,builder,put,requests,cache,enable,true,put,1,put,1,get,index,random,true,client,prepare,index,type,1,set,source,d,date,1,1,client,prepare,index,type,2,set,source,d,date,2,1,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,map,string,object,params,new,hash,map,params,put,fieldname,d,search,response,r,client,prepare,search,set,size,0,add,aggregation,date,histogram,histo,field,d,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,date,histogram,interval,date,histogram,interval,month,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,r,client,prepare,search,set,size,0,add,aggregation,date,histogram,histo,field,d,date,histogram,interval,date,histogram,interval,month,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,1l
DateHistogramIT -> public void testDontCacheScripts() throws Exception;1541668945;Make sure that a request using a script does not get cached and a request_not using a script does get cached.;public void testDontCacheScripts() throws Exception {_        assertAcked(prepareCreate("cache_test_idx").addMapping("type", "d", "type=date")_                .setSettings(Settings.builder().put("requests.cache.enable", true).put("number_of_shards", 1).put("number_of_replicas", 1))_                .get())__        indexRandom(true, client().prepareIndex("cache_test_idx", "type", "1").setSource("d", date(1, 1)),_                client().prepareIndex("cache_test_idx", "type", "2").setSource("d", date(2, 1)))___        _        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "d")__        SearchResponse r = client().prepareSearch("cache_test_idx").setSize(0).addAggregation(dateHistogram("histo").field("d")_                .script(new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.LONG_PLUS_ONE_MONTH, params))_                .dateHistogramInterval(DateHistogramInterval.MONTH)).get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        _        r = client().prepareSearch("cache_test_idx").setSize(0)_                .addAggregation(dateHistogram("histo").field("d").dateHistogramInterval(DateHistogramInterval.MONTH)).get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(1L))__    };make,sure,that,a,request,using,a,script,does,not,get,cached,and,a,request,not,using,a,script,does,get,cached;public,void,test,dont,cache,scripts,throws,exception,assert,acked,prepare,create,add,mapping,type,d,type,date,set,settings,settings,builder,put,requests,cache,enable,true,put,1,put,1,get,index,random,true,client,prepare,index,type,1,set,source,d,date,1,1,client,prepare,index,type,2,set,source,d,date,2,1,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,map,string,object,params,new,hash,map,params,put,fieldname,d,search,response,r,client,prepare,search,set,size,0,add,aggregation,date,histogram,histo,field,d,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,date,histogram,interval,date,histogram,interval,month,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,r,client,prepare,search,set,size,0,add,aggregation,date,histogram,histo,field,d,date,histogram,interval,date,histogram,interval,month,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,1l
DateHistogramIT -> public void testDontCacheScripts() throws Exception;1544035746;Make sure that a request using a script does not get cached and a request_not using a script does get cached.;public void testDontCacheScripts() throws Exception {_        assertAcked(prepareCreate("cache_test_idx").addMapping("type", "d", "type=date")_                .setSettings(Settings.builder().put("requests.cache.enable", true).put("number_of_shards", 1).put("number_of_replicas", 1))_                .get())__        indexRandom(true, client().prepareIndex("cache_test_idx", "type", "1").setSource("d", date(1, 1)),_                client().prepareIndex("cache_test_idx", "type", "2").setSource("d", date(2, 1)))___        _        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "d")__        SearchResponse r = client().prepareSearch("cache_test_idx").setSize(0).addAggregation(dateHistogram("histo").field("d")_                .script(new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.LONG_PLUS_ONE_MONTH, params))_                .dateHistogramInterval(DateHistogramInterval.MONTH)).get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        _        r = client().prepareSearch("cache_test_idx").setSize(0)_                .addAggregation(dateHistogram("histo").field("d").dateHistogramInterval(DateHistogramInterval.MONTH)).get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(1L))__    };make,sure,that,a,request,using,a,script,does,not,get,cached,and,a,request,not,using,a,script,does,get,cached;public,void,test,dont,cache,scripts,throws,exception,assert,acked,prepare,create,add,mapping,type,d,type,date,set,settings,settings,builder,put,requests,cache,enable,true,put,1,put,1,get,index,random,true,client,prepare,index,type,1,set,source,d,date,1,1,client,prepare,index,type,2,set,source,d,date,2,1,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,map,string,object,params,new,hash,map,params,put,fieldname,d,search,response,r,client,prepare,search,set,size,0,add,aggregation,date,histogram,histo,field,d,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,date,histogram,interval,date,histogram,interval,month,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,r,client,prepare,search,set,size,0,add,aggregation,date,histogram,histo,field,d,date,histogram,interval,date,histogram,interval,month,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,1l
DateHistogramIT -> public void testDontCacheScripts() throws Exception;1544110272;Make sure that a request using a script does not get cached and a request_not using a script does get cached.;public void testDontCacheScripts() throws Exception {_        assertAcked(prepareCreate("cache_test_idx").addMapping("type", "d", "type=date")_                .setSettings(Settings.builder().put("requests.cache.enable", true).put("number_of_shards", 1).put("number_of_replicas", 1))_                .get())__        indexRandom(true, client().prepareIndex("cache_test_idx", "type", "1").setSource("d", date(1, 1)),_                client().prepareIndex("cache_test_idx", "type", "2").setSource("d", date(2, 1)))___        _        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "d")__        SearchResponse r = client().prepareSearch("cache_test_idx").setSize(0).addAggregation(dateHistogram("histo").field("d")_                .script(new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.LONG_PLUS_ONE_MONTH, params))_                .dateHistogramInterval(DateHistogramInterval.MONTH)).get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        _        r = client().prepareSearch("cache_test_idx").setSize(0)_                .addAggregation(dateHistogram("histo").field("d").dateHistogramInterval(DateHistogramInterval.MONTH)).get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(1L))__    };make,sure,that,a,request,using,a,script,does,not,get,cached,and,a,request,not,using,a,script,does,get,cached;public,void,test,dont,cache,scripts,throws,exception,assert,acked,prepare,create,add,mapping,type,d,type,date,set,settings,settings,builder,put,requests,cache,enable,true,put,1,put,1,get,index,random,true,client,prepare,index,type,1,set,source,d,date,1,1,client,prepare,index,type,2,set,source,d,date,2,1,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,map,string,object,params,new,hash,map,params,put,fieldname,d,search,response,r,client,prepare,search,set,size,0,add,aggregation,date,histogram,histo,field,d,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,date,histogram,interval,date,histogram,interval,month,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,r,client,prepare,search,set,size,0,add,aggregation,date,histogram,histo,field,d,date,histogram,interval,date,histogram,interval,month,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,1l
DateHistogramIT -> public void testDontCacheScripts() throws Exception;1544232221;Make sure that a request using a script does not get cached and a request_not using a script does get cached.;public void testDontCacheScripts() throws Exception {_        assertAcked(prepareCreate("cache_test_idx").addMapping("type", "d", "type=date")_                .setSettings(Settings.builder().put("requests.cache.enable", true).put("number_of_shards", 1).put("number_of_replicas", 1))_                .get())__        indexRandom(true, client().prepareIndex("cache_test_idx", "type", "1").setSource("d", date(1, 1)),_                client().prepareIndex("cache_test_idx", "type", "2").setSource("d", date(2, 1)))___        _        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "d")__        SearchResponse r = client().prepareSearch("cache_test_idx").setSize(0).addAggregation(dateHistogram("histo").field("d")_                .script(new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.LONG_PLUS_ONE_MONTH, params))_                .dateHistogramInterval(DateHistogramInterval.MONTH)).get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        _        r = client().prepareSearch("cache_test_idx").setSize(0)_                .addAggregation(dateHistogram("histo").field("d").dateHistogramInterval(DateHistogramInterval.MONTH)).get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(1L))__    };make,sure,that,a,request,using,a,script,does,not,get,cached,and,a,request,not,using,a,script,does,get,cached;public,void,test,dont,cache,scripts,throws,exception,assert,acked,prepare,create,add,mapping,type,d,type,date,set,settings,settings,builder,put,requests,cache,enable,true,put,1,put,1,get,index,random,true,client,prepare,index,type,1,set,source,d,date,1,1,client,prepare,index,type,2,set,source,d,date,2,1,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,map,string,object,params,new,hash,map,params,put,fieldname,d,search,response,r,client,prepare,search,set,size,0,add,aggregation,date,histogram,histo,field,d,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,date,histogram,interval,date,histogram,interval,month,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,r,client,prepare,search,set,size,0,add,aggregation,date,histogram,histo,field,d,date,histogram,interval,date,histogram,interval,month,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,1l
DateHistogramIT -> public void testDontCacheScripts() throws Exception;1544600864;Make sure that a request using a script does not get cached and a request_not using a script does get cached.;public void testDontCacheScripts() throws Exception {_        assertAcked(prepareCreate("cache_test_idx").addMapping("type", "d", "type=date")_                .setSettings(Settings.builder().put("requests.cache.enable", true).put("number_of_shards", 1).put("number_of_replicas", 1))_                .get())__        indexRandom(true, client().prepareIndex("cache_test_idx", "type", "1").setSource("d", date(1, 1)),_                client().prepareIndex("cache_test_idx", "type", "2").setSource("d", date(2, 1)))___        _        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "d")__        SearchResponse r = client().prepareSearch("cache_test_idx").setSize(0).addAggregation(dateHistogram("histo").field("d")_                .script(new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.LONG_PLUS_ONE_MONTH, params))_                .dateHistogramInterval(DateHistogramInterval.MONTH)).get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        _        r = client().prepareSearch("cache_test_idx").setSize(0)_                .addAggregation(dateHistogram("histo").field("d").dateHistogramInterval(DateHistogramInterval.MONTH)).get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(1L))__    };make,sure,that,a,request,using,a,script,does,not,get,cached,and,a,request,not,using,a,script,does,get,cached;public,void,test,dont,cache,scripts,throws,exception,assert,acked,prepare,create,add,mapping,type,d,type,date,set,settings,settings,builder,put,requests,cache,enable,true,put,1,put,1,get,index,random,true,client,prepare,index,type,1,set,source,d,date,1,1,client,prepare,index,type,2,set,source,d,date,2,1,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,map,string,object,params,new,hash,map,params,put,fieldname,d,search,response,r,client,prepare,search,set,size,0,add,aggregation,date,histogram,histo,field,d,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,date,histogram,interval,date,histogram,interval,month,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,r,client,prepare,search,set,size,0,add,aggregation,date,histogram,histo,field,d,date,histogram,interval,date,histogram,interval,month,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,1l
DateHistogramIT -> public void testDontCacheScripts() throws Exception;1548236405;Make sure that a request using a script does not get cached and a request_not using a script does get cached.;public void testDontCacheScripts() throws Exception {_        assertAcked(prepareCreate("cache_test_idx").addMapping("type", "d", "type=date")_                .setSettings(Settings.builder().put("requests.cache.enable", true).put("number_of_shards", 1).put("number_of_replicas", 1))_                .get())__        String date = DateFieldMapper.DEFAULT_DATE_TIME_FORMATTER.format(date(1, 1))__        String date2 = DateFieldMapper.DEFAULT_DATE_TIME_FORMATTER.format(date(2, 1))__        indexRandom(true, client().prepareIndex("cache_test_idx", "type", "1").setSource("d", date),_                client().prepareIndex("cache_test_idx", "type", "2").setSource("d", date2))___        _        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "d")__        SearchResponse r = client().prepareSearch("cache_test_idx").setSize(0).addAggregation(dateHistogram("histo").field("d")_                .script(new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.LONG_PLUS_ONE_MONTH, params))_                .dateHistogramInterval(DateHistogramInterval.MONTH)).get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        _        r = client().prepareSearch("cache_test_idx").setSize(0)_                .addAggregation(dateHistogram("histo").field("d").dateHistogramInterval(DateHistogramInterval.MONTH)).get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(1L))__    };make,sure,that,a,request,using,a,script,does,not,get,cached,and,a,request,not,using,a,script,does,get,cached;public,void,test,dont,cache,scripts,throws,exception,assert,acked,prepare,create,add,mapping,type,d,type,date,set,settings,settings,builder,put,requests,cache,enable,true,put,1,put,1,get,string,date,date,field,mapper,format,date,1,1,string,date2,date,field,mapper,format,date,2,1,index,random,true,client,prepare,index,type,1,set,source,d,date,client,prepare,index,type,2,set,source,d,date2,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,map,string,object,params,new,hash,map,params,put,fieldname,d,search,response,r,client,prepare,search,set,size,0,add,aggregation,date,histogram,histo,field,d,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,date,histogram,interval,date,histogram,interval,month,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,r,client,prepare,search,set,size,0,add,aggregation,date,histogram,histo,field,d,date,histogram,interval,date,histogram,interval,month,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,1l
DateHistogramIT -> public void testDontCacheScripts() throws Exception;1548921340;Make sure that a request using a script does not get cached and a request_not using a script does get cached.;public void testDontCacheScripts() throws Exception {_        assertAcked(prepareCreate("cache_test_idx").addMapping("type", "d", "type=date")_                .setSettings(Settings.builder().put("requests.cache.enable", true).put("number_of_shards", 1).put("number_of_replicas", 1))_                .get())__        String date = DateFieldMapper.DEFAULT_DATE_TIME_FORMATTER.format(date(1, 1))__        String date2 = DateFieldMapper.DEFAULT_DATE_TIME_FORMATTER.format(date(2, 1))__        indexRandom(true, client().prepareIndex("cache_test_idx", "type", "1").setSource("d", date),_                client().prepareIndex("cache_test_idx", "type", "2").setSource("d", date2))___        _        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "d")__        SearchResponse r = client().prepareSearch("cache_test_idx").setSize(0).addAggregation(dateHistogram("histo").field("d")_                .script(new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.LONG_PLUS_ONE_MONTH, params))_                .dateHistogramInterval(DateHistogramInterval.MONTH)).get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        _        r = client().prepareSearch("cache_test_idx").setSize(0)_                .addAggregation(dateHistogram("histo").field("d").dateHistogramInterval(DateHistogramInterval.MONTH)).get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(1L))__    };make,sure,that,a,request,using,a,script,does,not,get,cached,and,a,request,not,using,a,script,does,get,cached;public,void,test,dont,cache,scripts,throws,exception,assert,acked,prepare,create,add,mapping,type,d,type,date,set,settings,settings,builder,put,requests,cache,enable,true,put,1,put,1,get,string,date,date,field,mapper,format,date,1,1,string,date2,date,field,mapper,format,date,2,1,index,random,true,client,prepare,index,type,1,set,source,d,date,client,prepare,index,type,2,set,source,d,date2,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,map,string,object,params,new,hash,map,params,put,fieldname,d,search,response,r,client,prepare,search,set,size,0,add,aggregation,date,histogram,histo,field,d,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,date,histogram,interval,date,histogram,interval,month,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,r,client,prepare,search,set,size,0,add,aggregation,date,histogram,histo,field,d,date,histogram,interval,date,histogram,interval,month,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,1l
DateHistogramIT -> public void testDontCacheScripts() throws Exception;1550743790;Make sure that a request using a script does not get cached and a request_not using a script does get cached.;public void testDontCacheScripts() throws Exception {_        assertAcked(prepareCreate("cache_test_idx").addMapping("type", "d", "type=date")_                .setSettings(Settings.builder().put("requests.cache.enable", true).put("number_of_shards", 1).put("number_of_replicas", 1))_                .get())__        String date = DateFieldMapper.DEFAULT_DATE_TIME_FORMATTER.format(date(1, 1))__        String date2 = DateFieldMapper.DEFAULT_DATE_TIME_FORMATTER.format(date(2, 1))__        indexRandom(true, client().prepareIndex("cache_test_idx", "type", "1").setSource("d", date),_                client().prepareIndex("cache_test_idx", "type", "2").setSource("d", date2))___        _        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "d")__        SearchResponse r = client().prepareSearch("cache_test_idx").setSize(0).addAggregation(dateHistogram("histo").field("d")_                .script(new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.LONG_PLUS_ONE_MONTH, params))_                .dateHistogramInterval(DateHistogramInterval.MONTH)).get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(0L))___        _        _        r = client().prepareSearch("cache_test_idx").setSize(0)_                .addAggregation(dateHistogram("histo").field("d").dateHistogramInterval(DateHistogramInterval.MONTH)).get()__        assertSearchResponse(r)___        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getHitCount(), equalTo(0L))__        assertThat(client().admin().indices().prepareStats("cache_test_idx").setRequestCache(true).get().getTotal().getRequestCache()_                .getMissCount(), equalTo(1L))__    };make,sure,that,a,request,using,a,script,does,not,get,cached,and,a,request,not,using,a,script,does,get,cached;public,void,test,dont,cache,scripts,throws,exception,assert,acked,prepare,create,add,mapping,type,d,type,date,set,settings,settings,builder,put,requests,cache,enable,true,put,1,put,1,get,string,date,date,field,mapper,format,date,1,1,string,date2,date,field,mapper,format,date,2,1,index,random,true,client,prepare,index,type,1,set,source,d,date,client,prepare,index,type,2,set,source,d,date2,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,map,string,object,params,new,hash,map,params,put,fieldname,d,search,response,r,client,prepare,search,set,size,0,add,aggregation,date,histogram,histo,field,d,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,date,histogram,interval,date,histogram,interval,month,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,0l,r,client,prepare,search,set,size,0,add,aggregation,date,histogram,histo,field,d,date,histogram,interval,date,histogram,interval,month,get,assert,search,response,r,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,hit,count,equal,to,0l,assert,that,client,admin,indices,prepare,stats,set,request,cache,true,get,get,total,get,request,cache,get,miss,count,equal,to,1l
DateHistogramIT -> public void testScriptSingleValue() throws Exception;1524684173;Jan 2_Feb 2_Feb 15_Mar 2_Mar 15_Mar 23;public void testScriptSingleValue() throws Exception {_        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "date")__        SearchResponse response = client().prepareSearch("idx")_                .addAggregation(dateHistogram("histo").script(_                    new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.EXTRACT_FIELD, params))_                    .dateHistogramInterval(DateHistogramInterval.MONTH))_                .execute().actionGet()___        assertSearchResponse(response)___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(3))___        DateTime key = new DateTime(2012, 1, 1, 0, 0, DateTimeZone.UTC)__        Histogram.Bucket bucket = buckets.get(0)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(1L))___        key = new DateTime(2012, 2, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(1)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(2L))___        key = new DateTime(2012, 3, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(2)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(3L))__    };jan,2,feb,2,feb,15,mar,2,mar,15,mar,23;public,void,test,script,single,value,throws,exception,map,string,object,params,new,hash,map,params,put,fieldname,date,search,response,response,client,prepare,search,idx,add,aggregation,date,histogram,histo,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,date,histogram,interval,date,histogram,interval,month,execute,action,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,3,date,time,key,new,date,time,2012,1,1,0,0,date,time,zone,utc,histogram,bucket,bucket,buckets,get,0,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,1l,key,new,date,time,2012,2,1,0,0,date,time,zone,utc,bucket,buckets,get,1,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,2l,key,new,date,time,2012,3,1,0,0,date,time,zone,utc,bucket,buckets,get,2,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,3l
DateHistogramIT -> public void testScriptSingleValue() throws Exception;1529487105;Jan 2_Feb 2_Feb 15_Mar 2_Mar 15_Mar 23;public void testScriptSingleValue() throws Exception {_        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "date")__        SearchResponse response = client().prepareSearch("idx")_                .addAggregation(dateHistogram("histo").script(_                    new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.EXTRACT_FIELD, params))_                    .dateHistogramInterval(DateHistogramInterval.MONTH))_                .execute().actionGet()___        assertSearchResponse(response)___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(3))___        DateTime key = new DateTime(2012, 1, 1, 0, 0, DateTimeZone.UTC)__        Histogram.Bucket bucket = buckets.get(0)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(1L))___        key = new DateTime(2012, 2, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(1)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(2L))___        key = new DateTime(2012, 3, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(2)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(3L))__    };jan,2,feb,2,feb,15,mar,2,mar,15,mar,23;public,void,test,script,single,value,throws,exception,map,string,object,params,new,hash,map,params,put,fieldname,date,search,response,response,client,prepare,search,idx,add,aggregation,date,histogram,histo,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,date,histogram,interval,date,histogram,interval,month,execute,action,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,3,date,time,key,new,date,time,2012,1,1,0,0,date,time,zone,utc,histogram,bucket,bucket,buckets,get,0,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,1l,key,new,date,time,2012,2,1,0,0,date,time,zone,utc,bucket,buckets,get,1,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,2l,key,new,date,time,2012,3,1,0,0,date,time,zone,utc,bucket,buckets,get,2,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,3l
DateHistogramIT -> public void testScriptSingleValue() throws Exception;1531179852;Jan 2_Feb 2_Feb 15_Mar 2_Mar 15_Mar 23;public void testScriptSingleValue() throws Exception {_        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "date")__        SearchResponse response = client().prepareSearch("idx")_                .addAggregation(dateHistogram("histo").script(_                    new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.EXTRACT_FIELD, params))_                    .dateHistogramInterval(DateHistogramInterval.MONTH))_                .execute().actionGet()___        assertSearchResponse(response)___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(3))___        DateTime key = new DateTime(2012, 1, 1, 0, 0, DateTimeZone.UTC)__        Histogram.Bucket bucket = buckets.get(0)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(1L))___        key = new DateTime(2012, 2, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(1)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(2L))___        key = new DateTime(2012, 3, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(2)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(3L))__    };jan,2,feb,2,feb,15,mar,2,mar,15,mar,23;public,void,test,script,single,value,throws,exception,map,string,object,params,new,hash,map,params,put,fieldname,date,search,response,response,client,prepare,search,idx,add,aggregation,date,histogram,histo,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,date,histogram,interval,date,histogram,interval,month,execute,action,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,3,date,time,key,new,date,time,2012,1,1,0,0,date,time,zone,utc,histogram,bucket,bucket,buckets,get,0,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,1l,key,new,date,time,2012,2,1,0,0,date,time,zone,utc,bucket,buckets,get,1,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,2l,key,new,date,time,2012,3,1,0,0,date,time,zone,utc,bucket,buckets,get,2,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,3l
DateHistogramIT -> public void testScriptSingleValue() throws Exception;1536314350;Jan 2_Feb 2_Feb 15_Mar 2_Mar 15_Mar 23;public void testScriptSingleValue() throws Exception {_        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "date")__        SearchResponse response = client().prepareSearch("idx")_                .addAggregation(dateHistogram("histo").script(_                    new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.EXTRACT_FIELD, params))_                    .dateHistogramInterval(DateHistogramInterval.MONTH))_                .execute().actionGet()___        assertSearchResponse(response)___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(3))___        DateTime key = new DateTime(2012, 1, 1, 0, 0, DateTimeZone.UTC)__        Histogram.Bucket bucket = buckets.get(0)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(1L))___        key = new DateTime(2012, 2, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(1)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(2L))___        key = new DateTime(2012, 3, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(2)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(3L))__    };jan,2,feb,2,feb,15,mar,2,mar,15,mar,23;public,void,test,script,single,value,throws,exception,map,string,object,params,new,hash,map,params,put,fieldname,date,search,response,response,client,prepare,search,idx,add,aggregation,date,histogram,histo,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,date,histogram,interval,date,histogram,interval,month,execute,action,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,3,date,time,key,new,date,time,2012,1,1,0,0,date,time,zone,utc,histogram,bucket,bucket,buckets,get,0,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,1l,key,new,date,time,2012,2,1,0,0,date,time,zone,utc,bucket,buckets,get,1,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,2l,key,new,date,time,2012,3,1,0,0,date,time,zone,utc,bucket,buckets,get,2,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,3l
DateHistogramIT -> public void testScriptSingleValue() throws Exception;1538067637;Jan 2_Feb 2_Feb 15_Mar 2_Mar 15_Mar 23;public void testScriptSingleValue() throws Exception {_        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "date")__        SearchResponse response = client().prepareSearch("idx")_                .addAggregation(dateHistogram("histo").script(_                    new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.EXTRACT_FIELD, params))_                    .dateHistogramInterval(DateHistogramInterval.MONTH))_                .execute().actionGet()___        assertSearchResponse(response)___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(3))___        DateTime key = new DateTime(2012, 1, 1, 0, 0, DateTimeZone.UTC)__        Histogram.Bucket bucket = buckets.get(0)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(1L))___        key = new DateTime(2012, 2, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(1)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(2L))___        key = new DateTime(2012, 3, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(2)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(3L))__    };jan,2,feb,2,feb,15,mar,2,mar,15,mar,23;public,void,test,script,single,value,throws,exception,map,string,object,params,new,hash,map,params,put,fieldname,date,search,response,response,client,prepare,search,idx,add,aggregation,date,histogram,histo,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,date,histogram,interval,date,histogram,interval,month,execute,action,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,3,date,time,key,new,date,time,2012,1,1,0,0,date,time,zone,utc,histogram,bucket,bucket,buckets,get,0,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,1l,key,new,date,time,2012,2,1,0,0,date,time,zone,utc,bucket,buckets,get,1,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,2l,key,new,date,time,2012,3,1,0,0,date,time,zone,utc,bucket,buckets,get,2,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,3l
DateHistogramIT -> public void testScriptSingleValue() throws Exception;1541668945;Jan 2_Feb 2_Feb 15_Mar 2_Mar 15_Mar 23;public void testScriptSingleValue() throws Exception {_        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "date")__        SearchResponse response = client().prepareSearch("idx")_                .addAggregation(dateHistogram("histo").script(_                    new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.EXTRACT_FIELD, params))_                    .dateHistogramInterval(DateHistogramInterval.MONTH))_                .execute().actionGet()___        assertSearchResponse(response)___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(3))___        DateTime key = new DateTime(2012, 1, 1, 0, 0, DateTimeZone.UTC)__        Histogram.Bucket bucket = buckets.get(0)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(1L))___        key = new DateTime(2012, 2, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(1)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(2L))___        key = new DateTime(2012, 3, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(2)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(3L))__    };jan,2,feb,2,feb,15,mar,2,mar,15,mar,23;public,void,test,script,single,value,throws,exception,map,string,object,params,new,hash,map,params,put,fieldname,date,search,response,response,client,prepare,search,idx,add,aggregation,date,histogram,histo,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,date,histogram,interval,date,histogram,interval,month,execute,action,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,3,date,time,key,new,date,time,2012,1,1,0,0,date,time,zone,utc,histogram,bucket,bucket,buckets,get,0,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,1l,key,new,date,time,2012,2,1,0,0,date,time,zone,utc,bucket,buckets,get,1,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,2l,key,new,date,time,2012,3,1,0,0,date,time,zone,utc,bucket,buckets,get,2,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,3l
DateHistogramIT -> public void testScriptSingleValue() throws Exception;1544035746;Jan 2_Feb 2_Feb 15_Mar 2_Mar 15_Mar 23;public void testScriptSingleValue() throws Exception {_        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "date")__        SearchResponse response = client().prepareSearch("idx")_                .addAggregation(dateHistogram("histo").script(_                    new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.EXTRACT_FIELD, params))_                    .dateHistogramInterval(DateHistogramInterval.MONTH))_                .execute().actionGet()___        assertSearchResponse(response)___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(3))___        DateTime key = new DateTime(2012, 1, 1, 0, 0, DateTimeZone.UTC)__        Histogram.Bucket bucket = buckets.get(0)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(1L))___        key = new DateTime(2012, 2, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(1)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(2L))___        key = new DateTime(2012, 3, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(2)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(3L))__    };jan,2,feb,2,feb,15,mar,2,mar,15,mar,23;public,void,test,script,single,value,throws,exception,map,string,object,params,new,hash,map,params,put,fieldname,date,search,response,response,client,prepare,search,idx,add,aggregation,date,histogram,histo,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,date,histogram,interval,date,histogram,interval,month,execute,action,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,3,date,time,key,new,date,time,2012,1,1,0,0,date,time,zone,utc,histogram,bucket,bucket,buckets,get,0,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,1l,key,new,date,time,2012,2,1,0,0,date,time,zone,utc,bucket,buckets,get,1,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,2l,key,new,date,time,2012,3,1,0,0,date,time,zone,utc,bucket,buckets,get,2,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,3l
DateHistogramIT -> public void testScriptSingleValue() throws Exception;1544110272;Jan 2_Feb 2_Feb 15_Mar 2_Mar 15_Mar 23;public void testScriptSingleValue() throws Exception {_        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "date")__        SearchResponse response = client().prepareSearch("idx")_                .addAggregation(dateHistogram("histo").script(_                    new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.EXTRACT_FIELD, params))_                    .dateHistogramInterval(DateHistogramInterval.MONTH))_                .get()___        assertSearchResponse(response)___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(3))___        DateTime key = new DateTime(2012, 1, 1, 0, 0, DateTimeZone.UTC)__        Histogram.Bucket bucket = buckets.get(0)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(1L))___        key = new DateTime(2012, 2, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(1)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(2L))___        key = new DateTime(2012, 3, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(2)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(3L))__    };jan,2,feb,2,feb,15,mar,2,mar,15,mar,23;public,void,test,script,single,value,throws,exception,map,string,object,params,new,hash,map,params,put,fieldname,date,search,response,response,client,prepare,search,idx,add,aggregation,date,histogram,histo,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,date,histogram,interval,date,histogram,interval,month,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,3,date,time,key,new,date,time,2012,1,1,0,0,date,time,zone,utc,histogram,bucket,bucket,buckets,get,0,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,1l,key,new,date,time,2012,2,1,0,0,date,time,zone,utc,bucket,buckets,get,1,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,2l,key,new,date,time,2012,3,1,0,0,date,time,zone,utc,bucket,buckets,get,2,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,3l
DateHistogramIT -> public void testScriptSingleValue() throws Exception;1544232221;Jan 2_Feb 2_Feb 15_Mar 2_Mar 15_Mar 23;public void testScriptSingleValue() throws Exception {_        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "date")__        SearchResponse response = client().prepareSearch("idx")_                .addAggregation(dateHistogram("histo").script(_                    new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.EXTRACT_FIELD, params))_                    .dateHistogramInterval(DateHistogramInterval.MONTH))_                .get()___        assertSearchResponse(response)___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(3))___        DateTime key = new DateTime(2012, 1, 1, 0, 0, DateTimeZone.UTC)__        Histogram.Bucket bucket = buckets.get(0)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(1L))___        key = new DateTime(2012, 2, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(1)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(2L))___        key = new DateTime(2012, 3, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(2)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(3L))__    };jan,2,feb,2,feb,15,mar,2,mar,15,mar,23;public,void,test,script,single,value,throws,exception,map,string,object,params,new,hash,map,params,put,fieldname,date,search,response,response,client,prepare,search,idx,add,aggregation,date,histogram,histo,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,date,histogram,interval,date,histogram,interval,month,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,3,date,time,key,new,date,time,2012,1,1,0,0,date,time,zone,utc,histogram,bucket,bucket,buckets,get,0,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,1l,key,new,date,time,2012,2,1,0,0,date,time,zone,utc,bucket,buckets,get,1,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,2l,key,new,date,time,2012,3,1,0,0,date,time,zone,utc,bucket,buckets,get,2,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,3l
DateHistogramIT -> public void testScriptSingleValue() throws Exception;1544600864;Jan 2_Feb 2_Feb 15_Mar 2_Mar 15_Mar 23;public void testScriptSingleValue() throws Exception {_        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "date")__        SearchResponse response = client().prepareSearch("idx")_                .addAggregation(dateHistogram("histo").script(_                    new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.EXTRACT_FIELD, params))_                    .dateHistogramInterval(DateHistogramInterval.MONTH))_                .get()___        assertSearchResponse(response)___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(3))___        DateTime key = new DateTime(2012, 1, 1, 0, 0, DateTimeZone.UTC)__        Histogram.Bucket bucket = buckets.get(0)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(1L))___        key = new DateTime(2012, 2, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(1)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(2L))___        key = new DateTime(2012, 3, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(2)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(3L))__    };jan,2,feb,2,feb,15,mar,2,mar,15,mar,23;public,void,test,script,single,value,throws,exception,map,string,object,params,new,hash,map,params,put,fieldname,date,search,response,response,client,prepare,search,idx,add,aggregation,date,histogram,histo,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,date,histogram,interval,date,histogram,interval,month,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,3,date,time,key,new,date,time,2012,1,1,0,0,date,time,zone,utc,histogram,bucket,bucket,buckets,get,0,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,1l,key,new,date,time,2012,2,1,0,0,date,time,zone,utc,bucket,buckets,get,1,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,2l,key,new,date,time,2012,3,1,0,0,date,time,zone,utc,bucket,buckets,get,2,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,3l
DateHistogramIT -> public void testScriptSingleValue() throws Exception;1548236405;Jan 2_Feb 2_Feb 15_Mar 2_Mar 15_Mar 23;public void testScriptSingleValue() throws Exception {_        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "date")__        SearchResponse response = client().prepareSearch("idx")_                .addAggregation(dateHistogram("histo").script(_                    new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.EXTRACT_FIELD, params))_                    .dateHistogramInterval(DateHistogramInterval.MONTH))_                .get()___        assertSearchResponse(response)___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(3))___        ZonedDateTime key = ZonedDateTime.of(2012, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)__        Histogram.Bucket bucket = buckets.get(0)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((ZonedDateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(1L))___        key = ZonedDateTime.of(2012, 2, 1, 0, 0, 0, 0, ZoneOffset.UTC)__        bucket = buckets.get(1)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((ZonedDateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(2L))___        key = ZonedDateTime.of(2012, 3, 1, 0, 0, 0, 0, ZoneOffset.UTC)__        bucket = buckets.get(2)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((ZonedDateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(3L))__    };jan,2,feb,2,feb,15,mar,2,mar,15,mar,23;public,void,test,script,single,value,throws,exception,map,string,object,params,new,hash,map,params,put,fieldname,date,search,response,response,client,prepare,search,idx,add,aggregation,date,histogram,histo,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,date,histogram,interval,date,histogram,interval,month,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,3,zoned,date,time,key,zoned,date,time,of,2012,1,1,0,0,0,0,zone,offset,utc,histogram,bucket,bucket,buckets,get,0,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,zoned,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,1l,key,zoned,date,time,of,2012,2,1,0,0,0,0,zone,offset,utc,bucket,buckets,get,1,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,zoned,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,2l,key,zoned,date,time,of,2012,3,1,0,0,0,0,zone,offset,utc,bucket,buckets,get,2,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,zoned,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,3l
DateHistogramIT -> public void testScriptSingleValue() throws Exception;1548921340;Jan 2_Feb 2_Feb 15_Mar 2_Mar 15_Mar 23;public void testScriptSingleValue() throws Exception {_        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "date")__        SearchResponse response = client().prepareSearch("idx")_                .addAggregation(dateHistogram("histo").script(_                    new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.EXTRACT_FIELD, params))_                    .dateHistogramInterval(DateHistogramInterval.MONTH))_                .get()___        assertSearchResponse(response)___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(3))___        ZonedDateTime key = ZonedDateTime.of(2012, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)__        Histogram.Bucket bucket = buckets.get(0)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((ZonedDateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(1L))___        key = ZonedDateTime.of(2012, 2, 1, 0, 0, 0, 0, ZoneOffset.UTC)__        bucket = buckets.get(1)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((ZonedDateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(2L))___        key = ZonedDateTime.of(2012, 3, 1, 0, 0, 0, 0, ZoneOffset.UTC)__        bucket = buckets.get(2)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((ZonedDateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(3L))__    };jan,2,feb,2,feb,15,mar,2,mar,15,mar,23;public,void,test,script,single,value,throws,exception,map,string,object,params,new,hash,map,params,put,fieldname,date,search,response,response,client,prepare,search,idx,add,aggregation,date,histogram,histo,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,date,histogram,interval,date,histogram,interval,month,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,3,zoned,date,time,key,zoned,date,time,of,2012,1,1,0,0,0,0,zone,offset,utc,histogram,bucket,bucket,buckets,get,0,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,zoned,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,1l,key,zoned,date,time,of,2012,2,1,0,0,0,0,zone,offset,utc,bucket,buckets,get,1,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,zoned,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,2l,key,zoned,date,time,of,2012,3,1,0,0,0,0,zone,offset,utc,bucket,buckets,get,2,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,zoned,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,3l
DateHistogramIT -> public void testScriptSingleValue() throws Exception;1550743790;Jan 2_Feb 2_Feb 15_Mar 2_Mar 15_Mar 23;public void testScriptSingleValue() throws Exception {_        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "date")__        SearchResponse response = client().prepareSearch("idx")_                .addAggregation(dateHistogram("histo").script(_                    new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.EXTRACT_FIELD, params))_                    .dateHistogramInterval(DateHistogramInterval.MONTH))_                .get()___        assertSearchResponse(response)___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(3))___        ZonedDateTime key = ZonedDateTime.of(2012, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)__        Histogram.Bucket bucket = buckets.get(0)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((ZonedDateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(1L))___        key = ZonedDateTime.of(2012, 2, 1, 0, 0, 0, 0, ZoneOffset.UTC)__        bucket = buckets.get(1)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((ZonedDateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(2L))___        key = ZonedDateTime.of(2012, 3, 1, 0, 0, 0, 0, ZoneOffset.UTC)__        bucket = buckets.get(2)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((ZonedDateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(3L))__    };jan,2,feb,2,feb,15,mar,2,mar,15,mar,23;public,void,test,script,single,value,throws,exception,map,string,object,params,new,hash,map,params,put,fieldname,date,search,response,response,client,prepare,search,idx,add,aggregation,date,histogram,histo,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,date,histogram,interval,date,histogram,interval,month,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,3,zoned,date,time,key,zoned,date,time,of,2012,1,1,0,0,0,0,zone,offset,utc,histogram,bucket,bucket,buckets,get,0,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,zoned,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,1l,key,zoned,date,time,of,2012,2,1,0,0,0,0,zone,offset,utc,bucket,buckets,get,1,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,zoned,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,2l,key,zoned,date,time,of,2012,3,1,0,0,0,0,zone,offset,utc,bucket,buckets,get,2,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,zoned,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,3l
DateHistogramIT -> public void testDSTEndTransition() throws Exception;1524684173;When DST ends, local time turns back one hour, so between 2am and 4am wall time we should have four buckets:_"2015-10-25T02:00:00.000+02:00",_"2015-10-25T02:00:00.000+01:00",_"2015-10-25T03:00:00.000+01:00",_"2015-10-25T04:00:00.000+01:00".;public void testDSTEndTransition() throws Exception {_        SearchResponse response = client().prepareSearch("idx")_                .setQuery(new MatchNoneQueryBuilder())_                .addAggregation(dateHistogram("histo").field("date").timeZone(DateTimeZone.forID("Europe/Oslo"))_                        .dateHistogramInterval(DateHistogramInterval.HOUR).minDocCount(0).extendedBounds(_                                new ExtendedBounds("2015-10-25T02:00:00.000+02:00", "2015-10-25T04:00:00.000+01:00")))_                .execute().actionGet()___        Histogram histo = response.getAggregations().get("histo")__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(4))__        assertThat(((DateTime) buckets.get(1).getKey()).getMillis() - ((DateTime) buckets.get(0).getKey()).getMillis(), equalTo(3600000L))__        assertThat(((DateTime) buckets.get(2).getKey()).getMillis() - ((DateTime) buckets.get(1).getKey()).getMillis(), equalTo(3600000L))__        assertThat(((DateTime) buckets.get(3).getKey()).getMillis() - ((DateTime) buckets.get(2).getKey()).getMillis(), equalTo(3600000L))__    };when,dst,ends,local,time,turns,back,one,hour,so,between,2am,and,4am,wall,time,we,should,have,four,buckets,2015,10,25t02,00,00,000,02,00,2015,10,25t02,00,00,000,01,00,2015,10,25t03,00,00,000,01,00,2015,10,25t04,00,00,000,01,00;public,void,test,dstend,transition,throws,exception,search,response,response,client,prepare,search,idx,set,query,new,match,none,query,builder,add,aggregation,date,histogram,histo,field,date,time,zone,date,time,zone,for,id,europe,oslo,date,histogram,interval,date,histogram,interval,hour,min,doc,count,0,extended,bounds,new,extended,bounds,2015,10,25t02,00,00,000,02,00,2015,10,25t04,00,00,000,01,00,execute,action,get,histogram,histo,response,get,aggregations,get,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,4,assert,that,date,time,buckets,get,1,get,key,get,millis,date,time,buckets,get,0,get,key,get,millis,equal,to,3600000l,assert,that,date,time,buckets,get,2,get,key,get,millis,date,time,buckets,get,1,get,key,get,millis,equal,to,3600000l,assert,that,date,time,buckets,get,3,get,key,get,millis,date,time,buckets,get,2,get,key,get,millis,equal,to,3600000l
DateHistogramIT -> public void testDSTEndTransition() throws Exception;1529487105;When DST ends, local time turns back one hour, so between 2am and 4am wall time we should have four buckets:_"2015-10-25T02:00:00.000+02:00",_"2015-10-25T02:00:00.000+01:00",_"2015-10-25T03:00:00.000+01:00",_"2015-10-25T04:00:00.000+01:00".;public void testDSTEndTransition() throws Exception {_        SearchResponse response = client().prepareSearch("idx")_                .setQuery(new MatchNoneQueryBuilder())_                .addAggregation(dateHistogram("histo").field("date").timeZone(DateTimeZone.forID("Europe/Oslo"))_                        .dateHistogramInterval(DateHistogramInterval.HOUR).minDocCount(0).extendedBounds(_                                new ExtendedBounds("2015-10-25T02:00:00.000+02:00", "2015-10-25T04:00:00.000+01:00")))_                .execute().actionGet()___        Histogram histo = response.getAggregations().get("histo")__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(4))__        assertThat(((DateTime) buckets.get(1).getKey()).getMillis() - ((DateTime) buckets.get(0).getKey()).getMillis(), equalTo(3600000L))__        assertThat(((DateTime) buckets.get(2).getKey()).getMillis() - ((DateTime) buckets.get(1).getKey()).getMillis(), equalTo(3600000L))__        assertThat(((DateTime) buckets.get(3).getKey()).getMillis() - ((DateTime) buckets.get(2).getKey()).getMillis(), equalTo(3600000L))__    };when,dst,ends,local,time,turns,back,one,hour,so,between,2am,and,4am,wall,time,we,should,have,four,buckets,2015,10,25t02,00,00,000,02,00,2015,10,25t02,00,00,000,01,00,2015,10,25t03,00,00,000,01,00,2015,10,25t04,00,00,000,01,00;public,void,test,dstend,transition,throws,exception,search,response,response,client,prepare,search,idx,set,query,new,match,none,query,builder,add,aggregation,date,histogram,histo,field,date,time,zone,date,time,zone,for,id,europe,oslo,date,histogram,interval,date,histogram,interval,hour,min,doc,count,0,extended,bounds,new,extended,bounds,2015,10,25t02,00,00,000,02,00,2015,10,25t04,00,00,000,01,00,execute,action,get,histogram,histo,response,get,aggregations,get,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,4,assert,that,date,time,buckets,get,1,get,key,get,millis,date,time,buckets,get,0,get,key,get,millis,equal,to,3600000l,assert,that,date,time,buckets,get,2,get,key,get,millis,date,time,buckets,get,1,get,key,get,millis,equal,to,3600000l,assert,that,date,time,buckets,get,3,get,key,get,millis,date,time,buckets,get,2,get,key,get,millis,equal,to,3600000l
DateHistogramIT -> public void testDSTEndTransition() throws Exception;1531179852;When DST ends, local time turns back one hour, so between 2am and 4am wall time we should have four buckets:_"2015-10-25T02:00:00.000+02:00",_"2015-10-25T02:00:00.000+01:00",_"2015-10-25T03:00:00.000+01:00",_"2015-10-25T04:00:00.000+01:00".;public void testDSTEndTransition() throws Exception {_        SearchResponse response = client().prepareSearch("idx")_                .setQuery(new MatchNoneQueryBuilder())_                .addAggregation(dateHistogram("histo").field("date").timeZone(DateTimeZone.forID("Europe/Oslo"))_                        .dateHistogramInterval(DateHistogramInterval.HOUR).minDocCount(0).extendedBounds(_                                new ExtendedBounds("2015-10-25T02:00:00.000+02:00", "2015-10-25T04:00:00.000+01:00")))_                .execute().actionGet()___        Histogram histo = response.getAggregations().get("histo")__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(4))__        assertThat(((DateTime) buckets.get(1).getKey()).getMillis() - ((DateTime) buckets.get(0).getKey()).getMillis(), equalTo(3600000L))__        assertThat(((DateTime) buckets.get(2).getKey()).getMillis() - ((DateTime) buckets.get(1).getKey()).getMillis(), equalTo(3600000L))__        assertThat(((DateTime) buckets.get(3).getKey()).getMillis() - ((DateTime) buckets.get(2).getKey()).getMillis(), equalTo(3600000L))__    };when,dst,ends,local,time,turns,back,one,hour,so,between,2am,and,4am,wall,time,we,should,have,four,buckets,2015,10,25t02,00,00,000,02,00,2015,10,25t02,00,00,000,01,00,2015,10,25t03,00,00,000,01,00,2015,10,25t04,00,00,000,01,00;public,void,test,dstend,transition,throws,exception,search,response,response,client,prepare,search,idx,set,query,new,match,none,query,builder,add,aggregation,date,histogram,histo,field,date,time,zone,date,time,zone,for,id,europe,oslo,date,histogram,interval,date,histogram,interval,hour,min,doc,count,0,extended,bounds,new,extended,bounds,2015,10,25t02,00,00,000,02,00,2015,10,25t04,00,00,000,01,00,execute,action,get,histogram,histo,response,get,aggregations,get,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,4,assert,that,date,time,buckets,get,1,get,key,get,millis,date,time,buckets,get,0,get,key,get,millis,equal,to,3600000l,assert,that,date,time,buckets,get,2,get,key,get,millis,date,time,buckets,get,1,get,key,get,millis,equal,to,3600000l,assert,that,date,time,buckets,get,3,get,key,get,millis,date,time,buckets,get,2,get,key,get,millis,equal,to,3600000l
DateHistogramIT -> public void testDSTEndTransition() throws Exception;1536314350;When DST ends, local time turns back one hour, so between 2am and 4am wall time we should have four buckets:_"2015-10-25T02:00:00.000+02:00",_"2015-10-25T02:00:00.000+01:00",_"2015-10-25T03:00:00.000+01:00",_"2015-10-25T04:00:00.000+01:00".;public void testDSTEndTransition() throws Exception {_        SearchResponse response = client().prepareSearch("idx")_                .setQuery(new MatchNoneQueryBuilder())_                .addAggregation(dateHistogram("histo").field("date").timeZone(DateTimeZone.forID("Europe/Oslo"))_                        .dateHistogramInterval(DateHistogramInterval.HOUR).minDocCount(0).extendedBounds(_                                new ExtendedBounds("2015-10-25T02:00:00.000+02:00", "2015-10-25T04:00:00.000+01:00")))_                .execute().actionGet()___        Histogram histo = response.getAggregations().get("histo")__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(4))__        assertThat(((DateTime) buckets.get(1).getKey()).getMillis() - ((DateTime) buckets.get(0).getKey()).getMillis(), equalTo(3600000L))__        assertThat(((DateTime) buckets.get(2).getKey()).getMillis() - ((DateTime) buckets.get(1).getKey()).getMillis(), equalTo(3600000L))__        assertThat(((DateTime) buckets.get(3).getKey()).getMillis() - ((DateTime) buckets.get(2).getKey()).getMillis(), equalTo(3600000L))__    };when,dst,ends,local,time,turns,back,one,hour,so,between,2am,and,4am,wall,time,we,should,have,four,buckets,2015,10,25t02,00,00,000,02,00,2015,10,25t02,00,00,000,01,00,2015,10,25t03,00,00,000,01,00,2015,10,25t04,00,00,000,01,00;public,void,test,dstend,transition,throws,exception,search,response,response,client,prepare,search,idx,set,query,new,match,none,query,builder,add,aggregation,date,histogram,histo,field,date,time,zone,date,time,zone,for,id,europe,oslo,date,histogram,interval,date,histogram,interval,hour,min,doc,count,0,extended,bounds,new,extended,bounds,2015,10,25t02,00,00,000,02,00,2015,10,25t04,00,00,000,01,00,execute,action,get,histogram,histo,response,get,aggregations,get,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,4,assert,that,date,time,buckets,get,1,get,key,get,millis,date,time,buckets,get,0,get,key,get,millis,equal,to,3600000l,assert,that,date,time,buckets,get,2,get,key,get,millis,date,time,buckets,get,1,get,key,get,millis,equal,to,3600000l,assert,that,date,time,buckets,get,3,get,key,get,millis,date,time,buckets,get,2,get,key,get,millis,equal,to,3600000l
DateHistogramIT -> public void testDSTEndTransition() throws Exception;1538067637;When DST ends, local time turns back one hour, so between 2am and 4am wall time we should have four buckets:_"2015-10-25T02:00:00.000+02:00",_"2015-10-25T02:00:00.000+01:00",_"2015-10-25T03:00:00.000+01:00",_"2015-10-25T04:00:00.000+01:00".;public void testDSTEndTransition() throws Exception {_        SearchResponse response = client().prepareSearch("idx")_                .setQuery(new MatchNoneQueryBuilder())_                .addAggregation(dateHistogram("histo").field("date").timeZone(DateTimeZone.forID("Europe/Oslo"))_                        .dateHistogramInterval(DateHistogramInterval.HOUR).minDocCount(0).extendedBounds(_                                new ExtendedBounds("2015-10-25T02:00:00.000+02:00", "2015-10-25T04:00:00.000+01:00")))_                .execute().actionGet()___        Histogram histo = response.getAggregations().get("histo")__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(4))__        assertThat(((DateTime) buckets.get(1).getKey()).getMillis() - ((DateTime) buckets.get(0).getKey()).getMillis(), equalTo(3600000L))__        assertThat(((DateTime) buckets.get(2).getKey()).getMillis() - ((DateTime) buckets.get(1).getKey()).getMillis(), equalTo(3600000L))__        assertThat(((DateTime) buckets.get(3).getKey()).getMillis() - ((DateTime) buckets.get(2).getKey()).getMillis(), equalTo(3600000L))__    };when,dst,ends,local,time,turns,back,one,hour,so,between,2am,and,4am,wall,time,we,should,have,four,buckets,2015,10,25t02,00,00,000,02,00,2015,10,25t02,00,00,000,01,00,2015,10,25t03,00,00,000,01,00,2015,10,25t04,00,00,000,01,00;public,void,test,dstend,transition,throws,exception,search,response,response,client,prepare,search,idx,set,query,new,match,none,query,builder,add,aggregation,date,histogram,histo,field,date,time,zone,date,time,zone,for,id,europe,oslo,date,histogram,interval,date,histogram,interval,hour,min,doc,count,0,extended,bounds,new,extended,bounds,2015,10,25t02,00,00,000,02,00,2015,10,25t04,00,00,000,01,00,execute,action,get,histogram,histo,response,get,aggregations,get,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,4,assert,that,date,time,buckets,get,1,get,key,get,millis,date,time,buckets,get,0,get,key,get,millis,equal,to,3600000l,assert,that,date,time,buckets,get,2,get,key,get,millis,date,time,buckets,get,1,get,key,get,millis,equal,to,3600000l,assert,that,date,time,buckets,get,3,get,key,get,millis,date,time,buckets,get,2,get,key,get,millis,equal,to,3600000l
DateHistogramIT -> public void testDSTEndTransition() throws Exception;1541668945;When DST ends, local time turns back one hour, so between 2am and 4am wall time we should have four buckets:_"2015-10-25T02:00:00.000+02:00",_"2015-10-25T02:00:00.000+01:00",_"2015-10-25T03:00:00.000+01:00",_"2015-10-25T04:00:00.000+01:00".;public void testDSTEndTransition() throws Exception {_        SearchResponse response = client().prepareSearch("idx")_                .setQuery(new MatchNoneQueryBuilder())_                .addAggregation(dateHistogram("histo").field("date").timeZone(DateTimeZone.forID("Europe/Oslo"))_                        .dateHistogramInterval(DateHistogramInterval.HOUR).minDocCount(0).extendedBounds(_                                new ExtendedBounds("2015-10-25T02:00:00.000+02:00", "2015-10-25T04:00:00.000+01:00")))_                .execute().actionGet()___        Histogram histo = response.getAggregations().get("histo")__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(4))__        assertThat(((DateTime) buckets.get(1).getKey()).getMillis() - ((DateTime) buckets.get(0).getKey()).getMillis(), equalTo(3600000L))__        assertThat(((DateTime) buckets.get(2).getKey()).getMillis() - ((DateTime) buckets.get(1).getKey()).getMillis(), equalTo(3600000L))__        assertThat(((DateTime) buckets.get(3).getKey()).getMillis() - ((DateTime) buckets.get(2).getKey()).getMillis(), equalTo(3600000L))__    };when,dst,ends,local,time,turns,back,one,hour,so,between,2am,and,4am,wall,time,we,should,have,four,buckets,2015,10,25t02,00,00,000,02,00,2015,10,25t02,00,00,000,01,00,2015,10,25t03,00,00,000,01,00,2015,10,25t04,00,00,000,01,00;public,void,test,dstend,transition,throws,exception,search,response,response,client,prepare,search,idx,set,query,new,match,none,query,builder,add,aggregation,date,histogram,histo,field,date,time,zone,date,time,zone,for,id,europe,oslo,date,histogram,interval,date,histogram,interval,hour,min,doc,count,0,extended,bounds,new,extended,bounds,2015,10,25t02,00,00,000,02,00,2015,10,25t04,00,00,000,01,00,execute,action,get,histogram,histo,response,get,aggregations,get,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,4,assert,that,date,time,buckets,get,1,get,key,get,millis,date,time,buckets,get,0,get,key,get,millis,equal,to,3600000l,assert,that,date,time,buckets,get,2,get,key,get,millis,date,time,buckets,get,1,get,key,get,millis,equal,to,3600000l,assert,that,date,time,buckets,get,3,get,key,get,millis,date,time,buckets,get,2,get,key,get,millis,equal,to,3600000l
DateHistogramIT -> public void testDSTEndTransition() throws Exception;1544035746;When DST ends, local time turns back one hour, so between 2am and 4am wall time we should have four buckets:_"2015-10-25T02:00:00.000+02:00",_"2015-10-25T02:00:00.000+01:00",_"2015-10-25T03:00:00.000+01:00",_"2015-10-25T04:00:00.000+01:00".;public void testDSTEndTransition() throws Exception {_        SearchResponse response = client().prepareSearch("idx")_                .setQuery(new MatchNoneQueryBuilder())_                .addAggregation(dateHistogram("histo").field("date").timeZone(DateTimeZone.forID("Europe/Oslo"))_                        .dateHistogramInterval(DateHistogramInterval.HOUR).minDocCount(0).extendedBounds(_                                new ExtendedBounds("2015-10-25T02:00:00.000+02:00", "2015-10-25T04:00:00.000+01:00")))_                .execute().actionGet()___        Histogram histo = response.getAggregations().get("histo")__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(4))__        assertThat(((DateTime) buckets.get(1).getKey()).getMillis() - ((DateTime) buckets.get(0).getKey()).getMillis(), equalTo(3600000L))__        assertThat(((DateTime) buckets.get(2).getKey()).getMillis() - ((DateTime) buckets.get(1).getKey()).getMillis(), equalTo(3600000L))__        assertThat(((DateTime) buckets.get(3).getKey()).getMillis() - ((DateTime) buckets.get(2).getKey()).getMillis(), equalTo(3600000L))__    };when,dst,ends,local,time,turns,back,one,hour,so,between,2am,and,4am,wall,time,we,should,have,four,buckets,2015,10,25t02,00,00,000,02,00,2015,10,25t02,00,00,000,01,00,2015,10,25t03,00,00,000,01,00,2015,10,25t04,00,00,000,01,00;public,void,test,dstend,transition,throws,exception,search,response,response,client,prepare,search,idx,set,query,new,match,none,query,builder,add,aggregation,date,histogram,histo,field,date,time,zone,date,time,zone,for,id,europe,oslo,date,histogram,interval,date,histogram,interval,hour,min,doc,count,0,extended,bounds,new,extended,bounds,2015,10,25t02,00,00,000,02,00,2015,10,25t04,00,00,000,01,00,execute,action,get,histogram,histo,response,get,aggregations,get,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,4,assert,that,date,time,buckets,get,1,get,key,get,millis,date,time,buckets,get,0,get,key,get,millis,equal,to,3600000l,assert,that,date,time,buckets,get,2,get,key,get,millis,date,time,buckets,get,1,get,key,get,millis,equal,to,3600000l,assert,that,date,time,buckets,get,3,get,key,get,millis,date,time,buckets,get,2,get,key,get,millis,equal,to,3600000l
DateHistogramIT -> public void testDSTEndTransition() throws Exception;1544110272;When DST ends, local time turns back one hour, so between 2am and 4am wall time we should have four buckets:_"2015-10-25T02:00:00.000+02:00",_"2015-10-25T02:00:00.000+01:00",_"2015-10-25T03:00:00.000+01:00",_"2015-10-25T04:00:00.000+01:00".;public void testDSTEndTransition() throws Exception {_        SearchResponse response = client().prepareSearch("idx")_                .setQuery(new MatchNoneQueryBuilder())_                .addAggregation(dateHistogram("histo").field("date").timeZone(DateTimeZone.forID("Europe/Oslo"))_                        .dateHistogramInterval(DateHistogramInterval.HOUR).minDocCount(0).extendedBounds(_                                new ExtendedBounds("2015-10-25T02:00:00.000+02:00", "2015-10-25T04:00:00.000+01:00")))_                .get()___        Histogram histo = response.getAggregations().get("histo")__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(4))__        assertThat(((DateTime) buckets.get(1).getKey()).getMillis() - ((DateTime) buckets.get(0).getKey()).getMillis(), equalTo(3600000L))__        assertThat(((DateTime) buckets.get(2).getKey()).getMillis() - ((DateTime) buckets.get(1).getKey()).getMillis(), equalTo(3600000L))__        assertThat(((DateTime) buckets.get(3).getKey()).getMillis() - ((DateTime) buckets.get(2).getKey()).getMillis(), equalTo(3600000L))__    };when,dst,ends,local,time,turns,back,one,hour,so,between,2am,and,4am,wall,time,we,should,have,four,buckets,2015,10,25t02,00,00,000,02,00,2015,10,25t02,00,00,000,01,00,2015,10,25t03,00,00,000,01,00,2015,10,25t04,00,00,000,01,00;public,void,test,dstend,transition,throws,exception,search,response,response,client,prepare,search,idx,set,query,new,match,none,query,builder,add,aggregation,date,histogram,histo,field,date,time,zone,date,time,zone,for,id,europe,oslo,date,histogram,interval,date,histogram,interval,hour,min,doc,count,0,extended,bounds,new,extended,bounds,2015,10,25t02,00,00,000,02,00,2015,10,25t04,00,00,000,01,00,get,histogram,histo,response,get,aggregations,get,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,4,assert,that,date,time,buckets,get,1,get,key,get,millis,date,time,buckets,get,0,get,key,get,millis,equal,to,3600000l,assert,that,date,time,buckets,get,2,get,key,get,millis,date,time,buckets,get,1,get,key,get,millis,equal,to,3600000l,assert,that,date,time,buckets,get,3,get,key,get,millis,date,time,buckets,get,2,get,key,get,millis,equal,to,3600000l
DateHistogramIT -> public void testDSTEndTransition() throws Exception;1544232221;When DST ends, local time turns back one hour, so between 2am and 4am wall time we should have four buckets:_"2015-10-25T02:00:00.000+02:00",_"2015-10-25T02:00:00.000+01:00",_"2015-10-25T03:00:00.000+01:00",_"2015-10-25T04:00:00.000+01:00".;public void testDSTEndTransition() throws Exception {_        SearchResponse response = client().prepareSearch("idx")_                .setQuery(new MatchNoneQueryBuilder())_                .addAggregation(dateHistogram("histo").field("date").timeZone(DateTimeZone.forID("Europe/Oslo"))_                        .dateHistogramInterval(DateHistogramInterval.HOUR).minDocCount(0).extendedBounds(_                                new ExtendedBounds("2015-10-25T02:00:00.000+02:00", "2015-10-25T04:00:00.000+01:00")))_                .get()___        Histogram histo = response.getAggregations().get("histo")__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(4))__        assertThat(((DateTime) buckets.get(1).getKey()).getMillis() - ((DateTime) buckets.get(0).getKey()).getMillis(), equalTo(3600000L))__        assertThat(((DateTime) buckets.get(2).getKey()).getMillis() - ((DateTime) buckets.get(1).getKey()).getMillis(), equalTo(3600000L))__        assertThat(((DateTime) buckets.get(3).getKey()).getMillis() - ((DateTime) buckets.get(2).getKey()).getMillis(), equalTo(3600000L))__    };when,dst,ends,local,time,turns,back,one,hour,so,between,2am,and,4am,wall,time,we,should,have,four,buckets,2015,10,25t02,00,00,000,02,00,2015,10,25t02,00,00,000,01,00,2015,10,25t03,00,00,000,01,00,2015,10,25t04,00,00,000,01,00;public,void,test,dstend,transition,throws,exception,search,response,response,client,prepare,search,idx,set,query,new,match,none,query,builder,add,aggregation,date,histogram,histo,field,date,time,zone,date,time,zone,for,id,europe,oslo,date,histogram,interval,date,histogram,interval,hour,min,doc,count,0,extended,bounds,new,extended,bounds,2015,10,25t02,00,00,000,02,00,2015,10,25t04,00,00,000,01,00,get,histogram,histo,response,get,aggregations,get,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,4,assert,that,date,time,buckets,get,1,get,key,get,millis,date,time,buckets,get,0,get,key,get,millis,equal,to,3600000l,assert,that,date,time,buckets,get,2,get,key,get,millis,date,time,buckets,get,1,get,key,get,millis,equal,to,3600000l,assert,that,date,time,buckets,get,3,get,key,get,millis,date,time,buckets,get,2,get,key,get,millis,equal,to,3600000l
DateHistogramIT -> public void testDSTEndTransition() throws Exception;1544600864;When DST ends, local time turns back one hour, so between 2am and 4am wall time we should have four buckets:_"2015-10-25T02:00:00.000+02:00",_"2015-10-25T02:00:00.000+01:00",_"2015-10-25T03:00:00.000+01:00",_"2015-10-25T04:00:00.000+01:00".;public void testDSTEndTransition() throws Exception {_        SearchResponse response = client().prepareSearch("idx")_                .setQuery(new MatchNoneQueryBuilder())_                .addAggregation(dateHistogram("histo").field("date").timeZone(DateTimeZone.forID("Europe/Oslo"))_                        .dateHistogramInterval(DateHistogramInterval.HOUR).minDocCount(0).extendedBounds(_                                new ExtendedBounds("2015-10-25T02:00:00.000+02:00", "2015-10-25T04:00:00.000+01:00")))_                .get()___        Histogram histo = response.getAggregations().get("histo")__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(4))__        assertThat(((DateTime) buckets.get(1).getKey()).getMillis() - ((DateTime) buckets.get(0).getKey()).getMillis(), equalTo(3600000L))__        assertThat(((DateTime) buckets.get(2).getKey()).getMillis() - ((DateTime) buckets.get(1).getKey()).getMillis(), equalTo(3600000L))__        assertThat(((DateTime) buckets.get(3).getKey()).getMillis() - ((DateTime) buckets.get(2).getKey()).getMillis(), equalTo(3600000L))__    };when,dst,ends,local,time,turns,back,one,hour,so,between,2am,and,4am,wall,time,we,should,have,four,buckets,2015,10,25t02,00,00,000,02,00,2015,10,25t02,00,00,000,01,00,2015,10,25t03,00,00,000,01,00,2015,10,25t04,00,00,000,01,00;public,void,test,dstend,transition,throws,exception,search,response,response,client,prepare,search,idx,set,query,new,match,none,query,builder,add,aggregation,date,histogram,histo,field,date,time,zone,date,time,zone,for,id,europe,oslo,date,histogram,interval,date,histogram,interval,hour,min,doc,count,0,extended,bounds,new,extended,bounds,2015,10,25t02,00,00,000,02,00,2015,10,25t04,00,00,000,01,00,get,histogram,histo,response,get,aggregations,get,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,4,assert,that,date,time,buckets,get,1,get,key,get,millis,date,time,buckets,get,0,get,key,get,millis,equal,to,3600000l,assert,that,date,time,buckets,get,2,get,key,get,millis,date,time,buckets,get,1,get,key,get,millis,equal,to,3600000l,assert,that,date,time,buckets,get,3,get,key,get,millis,date,time,buckets,get,2,get,key,get,millis,equal,to,3600000l
DateHistogramIT -> public void testDSTEndTransition() throws Exception;1548236405;When DST ends, local time turns back one hour, so between 2am and 4am wall time we should have four buckets:_"2015-10-25T02:00:00.000+02:00",_"2015-10-25T02:00:00.000+01:00",_"2015-10-25T03:00:00.000+01:00",_"2015-10-25T04:00:00.000+01:00".;public void testDSTEndTransition() throws Exception {_        SearchResponse response = client().prepareSearch("idx")_                .setQuery(new MatchNoneQueryBuilder())_                .addAggregation(dateHistogram("histo").field("date").timeZone(ZoneId.of("Europe/Oslo"))_                        .dateHistogramInterval(DateHistogramInterval.HOUR).minDocCount(0).extendedBounds(_                                new ExtendedBounds("2015-10-25T02:00:00.000+02:00", "2015-10-25T04:00:00.000+01:00")))_                .get()___        Histogram histo = response.getAggregations().get("histo")__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(4))__        assertThat(((ZonedDateTime) buckets.get(1).getKey()).toInstant().toEpochMilli() -_            ((ZonedDateTime) buckets.get(0).getKey()).toInstant().toEpochMilli(), equalTo(3600000L))__        assertThat(((ZonedDateTime) buckets.get(2).getKey()).toInstant().toEpochMilli() -_            ((ZonedDateTime) buckets.get(1).getKey()).toInstant().toEpochMilli(), equalTo(3600000L))__        assertThat(((ZonedDateTime) buckets.get(3).getKey()).toInstant().toEpochMilli() -_            ((ZonedDateTime) buckets.get(2).getKey()).toInstant().toEpochMilli(), equalTo(3600000L))__    };when,dst,ends,local,time,turns,back,one,hour,so,between,2am,and,4am,wall,time,we,should,have,four,buckets,2015,10,25t02,00,00,000,02,00,2015,10,25t02,00,00,000,01,00,2015,10,25t03,00,00,000,01,00,2015,10,25t04,00,00,000,01,00;public,void,test,dstend,transition,throws,exception,search,response,response,client,prepare,search,idx,set,query,new,match,none,query,builder,add,aggregation,date,histogram,histo,field,date,time,zone,zone,id,of,europe,oslo,date,histogram,interval,date,histogram,interval,hour,min,doc,count,0,extended,bounds,new,extended,bounds,2015,10,25t02,00,00,000,02,00,2015,10,25t04,00,00,000,01,00,get,histogram,histo,response,get,aggregations,get,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,4,assert,that,zoned,date,time,buckets,get,1,get,key,to,instant,to,epoch,milli,zoned,date,time,buckets,get,0,get,key,to,instant,to,epoch,milli,equal,to,3600000l,assert,that,zoned,date,time,buckets,get,2,get,key,to,instant,to,epoch,milli,zoned,date,time,buckets,get,1,get,key,to,instant,to,epoch,milli,equal,to,3600000l,assert,that,zoned,date,time,buckets,get,3,get,key,to,instant,to,epoch,milli,zoned,date,time,buckets,get,2,get,key,to,instant,to,epoch,milli,equal,to,3600000l
DateHistogramIT -> public void testDSTEndTransition() throws Exception;1548921340;When DST ends, local time turns back one hour, so between 2am and 4am wall time we should have four buckets:_"2015-10-25T02:00:00.000+02:00",_"2015-10-25T02:00:00.000+01:00",_"2015-10-25T03:00:00.000+01:00",_"2015-10-25T04:00:00.000+01:00".;public void testDSTEndTransition() throws Exception {_        SearchResponse response = client().prepareSearch("idx")_                .setQuery(new MatchNoneQueryBuilder())_                .addAggregation(dateHistogram("histo").field("date").timeZone(ZoneId.of("Europe/Oslo"))_                        .dateHistogramInterval(DateHistogramInterval.HOUR).minDocCount(0).extendedBounds(_                                new ExtendedBounds("2015-10-25T02:00:00.000+02:00", "2015-10-25T04:00:00.000+01:00")))_                .get()___        Histogram histo = response.getAggregations().get("histo")__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(4))__        assertThat(((ZonedDateTime) buckets.get(1).getKey()).toInstant().toEpochMilli() -_            ((ZonedDateTime) buckets.get(0).getKey()).toInstant().toEpochMilli(), equalTo(3600000L))__        assertThat(((ZonedDateTime) buckets.get(2).getKey()).toInstant().toEpochMilli() -_            ((ZonedDateTime) buckets.get(1).getKey()).toInstant().toEpochMilli(), equalTo(3600000L))__        assertThat(((ZonedDateTime) buckets.get(3).getKey()).toInstant().toEpochMilli() -_            ((ZonedDateTime) buckets.get(2).getKey()).toInstant().toEpochMilli(), equalTo(3600000L))__    };when,dst,ends,local,time,turns,back,one,hour,so,between,2am,and,4am,wall,time,we,should,have,four,buckets,2015,10,25t02,00,00,000,02,00,2015,10,25t02,00,00,000,01,00,2015,10,25t03,00,00,000,01,00,2015,10,25t04,00,00,000,01,00;public,void,test,dstend,transition,throws,exception,search,response,response,client,prepare,search,idx,set,query,new,match,none,query,builder,add,aggregation,date,histogram,histo,field,date,time,zone,zone,id,of,europe,oslo,date,histogram,interval,date,histogram,interval,hour,min,doc,count,0,extended,bounds,new,extended,bounds,2015,10,25t02,00,00,000,02,00,2015,10,25t04,00,00,000,01,00,get,histogram,histo,response,get,aggregations,get,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,4,assert,that,zoned,date,time,buckets,get,1,get,key,to,instant,to,epoch,milli,zoned,date,time,buckets,get,0,get,key,to,instant,to,epoch,milli,equal,to,3600000l,assert,that,zoned,date,time,buckets,get,2,get,key,to,instant,to,epoch,milli,zoned,date,time,buckets,get,1,get,key,to,instant,to,epoch,milli,equal,to,3600000l,assert,that,zoned,date,time,buckets,get,3,get,key,to,instant,to,epoch,milli,zoned,date,time,buckets,get,2,get,key,to,instant,to,epoch,milli,equal,to,3600000l
DateHistogramIT -> public void testDSTEndTransition() throws Exception;1550743790;When DST ends, local time turns back one hour, so between 2am and 4am wall time we should have four buckets:_"2015-10-25T02:00:00.000+02:00",_"2015-10-25T02:00:00.000+01:00",_"2015-10-25T03:00:00.000+01:00",_"2015-10-25T04:00:00.000+01:00".;public void testDSTEndTransition() throws Exception {_        SearchResponse response = client().prepareSearch("idx")_                .setQuery(new MatchNoneQueryBuilder())_                .addAggregation(dateHistogram("histo").field("date").timeZone(ZoneId.of("Europe/Oslo"))_                        .dateHistogramInterval(DateHistogramInterval.HOUR).minDocCount(0).extendedBounds(_                                new ExtendedBounds("2015-10-25T02:00:00.000+02:00", "2015-10-25T04:00:00.000+01:00")))_                .get()___        Histogram histo = response.getAggregations().get("histo")__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(4))__        assertThat(((ZonedDateTime) buckets.get(1).getKey()).toInstant().toEpochMilli() -_            ((ZonedDateTime) buckets.get(0).getKey()).toInstant().toEpochMilli(), equalTo(3600000L))__        assertThat(((ZonedDateTime) buckets.get(2).getKey()).toInstant().toEpochMilli() -_            ((ZonedDateTime) buckets.get(1).getKey()).toInstant().toEpochMilli(), equalTo(3600000L))__        assertThat(((ZonedDateTime) buckets.get(3).getKey()).toInstant().toEpochMilli() -_            ((ZonedDateTime) buckets.get(2).getKey()).toInstant().toEpochMilli(), equalTo(3600000L))__    };when,dst,ends,local,time,turns,back,one,hour,so,between,2am,and,4am,wall,time,we,should,have,four,buckets,2015,10,25t02,00,00,000,02,00,2015,10,25t02,00,00,000,01,00,2015,10,25t03,00,00,000,01,00,2015,10,25t04,00,00,000,01,00;public,void,test,dstend,transition,throws,exception,search,response,response,client,prepare,search,idx,set,query,new,match,none,query,builder,add,aggregation,date,histogram,histo,field,date,time,zone,zone,id,of,europe,oslo,date,histogram,interval,date,histogram,interval,hour,min,doc,count,0,extended,bounds,new,extended,bounds,2015,10,25t02,00,00,000,02,00,2015,10,25t04,00,00,000,01,00,get,histogram,histo,response,get,aggregations,get,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,4,assert,that,zoned,date,time,buckets,get,1,get,key,to,instant,to,epoch,milli,zoned,date,time,buckets,get,0,get,key,to,instant,to,epoch,milli,equal,to,3600000l,assert,that,zoned,date,time,buckets,get,2,get,key,to,instant,to,epoch,milli,zoned,date,time,buckets,get,1,get,key,to,instant,to,epoch,milli,equal,to,3600000l,assert,that,zoned,date,time,buckets,get,3,get,key,to,instant,to,epoch,milli,zoned,date,time,buckets,get,2,get,key,to,instant,to,epoch,milli,equal,to,3600000l
DateHistogramIT -> public void testSingleValueFieldWithExtendedBoundsOffset() throws Exception;1524684173;Test date histogram aggregation with day interval, offset and_extended bounds (see https://github.com/elastic/elasticsearch/issues/23776);public void testSingleValueFieldWithExtendedBoundsOffset() throws Exception {_        String index = "test23776"__        prepareCreate(index)_                .setSettings(Settings.builder().put(indexSettings()).put("index.number_of_shards", 1).put("index.number_of_replicas", 0))_                .execute().actionGet()___        List<IndexRequestBuilder> builders = new ArrayList<>()__        builders.add(indexDoc(index, DateTime.parse("2016-01-03T08:00:00.000Z"), 1))__        builders.add(indexDoc(index, DateTime.parse("2016-01-03T08:00:00.000Z"), 2))__        builders.add(indexDoc(index, DateTime.parse("2016-01-06T08:00:00.000Z"), 3))__        builders.add(indexDoc(index, DateTime.parse("2016-01-06T08:00:00.000Z"), 4))__        indexRandom(true, builders)__        ensureSearchable(index)___        SearchResponse response = null__        _        response = client()_                .prepareSearch(index)_                .addAggregation(_                        dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.days(1)).offset("+6h").minDocCount(0)_                                .extendedBounds(new ExtendedBounds("2016-01-01T06:00:00Z", "2016-01-08T08:00:00Z"))_                ).execute().actionGet()__        assertSearchResponse(response)___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(8))___        assertEquals("2016-01-01T06:00:00.000Z", buckets.get(0).getKeyAsString())__        assertEquals(0, buckets.get(0).getDocCount())__        assertEquals("2016-01-02T06:00:00.000Z", buckets.get(1).getKeyAsString())__        assertEquals(0, buckets.get(1).getDocCount())__        assertEquals("2016-01-03T06:00:00.000Z", buckets.get(2).getKeyAsString())__        assertEquals(2, buckets.get(2).getDocCount())__        assertEquals("2016-01-04T06:00:00.000Z", buckets.get(3).getKeyAsString())__        assertEquals(0, buckets.get(3).getDocCount())__        assertEquals("2016-01-05T06:00:00.000Z", buckets.get(4).getKeyAsString())__        assertEquals(0, buckets.get(4).getDocCount())__        assertEquals("2016-01-06T06:00:00.000Z", buckets.get(5).getKeyAsString())__        assertEquals(2, buckets.get(5).getDocCount())__        assertEquals("2016-01-07T06:00:00.000Z", buckets.get(6).getKeyAsString())__        assertEquals(0, buckets.get(6).getDocCount())__        assertEquals("2016-01-08T06:00:00.000Z", buckets.get(7).getKeyAsString())__        assertEquals(0, buckets.get(7).getDocCount())___        internalCluster().wipeIndices(index)__    };test,date,histogram,aggregation,with,day,interval,offset,and,extended,bounds,see,https,github,com,elastic,elasticsearch,issues,23776;public,void,test,single,value,field,with,extended,bounds,offset,throws,exception,string,index,test23776,prepare,create,index,set,settings,settings,builder,put,index,settings,put,index,1,put,index,0,execute,action,get,list,index,request,builder,builders,new,array,list,builders,add,index,doc,index,date,time,parse,2016,01,03t08,00,00,000z,1,builders,add,index,doc,index,date,time,parse,2016,01,03t08,00,00,000z,2,builders,add,index,doc,index,date,time,parse,2016,01,06t08,00,00,000z,3,builders,add,index,doc,index,date,time,parse,2016,01,06t08,00,00,000z,4,index,random,true,builders,ensure,searchable,index,search,response,response,null,response,client,prepare,search,index,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,days,1,offset,6h,min,doc,count,0,extended,bounds,new,extended,bounds,2016,01,01t06,00,00z,2016,01,08t08,00,00z,execute,action,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,8,assert,equals,2016,01,01t06,00,00,000z,buckets,get,0,get,key,as,string,assert,equals,0,buckets,get,0,get,doc,count,assert,equals,2016,01,02t06,00,00,000z,buckets,get,1,get,key,as,string,assert,equals,0,buckets,get,1,get,doc,count,assert,equals,2016,01,03t06,00,00,000z,buckets,get,2,get,key,as,string,assert,equals,2,buckets,get,2,get,doc,count,assert,equals,2016,01,04t06,00,00,000z,buckets,get,3,get,key,as,string,assert,equals,0,buckets,get,3,get,doc,count,assert,equals,2016,01,05t06,00,00,000z,buckets,get,4,get,key,as,string,assert,equals,0,buckets,get,4,get,doc,count,assert,equals,2016,01,06t06,00,00,000z,buckets,get,5,get,key,as,string,assert,equals,2,buckets,get,5,get,doc,count,assert,equals,2016,01,07t06,00,00,000z,buckets,get,6,get,key,as,string,assert,equals,0,buckets,get,6,get,doc,count,assert,equals,2016,01,08t06,00,00,000z,buckets,get,7,get,key,as,string,assert,equals,0,buckets,get,7,get,doc,count,internal,cluster,wipe,indices,index
DateHistogramIT -> public void testSingleValueFieldWithExtendedBoundsOffset() throws Exception;1529487105;Test date histogram aggregation with day interval, offset and_extended bounds (see https://github.com/elastic/elasticsearch/issues/23776);public void testSingleValueFieldWithExtendedBoundsOffset() throws Exception {_        String index = "test23776"__        prepareCreate(index)_                .setSettings(Settings.builder().put(indexSettings()).put("index.number_of_shards", 1).put("index.number_of_replicas", 0))_                .execute().actionGet()___        List<IndexRequestBuilder> builders = new ArrayList<>()__        builders.add(indexDoc(index, DateTime.parse("2016-01-03T08:00:00.000Z"), 1))__        builders.add(indexDoc(index, DateTime.parse("2016-01-03T08:00:00.000Z"), 2))__        builders.add(indexDoc(index, DateTime.parse("2016-01-06T08:00:00.000Z"), 3))__        builders.add(indexDoc(index, DateTime.parse("2016-01-06T08:00:00.000Z"), 4))__        indexRandom(true, builders)__        ensureSearchable(index)___        SearchResponse response = null__        _        response = client()_                .prepareSearch(index)_                .addAggregation(_                        dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.days(1)).offset("+6h").minDocCount(0)_                                .extendedBounds(new ExtendedBounds("2016-01-01T06:00:00Z", "2016-01-08T08:00:00Z"))_                ).execute().actionGet()__        assertSearchResponse(response)___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(8))___        assertEquals("2016-01-01T06:00:00.000Z", buckets.get(0).getKeyAsString())__        assertEquals(0, buckets.get(0).getDocCount())__        assertEquals("2016-01-02T06:00:00.000Z", buckets.get(1).getKeyAsString())__        assertEquals(0, buckets.get(1).getDocCount())__        assertEquals("2016-01-03T06:00:00.000Z", buckets.get(2).getKeyAsString())__        assertEquals(2, buckets.get(2).getDocCount())__        assertEquals("2016-01-04T06:00:00.000Z", buckets.get(3).getKeyAsString())__        assertEquals(0, buckets.get(3).getDocCount())__        assertEquals("2016-01-05T06:00:00.000Z", buckets.get(4).getKeyAsString())__        assertEquals(0, buckets.get(4).getDocCount())__        assertEquals("2016-01-06T06:00:00.000Z", buckets.get(5).getKeyAsString())__        assertEquals(2, buckets.get(5).getDocCount())__        assertEquals("2016-01-07T06:00:00.000Z", buckets.get(6).getKeyAsString())__        assertEquals(0, buckets.get(6).getDocCount())__        assertEquals("2016-01-08T06:00:00.000Z", buckets.get(7).getKeyAsString())__        assertEquals(0, buckets.get(7).getDocCount())___        internalCluster().wipeIndices(index)__    };test,date,histogram,aggregation,with,day,interval,offset,and,extended,bounds,see,https,github,com,elastic,elasticsearch,issues,23776;public,void,test,single,value,field,with,extended,bounds,offset,throws,exception,string,index,test23776,prepare,create,index,set,settings,settings,builder,put,index,settings,put,index,1,put,index,0,execute,action,get,list,index,request,builder,builders,new,array,list,builders,add,index,doc,index,date,time,parse,2016,01,03t08,00,00,000z,1,builders,add,index,doc,index,date,time,parse,2016,01,03t08,00,00,000z,2,builders,add,index,doc,index,date,time,parse,2016,01,06t08,00,00,000z,3,builders,add,index,doc,index,date,time,parse,2016,01,06t08,00,00,000z,4,index,random,true,builders,ensure,searchable,index,search,response,response,null,response,client,prepare,search,index,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,days,1,offset,6h,min,doc,count,0,extended,bounds,new,extended,bounds,2016,01,01t06,00,00z,2016,01,08t08,00,00z,execute,action,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,8,assert,equals,2016,01,01t06,00,00,000z,buckets,get,0,get,key,as,string,assert,equals,0,buckets,get,0,get,doc,count,assert,equals,2016,01,02t06,00,00,000z,buckets,get,1,get,key,as,string,assert,equals,0,buckets,get,1,get,doc,count,assert,equals,2016,01,03t06,00,00,000z,buckets,get,2,get,key,as,string,assert,equals,2,buckets,get,2,get,doc,count,assert,equals,2016,01,04t06,00,00,000z,buckets,get,3,get,key,as,string,assert,equals,0,buckets,get,3,get,doc,count,assert,equals,2016,01,05t06,00,00,000z,buckets,get,4,get,key,as,string,assert,equals,0,buckets,get,4,get,doc,count,assert,equals,2016,01,06t06,00,00,000z,buckets,get,5,get,key,as,string,assert,equals,2,buckets,get,5,get,doc,count,assert,equals,2016,01,07t06,00,00,000z,buckets,get,6,get,key,as,string,assert,equals,0,buckets,get,6,get,doc,count,assert,equals,2016,01,08t06,00,00,000z,buckets,get,7,get,key,as,string,assert,equals,0,buckets,get,7,get,doc,count,internal,cluster,wipe,indices,index
DateHistogramIT -> public void testSingleValueFieldWithExtendedBoundsOffset() throws Exception;1531179852;Test date histogram aggregation with day interval, offset and_extended bounds (see https://github.com/elastic/elasticsearch/issues/23776);public void testSingleValueFieldWithExtendedBoundsOffset() throws Exception {_        String index = "test23776"__        prepareCreate(index)_                .setSettings(Settings.builder().put(indexSettings()).put("index.number_of_shards", 1).put("index.number_of_replicas", 0))_                .execute().actionGet()___        List<IndexRequestBuilder> builders = new ArrayList<>()__        builders.add(indexDoc(index, DateTime.parse("2016-01-03T08:00:00.000Z"), 1))__        builders.add(indexDoc(index, DateTime.parse("2016-01-03T08:00:00.000Z"), 2))__        builders.add(indexDoc(index, DateTime.parse("2016-01-06T08:00:00.000Z"), 3))__        builders.add(indexDoc(index, DateTime.parse("2016-01-06T08:00:00.000Z"), 4))__        indexRandom(true, builders)__        ensureSearchable(index)___        SearchResponse response = null__        _        response = client()_                .prepareSearch(index)_                .addAggregation(_                        dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.days(1)).offset("+6h").minDocCount(0)_                                .extendedBounds(new ExtendedBounds("2016-01-01T06:00:00Z", "2016-01-08T08:00:00Z"))_                ).execute().actionGet()__        assertSearchResponse(response)___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(8))___        assertEquals("2016-01-01T06:00:00.000Z", buckets.get(0).getKeyAsString())__        assertEquals(0, buckets.get(0).getDocCount())__        assertEquals("2016-01-02T06:00:00.000Z", buckets.get(1).getKeyAsString())__        assertEquals(0, buckets.get(1).getDocCount())__        assertEquals("2016-01-03T06:00:00.000Z", buckets.get(2).getKeyAsString())__        assertEquals(2, buckets.get(2).getDocCount())__        assertEquals("2016-01-04T06:00:00.000Z", buckets.get(3).getKeyAsString())__        assertEquals(0, buckets.get(3).getDocCount())__        assertEquals("2016-01-05T06:00:00.000Z", buckets.get(4).getKeyAsString())__        assertEquals(0, buckets.get(4).getDocCount())__        assertEquals("2016-01-06T06:00:00.000Z", buckets.get(5).getKeyAsString())__        assertEquals(2, buckets.get(5).getDocCount())__        assertEquals("2016-01-07T06:00:00.000Z", buckets.get(6).getKeyAsString())__        assertEquals(0, buckets.get(6).getDocCount())__        assertEquals("2016-01-08T06:00:00.000Z", buckets.get(7).getKeyAsString())__        assertEquals(0, buckets.get(7).getDocCount())___        internalCluster().wipeIndices(index)__    };test,date,histogram,aggregation,with,day,interval,offset,and,extended,bounds,see,https,github,com,elastic,elasticsearch,issues,23776;public,void,test,single,value,field,with,extended,bounds,offset,throws,exception,string,index,test23776,prepare,create,index,set,settings,settings,builder,put,index,settings,put,index,1,put,index,0,execute,action,get,list,index,request,builder,builders,new,array,list,builders,add,index,doc,index,date,time,parse,2016,01,03t08,00,00,000z,1,builders,add,index,doc,index,date,time,parse,2016,01,03t08,00,00,000z,2,builders,add,index,doc,index,date,time,parse,2016,01,06t08,00,00,000z,3,builders,add,index,doc,index,date,time,parse,2016,01,06t08,00,00,000z,4,index,random,true,builders,ensure,searchable,index,search,response,response,null,response,client,prepare,search,index,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,days,1,offset,6h,min,doc,count,0,extended,bounds,new,extended,bounds,2016,01,01t06,00,00z,2016,01,08t08,00,00z,execute,action,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,8,assert,equals,2016,01,01t06,00,00,000z,buckets,get,0,get,key,as,string,assert,equals,0,buckets,get,0,get,doc,count,assert,equals,2016,01,02t06,00,00,000z,buckets,get,1,get,key,as,string,assert,equals,0,buckets,get,1,get,doc,count,assert,equals,2016,01,03t06,00,00,000z,buckets,get,2,get,key,as,string,assert,equals,2,buckets,get,2,get,doc,count,assert,equals,2016,01,04t06,00,00,000z,buckets,get,3,get,key,as,string,assert,equals,0,buckets,get,3,get,doc,count,assert,equals,2016,01,05t06,00,00,000z,buckets,get,4,get,key,as,string,assert,equals,0,buckets,get,4,get,doc,count,assert,equals,2016,01,06t06,00,00,000z,buckets,get,5,get,key,as,string,assert,equals,2,buckets,get,5,get,doc,count,assert,equals,2016,01,07t06,00,00,000z,buckets,get,6,get,key,as,string,assert,equals,0,buckets,get,6,get,doc,count,assert,equals,2016,01,08t06,00,00,000z,buckets,get,7,get,key,as,string,assert,equals,0,buckets,get,7,get,doc,count,internal,cluster,wipe,indices,index
DateHistogramIT -> public void testSingleValueFieldWithExtendedBoundsOffset() throws Exception;1536314350;Test date histogram aggregation with day interval, offset and_extended bounds (see https://github.com/elastic/elasticsearch/issues/23776);public void testSingleValueFieldWithExtendedBoundsOffset() throws Exception {_        String index = "test23776"__        prepareCreate(index)_                .setSettings(Settings.builder().put(indexSettings()).put("index.number_of_shards", 1).put("index.number_of_replicas", 0))_                .execute().actionGet()___        List<IndexRequestBuilder> builders = new ArrayList<>()__        builders.add(indexDoc(index, DateTime.parse("2016-01-03T08:00:00.000Z"), 1))__        builders.add(indexDoc(index, DateTime.parse("2016-01-03T08:00:00.000Z"), 2))__        builders.add(indexDoc(index, DateTime.parse("2016-01-06T08:00:00.000Z"), 3))__        builders.add(indexDoc(index, DateTime.parse("2016-01-06T08:00:00.000Z"), 4))__        indexRandom(true, builders)__        ensureSearchable(index)___        SearchResponse response = null__        _        response = client()_                .prepareSearch(index)_                .addAggregation(_                        dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.days(1)).offset("+6h").minDocCount(0)_                                .extendedBounds(new ExtendedBounds("2016-01-01T06:00:00Z", "2016-01-08T08:00:00Z"))_                ).execute().actionGet()__        assertSearchResponse(response)___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(8))___        assertEquals("2016-01-01T06:00:00.000Z", buckets.get(0).getKeyAsString())__        assertEquals(0, buckets.get(0).getDocCount())__        assertEquals("2016-01-02T06:00:00.000Z", buckets.get(1).getKeyAsString())__        assertEquals(0, buckets.get(1).getDocCount())__        assertEquals("2016-01-03T06:00:00.000Z", buckets.get(2).getKeyAsString())__        assertEquals(2, buckets.get(2).getDocCount())__        assertEquals("2016-01-04T06:00:00.000Z", buckets.get(3).getKeyAsString())__        assertEquals(0, buckets.get(3).getDocCount())__        assertEquals("2016-01-05T06:00:00.000Z", buckets.get(4).getKeyAsString())__        assertEquals(0, buckets.get(4).getDocCount())__        assertEquals("2016-01-06T06:00:00.000Z", buckets.get(5).getKeyAsString())__        assertEquals(2, buckets.get(5).getDocCount())__        assertEquals("2016-01-07T06:00:00.000Z", buckets.get(6).getKeyAsString())__        assertEquals(0, buckets.get(6).getDocCount())__        assertEquals("2016-01-08T06:00:00.000Z", buckets.get(7).getKeyAsString())__        assertEquals(0, buckets.get(7).getDocCount())___        internalCluster().wipeIndices(index)__    };test,date,histogram,aggregation,with,day,interval,offset,and,extended,bounds,see,https,github,com,elastic,elasticsearch,issues,23776;public,void,test,single,value,field,with,extended,bounds,offset,throws,exception,string,index,test23776,prepare,create,index,set,settings,settings,builder,put,index,settings,put,index,1,put,index,0,execute,action,get,list,index,request,builder,builders,new,array,list,builders,add,index,doc,index,date,time,parse,2016,01,03t08,00,00,000z,1,builders,add,index,doc,index,date,time,parse,2016,01,03t08,00,00,000z,2,builders,add,index,doc,index,date,time,parse,2016,01,06t08,00,00,000z,3,builders,add,index,doc,index,date,time,parse,2016,01,06t08,00,00,000z,4,index,random,true,builders,ensure,searchable,index,search,response,response,null,response,client,prepare,search,index,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,days,1,offset,6h,min,doc,count,0,extended,bounds,new,extended,bounds,2016,01,01t06,00,00z,2016,01,08t08,00,00z,execute,action,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,8,assert,equals,2016,01,01t06,00,00,000z,buckets,get,0,get,key,as,string,assert,equals,0,buckets,get,0,get,doc,count,assert,equals,2016,01,02t06,00,00,000z,buckets,get,1,get,key,as,string,assert,equals,0,buckets,get,1,get,doc,count,assert,equals,2016,01,03t06,00,00,000z,buckets,get,2,get,key,as,string,assert,equals,2,buckets,get,2,get,doc,count,assert,equals,2016,01,04t06,00,00,000z,buckets,get,3,get,key,as,string,assert,equals,0,buckets,get,3,get,doc,count,assert,equals,2016,01,05t06,00,00,000z,buckets,get,4,get,key,as,string,assert,equals,0,buckets,get,4,get,doc,count,assert,equals,2016,01,06t06,00,00,000z,buckets,get,5,get,key,as,string,assert,equals,2,buckets,get,5,get,doc,count,assert,equals,2016,01,07t06,00,00,000z,buckets,get,6,get,key,as,string,assert,equals,0,buckets,get,6,get,doc,count,assert,equals,2016,01,08t06,00,00,000z,buckets,get,7,get,key,as,string,assert,equals,0,buckets,get,7,get,doc,count,internal,cluster,wipe,indices,index
DateHistogramIT -> public void testSingleValueFieldWithExtendedBoundsOffset() throws Exception;1538067637;Test date histogram aggregation with day interval, offset and_extended bounds (see https://github.com/elastic/elasticsearch/issues/23776);public void testSingleValueFieldWithExtendedBoundsOffset() throws Exception {_        String index = "test23776"__        prepareCreate(index)_                .setSettings(Settings.builder().put(indexSettings()).put("index.number_of_shards", 1).put("index.number_of_replicas", 0))_                .execute().actionGet()___        List<IndexRequestBuilder> builders = new ArrayList<>()__        builders.add(indexDoc(index, DateTime.parse("2016-01-03T08:00:00.000Z"), 1))__        builders.add(indexDoc(index, DateTime.parse("2016-01-03T08:00:00.000Z"), 2))__        builders.add(indexDoc(index, DateTime.parse("2016-01-06T08:00:00.000Z"), 3))__        builders.add(indexDoc(index, DateTime.parse("2016-01-06T08:00:00.000Z"), 4))__        indexRandom(true, builders)__        ensureSearchable(index)___        SearchResponse response = null__        _        response = client()_                .prepareSearch(index)_                .addAggregation(_                        dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.days(1)).offset("+6h").minDocCount(0)_                                .extendedBounds(new ExtendedBounds("2016-01-01T06:00:00Z", "2016-01-08T08:00:00Z"))_                ).execute().actionGet()__        assertSearchResponse(response)___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(8))___        assertEquals("2016-01-01T06:00:00.000Z", buckets.get(0).getKeyAsString())__        assertEquals(0, buckets.get(0).getDocCount())__        assertEquals("2016-01-02T06:00:00.000Z", buckets.get(1).getKeyAsString())__        assertEquals(0, buckets.get(1).getDocCount())__        assertEquals("2016-01-03T06:00:00.000Z", buckets.get(2).getKeyAsString())__        assertEquals(2, buckets.get(2).getDocCount())__        assertEquals("2016-01-04T06:00:00.000Z", buckets.get(3).getKeyAsString())__        assertEquals(0, buckets.get(3).getDocCount())__        assertEquals("2016-01-05T06:00:00.000Z", buckets.get(4).getKeyAsString())__        assertEquals(0, buckets.get(4).getDocCount())__        assertEquals("2016-01-06T06:00:00.000Z", buckets.get(5).getKeyAsString())__        assertEquals(2, buckets.get(5).getDocCount())__        assertEquals("2016-01-07T06:00:00.000Z", buckets.get(6).getKeyAsString())__        assertEquals(0, buckets.get(6).getDocCount())__        assertEquals("2016-01-08T06:00:00.000Z", buckets.get(7).getKeyAsString())__        assertEquals(0, buckets.get(7).getDocCount())___        internalCluster().wipeIndices(index)__    };test,date,histogram,aggregation,with,day,interval,offset,and,extended,bounds,see,https,github,com,elastic,elasticsearch,issues,23776;public,void,test,single,value,field,with,extended,bounds,offset,throws,exception,string,index,test23776,prepare,create,index,set,settings,settings,builder,put,index,settings,put,index,1,put,index,0,execute,action,get,list,index,request,builder,builders,new,array,list,builders,add,index,doc,index,date,time,parse,2016,01,03t08,00,00,000z,1,builders,add,index,doc,index,date,time,parse,2016,01,03t08,00,00,000z,2,builders,add,index,doc,index,date,time,parse,2016,01,06t08,00,00,000z,3,builders,add,index,doc,index,date,time,parse,2016,01,06t08,00,00,000z,4,index,random,true,builders,ensure,searchable,index,search,response,response,null,response,client,prepare,search,index,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,days,1,offset,6h,min,doc,count,0,extended,bounds,new,extended,bounds,2016,01,01t06,00,00z,2016,01,08t08,00,00z,execute,action,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,8,assert,equals,2016,01,01t06,00,00,000z,buckets,get,0,get,key,as,string,assert,equals,0,buckets,get,0,get,doc,count,assert,equals,2016,01,02t06,00,00,000z,buckets,get,1,get,key,as,string,assert,equals,0,buckets,get,1,get,doc,count,assert,equals,2016,01,03t06,00,00,000z,buckets,get,2,get,key,as,string,assert,equals,2,buckets,get,2,get,doc,count,assert,equals,2016,01,04t06,00,00,000z,buckets,get,3,get,key,as,string,assert,equals,0,buckets,get,3,get,doc,count,assert,equals,2016,01,05t06,00,00,000z,buckets,get,4,get,key,as,string,assert,equals,0,buckets,get,4,get,doc,count,assert,equals,2016,01,06t06,00,00,000z,buckets,get,5,get,key,as,string,assert,equals,2,buckets,get,5,get,doc,count,assert,equals,2016,01,07t06,00,00,000z,buckets,get,6,get,key,as,string,assert,equals,0,buckets,get,6,get,doc,count,assert,equals,2016,01,08t06,00,00,000z,buckets,get,7,get,key,as,string,assert,equals,0,buckets,get,7,get,doc,count,internal,cluster,wipe,indices,index
DateHistogramIT -> public void testSingleValueFieldWithExtendedBoundsOffset() throws Exception;1541668945;Test date histogram aggregation with day interval, offset and_extended bounds (see https://github.com/elastic/elasticsearch/issues/23776);public void testSingleValueFieldWithExtendedBoundsOffset() throws Exception {_        String index = "test23776"__        prepareCreate(index)_                .setSettings(Settings.builder().put(indexSettings()).put("index.number_of_shards", 1).put("index.number_of_replicas", 0))_                .execute().actionGet()___        List<IndexRequestBuilder> builders = new ArrayList<>()__        builders.add(indexDoc(index, DateTime.parse("2016-01-03T08:00:00.000Z"), 1))__        builders.add(indexDoc(index, DateTime.parse("2016-01-03T08:00:00.000Z"), 2))__        builders.add(indexDoc(index, DateTime.parse("2016-01-06T08:00:00.000Z"), 3))__        builders.add(indexDoc(index, DateTime.parse("2016-01-06T08:00:00.000Z"), 4))__        indexRandom(true, builders)__        ensureSearchable(index)___        SearchResponse response = null__        _        response = client()_                .prepareSearch(index)_                .addAggregation(_                        dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.days(1)).offset("+6h").minDocCount(0)_                                .extendedBounds(new ExtendedBounds("2016-01-01T06:00:00Z", "2016-01-08T08:00:00Z"))_                ).execute().actionGet()__        assertSearchResponse(response)___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(8))___        assertEquals("2016-01-01T06:00:00.000Z", buckets.get(0).getKeyAsString())__        assertEquals(0, buckets.get(0).getDocCount())__        assertEquals("2016-01-02T06:00:00.000Z", buckets.get(1).getKeyAsString())__        assertEquals(0, buckets.get(1).getDocCount())__        assertEquals("2016-01-03T06:00:00.000Z", buckets.get(2).getKeyAsString())__        assertEquals(2, buckets.get(2).getDocCount())__        assertEquals("2016-01-04T06:00:00.000Z", buckets.get(3).getKeyAsString())__        assertEquals(0, buckets.get(3).getDocCount())__        assertEquals("2016-01-05T06:00:00.000Z", buckets.get(4).getKeyAsString())__        assertEquals(0, buckets.get(4).getDocCount())__        assertEquals("2016-01-06T06:00:00.000Z", buckets.get(5).getKeyAsString())__        assertEquals(2, buckets.get(5).getDocCount())__        assertEquals("2016-01-07T06:00:00.000Z", buckets.get(6).getKeyAsString())__        assertEquals(0, buckets.get(6).getDocCount())__        assertEquals("2016-01-08T06:00:00.000Z", buckets.get(7).getKeyAsString())__        assertEquals(0, buckets.get(7).getDocCount())___        internalCluster().wipeIndices(index)__    };test,date,histogram,aggregation,with,day,interval,offset,and,extended,bounds,see,https,github,com,elastic,elasticsearch,issues,23776;public,void,test,single,value,field,with,extended,bounds,offset,throws,exception,string,index,test23776,prepare,create,index,set,settings,settings,builder,put,index,settings,put,index,1,put,index,0,execute,action,get,list,index,request,builder,builders,new,array,list,builders,add,index,doc,index,date,time,parse,2016,01,03t08,00,00,000z,1,builders,add,index,doc,index,date,time,parse,2016,01,03t08,00,00,000z,2,builders,add,index,doc,index,date,time,parse,2016,01,06t08,00,00,000z,3,builders,add,index,doc,index,date,time,parse,2016,01,06t08,00,00,000z,4,index,random,true,builders,ensure,searchable,index,search,response,response,null,response,client,prepare,search,index,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,days,1,offset,6h,min,doc,count,0,extended,bounds,new,extended,bounds,2016,01,01t06,00,00z,2016,01,08t08,00,00z,execute,action,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,8,assert,equals,2016,01,01t06,00,00,000z,buckets,get,0,get,key,as,string,assert,equals,0,buckets,get,0,get,doc,count,assert,equals,2016,01,02t06,00,00,000z,buckets,get,1,get,key,as,string,assert,equals,0,buckets,get,1,get,doc,count,assert,equals,2016,01,03t06,00,00,000z,buckets,get,2,get,key,as,string,assert,equals,2,buckets,get,2,get,doc,count,assert,equals,2016,01,04t06,00,00,000z,buckets,get,3,get,key,as,string,assert,equals,0,buckets,get,3,get,doc,count,assert,equals,2016,01,05t06,00,00,000z,buckets,get,4,get,key,as,string,assert,equals,0,buckets,get,4,get,doc,count,assert,equals,2016,01,06t06,00,00,000z,buckets,get,5,get,key,as,string,assert,equals,2,buckets,get,5,get,doc,count,assert,equals,2016,01,07t06,00,00,000z,buckets,get,6,get,key,as,string,assert,equals,0,buckets,get,6,get,doc,count,assert,equals,2016,01,08t06,00,00,000z,buckets,get,7,get,key,as,string,assert,equals,0,buckets,get,7,get,doc,count,internal,cluster,wipe,indices,index
DateHistogramIT -> public void testSingleValueFieldWithExtendedBoundsOffset() throws Exception;1544035746;Test date histogram aggregation with day interval, offset and_extended bounds (see https://github.com/elastic/elasticsearch/issues/23776);public void testSingleValueFieldWithExtendedBoundsOffset() throws Exception {_        String index = "test23776"__        prepareCreate(index)_                .setSettings(Settings.builder().put(indexSettings()).put("index.number_of_shards", 1).put("index.number_of_replicas", 0))_                .execute().actionGet()___        List<IndexRequestBuilder> builders = new ArrayList<>()__        builders.add(indexDoc(index, DateTime.parse("2016-01-03T08:00:00.000Z"), 1))__        builders.add(indexDoc(index, DateTime.parse("2016-01-03T08:00:00.000Z"), 2))__        builders.add(indexDoc(index, DateTime.parse("2016-01-06T08:00:00.000Z"), 3))__        builders.add(indexDoc(index, DateTime.parse("2016-01-06T08:00:00.000Z"), 4))__        indexRandom(true, builders)__        ensureSearchable(index)___        SearchResponse response = null__        _        response = client()_                .prepareSearch(index)_                .addAggregation(_                        dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.days(1)).offset("+6h").minDocCount(0)_                                .extendedBounds(new ExtendedBounds("2016-01-01T06:00:00Z", "2016-01-08T08:00:00Z"))_                ).execute().actionGet()__        assertSearchResponse(response)___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(8))___        assertEquals("2016-01-01T06:00:00.000Z", buckets.get(0).getKeyAsString())__        assertEquals(0, buckets.get(0).getDocCount())__        assertEquals("2016-01-02T06:00:00.000Z", buckets.get(1).getKeyAsString())__        assertEquals(0, buckets.get(1).getDocCount())__        assertEquals("2016-01-03T06:00:00.000Z", buckets.get(2).getKeyAsString())__        assertEquals(2, buckets.get(2).getDocCount())__        assertEquals("2016-01-04T06:00:00.000Z", buckets.get(3).getKeyAsString())__        assertEquals(0, buckets.get(3).getDocCount())__        assertEquals("2016-01-05T06:00:00.000Z", buckets.get(4).getKeyAsString())__        assertEquals(0, buckets.get(4).getDocCount())__        assertEquals("2016-01-06T06:00:00.000Z", buckets.get(5).getKeyAsString())__        assertEquals(2, buckets.get(5).getDocCount())__        assertEquals("2016-01-07T06:00:00.000Z", buckets.get(6).getKeyAsString())__        assertEquals(0, buckets.get(6).getDocCount())__        assertEquals("2016-01-08T06:00:00.000Z", buckets.get(7).getKeyAsString())__        assertEquals(0, buckets.get(7).getDocCount())___        internalCluster().wipeIndices(index)__    };test,date,histogram,aggregation,with,day,interval,offset,and,extended,bounds,see,https,github,com,elastic,elasticsearch,issues,23776;public,void,test,single,value,field,with,extended,bounds,offset,throws,exception,string,index,test23776,prepare,create,index,set,settings,settings,builder,put,index,settings,put,index,1,put,index,0,execute,action,get,list,index,request,builder,builders,new,array,list,builders,add,index,doc,index,date,time,parse,2016,01,03t08,00,00,000z,1,builders,add,index,doc,index,date,time,parse,2016,01,03t08,00,00,000z,2,builders,add,index,doc,index,date,time,parse,2016,01,06t08,00,00,000z,3,builders,add,index,doc,index,date,time,parse,2016,01,06t08,00,00,000z,4,index,random,true,builders,ensure,searchable,index,search,response,response,null,response,client,prepare,search,index,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,days,1,offset,6h,min,doc,count,0,extended,bounds,new,extended,bounds,2016,01,01t06,00,00z,2016,01,08t08,00,00z,execute,action,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,8,assert,equals,2016,01,01t06,00,00,000z,buckets,get,0,get,key,as,string,assert,equals,0,buckets,get,0,get,doc,count,assert,equals,2016,01,02t06,00,00,000z,buckets,get,1,get,key,as,string,assert,equals,0,buckets,get,1,get,doc,count,assert,equals,2016,01,03t06,00,00,000z,buckets,get,2,get,key,as,string,assert,equals,2,buckets,get,2,get,doc,count,assert,equals,2016,01,04t06,00,00,000z,buckets,get,3,get,key,as,string,assert,equals,0,buckets,get,3,get,doc,count,assert,equals,2016,01,05t06,00,00,000z,buckets,get,4,get,key,as,string,assert,equals,0,buckets,get,4,get,doc,count,assert,equals,2016,01,06t06,00,00,000z,buckets,get,5,get,key,as,string,assert,equals,2,buckets,get,5,get,doc,count,assert,equals,2016,01,07t06,00,00,000z,buckets,get,6,get,key,as,string,assert,equals,0,buckets,get,6,get,doc,count,assert,equals,2016,01,08t06,00,00,000z,buckets,get,7,get,key,as,string,assert,equals,0,buckets,get,7,get,doc,count,internal,cluster,wipe,indices,index
DateHistogramIT -> public void testSingleValueFieldWithExtendedBoundsOffset() throws Exception;1544110272;Test date histogram aggregation with day interval, offset and_extended bounds (see https://github.com/elastic/elasticsearch/issues/23776);public void testSingleValueFieldWithExtendedBoundsOffset() throws Exception {_        String index = "test23776"__        prepareCreate(index)_                .setSettings(Settings.builder().put(indexSettings()).put("index.number_of_shards", 1).put("index.number_of_replicas", 0))_                .get()___        List<IndexRequestBuilder> builders = new ArrayList<>()__        builders.add(indexDoc(index, DateTime.parse("2016-01-03T08:00:00.000Z"), 1))__        builders.add(indexDoc(index, DateTime.parse("2016-01-03T08:00:00.000Z"), 2))__        builders.add(indexDoc(index, DateTime.parse("2016-01-06T08:00:00.000Z"), 3))__        builders.add(indexDoc(index, DateTime.parse("2016-01-06T08:00:00.000Z"), 4))__        indexRandom(true, builders)__        ensureSearchable(index)___        SearchResponse response = null__        _        response = client()_                .prepareSearch(index)_                .addAggregation(_                        dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.days(1))_                                .offset("+6h").minDocCount(0)_                                .extendedBounds(new ExtendedBounds("2016-01-01T06:00:00Z", "2016-01-08T08:00:00Z"))_                ).get()__        assertSearchResponse(response)___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(8))___        assertEquals("2016-01-01T06:00:00.000Z", buckets.get(0).getKeyAsString())__        assertEquals(0, buckets.get(0).getDocCount())__        assertEquals("2016-01-02T06:00:00.000Z", buckets.get(1).getKeyAsString())__        assertEquals(0, buckets.get(1).getDocCount())__        assertEquals("2016-01-03T06:00:00.000Z", buckets.get(2).getKeyAsString())__        assertEquals(2, buckets.get(2).getDocCount())__        assertEquals("2016-01-04T06:00:00.000Z", buckets.get(3).getKeyAsString())__        assertEquals(0, buckets.get(3).getDocCount())__        assertEquals("2016-01-05T06:00:00.000Z", buckets.get(4).getKeyAsString())__        assertEquals(0, buckets.get(4).getDocCount())__        assertEquals("2016-01-06T06:00:00.000Z", buckets.get(5).getKeyAsString())__        assertEquals(2, buckets.get(5).getDocCount())__        assertEquals("2016-01-07T06:00:00.000Z", buckets.get(6).getKeyAsString())__        assertEquals(0, buckets.get(6).getDocCount())__        assertEquals("2016-01-08T06:00:00.000Z", buckets.get(7).getKeyAsString())__        assertEquals(0, buckets.get(7).getDocCount())___        internalCluster().wipeIndices(index)__    };test,date,histogram,aggregation,with,day,interval,offset,and,extended,bounds,see,https,github,com,elastic,elasticsearch,issues,23776;public,void,test,single,value,field,with,extended,bounds,offset,throws,exception,string,index,test23776,prepare,create,index,set,settings,settings,builder,put,index,settings,put,index,1,put,index,0,get,list,index,request,builder,builders,new,array,list,builders,add,index,doc,index,date,time,parse,2016,01,03t08,00,00,000z,1,builders,add,index,doc,index,date,time,parse,2016,01,03t08,00,00,000z,2,builders,add,index,doc,index,date,time,parse,2016,01,06t08,00,00,000z,3,builders,add,index,doc,index,date,time,parse,2016,01,06t08,00,00,000z,4,index,random,true,builders,ensure,searchable,index,search,response,response,null,response,client,prepare,search,index,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,days,1,offset,6h,min,doc,count,0,extended,bounds,new,extended,bounds,2016,01,01t06,00,00z,2016,01,08t08,00,00z,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,8,assert,equals,2016,01,01t06,00,00,000z,buckets,get,0,get,key,as,string,assert,equals,0,buckets,get,0,get,doc,count,assert,equals,2016,01,02t06,00,00,000z,buckets,get,1,get,key,as,string,assert,equals,0,buckets,get,1,get,doc,count,assert,equals,2016,01,03t06,00,00,000z,buckets,get,2,get,key,as,string,assert,equals,2,buckets,get,2,get,doc,count,assert,equals,2016,01,04t06,00,00,000z,buckets,get,3,get,key,as,string,assert,equals,0,buckets,get,3,get,doc,count,assert,equals,2016,01,05t06,00,00,000z,buckets,get,4,get,key,as,string,assert,equals,0,buckets,get,4,get,doc,count,assert,equals,2016,01,06t06,00,00,000z,buckets,get,5,get,key,as,string,assert,equals,2,buckets,get,5,get,doc,count,assert,equals,2016,01,07t06,00,00,000z,buckets,get,6,get,key,as,string,assert,equals,0,buckets,get,6,get,doc,count,assert,equals,2016,01,08t06,00,00,000z,buckets,get,7,get,key,as,string,assert,equals,0,buckets,get,7,get,doc,count,internal,cluster,wipe,indices,index
DateHistogramIT -> public void testSingleValueFieldWithExtendedBoundsOffset() throws Exception;1544232221;Test date histogram aggregation with day interval, offset and_extended bounds (see https://github.com/elastic/elasticsearch/issues/23776);public void testSingleValueFieldWithExtendedBoundsOffset() throws Exception {_        String index = "test23776"__        prepareCreate(index)_                .setSettings(Settings.builder().put(indexSettings()).put("index.number_of_shards", 1).put("index.number_of_replicas", 0))_                .get()___        List<IndexRequestBuilder> builders = new ArrayList<>()__        builders.add(indexDoc(index, DateTime.parse("2016-01-03T08:00:00.000Z"), 1))__        builders.add(indexDoc(index, DateTime.parse("2016-01-03T08:00:00.000Z"), 2))__        builders.add(indexDoc(index, DateTime.parse("2016-01-06T08:00:00.000Z"), 3))__        builders.add(indexDoc(index, DateTime.parse("2016-01-06T08:00:00.000Z"), 4))__        indexRandom(true, builders)__        ensureSearchable(index)___        SearchResponse response = null__        _        response = client()_                .prepareSearch(index)_                .addAggregation(_                        dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.days(1))_                                .offset("+6h").minDocCount(0)_                                .extendedBounds(new ExtendedBounds("2016-01-01T06:00:00Z", "2016-01-08T08:00:00Z"))_                ).get()__        assertSearchResponse(response)___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(8))___        assertEquals("2016-01-01T06:00:00.000Z", buckets.get(0).getKeyAsString())__        assertEquals(0, buckets.get(0).getDocCount())__        assertEquals("2016-01-02T06:00:00.000Z", buckets.get(1).getKeyAsString())__        assertEquals(0, buckets.get(1).getDocCount())__        assertEquals("2016-01-03T06:00:00.000Z", buckets.get(2).getKeyAsString())__        assertEquals(2, buckets.get(2).getDocCount())__        assertEquals("2016-01-04T06:00:00.000Z", buckets.get(3).getKeyAsString())__        assertEquals(0, buckets.get(3).getDocCount())__        assertEquals("2016-01-05T06:00:00.000Z", buckets.get(4).getKeyAsString())__        assertEquals(0, buckets.get(4).getDocCount())__        assertEquals("2016-01-06T06:00:00.000Z", buckets.get(5).getKeyAsString())__        assertEquals(2, buckets.get(5).getDocCount())__        assertEquals("2016-01-07T06:00:00.000Z", buckets.get(6).getKeyAsString())__        assertEquals(0, buckets.get(6).getDocCount())__        assertEquals("2016-01-08T06:00:00.000Z", buckets.get(7).getKeyAsString())__        assertEquals(0, buckets.get(7).getDocCount())___        internalCluster().wipeIndices(index)__    };test,date,histogram,aggregation,with,day,interval,offset,and,extended,bounds,see,https,github,com,elastic,elasticsearch,issues,23776;public,void,test,single,value,field,with,extended,bounds,offset,throws,exception,string,index,test23776,prepare,create,index,set,settings,settings,builder,put,index,settings,put,index,1,put,index,0,get,list,index,request,builder,builders,new,array,list,builders,add,index,doc,index,date,time,parse,2016,01,03t08,00,00,000z,1,builders,add,index,doc,index,date,time,parse,2016,01,03t08,00,00,000z,2,builders,add,index,doc,index,date,time,parse,2016,01,06t08,00,00,000z,3,builders,add,index,doc,index,date,time,parse,2016,01,06t08,00,00,000z,4,index,random,true,builders,ensure,searchable,index,search,response,response,null,response,client,prepare,search,index,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,days,1,offset,6h,min,doc,count,0,extended,bounds,new,extended,bounds,2016,01,01t06,00,00z,2016,01,08t08,00,00z,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,8,assert,equals,2016,01,01t06,00,00,000z,buckets,get,0,get,key,as,string,assert,equals,0,buckets,get,0,get,doc,count,assert,equals,2016,01,02t06,00,00,000z,buckets,get,1,get,key,as,string,assert,equals,0,buckets,get,1,get,doc,count,assert,equals,2016,01,03t06,00,00,000z,buckets,get,2,get,key,as,string,assert,equals,2,buckets,get,2,get,doc,count,assert,equals,2016,01,04t06,00,00,000z,buckets,get,3,get,key,as,string,assert,equals,0,buckets,get,3,get,doc,count,assert,equals,2016,01,05t06,00,00,000z,buckets,get,4,get,key,as,string,assert,equals,0,buckets,get,4,get,doc,count,assert,equals,2016,01,06t06,00,00,000z,buckets,get,5,get,key,as,string,assert,equals,2,buckets,get,5,get,doc,count,assert,equals,2016,01,07t06,00,00,000z,buckets,get,6,get,key,as,string,assert,equals,0,buckets,get,6,get,doc,count,assert,equals,2016,01,08t06,00,00,000z,buckets,get,7,get,key,as,string,assert,equals,0,buckets,get,7,get,doc,count,internal,cluster,wipe,indices,index
DateHistogramIT -> public void testSingleValueFieldWithExtendedBoundsOffset() throws Exception;1544600864;Test date histogram aggregation with day interval, offset and_extended bounds (see https://github.com/elastic/elasticsearch/issues/23776);public void testSingleValueFieldWithExtendedBoundsOffset() throws Exception {_        String index = "test23776"__        prepareCreate(index)_                .setSettings(Settings.builder().put(indexSettings()).put("index.number_of_shards", 1).put("index.number_of_replicas", 0))_                .get()___        List<IndexRequestBuilder> builders = new ArrayList<>()__        builders.add(indexDoc(index, DateTime.parse("2016-01-03T08:00:00.000Z"), 1))__        builders.add(indexDoc(index, DateTime.parse("2016-01-03T08:00:00.000Z"), 2))__        builders.add(indexDoc(index, DateTime.parse("2016-01-06T08:00:00.000Z"), 3))__        builders.add(indexDoc(index, DateTime.parse("2016-01-06T08:00:00.000Z"), 4))__        indexRandom(true, builders)__        ensureSearchable(index)___        SearchResponse response = null__        _        response = client()_                .prepareSearch(index)_                .addAggregation(_                        dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.days(1))_                                .offset("+6h").minDocCount(0)_                                .extendedBounds(new ExtendedBounds("2016-01-01T06:00:00Z", "2016-01-08T08:00:00Z"))_                ).get()__        assertSearchResponse(response)___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(8))___        assertEquals("2016-01-01T06:00:00.000Z", buckets.get(0).getKeyAsString())__        assertEquals(0, buckets.get(0).getDocCount())__        assertEquals("2016-01-02T06:00:00.000Z", buckets.get(1).getKeyAsString())__        assertEquals(0, buckets.get(1).getDocCount())__        assertEquals("2016-01-03T06:00:00.000Z", buckets.get(2).getKeyAsString())__        assertEquals(2, buckets.get(2).getDocCount())__        assertEquals("2016-01-04T06:00:00.000Z", buckets.get(3).getKeyAsString())__        assertEquals(0, buckets.get(3).getDocCount())__        assertEquals("2016-01-05T06:00:00.000Z", buckets.get(4).getKeyAsString())__        assertEquals(0, buckets.get(4).getDocCount())__        assertEquals("2016-01-06T06:00:00.000Z", buckets.get(5).getKeyAsString())__        assertEquals(2, buckets.get(5).getDocCount())__        assertEquals("2016-01-07T06:00:00.000Z", buckets.get(6).getKeyAsString())__        assertEquals(0, buckets.get(6).getDocCount())__        assertEquals("2016-01-08T06:00:00.000Z", buckets.get(7).getKeyAsString())__        assertEquals(0, buckets.get(7).getDocCount())___        internalCluster().wipeIndices(index)__    };test,date,histogram,aggregation,with,day,interval,offset,and,extended,bounds,see,https,github,com,elastic,elasticsearch,issues,23776;public,void,test,single,value,field,with,extended,bounds,offset,throws,exception,string,index,test23776,prepare,create,index,set,settings,settings,builder,put,index,settings,put,index,1,put,index,0,get,list,index,request,builder,builders,new,array,list,builders,add,index,doc,index,date,time,parse,2016,01,03t08,00,00,000z,1,builders,add,index,doc,index,date,time,parse,2016,01,03t08,00,00,000z,2,builders,add,index,doc,index,date,time,parse,2016,01,06t08,00,00,000z,3,builders,add,index,doc,index,date,time,parse,2016,01,06t08,00,00,000z,4,index,random,true,builders,ensure,searchable,index,search,response,response,null,response,client,prepare,search,index,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,days,1,offset,6h,min,doc,count,0,extended,bounds,new,extended,bounds,2016,01,01t06,00,00z,2016,01,08t08,00,00z,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,8,assert,equals,2016,01,01t06,00,00,000z,buckets,get,0,get,key,as,string,assert,equals,0,buckets,get,0,get,doc,count,assert,equals,2016,01,02t06,00,00,000z,buckets,get,1,get,key,as,string,assert,equals,0,buckets,get,1,get,doc,count,assert,equals,2016,01,03t06,00,00,000z,buckets,get,2,get,key,as,string,assert,equals,2,buckets,get,2,get,doc,count,assert,equals,2016,01,04t06,00,00,000z,buckets,get,3,get,key,as,string,assert,equals,0,buckets,get,3,get,doc,count,assert,equals,2016,01,05t06,00,00,000z,buckets,get,4,get,key,as,string,assert,equals,0,buckets,get,4,get,doc,count,assert,equals,2016,01,06t06,00,00,000z,buckets,get,5,get,key,as,string,assert,equals,2,buckets,get,5,get,doc,count,assert,equals,2016,01,07t06,00,00,000z,buckets,get,6,get,key,as,string,assert,equals,0,buckets,get,6,get,doc,count,assert,equals,2016,01,08t06,00,00,000z,buckets,get,7,get,key,as,string,assert,equals,0,buckets,get,7,get,doc,count,internal,cluster,wipe,indices,index
DateHistogramIT -> public void testSingleValueFieldWithExtendedBoundsOffset() throws Exception;1548236405;Test date histogram aggregation with day interval, offset and_extended bounds (see https://github.com/elastic/elasticsearch/issues/23776);public void testSingleValueFieldWithExtendedBoundsOffset() throws Exception {_        String index = "test23776"__        prepareCreate(index)_                .setSettings(Settings.builder().put(indexSettings()).put("index.number_of_shards", 1).put("index.number_of_replicas", 0))_                .get()___        List<IndexRequestBuilder> builders = new ArrayList<>()__        DateFormatter formatter = DateFormatter.forPattern("date_optional_time")__        builders.add(indexDoc(index, DateFormatters.toZonedDateTime(formatter.parse("2016-01-03T08:00:00.000Z")), 1))__        builders.add(indexDoc(index, DateFormatters.toZonedDateTime(formatter.parse("2016-01-03T08:00:00.000Z")), 2))__        builders.add(indexDoc(index, DateFormatters.toZonedDateTime(formatter.parse("2016-01-06T08:00:00.000Z")), 3))__        builders.add(indexDoc(index, DateFormatters.toZonedDateTime(formatter.parse("2016-01-06T08:00:00.000Z")), 4))__        indexRandom(true, builders)__        ensureSearchable(index)___        SearchResponse response = null__        _        response = client()_                .prepareSearch(index)_                .addAggregation(_                        dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.days(1))_                                .offset("+6h").minDocCount(0)_                                .extendedBounds(new ExtendedBounds("2016-01-01T06:00:00Z", "2016-01-08T08:00:00Z"))_                ).get()__        assertSearchResponse(response)___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(8))___        assertEquals("2016-01-01T06:00:00.000Z", buckets.get(0).getKeyAsString())__        assertEquals(0, buckets.get(0).getDocCount())__        assertEquals("2016-01-02T06:00:00.000Z", buckets.get(1).getKeyAsString())__        assertEquals(0, buckets.get(1).getDocCount())__        assertEquals("2016-01-03T06:00:00.000Z", buckets.get(2).getKeyAsString())__        assertEquals(2, buckets.get(2).getDocCount())__        assertEquals("2016-01-04T06:00:00.000Z", buckets.get(3).getKeyAsString())__        assertEquals(0, buckets.get(3).getDocCount())__        assertEquals("2016-01-05T06:00:00.000Z", buckets.get(4).getKeyAsString())__        assertEquals(0, buckets.get(4).getDocCount())__        assertEquals("2016-01-06T06:00:00.000Z", buckets.get(5).getKeyAsString())__        assertEquals(2, buckets.get(5).getDocCount())__        assertEquals("2016-01-07T06:00:00.000Z", buckets.get(6).getKeyAsString())__        assertEquals(0, buckets.get(6).getDocCount())__        assertEquals("2016-01-08T06:00:00.000Z", buckets.get(7).getKeyAsString())__        assertEquals(0, buckets.get(7).getDocCount())___        internalCluster().wipeIndices(index)__    };test,date,histogram,aggregation,with,day,interval,offset,and,extended,bounds,see,https,github,com,elastic,elasticsearch,issues,23776;public,void,test,single,value,field,with,extended,bounds,offset,throws,exception,string,index,test23776,prepare,create,index,set,settings,settings,builder,put,index,settings,put,index,1,put,index,0,get,list,index,request,builder,builders,new,array,list,date,formatter,formatter,date,formatter,for,pattern,builders,add,index,doc,index,date,formatters,to,zoned,date,time,formatter,parse,2016,01,03t08,00,00,000z,1,builders,add,index,doc,index,date,formatters,to,zoned,date,time,formatter,parse,2016,01,03t08,00,00,000z,2,builders,add,index,doc,index,date,formatters,to,zoned,date,time,formatter,parse,2016,01,06t08,00,00,000z,3,builders,add,index,doc,index,date,formatters,to,zoned,date,time,formatter,parse,2016,01,06t08,00,00,000z,4,index,random,true,builders,ensure,searchable,index,search,response,response,null,response,client,prepare,search,index,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,days,1,offset,6h,min,doc,count,0,extended,bounds,new,extended,bounds,2016,01,01t06,00,00z,2016,01,08t08,00,00z,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,8,assert,equals,2016,01,01t06,00,00,000z,buckets,get,0,get,key,as,string,assert,equals,0,buckets,get,0,get,doc,count,assert,equals,2016,01,02t06,00,00,000z,buckets,get,1,get,key,as,string,assert,equals,0,buckets,get,1,get,doc,count,assert,equals,2016,01,03t06,00,00,000z,buckets,get,2,get,key,as,string,assert,equals,2,buckets,get,2,get,doc,count,assert,equals,2016,01,04t06,00,00,000z,buckets,get,3,get,key,as,string,assert,equals,0,buckets,get,3,get,doc,count,assert,equals,2016,01,05t06,00,00,000z,buckets,get,4,get,key,as,string,assert,equals,0,buckets,get,4,get,doc,count,assert,equals,2016,01,06t06,00,00,000z,buckets,get,5,get,key,as,string,assert,equals,2,buckets,get,5,get,doc,count,assert,equals,2016,01,07t06,00,00,000z,buckets,get,6,get,key,as,string,assert,equals,0,buckets,get,6,get,doc,count,assert,equals,2016,01,08t06,00,00,000z,buckets,get,7,get,key,as,string,assert,equals,0,buckets,get,7,get,doc,count,internal,cluster,wipe,indices,index
DateHistogramIT -> public void testSingleValueFieldWithExtendedBoundsOffset() throws Exception;1548921340;Test date histogram aggregation with day interval, offset and_extended bounds (see https://github.com/elastic/elasticsearch/issues/23776);public void testSingleValueFieldWithExtendedBoundsOffset() throws Exception {_        String index = "test23776"__        prepareCreate(index)_                .setSettings(Settings.builder().put(indexSettings()).put("index.number_of_shards", 1).put("index.number_of_replicas", 0))_                .get()___        List<IndexRequestBuilder> builders = new ArrayList<>()__        DateFormatter formatter = DateFormatter.forPattern("date_optional_time")__        builders.add(indexDoc(index, DateFormatters.from(formatter.parse("2016-01-03T08:00:00.000Z")), 1))__        builders.add(indexDoc(index, DateFormatters.from(formatter.parse("2016-01-03T08:00:00.000Z")), 2))__        builders.add(indexDoc(index, DateFormatters.from(formatter.parse("2016-01-06T08:00:00.000Z")), 3))__        builders.add(indexDoc(index, DateFormatters.from(formatter.parse("2016-01-06T08:00:00.000Z")), 4))__        indexRandom(true, builders)__        ensureSearchable(index)___        SearchResponse response = null__        _        response = client()_                .prepareSearch(index)_                .addAggregation(_                        dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.days(1))_                                .offset("+6h").minDocCount(0)_                                .extendedBounds(new ExtendedBounds("2016-01-01T06:00:00Z", "2016-01-08T08:00:00Z"))_                ).get()__        assertSearchResponse(response)___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(8))___        assertEquals("2016-01-01T06:00:00.000Z", buckets.get(0).getKeyAsString())__        assertEquals(0, buckets.get(0).getDocCount())__        assertEquals("2016-01-02T06:00:00.000Z", buckets.get(1).getKeyAsString())__        assertEquals(0, buckets.get(1).getDocCount())__        assertEquals("2016-01-03T06:00:00.000Z", buckets.get(2).getKeyAsString())__        assertEquals(2, buckets.get(2).getDocCount())__        assertEquals("2016-01-04T06:00:00.000Z", buckets.get(3).getKeyAsString())__        assertEquals(0, buckets.get(3).getDocCount())__        assertEquals("2016-01-05T06:00:00.000Z", buckets.get(4).getKeyAsString())__        assertEquals(0, buckets.get(4).getDocCount())__        assertEquals("2016-01-06T06:00:00.000Z", buckets.get(5).getKeyAsString())__        assertEquals(2, buckets.get(5).getDocCount())__        assertEquals("2016-01-07T06:00:00.000Z", buckets.get(6).getKeyAsString())__        assertEquals(0, buckets.get(6).getDocCount())__        assertEquals("2016-01-08T06:00:00.000Z", buckets.get(7).getKeyAsString())__        assertEquals(0, buckets.get(7).getDocCount())___        internalCluster().wipeIndices(index)__    };test,date,histogram,aggregation,with,day,interval,offset,and,extended,bounds,see,https,github,com,elastic,elasticsearch,issues,23776;public,void,test,single,value,field,with,extended,bounds,offset,throws,exception,string,index,test23776,prepare,create,index,set,settings,settings,builder,put,index,settings,put,index,1,put,index,0,get,list,index,request,builder,builders,new,array,list,date,formatter,formatter,date,formatter,for,pattern,builders,add,index,doc,index,date,formatters,from,formatter,parse,2016,01,03t08,00,00,000z,1,builders,add,index,doc,index,date,formatters,from,formatter,parse,2016,01,03t08,00,00,000z,2,builders,add,index,doc,index,date,formatters,from,formatter,parse,2016,01,06t08,00,00,000z,3,builders,add,index,doc,index,date,formatters,from,formatter,parse,2016,01,06t08,00,00,000z,4,index,random,true,builders,ensure,searchable,index,search,response,response,null,response,client,prepare,search,index,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,days,1,offset,6h,min,doc,count,0,extended,bounds,new,extended,bounds,2016,01,01t06,00,00z,2016,01,08t08,00,00z,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,8,assert,equals,2016,01,01t06,00,00,000z,buckets,get,0,get,key,as,string,assert,equals,0,buckets,get,0,get,doc,count,assert,equals,2016,01,02t06,00,00,000z,buckets,get,1,get,key,as,string,assert,equals,0,buckets,get,1,get,doc,count,assert,equals,2016,01,03t06,00,00,000z,buckets,get,2,get,key,as,string,assert,equals,2,buckets,get,2,get,doc,count,assert,equals,2016,01,04t06,00,00,000z,buckets,get,3,get,key,as,string,assert,equals,0,buckets,get,3,get,doc,count,assert,equals,2016,01,05t06,00,00,000z,buckets,get,4,get,key,as,string,assert,equals,0,buckets,get,4,get,doc,count,assert,equals,2016,01,06t06,00,00,000z,buckets,get,5,get,key,as,string,assert,equals,2,buckets,get,5,get,doc,count,assert,equals,2016,01,07t06,00,00,000z,buckets,get,6,get,key,as,string,assert,equals,0,buckets,get,6,get,doc,count,assert,equals,2016,01,08t06,00,00,000z,buckets,get,7,get,key,as,string,assert,equals,0,buckets,get,7,get,doc,count,internal,cluster,wipe,indices,index
DateHistogramIT -> public void testSingleValueFieldWithExtendedBoundsOffset() throws Exception;1550743790;Test date histogram aggregation with day interval, offset and_extended bounds (see https://github.com/elastic/elasticsearch/issues/23776);public void testSingleValueFieldWithExtendedBoundsOffset() throws Exception {_        String index = "test23776"__        prepareCreate(index)_                .setSettings(Settings.builder().put(indexSettings()).put("index.number_of_shards", 1).put("index.number_of_replicas", 0))_                .get()___        List<IndexRequestBuilder> builders = new ArrayList<>()__        DateFormatter formatter = DateFormatter.forPattern("date_optional_time")__        builders.add(indexDoc(index, DateFormatters.from(formatter.parse("2016-01-03T08:00:00.000Z")), 1))__        builders.add(indexDoc(index, DateFormatters.from(formatter.parse("2016-01-03T08:00:00.000Z")), 2))__        builders.add(indexDoc(index, DateFormatters.from(formatter.parse("2016-01-06T08:00:00.000Z")), 3))__        builders.add(indexDoc(index, DateFormatters.from(formatter.parse("2016-01-06T08:00:00.000Z")), 4))__        indexRandom(true, builders)__        ensureSearchable(index)___        SearchResponse response = null__        _        response = client()_                .prepareSearch(index)_                .addAggregation(_                        dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.days(1))_                                .offset("+6h").minDocCount(0)_                                .extendedBounds(new ExtendedBounds("2016-01-01T06:00:00Z", "2016-01-08T08:00:00Z"))_                ).get()__        assertSearchResponse(response)___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(8))___        assertEquals("2016-01-01T06:00:00.000Z", buckets.get(0).getKeyAsString())__        assertEquals(0, buckets.get(0).getDocCount())__        assertEquals("2016-01-02T06:00:00.000Z", buckets.get(1).getKeyAsString())__        assertEquals(0, buckets.get(1).getDocCount())__        assertEquals("2016-01-03T06:00:00.000Z", buckets.get(2).getKeyAsString())__        assertEquals(2, buckets.get(2).getDocCount())__        assertEquals("2016-01-04T06:00:00.000Z", buckets.get(3).getKeyAsString())__        assertEquals(0, buckets.get(3).getDocCount())__        assertEquals("2016-01-05T06:00:00.000Z", buckets.get(4).getKeyAsString())__        assertEquals(0, buckets.get(4).getDocCount())__        assertEquals("2016-01-06T06:00:00.000Z", buckets.get(5).getKeyAsString())__        assertEquals(2, buckets.get(5).getDocCount())__        assertEquals("2016-01-07T06:00:00.000Z", buckets.get(6).getKeyAsString())__        assertEquals(0, buckets.get(6).getDocCount())__        assertEquals("2016-01-08T06:00:00.000Z", buckets.get(7).getKeyAsString())__        assertEquals(0, buckets.get(7).getDocCount())___        internalCluster().wipeIndices(index)__    };test,date,histogram,aggregation,with,day,interval,offset,and,extended,bounds,see,https,github,com,elastic,elasticsearch,issues,23776;public,void,test,single,value,field,with,extended,bounds,offset,throws,exception,string,index,test23776,prepare,create,index,set,settings,settings,builder,put,index,settings,put,index,1,put,index,0,get,list,index,request,builder,builders,new,array,list,date,formatter,formatter,date,formatter,for,pattern,builders,add,index,doc,index,date,formatters,from,formatter,parse,2016,01,03t08,00,00,000z,1,builders,add,index,doc,index,date,formatters,from,formatter,parse,2016,01,03t08,00,00,000z,2,builders,add,index,doc,index,date,formatters,from,formatter,parse,2016,01,06t08,00,00,000z,3,builders,add,index,doc,index,date,formatters,from,formatter,parse,2016,01,06t08,00,00,000z,4,index,random,true,builders,ensure,searchable,index,search,response,response,null,response,client,prepare,search,index,add,aggregation,date,histogram,histo,field,date,date,histogram,interval,date,histogram,interval,days,1,offset,6h,min,doc,count,0,extended,bounds,new,extended,bounds,2016,01,01t06,00,00z,2016,01,08t08,00,00z,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,8,assert,equals,2016,01,01t06,00,00,000z,buckets,get,0,get,key,as,string,assert,equals,0,buckets,get,0,get,doc,count,assert,equals,2016,01,02t06,00,00,000z,buckets,get,1,get,key,as,string,assert,equals,0,buckets,get,1,get,doc,count,assert,equals,2016,01,03t06,00,00,000z,buckets,get,2,get,key,as,string,assert,equals,2,buckets,get,2,get,doc,count,assert,equals,2016,01,04t06,00,00,000z,buckets,get,3,get,key,as,string,assert,equals,0,buckets,get,3,get,doc,count,assert,equals,2016,01,05t06,00,00,000z,buckets,get,4,get,key,as,string,assert,equals,0,buckets,get,4,get,doc,count,assert,equals,2016,01,06t06,00,00,000z,buckets,get,5,get,key,as,string,assert,equals,2,buckets,get,5,get,doc,count,assert,equals,2016,01,07t06,00,00,000z,buckets,get,6,get,key,as,string,assert,equals,0,buckets,get,6,get,doc,count,assert,equals,2016,01,08t06,00,00,000z,buckets,get,7,get,key,as,string,assert,equals,0,buckets,get,7,get,doc,count,internal,cluster,wipe,indices,index
DateHistogramIT -> public void testRewriteTimeZone_EpochMillisFormat() throws InterruptedException, ExecutionException;1529487105;https://github.com/elastic/elasticsearch/issues/31392 demonstrates an edge case where a date field mapping with_"format" = "epoch_millis" can lead for the date histogram aggregation to throw an error if a non-UTC time zone_with daylight savings time is used. This test was added to check this is working now_@throws ExecutionException_@throws InterruptedException;public void testRewriteTimeZone_EpochMillisFormat() throws InterruptedException, ExecutionException {_        String index = "test31392"__        assertAcked(client().admin().indices().prepareCreate(index).addMapping("type", "d", "type=date,format=epoch_millis").get())__        indexRandom(true, client().prepareIndex(index, "type").setSource("d", "1477954800000"))__        ensureSearchable(index)__        SearchResponse response = client().prepareSearch(index).addAggregation(dateHistogram("histo").field("d")_                .dateHistogramInterval(DateHistogramInterval.MONTH).timeZone(DateTimeZone.forID("Europe/Berlin"))).execute().actionGet()__        assertSearchResponse(response)__        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo.getBuckets().size(), equalTo(1))__        assertThat(histo.getBuckets().get(0).getKeyAsString(), equalTo("1477954800000"))__        assertThat(histo.getBuckets().get(0).getDocCount(), equalTo(1L))___        response = client().prepareSearch(index).addAggregation(dateHistogram("histo").field("d")_                .dateHistogramInterval(DateHistogramInterval.MONTH).timeZone(DateTimeZone.forID("Europe/Berlin")).format("yyyy-MM-dd"))_                .execute().actionGet()__        assertSearchResponse(response)__        histo = response.getAggregations().get("histo")__        assertThat(histo.getBuckets().size(), equalTo(1))__        assertThat(histo.getBuckets().get(0).getKeyAsString(), equalTo("2016-11-01"))__        assertThat(histo.getBuckets().get(0).getDocCount(), equalTo(1L))___        internalCluster().wipeIndices(index)__    };https,github,com,elastic,elasticsearch,issues,31392,demonstrates,an,edge,case,where,a,date,field,mapping,with,format,can,lead,for,the,date,histogram,aggregation,to,throw,an,error,if,a,non,utc,time,zone,with,daylight,savings,time,is,used,this,test,was,added,to,check,this,is,working,now,throws,execution,exception,throws,interrupted,exception;public,void,throws,interrupted,exception,execution,exception,string,index,test31392,assert,acked,client,admin,indices,prepare,create,index,add,mapping,type,d,type,date,format,get,index,random,true,client,prepare,index,index,type,set,source,d,1477954800000,ensure,searchable,index,search,response,response,client,prepare,search,index,add,aggregation,date,histogram,histo,field,d,date,histogram,interval,date,histogram,interval,month,time,zone,date,time,zone,for,id,europe,berlin,execute,action,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,get,buckets,size,equal,to,1,assert,that,histo,get,buckets,get,0,get,key,as,string,equal,to,1477954800000,assert,that,histo,get,buckets,get,0,get,doc,count,equal,to,1l,response,client,prepare,search,index,add,aggregation,date,histogram,histo,field,d,date,histogram,interval,date,histogram,interval,month,time,zone,date,time,zone,for,id,europe,berlin,format,yyyy,mm,dd,execute,action,get,assert,search,response,response,histo,response,get,aggregations,get,histo,assert,that,histo,get,buckets,size,equal,to,1,assert,that,histo,get,buckets,get,0,get,key,as,string,equal,to,2016,11,01,assert,that,histo,get,buckets,get,0,get,doc,count,equal,to,1l,internal,cluster,wipe,indices,index
DateHistogramIT -> public void testRewriteTimeZone_EpochMillisFormat() throws InterruptedException, ExecutionException;1531179852;https://github.com/elastic/elasticsearch/issues/31392 demonstrates an edge case where a date field mapping with_"format" = "epoch_millis" can lead for the date histogram aggregation to throw an error if a non-UTC time zone_with daylight savings time is used. This test was added to check this is working now;public void testRewriteTimeZone_EpochMillisFormat() throws InterruptedException, ExecutionException {_        String index = "test31392"__        assertAcked(client().admin().indices().prepareCreate(index).addMapping("type", "d", "type=date,format=epoch_millis").get())__        indexRandom(true, client().prepareIndex(index, "type").setSource("d", "1477954800000"))__        ensureSearchable(index)__        SearchResponse response = client().prepareSearch(index).addAggregation(dateHistogram("histo").field("d")_                .dateHistogramInterval(DateHistogramInterval.MONTH).timeZone(DateTimeZone.forID("Europe/Berlin"))).execute().actionGet()__        assertSearchResponse(response)__        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo.getBuckets().size(), equalTo(1))__        assertThat(histo.getBuckets().get(0).getKeyAsString(), equalTo("1477954800000"))__        assertThat(histo.getBuckets().get(0).getDocCount(), equalTo(1L))___        response = client().prepareSearch(index).addAggregation(dateHistogram("histo").field("d")_                .dateHistogramInterval(DateHistogramInterval.MONTH).timeZone(DateTimeZone.forID("Europe/Berlin")).format("yyyy-MM-dd"))_                .execute().actionGet()__        assertSearchResponse(response)__        histo = response.getAggregations().get("histo")__        assertThat(histo.getBuckets().size(), equalTo(1))__        assertThat(histo.getBuckets().get(0).getKeyAsString(), equalTo("2016-11-01"))__        assertThat(histo.getBuckets().get(0).getDocCount(), equalTo(1L))___        internalCluster().wipeIndices(index)__    };https,github,com,elastic,elasticsearch,issues,31392,demonstrates,an,edge,case,where,a,date,field,mapping,with,format,can,lead,for,the,date,histogram,aggregation,to,throw,an,error,if,a,non,utc,time,zone,with,daylight,savings,time,is,used,this,test,was,added,to,check,this,is,working,now;public,void,throws,interrupted,exception,execution,exception,string,index,test31392,assert,acked,client,admin,indices,prepare,create,index,add,mapping,type,d,type,date,format,get,index,random,true,client,prepare,index,index,type,set,source,d,1477954800000,ensure,searchable,index,search,response,response,client,prepare,search,index,add,aggregation,date,histogram,histo,field,d,date,histogram,interval,date,histogram,interval,month,time,zone,date,time,zone,for,id,europe,berlin,execute,action,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,get,buckets,size,equal,to,1,assert,that,histo,get,buckets,get,0,get,key,as,string,equal,to,1477954800000,assert,that,histo,get,buckets,get,0,get,doc,count,equal,to,1l,response,client,prepare,search,index,add,aggregation,date,histogram,histo,field,d,date,histogram,interval,date,histogram,interval,month,time,zone,date,time,zone,for,id,europe,berlin,format,yyyy,mm,dd,execute,action,get,assert,search,response,response,histo,response,get,aggregations,get,histo,assert,that,histo,get,buckets,size,equal,to,1,assert,that,histo,get,buckets,get,0,get,key,as,string,equal,to,2016,11,01,assert,that,histo,get,buckets,get,0,get,doc,count,equal,to,1l,internal,cluster,wipe,indices,index
DateHistogramIT -> public void testRewriteTimeZone_EpochMillisFormat() throws InterruptedException, ExecutionException;1536314350;https://github.com/elastic/elasticsearch/issues/31392 demonstrates an edge case where a date field mapping with_"format" = "epoch_millis" can lead for the date histogram aggregation to throw an error if a non-UTC time zone_with daylight savings time is used. This test was added to check this is working now;public void testRewriteTimeZone_EpochMillisFormat() throws InterruptedException, ExecutionException {_        String index = "test31392"__        assertAcked(client().admin().indices().prepareCreate(index).addMapping("type", "d", "type=date,format=epoch_millis").get())__        indexRandom(true, client().prepareIndex(index, "type").setSource("d", "1477954800000"))__        ensureSearchable(index)__        SearchResponse response = client().prepareSearch(index).addAggregation(dateHistogram("histo").field("d")_                .dateHistogramInterval(DateHistogramInterval.MONTH).timeZone(DateTimeZone.forID("Europe/Berlin"))).execute().actionGet()__        assertSearchResponse(response)__        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo.getBuckets().size(), equalTo(1))__        assertThat(histo.getBuckets().get(0).getKeyAsString(), equalTo("1477954800000"))__        assertThat(histo.getBuckets().get(0).getDocCount(), equalTo(1L))___        response = client().prepareSearch(index).addAggregation(dateHistogram("histo").field("d")_                .dateHistogramInterval(DateHistogramInterval.MONTH).timeZone(DateTimeZone.forID("Europe/Berlin")).format("yyyy-MM-dd"))_                .execute().actionGet()__        assertSearchResponse(response)__        histo = response.getAggregations().get("histo")__        assertThat(histo.getBuckets().size(), equalTo(1))__        assertThat(histo.getBuckets().get(0).getKeyAsString(), equalTo("2016-11-01"))__        assertThat(histo.getBuckets().get(0).getDocCount(), equalTo(1L))___        internalCluster().wipeIndices(index)__    };https,github,com,elastic,elasticsearch,issues,31392,demonstrates,an,edge,case,where,a,date,field,mapping,with,format,can,lead,for,the,date,histogram,aggregation,to,throw,an,error,if,a,non,utc,time,zone,with,daylight,savings,time,is,used,this,test,was,added,to,check,this,is,working,now;public,void,throws,interrupted,exception,execution,exception,string,index,test31392,assert,acked,client,admin,indices,prepare,create,index,add,mapping,type,d,type,date,format,get,index,random,true,client,prepare,index,index,type,set,source,d,1477954800000,ensure,searchable,index,search,response,response,client,prepare,search,index,add,aggregation,date,histogram,histo,field,d,date,histogram,interval,date,histogram,interval,month,time,zone,date,time,zone,for,id,europe,berlin,execute,action,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,get,buckets,size,equal,to,1,assert,that,histo,get,buckets,get,0,get,key,as,string,equal,to,1477954800000,assert,that,histo,get,buckets,get,0,get,doc,count,equal,to,1l,response,client,prepare,search,index,add,aggregation,date,histogram,histo,field,d,date,histogram,interval,date,histogram,interval,month,time,zone,date,time,zone,for,id,europe,berlin,format,yyyy,mm,dd,execute,action,get,assert,search,response,response,histo,response,get,aggregations,get,histo,assert,that,histo,get,buckets,size,equal,to,1,assert,that,histo,get,buckets,get,0,get,key,as,string,equal,to,2016,11,01,assert,that,histo,get,buckets,get,0,get,doc,count,equal,to,1l,internal,cluster,wipe,indices,index
DateHistogramIT -> public void testRewriteTimeZone_EpochMillisFormat() throws InterruptedException, ExecutionException;1538067637;https://github.com/elastic/elasticsearch/issues/31392 demonstrates an edge case where a date field mapping with_"format" = "epoch_millis" can lead for the date histogram aggregation to throw an error if a non-UTC time zone_with daylight savings time is used. This test was added to check this is working now;public void testRewriteTimeZone_EpochMillisFormat() throws InterruptedException, ExecutionException {_        String index = "test31392"__        assertAcked(client().admin().indices().prepareCreate(index).addMapping("type", "d", "type=date,format=epoch_millis").get())__        indexRandom(true, client().prepareIndex(index, "type").setSource("d", "1477954800000"))__        ensureSearchable(index)__        SearchResponse response = client().prepareSearch(index).addAggregation(dateHistogram("histo").field("d")_                .dateHistogramInterval(DateHistogramInterval.MONTH).timeZone(DateTimeZone.forID("Europe/Berlin"))).execute().actionGet()__        assertSearchResponse(response)__        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo.getBuckets().size(), equalTo(1))__        assertThat(histo.getBuckets().get(0).getKeyAsString(), equalTo("1477954800000"))__        assertThat(histo.getBuckets().get(0).getDocCount(), equalTo(1L))___        response = client().prepareSearch(index).addAggregation(dateHistogram("histo").field("d")_                .dateHistogramInterval(DateHistogramInterval.MONTH).timeZone(DateTimeZone.forID("Europe/Berlin")).format("yyyy-MM-dd"))_                .execute().actionGet()__        assertSearchResponse(response)__        histo = response.getAggregations().get("histo")__        assertThat(histo.getBuckets().size(), equalTo(1))__        assertThat(histo.getBuckets().get(0).getKeyAsString(), equalTo("2016-11-01"))__        assertThat(histo.getBuckets().get(0).getDocCount(), equalTo(1L))___        internalCluster().wipeIndices(index)__    };https,github,com,elastic,elasticsearch,issues,31392,demonstrates,an,edge,case,where,a,date,field,mapping,with,format,can,lead,for,the,date,histogram,aggregation,to,throw,an,error,if,a,non,utc,time,zone,with,daylight,savings,time,is,used,this,test,was,added,to,check,this,is,working,now;public,void,throws,interrupted,exception,execution,exception,string,index,test31392,assert,acked,client,admin,indices,prepare,create,index,add,mapping,type,d,type,date,format,get,index,random,true,client,prepare,index,index,type,set,source,d,1477954800000,ensure,searchable,index,search,response,response,client,prepare,search,index,add,aggregation,date,histogram,histo,field,d,date,histogram,interval,date,histogram,interval,month,time,zone,date,time,zone,for,id,europe,berlin,execute,action,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,get,buckets,size,equal,to,1,assert,that,histo,get,buckets,get,0,get,key,as,string,equal,to,1477954800000,assert,that,histo,get,buckets,get,0,get,doc,count,equal,to,1l,response,client,prepare,search,index,add,aggregation,date,histogram,histo,field,d,date,histogram,interval,date,histogram,interval,month,time,zone,date,time,zone,for,id,europe,berlin,format,yyyy,mm,dd,execute,action,get,assert,search,response,response,histo,response,get,aggregations,get,histo,assert,that,histo,get,buckets,size,equal,to,1,assert,that,histo,get,buckets,get,0,get,key,as,string,equal,to,2016,11,01,assert,that,histo,get,buckets,get,0,get,doc,count,equal,to,1l,internal,cluster,wipe,indices,index
DateHistogramIT -> public void testRewriteTimeZone_EpochMillisFormat() throws InterruptedException, ExecutionException;1541668945;https://github.com/elastic/elasticsearch/issues/31392 demonstrates an edge case where a date field mapping with_"format" = "epoch_millis" can lead for the date histogram aggregation to throw an error if a non-UTC time zone_with daylight savings time is used. This test was added to check this is working now;public void testRewriteTimeZone_EpochMillisFormat() throws InterruptedException, ExecutionException {_        String index = "test31392"__        assertAcked(client().admin().indices().prepareCreate(index).addMapping("type", "d", "type=date,format=epoch_millis").get())__        indexRandom(true, client().prepareIndex(index, "type").setSource("d", "1477954800000"))__        ensureSearchable(index)__        SearchResponse response = client().prepareSearch(index).addAggregation(dateHistogram("histo").field("d")_                .dateHistogramInterval(DateHistogramInterval.MONTH).timeZone(DateTimeZone.forID("Europe/Berlin"))).execute().actionGet()__        assertSearchResponse(response)__        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo.getBuckets().size(), equalTo(1))__        assertThat(histo.getBuckets().get(0).getKeyAsString(), equalTo("1477954800000"))__        assertThat(histo.getBuckets().get(0).getDocCount(), equalTo(1L))___        response = client().prepareSearch(index).addAggregation(dateHistogram("histo").field("d")_                .dateHistogramInterval(DateHistogramInterval.MONTH).timeZone(DateTimeZone.forID("Europe/Berlin")).format("yyyy-MM-dd"))_                .execute().actionGet()__        assertSearchResponse(response)__        histo = response.getAggregations().get("histo")__        assertThat(histo.getBuckets().size(), equalTo(1))__        assertThat(histo.getBuckets().get(0).getKeyAsString(), equalTo("2016-11-01"))__        assertThat(histo.getBuckets().get(0).getDocCount(), equalTo(1L))___        internalCluster().wipeIndices(index)__    };https,github,com,elastic,elasticsearch,issues,31392,demonstrates,an,edge,case,where,a,date,field,mapping,with,format,can,lead,for,the,date,histogram,aggregation,to,throw,an,error,if,a,non,utc,time,zone,with,daylight,savings,time,is,used,this,test,was,added,to,check,this,is,working,now;public,void,throws,interrupted,exception,execution,exception,string,index,test31392,assert,acked,client,admin,indices,prepare,create,index,add,mapping,type,d,type,date,format,get,index,random,true,client,prepare,index,index,type,set,source,d,1477954800000,ensure,searchable,index,search,response,response,client,prepare,search,index,add,aggregation,date,histogram,histo,field,d,date,histogram,interval,date,histogram,interval,month,time,zone,date,time,zone,for,id,europe,berlin,execute,action,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,get,buckets,size,equal,to,1,assert,that,histo,get,buckets,get,0,get,key,as,string,equal,to,1477954800000,assert,that,histo,get,buckets,get,0,get,doc,count,equal,to,1l,response,client,prepare,search,index,add,aggregation,date,histogram,histo,field,d,date,histogram,interval,date,histogram,interval,month,time,zone,date,time,zone,for,id,europe,berlin,format,yyyy,mm,dd,execute,action,get,assert,search,response,response,histo,response,get,aggregations,get,histo,assert,that,histo,get,buckets,size,equal,to,1,assert,that,histo,get,buckets,get,0,get,key,as,string,equal,to,2016,11,01,assert,that,histo,get,buckets,get,0,get,doc,count,equal,to,1l,internal,cluster,wipe,indices,index
DateHistogramIT -> public void testRewriteTimeZone_EpochMillisFormat() throws InterruptedException, ExecutionException;1544035746;https://github.com/elastic/elasticsearch/issues/31392 demonstrates an edge case where a date field mapping with_"format" = "epoch_millis" can lead for the date histogram aggregation to throw an error if a non-UTC time zone_with daylight savings time is used. This test was added to check this is working now;public void testRewriteTimeZone_EpochMillisFormat() throws InterruptedException, ExecutionException {_        String index = "test31392"__        assertAcked(client().admin().indices().prepareCreate(index).addMapping("type", "d", "type=date,format=epoch_millis").get())__        indexRandom(true, client().prepareIndex(index, "type").setSource("d", "1477954800000"))__        ensureSearchable(index)__        SearchResponse response = client().prepareSearch(index).addAggregation(dateHistogram("histo").field("d")_                .dateHistogramInterval(DateHistogramInterval.MONTH).timeZone(DateTimeZone.forID("Europe/Berlin"))).execute().actionGet()__        assertSearchResponse(response)__        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo.getBuckets().size(), equalTo(1))__        assertThat(histo.getBuckets().get(0).getKeyAsString(), equalTo("1477954800000"))__        assertThat(histo.getBuckets().get(0).getDocCount(), equalTo(1L))___        response = client().prepareSearch(index).addAggregation(dateHistogram("histo").field("d")_                .dateHistogramInterval(DateHistogramInterval.MONTH).timeZone(DateTimeZone.forID("Europe/Berlin")).format("yyyy-MM-dd"))_                .execute().actionGet()__        assertSearchResponse(response)__        histo = response.getAggregations().get("histo")__        assertThat(histo.getBuckets().size(), equalTo(1))__        assertThat(histo.getBuckets().get(0).getKeyAsString(), equalTo("2016-11-01"))__        assertThat(histo.getBuckets().get(0).getDocCount(), equalTo(1L))___        internalCluster().wipeIndices(index)__    };https,github,com,elastic,elasticsearch,issues,31392,demonstrates,an,edge,case,where,a,date,field,mapping,with,format,can,lead,for,the,date,histogram,aggregation,to,throw,an,error,if,a,non,utc,time,zone,with,daylight,savings,time,is,used,this,test,was,added,to,check,this,is,working,now;public,void,throws,interrupted,exception,execution,exception,string,index,test31392,assert,acked,client,admin,indices,prepare,create,index,add,mapping,type,d,type,date,format,get,index,random,true,client,prepare,index,index,type,set,source,d,1477954800000,ensure,searchable,index,search,response,response,client,prepare,search,index,add,aggregation,date,histogram,histo,field,d,date,histogram,interval,date,histogram,interval,month,time,zone,date,time,zone,for,id,europe,berlin,execute,action,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,get,buckets,size,equal,to,1,assert,that,histo,get,buckets,get,0,get,key,as,string,equal,to,1477954800000,assert,that,histo,get,buckets,get,0,get,doc,count,equal,to,1l,response,client,prepare,search,index,add,aggregation,date,histogram,histo,field,d,date,histogram,interval,date,histogram,interval,month,time,zone,date,time,zone,for,id,europe,berlin,format,yyyy,mm,dd,execute,action,get,assert,search,response,response,histo,response,get,aggregations,get,histo,assert,that,histo,get,buckets,size,equal,to,1,assert,that,histo,get,buckets,get,0,get,key,as,string,equal,to,2016,11,01,assert,that,histo,get,buckets,get,0,get,doc,count,equal,to,1l,internal,cluster,wipe,indices,index
DateHistogramIT -> public void testRewriteTimeZone_EpochMillisFormat() throws InterruptedException, ExecutionException;1544110272;https://github.com/elastic/elasticsearch/issues/31392 demonstrates an edge case where a date field mapping with_"format" = "epoch_millis" can lead for the date histogram aggregation to throw an error if a non-UTC time zone_with daylight savings time is used. This test was added to check this is working now;public void testRewriteTimeZone_EpochMillisFormat() throws InterruptedException, ExecutionException {_        String index = "test31392"__        assertAcked(client().admin().indices().prepareCreate(index).addMapping("type", "d", "type=date,format=epoch_millis").get())__        indexRandom(true, client().prepareIndex(index, "type").setSource("d", "1477954800000"))__        ensureSearchable(index)__        SearchResponse response = client().prepareSearch(index).addAggregation(dateHistogram("histo").field("d")_                .dateHistogramInterval(DateHistogramInterval.MONTH).timeZone(DateTimeZone.forID("Europe/Berlin"))).get()__        assertSearchResponse(response)__        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo.getBuckets().size(), equalTo(1))__        assertThat(histo.getBuckets().get(0).getKeyAsString(), equalTo("1477954800000"))__        assertThat(histo.getBuckets().get(0).getDocCount(), equalTo(1L))___        response = client().prepareSearch(index).addAggregation(dateHistogram("histo").field("d")_                .dateHistogramInterval(DateHistogramInterval.MONTH).timeZone(DateTimeZone.forID("Europe/Berlin")).format("yyyy-MM-dd"))_                .get()__        assertSearchResponse(response)__        histo = response.getAggregations().get("histo")__        assertThat(histo.getBuckets().size(), equalTo(1))__        assertThat(histo.getBuckets().get(0).getKeyAsString(), equalTo("2016-11-01"))__        assertThat(histo.getBuckets().get(0).getDocCount(), equalTo(1L))___        internalCluster().wipeIndices(index)__    };https,github,com,elastic,elasticsearch,issues,31392,demonstrates,an,edge,case,where,a,date,field,mapping,with,format,can,lead,for,the,date,histogram,aggregation,to,throw,an,error,if,a,non,utc,time,zone,with,daylight,savings,time,is,used,this,test,was,added,to,check,this,is,working,now;public,void,throws,interrupted,exception,execution,exception,string,index,test31392,assert,acked,client,admin,indices,prepare,create,index,add,mapping,type,d,type,date,format,get,index,random,true,client,prepare,index,index,type,set,source,d,1477954800000,ensure,searchable,index,search,response,response,client,prepare,search,index,add,aggregation,date,histogram,histo,field,d,date,histogram,interval,date,histogram,interval,month,time,zone,date,time,zone,for,id,europe,berlin,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,get,buckets,size,equal,to,1,assert,that,histo,get,buckets,get,0,get,key,as,string,equal,to,1477954800000,assert,that,histo,get,buckets,get,0,get,doc,count,equal,to,1l,response,client,prepare,search,index,add,aggregation,date,histogram,histo,field,d,date,histogram,interval,date,histogram,interval,month,time,zone,date,time,zone,for,id,europe,berlin,format,yyyy,mm,dd,get,assert,search,response,response,histo,response,get,aggregations,get,histo,assert,that,histo,get,buckets,size,equal,to,1,assert,that,histo,get,buckets,get,0,get,key,as,string,equal,to,2016,11,01,assert,that,histo,get,buckets,get,0,get,doc,count,equal,to,1l,internal,cluster,wipe,indices,index
DateHistogramIT -> public void testRewriteTimeZone_EpochMillisFormat() throws InterruptedException, ExecutionException;1544232221;https://github.com/elastic/elasticsearch/issues/31392 demonstrates an edge case where a date field mapping with_"format" = "epoch_millis" can lead for the date histogram aggregation to throw an error if a non-UTC time zone_with daylight savings time is used. This test was added to check this is working now;public void testRewriteTimeZone_EpochMillisFormat() throws InterruptedException, ExecutionException {_        String index = "test31392"__        assertAcked(client().admin().indices().prepareCreate(index).addMapping("type", "d", "type=date,format=epoch_millis").get())__        indexRandom(true, client().prepareIndex(index, "type").setSource("d", "1477954800000"))__        ensureSearchable(index)__        SearchResponse response = client().prepareSearch(index).addAggregation(dateHistogram("histo").field("d")_                .dateHistogramInterval(DateHistogramInterval.MONTH).timeZone(DateTimeZone.forID("Europe/Berlin"))).get()__        assertSearchResponse(response)__        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo.getBuckets().size(), equalTo(1))__        assertThat(histo.getBuckets().get(0).getKeyAsString(), equalTo("1477954800000"))__        assertThat(histo.getBuckets().get(0).getDocCount(), equalTo(1L))___        response = client().prepareSearch(index).addAggregation(dateHistogram("histo").field("d")_                .dateHistogramInterval(DateHistogramInterval.MONTH).timeZone(DateTimeZone.forID("Europe/Berlin")).format("yyyy-MM-dd"))_                .get()__        assertSearchResponse(response)__        histo = response.getAggregations().get("histo")__        assertThat(histo.getBuckets().size(), equalTo(1))__        assertThat(histo.getBuckets().get(0).getKeyAsString(), equalTo("2016-11-01"))__        assertThat(histo.getBuckets().get(0).getDocCount(), equalTo(1L))___        internalCluster().wipeIndices(index)__    };https,github,com,elastic,elasticsearch,issues,31392,demonstrates,an,edge,case,where,a,date,field,mapping,with,format,can,lead,for,the,date,histogram,aggregation,to,throw,an,error,if,a,non,utc,time,zone,with,daylight,savings,time,is,used,this,test,was,added,to,check,this,is,working,now;public,void,throws,interrupted,exception,execution,exception,string,index,test31392,assert,acked,client,admin,indices,prepare,create,index,add,mapping,type,d,type,date,format,get,index,random,true,client,prepare,index,index,type,set,source,d,1477954800000,ensure,searchable,index,search,response,response,client,prepare,search,index,add,aggregation,date,histogram,histo,field,d,date,histogram,interval,date,histogram,interval,month,time,zone,date,time,zone,for,id,europe,berlin,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,get,buckets,size,equal,to,1,assert,that,histo,get,buckets,get,0,get,key,as,string,equal,to,1477954800000,assert,that,histo,get,buckets,get,0,get,doc,count,equal,to,1l,response,client,prepare,search,index,add,aggregation,date,histogram,histo,field,d,date,histogram,interval,date,histogram,interval,month,time,zone,date,time,zone,for,id,europe,berlin,format,yyyy,mm,dd,get,assert,search,response,response,histo,response,get,aggregations,get,histo,assert,that,histo,get,buckets,size,equal,to,1,assert,that,histo,get,buckets,get,0,get,key,as,string,equal,to,2016,11,01,assert,that,histo,get,buckets,get,0,get,doc,count,equal,to,1l,internal,cluster,wipe,indices,index
DateHistogramIT -> public void testRewriteTimeZone_EpochMillisFormat() throws InterruptedException, ExecutionException;1544600864;https://github.com/elastic/elasticsearch/issues/31392 demonstrates an edge case where a date field mapping with_"format" = "epoch_millis" can lead for the date histogram aggregation to throw an error if a non-UTC time zone_with daylight savings time is used. This test was added to check this is working now;public void testRewriteTimeZone_EpochMillisFormat() throws InterruptedException, ExecutionException {_        String index = "test31392"__        assertAcked(client().admin().indices().prepareCreate(index).addMapping("type", "d", "type=date,format=epoch_millis").get())__        indexRandom(true, client().prepareIndex(index, "type").setSource("d", "1477954800000"))__        ensureSearchable(index)__        SearchResponse response = client().prepareSearch(index).addAggregation(dateHistogram("histo").field("d")_                .dateHistogramInterval(DateHistogramInterval.MONTH).timeZone(DateTimeZone.forID("Europe/Berlin"))).get()__        assertSearchResponse(response)__        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo.getBuckets().size(), equalTo(1))__        assertThat(histo.getBuckets().get(0).getKeyAsString(), equalTo("1477954800000"))__        assertThat(histo.getBuckets().get(0).getDocCount(), equalTo(1L))___        response = client().prepareSearch(index).addAggregation(dateHistogram("histo").field("d")_                .dateHistogramInterval(DateHistogramInterval.MONTH).timeZone(DateTimeZone.forID("Europe/Berlin")).format("yyyy-MM-dd"))_                .get()__        assertSearchResponse(response)__        histo = response.getAggregations().get("histo")__        assertThat(histo.getBuckets().size(), equalTo(1))__        assertThat(histo.getBuckets().get(0).getKeyAsString(), equalTo("2016-11-01"))__        assertThat(histo.getBuckets().get(0).getDocCount(), equalTo(1L))___        internalCluster().wipeIndices(index)__    };https,github,com,elastic,elasticsearch,issues,31392,demonstrates,an,edge,case,where,a,date,field,mapping,with,format,can,lead,for,the,date,histogram,aggregation,to,throw,an,error,if,a,non,utc,time,zone,with,daylight,savings,time,is,used,this,test,was,added,to,check,this,is,working,now;public,void,throws,interrupted,exception,execution,exception,string,index,test31392,assert,acked,client,admin,indices,prepare,create,index,add,mapping,type,d,type,date,format,get,index,random,true,client,prepare,index,index,type,set,source,d,1477954800000,ensure,searchable,index,search,response,response,client,prepare,search,index,add,aggregation,date,histogram,histo,field,d,date,histogram,interval,date,histogram,interval,month,time,zone,date,time,zone,for,id,europe,berlin,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,get,buckets,size,equal,to,1,assert,that,histo,get,buckets,get,0,get,key,as,string,equal,to,1477954800000,assert,that,histo,get,buckets,get,0,get,doc,count,equal,to,1l,response,client,prepare,search,index,add,aggregation,date,histogram,histo,field,d,date,histogram,interval,date,histogram,interval,month,time,zone,date,time,zone,for,id,europe,berlin,format,yyyy,mm,dd,get,assert,search,response,response,histo,response,get,aggregations,get,histo,assert,that,histo,get,buckets,size,equal,to,1,assert,that,histo,get,buckets,get,0,get,key,as,string,equal,to,2016,11,01,assert,that,histo,get,buckets,get,0,get,doc,count,equal,to,1l,internal,cluster,wipe,indices,index
DateHistogramIT -> public void testRewriteTimeZone_EpochMillisFormat() throws InterruptedException, ExecutionException;1548236405;https://github.com/elastic/elasticsearch/issues/31392 demonstrates an edge case where a date field mapping with_"format" = "epoch_millis" can lead for the date histogram aggregation to throw an error if a non-UTC time zone_with daylight savings time is used. This test was added to check this is working now;public void testRewriteTimeZone_EpochMillisFormat() throws InterruptedException, ExecutionException {_        String index = "test31392"__        assertAcked(client().admin().indices().prepareCreate(index).addMapping("type", "d", "type=date,format=epoch_millis").get())__        indexRandom(true, client().prepareIndex(index, "type").setSource("d", "1477954800000"))__        ensureSearchable(index)__        SearchResponse response = client().prepareSearch(index).addAggregation(dateHistogram("histo").field("d")_                .dateHistogramInterval(DateHistogramInterval.MONTH).timeZone(ZoneId.of("Europe/Berlin"))).get()__        assertSearchResponse(response)__        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo.getBuckets().size(), equalTo(1))__        if (JavaVersion.current().getVersion().get(0) == 8 && histo.getBuckets().get(0).getKeyAsString().endsWith(".0")) {_            assertThat(histo.getBuckets().get(0).getKeyAsString(), equalTo("1477954800000.0"))__        } else {_            assertThat(histo.getBuckets().get(0).getKeyAsString(), equalTo("1477954800000"))__        }_        assertThat(histo.getBuckets().get(0).getDocCount(), equalTo(1L))___        response = client().prepareSearch(index).addAggregation(dateHistogram("histo").field("d")_                .dateHistogramInterval(DateHistogramInterval.MONTH).timeZone(ZoneId.of("Europe/Berlin")).format("yyyy-MM-dd"))_                .get()__        assertSearchResponse(response)__        histo = response.getAggregations().get("histo")__        assertThat(histo.getBuckets().size(), equalTo(1))__        assertThat(histo.getBuckets().get(0).getKeyAsString(), equalTo("2016-11-01"))__        assertThat(histo.getBuckets().get(0).getDocCount(), equalTo(1L))___        internalCluster().wipeIndices(index)__    };https,github,com,elastic,elasticsearch,issues,31392,demonstrates,an,edge,case,where,a,date,field,mapping,with,format,can,lead,for,the,date,histogram,aggregation,to,throw,an,error,if,a,non,utc,time,zone,with,daylight,savings,time,is,used,this,test,was,added,to,check,this,is,working,now;public,void,throws,interrupted,exception,execution,exception,string,index,test31392,assert,acked,client,admin,indices,prepare,create,index,add,mapping,type,d,type,date,format,get,index,random,true,client,prepare,index,index,type,set,source,d,1477954800000,ensure,searchable,index,search,response,response,client,prepare,search,index,add,aggregation,date,histogram,histo,field,d,date,histogram,interval,date,histogram,interval,month,time,zone,zone,id,of,europe,berlin,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,get,buckets,size,equal,to,1,if,java,version,current,get,version,get,0,8,histo,get,buckets,get,0,get,key,as,string,ends,with,0,assert,that,histo,get,buckets,get,0,get,key,as,string,equal,to,1477954800000,0,else,assert,that,histo,get,buckets,get,0,get,key,as,string,equal,to,1477954800000,assert,that,histo,get,buckets,get,0,get,doc,count,equal,to,1l,response,client,prepare,search,index,add,aggregation,date,histogram,histo,field,d,date,histogram,interval,date,histogram,interval,month,time,zone,zone,id,of,europe,berlin,format,yyyy,mm,dd,get,assert,search,response,response,histo,response,get,aggregations,get,histo,assert,that,histo,get,buckets,size,equal,to,1,assert,that,histo,get,buckets,get,0,get,key,as,string,equal,to,2016,11,01,assert,that,histo,get,buckets,get,0,get,doc,count,equal,to,1l,internal,cluster,wipe,indices,index
DateHistogramIT -> public void testRewriteTimeZone_EpochMillisFormat() throws InterruptedException, ExecutionException;1548921340;https://github.com/elastic/elasticsearch/issues/31392 demonstrates an edge case where a date field mapping with_"format" = "epoch_millis" can lead for the date histogram aggregation to throw an error if a non-UTC time zone_with daylight savings time is used. This test was added to check this is working now;public void testRewriteTimeZone_EpochMillisFormat() throws InterruptedException, ExecutionException {_        String index = "test31392"__        assertAcked(client().admin().indices().prepareCreate(index).addMapping("type", "d", "type=date,format=epoch_millis").get())__        indexRandom(true, client().prepareIndex(index, "type").setSource("d", "1477954800000"))__        ensureSearchable(index)__        SearchResponse response = client().prepareSearch(index).addAggregation(dateHistogram("histo").field("d")_                .dateHistogramInterval(DateHistogramInterval.MONTH).timeZone(ZoneId.of("Europe/Berlin"))).get()__        assertSearchResponse(response)__        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo.getBuckets().size(), equalTo(1))__        if (JavaVersion.current().getVersion().get(0) == 8 && histo.getBuckets().get(0).getKeyAsString().endsWith(".0")) {_            assertThat(histo.getBuckets().get(0).getKeyAsString(), equalTo("1477954800000.0"))__        } else {_            assertThat(histo.getBuckets().get(0).getKeyAsString(), equalTo("1477954800000"))__        }_        assertThat(histo.getBuckets().get(0).getDocCount(), equalTo(1L))___        response = client().prepareSearch(index).addAggregation(dateHistogram("histo").field("d")_                .dateHistogramInterval(DateHistogramInterval.MONTH).timeZone(ZoneId.of("Europe/Berlin")).format("yyyy-MM-dd"))_                .get()__        assertSearchResponse(response)__        histo = response.getAggregations().get("histo")__        assertThat(histo.getBuckets().size(), equalTo(1))__        assertThat(histo.getBuckets().get(0).getKeyAsString(), equalTo("2016-11-01"))__        assertThat(histo.getBuckets().get(0).getDocCount(), equalTo(1L))___        internalCluster().wipeIndices(index)__    };https,github,com,elastic,elasticsearch,issues,31392,demonstrates,an,edge,case,where,a,date,field,mapping,with,format,can,lead,for,the,date,histogram,aggregation,to,throw,an,error,if,a,non,utc,time,zone,with,daylight,savings,time,is,used,this,test,was,added,to,check,this,is,working,now;public,void,throws,interrupted,exception,execution,exception,string,index,test31392,assert,acked,client,admin,indices,prepare,create,index,add,mapping,type,d,type,date,format,get,index,random,true,client,prepare,index,index,type,set,source,d,1477954800000,ensure,searchable,index,search,response,response,client,prepare,search,index,add,aggregation,date,histogram,histo,field,d,date,histogram,interval,date,histogram,interval,month,time,zone,zone,id,of,europe,berlin,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,get,buckets,size,equal,to,1,if,java,version,current,get,version,get,0,8,histo,get,buckets,get,0,get,key,as,string,ends,with,0,assert,that,histo,get,buckets,get,0,get,key,as,string,equal,to,1477954800000,0,else,assert,that,histo,get,buckets,get,0,get,key,as,string,equal,to,1477954800000,assert,that,histo,get,buckets,get,0,get,doc,count,equal,to,1l,response,client,prepare,search,index,add,aggregation,date,histogram,histo,field,d,date,histogram,interval,date,histogram,interval,month,time,zone,zone,id,of,europe,berlin,format,yyyy,mm,dd,get,assert,search,response,response,histo,response,get,aggregations,get,histo,assert,that,histo,get,buckets,size,equal,to,1,assert,that,histo,get,buckets,get,0,get,key,as,string,equal,to,2016,11,01,assert,that,histo,get,buckets,get,0,get,doc,count,equal,to,1l,internal,cluster,wipe,indices,index
DateHistogramIT -> public void testRewriteTimeZone_EpochMillisFormat() throws InterruptedException, ExecutionException;1550743790;https://github.com/elastic/elasticsearch/issues/31392 demonstrates an edge case where a date field mapping with_"format" = "epoch_millis" can lead for the date histogram aggregation to throw an error if a non-UTC time zone_with daylight savings time is used. This test was added to check this is working now;public void testRewriteTimeZone_EpochMillisFormat() throws InterruptedException, ExecutionException {_        String index = "test31392"__        assertAcked(client().admin().indices().prepareCreate(index).addMapping("type", "d", "type=date,format=epoch_millis").get())__        indexRandom(true, client().prepareIndex(index, "type").setSource("d", "1477954800000"))__        ensureSearchable(index)__        SearchResponse response = client().prepareSearch(index).addAggregation(dateHistogram("histo").field("d")_                .dateHistogramInterval(DateHistogramInterval.MONTH).timeZone(ZoneId.of("Europe/Berlin"))).get()__        assertSearchResponse(response)__        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo.getBuckets().size(), equalTo(1))__        if (JavaVersion.current().getVersion().get(0) == 8 && histo.getBuckets().get(0).getKeyAsString().endsWith(".0")) {_            assertThat(histo.getBuckets().get(0).getKeyAsString(), equalTo("1477954800000.0"))__        } else {_            assertThat(histo.getBuckets().get(0).getKeyAsString(), equalTo("1477954800000"))__        }_        assertThat(histo.getBuckets().get(0).getDocCount(), equalTo(1L))___        response = client().prepareSearch(index).addAggregation(dateHistogram("histo").field("d")_                .dateHistogramInterval(DateHistogramInterval.MONTH).timeZone(ZoneId.of("Europe/Berlin")).format("yyyy-MM-dd"))_                .get()__        assertSearchResponse(response)__        histo = response.getAggregations().get("histo")__        assertThat(histo.getBuckets().size(), equalTo(1))__        assertThat(histo.getBuckets().get(0).getKeyAsString(), equalTo("2016-11-01"))__        assertThat(histo.getBuckets().get(0).getDocCount(), equalTo(1L))___        internalCluster().wipeIndices(index)__    };https,github,com,elastic,elasticsearch,issues,31392,demonstrates,an,edge,case,where,a,date,field,mapping,with,format,can,lead,for,the,date,histogram,aggregation,to,throw,an,error,if,a,non,utc,time,zone,with,daylight,savings,time,is,used,this,test,was,added,to,check,this,is,working,now;public,void,throws,interrupted,exception,execution,exception,string,index,test31392,assert,acked,client,admin,indices,prepare,create,index,add,mapping,type,d,type,date,format,get,index,random,true,client,prepare,index,index,type,set,source,d,1477954800000,ensure,searchable,index,search,response,response,client,prepare,search,index,add,aggregation,date,histogram,histo,field,d,date,histogram,interval,date,histogram,interval,month,time,zone,zone,id,of,europe,berlin,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,get,buckets,size,equal,to,1,if,java,version,current,get,version,get,0,8,histo,get,buckets,get,0,get,key,as,string,ends,with,0,assert,that,histo,get,buckets,get,0,get,key,as,string,equal,to,1477954800000,0,else,assert,that,histo,get,buckets,get,0,get,key,as,string,equal,to,1477954800000,assert,that,histo,get,buckets,get,0,get,doc,count,equal,to,1l,response,client,prepare,search,index,add,aggregation,date,histogram,histo,field,d,date,histogram,interval,date,histogram,interval,month,time,zone,zone,id,of,europe,berlin,format,yyyy,mm,dd,get,assert,search,response,response,histo,response,get,aggregations,get,histo,assert,that,histo,get,buckets,size,equal,to,1,assert,that,histo,get,buckets,get,0,get,key,as,string,equal,to,2016,11,01,assert,that,histo,get,buckets,get,0,get,doc,count,equal,to,1l,internal,cluster,wipe,indices,index
DateHistogramIT -> public void testMultiValuedFieldWithValueScript() throws Exception;1524684173;The script will change to document date values to the following:_<p>_doc 1: [ Feb 2, Mar 3]_doc 2: [ Mar 2, Apr 3]_doc 3: [ Mar 15, Apr 16]_doc 4: [ Apr 2, May 3]_doc 5: [ Apr 15, May 16]_doc 6: [ Apr 23, May 24];public void testMultiValuedFieldWithValueScript() throws Exception {_        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "dates")__        SearchResponse response = client().prepareSearch("idx")_                .addAggregation(dateHistogram("histo")_                        .field("dates")_                        .script(new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.LONG_PLUS_ONE_MONTH, params))_                        .dateHistogramInterval(DateHistogramInterval.MONTH)).execute().actionGet()___        assertSearchResponse(response)___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(4))___        DateTime key = new DateTime(2012, 2, 1, 0, 0, DateTimeZone.UTC)__        Histogram.Bucket bucket = buckets.get(0)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(1L))___        key = new DateTime(2012, 3, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(1)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(3L))___        key = new DateTime(2012, 4, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(2)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(5L))___        key = new DateTime(2012, 5, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(3)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(3L))__    };the,script,will,change,to,document,date,values,to,the,following,p,doc,1,feb,2,mar,3,doc,2,mar,2,apr,3,doc,3,mar,15,apr,16,doc,4,apr,2,may,3,doc,5,apr,15,may,16,doc,6,apr,23,may,24;public,void,test,multi,valued,field,with,value,script,throws,exception,map,string,object,params,new,hash,map,params,put,fieldname,dates,search,response,response,client,prepare,search,idx,add,aggregation,date,histogram,histo,field,dates,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,date,histogram,interval,date,histogram,interval,month,execute,action,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,4,date,time,key,new,date,time,2012,2,1,0,0,date,time,zone,utc,histogram,bucket,bucket,buckets,get,0,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,1l,key,new,date,time,2012,3,1,0,0,date,time,zone,utc,bucket,buckets,get,1,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,3l,key,new,date,time,2012,4,1,0,0,date,time,zone,utc,bucket,buckets,get,2,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,5l,key,new,date,time,2012,5,1,0,0,date,time,zone,utc,bucket,buckets,get,3,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,3l
DateHistogramIT -> public void testMultiValuedFieldWithValueScript() throws Exception;1529487105;The script will change to document date values to the following:_<p>_doc 1: [ Feb 2, Mar 3]_doc 2: [ Mar 2, Apr 3]_doc 3: [ Mar 15, Apr 16]_doc 4: [ Apr 2, May 3]_doc 5: [ Apr 15, May 16]_doc 6: [ Apr 23, May 24];public void testMultiValuedFieldWithValueScript() throws Exception {_        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "dates")__        SearchResponse response = client().prepareSearch("idx")_                .addAggregation(dateHistogram("histo")_                        .field("dates")_                        .script(new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.LONG_PLUS_ONE_MONTH, params))_                        .dateHistogramInterval(DateHistogramInterval.MONTH)).execute().actionGet()___        assertSearchResponse(response)___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(4))___        DateTime key = new DateTime(2012, 2, 1, 0, 0, DateTimeZone.UTC)__        Histogram.Bucket bucket = buckets.get(0)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(1L))___        key = new DateTime(2012, 3, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(1)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(3L))___        key = new DateTime(2012, 4, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(2)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(5L))___        key = new DateTime(2012, 5, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(3)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(3L))__    };the,script,will,change,to,document,date,values,to,the,following,p,doc,1,feb,2,mar,3,doc,2,mar,2,apr,3,doc,3,mar,15,apr,16,doc,4,apr,2,may,3,doc,5,apr,15,may,16,doc,6,apr,23,may,24;public,void,test,multi,valued,field,with,value,script,throws,exception,map,string,object,params,new,hash,map,params,put,fieldname,dates,search,response,response,client,prepare,search,idx,add,aggregation,date,histogram,histo,field,dates,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,date,histogram,interval,date,histogram,interval,month,execute,action,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,4,date,time,key,new,date,time,2012,2,1,0,0,date,time,zone,utc,histogram,bucket,bucket,buckets,get,0,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,1l,key,new,date,time,2012,3,1,0,0,date,time,zone,utc,bucket,buckets,get,1,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,3l,key,new,date,time,2012,4,1,0,0,date,time,zone,utc,bucket,buckets,get,2,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,5l,key,new,date,time,2012,5,1,0,0,date,time,zone,utc,bucket,buckets,get,3,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,3l
DateHistogramIT -> public void testMultiValuedFieldWithValueScript() throws Exception;1531179852;The script will change to document date values to the following:_<p>_doc 1: [ Feb 2, Mar 3]_doc 2: [ Mar 2, Apr 3]_doc 3: [ Mar 15, Apr 16]_doc 4: [ Apr 2, May 3]_doc 5: [ Apr 15, May 16]_doc 6: [ Apr 23, May 24];public void testMultiValuedFieldWithValueScript() throws Exception {_        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "dates")__        SearchResponse response = client().prepareSearch("idx")_                .addAggregation(dateHistogram("histo")_                        .field("dates")_                        .script(new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.LONG_PLUS_ONE_MONTH, params))_                        .dateHistogramInterval(DateHistogramInterval.MONTH)).execute().actionGet()___        assertSearchResponse(response)___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(4))___        DateTime key = new DateTime(2012, 2, 1, 0, 0, DateTimeZone.UTC)__        Histogram.Bucket bucket = buckets.get(0)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(1L))___        key = new DateTime(2012, 3, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(1)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(3L))___        key = new DateTime(2012, 4, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(2)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(5L))___        key = new DateTime(2012, 5, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(3)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(3L))__    };the,script,will,change,to,document,date,values,to,the,following,p,doc,1,feb,2,mar,3,doc,2,mar,2,apr,3,doc,3,mar,15,apr,16,doc,4,apr,2,may,3,doc,5,apr,15,may,16,doc,6,apr,23,may,24;public,void,test,multi,valued,field,with,value,script,throws,exception,map,string,object,params,new,hash,map,params,put,fieldname,dates,search,response,response,client,prepare,search,idx,add,aggregation,date,histogram,histo,field,dates,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,date,histogram,interval,date,histogram,interval,month,execute,action,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,4,date,time,key,new,date,time,2012,2,1,0,0,date,time,zone,utc,histogram,bucket,bucket,buckets,get,0,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,1l,key,new,date,time,2012,3,1,0,0,date,time,zone,utc,bucket,buckets,get,1,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,3l,key,new,date,time,2012,4,1,0,0,date,time,zone,utc,bucket,buckets,get,2,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,5l,key,new,date,time,2012,5,1,0,0,date,time,zone,utc,bucket,buckets,get,3,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,3l
DateHistogramIT -> public void testMultiValuedFieldWithValueScript() throws Exception;1536314350;The script will change to document date values to the following:_<p>_doc 1: [ Feb 2, Mar 3]_doc 2: [ Mar 2, Apr 3]_doc 3: [ Mar 15, Apr 16]_doc 4: [ Apr 2, May 3]_doc 5: [ Apr 15, May 16]_doc 6: [ Apr 23, May 24];public void testMultiValuedFieldWithValueScript() throws Exception {_        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "dates")__        SearchResponse response = client().prepareSearch("idx")_                .addAggregation(dateHistogram("histo")_                        .field("dates")_                        .script(new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.LONG_PLUS_ONE_MONTH, params))_                        .dateHistogramInterval(DateHistogramInterval.MONTH)).execute().actionGet()___        assertSearchResponse(response)___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(4))___        DateTime key = new DateTime(2012, 2, 1, 0, 0, DateTimeZone.UTC)__        Histogram.Bucket bucket = buckets.get(0)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(1L))___        key = new DateTime(2012, 3, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(1)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(3L))___        key = new DateTime(2012, 4, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(2)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(5L))___        key = new DateTime(2012, 5, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(3)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(3L))__    };the,script,will,change,to,document,date,values,to,the,following,p,doc,1,feb,2,mar,3,doc,2,mar,2,apr,3,doc,3,mar,15,apr,16,doc,4,apr,2,may,3,doc,5,apr,15,may,16,doc,6,apr,23,may,24;public,void,test,multi,valued,field,with,value,script,throws,exception,map,string,object,params,new,hash,map,params,put,fieldname,dates,search,response,response,client,prepare,search,idx,add,aggregation,date,histogram,histo,field,dates,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,date,histogram,interval,date,histogram,interval,month,execute,action,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,4,date,time,key,new,date,time,2012,2,1,0,0,date,time,zone,utc,histogram,bucket,bucket,buckets,get,0,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,1l,key,new,date,time,2012,3,1,0,0,date,time,zone,utc,bucket,buckets,get,1,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,3l,key,new,date,time,2012,4,1,0,0,date,time,zone,utc,bucket,buckets,get,2,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,5l,key,new,date,time,2012,5,1,0,0,date,time,zone,utc,bucket,buckets,get,3,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,3l
DateHistogramIT -> public void testMultiValuedFieldWithValueScript() throws Exception;1538067637;The script will change to document date values to the following:_<p>_doc 1: [ Feb 2, Mar 3]_doc 2: [ Mar 2, Apr 3]_doc 3: [ Mar 15, Apr 16]_doc 4: [ Apr 2, May 3]_doc 5: [ Apr 15, May 16]_doc 6: [ Apr 23, May 24];public void testMultiValuedFieldWithValueScript() throws Exception {_        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "dates")__        SearchResponse response = client().prepareSearch("idx")_                .addAggregation(dateHistogram("histo")_                        .field("dates")_                        .script(new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.LONG_PLUS_ONE_MONTH, params))_                        .dateHistogramInterval(DateHistogramInterval.MONTH)).execute().actionGet()___        assertSearchResponse(response)___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(4))___        DateTime key = new DateTime(2012, 2, 1, 0, 0, DateTimeZone.UTC)__        Histogram.Bucket bucket = buckets.get(0)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(1L))___        key = new DateTime(2012, 3, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(1)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(3L))___        key = new DateTime(2012, 4, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(2)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(5L))___        key = new DateTime(2012, 5, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(3)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(3L))__    };the,script,will,change,to,document,date,values,to,the,following,p,doc,1,feb,2,mar,3,doc,2,mar,2,apr,3,doc,3,mar,15,apr,16,doc,4,apr,2,may,3,doc,5,apr,15,may,16,doc,6,apr,23,may,24;public,void,test,multi,valued,field,with,value,script,throws,exception,map,string,object,params,new,hash,map,params,put,fieldname,dates,search,response,response,client,prepare,search,idx,add,aggregation,date,histogram,histo,field,dates,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,date,histogram,interval,date,histogram,interval,month,execute,action,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,4,date,time,key,new,date,time,2012,2,1,0,0,date,time,zone,utc,histogram,bucket,bucket,buckets,get,0,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,1l,key,new,date,time,2012,3,1,0,0,date,time,zone,utc,bucket,buckets,get,1,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,3l,key,new,date,time,2012,4,1,0,0,date,time,zone,utc,bucket,buckets,get,2,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,5l,key,new,date,time,2012,5,1,0,0,date,time,zone,utc,bucket,buckets,get,3,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,3l
DateHistogramIT -> public void testMultiValuedFieldWithValueScript() throws Exception;1541668945;The script will change to document date values to the following:_<p>_doc 1: [ Feb 2, Mar 3]_doc 2: [ Mar 2, Apr 3]_doc 3: [ Mar 15, Apr 16]_doc 4: [ Apr 2, May 3]_doc 5: [ Apr 15, May 16]_doc 6: [ Apr 23, May 24];public void testMultiValuedFieldWithValueScript() throws Exception {_        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "dates")__        SearchResponse response = client().prepareSearch("idx")_                .addAggregation(dateHistogram("histo")_                        .field("dates")_                        .script(new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.LONG_PLUS_ONE_MONTH, params))_                        .dateHistogramInterval(DateHistogramInterval.MONTH)).execute().actionGet()___        assertSearchResponse(response)___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(4))___        DateTime key = new DateTime(2012, 2, 1, 0, 0, DateTimeZone.UTC)__        Histogram.Bucket bucket = buckets.get(0)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(1L))___        key = new DateTime(2012, 3, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(1)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(3L))___        key = new DateTime(2012, 4, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(2)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(5L))___        key = new DateTime(2012, 5, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(3)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(3L))__    };the,script,will,change,to,document,date,values,to,the,following,p,doc,1,feb,2,mar,3,doc,2,mar,2,apr,3,doc,3,mar,15,apr,16,doc,4,apr,2,may,3,doc,5,apr,15,may,16,doc,6,apr,23,may,24;public,void,test,multi,valued,field,with,value,script,throws,exception,map,string,object,params,new,hash,map,params,put,fieldname,dates,search,response,response,client,prepare,search,idx,add,aggregation,date,histogram,histo,field,dates,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,date,histogram,interval,date,histogram,interval,month,execute,action,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,4,date,time,key,new,date,time,2012,2,1,0,0,date,time,zone,utc,histogram,bucket,bucket,buckets,get,0,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,1l,key,new,date,time,2012,3,1,0,0,date,time,zone,utc,bucket,buckets,get,1,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,3l,key,new,date,time,2012,4,1,0,0,date,time,zone,utc,bucket,buckets,get,2,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,5l,key,new,date,time,2012,5,1,0,0,date,time,zone,utc,bucket,buckets,get,3,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,3l
DateHistogramIT -> public void testMultiValuedFieldWithValueScript() throws Exception;1544035746;The script will change to document date values to the following:_<p>_doc 1: [ Feb 2, Mar 3]_doc 2: [ Mar 2, Apr 3]_doc 3: [ Mar 15, Apr 16]_doc 4: [ Apr 2, May 3]_doc 5: [ Apr 15, May 16]_doc 6: [ Apr 23, May 24];public void testMultiValuedFieldWithValueScript() throws Exception {_        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "dates")__        SearchResponse response = client().prepareSearch("idx")_                .addAggregation(dateHistogram("histo")_                        .field("dates")_                        .script(new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.LONG_PLUS_ONE_MONTH, params))_                        .dateHistogramInterval(DateHistogramInterval.MONTH)).execute().actionGet()___        assertSearchResponse(response)___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(4))___        DateTime key = new DateTime(2012, 2, 1, 0, 0, DateTimeZone.UTC)__        Histogram.Bucket bucket = buckets.get(0)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(1L))___        key = new DateTime(2012, 3, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(1)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(3L))___        key = new DateTime(2012, 4, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(2)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(5L))___        key = new DateTime(2012, 5, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(3)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(3L))__    };the,script,will,change,to,document,date,values,to,the,following,p,doc,1,feb,2,mar,3,doc,2,mar,2,apr,3,doc,3,mar,15,apr,16,doc,4,apr,2,may,3,doc,5,apr,15,may,16,doc,6,apr,23,may,24;public,void,test,multi,valued,field,with,value,script,throws,exception,map,string,object,params,new,hash,map,params,put,fieldname,dates,search,response,response,client,prepare,search,idx,add,aggregation,date,histogram,histo,field,dates,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,date,histogram,interval,date,histogram,interval,month,execute,action,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,4,date,time,key,new,date,time,2012,2,1,0,0,date,time,zone,utc,histogram,bucket,bucket,buckets,get,0,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,1l,key,new,date,time,2012,3,1,0,0,date,time,zone,utc,bucket,buckets,get,1,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,3l,key,new,date,time,2012,4,1,0,0,date,time,zone,utc,bucket,buckets,get,2,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,5l,key,new,date,time,2012,5,1,0,0,date,time,zone,utc,bucket,buckets,get,3,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,3l
DateHistogramIT -> public void testMultiValuedFieldWithValueScript() throws Exception;1544110272;The script will change to document date values to the following:_<p>_doc 1: [ Feb 2, Mar 3]_doc 2: [ Mar 2, Apr 3]_doc 3: [ Mar 15, Apr 16]_doc 4: [ Apr 2, May 3]_doc 5: [ Apr 15, May 16]_doc 6: [ Apr 23, May 24];public void testMultiValuedFieldWithValueScript() throws Exception {_        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "dates")__        SearchResponse response = client().prepareSearch("idx")_                .addAggregation(dateHistogram("histo")_                        .field("dates")_                        .script(new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.LONG_PLUS_ONE_MONTH, params))_                        .dateHistogramInterval(DateHistogramInterval.MONTH)).get()___        assertSearchResponse(response)___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(4))___        DateTime key = new DateTime(2012, 2, 1, 0, 0, DateTimeZone.UTC)__        Histogram.Bucket bucket = buckets.get(0)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(1L))___        key = new DateTime(2012, 3, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(1)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(3L))___        key = new DateTime(2012, 4, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(2)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(5L))___        key = new DateTime(2012, 5, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(3)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(3L))__    };the,script,will,change,to,document,date,values,to,the,following,p,doc,1,feb,2,mar,3,doc,2,mar,2,apr,3,doc,3,mar,15,apr,16,doc,4,apr,2,may,3,doc,5,apr,15,may,16,doc,6,apr,23,may,24;public,void,test,multi,valued,field,with,value,script,throws,exception,map,string,object,params,new,hash,map,params,put,fieldname,dates,search,response,response,client,prepare,search,idx,add,aggregation,date,histogram,histo,field,dates,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,date,histogram,interval,date,histogram,interval,month,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,4,date,time,key,new,date,time,2012,2,1,0,0,date,time,zone,utc,histogram,bucket,bucket,buckets,get,0,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,1l,key,new,date,time,2012,3,1,0,0,date,time,zone,utc,bucket,buckets,get,1,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,3l,key,new,date,time,2012,4,1,0,0,date,time,zone,utc,bucket,buckets,get,2,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,5l,key,new,date,time,2012,5,1,0,0,date,time,zone,utc,bucket,buckets,get,3,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,3l
DateHistogramIT -> public void testMultiValuedFieldWithValueScript() throws Exception;1544232221;The script will change to document date values to the following:_<p>_doc 1: [ Feb 2, Mar 3]_doc 2: [ Mar 2, Apr 3]_doc 3: [ Mar 15, Apr 16]_doc 4: [ Apr 2, May 3]_doc 5: [ Apr 15, May 16]_doc 6: [ Apr 23, May 24];public void testMultiValuedFieldWithValueScript() throws Exception {_        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "dates")__        SearchResponse response = client().prepareSearch("idx")_                .addAggregation(dateHistogram("histo")_                        .field("dates")_                        .script(new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.LONG_PLUS_ONE_MONTH, params))_                        .dateHistogramInterval(DateHistogramInterval.MONTH)).get()___        assertSearchResponse(response)___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(4))___        DateTime key = new DateTime(2012, 2, 1, 0, 0, DateTimeZone.UTC)__        Histogram.Bucket bucket = buckets.get(0)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(1L))___        key = new DateTime(2012, 3, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(1)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(3L))___        key = new DateTime(2012, 4, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(2)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(5L))___        key = new DateTime(2012, 5, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(3)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(3L))__    };the,script,will,change,to,document,date,values,to,the,following,p,doc,1,feb,2,mar,3,doc,2,mar,2,apr,3,doc,3,mar,15,apr,16,doc,4,apr,2,may,3,doc,5,apr,15,may,16,doc,6,apr,23,may,24;public,void,test,multi,valued,field,with,value,script,throws,exception,map,string,object,params,new,hash,map,params,put,fieldname,dates,search,response,response,client,prepare,search,idx,add,aggregation,date,histogram,histo,field,dates,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,date,histogram,interval,date,histogram,interval,month,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,4,date,time,key,new,date,time,2012,2,1,0,0,date,time,zone,utc,histogram,bucket,bucket,buckets,get,0,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,1l,key,new,date,time,2012,3,1,0,0,date,time,zone,utc,bucket,buckets,get,1,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,3l,key,new,date,time,2012,4,1,0,0,date,time,zone,utc,bucket,buckets,get,2,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,5l,key,new,date,time,2012,5,1,0,0,date,time,zone,utc,bucket,buckets,get,3,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,3l
DateHistogramIT -> public void testMultiValuedFieldWithValueScript() throws Exception;1544600864;The script will change to document date values to the following:_<p>_doc 1: [ Feb 2, Mar 3]_doc 2: [ Mar 2, Apr 3]_doc 3: [ Mar 15, Apr 16]_doc 4: [ Apr 2, May 3]_doc 5: [ Apr 15, May 16]_doc 6: [ Apr 23, May 24];public void testMultiValuedFieldWithValueScript() throws Exception {_        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "dates")__        SearchResponse response = client().prepareSearch("idx")_                .addAggregation(dateHistogram("histo")_                        .field("dates")_                        .script(new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.LONG_PLUS_ONE_MONTH, params))_                        .dateHistogramInterval(DateHistogramInterval.MONTH)).get()___        assertSearchResponse(response)___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(4))___        DateTime key = new DateTime(2012, 2, 1, 0, 0, DateTimeZone.UTC)__        Histogram.Bucket bucket = buckets.get(0)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(1L))___        key = new DateTime(2012, 3, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(1)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(3L))___        key = new DateTime(2012, 4, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(2)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(5L))___        key = new DateTime(2012, 5, 1, 0, 0, DateTimeZone.UTC)__        bucket = buckets.get(3)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((DateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(3L))__    };the,script,will,change,to,document,date,values,to,the,following,p,doc,1,feb,2,mar,3,doc,2,mar,2,apr,3,doc,3,mar,15,apr,16,doc,4,apr,2,may,3,doc,5,apr,15,may,16,doc,6,apr,23,may,24;public,void,test,multi,valued,field,with,value,script,throws,exception,map,string,object,params,new,hash,map,params,put,fieldname,dates,search,response,response,client,prepare,search,idx,add,aggregation,date,histogram,histo,field,dates,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,date,histogram,interval,date,histogram,interval,month,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,4,date,time,key,new,date,time,2012,2,1,0,0,date,time,zone,utc,histogram,bucket,bucket,buckets,get,0,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,1l,key,new,date,time,2012,3,1,0,0,date,time,zone,utc,bucket,buckets,get,1,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,3l,key,new,date,time,2012,4,1,0,0,date,time,zone,utc,bucket,buckets,get,2,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,5l,key,new,date,time,2012,5,1,0,0,date,time,zone,utc,bucket,buckets,get,3,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,3l
DateHistogramIT -> public void testMultiValuedFieldWithValueScript() throws Exception;1548236405;The script will change to document date values to the following:_<p>_doc 1: [ Feb 2, Mar 3]_doc 2: [ Mar 2, Apr 3]_doc 3: [ Mar 15, Apr 16]_doc 4: [ Apr 2, May 3]_doc 5: [ Apr 15, May 16]_doc 6: [ Apr 23, May 24];public void testMultiValuedFieldWithValueScript() throws Exception {_        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "dates")__        SearchResponse response = client().prepareSearch("idx")_                .addAggregation(dateHistogram("histo")_                        .field("dates")_                        .script(new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.LONG_PLUS_ONE_MONTH, params))_                        .dateHistogramInterval(DateHistogramInterval.MONTH)).get()___        assertSearchResponse(response)___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(4))___        ZonedDateTime key = ZonedDateTime.of(2012, 2, 1, 0, 0, 0, 0, ZoneOffset.UTC)__        Histogram.Bucket bucket = buckets.get(0)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((ZonedDateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(1L))___        key = ZonedDateTime.of(2012, 3, 1, 0, 0, 0, 0, ZoneOffset.UTC)__        bucket = buckets.get(1)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((ZonedDateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(3L))___        key = ZonedDateTime.of(2012, 4, 1, 0, 0, 0, 0, ZoneOffset.UTC)__        bucket = buckets.get(2)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((ZonedDateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(5L))___        key = ZonedDateTime.of(2012, 5, 1, 0, 0, 0, 0, ZoneOffset.UTC)__        bucket = buckets.get(3)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((ZonedDateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(3L))__    };the,script,will,change,to,document,date,values,to,the,following,p,doc,1,feb,2,mar,3,doc,2,mar,2,apr,3,doc,3,mar,15,apr,16,doc,4,apr,2,may,3,doc,5,apr,15,may,16,doc,6,apr,23,may,24;public,void,test,multi,valued,field,with,value,script,throws,exception,map,string,object,params,new,hash,map,params,put,fieldname,dates,search,response,response,client,prepare,search,idx,add,aggregation,date,histogram,histo,field,dates,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,date,histogram,interval,date,histogram,interval,month,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,4,zoned,date,time,key,zoned,date,time,of,2012,2,1,0,0,0,0,zone,offset,utc,histogram,bucket,bucket,buckets,get,0,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,zoned,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,1l,key,zoned,date,time,of,2012,3,1,0,0,0,0,zone,offset,utc,bucket,buckets,get,1,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,zoned,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,3l,key,zoned,date,time,of,2012,4,1,0,0,0,0,zone,offset,utc,bucket,buckets,get,2,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,zoned,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,5l,key,zoned,date,time,of,2012,5,1,0,0,0,0,zone,offset,utc,bucket,buckets,get,3,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,zoned,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,3l
DateHistogramIT -> public void testMultiValuedFieldWithValueScript() throws Exception;1548921340;The script will change to document date values to the following:_<p>_doc 1: [ Feb 2, Mar 3]_doc 2: [ Mar 2, Apr 3]_doc 3: [ Mar 15, Apr 16]_doc 4: [ Apr 2, May 3]_doc 5: [ Apr 15, May 16]_doc 6: [ Apr 23, May 24];public void testMultiValuedFieldWithValueScript() throws Exception {_        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "dates")__        SearchResponse response = client().prepareSearch("idx")_                .addAggregation(dateHistogram("histo")_                        .field("dates")_                        .script(new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.LONG_PLUS_ONE_MONTH, params))_                        .dateHistogramInterval(DateHistogramInterval.MONTH)).get()___        assertSearchResponse(response)___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(4))___        ZonedDateTime key = ZonedDateTime.of(2012, 2, 1, 0, 0, 0, 0, ZoneOffset.UTC)__        Histogram.Bucket bucket = buckets.get(0)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((ZonedDateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(1L))___        key = ZonedDateTime.of(2012, 3, 1, 0, 0, 0, 0, ZoneOffset.UTC)__        bucket = buckets.get(1)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((ZonedDateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(3L))___        key = ZonedDateTime.of(2012, 4, 1, 0, 0, 0, 0, ZoneOffset.UTC)__        bucket = buckets.get(2)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((ZonedDateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(5L))___        key = ZonedDateTime.of(2012, 5, 1, 0, 0, 0, 0, ZoneOffset.UTC)__        bucket = buckets.get(3)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((ZonedDateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(3L))__    };the,script,will,change,to,document,date,values,to,the,following,p,doc,1,feb,2,mar,3,doc,2,mar,2,apr,3,doc,3,mar,15,apr,16,doc,4,apr,2,may,3,doc,5,apr,15,may,16,doc,6,apr,23,may,24;public,void,test,multi,valued,field,with,value,script,throws,exception,map,string,object,params,new,hash,map,params,put,fieldname,dates,search,response,response,client,prepare,search,idx,add,aggregation,date,histogram,histo,field,dates,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,date,histogram,interval,date,histogram,interval,month,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,4,zoned,date,time,key,zoned,date,time,of,2012,2,1,0,0,0,0,zone,offset,utc,histogram,bucket,bucket,buckets,get,0,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,zoned,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,1l,key,zoned,date,time,of,2012,3,1,0,0,0,0,zone,offset,utc,bucket,buckets,get,1,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,zoned,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,3l,key,zoned,date,time,of,2012,4,1,0,0,0,0,zone,offset,utc,bucket,buckets,get,2,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,zoned,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,5l,key,zoned,date,time,of,2012,5,1,0,0,0,0,zone,offset,utc,bucket,buckets,get,3,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,zoned,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,3l
DateHistogramIT -> public void testMultiValuedFieldWithValueScript() throws Exception;1550743790;The script will change to document date values to the following:_<p>_doc 1: [ Feb 2, Mar 3]_doc 2: [ Mar 2, Apr 3]_doc 3: [ Mar 15, Apr 16]_doc 4: [ Apr 2, May 3]_doc 5: [ Apr 15, May 16]_doc 6: [ Apr 23, May 24];public void testMultiValuedFieldWithValueScript() throws Exception {_        Map<String, Object> params = new HashMap<>()__        params.put("fieldname", "dates")__        SearchResponse response = client().prepareSearch("idx")_                .addAggregation(dateHistogram("histo")_                        .field("dates")_                        .script(new Script(ScriptType.INLINE, "mockscript", DateScriptMocksPlugin.LONG_PLUS_ONE_MONTH, params))_                        .dateHistogramInterval(DateHistogramInterval.MONTH)).get()___        assertSearchResponse(response)___        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(4))___        ZonedDateTime key = ZonedDateTime.of(2012, 2, 1, 0, 0, 0, 0, ZoneOffset.UTC)__        Histogram.Bucket bucket = buckets.get(0)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((ZonedDateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(1L))___        key = ZonedDateTime.of(2012, 3, 1, 0, 0, 0, 0, ZoneOffset.UTC)__        bucket = buckets.get(1)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((ZonedDateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(3L))___        key = ZonedDateTime.of(2012, 4, 1, 0, 0, 0, 0, ZoneOffset.UTC)__        bucket = buckets.get(2)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((ZonedDateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(5L))___        key = ZonedDateTime.of(2012, 5, 1, 0, 0, 0, 0, ZoneOffset.UTC)__        bucket = buckets.get(3)__        assertThat(bucket, notNullValue())__        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key)))__        assertThat(((ZonedDateTime) bucket.getKey()), equalTo(key))__        assertThat(bucket.getDocCount(), equalTo(3L))__    };the,script,will,change,to,document,date,values,to,the,following,p,doc,1,feb,2,mar,3,doc,2,mar,2,apr,3,doc,3,mar,15,apr,16,doc,4,apr,2,may,3,doc,5,apr,15,may,16,doc,6,apr,23,may,24;public,void,test,multi,valued,field,with,value,script,throws,exception,map,string,object,params,new,hash,map,params,put,fieldname,dates,search,response,response,client,prepare,search,idx,add,aggregation,date,histogram,histo,field,dates,script,new,script,script,type,inline,mockscript,date,script,mocks,plugin,params,date,histogram,interval,date,histogram,interval,month,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,4,zoned,date,time,key,zoned,date,time,of,2012,2,1,0,0,0,0,zone,offset,utc,histogram,bucket,bucket,buckets,get,0,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,zoned,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,1l,key,zoned,date,time,of,2012,3,1,0,0,0,0,zone,offset,utc,bucket,buckets,get,1,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,zoned,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,3l,key,zoned,date,time,of,2012,4,1,0,0,0,0,zone,offset,utc,bucket,buckets,get,2,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,zoned,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,5l,key,zoned,date,time,of,2012,5,1,0,0,0,0,zone,offset,utc,bucket,buckets,get,3,assert,that,bucket,not,null,value,assert,that,bucket,get,key,as,string,equal,to,get,bucket,key,as,string,key,assert,that,zoned,date,time,bucket,get,key,equal,to,key,assert,that,bucket,get,doc,count,equal,to,3l
DateHistogramIT -> public void testFormatIndexUnmapped() throws InterruptedException, ExecutionException;1541668945;https://github.com/elastic/elasticsearch/issues/31760 shows an edge case where an unmapped "date" field in two indices_that are queried simultaneously can lead to the "format" parameter in the aggregation not being preserved correctly.__The error happens when the bucket from the "unmapped" index is received first in the reduce phase, however the case can_be recreated when aggregating about a single index with an unmapped date field and also getting "empty" buckets.;public void testFormatIndexUnmapped() throws InterruptedException, ExecutionException {_        String indexDateUnmapped = "test31760"__        indexRandom(true, client().prepareIndex(indexDateUnmapped, "_doc").setSource("foo", "bar"))__        ensureSearchable(indexDateUnmapped)___        SearchResponse response = client().prepareSearch(indexDateUnmapped)_                .addAggregation(_                        dateHistogram("histo").field("dateField").dateHistogramInterval(DateHistogramInterval.MONTH).format("YYYY-MM")_                                .minDocCount(0).extendedBounds(new ExtendedBounds("2018-01", "2018-01")))_                .execute().actionGet()__        assertSearchResponse(response)__        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo.getBuckets().size(), equalTo(1))__        assertThat(histo.getBuckets().get(0).getKeyAsString(), equalTo("2018-01"))__        assertThat(histo.getBuckets().get(0).getDocCount(), equalTo(0L))__        internalCluster().wipeIndices(indexDateUnmapped)__    };https,github,com,elastic,elasticsearch,issues,31760,shows,an,edge,case,where,an,unmapped,date,field,in,two,indices,that,are,queried,simultaneously,can,lead,to,the,format,parameter,in,the,aggregation,not,being,preserved,correctly,the,error,happens,when,the,bucket,from,the,unmapped,index,is,received,first,in,the,reduce,phase,however,the,case,can,be,recreated,when,aggregating,about,a,single,index,with,an,unmapped,date,field,and,also,getting,empty,buckets;public,void,test,format,index,unmapped,throws,interrupted,exception,execution,exception,string,index,date,unmapped,test31760,index,random,true,client,prepare,index,index,date,unmapped,set,source,foo,bar,ensure,searchable,index,date,unmapped,search,response,response,client,prepare,search,index,date,unmapped,add,aggregation,date,histogram,histo,field,date,field,date,histogram,interval,date,histogram,interval,month,format,yyyy,mm,min,doc,count,0,extended,bounds,new,extended,bounds,2018,01,2018,01,execute,action,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,get,buckets,size,equal,to,1,assert,that,histo,get,buckets,get,0,get,key,as,string,equal,to,2018,01,assert,that,histo,get,buckets,get,0,get,doc,count,equal,to,0l,internal,cluster,wipe,indices,index,date,unmapped
DateHistogramIT -> public void testFormatIndexUnmapped() throws InterruptedException, ExecutionException;1544035746;https://github.com/elastic/elasticsearch/issues/31760 shows an edge case where an unmapped "date" field in two indices_that are queried simultaneously can lead to the "format" parameter in the aggregation not being preserved correctly.__The error happens when the bucket from the "unmapped" index is received first in the reduce phase, however the case can_be recreated when aggregating about a single index with an unmapped date field and also getting "empty" buckets.;public void testFormatIndexUnmapped() throws InterruptedException, ExecutionException {_        String indexDateUnmapped = "test31760"__        indexRandom(true, client().prepareIndex(indexDateUnmapped, "_doc").setSource("foo", "bar"))__        ensureSearchable(indexDateUnmapped)___        SearchResponse response = client().prepareSearch(indexDateUnmapped)_                .addAggregation(_                        dateHistogram("histo").field("dateField").dateHistogramInterval(DateHistogramInterval.MONTH).format("YYYY-MM")_                                .minDocCount(0).extendedBounds(new ExtendedBounds("2018-01", "2018-01")))_                .execute().actionGet()__        assertSearchResponse(response)__        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo.getBuckets().size(), equalTo(1))__        assertThat(histo.getBuckets().get(0).getKeyAsString(), equalTo("2018-01"))__        assertThat(histo.getBuckets().get(0).getDocCount(), equalTo(0L))__        internalCluster().wipeIndices(indexDateUnmapped)__    };https,github,com,elastic,elasticsearch,issues,31760,shows,an,edge,case,where,an,unmapped,date,field,in,two,indices,that,are,queried,simultaneously,can,lead,to,the,format,parameter,in,the,aggregation,not,being,preserved,correctly,the,error,happens,when,the,bucket,from,the,unmapped,index,is,received,first,in,the,reduce,phase,however,the,case,can,be,recreated,when,aggregating,about,a,single,index,with,an,unmapped,date,field,and,also,getting,empty,buckets;public,void,test,format,index,unmapped,throws,interrupted,exception,execution,exception,string,index,date,unmapped,test31760,index,random,true,client,prepare,index,index,date,unmapped,set,source,foo,bar,ensure,searchable,index,date,unmapped,search,response,response,client,prepare,search,index,date,unmapped,add,aggregation,date,histogram,histo,field,date,field,date,histogram,interval,date,histogram,interval,month,format,yyyy,mm,min,doc,count,0,extended,bounds,new,extended,bounds,2018,01,2018,01,execute,action,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,get,buckets,size,equal,to,1,assert,that,histo,get,buckets,get,0,get,key,as,string,equal,to,2018,01,assert,that,histo,get,buckets,get,0,get,doc,count,equal,to,0l,internal,cluster,wipe,indices,index,date,unmapped
DateHistogramIT -> public void testFormatIndexUnmapped() throws InterruptedException, ExecutionException;1544110272;https://github.com/elastic/elasticsearch/issues/31760 shows an edge case where an unmapped "date" field in two indices_that are queried simultaneously can lead to the "format" parameter in the aggregation not being preserved correctly.__The error happens when the bucket from the "unmapped" index is received first in the reduce phase, however the case can_be recreated when aggregating about a single index with an unmapped date field and also getting "empty" buckets.;public void testFormatIndexUnmapped() throws InterruptedException, ExecutionException {_        String indexDateUnmapped = "test31760"__        indexRandom(true, client().prepareIndex(indexDateUnmapped, "_doc").setSource("foo", "bar"))__        ensureSearchable(indexDateUnmapped)___        SearchResponse response = client().prepareSearch(indexDateUnmapped)_                .addAggregation(_                        dateHistogram("histo").field("dateField").dateHistogramInterval(DateHistogramInterval.MONTH).format("YYYY-MM")_                                .minDocCount(0).extendedBounds(new ExtendedBounds("2018-01", "2018-01")))_                .get()__        assertSearchResponse(response)__        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo.getBuckets().size(), equalTo(1))__        assertThat(histo.getBuckets().get(0).getKeyAsString(), equalTo("2018-01"))__        assertThat(histo.getBuckets().get(0).getDocCount(), equalTo(0L))__        internalCluster().wipeIndices(indexDateUnmapped)__    };https,github,com,elastic,elasticsearch,issues,31760,shows,an,edge,case,where,an,unmapped,date,field,in,two,indices,that,are,queried,simultaneously,can,lead,to,the,format,parameter,in,the,aggregation,not,being,preserved,correctly,the,error,happens,when,the,bucket,from,the,unmapped,index,is,received,first,in,the,reduce,phase,however,the,case,can,be,recreated,when,aggregating,about,a,single,index,with,an,unmapped,date,field,and,also,getting,empty,buckets;public,void,test,format,index,unmapped,throws,interrupted,exception,execution,exception,string,index,date,unmapped,test31760,index,random,true,client,prepare,index,index,date,unmapped,set,source,foo,bar,ensure,searchable,index,date,unmapped,search,response,response,client,prepare,search,index,date,unmapped,add,aggregation,date,histogram,histo,field,date,field,date,histogram,interval,date,histogram,interval,month,format,yyyy,mm,min,doc,count,0,extended,bounds,new,extended,bounds,2018,01,2018,01,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,get,buckets,size,equal,to,1,assert,that,histo,get,buckets,get,0,get,key,as,string,equal,to,2018,01,assert,that,histo,get,buckets,get,0,get,doc,count,equal,to,0l,internal,cluster,wipe,indices,index,date,unmapped
DateHistogramIT -> public void testFormatIndexUnmapped() throws InterruptedException, ExecutionException;1544232221;https://github.com/elastic/elasticsearch/issues/31760 shows an edge case where an unmapped "date" field in two indices_that are queried simultaneously can lead to the "format" parameter in the aggregation not being preserved correctly.__The error happens when the bucket from the "unmapped" index is received first in the reduce phase, however the case can_be recreated when aggregating about a single index with an unmapped date field and also getting "empty" buckets.;public void testFormatIndexUnmapped() throws InterruptedException, ExecutionException {_        String indexDateUnmapped = "test31760"__        indexRandom(true, client().prepareIndex(indexDateUnmapped, "_doc").setSource("foo", "bar"))__        ensureSearchable(indexDateUnmapped)___        SearchResponse response = client().prepareSearch(indexDateUnmapped)_                .addAggregation(_                        dateHistogram("histo").field("dateField").dateHistogramInterval(DateHistogramInterval.MONTH).format("YYYY-MM")_                                .minDocCount(0).extendedBounds(new ExtendedBounds("2018-01", "2018-01")))_                .get()__        assertSearchResponse(response)__        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo.getBuckets().size(), equalTo(1))__        assertThat(histo.getBuckets().get(0).getKeyAsString(), equalTo("2018-01"))__        assertThat(histo.getBuckets().get(0).getDocCount(), equalTo(0L))__        internalCluster().wipeIndices(indexDateUnmapped)__    };https,github,com,elastic,elasticsearch,issues,31760,shows,an,edge,case,where,an,unmapped,date,field,in,two,indices,that,are,queried,simultaneously,can,lead,to,the,format,parameter,in,the,aggregation,not,being,preserved,correctly,the,error,happens,when,the,bucket,from,the,unmapped,index,is,received,first,in,the,reduce,phase,however,the,case,can,be,recreated,when,aggregating,about,a,single,index,with,an,unmapped,date,field,and,also,getting,empty,buckets;public,void,test,format,index,unmapped,throws,interrupted,exception,execution,exception,string,index,date,unmapped,test31760,index,random,true,client,prepare,index,index,date,unmapped,set,source,foo,bar,ensure,searchable,index,date,unmapped,search,response,response,client,prepare,search,index,date,unmapped,add,aggregation,date,histogram,histo,field,date,field,date,histogram,interval,date,histogram,interval,month,format,yyyy,mm,min,doc,count,0,extended,bounds,new,extended,bounds,2018,01,2018,01,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,get,buckets,size,equal,to,1,assert,that,histo,get,buckets,get,0,get,key,as,string,equal,to,2018,01,assert,that,histo,get,buckets,get,0,get,doc,count,equal,to,0l,internal,cluster,wipe,indices,index,date,unmapped
DateHistogramIT -> public void testFormatIndexUnmapped() throws InterruptedException, ExecutionException;1544600864;https://github.com/elastic/elasticsearch/issues/31760 shows an edge case where an unmapped "date" field in two indices_that are queried simultaneously can lead to the "format" parameter in the aggregation not being preserved correctly.__The error happens when the bucket from the "unmapped" index is received first in the reduce phase, however the case can_be recreated when aggregating about a single index with an unmapped date field and also getting "empty" buckets.;public void testFormatIndexUnmapped() throws InterruptedException, ExecutionException {_        String indexDateUnmapped = "test31760"__        indexRandom(true, client().prepareIndex(indexDateUnmapped, "_doc").setSource("foo", "bar"))__        ensureSearchable(indexDateUnmapped)___        SearchResponse response = client().prepareSearch(indexDateUnmapped)_                .addAggregation(_                        dateHistogram("histo").field("dateField").dateHistogramInterval(DateHistogramInterval.MONTH).format("YYYY-MM")_                                .minDocCount(0).extendedBounds(new ExtendedBounds("2018-01", "2018-01")))_                .get()__        assertSearchResponse(response)__        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo.getBuckets().size(), equalTo(1))__        assertThat(histo.getBuckets().get(0).getKeyAsString(), equalTo("2018-01"))__        assertThat(histo.getBuckets().get(0).getDocCount(), equalTo(0L))__        internalCluster().wipeIndices(indexDateUnmapped)__    };https,github,com,elastic,elasticsearch,issues,31760,shows,an,edge,case,where,an,unmapped,date,field,in,two,indices,that,are,queried,simultaneously,can,lead,to,the,format,parameter,in,the,aggregation,not,being,preserved,correctly,the,error,happens,when,the,bucket,from,the,unmapped,index,is,received,first,in,the,reduce,phase,however,the,case,can,be,recreated,when,aggregating,about,a,single,index,with,an,unmapped,date,field,and,also,getting,empty,buckets;public,void,test,format,index,unmapped,throws,interrupted,exception,execution,exception,string,index,date,unmapped,test31760,index,random,true,client,prepare,index,index,date,unmapped,set,source,foo,bar,ensure,searchable,index,date,unmapped,search,response,response,client,prepare,search,index,date,unmapped,add,aggregation,date,histogram,histo,field,date,field,date,histogram,interval,date,histogram,interval,month,format,yyyy,mm,min,doc,count,0,extended,bounds,new,extended,bounds,2018,01,2018,01,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,get,buckets,size,equal,to,1,assert,that,histo,get,buckets,get,0,get,key,as,string,equal,to,2018,01,assert,that,histo,get,buckets,get,0,get,doc,count,equal,to,0l,internal,cluster,wipe,indices,index,date,unmapped
DateHistogramIT -> public void testFormatIndexUnmapped() throws InterruptedException, ExecutionException;1548236405;https://github.com/elastic/elasticsearch/issues/31760 shows an edge case where an unmapped "date" field in two indices_that are queried simultaneously can lead to the "format" parameter in the aggregation not being preserved correctly.__The error happens when the bucket from the "unmapped" index is received first in the reduce phase, however the case can_be recreated when aggregating about a single index with an unmapped date field and also getting "empty" buckets.;public void testFormatIndexUnmapped() throws InterruptedException, ExecutionException {_        String indexDateUnmapped = "test31760"__        indexRandom(true, client().prepareIndex(indexDateUnmapped, "_doc").setSource("foo", "bar"))__        ensureSearchable(indexDateUnmapped)___        SearchResponse response = client().prepareSearch(indexDateUnmapped)_                .addAggregation(_                        dateHistogram("histo").field("dateField").dateHistogramInterval(DateHistogramInterval.MONTH).format("yyyy-MM")_                                .minDocCount(0).extendedBounds(new ExtendedBounds("2018-01", "2018-01")))_                .get()__        assertSearchResponse(response)__        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo.getBuckets().size(), equalTo(1))__        assertThat(histo.getBuckets().get(0).getKeyAsString(), equalTo("2018-01"))__        assertThat(histo.getBuckets().get(0).getDocCount(), equalTo(0L))__        internalCluster().wipeIndices(indexDateUnmapped)__    };https,github,com,elastic,elasticsearch,issues,31760,shows,an,edge,case,where,an,unmapped,date,field,in,two,indices,that,are,queried,simultaneously,can,lead,to,the,format,parameter,in,the,aggregation,not,being,preserved,correctly,the,error,happens,when,the,bucket,from,the,unmapped,index,is,received,first,in,the,reduce,phase,however,the,case,can,be,recreated,when,aggregating,about,a,single,index,with,an,unmapped,date,field,and,also,getting,empty,buckets;public,void,test,format,index,unmapped,throws,interrupted,exception,execution,exception,string,index,date,unmapped,test31760,index,random,true,client,prepare,index,index,date,unmapped,set,source,foo,bar,ensure,searchable,index,date,unmapped,search,response,response,client,prepare,search,index,date,unmapped,add,aggregation,date,histogram,histo,field,date,field,date,histogram,interval,date,histogram,interval,month,format,yyyy,mm,min,doc,count,0,extended,bounds,new,extended,bounds,2018,01,2018,01,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,get,buckets,size,equal,to,1,assert,that,histo,get,buckets,get,0,get,key,as,string,equal,to,2018,01,assert,that,histo,get,buckets,get,0,get,doc,count,equal,to,0l,internal,cluster,wipe,indices,index,date,unmapped
DateHistogramIT -> public void testFormatIndexUnmapped() throws InterruptedException, ExecutionException;1548921340;https://github.com/elastic/elasticsearch/issues/31760 shows an edge case where an unmapped "date" field in two indices_that are queried simultaneously can lead to the "format" parameter in the aggregation not being preserved correctly.__The error happens when the bucket from the "unmapped" index is received first in the reduce phase, however the case can_be recreated when aggregating about a single index with an unmapped date field and also getting "empty" buckets.;public void testFormatIndexUnmapped() throws InterruptedException, ExecutionException {_        String indexDateUnmapped = "test31760"__        indexRandom(true, client().prepareIndex(indexDateUnmapped, "_doc").setSource("foo", "bar"))__        ensureSearchable(indexDateUnmapped)___        SearchResponse response = client().prepareSearch(indexDateUnmapped)_                .addAggregation(_                        dateHistogram("histo").field("dateField").dateHistogramInterval(DateHistogramInterval.MONTH).format("yyyy-MM")_                                .minDocCount(0).extendedBounds(new ExtendedBounds("2018-01", "2018-01")))_                .get()__        assertSearchResponse(response)__        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo.getBuckets().size(), equalTo(1))__        assertThat(histo.getBuckets().get(0).getKeyAsString(), equalTo("2018-01"))__        assertThat(histo.getBuckets().get(0).getDocCount(), equalTo(0L))__        internalCluster().wipeIndices(indexDateUnmapped)__    };https,github,com,elastic,elasticsearch,issues,31760,shows,an,edge,case,where,an,unmapped,date,field,in,two,indices,that,are,queried,simultaneously,can,lead,to,the,format,parameter,in,the,aggregation,not,being,preserved,correctly,the,error,happens,when,the,bucket,from,the,unmapped,index,is,received,first,in,the,reduce,phase,however,the,case,can,be,recreated,when,aggregating,about,a,single,index,with,an,unmapped,date,field,and,also,getting,empty,buckets;public,void,test,format,index,unmapped,throws,interrupted,exception,execution,exception,string,index,date,unmapped,test31760,index,random,true,client,prepare,index,index,date,unmapped,set,source,foo,bar,ensure,searchable,index,date,unmapped,search,response,response,client,prepare,search,index,date,unmapped,add,aggregation,date,histogram,histo,field,date,field,date,histogram,interval,date,histogram,interval,month,format,yyyy,mm,min,doc,count,0,extended,bounds,new,extended,bounds,2018,01,2018,01,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,get,buckets,size,equal,to,1,assert,that,histo,get,buckets,get,0,get,key,as,string,equal,to,2018,01,assert,that,histo,get,buckets,get,0,get,doc,count,equal,to,0l,internal,cluster,wipe,indices,index,date,unmapped
DateHistogramIT -> public void testFormatIndexUnmapped() throws InterruptedException, ExecutionException;1550743790;https://github.com/elastic/elasticsearch/issues/31760 shows an edge case where an unmapped "date" field in two indices_that are queried simultaneously can lead to the "format" parameter in the aggregation not being preserved correctly.__The error happens when the bucket from the "unmapped" index is received first in the reduce phase, however the case can_be recreated when aggregating about a single index with an unmapped date field and also getting "empty" buckets.;public void testFormatIndexUnmapped() throws InterruptedException, ExecutionException {_        String indexDateUnmapped = "test31760"__        indexRandom(true, client().prepareIndex(indexDateUnmapped, "_doc").setSource("foo", "bar"))__        ensureSearchable(indexDateUnmapped)___        SearchResponse response = client().prepareSearch(indexDateUnmapped)_                .addAggregation(_                        dateHistogram("histo").field("dateField").dateHistogramInterval(DateHistogramInterval.MONTH).format("yyyy-MM")_                                .minDocCount(0).extendedBounds(new ExtendedBounds("2018-01", "2018-01")))_                .get()__        assertSearchResponse(response)__        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo.getBuckets().size(), equalTo(1))__        assertThat(histo.getBuckets().get(0).getKeyAsString(), equalTo("2018-01"))__        assertThat(histo.getBuckets().get(0).getDocCount(), equalTo(0L))__        internalCluster().wipeIndices(indexDateUnmapped)__    };https,github,com,elastic,elasticsearch,issues,31760,shows,an,edge,case,where,an,unmapped,date,field,in,two,indices,that,are,queried,simultaneously,can,lead,to,the,format,parameter,in,the,aggregation,not,being,preserved,correctly,the,error,happens,when,the,bucket,from,the,unmapped,index,is,received,first,in,the,reduce,phase,however,the,case,can,be,recreated,when,aggregating,about,a,single,index,with,an,unmapped,date,field,and,also,getting,empty,buckets;public,void,test,format,index,unmapped,throws,interrupted,exception,execution,exception,string,index,date,unmapped,test31760,index,random,true,client,prepare,index,index,date,unmapped,set,source,foo,bar,ensure,searchable,index,date,unmapped,search,response,response,client,prepare,search,index,date,unmapped,add,aggregation,date,histogram,histo,field,date,field,date,histogram,interval,date,histogram,interval,month,format,yyyy,mm,min,doc,count,0,extended,bounds,new,extended,bounds,2018,01,2018,01,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,get,buckets,size,equal,to,1,assert,that,histo,get,buckets,get,0,get,key,as,string,equal,to,2018,01,assert,that,histo,get,buckets,get,0,get,doc,count,equal,to,0l,internal,cluster,wipe,indices,index,date,unmapped
