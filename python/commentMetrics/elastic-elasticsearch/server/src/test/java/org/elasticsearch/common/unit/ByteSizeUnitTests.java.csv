commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;public void testBytes() {     assertThat(BYTES.toBytes(1), equalTo(1L)).     assertThat(BYTES.toKB(1024), equalTo(1L)).     assertThat(BYTES.toMB(1024 * 1024), equalTo(1L)).     assertThat(BYTES.toGB(1024 * 1024 * 1024), equalTo(1L)). }
false;public;0;6;;public void testKB() {     assertThat(KB.toBytes(1), equalTo(1024L)).     assertThat(KB.toKB(1), equalTo(1L)).     assertThat(KB.toMB(1024), equalTo(1L)).     assertThat(KB.toGB(1024 * 1024), equalTo(1L)). }
false;public;0;6;;public void testMB() {     assertThat(MB.toBytes(1), equalTo(1024L * 1024)).     assertThat(MB.toKB(1), equalTo(1024L)).     assertThat(MB.toMB(1), equalTo(1L)).     assertThat(MB.toGB(1024), equalTo(1L)). }
false;public;0;6;;public void testGB() {     assertThat(GB.toBytes(1), equalTo(1024L * 1024 * 1024)).     assertThat(GB.toKB(1), equalTo(1024L * 1024)).     assertThat(GB.toMB(1), equalTo(1024L)).     assertThat(GB.toGB(1), equalTo(1L)). }
false;public;0;7;;public void testTB() {     assertThat(TB.toBytes(1), equalTo(1024L * 1024 * 1024 * 1024)).     assertThat(TB.toKB(1), equalTo(1024L * 1024 * 1024)).     assertThat(TB.toMB(1), equalTo(1024L * 1024)).     assertThat(TB.toGB(1), equalTo(1024L)).     assertThat(TB.toTB(1), equalTo(1L)). }
false;public;0;8;;public void testPB() {     assertThat(PB.toBytes(1), equalTo(1024L * 1024 * 1024 * 1024 * 1024)).     assertThat(PB.toKB(1), equalTo(1024L * 1024 * 1024 * 1024)).     assertThat(PB.toMB(1), equalTo(1024L * 1024 * 1024)).     assertThat(PB.toGB(1), equalTo(1024L * 1024)).     assertThat(PB.toTB(1), equalTo(1024L)).     assertThat(PB.toPB(1), equalTo(1L)). }
false;public;0;9;;public void testToString() {     int v = randomIntBetween(1, 1023).     assertThat(new ByteSizeValue(PB.toBytes(v)).toString(), equalTo(v + "pb")).     assertThat(new ByteSizeValue(TB.toBytes(v)).toString(), equalTo(v + "tb")).     assertThat(new ByteSizeValue(GB.toBytes(v)).toString(), equalTo(v + "gb")).     assertThat(new ByteSizeValue(MB.toBytes(v)).toString(), equalTo(v + "mb")).     assertThat(new ByteSizeValue(KB.toBytes(v)).toString(), equalTo(v + "kb")).     assertThat(new ByteSizeValue(BYTES.toBytes(v)).toString(), equalTo(v + "b")). }
false;public;0;12;;public void testSerialization() throws IOException {     for (ByteSizeUnit unit : ByteSizeUnit.values()) {         try (BytesStreamOutput out = new BytesStreamOutput()) {             unit.writeTo(out).             try (StreamInput in = out.bytes().streamInput()) {                 ByteSizeUnit deserialized = ByteSizeUnit.readFrom(in).                 assertEquals(unit, deserialized).             }         }     } }
false;public;0;5;;public void testFromUnknownId() throws IOException {     final byte randomId = (byte) randomIntBetween(ByteSizeUnit.values().length + 1, 100).     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> ByteSizeUnit.fromId(randomId)).     assertThat(e.getMessage(), containsString("No byte size unit found for id [" + String.valueOf(randomId) + "]")). }
