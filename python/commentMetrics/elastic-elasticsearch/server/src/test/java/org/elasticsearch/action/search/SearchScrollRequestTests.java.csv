commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;public void testSerialization() throws Exception {     SearchScrollRequest searchScrollRequest = createSearchScrollRequest().     try (BytesStreamOutput output = new BytesStreamOutput()) {         searchScrollRequest.writeTo(output).         try (StreamInput in = output.bytes().streamInput()) {             SearchScrollRequest deserializedRequest = new SearchScrollRequest(in).             assertEquals(deserializedRequest, searchScrollRequest).             assertEquals(deserializedRequest.hashCode(), searchScrollRequest.hashCode()).             assertNotSame(deserializedRequest, searchScrollRequest).         }     } }
false;public;0;13;;public void testInternalScrollSearchRequestSerialization() throws IOException {     SearchScrollRequest searchScrollRequest = createSearchScrollRequest().     InternalScrollSearchRequest internalScrollSearchRequest = new InternalScrollSearchRequest(searchScrollRequest, randomLong()).     try (BytesStreamOutput output = new BytesStreamOutput()) {         internalScrollSearchRequest.writeTo(output).         try (StreamInput in = output.bytes().streamInput()) {             InternalScrollSearchRequest deserializedRequest = new InternalScrollSearchRequest(in).             assertEquals(deserializedRequest.id(), internalScrollSearchRequest.id()).             assertEquals(deserializedRequest.scroll(), internalScrollSearchRequest.scroll()).             assertNotSame(deserializedRequest, internalScrollSearchRequest).         }     } }
false;public;0;16;;public void testFromXContent() throws Exception {     SearchScrollRequest searchScrollRequest = new SearchScrollRequest().     if (randomBoolean()) {         // test that existing values get overridden         searchScrollRequest = createSearchScrollRequest().     }     try (XContentParser parser = createParser(XContentFactory.jsonBuilder().startObject().field("scroll_id", "SCROLL_ID").field("scroll", "1m").endObject())) {         searchScrollRequest.fromXContent(parser).     }     assertEquals("SCROLL_ID", searchScrollRequest.scrollId()).     assertEquals(TimeValue.parseTimeValue("1m", null, "scroll"), searchScrollRequest.scroll().keepAlive()). }
false;public;0;12;;public void testFromXContentWithUnknownParamThrowsException() throws Exception {     SearchScrollRequest searchScrollRequest = new SearchScrollRequest().     XContentParser invalidContent = createParser(XContentFactory.jsonBuilder().startObject().field("scroll_id", "value_2").field("unknown", "keyword").endObject()).     Exception e = expectThrows(IllegalArgumentException.class, () -> searchScrollRequest.fromXContent(invalidContent)).     assertThat(e.getMessage(), startsWith("Unknown parameter [unknown]")). }
false;public;0;9;;public void testToXContent() throws IOException {     SearchScrollRequest searchScrollRequest = new SearchScrollRequest().     searchScrollRequest.scrollId("SCROLL_ID").     searchScrollRequest.scroll("1m").     try (XContentBuilder builder = JsonXContent.contentBuilder()) {         searchScrollRequest.toXContent(builder, ToXContent.EMPTY_PARAMS).         assertEquals("{\"scroll_id\":\"SCROLL_ID\",\"scroll\":\"1m\"}", Strings.toString(builder)).     } }
false;public;0;13;;public void testToAndFromXContent() throws IOException {     XContentType xContentType = randomFrom(XContentType.values()).     boolean humanReadable = randomBoolean().     SearchScrollRequest originalRequest = createSearchScrollRequest().     BytesReference originalBytes = toShuffledXContent(originalRequest, xContentType, ToXContent.EMPTY_PARAMS, humanReadable).     SearchScrollRequest parsedRequest = new SearchScrollRequest().     try (XContentParser parser = createParser(xContentType.xContent(), originalBytes)) {         parsedRequest.fromXContent(parser).     }     assertEquals(originalRequest, parsedRequest).     BytesReference parsedBytes = XContentHelper.toXContent(parsedRequest, xContentType, humanReadable).     assertToXContentEquivalent(originalBytes, parsedBytes, xContentType). }
false;public;0;3;;public void testEqualsAndHashcode() {     checkEqualsAndHashCode(createSearchScrollRequest(), SearchScrollRequestTests::copyRequest, SearchScrollRequestTests::mutate). }
false;public,static;0;5;;public static SearchScrollRequest createSearchScrollRequest() {     SearchScrollRequest searchScrollRequest = new SearchScrollRequest(randomAlphaOfLengthBetween(3, 10)).     searchScrollRequest.scroll(randomPositiveTimeValue()).     return searchScrollRequest. }
false;private,static;1;6;;private static SearchScrollRequest copyRequest(SearchScrollRequest searchScrollRequest) {     SearchScrollRequest result = new SearchScrollRequest().     result.scrollId(searchScrollRequest.scrollId()).     result.scroll(searchScrollRequest.scroll()).     return result. }
false;private,static;1;8;;private static SearchScrollRequest mutate(SearchScrollRequest original) {     SearchScrollRequest copy = copyRequest(original).     if (randomBoolean()) {         return copy.scrollId(original.scrollId() + "xyz").     } else {         return copy.scroll(new TimeValue(original.scroll().keepAlive().getMillis() + 1)).     } }
