commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;public void testSerialization() throws IOException {     PutStoredScriptRequest storedScriptRequest = new PutStoredScriptRequest("bar", "context", new BytesArray("{}"), XContentType.JSON, new StoredScriptSource("foo", "bar", Collections.emptyMap())).     assertEquals(XContentType.JSON, storedScriptRequest.xContentType()).     try (BytesStreamOutput output = new BytesStreamOutput()) {         storedScriptRequest.writeTo(output).         try (StreamInput in = output.bytes().streamInput()) {             PutStoredScriptRequest serialized = new PutStoredScriptRequest().             serialized.readFrom(in).             assertEquals(XContentType.JSON, serialized.xContentType()).             assertEquals(storedScriptRequest.id(), serialized.id()).             assertEquals(storedScriptRequest.context(), serialized.context()).         }     } }
false;public;0;25;;public void testToXContent() throws IOException {     XContentType xContentType = randomFrom(XContentType.values()).     XContentBuilder builder = XContentBuilder.builder(xContentType.xContent()).     builder.startObject().     builder.startObject("script").field("lang", "painless").field("source", "Math.log(_score * 2) + params.multiplier").endObject().     builder.endObject().     BytesReference expectedRequestBody = BytesReference.bytes(builder).     PutStoredScriptRequest request = new PutStoredScriptRequest().     request.id("test1").     request.content(expectedRequestBody, xContentType).     XContentBuilder requestBuilder = XContentBuilder.builder(xContentType.xContent()).     requestBuilder.startObject().     request.toXContent(requestBuilder, ToXContent.EMPTY_PARAMS).     requestBuilder.endObject().     BytesReference actualRequestBody = BytesReference.bytes(requestBuilder).     assertEquals(expectedRequestBody, actualRequestBody). }
