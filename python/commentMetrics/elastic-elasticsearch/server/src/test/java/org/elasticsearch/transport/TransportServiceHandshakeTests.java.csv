commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void startThreadPool() {     threadPool = new TestThreadPool(TransportServiceHandshakeTests.class.getSimpleName()). }
false;private;3;18;;private NetworkHandle startServices(String nodeNameAndId, Settings settings, Version version) {     MockNioTransport transport = new MockNioTransport(settings, Version.CURRENT, threadPool, new NetworkService(Collections.emptyList()), PageCacheRecycler.NON_RECYCLING_INSTANCE, new NamedWriteableRegistry(Collections.emptyList()), new NoneCircuitBreakerService()).     TransportService transportService = new MockTransportService(settings, transport, threadPool, TransportService.NOOP_TRANSPORT_INTERCEPTOR, (boundAddress) -> new DiscoveryNode(nodeNameAndId, nodeNameAndId, boundAddress.publishAddress(), emptyMap(), emptySet(), version), null, Collections.emptySet()).     transportService.start().     transportService.acceptIncomingRequests().     transportServices.add(transportService).     return new NetworkHandle(transportService, transportService.getLocalNode()). }
false;public;0;7;;@After public void tearDown() throws Exception {     for (TransportService transportService : transportServices) {         transportService.close().     }     super.tearDown(). }
false;public,static;0;6;;@AfterClass public static void terminateThreadPool() {     ThreadPool.terminate(threadPool, 30, TimeUnit.SECONDS).     // since static must set to null to be eligible for collection     threadPool = null. }
false;public;0;24;;public void testConnectToNodeLight() throws IOException {     Settings settings = Settings.builder().put("cluster.name", "test").build().     NetworkHandle handleA = startServices("TS_A", settings, Version.CURRENT).     NetworkHandle handleB = startServices("TS_B", settings, VersionUtils.randomVersionBetween(random(), Version.CURRENT.minimumCompatibilityVersion(), Version.CURRENT)).     DiscoveryNode discoveryNode = new DiscoveryNode("", handleB.discoveryNode.getAddress(), emptyMap(), emptySet(), Version.CURRENT.minimumCompatibilityVersion()).     try (Transport.Connection connection = handleA.transportService.openConnection(discoveryNode, TestProfiles.LIGHT_PROFILE)) {         DiscoveryNode connectedNode = handleA.transportService.handshake(connection, timeout).         assertNotNull(connectedNode).         // the name and version should be updated         assertEquals(connectedNode.getName(), "TS_B").         assertEquals(connectedNode.getVersion(), handleB.discoveryNode.getVersion()).         assertFalse(handleA.transportService.nodeConnected(discoveryNode)).     } }
false;public;0;19;;public void testMismatchedClusterName() {     NetworkHandle handleA = startServices("TS_A", Settings.builder().put("cluster.name", "a").build(), Version.CURRENT).     NetworkHandle handleB = startServices("TS_B", Settings.builder().put("cluster.name", "b").build(), Version.CURRENT).     DiscoveryNode discoveryNode = new DiscoveryNode("", handleB.discoveryNode.getAddress(), emptyMap(), emptySet(), Version.CURRENT.minimumCompatibilityVersion()).     IllegalStateException ex = expectThrows(IllegalStateException.class, () -> {         try (Transport.Connection connection = handleA.transportService.openConnection(discoveryNode, TestProfiles.LIGHT_PROFILE)) {             handleA.transportService.handshake(connection, timeout).         }     }).     assertThat(ex.getMessage(), containsString("handshake failed, mismatched cluster name [Cluster [b]]")).     assertFalse(handleA.transportService.nodeConnected(discoveryNode)). }
false;public;0;20;;public void testIncompatibleVersions() {     Settings settings = Settings.builder().put("cluster.name", "test").build().     NetworkHandle handleA = startServices("TS_A", settings, Version.CURRENT).     NetworkHandle handleB = startServices("TS_B", settings, VersionUtils.getPreviousVersion(Version.CURRENT.minimumCompatibilityVersion())).     DiscoveryNode discoveryNode = new DiscoveryNode("", handleB.discoveryNode.getAddress(), emptyMap(), emptySet(), Version.CURRENT.minimumCompatibilityVersion()).     IllegalStateException ex = expectThrows(IllegalStateException.class, () -> {         try (Transport.Connection connection = handleA.transportService.openConnection(discoveryNode, TestProfiles.LIGHT_PROFILE)) {             handleA.transportService.handshake(connection, timeout).         }     }).     assertThat(ex.getMessage(), containsString("handshake failed, incompatible version")).     assertFalse(handleA.transportService.nodeConnected(discoveryNode)). }
false;public;0;16;;public void testNodeConnectWithDifferentNodeId() {     Settings settings = Settings.builder().put("cluster.name", "test").build().     NetworkHandle handleA = startServices("TS_A", settings, Version.CURRENT).     NetworkHandle handleB = startServices("TS_B", settings, Version.CURRENT).     DiscoveryNode discoveryNode = new DiscoveryNode(randomAlphaOfLength(10), handleB.discoveryNode.getAddress(), emptyMap(), emptySet(), handleB.discoveryNode.getVersion()).     ConnectTransportException ex = expectThrows(ConnectTransportException.class, () -> {         handleA.transportService.connectToNode(discoveryNode, TestProfiles.LIGHT_PROFILE).     }).     assertThat(ex.getMessage(), containsString("unexpected remote node")).     assertFalse(handleA.transportService.nodeConnected(discoveryNode)). }
false;public;0;15;;public void testNodeConnectWithDifferentNodeIdSucceedsIfThisIsTransportClientOfSimpleNodeSampler() {     Settings.Builder settings = Settings.builder().put("cluster.name", "test").     Settings transportClientSettings = settings.put(Client.CLIENT_TYPE_SETTING_S.getKey(), TransportClient.CLIENT_TYPE).build().     NetworkHandle handleA = startServices("TS_A", transportClientSettings, Version.CURRENT).     NetworkHandle handleB = startServices("TS_B", settings.build(), Version.CURRENT).     DiscoveryNode discoveryNode = new DiscoveryNode(randomAlphaOfLength(10), handleB.discoveryNode.getAddress(), emptyMap(), emptySet(), handleB.discoveryNode.getVersion()).     handleA.transportService.connectToNode(discoveryNode, TestProfiles.LIGHT_PROFILE).     assertTrue(handleA.transportService.nodeConnected(discoveryNode)). }
false;public;0;19;;public void testNodeConnectWithDifferentNodeIdFailsWhenSnifferTransportClient() {     Settings.Builder settings = Settings.builder().put("cluster.name", "test").     Settings transportClientSettings = settings.put(Client.CLIENT_TYPE_SETTING_S.getKey(), TransportClient.CLIENT_TYPE).put(TransportClient.CLIENT_TRANSPORT_SNIFF.getKey(), true).build().     NetworkHandle handleA = startServices("TS_A", transportClientSettings, Version.CURRENT).     NetworkHandle handleB = startServices("TS_B", settings.build(), Version.CURRENT).     DiscoveryNode discoveryNode = new DiscoveryNode(randomAlphaOfLength(10), handleB.discoveryNode.getAddress(), emptyMap(), emptySet(), handleB.discoveryNode.getVersion()).     ConnectTransportException ex = expectThrows(ConnectTransportException.class, () -> {         handleA.transportService.connectToNode(discoveryNode, TestProfiles.LIGHT_PROFILE).     }).     assertThat(ex.getMessage(), containsString("unexpected remote node")).     assertFalse(handleA.transportService.nodeConnected(discoveryNode)). }
