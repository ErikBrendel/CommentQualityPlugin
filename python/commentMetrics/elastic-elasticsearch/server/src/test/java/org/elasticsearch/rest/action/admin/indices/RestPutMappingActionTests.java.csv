commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setUpAction() {     new RestPutMappingAction(Settings.EMPTY, controller()). }
false;public;0;18;;public void testIncludeTypeName() {     Map<String, String> params = new HashMap<>().     params.put(INCLUDE_TYPE_NAME_PARAMETER, randomFrom("true", "false")).     RestRequest deprecatedRequest = new FakeRestRequest.Builder(xContentRegistry()).withMethod(RestRequest.Method.PUT).withPath("/some_index/_mapping/").withParams(params).build().     dispatchRequest(deprecatedRequest).     assertWarnings(RestPutMappingAction.TYPES_DEPRECATION_MESSAGE).     RestRequest validRequest = new FakeRestRequest.Builder(xContentRegistry()).withMethod(RestRequest.Method.PUT).withPath("/some_index/_mapping").build().     dispatchRequest(validRequest). }
false;public;0;15;;public void testTypeInPath() {     // Test that specifying a type while include_type_name is false     // results in an illegal argument exception.     RestRequest request = new FakeRestRequest.Builder(xContentRegistry()).withMethod(RestRequest.Method.PUT).withPath("/some_index/_mapping/some_type").build().     FakeRestChannel channel = new FakeRestChannel(request, false, 1).     ThreadContext threadContext = new ThreadContext(Settings.EMPTY).     controller().dispatchRequest(request, channel, threadContext).     assertEquals(1, channel.errors().get()).     assertEquals(RestStatus.BAD_REQUEST, channel.capturedResponse().status()). }
