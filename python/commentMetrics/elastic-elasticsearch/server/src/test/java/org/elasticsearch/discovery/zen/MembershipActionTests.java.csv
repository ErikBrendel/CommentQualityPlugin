commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;public void testPreventJoinClusterWithNewerIndices() {     Settings.builder().build().     MetaData.Builder metaBuilder = MetaData.builder().     IndexMetaData indexMetaData = IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1).build().     metaBuilder.put(indexMetaData, false).     MetaData metaData = metaBuilder.build().     JoinTaskExecutor.ensureIndexCompatibility(Version.CURRENT, metaData).     expectThrows(IllegalStateException.class, () -> JoinTaskExecutor.ensureIndexCompatibility(VersionUtils.getPreviousVersion(Version.CURRENT), metaData)). }
false;public;0;14;;public void testPreventJoinClusterWithUnsupportedIndices() {     Settings.builder().build().     MetaData.Builder metaBuilder = MetaData.builder().     IndexMetaData indexMetaData = IndexMetaData.builder("test").settings(settings(VersionUtils.getPreviousVersion(Version.CURRENT.minimumIndexCompatibilityVersion()))).numberOfShards(1).numberOfReplicas(1).build().     metaBuilder.put(indexMetaData, false).     MetaData metaData = metaBuilder.build().     expectThrows(IllegalStateException.class, () -> JoinTaskExecutor.ensureIndexCompatibility(Version.CURRENT, metaData)). }
false;public;0;48;;public void testPreventJoinClusterWithUnsupportedNodeVersions() {     DiscoveryNodes.Builder builder = DiscoveryNodes.builder().     final Version version = randomVersion(random()).     builder.add(new DiscoveryNode(UUIDs.base64UUID(), buildNewFakeTransportAddress(), version)).     builder.add(new DiscoveryNode(UUIDs.base64UUID(), buildNewFakeTransportAddress(), randomCompatibleVersion(random(), version))).     DiscoveryNodes nodes = builder.build().     final Version maxNodeVersion = nodes.getMaxNodeVersion().     final Version minNodeVersion = nodes.getMinNodeVersion().     if (maxNodeVersion.onOrAfter(Version.V_7_0_0)) {         final Version tooLow = getPreviousVersion(maxNodeVersion.minimumCompatibilityVersion()).         expectThrows(IllegalStateException.class, () -> {             if (randomBoolean()) {                 JoinTaskExecutor.ensureNodesCompatibility(tooLow, nodes).             } else {                 JoinTaskExecutor.ensureNodesCompatibility(tooLow, minNodeVersion, maxNodeVersion).             }         }).     }     if (minNodeVersion.before(Version.V_6_0_0)) {         Version tooHigh = incompatibleFutureVersion(minNodeVersion).         expectThrows(IllegalStateException.class, () -> {             if (randomBoolean()) {                 JoinTaskExecutor.ensureNodesCompatibility(tooHigh, nodes).             } else {                 JoinTaskExecutor.ensureNodesCompatibility(tooHigh, minNodeVersion, maxNodeVersion).             }         }).     }     if (minNodeVersion.onOrAfter(Version.V_7_0_0)) {         Version oldMajor = Version.V_6_4_0.minimumCompatibilityVersion().         expectThrows(IllegalStateException.class, () -> JoinTaskExecutor.ensureMajorVersionBarrier(oldMajor, minNodeVersion)).     }     final Version minGoodVersion = maxNodeVersion.major == minNodeVersion.major ? // we have to stick with the same major     minNodeVersion : maxNodeVersion.minimumCompatibilityVersion().     final Version justGood = randomVersionBetween(random(), minGoodVersion, maxCompatibleVersion(minNodeVersion)).     if (randomBoolean()) {         JoinTaskExecutor.ensureNodesCompatibility(justGood, nodes).     } else {         JoinTaskExecutor.ensureNodesCompatibility(justGood, minNodeVersion, maxNodeVersion).     } }
false;public;0;19;;public void testSuccess() {     Settings.builder().build().     MetaData.Builder metaBuilder = MetaData.builder().     IndexMetaData indexMetaData = IndexMetaData.builder("test").settings(settings(VersionUtils.randomVersionBetween(random(), Version.CURRENT.minimumIndexCompatibilityVersion(), Version.CURRENT))).numberOfShards(1).numberOfReplicas(1).build().     metaBuilder.put(indexMetaData, false).     indexMetaData = IndexMetaData.builder("test1").settings(settings(VersionUtils.randomVersionBetween(random(), Version.CURRENT.minimumIndexCompatibilityVersion(), Version.CURRENT))).numberOfShards(1).numberOfReplicas(1).build().     metaBuilder.put(indexMetaData, false).     MetaData metaData = metaBuilder.build().     JoinTaskExecutor.ensureIndexCompatibility(Version.CURRENT, metaData). }
