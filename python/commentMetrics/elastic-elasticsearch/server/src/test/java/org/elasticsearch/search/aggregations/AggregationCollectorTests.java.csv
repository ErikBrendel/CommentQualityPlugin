commented;modifiers;parameterAmount;loc;comment;code
false;public;0;25;;public void testNeedsScores() throws Exception {     IndexService index = createIndex("idx").     client().prepareIndex("idx", "type", "1").setSource("f", 5).execute().get().     client().admin().indices().prepareRefresh("idx").get().     // simple field aggregation, no scores needed     String fieldAgg = "{ \"my_terms\": {\"terms\": {\"field\": \"f\"}}}".     assertFalse(needsScores(index, fieldAgg)).     // agg on a script => scores are needed     // TODO: can we use a mock script service here?     // String scriptAgg = "{ \"my_terms\": {\"terms\": {\"script\": \"doc['f'].value\"}}}".     // assertTrue(needsScores(index, scriptAgg)).     //      // String subScriptAgg = "{ \"my_outer_terms\": { \"terms\": { \"field\": \"f\" }, \"aggs\": " + scriptAgg + "}}".     // assertTrue(needsScores(index, subScriptAgg)).     // make sure the information is propagated to sub aggregations     String subFieldAgg = "{ \"my_outer_terms\": { \"terms\": { \"field\": \"f\" }, \"aggs\": " + fieldAgg + "}}".     assertFalse(needsScores(index, subFieldAgg)).     // top_hits is a particular example of an aggregation that needs scores     String topHitsAgg = "{ \"my_hits\": {\"top_hits\": {}}}".     assertTrue(needsScores(index, topHitsAgg)). }
false;private;2;10;;private boolean needsScores(IndexService index, String agg) throws IOException {     try (XContentParser aggParser = createParser(JsonXContent.jsonXContent, agg)) {         aggParser.nextToken().         SearchContext context = createSearchContext(index).         final AggregatorFactories factories = AggregatorFactories.parseAggregators(aggParser).build(context, null).         final Aggregator[] aggregators = factories.createTopLevelAggregators().         assertEquals(1, aggregators.length).         return aggregators[0].scoreMode().needsScores().     } }
