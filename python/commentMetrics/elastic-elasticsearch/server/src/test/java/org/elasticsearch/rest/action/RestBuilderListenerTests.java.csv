commented;modifiers;parameterAmount;loc;comment;code
false;public;2;6;;@Override public RestResponse buildResponse(Empty empty, XContentBuilder builder) throws Exception {     builderAtomicReference.set(builder).     builder.close().     return new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY). }
false;public;0;16;;public void testXContentBuilderClosedInBuildResponse() throws Exception {     AtomicReference<XContentBuilder> builderAtomicReference = new AtomicReference<>().     RestBuilderListener<TransportResponse.Empty> builderListener = new RestBuilderListener<Empty>(new FakeRestChannel(new FakeRestRequest(), randomBoolean(), 1)) {          @Override         public RestResponse buildResponse(Empty empty, XContentBuilder builder) throws Exception {             builderAtomicReference.set(builder).             builder.close().             return new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY).         }     }.     builderListener.buildResponse(Empty.INSTANCE).     assertNotNull(builderAtomicReference.get()).     assertTrue(builderAtomicReference.get().generator().isClosed()). }
false;public;2;5;;@Override public RestResponse buildResponse(Empty empty, XContentBuilder builder) throws Exception {     builderAtomicReference.set(builder).     return new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY). }
false;;1;5;;@Override boolean assertBuilderClosed(XContentBuilder xContentBuilder) {     // don't check the actual builder being closed so we can test auto close     return true. }
false;public;0;21;;public void testXContentBuilderNotClosedInBuildResponseAssertionsDisabled() throws Exception {     AtomicReference<XContentBuilder> builderAtomicReference = new AtomicReference<>().     RestBuilderListener<TransportResponse.Empty> builderListener = new RestBuilderListener<Empty>(new FakeRestChannel(new FakeRestRequest(), randomBoolean(), 1)) {          @Override         public RestResponse buildResponse(Empty empty, XContentBuilder builder) throws Exception {             builderAtomicReference.set(builder).             return new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY).         }          @Override         boolean assertBuilderClosed(XContentBuilder xContentBuilder) {             // don't check the actual builder being closed so we can test auto close             return true.         }     }.     builderListener.buildResponse(Empty.INSTANCE).     assertNotNull(builderAtomicReference.get()).     assertTrue(builderAtomicReference.get().generator().isClosed()). }
false;public;2;4;;@Override public RestResponse buildResponse(Empty empty, XContentBuilder builder) throws Exception {     return new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY). }
false;public;0;14;;public void testXContentBuilderNotClosedInBuildResponseAssertionsEnabled() throws Exception {     assumeTrue("tests are not being run with assertions", RestBuilderListener.class.desiredAssertionStatus()).     RestBuilderListener<TransportResponse.Empty> builderListener = new RestBuilderListener<Empty>(new FakeRestChannel(new FakeRestRequest(), randomBoolean(), 1)) {          @Override         public RestResponse buildResponse(Empty empty, XContentBuilder builder) throws Exception {             return new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY).         }     }.     AssertionError error = expectThrows(AssertionError.class, () -> builderListener.buildResponse(Empty.INSTANCE)).     assertEquals("callers should ensure the XContentBuilder is closed themselves", error.getMessage()). }
