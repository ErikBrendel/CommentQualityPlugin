commented;modifiers;parameterAmount;loc;comment;code
false;public;0;40;;public void testRenameTempFiles() throws IOException {     IndexService service = createIndex("foo").     IndexShard indexShard = service.getShardOrNull(0).     MultiFileWriter multiFileWriter = new MultiFileWriter(indexShard.store(), indexShard.recoveryState().getIndex(), "recovery.test.", logger, () -> {     }).     try (IndexOutput indexOutput = multiFileWriter.openAndPutIndexOutput("foo.bar", new StoreFileMetaData("foo.bar", 8 + CodecUtil.footerLength(), "9z51nw", MIN_SUPPORTED_LUCENE_VERSION), indexShard.store())) {         indexOutput.writeInt(1).         IndexOutput openIndexOutput = multiFileWriter.getOpenIndexOutput("foo.bar").         assertSame(openIndexOutput, indexOutput).         openIndexOutput.writeInt(1).         CodecUtil.writeFooter(indexOutput).     }     try {         multiFileWriter.openAndPutIndexOutput("foo.bar", new StoreFileMetaData("foo.bar", 8 + CodecUtil.footerLength(), "9z51nw", MIN_SUPPORTED_LUCENE_VERSION), indexShard.store()).         fail("file foo.bar is already opened and registered").     } catch (IllegalStateException ex) {         assertEquals("output for file [foo.bar] has already been created", ex.getMessage()).     // all well = it's already registered     }     multiFileWriter.removeOpenIndexOutputs("foo.bar").     Set<String> strings = Sets.newHashSet(indexShard.store().directory().listAll()).     String expectedFile = null.     for (String file : strings) {         if (Pattern.compile("recovery[.][\\w-]+[.]foo[.]bar").matcher(file).matches()) {             expectedFile = file.             break.         }     }     assertNotNull(expectedFile).     // we have to close it here otherwise rename fails since the write.lock is held by the engine     indexShard.close("foo", false).     multiFileWriter.renameAllTempFiles().     strings = Sets.newHashSet(indexShard.store().directory().listAll()).     assertTrue(strings.toString(), strings.contains("foo.bar")).     assertFalse(strings.toString(), strings.contains(expectedFile)).     multiFileWriter.close(). }
