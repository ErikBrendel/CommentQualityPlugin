commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public void testFilterPersistentSettings() {     runTestFilterSettingsTest(MetaData.Builder::persistentSettings, ClusterGetSettingsResponse::getPersistentSettings). }
false;public;0;3;;public void testFilterTransientSettings() {     runTestFilterSettingsTest(MetaData.Builder::transientSettings, ClusterGetSettingsResponse::getTransientSettings). }
false;private;2;20;;private void runTestFilterSettingsTest(final BiConsumer<MetaData.Builder, Settings> md, final Function<ClusterGetSettingsResponse, Settings> s) {     final MetaData.Builder mdBuilder = new MetaData.Builder().     final Settings settings = Settings.builder().put("foo.filtered", "bar").put("foo.non_filtered", "baz").build().     md.accept(mdBuilder, settings).     final ClusterState.Builder builder = new ClusterState.Builder(ClusterState.EMPTY_STATE).metaData(mdBuilder).     final SettingsFilter filter = new SettingsFilter(Collections.singleton("foo.filtered")).     final Setting.Property[] properties = { Setting.Property.Dynamic, Setting.Property.Filtered, Setting.Property.NodeScope }.     final Set<Setting<?>> settingsSet = Stream.concat(ClusterSettings.BUILT_IN_CLUSTER_SETTINGS.stream(), Stream.concat(Stream.of(Setting.simpleString("foo.filtered", properties)), Stream.of(Setting.simpleString("foo.non_filtered", properties)))).collect(Collectors.toSet()).     final ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, settingsSet).     final ClusterGetSettingsResponse response = RestClusterGetSettingsAction.response(builder.build(), randomBoolean(), filter, clusterSettings, Settings.EMPTY).     assertFalse(s.apply(response).hasValue("foo.filtered")).     assertTrue(s.apply(response).hasValue("foo.non_filtered")). }
