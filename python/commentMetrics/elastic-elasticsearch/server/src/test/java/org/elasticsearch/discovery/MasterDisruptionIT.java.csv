# id;timestamp;commentText;codeText;commentWords;codeWords
MasterDisruptionIT -> public void testFailWithMinimumMasterNodesConfigured() throws Exception;1524684173;Test that no split brain occurs under partial network partition. See https://github.com/elastic/elasticsearch/issues/2488;public void testFailWithMinimumMasterNodesConfigured() throws Exception {_        List<String> nodes = startCluster(3)___        _        final String masterNode = internalCluster().getMasterName()__        logger.info("---> legit elected master node={}", masterNode)___        _        Set<String> nonMasters = new HashSet<>(nodes)__        nonMasters.remove(masterNode)__        final String unluckyNode = randomFrom(nonMasters.toArray(Strings.EMPTY_ARRAY))____        __        NetworkDisruption networkDisconnect = new NetworkDisruption(_                new NetworkDisruption.TwoPartitions(masterNode, unluckyNode),_                new NetworkDisruption.NetworkDisconnect())__        setDisruptionScheme(networkDisconnect)__        networkDisconnect.startDisrupting()___        _        ensureStableCluster(2, masterNode)___        _        _        _        assertNoMaster(unluckyNode)___        networkDisconnect.stopDisrupting()___        _        ensureStableCluster(3)___        _        _        assertMaster(masterNode, nodes)__    };test,that,no,split,brain,occurs,under,partial,network,partition,see,https,github,com,elastic,elasticsearch,issues,2488;public,void,test,fail,with,minimum,master,nodes,configured,throws,exception,list,string,nodes,start,cluster,3,final,string,master,node,internal,cluster,get,master,name,logger,info,legit,elected,master,node,master,node,set,string,non,masters,new,hash,set,nodes,non,masters,remove,master,node,final,string,unlucky,node,random,from,non,masters,to,array,strings,network,disruption,network,disconnect,new,network,disruption,new,network,disruption,two,partitions,master,node,unlucky,node,new,network,disruption,network,disconnect,set,disruption,scheme,network,disconnect,network,disconnect,start,disrupting,ensure,stable,cluster,2,master,node,assert,no,master,unlucky,node,network,disconnect,stop,disrupting,ensure,stable,cluster,3,assert,master,master,node,nodes
MasterDisruptionIT -> public void testFailWithMinimumMasterNodesConfigured() throws Exception;1525162917;Test that no split brain occurs under partial network partition. See https://github.com/elastic/elasticsearch/issues/2488;public void testFailWithMinimumMasterNodesConfigured() throws Exception {_        List<String> nodes = startCluster(3)___        _        final String masterNode = internalCluster().getMasterName()__        logger.info("---> legit elected master node={}", masterNode)___        _        Set<String> nonMasters = new HashSet<>(nodes)__        nonMasters.remove(masterNode)__        final String unluckyNode = randomFrom(nonMasters.toArray(Strings.EMPTY_ARRAY))____        __        NetworkDisruption networkDisconnect = new NetworkDisruption(_                new NetworkDisruption.TwoPartitions(masterNode, unluckyNode),_                new NetworkDisruption.NetworkDisconnect())__        setDisruptionScheme(networkDisconnect)__        networkDisconnect.startDisrupting()___        _        ensureStableCluster(2, masterNode)___        _        _        _        assertNoMaster(unluckyNode)___        networkDisconnect.stopDisrupting()___        _        ensureStableCluster(3)___        _        _        assertMaster(masterNode, nodes)__    };test,that,no,split,brain,occurs,under,partial,network,partition,see,https,github,com,elastic,elasticsearch,issues,2488;public,void,test,fail,with,minimum,master,nodes,configured,throws,exception,list,string,nodes,start,cluster,3,final,string,master,node,internal,cluster,get,master,name,logger,info,legit,elected,master,node,master,node,set,string,non,masters,new,hash,set,nodes,non,masters,remove,master,node,final,string,unlucky,node,random,from,non,masters,to,array,strings,network,disruption,network,disconnect,new,network,disruption,new,network,disruption,two,partitions,master,node,unlucky,node,new,network,disruption,network,disconnect,set,disruption,scheme,network,disconnect,network,disconnect,start,disrupting,ensure,stable,cluster,2,master,node,assert,no,master,unlucky,node,network,disconnect,stop,disrupting,ensure,stable,cluster,3,assert,master,master,node,nodes
MasterDisruptionIT -> public void testFailWithMinimumMasterNodesConfigured() throws Exception;1541008027;Test that no split brain occurs under partial network partition. See https://github.com/elastic/elasticsearch/issues/2488;public void testFailWithMinimumMasterNodesConfigured() throws Exception {_        List<String> nodes = startCluster(3)___        _        final String masterNode = internalCluster().getMasterName()__        logger.info("---> legit elected master node={}", masterNode)___        _        Set<String> nonMasters = new HashSet<>(nodes)__        nonMasters.remove(masterNode)__        final String unluckyNode = randomFrom(nonMasters.toArray(Strings.EMPTY_ARRAY))____        __        NetworkDisruption networkDisconnect = new NetworkDisruption(_                new NetworkDisruption.TwoPartitions(masterNode, unluckyNode),_                new NetworkDisruption.NetworkDisconnect())__        setDisruptionScheme(networkDisconnect)__        networkDisconnect.startDisrupting()___        _        ensureStableCluster(2, masterNode)___        _        _        _        assertNoMaster(unluckyNode)___        networkDisconnect.stopDisrupting()___        _        ensureStableCluster(3)___        _        _        assertMaster(masterNode, nodes)__    };test,that,no,split,brain,occurs,under,partial,network,partition,see,https,github,com,elastic,elasticsearch,issues,2488;public,void,test,fail,with,minimum,master,nodes,configured,throws,exception,list,string,nodes,start,cluster,3,final,string,master,node,internal,cluster,get,master,name,logger,info,legit,elected,master,node,master,node,set,string,non,masters,new,hash,set,nodes,non,masters,remove,master,node,final,string,unlucky,node,random,from,non,masters,to,array,strings,network,disruption,network,disconnect,new,network,disruption,new,network,disruption,two,partitions,master,node,unlucky,node,new,network,disruption,network,disconnect,set,disruption,scheme,network,disconnect,network,disconnect,start,disrupting,ensure,stable,cluster,2,master,node,assert,no,master,unlucky,node,network,disconnect,stop,disrupting,ensure,stable,cluster,3,assert,master,master,node,nodes
MasterDisruptionIT -> public void testFailWithMinimumMasterNodesConfigured() throws Exception;1544081506;Test that no split brain occurs under partial network partition. See https://github.com/elastic/elasticsearch/issues/2488;public void testFailWithMinimumMasterNodesConfigured() throws Exception {_        List<String> nodes = startCluster(3)___        _        final String masterNode = internalCluster().getMasterName()__        logger.info("---> legit elected master node={}", masterNode)___        _        Set<String> nonMasters = new HashSet<>(nodes)__        nonMasters.remove(masterNode)__        final String unluckyNode = randomFrom(nonMasters.toArray(Strings.EMPTY_ARRAY))____        __        NetworkDisruption networkDisconnect = new NetworkDisruption(_                new NetworkDisruption.TwoPartitions(masterNode, unluckyNode),_                new NetworkDisruption.NetworkDisconnect())__        setDisruptionScheme(networkDisconnect)__        networkDisconnect.startDisrupting()___        _        ensureStableCluster(2, masterNode)___        _        _        _        assertNoMaster(unluckyNode)___        networkDisconnect.stopDisrupting()___        _        ensureStableCluster(3)___        _        _        assertMaster(masterNode, nodes)__    };test,that,no,split,brain,occurs,under,partial,network,partition,see,https,github,com,elastic,elasticsearch,issues,2488;public,void,test,fail,with,minimum,master,nodes,configured,throws,exception,list,string,nodes,start,cluster,3,final,string,master,node,internal,cluster,get,master,name,logger,info,legit,elected,master,node,master,node,set,string,non,masters,new,hash,set,nodes,non,masters,remove,master,node,final,string,unlucky,node,random,from,non,masters,to,array,strings,network,disruption,network,disconnect,new,network,disruption,new,network,disruption,two,partitions,master,node,unlucky,node,new,network,disruption,network,disconnect,set,disruption,scheme,network,disconnect,network,disconnect,start,disrupting,ensure,stable,cluster,2,master,node,assert,no,master,unlucky,node,network,disconnect,stop,disrupting,ensure,stable,cluster,3,assert,master,master,node,nodes
MasterDisruptionIT -> public void testFailWithMinimumMasterNodesConfigured() throws Exception;1544619154;Test that no split brain occurs under partial network partition. See https://github.com/elastic/elasticsearch/issues/2488;public void testFailWithMinimumMasterNodesConfigured() throws Exception {_        List<String> nodes = startCluster(3)___        _        final String masterNode = internalCluster().getMasterName()__        logger.info("---> legit elected master node={}", masterNode)___        _        Set<String> nonMasters = new HashSet<>(nodes)__        nonMasters.remove(masterNode)__        final String unluckyNode = randomFrom(nonMasters.toArray(Strings.EMPTY_ARRAY))____        __        NetworkDisruption networkDisconnect = new NetworkDisruption(_                new NetworkDisruption.TwoPartitions(masterNode, unluckyNode),_                new NetworkDisruption.NetworkDisconnect())__        setDisruptionScheme(networkDisconnect)__        networkDisconnect.startDisrupting()___        _        ensureStableCluster(2, masterNode)___        _        _        _        assertNoMaster(unluckyNode)___        networkDisconnect.stopDisrupting()___        _        ensureStableCluster(3)___        _        _        assertMaster(masterNode, nodes)__    };test,that,no,split,brain,occurs,under,partial,network,partition,see,https,github,com,elastic,elasticsearch,issues,2488;public,void,test,fail,with,minimum,master,nodes,configured,throws,exception,list,string,nodes,start,cluster,3,final,string,master,node,internal,cluster,get,master,name,logger,info,legit,elected,master,node,master,node,set,string,non,masters,new,hash,set,nodes,non,masters,remove,master,node,final,string,unlucky,node,random,from,non,masters,to,array,strings,network,disruption,network,disconnect,new,network,disruption,new,network,disruption,two,partitions,master,node,unlucky,node,new,network,disruption,network,disconnect,set,disruption,scheme,network,disconnect,network,disconnect,start,disrupting,ensure,stable,cluster,2,master,node,assert,no,master,unlucky,node,network,disconnect,stop,disrupting,ensure,stable,cluster,3,assert,master,master,node,nodes
MasterDisruptionIT -> public void testFailWithMinimumMasterNodesConfigured() throws Exception;1545035674;Test that no split brain occurs under partial network partition. See https://github.com/elastic/elasticsearch/issues/2488;public void testFailWithMinimumMasterNodesConfigured() throws Exception {_        List<String> nodes = startCluster(3)___        _        final String masterNode = internalCluster().getMasterName()__        logger.info("---> legit elected master node={}", masterNode)___        _        Set<String> nonMasters = new HashSet<>(nodes)__        nonMasters.remove(masterNode)__        final String unluckyNode = randomFrom(nonMasters.toArray(Strings.EMPTY_ARRAY))____        __        NetworkDisruption networkDisconnect = new NetworkDisruption(_                new NetworkDisruption.TwoPartitions(masterNode, unluckyNode),_                new NetworkDisruption.NetworkDisconnect())__        setDisruptionScheme(networkDisconnect)__        networkDisconnect.startDisrupting()___        _        ensureStableCluster(2, masterNode)___        _        _        _        assertNoMaster(unluckyNode)___        networkDisconnect.stopDisrupting()___        _        ensureStableCluster(3)___        _        _        assertMaster(masterNode, nodes)__    };test,that,no,split,brain,occurs,under,partial,network,partition,see,https,github,com,elastic,elasticsearch,issues,2488;public,void,test,fail,with,minimum,master,nodes,configured,throws,exception,list,string,nodes,start,cluster,3,final,string,master,node,internal,cluster,get,master,name,logger,info,legit,elected,master,node,master,node,set,string,non,masters,new,hash,set,nodes,non,masters,remove,master,node,final,string,unlucky,node,random,from,non,masters,to,array,strings,network,disruption,network,disconnect,new,network,disruption,new,network,disruption,two,partitions,master,node,unlucky,node,new,network,disruption,network,disconnect,set,disruption,scheme,network,disconnect,network,disconnect,start,disrupting,ensure,stable,cluster,2,master,node,assert,no,master,unlucky,node,network,disconnect,stop,disrupting,ensure,stable,cluster,3,assert,master,master,node,nodes
MasterDisruptionIT -> public void testFailWithMinimumMasterNodesConfigured() throws Exception;1548878955;Test that no split brain occurs under partial network partition. See https://github.com/elastic/elasticsearch/issues/2488;public void testFailWithMinimumMasterNodesConfigured() throws Exception {_        List<String> nodes = startCluster(3)___        _        final String masterNode = internalCluster().getMasterName()__        logger.info("---> legit elected master node={}", masterNode)___        _        Set<String> nonMasters = new HashSet<>(nodes)__        nonMasters.remove(masterNode)__        final String unluckyNode = randomFrom(nonMasters.toArray(Strings.EMPTY_ARRAY))____        __        NetworkDisruption networkDisconnect = new NetworkDisruption(_                new NetworkDisruption.TwoPartitions(masterNode, unluckyNode),_                new NetworkDisruption.NetworkDisconnect())__        setDisruptionScheme(networkDisconnect)__        networkDisconnect.startDisrupting()___        _        ensureStableCluster(2, masterNode)___        _        _        _        assertNoMaster(unluckyNode)___        networkDisconnect.stopDisrupting()___        _        ensureStableCluster(3)___        _        _        assertMaster(masterNode, nodes)__    };test,that,no,split,brain,occurs,under,partial,network,partition,see,https,github,com,elastic,elasticsearch,issues,2488;public,void,test,fail,with,minimum,master,nodes,configured,throws,exception,list,string,nodes,start,cluster,3,final,string,master,node,internal,cluster,get,master,name,logger,info,legit,elected,master,node,master,node,set,string,non,masters,new,hash,set,nodes,non,masters,remove,master,node,final,string,unlucky,node,random,from,non,masters,to,array,strings,network,disruption,network,disconnect,new,network,disruption,new,network,disruption,two,partitions,master,node,unlucky,node,new,network,disruption,network,disconnect,set,disruption,scheme,network,disconnect,network,disconnect,start,disrupting,ensure,stable,cluster,2,master,node,assert,no,master,unlucky,node,network,disconnect,stop,disrupting,ensure,stable,cluster,3,assert,master,master,node,nodes
MasterDisruptionIT -> public void testMasterNodeGCs() throws Exception;1524684173;Test that cluster recovers from a long GC on master that causes other nodes to elect a new one;public void testMasterNodeGCs() throws Exception {_        List<String> nodes = startCluster(3, -1)___        String oldMasterNode = internalCluster().getMasterName()__        _        SingleNodeDisruption masterNodeDisruption = new IntermittentLongGCDisruption(random(), oldMasterNode, 100, 200, 30000, 60000)__        internalCluster().setDisruptionScheme(masterNodeDisruption)__        masterNodeDisruption.startDisrupting()___        Set<String> oldNonMasterNodesSet = new HashSet<>(nodes)__        oldNonMasterNodesSet.remove(oldMasterNode)___        List<String> oldNonMasterNodes = new ArrayList<>(oldNonMasterNodesSet)___        logger.info("waiting for nodes to de-elect master [{}]", oldMasterNode)__        for (String node : oldNonMasterNodesSet) {_            assertDifferentMaster(node, oldMasterNode)__        }__        logger.info("waiting for nodes to elect a new master")__        ensureStableCluster(2, oldNonMasterNodes.get(0))___        logger.info("waiting for any pinging to stop")__        assertDiscoveryCompleted(oldNonMasterNodes)___        _        masterNodeDisruption.stopDisrupting()__        final TimeValue waitTime = new TimeValue(DISRUPTION_HEALING_OVERHEAD.millis() + masterNodeDisruption.expectedTimeToHeal().millis())__        ensureStableCluster(3, waitTime, false, oldNonMasterNodes.get(0))___        _        String newMaster = internalCluster().getMasterName()__        assertThat(newMaster, not(equalTo(oldMasterNode)))__        assertMaster(newMaster, nodes)__    };test,that,cluster,recovers,from,a,long,gc,on,master,that,causes,other,nodes,to,elect,a,new,one;public,void,test,master,node,gcs,throws,exception,list,string,nodes,start,cluster,3,1,string,old,master,node,internal,cluster,get,master,name,single,node,disruption,master,node,disruption,new,intermittent,long,gcdisruption,random,old,master,node,100,200,30000,60000,internal,cluster,set,disruption,scheme,master,node,disruption,master,node,disruption,start,disrupting,set,string,old,non,master,nodes,set,new,hash,set,nodes,old,non,master,nodes,set,remove,old,master,node,list,string,old,non,master,nodes,new,array,list,old,non,master,nodes,set,logger,info,waiting,for,nodes,to,de,elect,master,old,master,node,for,string,node,old,non,master,nodes,set,assert,different,master,node,old,master,node,logger,info,waiting,for,nodes,to,elect,a,new,master,ensure,stable,cluster,2,old,non,master,nodes,get,0,logger,info,waiting,for,any,pinging,to,stop,assert,discovery,completed,old,non,master,nodes,master,node,disruption,stop,disrupting,final,time,value,wait,time,new,time,value,millis,master,node,disruption,expected,time,to,heal,millis,ensure,stable,cluster,3,wait,time,false,old,non,master,nodes,get,0,string,new,master,internal,cluster,get,master,name,assert,that,new,master,not,equal,to,old,master,node,assert,master,new,master,nodes
MasterDisruptionIT -> public void testMasterNodeGCs() throws Exception;1525162917;Test that cluster recovers from a long GC on master that causes other nodes to elect a new one;public void testMasterNodeGCs() throws Exception {_        List<String> nodes = startCluster(3, -1)___        String oldMasterNode = internalCluster().getMasterName()__        _        SingleNodeDisruption masterNodeDisruption = new IntermittentLongGCDisruption(random(), oldMasterNode, 100, 200, 30000, 60000)__        internalCluster().setDisruptionScheme(masterNodeDisruption)__        masterNodeDisruption.startDisrupting()___        Set<String> oldNonMasterNodesSet = new HashSet<>(nodes)__        oldNonMasterNodesSet.remove(oldMasterNode)___        List<String> oldNonMasterNodes = new ArrayList<>(oldNonMasterNodesSet)___        logger.info("waiting for nodes to de-elect master [{}]", oldMasterNode)__        for (String node : oldNonMasterNodesSet) {_            assertDifferentMaster(node, oldMasterNode)__        }__        logger.info("waiting for nodes to elect a new master")__        ensureStableCluster(2, oldNonMasterNodes.get(0))___        logger.info("waiting for any pinging to stop")__        assertDiscoveryCompleted(oldNonMasterNodes)___        _        masterNodeDisruption.stopDisrupting()__        final TimeValue waitTime = new TimeValue(DISRUPTION_HEALING_OVERHEAD.millis() + masterNodeDisruption.expectedTimeToHeal().millis())__        ensureStableCluster(3, waitTime, false, oldNonMasterNodes.get(0))___        _        String newMaster = internalCluster().getMasterName()__        assertThat(newMaster, not(equalTo(oldMasterNode)))__        assertMaster(newMaster, nodes)__    };test,that,cluster,recovers,from,a,long,gc,on,master,that,causes,other,nodes,to,elect,a,new,one;public,void,test,master,node,gcs,throws,exception,list,string,nodes,start,cluster,3,1,string,old,master,node,internal,cluster,get,master,name,single,node,disruption,master,node,disruption,new,intermittent,long,gcdisruption,random,old,master,node,100,200,30000,60000,internal,cluster,set,disruption,scheme,master,node,disruption,master,node,disruption,start,disrupting,set,string,old,non,master,nodes,set,new,hash,set,nodes,old,non,master,nodes,set,remove,old,master,node,list,string,old,non,master,nodes,new,array,list,old,non,master,nodes,set,logger,info,waiting,for,nodes,to,de,elect,master,old,master,node,for,string,node,old,non,master,nodes,set,assert,different,master,node,old,master,node,logger,info,waiting,for,nodes,to,elect,a,new,master,ensure,stable,cluster,2,old,non,master,nodes,get,0,logger,info,waiting,for,any,pinging,to,stop,assert,discovery,completed,old,non,master,nodes,master,node,disruption,stop,disrupting,final,time,value,wait,time,new,time,value,millis,master,node,disruption,expected,time,to,heal,millis,ensure,stable,cluster,3,wait,time,false,old,non,master,nodes,get,0,string,new,master,internal,cluster,get,master,name,assert,that,new,master,not,equal,to,old,master,node,assert,master,new,master,nodes
MasterDisruptionIT -> public void testMasterNodeGCs() throws Exception;1541008027;Test that cluster recovers from a long GC on master that causes other nodes to elect a new one;public void testMasterNodeGCs() throws Exception {_        List<String> nodes = startCluster(3)___        String oldMasterNode = internalCluster().getMasterName()__        _        SingleNodeDisruption masterNodeDisruption = new IntermittentLongGCDisruption(random(), oldMasterNode, 100, 200, 30000, 60000)__        internalCluster().setDisruptionScheme(masterNodeDisruption)__        masterNodeDisruption.startDisrupting()___        Set<String> oldNonMasterNodesSet = new HashSet<>(nodes)__        oldNonMasterNodesSet.remove(oldMasterNode)___        List<String> oldNonMasterNodes = new ArrayList<>(oldNonMasterNodesSet)___        logger.info("waiting for nodes to de-elect master [{}]", oldMasterNode)__        for (String node : oldNonMasterNodesSet) {_            assertDifferentMaster(node, oldMasterNode)__        }__        logger.info("waiting for nodes to elect a new master")__        ensureStableCluster(2, oldNonMasterNodes.get(0))___        logger.info("waiting for any pinging to stop")__        assertDiscoveryCompleted(oldNonMasterNodes)___        _        masterNodeDisruption.stopDisrupting()__        final TimeValue waitTime = new TimeValue(DISRUPTION_HEALING_OVERHEAD.millis() + masterNodeDisruption.expectedTimeToHeal().millis())__        ensureStableCluster(3, waitTime, false, oldNonMasterNodes.get(0))___        _        String newMaster = internalCluster().getMasterName()__        assertThat(newMaster, not(equalTo(oldMasterNode)))__        assertMaster(newMaster, nodes)__    };test,that,cluster,recovers,from,a,long,gc,on,master,that,causes,other,nodes,to,elect,a,new,one;public,void,test,master,node,gcs,throws,exception,list,string,nodes,start,cluster,3,string,old,master,node,internal,cluster,get,master,name,single,node,disruption,master,node,disruption,new,intermittent,long,gcdisruption,random,old,master,node,100,200,30000,60000,internal,cluster,set,disruption,scheme,master,node,disruption,master,node,disruption,start,disrupting,set,string,old,non,master,nodes,set,new,hash,set,nodes,old,non,master,nodes,set,remove,old,master,node,list,string,old,non,master,nodes,new,array,list,old,non,master,nodes,set,logger,info,waiting,for,nodes,to,de,elect,master,old,master,node,for,string,node,old,non,master,nodes,set,assert,different,master,node,old,master,node,logger,info,waiting,for,nodes,to,elect,a,new,master,ensure,stable,cluster,2,old,non,master,nodes,get,0,logger,info,waiting,for,any,pinging,to,stop,assert,discovery,completed,old,non,master,nodes,master,node,disruption,stop,disrupting,final,time,value,wait,time,new,time,value,millis,master,node,disruption,expected,time,to,heal,millis,ensure,stable,cluster,3,wait,time,false,old,non,master,nodes,get,0,string,new,master,internal,cluster,get,master,name,assert,that,new,master,not,equal,to,old,master,node,assert,master,new,master,nodes
MasterDisruptionIT -> public void testMasterNodeGCs() throws Exception;1544081506;Test that cluster recovers from a long GC on master that causes other nodes to elect a new one;public void testMasterNodeGCs() throws Exception {_        List<String> nodes = startCluster(3)___        String oldMasterNode = internalCluster().getMasterName()__        _        SingleNodeDisruption masterNodeDisruption = new IntermittentLongGCDisruption(random(), oldMasterNode, 100, 200, 30000, 60000)__        internalCluster().setDisruptionScheme(masterNodeDisruption)__        masterNodeDisruption.startDisrupting()___        Set<String> oldNonMasterNodesSet = new HashSet<>(nodes)__        oldNonMasterNodesSet.remove(oldMasterNode)___        List<String> oldNonMasterNodes = new ArrayList<>(oldNonMasterNodesSet)___        logger.info("waiting for nodes to de-elect master [{}]", oldMasterNode)__        for (String node : oldNonMasterNodesSet) {_            assertDifferentMaster(node, oldMasterNode)__        }__        logger.info("waiting for nodes to elect a new master")__        ensureStableCluster(2, oldNonMasterNodes.get(0))___        logger.info("waiting for any pinging to stop")__        assertDiscoveryCompleted(oldNonMasterNodes)___        _        masterNodeDisruption.stopDisrupting()__        final TimeValue waitTime = new TimeValue(DISRUPTION_HEALING_OVERHEAD.millis() + masterNodeDisruption.expectedTimeToHeal().millis())__        ensureStableCluster(3, waitTime, false, oldNonMasterNodes.get(0))___        _        String newMaster = internalCluster().getMasterName()__        assertThat(newMaster, not(equalTo(oldMasterNode)))__        assertMaster(newMaster, nodes)__    };test,that,cluster,recovers,from,a,long,gc,on,master,that,causes,other,nodes,to,elect,a,new,one;public,void,test,master,node,gcs,throws,exception,list,string,nodes,start,cluster,3,string,old,master,node,internal,cluster,get,master,name,single,node,disruption,master,node,disruption,new,intermittent,long,gcdisruption,random,old,master,node,100,200,30000,60000,internal,cluster,set,disruption,scheme,master,node,disruption,master,node,disruption,start,disrupting,set,string,old,non,master,nodes,set,new,hash,set,nodes,old,non,master,nodes,set,remove,old,master,node,list,string,old,non,master,nodes,new,array,list,old,non,master,nodes,set,logger,info,waiting,for,nodes,to,de,elect,master,old,master,node,for,string,node,old,non,master,nodes,set,assert,different,master,node,old,master,node,logger,info,waiting,for,nodes,to,elect,a,new,master,ensure,stable,cluster,2,old,non,master,nodes,get,0,logger,info,waiting,for,any,pinging,to,stop,assert,discovery,completed,old,non,master,nodes,master,node,disruption,stop,disrupting,final,time,value,wait,time,new,time,value,millis,master,node,disruption,expected,time,to,heal,millis,ensure,stable,cluster,3,wait,time,false,old,non,master,nodes,get,0,string,new,master,internal,cluster,get,master,name,assert,that,new,master,not,equal,to,old,master,node,assert,master,new,master,nodes
MasterDisruptionIT -> public void testMasterNodeGCs() throws Exception;1544619154;Test that cluster recovers from a long GC on master that causes other nodes to elect a new one;public void testMasterNodeGCs() throws Exception {_        List<String> nodes = startCluster(3)___        String oldMasterNode = internalCluster().getMasterName()__        _        SingleNodeDisruption masterNodeDisruption = new IntermittentLongGCDisruption(random(), oldMasterNode, 100, 200, 30000, 60000)__        internalCluster().setDisruptionScheme(masterNodeDisruption)__        masterNodeDisruption.startDisrupting()___        Set<String> oldNonMasterNodesSet = new HashSet<>(nodes)__        oldNonMasterNodesSet.remove(oldMasterNode)___        List<String> oldNonMasterNodes = new ArrayList<>(oldNonMasterNodesSet)___        logger.info("waiting for nodes to de-elect master [{}]", oldMasterNode)__        for (String node : oldNonMasterNodesSet) {_            assertDifferentMaster(node, oldMasterNode)__        }__        logger.info("waiting for nodes to elect a new master")__        ensureStableCluster(2, oldNonMasterNodes.get(0))___        logger.info("waiting for any pinging to stop")__        assertDiscoveryCompleted(oldNonMasterNodes)___        _        masterNodeDisruption.stopDisrupting()__        final TimeValue waitTime = new TimeValue(DISRUPTION_HEALING_OVERHEAD.millis() + masterNodeDisruption.expectedTimeToHeal().millis())__        ensureStableCluster(3, waitTime, false, oldNonMasterNodes.get(0))___        _        String newMaster = internalCluster().getMasterName()__        assertThat(newMaster, not(equalTo(oldMasterNode)))__        assertMaster(newMaster, nodes)__    };test,that,cluster,recovers,from,a,long,gc,on,master,that,causes,other,nodes,to,elect,a,new,one;public,void,test,master,node,gcs,throws,exception,list,string,nodes,start,cluster,3,string,old,master,node,internal,cluster,get,master,name,single,node,disruption,master,node,disruption,new,intermittent,long,gcdisruption,random,old,master,node,100,200,30000,60000,internal,cluster,set,disruption,scheme,master,node,disruption,master,node,disruption,start,disrupting,set,string,old,non,master,nodes,set,new,hash,set,nodes,old,non,master,nodes,set,remove,old,master,node,list,string,old,non,master,nodes,new,array,list,old,non,master,nodes,set,logger,info,waiting,for,nodes,to,de,elect,master,old,master,node,for,string,node,old,non,master,nodes,set,assert,different,master,node,old,master,node,logger,info,waiting,for,nodes,to,elect,a,new,master,ensure,stable,cluster,2,old,non,master,nodes,get,0,logger,info,waiting,for,any,pinging,to,stop,assert,discovery,completed,old,non,master,nodes,master,node,disruption,stop,disrupting,final,time,value,wait,time,new,time,value,millis,master,node,disruption,expected,time,to,heal,millis,ensure,stable,cluster,3,wait,time,false,old,non,master,nodes,get,0,string,new,master,internal,cluster,get,master,name,assert,that,new,master,not,equal,to,old,master,node,assert,master,new,master,nodes
MasterDisruptionIT -> public void testMasterNodeGCs() throws Exception;1545035674;Test that cluster recovers from a long GC on master that causes other nodes to elect a new one;public void testMasterNodeGCs() throws Exception {_        List<String> nodes = startCluster(3)___        String oldMasterNode = internalCluster().getMasterName()__        _        SingleNodeDisruption masterNodeDisruption = new IntermittentLongGCDisruption(random(), oldMasterNode, 100, 200, 30000, 60000)__        internalCluster().setDisruptionScheme(masterNodeDisruption)__        masterNodeDisruption.startDisrupting()___        Set<String> oldNonMasterNodesSet = new HashSet<>(nodes)__        oldNonMasterNodesSet.remove(oldMasterNode)___        List<String> oldNonMasterNodes = new ArrayList<>(oldNonMasterNodesSet)___        logger.info("waiting for nodes to de-elect master [{}]", oldMasterNode)__        for (String node : oldNonMasterNodesSet) {_            assertDifferentMaster(node, oldMasterNode)__        }__        logger.info("waiting for nodes to elect a new master")__        ensureStableCluster(2, oldNonMasterNodes.get(0))___        logger.info("waiting for any pinging to stop")__        assertDiscoveryCompleted(oldNonMasterNodes)___        _        masterNodeDisruption.stopDisrupting()__        final TimeValue waitTime = new TimeValue(DISRUPTION_HEALING_OVERHEAD.millis() + masterNodeDisruption.expectedTimeToHeal().millis())__        ensureStableCluster(3, waitTime, false, oldNonMasterNodes.get(0))___        _        String newMaster = internalCluster().getMasterName()__        assertThat(newMaster, not(equalTo(oldMasterNode)))__        assertMaster(newMaster, nodes)__    };test,that,cluster,recovers,from,a,long,gc,on,master,that,causes,other,nodes,to,elect,a,new,one;public,void,test,master,node,gcs,throws,exception,list,string,nodes,start,cluster,3,string,old,master,node,internal,cluster,get,master,name,single,node,disruption,master,node,disruption,new,intermittent,long,gcdisruption,random,old,master,node,100,200,30000,60000,internal,cluster,set,disruption,scheme,master,node,disruption,master,node,disruption,start,disrupting,set,string,old,non,master,nodes,set,new,hash,set,nodes,old,non,master,nodes,set,remove,old,master,node,list,string,old,non,master,nodes,new,array,list,old,non,master,nodes,set,logger,info,waiting,for,nodes,to,de,elect,master,old,master,node,for,string,node,old,non,master,nodes,set,assert,different,master,node,old,master,node,logger,info,waiting,for,nodes,to,elect,a,new,master,ensure,stable,cluster,2,old,non,master,nodes,get,0,logger,info,waiting,for,any,pinging,to,stop,assert,discovery,completed,old,non,master,nodes,master,node,disruption,stop,disrupting,final,time,value,wait,time,new,time,value,millis,master,node,disruption,expected,time,to,heal,millis,ensure,stable,cluster,3,wait,time,false,old,non,master,nodes,get,0,string,new,master,internal,cluster,get,master,name,assert,that,new,master,not,equal,to,old,master,node,assert,master,new,master,nodes
MasterDisruptionIT -> public void testMasterNodeGCs() throws Exception;1548878955;Test that cluster recovers from a long GC on master that causes other nodes to elect a new one;public void testMasterNodeGCs() throws Exception {_        List<String> nodes = startCluster(3)___        String oldMasterNode = internalCluster().getMasterName()__        _        SingleNodeDisruption masterNodeDisruption = new IntermittentLongGCDisruption(random(), oldMasterNode, 100, 200, 30000, 60000)__        internalCluster().setDisruptionScheme(masterNodeDisruption)__        masterNodeDisruption.startDisrupting()___        Set<String> oldNonMasterNodesSet = new HashSet<>(nodes)__        oldNonMasterNodesSet.remove(oldMasterNode)___        List<String> oldNonMasterNodes = new ArrayList<>(oldNonMasterNodesSet)___        logger.info("waiting for nodes to de-elect master [{}]", oldMasterNode)__        for (String node : oldNonMasterNodesSet) {_            assertDifferentMaster(node, oldMasterNode)__        }__        logger.info("waiting for nodes to elect a new master")__        ensureStableCluster(2, oldNonMasterNodes.get(0))___        logger.info("waiting for any pinging to stop")__        assertDiscoveryCompleted(oldNonMasterNodes)___        _        masterNodeDisruption.stopDisrupting()__        final TimeValue waitTime = new TimeValue(DISRUPTION_HEALING_OVERHEAD.millis() + masterNodeDisruption.expectedTimeToHeal().millis())__        ensureStableCluster(3, waitTime, false, oldNonMasterNodes.get(0))___        _        String newMaster = internalCluster().getMasterName()__        assertThat(newMaster, not(equalTo(oldMasterNode)))__        assertMaster(newMaster, nodes)__    };test,that,cluster,recovers,from,a,long,gc,on,master,that,causes,other,nodes,to,elect,a,new,one;public,void,test,master,node,gcs,throws,exception,list,string,nodes,start,cluster,3,string,old,master,node,internal,cluster,get,master,name,single,node,disruption,master,node,disruption,new,intermittent,long,gcdisruption,random,old,master,node,100,200,30000,60000,internal,cluster,set,disruption,scheme,master,node,disruption,master,node,disruption,start,disrupting,set,string,old,non,master,nodes,set,new,hash,set,nodes,old,non,master,nodes,set,remove,old,master,node,list,string,old,non,master,nodes,new,array,list,old,non,master,nodes,set,logger,info,waiting,for,nodes,to,de,elect,master,old,master,node,for,string,node,old,non,master,nodes,set,assert,different,master,node,old,master,node,logger,info,waiting,for,nodes,to,elect,a,new,master,ensure,stable,cluster,2,old,non,master,nodes,get,0,logger,info,waiting,for,any,pinging,to,stop,assert,discovery,completed,old,non,master,nodes,master,node,disruption,stop,disrupting,final,time,value,wait,time,new,time,value,millis,master,node,disruption,expected,time,to,heal,millis,ensure,stable,cluster,3,wait,time,false,old,non,master,nodes,get,0,string,new,master,internal,cluster,get,master,name,assert,that,new,master,not,equal,to,old,master,node,assert,master,new,master,nodes
MasterDisruptionIT -> public void testMasterNodeGCs() throws Exception;1549008649;Test that cluster recovers from a long GC on master that causes other nodes to elect a new one;public void testMasterNodeGCs() throws Exception {_        List<String> nodes = startCluster(3)___        String oldMasterNode = internalCluster().getMasterName()__        _        SingleNodeDisruption masterNodeDisruption = new IntermittentLongGCDisruption(random(), oldMasterNode, 100, 200, 30000, 60000)__        internalCluster().setDisruptionScheme(masterNodeDisruption)__        masterNodeDisruption.startDisrupting()___        Set<String> oldNonMasterNodesSet = new HashSet<>(nodes)__        oldNonMasterNodesSet.remove(oldMasterNode)___        List<String> oldNonMasterNodes = new ArrayList<>(oldNonMasterNodesSet)___        logger.info("waiting for nodes to de-elect master [{}]", oldMasterNode)__        for (String node : oldNonMasterNodesSet) {_            assertDifferentMaster(node, oldMasterNode)__        }__        logger.info("waiting for nodes to elect a new master")__        ensureStableCluster(2, oldNonMasterNodes.get(0))___        logger.info("waiting for any pinging to stop")__        assertDiscoveryCompleted(oldNonMasterNodes)___        _        masterNodeDisruption.stopDisrupting()__        final TimeValue waitTime = new TimeValue(DISRUPTION_HEALING_OVERHEAD.millis() + masterNodeDisruption.expectedTimeToHeal().millis())__        ensureStableCluster(3, waitTime, false, oldNonMasterNodes.get(0))___        _        String newMaster = internalCluster().getMasterName()__        assertThat(newMaster, not(equalTo(oldMasterNode)))__        assertMaster(newMaster, nodes)__    };test,that,cluster,recovers,from,a,long,gc,on,master,that,causes,other,nodes,to,elect,a,new,one;public,void,test,master,node,gcs,throws,exception,list,string,nodes,start,cluster,3,string,old,master,node,internal,cluster,get,master,name,single,node,disruption,master,node,disruption,new,intermittent,long,gcdisruption,random,old,master,node,100,200,30000,60000,internal,cluster,set,disruption,scheme,master,node,disruption,master,node,disruption,start,disrupting,set,string,old,non,master,nodes,set,new,hash,set,nodes,old,non,master,nodes,set,remove,old,master,node,list,string,old,non,master,nodes,new,array,list,old,non,master,nodes,set,logger,info,waiting,for,nodes,to,de,elect,master,old,master,node,for,string,node,old,non,master,nodes,set,assert,different,master,node,old,master,node,logger,info,waiting,for,nodes,to,elect,a,new,master,ensure,stable,cluster,2,old,non,master,nodes,get,0,logger,info,waiting,for,any,pinging,to,stop,assert,discovery,completed,old,non,master,nodes,master,node,disruption,stop,disrupting,final,time,value,wait,time,new,time,value,millis,master,node,disruption,expected,time,to,heal,millis,ensure,stable,cluster,3,wait,time,false,old,non,master,nodes,get,0,string,new,master,internal,cluster,get,master,name,assert,that,new,master,not,equal,to,old,master,node,assert,master,new,master,nodes
MasterDisruptionIT -> public void testMasterNodeGCs() throws Exception;1549356476;Test that cluster recovers from a long GC on master that causes other nodes to elect a new one;public void testMasterNodeGCs() throws Exception {_        List<String> nodes = startCluster(3)___        String oldMasterNode = internalCluster().getMasterName()__        _        SingleNodeDisruption masterNodeDisruption = new IntermittentLongGCDisruption(random(), oldMasterNode, 100, 200, 30000, 60000)__        internalCluster().setDisruptionScheme(masterNodeDisruption)__        masterNodeDisruption.startDisrupting()___        Set<String> oldNonMasterNodesSet = new HashSet<>(nodes)__        oldNonMasterNodesSet.remove(oldMasterNode)___        List<String> oldNonMasterNodes = new ArrayList<>(oldNonMasterNodesSet)___        logger.info("waiting for nodes to de-elect master [{}]", oldMasterNode)__        for (String node : oldNonMasterNodesSet) {_            assertDifferentMaster(node, oldMasterNode)__        }__        logger.info("waiting for nodes to elect a new master")__        ensureStableCluster(2, oldNonMasterNodes.get(0))___        logger.info("waiting for any pinging to stop")__        assertDiscoveryCompleted(oldNonMasterNodes)___        _        masterNodeDisruption.stopDisrupting()__        final TimeValue waitTime = new TimeValue(DISRUPTION_HEALING_OVERHEAD.millis() + masterNodeDisruption.expectedTimeToHeal().millis())__        ensureStableCluster(3, waitTime, false, oldNonMasterNodes.get(0))___        _        String newMaster = internalCluster().getMasterName()__        assertThat(newMaster, not(equalTo(oldMasterNode)))__        assertMaster(newMaster, nodes)__    };test,that,cluster,recovers,from,a,long,gc,on,master,that,causes,other,nodes,to,elect,a,new,one;public,void,test,master,node,gcs,throws,exception,list,string,nodes,start,cluster,3,string,old,master,node,internal,cluster,get,master,name,single,node,disruption,master,node,disruption,new,intermittent,long,gcdisruption,random,old,master,node,100,200,30000,60000,internal,cluster,set,disruption,scheme,master,node,disruption,master,node,disruption,start,disrupting,set,string,old,non,master,nodes,set,new,hash,set,nodes,old,non,master,nodes,set,remove,old,master,node,list,string,old,non,master,nodes,new,array,list,old,non,master,nodes,set,logger,info,waiting,for,nodes,to,de,elect,master,old,master,node,for,string,node,old,non,master,nodes,set,assert,different,master,node,old,master,node,logger,info,waiting,for,nodes,to,elect,a,new,master,ensure,stable,cluster,2,old,non,master,nodes,get,0,logger,info,waiting,for,any,pinging,to,stop,assert,discovery,completed,old,non,master,nodes,master,node,disruption,stop,disrupting,final,time,value,wait,time,new,time,value,millis,master,node,disruption,expected,time,to,heal,millis,ensure,stable,cluster,3,wait,time,false,old,non,master,nodes,get,0,string,new,master,internal,cluster,get,master,name,assert,that,new,master,not,equal,to,old,master,node,assert,master,new,master,nodes
MasterDisruptionIT -> public void testMasterNodeGCs() throws Exception;1549452878;Test that cluster recovers from a long GC on master that causes other nodes to elect a new one;public void testMasterNodeGCs() throws Exception {_        List<String> nodes = startCluster(3)___        String oldMasterNode = internalCluster().getMasterName()__        _        SingleNodeDisruption masterNodeDisruption = new IntermittentLongGCDisruption(random(), oldMasterNode, 100, 200, 30000, 60000)__        internalCluster().setDisruptionScheme(masterNodeDisruption)__        masterNodeDisruption.startDisrupting()___        Set<String> oldNonMasterNodesSet = new HashSet<>(nodes)__        oldNonMasterNodesSet.remove(oldMasterNode)___        List<String> oldNonMasterNodes = new ArrayList<>(oldNonMasterNodesSet)___        logger.info("waiting for nodes to de-elect master [{}]", oldMasterNode)__        for (String node : oldNonMasterNodesSet) {_            assertDifferentMaster(node, oldMasterNode)__        }__        logger.info("waiting for nodes to elect a new master")__        ensureStableCluster(2, oldNonMasterNodes.get(0))___        logger.info("waiting for any pinging to stop")__        assertDiscoveryCompleted(oldNonMasterNodes)___        _        masterNodeDisruption.stopDisrupting()__        final TimeValue waitTime = new TimeValue(DISRUPTION_HEALING_OVERHEAD.millis() + masterNodeDisruption.expectedTimeToHeal().millis())__        ensureStableCluster(3, waitTime, false, oldNonMasterNodes.get(0))___        _        String newMaster = internalCluster().getMasterName()__        assertThat(newMaster, not(equalTo(oldMasterNode)))__        assertMaster(newMaster, nodes)__    };test,that,cluster,recovers,from,a,long,gc,on,master,that,causes,other,nodes,to,elect,a,new,one;public,void,test,master,node,gcs,throws,exception,list,string,nodes,start,cluster,3,string,old,master,node,internal,cluster,get,master,name,single,node,disruption,master,node,disruption,new,intermittent,long,gcdisruption,random,old,master,node,100,200,30000,60000,internal,cluster,set,disruption,scheme,master,node,disruption,master,node,disruption,start,disrupting,set,string,old,non,master,nodes,set,new,hash,set,nodes,old,non,master,nodes,set,remove,old,master,node,list,string,old,non,master,nodes,new,array,list,old,non,master,nodes,set,logger,info,waiting,for,nodes,to,de,elect,master,old,master,node,for,string,node,old,non,master,nodes,set,assert,different,master,node,old,master,node,logger,info,waiting,for,nodes,to,elect,a,new,master,ensure,stable,cluster,2,old,non,master,nodes,get,0,logger,info,waiting,for,any,pinging,to,stop,assert,discovery,completed,old,non,master,nodes,master,node,disruption,stop,disrupting,final,time,value,wait,time,new,time,value,millis,master,node,disruption,expected,time,to,heal,millis,ensure,stable,cluster,3,wait,time,false,old,non,master,nodes,get,0,string,new,master,internal,cluster,get,master,name,assert,that,new,master,not,equal,to,old,master,node,assert,master,new,master,nodes
MasterDisruptionIT -> @TestLogging(             "_root:DEBUG,"                     + "org.elasticsearch.cluster.service:TRACE,"                     + "org.elasticsearch.gateway:TRACE,"                     + "org.elasticsearch.indices.store:TRACE")     public void testIsolateMasterAndVerifyClusterStateConsensus() throws Exception;1524684173;This test isolates the master from rest of the cluster, waits for a new master to be elected, restores the partition_and verifies that all node agree on the new cluster state;@TestLogging(_            "_root:DEBUG,"_                    + "org.elasticsearch.cluster.service:TRACE,"_                    + "org.elasticsearch.gateway:TRACE,"_                    + "org.elasticsearch.indices.store:TRACE")_    public void testIsolateMasterAndVerifyClusterStateConsensus() throws Exception {_        final List<String> nodes = startCluster(3)___        assertAcked(prepareCreate("test")_                .setSettings(Settings.builder()_                        .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1 + randomInt(2))_                        .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, randomInt(2))_                ))___        ensureGreen()__        String isolatedNode = internalCluster().getMasterName()__        TwoPartitions partitions = isolateNode(isolatedNode)__        NetworkDisruption networkDisruption = addRandomDisruptionType(partitions)__        networkDisruption.startDisrupting()___        String nonIsolatedNode = partitions.getMajoritySide().iterator().next()___        _        ensureStableCluster(2, nonIsolatedNode)___        _        assertNoMaster(isolatedNode, TimeValue.timeValueSeconds(40))___        _        networkDisruption.stopDisrupting()___        for (String node : nodes) {_            ensureStableCluster(3, new TimeValue(DISRUPTION_HEALING_OVERHEAD.millis() + networkDisruption.expectedTimeToHeal().millis()),_                    true, node)__        }__        logger.info("issue a reroute")__        _        assertAcked(client().admin().cluster().prepareReroute())__        _        ensureGreen("test")___        _        _        assertBusy(() -> {_            ClusterState state = null__            for (String node : nodes) {_                ClusterState nodeState = getNodeClusterState(node)__                if (state == null) {_                    state = nodeState__                    continue__                }_                _                try {_                    assertEquals("unequal versions", state.version(), nodeState.version())__                    assertEquals("unequal node count", state.nodes().getSize(), nodeState.nodes().getSize())__                    assertEquals("different masters ", state.nodes().getMasterNodeId(), nodeState.nodes().getMasterNodeId())__                    assertEquals("different meta data version", state.metaData().version(), nodeState.metaData().version())__                    assertEquals("different routing", state.routingTable().toString(), nodeState.routingTable().toString())__                } catch (AssertionError t) {_                    fail("failed comparing cluster state: " + t.getMessage() + "\n" +_                            "--- cluster state of node [" + nodes.get(0) + "]: ---\n" + state +_                            "\n--- cluster state [" + node + "]: ---\n" + nodeState)__                }__            }_        })__    };this,test,isolates,the,master,from,rest,of,the,cluster,waits,for,a,new,master,to,be,elected,restores,the,partition,and,verifies,that,all,node,agree,on,the,new,cluster,state;test,logging,debug,org,elasticsearch,cluster,service,trace,org,elasticsearch,gateway,trace,org,elasticsearch,indices,store,trace,public,void,test,isolate,master,and,verify,cluster,state,consensus,throws,exception,final,list,string,nodes,start,cluster,3,assert,acked,prepare,create,test,set,settings,settings,builder,put,index,meta,data,1,random,int,2,put,index,meta,data,random,int,2,ensure,green,string,isolated,node,internal,cluster,get,master,name,two,partitions,partitions,isolate,node,isolated,node,network,disruption,network,disruption,add,random,disruption,type,partitions,network,disruption,start,disrupting,string,non,isolated,node,partitions,get,majority,side,iterator,next,ensure,stable,cluster,2,non,isolated,node,assert,no,master,isolated,node,time,value,time,value,seconds,40,network,disruption,stop,disrupting,for,string,node,nodes,ensure,stable,cluster,3,new,time,value,millis,network,disruption,expected,time,to,heal,millis,true,node,logger,info,issue,a,reroute,assert,acked,client,admin,cluster,prepare,reroute,ensure,green,test,assert,busy,cluster,state,state,null,for,string,node,nodes,cluster,state,node,state,get,node,cluster,state,node,if,state,null,state,node,state,continue,try,assert,equals,unequal,versions,state,version,node,state,version,assert,equals,unequal,node,count,state,nodes,get,size,node,state,nodes,get,size,assert,equals,different,masters,state,nodes,get,master,node,id,node,state,nodes,get,master,node,id,assert,equals,different,meta,data,version,state,meta,data,version,node,state,meta,data,version,assert,equals,different,routing,state,routing,table,to,string,node,state,routing,table,to,string,catch,assertion,error,t,fail,failed,comparing,cluster,state,t,get,message,n,cluster,state,of,node,nodes,get,0,n,state,n,cluster,state,node,n,node,state
MasterDisruptionIT -> @TestLogging(             "_root:DEBUG,"                     + "org.elasticsearch.cluster.service:TRACE,"                     + "org.elasticsearch.gateway:TRACE,"                     + "org.elasticsearch.indices.store:TRACE")     public void testIsolateMasterAndVerifyClusterStateConsensus() throws Exception;1525162917;This test isolates the master from rest of the cluster, waits for a new master to be elected, restores the partition_and verifies that all node agree on the new cluster state;@TestLogging(_            "_root:DEBUG,"_                    + "org.elasticsearch.cluster.service:TRACE,"_                    + "org.elasticsearch.gateway:TRACE,"_                    + "org.elasticsearch.indices.store:TRACE")_    public void testIsolateMasterAndVerifyClusterStateConsensus() throws Exception {_        final List<String> nodes = startCluster(3)___        assertAcked(prepareCreate("test")_                .setSettings(Settings.builder()_                        .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1 + randomInt(2))_                        .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, randomInt(2))_                ))___        ensureGreen()__        String isolatedNode = internalCluster().getMasterName()__        TwoPartitions partitions = isolateNode(isolatedNode)__        NetworkDisruption networkDisruption = addRandomDisruptionType(partitions)__        networkDisruption.startDisrupting()___        String nonIsolatedNode = partitions.getMajoritySide().iterator().next()___        _        ensureStableCluster(2, nonIsolatedNode)___        _        assertNoMaster(isolatedNode, TimeValue.timeValueSeconds(40))___        _        networkDisruption.stopDisrupting()___        for (String node : nodes) {_            ensureStableCluster(3, new TimeValue(DISRUPTION_HEALING_OVERHEAD.millis() + networkDisruption.expectedTimeToHeal().millis()),_                    true, node)__        }__        logger.info("issue a reroute")__        _        assertAcked(client().admin().cluster().prepareReroute())__        _        ensureGreen("test")___        _        _        assertBusy(() -> {_            ClusterState state = null__            for (String node : nodes) {_                ClusterState nodeState = getNodeClusterState(node)__                if (state == null) {_                    state = nodeState__                    continue__                }_                _                try {_                    assertEquals("unequal versions", state.version(), nodeState.version())__                    assertEquals("unequal node count", state.nodes().getSize(), nodeState.nodes().getSize())__                    assertEquals("different masters ", state.nodes().getMasterNodeId(), nodeState.nodes().getMasterNodeId())__                    assertEquals("different meta data version", state.metaData().version(), nodeState.metaData().version())__                    assertEquals("different routing", state.routingTable().toString(), nodeState.routingTable().toString())__                } catch (AssertionError t) {_                    fail("failed comparing cluster state: " + t.getMessage() + "\n" +_                            "--- cluster state of node [" + nodes.get(0) + "]: ---\n" + state +_                            "\n--- cluster state [" + node + "]: ---\n" + nodeState)__                }__            }_        })__    };this,test,isolates,the,master,from,rest,of,the,cluster,waits,for,a,new,master,to,be,elected,restores,the,partition,and,verifies,that,all,node,agree,on,the,new,cluster,state;test,logging,debug,org,elasticsearch,cluster,service,trace,org,elasticsearch,gateway,trace,org,elasticsearch,indices,store,trace,public,void,test,isolate,master,and,verify,cluster,state,consensus,throws,exception,final,list,string,nodes,start,cluster,3,assert,acked,prepare,create,test,set,settings,settings,builder,put,index,meta,data,1,random,int,2,put,index,meta,data,random,int,2,ensure,green,string,isolated,node,internal,cluster,get,master,name,two,partitions,partitions,isolate,node,isolated,node,network,disruption,network,disruption,add,random,disruption,type,partitions,network,disruption,start,disrupting,string,non,isolated,node,partitions,get,majority,side,iterator,next,ensure,stable,cluster,2,non,isolated,node,assert,no,master,isolated,node,time,value,time,value,seconds,40,network,disruption,stop,disrupting,for,string,node,nodes,ensure,stable,cluster,3,new,time,value,millis,network,disruption,expected,time,to,heal,millis,true,node,logger,info,issue,a,reroute,assert,acked,client,admin,cluster,prepare,reroute,ensure,green,test,assert,busy,cluster,state,state,null,for,string,node,nodes,cluster,state,node,state,get,node,cluster,state,node,if,state,null,state,node,state,continue,try,assert,equals,unequal,versions,state,version,node,state,version,assert,equals,unequal,node,count,state,nodes,get,size,node,state,nodes,get,size,assert,equals,different,masters,state,nodes,get,master,node,id,node,state,nodes,get,master,node,id,assert,equals,different,meta,data,version,state,meta,data,version,node,state,meta,data,version,assert,equals,different,routing,state,routing,table,to,string,node,state,routing,table,to,string,catch,assertion,error,t,fail,failed,comparing,cluster,state,t,get,message,n,cluster,state,of,node,nodes,get,0,n,state,n,cluster,state,node,n,node,state
MasterDisruptionIT -> @TestLogging(             "_root:DEBUG,"                     + "org.elasticsearch.cluster.service:TRACE,"                     + "org.elasticsearch.gateway:TRACE,"                     + "org.elasticsearch.indices.store:TRACE")     public void testIsolateMasterAndVerifyClusterStateConsensus() throws Exception;1541008027;This test isolates the master from rest of the cluster, waits for a new master to be elected, restores the partition_and verifies that all node agree on the new cluster state;@TestLogging(_            "_root:DEBUG,"_                    + "org.elasticsearch.cluster.service:TRACE,"_                    + "org.elasticsearch.gateway:TRACE,"_                    + "org.elasticsearch.indices.store:TRACE")_    public void testIsolateMasterAndVerifyClusterStateConsensus() throws Exception {_        final List<String> nodes = startCluster(3)___        assertAcked(prepareCreate("test")_                .setSettings(Settings.builder()_                        .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1 + randomInt(2))_                        .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, randomInt(2))_                ))___        ensureGreen()__        String isolatedNode = internalCluster().getMasterName()__        TwoPartitions partitions = isolateNode(isolatedNode)__        NetworkDisruption networkDisruption = addRandomDisruptionType(partitions)__        networkDisruption.startDisrupting()___        String nonIsolatedNode = partitions.getMajoritySide().iterator().next()___        _        ensureStableCluster(2, nonIsolatedNode)___        _        assertNoMaster(isolatedNode, TimeValue.timeValueSeconds(40))___        _        networkDisruption.stopDisrupting()___        for (String node : nodes) {_            ensureStableCluster(3, new TimeValue(DISRUPTION_HEALING_OVERHEAD.millis() + networkDisruption.expectedTimeToHeal().millis()),_                    true, node)__        }__        logger.info("issue a reroute")__        _        assertAcked(client().admin().cluster().prepareReroute())__        _        ensureGreen("test")___        _        _        assertBusy(() -> {_            ClusterState state = null__            for (String node : nodes) {_                ClusterState nodeState = getNodeClusterState(node)__                if (state == null) {_                    state = nodeState__                    continue__                }_                _                try {_                    assertEquals("unequal versions", state.version(), nodeState.version())__                    assertEquals("unequal node count", state.nodes().getSize(), nodeState.nodes().getSize())__                    assertEquals("different masters ", state.nodes().getMasterNodeId(), nodeState.nodes().getMasterNodeId())__                    assertEquals("different meta data version", state.metaData().version(), nodeState.metaData().version())__                    assertEquals("different routing", state.routingTable().toString(), nodeState.routingTable().toString())__                } catch (AssertionError t) {_                    fail("failed comparing cluster state: " + t.getMessage() + "\n" +_                            "--- cluster state of node [" + nodes.get(0) + "]: ---\n" + state +_                            "\n--- cluster state [" + node + "]: ---\n" + nodeState)__                }__            }_        })__    };this,test,isolates,the,master,from,rest,of,the,cluster,waits,for,a,new,master,to,be,elected,restores,the,partition,and,verifies,that,all,node,agree,on,the,new,cluster,state;test,logging,debug,org,elasticsearch,cluster,service,trace,org,elasticsearch,gateway,trace,org,elasticsearch,indices,store,trace,public,void,test,isolate,master,and,verify,cluster,state,consensus,throws,exception,final,list,string,nodes,start,cluster,3,assert,acked,prepare,create,test,set,settings,settings,builder,put,index,meta,data,1,random,int,2,put,index,meta,data,random,int,2,ensure,green,string,isolated,node,internal,cluster,get,master,name,two,partitions,partitions,isolate,node,isolated,node,network,disruption,network,disruption,add,random,disruption,type,partitions,network,disruption,start,disrupting,string,non,isolated,node,partitions,get,majority,side,iterator,next,ensure,stable,cluster,2,non,isolated,node,assert,no,master,isolated,node,time,value,time,value,seconds,40,network,disruption,stop,disrupting,for,string,node,nodes,ensure,stable,cluster,3,new,time,value,millis,network,disruption,expected,time,to,heal,millis,true,node,logger,info,issue,a,reroute,assert,acked,client,admin,cluster,prepare,reroute,ensure,green,test,assert,busy,cluster,state,state,null,for,string,node,nodes,cluster,state,node,state,get,node,cluster,state,node,if,state,null,state,node,state,continue,try,assert,equals,unequal,versions,state,version,node,state,version,assert,equals,unequal,node,count,state,nodes,get,size,node,state,nodes,get,size,assert,equals,different,masters,state,nodes,get,master,node,id,node,state,nodes,get,master,node,id,assert,equals,different,meta,data,version,state,meta,data,version,node,state,meta,data,version,assert,equals,different,routing,state,routing,table,to,string,node,state,routing,table,to,string,catch,assertion,error,t,fail,failed,comparing,cluster,state,t,get,message,n,cluster,state,of,node,nodes,get,0,n,state,n,cluster,state,node,n,node,state
MasterDisruptionIT -> @TestLogging(             "_root:DEBUG,"                     + "org.elasticsearch.cluster.service:TRACE,"                     + "org.elasticsearch.gateway:TRACE,"                     + "org.elasticsearch.indices.store:TRACE")     public void testIsolateMasterAndVerifyClusterStateConsensus() throws Exception;1544081506;This test isolates the master from rest of the cluster, waits for a new master to be elected, restores the partition_and verifies that all node agree on the new cluster state;@TestLogging(_            "_root:DEBUG,"_                    + "org.elasticsearch.cluster.service:TRACE,"_                    + "org.elasticsearch.gateway:TRACE,"_                    + "org.elasticsearch.indices.store:TRACE")_    public void testIsolateMasterAndVerifyClusterStateConsensus() throws Exception {_        final List<String> nodes = startCluster(3)___        assertAcked(prepareCreate("test")_                .setSettings(Settings.builder()_                        .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1 + randomInt(2))_                        .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, randomInt(2))_                ))___        ensureGreen()__        String isolatedNode = internalCluster().getMasterName()__        TwoPartitions partitions = isolateNode(isolatedNode)__        NetworkDisruption networkDisruption = addRandomDisruptionType(partitions)__        networkDisruption.startDisrupting()___        String nonIsolatedNode = partitions.getMajoritySide().iterator().next()___        _        ensureStableCluster(2, nonIsolatedNode)___        _        assertNoMaster(isolatedNode, TimeValue.timeValueSeconds(40))___        _        networkDisruption.stopDisrupting()___        for (String node : nodes) {_            ensureStableCluster(3, new TimeValue(DISRUPTION_HEALING_OVERHEAD.millis() + networkDisruption.expectedTimeToHeal().millis()),_                    true, node)__        }__        logger.info("issue a reroute")__        _        assertAcked(client().admin().cluster().prepareReroute())__        _        ensureGreen("test")___        _        _        assertBusy(() -> {_            ClusterState state = null__            for (String node : nodes) {_                ClusterState nodeState = getNodeClusterState(node)__                if (state == null) {_                    state = nodeState__                    continue__                }_                _                try {_                    assertEquals("unequal versions", state.version(), nodeState.version())__                    assertEquals("unequal node count", state.nodes().getSize(), nodeState.nodes().getSize())__                    assertEquals("different masters ", state.nodes().getMasterNodeId(), nodeState.nodes().getMasterNodeId())__                    assertEquals("different meta data version", state.metaData().version(), nodeState.metaData().version())__                    assertEquals("different routing", state.routingTable().toString(), nodeState.routingTable().toString())__                } catch (AssertionError t) {_                    fail("failed comparing cluster state: " + t.getMessage() + "\n" +_                            "--- cluster state of node [" + nodes.get(0) + "]: ---\n" + state +_                            "\n--- cluster state [" + node + "]: ---\n" + nodeState)__                }__            }_        })__    };this,test,isolates,the,master,from,rest,of,the,cluster,waits,for,a,new,master,to,be,elected,restores,the,partition,and,verifies,that,all,node,agree,on,the,new,cluster,state;test,logging,debug,org,elasticsearch,cluster,service,trace,org,elasticsearch,gateway,trace,org,elasticsearch,indices,store,trace,public,void,test,isolate,master,and,verify,cluster,state,consensus,throws,exception,final,list,string,nodes,start,cluster,3,assert,acked,prepare,create,test,set,settings,settings,builder,put,index,meta,data,1,random,int,2,put,index,meta,data,random,int,2,ensure,green,string,isolated,node,internal,cluster,get,master,name,two,partitions,partitions,isolate,node,isolated,node,network,disruption,network,disruption,add,random,disruption,type,partitions,network,disruption,start,disrupting,string,non,isolated,node,partitions,get,majority,side,iterator,next,ensure,stable,cluster,2,non,isolated,node,assert,no,master,isolated,node,time,value,time,value,seconds,40,network,disruption,stop,disrupting,for,string,node,nodes,ensure,stable,cluster,3,new,time,value,millis,network,disruption,expected,time,to,heal,millis,true,node,logger,info,issue,a,reroute,assert,acked,client,admin,cluster,prepare,reroute,ensure,green,test,assert,busy,cluster,state,state,null,for,string,node,nodes,cluster,state,node,state,get,node,cluster,state,node,if,state,null,state,node,state,continue,try,assert,equals,unequal,versions,state,version,node,state,version,assert,equals,unequal,node,count,state,nodes,get,size,node,state,nodes,get,size,assert,equals,different,masters,state,nodes,get,master,node,id,node,state,nodes,get,master,node,id,assert,equals,different,meta,data,version,state,meta,data,version,node,state,meta,data,version,assert,equals,different,routing,state,routing,table,to,string,node,state,routing,table,to,string,catch,assertion,error,t,fail,failed,comparing,cluster,state,t,get,message,n,cluster,state,of,node,nodes,get,0,n,state,n,cluster,state,node,n,node,state
MasterDisruptionIT -> @TestLogging(             "_root:DEBUG,"                     + "org.elasticsearch.cluster.service:TRACE,"                     + "org.elasticsearch.gateway:TRACE,"                     + "org.elasticsearch.indices.store:TRACE")     public void testIsolateMasterAndVerifyClusterStateConsensus() throws Exception;1544619154;This test isolates the master from rest of the cluster, waits for a new master to be elected, restores the partition_and verifies that all node agree on the new cluster state;@TestLogging(_            "_root:DEBUG,"_                    + "org.elasticsearch.cluster.service:TRACE,"_                    + "org.elasticsearch.gateway:TRACE,"_                    + "org.elasticsearch.indices.store:TRACE")_    public void testIsolateMasterAndVerifyClusterStateConsensus() throws Exception {_        final List<String> nodes = startCluster(3)___        assertAcked(prepareCreate("test")_                .setSettings(Settings.builder()_                        .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1 + randomInt(2))_                        .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, randomInt(2))_                ))___        ensureGreen()__        String isolatedNode = internalCluster().getMasterName()__        TwoPartitions partitions = isolateNode(isolatedNode)__        NetworkDisruption networkDisruption = addRandomDisruptionType(partitions)__        networkDisruption.startDisrupting()___        String nonIsolatedNode = partitions.getMajoritySide().iterator().next()___        _        ensureStableCluster(2, nonIsolatedNode)___        _        assertNoMaster(isolatedNode, TimeValue.timeValueSeconds(40))___        _        networkDisruption.stopDisrupting()___        for (String node : nodes) {_            ensureStableCluster(3, new TimeValue(DISRUPTION_HEALING_OVERHEAD.millis() + networkDisruption.expectedTimeToHeal().millis()),_                    true, node)__        }__        logger.info("issue a reroute")__        _        assertAcked(client().admin().cluster().prepareReroute())__        _        ensureGreen("test")___        _        _        assertBusy(() -> {_            ClusterState state = null__            for (String node : nodes) {_                ClusterState nodeState = getNodeClusterState(node)__                if (state == null) {_                    state = nodeState__                    continue__                }_                _                try {_                    assertEquals("unequal versions", state.version(), nodeState.version())__                    assertEquals("unequal node count", state.nodes().getSize(), nodeState.nodes().getSize())__                    assertEquals("different masters ", state.nodes().getMasterNodeId(), nodeState.nodes().getMasterNodeId())__                    assertEquals("different meta data version", state.metaData().version(), nodeState.metaData().version())__                    assertEquals("different routing", state.routingTable().toString(), nodeState.routingTable().toString())__                } catch (AssertionError t) {_                    fail("failed comparing cluster state: " + t.getMessage() + "\n" +_                            "--- cluster state of node [" + nodes.get(0) + "]: ---\n" + state +_                            "\n--- cluster state [" + node + "]: ---\n" + nodeState)__                }__            }_        })__    };this,test,isolates,the,master,from,rest,of,the,cluster,waits,for,a,new,master,to,be,elected,restores,the,partition,and,verifies,that,all,node,agree,on,the,new,cluster,state;test,logging,debug,org,elasticsearch,cluster,service,trace,org,elasticsearch,gateway,trace,org,elasticsearch,indices,store,trace,public,void,test,isolate,master,and,verify,cluster,state,consensus,throws,exception,final,list,string,nodes,start,cluster,3,assert,acked,prepare,create,test,set,settings,settings,builder,put,index,meta,data,1,random,int,2,put,index,meta,data,random,int,2,ensure,green,string,isolated,node,internal,cluster,get,master,name,two,partitions,partitions,isolate,node,isolated,node,network,disruption,network,disruption,add,random,disruption,type,partitions,network,disruption,start,disrupting,string,non,isolated,node,partitions,get,majority,side,iterator,next,ensure,stable,cluster,2,non,isolated,node,assert,no,master,isolated,node,time,value,time,value,seconds,40,network,disruption,stop,disrupting,for,string,node,nodes,ensure,stable,cluster,3,new,time,value,millis,network,disruption,expected,time,to,heal,millis,true,node,logger,info,issue,a,reroute,assert,acked,client,admin,cluster,prepare,reroute,ensure,green,test,assert,busy,cluster,state,state,null,for,string,node,nodes,cluster,state,node,state,get,node,cluster,state,node,if,state,null,state,node,state,continue,try,assert,equals,unequal,versions,state,version,node,state,version,assert,equals,unequal,node,count,state,nodes,get,size,node,state,nodes,get,size,assert,equals,different,masters,state,nodes,get,master,node,id,node,state,nodes,get,master,node,id,assert,equals,different,meta,data,version,state,meta,data,version,node,state,meta,data,version,assert,equals,different,routing,state,routing,table,to,string,node,state,routing,table,to,string,catch,assertion,error,t,fail,failed,comparing,cluster,state,t,get,message,n,cluster,state,of,node,nodes,get,0,n,state,n,cluster,state,node,n,node,state
MasterDisruptionIT -> @TestLogging(             "_root:DEBUG,"                     + "org.elasticsearch.cluster.service:TRACE,"                     + "org.elasticsearch.gateway:TRACE,"                     + "org.elasticsearch.indices.store:TRACE")     public void testIsolateMasterAndVerifyClusterStateConsensus() throws Exception;1545035674;This test isolates the master from rest of the cluster, waits for a new master to be elected, restores the partition_and verifies that all node agree on the new cluster state;@TestLogging(_            "_root:DEBUG,"_                    + "org.elasticsearch.cluster.service:TRACE,"_                    + "org.elasticsearch.gateway:TRACE,"_                    + "org.elasticsearch.indices.store:TRACE")_    public void testIsolateMasterAndVerifyClusterStateConsensus() throws Exception {_        final List<String> nodes = startCluster(3)___        assertAcked(prepareCreate("test")_                .setSettings(Settings.builder()_                        .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1 + randomInt(2))_                        .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, randomInt(2))_                ))___        ensureGreen()__        String isolatedNode = internalCluster().getMasterName()__        TwoPartitions partitions = isolateNode(isolatedNode)__        NetworkDisruption networkDisruption = addRandomDisruptionType(partitions)__        networkDisruption.startDisrupting()___        String nonIsolatedNode = partitions.getMajoritySide().iterator().next()___        _        ensureStableCluster(2, nonIsolatedNode)___        _        assertNoMaster(isolatedNode, TimeValue.timeValueSeconds(40))___        _        networkDisruption.stopDisrupting()___        for (String node : nodes) {_            ensureStableCluster(3, new TimeValue(DISRUPTION_HEALING_OVERHEAD.millis() + networkDisruption.expectedTimeToHeal().millis()),_                    true, node)__        }__        logger.info("issue a reroute")__        _        assertAcked(client().admin().cluster().prepareReroute())__        _        ensureGreen("test")___        _        _        assertBusy(() -> {_            ClusterState state = null__            for (String node : nodes) {_                ClusterState nodeState = getNodeClusterState(node)__                if (state == null) {_                    state = nodeState__                    continue__                }_                _                try {_                    assertEquals("unequal versions", state.version(), nodeState.version())__                    assertEquals("unequal node count", state.nodes().getSize(), nodeState.nodes().getSize())__                    assertEquals("different masters ", state.nodes().getMasterNodeId(), nodeState.nodes().getMasterNodeId())__                    assertEquals("different meta data version", state.metaData().version(), nodeState.metaData().version())__                    assertEquals("different routing", state.routingTable().toString(), nodeState.routingTable().toString())__                } catch (AssertionError t) {_                    fail("failed comparing cluster state: " + t.getMessage() + "\n" +_                            "--- cluster state of node [" + nodes.get(0) + "]: ---\n" + state +_                            "\n--- cluster state [" + node + "]: ---\n" + nodeState)__                }__            }_        })__    };this,test,isolates,the,master,from,rest,of,the,cluster,waits,for,a,new,master,to,be,elected,restores,the,partition,and,verifies,that,all,node,agree,on,the,new,cluster,state;test,logging,debug,org,elasticsearch,cluster,service,trace,org,elasticsearch,gateway,trace,org,elasticsearch,indices,store,trace,public,void,test,isolate,master,and,verify,cluster,state,consensus,throws,exception,final,list,string,nodes,start,cluster,3,assert,acked,prepare,create,test,set,settings,settings,builder,put,index,meta,data,1,random,int,2,put,index,meta,data,random,int,2,ensure,green,string,isolated,node,internal,cluster,get,master,name,two,partitions,partitions,isolate,node,isolated,node,network,disruption,network,disruption,add,random,disruption,type,partitions,network,disruption,start,disrupting,string,non,isolated,node,partitions,get,majority,side,iterator,next,ensure,stable,cluster,2,non,isolated,node,assert,no,master,isolated,node,time,value,time,value,seconds,40,network,disruption,stop,disrupting,for,string,node,nodes,ensure,stable,cluster,3,new,time,value,millis,network,disruption,expected,time,to,heal,millis,true,node,logger,info,issue,a,reroute,assert,acked,client,admin,cluster,prepare,reroute,ensure,green,test,assert,busy,cluster,state,state,null,for,string,node,nodes,cluster,state,node,state,get,node,cluster,state,node,if,state,null,state,node,state,continue,try,assert,equals,unequal,versions,state,version,node,state,version,assert,equals,unequal,node,count,state,nodes,get,size,node,state,nodes,get,size,assert,equals,different,masters,state,nodes,get,master,node,id,node,state,nodes,get,master,node,id,assert,equals,different,meta,data,version,state,meta,data,version,node,state,meta,data,version,assert,equals,different,routing,state,routing,table,to,string,node,state,routing,table,to,string,catch,assertion,error,t,fail,failed,comparing,cluster,state,t,get,message,n,cluster,state,of,node,nodes,get,0,n,state,n,cluster,state,node,n,node,state
MasterDisruptionIT -> @TestLogging(             "_root:DEBUG,"                     + "org.elasticsearch.cluster.service:TRACE,"                     + "org.elasticsearch.gateway:TRACE,"                     + "org.elasticsearch.indices.store:TRACE")     public void testIsolateMasterAndVerifyClusterStateConsensus() throws Exception;1548878955;This test isolates the master from rest of the cluster, waits for a new master to be elected, restores the partition_and verifies that all node agree on the new cluster state;@TestLogging(_            "_root:DEBUG,"_                    + "org.elasticsearch.cluster.service:TRACE,"_                    + "org.elasticsearch.gateway:TRACE,"_                    + "org.elasticsearch.indices.store:TRACE")_    public void testIsolateMasterAndVerifyClusterStateConsensus() throws Exception {_        final List<String> nodes = startCluster(3)___        assertAcked(prepareCreate("test")_                .setSettings(Settings.builder()_                        .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1 + randomInt(2))_                        .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, randomInt(2))_                ))___        ensureGreen()__        String isolatedNode = internalCluster().getMasterName()__        TwoPartitions partitions = isolateNode(isolatedNode)__        NetworkDisruption networkDisruption = addRandomDisruptionType(partitions)__        networkDisruption.startDisrupting()___        String nonIsolatedNode = partitions.getMajoritySide().iterator().next()___        _        ensureStableCluster(2, nonIsolatedNode)___        _        assertNoMaster(isolatedNode, TimeValue.timeValueSeconds(40))___        _        networkDisruption.stopDisrupting()___        for (String node : nodes) {_            ensureStableCluster(3, new TimeValue(DISRUPTION_HEALING_OVERHEAD.millis() + networkDisruption.expectedTimeToHeal().millis()),_                    true, node)__        }__        logger.info("issue a reroute")__        _        assertAcked(client().admin().cluster().prepareReroute())__        _        ensureGreen("test")___        _        _        assertBusy(() -> {_            ClusterState state = null__            for (String node : nodes) {_                ClusterState nodeState = getNodeClusterState(node)__                if (state == null) {_                    state = nodeState__                    continue__                }_                _                try {_                    assertEquals("unequal versions", state.version(), nodeState.version())__                    assertEquals("unequal node count", state.nodes().getSize(), nodeState.nodes().getSize())__                    assertEquals("different masters ", state.nodes().getMasterNodeId(), nodeState.nodes().getMasterNodeId())__                    assertEquals("different meta data version", state.metaData().version(), nodeState.metaData().version())__                    assertEquals("different routing", state.routingTable().toString(), nodeState.routingTable().toString())__                } catch (AssertionError t) {_                    fail("failed comparing cluster state: " + t.getMessage() + "\n" +_                            "--- cluster state of node [" + nodes.get(0) + "]: ---\n" + state +_                            "\n--- cluster state [" + node + "]: ---\n" + nodeState)__                }__            }_        })__    };this,test,isolates,the,master,from,rest,of,the,cluster,waits,for,a,new,master,to,be,elected,restores,the,partition,and,verifies,that,all,node,agree,on,the,new,cluster,state;test,logging,debug,org,elasticsearch,cluster,service,trace,org,elasticsearch,gateway,trace,org,elasticsearch,indices,store,trace,public,void,test,isolate,master,and,verify,cluster,state,consensus,throws,exception,final,list,string,nodes,start,cluster,3,assert,acked,prepare,create,test,set,settings,settings,builder,put,index,meta,data,1,random,int,2,put,index,meta,data,random,int,2,ensure,green,string,isolated,node,internal,cluster,get,master,name,two,partitions,partitions,isolate,node,isolated,node,network,disruption,network,disruption,add,random,disruption,type,partitions,network,disruption,start,disrupting,string,non,isolated,node,partitions,get,majority,side,iterator,next,ensure,stable,cluster,2,non,isolated,node,assert,no,master,isolated,node,time,value,time,value,seconds,40,network,disruption,stop,disrupting,for,string,node,nodes,ensure,stable,cluster,3,new,time,value,millis,network,disruption,expected,time,to,heal,millis,true,node,logger,info,issue,a,reroute,assert,acked,client,admin,cluster,prepare,reroute,ensure,green,test,assert,busy,cluster,state,state,null,for,string,node,nodes,cluster,state,node,state,get,node,cluster,state,node,if,state,null,state,node,state,continue,try,assert,equals,unequal,versions,state,version,node,state,version,assert,equals,unequal,node,count,state,nodes,get,size,node,state,nodes,get,size,assert,equals,different,masters,state,nodes,get,master,node,id,node,state,nodes,get,master,node,id,assert,equals,different,meta,data,version,state,meta,data,version,node,state,meta,data,version,assert,equals,different,routing,state,routing,table,to,string,node,state,routing,table,to,string,catch,assertion,error,t,fail,failed,comparing,cluster,state,t,get,message,n,cluster,state,of,node,nodes,get,0,n,state,n,cluster,state,node,n,node,state
MasterDisruptionIT -> @TestLogging(             "_root:DEBUG,"                     + "org.elasticsearch.cluster.service:TRACE,"                     + "org.elasticsearch.gateway:TRACE,"                     + "org.elasticsearch.indices.store:TRACE")     public void testIsolateMasterAndVerifyClusterStateConsensus() throws Exception;1549008649;This test isolates the master from rest of the cluster, waits for a new master to be elected, restores the partition_and verifies that all node agree on the new cluster state;@TestLogging(_            "_root:DEBUG,"_                    + "org.elasticsearch.cluster.service:TRACE,"_                    + "org.elasticsearch.gateway:TRACE,"_                    + "org.elasticsearch.indices.store:TRACE")_    public void testIsolateMasterAndVerifyClusterStateConsensus() throws Exception {_        final List<String> nodes = startCluster(3)___        assertAcked(prepareCreate("test")_                .setSettings(Settings.builder()_                        .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1 + randomInt(2))_                        .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, randomInt(2))_                ))___        ensureGreen()__        String isolatedNode = internalCluster().getMasterName()__        TwoPartitions partitions = isolateNode(isolatedNode)__        NetworkDisruption networkDisruption = addRandomDisruptionType(partitions)__        networkDisruption.startDisrupting()___        String nonIsolatedNode = partitions.getMajoritySide().iterator().next()___        _        ensureStableCluster(2, nonIsolatedNode)___        _        assertNoMaster(isolatedNode, TimeValue.timeValueSeconds(40))___        _        networkDisruption.stopDisrupting()___        for (String node : nodes) {_            ensureStableCluster(3, new TimeValue(DISRUPTION_HEALING_OVERHEAD.millis() + networkDisruption.expectedTimeToHeal().millis()),_                    true, node)__        }__        logger.info("issue a reroute")__        _        assertAcked(client().admin().cluster().prepareReroute())__        _        ensureGreen("test")___        _        _        assertBusy(() -> {_            ClusterState state = null__            for (String node : nodes) {_                ClusterState nodeState = getNodeClusterState(node)__                if (state == null) {_                    state = nodeState__                    continue__                }_                _                try {_                    assertEquals("unequal versions", state.version(), nodeState.version())__                    assertEquals("unequal node count", state.nodes().getSize(), nodeState.nodes().getSize())__                    assertEquals("different masters ", state.nodes().getMasterNodeId(), nodeState.nodes().getMasterNodeId())__                    assertEquals("different meta data version", state.metaData().version(), nodeState.metaData().version())__                    assertEquals("different routing", state.routingTable().toString(), nodeState.routingTable().toString())__                } catch (AssertionError t) {_                    fail("failed comparing cluster state: " + t.getMessage() + "\n" +_                            "--- cluster state of node [" + nodes.get(0) + "]: ---\n" + state +_                            "\n--- cluster state [" + node + "]: ---\n" + nodeState)__                }__            }_        })__    };this,test,isolates,the,master,from,rest,of,the,cluster,waits,for,a,new,master,to,be,elected,restores,the,partition,and,verifies,that,all,node,agree,on,the,new,cluster,state;test,logging,debug,org,elasticsearch,cluster,service,trace,org,elasticsearch,gateway,trace,org,elasticsearch,indices,store,trace,public,void,test,isolate,master,and,verify,cluster,state,consensus,throws,exception,final,list,string,nodes,start,cluster,3,assert,acked,prepare,create,test,set,settings,settings,builder,put,index,meta,data,1,random,int,2,put,index,meta,data,random,int,2,ensure,green,string,isolated,node,internal,cluster,get,master,name,two,partitions,partitions,isolate,node,isolated,node,network,disruption,network,disruption,add,random,disruption,type,partitions,network,disruption,start,disrupting,string,non,isolated,node,partitions,get,majority,side,iterator,next,ensure,stable,cluster,2,non,isolated,node,assert,no,master,isolated,node,time,value,time,value,seconds,40,network,disruption,stop,disrupting,for,string,node,nodes,ensure,stable,cluster,3,new,time,value,millis,network,disruption,expected,time,to,heal,millis,true,node,logger,info,issue,a,reroute,assert,acked,client,admin,cluster,prepare,reroute,ensure,green,test,assert,busy,cluster,state,state,null,for,string,node,nodes,cluster,state,node,state,get,node,cluster,state,node,if,state,null,state,node,state,continue,try,assert,equals,unequal,versions,state,version,node,state,version,assert,equals,unequal,node,count,state,nodes,get,size,node,state,nodes,get,size,assert,equals,different,masters,state,nodes,get,master,node,id,node,state,nodes,get,master,node,id,assert,equals,different,meta,data,version,state,meta,data,version,node,state,meta,data,version,assert,equals,different,routing,state,routing,table,to,string,node,state,routing,table,to,string,catch,assertion,error,t,fail,failed,comparing,cluster,state,t,get,message,n,cluster,state,of,node,nodes,get,0,n,state,n,cluster,state,node,n,node,state
MasterDisruptionIT -> @TestLogging(             "_root:DEBUG,"                     + "org.elasticsearch.cluster.service:TRACE,"                     + "org.elasticsearch.gateway:TRACE,"                     + "org.elasticsearch.indices.store:TRACE")     public void testIsolateMasterAndVerifyClusterStateConsensus() throws Exception;1549356476;This test isolates the master from rest of the cluster, waits for a new master to be elected, restores the partition_and verifies that all node agree on the new cluster state;@TestLogging(_            "_root:DEBUG,"_                    + "org.elasticsearch.cluster.service:TRACE,"_                    + "org.elasticsearch.gateway:TRACE,"_                    + "org.elasticsearch.indices.store:TRACE")_    public void testIsolateMasterAndVerifyClusterStateConsensus() throws Exception {_        final List<String> nodes = startCluster(3)___        assertAcked(prepareCreate("test")_                .setSettings(Settings.builder()_                        .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1 + randomInt(2))_                        .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, randomInt(2))_                ))___        ensureGreen()__        String isolatedNode = internalCluster().getMasterName()__        TwoPartitions partitions = isolateNode(isolatedNode)__        NetworkDisruption networkDisruption = addRandomDisruptionType(partitions)__        networkDisruption.startDisrupting()___        String nonIsolatedNode = partitions.getMajoritySide().iterator().next()___        _        ensureStableCluster(2, nonIsolatedNode)___        _        assertNoMaster(isolatedNode, TimeValue.timeValueSeconds(40))___        _        networkDisruption.stopDisrupting()___        for (String node : nodes) {_            ensureStableCluster(3, new TimeValue(DISRUPTION_HEALING_OVERHEAD.millis() + networkDisruption.expectedTimeToHeal().millis()),_                    true, node)__        }__        logger.info("issue a reroute")__        _        assertAcked(client().admin().cluster().prepareReroute())__        _        ensureGreen("test")___        _        _        assertBusy(() -> {_            ClusterState state = null__            for (String node : nodes) {_                ClusterState nodeState = getNodeClusterState(node)__                if (state == null) {_                    state = nodeState__                    continue__                }_                _                try {_                    assertEquals("unequal versions", state.version(), nodeState.version())__                    assertEquals("unequal node count", state.nodes().getSize(), nodeState.nodes().getSize())__                    assertEquals("different masters ", state.nodes().getMasterNodeId(), nodeState.nodes().getMasterNodeId())__                    assertEquals("different meta data version", state.metaData().version(), nodeState.metaData().version())__                    assertEquals("different routing", state.routingTable().toString(), nodeState.routingTable().toString())__                } catch (AssertionError t) {_                    fail("failed comparing cluster state: " + t.getMessage() + "\n" +_                            "--- cluster state of node [" + nodes.get(0) + "]: ---\n" + state +_                            "\n--- cluster state [" + node + "]: ---\n" + nodeState)__                }__            }_        })__    };this,test,isolates,the,master,from,rest,of,the,cluster,waits,for,a,new,master,to,be,elected,restores,the,partition,and,verifies,that,all,node,agree,on,the,new,cluster,state;test,logging,debug,org,elasticsearch,cluster,service,trace,org,elasticsearch,gateway,trace,org,elasticsearch,indices,store,trace,public,void,test,isolate,master,and,verify,cluster,state,consensus,throws,exception,final,list,string,nodes,start,cluster,3,assert,acked,prepare,create,test,set,settings,settings,builder,put,index,meta,data,1,random,int,2,put,index,meta,data,random,int,2,ensure,green,string,isolated,node,internal,cluster,get,master,name,two,partitions,partitions,isolate,node,isolated,node,network,disruption,network,disruption,add,random,disruption,type,partitions,network,disruption,start,disrupting,string,non,isolated,node,partitions,get,majority,side,iterator,next,ensure,stable,cluster,2,non,isolated,node,assert,no,master,isolated,node,time,value,time,value,seconds,40,network,disruption,stop,disrupting,for,string,node,nodes,ensure,stable,cluster,3,new,time,value,millis,network,disruption,expected,time,to,heal,millis,true,node,logger,info,issue,a,reroute,assert,acked,client,admin,cluster,prepare,reroute,ensure,green,test,assert,busy,cluster,state,state,null,for,string,node,nodes,cluster,state,node,state,get,node,cluster,state,node,if,state,null,state,node,state,continue,try,assert,equals,unequal,versions,state,version,node,state,version,assert,equals,unequal,node,count,state,nodes,get,size,node,state,nodes,get,size,assert,equals,different,masters,state,nodes,get,master,node,id,node,state,nodes,get,master,node,id,assert,equals,different,meta,data,version,state,meta,data,version,node,state,meta,data,version,assert,equals,different,routing,state,routing,table,to,string,node,state,routing,table,to,string,catch,assertion,error,t,fail,failed,comparing,cluster,state,t,get,message,n,cluster,state,of,node,nodes,get,0,n,state,n,cluster,state,node,n,node,state
MasterDisruptionIT -> @TestLogging(             "_root:DEBUG,"                     + "org.elasticsearch.cluster.service:TRACE,"                     + "org.elasticsearch.gateway:TRACE,"                     + "org.elasticsearch.indices.store:TRACE")     public void testIsolateMasterAndVerifyClusterStateConsensus() throws Exception;1549452878;This test isolates the master from rest of the cluster, waits for a new master to be elected, restores the partition_and verifies that all node agree on the new cluster state;@TestLogging(_            "_root:DEBUG,"_                    + "org.elasticsearch.cluster.service:TRACE,"_                    + "org.elasticsearch.gateway:TRACE,"_                    + "org.elasticsearch.indices.store:TRACE")_    public void testIsolateMasterAndVerifyClusterStateConsensus() throws Exception {_        final List<String> nodes = startCluster(3)___        assertAcked(prepareCreate("test")_                .setSettings(Settings.builder()_                        .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1 + randomInt(2))_                        .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, randomInt(2))_                ))___        ensureGreen()__        String isolatedNode = internalCluster().getMasterName()__        TwoPartitions partitions = isolateNode(isolatedNode)__        NetworkDisruption networkDisruption = addRandomDisruptionType(partitions)__        networkDisruption.startDisrupting()___        String nonIsolatedNode = partitions.getMajoritySide().iterator().next()___        _        ensureStableCluster(2, nonIsolatedNode)___        _        assertNoMaster(isolatedNode, TimeValue.timeValueSeconds(40))___        _        networkDisruption.stopDisrupting()___        for (String node : nodes) {_            ensureStableCluster(3, new TimeValue(DISRUPTION_HEALING_OVERHEAD.millis() + networkDisruption.expectedTimeToHeal().millis()),_                    true, node)__        }__        logger.info("issue a reroute")__        _        assertAcked(client().admin().cluster().prepareReroute())__        _        ensureGreen("test")___        _        _        assertBusy(() -> {_            ClusterState state = null__            for (String node : nodes) {_                ClusterState nodeState = getNodeClusterState(node)__                if (state == null) {_                    state = nodeState__                    continue__                }_                _                try {_                    assertEquals("unequal versions", state.version(), nodeState.version())__                    assertEquals("unequal node count", state.nodes().getSize(), nodeState.nodes().getSize())__                    assertEquals("different masters ", state.nodes().getMasterNodeId(), nodeState.nodes().getMasterNodeId())__                    assertEquals("different meta data version", state.metaData().version(), nodeState.metaData().version())__                    assertEquals("different routing", state.routingTable().toString(), nodeState.routingTable().toString())__                } catch (AssertionError t) {_                    fail("failed comparing cluster state: " + t.getMessage() + "\n" +_                            "--- cluster state of node [" + nodes.get(0) + "]: ---\n" + state +_                            "\n--- cluster state [" + node + "]: ---\n" + nodeState)__                }__            }_        })__    };this,test,isolates,the,master,from,rest,of,the,cluster,waits,for,a,new,master,to,be,elected,restores,the,partition,and,verifies,that,all,node,agree,on,the,new,cluster,state;test,logging,debug,org,elasticsearch,cluster,service,trace,org,elasticsearch,gateway,trace,org,elasticsearch,indices,store,trace,public,void,test,isolate,master,and,verify,cluster,state,consensus,throws,exception,final,list,string,nodes,start,cluster,3,assert,acked,prepare,create,test,set,settings,settings,builder,put,index,meta,data,1,random,int,2,put,index,meta,data,random,int,2,ensure,green,string,isolated,node,internal,cluster,get,master,name,two,partitions,partitions,isolate,node,isolated,node,network,disruption,network,disruption,add,random,disruption,type,partitions,network,disruption,start,disrupting,string,non,isolated,node,partitions,get,majority,side,iterator,next,ensure,stable,cluster,2,non,isolated,node,assert,no,master,isolated,node,time,value,time,value,seconds,40,network,disruption,stop,disrupting,for,string,node,nodes,ensure,stable,cluster,3,new,time,value,millis,network,disruption,expected,time,to,heal,millis,true,node,logger,info,issue,a,reroute,assert,acked,client,admin,cluster,prepare,reroute,ensure,green,test,assert,busy,cluster,state,state,null,for,string,node,nodes,cluster,state,node,state,get,node,cluster,state,node,if,state,null,state,node,state,continue,try,assert,equals,unequal,versions,state,version,node,state,version,assert,equals,unequal,node,count,state,nodes,get,size,node,state,nodes,get,size,assert,equals,different,masters,state,nodes,get,master,node,id,node,state,nodes,get,master,node,id,assert,equals,different,meta,data,version,state,meta,data,version,node,state,meta,data,version,assert,equals,different,routing,state,routing,table,to,string,node,state,routing,table,to,string,catch,assertion,error,t,fail,failed,comparing,cluster,state,t,get,message,n,cluster,state,of,node,nodes,get,0,n,state,n,cluster,state,node,n,node,state
MasterDisruptionIT -> @TestLogging("_root:DEBUG,org.elasticsearch.cluster.service:TRACE,org.elasticsearch.test.disruption:TRACE")     public void testStaleMasterNotHijackingMajority() throws Exception;1524684173;Tests that emulates a frozen elected master node that unfreezes and pushes his cluster state to other nodes_that already are following another elected master node. These nodes should reject this cluster state and prevent_them from following the stale master.;@TestLogging("_root:DEBUG,org.elasticsearch.cluster.service:TRACE,org.elasticsearch.test.disruption:TRACE")_    public void testStaleMasterNotHijackingMajority() throws Exception {_        _        final List<String> nodes = startCluster(3, 2)___        _        final String oldMasterNode = internalCluster().getMasterName()__        for (String node : nodes) {_            ensureStableCluster(3, node)__        }_        assertMaster(oldMasterNode, nodes)___        _        SingleNodeDisruption masterNodeDisruption = new LongGCDisruption(random(), oldMasterNode)___        _        final List<String> majoritySide = new ArrayList<>(nodes)__        majoritySide.remove(oldMasterNode)___        _        final Map<String, List<Tuple<String, String>>> masters = Collections.synchronizedMap(new HashMap<String, List<Tuple<String,_                        String>>>())__        for (final String node : majoritySide) {_            masters.put(node, new ArrayList<Tuple<String, String>>())__            internalCluster().getInstance(ClusterService.class, node).addListener(event -> {_                DiscoveryNode previousMaster = event.previousState().nodes().getMasterNode()__                DiscoveryNode currentMaster = event.state().nodes().getMasterNode()__                if (!Objects.equals(previousMaster, currentMaster)) {_                    logger.info("node {} received new cluster state: {} \n and had previous cluster state: {}", node, event.state(),_                            event.previousState())__                    String previousMasterNodeName = previousMaster != null ? previousMaster.getName() : null__                    String currentMasterNodeName = currentMaster != null ? currentMaster.getName() : null__                    masters.get(node).add(new Tuple<>(previousMasterNodeName, currentMasterNodeName))__                }_            })__        }__        final CountDownLatch oldMasterNodeSteppedDown = new CountDownLatch(1)__        internalCluster().getInstance(ClusterService.class, oldMasterNode).addListener(event -> {_            if (event.state().nodes().getMasterNodeId() == null) {_                oldMasterNodeSteppedDown.countDown()__            }_        })___        internalCluster().setDisruptionScheme(masterNodeDisruption)__        logger.info("freezing node [{}]", oldMasterNode)__        masterNodeDisruption.startDisrupting()___        _        assertDifferentMaster(majoritySide.get(0), oldMasterNode)__        assertDifferentMaster(majoritySide.get(1), oldMasterNode)___        _        _        boolean failed = true__        try {_            assertDiscoveryCompleted(majoritySide)__            failed = false__        } finally {_            if (failed) {_                logger.error("discovery failed to complete, probably caused by a blocked thread: {}",_                        new HotThreads().busiestThreads(Integer.MAX_VALUE).ignoreIdleThreads(false).detect())__            }_        }__        _        _        _        _        internalCluster().getInstance(ClusterService.class, oldMasterNode).submitStateUpdateTask("sneaky-update", new_                ClusterStateUpdateTask(Priority.IMMEDIATE) {_                    @Override_                    public ClusterState execute(ClusterState currentState) throws Exception {_                        return ClusterState.builder(currentState).build()__                    }__                    @Override_                    public void onFailure(String source, Exception e) {_                        logger.warn(() -> new ParameterizedMessage("failure [{}]", source), e)__                    }_                })___        _        final String newMasterNode = internalCluster().getMasterName(majoritySide.get(0))__        logger.info("new detected master node [{}]", newMasterNode)___        _        logger.info("Unfreeze node [{}]", oldMasterNode)__        masterNodeDisruption.stopDisrupting()___        oldMasterNodeSteppedDown.await(30, TimeUnit.SECONDS)__        _        assertDiscoveryCompleted(nodes)__        assertMaster(newMasterNode, nodes)___        assertThat(masters.size(), equalTo(2))__        for (Map.Entry<String, List<Tuple<String, String>>> entry : masters.entrySet()) {_            String nodeName = entry.getKey()__            List<Tuple<String, String>> recordedMasterTransition = entry.getValue()__            assertThat("[" + nodeName + "] Each node should only record two master node transitions", recordedMasterTransition.size(),_                    equalTo(2))__            assertThat("[" + nodeName + "] First transition's previous master should be [null]", recordedMasterTransition.get(0).v1(),_                    equalTo(oldMasterNode))__            assertThat("[" + nodeName + "] First transition's current master should be [" + newMasterNode + "]", recordedMasterTransition_                    .get(0).v2(), nullValue())__            assertThat("[" + nodeName + "] Second transition's previous master should be [null]", recordedMasterTransition.get(1).v1(),_                    nullValue())__            assertThat("[" + nodeName + "] Second transition's current master should be [" + newMasterNode + "]",_                    recordedMasterTransition.get(1).v2(), equalTo(newMasterNode))__        }_    };tests,that,emulates,a,frozen,elected,master,node,that,unfreezes,and,pushes,his,cluster,state,to,other,nodes,that,already,are,following,another,elected,master,node,these,nodes,should,reject,this,cluster,state,and,prevent,them,from,following,the,stale,master;test,logging,debug,org,elasticsearch,cluster,service,trace,org,elasticsearch,test,disruption,trace,public,void,test,stale,master,not,hijacking,majority,throws,exception,final,list,string,nodes,start,cluster,3,2,final,string,old,master,node,internal,cluster,get,master,name,for,string,node,nodes,ensure,stable,cluster,3,node,assert,master,old,master,node,nodes,single,node,disruption,master,node,disruption,new,long,gcdisruption,random,old,master,node,final,list,string,majority,side,new,array,list,nodes,majority,side,remove,old,master,node,final,map,string,list,tuple,string,string,masters,collections,synchronized,map,new,hash,map,string,list,tuple,string,string,for,final,string,node,majority,side,masters,put,node,new,array,list,tuple,string,string,internal,cluster,get,instance,cluster,service,class,node,add,listener,event,discovery,node,previous,master,event,previous,state,nodes,get,master,node,discovery,node,current,master,event,state,nodes,get,master,node,if,objects,equals,previous,master,current,master,logger,info,node,received,new,cluster,state,n,and,had,previous,cluster,state,node,event,state,event,previous,state,string,previous,master,node,name,previous,master,null,previous,master,get,name,null,string,current,master,node,name,current,master,null,current,master,get,name,null,masters,get,node,add,new,tuple,previous,master,node,name,current,master,node,name,final,count,down,latch,old,master,node,stepped,down,new,count,down,latch,1,internal,cluster,get,instance,cluster,service,class,old,master,node,add,listener,event,if,event,state,nodes,get,master,node,id,null,old,master,node,stepped,down,count,down,internal,cluster,set,disruption,scheme,master,node,disruption,logger,info,freezing,node,old,master,node,master,node,disruption,start,disrupting,assert,different,master,majority,side,get,0,old,master,node,assert,different,master,majority,side,get,1,old,master,node,boolean,failed,true,try,assert,discovery,completed,majority,side,failed,false,finally,if,failed,logger,error,discovery,failed,to,complete,probably,caused,by,a,blocked,thread,new,hot,threads,busiest,threads,integer,ignore,idle,threads,false,detect,internal,cluster,get,instance,cluster,service,class,old,master,node,submit,state,update,task,sneaky,update,new,cluster,state,update,task,priority,immediate,override,public,cluster,state,execute,cluster,state,current,state,throws,exception,return,cluster,state,builder,current,state,build,override,public,void,on,failure,string,source,exception,e,logger,warn,new,parameterized,message,failure,source,e,final,string,new,master,node,internal,cluster,get,master,name,majority,side,get,0,logger,info,new,detected,master,node,new,master,node,logger,info,unfreeze,node,old,master,node,master,node,disruption,stop,disrupting,old,master,node,stepped,down,await,30,time,unit,seconds,assert,discovery,completed,nodes,assert,master,new,master,node,nodes,assert,that,masters,size,equal,to,2,for,map,entry,string,list,tuple,string,string,entry,masters,entry,set,string,node,name,entry,get,key,list,tuple,string,string,recorded,master,transition,entry,get,value,assert,that,node,name,each,node,should,only,record,two,master,node,transitions,recorded,master,transition,size,equal,to,2,assert,that,node,name,first,transition,s,previous,master,should,be,null,recorded,master,transition,get,0,v1,equal,to,old,master,node,assert,that,node,name,first,transition,s,current,master,should,be,new,master,node,recorded,master,transition,get,0,v2,null,value,assert,that,node,name,second,transition,s,previous,master,should,be,null,recorded,master,transition,get,1,v1,null,value,assert,that,node,name,second,transition,s,current,master,should,be,new,master,node,recorded,master,transition,get,1,v2,equal,to,new,master,node
MasterDisruptionIT -> @TestLogging("_root:DEBUG,org.elasticsearch.cluster.service:TRACE,org.elasticsearch.test.disruption:TRACE")     public void testStaleMasterNotHijackingMajority() throws Exception;1525162917;Tests that emulates a frozen elected master node that unfreezes and pushes his cluster state to other nodes_that already are following another elected master node. These nodes should reject this cluster state and prevent_them from following the stale master.;@TestLogging("_root:DEBUG,org.elasticsearch.cluster.service:TRACE,org.elasticsearch.test.disruption:TRACE")_    public void testStaleMasterNotHijackingMajority() throws Exception {_        _        final List<String> nodes = startCluster(3, 2)___        _        final String oldMasterNode = internalCluster().getMasterName()__        for (String node : nodes) {_            ensureStableCluster(3, node)__        }_        assertMaster(oldMasterNode, nodes)___        _        SingleNodeDisruption masterNodeDisruption = new LongGCDisruption(random(), oldMasterNode)___        _        final List<String> majoritySide = new ArrayList<>(nodes)__        majoritySide.remove(oldMasterNode)___        _        final Map<String, List<Tuple<String, String>>> masters = Collections.synchronizedMap(new HashMap<String, List<Tuple<String,_                        String>>>())__        for (final String node : majoritySide) {_            masters.put(node, new ArrayList<Tuple<String, String>>())__            internalCluster().getInstance(ClusterService.class, node).addListener(event -> {_                DiscoveryNode previousMaster = event.previousState().nodes().getMasterNode()__                DiscoveryNode currentMaster = event.state().nodes().getMasterNode()__                if (!Objects.equals(previousMaster, currentMaster)) {_                    logger.info("node {} received new cluster state: {} \n and had previous cluster state: {}", node, event.state(),_                            event.previousState())__                    String previousMasterNodeName = previousMaster != null ? previousMaster.getName() : null__                    String currentMasterNodeName = currentMaster != null ? currentMaster.getName() : null__                    masters.get(node).add(new Tuple<>(previousMasterNodeName, currentMasterNodeName))__                }_            })__        }__        final CountDownLatch oldMasterNodeSteppedDown = new CountDownLatch(1)__        internalCluster().getInstance(ClusterService.class, oldMasterNode).addListener(event -> {_            if (event.state().nodes().getMasterNodeId() == null) {_                oldMasterNodeSteppedDown.countDown()__            }_        })___        internalCluster().setDisruptionScheme(masterNodeDisruption)__        logger.info("freezing node [{}]", oldMasterNode)__        masterNodeDisruption.startDisrupting()___        _        assertDifferentMaster(majoritySide.get(0), oldMasterNode)__        assertDifferentMaster(majoritySide.get(1), oldMasterNode)___        _        _        boolean failed = true__        try {_            assertDiscoveryCompleted(majoritySide)__            failed = false__        } finally {_            if (failed) {_                logger.error("discovery failed to complete, probably caused by a blocked thread: {}",_                        new HotThreads().busiestThreads(Integer.MAX_VALUE).ignoreIdleThreads(false).detect())__            }_        }__        _        _        _        _        internalCluster().getInstance(ClusterService.class, oldMasterNode).submitStateUpdateTask("sneaky-update", new_                ClusterStateUpdateTask(Priority.IMMEDIATE) {_                    @Override_                    public ClusterState execute(ClusterState currentState) throws Exception {_                        return ClusterState.builder(currentState).build()__                    }__                    @Override_                    public void onFailure(String source, Exception e) {_                        logger.warn(() -> new ParameterizedMessage("failure [{}]", source), e)__                    }_                })___        _        final String newMasterNode = internalCluster().getMasterName(majoritySide.get(0))__        logger.info("new detected master node [{}]", newMasterNode)___        _        logger.info("Unfreeze node [{}]", oldMasterNode)__        masterNodeDisruption.stopDisrupting()___        oldMasterNodeSteppedDown.await(30, TimeUnit.SECONDS)__        _        assertDiscoveryCompleted(nodes)__        assertMaster(newMasterNode, nodes)___        assertThat(masters.size(), equalTo(2))__        for (Map.Entry<String, List<Tuple<String, String>>> entry : masters.entrySet()) {_            String nodeName = entry.getKey()__            List<Tuple<String, String>> recordedMasterTransition = entry.getValue()__            assertThat("[" + nodeName + "] Each node should only record two master node transitions", recordedMasterTransition.size(),_                    equalTo(2))__            assertThat("[" + nodeName + "] First transition's previous master should be [null]", recordedMasterTransition.get(0).v1(),_                    equalTo(oldMasterNode))__            assertThat("[" + nodeName + "] First transition's current master should be [" + newMasterNode + "]", recordedMasterTransition_                    .get(0).v2(), nullValue())__            assertThat("[" + nodeName + "] Second transition's previous master should be [null]", recordedMasterTransition.get(1).v1(),_                    nullValue())__            assertThat("[" + nodeName + "] Second transition's current master should be [" + newMasterNode + "]",_                    recordedMasterTransition.get(1).v2(), equalTo(newMasterNode))__        }_    };tests,that,emulates,a,frozen,elected,master,node,that,unfreezes,and,pushes,his,cluster,state,to,other,nodes,that,already,are,following,another,elected,master,node,these,nodes,should,reject,this,cluster,state,and,prevent,them,from,following,the,stale,master;test,logging,debug,org,elasticsearch,cluster,service,trace,org,elasticsearch,test,disruption,trace,public,void,test,stale,master,not,hijacking,majority,throws,exception,final,list,string,nodes,start,cluster,3,2,final,string,old,master,node,internal,cluster,get,master,name,for,string,node,nodes,ensure,stable,cluster,3,node,assert,master,old,master,node,nodes,single,node,disruption,master,node,disruption,new,long,gcdisruption,random,old,master,node,final,list,string,majority,side,new,array,list,nodes,majority,side,remove,old,master,node,final,map,string,list,tuple,string,string,masters,collections,synchronized,map,new,hash,map,string,list,tuple,string,string,for,final,string,node,majority,side,masters,put,node,new,array,list,tuple,string,string,internal,cluster,get,instance,cluster,service,class,node,add,listener,event,discovery,node,previous,master,event,previous,state,nodes,get,master,node,discovery,node,current,master,event,state,nodes,get,master,node,if,objects,equals,previous,master,current,master,logger,info,node,received,new,cluster,state,n,and,had,previous,cluster,state,node,event,state,event,previous,state,string,previous,master,node,name,previous,master,null,previous,master,get,name,null,string,current,master,node,name,current,master,null,current,master,get,name,null,masters,get,node,add,new,tuple,previous,master,node,name,current,master,node,name,final,count,down,latch,old,master,node,stepped,down,new,count,down,latch,1,internal,cluster,get,instance,cluster,service,class,old,master,node,add,listener,event,if,event,state,nodes,get,master,node,id,null,old,master,node,stepped,down,count,down,internal,cluster,set,disruption,scheme,master,node,disruption,logger,info,freezing,node,old,master,node,master,node,disruption,start,disrupting,assert,different,master,majority,side,get,0,old,master,node,assert,different,master,majority,side,get,1,old,master,node,boolean,failed,true,try,assert,discovery,completed,majority,side,failed,false,finally,if,failed,logger,error,discovery,failed,to,complete,probably,caused,by,a,blocked,thread,new,hot,threads,busiest,threads,integer,ignore,idle,threads,false,detect,internal,cluster,get,instance,cluster,service,class,old,master,node,submit,state,update,task,sneaky,update,new,cluster,state,update,task,priority,immediate,override,public,cluster,state,execute,cluster,state,current,state,throws,exception,return,cluster,state,builder,current,state,build,override,public,void,on,failure,string,source,exception,e,logger,warn,new,parameterized,message,failure,source,e,final,string,new,master,node,internal,cluster,get,master,name,majority,side,get,0,logger,info,new,detected,master,node,new,master,node,logger,info,unfreeze,node,old,master,node,master,node,disruption,stop,disrupting,old,master,node,stepped,down,await,30,time,unit,seconds,assert,discovery,completed,nodes,assert,master,new,master,node,nodes,assert,that,masters,size,equal,to,2,for,map,entry,string,list,tuple,string,string,entry,masters,entry,set,string,node,name,entry,get,key,list,tuple,string,string,recorded,master,transition,entry,get,value,assert,that,node,name,each,node,should,only,record,two,master,node,transitions,recorded,master,transition,size,equal,to,2,assert,that,node,name,first,transition,s,previous,master,should,be,null,recorded,master,transition,get,0,v1,equal,to,old,master,node,assert,that,node,name,first,transition,s,current,master,should,be,new,master,node,recorded,master,transition,get,0,v2,null,value,assert,that,node,name,second,transition,s,previous,master,should,be,null,recorded,master,transition,get,1,v1,null,value,assert,that,node,name,second,transition,s,current,master,should,be,new,master,node,recorded,master,transition,get,1,v2,equal,to,new,master,node
MasterDisruptionIT -> @TestLogging("_root:DEBUG,org.elasticsearch.cluster.service:TRACE,org.elasticsearch.test.disruption:TRACE")     public void testStaleMasterNotHijackingMajority() throws Exception;1541008027;Tests that emulates a frozen elected master node that unfreezes and pushes his cluster state to other nodes_that already are following another elected master node. These nodes should reject this cluster state and prevent_them from following the stale master.;@TestLogging("_root:DEBUG,org.elasticsearch.cluster.service:TRACE,org.elasticsearch.test.disruption:TRACE")_    public void testStaleMasterNotHijackingMajority() throws Exception {_        _        final List<String> nodes = startCluster(3)___        _        final String oldMasterNode = internalCluster().getMasterName()__        for (String node : nodes) {_            ensureStableCluster(3, node)__        }_        assertMaster(oldMasterNode, nodes)___        _        SingleNodeDisruption masterNodeDisruption = new LongGCDisruption(random(), oldMasterNode)___        _        final List<String> majoritySide = new ArrayList<>(nodes)__        majoritySide.remove(oldMasterNode)___        _        final Map<String, List<Tuple<String, String>>> masters = Collections.synchronizedMap(new HashMap<String, List<Tuple<String,_                        String>>>())__        for (final String node : majoritySide) {_            masters.put(node, new ArrayList<Tuple<String, String>>())__            internalCluster().getInstance(ClusterService.class, node).addListener(event -> {_                DiscoveryNode previousMaster = event.previousState().nodes().getMasterNode()__                DiscoveryNode currentMaster = event.state().nodes().getMasterNode()__                if (!Objects.equals(previousMaster, currentMaster)) {_                    logger.info("node {} received new cluster state: {} \n and had previous cluster state: {}", node, event.state(),_                            event.previousState())__                    String previousMasterNodeName = previousMaster != null ? previousMaster.getName() : null__                    String currentMasterNodeName = currentMaster != null ? currentMaster.getName() : null__                    masters.get(node).add(new Tuple<>(previousMasterNodeName, currentMasterNodeName))__                }_            })__        }__        final CountDownLatch oldMasterNodeSteppedDown = new CountDownLatch(1)__        internalCluster().getInstance(ClusterService.class, oldMasterNode).addListener(event -> {_            if (event.state().nodes().getMasterNodeId() == null) {_                oldMasterNodeSteppedDown.countDown()__            }_        })___        internalCluster().setDisruptionScheme(masterNodeDisruption)__        logger.info("freezing node [{}]", oldMasterNode)__        masterNodeDisruption.startDisrupting()___        _        assertDifferentMaster(majoritySide.get(0), oldMasterNode)__        assertDifferentMaster(majoritySide.get(1), oldMasterNode)___        _        _        boolean failed = true__        try {_            assertDiscoveryCompleted(majoritySide)__            failed = false__        } finally {_            if (failed) {_                logger.error("discovery failed to complete, probably caused by a blocked thread: {}",_                        new HotThreads().busiestThreads(Integer.MAX_VALUE).ignoreIdleThreads(false).detect())__            }_        }__        _        _        _        _        internalCluster().getInstance(ClusterService.class, oldMasterNode).submitStateUpdateTask("sneaky-update", new_                ClusterStateUpdateTask(Priority.IMMEDIATE) {_                    @Override_                    public ClusterState execute(ClusterState currentState) throws Exception {_                        return ClusterState.builder(currentState).build()__                    }__                    @Override_                    public void onFailure(String source, Exception e) {_                        logger.warn(() -> new ParameterizedMessage("failure [{}]", source), e)__                    }_                })___        _        final String newMasterNode = internalCluster().getMasterName(majoritySide.get(0))__        logger.info("new detected master node [{}]", newMasterNode)___        _        logger.info("Unfreeze node [{}]", oldMasterNode)__        masterNodeDisruption.stopDisrupting()___        oldMasterNodeSteppedDown.await(30, TimeUnit.SECONDS)__        _        assertDiscoveryCompleted(nodes)__        assertMaster(newMasterNode, nodes)___        assertThat(masters.size(), equalTo(2))__        for (Map.Entry<String, List<Tuple<String, String>>> entry : masters.entrySet()) {_            String nodeName = entry.getKey()__            List<Tuple<String, String>> recordedMasterTransition = entry.getValue()__            assertThat("[" + nodeName + "] Each node should only record two master node transitions", recordedMasterTransition.size(),_                    equalTo(2))__            assertThat("[" + nodeName + "] First transition's previous master should be [null]", recordedMasterTransition.get(0).v1(),_                    equalTo(oldMasterNode))__            assertThat("[" + nodeName + "] First transition's current master should be [" + newMasterNode + "]", recordedMasterTransition_                    .get(0).v2(), nullValue())__            assertThat("[" + nodeName + "] Second transition's previous master should be [null]", recordedMasterTransition.get(1).v1(),_                    nullValue())__            assertThat("[" + nodeName + "] Second transition's current master should be [" + newMasterNode + "]",_                    recordedMasterTransition.get(1).v2(), equalTo(newMasterNode))__        }_    };tests,that,emulates,a,frozen,elected,master,node,that,unfreezes,and,pushes,his,cluster,state,to,other,nodes,that,already,are,following,another,elected,master,node,these,nodes,should,reject,this,cluster,state,and,prevent,them,from,following,the,stale,master;test,logging,debug,org,elasticsearch,cluster,service,trace,org,elasticsearch,test,disruption,trace,public,void,test,stale,master,not,hijacking,majority,throws,exception,final,list,string,nodes,start,cluster,3,final,string,old,master,node,internal,cluster,get,master,name,for,string,node,nodes,ensure,stable,cluster,3,node,assert,master,old,master,node,nodes,single,node,disruption,master,node,disruption,new,long,gcdisruption,random,old,master,node,final,list,string,majority,side,new,array,list,nodes,majority,side,remove,old,master,node,final,map,string,list,tuple,string,string,masters,collections,synchronized,map,new,hash,map,string,list,tuple,string,string,for,final,string,node,majority,side,masters,put,node,new,array,list,tuple,string,string,internal,cluster,get,instance,cluster,service,class,node,add,listener,event,discovery,node,previous,master,event,previous,state,nodes,get,master,node,discovery,node,current,master,event,state,nodes,get,master,node,if,objects,equals,previous,master,current,master,logger,info,node,received,new,cluster,state,n,and,had,previous,cluster,state,node,event,state,event,previous,state,string,previous,master,node,name,previous,master,null,previous,master,get,name,null,string,current,master,node,name,current,master,null,current,master,get,name,null,masters,get,node,add,new,tuple,previous,master,node,name,current,master,node,name,final,count,down,latch,old,master,node,stepped,down,new,count,down,latch,1,internal,cluster,get,instance,cluster,service,class,old,master,node,add,listener,event,if,event,state,nodes,get,master,node,id,null,old,master,node,stepped,down,count,down,internal,cluster,set,disruption,scheme,master,node,disruption,logger,info,freezing,node,old,master,node,master,node,disruption,start,disrupting,assert,different,master,majority,side,get,0,old,master,node,assert,different,master,majority,side,get,1,old,master,node,boolean,failed,true,try,assert,discovery,completed,majority,side,failed,false,finally,if,failed,logger,error,discovery,failed,to,complete,probably,caused,by,a,blocked,thread,new,hot,threads,busiest,threads,integer,ignore,idle,threads,false,detect,internal,cluster,get,instance,cluster,service,class,old,master,node,submit,state,update,task,sneaky,update,new,cluster,state,update,task,priority,immediate,override,public,cluster,state,execute,cluster,state,current,state,throws,exception,return,cluster,state,builder,current,state,build,override,public,void,on,failure,string,source,exception,e,logger,warn,new,parameterized,message,failure,source,e,final,string,new,master,node,internal,cluster,get,master,name,majority,side,get,0,logger,info,new,detected,master,node,new,master,node,logger,info,unfreeze,node,old,master,node,master,node,disruption,stop,disrupting,old,master,node,stepped,down,await,30,time,unit,seconds,assert,discovery,completed,nodes,assert,master,new,master,node,nodes,assert,that,masters,size,equal,to,2,for,map,entry,string,list,tuple,string,string,entry,masters,entry,set,string,node,name,entry,get,key,list,tuple,string,string,recorded,master,transition,entry,get,value,assert,that,node,name,each,node,should,only,record,two,master,node,transitions,recorded,master,transition,size,equal,to,2,assert,that,node,name,first,transition,s,previous,master,should,be,null,recorded,master,transition,get,0,v1,equal,to,old,master,node,assert,that,node,name,first,transition,s,current,master,should,be,new,master,node,recorded,master,transition,get,0,v2,null,value,assert,that,node,name,second,transition,s,previous,master,should,be,null,recorded,master,transition,get,1,v1,null,value,assert,that,node,name,second,transition,s,current,master,should,be,new,master,node,recorded,master,transition,get,1,v2,equal,to,new,master,node
MasterDisruptionIT -> @TestLogging("_root:DEBUG,org.elasticsearch.cluster.service:TRACE,org.elasticsearch.test.disruption:TRACE")     public void testStaleMasterNotHijackingMajority() throws Exception;1544081506;Tests that emulates a frozen elected master node that unfreezes and pushes his cluster state to other nodes_that already are following another elected master node. These nodes should reject this cluster state and prevent_them from following the stale master.;@TestLogging("_root:DEBUG,org.elasticsearch.cluster.service:TRACE,org.elasticsearch.test.disruption:TRACE")_    public void testStaleMasterNotHijackingMajority() throws Exception {_        _        final List<String> nodes = startCluster(3)___        _        final String oldMasterNode = internalCluster().getMasterName()__        for (String node : nodes) {_            ensureStableCluster(3, node)__        }_        assertMaster(oldMasterNode, nodes)___        _        SingleNodeDisruption masterNodeDisruption = new LongGCDisruption(random(), oldMasterNode)___        _        final List<String> majoritySide = new ArrayList<>(nodes)__        majoritySide.remove(oldMasterNode)___        _        final Map<String, List<Tuple<String, String>>> masters = Collections.synchronizedMap(new HashMap<String, List<Tuple<String,_                        String>>>())__        for (final String node : majoritySide) {_            masters.put(node, new ArrayList<Tuple<String, String>>())__            internalCluster().getInstance(ClusterService.class, node).addListener(event -> {_                DiscoveryNode previousMaster = event.previousState().nodes().getMasterNode()__                DiscoveryNode currentMaster = event.state().nodes().getMasterNode()__                if (!Objects.equals(previousMaster, currentMaster)) {_                    logger.info("node {} received new cluster state: {} \n and had previous cluster state: {}", node, event.state(),_                            event.previousState())__                    String previousMasterNodeName = previousMaster != null ? previousMaster.getName() : null__                    String currentMasterNodeName = currentMaster != null ? currentMaster.getName() : null__                    masters.get(node).add(new Tuple<>(previousMasterNodeName, currentMasterNodeName))__                }_            })__        }__        final CountDownLatch oldMasterNodeSteppedDown = new CountDownLatch(1)__        internalCluster().getInstance(ClusterService.class, oldMasterNode).addListener(event -> {_            if (event.state().nodes().getMasterNodeId() == null) {_                oldMasterNodeSteppedDown.countDown()__            }_        })___        internalCluster().setDisruptionScheme(masterNodeDisruption)__        logger.info("freezing node [{}]", oldMasterNode)__        masterNodeDisruption.startDisrupting()___        _        assertDifferentMaster(majoritySide.get(0), oldMasterNode)__        assertDifferentMaster(majoritySide.get(1), oldMasterNode)___        _        _        boolean failed = true__        try {_            assertDiscoveryCompleted(majoritySide)__            failed = false__        } finally {_            if (failed) {_                logger.error("discovery failed to complete, probably caused by a blocked thread: {}",_                        new HotThreads().busiestThreads(Integer.MAX_VALUE).ignoreIdleThreads(false).detect())__            }_        }__        _        _        _        _        internalCluster().getInstance(ClusterService.class, oldMasterNode).submitStateUpdateTask("sneaky-update", new_                ClusterStateUpdateTask(Priority.IMMEDIATE) {_                    @Override_                    public ClusterState execute(ClusterState currentState) throws Exception {_                        return ClusterState.builder(currentState).build()__                    }__                    @Override_                    public void onFailure(String source, Exception e) {_                        logger.warn(() -> new ParameterizedMessage("failure [{}]", source), e)__                    }_                })___        _        final String newMasterNode = internalCluster().getMasterName(majoritySide.get(0))__        logger.info("new detected master node [{}]", newMasterNode)___        _        logger.info("Unfreeze node [{}]", oldMasterNode)__        masterNodeDisruption.stopDisrupting()___        oldMasterNodeSteppedDown.await(30, TimeUnit.SECONDS)__        _        assertDiscoveryCompleted(nodes)__        assertMaster(newMasterNode, nodes)___        assertThat(masters.size(), equalTo(2))__        for (Map.Entry<String, List<Tuple<String, String>>> entry : masters.entrySet()) {_            String nodeName = entry.getKey()__            List<Tuple<String, String>> recordedMasterTransition = entry.getValue()__            assertThat("[" + nodeName + "] Each node should only record two master node transitions", recordedMasterTransition.size(),_                    equalTo(2))__            assertThat("[" + nodeName + "] First transition's previous master should be [null]", recordedMasterTransition.get(0).v1(),_                    equalTo(oldMasterNode))__            assertThat("[" + nodeName + "] First transition's current master should be [" + newMasterNode + "]", recordedMasterTransition_                    .get(0).v2(), nullValue())__            assertThat("[" + nodeName + "] Second transition's previous master should be [null]", recordedMasterTransition.get(1).v1(),_                    nullValue())__            assertThat("[" + nodeName + "] Second transition's current master should be [" + newMasterNode + "]",_                    recordedMasterTransition.get(1).v2(), equalTo(newMasterNode))__        }_    };tests,that,emulates,a,frozen,elected,master,node,that,unfreezes,and,pushes,his,cluster,state,to,other,nodes,that,already,are,following,another,elected,master,node,these,nodes,should,reject,this,cluster,state,and,prevent,them,from,following,the,stale,master;test,logging,debug,org,elasticsearch,cluster,service,trace,org,elasticsearch,test,disruption,trace,public,void,test,stale,master,not,hijacking,majority,throws,exception,final,list,string,nodes,start,cluster,3,final,string,old,master,node,internal,cluster,get,master,name,for,string,node,nodes,ensure,stable,cluster,3,node,assert,master,old,master,node,nodes,single,node,disruption,master,node,disruption,new,long,gcdisruption,random,old,master,node,final,list,string,majority,side,new,array,list,nodes,majority,side,remove,old,master,node,final,map,string,list,tuple,string,string,masters,collections,synchronized,map,new,hash,map,string,list,tuple,string,string,for,final,string,node,majority,side,masters,put,node,new,array,list,tuple,string,string,internal,cluster,get,instance,cluster,service,class,node,add,listener,event,discovery,node,previous,master,event,previous,state,nodes,get,master,node,discovery,node,current,master,event,state,nodes,get,master,node,if,objects,equals,previous,master,current,master,logger,info,node,received,new,cluster,state,n,and,had,previous,cluster,state,node,event,state,event,previous,state,string,previous,master,node,name,previous,master,null,previous,master,get,name,null,string,current,master,node,name,current,master,null,current,master,get,name,null,masters,get,node,add,new,tuple,previous,master,node,name,current,master,node,name,final,count,down,latch,old,master,node,stepped,down,new,count,down,latch,1,internal,cluster,get,instance,cluster,service,class,old,master,node,add,listener,event,if,event,state,nodes,get,master,node,id,null,old,master,node,stepped,down,count,down,internal,cluster,set,disruption,scheme,master,node,disruption,logger,info,freezing,node,old,master,node,master,node,disruption,start,disrupting,assert,different,master,majority,side,get,0,old,master,node,assert,different,master,majority,side,get,1,old,master,node,boolean,failed,true,try,assert,discovery,completed,majority,side,failed,false,finally,if,failed,logger,error,discovery,failed,to,complete,probably,caused,by,a,blocked,thread,new,hot,threads,busiest,threads,integer,ignore,idle,threads,false,detect,internal,cluster,get,instance,cluster,service,class,old,master,node,submit,state,update,task,sneaky,update,new,cluster,state,update,task,priority,immediate,override,public,cluster,state,execute,cluster,state,current,state,throws,exception,return,cluster,state,builder,current,state,build,override,public,void,on,failure,string,source,exception,e,logger,warn,new,parameterized,message,failure,source,e,final,string,new,master,node,internal,cluster,get,master,name,majority,side,get,0,logger,info,new,detected,master,node,new,master,node,logger,info,unfreeze,node,old,master,node,master,node,disruption,stop,disrupting,old,master,node,stepped,down,await,30,time,unit,seconds,assert,discovery,completed,nodes,assert,master,new,master,node,nodes,assert,that,masters,size,equal,to,2,for,map,entry,string,list,tuple,string,string,entry,masters,entry,set,string,node,name,entry,get,key,list,tuple,string,string,recorded,master,transition,entry,get,value,assert,that,node,name,each,node,should,only,record,two,master,node,transitions,recorded,master,transition,size,equal,to,2,assert,that,node,name,first,transition,s,previous,master,should,be,null,recorded,master,transition,get,0,v1,equal,to,old,master,node,assert,that,node,name,first,transition,s,current,master,should,be,new,master,node,recorded,master,transition,get,0,v2,null,value,assert,that,node,name,second,transition,s,previous,master,should,be,null,recorded,master,transition,get,1,v1,null,value,assert,that,node,name,second,transition,s,current,master,should,be,new,master,node,recorded,master,transition,get,1,v2,equal,to,new,master,node
MasterDisruptionIT -> @TestLogging("_root:DEBUG,org.elasticsearch.cluster.service:TRACE,org.elasticsearch.test.disruption:TRACE")     public void testStaleMasterNotHijackingMajority() throws Exception;1544619154;Tests that emulates a frozen elected master node that unfreezes and pushes his cluster state to other nodes_that already are following another elected master node. These nodes should reject this cluster state and prevent_them from following the stale master.;@TestLogging("_root:DEBUG,org.elasticsearch.cluster.service:TRACE,org.elasticsearch.test.disruption:TRACE")_    public void testStaleMasterNotHijackingMajority() throws Exception {_        _        final List<String> nodes = startCluster(3)___        _        final String oldMasterNode = internalCluster().getMasterName()__        for (String node : nodes) {_            ensureStableCluster(3, node)__        }_        assertMaster(oldMasterNode, nodes)___        _        SingleNodeDisruption masterNodeDisruption = new LongGCDisruption(random(), oldMasterNode)___        _        final List<String> majoritySide = new ArrayList<>(nodes)__        majoritySide.remove(oldMasterNode)___        _        final Map<String, List<Tuple<String, String>>> masters = Collections.synchronizedMap(new HashMap<String, List<Tuple<String,_                        String>>>())__        for (final String node : majoritySide) {_            masters.put(node, new ArrayList<Tuple<String, String>>())__            internalCluster().getInstance(ClusterService.class, node).addListener(event -> {_                DiscoveryNode previousMaster = event.previousState().nodes().getMasterNode()__                DiscoveryNode currentMaster = event.state().nodes().getMasterNode()__                if (!Objects.equals(previousMaster, currentMaster)) {_                    logger.info("node {} received new cluster state: {} \n and had previous cluster state: {}", node, event.state(),_                            event.previousState())__                    String previousMasterNodeName = previousMaster != null ? previousMaster.getName() : null__                    String currentMasterNodeName = currentMaster != null ? currentMaster.getName() : null__                    masters.get(node).add(new Tuple<>(previousMasterNodeName, currentMasterNodeName))__                }_            })__        }__        final CountDownLatch oldMasterNodeSteppedDown = new CountDownLatch(1)__        internalCluster().getInstance(ClusterService.class, oldMasterNode).addListener(event -> {_            if (event.state().nodes().getMasterNodeId() == null) {_                oldMasterNodeSteppedDown.countDown()__            }_        })___        internalCluster().setDisruptionScheme(masterNodeDisruption)__        logger.info("freezing node [{}]", oldMasterNode)__        masterNodeDisruption.startDisrupting()___        _        assertDifferentMaster(majoritySide.get(0), oldMasterNode)__        assertDifferentMaster(majoritySide.get(1), oldMasterNode)___        _        _        boolean failed = true__        try {_            assertDiscoveryCompleted(majoritySide)__            failed = false__        } finally {_            if (failed) {_                logger.error("discovery failed to complete, probably caused by a blocked thread: {}",_                        new HotThreads().busiestThreads(Integer.MAX_VALUE).ignoreIdleThreads(false).detect())__            }_        }__        _        _        _        _        internalCluster().getInstance(ClusterService.class, oldMasterNode).submitStateUpdateTask("sneaky-update", new_                ClusterStateUpdateTask(Priority.IMMEDIATE) {_                    @Override_                    public ClusterState execute(ClusterState currentState) throws Exception {_                        return ClusterState.builder(currentState).build()__                    }__                    @Override_                    public void onFailure(String source, Exception e) {_                        logger.warn(() -> new ParameterizedMessage("failure [{}]", source), e)__                    }_                })___        _        final String newMasterNode = internalCluster().getMasterName(majoritySide.get(0))__        logger.info("new detected master node [{}]", newMasterNode)___        _        logger.info("Unfreeze node [{}]", oldMasterNode)__        masterNodeDisruption.stopDisrupting()___        oldMasterNodeSteppedDown.await(30, TimeUnit.SECONDS)__        _        assertDiscoveryCompleted(nodes)__        assertMaster(newMasterNode, nodes)___        assertThat(masters.size(), equalTo(2))__        for (Map.Entry<String, List<Tuple<String, String>>> entry : masters.entrySet()) {_            String nodeName = entry.getKey()__            List<Tuple<String, String>> recordedMasterTransition = entry.getValue()__            assertThat("[" + nodeName + "] Each node should only record two master node transitions", recordedMasterTransition.size(),_                    equalTo(2))__            assertThat("[" + nodeName + "] First transition's previous master should be [null]", recordedMasterTransition.get(0).v1(),_                    equalTo(oldMasterNode))__            assertThat("[" + nodeName + "] First transition's current master should be [" + newMasterNode + "]", recordedMasterTransition_                    .get(0).v2(), nullValue())__            assertThat("[" + nodeName + "] Second transition's previous master should be [null]", recordedMasterTransition.get(1).v1(),_                    nullValue())__            assertThat("[" + nodeName + "] Second transition's current master should be [" + newMasterNode + "]",_                    recordedMasterTransition.get(1).v2(), equalTo(newMasterNode))__        }_    };tests,that,emulates,a,frozen,elected,master,node,that,unfreezes,and,pushes,his,cluster,state,to,other,nodes,that,already,are,following,another,elected,master,node,these,nodes,should,reject,this,cluster,state,and,prevent,them,from,following,the,stale,master;test,logging,debug,org,elasticsearch,cluster,service,trace,org,elasticsearch,test,disruption,trace,public,void,test,stale,master,not,hijacking,majority,throws,exception,final,list,string,nodes,start,cluster,3,final,string,old,master,node,internal,cluster,get,master,name,for,string,node,nodes,ensure,stable,cluster,3,node,assert,master,old,master,node,nodes,single,node,disruption,master,node,disruption,new,long,gcdisruption,random,old,master,node,final,list,string,majority,side,new,array,list,nodes,majority,side,remove,old,master,node,final,map,string,list,tuple,string,string,masters,collections,synchronized,map,new,hash,map,string,list,tuple,string,string,for,final,string,node,majority,side,masters,put,node,new,array,list,tuple,string,string,internal,cluster,get,instance,cluster,service,class,node,add,listener,event,discovery,node,previous,master,event,previous,state,nodes,get,master,node,discovery,node,current,master,event,state,nodes,get,master,node,if,objects,equals,previous,master,current,master,logger,info,node,received,new,cluster,state,n,and,had,previous,cluster,state,node,event,state,event,previous,state,string,previous,master,node,name,previous,master,null,previous,master,get,name,null,string,current,master,node,name,current,master,null,current,master,get,name,null,masters,get,node,add,new,tuple,previous,master,node,name,current,master,node,name,final,count,down,latch,old,master,node,stepped,down,new,count,down,latch,1,internal,cluster,get,instance,cluster,service,class,old,master,node,add,listener,event,if,event,state,nodes,get,master,node,id,null,old,master,node,stepped,down,count,down,internal,cluster,set,disruption,scheme,master,node,disruption,logger,info,freezing,node,old,master,node,master,node,disruption,start,disrupting,assert,different,master,majority,side,get,0,old,master,node,assert,different,master,majority,side,get,1,old,master,node,boolean,failed,true,try,assert,discovery,completed,majority,side,failed,false,finally,if,failed,logger,error,discovery,failed,to,complete,probably,caused,by,a,blocked,thread,new,hot,threads,busiest,threads,integer,ignore,idle,threads,false,detect,internal,cluster,get,instance,cluster,service,class,old,master,node,submit,state,update,task,sneaky,update,new,cluster,state,update,task,priority,immediate,override,public,cluster,state,execute,cluster,state,current,state,throws,exception,return,cluster,state,builder,current,state,build,override,public,void,on,failure,string,source,exception,e,logger,warn,new,parameterized,message,failure,source,e,final,string,new,master,node,internal,cluster,get,master,name,majority,side,get,0,logger,info,new,detected,master,node,new,master,node,logger,info,unfreeze,node,old,master,node,master,node,disruption,stop,disrupting,old,master,node,stepped,down,await,30,time,unit,seconds,assert,discovery,completed,nodes,assert,master,new,master,node,nodes,assert,that,masters,size,equal,to,2,for,map,entry,string,list,tuple,string,string,entry,masters,entry,set,string,node,name,entry,get,key,list,tuple,string,string,recorded,master,transition,entry,get,value,assert,that,node,name,each,node,should,only,record,two,master,node,transitions,recorded,master,transition,size,equal,to,2,assert,that,node,name,first,transition,s,previous,master,should,be,null,recorded,master,transition,get,0,v1,equal,to,old,master,node,assert,that,node,name,first,transition,s,current,master,should,be,new,master,node,recorded,master,transition,get,0,v2,null,value,assert,that,node,name,second,transition,s,previous,master,should,be,null,recorded,master,transition,get,1,v1,null,value,assert,that,node,name,second,transition,s,current,master,should,be,new,master,node,recorded,master,transition,get,1,v2,equal,to,new,master,node
MasterDisruptionIT -> @TestLogging("_root:DEBUG,org.elasticsearch.cluster.service:TRACE,org.elasticsearch.test.disruption:TRACE")     public void testStaleMasterNotHijackingMajority() throws Exception;1545035674;Tests that emulates a frozen elected master node that unfreezes and pushes his cluster state to other nodes_that already are following another elected master node. These nodes should reject this cluster state and prevent_them from following the stale master.;@TestLogging("_root:DEBUG,org.elasticsearch.cluster.service:TRACE,org.elasticsearch.test.disruption:TRACE")_    public void testStaleMasterNotHijackingMajority() throws Exception {_        _        final List<String> nodes = startCluster(3)___        _        final String oldMasterNode = internalCluster().getMasterName()__        for (String node : nodes) {_            ensureStableCluster(3, node)__        }_        assertMaster(oldMasterNode, nodes)___        _        SingleNodeDisruption masterNodeDisruption = new LongGCDisruption(random(), oldMasterNode)___        _        final List<String> majoritySide = new ArrayList<>(nodes)__        majoritySide.remove(oldMasterNode)___        _        final Map<String, List<Tuple<String, String>>> masters = Collections.synchronizedMap(new HashMap<>())__        for (final String node : majoritySide) {_            masters.put(node, new ArrayList<>())__            internalCluster().getInstance(ClusterService.class, node).addListener(event -> {_                DiscoveryNode previousMaster = event.previousState().nodes().getMasterNode()__                DiscoveryNode currentMaster = event.state().nodes().getMasterNode()__                if (!Objects.equals(previousMaster, currentMaster)) {_                    logger.info("node {} received new cluster state: {} \n and had previous cluster state: {}", node, event.state(),_                            event.previousState())__                    String previousMasterNodeName = previousMaster != null ? previousMaster.getName() : null__                    String currentMasterNodeName = currentMaster != null ? currentMaster.getName() : null__                    masters.get(node).add(new Tuple<>(previousMasterNodeName, currentMasterNodeName))__                }_            })__        }__        final CountDownLatch oldMasterNodeSteppedDown = new CountDownLatch(1)__        internalCluster().getInstance(ClusterService.class, oldMasterNode).addListener(event -> {_            if (event.state().nodes().getMasterNodeId() == null) {_                oldMasterNodeSteppedDown.countDown()__            }_        })___        internalCluster().setDisruptionScheme(masterNodeDisruption)__        logger.info("freezing node [{}]", oldMasterNode)__        masterNodeDisruption.startDisrupting()___        _        assertDifferentMaster(majoritySide.get(0), oldMasterNode)__        assertDifferentMaster(majoritySide.get(1), oldMasterNode)___        _        _        boolean failed = true__        try {_            assertDiscoveryCompleted(majoritySide)__            failed = false__        } finally {_            if (failed) {_                logger.error("discovery failed to complete, probably caused by a blocked thread: {}",_                        new HotThreads().busiestThreads(Integer.MAX_VALUE).ignoreIdleThreads(false).detect())__            }_        }__        _        _        _        _        internalCluster().getInstance(ClusterService.class, oldMasterNode).submitStateUpdateTask("sneaky-update", new_                ClusterStateUpdateTask(Priority.IMMEDIATE) {_                    @Override_                    public ClusterState execute(ClusterState currentState) {_                        return ClusterState.builder(currentState).build()__                    }__                    @Override_                    public void onFailure(String source, Exception e) {_                        logger.warn(() -> new ParameterizedMessage("failure [{}]", source), e)__                    }_                })___        _        final String newMasterNode = internalCluster().getMasterName(majoritySide.get(0))__        logger.info("new detected master node [{}]", newMasterNode)___        _        logger.info("Unfreeze node [{}]", oldMasterNode)__        masterNodeDisruption.stopDisrupting()___        oldMasterNodeSteppedDown.await(30, TimeUnit.SECONDS)__        _        assertDiscoveryCompleted(nodes)__        assertMaster(newMasterNode, nodes)___        assertThat(masters.size(), equalTo(2))__        for (Map.Entry<String, List<Tuple<String, String>>> entry : masters.entrySet()) {_            String nodeName = entry.getKey()__            List<Tuple<String, String>> recordedMasterTransition = entry.getValue()__            assertThat("[" + nodeName + "] Each node should only record two master node transitions",_                recordedMasterTransition, hasSize(2))__            assertThat("[" + nodeName + "] First transition's previous master should be [" + oldMasterNode + "]",_                recordedMasterTransition.get(0).v1(), equalTo(oldMasterNode))__            assertThat("[" + nodeName + "] First transition's current master should be [null]",_                recordedMasterTransition.get(0).v2(), nullValue())__            assertThat("[" + nodeName + "] Second transition's previous master should be [null]",_                recordedMasterTransition.get(1).v1(), nullValue())__            assertThat("[" + nodeName + "] Second transition's current master should be [" + newMasterNode + "]",_                recordedMasterTransition.get(1).v2(), equalTo(newMasterNode))__        }_    };tests,that,emulates,a,frozen,elected,master,node,that,unfreezes,and,pushes,his,cluster,state,to,other,nodes,that,already,are,following,another,elected,master,node,these,nodes,should,reject,this,cluster,state,and,prevent,them,from,following,the,stale,master;test,logging,debug,org,elasticsearch,cluster,service,trace,org,elasticsearch,test,disruption,trace,public,void,test,stale,master,not,hijacking,majority,throws,exception,final,list,string,nodes,start,cluster,3,final,string,old,master,node,internal,cluster,get,master,name,for,string,node,nodes,ensure,stable,cluster,3,node,assert,master,old,master,node,nodes,single,node,disruption,master,node,disruption,new,long,gcdisruption,random,old,master,node,final,list,string,majority,side,new,array,list,nodes,majority,side,remove,old,master,node,final,map,string,list,tuple,string,string,masters,collections,synchronized,map,new,hash,map,for,final,string,node,majority,side,masters,put,node,new,array,list,internal,cluster,get,instance,cluster,service,class,node,add,listener,event,discovery,node,previous,master,event,previous,state,nodes,get,master,node,discovery,node,current,master,event,state,nodes,get,master,node,if,objects,equals,previous,master,current,master,logger,info,node,received,new,cluster,state,n,and,had,previous,cluster,state,node,event,state,event,previous,state,string,previous,master,node,name,previous,master,null,previous,master,get,name,null,string,current,master,node,name,current,master,null,current,master,get,name,null,masters,get,node,add,new,tuple,previous,master,node,name,current,master,node,name,final,count,down,latch,old,master,node,stepped,down,new,count,down,latch,1,internal,cluster,get,instance,cluster,service,class,old,master,node,add,listener,event,if,event,state,nodes,get,master,node,id,null,old,master,node,stepped,down,count,down,internal,cluster,set,disruption,scheme,master,node,disruption,logger,info,freezing,node,old,master,node,master,node,disruption,start,disrupting,assert,different,master,majority,side,get,0,old,master,node,assert,different,master,majority,side,get,1,old,master,node,boolean,failed,true,try,assert,discovery,completed,majority,side,failed,false,finally,if,failed,logger,error,discovery,failed,to,complete,probably,caused,by,a,blocked,thread,new,hot,threads,busiest,threads,integer,ignore,idle,threads,false,detect,internal,cluster,get,instance,cluster,service,class,old,master,node,submit,state,update,task,sneaky,update,new,cluster,state,update,task,priority,immediate,override,public,cluster,state,execute,cluster,state,current,state,return,cluster,state,builder,current,state,build,override,public,void,on,failure,string,source,exception,e,logger,warn,new,parameterized,message,failure,source,e,final,string,new,master,node,internal,cluster,get,master,name,majority,side,get,0,logger,info,new,detected,master,node,new,master,node,logger,info,unfreeze,node,old,master,node,master,node,disruption,stop,disrupting,old,master,node,stepped,down,await,30,time,unit,seconds,assert,discovery,completed,nodes,assert,master,new,master,node,nodes,assert,that,masters,size,equal,to,2,for,map,entry,string,list,tuple,string,string,entry,masters,entry,set,string,node,name,entry,get,key,list,tuple,string,string,recorded,master,transition,entry,get,value,assert,that,node,name,each,node,should,only,record,two,master,node,transitions,recorded,master,transition,has,size,2,assert,that,node,name,first,transition,s,previous,master,should,be,old,master,node,recorded,master,transition,get,0,v1,equal,to,old,master,node,assert,that,node,name,first,transition,s,current,master,should,be,null,recorded,master,transition,get,0,v2,null,value,assert,that,node,name,second,transition,s,previous,master,should,be,null,recorded,master,transition,get,1,v1,null,value,assert,that,node,name,second,transition,s,current,master,should,be,new,master,node,recorded,master,transition,get,1,v2,equal,to,new,master,node
MasterDisruptionIT -> @TestLogging("_root:DEBUG,org.elasticsearch.cluster.service:TRACE,org.elasticsearch.test.disruption:TRACE")     public void testStaleMasterNotHijackingMajority() throws Exception;1548878955;Tests that emulates a frozen elected master node that unfreezes and pushes his cluster state to other nodes_that already are following another elected master node. These nodes should reject this cluster state and prevent_them from following the stale master.;@TestLogging("_root:DEBUG,org.elasticsearch.cluster.service:TRACE,org.elasticsearch.test.disruption:TRACE")_    public void testStaleMasterNotHijackingMajority() throws Exception {_        _        final List<String> nodes = startCluster(3)___        _        final String oldMasterNode = internalCluster().getMasterName()__        for (String node : nodes) {_            ensureStableCluster(3, node)__        }_        assertMaster(oldMasterNode, nodes)___        _        SingleNodeDisruption masterNodeDisruption = new LongGCDisruption(random(), oldMasterNode)___        _        final List<String> majoritySide = new ArrayList<>(nodes)__        majoritySide.remove(oldMasterNode)___        _        final Map<String, List<Tuple<String, String>>> masters = Collections.synchronizedMap(new HashMap<>())__        for (final String node : majoritySide) {_            masters.put(node, new ArrayList<>())__            internalCluster().getInstance(ClusterService.class, node).addListener(event -> {_                DiscoveryNode previousMaster = event.previousState().nodes().getMasterNode()__                DiscoveryNode currentMaster = event.state().nodes().getMasterNode()__                if (!Objects.equals(previousMaster, currentMaster)) {_                    logger.info("node {} received new cluster state: {} \n and had previous cluster state: {}", node, event.state(),_                            event.previousState())__                    String previousMasterNodeName = previousMaster != null ? previousMaster.getName() : null__                    String currentMasterNodeName = currentMaster != null ? currentMaster.getName() : null__                    masters.get(node).add(new Tuple<>(previousMasterNodeName, currentMasterNodeName))__                }_            })__        }__        final CountDownLatch oldMasterNodeSteppedDown = new CountDownLatch(1)__        internalCluster().getInstance(ClusterService.class, oldMasterNode).addListener(event -> {_            if (event.state().nodes().getMasterNodeId() == null) {_                oldMasterNodeSteppedDown.countDown()__            }_        })___        internalCluster().setDisruptionScheme(masterNodeDisruption)__        logger.info("freezing node [{}]", oldMasterNode)__        masterNodeDisruption.startDisrupting()___        _        assertDifferentMaster(majoritySide.get(0), oldMasterNode)__        assertDifferentMaster(majoritySide.get(1), oldMasterNode)___        _        _        boolean failed = true__        try {_            assertDiscoveryCompleted(majoritySide)__            failed = false__        } finally {_            if (failed) {_                logger.error("discovery failed to complete, probably caused by a blocked thread: {}",_                        new HotThreads().busiestThreads(Integer.MAX_VALUE).ignoreIdleThreads(false).detect())__            }_        }__        _        _        _        _        internalCluster().getInstance(ClusterService.class, oldMasterNode).submitStateUpdateTask("sneaky-update", new_                ClusterStateUpdateTask(Priority.IMMEDIATE) {_                    @Override_                    public ClusterState execute(ClusterState currentState) {_                        return ClusterState.builder(currentState).build()__                    }__                    @Override_                    public void onFailure(String source, Exception e) {_                        logger.warn(() -> new ParameterizedMessage("failure [{}]", source), e)__                    }_                })___        _        final String newMasterNode = internalCluster().getMasterName(majoritySide.get(0))__        logger.info("new detected master node [{}]", newMasterNode)___        _        logger.info("Unfreeze node [{}]", oldMasterNode)__        masterNodeDisruption.stopDisrupting()___        oldMasterNodeSteppedDown.await(30, TimeUnit.SECONDS)__        _        assertDiscoveryCompleted(nodes)__        assertMaster(newMasterNode, nodes)___        assertThat(masters.size(), equalTo(2))__        for (Map.Entry<String, List<Tuple<String, String>>> entry : masters.entrySet()) {_            String nodeName = entry.getKey()__            List<Tuple<String, String>> recordedMasterTransition = entry.getValue()__            assertThat("[" + nodeName + "] Each node should only record two master node transitions",_                recordedMasterTransition, hasSize(2))__            assertThat("[" + nodeName + "] First transition's previous master should be [" + oldMasterNode + "]",_                recordedMasterTransition.get(0).v1(), equalTo(oldMasterNode))__            assertThat("[" + nodeName + "] First transition's current master should be [null]",_                recordedMasterTransition.get(0).v2(), nullValue())__            assertThat("[" + nodeName + "] Second transition's previous master should be [null]",_                recordedMasterTransition.get(1).v1(), nullValue())__            assertThat("[" + nodeName + "] Second transition's current master should be [" + newMasterNode + "]",_                recordedMasterTransition.get(1).v2(), equalTo(newMasterNode))__        }_    };tests,that,emulates,a,frozen,elected,master,node,that,unfreezes,and,pushes,his,cluster,state,to,other,nodes,that,already,are,following,another,elected,master,node,these,nodes,should,reject,this,cluster,state,and,prevent,them,from,following,the,stale,master;test,logging,debug,org,elasticsearch,cluster,service,trace,org,elasticsearch,test,disruption,trace,public,void,test,stale,master,not,hijacking,majority,throws,exception,final,list,string,nodes,start,cluster,3,final,string,old,master,node,internal,cluster,get,master,name,for,string,node,nodes,ensure,stable,cluster,3,node,assert,master,old,master,node,nodes,single,node,disruption,master,node,disruption,new,long,gcdisruption,random,old,master,node,final,list,string,majority,side,new,array,list,nodes,majority,side,remove,old,master,node,final,map,string,list,tuple,string,string,masters,collections,synchronized,map,new,hash,map,for,final,string,node,majority,side,masters,put,node,new,array,list,internal,cluster,get,instance,cluster,service,class,node,add,listener,event,discovery,node,previous,master,event,previous,state,nodes,get,master,node,discovery,node,current,master,event,state,nodes,get,master,node,if,objects,equals,previous,master,current,master,logger,info,node,received,new,cluster,state,n,and,had,previous,cluster,state,node,event,state,event,previous,state,string,previous,master,node,name,previous,master,null,previous,master,get,name,null,string,current,master,node,name,current,master,null,current,master,get,name,null,masters,get,node,add,new,tuple,previous,master,node,name,current,master,node,name,final,count,down,latch,old,master,node,stepped,down,new,count,down,latch,1,internal,cluster,get,instance,cluster,service,class,old,master,node,add,listener,event,if,event,state,nodes,get,master,node,id,null,old,master,node,stepped,down,count,down,internal,cluster,set,disruption,scheme,master,node,disruption,logger,info,freezing,node,old,master,node,master,node,disruption,start,disrupting,assert,different,master,majority,side,get,0,old,master,node,assert,different,master,majority,side,get,1,old,master,node,boolean,failed,true,try,assert,discovery,completed,majority,side,failed,false,finally,if,failed,logger,error,discovery,failed,to,complete,probably,caused,by,a,blocked,thread,new,hot,threads,busiest,threads,integer,ignore,idle,threads,false,detect,internal,cluster,get,instance,cluster,service,class,old,master,node,submit,state,update,task,sneaky,update,new,cluster,state,update,task,priority,immediate,override,public,cluster,state,execute,cluster,state,current,state,return,cluster,state,builder,current,state,build,override,public,void,on,failure,string,source,exception,e,logger,warn,new,parameterized,message,failure,source,e,final,string,new,master,node,internal,cluster,get,master,name,majority,side,get,0,logger,info,new,detected,master,node,new,master,node,logger,info,unfreeze,node,old,master,node,master,node,disruption,stop,disrupting,old,master,node,stepped,down,await,30,time,unit,seconds,assert,discovery,completed,nodes,assert,master,new,master,node,nodes,assert,that,masters,size,equal,to,2,for,map,entry,string,list,tuple,string,string,entry,masters,entry,set,string,node,name,entry,get,key,list,tuple,string,string,recorded,master,transition,entry,get,value,assert,that,node,name,each,node,should,only,record,two,master,node,transitions,recorded,master,transition,has,size,2,assert,that,node,name,first,transition,s,previous,master,should,be,old,master,node,recorded,master,transition,get,0,v1,equal,to,old,master,node,assert,that,node,name,first,transition,s,current,master,should,be,null,recorded,master,transition,get,0,v2,null,value,assert,that,node,name,second,transition,s,previous,master,should,be,null,recorded,master,transition,get,1,v1,null,value,assert,that,node,name,second,transition,s,current,master,should,be,new,master,node,recorded,master,transition,get,1,v2,equal,to,new,master,node
MasterDisruptionIT -> @TestLogging("_root:DEBUG,org.elasticsearch.cluster.service:TRACE,org.elasticsearch.test.disruption:TRACE")     public void testStaleMasterNotHijackingMajority() throws Exception;1549008649;Tests that emulates a frozen elected master node that unfreezes and pushes his cluster state to other nodes_that already are following another elected master node. These nodes should reject this cluster state and prevent_them from following the stale master.;@TestLogging("_root:DEBUG,org.elasticsearch.cluster.service:TRACE,org.elasticsearch.test.disruption:TRACE")_    public void testStaleMasterNotHijackingMajority() throws Exception {_        _        final List<String> nodes = startCluster(3)___        _        final String oldMasterNode = internalCluster().getMasterName()__        for (String node : nodes) {_            ensureStableCluster(3, node)__        }_        assertMaster(oldMasterNode, nodes)___        _        SingleNodeDisruption masterNodeDisruption = new LongGCDisruption(random(), oldMasterNode)___        _        final List<String> majoritySide = new ArrayList<>(nodes)__        majoritySide.remove(oldMasterNode)___        _        final Map<String, List<Tuple<String, String>>> masters = Collections.synchronizedMap(new HashMap<>())__        for (final String node : majoritySide) {_            masters.put(node, new ArrayList<>())__            internalCluster().getInstance(ClusterService.class, node).addListener(event -> {_                DiscoveryNode previousMaster = event.previousState().nodes().getMasterNode()__                DiscoveryNode currentMaster = event.state().nodes().getMasterNode()__                if (!Objects.equals(previousMaster, currentMaster)) {_                    logger.info("node {} received new cluster state: {} \n and had previous cluster state: {}", node, event.state(),_                            event.previousState())__                    String previousMasterNodeName = previousMaster != null ? previousMaster.getName() : null__                    String currentMasterNodeName = currentMaster != null ? currentMaster.getName() : null__                    masters.get(node).add(new Tuple<>(previousMasterNodeName, currentMasterNodeName))__                }_            })__        }__        final CountDownLatch oldMasterNodeSteppedDown = new CountDownLatch(1)__        internalCluster().getInstance(ClusterService.class, oldMasterNode).addListener(event -> {_            if (event.state().nodes().getMasterNodeId() == null) {_                oldMasterNodeSteppedDown.countDown()__            }_        })___        internalCluster().setDisruptionScheme(masterNodeDisruption)__        logger.info("freezing node [{}]", oldMasterNode)__        masterNodeDisruption.startDisrupting()___        _        assertDifferentMaster(majoritySide.get(0), oldMasterNode)__        assertDifferentMaster(majoritySide.get(1), oldMasterNode)___        _        _        boolean failed = true__        try {_            assertDiscoveryCompleted(majoritySide)__            failed = false__        } finally {_            if (failed) {_                logger.error("discovery failed to complete, probably caused by a blocked thread: {}",_                        new HotThreads().busiestThreads(Integer.MAX_VALUE).ignoreIdleThreads(false).detect())__            }_        }__        _        _        _        _        internalCluster().getInstance(ClusterService.class, oldMasterNode).submitStateUpdateTask("sneaky-update", new_                ClusterStateUpdateTask(Priority.IMMEDIATE) {_                    @Override_                    public ClusterState execute(ClusterState currentState) {_                        return ClusterState.builder(currentState).build()__                    }__                    @Override_                    public void onFailure(String source, Exception e) {_                        logger.warn(() -> new ParameterizedMessage("failure [{}]", source), e)__                    }_                })___        _        final String newMasterNode = internalCluster().getMasterName(majoritySide.get(0))__        logger.info("new detected master node [{}]", newMasterNode)___        _        logger.info("Unfreeze node [{}]", oldMasterNode)__        masterNodeDisruption.stopDisrupting()___        oldMasterNodeSteppedDown.await(30, TimeUnit.SECONDS)__        _        assertDiscoveryCompleted(nodes)__        assertMaster(newMasterNode, nodes)___        assertThat(masters.size(), equalTo(2))__        for (Map.Entry<String, List<Tuple<String, String>>> entry : masters.entrySet()) {_            String nodeName = entry.getKey()__            List<Tuple<String, String>> recordedMasterTransition = entry.getValue()__            assertThat("[" + nodeName + "] Each node should only record two master node transitions",_                recordedMasterTransition, hasSize(2))__            assertThat("[" + nodeName + "] First transition's previous master should be [" + oldMasterNode + "]",_                recordedMasterTransition.get(0).v1(), equalTo(oldMasterNode))__            assertThat("[" + nodeName + "] First transition's current master should be [null]",_                recordedMasterTransition.get(0).v2(), nullValue())__            assertThat("[" + nodeName + "] Second transition's previous master should be [null]",_                recordedMasterTransition.get(1).v1(), nullValue())__            assertThat("[" + nodeName + "] Second transition's current master should be [" + newMasterNode + "]",_                recordedMasterTransition.get(1).v2(), equalTo(newMasterNode))__        }_    };tests,that,emulates,a,frozen,elected,master,node,that,unfreezes,and,pushes,his,cluster,state,to,other,nodes,that,already,are,following,another,elected,master,node,these,nodes,should,reject,this,cluster,state,and,prevent,them,from,following,the,stale,master;test,logging,debug,org,elasticsearch,cluster,service,trace,org,elasticsearch,test,disruption,trace,public,void,test,stale,master,not,hijacking,majority,throws,exception,final,list,string,nodes,start,cluster,3,final,string,old,master,node,internal,cluster,get,master,name,for,string,node,nodes,ensure,stable,cluster,3,node,assert,master,old,master,node,nodes,single,node,disruption,master,node,disruption,new,long,gcdisruption,random,old,master,node,final,list,string,majority,side,new,array,list,nodes,majority,side,remove,old,master,node,final,map,string,list,tuple,string,string,masters,collections,synchronized,map,new,hash,map,for,final,string,node,majority,side,masters,put,node,new,array,list,internal,cluster,get,instance,cluster,service,class,node,add,listener,event,discovery,node,previous,master,event,previous,state,nodes,get,master,node,discovery,node,current,master,event,state,nodes,get,master,node,if,objects,equals,previous,master,current,master,logger,info,node,received,new,cluster,state,n,and,had,previous,cluster,state,node,event,state,event,previous,state,string,previous,master,node,name,previous,master,null,previous,master,get,name,null,string,current,master,node,name,current,master,null,current,master,get,name,null,masters,get,node,add,new,tuple,previous,master,node,name,current,master,node,name,final,count,down,latch,old,master,node,stepped,down,new,count,down,latch,1,internal,cluster,get,instance,cluster,service,class,old,master,node,add,listener,event,if,event,state,nodes,get,master,node,id,null,old,master,node,stepped,down,count,down,internal,cluster,set,disruption,scheme,master,node,disruption,logger,info,freezing,node,old,master,node,master,node,disruption,start,disrupting,assert,different,master,majority,side,get,0,old,master,node,assert,different,master,majority,side,get,1,old,master,node,boolean,failed,true,try,assert,discovery,completed,majority,side,failed,false,finally,if,failed,logger,error,discovery,failed,to,complete,probably,caused,by,a,blocked,thread,new,hot,threads,busiest,threads,integer,ignore,idle,threads,false,detect,internal,cluster,get,instance,cluster,service,class,old,master,node,submit,state,update,task,sneaky,update,new,cluster,state,update,task,priority,immediate,override,public,cluster,state,execute,cluster,state,current,state,return,cluster,state,builder,current,state,build,override,public,void,on,failure,string,source,exception,e,logger,warn,new,parameterized,message,failure,source,e,final,string,new,master,node,internal,cluster,get,master,name,majority,side,get,0,logger,info,new,detected,master,node,new,master,node,logger,info,unfreeze,node,old,master,node,master,node,disruption,stop,disrupting,old,master,node,stepped,down,await,30,time,unit,seconds,assert,discovery,completed,nodes,assert,master,new,master,node,nodes,assert,that,masters,size,equal,to,2,for,map,entry,string,list,tuple,string,string,entry,masters,entry,set,string,node,name,entry,get,key,list,tuple,string,string,recorded,master,transition,entry,get,value,assert,that,node,name,each,node,should,only,record,two,master,node,transitions,recorded,master,transition,has,size,2,assert,that,node,name,first,transition,s,previous,master,should,be,old,master,node,recorded,master,transition,get,0,v1,equal,to,old,master,node,assert,that,node,name,first,transition,s,current,master,should,be,null,recorded,master,transition,get,0,v2,null,value,assert,that,node,name,second,transition,s,previous,master,should,be,null,recorded,master,transition,get,1,v1,null,value,assert,that,node,name,second,transition,s,current,master,should,be,new,master,node,recorded,master,transition,get,1,v2,equal,to,new,master,node
MasterDisruptionIT -> @TestLogging("_root:DEBUG,org.elasticsearch.cluster.service:TRACE,org.elasticsearch.test.disruption:TRACE")     public void testStaleMasterNotHijackingMajority() throws Exception;1549356476;Tests that emulates a frozen elected master node that unfreezes and pushes his cluster state to other nodes_that already are following another elected master node. These nodes should reject this cluster state and prevent_them from following the stale master.;@TestLogging("_root:DEBUG,org.elasticsearch.cluster.service:TRACE,org.elasticsearch.test.disruption:TRACE")_    public void testStaleMasterNotHijackingMajority() throws Exception {_        _        final List<String> nodes = startCluster(3)___        _        final String oldMasterNode = internalCluster().getMasterName()__        for (String node : nodes) {_            ensureStableCluster(3, node)__        }_        assertMaster(oldMasterNode, nodes)___        _        SingleNodeDisruption masterNodeDisruption = new LongGCDisruption(random(), oldMasterNode)___        _        final List<String> majoritySide = new ArrayList<>(nodes)__        majoritySide.remove(oldMasterNode)___        _        final Map<String, List<Tuple<String, String>>> masters = Collections.synchronizedMap(new HashMap<>())__        for (final String node : majoritySide) {_            masters.put(node, new ArrayList<>())__            internalCluster().getInstance(ClusterService.class, node).addListener(event -> {_                DiscoveryNode previousMaster = event.previousState().nodes().getMasterNode()__                DiscoveryNode currentMaster = event.state().nodes().getMasterNode()__                if (!Objects.equals(previousMaster, currentMaster)) {_                    logger.info("node {} received new cluster state: {} \n and had previous cluster state: {}", node, event.state(),_                            event.previousState())__                    String previousMasterNodeName = previousMaster != null ? previousMaster.getName() : null__                    String currentMasterNodeName = currentMaster != null ? currentMaster.getName() : null__                    masters.get(node).add(new Tuple<>(previousMasterNodeName, currentMasterNodeName))__                }_            })__        }__        final CountDownLatch oldMasterNodeSteppedDown = new CountDownLatch(1)__        internalCluster().getInstance(ClusterService.class, oldMasterNode).addListener(event -> {_            if (event.state().nodes().getMasterNodeId() == null) {_                oldMasterNodeSteppedDown.countDown()__            }_        })___        internalCluster().setDisruptionScheme(masterNodeDisruption)__        logger.info("freezing node [{}]", oldMasterNode)__        masterNodeDisruption.startDisrupting()___        _        assertDifferentMaster(majoritySide.get(0), oldMasterNode)__        assertDifferentMaster(majoritySide.get(1), oldMasterNode)___        _        _        boolean failed = true__        try {_            assertDiscoveryCompleted(majoritySide)__            failed = false__        } finally {_            if (failed) {_                logger.error("discovery failed to complete, probably caused by a blocked thread: {}",_                        new HotThreads().busiestThreads(Integer.MAX_VALUE).ignoreIdleThreads(false).detect())__            }_        }__        _        _        _        _        internalCluster().getInstance(ClusterService.class, oldMasterNode).submitStateUpdateTask("sneaky-update", new_                ClusterStateUpdateTask(Priority.IMMEDIATE) {_                    @Override_                    public ClusterState execute(ClusterState currentState) {_                        return ClusterState.builder(currentState).build()__                    }__                    @Override_                    public void onFailure(String source, Exception e) {_                        logger.warn(() -> new ParameterizedMessage("failure [{}]", source), e)__                    }_                })___        _        final String newMasterNode = internalCluster().getMasterName(majoritySide.get(0))__        logger.info("new detected master node [{}]", newMasterNode)___        _        logger.info("Unfreeze node [{}]", oldMasterNode)__        masterNodeDisruption.stopDisrupting()___        oldMasterNodeSteppedDown.await(30, TimeUnit.SECONDS)__        _        assertDiscoveryCompleted(nodes)__        assertMaster(newMasterNode, nodes)___        assertThat(masters.size(), equalTo(2))__        for (Map.Entry<String, List<Tuple<String, String>>> entry : masters.entrySet()) {_            String nodeName = entry.getKey()__            List<Tuple<String, String>> recordedMasterTransition = entry.getValue()__            assertThat("[" + nodeName + "] Each node should only record two master node transitions",_                recordedMasterTransition, hasSize(2))__            assertThat("[" + nodeName + "] First transition's previous master should be [" + oldMasterNode + "]",_                recordedMasterTransition.get(0).v1(), equalTo(oldMasterNode))__            assertThat("[" + nodeName + "] First transition's current master should be [null]",_                recordedMasterTransition.get(0).v2(), nullValue())__            assertThat("[" + nodeName + "] Second transition's previous master should be [null]",_                recordedMasterTransition.get(1).v1(), nullValue())__            assertThat("[" + nodeName + "] Second transition's current master should be [" + newMasterNode + "]",_                recordedMasterTransition.get(1).v2(), equalTo(newMasterNode))__        }_    };tests,that,emulates,a,frozen,elected,master,node,that,unfreezes,and,pushes,his,cluster,state,to,other,nodes,that,already,are,following,another,elected,master,node,these,nodes,should,reject,this,cluster,state,and,prevent,them,from,following,the,stale,master;test,logging,debug,org,elasticsearch,cluster,service,trace,org,elasticsearch,test,disruption,trace,public,void,test,stale,master,not,hijacking,majority,throws,exception,final,list,string,nodes,start,cluster,3,final,string,old,master,node,internal,cluster,get,master,name,for,string,node,nodes,ensure,stable,cluster,3,node,assert,master,old,master,node,nodes,single,node,disruption,master,node,disruption,new,long,gcdisruption,random,old,master,node,final,list,string,majority,side,new,array,list,nodes,majority,side,remove,old,master,node,final,map,string,list,tuple,string,string,masters,collections,synchronized,map,new,hash,map,for,final,string,node,majority,side,masters,put,node,new,array,list,internal,cluster,get,instance,cluster,service,class,node,add,listener,event,discovery,node,previous,master,event,previous,state,nodes,get,master,node,discovery,node,current,master,event,state,nodes,get,master,node,if,objects,equals,previous,master,current,master,logger,info,node,received,new,cluster,state,n,and,had,previous,cluster,state,node,event,state,event,previous,state,string,previous,master,node,name,previous,master,null,previous,master,get,name,null,string,current,master,node,name,current,master,null,current,master,get,name,null,masters,get,node,add,new,tuple,previous,master,node,name,current,master,node,name,final,count,down,latch,old,master,node,stepped,down,new,count,down,latch,1,internal,cluster,get,instance,cluster,service,class,old,master,node,add,listener,event,if,event,state,nodes,get,master,node,id,null,old,master,node,stepped,down,count,down,internal,cluster,set,disruption,scheme,master,node,disruption,logger,info,freezing,node,old,master,node,master,node,disruption,start,disrupting,assert,different,master,majority,side,get,0,old,master,node,assert,different,master,majority,side,get,1,old,master,node,boolean,failed,true,try,assert,discovery,completed,majority,side,failed,false,finally,if,failed,logger,error,discovery,failed,to,complete,probably,caused,by,a,blocked,thread,new,hot,threads,busiest,threads,integer,ignore,idle,threads,false,detect,internal,cluster,get,instance,cluster,service,class,old,master,node,submit,state,update,task,sneaky,update,new,cluster,state,update,task,priority,immediate,override,public,cluster,state,execute,cluster,state,current,state,return,cluster,state,builder,current,state,build,override,public,void,on,failure,string,source,exception,e,logger,warn,new,parameterized,message,failure,source,e,final,string,new,master,node,internal,cluster,get,master,name,majority,side,get,0,logger,info,new,detected,master,node,new,master,node,logger,info,unfreeze,node,old,master,node,master,node,disruption,stop,disrupting,old,master,node,stepped,down,await,30,time,unit,seconds,assert,discovery,completed,nodes,assert,master,new,master,node,nodes,assert,that,masters,size,equal,to,2,for,map,entry,string,list,tuple,string,string,entry,masters,entry,set,string,node,name,entry,get,key,list,tuple,string,string,recorded,master,transition,entry,get,value,assert,that,node,name,each,node,should,only,record,two,master,node,transitions,recorded,master,transition,has,size,2,assert,that,node,name,first,transition,s,previous,master,should,be,old,master,node,recorded,master,transition,get,0,v1,equal,to,old,master,node,assert,that,node,name,first,transition,s,current,master,should,be,null,recorded,master,transition,get,0,v2,null,value,assert,that,node,name,second,transition,s,previous,master,should,be,null,recorded,master,transition,get,1,v1,null,value,assert,that,node,name,second,transition,s,current,master,should,be,new,master,node,recorded,master,transition,get,1,v2,equal,to,new,master,node
MasterDisruptionIT -> @TestLogging("_root:DEBUG,org.elasticsearch.cluster.service:TRACE,org.elasticsearch.test.disruption:TRACE")     public void testStaleMasterNotHijackingMajority() throws Exception;1549452878;Tests that emulates a frozen elected master node that unfreezes and pushes his cluster state to other nodes_that already are following another elected master node. These nodes should reject this cluster state and prevent_them from following the stale master.;@TestLogging("_root:DEBUG,org.elasticsearch.cluster.service:TRACE,org.elasticsearch.test.disruption:TRACE")_    public void testStaleMasterNotHijackingMajority() throws Exception {_        final List<String> nodes = startCluster(3)___        _        final String oldMasterNode = internalCluster().getMasterName()__        for (String node : nodes) {_            ensureStableCluster(3, node)__        }_        assertMaster(oldMasterNode, nodes)___        _        SingleNodeDisruption masterNodeDisruption = new LongGCDisruption(random(), oldMasterNode)___        _        final List<String> majoritySide = new ArrayList<>(nodes)__        majoritySide.remove(oldMasterNode)___        _        final Map<String, List<Tuple<String, String>>> masters = Collections.synchronizedMap(new HashMap<>())__        for (final String node : majoritySide) {_            masters.put(node, new ArrayList<>())__            internalCluster().getInstance(ClusterService.class, node).addListener(event -> {_                DiscoveryNode previousMaster = event.previousState().nodes().getMasterNode()__                DiscoveryNode currentMaster = event.state().nodes().getMasterNode()__                if (!Objects.equals(previousMaster, currentMaster)) {_                    logger.info("node {} received new cluster state: {} \n and had previous cluster state: {}", node, event.state(),_                            event.previousState())__                    String previousMasterNodeName = previousMaster != null ? previousMaster.getName() : null__                    String currentMasterNodeName = currentMaster != null ? currentMaster.getName() : null__                    masters.get(node).add(new Tuple<>(previousMasterNodeName, currentMasterNodeName))__                }_            })__        }__        final CountDownLatch oldMasterNodeSteppedDown = new CountDownLatch(1)__        internalCluster().getInstance(ClusterService.class, oldMasterNode).addListener(event -> {_            if (event.state().nodes().getMasterNodeId() == null) {_                oldMasterNodeSteppedDown.countDown()__            }_        })___        internalCluster().setDisruptionScheme(masterNodeDisruption)__        logger.info("freezing node [{}]", oldMasterNode)__        masterNodeDisruption.startDisrupting()___        _        assertDifferentMaster(majoritySide.get(0), oldMasterNode)__        assertDifferentMaster(majoritySide.get(1), oldMasterNode)___        _        _        boolean failed = true__        try {_            assertDiscoveryCompleted(majoritySide)__            failed = false__        } finally {_            if (failed) {_                logger.error("discovery failed to complete, probably caused by a blocked thread: {}",_                        new HotThreads().busiestThreads(Integer.MAX_VALUE).ignoreIdleThreads(false).detect())__            }_        }__        _        _        _        _        internalCluster().getInstance(ClusterService.class, oldMasterNode).submitStateUpdateTask("sneaky-update", new_                ClusterStateUpdateTask(Priority.IMMEDIATE) {_                    @Override_                    public ClusterState execute(ClusterState currentState) {_                        return ClusterState.builder(currentState).build()__                    }__                    @Override_                    public void onFailure(String source, Exception e) {_                        logger.warn(() -> new ParameterizedMessage("failure [{}]", source), e)__                    }_                })___        _        final String newMasterNode = internalCluster().getMasterName(majoritySide.get(0))__        logger.info("new detected master node [{}]", newMasterNode)___        _        logger.info("Unfreeze node [{}]", oldMasterNode)__        masterNodeDisruption.stopDisrupting()___        oldMasterNodeSteppedDown.await(30, TimeUnit.SECONDS)__        _        assertDiscoveryCompleted(nodes)__        assertMaster(newMasterNode, nodes)___        assertThat(masters.size(), equalTo(2))__        for (Map.Entry<String, List<Tuple<String, String>>> entry : masters.entrySet()) {_            String nodeName = entry.getKey()__            List<Tuple<String, String>> recordedMasterTransition = entry.getValue()__            assertThat("[" + nodeName + "] Each node should only record two master node transitions",_                recordedMasterTransition, hasSize(2))__            assertThat("[" + nodeName + "] First transition's previous master should be [" + oldMasterNode + "]",_                recordedMasterTransition.get(0).v1(), equalTo(oldMasterNode))__            assertThat("[" + nodeName + "] First transition's current master should be [null]",_                recordedMasterTransition.get(0).v2(), nullValue())__            assertThat("[" + nodeName + "] Second transition's previous master should be [null]",_                recordedMasterTransition.get(1).v1(), nullValue())__            assertThat("[" + nodeName + "] Second transition's current master should be [" + newMasterNode + "]",_                recordedMasterTransition.get(1).v2(), equalTo(newMasterNode))__        }_    };tests,that,emulates,a,frozen,elected,master,node,that,unfreezes,and,pushes,his,cluster,state,to,other,nodes,that,already,are,following,another,elected,master,node,these,nodes,should,reject,this,cluster,state,and,prevent,them,from,following,the,stale,master;test,logging,debug,org,elasticsearch,cluster,service,trace,org,elasticsearch,test,disruption,trace,public,void,test,stale,master,not,hijacking,majority,throws,exception,final,list,string,nodes,start,cluster,3,final,string,old,master,node,internal,cluster,get,master,name,for,string,node,nodes,ensure,stable,cluster,3,node,assert,master,old,master,node,nodes,single,node,disruption,master,node,disruption,new,long,gcdisruption,random,old,master,node,final,list,string,majority,side,new,array,list,nodes,majority,side,remove,old,master,node,final,map,string,list,tuple,string,string,masters,collections,synchronized,map,new,hash,map,for,final,string,node,majority,side,masters,put,node,new,array,list,internal,cluster,get,instance,cluster,service,class,node,add,listener,event,discovery,node,previous,master,event,previous,state,nodes,get,master,node,discovery,node,current,master,event,state,nodes,get,master,node,if,objects,equals,previous,master,current,master,logger,info,node,received,new,cluster,state,n,and,had,previous,cluster,state,node,event,state,event,previous,state,string,previous,master,node,name,previous,master,null,previous,master,get,name,null,string,current,master,node,name,current,master,null,current,master,get,name,null,masters,get,node,add,new,tuple,previous,master,node,name,current,master,node,name,final,count,down,latch,old,master,node,stepped,down,new,count,down,latch,1,internal,cluster,get,instance,cluster,service,class,old,master,node,add,listener,event,if,event,state,nodes,get,master,node,id,null,old,master,node,stepped,down,count,down,internal,cluster,set,disruption,scheme,master,node,disruption,logger,info,freezing,node,old,master,node,master,node,disruption,start,disrupting,assert,different,master,majority,side,get,0,old,master,node,assert,different,master,majority,side,get,1,old,master,node,boolean,failed,true,try,assert,discovery,completed,majority,side,failed,false,finally,if,failed,logger,error,discovery,failed,to,complete,probably,caused,by,a,blocked,thread,new,hot,threads,busiest,threads,integer,ignore,idle,threads,false,detect,internal,cluster,get,instance,cluster,service,class,old,master,node,submit,state,update,task,sneaky,update,new,cluster,state,update,task,priority,immediate,override,public,cluster,state,execute,cluster,state,current,state,return,cluster,state,builder,current,state,build,override,public,void,on,failure,string,source,exception,e,logger,warn,new,parameterized,message,failure,source,e,final,string,new,master,node,internal,cluster,get,master,name,majority,side,get,0,logger,info,new,detected,master,node,new,master,node,logger,info,unfreeze,node,old,master,node,master,node,disruption,stop,disrupting,old,master,node,stepped,down,await,30,time,unit,seconds,assert,discovery,completed,nodes,assert,master,new,master,node,nodes,assert,that,masters,size,equal,to,2,for,map,entry,string,list,tuple,string,string,entry,masters,entry,set,string,node,name,entry,get,key,list,tuple,string,string,recorded,master,transition,entry,get,value,assert,that,node,name,each,node,should,only,record,two,master,node,transitions,recorded,master,transition,has,size,2,assert,that,node,name,first,transition,s,previous,master,should,be,old,master,node,recorded,master,transition,get,0,v1,equal,to,old,master,node,assert,that,node,name,first,transition,s,current,master,should,be,null,recorded,master,transition,get,0,v2,null,value,assert,that,node,name,second,transition,s,previous,master,should,be,null,recorded,master,transition,get,1,v1,null,value,assert,that,node,name,second,transition,s,current,master,should,be,new,master,node,recorded,master,transition,get,1,v2,equal,to,new,master,node
MasterDisruptionIT -> public void testNodesFDAfterMasterReelection() throws Exception;1524684173;Verify that nodes fault detection works after master (re) election;public void testNodesFDAfterMasterReelection() throws Exception {_        startCluster(4)___        logger.info("--> stopping current master")__        internalCluster().stopCurrentMasterNode()___        ensureStableCluster(3)___        logger.info("--> reducing min master nodes to 2")__        assertAcked(client().admin().cluster().prepareUpdateSettings()_                .setTransientSettings(Settings.builder().put(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), 2))_                .get())___        String master = internalCluster().getMasterName()__        String nonMaster = null__        for (String node : internalCluster().getNodeNames()) {_            if (!node.equals(master)) {_                nonMaster = node__            }_        }__        logger.info("--> isolating [{}]", nonMaster)__        NetworkDisruption.TwoPartitions partitions = isolateNode(nonMaster)__        NetworkDisruption networkDisruption = addRandomDisruptionType(partitions)__        networkDisruption.startDisrupting()___        logger.info("--> waiting for master to remove it")__        ensureStableCluster(2, master)__    };verify,that,nodes,fault,detection,works,after,master,re,election;public,void,test,nodes,fdafter,master,reelection,throws,exception,start,cluster,4,logger,info,stopping,current,master,internal,cluster,stop,current,master,node,ensure,stable,cluster,3,logger,info,reducing,min,master,nodes,to,2,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,elect,master,service,get,key,2,get,string,master,internal,cluster,get,master,name,string,non,master,null,for,string,node,internal,cluster,get,node,names,if,node,equals,master,non,master,node,logger,info,isolating,non,master,network,disruption,two,partitions,partitions,isolate,node,non,master,network,disruption,network,disruption,add,random,disruption,type,partitions,network,disruption,start,disrupting,logger,info,waiting,for,master,to,remove,it,ensure,stable,cluster,2,master
MasterDisruptionIT -> public void testNodesFDAfterMasterReelection() throws Exception;1525162917;Verify that nodes fault detection works after master (re) election;public void testNodesFDAfterMasterReelection() throws Exception {_        startCluster(4)___        logger.info("--> stopping current master")__        internalCluster().stopCurrentMasterNode()___        ensureStableCluster(3)___        logger.info("--> reducing min master nodes to 2")__        assertAcked(client().admin().cluster().prepareUpdateSettings()_                .setTransientSettings(Settings.builder().put(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), 2))_                .get())___        String master = internalCluster().getMasterName()__        String nonMaster = null__        for (String node : internalCluster().getNodeNames()) {_            if (!node.equals(master)) {_                nonMaster = node__            }_        }__        logger.info("--> isolating [{}]", nonMaster)__        NetworkDisruption.TwoPartitions partitions = isolateNode(nonMaster)__        NetworkDisruption networkDisruption = addRandomDisruptionType(partitions)__        networkDisruption.startDisrupting()___        logger.info("--> waiting for master to remove it")__        ensureStableCluster(2, master)__    };verify,that,nodes,fault,detection,works,after,master,re,election;public,void,test,nodes,fdafter,master,reelection,throws,exception,start,cluster,4,logger,info,stopping,current,master,internal,cluster,stop,current,master,node,ensure,stable,cluster,3,logger,info,reducing,min,master,nodes,to,2,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,elect,master,service,get,key,2,get,string,master,internal,cluster,get,master,name,string,non,master,null,for,string,node,internal,cluster,get,node,names,if,node,equals,master,non,master,node,logger,info,isolating,non,master,network,disruption,two,partitions,partitions,isolate,node,non,master,network,disruption,network,disruption,add,random,disruption,type,partitions,network,disruption,start,disrupting,logger,info,waiting,for,master,to,remove,it,ensure,stable,cluster,2,master
MasterDisruptionIT -> public void testNodesFDAfterMasterReelection() throws Exception;1541008027;Verify that nodes fault detection works after master (re) election;public void testNodesFDAfterMasterReelection() throws Exception {_        startCluster(4)___        logger.info("--> stopping current master")__        internalCluster().stopCurrentMasterNode()___        ensureStableCluster(3)___        logger.info("--> reducing min master nodes to 2")__        assertAcked(client().admin().cluster().prepareUpdateSettings()_                .setTransientSettings(Settings.builder().put(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), 2))_                .get())___        String master = internalCluster().getMasterName()__        String nonMaster = null__        for (String node : internalCluster().getNodeNames()) {_            if (!node.equals(master)) {_                nonMaster = node__            }_        }__        logger.info("--> isolating [{}]", nonMaster)__        NetworkDisruption.TwoPartitions partitions = isolateNode(nonMaster)__        NetworkDisruption networkDisruption = addRandomDisruptionType(partitions)__        networkDisruption.startDisrupting()___        logger.info("--> waiting for master to remove it")__        ensureStableCluster(2, master)__    };verify,that,nodes,fault,detection,works,after,master,re,election;public,void,test,nodes,fdafter,master,reelection,throws,exception,start,cluster,4,logger,info,stopping,current,master,internal,cluster,stop,current,master,node,ensure,stable,cluster,3,logger,info,reducing,min,master,nodes,to,2,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,elect,master,service,get,key,2,get,string,master,internal,cluster,get,master,name,string,non,master,null,for,string,node,internal,cluster,get,node,names,if,node,equals,master,non,master,node,logger,info,isolating,non,master,network,disruption,two,partitions,partitions,isolate,node,non,master,network,disruption,network,disruption,add,random,disruption,type,partitions,network,disruption,start,disrupting,logger,info,waiting,for,master,to,remove,it,ensure,stable,cluster,2,master
MasterDisruptionIT -> public void testNodesFDAfterMasterReelection() throws Exception;1544081506;Verify that nodes fault detection works after master (re) election;public void testNodesFDAfterMasterReelection() throws Exception {_        startCluster(4)___        logger.info("--> stopping current master")__        internalCluster().stopCurrentMasterNode()___        ensureStableCluster(3)___        logger.info("--> reducing min master nodes to 2")__        assertAcked(client().admin().cluster().prepareUpdateSettings()_                .setTransientSettings(Settings.builder().put(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), 2))_                .get())___        String master = internalCluster().getMasterName()__        String nonMaster = null__        for (String node : internalCluster().getNodeNames()) {_            if (!node.equals(master)) {_                nonMaster = node__            }_        }__        logger.info("--> isolating [{}]", nonMaster)__        NetworkDisruption.TwoPartitions partitions = isolateNode(nonMaster)__        NetworkDisruption networkDisruption = addRandomDisruptionType(partitions)__        networkDisruption.startDisrupting()___        logger.info("--> waiting for master to remove it")__        ensureStableCluster(2, master)__    };verify,that,nodes,fault,detection,works,after,master,re,election;public,void,test,nodes,fdafter,master,reelection,throws,exception,start,cluster,4,logger,info,stopping,current,master,internal,cluster,stop,current,master,node,ensure,stable,cluster,3,logger,info,reducing,min,master,nodes,to,2,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,elect,master,service,get,key,2,get,string,master,internal,cluster,get,master,name,string,non,master,null,for,string,node,internal,cluster,get,node,names,if,node,equals,master,non,master,node,logger,info,isolating,non,master,network,disruption,two,partitions,partitions,isolate,node,non,master,network,disruption,network,disruption,add,random,disruption,type,partitions,network,disruption,start,disrupting,logger,info,waiting,for,master,to,remove,it,ensure,stable,cluster,2,master
MasterDisruptionIT -> public void testNodesFDAfterMasterReelection() throws Exception;1544619154;Verify that nodes fault detection works after master (re) election;public void testNodesFDAfterMasterReelection() throws Exception {_        startCluster(4)___        logger.info("--> stopping current master")__        internalCluster().stopCurrentMasterNode()___        ensureStableCluster(3)___        logger.info("--> reducing min master nodes to 2")__        assertAcked(client().admin().cluster().prepareUpdateSettings()_                .setTransientSettings(Settings.builder().put(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), 2))_                .get())___        String master = internalCluster().getMasterName()__        String nonMaster = null__        for (String node : internalCluster().getNodeNames()) {_            if (!node.equals(master)) {_                nonMaster = node__            }_        }__        logger.info("--> isolating [{}]", nonMaster)__        NetworkDisruption.TwoPartitions partitions = isolateNode(nonMaster)__        NetworkDisruption networkDisruption = addRandomDisruptionType(partitions)__        networkDisruption.startDisrupting()___        logger.info("--> waiting for master to remove it")__        ensureStableCluster(2, master)__    };verify,that,nodes,fault,detection,works,after,master,re,election;public,void,test,nodes,fdafter,master,reelection,throws,exception,start,cluster,4,logger,info,stopping,current,master,internal,cluster,stop,current,master,node,ensure,stable,cluster,3,logger,info,reducing,min,master,nodes,to,2,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,elect,master,service,get,key,2,get,string,master,internal,cluster,get,master,name,string,non,master,null,for,string,node,internal,cluster,get,node,names,if,node,equals,master,non,master,node,logger,info,isolating,non,master,network,disruption,two,partitions,partitions,isolate,node,non,master,network,disruption,network,disruption,add,random,disruption,type,partitions,network,disruption,start,disrupting,logger,info,waiting,for,master,to,remove,it,ensure,stable,cluster,2,master
MasterDisruptionIT -> public void testNodesFDAfterMasterReelection() throws Exception;1545035674;Verify that nodes fault detection works after master (re) election;public void testNodesFDAfterMasterReelection() throws Exception {_        startCluster(4)___        logger.info("--> stopping current master")__        internalCluster().stopCurrentMasterNode()___        ensureStableCluster(3)___        logger.info("--> reducing min master nodes to 2")__        assertAcked(client().admin().cluster().prepareUpdateSettings()_                .setTransientSettings(Settings.builder().put(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), 2))_                .get())___        String master = internalCluster().getMasterName()__        String nonMaster = null__        for (String node : internalCluster().getNodeNames()) {_            if (!node.equals(master)) {_                nonMaster = node__            }_        }__        logger.info("--> isolating [{}]", nonMaster)__        NetworkDisruption.TwoPartitions partitions = isolateNode(nonMaster)__        NetworkDisruption networkDisruption = addRandomDisruptionType(partitions)__        networkDisruption.startDisrupting()___        logger.info("--> waiting for master to remove it")__        ensureStableCluster(2, master)__    };verify,that,nodes,fault,detection,works,after,master,re,election;public,void,test,nodes,fdafter,master,reelection,throws,exception,start,cluster,4,logger,info,stopping,current,master,internal,cluster,stop,current,master,node,ensure,stable,cluster,3,logger,info,reducing,min,master,nodes,to,2,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,elect,master,service,get,key,2,get,string,master,internal,cluster,get,master,name,string,non,master,null,for,string,node,internal,cluster,get,node,names,if,node,equals,master,non,master,node,logger,info,isolating,non,master,network,disruption,two,partitions,partitions,isolate,node,non,master,network,disruption,network,disruption,add,random,disruption,type,partitions,network,disruption,start,disrupting,logger,info,waiting,for,master,to,remove,it,ensure,stable,cluster,2,master
MasterDisruptionIT -> public void testNodesFDAfterMasterReelection() throws Exception;1548878955;Verify that nodes fault detection works after master (re) election;public void testNodesFDAfterMasterReelection() throws Exception {_        startCluster(4)___        logger.info("--> stopping current master")__        internalCluster().stopCurrentMasterNode()___        ensureStableCluster(3)___        String master = internalCluster().getMasterName()__        String nonMaster = null__        for (String node : internalCluster().getNodeNames()) {_            if (!node.equals(master)) {_                nonMaster = node__            }_        }__        logger.info("--> isolating [{}]", nonMaster)__        NetworkDisruption.TwoPartitions partitions = isolateNode(nonMaster)__        NetworkDisruption networkDisruption = addRandomDisruptionType(partitions)__        networkDisruption.startDisrupting()___        logger.info("--> waiting for master to remove it")__        ensureStableCluster(2, master)__    };verify,that,nodes,fault,detection,works,after,master,re,election;public,void,test,nodes,fdafter,master,reelection,throws,exception,start,cluster,4,logger,info,stopping,current,master,internal,cluster,stop,current,master,node,ensure,stable,cluster,3,string,master,internal,cluster,get,master,name,string,non,master,null,for,string,node,internal,cluster,get,node,names,if,node,equals,master,non,master,node,logger,info,isolating,non,master,network,disruption,two,partitions,partitions,isolate,node,non,master,network,disruption,network,disruption,add,random,disruption,type,partitions,network,disruption,start,disrupting,logger,info,waiting,for,master,to,remove,it,ensure,stable,cluster,2,master
MasterDisruptionIT -> public void testVerifyApiBlocksDuringPartition() throws Exception;1524684173;Verify that the proper block is applied when nodes loose their master;public void testVerifyApiBlocksDuringPartition() throws Exception {_        startCluster(3)___        _        assertAcked(prepareCreate("test").setSettings(Settings.builder()_                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 2)_        ))___        _        _        _        ensureGreen("test")___        TwoPartitions partitions = TwoPartitions.random(random(), internalCluster().getNodeNames())__        NetworkDisruption networkDisruption = addRandomDisruptionType(partitions)___        assertEquals(1, partitions.getMinoritySide().size())__        final String isolatedNode = partitions.getMinoritySide().iterator().next()__        assertEquals(2, partitions.getMajoritySide().size())__        final String nonIsolatedNode = partitions.getMajoritySide().iterator().next()___        _        networkDisruption.startDisrupting()____        _        _        _        logger.info("waiting for isolated node [{}] to have no master", isolatedNode)__        assertNoMaster(isolatedNode, DiscoverySettings.NO_MASTER_BLOCK_WRITES, TimeValue.timeValueSeconds(10))____        logger.info("wait until elected master has been removed and a new 2 node cluster was from (via [{}])", isolatedNode)__        ensureStableCluster(2, nonIsolatedNode)___        for (String node : partitions.getMajoritySide()) {_            ClusterState nodeState = getNodeClusterState(node)__            boolean success = true__            if (nodeState.nodes().getMasterNode() == null) {_                success = false__            }_            if (!nodeState.blocks().global().isEmpty()) {_                success = false__            }_            if (!success) {_                fail("node [" + node + "] has no master or has blocks, despite of being on the right side of the partition. State dump:\n"_                        + nodeState)__            }_        }___        networkDisruption.stopDisrupting()___        _        ensureStableCluster(3, new TimeValue(DISRUPTION_HEALING_OVERHEAD.millis() + networkDisruption.expectedTimeToHeal().millis()))___        logger.info("Verify no master block with {} set to {}", DiscoverySettings.NO_MASTER_BLOCK_SETTING.getKey(), "all")__        client().admin().cluster().prepareUpdateSettings()_                .setTransientSettings(Settings.builder().put(DiscoverySettings.NO_MASTER_BLOCK_SETTING.getKey(), "all"))_                .get()___        networkDisruption.startDisrupting()____        _        _        _        logger.info("waiting for isolated node [{}] to have no master", isolatedNode)__        assertNoMaster(isolatedNode, DiscoverySettings.NO_MASTER_BLOCK_ALL, TimeValue.timeValueSeconds(10))___        _        _        _        ensureStableCluster(2, nonIsolatedNode)___    };verify,that,the,proper,block,is,applied,when,nodes,loose,their,master;public,void,test,verify,api,blocks,during,partition,throws,exception,start,cluster,3,assert,acked,prepare,create,test,set,settings,settings,builder,put,index,meta,data,1,put,index,meta,data,2,ensure,green,test,two,partitions,partitions,two,partitions,random,random,internal,cluster,get,node,names,network,disruption,network,disruption,add,random,disruption,type,partitions,assert,equals,1,partitions,get,minority,side,size,final,string,isolated,node,partitions,get,minority,side,iterator,next,assert,equals,2,partitions,get,majority,side,size,final,string,non,isolated,node,partitions,get,majority,side,iterator,next,network,disruption,start,disrupting,logger,info,waiting,for,isolated,node,to,have,no,master,isolated,node,assert,no,master,isolated,node,discovery,settings,time,value,time,value,seconds,10,logger,info,wait,until,elected,master,has,been,removed,and,a,new,2,node,cluster,was,from,via,isolated,node,ensure,stable,cluster,2,non,isolated,node,for,string,node,partitions,get,majority,side,cluster,state,node,state,get,node,cluster,state,node,boolean,success,true,if,node,state,nodes,get,master,node,null,success,false,if,node,state,blocks,global,is,empty,success,false,if,success,fail,node,node,has,no,master,or,has,blocks,despite,of,being,on,the,right,side,of,the,partition,state,dump,n,node,state,network,disruption,stop,disrupting,ensure,stable,cluster,3,new,time,value,millis,network,disruption,expected,time,to,heal,millis,logger,info,verify,no,master,block,with,set,to,discovery,settings,get,key,all,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,discovery,settings,get,key,all,get,network,disruption,start,disrupting,logger,info,waiting,for,isolated,node,to,have,no,master,isolated,node,assert,no,master,isolated,node,discovery,settings,time,value,time,value,seconds,10,ensure,stable,cluster,2,non,isolated,node
MasterDisruptionIT -> public void testVerifyApiBlocksDuringPartition() throws Exception;1525162917;Verify that the proper block is applied when nodes loose their master;public void testVerifyApiBlocksDuringPartition() throws Exception {_        startCluster(3)___        _        assertAcked(prepareCreate("test").setSettings(Settings.builder()_                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 2)_        ))___        _        _        _        ensureGreen("test")___        TwoPartitions partitions = TwoPartitions.random(random(), internalCluster().getNodeNames())__        NetworkDisruption networkDisruption = addRandomDisruptionType(partitions)___        assertEquals(1, partitions.getMinoritySide().size())__        final String isolatedNode = partitions.getMinoritySide().iterator().next()__        assertEquals(2, partitions.getMajoritySide().size())__        final String nonIsolatedNode = partitions.getMajoritySide().iterator().next()___        _        networkDisruption.startDisrupting()____        _        _        _        logger.info("waiting for isolated node [{}] to have no master", isolatedNode)__        assertNoMaster(isolatedNode, DiscoverySettings.NO_MASTER_BLOCK_WRITES, TimeValue.timeValueSeconds(10))____        logger.info("wait until elected master has been removed and a new 2 node cluster was from (via [{}])", isolatedNode)__        ensureStableCluster(2, nonIsolatedNode)___        for (String node : partitions.getMajoritySide()) {_            ClusterState nodeState = getNodeClusterState(node)__            boolean success = true__            if (nodeState.nodes().getMasterNode() == null) {_                success = false__            }_            if (!nodeState.blocks().global().isEmpty()) {_                success = false__            }_            if (!success) {_                fail("node [" + node + "] has no master or has blocks, despite of being on the right side of the partition. State dump:\n"_                        + nodeState)__            }_        }___        networkDisruption.stopDisrupting()___        _        ensureStableCluster(3, new TimeValue(DISRUPTION_HEALING_OVERHEAD.millis() + networkDisruption.expectedTimeToHeal().millis()))___        logger.info("Verify no master block with {} set to {}", DiscoverySettings.NO_MASTER_BLOCK_SETTING.getKey(), "all")__        client().admin().cluster().prepareUpdateSettings()_                .setTransientSettings(Settings.builder().put(DiscoverySettings.NO_MASTER_BLOCK_SETTING.getKey(), "all"))_                .get()___        networkDisruption.startDisrupting()____        _        _        _        logger.info("waiting for isolated node [{}] to have no master", isolatedNode)__        assertNoMaster(isolatedNode, DiscoverySettings.NO_MASTER_BLOCK_ALL, TimeValue.timeValueSeconds(10))___        _        _        _        ensureStableCluster(2, nonIsolatedNode)___    };verify,that,the,proper,block,is,applied,when,nodes,loose,their,master;public,void,test,verify,api,blocks,during,partition,throws,exception,start,cluster,3,assert,acked,prepare,create,test,set,settings,settings,builder,put,index,meta,data,1,put,index,meta,data,2,ensure,green,test,two,partitions,partitions,two,partitions,random,random,internal,cluster,get,node,names,network,disruption,network,disruption,add,random,disruption,type,partitions,assert,equals,1,partitions,get,minority,side,size,final,string,isolated,node,partitions,get,minority,side,iterator,next,assert,equals,2,partitions,get,majority,side,size,final,string,non,isolated,node,partitions,get,majority,side,iterator,next,network,disruption,start,disrupting,logger,info,waiting,for,isolated,node,to,have,no,master,isolated,node,assert,no,master,isolated,node,discovery,settings,time,value,time,value,seconds,10,logger,info,wait,until,elected,master,has,been,removed,and,a,new,2,node,cluster,was,from,via,isolated,node,ensure,stable,cluster,2,non,isolated,node,for,string,node,partitions,get,majority,side,cluster,state,node,state,get,node,cluster,state,node,boolean,success,true,if,node,state,nodes,get,master,node,null,success,false,if,node,state,blocks,global,is,empty,success,false,if,success,fail,node,node,has,no,master,or,has,blocks,despite,of,being,on,the,right,side,of,the,partition,state,dump,n,node,state,network,disruption,stop,disrupting,ensure,stable,cluster,3,new,time,value,millis,network,disruption,expected,time,to,heal,millis,logger,info,verify,no,master,block,with,set,to,discovery,settings,get,key,all,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,discovery,settings,get,key,all,get,network,disruption,start,disrupting,logger,info,waiting,for,isolated,node,to,have,no,master,isolated,node,assert,no,master,isolated,node,discovery,settings,time,value,time,value,seconds,10,ensure,stable,cluster,2,non,isolated,node
MasterDisruptionIT -> public void testVerifyApiBlocksDuringPartition() throws Exception;1541008027;Verify that the proper block is applied when nodes loose their master;public void testVerifyApiBlocksDuringPartition() throws Exception {_        startCluster(3)___        _        assertAcked(prepareCreate("test").setSettings(Settings.builder()_                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 2)_        ))___        _        _        _        ensureGreen("test")___        TwoPartitions partitions = TwoPartitions.random(random(), internalCluster().getNodeNames())__        NetworkDisruption networkDisruption = addRandomDisruptionType(partitions)___        assertEquals(1, partitions.getMinoritySide().size())__        final String isolatedNode = partitions.getMinoritySide().iterator().next()__        assertEquals(2, partitions.getMajoritySide().size())__        final String nonIsolatedNode = partitions.getMajoritySide().iterator().next()___        _        networkDisruption.startDisrupting()____        _        _        _        logger.info("waiting for isolated node [{}] to have no master", isolatedNode)__        assertNoMaster(isolatedNode, DiscoverySettings.NO_MASTER_BLOCK_WRITES, TimeValue.timeValueSeconds(10))____        logger.info("wait until elected master has been removed and a new 2 node cluster was from (via [{}])", isolatedNode)__        ensureStableCluster(2, nonIsolatedNode)___        for (String node : partitions.getMajoritySide()) {_            ClusterState nodeState = getNodeClusterState(node)__            boolean success = true__            if (nodeState.nodes().getMasterNode() == null) {_                success = false__            }_            if (!nodeState.blocks().global().isEmpty()) {_                success = false__            }_            if (!success) {_                fail("node [" + node + "] has no master or has blocks, despite of being on the right side of the partition. State dump:\n"_                        + nodeState)__            }_        }___        networkDisruption.stopDisrupting()___        _        ensureStableCluster(3, new TimeValue(DISRUPTION_HEALING_OVERHEAD.millis() + networkDisruption.expectedTimeToHeal().millis()))___        logger.info("Verify no master block with {} set to {}", DiscoverySettings.NO_MASTER_BLOCK_SETTING.getKey(), "all")__        client().admin().cluster().prepareUpdateSettings()_                .setTransientSettings(Settings.builder().put(DiscoverySettings.NO_MASTER_BLOCK_SETTING.getKey(), "all"))_                .get()___        networkDisruption.startDisrupting()____        _        _        _        logger.info("waiting for isolated node [{}] to have no master", isolatedNode)__        assertNoMaster(isolatedNode, DiscoverySettings.NO_MASTER_BLOCK_ALL, TimeValue.timeValueSeconds(10))___        _        _        _        ensureStableCluster(2, nonIsolatedNode)___    };verify,that,the,proper,block,is,applied,when,nodes,loose,their,master;public,void,test,verify,api,blocks,during,partition,throws,exception,start,cluster,3,assert,acked,prepare,create,test,set,settings,settings,builder,put,index,meta,data,1,put,index,meta,data,2,ensure,green,test,two,partitions,partitions,two,partitions,random,random,internal,cluster,get,node,names,network,disruption,network,disruption,add,random,disruption,type,partitions,assert,equals,1,partitions,get,minority,side,size,final,string,isolated,node,partitions,get,minority,side,iterator,next,assert,equals,2,partitions,get,majority,side,size,final,string,non,isolated,node,partitions,get,majority,side,iterator,next,network,disruption,start,disrupting,logger,info,waiting,for,isolated,node,to,have,no,master,isolated,node,assert,no,master,isolated,node,discovery,settings,time,value,time,value,seconds,10,logger,info,wait,until,elected,master,has,been,removed,and,a,new,2,node,cluster,was,from,via,isolated,node,ensure,stable,cluster,2,non,isolated,node,for,string,node,partitions,get,majority,side,cluster,state,node,state,get,node,cluster,state,node,boolean,success,true,if,node,state,nodes,get,master,node,null,success,false,if,node,state,blocks,global,is,empty,success,false,if,success,fail,node,node,has,no,master,or,has,blocks,despite,of,being,on,the,right,side,of,the,partition,state,dump,n,node,state,network,disruption,stop,disrupting,ensure,stable,cluster,3,new,time,value,millis,network,disruption,expected,time,to,heal,millis,logger,info,verify,no,master,block,with,set,to,discovery,settings,get,key,all,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,discovery,settings,get,key,all,get,network,disruption,start,disrupting,logger,info,waiting,for,isolated,node,to,have,no,master,isolated,node,assert,no,master,isolated,node,discovery,settings,time,value,time,value,seconds,10,ensure,stable,cluster,2,non,isolated,node
MasterDisruptionIT -> public void testVerifyApiBlocksDuringPartition() throws Exception;1544081506;Verify that the proper block is applied when nodes loose their master;public void testVerifyApiBlocksDuringPartition() throws Exception {_        _        internalCluster().startNodes(3, Settings.builder().put(TestZenDiscovery.USE_ZEN2.getKey(), false).build())___        _        assertAcked(prepareCreate("test").setSettings(Settings.builder()_                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 2)_        ))___        _        _        _        ensureGreen("test")___        TwoPartitions partitions = TwoPartitions.random(random(), internalCluster().getNodeNames())__        NetworkDisruption networkDisruption = addRandomDisruptionType(partitions)___        assertEquals(1, partitions.getMinoritySide().size())__        final String isolatedNode = partitions.getMinoritySide().iterator().next()__        assertEquals(2, partitions.getMajoritySide().size())__        final String nonIsolatedNode = partitions.getMajoritySide().iterator().next()___        _        networkDisruption.startDisrupting()____        _        _        _        logger.info("waiting for isolated node [{}] to have no master", isolatedNode)__        assertNoMaster(isolatedNode, DiscoverySettings.NO_MASTER_BLOCK_WRITES, TimeValue.timeValueSeconds(10))____        logger.info("wait until elected master has been removed and a new 2 node cluster was from (via [{}])", isolatedNode)__        ensureStableCluster(2, nonIsolatedNode)___        for (String node : partitions.getMajoritySide()) {_            ClusterState nodeState = getNodeClusterState(node)__            boolean success = true__            if (nodeState.nodes().getMasterNode() == null) {_                success = false__            }_            if (!nodeState.blocks().global().isEmpty()) {_                success = false__            }_            if (!success) {_                fail("node [" + node + "] has no master or has blocks, despite of being on the right side of the partition. State dump:\n"_                        + nodeState)__            }_        }___        networkDisruption.stopDisrupting()___        _        ensureStableCluster(3, new TimeValue(DISRUPTION_HEALING_OVERHEAD.millis() + networkDisruption.expectedTimeToHeal().millis()))___        logger.info("Verify no master block with {} set to {}", DiscoverySettings.NO_MASTER_BLOCK_SETTING.getKey(), "all")__        client().admin().cluster().prepareUpdateSettings()_                .setTransientSettings(Settings.builder().put(DiscoverySettings.NO_MASTER_BLOCK_SETTING.getKey(), "all"))_                .get()___        networkDisruption.startDisrupting()____        _        _        _        logger.info("waiting for isolated node [{}] to have no master", isolatedNode)__        assertNoMaster(isolatedNode, DiscoverySettings.NO_MASTER_BLOCK_ALL, TimeValue.timeValueSeconds(10))___        _        _        _        ensureStableCluster(2, nonIsolatedNode)___    };verify,that,the,proper,block,is,applied,when,nodes,loose,their,master;public,void,test,verify,api,blocks,during,partition,throws,exception,internal,cluster,start,nodes,3,settings,builder,put,test,zen,discovery,get,key,false,build,assert,acked,prepare,create,test,set,settings,settings,builder,put,index,meta,data,1,put,index,meta,data,2,ensure,green,test,two,partitions,partitions,two,partitions,random,random,internal,cluster,get,node,names,network,disruption,network,disruption,add,random,disruption,type,partitions,assert,equals,1,partitions,get,minority,side,size,final,string,isolated,node,partitions,get,minority,side,iterator,next,assert,equals,2,partitions,get,majority,side,size,final,string,non,isolated,node,partitions,get,majority,side,iterator,next,network,disruption,start,disrupting,logger,info,waiting,for,isolated,node,to,have,no,master,isolated,node,assert,no,master,isolated,node,discovery,settings,time,value,time,value,seconds,10,logger,info,wait,until,elected,master,has,been,removed,and,a,new,2,node,cluster,was,from,via,isolated,node,ensure,stable,cluster,2,non,isolated,node,for,string,node,partitions,get,majority,side,cluster,state,node,state,get,node,cluster,state,node,boolean,success,true,if,node,state,nodes,get,master,node,null,success,false,if,node,state,blocks,global,is,empty,success,false,if,success,fail,node,node,has,no,master,or,has,blocks,despite,of,being,on,the,right,side,of,the,partition,state,dump,n,node,state,network,disruption,stop,disrupting,ensure,stable,cluster,3,new,time,value,millis,network,disruption,expected,time,to,heal,millis,logger,info,verify,no,master,block,with,set,to,discovery,settings,get,key,all,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,discovery,settings,get,key,all,get,network,disruption,start,disrupting,logger,info,waiting,for,isolated,node,to,have,no,master,isolated,node,assert,no,master,isolated,node,discovery,settings,time,value,time,value,seconds,10,ensure,stable,cluster,2,non,isolated,node
MasterDisruptionIT -> public void testVerifyApiBlocksDuringPartition() throws Exception;1544619154;Verify that the proper block is applied when nodes lose their master;public void testVerifyApiBlocksDuringPartition() throws Exception {_        internalCluster().startNodes(3)___        _        assertAcked(prepareCreate("test").setSettings(Settings.builder()_                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 2)_        ))___        _        _        _        ensureGreen("test")___        TwoPartitions partitions = TwoPartitions.random(random(), internalCluster().getNodeNames())__        NetworkDisruption networkDisruption = addRandomDisruptionType(partitions)___        assertEquals(1, partitions.getMinoritySide().size())__        final String isolatedNode = partitions.getMinoritySide().iterator().next()__        assertEquals(2, partitions.getMajoritySide().size())__        final String nonIsolatedNode = partitions.getMajoritySide().iterator().next()___        _        networkDisruption.startDisrupting()____        _        _        _        logger.info("waiting for isolated node [{}] to have no master", isolatedNode)__        assertNoMaster(isolatedNode, DiscoverySettings.NO_MASTER_BLOCK_WRITES, TimeValue.timeValueSeconds(10))____        logger.info("wait until elected master has been removed and a new 2 node cluster was from (via [{}])", isolatedNode)__        ensureStableCluster(2, nonIsolatedNode)___        for (String node : partitions.getMajoritySide()) {_            ClusterState nodeState = getNodeClusterState(node)__            boolean success = true__            if (nodeState.nodes().getMasterNode() == null) {_                success = false__            }_            if (!nodeState.blocks().global().isEmpty()) {_                success = false__            }_            if (!success) {_                fail("node [" + node + "] has no master or has blocks, despite of being on the right side of the partition. State dump:\n"_                        + nodeState)__            }_        }___        networkDisruption.stopDisrupting()___        _        ensureStableCluster(3, new TimeValue(DISRUPTION_HEALING_OVERHEAD.millis() + networkDisruption.expectedTimeToHeal().millis()))___        logger.info("Verify no master block with {} set to {}", DiscoverySettings.NO_MASTER_BLOCK_SETTING.getKey(), "all")__        client().admin().cluster().prepareUpdateSettings()_                .setTransientSettings(Settings.builder().put(DiscoverySettings.NO_MASTER_BLOCK_SETTING.getKey(), "all"))_                .get()___        networkDisruption.startDisrupting()____        _        _        _        logger.info("waiting for isolated node [{}] to have no master", isolatedNode)__        assertNoMaster(isolatedNode, DiscoverySettings.NO_MASTER_BLOCK_ALL, TimeValue.timeValueSeconds(10))___        _        _        _        ensureStableCluster(2, nonIsolatedNode)___    };verify,that,the,proper,block,is,applied,when,nodes,lose,their,master;public,void,test,verify,api,blocks,during,partition,throws,exception,internal,cluster,start,nodes,3,assert,acked,prepare,create,test,set,settings,settings,builder,put,index,meta,data,1,put,index,meta,data,2,ensure,green,test,two,partitions,partitions,two,partitions,random,random,internal,cluster,get,node,names,network,disruption,network,disruption,add,random,disruption,type,partitions,assert,equals,1,partitions,get,minority,side,size,final,string,isolated,node,partitions,get,minority,side,iterator,next,assert,equals,2,partitions,get,majority,side,size,final,string,non,isolated,node,partitions,get,majority,side,iterator,next,network,disruption,start,disrupting,logger,info,waiting,for,isolated,node,to,have,no,master,isolated,node,assert,no,master,isolated,node,discovery,settings,time,value,time,value,seconds,10,logger,info,wait,until,elected,master,has,been,removed,and,a,new,2,node,cluster,was,from,via,isolated,node,ensure,stable,cluster,2,non,isolated,node,for,string,node,partitions,get,majority,side,cluster,state,node,state,get,node,cluster,state,node,boolean,success,true,if,node,state,nodes,get,master,node,null,success,false,if,node,state,blocks,global,is,empty,success,false,if,success,fail,node,node,has,no,master,or,has,blocks,despite,of,being,on,the,right,side,of,the,partition,state,dump,n,node,state,network,disruption,stop,disrupting,ensure,stable,cluster,3,new,time,value,millis,network,disruption,expected,time,to,heal,millis,logger,info,verify,no,master,block,with,set,to,discovery,settings,get,key,all,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,discovery,settings,get,key,all,get,network,disruption,start,disrupting,logger,info,waiting,for,isolated,node,to,have,no,master,isolated,node,assert,no,master,isolated,node,discovery,settings,time,value,time,value,seconds,10,ensure,stable,cluster,2,non,isolated,node
MasterDisruptionIT -> public void testVerifyApiBlocksDuringPartition() throws Exception;1545035674;Verify that the proper block is applied when nodes lose their master;public void testVerifyApiBlocksDuringPartition() throws Exception {_        internalCluster().startNodes(3)___        _        assertAcked(prepareCreate("test").setSettings(Settings.builder()_                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 2)_        ))___        _        _        _        ensureGreen("test")___        TwoPartitions partitions = TwoPartitions.random(random(), internalCluster().getNodeNames())__        NetworkDisruption networkDisruption = addRandomDisruptionType(partitions)___        assertEquals(1, partitions.getMinoritySide().size())__        final String isolatedNode = partitions.getMinoritySide().iterator().next()__        assertEquals(2, partitions.getMajoritySide().size())__        final String nonIsolatedNode = partitions.getMajoritySide().iterator().next()___        _        networkDisruption.startDisrupting()____        _        _        _        logger.info("waiting for isolated node [{}] to have no master", isolatedNode)__        assertNoMaster(isolatedNode, DiscoverySettings.NO_MASTER_BLOCK_WRITES, TimeValue.timeValueSeconds(10))____        logger.info("wait until elected master has been removed and a new 2 node cluster was from (via [{}])", isolatedNode)__        ensureStableCluster(2, nonIsolatedNode)___        for (String node : partitions.getMajoritySide()) {_            ClusterState nodeState = getNodeClusterState(node)__            boolean success = true__            if (nodeState.nodes().getMasterNode() == null) {_                success = false__            }_            if (!nodeState.blocks().global().isEmpty()) {_                success = false__            }_            if (!success) {_                fail("node [" + node + "] has no master or has blocks, despite of being on the right side of the partition. State dump:\n"_                        + nodeState)__            }_        }___        networkDisruption.stopDisrupting()___        _        ensureStableCluster(3, new TimeValue(DISRUPTION_HEALING_OVERHEAD.millis() + networkDisruption.expectedTimeToHeal().millis()))___        logger.info("Verify no master block with {} set to {}", DiscoverySettings.NO_MASTER_BLOCK_SETTING.getKey(), "all")__        client().admin().cluster().prepareUpdateSettings()_                .setTransientSettings(Settings.builder().put(DiscoverySettings.NO_MASTER_BLOCK_SETTING.getKey(), "all"))_                .get()___        networkDisruption.startDisrupting()____        _        _        _        logger.info("waiting for isolated node [{}] to have no master", isolatedNode)__        assertNoMaster(isolatedNode, DiscoverySettings.NO_MASTER_BLOCK_ALL, TimeValue.timeValueSeconds(10))___        _        _        _        ensureStableCluster(2, nonIsolatedNode)___    };verify,that,the,proper,block,is,applied,when,nodes,lose,their,master;public,void,test,verify,api,blocks,during,partition,throws,exception,internal,cluster,start,nodes,3,assert,acked,prepare,create,test,set,settings,settings,builder,put,index,meta,data,1,put,index,meta,data,2,ensure,green,test,two,partitions,partitions,two,partitions,random,random,internal,cluster,get,node,names,network,disruption,network,disruption,add,random,disruption,type,partitions,assert,equals,1,partitions,get,minority,side,size,final,string,isolated,node,partitions,get,minority,side,iterator,next,assert,equals,2,partitions,get,majority,side,size,final,string,non,isolated,node,partitions,get,majority,side,iterator,next,network,disruption,start,disrupting,logger,info,waiting,for,isolated,node,to,have,no,master,isolated,node,assert,no,master,isolated,node,discovery,settings,time,value,time,value,seconds,10,logger,info,wait,until,elected,master,has,been,removed,and,a,new,2,node,cluster,was,from,via,isolated,node,ensure,stable,cluster,2,non,isolated,node,for,string,node,partitions,get,majority,side,cluster,state,node,state,get,node,cluster,state,node,boolean,success,true,if,node,state,nodes,get,master,node,null,success,false,if,node,state,blocks,global,is,empty,success,false,if,success,fail,node,node,has,no,master,or,has,blocks,despite,of,being,on,the,right,side,of,the,partition,state,dump,n,node,state,network,disruption,stop,disrupting,ensure,stable,cluster,3,new,time,value,millis,network,disruption,expected,time,to,heal,millis,logger,info,verify,no,master,block,with,set,to,discovery,settings,get,key,all,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,discovery,settings,get,key,all,get,network,disruption,start,disrupting,logger,info,waiting,for,isolated,node,to,have,no,master,isolated,node,assert,no,master,isolated,node,discovery,settings,time,value,time,value,seconds,10,ensure,stable,cluster,2,non,isolated,node
MasterDisruptionIT -> public void testVerifyApiBlocksDuringPartition() throws Exception;1548878955;Verify that the proper block is applied when nodes lose their master;public void testVerifyApiBlocksDuringPartition() throws Exception {_        internalCluster().startNodes(3)___        _        assertAcked(prepareCreate("test").setSettings(Settings.builder()_                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 2)_        ))___        _        _        _        ensureGreen("test")___        TwoPartitions partitions = TwoPartitions.random(random(), internalCluster().getNodeNames())__        NetworkDisruption networkDisruption = addRandomDisruptionType(partitions)___        assertEquals(1, partitions.getMinoritySide().size())__        final String isolatedNode = partitions.getMinoritySide().iterator().next()__        assertEquals(2, partitions.getMajoritySide().size())__        final String nonIsolatedNode = partitions.getMajoritySide().iterator().next()___        _        networkDisruption.startDisrupting()____        _        _        _        logger.info("waiting for isolated node [{}] to have no master", isolatedNode)__        assertNoMaster(isolatedNode, DiscoverySettings.NO_MASTER_BLOCK_WRITES, TimeValue.timeValueSeconds(10))____        logger.info("wait until elected master has been removed and a new 2 node cluster was from (via [{}])", isolatedNode)__        ensureStableCluster(2, nonIsolatedNode)___        for (String node : partitions.getMajoritySide()) {_            ClusterState nodeState = getNodeClusterState(node)__            boolean success = true__            if (nodeState.nodes().getMasterNode() == null) {_                success = false__            }_            if (!nodeState.blocks().global().isEmpty()) {_                success = false__            }_            if (!success) {_                fail("node [" + node + "] has no master or has blocks, despite of being on the right side of the partition. State dump:\n"_                        + nodeState)__            }_        }___        networkDisruption.stopDisrupting()___        _        ensureStableCluster(3, new TimeValue(DISRUPTION_HEALING_OVERHEAD.millis() + networkDisruption.expectedTimeToHeal().millis()))___        logger.info("Verify no master block with {} set to {}", DiscoverySettings.NO_MASTER_BLOCK_SETTING.getKey(), "all")__        client().admin().cluster().prepareUpdateSettings()_                .setTransientSettings(Settings.builder().put(DiscoverySettings.NO_MASTER_BLOCK_SETTING.getKey(), "all"))_                .get()___        networkDisruption.startDisrupting()____        _        _        _        logger.info("waiting for isolated node [{}] to have no master", isolatedNode)__        assertNoMaster(isolatedNode, DiscoverySettings.NO_MASTER_BLOCK_ALL, TimeValue.timeValueSeconds(10))___        _        _        _        ensureStableCluster(2, nonIsolatedNode)___    };verify,that,the,proper,block,is,applied,when,nodes,lose,their,master;public,void,test,verify,api,blocks,during,partition,throws,exception,internal,cluster,start,nodes,3,assert,acked,prepare,create,test,set,settings,settings,builder,put,index,meta,data,1,put,index,meta,data,2,ensure,green,test,two,partitions,partitions,two,partitions,random,random,internal,cluster,get,node,names,network,disruption,network,disruption,add,random,disruption,type,partitions,assert,equals,1,partitions,get,minority,side,size,final,string,isolated,node,partitions,get,minority,side,iterator,next,assert,equals,2,partitions,get,majority,side,size,final,string,non,isolated,node,partitions,get,majority,side,iterator,next,network,disruption,start,disrupting,logger,info,waiting,for,isolated,node,to,have,no,master,isolated,node,assert,no,master,isolated,node,discovery,settings,time,value,time,value,seconds,10,logger,info,wait,until,elected,master,has,been,removed,and,a,new,2,node,cluster,was,from,via,isolated,node,ensure,stable,cluster,2,non,isolated,node,for,string,node,partitions,get,majority,side,cluster,state,node,state,get,node,cluster,state,node,boolean,success,true,if,node,state,nodes,get,master,node,null,success,false,if,node,state,blocks,global,is,empty,success,false,if,success,fail,node,node,has,no,master,or,has,blocks,despite,of,being,on,the,right,side,of,the,partition,state,dump,n,node,state,network,disruption,stop,disrupting,ensure,stable,cluster,3,new,time,value,millis,network,disruption,expected,time,to,heal,millis,logger,info,verify,no,master,block,with,set,to,discovery,settings,get,key,all,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,discovery,settings,get,key,all,get,network,disruption,start,disrupting,logger,info,waiting,for,isolated,node,to,have,no,master,isolated,node,assert,no,master,isolated,node,discovery,settings,time,value,time,value,seconds,10,ensure,stable,cluster,2,non,isolated,node
MasterDisruptionIT -> public void testVerifyApiBlocksDuringPartition() throws Exception;1549008649;Verify that the proper block is applied when nodes lose their master;public void testVerifyApiBlocksDuringPartition() throws Exception {_        internalCluster().startNodes(3)___        _        assertAcked(prepareCreate("test").setSettings(Settings.builder()_                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 2)_        ))___        _        _        _        ensureGreen("test")___        TwoPartitions partitions = TwoPartitions.random(random(), internalCluster().getNodeNames())__        NetworkDisruption networkDisruption = addRandomDisruptionType(partitions)___        assertEquals(1, partitions.getMinoritySide().size())__        final String isolatedNode = partitions.getMinoritySide().iterator().next()__        assertEquals(2, partitions.getMajoritySide().size())__        final String nonIsolatedNode = partitions.getMajoritySide().iterator().next()___        _        networkDisruption.startDisrupting()____        _        _        _        logger.info("waiting for isolated node [{}] to have no master", isolatedNode)__        assertNoMaster(isolatedNode, DiscoverySettings.NO_MASTER_BLOCK_WRITES, TimeValue.timeValueSeconds(10))____        logger.info("wait until elected master has been removed and a new 2 node cluster was from (via [{}])", isolatedNode)__        ensureStableCluster(2, nonIsolatedNode)___        for (String node : partitions.getMajoritySide()) {_            ClusterState nodeState = getNodeClusterState(node)__            boolean success = true__            if (nodeState.nodes().getMasterNode() == null) {_                success = false__            }_            if (!nodeState.blocks().global().isEmpty()) {_                success = false__            }_            if (!success) {_                fail("node [" + node + "] has no master or has blocks, despite of being on the right side of the partition. State dump:\n"_                        + nodeState)__            }_        }___        networkDisruption.stopDisrupting()___        _        ensureStableCluster(3, new TimeValue(DISRUPTION_HEALING_OVERHEAD.millis() + networkDisruption.expectedTimeToHeal().millis()))___        logger.info("Verify no master block with {} set to {}", DiscoverySettings.NO_MASTER_BLOCK_SETTING.getKey(), "all")__        client().admin().cluster().prepareUpdateSettings()_                .setTransientSettings(Settings.builder().put(DiscoverySettings.NO_MASTER_BLOCK_SETTING.getKey(), "all"))_                .get()___        networkDisruption.startDisrupting()____        _        _        _        logger.info("waiting for isolated node [{}] to have no master", isolatedNode)__        assertNoMaster(isolatedNode, DiscoverySettings.NO_MASTER_BLOCK_ALL, TimeValue.timeValueSeconds(10))___        _        _        _        ensureStableCluster(2, nonIsolatedNode)___    };verify,that,the,proper,block,is,applied,when,nodes,lose,their,master;public,void,test,verify,api,blocks,during,partition,throws,exception,internal,cluster,start,nodes,3,assert,acked,prepare,create,test,set,settings,settings,builder,put,index,meta,data,1,put,index,meta,data,2,ensure,green,test,two,partitions,partitions,two,partitions,random,random,internal,cluster,get,node,names,network,disruption,network,disruption,add,random,disruption,type,partitions,assert,equals,1,partitions,get,minority,side,size,final,string,isolated,node,partitions,get,minority,side,iterator,next,assert,equals,2,partitions,get,majority,side,size,final,string,non,isolated,node,partitions,get,majority,side,iterator,next,network,disruption,start,disrupting,logger,info,waiting,for,isolated,node,to,have,no,master,isolated,node,assert,no,master,isolated,node,discovery,settings,time,value,time,value,seconds,10,logger,info,wait,until,elected,master,has,been,removed,and,a,new,2,node,cluster,was,from,via,isolated,node,ensure,stable,cluster,2,non,isolated,node,for,string,node,partitions,get,majority,side,cluster,state,node,state,get,node,cluster,state,node,boolean,success,true,if,node,state,nodes,get,master,node,null,success,false,if,node,state,blocks,global,is,empty,success,false,if,success,fail,node,node,has,no,master,or,has,blocks,despite,of,being,on,the,right,side,of,the,partition,state,dump,n,node,state,network,disruption,stop,disrupting,ensure,stable,cluster,3,new,time,value,millis,network,disruption,expected,time,to,heal,millis,logger,info,verify,no,master,block,with,set,to,discovery,settings,get,key,all,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,discovery,settings,get,key,all,get,network,disruption,start,disrupting,logger,info,waiting,for,isolated,node,to,have,no,master,isolated,node,assert,no,master,isolated,node,discovery,settings,time,value,time,value,seconds,10,ensure,stable,cluster,2,non,isolated,node
MasterDisruptionIT -> public void testVerifyApiBlocksDuringPartition() throws Exception;1549356476;Verify that the proper block is applied when nodes lose their master;public void testVerifyApiBlocksDuringPartition() throws Exception {_        internalCluster().startNodes(3)___        _        assertAcked(prepareCreate("test").setSettings(Settings.builder()_                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 2)_        ))___        _        _        _        ensureGreen("test")___        TwoPartitions partitions = TwoPartitions.random(random(), internalCluster().getNodeNames())__        NetworkDisruption networkDisruption = addRandomDisruptionType(partitions)___        assertEquals(1, partitions.getMinoritySide().size())__        final String isolatedNode = partitions.getMinoritySide().iterator().next()__        assertEquals(2, partitions.getMajoritySide().size())__        final String nonIsolatedNode = partitions.getMajoritySide().iterator().next()___        _        networkDisruption.startDisrupting()____        _        _        _        logger.info("waiting for isolated node [{}] to have no master", isolatedNode)__        assertNoMaster(isolatedNode, NoMasterBlockService.NO_MASTER_BLOCK_WRITES, TimeValue.timeValueSeconds(10))____        logger.info("wait until elected master has been removed and a new 2 node cluster was from (via [{}])", isolatedNode)__        ensureStableCluster(2, nonIsolatedNode)___        for (String node : partitions.getMajoritySide()) {_            ClusterState nodeState = getNodeClusterState(node)__            boolean success = true__            if (nodeState.nodes().getMasterNode() == null) {_                success = false__            }_            if (!nodeState.blocks().global().isEmpty()) {_                success = false__            }_            if (!success) {_                fail("node [" + node + "] has no master or has blocks, despite of being on the right side of the partition. State dump:\n"_                        + nodeState)__            }_        }___        networkDisruption.stopDisrupting()___        _        ensureStableCluster(3, new TimeValue(DISRUPTION_HEALING_OVERHEAD.millis() + networkDisruption.expectedTimeToHeal().millis()))___        logger.info("Verify no master block with {} set to {}", NoMasterBlockService.NO_MASTER_BLOCK_SETTING.getKey(), "all")__        client().admin().cluster().prepareUpdateSettings()_                .setTransientSettings(Settings.builder().put(NoMasterBlockService.NO_MASTER_BLOCK_SETTING.getKey(), "all"))_                .get()___        networkDisruption.startDisrupting()____        _        _        _        logger.info("waiting for isolated node [{}] to have no master", isolatedNode)__        assertNoMaster(isolatedNode, NoMasterBlockService.NO_MASTER_BLOCK_ALL, TimeValue.timeValueSeconds(10))___        _        _        _        ensureStableCluster(2, nonIsolatedNode)___    };verify,that,the,proper,block,is,applied,when,nodes,lose,their,master;public,void,test,verify,api,blocks,during,partition,throws,exception,internal,cluster,start,nodes,3,assert,acked,prepare,create,test,set,settings,settings,builder,put,index,meta,data,1,put,index,meta,data,2,ensure,green,test,two,partitions,partitions,two,partitions,random,random,internal,cluster,get,node,names,network,disruption,network,disruption,add,random,disruption,type,partitions,assert,equals,1,partitions,get,minority,side,size,final,string,isolated,node,partitions,get,minority,side,iterator,next,assert,equals,2,partitions,get,majority,side,size,final,string,non,isolated,node,partitions,get,majority,side,iterator,next,network,disruption,start,disrupting,logger,info,waiting,for,isolated,node,to,have,no,master,isolated,node,assert,no,master,isolated,node,no,master,block,service,time,value,time,value,seconds,10,logger,info,wait,until,elected,master,has,been,removed,and,a,new,2,node,cluster,was,from,via,isolated,node,ensure,stable,cluster,2,non,isolated,node,for,string,node,partitions,get,majority,side,cluster,state,node,state,get,node,cluster,state,node,boolean,success,true,if,node,state,nodes,get,master,node,null,success,false,if,node,state,blocks,global,is,empty,success,false,if,success,fail,node,node,has,no,master,or,has,blocks,despite,of,being,on,the,right,side,of,the,partition,state,dump,n,node,state,network,disruption,stop,disrupting,ensure,stable,cluster,3,new,time,value,millis,network,disruption,expected,time,to,heal,millis,logger,info,verify,no,master,block,with,set,to,no,master,block,service,get,key,all,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,no,master,block,service,get,key,all,get,network,disruption,start,disrupting,logger,info,waiting,for,isolated,node,to,have,no,master,isolated,node,assert,no,master,isolated,node,no,master,block,service,time,value,time,value,seconds,10,ensure,stable,cluster,2,non,isolated,node
MasterDisruptionIT -> public void testVerifyApiBlocksDuringPartition() throws Exception;1549452878;Verify that the proper block is applied when nodes lose their master;public void testVerifyApiBlocksDuringPartition() throws Exception {_        internalCluster().startNodes(3)___        _        assertAcked(prepareCreate("test").setSettings(Settings.builder()_                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 2)_        ))___        _        _        _        ensureGreen("test")___        TwoPartitions partitions = TwoPartitions.random(random(), internalCluster().getNodeNames())__        NetworkDisruption networkDisruption = addRandomDisruptionType(partitions)___        assertEquals(1, partitions.getMinoritySide().size())__        final String isolatedNode = partitions.getMinoritySide().iterator().next()__        assertEquals(2, partitions.getMajoritySide().size())__        final String nonIsolatedNode = partitions.getMajoritySide().iterator().next()___        _        networkDisruption.startDisrupting()____        _        _        _        logger.info("waiting for isolated node [{}] to have no master", isolatedNode)__        assertNoMaster(isolatedNode, NoMasterBlockService.NO_MASTER_BLOCK_WRITES, TimeValue.timeValueSeconds(10))____        logger.info("wait until elected master has been removed and a new 2 node cluster was from (via [{}])", isolatedNode)__        ensureStableCluster(2, nonIsolatedNode)___        for (String node : partitions.getMajoritySide()) {_            ClusterState nodeState = getNodeClusterState(node)__            boolean success = true__            if (nodeState.nodes().getMasterNode() == null) {_                success = false__            }_            if (!nodeState.blocks().global().isEmpty()) {_                success = false__            }_            if (!success) {_                fail("node [" + node + "] has no master or has blocks, despite of being on the right side of the partition. State dump:\n"_                        + nodeState)__            }_        }___        networkDisruption.stopDisrupting()___        _        ensureStableCluster(3, new TimeValue(DISRUPTION_HEALING_OVERHEAD.millis() + networkDisruption.expectedTimeToHeal().millis()))___        logger.info("Verify no master block with {} set to {}", NoMasterBlockService.NO_MASTER_BLOCK_SETTING.getKey(), "all")__        client().admin().cluster().prepareUpdateSettings()_                .setTransientSettings(Settings.builder().put(NoMasterBlockService.NO_MASTER_BLOCK_SETTING.getKey(), "all"))_                .get()___        networkDisruption.startDisrupting()____        _        _        _        logger.info("waiting for isolated node [{}] to have no master", isolatedNode)__        assertNoMaster(isolatedNode, NoMasterBlockService.NO_MASTER_BLOCK_ALL, TimeValue.timeValueSeconds(10))___        _        _        _        ensureStableCluster(2, nonIsolatedNode)___    };verify,that,the,proper,block,is,applied,when,nodes,lose,their,master;public,void,test,verify,api,blocks,during,partition,throws,exception,internal,cluster,start,nodes,3,assert,acked,prepare,create,test,set,settings,settings,builder,put,index,meta,data,1,put,index,meta,data,2,ensure,green,test,two,partitions,partitions,two,partitions,random,random,internal,cluster,get,node,names,network,disruption,network,disruption,add,random,disruption,type,partitions,assert,equals,1,partitions,get,minority,side,size,final,string,isolated,node,partitions,get,minority,side,iterator,next,assert,equals,2,partitions,get,majority,side,size,final,string,non,isolated,node,partitions,get,majority,side,iterator,next,network,disruption,start,disrupting,logger,info,waiting,for,isolated,node,to,have,no,master,isolated,node,assert,no,master,isolated,node,no,master,block,service,time,value,time,value,seconds,10,logger,info,wait,until,elected,master,has,been,removed,and,a,new,2,node,cluster,was,from,via,isolated,node,ensure,stable,cluster,2,non,isolated,node,for,string,node,partitions,get,majority,side,cluster,state,node,state,get,node,cluster,state,node,boolean,success,true,if,node,state,nodes,get,master,node,null,success,false,if,node,state,blocks,global,is,empty,success,false,if,success,fail,node,node,has,no,master,or,has,blocks,despite,of,being,on,the,right,side,of,the,partition,state,dump,n,node,state,network,disruption,stop,disrupting,ensure,stable,cluster,3,new,time,value,millis,network,disruption,expected,time,to,heal,millis,logger,info,verify,no,master,block,with,set,to,no,master,block,service,get,key,all,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,no,master,block,service,get,key,all,get,network,disruption,start,disrupting,logger,info,waiting,for,isolated,node,to,have,no,master,isolated,node,assert,no,master,isolated,node,no,master,block,service,time,value,time,value,seconds,10,ensure,stable,cluster,2,non,isolated,node
