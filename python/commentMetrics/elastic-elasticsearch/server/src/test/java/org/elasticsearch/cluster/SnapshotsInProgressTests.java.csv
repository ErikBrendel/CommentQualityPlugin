commented;modifiers;parameterAmount;loc;comment;code
true;public;0;29;/**  * Makes sure that the indices being waited on before snapshotting commences  * are populated with all shards in the relocating or initializing state.  */ ;/**  * Makes sure that the indices being waited on before snapshotting commences  * are populated with all shards in the relocating or initializing state.  */ public void testWaitingIndices() {     final Snapshot snapshot = new Snapshot("repo", new SnapshotId("snap", randomAlphaOfLength(5))).     final String idx1Name = "idx1".     final String idx2Name = "idx2".     final String idx3Name = "idx3".     final String idx1UUID = randomAlphaOfLength(5).     final String idx2UUID = randomAlphaOfLength(5).     final String idx3UUID = randomAlphaOfLength(5).     final List<IndexId> indices = Arrays.asList(new IndexId(idx1Name, randomAlphaOfLength(5)), new IndexId(idx2Name, randomAlphaOfLength(5)), new IndexId(idx3Name, randomAlphaOfLength(5))).     ImmutableOpenMap.Builder<ShardId, ShardSnapshotStatus> shards = ImmutableOpenMap.builder().     // test more than one waiting shard in an index     shards.put(new ShardId(idx1Name, idx1UUID, 0), new ShardSnapshotStatus(randomAlphaOfLength(2), State.WAITING)).     shards.put(new ShardId(idx1Name, idx1UUID, 1), new ShardSnapshotStatus(randomAlphaOfLength(2), State.WAITING)).     shards.put(new ShardId(idx1Name, idx1UUID, 2), new ShardSnapshotStatus(randomAlphaOfLength(2), randomNonWaitingState(), "")).     // test exactly one waiting shard in an index     shards.put(new ShardId(idx2Name, idx2UUID, 0), new ShardSnapshotStatus(randomAlphaOfLength(2), State.WAITING)).     shards.put(new ShardId(idx2Name, idx2UUID, 1), new ShardSnapshotStatus(randomAlphaOfLength(2), randomNonWaitingState(), "")).     // test no waiting shards in an index     shards.put(new ShardId(idx3Name, idx3UUID, 0), new ShardSnapshotStatus(randomAlphaOfLength(2), randomNonWaitingState(), "")).     Entry entry = new Entry(snapshot, randomBoolean(), randomBoolean(), State.INIT, indices, System.currentTimeMillis(), randomLong(), shards.build()).     ImmutableOpenMap<String, List<ShardId>> waitingIndices = entry.waitingIndices().     assertEquals(2, waitingIndices.get(idx1Name).size()).     assertEquals(1, waitingIndices.get(idx2Name).size()).     assertFalse(waitingIndices.containsKey(idx3Name)). }
false;private;0;3;;private State randomNonWaitingState() {     return randomFrom(Arrays.stream(State.values()).filter(s -> s != State.WAITING).collect(Collectors.toSet())). }
