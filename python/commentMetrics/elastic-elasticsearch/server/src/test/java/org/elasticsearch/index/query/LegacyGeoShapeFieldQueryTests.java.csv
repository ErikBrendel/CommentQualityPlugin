commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected String fieldName() {     return GEO_SHAPE_FIELD_NAME. }
false;protected;0;9;;@Override protected Settings createTestIndexSettings() {     // force the legacy shape impl     Version version = VersionUtils.randomVersionBetween(random(), Version.V_6_0_0, Version.V_6_5_0).     return Settings.builder().put(super.createTestIndexSettings()).put(IndexMetaData.SETTING_VERSION_CREATED, version).build(). }
false;protected;1;43;;@Override protected GeoShapeQueryBuilder doCreateTestQueryBuilder(boolean indexedShape) {     ShapeType shapeType = ShapeType.randomType(random()).     ShapeBuilder<?, ?, ?> shape = RandomShapeGenerator.createShapeWithin(random(), null, shapeType).     GeoShapeQueryBuilder builder.     clearShapeFields().     if (indexedShape == false) {         builder = new GeoShapeQueryBuilder(fieldName(), shape).     } else {         indexedShapeToReturn = shape.         indexedShapeId = randomAlphaOfLengthBetween(3, 20).         builder = new GeoShapeQueryBuilder(fieldName(), indexedShapeId).         if (randomBoolean()) {             indexedShapeIndex = randomAlphaOfLengthBetween(3, 20).             builder.indexedShapeIndex(indexedShapeIndex).         }         if (randomBoolean()) {             indexedShapePath = randomAlphaOfLengthBetween(3, 20).             builder.indexedShapePath(indexedShapePath).         }         if (randomBoolean()) {             indexedShapeRouting = randomAlphaOfLengthBetween(3, 20).             builder.indexedShapeRouting(indexedShapeRouting).         }     }     if (randomBoolean()) {         SpatialStrategy strategy = randomFrom(SpatialStrategy.values()).         // we try to avoid that combination         while (shapeType == ShapeType.MULTILINESTRING && strategy == SpatialStrategy.TERM) {             strategy = randomFrom(SpatialStrategy.values()).         }         builder.strategy(strategy).         if (strategy != SpatialStrategy.TERM) {             builder.relation(randomFrom(ShapeRelation.values())).         }     }     if (randomBoolean()) {         builder.ignoreUnmapped(randomBoolean()).     }     return builder. }
false;public;0;12;;public void testInvalidRelation() throws IOException {     ShapeBuilder<?, ?, ?> shape = RandomShapeGenerator.createShapeWithin(random(), null).     GeoShapeQueryBuilder builder = new GeoShapeQueryBuilder(GEO_SHAPE_FIELD_NAME, shape).     builder.strategy(SpatialStrategy.TERM).     expectThrows(IllegalArgumentException.class, () -> builder.relation(randomFrom(ShapeRelation.DISJOINT, ShapeRelation.WITHIN))).     GeoShapeQueryBuilder builder2 = new GeoShapeQueryBuilder(GEO_SHAPE_FIELD_NAME, shape).     builder2.relation(randomFrom(ShapeRelation.DISJOINT, ShapeRelation.WITHIN)).     expectThrows(IllegalArgumentException.class, () -> builder2.strategy(SpatialStrategy.TERM)).     GeoShapeQueryBuilder builder3 = new GeoShapeQueryBuilder(GEO_SHAPE_FIELD_NAME, shape).     builder3.strategy(SpatialStrategy.TERM).     expectThrows(IllegalArgumentException.class, () -> builder3.relation(randomFrom(ShapeRelation.DISJOINT, ShapeRelation.WITHIN))). }
