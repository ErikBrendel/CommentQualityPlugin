commented;modifiers;parameterAmount;loc;comment;code
false;public;0;54;;public void testValidatingMinMaxSettings() {     Settings settings = Settings.builder().put("thread_pool.test.min_queue_size", randomIntBetween(30, 100)).put("thread_pool.test.max_queue_size", randomIntBetween(1, 25)).build().     try {         new AutoQueueAdjustingExecutorBuilder(settings, "test", 1, 15, 1, 100, 10).         fail("should have thrown an exception").     } catch (IllegalArgumentException e) {         assertThat(e.getMessage(), containsString("Failed to parse value")).     }     settings = Settings.builder().put("thread_pool.test.min_queue_size", 10).put("thread_pool.test.max_queue_size", 9).build().     try {         new AutoQueueAdjustingExecutorBuilder(settings, "test", 1, 15, 1, 100, 2000).getSettings(settings).         fail("should have thrown an exception").     } catch (IllegalArgumentException e) {         assertEquals(e.getMessage(), "Failed to parse value [10] for setting [thread_pool.test.min_queue_size] must be <= 9").     }     settings = Settings.builder().put("thread_pool.test.min_queue_size", 11).put("thread_pool.test.max_queue_size", 10).build().     try {         new AutoQueueAdjustingExecutorBuilder(settings, "test", 1, 15, 1, 100, 2000).getSettings(settings).         fail("should have thrown an exception").     } catch (IllegalArgumentException e) {         assertEquals(e.getMessage(), "Failed to parse value [11] for setting [thread_pool.test.min_queue_size] must be <= 10").     }     settings = Settings.builder().put("thread_pool.test.min_queue_size", 101).build().     try {         new AutoQueueAdjustingExecutorBuilder(settings, "test", 1, 15, 100, 100, 2000).getSettings(settings).         fail("should have thrown an exception").     } catch (IllegalArgumentException e) {         assertEquals(e.getMessage(), "Failed to parse value [101] for setting [thread_pool.test.min_queue_size] must be <= 100").     }     settings = Settings.builder().put("thread_pool.test.max_queue_size", 99).build().     try {         new AutoQueueAdjustingExecutorBuilder(settings, "test", 1, 15, 100, 100, 2000).getSettings(settings).         fail("should have thrown an exception").     } catch (IllegalArgumentException e) {         assertEquals(e.getMessage(), "Failed to parse value [100] for setting [thread_pool.test.min_queue_size] must be <= 99").     } }
false;public;0;10;;public void testSetLowerSettings() {     Settings settings = Settings.builder().put("thread_pool.test.min_queue_size", 10).put("thread_pool.test.max_queue_size", 10).build().     AutoQueueAdjustingExecutorBuilder test = new AutoQueueAdjustingExecutorBuilder(settings, "test", 1, 1000, 1000, 1000, 2000).     AutoQueueAdjustingExecutorBuilder.AutoExecutorSettings s = test.getSettings(settings).     assertEquals(10, s.maxQueueSize).     assertEquals(10, s.minQueueSize). }
false;public;0;10;;public void testSetHigherSettings() {     Settings settings = Settings.builder().put("thread_pool.test.min_queue_size", 2000).put("thread_pool.test.max_queue_size", 3000).build().     AutoQueueAdjustingExecutorBuilder test = new AutoQueueAdjustingExecutorBuilder(settings, "test", 1, 1000, 1000, 1000, 2000).     AutoQueueAdjustingExecutorBuilder.AutoExecutorSettings s = test.getSettings(settings).     assertEquals(3000, s.maxQueueSize).     assertEquals(2000, s.minQueueSize). }
