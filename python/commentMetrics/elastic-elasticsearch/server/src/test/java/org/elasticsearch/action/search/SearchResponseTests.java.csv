# id;timestamp;commentText;codeText;commentWords;codeWords
SearchResponseTests -> public void testFromXContentWithFailures() throws IOException;1524684173;The "_shard/total/failures" section makes if impossible to directly compare xContent, because_the failures in the parsed SearchResponse are wrapped in an extra ElasticSearchException on the client side._Because of this, in this special test case we compare the "top level" fields for equality_and the subsections xContent equivalence independently;public void testFromXContentWithFailures() throws IOException {_        int numFailures = randomIntBetween(1, 5)__        ShardSearchFailure[] failures = new ShardSearchFailure[numFailures]__        for (int i = 0_ i < failures.length_ i++) {_            failures[i] = ShardSearchFailureTests.createTestItem()__        }_        SearchResponse response = createTestItem(failures)__        XContentType xcontentType = randomFrom(XContentType.values())__        final ToXContent.Params params = new ToXContent.MapParams(singletonMap(RestSearchAction.TYPED_KEYS_PARAM, "true"))__        BytesReference originalBytes = toShuffledXContent(response, xcontentType, params, randomBoolean())__        try (XContentParser parser = createParser(xcontentType.xContent(), originalBytes)) {_            SearchResponse parsed = SearchResponse.fromXContent(parser)__            for (int i = 0_ i < parsed.getShardFailures().length_ i++) {_                ShardSearchFailure parsedFailure = parsed.getShardFailures()[i]__                ShardSearchFailure originalFailure = failures[i]__                assertEquals(originalFailure.index(), parsedFailure.index())__                assertEquals(originalFailure.shard(), parsedFailure.shard())__                assertEquals(originalFailure.shardId(), parsedFailure.shardId())__                String originalMsg = originalFailure.getCause().getMessage()__                assertEquals(parsedFailure.getCause().getMessage(), "Elasticsearch exception [type=parsing_exception, reason=" +_                        originalMsg + "]")__                String nestedMsg = originalFailure.getCause().getCause().getMessage()__                assertEquals(parsedFailure.getCause().getCause().getMessage(),_                        "Elasticsearch exception [type=illegal_argument_exception, reason=" + nestedMsg + "]")__            }_            assertEquals(XContentParser.Token.END_OBJECT, parser.currentToken())__            assertNull(parser.nextToken())__        }_    };the,total,failures,section,makes,if,impossible,to,directly,compare,x,content,because,the,failures,in,the,parsed,search,response,are,wrapped,in,an,extra,elastic,search,exception,on,the,client,side,because,of,this,in,this,special,test,case,we,compare,the,top,level,fields,for,equality,and,the,subsections,x,content,equivalence,independently;public,void,test,from,xcontent,with,failures,throws,ioexception,int,num,failures,random,int,between,1,5,shard,search,failure,failures,new,shard,search,failure,num,failures,for,int,i,0,i,failures,length,i,failures,i,shard,search,failure,tests,create,test,item,search,response,response,create,test,item,failures,xcontent,type,xcontent,type,random,from,xcontent,type,values,final,to,xcontent,params,params,new,to,xcontent,map,params,singleton,map,rest,search,action,true,bytes,reference,original,bytes,to,shuffled,xcontent,response,xcontent,type,params,random,boolean,try,xcontent,parser,parser,create,parser,xcontent,type,x,content,original,bytes,search,response,parsed,search,response,from,xcontent,parser,for,int,i,0,i,parsed,get,shard,failures,length,i,shard,search,failure,parsed,failure,parsed,get,shard,failures,i,shard,search,failure,original,failure,failures,i,assert,equals,original,failure,index,parsed,failure,index,assert,equals,original,failure,shard,parsed,failure,shard,assert,equals,original,failure,shard,id,parsed,failure,shard,id,string,original,msg,original,failure,get,cause,get,message,assert,equals,parsed,failure,get,cause,get,message,elasticsearch,exception,type,reason,original,msg,string,nested,msg,original,failure,get,cause,get,cause,get,message,assert,equals,parsed,failure,get,cause,get,cause,get,message,elasticsearch,exception,type,reason,nested,msg,assert,equals,xcontent,parser,token,parser,current,token,assert,null,parser,next,token
SearchResponseTests -> public void testFromXContentWithFailures() throws IOException;1535139672;The "_shard/total/failures" section makes if impossible to directly compare xContent, because_the failures in the parsed SearchResponse are wrapped in an extra ElasticSearchException on the client side._Because of this, in this special test case we compare the "top level" fields for equality_and the subsections xContent equivalence independently;public void testFromXContentWithFailures() throws IOException {_        int numFailures = randomIntBetween(1, 5)__        ShardSearchFailure[] failures = new ShardSearchFailure[numFailures]__        for (int i = 0_ i < failures.length_ i++) {_            failures[i] = ShardSearchFailureTests.createTestItem()__        }_        SearchResponse response = createTestItem(failures)__        XContentType xcontentType = randomFrom(XContentType.values())__        final ToXContent.Params params = new ToXContent.MapParams(singletonMap(RestSearchAction.TYPED_KEYS_PARAM, "true"))__        BytesReference originalBytes = toShuffledXContent(response, xcontentType, params, randomBoolean())__        try (XContentParser parser = createParser(xcontentType.xContent(), originalBytes)) {_            SearchResponse parsed = SearchResponse.fromXContent(parser)__            for (int i = 0_ i < parsed.getShardFailures().length_ i++) {_                ShardSearchFailure parsedFailure = parsed.getShardFailures()[i]__                ShardSearchFailure originalFailure = failures[i]__                assertEquals(originalFailure.index(), parsedFailure.index())__                assertEquals(originalFailure.shard(), parsedFailure.shard())__                assertEquals(originalFailure.shardId(), parsedFailure.shardId())__                String originalMsg = originalFailure.getCause().getMessage()__                assertEquals(parsedFailure.getCause().getMessage(), "Elasticsearch exception [type=parsing_exception, reason=" +_                        originalMsg + "]")__                String nestedMsg = originalFailure.getCause().getCause().getMessage()__                assertEquals(parsedFailure.getCause().getCause().getMessage(),_                        "Elasticsearch exception [type=illegal_argument_exception, reason=" + nestedMsg + "]")__            }_            assertEquals(XContentParser.Token.END_OBJECT, parser.currentToken())__            assertNull(parser.nextToken())__        }_    };the,total,failures,section,makes,if,impossible,to,directly,compare,x,content,because,the,failures,in,the,parsed,search,response,are,wrapped,in,an,extra,elastic,search,exception,on,the,client,side,because,of,this,in,this,special,test,case,we,compare,the,top,level,fields,for,equality,and,the,subsections,x,content,equivalence,independently;public,void,test,from,xcontent,with,failures,throws,ioexception,int,num,failures,random,int,between,1,5,shard,search,failure,failures,new,shard,search,failure,num,failures,for,int,i,0,i,failures,length,i,failures,i,shard,search,failure,tests,create,test,item,search,response,response,create,test,item,failures,xcontent,type,xcontent,type,random,from,xcontent,type,values,final,to,xcontent,params,params,new,to,xcontent,map,params,singleton,map,rest,search,action,true,bytes,reference,original,bytes,to,shuffled,xcontent,response,xcontent,type,params,random,boolean,try,xcontent,parser,parser,create,parser,xcontent,type,x,content,original,bytes,search,response,parsed,search,response,from,xcontent,parser,for,int,i,0,i,parsed,get,shard,failures,length,i,shard,search,failure,parsed,failure,parsed,get,shard,failures,i,shard,search,failure,original,failure,failures,i,assert,equals,original,failure,index,parsed,failure,index,assert,equals,original,failure,shard,parsed,failure,shard,assert,equals,original,failure,shard,id,parsed,failure,shard,id,string,original,msg,original,failure,get,cause,get,message,assert,equals,parsed,failure,get,cause,get,message,elasticsearch,exception,type,reason,original,msg,string,nested,msg,original,failure,get,cause,get,cause,get,message,assert,equals,parsed,failure,get,cause,get,cause,get,message,elasticsearch,exception,type,reason,nested,msg,assert,equals,xcontent,parser,token,parser,current,token,assert,null,parser,next,token
SearchResponseTests -> public void testFromXContentWithFailures() throws IOException;1535405719;The "_shard/total/failures" section makes if impossible to directly compare xContent, because_the failures in the parsed SearchResponse are wrapped in an extra ElasticSearchException on the client side._Because of this, in this special test case we compare the "top level" fields for equality_and the subsections xContent equivalence independently;public void testFromXContentWithFailures() throws IOException {_        int numFailures = randomIntBetween(1, 5)__        ShardSearchFailure[] failures = new ShardSearchFailure[numFailures]__        for (int i = 0_ i < failures.length_ i++) {_            failures[i] = ShardSearchFailureTests.createTestItem(IndexMetaData.INDEX_UUID_NA_VALUE)__        }_        SearchResponse response = createTestItem(failures)__        XContentType xcontentType = randomFrom(XContentType.values())__        final ToXContent.Params params = new ToXContent.MapParams(singletonMap(RestSearchAction.TYPED_KEYS_PARAM, "true"))__        BytesReference originalBytes = toShuffledXContent(response, xcontentType, params, randomBoolean())__        try (XContentParser parser = createParser(xcontentType.xContent(), originalBytes)) {_            SearchResponse parsed = SearchResponse.fromXContent(parser)__            for (int i = 0_ i < parsed.getShardFailures().length_ i++) {_                ShardSearchFailure parsedFailure = parsed.getShardFailures()[i]__                ShardSearchFailure originalFailure = failures[i]__                assertEquals(originalFailure.index(), parsedFailure.index())__                assertEquals(originalFailure.shard(), parsedFailure.shard())__                assertEquals(originalFailure.shardId(), parsedFailure.shardId())__                String originalMsg = originalFailure.getCause().getMessage()__                assertEquals(parsedFailure.getCause().getMessage(), "Elasticsearch exception [type=parsing_exception, reason=" +_                        originalMsg + "]")__                String nestedMsg = originalFailure.getCause().getCause().getMessage()__                assertEquals(parsedFailure.getCause().getCause().getMessage(),_                        "Elasticsearch exception [type=illegal_argument_exception, reason=" + nestedMsg + "]")__            }_            assertEquals(XContentParser.Token.END_OBJECT, parser.currentToken())__            assertNull(parser.nextToken())__        }_    };the,total,failures,section,makes,if,impossible,to,directly,compare,x,content,because,the,failures,in,the,parsed,search,response,are,wrapped,in,an,extra,elastic,search,exception,on,the,client,side,because,of,this,in,this,special,test,case,we,compare,the,top,level,fields,for,equality,and,the,subsections,x,content,equivalence,independently;public,void,test,from,xcontent,with,failures,throws,ioexception,int,num,failures,random,int,between,1,5,shard,search,failure,failures,new,shard,search,failure,num,failures,for,int,i,0,i,failures,length,i,failures,i,shard,search,failure,tests,create,test,item,index,meta,data,search,response,response,create,test,item,failures,xcontent,type,xcontent,type,random,from,xcontent,type,values,final,to,xcontent,params,params,new,to,xcontent,map,params,singleton,map,rest,search,action,true,bytes,reference,original,bytes,to,shuffled,xcontent,response,xcontent,type,params,random,boolean,try,xcontent,parser,parser,create,parser,xcontent,type,x,content,original,bytes,search,response,parsed,search,response,from,xcontent,parser,for,int,i,0,i,parsed,get,shard,failures,length,i,shard,search,failure,parsed,failure,parsed,get,shard,failures,i,shard,search,failure,original,failure,failures,i,assert,equals,original,failure,index,parsed,failure,index,assert,equals,original,failure,shard,parsed,failure,shard,assert,equals,original,failure,shard,id,parsed,failure,shard,id,string,original,msg,original,failure,get,cause,get,message,assert,equals,parsed,failure,get,cause,get,message,elasticsearch,exception,type,reason,original,msg,string,nested,msg,original,failure,get,cause,get,cause,get,message,assert,equals,parsed,failure,get,cause,get,cause,get,message,elasticsearch,exception,type,reason,nested,msg,assert,equals,xcontent,parser,token,parser,current,token,assert,null,parser,next,token
SearchResponseTests -> public void testFromXContentWithFailures() throws IOException;1544035746;The "_shard/total/failures" section makes if impossible to directly compare xContent, because_the failures in the parsed SearchResponse are wrapped in an extra ElasticSearchException on the client side._Because of this, in this special test case we compare the "top level" fields for equality_and the subsections xContent equivalence independently;public void testFromXContentWithFailures() throws IOException {_        int numFailures = randomIntBetween(1, 5)__        ShardSearchFailure[] failures = new ShardSearchFailure[numFailures]__        for (int i = 0_ i < failures.length_ i++) {_            failures[i] = ShardSearchFailureTests.createTestItem(IndexMetaData.INDEX_UUID_NA_VALUE)__        }_        SearchResponse response = createTestItem(failures)__        XContentType xcontentType = randomFrom(XContentType.values())__        final ToXContent.Params params = new ToXContent.MapParams(singletonMap(RestSearchAction.TYPED_KEYS_PARAM, "true"))__        BytesReference originalBytes = toShuffledXContent(response, xcontentType, params, randomBoolean())__        try (XContentParser parser = createParser(xcontentType.xContent(), originalBytes)) {_            SearchResponse parsed = SearchResponse.fromXContent(parser)__            for (int i = 0_ i < parsed.getShardFailures().length_ i++) {_                ShardSearchFailure parsedFailure = parsed.getShardFailures()[i]__                ShardSearchFailure originalFailure = failures[i]__                assertEquals(originalFailure.index(), parsedFailure.index())__                assertEquals(originalFailure.shard(), parsedFailure.shard())__                assertEquals(originalFailure.shardId(), parsedFailure.shardId())__                String originalMsg = originalFailure.getCause().getMessage()__                assertEquals(parsedFailure.getCause().getMessage(), "Elasticsearch exception [type=parsing_exception, reason=" +_                        originalMsg + "]")__                String nestedMsg = originalFailure.getCause().getCause().getMessage()__                assertEquals(parsedFailure.getCause().getCause().getMessage(),_                        "Elasticsearch exception [type=illegal_argument_exception, reason=" + nestedMsg + "]")__            }_            assertEquals(XContentParser.Token.END_OBJECT, parser.currentToken())__            assertNull(parser.nextToken())__        }_    };the,total,failures,section,makes,if,impossible,to,directly,compare,x,content,because,the,failures,in,the,parsed,search,response,are,wrapped,in,an,extra,elastic,search,exception,on,the,client,side,because,of,this,in,this,special,test,case,we,compare,the,top,level,fields,for,equality,and,the,subsections,x,content,equivalence,independently;public,void,test,from,xcontent,with,failures,throws,ioexception,int,num,failures,random,int,between,1,5,shard,search,failure,failures,new,shard,search,failure,num,failures,for,int,i,0,i,failures,length,i,failures,i,shard,search,failure,tests,create,test,item,index,meta,data,search,response,response,create,test,item,failures,xcontent,type,xcontent,type,random,from,xcontent,type,values,final,to,xcontent,params,params,new,to,xcontent,map,params,singleton,map,rest,search,action,true,bytes,reference,original,bytes,to,shuffled,xcontent,response,xcontent,type,params,random,boolean,try,xcontent,parser,parser,create,parser,xcontent,type,x,content,original,bytes,search,response,parsed,search,response,from,xcontent,parser,for,int,i,0,i,parsed,get,shard,failures,length,i,shard,search,failure,parsed,failure,parsed,get,shard,failures,i,shard,search,failure,original,failure,failures,i,assert,equals,original,failure,index,parsed,failure,index,assert,equals,original,failure,shard,parsed,failure,shard,assert,equals,original,failure,shard,id,parsed,failure,shard,id,string,original,msg,original,failure,get,cause,get,message,assert,equals,parsed,failure,get,cause,get,message,elasticsearch,exception,type,reason,original,msg,string,nested,msg,original,failure,get,cause,get,cause,get,message,assert,equals,parsed,failure,get,cause,get,cause,get,message,elasticsearch,exception,type,reason,nested,msg,assert,equals,xcontent,parser,token,parser,current,token,assert,null,parser,next,token
SearchResponseTests -> public void testFromXContentWithFailures() throws IOException;1544470880;The "_shard/total/failures" section makes if impossible to directly compare xContent, because_the failures in the parsed SearchResponse are wrapped in an extra ElasticSearchException on the client side._Because of this, in this special test case we compare the "top level" fields for equality_and the subsections xContent equivalence independently;public void testFromXContentWithFailures() throws IOException {_        int numFailures = randomIntBetween(1, 5)__        ShardSearchFailure[] failures = new ShardSearchFailure[numFailures]__        for (int i = 0_ i < failures.length_ i++) {_            failures[i] = ShardSearchFailureTests.createTestItem(IndexMetaData.INDEX_UUID_NA_VALUE)__        }_        SearchResponse response = createTestItem(failures)__        XContentType xcontentType = randomFrom(XContentType.values())__        final ToXContent.Params params = new ToXContent.MapParams(singletonMap(RestSearchAction.TYPED_KEYS_PARAM, "true"))__        BytesReference originalBytes = toShuffledXContent(response, xcontentType, params, randomBoolean())__        try (XContentParser parser = createParser(xcontentType.xContent(), originalBytes)) {_            SearchResponse parsed = SearchResponse.fromXContent(parser)__            for (int i = 0_ i < parsed.getShardFailures().length_ i++) {_                ShardSearchFailure parsedFailure = parsed.getShardFailures()[i]__                ShardSearchFailure originalFailure = failures[i]__                assertEquals(originalFailure.index(), parsedFailure.index())__                assertEquals(originalFailure.shard(), parsedFailure.shard())__                assertEquals(originalFailure.shardId(), parsedFailure.shardId())__                String originalMsg = originalFailure.getCause().getMessage()__                assertEquals(parsedFailure.getCause().getMessage(), "Elasticsearch exception [type=parsing_exception, reason=" +_                        originalMsg + "]")__                String nestedMsg = originalFailure.getCause().getCause().getMessage()__                assertEquals(parsedFailure.getCause().getCause().getMessage(),_                        "Elasticsearch exception [type=illegal_argument_exception, reason=" + nestedMsg + "]")__            }_            assertEquals(XContentParser.Token.END_OBJECT, parser.currentToken())__            assertNull(parser.nextToken())__        }_    };the,total,failures,section,makes,if,impossible,to,directly,compare,x,content,because,the,failures,in,the,parsed,search,response,are,wrapped,in,an,extra,elastic,search,exception,on,the,client,side,because,of,this,in,this,special,test,case,we,compare,the,top,level,fields,for,equality,and,the,subsections,x,content,equivalence,independently;public,void,test,from,xcontent,with,failures,throws,ioexception,int,num,failures,random,int,between,1,5,shard,search,failure,failures,new,shard,search,failure,num,failures,for,int,i,0,i,failures,length,i,failures,i,shard,search,failure,tests,create,test,item,index,meta,data,search,response,response,create,test,item,failures,xcontent,type,xcontent,type,random,from,xcontent,type,values,final,to,xcontent,params,params,new,to,xcontent,map,params,singleton,map,rest,search,action,true,bytes,reference,original,bytes,to,shuffled,xcontent,response,xcontent,type,params,random,boolean,try,xcontent,parser,parser,create,parser,xcontent,type,x,content,original,bytes,search,response,parsed,search,response,from,xcontent,parser,for,int,i,0,i,parsed,get,shard,failures,length,i,shard,search,failure,parsed,failure,parsed,get,shard,failures,i,shard,search,failure,original,failure,failures,i,assert,equals,original,failure,index,parsed,failure,index,assert,equals,original,failure,shard,parsed,failure,shard,assert,equals,original,failure,shard,id,parsed,failure,shard,id,string,original,msg,original,failure,get,cause,get,message,assert,equals,parsed,failure,get,cause,get,message,elasticsearch,exception,type,reason,original,msg,string,nested,msg,original,failure,get,cause,get,cause,get,message,assert,equals,parsed,failure,get,cause,get,cause,get,message,elasticsearch,exception,type,reason,nested,msg,assert,equals,xcontent,parser,token,parser,current,token,assert,null,parser,next,token
SearchResponseTests -> public void testFromXContentWithFailures() throws IOException;1548067907;The "_shard/total/failures" section makes if impossible to directly compare xContent, because_the failures in the parsed SearchResponse are wrapped in an extra ElasticSearchException on the client side._Because of this, in this special test case we compare the "top level" fields for equality_and the subsections xContent equivalence independently;public void testFromXContentWithFailures() throws IOException {_        int numFailures = randomIntBetween(1, 5)__        ShardSearchFailure[] failures = new ShardSearchFailure[numFailures]__        for (int i = 0_ i < failures.length_ i++) {_            failures[i] = ShardSearchFailureTests.createTestItem(IndexMetaData.INDEX_UUID_NA_VALUE)__        }_        SearchResponse response = createTestItem(failures)__        XContentType xcontentType = randomFrom(XContentType.values())__        final ToXContent.Params params = new ToXContent.MapParams(singletonMap(RestSearchAction.TYPED_KEYS_PARAM, "true"))__        BytesReference originalBytes = toShuffledXContent(response, xcontentType, params, randomBoolean())__        try (XContentParser parser = createParser(xcontentType.xContent(), originalBytes)) {_            SearchResponse parsed = SearchResponse.fromXContent(parser)__            for (int i = 0_ i < parsed.getShardFailures().length_ i++) {_                ShardSearchFailure parsedFailure = parsed.getShardFailures()[i]__                ShardSearchFailure originalFailure = failures[i]__                assertEquals(originalFailure.index(), parsedFailure.index())__                assertEquals(originalFailure.shard(), parsedFailure.shard())__                assertEquals(originalFailure.shardId(), parsedFailure.shardId())__                String originalMsg = originalFailure.getCause().getMessage()__                assertEquals(parsedFailure.getCause().getMessage(), "Elasticsearch exception [type=parsing_exception, reason=" +_                        originalMsg + "]")__                String nestedMsg = originalFailure.getCause().getCause().getMessage()__                assertEquals(parsedFailure.getCause().getCause().getMessage(),_                        "Elasticsearch exception [type=illegal_argument_exception, reason=" + nestedMsg + "]")__            }_            assertEquals(XContentParser.Token.END_OBJECT, parser.currentToken())__            assertNull(parser.nextToken())__        }_    };the,total,failures,section,makes,if,impossible,to,directly,compare,x,content,because,the,failures,in,the,parsed,search,response,are,wrapped,in,an,extra,elastic,search,exception,on,the,client,side,because,of,this,in,this,special,test,case,we,compare,the,top,level,fields,for,equality,and,the,subsections,x,content,equivalence,independently;public,void,test,from,xcontent,with,failures,throws,ioexception,int,num,failures,random,int,between,1,5,shard,search,failure,failures,new,shard,search,failure,num,failures,for,int,i,0,i,failures,length,i,failures,i,shard,search,failure,tests,create,test,item,index,meta,data,search,response,response,create,test,item,failures,xcontent,type,xcontent,type,random,from,xcontent,type,values,final,to,xcontent,params,params,new,to,xcontent,map,params,singleton,map,rest,search,action,true,bytes,reference,original,bytes,to,shuffled,xcontent,response,xcontent,type,params,random,boolean,try,xcontent,parser,parser,create,parser,xcontent,type,x,content,original,bytes,search,response,parsed,search,response,from,xcontent,parser,for,int,i,0,i,parsed,get,shard,failures,length,i,shard,search,failure,parsed,failure,parsed,get,shard,failures,i,shard,search,failure,original,failure,failures,i,assert,equals,original,failure,index,parsed,failure,index,assert,equals,original,failure,shard,parsed,failure,shard,assert,equals,original,failure,shard,id,parsed,failure,shard,id,string,original,msg,original,failure,get,cause,get,message,assert,equals,parsed,failure,get,cause,get,message,elasticsearch,exception,type,reason,original,msg,string,nested,msg,original,failure,get,cause,get,cause,get,message,assert,equals,parsed,failure,get,cause,get,cause,get,message,elasticsearch,exception,type,reason,nested,msg,assert,equals,xcontent,parser,token,parser,current,token,assert,null,parser,next,token
SearchResponseTests -> public void testFromXContentWithFailures() throws IOException;1548943934;The "_shard/total/failures" section makes if impossible to directly compare xContent, because_the failures in the parsed SearchResponse are wrapped in an extra ElasticSearchException on the client side._Because of this, in this special test case we compare the "top level" fields for equality_and the subsections xContent equivalence independently;public void testFromXContentWithFailures() throws IOException {_        int numFailures = randomIntBetween(1, 5)__        ShardSearchFailure[] failures = new ShardSearchFailure[numFailures]__        for (int i = 0_ i < failures.length_ i++) {_            failures[i] = ShardSearchFailureTests.createTestItem(IndexMetaData.INDEX_UUID_NA_VALUE)__        }_        SearchResponse response = createTestItem(failures)__        XContentType xcontentType = randomFrom(XContentType.values())__        final ToXContent.Params params = new ToXContent.MapParams(singletonMap(RestSearchAction.TYPED_KEYS_PARAM, "true"))__        BytesReference originalBytes = toShuffledXContent(response, xcontentType, params, randomBoolean())__        try (XContentParser parser = createParser(xcontentType.xContent(), originalBytes)) {_            SearchResponse parsed = SearchResponse.fromXContent(parser)__            for (int i = 0_ i < parsed.getShardFailures().length_ i++) {_                ShardSearchFailure parsedFailure = parsed.getShardFailures()[i]__                ShardSearchFailure originalFailure = failures[i]__                assertEquals(originalFailure.index(), parsedFailure.index())__                assertEquals(originalFailure.shard(), parsedFailure.shard())__                assertEquals(originalFailure.shardId(), parsedFailure.shardId())__                String originalMsg = originalFailure.getCause().getMessage()__                assertEquals(parsedFailure.getCause().getMessage(), "Elasticsearch exception [type=parsing_exception, reason=" +_                        originalMsg + "]")__                String nestedMsg = originalFailure.getCause().getCause().getMessage()__                assertEquals(parsedFailure.getCause().getCause().getMessage(),_                        "Elasticsearch exception [type=illegal_argument_exception, reason=" + nestedMsg + "]")__            }_            assertEquals(XContentParser.Token.END_OBJECT, parser.currentToken())__            assertNull(parser.nextToken())__        }_    };the,total,failures,section,makes,if,impossible,to,directly,compare,x,content,because,the,failures,in,the,parsed,search,response,are,wrapped,in,an,extra,elastic,search,exception,on,the,client,side,because,of,this,in,this,special,test,case,we,compare,the,top,level,fields,for,equality,and,the,subsections,x,content,equivalence,independently;public,void,test,from,xcontent,with,failures,throws,ioexception,int,num,failures,random,int,between,1,5,shard,search,failure,failures,new,shard,search,failure,num,failures,for,int,i,0,i,failures,length,i,failures,i,shard,search,failure,tests,create,test,item,index,meta,data,search,response,response,create,test,item,failures,xcontent,type,xcontent,type,random,from,xcontent,type,values,final,to,xcontent,params,params,new,to,xcontent,map,params,singleton,map,rest,search,action,true,bytes,reference,original,bytes,to,shuffled,xcontent,response,xcontent,type,params,random,boolean,try,xcontent,parser,parser,create,parser,xcontent,type,x,content,original,bytes,search,response,parsed,search,response,from,xcontent,parser,for,int,i,0,i,parsed,get,shard,failures,length,i,shard,search,failure,parsed,failure,parsed,get,shard,failures,i,shard,search,failure,original,failure,failures,i,assert,equals,original,failure,index,parsed,failure,index,assert,equals,original,failure,shard,parsed,failure,shard,assert,equals,original,failure,shard,id,parsed,failure,shard,id,string,original,msg,original,failure,get,cause,get,message,assert,equals,parsed,failure,get,cause,get,message,elasticsearch,exception,type,reason,original,msg,string,nested,msg,original,failure,get,cause,get,cause,get,message,assert,equals,parsed,failure,get,cause,get,cause,get,message,elasticsearch,exception,type,reason,nested,msg,assert,equals,xcontent,parser,token,parser,current,token,assert,null,parser,next,token
SearchResponseTests -> private SearchResponse createTestItem(boolean minimal, ShardSearchFailure... shardSearchFailures);1524684173;if minimal is set, don't include search hits, aggregations, suggest etc... to make test simpler;private SearchResponse createTestItem(boolean minimal, ShardSearchFailure... shardSearchFailures) {_        boolean timedOut = randomBoolean()__        Boolean terminatedEarly = randomBoolean() ? null : randomBoolean()__        int numReducePhases = randomIntBetween(1, 10)__        long tookInMillis = randomNonNegativeLong()__        int totalShards = randomIntBetween(1, Integer.MAX_VALUE)__        int successfulShards = randomIntBetween(0, totalShards)__        int skippedShards = randomIntBetween(0, totalShards)__        InternalSearchResponse internalSearchResponse__        if (minimal == false) {_            SearchHits hits = SearchHitsTests.createTestItem()__            InternalAggregations aggregations = aggregationsTests.createTestInstance()__            Suggest suggest = SuggestTests.createTestItem()__            SearchProfileShardResults profileShardResults = SearchProfileShardResultsTests.createTestItem()__            internalSearchResponse = new InternalSearchResponse(hits, aggregations, suggest, profileShardResults,_                timedOut, terminatedEarly, numReducePhases)__        } else {_            internalSearchResponse = InternalSearchResponse.empty()__        }__        return new SearchResponse(internalSearchResponse, null, totalShards, successfulShards, skippedShards, tookInMillis,_            shardSearchFailures, randomBoolean() ? randomClusters() : SearchResponse.Clusters.EMPTY)__    };if,minimal,is,set,don,t,include,search,hits,aggregations,suggest,etc,to,make,test,simpler;private,search,response,create,test,item,boolean,minimal,shard,search,failure,shard,search,failures,boolean,timed,out,random,boolean,boolean,terminated,early,random,boolean,null,random,boolean,int,num,reduce,phases,random,int,between,1,10,long,took,in,millis,random,non,negative,long,int,total,shards,random,int,between,1,integer,int,successful,shards,random,int,between,0,total,shards,int,skipped,shards,random,int,between,0,total,shards,internal,search,response,internal,search,response,if,minimal,false,search,hits,hits,search,hits,tests,create,test,item,internal,aggregations,aggregations,aggregations,tests,create,test,instance,suggest,suggest,suggest,tests,create,test,item,search,profile,shard,results,profile,shard,results,search,profile,shard,results,tests,create,test,item,internal,search,response,new,internal,search,response,hits,aggregations,suggest,profile,shard,results,timed,out,terminated,early,num,reduce,phases,else,internal,search,response,internal,search,response,empty,return,new,search,response,internal,search,response,null,total,shards,successful,shards,skipped,shards,took,in,millis,shard,search,failures,random,boolean,random,clusters,search,response,clusters,empty
SearchResponseTests -> private SearchResponse createTestItem(boolean minimal, ShardSearchFailure... shardSearchFailures);1535139672;if minimal is set, don't include search hits, aggregations, suggest etc... to make test simpler;private SearchResponse createTestItem(boolean minimal, ShardSearchFailure... shardSearchFailures) {_        boolean timedOut = randomBoolean()__        Boolean terminatedEarly = randomBoolean() ? null : randomBoolean()__        int numReducePhases = randomIntBetween(1, 10)__        long tookInMillis = randomNonNegativeLong()__        int totalShards = randomIntBetween(1, Integer.MAX_VALUE)__        int successfulShards = randomIntBetween(0, totalShards)__        int skippedShards = randomIntBetween(0, totalShards)__        InternalSearchResponse internalSearchResponse__        if (minimal == false) {_            SearchHits hits = SearchHitsTests.createTestItem()__            InternalAggregations aggregations = aggregationsTests.createTestInstance()__            Suggest suggest = SuggestTests.createTestItem()__            SearchProfileShardResults profileShardResults = SearchProfileShardResultsTests.createTestItem()__            internalSearchResponse = new InternalSearchResponse(hits, aggregations, suggest, profileShardResults,_                timedOut, terminatedEarly, numReducePhases)__        } else {_            internalSearchResponse = InternalSearchResponse.empty()__        }__        return new SearchResponse(internalSearchResponse, null, totalShards, successfulShards, skippedShards, tookInMillis,_            shardSearchFailures, randomBoolean() ? randomClusters() : SearchResponse.Clusters.EMPTY)__    };if,minimal,is,set,don,t,include,search,hits,aggregations,suggest,etc,to,make,test,simpler;private,search,response,create,test,item,boolean,minimal,shard,search,failure,shard,search,failures,boolean,timed,out,random,boolean,boolean,terminated,early,random,boolean,null,random,boolean,int,num,reduce,phases,random,int,between,1,10,long,took,in,millis,random,non,negative,long,int,total,shards,random,int,between,1,integer,int,successful,shards,random,int,between,0,total,shards,int,skipped,shards,random,int,between,0,total,shards,internal,search,response,internal,search,response,if,minimal,false,search,hits,hits,search,hits,tests,create,test,item,internal,aggregations,aggregations,aggregations,tests,create,test,instance,suggest,suggest,suggest,tests,create,test,item,search,profile,shard,results,profile,shard,results,search,profile,shard,results,tests,create,test,item,internal,search,response,new,internal,search,response,hits,aggregations,suggest,profile,shard,results,timed,out,terminated,early,num,reduce,phases,else,internal,search,response,internal,search,response,empty,return,new,search,response,internal,search,response,null,total,shards,successful,shards,skipped,shards,took,in,millis,shard,search,failures,random,boolean,random,clusters,search,response,clusters,empty
SearchResponseTests -> private SearchResponse createTestItem(boolean minimal, ShardSearchFailure... shardSearchFailures);1535405719;if minimal is set, don't include search hits, aggregations, suggest etc... to make test simpler;private SearchResponse createTestItem(boolean minimal, ShardSearchFailure... shardSearchFailures) {_        boolean timedOut = randomBoolean()__        Boolean terminatedEarly = randomBoolean() ? null : randomBoolean()__        int numReducePhases = randomIntBetween(1, 10)__        long tookInMillis = randomNonNegativeLong()__        int totalShards = randomIntBetween(1, Integer.MAX_VALUE)__        int successfulShards = randomIntBetween(0, totalShards)__        int skippedShards = randomIntBetween(0, totalShards)__        InternalSearchResponse internalSearchResponse__        if (minimal == false) {_            SearchHits hits = SearchHitsTests.createTestItem()__            InternalAggregations aggregations = aggregationsTests.createTestInstance()__            Suggest suggest = SuggestTests.createTestItem()__            SearchProfileShardResults profileShardResults = SearchProfileShardResultsTests.createTestItem()__            internalSearchResponse = new InternalSearchResponse(hits, aggregations, suggest, profileShardResults,_                timedOut, terminatedEarly, numReducePhases)__        } else {_            internalSearchResponse = InternalSearchResponse.empty()__        }__        return new SearchResponse(internalSearchResponse, null, totalShards, successfulShards, skippedShards, tookInMillis,_            shardSearchFailures, randomBoolean() ? randomClusters() : SearchResponse.Clusters.EMPTY)__    };if,minimal,is,set,don,t,include,search,hits,aggregations,suggest,etc,to,make,test,simpler;private,search,response,create,test,item,boolean,minimal,shard,search,failure,shard,search,failures,boolean,timed,out,random,boolean,boolean,terminated,early,random,boolean,null,random,boolean,int,num,reduce,phases,random,int,between,1,10,long,took,in,millis,random,non,negative,long,int,total,shards,random,int,between,1,integer,int,successful,shards,random,int,between,0,total,shards,int,skipped,shards,random,int,between,0,total,shards,internal,search,response,internal,search,response,if,minimal,false,search,hits,hits,search,hits,tests,create,test,item,internal,aggregations,aggregations,aggregations,tests,create,test,instance,suggest,suggest,suggest,tests,create,test,item,search,profile,shard,results,profile,shard,results,search,profile,shard,results,tests,create,test,item,internal,search,response,new,internal,search,response,hits,aggregations,suggest,profile,shard,results,timed,out,terminated,early,num,reduce,phases,else,internal,search,response,internal,search,response,empty,return,new,search,response,internal,search,response,null,total,shards,successful,shards,skipped,shards,took,in,millis,shard,search,failures,random,boolean,random,clusters,search,response,clusters,empty
SearchResponseTests -> private SearchResponse createTestItem(boolean minimal, ShardSearchFailure... shardSearchFailures);1544035746;if minimal is set, don't include search hits, aggregations, suggest etc... to make test simpler;private SearchResponse createTestItem(boolean minimal, ShardSearchFailure... shardSearchFailures) {_        boolean timedOut = randomBoolean()__        Boolean terminatedEarly = randomBoolean() ? null : randomBoolean()__        int numReducePhases = randomIntBetween(1, 10)__        long tookInMillis = randomNonNegativeLong()__        int totalShards = randomIntBetween(1, Integer.MAX_VALUE)__        int successfulShards = randomIntBetween(0, totalShards)__        int skippedShards = randomIntBetween(0, totalShards)__        InternalSearchResponse internalSearchResponse__        if (minimal == false) {_            SearchHits hits = SearchHitsTests.createTestItem()__            InternalAggregations aggregations = aggregationsTests.createTestInstance()__            Suggest suggest = SuggestTests.createTestItem()__            SearchProfileShardResults profileShardResults = SearchProfileShardResultsTests.createTestItem()__            internalSearchResponse = new InternalSearchResponse(hits, aggregations, suggest, profileShardResults,_                timedOut, terminatedEarly, numReducePhases)__        } else {_            internalSearchResponse = InternalSearchResponse.empty()__        }__        return new SearchResponse(internalSearchResponse, null, totalShards, successfulShards, skippedShards, tookInMillis,_            shardSearchFailures, randomBoolean() ? randomClusters() : SearchResponse.Clusters.EMPTY)__    };if,minimal,is,set,don,t,include,search,hits,aggregations,suggest,etc,to,make,test,simpler;private,search,response,create,test,item,boolean,minimal,shard,search,failure,shard,search,failures,boolean,timed,out,random,boolean,boolean,terminated,early,random,boolean,null,random,boolean,int,num,reduce,phases,random,int,between,1,10,long,took,in,millis,random,non,negative,long,int,total,shards,random,int,between,1,integer,int,successful,shards,random,int,between,0,total,shards,int,skipped,shards,random,int,between,0,total,shards,internal,search,response,internal,search,response,if,minimal,false,search,hits,hits,search,hits,tests,create,test,item,internal,aggregations,aggregations,aggregations,tests,create,test,instance,suggest,suggest,suggest,tests,create,test,item,search,profile,shard,results,profile,shard,results,search,profile,shard,results,tests,create,test,item,internal,search,response,new,internal,search,response,hits,aggregations,suggest,profile,shard,results,timed,out,terminated,early,num,reduce,phases,else,internal,search,response,internal,search,response,empty,return,new,search,response,internal,search,response,null,total,shards,successful,shards,skipped,shards,took,in,millis,shard,search,failures,random,boolean,random,clusters,search,response,clusters,empty
SearchResponseTests -> private SearchResponse createTestItem(boolean minimal, ShardSearchFailure... shardSearchFailures);1544470880;if minimal is set, don't include search hits, aggregations, suggest etc... to make test simpler;private SearchResponse createTestItem(boolean minimal, ShardSearchFailure... shardSearchFailures) {_        boolean timedOut = randomBoolean()__        Boolean terminatedEarly = randomBoolean() ? null : randomBoolean()__        int numReducePhases = randomIntBetween(1, 10)__        long tookInMillis = randomNonNegativeLong()__        int totalShards = randomIntBetween(1, Integer.MAX_VALUE)__        int successfulShards = randomIntBetween(0, totalShards)__        int skippedShards = randomIntBetween(0, totalShards)__        InternalSearchResponse internalSearchResponse__        if (minimal == false) {_            SearchHits hits = SearchHitsTests.createTestItem(true, true)__            InternalAggregations aggregations = aggregationsTests.createTestInstance()__            Suggest suggest = SuggestTests.createTestItem()__            SearchProfileShardResults profileShardResults = SearchProfileShardResultsTests.createTestItem()__            internalSearchResponse = new InternalSearchResponse(hits, aggregations, suggest, profileShardResults,_                timedOut, terminatedEarly, numReducePhases)__        } else {_            internalSearchResponse = InternalSearchResponse.empty()__        }__        return new SearchResponse(internalSearchResponse, null, totalShards, successfulShards, skippedShards, tookInMillis,_            shardSearchFailures, randomBoolean() ? randomClusters() : SearchResponse.Clusters.EMPTY)__    };if,minimal,is,set,don,t,include,search,hits,aggregations,suggest,etc,to,make,test,simpler;private,search,response,create,test,item,boolean,minimal,shard,search,failure,shard,search,failures,boolean,timed,out,random,boolean,boolean,terminated,early,random,boolean,null,random,boolean,int,num,reduce,phases,random,int,between,1,10,long,took,in,millis,random,non,negative,long,int,total,shards,random,int,between,1,integer,int,successful,shards,random,int,between,0,total,shards,int,skipped,shards,random,int,between,0,total,shards,internal,search,response,internal,search,response,if,minimal,false,search,hits,hits,search,hits,tests,create,test,item,true,true,internal,aggregations,aggregations,aggregations,tests,create,test,instance,suggest,suggest,suggest,tests,create,test,item,search,profile,shard,results,profile,shard,results,search,profile,shard,results,tests,create,test,item,internal,search,response,new,internal,search,response,hits,aggregations,suggest,profile,shard,results,timed,out,terminated,early,num,reduce,phases,else,internal,search,response,internal,search,response,empty,return,new,search,response,internal,search,response,null,total,shards,successful,shards,skipped,shards,took,in,millis,shard,search,failures,random,boolean,random,clusters,search,response,clusters,empty
SearchResponseTests -> private SearchResponse createTestItem(boolean minimal, ShardSearchFailure... shardSearchFailures);1548067907;if minimal is set, don't include search hits, aggregations, suggest etc... to make test simpler;private SearchResponse createTestItem(boolean minimal, ShardSearchFailure... shardSearchFailures) {_        boolean timedOut = randomBoolean()__        Boolean terminatedEarly = randomBoolean() ? null : randomBoolean()__        int numReducePhases = randomIntBetween(1, 10)__        long tookInMillis = randomNonNegativeLong()__        int totalShards = randomIntBetween(1, Integer.MAX_VALUE)__        int successfulShards = randomIntBetween(0, totalShards)__        int skippedShards = randomIntBetween(0, totalShards)__        InternalSearchResponse internalSearchResponse__        if (minimal == false) {_            SearchHits hits = SearchHitsTests.createTestItem(true, true)__            InternalAggregations aggregations = aggregationsTests.createTestInstance()__            Suggest suggest = SuggestTests.createTestItem()__            SearchProfileShardResults profileShardResults = SearchProfileShardResultsTests.createTestItem()__            internalSearchResponse = new InternalSearchResponse(hits, aggregations, suggest, profileShardResults,_                timedOut, terminatedEarly, numReducePhases)__        } else {_            internalSearchResponse = InternalSearchResponse.empty()__        }__        return new SearchResponse(internalSearchResponse, null, totalShards, successfulShards, skippedShards, tookInMillis,_            shardSearchFailures, randomBoolean() ? randomClusters() : SearchResponse.Clusters.EMPTY)__    };if,minimal,is,set,don,t,include,search,hits,aggregations,suggest,etc,to,make,test,simpler;private,search,response,create,test,item,boolean,minimal,shard,search,failure,shard,search,failures,boolean,timed,out,random,boolean,boolean,terminated,early,random,boolean,null,random,boolean,int,num,reduce,phases,random,int,between,1,10,long,took,in,millis,random,non,negative,long,int,total,shards,random,int,between,1,integer,int,successful,shards,random,int,between,0,total,shards,int,skipped,shards,random,int,between,0,total,shards,internal,search,response,internal,search,response,if,minimal,false,search,hits,hits,search,hits,tests,create,test,item,true,true,internal,aggregations,aggregations,aggregations,tests,create,test,instance,suggest,suggest,suggest,tests,create,test,item,search,profile,shard,results,profile,shard,results,search,profile,shard,results,tests,create,test,item,internal,search,response,new,internal,search,response,hits,aggregations,suggest,profile,shard,results,timed,out,terminated,early,num,reduce,phases,else,internal,search,response,internal,search,response,empty,return,new,search,response,internal,search,response,null,total,shards,successful,shards,skipped,shards,took,in,millis,shard,search,failures,random,boolean,random,clusters,search,response,clusters,empty
SearchResponseTests -> private SearchResponse createTestItem(boolean minimal, ShardSearchFailure... shardSearchFailures);1548943934;if minimal is set, don't include search hits, aggregations, suggest etc... to make test simpler;private SearchResponse createTestItem(boolean minimal, ShardSearchFailure... shardSearchFailures) {_        boolean timedOut = randomBoolean()__        Boolean terminatedEarly = randomBoolean() ? null : randomBoolean()__        int numReducePhases = randomIntBetween(1, 10)__        long tookInMillis = randomNonNegativeLong()__        int totalShards = randomIntBetween(1, Integer.MAX_VALUE)__        int successfulShards = randomIntBetween(0, totalShards)__        int skippedShards = randomIntBetween(0, totalShards)__        InternalSearchResponse internalSearchResponse__        if (minimal == false) {_            SearchHits hits = SearchHitsTests.createTestItem(true, true)__            InternalAggregations aggregations = aggregationsTests.createTestInstance()__            Suggest suggest = SuggestTests.createTestItem()__            SearchProfileShardResults profileShardResults = SearchProfileShardResultsTests.createTestItem()__            internalSearchResponse = new InternalSearchResponse(hits, aggregations, suggest, profileShardResults,_                timedOut, terminatedEarly, numReducePhases)__        } else {_            internalSearchResponse = InternalSearchResponse.empty()__        }__        return new SearchResponse(internalSearchResponse, null, totalShards, successfulShards, skippedShards, tookInMillis,_            shardSearchFailures, randomBoolean() ? randomClusters() : SearchResponse.Clusters.EMPTY)__    };if,minimal,is,set,don,t,include,search,hits,aggregations,suggest,etc,to,make,test,simpler;private,search,response,create,test,item,boolean,minimal,shard,search,failure,shard,search,failures,boolean,timed,out,random,boolean,boolean,terminated,early,random,boolean,null,random,boolean,int,num,reduce,phases,random,int,between,1,10,long,took,in,millis,random,non,negative,long,int,total,shards,random,int,between,1,integer,int,successful,shards,random,int,between,0,total,shards,int,skipped,shards,random,int,between,0,total,shards,internal,search,response,internal,search,response,if,minimal,false,search,hits,hits,search,hits,tests,create,test,item,true,true,internal,aggregations,aggregations,aggregations,tests,create,test,instance,suggest,suggest,suggest,tests,create,test,item,search,profile,shard,results,profile,shard,results,search,profile,shard,results,tests,create,test,item,internal,search,response,new,internal,search,response,hits,aggregations,suggest,profile,shard,results,timed,out,terminated,early,num,reduce,phases,else,internal,search,response,internal,search,response,empty,return,new,search,response,internal,search,response,null,total,shards,successful,shards,skipped,shards,took,in,millis,shard,search,failures,random,boolean,random,clusters,search,response,clusters,empty
SearchResponseTests -> public void testFromXContentWithRandomFields() throws IOException;1524684173;This test adds random fields and objects to the xContent rendered out to_ensure we can parse it back to be forward compatible with additions to_the xContent. We test this with a "minimal" SearchResponse, adding random_fields to SearchHits, Aggregations etc... is tested in their own tests;public void testFromXContentWithRandomFields() throws IOException {_        doFromXContentTestWithRandomFields(createMinimalTestItem(), true)__    };this,test,adds,random,fields,and,objects,to,the,x,content,rendered,out,to,ensure,we,can,parse,it,back,to,be,forward,compatible,with,additions,to,the,x,content,we,test,this,with,a,minimal,search,response,adding,random,fields,to,search,hits,aggregations,etc,is,tested,in,their,own,tests;public,void,test,from,xcontent,with,random,fields,throws,ioexception,do,from,xcontent,test,with,random,fields,create,minimal,test,item,true
SearchResponseTests -> public void testFromXContentWithRandomFields() throws IOException;1535139672;This test adds random fields and objects to the xContent rendered out to_ensure we can parse it back to be forward compatible with additions to_the xContent. We test this with a "minimal" SearchResponse, adding random_fields to SearchHits, Aggregations etc... is tested in their own tests;public void testFromXContentWithRandomFields() throws IOException {_        doFromXContentTestWithRandomFields(createMinimalTestItem(), true)__    };this,test,adds,random,fields,and,objects,to,the,x,content,rendered,out,to,ensure,we,can,parse,it,back,to,be,forward,compatible,with,additions,to,the,x,content,we,test,this,with,a,minimal,search,response,adding,random,fields,to,search,hits,aggregations,etc,is,tested,in,their,own,tests;public,void,test,from,xcontent,with,random,fields,throws,ioexception,do,from,xcontent,test,with,random,fields,create,minimal,test,item,true
SearchResponseTests -> public void testFromXContentWithRandomFields() throws IOException;1535405719;This test adds random fields and objects to the xContent rendered out to_ensure we can parse it back to be forward compatible with additions to_the xContent. We test this with a "minimal" SearchResponse, adding random_fields to SearchHits, Aggregations etc... is tested in their own tests;public void testFromXContentWithRandomFields() throws IOException {_        doFromXContentTestWithRandomFields(createMinimalTestItem(), true)__    };this,test,adds,random,fields,and,objects,to,the,x,content,rendered,out,to,ensure,we,can,parse,it,back,to,be,forward,compatible,with,additions,to,the,x,content,we,test,this,with,a,minimal,search,response,adding,random,fields,to,search,hits,aggregations,etc,is,tested,in,their,own,tests;public,void,test,from,xcontent,with,random,fields,throws,ioexception,do,from,xcontent,test,with,random,fields,create,minimal,test,item,true
SearchResponseTests -> public void testFromXContentWithRandomFields() throws IOException;1544035746;This test adds random fields and objects to the xContent rendered out to_ensure we can parse it back to be forward compatible with additions to_the xContent. We test this with a "minimal" SearchResponse, adding random_fields to SearchHits, Aggregations etc... is tested in their own tests;public void testFromXContentWithRandomFields() throws IOException {_        doFromXContentTestWithRandomFields(createMinimalTestItem(), true)__    };this,test,adds,random,fields,and,objects,to,the,x,content,rendered,out,to,ensure,we,can,parse,it,back,to,be,forward,compatible,with,additions,to,the,x,content,we,test,this,with,a,minimal,search,response,adding,random,fields,to,search,hits,aggregations,etc,is,tested,in,their,own,tests;public,void,test,from,xcontent,with,random,fields,throws,ioexception,do,from,xcontent,test,with,random,fields,create,minimal,test,item,true
SearchResponseTests -> public void testFromXContentWithRandomFields() throws IOException;1544470880;This test adds random fields and objects to the xContent rendered out to_ensure we can parse it back to be forward compatible with additions to_the xContent. We test this with a "minimal" SearchResponse, adding random_fields to SearchHits, Aggregations etc... is tested in their own tests;public void testFromXContentWithRandomFields() throws IOException {_        doFromXContentTestWithRandomFields(createMinimalTestItem(), true)__    };this,test,adds,random,fields,and,objects,to,the,x,content,rendered,out,to,ensure,we,can,parse,it,back,to,be,forward,compatible,with,additions,to,the,x,content,we,test,this,with,a,minimal,search,response,adding,random,fields,to,search,hits,aggregations,etc,is,tested,in,their,own,tests;public,void,test,from,xcontent,with,random,fields,throws,ioexception,do,from,xcontent,test,with,random,fields,create,minimal,test,item,true
SearchResponseTests -> public void testFromXContentWithRandomFields() throws IOException;1548067907;This test adds random fields and objects to the xContent rendered out to_ensure we can parse it back to be forward compatible with additions to_the xContent. We test this with a "minimal" SearchResponse, adding random_fields to SearchHits, Aggregations etc... is tested in their own tests;public void testFromXContentWithRandomFields() throws IOException {_        doFromXContentTestWithRandomFields(createMinimalTestItem(), true)__    };this,test,adds,random,fields,and,objects,to,the,x,content,rendered,out,to,ensure,we,can,parse,it,back,to,be,forward,compatible,with,additions,to,the,x,content,we,test,this,with,a,minimal,search,response,adding,random,fields,to,search,hits,aggregations,etc,is,tested,in,their,own,tests;public,void,test,from,xcontent,with,random,fields,throws,ioexception,do,from,xcontent,test,with,random,fields,create,minimal,test,item,true
SearchResponseTests -> public void testFromXContentWithRandomFields() throws IOException;1548943934;This test adds random fields and objects to the xContent rendered out to_ensure we can parse it back to be forward compatible with additions to_the xContent. We test this with a "minimal" SearchResponse, adding random_fields to SearchHits, Aggregations etc... is tested in their own tests;public void testFromXContentWithRandomFields() throws IOException {_        doFromXContentTestWithRandomFields(createMinimalTestItem(), true)__    };this,test,adds,random,fields,and,objects,to,the,x,content,rendered,out,to,ensure,we,can,parse,it,back,to,be,forward,compatible,with,additions,to,the,x,content,we,test,this,with,a,minimal,search,response,adding,random,fields,to,search,hits,aggregations,etc,is,tested,in,their,own,tests;public,void,test,from,xcontent,with,random,fields,throws,ioexception,do,from,xcontent,test,with,random,fields,create,minimal,test,item,true
SearchResponseTests -> private SearchResponse createMinimalTestItem();1524684173;This SearchResponse doesn't include SearchHits, Aggregations, Suggestions, ShardSearchFailures, SearchProfileShardResults_to make it possible to only test properties of the SearchResponse itself;private SearchResponse createMinimalTestItem() {_        return createTestItem(true)__    };this,search,response,doesn,t,include,search,hits,aggregations,suggestions,shard,search,failures,search,profile,shard,results,to,make,it,possible,to,only,test,properties,of,the,search,response,itself;private,search,response,create,minimal,test,item,return,create,test,item,true
SearchResponseTests -> private SearchResponse createMinimalTestItem();1535139672;This SearchResponse doesn't include SearchHits, Aggregations, Suggestions, ShardSearchFailures, SearchProfileShardResults_to make it possible to only test properties of the SearchResponse itself;private SearchResponse createMinimalTestItem() {_        return createTestItem(true)__    };this,search,response,doesn,t,include,search,hits,aggregations,suggestions,shard,search,failures,search,profile,shard,results,to,make,it,possible,to,only,test,properties,of,the,search,response,itself;private,search,response,create,minimal,test,item,return,create,test,item,true
SearchResponseTests -> private SearchResponse createMinimalTestItem();1535405719;This SearchResponse doesn't include SearchHits, Aggregations, Suggestions, ShardSearchFailures, SearchProfileShardResults_to make it possible to only test properties of the SearchResponse itself;private SearchResponse createMinimalTestItem() {_        return createTestItem(true)__    };this,search,response,doesn,t,include,search,hits,aggregations,suggestions,shard,search,failures,search,profile,shard,results,to,make,it,possible,to,only,test,properties,of,the,search,response,itself;private,search,response,create,minimal,test,item,return,create,test,item,true
SearchResponseTests -> private SearchResponse createMinimalTestItem();1544035746;This SearchResponse doesn't include SearchHits, Aggregations, Suggestions, ShardSearchFailures, SearchProfileShardResults_to make it possible to only test properties of the SearchResponse itself;private SearchResponse createMinimalTestItem() {_        return createTestItem(true)__    };this,search,response,doesn,t,include,search,hits,aggregations,suggestions,shard,search,failures,search,profile,shard,results,to,make,it,possible,to,only,test,properties,of,the,search,response,itself;private,search,response,create,minimal,test,item,return,create,test,item,true
SearchResponseTests -> private SearchResponse createMinimalTestItem();1544470880;This SearchResponse doesn't include SearchHits, Aggregations, Suggestions, ShardSearchFailures, SearchProfileShardResults_to make it possible to only test properties of the SearchResponse itself;private SearchResponse createMinimalTestItem() {_        return createTestItem(true)__    };this,search,response,doesn,t,include,search,hits,aggregations,suggestions,shard,search,failures,search,profile,shard,results,to,make,it,possible,to,only,test,properties,of,the,search,response,itself;private,search,response,create,minimal,test,item,return,create,test,item,true
SearchResponseTests -> private SearchResponse createMinimalTestItem();1548067907;This SearchResponse doesn't include SearchHits, Aggregations, Suggestions, ShardSearchFailures, SearchProfileShardResults_to make it possible to only test properties of the SearchResponse itself;private SearchResponse createMinimalTestItem() {_        return createTestItem(true)__    };this,search,response,doesn,t,include,search,hits,aggregations,suggestions,shard,search,failures,search,profile,shard,results,to,make,it,possible,to,only,test,properties,of,the,search,response,itself;private,search,response,create,minimal,test,item,return,create,test,item,true
SearchResponseTests -> private SearchResponse createMinimalTestItem();1548943934;This SearchResponse doesn't include SearchHits, Aggregations, Suggestions, ShardSearchFailures, SearchProfileShardResults_to make it possible to only test properties of the SearchResponse itself;private SearchResponse createMinimalTestItem() {_        return createTestItem(true)__    };this,search,response,doesn,t,include,search,hits,aggregations,suggestions,shard,search,failures,search,profile,shard,results,to,make,it,possible,to,only,test,properties,of,the,search,response,itself;private,search,response,create,minimal,test,item,return,create,test,item,true
SearchResponseTests -> public void testFromXContent() throws IOException;1524684173;the "_shard/total/failures" section makes it impossible to directly_compare xContent, so we omit it here;public void testFromXContent() throws IOException {_        doFromXContentTestWithRandomFields(createTestItem(), false)__    };the,total,failures,section,makes,it,impossible,to,directly,compare,x,content,so,we,omit,it,here;public,void,test,from,xcontent,throws,ioexception,do,from,xcontent,test,with,random,fields,create,test,item,false
SearchResponseTests -> public void testFromXContent() throws IOException;1535139672;the "_shard/total/failures" section makes it impossible to directly_compare xContent, so we omit it here;public void testFromXContent() throws IOException {_        doFromXContentTestWithRandomFields(createTestItem(), false)__    };the,total,failures,section,makes,it,impossible,to,directly,compare,x,content,so,we,omit,it,here;public,void,test,from,xcontent,throws,ioexception,do,from,xcontent,test,with,random,fields,create,test,item,false
SearchResponseTests -> public void testFromXContent() throws IOException;1535405719;the "_shard/total/failures" section makes it impossible to directly_compare xContent, so we omit it here;public void testFromXContent() throws IOException {_        doFromXContentTestWithRandomFields(createTestItem(), false)__    };the,total,failures,section,makes,it,impossible,to,directly,compare,x,content,so,we,omit,it,here;public,void,test,from,xcontent,throws,ioexception,do,from,xcontent,test,with,random,fields,create,test,item,false
SearchResponseTests -> public void testFromXContent() throws IOException;1544035746;the "_shard/total/failures" section makes it impossible to directly_compare xContent, so we omit it here;public void testFromXContent() throws IOException {_        doFromXContentTestWithRandomFields(createTestItem(), false)__    };the,total,failures,section,makes,it,impossible,to,directly,compare,x,content,so,we,omit,it,here;public,void,test,from,xcontent,throws,ioexception,do,from,xcontent,test,with,random,fields,create,test,item,false
SearchResponseTests -> public void testFromXContent() throws IOException;1544470880;the "_shard/total/failures" section makes it impossible to directly_compare xContent, so we omit it here;public void testFromXContent() throws IOException {_        doFromXContentTestWithRandomFields(createTestItem(), false)__    };the,total,failures,section,makes,it,impossible,to,directly,compare,x,content,so,we,omit,it,here;public,void,test,from,xcontent,throws,ioexception,do,from,xcontent,test,with,random,fields,create,test,item,false
SearchResponseTests -> public void testFromXContent() throws IOException;1548067907;the "_shard/total/failures" section makes it impossible to directly_compare xContent, so we omit it here;public void testFromXContent() throws IOException {_        doFromXContentTestWithRandomFields(createTestItem(), false)__    };the,total,failures,section,makes,it,impossible,to,directly,compare,x,content,so,we,omit,it,here;public,void,test,from,xcontent,throws,ioexception,do,from,xcontent,test,with,random,fields,create,test,item,false
SearchResponseTests -> public void testFromXContent() throws IOException;1548943934;the "_shard/total/failures" section makes it impossible to directly_compare xContent, so we omit it here;public void testFromXContent() throws IOException {_        doFromXContentTestWithRandomFields(createTestItem(), false)__    };the,total,failures,section,makes,it,impossible,to,directly,compare,x,content,so,we,omit,it,here;public,void,test,from,xcontent,throws,ioexception,do,from,xcontent,test,with,random,fields,create,test,item,false
