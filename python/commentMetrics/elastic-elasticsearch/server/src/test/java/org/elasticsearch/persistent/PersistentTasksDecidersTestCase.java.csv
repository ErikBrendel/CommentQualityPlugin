commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void setUpThreadPool() {     threadPool = new TestThreadPool(getTestClass().getSimpleName()). }
false;protected;3;4;;@Override protected void nodeOperation(AllocatedPersistentTask task, Params params, PersistentTaskState state) {     logger.debug("Executing task {}", task). }
false;public;1;9;;@Override public <Params extends PersistentTaskParams> PersistentTasksExecutor<Params> getPersistentTaskExecutorSafe(String taskName) {     return new PersistentTasksExecutor<Params>(taskName, null) {          @Override         protected void nodeOperation(AllocatedPersistentTask task, Params params, PersistentTaskState state) {             logger.debug("Executing task {}", task).         }     }. }
false;public;0;18;;@Before public void setUp() throws Exception {     super.setUp().     clusterService = createClusterService(threadPool).     PersistentTasksExecutorRegistry registry = new PersistentTasksExecutorRegistry(emptyList()) {          @Override         public <Params extends PersistentTaskParams> PersistentTasksExecutor<Params> getPersistentTaskExecutorSafe(String taskName) {             return new PersistentTasksExecutor<Params>(taskName, null) {                  @Override                 protected void nodeOperation(AllocatedPersistentTask task, Params params, PersistentTaskState state) {                     logger.debug("Executing task {}", task).                 }             }.         }     }.     persistentTasksClusterService = new PersistentTasksClusterService(clusterService.getSettings(), registry, clusterService, threadPool). }
false;public,static;0;4;;@AfterClass public static void tearDownThreadPool() {     terminate(threadPool). }
false;public;0;5;;@After public void tearDown() throws Exception {     super.tearDown().     clusterService.close(). }
false;protected;1;3;;protected ClusterState reassign(final ClusterState clusterState) {     return persistentTasksClusterService.reassignTasks(clusterState). }
false;protected;1;6;;protected void updateSettings(final Settings settings) {     ClusterSettings clusterSettings = clusterService.getClusterSettings().     Settings.Builder updated = Settings.builder().     clusterSettings.updateDynamicSettings(settings, updated, Settings.builder(), getTestClass().getName()).     clusterSettings.applySettings(updated.build()). }
false;protected,static;2;17;;protected static ClusterState createClusterStateWithTasks(final int nbNodes, final int nbTasks) {     DiscoveryNodes.Builder nodes = DiscoveryNodes.builder().     for (int i = 0. i < nbNodes. i++) {         nodes.add(new DiscoveryNode("_node_" + i, buildNewFakeTransportAddress(), Version.CURRENT)).     }     PersistentTasksCustomMetaData.Builder tasks = PersistentTasksCustomMetaData.builder().     for (int i = 0. i < nbTasks. i++) {         tasks.addTask("_task_" + i, "test", null, new PersistentTasksCustomMetaData.Assignment(null, "initialized")).     }     MetaData metaData = MetaData.builder().putCustom(PersistentTasksCustomMetaData.TYPE, tasks.build()).build().     return ClusterState.builder(ClusterName.DEFAULT).nodes(nodes).metaData(metaData).build(). }
true;protected,static;2;3;/**  * Asserts that the given cluster state contains nbTasks tasks that are assigned *  */ ;/**  * Asserts that the given cluster state contains nbTasks tasks that are assigned *  */ protected static void assertNbAssignedTasks(final long nbTasks, final ClusterState clusterState) {     assertPersistentTasks(nbTasks, clusterState, PersistentTasksCustomMetaData.PersistentTask::isAssigned). }
true;protected,static;2;3;/**  * Asserts that the given cluster state contains nbTasks tasks that are NOT assigned *  */ ;/**  * Asserts that the given cluster state contains nbTasks tasks that are NOT assigned *  */ protected static void assertNbUnassignedTasks(final long nbTasks, final ClusterState clusterState) {     assertPersistentTasks(nbTasks, clusterState, task -> task.isAssigned() == false). }
true;protected,static;3;7;/**  * Asserts that the cluster state contains nbTasks tasks that verify the given predicate *  */ ;/**  * Asserts that the cluster state contains nbTasks tasks that verify the given predicate *  */ protected static void assertPersistentTasks(final long nbTasks, final ClusterState clusterState, final Predicate<PersistentTasksCustomMetaData.PersistentTask> predicate) {     PersistentTasksCustomMetaData tasks = clusterState.metaData().custom(PersistentTasksCustomMetaData.TYPE).     assertNotNull("Persistent tasks must be not null", tasks).     assertEquals(nbTasks, tasks.tasks().stream().filter(predicate).count()). }
