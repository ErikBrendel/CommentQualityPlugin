commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override public void testValidOrdinals() {     assertThat(SuggestMode.MISSING.ordinal(), equalTo(0)).     assertThat(SuggestMode.POPULAR.ordinal(), equalTo(1)).     assertThat(SuggestMode.ALWAYS.ordinal(), equalTo(2)). }
false;public;0;18;;@Override public void testFromString() {     assertThat(SuggestMode.resolve("missing"), equalTo(SuggestMode.MISSING)).     assertThat(SuggestMode.resolve("popular"), equalTo(SuggestMode.POPULAR)).     assertThat(SuggestMode.resolve("always"), equalTo(SuggestMode.ALWAYS)).     final String doesntExist = "doesnt_exist".     try {         SuggestMode.resolve(doesntExist).         fail("SuggestMode should not have an element " + doesntExist).     } catch (IllegalArgumentException e) {     }     try {         SuggestMode.resolve(null).         fail("SuggestMode.resolve on a null value should throw an exception.").     } catch (NullPointerException e) {         assertThat(e.getMessage(), equalTo("Input string is null")).     } }
false;public;0;6;;@Override public void testWriteTo() throws IOException {     assertWriteToStream(SuggestMode.MISSING, 0).     assertWriteToStream(SuggestMode.POPULAR, 1).     assertWriteToStream(SuggestMode.ALWAYS, 2). }
false;public;0;6;;@Override public void testReadFrom() throws IOException {     assertReadFromStream(0, SuggestMode.MISSING).     assertReadFromStream(1, SuggestMode.POPULAR).     assertReadFromStream(2, SuggestMode.ALWAYS). }
