commented;modifiers;parameterAmount;loc;comment;code
false;public;2;6;;@Override public Engine.Index preIndex(ShardId shardId, Engine.Index operation) {     assertThat(shardId, is(randomShardId)).     preIndex.incrementAndGet().     return operation. }
false;public;3;14;;@Override public void postIndex(ShardId shardId, Engine.Index index, Engine.IndexResult result) {     assertThat(shardId, is(randomShardId)).     switch(result.getResultType()) {         case SUCCESS:             postIndex.incrementAndGet().             break.         case FAILURE:             postIndex(shardId, index, result.getFailure()).             break.         default:             throw new IllegalArgumentException("unknown result type: " + result.getResultType()).     } }
false;public;3;5;;@Override public void postIndex(ShardId shardId, Engine.Index index, Exception ex) {     assertThat(shardId, is(randomShardId)).     postIndexException.incrementAndGet(). }
false;public;2;6;;@Override public Engine.Delete preDelete(ShardId shardId, Engine.Delete delete) {     assertThat(shardId, is(randomShardId)).     preDelete.incrementAndGet().     return delete. }
false;public;3;14;;@Override public void postDelete(ShardId shardId, Engine.Delete delete, Engine.DeleteResult result) {     assertThat(shardId, is(randomShardId)).     switch(result.getResultType()) {         case SUCCESS:             postDelete.incrementAndGet().             break.         case FAILURE:             postDelete(shardId, delete, result.getFailure()).             break.         default:             throw new IllegalArgumentException("unknown result type: " + result.getResultType()).     } }
false;public;3;5;;@Override public void postDelete(ShardId shardId, Engine.Delete delete, Exception ex) {     assertThat(shardId, is(randomShardId)).     postDeleteException.incrementAndGet(). }
false;public;2;4;;@Override public Engine.Index preIndex(ShardId shardId, Engine.Index operation) {     throw new RuntimeException(). }
false;public;3;4;;@Override public void postIndex(ShardId shardId, Engine.Index index, Engine.IndexResult result) {     throw new RuntimeException(). }
false;public;3;4;;@Override public void postIndex(ShardId shardId, Engine.Index index, Exception ex) {     throw new RuntimeException(). }
false;public;2;4;;@Override public Engine.Delete preDelete(ShardId shardId, Engine.Delete delete) {     throw new RuntimeException(). }
false;public;3;4;;@Override public void postDelete(ShardId shardId, Engine.Delete delete, Engine.DeleteResult result) {     throw new RuntimeException(). }
false;public;3;4;;@Override public void postDelete(ShardId shardId, Engine.Delete delete, Exception ex) {     throw new RuntimeException(). }
true;public;0;158;// this test also tests if calls are correct if one or more listeners throw exceptions ;// this test also tests if calls are correct if one or more listeners throw exceptions public void testListenersAreExecuted() {     AtomicInteger preIndex = new AtomicInteger().     AtomicInteger postIndex = new AtomicInteger().     AtomicInteger postIndexException = new AtomicInteger().     AtomicInteger preDelete = new AtomicInteger().     AtomicInteger postDelete = new AtomicInteger().     AtomicInteger postDeleteException = new AtomicInteger().     ShardId randomShardId = new ShardId(new Index(randomAlphaOfLength(10), randomAlphaOfLength(10)), randomIntBetween(1, 10)).     IndexingOperationListener listener = new IndexingOperationListener() {          @Override         public Engine.Index preIndex(ShardId shardId, Engine.Index operation) {             assertThat(shardId, is(randomShardId)).             preIndex.incrementAndGet().             return operation.         }          @Override         public void postIndex(ShardId shardId, Engine.Index index, Engine.IndexResult result) {             assertThat(shardId, is(randomShardId)).             switch(result.getResultType()) {                 case SUCCESS:                     postIndex.incrementAndGet().                     break.                 case FAILURE:                     postIndex(shardId, index, result.getFailure()).                     break.                 default:                     throw new IllegalArgumentException("unknown result type: " + result.getResultType()).             }         }          @Override         public void postIndex(ShardId shardId, Engine.Index index, Exception ex) {             assertThat(shardId, is(randomShardId)).             postIndexException.incrementAndGet().         }          @Override         public Engine.Delete preDelete(ShardId shardId, Engine.Delete delete) {             assertThat(shardId, is(randomShardId)).             preDelete.incrementAndGet().             return delete.         }          @Override         public void postDelete(ShardId shardId, Engine.Delete delete, Engine.DeleteResult result) {             assertThat(shardId, is(randomShardId)).             switch(result.getResultType()) {                 case SUCCESS:                     postDelete.incrementAndGet().                     break.                 case FAILURE:                     postDelete(shardId, delete, result.getFailure()).                     break.                 default:                     throw new IllegalArgumentException("unknown result type: " + result.getResultType()).             }         }          @Override         public void postDelete(ShardId shardId, Engine.Delete delete, Exception ex) {             assertThat(shardId, is(randomShardId)).             postDeleteException.incrementAndGet().         }     }.     IndexingOperationListener throwingListener = new IndexingOperationListener() {          @Override         public Engine.Index preIndex(ShardId shardId, Engine.Index operation) {             throw new RuntimeException().         }          @Override         public void postIndex(ShardId shardId, Engine.Index index, Engine.IndexResult result) {             throw new RuntimeException().         }          @Override         public void postIndex(ShardId shardId, Engine.Index index, Exception ex) {             throw new RuntimeException().         }          @Override         public Engine.Delete preDelete(ShardId shardId, Engine.Delete delete) {             throw new RuntimeException().         }          @Override         public void postDelete(ShardId shardId, Engine.Delete delete, Engine.DeleteResult result) {             throw new RuntimeException().         }          @Override         public void postDelete(ShardId shardId, Engine.Delete delete, Exception ex) {             throw new RuntimeException().         }     }.     final List<IndexingOperationListener> indexingOperationListeners = new ArrayList<>(Arrays.asList(listener, listener)).     if (randomBoolean()) {         indexingOperationListeners.add(throwingListener).         if (randomBoolean()) {             indexingOperationListeners.add(throwingListener).         }     }     Collections.shuffle(indexingOperationListeners, random()).     IndexingOperationListener.CompositeListener compositeListener = new IndexingOperationListener.CompositeListener(indexingOperationListeners, logger).     ParsedDocument doc = InternalEngineTests.createParsedDoc("1", null).     Engine.Delete delete = new Engine.Delete("test", "1", new Term("_id", Uid.encodeId(doc.id())), randomNonNegativeLong()).     Engine.Index index = new Engine.Index(new Term("_id", Uid.encodeId(doc.id())), randomNonNegativeLong(), doc).     compositeListener.postDelete(randomShardId, delete, new Engine.DeleteResult(1, 0, SequenceNumbers.UNASSIGNED_SEQ_NO, true)).     assertEquals(0, preIndex.get()).     assertEquals(0, postIndex.get()).     assertEquals(0, postIndexException.get()).     assertEquals(0, preDelete.get()).     assertEquals(2, postDelete.get()).     assertEquals(0, postDeleteException.get()).     compositeListener.postDelete(randomShardId, delete, new RuntimeException()).     assertEquals(0, preIndex.get()).     assertEquals(0, postIndex.get()).     assertEquals(0, postIndexException.get()).     assertEquals(0, preDelete.get()).     assertEquals(2, postDelete.get()).     assertEquals(2, postDeleteException.get()).     compositeListener.preDelete(randomShardId, delete).     assertEquals(0, preIndex.get()).     assertEquals(0, postIndex.get()).     assertEquals(0, postIndexException.get()).     assertEquals(2, preDelete.get()).     assertEquals(2, postDelete.get()).     assertEquals(2, postDeleteException.get()).     compositeListener.postIndex(randomShardId, index, new Engine.IndexResult(0, 0, SequenceNumbers.UNASSIGNED_SEQ_NO, false)).     assertEquals(0, preIndex.get()).     assertEquals(2, postIndex.get()).     assertEquals(0, postIndexException.get()).     assertEquals(2, preDelete.get()).     assertEquals(2, postDelete.get()).     assertEquals(2, postDeleteException.get()).     compositeListener.postIndex(randomShardId, index, new RuntimeException()).     assertEquals(0, preIndex.get()).     assertEquals(2, postIndex.get()).     assertEquals(2, postIndexException.get()).     assertEquals(2, preDelete.get()).     assertEquals(2, postDelete.get()).     assertEquals(2, postDeleteException.get()).     compositeListener.preIndex(randomShardId, index).     assertEquals(2, preIndex.get()).     assertEquals(2, postIndex.get()).     assertEquals(2, postIndexException.get()).     assertEquals(2, preDelete.get()).     assertEquals(2, postDelete.get()).     assertEquals(2, postDeleteException.get()). }
