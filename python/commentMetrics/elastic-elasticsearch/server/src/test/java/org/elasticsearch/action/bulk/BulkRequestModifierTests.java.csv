commented;modifiers;parameterAmount;loc;comment;code
false;public;0;41;;public void testBulkRequestModifier() {     int numRequests = scaledRandomIntBetween(8, 64).     BulkRequest bulkRequest = new BulkRequest().     for (int i = 0. i < numRequests. i++) {         bulkRequest.add(new IndexRequest("_index", "_type", String.valueOf(i)).source("{}", XContentType.JSON)).     }     CaptureActionListener actionListener = new CaptureActionListener().     TransportBulkAction.BulkRequestModifier bulkRequestModifier = new TransportBulkAction.BulkRequestModifier(bulkRequest).     int i = 0.     Set<Integer> failedSlots = new HashSet<>().     while (bulkRequestModifier.hasNext()) {         bulkRequestModifier.next().         if (randomBoolean()) {             bulkRequestModifier.markCurrentItemAsFailed(new RuntimeException()).             failedSlots.add(i).         }         i++.     }     assertThat(bulkRequestModifier.getBulkRequest().requests().size(), equalTo(numRequests - failedSlots.size())).     // simulate that we actually executed the modified bulk request:     long ingestTook = randomLong().     ActionListener<BulkResponse> result = bulkRequestModifier.wrapActionListenerIfNeeded(ingestTook, actionListener).     result.onResponse(new BulkResponse(new BulkItemResponse[numRequests - failedSlots.size()], 0)).     BulkResponse bulkResponse = actionListener.getResponse().     assertThat(bulkResponse.getIngestTookInMillis(), equalTo(ingestTook)).     for (int j = 0. j < bulkResponse.getItems().length. j++) {         if (failedSlots.contains(j)) {             BulkItemResponse item = bulkResponse.getItems()[j].             assertThat(item.isFailed(), is(true)).             assertThat(item.getFailure().getIndex(), equalTo("_index")).             assertThat(item.getFailure().getType(), equalTo("_type")).             assertThat(item.getFailure().getId(), equalTo(String.valueOf(j))).             assertThat(item.getFailure().getMessage(), equalTo("java.lang.RuntimeException")).         } else {             assertThat(bulkResponse.getItems()[j], nullValue()).         }     } }
false;public;1;4;;@Override public void onResponse(BulkResponse bulkItemResponses) {     responses.addAll(Arrays.asList(bulkItemResponses.getItems())). }
false;public;1;3;;@Override public void onFailure(Exception e) { }
false;public;0;44;;public void testPipelineFailures() {     BulkRequest originalBulkRequest = new BulkRequest().     for (int i = 0. i < 32. i++) {         originalBulkRequest.add(new IndexRequest("index", "type", String.valueOf(i))).     }     TransportBulkAction.BulkRequestModifier modifier = new TransportBulkAction.BulkRequestModifier(originalBulkRequest).     for (int i = 0. modifier.hasNext(). i++) {         modifier.next().         if (i % 2 == 0) {             modifier.markCurrentItemAsFailed(new RuntimeException()).         }     }     // So half of the requests have "failed", so only the successful requests are left:     BulkRequest bulkRequest = modifier.getBulkRequest().     assertThat(bulkRequest.requests().size(), Matchers.equalTo(16)).     List<BulkItemResponse> responses = new ArrayList<>().     ActionListener<BulkResponse> bulkResponseListener = modifier.wrapActionListenerIfNeeded(1L, new ActionListener<BulkResponse>() {          @Override         public void onResponse(BulkResponse bulkItemResponses) {             responses.addAll(Arrays.asList(bulkItemResponses.getItems())).         }          @Override         public void onFailure(Exception e) {         }     }).     List<BulkItemResponse> originalResponses = new ArrayList<>().     for (DocWriteRequest<?> actionRequest : bulkRequest.requests()) {         IndexRequest indexRequest = (IndexRequest) actionRequest.         IndexResponse indexResponse = new IndexResponse(new ShardId("index", "_na_", 0), indexRequest.type(), indexRequest.id(), 1, 17, 1, true).         originalResponses.add(new BulkItemResponse(Integer.parseInt(indexRequest.id()), indexRequest.opType(), indexResponse)).     }     bulkResponseListener.onResponse(new BulkResponse(originalResponses.toArray(new BulkItemResponse[originalResponses.size()]), 0)).     assertThat(responses.size(), Matchers.equalTo(32)).     for (int i = 0. i < 32. i++) {         assertThat(responses.get(i).getId(), Matchers.equalTo(String.valueOf(i))).     } }
false;public;0;17;;public void testNoFailures() {     BulkRequest originalBulkRequest = new BulkRequest().     for (int i = 0. i < 32. i++) {         originalBulkRequest.add(new IndexRequest("index", "type", String.valueOf(i))).     }     TransportBulkAction.BulkRequestModifier modifier = new TransportBulkAction.BulkRequestModifier(originalBulkRequest).     while (modifier.hasNext()) {         modifier.next().     }     BulkRequest bulkRequest = modifier.getBulkRequest().     assertThat(bulkRequest, Matchers.sameInstance(originalBulkRequest)).     @SuppressWarnings("unchecked")     ActionListener<BulkResponse> actionListener = mock(ActionListener.class).     assertThat(modifier.wrapActionListenerIfNeeded(1L, actionListener).getClass().isAnonymousClass(), is(true)). }
false;public;1;4;;@Override public void onResponse(BulkResponse bulkItemResponses) {     this.response = bulkItemResponses. }
false;public;1;3;;@Override public void onFailure(Exception e) { }
false;public;0;3;;public BulkResponse getResponse() {     return response. }
