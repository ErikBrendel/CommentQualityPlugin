# id;timestamp;commentText;codeText;commentWords;codeWords
FunctionScoreQueryBuilderTests -> RandomScoreFunctionBuilderWithFixedSeed -> RandomScoreFunctionBuilderWithFixedSeed(StreamInput in) throws IOException;1524684173;Read from a stream.;RandomScoreFunctionBuilderWithFixedSeed(StreamInput in) throws IOException {_            super(in)__        };read,from,a,stream;random,score,function,builder,with,fixed,seed,stream,input,in,throws,ioexception,super,in
FunctionScoreQueryBuilderTests -> RandomScoreFunctionBuilderWithFixedSeed -> RandomScoreFunctionBuilderWithFixedSeed(StreamInput in) throws IOException;1532685069;Read from a stream.;RandomScoreFunctionBuilderWithFixedSeed(StreamInput in) throws IOException {_            super(in)__        };read,from,a,stream;random,score,function,builder,with,fixed,seed,stream,input,in,throws,ioexception,super,in
FunctionScoreQueryBuilderTests -> RandomScoreFunctionBuilderWithFixedSeed -> RandomScoreFunctionBuilderWithFixedSeed(StreamInput in) throws IOException;1536828374;Read from a stream.;RandomScoreFunctionBuilderWithFixedSeed(StreamInput in) throws IOException {_            super(in)__        };read,from,a,stream;random,score,function,builder,with,fixed,seed,stream,input,in,throws,ioexception,super,in
FunctionScoreQueryBuilderTests -> RandomScoreFunctionBuilderWithFixedSeed -> RandomScoreFunctionBuilderWithFixedSeed(StreamInput in) throws IOException;1539951844;Read from a stream.;RandomScoreFunctionBuilderWithFixedSeed(StreamInput in) throws IOException {_            super(in)__        };read,from,a,stream;random,score,function,builder,with,fixed,seed,stream,input,in,throws,ioexception,super,in
FunctionScoreQueryBuilderTests -> RandomScoreFunctionBuilderWithFixedSeed -> RandomScoreFunctionBuilderWithFixedSeed(StreamInput in) throws IOException;1541097522;Read from a stream.;RandomScoreFunctionBuilderWithFixedSeed(StreamInput in) throws IOException {_            super(in)__        };read,from,a,stream;random,score,function,builder,with,fixed,seed,stream,input,in,throws,ioexception,super,in
FunctionScoreQueryBuilderTests -> RandomScoreFunctionBuilderWithFixedSeed -> RandomScoreFunctionBuilderWithFixedSeed(StreamInput in) throws IOException;1546434630;Read from a stream.;RandomScoreFunctionBuilderWithFixedSeed(StreamInput in) throws IOException {_            super(in)__        };read,from,a,stream;random,score,function,builder,with,fixed,seed,stream,input,in,throws,ioexception,super,in
FunctionScoreQueryBuilderTests -> private static String fieldValueFactorCompatibleField();1524684173;A random field compatible with FieldValueFactor.;private static String fieldValueFactorCompatibleField() {_        return randomFrom(INT_FIELD_NAME, DOUBLE_FIELD_NAME, DATE_FIELD_NAME)__    };a,random,field,compatible,with,field,value,factor;private,static,string,field,value,factor,compatible,field,return,random,from
FunctionScoreQueryBuilderTests -> private static String fieldValueFactorCompatibleField();1532685069;A random field compatible with FieldValueFactor.;private static String fieldValueFactorCompatibleField() {_        return randomFrom(INT_FIELD_NAME, DOUBLE_FIELD_NAME, DATE_FIELD_NAME)__    };a,random,field,compatible,with,field,value,factor;private,static,string,field,value,factor,compatible,field,return,random,from
FunctionScoreQueryBuilderTests -> private static String fieldValueFactorCompatibleField();1536828374;A random field compatible with FieldValueFactor.;private static String fieldValueFactorCompatibleField() {_        return randomFrom(INT_FIELD_NAME, DOUBLE_FIELD_NAME, DATE_FIELD_NAME)__    };a,random,field,compatible,with,field,value,factor;private,static,string,field,value,factor,compatible,field,return,random,from
FunctionScoreQueryBuilderTests -> private static String fieldValueFactorCompatibleField();1539951844;A random field compatible with FieldValueFactor.;private static String fieldValueFactorCompatibleField() {_        return randomFrom(INT_FIELD_NAME, DOUBLE_FIELD_NAME, DATE_FIELD_NAME)__    };a,random,field,compatible,with,field,value,factor;private,static,string,field,value,factor,compatible,field,return,random,from
FunctionScoreQueryBuilderTests -> private static String fieldValueFactorCompatibleField();1541097522;A random field compatible with FieldValueFactor.;private static String fieldValueFactorCompatibleField() {_        return randomFrom(INT_FIELD_NAME, DOUBLE_FIELD_NAME, DATE_FIELD_NAME)__    };a,random,field,compatible,with,field,value,factor;private,static,string,field,value,factor,compatible,field,return,random,from
FunctionScoreQueryBuilderTests -> private static String fieldValueFactorCompatibleField();1546434630;A random field compatible with FieldValueFactor.;private static String fieldValueFactorCompatibleField() {_        return randomFrom(INT_FIELD_NAME, DOUBLE_FIELD_NAME, DATE_FIELD_NAME)__    };a,random,field,compatible,with,field,value,factor;private,static,string,field,value,factor,compatible,field,return,random,from
FunctionScoreQueryBuilderTests -> private static FunctionScoreQueryBuilder createRandomFunctionScoreBuilder();1524684173;Creates a random function score query using only constructor params. The caller is responsible for randomizing fields set outside of_the constructor.;private static FunctionScoreQueryBuilder createRandomFunctionScoreBuilder() {_        switch (randomIntBetween(0, 3)) {_        case 0:_            FilterFunctionBuilder[] functions = new FilterFunctionBuilder[randomIntBetween(0, 3)]__            for (int i = 0_ i < functions.length_ i++) {_                functions[i] = new FilterFunctionBuilder(RandomQueryBuilder.createQuery(random()), randomScoreFunction())__            }_            if (randomBoolean()) {_                return new FunctionScoreQueryBuilder(RandomQueryBuilder.createQuery(random()), functions)__            }_            return new FunctionScoreQueryBuilder(functions)__        case 1:_            return new FunctionScoreQueryBuilder(randomScoreFunction())__        case 2:_            return new FunctionScoreQueryBuilder(RandomQueryBuilder.createQuery(random()), randomScoreFunction())__        case 3:_            return new FunctionScoreQueryBuilder(RandomQueryBuilder.createQuery(random()))__        default:_            throw new UnsupportedOperationException()__        }_    };creates,a,random,function,score,query,using,only,constructor,params,the,caller,is,responsible,for,randomizing,fields,set,outside,of,the,constructor;private,static,function,score,query,builder,create,random,function,score,builder,switch,random,int,between,0,3,case,0,filter,function,builder,functions,new,filter,function,builder,random,int,between,0,3,for,int,i,0,i,functions,length,i,functions,i,new,filter,function,builder,random,query,builder,create,query,random,random,score,function,if,random,boolean,return,new,function,score,query,builder,random,query,builder,create,query,random,functions,return,new,function,score,query,builder,functions,case,1,return,new,function,score,query,builder,random,score,function,case,2,return,new,function,score,query,builder,random,query,builder,create,query,random,random,score,function,case,3,return,new,function,score,query,builder,random,query,builder,create,query,random,default,throw,new,unsupported,operation,exception
FunctionScoreQueryBuilderTests -> private static FunctionScoreQueryBuilder createRandomFunctionScoreBuilder();1532685069;Creates a random function score query using only constructor params. The caller is responsible for randomizing fields set outside of_the constructor.;private static FunctionScoreQueryBuilder createRandomFunctionScoreBuilder() {_        switch (randomIntBetween(0, 3)) {_        case 0:_            FilterFunctionBuilder[] functions = new FilterFunctionBuilder[randomIntBetween(0, 3)]__            for (int i = 0_ i < functions.length_ i++) {_                functions[i] = new FilterFunctionBuilder(RandomQueryBuilder.createQuery(random()), randomScoreFunction())__            }_            if (randomBoolean()) {_                return new FunctionScoreQueryBuilder(RandomQueryBuilder.createQuery(random()), functions)__            }_            return new FunctionScoreQueryBuilder(functions)__        case 1:_            return new FunctionScoreQueryBuilder(randomScoreFunction())__        case 2:_            return new FunctionScoreQueryBuilder(RandomQueryBuilder.createQuery(random()), randomScoreFunction())__        case 3:_            return new FunctionScoreQueryBuilder(RandomQueryBuilder.createQuery(random()))__        default:_            throw new UnsupportedOperationException()__        }_    };creates,a,random,function,score,query,using,only,constructor,params,the,caller,is,responsible,for,randomizing,fields,set,outside,of,the,constructor;private,static,function,score,query,builder,create,random,function,score,builder,switch,random,int,between,0,3,case,0,filter,function,builder,functions,new,filter,function,builder,random,int,between,0,3,for,int,i,0,i,functions,length,i,functions,i,new,filter,function,builder,random,query,builder,create,query,random,random,score,function,if,random,boolean,return,new,function,score,query,builder,random,query,builder,create,query,random,functions,return,new,function,score,query,builder,functions,case,1,return,new,function,score,query,builder,random,score,function,case,2,return,new,function,score,query,builder,random,query,builder,create,query,random,random,score,function,case,3,return,new,function,score,query,builder,random,query,builder,create,query,random,default,throw,new,unsupported,operation,exception
FunctionScoreQueryBuilderTests -> private static FunctionScoreQueryBuilder createRandomFunctionScoreBuilder();1536828374;Creates a random function score query using only constructor params. The caller is responsible for randomizing fields set outside of_the constructor.;private static FunctionScoreQueryBuilder createRandomFunctionScoreBuilder() {_        switch (randomIntBetween(0, 3)) {_        case 0:_            FilterFunctionBuilder[] functions = new FilterFunctionBuilder[randomIntBetween(0, 3)]__            for (int i = 0_ i < functions.length_ i++) {_                functions[i] = new FilterFunctionBuilder(RandomQueryBuilder.createQuery(random()), randomScoreFunction())__            }_            if (randomBoolean()) {_                return new FunctionScoreQueryBuilder(RandomQueryBuilder.createQuery(random()), functions)__            }_            return new FunctionScoreQueryBuilder(functions)__        case 1:_            return new FunctionScoreQueryBuilder(randomScoreFunction())__        case 2:_            return new FunctionScoreQueryBuilder(RandomQueryBuilder.createQuery(random()), randomScoreFunction())__        case 3:_            return new FunctionScoreQueryBuilder(RandomQueryBuilder.createQuery(random()))__        default:_            throw new UnsupportedOperationException()__        }_    };creates,a,random,function,score,query,using,only,constructor,params,the,caller,is,responsible,for,randomizing,fields,set,outside,of,the,constructor;private,static,function,score,query,builder,create,random,function,score,builder,switch,random,int,between,0,3,case,0,filter,function,builder,functions,new,filter,function,builder,random,int,between,0,3,for,int,i,0,i,functions,length,i,functions,i,new,filter,function,builder,random,query,builder,create,query,random,random,score,function,if,random,boolean,return,new,function,score,query,builder,random,query,builder,create,query,random,functions,return,new,function,score,query,builder,functions,case,1,return,new,function,score,query,builder,random,score,function,case,2,return,new,function,score,query,builder,random,query,builder,create,query,random,random,score,function,case,3,return,new,function,score,query,builder,random,query,builder,create,query,random,default,throw,new,unsupported,operation,exception
FunctionScoreQueryBuilderTests -> private static FunctionScoreQueryBuilder createRandomFunctionScoreBuilder();1539951844;Creates a random function score query using only constructor params. The caller is responsible for randomizing fields set outside of_the constructor.;private static FunctionScoreQueryBuilder createRandomFunctionScoreBuilder() {_        switch (randomIntBetween(0, 3)) {_        case 0:_            FilterFunctionBuilder[] functions = new FilterFunctionBuilder[randomIntBetween(0, 3)]__            for (int i = 0_ i < functions.length_ i++) {_                functions[i] = new FilterFunctionBuilder(RandomQueryBuilder.createQuery(random()), randomScoreFunction())__            }_            if (randomBoolean()) {_                return new FunctionScoreQueryBuilder(RandomQueryBuilder.createQuery(random()), functions)__            }_            return new FunctionScoreQueryBuilder(functions)__        case 1:_            return new FunctionScoreQueryBuilder(randomScoreFunction())__        case 2:_            return new FunctionScoreQueryBuilder(RandomQueryBuilder.createQuery(random()), randomScoreFunction())__        case 3:_            return new FunctionScoreQueryBuilder(RandomQueryBuilder.createQuery(random()))__        default:_            throw new UnsupportedOperationException()__        }_    };creates,a,random,function,score,query,using,only,constructor,params,the,caller,is,responsible,for,randomizing,fields,set,outside,of,the,constructor;private,static,function,score,query,builder,create,random,function,score,builder,switch,random,int,between,0,3,case,0,filter,function,builder,functions,new,filter,function,builder,random,int,between,0,3,for,int,i,0,i,functions,length,i,functions,i,new,filter,function,builder,random,query,builder,create,query,random,random,score,function,if,random,boolean,return,new,function,score,query,builder,random,query,builder,create,query,random,functions,return,new,function,score,query,builder,functions,case,1,return,new,function,score,query,builder,random,score,function,case,2,return,new,function,score,query,builder,random,query,builder,create,query,random,random,score,function,case,3,return,new,function,score,query,builder,random,query,builder,create,query,random,default,throw,new,unsupported,operation,exception
FunctionScoreQueryBuilderTests -> private static FunctionScoreQueryBuilder createRandomFunctionScoreBuilder();1541097522;Creates a random function score query using only constructor params. The caller is responsible for randomizing fields set outside of_the constructor.;private static FunctionScoreQueryBuilder createRandomFunctionScoreBuilder() {_        switch (randomIntBetween(0, 3)) {_        case 0:_            FilterFunctionBuilder[] functions = new FilterFunctionBuilder[randomIntBetween(0, 3)]__            for (int i = 0_ i < functions.length_ i++) {_                functions[i] = new FilterFunctionBuilder(RandomQueryBuilder.createQuery(random()), randomScoreFunction())__            }_            if (randomBoolean()) {_                return new FunctionScoreQueryBuilder(RandomQueryBuilder.createQuery(random()), functions)__            }_            return new FunctionScoreQueryBuilder(functions)__        case 1:_            return new FunctionScoreQueryBuilder(randomScoreFunction())__        case 2:_            return new FunctionScoreQueryBuilder(RandomQueryBuilder.createQuery(random()), randomScoreFunction())__        case 3:_            return new FunctionScoreQueryBuilder(RandomQueryBuilder.createQuery(random()))__        default:_            throw new UnsupportedOperationException()__        }_    };creates,a,random,function,score,query,using,only,constructor,params,the,caller,is,responsible,for,randomizing,fields,set,outside,of,the,constructor;private,static,function,score,query,builder,create,random,function,score,builder,switch,random,int,between,0,3,case,0,filter,function,builder,functions,new,filter,function,builder,random,int,between,0,3,for,int,i,0,i,functions,length,i,functions,i,new,filter,function,builder,random,query,builder,create,query,random,random,score,function,if,random,boolean,return,new,function,score,query,builder,random,query,builder,create,query,random,functions,return,new,function,score,query,builder,functions,case,1,return,new,function,score,query,builder,random,score,function,case,2,return,new,function,score,query,builder,random,query,builder,create,query,random,random,score,function,case,3,return,new,function,score,query,builder,random,query,builder,create,query,random,default,throw,new,unsupported,operation,exception
FunctionScoreQueryBuilderTests -> private static FunctionScoreQueryBuilder createRandomFunctionScoreBuilder();1546434630;Creates a random function score query using only constructor params. The caller is responsible for randomizing fields set outside of_the constructor.;private static FunctionScoreQueryBuilder createRandomFunctionScoreBuilder() {_        switch (randomIntBetween(0, 3)) {_        case 0:_            FilterFunctionBuilder[] functions = new FilterFunctionBuilder[randomIntBetween(0, 3)]__            for (int i = 0_ i < functions.length_ i++) {_                functions[i] = new FilterFunctionBuilder(RandomQueryBuilder.createQuery(random()), randomScoreFunction())__            }_            if (randomBoolean()) {_                return new FunctionScoreQueryBuilder(RandomQueryBuilder.createQuery(random()), functions)__            }_            return new FunctionScoreQueryBuilder(functions)__        case 1:_            return new FunctionScoreQueryBuilder(randomScoreFunction())__        case 2:_            return new FunctionScoreQueryBuilder(RandomQueryBuilder.createQuery(random()), randomScoreFunction())__        case 3:_            return new FunctionScoreQueryBuilder(RandomQueryBuilder.createQuery(random()))__        default:_            throw new UnsupportedOperationException()__        }_    };creates,a,random,function,score,query,using,only,constructor,params,the,caller,is,responsible,for,randomizing,fields,set,outside,of,the,constructor;private,static,function,score,query,builder,create,random,function,score,builder,switch,random,int,between,0,3,case,0,filter,function,builder,functions,new,filter,function,builder,random,int,between,0,3,for,int,i,0,i,functions,length,i,functions,i,new,filter,function,builder,random,query,builder,create,query,random,random,score,function,if,random,boolean,return,new,function,score,query,builder,random,query,builder,create,query,random,functions,return,new,function,score,query,builder,functions,case,1,return,new,function,score,query,builder,random,score,function,case,2,return,new,function,score,query,builder,random,query,builder,create,query,random,random,score,function,case,3,return,new,function,score,query,builder,random,query,builder,create,query,random,default,throw,new,unsupported,operation,exception
FunctionScoreQueryBuilderTests -> public void testSingleScriptFunction() throws IOException;1541097522;Please see https://github.com/elastic/elasticsearch/issues/35123 for context.;public void testSingleScriptFunction() throws IOException {_        QueryBuilder queryBuilder = RandomQueryBuilder.createQuery(random())__        ScoreFunctionBuilder functionBuilder = new ScriptScoreFunctionBuilder(_            new Script(ScriptType.INLINE, MockScriptEngine.NAME, "1", Collections.emptyMap()))___        FunctionScoreQueryBuilder builder = functionScoreQuery(queryBuilder, functionBuilder)__        if (randomBoolean()) {_            builder.boostMode(randomFrom(CombineFunction.values()))__        }__        Query query = builder.toQuery(createShardContext())__        assertThat(query, instanceOf(FunctionScoreQuery.class))___        CombineFunction expectedBoostMode = builder.boostMode() != null_            ? builder.boostMode()_            : FunctionScoreQueryBuilder.DEFAULT_BOOST_MODE__        CombineFunction actualBoostMode = ((FunctionScoreQuery) query).getCombineFunction()__        assertEquals(expectedBoostMode, actualBoostMode)__    };please,see,https,github,com,elastic,elasticsearch,issues,35123,for,context;public,void,test,single,script,function,throws,ioexception,query,builder,query,builder,random,query,builder,create,query,random,score,function,builder,function,builder,new,script,score,function,builder,new,script,script,type,inline,mock,script,engine,name,1,collections,empty,map,function,score,query,builder,builder,function,score,query,query,builder,function,builder,if,random,boolean,builder,boost,mode,random,from,combine,function,values,query,query,builder,to,query,create,shard,context,assert,that,query,instance,of,function,score,query,class,combine,function,expected,boost,mode,builder,boost,mode,null,builder,boost,mode,function,score,query,builder,combine,function,actual,boost,mode,function,score,query,query,get,combine,function,assert,equals,expected,boost,mode,actual,boost,mode
FunctionScoreQueryBuilderTests -> public void testSingleScriptFunction() throws IOException;1546434630;Please see https://github.com/elastic/elasticsearch/issues/35123 for context.;public void testSingleScriptFunction() throws IOException {_        QueryBuilder queryBuilder = RandomQueryBuilder.createQuery(random())__        ScoreFunctionBuilder functionBuilder = new ScriptScoreFunctionBuilder(_            new Script(ScriptType.INLINE, MockScriptEngine.NAME, "1", Collections.emptyMap()))___        FunctionScoreQueryBuilder builder = functionScoreQuery(queryBuilder, functionBuilder)__        if (randomBoolean()) {_            builder.boostMode(randomFrom(CombineFunction.values()))__        }__        Query query = builder.toQuery(createShardContext())__        assertThat(query, instanceOf(FunctionScoreQuery.class))___        CombineFunction expectedBoostMode = builder.boostMode() != null_            ? builder.boostMode()_            : FunctionScoreQueryBuilder.DEFAULT_BOOST_MODE__        CombineFunction actualBoostMode = ((FunctionScoreQuery) query).getCombineFunction()__        assertEquals(expectedBoostMode, actualBoostMode)__    };please,see,https,github,com,elastic,elasticsearch,issues,35123,for,context;public,void,test,single,script,function,throws,ioexception,query,builder,query,builder,random,query,builder,create,query,random,score,function,builder,function,builder,new,script,score,function,builder,new,script,script,type,inline,mock,script,engine,name,1,collections,empty,map,function,score,query,builder,builder,function,score,query,query,builder,function,builder,if,random,boolean,builder,boost,mode,random,from,combine,function,values,query,query,builder,to,query,create,shard,context,assert,that,query,instance,of,function,score,query,class,combine,function,expected,boost,mode,builder,boost,mode,null,builder,boost,mode,function,score,query,builder,combine,function,actual,boost,mode,function,score,query,query,get,combine,function,assert,equals,expected,boost,mode,actual,boost,mode
FunctionScoreQueryBuilderTests -> private static DecayFunctionBuilder<?> createRandomDecayFunction();1524684173;Create a random decay function setting all of its constructor parameters randomly. The caller is responsible for randomizing other_fields.;private static DecayFunctionBuilder<?> createRandomDecayFunction() {_        String field = randomFrom(INT_FIELD_NAME, DOUBLE_FIELD_NAME, DATE_FIELD_NAME, GEO_POINT_FIELD_NAME)__        Object origin__        Object scale__        Object offset__        switch (field) {_        case GEO_POINT_FIELD_NAME:_            origin = new GeoPoint(randomDouble(), randomDouble()).geohash()__            scale = randomFrom(DistanceUnit.values()).toString(randomDouble())__            offset = randomFrom(DistanceUnit.values()).toString(randomDouble())__            break__        case DATE_FIELD_NAME:_            origin = new DateTime(System.currentTimeMillis() - randomIntBetween(0, 1000000), DateTimeZone.UTC).toString()__            scale = randomTimeValue(1, 1000, "d", "h", "ms", "s", "m")__            offset = randomPositiveTimeValue()__            break__        default:_            origin = randomBoolean() ? randomInt() : randomFloat()__            scale = randomBoolean() ? between(1, Integer.MAX_VALUE) : randomFloat() + Float.MIN_NORMAL__            offset = randomBoolean() ? between(1, Integer.MAX_VALUE) : randomFloat() + Float.MIN_NORMAL__            break__        }_        offset = randomBoolean() ? null : offset__        double decay = randomDouble()__        switch (randomIntBetween(0, 2)) {_        case 0:_            return new GaussDecayFunctionBuilder(field, origin, scale, offset, decay)__        case 1:_            return new ExponentialDecayFunctionBuilder(field, origin, scale, offset, decay)__        case 2:_            return new LinearDecayFunctionBuilder(field, origin, scale, offset, decay)__        default:_            throw new UnsupportedOperationException()__        }_    };create,a,random,decay,function,setting,all,of,its,constructor,parameters,randomly,the,caller,is,responsible,for,randomizing,other,fields;private,static,decay,function,builder,create,random,decay,function,string,field,random,from,object,origin,object,scale,object,offset,switch,field,case,origin,new,geo,point,random,double,random,double,geohash,scale,random,from,distance,unit,values,to,string,random,double,offset,random,from,distance,unit,values,to,string,random,double,break,case,origin,new,date,time,system,current,time,millis,random,int,between,0,1000000,date,time,zone,utc,to,string,scale,random,time,value,1,1000,d,h,ms,s,m,offset,random,positive,time,value,break,default,origin,random,boolean,random,int,random,float,scale,random,boolean,between,1,integer,random,float,float,offset,random,boolean,between,1,integer,random,float,float,break,offset,random,boolean,null,offset,double,decay,random,double,switch,random,int,between,0,2,case,0,return,new,gauss,decay,function,builder,field,origin,scale,offset,decay,case,1,return,new,exponential,decay,function,builder,field,origin,scale,offset,decay,case,2,return,new,linear,decay,function,builder,field,origin,scale,offset,decay,default,throw,new,unsupported,operation,exception
FunctionScoreQueryBuilderTests -> private static DecayFunctionBuilder<?> createRandomDecayFunction();1532685069;Create a random decay function setting all of its constructor parameters randomly. The caller is responsible for randomizing other_fields.;private static DecayFunctionBuilder<?> createRandomDecayFunction() {_        String field = randomFrom(INT_FIELD_NAME, DOUBLE_FIELD_NAME, DATE_FIELD_NAME, GEO_POINT_FIELD_NAME)__        Object origin__        Object scale__        Object offset__        switch (field) {_        case GEO_POINT_FIELD_NAME:_            origin = new GeoPoint(randomDouble(), randomDouble()).geohash()__            scale = randomFrom(DistanceUnit.values()).toString(randomDouble())__            offset = randomFrom(DistanceUnit.values()).toString(randomDouble())__            break__        case DATE_FIELD_NAME:_            origin = new DateTime(System.currentTimeMillis() - randomIntBetween(0, 1000000), DateTimeZone.UTC).toString()__            scale = randomTimeValue(1, 1000, "d", "h", "ms", "s", "m")__            offset = randomPositiveTimeValue()__            break__        default:_            origin = randomBoolean() ? randomInt() : randomFloat()__            scale = randomBoolean() ? between(1, Integer.MAX_VALUE) : randomFloat() + Float.MIN_NORMAL__            offset = randomBoolean() ? between(1, Integer.MAX_VALUE) : randomFloat() + Float.MIN_NORMAL__            break__        }_        offset = randomBoolean() ? null : offset__        double decay = randomDouble()__        switch (randomIntBetween(0, 2)) {_        case 0:_            return new GaussDecayFunctionBuilder(field, origin, scale, offset, decay)__        case 1:_            return new ExponentialDecayFunctionBuilder(field, origin, scale, offset, decay)__        case 2:_            return new LinearDecayFunctionBuilder(field, origin, scale, offset, decay)__        default:_            throw new UnsupportedOperationException()__        }_    };create,a,random,decay,function,setting,all,of,its,constructor,parameters,randomly,the,caller,is,responsible,for,randomizing,other,fields;private,static,decay,function,builder,create,random,decay,function,string,field,random,from,object,origin,object,scale,object,offset,switch,field,case,origin,new,geo,point,random,double,random,double,geohash,scale,random,from,distance,unit,values,to,string,random,double,offset,random,from,distance,unit,values,to,string,random,double,break,case,origin,new,date,time,system,current,time,millis,random,int,between,0,1000000,date,time,zone,utc,to,string,scale,random,time,value,1,1000,d,h,ms,s,m,offset,random,positive,time,value,break,default,origin,random,boolean,random,int,random,float,scale,random,boolean,between,1,integer,random,float,float,offset,random,boolean,between,1,integer,random,float,float,break,offset,random,boolean,null,offset,double,decay,random,double,switch,random,int,between,0,2,case,0,return,new,gauss,decay,function,builder,field,origin,scale,offset,decay,case,1,return,new,exponential,decay,function,builder,field,origin,scale,offset,decay,case,2,return,new,linear,decay,function,builder,field,origin,scale,offset,decay,default,throw,new,unsupported,operation,exception
FunctionScoreQueryBuilderTests -> private static DecayFunctionBuilder<?> createRandomDecayFunction();1536828374;Create a random decay function setting all of its constructor parameters randomly. The caller is responsible for randomizing other_fields.;private static DecayFunctionBuilder<?> createRandomDecayFunction() {_        String field = randomFrom(INT_FIELD_NAME, DOUBLE_FIELD_NAME, DATE_FIELD_NAME, GEO_POINT_FIELD_NAME)__        Object origin__        Object scale__        Object offset__        switch (field) {_        case GEO_POINT_FIELD_NAME:_            origin = new GeoPoint(randomDouble(), randomDouble()).geohash()__            scale = randomFrom(DistanceUnit.values()).toString(randomDouble())__            offset = randomFrom(DistanceUnit.values()).toString(randomDouble())__            break__        case DATE_FIELD_NAME:_            origin = new DateTime(System.currentTimeMillis() - randomIntBetween(0, 1000000), DateTimeZone.UTC).toString()__            scale = randomTimeValue(1, 1000, "d", "h", "ms", "s", "m")__            offset = randomPositiveTimeValue()__            break__        default:_            origin = randomBoolean() ? randomInt() : randomFloat()__            scale = randomBoolean() ? between(1, Integer.MAX_VALUE) : randomFloat() + Float.MIN_NORMAL__            offset = randomBoolean() ? between(1, Integer.MAX_VALUE) : randomFloat() + Float.MIN_NORMAL__            break__        }_        offset = randomBoolean() ? null : offset__        double decay = randomDouble()__        switch (randomIntBetween(0, 2)) {_        case 0:_            return new GaussDecayFunctionBuilder(field, origin, scale, offset, decay)__        case 1:_            return new ExponentialDecayFunctionBuilder(field, origin, scale, offset, decay)__        case 2:_            return new LinearDecayFunctionBuilder(field, origin, scale, offset, decay)__        default:_            throw new UnsupportedOperationException()__        }_    };create,a,random,decay,function,setting,all,of,its,constructor,parameters,randomly,the,caller,is,responsible,for,randomizing,other,fields;private,static,decay,function,builder,create,random,decay,function,string,field,random,from,object,origin,object,scale,object,offset,switch,field,case,origin,new,geo,point,random,double,random,double,geohash,scale,random,from,distance,unit,values,to,string,random,double,offset,random,from,distance,unit,values,to,string,random,double,break,case,origin,new,date,time,system,current,time,millis,random,int,between,0,1000000,date,time,zone,utc,to,string,scale,random,time,value,1,1000,d,h,ms,s,m,offset,random,positive,time,value,break,default,origin,random,boolean,random,int,random,float,scale,random,boolean,between,1,integer,random,float,float,offset,random,boolean,between,1,integer,random,float,float,break,offset,random,boolean,null,offset,double,decay,random,double,switch,random,int,between,0,2,case,0,return,new,gauss,decay,function,builder,field,origin,scale,offset,decay,case,1,return,new,exponential,decay,function,builder,field,origin,scale,offset,decay,case,2,return,new,linear,decay,function,builder,field,origin,scale,offset,decay,default,throw,new,unsupported,operation,exception
FunctionScoreQueryBuilderTests -> private static DecayFunctionBuilder<?> createRandomDecayFunction();1539951844;Create a random decay function setting all of its constructor parameters randomly. The caller is responsible for randomizing other_fields.;private static DecayFunctionBuilder<?> createRandomDecayFunction() {_        String field = randomFrom(INT_FIELD_NAME, DOUBLE_FIELD_NAME, DATE_FIELD_NAME, GEO_POINT_FIELD_NAME)__        Object origin__        Object scale__        Object offset__        switch (field) {_        case GEO_POINT_FIELD_NAME:_            origin = new GeoPoint(randomDouble(), randomDouble()).geohash()__            scale = randomFrom(DistanceUnit.values()).toString(randomDouble())__            offset = randomFrom(DistanceUnit.values()).toString(randomDouble())__            break__        case DATE_FIELD_NAME:_            origin = new DateTime(System.currentTimeMillis() - randomIntBetween(0, 1000000), DateTimeZone.UTC).toString()__            scale = randomTimeValue(1, 1000, "d", "h", "ms", "s", "m")__            offset = randomPositiveTimeValue()__            break__        default:_            origin = randomBoolean() ? randomInt() : randomFloat()__            scale = randomBoolean() ? between(1, Integer.MAX_VALUE) : randomFloat() + Float.MIN_NORMAL__            offset = randomBoolean() ? between(1, Integer.MAX_VALUE) : randomFloat() + Float.MIN_NORMAL__            break__        }_        offset = randomBoolean() ? null : offset__        double decay = randomDouble()__        switch (randomIntBetween(0, 2)) {_        case 0:_            return new GaussDecayFunctionBuilder(field, origin, scale, offset, decay)__        case 1:_            return new ExponentialDecayFunctionBuilder(field, origin, scale, offset, decay)__        case 2:_            return new LinearDecayFunctionBuilder(field, origin, scale, offset, decay)__        default:_            throw new UnsupportedOperationException()__        }_    };create,a,random,decay,function,setting,all,of,its,constructor,parameters,randomly,the,caller,is,responsible,for,randomizing,other,fields;private,static,decay,function,builder,create,random,decay,function,string,field,random,from,object,origin,object,scale,object,offset,switch,field,case,origin,new,geo,point,random,double,random,double,geohash,scale,random,from,distance,unit,values,to,string,random,double,offset,random,from,distance,unit,values,to,string,random,double,break,case,origin,new,date,time,system,current,time,millis,random,int,between,0,1000000,date,time,zone,utc,to,string,scale,random,time,value,1,1000,d,h,ms,s,m,offset,random,positive,time,value,break,default,origin,random,boolean,random,int,random,float,scale,random,boolean,between,1,integer,random,float,float,offset,random,boolean,between,1,integer,random,float,float,break,offset,random,boolean,null,offset,double,decay,random,double,switch,random,int,between,0,2,case,0,return,new,gauss,decay,function,builder,field,origin,scale,offset,decay,case,1,return,new,exponential,decay,function,builder,field,origin,scale,offset,decay,case,2,return,new,linear,decay,function,builder,field,origin,scale,offset,decay,default,throw,new,unsupported,operation,exception
FunctionScoreQueryBuilderTests -> private static DecayFunctionBuilder<?> createRandomDecayFunction();1541097522;Create a random decay function setting all of its constructor parameters randomly. The caller is responsible for randomizing other_fields.;private static DecayFunctionBuilder<?> createRandomDecayFunction() {_        String field = randomFrom(INT_FIELD_NAME, DOUBLE_FIELD_NAME, DATE_FIELD_NAME, GEO_POINT_FIELD_NAME)__        Object origin__        Object scale__        Object offset__        switch (field) {_        case GEO_POINT_FIELD_NAME:_            origin = new GeoPoint(randomDouble(), randomDouble()).geohash()__            scale = randomFrom(DistanceUnit.values()).toString(randomDouble())__            offset = randomFrom(DistanceUnit.values()).toString(randomDouble())__            break__        case DATE_FIELD_NAME:_            origin = new DateTime(System.currentTimeMillis() - randomIntBetween(0, 1000000), DateTimeZone.UTC).toString()__            scale = randomTimeValue(1, 1000, "d", "h", "ms", "s", "m")__            offset = randomPositiveTimeValue()__            break__        default:_            origin = randomBoolean() ? randomInt() : randomFloat()__            scale = randomBoolean() ? between(1, Integer.MAX_VALUE) : randomFloat() + Float.MIN_NORMAL__            offset = randomBoolean() ? between(1, Integer.MAX_VALUE) : randomFloat() + Float.MIN_NORMAL__            break__        }_        offset = randomBoolean() ? null : offset__        double decay = randomDouble()__        switch (randomIntBetween(0, 2)) {_        case 0:_            return new GaussDecayFunctionBuilder(field, origin, scale, offset, decay)__        case 1:_            return new ExponentialDecayFunctionBuilder(field, origin, scale, offset, decay)__        case 2:_            return new LinearDecayFunctionBuilder(field, origin, scale, offset, decay)__        default:_            throw new UnsupportedOperationException()__        }_    };create,a,random,decay,function,setting,all,of,its,constructor,parameters,randomly,the,caller,is,responsible,for,randomizing,other,fields;private,static,decay,function,builder,create,random,decay,function,string,field,random,from,object,origin,object,scale,object,offset,switch,field,case,origin,new,geo,point,random,double,random,double,geohash,scale,random,from,distance,unit,values,to,string,random,double,offset,random,from,distance,unit,values,to,string,random,double,break,case,origin,new,date,time,system,current,time,millis,random,int,between,0,1000000,date,time,zone,utc,to,string,scale,random,time,value,1,1000,d,h,ms,s,m,offset,random,positive,time,value,break,default,origin,random,boolean,random,int,random,float,scale,random,boolean,between,1,integer,random,float,float,offset,random,boolean,between,1,integer,random,float,float,break,offset,random,boolean,null,offset,double,decay,random,double,switch,random,int,between,0,2,case,0,return,new,gauss,decay,function,builder,field,origin,scale,offset,decay,case,1,return,new,exponential,decay,function,builder,field,origin,scale,offset,decay,case,2,return,new,linear,decay,function,builder,field,origin,scale,offset,decay,default,throw,new,unsupported,operation,exception
FunctionScoreQueryBuilderTests -> private static DecayFunctionBuilder<?> createRandomDecayFunction();1546434630;Create a random decay function setting all of its constructor parameters randomly. The caller is responsible for randomizing other_fields.;private static DecayFunctionBuilder<?> createRandomDecayFunction() {_        String field = randomFrom(INT_FIELD_NAME, DOUBLE_FIELD_NAME, DATE_FIELD_NAME, GEO_POINT_FIELD_NAME)__        Object origin__        Object scale__        Object offset__        switch (field) {_        case GEO_POINT_FIELD_NAME:_            origin = new GeoPoint(randomDouble(), randomDouble()).geohash()__            scale = randomFrom(DistanceUnit.values()).toString(randomDouble())__            offset = randomFrom(DistanceUnit.values()).toString(randomDouble())__            break__        case DATE_FIELD_NAME:_            origin = new DateTime(System.currentTimeMillis() - randomIntBetween(0, 1000000), DateTimeZone.UTC).toString()__            scale = randomTimeValue(1, 1000, "d", "h", "ms", "s", "m")__            offset = randomPositiveTimeValue()__            break__        default:_            origin = randomBoolean() ? randomInt() : randomFloat()__            scale = randomBoolean() ? between(1, Integer.MAX_VALUE) : randomFloat() + Float.MIN_NORMAL__            offset = randomBoolean() ? between(1, Integer.MAX_VALUE) : randomFloat() + Float.MIN_NORMAL__            break__        }_        offset = randomBoolean() ? null : offset__        double decay = randomDouble()__        switch (randomIntBetween(0, 2)) {_        case 0:_            return new GaussDecayFunctionBuilder(field, origin, scale, offset, decay)__        case 1:_            return new ExponentialDecayFunctionBuilder(field, origin, scale, offset, decay)__        case 2:_            return new LinearDecayFunctionBuilder(field, origin, scale, offset, decay)__        default:_            throw new UnsupportedOperationException()__        }_    };create,a,random,decay,function,setting,all,of,its,constructor,parameters,randomly,the,caller,is,responsible,for,randomizing,other,fields;private,static,decay,function,builder,create,random,decay,function,string,field,random,from,object,origin,object,scale,object,offset,switch,field,case,origin,new,geo,point,random,double,random,double,geohash,scale,random,from,distance,unit,values,to,string,random,double,offset,random,from,distance,unit,values,to,string,random,double,break,case,origin,new,date,time,system,current,time,millis,random,int,between,0,1000000,date,time,zone,utc,to,string,scale,random,time,value,1,1000,d,h,ms,s,m,offset,random,positive,time,value,break,default,origin,random,boolean,random,int,random,float,scale,random,boolean,between,1,integer,random,float,float,offset,random,boolean,between,1,integer,random,float,float,break,offset,random,boolean,null,offset,double,decay,random,double,switch,random,int,between,0,2,case,0,return,new,gauss,decay,function,builder,field,origin,scale,offset,decay,case,1,return,new,exponential,decay,function,builder,field,origin,scale,offset,decay,case,2,return,new,linear,decay,function,builder,field,origin,scale,offset,decay,default,throw,new,unsupported,operation,exception
