commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Override @Before public void setUp() throws Exception {     super.setUp().     this.bulkClient = new MockBulkClient(getTestName(), CALLS_TO_FAIL).     // Stash some random headers so we can assert that we preserve them     bulkClient.threadPool().getThreadContext().stashContext().     expectedHeaders.clear().     expectedHeaders.put(randomAlphaOfLength(5), randomAlphaOfLength(5)).     bulkClient.threadPool().getThreadContext().putHeader(expectedHeaders). }
false;public;0;6;;@Override @After public void tearDown() throws Exception {     super.tearDown().     this.bulkClient.close(). }
false;private;0;9;;private BulkRequest createBulkRequest() {     BulkRequest request = new BulkRequest().     request.add(new UpdateRequest("shop", "products", "1")).     request.add(new UpdateRequest("shop", "products", "2")).     request.add(new UpdateRequest("shop", "products", "3")).     request.add(new UpdateRequest("shop", "products", "4")).     request.add(new UpdateRequest("shop", "products", "5")).     return request. }
false;public;0;11;;public void testRetryBacksOff() throws Exception {     BackoffPolicy backoff = BackoffPolicy.constantBackoff(DELAY, CALLS_TO_FAIL).     BulkRequest bulkRequest = createBulkRequest().     BulkResponse response = new Retry(backoff, bulkClient.threadPool()).withBackoff(bulkClient::bulk, bulkRequest).actionGet().     assertFalse(response.hasFailures()).     assertThat(response.getItems().length, equalTo(bulkRequest.numberOfActions())). }
false;public;0;11;;public void testRetryFailsAfterBackoff() throws Exception {     BackoffPolicy backoff = BackoffPolicy.constantBackoff(DELAY, CALLS_TO_FAIL - 1).     BulkRequest bulkRequest = createBulkRequest().     BulkResponse response = new Retry(backoff, bulkClient.threadPool()).withBackoff(bulkClient::bulk, bulkRequest).actionGet().     assertTrue(response.hasFailures()).     assertThat(response.getItems().length, equalTo(bulkRequest.numberOfActions())). }
false;public;0;14;;public void testRetryWithListenerBacksOff() throws Exception {     BackoffPolicy backoff = BackoffPolicy.constantBackoff(DELAY, CALLS_TO_FAIL).     AssertingListener listener = new AssertingListener().     BulkRequest bulkRequest = createBulkRequest().     Retry retry = new Retry(backoff, bulkClient.threadPool()).     retry.withBackoff(bulkClient::bulk, bulkRequest, listener).     listener.awaitCallbacksCalled().     listener.assertOnResponseCalled().     listener.assertResponseWithoutFailures().     listener.assertResponseWithNumberOfItems(bulkRequest.numberOfActions()).     listener.assertOnFailureNeverCalled(). }
false;public;0;15;;public void testRetryWithListenerFailsAfterBacksOff() throws Exception {     BackoffPolicy backoff = BackoffPolicy.constantBackoff(DELAY, CALLS_TO_FAIL - 1).     AssertingListener listener = new AssertingListener().     BulkRequest bulkRequest = createBulkRequest().     Retry retry = new Retry(backoff, bulkClient.threadPool()).     retry.withBackoff(bulkClient::bulk, bulkRequest, listener).     listener.awaitCallbacksCalled().     listener.assertOnResponseCalled().     listener.assertResponseWithFailures().     listener.assertResponseWithNumberOfItems(bulkRequest.numberOfActions()).     listener.assertOnFailureNeverCalled(). }
false;public;0;3;;public void awaitCallbacksCalled() throws InterruptedException {     latch.await(). }
false;public;1;6;;@Override public void onResponse(BulkResponse bulkItemResponses) {     this.response = bulkItemResponses.     countOnResponseCalled.incrementAndGet().     latch.countDown(). }
false;public;1;5;;@Override public void onFailure(Exception e) {     this.lastFailure = e.     latch.countDown(). }
false;public;0;3;;public void assertOnResponseCalled() {     assertThat(countOnResponseCalled.get(), equalTo(1)). }
false;public;1;3;;public void assertResponseWithNumberOfItems(int numItems) {     assertThat(response.getItems().length, equalTo(numItems)). }
false;public;0;4;;public void assertResponseWithoutFailures() {     assertThat(response, notNullValue()).     assertFalse("Response should not have failures", response.hasFailures()). }
false;public;0;4;;public void assertResponseWithFailures() {     assertThat(response, notNullValue()).     assertTrue("Response should have failures", response.hasFailures()). }
false;public;0;3;;public void assertOnFailureNeverCalled() {     assertThat(lastFailure, nullValue()). }
false;public;1;6;;@Override public ActionFuture<BulkResponse> bulk(BulkRequest request) {     PlainActionFuture<BulkResponse> responseFuture = new PlainActionFuture<>().     bulk(request, responseFuture).     return responseFuture. }
false;public;2;24;;@Override public void bulk(BulkRequest request, ActionListener<BulkResponse> listener) {     if (false == expectedHeaders.equals(threadPool().getThreadContext().getHeaders())) {         listener.onFailure(new RuntimeException("Expected " + expectedHeaders + " but got " + threadPool().getThreadContext().getHeaders())).         return.     }     // do everything synchronously, that's fine for a test     boolean shouldFail = numberOfCallsToFail > 0.     numberOfCallsToFail--.     BulkItemResponse[] itemResponses = new BulkItemResponse[request.requests().size()].     // if we have to fail, we need to fail at least once "reliably", the rest can be random     int itemToFail = randomInt(request.requests().size() - 1).     for (int idx = 0. idx < request.requests().size(). idx++) {         if (shouldFail && (randomBoolean() || idx == itemToFail)) {             itemResponses[idx] = failedResponse().         } else {             itemResponses[idx] = successfulResponse().         }     }     listener.onResponse(new BulkResponse(itemResponses, 1000L)). }
false;private;0;3;;private BulkItemResponse successfulResponse() {     return new BulkItemResponse(1, OpType.DELETE, new DeleteResponse()). }
false;private;0;4;;private BulkItemResponse failedResponse() {     return new BulkItemResponse(1, OpType.INDEX, new BulkItemResponse.Failure("test", "test", "1", new EsRejectedExecutionException("pool full"))). }
