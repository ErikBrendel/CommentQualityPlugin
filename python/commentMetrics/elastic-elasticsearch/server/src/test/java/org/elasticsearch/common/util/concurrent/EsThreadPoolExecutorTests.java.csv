commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;10;;@Override protected Settings nodeSettings() {     return Settings.builder().put("node.name", "es-thread-pool-executor-tests").put("thread_pool.write.size", 1).put("thread_pool.write.queue_size", 0).put("thread_pool.search.size", 1).put("thread_pool.search.queue_size", 1).build(). }
false;public;0;6;;public void testRejectedExecutionExceptionContainsNodeName() {     // we test a fixed and an auto-queue executor but not scaling since it does not reject     runThreadPoolExecutorTest(1, ThreadPool.Names.WRITE).     runThreadPoolExecutorTest(2, ThreadPool.Names.SEARCH). }
false;public;1;4;;@Override public void onFailure(final Exception e) { }
false;public;1;5;;@Override public void onRejection(final Exception e) {     rejected.set(true).     assertThat(e, hasToString(containsString("name = es-thread-pool-executor-tests/" + executor + ", "))). }
false;protected;0;4;;@Override protected void doRun() throws Exception { }
false;private;2;34;;private void runThreadPoolExecutorTest(final int fill, final String executor) {     final CountDownLatch latch = new CountDownLatch(1).     for (int i = 0. i < fill. i++) {         node().injector().getInstance(ThreadPool.class).executor(executor).execute(() -> {             try {                 latch.await().             } catch (final InterruptedException e) {                 throw new RuntimeException(e).             }         }).     }     final AtomicBoolean rejected = new AtomicBoolean().     node().injector().getInstance(ThreadPool.class).executor(executor).execute(new AbstractRunnable() {          @Override         public void onFailure(final Exception e) {         }          @Override         public void onRejection(final Exception e) {             rejected.set(true).             assertThat(e, hasToString(containsString("name = es-thread-pool-executor-tests/" + executor + ", "))).         }          @Override         protected void doRun() throws Exception {         }     }).     latch.countDown().     assertTrue(rejected.get()). }
