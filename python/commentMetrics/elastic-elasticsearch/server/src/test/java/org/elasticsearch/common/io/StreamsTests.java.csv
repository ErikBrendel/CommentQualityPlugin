commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;public void testCopyFromByteArray() throws IOException {     byte[] content = "content".getBytes(StandardCharsets.UTF_8).     ByteArrayOutputStream out = new ByteArrayOutputStream(content.length).     Streams.copy(content, out).     assertThat(Arrays.equals(content, out.toByteArray()), equalTo(true)). }
false;public;0;8;;public void testCopyFromReader() throws IOException {     String content = "content".     StringReader in = new StringReader(content).     StringWriter out = new StringWriter().     int count = Streams.copy(in, out).     assertThat(content.length(), equalTo(count)).     assertThat(out.toString(), equalTo(content)). }
false;public;0;6;;public void testCopyFromString() throws IOException {     String content = "content".     StringWriter out = new StringWriter().     Streams.copy(content, out).     assertThat(out.toString(), equalTo(content)). }
false;public;0;6;;public void testCopyToString() throws IOException {     String content = "content".     StringReader in = new StringReader(content).     String result = copyToString(in).     assertThat(result, equalTo(content)). }
false;public;0;10;;public void testBytesStreamInput() throws IOException {     byte[] stuff = new byte[] { 0, 1, 2, 3 }.     BytesRef stuffRef = new BytesRef(stuff, 2, 2).     BytesArray stuffArray = new BytesArray(stuffRef).     StreamInput input = stuffArray.streamInput().     assertEquals(2, input.read()).     assertEquals(3, input.read()).     assertEquals(-1, input.read()).     input.close(). }
