commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;public void testSpiFileExists() throws IOException {     String serviceFile = "/META-INF/services/" + NamedXContentProvider.class.getName().     List<String> implementations = new ArrayList<>().     try (InputStream input = NamedXContentProviderTests.class.getResourceAsStream(serviceFile)) {         Streams.readAllLines(input, implementations::add).     }     assertEquals(1, implementations.size()).     assertEquals(TestNamedXContentProvider.class.getName(), implementations.get(0)). }
false;public;0;13;;public void testNamedXContents() {     final List<NamedXContentRegistry.Entry> namedXContents = new ArrayList<>().     for (NamedXContentProvider service : ServiceLoader.load(NamedXContentProvider.class)) {         namedXContents.addAll(service.getNamedXContentParsers()).     }     assertEquals(2, namedXContents.size()).     List<Predicate<NamedXContentRegistry.Entry>> predicates = new ArrayList<>(2).     predicates.add(e -> Aggregation.class.equals(e.categoryClass) && "test_aggregation".equals(e.name.getPreferredName())).     predicates.add(e -> Suggest.Suggestion.class.equals(e.categoryClass) && "test_suggestion".equals(e.name.getPreferredName())).     predicates.forEach(predicate -> assertEquals(1, namedXContents.stream().filter(predicate).count())). }
false;public;0;9;;@Override public List<NamedXContentRegistry.Entry> getNamedXContentParsers() {     return Arrays.asList(new NamedXContentRegistry.Entry(Aggregation.class, new ParseField("test_aggregation"), (parser, context) -> ParsedSimpleValue.fromXContent(parser, (String) context)), new NamedXContentRegistry.Entry(Suggest.Suggestion.class, new ParseField("test_suggestion"), (parser, context) -> TermSuggestion.fromXContent(parser, (String) context))). }
