commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Override public Collection<MappingRequestValidator> mappingRequestValidators() {     return Collections.singletonList((request, state, indices) -> {         for (Index index : indices) {             if (allowedOrigins.getOrDefault(index.getName(), Collections.emptySet()).contains(request.origin()) == false) {                 return new IllegalStateException("not allowed: index[" + index.getName() + "] origin[" + request.origin() + "]").             }         }         return null.     }). }
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> getPlugins() {     return Collections.singletonList(TestPlugin.class). }
false;public;0;41;;public void testValidateMappingRequest() {     createIndex("index_1").     createIndex("index_2").     allowedOrigins.put("index_1", Arrays.asList("1", "2")).     allowedOrigins.put("index_2", Arrays.asList("2", "3")).     {         String origin = randomFrom("", "3", "4", "5").         PutMappingRequest request = new PutMappingRequest().indices("index_1").type("doc").source("t1", "type=keyword").origin(origin).         Exception e = expectThrows(IllegalStateException.class, () -> client().admin().indices().putMapping(request).actionGet()).         assertThat(e.getMessage(), equalTo("not allowed: index[index_1] origin[" + origin + "]")).     }     {         PutMappingRequest request = new PutMappingRequest().indices("index_1").origin(randomFrom("1", "2")).type("doc").source("t1", "type=keyword").         assertAcked(client().admin().indices().putMapping(request).actionGet()).     }     {         String origin = randomFrom("", "1", "4", "5").         PutMappingRequest request = new PutMappingRequest().indices("index_2").type("doc").source("t2", "type=keyword").origin(origin).         Exception e = expectThrows(IllegalStateException.class, () -> client().admin().indices().putMapping(request).actionGet()).         assertThat(e.getMessage(), equalTo("not allowed: index[index_2] origin[" + origin + "]")).     }     {         PutMappingRequest request = new PutMappingRequest().indices("index_2").origin(randomFrom("2", "3")).type("doc").source("t1", "type=keyword").         assertAcked(client().admin().indices().putMapping(request).actionGet()).     }     {         String origin = randomFrom("", "1", "3", "4").         PutMappingRequest request = new PutMappingRequest().indices("*").type("doc").source("t3", "type=keyword").origin(origin).         Exception e = expectThrows(IllegalStateException.class, () -> client().admin().indices().putMapping(request).actionGet()).         assertThat(e.getMessage(), containsString("not allowed:")).     }     {         PutMappingRequest request = new PutMappingRequest().indices("index_2").origin("2").type("doc").source("t3", "type=keyword").         assertAcked(client().admin().indices().putMapping(request).actionGet()).     } }
