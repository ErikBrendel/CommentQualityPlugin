commented;modifiers;parameterAmount;loc;comment;code
false;public;3;5;;@Override public Mapper.Builder<?, ?> parse(String name, Map<String, Object> node, ParserContext parserContext) throws MapperParsingException {     return null. }
false;public;3;5;;@Override public MetadataFieldMapper.Builder<?, ?> parse(String name, Map<String, Object> node, ParserContext parserContext) throws MapperParsingException {     return null. }
false;public;2;4;;@Override public MetadataFieldMapper getDefault(MappedFieldType fieldType, ParserContext context) {     return null. }
false;public;0;4;;@Override public Map<String, Mapper.TypeParser> getMappers() {     return Collections.singletonMap("fake-mapper", new FakeMapperParser()). }
false;public;0;4;;@Override public Map<String, MetadataFieldMapper.TypeParser> getMetadataMappers() {     return Collections.singletonMap("fake-metadata-mapper", new FakeMetadataMapperParser()). }
false;public;0;27;;public void testBuiltinMappers() {     IndicesModule module = new IndicesModule(Collections.emptyList()).     {         Version version = VersionUtils.randomVersionBetween(random(), Version.V_6_0_0, Version.V_7_0_0.minimumCompatibilityVersion()).         assertFalse(module.getMapperRegistry().getMapperParsers().isEmpty()).         assertFalse(module.getMapperRegistry().getMetadataMapperParsers(version).isEmpty()).         Map<String, MetadataFieldMapper.TypeParser> metadataMapperParsers = module.getMapperRegistry().getMetadataMapperParsers(version).         assertEquals(EXPECTED_METADATA_FIELDS_6x.length, metadataMapperParsers.size()).         int i = 0.         for (String field : metadataMapperParsers.keySet()) {             assertEquals(EXPECTED_METADATA_FIELDS_6x[i++], field).         }     }     {         Version version = VersionUtils.randomVersionBetween(random(), Version.V_7_0_0, Version.CURRENT).         assertFalse(module.getMapperRegistry().getMapperParsers().isEmpty()).         assertFalse(module.getMapperRegistry().getMetadataMapperParsers(version).isEmpty()).         Map<String, MetadataFieldMapper.TypeParser> metadataMapperParsers = module.getMapperRegistry().getMetadataMapperParsers(version).         assertEquals(EXPECTED_METADATA_FIELDS.length, metadataMapperParsers.size()).         int i = 0.         for (String field : metadataMapperParsers.keySet()) {             assertEquals(EXPECTED_METADATA_FIELDS[i++], field).         }     } }
false;public;0;20;;public void testBuiltinWithPlugins() {     IndicesModule noPluginsModule = new IndicesModule(Collections.emptyList()).     IndicesModule module = new IndicesModule(fakePlugins).     MapperRegistry registry = module.getMapperRegistry().     Version version = VersionUtils.randomVersionBetween(random(), Version.V_6_0_0, Version.V_7_0_0.minimumCompatibilityVersion()).     assertThat(registry.getMapperParsers().size(), greaterThan(noPluginsModule.getMapperRegistry().getMapperParsers().size())).     assertThat(registry.getMetadataMapperParsers(version).size(), greaterThan(noPluginsModule.getMapperRegistry().getMetadataMapperParsers(version).size())).     Map<String, MetadataFieldMapper.TypeParser> metadataMapperParsers = module.getMapperRegistry().getMetadataMapperParsers(version).     Iterator<String> iterator = metadataMapperParsers.keySet().iterator().     if (version.before(Version.V_7_0_0)) {         assertEquals(AllFieldMapper.NAME, iterator.next()).     }     assertEquals(IgnoredFieldMapper.NAME, iterator.next()).     String last = null.     while (iterator.hasNext()) {         last = iterator.next().     }     assertEquals(FieldNamesFieldMapper.NAME, last). }
false;public;0;7;;public void testGetBuiltInMetaDataFields() {     Set<String> builtInMetaDataFields = IndicesModule.getBuiltInMetaDataFields().     int i = 0.     for (String field : builtInMetaDataFields) {         assertEquals(EXPECTED_METADATA_FIELDS[i++], field).     } }
false;public;0;4;;@Override public Map<String, Mapper.TypeParser> getMappers() {     return Collections.singletonMap(TextFieldMapper.CONTENT_TYPE, new FakeMapperParser()). }
false;public;0;11;;public void testDuplicateBuiltinMapper() {     List<MapperPlugin> plugins = Arrays.asList(new MapperPlugin() {          @Override         public Map<String, Mapper.TypeParser> getMappers() {             return Collections.singletonMap(TextFieldMapper.CONTENT_TYPE, new FakeMapperParser()).         }     }).     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new IndicesModule(plugins)).     assertThat(e.getMessage(), containsString("already registered")). }
false;public;0;4;;@Override public Map<String, Mapper.TypeParser> getMappers() {     return Collections.singletonMap("foo", new FakeMapperParser()). }
false;public;0;12;;public void testDuplicateOtherPluginMapper() {     MapperPlugin plugin = new MapperPlugin() {          @Override         public Map<String, Mapper.TypeParser> getMappers() {             return Collections.singletonMap("foo", new FakeMapperParser()).         }     }.     List<MapperPlugin> plugins = Arrays.asList(plugin, plugin).     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new IndicesModule(plugins)).     assertThat(e.getMessage(), containsString("already registered")). }
false;public;0;4;;@Override public Map<String, MetadataFieldMapper.TypeParser> getMetadataMappers() {     return Collections.singletonMap(IdFieldMapper.NAME, new FakeMetadataMapperParser()). }
false;public;0;11;;public void testDuplicateBuiltinMetadataMapper() {     List<MapperPlugin> plugins = Arrays.asList(new MapperPlugin() {          @Override         public Map<String, MetadataFieldMapper.TypeParser> getMetadataMappers() {             return Collections.singletonMap(IdFieldMapper.NAME, new FakeMetadataMapperParser()).         }     }).     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new IndicesModule(plugins)).     assertThat(e.getMessage(), containsString("already registered")). }
false;public;0;4;;@Override public Map<String, MetadataFieldMapper.TypeParser> getMetadataMappers() {     return Collections.singletonMap("foo", new FakeMetadataMapperParser()). }
false;public;0;12;;public void testDuplicateOtherPluginMetadataMapper() {     MapperPlugin plugin = new MapperPlugin() {          @Override         public Map<String, MetadataFieldMapper.TypeParser> getMetadataMappers() {             return Collections.singletonMap("foo", new FakeMetadataMapperParser()).         }     }.     List<MapperPlugin> plugins = Arrays.asList(plugin, plugin).     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new IndicesModule(plugins)).     assertThat(e.getMessage(), containsString("already registered")). }
false;public;0;4;;@Override public Map<String, MetadataFieldMapper.TypeParser> getMetadataMappers() {     return Collections.singletonMap(FieldNamesFieldMapper.NAME, new FakeMetadataMapperParser()). }
false;public;0;11;;public void testDuplicateFieldNamesMapper() {     List<MapperPlugin> plugins = Arrays.asList(new MapperPlugin() {          @Override         public Map<String, MetadataFieldMapper.TypeParser> getMetadataMappers() {             return Collections.singletonMap(FieldNamesFieldMapper.NAME, new FakeMetadataMapperParser()).         }     }).     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new IndicesModule(plugins)).     assertThat(e.getMessage(), containsString("cannot contain metadata mapper [_field_names]")). }
false;public;0;6;;public void testFieldNamesIsLast() {     IndicesModule module = new IndicesModule(Collections.emptyList()).     Version version = VersionUtils.randomCompatibleVersion(random(), Version.CURRENT).     List<String> fieldNames = new ArrayList<>(module.getMapperRegistry().getMetadataMapperParsers(version).keySet()).     assertEquals(FieldNamesFieldMapper.NAME, fieldNames.get(fieldNames.size() - 1)). }
false;public;0;6;;public void testFieldNamesIsLastWithPlugins() {     IndicesModule module = new IndicesModule(fakePlugins).     Version version = VersionUtils.randomCompatibleVersion(random(), Version.CURRENT).     List<String> fieldNames = new ArrayList<>(module.getMapperRegistry().getMetadataMapperParsers(version).keySet()).     assertEquals(FieldNamesFieldMapper.NAME, fieldNames.get(fieldNames.size() - 1)). }
false;public;0;4;;@Override public Function<String, Predicate<String>> getFieldFilter() {     return MapperPlugin.NOOP_FIELD_FILTER. }
false;public;0;4;;@Override public Function<String, Predicate<String>> getFieldFilter() {     return index -> index.equals("hidden_index") ? field -> false : MapperPlugin.NOOP_FIELD_PREDICATE. }
false;public;0;4;;@Override public Function<String, Predicate<String>> getFieldFilter() {     return index -> field -> field.equals("hidden_field") == false. }
false;public;0;4;;@Override public Function<String, Predicate<String>> getFieldFilter() {     return index -> index.equals("filtered") ? field -> field.equals("visible") : MapperPlugin.NOOP_FIELD_PREDICATE. }
false;public;0;43;;public void testGetFieldFilter() {     List<MapperPlugin> mapperPlugins = Arrays.asList(new MapperPlugin() {          @Override         public Function<String, Predicate<String>> getFieldFilter() {             return MapperPlugin.NOOP_FIELD_FILTER.         }     }, new MapperPlugin() {          @Override         public Function<String, Predicate<String>> getFieldFilter() {             return index -> index.equals("hidden_index") ? field -> false : MapperPlugin.NOOP_FIELD_PREDICATE.         }     }, new MapperPlugin() {          @Override         public Function<String, Predicate<String>> getFieldFilter() {             return index -> field -> field.equals("hidden_field") == false.         }     }, new MapperPlugin() {          @Override         public Function<String, Predicate<String>> getFieldFilter() {             return index -> index.equals("filtered") ? field -> field.equals("visible") : MapperPlugin.NOOP_FIELD_PREDICATE.         }     }).     IndicesModule indicesModule = new IndicesModule(mapperPlugins).     MapperRegistry mapperRegistry = indicesModule.getMapperRegistry().     Function<String, Predicate<String>> fieldFilter = mapperRegistry.getFieldFilter().     assertNotSame(MapperPlugin.NOOP_FIELD_FILTER, fieldFilter).     assertFalse(fieldFilter.apply("hidden_index").test(randomAlphaOfLengthBetween(3, 5))).     assertTrue(fieldFilter.apply(randomAlphaOfLengthBetween(3, 5)).test(randomAlphaOfLengthBetween(3, 5))).     assertFalse(fieldFilter.apply(randomAlphaOfLengthBetween(3, 5)).test("hidden_field")).     assertFalse(fieldFilter.apply("filtered").test(randomAlphaOfLengthBetween(3, 5))).     assertFalse(fieldFilter.apply("filtered").test("hidden_field")).     assertTrue(fieldFilter.apply("filtered").test("visible")).     assertFalse(fieldFilter.apply("hidden_index").test("visible")).     assertTrue(fieldFilter.apply(randomAlphaOfLengthBetween(3, 5)).test("visible")).     assertFalse(fieldFilter.apply("hidden_index").test("hidden_field")). }
false;public;0;10;;public void testDefaultFieldFilterIsNoOp() {     int numPlugins = randomIntBetween(0, 10).     List<MapperPlugin> mapperPlugins = new ArrayList<>(numPlugins).     for (int i = 0. i < numPlugins. i++) {         mapperPlugins.add(new MapperPlugin() {         }).     }     IndicesModule indicesModule = new IndicesModule(mapperPlugins).     Function<String, Predicate<String>> fieldFilter = indicesModule.getMapperRegistry().getFieldFilter().     assertSame(MapperPlugin.NOOP_FIELD_FILTER, fieldFilter). }
false;public;0;4;;@Override public Function<String, Predicate<String>> getFieldFilter() {     return MapperPlugin.NOOP_FIELD_FILTER. }
false;public;0;4;;@Override public Function<String, Predicate<String>> getFieldFilter() {     return index -> index.equals("hidden_index") ? field -> false : MapperPlugin.NOOP_FIELD_PREDICATE. }
false;public;0;4;;@Override public Function<String, Predicate<String>> getFieldFilter() {     return index -> index.equals("filtered") ? field -> field.equals("visible") : MapperPlugin.NOOP_FIELD_PREDICATE. }
false;public;0;28;;public void testNoOpFieldPredicate() {     List<MapperPlugin> mapperPlugins = Arrays.asList(new MapperPlugin() {          @Override         public Function<String, Predicate<String>> getFieldFilter() {             return MapperPlugin.NOOP_FIELD_FILTER.         }     }, new MapperPlugin() {          @Override         public Function<String, Predicate<String>> getFieldFilter() {             return index -> index.equals("hidden_index") ? field -> false : MapperPlugin.NOOP_FIELD_PREDICATE.         }     }, new MapperPlugin() {          @Override         public Function<String, Predicate<String>> getFieldFilter() {             return index -> index.equals("filtered") ? field -> field.equals("visible") : MapperPlugin.NOOP_FIELD_PREDICATE.         }     }).     IndicesModule indicesModule = new IndicesModule(mapperPlugins).     MapperRegistry mapperRegistry = indicesModule.getMapperRegistry().     Function<String, Predicate<String>> fieldFilter = mapperRegistry.getFieldFilter().     assertSame(MapperPlugin.NOOP_FIELD_PREDICATE, fieldFilter.apply(randomAlphaOfLengthBetween(3, 7))).     assertNotSame(MapperPlugin.NOOP_FIELD_PREDICATE, fieldFilter.apply("hidden_index")).     assertNotSame(MapperPlugin.NOOP_FIELD_PREDICATE, fieldFilter.apply("filtered")). }
