commented;modifiers;parameterAmount;loc;comment;code
false;public,static;2;23;;public static SearchSortValues createTestItem(XContentType xContentType, boolean transportSerialization) {     int size = randomIntBetween(1, 20).     Object[] values = new Object[size].     if (transportSerialization) {         DocValueFormat[] sortValueFormats = new DocValueFormat[size].         for (int i = 0. i < size. i++) {             Object sortValue = randomSortValue(xContentType, transportSerialization).             values[i] = sortValue.             // make sure that for BytesRef, we provide a specific doc value format that overrides format(BytesRef)             sortValueFormats[i] = sortValue instanceof BytesRef ? DocValueFormat.RAW : randomDocValueFormat().         }         return new SearchSortValues(values, sortValueFormats).     } else {         // xcontent serialization doesn't write/parse the raw sort values, only the formatted ones         for (int i = 0. i < size. i++) {             Object sortValue = randomSortValue(xContentType, transportSerialization).             // make sure that BytesRef are not provided as formatted values             sortValue = sortValue instanceof BytesRef ? DocValueFormat.RAW.format((BytesRef) sortValue) : sortValue.             values[i] = sortValue.         }         return new SearchSortValues(values).     } }
false;private,static;2;5;;private static Object randomSortValue(XContentType xContentType, boolean transportSerialization) {     Object randomSortValue = LuceneTests.randomSortValue().     // to simplify things, we directly serialize what we expect we would parse back when testing xcontent serialization     return transportSerialization ? randomSortValue : RandomObjects.getExpectedParsedValue(xContentType, randomSortValue). }
false;private,static;0;3;;private static DocValueFormat randomDocValueFormat() {     return randomFrom(DocValueFormat.BOOLEAN, DocValueFormat.RAW, DocValueFormat.IP, DocValueFormat.BINARY, DocValueFormat.GEOHASH). }
false;protected;1;11;;@Override protected SearchSortValues doParseInstance(XContentParser parser) throws IOException {     // skip to the elements start array token, fromXContent advances from there if called     parser.nextToken().     parser.nextToken().     parser.nextToken().     SearchSortValues searchSortValues = SearchSortValues.fromXContent(parser).     parser.nextToken().     assertEquals(XContentParser.Token.END_OBJECT, parser.currentToken()).     assertNull(parser.nextToken()).     return searchSortValues. }
false;protected;1;4;;@Override protected SearchSortValues createXContextTestInstance(XContentType xContentType) {     return createTestItem(xContentType, false). }
false;protected;0;4;;@Override protected SearchSortValues createTestInstance() {     return createTestItem(randomFrom(XContentType.values()), randomBoolean()). }
false;protected;0;4;;@Override protected Writeable.Reader<SearchSortValues> instanceReader() {     return SearchSortValues::new. }
false;protected;0;4;;@Override protected String[] getShuffleFieldsExceptions() {     return new String[] { "sort" }. }
false;public;0;18;;public void testToXContent() throws IOException {     {         SearchSortValues sortValues = new SearchSortValues(new Object[] { 1, "foo", 3.0 }).         XContentBuilder builder = JsonXContent.contentBuilder().         builder.startObject().         sortValues.toXContent(builder, ToXContent.EMPTY_PARAMS).         builder.endObject().         assertEquals("{\"sort\":[1,\"foo\",3.0]}", Strings.toString(builder)).     }     {         SearchSortValues sortValues = new SearchSortValues(new Object[0]).         XContentBuilder builder = JsonXContent.contentBuilder().         builder.startObject().         sortValues.toXContent(builder, ToXContent.EMPTY_PARAMS).         builder.endObject().         assertEquals("{}", Strings.toString(builder)).     } }
false;protected;1;10;;@Override protected SearchSortValues mutateInstance(SearchSortValues instance) {     Object[] sortValues = instance.getFormattedSortValues().     if (randomBoolean()) {         return new SearchSortValues(new Object[0]).     }     Object[] values = Arrays.copyOf(sortValues, sortValues.length + 1).     values[sortValues.length] = randomSortValue(randomFrom(XContentType.values()), randomBoolean()).     return new SearchSortValues(values). }
false;public;0;7;;public void testSerializationPre6_6_0() throws IOException {     Version version = VersionUtils.randomVersionBetween(random(), Version.V_6_0_0, VersionUtils.getPreviousVersion(Version.V_6_6_0)).     SearchSortValues original = createTestInstance().     SearchSortValues deserialized = copyInstance(original, version).     assertArrayEquals(original.getFormattedSortValues(), deserialized.getFormattedSortValues()).     assertEquals(0, deserialized.getRawSortValues().length). }
false;public;0;9;;public void testReadFromPre6_6_0() throws IOException {     try (StreamInput in = StreamInput.wrap(Base64.getDecoder().decode("AwIAAAABAQEyBUAIAAAAAAAAAAAAAAAA"))) {         in.setVersion(VersionUtils.randomVersionBetween(random(), Version.V_6_0_0, VersionUtils.getPreviousVersion(Version.V_6_6_0))).         SearchSortValues deserialized = new SearchSortValues(in).         SearchSortValues expected = new SearchSortValues(new Object[] { 1, "2", 3d }).         assertEquals(expected, deserialized).         assertEquals(0, deserialized.getRawSortValues().length).     } }
