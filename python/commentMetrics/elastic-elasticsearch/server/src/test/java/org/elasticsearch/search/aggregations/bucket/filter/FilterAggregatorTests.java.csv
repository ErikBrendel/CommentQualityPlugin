commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Before public void setUpTest() throws Exception {     super.setUp().     fieldType = new KeywordFieldMapper.KeywordFieldType().     fieldType.setHasDocValues(true).     fieldType.setIndexOptions(IndexOptions.DOCS).     fieldType.setName("field"). }
false;public;0;15;;public void testEmpty() throws Exception {     Directory directory = newDirectory().     RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory).     indexWriter.close().     IndexReader indexReader = DirectoryReader.open(directory).     IndexSearcher indexSearcher = newSearcher(indexReader, true, true).     QueryBuilder filter = QueryBuilders.termQuery("field", randomAlphaOfLength(5)).     FilterAggregationBuilder builder = new FilterAggregationBuilder("test", filter).     InternalFilter response = search(indexSearcher, new MatchAllDocsQuery(), builder, fieldType).     assertEquals(response.getDocCount(), 0).     assertFalse(AggregationInspectionHelper.hasValue(response)).     indexReader.close().     directory.close(). }
false;public;0;49;;public void testRandom() throws Exception {     Directory directory = newDirectory().     RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory).     int numDocs = randomIntBetween(100, 200).     int maxTerm = randomIntBetween(10, 50).     int[] expectedBucketCount = new int[maxTerm].     Document document = new Document().     for (int i = 0. i < numDocs. i++) {         if (frequently()) {             // make sure we have more than one segment to test the merge             indexWriter.getReader().close().         }         int value = randomInt(maxTerm - 1).         expectedBucketCount[value] += 1.         document.add(new Field("field", Integer.toString(value), fieldType)).         indexWriter.addDocument(document).         document.clear().     }     indexWriter.close().     IndexReader indexReader = DirectoryReader.open(directory).     IndexSearcher indexSearcher = newSearcher(indexReader, true, true).     try {         int value = randomInt(maxTerm - 1).         QueryBuilder filter = QueryBuilders.termQuery("field", Integer.toString(value)).         FilterAggregationBuilder builder = new FilterAggregationBuilder("test", filter).         for (boolean doReduce : new boolean[] { true, false }) {             final InternalFilter response.             if (doReduce) {                 response = searchAndReduce(indexSearcher, new MatchAllDocsQuery(), builder, fieldType).             } else {                 response = search(indexSearcher, new MatchAllDocsQuery(), builder, fieldType).             }             assertEquals(response.getDocCount(), (long) expectedBucketCount[value]).             if (expectedBucketCount[value] > 0) {                 assertTrue(AggregationInspectionHelper.hasValue(response)).             } else {                 assertFalse(AggregationInspectionHelper.hasValue(response)).             }         }     } finally {         indexReader.close().         directory.close().     } }
