commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     return Collections.singleton(ScriptedBlockPlugin.class). }
false;protected;1;9;;@Override protected Settings nodeSettings(int nodeOrdinal) {     boolean lowLevelCancellation = randomBoolean().     logger.info("Using lowLevelCancellation: {}", lowLevelCancellation).     return Settings.builder().put(super.nodeSettings(nodeOrdinal)).put(SearchService.LOW_LEVEL_CANCELLATION_SETTING.getKey(), lowLevelCancellation).build(). }
false;private;0;10;;private void indexTestData() {     for (int i = 0. i < 5. i++) {         // Make sure we have a few segments         BulkRequestBuilder bulkRequestBuilder = client().prepareBulk().setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE).         for (int j = 0. j < 20. j++) {             bulkRequestBuilder.add(client().prepareIndex("test", "type", Integer.toString(i * 5 + j)).setSource("field", "value")).         }         assertNoFailures(bulkRequestBuilder.get()).     } }
false;private;0;11;;private List<ScriptedBlockPlugin> initBlockFactory() {     List<ScriptedBlockPlugin> plugins = new ArrayList<>().     for (PluginsService pluginsService : internalCluster().getDataNodeInstances(PluginsService.class)) {         plugins.addAll(pluginsService.filterPlugins(ScriptedBlockPlugin.class)).     }     for (ScriptedBlockPlugin plugin : plugins) {         plugin.reset().         plugin.enableBlock().     }     return plugins. }
false;private;1;11;;private void awaitForBlock(List<ScriptedBlockPlugin> plugins) throws Exception {     int numberOfShards = getNumShards("test").numPrimaries.     assertBusy(() -> {         int numberOfBlockedPlugins = 0.         for (ScriptedBlockPlugin plugin : plugins) {             numberOfBlockedPlugins += plugin.hits.get().         }         logger.info("The plugin blocked on {} out of {} shards", numberOfBlockedPlugins, numberOfShards).         assertThat(numberOfBlockedPlugins, greaterThan(0)).     }). }
false;private;1;5;;private void disableBlocks(List<ScriptedBlockPlugin> plugins) throws Exception {     for (ScriptedBlockPlugin plugin : plugins) {         plugin.disableBlock().     } }
false;private;1;10;;private void cancelSearch(String action) {     ListTasksResponse listTasksResponse = client().admin().cluster().prepareListTasks().setActions(action).get().     assertThat(listTasksResponse.getTasks(), hasSize(1)).     TaskInfo searchTask = listTasksResponse.getTasks().get(0).     logger.info("Cancelling search").     CancelTasksResponse cancelTasksResponse = client().admin().cluster().prepareCancelTasks().setTaskId(searchTask.getTaskId()).get().     assertThat(cancelTasksResponse.getTasks(), hasSize(1)).     assertThat(cancelTasksResponse.getTasks().get(0).getTaskId(), equalTo(searchTask.getTaskId())). }
false;private;1;11;;private SearchResponse ensureSearchWasCancelled(ActionFuture<SearchResponse> searchResponse) {     try {         SearchResponse response = searchResponse.actionGet().         logger.info("Search response {}", response).         assertNotEquals("At least one shard should have failed", 0, response.getFailedShards()).         return response.     } catch (SearchPhaseExecutionException ex) {         logger.info("All shards failed with", ex).         return null.     } }
false;public;0;17;;public void testCancellationDuringQueryPhase() throws Exception {     List<ScriptedBlockPlugin> plugins = initBlockFactory().     indexTestData().     logger.info("Executing search").     ActionFuture<SearchResponse> searchResponse = client().prepareSearch("test").setQuery(scriptQuery(new Script(ScriptType.INLINE, "mockscript", SCRIPT_NAME, Collections.emptyMap()))).execute().     awaitForBlock(plugins).     cancelSearch(SearchAction.NAME).     disableBlocks(plugins).     logger.info("Segments {}", Strings.toString(client().admin().indices().prepareSegments("test").get())).     ensureSearchWasCancelled(searchResponse). }
false;public;0;17;;public void testCancellationDuringFetchPhase() throws Exception {     List<ScriptedBlockPlugin> plugins = initBlockFactory().     indexTestData().     logger.info("Executing search").     ActionFuture<SearchResponse> searchResponse = client().prepareSearch("test").addScriptField("test_field", new Script(ScriptType.INLINE, "mockscript", SCRIPT_NAME, Collections.emptyMap())).execute().     awaitForBlock(plugins).     cancelSearch(SearchAction.NAME).     disableBlocks(plugins).     logger.info("Segments {}", Strings.toString(client().admin().indices().prepareSegments("test").get())).     ensureSearchWasCancelled(searchResponse). }
false;public;0;24;;public void testCancellationOfScrollSearches() throws Exception {     List<ScriptedBlockPlugin> plugins = initBlockFactory().     indexTestData().     logger.info("Executing search").     ActionFuture<SearchResponse> searchResponse = client().prepareSearch("test").setScroll(TimeValue.timeValueSeconds(10)).setSize(5).setQuery(scriptQuery(new Script(ScriptType.INLINE, "mockscript", SCRIPT_NAME, Collections.emptyMap()))).execute().     awaitForBlock(plugins).     cancelSearch(SearchAction.NAME).     disableBlocks(plugins).     SearchResponse response = ensureSearchWasCancelled(searchResponse).     if (response != null) {         // The response might not have failed on all shards - we need to clean scroll         logger.info("Cleaning scroll with id {}", response.getScrollId()).         client().prepareClearScroll().addScrollId(response.getScrollId()).get().     } }
false;public;0;43;;public void testCancellationOfScrollSearchesOnFollowupRequests() throws Exception {     List<ScriptedBlockPlugin> plugins = initBlockFactory().     indexTestData().     // Disable block so the first request would pass     disableBlocks(plugins).     logger.info("Executing search").     TimeValue keepAlive = TimeValue.timeValueSeconds(5).     SearchResponse searchResponse = client().prepareSearch("test").setScroll(keepAlive).setSize(2).setQuery(scriptQuery(new Script(ScriptType.INLINE, "mockscript", SCRIPT_NAME, Collections.emptyMap()))).get().     assertNotNull(searchResponse.getScrollId()).     // Enable block so the second request would block     for (ScriptedBlockPlugin plugin : plugins) {         plugin.reset().         plugin.enableBlock().     }     String scrollId = searchResponse.getScrollId().     logger.info("Executing scroll with id {}", scrollId).     ActionFuture<SearchResponse> scrollResponse = client().prepareSearchScroll(searchResponse.getScrollId()).setScroll(keepAlive).execute().     awaitForBlock(plugins).     cancelSearch(SearchScrollAction.NAME).     disableBlocks(plugins).     SearchResponse response = ensureSearchWasCancelled(scrollResponse).     if (response != null) {         // The response didn't fail completely - update scroll id         scrollId = response.getScrollId().     }     logger.info("Cleaning scroll with id {}", scrollId).     client().prepareClearScroll().addScrollId(scrollId).get(). }
false;public;0;3;;public void reset() {     hits.set(0). }
false;public;0;3;;public void disableBlock() {     shouldBlock.set(false). }
false;public;0;3;;public void enableBlock() {     shouldBlock.set(true). }
false;public;0;14;;@Override public Map<String, Function<Map<String, Object>, Object>> pluginScripts() {     return Collections.singletonMap(SCRIPT_NAME, params -> {         LeafFieldsLookup fieldsLookup = (LeafFieldsLookup) params.get("_fields").         LogManager.getLogger(SearchCancellationIT.class).info("Blocking on the document {}", fieldsLookup.get("_id")).         hits.incrementAndGet().         try {             awaitBusy(() -> shouldBlock.get() == false).         } catch (Exception e) {             throw new RuntimeException(e).         }         return true.     }). }
