commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;public void testDefault() throws IOException {     ESTestCase.TestAnalysis analysis = AnalysisTestsHelper.createTestAnalysisFromClassPath(createTempDir(), RESOURCE).     TokenFilterFactory tokenFilter = analysis.tokenFilter.get("shingle").     String source = "the quick brown fox".     String[] expected = new String[] { "the", "the quick", "quick", "quick brown", "brown", "brown fox", "fox" }.     Tokenizer tokenizer = new WhitespaceTokenizer().     tokenizer.setReader(new StringReader(source)).     assertTokenStreamContents(tokenFilter.create(tokenizer), expected). }
false;public;0;10;;public void testInverseMapping() throws IOException {     ESTestCase.TestAnalysis analysis = AnalysisTestsHelper.createTestAnalysisFromClassPath(createTempDir(), RESOURCE).     TokenFilterFactory tokenFilter = analysis.tokenFilter.get("shingle_inverse").     assertThat(tokenFilter, instanceOf(ShingleTokenFilterFactory.class)).     String source = "the quick brown fox".     String[] expected = new String[] { "the_quick_brown", "quick_brown_fox" }.     Tokenizer tokenizer = new WhitespaceTokenizer().     tokenizer.setReader(new StringReader(source)).     assertTokenStreamContents(tokenFilter.create(tokenizer), expected). }
false;public;0;10;;public void testInverseMappingNoShingles() throws IOException {     ESTestCase.TestAnalysis analysis = AnalysisTestsHelper.createTestAnalysisFromClassPath(createTempDir(), RESOURCE).     TokenFilterFactory tokenFilter = analysis.tokenFilter.get("shingle_inverse").     assertThat(tokenFilter, instanceOf(ShingleTokenFilterFactory.class)).     String source = "the quick".     String[] expected = new String[] { "the", "quick" }.     Tokenizer tokenizer = new WhitespaceTokenizer().     tokenizer.setReader(new StringReader(source)).     assertTokenStreamContents(tokenFilter.create(tokenizer), expected). }
false;public;0;10;;public void testFillerToken() throws IOException {     ESTestCase.TestAnalysis analysis = AnalysisTestsHelper.createTestAnalysisFromClassPath(createTempDir(), RESOURCE).     TokenFilterFactory tokenFilter = analysis.tokenFilter.get("shingle_filler").     String source = "simon the sorcerer".     String[] expected = new String[] { "simon FILLER", "simon FILLER sorcerer", "FILLER sorcerer" }.     Tokenizer tokenizer = new WhitespaceTokenizer().     tokenizer.setReader(new StringReader(source)).     TokenStream stream = new StopFilter(tokenizer, StopFilter.makeStopSet("the")).     assertTokenStreamContents(tokenFilter.create(stream), expected). }
false;public;0;20;;public void testDisableGraph() throws IOException {     ESTestCase.TestAnalysis analysis = AnalysisTestsHelper.createTestAnalysisFromClassPath(createTempDir(), RESOURCE).     TokenFilterFactory shingleFiller = analysis.tokenFilter.get("shingle_filler").     TokenFilterFactory shingleInverse = analysis.tokenFilter.get("shingle_inverse").     String source = "hello world".     Tokenizer tokenizer = new WhitespaceTokenizer().     tokenizer.setReader(new StringReader(source)).     try (TokenStream stream = shingleFiller.create(tokenizer)) {         // This config uses different size of shingles so graph analysis is disabled         assertTrue(stream.hasAttribute(DisableGraphAttribute.class)).     }     tokenizer = new WhitespaceTokenizer().     tokenizer.setReader(new StringReader(source)).     try (TokenStream stream = shingleInverse.create(tokenizer)) {         // This config uses a single size of shingles so graph analysis is enabled         assertFalse(stream.hasAttribute(DisableGraphAttribute.class)).     } }
true;public;0;16;/*`     * test that throws an error when trying to get a ShingleTokenFilter where difference between max_shingle_size and min_shingle_size     * is greater than the allowed value of max_shingle_diff      */ ;/*`     * test that throws an error when trying to get a ShingleTokenFilter where difference between max_shingle_size and min_shingle_size     * is greater than the allowed value of max_shingle_diff      */ public void testMaxShingleDiffException() throws Exception {     String RESOURCE2 = "/org/elasticsearch/index/analysis/shingle_analysis2.json".     int maxAllowedShingleDiff = 3.     int shingleDiff = 8.     try {         ESTestCase.TestAnalysis analysis = AnalysisTestsHelper.createTestAnalysisFromClassPath(createTempDir(), RESOURCE2).         analysis.tokenFilter.get("shingle").         fail().     } catch (IllegalArgumentException ex) {         assertEquals("In Shingle TokenFilter the difference between max_shingle_size and min_shingle_size (and +1 if outputting unigrams)" + " must be less than or equal to: [" + maxAllowedShingleDiff + "] but was [" + shingleDiff + "]. This limit" + " can be set by changing the [" + IndexSettings.MAX_SHINGLE_DIFF_SETTING.getKey() + "] index level setting.", ex.getMessage()).     } }
