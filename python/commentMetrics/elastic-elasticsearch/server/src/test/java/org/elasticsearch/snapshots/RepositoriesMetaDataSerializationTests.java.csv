commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;10;;@Override protected Custom createTestInstance() {     int numberOfRepositories = randomInt(10).     List<RepositoryMetaData> entries = new ArrayList<>().     for (int i = 0. i < numberOfRepositories. i++) {         entries.add(new RepositoryMetaData(randomAlphaOfLength(10), randomAlphaOfLength(10), randomSettings())).     }     entries.sort(Comparator.comparing(RepositoryMetaData::name)).     return new RepositoriesMetaData(entries). }
false;protected;0;4;;@Override protected Writeable.Reader<Custom> instanceReader() {     return RepositoriesMetaData::new. }
false;protected;1;11;;@Override protected Custom mutateInstance(Custom instance) {     List<RepositoryMetaData> entries = new ArrayList<>(((RepositoriesMetaData) instance).repositories()).     boolean addEntry = entries.isEmpty() ? true : randomBoolean().     if (addEntry) {         entries.add(new RepositoryMetaData(randomAlphaOfLength(10), randomAlphaOfLength(10), randomSettings())).     } else {         entries.remove(randomIntBetween(0, entries.size() - 1)).     }     return new RepositoriesMetaData(entries). }
false;public;0;12;;public Settings randomSettings() {     if (randomBoolean()) {         return Settings.EMPTY.     } else {         int numberOfSettings = randomInt(10).         Settings.Builder builder = Settings.builder().         for (int i = 0. i < numberOfSettings. i++) {             builder.put(randomAlphaOfLength(10), randomAlphaOfLength(20)).         }         return builder.build().     } }
false;protected;1;18;;@Override protected Custom makeTestChanges(Custom testInstance) {     RepositoriesMetaData repositoriesMetaData = (RepositoriesMetaData) testInstance.     List<RepositoryMetaData> repos = new ArrayList<>(repositoriesMetaData.repositories()).     if (randomBoolean() && repos.size() > 1) {         // remove some elements         int leaveElements = randomIntBetween(0, repositoriesMetaData.repositories().size() - 1).         repos = randomSubsetOf(leaveElements, repos.toArray(new RepositoryMetaData[leaveElements])).     }     if (randomBoolean()) {         // add some elements         int addElements = randomInt(10).         for (int i = 0. i < addElements. i++) {             repos.add(new RepositoryMetaData(randomAlphaOfLength(10), randomAlphaOfLength(10), randomSettings())).         }     }     return new RepositoriesMetaData(repos). }
false;protected;0;4;;@Override protected Writeable.Reader<Diff<Custom>> diffReader() {     return RepositoriesMetaData::readDiffFrom. }
false;protected;0;4;;@Override protected NamedWriteableRegistry getNamedWriteableRegistry() {     return new NamedWriteableRegistry(ClusterModule.getNamedWriteables()). }
false;protected;1;9;;@Override protected Custom doParseInstance(XContentParser parser) throws IOException {     assertEquals(XContentParser.Token.START_OBJECT, parser.nextToken()).     RepositoriesMetaData repositoriesMetaData = RepositoriesMetaData.fromXContent(parser).     assertEquals(XContentParser.Token.END_OBJECT, parser.currentToken()).     List<RepositoryMetaData> repos = new ArrayList<>(repositoriesMetaData.repositories()).     repos.sort(Comparator.comparing(RepositoryMetaData::name)).     return new RepositoriesMetaData(repos). }
