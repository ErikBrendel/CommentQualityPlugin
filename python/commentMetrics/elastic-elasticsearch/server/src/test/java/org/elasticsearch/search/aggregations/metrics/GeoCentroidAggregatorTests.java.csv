commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;public void testEmpty() throws Exception {     try (Directory dir = newDirectory().         RandomIndexWriter w = new RandomIndexWriter(random(), dir)) {         GeoCentroidAggregationBuilder aggBuilder = new GeoCentroidAggregationBuilder("my_agg").field("field").         MappedFieldType fieldType = new GeoPointFieldMapper.GeoPointFieldType().         fieldType.setHasDocValues(true).         fieldType.setName("field").         try (IndexReader reader = w.getReader()) {             IndexSearcher searcher = new IndexSearcher(reader).             InternalGeoCentroid result = search(searcher, new MatchAllDocsQuery(), aggBuilder, fieldType).             assertNull(result.centroid()).             assertFalse(AggregationInspectionHelper.hasValue(result)).         }     } }
false;public;0;27;;public void testUnmapped() throws Exception {     try (Directory dir = newDirectory().         RandomIndexWriter w = new RandomIndexWriter(random(), dir)) {         GeoCentroidAggregationBuilder aggBuilder = new GeoCentroidAggregationBuilder("my_agg").field("another_field").         Document document = new Document().         document.add(new LatLonDocValuesField("field", 10, 10)).         w.addDocument(document).         try (IndexReader reader = w.getReader()) {             IndexSearcher searcher = new IndexSearcher(reader).             MappedFieldType fieldType = new GeoPointFieldMapper.GeoPointFieldType().             fieldType.setHasDocValues(true).             fieldType.setName("another_field").             InternalGeoCentroid result = search(searcher, new MatchAllDocsQuery(), aggBuilder, fieldType).             assertNull(result.centroid()).             fieldType = new GeoPointFieldMapper.GeoPointFieldType().             fieldType.setHasDocValues(true).             fieldType.setName("field").             result = search(searcher, new MatchAllDocsQuery(), aggBuilder, fieldType).             assertNull(result.centroid()).             assertFalse(AggregationInspectionHelper.hasValue(result)).         }     } }
false;public;0;22;;public void testSingleValuedField() throws Exception {     int numDocs = scaledRandomIntBetween(64, 256).     int numUniqueGeoPoints = randomIntBetween(1, numDocs).     try (Directory dir = newDirectory().         RandomIndexWriter w = new RandomIndexWriter(random(), dir)) {         GeoPoint expectedCentroid = new GeoPoint(0, 0).         GeoPoint[] singleValues = new GeoPoint[numUniqueGeoPoints].         for (int i = 0. i < singleValues.length. i++) {             singleValues[i] = RandomGeoGenerator.randomPoint(random()).         }         GeoPoint singleVal.         for (int i = 0. i < numDocs. i++) {             singleVal = singleValues[i % numUniqueGeoPoints].             Document document = new Document().             document.add(new LatLonDocValuesField("field", singleVal.getLat(), singleVal.getLon())).             w.addDocument(document).             expectedCentroid = expectedCentroid.reset(expectedCentroid.lat() + (singleVal.lat() - expectedCentroid.lat()) / (i + 1), expectedCentroid.lon() + (singleVal.lon() - expectedCentroid.lon()) / (i + 1)).         }         assertCentroid(w, expectedCentroid).     } }
false;public;0;27;;public void testMultiValuedField() throws Exception {     int numDocs = scaledRandomIntBetween(64, 256).     int numUniqueGeoPoints = randomIntBetween(1, numDocs).     try (Directory dir = newDirectory().         RandomIndexWriter w = new RandomIndexWriter(random(), dir)) {         GeoPoint expectedCentroid = new GeoPoint(0, 0).         GeoPoint[] multiValues = new GeoPoint[numUniqueGeoPoints].         for (int i = 0. i < multiValues.length. i++) {             multiValues[i] = RandomGeoGenerator.randomPoint(random()).         }         final GeoPoint[] multiVal = new GeoPoint[2].         for (int i = 0. i < numDocs. i++) {             multiVal[0] = multiValues[i % numUniqueGeoPoints].             multiVal[1] = multiValues[(i + 1) % numUniqueGeoPoints].             Document document = new Document().             document.add(new LatLonDocValuesField("field", multiVal[0].getLat(), multiVal[0].getLon())).             document.add(new LatLonDocValuesField("field", multiVal[1].getLat(), multiVal[1].getLon())).             w.addDocument(document).             double newMVLat = (multiVal[0].lat() + multiVal[1].lat()) / 2d.             double newMVLon = (multiVal[0].lon() + multiVal[1].lon()) / 2d.             expectedCentroid = expectedCentroid.reset(expectedCentroid.lat() + (newMVLat - expectedCentroid.lat()) / (i + 1), expectedCentroid.lon() + (newMVLon - expectedCentroid.lon()) / (i + 1)).         }         assertCentroid(w, expectedCentroid).     } }
false;private;2;18;;private void assertCentroid(RandomIndexWriter w, GeoPoint expectedCentroid) throws IOException {     MappedFieldType fieldType = new GeoPointFieldMapper.GeoPointFieldType().     fieldType.setHasDocValues(true).     fieldType.setName("field").     GeoCentroidAggregationBuilder aggBuilder = new GeoCentroidAggregationBuilder("my_agg").field("field").     try (IndexReader reader = w.getReader()) {         IndexSearcher searcher = new IndexSearcher(reader).         InternalGeoCentroid result = search(searcher, new MatchAllDocsQuery(), aggBuilder, fieldType).         assertEquals("my_agg", result.getName()).         GeoPoint centroid = result.centroid().         assertNotNull(centroid).         assertEquals(expectedCentroid.getLat(), centroid.getLat(), GEOHASH_TOLERANCE).         assertEquals(expectedCentroid.getLon(), centroid.getLon(), GEOHASH_TOLERANCE).         assertTrue(AggregationInspectionHelper.hasValue(result)).     } }
