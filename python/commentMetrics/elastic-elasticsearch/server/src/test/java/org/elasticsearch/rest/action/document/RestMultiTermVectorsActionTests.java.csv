commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setUpAction() {     new RestMultiTermVectorsAction(Settings.EMPTY, controller()). }
false;public;0;9;;public void testTypeInPath() {     RestRequest request = new FakeRestRequest.Builder(xContentRegistry()).withMethod(Method.POST).withPath("/some_index/some_type/_mtermvectors").build().     dispatchRequest(request).     assertWarnings(RestMultiTermVectorsAction.TYPES_DEPRECATION_MESSAGE). }
false;public;0;13;;public void testTypeParameter() {     Map<String, String> params = new HashMap<>().     params.put("type", "some_type").     RestRequest request = new FakeRestRequest.Builder(xContentRegistry()).withMethod(Method.GET).withPath("/some_index/_mtermvectors").withParams(params).build().     dispatchRequest(request).     assertWarnings(RestMultiTermVectorsAction.TYPES_DEPRECATION_MESSAGE). }
false;public;0;19;;public void testTypeInBody() throws IOException {     XContentBuilder content = XContentFactory.jsonBuilder().startObject().startArray("docs").startObject().field("_type", "some_type").field("_id", 1).endObject().endArray().endObject().     RestRequest request = new FakeRestRequest.Builder(xContentRegistry()).withMethod(Method.GET).withPath("/some_index/_mtermvectors").withContent(BytesReference.bytes(content), XContentType.JSON).build().     dispatchRequest(request).     assertWarnings(RestTermVectorsAction.TYPES_DEPRECATION_MESSAGE). }
