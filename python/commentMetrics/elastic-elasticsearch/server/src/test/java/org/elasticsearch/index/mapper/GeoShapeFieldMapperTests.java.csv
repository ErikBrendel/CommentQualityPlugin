commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> getPlugins() {     return pluginList(InternalSettingsPlugin.class). }
false;public;0;16;;public void testDefaultConfiguration() throws IOException {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("location").field("type", "geo_shape").endObject().endObject().endObject().endObject()).     DocumentMapper defaultMapper = createIndex("test").mapperService().documentMapperParser().parse("type1", new CompressedXContent(mapping)).     Mapper fieldMapper = defaultMapper.mappers().getMapper("location").     assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class)).     GeoShapeFieldMapper geoShapeFieldMapper = (GeoShapeFieldMapper) fieldMapper.     assertThat(geoShapeFieldMapper.fieldType().orientation(), equalTo(GeoShapeFieldMapper.Defaults.ORIENTATION.value())). }
true;public;0;36;/**  * Test that orientation parameter correctly parses  */ ;/**  * Test that orientation parameter correctly parses  */ public void testOrientationParsing() throws IOException {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("location").field("type", "geo_shape").field("orientation", "left").endObject().endObject().endObject().endObject()).     DocumentMapper defaultMapper = createIndex("test").mapperService().documentMapperParser().parse("type1", new CompressedXContent(mapping)).     Mapper fieldMapper = defaultMapper.mappers().getMapper("location").     assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class)).     ShapeBuilder.Orientation orientation = ((GeoShapeFieldMapper) fieldMapper).fieldType().orientation().     assertThat(orientation, equalTo(ShapeBuilder.Orientation.CLOCKWISE)).     assertThat(orientation, equalTo(ShapeBuilder.Orientation.LEFT)).     assertThat(orientation, equalTo(ShapeBuilder.Orientation.CW)).     // explicit right orientation test     mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("location").field("type", "geo_shape").field("orientation", "right").endObject().endObject().endObject().endObject()).     defaultMapper = createIndex("test2").mapperService().documentMapperParser().parse("type1", new CompressedXContent(mapping)).     fieldMapper = defaultMapper.mappers().getMapper("location").     assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class)).     orientation = ((GeoShapeFieldMapper) fieldMapper).fieldType().orientation().     assertThat(orientation, equalTo(ShapeBuilder.Orientation.COUNTER_CLOCKWISE)).     assertThat(orientation, equalTo(ShapeBuilder.Orientation.RIGHT)).     assertThat(orientation, equalTo(ShapeBuilder.Orientation.CCW)). }
true;public;0;33;/**  * Test that coerce parameter correctly parses  */ ;/**  * Test that coerce parameter correctly parses  */ public void testCoerceParsing() throws IOException {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("location").field("type", "geo_shape").field("coerce", "true").endObject().endObject().endObject().endObject()).     DocumentMapper defaultMapper = createIndex("test").mapperService().documentMapperParser().parse("type1", new CompressedXContent(mapping)).     Mapper fieldMapper = defaultMapper.mappers().getMapper("location").     assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class)).     boolean coerce = ((GeoShapeFieldMapper) fieldMapper).coerce().value().     assertThat(coerce, equalTo(true)).     // explicit false coerce test     mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("location").field("type", "geo_shape").field("coerce", "false").endObject().endObject().endObject().endObject()).     defaultMapper = createIndex("test2").mapperService().documentMapperParser().parse("type1", new CompressedXContent(mapping)).     fieldMapper = defaultMapper.mappers().getMapper("location").     assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class)).     coerce = ((GeoShapeFieldMapper) fieldMapper).coerce().value().     assertThat(coerce, equalTo(false)).     assertFieldWarnings("tree"). }
true;public;0;32;/**  * Test that accept_z_value parameter correctly parses  */ ;/**  * Test that accept_z_value parameter correctly parses  */ public void testIgnoreZValue() throws IOException {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("location").field("type", "geo_shape").field(IGNORE_Z_VALUE.getPreferredName(), "true").endObject().endObject().endObject().endObject()).     DocumentMapper defaultMapper = createIndex("test").mapperService().documentMapperParser().parse("type1", new CompressedXContent(mapping)).     Mapper fieldMapper = defaultMapper.mappers().getMapper("location").     assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class)).     boolean ignoreZValue = ((GeoShapeFieldMapper) fieldMapper).ignoreZValue().value().     assertThat(ignoreZValue, equalTo(true)).     // explicit false accept_z_value test     mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("location").field("type", "geo_shape").field(IGNORE_Z_VALUE.getPreferredName(), "false").endObject().endObject().endObject().endObject()).     defaultMapper = createIndex("test2").mapperService().documentMapperParser().parse("type1", new CompressedXContent(mapping)).     fieldMapper = defaultMapper.mappers().getMapper("location").     assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class)).     ignoreZValue = ((GeoShapeFieldMapper) fieldMapper).ignoreZValue().value().     assertThat(ignoreZValue, equalTo(false)). }
true;public;0;33;/**  * Test that ignore_malformed parameter correctly parses  */ ;/**  * Test that ignore_malformed parameter correctly parses  */ public void testIgnoreMalformedParsing() throws IOException {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("location").field("type", "geo_shape").field("ignore_malformed", "true").endObject().endObject().endObject().endObject()).     DocumentMapper defaultMapper = createIndex("test").mapperService().documentMapperParser().parse("type1", new CompressedXContent(mapping)).     Mapper fieldMapper = defaultMapper.mappers().getMapper("location").     assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class)).     Explicit<Boolean> ignoreMalformed = ((GeoShapeFieldMapper) fieldMapper).ignoreMalformed().     assertThat(ignoreMalformed.value(), equalTo(true)).     // explicit false ignore_malformed test     mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("location").field("type", "geo_shape").field("ignore_malformed", "false").endObject().endObject().endObject().endObject()).     defaultMapper = createIndex("test2").mapperService().documentMapperParser().parse("type1", new CompressedXContent(mapping)).     fieldMapper = defaultMapper.mappers().getMapper("location").     assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class)).     ignoreMalformed = ((GeoShapeFieldMapper) fieldMapper).ignoreMalformed().     assertThat(ignoreMalformed.explicit(), equalTo(true)).     assertThat(ignoreMalformed.value(), equalTo(false)). }
false;private;1;7;;private void assertFieldWarnings(String... fieldNames) {     String[] warnings = new String[fieldNames.length].     for (int i = 0. i < fieldNames.length. ++i) {         warnings[i] = "Field parameter [" + fieldNames[i] + "] " + "is deprecated and will be removed in a future version.".     } }
false;public;0;32;;public void testGeoShapeMapperMerge() throws Exception {     String stage1Mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("shape").field("type", "geo_shape").field("orientation", "ccw").endObject().endObject().endObject().endObject()).     MapperService mapperService = createIndex("test").mapperService().     DocumentMapper docMapper = mapperService.merge("type", new CompressedXContent(stage1Mapping), MapperService.MergeReason.MAPPING_UPDATE).     String stage2Mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("shape").field("type", "geo_shape").field("orientation", "cw").endObject().endObject().endObject().endObject()).     mapperService.merge("type", new CompressedXContent(stage2Mapping), MapperService.MergeReason.MAPPING_UPDATE).     // verify nothing changed     Mapper fieldMapper = docMapper.mappers().getMapper("shape").     assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class)).     GeoShapeFieldMapper geoShapeFieldMapper = (GeoShapeFieldMapper) fieldMapper.     assertThat(geoShapeFieldMapper.fieldType().orientation(), equalTo(ShapeBuilder.Orientation.CCW)).     // change mapping. orientation     stage2Mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("shape").field("type", "geo_shape").field("orientation", "cw").endObject().endObject().endObject().endObject()).     docMapper = mapperService.merge("type", new CompressedXContent(stage2Mapping), MapperService.MergeReason.MAPPING_UPDATE).     fieldMapper = docMapper.mappers().getMapper("shape").     assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class)).     geoShapeFieldMapper = (GeoShapeFieldMapper) fieldMapper.     assertThat(geoShapeFieldMapper.fieldType().orientation(), equalTo(ShapeBuilder.Orientation.CW)). }
false;public;0;14;;public void testEmptyName() throws Exception {     // after 5.x     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("").field("type", "geo_shape").endObject().endObject().endObject().endObject()).     DocumentMapperParser parser = createIndex("test").mapperService().documentMapperParser().     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> parser.parse("type1", new CompressedXContent(mapping))).     assertThat(e.getMessage(), containsString("name cannot be empty string")). }
false;public;0;13;;public void testSerializeDefaults() throws Exception {     DocumentMapperParser parser = createIndex("test").mapperService().documentMapperParser().     {         String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("location").field("type", "geo_shape").endObject().endObject().endObject().endObject()).         DocumentMapper defaultMapper = parser.parse("type1", new CompressedXContent(mapping)).         String serialized = toXContentString((GeoShapeFieldMapper) defaultMapper.mappers().getMapper("location")).         assertTrue(serialized, serialized.contains("\"orientation\":\"" + BaseGeoShapeFieldMapper.Defaults.ORIENTATION.value() + "\"")).     } }
false;public;2;11;;public String toXContentString(GeoShapeFieldMapper mapper, boolean includeDefaults) throws IOException {     XContentBuilder builder = XContentFactory.jsonBuilder().startObject().     ToXContent.Params params.     if (includeDefaults) {         params = new ToXContent.MapParams(Collections.singletonMap("include_defaults", "true")).     } else {         params = ToXContent.EMPTY_PARAMS.     }     mapper.doXContentBody(builder, includeDefaults, params).     return Strings.toString(builder.endObject()). }
false;public;1;3;;public String toXContentString(GeoShapeFieldMapper mapper) throws IOException {     return toXContentString(mapper, true). }
