commented;modifiers;parameterAmount;loc;comment;code
false;public;0;30;;public void testLongs() throws IOException {     long[][] values = new long[between(3, 10)][].     for (int d = 0. d < values.length. d++) {         values[d] = new long[randomBoolean() ? randomBoolean() ? 0 : 1 : between(2, 100)].         for (int i = 0. i < values[d].length. i++) {             values[d][i] = randomLong().         }     }     Longs longs = wrap(values).     for (int round = 0. round < 10. round++) {         int d = between(0, values.length - 1).         longs.setNextDocId(d).         if (values[d].length > 0) {             assertEquals(values[d][0], longs.getValue()).         } else {             Exception e = expectThrows(IllegalStateException.class, () -> longs.getValue()).             assertEquals("A document doesn't have a value for a field! " + "Use doc[<field>].size()==0 to check if a document is missing a field!", e.getMessage()).         }         assertEquals(values[d].length, longs.size()).         for (int i = 0. i < values[d].length. i++) {             assertEquals(values[d][i], longs.get(i).longValue()).         }         Exception e = expectThrows(UnsupportedOperationException.class, () -> longs.add(100L)).         assertEquals("doc values are unmodifiable", e.getMessage()).     } }
false;public;1;6;;@Override public boolean advanceExact(int doc) {     i = 0.     current = values[doc].     return current.length > 0. }
false;public;0;4;;@Override public int docValueCount() {     return current.length. }
false;public;0;4;;@Override public long nextValue() {     return current[i++]. }
false;private;1;21;;private Longs wrap(long[][] values) {     return new Longs(new AbstractSortedNumericDocValues() {          long[] current.          int i.          @Override         public boolean advanceExact(int doc) {             i = 0.             current = values[doc].             return current.length > 0.         }          @Override         public int docValueCount() {             return current.length.         }          @Override         public long nextValue() {             return current[i++].         }     }). }
