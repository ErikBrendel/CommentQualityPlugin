commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;@Override public Long getShardSize(ShardRouting shardRouting) {     if (shardRouting.getIndexName().equals("test") && shardRouting.shardId().getId() == 0) {         return byteSize.     }     return null. }
false;public;0;51;;public void testInitializingHasExpectedSize() {     final long byteSize = randomIntBetween(0, Integer.MAX_VALUE).     AllocationService strategy = createAllocationService(Settings.EMPTY, () -> new ClusterInfo() {          @Override         public Long getShardSize(ShardRouting shardRouting) {             if (shardRouting.getIndexName().equals("test") && shardRouting.shardId().getId() == 0) {                 return byteSize.             }             return null.         }     }).     logger.info("Building initial routing table").     MetaData metaData = MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT).put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 1))).build().     RoutingTable routingTable = RoutingTable.builder().addAsNew(metaData.index("test")).build().     ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(routingTable).build().     logger.info("Adding one node and performing rerouting").     clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode("node1"))).build().     clusterState = strategy.reroute(clusterState, "reroute").     assertEquals(1, clusterState.getRoutingNodes().node("node1").numberOfShardsWithState(ShardRoutingState.INITIALIZING)).     assertEquals(byteSize, clusterState.getRoutingTable().shardsWithState(ShardRoutingState.INITIALIZING).get(0).getExpectedShardSize()).     logger.info("Start the primary shard").     RoutingNodes routingNodes = clusterState.getRoutingNodes().     clusterState = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING)).     assertEquals(1, clusterState.getRoutingNodes().node("node1").numberOfShardsWithState(ShardRoutingState.STARTED)).     assertEquals(1, clusterState.getRoutingNodes().unassigned().size()).     logger.info("Add another one node and reroute").     clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode("node2"))).build().     clusterState = strategy.reroute(clusterState, "reroute").     assertEquals(1, clusterState.getRoutingNodes().node("node2").numberOfShardsWithState(ShardRoutingState.INITIALIZING)).     assertEquals(byteSize, clusterState.getRoutingTable().shardsWithState(ShardRoutingState.INITIALIZING).get(0).getExpectedShardSize()). }
false;public;1;7;;@Override public Long getShardSize(ShardRouting shardRouting) {     if (shardRouting.getIndexName().equals("test") && shardRouting.shardId().getId() == 0) {         return byteSize.     }     return null. }
false;public;0;55;;public void testExpectedSizeOnMove() {     final long byteSize = randomIntBetween(0, Integer.MAX_VALUE).     final AllocationService allocation = createAllocationService(Settings.EMPTY, () -> new ClusterInfo() {          @Override         public Long getShardSize(ShardRouting shardRouting) {             if (shardRouting.getIndexName().equals("test") && shardRouting.shardId().getId() == 0) {                 return byteSize.             }             return null.         }     }).     logger.info("creating an index with 1 shard, no replica").     MetaData metaData = MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(0)).build().     RoutingTable routingTable = RoutingTable.builder().addAsNew(metaData.index("test")).build().     ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(routingTable).build().     logger.info("adding two nodes and performing rerouting").     clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode("node1")).add(newNode("node2"))).build().     clusterState = allocation.reroute(clusterState, "reroute").     logger.info("start primary shard").     clusterState = allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING)).     logger.info("move the shard").     String existingNodeId = clusterState.routingTable().index("test").shard(0).primaryShard().currentNodeId().     String toNodeId.     if ("node1".equals(existingNodeId)) {         toNodeId = "node2".     } else {         toNodeId = "node1".     }     AllocationService.CommandsResult commandsResult = allocation.reroute(clusterState, new AllocationCommands(new MoveAllocationCommand("test", 0, existingNodeId, toNodeId)), false, false).     assertThat(commandsResult.getClusterState(), not(equalTo(clusterState))).     clusterState = commandsResult.getClusterState().     assertEquals(clusterState.getRoutingNodes().node(existingNodeId).iterator().next().state(), ShardRoutingState.RELOCATING).     assertEquals(clusterState.getRoutingNodes().node(toNodeId).iterator().next().state(), ShardRoutingState.INITIALIZING).     assertEquals(clusterState.getRoutingNodes().node(existingNodeId).iterator().next().getExpectedShardSize(), byteSize).     assertEquals(clusterState.getRoutingNodes().node(toNodeId).iterator().next().getExpectedShardSize(), byteSize).     logger.info("finish moving the shard").     clusterState = allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING)).     assertThat(clusterState.getRoutingNodes().node(existingNodeId).isEmpty(), equalTo(true)).     assertThat(clusterState.getRoutingNodes().node(toNodeId).iterator().next().state(), equalTo(ShardRoutingState.STARTED)).     assertEquals(clusterState.getRoutingNodes().node(toNodeId).iterator().next().getExpectedShardSize(), -1). }
