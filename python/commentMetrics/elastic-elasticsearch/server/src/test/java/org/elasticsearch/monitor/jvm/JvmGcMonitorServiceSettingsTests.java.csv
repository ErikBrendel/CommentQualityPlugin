commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;public void testEmptySettingsAreOkay() throws InterruptedException {     AtomicBoolean scheduled = new AtomicBoolean().     execute(Settings.EMPTY, (command, interval, name) -> {         scheduled.set(true).         return new MockCancellable().     }, () -> assertTrue(scheduled.get())). }
false;public;0;10;;public void testDisabledSetting() throws InterruptedException {     Settings settings = Settings.builder().put("monitor.jvm.gc.enabled", "false").build().     AtomicBoolean scheduled = new AtomicBoolean().     execute(settings, (command, interval, name) -> {         scheduled.set(true).         return new MockCancellable().     }, () -> assertFalse(scheduled.get())). }
false;public;0;9;;public void testNegativeSetting() throws InterruptedException {     String collector = randomAlphaOfLength(5).     Settings settings = Settings.builder().put("monitor.jvm.gc.collector." + collector + ".warn", "-" + randomTimeValue()).build().     execute(settings, (command, interval, name) -> null, e -> {         assertThat(e, instanceOf(IllegalArgumentException.class)).         assertThat(e.getMessage(), allOf(containsString("invalid gc_threshold"), containsString("for [monitor.jvm.gc.collector." + collector + "."))).     }, true, null). }
false;public;0;20;;public void testMissingSetting() throws InterruptedException {     String collector = randomAlphaOfLength(5).     Set<AbstractMap.SimpleEntry<String, String>> entries = new HashSet<>().     entries.add(new AbstractMap.SimpleEntry<>("monitor.jvm.gc.collector." + collector + ".warn", randomPositiveTimeValue())).     entries.add(new AbstractMap.SimpleEntry<>("monitor.jvm.gc.collector." + collector + ".info", randomPositiveTimeValue())).     entries.add(new AbstractMap.SimpleEntry<>("monitor.jvm.gc.collector." + collector + ".debug", randomPositiveTimeValue())).     Settings.Builder builder = Settings.builder().     // drop a random setting or two     for (@SuppressWarnings("unchecked") AbstractMap.SimpleEntry<String, String> entry : randomSubsetOf(randomIntBetween(1, 2), entries.toArray(new AbstractMap.SimpleEntry[0]))) {         builder.put(entry.getKey(), entry.getValue()).     }     // we should get an exception that a setting is missing     execute(builder.build(), (command, interval, name) -> null, e -> {         assertThat(e, instanceOf(IllegalArgumentException.class)).         assertThat(e.getMessage(), containsString("missing gc_threshold for [monitor.jvm.gc.collector." + collector + ".")).     }, true, null). }
false;public;0;42;;public void testIllegalOverheadSettings() throws InterruptedException {     for (final String threshold : new String[] { "warn", "info", "debug" }) {         final Settings.Builder builder = Settings.builder().         builder.put("monitor.jvm.gc.overhead." + threshold, randomIntBetween(Integer.MIN_VALUE, -1)).         execute(builder.build(), (command, interval, name) -> null, e -> {             assertThat(e, instanceOf(IllegalArgumentException.class)).             assertThat(e.getMessage(), containsString("setting [monitor.jvm.gc.overhead." + threshold + "] must be >= 0")).         }, true, null).     }     for (final String threshold : new String[] { "warn", "info", "debug" }) {         final Settings.Builder builder = Settings.builder().         builder.put("monitor.jvm.gc.overhead." + threshold, randomIntBetween(100 + 1, Integer.MAX_VALUE)).         execute(builder.build(), (command, interval, name) -> null, e -> {             assertThat(e, instanceOf(IllegalArgumentException.class)).             assertThat(e.getMessage(), containsString("setting [monitor.jvm.gc.overhead." + threshold + "] must be <= 100")).         }, true, null).     }     final Settings.Builder infoWarnOutOfOrderBuilder = Settings.builder().     final int info = randomIntBetween(2, 98).     infoWarnOutOfOrderBuilder.put("monitor.jvm.gc.overhead.info", info).     final int warn = randomIntBetween(1, info - 1).     infoWarnOutOfOrderBuilder.put("monitor.jvm.gc.overhead.warn", warn).     execute(infoWarnOutOfOrderBuilder.build(), (command, interval, name) -> null, e -> {         assertThat(e, instanceOf(IllegalArgumentException.class)).         assertThat(e.getMessage(), containsString("[monitor.jvm.gc.overhead.warn] must be greater than " + "[monitor.jvm.gc.overhead.info] [" + info + "] but was [" + warn + "]")).     }, true, null).     final Settings.Builder debugInfoOutOfOrderBuilder = Settings.builder().     debugInfoOutOfOrderBuilder.put("monitor.jvm.gc.overhead.info", info).     final int debug = randomIntBetween(info + 1, 99).     debugInfoOutOfOrderBuilder.put("monitor.jvm.gc.overhead.debug", debug).     debugInfoOutOfOrderBuilder.put("monitor.jvm.gc.overhead.warn", // or the test will fail for the wrong reason     randomIntBetween(debug + 1, 100)).     execute(debugInfoOutOfOrderBuilder.build(), (command, interval, name) -> null, e -> {         assertThat(e, instanceOf(IllegalArgumentException.class)).         assertThat(e.getMessage(), containsString("[monitor.jvm.gc.overhead.info] must be greater than " + "[monitor.jvm.gc.overhead.debug] [" + debug + "] but was [" + info + "]")).     }, true, null). }
false;private,static;3;4;;private static void execute(Settings settings, TriFunction<Runnable, TimeValue, String, Cancellable> scheduler, Runnable asserts) throws InterruptedException {     execute(settings, scheduler, null, false, asserts). }
false;public;3;4;;@Override public Cancellable scheduleWithFixedDelay(Runnable command, TimeValue interval, String name) {     return scheduler.apply(command, interval, name). }
false;private,static;5;28;;private static void execute(Settings settings, TriFunction<Runnable, TimeValue, String, Cancellable> scheduler, Consumer<Throwable> consumer, boolean constructionShouldFail, Runnable asserts) throws InterruptedException {     assert constructionShouldFail == (consumer != null).     assert constructionShouldFail == (asserts == null).     ThreadPool threadPool = null.     try {         threadPool = new TestThreadPool(JvmGcMonitorServiceSettingsTests.class.getCanonicalName()) {              @Override             public Cancellable scheduleWithFixedDelay(Runnable command, TimeValue interval, String name) {                 return scheduler.apply(command, interval, name).             }         }.         try {             JvmGcMonitorService service = new JvmGcMonitorService(settings, threadPool).             if (constructionShouldFail) {                 fail("construction of jvm gc service should have failed").             }             service.doStart().             asserts.run().             service.doStop().         } catch (Exception t) {             consumer.accept(t).         }     } finally {         ThreadPool.terminate(threadPool, 30, TimeUnit.SECONDS).     } }
false;;3;1;;R apply(S s, T t, U u).
false;public;0;4;;@Override public boolean cancel() {     return true. }
false;public;0;4;;@Override public boolean isCancelled() {     return false. }
