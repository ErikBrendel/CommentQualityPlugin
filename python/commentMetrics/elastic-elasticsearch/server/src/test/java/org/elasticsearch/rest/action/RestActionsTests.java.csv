commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void init() {     xContentRegistry = new NamedXContentRegistry(new SearchModule(Settings.EMPTY, false, emptyList()).getNamedXContents()). }
false;public,static;0;4;;@AfterClass public static void cleanup() {     xContentRegistry = null. }
false;public;0;8;;public void testParseTopLevelBuilder() throws IOException {     QueryBuilder query = new MatchQueryBuilder("foo", "bar").     String requestBody = "{ \"query\" : " + query.toString() + "}".     try (XContentParser parser = createParser(JsonXContent.jsonXContent, requestBody)) {         QueryBuilder actual = RestActions.getQueryContent(parser).         assertEquals(query, actual).     } }
false;public;0;8;;public void testParseTopLevelBuilderEmptyObject() throws IOException {     for (String requestBody : Arrays.asList("{}", "")) {         try (XContentParser parser = createParser(JsonXContent.jsonXContent, requestBody)) {             QueryBuilder query = RestActions.getQueryContent(parser).             assertNull(query).         }     } }
false;public;0;9;;public void testParseTopLevelBuilderMalformedJson() throws IOException {     for (String requestBody : Arrays.asList("\"\"", "\"someString\"", "\"{\"")) {         try (XContentParser parser = createParser(JsonXContent.jsonXContent, requestBody)) {             ParsingException exception = expectThrows(ParsingException.class, () -> RestActions.getQueryContent(parser)).             assertEquals("Expected [START_OBJECT] but found [VALUE_STRING]", exception.getMessage()).         }     } }
false;public;0;10;;public void testParseTopLevelBuilderIncompleteJson() throws IOException {     for (String requestBody : Arrays.asList("{", "{ \"query\" :")) {         try (XContentParser parser = createParser(JsonXContent.jsonXContent, requestBody)) {             ParsingException exception = expectThrows(ParsingException.class, () -> RestActions.getQueryContent(parser)).             assertEquals("Failed to parse", exception.getMessage()).             assertEquals(JsonEOFException.class, exception.getRootCause().getClass()).         }     } }
false;public;0;7;;public void testParseTopLevelBuilderUnknownParameter() throws IOException {     String requestBody = "{ \"foo\" : \"bar\"}".     try (XContentParser parser = createParser(JsonXContent.jsonXContent, requestBody)) {         ParsingException exception = expectThrows(ParsingException.class, () -> RestActions.getQueryContent(parser)).         assertEquals("request does not support [foo]", exception.getMessage()).     } }
false;public;0;80;;public void testBuildBroadcastShardsHeader() throws IOException {     ShardOperationFailedException[] failures = new ShardOperationFailedException[] { createShardFailureParsingException("node0", 0, null), createShardFailureParsingException("node1", 1, null), createShardFailureParsingException("node2", 2, null), createShardFailureParsingException("node0", 0, "cluster1"), createShardFailureParsingException("node1", 1, "cluster1"), createShardFailureParsingException("node2", 2, "cluster1"), createShardFailureParsingException("node0", 0, "cluster2"), createShardFailureParsingException("node1", 1, "cluster2"), createShardFailureParsingException("node2", 2, "cluster2") }.     XContentBuilder builder = JsonXContent.contentBuilder().     builder.prettyPrint().     builder.startObject().     RestActions.buildBroadcastShardsHeader(builder, ToXContent.EMPTY_PARAMS, 12, 3, 0, 9, failures).     builder.endObject().     assertThat(Strings.toString(builder), equalTo("{\n" + "  \"_shards\" : {\n" + "    \"total\" : 12,\n" + "    \"successful\" : 3,\n" + "    \"skipped\" : 0,\n" + "    \"failed\" : 9,\n" + "    \"failures\" : [\n" + "      {\n" + "        \"shard\" : 0,\n" + "        \"index\" : \"index\",\n" + "        \"node\" : \"node0\",\n" + "        \"reason\" : {\n" + "          \"type\" : \"parsing_exception\",\n" + "          \"reason\" : \"error\",\n" + "          \"index_uuid\" : \"_na_\",\n" + "          \"index\" : \"index\",\n" + "          \"line\" : 0,\n" + "          \"col\" : 0,\n" + "          \"caused_by\" : {\n" + "            \"type\" : \"illegal_argument_exception\",\n" + "            \"reason\" : \"some bad argument\"\n" + "          }\n" + "        }\n" + "      },\n" + "      {\n" + "        \"shard\" : 0,\n" + "        \"index\" : \"cluster1:index\",\n" + "        \"node\" : \"node0\",\n" + "        \"reason\" : {\n" + "          \"type\" : \"parsing_exception\",\n" + "          \"reason\" : \"error\",\n" + "          \"index_uuid\" : \"_na_\",\n" + "          \"index\" : \"index\",\n" + "          \"line\" : 0,\n" + "          \"col\" : 0,\n" + "          \"caused_by\" : {\n" + "            \"type\" : \"illegal_argument_exception\",\n" + "            \"reason\" : \"some bad argument\"\n" + "          }\n" + "        }\n" + "      },\n" + "      {\n" + "        \"shard\" : 0,\n" + "        \"index\" : \"cluster2:index\",\n" + "        \"node\" : \"node0\",\n" + "        \"reason\" : {\n" + "          \"type\" : \"parsing_exception\",\n" + "          \"reason\" : \"error\",\n" + "          \"index_uuid\" : \"_na_\",\n" + "          \"index\" : \"index\",\n" + "          \"line\" : 0,\n" + "          \"col\" : 0,\n" + "          \"caused_by\" : {\n" + "            \"type\" : \"illegal_argument_exception\",\n" + "            \"reason\" : \"some bad argument\"\n" + "          }\n" + "        }\n" + "      }\n" + "    ]\n" + "  }\n" + "}")). }
false;private,static;3;6;;private static ShardSearchFailure createShardFailureParsingException(String nodeId, int shardId, String clusterAlias) {     String index = "index".     ParsingException ex = new ParsingException(0, 0, "error", new IllegalArgumentException("some bad argument")).     ex.setIndex(index).     return new ShardSearchFailure(ex, createSearchShardTarget(nodeId, shardId, index, clusterAlias)). }
false;private,static;4;4;;private static SearchShardTarget createSearchShardTarget(String nodeId, int shardId, String index, String clusterAlias) {     return new SearchShardTarget(nodeId, new ShardId(new Index(index, IndexMetaData.INDEX_UUID_NA_VALUE), shardId), clusterAlias, OriginalIndices.NONE). }
false;protected;0;4;;@Override protected NamedXContentRegistry xContentRegistry() {     return xContentRegistry. }
