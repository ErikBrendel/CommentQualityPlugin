commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;public void testCorrectlyDisplayPublishedCname() throws Exception {     InetAddress localhost = InetAddress.getByName("localhost").     int port = 9200.     assertPublishAddress(new HttpInfo(new BoundTransportAddress(new TransportAddress[] { new TransportAddress(localhost, port) }, new TransportAddress(localhost, port)), 0L, true), "localhost/" + NetworkAddress.format(localhost) + ':' + port). }
false;public;0;12;;public void hideCnameIfDeprecatedFormat() throws Exception {     InetAddress localhost = InetAddress.getByName("localhost").     int port = 9200.     assertPublishAddress(new HttpInfo(new BoundTransportAddress(new TransportAddress[] { new TransportAddress(localhost, port) }, new TransportAddress(localhost, port)), 0L, false), NetworkAddress.format(localhost) + ':' + port). }
false;public;0;12;;public void testCorrectDisplayPublishedIp() throws Exception {     InetAddress localhost = InetAddress.getByName(NetworkAddress.format(InetAddress.getByName("localhost"))).     int port = 9200.     assertPublishAddress(new HttpInfo(new BoundTransportAddress(new TransportAddress[] { new TransportAddress(localhost, port) }, new TransportAddress(localhost, port)), 0L, true), NetworkAddress.format(localhost) + ':' + port). }
false;public;0;10;;public void testCorrectDisplayPublishedIpv6() throws Exception {     int port = 9200.     TransportAddress localhost = new TransportAddress(InetAddress.getByName(NetworkAddress.format(InetAddress.getByName("0:0:0:0:0:0:0:1"))), port).     assertPublishAddress(new HttpInfo(new BoundTransportAddress(new TransportAddress[] { localhost }, localhost), 0L, true), localhost.toString()). }
false;private;2;12;;@SuppressWarnings("unchecked") private void assertPublishAddress(HttpInfo httpInfo, String expected) throws IOException {     XContentBuilder builder = XContentFactory.jsonBuilder().     builder.startObject().     httpInfo.toXContent(builder, ToXContent.EMPTY_PARAMS).     builder.endObject().     assertEquals(expected, ((Map<String, Object>) createParser(builder).map().get(HttpInfo.Fields.HTTP)).get(HttpInfo.Fields.PUBLISH_ADDRESS)). }
