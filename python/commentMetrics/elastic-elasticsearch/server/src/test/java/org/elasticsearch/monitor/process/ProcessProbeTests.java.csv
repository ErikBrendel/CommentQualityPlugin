commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;public void testProcessInfo() {     long refreshInterval = randomNonNegativeLong().     ProcessInfo info = probe.processInfo(refreshInterval).     assertNotNull(info).     assertEquals(refreshInterval, info.getRefreshInterval()).     assertEquals(jvmInfo().pid(), info.getId()).     assertEquals(BootstrapInfo.isMemoryLocked(), info.isMlockall()). }
false;public;0;28;;public void testProcessStats() {     ProcessStats stats = probe.processStats().     assertNotNull(stats).     assertThat(stats.getTimestamp(), greaterThan(0L)).     if (Constants.WINDOWS) {         // Open/Max files descriptors are not supported on Windows platforms         assertThat(stats.getOpenFileDescriptors(), equalTo(-1L)).         assertThat(stats.getMaxFileDescriptors(), equalTo(-1L)).     } else {         assertThat(stats.getOpenFileDescriptors(), greaterThan(0L)).         assertThat(stats.getMaxFileDescriptors(), greaterThan(0L)).     }     ProcessStats.Cpu cpu = stats.getCpu().     assertNotNull(cpu).     // CPU percent can be negative if the system recent cpu usage is not available     assertThat(cpu.getPercent(), anyOf(lessThan((short) 0), allOf(greaterThanOrEqualTo((short) 0), lessThanOrEqualTo((short) 100)))).     // CPU time can return -1 if the platform does not support this operation, let's see which platforms fail     assertThat(cpu.getTotal().millis(), greaterThan(0L)).     ProcessStats.Mem mem = stats.getMem().     assertNotNull(mem).     // Committed total virtual memory can return -1 if not supported, let's see which platforms fail     assertThat(mem.getTotalVirtual().getBytes(), greaterThan(0L)). }
