commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;public void testNumerics() {     String[] options = new String[] { "1.0", "1", "1.000000" }.     assertThat(Fuzziness.build(randomFrom(options)).asFloat(), equalTo(1f)). }
false;public;0;87;;public void testParseFromXContent() throws IOException {     final int iters = randomIntBetween(10, 50).     for (int i = 0. i < iters. i++) {         {             float floatValue = randomFloat().             XContentBuilder json = jsonBuilder().startObject().field(Fuzziness.X_FIELD_NAME, floatValue).endObject().             try (XContentParser parser = createParser(json)) {                 assertThat(parser.nextToken(), equalTo(XContentParser.Token.START_OBJECT)).                 assertThat(parser.nextToken(), equalTo(XContentParser.Token.FIELD_NAME)).                 assertThat(parser.nextToken(), equalTo(XContentParser.Token.VALUE_NUMBER)).                 Fuzziness fuzziness = Fuzziness.parse(parser).                 assertThat(fuzziness.asFloat(), equalTo(floatValue)).                 assertThat(parser.nextToken(), equalTo(XContentParser.Token.END_OBJECT)).             }         }         {             Integer intValue = frequently() ? randomIntBetween(0, 2) : randomIntBetween(0, 100).             Float floatRep = randomFloat().             Number value = intValue.             if (randomBoolean()) {                 value = Float.valueOf(floatRep += intValue).             }             XContentBuilder json = jsonBuilder().startObject().field(Fuzziness.X_FIELD_NAME, randomBoolean() ? value.toString() : value).endObject().             try (XContentParser parser = createParser(json)) {                 assertThat(parser.nextToken(), equalTo(XContentParser.Token.START_OBJECT)).                 assertThat(parser.nextToken(), equalTo(XContentParser.Token.FIELD_NAME)).                 assertThat(parser.nextToken(), anyOf(equalTo(XContentParser.Token.VALUE_NUMBER), equalTo(XContentParser.Token.VALUE_STRING))).                 Fuzziness fuzziness = Fuzziness.parse(parser).                 if (value.intValue() >= 1) {                     assertThat(fuzziness.asDistance(), equalTo(Math.min(2, value.intValue()))).                 }                 assertThat(parser.nextToken(), equalTo(XContentParser.Token.END_OBJECT)).                 if (intValue.equals(value)) {                     switch(intValue) {                         case 1:                             assertThat(fuzziness, sameInstance(Fuzziness.ONE)).                             break.                         case 2:                             assertThat(fuzziness, sameInstance(Fuzziness.TWO)).                             break.                         case 0:                             assertThat(fuzziness, sameInstance(Fuzziness.ZERO)).                             break.                         default:                             break.                     }                 }             }         }         {             XContentBuilder json.             boolean isDefaultAutoFuzzinessTested = randomBoolean().             Fuzziness expectedFuzziness = Fuzziness.AUTO.             if (isDefaultAutoFuzzinessTested) {                 json = Fuzziness.AUTO.toXContent(jsonBuilder().startObject(), null).endObject().             } else {                 StringBuilder auto = new StringBuilder().                 auto = randomBoolean() ? auto.append("AUTO") : auto.append("auto").                 if (randomBoolean()) {                     int lowDistance = randomIntBetween(1, 3).                     int highDistance = randomIntBetween(4, 10).                     auto.append(":").append(lowDistance).append(",").append(highDistance).                     expectedFuzziness = Fuzziness.build(auto.toString()).                 }                 json = expectedFuzziness.toXContent(jsonBuilder().startObject(), null).endObject().             }             try (XContentParser parser = createParser(json)) {                 assertThat(parser.nextToken(), equalTo(XContentParser.Token.START_OBJECT)).                 assertThat(parser.nextToken(), equalTo(XContentParser.Token.FIELD_NAME)).                 assertThat(parser.nextToken(), equalTo(XContentParser.Token.VALUE_STRING)).                 Fuzziness fuzziness = Fuzziness.parse(parser).                 if (isDefaultAutoFuzzinessTested) {                     assertThat(fuzziness, sameInstance(expectedFuzziness)).                 } else {                     assertEquals(expectedFuzziness, fuzziness).                 }                 assertThat(parser.nextToken(), equalTo(XContentParser.Token.END_OBJECT)).             }         }     } }
false;public;0;3;;public void testAuto() {     assertThat(Fuzziness.AUTO.asFloat(), equalTo(1f)). }
false;public;0;8;;public void testAsDistance() {     final int iters = randomIntBetween(10, 50).     for (int i = 0. i < iters. i++) {         Integer integer = Integer.valueOf(randomIntBetween(0, 10)).         String value = "" + (randomBoolean() ? integer.intValue() : integer.floatValue()).         assertThat(Fuzziness.build(value).asDistance(), equalTo(Math.min(2, integer.intValue()))).     } }
false;public;0;9;;public void testSerialization() throws IOException {     Fuzziness fuzziness = Fuzziness.AUTO.     Fuzziness deserializedFuzziness = doSerializeRoundtrip(fuzziness).     assertEquals(fuzziness, deserializedFuzziness).     fuzziness = Fuzziness.fromEdits(randomIntBetween(0, 2)).     deserializedFuzziness = doSerializeRoundtrip(fuzziness).     assertEquals(fuzziness, deserializedFuzziness). }
false;public;0;6;;public void testSerializationDefaultAuto() throws IOException {     Fuzziness fuzziness = Fuzziness.AUTO.     Fuzziness deserializedFuzziness = doSerializeRoundtrip(fuzziness).     assertEquals(fuzziness, deserializedFuzziness).     assertEquals(fuzziness.asFloat(), deserializedFuzziness.asFloat(), 0f). }
false;public;0;7;;public void testSerializationCustomAuto() throws IOException {     Fuzziness original = Fuzziness.build("AUTO:4,7").     Fuzziness deserializedFuzziness = doSerializeRoundtrip(original).     assertNotSame(original, deserializedFuzziness).     assertEquals(original, deserializedFuzziness).     assertEquals(original.asString(), deserializedFuzziness.asString()). }
false;private,static;1;6;;private static Fuzziness doSerializeRoundtrip(Fuzziness in) throws IOException {     BytesStreamOutput output = new BytesStreamOutput().     in.writeTo(output).     StreamInput streamInput = output.bytes().streamInput().     return new Fuzziness(streamInput). }
