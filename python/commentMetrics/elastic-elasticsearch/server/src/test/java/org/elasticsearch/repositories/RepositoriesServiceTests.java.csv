commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Override public void setUp() throws Exception {     super.setUp().     ThreadPool threadPool = mock(ThreadPool.class).     final TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), threadPool, TransportService.NOOP_TRANSPORT_INTERCEPTOR, boundAddress -> DiscoveryNode.createLocal(Settings.EMPTY, boundAddress.publishAddress(), UUIDs.randomBase64UUID()), null, Collections.emptySet()).     repositoriesService = new RepositoriesService(Settings.EMPTY, mock(ClusterService.class), transportService, Collections.emptyMap(), Collections.singletonMap(TestRepository.TYPE, TestRepository::new), threadPool). }
false;public;0;10;;public void testRegisterInternalRepository() {     String repoName = "name".     expectThrows(RepositoryMissingException.class, () -> repositoriesService.repository(repoName)).     repositoriesService.registerInternalRepository(repoName, TestRepository.TYPE).     Repository repository = repositoriesService.repository(repoName).     assertEquals(repoName, repository.getMetadata().name()).     assertEquals(TestRepository.TYPE, repository.getMetadata().type()).     assertEquals(Settings.EMPTY, repository.getMetadata().settings()).     assertTrue(((TestRepository) repository).isStarted). }
false;public;0;10;;public void testUnregisterInternalRepository() {     String repoName = "name".     expectThrows(RepositoryMissingException.class, () -> repositoriesService.repository(repoName)).     repositoriesService.registerInternalRepository(repoName, TestRepository.TYPE).     Repository repository = repositoriesService.repository(repoName).     assertFalse(((TestRepository) repository).isClosed).     repositoriesService.unregisterInternalRepository(repoName).     expectThrows(RepositoryMissingException.class, () -> repositoriesService.repository(repoName)).     assertTrue(((TestRepository) repository).isClosed). }
false;public;0;11;;public void testRegisterWillNotUpdateIfInternalRepositoryWithNameExists() {     String repoName = "name".     expectThrows(RepositoryMissingException.class, () -> repositoriesService.repository(repoName)).     repositoriesService.registerInternalRepository(repoName, TestRepository.TYPE).     Repository repository = repositoriesService.repository(repoName).     assertFalse(((TestRepository) repository).isClosed).     repositoriesService.registerInternalRepository(repoName, TestRepository.TYPE).     assertFalse(((TestRepository) repository).isClosed).     Repository repository2 = repositoriesService.repository(repoName).     assertSame(repository, repository2). }
false;public;0;4;;@Override public RepositoryMetaData getMetadata() {     return metaData. }
false;public;1;4;;@Override public SnapshotInfo getSnapshotInfo(SnapshotId snapshotId) {     return null. }
false;public;1;4;;@Override public MetaData getSnapshotGlobalMetaData(SnapshotId snapshotId) {     return null. }
false;public;2;4;;@Override public IndexMetaData getSnapshotIndexMetaData(SnapshotId snapshotId, IndexId index) throws IOException {     return null. }
false;public;0;4;;@Override public RepositoryData getRepositoryData() {     return null. }
false;public;3;4;;@Override public void initializeSnapshot(SnapshotId snapshotId, List<IndexId> indices, MetaData metaData) { }
false;public;8;6;;@Override public SnapshotInfo finalizeSnapshot(SnapshotId snapshotId, List<IndexId> indices, long startTime, String failure, int totalShards, List<SnapshotShardFailure> shardFailures, long repositoryStateId, boolean includeGlobalState) {     return null. }
false;public;2;4;;@Override public void deleteSnapshot(SnapshotId snapshotId, long repositoryStateId) { }
false;public;0;4;;@Override public long getSnapshotThrottleTimeInNanos() {     return 0. }
false;public;0;4;;@Override public long getRestoreThrottleTimeInNanos() {     return 0. }
false;public;0;4;;@Override public String startVerification() {     return null. }
false;public;1;4;;@Override public void endVerification(String verificationToken) { }
false;public;2;4;;@Override public void verify(String verificationToken, DiscoveryNode localNode) { }
false;public;0;4;;@Override public boolean isReadOnly() {     return false. }
false;public;6;5;;@Override public void snapshotShard(IndexShard shard, Store store, SnapshotId snapshotId, IndexId indexId, IndexCommit snapshotIndexCommit, IndexShardSnapshotStatus snapshotStatus) { }
false;public;6;5;;@Override public void restoreShard(IndexShard shard, SnapshotId snapshotId, Version version, IndexId indexId, ShardId snapshotShardId, RecoveryState recoveryState) { }
false;public;4;4;;@Override public IndexShardSnapshotStatus getShardSnapshotStatus(SnapshotId snapshotId, Version version, IndexId indexId, ShardId shardId) {     return null. }
false;public;0;4;;@Override public Lifecycle.State lifecycleState() {     return null. }
false;public;1;4;;@Override public void addLifecycleListener(LifecycleListener listener) { }
false;public;1;4;;@Override public void removeLifecycleListener(LifecycleListener listener) { }
false;public;0;4;;@Override public void start() {     isStarted = true. }
false;public;0;4;;@Override public void stop() { }
false;public;0;4;;@Override public void close() {     isClosed = true. }
