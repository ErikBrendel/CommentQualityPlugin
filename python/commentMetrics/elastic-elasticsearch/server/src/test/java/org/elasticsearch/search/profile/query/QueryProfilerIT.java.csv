# id;timestamp;commentText;codeText;commentWords;codeWords
QueryProfilerIT -> public void testBool() throws Exception;1524684173;This test verifies that the output is reasonable for a nested query;public void testBool() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        indexRandom(true, docs)___        QueryBuilder q = QueryBuilders.boolQuery().must(QueryBuilders.matchQuery("field1", "one"))_                .must(QueryBuilders.matchQuery("field1", "two"))___        SearchResponse resp = client().prepareSearch()_                .setQuery(q)_                .setProfile(true)_                .setSearchType(SearchType.QUERY_THEN_FETCH)_                .execute().actionGet()___        Map<String, ProfileShardResult> p = resp.getProfileResults()__        assertNotNull(p)__        assertThat("Profile response should not be an empty array", resp.getProfileResults().size(), not(0))___        for (Map.Entry<String, ProfileShardResult> shardResult : resp.getProfileResults().entrySet()) {_            for (QueryProfileShardResult searchProfiles : shardResult.getValue().getQueryProfileResults()) {_                for (ProfileResult result : searchProfiles.getQueryResults()) {_                    assertEquals(result.getQueryName(), "BooleanQuery")__                    assertEquals(result.getLuceneDescription(), "+field1:one +field1:two")__                    assertThat(result.getTime(), greaterThan(0L))__                    assertNotNull(result.getTimeBreakdown())__                    assertEquals(result.getProfiledChildren().size(), 2)___                    _                    List<ProfileResult> children = result.getProfiledChildren()__                    assertEquals(children.size(), 2)___                    ProfileResult childProfile = children.get(0)__                    assertEquals(childProfile.getQueryName(), "TermQuery")__                    assertEquals(childProfile.getLuceneDescription(), "field1:one")__                    assertThat(childProfile.getTime(), greaterThan(0L))__                    assertNotNull(childProfile.getTimeBreakdown())__                    assertEquals(childProfile.getProfiledChildren().size(), 0)___                    childProfile = children.get(1)__                    assertEquals(childProfile.getQueryName(), "TermQuery")__                    assertEquals(childProfile.getLuceneDescription(), "field1:two")__                    assertThat(childProfile.getTime(), greaterThan(0L))__                    assertNotNull(childProfile.getTimeBreakdown())__                }__                CollectorResult result = searchProfiles.getCollectorResult()__                assertThat(result.getName(), not(isEmptyOrNullString()))__                assertThat(result.getTime(), greaterThan(0L))__            }_        }___    };this,test,verifies,that,the,output,is,reasonable,for,a,nested,query;public,void,test,bool,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,index,random,true,docs,query,builder,q,query,builders,bool,query,must,query,builders,match,query,field1,one,must,query,builders,match,query,field1,two,search,response,resp,client,prepare,search,set,query,q,set,profile,true,set,search,type,search,type,execute,action,get,map,string,profile,shard,result,p,resp,get,profile,results,assert,not,null,p,assert,that,profile,response,should,not,be,an,empty,array,resp,get,profile,results,size,not,0,for,map,entry,string,profile,shard,result,shard,result,resp,get,profile,results,entry,set,for,query,profile,shard,result,search,profiles,shard,result,get,value,get,query,profile,results,for,profile,result,result,search,profiles,get,query,results,assert,equals,result,get,query,name,boolean,query,assert,equals,result,get,lucene,description,field1,one,field1,two,assert,that,result,get,time,greater,than,0l,assert,not,null,result,get,time,breakdown,assert,equals,result,get,profiled,children,size,2,list,profile,result,children,result,get,profiled,children,assert,equals,children,size,2,profile,result,child,profile,children,get,0,assert,equals,child,profile,get,query,name,term,query,assert,equals,child,profile,get,lucene,description,field1,one,assert,that,child,profile,get,time,greater,than,0l,assert,not,null,child,profile,get,time,breakdown,assert,equals,child,profile,get,profiled,children,size,0,child,profile,children,get,1,assert,equals,child,profile,get,query,name,term,query,assert,equals,child,profile,get,lucene,description,field1,two,assert,that,child,profile,get,time,greater,than,0l,assert,not,null,child,profile,get,time,breakdown,collector,result,result,search,profiles,get,collector,result,assert,that,result,get,name,not,is,empty,or,null,string,assert,that,result,get,time,greater,than,0l
QueryProfilerIT -> public void testBool() throws Exception;1533063033;This test verifies that the output is reasonable for a nested query;public void testBool() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        indexRandom(true, docs)___        QueryBuilder q = QueryBuilders.boolQuery().must(QueryBuilders.matchQuery("field1", "one"))_                .must(QueryBuilders.matchQuery("field1", "two"))___        SearchResponse resp = client().prepareSearch()_                .setQuery(q)_                .setProfile(true)_                .setSearchType(SearchType.QUERY_THEN_FETCH)_                .execute().actionGet()___        Map<String, ProfileShardResult> p = resp.getProfileResults()__        assertNotNull(p)__        assertThat("Profile response should not be an empty array", resp.getProfileResults().size(), not(0))___        for (Map.Entry<String, ProfileShardResult> shardResult : resp.getProfileResults().entrySet()) {_            for (QueryProfileShardResult searchProfiles : shardResult.getValue().getQueryProfileResults()) {_                for (ProfileResult result : searchProfiles.getQueryResults()) {_                    assertEquals(result.getQueryName(), "BooleanQuery")__                    assertEquals(result.getLuceneDescription(), "+field1:one +field1:two")__                    assertThat(result.getTime(), greaterThan(0L))__                    assertNotNull(result.getTimeBreakdown())__                    assertEquals(result.getProfiledChildren().size(), 2)___                    _                    List<ProfileResult> children = result.getProfiledChildren()__                    assertEquals(children.size(), 2)___                    ProfileResult childProfile = children.get(0)__                    assertEquals(childProfile.getQueryName(), "TermQuery")__                    assertEquals(childProfile.getLuceneDescription(), "field1:one")__                    assertThat(childProfile.getTime(), greaterThan(0L))__                    assertNotNull(childProfile.getTimeBreakdown())__                    assertEquals(childProfile.getProfiledChildren().size(), 0)___                    childProfile = children.get(1)__                    assertEquals(childProfile.getQueryName(), "TermQuery")__                    assertEquals(childProfile.getLuceneDescription(), "field1:two")__                    assertThat(childProfile.getTime(), greaterThan(0L))__                    assertNotNull(childProfile.getTimeBreakdown())__                }__                CollectorResult result = searchProfiles.getCollectorResult()__                assertThat(result.getName(), not(isEmptyOrNullString()))__                assertThat(result.getTime(), greaterThan(0L))__            }_        }___    };this,test,verifies,that,the,output,is,reasonable,for,a,nested,query;public,void,test,bool,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,index,random,true,docs,query,builder,q,query,builders,bool,query,must,query,builders,match,query,field1,one,must,query,builders,match,query,field1,two,search,response,resp,client,prepare,search,set,query,q,set,profile,true,set,search,type,search,type,execute,action,get,map,string,profile,shard,result,p,resp,get,profile,results,assert,not,null,p,assert,that,profile,response,should,not,be,an,empty,array,resp,get,profile,results,size,not,0,for,map,entry,string,profile,shard,result,shard,result,resp,get,profile,results,entry,set,for,query,profile,shard,result,search,profiles,shard,result,get,value,get,query,profile,results,for,profile,result,result,search,profiles,get,query,results,assert,equals,result,get,query,name,boolean,query,assert,equals,result,get,lucene,description,field1,one,field1,two,assert,that,result,get,time,greater,than,0l,assert,not,null,result,get,time,breakdown,assert,equals,result,get,profiled,children,size,2,list,profile,result,children,result,get,profiled,children,assert,equals,children,size,2,profile,result,child,profile,children,get,0,assert,equals,child,profile,get,query,name,term,query,assert,equals,child,profile,get,lucene,description,field1,one,assert,that,child,profile,get,time,greater,than,0l,assert,not,null,child,profile,get,time,breakdown,assert,equals,child,profile,get,profiled,children,size,0,child,profile,children,get,1,assert,equals,child,profile,get,query,name,term,query,assert,equals,child,profile,get,lucene,description,field1,two,assert,that,child,profile,get,time,greater,than,0l,assert,not,null,child,profile,get,time,breakdown,collector,result,result,search,profiles,get,collector,result,assert,that,result,get,name,not,is,empty,or,null,string,assert,that,result,get,time,greater,than,0l
QueryProfilerIT -> public void testBool() throws Exception;1533295538;This test verifies that the output is reasonable for a nested query;public void testBool() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        indexRandom(true, docs)___        QueryBuilder q = QueryBuilders.boolQuery().must(QueryBuilders.matchQuery("field1", "one"))_                .must(QueryBuilders.matchQuery("field1", "two"))___        SearchResponse resp = client().prepareSearch()_                .setQuery(q)_                .setProfile(true)_                .setSearchType(SearchType.QUERY_THEN_FETCH)_                .execute().actionGet()___        Map<String, ProfileShardResult> p = resp.getProfileResults()__        assertNotNull(p)__        assertThat("Profile response should not be an empty array", resp.getProfileResults().size(), not(0))___        for (Map.Entry<String, ProfileShardResult> shardResult : resp.getProfileResults().entrySet()) {_            for (QueryProfileShardResult searchProfiles : shardResult.getValue().getQueryProfileResults()) {_                for (ProfileResult result : searchProfiles.getQueryResults()) {_                    assertEquals(result.getQueryName(), "BooleanQuery")__                    assertEquals(result.getLuceneDescription(), "+field1:one +field1:two")__                    assertThat(result.getTime(), greaterThan(0L))__                    assertNotNull(result.getTimeBreakdown())__                    assertEquals(result.getProfiledChildren().size(), 2)___                    _                    List<ProfileResult> children = result.getProfiledChildren()__                    assertEquals(children.size(), 2)___                    ProfileResult childProfile = children.get(0)__                    assertEquals(childProfile.getQueryName(), "TermQuery")__                    assertEquals(childProfile.getLuceneDescription(), "field1:one")__                    assertThat(childProfile.getTime(), greaterThan(0L))__                    assertNotNull(childProfile.getTimeBreakdown())__                    assertEquals(childProfile.getProfiledChildren().size(), 0)___                    childProfile = children.get(1)__                    assertEquals(childProfile.getQueryName(), "TermQuery")__                    assertEquals(childProfile.getLuceneDescription(), "field1:two")__                    assertThat(childProfile.getTime(), greaterThan(0L))__                    assertNotNull(childProfile.getTimeBreakdown())__                }__                CollectorResult result = searchProfiles.getCollectorResult()__                assertThat(result.getName(), not(isEmptyOrNullString()))__                assertThat(result.getTime(), greaterThan(0L))__            }_        }___    };this,test,verifies,that,the,output,is,reasonable,for,a,nested,query;public,void,test,bool,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,index,random,true,docs,query,builder,q,query,builders,bool,query,must,query,builders,match,query,field1,one,must,query,builders,match,query,field1,two,search,response,resp,client,prepare,search,set,query,q,set,profile,true,set,search,type,search,type,execute,action,get,map,string,profile,shard,result,p,resp,get,profile,results,assert,not,null,p,assert,that,profile,response,should,not,be,an,empty,array,resp,get,profile,results,size,not,0,for,map,entry,string,profile,shard,result,shard,result,resp,get,profile,results,entry,set,for,query,profile,shard,result,search,profiles,shard,result,get,value,get,query,profile,results,for,profile,result,result,search,profiles,get,query,results,assert,equals,result,get,query,name,boolean,query,assert,equals,result,get,lucene,description,field1,one,field1,two,assert,that,result,get,time,greater,than,0l,assert,not,null,result,get,time,breakdown,assert,equals,result,get,profiled,children,size,2,list,profile,result,children,result,get,profiled,children,assert,equals,children,size,2,profile,result,child,profile,children,get,0,assert,equals,child,profile,get,query,name,term,query,assert,equals,child,profile,get,lucene,description,field1,one,assert,that,child,profile,get,time,greater,than,0l,assert,not,null,child,profile,get,time,breakdown,assert,equals,child,profile,get,profiled,children,size,0,child,profile,children,get,1,assert,equals,child,profile,get,query,name,term,query,assert,equals,child,profile,get,lucene,description,field1,two,assert,that,child,profile,get,time,greater,than,0l,assert,not,null,child,profile,get,time,breakdown,collector,result,result,search,profiles,get,collector,result,assert,that,result,get,name,not,is,empty,or,null,string,assert,that,result,get,time,greater,than,0l
QueryProfilerIT -> public void testBool() throws Exception;1541156195;This test verifies that the output is reasonable for a nested query;public void testBool() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        indexRandom(true, docs)___        QueryBuilder q = QueryBuilders.boolQuery().must(QueryBuilders.matchQuery("field1", "one"))_                .must(QueryBuilders.matchQuery("field1", "two"))___        SearchResponse resp = client().prepareSearch()_                .setQuery(q)_                .setProfile(true)_                .setSearchType(SearchType.QUERY_THEN_FETCH)_                .execute().actionGet()___        Map<String, ProfileShardResult> p = resp.getProfileResults()__        assertNotNull(p)__        assertThat("Profile response should not be an empty array", resp.getProfileResults().size(), not(0))___        for (Map.Entry<String, ProfileShardResult> shardResult : resp.getProfileResults().entrySet()) {_            for (QueryProfileShardResult searchProfiles : shardResult.getValue().getQueryProfileResults()) {_                for (ProfileResult result : searchProfiles.getQueryResults()) {_                    assertEquals(result.getQueryName(), "BooleanQuery")__                    assertEquals(result.getLuceneDescription(), "+field1:one +field1:two")__                    assertThat(result.getTime(), greaterThan(0L))__                    assertNotNull(result.getTimeBreakdown())__                    assertEquals(result.getProfiledChildren().size(), 2)___                    _                    List<ProfileResult> children = result.getProfiledChildren()__                    assertEquals(children.size(), 2)___                    ProfileResult childProfile = children.get(0)__                    assertEquals(childProfile.getQueryName(), "TermQuery")__                    assertEquals(childProfile.getLuceneDescription(), "field1:one")__                    assertThat(childProfile.getTime(), greaterThan(0L))__                    assertNotNull(childProfile.getTimeBreakdown())__                    assertEquals(childProfile.getProfiledChildren().size(), 0)___                    childProfile = children.get(1)__                    assertEquals(childProfile.getQueryName(), "TermQuery")__                    assertEquals(childProfile.getLuceneDescription(), "field1:two")__                    assertThat(childProfile.getTime(), greaterThan(0L))__                    assertNotNull(childProfile.getTimeBreakdown())__                }__                CollectorResult result = searchProfiles.getCollectorResult()__                assertThat(result.getName(), not(isEmptyOrNullString()))__                assertThat(result.getTime(), greaterThan(0L))__            }_        }___    };this,test,verifies,that,the,output,is,reasonable,for,a,nested,query;public,void,test,bool,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,index,random,true,docs,query,builder,q,query,builders,bool,query,must,query,builders,match,query,field1,one,must,query,builders,match,query,field1,two,search,response,resp,client,prepare,search,set,query,q,set,profile,true,set,search,type,search,type,execute,action,get,map,string,profile,shard,result,p,resp,get,profile,results,assert,not,null,p,assert,that,profile,response,should,not,be,an,empty,array,resp,get,profile,results,size,not,0,for,map,entry,string,profile,shard,result,shard,result,resp,get,profile,results,entry,set,for,query,profile,shard,result,search,profiles,shard,result,get,value,get,query,profile,results,for,profile,result,result,search,profiles,get,query,results,assert,equals,result,get,query,name,boolean,query,assert,equals,result,get,lucene,description,field1,one,field1,two,assert,that,result,get,time,greater,than,0l,assert,not,null,result,get,time,breakdown,assert,equals,result,get,profiled,children,size,2,list,profile,result,children,result,get,profiled,children,assert,equals,children,size,2,profile,result,child,profile,children,get,0,assert,equals,child,profile,get,query,name,term,query,assert,equals,child,profile,get,lucene,description,field1,one,assert,that,child,profile,get,time,greater,than,0l,assert,not,null,child,profile,get,time,breakdown,assert,equals,child,profile,get,profiled,children,size,0,child,profile,children,get,1,assert,equals,child,profile,get,query,name,term,query,assert,equals,child,profile,get,lucene,description,field1,two,assert,that,child,profile,get,time,greater,than,0l,assert,not,null,child,profile,get,time,breakdown,collector,result,result,search,profiles,get,collector,result,assert,that,result,get,name,not,is,empty,or,null,string,assert,that,result,get,time,greater,than,0l
QueryProfilerIT -> public void testBool() throws Exception;1544035746;This test verifies that the output is reasonable for a nested query;public void testBool() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        indexRandom(true, docs)___        QueryBuilder q = QueryBuilders.boolQuery().must(QueryBuilders.matchQuery("field1", "one"))_                .must(QueryBuilders.matchQuery("field1", "two"))___        SearchResponse resp = client().prepareSearch()_                .setQuery(q)_                .setProfile(true)_                .setSearchType(SearchType.QUERY_THEN_FETCH)_                .execute().actionGet()___        Map<String, ProfileShardResult> p = resp.getProfileResults()__        assertNotNull(p)__        assertThat("Profile response should not be an empty array", resp.getProfileResults().size(), not(0))___        for (Map.Entry<String, ProfileShardResult> shardResult : resp.getProfileResults().entrySet()) {_            for (QueryProfileShardResult searchProfiles : shardResult.getValue().getQueryProfileResults()) {_                for (ProfileResult result : searchProfiles.getQueryResults()) {_                    assertEquals(result.getQueryName(), "BooleanQuery")__                    assertEquals(result.getLuceneDescription(), "+field1:one +field1:two")__                    assertThat(result.getTime(), greaterThan(0L))__                    assertNotNull(result.getTimeBreakdown())__                    assertEquals(result.getProfiledChildren().size(), 2)___                    _                    List<ProfileResult> children = result.getProfiledChildren()__                    assertEquals(children.size(), 2)___                    ProfileResult childProfile = children.get(0)__                    assertEquals(childProfile.getQueryName(), "TermQuery")__                    assertEquals(childProfile.getLuceneDescription(), "field1:one")__                    assertThat(childProfile.getTime(), greaterThan(0L))__                    assertNotNull(childProfile.getTimeBreakdown())__                    assertEquals(childProfile.getProfiledChildren().size(), 0)___                    childProfile = children.get(1)__                    assertEquals(childProfile.getQueryName(), "TermQuery")__                    assertEquals(childProfile.getLuceneDescription(), "field1:two")__                    assertThat(childProfile.getTime(), greaterThan(0L))__                    assertNotNull(childProfile.getTimeBreakdown())__                }__                CollectorResult result = searchProfiles.getCollectorResult()__                assertThat(result.getName(), not(isEmptyOrNullString()))__                assertThat(result.getTime(), greaterThan(0L))__            }_        }___    };this,test,verifies,that,the,output,is,reasonable,for,a,nested,query;public,void,test,bool,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,index,random,true,docs,query,builder,q,query,builders,bool,query,must,query,builders,match,query,field1,one,must,query,builders,match,query,field1,two,search,response,resp,client,prepare,search,set,query,q,set,profile,true,set,search,type,search,type,execute,action,get,map,string,profile,shard,result,p,resp,get,profile,results,assert,not,null,p,assert,that,profile,response,should,not,be,an,empty,array,resp,get,profile,results,size,not,0,for,map,entry,string,profile,shard,result,shard,result,resp,get,profile,results,entry,set,for,query,profile,shard,result,search,profiles,shard,result,get,value,get,query,profile,results,for,profile,result,result,search,profiles,get,query,results,assert,equals,result,get,query,name,boolean,query,assert,equals,result,get,lucene,description,field1,one,field1,two,assert,that,result,get,time,greater,than,0l,assert,not,null,result,get,time,breakdown,assert,equals,result,get,profiled,children,size,2,list,profile,result,children,result,get,profiled,children,assert,equals,children,size,2,profile,result,child,profile,children,get,0,assert,equals,child,profile,get,query,name,term,query,assert,equals,child,profile,get,lucene,description,field1,one,assert,that,child,profile,get,time,greater,than,0l,assert,not,null,child,profile,get,time,breakdown,assert,equals,child,profile,get,profiled,children,size,0,child,profile,children,get,1,assert,equals,child,profile,get,query,name,term,query,assert,equals,child,profile,get,lucene,description,field1,two,assert,that,child,profile,get,time,greater,than,0l,assert,not,null,child,profile,get,time,breakdown,collector,result,result,search,profiles,get,collector,result,assert,that,result,get,name,not,is,empty,or,null,string,assert,that,result,get,time,greater,than,0l
QueryProfilerIT -> public void testBool() throws Exception;1544110272;This test verifies that the output is reasonable for a nested query;public void testBool() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        indexRandom(true, docs)___        QueryBuilder q = QueryBuilders.boolQuery().must(QueryBuilders.matchQuery("field1", "one"))_                .must(QueryBuilders.matchQuery("field1", "two"))___        SearchResponse resp = client().prepareSearch()_                .setQuery(q)_                .setProfile(true)_                .setSearchType(SearchType.QUERY_THEN_FETCH)_                .get()___        Map<String, ProfileShardResult> p = resp.getProfileResults()__        assertNotNull(p)__        assertThat("Profile response should not be an empty array", resp.getProfileResults().size(), not(0))___        for (Map.Entry<String, ProfileShardResult> shardResult : resp.getProfileResults().entrySet()) {_            for (QueryProfileShardResult searchProfiles : shardResult.getValue().getQueryProfileResults()) {_                for (ProfileResult result : searchProfiles.getQueryResults()) {_                    assertEquals(result.getQueryName(), "BooleanQuery")__                    assertEquals(result.getLuceneDescription(), "+field1:one +field1:two")__                    assertThat(result.getTime(), greaterThan(0L))__                    assertNotNull(result.getTimeBreakdown())__                    assertEquals(result.getProfiledChildren().size(), 2)___                    _                    List<ProfileResult> children = result.getProfiledChildren()__                    assertEquals(children.size(), 2)___                    ProfileResult childProfile = children.get(0)__                    assertEquals(childProfile.getQueryName(), "TermQuery")__                    assertEquals(childProfile.getLuceneDescription(), "field1:one")__                    assertThat(childProfile.getTime(), greaterThan(0L))__                    assertNotNull(childProfile.getTimeBreakdown())__                    assertEquals(childProfile.getProfiledChildren().size(), 0)___                    childProfile = children.get(1)__                    assertEquals(childProfile.getQueryName(), "TermQuery")__                    assertEquals(childProfile.getLuceneDescription(), "field1:two")__                    assertThat(childProfile.getTime(), greaterThan(0L))__                    assertNotNull(childProfile.getTimeBreakdown())__                }__                CollectorResult result = searchProfiles.getCollectorResult()__                assertThat(result.getName(), not(isEmptyOrNullString()))__                assertThat(result.getTime(), greaterThan(0L))__            }_        }___    };this,test,verifies,that,the,output,is,reasonable,for,a,nested,query;public,void,test,bool,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,index,random,true,docs,query,builder,q,query,builders,bool,query,must,query,builders,match,query,field1,one,must,query,builders,match,query,field1,two,search,response,resp,client,prepare,search,set,query,q,set,profile,true,set,search,type,search,type,get,map,string,profile,shard,result,p,resp,get,profile,results,assert,not,null,p,assert,that,profile,response,should,not,be,an,empty,array,resp,get,profile,results,size,not,0,for,map,entry,string,profile,shard,result,shard,result,resp,get,profile,results,entry,set,for,query,profile,shard,result,search,profiles,shard,result,get,value,get,query,profile,results,for,profile,result,result,search,profiles,get,query,results,assert,equals,result,get,query,name,boolean,query,assert,equals,result,get,lucene,description,field1,one,field1,two,assert,that,result,get,time,greater,than,0l,assert,not,null,result,get,time,breakdown,assert,equals,result,get,profiled,children,size,2,list,profile,result,children,result,get,profiled,children,assert,equals,children,size,2,profile,result,child,profile,children,get,0,assert,equals,child,profile,get,query,name,term,query,assert,equals,child,profile,get,lucene,description,field1,one,assert,that,child,profile,get,time,greater,than,0l,assert,not,null,child,profile,get,time,breakdown,assert,equals,child,profile,get,profiled,children,size,0,child,profile,children,get,1,assert,equals,child,profile,get,query,name,term,query,assert,equals,child,profile,get,lucene,description,field1,two,assert,that,child,profile,get,time,greater,than,0l,assert,not,null,child,profile,get,time,breakdown,collector,result,result,search,profiles,get,collector,result,assert,that,result,get,name,not,is,empty,or,null,string,assert,that,result,get,time,greater,than,0l
QueryProfilerIT -> public void testBool() throws Exception;1548420339;This test verifies that the output is reasonable for a nested query;public void testBool() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        indexRandom(true, docs)___        QueryBuilder q = QueryBuilders.boolQuery().must(QueryBuilders.matchQuery("field1", "one"))_                .must(QueryBuilders.matchQuery("field1", "two"))___        SearchResponse resp = client().prepareSearch()_                .setQuery(q)_                .setProfile(true)_                .setSearchType(SearchType.QUERY_THEN_FETCH)_                .get()___        Map<String, ProfileShardResult> p = resp.getProfileResults()__        assertNotNull(p)__        assertThat("Profile response should not be an empty array", resp.getProfileResults().size(), not(0))___        for (Map.Entry<String, ProfileShardResult> shardResult : resp.getProfileResults().entrySet()) {_            for (QueryProfileShardResult searchProfiles : shardResult.getValue().getQueryProfileResults()) {_                for (ProfileResult result : searchProfiles.getQueryResults()) {_                    assertEquals(result.getQueryName(), "BooleanQuery")__                    assertEquals(result.getLuceneDescription(), "+field1:one +field1:two")__                    assertThat(result.getTime(), greaterThan(0L))__                    assertNotNull(result.getTimeBreakdown())__                    assertEquals(result.getProfiledChildren().size(), 2)___                    _                    List<ProfileResult> children = result.getProfiledChildren()__                    assertEquals(children.size(), 2)___                    ProfileResult childProfile = children.get(0)__                    assertEquals(childProfile.getQueryName(), "TermQuery")__                    assertEquals(childProfile.getLuceneDescription(), "field1:one")__                    assertThat(childProfile.getTime(), greaterThan(0L))__                    assertNotNull(childProfile.getTimeBreakdown())__                    assertEquals(childProfile.getProfiledChildren().size(), 0)___                    childProfile = children.get(1)__                    assertEquals(childProfile.getQueryName(), "TermQuery")__                    assertEquals(childProfile.getLuceneDescription(), "field1:two")__                    assertThat(childProfile.getTime(), greaterThan(0L))__                    assertNotNull(childProfile.getTimeBreakdown())__                }__                CollectorResult result = searchProfiles.getCollectorResult()__                assertThat(result.getName(), not(isEmptyOrNullString()))__                assertThat(result.getTime(), greaterThan(0L))__            }_        }___    };this,test,verifies,that,the,output,is,reasonable,for,a,nested,query;public,void,test,bool,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,index,random,true,docs,query,builder,q,query,builders,bool,query,must,query,builders,match,query,field1,one,must,query,builders,match,query,field1,two,search,response,resp,client,prepare,search,set,query,q,set,profile,true,set,search,type,search,type,get,map,string,profile,shard,result,p,resp,get,profile,results,assert,not,null,p,assert,that,profile,response,should,not,be,an,empty,array,resp,get,profile,results,size,not,0,for,map,entry,string,profile,shard,result,shard,result,resp,get,profile,results,entry,set,for,query,profile,shard,result,search,profiles,shard,result,get,value,get,query,profile,results,for,profile,result,result,search,profiles,get,query,results,assert,equals,result,get,query,name,boolean,query,assert,equals,result,get,lucene,description,field1,one,field1,two,assert,that,result,get,time,greater,than,0l,assert,not,null,result,get,time,breakdown,assert,equals,result,get,profiled,children,size,2,list,profile,result,children,result,get,profiled,children,assert,equals,children,size,2,profile,result,child,profile,children,get,0,assert,equals,child,profile,get,query,name,term,query,assert,equals,child,profile,get,lucene,description,field1,one,assert,that,child,profile,get,time,greater,than,0l,assert,not,null,child,profile,get,time,breakdown,assert,equals,child,profile,get,profiled,children,size,0,child,profile,children,get,1,assert,equals,child,profile,get,query,name,term,query,assert,equals,child,profile,get,lucene,description,field1,two,assert,that,child,profile,get,time,greater,than,0l,assert,not,null,child,profile,get,time,breakdown,collector,result,result,search,profiles,get,collector,result,assert,that,result,get,name,not,is,empty,or,null,string,assert,that,result,get,time,greater,than,0l
QueryProfilerIT -> public void testBool() throws Exception;1549920805;This test verifies that the output is reasonable for a nested query;public void testBool() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        indexRandom(true, docs)___        QueryBuilder q = QueryBuilders.boolQuery().must(QueryBuilders.matchQuery("field1", "one"))_                .must(QueryBuilders.matchQuery("field1", "two"))___        SearchResponse resp = client().prepareSearch()_                .setQuery(q)_                .setProfile(true)_                .setSearchType(SearchType.QUERY_THEN_FETCH)_                .get()___        Map<String, ProfileShardResult> p = resp.getProfileResults()__        assertNotNull(p)__        assertThat("Profile response should not be an empty array", resp.getProfileResults().size(), not(0))___        for (Map.Entry<String, ProfileShardResult> shardResult : resp.getProfileResults().entrySet()) {_            for (QueryProfileShardResult searchProfiles : shardResult.getValue().getQueryProfileResults()) {_                for (ProfileResult result : searchProfiles.getQueryResults()) {_                    assertEquals(result.getQueryName(), "BooleanQuery")__                    assertEquals(result.getLuceneDescription(), "+field1:one +field1:two")__                    assertThat(result.getTime(), greaterThan(0L))__                    assertNotNull(result.getTimeBreakdown())__                    assertEquals(result.getProfiledChildren().size(), 2)___                    _                    List<ProfileResult> children = result.getProfiledChildren()__                    assertEquals(children.size(), 2)___                    ProfileResult childProfile = children.get(0)__                    assertEquals(childProfile.getQueryName(), "TermQuery")__                    assertEquals(childProfile.getLuceneDescription(), "field1:one")__                    assertThat(childProfile.getTime(), greaterThan(0L))__                    assertNotNull(childProfile.getTimeBreakdown())__                    assertEquals(childProfile.getProfiledChildren().size(), 0)___                    childProfile = children.get(1)__                    assertEquals(childProfile.getQueryName(), "TermQuery")__                    assertEquals(childProfile.getLuceneDescription(), "field1:two")__                    assertThat(childProfile.getTime(), greaterThan(0L))__                    assertNotNull(childProfile.getTimeBreakdown())__                }__                CollectorResult result = searchProfiles.getCollectorResult()__                assertThat(result.getName(), not(isEmptyOrNullString()))__                assertThat(result.getTime(), greaterThan(0L))__            }_        }___    };this,test,verifies,that,the,output,is,reasonable,for,a,nested,query;public,void,test,bool,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,index,random,true,docs,query,builder,q,query,builders,bool,query,must,query,builders,match,query,field1,one,must,query,builders,match,query,field1,two,search,response,resp,client,prepare,search,set,query,q,set,profile,true,set,search,type,search,type,get,map,string,profile,shard,result,p,resp,get,profile,results,assert,not,null,p,assert,that,profile,response,should,not,be,an,empty,array,resp,get,profile,results,size,not,0,for,map,entry,string,profile,shard,result,shard,result,resp,get,profile,results,entry,set,for,query,profile,shard,result,search,profiles,shard,result,get,value,get,query,profile,results,for,profile,result,result,search,profiles,get,query,results,assert,equals,result,get,query,name,boolean,query,assert,equals,result,get,lucene,description,field1,one,field1,two,assert,that,result,get,time,greater,than,0l,assert,not,null,result,get,time,breakdown,assert,equals,result,get,profiled,children,size,2,list,profile,result,children,result,get,profiled,children,assert,equals,children,size,2,profile,result,child,profile,children,get,0,assert,equals,child,profile,get,query,name,term,query,assert,equals,child,profile,get,lucene,description,field1,one,assert,that,child,profile,get,time,greater,than,0l,assert,not,null,child,profile,get,time,breakdown,assert,equals,child,profile,get,profiled,children,size,0,child,profile,children,get,1,assert,equals,child,profile,get,query,name,term,query,assert,equals,child,profile,get,lucene,description,field1,two,assert,that,child,profile,get,time,greater,than,0l,assert,not,null,child,profile,get,time,breakdown,collector,result,result,search,profiles,get,collector,result,assert,that,result,get,name,not,is,empty,or,null,string,assert,that,result,get,time,greater,than,0l
QueryProfilerIT -> public void testProfileMatchesRegular() throws Exception;1524684173;This test generates 1-10 random queries and executes a profiled and non-profiled_search for each query.  It then does some basic sanity checking of score and hits_to make sure the profiling doesn't interfere with the hits being returned;public void testProfileMatchesRegular() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        List<String> stringFields = Arrays.asList("field1")__        List<String> numericFields = Arrays.asList("field2")___        indexRandom(true, docs)___        refresh()__        int iters = between(1, 10)__        for (int i = 0_ i < iters_ i++) {_            QueryBuilder q = randomQueryBuilder(stringFields, numericFields, numDocs, 3)__            logger.info("Query: {}", q)___            SearchRequestBuilder vanilla = client().prepareSearch("test")_                    .setQuery(q)_                    .setProfile(false)_                    .addSort("_id", SortOrder.ASC)_                    .setSearchType(SearchType.QUERY_THEN_FETCH)___            SearchRequestBuilder profile = client().prepareSearch("test")_                    .setQuery(q)_                    .setProfile(true)_                    .addSort("_id", SortOrder.ASC)_                    .setSearchType(SearchType.QUERY_THEN_FETCH)___            MultiSearchResponse.Item[] responses = client().prepareMultiSearch()_                    .add(vanilla)_                    .add(profile)_                    .execute().actionGet().getResponses()___            SearchResponse vanillaResponse = responses[0].getResponse()__            SearchResponse profileResponse = responses[1].getResponse()___            float vanillaMaxScore = vanillaResponse.getHits().getMaxScore()__            float profileMaxScore = profileResponse.getHits().getMaxScore()__            if (Float.isNaN(vanillaMaxScore)) {_                assertTrue("Vanilla maxScore is NaN but Profile is not [" + profileMaxScore + "]",_                        Float.isNaN(profileMaxScore))__            } else {_                assertEquals("Profile maxScore of [" + profileMaxScore + "] is not close to Vanilla maxScore [" + vanillaMaxScore + "]",_                        vanillaMaxScore, profileMaxScore, 0.001)__            }__            assertThat(_                    "Profile totalHits of [" + profileResponse.getHits().getTotalHits() + "] is not close to Vanilla totalHits ["_                            + vanillaResponse.getHits().getTotalHits() + "]",_                    vanillaResponse.getHits().getTotalHits(), equalTo(profileResponse.getHits().getTotalHits()))___            SearchHit[] vanillaHits = vanillaResponse.getHits().getHits()__            SearchHit[] profileHits = profileResponse.getHits().getHits()___            for (int j = 0_ j < vanillaHits.length_ j++) {_                assertThat("Profile hit #" + j + " has a different ID from Vanilla",_                    vanillaHits[j].getId(), equalTo(profileHits[j].getId()))__            }__        }_    };this,test,generates,1,10,random,queries,and,executes,a,profiled,and,non,profiled,search,for,each,query,it,then,does,some,basic,sanity,checking,of,score,and,hits,to,make,sure,the,profiling,doesn,t,interfere,with,the,hits,being,returned;public,void,test,profile,matches,regular,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,list,string,string,fields,arrays,as,list,field1,list,string,numeric,fields,arrays,as,list,field2,index,random,true,docs,refresh,int,iters,between,1,10,for,int,i,0,i,iters,i,query,builder,q,random,query,builder,string,fields,numeric,fields,num,docs,3,logger,info,query,q,search,request,builder,vanilla,client,prepare,search,test,set,query,q,set,profile,false,add,sort,sort,order,asc,set,search,type,search,type,search,request,builder,profile,client,prepare,search,test,set,query,q,set,profile,true,add,sort,sort,order,asc,set,search,type,search,type,multi,search,response,item,responses,client,prepare,multi,search,add,vanilla,add,profile,execute,action,get,get,responses,search,response,vanilla,response,responses,0,get,response,search,response,profile,response,responses,1,get,response,float,vanilla,max,score,vanilla,response,get,hits,get,max,score,float,profile,max,score,profile,response,get,hits,get,max,score,if,float,is,na,n,vanilla,max,score,assert,true,vanilla,max,score,is,na,n,but,profile,is,not,profile,max,score,float,is,na,n,profile,max,score,else,assert,equals,profile,max,score,of,profile,max,score,is,not,close,to,vanilla,max,score,vanilla,max,score,vanilla,max,score,profile,max,score,0,001,assert,that,profile,total,hits,of,profile,response,get,hits,get,total,hits,is,not,close,to,vanilla,total,hits,vanilla,response,get,hits,get,total,hits,vanilla,response,get,hits,get,total,hits,equal,to,profile,response,get,hits,get,total,hits,search,hit,vanilla,hits,vanilla,response,get,hits,get,hits,search,hit,profile,hits,profile,response,get,hits,get,hits,for,int,j,0,j,vanilla,hits,length,j,assert,that,profile,hit,j,has,a,different,id,from,vanilla,vanilla,hits,j,get,id,equal,to,profile,hits,j,get,id
QueryProfilerIT -> public void testProfileMatchesRegular() throws Exception;1533295538;This test generates 1-10 random queries and executes a profiled and non-profiled_search for each query.  It then does some basic sanity checking of score and hits_to make sure the profiling doesn't interfere with the hits being returned;public void testProfileMatchesRegular() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        List<String> stringFields = Arrays.asList("field1")__        List<String> numericFields = Arrays.asList("field2")___        indexRandom(true, docs)___        refresh()__        int iters = between(1, 10)__        for (int i = 0_ i < iters_ i++) {_            QueryBuilder q = randomQueryBuilder(stringFields, numericFields, numDocs, 3)__            logger.info("Query: {}", q)___            SearchRequestBuilder vanilla = client().prepareSearch("test")_                    .setQuery(q)_                    .setProfile(false)_                    .addSort("_id", SortOrder.ASC)_                    .setSearchType(SearchType.QUERY_THEN_FETCH)___            SearchRequestBuilder profile = client().prepareSearch("test")_                    .setQuery(q)_                    .setProfile(true)_                    .addSort("_id", SortOrder.ASC)_                    .setSearchType(SearchType.QUERY_THEN_FETCH)___            MultiSearchResponse.Item[] responses = client().prepareMultiSearch()_                    .add(vanilla)_                    .add(profile)_                    .execute().actionGet().getResponses()___            SearchResponse vanillaResponse = responses[0].getResponse()__            SearchResponse profileResponse = responses[1].getResponse()___            assertThat(vanillaResponse.getFailedShards(), equalTo(0))__            assertThat(profileResponse.getFailedShards(), equalTo(0))__            assertThat(vanillaResponse.getSuccessfulShards(), equalTo(profileResponse.getSuccessfulShards()))___            float vanillaMaxScore = vanillaResponse.getHits().getMaxScore()__            float profileMaxScore = profileResponse.getHits().getMaxScore()__            if (Float.isNaN(vanillaMaxScore)) {_                assertTrue("Vanilla maxScore is NaN but Profile is not [" + profileMaxScore + "]",_                        Float.isNaN(profileMaxScore))__            } else {_                assertEquals("Profile maxScore of [" + profileMaxScore + "] is not close to Vanilla maxScore [" + vanillaMaxScore + "]",_                        vanillaMaxScore, profileMaxScore, 0.001)__            }__            if (vanillaResponse.getHits().totalHits != profileResponse.getHits().totalHits) {_                Set<SearchHit> vanillaSet = new HashSet<>(Arrays.asList(vanillaResponse.getHits().getHits()))__                Set<SearchHit> profileSet = new HashSet<>(Arrays.asList(profileResponse.getHits().getHits()))__                if (vanillaResponse.getHits().totalHits > profileResponse.getHits().totalHits) {_                    vanillaSet.removeAll(profileSet)__                    fail("Vanilla hits were larger than profile hits.  Non-overlapping elements were: "_                        + vanillaSet.toString())__                } else {_                    profileSet.removeAll(vanillaSet)__                    fail("Profile hits were larger than vanilla hits.  Non-overlapping elements were: "_                        + profileSet.toString())__                }_            }__            SearchHit[] vanillaHits = vanillaResponse.getHits().getHits()__            SearchHit[] profileHits = profileResponse.getHits().getHits()___            for (int j = 0_ j < vanillaHits.length_ j++) {_                assertThat("Profile hit #" + j + " has a different ID from Vanilla",_                    vanillaHits[j].getId(), equalTo(profileHits[j].getId()))__            }__        }_    };this,test,generates,1,10,random,queries,and,executes,a,profiled,and,non,profiled,search,for,each,query,it,then,does,some,basic,sanity,checking,of,score,and,hits,to,make,sure,the,profiling,doesn,t,interfere,with,the,hits,being,returned;public,void,test,profile,matches,regular,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,list,string,string,fields,arrays,as,list,field1,list,string,numeric,fields,arrays,as,list,field2,index,random,true,docs,refresh,int,iters,between,1,10,for,int,i,0,i,iters,i,query,builder,q,random,query,builder,string,fields,numeric,fields,num,docs,3,logger,info,query,q,search,request,builder,vanilla,client,prepare,search,test,set,query,q,set,profile,false,add,sort,sort,order,asc,set,search,type,search,type,search,request,builder,profile,client,prepare,search,test,set,query,q,set,profile,true,add,sort,sort,order,asc,set,search,type,search,type,multi,search,response,item,responses,client,prepare,multi,search,add,vanilla,add,profile,execute,action,get,get,responses,search,response,vanilla,response,responses,0,get,response,search,response,profile,response,responses,1,get,response,assert,that,vanilla,response,get,failed,shards,equal,to,0,assert,that,profile,response,get,failed,shards,equal,to,0,assert,that,vanilla,response,get,successful,shards,equal,to,profile,response,get,successful,shards,float,vanilla,max,score,vanilla,response,get,hits,get,max,score,float,profile,max,score,profile,response,get,hits,get,max,score,if,float,is,na,n,vanilla,max,score,assert,true,vanilla,max,score,is,na,n,but,profile,is,not,profile,max,score,float,is,na,n,profile,max,score,else,assert,equals,profile,max,score,of,profile,max,score,is,not,close,to,vanilla,max,score,vanilla,max,score,vanilla,max,score,profile,max,score,0,001,if,vanilla,response,get,hits,total,hits,profile,response,get,hits,total,hits,set,search,hit,vanilla,set,new,hash,set,arrays,as,list,vanilla,response,get,hits,get,hits,set,search,hit,profile,set,new,hash,set,arrays,as,list,profile,response,get,hits,get,hits,if,vanilla,response,get,hits,total,hits,profile,response,get,hits,total,hits,vanilla,set,remove,all,profile,set,fail,vanilla,hits,were,larger,than,profile,hits,non,overlapping,elements,were,vanilla,set,to,string,else,profile,set,remove,all,vanilla,set,fail,profile,hits,were,larger,than,vanilla,hits,non,overlapping,elements,were,profile,set,to,string,search,hit,vanilla,hits,vanilla,response,get,hits,get,hits,search,hit,profile,hits,profile,response,get,hits,get,hits,for,int,j,0,j,vanilla,hits,length,j,assert,that,profile,hit,j,has,a,different,id,from,vanilla,vanilla,hits,j,get,id,equal,to,profile,hits,j,get,id
QueryProfilerIT -> public void testProfileMatchesRegular() throws Exception;1549920805;This test generates a random query and executes a profiled and non-profiled_search for each query.  It then does some basic sanity checking of score and hits_to make sure the profiling doesn't interfere with the hits being returned;public void testProfileMatchesRegular() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        List<String> stringFields = Arrays.asList("field1")__        List<String> numericFields = Arrays.asList("field2")___        indexRandom(true, docs)___        refresh()__        QueryBuilder q = randomQueryBuilder(stringFields, numericFields, numDocs, 3)__        logger.debug("Query: {}", q)___        SearchRequestBuilder vanilla = client().prepareSearch("test")_            .setQuery(q)_            .setProfile(false)_            .addSort("_id", SortOrder.ASC)_            .setSearchType(SearchType.QUERY_THEN_FETCH)_            .setRequestCache(false)___        SearchRequestBuilder profile = client().prepareSearch("test")_            .setQuery(q)_            .setProfile(true)_            .addSort("_id", SortOrder.ASC)_            .setSearchType(SearchType.QUERY_THEN_FETCH)_            .setRequestCache(false)___        MultiSearchResponse.Item[] responses = client().prepareMultiSearch()_            .add(vanilla)_            .add(profile)_            .get().getResponses()___        SearchResponse vanillaResponse = responses[0].getResponse()__        SearchResponse profileResponse = responses[1].getResponse()___        assertThat(vanillaResponse.getFailedShards(), equalTo(0))__        assertThat(profileResponse.getFailedShards(), equalTo(0))__        assertThat(vanillaResponse.getSuccessfulShards(), equalTo(profileResponse.getSuccessfulShards()))___        float vanillaMaxScore = vanillaResponse.getHits().getMaxScore()__        float profileMaxScore = profileResponse.getHits().getMaxScore()__        if (Float.isNaN(vanillaMaxScore)) {_            assertTrue("Vanilla maxScore is NaN but Profile is not [" + profileMaxScore + "]",_                    Float.isNaN(profileMaxScore))__        } else {_            assertEquals("Profile maxScore of [" + profileMaxScore + "] is not close to Vanilla maxScore [" + vanillaMaxScore + "]",_                    vanillaMaxScore, profileMaxScore, 0.001)__        }__        if (vanillaResponse.getHits().getTotalHits().value != profileResponse.getHits().getTotalHits().value) {_            Set<SearchHit> vanillaSet = new HashSet<>(Arrays.asList(vanillaResponse.getHits().getHits()))__            Set<SearchHit> profileSet = new HashSet<>(Arrays.asList(profileResponse.getHits().getHits()))__            if (vanillaResponse.getHits().getTotalHits().value > profileResponse.getHits().getTotalHits().value) {_                vanillaSet.removeAll(profileSet)__                fail("Vanilla hits were larger than profile hits.  Non-overlapping elements were: "_                    + vanillaSet.toString())__            } else {_                profileSet.removeAll(vanillaSet)__                fail("Profile hits were larger than vanilla hits.  Non-overlapping elements were: "_                    + profileSet.toString())__            }_        }__        SearchHit[] vanillaHits = vanillaResponse.getHits().getHits()__        SearchHit[] profileHits = profileResponse.getHits().getHits()___        for (int j = 0_ j < vanillaHits.length_ j++) {_            assertThat("Profile hit #" + j + " has a different ID from Vanilla",_                vanillaHits[j].getId(), equalTo(profileHits[j].getId()))__        }___    };this,test,generates,a,random,query,and,executes,a,profiled,and,non,profiled,search,for,each,query,it,then,does,some,basic,sanity,checking,of,score,and,hits,to,make,sure,the,profiling,doesn,t,interfere,with,the,hits,being,returned;public,void,test,profile,matches,regular,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,list,string,string,fields,arrays,as,list,field1,list,string,numeric,fields,arrays,as,list,field2,index,random,true,docs,refresh,query,builder,q,random,query,builder,string,fields,numeric,fields,num,docs,3,logger,debug,query,q,search,request,builder,vanilla,client,prepare,search,test,set,query,q,set,profile,false,add,sort,sort,order,asc,set,search,type,search,type,set,request,cache,false,search,request,builder,profile,client,prepare,search,test,set,query,q,set,profile,true,add,sort,sort,order,asc,set,search,type,search,type,set,request,cache,false,multi,search,response,item,responses,client,prepare,multi,search,add,vanilla,add,profile,get,get,responses,search,response,vanilla,response,responses,0,get,response,search,response,profile,response,responses,1,get,response,assert,that,vanilla,response,get,failed,shards,equal,to,0,assert,that,profile,response,get,failed,shards,equal,to,0,assert,that,vanilla,response,get,successful,shards,equal,to,profile,response,get,successful,shards,float,vanilla,max,score,vanilla,response,get,hits,get,max,score,float,profile,max,score,profile,response,get,hits,get,max,score,if,float,is,na,n,vanilla,max,score,assert,true,vanilla,max,score,is,na,n,but,profile,is,not,profile,max,score,float,is,na,n,profile,max,score,else,assert,equals,profile,max,score,of,profile,max,score,is,not,close,to,vanilla,max,score,vanilla,max,score,vanilla,max,score,profile,max,score,0,001,if,vanilla,response,get,hits,get,total,hits,value,profile,response,get,hits,get,total,hits,value,set,search,hit,vanilla,set,new,hash,set,arrays,as,list,vanilla,response,get,hits,get,hits,set,search,hit,profile,set,new,hash,set,arrays,as,list,profile,response,get,hits,get,hits,if,vanilla,response,get,hits,get,total,hits,value,profile,response,get,hits,get,total,hits,value,vanilla,set,remove,all,profile,set,fail,vanilla,hits,were,larger,than,profile,hits,non,overlapping,elements,were,vanilla,set,to,string,else,profile,set,remove,all,vanilla,set,fail,profile,hits,were,larger,than,vanilla,hits,non,overlapping,elements,were,profile,set,to,string,search,hit,vanilla,hits,vanilla,response,get,hits,get,hits,search,hit,profile,hits,profile,response,get,hits,get,hits,for,int,j,0,j,vanilla,hits,length,j,assert,that,profile,hit,j,has,a,different,id,from,vanilla,vanilla,hits,j,get,id,equal,to,profile,hits,j,get,id
QueryProfilerIT -> @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/32492")     public void testProfileMatchesRegular() throws Exception;1533063033;This test generates 1-10 random queries and executes a profiled and non-profiled_search for each query.  It then does some basic sanity checking of score and hits_to make sure the profiling doesn't interfere with the hits being returned;@AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/32492")_    public void testProfileMatchesRegular() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        List<String> stringFields = Arrays.asList("field1")__        List<String> numericFields = Arrays.asList("field2")___        indexRandom(true, docs)___        refresh()__        int iters = between(1, 10)__        for (int i = 0_ i < iters_ i++) {_            QueryBuilder q = randomQueryBuilder(stringFields, numericFields, numDocs, 3)__            logger.info("Query: {}", q)___            SearchRequestBuilder vanilla = client().prepareSearch("test")_                    .setQuery(q)_                    .setProfile(false)_                    .addSort("_id", SortOrder.ASC)_                    .setSearchType(SearchType.QUERY_THEN_FETCH)___            SearchRequestBuilder profile = client().prepareSearch("test")_                    .setQuery(q)_                    .setProfile(true)_                    .addSort("_id", SortOrder.ASC)_                    .setSearchType(SearchType.QUERY_THEN_FETCH)___            MultiSearchResponse.Item[] responses = client().prepareMultiSearch()_                    .add(vanilla)_                    .add(profile)_                    .execute().actionGet().getResponses()___            SearchResponse vanillaResponse = responses[0].getResponse()__            SearchResponse profileResponse = responses[1].getResponse()___            float vanillaMaxScore = vanillaResponse.getHits().getMaxScore()__            float profileMaxScore = profileResponse.getHits().getMaxScore()__            if (Float.isNaN(vanillaMaxScore)) {_                assertTrue("Vanilla maxScore is NaN but Profile is not [" + profileMaxScore + "]",_                        Float.isNaN(profileMaxScore))__            } else {_                assertEquals("Profile maxScore of [" + profileMaxScore + "] is not close to Vanilla maxScore [" + vanillaMaxScore + "]",_                        vanillaMaxScore, profileMaxScore, 0.001)__            }__            assertThat(_                    "Profile totalHits of [" + profileResponse.getHits().getTotalHits() + "] is not close to Vanilla totalHits ["_                            + vanillaResponse.getHits().getTotalHits() + "]",_                    vanillaResponse.getHits().getTotalHits(), equalTo(profileResponse.getHits().getTotalHits()))___            SearchHit[] vanillaHits = vanillaResponse.getHits().getHits()__            SearchHit[] profileHits = profileResponse.getHits().getHits()___            for (int j = 0_ j < vanillaHits.length_ j++) {_                assertThat("Profile hit #" + j + " has a different ID from Vanilla",_                    vanillaHits[j].getId(), equalTo(profileHits[j].getId()))__            }__        }_    };this,test,generates,1,10,random,queries,and,executes,a,profiled,and,non,profiled,search,for,each,query,it,then,does,some,basic,sanity,checking,of,score,and,hits,to,make,sure,the,profiling,doesn,t,interfere,with,the,hits,being,returned;awaits,fix,bug,url,https,github,com,elastic,elasticsearch,issues,32492,public,void,test,profile,matches,regular,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,list,string,string,fields,arrays,as,list,field1,list,string,numeric,fields,arrays,as,list,field2,index,random,true,docs,refresh,int,iters,between,1,10,for,int,i,0,i,iters,i,query,builder,q,random,query,builder,string,fields,numeric,fields,num,docs,3,logger,info,query,q,search,request,builder,vanilla,client,prepare,search,test,set,query,q,set,profile,false,add,sort,sort,order,asc,set,search,type,search,type,search,request,builder,profile,client,prepare,search,test,set,query,q,set,profile,true,add,sort,sort,order,asc,set,search,type,search,type,multi,search,response,item,responses,client,prepare,multi,search,add,vanilla,add,profile,execute,action,get,get,responses,search,response,vanilla,response,responses,0,get,response,search,response,profile,response,responses,1,get,response,float,vanilla,max,score,vanilla,response,get,hits,get,max,score,float,profile,max,score,profile,response,get,hits,get,max,score,if,float,is,na,n,vanilla,max,score,assert,true,vanilla,max,score,is,na,n,but,profile,is,not,profile,max,score,float,is,na,n,profile,max,score,else,assert,equals,profile,max,score,of,profile,max,score,is,not,close,to,vanilla,max,score,vanilla,max,score,vanilla,max,score,profile,max,score,0,001,assert,that,profile,total,hits,of,profile,response,get,hits,get,total,hits,is,not,close,to,vanilla,total,hits,vanilla,response,get,hits,get,total,hits,vanilla,response,get,hits,get,total,hits,equal,to,profile,response,get,hits,get,total,hits,search,hit,vanilla,hits,vanilla,response,get,hits,get,hits,search,hit,profile,hits,profile,response,get,hits,get,hits,for,int,j,0,j,vanilla,hits,length,j,assert,that,profile,hit,j,has,a,different,id,from,vanilla,vanilla,hits,j,get,id,equal,to,profile,hits,j,get,id
QueryProfilerIT -> @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/32492")     public void testProfileMatchesRegular() throws Exception;1541156195;This test generates 1-10 random queries and executes a profiled and non-profiled_search for each query.  It then does some basic sanity checking of score and hits_to make sure the profiling doesn't interfere with the hits being returned;@AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/32492")_    public void testProfileMatchesRegular() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        List<String> stringFields = Arrays.asList("field1")__        List<String> numericFields = Arrays.asList("field2")___        indexRandom(true, docs)___        refresh()__        int iters = between(1, 10)__        for (int i = 0_ i < iters_ i++) {_            QueryBuilder q = randomQueryBuilder(stringFields, numericFields, numDocs, 3)__            logger.info("Query: {}", q)___            SearchRequestBuilder vanilla = client().prepareSearch("test")_                    .setQuery(q)_                    .setProfile(false)_                    .addSort("_id", SortOrder.ASC)_                    .setSearchType(SearchType.QUERY_THEN_FETCH)___            SearchRequestBuilder profile = client().prepareSearch("test")_                    .setQuery(q)_                    .setProfile(true)_                    .addSort("_id", SortOrder.ASC)_                    .setSearchType(SearchType.QUERY_THEN_FETCH)___            MultiSearchResponse.Item[] responses = client().prepareMultiSearch()_                    .add(vanilla)_                    .add(profile)_                    .execute().actionGet().getResponses()___            SearchResponse vanillaResponse = responses[0].getResponse()__            SearchResponse profileResponse = responses[1].getResponse()___            assertThat(vanillaResponse.getFailedShards(), equalTo(0))__            assertThat(profileResponse.getFailedShards(), equalTo(0))__            assertThat(vanillaResponse.getSuccessfulShards(), equalTo(profileResponse.getSuccessfulShards()))___            float vanillaMaxScore = vanillaResponse.getHits().getMaxScore()__            float profileMaxScore = profileResponse.getHits().getMaxScore()__            if (Float.isNaN(vanillaMaxScore)) {_                assertTrue("Vanilla maxScore is NaN but Profile is not [" + profileMaxScore + "]",_                        Float.isNaN(profileMaxScore))__            } else {_                assertEquals("Profile maxScore of [" + profileMaxScore + "] is not close to Vanilla maxScore [" + vanillaMaxScore + "]",_                        vanillaMaxScore, profileMaxScore, 0.001)__            }__            if (vanillaResponse.getHits().totalHits != profileResponse.getHits().totalHits) {_                Set<SearchHit> vanillaSet = new HashSet<>(Arrays.asList(vanillaResponse.getHits().getHits()))__                Set<SearchHit> profileSet = new HashSet<>(Arrays.asList(profileResponse.getHits().getHits()))__                if (vanillaResponse.getHits().totalHits > profileResponse.getHits().totalHits) {_                    vanillaSet.removeAll(profileSet)__                    fail("Vanilla hits were larger than profile hits.  Non-overlapping elements were: "_                        + vanillaSet.toString())__                } else {_                    profileSet.removeAll(vanillaSet)__                    fail("Profile hits were larger than vanilla hits.  Non-overlapping elements were: "_                        + profileSet.toString())__                }_            }__            SearchHit[] vanillaHits = vanillaResponse.getHits().getHits()__            SearchHit[] profileHits = profileResponse.getHits().getHits()___            for (int j = 0_ j < vanillaHits.length_ j++) {_                assertThat("Profile hit #" + j + " has a different ID from Vanilla",_                    vanillaHits[j].getId(), equalTo(profileHits[j].getId()))__            }__        }_    };this,test,generates,1,10,random,queries,and,executes,a,profiled,and,non,profiled,search,for,each,query,it,then,does,some,basic,sanity,checking,of,score,and,hits,to,make,sure,the,profiling,doesn,t,interfere,with,the,hits,being,returned;awaits,fix,bug,url,https,github,com,elastic,elasticsearch,issues,32492,public,void,test,profile,matches,regular,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,list,string,string,fields,arrays,as,list,field1,list,string,numeric,fields,arrays,as,list,field2,index,random,true,docs,refresh,int,iters,between,1,10,for,int,i,0,i,iters,i,query,builder,q,random,query,builder,string,fields,numeric,fields,num,docs,3,logger,info,query,q,search,request,builder,vanilla,client,prepare,search,test,set,query,q,set,profile,false,add,sort,sort,order,asc,set,search,type,search,type,search,request,builder,profile,client,prepare,search,test,set,query,q,set,profile,true,add,sort,sort,order,asc,set,search,type,search,type,multi,search,response,item,responses,client,prepare,multi,search,add,vanilla,add,profile,execute,action,get,get,responses,search,response,vanilla,response,responses,0,get,response,search,response,profile,response,responses,1,get,response,assert,that,vanilla,response,get,failed,shards,equal,to,0,assert,that,profile,response,get,failed,shards,equal,to,0,assert,that,vanilla,response,get,successful,shards,equal,to,profile,response,get,successful,shards,float,vanilla,max,score,vanilla,response,get,hits,get,max,score,float,profile,max,score,profile,response,get,hits,get,max,score,if,float,is,na,n,vanilla,max,score,assert,true,vanilla,max,score,is,na,n,but,profile,is,not,profile,max,score,float,is,na,n,profile,max,score,else,assert,equals,profile,max,score,of,profile,max,score,is,not,close,to,vanilla,max,score,vanilla,max,score,vanilla,max,score,profile,max,score,0,001,if,vanilla,response,get,hits,total,hits,profile,response,get,hits,total,hits,set,search,hit,vanilla,set,new,hash,set,arrays,as,list,vanilla,response,get,hits,get,hits,set,search,hit,profile,set,new,hash,set,arrays,as,list,profile,response,get,hits,get,hits,if,vanilla,response,get,hits,total,hits,profile,response,get,hits,total,hits,vanilla,set,remove,all,profile,set,fail,vanilla,hits,were,larger,than,profile,hits,non,overlapping,elements,were,vanilla,set,to,string,else,profile,set,remove,all,vanilla,set,fail,profile,hits,were,larger,than,vanilla,hits,non,overlapping,elements,were,profile,set,to,string,search,hit,vanilla,hits,vanilla,response,get,hits,get,hits,search,hit,profile,hits,profile,response,get,hits,get,hits,for,int,j,0,j,vanilla,hits,length,j,assert,that,profile,hit,j,has,a,different,id,from,vanilla,vanilla,hits,j,get,id,equal,to,profile,hits,j,get,id
QueryProfilerIT -> @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/32492")     public void testProfileMatchesRegular() throws Exception;1544035746;This test generates 1-10 random queries and executes a profiled and non-profiled_search for each query.  It then does some basic sanity checking of score and hits_to make sure the profiling doesn't interfere with the hits being returned;@AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/32492")_    public void testProfileMatchesRegular() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        List<String> stringFields = Arrays.asList("field1")__        List<String> numericFields = Arrays.asList("field2")___        indexRandom(true, docs)___        refresh()__        int iters = between(1, 10)__        for (int i = 0_ i < iters_ i++) {_            QueryBuilder q = randomQueryBuilder(stringFields, numericFields, numDocs, 3)__            logger.info("Query: {}", q)___            SearchRequestBuilder vanilla = client().prepareSearch("test")_                    .setQuery(q)_                    .setProfile(false)_                    .addSort("_id", SortOrder.ASC)_                    .setSearchType(SearchType.QUERY_THEN_FETCH)___            SearchRequestBuilder profile = client().prepareSearch("test")_                    .setQuery(q)_                    .setProfile(true)_                    .addSort("_id", SortOrder.ASC)_                    .setSearchType(SearchType.QUERY_THEN_FETCH)___            MultiSearchResponse.Item[] responses = client().prepareMultiSearch()_                    .add(vanilla)_                    .add(profile)_                    .execute().actionGet().getResponses()___            SearchResponse vanillaResponse = responses[0].getResponse()__            SearchResponse profileResponse = responses[1].getResponse()___            assertThat(vanillaResponse.getFailedShards(), equalTo(0))__            assertThat(profileResponse.getFailedShards(), equalTo(0))__            assertThat(vanillaResponse.getSuccessfulShards(), equalTo(profileResponse.getSuccessfulShards()))___            float vanillaMaxScore = vanillaResponse.getHits().getMaxScore()__            float profileMaxScore = profileResponse.getHits().getMaxScore()__            if (Float.isNaN(vanillaMaxScore)) {_                assertTrue("Vanilla maxScore is NaN but Profile is not [" + profileMaxScore + "]",_                        Float.isNaN(profileMaxScore))__            } else {_                assertEquals("Profile maxScore of [" + profileMaxScore + "] is not close to Vanilla maxScore [" + vanillaMaxScore + "]",_                        vanillaMaxScore, profileMaxScore, 0.001)__            }__            if (vanillaResponse.getHits().getTotalHits().value != profileResponse.getHits().getTotalHits().value) {_                Set<SearchHit> vanillaSet = new HashSet<>(Arrays.asList(vanillaResponse.getHits().getHits()))__                Set<SearchHit> profileSet = new HashSet<>(Arrays.asList(profileResponse.getHits().getHits()))__                if (vanillaResponse.getHits().getTotalHits().value > profileResponse.getHits().getTotalHits().value) {_                    vanillaSet.removeAll(profileSet)__                    fail("Vanilla hits were larger than profile hits.  Non-overlapping elements were: "_                        + vanillaSet.toString())__                } else {_                    profileSet.removeAll(vanillaSet)__                    fail("Profile hits were larger than vanilla hits.  Non-overlapping elements were: "_                        + profileSet.toString())__                }_            }__            SearchHit[] vanillaHits = vanillaResponse.getHits().getHits()__            SearchHit[] profileHits = profileResponse.getHits().getHits()___            for (int j = 0_ j < vanillaHits.length_ j++) {_                assertThat("Profile hit #" + j + " has a different ID from Vanilla",_                    vanillaHits[j].getId(), equalTo(profileHits[j].getId()))__            }__        }_    };this,test,generates,1,10,random,queries,and,executes,a,profiled,and,non,profiled,search,for,each,query,it,then,does,some,basic,sanity,checking,of,score,and,hits,to,make,sure,the,profiling,doesn,t,interfere,with,the,hits,being,returned;awaits,fix,bug,url,https,github,com,elastic,elasticsearch,issues,32492,public,void,test,profile,matches,regular,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,list,string,string,fields,arrays,as,list,field1,list,string,numeric,fields,arrays,as,list,field2,index,random,true,docs,refresh,int,iters,between,1,10,for,int,i,0,i,iters,i,query,builder,q,random,query,builder,string,fields,numeric,fields,num,docs,3,logger,info,query,q,search,request,builder,vanilla,client,prepare,search,test,set,query,q,set,profile,false,add,sort,sort,order,asc,set,search,type,search,type,search,request,builder,profile,client,prepare,search,test,set,query,q,set,profile,true,add,sort,sort,order,asc,set,search,type,search,type,multi,search,response,item,responses,client,prepare,multi,search,add,vanilla,add,profile,execute,action,get,get,responses,search,response,vanilla,response,responses,0,get,response,search,response,profile,response,responses,1,get,response,assert,that,vanilla,response,get,failed,shards,equal,to,0,assert,that,profile,response,get,failed,shards,equal,to,0,assert,that,vanilla,response,get,successful,shards,equal,to,profile,response,get,successful,shards,float,vanilla,max,score,vanilla,response,get,hits,get,max,score,float,profile,max,score,profile,response,get,hits,get,max,score,if,float,is,na,n,vanilla,max,score,assert,true,vanilla,max,score,is,na,n,but,profile,is,not,profile,max,score,float,is,na,n,profile,max,score,else,assert,equals,profile,max,score,of,profile,max,score,is,not,close,to,vanilla,max,score,vanilla,max,score,vanilla,max,score,profile,max,score,0,001,if,vanilla,response,get,hits,get,total,hits,value,profile,response,get,hits,get,total,hits,value,set,search,hit,vanilla,set,new,hash,set,arrays,as,list,vanilla,response,get,hits,get,hits,set,search,hit,profile,set,new,hash,set,arrays,as,list,profile,response,get,hits,get,hits,if,vanilla,response,get,hits,get,total,hits,value,profile,response,get,hits,get,total,hits,value,vanilla,set,remove,all,profile,set,fail,vanilla,hits,were,larger,than,profile,hits,non,overlapping,elements,were,vanilla,set,to,string,else,profile,set,remove,all,vanilla,set,fail,profile,hits,were,larger,than,vanilla,hits,non,overlapping,elements,were,profile,set,to,string,search,hit,vanilla,hits,vanilla,response,get,hits,get,hits,search,hit,profile,hits,profile,response,get,hits,get,hits,for,int,j,0,j,vanilla,hits,length,j,assert,that,profile,hit,j,has,a,different,id,from,vanilla,vanilla,hits,j,get,id,equal,to,profile,hits,j,get,id
QueryProfilerIT -> @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/32492")     public void testProfileMatchesRegular() throws Exception;1544110272;This test generates 1-10 random queries and executes a profiled and non-profiled_search for each query.  It then does some basic sanity checking of score and hits_to make sure the profiling doesn't interfere with the hits being returned;@AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/32492")_    public void testProfileMatchesRegular() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        List<String> stringFields = Arrays.asList("field1")__        List<String> numericFields = Arrays.asList("field2")___        indexRandom(true, docs)___        refresh()__        int iters = between(1, 10)__        for (int i = 0_ i < iters_ i++) {_            QueryBuilder q = randomQueryBuilder(stringFields, numericFields, numDocs, 3)__            logger.info("Query: {}", q)___            SearchRequestBuilder vanilla = client().prepareSearch("test")_                    .setQuery(q)_                    .setProfile(false)_                    .addSort("_id", SortOrder.ASC)_                    .setSearchType(SearchType.QUERY_THEN_FETCH)___            SearchRequestBuilder profile = client().prepareSearch("test")_                    .setQuery(q)_                    .setProfile(true)_                    .addSort("_id", SortOrder.ASC)_                    .setSearchType(SearchType.QUERY_THEN_FETCH)___            MultiSearchResponse.Item[] responses = client().prepareMultiSearch()_                    .add(vanilla)_                    .add(profile)_                    .get().getResponses()___            SearchResponse vanillaResponse = responses[0].getResponse()__            SearchResponse profileResponse = responses[1].getResponse()___            assertThat(vanillaResponse.getFailedShards(), equalTo(0))__            assertThat(profileResponse.getFailedShards(), equalTo(0))__            assertThat(vanillaResponse.getSuccessfulShards(), equalTo(profileResponse.getSuccessfulShards()))___            float vanillaMaxScore = vanillaResponse.getHits().getMaxScore()__            float profileMaxScore = profileResponse.getHits().getMaxScore()__            if (Float.isNaN(vanillaMaxScore)) {_                assertTrue("Vanilla maxScore is NaN but Profile is not [" + profileMaxScore + "]",_                        Float.isNaN(profileMaxScore))__            } else {_                assertEquals("Profile maxScore of [" + profileMaxScore + "] is not close to Vanilla maxScore [" + vanillaMaxScore + "]",_                        vanillaMaxScore, profileMaxScore, 0.001)__            }__            if (vanillaResponse.getHits().getTotalHits().value != profileResponse.getHits().getTotalHits().value) {_                Set<SearchHit> vanillaSet = new HashSet<>(Arrays.asList(vanillaResponse.getHits().getHits()))__                Set<SearchHit> profileSet = new HashSet<>(Arrays.asList(profileResponse.getHits().getHits()))__                if (vanillaResponse.getHits().getTotalHits().value > profileResponse.getHits().getTotalHits().value) {_                    vanillaSet.removeAll(profileSet)__                    fail("Vanilla hits were larger than profile hits.  Non-overlapping elements were: "_                        + vanillaSet.toString())__                } else {_                    profileSet.removeAll(vanillaSet)__                    fail("Profile hits were larger than vanilla hits.  Non-overlapping elements were: "_                        + profileSet.toString())__                }_            }__            SearchHit[] vanillaHits = vanillaResponse.getHits().getHits()__            SearchHit[] profileHits = profileResponse.getHits().getHits()___            for (int j = 0_ j < vanillaHits.length_ j++) {_                assertThat("Profile hit #" + j + " has a different ID from Vanilla",_                    vanillaHits[j].getId(), equalTo(profileHits[j].getId()))__            }__        }_    };this,test,generates,1,10,random,queries,and,executes,a,profiled,and,non,profiled,search,for,each,query,it,then,does,some,basic,sanity,checking,of,score,and,hits,to,make,sure,the,profiling,doesn,t,interfere,with,the,hits,being,returned;awaits,fix,bug,url,https,github,com,elastic,elasticsearch,issues,32492,public,void,test,profile,matches,regular,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,list,string,string,fields,arrays,as,list,field1,list,string,numeric,fields,arrays,as,list,field2,index,random,true,docs,refresh,int,iters,between,1,10,for,int,i,0,i,iters,i,query,builder,q,random,query,builder,string,fields,numeric,fields,num,docs,3,logger,info,query,q,search,request,builder,vanilla,client,prepare,search,test,set,query,q,set,profile,false,add,sort,sort,order,asc,set,search,type,search,type,search,request,builder,profile,client,prepare,search,test,set,query,q,set,profile,true,add,sort,sort,order,asc,set,search,type,search,type,multi,search,response,item,responses,client,prepare,multi,search,add,vanilla,add,profile,get,get,responses,search,response,vanilla,response,responses,0,get,response,search,response,profile,response,responses,1,get,response,assert,that,vanilla,response,get,failed,shards,equal,to,0,assert,that,profile,response,get,failed,shards,equal,to,0,assert,that,vanilla,response,get,successful,shards,equal,to,profile,response,get,successful,shards,float,vanilla,max,score,vanilla,response,get,hits,get,max,score,float,profile,max,score,profile,response,get,hits,get,max,score,if,float,is,na,n,vanilla,max,score,assert,true,vanilla,max,score,is,na,n,but,profile,is,not,profile,max,score,float,is,na,n,profile,max,score,else,assert,equals,profile,max,score,of,profile,max,score,is,not,close,to,vanilla,max,score,vanilla,max,score,vanilla,max,score,profile,max,score,0,001,if,vanilla,response,get,hits,get,total,hits,value,profile,response,get,hits,get,total,hits,value,set,search,hit,vanilla,set,new,hash,set,arrays,as,list,vanilla,response,get,hits,get,hits,set,search,hit,profile,set,new,hash,set,arrays,as,list,profile,response,get,hits,get,hits,if,vanilla,response,get,hits,get,total,hits,value,profile,response,get,hits,get,total,hits,value,vanilla,set,remove,all,profile,set,fail,vanilla,hits,were,larger,than,profile,hits,non,overlapping,elements,were,vanilla,set,to,string,else,profile,set,remove,all,vanilla,set,fail,profile,hits,were,larger,than,vanilla,hits,non,overlapping,elements,were,profile,set,to,string,search,hit,vanilla,hits,vanilla,response,get,hits,get,hits,search,hit,profile,hits,profile,response,get,hits,get,hits,for,int,j,0,j,vanilla,hits,length,j,assert,that,profile,hit,j,has,a,different,id,from,vanilla,vanilla,hits,j,get,id,equal,to,profile,hits,j,get,id
QueryProfilerIT -> @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/32492")     public void testProfileMatchesRegular() throws Exception;1548420339;This test generates 1-10 random queries and executes a profiled and non-profiled_search for each query.  It then does some basic sanity checking of score and hits_to make sure the profiling doesn't interfere with the hits being returned;@AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/32492")_    public void testProfileMatchesRegular() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        List<String> stringFields = Arrays.asList("field1")__        List<String> numericFields = Arrays.asList("field2")___        indexRandom(true, docs)___        refresh()__        int iters = between(1, 10)__        for (int i = 0_ i < iters_ i++) {_            QueryBuilder q = randomQueryBuilder(stringFields, numericFields, numDocs, 3)__            logger.info("Query: {}", q)___            SearchRequestBuilder vanilla = client().prepareSearch("test")_                    .setQuery(q)_                    .setProfile(false)_                    .addSort("_id", SortOrder.ASC)_                    .setSearchType(SearchType.QUERY_THEN_FETCH)___            SearchRequestBuilder profile = client().prepareSearch("test")_                    .setQuery(q)_                    .setProfile(true)_                    .addSort("_id", SortOrder.ASC)_                    .setSearchType(SearchType.QUERY_THEN_FETCH)___            MultiSearchResponse.Item[] responses = client().prepareMultiSearch()_                    .add(vanilla)_                    .add(profile)_                    .get().getResponses()___            SearchResponse vanillaResponse = responses[0].getResponse()__            SearchResponse profileResponse = responses[1].getResponse()___            assertThat(vanillaResponse.getFailedShards(), equalTo(0))__            assertThat(profileResponse.getFailedShards(), equalTo(0))__            assertThat(vanillaResponse.getSuccessfulShards(), equalTo(profileResponse.getSuccessfulShards()))___            float vanillaMaxScore = vanillaResponse.getHits().getMaxScore()__            float profileMaxScore = profileResponse.getHits().getMaxScore()__            if (Float.isNaN(vanillaMaxScore)) {_                assertTrue("Vanilla maxScore is NaN but Profile is not [" + profileMaxScore + "]",_                        Float.isNaN(profileMaxScore))__            } else {_                assertEquals("Profile maxScore of [" + profileMaxScore + "] is not close to Vanilla maxScore [" + vanillaMaxScore + "]",_                        vanillaMaxScore, profileMaxScore, 0.001)__            }__            if (vanillaResponse.getHits().getTotalHits().value != profileResponse.getHits().getTotalHits().value) {_                Set<SearchHit> vanillaSet = new HashSet<>(Arrays.asList(vanillaResponse.getHits().getHits()))__                Set<SearchHit> profileSet = new HashSet<>(Arrays.asList(profileResponse.getHits().getHits()))__                if (vanillaResponse.getHits().getTotalHits().value > profileResponse.getHits().getTotalHits().value) {_                    vanillaSet.removeAll(profileSet)__                    fail("Vanilla hits were larger than profile hits.  Non-overlapping elements were: "_                        + vanillaSet.toString())__                } else {_                    profileSet.removeAll(vanillaSet)__                    fail("Profile hits were larger than vanilla hits.  Non-overlapping elements were: "_                        + profileSet.toString())__                }_            }__            SearchHit[] vanillaHits = vanillaResponse.getHits().getHits()__            SearchHit[] profileHits = profileResponse.getHits().getHits()___            for (int j = 0_ j < vanillaHits.length_ j++) {_                assertThat("Profile hit #" + j + " has a different ID from Vanilla",_                    vanillaHits[j].getId(), equalTo(profileHits[j].getId()))__            }__        }_    };this,test,generates,1,10,random,queries,and,executes,a,profiled,and,non,profiled,search,for,each,query,it,then,does,some,basic,sanity,checking,of,score,and,hits,to,make,sure,the,profiling,doesn,t,interfere,with,the,hits,being,returned;awaits,fix,bug,url,https,github,com,elastic,elasticsearch,issues,32492,public,void,test,profile,matches,regular,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,list,string,string,fields,arrays,as,list,field1,list,string,numeric,fields,arrays,as,list,field2,index,random,true,docs,refresh,int,iters,between,1,10,for,int,i,0,i,iters,i,query,builder,q,random,query,builder,string,fields,numeric,fields,num,docs,3,logger,info,query,q,search,request,builder,vanilla,client,prepare,search,test,set,query,q,set,profile,false,add,sort,sort,order,asc,set,search,type,search,type,search,request,builder,profile,client,prepare,search,test,set,query,q,set,profile,true,add,sort,sort,order,asc,set,search,type,search,type,multi,search,response,item,responses,client,prepare,multi,search,add,vanilla,add,profile,get,get,responses,search,response,vanilla,response,responses,0,get,response,search,response,profile,response,responses,1,get,response,assert,that,vanilla,response,get,failed,shards,equal,to,0,assert,that,profile,response,get,failed,shards,equal,to,0,assert,that,vanilla,response,get,successful,shards,equal,to,profile,response,get,successful,shards,float,vanilla,max,score,vanilla,response,get,hits,get,max,score,float,profile,max,score,profile,response,get,hits,get,max,score,if,float,is,na,n,vanilla,max,score,assert,true,vanilla,max,score,is,na,n,but,profile,is,not,profile,max,score,float,is,na,n,profile,max,score,else,assert,equals,profile,max,score,of,profile,max,score,is,not,close,to,vanilla,max,score,vanilla,max,score,vanilla,max,score,profile,max,score,0,001,if,vanilla,response,get,hits,get,total,hits,value,profile,response,get,hits,get,total,hits,value,set,search,hit,vanilla,set,new,hash,set,arrays,as,list,vanilla,response,get,hits,get,hits,set,search,hit,profile,set,new,hash,set,arrays,as,list,profile,response,get,hits,get,hits,if,vanilla,response,get,hits,get,total,hits,value,profile,response,get,hits,get,total,hits,value,vanilla,set,remove,all,profile,set,fail,vanilla,hits,were,larger,than,profile,hits,non,overlapping,elements,were,vanilla,set,to,string,else,profile,set,remove,all,vanilla,set,fail,profile,hits,were,larger,than,vanilla,hits,non,overlapping,elements,were,profile,set,to,string,search,hit,vanilla,hits,vanilla,response,get,hits,get,hits,search,hit,profile,hits,profile,response,get,hits,get,hits,for,int,j,0,j,vanilla,hits,length,j,assert,that,profile,hit,j,has,a,different,id,from,vanilla,vanilla,hits,j,get,id,equal,to,profile,hits,j,get,id
QueryProfilerIT -> public void testNoProfile() throws Exception;1524684173;This test makes sure no profile results are returned when profiling is disabled;public void testNoProfile() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        indexRandom(true, docs)__        refresh()__        QueryBuilder q = QueryBuilders.rangeQuery("field2").from(0).to(5)___        logger.info("Query: {}", q)___        SearchResponse resp = client().prepareSearch().setQuery(q).setProfile(false).execute().actionGet()__        assertThat("Profile response element should be an empty map", resp.getProfileResults().size(), equalTo(0))__    };this,test,makes,sure,no,profile,results,are,returned,when,profiling,is,disabled;public,void,test,no,profile,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,index,random,true,docs,refresh,query,builder,q,query,builders,range,query,field2,from,0,to,5,logger,info,query,q,search,response,resp,client,prepare,search,set,query,q,set,profile,false,execute,action,get,assert,that,profile,response,element,should,be,an,empty,map,resp,get,profile,results,size,equal,to,0
QueryProfilerIT -> public void testNoProfile() throws Exception;1533063033;This test makes sure no profile results are returned when profiling is disabled;public void testNoProfile() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        indexRandom(true, docs)__        refresh()__        QueryBuilder q = QueryBuilders.rangeQuery("field2").from(0).to(5)___        logger.info("Query: {}", q)___        SearchResponse resp = client().prepareSearch().setQuery(q).setProfile(false).execute().actionGet()__        assertThat("Profile response element should be an empty map", resp.getProfileResults().size(), equalTo(0))__    };this,test,makes,sure,no,profile,results,are,returned,when,profiling,is,disabled;public,void,test,no,profile,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,index,random,true,docs,refresh,query,builder,q,query,builders,range,query,field2,from,0,to,5,logger,info,query,q,search,response,resp,client,prepare,search,set,query,q,set,profile,false,execute,action,get,assert,that,profile,response,element,should,be,an,empty,map,resp,get,profile,results,size,equal,to,0
QueryProfilerIT -> public void testNoProfile() throws Exception;1533295538;This test makes sure no profile results are returned when profiling is disabled;public void testNoProfile() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        indexRandom(true, docs)__        refresh()__        QueryBuilder q = QueryBuilders.rangeQuery("field2").from(0).to(5)___        logger.info("Query: {}", q)___        SearchResponse resp = client().prepareSearch().setQuery(q).setProfile(false).execute().actionGet()__        assertThat("Profile response element should be an empty map", resp.getProfileResults().size(), equalTo(0))__    };this,test,makes,sure,no,profile,results,are,returned,when,profiling,is,disabled;public,void,test,no,profile,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,index,random,true,docs,refresh,query,builder,q,query,builders,range,query,field2,from,0,to,5,logger,info,query,q,search,response,resp,client,prepare,search,set,query,q,set,profile,false,execute,action,get,assert,that,profile,response,element,should,be,an,empty,map,resp,get,profile,results,size,equal,to,0
QueryProfilerIT -> public void testNoProfile() throws Exception;1541156195;This test makes sure no profile results are returned when profiling is disabled;public void testNoProfile() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        indexRandom(true, docs)__        refresh()__        QueryBuilder q = QueryBuilders.rangeQuery("field2").from(0).to(5)___        logger.info("Query: {}", q)___        SearchResponse resp = client().prepareSearch().setQuery(q).setProfile(false).execute().actionGet()__        assertThat("Profile response element should be an empty map", resp.getProfileResults().size(), equalTo(0))__    };this,test,makes,sure,no,profile,results,are,returned,when,profiling,is,disabled;public,void,test,no,profile,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,index,random,true,docs,refresh,query,builder,q,query,builders,range,query,field2,from,0,to,5,logger,info,query,q,search,response,resp,client,prepare,search,set,query,q,set,profile,false,execute,action,get,assert,that,profile,response,element,should,be,an,empty,map,resp,get,profile,results,size,equal,to,0
QueryProfilerIT -> public void testNoProfile() throws Exception;1544035746;This test makes sure no profile results are returned when profiling is disabled;public void testNoProfile() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        indexRandom(true, docs)__        refresh()__        QueryBuilder q = QueryBuilders.rangeQuery("field2").from(0).to(5)___        logger.info("Query: {}", q)___        SearchResponse resp = client().prepareSearch().setQuery(q).setProfile(false).execute().actionGet()__        assertThat("Profile response element should be an empty map", resp.getProfileResults().size(), equalTo(0))__    };this,test,makes,sure,no,profile,results,are,returned,when,profiling,is,disabled;public,void,test,no,profile,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,index,random,true,docs,refresh,query,builder,q,query,builders,range,query,field2,from,0,to,5,logger,info,query,q,search,response,resp,client,prepare,search,set,query,q,set,profile,false,execute,action,get,assert,that,profile,response,element,should,be,an,empty,map,resp,get,profile,results,size,equal,to,0
QueryProfilerIT -> public void testNoProfile() throws Exception;1544110272;This test makes sure no profile results are returned when profiling is disabled;public void testNoProfile() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        indexRandom(true, docs)__        refresh()__        QueryBuilder q = QueryBuilders.rangeQuery("field2").from(0).to(5)___        logger.info("Query: {}", q)___        SearchResponse resp = client().prepareSearch().setQuery(q).setProfile(false).get()__        assertThat("Profile response element should be an empty map", resp.getProfileResults().size(), equalTo(0))__    };this,test,makes,sure,no,profile,results,are,returned,when,profiling,is,disabled;public,void,test,no,profile,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,index,random,true,docs,refresh,query,builder,q,query,builders,range,query,field2,from,0,to,5,logger,info,query,q,search,response,resp,client,prepare,search,set,query,q,set,profile,false,get,assert,that,profile,response,element,should,be,an,empty,map,resp,get,profile,results,size,equal,to,0
QueryProfilerIT -> public void testNoProfile() throws Exception;1548420339;This test makes sure no profile results are returned when profiling is disabled;public void testNoProfile() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        indexRandom(true, docs)__        refresh()__        QueryBuilder q = QueryBuilders.rangeQuery("field2").from(0).to(5)___        logger.info("Query: {}", q)___        SearchResponse resp = client().prepareSearch().setQuery(q).setProfile(false).get()__        assertThat("Profile response element should be an empty map", resp.getProfileResults().size(), equalTo(0))__    };this,test,makes,sure,no,profile,results,are,returned,when,profiling,is,disabled;public,void,test,no,profile,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,index,random,true,docs,refresh,query,builder,q,query,builders,range,query,field2,from,0,to,5,logger,info,query,q,search,response,resp,client,prepare,search,set,query,q,set,profile,false,get,assert,that,profile,response,element,should,be,an,empty,map,resp,get,profile,results,size,equal,to,0
QueryProfilerIT -> public void testNoProfile() throws Exception;1549920805;This test makes sure no profile results are returned when profiling is disabled;public void testNoProfile() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        indexRandom(true, docs)__        refresh()__        QueryBuilder q = QueryBuilders.rangeQuery("field2").from(0).to(5)___        logger.info("Query: {}", q)___        SearchResponse resp = client().prepareSearch().setQuery(q).setProfile(false).get()__        assertThat("Profile response element should be an empty map", resp.getProfileResults().size(), equalTo(0))__    };this,test,makes,sure,no,profile,results,are,returned,when,profiling,is,disabled;public,void,test,no,profile,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,index,random,true,docs,refresh,query,builder,q,query,builders,range,query,field2,from,0,to,5,logger,info,query,q,search,response,resp,client,prepare,search,set,query,q,set,profile,false,get,assert,that,profile,response,element,should,be,an,empty,map,resp,get,profile,results,size,equal,to,0
QueryProfilerIT -> public void testProfileQuery() throws Exception;1524684173;This test simply checks to make sure nothing crashes.  Test indexes 100-150 documents,_constructs 20-100 random queries and tries to profile them;public void testProfileQuery() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        List<String> stringFields = Arrays.asList("field1")__        List<String> numericFields = Arrays.asList("field2")___        indexRandom(true, docs)___        refresh()__        int iters = between(20, 100)__        for (int i = 0_ i < iters_ i++) {_            QueryBuilder q = randomQueryBuilder(stringFields, numericFields, numDocs, 3)__            logger.info("Query: {}", q)___            SearchResponse resp = client().prepareSearch()_                    .setQuery(q)_                    .setProfile(true)_                    .setSearchType(SearchType.QUERY_THEN_FETCH)_                    .execute().actionGet()___            assertNotNull("Profile response element should not be null", resp.getProfileResults())__            assertThat("Profile response should not be an empty array", resp.getProfileResults().size(), not(0))__            for (Map.Entry<String, ProfileShardResult> shard : resp.getProfileResults().entrySet()) {_                for (QueryProfileShardResult searchProfiles : shard.getValue().getQueryProfileResults()) {_                    for (ProfileResult result : searchProfiles.getQueryResults()) {_                        assertNotNull(result.getQueryName())__                        assertNotNull(result.getLuceneDescription())__                        assertThat(result.getTime(), greaterThan(0L))__                    }__                    CollectorResult result = searchProfiles.getCollectorResult()__                    assertThat(result.getName(), not(isEmptyOrNullString()))__                    assertThat(result.getTime(), greaterThan(0L))__                }_            }__        }_    };this,test,simply,checks,to,make,sure,nothing,crashes,test,indexes,100,150,documents,constructs,20,100,random,queries,and,tries,to,profile,them;public,void,test,profile,query,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,list,string,string,fields,arrays,as,list,field1,list,string,numeric,fields,arrays,as,list,field2,index,random,true,docs,refresh,int,iters,between,20,100,for,int,i,0,i,iters,i,query,builder,q,random,query,builder,string,fields,numeric,fields,num,docs,3,logger,info,query,q,search,response,resp,client,prepare,search,set,query,q,set,profile,true,set,search,type,search,type,execute,action,get,assert,not,null,profile,response,element,should,not,be,null,resp,get,profile,results,assert,that,profile,response,should,not,be,an,empty,array,resp,get,profile,results,size,not,0,for,map,entry,string,profile,shard,result,shard,resp,get,profile,results,entry,set,for,query,profile,shard,result,search,profiles,shard,get,value,get,query,profile,results,for,profile,result,result,search,profiles,get,query,results,assert,not,null,result,get,query,name,assert,not,null,result,get,lucene,description,assert,that,result,get,time,greater,than,0l,collector,result,result,search,profiles,get,collector,result,assert,that,result,get,name,not,is,empty,or,null,string,assert,that,result,get,time,greater,than,0l
QueryProfilerIT -> public void testProfileQuery() throws Exception;1533063033;This test simply checks to make sure nothing crashes.  Test indexes 100-150 documents,_constructs 20-100 random queries and tries to profile them;public void testProfileQuery() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        List<String> stringFields = Arrays.asList("field1")__        List<String> numericFields = Arrays.asList("field2")___        indexRandom(true, docs)___        refresh()__        int iters = between(20, 100)__        for (int i = 0_ i < iters_ i++) {_            QueryBuilder q = randomQueryBuilder(stringFields, numericFields, numDocs, 3)__            logger.info("Query: {}", q)___            SearchResponse resp = client().prepareSearch()_                    .setQuery(q)_                    .setProfile(true)_                    .setSearchType(SearchType.QUERY_THEN_FETCH)_                    .execute().actionGet()___            assertNotNull("Profile response element should not be null", resp.getProfileResults())__            assertThat("Profile response should not be an empty array", resp.getProfileResults().size(), not(0))__            for (Map.Entry<String, ProfileShardResult> shard : resp.getProfileResults().entrySet()) {_                for (QueryProfileShardResult searchProfiles : shard.getValue().getQueryProfileResults()) {_                    for (ProfileResult result : searchProfiles.getQueryResults()) {_                        assertNotNull(result.getQueryName())__                        assertNotNull(result.getLuceneDescription())__                        assertThat(result.getTime(), greaterThan(0L))__                    }__                    CollectorResult result = searchProfiles.getCollectorResult()__                    assertThat(result.getName(), not(isEmptyOrNullString()))__                    assertThat(result.getTime(), greaterThan(0L))__                }_            }__        }_    };this,test,simply,checks,to,make,sure,nothing,crashes,test,indexes,100,150,documents,constructs,20,100,random,queries,and,tries,to,profile,them;public,void,test,profile,query,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,list,string,string,fields,arrays,as,list,field1,list,string,numeric,fields,arrays,as,list,field2,index,random,true,docs,refresh,int,iters,between,20,100,for,int,i,0,i,iters,i,query,builder,q,random,query,builder,string,fields,numeric,fields,num,docs,3,logger,info,query,q,search,response,resp,client,prepare,search,set,query,q,set,profile,true,set,search,type,search,type,execute,action,get,assert,not,null,profile,response,element,should,not,be,null,resp,get,profile,results,assert,that,profile,response,should,not,be,an,empty,array,resp,get,profile,results,size,not,0,for,map,entry,string,profile,shard,result,shard,resp,get,profile,results,entry,set,for,query,profile,shard,result,search,profiles,shard,get,value,get,query,profile,results,for,profile,result,result,search,profiles,get,query,results,assert,not,null,result,get,query,name,assert,not,null,result,get,lucene,description,assert,that,result,get,time,greater,than,0l,collector,result,result,search,profiles,get,collector,result,assert,that,result,get,name,not,is,empty,or,null,string,assert,that,result,get,time,greater,than,0l
QueryProfilerIT -> public void testProfileQuery() throws Exception;1533295538;This test simply checks to make sure nothing crashes.  Test indexes 100-150 documents,_constructs 20-100 random queries and tries to profile them;public void testProfileQuery() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        List<String> stringFields = Arrays.asList("field1")__        List<String> numericFields = Arrays.asList("field2")___        indexRandom(true, docs)___        refresh()__        int iters = between(20, 100)__        for (int i = 0_ i < iters_ i++) {_            QueryBuilder q = randomQueryBuilder(stringFields, numericFields, numDocs, 3)__            logger.info("Query: {}", q)___            SearchResponse resp = client().prepareSearch()_                    .setQuery(q)_                    .setProfile(true)_                    .setSearchType(SearchType.QUERY_THEN_FETCH)_                    .execute().actionGet()___            assertNotNull("Profile response element should not be null", resp.getProfileResults())__            assertThat("Profile response should not be an empty array", resp.getProfileResults().size(), not(0))__            for (Map.Entry<String, ProfileShardResult> shard : resp.getProfileResults().entrySet()) {_                for (QueryProfileShardResult searchProfiles : shard.getValue().getQueryProfileResults()) {_                    for (ProfileResult result : searchProfiles.getQueryResults()) {_                        assertNotNull(result.getQueryName())__                        assertNotNull(result.getLuceneDescription())__                        assertThat(result.getTime(), greaterThan(0L))__                    }__                    CollectorResult result = searchProfiles.getCollectorResult()__                    assertThat(result.getName(), not(isEmptyOrNullString()))__                    assertThat(result.getTime(), greaterThan(0L))__                }_            }__        }_    };this,test,simply,checks,to,make,sure,nothing,crashes,test,indexes,100,150,documents,constructs,20,100,random,queries,and,tries,to,profile,them;public,void,test,profile,query,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,list,string,string,fields,arrays,as,list,field1,list,string,numeric,fields,arrays,as,list,field2,index,random,true,docs,refresh,int,iters,between,20,100,for,int,i,0,i,iters,i,query,builder,q,random,query,builder,string,fields,numeric,fields,num,docs,3,logger,info,query,q,search,response,resp,client,prepare,search,set,query,q,set,profile,true,set,search,type,search,type,execute,action,get,assert,not,null,profile,response,element,should,not,be,null,resp,get,profile,results,assert,that,profile,response,should,not,be,an,empty,array,resp,get,profile,results,size,not,0,for,map,entry,string,profile,shard,result,shard,resp,get,profile,results,entry,set,for,query,profile,shard,result,search,profiles,shard,get,value,get,query,profile,results,for,profile,result,result,search,profiles,get,query,results,assert,not,null,result,get,query,name,assert,not,null,result,get,lucene,description,assert,that,result,get,time,greater,than,0l,collector,result,result,search,profiles,get,collector,result,assert,that,result,get,name,not,is,empty,or,null,string,assert,that,result,get,time,greater,than,0l
QueryProfilerIT -> public void testProfileQuery() throws Exception;1541156195;This test simply checks to make sure nothing crashes.  Test indexes 100-150 documents,_constructs 20-100 random queries and tries to profile them;public void testProfileQuery() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        List<String> stringFields = Arrays.asList("field1")__        List<String> numericFields = Arrays.asList("field2")___        indexRandom(true, docs)___        refresh()__        int iters = between(20, 100)__        for (int i = 0_ i < iters_ i++) {_            QueryBuilder q = randomQueryBuilder(stringFields, numericFields, numDocs, 3)__            logger.info("Query: {}", q)___            SearchResponse resp = client().prepareSearch()_                    .setQuery(q)_                    .setProfile(true)_                    .setSearchType(SearchType.QUERY_THEN_FETCH)_                    .execute().actionGet()___            assertNotNull("Profile response element should not be null", resp.getProfileResults())__            assertThat("Profile response should not be an empty array", resp.getProfileResults().size(), not(0))__            for (Map.Entry<String, ProfileShardResult> shard : resp.getProfileResults().entrySet()) {_                for (QueryProfileShardResult searchProfiles : shard.getValue().getQueryProfileResults()) {_                    for (ProfileResult result : searchProfiles.getQueryResults()) {_                        assertNotNull(result.getQueryName())__                        assertNotNull(result.getLuceneDescription())__                        assertThat(result.getTime(), greaterThan(0L))__                    }__                    CollectorResult result = searchProfiles.getCollectorResult()__                    assertThat(result.getName(), not(isEmptyOrNullString()))__                    assertThat(result.getTime(), greaterThan(0L))__                }_            }__        }_    };this,test,simply,checks,to,make,sure,nothing,crashes,test,indexes,100,150,documents,constructs,20,100,random,queries,and,tries,to,profile,them;public,void,test,profile,query,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,list,string,string,fields,arrays,as,list,field1,list,string,numeric,fields,arrays,as,list,field2,index,random,true,docs,refresh,int,iters,between,20,100,for,int,i,0,i,iters,i,query,builder,q,random,query,builder,string,fields,numeric,fields,num,docs,3,logger,info,query,q,search,response,resp,client,prepare,search,set,query,q,set,profile,true,set,search,type,search,type,execute,action,get,assert,not,null,profile,response,element,should,not,be,null,resp,get,profile,results,assert,that,profile,response,should,not,be,an,empty,array,resp,get,profile,results,size,not,0,for,map,entry,string,profile,shard,result,shard,resp,get,profile,results,entry,set,for,query,profile,shard,result,search,profiles,shard,get,value,get,query,profile,results,for,profile,result,result,search,profiles,get,query,results,assert,not,null,result,get,query,name,assert,not,null,result,get,lucene,description,assert,that,result,get,time,greater,than,0l,collector,result,result,search,profiles,get,collector,result,assert,that,result,get,name,not,is,empty,or,null,string,assert,that,result,get,time,greater,than,0l
QueryProfilerIT -> public void testProfileQuery() throws Exception;1544035746;This test simply checks to make sure nothing crashes.  Test indexes 100-150 documents,_constructs 20-100 random queries and tries to profile them;public void testProfileQuery() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        List<String> stringFields = Arrays.asList("field1")__        List<String> numericFields = Arrays.asList("field2")___        indexRandom(true, docs)___        refresh()__        int iters = between(20, 100)__        for (int i = 0_ i < iters_ i++) {_            QueryBuilder q = randomQueryBuilder(stringFields, numericFields, numDocs, 3)__            logger.info("Query: {}", q)___            SearchResponse resp = client().prepareSearch()_                    .setQuery(q)_                    .setProfile(true)_                    .setSearchType(SearchType.QUERY_THEN_FETCH)_                    .execute().actionGet()___            assertNotNull("Profile response element should not be null", resp.getProfileResults())__            assertThat("Profile response should not be an empty array", resp.getProfileResults().size(), not(0))__            for (Map.Entry<String, ProfileShardResult> shard : resp.getProfileResults().entrySet()) {_                for (QueryProfileShardResult searchProfiles : shard.getValue().getQueryProfileResults()) {_                    for (ProfileResult result : searchProfiles.getQueryResults()) {_                        assertNotNull(result.getQueryName())__                        assertNotNull(result.getLuceneDescription())__                        assertThat(result.getTime(), greaterThan(0L))__                    }__                    CollectorResult result = searchProfiles.getCollectorResult()__                    assertThat(result.getName(), not(isEmptyOrNullString()))__                    assertThat(result.getTime(), greaterThan(0L))__                }_            }__        }_    };this,test,simply,checks,to,make,sure,nothing,crashes,test,indexes,100,150,documents,constructs,20,100,random,queries,and,tries,to,profile,them;public,void,test,profile,query,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,list,string,string,fields,arrays,as,list,field1,list,string,numeric,fields,arrays,as,list,field2,index,random,true,docs,refresh,int,iters,between,20,100,for,int,i,0,i,iters,i,query,builder,q,random,query,builder,string,fields,numeric,fields,num,docs,3,logger,info,query,q,search,response,resp,client,prepare,search,set,query,q,set,profile,true,set,search,type,search,type,execute,action,get,assert,not,null,profile,response,element,should,not,be,null,resp,get,profile,results,assert,that,profile,response,should,not,be,an,empty,array,resp,get,profile,results,size,not,0,for,map,entry,string,profile,shard,result,shard,resp,get,profile,results,entry,set,for,query,profile,shard,result,search,profiles,shard,get,value,get,query,profile,results,for,profile,result,result,search,profiles,get,query,results,assert,not,null,result,get,query,name,assert,not,null,result,get,lucene,description,assert,that,result,get,time,greater,than,0l,collector,result,result,search,profiles,get,collector,result,assert,that,result,get,name,not,is,empty,or,null,string,assert,that,result,get,time,greater,than,0l
QueryProfilerIT -> public void testProfileQuery() throws Exception;1544110272;This test simply checks to make sure nothing crashes.  Test indexes 100-150 documents,_constructs 20-100 random queries and tries to profile them;public void testProfileQuery() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        List<String> stringFields = Arrays.asList("field1")__        List<String> numericFields = Arrays.asList("field2")___        indexRandom(true, docs)___        refresh()__        int iters = between(20, 100)__        for (int i = 0_ i < iters_ i++) {_            QueryBuilder q = randomQueryBuilder(stringFields, numericFields, numDocs, 3)__            logger.info("Query: {}", q)___            SearchResponse resp = client().prepareSearch()_                    .setQuery(q)_                    .setProfile(true)_                    .setSearchType(SearchType.QUERY_THEN_FETCH)_                    .get()___            assertNotNull("Profile response element should not be null", resp.getProfileResults())__            assertThat("Profile response should not be an empty array", resp.getProfileResults().size(), not(0))__            for (Map.Entry<String, ProfileShardResult> shard : resp.getProfileResults().entrySet()) {_                for (QueryProfileShardResult searchProfiles : shard.getValue().getQueryProfileResults()) {_                    for (ProfileResult result : searchProfiles.getQueryResults()) {_                        assertNotNull(result.getQueryName())__                        assertNotNull(result.getLuceneDescription())__                        assertThat(result.getTime(), greaterThan(0L))__                    }__                    CollectorResult result = searchProfiles.getCollectorResult()__                    assertThat(result.getName(), not(isEmptyOrNullString()))__                    assertThat(result.getTime(), greaterThan(0L))__                }_            }__        }_    };this,test,simply,checks,to,make,sure,nothing,crashes,test,indexes,100,150,documents,constructs,20,100,random,queries,and,tries,to,profile,them;public,void,test,profile,query,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,list,string,string,fields,arrays,as,list,field1,list,string,numeric,fields,arrays,as,list,field2,index,random,true,docs,refresh,int,iters,between,20,100,for,int,i,0,i,iters,i,query,builder,q,random,query,builder,string,fields,numeric,fields,num,docs,3,logger,info,query,q,search,response,resp,client,prepare,search,set,query,q,set,profile,true,set,search,type,search,type,get,assert,not,null,profile,response,element,should,not,be,null,resp,get,profile,results,assert,that,profile,response,should,not,be,an,empty,array,resp,get,profile,results,size,not,0,for,map,entry,string,profile,shard,result,shard,resp,get,profile,results,entry,set,for,query,profile,shard,result,search,profiles,shard,get,value,get,query,profile,results,for,profile,result,result,search,profiles,get,query,results,assert,not,null,result,get,query,name,assert,not,null,result,get,lucene,description,assert,that,result,get,time,greater,than,0l,collector,result,result,search,profiles,get,collector,result,assert,that,result,get,name,not,is,empty,or,null,string,assert,that,result,get,time,greater,than,0l
QueryProfilerIT -> public void testSimpleMatch() throws Exception;1524684173;This test verifies that the output is reasonable for a simple, non-nested query;public void testSimpleMatch() throws Exception {_        createIndex("test")__        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        indexRandom(true, docs)__        ensureGreen()___        QueryBuilder q = QueryBuilders.matchQuery("field1", "one")___        SearchResponse resp = client().prepareSearch()_                .setQuery(q)_                .setProfile(true)_                .setSearchType(SearchType.QUERY_THEN_FETCH)_                .execute().actionGet()___        Map<String, ProfileShardResult> p = resp.getProfileResults()__        assertNotNull(p)__        assertThat("Profile response should not be an empty array", resp.getProfileResults().size(), not(0))___        for (Map.Entry<String, ProfileShardResult> shardResult : resp.getProfileResults().entrySet()) {_            for (QueryProfileShardResult searchProfiles : shardResult.getValue().getQueryProfileResults()) {_                for (ProfileResult result : searchProfiles.getQueryResults()) {_                    assertEquals(result.getQueryName(), "TermQuery")__                    assertEquals(result.getLuceneDescription(), "field1:one")__                    assertThat(result.getTime(), greaterThan(0L))__                    assertNotNull(result.getTimeBreakdown())__                }__                CollectorResult result = searchProfiles.getCollectorResult()__                assertThat(result.getName(), not(isEmptyOrNullString()))__                assertThat(result.getTime(), greaterThan(0L))__            }_        }_    };this,test,verifies,that,the,output,is,reasonable,for,a,simple,non,nested,query;public,void,test,simple,match,throws,exception,create,index,test,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,index,random,true,docs,ensure,green,query,builder,q,query,builders,match,query,field1,one,search,response,resp,client,prepare,search,set,query,q,set,profile,true,set,search,type,search,type,execute,action,get,map,string,profile,shard,result,p,resp,get,profile,results,assert,not,null,p,assert,that,profile,response,should,not,be,an,empty,array,resp,get,profile,results,size,not,0,for,map,entry,string,profile,shard,result,shard,result,resp,get,profile,results,entry,set,for,query,profile,shard,result,search,profiles,shard,result,get,value,get,query,profile,results,for,profile,result,result,search,profiles,get,query,results,assert,equals,result,get,query,name,term,query,assert,equals,result,get,lucene,description,field1,one,assert,that,result,get,time,greater,than,0l,assert,not,null,result,get,time,breakdown,collector,result,result,search,profiles,get,collector,result,assert,that,result,get,name,not,is,empty,or,null,string,assert,that,result,get,time,greater,than,0l
QueryProfilerIT -> public void testSimpleMatch() throws Exception;1533063033;This test verifies that the output is reasonable for a simple, non-nested query;public void testSimpleMatch() throws Exception {_        createIndex("test")__        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        indexRandom(true, docs)__        ensureGreen()___        QueryBuilder q = QueryBuilders.matchQuery("field1", "one")___        SearchResponse resp = client().prepareSearch()_                .setQuery(q)_                .setProfile(true)_                .setSearchType(SearchType.QUERY_THEN_FETCH)_                .execute().actionGet()___        Map<String, ProfileShardResult> p = resp.getProfileResults()__        assertNotNull(p)__        assertThat("Profile response should not be an empty array", resp.getProfileResults().size(), not(0))___        for (Map.Entry<String, ProfileShardResult> shardResult : resp.getProfileResults().entrySet()) {_            for (QueryProfileShardResult searchProfiles : shardResult.getValue().getQueryProfileResults()) {_                for (ProfileResult result : searchProfiles.getQueryResults()) {_                    assertEquals(result.getQueryName(), "TermQuery")__                    assertEquals(result.getLuceneDescription(), "field1:one")__                    assertThat(result.getTime(), greaterThan(0L))__                    assertNotNull(result.getTimeBreakdown())__                }__                CollectorResult result = searchProfiles.getCollectorResult()__                assertThat(result.getName(), not(isEmptyOrNullString()))__                assertThat(result.getTime(), greaterThan(0L))__            }_        }_    };this,test,verifies,that,the,output,is,reasonable,for,a,simple,non,nested,query;public,void,test,simple,match,throws,exception,create,index,test,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,index,random,true,docs,ensure,green,query,builder,q,query,builders,match,query,field1,one,search,response,resp,client,prepare,search,set,query,q,set,profile,true,set,search,type,search,type,execute,action,get,map,string,profile,shard,result,p,resp,get,profile,results,assert,not,null,p,assert,that,profile,response,should,not,be,an,empty,array,resp,get,profile,results,size,not,0,for,map,entry,string,profile,shard,result,shard,result,resp,get,profile,results,entry,set,for,query,profile,shard,result,search,profiles,shard,result,get,value,get,query,profile,results,for,profile,result,result,search,profiles,get,query,results,assert,equals,result,get,query,name,term,query,assert,equals,result,get,lucene,description,field1,one,assert,that,result,get,time,greater,than,0l,assert,not,null,result,get,time,breakdown,collector,result,result,search,profiles,get,collector,result,assert,that,result,get,name,not,is,empty,or,null,string,assert,that,result,get,time,greater,than,0l
QueryProfilerIT -> public void testSimpleMatch() throws Exception;1533295538;This test verifies that the output is reasonable for a simple, non-nested query;public void testSimpleMatch() throws Exception {_        createIndex("test")__        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        indexRandom(true, docs)__        ensureGreen()___        QueryBuilder q = QueryBuilders.matchQuery("field1", "one")___        SearchResponse resp = client().prepareSearch()_                .setQuery(q)_                .setProfile(true)_                .setSearchType(SearchType.QUERY_THEN_FETCH)_                .execute().actionGet()___        Map<String, ProfileShardResult> p = resp.getProfileResults()__        assertNotNull(p)__        assertThat("Profile response should not be an empty array", resp.getProfileResults().size(), not(0))___        for (Map.Entry<String, ProfileShardResult> shardResult : resp.getProfileResults().entrySet()) {_            for (QueryProfileShardResult searchProfiles : shardResult.getValue().getQueryProfileResults()) {_                for (ProfileResult result : searchProfiles.getQueryResults()) {_                    assertEquals(result.getQueryName(), "TermQuery")__                    assertEquals(result.getLuceneDescription(), "field1:one")__                    assertThat(result.getTime(), greaterThan(0L))__                    assertNotNull(result.getTimeBreakdown())__                }__                CollectorResult result = searchProfiles.getCollectorResult()__                assertThat(result.getName(), not(isEmptyOrNullString()))__                assertThat(result.getTime(), greaterThan(0L))__            }_        }_    };this,test,verifies,that,the,output,is,reasonable,for,a,simple,non,nested,query;public,void,test,simple,match,throws,exception,create,index,test,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,index,random,true,docs,ensure,green,query,builder,q,query,builders,match,query,field1,one,search,response,resp,client,prepare,search,set,query,q,set,profile,true,set,search,type,search,type,execute,action,get,map,string,profile,shard,result,p,resp,get,profile,results,assert,not,null,p,assert,that,profile,response,should,not,be,an,empty,array,resp,get,profile,results,size,not,0,for,map,entry,string,profile,shard,result,shard,result,resp,get,profile,results,entry,set,for,query,profile,shard,result,search,profiles,shard,result,get,value,get,query,profile,results,for,profile,result,result,search,profiles,get,query,results,assert,equals,result,get,query,name,term,query,assert,equals,result,get,lucene,description,field1,one,assert,that,result,get,time,greater,than,0l,assert,not,null,result,get,time,breakdown,collector,result,result,search,profiles,get,collector,result,assert,that,result,get,name,not,is,empty,or,null,string,assert,that,result,get,time,greater,than,0l
QueryProfilerIT -> public void testSimpleMatch() throws Exception;1541156195;This test verifies that the output is reasonable for a simple, non-nested query;public void testSimpleMatch() throws Exception {_        createIndex("test")__        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        indexRandom(true, docs)__        ensureGreen()___        QueryBuilder q = QueryBuilders.matchQuery("field1", "one")___        SearchResponse resp = client().prepareSearch()_                .setQuery(q)_                .setProfile(true)_                .setSearchType(SearchType.QUERY_THEN_FETCH)_                .execute().actionGet()___        Map<String, ProfileShardResult> p = resp.getProfileResults()__        assertNotNull(p)__        assertThat("Profile response should not be an empty array", resp.getProfileResults().size(), not(0))___        for (Map.Entry<String, ProfileShardResult> shardResult : resp.getProfileResults().entrySet()) {_            for (QueryProfileShardResult searchProfiles : shardResult.getValue().getQueryProfileResults()) {_                for (ProfileResult result : searchProfiles.getQueryResults()) {_                    assertEquals(result.getQueryName(), "TermQuery")__                    assertEquals(result.getLuceneDescription(), "field1:one")__                    assertThat(result.getTime(), greaterThan(0L))__                    assertNotNull(result.getTimeBreakdown())__                }__                CollectorResult result = searchProfiles.getCollectorResult()__                assertThat(result.getName(), not(isEmptyOrNullString()))__                assertThat(result.getTime(), greaterThan(0L))__            }_        }_    };this,test,verifies,that,the,output,is,reasonable,for,a,simple,non,nested,query;public,void,test,simple,match,throws,exception,create,index,test,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,index,random,true,docs,ensure,green,query,builder,q,query,builders,match,query,field1,one,search,response,resp,client,prepare,search,set,query,q,set,profile,true,set,search,type,search,type,execute,action,get,map,string,profile,shard,result,p,resp,get,profile,results,assert,not,null,p,assert,that,profile,response,should,not,be,an,empty,array,resp,get,profile,results,size,not,0,for,map,entry,string,profile,shard,result,shard,result,resp,get,profile,results,entry,set,for,query,profile,shard,result,search,profiles,shard,result,get,value,get,query,profile,results,for,profile,result,result,search,profiles,get,query,results,assert,equals,result,get,query,name,term,query,assert,equals,result,get,lucene,description,field1,one,assert,that,result,get,time,greater,than,0l,assert,not,null,result,get,time,breakdown,collector,result,result,search,profiles,get,collector,result,assert,that,result,get,name,not,is,empty,or,null,string,assert,that,result,get,time,greater,than,0l
QueryProfilerIT -> public void testSimpleMatch() throws Exception;1544035746;This test verifies that the output is reasonable for a simple, non-nested query;public void testSimpleMatch() throws Exception {_        createIndex("test")__        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        indexRandom(true, docs)__        ensureGreen()___        QueryBuilder q = QueryBuilders.matchQuery("field1", "one")___        SearchResponse resp = client().prepareSearch()_                .setQuery(q)_                .setProfile(true)_                .setSearchType(SearchType.QUERY_THEN_FETCH)_                .execute().actionGet()___        Map<String, ProfileShardResult> p = resp.getProfileResults()__        assertNotNull(p)__        assertThat("Profile response should not be an empty array", resp.getProfileResults().size(), not(0))___        for (Map.Entry<String, ProfileShardResult> shardResult : resp.getProfileResults().entrySet()) {_            for (QueryProfileShardResult searchProfiles : shardResult.getValue().getQueryProfileResults()) {_                for (ProfileResult result : searchProfiles.getQueryResults()) {_                    assertEquals(result.getQueryName(), "TermQuery")__                    assertEquals(result.getLuceneDescription(), "field1:one")__                    assertThat(result.getTime(), greaterThan(0L))__                    assertNotNull(result.getTimeBreakdown())__                }__                CollectorResult result = searchProfiles.getCollectorResult()__                assertThat(result.getName(), not(isEmptyOrNullString()))__                assertThat(result.getTime(), greaterThan(0L))__            }_        }_    };this,test,verifies,that,the,output,is,reasonable,for,a,simple,non,nested,query;public,void,test,simple,match,throws,exception,create,index,test,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,index,random,true,docs,ensure,green,query,builder,q,query,builders,match,query,field1,one,search,response,resp,client,prepare,search,set,query,q,set,profile,true,set,search,type,search,type,execute,action,get,map,string,profile,shard,result,p,resp,get,profile,results,assert,not,null,p,assert,that,profile,response,should,not,be,an,empty,array,resp,get,profile,results,size,not,0,for,map,entry,string,profile,shard,result,shard,result,resp,get,profile,results,entry,set,for,query,profile,shard,result,search,profiles,shard,result,get,value,get,query,profile,results,for,profile,result,result,search,profiles,get,query,results,assert,equals,result,get,query,name,term,query,assert,equals,result,get,lucene,description,field1,one,assert,that,result,get,time,greater,than,0l,assert,not,null,result,get,time,breakdown,collector,result,result,search,profiles,get,collector,result,assert,that,result,get,name,not,is,empty,or,null,string,assert,that,result,get,time,greater,than,0l
QueryProfilerIT -> public void testSimpleMatch() throws Exception;1544110272;This test verifies that the output is reasonable for a simple, non-nested query;public void testSimpleMatch() throws Exception {_        createIndex("test")__        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        indexRandom(true, docs)__        ensureGreen()___        QueryBuilder q = QueryBuilders.matchQuery("field1", "one")___        SearchResponse resp = client().prepareSearch()_                .setQuery(q)_                .setProfile(true)_                .setSearchType(SearchType.QUERY_THEN_FETCH)_                .get()___        Map<String, ProfileShardResult> p = resp.getProfileResults()__        assertNotNull(p)__        assertThat("Profile response should not be an empty array", resp.getProfileResults().size(), not(0))___        for (Map.Entry<String, ProfileShardResult> shardResult : resp.getProfileResults().entrySet()) {_            for (QueryProfileShardResult searchProfiles : shardResult.getValue().getQueryProfileResults()) {_                for (ProfileResult result : searchProfiles.getQueryResults()) {_                    assertEquals(result.getQueryName(), "TermQuery")__                    assertEquals(result.getLuceneDescription(), "field1:one")__                    assertThat(result.getTime(), greaterThan(0L))__                    assertNotNull(result.getTimeBreakdown())__                }__                CollectorResult result = searchProfiles.getCollectorResult()__                assertThat(result.getName(), not(isEmptyOrNullString()))__                assertThat(result.getTime(), greaterThan(0L))__            }_        }_    };this,test,verifies,that,the,output,is,reasonable,for,a,simple,non,nested,query;public,void,test,simple,match,throws,exception,create,index,test,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,index,random,true,docs,ensure,green,query,builder,q,query,builders,match,query,field1,one,search,response,resp,client,prepare,search,set,query,q,set,profile,true,set,search,type,search,type,get,map,string,profile,shard,result,p,resp,get,profile,results,assert,not,null,p,assert,that,profile,response,should,not,be,an,empty,array,resp,get,profile,results,size,not,0,for,map,entry,string,profile,shard,result,shard,result,resp,get,profile,results,entry,set,for,query,profile,shard,result,search,profiles,shard,result,get,value,get,query,profile,results,for,profile,result,result,search,profiles,get,query,results,assert,equals,result,get,query,name,term,query,assert,equals,result,get,lucene,description,field1,one,assert,that,result,get,time,greater,than,0l,assert,not,null,result,get,time,breakdown,collector,result,result,search,profiles,get,collector,result,assert,that,result,get,name,not,is,empty,or,null,string,assert,that,result,get,time,greater,than,0l
QueryProfilerIT -> public void testSimpleMatch() throws Exception;1548420339;This test verifies that the output is reasonable for a simple, non-nested query;public void testSimpleMatch() throws Exception {_        createIndex("test")__        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        indexRandom(true, docs)__        ensureGreen()___        QueryBuilder q = QueryBuilders.matchQuery("field1", "one")___        SearchResponse resp = client().prepareSearch()_                .setQuery(q)_                .setProfile(true)_                .setSearchType(SearchType.QUERY_THEN_FETCH)_                .get()___        Map<String, ProfileShardResult> p = resp.getProfileResults()__        assertNotNull(p)__        assertThat("Profile response should not be an empty array", resp.getProfileResults().size(), not(0))___        for (Map.Entry<String, ProfileShardResult> shardResult : resp.getProfileResults().entrySet()) {_            for (QueryProfileShardResult searchProfiles : shardResult.getValue().getQueryProfileResults()) {_                for (ProfileResult result : searchProfiles.getQueryResults()) {_                    assertEquals(result.getQueryName(), "TermQuery")__                    assertEquals(result.getLuceneDescription(), "field1:one")__                    assertThat(result.getTime(), greaterThan(0L))__                    assertNotNull(result.getTimeBreakdown())__                }__                CollectorResult result = searchProfiles.getCollectorResult()__                assertThat(result.getName(), not(isEmptyOrNullString()))__                assertThat(result.getTime(), greaterThan(0L))__            }_        }_    };this,test,verifies,that,the,output,is,reasonable,for,a,simple,non,nested,query;public,void,test,simple,match,throws,exception,create,index,test,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,index,random,true,docs,ensure,green,query,builder,q,query,builders,match,query,field1,one,search,response,resp,client,prepare,search,set,query,q,set,profile,true,set,search,type,search,type,get,map,string,profile,shard,result,p,resp,get,profile,results,assert,not,null,p,assert,that,profile,response,should,not,be,an,empty,array,resp,get,profile,results,size,not,0,for,map,entry,string,profile,shard,result,shard,result,resp,get,profile,results,entry,set,for,query,profile,shard,result,search,profiles,shard,result,get,value,get,query,profile,results,for,profile,result,result,search,profiles,get,query,results,assert,equals,result,get,query,name,term,query,assert,equals,result,get,lucene,description,field1,one,assert,that,result,get,time,greater,than,0l,assert,not,null,result,get,time,breakdown,collector,result,result,search,profiles,get,collector,result,assert,that,result,get,name,not,is,empty,or,null,string,assert,that,result,get,time,greater,than,0l
QueryProfilerIT -> public void testSimpleMatch() throws Exception;1549920805;This test verifies that the output is reasonable for a simple, non-nested query;public void testSimpleMatch() throws Exception {_        createIndex("test")__        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        indexRandom(true, docs)__        ensureGreen()___        QueryBuilder q = QueryBuilders.matchQuery("field1", "one")___        SearchResponse resp = client().prepareSearch()_                .setQuery(q)_                .setProfile(true)_                .setSearchType(SearchType.QUERY_THEN_FETCH)_                .get()___        Map<String, ProfileShardResult> p = resp.getProfileResults()__        assertNotNull(p)__        assertThat("Profile response should not be an empty array", resp.getProfileResults().size(), not(0))___        for (Map.Entry<String, ProfileShardResult> shardResult : resp.getProfileResults().entrySet()) {_            for (QueryProfileShardResult searchProfiles : shardResult.getValue().getQueryProfileResults()) {_                for (ProfileResult result : searchProfiles.getQueryResults()) {_                    assertEquals(result.getQueryName(), "TermQuery")__                    assertEquals(result.getLuceneDescription(), "field1:one")__                    assertThat(result.getTime(), greaterThan(0L))__                    assertNotNull(result.getTimeBreakdown())__                }__                CollectorResult result = searchProfiles.getCollectorResult()__                assertThat(result.getName(), not(isEmptyOrNullString()))__                assertThat(result.getTime(), greaterThan(0L))__            }_        }_    };this,test,verifies,that,the,output,is,reasonable,for,a,simple,non,nested,query;public,void,test,simple,match,throws,exception,create,index,test,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,index,random,true,docs,ensure,green,query,builder,q,query,builders,match,query,field1,one,search,response,resp,client,prepare,search,set,query,q,set,profile,true,set,search,type,search,type,get,map,string,profile,shard,result,p,resp,get,profile,results,assert,not,null,p,assert,that,profile,response,should,not,be,an,empty,array,resp,get,profile,results,size,not,0,for,map,entry,string,profile,shard,result,shard,result,resp,get,profile,results,entry,set,for,query,profile,shard,result,search,profiles,shard,result,get,value,get,query,profile,results,for,profile,result,result,search,profiles,get,query,results,assert,equals,result,get,query,name,term,query,assert,equals,result,get,lucene,description,field1,one,assert,that,result,get,time,greater,than,0l,assert,not,null,result,get,time,breakdown,collector,result,result,search,profiles,get,collector,result,assert,that,result,get,name,not,is,empty,or,null,string,assert,that,result,get,time,greater,than,0l
QueryProfilerIT -> public void testEmptyBool() throws Exception;1524684173;Tests a boolean query with no children clauses;public void testEmptyBool() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        indexRandom(true, docs)___        refresh()___        QueryBuilder q = QueryBuilders.boolQuery()__        logger.info("Query: {}", q)___        SearchResponse resp = client().prepareSearch()_                .setQuery(q)_                .setProfile(true)_                .setSearchType(SearchType.QUERY_THEN_FETCH)_                .execute().actionGet()___        assertNotNull("Profile response element should not be null", resp.getProfileResults())__        assertThat("Profile response should not be an empty array", resp.getProfileResults().size(), not(0))___        for (Map.Entry<String, ProfileShardResult> shardResult : resp.getProfileResults().entrySet()) {_            for (QueryProfileShardResult searchProfiles : shardResult.getValue().getQueryProfileResults()) {_                for (ProfileResult result : searchProfiles.getQueryResults()) {_                    assertNotNull(result.getQueryName())__                    assertNotNull(result.getLuceneDescription())__                    assertThat(result.getTime(), greaterThan(0L))__                    assertNotNull(result.getTimeBreakdown())__                }__                CollectorResult result = searchProfiles.getCollectorResult()__                assertThat(result.getName(), not(isEmptyOrNullString()))__                assertThat(result.getTime(), greaterThan(0L))__            }_        }_    };tests,a,boolean,query,with,no,children,clauses;public,void,test,empty,bool,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,index,random,true,docs,refresh,query,builder,q,query,builders,bool,query,logger,info,query,q,search,response,resp,client,prepare,search,set,query,q,set,profile,true,set,search,type,search,type,execute,action,get,assert,not,null,profile,response,element,should,not,be,null,resp,get,profile,results,assert,that,profile,response,should,not,be,an,empty,array,resp,get,profile,results,size,not,0,for,map,entry,string,profile,shard,result,shard,result,resp,get,profile,results,entry,set,for,query,profile,shard,result,search,profiles,shard,result,get,value,get,query,profile,results,for,profile,result,result,search,profiles,get,query,results,assert,not,null,result,get,query,name,assert,not,null,result,get,lucene,description,assert,that,result,get,time,greater,than,0l,assert,not,null,result,get,time,breakdown,collector,result,result,search,profiles,get,collector,result,assert,that,result,get,name,not,is,empty,or,null,string,assert,that,result,get,time,greater,than,0l
QueryProfilerIT -> public void testEmptyBool() throws Exception;1533063033;Tests a boolean query with no children clauses;public void testEmptyBool() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        indexRandom(true, docs)___        refresh()___        QueryBuilder q = QueryBuilders.boolQuery()__        logger.info("Query: {}", q)___        SearchResponse resp = client().prepareSearch()_                .setQuery(q)_                .setProfile(true)_                .setSearchType(SearchType.QUERY_THEN_FETCH)_                .execute().actionGet()___        assertNotNull("Profile response element should not be null", resp.getProfileResults())__        assertThat("Profile response should not be an empty array", resp.getProfileResults().size(), not(0))___        for (Map.Entry<String, ProfileShardResult> shardResult : resp.getProfileResults().entrySet()) {_            for (QueryProfileShardResult searchProfiles : shardResult.getValue().getQueryProfileResults()) {_                for (ProfileResult result : searchProfiles.getQueryResults()) {_                    assertNotNull(result.getQueryName())__                    assertNotNull(result.getLuceneDescription())__                    assertThat(result.getTime(), greaterThan(0L))__                    assertNotNull(result.getTimeBreakdown())__                }__                CollectorResult result = searchProfiles.getCollectorResult()__                assertThat(result.getName(), not(isEmptyOrNullString()))__                assertThat(result.getTime(), greaterThan(0L))__            }_        }_    };tests,a,boolean,query,with,no,children,clauses;public,void,test,empty,bool,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,index,random,true,docs,refresh,query,builder,q,query,builders,bool,query,logger,info,query,q,search,response,resp,client,prepare,search,set,query,q,set,profile,true,set,search,type,search,type,execute,action,get,assert,not,null,profile,response,element,should,not,be,null,resp,get,profile,results,assert,that,profile,response,should,not,be,an,empty,array,resp,get,profile,results,size,not,0,for,map,entry,string,profile,shard,result,shard,result,resp,get,profile,results,entry,set,for,query,profile,shard,result,search,profiles,shard,result,get,value,get,query,profile,results,for,profile,result,result,search,profiles,get,query,results,assert,not,null,result,get,query,name,assert,not,null,result,get,lucene,description,assert,that,result,get,time,greater,than,0l,assert,not,null,result,get,time,breakdown,collector,result,result,search,profiles,get,collector,result,assert,that,result,get,name,not,is,empty,or,null,string,assert,that,result,get,time,greater,than,0l
QueryProfilerIT -> public void testEmptyBool() throws Exception;1533295538;Tests a boolean query with no children clauses;public void testEmptyBool() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        indexRandom(true, docs)___        refresh()___        QueryBuilder q = QueryBuilders.boolQuery()__        logger.info("Query: {}", q)___        SearchResponse resp = client().prepareSearch()_                .setQuery(q)_                .setProfile(true)_                .setSearchType(SearchType.QUERY_THEN_FETCH)_                .execute().actionGet()___        assertNotNull("Profile response element should not be null", resp.getProfileResults())__        assertThat("Profile response should not be an empty array", resp.getProfileResults().size(), not(0))___        for (Map.Entry<String, ProfileShardResult> shardResult : resp.getProfileResults().entrySet()) {_            for (QueryProfileShardResult searchProfiles : shardResult.getValue().getQueryProfileResults()) {_                for (ProfileResult result : searchProfiles.getQueryResults()) {_                    assertNotNull(result.getQueryName())__                    assertNotNull(result.getLuceneDescription())__                    assertThat(result.getTime(), greaterThan(0L))__                    assertNotNull(result.getTimeBreakdown())__                }__                CollectorResult result = searchProfiles.getCollectorResult()__                assertThat(result.getName(), not(isEmptyOrNullString()))__                assertThat(result.getTime(), greaterThan(0L))__            }_        }_    };tests,a,boolean,query,with,no,children,clauses;public,void,test,empty,bool,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,index,random,true,docs,refresh,query,builder,q,query,builders,bool,query,logger,info,query,q,search,response,resp,client,prepare,search,set,query,q,set,profile,true,set,search,type,search,type,execute,action,get,assert,not,null,profile,response,element,should,not,be,null,resp,get,profile,results,assert,that,profile,response,should,not,be,an,empty,array,resp,get,profile,results,size,not,0,for,map,entry,string,profile,shard,result,shard,result,resp,get,profile,results,entry,set,for,query,profile,shard,result,search,profiles,shard,result,get,value,get,query,profile,results,for,profile,result,result,search,profiles,get,query,results,assert,not,null,result,get,query,name,assert,not,null,result,get,lucene,description,assert,that,result,get,time,greater,than,0l,assert,not,null,result,get,time,breakdown,collector,result,result,search,profiles,get,collector,result,assert,that,result,get,name,not,is,empty,or,null,string,assert,that,result,get,time,greater,than,0l
QueryProfilerIT -> public void testEmptyBool() throws Exception;1541156195;Tests a boolean query with no children clauses;public void testEmptyBool() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        indexRandom(true, docs)___        refresh()___        QueryBuilder q = QueryBuilders.boolQuery()__        logger.info("Query: {}", q)___        SearchResponse resp = client().prepareSearch()_                .setQuery(q)_                .setProfile(true)_                .setSearchType(SearchType.QUERY_THEN_FETCH)_                .execute().actionGet()___        assertNotNull("Profile response element should not be null", resp.getProfileResults())__        assertThat("Profile response should not be an empty array", resp.getProfileResults().size(), not(0))___        for (Map.Entry<String, ProfileShardResult> shardResult : resp.getProfileResults().entrySet()) {_            for (QueryProfileShardResult searchProfiles : shardResult.getValue().getQueryProfileResults()) {_                for (ProfileResult result : searchProfiles.getQueryResults()) {_                    assertNotNull(result.getQueryName())__                    assertNotNull(result.getLuceneDescription())__                    assertThat(result.getTime(), greaterThan(0L))__                    assertNotNull(result.getTimeBreakdown())__                }__                CollectorResult result = searchProfiles.getCollectorResult()__                assertThat(result.getName(), not(isEmptyOrNullString()))__                assertThat(result.getTime(), greaterThan(0L))__            }_        }_    };tests,a,boolean,query,with,no,children,clauses;public,void,test,empty,bool,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,index,random,true,docs,refresh,query,builder,q,query,builders,bool,query,logger,info,query,q,search,response,resp,client,prepare,search,set,query,q,set,profile,true,set,search,type,search,type,execute,action,get,assert,not,null,profile,response,element,should,not,be,null,resp,get,profile,results,assert,that,profile,response,should,not,be,an,empty,array,resp,get,profile,results,size,not,0,for,map,entry,string,profile,shard,result,shard,result,resp,get,profile,results,entry,set,for,query,profile,shard,result,search,profiles,shard,result,get,value,get,query,profile,results,for,profile,result,result,search,profiles,get,query,results,assert,not,null,result,get,query,name,assert,not,null,result,get,lucene,description,assert,that,result,get,time,greater,than,0l,assert,not,null,result,get,time,breakdown,collector,result,result,search,profiles,get,collector,result,assert,that,result,get,name,not,is,empty,or,null,string,assert,that,result,get,time,greater,than,0l
QueryProfilerIT -> public void testEmptyBool() throws Exception;1544035746;Tests a boolean query with no children clauses;public void testEmptyBool() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        indexRandom(true, docs)___        refresh()___        QueryBuilder q = QueryBuilders.boolQuery()__        logger.info("Query: {}", q)___        SearchResponse resp = client().prepareSearch()_                .setQuery(q)_                .setProfile(true)_                .setSearchType(SearchType.QUERY_THEN_FETCH)_                .execute().actionGet()___        assertNotNull("Profile response element should not be null", resp.getProfileResults())__        assertThat("Profile response should not be an empty array", resp.getProfileResults().size(), not(0))___        for (Map.Entry<String, ProfileShardResult> shardResult : resp.getProfileResults().entrySet()) {_            for (QueryProfileShardResult searchProfiles : shardResult.getValue().getQueryProfileResults()) {_                for (ProfileResult result : searchProfiles.getQueryResults()) {_                    assertNotNull(result.getQueryName())__                    assertNotNull(result.getLuceneDescription())__                    assertThat(result.getTime(), greaterThan(0L))__                    assertNotNull(result.getTimeBreakdown())__                }__                CollectorResult result = searchProfiles.getCollectorResult()__                assertThat(result.getName(), not(isEmptyOrNullString()))__                assertThat(result.getTime(), greaterThan(0L))__            }_        }_    };tests,a,boolean,query,with,no,children,clauses;public,void,test,empty,bool,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,index,random,true,docs,refresh,query,builder,q,query,builders,bool,query,logger,info,query,q,search,response,resp,client,prepare,search,set,query,q,set,profile,true,set,search,type,search,type,execute,action,get,assert,not,null,profile,response,element,should,not,be,null,resp,get,profile,results,assert,that,profile,response,should,not,be,an,empty,array,resp,get,profile,results,size,not,0,for,map,entry,string,profile,shard,result,shard,result,resp,get,profile,results,entry,set,for,query,profile,shard,result,search,profiles,shard,result,get,value,get,query,profile,results,for,profile,result,result,search,profiles,get,query,results,assert,not,null,result,get,query,name,assert,not,null,result,get,lucene,description,assert,that,result,get,time,greater,than,0l,assert,not,null,result,get,time,breakdown,collector,result,result,search,profiles,get,collector,result,assert,that,result,get,name,not,is,empty,or,null,string,assert,that,result,get,time,greater,than,0l
QueryProfilerIT -> public void testEmptyBool() throws Exception;1544110272;Tests a boolean query with no children clauses;public void testEmptyBool() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        indexRandom(true, docs)___        refresh()___        QueryBuilder q = QueryBuilders.boolQuery()__        logger.info("Query: {}", q)___        SearchResponse resp = client().prepareSearch()_                .setQuery(q)_                .setProfile(true)_                .setSearchType(SearchType.QUERY_THEN_FETCH)_                .get()___        assertNotNull("Profile response element should not be null", resp.getProfileResults())__        assertThat("Profile response should not be an empty array", resp.getProfileResults().size(), not(0))___        for (Map.Entry<String, ProfileShardResult> shardResult : resp.getProfileResults().entrySet()) {_            for (QueryProfileShardResult searchProfiles : shardResult.getValue().getQueryProfileResults()) {_                for (ProfileResult result : searchProfiles.getQueryResults()) {_                    assertNotNull(result.getQueryName())__                    assertNotNull(result.getLuceneDescription())__                    assertThat(result.getTime(), greaterThan(0L))__                    assertNotNull(result.getTimeBreakdown())__                }__                CollectorResult result = searchProfiles.getCollectorResult()__                assertThat(result.getName(), not(isEmptyOrNullString()))__                assertThat(result.getTime(), greaterThan(0L))__            }_        }_    };tests,a,boolean,query,with,no,children,clauses;public,void,test,empty,bool,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,index,random,true,docs,refresh,query,builder,q,query,builders,bool,query,logger,info,query,q,search,response,resp,client,prepare,search,set,query,q,set,profile,true,set,search,type,search,type,get,assert,not,null,profile,response,element,should,not,be,null,resp,get,profile,results,assert,that,profile,response,should,not,be,an,empty,array,resp,get,profile,results,size,not,0,for,map,entry,string,profile,shard,result,shard,result,resp,get,profile,results,entry,set,for,query,profile,shard,result,search,profiles,shard,result,get,value,get,query,profile,results,for,profile,result,result,search,profiles,get,query,results,assert,not,null,result,get,query,name,assert,not,null,result,get,lucene,description,assert,that,result,get,time,greater,than,0l,assert,not,null,result,get,time,breakdown,collector,result,result,search,profiles,get,collector,result,assert,that,result,get,name,not,is,empty,or,null,string,assert,that,result,get,time,greater,than,0l
QueryProfilerIT -> public void testEmptyBool() throws Exception;1548420339;Tests a boolean query with no children clauses;public void testEmptyBool() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        indexRandom(true, docs)___        refresh()___        QueryBuilder q = QueryBuilders.boolQuery()__        logger.info("Query: {}", q)___        SearchResponse resp = client().prepareSearch()_                .setQuery(q)_                .setProfile(true)_                .setSearchType(SearchType.QUERY_THEN_FETCH)_                .get()___        assertNotNull("Profile response element should not be null", resp.getProfileResults())__        assertThat("Profile response should not be an empty array", resp.getProfileResults().size(), not(0))___        for (Map.Entry<String, ProfileShardResult> shardResult : resp.getProfileResults().entrySet()) {_            for (QueryProfileShardResult searchProfiles : shardResult.getValue().getQueryProfileResults()) {_                for (ProfileResult result : searchProfiles.getQueryResults()) {_                    assertNotNull(result.getQueryName())__                    assertNotNull(result.getLuceneDescription())__                    assertThat(result.getTime(), greaterThan(0L))__                    assertNotNull(result.getTimeBreakdown())__                }__                CollectorResult result = searchProfiles.getCollectorResult()__                assertThat(result.getName(), not(isEmptyOrNullString()))__                assertThat(result.getTime(), greaterThan(0L))__            }_        }_    };tests,a,boolean,query,with,no,children,clauses;public,void,test,empty,bool,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,index,random,true,docs,refresh,query,builder,q,query,builders,bool,query,logger,info,query,q,search,response,resp,client,prepare,search,set,query,q,set,profile,true,set,search,type,search,type,get,assert,not,null,profile,response,element,should,not,be,null,resp,get,profile,results,assert,that,profile,response,should,not,be,an,empty,array,resp,get,profile,results,size,not,0,for,map,entry,string,profile,shard,result,shard,result,resp,get,profile,results,entry,set,for,query,profile,shard,result,search,profiles,shard,result,get,value,get,query,profile,results,for,profile,result,result,search,profiles,get,query,results,assert,not,null,result,get,query,name,assert,not,null,result,get,lucene,description,assert,that,result,get,time,greater,than,0l,assert,not,null,result,get,time,breakdown,collector,result,result,search,profiles,get,collector,result,assert,that,result,get,name,not,is,empty,or,null,string,assert,that,result,get,time,greater,than,0l
QueryProfilerIT -> public void testEmptyBool() throws Exception;1549920805;Tests a boolean query with no children clauses;public void testEmptyBool() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        indexRandom(true, docs)___        refresh()___        QueryBuilder q = QueryBuilders.boolQuery()__        logger.info("Query: {}", q)___        SearchResponse resp = client().prepareSearch()_                .setQuery(q)_                .setProfile(true)_                .setSearchType(SearchType.QUERY_THEN_FETCH)_                .get()___        assertNotNull("Profile response element should not be null", resp.getProfileResults())__        assertThat("Profile response should not be an empty array", resp.getProfileResults().size(), not(0))___        for (Map.Entry<String, ProfileShardResult> shardResult : resp.getProfileResults().entrySet()) {_            for (QueryProfileShardResult searchProfiles : shardResult.getValue().getQueryProfileResults()) {_                for (ProfileResult result : searchProfiles.getQueryResults()) {_                    assertNotNull(result.getQueryName())__                    assertNotNull(result.getLuceneDescription())__                    assertThat(result.getTime(), greaterThan(0L))__                    assertNotNull(result.getTimeBreakdown())__                }__                CollectorResult result = searchProfiles.getCollectorResult()__                assertThat(result.getName(), not(isEmptyOrNullString()))__                assertThat(result.getTime(), greaterThan(0L))__            }_        }_    };tests,a,boolean,query,with,no,children,clauses;public,void,test,empty,bool,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,index,random,true,docs,refresh,query,builder,q,query,builders,bool,query,logger,info,query,q,search,response,resp,client,prepare,search,set,query,q,set,profile,true,set,search,type,search,type,get,assert,not,null,profile,response,element,should,not,be,null,resp,get,profile,results,assert,that,profile,response,should,not,be,an,empty,array,resp,get,profile,results,size,not,0,for,map,entry,string,profile,shard,result,shard,result,resp,get,profile,results,entry,set,for,query,profile,shard,result,search,profiles,shard,result,get,value,get,query,profile,results,for,profile,result,result,search,profiles,get,query,results,assert,not,null,result,get,query,name,assert,not,null,result,get,lucene,description,assert,that,result,get,time,greater,than,0l,assert,not,null,result,get,time,breakdown,collector,result,result,search,profiles,get,collector,result,assert,that,result,get,name,not,is,empty,or,null,string,assert,that,result,get,time,greater,than,0l
QueryProfilerIT -> @AwaitsFix(bugUrl = "https://issues.apache.org/jira/browse/LUCENE-8658")     public void testProfileQuery() throws Exception;1548420339;This test simply checks to make sure nothing crashes.  Test indexes 100-150 documents,_constructs 20-100 random queries and tries to profile them;@AwaitsFix(bugUrl = "https://issues.apache.org/jira/browse/LUCENE-8658")_    public void testProfileQuery() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        List<String> stringFields = Arrays.asList("field1")__        List<String> numericFields = Arrays.asList("field2")___        indexRandom(true, docs)___        refresh()__        int iters = between(20, 100)__        for (int i = 0_ i < iters_ i++) {_            QueryBuilder q = randomQueryBuilder(stringFields, numericFields, numDocs, 3)__            logger.info("Query: {}", q)___            SearchResponse resp = client().prepareSearch()_                    .setQuery(q)_                    .setTrackTotalHits(true)_                    .setProfile(true)_                    .setSearchType(SearchType.QUERY_THEN_FETCH)_                    .get()___            assertNotNull("Profile response element should not be null", resp.getProfileResults())__            assertThat("Profile response should not be an empty array", resp.getProfileResults().size(), not(0))__            for (Map.Entry<String, ProfileShardResult> shard : resp.getProfileResults().entrySet()) {_                for (QueryProfileShardResult searchProfiles : shard.getValue().getQueryProfileResults()) {_                    for (ProfileResult result : searchProfiles.getQueryResults()) {_                        assertNotNull(result.getQueryName())__                        assertNotNull(result.getLuceneDescription())__                        assertThat(result.getTime(), greaterThan(0L))__                    }__                    CollectorResult result = searchProfiles.getCollectorResult()__                    assertThat(result.getName(), not(isEmptyOrNullString()))__                    assertThat(result.getTime(), greaterThan(0L))__                }_            }__        }_    };this,test,simply,checks,to,make,sure,nothing,crashes,test,indexes,100,150,documents,constructs,20,100,random,queries,and,tries,to,profile,them;awaits,fix,bug,url,https,issues,apache,org,jira,browse,lucene,8658,public,void,test,profile,query,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,list,string,string,fields,arrays,as,list,field1,list,string,numeric,fields,arrays,as,list,field2,index,random,true,docs,refresh,int,iters,between,20,100,for,int,i,0,i,iters,i,query,builder,q,random,query,builder,string,fields,numeric,fields,num,docs,3,logger,info,query,q,search,response,resp,client,prepare,search,set,query,q,set,track,total,hits,true,set,profile,true,set,search,type,search,type,get,assert,not,null,profile,response,element,should,not,be,null,resp,get,profile,results,assert,that,profile,response,should,not,be,an,empty,array,resp,get,profile,results,size,not,0,for,map,entry,string,profile,shard,result,shard,resp,get,profile,results,entry,set,for,query,profile,shard,result,search,profiles,shard,get,value,get,query,profile,results,for,profile,result,result,search,profiles,get,query,results,assert,not,null,result,get,query,name,assert,not,null,result,get,lucene,description,assert,that,result,get,time,greater,than,0l,collector,result,result,search,profiles,get,collector,result,assert,that,result,get,name,not,is,empty,or,null,string,assert,that,result,get,time,greater,than,0l
QueryProfilerIT -> @AwaitsFix(bugUrl = "https://issues.apache.org/jira/browse/LUCENE-8658")     public void testProfileQuery() throws Exception;1549920805;This test simply checks to make sure nothing crashes.  Test indexes 100-150 documents,_constructs 20-100 random queries and tries to profile them;@AwaitsFix(bugUrl = "https://issues.apache.org/jira/browse/LUCENE-8658")_    public void testProfileQuery() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        List<String> stringFields = Arrays.asList("field1")__        List<String> numericFields = Arrays.asList("field2")___        indexRandom(true, docs)___        refresh()__        int iters = between(20, 100)__        for (int i = 0_ i < iters_ i++) {_            QueryBuilder q = randomQueryBuilder(stringFields, numericFields, numDocs, 3)__            logger.info("Query: {}", q)___            SearchResponse resp = client().prepareSearch()_                    .setQuery(q)_                    .setTrackTotalHits(true)_                    .setProfile(true)_                    .setSearchType(SearchType.QUERY_THEN_FETCH)_                    .get()___            assertNotNull("Profile response element should not be null", resp.getProfileResults())__            assertThat("Profile response should not be an empty array", resp.getProfileResults().size(), not(0))__            for (Map.Entry<String, ProfileShardResult> shard : resp.getProfileResults().entrySet()) {_                for (QueryProfileShardResult searchProfiles : shard.getValue().getQueryProfileResults()) {_                    for (ProfileResult result : searchProfiles.getQueryResults()) {_                        assertNotNull(result.getQueryName())__                        assertNotNull(result.getLuceneDescription())__                        assertThat(result.getTime(), greaterThan(0L))__                    }__                    CollectorResult result = searchProfiles.getCollectorResult()__                    assertThat(result.getName(), not(isEmptyOrNullString()))__                    assertThat(result.getTime(), greaterThan(0L))__                }_            }__        }_    };this,test,simply,checks,to,make,sure,nothing,crashes,test,indexes,100,150,documents,constructs,20,100,random,queries,and,tries,to,profile,them;awaits,fix,bug,url,https,issues,apache,org,jira,browse,lucene,8658,public,void,test,profile,query,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,list,string,string,fields,arrays,as,list,field1,list,string,numeric,fields,arrays,as,list,field2,index,random,true,docs,refresh,int,iters,between,20,100,for,int,i,0,i,iters,i,query,builder,q,random,query,builder,string,fields,numeric,fields,num,docs,3,logger,info,query,q,search,response,resp,client,prepare,search,set,query,q,set,track,total,hits,true,set,profile,true,set,search,type,search,type,get,assert,not,null,profile,response,element,should,not,be,null,resp,get,profile,results,assert,that,profile,response,should,not,be,an,empty,array,resp,get,profile,results,size,not,0,for,map,entry,string,profile,shard,result,shard,resp,get,profile,results,entry,set,for,query,profile,shard,result,search,profiles,shard,get,value,get,query,profile,results,for,profile,result,result,search,profiles,get,query,results,assert,not,null,result,get,query,name,assert,not,null,result,get,lucene,description,assert,that,result,get,time,greater,than,0l,collector,result,result,search,profiles,get,collector,result,assert,that,result,get,name,not,is,empty,or,null,string,assert,that,result,get,time,greater,than,0l
QueryProfilerIT -> public void testCollapsingBool() throws Exception;1524684173;Tests a series of three nested boolean queries with a single "leaf" match query._The rewrite process will "collapse" this down to a single bool, so this tests to make sure_nothing catastrophic happens during that fairly substantial rewrite;public void testCollapsingBool() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        indexRandom(true, docs)___        refresh()___        QueryBuilder q = QueryBuilders.boolQuery()_                .must(QueryBuilders.boolQuery().must(QueryBuilders.boolQuery().must(QueryBuilders.matchQuery("field1", "one"))))___        logger.info("Query: {}", q)___        SearchResponse resp = client().prepareSearch()_                .setQuery(q)_                .setProfile(true)_                .setSearchType(SearchType.QUERY_THEN_FETCH)_                .execute().actionGet()___        assertNotNull("Profile response element should not be null", resp.getProfileResults())__        assertThat("Profile response should not be an empty array", resp.getProfileResults().size(), not(0))___        for (Map.Entry<String, ProfileShardResult> shardResult : resp.getProfileResults().entrySet()) {_            for (QueryProfileShardResult searchProfiles : shardResult.getValue().getQueryProfileResults()) {_                for (ProfileResult result : searchProfiles.getQueryResults()) {_                    assertNotNull(result.getQueryName())__                    assertNotNull(result.getLuceneDescription())__                    assertThat(result.getTime(), greaterThan(0L))__                    assertNotNull(result.getTimeBreakdown())__                }__                CollectorResult result = searchProfiles.getCollectorResult()__                assertThat(result.getName(), not(isEmptyOrNullString()))__                assertThat(result.getTime(), greaterThan(0L))__            }_        }_    };tests,a,series,of,three,nested,boolean,queries,with,a,single,leaf,match,query,the,rewrite,process,will,collapse,this,down,to,a,single,bool,so,this,tests,to,make,sure,nothing,catastrophic,happens,during,that,fairly,substantial,rewrite;public,void,test,collapsing,bool,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,index,random,true,docs,refresh,query,builder,q,query,builders,bool,query,must,query,builders,bool,query,must,query,builders,bool,query,must,query,builders,match,query,field1,one,logger,info,query,q,search,response,resp,client,prepare,search,set,query,q,set,profile,true,set,search,type,search,type,execute,action,get,assert,not,null,profile,response,element,should,not,be,null,resp,get,profile,results,assert,that,profile,response,should,not,be,an,empty,array,resp,get,profile,results,size,not,0,for,map,entry,string,profile,shard,result,shard,result,resp,get,profile,results,entry,set,for,query,profile,shard,result,search,profiles,shard,result,get,value,get,query,profile,results,for,profile,result,result,search,profiles,get,query,results,assert,not,null,result,get,query,name,assert,not,null,result,get,lucene,description,assert,that,result,get,time,greater,than,0l,assert,not,null,result,get,time,breakdown,collector,result,result,search,profiles,get,collector,result,assert,that,result,get,name,not,is,empty,or,null,string,assert,that,result,get,time,greater,than,0l
QueryProfilerIT -> public void testCollapsingBool() throws Exception;1533063033;Tests a series of three nested boolean queries with a single "leaf" match query._The rewrite process will "collapse" this down to a single bool, so this tests to make sure_nothing catastrophic happens during that fairly substantial rewrite;public void testCollapsingBool() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        indexRandom(true, docs)___        refresh()___        QueryBuilder q = QueryBuilders.boolQuery()_                .must(QueryBuilders.boolQuery().must(QueryBuilders.boolQuery().must(QueryBuilders.matchQuery("field1", "one"))))___        logger.info("Query: {}", q)___        SearchResponse resp = client().prepareSearch()_                .setQuery(q)_                .setProfile(true)_                .setSearchType(SearchType.QUERY_THEN_FETCH)_                .execute().actionGet()___        assertNotNull("Profile response element should not be null", resp.getProfileResults())__        assertThat("Profile response should not be an empty array", resp.getProfileResults().size(), not(0))___        for (Map.Entry<String, ProfileShardResult> shardResult : resp.getProfileResults().entrySet()) {_            for (QueryProfileShardResult searchProfiles : shardResult.getValue().getQueryProfileResults()) {_                for (ProfileResult result : searchProfiles.getQueryResults()) {_                    assertNotNull(result.getQueryName())__                    assertNotNull(result.getLuceneDescription())__                    assertThat(result.getTime(), greaterThan(0L))__                    assertNotNull(result.getTimeBreakdown())__                }__                CollectorResult result = searchProfiles.getCollectorResult()__                assertThat(result.getName(), not(isEmptyOrNullString()))__                assertThat(result.getTime(), greaterThan(0L))__            }_        }_    };tests,a,series,of,three,nested,boolean,queries,with,a,single,leaf,match,query,the,rewrite,process,will,collapse,this,down,to,a,single,bool,so,this,tests,to,make,sure,nothing,catastrophic,happens,during,that,fairly,substantial,rewrite;public,void,test,collapsing,bool,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,index,random,true,docs,refresh,query,builder,q,query,builders,bool,query,must,query,builders,bool,query,must,query,builders,bool,query,must,query,builders,match,query,field1,one,logger,info,query,q,search,response,resp,client,prepare,search,set,query,q,set,profile,true,set,search,type,search,type,execute,action,get,assert,not,null,profile,response,element,should,not,be,null,resp,get,profile,results,assert,that,profile,response,should,not,be,an,empty,array,resp,get,profile,results,size,not,0,for,map,entry,string,profile,shard,result,shard,result,resp,get,profile,results,entry,set,for,query,profile,shard,result,search,profiles,shard,result,get,value,get,query,profile,results,for,profile,result,result,search,profiles,get,query,results,assert,not,null,result,get,query,name,assert,not,null,result,get,lucene,description,assert,that,result,get,time,greater,than,0l,assert,not,null,result,get,time,breakdown,collector,result,result,search,profiles,get,collector,result,assert,that,result,get,name,not,is,empty,or,null,string,assert,that,result,get,time,greater,than,0l
QueryProfilerIT -> public void testCollapsingBool() throws Exception;1533295538;Tests a series of three nested boolean queries with a single "leaf" match query._The rewrite process will "collapse" this down to a single bool, so this tests to make sure_nothing catastrophic happens during that fairly substantial rewrite;public void testCollapsingBool() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        indexRandom(true, docs)___        refresh()___        QueryBuilder q = QueryBuilders.boolQuery()_                .must(QueryBuilders.boolQuery().must(QueryBuilders.boolQuery().must(QueryBuilders.matchQuery("field1", "one"))))___        logger.info("Query: {}", q)___        SearchResponse resp = client().prepareSearch()_                .setQuery(q)_                .setProfile(true)_                .setSearchType(SearchType.QUERY_THEN_FETCH)_                .execute().actionGet()___        assertNotNull("Profile response element should not be null", resp.getProfileResults())__        assertThat("Profile response should not be an empty array", resp.getProfileResults().size(), not(0))___        for (Map.Entry<String, ProfileShardResult> shardResult : resp.getProfileResults().entrySet()) {_            for (QueryProfileShardResult searchProfiles : shardResult.getValue().getQueryProfileResults()) {_                for (ProfileResult result : searchProfiles.getQueryResults()) {_                    assertNotNull(result.getQueryName())__                    assertNotNull(result.getLuceneDescription())__                    assertThat(result.getTime(), greaterThan(0L))__                    assertNotNull(result.getTimeBreakdown())__                }__                CollectorResult result = searchProfiles.getCollectorResult()__                assertThat(result.getName(), not(isEmptyOrNullString()))__                assertThat(result.getTime(), greaterThan(0L))__            }_        }_    };tests,a,series,of,three,nested,boolean,queries,with,a,single,leaf,match,query,the,rewrite,process,will,collapse,this,down,to,a,single,bool,so,this,tests,to,make,sure,nothing,catastrophic,happens,during,that,fairly,substantial,rewrite;public,void,test,collapsing,bool,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,index,random,true,docs,refresh,query,builder,q,query,builders,bool,query,must,query,builders,bool,query,must,query,builders,bool,query,must,query,builders,match,query,field1,one,logger,info,query,q,search,response,resp,client,prepare,search,set,query,q,set,profile,true,set,search,type,search,type,execute,action,get,assert,not,null,profile,response,element,should,not,be,null,resp,get,profile,results,assert,that,profile,response,should,not,be,an,empty,array,resp,get,profile,results,size,not,0,for,map,entry,string,profile,shard,result,shard,result,resp,get,profile,results,entry,set,for,query,profile,shard,result,search,profiles,shard,result,get,value,get,query,profile,results,for,profile,result,result,search,profiles,get,query,results,assert,not,null,result,get,query,name,assert,not,null,result,get,lucene,description,assert,that,result,get,time,greater,than,0l,assert,not,null,result,get,time,breakdown,collector,result,result,search,profiles,get,collector,result,assert,that,result,get,name,not,is,empty,or,null,string,assert,that,result,get,time,greater,than,0l
QueryProfilerIT -> public void testCollapsingBool() throws Exception;1541156195;Tests a series of three nested boolean queries with a single "leaf" match query._The rewrite process will "collapse" this down to a single bool, so this tests to make sure_nothing catastrophic happens during that fairly substantial rewrite;public void testCollapsingBool() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        indexRandom(true, docs)___        refresh()___        QueryBuilder q = QueryBuilders.boolQuery()_                .must(QueryBuilders.boolQuery().must(QueryBuilders.boolQuery().must(QueryBuilders.matchQuery("field1", "one"))))___        logger.info("Query: {}", q)___        SearchResponse resp = client().prepareSearch()_                .setQuery(q)_                .setProfile(true)_                .setSearchType(SearchType.QUERY_THEN_FETCH)_                .execute().actionGet()___        assertNotNull("Profile response element should not be null", resp.getProfileResults())__        assertThat("Profile response should not be an empty array", resp.getProfileResults().size(), not(0))___        for (Map.Entry<String, ProfileShardResult> shardResult : resp.getProfileResults().entrySet()) {_            for (QueryProfileShardResult searchProfiles : shardResult.getValue().getQueryProfileResults()) {_                for (ProfileResult result : searchProfiles.getQueryResults()) {_                    assertNotNull(result.getQueryName())__                    assertNotNull(result.getLuceneDescription())__                    assertThat(result.getTime(), greaterThan(0L))__                    assertNotNull(result.getTimeBreakdown())__                }__                CollectorResult result = searchProfiles.getCollectorResult()__                assertThat(result.getName(), not(isEmptyOrNullString()))__                assertThat(result.getTime(), greaterThan(0L))__            }_        }_    };tests,a,series,of,three,nested,boolean,queries,with,a,single,leaf,match,query,the,rewrite,process,will,collapse,this,down,to,a,single,bool,so,this,tests,to,make,sure,nothing,catastrophic,happens,during,that,fairly,substantial,rewrite;public,void,test,collapsing,bool,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,index,random,true,docs,refresh,query,builder,q,query,builders,bool,query,must,query,builders,bool,query,must,query,builders,bool,query,must,query,builders,match,query,field1,one,logger,info,query,q,search,response,resp,client,prepare,search,set,query,q,set,profile,true,set,search,type,search,type,execute,action,get,assert,not,null,profile,response,element,should,not,be,null,resp,get,profile,results,assert,that,profile,response,should,not,be,an,empty,array,resp,get,profile,results,size,not,0,for,map,entry,string,profile,shard,result,shard,result,resp,get,profile,results,entry,set,for,query,profile,shard,result,search,profiles,shard,result,get,value,get,query,profile,results,for,profile,result,result,search,profiles,get,query,results,assert,not,null,result,get,query,name,assert,not,null,result,get,lucene,description,assert,that,result,get,time,greater,than,0l,assert,not,null,result,get,time,breakdown,collector,result,result,search,profiles,get,collector,result,assert,that,result,get,name,not,is,empty,or,null,string,assert,that,result,get,time,greater,than,0l
QueryProfilerIT -> public void testCollapsingBool() throws Exception;1544035746;Tests a series of three nested boolean queries with a single "leaf" match query._The rewrite process will "collapse" this down to a single bool, so this tests to make sure_nothing catastrophic happens during that fairly substantial rewrite;public void testCollapsingBool() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        indexRandom(true, docs)___        refresh()___        QueryBuilder q = QueryBuilders.boolQuery()_                .must(QueryBuilders.boolQuery().must(QueryBuilders.boolQuery().must(QueryBuilders.matchQuery("field1", "one"))))___        logger.info("Query: {}", q)___        SearchResponse resp = client().prepareSearch()_                .setQuery(q)_                .setProfile(true)_                .setSearchType(SearchType.QUERY_THEN_FETCH)_                .execute().actionGet()___        assertNotNull("Profile response element should not be null", resp.getProfileResults())__        assertThat("Profile response should not be an empty array", resp.getProfileResults().size(), not(0))___        for (Map.Entry<String, ProfileShardResult> shardResult : resp.getProfileResults().entrySet()) {_            for (QueryProfileShardResult searchProfiles : shardResult.getValue().getQueryProfileResults()) {_                for (ProfileResult result : searchProfiles.getQueryResults()) {_                    assertNotNull(result.getQueryName())__                    assertNotNull(result.getLuceneDescription())__                    assertThat(result.getTime(), greaterThan(0L))__                    assertNotNull(result.getTimeBreakdown())__                }__                CollectorResult result = searchProfiles.getCollectorResult()__                assertThat(result.getName(), not(isEmptyOrNullString()))__                assertThat(result.getTime(), greaterThan(0L))__            }_        }_    };tests,a,series,of,three,nested,boolean,queries,with,a,single,leaf,match,query,the,rewrite,process,will,collapse,this,down,to,a,single,bool,so,this,tests,to,make,sure,nothing,catastrophic,happens,during,that,fairly,substantial,rewrite;public,void,test,collapsing,bool,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,index,random,true,docs,refresh,query,builder,q,query,builders,bool,query,must,query,builders,bool,query,must,query,builders,bool,query,must,query,builders,match,query,field1,one,logger,info,query,q,search,response,resp,client,prepare,search,set,query,q,set,profile,true,set,search,type,search,type,execute,action,get,assert,not,null,profile,response,element,should,not,be,null,resp,get,profile,results,assert,that,profile,response,should,not,be,an,empty,array,resp,get,profile,results,size,not,0,for,map,entry,string,profile,shard,result,shard,result,resp,get,profile,results,entry,set,for,query,profile,shard,result,search,profiles,shard,result,get,value,get,query,profile,results,for,profile,result,result,search,profiles,get,query,results,assert,not,null,result,get,query,name,assert,not,null,result,get,lucene,description,assert,that,result,get,time,greater,than,0l,assert,not,null,result,get,time,breakdown,collector,result,result,search,profiles,get,collector,result,assert,that,result,get,name,not,is,empty,or,null,string,assert,that,result,get,time,greater,than,0l
QueryProfilerIT -> public void testCollapsingBool() throws Exception;1544110272;Tests a series of three nested boolean queries with a single "leaf" match query._The rewrite process will "collapse" this down to a single bool, so this tests to make sure_nothing catastrophic happens during that fairly substantial rewrite;public void testCollapsingBool() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        indexRandom(true, docs)___        refresh()___        QueryBuilder q = QueryBuilders.boolQuery()_                .must(QueryBuilders.boolQuery().must(QueryBuilders.boolQuery().must(QueryBuilders.matchQuery("field1", "one"))))___        logger.info("Query: {}", q)___        SearchResponse resp = client().prepareSearch()_                .setQuery(q)_                .setProfile(true)_                .setSearchType(SearchType.QUERY_THEN_FETCH)_                .get()___        assertNotNull("Profile response element should not be null", resp.getProfileResults())__        assertThat("Profile response should not be an empty array", resp.getProfileResults().size(), not(0))___        for (Map.Entry<String, ProfileShardResult> shardResult : resp.getProfileResults().entrySet()) {_            for (QueryProfileShardResult searchProfiles : shardResult.getValue().getQueryProfileResults()) {_                for (ProfileResult result : searchProfiles.getQueryResults()) {_                    assertNotNull(result.getQueryName())__                    assertNotNull(result.getLuceneDescription())__                    assertThat(result.getTime(), greaterThan(0L))__                    assertNotNull(result.getTimeBreakdown())__                }__                CollectorResult result = searchProfiles.getCollectorResult()__                assertThat(result.getName(), not(isEmptyOrNullString()))__                assertThat(result.getTime(), greaterThan(0L))__            }_        }_    };tests,a,series,of,three,nested,boolean,queries,with,a,single,leaf,match,query,the,rewrite,process,will,collapse,this,down,to,a,single,bool,so,this,tests,to,make,sure,nothing,catastrophic,happens,during,that,fairly,substantial,rewrite;public,void,test,collapsing,bool,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,index,random,true,docs,refresh,query,builder,q,query,builders,bool,query,must,query,builders,bool,query,must,query,builders,bool,query,must,query,builders,match,query,field1,one,logger,info,query,q,search,response,resp,client,prepare,search,set,query,q,set,profile,true,set,search,type,search,type,get,assert,not,null,profile,response,element,should,not,be,null,resp,get,profile,results,assert,that,profile,response,should,not,be,an,empty,array,resp,get,profile,results,size,not,0,for,map,entry,string,profile,shard,result,shard,result,resp,get,profile,results,entry,set,for,query,profile,shard,result,search,profiles,shard,result,get,value,get,query,profile,results,for,profile,result,result,search,profiles,get,query,results,assert,not,null,result,get,query,name,assert,not,null,result,get,lucene,description,assert,that,result,get,time,greater,than,0l,assert,not,null,result,get,time,breakdown,collector,result,result,search,profiles,get,collector,result,assert,that,result,get,name,not,is,empty,or,null,string,assert,that,result,get,time,greater,than,0l
QueryProfilerIT -> public void testCollapsingBool() throws Exception;1548420339;Tests a series of three nested boolean queries with a single "leaf" match query._The rewrite process will "collapse" this down to a single bool, so this tests to make sure_nothing catastrophic happens during that fairly substantial rewrite;public void testCollapsingBool() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        indexRandom(true, docs)___        refresh()___        QueryBuilder q = QueryBuilders.boolQuery()_                .must(QueryBuilders.boolQuery().must(QueryBuilders.boolQuery().must(QueryBuilders.matchQuery("field1", "one"))))___        logger.info("Query: {}", q)___        SearchResponse resp = client().prepareSearch()_                .setQuery(q)_                .setProfile(true)_                .setSearchType(SearchType.QUERY_THEN_FETCH)_                .get()___        assertNotNull("Profile response element should not be null", resp.getProfileResults())__        assertThat("Profile response should not be an empty array", resp.getProfileResults().size(), not(0))___        for (Map.Entry<String, ProfileShardResult> shardResult : resp.getProfileResults().entrySet()) {_            for (QueryProfileShardResult searchProfiles : shardResult.getValue().getQueryProfileResults()) {_                for (ProfileResult result : searchProfiles.getQueryResults()) {_                    assertNotNull(result.getQueryName())__                    assertNotNull(result.getLuceneDescription())__                    assertThat(result.getTime(), greaterThan(0L))__                    assertNotNull(result.getTimeBreakdown())__                }__                CollectorResult result = searchProfiles.getCollectorResult()__                assertThat(result.getName(), not(isEmptyOrNullString()))__                assertThat(result.getTime(), greaterThan(0L))__            }_        }_    };tests,a,series,of,three,nested,boolean,queries,with,a,single,leaf,match,query,the,rewrite,process,will,collapse,this,down,to,a,single,bool,so,this,tests,to,make,sure,nothing,catastrophic,happens,during,that,fairly,substantial,rewrite;public,void,test,collapsing,bool,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,index,random,true,docs,refresh,query,builder,q,query,builders,bool,query,must,query,builders,bool,query,must,query,builders,bool,query,must,query,builders,match,query,field1,one,logger,info,query,q,search,response,resp,client,prepare,search,set,query,q,set,profile,true,set,search,type,search,type,get,assert,not,null,profile,response,element,should,not,be,null,resp,get,profile,results,assert,that,profile,response,should,not,be,an,empty,array,resp,get,profile,results,size,not,0,for,map,entry,string,profile,shard,result,shard,result,resp,get,profile,results,entry,set,for,query,profile,shard,result,search,profiles,shard,result,get,value,get,query,profile,results,for,profile,result,result,search,profiles,get,query,results,assert,not,null,result,get,query,name,assert,not,null,result,get,lucene,description,assert,that,result,get,time,greater,than,0l,assert,not,null,result,get,time,breakdown,collector,result,result,search,profiles,get,collector,result,assert,that,result,get,name,not,is,empty,or,null,string,assert,that,result,get,time,greater,than,0l
QueryProfilerIT -> public void testCollapsingBool() throws Exception;1549920805;Tests a series of three nested boolean queries with a single "leaf" match query._The rewrite process will "collapse" this down to a single bool, so this tests to make sure_nothing catastrophic happens during that fairly substantial rewrite;public void testCollapsingBool() throws Exception {_        createIndex("test")__        ensureGreen()___        int numDocs = randomIntBetween(100, 150)__        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]__        for (int i = 0_ i < numDocs_ i++) {_            docs[i] = client().prepareIndex("test", "type1", String.valueOf(i)).setSource(_                    "field1", English.intToEnglish(i),_                    "field2", i_            )__        }__        indexRandom(true, docs)___        refresh()___        QueryBuilder q = QueryBuilders.boolQuery()_                .must(QueryBuilders.boolQuery().must(QueryBuilders.boolQuery().must(QueryBuilders.matchQuery("field1", "one"))))___        logger.info("Query: {}", q)___        SearchResponse resp = client().prepareSearch()_                .setQuery(q)_                .setProfile(true)_                .setSearchType(SearchType.QUERY_THEN_FETCH)_                .get()___        assertNotNull("Profile response element should not be null", resp.getProfileResults())__        assertThat("Profile response should not be an empty array", resp.getProfileResults().size(), not(0))___        for (Map.Entry<String, ProfileShardResult> shardResult : resp.getProfileResults().entrySet()) {_            for (QueryProfileShardResult searchProfiles : shardResult.getValue().getQueryProfileResults()) {_                for (ProfileResult result : searchProfiles.getQueryResults()) {_                    assertNotNull(result.getQueryName())__                    assertNotNull(result.getLuceneDescription())__                    assertThat(result.getTime(), greaterThan(0L))__                    assertNotNull(result.getTimeBreakdown())__                }__                CollectorResult result = searchProfiles.getCollectorResult()__                assertThat(result.getName(), not(isEmptyOrNullString()))__                assertThat(result.getTime(), greaterThan(0L))__            }_        }_    };tests,a,series,of,three,nested,boolean,queries,with,a,single,leaf,match,query,the,rewrite,process,will,collapse,this,down,to,a,single,bool,so,this,tests,to,make,sure,nothing,catastrophic,happens,during,that,fairly,substantial,rewrite;public,void,test,collapsing,bool,throws,exception,create,index,test,ensure,green,int,num,docs,random,int,between,100,150,index,request,builder,docs,new,index,request,builder,num,docs,for,int,i,0,i,num,docs,i,docs,i,client,prepare,index,test,type1,string,value,of,i,set,source,field1,english,int,to,english,i,field2,i,index,random,true,docs,refresh,query,builder,q,query,builders,bool,query,must,query,builders,bool,query,must,query,builders,bool,query,must,query,builders,match,query,field1,one,logger,info,query,q,search,response,resp,client,prepare,search,set,query,q,set,profile,true,set,search,type,search,type,get,assert,not,null,profile,response,element,should,not,be,null,resp,get,profile,results,assert,that,profile,response,should,not,be,an,empty,array,resp,get,profile,results,size,not,0,for,map,entry,string,profile,shard,result,shard,result,resp,get,profile,results,entry,set,for,query,profile,shard,result,search,profiles,shard,result,get,value,get,query,profile,results,for,profile,result,result,search,profiles,get,query,results,assert,not,null,result,get,query,name,assert,not,null,result,get,lucene,description,assert,that,result,get,time,greater,than,0l,assert,not,null,result,get,time,breakdown,collector,result,result,search,profiles,get,collector,result,assert,that,result,get,name,not,is,empty,or,null,string,assert,that,result,get,time,greater,than,0l
