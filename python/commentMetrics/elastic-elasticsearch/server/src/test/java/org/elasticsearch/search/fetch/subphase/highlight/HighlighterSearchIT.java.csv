# id;timestamp;commentText;codeText;commentWords;codeWords
HighlighterSearchIT -> private void phraseBoostTestCase(String highlighterType);1524684173;Test phrase boosting over normal term matches.  Note that this will never pass with the plain highlighter_because it doesn't support the concept of terms having a different weight based on position._@param highlighterType highlighter to test;private void phraseBoostTestCase(String highlighterType) {_        ensureGreen()__        StringBuilder text = new StringBuilder()__        text.append("words words junk junk junk junk junk junk junk junk highlight junk junk junk junk together junk\n")__        for (int i = 0_ i<10_ i++) {_            text.append("junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk\n")__        }_        text.append("highlight words together\n")__        for (int i = 0_ i<10_ i++) {_            text.append("junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk\n")__        }_        index("test", "type1", "1", "field1", text.toString())__        refresh()___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                matchQuery("field1", "highlight words together"),_                matchPhraseQuery("field1", "highlight words together"))___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                queryStringQuery("highlight words together").field("field1"),_                queryStringQuery("\"highlight words together\"").field("field1").autoGeneratePhraseQueries(true))___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                queryStringQuery("highlight words together").field("field1"),_                queryStringQuery("\"highlight words together\"").field("field1").autoGeneratePhraseQueries(true))___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                queryStringQuery("highlight words together").field("field1").field("field2"),_                queryStringQuery("\"highlight words together\"").field("field1").field("field2").autoGeneratePhraseQueries(true))___        _        phraseBoostTestCaseForClauses(highlighterType, 1f,_                queryStringQuery("highlight words together").field("field1"),_                queryStringQuery("\"highlight words together\"").field("field1", 100).autoGeneratePhraseQueries(true))__    };test,phrase,boosting,over,normal,term,matches,note,that,this,will,never,pass,with,the,plain,highlighter,because,it,doesn,t,support,the,concept,of,terms,having,a,different,weight,based,on,position,param,highlighter,type,highlighter,to,test;private,void,phrase,boost,test,case,string,highlighter,type,ensure,green,string,builder,text,new,string,builder,text,append,words,words,junk,junk,junk,junk,junk,junk,junk,junk,highlight,junk,junk,junk,junk,together,junk,n,for,int,i,0,i,10,i,text,append,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,n,text,append,highlight,words,together,n,for,int,i,0,i,10,i,text,append,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,n,index,test,type1,1,field1,text,to,string,refresh,phrase,boost,test,case,for,clauses,highlighter,type,100f,match,query,field1,highlight,words,together,match,phrase,query,field1,highlight,words,together,phrase,boost,test,case,for,clauses,highlighter,type,100f,query,string,query,highlight,words,together,field,field1,query,string,query,highlight,words,together,field,field1,auto,generate,phrase,queries,true,phrase,boost,test,case,for,clauses,highlighter,type,100f,query,string,query,highlight,words,together,field,field1,query,string,query,highlight,words,together,field,field1,auto,generate,phrase,queries,true,phrase,boost,test,case,for,clauses,highlighter,type,100f,query,string,query,highlight,words,together,field,field1,field,field2,query,string,query,highlight,words,together,field,field1,field,field2,auto,generate,phrase,queries,true,phrase,boost,test,case,for,clauses,highlighter,type,1f,query,string,query,highlight,words,together,field,field1,query,string,query,highlight,words,together,field,field1,100,auto,generate,phrase,queries,true
HighlighterSearchIT -> private void phraseBoostTestCase(String highlighterType);1526289033;Test phrase boosting over normal term matches.  Note that this will never pass with the plain highlighter_because it doesn't support the concept of terms having a different weight based on position._@param highlighterType highlighter to test;private void phraseBoostTestCase(String highlighterType) {_        ensureGreen()__        StringBuilder text = new StringBuilder()__        text.append("words words junk junk junk junk junk junk junk junk highlight junk junk junk junk together junk\n")__        for (int i = 0_ i<10_ i++) {_            text.append("junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk\n")__        }_        text.append("highlight words together\n")__        for (int i = 0_ i<10_ i++) {_            text.append("junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk\n")__        }_        index("test", "type1", "1", "field1", text.toString())__        refresh()___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                matchQuery("field1", "highlight words together"),_                matchPhraseQuery("field1", "highlight words together"))___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                queryStringQuery("highlight words together").field("field1"),_                queryStringQuery("\"highlight words together\"").field("field1").autoGeneratePhraseQueries(true))___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                queryStringQuery("highlight words together").field("field1"),_                queryStringQuery("\"highlight words together\"").field("field1").autoGeneratePhraseQueries(true))___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                queryStringQuery("highlight words together").field("field1").field("field2"),_                queryStringQuery("\"highlight words together\"").field("field1").field("field2").autoGeneratePhraseQueries(true))___        _        phraseBoostTestCaseForClauses(highlighterType, 1f,_                queryStringQuery("highlight words together").field("field1"),_                queryStringQuery("\"highlight words together\"").field("field1", 100).autoGeneratePhraseQueries(true))__    };test,phrase,boosting,over,normal,term,matches,note,that,this,will,never,pass,with,the,plain,highlighter,because,it,doesn,t,support,the,concept,of,terms,having,a,different,weight,based,on,position,param,highlighter,type,highlighter,to,test;private,void,phrase,boost,test,case,string,highlighter,type,ensure,green,string,builder,text,new,string,builder,text,append,words,words,junk,junk,junk,junk,junk,junk,junk,junk,highlight,junk,junk,junk,junk,together,junk,n,for,int,i,0,i,10,i,text,append,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,n,text,append,highlight,words,together,n,for,int,i,0,i,10,i,text,append,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,n,index,test,type1,1,field1,text,to,string,refresh,phrase,boost,test,case,for,clauses,highlighter,type,100f,match,query,field1,highlight,words,together,match,phrase,query,field1,highlight,words,together,phrase,boost,test,case,for,clauses,highlighter,type,100f,query,string,query,highlight,words,together,field,field1,query,string,query,highlight,words,together,field,field1,auto,generate,phrase,queries,true,phrase,boost,test,case,for,clauses,highlighter,type,100f,query,string,query,highlight,words,together,field,field1,query,string,query,highlight,words,together,field,field1,auto,generate,phrase,queries,true,phrase,boost,test,case,for,clauses,highlighter,type,100f,query,string,query,highlight,words,together,field,field1,field,field2,query,string,query,highlight,words,together,field,field1,field,field2,auto,generate,phrase,queries,true,phrase,boost,test,case,for,clauses,highlighter,type,1f,query,string,query,highlight,words,together,field,field1,query,string,query,highlight,words,together,field,field1,100,auto,generate,phrase,queries,true
HighlighterSearchIT -> private void phraseBoostTestCase(String highlighterType);1527622193;Test phrase boosting over normal term matches.  Note that this will never pass with the plain highlighter_because it doesn't support the concept of terms having a different weight based on position._@param highlighterType highlighter to test;private void phraseBoostTestCase(String highlighterType) {_        ensureGreen()__        StringBuilder text = new StringBuilder()__        text.append("words words junk junk junk junk junk junk junk junk highlight junk junk junk junk together junk\n")__        for (int i = 0_ i<10_ i++) {_            text.append("junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk\n")__        }_        text.append("highlight words together\n")__        for (int i = 0_ i<10_ i++) {_            text.append("junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk\n")__        }_        index("test", "type1", "1", "field1", text.toString())__        refresh()___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                matchQuery("field1", "highlight words together"),_                matchPhraseQuery("field1", "highlight words together"))___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                queryStringQuery("highlight words together").field("field1"),_                queryStringQuery("\"highlight words together\"").field("field1").autoGeneratePhraseQueries(true))___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                queryStringQuery("highlight words together").field("field1"),_                queryStringQuery("\"highlight words together\"").field("field1").autoGeneratePhraseQueries(true))___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                queryStringQuery("highlight words together").field("field1").field("field2"),_                queryStringQuery("\"highlight words together\"").field("field1").field("field2").autoGeneratePhraseQueries(true))___        _        phraseBoostTestCaseForClauses(highlighterType, 1f,_                queryStringQuery("highlight words together").field("field1"),_                queryStringQuery("\"highlight words together\"").field("field1", 100).autoGeneratePhraseQueries(true))__    };test,phrase,boosting,over,normal,term,matches,note,that,this,will,never,pass,with,the,plain,highlighter,because,it,doesn,t,support,the,concept,of,terms,having,a,different,weight,based,on,position,param,highlighter,type,highlighter,to,test;private,void,phrase,boost,test,case,string,highlighter,type,ensure,green,string,builder,text,new,string,builder,text,append,words,words,junk,junk,junk,junk,junk,junk,junk,junk,highlight,junk,junk,junk,junk,together,junk,n,for,int,i,0,i,10,i,text,append,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,n,text,append,highlight,words,together,n,for,int,i,0,i,10,i,text,append,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,n,index,test,type1,1,field1,text,to,string,refresh,phrase,boost,test,case,for,clauses,highlighter,type,100f,match,query,field1,highlight,words,together,match,phrase,query,field1,highlight,words,together,phrase,boost,test,case,for,clauses,highlighter,type,100f,query,string,query,highlight,words,together,field,field1,query,string,query,highlight,words,together,field,field1,auto,generate,phrase,queries,true,phrase,boost,test,case,for,clauses,highlighter,type,100f,query,string,query,highlight,words,together,field,field1,query,string,query,highlight,words,together,field,field1,auto,generate,phrase,queries,true,phrase,boost,test,case,for,clauses,highlighter,type,100f,query,string,query,highlight,words,together,field,field1,field,field2,query,string,query,highlight,words,together,field,field1,field,field2,auto,generate,phrase,queries,true,phrase,boost,test,case,for,clauses,highlighter,type,1f,query,string,query,highlight,words,together,field,field1,query,string,query,highlight,words,together,field,field1,100,auto,generate,phrase,queries,true
HighlighterSearchIT -> private void phraseBoostTestCase(String highlighterType);1528304883;Test phrase boosting over normal term matches.  Note that this will never pass with the plain highlighter_because it doesn't support the concept of terms having a different weight based on position._@param highlighterType highlighter to test;private void phraseBoostTestCase(String highlighterType) {_        ensureGreen()__        StringBuilder text = new StringBuilder()__        text.append("words words junk junk junk junk junk junk junk junk highlight junk junk junk junk together junk\n")__        for (int i = 0_ i<10_ i++) {_            text.append("junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk\n")__        }_        text.append("highlight words together\n")__        for (int i = 0_ i<10_ i++) {_            text.append("junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk\n")__        }_        index("test", "type1", "1", "field1", text.toString())__        refresh()___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                matchQuery("field1", "highlight words together"),_                matchPhraseQuery("field1", "highlight words together"))___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                queryStringQuery("highlight words together").field("field1"),_                queryStringQuery("\"highlight words together\"").field("field1").autoGeneratePhraseQueries(true))___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                queryStringQuery("highlight words together").field("field1"),_                queryStringQuery("\"highlight words together\"").field("field1").autoGeneratePhraseQueries(true))___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                queryStringQuery("highlight words together").field("field1").field("field2"),_                queryStringQuery("\"highlight words together\"").field("field1").field("field2").autoGeneratePhraseQueries(true))___        _        phraseBoostTestCaseForClauses(highlighterType, 1f,_                queryStringQuery("highlight words together").field("field1"),_                queryStringQuery("\"highlight words together\"").field("field1", 100).autoGeneratePhraseQueries(true))__    };test,phrase,boosting,over,normal,term,matches,note,that,this,will,never,pass,with,the,plain,highlighter,because,it,doesn,t,support,the,concept,of,terms,having,a,different,weight,based,on,position,param,highlighter,type,highlighter,to,test;private,void,phrase,boost,test,case,string,highlighter,type,ensure,green,string,builder,text,new,string,builder,text,append,words,words,junk,junk,junk,junk,junk,junk,junk,junk,highlight,junk,junk,junk,junk,together,junk,n,for,int,i,0,i,10,i,text,append,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,n,text,append,highlight,words,together,n,for,int,i,0,i,10,i,text,append,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,n,index,test,type1,1,field1,text,to,string,refresh,phrase,boost,test,case,for,clauses,highlighter,type,100f,match,query,field1,highlight,words,together,match,phrase,query,field1,highlight,words,together,phrase,boost,test,case,for,clauses,highlighter,type,100f,query,string,query,highlight,words,together,field,field1,query,string,query,highlight,words,together,field,field1,auto,generate,phrase,queries,true,phrase,boost,test,case,for,clauses,highlighter,type,100f,query,string,query,highlight,words,together,field,field1,query,string,query,highlight,words,together,field,field1,auto,generate,phrase,queries,true,phrase,boost,test,case,for,clauses,highlighter,type,100f,query,string,query,highlight,words,together,field,field1,field,field2,query,string,query,highlight,words,together,field,field1,field,field2,auto,generate,phrase,queries,true,phrase,boost,test,case,for,clauses,highlighter,type,1f,query,string,query,highlight,words,together,field,field1,query,string,query,highlight,words,together,field,field1,100,auto,generate,phrase,queries,true
HighlighterSearchIT -> private void phraseBoostTestCase(String highlighterType);1528706846;Test phrase boosting over normal term matches.  Note that this will never pass with the plain highlighter_because it doesn't support the concept of terms having a different weight based on position._@param highlighterType highlighter to test;private void phraseBoostTestCase(String highlighterType) {_        ensureGreen()__        StringBuilder text = new StringBuilder()__        text.append("words words junk junk junk junk junk junk junk junk highlight junk junk junk junk together junk\n")__        for (int i = 0_ i<10_ i++) {_            text.append("junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk\n")__        }_        text.append("highlight words together\n")__        for (int i = 0_ i<10_ i++) {_            text.append("junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk\n")__        }_        index("test", "type1", "1", "field1", text.toString())__        refresh()___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                matchQuery("field1", "highlight words together"),_                matchPhraseQuery("field1", "highlight words together"))___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                queryStringQuery("highlight words together").field("field1"),_                queryStringQuery("\"highlight words together\"").field("field1").autoGeneratePhraseQueries(true))___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                queryStringQuery("highlight words together").field("field1"),_                queryStringQuery("\"highlight words together\"").field("field1").autoGeneratePhraseQueries(true))___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                queryStringQuery("highlight words together").field("field1").field("field2"),_                queryStringQuery("\"highlight words together\"").field("field1").field("field2").autoGeneratePhraseQueries(true))___        _        phraseBoostTestCaseForClauses(highlighterType, 1f,_                queryStringQuery("highlight words together").field("field1"),_                queryStringQuery("\"highlight words together\"").field("field1", 100).autoGeneratePhraseQueries(true))__    };test,phrase,boosting,over,normal,term,matches,note,that,this,will,never,pass,with,the,plain,highlighter,because,it,doesn,t,support,the,concept,of,terms,having,a,different,weight,based,on,position,param,highlighter,type,highlighter,to,test;private,void,phrase,boost,test,case,string,highlighter,type,ensure,green,string,builder,text,new,string,builder,text,append,words,words,junk,junk,junk,junk,junk,junk,junk,junk,highlight,junk,junk,junk,junk,together,junk,n,for,int,i,0,i,10,i,text,append,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,n,text,append,highlight,words,together,n,for,int,i,0,i,10,i,text,append,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,n,index,test,type1,1,field1,text,to,string,refresh,phrase,boost,test,case,for,clauses,highlighter,type,100f,match,query,field1,highlight,words,together,match,phrase,query,field1,highlight,words,together,phrase,boost,test,case,for,clauses,highlighter,type,100f,query,string,query,highlight,words,together,field,field1,query,string,query,highlight,words,together,field,field1,auto,generate,phrase,queries,true,phrase,boost,test,case,for,clauses,highlighter,type,100f,query,string,query,highlight,words,together,field,field1,query,string,query,highlight,words,together,field,field1,auto,generate,phrase,queries,true,phrase,boost,test,case,for,clauses,highlighter,type,100f,query,string,query,highlight,words,together,field,field1,field,field2,query,string,query,highlight,words,together,field,field1,field,field2,auto,generate,phrase,queries,true,phrase,boost,test,case,for,clauses,highlighter,type,1f,query,string,query,highlight,words,together,field,field1,query,string,query,highlight,words,together,field,field1,100,auto,generate,phrase,queries,true
HighlighterSearchIT -> private void phraseBoostTestCase(String highlighterType);1531382259;Test phrase boosting over normal term matches.  Note that this will never pass with the plain highlighter_because it doesn't support the concept of terms having a different weight based on position._@param highlighterType highlighter to test;private void phraseBoostTestCase(String highlighterType) {_        ensureGreen()__        StringBuilder text = new StringBuilder()__        text.append("words words junk junk junk junk junk junk junk junk highlight junk junk junk junk together junk\n")__        for (int i = 0_ i<10_ i++) {_            text.append("junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk\n")__        }_        text.append("highlight words together\n")__        for (int i = 0_ i<10_ i++) {_            text.append("junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk\n")__        }_        index("test", "type1", "1", "field1", text.toString())__        refresh()___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                matchQuery("field1", "highlight words together"),_                matchPhraseQuery("field1", "highlight words together"))___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                queryStringQuery("highlight words together").field("field1"),_                queryStringQuery("\"highlight words together\"").field("field1").autoGeneratePhraseQueries(true))___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                queryStringQuery("highlight words together").field("field1"),_                queryStringQuery("\"highlight words together\"").field("field1").autoGeneratePhraseQueries(true))___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                queryStringQuery("highlight words together").field("field1").field("field2"),_                queryStringQuery("\"highlight words together\"").field("field1").field("field2").autoGeneratePhraseQueries(true))___        _        phraseBoostTestCaseForClauses(highlighterType, 1f,_                queryStringQuery("highlight words together").field("field1"),_                queryStringQuery("\"highlight words together\"").field("field1", 100).autoGeneratePhraseQueries(true))__    };test,phrase,boosting,over,normal,term,matches,note,that,this,will,never,pass,with,the,plain,highlighter,because,it,doesn,t,support,the,concept,of,terms,having,a,different,weight,based,on,position,param,highlighter,type,highlighter,to,test;private,void,phrase,boost,test,case,string,highlighter,type,ensure,green,string,builder,text,new,string,builder,text,append,words,words,junk,junk,junk,junk,junk,junk,junk,junk,highlight,junk,junk,junk,junk,together,junk,n,for,int,i,0,i,10,i,text,append,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,n,text,append,highlight,words,together,n,for,int,i,0,i,10,i,text,append,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,n,index,test,type1,1,field1,text,to,string,refresh,phrase,boost,test,case,for,clauses,highlighter,type,100f,match,query,field1,highlight,words,together,match,phrase,query,field1,highlight,words,together,phrase,boost,test,case,for,clauses,highlighter,type,100f,query,string,query,highlight,words,together,field,field1,query,string,query,highlight,words,together,field,field1,auto,generate,phrase,queries,true,phrase,boost,test,case,for,clauses,highlighter,type,100f,query,string,query,highlight,words,together,field,field1,query,string,query,highlight,words,together,field,field1,auto,generate,phrase,queries,true,phrase,boost,test,case,for,clauses,highlighter,type,100f,query,string,query,highlight,words,together,field,field1,field,field2,query,string,query,highlight,words,together,field,field1,field,field2,auto,generate,phrase,queries,true,phrase,boost,test,case,for,clauses,highlighter,type,1f,query,string,query,highlight,words,together,field,field1,query,string,query,highlight,words,together,field,field1,100,auto,generate,phrase,queries,true
HighlighterSearchIT -> private void phraseBoostTestCase(String highlighterType);1531937412;Test phrase boosting over normal term matches.  Note that this will never pass with the plain highlighter_because it doesn't support the concept of terms having a different weight based on position._@param highlighterType highlighter to test;private void phraseBoostTestCase(String highlighterType) {_        ensureGreen()__        StringBuilder text = new StringBuilder()__        text.append("words words junk junk junk junk junk junk junk junk highlight junk junk junk junk together junk\n")__        for (int i = 0_ i<10_ i++) {_            text.append("junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk\n")__        }_        text.append("highlight words together\n")__        for (int i = 0_ i<10_ i++) {_            text.append("junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk\n")__        }_        index("test", "type1", "1", "field1", text.toString())__        refresh()___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                matchQuery("field1", "highlight words together"),_                matchPhraseQuery("field1", "highlight words together"))___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                queryStringQuery("highlight words together").field("field1"),_                queryStringQuery("\"highlight words together\"").field("field1").autoGeneratePhraseQueries(true))___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                queryStringQuery("highlight words together").field("field1"),_                queryStringQuery("\"highlight words together\"").field("field1").autoGeneratePhraseQueries(true))___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                queryStringQuery("highlight words together").field("field1").field("field2"),_                queryStringQuery("\"highlight words together\"").field("field1").field("field2").autoGeneratePhraseQueries(true))___        _        phraseBoostTestCaseForClauses(highlighterType, 1f,_                queryStringQuery("highlight words together").field("field1"),_                queryStringQuery("\"highlight words together\"").field("field1", 100).autoGeneratePhraseQueries(true))__    };test,phrase,boosting,over,normal,term,matches,note,that,this,will,never,pass,with,the,plain,highlighter,because,it,doesn,t,support,the,concept,of,terms,having,a,different,weight,based,on,position,param,highlighter,type,highlighter,to,test;private,void,phrase,boost,test,case,string,highlighter,type,ensure,green,string,builder,text,new,string,builder,text,append,words,words,junk,junk,junk,junk,junk,junk,junk,junk,highlight,junk,junk,junk,junk,together,junk,n,for,int,i,0,i,10,i,text,append,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,n,text,append,highlight,words,together,n,for,int,i,0,i,10,i,text,append,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,n,index,test,type1,1,field1,text,to,string,refresh,phrase,boost,test,case,for,clauses,highlighter,type,100f,match,query,field1,highlight,words,together,match,phrase,query,field1,highlight,words,together,phrase,boost,test,case,for,clauses,highlighter,type,100f,query,string,query,highlight,words,together,field,field1,query,string,query,highlight,words,together,field,field1,auto,generate,phrase,queries,true,phrase,boost,test,case,for,clauses,highlighter,type,100f,query,string,query,highlight,words,together,field,field1,query,string,query,highlight,words,together,field,field1,auto,generate,phrase,queries,true,phrase,boost,test,case,for,clauses,highlighter,type,100f,query,string,query,highlight,words,together,field,field1,field,field2,query,string,query,highlight,words,together,field,field1,field,field2,auto,generate,phrase,queries,true,phrase,boost,test,case,for,clauses,highlighter,type,1f,query,string,query,highlight,words,together,field,field1,query,string,query,highlight,words,together,field,field1,100,auto,generate,phrase,queries,true
HighlighterSearchIT -> private void phraseBoostTestCase(String highlighterType);1538170812;Test phrase boosting over normal term matches.  Note that this will never pass with the plain highlighter_because it doesn't support the concept of terms having a different weight based on position._@param highlighterType highlighter to test;private void phraseBoostTestCase(String highlighterType) {_        ensureGreen()__        StringBuilder text = new StringBuilder()__        text.append("words words junk junk junk junk junk junk junk junk highlight junk junk junk junk together junk\n")__        for (int i = 0_ i<10_ i++) {_            text.append("junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk\n")__        }_        text.append("highlight words together\n")__        for (int i = 0_ i<10_ i++) {_            text.append("junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk\n")__        }_        index("test", "type1", "1", "field1", text.toString())__        refresh()___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                matchQuery("field1", "highlight words together"),_                matchPhraseQuery("field1", "highlight words together"))___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                queryStringQuery("highlight words together").field("field1"),_                queryStringQuery("\"highlight words together\"").field("field1").autoGeneratePhraseQueries(true))___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                queryStringQuery("highlight words together").field("field1"),_                queryStringQuery("\"highlight words together\"").field("field1").autoGeneratePhraseQueries(true))___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                queryStringQuery("highlight words together").field("field1").field("field2"),_                queryStringQuery("\"highlight words together\"").field("field1").field("field2").autoGeneratePhraseQueries(true))___        _        phraseBoostTestCaseForClauses(highlighterType, 1f,_                queryStringQuery("highlight words together").field("field1"),_                queryStringQuery("\"highlight words together\"").field("field1", 100).autoGeneratePhraseQueries(true))__    };test,phrase,boosting,over,normal,term,matches,note,that,this,will,never,pass,with,the,plain,highlighter,because,it,doesn,t,support,the,concept,of,terms,having,a,different,weight,based,on,position,param,highlighter,type,highlighter,to,test;private,void,phrase,boost,test,case,string,highlighter,type,ensure,green,string,builder,text,new,string,builder,text,append,words,words,junk,junk,junk,junk,junk,junk,junk,junk,highlight,junk,junk,junk,junk,together,junk,n,for,int,i,0,i,10,i,text,append,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,n,text,append,highlight,words,together,n,for,int,i,0,i,10,i,text,append,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,n,index,test,type1,1,field1,text,to,string,refresh,phrase,boost,test,case,for,clauses,highlighter,type,100f,match,query,field1,highlight,words,together,match,phrase,query,field1,highlight,words,together,phrase,boost,test,case,for,clauses,highlighter,type,100f,query,string,query,highlight,words,together,field,field1,query,string,query,highlight,words,together,field,field1,auto,generate,phrase,queries,true,phrase,boost,test,case,for,clauses,highlighter,type,100f,query,string,query,highlight,words,together,field,field1,query,string,query,highlight,words,together,field,field1,auto,generate,phrase,queries,true,phrase,boost,test,case,for,clauses,highlighter,type,100f,query,string,query,highlight,words,together,field,field1,field,field2,query,string,query,highlight,words,together,field,field1,field,field2,auto,generate,phrase,queries,true,phrase,boost,test,case,for,clauses,highlighter,type,1f,query,string,query,highlight,words,together,field,field1,query,string,query,highlight,words,together,field,field1,100,auto,generate,phrase,queries,true
HighlighterSearchIT -> private void phraseBoostTestCase(String highlighterType);1542726437;Test phrase boosting over normal term matches.  Note that this will never pass with the plain highlighter_because it doesn't support the concept of terms having a different weight based on position._@param highlighterType highlighter to test;private void phraseBoostTestCase(String highlighterType) {_        ensureGreen()__        StringBuilder text = new StringBuilder()__        text.append("words words junk junk junk junk junk junk junk junk highlight junk junk junk junk together junk\n")__        for (int i = 0_ i<10_ i++) {_            text.append("junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk\n")__        }_        text.append("highlight words together\n")__        for (int i = 0_ i<10_ i++) {_            text.append("junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk\n")__        }_        index("test", "type1", "1", "field1", text.toString())__        refresh()___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                matchQuery("field1", "highlight words together"),_                matchPhraseQuery("field1", "highlight words together"))___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                queryStringQuery("highlight words together").field("field1"),_                queryStringQuery("\"highlight words together\"").field("field1"))___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                queryStringQuery("highlight words together").field("field1"),_                queryStringQuery("\"highlight words together\"").field("field1"))___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                queryStringQuery("highlight words together").field("field1").field("field2"),_                queryStringQuery("\"highlight words together\"").field("field1").field("field2"))___        _        phraseBoostTestCaseForClauses(highlighterType, 1f,_                queryStringQuery("highlight words together").field("field1"),_                queryStringQuery("\"highlight words together\"").field("field1", 100))__    };test,phrase,boosting,over,normal,term,matches,note,that,this,will,never,pass,with,the,plain,highlighter,because,it,doesn,t,support,the,concept,of,terms,having,a,different,weight,based,on,position,param,highlighter,type,highlighter,to,test;private,void,phrase,boost,test,case,string,highlighter,type,ensure,green,string,builder,text,new,string,builder,text,append,words,words,junk,junk,junk,junk,junk,junk,junk,junk,highlight,junk,junk,junk,junk,together,junk,n,for,int,i,0,i,10,i,text,append,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,n,text,append,highlight,words,together,n,for,int,i,0,i,10,i,text,append,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,n,index,test,type1,1,field1,text,to,string,refresh,phrase,boost,test,case,for,clauses,highlighter,type,100f,match,query,field1,highlight,words,together,match,phrase,query,field1,highlight,words,together,phrase,boost,test,case,for,clauses,highlighter,type,100f,query,string,query,highlight,words,together,field,field1,query,string,query,highlight,words,together,field,field1,phrase,boost,test,case,for,clauses,highlighter,type,100f,query,string,query,highlight,words,together,field,field1,query,string,query,highlight,words,together,field,field1,phrase,boost,test,case,for,clauses,highlighter,type,100f,query,string,query,highlight,words,together,field,field1,field,field2,query,string,query,highlight,words,together,field,field1,field,field2,phrase,boost,test,case,for,clauses,highlighter,type,1f,query,string,query,highlight,words,together,field,field1,query,string,query,highlight,words,together,field,field1,100
HighlighterSearchIT -> private void phraseBoostTestCase(String highlighterType);1544035746;Test phrase boosting over normal term matches.  Note that this will never pass with the plain highlighter_because it doesn't support the concept of terms having a different weight based on position._@param highlighterType highlighter to test;private void phraseBoostTestCase(String highlighterType) {_        ensureGreen()__        StringBuilder text = new StringBuilder()__        text.append("words words junk junk junk junk junk junk junk junk highlight junk junk junk junk together junk\n")__        for (int i = 0_ i<10_ i++) {_            text.append("junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk\n")__        }_        text.append("highlight words together\n")__        for (int i = 0_ i<10_ i++) {_            text.append("junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk\n")__        }_        index("test", "type1", "1", "field1", text.toString())__        refresh()___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                matchQuery("field1", "highlight words together"),_                matchPhraseQuery("field1", "highlight words together"))___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                queryStringQuery("highlight words together").field("field1"),_                queryStringQuery("\"highlight words together\"").field("field1"))___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                queryStringQuery("highlight words together").field("field1"),_                queryStringQuery("\"highlight words together\"").field("field1"))___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                queryStringQuery("highlight words together").field("field1").field("field2"),_                queryStringQuery("\"highlight words together\"").field("field1").field("field2"))___        _        phraseBoostTestCaseForClauses(highlighterType, 1f,_                queryStringQuery("highlight words together").field("field1"),_                queryStringQuery("\"highlight words together\"").field("field1", 100))__    };test,phrase,boosting,over,normal,term,matches,note,that,this,will,never,pass,with,the,plain,highlighter,because,it,doesn,t,support,the,concept,of,terms,having,a,different,weight,based,on,position,param,highlighter,type,highlighter,to,test;private,void,phrase,boost,test,case,string,highlighter,type,ensure,green,string,builder,text,new,string,builder,text,append,words,words,junk,junk,junk,junk,junk,junk,junk,junk,highlight,junk,junk,junk,junk,together,junk,n,for,int,i,0,i,10,i,text,append,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,n,text,append,highlight,words,together,n,for,int,i,0,i,10,i,text,append,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,n,index,test,type1,1,field1,text,to,string,refresh,phrase,boost,test,case,for,clauses,highlighter,type,100f,match,query,field1,highlight,words,together,match,phrase,query,field1,highlight,words,together,phrase,boost,test,case,for,clauses,highlighter,type,100f,query,string,query,highlight,words,together,field,field1,query,string,query,highlight,words,together,field,field1,phrase,boost,test,case,for,clauses,highlighter,type,100f,query,string,query,highlight,words,together,field,field1,query,string,query,highlight,words,together,field,field1,phrase,boost,test,case,for,clauses,highlighter,type,100f,query,string,query,highlight,words,together,field,field1,field,field2,query,string,query,highlight,words,together,field,field1,field,field2,phrase,boost,test,case,for,clauses,highlighter,type,1f,query,string,query,highlight,words,together,field,field1,query,string,query,highlight,words,together,field,field1,100
HighlighterSearchIT -> private void phraseBoostTestCase(String highlighterType);1544110272;Test phrase boosting over normal term matches.  Note that this will never pass with the plain highlighter_because it doesn't support the concept of terms having a different weight based on position._@param highlighterType highlighter to test;private void phraseBoostTestCase(String highlighterType) {_        ensureGreen()__        StringBuilder text = new StringBuilder()__        text.append("words words junk junk junk junk junk junk junk junk highlight junk junk junk junk together junk\n")__        for (int i = 0_ i<10_ i++) {_            text.append("junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk\n")__        }_        text.append("highlight words together\n")__        for (int i = 0_ i<10_ i++) {_            text.append("junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk\n")__        }_        index("test", "type1", "1", "field1", text.toString())__        refresh()___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                matchQuery("field1", "highlight words together"),_                matchPhraseQuery("field1", "highlight words together"))___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                queryStringQuery("highlight words together").field("field1"),_                queryStringQuery("\"highlight words together\"").field("field1"))___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                queryStringQuery("highlight words together").field("field1"),_                queryStringQuery("\"highlight words together\"").field("field1"))___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                queryStringQuery("highlight words together").field("field1").field("field2"),_                queryStringQuery("\"highlight words together\"").field("field1").field("field2"))___        _        phraseBoostTestCaseForClauses(highlighterType, 1f,_                queryStringQuery("highlight words together").field("field1"),_                queryStringQuery("\"highlight words together\"").field("field1", 100))__    };test,phrase,boosting,over,normal,term,matches,note,that,this,will,never,pass,with,the,plain,highlighter,because,it,doesn,t,support,the,concept,of,terms,having,a,different,weight,based,on,position,param,highlighter,type,highlighter,to,test;private,void,phrase,boost,test,case,string,highlighter,type,ensure,green,string,builder,text,new,string,builder,text,append,words,words,junk,junk,junk,junk,junk,junk,junk,junk,highlight,junk,junk,junk,junk,together,junk,n,for,int,i,0,i,10,i,text,append,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,n,text,append,highlight,words,together,n,for,int,i,0,i,10,i,text,append,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,n,index,test,type1,1,field1,text,to,string,refresh,phrase,boost,test,case,for,clauses,highlighter,type,100f,match,query,field1,highlight,words,together,match,phrase,query,field1,highlight,words,together,phrase,boost,test,case,for,clauses,highlighter,type,100f,query,string,query,highlight,words,together,field,field1,query,string,query,highlight,words,together,field,field1,phrase,boost,test,case,for,clauses,highlighter,type,100f,query,string,query,highlight,words,together,field,field1,query,string,query,highlight,words,together,field,field1,phrase,boost,test,case,for,clauses,highlighter,type,100f,query,string,query,highlight,words,together,field,field1,field,field2,query,string,query,highlight,words,together,field,field1,field,field2,phrase,boost,test,case,for,clauses,highlighter,type,1f,query,string,query,highlight,words,together,field,field1,query,string,query,highlight,words,together,field,field1,100
HighlighterSearchIT -> private void phraseBoostTestCase(String highlighterType);1548236405;Test phrase boosting over normal term matches.  Note that this will never pass with the plain highlighter_because it doesn't support the concept of terms having a different weight based on position._@param highlighterType highlighter to test;private void phraseBoostTestCase(String highlighterType) {_        ensureGreen()__        StringBuilder text = new StringBuilder()__        text.append("words words junk junk junk junk junk junk junk junk highlight junk junk junk junk together junk\n")__        for (int i = 0_ i<10_ i++) {_            text.append("junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk\n")__        }_        text.append("highlight words together\n")__        for (int i = 0_ i<10_ i++) {_            text.append("junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk\n")__        }_        index("test", "type1", "1", "field1", text.toString())__        refresh()___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                matchQuery("field1", "highlight words together"),_                matchPhraseQuery("field1", "highlight words together"))___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                queryStringQuery("highlight words together").field("field1"),_                queryStringQuery("\"highlight words together\"").field("field1"))___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                queryStringQuery("highlight words together").field("field1"),_                queryStringQuery("\"highlight words together\"").field("field1"))___        _        phraseBoostTestCaseForClauses(highlighterType, 100f,_                queryStringQuery("highlight words together").field("field1").field("field2"),_                queryStringQuery("\"highlight words together\"").field("field1").field("field2"))___        _        phraseBoostTestCaseForClauses(highlighterType, 1f,_                queryStringQuery("highlight words together").field("field1"),_                queryStringQuery("\"highlight words together\"").field("field1", 100))__    };test,phrase,boosting,over,normal,term,matches,note,that,this,will,never,pass,with,the,plain,highlighter,because,it,doesn,t,support,the,concept,of,terms,having,a,different,weight,based,on,position,param,highlighter,type,highlighter,to,test;private,void,phrase,boost,test,case,string,highlighter,type,ensure,green,string,builder,text,new,string,builder,text,append,words,words,junk,junk,junk,junk,junk,junk,junk,junk,highlight,junk,junk,junk,junk,together,junk,n,for,int,i,0,i,10,i,text,append,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,n,text,append,highlight,words,together,n,for,int,i,0,i,10,i,text,append,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,junk,n,index,test,type1,1,field1,text,to,string,refresh,phrase,boost,test,case,for,clauses,highlighter,type,100f,match,query,field1,highlight,words,together,match,phrase,query,field1,highlight,words,together,phrase,boost,test,case,for,clauses,highlighter,type,100f,query,string,query,highlight,words,together,field,field1,query,string,query,highlight,words,together,field,field1,phrase,boost,test,case,for,clauses,highlighter,type,100f,query,string,query,highlight,words,together,field,field1,query,string,query,highlight,words,together,field,field1,phrase,boost,test,case,for,clauses,highlighter,type,100f,query,string,query,highlight,words,together,field,field1,field,field2,query,string,query,highlight,words,together,field,field1,field,field2,phrase,boost,test,case,for,clauses,highlighter,type,1f,query,string,query,highlight,words,together,field,field1,query,string,query,highlight,words,together,field,field1,100
HighlighterSearchIT -> MockAnalysisPlugin -> MockSnowBall -> MockSnowBall(TokenStream in);1528706846;Sole constructor.;MockSnowBall(TokenStream in) {_                super(in)__            };sole,constructor;mock,snow,ball,token,stream,in,super,in
HighlighterSearchIT -> MockAnalysisPlugin -> MockSnowBall -> MockSnowBall(TokenStream in);1531382259;Sole constructor.;MockSnowBall(TokenStream in) {_                super(in)__            };sole,constructor;mock,snow,ball,token,stream,in,super,in
HighlighterSearchIT -> MockAnalysisPlugin -> MockSnowBall -> MockSnowBall(TokenStream in);1531937412;Sole constructor.;MockSnowBall(TokenStream in) {_                super(in)__            };sole,constructor;mock,snow,ball,token,stream,in,super,in
HighlighterSearchIT -> MockAnalysisPlugin -> MockSnowBall -> MockSnowBall(TokenStream in);1538170812;Sole constructor.;MockSnowBall(TokenStream in) {_                super(in)__            };sole,constructor;mock,snow,ball,token,stream,in,super,in
HighlighterSearchIT -> MockAnalysisPlugin -> MockSnowBall -> MockSnowBall(TokenStream in);1542726437;Sole constructor.;MockSnowBall(TokenStream in) {_                super(in)__            };sole,constructor;mock,snow,ball,token,stream,in,super,in
HighlighterSearchIT -> MockAnalysisPlugin -> MockSnowBall -> MockSnowBall(TokenStream in);1544035746;Sole constructor.;MockSnowBall(TokenStream in) {_                super(in)__            };sole,constructor;mock,snow,ball,token,stream,in,super,in
HighlighterSearchIT -> MockAnalysisPlugin -> MockSnowBall -> MockSnowBall(TokenStream in);1544110272;Sole constructor.;MockSnowBall(TokenStream in) {_                super(in)__            };sole,constructor;mock,snow,ball,token,stream,in,super,in
HighlighterSearchIT -> MockAnalysisPlugin -> MockSnowBall -> MockSnowBall(TokenStream in);1548236405;Sole constructor.;MockSnowBall(TokenStream in) {_                super(in)__            };sole,constructor;mock,snow,ball,token,stream,in,super,in
HighlighterSearchIT -> public void testFVHManyMatches() throws Exception;1524684173;The FHV can spend a long time highlighting degenerate documents if_phraseLimit is not set. Its default is now reasonably low.;public void testFVHManyMatches() throws Exception {_        assertAcked(prepareCreate("test").addMapping("type1", type1TermVectorMapping()))__        ensureGreen()___        _        String pattern = "t   "__        String value = new String(new char[1024 * 256 / pattern.length()]).replace("\0", pattern)__        client().prepareIndex("test", "type1")_                .setSource("field1", value).get()__        refresh()___        logger.info("--> highlighting and searching on field1 with default phrase limit")__        SearchSourceBuilder source = searchSource()_                .query(termQuery("field1", "t"))_                .highlighter(highlight().highlighterType("fvh").field("field1", 20, 1).order("score").preTags("<xxx>").postTags("</xxx>"))__        SearchResponse defaultPhraseLimit = client().search(searchRequest("test").source(source)).actionGet()__        assertHighlight(defaultPhraseLimit, 0, "field1", 0, 1, containsString("<xxx>t</xxx>"))___        logger.info("--> highlighting and searching on field1 with large phrase limit")__        source = searchSource()_                .query(termQuery("field1", "t"))_                .highlighter(highlight().highlighterType("fvh").field("field1", 20, 1).order("score").preTags("<xxx>").postTags("</xxx>")_                        .phraseLimit(30000))__        SearchResponse largePhraseLimit = client().search(searchRequest("test").source(source)).actionGet()__        assertHighlight(largePhraseLimit, 0, "field1", 0, 1, containsString("<xxx>t</xxx>"))___        _        assertThat(defaultPhraseLimit.getTook().getMillis(),_                lessThan(largePhraseLimit.getTook().getMillis()))__    };the,fhv,can,spend,a,long,time,highlighting,degenerate,documents,if,phrase,limit,is,not,set,its,default,is,now,reasonably,low;public,void,test,fvhmany,matches,throws,exception,assert,acked,prepare,create,test,add,mapping,type1,type1term,vector,mapping,ensure,green,string,pattern,t,string,value,new,string,new,char,1024,256,pattern,length,replace,0,pattern,client,prepare,index,test,type1,set,source,field1,value,get,refresh,logger,info,highlighting,and,searching,on,field1,with,default,phrase,limit,search,source,builder,source,search,source,query,term,query,field1,t,highlighter,highlight,highlighter,type,fvh,field,field1,20,1,order,score,pre,tags,xxx,post,tags,xxx,search,response,default,phrase,limit,client,search,search,request,test,source,source,action,get,assert,highlight,default,phrase,limit,0,field1,0,1,contains,string,xxx,t,xxx,logger,info,highlighting,and,searching,on,field1,with,large,phrase,limit,source,search,source,query,term,query,field1,t,highlighter,highlight,highlighter,type,fvh,field,field1,20,1,order,score,pre,tags,xxx,post,tags,xxx,phrase,limit,30000,search,response,large,phrase,limit,client,search,search,request,test,source,source,action,get,assert,highlight,large,phrase,limit,0,field1,0,1,contains,string,xxx,t,xxx,assert,that,default,phrase,limit,get,took,get,millis,less,than,large,phrase,limit,get,took,get,millis
HighlighterSearchIT -> public void testFVHManyMatches() throws Exception;1526289033;The FHV can spend a long time highlighting degenerate documents if_phraseLimit is not set. Its default is now reasonably low.;public void testFVHManyMatches() throws Exception {_        assertAcked(prepareCreate("test").addMapping("type1", type1TermVectorMapping()))__        ensureGreen()___        _        String pattern = "t   "__        String value = new String(new char[1024 * 256 / pattern.length()]).replace("\0", pattern)__        client().prepareIndex("test", "type1")_                .setSource("field1", value).get()__        refresh()___        logger.info("--> highlighting and searching on field1 with default phrase limit")__        SearchSourceBuilder source = searchSource()_                .query(termQuery("field1", "t"))_                .highlighter(highlight().highlighterType("fvh").field("field1", 20, 1).order("score").preTags("<xxx>").postTags("</xxx>"))__        SearchResponse defaultPhraseLimit = client().search(searchRequest("test").source(source)).actionGet()__        assertHighlight(defaultPhraseLimit, 0, "field1", 0, 1, containsString("<xxx>t</xxx>"))___        logger.info("--> highlighting and searching on field1 with large phrase limit")__        source = searchSource()_                .query(termQuery("field1", "t"))_                .highlighter(highlight().highlighterType("fvh").field("field1", 20, 1).order("score").preTags("<xxx>").postTags("</xxx>")_                        .phraseLimit(30000))__        SearchResponse largePhraseLimit = client().search(searchRequest("test").source(source)).actionGet()__        assertHighlight(largePhraseLimit, 0, "field1", 0, 1, containsString("<xxx>t</xxx>"))___        _        assertThat(defaultPhraseLimit.getTook().getMillis(),_                lessThan(largePhraseLimit.getTook().getMillis()))__    };the,fhv,can,spend,a,long,time,highlighting,degenerate,documents,if,phrase,limit,is,not,set,its,default,is,now,reasonably,low;public,void,test,fvhmany,matches,throws,exception,assert,acked,prepare,create,test,add,mapping,type1,type1term,vector,mapping,ensure,green,string,pattern,t,string,value,new,string,new,char,1024,256,pattern,length,replace,0,pattern,client,prepare,index,test,type1,set,source,field1,value,get,refresh,logger,info,highlighting,and,searching,on,field1,with,default,phrase,limit,search,source,builder,source,search,source,query,term,query,field1,t,highlighter,highlight,highlighter,type,fvh,field,field1,20,1,order,score,pre,tags,xxx,post,tags,xxx,search,response,default,phrase,limit,client,search,search,request,test,source,source,action,get,assert,highlight,default,phrase,limit,0,field1,0,1,contains,string,xxx,t,xxx,logger,info,highlighting,and,searching,on,field1,with,large,phrase,limit,source,search,source,query,term,query,field1,t,highlighter,highlight,highlighter,type,fvh,field,field1,20,1,order,score,pre,tags,xxx,post,tags,xxx,phrase,limit,30000,search,response,large,phrase,limit,client,search,search,request,test,source,source,action,get,assert,highlight,large,phrase,limit,0,field1,0,1,contains,string,xxx,t,xxx,assert,that,default,phrase,limit,get,took,get,millis,less,than,large,phrase,limit,get,took,get,millis
HighlighterSearchIT -> public void testFVHManyMatches() throws Exception;1527622193;The FHV can spend a long time highlighting degenerate documents if_phraseLimit is not set. Its default is now reasonably low.;public void testFVHManyMatches() throws Exception {_        assertAcked(prepareCreate("test").addMapping("type1", type1TermVectorMapping()))__        ensureGreen()___        _        String pattern = "t   "__        String value = new String(new char[1024 * 256 / pattern.length()]).replace("\0", pattern)__        client().prepareIndex("test", "type1")_                .setSource("field1", value).get()__        refresh()___        logger.info("--> highlighting and searching on field1 with default phrase limit")__        SearchSourceBuilder source = searchSource()_                .query(termQuery("field1", "t"))_                .highlighter(highlight().highlighterType("fvh").field("field1", 20, 1).order("score").preTags("<xxx>").postTags("</xxx>"))__        SearchResponse defaultPhraseLimit = client().search(searchRequest("test").source(source)).actionGet()__        assertHighlight(defaultPhraseLimit, 0, "field1", 0, 1, containsString("<xxx>t</xxx>"))___        logger.info("--> highlighting and searching on field1 with large phrase limit")__        source = searchSource()_                .query(termQuery("field1", "t"))_                .highlighter(highlight().highlighterType("fvh").field("field1", 20, 1).order("score").preTags("<xxx>").postTags("</xxx>")_                        .phraseLimit(30000))__        SearchResponse largePhraseLimit = client().search(searchRequest("test").source(source)).actionGet()__        assertHighlight(largePhraseLimit, 0, "field1", 0, 1, containsString("<xxx>t</xxx>"))___        _        assertThat(defaultPhraseLimit.getTook().getMillis(),_                lessThan(largePhraseLimit.getTook().getMillis()))__    };the,fhv,can,spend,a,long,time,highlighting,degenerate,documents,if,phrase,limit,is,not,set,its,default,is,now,reasonably,low;public,void,test,fvhmany,matches,throws,exception,assert,acked,prepare,create,test,add,mapping,type1,type1term,vector,mapping,ensure,green,string,pattern,t,string,value,new,string,new,char,1024,256,pattern,length,replace,0,pattern,client,prepare,index,test,type1,set,source,field1,value,get,refresh,logger,info,highlighting,and,searching,on,field1,with,default,phrase,limit,search,source,builder,source,search,source,query,term,query,field1,t,highlighter,highlight,highlighter,type,fvh,field,field1,20,1,order,score,pre,tags,xxx,post,tags,xxx,search,response,default,phrase,limit,client,search,search,request,test,source,source,action,get,assert,highlight,default,phrase,limit,0,field1,0,1,contains,string,xxx,t,xxx,logger,info,highlighting,and,searching,on,field1,with,large,phrase,limit,source,search,source,query,term,query,field1,t,highlighter,highlight,highlighter,type,fvh,field,field1,20,1,order,score,pre,tags,xxx,post,tags,xxx,phrase,limit,30000,search,response,large,phrase,limit,client,search,search,request,test,source,source,action,get,assert,highlight,large,phrase,limit,0,field1,0,1,contains,string,xxx,t,xxx,assert,that,default,phrase,limit,get,took,get,millis,less,than,large,phrase,limit,get,took,get,millis
HighlighterSearchIT -> public void testFVHManyMatches() throws Exception;1528304883;The FHV can spend a long time highlighting degenerate documents if_phraseLimit is not set. Its default is now reasonably low.;public void testFVHManyMatches() throws Exception {_        assertAcked(prepareCreate("test").addMapping("type1", type1TermVectorMapping()))__        ensureGreen()___        _        String pattern = "t   "__        String value = new String(new char[1024 * 256 / pattern.length()]).replace("\0", pattern)__        client().prepareIndex("test", "type1")_                .setSource("field1", value).get()__        refresh()___        logger.info("--> highlighting and searching on field1 with default phrase limit")__        SearchSourceBuilder source = searchSource()_                .query(termQuery("field1", "t"))_                .highlighter(highlight().highlighterType("fvh").field("field1", 20, 1).order("score").preTags("<xxx>").postTags("</xxx>"))__        SearchResponse defaultPhraseLimit = client().search(searchRequest("test").source(source)).actionGet()__        assertHighlight(defaultPhraseLimit, 0, "field1", 0, 1, containsString("<xxx>t</xxx>"))___        logger.info("--> highlighting and searching on field1 with large phrase limit")__        source = searchSource()_                .query(termQuery("field1", "t"))_                .highlighter(highlight().highlighterType("fvh").field("field1", 20, 1).order("score").preTags("<xxx>").postTags("</xxx>")_                        .phraseLimit(30000))__        SearchResponse largePhraseLimit = client().search(searchRequest("test").source(source)).actionGet()__        assertHighlight(largePhraseLimit, 0, "field1", 0, 1, containsString("<xxx>t</xxx>"))___        _        assertThat(defaultPhraseLimit.getTook().getMillis(),_                lessThan(largePhraseLimit.getTook().getMillis()))__    };the,fhv,can,spend,a,long,time,highlighting,degenerate,documents,if,phrase,limit,is,not,set,its,default,is,now,reasonably,low;public,void,test,fvhmany,matches,throws,exception,assert,acked,prepare,create,test,add,mapping,type1,type1term,vector,mapping,ensure,green,string,pattern,t,string,value,new,string,new,char,1024,256,pattern,length,replace,0,pattern,client,prepare,index,test,type1,set,source,field1,value,get,refresh,logger,info,highlighting,and,searching,on,field1,with,default,phrase,limit,search,source,builder,source,search,source,query,term,query,field1,t,highlighter,highlight,highlighter,type,fvh,field,field1,20,1,order,score,pre,tags,xxx,post,tags,xxx,search,response,default,phrase,limit,client,search,search,request,test,source,source,action,get,assert,highlight,default,phrase,limit,0,field1,0,1,contains,string,xxx,t,xxx,logger,info,highlighting,and,searching,on,field1,with,large,phrase,limit,source,search,source,query,term,query,field1,t,highlighter,highlight,highlighter,type,fvh,field,field1,20,1,order,score,pre,tags,xxx,post,tags,xxx,phrase,limit,30000,search,response,large,phrase,limit,client,search,search,request,test,source,source,action,get,assert,highlight,large,phrase,limit,0,field1,0,1,contains,string,xxx,t,xxx,assert,that,default,phrase,limit,get,took,get,millis,less,than,large,phrase,limit,get,took,get,millis
HighlighterSearchIT -> public void testFVHManyMatches() throws Exception;1528706846;The FHV can spend a long time highlighting degenerate documents if_phraseLimit is not set. Its default is now reasonably low.;public void testFVHManyMatches() throws Exception {_        assertAcked(prepareCreate("test").addMapping("type1", type1TermVectorMapping()))__        ensureGreen()___        _        String pattern = "t   "__        String value = new String(new char[1024 * 256 / pattern.length()]).replace("\0", pattern)__        client().prepareIndex("test", "type1")_                .setSource("field1", value).get()__        refresh()___        logger.info("--> highlighting and searching on field1 with default phrase limit")__        SearchSourceBuilder source = searchSource()_                .query(termQuery("field1", "t"))_                .highlighter(highlight().highlighterType("fvh").field("field1", 20, 1).order("score").preTags("<xxx>").postTags("</xxx>"))__        SearchResponse defaultPhraseLimit = client().search(searchRequest("test").source(source)).actionGet()__        assertHighlight(defaultPhraseLimit, 0, "field1", 0, 1, containsString("<xxx>t</xxx>"))___        logger.info("--> highlighting and searching on field1 with large phrase limit")__        source = searchSource()_                .query(termQuery("field1", "t"))_                .highlighter(highlight().highlighterType("fvh").field("field1", 20, 1).order("score").preTags("<xxx>").postTags("</xxx>")_                        .phraseLimit(30000))__        SearchResponse largePhraseLimit = client().search(searchRequest("test").source(source)).actionGet()__        assertHighlight(largePhraseLimit, 0, "field1", 0, 1, containsString("<xxx>t</xxx>"))___        _        assertThat(defaultPhraseLimit.getTook().getMillis(),_                lessThan(largePhraseLimit.getTook().getMillis()))__    };the,fhv,can,spend,a,long,time,highlighting,degenerate,documents,if,phrase,limit,is,not,set,its,default,is,now,reasonably,low;public,void,test,fvhmany,matches,throws,exception,assert,acked,prepare,create,test,add,mapping,type1,type1term,vector,mapping,ensure,green,string,pattern,t,string,value,new,string,new,char,1024,256,pattern,length,replace,0,pattern,client,prepare,index,test,type1,set,source,field1,value,get,refresh,logger,info,highlighting,and,searching,on,field1,with,default,phrase,limit,search,source,builder,source,search,source,query,term,query,field1,t,highlighter,highlight,highlighter,type,fvh,field,field1,20,1,order,score,pre,tags,xxx,post,tags,xxx,search,response,default,phrase,limit,client,search,search,request,test,source,source,action,get,assert,highlight,default,phrase,limit,0,field1,0,1,contains,string,xxx,t,xxx,logger,info,highlighting,and,searching,on,field1,with,large,phrase,limit,source,search,source,query,term,query,field1,t,highlighter,highlight,highlighter,type,fvh,field,field1,20,1,order,score,pre,tags,xxx,post,tags,xxx,phrase,limit,30000,search,response,large,phrase,limit,client,search,search,request,test,source,source,action,get,assert,highlight,large,phrase,limit,0,field1,0,1,contains,string,xxx,t,xxx,assert,that,default,phrase,limit,get,took,get,millis,less,than,large,phrase,limit,get,took,get,millis
HighlighterSearchIT -> public void testFVHManyMatches() throws Exception;1531382259;The FHV can spend a long time highlighting degenerate documents if_phraseLimit is not set. Its default is now reasonably low.;public void testFVHManyMatches() throws Exception {_        assertAcked(prepareCreate("test").addMapping("type1", type1TermVectorMapping()))__        ensureGreen()___        _        String pattern = "t   "__        String value = new String(new char[1024 * 256 / pattern.length()]).replace("\0", pattern)__        client().prepareIndex("test", "type1")_                .setSource("field1", value).get()__        refresh()___        logger.info("--> highlighting and searching on field1 with default phrase limit")__        SearchSourceBuilder source = searchSource()_                .query(termQuery("field1", "t"))_                .highlighter(highlight().highlighterType("fvh").field("field1", 20, 1).order("score").preTags("<xxx>").postTags("</xxx>"))__        SearchResponse defaultPhraseLimit = client().search(searchRequest("test").source(source)).actionGet()__        assertHighlight(defaultPhraseLimit, 0, "field1", 0, 1, containsString("<xxx>t</xxx>"))___        logger.info("--> highlighting and searching on field1 with large phrase limit")__        source = searchSource()_                .query(termQuery("field1", "t"))_                .highlighter(highlight().highlighterType("fvh").field("field1", 20, 1).order("score").preTags("<xxx>").postTags("</xxx>")_                        .phraseLimit(30000))__        SearchResponse largePhraseLimit = client().search(searchRequest("test").source(source)).actionGet()__        assertHighlight(largePhraseLimit, 0, "field1", 0, 1, containsString("<xxx>t</xxx>"))___        _        assertThat(defaultPhraseLimit.getTook().getMillis(),_                lessThan(largePhraseLimit.getTook().getMillis()))__    };the,fhv,can,spend,a,long,time,highlighting,degenerate,documents,if,phrase,limit,is,not,set,its,default,is,now,reasonably,low;public,void,test,fvhmany,matches,throws,exception,assert,acked,prepare,create,test,add,mapping,type1,type1term,vector,mapping,ensure,green,string,pattern,t,string,value,new,string,new,char,1024,256,pattern,length,replace,0,pattern,client,prepare,index,test,type1,set,source,field1,value,get,refresh,logger,info,highlighting,and,searching,on,field1,with,default,phrase,limit,search,source,builder,source,search,source,query,term,query,field1,t,highlighter,highlight,highlighter,type,fvh,field,field1,20,1,order,score,pre,tags,xxx,post,tags,xxx,search,response,default,phrase,limit,client,search,search,request,test,source,source,action,get,assert,highlight,default,phrase,limit,0,field1,0,1,contains,string,xxx,t,xxx,logger,info,highlighting,and,searching,on,field1,with,large,phrase,limit,source,search,source,query,term,query,field1,t,highlighter,highlight,highlighter,type,fvh,field,field1,20,1,order,score,pre,tags,xxx,post,tags,xxx,phrase,limit,30000,search,response,large,phrase,limit,client,search,search,request,test,source,source,action,get,assert,highlight,large,phrase,limit,0,field1,0,1,contains,string,xxx,t,xxx,assert,that,default,phrase,limit,get,took,get,millis,less,than,large,phrase,limit,get,took,get,millis
HighlighterSearchIT -> public void testFVHManyMatches() throws Exception;1531937412;The FHV can spend a long time highlighting degenerate documents if_phraseLimit is not set. Its default is now reasonably low.;public void testFVHManyMatches() throws Exception {_        assertAcked(prepareCreate("test").addMapping("type1", type1TermVectorMapping()))__        ensureGreen()___        _        String pattern = "t   "__        String value = new String(new char[1024 * 256 / pattern.length()]).replace("\0", pattern)__        client().prepareIndex("test", "type1")_                .setSource("field1", value).get()__        refresh()___        logger.info("--> highlighting and searching on field1 with default phrase limit")__        SearchSourceBuilder source = searchSource()_                .query(termQuery("field1", "t"))_                .highlighter(highlight().highlighterType("fvh").field("field1", 20, 1).order("score").preTags("<xxx>").postTags("</xxx>"))__        SearchResponse defaultPhraseLimit = client().search(searchRequest("test").source(source)).actionGet()__        assertHighlight(defaultPhraseLimit, 0, "field1", 0, 1, containsString("<xxx>t</xxx>"))___        logger.info("--> highlighting and searching on field1 with large phrase limit")__        source = searchSource()_                .query(termQuery("field1", "t"))_                .highlighter(highlight().highlighterType("fvh").field("field1", 20, 1).order("score").preTags("<xxx>").postTags("</xxx>")_                        .phraseLimit(30000))__        SearchResponse largePhraseLimit = client().search(searchRequest("test").source(source)).actionGet()__        assertHighlight(largePhraseLimit, 0, "field1", 0, 1, containsString("<xxx>t</xxx>"))___        _        assertThat(defaultPhraseLimit.getTook().getMillis(),_                lessThan(largePhraseLimit.getTook().getMillis()))__    };the,fhv,can,spend,a,long,time,highlighting,degenerate,documents,if,phrase,limit,is,not,set,its,default,is,now,reasonably,low;public,void,test,fvhmany,matches,throws,exception,assert,acked,prepare,create,test,add,mapping,type1,type1term,vector,mapping,ensure,green,string,pattern,t,string,value,new,string,new,char,1024,256,pattern,length,replace,0,pattern,client,prepare,index,test,type1,set,source,field1,value,get,refresh,logger,info,highlighting,and,searching,on,field1,with,default,phrase,limit,search,source,builder,source,search,source,query,term,query,field1,t,highlighter,highlight,highlighter,type,fvh,field,field1,20,1,order,score,pre,tags,xxx,post,tags,xxx,search,response,default,phrase,limit,client,search,search,request,test,source,source,action,get,assert,highlight,default,phrase,limit,0,field1,0,1,contains,string,xxx,t,xxx,logger,info,highlighting,and,searching,on,field1,with,large,phrase,limit,source,search,source,query,term,query,field1,t,highlighter,highlight,highlighter,type,fvh,field,field1,20,1,order,score,pre,tags,xxx,post,tags,xxx,phrase,limit,30000,search,response,large,phrase,limit,client,search,search,request,test,source,source,action,get,assert,highlight,large,phrase,limit,0,field1,0,1,contains,string,xxx,t,xxx,assert,that,default,phrase,limit,get,took,get,millis,less,than,large,phrase,limit,get,took,get,millis
HighlighterSearchIT -> public void testFVHManyMatches() throws Exception;1538170812;The FHV can spend a long time highlighting degenerate documents if_phraseLimit is not set. Its default is now reasonably low.;public void testFVHManyMatches() throws Exception {_        assertAcked(prepareCreate("test").addMapping("type1", type1TermVectorMapping()))__        ensureGreen()___        _        String pattern = "t   "__        String value = new String(new char[1024 * 256 / pattern.length()]).replace("\0", pattern)__        client().prepareIndex("test", "type1")_                .setSource("field1", value).get()__        refresh()___        logger.info("--> highlighting and searching on field1 with default phrase limit")__        SearchSourceBuilder source = searchSource()_                .query(termQuery("field1", "t"))_                .highlighter(highlight().highlighterType("fvh").field("field1", 20, 1).order("score").preTags("<xxx>").postTags("</xxx>"))__        SearchResponse defaultPhraseLimit = client().search(searchRequest("test").source(source)).actionGet()__        assertHighlight(defaultPhraseLimit, 0, "field1", 0, 1, containsString("<xxx>t</xxx>"))___        logger.info("--> highlighting and searching on field1 with large phrase limit")__        source = searchSource()_                .query(termQuery("field1", "t"))_                .highlighter(highlight().highlighterType("fvh").field("field1", 20, 1).order("score").preTags("<xxx>").postTags("</xxx>")_                        .phraseLimit(30000))__        SearchResponse largePhraseLimit = client().search(searchRequest("test").source(source)).actionGet()__        assertHighlight(largePhraseLimit, 0, "field1", 0, 1, containsString("<xxx>t</xxx>"))___        _        assertThat(defaultPhraseLimit.getTook().getMillis(),_                lessThan(largePhraseLimit.getTook().getMillis()))__    };the,fhv,can,spend,a,long,time,highlighting,degenerate,documents,if,phrase,limit,is,not,set,its,default,is,now,reasonably,low;public,void,test,fvhmany,matches,throws,exception,assert,acked,prepare,create,test,add,mapping,type1,type1term,vector,mapping,ensure,green,string,pattern,t,string,value,new,string,new,char,1024,256,pattern,length,replace,0,pattern,client,prepare,index,test,type1,set,source,field1,value,get,refresh,logger,info,highlighting,and,searching,on,field1,with,default,phrase,limit,search,source,builder,source,search,source,query,term,query,field1,t,highlighter,highlight,highlighter,type,fvh,field,field1,20,1,order,score,pre,tags,xxx,post,tags,xxx,search,response,default,phrase,limit,client,search,search,request,test,source,source,action,get,assert,highlight,default,phrase,limit,0,field1,0,1,contains,string,xxx,t,xxx,logger,info,highlighting,and,searching,on,field1,with,large,phrase,limit,source,search,source,query,term,query,field1,t,highlighter,highlight,highlighter,type,fvh,field,field1,20,1,order,score,pre,tags,xxx,post,tags,xxx,phrase,limit,30000,search,response,large,phrase,limit,client,search,search,request,test,source,source,action,get,assert,highlight,large,phrase,limit,0,field1,0,1,contains,string,xxx,t,xxx,assert,that,default,phrase,limit,get,took,get,millis,less,than,large,phrase,limit,get,took,get,millis
HighlighterSearchIT -> public void testFVHManyMatches() throws Exception;1542726437;The FHV can spend a long time highlighting degenerate documents if_phraseLimit is not set. Its default is now reasonably low.;public void testFVHManyMatches() throws Exception {_        assertAcked(prepareCreate("test").addMapping("type1", type1TermVectorMapping()))__        ensureGreen()___        _        String pattern = "t   "__        String value = new String(new char[1024 * 256 / pattern.length()]).replace("\0", pattern)__        client().prepareIndex("test", "type1")_                .setSource("field1", value).get()__        refresh()___        logger.info("--> highlighting and searching on field1 with default phrase limit")__        SearchSourceBuilder source = searchSource()_                .query(termQuery("field1", "t"))_                .highlighter(highlight().highlighterType("fvh").field("field1", 20, 1).order("score").preTags("<xxx>").postTags("</xxx>"))__        SearchResponse defaultPhraseLimit = client().search(searchRequest("test").source(source)).actionGet()__        assertHighlight(defaultPhraseLimit, 0, "field1", 0, 1, containsString("<xxx>t</xxx>"))___        logger.info("--> highlighting and searching on field1 with large phrase limit")__        source = searchSource()_                .query(termQuery("field1", "t"))_                .highlighter(highlight().highlighterType("fvh").field("field1", 20, 1).order("score").preTags("<xxx>").postTags("</xxx>")_                        .phraseLimit(30000))__        SearchResponse largePhraseLimit = client().search(searchRequest("test").source(source)).actionGet()__        assertHighlight(largePhraseLimit, 0, "field1", 0, 1, containsString("<xxx>t</xxx>"))___        _        assertThat(defaultPhraseLimit.getTook().getMillis(),_                lessThan(largePhraseLimit.getTook().getMillis()))__    };the,fhv,can,spend,a,long,time,highlighting,degenerate,documents,if,phrase,limit,is,not,set,its,default,is,now,reasonably,low;public,void,test,fvhmany,matches,throws,exception,assert,acked,prepare,create,test,add,mapping,type1,type1term,vector,mapping,ensure,green,string,pattern,t,string,value,new,string,new,char,1024,256,pattern,length,replace,0,pattern,client,prepare,index,test,type1,set,source,field1,value,get,refresh,logger,info,highlighting,and,searching,on,field1,with,default,phrase,limit,search,source,builder,source,search,source,query,term,query,field1,t,highlighter,highlight,highlighter,type,fvh,field,field1,20,1,order,score,pre,tags,xxx,post,tags,xxx,search,response,default,phrase,limit,client,search,search,request,test,source,source,action,get,assert,highlight,default,phrase,limit,0,field1,0,1,contains,string,xxx,t,xxx,logger,info,highlighting,and,searching,on,field1,with,large,phrase,limit,source,search,source,query,term,query,field1,t,highlighter,highlight,highlighter,type,fvh,field,field1,20,1,order,score,pre,tags,xxx,post,tags,xxx,phrase,limit,30000,search,response,large,phrase,limit,client,search,search,request,test,source,source,action,get,assert,highlight,large,phrase,limit,0,field1,0,1,contains,string,xxx,t,xxx,assert,that,default,phrase,limit,get,took,get,millis,less,than,large,phrase,limit,get,took,get,millis
HighlighterSearchIT -> public void testFVHManyMatches() throws Exception;1544035746;The FHV can spend a long time highlighting degenerate documents if_phraseLimit is not set. Its default is now reasonably low.;public void testFVHManyMatches() throws Exception {_        assertAcked(prepareCreate("test").addMapping("type1", type1TermVectorMapping()))__        ensureGreen()___        _        String pattern = "t   "__        String value = new String(new char[1024 * 256 / pattern.length()]).replace("\0", pattern)__        client().prepareIndex("test", "type1")_                .setSource("field1", value).get()__        refresh()___        logger.info("--> highlighting and searching on field1 with default phrase limit")__        SearchSourceBuilder source = searchSource()_                .query(termQuery("field1", "t"))_                .highlighter(highlight().highlighterType("fvh").field("field1", 20, 1).order("score").preTags("<xxx>").postTags("</xxx>"))__        SearchResponse defaultPhraseLimit = client().search(searchRequest("test").source(source)).actionGet()__        assertHighlight(defaultPhraseLimit, 0, "field1", 0, 1, containsString("<xxx>t</xxx>"))___        logger.info("--> highlighting and searching on field1 with large phrase limit")__        source = searchSource()_                .query(termQuery("field1", "t"))_                .highlighter(highlight().highlighterType("fvh").field("field1", 20, 1).order("score").preTags("<xxx>").postTags("</xxx>")_                        .phraseLimit(30000))__        SearchResponse largePhraseLimit = client().search(searchRequest("test").source(source)).actionGet()__        assertHighlight(largePhraseLimit, 0, "field1", 0, 1, containsString("<xxx>t</xxx>"))___        _        assertThat(defaultPhraseLimit.getTook().getMillis(),_                lessThan(largePhraseLimit.getTook().getMillis()))__    };the,fhv,can,spend,a,long,time,highlighting,degenerate,documents,if,phrase,limit,is,not,set,its,default,is,now,reasonably,low;public,void,test,fvhmany,matches,throws,exception,assert,acked,prepare,create,test,add,mapping,type1,type1term,vector,mapping,ensure,green,string,pattern,t,string,value,new,string,new,char,1024,256,pattern,length,replace,0,pattern,client,prepare,index,test,type1,set,source,field1,value,get,refresh,logger,info,highlighting,and,searching,on,field1,with,default,phrase,limit,search,source,builder,source,search,source,query,term,query,field1,t,highlighter,highlight,highlighter,type,fvh,field,field1,20,1,order,score,pre,tags,xxx,post,tags,xxx,search,response,default,phrase,limit,client,search,search,request,test,source,source,action,get,assert,highlight,default,phrase,limit,0,field1,0,1,contains,string,xxx,t,xxx,logger,info,highlighting,and,searching,on,field1,with,large,phrase,limit,source,search,source,query,term,query,field1,t,highlighter,highlight,highlighter,type,fvh,field,field1,20,1,order,score,pre,tags,xxx,post,tags,xxx,phrase,limit,30000,search,response,large,phrase,limit,client,search,search,request,test,source,source,action,get,assert,highlight,large,phrase,limit,0,field1,0,1,contains,string,xxx,t,xxx,assert,that,default,phrase,limit,get,took,get,millis,less,than,large,phrase,limit,get,took,get,millis
HighlighterSearchIT -> public void testFVHManyMatches() throws Exception;1544110272;The FHV can spend a long time highlighting degenerate documents if_phraseLimit is not set. Its default is now reasonably low.;public void testFVHManyMatches() throws Exception {_        assertAcked(prepareCreate("test").addMapping("type1", type1TermVectorMapping()))__        ensureGreen()___        _        String pattern = "t   "__        String value = new String(new char[1024 * 256 / pattern.length()]).replace("\0", pattern)__        client().prepareIndex("test", "type1")_                .setSource("field1", value).get()__        refresh()___        logger.info("--> highlighting and searching on field1 with default phrase limit")__        SearchSourceBuilder source = searchSource()_                .query(termQuery("field1", "t"))_                .highlighter(highlight().highlighterType("fvh").field("field1", 20, 1).order("score").preTags("<xxx>").postTags("</xxx>"))__        SearchResponse defaultPhraseLimit = client().search(searchRequest("test").source(source)).actionGet()__        assertHighlight(defaultPhraseLimit, 0, "field1", 0, 1, containsString("<xxx>t</xxx>"))___        logger.info("--> highlighting and searching on field1 with large phrase limit")__        source = searchSource()_                .query(termQuery("field1", "t"))_                .highlighter(highlight().highlighterType("fvh").field("field1", 20, 1).order("score").preTags("<xxx>").postTags("</xxx>")_                        .phraseLimit(30000))__        SearchResponse largePhraseLimit = client().search(searchRequest("test").source(source)).actionGet()__        assertHighlight(largePhraseLimit, 0, "field1", 0, 1, containsString("<xxx>t</xxx>"))___        _        assertThat(defaultPhraseLimit.getTook().getMillis(),_                lessThan(largePhraseLimit.getTook().getMillis()))__    };the,fhv,can,spend,a,long,time,highlighting,degenerate,documents,if,phrase,limit,is,not,set,its,default,is,now,reasonably,low;public,void,test,fvhmany,matches,throws,exception,assert,acked,prepare,create,test,add,mapping,type1,type1term,vector,mapping,ensure,green,string,pattern,t,string,value,new,string,new,char,1024,256,pattern,length,replace,0,pattern,client,prepare,index,test,type1,set,source,field1,value,get,refresh,logger,info,highlighting,and,searching,on,field1,with,default,phrase,limit,search,source,builder,source,search,source,query,term,query,field1,t,highlighter,highlight,highlighter,type,fvh,field,field1,20,1,order,score,pre,tags,xxx,post,tags,xxx,search,response,default,phrase,limit,client,search,search,request,test,source,source,action,get,assert,highlight,default,phrase,limit,0,field1,0,1,contains,string,xxx,t,xxx,logger,info,highlighting,and,searching,on,field1,with,large,phrase,limit,source,search,source,query,term,query,field1,t,highlighter,highlight,highlighter,type,fvh,field,field1,20,1,order,score,pre,tags,xxx,post,tags,xxx,phrase,limit,30000,search,response,large,phrase,limit,client,search,search,request,test,source,source,action,get,assert,highlight,large,phrase,limit,0,field1,0,1,contains,string,xxx,t,xxx,assert,that,default,phrase,limit,get,took,get,millis,less,than,large,phrase,limit,get,took,get,millis
HighlighterSearchIT -> public void testFVHManyMatches() throws Exception;1548236405;The FHV can spend a long time highlighting degenerate documents if_phraseLimit is not set. Its default is now reasonably low.;public void testFVHManyMatches() throws Exception {_        assertAcked(prepareCreate("test").addMapping("type1", type1TermVectorMapping()))__        ensureGreen()___        _        String pattern = "t   "__        String value = new String(new char[1024 * 256 / pattern.length()]).replace("\0", pattern)__        client().prepareIndex("test", "type1")_                .setSource("field1", value).get()__        refresh()___        logger.info("--> highlighting and searching on field1 with default phrase limit")__        SearchSourceBuilder source = searchSource()_                .query(termQuery("field1", "t"))_                .highlighter(highlight().highlighterType("fvh").field("field1", 20, 1).order("score").preTags("<xxx>").postTags("</xxx>"))__        SearchResponse defaultPhraseLimit = client().search(searchRequest("test").source(source)).actionGet()__        assertHighlight(defaultPhraseLimit, 0, "field1", 0, 1, containsString("<xxx>t</xxx>"))___        logger.info("--> highlighting and searching on field1 with large phrase limit")__        source = searchSource()_                .query(termQuery("field1", "t"))_                .highlighter(highlight().highlighterType("fvh").field("field1", 20, 1).order("score").preTags("<xxx>").postTags("</xxx>")_                        .phraseLimit(30000))__        SearchResponse largePhraseLimit = client().search(searchRequest("test").source(source)).actionGet()__        assertHighlight(largePhraseLimit, 0, "field1", 0, 1, containsString("<xxx>t</xxx>"))___        _        assertThat(defaultPhraseLimit.getTook().getMillis(),_                lessThan(largePhraseLimit.getTook().getMillis()))__    };the,fhv,can,spend,a,long,time,highlighting,degenerate,documents,if,phrase,limit,is,not,set,its,default,is,now,reasonably,low;public,void,test,fvhmany,matches,throws,exception,assert,acked,prepare,create,test,add,mapping,type1,type1term,vector,mapping,ensure,green,string,pattern,t,string,value,new,string,new,char,1024,256,pattern,length,replace,0,pattern,client,prepare,index,test,type1,set,source,field1,value,get,refresh,logger,info,highlighting,and,searching,on,field1,with,default,phrase,limit,search,source,builder,source,search,source,query,term,query,field1,t,highlighter,highlight,highlighter,type,fvh,field,field1,20,1,order,score,pre,tags,xxx,post,tags,xxx,search,response,default,phrase,limit,client,search,search,request,test,source,source,action,get,assert,highlight,default,phrase,limit,0,field1,0,1,contains,string,xxx,t,xxx,logger,info,highlighting,and,searching,on,field1,with,large,phrase,limit,source,search,source,query,term,query,field1,t,highlighter,highlight,highlighter,type,fvh,field,field1,20,1,order,score,pre,tags,xxx,post,tags,xxx,phrase,limit,30000,search,response,large,phrase,limit,client,search,search,request,test,source,source,action,get,assert,highlight,large,phrase,limit,0,field1,0,1,contains,string,xxx,t,xxx,assert,that,default,phrase,limit,get,took,get,millis,less,than,large,phrase,limit,get,took,get,millis
