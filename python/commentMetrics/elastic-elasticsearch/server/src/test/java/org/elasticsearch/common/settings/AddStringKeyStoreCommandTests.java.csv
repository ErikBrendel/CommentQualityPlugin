commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected Environment createEnv(Map<String, String> settings) throws UserException {     return env. }
false;;0;4;;@Override InputStream getStdin() {     return input. }
false;protected;0;13;;@Override protected Command newCommand() {     return new AddStringKeyStoreCommand() {          @Override         protected Environment createEnv(Map<String, String> settings) throws UserException {             return env.         }          @Override         InputStream getStdin() {             return input.         }     }. }
false;public;0;6;;public void testMissingPromptCreate() throws Exception {     terminal.addTextInput("y").     terminal.addSecretInput("bar").     execute("foo").     assertSecureString("foo", "bar"). }
false;public;0;5;;public void testMissingForceCreate() throws Exception {     terminal.addSecretInput("bar").     execute("-f", "foo").     assertSecureString("foo", "bar"). }
false;public;0;5;;public void testMissingNoCreate() throws Exception {     // explicit no     terminal.addTextInput("n").     execute("foo").     assertNull(KeyStoreWrapper.load(env.configFile())). }
false;public;0;6;;public void testOverwritePromptDefault() throws Exception {     createKeystore("", "foo", "bar").     terminal.addTextInput("").     execute("foo").     assertSecureString("foo", "bar"). }
false;public;0;6;;public void testOverwritePromptExplicitNo() throws Exception {     createKeystore("", "foo", "bar").     // explicit no     terminal.addTextInput("n").     execute("foo").     assertSecureString("foo", "bar"). }
false;public;0;7;;public void testOverwritePromptExplicitYes() throws Exception {     createKeystore("", "foo", "bar").     terminal.addTextInput("y").     terminal.addSecretInput("newvalue").     execute("foo").     assertSecureString("foo", "newvalue"). }
false;public;0;6;;public void testOverwriteForceShort() throws Exception {     createKeystore("", "foo", "bar").     terminal.addSecretInput("newvalue").     // force     execute("-f", "foo").     assertSecureString("foo", "newvalue"). }
false;public;0;6;;public void testOverwriteForceLong() throws Exception {     createKeystore("", "foo", "bar").     terminal.addSecretInput("and yet another secret value").     // force     execute("--force", "foo").     assertSecureString("foo", "and yet another secret value"). }
false;public;0;6;;public void testForceNonExistent() throws Exception {     createKeystore("").     terminal.addSecretInput("value").     // force     execute("--force", "foo").     assertSecureString("foo", "value"). }
false;public;0;6;;public void testPromptForValue() throws Exception {     KeyStoreWrapper.create().save(env.configFile(), new char[0]).     terminal.addSecretInput("secret value").     execute("foo").     assertSecureString("foo", "secret value"). }
false;public;0;6;;public void testStdinShort() throws Exception {     KeyStoreWrapper.create().save(env.configFile(), new char[0]).     setInput("secret value 1").     execute("-x", "foo").     assertSecureString("foo", "secret value 1"). }
false;public;0;6;;public void testStdinLong() throws Exception {     KeyStoreWrapper.create().save(env.configFile(), new char[0]).     setInput("secret value 2").     execute("--stdin", "foo").     assertSecureString("foo", "secret value 2"). }
false;public;0;7;;public void testMissingSettingName() throws Exception {     createKeystore("").     terminal.addTextInput("").     UserException e = expectThrows(UserException.class, this::execute).     assertEquals(ExitCodes.USAGE, e.exitCode).     assertThat(e.getMessage(), containsString("The setting name can not be null")). }
false;public;0;9;;public void testUpperCaseInName() throws Exception {     createKeystore("").     terminal.addSecretInput("value").     final String key = randomAlphaOfLength(4) + randomAlphaOfLength(1).toUpperCase(Locale.ROOT) + randomAlphaOfLength(4).     final UserException e = expectThrows(UserException.class, () -> execute(key)).     assertThat(e, hasToString(containsString("Setting name [" + key + "] does not match the allowed setting name pattern [[a-z0-9_\\-.]+]"))). }
false;;1;3;;void setInput(String inputStr) {     input = new ByteArrayInputStream(inputStr.getBytes(StandardCharsets.UTF_8)). }
