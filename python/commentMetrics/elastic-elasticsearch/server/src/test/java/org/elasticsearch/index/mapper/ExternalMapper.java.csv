commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;public Builder string(Mapper.Builder content) {     this.stringBuilder = content.     return this. }
false;public;1;15;;@Override public ExternalMapper build(BuilderContext context) {     context.path().add(name).     BinaryFieldMapper binMapper = binBuilder.build(context).     BooleanFieldMapper boolMapper = boolBuilder.build(context).     GeoPointFieldMapper pointMapper = latLonPointBuilder.build(context).     BaseGeoShapeFieldMapper shapeMapper = shapeBuilder.build(context).     FieldMapper stringMapper = (FieldMapper) stringBuilder.build(context).     context.path().remove().     setupFieldType(context).     return new ExternalMapper(name, fieldType, generatedValue, mapperName, binMapper, boolMapper, pointMapper, shapeMapper, stringMapper, context.indexSettings(), multiFieldsBuilder.build(this, context), copyTo). }
false;public;3;7;;@SuppressWarnings({ "unchecked" }) @Override public Mapper.Builder parse(String name, Map<String, Object> node, ParserContext parserContext) throws MapperParsingException {     ExternalMapper.Builder builder = new ExternalMapper.Builder(name, generatedValue, mapperName).     parseField(builder, name, node, parserContext).     return builder. }
false;public;0;4;;@Override public MappedFieldType clone() {     return new ExternalFieldType(this). }
false;public;0;4;;@Override public String typeName() {     return "faketype". }
false;public;1;8;;@Override public Query existsQuery(QueryShardContext context) {     if (hasDocValues()) {         return new DocValuesFieldExistsQuery(name()).     } else {         return new TermQuery(new Term(FieldNamesFieldMapper.NAME, name())).     } }
false;public;1;28;;@Override public void parse(ParseContext context) throws IOException {     byte[] bytes = "Hello world".getBytes(Charset.defaultCharset()).     binMapper.parse(context.createExternalValueContext(bytes)).     boolMapper.parse(context.createExternalValueContext(true)).     // Let's add a Dummy Point     Double lat = 42.0.     Double lng = 51.0.     GeoPoint point = new GeoPoint(lat, lng).     pointMapper.parse(context.createExternalValueContext(point)).     // Let's add a Dummy Shape     PointBuilder pb = new PointBuilder(-100, 45).     if (shapeMapper instanceof GeoShapeFieldMapper) {         shapeMapper.parse(context.createExternalValueContext(pb.buildGeometry())).     } else {         shapeMapper.parse(context.createExternalValueContext(pb.buildS4J())).     }     context = context.createExternalValueContext(generatedValue).     // Let's add a Original String     stringMapper.parse(context).     multiFields.parse(this, context). }
false;protected;2;4;;@Override protected void parseCreateField(ParseContext context, List<IndexableField> fields) throws IOException {     throw new UnsupportedOperationException(). }
false;protected;1;4;;@Override protected void doMerge(Mapper mergeWith) { // ignore this for now }
false;public;1;29;;@Override public FieldMapper updateFieldType(Map<String, MappedFieldType> fullNameToFieldType) {     ExternalMapper update = (ExternalMapper) super.updateFieldType(fullNameToFieldType).     MultiFields multiFieldsUpdate = multiFields.updateFieldType(fullNameToFieldType).     BinaryFieldMapper binMapperUpdate = (BinaryFieldMapper) binMapper.updateFieldType(fullNameToFieldType).     BooleanFieldMapper boolMapperUpdate = (BooleanFieldMapper) boolMapper.updateFieldType(fullNameToFieldType).     GeoPointFieldMapper pointMapperUpdate = (GeoPointFieldMapper) pointMapper.updateFieldType(fullNameToFieldType).     BaseGeoShapeFieldMapper shapeMapperUpdate = (BaseGeoShapeFieldMapper) shapeMapper.updateFieldType(fullNameToFieldType).     TextFieldMapper stringMapperUpdate = (TextFieldMapper) stringMapper.updateFieldType(fullNameToFieldType).     if (update == this && multiFieldsUpdate == multiFields && binMapperUpdate == binMapper && boolMapperUpdate == boolMapper && pointMapperUpdate == pointMapper && shapeMapperUpdate == shapeMapper && stringMapperUpdate == stringMapper) {         return this.     }     if (update == this) {         update = (ExternalMapper) clone().     }     update.multiFields = multiFieldsUpdate.     update.binMapper = binMapperUpdate.     update.boolMapper = boolMapperUpdate.     update.pointMapper = pointMapperUpdate.     update.shapeMapper = shapeMapperUpdate.     update.stringMapper = stringMapperUpdate.     return update. }
false;public;0;4;;@Override public Iterator<Mapper> iterator() {     return Iterators.concat(super.iterator(), Arrays.asList(binMapper, boolMapper, pointMapper, shapeMapper, stringMapper).iterator()). }
false;public;2;8;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(simpleName()).     builder.field("type", mapperName).     multiFields.toXContent(builder, params).     builder.endObject().     return builder. }
false;protected;0;4;;@Override protected String contentType() {     return mapperName. }
