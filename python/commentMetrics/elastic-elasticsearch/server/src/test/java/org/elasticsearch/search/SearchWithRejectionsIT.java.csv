commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;@Override public Settings nodeSettings(int nodeOrdinal) {     return Settings.builder().put(super.nodeSettings(nodeOrdinal)).put("thread_pool.search.size", 1).put("thread_pool.search.queue_size", 1).build(). }
false;public;0;33;;public void testOpenContextsAfterRejections() throws InterruptedException {     createIndex("test").     ensureGreen("test").     final int docs = scaledRandomIntBetween(20, 50).     for (int i = 0. i < docs. i++) {         client().prepareIndex("test", "type", Integer.toString(i)).setSource("field", "value").get().     }     IndicesStatsResponse indicesStats = client().admin().indices().prepareStats().get().     assertThat(indicesStats.getTotal().getSearch().getOpenContexts(), equalTo(0L)).     refresh().     int numSearches = 10.     Future<SearchResponse>[] responses = new Future[numSearches].     SearchType searchType = randomFrom(SearchType.DEFAULT, SearchType.QUERY_THEN_FETCH, SearchType.DFS_QUERY_THEN_FETCH).     logger.info("search type is {}", searchType).     for (int i = 0. i < numSearches. i++) {         responses[i] = client().prepareSearch().setQuery(matchAllQuery()).setSearchType(searchType).execute().     }     for (int i = 0. i < numSearches. i++) {         try {             responses[i].get().         } catch (Exception t) {         }     }     awaitBusy(() -> client().admin().indices().prepareStats().get().getTotal().getSearch().getOpenContexts() == 0, 1, TimeUnit.SECONDS).     indicesStats = client().admin().indices().prepareStats().get().     assertThat(indicesStats.getTotal().getSearch().getOpenContexts(), equalTo(0L)). }
