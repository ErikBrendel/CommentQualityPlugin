# id;timestamp;commentText;codeText;commentWords;codeWords
SettingTests -> public void testRejectNullProperties();1524684173;We can't have Null properties;public void testRejectNullProperties() {_        IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,_            () -> Setting.simpleString("foo.bar", (Property[]) null))__        assertThat(ex.getMessage(), containsString("properties cannot be null for setting"))__    };we,can,t,have,null,properties;public,void,test,reject,null,properties,illegal,argument,exception,ex,expect,throws,illegal,argument,exception,class,setting,simple,string,foo,bar,property,null,assert,that,ex,get,message,contains,string,properties,cannot,be,null,for,setting
SettingTests -> public void testRejectNullProperties();1525248068;We can't have Null properties;public void testRejectNullProperties() {_        IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,_            () -> Setting.simpleString("foo.bar", (Property[]) null))__        assertThat(ex.getMessage(), containsString("properties cannot be null for setting"))__    };we,can,t,have,null,properties;public,void,test,reject,null,properties,illegal,argument,exception,ex,expect,throws,illegal,argument,exception,class,setting,simple,string,foo,bar,property,null,assert,that,ex,get,message,contains,string,properties,cannot,be,null,for,setting
SettingTests -> public void testRejectNullProperties();1528904315;We can't have Null properties;public void testRejectNullProperties() {_        IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,_            () -> Setting.simpleString("foo.bar", (Property[]) null))__        assertThat(ex.getMessage(), containsString("properties cannot be null for setting"))__    };we,can,t,have,null,properties;public,void,test,reject,null,properties,illegal,argument,exception,ex,expect,throws,illegal,argument,exception,class,setting,simple,string,foo,bar,property,null,assert,that,ex,get,message,contains,string,properties,cannot,be,null,for,setting
SettingTests -> public void testRejectNullProperties();1535046779;We can't have Null properties;public void testRejectNullProperties() {_        IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,_            () -> Setting.simpleString("foo.bar", (Property[]) null))__        assertThat(ex.getMessage(), containsString("properties cannot be null for setting"))__    };we,can,t,have,null,properties;public,void,test,reject,null,properties,illegal,argument,exception,ex,expect,throws,illegal,argument,exception,class,setting,simple,string,foo,bar,property,null,assert,that,ex,get,message,contains,string,properties,cannot,be,null,for,setting
SettingTests -> public void testRejectNullProperties();1536137328;We can't have Null properties;public void testRejectNullProperties() {_        IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,_            () -> Setting.simpleString("foo.bar", (Property[]) null))__        assertThat(ex.getMessage(), containsString("properties cannot be null for setting"))__    };we,can,t,have,null,properties;public,void,test,reject,null,properties,illegal,argument,exception,ex,expect,throws,illegal,argument,exception,class,setting,simple,string,foo,bar,property,null,assert,that,ex,get,message,contains,string,properties,cannot,be,null,for,setting
SettingTests -> public void testRejectNullProperties();1536177418;We can't have Null properties;public void testRejectNullProperties() {_        IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,_            () -> Setting.simpleString("foo.bar", (Property[]) null))__        assertThat(ex.getMessage(), containsString("properties cannot be null for setting"))__    };we,can,t,have,null,properties;public,void,test,reject,null,properties,illegal,argument,exception,ex,expect,throws,illegal,argument,exception,class,setting,simple,string,foo,bar,property,null,assert,that,ex,get,message,contains,string,properties,cannot,be,null,for,setting
SettingTests -> public void testRejectNullProperties();1536611444;We can't have Null properties;public void testRejectNullProperties() {_        IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,_            () -> Setting.simpleString("foo.bar", (Property[]) null))__        assertThat(ex.getMessage(), containsString("properties cannot be null for setting"))__    };we,can,t,have,null,properties;public,void,test,reject,null,properties,illegal,argument,exception,ex,expect,throws,illegal,argument,exception,class,setting,simple,string,foo,bar,property,null,assert,that,ex,get,message,contains,string,properties,cannot,be,null,for,setting
SettingTests -> public void testRejectNullProperties();1536828374;We can't have Null properties;public void testRejectNullProperties() {_        IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,_            () -> Setting.simpleString("foo.bar", (Property[]) null))__        assertThat(ex.getMessage(), containsString("properties cannot be null for setting"))__    };we,can,t,have,null,properties;public,void,test,reject,null,properties,illegal,argument,exception,ex,expect,throws,illegal,argument,exception,class,setting,simple,string,foo,bar,property,null,assert,that,ex,get,message,contains,string,properties,cannot,be,null,for,setting
SettingTests -> public void testRejectNullProperties();1536964057;We can't have Null properties;public void testRejectNullProperties() {_        IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,_            () -> Setting.simpleString("foo.bar", (Property[]) null))__        assertThat(ex.getMessage(), containsString("properties cannot be null for setting"))__    };we,can,t,have,null,properties;public,void,test,reject,null,properties,illegal,argument,exception,ex,expect,throws,illegal,argument,exception,class,setting,simple,string,foo,bar,property,null,assert,that,ex,get,message,contains,string,properties,cannot,be,null,for,setting
SettingTests -> public void testRejectNullProperties();1539951844;We can't have Null properties;public void testRejectNullProperties() {_        IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,_            () -> Setting.simpleString("foo.bar", (Property[]) null))__        assertThat(ex.getMessage(), containsString("properties cannot be null for setting"))__    };we,can,t,have,null,properties;public,void,test,reject,null,properties,illegal,argument,exception,ex,expect,throws,illegal,argument,exception,class,setting,simple,string,foo,bar,property,null,assert,that,ex,get,message,contains,string,properties,cannot,be,null,for,setting
SettingTests -> public void testRejectNullProperties();1544081506;We can't have Null properties;public void testRejectNullProperties() {_        IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,_            () -> Setting.simpleString("foo.bar", (Property[]) null))__        assertThat(ex.getMessage(), containsString("properties cannot be null for setting"))__    };we,can,t,have,null,properties;public,void,test,reject,null,properties,illegal,argument,exception,ex,expect,throws,illegal,argument,exception,class,setting,simple,string,foo,bar,property,null,assert,that,ex,get,message,contains,string,properties,cannot,be,null,for,setting
SettingTests -> public void testRejectNullProperties();1546877578;We can't have Null properties;public void testRejectNullProperties() {_        IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,_            () -> Setting.simpleString("foo.bar", (Property[]) null))__        assertThat(ex.getMessage(), containsString("properties cannot be null for setting"))__    };we,can,t,have,null,properties;public,void,test,reject,null,properties,illegal,argument,exception,ex,expect,throws,illegal,argument,exception,class,setting,simple,string,foo,bar,property,null,assert,that,ex,get,message,contains,string,properties,cannot,be,null,for,setting
SettingTests -> public void testMutuallyExclusiveScopes();1524684173;Only one single scope can be added to any setting;public void testMutuallyExclusiveScopes() {_        _        Setting<String> setting = Setting.simpleString("foo.bar", Property.NodeScope)__        assertThat(setting.hasNodeScope(), is(true))__        assertThat(setting.hasIndexScope(), is(false))__        setting = Setting.simpleString("foo.bar", Property.IndexScope)__        assertThat(setting.hasIndexScope(), is(true))__        assertThat(setting.hasNodeScope(), is(false))___        _        setting = Setting.simpleString("foo.bar")__        assertThat(setting.hasIndexScope(), is(false))__        assertThat(setting.hasNodeScope(), is(false))___        _        setting = Setting.simpleString("foo.bar", Property.IndexScope, Property.NodeScope)__        assertThat(setting.hasIndexScope(), is(true))__        assertThat(setting.hasNodeScope(), is(true))__    };only,one,single,scope,can,be,added,to,any,setting;public,void,test,mutually,exclusive,scopes,setting,string,setting,setting,simple,string,foo,bar,property,node,scope,assert,that,setting,has,node,scope,is,true,assert,that,setting,has,index,scope,is,false,setting,setting,simple,string,foo,bar,property,index,scope,assert,that,setting,has,index,scope,is,true,assert,that,setting,has,node,scope,is,false,setting,setting,simple,string,foo,bar,assert,that,setting,has,index,scope,is,false,assert,that,setting,has,node,scope,is,false,setting,setting,simple,string,foo,bar,property,index,scope,property,node,scope,assert,that,setting,has,index,scope,is,true,assert,that,setting,has,node,scope,is,true
SettingTests -> public void testMutuallyExclusiveScopes();1525248068;Only one single scope can be added to any setting;public void testMutuallyExclusiveScopes() {_        _        Setting<String> setting = Setting.simpleString("foo.bar", Property.NodeScope)__        assertThat(setting.hasNodeScope(), is(true))__        assertThat(setting.hasIndexScope(), is(false))__        setting = Setting.simpleString("foo.bar", Property.IndexScope)__        assertThat(setting.hasIndexScope(), is(true))__        assertThat(setting.hasNodeScope(), is(false))___        _        setting = Setting.simpleString("foo.bar")__        assertThat(setting.hasIndexScope(), is(false))__        assertThat(setting.hasNodeScope(), is(false))___        _        setting = Setting.simpleString("foo.bar", Property.IndexScope, Property.NodeScope)__        assertThat(setting.hasIndexScope(), is(true))__        assertThat(setting.hasNodeScope(), is(true))__    };only,one,single,scope,can,be,added,to,any,setting;public,void,test,mutually,exclusive,scopes,setting,string,setting,setting,simple,string,foo,bar,property,node,scope,assert,that,setting,has,node,scope,is,true,assert,that,setting,has,index,scope,is,false,setting,setting,simple,string,foo,bar,property,index,scope,assert,that,setting,has,index,scope,is,true,assert,that,setting,has,node,scope,is,false,setting,setting,simple,string,foo,bar,assert,that,setting,has,index,scope,is,false,assert,that,setting,has,node,scope,is,false,setting,setting,simple,string,foo,bar,property,index,scope,property,node,scope,assert,that,setting,has,index,scope,is,true,assert,that,setting,has,node,scope,is,true
SettingTests -> public void testMutuallyExclusiveScopes();1528904315;Only one single scope can be added to any setting;public void testMutuallyExclusiveScopes() {_        _        Setting<String> setting = Setting.simpleString("foo.bar", Property.NodeScope)__        assertThat(setting.hasNodeScope(), is(true))__        assertThat(setting.hasIndexScope(), is(false))__        setting = Setting.simpleString("foo.bar", Property.IndexScope)__        assertThat(setting.hasIndexScope(), is(true))__        assertThat(setting.hasNodeScope(), is(false))___        _        setting = Setting.simpleString("foo.bar")__        assertThat(setting.hasIndexScope(), is(false))__        assertThat(setting.hasNodeScope(), is(false))___        _        setting = Setting.simpleString("foo.bar", Property.IndexScope, Property.NodeScope)__        assertThat(setting.hasIndexScope(), is(true))__        assertThat(setting.hasNodeScope(), is(true))__    };only,one,single,scope,can,be,added,to,any,setting;public,void,test,mutually,exclusive,scopes,setting,string,setting,setting,simple,string,foo,bar,property,node,scope,assert,that,setting,has,node,scope,is,true,assert,that,setting,has,index,scope,is,false,setting,setting,simple,string,foo,bar,property,index,scope,assert,that,setting,has,index,scope,is,true,assert,that,setting,has,node,scope,is,false,setting,setting,simple,string,foo,bar,assert,that,setting,has,index,scope,is,false,assert,that,setting,has,node,scope,is,false,setting,setting,simple,string,foo,bar,property,index,scope,property,node,scope,assert,that,setting,has,index,scope,is,true,assert,that,setting,has,node,scope,is,true
SettingTests -> public void testMutuallyExclusiveScopes();1535046779;Only one single scope can be added to any setting;public void testMutuallyExclusiveScopes() {_        _        Setting<String> setting = Setting.simpleString("foo.bar", Property.NodeScope)__        assertThat(setting.hasNodeScope(), is(true))__        assertThat(setting.hasIndexScope(), is(false))__        setting = Setting.simpleString("foo.bar", Property.IndexScope)__        assertThat(setting.hasIndexScope(), is(true))__        assertThat(setting.hasNodeScope(), is(false))___        _        setting = Setting.simpleString("foo.bar")__        assertThat(setting.hasIndexScope(), is(false))__        assertThat(setting.hasNodeScope(), is(false))___        _        setting = Setting.simpleString("foo.bar", Property.IndexScope, Property.NodeScope)__        assertThat(setting.hasIndexScope(), is(true))__        assertThat(setting.hasNodeScope(), is(true))__    };only,one,single,scope,can,be,added,to,any,setting;public,void,test,mutually,exclusive,scopes,setting,string,setting,setting,simple,string,foo,bar,property,node,scope,assert,that,setting,has,node,scope,is,true,assert,that,setting,has,index,scope,is,false,setting,setting,simple,string,foo,bar,property,index,scope,assert,that,setting,has,index,scope,is,true,assert,that,setting,has,node,scope,is,false,setting,setting,simple,string,foo,bar,assert,that,setting,has,index,scope,is,false,assert,that,setting,has,node,scope,is,false,setting,setting,simple,string,foo,bar,property,index,scope,property,node,scope,assert,that,setting,has,index,scope,is,true,assert,that,setting,has,node,scope,is,true
SettingTests -> public void testMutuallyExclusiveScopes();1536137328;Only one single scope can be added to any setting;public void testMutuallyExclusiveScopes() {_        _        Setting<String> setting = Setting.simpleString("foo.bar", Property.NodeScope)__        assertThat(setting.hasNodeScope(), is(true))__        assertThat(setting.hasIndexScope(), is(false))__        setting = Setting.simpleString("foo.bar", Property.IndexScope)__        assertThat(setting.hasIndexScope(), is(true))__        assertThat(setting.hasNodeScope(), is(false))___        _        setting = Setting.simpleString("foo.bar")__        assertThat(setting.hasIndexScope(), is(false))__        assertThat(setting.hasNodeScope(), is(false))___        _        setting = Setting.simpleString("foo.bar", Property.IndexScope, Property.NodeScope)__        assertThat(setting.hasIndexScope(), is(true))__        assertThat(setting.hasNodeScope(), is(true))__    };only,one,single,scope,can,be,added,to,any,setting;public,void,test,mutually,exclusive,scopes,setting,string,setting,setting,simple,string,foo,bar,property,node,scope,assert,that,setting,has,node,scope,is,true,assert,that,setting,has,index,scope,is,false,setting,setting,simple,string,foo,bar,property,index,scope,assert,that,setting,has,index,scope,is,true,assert,that,setting,has,node,scope,is,false,setting,setting,simple,string,foo,bar,assert,that,setting,has,index,scope,is,false,assert,that,setting,has,node,scope,is,false,setting,setting,simple,string,foo,bar,property,index,scope,property,node,scope,assert,that,setting,has,index,scope,is,true,assert,that,setting,has,node,scope,is,true
SettingTests -> public void testMutuallyExclusiveScopes();1536177418;Only one single scope can be added to any setting;public void testMutuallyExclusiveScopes() {_        _        Setting<String> setting = Setting.simpleString("foo.bar", Property.NodeScope)__        assertThat(setting.hasNodeScope(), is(true))__        assertThat(setting.hasIndexScope(), is(false))__        setting = Setting.simpleString("foo.bar", Property.IndexScope)__        assertThat(setting.hasIndexScope(), is(true))__        assertThat(setting.hasNodeScope(), is(false))___        _        setting = Setting.simpleString("foo.bar")__        assertThat(setting.hasIndexScope(), is(false))__        assertThat(setting.hasNodeScope(), is(false))___        _        setting = Setting.simpleString("foo.bar", Property.IndexScope, Property.NodeScope)__        assertThat(setting.hasIndexScope(), is(true))__        assertThat(setting.hasNodeScope(), is(true))__    };only,one,single,scope,can,be,added,to,any,setting;public,void,test,mutually,exclusive,scopes,setting,string,setting,setting,simple,string,foo,bar,property,node,scope,assert,that,setting,has,node,scope,is,true,assert,that,setting,has,index,scope,is,false,setting,setting,simple,string,foo,bar,property,index,scope,assert,that,setting,has,index,scope,is,true,assert,that,setting,has,node,scope,is,false,setting,setting,simple,string,foo,bar,assert,that,setting,has,index,scope,is,false,assert,that,setting,has,node,scope,is,false,setting,setting,simple,string,foo,bar,property,index,scope,property,node,scope,assert,that,setting,has,index,scope,is,true,assert,that,setting,has,node,scope,is,true
SettingTests -> public void testMutuallyExclusiveScopes();1536611444;Only one single scope can be added to any setting;public void testMutuallyExclusiveScopes() {_        _        Setting<String> setting = Setting.simpleString("foo.bar", Property.NodeScope)__        assertThat(setting.hasNodeScope(), is(true))__        assertThat(setting.hasIndexScope(), is(false))__        setting = Setting.simpleString("foo.bar", Property.IndexScope)__        assertThat(setting.hasIndexScope(), is(true))__        assertThat(setting.hasNodeScope(), is(false))___        _        setting = Setting.simpleString("foo.bar")__        assertThat(setting.hasIndexScope(), is(false))__        assertThat(setting.hasNodeScope(), is(false))___        _        setting = Setting.simpleString("foo.bar", Property.IndexScope, Property.NodeScope)__        assertThat(setting.hasIndexScope(), is(true))__        assertThat(setting.hasNodeScope(), is(true))__    };only,one,single,scope,can,be,added,to,any,setting;public,void,test,mutually,exclusive,scopes,setting,string,setting,setting,simple,string,foo,bar,property,node,scope,assert,that,setting,has,node,scope,is,true,assert,that,setting,has,index,scope,is,false,setting,setting,simple,string,foo,bar,property,index,scope,assert,that,setting,has,index,scope,is,true,assert,that,setting,has,node,scope,is,false,setting,setting,simple,string,foo,bar,assert,that,setting,has,index,scope,is,false,assert,that,setting,has,node,scope,is,false,setting,setting,simple,string,foo,bar,property,index,scope,property,node,scope,assert,that,setting,has,index,scope,is,true,assert,that,setting,has,node,scope,is,true
SettingTests -> public void testMutuallyExclusiveScopes();1536828374;Only one single scope can be added to any setting;public void testMutuallyExclusiveScopes() {_        _        Setting<String> setting = Setting.simpleString("foo.bar", Property.NodeScope)__        assertThat(setting.hasNodeScope(), is(true))__        assertThat(setting.hasIndexScope(), is(false))__        setting = Setting.simpleString("foo.bar", Property.IndexScope)__        assertThat(setting.hasIndexScope(), is(true))__        assertThat(setting.hasNodeScope(), is(false))___        _        setting = Setting.simpleString("foo.bar")__        assertThat(setting.hasIndexScope(), is(false))__        assertThat(setting.hasNodeScope(), is(false))___        _        setting = Setting.simpleString("foo.bar", Property.IndexScope, Property.NodeScope)__        assertThat(setting.hasIndexScope(), is(true))__        assertThat(setting.hasNodeScope(), is(true))__    };only,one,single,scope,can,be,added,to,any,setting;public,void,test,mutually,exclusive,scopes,setting,string,setting,setting,simple,string,foo,bar,property,node,scope,assert,that,setting,has,node,scope,is,true,assert,that,setting,has,index,scope,is,false,setting,setting,simple,string,foo,bar,property,index,scope,assert,that,setting,has,index,scope,is,true,assert,that,setting,has,node,scope,is,false,setting,setting,simple,string,foo,bar,assert,that,setting,has,index,scope,is,false,assert,that,setting,has,node,scope,is,false,setting,setting,simple,string,foo,bar,property,index,scope,property,node,scope,assert,that,setting,has,index,scope,is,true,assert,that,setting,has,node,scope,is,true
SettingTests -> public void testMutuallyExclusiveScopes();1536964057;Only one single scope can be added to any setting;public void testMutuallyExclusiveScopes() {_        _        Setting<String> setting = Setting.simpleString("foo.bar", Property.NodeScope)__        assertThat(setting.hasNodeScope(), is(true))__        assertThat(setting.hasIndexScope(), is(false))__        setting = Setting.simpleString("foo.bar", Property.IndexScope)__        assertThat(setting.hasIndexScope(), is(true))__        assertThat(setting.hasNodeScope(), is(false))___        _        setting = Setting.simpleString("foo.bar")__        assertThat(setting.hasIndexScope(), is(false))__        assertThat(setting.hasNodeScope(), is(false))___        _        setting = Setting.simpleString("foo.bar", Property.IndexScope, Property.NodeScope)__        assertThat(setting.hasIndexScope(), is(true))__        assertThat(setting.hasNodeScope(), is(true))__    };only,one,single,scope,can,be,added,to,any,setting;public,void,test,mutually,exclusive,scopes,setting,string,setting,setting,simple,string,foo,bar,property,node,scope,assert,that,setting,has,node,scope,is,true,assert,that,setting,has,index,scope,is,false,setting,setting,simple,string,foo,bar,property,index,scope,assert,that,setting,has,index,scope,is,true,assert,that,setting,has,node,scope,is,false,setting,setting,simple,string,foo,bar,assert,that,setting,has,index,scope,is,false,assert,that,setting,has,node,scope,is,false,setting,setting,simple,string,foo,bar,property,index,scope,property,node,scope,assert,that,setting,has,index,scope,is,true,assert,that,setting,has,node,scope,is,true
SettingTests -> public void testMutuallyExclusiveScopes();1539951844;Only one single scope can be added to any setting;public void testMutuallyExclusiveScopes() {_        _        Setting<String> setting = Setting.simpleString("foo.bar", Property.NodeScope)__        assertThat(setting.hasNodeScope(), is(true))__        assertThat(setting.hasIndexScope(), is(false))__        setting = Setting.simpleString("foo.bar", Property.IndexScope)__        assertThat(setting.hasIndexScope(), is(true))__        assertThat(setting.hasNodeScope(), is(false))___        _        setting = Setting.simpleString("foo.bar")__        assertThat(setting.hasIndexScope(), is(false))__        assertThat(setting.hasNodeScope(), is(false))___        _        setting = Setting.simpleString("foo.bar", Property.IndexScope, Property.NodeScope)__        assertThat(setting.hasIndexScope(), is(true))__        assertThat(setting.hasNodeScope(), is(true))__    };only,one,single,scope,can,be,added,to,any,setting;public,void,test,mutually,exclusive,scopes,setting,string,setting,setting,simple,string,foo,bar,property,node,scope,assert,that,setting,has,node,scope,is,true,assert,that,setting,has,index,scope,is,false,setting,setting,simple,string,foo,bar,property,index,scope,assert,that,setting,has,index,scope,is,true,assert,that,setting,has,node,scope,is,false,setting,setting,simple,string,foo,bar,assert,that,setting,has,index,scope,is,false,assert,that,setting,has,node,scope,is,false,setting,setting,simple,string,foo,bar,property,index,scope,property,node,scope,assert,that,setting,has,index,scope,is,true,assert,that,setting,has,node,scope,is,true
SettingTests -> public void testMutuallyExclusiveScopes();1544081506;Only one single scope can be added to any setting;public void testMutuallyExclusiveScopes() {_        _        Setting<String> setting = Setting.simpleString("foo.bar", Property.NodeScope)__        assertThat(setting.hasNodeScope(), is(true))__        assertThat(setting.hasIndexScope(), is(false))__        setting = Setting.simpleString("foo.bar", Property.IndexScope)__        assertThat(setting.hasIndexScope(), is(true))__        assertThat(setting.hasNodeScope(), is(false))___        _        setting = Setting.simpleString("foo.bar")__        assertThat(setting.hasIndexScope(), is(false))__        assertThat(setting.hasNodeScope(), is(false))___        _        setting = Setting.simpleString("foo.bar", Property.IndexScope, Property.NodeScope)__        assertThat(setting.hasIndexScope(), is(true))__        assertThat(setting.hasNodeScope(), is(true))__    };only,one,single,scope,can,be,added,to,any,setting;public,void,test,mutually,exclusive,scopes,setting,string,setting,setting,simple,string,foo,bar,property,node,scope,assert,that,setting,has,node,scope,is,true,assert,that,setting,has,index,scope,is,false,setting,setting,simple,string,foo,bar,property,index,scope,assert,that,setting,has,index,scope,is,true,assert,that,setting,has,node,scope,is,false,setting,setting,simple,string,foo,bar,assert,that,setting,has,index,scope,is,false,assert,that,setting,has,node,scope,is,false,setting,setting,simple,string,foo,bar,property,index,scope,property,node,scope,assert,that,setting,has,index,scope,is,true,assert,that,setting,has,node,scope,is,true
SettingTests -> public void testMutuallyExclusiveScopes();1546877578;Only one single scope can be added to any setting;public void testMutuallyExclusiveScopes() {_        _        Setting<String> setting = Setting.simpleString("foo.bar", Property.NodeScope)__        assertThat(setting.hasNodeScope(), is(true))__        assertThat(setting.hasIndexScope(), is(false))__        setting = Setting.simpleString("foo.bar", Property.IndexScope)__        assertThat(setting.hasIndexScope(), is(true))__        assertThat(setting.hasNodeScope(), is(false))___        _        setting = Setting.simpleString("foo.bar")__        assertThat(setting.hasIndexScope(), is(false))__        assertThat(setting.hasNodeScope(), is(false))___        _        setting = Setting.simpleString("foo.bar", Property.IndexScope, Property.NodeScope)__        assertThat(setting.hasIndexScope(), is(true))__        assertThat(setting.hasNodeScope(), is(true))__    };only,one,single,scope,can,be,added,to,any,setting;public,void,test,mutually,exclusive,scopes,setting,string,setting,setting,simple,string,foo,bar,property,node,scope,assert,that,setting,has,node,scope,is,true,assert,that,setting,has,index,scope,is,false,setting,setting,simple,string,foo,bar,property,index,scope,assert,that,setting,has,index,scope,is,true,assert,that,setting,has,node,scope,is,false,setting,setting,simple,string,foo,bar,assert,that,setting,has,index,scope,is,false,assert,that,setting,has,node,scope,is,false,setting,setting,simple,string,foo,bar,property,index,scope,property,node,scope,assert,that,setting,has,index,scope,is,true,assert,that,setting,has,node,scope,is,true
