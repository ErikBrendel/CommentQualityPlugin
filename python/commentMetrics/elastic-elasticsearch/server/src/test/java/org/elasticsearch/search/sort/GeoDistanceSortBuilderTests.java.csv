# id;timestamp;commentText;codeText;commentWords;codeWords
GeoDistanceSortBuilderTests -> public void testNestedSortRewrites() throws IOException;1524684173;Test the nested sort gets rewritten;public void testNestedSortRewrites() throws IOException {_        GeoDistanceSortBuilder sortBuilder = new GeoDistanceSortBuilder("fieldName", 0.0, 0.0)__        RangeQueryBuilder rangeQuery = new RangeQueryBuilder("fieldName") {_            @Override_            public QueryBuilder doRewrite(QueryRewriteContext queryShardContext) throws IOException {_                return new MatchNoneQueryBuilder()__            }_        }__        sortBuilder.setNestedSort(new NestedSortBuilder("path").setFilter(rangeQuery))__        GeoDistanceSortBuilder rewritten = (GeoDistanceSortBuilder) sortBuilder_                .rewrite(createMockShardContext())__        assertNotSame(rangeQuery, rewritten.getNestedSort().getFilter())__    };test,the,nested,sort,gets,rewritten;public,void,test,nested,sort,rewrites,throws,ioexception,geo,distance,sort,builder,sort,builder,new,geo,distance,sort,builder,field,name,0,0,0,0,range,query,builder,range,query,new,range,query,builder,field,name,override,public,query,builder,do,rewrite,query,rewrite,context,query,shard,context,throws,ioexception,return,new,match,none,query,builder,sort,builder,set,nested,sort,new,nested,sort,builder,path,set,filter,range,query,geo,distance,sort,builder,rewritten,geo,distance,sort,builder,sort,builder,rewrite,create,mock,shard,context,assert,not,same,range,query,rewritten,get,nested,sort,get,filter
GeoDistanceSortBuilderTests -> public void testNestedSortRewrites() throws IOException;1528706846;Test the nested sort gets rewritten;public void testNestedSortRewrites() throws IOException {_        GeoDistanceSortBuilder sortBuilder = new GeoDistanceSortBuilder("fieldName", 0.0, 0.0)__        RangeQueryBuilder rangeQuery = new RangeQueryBuilder("fieldName") {_            @Override_            public QueryBuilder doRewrite(QueryRewriteContext queryShardContext) throws IOException {_                return new MatchNoneQueryBuilder()__            }_        }__        sortBuilder.setNestedSort(new NestedSortBuilder("path").setFilter(rangeQuery))__        GeoDistanceSortBuilder rewritten = (GeoDistanceSortBuilder) sortBuilder_                .rewrite(createMockShardContext())__        assertNotSame(rangeQuery, rewritten.getNestedSort().getFilter())__    };test,the,nested,sort,gets,rewritten;public,void,test,nested,sort,rewrites,throws,ioexception,geo,distance,sort,builder,sort,builder,new,geo,distance,sort,builder,field,name,0,0,0,0,range,query,builder,range,query,new,range,query,builder,field,name,override,public,query,builder,do,rewrite,query,rewrite,context,query,shard,context,throws,ioexception,return,new,match,none,query,builder,sort,builder,set,nested,sort,new,nested,sort,builder,path,set,filter,range,query,geo,distance,sort,builder,rewritten,geo,distance,sort,builder,sort,builder,rewrite,create,mock,shard,context,assert,not,same,range,query,rewritten,get,nested,sort,get,filter
GeoDistanceSortBuilderTests -> public void testNestedSortRewrites() throws IOException;1528762805;Test the nested sort gets rewritten;public void testNestedSortRewrites() throws IOException {_        GeoDistanceSortBuilder sortBuilder = new GeoDistanceSortBuilder("fieldName", 0.0, 0.0)__        RangeQueryBuilder rangeQuery = new RangeQueryBuilder("fieldName") {_            @Override_            public QueryBuilder doRewrite(QueryRewriteContext queryShardContext) throws IOException {_                return new MatchNoneQueryBuilder()__            }_        }__        sortBuilder.setNestedSort(new NestedSortBuilder("path").setFilter(rangeQuery))__        GeoDistanceSortBuilder rewritten = (GeoDistanceSortBuilder) sortBuilder_                .rewrite(createMockShardContext())__        assertNotSame(rangeQuery, rewritten.getNestedSort().getFilter())__    };test,the,nested,sort,gets,rewritten;public,void,test,nested,sort,rewrites,throws,ioexception,geo,distance,sort,builder,sort,builder,new,geo,distance,sort,builder,field,name,0,0,0,0,range,query,builder,range,query,new,range,query,builder,field,name,override,public,query,builder,do,rewrite,query,rewrite,context,query,shard,context,throws,ioexception,return,new,match,none,query,builder,sort,builder,set,nested,sort,new,nested,sort,builder,path,set,filter,range,query,geo,distance,sort,builder,rewritten,geo,distance,sort,builder,sort,builder,rewrite,create,mock,shard,context,assert,not,same,range,query,rewritten,get,nested,sort,get,filter
GeoDistanceSortBuilderTests -> public void testNestedSortRewrites() throws IOException;1529916084;Test the nested sort gets rewritten;public void testNestedSortRewrites() throws IOException {_        GeoDistanceSortBuilder sortBuilder = new GeoDistanceSortBuilder("fieldName", 0.0, 0.0)__        RangeQueryBuilder rangeQuery = new RangeQueryBuilder("fieldName") {_            @Override_            public QueryBuilder doRewrite(QueryRewriteContext queryShardContext) throws IOException {_                return new MatchNoneQueryBuilder()__            }_        }__        sortBuilder.setNestedSort(new NestedSortBuilder("path").setFilter(rangeQuery))__        GeoDistanceSortBuilder rewritten = (GeoDistanceSortBuilder) sortBuilder_                .rewrite(createMockShardContext())__        assertNotSame(rangeQuery, rewritten.getNestedSort().getFilter())__    };test,the,nested,sort,gets,rewritten;public,void,test,nested,sort,rewrites,throws,ioexception,geo,distance,sort,builder,sort,builder,new,geo,distance,sort,builder,field,name,0,0,0,0,range,query,builder,range,query,new,range,query,builder,field,name,override,public,query,builder,do,rewrite,query,rewrite,context,query,shard,context,throws,ioexception,return,new,match,none,query,builder,sort,builder,set,nested,sort,new,nested,sort,builder,path,set,filter,range,query,geo,distance,sort,builder,rewritten,geo,distance,sort,builder,sort,builder,rewrite,create,mock,shard,context,assert,not,same,range,query,rewritten,get,nested,sort,get,filter
GeoDistanceSortBuilderTests -> public void testNestedSortRewrites() throws IOException;1539615817;Test the nested sort gets rewritten;public void testNestedSortRewrites() throws IOException {_        GeoDistanceSortBuilder sortBuilder = new GeoDistanceSortBuilder("fieldName", 0.0, 0.0)__        RangeQueryBuilder rangeQuery = new RangeQueryBuilder("fieldName") {_            @Override_            public QueryBuilder doRewrite(QueryRewriteContext queryShardContext) throws IOException {_                return new MatchNoneQueryBuilder()__            }_        }__        sortBuilder.setNestedSort(new NestedSortBuilder("path").setFilter(rangeQuery))__        GeoDistanceSortBuilder rewritten = (GeoDistanceSortBuilder) sortBuilder_                .rewrite(createMockShardContext())__        assertNotSame(rangeQuery, rewritten.getNestedSort().getFilter())__    };test,the,nested,sort,gets,rewritten;public,void,test,nested,sort,rewrites,throws,ioexception,geo,distance,sort,builder,sort,builder,new,geo,distance,sort,builder,field,name,0,0,0,0,range,query,builder,range,query,new,range,query,builder,field,name,override,public,query,builder,do,rewrite,query,rewrite,context,query,shard,context,throws,ioexception,return,new,match,none,query,builder,sort,builder,set,nested,sort,new,nested,sort,builder,path,set,filter,range,query,geo,distance,sort,builder,rewritten,geo,distance,sort,builder,sort,builder,rewrite,create,mock,shard,context,assert,not,same,range,query,rewritten,get,nested,sort,get,filter
GeoDistanceSortBuilderTests -> public void testBuildNested() throws IOException;1524684173;Test that the sort builder nested object gets created in the SortField;public void testBuildNested() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()___        GeoDistanceSortBuilder sortBuilder = new GeoDistanceSortBuilder("fieldName", 1.0, 1.0)_                .setNestedSort(new NestedSortBuilder("path").setFilter(QueryBuilders.matchAllQuery()))__        SortField sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        XFieldComparatorSource comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        Nested nested = comparatorSource.nested()__        assertNotNull(nested)__        assertEquals(new MatchAllDocsQuery(), nested.getInnerQuery())___        sortBuilder = new GeoDistanceSortBuilder("fieldName", 1.0, 1.0).setNestedPath("path")__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        nested = comparatorSource.nested()__        assertNotNull(nested)__        assertEquals(new TermQuery(new Term(TypeFieldMapper.NAME, "__path")), nested.getInnerQuery())___        sortBuilder = new GeoDistanceSortBuilder("fieldName", 1.0, 1.0).setNestedPath("path")_                .setNestedFilter(QueryBuilders.matchAllQuery())__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        nested = comparatorSource.nested()__        assertNotNull(nested)__        assertEquals(new MatchAllDocsQuery(), nested.getInnerQuery())___        _        _        sortBuilder = new GeoDistanceSortBuilder("fieldName", 1.0, 1.0).setNestedFilter(QueryBuilders.termQuery("fieldName", "value"))__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField, instanceOf(SortField.class))__    };test,that,the,sort,builder,nested,object,gets,created,in,the,sort,field;public,void,test,build,nested,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,geo,distance,sort,builder,sort,builder,new,geo,distance,sort,builder,field,name,1,0,1,0,set,nested,sort,new,nested,sort,builder,path,set,filter,query,builders,match,all,query,sort,field,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,xfield,comparator,source,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,nested,nested,comparator,source,nested,assert,not,null,nested,assert,equals,new,match,all,docs,query,nested,get,inner,query,sort,builder,new,geo,distance,sort,builder,field,name,1,0,1,0,set,nested,path,path,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,nested,comparator,source,nested,assert,not,null,nested,assert,equals,new,term,query,new,term,type,field,mapper,name,nested,get,inner,query,sort,builder,new,geo,distance,sort,builder,field,name,1,0,1,0,set,nested,path,path,set,nested,filter,query,builders,match,all,query,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,nested,comparator,source,nested,assert,not,null,nested,assert,equals,new,match,all,docs,query,nested,get,inner,query,sort,builder,new,geo,distance,sort,builder,field,name,1,0,1,0,set,nested,filter,query,builders,term,query,field,name,value,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,instance,of,sort,field,class
GeoDistanceSortBuilderTests -> public void testBuildNested() throws IOException;1528706846;Test that the sort builder nested object gets created in the SortField;public void testBuildNested() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()___        GeoDistanceSortBuilder sortBuilder = new GeoDistanceSortBuilder("fieldName", 1.0, 1.0)_                .setNestedSort(new NestedSortBuilder("path").setFilter(QueryBuilders.matchAllQuery()))__        SortField sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        XFieldComparatorSource comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        Nested nested = comparatorSource.nested()__        assertNotNull(nested)__        assertEquals(new MatchAllDocsQuery(), nested.getInnerQuery())___        sortBuilder = new GeoDistanceSortBuilder("fieldName", 1.0, 1.0).setNestedPath("path")__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        nested = comparatorSource.nested()__        assertNotNull(nested)__        assertEquals(new TermQuery(new Term(TypeFieldMapper.NAME, "__path")), nested.getInnerQuery())___        sortBuilder = new GeoDistanceSortBuilder("fieldName", 1.0, 1.0).setNestedPath("path")_                .setNestedFilter(QueryBuilders.matchAllQuery())__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        nested = comparatorSource.nested()__        assertNotNull(nested)__        assertEquals(new MatchAllDocsQuery(), nested.getInnerQuery())___        _        _        sortBuilder = new GeoDistanceSortBuilder("fieldName", 1.0, 1.0).setNestedFilter(QueryBuilders.termQuery("fieldName", "value"))__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField, instanceOf(SortField.class))__    };test,that,the,sort,builder,nested,object,gets,created,in,the,sort,field;public,void,test,build,nested,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,geo,distance,sort,builder,sort,builder,new,geo,distance,sort,builder,field,name,1,0,1,0,set,nested,sort,new,nested,sort,builder,path,set,filter,query,builders,match,all,query,sort,field,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,xfield,comparator,source,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,nested,nested,comparator,source,nested,assert,not,null,nested,assert,equals,new,match,all,docs,query,nested,get,inner,query,sort,builder,new,geo,distance,sort,builder,field,name,1,0,1,0,set,nested,path,path,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,nested,comparator,source,nested,assert,not,null,nested,assert,equals,new,term,query,new,term,type,field,mapper,name,nested,get,inner,query,sort,builder,new,geo,distance,sort,builder,field,name,1,0,1,0,set,nested,path,path,set,nested,filter,query,builders,match,all,query,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,nested,comparator,source,nested,assert,not,null,nested,assert,equals,new,match,all,docs,query,nested,get,inner,query,sort,builder,new,geo,distance,sort,builder,field,name,1,0,1,0,set,nested,filter,query,builders,term,query,field,name,value,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,instance,of,sort,field,class
GeoDistanceSortBuilderTests -> public void testBuildNested() throws IOException;1528762805;Test that the sort builder nested object gets created in the SortField;public void testBuildNested() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()___        GeoDistanceSortBuilder sortBuilder = new GeoDistanceSortBuilder("fieldName", 1.0, 1.0)_                .setNestedSort(new NestedSortBuilder("path").setFilter(QueryBuilders.matchAllQuery()))__        SortField sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        XFieldComparatorSource comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        Nested nested = comparatorSource.nested()__        assertNotNull(nested)__        assertEquals(new MatchAllDocsQuery(), nested.getInnerQuery())___        sortBuilder = new GeoDistanceSortBuilder("fieldName", 1.0, 1.0).setNestedPath("path")__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        nested = comparatorSource.nested()__        assertNotNull(nested)__        assertEquals(new TermQuery(new Term(TypeFieldMapper.NAME, "__path")), nested.getInnerQuery())___        sortBuilder = new GeoDistanceSortBuilder("fieldName", 1.0, 1.0).setNestedPath("path")_                .setNestedFilter(QueryBuilders.matchAllQuery())__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        nested = comparatorSource.nested()__        assertNotNull(nested)__        assertEquals(new MatchAllDocsQuery(), nested.getInnerQuery())___        _        _        sortBuilder = new GeoDistanceSortBuilder("fieldName", 1.0, 1.0).setNestedFilter(QueryBuilders.termQuery("fieldName", "value"))__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField, instanceOf(SortField.class))__    };test,that,the,sort,builder,nested,object,gets,created,in,the,sort,field;public,void,test,build,nested,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,geo,distance,sort,builder,sort,builder,new,geo,distance,sort,builder,field,name,1,0,1,0,set,nested,sort,new,nested,sort,builder,path,set,filter,query,builders,match,all,query,sort,field,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,xfield,comparator,source,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,nested,nested,comparator,source,nested,assert,not,null,nested,assert,equals,new,match,all,docs,query,nested,get,inner,query,sort,builder,new,geo,distance,sort,builder,field,name,1,0,1,0,set,nested,path,path,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,nested,comparator,source,nested,assert,not,null,nested,assert,equals,new,term,query,new,term,type,field,mapper,name,nested,get,inner,query,sort,builder,new,geo,distance,sort,builder,field,name,1,0,1,0,set,nested,path,path,set,nested,filter,query,builders,match,all,query,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,nested,comparator,source,nested,assert,not,null,nested,assert,equals,new,match,all,docs,query,nested,get,inner,query,sort,builder,new,geo,distance,sort,builder,field,name,1,0,1,0,set,nested,filter,query,builders,term,query,field,name,value,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,instance,of,sort,field,class
GeoDistanceSortBuilderTests -> public void testBuildNested() throws IOException;1529916084;Test that the sort builder nested object gets created in the SortField;public void testBuildNested() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()___        GeoDistanceSortBuilder sortBuilder = new GeoDistanceSortBuilder("fieldName", 1.0, 1.0)_                .setNestedSort(new NestedSortBuilder("path").setFilter(QueryBuilders.matchAllQuery()))__        SortField sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        XFieldComparatorSource comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        Nested nested = comparatorSource.nested()__        assertNotNull(nested)__        assertEquals(new MatchAllDocsQuery(), nested.getInnerQuery())___        sortBuilder = new GeoDistanceSortBuilder("fieldName", 1.0, 1.0).setNestedPath("path")__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        nested = comparatorSource.nested()__        assertNotNull(nested)__        assertEquals(new TermQuery(new Term(TypeFieldMapper.NAME, "__path")), nested.getInnerQuery())___        sortBuilder = new GeoDistanceSortBuilder("fieldName", 1.0, 1.0).setNestedPath("path")_                .setNestedFilter(QueryBuilders.matchAllQuery())__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        nested = comparatorSource.nested()__        assertNotNull(nested)__        assertEquals(new MatchAllDocsQuery(), nested.getInnerQuery())___        _        _        sortBuilder = new GeoDistanceSortBuilder("fieldName", 1.0, 1.0).setNestedFilter(QueryBuilders.termQuery("fieldName", "value"))__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField, instanceOf(SortField.class))__    };test,that,the,sort,builder,nested,object,gets,created,in,the,sort,field;public,void,test,build,nested,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,geo,distance,sort,builder,sort,builder,new,geo,distance,sort,builder,field,name,1,0,1,0,set,nested,sort,new,nested,sort,builder,path,set,filter,query,builders,match,all,query,sort,field,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,xfield,comparator,source,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,nested,nested,comparator,source,nested,assert,not,null,nested,assert,equals,new,match,all,docs,query,nested,get,inner,query,sort,builder,new,geo,distance,sort,builder,field,name,1,0,1,0,set,nested,path,path,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,nested,comparator,source,nested,assert,not,null,nested,assert,equals,new,term,query,new,term,type,field,mapper,name,nested,get,inner,query,sort,builder,new,geo,distance,sort,builder,field,name,1,0,1,0,set,nested,path,path,set,nested,filter,query,builders,match,all,query,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,nested,comparator,source,nested,assert,not,null,nested,assert,equals,new,match,all,docs,query,nested,get,inner,query,sort,builder,new,geo,distance,sort,builder,field,name,1,0,1,0,set,nested,filter,query,builders,term,query,field,name,value,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,instance,of,sort,field,class
GeoDistanceSortBuilderTests -> public void testBuildNested() throws IOException;1539615817;Test that the sort builder nested object gets created in the SortField;public void testBuildNested() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()___        GeoDistanceSortBuilder sortBuilder = new GeoDistanceSortBuilder("fieldName", 1.0, 1.0)_                .setNestedSort(new NestedSortBuilder("path").setFilter(QueryBuilders.matchAllQuery()))__        SortField sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        XFieldComparatorSource comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        Nested nested = comparatorSource.nested()__        assertNotNull(nested)__        assertEquals(new MatchAllDocsQuery(), nested.getInnerQuery())___        sortBuilder = new GeoDistanceSortBuilder("fieldName", 1.0, 1.0).setNestedPath("path")__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        nested = comparatorSource.nested()__        assertNotNull(nested)__        assertEquals(new TermQuery(new Term(TypeFieldMapper.NAME, "__path")), nested.getInnerQuery())___        sortBuilder = new GeoDistanceSortBuilder("fieldName", 1.0, 1.0).setNestedPath("path")_                .setNestedFilter(QueryBuilders.matchAllQuery())__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        nested = comparatorSource.nested()__        assertNotNull(nested)__        assertEquals(new MatchAllDocsQuery(), nested.getInnerQuery())___        _        _        sortBuilder = new GeoDistanceSortBuilder("fieldName", 1.0, 1.0).setNestedFilter(QueryBuilders.termQuery("fieldName", "value"))__        sortField = sortBuilder.build(shardContextMock).field__        assertThat(sortField, instanceOf(SortField.class))__    };test,that,the,sort,builder,nested,object,gets,created,in,the,sort,field;public,void,test,build,nested,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,geo,distance,sort,builder,sort,builder,new,geo,distance,sort,builder,field,name,1,0,1,0,set,nested,sort,new,nested,sort,builder,path,set,filter,query,builders,match,all,query,sort,field,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,xfield,comparator,source,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,nested,nested,comparator,source,nested,assert,not,null,nested,assert,equals,new,match,all,docs,query,nested,get,inner,query,sort,builder,new,geo,distance,sort,builder,field,name,1,0,1,0,set,nested,path,path,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,nested,comparator,source,nested,assert,not,null,nested,assert,equals,new,term,query,new,term,type,field,mapper,name,nested,get,inner,query,sort,builder,new,geo,distance,sort,builder,field,name,1,0,1,0,set,nested,path,path,set,nested,filter,query,builders,match,all,query,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,nested,comparator,source,nested,assert,not,null,nested,assert,equals,new,match,all,docs,query,nested,get,inner,query,sort,builder,new,geo,distance,sort,builder,field,name,1,0,1,0,set,nested,filter,query,builders,term,query,field,name,value,sort,field,sort,builder,build,shard,context,mock,field,assert,that,sort,field,instance,of,sort,field,class
GeoDistanceSortBuilderTests -> public void testBuildCoerce() throws IOException;1524684173;Test that if coercion is used, a point gets normalized but the original values in the builder are unchanged;public void testBuildCoerce() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()__        GeoDistanceSortBuilder sortBuilder = new GeoDistanceSortBuilder("fieldName", -180.0, -360.0)__        sortBuilder.validation(GeoValidationMethod.COERCE)__        assertEquals(-180.0, sortBuilder.points()[0].getLat(), 0.0)__        assertEquals(-360.0, sortBuilder.points()[0].getLon(), 0.0)__        SortField sortField = sortBuilder.build(shardContextMock).field__        assertEquals(LatLonDocValuesField.newDistanceSort("fieldName", 0.0, 180.0), sortField)__    };test,that,if,coercion,is,used,a,point,gets,normalized,but,the,original,values,in,the,builder,are,unchanged;public,void,test,build,coerce,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,geo,distance,sort,builder,sort,builder,new,geo,distance,sort,builder,field,name,180,0,360,0,sort,builder,validation,geo,validation,method,coerce,assert,equals,180,0,sort,builder,points,0,get,lat,0,0,assert,equals,360,0,sort,builder,points,0,get,lon,0,0,sort,field,sort,field,sort,builder,build,shard,context,mock,field,assert,equals,lat,lon,doc,values,field,new,distance,sort,field,name,0,0,180,0,sort,field
GeoDistanceSortBuilderTests -> public void testBuildCoerce() throws IOException;1528706846;Test that if coercion is used, a point gets normalized but the original values in the builder are unchanged;public void testBuildCoerce() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()__        GeoDistanceSortBuilder sortBuilder = new GeoDistanceSortBuilder("fieldName", -180.0, -360.0)__        sortBuilder.validation(GeoValidationMethod.COERCE)__        assertEquals(-180.0, sortBuilder.points()[0].getLat(), 0.0)__        assertEquals(-360.0, sortBuilder.points()[0].getLon(), 0.0)__        SortField sortField = sortBuilder.build(shardContextMock).field__        assertEquals(LatLonDocValuesField.newDistanceSort("fieldName", 0.0, 180.0), sortField)__    };test,that,if,coercion,is,used,a,point,gets,normalized,but,the,original,values,in,the,builder,are,unchanged;public,void,test,build,coerce,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,geo,distance,sort,builder,sort,builder,new,geo,distance,sort,builder,field,name,180,0,360,0,sort,builder,validation,geo,validation,method,coerce,assert,equals,180,0,sort,builder,points,0,get,lat,0,0,assert,equals,360,0,sort,builder,points,0,get,lon,0,0,sort,field,sort,field,sort,builder,build,shard,context,mock,field,assert,equals,lat,lon,doc,values,field,new,distance,sort,field,name,0,0,180,0,sort,field
GeoDistanceSortBuilderTests -> public void testBuildCoerce() throws IOException;1528762805;Test that if coercion is used, a point gets normalized but the original values in the builder are unchanged;public void testBuildCoerce() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()__        GeoDistanceSortBuilder sortBuilder = new GeoDistanceSortBuilder("fieldName", -180.0, -360.0)__        sortBuilder.validation(GeoValidationMethod.COERCE)__        assertEquals(-180.0, sortBuilder.points()[0].getLat(), 0.0)__        assertEquals(-360.0, sortBuilder.points()[0].getLon(), 0.0)__        SortField sortField = sortBuilder.build(shardContextMock).field__        assertEquals(LatLonDocValuesField.newDistanceSort("fieldName", 0.0, 180.0), sortField)__    };test,that,if,coercion,is,used,a,point,gets,normalized,but,the,original,values,in,the,builder,are,unchanged;public,void,test,build,coerce,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,geo,distance,sort,builder,sort,builder,new,geo,distance,sort,builder,field,name,180,0,360,0,sort,builder,validation,geo,validation,method,coerce,assert,equals,180,0,sort,builder,points,0,get,lat,0,0,assert,equals,360,0,sort,builder,points,0,get,lon,0,0,sort,field,sort,field,sort,builder,build,shard,context,mock,field,assert,equals,lat,lon,doc,values,field,new,distance,sort,field,name,0,0,180,0,sort,field
GeoDistanceSortBuilderTests -> public void testBuildCoerce() throws IOException;1529916084;Test that if coercion is used, a point gets normalized but the original values in the builder are unchanged;public void testBuildCoerce() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()__        GeoDistanceSortBuilder sortBuilder = new GeoDistanceSortBuilder("fieldName", -180.0, -360.0)__        sortBuilder.validation(GeoValidationMethod.COERCE)__        assertEquals(-180.0, sortBuilder.points()[0].getLat(), 0.0)__        assertEquals(-360.0, sortBuilder.points()[0].getLon(), 0.0)__        SortField sortField = sortBuilder.build(shardContextMock).field__        assertEquals(LatLonDocValuesField.newDistanceSort("fieldName", 0.0, 180.0), sortField)__    };test,that,if,coercion,is,used,a,point,gets,normalized,but,the,original,values,in,the,builder,are,unchanged;public,void,test,build,coerce,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,geo,distance,sort,builder,sort,builder,new,geo,distance,sort,builder,field,name,180,0,360,0,sort,builder,validation,geo,validation,method,coerce,assert,equals,180,0,sort,builder,points,0,get,lat,0,0,assert,equals,360,0,sort,builder,points,0,get,lon,0,0,sort,field,sort,field,sort,builder,build,shard,context,mock,field,assert,equals,lat,lon,doc,values,field,new,distance,sort,field,name,0,0,180,0,sort,field
GeoDistanceSortBuilderTests -> public void testBuildCoerce() throws IOException;1539615817;Test that if coercion is used, a point gets normalized but the original values in the builder are unchanged;public void testBuildCoerce() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()__        GeoDistanceSortBuilder sortBuilder = new GeoDistanceSortBuilder("fieldName", -180.0, -360.0)__        sortBuilder.validation(GeoValidationMethod.COERCE)__        assertEquals(-180.0, sortBuilder.points()[0].getLat(), 0.0)__        assertEquals(-360.0, sortBuilder.points()[0].getLon(), 0.0)__        SortField sortField = sortBuilder.build(shardContextMock).field__        assertEquals(LatLonDocValuesField.newDistanceSort("fieldName", 0.0, 180.0), sortField)__    };test,that,if,coercion,is,used,a,point,gets,normalized,but,the,original,values,in,the,builder,are,unchanged;public,void,test,build,coerce,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,geo,distance,sort,builder,sort,builder,new,geo,distance,sort,builder,field,name,180,0,360,0,sort,builder,validation,geo,validation,method,coerce,assert,equals,180,0,sort,builder,points,0,get,lat,0,0,assert,equals,360,0,sort,builder,points,0,get,lon,0,0,sort,field,sort,field,sort,builder,build,shard,context,mock,field,assert,equals,lat,lon,doc,values,field,new,distance,sort,field,name,0,0,180,0,sort,field
GeoDistanceSortBuilderTests -> public void testBuildInvalidPoints() throws IOException;1524684173;Test that if validation is strict, invalid points throw an error;public void testBuildInvalidPoints() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()__        {_            GeoDistanceSortBuilder sortBuilder = new GeoDistanceSortBuilder("fieldName", -180.0, 0.0)__            sortBuilder.validation(GeoValidationMethod.STRICT)__            ElasticsearchParseException ex = expectThrows(ElasticsearchParseException.class, () -> sortBuilder.build(shardContextMock))__            assertEquals("illegal latitude value [-180.0] for [GeoDistanceSort] for field [fieldName].", ex.getMessage())__        }_        {_            GeoDistanceSortBuilder sortBuilder = new GeoDistanceSortBuilder("fieldName", 0.0, -360.0)__            sortBuilder.validation(GeoValidationMethod.STRICT)__            ElasticsearchParseException ex = expectThrows(ElasticsearchParseException.class, () -> sortBuilder.build(shardContextMock))__            assertEquals("illegal longitude value [-360.0] for [GeoDistanceSort] for field [fieldName].", ex.getMessage())__        }_    };test,that,if,validation,is,strict,invalid,points,throw,an,error;public,void,test,build,invalid,points,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,geo,distance,sort,builder,sort,builder,new,geo,distance,sort,builder,field,name,180,0,0,0,sort,builder,validation,geo,validation,method,strict,elasticsearch,parse,exception,ex,expect,throws,elasticsearch,parse,exception,class,sort,builder,build,shard,context,mock,assert,equals,illegal,latitude,value,180,0,for,geo,distance,sort,for,field,field,name,ex,get,message,geo,distance,sort,builder,sort,builder,new,geo,distance,sort,builder,field,name,0,0,360,0,sort,builder,validation,geo,validation,method,strict,elasticsearch,parse,exception,ex,expect,throws,elasticsearch,parse,exception,class,sort,builder,build,shard,context,mock,assert,equals,illegal,longitude,value,360,0,for,geo,distance,sort,for,field,field,name,ex,get,message
GeoDistanceSortBuilderTests -> public void testBuildInvalidPoints() throws IOException;1528706846;Test that if validation is strict, invalid points throw an error;public void testBuildInvalidPoints() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()__        {_            GeoDistanceSortBuilder sortBuilder = new GeoDistanceSortBuilder("fieldName", -180.0, 0.0)__            sortBuilder.validation(GeoValidationMethod.STRICT)__            ElasticsearchParseException ex = expectThrows(ElasticsearchParseException.class, () -> sortBuilder.build(shardContextMock))__            assertEquals("illegal latitude value [-180.0] for [GeoDistanceSort] for field [fieldName].", ex.getMessage())__        }_        {_            GeoDistanceSortBuilder sortBuilder = new GeoDistanceSortBuilder("fieldName", 0.0, -360.0)__            sortBuilder.validation(GeoValidationMethod.STRICT)__            ElasticsearchParseException ex = expectThrows(ElasticsearchParseException.class, () -> sortBuilder.build(shardContextMock))__            assertEquals("illegal longitude value [-360.0] for [GeoDistanceSort] for field [fieldName].", ex.getMessage())__        }_    };test,that,if,validation,is,strict,invalid,points,throw,an,error;public,void,test,build,invalid,points,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,geo,distance,sort,builder,sort,builder,new,geo,distance,sort,builder,field,name,180,0,0,0,sort,builder,validation,geo,validation,method,strict,elasticsearch,parse,exception,ex,expect,throws,elasticsearch,parse,exception,class,sort,builder,build,shard,context,mock,assert,equals,illegal,latitude,value,180,0,for,geo,distance,sort,for,field,field,name,ex,get,message,geo,distance,sort,builder,sort,builder,new,geo,distance,sort,builder,field,name,0,0,360,0,sort,builder,validation,geo,validation,method,strict,elasticsearch,parse,exception,ex,expect,throws,elasticsearch,parse,exception,class,sort,builder,build,shard,context,mock,assert,equals,illegal,longitude,value,360,0,for,geo,distance,sort,for,field,field,name,ex,get,message
GeoDistanceSortBuilderTests -> public void testBuildInvalidPoints() throws IOException;1528762805;Test that if validation is strict, invalid points throw an error;public void testBuildInvalidPoints() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()__        {_            GeoDistanceSortBuilder sortBuilder = new GeoDistanceSortBuilder("fieldName", -180.0, 0.0)__            sortBuilder.validation(GeoValidationMethod.STRICT)__            ElasticsearchParseException ex = expectThrows(ElasticsearchParseException.class, () -> sortBuilder.build(shardContextMock))__            assertEquals("illegal latitude value [-180.0] for [GeoDistanceSort] for field [fieldName].", ex.getMessage())__        }_        {_            GeoDistanceSortBuilder sortBuilder = new GeoDistanceSortBuilder("fieldName", 0.0, -360.0)__            sortBuilder.validation(GeoValidationMethod.STRICT)__            ElasticsearchParseException ex = expectThrows(ElasticsearchParseException.class, () -> sortBuilder.build(shardContextMock))__            assertEquals("illegal longitude value [-360.0] for [GeoDistanceSort] for field [fieldName].", ex.getMessage())__        }_    };test,that,if,validation,is,strict,invalid,points,throw,an,error;public,void,test,build,invalid,points,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,geo,distance,sort,builder,sort,builder,new,geo,distance,sort,builder,field,name,180,0,0,0,sort,builder,validation,geo,validation,method,strict,elasticsearch,parse,exception,ex,expect,throws,elasticsearch,parse,exception,class,sort,builder,build,shard,context,mock,assert,equals,illegal,latitude,value,180,0,for,geo,distance,sort,for,field,field,name,ex,get,message,geo,distance,sort,builder,sort,builder,new,geo,distance,sort,builder,field,name,0,0,360,0,sort,builder,validation,geo,validation,method,strict,elasticsearch,parse,exception,ex,expect,throws,elasticsearch,parse,exception,class,sort,builder,build,shard,context,mock,assert,equals,illegal,longitude,value,360,0,for,geo,distance,sort,for,field,field,name,ex,get,message
GeoDistanceSortBuilderTests -> public void testBuildInvalidPoints() throws IOException;1529916084;Test that if validation is strict, invalid points throw an error;public void testBuildInvalidPoints() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()__        {_            GeoDistanceSortBuilder sortBuilder = new GeoDistanceSortBuilder("fieldName", -180.0, 0.0)__            sortBuilder.validation(GeoValidationMethod.STRICT)__            ElasticsearchParseException ex = expectThrows(ElasticsearchParseException.class, () -> sortBuilder.build(shardContextMock))__            assertEquals("illegal latitude value [-180.0] for [GeoDistanceSort] for field [fieldName].", ex.getMessage())__        }_        {_            GeoDistanceSortBuilder sortBuilder = new GeoDistanceSortBuilder("fieldName", 0.0, -360.0)__            sortBuilder.validation(GeoValidationMethod.STRICT)__            ElasticsearchParseException ex = expectThrows(ElasticsearchParseException.class, () -> sortBuilder.build(shardContextMock))__            assertEquals("illegal longitude value [-360.0] for [GeoDistanceSort] for field [fieldName].", ex.getMessage())__        }_    };test,that,if,validation,is,strict,invalid,points,throw,an,error;public,void,test,build,invalid,points,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,geo,distance,sort,builder,sort,builder,new,geo,distance,sort,builder,field,name,180,0,0,0,sort,builder,validation,geo,validation,method,strict,elasticsearch,parse,exception,ex,expect,throws,elasticsearch,parse,exception,class,sort,builder,build,shard,context,mock,assert,equals,illegal,latitude,value,180,0,for,geo,distance,sort,for,field,field,name,ex,get,message,geo,distance,sort,builder,sort,builder,new,geo,distance,sort,builder,field,name,0,0,360,0,sort,builder,validation,geo,validation,method,strict,elasticsearch,parse,exception,ex,expect,throws,elasticsearch,parse,exception,class,sort,builder,build,shard,context,mock,assert,equals,illegal,longitude,value,360,0,for,geo,distance,sort,for,field,field,name,ex,get,message
GeoDistanceSortBuilderTests -> public void testBuildInvalidPoints() throws IOException;1539615817;Test that if validation is strict, invalid points throw an error;public void testBuildInvalidPoints() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()__        {_            GeoDistanceSortBuilder sortBuilder = new GeoDistanceSortBuilder("fieldName", -180.0, 0.0)__            sortBuilder.validation(GeoValidationMethod.STRICT)__            ElasticsearchParseException ex = expectThrows(ElasticsearchParseException.class, () -> sortBuilder.build(shardContextMock))__            assertEquals("illegal latitude value [-180.0] for [GeoDistanceSort] for field [fieldName].", ex.getMessage())__        }_        {_            GeoDistanceSortBuilder sortBuilder = new GeoDistanceSortBuilder("fieldName", 0.0, -360.0)__            sortBuilder.validation(GeoValidationMethod.STRICT)__            ElasticsearchParseException ex = expectThrows(ElasticsearchParseException.class, () -> sortBuilder.build(shardContextMock))__            assertEquals("illegal longitude value [-360.0] for [GeoDistanceSort] for field [fieldName].", ex.getMessage())__        }_    };test,that,if,validation,is,strict,invalid,points,throw,an,error;public,void,test,build,invalid,points,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,geo,distance,sort,builder,sort,builder,new,geo,distance,sort,builder,field,name,180,0,0,0,sort,builder,validation,geo,validation,method,strict,elasticsearch,parse,exception,ex,expect,throws,elasticsearch,parse,exception,class,sort,builder,build,shard,context,mock,assert,equals,illegal,latitude,value,180,0,for,geo,distance,sort,for,field,field,name,ex,get,message,geo,distance,sort,builder,sort,builder,new,geo,distance,sort,builder,field,name,0,0,360,0,sort,builder,validation,geo,validation,method,strict,elasticsearch,parse,exception,ex,expect,throws,elasticsearch,parse,exception,class,sort,builder,build,shard,context,mock,assert,equals,illegal,longitude,value,360,0,for,geo,distance,sort,for,field,field,name,ex,get,message
GeoDistanceSortBuilderTests -> public void testMultiValueMode() throws IOException;1524684173;Test that the sort builder mode gets transfered correctly to the SortField;public void testMultiValueMode() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()__        GeoDistanceSortBuilder geoDistanceSortBuilder = new GeoDistanceSortBuilder("fieldName", 1.0, 1.0)__        geoDistanceSortBuilder.sortMode(SortMode.MAX)__        SortField sortField = geoDistanceSortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        XFieldComparatorSource comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.MAX, comparatorSource.sortMode())___        _        geoDistanceSortBuilder = new GeoDistanceSortBuilder("fieldName", 1.0, 1.0)__        geoDistanceSortBuilder.order(SortOrder.DESC)__        sortField = geoDistanceSortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.MAX, comparatorSource.sortMode())___        _        geoDistanceSortBuilder = new GeoDistanceSortBuilder("fieldName", 1.0, 1.0)__        _        geoDistanceSortBuilder.order(SortOrder.ASC).unit(DistanceUnit.INCH)__        sortField = geoDistanceSortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.MIN, comparatorSource.sortMode())___        geoDistanceSortBuilder = new GeoDistanceSortBuilder("fieldName", 1.0, 1.0)__        _        geoDistanceSortBuilder.sortMode(SortMode.MIN).unit(DistanceUnit.INCH)__        sortField = geoDistanceSortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.MIN, comparatorSource.sortMode())___        geoDistanceSortBuilder.sortMode(SortMode.AVG)__        sortField = geoDistanceSortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.AVG, comparatorSource.sortMode())___        geoDistanceSortBuilder.sortMode(SortMode.MEDIAN)__        sortField = geoDistanceSortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.MEDIAN, comparatorSource.sortMode())__      };test,that,the,sort,builder,mode,gets,transfered,correctly,to,the,sort,field;public,void,test,multi,value,mode,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,geo,distance,sort,builder,geo,distance,sort,builder,new,geo,distance,sort,builder,field,name,1,0,1,0,geo,distance,sort,builder,sort,mode,sort,mode,max,sort,field,sort,field,geo,distance,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,xfield,comparator,source,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,max,comparator,source,sort,mode,geo,distance,sort,builder,new,geo,distance,sort,builder,field,name,1,0,1,0,geo,distance,sort,builder,order,sort,order,desc,sort,field,geo,distance,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,max,comparator,source,sort,mode,geo,distance,sort,builder,new,geo,distance,sort,builder,field,name,1,0,1,0,geo,distance,sort,builder,order,sort,order,asc,unit,distance,unit,inch,sort,field,geo,distance,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,min,comparator,source,sort,mode,geo,distance,sort,builder,new,geo,distance,sort,builder,field,name,1,0,1,0,geo,distance,sort,builder,sort,mode,sort,mode,min,unit,distance,unit,inch,sort,field,geo,distance,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,min,comparator,source,sort,mode,geo,distance,sort,builder,sort,mode,sort,mode,avg,sort,field,geo,distance,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,avg,comparator,source,sort,mode,geo,distance,sort,builder,sort,mode,sort,mode,median,sort,field,geo,distance,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,median,comparator,source,sort,mode
GeoDistanceSortBuilderTests -> public void testMultiValueMode() throws IOException;1528706846;Test that the sort builder mode gets transfered correctly to the SortField;public void testMultiValueMode() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()__        GeoDistanceSortBuilder geoDistanceSortBuilder = new GeoDistanceSortBuilder("fieldName", 1.0, 1.0)__        geoDistanceSortBuilder.sortMode(SortMode.MAX)__        SortField sortField = geoDistanceSortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        XFieldComparatorSource comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.MAX, comparatorSource.sortMode())___        _        geoDistanceSortBuilder = new GeoDistanceSortBuilder("fieldName", 1.0, 1.0)__        geoDistanceSortBuilder.order(SortOrder.DESC)__        sortField = geoDistanceSortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.MAX, comparatorSource.sortMode())___        _        geoDistanceSortBuilder = new GeoDistanceSortBuilder("fieldName", 1.0, 1.0)__        _        geoDistanceSortBuilder.order(SortOrder.ASC).unit(DistanceUnit.INCH)__        sortField = geoDistanceSortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.MIN, comparatorSource.sortMode())___        geoDistanceSortBuilder = new GeoDistanceSortBuilder("fieldName", 1.0, 1.0)__        _        geoDistanceSortBuilder.sortMode(SortMode.MIN).unit(DistanceUnit.INCH)__        sortField = geoDistanceSortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.MIN, comparatorSource.sortMode())___        geoDistanceSortBuilder.sortMode(SortMode.AVG)__        sortField = geoDistanceSortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.AVG, comparatorSource.sortMode())___        geoDistanceSortBuilder.sortMode(SortMode.MEDIAN)__        sortField = geoDistanceSortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.MEDIAN, comparatorSource.sortMode())__      };test,that,the,sort,builder,mode,gets,transfered,correctly,to,the,sort,field;public,void,test,multi,value,mode,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,geo,distance,sort,builder,geo,distance,sort,builder,new,geo,distance,sort,builder,field,name,1,0,1,0,geo,distance,sort,builder,sort,mode,sort,mode,max,sort,field,sort,field,geo,distance,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,xfield,comparator,source,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,max,comparator,source,sort,mode,geo,distance,sort,builder,new,geo,distance,sort,builder,field,name,1,0,1,0,geo,distance,sort,builder,order,sort,order,desc,sort,field,geo,distance,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,max,comparator,source,sort,mode,geo,distance,sort,builder,new,geo,distance,sort,builder,field,name,1,0,1,0,geo,distance,sort,builder,order,sort,order,asc,unit,distance,unit,inch,sort,field,geo,distance,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,min,comparator,source,sort,mode,geo,distance,sort,builder,new,geo,distance,sort,builder,field,name,1,0,1,0,geo,distance,sort,builder,sort,mode,sort,mode,min,unit,distance,unit,inch,sort,field,geo,distance,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,min,comparator,source,sort,mode,geo,distance,sort,builder,sort,mode,sort,mode,avg,sort,field,geo,distance,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,avg,comparator,source,sort,mode,geo,distance,sort,builder,sort,mode,sort,mode,median,sort,field,geo,distance,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,median,comparator,source,sort,mode
GeoDistanceSortBuilderTests -> public void testMultiValueMode() throws IOException;1528762805;Test that the sort builder mode gets transfered correctly to the SortField;public void testMultiValueMode() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()__        GeoDistanceSortBuilder geoDistanceSortBuilder = new GeoDistanceSortBuilder("fieldName", 1.0, 1.0)__        geoDistanceSortBuilder.sortMode(SortMode.MAX)__        SortField sortField = geoDistanceSortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        XFieldComparatorSource comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.MAX, comparatorSource.sortMode())___        _        geoDistanceSortBuilder = new GeoDistanceSortBuilder("fieldName", 1.0, 1.0)__        geoDistanceSortBuilder.order(SortOrder.DESC)__        sortField = geoDistanceSortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.MAX, comparatorSource.sortMode())___        _        geoDistanceSortBuilder = new GeoDistanceSortBuilder("fieldName", 1.0, 1.0)__        _        geoDistanceSortBuilder.order(SortOrder.ASC).unit(DistanceUnit.INCH)__        sortField = geoDistanceSortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.MIN, comparatorSource.sortMode())___        geoDistanceSortBuilder = new GeoDistanceSortBuilder("fieldName", 1.0, 1.0)__        _        geoDistanceSortBuilder.sortMode(SortMode.MIN).unit(DistanceUnit.INCH)__        sortField = geoDistanceSortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.MIN, comparatorSource.sortMode())___        geoDistanceSortBuilder.sortMode(SortMode.AVG)__        sortField = geoDistanceSortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.AVG, comparatorSource.sortMode())___        geoDistanceSortBuilder.sortMode(SortMode.MEDIAN)__        sortField = geoDistanceSortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.MEDIAN, comparatorSource.sortMode())__      };test,that,the,sort,builder,mode,gets,transfered,correctly,to,the,sort,field;public,void,test,multi,value,mode,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,geo,distance,sort,builder,geo,distance,sort,builder,new,geo,distance,sort,builder,field,name,1,0,1,0,geo,distance,sort,builder,sort,mode,sort,mode,max,sort,field,sort,field,geo,distance,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,xfield,comparator,source,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,max,comparator,source,sort,mode,geo,distance,sort,builder,new,geo,distance,sort,builder,field,name,1,0,1,0,geo,distance,sort,builder,order,sort,order,desc,sort,field,geo,distance,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,max,comparator,source,sort,mode,geo,distance,sort,builder,new,geo,distance,sort,builder,field,name,1,0,1,0,geo,distance,sort,builder,order,sort,order,asc,unit,distance,unit,inch,sort,field,geo,distance,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,min,comparator,source,sort,mode,geo,distance,sort,builder,new,geo,distance,sort,builder,field,name,1,0,1,0,geo,distance,sort,builder,sort,mode,sort,mode,min,unit,distance,unit,inch,sort,field,geo,distance,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,min,comparator,source,sort,mode,geo,distance,sort,builder,sort,mode,sort,mode,avg,sort,field,geo,distance,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,avg,comparator,source,sort,mode,geo,distance,sort,builder,sort,mode,sort,mode,median,sort,field,geo,distance,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,median,comparator,source,sort,mode
GeoDistanceSortBuilderTests -> public void testMultiValueMode() throws IOException;1529916084;Test that the sort builder mode gets transfered correctly to the SortField;public void testMultiValueMode() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()__        GeoDistanceSortBuilder geoDistanceSortBuilder = new GeoDistanceSortBuilder("fieldName", 1.0, 1.0)__        geoDistanceSortBuilder.sortMode(SortMode.MAX)__        SortField sortField = geoDistanceSortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        XFieldComparatorSource comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.MAX, comparatorSource.sortMode())___        _        geoDistanceSortBuilder = new GeoDistanceSortBuilder("fieldName", 1.0, 1.0)__        geoDistanceSortBuilder.order(SortOrder.DESC)__        sortField = geoDistanceSortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.MAX, comparatorSource.sortMode())___        _        geoDistanceSortBuilder = new GeoDistanceSortBuilder("fieldName", 1.0, 1.0)__        _        geoDistanceSortBuilder.order(SortOrder.ASC).unit(DistanceUnit.INCH)__        sortField = geoDistanceSortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.MIN, comparatorSource.sortMode())___        geoDistanceSortBuilder = new GeoDistanceSortBuilder("fieldName", 1.0, 1.0)__        _        geoDistanceSortBuilder.sortMode(SortMode.MIN).unit(DistanceUnit.INCH)__        sortField = geoDistanceSortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.MIN, comparatorSource.sortMode())___        geoDistanceSortBuilder.sortMode(SortMode.AVG)__        sortField = geoDistanceSortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.AVG, comparatorSource.sortMode())___        geoDistanceSortBuilder.sortMode(SortMode.MEDIAN)__        sortField = geoDistanceSortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.MEDIAN, comparatorSource.sortMode())__      };test,that,the,sort,builder,mode,gets,transfered,correctly,to,the,sort,field;public,void,test,multi,value,mode,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,geo,distance,sort,builder,geo,distance,sort,builder,new,geo,distance,sort,builder,field,name,1,0,1,0,geo,distance,sort,builder,sort,mode,sort,mode,max,sort,field,sort,field,geo,distance,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,xfield,comparator,source,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,max,comparator,source,sort,mode,geo,distance,sort,builder,new,geo,distance,sort,builder,field,name,1,0,1,0,geo,distance,sort,builder,order,sort,order,desc,sort,field,geo,distance,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,max,comparator,source,sort,mode,geo,distance,sort,builder,new,geo,distance,sort,builder,field,name,1,0,1,0,geo,distance,sort,builder,order,sort,order,asc,unit,distance,unit,inch,sort,field,geo,distance,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,min,comparator,source,sort,mode,geo,distance,sort,builder,new,geo,distance,sort,builder,field,name,1,0,1,0,geo,distance,sort,builder,sort,mode,sort,mode,min,unit,distance,unit,inch,sort,field,geo,distance,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,min,comparator,source,sort,mode,geo,distance,sort,builder,sort,mode,sort,mode,avg,sort,field,geo,distance,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,avg,comparator,source,sort,mode,geo,distance,sort,builder,sort,mode,sort,mode,median,sort,field,geo,distance,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,median,comparator,source,sort,mode
GeoDistanceSortBuilderTests -> public void testMultiValueMode() throws IOException;1539615817;Test that the sort builder mode gets transferred correctly to the SortField;public void testMultiValueMode() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()__        GeoDistanceSortBuilder geoDistanceSortBuilder = new GeoDistanceSortBuilder("fieldName", 1.0, 1.0)__        geoDistanceSortBuilder.sortMode(SortMode.MAX)__        SortField sortField = geoDistanceSortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        XFieldComparatorSource comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.MAX, comparatorSource.sortMode())___        _        geoDistanceSortBuilder = new GeoDistanceSortBuilder("fieldName", 1.0, 1.0)__        geoDistanceSortBuilder.order(SortOrder.DESC)__        sortField = geoDistanceSortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.MAX, comparatorSource.sortMode())___        _        geoDistanceSortBuilder = new GeoDistanceSortBuilder("fieldName", 1.0, 1.0)__        _        geoDistanceSortBuilder.order(SortOrder.ASC).unit(DistanceUnit.INCH)__        sortField = geoDistanceSortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.MIN, comparatorSource.sortMode())___        geoDistanceSortBuilder = new GeoDistanceSortBuilder("fieldName", 1.0, 1.0)__        _        geoDistanceSortBuilder.sortMode(SortMode.MIN).unit(DistanceUnit.INCH)__        sortField = geoDistanceSortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.MIN, comparatorSource.sortMode())___        geoDistanceSortBuilder.sortMode(SortMode.AVG)__        sortField = geoDistanceSortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.AVG, comparatorSource.sortMode())___        geoDistanceSortBuilder.sortMode(SortMode.MEDIAN)__        sortField = geoDistanceSortBuilder.build(shardContextMock).field__        assertThat(sortField.getComparatorSource(), instanceOf(XFieldComparatorSource.class))__        comparatorSource = (XFieldComparatorSource) sortField.getComparatorSource()__        assertEquals(MultiValueMode.MEDIAN, comparatorSource.sortMode())__      };test,that,the,sort,builder,mode,gets,transferred,correctly,to,the,sort,field;public,void,test,multi,value,mode,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,geo,distance,sort,builder,geo,distance,sort,builder,new,geo,distance,sort,builder,field,name,1,0,1,0,geo,distance,sort,builder,sort,mode,sort,mode,max,sort,field,sort,field,geo,distance,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,xfield,comparator,source,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,max,comparator,source,sort,mode,geo,distance,sort,builder,new,geo,distance,sort,builder,field,name,1,0,1,0,geo,distance,sort,builder,order,sort,order,desc,sort,field,geo,distance,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,max,comparator,source,sort,mode,geo,distance,sort,builder,new,geo,distance,sort,builder,field,name,1,0,1,0,geo,distance,sort,builder,order,sort,order,asc,unit,distance,unit,inch,sort,field,geo,distance,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,min,comparator,source,sort,mode,geo,distance,sort,builder,new,geo,distance,sort,builder,field,name,1,0,1,0,geo,distance,sort,builder,sort,mode,sort,mode,min,unit,distance,unit,inch,sort,field,geo,distance,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,min,comparator,source,sort,mode,geo,distance,sort,builder,sort,mode,sort,mode,avg,sort,field,geo,distance,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,avg,comparator,source,sort,mode,geo,distance,sort,builder,sort,mode,sort,mode,median,sort,field,geo,distance,sort,builder,build,shard,context,mock,field,assert,that,sort,field,get,comparator,source,instance,of,xfield,comparator,source,class,comparator,source,xfield,comparator,source,sort,field,get,comparator,source,assert,equals,multi,value,mode,median,comparator,source,sort,mode
GeoDistanceSortBuilderTests -> public void testBuildSortFieldOrder() throws IOException;1524684173;Test that the sort builder order gets transfered correctly to the SortField;public void testBuildSortFieldOrder() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()__        GeoDistanceSortBuilder geoDistanceSortBuilder = new GeoDistanceSortBuilder("fieldName", 1.0, 1.0)__        assertEquals(false, geoDistanceSortBuilder.build(shardContextMock).field.getReverse())___        geoDistanceSortBuilder.order(SortOrder.ASC)__        assertEquals(false, geoDistanceSortBuilder.build(shardContextMock).field.getReverse())___        geoDistanceSortBuilder.order(SortOrder.DESC)__        assertEquals(true, geoDistanceSortBuilder.build(shardContextMock).field.getReverse())__    };test,that,the,sort,builder,order,gets,transfered,correctly,to,the,sort,field;public,void,test,build,sort,field,order,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,geo,distance,sort,builder,geo,distance,sort,builder,new,geo,distance,sort,builder,field,name,1,0,1,0,assert,equals,false,geo,distance,sort,builder,build,shard,context,mock,field,get,reverse,geo,distance,sort,builder,order,sort,order,asc,assert,equals,false,geo,distance,sort,builder,build,shard,context,mock,field,get,reverse,geo,distance,sort,builder,order,sort,order,desc,assert,equals,true,geo,distance,sort,builder,build,shard,context,mock,field,get,reverse
GeoDistanceSortBuilderTests -> public void testBuildSortFieldOrder() throws IOException;1528706846;Test that the sort builder order gets transfered correctly to the SortField;public void testBuildSortFieldOrder() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()__        GeoDistanceSortBuilder geoDistanceSortBuilder = new GeoDistanceSortBuilder("fieldName", 1.0, 1.0)__        assertEquals(false, geoDistanceSortBuilder.build(shardContextMock).field.getReverse())___        geoDistanceSortBuilder.order(SortOrder.ASC)__        assertEquals(false, geoDistanceSortBuilder.build(shardContextMock).field.getReverse())___        geoDistanceSortBuilder.order(SortOrder.DESC)__        assertEquals(true, geoDistanceSortBuilder.build(shardContextMock).field.getReverse())__    };test,that,the,sort,builder,order,gets,transfered,correctly,to,the,sort,field;public,void,test,build,sort,field,order,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,geo,distance,sort,builder,geo,distance,sort,builder,new,geo,distance,sort,builder,field,name,1,0,1,0,assert,equals,false,geo,distance,sort,builder,build,shard,context,mock,field,get,reverse,geo,distance,sort,builder,order,sort,order,asc,assert,equals,false,geo,distance,sort,builder,build,shard,context,mock,field,get,reverse,geo,distance,sort,builder,order,sort,order,desc,assert,equals,true,geo,distance,sort,builder,build,shard,context,mock,field,get,reverse
GeoDistanceSortBuilderTests -> public void testBuildSortFieldOrder() throws IOException;1528762805;Test that the sort builder order gets transfered correctly to the SortField;public void testBuildSortFieldOrder() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()__        GeoDistanceSortBuilder geoDistanceSortBuilder = new GeoDistanceSortBuilder("fieldName", 1.0, 1.0)__        assertEquals(false, geoDistanceSortBuilder.build(shardContextMock).field.getReverse())___        geoDistanceSortBuilder.order(SortOrder.ASC)__        assertEquals(false, geoDistanceSortBuilder.build(shardContextMock).field.getReverse())___        geoDistanceSortBuilder.order(SortOrder.DESC)__        assertEquals(true, geoDistanceSortBuilder.build(shardContextMock).field.getReverse())__    };test,that,the,sort,builder,order,gets,transfered,correctly,to,the,sort,field;public,void,test,build,sort,field,order,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,geo,distance,sort,builder,geo,distance,sort,builder,new,geo,distance,sort,builder,field,name,1,0,1,0,assert,equals,false,geo,distance,sort,builder,build,shard,context,mock,field,get,reverse,geo,distance,sort,builder,order,sort,order,asc,assert,equals,false,geo,distance,sort,builder,build,shard,context,mock,field,get,reverse,geo,distance,sort,builder,order,sort,order,desc,assert,equals,true,geo,distance,sort,builder,build,shard,context,mock,field,get,reverse
GeoDistanceSortBuilderTests -> public void testBuildSortFieldOrder() throws IOException;1529916084;Test that the sort builder order gets transfered correctly to the SortField;public void testBuildSortFieldOrder() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()__        GeoDistanceSortBuilder geoDistanceSortBuilder = new GeoDistanceSortBuilder("fieldName", 1.0, 1.0)__        assertEquals(false, geoDistanceSortBuilder.build(shardContextMock).field.getReverse())___        geoDistanceSortBuilder.order(SortOrder.ASC)__        assertEquals(false, geoDistanceSortBuilder.build(shardContextMock).field.getReverse())___        geoDistanceSortBuilder.order(SortOrder.DESC)__        assertEquals(true, geoDistanceSortBuilder.build(shardContextMock).field.getReverse())__    };test,that,the,sort,builder,order,gets,transfered,correctly,to,the,sort,field;public,void,test,build,sort,field,order,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,geo,distance,sort,builder,geo,distance,sort,builder,new,geo,distance,sort,builder,field,name,1,0,1,0,assert,equals,false,geo,distance,sort,builder,build,shard,context,mock,field,get,reverse,geo,distance,sort,builder,order,sort,order,asc,assert,equals,false,geo,distance,sort,builder,build,shard,context,mock,field,get,reverse,geo,distance,sort,builder,order,sort,order,desc,assert,equals,true,geo,distance,sort,builder,build,shard,context,mock,field,get,reverse
GeoDistanceSortBuilderTests -> public void testBuildSortFieldOrder() throws IOException;1539615817;Test that the sort builder order gets transferred correctly to the SortField;public void testBuildSortFieldOrder() throws IOException {_        QueryShardContext shardContextMock = createMockShardContext()__        GeoDistanceSortBuilder geoDistanceSortBuilder = new GeoDistanceSortBuilder("fieldName", 1.0, 1.0)__        assertEquals(false, geoDistanceSortBuilder.build(shardContextMock).field.getReverse())___        geoDistanceSortBuilder.order(SortOrder.ASC)__        assertEquals(false, geoDistanceSortBuilder.build(shardContextMock).field.getReverse())___        geoDistanceSortBuilder.order(SortOrder.DESC)__        assertEquals(true, geoDistanceSortBuilder.build(shardContextMock).field.getReverse())__    };test,that,the,sort,builder,order,gets,transferred,correctly,to,the,sort,field;public,void,test,build,sort,field,order,throws,ioexception,query,shard,context,shard,context,mock,create,mock,shard,context,geo,distance,sort,builder,geo,distance,sort,builder,new,geo,distance,sort,builder,field,name,1,0,1,0,assert,equals,false,geo,distance,sort,builder,build,shard,context,mock,field,get,reverse,geo,distance,sort,builder,order,sort,order,asc,assert,equals,false,geo,distance,sort,builder,build,shard,context,mock,field,get,reverse,geo,distance,sort,builder,order,sort,order,desc,assert,equals,true,geo,distance,sort,builder,build,shard,context,mock,field,get,reverse
GeoDistanceSortBuilderTests -> public void testNestedRewrites() throws IOException;1524684173;Test the nested Filter gets rewritten;public void testNestedRewrites() throws IOException {_        GeoDistanceSortBuilder sortBuilder = new GeoDistanceSortBuilder("fieldName", 0.0, 0.0)__        RangeQueryBuilder rangeQuery = new RangeQueryBuilder("fieldName") {_            @Override_            public QueryBuilder doRewrite(QueryRewriteContext queryShardContext) throws IOException {_                return new MatchNoneQueryBuilder()__            }_        }__        sortBuilder.setNestedPath("path").setNestedFilter(rangeQuery)__        GeoDistanceSortBuilder rewritten = (GeoDistanceSortBuilder) sortBuilder_                .rewrite(createMockShardContext())__        assertNotSame(rangeQuery, rewritten.getNestedFilter())__    };test,the,nested,filter,gets,rewritten;public,void,test,nested,rewrites,throws,ioexception,geo,distance,sort,builder,sort,builder,new,geo,distance,sort,builder,field,name,0,0,0,0,range,query,builder,range,query,new,range,query,builder,field,name,override,public,query,builder,do,rewrite,query,rewrite,context,query,shard,context,throws,ioexception,return,new,match,none,query,builder,sort,builder,set,nested,path,path,set,nested,filter,range,query,geo,distance,sort,builder,rewritten,geo,distance,sort,builder,sort,builder,rewrite,create,mock,shard,context,assert,not,same,range,query,rewritten,get,nested,filter
GeoDistanceSortBuilderTests -> public void testNestedRewrites() throws IOException;1528706846;Test the nested Filter gets rewritten;public void testNestedRewrites() throws IOException {_        GeoDistanceSortBuilder sortBuilder = new GeoDistanceSortBuilder("fieldName", 0.0, 0.0)__        RangeQueryBuilder rangeQuery = new RangeQueryBuilder("fieldName") {_            @Override_            public QueryBuilder doRewrite(QueryRewriteContext queryShardContext) throws IOException {_                return new MatchNoneQueryBuilder()__            }_        }__        sortBuilder.setNestedPath("path").setNestedFilter(rangeQuery)__        GeoDistanceSortBuilder rewritten = (GeoDistanceSortBuilder) sortBuilder_                .rewrite(createMockShardContext())__        assertNotSame(rangeQuery, rewritten.getNestedFilter())__    };test,the,nested,filter,gets,rewritten;public,void,test,nested,rewrites,throws,ioexception,geo,distance,sort,builder,sort,builder,new,geo,distance,sort,builder,field,name,0,0,0,0,range,query,builder,range,query,new,range,query,builder,field,name,override,public,query,builder,do,rewrite,query,rewrite,context,query,shard,context,throws,ioexception,return,new,match,none,query,builder,sort,builder,set,nested,path,path,set,nested,filter,range,query,geo,distance,sort,builder,rewritten,geo,distance,sort,builder,sort,builder,rewrite,create,mock,shard,context,assert,not,same,range,query,rewritten,get,nested,filter
GeoDistanceSortBuilderTests -> public void testNestedRewrites() throws IOException;1528762805;Test the nested Filter gets rewritten;public void testNestedRewrites() throws IOException {_        GeoDistanceSortBuilder sortBuilder = new GeoDistanceSortBuilder("fieldName", 0.0, 0.0)__        RangeQueryBuilder rangeQuery = new RangeQueryBuilder("fieldName") {_            @Override_            public QueryBuilder doRewrite(QueryRewriteContext queryShardContext) throws IOException {_                return new MatchNoneQueryBuilder()__            }_        }__        sortBuilder.setNestedPath("path").setNestedFilter(rangeQuery)__        GeoDistanceSortBuilder rewritten = (GeoDistanceSortBuilder) sortBuilder_                .rewrite(createMockShardContext())__        assertNotSame(rangeQuery, rewritten.getNestedFilter())__    };test,the,nested,filter,gets,rewritten;public,void,test,nested,rewrites,throws,ioexception,geo,distance,sort,builder,sort,builder,new,geo,distance,sort,builder,field,name,0,0,0,0,range,query,builder,range,query,new,range,query,builder,field,name,override,public,query,builder,do,rewrite,query,rewrite,context,query,shard,context,throws,ioexception,return,new,match,none,query,builder,sort,builder,set,nested,path,path,set,nested,filter,range,query,geo,distance,sort,builder,rewritten,geo,distance,sort,builder,sort,builder,rewrite,create,mock,shard,context,assert,not,same,range,query,rewritten,get,nested,filter
GeoDistanceSortBuilderTests -> public void testNestedRewrites() throws IOException;1529916084;Test the nested Filter gets rewritten;public void testNestedRewrites() throws IOException {_        GeoDistanceSortBuilder sortBuilder = new GeoDistanceSortBuilder("fieldName", 0.0, 0.0)__        RangeQueryBuilder rangeQuery = new RangeQueryBuilder("fieldName") {_            @Override_            public QueryBuilder doRewrite(QueryRewriteContext queryShardContext) throws IOException {_                return new MatchNoneQueryBuilder()__            }_        }__        sortBuilder.setNestedPath("path").setNestedFilter(rangeQuery)__        GeoDistanceSortBuilder rewritten = (GeoDistanceSortBuilder) sortBuilder_                .rewrite(createMockShardContext())__        assertNotSame(rangeQuery, rewritten.getNestedFilter())__    };test,the,nested,filter,gets,rewritten;public,void,test,nested,rewrites,throws,ioexception,geo,distance,sort,builder,sort,builder,new,geo,distance,sort,builder,field,name,0,0,0,0,range,query,builder,range,query,new,range,query,builder,field,name,override,public,query,builder,do,rewrite,query,rewrite,context,query,shard,context,throws,ioexception,return,new,match,none,query,builder,sort,builder,set,nested,path,path,set,nested,filter,range,query,geo,distance,sort,builder,rewritten,geo,distance,sort,builder,sort,builder,rewrite,create,mock,shard,context,assert,not,same,range,query,rewritten,get,nested,filter
GeoDistanceSortBuilderTests -> public void testNestedRewrites() throws IOException;1539615817;Test the nested Filter gets rewritten;public void testNestedRewrites() throws IOException {_        GeoDistanceSortBuilder sortBuilder = new GeoDistanceSortBuilder("fieldName", 0.0, 0.0)__        RangeQueryBuilder rangeQuery = new RangeQueryBuilder("fieldName") {_            @Override_            public QueryBuilder doRewrite(QueryRewriteContext queryShardContext) throws IOException {_                return new MatchNoneQueryBuilder()__            }_        }__        sortBuilder.setNestedPath("path").setNestedFilter(rangeQuery)__        GeoDistanceSortBuilder rewritten = (GeoDistanceSortBuilder) sortBuilder_                .rewrite(createMockShardContext())__        assertNotSame(rangeQuery, rewritten.getNestedFilter())__    };test,the,nested,filter,gets,rewritten;public,void,test,nested,rewrites,throws,ioexception,geo,distance,sort,builder,sort,builder,new,geo,distance,sort,builder,field,name,0,0,0,0,range,query,builder,range,query,new,range,query,builder,field,name,override,public,query,builder,do,rewrite,query,rewrite,context,query,shard,context,throws,ioexception,return,new,match,none,query,builder,sort,builder,set,nested,path,path,set,nested,filter,range,query,geo,distance,sort,builder,rewritten,geo,distance,sort,builder,sort,builder,rewrite,create,mock,shard,context,assert,not,same,range,query,rewritten,get,nested,filter
GeoDistanceSortBuilderTests -> public void testNestedSortBothThrows() throws IOException;1524684173;Test we can either set nested sort via path/filter or via nested sort builder, not both;public void testNestedSortBothThrows() throws IOException {_        GeoDistanceSortBuilder sortBuilder = new GeoDistanceSortBuilder("fieldName", 0.0, 0.0)__        IllegalArgumentException iae = expectThrows(IllegalArgumentException.class,_                () -> sortBuilder.setNestedPath("nestedPath").setNestedSort(new NestedSortBuilder("otherPath")))__        assertEquals("Setting both nested_path/nested_filter and nested not allowed", iae.getMessage())__        iae = expectThrows(IllegalArgumentException.class,_                () -> sortBuilder.setNestedSort(new NestedSortBuilder("otherPath")).setNestedPath("nestedPath"))__        assertEquals("Setting both nested_path/nested_filter and nested not allowed", iae.getMessage())__        iae = expectThrows(IllegalArgumentException.class,_                () -> sortBuilder.setNestedSort(new NestedSortBuilder("otherPath")).setNestedFilter(QueryBuilders.matchAllQuery()))__        assertEquals("Setting both nested_path/nested_filter and nested not allowed", iae.getMessage())__    };test,we,can,either,set,nested,sort,via,path,filter,or,via,nested,sort,builder,not,both;public,void,test,nested,sort,both,throws,throws,ioexception,geo,distance,sort,builder,sort,builder,new,geo,distance,sort,builder,field,name,0,0,0,0,illegal,argument,exception,iae,expect,throws,illegal,argument,exception,class,sort,builder,set,nested,path,nested,path,set,nested,sort,new,nested,sort,builder,other,path,assert,equals,setting,both,and,nested,not,allowed,iae,get,message,iae,expect,throws,illegal,argument,exception,class,sort,builder,set,nested,sort,new,nested,sort,builder,other,path,set,nested,path,nested,path,assert,equals,setting,both,and,nested,not,allowed,iae,get,message,iae,expect,throws,illegal,argument,exception,class,sort,builder,set,nested,sort,new,nested,sort,builder,other,path,set,nested,filter,query,builders,match,all,query,assert,equals,setting,both,and,nested,not,allowed,iae,get,message
GeoDistanceSortBuilderTests -> public void testNestedSortBothThrows() throws IOException;1528706846;Test we can either set nested sort via path/filter or via nested sort builder, not both;public void testNestedSortBothThrows() throws IOException {_        GeoDistanceSortBuilder sortBuilder = new GeoDistanceSortBuilder("fieldName", 0.0, 0.0)__        IllegalArgumentException iae = expectThrows(IllegalArgumentException.class,_                () -> sortBuilder.setNestedPath("nestedPath").setNestedSort(new NestedSortBuilder("otherPath")))__        assertEquals("Setting both nested_path/nested_filter and nested not allowed", iae.getMessage())__        iae = expectThrows(IllegalArgumentException.class,_                () -> sortBuilder.setNestedSort(new NestedSortBuilder("otherPath")).setNestedPath("nestedPath"))__        assertEquals("Setting both nested_path/nested_filter and nested not allowed", iae.getMessage())__        iae = expectThrows(IllegalArgumentException.class,_                () -> sortBuilder.setNestedSort(new NestedSortBuilder("otherPath")).setNestedFilter(QueryBuilders.matchAllQuery()))__        assertEquals("Setting both nested_path/nested_filter and nested not allowed", iae.getMessage())__    };test,we,can,either,set,nested,sort,via,path,filter,or,via,nested,sort,builder,not,both;public,void,test,nested,sort,both,throws,throws,ioexception,geo,distance,sort,builder,sort,builder,new,geo,distance,sort,builder,field,name,0,0,0,0,illegal,argument,exception,iae,expect,throws,illegal,argument,exception,class,sort,builder,set,nested,path,nested,path,set,nested,sort,new,nested,sort,builder,other,path,assert,equals,setting,both,and,nested,not,allowed,iae,get,message,iae,expect,throws,illegal,argument,exception,class,sort,builder,set,nested,sort,new,nested,sort,builder,other,path,set,nested,path,nested,path,assert,equals,setting,both,and,nested,not,allowed,iae,get,message,iae,expect,throws,illegal,argument,exception,class,sort,builder,set,nested,sort,new,nested,sort,builder,other,path,set,nested,filter,query,builders,match,all,query,assert,equals,setting,both,and,nested,not,allowed,iae,get,message
GeoDistanceSortBuilderTests -> public void testNestedSortBothThrows() throws IOException;1528762805;Test we can either set nested sort via path/filter or via nested sort builder, not both;public void testNestedSortBothThrows() throws IOException {_        GeoDistanceSortBuilder sortBuilder = new GeoDistanceSortBuilder("fieldName", 0.0, 0.0)__        IllegalArgumentException iae = expectThrows(IllegalArgumentException.class,_                () -> sortBuilder.setNestedPath("nestedPath").setNestedSort(new NestedSortBuilder("otherPath")))__        assertEquals("Setting both nested_path/nested_filter and nested not allowed", iae.getMessage())__        iae = expectThrows(IllegalArgumentException.class,_                () -> sortBuilder.setNestedSort(new NestedSortBuilder("otherPath")).setNestedPath("nestedPath"))__        assertEquals("Setting both nested_path/nested_filter and nested not allowed", iae.getMessage())__        iae = expectThrows(IllegalArgumentException.class,_                () -> sortBuilder.setNestedSort(new NestedSortBuilder("otherPath")).setNestedFilter(QueryBuilders.matchAllQuery()))__        assertEquals("Setting both nested_path/nested_filter and nested not allowed", iae.getMessage())__    };test,we,can,either,set,nested,sort,via,path,filter,or,via,nested,sort,builder,not,both;public,void,test,nested,sort,both,throws,throws,ioexception,geo,distance,sort,builder,sort,builder,new,geo,distance,sort,builder,field,name,0,0,0,0,illegal,argument,exception,iae,expect,throws,illegal,argument,exception,class,sort,builder,set,nested,path,nested,path,set,nested,sort,new,nested,sort,builder,other,path,assert,equals,setting,both,and,nested,not,allowed,iae,get,message,iae,expect,throws,illegal,argument,exception,class,sort,builder,set,nested,sort,new,nested,sort,builder,other,path,set,nested,path,nested,path,assert,equals,setting,both,and,nested,not,allowed,iae,get,message,iae,expect,throws,illegal,argument,exception,class,sort,builder,set,nested,sort,new,nested,sort,builder,other,path,set,nested,filter,query,builders,match,all,query,assert,equals,setting,both,and,nested,not,allowed,iae,get,message
GeoDistanceSortBuilderTests -> public void testNestedSortBothThrows() throws IOException;1529916084;Test we can either set nested sort via path/filter or via nested sort builder, not both;public void testNestedSortBothThrows() throws IOException {_        GeoDistanceSortBuilder sortBuilder = new GeoDistanceSortBuilder("fieldName", 0.0, 0.0)__        IllegalArgumentException iae = expectThrows(IllegalArgumentException.class,_                () -> sortBuilder.setNestedPath("nestedPath").setNestedSort(new NestedSortBuilder("otherPath")))__        assertEquals("Setting both nested_path/nested_filter and nested not allowed", iae.getMessage())__        iae = expectThrows(IllegalArgumentException.class,_                () -> sortBuilder.setNestedSort(new NestedSortBuilder("otherPath")).setNestedPath("nestedPath"))__        assertEquals("Setting both nested_path/nested_filter and nested not allowed", iae.getMessage())__        iae = expectThrows(IllegalArgumentException.class,_                () -> sortBuilder.setNestedSort(new NestedSortBuilder("otherPath")).setNestedFilter(QueryBuilders.matchAllQuery()))__        assertEquals("Setting both nested_path/nested_filter and nested not allowed", iae.getMessage())__    };test,we,can,either,set,nested,sort,via,path,filter,or,via,nested,sort,builder,not,both;public,void,test,nested,sort,both,throws,throws,ioexception,geo,distance,sort,builder,sort,builder,new,geo,distance,sort,builder,field,name,0,0,0,0,illegal,argument,exception,iae,expect,throws,illegal,argument,exception,class,sort,builder,set,nested,path,nested,path,set,nested,sort,new,nested,sort,builder,other,path,assert,equals,setting,both,and,nested,not,allowed,iae,get,message,iae,expect,throws,illegal,argument,exception,class,sort,builder,set,nested,sort,new,nested,sort,builder,other,path,set,nested,path,nested,path,assert,equals,setting,both,and,nested,not,allowed,iae,get,message,iae,expect,throws,illegal,argument,exception,class,sort,builder,set,nested,sort,new,nested,sort,builder,other,path,set,nested,filter,query,builders,match,all,query,assert,equals,setting,both,and,nested,not,allowed,iae,get,message
GeoDistanceSortBuilderTests -> public void testNestedSortBothThrows() throws IOException;1539615817;Test we can either set nested sort via path/filter or via nested sort builder, not both;public void testNestedSortBothThrows() throws IOException {_        GeoDistanceSortBuilder sortBuilder = new GeoDistanceSortBuilder("fieldName", 0.0, 0.0)__        IllegalArgumentException iae = expectThrows(IllegalArgumentException.class,_                () -> sortBuilder.setNestedPath("nestedPath").setNestedSort(new NestedSortBuilder("otherPath")))__        assertEquals("Setting both nested_path/nested_filter and nested not allowed", iae.getMessage())__        iae = expectThrows(IllegalArgumentException.class,_                () -> sortBuilder.setNestedSort(new NestedSortBuilder("otherPath")).setNestedPath("nestedPath"))__        assertEquals("Setting both nested_path/nested_filter and nested not allowed", iae.getMessage())__        iae = expectThrows(IllegalArgumentException.class,_                () -> sortBuilder.setNestedSort(new NestedSortBuilder("otherPath")).setNestedFilter(QueryBuilders.matchAllQuery()))__        assertEquals("Setting both nested_path/nested_filter and nested not allowed", iae.getMessage())__    };test,we,can,either,set,nested,sort,via,path,filter,or,via,nested,sort,builder,not,both;public,void,test,nested,sort,both,throws,throws,ioexception,geo,distance,sort,builder,sort,builder,new,geo,distance,sort,builder,field,name,0,0,0,0,illegal,argument,exception,iae,expect,throws,illegal,argument,exception,class,sort,builder,set,nested,path,nested,path,set,nested,sort,new,nested,sort,builder,other,path,assert,equals,setting,both,and,nested,not,allowed,iae,get,message,iae,expect,throws,illegal,argument,exception,class,sort,builder,set,nested,sort,new,nested,sort,builder,other,path,set,nested,path,nested,path,assert,equals,setting,both,and,nested,not,allowed,iae,get,message,iae,expect,throws,illegal,argument,exception,class,sort,builder,set,nested,sort,new,nested,sort,builder,other,path,set,nested,filter,query,builders,match,all,query,assert,equals,setting,both,and,nested,not,allowed,iae,get,message
