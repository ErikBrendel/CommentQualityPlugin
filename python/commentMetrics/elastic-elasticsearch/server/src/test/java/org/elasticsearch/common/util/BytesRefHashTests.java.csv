commented;modifiers;parameterAmount;loc;comment;code
false;private;0;3;;private BigArrays randombigArrays() {     return new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY), new NoneCircuitBreakerService()). }
false;private;0;8;;private void newHash() {     if (hash != null) {         hash.close().     }     // Test high load factors to make sure that collision resolution works fine     final float maxLoadFactor = 0.6f + randomFloat() * 0.39f.     hash = new BytesRefHash(randomIntBetween(0, 100), maxLoadFactor, randombigArrays()). }
false;public;0;5;;@Override public void setUp() throws Exception {     super.setUp().     newHash(). }
false;public;0;36;;public void testDuell() {     final int len = randomIntBetween(1, 100000).     final BytesRef[] values = new BytesRef[len].     for (int i = 0. i < values.length. ++i) {         values[i] = new BytesRef(randomAlphaOfLength(5)).     }     final ObjectLongMap<BytesRef> valueToId = new ObjectLongHashMap<>().     final BytesRef[] idToValue = new BytesRef[values.length].     final int iters = randomInt(1000000).     for (int i = 0. i < iters. ++i) {         final BytesRef value = randomFrom(values).         if (valueToId.containsKey(value)) {             assertEquals(-1 - valueToId.get(value), hash.add(value, value.hashCode())).         } else {             assertEquals(valueToId.size(), hash.add(value, value.hashCode())).             idToValue[valueToId.size()] = value.             valueToId.put(value, valueToId.size()).         }     }     assertEquals(valueToId.size(), hash.size()).     for (Iterator<ObjectLongCursor<BytesRef>> iterator = valueToId.iterator(). iterator.hasNext(). ) {         final ObjectLongCursor<BytesRef> next = iterator.next().         assertEquals(next.value, hash.find(next.key, next.key.hashCode())).     }     for (long i = 0. i < hash.capacity(). ++i) {         final long id = hash.id(i).         BytesRef spare = new BytesRef().         if (id >= 0) {             hash.get(id, spare).             assertEquals(idToValue[(int) id], spare).         }     }     hash.close(). }
true;public;0;24;/**  * Test method for {@link org.apache.lucene.util.BytesRefHash#size()}.  */ ;// START - tests borrowed from LUCENE /**  * Test method for {@link org.apache.lucene.util.BytesRefHash#size()}.  */ public void testSize() {     BytesRefBuilder ref = new BytesRefBuilder().     int num = scaledRandomIntBetween(2, 20).     for (int j = 0. j < num. j++) {         final int mod = 1 + randomInt(40).         for (int i = 0. i < 797. i++) {             String str.             do {                 str = TestUtil.randomRealisticUnicodeString(random(), 1000).             } while (str.length() == 0).             ref.copyChars(str).             long count = hash.size().             long key = hash.add(ref.get()).             if (key < 0)                 assertEquals(hash.size(), count).             else                 assertEquals(hash.size(), count + 1).             if (i % mod == 0) {                 newHash().             }         }     }     hash.close(). }
true;public;0;33;/**  * Test method for  * {@link org.apache.lucene.util.BytesRefHash#get(int, BytesRef)}  * .  */ ;/**  * Test method for  * {@link org.apache.lucene.util.BytesRefHash#get(int, BytesRef)}  * .  */ public void testGet() {     BytesRefBuilder ref = new BytesRefBuilder().     BytesRef scratch = new BytesRef().     int num = scaledRandomIntBetween(2, 20).     for (int j = 0. j < num. j++) {         Map<String, Long> strings = new HashMap<>().         int uniqueCount = 0.         for (int i = 0. i < 797. i++) {             String str.             do {                 str = TestUtil.randomRealisticUnicodeString(random(), 1000).             } while (str.length() == 0).             ref.copyChars(str).             long count = hash.size().             long key = hash.add(ref.get()).             if (key >= 0) {                 assertNull(strings.put(str, Long.valueOf(key))).                 assertEquals(uniqueCount, key).                 uniqueCount++.                 assertEquals(hash.size(), count + 1).             } else {                 assertTrue((-key) - 1 < count).                 assertEquals(hash.size(), count).             }         }         for (Entry<String, Long> entry : strings.entrySet()) {             ref.copyChars(entry.getKey()).             assertEquals(ref.get(), hash.get(entry.getValue().longValue(), scratch)).         }         newHash().     }     hash.close(). }
true;public;0;34;/**  * Test method for  * {@link org.apache.lucene.util.BytesRefHash#add(org.apache.lucene.util.BytesRef)}  * .  */ ;/**  * Test method for  * {@link org.apache.lucene.util.BytesRefHash#add(org.apache.lucene.util.BytesRef)}  * .  */ public void testAdd() {     BytesRefBuilder ref = new BytesRefBuilder().     BytesRef scratch = new BytesRef().     int num = scaledRandomIntBetween(2, 20).     for (int j = 0. j < num. j++) {         Set<String> strings = new HashSet<>().         int uniqueCount = 0.         for (int i = 0. i < 797. i++) {             String str.             do {                 str = TestUtil.randomRealisticUnicodeString(random(), 1000).             } while (str.length() == 0).             ref.copyChars(str).             long count = hash.size().             long key = hash.add(ref.get()).             if (key >= 0) {                 assertTrue(strings.add(str)).                 assertEquals(uniqueCount, key).                 assertEquals(hash.size(), count + 1).                 uniqueCount++.             } else {                 assertFalse(strings.add(str)).                 assertTrue((-key) - 1 < count).                 assertEquals(str, hash.get((-key) - 1, scratch).utf8ToString()).                 assertEquals(count, hash.size()).             }         }         assertAllIn(strings, hash).         newHash().     }     hash.close(). }
false;public;0;34;;public void testFind() throws Exception {     BytesRefBuilder ref = new BytesRefBuilder().     BytesRef scratch = new BytesRef().     int num = scaledRandomIntBetween(2, 20).     for (int j = 0. j < num. j++) {         Set<String> strings = new HashSet<>().         int uniqueCount = 0.         for (int i = 0. i < 797. i++) {             String str.             do {                 str = TestUtil.randomRealisticUnicodeString(random(), 1000).             } while (str.length() == 0).             ref.copyChars(str).             long count = hash.size().             // hash.add(ref).             long key = hash.find(ref.get()).             if (key >= 0) {                 // string found in hash                 assertFalse(strings.add(str)).                 assertTrue(key < count).                 assertEquals(str, hash.get(key, scratch).utf8ToString()).                 assertEquals(count, hash.size()).             } else {                 key = hash.add(ref.get()).                 assertTrue(strings.add(str)).                 assertEquals(uniqueCount, key).                 assertEquals(hash.size(), count + 1).                 uniqueCount++.             }         }         assertAllIn(strings, hash).         newHash().     }     hash.close(). }
false;private;2;13;;private void assertAllIn(Set<String> strings, BytesRefHash hash) {     BytesRefBuilder ref = new BytesRefBuilder().     BytesRef scratch = new BytesRef().     long count = hash.size().     for (String string : strings) {         ref.copyChars(string).         // add again to check duplicates         long key = hash.add(ref.get()).         assertEquals(string, hash.get((-key) - 1, scratch).utf8ToString()).         assertEquals(count, hash.size()).         assertTrue("key: " + key + " count: " + count + " string: " + string, key < count).     } }
