commented;modifiers;parameterAmount;loc;comment;code
false;public;0;29;;public void testToReduce() {     List<Suggest.Suggestion<CompletionSuggestion.Entry>> shardSuggestions = new ArrayList<>().     int nShards = randomIntBetween(1, 10).     String name = randomAlphaOfLength(10).     int size = randomIntBetween(3, 5).     for (int i = 0. i < nShards. i++) {         CompletionSuggestion suggestion = new CompletionSuggestion(name, size, false).         suggestion.addTerm(new CompletionSuggestion.Entry(new Text(""), 0, 0)).         shardSuggestions.add(suggestion).     }     int totalResults = randomIntBetween(0, 5) * nShards.     float maxScore = randomIntBetween(totalResults, totalResults * 2).     for (int i = 0. i < totalResults. i++) {         Suggest.Suggestion<CompletionSuggestion.Entry> suggestion = randomFrom(shardSuggestions).         CompletionSuggestion.Entry entry = suggestion.getEntries().get(0).         if (entry.getOptions().size() < size) {             entry.addOption(new CompletionSuggestion.Entry.Option(i, new Text(""), maxScore - i, Collections.emptyMap())).         }     }     CompletionSuggestion reducedSuggestion = (CompletionSuggestion) shardSuggestions.get(0).reduce(shardSuggestions).     assertNotNull(reducedSuggestion).     assertThat(reducedSuggestion.getOptions().size(), lessThanOrEqualTo(size)).     int count = 0.     for (CompletionSuggestion.Entry.Option option : reducedSuggestion.getOptions()) {         assertThat(option.getDoc().doc, equalTo(count)).         count++.     } }
false;public;0;36;;public void testToReduceWithDuplicates() {     List<Suggest.Suggestion<CompletionSuggestion.Entry>> shardSuggestions = new ArrayList<>().     int nShards = randomIntBetween(2, 10).     String name = randomAlphaOfLength(10).     int size = randomIntBetween(10, 100).     int totalResults = size * nShards.     int numSurfaceForms = randomIntBetween(1, size).     String[] surfaceForms = new String[numSurfaceForms].     for (int i = 0. i < numSurfaceForms. i++) {         surfaceForms[i] = randomAlphaOfLength(20).     }     List<CompletionSuggestion.Entry.Option> options = new ArrayList<>().     for (int i = 0. i < nShards. i++) {         CompletionSuggestion suggestion = new CompletionSuggestion(name, size, true).         CompletionSuggestion.Entry entry = new CompletionSuggestion.Entry(new Text(""), 0, 0).         suggestion.addTerm(entry).         int maxScore = randomIntBetween(totalResults, totalResults * 2).         for (int j = 0. j < size. j++) {             String surfaceForm = randomFrom(surfaceForms).             CompletionSuggestion.Entry.Option newOption = new CompletionSuggestion.Entry.Option(j, new Text(surfaceForm), maxScore - j, Collections.emptyMap()).             entry.addOption(newOption).             options.add(newOption).         }         shardSuggestions.add(suggestion).     }     List<CompletionSuggestion.Entry.Option> expected = options.stream().sorted(COMPARATOR).distinct().limit(size).collect(Collectors.toList()).     CompletionSuggestion reducedSuggestion = (CompletionSuggestion) shardSuggestions.get(0).reduce(shardSuggestions).     assertNotNull(reducedSuggestion).     assertThat(reducedSuggestion.getOptions().size(), lessThanOrEqualTo(size)).     assertEquals(expected, reducedSuggestion.getOptions()). }
