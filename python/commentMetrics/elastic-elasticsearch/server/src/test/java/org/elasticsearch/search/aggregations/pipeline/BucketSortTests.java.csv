commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;29;;@Override protected BucketSortPipelineAggregationBuilder createTestAggregatorFactory() {     int sortCount = randomIntBetween(0, 5).     List<FieldSortBuilder> sorts = new ArrayList<>(sortCount).     for (int i = 0. i < sortCount. ++i) {         String sortField = randomAlphaOfLengthBetween(3, 20).         SortOrder sortOrder = randomFrom(SortOrder.values()).         FieldSortBuilder fieldSortBuilder = new FieldSortBuilder(sortField).         fieldSortBuilder.order(sortOrder).         sorts.add(fieldSortBuilder).     }     BucketSortPipelineAggregationBuilder factory = new BucketSortPipelineAggregationBuilder(randomAlphaOfLengthBetween(3, 20), sorts).     Integer from = randomIntBetween(0, 20).     Integer size = randomBoolean() ? randomIntBetween(1, 1000) : null.     if (randomBoolean()) {         factory.from(from).     }     if (size != null) {         factory.size(size).     }     if (randomBoolean()) {         factory.gapPolicy(randomFrom(BucketHelpers.GapPolicy.values())).     }     // Check if the combination ended up being invalid     if (sorts.isEmpty() && size == null && from == 0) {         factory.size(42).     }     return factory. }
false;public;0;5;;public void testNegativeFrom() {     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new BucketSortPipelineAggregationBuilder("foo", Collections.emptyList()).from(-1)).     assertThat(e.getMessage(), equalTo("[from] must be a non-negative integer: [-1]")). }
false;public;0;5;;public void testNegativeSize() {     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new BucketSortPipelineAggregationBuilder("foo", Collections.emptyList()).size(-1)).     assertThat(e.getMessage(), equalTo("[size] must be a positive integer: [-1]")). }
false;public;0;5;;public void testZeroSize() {     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new BucketSortPipelineAggregationBuilder("foo", Collections.emptyList()).size(0)).     assertThat(e.getMessage(), equalTo("[size] must be a positive integer: [0]")). }
false;public;0;5;;public void testNullGapPolicy() {     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new BucketSortPipelineAggregationBuilder("foo", Collections.emptyList()).gapPolicy(null)).     assertThat(e.getMessage(), equalTo("[gap_policy] must not be null: [foo]")). }
