commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Map<String, Function<IndexSettings, IndexStore>> getIndexStoreFactories() {     return Collections.singletonMap("store", IndexStore::new). }
false;public;0;4;;@Override public Map<String, Function<IndexSettings, IndexStore>> getIndexStoreFactories() {     return Collections.singletonMap("store", IndexStore::new). }
false;public;0;4;;@Override public Map<String, Function<IndexSettings, IndexStore>> getIndexStoreFactories() {     return Collections.singletonMap(TYPE, IndexStore::new). }
false;public;0;7;;public void testIndexStoreFactoryConflictsWithBuiltInIndexStoreType() {     final Settings settings = Settings.builder().put("path.home", createTempDir()).build().     final IllegalStateException e = expectThrows(IllegalStateException.class, () -> new MockNode(settings, Collections.singletonList(ConflictingStorePlugin.class))).     assertThat(e, hasToString(containsString("registered index store type [" + ConflictingStorePlugin.TYPE + "] conflicts with a built-in type"))). }
false;public;0;14;;public void testDuplicateIndexStoreFactories() {     final Settings settings = Settings.builder().put("path.home", createTempDir()).build().     final IllegalStateException e = expectThrows(IllegalStateException.class, () -> new MockNode(settings, Arrays.asList(BarStorePlugin.class, FooStorePlugin.class))).     if (JavaVersion.current().compareTo(JavaVersion.parse("9")) >= 0) {         assertThat(e, hasToString(matches("java.lang.IllegalStateException: Duplicate key store \\(attempted merging values " + "org.elasticsearch.plugins.IndexStorePluginTests\\$BarStorePlugin.* " + "and org.elasticsearch.plugins.IndexStorePluginTests\\$FooStorePlugin.*\\)"))).     } else {         assertThat(e, hasToString(matches("java.lang.IllegalStateException: Duplicate key org.elasticsearch.plugins.IndexStorePluginTests\\$BarStorePlugin.*"))).     } }
