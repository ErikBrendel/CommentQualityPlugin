# id;timestamp;commentText;codeText;commentWords;codeWords
DerivativeIT -> public void testSingleValuedField_normalised();1524684173;test first and second derivative on the sing;public void testSingleValuedField_normalised() {_        SearchResponse response = client()_                .prepareSearch("idx")_                .addAggregation(_                        histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval).minDocCount(0)_                                .subAggregation(derivative("deriv", "_count").unit("1ms"))_                                .subAggregation(derivative("2nd_deriv", "deriv").unit("10ms"))).execute().actionGet()___        assertSearchResponse(response)___        Histogram deriv = response.getAggregations().get("histo")__        assertThat(deriv, notNullValue())__        assertThat(deriv.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = deriv.getBuckets()__        assertThat(buckets.size(), equalTo(numValueBuckets))___        for (int i = 0_ i < numValueBuckets_ ++i) {_            Histogram.Bucket bucket = buckets.get(i)__            checkBucketKeyAndDocCount("InternalBucket " + i, bucket, i * interval, valueCounts[i])__            Derivative docCountDeriv = bucket.getAggregations().get("deriv")__            if (i > 0) {_                assertThat(docCountDeriv, notNullValue())__                assertThat(docCountDeriv.value(), closeTo((firstDerivValueCounts[i - 1]), 0.00001))__                assertThat(docCountDeriv.normalizedValue(), closeTo((double) (firstDerivValueCounts[i - 1]) / 5, 0.00001))__            } else {_                assertThat(docCountDeriv, nullValue())__            }_            Derivative docCount2ndDeriv = bucket.getAggregations().get("2nd_deriv")__            if (i > 1) {_                assertThat(docCount2ndDeriv, notNullValue())__                assertThat(docCount2ndDeriv.value(), closeTo((secondDerivValueCounts[i - 2]), 0.00001))__                assertThat(docCount2ndDeriv.normalizedValue(), closeTo((double) (secondDerivValueCounts[i - 2]) * 2, 0.00001))__            } else {_                assertThat(docCount2ndDeriv, nullValue())__            }_        }_    };test,first,and,second,derivative,on,the,sing;public,void,search,response,response,client,prepare,search,idx,add,aggregation,histogram,histo,field,interval,interval,min,doc,count,0,sub,aggregation,derivative,deriv,unit,1ms,sub,aggregation,derivative,deriv,unit,10ms,execute,action,get,assert,search,response,response,histogram,deriv,response,get,aggregations,get,histo,assert,that,deriv,not,null,value,assert,that,deriv,get,name,equal,to,histo,list,extends,bucket,buckets,deriv,get,buckets,assert,that,buckets,size,equal,to,num,value,buckets,for,int,i,0,i,num,value,buckets,i,histogram,bucket,bucket,buckets,get,i,check,bucket,key,and,doc,count,internal,bucket,i,bucket,i,interval,value,counts,i,derivative,doc,count,deriv,bucket,get,aggregations,get,deriv,if,i,0,assert,that,doc,count,deriv,not,null,value,assert,that,doc,count,deriv,value,close,to,first,deriv,value,counts,i,1,0,00001,assert,that,doc,count,deriv,normalized,value,close,to,double,first,deriv,value,counts,i,1,5,0,00001,else,assert,that,doc,count,deriv,null,value,derivative,doc,count2nd,deriv,bucket,get,aggregations,get,if,i,1,assert,that,doc,count2nd,deriv,not,null,value,assert,that,doc,count2nd,deriv,value,close,to,second,deriv,value,counts,i,2,0,00001,assert,that,doc,count2nd,deriv,normalized,value,close,to,double,second,deriv,value,counts,i,2,2,0,00001,else,assert,that,doc,count2nd,deriv,null,value
DerivativeIT -> public void testSingleValuedField_normalised();1536314350;test first and second derivative on the sing;public void testSingleValuedField_normalised() {_        SearchResponse response = client()_                .prepareSearch("idx")_                .addAggregation(_                        histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval).minDocCount(0)_                                .subAggregation(derivative("deriv", "_count").unit("1ms"))_                                .subAggregation(derivative("2nd_deriv", "deriv").unit("10ms"))).execute().actionGet()___        assertSearchResponse(response)___        Histogram deriv = response.getAggregations().get("histo")__        assertThat(deriv, notNullValue())__        assertThat(deriv.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = deriv.getBuckets()__        assertThat(buckets.size(), equalTo(numValueBuckets))___        for (int i = 0_ i < numValueBuckets_ ++i) {_            Histogram.Bucket bucket = buckets.get(i)__            checkBucketKeyAndDocCount("InternalBucket " + i, bucket, i * interval, valueCounts[i])__            Derivative docCountDeriv = bucket.getAggregations().get("deriv")__            if (i > 0) {_                assertThat(docCountDeriv, notNullValue())__                assertThat(docCountDeriv.value(), closeTo((firstDerivValueCounts[i - 1]), 0.00001))__                assertThat(docCountDeriv.normalizedValue(), closeTo((double) (firstDerivValueCounts[i - 1]) / 5, 0.00001))__            } else {_                assertThat(docCountDeriv, nullValue())__            }_            Derivative docCount2ndDeriv = bucket.getAggregations().get("2nd_deriv")__            if (i > 1) {_                assertThat(docCount2ndDeriv, notNullValue())__                assertThat(docCount2ndDeriv.value(), closeTo((secondDerivValueCounts[i - 2]), 0.00001))__                assertThat(docCount2ndDeriv.normalizedValue(), closeTo((double) (secondDerivValueCounts[i - 2]) * 2, 0.00001))__            } else {_                assertThat(docCount2ndDeriv, nullValue())__            }_        }_    };test,first,and,second,derivative,on,the,sing;public,void,search,response,response,client,prepare,search,idx,add,aggregation,histogram,histo,field,interval,interval,min,doc,count,0,sub,aggregation,derivative,deriv,unit,1ms,sub,aggregation,derivative,deriv,unit,10ms,execute,action,get,assert,search,response,response,histogram,deriv,response,get,aggregations,get,histo,assert,that,deriv,not,null,value,assert,that,deriv,get,name,equal,to,histo,list,extends,bucket,buckets,deriv,get,buckets,assert,that,buckets,size,equal,to,num,value,buckets,for,int,i,0,i,num,value,buckets,i,histogram,bucket,bucket,buckets,get,i,check,bucket,key,and,doc,count,internal,bucket,i,bucket,i,interval,value,counts,i,derivative,doc,count,deriv,bucket,get,aggregations,get,deriv,if,i,0,assert,that,doc,count,deriv,not,null,value,assert,that,doc,count,deriv,value,close,to,first,deriv,value,counts,i,1,0,00001,assert,that,doc,count,deriv,normalized,value,close,to,double,first,deriv,value,counts,i,1,5,0,00001,else,assert,that,doc,count,deriv,null,value,derivative,doc,count2nd,deriv,bucket,get,aggregations,get,if,i,1,assert,that,doc,count2nd,deriv,not,null,value,assert,that,doc,count2nd,deriv,value,close,to,second,deriv,value,counts,i,2,0,00001,assert,that,doc,count2nd,deriv,normalized,value,close,to,double,second,deriv,value,counts,i,2,2,0,00001,else,assert,that,doc,count2nd,deriv,null,value
DerivativeIT -> public void testSingleValuedField_normalised();1540486836;test first and second derivative on the sing;public void testSingleValuedField_normalised() {_        SearchResponse response = client()_                .prepareSearch("idx")_                .addAggregation(_                        histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval).minDocCount(0)_                                .subAggregation(derivative("deriv", "_count").unit("1ms"))_                                .subAggregation(derivative("2nd_deriv", "deriv").unit("10ms"))).execute().actionGet()___        assertSearchResponse(response)___        Histogram deriv = response.getAggregations().get("histo")__        assertThat(deriv, notNullValue())__        assertThat(deriv.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = deriv.getBuckets()__        assertThat(buckets.size(), equalTo(numValueBuckets))___        for (int i = 0_ i < numValueBuckets_ ++i) {_            Histogram.Bucket bucket = buckets.get(i)__            checkBucketKeyAndDocCount("InternalBucket " + i, bucket, i * interval, valueCounts[i])__            Derivative docCountDeriv = bucket.getAggregations().get("deriv")__            if (i > 0) {_                assertThat(docCountDeriv, notNullValue())__                assertThat(docCountDeriv.value(), closeTo((firstDerivValueCounts[i - 1]), 0.00001))__                assertThat(docCountDeriv.normalizedValue(), closeTo((double) (firstDerivValueCounts[i - 1]) / 5, 0.00001))__            } else {_                assertThat(docCountDeriv, nullValue())__            }_            Derivative docCount2ndDeriv = bucket.getAggregations().get("2nd_deriv")__            if (i > 1) {_                assertThat(docCount2ndDeriv, notNullValue())__                assertThat(docCount2ndDeriv.value(), closeTo((secondDerivValueCounts[i - 2]), 0.00001))__                assertThat(docCount2ndDeriv.normalizedValue(), closeTo((double) (secondDerivValueCounts[i - 2]) * 2, 0.00001))__            } else {_                assertThat(docCount2ndDeriv, nullValue())__            }_        }_    };test,first,and,second,derivative,on,the,sing;public,void,search,response,response,client,prepare,search,idx,add,aggregation,histogram,histo,field,interval,interval,min,doc,count,0,sub,aggregation,derivative,deriv,unit,1ms,sub,aggregation,derivative,deriv,unit,10ms,execute,action,get,assert,search,response,response,histogram,deriv,response,get,aggregations,get,histo,assert,that,deriv,not,null,value,assert,that,deriv,get,name,equal,to,histo,list,extends,bucket,buckets,deriv,get,buckets,assert,that,buckets,size,equal,to,num,value,buckets,for,int,i,0,i,num,value,buckets,i,histogram,bucket,bucket,buckets,get,i,check,bucket,key,and,doc,count,internal,bucket,i,bucket,i,interval,value,counts,i,derivative,doc,count,deriv,bucket,get,aggregations,get,deriv,if,i,0,assert,that,doc,count,deriv,not,null,value,assert,that,doc,count,deriv,value,close,to,first,deriv,value,counts,i,1,0,00001,assert,that,doc,count,deriv,normalized,value,close,to,double,first,deriv,value,counts,i,1,5,0,00001,else,assert,that,doc,count,deriv,null,value,derivative,doc,count2nd,deriv,bucket,get,aggregations,get,if,i,1,assert,that,doc,count2nd,deriv,not,null,value,assert,that,doc,count2nd,deriv,value,close,to,second,deriv,value,counts,i,2,0,00001,assert,that,doc,count2nd,deriv,normalized,value,close,to,double,second,deriv,value,counts,i,2,2,0,00001,else,assert,that,doc,count2nd,deriv,null,value
DerivativeIT -> public void testSingleValuedField_normalised();1544035746;test first and second derivative on the sing;public void testSingleValuedField_normalised() {_        SearchResponse response = client()_                .prepareSearch("idx")_                .addAggregation(_                        histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval).minDocCount(0)_                                .subAggregation(derivative("deriv", "_count").unit("1ms"))_                                .subAggregation(derivative("2nd_deriv", "deriv").unit("10ms"))).execute().actionGet()___        assertSearchResponse(response)___        Histogram deriv = response.getAggregations().get("histo")__        assertThat(deriv, notNullValue())__        assertThat(deriv.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = deriv.getBuckets()__        assertThat(buckets.size(), equalTo(numValueBuckets))___        for (int i = 0_ i < numValueBuckets_ ++i) {_            Histogram.Bucket bucket = buckets.get(i)__            checkBucketKeyAndDocCount("InternalBucket " + i, bucket, i * interval, valueCounts[i])__            Derivative docCountDeriv = bucket.getAggregations().get("deriv")__            if (i > 0) {_                assertThat(docCountDeriv, notNullValue())__                assertThat(docCountDeriv.value(), closeTo((firstDerivValueCounts[i - 1]), 0.00001))__                assertThat(docCountDeriv.normalizedValue(), closeTo((double) (firstDerivValueCounts[i - 1]) / 5, 0.00001))__            } else {_                assertThat(docCountDeriv, nullValue())__            }_            Derivative docCount2ndDeriv = bucket.getAggregations().get("2nd_deriv")__            if (i > 1) {_                assertThat(docCount2ndDeriv, notNullValue())__                assertThat(docCount2ndDeriv.value(), closeTo((secondDerivValueCounts[i - 2]), 0.00001))__                assertThat(docCount2ndDeriv.normalizedValue(), closeTo((double) (secondDerivValueCounts[i - 2]) * 2, 0.00001))__            } else {_                assertThat(docCount2ndDeriv, nullValue())__            }_        }_    };test,first,and,second,derivative,on,the,sing;public,void,search,response,response,client,prepare,search,idx,add,aggregation,histogram,histo,field,interval,interval,min,doc,count,0,sub,aggregation,derivative,deriv,unit,1ms,sub,aggregation,derivative,deriv,unit,10ms,execute,action,get,assert,search,response,response,histogram,deriv,response,get,aggregations,get,histo,assert,that,deriv,not,null,value,assert,that,deriv,get,name,equal,to,histo,list,extends,bucket,buckets,deriv,get,buckets,assert,that,buckets,size,equal,to,num,value,buckets,for,int,i,0,i,num,value,buckets,i,histogram,bucket,bucket,buckets,get,i,check,bucket,key,and,doc,count,internal,bucket,i,bucket,i,interval,value,counts,i,derivative,doc,count,deriv,bucket,get,aggregations,get,deriv,if,i,0,assert,that,doc,count,deriv,not,null,value,assert,that,doc,count,deriv,value,close,to,first,deriv,value,counts,i,1,0,00001,assert,that,doc,count,deriv,normalized,value,close,to,double,first,deriv,value,counts,i,1,5,0,00001,else,assert,that,doc,count,deriv,null,value,derivative,doc,count2nd,deriv,bucket,get,aggregations,get,if,i,1,assert,that,doc,count2nd,deriv,not,null,value,assert,that,doc,count2nd,deriv,value,close,to,second,deriv,value,counts,i,2,0,00001,assert,that,doc,count2nd,deriv,normalized,value,close,to,double,second,deriv,value,counts,i,2,2,0,00001,else,assert,that,doc,count2nd,deriv,null,value
DerivativeIT -> public void testSingleValuedField_normalised();1544110272;test first and second derivative on the sing;public void testSingleValuedField_normalised() {_        SearchResponse response = client()_                .prepareSearch("idx")_                .addAggregation(_                        histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval).minDocCount(0)_                                .subAggregation(derivative("deriv", "_count").unit("1ms"))_                                .subAggregation(derivative("2nd_deriv", "deriv").unit("10ms"))).get()___        assertSearchResponse(response)___        Histogram deriv = response.getAggregations().get("histo")__        assertThat(deriv, notNullValue())__        assertThat(deriv.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = deriv.getBuckets()__        assertThat(buckets.size(), equalTo(numValueBuckets))___        for (int i = 0_ i < numValueBuckets_ ++i) {_            Histogram.Bucket bucket = buckets.get(i)__            checkBucketKeyAndDocCount("InternalBucket " + i, bucket, i * interval, valueCounts[i])__            Derivative docCountDeriv = bucket.getAggregations().get("deriv")__            if (i > 0) {_                assertThat(docCountDeriv, notNullValue())__                assertThat(docCountDeriv.value(), closeTo((firstDerivValueCounts[i - 1]), 0.00001))__                assertThat(docCountDeriv.normalizedValue(), closeTo((double) (firstDerivValueCounts[i - 1]) / 5, 0.00001))__            } else {_                assertThat(docCountDeriv, nullValue())__            }_            Derivative docCount2ndDeriv = bucket.getAggregations().get("2nd_deriv")__            if (i > 1) {_                assertThat(docCount2ndDeriv, notNullValue())__                assertThat(docCount2ndDeriv.value(), closeTo((secondDerivValueCounts[i - 2]), 0.00001))__                assertThat(docCount2ndDeriv.normalizedValue(), closeTo((double) (secondDerivValueCounts[i - 2]) * 2, 0.00001))__            } else {_                assertThat(docCount2ndDeriv, nullValue())__            }_        }_    };test,first,and,second,derivative,on,the,sing;public,void,search,response,response,client,prepare,search,idx,add,aggregation,histogram,histo,field,interval,interval,min,doc,count,0,sub,aggregation,derivative,deriv,unit,1ms,sub,aggregation,derivative,deriv,unit,10ms,get,assert,search,response,response,histogram,deriv,response,get,aggregations,get,histo,assert,that,deriv,not,null,value,assert,that,deriv,get,name,equal,to,histo,list,extends,bucket,buckets,deriv,get,buckets,assert,that,buckets,size,equal,to,num,value,buckets,for,int,i,0,i,num,value,buckets,i,histogram,bucket,bucket,buckets,get,i,check,bucket,key,and,doc,count,internal,bucket,i,bucket,i,interval,value,counts,i,derivative,doc,count,deriv,bucket,get,aggregations,get,deriv,if,i,0,assert,that,doc,count,deriv,not,null,value,assert,that,doc,count,deriv,value,close,to,first,deriv,value,counts,i,1,0,00001,assert,that,doc,count,deriv,normalized,value,close,to,double,first,deriv,value,counts,i,1,5,0,00001,else,assert,that,doc,count,deriv,null,value,derivative,doc,count2nd,deriv,bucket,get,aggregations,get,if,i,1,assert,that,doc,count2nd,deriv,not,null,value,assert,that,doc,count2nd,deriv,value,close,to,second,deriv,value,counts,i,2,0,00001,assert,that,doc,count2nd,deriv,normalized,value,close,to,double,second,deriv,value,counts,i,2,2,0,00001,else,assert,that,doc,count2nd,deriv,null,value
DerivativeIT -> public void testDocCountDerivative();1524684173;test first and second derivative on the sing;public void testDocCountDerivative() {__        SearchResponse response = client()_                .prepareSearch("idx")_                .addAggregation(_                        histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval)_                                .subAggregation(derivative("deriv", "_count"))_                                .subAggregation(derivative("2nd_deriv", "deriv"))).execute().actionGet()___        assertSearchResponse(response)___        Histogram deriv = response.getAggregations().get("histo")__        assertThat(deriv, notNullValue())__        assertThat(deriv.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = deriv.getBuckets()__        assertThat(buckets.size(), equalTo(numValueBuckets))___        for (int i = 0_ i < numValueBuckets_ ++i) {_            Histogram.Bucket bucket = buckets.get(i)__            checkBucketKeyAndDocCount("InternalBucket " + i, bucket, i * interval, valueCounts[i])__            SimpleValue docCountDeriv = bucket.getAggregations().get("deriv")__            if (i > 0) {_                assertThat(docCountDeriv, notNullValue())__                assertThat(docCountDeriv.value(), equalTo((double) firstDerivValueCounts[i - 1]))__            } else {_                assertThat(docCountDeriv, nullValue())__            }_            SimpleValue docCount2ndDeriv = bucket.getAggregations().get("2nd_deriv")__            if (i > 1) {_                assertThat(docCount2ndDeriv, notNullValue())__                assertThat(docCount2ndDeriv.value(), equalTo((double) secondDerivValueCounts[i - 2]))__            } else {_                assertThat(docCount2ndDeriv, nullValue())__            }_        }_    };test,first,and,second,derivative,on,the,sing;public,void,test,doc,count,derivative,search,response,response,client,prepare,search,idx,add,aggregation,histogram,histo,field,interval,interval,sub,aggregation,derivative,deriv,sub,aggregation,derivative,deriv,execute,action,get,assert,search,response,response,histogram,deriv,response,get,aggregations,get,histo,assert,that,deriv,not,null,value,assert,that,deriv,get,name,equal,to,histo,list,extends,bucket,buckets,deriv,get,buckets,assert,that,buckets,size,equal,to,num,value,buckets,for,int,i,0,i,num,value,buckets,i,histogram,bucket,bucket,buckets,get,i,check,bucket,key,and,doc,count,internal,bucket,i,bucket,i,interval,value,counts,i,simple,value,doc,count,deriv,bucket,get,aggregations,get,deriv,if,i,0,assert,that,doc,count,deriv,not,null,value,assert,that,doc,count,deriv,value,equal,to,double,first,deriv,value,counts,i,1,else,assert,that,doc,count,deriv,null,value,simple,value,doc,count2nd,deriv,bucket,get,aggregations,get,if,i,1,assert,that,doc,count2nd,deriv,not,null,value,assert,that,doc,count2nd,deriv,value,equal,to,double,second,deriv,value,counts,i,2,else,assert,that,doc,count2nd,deriv,null,value
DerivativeIT -> public void testDocCountDerivative();1536314350;test first and second derivative on the sing;public void testDocCountDerivative() {__        SearchResponse response = client()_                .prepareSearch("idx")_                .addAggregation(_                        histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval)_                                .subAggregation(derivative("deriv", "_count"))_                                .subAggregation(derivative("2nd_deriv", "deriv"))).execute().actionGet()___        assertSearchResponse(response)___        Histogram deriv = response.getAggregations().get("histo")__        assertThat(deriv, notNullValue())__        assertThat(deriv.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = deriv.getBuckets()__        assertThat(buckets.size(), equalTo(numValueBuckets))___        for (int i = 0_ i < numValueBuckets_ ++i) {_            Histogram.Bucket bucket = buckets.get(i)__            checkBucketKeyAndDocCount("InternalBucket " + i, bucket, i * interval, valueCounts[i])__            SimpleValue docCountDeriv = bucket.getAggregations().get("deriv")__            if (i > 0) {_                assertThat(docCountDeriv, notNullValue())__                assertThat(docCountDeriv.value(), equalTo((double) firstDerivValueCounts[i - 1]))__            } else {_                assertThat(docCountDeriv, nullValue())__            }_            SimpleValue docCount2ndDeriv = bucket.getAggregations().get("2nd_deriv")__            if (i > 1) {_                assertThat(docCount2ndDeriv, notNullValue())__                assertThat(docCount2ndDeriv.value(), equalTo((double) secondDerivValueCounts[i - 2]))__            } else {_                assertThat(docCount2ndDeriv, nullValue())__            }_        }_    };test,first,and,second,derivative,on,the,sing;public,void,test,doc,count,derivative,search,response,response,client,prepare,search,idx,add,aggregation,histogram,histo,field,interval,interval,sub,aggregation,derivative,deriv,sub,aggregation,derivative,deriv,execute,action,get,assert,search,response,response,histogram,deriv,response,get,aggregations,get,histo,assert,that,deriv,not,null,value,assert,that,deriv,get,name,equal,to,histo,list,extends,bucket,buckets,deriv,get,buckets,assert,that,buckets,size,equal,to,num,value,buckets,for,int,i,0,i,num,value,buckets,i,histogram,bucket,bucket,buckets,get,i,check,bucket,key,and,doc,count,internal,bucket,i,bucket,i,interval,value,counts,i,simple,value,doc,count,deriv,bucket,get,aggregations,get,deriv,if,i,0,assert,that,doc,count,deriv,not,null,value,assert,that,doc,count,deriv,value,equal,to,double,first,deriv,value,counts,i,1,else,assert,that,doc,count,deriv,null,value,simple,value,doc,count2nd,deriv,bucket,get,aggregations,get,if,i,1,assert,that,doc,count2nd,deriv,not,null,value,assert,that,doc,count2nd,deriv,value,equal,to,double,second,deriv,value,counts,i,2,else,assert,that,doc,count2nd,deriv,null,value
DerivativeIT -> public void testDocCountDerivative();1540486836;test first and second derivative on the sing;public void testDocCountDerivative() {__        SearchResponse response = client()_                .prepareSearch("idx")_                .addAggregation(_                        histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval)_                                .subAggregation(derivative("deriv", "_count"))_                                .subAggregation(derivative("2nd_deriv", "deriv"))).execute().actionGet()___        assertSearchResponse(response)___        Histogram deriv = response.getAggregations().get("histo")__        assertThat(deriv, notNullValue())__        assertThat(deriv.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = deriv.getBuckets()__        assertThat(buckets.size(), equalTo(numValueBuckets))___        for (int i = 0_ i < numValueBuckets_ ++i) {_            Histogram.Bucket bucket = buckets.get(i)__            checkBucketKeyAndDocCount("InternalBucket " + i, bucket, i * interval, valueCounts[i])__            SimpleValue docCountDeriv = bucket.getAggregations().get("deriv")__            if (i > 0) {_                assertThat(docCountDeriv, notNullValue())__                assertThat(docCountDeriv.value(), equalTo((double) firstDerivValueCounts[i - 1]))__            } else {_                assertThat(docCountDeriv, nullValue())__            }_            SimpleValue docCount2ndDeriv = bucket.getAggregations().get("2nd_deriv")__            if (i > 1) {_                assertThat(docCount2ndDeriv, notNullValue())__                assertThat(docCount2ndDeriv.value(), equalTo((double) secondDerivValueCounts[i - 2]))__            } else {_                assertThat(docCount2ndDeriv, nullValue())__            }_        }_    };test,first,and,second,derivative,on,the,sing;public,void,test,doc,count,derivative,search,response,response,client,prepare,search,idx,add,aggregation,histogram,histo,field,interval,interval,sub,aggregation,derivative,deriv,sub,aggregation,derivative,deriv,execute,action,get,assert,search,response,response,histogram,deriv,response,get,aggregations,get,histo,assert,that,deriv,not,null,value,assert,that,deriv,get,name,equal,to,histo,list,extends,bucket,buckets,deriv,get,buckets,assert,that,buckets,size,equal,to,num,value,buckets,for,int,i,0,i,num,value,buckets,i,histogram,bucket,bucket,buckets,get,i,check,bucket,key,and,doc,count,internal,bucket,i,bucket,i,interval,value,counts,i,simple,value,doc,count,deriv,bucket,get,aggregations,get,deriv,if,i,0,assert,that,doc,count,deriv,not,null,value,assert,that,doc,count,deriv,value,equal,to,double,first,deriv,value,counts,i,1,else,assert,that,doc,count,deriv,null,value,simple,value,doc,count2nd,deriv,bucket,get,aggregations,get,if,i,1,assert,that,doc,count2nd,deriv,not,null,value,assert,that,doc,count2nd,deriv,value,equal,to,double,second,deriv,value,counts,i,2,else,assert,that,doc,count2nd,deriv,null,value
DerivativeIT -> public void testDocCountDerivative();1544035746;test first and second derivative on the sing;public void testDocCountDerivative() {__        SearchResponse response = client()_                .prepareSearch("idx")_                .addAggregation(_                        histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval)_                                .subAggregation(derivative("deriv", "_count"))_                                .subAggregation(derivative("2nd_deriv", "deriv"))).execute().actionGet()___        assertSearchResponse(response)___        Histogram deriv = response.getAggregations().get("histo")__        assertThat(deriv, notNullValue())__        assertThat(deriv.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = deriv.getBuckets()__        assertThat(buckets.size(), equalTo(numValueBuckets))___        for (int i = 0_ i < numValueBuckets_ ++i) {_            Histogram.Bucket bucket = buckets.get(i)__            checkBucketKeyAndDocCount("InternalBucket " + i, bucket, i * interval, valueCounts[i])__            SimpleValue docCountDeriv = bucket.getAggregations().get("deriv")__            if (i > 0) {_                assertThat(docCountDeriv, notNullValue())__                assertThat(docCountDeriv.value(), equalTo((double) firstDerivValueCounts[i - 1]))__            } else {_                assertThat(docCountDeriv, nullValue())__            }_            SimpleValue docCount2ndDeriv = bucket.getAggregations().get("2nd_deriv")__            if (i > 1) {_                assertThat(docCount2ndDeriv, notNullValue())__                assertThat(docCount2ndDeriv.value(), equalTo((double) secondDerivValueCounts[i - 2]))__            } else {_                assertThat(docCount2ndDeriv, nullValue())__            }_        }_    };test,first,and,second,derivative,on,the,sing;public,void,test,doc,count,derivative,search,response,response,client,prepare,search,idx,add,aggregation,histogram,histo,field,interval,interval,sub,aggregation,derivative,deriv,sub,aggregation,derivative,deriv,execute,action,get,assert,search,response,response,histogram,deriv,response,get,aggregations,get,histo,assert,that,deriv,not,null,value,assert,that,deriv,get,name,equal,to,histo,list,extends,bucket,buckets,deriv,get,buckets,assert,that,buckets,size,equal,to,num,value,buckets,for,int,i,0,i,num,value,buckets,i,histogram,bucket,bucket,buckets,get,i,check,bucket,key,and,doc,count,internal,bucket,i,bucket,i,interval,value,counts,i,simple,value,doc,count,deriv,bucket,get,aggregations,get,deriv,if,i,0,assert,that,doc,count,deriv,not,null,value,assert,that,doc,count,deriv,value,equal,to,double,first,deriv,value,counts,i,1,else,assert,that,doc,count,deriv,null,value,simple,value,doc,count2nd,deriv,bucket,get,aggregations,get,if,i,1,assert,that,doc,count2nd,deriv,not,null,value,assert,that,doc,count2nd,deriv,value,equal,to,double,second,deriv,value,counts,i,2,else,assert,that,doc,count2nd,deriv,null,value
DerivativeIT -> public void testDocCountDerivative();1544110272;test first and second derivative on the sing;public void testDocCountDerivative() {__        SearchResponse response = client()_                .prepareSearch("idx")_                .addAggregation(_                        histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval)_                                .subAggregation(derivative("deriv", "_count"))_                                .subAggregation(derivative("2nd_deriv", "deriv"))).get()___        assertSearchResponse(response)___        Histogram deriv = response.getAggregations().get("histo")__        assertThat(deriv, notNullValue())__        assertThat(deriv.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = deriv.getBuckets()__        assertThat(buckets.size(), equalTo(numValueBuckets))___        for (int i = 0_ i < numValueBuckets_ ++i) {_            Histogram.Bucket bucket = buckets.get(i)__            checkBucketKeyAndDocCount("InternalBucket " + i, bucket, i * interval, valueCounts[i])__            SimpleValue docCountDeriv = bucket.getAggregations().get("deriv")__            if (i > 0) {_                assertThat(docCountDeriv, notNullValue())__                assertThat(docCountDeriv.value(), equalTo((double) firstDerivValueCounts[i - 1]))__            } else {_                assertThat(docCountDeriv, nullValue())__            }_            SimpleValue docCount2ndDeriv = bucket.getAggregations().get("2nd_deriv")__            if (i > 1) {_                assertThat(docCount2ndDeriv, notNullValue())__                assertThat(docCount2ndDeriv.value(), equalTo((double) secondDerivValueCounts[i - 2]))__            } else {_                assertThat(docCount2ndDeriv, nullValue())__            }_        }_    };test,first,and,second,derivative,on,the,sing;public,void,test,doc,count,derivative,search,response,response,client,prepare,search,idx,add,aggregation,histogram,histo,field,interval,interval,sub,aggregation,derivative,deriv,sub,aggregation,derivative,deriv,get,assert,search,response,response,histogram,deriv,response,get,aggregations,get,histo,assert,that,deriv,not,null,value,assert,that,deriv,get,name,equal,to,histo,list,extends,bucket,buckets,deriv,get,buckets,assert,that,buckets,size,equal,to,num,value,buckets,for,int,i,0,i,num,value,buckets,i,histogram,bucket,bucket,buckets,get,i,check,bucket,key,and,doc,count,internal,bucket,i,bucket,i,interval,value,counts,i,simple,value,doc,count,deriv,bucket,get,aggregations,get,deriv,if,i,0,assert,that,doc,count,deriv,not,null,value,assert,that,doc,count,deriv,value,equal,to,double,first,deriv,value,counts,i,1,else,assert,that,doc,count,deriv,null,value,simple,value,doc,count2nd,deriv,bucket,get,aggregations,get,if,i,1,assert,that,doc,count2nd,deriv,not,null,value,assert,that,doc,count2nd,deriv,value,equal,to,double,second,deriv,value,counts,i,2,else,assert,that,doc,count2nd,deriv,null,value
