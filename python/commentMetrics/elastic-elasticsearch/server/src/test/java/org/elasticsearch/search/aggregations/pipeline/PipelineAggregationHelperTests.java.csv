# id;timestamp;commentText;codeText;commentWords;codeWords
PipelineAggregationHelperTests -> public static ArrayList<MockBucket> generateHistogram(int interval, int size, double gapProbability, double runProbability);1524684173;Generates a mock histogram to use for testing.  Each MockBucket holds a doc count, key and document values_which can later be used to compute metrics and compare against the real aggregation results.  Gappiness can be_controlled via parameters__@param interval          Interval between bucket keys_@param size              Size of mock histogram to generate (in buckets)_@param gapProbability    Probability of generating an empty bucket. 0.0-1.0 inclusive_@param runProbability    Probability of extending a gap once one has been created.  0.0-1.0 inclusive;public static ArrayList<MockBucket> generateHistogram(int interval, int size, double gapProbability, double runProbability) {_        ArrayList<MockBucket> values = new ArrayList<>(size)___        boolean lastWasGap = false__        boolean emptyHisto = true___        for (int i = 0_ i < size_ i++) {_            MockBucket bucket = new MockBucket()__            if (randomDouble() < gapProbability) {_                _                bucket.count = 0__                bucket.docValues = new double[0]___                lastWasGap = true___            } else if (lastWasGap && randomDouble() < runProbability) {_                _                bucket.count = 0__                bucket.docValues = new double[0]___                lastWasGap = true__            } else {_                bucket.count = randomIntBetween(1, 50)__                bucket.docValues = new double[bucket.count]__                for (int j = 0_ j < bucket.count_ j++) {_                    bucket.docValues[j] = randomDouble() * randomIntBetween(-20, 20)__                }_                lastWasGap = false__                emptyHisto = false__            }__            bucket.key = i * interval__            values.add(bucket)__        }__        if (emptyHisto) {_            int idx = randomIntBetween(0, values.size()-1)__            MockBucket bucket = values.get(idx)__            bucket.count = randomIntBetween(1, 50)__            bucket.docValues = new double[bucket.count]__            for (int j = 0_ j < bucket.count_ j++) {_                bucket.docValues[j] = randomDouble() * randomIntBetween(-20, 20)__            }_            values.set(idx, bucket)__        }__        return values__    };generates,a,mock,histogram,to,use,for,testing,each,mock,bucket,holds,a,doc,count,key,and,document,values,which,can,later,be,used,to,compute,metrics,and,compare,against,the,real,aggregation,results,gappiness,can,be,controlled,via,parameters,param,interval,interval,between,bucket,keys,param,size,size,of,mock,histogram,to,generate,in,buckets,param,gap,probability,probability,of,generating,an,empty,bucket,0,0,1,0,inclusive,param,run,probability,probability,of,extending,a,gap,once,one,has,been,created,0,0,1,0,inclusive;public,static,array,list,mock,bucket,generate,histogram,int,interval,int,size,double,gap,probability,double,run,probability,array,list,mock,bucket,values,new,array,list,size,boolean,last,was,gap,false,boolean,empty,histo,true,for,int,i,0,i,size,i,mock,bucket,bucket,new,mock,bucket,if,random,double,gap,probability,bucket,count,0,bucket,doc,values,new,double,0,last,was,gap,true,else,if,last,was,gap,random,double,run,probability,bucket,count,0,bucket,doc,values,new,double,0,last,was,gap,true,else,bucket,count,random,int,between,1,50,bucket,doc,values,new,double,bucket,count,for,int,j,0,j,bucket,count,j,bucket,doc,values,j,random,double,random,int,between,20,20,last,was,gap,false,empty,histo,false,bucket,key,i,interval,values,add,bucket,if,empty,histo,int,idx,random,int,between,0,values,size,1,mock,bucket,bucket,values,get,idx,bucket,count,random,int,between,1,50,bucket,doc,values,new,double,bucket,count,for,int,j,0,j,bucket,count,j,bucket,doc,values,j,random,double,random,int,between,20,20,values,set,idx,bucket,return,values
PipelineAggregationHelperTests -> public static ArrayList<MockBucket> generateHistogram(int interval, int size, double gapProbability, double runProbability);1536314350;Generates a mock histogram to use for testing.  Each MockBucket holds a doc count, key and document values_which can later be used to compute metrics and compare against the real aggregation results.  Gappiness can be_controlled via parameters__@param interval          Interval between bucket keys_@param size              Size of mock histogram to generate (in buckets)_@param gapProbability    Probability of generating an empty bucket. 0.0-1.0 inclusive_@param runProbability    Probability of extending a gap once one has been created.  0.0-1.0 inclusive;public static ArrayList<MockBucket> generateHistogram(int interval, int size, double gapProbability, double runProbability) {_        ArrayList<MockBucket> values = new ArrayList<>(size)___        boolean lastWasGap = false__        boolean emptyHisto = true___        for (int i = 0_ i < size_ i++) {_            MockBucket bucket = new MockBucket()__            if (randomDouble() < gapProbability) {_                _                bucket.count = 0__                bucket.docValues = new double[0]___                lastWasGap = true___            } else if (lastWasGap && randomDouble() < runProbability) {_                _                bucket.count = 0__                bucket.docValues = new double[0]___                lastWasGap = true__            } else {_                bucket.count = randomIntBetween(1, 50)__                bucket.docValues = new double[bucket.count]__                for (int j = 0_ j < bucket.count_ j++) {_                    bucket.docValues[j] = randomDouble() * randomIntBetween(-20, 20)__                }_                lastWasGap = false__                emptyHisto = false__            }__            bucket.key = i * interval__            values.add(bucket)__        }__        if (emptyHisto) {_            int idx = randomIntBetween(0, values.size()-1)__            MockBucket bucket = values.get(idx)__            bucket.count = randomIntBetween(1, 50)__            bucket.docValues = new double[bucket.count]__            for (int j = 0_ j < bucket.count_ j++) {_                bucket.docValues[j] = randomDouble() * randomIntBetween(-20, 20)__            }_            values.set(idx, bucket)__        }__        return values__    };generates,a,mock,histogram,to,use,for,testing,each,mock,bucket,holds,a,doc,count,key,and,document,values,which,can,later,be,used,to,compute,metrics,and,compare,against,the,real,aggregation,results,gappiness,can,be,controlled,via,parameters,param,interval,interval,between,bucket,keys,param,size,size,of,mock,histogram,to,generate,in,buckets,param,gap,probability,probability,of,generating,an,empty,bucket,0,0,1,0,inclusive,param,run,probability,probability,of,extending,a,gap,once,one,has,been,created,0,0,1,0,inclusive;public,static,array,list,mock,bucket,generate,histogram,int,interval,int,size,double,gap,probability,double,run,probability,array,list,mock,bucket,values,new,array,list,size,boolean,last,was,gap,false,boolean,empty,histo,true,for,int,i,0,i,size,i,mock,bucket,bucket,new,mock,bucket,if,random,double,gap,probability,bucket,count,0,bucket,doc,values,new,double,0,last,was,gap,true,else,if,last,was,gap,random,double,run,probability,bucket,count,0,bucket,doc,values,new,double,0,last,was,gap,true,else,bucket,count,random,int,between,1,50,bucket,doc,values,new,double,bucket,count,for,int,j,0,j,bucket,count,j,bucket,doc,values,j,random,double,random,int,between,20,20,last,was,gap,false,empty,histo,false,bucket,key,i,interval,values,add,bucket,if,empty,histo,int,idx,random,int,between,0,values,size,1,mock,bucket,bucket,values,get,idx,bucket,count,random,int,between,1,50,bucket,doc,values,new,double,bucket,count,for,int,j,0,j,bucket,count,j,bucket,doc,values,j,random,double,random,int,between,20,20,values,set,idx,bucket,return,values
PipelineAggregationHelperTests -> public static ArrayList<MockBucket> generateHistogram(int interval, int size, double gapProbability, double runProbability);1544475769;Generates a mock histogram to use for testing.  Each MockBucket holds a doc count, key and document values_which can later be used to compute metrics and compare against the real aggregation results.  Gappiness can be_controlled via parameters__@param interval          Interval between bucket keys_@param size              Size of mock histogram to generate (in buckets)_@param gapProbability    Probability of generating an empty bucket. 0.0-1.0 inclusive_@param runProbability    Probability of extending a gap once one has been created.  0.0-1.0 inclusive;public static ArrayList<MockBucket> generateHistogram(int interval, int size, double gapProbability, double runProbability) {_        ArrayList<MockBucket> values = new ArrayList<>(size)___        boolean lastWasGap = false__        boolean emptyHisto = true___        for (int i = 0_ i < size_ i++) {_            MockBucket bucket = new MockBucket()__            if (randomDouble() < gapProbability) {_                _                bucket.count = 0__                bucket.docValues = new double[0]___                lastWasGap = true___            } else if (lastWasGap && randomDouble() < runProbability) {_                _                bucket.count = 0__                bucket.docValues = new double[0]___                lastWasGap = true__            } else {_                bucket.count = randomIntBetween(1, 50)__                bucket.docValues = new double[bucket.count]__                for (int j = 0_ j < bucket.count_ j++) {_                    bucket.docValues[j] = randomDouble() * randomIntBetween(-20, 20)__                }_                lastWasGap = false__                emptyHisto = false__            }__            bucket.key = i * interval__            values.add(bucket)__        }__        if (emptyHisto) {_            int idx = randomIntBetween(0, values.size()-1)__            MockBucket bucket = values.get(idx)__            bucket.count = randomIntBetween(1, 50)__            bucket.docValues = new double[bucket.count]__            for (int j = 0_ j < bucket.count_ j++) {_                bucket.docValues[j] = randomDouble() * randomIntBetween(-20, 20)__            }_            values.set(idx, bucket)__        }__        return values__    };generates,a,mock,histogram,to,use,for,testing,each,mock,bucket,holds,a,doc,count,key,and,document,values,which,can,later,be,used,to,compute,metrics,and,compare,against,the,real,aggregation,results,gappiness,can,be,controlled,via,parameters,param,interval,interval,between,bucket,keys,param,size,size,of,mock,histogram,to,generate,in,buckets,param,gap,probability,probability,of,generating,an,empty,bucket,0,0,1,0,inclusive,param,run,probability,probability,of,extending,a,gap,once,one,has,been,created,0,0,1,0,inclusive;public,static,array,list,mock,bucket,generate,histogram,int,interval,int,size,double,gap,probability,double,run,probability,array,list,mock,bucket,values,new,array,list,size,boolean,last,was,gap,false,boolean,empty,histo,true,for,int,i,0,i,size,i,mock,bucket,bucket,new,mock,bucket,if,random,double,gap,probability,bucket,count,0,bucket,doc,values,new,double,0,last,was,gap,true,else,if,last,was,gap,random,double,run,probability,bucket,count,0,bucket,doc,values,new,double,0,last,was,gap,true,else,bucket,count,random,int,between,1,50,bucket,doc,values,new,double,bucket,count,for,int,j,0,j,bucket,count,j,bucket,doc,values,j,random,double,random,int,between,20,20,last,was,gap,false,empty,histo,false,bucket,key,i,interval,values,add,bucket,if,empty,histo,int,idx,random,int,between,0,values,size,1,mock,bucket,bucket,values,get,idx,bucket,count,random,int,between,1,50,bucket,doc,values,new,double,bucket,count,for,int,j,0,j,bucket,count,j,bucket,doc,values,j,random,double,random,int,between,20,20,values,set,idx,bucket,return,values
PipelineAggregationHelperTests -> public static ArrayList<MockBucket> generateHistogram(int interval, int size, double gapProbability, double runProbability);1548236405;Generates a mock histogram to use for testing.  Each MockBucket holds a doc count, key and document values_which can later be used to compute metrics and compare against the real aggregation results.  Gappiness can be_controlled via parameters__@param interval          Interval between bucket keys_@param size              Size of mock histogram to generate (in buckets)_@param gapProbability    Probability of generating an empty bucket. 0.0-1.0 inclusive_@param runProbability    Probability of extending a gap once one has been created.  0.0-1.0 inclusive;public static ArrayList<MockBucket> generateHistogram(int interval, int size, double gapProbability, double runProbability) {_        ArrayList<MockBucket> values = new ArrayList<>(size)___        boolean lastWasGap = false__        boolean emptyHisto = true___        for (int i = 0_ i < size_ i++) {_            MockBucket bucket = new MockBucket()__            if (randomDouble() < gapProbability) {_                _                bucket.count = 0__                bucket.docValues = new double[0]___                lastWasGap = true___            } else if (lastWasGap && randomDouble() < runProbability) {_                _                bucket.count = 0__                bucket.docValues = new double[0]___                lastWasGap = true__            } else {_                bucket.count = randomIntBetween(1, 50)__                bucket.docValues = new double[bucket.count]__                for (int j = 0_ j < bucket.count_ j++) {_                    bucket.docValues[j] = randomDouble() * randomIntBetween(-20, 20)__                }_                lastWasGap = false__                emptyHisto = false__            }__            bucket.key = i * interval__            values.add(bucket)__        }__        if (emptyHisto) {_            int idx = randomIntBetween(0, values.size()-1)__            MockBucket bucket = values.get(idx)__            bucket.count = randomIntBetween(1, 50)__            bucket.docValues = new double[bucket.count]__            for (int j = 0_ j < bucket.count_ j++) {_                bucket.docValues[j] = randomDouble() * randomIntBetween(-20, 20)__            }_            values.set(idx, bucket)__        }__        return values__    };generates,a,mock,histogram,to,use,for,testing,each,mock,bucket,holds,a,doc,count,key,and,document,values,which,can,later,be,used,to,compute,metrics,and,compare,against,the,real,aggregation,results,gappiness,can,be,controlled,via,parameters,param,interval,interval,between,bucket,keys,param,size,size,of,mock,histogram,to,generate,in,buckets,param,gap,probability,probability,of,generating,an,empty,bucket,0,0,1,0,inclusive,param,run,probability,probability,of,extending,a,gap,once,one,has,been,created,0,0,1,0,inclusive;public,static,array,list,mock,bucket,generate,histogram,int,interval,int,size,double,gap,probability,double,run,probability,array,list,mock,bucket,values,new,array,list,size,boolean,last,was,gap,false,boolean,empty,histo,true,for,int,i,0,i,size,i,mock,bucket,bucket,new,mock,bucket,if,random,double,gap,probability,bucket,count,0,bucket,doc,values,new,double,0,last,was,gap,true,else,if,last,was,gap,random,double,run,probability,bucket,count,0,bucket,doc,values,new,double,0,last,was,gap,true,else,bucket,count,random,int,between,1,50,bucket,doc,values,new,double,bucket,count,for,int,j,0,j,bucket,count,j,bucket,doc,values,j,random,double,random,int,between,20,20,last,was,gap,false,empty,histo,false,bucket,key,i,interval,values,add,bucket,if,empty,histo,int,idx,random,int,between,0,values,size,1,mock,bucket,bucket,values,get,idx,bucket,count,random,int,between,1,50,bucket,doc,values,new,double,bucket,count,for,int,j,0,j,bucket,count,j,bucket,doc,values,j,random,double,random,int,between,20,20,values,set,idx,bucket,return,values
PipelineAggregationHelperTests -> public static double calculateMetric(double[] values, ValuesSourceAggregationBuilder<?, ?> metric);1524684173;Computes a simple agg metric (min, sum, etc) from the provided values__@param values Array of values to compute metric for_@param metric A metric builder which defines what kind of metric should be returned for the values;public static double calculateMetric(double[] values, ValuesSourceAggregationBuilder<?, ?> metric) {__        if (metric instanceof MinAggregationBuilder) {_            double accumulator = Double.POSITIVE_INFINITY__            for (double value : values) {_                accumulator = Math.min(accumulator, value)__            }_            return accumulator__        } else if (metric instanceof MaxAggregationBuilder) {_            double accumulator = Double.NEGATIVE_INFINITY__            for (double value : values) {_                accumulator = Math.max(accumulator, value)__            }_            return accumulator__        } else if (metric instanceof SumAggregationBuilder) {_            double accumulator = 0__            for (double value : values) {_                accumulator += value__            }_            return accumulator__        } else if (metric instanceof AvgAggregationBuilder) {_            double accumulator = 0__            for (double value : values) {_                accumulator += value__            }_            return accumulator / values.length__        }__        return 0.0__    };computes,a,simple,agg,metric,min,sum,etc,from,the,provided,values,param,values,array,of,values,to,compute,metric,for,param,metric,a,metric,builder,which,defines,what,kind,of,metric,should,be,returned,for,the,values;public,static,double,calculate,metric,double,values,values,source,aggregation,builder,metric,if,metric,instanceof,min,aggregation,builder,double,accumulator,double,for,double,value,values,accumulator,math,min,accumulator,value,return,accumulator,else,if,metric,instanceof,max,aggregation,builder,double,accumulator,double,for,double,value,values,accumulator,math,max,accumulator,value,return,accumulator,else,if,metric,instanceof,sum,aggregation,builder,double,accumulator,0,for,double,value,values,accumulator,value,return,accumulator,else,if,metric,instanceof,avg,aggregation,builder,double,accumulator,0,for,double,value,values,accumulator,value,return,accumulator,values,length,return,0,0
PipelineAggregationHelperTests -> public static double calculateMetric(double[] values, ValuesSourceAggregationBuilder<?, ?> metric);1536314350;Computes a simple agg metric (min, sum, etc) from the provided values__@param values Array of values to compute metric for_@param metric A metric builder which defines what kind of metric should be returned for the values;public static double calculateMetric(double[] values, ValuesSourceAggregationBuilder<?, ?> metric) {__        if (metric instanceof MinAggregationBuilder) {_            double accumulator = Double.POSITIVE_INFINITY__            for (double value : values) {_                accumulator = Math.min(accumulator, value)__            }_            return accumulator__        } else if (metric instanceof MaxAggregationBuilder) {_            double accumulator = Double.NEGATIVE_INFINITY__            for (double value : values) {_                accumulator = Math.max(accumulator, value)__            }_            return accumulator__        } else if (metric instanceof SumAggregationBuilder) {_            double accumulator = 0__            for (double value : values) {_                accumulator += value__            }_            return accumulator__        } else if (metric instanceof AvgAggregationBuilder) {_            double accumulator = 0__            for (double value : values) {_                accumulator += value__            }_            return accumulator / values.length__        }__        return 0.0__    };computes,a,simple,agg,metric,min,sum,etc,from,the,provided,values,param,values,array,of,values,to,compute,metric,for,param,metric,a,metric,builder,which,defines,what,kind,of,metric,should,be,returned,for,the,values;public,static,double,calculate,metric,double,values,values,source,aggregation,builder,metric,if,metric,instanceof,min,aggregation,builder,double,accumulator,double,for,double,value,values,accumulator,math,min,accumulator,value,return,accumulator,else,if,metric,instanceof,max,aggregation,builder,double,accumulator,double,for,double,value,values,accumulator,math,max,accumulator,value,return,accumulator,else,if,metric,instanceof,sum,aggregation,builder,double,accumulator,0,for,double,value,values,accumulator,value,return,accumulator,else,if,metric,instanceof,avg,aggregation,builder,double,accumulator,0,for,double,value,values,accumulator,value,return,accumulator,values,length,return,0,0
PipelineAggregationHelperTests -> public static double calculateMetric(double[] values, ValuesSourceAggregationBuilder<?, ?> metric);1544475769;Computes a simple agg metric (min, sum, etc) from the provided values__@param values Array of values to compute metric for_@param metric A metric builder which defines what kind of metric should be returned for the values;public static double calculateMetric(double[] values, ValuesSourceAggregationBuilder<?, ?> metric) {__        if (metric instanceof MinAggregationBuilder) {_            double accumulator = Double.POSITIVE_INFINITY__            for (double value : values) {_                accumulator = Math.min(accumulator, value)__            }_            return accumulator__        } else if (metric instanceof MaxAggregationBuilder) {_            double accumulator = Double.NEGATIVE_INFINITY__            for (double value : values) {_                accumulator = Math.max(accumulator, value)__            }_            return accumulator__        } else if (metric instanceof SumAggregationBuilder) {_            double accumulator = 0__            for (double value : values) {_                accumulator += value__            }_            return accumulator__        } else if (metric instanceof AvgAggregationBuilder) {_            double accumulator = 0__            for (double value : values) {_                accumulator += value__            }_            return accumulator / values.length__        }__        return 0.0__    };computes,a,simple,agg,metric,min,sum,etc,from,the,provided,values,param,values,array,of,values,to,compute,metric,for,param,metric,a,metric,builder,which,defines,what,kind,of,metric,should,be,returned,for,the,values;public,static,double,calculate,metric,double,values,values,source,aggregation,builder,metric,if,metric,instanceof,min,aggregation,builder,double,accumulator,double,for,double,value,values,accumulator,math,min,accumulator,value,return,accumulator,else,if,metric,instanceof,max,aggregation,builder,double,accumulator,double,for,double,value,values,accumulator,math,max,accumulator,value,return,accumulator,else,if,metric,instanceof,sum,aggregation,builder,double,accumulator,0,for,double,value,values,accumulator,value,return,accumulator,else,if,metric,instanceof,avg,aggregation,builder,double,accumulator,0,for,double,value,values,accumulator,value,return,accumulator,values,length,return,0,0
PipelineAggregationHelperTests -> public static double calculateMetric(double[] values, ValuesSourceAggregationBuilder<?, ?> metric);1548236405;Computes a simple agg metric (min, sum, etc) from the provided values__@param values Array of values to compute metric for_@param metric A metric builder which defines what kind of metric should be returned for the values;public static double calculateMetric(double[] values, ValuesSourceAggregationBuilder<?, ?> metric) {__        if (metric instanceof MinAggregationBuilder) {_            double accumulator = Double.POSITIVE_INFINITY__            for (double value : values) {_                accumulator = Math.min(accumulator, value)__            }_            return accumulator__        } else if (metric instanceof MaxAggregationBuilder) {_            double accumulator = Double.NEGATIVE_INFINITY__            for (double value : values) {_                accumulator = Math.max(accumulator, value)__            }_            return accumulator__        } else if (metric instanceof SumAggregationBuilder) {_            double accumulator = 0__            for (double value : values) {_                accumulator += value__            }_            return accumulator__        } else if (metric instanceof AvgAggregationBuilder) {_            double accumulator = 0__            for (double value : values) {_                accumulator += value__            }_            return accumulator / values.length__        }__        return 0.0__    };computes,a,simple,agg,metric,min,sum,etc,from,the,provided,values,param,values,array,of,values,to,compute,metric,for,param,metric,a,metric,builder,which,defines,what,kind,of,metric,should,be,returned,for,the,values;public,static,double,calculate,metric,double,values,values,source,aggregation,builder,metric,if,metric,instanceof,min,aggregation,builder,double,accumulator,double,for,double,value,values,accumulator,math,min,accumulator,value,return,accumulator,else,if,metric,instanceof,max,aggregation,builder,double,accumulator,double,for,double,value,values,accumulator,math,max,accumulator,value,return,accumulator,else,if,metric,instanceof,sum,aggregation,builder,double,accumulator,0,for,double,value,values,accumulator,value,return,accumulator,else,if,metric,instanceof,avg,aggregation,builder,double,accumulator,0,for,double,value,values,accumulator,value,return,accumulator,values,length,return,0,0
