commented;modifiers;parameterAmount;loc;comment;code
false;public;0;66;;public void testSyncerSendsOffCorrectDocuments() throws Exception {     IndexShard shard = newStartedShard(true).     TaskManager taskManager = new TaskManager(Settings.EMPTY, threadPool, Collections.emptySet()).     AtomicBoolean syncActionCalled = new AtomicBoolean().     List<ResyncReplicationRequest> resyncRequests = new ArrayList<>().     PrimaryReplicaSyncer.SyncAction syncAction = (request, parentTask, allocationId, primaryTerm, listener) -> {         logger.info("Sending off {} operations", request.getOperations().length).         syncActionCalled.set(true).         resyncRequests.add(request).         assertThat(parentTask, instanceOf(PrimaryReplicaSyncer.ResyncTask.class)).         listener.onResponse(new ResyncReplicationResponse()).     }.     PrimaryReplicaSyncer syncer = new PrimaryReplicaSyncer(taskManager, syncAction).     syncer.setChunkSize(new ByteSizeValue(randomIntBetween(1, 10))).     int numDocs = randomInt(10).     for (int i = 0. i < numDocs. i++) {         // Index doc but not advance local checkpoint.         shard.applyIndexOperationOnPrimary(Versions.MATCH_ANY, VersionType.INTERNAL, new SourceToParse(shard.shardId().getIndexName(), "_doc", Integer.toString(i), new BytesArray("{}"), XContentType.JSON), SequenceNumbers.UNASSIGNED_SEQ_NO, 0, randomBoolean() ? IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP : randomNonNegativeLong(), true).     }     long globalCheckPoint = numDocs > 0 ? randomIntBetween(0, numDocs - 1) : 0.     boolean syncNeeded = numDocs > 0.     String allocationId = shard.routingEntry().allocationId().getId().     shard.updateShardState(shard.routingEntry(), shard.getPendingPrimaryTerm(), null, 1000L, Collections.singleton(allocationId), new IndexShardRoutingTable.Builder(shard.shardId()).addShard(shard.routingEntry()).build(), Collections.emptySet()).     shard.updateLocalCheckpointForShard(allocationId, globalCheckPoint).     assertEquals(globalCheckPoint, shard.getGlobalCheckpoint()).     logger.info("Total ops: {}, global checkpoint: {}", numDocs, globalCheckPoint).     PlainActionFuture<PrimaryReplicaSyncer.ResyncTask> fut = new PlainActionFuture<>().     syncer.resync(shard, fut).     PrimaryReplicaSyncer.ResyncTask resyncTask = fut.get().     if (syncNeeded) {         assertTrue("Sync action was not called", syncActionCalled.get()).         ResyncReplicationRequest resyncRequest = resyncRequests.remove(0).         assertThat(resyncRequest.getTrimAboveSeqNo(), equalTo(numDocs - 1L)).         assertThat("trimAboveSeqNo has to be specified in request #0 only", resyncRequests.stream().mapToLong(ResyncReplicationRequest::getTrimAboveSeqNo).filter(seqNo -> seqNo != SequenceNumbers.UNASSIGNED_SEQ_NO).findFirst().isPresent(), is(false)).         assertThat(resyncRequest.getMaxSeenAutoIdTimestampOnPrimary(), equalTo(shard.getMaxSeenAutoIdTimestamp())).     }     if (syncNeeded && globalCheckPoint < numDocs - 1) {         // everything up to global checkpoint included         int skippedOps = Math.toIntExact(globalCheckPoint + 1).         assertThat(resyncTask.getSkippedOperations(), equalTo(skippedOps)).         assertThat(resyncTask.getResyncedOperations(), equalTo(numDocs - skippedOps)).         assertThat(resyncTask.getTotalOperations(), equalTo(globalCheckPoint == numDocs - 1 ? 0 : numDocs)).     } else {         assertThat(resyncTask.getSkippedOperations(), equalTo(0)).         assertThat(resyncTask.getResyncedOperations(), equalTo(0)).         assertThat(resyncTask.getTotalOperations(), equalTo(0)).     }     closeShards(shard). }
false;public;1;8;;@Override public void onFailure(Exception e) {     try {         super.onFailure(e).     } finally {         syncCalledLatch.countDown().     } }
false;public;1;8;;@Override public void onResponse(PrimaryReplicaSyncer.ResyncTask result) {     try {         super.onResponse(result).     } finally {         syncCalledLatch.countDown().     } }
false;public;0;58;;public void testSyncerOnClosingShard() throws Exception {     IndexShard shard = newStartedShard(true).     AtomicBoolean syncActionCalled = new AtomicBoolean().     PrimaryReplicaSyncer.SyncAction syncAction = (request, parentTask, allocationId, primaryTerm, listener) -> {         logger.info("Sending off {} operations", request.getOperations().length).         syncActionCalled.set(true).         threadPool.generic().execute(() -> listener.onResponse(new ResyncReplicationResponse())).     }.     PrimaryReplicaSyncer syncer = new PrimaryReplicaSyncer(new TaskManager(Settings.EMPTY, threadPool, Collections.emptySet()), syncAction).     // every document is sent off separately     syncer.setChunkSize(new ByteSizeValue(1)).     int numDocs = 10.     for (int i = 0. i < numDocs. i++) {         // Index doc but not advance local checkpoint.         shard.applyIndexOperationOnPrimary(Versions.MATCH_ANY, VersionType.INTERNAL, new SourceToParse(shard.shardId().getIndexName(), "_doc", Integer.toString(i), new BytesArray("{}"), XContentType.JSON), SequenceNumbers.UNASSIGNED_SEQ_NO, 0, IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP, false).     }     String allocationId = shard.routingEntry().allocationId().getId().     shard.updateShardState(shard.routingEntry(), shard.getPendingPrimaryTerm(), null, 1000L, Collections.singleton(allocationId), new IndexShardRoutingTable.Builder(shard.shardId()).addShard(shard.routingEntry()).build(), Collections.emptySet()).     CountDownLatch syncCalledLatch = new CountDownLatch(1).     PlainActionFuture<PrimaryReplicaSyncer.ResyncTask> fut = new PlainActionFuture<PrimaryReplicaSyncer.ResyncTask>() {          @Override         public void onFailure(Exception e) {             try {                 super.onFailure(e).             } finally {                 syncCalledLatch.countDown().             }         }          @Override         public void onResponse(PrimaryReplicaSyncer.ResyncTask result) {             try {                 super.onResponse(result).             } finally {                 syncCalledLatch.countDown().             }         }     }.     threadPool.generic().execute(() -> {         syncer.resync(shard, fut).     }).     if (randomBoolean()) {         syncCalledLatch.await().     }     closeShards(shard).     try {         fut.actionGet().         assertTrue("Sync action was not called", syncActionCalled.get()).     } catch (AlreadyClosedException | IndexShardClosedException ignored) {     // ignore     } }
false;public;0;9;;public void testStatusSerialization() throws IOException {     PrimaryReplicaSyncer.ResyncTask.Status status = new PrimaryReplicaSyncer.ResyncTask.Status(randomAlphaOfLength(10), randomIntBetween(0, 1000), randomIntBetween(0, 1000), randomIntBetween(0, 1000)).     final BytesStreamOutput out = new BytesStreamOutput().     status.writeTo(out).     final ByteBufferStreamInput in = new ByteBufferStreamInput(ByteBuffer.wrap(out.bytes().toBytesRef().bytes)).     PrimaryReplicaSyncer.ResyncTask.Status serializedStatus = new PrimaryReplicaSyncer.ResyncTask.Status(in).     assertEquals(status, serializedStatus). }
false;public;0;12;;public void testStatusSerializationAsNamedWriteable() throws IOException {     PrimaryReplicaSyncer.ResyncTask.Status status = new PrimaryReplicaSyncer.ResyncTask.Status(randomAlphaOfLength(10), randomIntBetween(0, 1000), randomIntBetween(0, 1000), randomIntBetween(0, 1000)).     try (BytesStreamOutput out = new BytesStreamOutput()) {         out.writeNamedWriteable(status).         try (StreamInput in = new NamedWriteableAwareStreamInput(new ByteBufferStreamInput(ByteBuffer.wrap(out.bytes().toBytesRef().bytes)), new NamedWriteableRegistry(NetworkModule.getNamedWriteables()))) {             assertThat(in.readNamedWriteable(Task.Status.class), equalTo(status)).         }     } }
false;public;0;31;;public void testStatusEquals() throws IOException {     PrimaryReplicaSyncer.ResyncTask task = new PrimaryReplicaSyncer.ResyncTask(0, "type", "action", "desc", null, Collections.emptyMap()).     task.setPhase(randomAlphaOfLength(10)).     task.setResyncedOperations(randomIntBetween(0, 1000)).     task.setTotalOperations(randomIntBetween(0, 1000)).     task.setSkippedOperations(randomIntBetween(0, 1000)).     PrimaryReplicaSyncer.ResyncTask.Status status = task.getStatus().     PrimaryReplicaSyncer.ResyncTask.Status sameStatus = task.getStatus().     assertNotSame(status, sameStatus).     assertEquals(status, sameStatus).     assertEquals(status.hashCode(), sameStatus.hashCode()).     switch(randomInt(3)) {         case 0:             task.setPhase("otherPhase").             break.         case 1:             task.setResyncedOperations(task.getResyncedOperations() + 1).             break.         case 2:             task.setSkippedOperations(task.getSkippedOperations() + 1).             break.         case 3:             task.setTotalOperations(task.getTotalOperations() + 1).             break.     }     PrimaryReplicaSyncer.ResyncTask.Status differentStatus = task.getStatus().     assertNotEquals(status, differentStatus). }
false;public;0;16;;public void testStatusReportsCorrectNumbers() throws IOException {     PrimaryReplicaSyncer.ResyncTask task = new PrimaryReplicaSyncer.ResyncTask(0, "type", "action", "desc", null, Collections.emptyMap()).     task.setPhase(randomAlphaOfLength(10)).     task.setResyncedOperations(randomIntBetween(0, 1000)).     task.setTotalOperations(randomIntBetween(0, 1000)).     task.setSkippedOperations(randomIntBetween(0, 1000)).     PrimaryReplicaSyncer.ResyncTask.Status status = task.getStatus().     XContentBuilder jsonBuilder = XContentFactory.jsonBuilder().     status.toXContent(jsonBuilder, ToXContent.EMPTY_PARAMS).     String jsonString = Strings.toString(jsonBuilder).     assertThat(jsonString, containsString("\"phase\":\"" + task.getPhase() + "\"")).     assertThat(jsonString, containsString("\"totalOperations\":" + task.getTotalOperations())).     assertThat(jsonString, containsString("\"resyncedOperations\":" + task.getResyncedOperations())).     assertThat(jsonString, containsString("\"skippedOperations\":" + task.getSkippedOperations())). }
