commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override public void setUp() throws Exception {     super.setUp().     UsageService usageService = new UsageService().     action = new RestNodesStatsAction(Settings.EMPTY, new RestController(Collections.emptySet(), null, null, null, usageService)). }
false;public;0;10;;public void testUnrecognizedMetric() throws IOException {     final HashMap<String, String> params = new HashMap<>().     final String metric = randomAlphaOfLength(64).     params.put("metric", metric).     final RestRequest request = new FakeRestRequest.Builder(xContentRegistry()).withPath("/_nodes/stats").withParams(params).build().     final IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> action.prepareRequest(request, mock(NodeClient.class))).     assertThat(e, hasToString(containsString("request [/_nodes/stats] contains unrecognized metric: [" + metric + "]"))). }
false;public;0;13;;public void testUnrecognizedMetricDidYouMean() throws IOException {     final HashMap<String, String> params = new HashMap<>().     params.put("metric", "os,transprot,unrecognized").     final RestRequest request = new FakeRestRequest.Builder(xContentRegistry()).withPath("/_nodes/stats").withParams(params).build().     final IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> action.prepareRequest(request, mock(NodeClient.class))).     assertThat(e, hasToString(containsString("request [/_nodes/stats] contains unrecognized metrics: [transprot] -> did you mean [transport]?, [unrecognized]"))). }
false;public;0;10;;public void testAllRequestWithOtherMetrics() throws IOException {     final HashMap<String, String> params = new HashMap<>().     final String metric = randomSubsetOf(1, RestNodesStatsAction.METRICS.keySet()).get(0).     params.put("metric", "_all," + metric).     final RestRequest request = new FakeRestRequest.Builder(xContentRegistry()).withPath("/_nodes/stats").withParams(params).build().     final IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> action.prepareRequest(request, mock(NodeClient.class))).     assertThat(e, hasToString(containsString("request [/_nodes/stats] contains _all and individual metrics [_all," + metric + "]"))). }
false;public;0;11;;public void testUnrecognizedIndexMetric() {     final HashMap<String, String> params = new HashMap<>().     params.put("metric", "indices").     final String indexMetric = randomAlphaOfLength(64).     params.put("index_metric", indexMetric).     final RestRequest request = new FakeRestRequest.Builder(xContentRegistry()).withPath("/_nodes/stats").withParams(params).build().     final IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> action.prepareRequest(request, mock(NodeClient.class))).     assertThat(e, hasToString(containsString("request [/_nodes/stats] contains unrecognized index metric: [" + indexMetric + "]"))). }
false;public;0;14;;public void testUnrecognizedIndexMetricDidYouMean() {     final HashMap<String, String> params = new HashMap<>().     params.put("metric", "indices").     params.put("index_metric", "indexing,stroe,unrecognized").     final RestRequest request = new FakeRestRequest.Builder(xContentRegistry()).withPath("/_nodes/stats").withParams(params).build().     final IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> action.prepareRequest(request, mock(NodeClient.class))).     assertThat(e, hasToString(containsString("request [/_nodes/stats] contains unrecognized index metrics: [stroe] -> did you mean [store]?, [unrecognized]"))). }
false;public;0;16;;public void testIndexMetricsRequestWithoutIndicesMetric() throws IOException {     final HashMap<String, String> params = new HashMap<>().     final Set<String> metrics = new HashSet<>(RestNodesStatsAction.METRICS.keySet()).     metrics.remove("indices").     params.put("metric", randomSubsetOf(1, metrics).get(0)).     final String indexMetric = randomSubsetOf(1, RestNodesStatsAction.FLAGS.keySet()).get(0).     params.put("index_metric", indexMetric).     final RestRequest request = new FakeRestRequest.Builder(xContentRegistry()).withPath("/_nodes/stats").withParams(params).build().     final IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> action.prepareRequest(request, mock(NodeClient.class))).     assertThat(e, hasToString(containsString("request [/_nodes/stats] contains index metrics [" + indexMetric + "] but indices stats not requested"))). }
false;public;0;14;;public void testIndexMetricsRequestOnAllRequest() throws IOException {     final HashMap<String, String> params = new HashMap<>().     params.put("metric", "_all").     final String indexMetric = randomSubsetOf(1, RestNodesStatsAction.FLAGS.keySet()).get(0).     params.put("index_metric", indexMetric).     final RestRequest request = new FakeRestRequest.Builder(xContentRegistry()).withPath("/_nodes/stats").withParams(params).build().     final IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> action.prepareRequest(request, mock(NodeClient.class))).     assertThat(e, hasToString(containsString("request [/_nodes/stats] contains index metrics [" + indexMetric + "] but all stats requested"))). }
