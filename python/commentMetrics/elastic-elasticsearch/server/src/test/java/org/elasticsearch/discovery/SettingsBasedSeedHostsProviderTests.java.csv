commented;modifiers;parameterAmount;loc;comment;code
false;public;2;7;;@Override public List<TransportAddress> resolveHosts(List<String> hosts, int limitPortCounts) {     assertEquals(expectedPortCount, limitPortCounts).     assertEquals(expectedHosts, Sets.newHashSet(hosts)).     resolvedHosts = true.     return emptyList(). }
false;;0;3;;boolean getResolvedHosts() {     return resolvedHosts. }
false;public;0;7;;public void testScansPortsByDefault() {     final AssertingHostsResolver hostsResolver = new AssertingHostsResolver(5, "::1", "127.0.0.1").     final TransportService transportService = mock(TransportService.class).     when(transportService.getLocalAddresses()).thenReturn(Arrays.asList("::1", "127.0.0.1")).     new SettingsBasedSeedHostsProvider(Settings.EMPTY, transportService).getSeedAddresses(hostsResolver).     assertTrue(hostsResolver.getResolvedHosts()). }
false;public;0;7;;public void testGetsHostsFromSetting() {     final AssertingHostsResolver hostsResolver = new AssertingHostsResolver(1, "bar", "foo").     new SettingsBasedSeedHostsProvider(Settings.builder().putList(SettingsBasedSeedHostsProvider.DISCOVERY_SEED_HOSTS_SETTING.getKey(), "foo", "bar").build(), null).getSeedAddresses(hostsResolver).     assertTrue(hostsResolver.getResolvedHosts()). }
false;public;0;9;;public void testGetsHostsFromLegacySetting() {     final AssertingHostsResolver hostsResolver = new AssertingHostsResolver(1, "bar", "foo").     new SettingsBasedSeedHostsProvider(Settings.builder().putList(SettingsBasedSeedHostsProvider.LEGACY_DISCOVERY_ZEN_PING_UNICAST_HOSTS_SETTING.getKey(), "foo", "bar").build(), null).getSeedAddresses(hostsResolver).     assertTrue(hostsResolver.getResolvedHosts()).     assertWarnings("[discovery.zen.ping.unicast.hosts] setting was deprecated in Elasticsearch and will be removed in a future " + "release! See the breaking changes documentation for the next major version."). }
false;public;0;6;;public void testForbidsBothSettingsAtTheSameTime() {     expectThrows(IllegalArgumentException.class, () -> new SettingsBasedSeedHostsProvider(Settings.builder().putList(SettingsBasedSeedHostsProvider.LEGACY_DISCOVERY_ZEN_PING_UNICAST_HOSTS_SETTING.getKey()).putList(SettingsBasedSeedHostsProvider.DISCOVERY_SEED_HOSTS_SETTING.getKey()).build(), null)). }
