commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;public void testRewriteMissingField() throws Exception {     IndexService indexService = createIndex("test").     IndexReader reader = new MultiReader().     QueryRewriteContext context = new QueryShardContext(0, indexService.getIndexSettings(), null, null, indexService.mapperService(), null, null, xContentRegistry(), writableRegistry(), null, reader, null, null).     RangeQueryBuilder range = new RangeQueryBuilder("foo").     assertEquals(Relation.DISJOINT, range.getRelation(context)). }
false;public;0;17;;public void testRewriteMissingReader() throws Exception {     IndexService indexService = createIndex("test").     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("foo").field("type", "date").endObject().endObject().endObject().endObject()).     indexService.mapperService().merge("type", new CompressedXContent(mapping), MergeReason.MAPPING_UPDATE).     QueryRewriteContext context = new QueryShardContext(0, indexService.getIndexSettings(), null, null, indexService.mapperService(), null, null, xContentRegistry(), writableRegistry(), null, null, null, null).     RangeQueryBuilder range = new RangeQueryBuilder("foo").     // can't make assumptions on a missing reader, so it must return INTERSECT     assertEquals(Relation.INTERSECTS, range.getRelation(context)). }
false;public;0;18;;public void testRewriteEmptyReader() throws Exception {     IndexService indexService = createIndex("test").     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("foo").field("type", "date").endObject().endObject().endObject().endObject()).     indexService.mapperService().merge("type", new CompressedXContent(mapping), MergeReason.MAPPING_UPDATE).     IndexReader reader = new MultiReader().     QueryRewriteContext context = new QueryShardContext(0, indexService.getIndexSettings(), null, null, indexService.mapperService(), null, null, xContentRegistry(), writableRegistry(), null, reader, null, null).     RangeQueryBuilder range = new RangeQueryBuilder("foo").     // no values -> DISJOINT     assertEquals(Relation.DISJOINT, range.getRelation(context)). }
