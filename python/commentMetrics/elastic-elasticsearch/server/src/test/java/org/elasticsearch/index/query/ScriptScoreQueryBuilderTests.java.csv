commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;13;;@Override protected ScriptScoreQueryBuilder doCreateTestQueryBuilder() {     String scriptStr = "1".     Script script = new Script(ScriptType.INLINE, MockScriptEngine.NAME, scriptStr, Collections.emptyMap()).     ScriptScoreQueryBuilder queryBuilder = new ScriptScoreQueryBuilder(RandomQueryBuilder.createQuery(random()), new ScriptScoreFunctionBuilder(script)).     if (randomBoolean()) {         queryBuilder.setMinScore(randomFloat()).     }     return queryBuilder. }
false;protected;3;4;;@Override protected void doAssertLuceneQuery(ScriptScoreQueryBuilder queryBuilder, Query query, SearchContext context) throws IOException {     assertThat(query, instanceOf(ScriptScoreQuery.class)). }
false;public;0;15;;public void testFromJson() throws IOException {     String json = "{\n" + "  \"script_score\" : {\n" + "    \"query\" : { \"match_all\" : {} },\n" + "    \"script\" : {\n" + "      \"source\" : \"doc['field'].value\" \n" + "    },\n" + "    \"min_score\" : 2.0\n" + "  }\n" + "}".     ScriptScoreQueryBuilder parsed = (ScriptScoreQueryBuilder) parseQuery(json).     assertEquals(json, 2, parsed.getMinScore(), 0.0001). }
false;public;0;15;;public void testIllegalArguments() {     String scriptStr = "1".     Script script = new Script(ScriptType.INLINE, MockScriptEngine.NAME, scriptStr, Collections.emptyMap()).     ScriptScoreFunctionBuilder functionBuilder = new ScriptScoreFunctionBuilder(script).     expectThrows(IllegalArgumentException.class, () -> new ScriptScoreQueryBuilder(matchAllQuery(), null)).     expectThrows(IllegalArgumentException.class, () -> new ScriptScoreQueryBuilder(null, functionBuilder)). }
false;protected;1;4;;@Override protected boolean isCacheable(ScriptScoreQueryBuilder queryBuilder) {     return false. }
