commented;modifiers;parameterAmount;loc;comment;code
true;protected;0;12;/**  * @return a {@link DisMaxQueryBuilder} with random inner queries  */ ;/**  * @return a {@link DisMaxQueryBuilder} with random inner queries  */ @Override protected DisMaxQueryBuilder doCreateTestQueryBuilder() {     DisMaxQueryBuilder dismax = new DisMaxQueryBuilder().     int clauses = randomIntBetween(1, 5).     for (int i = 0. i < clauses. i++) {         dismax.add(RandomQueryBuilder.createQuery(random())).     }     if (randomBoolean()) {         dismax.tieBreaker((float) randomDoubleBetween(0d, 1d, true)).     }     return dismax. }
false;protected;3;12;;@Override protected void doAssertLuceneQuery(DisMaxQueryBuilder queryBuilder, Query query, SearchContext context) throws IOException {     Collection<Query> queries = AbstractQueryBuilder.toQueries(queryBuilder.innerQueries(), context.getQueryShardContext()).     assertThat(query, instanceOf(DisjunctionMaxQuery.class)).     DisjunctionMaxQuery disjunctionMaxQuery = (DisjunctionMaxQuery) query.     assertThat(disjunctionMaxQuery.getTieBreakerMultiplier(), equalTo(queryBuilder.tieBreaker())).     assertThat(disjunctionMaxQuery.getDisjuncts().size(), equalTo(queries.size())).     Iterator<Query> queryIterator = queries.iterator().     for (int i = 0. i < disjunctionMaxQuery.getDisjuncts().size(). i++) {         assertThat(disjunctionMaxQuery.getDisjuncts().get(i), equalTo(queryIterator.next())).     } }
false;protected;0;14;;@Override protected Map<String, DisMaxQueryBuilder> getAlternateVersions() {     Map<String, DisMaxQueryBuilder> alternateVersions = new HashMap<>().     QueryBuilder innerQuery = createTestQueryBuilder().innerQueries().get(0).     DisMaxQueryBuilder expectedQuery = new DisMaxQueryBuilder().     expectedQuery.add(innerQuery).     String contentString = "{\n" + "    \"dis_max\" : {\n" + "        \"queries\" : " + innerQuery.toString() + "    }\n" + "}".     alternateVersions.put(contentString, expectedQuery).     return alternateVersions. }
false;public;0;4;;public void testIllegalArguments() {     DisMaxQueryBuilder disMaxQuery = new DisMaxQueryBuilder().     expectThrows(IllegalArgumentException.class, () -> disMaxQuery.add(null)). }
false;public;0;31;;public void testToQueryInnerPrefixQuery() throws Exception {     String queryAsString = "{\n" + "    \"dis_max\":{\n" + "        \"queries\":[\n" + "            {\n" + "                \"prefix\":{\n" + "                    \"" + STRING_FIELD_NAME + "\":{\n" + "                        \"value\":\"sh\",\n" + "                        \"boost\":1.2\n" + "                    }\n" + "                }\n" + "            }\n" + "        ]\n" + "    }\n" + "}".     Query query = parseQuery(queryAsString).toQuery(createShardContext()).     assertThat(query, instanceOf(DisjunctionMaxQuery.class)).     DisjunctionMaxQuery disjunctionMaxQuery = (DisjunctionMaxQuery) query.     List<Query> disjuncts = disjunctionMaxQuery.getDisjuncts().     assertThat(disjuncts.size(), equalTo(1)).     assertThat(disjuncts.get(0), instanceOf(BoostQuery.class)).     BoostQuery boostQuery = (BoostQuery) disjuncts.get(0).     assertThat((double) boostQuery.getBoost(), closeTo(1.2, 0.00001)).     assertThat(boostQuery.getQuery(), instanceOf(PrefixQuery.class)).     PrefixQuery firstQ = (PrefixQuery) boostQuery.getQuery().     // since age is automatically registered in data, we encode it as numeric     assertThat(firstQ.getPrefix(), equalTo(new Term(STRING_FIELD_NAME, "sh"))). }
false;public;0;31;;public void testFromJson() throws IOException {     String json = "{\n" + "  \"dis_max\" : {\n" + "    \"tie_breaker\" : 0.7,\n" + "    \"queries\" : [ {\n" + "      \"term\" : {\n" + "        \"age\" : {\n" + "          \"value\" : 34,\n" + "          \"boost\" : 1.0\n" + "        }\n" + "      }\n" + "    }, {\n" + "      \"term\" : {\n" + "        \"age\" : {\n" + "          \"value\" : 35,\n" + "          \"boost\" : 1.0\n" + "        }\n" + "      }\n" + "    } ],\n" + "    \"boost\" : 1.2\n" + "  }\n" + "}".     DisMaxQueryBuilder parsed = (DisMaxQueryBuilder) parseQuery(json).     checkGeneratedJson(json, parsed).     assertEquals(json, 1.2, parsed.boost(), 0.0001).     assertEquals(json, 0.7, parsed.tieBreaker(), 0.0001).     assertEquals(json, 2, parsed.innerQueries().size()). }
