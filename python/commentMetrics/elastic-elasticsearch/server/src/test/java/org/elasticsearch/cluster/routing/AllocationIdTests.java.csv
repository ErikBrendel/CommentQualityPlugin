commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;public void testShardToStarted() {     logger.info("-- create unassigned shard").     ShardRouting shard = ShardRouting.newUnassigned(new ShardId("test", "_na_", 0), true, ExistingStoreRecoverySource.INSTANCE, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null)).     assertThat(shard.allocationId(), nullValue()).     logger.info("-- initialize the shard").     shard = shard.initialize("node1", null, -1).     AllocationId allocationId = shard.allocationId().     assertThat(allocationId, notNullValue()).     assertThat(allocationId.getId(), notNullValue()).     assertThat(allocationId.getRelocationId(), nullValue()).     logger.info("-- start the shard").     shard = shard.moveToStarted().     assertThat(shard.allocationId().getId(), equalTo(allocationId.getId())).     allocationId = shard.allocationId().     assertThat(allocationId.getId(), notNullValue()).     assertThat(allocationId.getRelocationId(), nullValue()). }
false;public;0;23;;public void testSuccessfulRelocation() {     logger.info("-- build started shard").     ShardRouting shard = ShardRouting.newUnassigned(new ShardId("test", "_na_", 0), true, ExistingStoreRecoverySource.INSTANCE, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null)).     shard = shard.initialize("node1", null, -1).     shard = shard.moveToStarted().     AllocationId allocationId = shard.allocationId().     logger.info("-- relocate the shard").     shard = shard.relocate("node2", -1).     assertThat(shard.allocationId(), not(equalTo(allocationId))).     assertThat(shard.allocationId().getId(), equalTo(allocationId.getId())).     assertThat(shard.allocationId().getRelocationId(), notNullValue()).     ShardRouting target = shard.getTargetRelocatingShard().     assertThat(target.allocationId().getId(), equalTo(shard.allocationId().getRelocationId())).     assertThat(target.allocationId().getRelocationId(), equalTo(shard.allocationId().getId())).     logger.info("-- finalize the relocation").     target = target.moveToStarted().     assertThat(target.allocationId().getId(), equalTo(shard.allocationId().getRelocationId())).     assertThat(target.allocationId().getRelocationId(), nullValue()). }
false;public;0;20;;public void testCancelRelocation() {     logger.info("-- build started shard").     ShardRouting shard = ShardRouting.newUnassigned(new ShardId("test", "_na_", 0), true, ExistingStoreRecoverySource.INSTANCE, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null)).     shard = shard.initialize("node1", null, -1).     shard = shard.moveToStarted().     AllocationId allocationId = shard.allocationId().     logger.info("-- relocate the shard").     shard = shard.relocate("node2", -1).     assertThat(shard.allocationId(), not(equalTo(allocationId))).     assertThat(shard.allocationId().getId(), equalTo(allocationId.getId())).     assertThat(shard.allocationId().getRelocationId(), notNullValue()).     allocationId = shard.allocationId().     logger.info("-- cancel relocation").     shard = shard.cancelRelocation().     assertThat(shard.allocationId().getId(), equalTo(allocationId.getId())).     assertThat(shard.allocationId().getRelocationId(), nullValue()). }
false;public;0;11;;public void testMoveToUnassigned() {     logger.info("-- build started shard").     ShardRouting shard = ShardRouting.newUnassigned(new ShardId("test", "_na_", 0), true, ExistingStoreRecoverySource.INSTANCE, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null)).     shard = shard.initialize("node1", null, -1).     shard = shard.moveToStarted().     logger.info("-- move to unassigned").     shard = shard.moveToUnassigned(new UnassignedInfo(UnassignedInfo.Reason.NODE_LEFT, null)).     assertThat(shard.allocationId(), nullValue()). }
false;public;0;9;;public void testSerialization() throws IOException {     AllocationId allocationId = AllocationId.newInitializing().     if (randomBoolean()) {         allocationId = AllocationId.newRelocation(allocationId).     }     BytesReference bytes = BytesReference.bytes(allocationId.toXContent(XContentFactory.jsonBuilder(), ToXContent.EMPTY_PARAMS)).     AllocationId parsedAllocationId = AllocationId.fromXContent(createParser(JsonXContent.jsonXContent, bytes)).     assertEquals(allocationId, parsedAllocationId). }
false;public;0;14;;public void testEquals() {     AllocationId allocationId1 = AllocationId.newInitializing().     AllocationId allocationId2 = AllocationId.newInitializing(allocationId1.getId()).     AllocationId allocationId3 = AllocationId.newInitializing("not a UUID").     String s = "Some random other object".     assertEquals(allocationId1, allocationId1).     assertEquals(allocationId1, allocationId2).     assertNotEquals(allocationId1, s).     assertNotEquals(allocationId1, null).     assertNotEquals(allocationId1, allocationId3).     allocationId2 = AllocationId.newRelocation(allocationId1).     assertNotEquals(allocationId1, allocationId2). }
