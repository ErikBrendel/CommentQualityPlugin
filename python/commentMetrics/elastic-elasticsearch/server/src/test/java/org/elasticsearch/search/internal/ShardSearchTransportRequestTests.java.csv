commented;modifiers;parameterAmount;loc;comment;code
false;public;0;23;;public void testSerialization() throws Exception {     ShardSearchTransportRequest shardSearchTransportRequest = createShardSearchTransportRequest().     ShardSearchTransportRequest deserializedRequest = copyWriteable(shardSearchTransportRequest, namedWriteableRegistry, ShardSearchTransportRequest::new).     assertEquals(deserializedRequest.scroll(), shardSearchTransportRequest.scroll()).     assertEquals(deserializedRequest.getAliasFilter(), shardSearchTransportRequest.getAliasFilter()).     assertArrayEquals(deserializedRequest.indices(), shardSearchTransportRequest.indices()).     assertArrayEquals(deserializedRequest.types(), shardSearchTransportRequest.types()).     assertEquals(deserializedRequest.indicesOptions(), shardSearchTransportRequest.indicesOptions()).     assertEquals(deserializedRequest.nowInMillis(), shardSearchTransportRequest.nowInMillis()).     assertEquals(deserializedRequest.source(), shardSearchTransportRequest.source()).     assertEquals(deserializedRequest.searchType(), shardSearchTransportRequest.searchType()).     assertEquals(deserializedRequest.shardId(), shardSearchTransportRequest.shardId()).     assertEquals(deserializedRequest.numberOfShards(), shardSearchTransportRequest.numberOfShards()).     assertArrayEquals(deserializedRequest.indexRoutings(), shardSearchTransportRequest.indexRoutings()).     assertEquals(deserializedRequest.preference(), shardSearchTransportRequest.preference()).     assertEquals(deserializedRequest.cacheKey(), shardSearchTransportRequest.cacheKey()).     assertNotSame(deserializedRequest, shardSearchTransportRequest).     assertEquals(deserializedRequest.getAliasFilter(), shardSearchTransportRequest.getAliasFilter()).     assertEquals(deserializedRequest.indexBoost(), shardSearchTransportRequest.indexBoost(), 0.0f).     assertEquals(deserializedRequest.getClusterAlias(), shardSearchTransportRequest.getClusterAlias()).     assertEquals(shardSearchTransportRequest.allowPartialSearchResults(), deserializedRequest.allowPartialSearchResults()). }
false;public;0;11;;public void testAllowPartialResultsSerializationPre7_0_0() throws IOException {     Version version = VersionUtils.randomVersionBetween(random(), Version.V_6_0_0, VersionUtils.getPreviousVersion(Version.V_7_0_0)).     ShardSearchTransportRequest shardSearchTransportRequest = createShardSearchTransportRequest().     ShardSearchTransportRequest deserializedRequest = copyWriteable(shardSearchTransportRequest, namedWriteableRegistry, ShardSearchTransportRequest::new, version).     if (version.before(Version.V_6_3_0)) {         assertFalse(deserializedRequest.allowPartialSearchResults()).     } else {         assertEquals(shardSearchTransportRequest.allowPartialSearchResults(), deserializedRequest.allowPartialSearchResults()).     } }
false;private;0;15;;private ShardSearchTransportRequest createShardSearchTransportRequest() throws IOException {     SearchRequest searchRequest = createSearchRequest().     ShardId shardId = new ShardId(randomAlphaOfLengthBetween(2, 10), randomAlphaOfLengthBetween(2, 10), randomInt()).     final AliasFilter filteringAliases.     if (randomBoolean()) {         String[] strings = generateRandomStringArray(10, 10, false, false).         filteringAliases = new AliasFilter(RandomQueryBuilder.createQuery(random()), strings).     } else {         filteringAliases = new AliasFilter(null, Strings.EMPTY_ARRAY).     }     final String[] routings = generateRandomStringArray(5, 10, false, true).     return new ShardSearchTransportRequest(new OriginalIndices(searchRequest), searchRequest, shardId, randomIntBetween(1, 100), filteringAliases, randomBoolean() ? 1.0f : randomFloat(), Math.abs(randomLong()), randomAlphaOfLengthBetween(3, 10), routings). }
false;public;0;25;;public void testFilteringAliases() throws Exception {     IndexMetaData indexMetaData = baseMetaData.     indexMetaData = add(indexMetaData, "cats", filter(termQuery("animal", "cat"))).     indexMetaData = add(indexMetaData, "dogs", filter(termQuery("animal", "dog"))).     indexMetaData = add(indexMetaData, "all", null).     assertThat(indexMetaData.getAliases().containsKey("cats"), equalTo(true)).     assertThat(indexMetaData.getAliases().containsKey("dogs"), equalTo(true)).     assertThat(indexMetaData.getAliases().containsKey("turtles"), equalTo(false)).     assertEquals(aliasFilter(indexMetaData, "cats"), QueryBuilders.termQuery("animal", "cat")).     assertEquals(aliasFilter(indexMetaData, "cats", "dogs"), QueryBuilders.boolQuery().should(QueryBuilders.termQuery("animal", "cat")).should(QueryBuilders.termQuery("animal", "dog"))).     // Non-filtering alias should turn off all filters because filters are ORed     assertThat(aliasFilter(indexMetaData, "all"), nullValue()).     assertThat(aliasFilter(indexMetaData, "cats", "all"), nullValue()).     assertThat(aliasFilter(indexMetaData, "all", "cats"), nullValue()).     indexMetaData = add(indexMetaData, "cats", filter(termQuery("animal", "feline"))).     indexMetaData = add(indexMetaData, "dogs", filter(termQuery("animal", "canine"))).     assertEquals(aliasFilter(indexMetaData, "dogs", "cats"), QueryBuilders.boolQuery().should(QueryBuilders.termQuery("animal", "canine")).should(QueryBuilders.termQuery("animal", "feline"))). }
false;public;0;11;;public void testRemovedAliasFilter() throws Exception {     IndexMetaData indexMetaData = baseMetaData.     indexMetaData = add(indexMetaData, "cats", filter(termQuery("animal", "cat"))).     indexMetaData = remove(indexMetaData, "cats").     try {         aliasFilter(indexMetaData, "cats").         fail("Expected InvalidAliasNameException").     } catch (InvalidAliasNameException e) {         assertThat(e.getMessage(), containsString("Invalid alias name [cats]")).     } }
false;public;0;7;;public void testUnknownAliasFilter() throws Exception {     IndexMetaData indexMetaData = baseMetaData.     indexMetaData = add(indexMetaData, "cats", filter(termQuery("animal", "cat"))).     indexMetaData = add(indexMetaData, "dogs", filter(termQuery("animal", "dog"))).     IndexMetaData finalIndexMetadata = indexMetaData.     expectThrows(InvalidAliasNameException.class, () -> aliasFilter(finalIndexMetadata, "unknown")). }
false;public,static;1;6;;public static CompressedXContent filter(QueryBuilder filterBuilder) throws IOException {     XContentBuilder builder = XContentFactory.jsonBuilder().     filterBuilder.toXContent(builder, ToXContent.EMPTY_PARAMS).     builder.close().     return new CompressedXContent(Strings.toString(builder)). }
false;private;2;3;;private IndexMetaData remove(IndexMetaData indexMetaData, String alias) {     return IndexMetaData.builder(indexMetaData).removeAlias(alias).build(). }
false;private;3;3;;private IndexMetaData add(IndexMetaData indexMetaData, String alias, @Nullable CompressedXContent filter) {     return IndexMetaData.builder(indexMetaData).putAlias(AliasMetaData.builder(alias).filter(filter).build()).build(). }
false;public;2;9;;public QueryBuilder aliasFilter(IndexMetaData indexMetaData, String... aliasNames) {     CheckedFunction<byte[], QueryBuilder, IOException> filterParser = bytes -> {         try (XContentParser parser = XContentFactory.xContent(bytes).createParser(xContentRegistry(), DeprecationHandler.THROW_UNSUPPORTED_OPERATION, bytes)) {             return parseInnerQueryBuilder(parser).         }     }.     return ShardSearchRequest.parseAliasFilter(filterParser, indexMetaData, aliasNames). }
