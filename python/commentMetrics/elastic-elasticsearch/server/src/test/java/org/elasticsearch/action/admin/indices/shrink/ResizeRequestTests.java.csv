commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;public void testCopySettingsValidation() {     runTestCopySettingsValidation(false, r -> {         final IllegalArgumentException e = expectThrows(IllegalArgumentException.class, r::get).         assertThat(e, hasToString(containsString("[copySettings] can not be explicitly set to [false]"))).     }).     runTestCopySettingsValidation(null, r -> assertNull(r.get().getCopySettings())).     runTestCopySettingsValidation(true, r -> assertTrue(r.get().getCopySettings())). }
false;private;2;7;;private void runTestCopySettingsValidation(final Boolean copySettings, final Consumer<Supplier<ResizeRequest>> consumer) {     consumer.accept(() -> {         final ResizeRequest request = new ResizeRequest().         request.setCopySettings(copySettings).         return request.     }). }
false;public;0;24;;public void testToXContent() throws IOException {     {         ResizeRequest request = new ResizeRequest("target", "source").         String actualRequestBody = Strings.toString(request).         assertEquals("{\"settings\":{},\"aliases\":{}}", actualRequestBody).     }     {         ResizeRequest request = new ResizeRequest().         CreateIndexRequest target = new CreateIndexRequest("target").         Alias alias = new Alias("test_alias").         alias.routing("1").         alias.filter("{\"term\":{\"year\":2016}}").         alias.writeIndex(true).         target.alias(alias).         Settings.Builder settings = Settings.builder().         settings.put(SETTING_NUMBER_OF_SHARDS, 10).         target.settings(settings).         request.setTargetIndex(target).         String actualRequestBody = Strings.toString(request).         String expectedRequestBody = "{\"settings\":{\"index\":{\"number_of_shards\":\"10\"}}," + "\"aliases\":{\"test_alias\":{\"filter\":{\"term\":{\"year\":2016}},\"routing\":\"1\",\"is_write_index\":true}}}".         assertEquals(expectedRequestBody, actualRequestBody).     } }
false;public;0;22;;public void testToAndFromXContent() throws IOException {     final ResizeRequest resizeRequest = createTestItem().     boolean humanReadable = randomBoolean().     final XContentType xContentType = randomFrom(XContentType.values()).     BytesReference originalBytes = toShuffledXContent(resizeRequest, xContentType, EMPTY_PARAMS, humanReadable).     ResizeRequest parsedResizeRequest = new ResizeRequest(resizeRequest.getTargetIndexRequest().index(), resizeRequest.getSourceIndex()).     try (XContentParser xParser = createParser(xContentType.xContent(), originalBytes)) {         parsedResizeRequest.fromXContent(xParser).     }     assertEquals(resizeRequest.getSourceIndex(), parsedResizeRequest.getSourceIndex()).     assertEquals(resizeRequest.getTargetIndexRequest().index(), parsedResizeRequest.getTargetIndexRequest().index()).     CreateIndexRequestTests.assertAliasesEqual(resizeRequest.getTargetIndexRequest().aliases(), parsedResizeRequest.getTargetIndexRequest().aliases()).     assertEquals(resizeRequest.getTargetIndexRequest().settings(), parsedResizeRequest.getTargetIndexRequest().settings()).     BytesReference finalBytes = toShuffledXContent(parsedResizeRequest, xContentType, EMPTY_PARAMS, humanReadable).     ElasticsearchAssertions.assertToXContentEquivalent(originalBytes, finalBytes, xContentType). }
false;private,static;0;14;;private static ResizeRequest createTestItem() {     ResizeRequest resizeRequest = new ResizeRequest(randomAlphaOfLengthBetween(3, 10), randomAlphaOfLengthBetween(3, 10)).     if (randomBoolean()) {         CreateIndexRequest createIndexRequest = new CreateIndexRequest(randomAlphaOfLengthBetween(3, 10)).         if (randomBoolean()) {             RandomCreateIndexGenerator.randomAliases(createIndexRequest).         }         if (randomBoolean()) {             createIndexRequest.settings(RandomCreateIndexGenerator.randomIndexSettings()).         }         resizeRequest.setTargetIndex(createIndexRequest).     }     return resizeRequest. }
