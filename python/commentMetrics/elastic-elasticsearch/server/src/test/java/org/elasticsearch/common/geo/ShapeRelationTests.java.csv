commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;public void testValidOrdinals() {     assertThat(ShapeRelation.INTERSECTS.ordinal(), equalTo(0)).     assertThat(ShapeRelation.DISJOINT.ordinal(), equalTo(1)).     assertThat(ShapeRelation.WITHIN.ordinal(), equalTo(2)). }
false;public;0;22;;public void testwriteTo() throws Exception {     try (BytesStreamOutput out = new BytesStreamOutput()) {         ShapeRelation.INTERSECTS.writeTo(out).         try (StreamInput in = out.bytes().streamInput()) {             assertThat(in.readVInt(), equalTo(0)).         }     }     try (BytesStreamOutput out = new BytesStreamOutput()) {         ShapeRelation.DISJOINT.writeTo(out).         try (StreamInput in = out.bytes().streamInput()) {             assertThat(in.readVInt(), equalTo(1)).         }     }     try (BytesStreamOutput out = new BytesStreamOutput()) {         ShapeRelation.WITHIN.writeTo(out).         try (StreamInput in = out.bytes().streamInput()) {             assertThat(in.readVInt(), equalTo(2)).         }     } }
false;public;0;20;;public void testReadFrom() throws Exception {     try (BytesStreamOutput out = new BytesStreamOutput()) {         out.writeVInt(0).         try (StreamInput in = out.bytes().streamInput()) {             assertThat(ShapeRelation.readFromStream(in), equalTo(ShapeRelation.INTERSECTS)).         }     }     try (BytesStreamOutput out = new BytesStreamOutput()) {         out.writeVInt(1).         try (StreamInput in = out.bytes().streamInput()) {             assertThat(ShapeRelation.readFromStream(in), equalTo(ShapeRelation.DISJOINT)).         }     }     try (BytesStreamOutput out = new BytesStreamOutput()) {         out.writeVInt(2).         try (StreamInput in = out.bytes().streamInput()) {             assertThat(ShapeRelation.readFromStream(in), equalTo(ShapeRelation.WITHIN)).         }     } }
false;public;0;12;;public void testInvalidReadFrom() throws Exception {     try (BytesStreamOutput out = new BytesStreamOutput()) {         out.writeVInt(randomIntBetween(3, Integer.MAX_VALUE)).         try (StreamInput in = out.bytes().streamInput()) {             ShapeRelation.readFromStream(in).             fail("Expected IOException").         } catch (IOException e) {             assertThat(e.getMessage(), containsString("Unknown ShapeRelation ordinal [")).         }     } }
