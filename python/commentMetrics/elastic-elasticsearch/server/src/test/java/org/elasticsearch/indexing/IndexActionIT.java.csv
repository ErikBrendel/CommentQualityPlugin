# id;timestamp;commentText;codeText;commentWords;codeWords
IndexActionIT -> @TestLogging("_root:DEBUG,org.elasticsearch.index.shard.IndexShard:TRACE,org.elasticsearch.action.search:TRACE")     public void testAutoGenerateIdNoDuplicates() throws Exception;1524684173;This test tries to simulate load while creating an index and indexing documents_while the index is being created.;@TestLogging("_root:DEBUG,org.elasticsearch.index.shard.IndexShard:TRACE,org.elasticsearch.action.search:TRACE")_    public void testAutoGenerateIdNoDuplicates() throws Exception {_        int numberOfIterations = scaledRandomIntBetween(10, 50)__        for (int i = 0_ i < numberOfIterations_ i++) {_            Exception firstError = null__            createIndex("test")__            int numOfDocs = randomIntBetween(10, 100)__            logger.info("indexing [{}] docs", numOfDocs)__            List<IndexRequestBuilder> builders = new ArrayList<>(numOfDocs)__            for (int j = 0_ j < numOfDocs_ j++) {_                builders.add(client().prepareIndex("test", "type").setSource("field", "value_" + j))__            }_            indexRandom(true, builders)__            logger.info("verifying indexed content")__            int numOfChecks = randomIntBetween(8, 12)__            for (int j = 0_ j < numOfChecks_ j++) {_                try {_                    logger.debug("running search with all types")__                    SearchResponse response = client().prepareSearch("test").get()__                    if (response.getHits().getTotalHits() != numOfDocs) {_                        final String message = "Count is " + response.getHits().getTotalHits() + " but " + numOfDocs + " was expected. "_                            + ElasticsearchAssertions.formatShardStatus(response)__                        logger.error("{}. search response: \n{}", message, response)__                        fail(message)__                    }_                } catch (Exception e) {_                    logger.error("search for all docs types failed", e)__                    if (firstError == null) {_                        firstError = e__                    }_                }_                try {_                    logger.debug("running search with a specific type")__                    SearchResponse response = client().prepareSearch("test").setTypes("type").get()__                    if (response.getHits().getTotalHits() != numOfDocs) {_                        final String message = "Count is " + response.getHits().getTotalHits() + " but " + numOfDocs + " was expected. "_                            + ElasticsearchAssertions.formatShardStatus(response)__                        logger.error("{}. search response: \n{}", message, response)__                        fail(message)__                    }_                } catch (Exception e) {_                    logger.error("search for all docs of a specific type failed", e)__                    if (firstError == null) {_                        firstError = e__                    }_                }_            }_            if (firstError != null) {_                fail(firstError.getMessage())__            }_            internalCluster().wipeIndices("test")__        }_    };this,test,tries,to,simulate,load,while,creating,an,index,and,indexing,documents,while,the,index,is,being,created;test,logging,debug,org,elasticsearch,index,shard,index,shard,trace,org,elasticsearch,action,search,trace,public,void,test,auto,generate,id,no,duplicates,throws,exception,int,number,of,iterations,scaled,random,int,between,10,50,for,int,i,0,i,number,of,iterations,i,exception,first,error,null,create,index,test,int,num,of,docs,random,int,between,10,100,logger,info,indexing,docs,num,of,docs,list,index,request,builder,builders,new,array,list,num,of,docs,for,int,j,0,j,num,of,docs,j,builders,add,client,prepare,index,test,type,set,source,field,j,index,random,true,builders,logger,info,verifying,indexed,content,int,num,of,checks,random,int,between,8,12,for,int,j,0,j,num,of,checks,j,try,logger,debug,running,search,with,all,types,search,response,response,client,prepare,search,test,get,if,response,get,hits,get,total,hits,num,of,docs,final,string,message,count,is,response,get,hits,get,total,hits,but,num,of,docs,was,expected,elasticsearch,assertions,format,shard,status,response,logger,error,search,response,n,message,response,fail,message,catch,exception,e,logger,error,search,for,all,docs,types,failed,e,if,first,error,null,first,error,e,try,logger,debug,running,search,with,a,specific,type,search,response,response,client,prepare,search,test,set,types,type,get,if,response,get,hits,get,total,hits,num,of,docs,final,string,message,count,is,response,get,hits,get,total,hits,but,num,of,docs,was,expected,elasticsearch,assertions,format,shard,status,response,logger,error,search,response,n,message,response,fail,message,catch,exception,e,logger,error,search,for,all,docs,of,a,specific,type,failed,e,if,first,error,null,first,error,e,if,first,error,null,fail,first,error,get,message,internal,cluster,wipe,indices,test
IndexActionIT -> @TestLogging("_root:DEBUG,org.elasticsearch.index.shard.IndexShard:TRACE,org.elasticsearch.action.search:TRACE")     public void testAutoGenerateIdNoDuplicates() throws Exception;1528762805;This test tries to simulate load while creating an index and indexing documents_while the index is being created.;@TestLogging("_root:DEBUG,org.elasticsearch.index.shard.IndexShard:TRACE,org.elasticsearch.action.search:TRACE")_    public void testAutoGenerateIdNoDuplicates() throws Exception {_        int numberOfIterations = scaledRandomIntBetween(10, 50)__        for (int i = 0_ i < numberOfIterations_ i++) {_            Exception firstError = null__            createIndex("test")__            int numOfDocs = randomIntBetween(10, 100)__            logger.info("indexing [{}] docs", numOfDocs)__            List<IndexRequestBuilder> builders = new ArrayList<>(numOfDocs)__            for (int j = 0_ j < numOfDocs_ j++) {_                builders.add(client().prepareIndex("test", "type").setSource("field", "value_" + j))__            }_            indexRandom(true, builders)__            logger.info("verifying indexed content")__            int numOfChecks = randomIntBetween(8, 12)__            for (int j = 0_ j < numOfChecks_ j++) {_                try {_                    logger.debug("running search with all types")__                    SearchResponse response = client().prepareSearch("test").get()__                    if (response.getHits().getTotalHits() != numOfDocs) {_                        final String message = "Count is " + response.getHits().getTotalHits() + " but " + numOfDocs + " was expected. "_                            + ElasticsearchAssertions.formatShardStatus(response)__                        logger.error("{}. search response: \n{}", message, response)__                        fail(message)__                    }_                } catch (Exception e) {_                    logger.error("search for all docs types failed", e)__                    if (firstError == null) {_                        firstError = e__                    }_                }_                try {_                    logger.debug("running search with a specific type")__                    SearchResponse response = client().prepareSearch("test").setTypes("type").get()__                    if (response.getHits().getTotalHits() != numOfDocs) {_                        final String message = "Count is " + response.getHits().getTotalHits() + " but " + numOfDocs + " was expected. "_                            + ElasticsearchAssertions.formatShardStatus(response)__                        logger.error("{}. search response: \n{}", message, response)__                        fail(message)__                    }_                } catch (Exception e) {_                    logger.error("search for all docs of a specific type failed", e)__                    if (firstError == null) {_                        firstError = e__                    }_                }_            }_            if (firstError != null) {_                fail(firstError.getMessage())__            }_            internalCluster().wipeIndices("test")__        }_    };this,test,tries,to,simulate,load,while,creating,an,index,and,indexing,documents,while,the,index,is,being,created;test,logging,debug,org,elasticsearch,index,shard,index,shard,trace,org,elasticsearch,action,search,trace,public,void,test,auto,generate,id,no,duplicates,throws,exception,int,number,of,iterations,scaled,random,int,between,10,50,for,int,i,0,i,number,of,iterations,i,exception,first,error,null,create,index,test,int,num,of,docs,random,int,between,10,100,logger,info,indexing,docs,num,of,docs,list,index,request,builder,builders,new,array,list,num,of,docs,for,int,j,0,j,num,of,docs,j,builders,add,client,prepare,index,test,type,set,source,field,j,index,random,true,builders,logger,info,verifying,indexed,content,int,num,of,checks,random,int,between,8,12,for,int,j,0,j,num,of,checks,j,try,logger,debug,running,search,with,all,types,search,response,response,client,prepare,search,test,get,if,response,get,hits,get,total,hits,num,of,docs,final,string,message,count,is,response,get,hits,get,total,hits,but,num,of,docs,was,expected,elasticsearch,assertions,format,shard,status,response,logger,error,search,response,n,message,response,fail,message,catch,exception,e,logger,error,search,for,all,docs,types,failed,e,if,first,error,null,first,error,e,try,logger,debug,running,search,with,a,specific,type,search,response,response,client,prepare,search,test,set,types,type,get,if,response,get,hits,get,total,hits,num,of,docs,final,string,message,count,is,response,get,hits,get,total,hits,but,num,of,docs,was,expected,elasticsearch,assertions,format,shard,status,response,logger,error,search,response,n,message,response,fail,message,catch,exception,e,logger,error,search,for,all,docs,of,a,specific,type,failed,e,if,first,error,null,first,error,e,if,first,error,null,fail,first,error,get,message,internal,cluster,wipe,indices,test
IndexActionIT -> @TestLogging("_root:DEBUG,org.elasticsearch.index.shard.IndexShard:TRACE,org.elasticsearch.action.search:TRACE")     public void testAutoGenerateIdNoDuplicates() throws Exception;1544035746;This test tries to simulate load while creating an index and indexing documents_while the index is being created.;@TestLogging("_root:DEBUG,org.elasticsearch.index.shard.IndexShard:TRACE,org.elasticsearch.action.search:TRACE")_    public void testAutoGenerateIdNoDuplicates() throws Exception {_        int numberOfIterations = scaledRandomIntBetween(10, 50)__        for (int i = 0_ i < numberOfIterations_ i++) {_            Exception firstError = null__            createIndex("test")__            int numOfDocs = randomIntBetween(10, 100)__            logger.info("indexing [{}] docs", numOfDocs)__            List<IndexRequestBuilder> builders = new ArrayList<>(numOfDocs)__            for (int j = 0_ j < numOfDocs_ j++) {_                builders.add(client().prepareIndex("test", "type").setSource("field", "value_" + j))__            }_            indexRandom(true, builders)__            logger.info("verifying indexed content")__            int numOfChecks = randomIntBetween(8, 12)__            for (int j = 0_ j < numOfChecks_ j++) {_                try {_                    logger.debug("running search with all types")__                    SearchResponse response = client().prepareSearch("test").get()__                    if (response.getHits().getTotalHits().value != numOfDocs) {_                        final String message = "Count is " + response.getHits().getTotalHits().value + " but " + numOfDocs + " was expected. "_                            + ElasticsearchAssertions.formatShardStatus(response)__                        logger.error("{}. search response: \n{}", message, response)__                        fail(message)__                    }_                } catch (Exception e) {_                    logger.error("search for all docs types failed", e)__                    if (firstError == null) {_                        firstError = e__                    }_                }_                try {_                    logger.debug("running search with a specific type")__                    SearchResponse response = client().prepareSearch("test").setTypes("type").get()__                    if (response.getHits().getTotalHits().value != numOfDocs) {_                        final String message = "Count is " + response.getHits().getTotalHits().value + " but " + numOfDocs + " was expected. "_                            + ElasticsearchAssertions.formatShardStatus(response)__                        logger.error("{}. search response: \n{}", message, response)__                        fail(message)__                    }_                } catch (Exception e) {_                    logger.error("search for all docs of a specific type failed", e)__                    if (firstError == null) {_                        firstError = e__                    }_                }_            }_            if (firstError != null) {_                fail(firstError.getMessage())__            }_            internalCluster().wipeIndices("test")__        }_    };this,test,tries,to,simulate,load,while,creating,an,index,and,indexing,documents,while,the,index,is,being,created;test,logging,debug,org,elasticsearch,index,shard,index,shard,trace,org,elasticsearch,action,search,trace,public,void,test,auto,generate,id,no,duplicates,throws,exception,int,number,of,iterations,scaled,random,int,between,10,50,for,int,i,0,i,number,of,iterations,i,exception,first,error,null,create,index,test,int,num,of,docs,random,int,between,10,100,logger,info,indexing,docs,num,of,docs,list,index,request,builder,builders,new,array,list,num,of,docs,for,int,j,0,j,num,of,docs,j,builders,add,client,prepare,index,test,type,set,source,field,j,index,random,true,builders,logger,info,verifying,indexed,content,int,num,of,checks,random,int,between,8,12,for,int,j,0,j,num,of,checks,j,try,logger,debug,running,search,with,all,types,search,response,response,client,prepare,search,test,get,if,response,get,hits,get,total,hits,value,num,of,docs,final,string,message,count,is,response,get,hits,get,total,hits,value,but,num,of,docs,was,expected,elasticsearch,assertions,format,shard,status,response,logger,error,search,response,n,message,response,fail,message,catch,exception,e,logger,error,search,for,all,docs,types,failed,e,if,first,error,null,first,error,e,try,logger,debug,running,search,with,a,specific,type,search,response,response,client,prepare,search,test,set,types,type,get,if,response,get,hits,get,total,hits,value,num,of,docs,final,string,message,count,is,response,get,hits,get,total,hits,value,but,num,of,docs,was,expected,elasticsearch,assertions,format,shard,status,response,logger,error,search,response,n,message,response,fail,message,catch,exception,e,logger,error,search,for,all,docs,of,a,specific,type,failed,e,if,first,error,null,first,error,e,if,first,error,null,fail,first,error,get,message,internal,cluster,wipe,indices,test
IndexActionIT -> @TestLogging("_root:DEBUG,org.elasticsearch.index.shard.IndexShard:TRACE,org.elasticsearch.action.search:TRACE")     public void testAutoGenerateIdNoDuplicates() throws Exception;1547060152;This test tries to simulate load while creating an index and indexing documents_while the index is being created.;@TestLogging("_root:DEBUG,org.elasticsearch.index.shard.IndexShard:TRACE,org.elasticsearch.action.search:TRACE")_    public void testAutoGenerateIdNoDuplicates() throws Exception {_        int numberOfIterations = scaledRandomIntBetween(10, 50)__        for (int i = 0_ i < numberOfIterations_ i++) {_            Exception firstError = null__            createIndex("test")__            int numOfDocs = randomIntBetween(10, 100)__            logger.info("indexing [{}] docs", numOfDocs)__            List<IndexRequestBuilder> builders = new ArrayList<>(numOfDocs)__            for (int j = 0_ j < numOfDocs_ j++) {_                builders.add(client().prepareIndex("test", "type").setSource("field", "value_" + j))__            }_            indexRandom(true, builders)__            logger.info("verifying indexed content")__            int numOfChecks = randomIntBetween(8, 12)__            for (int j = 0_ j < numOfChecks_ j++) {_                try {_                    logger.debug("running search with all types")__                    SearchResponse response = client().prepareSearch("test").get()__                    if (response.getHits().getTotalHits().value != numOfDocs) {_                        final String message =_                                "Count is " + response.getHits().getTotalHits().value + " but " + numOfDocs + " was expected. " +_                                        ElasticsearchAssertions.formatShardStatus(response)__                        logger.error("{}. search response: \n{}", message, response)__                        fail(message)__                    }_                } catch (Exception e) {_                    logger.error("search for all docs types failed", e)__                    if (firstError == null) {_                        firstError = e__                    }_                }_                try {_                    logger.debug("running search with a specific type")__                    SearchResponse response = client().prepareSearch("test").setTypes("type").get()__                    if (response.getHits().getTotalHits().value != numOfDocs) {_                        final String message =_                                "Count is " + response.getHits().getTotalHits().value + " but " + numOfDocs + " was expected. " +_                                        ElasticsearchAssertions.formatShardStatus(response)__                        logger.error("{}. search response: \n{}", message, response)__                        fail(message)__                    }_                } catch (Exception e) {_                    logger.error("search for all docs of a specific type failed", e)__                    if (firstError == null) {_                        firstError = e__                    }_                }_            }_            if (firstError != null) {_                fail(firstError.getMessage())__            }_            internalCluster().wipeIndices("test")__        }_    };this,test,tries,to,simulate,load,while,creating,an,index,and,indexing,documents,while,the,index,is,being,created;test,logging,debug,org,elasticsearch,index,shard,index,shard,trace,org,elasticsearch,action,search,trace,public,void,test,auto,generate,id,no,duplicates,throws,exception,int,number,of,iterations,scaled,random,int,between,10,50,for,int,i,0,i,number,of,iterations,i,exception,first,error,null,create,index,test,int,num,of,docs,random,int,between,10,100,logger,info,indexing,docs,num,of,docs,list,index,request,builder,builders,new,array,list,num,of,docs,for,int,j,0,j,num,of,docs,j,builders,add,client,prepare,index,test,type,set,source,field,j,index,random,true,builders,logger,info,verifying,indexed,content,int,num,of,checks,random,int,between,8,12,for,int,j,0,j,num,of,checks,j,try,logger,debug,running,search,with,all,types,search,response,response,client,prepare,search,test,get,if,response,get,hits,get,total,hits,value,num,of,docs,final,string,message,count,is,response,get,hits,get,total,hits,value,but,num,of,docs,was,expected,elasticsearch,assertions,format,shard,status,response,logger,error,search,response,n,message,response,fail,message,catch,exception,e,logger,error,search,for,all,docs,types,failed,e,if,first,error,null,first,error,e,try,logger,debug,running,search,with,a,specific,type,search,response,response,client,prepare,search,test,set,types,type,get,if,response,get,hits,get,total,hits,value,num,of,docs,final,string,message,count,is,response,get,hits,get,total,hits,value,but,num,of,docs,was,expected,elasticsearch,assertions,format,shard,status,response,logger,error,search,response,n,message,response,fail,message,catch,exception,e,logger,error,search,for,all,docs,of,a,specific,type,failed,e,if,first,error,null,first,error,e,if,first,error,null,fail,first,error,get,message,internal,cluster,wipe,indices,test
