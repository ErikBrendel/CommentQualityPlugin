commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;public void testShardId() {     ShardId shardId = new ShardId(randomAlphaOfLengthBetween(5, 10), randomAlphaOfLength(10), randomInt()).     SearchShardIterator searchShardIterator = new SearchShardIterator(null, shardId, Collections.emptyList(), OriginalIndices.NONE).     assertSame(shardId, searchShardIterator.shardId()). }
false;public;0;7;;public void testGetOriginalIndices() {     ShardId shardId = new ShardId(randomAlphaOfLengthBetween(5, 10), randomAlphaOfLength(10), randomInt()).     OriginalIndices originalIndices = new OriginalIndices(new String[] { randomAlphaOfLengthBetween(3, 10) }, IndicesOptions.fromOptions(randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean())).     SearchShardIterator searchShardIterator = new SearchShardIterator(null, shardId, Collections.emptyList(), originalIndices).     assertSame(originalIndices, searchShardIterator.getOriginalIndices()). }
false;public;0;7;;public void testGetClusterAlias() {     String clusterAlias = randomBoolean() ? null : randomAlphaOfLengthBetween(5, 10).     ShardId shardId = new ShardId(randomAlphaOfLengthBetween(5, 10), randomAlphaOfLength(10), randomInt()).     SearchShardIterator searchShardIterator = new SearchShardIterator(clusterAlias, shardId, Collections.emptyList(), OriginalIndices.NONE).     assertEquals(clusterAlias, searchShardIterator.getClusterAlias()). }
false;public;0;13;;public void testNewSearchShardTarget() {     String clusterAlias = randomBoolean() ? null : randomAlphaOfLengthBetween(5, 10).     ShardId shardId = new ShardId(randomAlphaOfLengthBetween(5, 10), randomAlphaOfLength(10), randomInt()).     OriginalIndices originalIndices = new OriginalIndices(new String[] { randomAlphaOfLengthBetween(3, 10) }, IndicesOptions.fromOptions(randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean())).     SearchShardIterator searchShardIterator = new SearchShardIterator(clusterAlias, shardId, Collections.emptyList(), originalIndices).     String nodeId = randomAlphaOfLengthBetween(3, 10).     SearchShardTarget searchShardTarget = searchShardIterator.newSearchShardTarget(nodeId).     assertEquals(clusterAlias, searchShardTarget.getClusterAlias()).     assertSame(shardId, searchShardTarget.getShardId()).     assertEquals(nodeId, searchShardTarget.getNodeId()).     assertSame(originalIndices, searchShardTarget.getOriginalIndices()). }
false;public;0;18;;public void testEqualsAndHashcode() {     EqualsHashCodeTestUtils.checkEqualsAndHashCode(randomSearchShardIterator(), s -> new SearchShardIterator(s.getClusterAlias(), s.shardId(), s.getShardRoutings(), s.getOriginalIndices()), s -> {         if (randomBoolean()) {             String clusterAlias.             if (s.getClusterAlias() == null) {                 clusterAlias = randomAlphaOfLengthBetween(5, 10).             } else {                 clusterAlias = randomBoolean() ? null : s.getClusterAlias() + randomAlphaOfLength(3).             }             return new SearchShardIterator(clusterAlias, s.shardId(), s.getShardRoutings(), s.getOriginalIndices()).         } else {             ShardId shardId = new ShardId(randomAlphaOfLengthBetween(5, 10), randomAlphaOfLength(10), randomIntBetween(0, Integer.MAX_VALUE)).             return new SearchShardIterator(s.getClusterAlias(), shardId, s.getShardRoutings(), s.getOriginalIndices()).         }     }). }
false;public;0;39;;public void testCompareTo() {     String[] clusters = generateRandomStringArray(2, 10, false, false).     Arrays.sort(clusters).     String[] indices = generateRandomStringArray(3, 10, false, false).     Arrays.sort(indices).     String[] uuids = generateRandomStringArray(3, 10, false, false).     Arrays.sort(uuids).     List<SearchShardIterator> shardIterators = new ArrayList<>().     int numShards = randomIntBetween(1, 5).     for (int i = 0. i < numShards. i++) {         for (String index : indices) {             for (String uuid : uuids) {                 ShardId shardId = new ShardId(index, uuid, i).                 shardIterators.add(new SearchShardIterator(null, shardId, GroupShardsIteratorTests.randomShardRoutings(shardId), OriginalIndicesTests.randomOriginalIndices())).                 for (String cluster : clusters) {                     shardIterators.add(new SearchShardIterator(cluster, shardId, GroupShardsIteratorTests.randomShardRoutings(shardId), OriginalIndicesTests.randomOriginalIndices())).                 }             }         }     }     for (int i = 0. i < shardIterators.size(). i++) {         SearchShardIterator currentIterator = shardIterators.get(i).         for (int j = i + 1. j < shardIterators.size(). j++) {             SearchShardIterator greaterIterator = shardIterators.get(j).             assertThat(currentIterator, Matchers.lessThan(greaterIterator)).             assertThat(greaterIterator, Matchers.greaterThan(currentIterator)).             assertNotEquals(currentIterator, greaterIterator).         }         for (int j = i - 1. j >= 0. j--) {             SearchShardIterator smallerIterator = shardIterators.get(j).             assertThat(smallerIterator, Matchers.lessThan(currentIterator)).             assertThat(currentIterator, Matchers.greaterThan(smallerIterator)).             assertNotEquals(currentIterator, smallerIterator).         }     } }
false;public;0;8;;public void testCompareToEqualItems() {     SearchShardIterator shardIterator1 = randomSearchShardIterator().     SearchShardIterator shardIterator2 = new SearchShardIterator(shardIterator1.getClusterAlias(), shardIterator1.shardId(), shardIterator1.getShardRoutings(), shardIterator1.getOriginalIndices()).     assertEquals(shardIterator1, shardIterator2).     assertEquals(0, shardIterator1.compareTo(shardIterator2)).     assertEquals(0, shardIterator2.compareTo(shardIterator1)). }
false;private,static;0;6;;private static SearchShardIterator randomSearchShardIterator() {     String clusterAlias = randomBoolean() ? null : randomAlphaOfLengthBetween(5, 10).     ShardId shardId = new ShardId(randomAlphaOfLengthBetween(5, 10), randomAlphaOfLength(10), randomIntBetween(0, Integer.MAX_VALUE)).     return new SearchShardIterator(clusterAlias, shardId, GroupShardsIteratorTests.randomShardRoutings(shardId), OriginalIndicesTests.randomOriginalIndices()). }
