commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;public void testSerialization() throws IOException {     boolean isFailure = randomBoolean().     SimulateDocumentBaseResult simulateDocumentBaseResult = createTestInstance(isFailure).     BytesStreamOutput out = new BytesStreamOutput().     simulateDocumentBaseResult.writeTo(out).     StreamInput streamInput = out.bytes().streamInput().     SimulateDocumentBaseResult otherSimulateDocumentBaseResult = new SimulateDocumentBaseResult(streamInput).     if (isFailure) {         assertThat(otherSimulateDocumentBaseResult.getIngestDocument(), equalTo(simulateDocumentBaseResult.getIngestDocument())).         assertThat(otherSimulateDocumentBaseResult.getFailure(), instanceOf(IllegalArgumentException.class)).         IllegalArgumentException e = (IllegalArgumentException) otherSimulateDocumentBaseResult.getFailure().         assertThat(e.getMessage(), equalTo("test")).     } else {         assertIngestDocument(otherSimulateDocumentBaseResult.getIngestDocument(), simulateDocumentBaseResult.getIngestDocument()).     } }
false;static;1;10;;static SimulateDocumentBaseResult createTestInstance(boolean isFailure) {     SimulateDocumentBaseResult simulateDocumentBaseResult.     if (isFailure) {         simulateDocumentBaseResult = new SimulateDocumentBaseResult(new IllegalArgumentException("test")).     } else {         IngestDocument ingestDocument = createRandomIngestDoc().         simulateDocumentBaseResult = new SimulateDocumentBaseResult(ingestDocument).     }     return simulateDocumentBaseResult. }
false;private,static;0;3;;private static SimulateDocumentBaseResult createTestInstanceWithFailures() {     return createTestInstance(randomBoolean()). }
false;protected;0;4;;@Override protected SimulateDocumentBaseResult createTestInstance() {     return createTestInstance(false). }
false;protected;1;4;;@Override protected SimulateDocumentBaseResult doParseInstance(XContentParser parser) {     return SimulateDocumentBaseResult.fromXContent(parser). }
false;protected;0;4;;@Override protected boolean supportsUnknownFields() {     return true. }
false;protected;0;15;;@Override protected Predicate<String> getRandomFieldsExcludeFilter() {     // We cannot have random fields in the _source field and _ingest field     return field -> field.contains(new StringJoiner(".").add(WriteableIngestDocument.DOC_FIELD).add(WriteableIngestDocument.SOURCE_FIELD).toString()) || field.contains(new StringJoiner(".").add(WriteableIngestDocument.DOC_FIELD).add(WriteableIngestDocument.INGEST_FIELD).toString()). }
false;public,static;2;12;;public static void assertEqualDocs(SimulateDocumentBaseResult response, SimulateDocumentBaseResult parsedResponse) {     assertEquals(response.getIngestDocument(), parsedResponse.getIngestDocument()).     if (response.getFailure() != null) {         assertNotNull(parsedResponse.getFailure()).         assertThat(parsedResponse.getFailure().getMessage(), containsString(response.getFailure().getMessage())).     } else {         assertNull(parsedResponse.getFailure()).     } }
false;public;2;4;;@Override public void assertEqualInstances(SimulateDocumentBaseResult response, SimulateDocumentBaseResult parsedResponse) {     assertEqualDocs(response, parsedResponse). }
true;public;0;8;/**  * Test parsing {@link SimulateDocumentBaseResult} with inner failures as they don't support asserting on xcontent  * equivalence, given that exceptions are not parsed back as the same original class. We run the usual  * {@link AbstractXContentTestCase#testFromXContent()} without failures, and this other test with failures where  * we disable asserting on xcontent equivalence at the end.  */ ;/**  * Test parsing {@link SimulateDocumentBaseResult} with inner failures as they don't support asserting on xcontent  * equivalence, given that exceptions are not parsed back as the same original class. We run the usual  * {@link AbstractXContentTestCase#testFromXContent()} without failures, and this other test with failures where  * we disable asserting on xcontent equivalence at the end.  */ public void testFromXContentWithFailures() throws IOException {     Supplier<SimulateDocumentBaseResult> instanceSupplier = SimulateDocumentBaseResultTests::createTestInstanceWithFailures.     // exceptions are not of the same type whenever parsed back     boolean assertToXContentEquivalence = false.     AbstractXContentTestCase.testFromXContent(NUMBER_OF_TEST_RUNS, instanceSupplier, supportsUnknownFields(), getShuffleFieldsExceptions(), getRandomFieldsExcludeFilter(), this::createParser, this::doParseInstance, this::assertEqualInstances, assertToXContentEquivalence, getToXContentParams()). }
