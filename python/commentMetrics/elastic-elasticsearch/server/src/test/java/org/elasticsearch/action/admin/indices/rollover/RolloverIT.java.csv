commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     return Collections.singleton(InternalSettingsPlugin.class). }
false;public;0;24;;public void testRolloverOnEmptyIndex() throws Exception {     Alias testAlias = new Alias("test_alias").     boolean explicitWriteIndex = randomBoolean().     if (explicitWriteIndex) {         testAlias.writeIndex(true).     }     assertAcked(prepareCreate("test_index-1").addAlias(testAlias).get()).     final RolloverResponse response = client().admin().indices().prepareRolloverIndex("test_alias").get().     assertThat(response.getOldIndex(), equalTo("test_index-1")).     assertThat(response.getNewIndex(), equalTo("test_index-000002")).     assertThat(response.isDryRun(), equalTo(false)).     assertThat(response.isRolledOver(), equalTo(true)).     assertThat(response.getConditionStatus().size(), equalTo(0)).     final ClusterState state = client().admin().cluster().prepareState().get().getState().     final IndexMetaData oldIndex = state.metaData().index("test_index-1").     if (explicitWriteIndex) {         assertTrue(oldIndex.getAliases().containsKey("test_alias")).         assertFalse(oldIndex.getAliases().get("test_alias").writeIndex()).     } else {         assertFalse(oldIndex.getAliases().containsKey("test_alias")).     }     final IndexMetaData newIndex = state.metaData().index("test_index-000002").     assertTrue(newIndex.getAliases().containsKey("test_alias")). }
false;public;0;22;;public void testRollover() throws Exception {     long beforeTime = client().threadPool().absoluteTimeInMillis() - 1000L.     assertAcked(prepareCreate("test_index-2").addAlias(new Alias("test_alias")).get()).     index("test_index-2", "type1", "1", "field", "value").     flush("test_index-2").     final RolloverResponse response = client().admin().indices().prepareRolloverIndex("test_alias").get().     assertThat(response.getOldIndex(), equalTo("test_index-2")).     assertThat(response.getNewIndex(), equalTo("test_index-000003")).     assertThat(response.isDryRun(), equalTo(false)).     assertThat(response.isRolledOver(), equalTo(true)).     assertThat(response.getConditionStatus().size(), equalTo(0)).     final ClusterState state = client().admin().cluster().prepareState().get().getState().     final IndexMetaData oldIndex = state.metaData().index("test_index-2").     assertFalse(oldIndex.getAliases().containsKey("test_alias")).     final IndexMetaData newIndex = state.metaData().index("test_index-000003").     assertTrue(newIndex.getAliases().containsKey("test_alias")).     assertThat(oldIndex.getRolloverInfos().size(), equalTo(1)).     assertThat(oldIndex.getRolloverInfos().get("test_alias").getAlias(), equalTo("test_alias")).     assertThat(oldIndex.getRolloverInfos().get("test_alias").getMetConditions(), is(empty())).     assertThat(oldIndex.getRolloverInfos().get("test_alias").getTime(), is(both(greaterThanOrEqualTo(beforeTime)).and(lessThanOrEqualTo(client().threadPool().absoluteTimeInMillis() + 1000L)))). }
false;public;0;24;;public void testRolloverWithExplicitWriteIndex() throws Exception {     long beforeTime = client().threadPool().absoluteTimeInMillis() - 1000L.     assertAcked(prepareCreate("test_index-2").addAlias(new Alias("test_alias").writeIndex(true)).get()).     index("test_index-2", "type1", "1", "field", "value").     flush("test_index-2").     final RolloverResponse response = client().admin().indices().prepareRolloverIndex("test_alias").get().     assertThat(response.getOldIndex(), equalTo("test_index-2")).     assertThat(response.getNewIndex(), equalTo("test_index-000003")).     assertThat(response.isDryRun(), equalTo(false)).     assertThat(response.isRolledOver(), equalTo(true)).     assertThat(response.getConditionStatus().size(), equalTo(0)).     final ClusterState state = client().admin().cluster().prepareState().get().getState().     final IndexMetaData oldIndex = state.metaData().index("test_index-2").     assertTrue(oldIndex.getAliases().containsKey("test_alias")).     assertFalse(oldIndex.getAliases().get("test_alias").writeIndex()).     final IndexMetaData newIndex = state.metaData().index("test_index-000003").     assertTrue(newIndex.getAliases().containsKey("test_alias")).     assertTrue(newIndex.getAliases().get("test_alias").writeIndex()).     assertThat(oldIndex.getRolloverInfos().size(), equalTo(1)).     assertThat(oldIndex.getRolloverInfos().get("test_alias").getAlias(), equalTo("test_alias")).     assertThat(oldIndex.getRolloverInfos().get("test_alias").getMetConditions(), is(empty())).     assertThat(oldIndex.getRolloverInfos().get("test_alias").getTime(), is(both(greaterThanOrEqualTo(beforeTime)).and(lessThanOrEqualTo(client().threadPool().absoluteTimeInMillis() + 1000L)))). }
false;public;0;10;;public void testRolloverWithNoWriteIndex() {     Boolean firstIsWriteIndex = randomFrom(false, null).     assertAcked(prepareCreate("index1").addAlias(new Alias("alias").writeIndex(firstIsWriteIndex)).get()).     if (firstIsWriteIndex == null) {         assertAcked(prepareCreate("index2").addAlias(new Alias("alias").writeIndex(randomFrom(false, null))).get()).     }     IllegalArgumentException exception = expectThrows(IllegalArgumentException.class, () -> client().admin().indices().prepareRolloverIndex("alias").dryRun(randomBoolean()).get()).     assertThat(exception.getMessage(), equalTo("source alias [alias] does not point to a write index")). }
false;public;0;34;;public void testRolloverWithIndexSettings() throws Exception {     Alias testAlias = new Alias("test_alias").     boolean explicitWriteIndex = randomBoolean().     if (explicitWriteIndex) {         testAlias.writeIndex(true).     }     assertAcked(prepareCreate("test_index-2").addAlias(testAlias).get()).     index("test_index-2", "type1", "1", "field", "value").     flush("test_index-2").     final Settings settings = Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0).build().     final RolloverResponse response = client().admin().indices().prepareRolloverIndex("test_alias").settings(settings).alias(new Alias("extra_alias")).get().     assertThat(response.getOldIndex(), equalTo("test_index-2")).     assertThat(response.getNewIndex(), equalTo("test_index-000003")).     assertThat(response.isDryRun(), equalTo(false)).     assertThat(response.isRolledOver(), equalTo(true)).     assertThat(response.getConditionStatus().size(), equalTo(0)).     final ClusterState state = client().admin().cluster().prepareState().get().getState().     final IndexMetaData oldIndex = state.metaData().index("test_index-2").     final IndexMetaData newIndex = state.metaData().index("test_index-000003").     assertThat(newIndex.getNumberOfShards(), equalTo(1)).     assertThat(newIndex.getNumberOfReplicas(), equalTo(0)).     assertTrue(newIndex.getAliases().containsKey("test_alias")).     assertTrue(newIndex.getAliases().containsKey("extra_alias")).     if (explicitWriteIndex) {         assertFalse(oldIndex.getAliases().get("test_alias").writeIndex()).         assertTrue(newIndex.getAliases().get("test_alias").writeIndex()).     } else {         assertFalse(oldIndex.getAliases().containsKey("test_alias")).     } }
false;public;0;16;;public void testRolloverDryRun() throws Exception {     assertAcked(prepareCreate("test_index-1").addAlias(new Alias("test_alias")).get()).     index("test_index-1", "type1", "1", "field", "value").     flush("test_index-1").     final RolloverResponse response = client().admin().indices().prepareRolloverIndex("test_alias").dryRun(true).get().     assertThat(response.getOldIndex(), equalTo("test_index-1")).     assertThat(response.getNewIndex(), equalTo("test_index-000002")).     assertThat(response.isDryRun(), equalTo(true)).     assertThat(response.isRolledOver(), equalTo(false)).     assertThat(response.getConditionStatus().size(), equalTo(0)).     final ClusterState state = client().admin().cluster().prepareState().get().getState().     final IndexMetaData oldIndex = state.metaData().index("test_index-1").     assertTrue(oldIndex.getAliases().containsKey("test_alias")).     final IndexMetaData newIndex = state.metaData().index("test_index-000002").     assertNull(newIndex). }
false;public;0;34;;public void testRolloverConditionsNotMet() throws Exception {     boolean explicitWriteIndex = randomBoolean().     Alias testAlias = new Alias("test_alias").     if (explicitWriteIndex) {         testAlias.writeIndex(true).     }     assertAcked(prepareCreate("test_index-0").addAlias(testAlias).get()).     index("test_index-0", "type1", "1", "field", "value").     flush("test_index-0").     final RolloverResponse response = client().admin().indices().prepareRolloverIndex("test_alias").addMaxIndexSizeCondition(new ByteSizeValue(10, ByteSizeUnit.MB)).addMaxIndexAgeCondition(TimeValue.timeValueHours(4)).get().     assertThat(response.getOldIndex(), equalTo("test_index-0")).     assertThat(response.getNewIndex(), equalTo("test_index-000001")).     assertThat(response.isDryRun(), equalTo(false)).     assertThat(response.isRolledOver(), equalTo(false)).     assertThat(response.getConditionStatus().size(), equalTo(2)).     assertThat(response.getConditionStatus().values(), everyItem(is(false))).     Set<String> conditions = response.getConditionStatus().keySet().     assertThat(conditions, containsInAnyOrder(new MaxSizeCondition(new ByteSizeValue(10, ByteSizeUnit.MB)).toString(), new MaxAgeCondition(TimeValue.timeValueHours(4)).toString())).     final ClusterState state = client().admin().cluster().prepareState().get().getState().     final IndexMetaData oldIndex = state.metaData().index("test_index-0").     assertTrue(oldIndex.getAliases().containsKey("test_alias")).     if (explicitWriteIndex) {         assertTrue(oldIndex.getAliases().get("test_alias").writeIndex()).     } else {         assertNull(oldIndex.getAliases().get("test_alias").writeIndex()).     }     final IndexMetaData newIndex = state.metaData().index("test_index-000001").     assertNull(newIndex). }
false;public;0;27;;public void testRolloverWithNewIndexName() throws Exception {     Alias testAlias = new Alias("test_alias").     boolean explicitWriteIndex = randomBoolean().     if (explicitWriteIndex) {         testAlias.writeIndex(true).     }     assertAcked(prepareCreate("test_index").addAlias(testAlias).get()).     index("test_index", "type1", "1", "field", "value").     flush("test_index").     final RolloverResponse response = client().admin().indices().prepareRolloverIndex("test_alias").setNewIndexName("test_new_index").get().     assertThat(response.getOldIndex(), equalTo("test_index")).     assertThat(response.getNewIndex(), equalTo("test_new_index")).     assertThat(response.isDryRun(), equalTo(false)).     assertThat(response.isRolledOver(), equalTo(true)).     assertThat(response.getConditionStatus().size(), equalTo(0)).     final ClusterState state = client().admin().cluster().prepareState().get().getState().     final IndexMetaData oldIndex = state.metaData().index("test_index").     final IndexMetaData newIndex = state.metaData().index("test_new_index").     assertTrue(newIndex.getAliases().containsKey("test_alias")).     if (explicitWriteIndex) {         assertFalse(oldIndex.getAliases().get("test_alias").writeIndex()).         assertTrue(newIndex.getAliases().get("test_alias").writeIndex()).     } else {         assertFalse(oldIndex.getAliases().containsKey("test_alias")).     } }
false;public;0;13;;public void testRolloverOnExistingIndex() throws Exception {     assertAcked(prepareCreate("test_index-0").addAlias(new Alias("test_alias")).get()).     index("test_index-0", "type1", "1", "field", "value").     assertAcked(prepareCreate("test_index-000001").get()).     index("test_index-000001", "type1", "1", "field", "value").     flush("test_index-0", "test_index-000001").     try {         client().admin().indices().prepareRolloverIndex("test_alias").get().         fail("expected failure due to existing rollover index").     } catch (ResourceAlreadyExistsException e) {         assertThat(e.getIndex().getName(), equalTo("test_index-000001")).     } }
false;public;0;43;;public void testRolloverWithDateMath() {     ZonedDateTime now = ZonedDateTime.now(ZoneOffset.UTC).     assumeTrue("only works on the same day", now.plusMinutes(5).getDayOfYear() == now.getDayOfYear()).     String index = "test-" + DateFormatter.forPattern("yyyy.MM.dd").format(now) + "-1".     String dateMathExp = "<test-{now/d}-1>".     assertAcked(prepareCreate(dateMathExp).addAlias(new Alias("test_alias")).get()).     ensureGreen(index).     // now we modify the provided name such that we can test that the pattern is carried on     client().admin().indices().prepareClose(index).get().     client().admin().indices().prepareUpdateSettings(index).setSettings(Settings.builder().put(IndexMetaData.SETTING_INDEX_PROVIDED_NAME, "<test-{now/M{yyyy.MM}}-1>")).get().     client().admin().indices().prepareOpen(index).get().     ensureGreen(index).     RolloverResponse response = client().admin().indices().prepareRolloverIndex("test_alias").get().     assertThat(response.getOldIndex(), equalTo(index)).     assertThat(response.getNewIndex(), equalTo("test-" + DateFormatter.forPattern("yyyy.MM").format(now) + "-000002")).     assertThat(response.isDryRun(), equalTo(false)).     assertThat(response.isRolledOver(), equalTo(true)).     assertThat(response.getConditionStatus().size(), equalTo(0)).     response = client().admin().indices().prepareRolloverIndex("test_alias").get().     assertThat(response.getOldIndex(), equalTo("test-" + DateFormatter.forPattern("yyyy.MM").format(now) + "-000002")).     assertThat(response.getNewIndex(), equalTo("test-" + DateFormatter.forPattern("yyyy.MM").format(now) + "-000003")).     assertThat(response.isDryRun(), equalTo(false)).     assertThat(response.isRolledOver(), equalTo(true)).     assertThat(response.getConditionStatus().size(), equalTo(0)).     GetSettingsResponse getSettingsResponse = client().admin().indices().prepareGetSettings(response.getOldIndex(), response.getNewIndex()).get().     assertEquals("<test-{now/M{yyyy.MM}}-000002>", getSettingsResponse.getSetting(response.getOldIndex(), IndexMetaData.SETTING_INDEX_PROVIDED_NAME)).     assertEquals("<test-{now/M{yyyy.MM}}-000003>", getSettingsResponse.getSetting(response.getNewIndex(), IndexMetaData.SETTING_INDEX_PROVIDED_NAME)).     response = client().admin().indices().prepareRolloverIndex("test_alias").setNewIndexName("<test-{now/d}-000004>").get().     assertThat(response.getOldIndex(), equalTo("test-" + DateFormatter.forPattern("yyyy.MM").format(now) + "-000003")).     assertThat(response.getNewIndex(), equalTo("test-" + DateFormatter.forPattern("yyyy.MM.dd").format(now) + "-000004")).     assertThat(response.isDryRun(), equalTo(false)).     assertThat(response.isRolledOver(), equalTo(true)).     assertThat(response.getConditionStatus().size(), equalTo(0)). }
false;public;0;54;;public void testRolloverMaxSize() throws Exception {     assertAcked(prepareCreate("test-1").addAlias(new Alias("test_alias")).get()).     int numDocs = randomIntBetween(10, 20).     for (int i = 0. i < numDocs. i++) {         index("test-1", "doc", Integer.toString(i), "field", "foo-" + i).     }     flush("test-1").     refresh("test_alias").     // A large max_size     {         final RolloverResponse response = client().admin().indices().prepareRolloverIndex("test_alias").addMaxIndexSizeCondition(new ByteSizeValue(randomIntBetween(100, 50 * 1024), ByteSizeUnit.MB)).get().         assertThat(response.getOldIndex(), equalTo("test-1")).         assertThat(response.getNewIndex(), equalTo("test-000002")).         assertThat("No rollover with a large max_size condition", response.isRolledOver(), equalTo(false)).         final IndexMetaData oldIndex = client().admin().cluster().prepareState().get().getState().metaData().index("test-1").         assertThat(oldIndex.getRolloverInfos().size(), equalTo(0)).     }     // A small max_size     {         ByteSizeValue maxSizeValue = new ByteSizeValue(randomIntBetween(1, 20), ByteSizeUnit.BYTES).         long beforeTime = client().threadPool().absoluteTimeInMillis() - 1000L.         final RolloverResponse response = client().admin().indices().prepareRolloverIndex("test_alias").addMaxIndexSizeCondition(maxSizeValue).get().         assertThat(response.getOldIndex(), equalTo("test-1")).         assertThat(response.getNewIndex(), equalTo("test-000002")).         assertThat("Should rollover with a small max_size condition", response.isRolledOver(), equalTo(true)).         final IndexMetaData oldIndex = client().admin().cluster().prepareState().get().getState().metaData().index("test-1").         List<Condition<?>> metConditions = oldIndex.getRolloverInfos().get("test_alias").getMetConditions().         assertThat(metConditions.size(), equalTo(1)).         assertThat(metConditions.get(0).toString(), equalTo(new MaxSizeCondition(maxSizeValue).toString())).         assertThat(oldIndex.getRolloverInfos().get("test_alias").getTime(), is(both(greaterThanOrEqualTo(beforeTime)).and(lessThanOrEqualTo(client().threadPool().absoluteTimeInMillis() + 1000L)))).     }     // An empty index     {         final RolloverResponse response = client().admin().indices().prepareRolloverIndex("test_alias").addMaxIndexSizeCondition(new ByteSizeValue(randomNonNegativeLong(), ByteSizeUnit.BYTES)).get().         assertThat(response.getOldIndex(), equalTo("test-000002")).         assertThat(response.getNewIndex(), equalTo("test-000003")).         assertThat("No rollover with an empty index", response.isRolledOver(), equalTo(false)).         final IndexMetaData oldIndex = client().admin().cluster().prepareState().get().getState().metaData().index("test-000002").         assertThat(oldIndex.getRolloverInfos().size(), equalTo(0)).     } }
false;public;0;10;;public void testRejectIfAliasFoundInTemplate() throws Exception {     client().admin().indices().preparePutTemplate("logs").setPatterns(Collections.singletonList("logs-*")).addAlias(new Alias("logs-write")).get().     assertAcked(client().admin().indices().prepareCreate("logs-000001").get()).     ensureYellow("logs-write").     final IllegalArgumentException error = expectThrows(IllegalArgumentException.class, () -> client().admin().indices().prepareRolloverIndex("logs-write").addMaxIndexSizeCondition(new ByteSizeValue(1)).get()).     assertThat(error.getMessage(), equalTo("Rollover alias [logs-write] can point to multiple indices, found duplicated alias [[logs-write]] in index template [logs]")). }
