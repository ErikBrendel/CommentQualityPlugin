commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;public void testEmptyId() {     final IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new RetentionLease("", randomNonNegativeLong(), randomNonNegativeLong(), "source")).     assertThat(e, hasToString(containsString("retention lease ID can not be empty"))). }
false;public;0;9;;public void testRetainingSequenceNumberOutOfRange() {     final long retainingSequenceNumber = randomLongBetween(Long.MIN_VALUE, -1).     final IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new RetentionLease("id", retainingSequenceNumber, randomNonNegativeLong(), "source")).     assertThat(e, hasToString(containsString("retention lease retaining sequence number [" + retainingSequenceNumber + "] out of range"))). }
false;public;0;7;;public void testTimestampOutOfRange() {     final long timestamp = randomLongBetween(Long.MIN_VALUE, -1).     final IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new RetentionLease("id", randomNonNegativeLong(), timestamp, "source")).     assertThat(e, hasToString(containsString("retention lease timestamp [" + timestamp + "] out of range"))). }
false;public;0;6;;public void testEmptySource() {     final IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new RetentionLease("id", randomNonNegativeLong(), randomNonNegativeLong(), "")).     assertThat(e, hasToString(containsString("retention lease source can not be empty"))). }
false;public;0;13;;public void testRetentionLeaseSerialization() throws IOException {     final String id = randomAlphaOfLength(8).     final long retainingSequenceNumber = randomLongBetween(0, Long.MAX_VALUE).     final long timestamp = randomNonNegativeLong().     final String source = randomAlphaOfLength(8).     final RetentionLease retentionLease = new RetentionLease(id, retainingSequenceNumber, timestamp, source).     try (BytesStreamOutput out = new BytesStreamOutput()) {         retentionLease.writeTo(out).         try (StreamInput in = out.bytes().streamInput()) {             assertThat(retentionLease, equalTo(new RetentionLease(in))).         }     } }
