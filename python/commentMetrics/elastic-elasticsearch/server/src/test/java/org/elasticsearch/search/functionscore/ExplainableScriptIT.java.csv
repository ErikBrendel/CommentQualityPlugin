commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getType() {     return "test". }
false;public;0;4;;@Override public boolean needs_score() {     return false. }
false;public;1;4;;@Override public ScoreScript newInstance(LeafReaderContext ctx) throws IOException {     return new MyScript(params1, lookup, ctx). }
false;public;4;17;;@Override public <T> T compile(String scriptName, String scriptSource, ScriptContext<T> context, Map<String, String> params) {     assert scriptSource.equals("explainable_script").     assert context == ScoreScript.CONTEXT.     ScoreScript.Factory factory = (params1, lookup) -> new ScoreScript.LeafFactory() {          @Override         public boolean needs_score() {             return false.         }          @Override         public ScoreScript newInstance(LeafReaderContext ctx) throws IOException {             return new MyScript(params1, lookup, ctx).         }     }.     return context.factoryClazz.cast(factory). }
false;public;2;27;;@Override public ScriptEngine getScriptEngine(Settings settings, Collection<ScriptContext<?>> contexts) {     return new ScriptEngine() {          @Override         public String getType() {             return "test".         }          @Override         public <T> T compile(String scriptName, String scriptSource, ScriptContext<T> context, Map<String, String> params) {             assert scriptSource.equals("explainable_script").             assert context == ScoreScript.CONTEXT.             ScoreScript.Factory factory = (params1, lookup) -> new ScoreScript.LeafFactory() {                  @Override                 public boolean needs_score() {                     return false.                 }                  @Override                 public ScoreScript newInstance(LeafReaderContext ctx) throws IOException {                     return new MyScript(params1, lookup, ctx).                 }             }.             return context.factoryClazz.cast(factory).         }     }. }
false;public;1;5;;@Override public Explanation explain(Explanation subQueryScore) throws IOException {     Explanation scoreExp = Explanation.match(subQueryScore.getValue(), "_score: ", subQueryScore).     return Explanation.match((float) (execute()), "This script returned " + execute(), scoreExp). }
false;public;0;4;;@Override public double execute() {     return ((Number) ((ScriptDocValues) getDoc().get("number_field")).get(0)).doubleValue(). }
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     return Arrays.asList(ExplainableScriptPlugin.class). }
false;public;0;29;;public void testExplainScript() throws InterruptedException, IOException, ExecutionException {     List<IndexRequestBuilder> indexRequests = new ArrayList<>().     for (int i = 0. i < 20. i++) {         indexRequests.add(client().prepareIndex("test", "type").setId(Integer.toString(i)).setSource(jsonBuilder().startObject().field("number_field", i).field("text", "text").endObject())).     }     indexRandom(true, true, indexRequests).     client().admin().indices().prepareRefresh().get().     ensureYellow().     SearchResponse response = client().search(searchRequest().searchType(SearchType.QUERY_THEN_FETCH).source(searchSource().explain(true).query(functionScoreQuery(termQuery("text", "text"), scriptFunction(new Script(ScriptType.INLINE, "test", "explainable_script", Collections.emptyMap()))).boostMode(CombineFunction.REPLACE)))).actionGet().     ElasticsearchAssertions.assertNoFailures(response).     SearchHits hits = response.getHits().     assertThat(hits.getTotalHits().value, equalTo(20L)).     int idCounter = 19.     for (SearchHit hit : hits.getHits()) {         assertThat(hit.getId(), equalTo(Integer.toString(idCounter))).         assertThat(hit.getExplanation().toString(), containsString(Double.toString(idCounter))).         assertThat(hit.getExplanation().toString(), containsString("1 = n")).         assertThat(hit.getExplanation().toString(), containsString("1 = N")).         assertThat(hit.getExplanation().getDetails().length, equalTo(2)).         idCounter--.     } }
