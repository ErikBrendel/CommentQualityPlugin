# id;timestamp;commentText;codeText;commentWords;codeWords
IndexRecoveryIT -> @TestLogging("_root:DEBUG,org.elasticsearch.indices.recovery:TRACE")     public void testDisconnectsDuringRecovery() throws Exception;1524684173;Tests scenario where recovery target successfully sends recovery request to source but then the channel gets closed while_the source is working on the recovery process.;@TestLogging("_root:DEBUG,org.elasticsearch.indices.recovery:TRACE")_    public void testDisconnectsDuringRecovery() throws Exception {_        boolean primaryRelocation = randomBoolean()__        final String indexName = "test"__        final Settings nodeSettings = Settings.builder()_            .put(RecoverySettings.INDICES_RECOVERY_RETRY_DELAY_NETWORK_SETTING.getKey(), TimeValue.timeValueMillis(randomIntBetween(0, 100)))_            .build()__        TimeValue disconnectAfterDelay = TimeValue.timeValueMillis(randomIntBetween(0, 100))__        _        String masterNodeName = internalCluster().startMasterOnlyNode(nodeSettings)___        final String blueNodeName = internalCluster().startNode(Settings.builder().put("node.attr.color", "blue").put(nodeSettings).build())__        final String redNodeName = internalCluster().startNode(Settings.builder().put("node.attr.color", "red").put(nodeSettings).build())___        client().admin().indices().prepareCreate(indexName)_            .setSettings(_                Settings.builder()_                    .put(IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING.getKey() + "color", "blue")_                    .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_                    .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)_            ).get()___        List<IndexRequestBuilder> requests = new ArrayList<>()__        int numDocs = scaledRandomIntBetween(25, 250)__        for (int i = 0_ i < numDocs_ i++) {_            requests.add(client().prepareIndex(indexName, "type").setSource("{}", XContentType.JSON))__        }_        indexRandom(true, requests)__        ensureSearchable(indexName)__        assertHitCount(client().prepareSearch(indexName).get(), numDocs)___        MockTransportService masterTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class, masterNodeName)__        MockTransportService blueMockTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class, blueNodeName)__        MockTransportService redMockTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class, redNodeName)___        redMockTransportService.addDelegate(blueMockTransportService, new MockTransportService.DelegateTransport(redMockTransportService.original()) {_            private final AtomicInteger count = new AtomicInteger()___            @Override_            protected void sendRequest(Connection connection, long requestId, String action, TransportRequest request,_                                       TransportRequestOptions options) throws IOException {_                logger.info("--> sending request {} on {}", action, connection.getNode())__                if (PeerRecoverySourceService.Actions.START_RECOVERY.equals(action) && count.incrementAndGet() == 1) {_                    _                    try {_                        awaitBusy(() -> client(blueNodeName).admin().cluster().prepareState().setLocal(true).get()_                            .getState().getRoutingTable().index("test").shard(0).getAllInitializingShards().isEmpty() == false)__                    } catch (InterruptedException e) {_                        throw new RuntimeException(e)__                    }_                    super.sendRequest(connection, requestId, action, request, options)__                    try {_                        Thread.sleep(disconnectAfterDelay.millis())__                    } catch (InterruptedException e) {_                        throw new RuntimeException(e)__                    }_                    throw new ConnectTransportException(connection.getNode(), "DISCONNECT: simulation disconnect after successfully sending " + action + " request")__                } else {_                    super.sendRequest(connection, requestId, action, request, options)__                }_            }_        })___        final AtomicBoolean finalized = new AtomicBoolean()__        blueMockTransportService.addDelegate(redMockTransportService, new MockTransportService.DelegateTransport(blueMockTransportService.original()) {_            @Override_            protected void sendRequest(Connection connection, long requestId, String action, TransportRequest request,_                                       TransportRequestOptions options) throws IOException {_                logger.info("--> sending request {} on {}", action, connection.getNode())__                if (action.equals(PeerRecoveryTargetService.Actions.FINALIZE)) {_                    finalized.set(true)__                }_                super.sendRequest(connection, requestId, action, request, options)__            }_        })___        for (MockTransportService mockTransportService : Arrays.asList(redMockTransportService, blueMockTransportService)) {_            mockTransportService.addDelegate(masterTransportService, new MockTransportService.DelegateTransport(mockTransportService.original()) {_                @Override_                protected void sendRequest(Connection connection, long requestId, String action, TransportRequest request,_                                           TransportRequestOptions options) throws IOException {_                    logger.info("--> sending request {} on {}", action, connection.getNode())__                    if ((primaryRelocation && finalized.get()) == false) {_                        assertNotEquals(action, ShardStateAction.SHARD_FAILED_ACTION_NAME)__                    }_                    super.sendRequest(connection, requestId, action, request, options)__                }_            })__        }__        if (primaryRelocation) {_            logger.info("--> starting primary relocation recovery from blue to red")__            client().admin().indices().prepareUpdateSettings(indexName).setSettings(_                Settings.builder()_                    .put(IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING.getKey() + "color", "red")_            ).get()___            ensureGreen()_ _            _            _            _            _            _            client().admin().indices().prepareRefresh(indexName).get()__        } else {_            logger.info("--> starting replica recovery from blue to red")__            client().admin().indices().prepareUpdateSettings(indexName).setSettings(_                Settings.builder()_                    .put(IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING.getKey() + "color", "red,blue")_                    .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 1)_            ).get()___            ensureGreen()__        }__        for (int i = 0_ i < 10_ i++) {_            assertHitCount(client().prepareSearch(indexName).get(), numDocs)__        }_    };tests,scenario,where,recovery,target,successfully,sends,recovery,request,to,source,but,then,the,channel,gets,closed,while,the,source,is,working,on,the,recovery,process;test,logging,debug,org,elasticsearch,indices,recovery,trace,public,void,test,disconnects,during,recovery,throws,exception,boolean,primary,relocation,random,boolean,final,string,index,name,test,final,settings,node,settings,settings,builder,put,recovery,settings,get,key,time,value,time,value,millis,random,int,between,0,100,build,time,value,disconnect,after,delay,time,value,time,value,millis,random,int,between,0,100,string,master,node,name,internal,cluster,start,master,only,node,node,settings,final,string,blue,node,name,internal,cluster,start,node,settings,builder,put,node,attr,color,blue,put,node,settings,build,final,string,red,node,name,internal,cluster,start,node,settings,builder,put,node,attr,color,red,put,node,settings,build,client,admin,indices,prepare,create,index,name,set,settings,settings,builder,put,index,meta,data,get,key,color,blue,put,index,meta,data,1,put,index,meta,data,0,get,list,index,request,builder,requests,new,array,list,int,num,docs,scaled,random,int,between,25,250,for,int,i,0,i,num,docs,i,requests,add,client,prepare,index,index,name,type,set,source,xcontent,type,json,index,random,true,requests,ensure,searchable,index,name,assert,hit,count,client,prepare,search,index,name,get,num,docs,mock,transport,service,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,master,node,name,mock,transport,service,blue,mock,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,blue,node,name,mock,transport,service,red,mock,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,red,node,name,red,mock,transport,service,add,delegate,blue,mock,transport,service,new,mock,transport,service,delegate,transport,red,mock,transport,service,original,private,final,atomic,integer,count,new,atomic,integer,override,protected,void,send,request,connection,connection,long,request,id,string,action,transport,request,request,transport,request,options,options,throws,ioexception,logger,info,sending,request,on,action,connection,get,node,if,peer,recovery,source,service,actions,equals,action,count,increment,and,get,1,try,await,busy,client,blue,node,name,admin,cluster,prepare,state,set,local,true,get,get,state,get,routing,table,index,test,shard,0,get,all,initializing,shards,is,empty,false,catch,interrupted,exception,e,throw,new,runtime,exception,e,super,send,request,connection,request,id,action,request,options,try,thread,sleep,disconnect,after,delay,millis,catch,interrupted,exception,e,throw,new,runtime,exception,e,throw,new,connect,transport,exception,connection,get,node,disconnect,simulation,disconnect,after,successfully,sending,action,request,else,super,send,request,connection,request,id,action,request,options,final,atomic,boolean,finalized,new,atomic,boolean,blue,mock,transport,service,add,delegate,red,mock,transport,service,new,mock,transport,service,delegate,transport,blue,mock,transport,service,original,override,protected,void,send,request,connection,connection,long,request,id,string,action,transport,request,request,transport,request,options,options,throws,ioexception,logger,info,sending,request,on,action,connection,get,node,if,action,equals,peer,recovery,target,service,actions,finalize,finalized,set,true,super,send,request,connection,request,id,action,request,options,for,mock,transport,service,mock,transport,service,arrays,as,list,red,mock,transport,service,blue,mock,transport,service,mock,transport,service,add,delegate,master,transport,service,new,mock,transport,service,delegate,transport,mock,transport,service,original,override,protected,void,send,request,connection,connection,long,request,id,string,action,transport,request,request,transport,request,options,options,throws,ioexception,logger,info,sending,request,on,action,connection,get,node,if,primary,relocation,finalized,get,false,assert,not,equals,action,shard,state,action,super,send,request,connection,request,id,action,request,options,if,primary,relocation,logger,info,starting,primary,relocation,recovery,from,blue,to,red,client,admin,indices,prepare,update,settings,index,name,set,settings,settings,builder,put,index,meta,data,get,key,color,red,get,ensure,green,client,admin,indices,prepare,refresh,index,name,get,else,logger,info,starting,replica,recovery,from,blue,to,red,client,admin,indices,prepare,update,settings,index,name,set,settings,settings,builder,put,index,meta,data,get,key,color,red,blue,put,index,meta,data,1,get,ensure,green,for,int,i,0,i,10,i,assert,hit,count,client,prepare,search,index,name,get,num,docs
IndexRecoveryIT -> @TestLogging("_root:DEBUG,org.elasticsearch.indices.recovery:TRACE")     public void testDisconnectsDuringRecovery() throws Exception;1534203100;Tests scenario where recovery target successfully sends recovery request to source but then the channel gets closed while_the source is working on the recovery process.;@TestLogging("_root:DEBUG,org.elasticsearch.indices.recovery:TRACE")_    public void testDisconnectsDuringRecovery() throws Exception {_        boolean primaryRelocation = randomBoolean()__        final String indexName = "test"__        final Settings nodeSettings = Settings.builder()_            .put(RecoverySettings.INDICES_RECOVERY_RETRY_DELAY_NETWORK_SETTING.getKey(), TimeValue.timeValueMillis(randomIntBetween(0, 100)))_            .build()__        TimeValue disconnectAfterDelay = TimeValue.timeValueMillis(randomIntBetween(0, 100))__        _        String masterNodeName = internalCluster().startMasterOnlyNode(nodeSettings)___        final String blueNodeName = internalCluster().startNode(Settings.builder().put("node.attr.color", "blue").put(nodeSettings).build())__        final String redNodeName = internalCluster().startNode(Settings.builder().put("node.attr.color", "red").put(nodeSettings).build())___        client().admin().indices().prepareCreate(indexName)_            .setSettings(_                Settings.builder()_                    .put(IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING.getKey() + "color", "blue")_                    .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_                    .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)_            ).get()___        List<IndexRequestBuilder> requests = new ArrayList<>()__        int numDocs = scaledRandomIntBetween(25, 250)__        for (int i = 0_ i < numDocs_ i++) {_            requests.add(client().prepareIndex(indexName, "type").setSource("{}", XContentType.JSON))__        }_        indexRandom(true, requests)__        ensureSearchable(indexName)__        assertHitCount(client().prepareSearch(indexName).get(), numDocs)___        MockTransportService masterTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class, masterNodeName)__        MockTransportService blueMockTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class, blueNodeName)__        MockTransportService redMockTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class, redNodeName)___        redMockTransportService.addSendBehavior(blueMockTransportService, new StubbableTransport.SendRequestBehavior() {_            private final AtomicInteger count = new AtomicInteger()___            @Override_            public void sendRequest(Transport.Connection connection, long requestId, String action, TransportRequest request,_                                    TransportRequestOptions options) throws IOException {_                logger.info("--> sending request {} on {}", action, connection.getNode())__                if (PeerRecoverySourceService.Actions.START_RECOVERY.equals(action) && count.incrementAndGet() == 1) {_                    _                    try {_                        awaitBusy(() -> client(blueNodeName).admin().cluster().prepareState().setLocal(true).get()_                            .getState().getRoutingTable().index("test").shard(0).getAllInitializingShards().isEmpty() == false)__                    } catch (InterruptedException e) {_                        throw new RuntimeException(e)__                    }_                    connection.sendRequest(requestId, action, request, options)__                    try {_                        Thread.sleep(disconnectAfterDelay.millis())__                    } catch (InterruptedException e) {_                        throw new RuntimeException(e)__                    }_                    throw new ConnectTransportException(connection.getNode(), "DISCONNECT: simulation disconnect after successfully sending " + action + " request")__                } else {_                    connection.sendRequest(requestId, action, request, options)__                }_            }_        })___        final AtomicBoolean finalized = new AtomicBoolean()__        blueMockTransportService.addSendBehavior(redMockTransportService, (connection, requestId, action, request, options) -> {_            logger.info("--> sending request {} on {}", action, connection.getNode())__            if (action.equals(PeerRecoveryTargetService.Actions.FINALIZE)) {_                finalized.set(true)__            }_            connection.sendRequest(requestId, action, request, options)__        })___        for (MockTransportService mockTransportService : Arrays.asList(redMockTransportService, blueMockTransportService)) {_            mockTransportService.addSendBehavior(masterTransportService, (connection, requestId, action, request, options) -> {_                logger.info("--> sending request {} on {}", action, connection.getNode())__                if ((primaryRelocation && finalized.get()) == false) {_                    assertNotEquals(action, ShardStateAction.SHARD_FAILED_ACTION_NAME)__                }_                connection.sendRequest(requestId, action, request, options)__            })__        }__        if (primaryRelocation) {_            logger.info("--> starting primary relocation recovery from blue to red")__            client().admin().indices().prepareUpdateSettings(indexName).setSettings(_                Settings.builder()_                    .put(IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING.getKey() + "color", "red")_            ).get()___            ensureGreen()_ _            _            _            _            _            _            client().admin().indices().prepareRefresh(indexName).get()__        } else {_            logger.info("--> starting replica recovery from blue to red")__            client().admin().indices().prepareUpdateSettings(indexName).setSettings(_                Settings.builder()_                    .put(IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING.getKey() + "color", "red,blue")_                    .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 1)_            ).get()___            ensureGreen()__        }__        for (int i = 0_ i < 10_ i++) {_            assertHitCount(client().prepareSearch(indexName).get(), numDocs)__        }_    };tests,scenario,where,recovery,target,successfully,sends,recovery,request,to,source,but,then,the,channel,gets,closed,while,the,source,is,working,on,the,recovery,process;test,logging,debug,org,elasticsearch,indices,recovery,trace,public,void,test,disconnects,during,recovery,throws,exception,boolean,primary,relocation,random,boolean,final,string,index,name,test,final,settings,node,settings,settings,builder,put,recovery,settings,get,key,time,value,time,value,millis,random,int,between,0,100,build,time,value,disconnect,after,delay,time,value,time,value,millis,random,int,between,0,100,string,master,node,name,internal,cluster,start,master,only,node,node,settings,final,string,blue,node,name,internal,cluster,start,node,settings,builder,put,node,attr,color,blue,put,node,settings,build,final,string,red,node,name,internal,cluster,start,node,settings,builder,put,node,attr,color,red,put,node,settings,build,client,admin,indices,prepare,create,index,name,set,settings,settings,builder,put,index,meta,data,get,key,color,blue,put,index,meta,data,1,put,index,meta,data,0,get,list,index,request,builder,requests,new,array,list,int,num,docs,scaled,random,int,between,25,250,for,int,i,0,i,num,docs,i,requests,add,client,prepare,index,index,name,type,set,source,xcontent,type,json,index,random,true,requests,ensure,searchable,index,name,assert,hit,count,client,prepare,search,index,name,get,num,docs,mock,transport,service,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,master,node,name,mock,transport,service,blue,mock,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,blue,node,name,mock,transport,service,red,mock,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,red,node,name,red,mock,transport,service,add,send,behavior,blue,mock,transport,service,new,stubbable,transport,send,request,behavior,private,final,atomic,integer,count,new,atomic,integer,override,public,void,send,request,transport,connection,connection,long,request,id,string,action,transport,request,request,transport,request,options,options,throws,ioexception,logger,info,sending,request,on,action,connection,get,node,if,peer,recovery,source,service,actions,equals,action,count,increment,and,get,1,try,await,busy,client,blue,node,name,admin,cluster,prepare,state,set,local,true,get,get,state,get,routing,table,index,test,shard,0,get,all,initializing,shards,is,empty,false,catch,interrupted,exception,e,throw,new,runtime,exception,e,connection,send,request,request,id,action,request,options,try,thread,sleep,disconnect,after,delay,millis,catch,interrupted,exception,e,throw,new,runtime,exception,e,throw,new,connect,transport,exception,connection,get,node,disconnect,simulation,disconnect,after,successfully,sending,action,request,else,connection,send,request,request,id,action,request,options,final,atomic,boolean,finalized,new,atomic,boolean,blue,mock,transport,service,add,send,behavior,red,mock,transport,service,connection,request,id,action,request,options,logger,info,sending,request,on,action,connection,get,node,if,action,equals,peer,recovery,target,service,actions,finalize,finalized,set,true,connection,send,request,request,id,action,request,options,for,mock,transport,service,mock,transport,service,arrays,as,list,red,mock,transport,service,blue,mock,transport,service,mock,transport,service,add,send,behavior,master,transport,service,connection,request,id,action,request,options,logger,info,sending,request,on,action,connection,get,node,if,primary,relocation,finalized,get,false,assert,not,equals,action,shard,state,action,connection,send,request,request,id,action,request,options,if,primary,relocation,logger,info,starting,primary,relocation,recovery,from,blue,to,red,client,admin,indices,prepare,update,settings,index,name,set,settings,settings,builder,put,index,meta,data,get,key,color,red,get,ensure,green,client,admin,indices,prepare,refresh,index,name,get,else,logger,info,starting,replica,recovery,from,blue,to,red,client,admin,indices,prepare,update,settings,index,name,set,settings,settings,builder,put,index,meta,data,get,key,color,red,blue,put,index,meta,data,1,get,ensure,green,for,int,i,0,i,10,i,assert,hit,count,client,prepare,search,index,name,get,num,docs
IndexRecoveryIT -> @TestLogging("_root:DEBUG,org.elasticsearch.indices.recovery:TRACE")     public void testDisconnectsDuringRecovery() throws Exception;1535723122;Tests scenario where recovery target successfully sends recovery request to source but then the channel gets closed while_the source is working on the recovery process.;@TestLogging("_root:DEBUG,org.elasticsearch.indices.recovery:TRACE")_    public void testDisconnectsDuringRecovery() throws Exception {_        boolean primaryRelocation = randomBoolean()__        final String indexName = "test"__        final Settings nodeSettings = Settings.builder()_            .put(RecoverySettings.INDICES_RECOVERY_RETRY_DELAY_NETWORK_SETTING.getKey(), TimeValue.timeValueMillis(randomIntBetween(0, 100)))_            .build()__        TimeValue disconnectAfterDelay = TimeValue.timeValueMillis(randomIntBetween(0, 100))__        _        String masterNodeName = internalCluster().startMasterOnlyNode(nodeSettings)___        final String blueNodeName = internalCluster().startNode(Settings.builder().put("node.attr.color", "blue").put(nodeSettings).build())__        final String redNodeName = internalCluster().startNode(Settings.builder().put("node.attr.color", "red").put(nodeSettings).build())___        client().admin().indices().prepareCreate(indexName)_            .setSettings(_                Settings.builder()_                    .put(IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING.getKey() + "color", "blue")_                    .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_                    .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)_            ).get()___        List<IndexRequestBuilder> requests = new ArrayList<>()__        int numDocs = scaledRandomIntBetween(25, 250)__        for (int i = 0_ i < numDocs_ i++) {_            requests.add(client().prepareIndex(indexName, "type").setSource("{}", XContentType.JSON))__        }_        indexRandom(true, requests)__        ensureSearchable(indexName)__        assertHitCount(client().prepareSearch(indexName).get(), numDocs)___        MockTransportService masterTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class, masterNodeName)__        MockTransportService blueMockTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class, blueNodeName)__        MockTransportService redMockTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class, redNodeName)___        redMockTransportService.addSendBehavior(blueMockTransportService, new StubbableTransport.SendRequestBehavior() {_            private final AtomicInteger count = new AtomicInteger()___            @Override_            public void sendRequest(Transport.Connection connection, long requestId, String action, TransportRequest request,_                                    TransportRequestOptions options) throws IOException {_                logger.info("--> sending request {} on {}", action, connection.getNode())__                if (PeerRecoverySourceService.Actions.START_RECOVERY.equals(action) && count.incrementAndGet() == 1) {_                    _                    try {_                        awaitBusy(() -> client(blueNodeName).admin().cluster().prepareState().setLocal(true).get()_                            .getState().getRoutingTable().index("test").shard(0).getAllInitializingShards().isEmpty() == false)__                    } catch (InterruptedException e) {_                        throw new RuntimeException(e)__                    }_                    connection.sendRequest(requestId, action, request, options)__                    try {_                        Thread.sleep(disconnectAfterDelay.millis())__                    } catch (InterruptedException e) {_                        throw new RuntimeException(e)__                    }_                    throw new ConnectTransportException(connection.getNode(), "DISCONNECT: simulation disconnect after successfully sending " + action + " request")__                } else {_                    connection.sendRequest(requestId, action, request, options)__                }_            }_        })___        final AtomicBoolean finalized = new AtomicBoolean()__        blueMockTransportService.addSendBehavior(redMockTransportService, (connection, requestId, action, request, options) -> {_            logger.info("--> sending request {} on {}", action, connection.getNode())__            if (action.equals(PeerRecoveryTargetService.Actions.FINALIZE)) {_                finalized.set(true)__            }_            connection.sendRequest(requestId, action, request, options)__        })___        for (MockTransportService mockTransportService : Arrays.asList(redMockTransportService, blueMockTransportService)) {_            mockTransportService.addSendBehavior(masterTransportService, (connection, requestId, action, request, options) -> {_                logger.info("--> sending request {} on {}", action, connection.getNode())__                if ((primaryRelocation && finalized.get()) == false) {_                    assertNotEquals(action, ShardStateAction.SHARD_FAILED_ACTION_NAME)__                }_                connection.sendRequest(requestId, action, request, options)__            })__        }__        if (primaryRelocation) {_            logger.info("--> starting primary relocation recovery from blue to red")__            client().admin().indices().prepareUpdateSettings(indexName).setSettings(_                Settings.builder()_                    .put(IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING.getKey() + "color", "red")_            ).get()___            ensureGreen()_ _            _            _            _            _            _            client().admin().indices().prepareRefresh(indexName).get()__        } else {_            logger.info("--> starting replica recovery from blue to red")__            client().admin().indices().prepareUpdateSettings(indexName).setSettings(_                Settings.builder()_                    .put(IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING.getKey() + "color", "red,blue")_                    .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 1)_            ).get()___            ensureGreen()__        }__        for (int i = 0_ i < 10_ i++) {_            assertHitCount(client().prepareSearch(indexName).get(), numDocs)__        }_    };tests,scenario,where,recovery,target,successfully,sends,recovery,request,to,source,but,then,the,channel,gets,closed,while,the,source,is,working,on,the,recovery,process;test,logging,debug,org,elasticsearch,indices,recovery,trace,public,void,test,disconnects,during,recovery,throws,exception,boolean,primary,relocation,random,boolean,final,string,index,name,test,final,settings,node,settings,settings,builder,put,recovery,settings,get,key,time,value,time,value,millis,random,int,between,0,100,build,time,value,disconnect,after,delay,time,value,time,value,millis,random,int,between,0,100,string,master,node,name,internal,cluster,start,master,only,node,node,settings,final,string,blue,node,name,internal,cluster,start,node,settings,builder,put,node,attr,color,blue,put,node,settings,build,final,string,red,node,name,internal,cluster,start,node,settings,builder,put,node,attr,color,red,put,node,settings,build,client,admin,indices,prepare,create,index,name,set,settings,settings,builder,put,index,meta,data,get,key,color,blue,put,index,meta,data,1,put,index,meta,data,0,get,list,index,request,builder,requests,new,array,list,int,num,docs,scaled,random,int,between,25,250,for,int,i,0,i,num,docs,i,requests,add,client,prepare,index,index,name,type,set,source,xcontent,type,json,index,random,true,requests,ensure,searchable,index,name,assert,hit,count,client,prepare,search,index,name,get,num,docs,mock,transport,service,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,master,node,name,mock,transport,service,blue,mock,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,blue,node,name,mock,transport,service,red,mock,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,red,node,name,red,mock,transport,service,add,send,behavior,blue,mock,transport,service,new,stubbable,transport,send,request,behavior,private,final,atomic,integer,count,new,atomic,integer,override,public,void,send,request,transport,connection,connection,long,request,id,string,action,transport,request,request,transport,request,options,options,throws,ioexception,logger,info,sending,request,on,action,connection,get,node,if,peer,recovery,source,service,actions,equals,action,count,increment,and,get,1,try,await,busy,client,blue,node,name,admin,cluster,prepare,state,set,local,true,get,get,state,get,routing,table,index,test,shard,0,get,all,initializing,shards,is,empty,false,catch,interrupted,exception,e,throw,new,runtime,exception,e,connection,send,request,request,id,action,request,options,try,thread,sleep,disconnect,after,delay,millis,catch,interrupted,exception,e,throw,new,runtime,exception,e,throw,new,connect,transport,exception,connection,get,node,disconnect,simulation,disconnect,after,successfully,sending,action,request,else,connection,send,request,request,id,action,request,options,final,atomic,boolean,finalized,new,atomic,boolean,blue,mock,transport,service,add,send,behavior,red,mock,transport,service,connection,request,id,action,request,options,logger,info,sending,request,on,action,connection,get,node,if,action,equals,peer,recovery,target,service,actions,finalize,finalized,set,true,connection,send,request,request,id,action,request,options,for,mock,transport,service,mock,transport,service,arrays,as,list,red,mock,transport,service,blue,mock,transport,service,mock,transport,service,add,send,behavior,master,transport,service,connection,request,id,action,request,options,logger,info,sending,request,on,action,connection,get,node,if,primary,relocation,finalized,get,false,assert,not,equals,action,shard,state,action,connection,send,request,request,id,action,request,options,if,primary,relocation,logger,info,starting,primary,relocation,recovery,from,blue,to,red,client,admin,indices,prepare,update,settings,index,name,set,settings,settings,builder,put,index,meta,data,get,key,color,red,get,ensure,green,client,admin,indices,prepare,refresh,index,name,get,else,logger,info,starting,replica,recovery,from,blue,to,red,client,admin,indices,prepare,update,settings,index,name,set,settings,settings,builder,put,index,meta,data,get,key,color,red,blue,put,index,meta,data,1,get,ensure,green,for,int,i,0,i,10,i,assert,hit,count,client,prepare,search,index,name,get,num,docs
IndexRecoveryIT -> @TestLogging("_root:DEBUG,org.elasticsearch.indices.recovery:TRACE")     public void testDisconnectsDuringRecovery() throws Exception;1536177418;Tests scenario where recovery target successfully sends recovery request to source but then the channel gets closed while_the source is working on the recovery process.;@TestLogging("_root:DEBUG,org.elasticsearch.indices.recovery:TRACE")_    public void testDisconnectsDuringRecovery() throws Exception {_        boolean primaryRelocation = randomBoolean()__        final String indexName = "test"__        final Settings nodeSettings = Settings.builder()_            .put(RecoverySettings.INDICES_RECOVERY_RETRY_DELAY_NETWORK_SETTING.getKey(), TimeValue.timeValueMillis(randomIntBetween(0, 100)))_            .build()__        TimeValue disconnectAfterDelay = TimeValue.timeValueMillis(randomIntBetween(0, 100))__        _        String masterNodeName = internalCluster().startMasterOnlyNode(nodeSettings)___        final String blueNodeName = internalCluster().startNode(Settings.builder().put("node.attr.color", "blue").put(nodeSettings).build())__        final String redNodeName = internalCluster().startNode(Settings.builder().put("node.attr.color", "red").put(nodeSettings).build())___        client().admin().indices().prepareCreate(indexName)_            .setSettings(_                Settings.builder()_                    .put(IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING.getKey() + "color", "blue")_                    .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_                    .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)_            ).get()___        List<IndexRequestBuilder> requests = new ArrayList<>()__        int numDocs = scaledRandomIntBetween(25, 250)__        for (int i = 0_ i < numDocs_ i++) {_            requests.add(client().prepareIndex(indexName, "type").setSource("{}", XContentType.JSON))__        }_        indexRandom(true, requests)__        ensureSearchable(indexName)__        assertHitCount(client().prepareSearch(indexName).get(), numDocs)___        MockTransportService masterTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class, masterNodeName)__        MockTransportService blueMockTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class, blueNodeName)__        MockTransportService redMockTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class, redNodeName)___        redMockTransportService.addSendBehavior(blueMockTransportService, new StubbableTransport.SendRequestBehavior() {_            private final AtomicInteger count = new AtomicInteger()___            @Override_            public void sendRequest(Transport.Connection connection, long requestId, String action, TransportRequest request,_                                    TransportRequestOptions options) throws IOException {_                logger.info("--> sending request {} on {}", action, connection.getNode())__                if (PeerRecoverySourceService.Actions.START_RECOVERY.equals(action) && count.incrementAndGet() == 1) {_                    _                    try {_                        awaitBusy(() -> client(blueNodeName).admin().cluster().prepareState().setLocal(true).get()_                            .getState().getRoutingTable().index("test").shard(0).getAllInitializingShards().isEmpty() == false)__                    } catch (InterruptedException e) {_                        throw new RuntimeException(e)__                    }_                    connection.sendRequest(requestId, action, request, options)__                    try {_                        Thread.sleep(disconnectAfterDelay.millis())__                    } catch (InterruptedException e) {_                        throw new RuntimeException(e)__                    }_                    throw new ConnectTransportException(connection.getNode(), "DISCONNECT: simulation disconnect after successfully sending " + action + " request")__                } else {_                    connection.sendRequest(requestId, action, request, options)__                }_            }_        })___        final AtomicBoolean finalized = new AtomicBoolean()__        blueMockTransportService.addSendBehavior(redMockTransportService, (connection, requestId, action, request, options) -> {_            logger.info("--> sending request {} on {}", action, connection.getNode())__            if (action.equals(PeerRecoveryTargetService.Actions.FINALIZE)) {_                finalized.set(true)__            }_            connection.sendRequest(requestId, action, request, options)__        })___        for (MockTransportService mockTransportService : Arrays.asList(redMockTransportService, blueMockTransportService)) {_            mockTransportService.addSendBehavior(masterTransportService, (connection, requestId, action, request, options) -> {_                logger.info("--> sending request {} on {}", action, connection.getNode())__                if ((primaryRelocation && finalized.get()) == false) {_                    assertNotEquals(action, ShardStateAction.SHARD_FAILED_ACTION_NAME)__                }_                connection.sendRequest(requestId, action, request, options)__            })__        }__        if (primaryRelocation) {_            logger.info("--> starting primary relocation recovery from blue to red")__            client().admin().indices().prepareUpdateSettings(indexName).setSettings(_                Settings.builder()_                    .put(IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING.getKey() + "color", "red")_            ).get()___            ensureGreen()_ _            _            _            _            _            _            client().admin().indices().prepareRefresh(indexName).get()__        } else {_            logger.info("--> starting replica recovery from blue to red")__            client().admin().indices().prepareUpdateSettings(indexName).setSettings(_                Settings.builder()_                    .put(IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING.getKey() + "color", "red,blue")_                    .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 1)_            ).get()___            ensureGreen()__        }__        for (int i = 0_ i < 10_ i++) {_            assertHitCount(client().prepareSearch(indexName).get(), numDocs)__        }_    };tests,scenario,where,recovery,target,successfully,sends,recovery,request,to,source,but,then,the,channel,gets,closed,while,the,source,is,working,on,the,recovery,process;test,logging,debug,org,elasticsearch,indices,recovery,trace,public,void,test,disconnects,during,recovery,throws,exception,boolean,primary,relocation,random,boolean,final,string,index,name,test,final,settings,node,settings,settings,builder,put,recovery,settings,get,key,time,value,time,value,millis,random,int,between,0,100,build,time,value,disconnect,after,delay,time,value,time,value,millis,random,int,between,0,100,string,master,node,name,internal,cluster,start,master,only,node,node,settings,final,string,blue,node,name,internal,cluster,start,node,settings,builder,put,node,attr,color,blue,put,node,settings,build,final,string,red,node,name,internal,cluster,start,node,settings,builder,put,node,attr,color,red,put,node,settings,build,client,admin,indices,prepare,create,index,name,set,settings,settings,builder,put,index,meta,data,get,key,color,blue,put,index,meta,data,1,put,index,meta,data,0,get,list,index,request,builder,requests,new,array,list,int,num,docs,scaled,random,int,between,25,250,for,int,i,0,i,num,docs,i,requests,add,client,prepare,index,index,name,type,set,source,xcontent,type,json,index,random,true,requests,ensure,searchable,index,name,assert,hit,count,client,prepare,search,index,name,get,num,docs,mock,transport,service,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,master,node,name,mock,transport,service,blue,mock,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,blue,node,name,mock,transport,service,red,mock,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,red,node,name,red,mock,transport,service,add,send,behavior,blue,mock,transport,service,new,stubbable,transport,send,request,behavior,private,final,atomic,integer,count,new,atomic,integer,override,public,void,send,request,transport,connection,connection,long,request,id,string,action,transport,request,request,transport,request,options,options,throws,ioexception,logger,info,sending,request,on,action,connection,get,node,if,peer,recovery,source,service,actions,equals,action,count,increment,and,get,1,try,await,busy,client,blue,node,name,admin,cluster,prepare,state,set,local,true,get,get,state,get,routing,table,index,test,shard,0,get,all,initializing,shards,is,empty,false,catch,interrupted,exception,e,throw,new,runtime,exception,e,connection,send,request,request,id,action,request,options,try,thread,sleep,disconnect,after,delay,millis,catch,interrupted,exception,e,throw,new,runtime,exception,e,throw,new,connect,transport,exception,connection,get,node,disconnect,simulation,disconnect,after,successfully,sending,action,request,else,connection,send,request,request,id,action,request,options,final,atomic,boolean,finalized,new,atomic,boolean,blue,mock,transport,service,add,send,behavior,red,mock,transport,service,connection,request,id,action,request,options,logger,info,sending,request,on,action,connection,get,node,if,action,equals,peer,recovery,target,service,actions,finalize,finalized,set,true,connection,send,request,request,id,action,request,options,for,mock,transport,service,mock,transport,service,arrays,as,list,red,mock,transport,service,blue,mock,transport,service,mock,transport,service,add,send,behavior,master,transport,service,connection,request,id,action,request,options,logger,info,sending,request,on,action,connection,get,node,if,primary,relocation,finalized,get,false,assert,not,equals,action,shard,state,action,connection,send,request,request,id,action,request,options,if,primary,relocation,logger,info,starting,primary,relocation,recovery,from,blue,to,red,client,admin,indices,prepare,update,settings,index,name,set,settings,settings,builder,put,index,meta,data,get,key,color,red,get,ensure,green,client,admin,indices,prepare,refresh,index,name,get,else,logger,info,starting,replica,recovery,from,blue,to,red,client,admin,indices,prepare,update,settings,index,name,set,settings,settings,builder,put,index,meta,data,get,key,color,red,blue,put,index,meta,data,1,get,ensure,green,for,int,i,0,i,10,i,assert,hit,count,client,prepare,search,index,name,get,num,docs
IndexRecoveryIT -> @TestLogging("_root:DEBUG,org.elasticsearch.indices.recovery:TRACE")     public void testDisconnectsDuringRecovery() throws Exception;1536611444;Tests scenario where recovery target successfully sends recovery request to source but then the channel gets closed while_the source is working on the recovery process.;@TestLogging("_root:DEBUG,org.elasticsearch.indices.recovery:TRACE")_    public void testDisconnectsDuringRecovery() throws Exception {_        boolean primaryRelocation = randomBoolean()__        final String indexName = "test"__        final Settings nodeSettings = Settings.builder()_            .put(RecoverySettings.INDICES_RECOVERY_RETRY_DELAY_NETWORK_SETTING.getKey(), TimeValue.timeValueMillis(randomIntBetween(0, 100)))_            .build()__        TimeValue disconnectAfterDelay = TimeValue.timeValueMillis(randomIntBetween(0, 100))__        _        String masterNodeName = internalCluster().startMasterOnlyNode(nodeSettings)___        final String blueNodeName = internalCluster().startNode(Settings.builder().put("node.attr.color", "blue").put(nodeSettings).build())__        final String redNodeName = internalCluster().startNode(Settings.builder().put("node.attr.color", "red").put(nodeSettings).build())___        client().admin().indices().prepareCreate(indexName)_            .setSettings(_                Settings.builder()_                    .put(IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING.getKey() + "color", "blue")_                    .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_                    .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)_            ).get()___        List<IndexRequestBuilder> requests = new ArrayList<>()__        int numDocs = scaledRandomIntBetween(25, 250)__        for (int i = 0_ i < numDocs_ i++) {_            requests.add(client().prepareIndex(indexName, "type").setSource("{}", XContentType.JSON))__        }_        indexRandom(true, requests)__        ensureSearchable(indexName)__        assertHitCount(client().prepareSearch(indexName).get(), numDocs)___        MockTransportService masterTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class, masterNodeName)__        MockTransportService blueMockTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class, blueNodeName)__        MockTransportService redMockTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class, redNodeName)___        redMockTransportService.addSendBehavior(blueMockTransportService, new StubbableTransport.SendRequestBehavior() {_            private final AtomicInteger count = new AtomicInteger()___            @Override_            public void sendRequest(Transport.Connection connection, long requestId, String action, TransportRequest request,_                                    TransportRequestOptions options) throws IOException {_                logger.info("--> sending request {} on {}", action, connection.getNode())__                if (PeerRecoverySourceService.Actions.START_RECOVERY.equals(action) && count.incrementAndGet() == 1) {_                    _                    try {_                        awaitBusy(() -> client(blueNodeName).admin().cluster().prepareState().setLocal(true).get()_                            .getState().getRoutingTable().index("test").shard(0).getAllInitializingShards().isEmpty() == false)__                    } catch (InterruptedException e) {_                        throw new RuntimeException(e)__                    }_                    connection.sendRequest(requestId, action, request, options)__                    try {_                        Thread.sleep(disconnectAfterDelay.millis())__                    } catch (InterruptedException e) {_                        throw new RuntimeException(e)__                    }_                    throw new ConnectTransportException(connection.getNode(), "DISCONNECT: simulation disconnect after successfully sending " + action + " request")__                } else {_                    connection.sendRequest(requestId, action, request, options)__                }_            }_        })___        final AtomicBoolean finalized = new AtomicBoolean()__        blueMockTransportService.addSendBehavior(redMockTransportService, (connection, requestId, action, request, options) -> {_            logger.info("--> sending request {} on {}", action, connection.getNode())__            if (action.equals(PeerRecoveryTargetService.Actions.FINALIZE)) {_                finalized.set(true)__            }_            connection.sendRequest(requestId, action, request, options)__        })___        for (MockTransportService mockTransportService : Arrays.asList(redMockTransportService, blueMockTransportService)) {_            mockTransportService.addSendBehavior(masterTransportService, (connection, requestId, action, request, options) -> {_                logger.info("--> sending request {} on {}", action, connection.getNode())__                if ((primaryRelocation && finalized.get()) == false) {_                    assertNotEquals(action, ShardStateAction.SHARD_FAILED_ACTION_NAME)__                }_                connection.sendRequest(requestId, action, request, options)__            })__        }__        if (primaryRelocation) {_            logger.info("--> starting primary relocation recovery from blue to red")__            client().admin().indices().prepareUpdateSettings(indexName).setSettings(_                Settings.builder()_                    .put(IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING.getKey() + "color", "red")_            ).get()___            ensureGreen()_ _            _            _            _            _            _            client().admin().indices().prepareRefresh(indexName).get()__        } else {_            logger.info("--> starting replica recovery from blue to red")__            client().admin().indices().prepareUpdateSettings(indexName).setSettings(_                Settings.builder()_                    .put(IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING.getKey() + "color", "red,blue")_                    .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 1)_            ).get()___            ensureGreen()__        }__        for (int i = 0_ i < 10_ i++) {_            assertHitCount(client().prepareSearch(indexName).get(), numDocs)__        }_    };tests,scenario,where,recovery,target,successfully,sends,recovery,request,to,source,but,then,the,channel,gets,closed,while,the,source,is,working,on,the,recovery,process;test,logging,debug,org,elasticsearch,indices,recovery,trace,public,void,test,disconnects,during,recovery,throws,exception,boolean,primary,relocation,random,boolean,final,string,index,name,test,final,settings,node,settings,settings,builder,put,recovery,settings,get,key,time,value,time,value,millis,random,int,between,0,100,build,time,value,disconnect,after,delay,time,value,time,value,millis,random,int,between,0,100,string,master,node,name,internal,cluster,start,master,only,node,node,settings,final,string,blue,node,name,internal,cluster,start,node,settings,builder,put,node,attr,color,blue,put,node,settings,build,final,string,red,node,name,internal,cluster,start,node,settings,builder,put,node,attr,color,red,put,node,settings,build,client,admin,indices,prepare,create,index,name,set,settings,settings,builder,put,index,meta,data,get,key,color,blue,put,index,meta,data,1,put,index,meta,data,0,get,list,index,request,builder,requests,new,array,list,int,num,docs,scaled,random,int,between,25,250,for,int,i,0,i,num,docs,i,requests,add,client,prepare,index,index,name,type,set,source,xcontent,type,json,index,random,true,requests,ensure,searchable,index,name,assert,hit,count,client,prepare,search,index,name,get,num,docs,mock,transport,service,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,master,node,name,mock,transport,service,blue,mock,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,blue,node,name,mock,transport,service,red,mock,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,red,node,name,red,mock,transport,service,add,send,behavior,blue,mock,transport,service,new,stubbable,transport,send,request,behavior,private,final,atomic,integer,count,new,atomic,integer,override,public,void,send,request,transport,connection,connection,long,request,id,string,action,transport,request,request,transport,request,options,options,throws,ioexception,logger,info,sending,request,on,action,connection,get,node,if,peer,recovery,source,service,actions,equals,action,count,increment,and,get,1,try,await,busy,client,blue,node,name,admin,cluster,prepare,state,set,local,true,get,get,state,get,routing,table,index,test,shard,0,get,all,initializing,shards,is,empty,false,catch,interrupted,exception,e,throw,new,runtime,exception,e,connection,send,request,request,id,action,request,options,try,thread,sleep,disconnect,after,delay,millis,catch,interrupted,exception,e,throw,new,runtime,exception,e,throw,new,connect,transport,exception,connection,get,node,disconnect,simulation,disconnect,after,successfully,sending,action,request,else,connection,send,request,request,id,action,request,options,final,atomic,boolean,finalized,new,atomic,boolean,blue,mock,transport,service,add,send,behavior,red,mock,transport,service,connection,request,id,action,request,options,logger,info,sending,request,on,action,connection,get,node,if,action,equals,peer,recovery,target,service,actions,finalize,finalized,set,true,connection,send,request,request,id,action,request,options,for,mock,transport,service,mock,transport,service,arrays,as,list,red,mock,transport,service,blue,mock,transport,service,mock,transport,service,add,send,behavior,master,transport,service,connection,request,id,action,request,options,logger,info,sending,request,on,action,connection,get,node,if,primary,relocation,finalized,get,false,assert,not,equals,action,shard,state,action,connection,send,request,request,id,action,request,options,if,primary,relocation,logger,info,starting,primary,relocation,recovery,from,blue,to,red,client,admin,indices,prepare,update,settings,index,name,set,settings,settings,builder,put,index,meta,data,get,key,color,red,get,ensure,green,client,admin,indices,prepare,refresh,index,name,get,else,logger,info,starting,replica,recovery,from,blue,to,red,client,admin,indices,prepare,update,settings,index,name,set,settings,settings,builder,put,index,meta,data,get,key,color,red,blue,put,index,meta,data,1,get,ensure,green,for,int,i,0,i,10,i,assert,hit,count,client,prepare,search,index,name,get,num,docs
IndexRecoveryIT -> @TestLogging("_root:DEBUG,org.elasticsearch.indices.recovery:TRACE")     public void testDisconnectsDuringRecovery() throws Exception;1538067637;Tests scenario where recovery target successfully sends recovery request to source but then the channel gets closed while_the source is working on the recovery process.;@TestLogging("_root:DEBUG,org.elasticsearch.indices.recovery:TRACE")_    public void testDisconnectsDuringRecovery() throws Exception {_        boolean primaryRelocation = randomBoolean()__        final String indexName = "test"__        final Settings nodeSettings = Settings.builder()_            .put(RecoverySettings.INDICES_RECOVERY_RETRY_DELAY_NETWORK_SETTING.getKey(), TimeValue.timeValueMillis(randomIntBetween(0, 100)))_            .build()__        TimeValue disconnectAfterDelay = TimeValue.timeValueMillis(randomIntBetween(0, 100))__        _        String masterNodeName = internalCluster().startMasterOnlyNode(nodeSettings)___        final String blueNodeName = internalCluster().startNode(Settings.builder().put("node.attr.color", "blue").put(nodeSettings).build())__        final String redNodeName = internalCluster().startNode(Settings.builder().put("node.attr.color", "red").put(nodeSettings).build())___        client().admin().indices().prepareCreate(indexName)_            .setSettings(_                Settings.builder()_                    .put(IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING.getKey() + "color", "blue")_                    .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_                    .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)_            ).get()___        List<IndexRequestBuilder> requests = new ArrayList<>()__        int numDocs = scaledRandomIntBetween(25, 250)__        for (int i = 0_ i < numDocs_ i++) {_            requests.add(client().prepareIndex(indexName, "type").setSource("{}", XContentType.JSON))__        }_        indexRandom(true, requests)__        ensureSearchable(indexName)__        assertHitCount(client().prepareSearch(indexName).get(), numDocs)___        MockTransportService masterTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class, masterNodeName)__        MockTransportService blueMockTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class, blueNodeName)__        MockTransportService redMockTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class, redNodeName)___        redMockTransportService.addSendBehavior(blueMockTransportService, new StubbableTransport.SendRequestBehavior() {_            private final AtomicInteger count = new AtomicInteger()___            @Override_            public void sendRequest(Transport.Connection connection, long requestId, String action, TransportRequest request,_                                    TransportRequestOptions options) throws IOException {_                logger.info("--> sending request {} on {}", action, connection.getNode())__                if (PeerRecoverySourceService.Actions.START_RECOVERY.equals(action) && count.incrementAndGet() == 1) {_                    _                    try {_                        awaitBusy(() -> client(blueNodeName).admin().cluster().prepareState().setLocal(true).get()_                            .getState().getRoutingTable().index("test").shard(0).getAllInitializingShards().isEmpty() == false)__                    } catch (InterruptedException e) {_                        throw new RuntimeException(e)__                    }_                    connection.sendRequest(requestId, action, request, options)__                    try {_                        Thread.sleep(disconnectAfterDelay.millis())__                    } catch (InterruptedException e) {_                        throw new RuntimeException(e)__                    }_                    throw new ConnectTransportException(connection.getNode(), "DISCONNECT: simulation disconnect after successfully sending " + action + " request")__                } else {_                    connection.sendRequest(requestId, action, request, options)__                }_            }_        })___        final AtomicBoolean finalized = new AtomicBoolean()__        blueMockTransportService.addSendBehavior(redMockTransportService, (connection, requestId, action, request, options) -> {_            logger.info("--> sending request {} on {}", action, connection.getNode())__            if (action.equals(PeerRecoveryTargetService.Actions.FINALIZE)) {_                finalized.set(true)__            }_            connection.sendRequest(requestId, action, request, options)__        })___        for (MockTransportService mockTransportService : Arrays.asList(redMockTransportService, blueMockTransportService)) {_            mockTransportService.addSendBehavior(masterTransportService, (connection, requestId, action, request, options) -> {_                logger.info("--> sending request {} on {}", action, connection.getNode())__                if ((primaryRelocation && finalized.get()) == false) {_                    assertNotEquals(action, ShardStateAction.SHARD_FAILED_ACTION_NAME)__                }_                connection.sendRequest(requestId, action, request, options)__            })__        }__        if (primaryRelocation) {_            logger.info("--> starting primary relocation recovery from blue to red")__            client().admin().indices().prepareUpdateSettings(indexName).setSettings(_                Settings.builder()_                    .put(IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING.getKey() + "color", "red")_            ).get()___            ensureGreen()_ _            _            _            _            _            _            client().admin().indices().prepareRefresh(indexName).get()__        } else {_            logger.info("--> starting replica recovery from blue to red")__            client().admin().indices().prepareUpdateSettings(indexName).setSettings(_                Settings.builder()_                    .put(IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING.getKey() + "color", "red,blue")_                    .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 1)_            ).get()___            ensureGreen()__        }__        for (int i = 0_ i < 10_ i++) {_            assertHitCount(client().prepareSearch(indexName).get(), numDocs)__        }_    };tests,scenario,where,recovery,target,successfully,sends,recovery,request,to,source,but,then,the,channel,gets,closed,while,the,source,is,working,on,the,recovery,process;test,logging,debug,org,elasticsearch,indices,recovery,trace,public,void,test,disconnects,during,recovery,throws,exception,boolean,primary,relocation,random,boolean,final,string,index,name,test,final,settings,node,settings,settings,builder,put,recovery,settings,get,key,time,value,time,value,millis,random,int,between,0,100,build,time,value,disconnect,after,delay,time,value,time,value,millis,random,int,between,0,100,string,master,node,name,internal,cluster,start,master,only,node,node,settings,final,string,blue,node,name,internal,cluster,start,node,settings,builder,put,node,attr,color,blue,put,node,settings,build,final,string,red,node,name,internal,cluster,start,node,settings,builder,put,node,attr,color,red,put,node,settings,build,client,admin,indices,prepare,create,index,name,set,settings,settings,builder,put,index,meta,data,get,key,color,blue,put,index,meta,data,1,put,index,meta,data,0,get,list,index,request,builder,requests,new,array,list,int,num,docs,scaled,random,int,between,25,250,for,int,i,0,i,num,docs,i,requests,add,client,prepare,index,index,name,type,set,source,xcontent,type,json,index,random,true,requests,ensure,searchable,index,name,assert,hit,count,client,prepare,search,index,name,get,num,docs,mock,transport,service,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,master,node,name,mock,transport,service,blue,mock,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,blue,node,name,mock,transport,service,red,mock,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,red,node,name,red,mock,transport,service,add,send,behavior,blue,mock,transport,service,new,stubbable,transport,send,request,behavior,private,final,atomic,integer,count,new,atomic,integer,override,public,void,send,request,transport,connection,connection,long,request,id,string,action,transport,request,request,transport,request,options,options,throws,ioexception,logger,info,sending,request,on,action,connection,get,node,if,peer,recovery,source,service,actions,equals,action,count,increment,and,get,1,try,await,busy,client,blue,node,name,admin,cluster,prepare,state,set,local,true,get,get,state,get,routing,table,index,test,shard,0,get,all,initializing,shards,is,empty,false,catch,interrupted,exception,e,throw,new,runtime,exception,e,connection,send,request,request,id,action,request,options,try,thread,sleep,disconnect,after,delay,millis,catch,interrupted,exception,e,throw,new,runtime,exception,e,throw,new,connect,transport,exception,connection,get,node,disconnect,simulation,disconnect,after,successfully,sending,action,request,else,connection,send,request,request,id,action,request,options,final,atomic,boolean,finalized,new,atomic,boolean,blue,mock,transport,service,add,send,behavior,red,mock,transport,service,connection,request,id,action,request,options,logger,info,sending,request,on,action,connection,get,node,if,action,equals,peer,recovery,target,service,actions,finalize,finalized,set,true,connection,send,request,request,id,action,request,options,for,mock,transport,service,mock,transport,service,arrays,as,list,red,mock,transport,service,blue,mock,transport,service,mock,transport,service,add,send,behavior,master,transport,service,connection,request,id,action,request,options,logger,info,sending,request,on,action,connection,get,node,if,primary,relocation,finalized,get,false,assert,not,equals,action,shard,state,action,connection,send,request,request,id,action,request,options,if,primary,relocation,logger,info,starting,primary,relocation,recovery,from,blue,to,red,client,admin,indices,prepare,update,settings,index,name,set,settings,settings,builder,put,index,meta,data,get,key,color,red,get,ensure,green,client,admin,indices,prepare,refresh,index,name,get,else,logger,info,starting,replica,recovery,from,blue,to,red,client,admin,indices,prepare,update,settings,index,name,set,settings,settings,builder,put,index,meta,data,get,key,color,red,blue,put,index,meta,data,1,get,ensure,green,for,int,i,0,i,10,i,assert,hit,count,client,prepare,search,index,name,get,num,docs
IndexRecoveryIT -> @TestLogging("_root:DEBUG,org.elasticsearch.indices.recovery:TRACE")     public void testDisconnectsDuringRecovery() throws Exception;1538170812;Tests scenario where recovery target successfully sends recovery request to source but then the channel gets closed while_the source is working on the recovery process.;@TestLogging("_root:DEBUG,org.elasticsearch.indices.recovery:TRACE")_    public void testDisconnectsDuringRecovery() throws Exception {_        boolean primaryRelocation = randomBoolean()__        final String indexName = "test"__        final Settings nodeSettings = Settings.builder()_            .put(RecoverySettings.INDICES_RECOVERY_RETRY_DELAY_NETWORK_SETTING.getKey(), TimeValue.timeValueMillis(randomIntBetween(0, 100)))_            .build()__        TimeValue disconnectAfterDelay = TimeValue.timeValueMillis(randomIntBetween(0, 100))__        _        String masterNodeName = internalCluster().startMasterOnlyNode(nodeSettings)___        final String blueNodeName = internalCluster().startNode(Settings.builder().put("node.attr.color", "blue").put(nodeSettings).build())__        final String redNodeName = internalCluster().startNode(Settings.builder().put("node.attr.color", "red").put(nodeSettings).build())___        client().admin().indices().prepareCreate(indexName)_            .setSettings(_                Settings.builder()_                    .put(IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING.getKey() + "color", "blue")_                    .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_                    .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)_            ).get()___        List<IndexRequestBuilder> requests = new ArrayList<>()__        int numDocs = scaledRandomIntBetween(25, 250)__        for (int i = 0_ i < numDocs_ i++) {_            requests.add(client().prepareIndex(indexName, "type").setSource("{}", XContentType.JSON))__        }_        indexRandom(true, requests)__        ensureSearchable(indexName)__        assertHitCount(client().prepareSearch(indexName).get(), numDocs)___        MockTransportService masterTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class, masterNodeName)__        MockTransportService blueMockTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class, blueNodeName)__        MockTransportService redMockTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class, redNodeName)___        redMockTransportService.addSendBehavior(blueMockTransportService, new StubbableTransport.SendRequestBehavior() {_            private final AtomicInteger count = new AtomicInteger()___            @Override_            public void sendRequest(Transport.Connection connection, long requestId, String action, TransportRequest request,_                                    TransportRequestOptions options) throws IOException {_                logger.info("--> sending request {} on {}", action, connection.getNode())__                if (PeerRecoverySourceService.Actions.START_RECOVERY.equals(action) && count.incrementAndGet() == 1) {_                    _                    try {_                        awaitBusy(() -> client(blueNodeName).admin().cluster().prepareState().setLocal(true).get()_                            .getState().getRoutingTable().index("test").shard(0).getAllInitializingShards().isEmpty() == false)__                    } catch (InterruptedException e) {_                        throw new RuntimeException(e)__                    }_                    connection.sendRequest(requestId, action, request, options)__                    try {_                        Thread.sleep(disconnectAfterDelay.millis())__                    } catch (InterruptedException e) {_                        throw new RuntimeException(e)__                    }_                    throw new ConnectTransportException(connection.getNode(), "DISCONNECT: simulation disconnect after successfully sending " + action + " request")__                } else {_                    connection.sendRequest(requestId, action, request, options)__                }_            }_        })___        final AtomicBoolean finalized = new AtomicBoolean()__        blueMockTransportService.addSendBehavior(redMockTransportService, (connection, requestId, action, request, options) -> {_            logger.info("--> sending request {} on {}", action, connection.getNode())__            if (action.equals(PeerRecoveryTargetService.Actions.FINALIZE)) {_                finalized.set(true)__            }_            connection.sendRequest(requestId, action, request, options)__        })___        for (MockTransportService mockTransportService : Arrays.asList(redMockTransportService, blueMockTransportService)) {_            mockTransportService.addSendBehavior(masterTransportService, (connection, requestId, action, request, options) -> {_                logger.info("--> sending request {} on {}", action, connection.getNode())__                if ((primaryRelocation && finalized.get()) == false) {_                    assertNotEquals(action, ShardStateAction.SHARD_FAILED_ACTION_NAME)__                }_                connection.sendRequest(requestId, action, request, options)__            })__        }__        if (primaryRelocation) {_            logger.info("--> starting primary relocation recovery from blue to red")__            client().admin().indices().prepareUpdateSettings(indexName).setSettings(_                Settings.builder()_                    .put(IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING.getKey() + "color", "red")_            ).get()___            ensureGreen()_ _            _            _            _            _            _            client().admin().indices().prepareRefresh(indexName).get()__        } else {_            logger.info("--> starting replica recovery from blue to red")__            client().admin().indices().prepareUpdateSettings(indexName).setSettings(_                Settings.builder()_                    .put(IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING.getKey() + "color", "red,blue")_                    .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 1)_            ).get()___            ensureGreen()__        }__        for (int i = 0_ i < 10_ i++) {_            assertHitCount(client().prepareSearch(indexName).get(), numDocs)__        }_    };tests,scenario,where,recovery,target,successfully,sends,recovery,request,to,source,but,then,the,channel,gets,closed,while,the,source,is,working,on,the,recovery,process;test,logging,debug,org,elasticsearch,indices,recovery,trace,public,void,test,disconnects,during,recovery,throws,exception,boolean,primary,relocation,random,boolean,final,string,index,name,test,final,settings,node,settings,settings,builder,put,recovery,settings,get,key,time,value,time,value,millis,random,int,between,0,100,build,time,value,disconnect,after,delay,time,value,time,value,millis,random,int,between,0,100,string,master,node,name,internal,cluster,start,master,only,node,node,settings,final,string,blue,node,name,internal,cluster,start,node,settings,builder,put,node,attr,color,blue,put,node,settings,build,final,string,red,node,name,internal,cluster,start,node,settings,builder,put,node,attr,color,red,put,node,settings,build,client,admin,indices,prepare,create,index,name,set,settings,settings,builder,put,index,meta,data,get,key,color,blue,put,index,meta,data,1,put,index,meta,data,0,get,list,index,request,builder,requests,new,array,list,int,num,docs,scaled,random,int,between,25,250,for,int,i,0,i,num,docs,i,requests,add,client,prepare,index,index,name,type,set,source,xcontent,type,json,index,random,true,requests,ensure,searchable,index,name,assert,hit,count,client,prepare,search,index,name,get,num,docs,mock,transport,service,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,master,node,name,mock,transport,service,blue,mock,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,blue,node,name,mock,transport,service,red,mock,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,red,node,name,red,mock,transport,service,add,send,behavior,blue,mock,transport,service,new,stubbable,transport,send,request,behavior,private,final,atomic,integer,count,new,atomic,integer,override,public,void,send,request,transport,connection,connection,long,request,id,string,action,transport,request,request,transport,request,options,options,throws,ioexception,logger,info,sending,request,on,action,connection,get,node,if,peer,recovery,source,service,actions,equals,action,count,increment,and,get,1,try,await,busy,client,blue,node,name,admin,cluster,prepare,state,set,local,true,get,get,state,get,routing,table,index,test,shard,0,get,all,initializing,shards,is,empty,false,catch,interrupted,exception,e,throw,new,runtime,exception,e,connection,send,request,request,id,action,request,options,try,thread,sleep,disconnect,after,delay,millis,catch,interrupted,exception,e,throw,new,runtime,exception,e,throw,new,connect,transport,exception,connection,get,node,disconnect,simulation,disconnect,after,successfully,sending,action,request,else,connection,send,request,request,id,action,request,options,final,atomic,boolean,finalized,new,atomic,boolean,blue,mock,transport,service,add,send,behavior,red,mock,transport,service,connection,request,id,action,request,options,logger,info,sending,request,on,action,connection,get,node,if,action,equals,peer,recovery,target,service,actions,finalize,finalized,set,true,connection,send,request,request,id,action,request,options,for,mock,transport,service,mock,transport,service,arrays,as,list,red,mock,transport,service,blue,mock,transport,service,mock,transport,service,add,send,behavior,master,transport,service,connection,request,id,action,request,options,logger,info,sending,request,on,action,connection,get,node,if,primary,relocation,finalized,get,false,assert,not,equals,action,shard,state,action,connection,send,request,request,id,action,request,options,if,primary,relocation,logger,info,starting,primary,relocation,recovery,from,blue,to,red,client,admin,indices,prepare,update,settings,index,name,set,settings,settings,builder,put,index,meta,data,get,key,color,red,get,ensure,green,client,admin,indices,prepare,refresh,index,name,get,else,logger,info,starting,replica,recovery,from,blue,to,red,client,admin,indices,prepare,update,settings,index,name,set,settings,settings,builder,put,index,meta,data,get,key,color,red,blue,put,index,meta,data,1,get,ensure,green,for,int,i,0,i,10,i,assert,hit,count,client,prepare,search,index,name,get,num,docs
IndexRecoveryIT -> @TestLogging("_root:DEBUG,org.elasticsearch.indices.recovery:TRACE")     public void testDisconnectsDuringRecovery() throws Exception;1542609384;Tests scenario where recovery target successfully sends recovery request to source but then the channel gets closed while_the source is working on the recovery process.;@TestLogging("_root:DEBUG,org.elasticsearch.indices.recovery:TRACE")_    public void testDisconnectsDuringRecovery() throws Exception {_        boolean primaryRelocation = randomBoolean()__        final String indexName = "test"__        final Settings nodeSettings = Settings.builder()_            .put(RecoverySettings.INDICES_RECOVERY_RETRY_DELAY_NETWORK_SETTING.getKey(),_                TimeValue.timeValueMillis(randomIntBetween(0, 100)))_            .build()__        TimeValue disconnectAfterDelay = TimeValue.timeValueMillis(randomIntBetween(0, 100))__        _        String masterNodeName = internalCluster().startMasterOnlyNode(nodeSettings)___        final String blueNodeName = internalCluster()_            .startNode(Settings.builder().put("node.attr.color", "blue").put(nodeSettings).build())__        final String redNodeName = internalCluster()_            .startNode(Settings.builder().put("node.attr.color", "red").put(nodeSettings).build())___        client().admin().indices().prepareCreate(indexName)_            .setSettings(_                Settings.builder()_                    .put(IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING.getKey() + "color", "blue")_                    .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_                    .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)_            ).get()___        List<IndexRequestBuilder> requests = new ArrayList<>()__        int numDocs = scaledRandomIntBetween(25, 250)__        for (int i = 0_ i < numDocs_ i++) {_            requests.add(client().prepareIndex(indexName, "type").setSource("{}", XContentType.JSON))__        }_        indexRandom(true, requests)__        ensureSearchable(indexName)__        assertHitCount(client().prepareSearch(indexName).get(), numDocs)___        MockTransportService masterTransportService =_            (MockTransportService) internalCluster().getInstance(TransportService.class, masterNodeName)__        MockTransportService blueMockTransportService =_            (MockTransportService) internalCluster().getInstance(TransportService.class, blueNodeName)__        MockTransportService redMockTransportService =_            (MockTransportService) internalCluster().getInstance(TransportService.class, redNodeName)___        redMockTransportService.addSendBehavior(blueMockTransportService, new StubbableTransport.SendRequestBehavior() {_            private final AtomicInteger count = new AtomicInteger()___            @Override_            public void sendRequest(Transport.Connection connection, long requestId, String action, TransportRequest request,_                                    TransportRequestOptions options) throws IOException {_                logger.info("--> sending request {} on {}", action, connection.getNode())__                if (PeerRecoverySourceService.Actions.START_RECOVERY.equals(action) && count.incrementAndGet() == 1) {_                    _                    try {_                        awaitBusy(() -> client(blueNodeName).admin().cluster().prepareState().setLocal(true).get()_                            .getState().getRoutingTable().index("test").shard(0).getAllInitializingShards().isEmpty() == false)__                    } catch (InterruptedException e) {_                        throw new RuntimeException(e)__                    }_                    connection.sendRequest(requestId, action, request, options)__                    try {_                        Thread.sleep(disconnectAfterDelay.millis())__                    } catch (InterruptedException e) {_                        throw new RuntimeException(e)__                    }_                    throw new ConnectTransportException(connection.getNode(),_                        "DISCONNECT: simulation disconnect after successfully sending " + action + " request")__                } else {_                    connection.sendRequest(requestId, action, request, options)__                }_            }_        })___        final AtomicBoolean finalized = new AtomicBoolean()__        blueMockTransportService.addSendBehavior(redMockTransportService, (connection, requestId, action, request, options) -> {_            logger.info("--> sending request {} on {}", action, connection.getNode())__            if (action.equals(PeerRecoveryTargetService.Actions.FINALIZE)) {_                finalized.set(true)__            }_            connection.sendRequest(requestId, action, request, options)__        })___        for (MockTransportService mockTransportService : Arrays.asList(redMockTransportService, blueMockTransportService)) {_            mockTransportService.addSendBehavior(masterTransportService, (connection, requestId, action, request, options) -> {_                logger.info("--> sending request {} on {}", action, connection.getNode())__                if ((primaryRelocation && finalized.get()) == false) {_                    assertNotEquals(action, ShardStateAction.SHARD_FAILED_ACTION_NAME)__                }_                connection.sendRequest(requestId, action, request, options)__            })__        }__        if (primaryRelocation) {_            logger.info("--> starting primary relocation recovery from blue to red")__            client().admin().indices().prepareUpdateSettings(indexName).setSettings(_                Settings.builder()_                    .put(IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING.getKey() + "color", "red")_            ).get()___            ensureGreen()_ _            _            _            _            _            _            client().admin().indices().prepareRefresh(indexName).get()__        } else {_            logger.info("--> starting replica recovery from blue to red")__            client().admin().indices().prepareUpdateSettings(indexName).setSettings(_                Settings.builder()_                    .put(IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING.getKey() + "color", "red,blue")_                    .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 1)_            ).get()___            ensureGreen()__        }__        for (int i = 0_ i < 10_ i++) {_            assertHitCount(client().prepareSearch(indexName).get(), numDocs)__        }_    };tests,scenario,where,recovery,target,successfully,sends,recovery,request,to,source,but,then,the,channel,gets,closed,while,the,source,is,working,on,the,recovery,process;test,logging,debug,org,elasticsearch,indices,recovery,trace,public,void,test,disconnects,during,recovery,throws,exception,boolean,primary,relocation,random,boolean,final,string,index,name,test,final,settings,node,settings,settings,builder,put,recovery,settings,get,key,time,value,time,value,millis,random,int,between,0,100,build,time,value,disconnect,after,delay,time,value,time,value,millis,random,int,between,0,100,string,master,node,name,internal,cluster,start,master,only,node,node,settings,final,string,blue,node,name,internal,cluster,start,node,settings,builder,put,node,attr,color,blue,put,node,settings,build,final,string,red,node,name,internal,cluster,start,node,settings,builder,put,node,attr,color,red,put,node,settings,build,client,admin,indices,prepare,create,index,name,set,settings,settings,builder,put,index,meta,data,get,key,color,blue,put,index,meta,data,1,put,index,meta,data,0,get,list,index,request,builder,requests,new,array,list,int,num,docs,scaled,random,int,between,25,250,for,int,i,0,i,num,docs,i,requests,add,client,prepare,index,index,name,type,set,source,xcontent,type,json,index,random,true,requests,ensure,searchable,index,name,assert,hit,count,client,prepare,search,index,name,get,num,docs,mock,transport,service,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,master,node,name,mock,transport,service,blue,mock,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,blue,node,name,mock,transport,service,red,mock,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,red,node,name,red,mock,transport,service,add,send,behavior,blue,mock,transport,service,new,stubbable,transport,send,request,behavior,private,final,atomic,integer,count,new,atomic,integer,override,public,void,send,request,transport,connection,connection,long,request,id,string,action,transport,request,request,transport,request,options,options,throws,ioexception,logger,info,sending,request,on,action,connection,get,node,if,peer,recovery,source,service,actions,equals,action,count,increment,and,get,1,try,await,busy,client,blue,node,name,admin,cluster,prepare,state,set,local,true,get,get,state,get,routing,table,index,test,shard,0,get,all,initializing,shards,is,empty,false,catch,interrupted,exception,e,throw,new,runtime,exception,e,connection,send,request,request,id,action,request,options,try,thread,sleep,disconnect,after,delay,millis,catch,interrupted,exception,e,throw,new,runtime,exception,e,throw,new,connect,transport,exception,connection,get,node,disconnect,simulation,disconnect,after,successfully,sending,action,request,else,connection,send,request,request,id,action,request,options,final,atomic,boolean,finalized,new,atomic,boolean,blue,mock,transport,service,add,send,behavior,red,mock,transport,service,connection,request,id,action,request,options,logger,info,sending,request,on,action,connection,get,node,if,action,equals,peer,recovery,target,service,actions,finalize,finalized,set,true,connection,send,request,request,id,action,request,options,for,mock,transport,service,mock,transport,service,arrays,as,list,red,mock,transport,service,blue,mock,transport,service,mock,transport,service,add,send,behavior,master,transport,service,connection,request,id,action,request,options,logger,info,sending,request,on,action,connection,get,node,if,primary,relocation,finalized,get,false,assert,not,equals,action,shard,state,action,connection,send,request,request,id,action,request,options,if,primary,relocation,logger,info,starting,primary,relocation,recovery,from,blue,to,red,client,admin,indices,prepare,update,settings,index,name,set,settings,settings,builder,put,index,meta,data,get,key,color,red,get,ensure,green,client,admin,indices,prepare,refresh,index,name,get,else,logger,info,starting,replica,recovery,from,blue,to,red,client,admin,indices,prepare,update,settings,index,name,set,settings,settings,builder,put,index,meta,data,get,key,color,red,blue,put,index,meta,data,1,get,ensure,green,for,int,i,0,i,10,i,assert,hit,count,client,prepare,search,index,name,get,num,docs
IndexRecoveryIT -> @TestLogging("_root:DEBUG,org.elasticsearch.indices.recovery:TRACE")     public void testDisconnectsDuringRecovery() throws Exception;1544035746;Tests scenario where recovery target successfully sends recovery request to source but then the channel gets closed while_the source is working on the recovery process.;@TestLogging("_root:DEBUG,org.elasticsearch.indices.recovery:TRACE")_    public void testDisconnectsDuringRecovery() throws Exception {_        boolean primaryRelocation = randomBoolean()__        final String indexName = "test"__        final Settings nodeSettings = Settings.builder()_            .put(RecoverySettings.INDICES_RECOVERY_RETRY_DELAY_NETWORK_SETTING.getKey(),_                TimeValue.timeValueMillis(randomIntBetween(0, 100)))_            .build()__        TimeValue disconnectAfterDelay = TimeValue.timeValueMillis(randomIntBetween(0, 100))__        _        String masterNodeName = internalCluster().startMasterOnlyNode(nodeSettings)___        final String blueNodeName = internalCluster()_            .startNode(Settings.builder().put("node.attr.color", "blue").put(nodeSettings).build())__        final String redNodeName = internalCluster()_            .startNode(Settings.builder().put("node.attr.color", "red").put(nodeSettings).build())___        client().admin().indices().prepareCreate(indexName)_            .setSettings(_                Settings.builder()_                    .put(IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING.getKey() + "color", "blue")_                    .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_                    .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)_            ).get()___        List<IndexRequestBuilder> requests = new ArrayList<>()__        int numDocs = scaledRandomIntBetween(25, 250)__        for (int i = 0_ i < numDocs_ i++) {_            requests.add(client().prepareIndex(indexName, "type").setSource("{}", XContentType.JSON))__        }_        indexRandom(true, requests)__        ensureSearchable(indexName)__        assertHitCount(client().prepareSearch(indexName).get(), numDocs)___        MockTransportService masterTransportService =_            (MockTransportService) internalCluster().getInstance(TransportService.class, masterNodeName)__        MockTransportService blueMockTransportService =_            (MockTransportService) internalCluster().getInstance(TransportService.class, blueNodeName)__        MockTransportService redMockTransportService =_            (MockTransportService) internalCluster().getInstance(TransportService.class, redNodeName)___        redMockTransportService.addSendBehavior(blueMockTransportService, new StubbableTransport.SendRequestBehavior() {_            private final AtomicInteger count = new AtomicInteger()___            @Override_            public void sendRequest(Transport.Connection connection, long requestId, String action, TransportRequest request,_                                    TransportRequestOptions options) throws IOException {_                logger.info("--> sending request {} on {}", action, connection.getNode())__                if (PeerRecoverySourceService.Actions.START_RECOVERY.equals(action) && count.incrementAndGet() == 1) {_                    _                    try {_                        awaitBusy(() -> client(blueNodeName).admin().cluster().prepareState().setLocal(true).get()_                            .getState().getRoutingTable().index("test").shard(0).getAllInitializingShards().isEmpty() == false)__                    } catch (InterruptedException e) {_                        throw new RuntimeException(e)__                    }_                    connection.sendRequest(requestId, action, request, options)__                    try {_                        Thread.sleep(disconnectAfterDelay.millis())__                    } catch (InterruptedException e) {_                        throw new RuntimeException(e)__                    }_                    throw new ConnectTransportException(connection.getNode(),_                        "DISCONNECT: simulation disconnect after successfully sending " + action + " request")__                } else {_                    connection.sendRequest(requestId, action, request, options)__                }_            }_        })___        final AtomicBoolean finalized = new AtomicBoolean()__        blueMockTransportService.addSendBehavior(redMockTransportService, (connection, requestId, action, request, options) -> {_            logger.info("--> sending request {} on {}", action, connection.getNode())__            if (action.equals(PeerRecoveryTargetService.Actions.FINALIZE)) {_                finalized.set(true)__            }_            connection.sendRequest(requestId, action, request, options)__        })___        for (MockTransportService mockTransportService : Arrays.asList(redMockTransportService, blueMockTransportService)) {_            mockTransportService.addSendBehavior(masterTransportService, (connection, requestId, action, request, options) -> {_                logger.info("--> sending request {} on {}", action, connection.getNode())__                if ((primaryRelocation && finalized.get()) == false) {_                    assertNotEquals(action, ShardStateAction.SHARD_FAILED_ACTION_NAME)__                }_                connection.sendRequest(requestId, action, request, options)__            })__        }__        if (primaryRelocation) {_            logger.info("--> starting primary relocation recovery from blue to red")__            client().admin().indices().prepareUpdateSettings(indexName).setSettings(_                Settings.builder()_                    .put(IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING.getKey() + "color", "red")_            ).get()___            ensureGreen()_ _            _            _            _            _            _            client().admin().indices().prepareRefresh(indexName).get()__        } else {_            logger.info("--> starting replica recovery from blue to red")__            client().admin().indices().prepareUpdateSettings(indexName).setSettings(_                Settings.builder()_                    .put(IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING.getKey() + "color", "red,blue")_                    .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 1)_            ).get()___            ensureGreen()__        }__        for (int i = 0_ i < 10_ i++) {_            assertHitCount(client().prepareSearch(indexName).get(), numDocs)__        }_    };tests,scenario,where,recovery,target,successfully,sends,recovery,request,to,source,but,then,the,channel,gets,closed,while,the,source,is,working,on,the,recovery,process;test,logging,debug,org,elasticsearch,indices,recovery,trace,public,void,test,disconnects,during,recovery,throws,exception,boolean,primary,relocation,random,boolean,final,string,index,name,test,final,settings,node,settings,settings,builder,put,recovery,settings,get,key,time,value,time,value,millis,random,int,between,0,100,build,time,value,disconnect,after,delay,time,value,time,value,millis,random,int,between,0,100,string,master,node,name,internal,cluster,start,master,only,node,node,settings,final,string,blue,node,name,internal,cluster,start,node,settings,builder,put,node,attr,color,blue,put,node,settings,build,final,string,red,node,name,internal,cluster,start,node,settings,builder,put,node,attr,color,red,put,node,settings,build,client,admin,indices,prepare,create,index,name,set,settings,settings,builder,put,index,meta,data,get,key,color,blue,put,index,meta,data,1,put,index,meta,data,0,get,list,index,request,builder,requests,new,array,list,int,num,docs,scaled,random,int,between,25,250,for,int,i,0,i,num,docs,i,requests,add,client,prepare,index,index,name,type,set,source,xcontent,type,json,index,random,true,requests,ensure,searchable,index,name,assert,hit,count,client,prepare,search,index,name,get,num,docs,mock,transport,service,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,master,node,name,mock,transport,service,blue,mock,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,blue,node,name,mock,transport,service,red,mock,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,red,node,name,red,mock,transport,service,add,send,behavior,blue,mock,transport,service,new,stubbable,transport,send,request,behavior,private,final,atomic,integer,count,new,atomic,integer,override,public,void,send,request,transport,connection,connection,long,request,id,string,action,transport,request,request,transport,request,options,options,throws,ioexception,logger,info,sending,request,on,action,connection,get,node,if,peer,recovery,source,service,actions,equals,action,count,increment,and,get,1,try,await,busy,client,blue,node,name,admin,cluster,prepare,state,set,local,true,get,get,state,get,routing,table,index,test,shard,0,get,all,initializing,shards,is,empty,false,catch,interrupted,exception,e,throw,new,runtime,exception,e,connection,send,request,request,id,action,request,options,try,thread,sleep,disconnect,after,delay,millis,catch,interrupted,exception,e,throw,new,runtime,exception,e,throw,new,connect,transport,exception,connection,get,node,disconnect,simulation,disconnect,after,successfully,sending,action,request,else,connection,send,request,request,id,action,request,options,final,atomic,boolean,finalized,new,atomic,boolean,blue,mock,transport,service,add,send,behavior,red,mock,transport,service,connection,request,id,action,request,options,logger,info,sending,request,on,action,connection,get,node,if,action,equals,peer,recovery,target,service,actions,finalize,finalized,set,true,connection,send,request,request,id,action,request,options,for,mock,transport,service,mock,transport,service,arrays,as,list,red,mock,transport,service,blue,mock,transport,service,mock,transport,service,add,send,behavior,master,transport,service,connection,request,id,action,request,options,logger,info,sending,request,on,action,connection,get,node,if,primary,relocation,finalized,get,false,assert,not,equals,action,shard,state,action,connection,send,request,request,id,action,request,options,if,primary,relocation,logger,info,starting,primary,relocation,recovery,from,blue,to,red,client,admin,indices,prepare,update,settings,index,name,set,settings,settings,builder,put,index,meta,data,get,key,color,red,get,ensure,green,client,admin,indices,prepare,refresh,index,name,get,else,logger,info,starting,replica,recovery,from,blue,to,red,client,admin,indices,prepare,update,settings,index,name,set,settings,settings,builder,put,index,meta,data,get,key,color,red,blue,put,index,meta,data,1,get,ensure,green,for,int,i,0,i,10,i,assert,hit,count,client,prepare,search,index,name,get,num,docs
IndexRecoveryIT -> @TestLogging("_root:DEBUG,org.elasticsearch.indices.recovery:TRACE")     public void testDisconnectsDuringRecovery() throws Exception;1544783963;Tests scenario where recovery target successfully sends recovery request to source but then the channel gets closed while_the source is working on the recovery process.;@TestLogging("_root:DEBUG,org.elasticsearch.indices.recovery:TRACE")_    public void testDisconnectsDuringRecovery() throws Exception {_        boolean primaryRelocation = randomBoolean()__        final String indexName = "test"__        final Settings nodeSettings = Settings.builder()_            .put(RecoverySettings.INDICES_RECOVERY_RETRY_DELAY_NETWORK_SETTING.getKey(),_                TimeValue.timeValueMillis(randomIntBetween(0, 100)))_            .build()__        TimeValue disconnectAfterDelay = TimeValue.timeValueMillis(randomIntBetween(0, 100))__        _        String masterNodeName = internalCluster().startMasterOnlyNode(nodeSettings)___        final String blueNodeName = internalCluster()_            .startNode(Settings.builder().put("node.attr.color", "blue").put(nodeSettings).build())__        final String redNodeName = internalCluster()_            .startNode(Settings.builder().put("node.attr.color", "red").put(nodeSettings).build())___        client().admin().indices().prepareCreate(indexName)_            .setSettings(_                Settings.builder()_                    .put(IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING.getKey() + "color", "blue")_                    .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_                    .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)_            ).get()___        List<IndexRequestBuilder> requests = new ArrayList<>()__        int numDocs = scaledRandomIntBetween(25, 250)__        for (int i = 0_ i < numDocs_ i++) {_            requests.add(client().prepareIndex(indexName, "type").setSource("{}", XContentType.JSON))__        }_        indexRandom(true, requests)__        ensureSearchable(indexName)__        assertHitCount(client().prepareSearch(indexName).get(), numDocs)___        MockTransportService masterTransportService =_            (MockTransportService) internalCluster().getInstance(TransportService.class, masterNodeName)__        MockTransportService blueMockTransportService =_            (MockTransportService) internalCluster().getInstance(TransportService.class, blueNodeName)__        MockTransportService redMockTransportService =_            (MockTransportService) internalCluster().getInstance(TransportService.class, redNodeName)___        redMockTransportService.addSendBehavior(blueMockTransportService, new StubbableTransport.SendRequestBehavior() {_            private final AtomicInteger count = new AtomicInteger()___            @Override_            public void sendRequest(Transport.Connection connection, long requestId, String action, TransportRequest request,_                                    TransportRequestOptions options) throws IOException {_                logger.info("--> sending request {} on {}", action, connection.getNode())__                if (PeerRecoverySourceService.Actions.START_RECOVERY.equals(action) && count.incrementAndGet() == 1) {_                    _                    try {_                        awaitBusy(() -> client(blueNodeName).admin().cluster().prepareState().setLocal(true).get()_                            .getState().getRoutingTable().index("test").shard(0).getAllInitializingShards().isEmpty() == false)__                    } catch (InterruptedException e) {_                        throw new RuntimeException(e)__                    }_                    connection.sendRequest(requestId, action, request, options)__                    try {_                        Thread.sleep(disconnectAfterDelay.millis())__                    } catch (InterruptedException e) {_                        throw new RuntimeException(e)__                    }_                    throw new ConnectTransportException(connection.getNode(),_                        "DISCONNECT: simulation disconnect after successfully sending " + action + " request")__                } else {_                    connection.sendRequest(requestId, action, request, options)__                }_            }_        })___        final AtomicBoolean finalized = new AtomicBoolean()__        blueMockTransportService.addSendBehavior(redMockTransportService, (connection, requestId, action, request, options) -> {_            logger.info("--> sending request {} on {}", action, connection.getNode())__            if (action.equals(PeerRecoveryTargetService.Actions.FINALIZE)) {_                finalized.set(true)__            }_            connection.sendRequest(requestId, action, request, options)__        })___        for (MockTransportService mockTransportService : Arrays.asList(redMockTransportService, blueMockTransportService)) {_            mockTransportService.addSendBehavior(masterTransportService, (connection, requestId, action, request, options) -> {_                logger.info("--> sending request {} on {}", action, connection.getNode())__                if ((primaryRelocation && finalized.get()) == false) {_                    assertNotEquals(action, ShardStateAction.SHARD_FAILED_ACTION_NAME)__                }_                connection.sendRequest(requestId, action, request, options)__            })__        }__        if (primaryRelocation) {_            logger.info("--> starting primary relocation recovery from blue to red")__            client().admin().indices().prepareUpdateSettings(indexName).setSettings(_                Settings.builder()_                    .put(IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING.getKey() + "color", "red")_            ).get()___            ensureGreen()_ _            _            _            _            _            _            client().admin().indices().prepareRefresh(indexName).get()__        } else {_            logger.info("--> starting replica recovery from blue to red")__            client().admin().indices().prepareUpdateSettings(indexName).setSettings(_                Settings.builder()_                    .put(IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING.getKey() + "color", "red,blue")_                    .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 1)_            ).get()___            ensureGreen()__        }__        for (int i = 0_ i < 10_ i++) {_            assertHitCount(client().prepareSearch(indexName).get(), numDocs)__        }_    };tests,scenario,where,recovery,target,successfully,sends,recovery,request,to,source,but,then,the,channel,gets,closed,while,the,source,is,working,on,the,recovery,process;test,logging,debug,org,elasticsearch,indices,recovery,trace,public,void,test,disconnects,during,recovery,throws,exception,boolean,primary,relocation,random,boolean,final,string,index,name,test,final,settings,node,settings,settings,builder,put,recovery,settings,get,key,time,value,time,value,millis,random,int,between,0,100,build,time,value,disconnect,after,delay,time,value,time,value,millis,random,int,between,0,100,string,master,node,name,internal,cluster,start,master,only,node,node,settings,final,string,blue,node,name,internal,cluster,start,node,settings,builder,put,node,attr,color,blue,put,node,settings,build,final,string,red,node,name,internal,cluster,start,node,settings,builder,put,node,attr,color,red,put,node,settings,build,client,admin,indices,prepare,create,index,name,set,settings,settings,builder,put,index,meta,data,get,key,color,blue,put,index,meta,data,1,put,index,meta,data,0,get,list,index,request,builder,requests,new,array,list,int,num,docs,scaled,random,int,between,25,250,for,int,i,0,i,num,docs,i,requests,add,client,prepare,index,index,name,type,set,source,xcontent,type,json,index,random,true,requests,ensure,searchable,index,name,assert,hit,count,client,prepare,search,index,name,get,num,docs,mock,transport,service,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,master,node,name,mock,transport,service,blue,mock,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,blue,node,name,mock,transport,service,red,mock,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,red,node,name,red,mock,transport,service,add,send,behavior,blue,mock,transport,service,new,stubbable,transport,send,request,behavior,private,final,atomic,integer,count,new,atomic,integer,override,public,void,send,request,transport,connection,connection,long,request,id,string,action,transport,request,request,transport,request,options,options,throws,ioexception,logger,info,sending,request,on,action,connection,get,node,if,peer,recovery,source,service,actions,equals,action,count,increment,and,get,1,try,await,busy,client,blue,node,name,admin,cluster,prepare,state,set,local,true,get,get,state,get,routing,table,index,test,shard,0,get,all,initializing,shards,is,empty,false,catch,interrupted,exception,e,throw,new,runtime,exception,e,connection,send,request,request,id,action,request,options,try,thread,sleep,disconnect,after,delay,millis,catch,interrupted,exception,e,throw,new,runtime,exception,e,throw,new,connect,transport,exception,connection,get,node,disconnect,simulation,disconnect,after,successfully,sending,action,request,else,connection,send,request,request,id,action,request,options,final,atomic,boolean,finalized,new,atomic,boolean,blue,mock,transport,service,add,send,behavior,red,mock,transport,service,connection,request,id,action,request,options,logger,info,sending,request,on,action,connection,get,node,if,action,equals,peer,recovery,target,service,actions,finalize,finalized,set,true,connection,send,request,request,id,action,request,options,for,mock,transport,service,mock,transport,service,arrays,as,list,red,mock,transport,service,blue,mock,transport,service,mock,transport,service,add,send,behavior,master,transport,service,connection,request,id,action,request,options,logger,info,sending,request,on,action,connection,get,node,if,primary,relocation,finalized,get,false,assert,not,equals,action,shard,state,action,connection,send,request,request,id,action,request,options,if,primary,relocation,logger,info,starting,primary,relocation,recovery,from,blue,to,red,client,admin,indices,prepare,update,settings,index,name,set,settings,settings,builder,put,index,meta,data,get,key,color,red,get,ensure,green,client,admin,indices,prepare,refresh,index,name,get,else,logger,info,starting,replica,recovery,from,blue,to,red,client,admin,indices,prepare,update,settings,index,name,set,settings,settings,builder,put,index,meta,data,get,key,color,red,blue,put,index,meta,data,1,get,ensure,green,for,int,i,0,i,10,i,assert,hit,count,client,prepare,search,index,name,get,num,docs
IndexRecoveryIT -> @TestLogging("_root:DEBUG,org.elasticsearch.indices.recovery:TRACE")     public void testDisconnectsDuringRecovery() throws Exception;1550220204;Tests scenario where recovery target successfully sends recovery request to source but then the channel gets closed while_the source is working on the recovery process.;@TestLogging("_root:DEBUG,org.elasticsearch.indices.recovery:TRACE")_    public void testDisconnectsDuringRecovery() throws Exception {_        boolean primaryRelocation = randomBoolean()__        final String indexName = "test"__        final Settings nodeSettings = Settings.builder()_            .put(RecoverySettings.INDICES_RECOVERY_RETRY_DELAY_NETWORK_SETTING.getKey(),_                TimeValue.timeValueMillis(randomIntBetween(0, 100)))_            .build()__        TimeValue disconnectAfterDelay = TimeValue.timeValueMillis(randomIntBetween(0, 100))__        _        String masterNodeName = internalCluster().startMasterOnlyNode(nodeSettings)___        final String blueNodeName = internalCluster()_            .startNode(Settings.builder().put("node.attr.color", "blue").put(nodeSettings).build())__        final String redNodeName = internalCluster()_            .startNode(Settings.builder().put("node.attr.color", "red").put(nodeSettings).build())___        client().admin().indices().prepareCreate(indexName)_            .setSettings(_                Settings.builder()_                    .put(IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING.getKey() + "color", "blue")_                    .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_                    .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)_            ).get()___        List<IndexRequestBuilder> requests = new ArrayList<>()__        int numDocs = scaledRandomIntBetween(25, 250)__        for (int i = 0_ i < numDocs_ i++) {_            requests.add(client().prepareIndex(indexName, "type").setSource("{}", XContentType.JSON))__        }_        indexRandom(true, requests)__        ensureSearchable(indexName)__        assertHitCount(client().prepareSearch(indexName).get(), numDocs)___        MockTransportService masterTransportService =_            (MockTransportService) internalCluster().getInstance(TransportService.class, masterNodeName)__        MockTransportService blueMockTransportService =_            (MockTransportService) internalCluster().getInstance(TransportService.class, blueNodeName)__        MockTransportService redMockTransportService =_            (MockTransportService) internalCluster().getInstance(TransportService.class, redNodeName)___        redMockTransportService.addSendBehavior(blueMockTransportService, new StubbableTransport.SendRequestBehavior() {_            private final AtomicInteger count = new AtomicInteger()___            @Override_            public void sendRequest(Transport.Connection connection, long requestId, String action, TransportRequest request,_                                    TransportRequestOptions options) throws IOException {_                logger.info("--> sending request {} on {}", action, connection.getNode())__                if (PeerRecoverySourceService.Actions.START_RECOVERY.equals(action) && count.incrementAndGet() == 1) {_                    _                    try {_                        awaitBusy(() -> client(blueNodeName).admin().cluster().prepareState().setLocal(true).get()_                            .getState().getRoutingTable().index("test").shard(0).getAllInitializingShards().isEmpty() == false)__                    } catch (InterruptedException e) {_                        throw new RuntimeException(e)__                    }_                    connection.sendRequest(requestId, action, request, options)__                    try {_                        Thread.sleep(disconnectAfterDelay.millis())__                    } catch (InterruptedException e) {_                        throw new RuntimeException(e)__                    }_                    throw new ConnectTransportException(connection.getNode(),_                        "DISCONNECT: simulation disconnect after successfully sending " + action + " request")__                } else {_                    connection.sendRequest(requestId, action, request, options)__                }_            }_        })___        final AtomicBoolean finalized = new AtomicBoolean()__        blueMockTransportService.addSendBehavior(redMockTransportService, (connection, requestId, action, request, options) -> {_            logger.info("--> sending request {} on {}", action, connection.getNode())__            if (action.equals(PeerRecoveryTargetService.Actions.FINALIZE)) {_                finalized.set(true)__            }_            connection.sendRequest(requestId, action, request, options)__        })___        for (MockTransportService mockTransportService : Arrays.asList(redMockTransportService, blueMockTransportService)) {_            mockTransportService.addSendBehavior(masterTransportService, (connection, requestId, action, request, options) -> {_                logger.info("--> sending request {} on {}", action, connection.getNode())__                if ((primaryRelocation && finalized.get()) == false) {_                    assertNotEquals(action, ShardStateAction.SHARD_FAILED_ACTION_NAME)__                }_                connection.sendRequest(requestId, action, request, options)__            })__        }__        if (primaryRelocation) {_            logger.info("--> starting primary relocation recovery from blue to red")__            client().admin().indices().prepareUpdateSettings(indexName).setSettings(_                Settings.builder()_                    .put(IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING.getKey() + "color", "red")_            ).get()___            ensureGreen()_ _            _            _            _            _            _            client().admin().indices().prepareRefresh(indexName).get()__        } else {_            logger.info("--> starting replica recovery from blue to red")__            client().admin().indices().prepareUpdateSettings(indexName).setSettings(_                Settings.builder()_                    .put(IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING.getKey() + "color", "red,blue")_                    .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 1)_            ).get()___            ensureGreen()__        }__        for (int i = 0_ i < 10_ i++) {_            assertHitCount(client().prepareSearch(indexName).get(), numDocs)__        }_    };tests,scenario,where,recovery,target,successfully,sends,recovery,request,to,source,but,then,the,channel,gets,closed,while,the,source,is,working,on,the,recovery,process;test,logging,debug,org,elasticsearch,indices,recovery,trace,public,void,test,disconnects,during,recovery,throws,exception,boolean,primary,relocation,random,boolean,final,string,index,name,test,final,settings,node,settings,settings,builder,put,recovery,settings,get,key,time,value,time,value,millis,random,int,between,0,100,build,time,value,disconnect,after,delay,time,value,time,value,millis,random,int,between,0,100,string,master,node,name,internal,cluster,start,master,only,node,node,settings,final,string,blue,node,name,internal,cluster,start,node,settings,builder,put,node,attr,color,blue,put,node,settings,build,final,string,red,node,name,internal,cluster,start,node,settings,builder,put,node,attr,color,red,put,node,settings,build,client,admin,indices,prepare,create,index,name,set,settings,settings,builder,put,index,meta,data,get,key,color,blue,put,index,meta,data,1,put,index,meta,data,0,get,list,index,request,builder,requests,new,array,list,int,num,docs,scaled,random,int,between,25,250,for,int,i,0,i,num,docs,i,requests,add,client,prepare,index,index,name,type,set,source,xcontent,type,json,index,random,true,requests,ensure,searchable,index,name,assert,hit,count,client,prepare,search,index,name,get,num,docs,mock,transport,service,master,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,master,node,name,mock,transport,service,blue,mock,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,blue,node,name,mock,transport,service,red,mock,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,red,node,name,red,mock,transport,service,add,send,behavior,blue,mock,transport,service,new,stubbable,transport,send,request,behavior,private,final,atomic,integer,count,new,atomic,integer,override,public,void,send,request,transport,connection,connection,long,request,id,string,action,transport,request,request,transport,request,options,options,throws,ioexception,logger,info,sending,request,on,action,connection,get,node,if,peer,recovery,source,service,actions,equals,action,count,increment,and,get,1,try,await,busy,client,blue,node,name,admin,cluster,prepare,state,set,local,true,get,get,state,get,routing,table,index,test,shard,0,get,all,initializing,shards,is,empty,false,catch,interrupted,exception,e,throw,new,runtime,exception,e,connection,send,request,request,id,action,request,options,try,thread,sleep,disconnect,after,delay,millis,catch,interrupted,exception,e,throw,new,runtime,exception,e,throw,new,connect,transport,exception,connection,get,node,disconnect,simulation,disconnect,after,successfully,sending,action,request,else,connection,send,request,request,id,action,request,options,final,atomic,boolean,finalized,new,atomic,boolean,blue,mock,transport,service,add,send,behavior,red,mock,transport,service,connection,request,id,action,request,options,logger,info,sending,request,on,action,connection,get,node,if,action,equals,peer,recovery,target,service,actions,finalize,finalized,set,true,connection,send,request,request,id,action,request,options,for,mock,transport,service,mock,transport,service,arrays,as,list,red,mock,transport,service,blue,mock,transport,service,mock,transport,service,add,send,behavior,master,transport,service,connection,request,id,action,request,options,logger,info,sending,request,on,action,connection,get,node,if,primary,relocation,finalized,get,false,assert,not,equals,action,shard,state,action,connection,send,request,request,id,action,request,options,if,primary,relocation,logger,info,starting,primary,relocation,recovery,from,blue,to,red,client,admin,indices,prepare,update,settings,index,name,set,settings,settings,builder,put,index,meta,data,get,key,color,red,get,ensure,green,client,admin,indices,prepare,refresh,index,name,get,else,logger,info,starting,replica,recovery,from,blue,to,red,client,admin,indices,prepare,update,settings,index,name,set,settings,settings,builder,put,index,meta,data,get,key,color,red,blue,put,index,meta,data,1,get,ensure,green,for,int,i,0,i,10,i,assert,hit,count,client,prepare,search,index,name,get,num,docs
