commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;80;;@BeforeClass @SuppressWarnings("unchecked") public static void initMockScripts() {     SCRIPTS.put("initScript", params -> {         Map<String, Object> state = (Map<String, Object>) params.get("state").         state.put("collector", new ArrayList<Integer>()).         return state.     }).     SCRIPTS.put("mapScript", params -> {         Map<String, Object> state = (Map<String, Object>) params.get("state").         // just add 1 for each doc the script is run on         ((List<Integer>) state.get("collector")).add(1).         return state.     }).     SCRIPTS.put("combineScript", params -> {         Map<String, Object> state = (Map<String, Object>) params.get("state").         return ((List<Integer>) state.get("collector")).stream().mapToInt(Integer::intValue).sum().     }).     SCRIPTS.put("combineScriptNoop", params -> {         Map<String, Object> state = (Map<String, Object>) params.get("state").         return state.     }).     SCRIPTS.put("reduceScript", params -> {         Map<String, Object> state = (Map<String, Object>) params.get("state").         return state.     }).     SCRIPTS.put("initScriptScore", params -> {         Map<String, Object> state = (Map<String, Object>) params.get("state").         state.put("collector", new ArrayList<Double>()).         return state.     }).     SCRIPTS.put("mapScriptScore", params -> {         Map<String, Object> state = (Map<String, Object>) params.get("state").         ((List<Double>) state.get("collector")).add(((Number) params.get("_score")).doubleValue()).         return state.     }).     SCRIPTS.put("combineScriptScore", params -> {         Map<String, Object> state = (Map<String, Object>) params.get("state").         return ((List<Double>) state.get("collector")).stream().mapToDouble(Double::doubleValue).sum().     }).     SCRIPTS.put("initScriptParams", params -> {         Map<String, Object> state = (Map<String, Object>) params.get("state").         Integer initialValue = (Integer) params.get("initialValue").         ArrayList<Integer> collector = new ArrayList<>().         collector.add(initialValue).         state.put("collector", collector).         return state.     }).     SCRIPTS.put("mapScriptParams", params -> {         Map<String, Object> state = (Map<String, Object>) params.get("state").         Integer itemValue = (Integer) params.get("itemValue").         ((List<Integer>) state.get("collector")).add(itemValue).         return state.     }).     SCRIPTS.put("combineScriptParams", params -> {         Map<String, Object> state = (Map<String, Object>) params.get("state").         int divisor = ((Integer) params.get("divisor")).         return ((List<Integer>) state.get("collector")).stream().mapToInt(Integer::intValue).map(i -> i / divisor).sum().     }).     SCRIPTS.put("initScriptSelfRef", params -> {         Map<String, Object> state = (Map<String, Object>) params.get("state").         state.put("collector", new ArrayList<Integer>()).         state.put("selfRef", state).         return state.     }).     SCRIPTS.put("mapScriptSelfRef", params -> {         Map<String, Object> state = (Map<String, Object>) params.get("state").         state.put("selfRef", state).         return state.     }).     SCRIPTS.put("combineScriptSelfRef", params -> {         Map<String, Object> state = (Map<String, Object>) params.get("state").         state.put("selfRef", state).         return state.     }). }
false;public;0;16;;@SuppressWarnings("unchecked") public void testNoDocs() throws IOException {     try (Directory directory = newDirectory()) {         try (RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory)) {         // intentionally not writing any docs         }         try (IndexReader indexReader = DirectoryReader.open(directory)) {             ScriptedMetricAggregationBuilder aggregationBuilder = new ScriptedMetricAggregationBuilder(AGG_NAME).             aggregationBuilder.mapScript(MAP_SCRIPT).combineScript(COMBINE_SCRIPT_NOOP).reduceScript(REDUCE_SCRIPT).             ScriptedMetric scriptedMetric = search(newSearcher(indexReader, true, true), new MatchAllDocsQuery(), aggregationBuilder).             assertEquals(AGG_NAME, scriptedMetric.getName()).             assertNotNull(scriptedMetric.aggregation()).             assertEquals(0, ((HashMap<Object, String>) scriptedMetric.aggregation()).size()).         }     } }
false;public;0;17;;public void testScriptedMetricWithoutCombine() throws IOException {     try (Directory directory = newDirectory()) {         int numDocs = randomInt(100).         try (RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory)) {             for (int i = 0. i < numDocs. i++) {                 indexWriter.addDocument(singleton(new SortedNumericDocValuesField("number", i))).             }         }         try (IndexReader indexReader = DirectoryReader.open(directory)) {             ScriptedMetricAggregationBuilder aggregationBuilder = new ScriptedMetricAggregationBuilder(AGG_NAME).             aggregationBuilder.initScript(INIT_SCRIPT).mapScript(MAP_SCRIPT).reduceScript(REDUCE_SCRIPT).             IllegalArgumentException exception = expectThrows(IllegalArgumentException.class, () -> search(newSearcher(indexReader, true, true), new MatchAllDocsQuery(), aggregationBuilder)).             assertEquals(exception.getMessage(), "[combineScript] must not be null: [scriptedMetric]").         }     } }
false;public;0;17;;public void testScriptedMetricWithoutReduce() throws IOException {     try (Directory directory = newDirectory()) {         int numDocs = randomInt(100).         try (RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory)) {             for (int i = 0. i < numDocs. i++) {                 indexWriter.addDocument(singleton(new SortedNumericDocValuesField("number", i))).             }         }         try (IndexReader indexReader = DirectoryReader.open(directory)) {             ScriptedMetricAggregationBuilder aggregationBuilder = new ScriptedMetricAggregationBuilder(AGG_NAME).             aggregationBuilder.initScript(INIT_SCRIPT).mapScript(MAP_SCRIPT).combineScript(COMBINE_SCRIPT).             IllegalArgumentException exception = expectThrows(IllegalArgumentException.class, () -> search(newSearcher(indexReader, true, true), new MatchAllDocsQuery(), aggregationBuilder)).             assertEquals(exception.getMessage(), "[reduceScript] must not be null: [scriptedMetric]").         }     } }
true;public;0;19;/**  * test that combine script sums the list produced by the "mapScript"  */ ;/**  * test that combine script sums the list produced by the "mapScript"  */ public void testScriptedMetricWithCombine() throws IOException {     try (Directory directory = newDirectory()) {         Integer numDocs = randomInt(100).         try (RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory)) {             for (int i = 0. i < numDocs. i++) {                 indexWriter.addDocument(singleton(new SortedNumericDocValuesField("number", i))).             }         }         try (IndexReader indexReader = DirectoryReader.open(directory)) {             ScriptedMetricAggregationBuilder aggregationBuilder = new ScriptedMetricAggregationBuilder(AGG_NAME).             aggregationBuilder.initScript(INIT_SCRIPT).mapScript(MAP_SCRIPT).combineScript(COMBINE_SCRIPT).reduceScript(REDUCE_SCRIPT).             ScriptedMetric scriptedMetric = search(newSearcher(indexReader, true, true), new MatchAllDocsQuery(), aggregationBuilder).             assertEquals(AGG_NAME, scriptedMetric.getName()).             assertNotNull(scriptedMetric.aggregation()).             assertEquals(numDocs, scriptedMetric.aggregation()).         }     } }
true;public;0;20;/**  * test that uses the score of the documents  */ ;/**  * test that uses the score of the documents  */ public void testScriptedMetricWithCombineAccessesScores() throws IOException {     try (Directory directory = newDirectory()) {         Integer numDocs = randomInt(100).         try (RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory)) {             for (int i = 0. i < numDocs. i++) {                 indexWriter.addDocument(singleton(new SortedNumericDocValuesField("number", i))).             }         }         try (IndexReader indexReader = DirectoryReader.open(directory)) {             ScriptedMetricAggregationBuilder aggregationBuilder = new ScriptedMetricAggregationBuilder(AGG_NAME).             aggregationBuilder.initScript(INIT_SCRIPT_SCORE).mapScript(MAP_SCRIPT_SCORE).combineScript(COMBINE_SCRIPT_SCORE).reduceScript(REDUCE_SCRIPT).             ScriptedMetric scriptedMetric = search(newSearcher(indexReader, true, true), new MatchAllDocsQuery(), aggregationBuilder).             assertEquals(AGG_NAME, scriptedMetric.getName()).             assertNotNull(scriptedMetric.aggregation()).             // all documents have score of 1.0             assertEquals((double) numDocs, scriptedMetric.aggregation()).         }     } }
false;public;0;19;;public void testScriptParamsPassedThrough() throws IOException {     try (Directory directory = newDirectory()) {         try (RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory)) {             for (int i = 0. i < 100. i++) {                 indexWriter.addDocument(singleton(new SortedNumericDocValuesField("number", i))).             }         }         try (IndexReader indexReader = DirectoryReader.open(directory)) {             ScriptedMetricAggregationBuilder aggregationBuilder = new ScriptedMetricAggregationBuilder(AGG_NAME).             aggregationBuilder.initScript(INIT_SCRIPT_PARAMS).mapScript(MAP_SCRIPT_PARAMS).combineScript(COMBINE_SCRIPT_PARAMS).reduceScript(REDUCE_SCRIPT).             ScriptedMetric scriptedMetric = search(newSearcher(indexReader, true, true), new MatchAllDocsQuery(), aggregationBuilder).             // The result value depends on the script params.             assertEquals(306, scriptedMetric.aggregation()).         }     } }
false;public;0;22;;public void testConflictingAggAndScriptParams() throws IOException {     try (Directory directory = newDirectory()) {         try (RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory)) {             for (int i = 0. i < 100. i++) {                 indexWriter.addDocument(singleton(new SortedNumericDocValuesField("number", i))).             }         }         try (IndexReader indexReader = DirectoryReader.open(directory)) {             ScriptedMetricAggregationBuilder aggregationBuilder = new ScriptedMetricAggregationBuilder(AGG_NAME).             Map<String, Object> aggParams = Collections.singletonMap(CONFLICTING_PARAM_NAME, "blah").             aggregationBuilder.params(aggParams).initScript(INIT_SCRIPT_PARAMS).mapScript(MAP_SCRIPT_PARAMS).combineScript(COMBINE_SCRIPT_PARAMS).reduceScript(REDUCE_SCRIPT).             IllegalArgumentException ex = expectThrows(IllegalArgumentException.class, () -> search(newSearcher(indexReader, true, true), new MatchAllDocsQuery(), aggregationBuilder)).             assertEquals("Parameter name \"" + CONFLICTING_PARAM_NAME + "\" used in both aggregation and script parameters", ex.getMessage()).         }     } }
false;public;0;17;;public void testSelfReferencingAggStateAfterInit() throws IOException {     try (Directory directory = newDirectory()) {         try (RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory)) {         // No need to add docs for this test         }         try (IndexReader indexReader = DirectoryReader.open(directory)) {             ScriptedMetricAggregationBuilder aggregationBuilder = new ScriptedMetricAggregationBuilder(AGG_NAME).             aggregationBuilder.initScript(INIT_SCRIPT_SELF_REF).mapScript(MAP_SCRIPT).combineScript(COMBINE_SCRIPT_PARAMS).reduceScript(REDUCE_SCRIPT).             IllegalArgumentException ex = expectThrows(IllegalArgumentException.class, () -> search(newSearcher(indexReader, true, true), new MatchAllDocsQuery(), aggregationBuilder)).             assertEquals("Iterable object is self-referencing itself (Scripted metric aggs init script)", ex.getMessage()).         }     } }
false;public;0;20;;public void testSelfReferencingAggStateAfterMap() throws IOException {     try (Directory directory = newDirectory()) {         Integer numDocs = randomIntBetween(1, 100).         try (RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory)) {             for (int i = 0. i < numDocs. i++) {                 indexWriter.addDocument(singleton(new SortedNumericDocValuesField("number", i))).             }         }         try (IndexReader indexReader = DirectoryReader.open(directory)) {             ScriptedMetricAggregationBuilder aggregationBuilder = new ScriptedMetricAggregationBuilder(AGG_NAME).             aggregationBuilder.initScript(INIT_SCRIPT).mapScript(MAP_SCRIPT_SELF_REF).combineScript(COMBINE_SCRIPT_PARAMS).reduceScript(REDUCE_SCRIPT).             IllegalArgumentException ex = expectThrows(IllegalArgumentException.class, () -> search(newSearcher(indexReader, true, true), new MatchAllDocsQuery(), aggregationBuilder)).             assertEquals("Iterable object is self-referencing itself (Scripted metric aggs map script)", ex.getMessage()).         }     } }
false;public;0;17;;public void testSelfReferencingAggStateAfterCombine() throws IOException {     try (Directory directory = newDirectory()) {         try (RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory)) {         // No need to add docs for this test         }         try (IndexReader indexReader = DirectoryReader.open(directory)) {             ScriptedMetricAggregationBuilder aggregationBuilder = new ScriptedMetricAggregationBuilder(AGG_NAME).             aggregationBuilder.initScript(INIT_SCRIPT).mapScript(MAP_SCRIPT).combineScript(COMBINE_SCRIPT_SELF_REF).reduceScript(REDUCE_SCRIPT).             IllegalArgumentException ex = expectThrows(IllegalArgumentException.class, () -> search(newSearcher(indexReader, true, true), new MatchAllDocsQuery(), aggregationBuilder)).             assertEquals("Iterable object is self-referencing itself (Scripted metric aggs combine script)", ex.getMessage()).         }     } }
true;protected;1;8;/**  * We cannot use Mockito for mocking QueryShardContext in this case because  * script-related methods (e.g. QueryShardContext#getLazyExecutableScript)  * is final and cannot be mocked  */ ;/**  * We cannot use Mockito for mocking QueryShardContext in this case because  * script-related methods (e.g. QueryShardContext#getLazyExecutableScript)  * is final and cannot be mocked  */ @Override protected QueryShardContext queryShardContextMock(MapperService mapperService) {     MockScriptEngine scriptEngine = new MockScriptEngine(MockScriptEngine.NAME, SCRIPTS, Collections.emptyMap()).     Map<String, ScriptEngine> engines = Collections.singletonMap(scriptEngine.getType(), scriptEngine).     ScriptService scriptService = new ScriptService(Settings.EMPTY, engines, ScriptModule.CORE_CONTEXTS).     return new QueryShardContext(0, mapperService.getIndexSettings(), null, null, mapperService, null, scriptService, xContentRegistry(), writableRegistry(), null, null, System::currentTimeMillis, null). }
