# id;timestamp;commentText;codeText;commentWords;codeWords
ScriptedMetricAggregatorTests -> public void testScriptedMetricWithCombineAccessesScores() throws IOException;1536314350;test that uses the score of the documents;public void testScriptedMetricWithCombineAccessesScores() throws IOException {_        try (Directory directory = newDirectory()) {_            Integer numDocs = randomInt(100)__            try (RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory)) {_                for (int i = 0_ i < numDocs_ i++) {_                    indexWriter.addDocument(singleton(new SortedNumericDocValuesField("number", i)))__                }_            }_            try (IndexReader indexReader = DirectoryReader.open(directory)) {_                ScriptedMetricAggregationBuilder aggregationBuilder = new ScriptedMetricAggregationBuilder(AGG_NAME)__                aggregationBuilder.initScript(INIT_SCRIPT_SCORE).mapScript(MAP_SCRIPT_SCORE).combineScript(COMBINE_SCRIPT_SCORE)__                ScriptedMetric scriptedMetric = search(newSearcher(indexReader, true, true), new MatchAllDocsQuery(), aggregationBuilder)__                assertEquals(AGG_NAME, scriptedMetric.getName())__                assertNotNull(scriptedMetric.aggregation())__                _                assertEquals((double) numDocs, scriptedMetric.aggregation())__            }_        }_    };test,that,uses,the,score,of,the,documents;public,void,test,scripted,metric,with,combine,accesses,scores,throws,ioexception,try,directory,directory,new,directory,integer,num,docs,random,int,100,try,random,index,writer,index,writer,new,random,index,writer,random,directory,for,int,i,0,i,num,docs,i,index,writer,add,document,singleton,new,sorted,numeric,doc,values,field,number,i,try,index,reader,index,reader,directory,reader,open,directory,scripted,metric,aggregation,builder,aggregation,builder,new,scripted,metric,aggregation,builder,aggregation,builder,init,script,map,script,combine,script,scripted,metric,scripted,metric,search,new,searcher,index,reader,true,true,new,match,all,docs,query,aggregation,builder,assert,equals,scripted,metric,get,name,assert,not,null,scripted,metric,aggregation,assert,equals,double,num,docs,scripted,metric,aggregation
ScriptedMetricAggregatorTests -> public void testScriptedMetricWithCombineAccessesScores() throws IOException;1538170812;test that uses the score of the documents;public void testScriptedMetricWithCombineAccessesScores() throws IOException {_        try (Directory directory = newDirectory()) {_            Integer numDocs = randomInt(100)__            try (RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory)) {_                for (int i = 0_ i < numDocs_ i++) {_                    indexWriter.addDocument(singleton(new SortedNumericDocValuesField("number", i)))__                }_            }_            try (IndexReader indexReader = DirectoryReader.open(directory)) {_                ScriptedMetricAggregationBuilder aggregationBuilder = new ScriptedMetricAggregationBuilder(AGG_NAME)__                aggregationBuilder.initScript(INIT_SCRIPT_SCORE).mapScript(MAP_SCRIPT_SCORE).combineScript(COMBINE_SCRIPT_SCORE)__                ScriptedMetric scriptedMetric = search(newSearcher(indexReader, true, true), new MatchAllDocsQuery(), aggregationBuilder)__                assertEquals(AGG_NAME, scriptedMetric.getName())__                assertNotNull(scriptedMetric.aggregation())__                _                assertEquals((double) numDocs, scriptedMetric.aggregation())__            }_        }_    };test,that,uses,the,score,of,the,documents;public,void,test,scripted,metric,with,combine,accesses,scores,throws,ioexception,try,directory,directory,new,directory,integer,num,docs,random,int,100,try,random,index,writer,index,writer,new,random,index,writer,random,directory,for,int,i,0,i,num,docs,i,index,writer,add,document,singleton,new,sorted,numeric,doc,values,field,number,i,try,index,reader,index,reader,directory,reader,open,directory,scripted,metric,aggregation,builder,aggregation,builder,new,scripted,metric,aggregation,builder,aggregation,builder,init,script,map,script,combine,script,scripted,metric,scripted,metric,search,new,searcher,index,reader,true,true,new,match,all,docs,query,aggregation,builder,assert,equals,scripted,metric,get,name,assert,not,null,scripted,metric,aggregation,assert,equals,double,num,docs,scripted,metric,aggregation
ScriptedMetricAggregatorTests -> public void testScriptedMetricWithCombineAccessesScores() throws IOException;1538579488;test that uses the score of the documents;public void testScriptedMetricWithCombineAccessesScores() throws IOException {_        try (Directory directory = newDirectory()) {_            Integer numDocs = randomInt(100)__            try (RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory)) {_                for (int i = 0_ i < numDocs_ i++) {_                    indexWriter.addDocument(singleton(new SortedNumericDocValuesField("number", i)))__                }_            }_            try (IndexReader indexReader = DirectoryReader.open(directory)) {_                ScriptedMetricAggregationBuilder aggregationBuilder = new ScriptedMetricAggregationBuilder(AGG_NAME)__                aggregationBuilder.initScript(INIT_SCRIPT_SCORE).mapScript(MAP_SCRIPT_SCORE)_                    .combineScript(COMBINE_SCRIPT_SCORE).reduceScript(REDUCE_SCRIPT)__                ScriptedMetric scriptedMetric = search(newSearcher(indexReader, true, true), new MatchAllDocsQuery(), aggregationBuilder)__                assertEquals(AGG_NAME, scriptedMetric.getName())__                assertNotNull(scriptedMetric.aggregation())__                _                assertEquals((double) numDocs, scriptedMetric.aggregation())__            }_        }_    };test,that,uses,the,score,of,the,documents;public,void,test,scripted,metric,with,combine,accesses,scores,throws,ioexception,try,directory,directory,new,directory,integer,num,docs,random,int,100,try,random,index,writer,index,writer,new,random,index,writer,random,directory,for,int,i,0,i,num,docs,i,index,writer,add,document,singleton,new,sorted,numeric,doc,values,field,number,i,try,index,reader,index,reader,directory,reader,open,directory,scripted,metric,aggregation,builder,aggregation,builder,new,scripted,metric,aggregation,builder,aggregation,builder,init,script,map,script,combine,script,reduce,script,scripted,metric,scripted,metric,search,new,searcher,index,reader,true,true,new,match,all,docs,query,aggregation,builder,assert,equals,scripted,metric,get,name,assert,not,null,scripted,metric,aggregation,assert,equals,double,num,docs,scripted,metric,aggregation
ScriptedMetricAggregatorTests -> public void testScriptedMetricWithCombine() throws IOException;1536314350;test that combine script sums the list produced by the "mapScript";public void testScriptedMetricWithCombine() throws IOException {_        try (Directory directory = newDirectory()) {_            Integer numDocs = randomInt(100)__            try (RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory)) {_                for (int i = 0_ i < numDocs_ i++) {_                    indexWriter.addDocument(singleton(new SortedNumericDocValuesField("number", i)))__                }_            }_            try (IndexReader indexReader = DirectoryReader.open(directory)) {_                ScriptedMetricAggregationBuilder aggregationBuilder = new ScriptedMetricAggregationBuilder(AGG_NAME)__                aggregationBuilder.initScript(INIT_SCRIPT).mapScript(MAP_SCRIPT).combineScript(COMBINE_SCRIPT)__                ScriptedMetric scriptedMetric = search(newSearcher(indexReader, true, true), new MatchAllDocsQuery(), aggregationBuilder)__                assertEquals(AGG_NAME, scriptedMetric.getName())__                assertNotNull(scriptedMetric.aggregation())__                assertEquals(numDocs, scriptedMetric.aggregation())__            }_        }_    };test,that,combine,script,sums,the,list,produced,by,the,map,script;public,void,test,scripted,metric,with,combine,throws,ioexception,try,directory,directory,new,directory,integer,num,docs,random,int,100,try,random,index,writer,index,writer,new,random,index,writer,random,directory,for,int,i,0,i,num,docs,i,index,writer,add,document,singleton,new,sorted,numeric,doc,values,field,number,i,try,index,reader,index,reader,directory,reader,open,directory,scripted,metric,aggregation,builder,aggregation,builder,new,scripted,metric,aggregation,builder,aggregation,builder,init,script,map,script,combine,script,scripted,metric,scripted,metric,search,new,searcher,index,reader,true,true,new,match,all,docs,query,aggregation,builder,assert,equals,scripted,metric,get,name,assert,not,null,scripted,metric,aggregation,assert,equals,num,docs,scripted,metric,aggregation
ScriptedMetricAggregatorTests -> public void testScriptedMetricWithCombine() throws IOException;1538170812;test that combine script sums the list produced by the "mapScript";public void testScriptedMetricWithCombine() throws IOException {_        try (Directory directory = newDirectory()) {_            Integer numDocs = randomInt(100)__            try (RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory)) {_                for (int i = 0_ i < numDocs_ i++) {_                    indexWriter.addDocument(singleton(new SortedNumericDocValuesField("number", i)))__                }_            }_            try (IndexReader indexReader = DirectoryReader.open(directory)) {_                ScriptedMetricAggregationBuilder aggregationBuilder = new ScriptedMetricAggregationBuilder(AGG_NAME)__                aggregationBuilder.initScript(INIT_SCRIPT).mapScript(MAP_SCRIPT).combineScript(COMBINE_SCRIPT)__                ScriptedMetric scriptedMetric = search(newSearcher(indexReader, true, true), new MatchAllDocsQuery(), aggregationBuilder)__                assertEquals(AGG_NAME, scriptedMetric.getName())__                assertNotNull(scriptedMetric.aggregation())__                assertEquals(numDocs, scriptedMetric.aggregation())__            }_        }_    };test,that,combine,script,sums,the,list,produced,by,the,map,script;public,void,test,scripted,metric,with,combine,throws,ioexception,try,directory,directory,new,directory,integer,num,docs,random,int,100,try,random,index,writer,index,writer,new,random,index,writer,random,directory,for,int,i,0,i,num,docs,i,index,writer,add,document,singleton,new,sorted,numeric,doc,values,field,number,i,try,index,reader,index,reader,directory,reader,open,directory,scripted,metric,aggregation,builder,aggregation,builder,new,scripted,metric,aggregation,builder,aggregation,builder,init,script,map,script,combine,script,scripted,metric,scripted,metric,search,new,searcher,index,reader,true,true,new,match,all,docs,query,aggregation,builder,assert,equals,scripted,metric,get,name,assert,not,null,scripted,metric,aggregation,assert,equals,num,docs,scripted,metric,aggregation
ScriptedMetricAggregatorTests -> public void testScriptedMetricWithCombine() throws IOException;1538579488;test that combine script sums the list produced by the "mapScript";public void testScriptedMetricWithCombine() throws IOException {_        try (Directory directory = newDirectory()) {_            Integer numDocs = randomInt(100)__            try (RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory)) {_                for (int i = 0_ i < numDocs_ i++) {_                    indexWriter.addDocument(singleton(new SortedNumericDocValuesField("number", i)))__                }_            }_            try (IndexReader indexReader = DirectoryReader.open(directory)) {_                ScriptedMetricAggregationBuilder aggregationBuilder = new ScriptedMetricAggregationBuilder(AGG_NAME)__                aggregationBuilder.initScript(INIT_SCRIPT).mapScript(MAP_SCRIPT)_                    .combineScript(COMBINE_SCRIPT).reduceScript(REDUCE_SCRIPT)__                ScriptedMetric scriptedMetric = search(newSearcher(indexReader, true, true), new MatchAllDocsQuery(), aggregationBuilder)__                assertEquals(AGG_NAME, scriptedMetric.getName())__                assertNotNull(scriptedMetric.aggregation())__                assertEquals(numDocs, scriptedMetric.aggregation())__            }_        }_    };test,that,combine,script,sums,the,list,produced,by,the,map,script;public,void,test,scripted,metric,with,combine,throws,ioexception,try,directory,directory,new,directory,integer,num,docs,random,int,100,try,random,index,writer,index,writer,new,random,index,writer,random,directory,for,int,i,0,i,num,docs,i,index,writer,add,document,singleton,new,sorted,numeric,doc,values,field,number,i,try,index,reader,index,reader,directory,reader,open,directory,scripted,metric,aggregation,builder,aggregation,builder,new,scripted,metric,aggregation,builder,aggregation,builder,init,script,map,script,combine,script,reduce,script,scripted,metric,scripted,metric,search,new,searcher,index,reader,true,true,new,match,all,docs,query,aggregation,builder,assert,equals,scripted,metric,get,name,assert,not,null,scripted,metric,aggregation,assert,equals,num,docs,scripted,metric,aggregation
ScriptedMetricAggregatorTests -> @Override     protected QueryShardContext queryShardContextMock(MapperService mapperService);1536314350;We cannot use Mockito for mocking QueryShardContext in this case because_script-related methods (e.g. QueryShardContext#getLazyExecutableScript)_is final and cannot be mocked;@Override_    protected QueryShardContext queryShardContextMock(MapperService mapperService) {_        MockScriptEngine scriptEngine = new MockScriptEngine(MockScriptEngine.NAME, SCRIPTS)__        Map<String, ScriptEngine> engines = Collections.singletonMap(scriptEngine.getType(), scriptEngine)__        ScriptService scriptService =  new ScriptService(Settings.EMPTY, engines, ScriptModule.CORE_CONTEXTS)__        return new QueryShardContext(0, mapperService.getIndexSettings(), null, null, mapperService, null, scriptService,_                xContentRegistry(), writableRegistry(), null, null, System::currentTimeMillis, null)__    };we,cannot,use,mockito,for,mocking,query,shard,context,in,this,case,because,script,related,methods,e,g,query,shard,context,get,lazy,executable,script,is,final,and,cannot,be,mocked;override,protected,query,shard,context,query,shard,context,mock,mapper,service,mapper,service,mock,script,engine,script,engine,new,mock,script,engine,mock,script,engine,name,scripts,map,string,script,engine,engines,collections,singleton,map,script,engine,get,type,script,engine,script,service,script,service,new,script,service,settings,empty,engines,script,module,return,new,query,shard,context,0,mapper,service,get,index,settings,null,null,mapper,service,null,script,service,x,content,registry,writable,registry,null,null,system,current,time,millis,null
ScriptedMetricAggregatorTests -> @Override     protected QueryShardContext queryShardContextMock(MapperService mapperService);1538170812;We cannot use Mockito for mocking QueryShardContext in this case because_script-related methods (e.g. QueryShardContext#getLazyExecutableScript)_is final and cannot be mocked;@Override_    protected QueryShardContext queryShardContextMock(MapperService mapperService) {_        MockScriptEngine scriptEngine = new MockScriptEngine(MockScriptEngine.NAME, SCRIPTS, Collections.emptyMap())__        Map<String, ScriptEngine> engines = Collections.singletonMap(scriptEngine.getType(), scriptEngine)__        ScriptService scriptService =  new ScriptService(Settings.EMPTY, engines, ScriptModule.CORE_CONTEXTS)__        return new QueryShardContext(0, mapperService.getIndexSettings(), null, null, mapperService, null, scriptService,_                xContentRegistry(), writableRegistry(), null, null, System::currentTimeMillis, null)__    };we,cannot,use,mockito,for,mocking,query,shard,context,in,this,case,because,script,related,methods,e,g,query,shard,context,get,lazy,executable,script,is,final,and,cannot,be,mocked;override,protected,query,shard,context,query,shard,context,mock,mapper,service,mapper,service,mock,script,engine,script,engine,new,mock,script,engine,mock,script,engine,name,scripts,collections,empty,map,map,string,script,engine,engines,collections,singleton,map,script,engine,get,type,script,engine,script,service,script,service,new,script,service,settings,empty,engines,script,module,return,new,query,shard,context,0,mapper,service,get,index,settings,null,null,mapper,service,null,script,service,x,content,registry,writable,registry,null,null,system,current,time,millis,null
ScriptedMetricAggregatorTests -> @Override     protected QueryShardContext queryShardContextMock(MapperService mapperService);1538579488;We cannot use Mockito for mocking QueryShardContext in this case because_script-related methods (e.g. QueryShardContext#getLazyExecutableScript)_is final and cannot be mocked;@Override_    protected QueryShardContext queryShardContextMock(MapperService mapperService) {_        MockScriptEngine scriptEngine = new MockScriptEngine(MockScriptEngine.NAME, SCRIPTS, Collections.emptyMap())__        Map<String, ScriptEngine> engines = Collections.singletonMap(scriptEngine.getType(), scriptEngine)__        ScriptService scriptService =  new ScriptService(Settings.EMPTY, engines, ScriptModule.CORE_CONTEXTS)__        return new QueryShardContext(0, mapperService.getIndexSettings(), null, null, mapperService, null, scriptService,_                xContentRegistry(), writableRegistry(), null, null, System::currentTimeMillis, null)__    };we,cannot,use,mockito,for,mocking,query,shard,context,in,this,case,because,script,related,methods,e,g,query,shard,context,get,lazy,executable,script,is,final,and,cannot,be,mocked;override,protected,query,shard,context,query,shard,context,mock,mapper,service,mapper,service,mock,script,engine,script,engine,new,mock,script,engine,mock,script,engine,name,scripts,collections,empty,map,map,string,script,engine,engines,collections,singleton,map,script,engine,get,type,script,engine,script,service,script,service,new,script,service,settings,empty,engines,script,module,return,new,query,shard,context,0,mapper,service,get,index,settings,null,null,mapper,service,null,script,service,x,content,registry,writable,registry,null,null,system,current,time,millis,null
ScriptedMetricAggregatorTests -> public void testScriptedMetricWithoutCombine() throws IOException;1536314350;without combine script, the "states" map should contain a list of the size of the number of documents matched;public void testScriptedMetricWithoutCombine() throws IOException {_        try (Directory directory = newDirectory()) {_            int numDocs = randomInt(100)__            try (RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory)) {_                for (int i = 0_ i < numDocs_ i++) {_                    indexWriter.addDocument(singleton(new SortedNumericDocValuesField("number", i)))__                }_            }_            try (IndexReader indexReader = DirectoryReader.open(directory)) {_                ScriptedMetricAggregationBuilder aggregationBuilder = new ScriptedMetricAggregationBuilder(AGG_NAME)__                aggregationBuilder.initScript(INIT_SCRIPT).mapScript(MAP_SCRIPT)__                ScriptedMetric scriptedMetric = search(newSearcher(indexReader, true, true), new MatchAllDocsQuery(), aggregationBuilder)__                assertEquals(AGG_NAME, scriptedMetric.getName())__                assertNotNull(scriptedMetric.aggregation())__                @SuppressWarnings("unchecked")_                Map<String, Object> agg = (Map<String, Object>) scriptedMetric.aggregation()__                @SuppressWarnings("unchecked")_                List<Integer> list = (List<Integer>) agg.get("collector")__                assertEquals(numDocs, list.size())__            }_        }_    };without,combine,script,the,states,map,should,contain,a,list,of,the,size,of,the,number,of,documents,matched;public,void,test,scripted,metric,without,combine,throws,ioexception,try,directory,directory,new,directory,int,num,docs,random,int,100,try,random,index,writer,index,writer,new,random,index,writer,random,directory,for,int,i,0,i,num,docs,i,index,writer,add,document,singleton,new,sorted,numeric,doc,values,field,number,i,try,index,reader,index,reader,directory,reader,open,directory,scripted,metric,aggregation,builder,aggregation,builder,new,scripted,metric,aggregation,builder,aggregation,builder,init,script,map,script,scripted,metric,scripted,metric,search,new,searcher,index,reader,true,true,new,match,all,docs,query,aggregation,builder,assert,equals,scripted,metric,get,name,assert,not,null,scripted,metric,aggregation,suppress,warnings,unchecked,map,string,object,agg,map,string,object,scripted,metric,aggregation,suppress,warnings,unchecked,list,integer,list,list,integer,agg,get,collector,assert,equals,num,docs,list,size
ScriptedMetricAggregatorTests -> public void testScriptedMetricWithoutCombine() throws IOException;1538170812;without combine script, the "states" map should contain a list of the size of the number of documents matched;public void testScriptedMetricWithoutCombine() throws IOException {_        try (Directory directory = newDirectory()) {_            int numDocs = randomInt(100)__            try (RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory)) {_                for (int i = 0_ i < numDocs_ i++) {_                    indexWriter.addDocument(singleton(new SortedNumericDocValuesField("number", i)))__                }_            }_            try (IndexReader indexReader = DirectoryReader.open(directory)) {_                ScriptedMetricAggregationBuilder aggregationBuilder = new ScriptedMetricAggregationBuilder(AGG_NAME)__                aggregationBuilder.initScript(INIT_SCRIPT).mapScript(MAP_SCRIPT)__                ScriptedMetric scriptedMetric = search(newSearcher(indexReader, true, true), new MatchAllDocsQuery(), aggregationBuilder)__                assertEquals(AGG_NAME, scriptedMetric.getName())__                assertNotNull(scriptedMetric.aggregation())__                @SuppressWarnings("unchecked")_                Map<String, Object> agg = (Map<String, Object>) scriptedMetric.aggregation()__                @SuppressWarnings("unchecked")_                List<Integer> list = (List<Integer>) agg.get("collector")__                assertEquals(numDocs, list.size())__            }_        }_    };without,combine,script,the,states,map,should,contain,a,list,of,the,size,of,the,number,of,documents,matched;public,void,test,scripted,metric,without,combine,throws,ioexception,try,directory,directory,new,directory,int,num,docs,random,int,100,try,random,index,writer,index,writer,new,random,index,writer,random,directory,for,int,i,0,i,num,docs,i,index,writer,add,document,singleton,new,sorted,numeric,doc,values,field,number,i,try,index,reader,index,reader,directory,reader,open,directory,scripted,metric,aggregation,builder,aggregation,builder,new,scripted,metric,aggregation,builder,aggregation,builder,init,script,map,script,scripted,metric,scripted,metric,search,new,searcher,index,reader,true,true,new,match,all,docs,query,aggregation,builder,assert,equals,scripted,metric,get,name,assert,not,null,scripted,metric,aggregation,suppress,warnings,unchecked,map,string,object,agg,map,string,object,scripted,metric,aggregation,suppress,warnings,unchecked,list,integer,list,list,integer,agg,get,collector,assert,equals,num,docs,list,size
