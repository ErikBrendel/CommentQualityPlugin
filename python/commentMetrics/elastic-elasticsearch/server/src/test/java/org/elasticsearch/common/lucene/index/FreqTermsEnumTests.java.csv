commented;modifiers;parameterAmount;loc;comment;code
false;public;0;81;;@Before @Override public void setUp() throws Exception {     super.setUp().     referenceAll = new HashMap<>().     referenceNotDeleted = new HashMap<>().     referenceFilter = new HashMap<>().     Directory dir = newDirectory().     // use keyword analyzer we rely on the stored field holding the exact term.     IndexWriterConfig conf = newIndexWriterConfig(new KeywordAnalyzer()).     if (frequently()) {         // we don't want to do any merges, so we won't expunge deletes         conf.setMergePolicy(NoMergePolicy.INSTANCE).     }     iw = new IndexWriter(dir, conf).     terms = new String[scaledRandomIntBetween(10, 300)].     for (int i = 0. i < terms.length. i++) {         terms[i] = randomAlphaOfLength(5).     }     int numberOfDocs = scaledRandomIntBetween(30, 300).     Document[] docs = new Document[numberOfDocs].     for (int i = 0. i < numberOfDocs. i++) {         Document doc = new Document().         doc.add(new StringField("id", Integer.toString(i), Field.Store.YES)).         docs[i] = doc.         for (String term : terms) {             if (randomBoolean()) {                 continue.             }             int freq = randomIntBetween(1, 3).             for (int j = 0. j < freq. j++) {                 doc.add(new TextField("field", term, Field.Store.YES)).             }         }     }     for (int i = 0. i < docs.length. i++) {         Document doc = docs[i].         iw.addDocument(doc).         if (rarely()) {             iw.commit().         }     }     Set<String> deletedIds = new HashSet<>().     for (int i = 0. i < docs.length. i++) {         Document doc = docs[i].         if (randomInt(5) == 2) {             Term idTerm = new Term("id", doc.getField("id").stringValue()).             deletedIds.add(idTerm.text()).             iw.deleteDocuments(idTerm).         }     }     for (String term : terms) {         referenceAll.put(term, new FreqHolder()).         referenceFilter.put(term, new FreqHolder()).         referenceNotDeleted.put(term, new FreqHolder()).     }     // now go over each doc, build the relevant references and filter     reader = DirectoryReader.open(iw).     List<BytesRef> filterTerms = new ArrayList<>().     for (int docId = 0. docId < reader.maxDoc(). docId++) {         Document doc = reader.document(docId).         addFreqs(doc, referenceAll).         if (!deletedIds.contains(doc.getField("id").stringValue())) {             addFreqs(doc, referenceNotDeleted).             if (randomBoolean()) {                 filterTerms.add(new BytesRef(doc.getField("id").stringValue())).                 addFreqs(doc, referenceFilter).             }         }     }     filter = new TermInSetQuery("id", filterTerms). }
false;private;2;12;;private void addFreqs(Document doc, Map<String, FreqHolder> reference) {     Set<String> addedDocFreq = new HashSet<>().     for (IndexableField field : doc.getFields("field")) {         String term = field.stringValue().         FreqHolder freqHolder = reference.get(term).         if (!addedDocFreq.contains(term)) {             freqHolder.docFreq++.             addedDocFreq.add(term).         }         freqHolder.totalTermFreq++.     } }
false;public;0;6;;@After @Override public void tearDown() throws Exception {     IOUtils.close(reader, iw, iw.getDirectory()).     super.tearDown(). }
false;public;0;5;;public void testAllFreqs() throws Exception {     assertAgainstReference(true, true, null, referenceAll).     assertAgainstReference(true, false, null, referenceAll).     assertAgainstReference(false, true, null, referenceAll). }
false;public;0;5;;public void testNonDeletedFreqs() throws Exception {     assertAgainstReference(true, true, Queries.newMatchAllQuery(), referenceNotDeleted).     assertAgainstReference(true, false, Queries.newMatchAllQuery(), referenceNotDeleted).     assertAgainstReference(false, true, Queries.newMatchAllQuery(), referenceNotDeleted). }
false;public;0;5;;public void testFilterFreqs() throws Exception {     assertAgainstReference(true, true, filter, referenceFilter).     assertAgainstReference(true, false, filter, referenceFilter).     assertAgainstReference(false, true, filter, referenceFilter). }
false;private;4;5;;private void assertAgainstReference(boolean docFreq, boolean totalTermFreq, Query filter, Map<String, FreqHolder> reference) throws Exception {     FreqTermsEnum freqTermsEnum = new FreqTermsEnum(reader, "field", docFreq, totalTermFreq, filter, BigArrays.NON_RECYCLING_INSTANCE).     assertAgainstReference(freqTermsEnum, reference, docFreq, totalTermFreq). }
false;private;4;22;;private void assertAgainstReference(FreqTermsEnum termsEnum, Map<String, FreqHolder> reference, boolean docFreq, boolean totalTermFreq) throws Exception {     int cycles = randomIntBetween(1, 5).     for (int i = 0. i < cycles. i++) {         List<String> terms = new ArrayList<>(Arrays.asList(this.terms)).         Collections.shuffle(terms, random()).         for (String term : terms) {             if (!termsEnum.seekExact(new BytesRef(term))) {                 assertThat("term : " + term, reference.get(term).docFreq, is(0)).                 continue.             }             if (docFreq) {                 assertThat("cycle " + i + ", term " + term + ", docFreq", termsEnum.docFreq(), equalTo(reference.get(term).docFreq)).             }             if (totalTermFreq) {                 assertThat("cycle " + i + ", term " + term + ", totalTermFreq", termsEnum.totalTermFreq(), equalTo(reference.get(term).totalTermFreq)).             }         }     } }
