commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;public void testNoDocs() throws IOException {     testCase(new MatchAllDocsQuery(), iw -> {     // Intentionally not writing any docs     }, card -> {         assertEquals(0.0, card.getValue(), 0).         assertFalse(AggregationInspectionHelper.hasValue(card)).     }). }
false;public;0;9;;public void testNoMatchingField() throws IOException {     testCase(new MatchAllDocsQuery(), iw -> {         iw.addDocument(singleton(new SortedNumericDocValuesField("wrong_number", 7))).         iw.addDocument(singleton(new SortedNumericDocValuesField("wrong_number", 1))).     }, card -> {         assertEquals(0.0, card.getValue(), 0).         assertFalse(AggregationInspectionHelper.hasValue(card)).     }). }
false;public;0;9;;public void testSomeMatchesSortedNumericDocValues() throws IOException {     testCase(new DocValuesFieldExistsQuery("number"), iw -> {         iw.addDocument(singleton(new SortedNumericDocValuesField("number", 7))).         iw.addDocument(singleton(new SortedNumericDocValuesField("number", 1))).     }, card -> {         assertEquals(2, card.getValue(), 0).         assertTrue(AggregationInspectionHelper.hasValue(card)).     }). }
false;public;0;9;;public void testSomeMatchesNumericDocValues() throws IOException {     testCase(new DocValuesFieldExistsQuery("number"), iw -> {         iw.addDocument(singleton(new NumericDocValuesField("number", 7))).         iw.addDocument(singleton(new NumericDocValuesField("number", 1))).     }, card -> {         assertEquals(2, card.getValue(), 0).         assertTrue(AggregationInspectionHelper.hasValue(card)).     }). }
false;public;0;11;;public void testQueryFiltering() throws IOException {     testCase(IntPoint.newRangeQuery("number", 0, 5), iw -> {         iw.addDocument(Arrays.asList(new IntPoint("number", 7), new SortedNumericDocValuesField("number", 7))).         iw.addDocument(Arrays.asList(new IntPoint("number", 1), new SortedNumericDocValuesField("number", 1))).     }, card -> {         assertEquals(1, card.getValue(), 0).         assertTrue(AggregationInspectionHelper.hasValue(card)).     }). }
false;public;0;11;;public void testQueryFiltersAll() throws IOException {     testCase(IntPoint.newRangeQuery("number", -1, 0), iw -> {         iw.addDocument(Arrays.asList(new IntPoint("number", 7), new SortedNumericDocValuesField("number", 7))).         iw.addDocument(Arrays.asList(new IntPoint("number", 1), new SortedNumericDocValuesField("number", 1))).     }, card -> {         assertEquals(0.0, card.getValue(), 0).         assertFalse(AggregationInspectionHelper.hasValue(card)).     }). }
false;private;3;25;;private void testCase(Query query, CheckedConsumer<RandomIndexWriter, IOException> buildIndex, Consumer<InternalCardinality> verify) throws IOException {     Directory directory = newDirectory().     RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory).     buildIndex.accept(indexWriter).     indexWriter.close().     IndexReader indexReader = DirectoryReader.open(directory).     IndexSearcher indexSearcher = newSearcher(indexReader, true, true).     CardinalityAggregationBuilder aggregationBuilder = new CardinalityAggregationBuilder("_name", ValueType.NUMERIC).field("number").     MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.LONG).     fieldType.setName("number").     CardinalityAggregator aggregator = createAggregator(aggregationBuilder, indexSearcher, fieldType).     aggregator.preCollection().     indexSearcher.search(query, aggregator).     aggregator.postCollection().     verify.accept((InternalCardinality) aggregator.buildAggregation(0L)).     indexReader.close().     directory.close(). }
