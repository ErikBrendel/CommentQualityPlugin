commented;modifiers;parameterAmount;loc;comment;code
false;public;0;30;;public void testExactWindowSizeAdjustment() throws Exception {     ThreadContext context = new ThreadContext(Settings.EMPTY).     ResizableBlockingQueue<Runnable> queue = new ResizableBlockingQueue<>(ConcurrentCollections.<Runnable>newBlockingQueue(), 100).     int threads = randomIntBetween(1, 3).     int measureWindow = 3.     logger.info("--> auto-queue with a measurement window of {} tasks", measureWindow).     QueueResizingEsThreadPoolExecutor executor = new QueueResizingEsThreadPoolExecutor("test-threadpool", threads, threads, 1000, TimeUnit.MILLISECONDS, queue, 10, 1000, fastWrapper(), measureWindow, TimeValue.timeValueMillis(1), EsExecutors.daemonThreadFactory("queuetest"), new EsAbortPolicy(), context).     executor.prestartAllCoreThreads().     logger.info("--> executor: {}", executor).     // Execute exactly 3 (measureWindow) times     executor.execute(() -> {     }).     executor.execute(() -> {     }).     executor.execute(() -> {     }).     // The queue capacity should have increased by 50 since they were very fast tasks     assertBusy(() -> {         assertThat(queue.capacity(), equalTo(150)).     }).     executor.shutdown().     executor.awaitTermination(10, TimeUnit.SECONDS).     context.close(). }
false;public;0;28;;public void testAutoQueueSizingUp() throws Exception {     ThreadContext context = new ThreadContext(Settings.EMPTY).     ResizableBlockingQueue<Runnable> queue = new ResizableBlockingQueue<>(ConcurrentCollections.<Runnable>newBlockingQueue(), 2000).     int threads = randomIntBetween(1, 10).     int measureWindow = randomIntBetween(100, 200).     logger.info("--> auto-queue with a measurement window of {} tasks", measureWindow).     QueueResizingEsThreadPoolExecutor executor = new QueueResizingEsThreadPoolExecutor("test-threadpool", threads, threads, 1000, TimeUnit.MILLISECONDS, queue, 10, 3000, fastWrapper(), measureWindow, TimeValue.timeValueMillis(1), EsExecutors.daemonThreadFactory("queuetest"), new EsAbortPolicy(), context).     executor.prestartAllCoreThreads().     logger.info("--> executor: {}", executor).     // Execute a task multiple times that takes 1ms     executeTask(executor, (measureWindow * 5) + 2).     assertBusy(() -> {         assertThat(queue.capacity(), greaterThan(2000)).     }).     executor.shutdown().     executor.awaitTermination(10, TimeUnit.SECONDS).     context.close(). }
false;public;0;27;;public void testAutoQueueSizingDown() throws Exception {     ThreadContext context = new ThreadContext(Settings.EMPTY).     ResizableBlockingQueue<Runnable> queue = new ResizableBlockingQueue<>(ConcurrentCollections.<Runnable>newBlockingQueue(), 2000).     int threads = randomIntBetween(1, 10).     int measureWindow = randomIntBetween(100, 200).     logger.info("--> auto-queue with a measurement window of {} tasks", measureWindow).     QueueResizingEsThreadPoolExecutor executor = new QueueResizingEsThreadPoolExecutor("test-threadpool", threads, threads, 1000, TimeUnit.MILLISECONDS, queue, 10, 3000, slowWrapper(), measureWindow, TimeValue.timeValueMillis(1), EsExecutors.daemonThreadFactory("queuetest"), new EsAbortPolicy(), context).     executor.prestartAllCoreThreads().     logger.info("--> executor: {}", executor).     // Execute a task multiple times that takes 1m     executeTask(executor, (measureWindow * 5) + 2).     assertBusy(() -> {         assertThat(queue.capacity(), lessThan(2000)).     }).     executor.shutdown().     executor.awaitTermination(10, TimeUnit.SECONDS).     context.close(). }
false;public;0;29;;public void testAutoQueueSizingWithMin() throws Exception {     ThreadContext context = new ThreadContext(Settings.EMPTY).     ResizableBlockingQueue<Runnable> queue = new ResizableBlockingQueue<>(ConcurrentCollections.<Runnable>newBlockingQueue(), 5000).     int threads = randomIntBetween(1, 5).     int measureWindow = randomIntBetween(10, 100).     int min = randomIntBetween(4981, 4999).     logger.info("--> auto-queue with a measurement window of {} tasks", measureWindow).     QueueResizingEsThreadPoolExecutor executor = new QueueResizingEsThreadPoolExecutor("test-threadpool", threads, threads, 1000, TimeUnit.MILLISECONDS, queue, min, 100000, slowWrapper(), measureWindow, TimeValue.timeValueMillis(1), EsExecutors.daemonThreadFactory("queuetest"), new EsAbortPolicy(), context).     executor.prestartAllCoreThreads().     logger.info("--> executor: {}", executor).     // Execute a task multiple times that takes 1m     executeTask(executor, (measureWindow * 5)).     // The queue capacity should decrease, but no lower than the minimum     assertBusy(() -> {         assertThat(queue.capacity(), equalTo(min)).     }).     executor.shutdown().     executor.awaitTermination(10, TimeUnit.SECONDS).     context.close(). }
false;public;0;30;;@TestLogging("org.elasticsearch.common.util.concurrent:DEBUG") public void testAutoQueueSizingWithMax() throws Exception {     ThreadContext context = new ThreadContext(Settings.EMPTY).     ResizableBlockingQueue<Runnable> queue = new ResizableBlockingQueue<>(ConcurrentCollections.<Runnable>newBlockingQueue(), 5000).     int threads = randomIntBetween(1, 5).     int measureWindow = randomIntBetween(10, 100).     int max = randomIntBetween(5010, 5024).     logger.info("--> auto-queue with a measurement window of {} tasks", measureWindow).     QueueResizingEsThreadPoolExecutor executor = new QueueResizingEsThreadPoolExecutor("test-threadpool", threads, threads, 1000, TimeUnit.MILLISECONDS, queue, 10, max, fastWrapper(), measureWindow, TimeValue.timeValueMillis(1), EsExecutors.daemonThreadFactory("queuetest"), new EsAbortPolicy(), context).     executor.prestartAllCoreThreads().     logger.info("--> executor: {}", executor).     // Execute a task multiple times that takes 1ms     executeTask(executor, measureWindow * 3).     // The queue capacity should increase, but no higher than the maximum     assertBusy(() -> {         assertThat(queue.capacity(), equalTo(max)).     }).     executor.shutdown().     executor.awaitTermination(10, TimeUnit.SECONDS).     context.close(). }
false;public;0;40;;public void testExecutionEWMACalculation() throws Exception {     ThreadContext context = new ThreadContext(Settings.EMPTY).     ResizableBlockingQueue<Runnable> queue = new ResizableBlockingQueue<>(ConcurrentCollections.<Runnable>newBlockingQueue(), 100).     QueueResizingEsThreadPoolExecutor executor = new QueueResizingEsThreadPoolExecutor("test-threadpool", 1, 1, 1000, TimeUnit.MILLISECONDS, queue, 10, 200, fastWrapper(), 10, TimeValue.timeValueMillis(1), EsExecutors.daemonThreadFactory("queuetest"), new EsAbortPolicy(), context).     executor.prestartAllCoreThreads().     logger.info("--> executor: {}", executor).     assertThat((long) executor.getTaskExecutionEWMA(), equalTo(0L)).     executeTask(executor, 1).     assertBusy(() -> {         assertThat((long) executor.getTaskExecutionEWMA(), equalTo(30L)).     }).     executeTask(executor, 1).     assertBusy(() -> {         assertThat((long) executor.getTaskExecutionEWMA(), equalTo(51L)).     }).     executeTask(executor, 1).     assertBusy(() -> {         assertThat((long) executor.getTaskExecutionEWMA(), equalTo(65L)).     }).     executeTask(executor, 1).     assertBusy(() -> {         assertThat((long) executor.getTaskExecutionEWMA(), equalTo(75L)).     }).     executeTask(executor, 1).     assertBusy(() -> {         assertThat((long) executor.getTaskExecutionEWMA(), equalTo(83L)).     }).     executor.shutdown().     executor.awaitTermination(10, TimeUnit.SECONDS).     context.close(). }
false;private;0;5;;private Function<Runnable, WrappedRunnable> fastWrapper() {     return (runnable) -> {         return new SettableTimedRunnable(TimeUnit.NANOSECONDS.toNanos(100)).     }. }
false;private;0;5;;private Function<Runnable, WrappedRunnable> slowWrapper() {     return (runnable) -> {         return new SettableTimedRunnable(TimeUnit.MINUTES.toNanos(2)).     }. }
true;private;2;6;/**  * Execute a blank task {@code times} times for the executor  */ ;/**  * Execute a blank task {@code times} times for the executor  */ private void executeTask(QueueResizingEsThreadPoolExecutor executor, int times) {     logger.info("--> executing a task [{}] times", times).     for (int i = 0. i < times. i++) {         executor.execute(() -> {         }).     } }
false;public;0;4;;@Override public long getTotalNanos() {     return timeTaken. }
false;public;0;4;;@Override public long getTotalExecutionNanos() {     return timeTaken. }
