commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Before public void setup() {     restRequest = new FakeRestRequest().     table = new Table().     table.startHeaders().     table.addCell("bulk.foo", "alias:f.desc:foo").     table.addCell("bulk.bar", "alias:b.desc:bar").     // should be matched as well due to the aliases     table.addCell("aliasedBulk", "alias:bulkWhatever.desc:bar").     table.addCell("aliasedSecondBulk", "alias:foobar,bulkolicious,bulkotastic.desc:bar").     // no match     table.addCell("unmatched", "alias:un.matched.desc:bar").     // invalid alias     table.addCell("invalidAliasesBulk", "alias:,,,.desc:bar").     // timestamp     table.addCell("timestamp", "alias:ts").     table.addCell("epoch", "alias:t").     table.endHeaders(). }
false;public;0;8;;public void testThatDisplayHeadersSupportWildcards() throws Exception {     restRequest.params().put("h", "bulk*").     List<RestTable.DisplayHeader> headers = buildDisplayHeaders(table, restRequest).     List<String> headerNames = getHeaderNames(headers).     assertThat(headerNames, contains("bulk.foo", "bulk.bar", "aliasedBulk", "aliasedSecondBulk")).     assertThat(headerNames, not(hasItem("unmatched"))). }
false;public;0;8;;public void testThatDisplayHeadersAreNotAddedTwice() throws Exception {     restRequest.params().put("h", "nonexistent,bulk*,bul*").     List<RestTable.DisplayHeader> headers = buildDisplayHeaders(table, restRequest).     List<String> headerNames = getHeaderNames(headers).     assertThat(headerNames, contains("bulk.foo", "bulk.bar", "aliasedBulk", "aliasedSecondBulk")).     assertThat(headerNames, not(hasItem("unmatched"))). }
false;public;0;5;;public void testThatWeUseTheAcceptHeaderJson() throws Exception {     assertResponse(Collections.singletonMap(ACCEPT, Collections.singletonList(APPLICATION_JSON)), APPLICATION_JSON, JSON_TABLE_BODY). }
false;public;0;5;;public void testThatWeUseTheAcceptHeaderYaml() throws Exception {     assertResponse(Collections.singletonMap(ACCEPT, Collections.singletonList(APPLICATION_YAML)), APPLICATION_YAML, YAML_TABLE_BODY). }
false;public;0;4;;public void testThatWeUseTheAcceptHeaderSmile() throws Exception {     assertResponseContentType(Collections.singletonMap(ACCEPT, Collections.singletonList(APPLICATION_SMILE)), APPLICATION_SMILE). }
false;public;0;4;;public void testThatWeUseTheAcceptHeaderCbor() throws Exception {     assertResponseContentType(Collections.singletonMap(ACCEPT, Collections.singletonList(APPLICATION_CBOR)), APPLICATION_CBOR). }
false;public;0;5;;public void testThatWeUseTheAcceptHeaderText() throws Exception {     assertResponse(Collections.singletonMap(ACCEPT, Collections.singletonList(TEXT_PLAIN)), TEXT_PLAIN, TEXT_TABLE_BODY). }
false;public;0;5;;public void testIgnoreContentType() throws Exception {     assertResponse(Collections.singletonMap(CONTENT_TYPE, Collections.singletonList(APPLICATION_JSON)), TEXT_PLAIN, TEXT_TABLE_BODY). }
false;public;0;10;;public void testThatDisplayHeadersWithoutTimestamp() throws Exception {     restRequest.params().put("h", "timestamp,epoch,bulk*").     restRequest.params().put("ts", "false").     List<RestTable.DisplayHeader> headers = buildDisplayHeaders(table, restRequest).     List<String> headerNames = getHeaderNames(headers).     assertThat(headerNames, contains("bulk.foo", "bulk.bar", "aliasedBulk", "aliasedSecondBulk")).     assertThat(headerNames, not(hasItem("timestamp"))).     assertThat(headerNames, not(hasItem("epoch"))). }
false;public;0;25;;public void testCompareRow() {     Table table = new Table().     table.startHeaders().     table.addCell("compare").     table.endHeaders().     for (Integer i : Arrays.asList(1, 2, 1)) {         table.startRow().         table.addCell(i).         table.endRow().     }     RestTable.TableIndexComparator comparator = new RestTable.TableIndexComparator(table, Collections.singletonList(new RestTable.ColumnOrderElement("compare", false))).     assertTrue(comparator.compare(0, 1) < 0).     assertTrue(comparator.compare(0, 2) == 0).     assertTrue(comparator.compare(1, 2) > 0).     RestTable.TableIndexComparator reverseComparator = new RestTable.TableIndexComparator(table, Collections.singletonList(new RestTable.ColumnOrderElement("compare", true))).     assertTrue(reverseComparator.compare(0, 1) > 0).     assertTrue(reverseComparator.compare(0, 2) == 0).     assertTrue(reverseComparator.compare(1, 2) < 0). }
false;public;0;12;;public void testRowOutOfBounds() {     Table table = new Table().     table.startHeaders().     table.addCell("compare").     table.endHeaders().     RestTable.TableIndexComparator comparator = new RestTable.TableIndexComparator(table, Collections.singletonList(new RestTable.ColumnOrderElement("compare", false))).     Error e = expectThrows(AssertionError.class, () -> {         comparator.compare(0, 1).     }).     assertEquals("Invalid comparison of indices (0, 1): Table has 0 rows.", e.getMessage()). }
false;public;0;9;;public void testUnknownHeader() {     Table table = new Table().     table.startHeaders().     table.addCell("compare").     table.endHeaders().     restRequest.params().put("s", "notaheader").     Exception e = expectThrows(UnsupportedOperationException.class, () -> RestTable.getRowOrder(table, restRequest)).     assertEquals("Unable to sort by unknown sort key `notaheader`", e.getMessage()). }
false;public;0;15;;public void testAliasSort() {     Table table = new Table().     table.startHeaders().     table.addCell("compare", "alias:c.").     table.endHeaders().     List<Integer> comparisonList = Arrays.asList(3, 1, 2).     for (int i = 0. i < comparisonList.size(). i++) {         table.startRow().         table.addCell(comparisonList.get(i)).         table.endRow().     }     restRequest.params().put("s", "c").     List<Integer> rowOrder = RestTable.getRowOrder(table, restRequest).     assertEquals(Arrays.asList(1, 2, 0), rowOrder). }
false;public;0;15;;public void testReversedSort() {     Table table = new Table().     table.startHeaders().     table.addCell("reversed").     table.endHeaders().     List<Integer> comparisonList = Arrays.asList(0, 1, 2).     for (int i = 0. i < comparisonList.size(). i++) {         table.startRow().         table.addCell(comparisonList.get(i)).         table.endRow().     }     restRequest.params().put("s", "reversed:desc").     List<Integer> rowOrder = RestTable.getRowOrder(table, restRequest).     assertEquals(Arrays.asList(2, 1, 0), rowOrder). }
false;public;0;22;;public void testMultiSort() {     Table table = new Table().     table.startHeaders().     table.addCell("compare").     table.addCell("second.compare").     table.endHeaders().     List<Integer> comparisonList = Arrays.asList(3, 3, 2).     List<Integer> secondComparisonList = Arrays.asList(2, 1, 3).     for (int i = 0. i < comparisonList.size(). i++) {         table.startRow().         table.addCell(comparisonList.get(i)).         table.addCell(secondComparisonList.get(i)).         table.endRow().     }     restRequest.params().put("s", "compare,second.compare").     List<Integer> rowOrder = RestTable.getRowOrder(table, restRequest).     assertEquals(Arrays.asList(2, 1, 0), rowOrder).     restRequest.params().put("s", "compare:desc,second.compare").     rowOrder = RestTable.getRowOrder(table, restRequest).     assertEquals(Arrays.asList(1, 0, 2), rowOrder). }
false;public;1;3;;@Override public void sendResponse(RestResponse response) { }
false;private;2;21;;private RestResponse assertResponseContentType(Map<String, List<String>> headers, String mediaType) throws Exception {     FakeRestRequest requestWithAcceptHeader = new FakeRestRequest.Builder(xContentRegistry()).withHeaders(headers).build().     table.startRow().     table.addCell("foo").     table.addCell("foo").     table.addCell("foo").     table.addCell("foo").     table.addCell("foo").     table.addCell("foo").     table.addCell("foo").     table.addCell("foo").     table.endRow().     RestResponse response = buildResponse(table, new AbstractRestChannel(requestWithAcceptHeader, true) {          @Override         public void sendResponse(RestResponse response) {         }     }).     assertThat(response.contentType(), equalTo(mediaType)).     return response. }
false;private;3;4;;private void assertResponse(Map<String, List<String>> headers, String mediaType, String body) throws Exception {     RestResponse response = assertResponseContentType(headers, mediaType).     assertThat(response.content().utf8ToString(), equalTo(body)). }
false;private;1;8;;private List<String> getHeaderNames(List<RestTable.DisplayHeader> headers) {     List<String> headerNames = new ArrayList<>().     for (RestTable.DisplayHeader header : headers) {         headerNames.add(header.name).     }     return headerNames. }
