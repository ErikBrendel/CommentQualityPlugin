commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;20;;@Override protected RetentionLeaseStats createTestInstance() {     final long primaryTerm = randomNonNegativeLong().     final long version = randomNonNegativeLong().     final int length = randomIntBetween(0, 8).     final Collection<RetentionLease> leases.     if (length == 0) {         leases = Collections.emptyList().     } else {         leases = new ArrayList<>(length).         for (int i = 0. i < length. i++) {             final String id = randomAlphaOfLength(8).             final long retainingSequenceNumber = randomLongBetween(SequenceNumbers.NO_OPS_PERFORMED, Long.MAX_VALUE).             final long timestamp = randomNonNegativeLong().             final String source = randomAlphaOfLength(8).             leases.add(new RetentionLease(id, retainingSequenceNumber, timestamp, source)).         }     }     return new RetentionLeaseStats(new RetentionLeases(primaryTerm, version, leases)). }
false;protected;0;4;;@Override protected Writeable.Reader<RetentionLeaseStats> instanceReader() {     return RetentionLeaseStats::new. }
