commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;6;;@Override protected <Request extends ActionRequest, Response extends ActionResponse> void doExecute(Action<Response> action, Request request, ActionListener<Response> listener) {     assertEquals(origin, threadPool().getThreadContext().getTransient(ThreadContext.ACTION_ORIGIN_TRANSIENT_NAME)).     super.doExecute(action, request, listener). }
false;public;0;28;;public void testSetsParentId() {     String origin = randomAlphaOfLength(7).     /*          * This mock will do nothing but verify that origin is set in the          * thread context before executing the action.          */     NoOpClient mock = new NoOpClient(getTestName()) {          @Override         protected <Request extends ActionRequest, Response extends ActionResponse> void doExecute(Action<Response> action, Request request, ActionListener<Response> listener) {             assertEquals(origin, threadPool().getThreadContext().getTransient(ThreadContext.ACTION_ORIGIN_TRANSIENT_NAME)).             super.doExecute(action, request, listener).         }     }.     try (OriginSettingClient client = new OriginSettingClient(mock, origin)) {         // All of these should have the origin set         client.bulk(new BulkRequest()).         client.search(new SearchRequest()).         client.clearScroll(new ClearScrollRequest()).         ThreadContext threadContext = client.threadPool().getThreadContext().         client.bulk(new BulkRequest(), listenerThatAssertsOriginNotSet(threadContext)).         client.search(new SearchRequest(), listenerThatAssertsOriginNotSet(threadContext)).         client.clearScroll(new ClearScrollRequest(), listenerThatAssertsOriginNotSet(threadContext)).     } }
false;private;1;9;;private <T> ActionListener<T> listenerThatAssertsOriginNotSet(ThreadContext threadContext) {     return ActionListener.wrap(r -> {         assertNull(threadContext.getTransient(ThreadContext.ACTION_ORIGIN_TRANSIENT_NAME)).     }, e -> {         fail("didn't expect to fail but: " + e).     }). }
