commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;public void testSerialize() throws Exception {     final ClusterHealthRequest originalRequest = randomRequest().     final ClusterHealthRequest cloneRequest.     try (BytesStreamOutput out = new BytesStreamOutput()) {         originalRequest.writeTo(out).         try (StreamInput in = out.bytes().streamInput()) {             cloneRequest = new ClusterHealthRequest(in).         }     }     assertThat(cloneRequest.waitForStatus(), equalTo(originalRequest.waitForStatus())).     assertThat(cloneRequest.waitForNodes(), equalTo(originalRequest.waitForNodes())).     assertThat(cloneRequest.waitForNoInitializingShards(), equalTo(originalRequest.waitForNoInitializingShards())).     assertThat(cloneRequest.waitForNoRelocatingShards(), equalTo(originalRequest.waitForNoRelocatingShards())).     assertThat(cloneRequest.waitForActiveShards(), equalTo(originalRequest.waitForActiveShards())).     assertThat(cloneRequest.waitForEvents(), equalTo(originalRequest.waitForEvents())).     assertIndicesEquals(cloneRequest.indices(), originalRequest.indices()).     assertThat(cloneRequest.indicesOptions(), equalTo(originalRequest.indicesOptions())). }
false;public;0;77;;public void testBwcSerialization() throws Exception {     for (int runs = 0. runs < randomIntBetween(5, 20). runs++) {         // Generate a random cluster health request in version < 7.1.0 and serializes it         final BytesStreamOutput out = new BytesStreamOutput().         out.setVersion(randomVersionBetween(random(), Version.V_6_3_0, getPreviousVersion(Version.V_7_1_0))).         final ClusterHealthRequest expected = randomRequest().         {             expected.getParentTask().writeTo(out).             out.writeTimeValue(expected.masterNodeTimeout()).             out.writeBoolean(expected.local()).             if (expected.indices() == null) {                 out.writeVInt(0).             } else {                 out.writeVInt(expected.indices().length).                 for (String index : expected.indices()) {                     out.writeString(index).                 }             }             out.writeTimeValue(expected.timeout()).             if (expected.waitForStatus() == null) {                 out.writeBoolean(false).             } else {                 out.writeBoolean(true).                 out.writeByte(expected.waitForStatus().value()).             }             out.writeBoolean(expected.waitForNoRelocatingShards()).             expected.waitForActiveShards().writeTo(out).             out.writeString(expected.waitForNodes()).             if (expected.waitForEvents() == null) {                 out.writeBoolean(false).             } else {                 out.writeBoolean(true).                 Priority.writeTo(expected.waitForEvents(), out).             }             out.writeBoolean(expected.waitForNoInitializingShards()).         }         // Deserialize and check the cluster health request         final StreamInput in = out.bytes().streamInput().         in.setVersion(out.getVersion()).         final ClusterHealthRequest actual = new ClusterHealthRequest(in).         assertThat(actual.waitForStatus(), equalTo(expected.waitForStatus())).         assertThat(actual.waitForNodes(), equalTo(expected.waitForNodes())).         assertThat(actual.waitForNoInitializingShards(), equalTo(expected.waitForNoInitializingShards())).         assertThat(actual.waitForNoRelocatingShards(), equalTo(expected.waitForNoRelocatingShards())).         assertThat(actual.waitForActiveShards(), equalTo(expected.waitForActiveShards())).         assertThat(actual.waitForEvents(), equalTo(expected.waitForEvents())).         assertIndicesEquals(actual.indices(), expected.indices()).         assertThat(actual.indicesOptions(), equalTo(IndicesOptions.lenientExpandOpen())).     }     for (int runs = 0. runs < randomIntBetween(5, 20). runs++) {         // Generate a random cluster health request in current version         final ClusterHealthRequest expected = randomRequest().         // Serialize to node in version < 7.1.0         final BytesStreamOutput out = new BytesStreamOutput().         out.setVersion(randomVersionBetween(random(), Version.V_6_3_0, getPreviousVersion(Version.V_7_1_0))).         expected.writeTo(out).         // Deserialize and check the cluster health request         final StreamInput in = out.bytes().streamInput().         in.setVersion(out.getVersion()).         final ClusterHealthRequest actual = new ClusterHealthRequest(in).         assertThat(actual.waitForStatus(), equalTo(expected.waitForStatus())).         assertThat(actual.waitForNodes(), equalTo(expected.waitForNodes())).         assertThat(actual.waitForNoInitializingShards(), equalTo(expected.waitForNoInitializingShards())).         assertThat(actual.waitForNoRelocatingShards(), equalTo(expected.waitForNoRelocatingShards())).         assertThat(actual.waitForActiveShards(), equalTo(expected.waitForActiveShards())).         assertThat(actual.waitForEvents(), equalTo(expected.waitForEvents())).         assertIndicesEquals(actual.indices(), expected.indices()).         assertThat(actual.indicesOptions(), equalTo(IndicesOptions.lenientExpandOpen())).     } }
false;private;0;20;;private ClusterHealthRequest randomRequest() {     ClusterHealthRequest request = new ClusterHealthRequest().     request.waitForStatus(randomFrom(ClusterHealthStatus.values())).     request.waitForNodes(randomFrom("", "<", "<=", ">", ">=") + between(0, 1000)).     request.waitForNoInitializingShards(randomBoolean()).     request.waitForNoRelocatingShards(randomBoolean()).     request.waitForActiveShards(randomIntBetween(0, 10)).     request.waitForEvents(randomFrom(Priority.values())).     if (randomBoolean()) {         final String[] indices = new String[randomIntBetween(1, 10)].         for (int i = 0. i < indices.length. i++) {             indices[i] = randomAlphaOfLength(10).toLowerCase(Locale.ROOT).         }         request.indices(indices).     }     if (randomBoolean()) {         request.indicesOptions(IndicesOptions.fromOptions(randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean())).     }     return request. }
false;private,static;2;4;;private static void assertIndicesEquals(final String[] actual, final String[] expected) {     // null indices in ClusterHealthRequest is deserialized as empty string array     assertArrayEquals(expected != null ? expected : Strings.EMPTY_ARRAY, actual). }
