# id;timestamp;commentText;codeText;commentWords;codeWords
ExtendedStatsBucketIT -> public void testGappyIndexWithSigma();1524684173;Test for https://github.com/elastic/elasticsearch/issues/17701;public void testGappyIndexWithSigma() {_        double sigma = randomDoubleBetween(1.0, 6.0, true)__        SearchResponse response = client().prepareSearch("idx_gappy")_                .addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(1L))_                .addAggregation(extendedStatsBucket("extended_stats_bucket", "histo>_count").sigma(sigma)).execute().actionGet()__        assertSearchResponse(response)__        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(6))___        for (int i = 0_ i < 6_ ++i) {_            long expectedDocCount__            if (i == 3) {_                expectedDocCount = 2__            } else if (i == 4) {_                expectedDocCount = 0__            } else {_                expectedDocCount = 1__            }_            Histogram.Bucket bucket = buckets.get(i)__            assertThat("i: " + i, bucket, notNullValue())__            assertThat("i: " + i, ((Number) bucket.getKey()).longValue(), equalTo((long) i))__            assertThat("i: " + i, bucket.getDocCount(), equalTo(expectedDocCount))__        }__        ExtendedStatsBucket extendedStatsBucketValue = response.getAggregations().get("extended_stats_bucket")__        long count = 6L__        double sum = 1.0 + 1.0 + 1.0 + 2.0 + 0.0 + 1.0__        double sumOfSqrs = 1.0 + 1.0 + 1.0 + 4.0 + 0.0 + 1.0__        double avg = sum / count__        double var = (sumOfSqrs - ((sum * sum) / count)) / count__        double stdDev = Math.sqrt(var)__        assertThat(extendedStatsBucketValue, notNullValue())__        assertThat(extendedStatsBucketValue.getName(), equalTo("extended_stats_bucket"))__        assertThat(extendedStatsBucketValue.getMin(), equalTo(0.0))__        assertThat(extendedStatsBucketValue.getMax(), equalTo(2.0))__        assertThat(extendedStatsBucketValue.getCount(), equalTo(count))__        assertThat(extendedStatsBucketValue.getSum(), equalTo(sum))__        assertThat(extendedStatsBucketValue.getAvg(), equalTo(avg))__        assertThat(extendedStatsBucketValue.getSumOfSquares(), equalTo(sumOfSqrs))__        assertThat(extendedStatsBucketValue.getVariance(), equalTo(var))__        assertThat(extendedStatsBucketValue.getStdDeviation(), equalTo(stdDev))__        assertThat(extendedStatsBucketValue.getStdDeviationBound(Bounds.LOWER), equalTo(avg - (sigma * stdDev)))__        assertThat(extendedStatsBucketValue.getStdDeviationBound(Bounds.UPPER), equalTo(avg + (sigma * stdDev)))__    };test,for,https,github,com,elastic,elasticsearch,issues,17701;public,void,test,gappy,index,with,sigma,double,sigma,random,double,between,1,0,6,0,true,search,response,response,client,prepare,search,add,aggregation,histogram,histo,field,interval,1l,add,aggregation,extended,stats,bucket,histo,sigma,sigma,execute,action,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,6,for,int,i,0,i,6,i,long,expected,doc,count,if,i,3,expected,doc,count,2,else,if,i,4,expected,doc,count,0,else,expected,doc,count,1,histogram,bucket,bucket,buckets,get,i,assert,that,i,i,bucket,not,null,value,assert,that,i,i,number,bucket,get,key,long,value,equal,to,long,i,assert,that,i,i,bucket,get,doc,count,equal,to,expected,doc,count,extended,stats,bucket,extended,stats,bucket,value,response,get,aggregations,get,long,count,6l,double,sum,1,0,1,0,1,0,2,0,0,0,1,0,double,sum,of,sqrs,1,0,1,0,1,0,4,0,0,0,1,0,double,avg,sum,count,double,var,sum,of,sqrs,sum,sum,count,count,double,std,dev,math,sqrt,var,assert,that,extended,stats,bucket,value,not,null,value,assert,that,extended,stats,bucket,value,get,name,equal,to,assert,that,extended,stats,bucket,value,get,min,equal,to,0,0,assert,that,extended,stats,bucket,value,get,max,equal,to,2,0,assert,that,extended,stats,bucket,value,get,count,equal,to,count,assert,that,extended,stats,bucket,value,get,sum,equal,to,sum,assert,that,extended,stats,bucket,value,get,avg,equal,to,avg,assert,that,extended,stats,bucket,value,get,sum,of,squares,equal,to,sum,of,sqrs,assert,that,extended,stats,bucket,value,get,variance,equal,to,var,assert,that,extended,stats,bucket,value,get,std,deviation,equal,to,std,dev,assert,that,extended,stats,bucket,value,get,std,deviation,bound,bounds,lower,equal,to,avg,sigma,std,dev,assert,that,extended,stats,bucket,value,get,std,deviation,bound,bounds,upper,equal,to,avg,sigma,std,dev
ExtendedStatsBucketIT -> public void testGappyIndexWithSigma();1536314350;Test for https://github.com/elastic/elasticsearch/issues/17701;public void testGappyIndexWithSigma() {_        double sigma = randomDoubleBetween(1.0, 6.0, true)__        SearchResponse response = client().prepareSearch("idx_gappy")_                .addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(1L))_                .addAggregation(extendedStatsBucket("extended_stats_bucket", "histo>_count").sigma(sigma)).execute().actionGet()__        assertSearchResponse(response)__        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(6))___        for (int i = 0_ i < 6_ ++i) {_            long expectedDocCount__            if (i == 3) {_                expectedDocCount = 2__            } else if (i == 4) {_                expectedDocCount = 0__            } else {_                expectedDocCount = 1__            }_            Histogram.Bucket bucket = buckets.get(i)__            assertThat("i: " + i, bucket, notNullValue())__            assertThat("i: " + i, ((Number) bucket.getKey()).longValue(), equalTo((long) i))__            assertThat("i: " + i, bucket.getDocCount(), equalTo(expectedDocCount))__        }__        ExtendedStatsBucket extendedStatsBucketValue = response.getAggregations().get("extended_stats_bucket")__        long count = 6L__        double sum = 1.0 + 1.0 + 1.0 + 2.0 + 0.0 + 1.0__        double sumOfSqrs = 1.0 + 1.0 + 1.0 + 4.0 + 0.0 + 1.0__        double avg = sum / count__        double var = (sumOfSqrs - ((sum * sum) / count)) / count__        double stdDev = Math.sqrt(var)__        assertThat(extendedStatsBucketValue, notNullValue())__        assertThat(extendedStatsBucketValue.getName(), equalTo("extended_stats_bucket"))__        assertThat(extendedStatsBucketValue.getMin(), equalTo(0.0))__        assertThat(extendedStatsBucketValue.getMax(), equalTo(2.0))__        assertThat(extendedStatsBucketValue.getCount(), equalTo(count))__        assertThat(extendedStatsBucketValue.getSum(), equalTo(sum))__        assertThat(extendedStatsBucketValue.getAvg(), equalTo(avg))__        assertThat(extendedStatsBucketValue.getSumOfSquares(), equalTo(sumOfSqrs))__        assertThat(extendedStatsBucketValue.getVariance(), equalTo(var))__        assertThat(extendedStatsBucketValue.getStdDeviation(), equalTo(stdDev))__        assertThat(extendedStatsBucketValue.getStdDeviationBound(Bounds.LOWER), equalTo(avg - (sigma * stdDev)))__        assertThat(extendedStatsBucketValue.getStdDeviationBound(Bounds.UPPER), equalTo(avg + (sigma * stdDev)))__    };test,for,https,github,com,elastic,elasticsearch,issues,17701;public,void,test,gappy,index,with,sigma,double,sigma,random,double,between,1,0,6,0,true,search,response,response,client,prepare,search,add,aggregation,histogram,histo,field,interval,1l,add,aggregation,extended,stats,bucket,histo,sigma,sigma,execute,action,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,6,for,int,i,0,i,6,i,long,expected,doc,count,if,i,3,expected,doc,count,2,else,if,i,4,expected,doc,count,0,else,expected,doc,count,1,histogram,bucket,bucket,buckets,get,i,assert,that,i,i,bucket,not,null,value,assert,that,i,i,number,bucket,get,key,long,value,equal,to,long,i,assert,that,i,i,bucket,get,doc,count,equal,to,expected,doc,count,extended,stats,bucket,extended,stats,bucket,value,response,get,aggregations,get,long,count,6l,double,sum,1,0,1,0,1,0,2,0,0,0,1,0,double,sum,of,sqrs,1,0,1,0,1,0,4,0,0,0,1,0,double,avg,sum,count,double,var,sum,of,sqrs,sum,sum,count,count,double,std,dev,math,sqrt,var,assert,that,extended,stats,bucket,value,not,null,value,assert,that,extended,stats,bucket,value,get,name,equal,to,assert,that,extended,stats,bucket,value,get,min,equal,to,0,0,assert,that,extended,stats,bucket,value,get,max,equal,to,2,0,assert,that,extended,stats,bucket,value,get,count,equal,to,count,assert,that,extended,stats,bucket,value,get,sum,equal,to,sum,assert,that,extended,stats,bucket,value,get,avg,equal,to,avg,assert,that,extended,stats,bucket,value,get,sum,of,squares,equal,to,sum,of,sqrs,assert,that,extended,stats,bucket,value,get,variance,equal,to,var,assert,that,extended,stats,bucket,value,get,std,deviation,equal,to,std,dev,assert,that,extended,stats,bucket,value,get,std,deviation,bound,bounds,lower,equal,to,avg,sigma,std,dev,assert,that,extended,stats,bucket,value,get,std,deviation,bound,bounds,upper,equal,to,avg,sigma,std,dev
ExtendedStatsBucketIT -> public void testGappyIndexWithSigma();1538067637;Test for https://github.com/elastic/elasticsearch/issues/17701;public void testGappyIndexWithSigma() {_        double sigma = randomDoubleBetween(1.0, 6.0, true)__        SearchResponse response = client().prepareSearch("idx_gappy")_                .addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(1L))_                .addAggregation(extendedStatsBucket("extended_stats_bucket", "histo>_count").sigma(sigma)).execute().actionGet()__        assertSearchResponse(response)__        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(6))___        for (int i = 0_ i < 6_ ++i) {_            long expectedDocCount__            if (i == 3) {_                expectedDocCount = 2__            } else if (i == 4) {_                expectedDocCount = 0__            } else {_                expectedDocCount = 1__            }_            Histogram.Bucket bucket = buckets.get(i)__            assertThat("i: " + i, bucket, notNullValue())__            assertThat("i: " + i, ((Number) bucket.getKey()).longValue(), equalTo((long) i))__            assertThat("i: " + i, bucket.getDocCount(), equalTo(expectedDocCount))__        }__        ExtendedStatsBucket extendedStatsBucketValue = response.getAggregations().get("extended_stats_bucket")__        long count = 6L__        double sum = 1.0 + 1.0 + 1.0 + 2.0 + 0.0 + 1.0__        double sumOfSqrs = 1.0 + 1.0 + 1.0 + 4.0 + 0.0 + 1.0__        double avg = sum / count__        double var = (sumOfSqrs - ((sum * sum) / count)) / count__        double stdDev = Math.sqrt(var)__        assertThat(extendedStatsBucketValue, notNullValue())__        assertThat(extendedStatsBucketValue.getName(), equalTo("extended_stats_bucket"))__        assertThat(extendedStatsBucketValue.getMin(), equalTo(0.0))__        assertThat(extendedStatsBucketValue.getMax(), equalTo(2.0))__        assertThat(extendedStatsBucketValue.getCount(), equalTo(count))__        assertThat(extendedStatsBucketValue.getSum(), equalTo(sum))__        assertThat(extendedStatsBucketValue.getAvg(), equalTo(avg))__        assertThat(extendedStatsBucketValue.getSumOfSquares(), equalTo(sumOfSqrs))__        assertThat(extendedStatsBucketValue.getVariance(), equalTo(var))__        assertThat(extendedStatsBucketValue.getStdDeviation(), equalTo(stdDev))__        assertThat(extendedStatsBucketValue.getStdDeviationBound(Bounds.LOWER), equalTo(avg - (sigma * stdDev)))__        assertThat(extendedStatsBucketValue.getStdDeviationBound(Bounds.UPPER), equalTo(avg + (sigma * stdDev)))__    };test,for,https,github,com,elastic,elasticsearch,issues,17701;public,void,test,gappy,index,with,sigma,double,sigma,random,double,between,1,0,6,0,true,search,response,response,client,prepare,search,add,aggregation,histogram,histo,field,interval,1l,add,aggregation,extended,stats,bucket,histo,sigma,sigma,execute,action,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,6,for,int,i,0,i,6,i,long,expected,doc,count,if,i,3,expected,doc,count,2,else,if,i,4,expected,doc,count,0,else,expected,doc,count,1,histogram,bucket,bucket,buckets,get,i,assert,that,i,i,bucket,not,null,value,assert,that,i,i,number,bucket,get,key,long,value,equal,to,long,i,assert,that,i,i,bucket,get,doc,count,equal,to,expected,doc,count,extended,stats,bucket,extended,stats,bucket,value,response,get,aggregations,get,long,count,6l,double,sum,1,0,1,0,1,0,2,0,0,0,1,0,double,sum,of,sqrs,1,0,1,0,1,0,4,0,0,0,1,0,double,avg,sum,count,double,var,sum,of,sqrs,sum,sum,count,count,double,std,dev,math,sqrt,var,assert,that,extended,stats,bucket,value,not,null,value,assert,that,extended,stats,bucket,value,get,name,equal,to,assert,that,extended,stats,bucket,value,get,min,equal,to,0,0,assert,that,extended,stats,bucket,value,get,max,equal,to,2,0,assert,that,extended,stats,bucket,value,get,count,equal,to,count,assert,that,extended,stats,bucket,value,get,sum,equal,to,sum,assert,that,extended,stats,bucket,value,get,avg,equal,to,avg,assert,that,extended,stats,bucket,value,get,sum,of,squares,equal,to,sum,of,sqrs,assert,that,extended,stats,bucket,value,get,variance,equal,to,var,assert,that,extended,stats,bucket,value,get,std,deviation,equal,to,std,dev,assert,that,extended,stats,bucket,value,get,std,deviation,bound,bounds,lower,equal,to,avg,sigma,std,dev,assert,that,extended,stats,bucket,value,get,std,deviation,bound,bounds,upper,equal,to,avg,sigma,std,dev
ExtendedStatsBucketIT -> public void testGappyIndexWithSigma();1540486836;Test for https://github.com/elastic/elasticsearch/issues/17701;public void testGappyIndexWithSigma() {_        double sigma = randomDoubleBetween(1.0, 6.0, true)__        SearchResponse response = client().prepareSearch("idx_gappy")_                .addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(1L))_                .addAggregation(extendedStatsBucket("extended_stats_bucket", "histo>_count").sigma(sigma)).execute().actionGet()__        assertSearchResponse(response)__        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(6))___        for (int i = 0_ i < 6_ ++i) {_            long expectedDocCount__            if (i == 3) {_                expectedDocCount = 2__            } else if (i == 4) {_                expectedDocCount = 0__            } else {_                expectedDocCount = 1__            }_            Histogram.Bucket bucket = buckets.get(i)__            assertThat("i: " + i, bucket, notNullValue())__            assertThat("i: " + i, ((Number) bucket.getKey()).longValue(), equalTo((long) i))__            assertThat("i: " + i, bucket.getDocCount(), equalTo(expectedDocCount))__        }__        ExtendedStatsBucket extendedStatsBucketValue = response.getAggregations().get("extended_stats_bucket")__        long count = 6L__        double sum = 1.0 + 1.0 + 1.0 + 2.0 + 0.0 + 1.0__        double sumOfSqrs = 1.0 + 1.0 + 1.0 + 4.0 + 0.0 + 1.0__        double avg = sum / count__        double var = (sumOfSqrs - ((sum * sum) / count)) / count__        double stdDev = Math.sqrt(var)__        assertThat(extendedStatsBucketValue, notNullValue())__        assertThat(extendedStatsBucketValue.getName(), equalTo("extended_stats_bucket"))__        assertThat(extendedStatsBucketValue.getMin(), equalTo(0.0))__        assertThat(extendedStatsBucketValue.getMax(), equalTo(2.0))__        assertThat(extendedStatsBucketValue.getCount(), equalTo(count))__        assertThat(extendedStatsBucketValue.getSum(), equalTo(sum))__        assertThat(extendedStatsBucketValue.getAvg(), equalTo(avg))__        assertThat(extendedStatsBucketValue.getSumOfSquares(), equalTo(sumOfSqrs))__        assertThat(extendedStatsBucketValue.getVariance(), equalTo(var))__        assertThat(extendedStatsBucketValue.getStdDeviation(), equalTo(stdDev))__        assertThat(extendedStatsBucketValue.getStdDeviationBound(Bounds.LOWER), equalTo(avg - (sigma * stdDev)))__        assertThat(extendedStatsBucketValue.getStdDeviationBound(Bounds.UPPER), equalTo(avg + (sigma * stdDev)))__    };test,for,https,github,com,elastic,elasticsearch,issues,17701;public,void,test,gappy,index,with,sigma,double,sigma,random,double,between,1,0,6,0,true,search,response,response,client,prepare,search,add,aggregation,histogram,histo,field,interval,1l,add,aggregation,extended,stats,bucket,histo,sigma,sigma,execute,action,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,6,for,int,i,0,i,6,i,long,expected,doc,count,if,i,3,expected,doc,count,2,else,if,i,4,expected,doc,count,0,else,expected,doc,count,1,histogram,bucket,bucket,buckets,get,i,assert,that,i,i,bucket,not,null,value,assert,that,i,i,number,bucket,get,key,long,value,equal,to,long,i,assert,that,i,i,bucket,get,doc,count,equal,to,expected,doc,count,extended,stats,bucket,extended,stats,bucket,value,response,get,aggregations,get,long,count,6l,double,sum,1,0,1,0,1,0,2,0,0,0,1,0,double,sum,of,sqrs,1,0,1,0,1,0,4,0,0,0,1,0,double,avg,sum,count,double,var,sum,of,sqrs,sum,sum,count,count,double,std,dev,math,sqrt,var,assert,that,extended,stats,bucket,value,not,null,value,assert,that,extended,stats,bucket,value,get,name,equal,to,assert,that,extended,stats,bucket,value,get,min,equal,to,0,0,assert,that,extended,stats,bucket,value,get,max,equal,to,2,0,assert,that,extended,stats,bucket,value,get,count,equal,to,count,assert,that,extended,stats,bucket,value,get,sum,equal,to,sum,assert,that,extended,stats,bucket,value,get,avg,equal,to,avg,assert,that,extended,stats,bucket,value,get,sum,of,squares,equal,to,sum,of,sqrs,assert,that,extended,stats,bucket,value,get,variance,equal,to,var,assert,that,extended,stats,bucket,value,get,std,deviation,equal,to,std,dev,assert,that,extended,stats,bucket,value,get,std,deviation,bound,bounds,lower,equal,to,avg,sigma,std,dev,assert,that,extended,stats,bucket,value,get,std,deviation,bound,bounds,upper,equal,to,avg,sigma,std,dev
ExtendedStatsBucketIT -> public void testGappyIndexWithSigma();1544110272;Test for https://github.com/elastic/elasticsearch/issues/17701;public void testGappyIndexWithSigma() {_        double sigma = randomDoubleBetween(1.0, 6.0, true)__        SearchResponse response = client().prepareSearch("idx_gappy")_                .addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(1L))_                .addAggregation(extendedStatsBucket("extended_stats_bucket", "histo>_count").sigma(sigma)).get()__        assertSearchResponse(response)__        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(6))___        for (int i = 0_ i < 6_ ++i) {_            long expectedDocCount__            if (i == 3) {_                expectedDocCount = 2__            } else if (i == 4) {_                expectedDocCount = 0__            } else {_                expectedDocCount = 1__            }_            Histogram.Bucket bucket = buckets.get(i)__            assertThat("i: " + i, bucket, notNullValue())__            assertThat("i: " + i, ((Number) bucket.getKey()).longValue(), equalTo((long) i))__            assertThat("i: " + i, bucket.getDocCount(), equalTo(expectedDocCount))__        }__        ExtendedStatsBucket extendedStatsBucketValue = response.getAggregations().get("extended_stats_bucket")__        long count = 6L__        double sum = 1.0 + 1.0 + 1.0 + 2.0 + 0.0 + 1.0__        double sumOfSqrs = 1.0 + 1.0 + 1.0 + 4.0 + 0.0 + 1.0__        double avg = sum / count__        double var = (sumOfSqrs - ((sum * sum) / count)) / count__        double stdDev = Math.sqrt(var)__        assertThat(extendedStatsBucketValue, notNullValue())__        assertThat(extendedStatsBucketValue.getName(), equalTo("extended_stats_bucket"))__        assertThat(extendedStatsBucketValue.getMin(), equalTo(0.0))__        assertThat(extendedStatsBucketValue.getMax(), equalTo(2.0))__        assertThat(extendedStatsBucketValue.getCount(), equalTo(count))__        assertThat(extendedStatsBucketValue.getSum(), equalTo(sum))__        assertThat(extendedStatsBucketValue.getAvg(), equalTo(avg))__        assertThat(extendedStatsBucketValue.getSumOfSquares(), equalTo(sumOfSqrs))__        assertThat(extendedStatsBucketValue.getVariance(), equalTo(var))__        assertThat(extendedStatsBucketValue.getStdDeviation(), equalTo(stdDev))__        assertThat(extendedStatsBucketValue.getStdDeviationBound(Bounds.LOWER), equalTo(avg - (sigma * stdDev)))__        assertThat(extendedStatsBucketValue.getStdDeviationBound(Bounds.UPPER), equalTo(avg + (sigma * stdDev)))__    };test,for,https,github,com,elastic,elasticsearch,issues,17701;public,void,test,gappy,index,with,sigma,double,sigma,random,double,between,1,0,6,0,true,search,response,response,client,prepare,search,add,aggregation,histogram,histo,field,interval,1l,add,aggregation,extended,stats,bucket,histo,sigma,sigma,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,6,for,int,i,0,i,6,i,long,expected,doc,count,if,i,3,expected,doc,count,2,else,if,i,4,expected,doc,count,0,else,expected,doc,count,1,histogram,bucket,bucket,buckets,get,i,assert,that,i,i,bucket,not,null,value,assert,that,i,i,number,bucket,get,key,long,value,equal,to,long,i,assert,that,i,i,bucket,get,doc,count,equal,to,expected,doc,count,extended,stats,bucket,extended,stats,bucket,value,response,get,aggregations,get,long,count,6l,double,sum,1,0,1,0,1,0,2,0,0,0,1,0,double,sum,of,sqrs,1,0,1,0,1,0,4,0,0,0,1,0,double,avg,sum,count,double,var,sum,of,sqrs,sum,sum,count,count,double,std,dev,math,sqrt,var,assert,that,extended,stats,bucket,value,not,null,value,assert,that,extended,stats,bucket,value,get,name,equal,to,assert,that,extended,stats,bucket,value,get,min,equal,to,0,0,assert,that,extended,stats,bucket,value,get,max,equal,to,2,0,assert,that,extended,stats,bucket,value,get,count,equal,to,count,assert,that,extended,stats,bucket,value,get,sum,equal,to,sum,assert,that,extended,stats,bucket,value,get,avg,equal,to,avg,assert,that,extended,stats,bucket,value,get,sum,of,squares,equal,to,sum,of,sqrs,assert,that,extended,stats,bucket,value,get,variance,equal,to,var,assert,that,extended,stats,bucket,value,get,std,deviation,equal,to,std,dev,assert,that,extended,stats,bucket,value,get,std,deviation,bound,bounds,lower,equal,to,avg,sigma,std,dev,assert,that,extended,stats,bucket,value,get,std,deviation,bound,bounds,upper,equal,to,avg,sigma,std,dev
ExtendedStatsBucketIT -> public void testGappyIndexWithSigma();1548428194;Test for https://github.com/elastic/elasticsearch/issues/17701;public void testGappyIndexWithSigma() {_        double sigma = randomDoubleBetween(1.0, 6.0, true)__        SearchResponse response = client().prepareSearch("idx_gappy")_                .addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(1L))_                .addAggregation(extendedStatsBucket("extended_stats_bucket", "histo>_count").sigma(sigma)).get()__        assertSearchResponse(response)__        Histogram histo = response.getAggregations().get("histo")__        assertThat(histo, notNullValue())__        assertThat(histo.getName(), equalTo("histo"))__        List<? extends Bucket> buckets = histo.getBuckets()__        assertThat(buckets.size(), equalTo(6))___        for (int i = 0_ i < 6_ ++i) {_            long expectedDocCount__            if (i == 3) {_                expectedDocCount = 2__            } else if (i == 4) {_                expectedDocCount = 0__            } else {_                expectedDocCount = 1__            }_            Histogram.Bucket bucket = buckets.get(i)__            assertThat("i: " + i, bucket, notNullValue())__            assertThat("i: " + i, ((Number) bucket.getKey()).longValue(), equalTo((long) i))__            assertThat("i: " + i, bucket.getDocCount(), equalTo(expectedDocCount))__        }__        ExtendedStatsBucket extendedStatsBucketValue = response.getAggregations().get("extended_stats_bucket")__        long count = 6L__        double sum = 1.0 + 1.0 + 1.0 + 2.0 + 0.0 + 1.0__        double sumOfSqrs = 1.0 + 1.0 + 1.0 + 4.0 + 0.0 + 1.0__        double avg = sum / count__        double var = (sumOfSqrs - ((sum * sum) / count)) / count__        var = var < 0  ? 0 : var__        double stdDev = Math.sqrt(var)__        assertThat(extendedStatsBucketValue, notNullValue())__        assertThat(extendedStatsBucketValue.getName(), equalTo("extended_stats_bucket"))__        assertThat(extendedStatsBucketValue.getMin(), equalTo(0.0))__        assertThat(extendedStatsBucketValue.getMax(), equalTo(2.0))__        assertThat(extendedStatsBucketValue.getCount(), equalTo(count))__        assertThat(extendedStatsBucketValue.getSum(), equalTo(sum))__        assertThat(extendedStatsBucketValue.getAvg(), equalTo(avg))__        assertThat(extendedStatsBucketValue.getSumOfSquares(), equalTo(sumOfSqrs))__        assertThat(extendedStatsBucketValue.getVariance(), equalTo(var))__        assertThat(extendedStatsBucketValue.getStdDeviation(), equalTo(stdDev))__        assertThat(extendedStatsBucketValue.getStdDeviationBound(Bounds.LOWER), equalTo(avg - (sigma * stdDev)))__        assertThat(extendedStatsBucketValue.getStdDeviationBound(Bounds.UPPER), equalTo(avg + (sigma * stdDev)))__    };test,for,https,github,com,elastic,elasticsearch,issues,17701;public,void,test,gappy,index,with,sigma,double,sigma,random,double,between,1,0,6,0,true,search,response,response,client,prepare,search,add,aggregation,histogram,histo,field,interval,1l,add,aggregation,extended,stats,bucket,histo,sigma,sigma,get,assert,search,response,response,histogram,histo,response,get,aggregations,get,histo,assert,that,histo,not,null,value,assert,that,histo,get,name,equal,to,histo,list,extends,bucket,buckets,histo,get,buckets,assert,that,buckets,size,equal,to,6,for,int,i,0,i,6,i,long,expected,doc,count,if,i,3,expected,doc,count,2,else,if,i,4,expected,doc,count,0,else,expected,doc,count,1,histogram,bucket,bucket,buckets,get,i,assert,that,i,i,bucket,not,null,value,assert,that,i,i,number,bucket,get,key,long,value,equal,to,long,i,assert,that,i,i,bucket,get,doc,count,equal,to,expected,doc,count,extended,stats,bucket,extended,stats,bucket,value,response,get,aggregations,get,long,count,6l,double,sum,1,0,1,0,1,0,2,0,0,0,1,0,double,sum,of,sqrs,1,0,1,0,1,0,4,0,0,0,1,0,double,avg,sum,count,double,var,sum,of,sqrs,sum,sum,count,count,var,var,0,0,var,double,std,dev,math,sqrt,var,assert,that,extended,stats,bucket,value,not,null,value,assert,that,extended,stats,bucket,value,get,name,equal,to,assert,that,extended,stats,bucket,value,get,min,equal,to,0,0,assert,that,extended,stats,bucket,value,get,max,equal,to,2,0,assert,that,extended,stats,bucket,value,get,count,equal,to,count,assert,that,extended,stats,bucket,value,get,sum,equal,to,sum,assert,that,extended,stats,bucket,value,get,avg,equal,to,avg,assert,that,extended,stats,bucket,value,get,sum,of,squares,equal,to,sum,of,sqrs,assert,that,extended,stats,bucket,value,get,variance,equal,to,var,assert,that,extended,stats,bucket,value,get,std,deviation,equal,to,std,dev,assert,that,extended,stats,bucket,value,get,std,deviation,bound,bounds,lower,equal,to,avg,sigma,std,dev,assert,that,extended,stats,bucket,value,get,std,deviation,bound,bounds,upper,equal,to,avg,sigma,std,dev
