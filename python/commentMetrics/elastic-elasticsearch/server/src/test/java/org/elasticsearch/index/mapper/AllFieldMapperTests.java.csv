commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean forbidPrivateIndexSettings() {     return false. }
false;public;0;57;;public void testAllDisabled() throws Exception {     {         final Version version = VersionUtils.randomVersionBetween(random(), Version.V_6_0_0, Version.V_7_0_0.minimumCompatibilityVersion()).         IndexService indexService = createIndex("test_6x", Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, version).build()).         String mappingDisabled = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("_all").field("enabled", false).endObject().endObject()).         indexService.mapperService().merge("_doc", new CompressedXContent(mappingDisabled), MergeReason.MAPPING_UPDATE).         String mappingEnabled = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("_all").field("enabled", true).endObject().endObject()).         MapperParsingException exc = expectThrows(MapperParsingException.class, () -> indexService.mapperService().merge("_doc", new CompressedXContent(mappingEnabled), MergeReason.MAPPING_UPDATE)).         assertThat(exc.getMessage(), containsString("[_all] is disabled in this version.")).     }     {         IndexService indexService = createIndex("test").         String mappingEnabled = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("_all").field("enabled", true).endObject().endObject()).         MapperParsingException exc = expectThrows(MapperParsingException.class, () -> indexService.mapperService().merge("_doc", new CompressedXContent(mappingEnabled), MergeReason.MAPPING_UPDATE)).         assertThat(exc.getMessage(), containsString("unsupported parameters:  [_all")).         String mappingDisabled = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("_all").field("enabled", false).endObject().endObject()).         exc = expectThrows(MapperParsingException.class, () -> indexService.mapperService().merge("_doc", new CompressedXContent(mappingDisabled), MergeReason.MAPPING_UPDATE)).         assertThat(exc.getMessage(), containsString("unsupported parameters:  [_all")).         String mappingAll = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("_all").endObject().endObject()).         exc = expectThrows(MapperParsingException.class, () -> indexService.mapperService().merge("_doc", new CompressedXContent(mappingAll), MergeReason.MAPPING_UPDATE)).         assertThat(exc.getMessage(), containsString("unsupported parameters:  [_all")).         String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().endObject()).         indexService.mapperService().merge("_doc", new CompressedXContent(mapping), MergeReason.MAPPING_UPDATE).         assertEquals("{\"_doc\":{}}", indexService.mapperService().documentMapper("_doc").mapping().toString()).     } }
false;public;0;8;;public void testUpdateDefaultSearchAnalyzer() throws Exception {     IndexService indexService = createIndex("test", Settings.builder().put("index.analysis.analyzer.default_search.type", "custom").put("index.analysis.analyzer.default_search.tokenizer", "standard").build()).     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("_doc").endObject().endObject()).     indexService.mapperService().merge("_doc", new CompressedXContent(mapping), MergeReason.MAPPING_UPDATE).     assertEquals(mapping, indexService.mapperService().documentMapper("_doc").mapping().toString()). }
