# id;timestamp;commentText;codeText;commentWords;codeWords
TruncatedRecoveryIT -> public void testCancelRecoveryAndResume() throws Exception;1524684173;This test tries to truncate some of larger files in the index to trigger leftovers on the recovery_target. This happens during recovery when the last chunk of the file is transferred to the replica_we just throw an exception to make sure the recovery fails and we leave some half baked files on the target._Later we allow full recovery to ensure we can still recover and don't run into corruptions.;public void testCancelRecoveryAndResume() throws Exception {_        assertTrue(client().admin().cluster().prepareUpdateSettings().setTransientSettings(Settings.builder()_                .put(CHUNK_SIZE_SETTING.getKey(), new ByteSizeValue(randomIntBetween(50, 300), ByteSizeUnit.BYTES)))_                .get().isAcknowledged())___        NodesStatsResponse nodeStats = client().admin().cluster().prepareNodesStats().get()__        List<NodeStats> dataNodeStats = new ArrayList<>()__        for (NodeStats stat : nodeStats.getNodes()) {_            if (stat.getNode().isDataNode()) {_                dataNodeStats.add(stat)__            }_        }_        assertThat(dataNodeStats.size(), greaterThanOrEqualTo(2))__        Collections.shuffle(dataNodeStats, random())__        _        _        _        NodeStats primariesNode = dataNodeStats.get(0)__        NodeStats unluckyNode = dataNodeStats.get(1)___        _        _        assertAcked(prepareCreate("test")_                .addMapping("type1", "field1", "type=text", "the_id", "type=text")_                .setSettings(Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0).put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, numberOfShards())_                        .put("index.routing.allocation.include._name", primariesNode.getNode().getName())))_ __        _        int numDocs = randomIntBetween(100, 200)__        List<IndexRequestBuilder> builder = new ArrayList<>()__        for (int i = 0_ i < numDocs_ i++) {_            String id = Integer.toString(i)__            builder.add(client().prepareIndex("test", "type1", id).setSource("field1", English.intToEnglish(i), "the_id", id))__        }_        indexRandom(true, builder)__        for (int i = 0_ i < numDocs_ i++) {_            String id = Integer.toString(i)__            assertHitCount(client().prepareSearch().setQuery(QueryBuilders.termQuery("the_id", id)).get(), 1)__        }_        ensureGreen()__        _        client().admin().indices().prepareFlush().setForce(true).get()__        client().admin().indices().prepareForceMerge().setMaxNumSegments(1).setFlush(true).get()___        final CountDownLatch latch = new CountDownLatch(1)__        final AtomicBoolean truncate = new AtomicBoolean(true)__        for (NodeStats dataNode : dataNodeStats) {_            MockTransportService mockTransportService = ((MockTransportService) internalCluster().getInstance(TransportService.class, dataNode.getNode().getName()))__            mockTransportService.addDelegate(internalCluster().getInstance(TransportService.class, unluckyNode.getNode().getName()), new MockTransportService.DelegateTransport(mockTransportService.original()) {__                @Override_                protected void sendRequest(Connection connection, long requestId, String action, TransportRequest request,_                                           TransportRequestOptions options) throws IOException {_                    if (action.equals(PeerRecoveryTargetService.Actions.FILE_CHUNK)) {_                        RecoveryFileChunkRequest req = (RecoveryFileChunkRequest) request__                        logger.debug("file chunk [{}] lastChunk: {}", req, req.lastChunk())__                        if ((req.name().endsWith("cfs") || req.name().endsWith("fdt")) && req.lastChunk() && truncate.get()) {_                            latch.countDown()__                            throw new RuntimeException("Caused some truncated files for fun and profit")__                        }_                    }_                    super.sendRequest(connection, requestId, action, request, options)__                }_            })__        }__        logger.info("--> bumping replicas to 1")_ _        client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder()_                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 1)_                .put("index.routing.allocation.include._name",  _                        primariesNode.getNode().getName() + "," + unluckyNode.getNode().getName())).get()___        latch.await()___        _        _        truncate.compareAndSet(true, false)__        ensureGreen("test")__        for (int i = 0_ i < numDocs_ i++) {_            String id = Integer.toString(i)__            assertHitCount(client().prepareSearch().setQuery(QueryBuilders.termQuery("the_id", id)).get(), 1)__        }_    };this,test,tries,to,truncate,some,of,larger,files,in,the,index,to,trigger,leftovers,on,the,recovery,target,this,happens,during,recovery,when,the,last,chunk,of,the,file,is,transferred,to,the,replica,we,just,throw,an,exception,to,make,sure,the,recovery,fails,and,we,leave,some,half,baked,files,on,the,target,later,we,allow,full,recovery,to,ensure,we,can,still,recover,and,don,t,run,into,corruptions;public,void,test,cancel,recovery,and,resume,throws,exception,assert,true,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,new,byte,size,value,random,int,between,50,300,byte,size,unit,bytes,get,is,acknowledged,nodes,stats,response,node,stats,client,admin,cluster,prepare,nodes,stats,get,list,node,stats,data,node,stats,new,array,list,for,node,stats,stat,node,stats,get,nodes,if,stat,get,node,is,data,node,data,node,stats,add,stat,assert,that,data,node,stats,size,greater,than,or,equal,to,2,collections,shuffle,data,node,stats,random,node,stats,primaries,node,data,node,stats,get,0,node,stats,unlucky,node,data,node,stats,get,1,assert,acked,prepare,create,test,add,mapping,type1,field1,type,text,type,text,set,settings,settings,builder,put,index,meta,data,0,put,index,meta,data,number,of,shards,put,index,routing,allocation,include,primaries,node,get,node,get,name,int,num,docs,random,int,between,100,200,list,index,request,builder,builder,new,array,list,for,int,i,0,i,num,docs,i,string,id,integer,to,string,i,builder,add,client,prepare,index,test,type1,id,set,source,field1,english,int,to,english,i,id,index,random,true,builder,for,int,i,0,i,num,docs,i,string,id,integer,to,string,i,assert,hit,count,client,prepare,search,set,query,query,builders,term,query,id,get,1,ensure,green,client,admin,indices,prepare,flush,set,force,true,get,client,admin,indices,prepare,force,merge,set,max,num,segments,1,set,flush,true,get,final,count,down,latch,latch,new,count,down,latch,1,final,atomic,boolean,truncate,new,atomic,boolean,true,for,node,stats,data,node,data,node,stats,mock,transport,service,mock,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,data,node,get,node,get,name,mock,transport,service,add,delegate,internal,cluster,get,instance,transport,service,class,unlucky,node,get,node,get,name,new,mock,transport,service,delegate,transport,mock,transport,service,original,override,protected,void,send,request,connection,connection,long,request,id,string,action,transport,request,request,transport,request,options,options,throws,ioexception,if,action,equals,peer,recovery,target,service,actions,recovery,file,chunk,request,req,recovery,file,chunk,request,request,logger,debug,file,chunk,last,chunk,req,req,last,chunk,if,req,name,ends,with,cfs,req,name,ends,with,fdt,req,last,chunk,truncate,get,latch,count,down,throw,new,runtime,exception,caused,some,truncated,files,for,fun,and,profit,super,send,request,connection,request,id,action,request,options,logger,info,bumping,replicas,to,1,client,admin,indices,prepare,update,settings,test,set,settings,settings,builder,put,index,meta,data,1,put,index,routing,allocation,include,primaries,node,get,node,get,name,unlucky,node,get,node,get,name,get,latch,await,truncate,compare,and,set,true,false,ensure,green,test,for,int,i,0,i,num,docs,i,string,id,integer,to,string,i,assert,hit,count,client,prepare,search,set,query,query,builders,term,query,id,get,1
TruncatedRecoveryIT -> public void testCancelRecoveryAndResume() throws Exception;1528762805;This test tries to truncate some of larger files in the index to trigger leftovers on the recovery_target. This happens during recovery when the last chunk of the file is transferred to the replica_we just throw an exception to make sure the recovery fails and we leave some half baked files on the target._Later we allow full recovery to ensure we can still recover and don't run into corruptions.;public void testCancelRecoveryAndResume() throws Exception {_        assertTrue(client().admin().cluster().prepareUpdateSettings().setTransientSettings(Settings.builder()_                .put(CHUNK_SIZE_SETTING.getKey(), new ByteSizeValue(randomIntBetween(50, 300), ByteSizeUnit.BYTES)))_                .get().isAcknowledged())___        NodesStatsResponse nodeStats = client().admin().cluster().prepareNodesStats().get()__        List<NodeStats> dataNodeStats = new ArrayList<>()__        for (NodeStats stat : nodeStats.getNodes()) {_            if (stat.getNode().isDataNode()) {_                dataNodeStats.add(stat)__            }_        }_        assertThat(dataNodeStats.size(), greaterThanOrEqualTo(2))__        Collections.shuffle(dataNodeStats, random())__        _        _        _        NodeStats primariesNode = dataNodeStats.get(0)__        NodeStats unluckyNode = dataNodeStats.get(1)___        _        _        assertAcked(prepareCreate("test")_                .addMapping("type1", "field1", "type=text", "the_id", "type=text")_                .setSettings(Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0).put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, numberOfShards())_                        .put("index.routing.allocation.include._name", primariesNode.getNode().getName())))_ __        _        int numDocs = randomIntBetween(100, 200)__        List<IndexRequestBuilder> builder = new ArrayList<>()__        for (int i = 0_ i < numDocs_ i++) {_            String id = Integer.toString(i)__            builder.add(client().prepareIndex("test", "type1", id).setSource("field1", English.intToEnglish(i), "the_id", id))__        }_        indexRandom(true, builder)__        for (int i = 0_ i < numDocs_ i++) {_            String id = Integer.toString(i)__            assertHitCount(client().prepareSearch().setQuery(QueryBuilders.termQuery("the_id", id)).get(), 1)__        }_        ensureGreen()__        _        client().admin().indices().prepareFlush().setForce(true).get()__        client().admin().indices().prepareForceMerge().setMaxNumSegments(1).setFlush(true).get()___        final CountDownLatch latch = new CountDownLatch(1)__        final AtomicBoolean truncate = new AtomicBoolean(true)__        for (NodeStats dataNode : dataNodeStats) {_            MockTransportService mockTransportService = ((MockTransportService) internalCluster().getInstance(TransportService.class, dataNode.getNode().getName()))__            mockTransportService.addDelegate(internalCluster().getInstance(TransportService.class, unluckyNode.getNode().getName()), new MockTransportService.DelegateTransport(mockTransportService.original()) {__                @Override_                protected void sendRequest(Connection connection, long requestId, String action, TransportRequest request,_                                           TransportRequestOptions options) throws IOException {_                    if (action.equals(PeerRecoveryTargetService.Actions.FILE_CHUNK)) {_                        RecoveryFileChunkRequest req = (RecoveryFileChunkRequest) request__                        logger.debug("file chunk [{}] lastChunk: {}", req, req.lastChunk())__                        if ((req.name().endsWith("cfs") || req.name().endsWith("fdt")) && req.lastChunk() && truncate.get()) {_                            latch.countDown()__                            throw new RuntimeException("Caused some truncated files for fun and profit")__                        }_                    }_                    super.sendRequest(connection, requestId, action, request, options)__                }_            })__        }__        logger.info("--> bumping replicas to 1")_ _        client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder()_                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 1)_                .put("index.routing.allocation.include._name",  _                        primariesNode.getNode().getName() + "," + unluckyNode.getNode().getName())).get()___        latch.await()___        _        _        truncate.compareAndSet(true, false)__        ensureGreen("test")__        for (int i = 0_ i < numDocs_ i++) {_            String id = Integer.toString(i)__            assertHitCount(client().prepareSearch().setQuery(QueryBuilders.termQuery("the_id", id)).get(), 1)__        }_    };this,test,tries,to,truncate,some,of,larger,files,in,the,index,to,trigger,leftovers,on,the,recovery,target,this,happens,during,recovery,when,the,last,chunk,of,the,file,is,transferred,to,the,replica,we,just,throw,an,exception,to,make,sure,the,recovery,fails,and,we,leave,some,half,baked,files,on,the,target,later,we,allow,full,recovery,to,ensure,we,can,still,recover,and,don,t,run,into,corruptions;public,void,test,cancel,recovery,and,resume,throws,exception,assert,true,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,new,byte,size,value,random,int,between,50,300,byte,size,unit,bytes,get,is,acknowledged,nodes,stats,response,node,stats,client,admin,cluster,prepare,nodes,stats,get,list,node,stats,data,node,stats,new,array,list,for,node,stats,stat,node,stats,get,nodes,if,stat,get,node,is,data,node,data,node,stats,add,stat,assert,that,data,node,stats,size,greater,than,or,equal,to,2,collections,shuffle,data,node,stats,random,node,stats,primaries,node,data,node,stats,get,0,node,stats,unlucky,node,data,node,stats,get,1,assert,acked,prepare,create,test,add,mapping,type1,field1,type,text,type,text,set,settings,settings,builder,put,index,meta,data,0,put,index,meta,data,number,of,shards,put,index,routing,allocation,include,primaries,node,get,node,get,name,int,num,docs,random,int,between,100,200,list,index,request,builder,builder,new,array,list,for,int,i,0,i,num,docs,i,string,id,integer,to,string,i,builder,add,client,prepare,index,test,type1,id,set,source,field1,english,int,to,english,i,id,index,random,true,builder,for,int,i,0,i,num,docs,i,string,id,integer,to,string,i,assert,hit,count,client,prepare,search,set,query,query,builders,term,query,id,get,1,ensure,green,client,admin,indices,prepare,flush,set,force,true,get,client,admin,indices,prepare,force,merge,set,max,num,segments,1,set,flush,true,get,final,count,down,latch,latch,new,count,down,latch,1,final,atomic,boolean,truncate,new,atomic,boolean,true,for,node,stats,data,node,data,node,stats,mock,transport,service,mock,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,data,node,get,node,get,name,mock,transport,service,add,delegate,internal,cluster,get,instance,transport,service,class,unlucky,node,get,node,get,name,new,mock,transport,service,delegate,transport,mock,transport,service,original,override,protected,void,send,request,connection,connection,long,request,id,string,action,transport,request,request,transport,request,options,options,throws,ioexception,if,action,equals,peer,recovery,target,service,actions,recovery,file,chunk,request,req,recovery,file,chunk,request,request,logger,debug,file,chunk,last,chunk,req,req,last,chunk,if,req,name,ends,with,cfs,req,name,ends,with,fdt,req,last,chunk,truncate,get,latch,count,down,throw,new,runtime,exception,caused,some,truncated,files,for,fun,and,profit,super,send,request,connection,request,id,action,request,options,logger,info,bumping,replicas,to,1,client,admin,indices,prepare,update,settings,test,set,settings,settings,builder,put,index,meta,data,1,put,index,routing,allocation,include,primaries,node,get,node,get,name,unlucky,node,get,node,get,name,get,latch,await,truncate,compare,and,set,true,false,ensure,green,test,for,int,i,0,i,num,docs,i,string,id,integer,to,string,i,assert,hit,count,client,prepare,search,set,query,query,builders,term,query,id,get,1
TruncatedRecoveryIT -> public void testCancelRecoveryAndResume() throws Exception;1534203100;This test tries to truncate some of larger files in the index to trigger leftovers on the recovery_target. This happens during recovery when the last chunk of the file is transferred to the replica_we just throw an exception to make sure the recovery fails and we leave some half baked files on the target._Later we allow full recovery to ensure we can still recover and don't run into corruptions.;public void testCancelRecoveryAndResume() throws Exception {_        assertTrue(client().admin().cluster().prepareUpdateSettings().setTransientSettings(Settings.builder()_            .put(CHUNK_SIZE_SETTING.getKey(), new ByteSizeValue(randomIntBetween(50, 300), ByteSizeUnit.BYTES)))_            .get().isAcknowledged())___        NodesStatsResponse nodeStats = client().admin().cluster().prepareNodesStats().get()__        List<NodeStats> dataNodeStats = new ArrayList<>()__        for (NodeStats stat : nodeStats.getNodes()) {_            if (stat.getNode().isDataNode()) {_                dataNodeStats.add(stat)__            }_        }_        assertThat(dataNodeStats.size(), greaterThanOrEqualTo(2))__        Collections.shuffle(dataNodeStats, random())__        _        _        _        NodeStats primariesNode = dataNodeStats.get(0)__        NodeStats unluckyNode = dataNodeStats.get(1)___        _        _        assertAcked(prepareCreate("test")_            .addMapping("type1", "field1", "type=text", "the_id", "type=text")_            .setSettings(Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0).put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, numberOfShards())_                .put("index.routing.allocation.include._name", primariesNode.getNode().getName())))_ __        _        int numDocs = randomIntBetween(100, 200)__        List<IndexRequestBuilder> builder = new ArrayList<>()__        for (int i = 0_ i < numDocs_ i++) {_            String id = Integer.toString(i)__            builder.add(client().prepareIndex("test", "type1", id).setSource("field1", English.intToEnglish(i), "the_id", id))__        }_        indexRandom(true, builder)__        for (int i = 0_ i < numDocs_ i++) {_            String id = Integer.toString(i)__            assertHitCount(client().prepareSearch().setQuery(QueryBuilders.termQuery("the_id", id)).get(), 1)__        }_        ensureGreen()__        _        client().admin().indices().prepareFlush().setForce(true).get()__        client().admin().indices().prepareForceMerge().setMaxNumSegments(1).setFlush(true).get()___        final CountDownLatch latch = new CountDownLatch(1)__        final AtomicBoolean truncate = new AtomicBoolean(true)__        for (NodeStats dataNode : dataNodeStats) {_            MockTransportService mockTransportService = ((MockTransportService) internalCluster().getInstance(TransportService.class, dataNode.getNode().getName()))__            mockTransportService.addSendBehavior(internalCluster().getInstance(TransportService.class, unluckyNode.getNode().getName()),_                (connection, requestId, action, request, options) -> {_                    if (action.equals(PeerRecoveryTargetService.Actions.FILE_CHUNK)) {_                        RecoveryFileChunkRequest req = (RecoveryFileChunkRequest) request__                        logger.debug("file chunk [{}] lastChunk: {}", req, req.lastChunk())__                        if ((req.name().endsWith("cfs") || req.name().endsWith("fdt")) && req.lastChunk() && truncate.get()) {_                            latch.countDown()__                            throw new RuntimeException("Caused some truncated files for fun and profit")__                        }_                    }_                    connection.sendRequest(requestId, action, request, options)__                })__        }__        logger.info("--> bumping replicas to 1")_ _        client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder()_            .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 1)_            .put("index.routing.allocation.include._name",  _                primariesNode.getNode().getName() + "," + unluckyNode.getNode().getName())).get()___        latch.await()___        _        _        truncate.compareAndSet(true, false)__        ensureGreen("test")__        for (int i = 0_ i < numDocs_ i++) {_            String id = Integer.toString(i)__            assertHitCount(client().prepareSearch().setQuery(QueryBuilders.termQuery("the_id", id)).get(), 1)__        }_    };this,test,tries,to,truncate,some,of,larger,files,in,the,index,to,trigger,leftovers,on,the,recovery,target,this,happens,during,recovery,when,the,last,chunk,of,the,file,is,transferred,to,the,replica,we,just,throw,an,exception,to,make,sure,the,recovery,fails,and,we,leave,some,half,baked,files,on,the,target,later,we,allow,full,recovery,to,ensure,we,can,still,recover,and,don,t,run,into,corruptions;public,void,test,cancel,recovery,and,resume,throws,exception,assert,true,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,new,byte,size,value,random,int,between,50,300,byte,size,unit,bytes,get,is,acknowledged,nodes,stats,response,node,stats,client,admin,cluster,prepare,nodes,stats,get,list,node,stats,data,node,stats,new,array,list,for,node,stats,stat,node,stats,get,nodes,if,stat,get,node,is,data,node,data,node,stats,add,stat,assert,that,data,node,stats,size,greater,than,or,equal,to,2,collections,shuffle,data,node,stats,random,node,stats,primaries,node,data,node,stats,get,0,node,stats,unlucky,node,data,node,stats,get,1,assert,acked,prepare,create,test,add,mapping,type1,field1,type,text,type,text,set,settings,settings,builder,put,index,meta,data,0,put,index,meta,data,number,of,shards,put,index,routing,allocation,include,primaries,node,get,node,get,name,int,num,docs,random,int,between,100,200,list,index,request,builder,builder,new,array,list,for,int,i,0,i,num,docs,i,string,id,integer,to,string,i,builder,add,client,prepare,index,test,type1,id,set,source,field1,english,int,to,english,i,id,index,random,true,builder,for,int,i,0,i,num,docs,i,string,id,integer,to,string,i,assert,hit,count,client,prepare,search,set,query,query,builders,term,query,id,get,1,ensure,green,client,admin,indices,prepare,flush,set,force,true,get,client,admin,indices,prepare,force,merge,set,max,num,segments,1,set,flush,true,get,final,count,down,latch,latch,new,count,down,latch,1,final,atomic,boolean,truncate,new,atomic,boolean,true,for,node,stats,data,node,data,node,stats,mock,transport,service,mock,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,data,node,get,node,get,name,mock,transport,service,add,send,behavior,internal,cluster,get,instance,transport,service,class,unlucky,node,get,node,get,name,connection,request,id,action,request,options,if,action,equals,peer,recovery,target,service,actions,recovery,file,chunk,request,req,recovery,file,chunk,request,request,logger,debug,file,chunk,last,chunk,req,req,last,chunk,if,req,name,ends,with,cfs,req,name,ends,with,fdt,req,last,chunk,truncate,get,latch,count,down,throw,new,runtime,exception,caused,some,truncated,files,for,fun,and,profit,connection,send,request,request,id,action,request,options,logger,info,bumping,replicas,to,1,client,admin,indices,prepare,update,settings,test,set,settings,settings,builder,put,index,meta,data,1,put,index,routing,allocation,include,primaries,node,get,node,get,name,unlucky,node,get,node,get,name,get,latch,await,truncate,compare,and,set,true,false,ensure,green,test,for,int,i,0,i,num,docs,i,string,id,integer,to,string,i,assert,hit,count,client,prepare,search,set,query,query,builders,term,query,id,get,1
TruncatedRecoveryIT -> public void testCancelRecoveryAndResume() throws Exception;1545065985;This test tries to truncate some of larger files in the index to trigger leftovers on the recovery_target. This happens during recovery when the last chunk of the file is transferred to the replica_we just throw an exception to make sure the recovery fails and we leave some half baked files on the target._Later we allow full recovery to ensure we can still recover and don't run into corruptions.;public void testCancelRecoveryAndResume() throws Exception {_        assertTrue(client().admin().cluster().prepareUpdateSettings().setTransientSettings(Settings.builder()_            .put(CHUNK_SIZE_SETTING.getKey(), new ByteSizeValue(randomIntBetween(50, 300), ByteSizeUnit.BYTES)))_            .get().isAcknowledged())___        NodesStatsResponse nodeStats = client().admin().cluster().prepareNodesStats().get()__        List<NodeStats> dataNodeStats = new ArrayList<>()__        for (NodeStats stat : nodeStats.getNodes()) {_            if (stat.getNode().isDataNode()) {_                dataNodeStats.add(stat)__            }_        }_        assertThat(dataNodeStats.size(), greaterThanOrEqualTo(2))__        Collections.shuffle(dataNodeStats, random())__        _        _        _        NodeStats primariesNode = dataNodeStats.get(0)__        NodeStats unluckyNode = dataNodeStats.get(1)___        _        _        assertAcked(prepareCreate("test")_            .addMapping("type1", "field1", "type=text", "the_id", "type=text")_            .setSettings(Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)_                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, numberOfShards())_                .put("index.routing.allocation.include._name", primariesNode.getNode().getName())))_ __        _        int numDocs = randomIntBetween(100, 200)__        List<IndexRequestBuilder> builder = new ArrayList<>()__        for (int i = 0_ i < numDocs_ i++) {_            String id = Integer.toString(i)__            builder.add(client().prepareIndex("test", "type1", id).setSource("field1", English.intToEnglish(i), "the_id", id))__        }_        indexRandom(true, builder)__        for (int i = 0_ i < numDocs_ i++) {_            String id = Integer.toString(i)__            assertHitCount(client().prepareSearch().setQuery(QueryBuilders.termQuery("the_id", id)).get(), 1)__        }_        ensureGreen()__        _        client().admin().indices().prepareFlush().setForce(true).get()__        client().admin().indices().prepareForceMerge().setMaxNumSegments(1).setFlush(true).get()___        final CountDownLatch latch = new CountDownLatch(1)__        final AtomicBoolean truncate = new AtomicBoolean(true)__        for (NodeStats dataNode : dataNodeStats) {_            MockTransportService mockTransportService = ((MockTransportService) internalCluster()_                    .getInstance(TransportService.class, dataNode.getNode().getName()))__            mockTransportService.addSendBehavior(internalCluster().getInstance(TransportService.class, unluckyNode.getNode().getName()),_                (connection, requestId, action, request, options) -> {_                    if (action.equals(PeerRecoveryTargetService.Actions.FILE_CHUNK)) {_                        RecoveryFileChunkRequest req = (RecoveryFileChunkRequest) request__                        logger.debug("file chunk [{}] lastChunk: {}", req, req.lastChunk())__                        if ((req.name().endsWith("cfs") || req.name().endsWith("fdt")) && req.lastChunk() && truncate.get()) {_                            latch.countDown()__                            throw new RuntimeException("Caused some truncated files for fun and profit")__                        }_                    }_                    connection.sendRequest(requestId, action, request, options)__                })__        }__        logger.info("--> bumping replicas to 1")_ _        client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder()_            .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 1)_            .put("index.routing.allocation.include._name",  _                primariesNode.getNode().getName() + "," + unluckyNode.getNode().getName())).get()___        latch.await()___        _        _        truncate.compareAndSet(true, false)__        ensureGreen("test")__        for (int i = 0_ i < numDocs_ i++) {_            String id = Integer.toString(i)__            assertHitCount(client().prepareSearch().setQuery(QueryBuilders.termQuery("the_id", id)).get(), 1)__        }_    };this,test,tries,to,truncate,some,of,larger,files,in,the,index,to,trigger,leftovers,on,the,recovery,target,this,happens,during,recovery,when,the,last,chunk,of,the,file,is,transferred,to,the,replica,we,just,throw,an,exception,to,make,sure,the,recovery,fails,and,we,leave,some,half,baked,files,on,the,target,later,we,allow,full,recovery,to,ensure,we,can,still,recover,and,don,t,run,into,corruptions;public,void,test,cancel,recovery,and,resume,throws,exception,assert,true,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,new,byte,size,value,random,int,between,50,300,byte,size,unit,bytes,get,is,acknowledged,nodes,stats,response,node,stats,client,admin,cluster,prepare,nodes,stats,get,list,node,stats,data,node,stats,new,array,list,for,node,stats,stat,node,stats,get,nodes,if,stat,get,node,is,data,node,data,node,stats,add,stat,assert,that,data,node,stats,size,greater,than,or,equal,to,2,collections,shuffle,data,node,stats,random,node,stats,primaries,node,data,node,stats,get,0,node,stats,unlucky,node,data,node,stats,get,1,assert,acked,prepare,create,test,add,mapping,type1,field1,type,text,type,text,set,settings,settings,builder,put,index,meta,data,0,put,index,meta,data,number,of,shards,put,index,routing,allocation,include,primaries,node,get,node,get,name,int,num,docs,random,int,between,100,200,list,index,request,builder,builder,new,array,list,for,int,i,0,i,num,docs,i,string,id,integer,to,string,i,builder,add,client,prepare,index,test,type1,id,set,source,field1,english,int,to,english,i,id,index,random,true,builder,for,int,i,0,i,num,docs,i,string,id,integer,to,string,i,assert,hit,count,client,prepare,search,set,query,query,builders,term,query,id,get,1,ensure,green,client,admin,indices,prepare,flush,set,force,true,get,client,admin,indices,prepare,force,merge,set,max,num,segments,1,set,flush,true,get,final,count,down,latch,latch,new,count,down,latch,1,final,atomic,boolean,truncate,new,atomic,boolean,true,for,node,stats,data,node,data,node,stats,mock,transport,service,mock,transport,service,mock,transport,service,internal,cluster,get,instance,transport,service,class,data,node,get,node,get,name,mock,transport,service,add,send,behavior,internal,cluster,get,instance,transport,service,class,unlucky,node,get,node,get,name,connection,request,id,action,request,options,if,action,equals,peer,recovery,target,service,actions,recovery,file,chunk,request,req,recovery,file,chunk,request,request,logger,debug,file,chunk,last,chunk,req,req,last,chunk,if,req,name,ends,with,cfs,req,name,ends,with,fdt,req,last,chunk,truncate,get,latch,count,down,throw,new,runtime,exception,caused,some,truncated,files,for,fun,and,profit,connection,send,request,request,id,action,request,options,logger,info,bumping,replicas,to,1,client,admin,indices,prepare,update,settings,test,set,settings,settings,builder,put,index,meta,data,1,put,index,routing,allocation,include,primaries,node,get,node,get,name,unlucky,node,get,node,get,name,get,latch,await,truncate,compare,and,set,true,false,ensure,green,test,for,int,i,0,i,num,docs,i,string,id,integer,to,string,i,assert,hit,count,client,prepare,search,set,query,query,builders,term,query,id,get,1
