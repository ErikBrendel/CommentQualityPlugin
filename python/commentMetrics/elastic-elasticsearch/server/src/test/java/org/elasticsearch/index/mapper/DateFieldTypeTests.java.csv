commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected MappedFieldType createDefaultFieldType() {     return new DateFieldMapper.DateFieldType(). }
false;public;1;4;;@Override public void modify(MappedFieldType ft) {     ((DateFieldType) ft).setDateTimeFormatter(DateFormatter.forPattern("basic_week_date")). }
false;public;1;4;;@Override public void modify(MappedFieldType ft) {     ((DateFieldType) ft).setDateTimeFormatter(DateFormatter.forPattern("strict_date_optional_time").withLocale(Locale.CANADA)). }
false;public;0;17;;@Before public void setupProperties() {     setDummyNullValue(10).     addModifier(new Modifier("format", false) {          @Override         public void modify(MappedFieldType ft) {             ((DateFieldType) ft).setDateTimeFormatter(DateFormatter.forPattern("basic_week_date")).         }     }).     addModifier(new Modifier("locale", false) {          @Override         public void modify(MappedFieldType ft) {             ((DateFieldType) ft).setDateTimeFormatter(DateFormatter.forPattern("strict_date_optional_time").withLocale(Locale.CANADA)).         }     }).     nowInMillis = randomNonNegativeLong(). }
false;public;0;8;;public void testIsFieldWithinQueryEmptyReader() throws IOException {     QueryRewriteContext context = new QueryRewriteContext(xContentRegistry(), writableRegistry(), null, () -> nowInMillis).     IndexReader reader = new MultiReader().     DateFieldType ft = new DateFieldType().     ft.setName("my_date").     assertEquals(Relation.DISJOINT, ft.isFieldWithinQuery(reader, "2015-10-12", "2016-04-03", randomBoolean(), randomBoolean(), null, null, context)). }
false;private;4;24;;private void doTestIsFieldWithinQuery(DateFieldType ft, DirectoryReader reader, DateTimeZone zone, DateMathParser alternateFormat) throws IOException {     QueryRewriteContext context = new QueryRewriteContext(xContentRegistry(), writableRegistry(), null, () -> nowInMillis).     assertEquals(Relation.INTERSECTS, ft.isFieldWithinQuery(reader, "2015-10-09", "2016-01-02", randomBoolean(), randomBoolean(), null, null, context)).     assertEquals(Relation.INTERSECTS, ft.isFieldWithinQuery(reader, "2016-01-02", "2016-06-20", randomBoolean(), randomBoolean(), null, null, context)).     assertEquals(Relation.INTERSECTS, ft.isFieldWithinQuery(reader, "2016-01-02", "2016-02-12", randomBoolean(), randomBoolean(), null, null, context)).     assertEquals(Relation.DISJOINT, ft.isFieldWithinQuery(reader, "2014-01-02", "2015-02-12", randomBoolean(), randomBoolean(), null, null, context)).     assertEquals(Relation.DISJOINT, ft.isFieldWithinQuery(reader, "2016-05-11", "2016-08-30", randomBoolean(), randomBoolean(), null, null, context)).     assertEquals(Relation.WITHIN, ft.isFieldWithinQuery(reader, "2015-09-25", "2016-05-29", randomBoolean(), randomBoolean(), null, null, context)).     assertEquals(Relation.WITHIN, ft.isFieldWithinQuery(reader, "2015-10-12", "2016-04-03", true, true, null, null, context)).     assertEquals(Relation.INTERSECTS, ft.isFieldWithinQuery(reader, "2015-10-12", "2016-04-03", false, false, null, null, context)).     assertEquals(Relation.INTERSECTS, ft.isFieldWithinQuery(reader, "2015-10-12", "2016-04-03", false, true, null, null, context)).     assertEquals(Relation.INTERSECTS, ft.isFieldWithinQuery(reader, "2015-10-12", "2016-04-03", true, false, null, null, context)). }
false;public;0;30;;public void testIsFieldWithinQuery() throws IOException {     Directory dir = newDirectory().     IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null)).     long instant1 = DateFormatters.from(DateFieldMapper.DEFAULT_DATE_TIME_FORMATTER.parse("2015-10-12")).toInstant().toEpochMilli().     long instant2 = DateFormatters.from(DateFieldMapper.DEFAULT_DATE_TIME_FORMATTER.parse("2016-04-03")).toInstant().toEpochMilli().     Document doc = new Document().     LongPoint field = new LongPoint("my_date", instant1).     doc.add(field).     w.addDocument(doc).     field.setLongValue(instant2).     w.addDocument(doc).     DirectoryReader reader = DirectoryReader.open(w).     DateFieldType ft = new DateFieldType().     ft.setName("my_date").     DateMathParser alternateFormat = DateFieldMapper.DEFAULT_DATE_TIME_FORMATTER.toDateMathParser().     doTestIsFieldWithinQuery(ft, reader, null, null).     doTestIsFieldWithinQuery(ft, reader, null, alternateFormat).     doTestIsFieldWithinQuery(ft, reader, DateTimeZone.UTC, null).     doTestIsFieldWithinQuery(ft, reader, DateTimeZone.UTC, alternateFormat).     // Fields with no value indexed.     DateFieldType ft2 = new DateFieldType().     ft2.setName("my_date2").     QueryRewriteContext context = new QueryRewriteContext(xContentRegistry(), writableRegistry(), null, () -> nowInMillis).     assertEquals(Relation.DISJOINT, ft2.isFieldWithinQuery(reader, "2015-10-09", "2016-01-02", false, false, null, null, context)).     IOUtils.close(reader, w, dir). }
false;public;0;18;;public void testValueFormat() {     MappedFieldType ft = createDefaultFieldType().     long instant = DateFormatters.from(DateFieldMapper.DEFAULT_DATE_TIME_FORMATTER.parse("2015-10-12T14:10:55")).toInstant().toEpochMilli().     assertEquals("2015-10-12T14:10:55.000Z", ft.docValueFormat(null, ZoneOffset.UTC).format(instant)).     assertEquals("2015-10-12T15:10:55.000+01:00", ft.docValueFormat(null, ZoneOffset.ofHours(1)).format(instant)).     assertEquals("2015", createDefaultFieldType().docValueFormat("YYYY", ZoneOffset.UTC).format(instant)).     assertEquals(instant, ft.docValueFormat(null, ZoneOffset.UTC).parseLong("2015-10-12T14:10:55", false, null)).     assertEquals(instant + 999, ft.docValueFormat(null, ZoneOffset.UTC).parseLong("2015-10-12T14:10:55", true, null)).     long i = DateFormatters.from(DateFieldMapper.DEFAULT_DATE_TIME_FORMATTER.parse("2015-10-13")).toInstant().toEpochMilli().     assertEquals(i - 1, ft.docValueFormat(null, ZoneOffset.UTC).parseLong("2015-10-12||/d", true, null)). }
false;public;0;6;;public void testValueForSearch() {     MappedFieldType ft = createDefaultFieldType().     String date = "2015-10-12T12:09:55.000Z".     long instant = DateFieldMapper.DEFAULT_DATE_TIME_FORMATTER.parseMillis(date).     assertEquals(date, ft.valueForDisplay(instant)). }
false;public;0;22;;public void testTermQuery() {     Settings indexSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 1).build().     QueryShardContext context = new QueryShardContext(0, new IndexSettings(IndexMetaData.builder("foo").settings(indexSettings).build(), indexSettings), null, null, null, null, null, xContentRegistry(), writableRegistry(), null, null, () -> nowInMillis, null).     MappedFieldType ft = createDefaultFieldType().     ft.setName("field").     String date = "2015-10-12T14:10:55".     long instant = DateFormatters.from(DateFieldMapper.DEFAULT_DATE_TIME_FORMATTER.parse(date)).toInstant().toEpochMilli().     ft.setIndexOptions(IndexOptions.DOCS).     Query expected = new IndexOrDocValuesQuery(LongPoint.newRangeQuery("field", instant, instant + 999), SortedNumericDocValuesField.newSlowRangeQuery("field", instant, instant + 999)).     assertEquals(expected, ft.termQuery(date, context)).     ft.setIndexOptions(IndexOptions.NONE).     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> ft.termQuery(date, context)).     assertEquals("Cannot search on field [field] since it is not indexed.", e.getMessage()). }
false;public;0;25;;public void testRangeQuery() throws IOException {     Settings indexSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 1).build().     QueryShardContext context = new QueryShardContext(0, new IndexSettings(IndexMetaData.builder("foo").settings(indexSettings).build(), indexSettings), null, null, null, null, null, xContentRegistry(), writableRegistry(), null, null, () -> nowInMillis, null).     MappedFieldType ft = createDefaultFieldType().     ft.setName("field").     String date1 = "2015-10-12T14:10:55".     String date2 = "2016-04-28T11:33:52".     long instant1 = DateFormatters.from(DateFieldMapper.DEFAULT_DATE_TIME_FORMATTER.parse(date1)).toInstant().toEpochMilli().     long instant2 = DateFormatters.from(DateFieldMapper.DEFAULT_DATE_TIME_FORMATTER.parse(date2)).toInstant().toEpochMilli() + 999.     ft.setIndexOptions(IndexOptions.DOCS).     Query expected = new IndexOrDocValuesQuery(LongPoint.newRangeQuery("field", instant1, instant2), SortedNumericDocValuesField.newSlowRangeQuery("field", instant1, instant2)).     assertEquals(expected, ft.rangeQuery(date1, date2, true, true, null, null, null, context).rewrite(new MultiReader())).     ft.setIndexOptions(IndexOptions.NONE).     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> ft.rangeQuery(date1, date2, true, true, null, null, null, context)).     assertEquals("Cannot search on field [field] since it is not indexed.", e.getMessage()). }
false;public;0;28;;public void testDateNanoDocValues() throws IOException {     // Create an index with some docValues     Directory dir = newDirectory().     IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null)).     Document doc = new Document().     NumericDocValuesField docValuesField = new NumericDocValuesField("my_date", 1444608000000L).     doc.add(docValuesField).     w.addDocument(doc).     docValuesField.setLongValue(1459641600000L).     w.addDocument(doc).     // Create the doc values reader     Settings settings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 1).build().     IndexSettings indexSettings = new IndexSettings(IndexMetaData.builder("foo").settings(settings).build(), settings).     SortedNumericDVIndexFieldData fieldData = new SortedNumericDVIndexFieldData(indexSettings.getIndex(), "my_date", IndexNumericFieldData.NumericType.DATE_NANOSECONDS).     // Read index and check the doc values     DirectoryReader reader = DirectoryReader.open(w).     assertTrue(reader.leaves().size() > 0).     AtomicNumericFieldData a = fieldData.load(reader.leaves().get(0).reader().getContext()).     SortedNumericDocValues docValues = a.getLongValues().     assertEquals(0, docValues.nextDoc()).     assertEquals(1, docValues.nextDoc()).     assertEquals(DocIdSetIterator.NO_MORE_DOCS, docValues.nextDoc()).     reader.close().     w.close().     dir.close(). }
