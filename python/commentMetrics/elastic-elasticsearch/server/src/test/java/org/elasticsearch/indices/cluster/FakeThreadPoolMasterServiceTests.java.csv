commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public ClusterState execute(ClusterState currentState) {     return ClusterState.builder(currentState).metaData(MetaData.builder(currentState.metaData()).put(indexBuilder("test1"))).build(). }
false;public;3;5;;@Override public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {     assertFalse(firstTaskCompleted.get()).     firstTaskCompleted.set(true). }
false;public;2;4;;@Override public void onFailure(String source, Exception e) {     throw new AssertionError(). }
false;public;1;5;;@Override public ClusterState execute(ClusterState currentState) {     return ClusterState.builder(currentState).metaData(MetaData.builder(currentState.metaData()).put(indexBuilder("test2"))).build(). }
false;public;3;5;;@Override public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {     assertFalse(secondTaskCompleted.get()).     secondTaskCompleted.set(true). }
false;public;2;4;;@Override public void onFailure(String source, Exception e) {     throw new AssertionError(). }
false;public;0;82;;public void testFakeMasterService() {     List<Runnable> runnableTasks = new ArrayList<>().     AtomicReference<ClusterState> lastClusterStateRef = new AtomicReference<>().     DiscoveryNode discoveryNode = new DiscoveryNode("node", ESTestCase.buildNewFakeTransportAddress(), Collections.emptyMap(), new HashSet<>(Arrays.asList(DiscoveryNode.Role.values())), Version.CURRENT).     lastClusterStateRef.set(ClusterStateCreationUtils.state(discoveryNode, discoveryNode)).     long firstClusterStateVersion = lastClusterStateRef.get().version().     AtomicReference<ActionListener<Void>> publishingCallback = new AtomicReference<>().     FakeThreadPoolMasterService masterService = new FakeThreadPoolMasterService("test_node", "test", runnableTasks::add).     masterService.setClusterStateSupplier(lastClusterStateRef::get).     masterService.setClusterStatePublisher((event, publishListener, ackListener) -> {         lastClusterStateRef.set(event.state()).         publishingCallback.set(publishListener).     }).     masterService.start().     AtomicBoolean firstTaskCompleted = new AtomicBoolean().     masterService.submitStateUpdateTask("test1", new ClusterStateUpdateTask() {          @Override         public ClusterState execute(ClusterState currentState) {             return ClusterState.builder(currentState).metaData(MetaData.builder(currentState.metaData()).put(indexBuilder("test1"))).build().         }          @Override         public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {             assertFalse(firstTaskCompleted.get()).             firstTaskCompleted.set(true).         }          @Override         public void onFailure(String source, Exception e) {             throw new AssertionError().         }     }).     assertThat(runnableTasks.size(), equalTo(1)).     assertThat(lastClusterStateRef.get().metaData().indices().size(), equalTo(0)).     assertThat(lastClusterStateRef.get().version(), equalTo(firstClusterStateVersion)).     assertNull(publishingCallback.get()).     assertFalse(firstTaskCompleted.get()).     runnableTasks.remove(0).run().     assertThat(lastClusterStateRef.get().metaData().indices().size(), equalTo(1)).     assertThat(lastClusterStateRef.get().version(), equalTo(firstClusterStateVersion + 1)).     assertNotNull(publishingCallback.get()).     assertFalse(firstTaskCompleted.get()).     assertThat(runnableTasks.size(), equalTo(0)).     AtomicBoolean secondTaskCompleted = new AtomicBoolean().     masterService.submitStateUpdateTask("test2", new ClusterStateUpdateTask() {          @Override         public ClusterState execute(ClusterState currentState) {             return ClusterState.builder(currentState).metaData(MetaData.builder(currentState.metaData()).put(indexBuilder("test2"))).build().         }          @Override         public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {             assertFalse(secondTaskCompleted.get()).             secondTaskCompleted.set(true).         }          @Override         public void onFailure(String source, Exception e) {             throw new AssertionError().         }     }).     assertThat(runnableTasks.size(), equalTo(0)).     publishingCallback.getAndSet(null).onResponse(null).     assertTrue(firstTaskCompleted.get()).     // check that new task gets queued     assertThat(runnableTasks.size(), equalTo(1)).     runnableTasks.remove(0).run().     assertThat(lastClusterStateRef.get().metaData().indices().size(), equalTo(2)).     assertThat(lastClusterStateRef.get().version(), equalTo(firstClusterStateVersion + 2)).     assertNotNull(publishingCallback.get()).     assertFalse(secondTaskCompleted.get()).     publishingCallback.getAndSet(null).onResponse(null).     assertTrue(secondTaskCompleted.get()).     // check that no more tasks are queued     assertThat(runnableTasks.size(), equalTo(0)). }
false;private,static;1;4;;private static IndexMetaData.Builder indexBuilder(String index) {     return IndexMetaData.builder(index).settings(settings(Version.CURRENT).put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)). }
