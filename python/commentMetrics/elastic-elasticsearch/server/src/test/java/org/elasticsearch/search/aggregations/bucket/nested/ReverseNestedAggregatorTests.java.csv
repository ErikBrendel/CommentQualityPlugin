commented;modifiers;parameterAmount;loc;comment;code
true;protected;1;6;/**  * For each provided field type, we also register an alias with name {@code <field>-alias}.  */ ;/**  * For each provided field type, we also register an alias with name {@code <field>-alias}.  */ @Override protected Map<String, MappedFieldType> getFieldAliases(MappedFieldType... fieldTypes) {     return Arrays.stream(fieldTypes).collect(Collectors.toMap(ft -> ft.name() + "-alias", Function.identity())). }
false;public;0;32;;public void testNoDocs() throws IOException {     try (Directory directory = newDirectory()) {         try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory)) {         // intentionally not writing any docs         }         try (IndexReader indexReader = wrap(DirectoryReader.open(directory))) {             NestedAggregationBuilder nestedBuilder = new NestedAggregationBuilder(NESTED_AGG, NESTED_OBJECT).             ReverseNestedAggregationBuilder reverseNestedBuilder = new ReverseNestedAggregationBuilder(REVERSE_AGG_NAME).             nestedBuilder.subAggregation(reverseNestedBuilder).             MaxAggregationBuilder maxAgg = new MaxAggregationBuilder(MAX_AGG_NAME).field(VALUE_FIELD_NAME).             reverseNestedBuilder.subAggregation(maxAgg).             MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.LONG).             fieldType.setName(VALUE_FIELD_NAME).             Nested nested = search(newSearcher(indexReader, false, true), new MatchAllDocsQuery(), nestedBuilder, fieldType).             ReverseNested reverseNested = (ReverseNested) ((InternalAggregation) nested).getProperty(REVERSE_AGG_NAME).             assertEquals(REVERSE_AGG_NAME, reverseNested.getName()).             assertEquals(0, reverseNested.getDocCount()).             InternalMax max = (InternalMax) ((InternalAggregation) reverseNested).getProperty(MAX_AGG_NAME).             assertEquals(MAX_AGG_NAME, max.getName()).             assertEquals(Double.NEGATIVE_INFINITY, max.getValue(), Double.MIN_VALUE).         }     } }
false;public;0;65;;public void testMaxFromParentDocs() throws IOException {     int numParentDocs = randomIntBetween(1, 20).     int expectedParentDocs = 0.     int expectedNestedDocs = 0.     double expectedMaxValue = Double.NEGATIVE_INFINITY.     try (Directory directory = newDirectory()) {         try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory)) {             for (int i = 0. i < numParentDocs. i++) {                 List<Document> documents = new ArrayList<>().                 int numNestedDocs = randomIntBetween(0, 20).                 for (int nested = 0. nested < numNestedDocs. nested++) {                     Document document = new Document().                     document.add(new Field(IdFieldMapper.NAME, Uid.encodeId(Integer.toString(i)), IdFieldMapper.Defaults.NESTED_FIELD_TYPE)).                     document.add(new Field(TypeFieldMapper.NAME, "__" + NESTED_OBJECT, TypeFieldMapper.Defaults.FIELD_TYPE)).                     documents.add(document).                     expectedNestedDocs++.                 }                 Document document = new Document().                 document.add(new Field(IdFieldMapper.NAME, Uid.encodeId(Integer.toString(i)), IdFieldMapper.Defaults.FIELD_TYPE)).                 document.add(new Field(TypeFieldMapper.NAME, "test", TypeFieldMapper.Defaults.FIELD_TYPE)).                 long value = randomNonNegativeLong() % 10000.                 document.add(new SortedNumericDocValuesField(VALUE_FIELD_NAME, value)).                 document.add(SeqNoFieldMapper.SequenceIDFields.emptySeqID().primaryTerm).                 if (numNestedDocs > 0) {                     expectedMaxValue = Math.max(expectedMaxValue, value).                     expectedParentDocs++.                 }                 documents.add(document).                 iw.addDocuments(documents).             }             iw.commit().         }         try (IndexReader indexReader = wrap(DirectoryReader.open(directory))) {             NestedAggregationBuilder nestedBuilder = new NestedAggregationBuilder(NESTED_AGG, NESTED_OBJECT).             ReverseNestedAggregationBuilder reverseNestedBuilder = new ReverseNestedAggregationBuilder(REVERSE_AGG_NAME).             nestedBuilder.subAggregation(reverseNestedBuilder).             MaxAggregationBuilder maxAgg = new MaxAggregationBuilder(MAX_AGG_NAME).field(VALUE_FIELD_NAME).             reverseNestedBuilder.subAggregation(maxAgg).             MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.LONG).             fieldType.setName(VALUE_FIELD_NAME).             Nested nested = search(newSearcher(indexReader, false, true), new MatchAllDocsQuery(), nestedBuilder, fieldType).             assertEquals(expectedNestedDocs, nested.getDocCount()).             ReverseNested reverseNested = (ReverseNested) ((InternalAggregation) nested).getProperty(REVERSE_AGG_NAME).             assertEquals(REVERSE_AGG_NAME, reverseNested.getName()).             assertEquals(expectedParentDocs, reverseNested.getDocCount()).             InternalMax max = (InternalMax) ((InternalAggregation) reverseNested).getProperty(MAX_AGG_NAME).             assertEquals(MAX_AGG_NAME, max.getName()).             assertEquals(expectedMaxValue, max.getValue(), Double.MIN_VALUE).         }     } }
false;public;0;62;;public void testFieldAlias() throws IOException {     int numParentDocs = randomIntBetween(1, 20).     int expectedParentDocs = 0.     MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.LONG).     fieldType.setName(VALUE_FIELD_NAME).     try (Directory directory = newDirectory()) {         try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory)) {             for (int i = 0. i < numParentDocs. i++) {                 List<Document> documents = new ArrayList<>().                 int numNestedDocs = randomIntBetween(0, 20).                 if (numNestedDocs > 0) {                     expectedParentDocs++.                 }                 for (int nested = 0. nested < numNestedDocs. nested++) {                     Document document = new Document().                     document.add(new Field(IdFieldMapper.NAME, Uid.encodeId(Integer.toString(i)), IdFieldMapper.Defaults.NESTED_FIELD_TYPE)).                     document.add(new Field(TypeFieldMapper.NAME, "__" + NESTED_OBJECT, TypeFieldMapper.Defaults.FIELD_TYPE)).                     documents.add(document).                 }                 Document document = new Document().                 document.add(new Field(IdFieldMapper.NAME, Uid.encodeId(Integer.toString(i)), IdFieldMapper.Defaults.FIELD_TYPE)).                 document.add(new Field(TypeFieldMapper.NAME, "test", TypeFieldMapper.Defaults.FIELD_TYPE)).                 long value = randomNonNegativeLong() % 10000.                 document.add(new SortedNumericDocValuesField(VALUE_FIELD_NAME, value)).                 document.add(SeqNoFieldMapper.SequenceIDFields.emptySeqID().primaryTerm).                 documents.add(document).                 iw.addDocuments(documents).             }             iw.commit().         }         try (IndexReader indexReader = wrap(DirectoryReader.open(directory))) {             MaxAggregationBuilder maxAgg = max(MAX_AGG_NAME).field(VALUE_FIELD_NAME).             MaxAggregationBuilder aliasMaxAgg = max(MAX_AGG_NAME).field(VALUE_FIELD_NAME + "-alias").             NestedAggregationBuilder agg = nested(NESTED_AGG, NESTED_OBJECT).subAggregation(reverseNested(REVERSE_AGG_NAME).subAggregation(maxAgg)).             NestedAggregationBuilder aliasAgg = nested(NESTED_AGG, NESTED_OBJECT).subAggregation(reverseNested(REVERSE_AGG_NAME).subAggregation(aliasMaxAgg)).             Nested nested = search(newSearcher(indexReader, false, true), new MatchAllDocsQuery(), agg, fieldType).             Nested aliasNested = search(newSearcher(indexReader, false, true), new MatchAllDocsQuery(), aliasAgg, fieldType).             ReverseNested reverseNested = nested.getAggregations().get(REVERSE_AGG_NAME).             ReverseNested aliasReverseNested = aliasNested.getAggregations().get(REVERSE_AGG_NAME).             assertEquals(reverseNested, aliasReverseNested).             assertEquals(expectedParentDocs, reverseNested.getDocCount()).         }     } }
