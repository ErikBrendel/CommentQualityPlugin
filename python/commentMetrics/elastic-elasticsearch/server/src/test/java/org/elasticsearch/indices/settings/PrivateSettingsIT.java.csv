commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     return Collections.singletonList(InternalOrPrivateSettingsPlugin.class). }
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> transportClientPlugins() {     return Collections.singletonList(InternalOrPrivateSettingsPlugin.class). }
false;public;0;6;;public void testSetPrivateIndexSettingOnCreate() {     final Settings settings = Settings.builder().put("index.private", "private").build().     final Exception e = expectThrows(Exception.class, () -> createIndex("index", settings)).     assertThat(e, anyOf(instanceOf(IllegalArgumentException.class), instanceOf(ValidationException.class))).     assertThat(e, hasToString(containsString("private index setting [index.private] can not be set explicitly"))). }
false;public;0;14;;public void testUpdatePrivateIndexSettingViaSettingsAPI() {     createIndex("test").     // we can not update the setting via the update settings API     final IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().put("index.private", "private-update")).get()).     final String message = "can not update private setting [index.private]. this setting is managed by Elasticsearch".     assertThat(e, hasToString(containsString(message))).     final GetSettingsResponse responseAfterAttemptedUpdate = client().admin().indices().prepareGetSettings("test").get().     assertNull(responseAfterAttemptedUpdate.getSetting("test", "index.private")). }
false;public;0;9;;public void testUpdatePrivatelIndexSettingViaDedicatedAPI() {     createIndex("test").     client().execute(InternalOrPrivateSettingsPlugin.UpdateInternalOrPrivateAction.INSTANCE, new InternalOrPrivateSettingsPlugin.UpdateInternalOrPrivateAction.Request("test", "index.private", "private-update")).actionGet().     final GetSettingsResponse responseAfterUpdate = client().admin().indices().prepareGetSettings("test").get().     assertThat(responseAfterUpdate.getSetting("test", "index.private"), equalTo("private-update")). }
