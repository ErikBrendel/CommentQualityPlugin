commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;6;;@Override protected Settings nodeSettings(int nodeOrdinal) {     return Settings.builder().put(super.nodeSettings(nodeOrdinal)).put(ScriptService.SCRIPT_MAX_SIZE_IN_BYTES.getKey(), SCRIPT_MAX_SIZE_IN_BYTES).build(). }
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     return Arrays.asList(CustomScriptPlugin.class). }
false;public;0;21;;public void testBasics() {     assertAcked(client().admin().cluster().preparePutStoredScript().setId("foobar").setContent(new BytesArray("{\"script\": {\"lang\": \"" + LANG + "\", \"source\": \"1\"} }"), XContentType.JSON)).     String script = client().admin().cluster().prepareGetStoredScript("foobar").get().getSource().getSource().     assertNotNull(script).     assertEquals("1", script).     assertAcked(client().admin().cluster().prepareDeleteStoredScript().setId("foobar")).     StoredScriptSource source = client().admin().cluster().prepareGetStoredScript("foobar").get().getSource().     assertNull(source).     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> client().admin().cluster().preparePutStoredScript().setId("id#").setContent(new BytesArray("{}"), XContentType.JSON).get()).     assertEquals("Validation Failed: 1: id cannot contain '#' for stored script.", e.getMessage()). }
false;public;0;9;;public void testMaxScriptSize() {     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> client().admin().cluster().preparePutStoredScript().setId("foobar").setContent(new BytesArray("{\"script\": { \"lang\": \"" + LANG + "\"," + " \"source\":\"0123456789abcdef\"} }"), XContentType.JSON).get()).     assertEquals("exceeded max allowed stored script size in bytes [64] with size [65] for script [foobar]", e.getMessage()). }
false;protected;0;4;;@Override protected Map<String, Function<Map<String, Object>, Object>> pluginScripts() {     return Collections.singletonMap("1", script -> "1"). }
