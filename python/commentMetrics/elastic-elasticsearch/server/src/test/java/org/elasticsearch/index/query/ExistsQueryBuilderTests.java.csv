commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;16;;@Override protected ExistsQueryBuilder doCreateTestQueryBuilder() {     String fieldPattern.     if (randomBoolean()) {         fieldPattern = randomFrom(MAPPED_FIELD_NAMES).     } else {         fieldPattern = randomAlphaOfLengthBetween(1, 10).     }     // also sometimes test wildcard patterns     if (randomBoolean()) {         if (randomBoolean()) {             fieldPattern = fieldPattern + "*".         }     }     return new ExistsQueryBuilder(fieldPattern). }
false;protected;3;69;;@Override protected void doAssertLuceneQuery(ExistsQueryBuilder queryBuilder, Query query, SearchContext context) throws IOException {     String fieldPattern = queryBuilder.fieldName().     Collection<String> fields = context.getQueryShardContext().simpleMatchToIndexNames(fieldPattern).     Collection<String> mappedFields = fields.stream().filter((field) -> context.getQueryShardContext().getObjectMapper(field) != null || context.getQueryShardContext().getMapperService().fullName(field) != null).collect(Collectors.toList()).     if (context.mapperService().getIndexSettings().getIndexVersionCreated().before(Version.V_6_1_0)) {         if (fields.size() == 1) {             assertThat(query, instanceOf(ConstantScoreQuery.class)).             ConstantScoreQuery constantScoreQuery = (ConstantScoreQuery) query.             String field = expectedFieldName(fields.iterator().next()).             assertThat(constantScoreQuery.getQuery(), instanceOf(TermQuery.class)).             TermQuery termQuery = (TermQuery) constantScoreQuery.getQuery().             assertEquals(field, termQuery.getTerm().text()).         } else {             assertThat(query, instanceOf(ConstantScoreQuery.class)).             ConstantScoreQuery constantScoreQuery = (ConstantScoreQuery) query.             assertThat(constantScoreQuery.getQuery(), instanceOf(BooleanQuery.class)).             BooleanQuery booleanQuery = (BooleanQuery) constantScoreQuery.getQuery().             assertThat(booleanQuery.clauses().size(), equalTo(mappedFields.size())).             for (int i = 0. i < mappedFields.size(). i++) {                 BooleanClause booleanClause = booleanQuery.clauses().get(i).                 assertThat(booleanClause.getOccur(), equalTo(BooleanClause.Occur.SHOULD)).             }         }     } else if (fields.size() == 1 && mappedFields.size() == 0) {         assertThat(query, instanceOf(MatchNoDocsQuery.class)).         MatchNoDocsQuery matchNoDocsQuery = (MatchNoDocsQuery) query.         assertThat(matchNoDocsQuery.toString(null), containsString("No field \"" + fields.iterator().next() + "\" exists in mappings.")).     } else if (fields.size() == 1) {         assertThat(query, instanceOf(ConstantScoreQuery.class)).         ConstantScoreQuery constantScoreQuery = (ConstantScoreQuery) query.         String field = expectedFieldName(fields.iterator().next()).         if (context.getQueryShardContext().getObjectMapper(field) != null) {             assertThat(constantScoreQuery.getQuery(), instanceOf(BooleanQuery.class)).             BooleanQuery booleanQuery = (BooleanQuery) constantScoreQuery.getQuery().             List<String> childFields = new ArrayList<>().             context.getQueryShardContext().getObjectMapper(field).forEach(mapper -> childFields.add(mapper.name())).             assertThat(booleanQuery.clauses().size(), equalTo(childFields.size())).             for (int i = 0. i < childFields.size(). i++) {                 BooleanClause booleanClause = booleanQuery.clauses().get(i).                 assertThat(booleanClause.getOccur(), equalTo(BooleanClause.Occur.SHOULD)).             }         } else if (context.getQueryShardContext().getMapperService().fullName(field).hasDocValues()) {             assertThat(constantScoreQuery.getQuery(), instanceOf(DocValuesFieldExistsQuery.class)).             DocValuesFieldExistsQuery dvExistsQuery = (DocValuesFieldExistsQuery) constantScoreQuery.getQuery().             assertEquals(field, dvExistsQuery.getField()).         } else if (context.getQueryShardContext().getMapperService().fullName(field).omitNorms() == false) {             assertThat(constantScoreQuery.getQuery(), instanceOf(NormsFieldExistsQuery.class)).             NormsFieldExistsQuery normsExistsQuery = (NormsFieldExistsQuery) constantScoreQuery.getQuery().             assertEquals(field, normsExistsQuery.getField()).         } else {             assertThat(constantScoreQuery.getQuery(), instanceOf(TermQuery.class)).             TermQuery termQuery = (TermQuery) constantScoreQuery.getQuery().             assertEquals(field, termQuery.getTerm().text()).         }     } else {         assertThat(query, instanceOf(ConstantScoreQuery.class)).         ConstantScoreQuery constantScoreQuery = (ConstantScoreQuery) query.         assertThat(constantScoreQuery.getQuery(), instanceOf(BooleanQuery.class)).         BooleanQuery booleanQuery = (BooleanQuery) constantScoreQuery.getQuery().         assertThat(booleanQuery.clauses().size(), equalTo(mappedFields.size())).         for (int i = 0. i < mappedFields.size(). i++) {             BooleanClause booleanClause = booleanQuery.clauses().get(i).             assertThat(booleanClause.getOccur(), equalTo(BooleanClause.Occur.SHOULD)).         }     } }
false;public;0;4;;public void testIllegalArguments() {     expectThrows(IllegalArgumentException.class, () -> new ExistsQueryBuilder((String) null)).     expectThrows(IllegalArgumentException.class, () -> new ExistsQueryBuilder("")). }
false;public;0;15;;public void testFromJson() throws IOException {     String json = "{\n" + "  \"exists\" : {\n" + "    \"field\" : \"user\",\n" + "    \"boost\" : 42.0\n" + "  }\n" + "}".     ExistsQueryBuilder parsed = (ExistsQueryBuilder) parseQuery(json).     checkGeneratedJson(json, parsed).     assertEquals(json, 42.0, parsed.boost(), 0.0001).     assertEquals(json, "user", parsed.fieldName()). }
