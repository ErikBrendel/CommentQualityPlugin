commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;// # Assumes the following setup // curl -X PUT "localhost:9200/index" -H "Content-Type: application/json" -d' // { // "aliases": { // "foo": {}, // "foobar": {} // } // }' public void testBareRequest() throws Exception {     final XContentBuilder xContentBuilder = XContentFactory.contentBuilder(XContentType.JSON).     final ImmutableOpenMap.Builder<String, List<AliasMetaData>> openMapBuilder = ImmutableOpenMap.builder().     final AliasMetaData foobarAliasMetaData = AliasMetaData.builder("foobar").build().     final AliasMetaData fooAliasMetaData = AliasMetaData.builder("foo").build().     openMapBuilder.put("index", Arrays.asList(fooAliasMetaData, foobarAliasMetaData)).     final RestResponse restResponse = RestGetAliasesAction.buildRestResponse(false, new String[0], openMapBuilder.build(), xContentBuilder).     assertThat(restResponse.status(), equalTo(OK)).     assertThat(restResponse.contentType(), equalTo("application/json. charset=UTF-8")).     assertThat(restResponse.content().utf8ToString(), equalTo("{\"index\":{\"aliases\":{\"foo\":{},\"foobar\":{}}}}")). }
false;public;0;9;;public void testSimpleAliasWildcardMatchingNothing() throws Exception {     final XContentBuilder xContentBuilder = XContentFactory.contentBuilder(XContentType.JSON).     final ImmutableOpenMap.Builder<String, List<AliasMetaData>> openMapBuilder = ImmutableOpenMap.builder().     final RestResponse restResponse = RestGetAliasesAction.buildRestResponse(true, new String[] { "baz*" }, openMapBuilder.build(), xContentBuilder).     assertThat(restResponse.status(), equalTo(OK)).     assertThat(restResponse.contentType(), equalTo("application/json. charset=UTF-8")).     assertThat(restResponse.content().utf8ToString(), equalTo("{}")). }
false;public;0;11;;public void testMultipleAliasWildcardsSomeMatching() throws Exception {     final XContentBuilder xContentBuilder = XContentFactory.contentBuilder(XContentType.JSON).     final ImmutableOpenMap.Builder<String, List<AliasMetaData>> openMapBuilder = ImmutableOpenMap.builder().     final AliasMetaData aliasMetaData = AliasMetaData.builder("foobar").build().     openMapBuilder.put("index", Arrays.asList(aliasMetaData)).     final RestResponse restResponse = RestGetAliasesAction.buildRestResponse(true, new String[] { "baz*", "foobar*" }, openMapBuilder.build(), xContentBuilder).     assertThat(restResponse.status(), equalTo(OK)).     assertThat(restResponse.contentType(), equalTo("application/json. charset=UTF-8")).     assertThat(restResponse.content().utf8ToString(), equalTo("{\"index\":{\"aliases\":{\"foobar\":{}}}}")). }
false;public;0;9;;public void testAliasWildcardsIncludeAndExcludeAll() throws Exception {     final XContentBuilder xContentBuilder = XContentFactory.contentBuilder(XContentType.JSON).     final ImmutableOpenMap.Builder<String, List<AliasMetaData>> openMapBuilder = ImmutableOpenMap.builder().     final RestResponse restResponse = RestGetAliasesAction.buildRestResponse(true, new String[] { "foob*", "-foo*" }, openMapBuilder.build(), xContentBuilder).     assertThat(restResponse.status(), equalTo(OK)).     assertThat(restResponse.contentType(), equalTo("application/json. charset=UTF-8")).     assertThat(restResponse.content().utf8ToString(), equalTo("{}")). }
false;public;0;11;;public void testAliasWildcardsIncludeAndExcludeSome() throws Exception {     final XContentBuilder xContentBuilder = XContentFactory.contentBuilder(XContentType.JSON).     final ImmutableOpenMap.Builder<String, List<AliasMetaData>> openMapBuilder = ImmutableOpenMap.builder().     final AliasMetaData aliasMetaData = AliasMetaData.builder("foo").build().     openMapBuilder.put("index", Arrays.asList(aliasMetaData)).     final RestResponse restResponse = RestGetAliasesAction.buildRestResponse(true, new String[] { "foo*", "-foob*" }, openMapBuilder.build(), xContentBuilder).     assertThat(restResponse.status(), equalTo(OK)).     assertThat(restResponse.contentType(), equalTo("application/json. charset=UTF-8")).     assertThat(restResponse.content().utf8ToString(), equalTo("{\"index\":{\"aliases\":{\"foo\":{}}}}")). }
false;public;0;19;;public void testAliasWildcardsIncludeAndExcludeSomeAndExplicitMissing() throws Exception {     final XContentBuilder xContentBuilder = XContentFactory.contentBuilder(XContentType.JSON).     final ImmutableOpenMap.Builder<String, List<AliasMetaData>> openMapBuilder = ImmutableOpenMap.builder().     final AliasMetaData aliasMetaData = AliasMetaData.builder("foo").build().     openMapBuilder.put("index", Arrays.asList(aliasMetaData)).     final String[] aliasPattern.     if (randomBoolean()) {         aliasPattern = new String[] { "missing", "foo*", "-foob*" }.     } else {         aliasPattern = new String[] { "foo*", "-foob*", "missing" }.     }     final RestResponse restResponse = RestGetAliasesAction.buildRestResponse(true, aliasPattern, openMapBuilder.build(), xContentBuilder).     assertThat(restResponse.status(), equalTo(NOT_FOUND)).     assertThat(restResponse.contentType(), equalTo("application/json. charset=UTF-8")).     assertThat(restResponse.content().utf8ToString(), equalTo("{\"error\":\"alias [missing] missing\",\"status\":404,\"index\":{\"aliases\":{\"foo\":{}}}}")). }
false;public;0;9;;public void testAliasWildcardsExcludeExplicitMissing() throws Exception {     final XContentBuilder xContentBuilder = XContentFactory.contentBuilder(XContentType.JSON).     final ImmutableOpenMap.Builder<String, List<AliasMetaData>> openMapBuilder = ImmutableOpenMap.builder().     final RestResponse restResponse = RestGetAliasesAction.buildRestResponse(true, new String[] { "foo", "foofoo", "-foo*" }, openMapBuilder.build(), xContentBuilder).     assertThat(restResponse.status(), equalTo(OK)).     assertThat(restResponse.contentType(), equalTo("application/json. charset=UTF-8")).     assertThat(restResponse.content().utf8ToString(), equalTo("{}")). }
