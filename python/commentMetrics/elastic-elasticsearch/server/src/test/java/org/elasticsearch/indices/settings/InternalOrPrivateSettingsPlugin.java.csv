commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public List<Setting<?>> getSettings() {     return Arrays.asList(INDEX_INTERNAL_SETTING, INDEX_PRIVATE_SETTING). }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;1;7;;@Override public void readFrom(final StreamInput in) throws IOException {     super.readFrom(in).     index = in.readString().     key = in.readString().     value = in.readString(). }
false;public;1;7;;@Override public void writeTo(final StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(index).     out.writeString(key).     out.writeString(value). }
false;public;0;4;;@Override public UpdateInternalOrPrivateAction.Response newResponse() {     return new UpdateInternalOrPrivateAction.Response(). }
false;protected;0;4;;@Override protected String executor() {     return ThreadPool.Names.SAME. }
false;protected;0;4;;@Override protected UpdateInternalOrPrivateAction.Response newResponse() {     return new UpdateInternalOrPrivateAction.Response(). }
false;public;1;13;;@Override public ClusterState execute(final ClusterState currentState) throws Exception {     final MetaData.Builder builder = MetaData.builder(currentState.metaData()).     final IndexMetaData.Builder imdBuilder = IndexMetaData.builder(currentState.metaData().index(request.index)).     final Settings.Builder settingsBuilder = Settings.builder().put(currentState.metaData().index(request.index).getSettings()).put(request.key, request.value).     imdBuilder.settings(settingsBuilder).     imdBuilder.settingsVersion(1 + imdBuilder.settingsVersion()).     builder.put(imdBuilder.build(), true).     return ClusterState.builder(currentState).metaData(builder).build(). }
false;public;3;4;;@Override public void clusterStateProcessed(final String source, final ClusterState oldState, final ClusterState newState) {     listener.onResponse(new UpdateInternalOrPrivateAction.Response()). }
false;public;2;4;;@Override public void onFailure(final String source, final Exception e) {     listener.onFailure(e). }
false;protected;3;32;;@Override protected void masterOperation(final UpdateInternalOrPrivateAction.Request request, final ClusterState state, final ActionListener<UpdateInternalOrPrivateAction.Response> listener) throws Exception {     clusterService.submitStateUpdateTask("update-index-internal-or-private", new ClusterStateUpdateTask() {          @Override         public ClusterState execute(final ClusterState currentState) throws Exception {             final MetaData.Builder builder = MetaData.builder(currentState.metaData()).             final IndexMetaData.Builder imdBuilder = IndexMetaData.builder(currentState.metaData().index(request.index)).             final Settings.Builder settingsBuilder = Settings.builder().put(currentState.metaData().index(request.index).getSettings()).put(request.key, request.value).             imdBuilder.settings(settingsBuilder).             imdBuilder.settingsVersion(1 + imdBuilder.settingsVersion()).             builder.put(imdBuilder.build(), true).             return ClusterState.builder(currentState).metaData(builder).build().         }          @Override         public void clusterStateProcessed(final String source, final ClusterState oldState, final ClusterState newState) {             listener.onResponse(new UpdateInternalOrPrivateAction.Response()).         }          @Override         public void onFailure(final String source, final Exception e) {             listener.onFailure(e).         }     }). }
false;protected;2;4;;@Override protected ClusterBlockException checkBlock(final UpdateInternalOrPrivateAction.Request request, final ClusterState state) {     return null. }
false;public;0;5;;@Override public List<ActionHandler<? extends ActionRequest, ? extends ActionResponse>> getActions() {     return Collections.singletonList(new ActionHandler<>(UpdateInternalOrPrivateAction.INSTANCE, TransportUpdateInternalOrPrivateAction.class)). }
