commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;public void testParseUnknownParam() throws Exception {     Map<String, Object> templateDef = new HashMap<>().     templateDef.put("match_mapping_type", "string").     templateDef.put("mapping", Collections.singletonMap("store", true)).     templateDef.put("random_param", "random_value").     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> DynamicTemplate.parse("my_template", templateDef, Version.V_6_0_0_alpha1)).     assertEquals("Illegal dynamic template parameter: [random_param]", e.getMessage()). }
false;public;0;10;;public void testParseUnknownMatchType() {     Map<String, Object> templateDef2 = new HashMap<>().     templateDef2.put("match_mapping_type", "text").     templateDef2.put("mapping", Collections.singletonMap("store", true)).     // if a wrong match type is specified, we ignore the template     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> DynamicTemplate.parse("my_template", templateDef2, Version.V_6_0_0_alpha1)).     assertEquals("No field type matched on [text], possible values are [object, string, long, double, boolean, date, binary]", e.getMessage()). }
false;public;0;12;;public void testParseInvalidRegex() {     for (String param : new String[] { "path_match", "match", "path_unmatch", "unmatch" }) {         Map<String, Object> templateDef = new HashMap<>().         templateDef.put("match", "foo").         templateDef.put(param, "*a").         templateDef.put("match_pattern", "regex").         templateDef.put("mapping", Collections.singletonMap("store", true)).         IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> DynamicTemplate.parse("my_template", templateDef, Version.V_6_3_0)).         assertEquals("Pattern [*a] of type [regex] is invalid. Cannot create dynamic template [my_template].", e.getMessage()).     } }
false;public;0;7;;public void testMatchAllTemplate() {     Map<String, Object> templateDef = new HashMap<>().     templateDef.put("match_mapping_type", "*").     templateDef.put("mapping", Collections.singletonMap("store", true)).     DynamicTemplate template = DynamicTemplate.parse("my_template", templateDef, Version.V_6_0_0_alpha1).     assertTrue(template.match("a.b", "b", randomFrom(XContentFieldType.values()))). }
false;public;0;8;;public void testMatchTypeTemplate() {     Map<String, Object> templateDef = new HashMap<>().     templateDef.put("match_mapping_type", "string").     templateDef.put("mapping", Collections.singletonMap("store", true)).     DynamicTemplate template = DynamicTemplate.parse("my_template", templateDef, Version.V_6_0_0_alpha1).     assertTrue(template.match("a.b", "b", XContentFieldType.STRING)).     assertFalse(template.match("a.b", "b", XContentFieldType.BOOLEAN)). }
false;public;0;41;;public void testSerialization() throws Exception {     // type-based template     Map<String, Object> templateDef = new HashMap<>().     templateDef.put("match_mapping_type", "string").     templateDef.put("mapping", Collections.singletonMap("store", true)).     DynamicTemplate template = DynamicTemplate.parse("my_template", templateDef, Version.V_6_0_0_alpha1).     XContentBuilder builder = JsonXContent.contentBuilder().     template.toXContent(builder, ToXContent.EMPTY_PARAMS).     assertEquals("{\"match_mapping_type\":\"string\",\"mapping\":{\"store\":true}}", Strings.toString(builder)).     // name-based template     templateDef = new HashMap<>().     templateDef.put("match", "*name").     templateDef.put("unmatch", "first_name").     templateDef.put("mapping", Collections.singletonMap("store", true)).     template = DynamicTemplate.parse("my_template", templateDef, Version.V_6_0_0_alpha1).     builder = JsonXContent.contentBuilder().     template.toXContent(builder, ToXContent.EMPTY_PARAMS).     assertEquals("{\"match\":\"*name\",\"unmatch\":\"first_name\",\"mapping\":{\"store\":true}}", Strings.toString(builder)).     // path-based template     templateDef = new HashMap<>().     templateDef.put("path_match", "*name").     templateDef.put("path_unmatch", "first_name").     templateDef.put("mapping", Collections.singletonMap("store", true)).     template = DynamicTemplate.parse("my_template", templateDef, Version.V_6_0_0_alpha1).     builder = JsonXContent.contentBuilder().     template.toXContent(builder, ToXContent.EMPTY_PARAMS).     assertEquals("{\"path_match\":\"*name\",\"path_unmatch\":\"first_name\",\"mapping\":{\"store\":true}}", Strings.toString(builder)).     // regex matching     templateDef = new HashMap<>().     templateDef.put("match", "^a$").     templateDef.put("match_pattern", "regex").     templateDef.put("mapping", Collections.singletonMap("store", true)).     template = DynamicTemplate.parse("my_template", templateDef, Version.V_6_0_0_alpha1).     builder = JsonXContent.contentBuilder().     template.toXContent(builder, ToXContent.EMPTY_PARAMS).     assertEquals("{\"match\":\"^a$\",\"match_pattern\":\"regex\",\"mapping\":{\"store\":true}}", Strings.toString(builder)). }
