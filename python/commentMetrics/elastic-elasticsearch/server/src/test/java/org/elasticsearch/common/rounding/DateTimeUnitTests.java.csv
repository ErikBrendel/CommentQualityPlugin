commented;modifiers;parameterAmount;loc;comment;code
true;public;0;25;/**  * test that we don't accidentally change enum ids  */ ;/**  * test that we don't accidentally change enum ids  */ public void testEnumIds() {     assertEquals(1, WEEK_OF_WEEKYEAR.id()).     assertEquals(WEEK_OF_WEEKYEAR, DateTimeUnit.resolve((byte) 1)).     assertEquals(2, YEAR_OF_CENTURY.id()).     assertEquals(YEAR_OF_CENTURY, DateTimeUnit.resolve((byte) 2)).     assertEquals(3, QUARTER.id()).     assertEquals(QUARTER, DateTimeUnit.resolve((byte) 3)).     assertEquals(4, MONTH_OF_YEAR.id()).     assertEquals(MONTH_OF_YEAR, DateTimeUnit.resolve((byte) 4)).     assertEquals(5, DAY_OF_MONTH.id()).     assertEquals(DAY_OF_MONTH, DateTimeUnit.resolve((byte) 5)).     assertEquals(6, HOUR_OF_DAY.id()).     assertEquals(HOUR_OF_DAY, DateTimeUnit.resolve((byte) 6)).     assertEquals(7, MINUTES_OF_HOUR.id()).     assertEquals(MINUTES_OF_HOUR, DateTimeUnit.resolve((byte) 7)).     assertEquals(8, SECOND_OF_MINUTE.id()).     assertEquals(SECOND_OF_MINUTE, DateTimeUnit.resolve((byte) 8)). }
false;public;0;12;;public void testConversion() {     long millis = randomLongBetween(0, Instant.now().toEpochMilli()).     DateTimeZone zone = randomDateTimeZone().     ZoneId zoneId = zone.toTimeZone().toZoneId().     int offsetSeconds = zoneId.getRules().getOffset(Instant.ofEpochMilli(millis)).getTotalSeconds().     long parsedMillisJavaTime = ZonedDateTime.ofInstant(Instant.ofEpochMilli(millis), zoneId).minusSeconds(offsetSeconds).toInstant().toEpochMilli().     long parsedMillisJodaTime = zone.convertLocalToUTC(millis, true).     assertThat(parsedMillisJavaTime, is(parsedMillisJodaTime)). }
