# id;timestamp;commentText;codeText;commentWords;codeWords
IndexSearcherWrapper -> protected DirectoryReader wrap(DirectoryReader reader) throws IOException;1524684173;Wraps the given {@link DirectoryReader}. The wrapped reader can filter out document just like delete documents etc. but_must not change any term or document content._<p>_NOTE: The wrapper has a per-request lifecycle, must delegate {@link IndexReader#getReaderCacheHelper()},_{@link LeafReader#getCoreCacheHelper()} and must be an instance of {@link FilterDirectoryReader} that_eventually exposes the original reader via  {@link FilterDirectoryReader#getDelegate()}._The returned reader is closed once it goes out of scope._</p>_@param reader The provided directory reader to be wrapped to add custom functionality_@return a new directory reader wrapping the provided directory reader or if no wrapping was performed_the provided directory reader;protected DirectoryReader wrap(DirectoryReader reader) throws IOException {_        return reader__    };wraps,the,given,link,directory,reader,the,wrapped,reader,can,filter,out,document,just,like,delete,documents,etc,but,must,not,change,any,term,or,document,content,p,note,the,wrapper,has,a,per,request,lifecycle,must,delegate,link,index,reader,get,reader,cache,helper,link,leaf,reader,get,core,cache,helper,and,must,be,an,instance,of,link,filter,directory,reader,that,eventually,exposes,the,original,reader,via,link,filter,directory,reader,get,delegate,the,returned,reader,is,closed,once,it,goes,out,of,scope,p,param,reader,the,provided,directory,reader,to,be,wrapped,to,add,custom,functionality,return,a,new,directory,reader,wrapping,the,provided,directory,reader,or,if,no,wrapping,was,performed,the,provided,directory,reader;protected,directory,reader,wrap,directory,reader,reader,throws,ioexception,return,reader
IndexSearcherWrapper -> protected DirectoryReader wrap(DirectoryReader reader) throws IOException;1536314350;Wraps the given {@link DirectoryReader}. The wrapped reader can filter out document just like delete documents etc. but_must not change any term or document content._<p>_NOTE: The wrapper has a per-request lifecycle, must delegate {@link IndexReader#getReaderCacheHelper()},_{@link LeafReader#getCoreCacheHelper()} and must be an instance of {@link FilterDirectoryReader} that_eventually exposes the original reader via  {@link FilterDirectoryReader#getDelegate()}._The returned reader is closed once it goes out of scope._</p>_@param reader The provided directory reader to be wrapped to add custom functionality_@return a new directory reader wrapping the provided directory reader or if no wrapping was performed_the provided directory reader;protected DirectoryReader wrap(DirectoryReader reader) throws IOException {_        return reader__    };wraps,the,given,link,directory,reader,the,wrapped,reader,can,filter,out,document,just,like,delete,documents,etc,but,must,not,change,any,term,or,document,content,p,note,the,wrapper,has,a,per,request,lifecycle,must,delegate,link,index,reader,get,reader,cache,helper,link,leaf,reader,get,core,cache,helper,and,must,be,an,instance,of,link,filter,directory,reader,that,eventually,exposes,the,original,reader,via,link,filter,directory,reader,get,delegate,the,returned,reader,is,closed,once,it,goes,out,of,scope,p,param,reader,the,provided,directory,reader,to,be,wrapped,to,add,custom,functionality,return,a,new,directory,reader,wrapping,the,provided,directory,reader,or,if,no,wrapping,was,performed,the,provided,directory,reader;protected,directory,reader,wrap,directory,reader,reader,throws,ioexception,return,reader
IndexSearcherWrapper -> protected DirectoryReader wrap(DirectoryReader reader) throws IOException;1538067637;Wraps the given {@link DirectoryReader}. The wrapped reader can filter out document just like delete documents etc. but_must not change any term or document content._<p>_NOTE: The wrapper has a per-request lifecycle, must delegate {@link IndexReader#getReaderCacheHelper()},_{@link LeafReader#getCoreCacheHelper()} and must be an instance of {@link FilterDirectoryReader} that_eventually exposes the original reader via  {@link FilterDirectoryReader#getDelegate()}._The returned reader is closed once it goes out of scope._</p>_@param reader The provided directory reader to be wrapped to add custom functionality_@return a new directory reader wrapping the provided directory reader or if no wrapping was performed_the provided directory reader;protected DirectoryReader wrap(DirectoryReader reader) throws IOException {_        return reader__    };wraps,the,given,link,directory,reader,the,wrapped,reader,can,filter,out,document,just,like,delete,documents,etc,but,must,not,change,any,term,or,document,content,p,note,the,wrapper,has,a,per,request,lifecycle,must,delegate,link,index,reader,get,reader,cache,helper,link,leaf,reader,get,core,cache,helper,and,must,be,an,instance,of,link,filter,directory,reader,that,eventually,exposes,the,original,reader,via,link,filter,directory,reader,get,delegate,the,returned,reader,is,closed,once,it,goes,out,of,scope,p,param,reader,the,provided,directory,reader,to,be,wrapped,to,add,custom,functionality,return,a,new,directory,reader,wrapping,the,provided,directory,reader,or,if,no,wrapping,was,performed,the,provided,directory,reader;protected,directory,reader,wrap,directory,reader,reader,throws,ioexception,return,reader
IndexSearcherWrapper -> protected DirectoryReader wrap(DirectoryReader reader) throws IOException;1539723533;Wraps the given {@link DirectoryReader}. The wrapped reader can filter out document just like delete documents etc. but_must not change any term or document content._<p>_NOTE: The wrapper has a per-request lifecycle, must delegate {@link IndexReader#getReaderCacheHelper()},_{@link LeafReader#getCoreCacheHelper()} and must be an instance of {@link FilterDirectoryReader} that_eventually exposes the original reader via  {@link FilterDirectoryReader#getDelegate()}._The returned reader is closed once it goes out of scope._</p>_@param reader The provided directory reader to be wrapped to add custom functionality_@return a new directory reader wrapping the provided directory reader or if no wrapping was performed_the provided directory reader;protected DirectoryReader wrap(DirectoryReader reader) throws IOException {_        return reader__    };wraps,the,given,link,directory,reader,the,wrapped,reader,can,filter,out,document,just,like,delete,documents,etc,but,must,not,change,any,term,or,document,content,p,note,the,wrapper,has,a,per,request,lifecycle,must,delegate,link,index,reader,get,reader,cache,helper,link,leaf,reader,get,core,cache,helper,and,must,be,an,instance,of,link,filter,directory,reader,that,eventually,exposes,the,original,reader,via,link,filter,directory,reader,get,delegate,the,returned,reader,is,closed,once,it,goes,out,of,scope,p,param,reader,the,provided,directory,reader,to,be,wrapped,to,add,custom,functionality,return,a,new,directory,reader,wrapping,the,provided,directory,reader,or,if,no,wrapping,was,performed,the,provided,directory,reader;protected,directory,reader,wrap,directory,reader,reader,throws,ioexception,return,reader
IndexSearcherWrapper -> protected DirectoryReader wrap(DirectoryReader reader) throws IOException;1542697754;Wraps the given {@link DirectoryReader}. The wrapped reader can filter out document just like delete documents etc. but_must not change any term or document content._<p>_NOTE: The wrapper has a per-request lifecycle, must delegate {@link IndexReader#getReaderCacheHelper()},_{@link LeafReader#getCoreCacheHelper()} and must be an instance of {@link FilterDirectoryReader} that_eventually exposes the original reader via  {@link FilterDirectoryReader#getDelegate()}._The returned reader is closed once it goes out of scope._</p>_@param reader The provided directory reader to be wrapped to add custom functionality_@return a new directory reader wrapping the provided directory reader or if no wrapping was performed_the provided directory reader;protected DirectoryReader wrap(DirectoryReader reader) throws IOException {_        return reader__    };wraps,the,given,link,directory,reader,the,wrapped,reader,can,filter,out,document,just,like,delete,documents,etc,but,must,not,change,any,term,or,document,content,p,note,the,wrapper,has,a,per,request,lifecycle,must,delegate,link,index,reader,get,reader,cache,helper,link,leaf,reader,get,core,cache,helper,and,must,be,an,instance,of,link,filter,directory,reader,that,eventually,exposes,the,original,reader,via,link,filter,directory,reader,get,delegate,the,returned,reader,is,closed,once,it,goes,out,of,scope,p,param,reader,the,provided,directory,reader,to,be,wrapped,to,add,custom,functionality,return,a,new,directory,reader,wrapping,the,provided,directory,reader,or,if,no,wrapping,was,performed,the,provided,directory,reader;protected,directory,reader,wrap,directory,reader,reader,throws,ioexception,return,reader
IndexSearcherWrapper -> protected IndexSearcher wrap(IndexSearcher searcher) throws IOException;1524684173;@param searcher      The provided index searcher to be wrapped to add custom functionality_@return a new index searcher wrapping the provided index searcher or if no wrapping was performed_the provided index searcher;protected IndexSearcher wrap(IndexSearcher searcher) throws IOException {_        return searcher__    };param,searcher,the,provided,index,searcher,to,be,wrapped,to,add,custom,functionality,return,a,new,index,searcher,wrapping,the,provided,index,searcher,or,if,no,wrapping,was,performed,the,provided,index,searcher;protected,index,searcher,wrap,index,searcher,searcher,throws,ioexception,return,searcher
IndexSearcherWrapper -> protected IndexSearcher wrap(IndexSearcher searcher) throws IOException;1536314350;@param searcher      The provided index searcher to be wrapped to add custom functionality_@return a new index searcher wrapping the provided index searcher or if no wrapping was performed_the provided index searcher;protected IndexSearcher wrap(IndexSearcher searcher) throws IOException {_        return searcher__    };param,searcher,the,provided,index,searcher,to,be,wrapped,to,add,custom,functionality,return,a,new,index,searcher,wrapping,the,provided,index,searcher,or,if,no,wrapping,was,performed,the,provided,index,searcher;protected,index,searcher,wrap,index,searcher,searcher,throws,ioexception,return,searcher
IndexSearcherWrapper -> protected IndexSearcher wrap(IndexSearcher searcher) throws IOException;1538067637;@param searcher      The provided index searcher to be wrapped to add custom functionality_@return a new index searcher wrapping the provided index searcher or if no wrapping was performed_the provided index searcher;protected IndexSearcher wrap(IndexSearcher searcher) throws IOException {_        return searcher__    };param,searcher,the,provided,index,searcher,to,be,wrapped,to,add,custom,functionality,return,a,new,index,searcher,wrapping,the,provided,index,searcher,or,if,no,wrapping,was,performed,the,provided,index,searcher;protected,index,searcher,wrap,index,searcher,searcher,throws,ioexception,return,searcher
IndexSearcherWrapper -> protected IndexSearcher wrap(IndexSearcher searcher) throws IOException;1539723533;@param searcher      The provided index searcher to be wrapped to add custom functionality_@return a new index searcher wrapping the provided index searcher or if no wrapping was performed_the provided index searcher;protected IndexSearcher wrap(IndexSearcher searcher) throws IOException {_        return searcher__    };param,searcher,the,provided,index,searcher,to,be,wrapped,to,add,custom,functionality,return,a,new,index,searcher,wrapping,the,provided,index,searcher,or,if,no,wrapping,was,performed,the,provided,index,searcher;protected,index,searcher,wrap,index,searcher,searcher,throws,ioexception,return,searcher
IndexSearcherWrapper -> protected IndexSearcher wrap(IndexSearcher searcher) throws IOException;1542697754;@param searcher      The provided index searcher to be wrapped to add custom functionality_@return a new index searcher wrapping the provided index searcher or if no wrapping was performed_the provided index searcher;protected IndexSearcher wrap(IndexSearcher searcher) throws IOException {_        return searcher__    };param,searcher,the,provided,index,searcher,to,be,wrapped,to,add,custom,functionality,return,a,new,index,searcher,wrapping,the,provided,index,searcher,or,if,no,wrapping,was,performed,the,provided,index,searcher;protected,index,searcher,wrap,index,searcher,searcher,throws,ioexception,return,searcher
IndexSearcherWrapper -> public final Engine.Searcher wrap(Engine.Searcher engineSearcher) throws IOException;1524684173;If there are configured {@link IndexSearcherWrapper} instances, the {@link IndexSearcher} of the provided engine searcher_gets wrapped and a new {@link Engine.Searcher} instances is returned, otherwise the provided {@link Engine.Searcher} is returned.__This is invoked each time a {@link Engine.Searcher} is requested to do an operation. (for example search);public final Engine.Searcher wrap(Engine.Searcher engineSearcher) throws IOException {_        final ElasticsearchDirectoryReader elasticsearchDirectoryReader = ElasticsearchDirectoryReader.getElasticsearchDirectoryReader(engineSearcher.getDirectoryReader())__        if (elasticsearchDirectoryReader == null) {_            throw new IllegalStateException("Can't wrap non elasticsearch directory reader")__        }_        NonClosingReaderWrapper nonClosingReaderWrapper = new NonClosingReaderWrapper(engineSearcher.getDirectoryReader())__        DirectoryReader reader = wrap(nonClosingReaderWrapper)__        if (reader != nonClosingReaderWrapper) {_            if (reader.getReaderCacheHelper() != elasticsearchDirectoryReader.getReaderCacheHelper()) {_                throw new IllegalStateException("wrapped directory reader doesn't delegate IndexReader#getCoreCacheKey, wrappers must override this method and delegate" +_                        " to the original readers core cache key. Wrapped readers can't be used as cache keys since their are used only per request which would lead to subtle bugs")__            }_            if (ElasticsearchDirectoryReader.getElasticsearchDirectoryReader(reader) != elasticsearchDirectoryReader) {_                _                throw new IllegalStateException("wrapped directory reader hides actual ElasticsearchDirectoryReader but shouldn't")__            }_        }__        final IndexSearcher origIndexSearcher = engineSearcher.searcher()__        final IndexSearcher innerIndexSearcher = new IndexSearcher(reader)__        innerIndexSearcher.setQueryCache(origIndexSearcher.getQueryCache())__        innerIndexSearcher.setQueryCachingPolicy(origIndexSearcher.getQueryCachingPolicy())__        innerIndexSearcher.setSimilarity(origIndexSearcher.getSimilarity(true))__        _        _        _        final IndexSearcher indexSearcher = wrap(innerIndexSearcher)__        if (reader == nonClosingReaderWrapper && indexSearcher == innerIndexSearcher) {_            return engineSearcher__        } else {_            return new Engine.Searcher(engineSearcher.source(), indexSearcher) {_                @Override_                public void close() throws ElasticsearchException {_                    try {_                        reader().close()__                        _                        _                    } catch (IOException e) {_                        throw new ElasticsearchException("failed to close reader", e)__                    } finally {_                        engineSearcher.close()__                    }__                }_            }__        }_    };if,there,are,configured,link,index,searcher,wrapper,instances,the,link,index,searcher,of,the,provided,engine,searcher,gets,wrapped,and,a,new,link,engine,searcher,instances,is,returned,otherwise,the,provided,link,engine,searcher,is,returned,this,is,invoked,each,time,a,link,engine,searcher,is,requested,to,do,an,operation,for,example,search;public,final,engine,searcher,wrap,engine,searcher,engine,searcher,throws,ioexception,final,elasticsearch,directory,reader,elasticsearch,directory,reader,elasticsearch,directory,reader,get,elasticsearch,directory,reader,engine,searcher,get,directory,reader,if,elasticsearch,directory,reader,null,throw,new,illegal,state,exception,can,t,wrap,non,elasticsearch,directory,reader,non,closing,reader,wrapper,non,closing,reader,wrapper,new,non,closing,reader,wrapper,engine,searcher,get,directory,reader,directory,reader,reader,wrap,non,closing,reader,wrapper,if,reader,non,closing,reader,wrapper,if,reader,get,reader,cache,helper,elasticsearch,directory,reader,get,reader,cache,helper,throw,new,illegal,state,exception,wrapped,directory,reader,doesn,t,delegate,index,reader,get,core,cache,key,wrappers,must,override,this,method,and,delegate,to,the,original,readers,core,cache,key,wrapped,readers,can,t,be,used,as,cache,keys,since,their,are,used,only,per,request,which,would,lead,to,subtle,bugs,if,elasticsearch,directory,reader,get,elasticsearch,directory,reader,reader,elasticsearch,directory,reader,throw,new,illegal,state,exception,wrapped,directory,reader,hides,actual,elasticsearch,directory,reader,but,shouldn,t,final,index,searcher,orig,index,searcher,engine,searcher,searcher,final,index,searcher,inner,index,searcher,new,index,searcher,reader,inner,index,searcher,set,query,cache,orig,index,searcher,get,query,cache,inner,index,searcher,set,query,caching,policy,orig,index,searcher,get,query,caching,policy,inner,index,searcher,set,similarity,orig,index,searcher,get,similarity,true,final,index,searcher,index,searcher,wrap,inner,index,searcher,if,reader,non,closing,reader,wrapper,index,searcher,inner,index,searcher,return,engine,searcher,else,return,new,engine,searcher,engine,searcher,source,index,searcher,override,public,void,close,throws,elasticsearch,exception,try,reader,close,catch,ioexception,e,throw,new,elasticsearch,exception,failed,to,close,reader,e,finally,engine,searcher,close
IndexSearcherWrapper -> public final Engine.Searcher wrap(Engine.Searcher engineSearcher) throws IOException;1536314350;If there are configured {@link IndexSearcherWrapper} instances, the {@link IndexSearcher} of the provided engine searcher_gets wrapped and a new {@link Engine.Searcher} instances is returned, otherwise the provided {@link Engine.Searcher} is returned.__This is invoked each time a {@link Engine.Searcher} is requested to do an operation. (for example search);public final Engine.Searcher wrap(Engine.Searcher engineSearcher) throws IOException {_        final ElasticsearchDirectoryReader elasticsearchDirectoryReader = ElasticsearchDirectoryReader.getElasticsearchDirectoryReader(engineSearcher.getDirectoryReader())__        if (elasticsearchDirectoryReader == null) {_            throw new IllegalStateException("Can't wrap non elasticsearch directory reader")__        }_        NonClosingReaderWrapper nonClosingReaderWrapper = new NonClosingReaderWrapper(engineSearcher.getDirectoryReader())__        DirectoryReader reader = wrap(nonClosingReaderWrapper)__        if (reader != nonClosingReaderWrapper) {_            if (reader.getReaderCacheHelper() != elasticsearchDirectoryReader.getReaderCacheHelper()) {_                throw new IllegalStateException("wrapped directory reader doesn't delegate IndexReader#getCoreCacheKey, wrappers must override this method and delegate" +_                        " to the original readers core cache key. Wrapped readers can't be used as cache keys since their are used only per request which would lead to subtle bugs")__            }_            if (ElasticsearchDirectoryReader.getElasticsearchDirectoryReader(reader) != elasticsearchDirectoryReader) {_                _                throw new IllegalStateException("wrapped directory reader hides actual ElasticsearchDirectoryReader but shouldn't")__            }_        }__        final IndexSearcher origIndexSearcher = engineSearcher.searcher()__        final IndexSearcher innerIndexSearcher = new IndexSearcher(reader)__        innerIndexSearcher.setQueryCache(origIndexSearcher.getQueryCache())__        innerIndexSearcher.setQueryCachingPolicy(origIndexSearcher.getQueryCachingPolicy())__        innerIndexSearcher.setSimilarity(origIndexSearcher.getSimilarity())__        _        _        _        final IndexSearcher indexSearcher = wrap(innerIndexSearcher)__        if (reader == nonClosingReaderWrapper && indexSearcher == innerIndexSearcher) {_            return engineSearcher__        } else {_            return new Engine.Searcher(engineSearcher.source(), indexSearcher) {_                @Override_                public void close() throws ElasticsearchException {_                    try {_                        reader().close()__                        _                        _                    } catch (IOException e) {_                        throw new ElasticsearchException("failed to close reader", e)__                    } finally {_                        engineSearcher.close()__                    }__                }_            }__        }_    };if,there,are,configured,link,index,searcher,wrapper,instances,the,link,index,searcher,of,the,provided,engine,searcher,gets,wrapped,and,a,new,link,engine,searcher,instances,is,returned,otherwise,the,provided,link,engine,searcher,is,returned,this,is,invoked,each,time,a,link,engine,searcher,is,requested,to,do,an,operation,for,example,search;public,final,engine,searcher,wrap,engine,searcher,engine,searcher,throws,ioexception,final,elasticsearch,directory,reader,elasticsearch,directory,reader,elasticsearch,directory,reader,get,elasticsearch,directory,reader,engine,searcher,get,directory,reader,if,elasticsearch,directory,reader,null,throw,new,illegal,state,exception,can,t,wrap,non,elasticsearch,directory,reader,non,closing,reader,wrapper,non,closing,reader,wrapper,new,non,closing,reader,wrapper,engine,searcher,get,directory,reader,directory,reader,reader,wrap,non,closing,reader,wrapper,if,reader,non,closing,reader,wrapper,if,reader,get,reader,cache,helper,elasticsearch,directory,reader,get,reader,cache,helper,throw,new,illegal,state,exception,wrapped,directory,reader,doesn,t,delegate,index,reader,get,core,cache,key,wrappers,must,override,this,method,and,delegate,to,the,original,readers,core,cache,key,wrapped,readers,can,t,be,used,as,cache,keys,since,their,are,used,only,per,request,which,would,lead,to,subtle,bugs,if,elasticsearch,directory,reader,get,elasticsearch,directory,reader,reader,elasticsearch,directory,reader,throw,new,illegal,state,exception,wrapped,directory,reader,hides,actual,elasticsearch,directory,reader,but,shouldn,t,final,index,searcher,orig,index,searcher,engine,searcher,searcher,final,index,searcher,inner,index,searcher,new,index,searcher,reader,inner,index,searcher,set,query,cache,orig,index,searcher,get,query,cache,inner,index,searcher,set,query,caching,policy,orig,index,searcher,get,query,caching,policy,inner,index,searcher,set,similarity,orig,index,searcher,get,similarity,final,index,searcher,index,searcher,wrap,inner,index,searcher,if,reader,non,closing,reader,wrapper,index,searcher,inner,index,searcher,return,engine,searcher,else,return,new,engine,searcher,engine,searcher,source,index,searcher,override,public,void,close,throws,elasticsearch,exception,try,reader,close,catch,ioexception,e,throw,new,elasticsearch,exception,failed,to,close,reader,e,finally,engine,searcher,close
IndexSearcherWrapper -> public final Engine.Searcher wrap(Engine.Searcher engineSearcher) throws IOException;1538067637;If there are configured {@link IndexSearcherWrapper} instances, the {@link IndexSearcher} of the provided engine searcher_gets wrapped and a new {@link Engine.Searcher} instances is returned, otherwise the provided {@link Engine.Searcher} is returned.__This is invoked each time a {@link Engine.Searcher} is requested to do an operation. (for example search);public final Engine.Searcher wrap(Engine.Searcher engineSearcher) throws IOException {_        final ElasticsearchDirectoryReader elasticsearchDirectoryReader = ElasticsearchDirectoryReader.getElasticsearchDirectoryReader(engineSearcher.getDirectoryReader())__        if (elasticsearchDirectoryReader == null) {_            throw new IllegalStateException("Can't wrap non elasticsearch directory reader")__        }_        NonClosingReaderWrapper nonClosingReaderWrapper = new NonClosingReaderWrapper(engineSearcher.getDirectoryReader())__        DirectoryReader reader = wrap(nonClosingReaderWrapper)__        if (reader != nonClosingReaderWrapper) {_            if (reader.getReaderCacheHelper() != elasticsearchDirectoryReader.getReaderCacheHelper()) {_                throw new IllegalStateException("wrapped directory reader doesn't delegate IndexReader#getCoreCacheKey, wrappers must override this method and delegate" +_                        " to the original readers core cache key. Wrapped readers can't be used as cache keys since their are used only per request which would lead to subtle bugs")__            }_            if (ElasticsearchDirectoryReader.getElasticsearchDirectoryReader(reader) != elasticsearchDirectoryReader) {_                _                throw new IllegalStateException("wrapped directory reader hides actual ElasticsearchDirectoryReader but shouldn't")__            }_        }__        final IndexSearcher origIndexSearcher = engineSearcher.searcher()__        final IndexSearcher innerIndexSearcher = new IndexSearcher(reader)__        innerIndexSearcher.setQueryCache(origIndexSearcher.getQueryCache())__        innerIndexSearcher.setQueryCachingPolicy(origIndexSearcher.getQueryCachingPolicy())__        innerIndexSearcher.setSimilarity(origIndexSearcher.getSimilarity())__        _        _        _        final IndexSearcher indexSearcher = wrap(innerIndexSearcher)__        if (reader == nonClosingReaderWrapper && indexSearcher == innerIndexSearcher) {_            return engineSearcher__        } else {_            _            _            return new Engine.Searcher(engineSearcher.source(), indexSearcher, s -> IOUtils.close(s.getIndexReader(), engineSearcher),_                engineSearcher.getLogger())__        }_    };if,there,are,configured,link,index,searcher,wrapper,instances,the,link,index,searcher,of,the,provided,engine,searcher,gets,wrapped,and,a,new,link,engine,searcher,instances,is,returned,otherwise,the,provided,link,engine,searcher,is,returned,this,is,invoked,each,time,a,link,engine,searcher,is,requested,to,do,an,operation,for,example,search;public,final,engine,searcher,wrap,engine,searcher,engine,searcher,throws,ioexception,final,elasticsearch,directory,reader,elasticsearch,directory,reader,elasticsearch,directory,reader,get,elasticsearch,directory,reader,engine,searcher,get,directory,reader,if,elasticsearch,directory,reader,null,throw,new,illegal,state,exception,can,t,wrap,non,elasticsearch,directory,reader,non,closing,reader,wrapper,non,closing,reader,wrapper,new,non,closing,reader,wrapper,engine,searcher,get,directory,reader,directory,reader,reader,wrap,non,closing,reader,wrapper,if,reader,non,closing,reader,wrapper,if,reader,get,reader,cache,helper,elasticsearch,directory,reader,get,reader,cache,helper,throw,new,illegal,state,exception,wrapped,directory,reader,doesn,t,delegate,index,reader,get,core,cache,key,wrappers,must,override,this,method,and,delegate,to,the,original,readers,core,cache,key,wrapped,readers,can,t,be,used,as,cache,keys,since,their,are,used,only,per,request,which,would,lead,to,subtle,bugs,if,elasticsearch,directory,reader,get,elasticsearch,directory,reader,reader,elasticsearch,directory,reader,throw,new,illegal,state,exception,wrapped,directory,reader,hides,actual,elasticsearch,directory,reader,but,shouldn,t,final,index,searcher,orig,index,searcher,engine,searcher,searcher,final,index,searcher,inner,index,searcher,new,index,searcher,reader,inner,index,searcher,set,query,cache,orig,index,searcher,get,query,cache,inner,index,searcher,set,query,caching,policy,orig,index,searcher,get,query,caching,policy,inner,index,searcher,set,similarity,orig,index,searcher,get,similarity,final,index,searcher,index,searcher,wrap,inner,index,searcher,if,reader,non,closing,reader,wrapper,index,searcher,inner,index,searcher,return,engine,searcher,else,return,new,engine,searcher,engine,searcher,source,index,searcher,s,ioutils,close,s,get,index,reader,engine,searcher,engine,searcher,get,logger
IndexSearcherWrapper -> public final Engine.Searcher wrap(Engine.Searcher engineSearcher) throws IOException;1539723533;If there are configured {@link IndexSearcherWrapper} instances, the {@link IndexSearcher} of the provided engine searcher_gets wrapped and a new {@link Engine.Searcher} instances is returned, otherwise the provided {@link Engine.Searcher} is returned.__This is invoked each time a {@link Engine.Searcher} is requested to do an operation. (for example search);public final Engine.Searcher wrap(Engine.Searcher engineSearcher) throws IOException {_        final ElasticsearchDirectoryReader elasticsearchDirectoryReader = ElasticsearchDirectoryReader.getElasticsearchDirectoryReader(engineSearcher.getDirectoryReader())__        if (elasticsearchDirectoryReader == null) {_            throw new IllegalStateException("Can't wrap non elasticsearch directory reader")__        }_        NonClosingReaderWrapper nonClosingReaderWrapper = new NonClosingReaderWrapper(engineSearcher.getDirectoryReader())__        DirectoryReader reader = wrap(nonClosingReaderWrapper)__        if (reader != nonClosingReaderWrapper) {_            if (reader.getReaderCacheHelper() != elasticsearchDirectoryReader.getReaderCacheHelper()) {_                throw new IllegalStateException("wrapped directory reader doesn't delegate IndexReader#getCoreCacheKey, wrappers must override this method and delegate" +_                        " to the original readers core cache key. Wrapped readers can't be used as cache keys since their are used only per request which would lead to subtle bugs")__            }_            if (ElasticsearchDirectoryReader.getElasticsearchDirectoryReader(reader) != elasticsearchDirectoryReader) {_                _                throw new IllegalStateException("wrapped directory reader hides actual ElasticsearchDirectoryReader but shouldn't")__            }_        }__        final IndexSearcher origIndexSearcher = engineSearcher.searcher()__        final IndexSearcher innerIndexSearcher = new IndexSearcher(reader)__        innerIndexSearcher.setQueryCache(origIndexSearcher.getQueryCache())__        innerIndexSearcher.setQueryCachingPolicy(origIndexSearcher.getQueryCachingPolicy())__        innerIndexSearcher.setSimilarity(origIndexSearcher.getSimilarity())__        _        _        _        final IndexSearcher indexSearcher = wrap(innerIndexSearcher)__        if (reader == nonClosingReaderWrapper && indexSearcher == innerIndexSearcher) {_            return engineSearcher__        } else {_            _            _            return new Engine.Searcher(engineSearcher.source(), indexSearcher, () ->_                IOUtils.close(indexSearcher.getIndexReader(), _                engineSearcher))_ _        }_    };if,there,are,configured,link,index,searcher,wrapper,instances,the,link,index,searcher,of,the,provided,engine,searcher,gets,wrapped,and,a,new,link,engine,searcher,instances,is,returned,otherwise,the,provided,link,engine,searcher,is,returned,this,is,invoked,each,time,a,link,engine,searcher,is,requested,to,do,an,operation,for,example,search;public,final,engine,searcher,wrap,engine,searcher,engine,searcher,throws,ioexception,final,elasticsearch,directory,reader,elasticsearch,directory,reader,elasticsearch,directory,reader,get,elasticsearch,directory,reader,engine,searcher,get,directory,reader,if,elasticsearch,directory,reader,null,throw,new,illegal,state,exception,can,t,wrap,non,elasticsearch,directory,reader,non,closing,reader,wrapper,non,closing,reader,wrapper,new,non,closing,reader,wrapper,engine,searcher,get,directory,reader,directory,reader,reader,wrap,non,closing,reader,wrapper,if,reader,non,closing,reader,wrapper,if,reader,get,reader,cache,helper,elasticsearch,directory,reader,get,reader,cache,helper,throw,new,illegal,state,exception,wrapped,directory,reader,doesn,t,delegate,index,reader,get,core,cache,key,wrappers,must,override,this,method,and,delegate,to,the,original,readers,core,cache,key,wrapped,readers,can,t,be,used,as,cache,keys,since,their,are,used,only,per,request,which,would,lead,to,subtle,bugs,if,elasticsearch,directory,reader,get,elasticsearch,directory,reader,reader,elasticsearch,directory,reader,throw,new,illegal,state,exception,wrapped,directory,reader,hides,actual,elasticsearch,directory,reader,but,shouldn,t,final,index,searcher,orig,index,searcher,engine,searcher,searcher,final,index,searcher,inner,index,searcher,new,index,searcher,reader,inner,index,searcher,set,query,cache,orig,index,searcher,get,query,cache,inner,index,searcher,set,query,caching,policy,orig,index,searcher,get,query,caching,policy,inner,index,searcher,set,similarity,orig,index,searcher,get,similarity,final,index,searcher,index,searcher,wrap,inner,index,searcher,if,reader,non,closing,reader,wrapper,index,searcher,inner,index,searcher,return,engine,searcher,else,return,new,engine,searcher,engine,searcher,source,index,searcher,ioutils,close,index,searcher,get,index,reader,engine,searcher
IndexSearcherWrapper -> public final Engine.Searcher wrap(Engine.Searcher engineSearcher) throws IOException;1542697754;If there are configured {@link IndexSearcherWrapper} instances, the {@link IndexSearcher} of the provided engine searcher_gets wrapped and a new {@link Engine.Searcher} instances is returned, otherwise the provided {@link Engine.Searcher} is returned.__This is invoked each time a {@link Engine.Searcher} is requested to do an operation. (for example search);public final Engine.Searcher wrap(Engine.Searcher engineSearcher) throws IOException {_        final ElasticsearchDirectoryReader elasticsearchDirectoryReader =_            ElasticsearchDirectoryReader.getElasticsearchDirectoryReader(engineSearcher.getDirectoryReader())__        if (elasticsearchDirectoryReader == null) {_            throw new IllegalStateException("Can't wrap non elasticsearch directory reader")__        }_        NonClosingReaderWrapper nonClosingReaderWrapper = new NonClosingReaderWrapper(engineSearcher.getDirectoryReader())__        DirectoryReader reader = wrap(nonClosingReaderWrapper)__        if (reader != nonClosingReaderWrapper) {_            if (reader.getReaderCacheHelper() != elasticsearchDirectoryReader.getReaderCacheHelper()) {_                throw new IllegalStateException("wrapped directory reader doesn't delegate IndexReader#getCoreCacheKey," +_                    " wrappers must override this method and delegate to the original readers core cache key. Wrapped readers can't be " +_                    "used as cache keys since their are used only per request which would lead to subtle bugs")__            }_            if (ElasticsearchDirectoryReader.getElasticsearchDirectoryReader(reader) != elasticsearchDirectoryReader) {_                _                throw new IllegalStateException("wrapped directory reader hides actual ElasticsearchDirectoryReader but shouldn't")__            }_        }__        final IndexSearcher origIndexSearcher = engineSearcher.searcher()__        final IndexSearcher innerIndexSearcher = new IndexSearcher(reader)__        innerIndexSearcher.setQueryCache(origIndexSearcher.getQueryCache())__        innerIndexSearcher.setQueryCachingPolicy(origIndexSearcher.getQueryCachingPolicy())__        innerIndexSearcher.setSimilarity(origIndexSearcher.getSimilarity())__        _        _        _        final IndexSearcher indexSearcher = wrap(innerIndexSearcher)__        if (reader == nonClosingReaderWrapper && indexSearcher == innerIndexSearcher) {_            return engineSearcher__        } else {_            _            _            return new Engine.Searcher(engineSearcher.source(), indexSearcher, () ->_                IOUtils.close(indexSearcher.getIndexReader(), _                engineSearcher))_ _        }_    };if,there,are,configured,link,index,searcher,wrapper,instances,the,link,index,searcher,of,the,provided,engine,searcher,gets,wrapped,and,a,new,link,engine,searcher,instances,is,returned,otherwise,the,provided,link,engine,searcher,is,returned,this,is,invoked,each,time,a,link,engine,searcher,is,requested,to,do,an,operation,for,example,search;public,final,engine,searcher,wrap,engine,searcher,engine,searcher,throws,ioexception,final,elasticsearch,directory,reader,elasticsearch,directory,reader,elasticsearch,directory,reader,get,elasticsearch,directory,reader,engine,searcher,get,directory,reader,if,elasticsearch,directory,reader,null,throw,new,illegal,state,exception,can,t,wrap,non,elasticsearch,directory,reader,non,closing,reader,wrapper,non,closing,reader,wrapper,new,non,closing,reader,wrapper,engine,searcher,get,directory,reader,directory,reader,reader,wrap,non,closing,reader,wrapper,if,reader,non,closing,reader,wrapper,if,reader,get,reader,cache,helper,elasticsearch,directory,reader,get,reader,cache,helper,throw,new,illegal,state,exception,wrapped,directory,reader,doesn,t,delegate,index,reader,get,core,cache,key,wrappers,must,override,this,method,and,delegate,to,the,original,readers,core,cache,key,wrapped,readers,can,t,be,used,as,cache,keys,since,their,are,used,only,per,request,which,would,lead,to,subtle,bugs,if,elasticsearch,directory,reader,get,elasticsearch,directory,reader,reader,elasticsearch,directory,reader,throw,new,illegal,state,exception,wrapped,directory,reader,hides,actual,elasticsearch,directory,reader,but,shouldn,t,final,index,searcher,orig,index,searcher,engine,searcher,searcher,final,index,searcher,inner,index,searcher,new,index,searcher,reader,inner,index,searcher,set,query,cache,orig,index,searcher,get,query,cache,inner,index,searcher,set,query,caching,policy,orig,index,searcher,get,query,caching,policy,inner,index,searcher,set,similarity,orig,index,searcher,get,similarity,final,index,searcher,index,searcher,wrap,inner,index,searcher,if,reader,non,closing,reader,wrapper,index,searcher,inner,index,searcher,return,engine,searcher,else,return,new,engine,searcher,engine,searcher,source,index,searcher,ioutils,close,index,searcher,get,index,reader,engine,searcher
