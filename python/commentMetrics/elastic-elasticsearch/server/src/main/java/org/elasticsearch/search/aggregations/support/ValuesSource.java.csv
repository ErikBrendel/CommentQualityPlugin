commented;modifiers;parameterAmount;loc;comment;code
true;public,abstract;1;1;/**  * Get the current {@link BytesValues}.  */ ;/**  * Get the current {@link BytesValues}.  */ public abstract SortedBinaryDocValues bytesValues(LeafReaderContext context) throws IOException.
false;public,abstract;1;1;;public abstract DocValueBits docsWithValue(LeafReaderContext context) throws IOException.
true;public;0;3;/**  * Whether this values source needs scores.  */ ;/**  * Whether this values source needs scores.  */ public boolean needsScores() {     return false. }
false;public;1;5;;@Override public DocValueBits docsWithValue(LeafReaderContext context) throws IOException {     final SortedBinaryDocValues bytes = bytesValues(context).     return org.elasticsearch.index.fielddata.FieldData.docsWithValue(bytes). }
false;public;1;4;;@Override public SortedSetDocValues ordinalsValues(LeafReaderContext context) {     return DocValues.emptySortedSet(). }
false;public;1;4;;@Override public SortedSetDocValues globalOrdinalsValues(LeafReaderContext context) {     return DocValues.emptySortedSet(). }
false;public;1;4;;@Override public SortedBinaryDocValues bytesValues(LeafReaderContext context) throws IOException {     return org.elasticsearch.index.fielddata.FieldData.emptySortedBinary(). }
false;public;1;4;;@Override public LongUnaryOperator globalOrdinalsMapping(LeafReaderContext context) throws IOException {     return LongUnaryOperator.identity(). }
false;public;1;5;;@Override public DocValueBits docsWithValue(LeafReaderContext context) throws IOException {     final SortedSetDocValues ordinals = ordinalsValues(context).     return org.elasticsearch.index.fielddata.FieldData.docsWithValue(ordinals). }
false;public,abstract;1;2;;public abstract SortedSetDocValues ordinalsValues(LeafReaderContext context) throws IOException.
false;public,abstract;1;2;;public abstract SortedSetDocValues globalOrdinalsValues(LeafReaderContext context) throws IOException.
true;public,abstract;1;2;/**  * Returns a mapping from segment ordinals to global ordinals.  */ ;/**  * Returns a mapping from segment ordinals to global ordinals.  */ public abstract LongUnaryOperator globalOrdinalsMapping(LeafReaderContext context) throws IOException.
false;public;1;10;;public long globalMaxOrd(IndexSearcher indexSearcher) throws IOException {     IndexReader indexReader = indexSearcher.getIndexReader().     if (indexReader.leaves().isEmpty()) {         return 0.     } else {         LeafReaderContext atomicReaderContext = indexReader.leaves().get(0).         SortedSetDocValues values = globalOrdinalsValues(atomicReaderContext).         return values.getValueCount().     } }
false;public;1;5;;@Override public SortedBinaryDocValues bytesValues(LeafReaderContext context) {     final AtomicOrdinalsFieldData atomicFieldData = indexFieldData.load(context).     return atomicFieldData.getBytesValues(). }
false;public;1;5;;@Override public SortedSetDocValues ordinalsValues(LeafReaderContext context) {     final AtomicOrdinalsFieldData atomicFieldData = indexFieldData.load(context).     return atomicFieldData.getOrdinalsValues(). }
false;public;1;6;;@Override public SortedSetDocValues globalOrdinalsValues(LeafReaderContext context) {     final IndexOrdinalsFieldData global = indexFieldData.loadGlobal((DirectoryReader) context.parent.reader()).     final AtomicOrdinalsFieldData atomicFieldData = global.load(context).     return atomicFieldData.getOrdinalsValues(). }
false;public;1;11;;@Override public LongUnaryOperator globalOrdinalsMapping(LeafReaderContext context) throws IOException {     final IndexOrdinalsFieldData global = indexFieldData.loadGlobal((DirectoryReader) context.parent.reader()).     final OrdinalMap map = global.getOrdinalMap().     if (map == null) {         // segments and global ordinals are the same         return LongUnaryOperator.identity().     }     final org.apache.lucene.util.LongValues segmentToGlobalOrd = map.getGlobalOrds(context.ord).     return segmentToGlobalOrd::get. }
false;public;1;4;;@Override public SortedBinaryDocValues bytesValues(LeafReaderContext context) {     return indexFieldData.load(context).getBytesValues(). }
false;public;1;4;;@Override public SortedBinaryDocValues bytesValues(LeafReaderContext context) throws IOException {     return new ScriptBytesValues(script.newInstance(context)). }
false;public;0;4;;@Override public boolean needsScores() {     return script.needs_score(). }
false;public;0;4;;@Override public boolean isFloatingPoint() {     return false. }
false;public;1;4;;@Override public SortedNumericDocValues longValues(LeafReaderContext context) {     return DocValues.emptySortedNumeric(context.reader().maxDoc()). }
false;public;1;4;;@Override public SortedNumericDoubleValues doubleValues(LeafReaderContext context) throws IOException {     return org.elasticsearch.index.fielddata.FieldData.emptySortedNumericDoubles(). }
false;public;1;4;;@Override public SortedBinaryDocValues bytesValues(LeafReaderContext context) throws IOException {     return org.elasticsearch.index.fielddata.FieldData.emptySortedBinary(). }
true;public,abstract;0;1;/**  * Whether the underlying data is floating-point or not.  */ ;/**  * Whether the underlying data is floating-point or not.  */ public abstract boolean isFloatingPoint().
true;public,abstract;1;1;/**  * Get the current {@link SortedNumericDocValues}.  */ ;/**  * Get the current {@link SortedNumericDocValues}.  */ public abstract SortedNumericDocValues longValues(LeafReaderContext context) throws IOException.
true;public,abstract;1;1;/**  * Get the current {@link SortedNumericDoubleValues}.  */ ;/**  * Get the current {@link SortedNumericDoubleValues}.  */ public abstract SortedNumericDoubleValues doubleValues(LeafReaderContext context) throws IOException.
false;public;1;10;;@Override public DocValueBits docsWithValue(LeafReaderContext context) throws IOException {     if (isFloatingPoint()) {         final SortedNumericDoubleValues values = doubleValues(context).         return org.elasticsearch.index.fielddata.FieldData.docsWithValue(values).     } else {         final SortedNumericDocValues values = longValues(context).         return org.elasticsearch.index.fielddata.FieldData.docsWithValue(values).     } }
false;public;0;4;;@Override public boolean isFloatingPoint() {     // even if the underlying source produces longs, scripts can change them to doubles     return true. }
false;public;0;4;;@Override public boolean needsScores() {     return script.needs_score(). }
false;public;1;4;;@Override public SortedBinaryDocValues bytesValues(LeafReaderContext context) throws IOException {     return new ValuesSource.WithScript.BytesValues(delegate.bytesValues(context), script.newInstance(context)). }
false;public;1;4;;@Override public SortedNumericDocValues longValues(LeafReaderContext context) throws IOException {     return new LongValues(delegate.longValues(context), script.newInstance(context)). }
false;public;1;4;;@Override public SortedNumericDoubleValues doubleValues(LeafReaderContext context) throws IOException {     return new DoubleValues(delegate.doubleValues(context), script.newInstance(context)). }
false;public;1;4;;@Override public void setScorer(Scorable scorer) {     script.setScorer(scorer). }
false;public;1;14;;@Override public boolean advanceExact(int target) throws IOException {     if (longValues.advanceExact(target)) {         resize(longValues.docValueCount()).         script.setDocument(target).         for (int i = 0. i < docValueCount(). ++i) {             script.setNextAggregationValue(longValues.nextValue()).             values[i] = script.runAsLong().         }         sort().         return true.     }     return false. }
false;public;1;4;;@Override public void setScorer(Scorable scorer) {     script.setScorer(scorer). }
false;public;1;14;;@Override public boolean advanceExact(int target) throws IOException {     if (doubleValues.advanceExact(target)) {         resize(doubleValues.docValueCount()).         script.setDocument(target).         for (int i = 0. i < docValueCount(). ++i) {             script.setNextAggregationValue(doubleValues.nextValue()).             values[i] = script.runAsDouble().         }         sort().         return true.     }     return false. }
false;public;0;4;;@Override public boolean isFloatingPoint() {     return indexFieldData.getNumericType().isFloatingPoint(). }
false;public;1;4;;@Override public SortedBinaryDocValues bytesValues(LeafReaderContext context) {     return indexFieldData.load(context).getBytesValues(). }
false;public;1;4;;@Override public SortedNumericDocValues longValues(LeafReaderContext context) {     return indexFieldData.load(context).getLongValues(). }
false;public;1;4;;@Override public SortedNumericDoubleValues doubleValues(LeafReaderContext context) {     return indexFieldData.load(context).getDoubleValues(). }
false;public;0;4;;@Override public boolean isFloatingPoint() {     return scriptValueType != null ? scriptValueType == ValueType.DOUBLE : true. }
false;public;1;4;;@Override public SortedNumericDocValues longValues(LeafReaderContext context) throws IOException {     return new ScriptLongValues(script.newInstance(context)). }
false;public;1;4;;@Override public SortedNumericDoubleValues doubleValues(LeafReaderContext context) throws IOException {     return new ScriptDoubleValues(script.newInstance(context)). }
false;public;1;4;;@Override public SortedBinaryDocValues bytesValues(LeafReaderContext context) throws IOException {     return new ScriptBytesValues(script.newInstance(context)). }
false;public;0;4;;@Override public boolean needsScores() {     return script.needs_score(). }
false;public;0;4;;@Override public boolean needsScores() {     return script.needs_score(). }
false;public;1;4;;@Override public SortedBinaryDocValues bytesValues(LeafReaderContext context) throws IOException {     return new BytesValues(delegate.bytesValues(context), script.newInstance(context)). }
false;public;1;4;;@Override public void setScorer(Scorable scorer) {     script.setScorer(scorer). }
false;public;1;20;;@Override public boolean advanceExact(int doc) throws IOException {     if (bytesValues.advanceExact(doc)) {         count = bytesValues.docValueCount().         grow().         for (int i = 0. i < count. ++i) {             final BytesRef value = bytesValues.nextValue().             script.setNextAggregationValue(value.utf8ToString()).             Object run = script.execute().             CollectionUtils.ensureNoSelfReferences(run, "ValuesSource.BytesValues script").             values[i].copyChars(run.toString()).         }         sort().         return true.     } else {         count = 0.         grow().         return false.     } }
false;public;1;4;;@Override public MultiGeoPointValues geoPointValues(LeafReaderContext context) {     return org.elasticsearch.index.fielddata.FieldData.emptyMultiGeoPoints(). }
false;public;1;4;;@Override public SortedBinaryDocValues bytesValues(LeafReaderContext context) throws IOException {     return org.elasticsearch.index.fielddata.FieldData.emptySortedBinary(). }
false;public;1;5;;@Override public DocValueBits docsWithValue(LeafReaderContext context) throws IOException {     final MultiGeoPointValues geoPoints = geoPointValues(context).     return org.elasticsearch.index.fielddata.FieldData.docsWithValue(geoPoints). }
false;public,abstract;1;1;;public abstract MultiGeoPointValues geoPointValues(LeafReaderContext context).
false;public;1;4;;@Override public SortedBinaryDocValues bytesValues(LeafReaderContext context) {     return indexFieldData.load(context).getBytesValues(). }
false;public;1;3;;public org.elasticsearch.index.fielddata.MultiGeoPointValues geoPointValues(LeafReaderContext context) {     return indexFieldData.load(context).getGeoPointValues(). }
