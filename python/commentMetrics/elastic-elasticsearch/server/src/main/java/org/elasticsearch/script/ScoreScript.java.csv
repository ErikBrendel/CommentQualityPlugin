commented;modifiers;parameterAmount;loc;comment;code
false;public,abstract;0;1;;public abstract double execute().
true;public;0;3;/**  * Return the parameters for this script.  */ ;/**  * Return the parameters for this script.  */ public Map<String, Object> getParams() {     return params. }
true;public,final;0;3;/**  * The doc lookup for the Lucene segment this script was created for.  */ ;/**  * The doc lookup for the Lucene segment this script was created for.  */ public final Map<String, ScriptDocValues<?>> getDoc() {     return leafLookup.doc(). }
true;public;1;3;/**  * Set the current document to run the script on next.  */ ;/**  * Set the current document to run the script on next.  */ public void setDocument(int docid) {     leafLookup.setDocument(docid). }
false;public;1;9;;public void setScorer(Scorable scorer) {     this.scoreSupplier = () -> {         try {             return scorer.score().         } catch (IOException e) {             throw new UncheckedIOException(e).         }     }. }
false;public;0;3;;public double get_score() {     return scoreSupplier.getAsDouble(). }
true;;0;1;/**  * Return {@code true} if the script needs {@code _score} calculated, or {@code false} otherwise.  */ ;/**  * Return {@code true} if the script needs {@code _score} calculated, or {@code false} otherwise.  */ boolean needs_score().
false;;1;1;;ScoreScript newInstance(LeafReaderContext ctx) throws IOException.
false;;2;1;;ScoreScript.LeafFactory newFactory(Map<String, Object> params, SearchLookup lookup).
