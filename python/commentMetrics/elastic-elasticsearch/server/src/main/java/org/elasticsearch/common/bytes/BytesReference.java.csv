# id;timestamp;commentText;codeText;commentWords;codeWords
BytesReference -> public String utf8ToString();1524684173;Interprets the referenced bytes as UTF8 bytes, returning the resulting string;public String utf8ToString() {_        return toBytesRef().utf8ToString()__    };interprets,the,referenced,bytes,as,utf8,bytes,returning,the,resulting,string;public,string,utf8to,string,return,to,bytes,ref,utf8to,string
BytesReference -> public String utf8ToString();1525334055;Interprets the referenced bytes as UTF8 bytes, returning the resulting string;public String utf8ToString() {_        return toBytesRef().utf8ToString()__    };interprets,the,referenced,bytes,as,utf8,bytes,returning,the,resulting,string;public,string,utf8to,string,return,to,bytes,ref,utf8to,string
BytesReference -> public String utf8ToString();1540912197;Interprets the referenced bytes as UTF8 bytes, returning the resulting string;public String utf8ToString() {_        return toBytesRef().utf8ToString()__    };interprets,the,referenced,bytes,as,utf8,bytes,returning,the,resulting,string;public,string,utf8to,string,return,to,bytes,ref,utf8to,string
BytesReference -> public String utf8ToString();1544304278;Interprets the referenced bytes as UTF8 bytes, returning the resulting string;public String utf8ToString() {_        return toBytesRef().utf8ToString()__    };interprets,the,referenced,bytes,as,utf8,bytes,returning,the,resulting,string;public,string,utf8to,string,return,to,bytes,ref,utf8to,string
BytesReference -> public abstract int length()_;1524684173;The length.;public abstract int length()_;the,length;public,abstract,int,length
BytesReference -> public abstract int length()_;1525334055;The length.;public abstract int length()_;the,length;public,abstract,int,length
BytesReference -> public abstract int length()_;1540912197;The length.;public abstract int length()_;the,length;public,abstract,int,length
BytesReference -> public abstract int length()_;1544304278;The length.;public abstract int length()_;the,length;public,abstract,int,length
BytesReference -> public static ByteBuffer[] toByteBuffers(BytesReference reference);1524684173;Returns an array of byte buffers from the given BytesReference.;public static ByteBuffer[] toByteBuffers(BytesReference reference) {_        BytesRefIterator byteRefIterator = reference.iterator()__        BytesRef r__        try {_            ArrayList<ByteBuffer> buffers = new ArrayList<>()__            while ((r = byteRefIterator.next()) != null) {_                buffers.add(ByteBuffer.wrap(r.bytes, r.offset, r.length))__            }_            return buffers.toArray(new ByteBuffer[buffers.size()])___        } catch (IOException e) {_            _            throw new AssertionError("won't happen", e)__        }_    };returns,an,array,of,byte,buffers,from,the,given,bytes,reference;public,static,byte,buffer,to,byte,buffers,bytes,reference,reference,bytes,ref,iterator,byte,ref,iterator,reference,iterator,bytes,ref,r,try,array,list,byte,buffer,buffers,new,array,list,while,r,byte,ref,iterator,next,null,buffers,add,byte,buffer,wrap,r,bytes,r,offset,r,length,return,buffers,to,array,new,byte,buffer,buffers,size,catch,ioexception,e,throw,new,assertion,error,won,t,happen,e
BytesReference -> public static ByteBuffer[] toByteBuffers(BytesReference reference);1525334055;Returns an array of byte buffers from the given BytesReference.;public static ByteBuffer[] toByteBuffers(BytesReference reference) {_        BytesRefIterator byteRefIterator = reference.iterator()__        BytesRef r__        try {_            ArrayList<ByteBuffer> buffers = new ArrayList<>()__            while ((r = byteRefIterator.next()) != null) {_                buffers.add(ByteBuffer.wrap(r.bytes, r.offset, r.length))__            }_            return buffers.toArray(new ByteBuffer[buffers.size()])___        } catch (IOException e) {_            _            throw new AssertionError("won't happen", e)__        }_    };returns,an,array,of,byte,buffers,from,the,given,bytes,reference;public,static,byte,buffer,to,byte,buffers,bytes,reference,reference,bytes,ref,iterator,byte,ref,iterator,reference,iterator,bytes,ref,r,try,array,list,byte,buffer,buffers,new,array,list,while,r,byte,ref,iterator,next,null,buffers,add,byte,buffer,wrap,r,bytes,r,offset,r,length,return,buffers,to,array,new,byte,buffer,buffers,size,catch,ioexception,e,throw,new,assertion,error,won,t,happen,e
BytesReference -> public static ByteBuffer[] toByteBuffers(BytesReference reference);1540912197;Returns an array of byte buffers from the given BytesReference.;public static ByteBuffer[] toByteBuffers(BytesReference reference) {_        BytesRefIterator byteRefIterator = reference.iterator()__        BytesRef r__        try {_            ArrayList<ByteBuffer> buffers = new ArrayList<>()__            while ((r = byteRefIterator.next()) != null) {_                buffers.add(ByteBuffer.wrap(r.bytes, r.offset, r.length))__            }_            return buffers.toArray(new ByteBuffer[buffers.size()])___        } catch (IOException e) {_            _            throw new AssertionError("won't happen", e)__        }_    };returns,an,array,of,byte,buffers,from,the,given,bytes,reference;public,static,byte,buffer,to,byte,buffers,bytes,reference,reference,bytes,ref,iterator,byte,ref,iterator,reference,iterator,bytes,ref,r,try,array,list,byte,buffer,buffers,new,array,list,while,r,byte,ref,iterator,next,null,buffers,add,byte,buffer,wrap,r,bytes,r,offset,r,length,return,buffers,to,array,new,byte,buffer,buffers,size,catch,ioexception,e,throw,new,assertion,error,won,t,happen,e
BytesReference -> public static ByteBuffer[] toByteBuffers(BytesReference reference);1544304278;Returns an array of byte buffers from the given BytesReference.;public static ByteBuffer[] toByteBuffers(BytesReference reference) {_        BytesRefIterator byteRefIterator = reference.iterator()__        BytesRef r__        try {_            ArrayList<ByteBuffer> buffers = new ArrayList<>()__            while ((r = byteRefIterator.next()) != null) {_                buffers.add(ByteBuffer.wrap(r.bytes, r.offset, r.length))__            }_            return buffers.toArray(new ByteBuffer[buffers.size()])___        } catch (IOException e) {_            _            throw new AssertionError("won't happen", e)__        }_    };returns,an,array,of,byte,buffers,from,the,given,bytes,reference;public,static,byte,buffer,to,byte,buffers,bytes,reference,reference,bytes,ref,iterator,byte,ref,iterator,reference,iterator,bytes,ref,r,try,array,list,byte,buffer,buffers,new,array,list,while,r,byte,ref,iterator,next,null,buffers,add,byte,buffer,wrap,r,bytes,r,offset,r,length,return,buffers,to,array,new,byte,buffer,buffers,size,catch,ioexception,e,throw,new,assertion,error,won,t,happen,e
BytesReference -> public abstract BytesReference slice(int from, int length)_;1524684173;Slice the bytes from the <tt>from</tt> index up to <tt>length</tt>.;public abstract BytesReference slice(int from, int length)_;slice,the,bytes,from,the,tt,from,tt,index,up,to,tt,length,tt;public,abstract,bytes,reference,slice,int,from,int,length
BytesReference -> public abstract BytesReference slice(int from, int length)_;1525334055;Slice the bytes from the {@code from} index up to {@code length}.;public abstract BytesReference slice(int from, int length)_;slice,the,bytes,from,the,code,from,index,up,to,code,length;public,abstract,bytes,reference,slice,int,from,int,length
BytesReference -> public abstract BytesReference slice(int from, int length)_;1540912197;Slice the bytes from the {@code from} index up to {@code length}.;public abstract BytesReference slice(int from, int length)_;slice,the,bytes,from,the,code,from,index,up,to,code,length;public,abstract,bytes,reference,slice,int,from,int,length
BytesReference -> public abstract BytesReference slice(int from, int length)_;1544304278;Slice the bytes from the {@code from} index up to {@code length}.;public abstract BytesReference slice(int from, int length)_;slice,the,bytes,from,the,code,from,index,up,to,code,length;public,abstract,bytes,reference,slice,int,from,int,length
BytesReference -> public abstract long ramBytesUsed()_;1540912197;The amount of memory used by this BytesReference;public abstract long ramBytesUsed()_;the,amount,of,memory,used,by,this,bytes,reference;public,abstract,long,ram,bytes,used
BytesReference -> public abstract long ramBytesUsed()_;1544304278;The amount of memory used by this BytesReference;public abstract long ramBytesUsed()_;the,amount,of,memory,used,by,this,bytes,reference;public,abstract,long,ram,bytes,used
BytesReference -> public abstract BytesRef toBytesRef()_;1524684173;Converts to Lucene BytesRef.;public abstract BytesRef toBytesRef()_;converts,to,lucene,bytes,ref;public,abstract,bytes,ref,to,bytes,ref
BytesReference -> public abstract BytesRef toBytesRef()_;1525334055;Converts to Lucene BytesRef.;public abstract BytesRef toBytesRef()_;converts,to,lucene,bytes,ref;public,abstract,bytes,ref,to,bytes,ref
BytesReference -> public abstract BytesRef toBytesRef()_;1540912197;Converts to Lucene BytesRef.;public abstract BytesRef toBytesRef()_;converts,to,lucene,bytes,ref;public,abstract,bytes,ref,to,bytes,ref
BytesReference -> public abstract BytesRef toBytesRef()_;1544304278;Converts to Lucene BytesRef.;public abstract BytesRef toBytesRef()_;converts,to,lucene,bytes,ref;public,abstract,bytes,ref,to,bytes,ref
BytesReference -> public static BytesReference fromByteBuffers(ByteBuffer[] buffers);1524684173;Returns BytesReference composed of the provided ByteBuffers.;public static BytesReference fromByteBuffers(ByteBuffer[] buffers) {_        ByteBufferReference[] references = new ByteBufferReference[buffers.length]__        for (int i = 0_ i < references.length_ ++i) {_            references[i] = new ByteBufferReference(buffers[i])__        }__        return new CompositeBytesReference(references)__    };returns,bytes,reference,composed,of,the,provided,byte,buffers;public,static,bytes,reference,from,byte,buffers,byte,buffer,buffers,byte,buffer,reference,references,new,byte,buffer,reference,buffers,length,for,int,i,0,i,references,length,i,references,i,new,byte,buffer,reference,buffers,i,return,new,composite,bytes,reference,references
BytesReference -> public static BytesReference fromByteBuffers(ByteBuffer[] buffers);1525334055;Returns BytesReference composed of the provided ByteBuffers.;public static BytesReference fromByteBuffers(ByteBuffer[] buffers) {_        ByteBufferReference[] references = new ByteBufferReference[buffers.length]__        for (int i = 0_ i < references.length_ ++i) {_            references[i] = new ByteBufferReference(buffers[i])__        }__        return new CompositeBytesReference(references)__    };returns,bytes,reference,composed,of,the,provided,byte,buffers;public,static,bytes,reference,from,byte,buffers,byte,buffer,buffers,byte,buffer,reference,references,new,byte,buffer,reference,buffers,length,for,int,i,0,i,references,length,i,references,i,new,byte,buffer,reference,buffers,i,return,new,composite,bytes,reference,references
BytesReference -> public static BytesReference fromByteBuffers(ByteBuffer[] buffers);1540912197;Returns BytesReference composed of the provided ByteBuffers.;public static BytesReference fromByteBuffers(ByteBuffer[] buffers) {_        ByteBufferReference[] references = new ByteBufferReference[buffers.length]__        for (int i = 0_ i < references.length_ ++i) {_            references[i] = new ByteBufferReference(buffers[i])__        }__        return new CompositeBytesReference(references)__    };returns,bytes,reference,composed,of,the,provided,byte,buffers;public,static,bytes,reference,from,byte,buffers,byte,buffer,buffers,byte,buffer,reference,references,new,byte,buffer,reference,buffers,length,for,int,i,0,i,references,length,i,references,i,new,byte,buffer,reference,buffers,i,return,new,composite,bytes,reference,references
BytesReference -> public static BytesReference fromByteBuffers(ByteBuffer[] buffers);1544304278;Returns BytesReference composed of the provided ByteBuffers.;public static BytesReference fromByteBuffers(ByteBuffer[] buffers) {_        int bufferCount = buffers.length__        if (bufferCount == 0) {_            return BytesArray.EMPTY__        } else if (bufferCount == 1) {_            return new ByteBufferReference(buffers[0])__        } else {_            ByteBufferReference[] references = new ByteBufferReference[bufferCount]__            for (int i = 0_ i < bufferCount_ ++i) {_                references[i] = new ByteBufferReference(buffers[i])__            }__            return new CompositeBytesReference(references)__        }_    };returns,bytes,reference,composed,of,the,provided,byte,buffers;public,static,bytes,reference,from,byte,buffers,byte,buffer,buffers,int,buffer,count,buffers,length,if,buffer,count,0,return,bytes,array,empty,else,if,buffer,count,1,return,new,byte,buffer,reference,buffers,0,else,byte,buffer,reference,references,new,byte,buffer,reference,buffer,count,for,int,i,0,i,buffer,count,i,references,i,new,byte,buffer,reference,buffers,i,return,new,composite,bytes,reference,references
BytesReference -> public BytesRefIterator iterator();1524684173;Returns a BytesRefIterator for this BytesReference. This method allows_access to the internal pages of this reference without copying them. Use with care!_@see BytesRefIterator;public BytesRefIterator iterator() {_        return new BytesRefIterator() {_            BytesRef ref = length() == 0 ? null : toBytesRef()__            @Override_            public BytesRef next() throws IOException {_                BytesRef r = ref__                ref = null_ _                return r__            }_        }__    };returns,a,bytes,ref,iterator,for,this,bytes,reference,this,method,allows,access,to,the,internal,pages,of,this,reference,without,copying,them,use,with,care,see,bytes,ref,iterator;public,bytes,ref,iterator,iterator,return,new,bytes,ref,iterator,bytes,ref,ref,length,0,null,to,bytes,ref,override,public,bytes,ref,next,throws,ioexception,bytes,ref,r,ref,ref,null,return,r
BytesReference -> public BytesRefIterator iterator();1525334055;Returns a BytesRefIterator for this BytesReference. This method allows_access to the internal pages of this reference without copying them. Use with care!_@see BytesRefIterator;public BytesRefIterator iterator() {_        return new BytesRefIterator() {_            BytesRef ref = length() == 0 ? null : toBytesRef()__            @Override_            public BytesRef next() throws IOException {_                BytesRef r = ref__                ref = null_ _                return r__            }_        }__    };returns,a,bytes,ref,iterator,for,this,bytes,reference,this,method,allows,access,to,the,internal,pages,of,this,reference,without,copying,them,use,with,care,see,bytes,ref,iterator;public,bytes,ref,iterator,iterator,return,new,bytes,ref,iterator,bytes,ref,ref,length,0,null,to,bytes,ref,override,public,bytes,ref,next,throws,ioexception,bytes,ref,r,ref,ref,null,return,r
BytesReference -> public BytesRefIterator iterator();1540912197;Returns a BytesRefIterator for this BytesReference. This method allows_access to the internal pages of this reference without copying them. Use with care!_@see BytesRefIterator;public BytesRefIterator iterator() {_        return new BytesRefIterator() {_            BytesRef ref = length() == 0 ? null : toBytesRef()__            @Override_            public BytesRef next() throws IOException {_                BytesRef r = ref__                ref = null_ _                return r__            }_        }__    };returns,a,bytes,ref,iterator,for,this,bytes,reference,this,method,allows,access,to,the,internal,pages,of,this,reference,without,copying,them,use,with,care,see,bytes,ref,iterator;public,bytes,ref,iterator,iterator,return,new,bytes,ref,iterator,bytes,ref,ref,length,0,null,to,bytes,ref,override,public,bytes,ref,next,throws,ioexception,bytes,ref,r,ref,ref,null,return,r
BytesReference -> public BytesRefIterator iterator();1544304278;Returns a BytesRefIterator for this BytesReference. This method allows_access to the internal pages of this reference without copying them. Use with care!_@see BytesRefIterator;public BytesRefIterator iterator() {_        return new BytesRefIterator() {_            BytesRef ref = length() == 0 ? null : toBytesRef()__            @Override_            public BytesRef next() throws IOException {_                BytesRef r = ref__                ref = null_ _                return r__            }_        }__    };returns,a,bytes,ref,iterator,for,this,bytes,reference,this,method,allows,access,to,the,internal,pages,of,this,reference,without,copying,them,use,with,care,see,bytes,ref,iterator;public,bytes,ref,iterator,iterator,return,new,bytes,ref,iterator,bytes,ref,ref,length,0,null,to,bytes,ref,override,public,bytes,ref,next,throws,ioexception,bytes,ref,r,ref,ref,null,return,r
BytesReference -> public abstract byte get(int index)_;1524684173;Returns the byte at the specified index. Need to be between 0 and length.;public abstract byte get(int index)_;returns,the,byte,at,the,specified,index,need,to,be,between,0,and,length;public,abstract,byte,get,int,index
BytesReference -> public abstract byte get(int index)_;1525334055;Returns the byte at the specified index. Need to be between 0 and length.;public abstract byte get(int index)_;returns,the,byte,at,the,specified,index,need,to,be,between,0,and,length;public,abstract,byte,get,int,index
BytesReference -> public abstract byte get(int index)_;1540912197;Returns the byte at the specified index. Need to be between 0 and length.;public abstract byte get(int index)_;returns,the,byte,at,the,specified,index,need,to,be,between,0,and,length;public,abstract,byte,get,int,index
BytesReference -> public abstract byte get(int index)_;1544304278;Returns the byte at the specified index. Need to be between 0 and length.;public abstract byte get(int index)_;returns,the,byte,at,the,specified,index,need,to,be,between,0,and,length;public,abstract,byte,get,int,index
BytesReference -> public void writeTo(OutputStream os) throws IOException;1524684173;Writes the bytes directly to the output stream.;public void writeTo(OutputStream os) throws IOException {_        final BytesRefIterator iterator = iterator()__        BytesRef ref__        while ((ref = iterator.next()) != null) {_            os.write(ref.bytes, ref.offset, ref.length)__        }_    };writes,the,bytes,directly,to,the,output,stream;public,void,write,to,output,stream,os,throws,ioexception,final,bytes,ref,iterator,iterator,iterator,bytes,ref,ref,while,ref,iterator,next,null,os,write,ref,bytes,ref,offset,ref,length
BytesReference -> public void writeTo(OutputStream os) throws IOException;1525334055;Writes the bytes directly to the output stream.;public void writeTo(OutputStream os) throws IOException {_        final BytesRefIterator iterator = iterator()__        BytesRef ref__        while ((ref = iterator.next()) != null) {_            os.write(ref.bytes, ref.offset, ref.length)__        }_    };writes,the,bytes,directly,to,the,output,stream;public,void,write,to,output,stream,os,throws,ioexception,final,bytes,ref,iterator,iterator,iterator,bytes,ref,ref,while,ref,iterator,next,null,os,write,ref,bytes,ref,offset,ref,length
BytesReference -> public void writeTo(OutputStream os) throws IOException;1540912197;Writes the bytes directly to the output stream.;public void writeTo(OutputStream os) throws IOException {_        final BytesRefIterator iterator = iterator()__        BytesRef ref__        while ((ref = iterator.next()) != null) {_            os.write(ref.bytes, ref.offset, ref.length)__        }_    };writes,the,bytes,directly,to,the,output,stream;public,void,write,to,output,stream,os,throws,ioexception,final,bytes,ref,iterator,iterator,iterator,bytes,ref,ref,while,ref,iterator,next,null,os,write,ref,bytes,ref,offset,ref,length
BytesReference -> public void writeTo(OutputStream os) throws IOException;1544304278;Writes the bytes directly to the output stream.;public void writeTo(OutputStream os) throws IOException {_        final BytesRefIterator iterator = iterator()__        BytesRef ref__        while ((ref = iterator.next()) != null) {_            os.write(ref.bytes, ref.offset, ref.length)__        }_    };writes,the,bytes,directly,to,the,output,stream;public,void,write,to,output,stream,os,throws,ioexception,final,bytes,ref,iterator,iterator,iterator,bytes,ref,ref,while,ref,iterator,next,null,os,write,ref,bytes,ref,offset,ref,length
BytesReference -> public static byte[] toBytes(BytesReference reference);1524684173;Returns a compact array from the given BytesReference. The returned array won't be copied unless necessary. If you need_to modify the returned array use <tt>BytesRef.deepCopyOf(reference.toBytesRef()</tt> instead;public static byte[] toBytes(BytesReference reference) {_        final BytesRef bytesRef = reference.toBytesRef()__        if (bytesRef.offset == 0 && bytesRef.length == bytesRef.bytes.length) {_            return bytesRef.bytes__        }_        return BytesRef.deepCopyOf(bytesRef).bytes__    };returns,a,compact,array,from,the,given,bytes,reference,the,returned,array,won,t,be,copied,unless,necessary,if,you,need,to,modify,the,returned,array,use,tt,bytes,ref,deep,copy,of,reference,to,bytes,ref,tt,instead;public,static,byte,to,bytes,bytes,reference,reference,final,bytes,ref,bytes,ref,reference,to,bytes,ref,if,bytes,ref,offset,0,bytes,ref,length,bytes,ref,bytes,length,return,bytes,ref,bytes,return,bytes,ref,deep,copy,of,bytes,ref,bytes
BytesReference -> public static byte[] toBytes(BytesReference reference);1525334055;Returns a compact array from the given BytesReference. The returned array won't be copied unless necessary. If you need_to modify the returned array use {@code BytesRef.deepCopyOf(reference.toBytesRef()} instead;public static byte[] toBytes(BytesReference reference) {_        final BytesRef bytesRef = reference.toBytesRef()__        if (bytesRef.offset == 0 && bytesRef.length == bytesRef.bytes.length) {_            return bytesRef.bytes__        }_        return BytesRef.deepCopyOf(bytesRef).bytes__    };returns,a,compact,array,from,the,given,bytes,reference,the,returned,array,won,t,be,copied,unless,necessary,if,you,need,to,modify,the,returned,array,use,code,bytes,ref,deep,copy,of,reference,to,bytes,ref,instead;public,static,byte,to,bytes,bytes,reference,reference,final,bytes,ref,bytes,ref,reference,to,bytes,ref,if,bytes,ref,offset,0,bytes,ref,length,bytes,ref,bytes,length,return,bytes,ref,bytes,return,bytes,ref,deep,copy,of,bytes,ref,bytes
BytesReference -> public static byte[] toBytes(BytesReference reference);1540912197;Returns a compact array from the given BytesReference. The returned array won't be copied unless necessary. If you need_to modify the returned array use {@code BytesRef.deepCopyOf(reference.toBytesRef()} instead;public static byte[] toBytes(BytesReference reference) {_        final BytesRef bytesRef = reference.toBytesRef()__        if (bytesRef.offset == 0 && bytesRef.length == bytesRef.bytes.length) {_            return bytesRef.bytes__        }_        return BytesRef.deepCopyOf(bytesRef).bytes__    };returns,a,compact,array,from,the,given,bytes,reference,the,returned,array,won,t,be,copied,unless,necessary,if,you,need,to,modify,the,returned,array,use,code,bytes,ref,deep,copy,of,reference,to,bytes,ref,instead;public,static,byte,to,bytes,bytes,reference,reference,final,bytes,ref,bytes,ref,reference,to,bytes,ref,if,bytes,ref,offset,0,bytes,ref,length,bytes,ref,bytes,length,return,bytes,ref,bytes,return,bytes,ref,deep,copy,of,bytes,ref,bytes
BytesReference -> public static byte[] toBytes(BytesReference reference);1544304278;Returns a compact array from the given BytesReference. The returned array won't be copied unless necessary. If you need_to modify the returned array use {@code BytesRef.deepCopyOf(reference.toBytesRef()} instead;public static byte[] toBytes(BytesReference reference) {_        final BytesRef bytesRef = reference.toBytesRef()__        if (bytesRef.offset == 0 && bytesRef.length == bytesRef.bytes.length) {_            return bytesRef.bytes__        }_        return BytesRef.deepCopyOf(bytesRef).bytes__    };returns,a,compact,array,from,the,given,bytes,reference,the,returned,array,won,t,be,copied,unless,necessary,if,you,need,to,modify,the,returned,array,use,code,bytes,ref,deep,copy,of,reference,to,bytes,ref,instead;public,static,byte,to,bytes,bytes,reference,reference,final,bytes,ref,bytes,ref,reference,to,bytes,ref,if,bytes,ref,offset,0,bytes,ref,length,bytes,ref,bytes,length,return,bytes,ref,bytes,return,bytes,ref,deep,copy,of,bytes,ref,bytes
BytesReference -> public StreamInput streamInput() throws IOException;1524684173;A stream input of the bytes.;public StreamInput streamInput() throws IOException {_        return new MarkSupportingStreamInputWrapper(this)__    };a,stream,input,of,the,bytes;public,stream,input,stream,input,throws,ioexception,return,new,mark,supporting,stream,input,wrapper,this
BytesReference -> public StreamInput streamInput() throws IOException;1525334055;A stream input of the bytes.;public StreamInput streamInput() throws IOException {_        return new MarkSupportingStreamInputWrapper(this)__    };a,stream,input,of,the,bytes;public,stream,input,stream,input,throws,ioexception,return,new,mark,supporting,stream,input,wrapper,this
BytesReference -> public StreamInput streamInput() throws IOException;1540912197;A stream input of the bytes.;public StreamInput streamInput() throws IOException {_        return new MarkSupportingStreamInputWrapper(this)__    };a,stream,input,of,the,bytes;public,stream,input,stream,input,throws,ioexception,return,new,mark,supporting,stream,input,wrapper,this
BytesReference -> public StreamInput streamInput() throws IOException;1544304278;A stream input of the bytes.;public StreamInput streamInput() throws IOException {_        return new MarkSupportingStreamInputWrapper(this)__    };a,stream,input,of,the,bytes;public,stream,input,stream,input,throws,ioexception,return,new,mark,supporting,stream,input,wrapper,this
BytesReference -> public static BytesReference bytes(XContentBuilder xContentBuilder);1524684173;Convert an {@link XContentBuilder} into a BytesReference. This method closes the builder,_so no further fields may be added.;public static BytesReference bytes(XContentBuilder xContentBuilder) {_        xContentBuilder.close()__        OutputStream stream = xContentBuilder.getOutputStream()__        if (stream instanceof ByteArrayOutputStream) {_            return new BytesArray(((ByteArrayOutputStream) stream).toByteArray())__        } else {_            return ((BytesStream) stream).bytes()__        }_    };convert,an,link,xcontent,builder,into,a,bytes,reference,this,method,closes,the,builder,so,no,further,fields,may,be,added;public,static,bytes,reference,bytes,xcontent,builder,x,content,builder,x,content,builder,close,output,stream,stream,x,content,builder,get,output,stream,if,stream,instanceof,byte,array,output,stream,return,new,bytes,array,byte,array,output,stream,stream,to,byte,array,else,return,bytes,stream,stream,bytes
BytesReference -> public static BytesReference bytes(XContentBuilder xContentBuilder);1525334055;Convert an {@link XContentBuilder} into a BytesReference. This method closes the builder,_so no further fields may be added.;public static BytesReference bytes(XContentBuilder xContentBuilder) {_        xContentBuilder.close()__        OutputStream stream = xContentBuilder.getOutputStream()__        if (stream instanceof ByteArrayOutputStream) {_            return new BytesArray(((ByteArrayOutputStream) stream).toByteArray())__        } else {_            return ((BytesStream) stream).bytes()__        }_    };convert,an,link,xcontent,builder,into,a,bytes,reference,this,method,closes,the,builder,so,no,further,fields,may,be,added;public,static,bytes,reference,bytes,xcontent,builder,x,content,builder,x,content,builder,close,output,stream,stream,x,content,builder,get,output,stream,if,stream,instanceof,byte,array,output,stream,return,new,bytes,array,byte,array,output,stream,stream,to,byte,array,else,return,bytes,stream,stream,bytes
BytesReference -> public static BytesReference bytes(XContentBuilder xContentBuilder);1540912197;Convert an {@link XContentBuilder} into a BytesReference. This method closes the builder,_so no further fields may be added.;public static BytesReference bytes(XContentBuilder xContentBuilder) {_        xContentBuilder.close()__        OutputStream stream = xContentBuilder.getOutputStream()__        if (stream instanceof ByteArrayOutputStream) {_            return new BytesArray(((ByteArrayOutputStream) stream).toByteArray())__        } else {_            return ((BytesStream) stream).bytes()__        }_    };convert,an,link,xcontent,builder,into,a,bytes,reference,this,method,closes,the,builder,so,no,further,fields,may,be,added;public,static,bytes,reference,bytes,xcontent,builder,x,content,builder,x,content,builder,close,output,stream,stream,x,content,builder,get,output,stream,if,stream,instanceof,byte,array,output,stream,return,new,bytes,array,byte,array,output,stream,stream,to,byte,array,else,return,bytes,stream,stream,bytes
BytesReference -> public static BytesReference bytes(XContentBuilder xContentBuilder);1544304278;Convert an {@link XContentBuilder} into a BytesReference. This method closes the builder,_so no further fields may be added.;public static BytesReference bytes(XContentBuilder xContentBuilder) {_        xContentBuilder.close()__        OutputStream stream = xContentBuilder.getOutputStream()__        if (stream instanceof ByteArrayOutputStream) {_            return new BytesArray(((ByteArrayOutputStream) stream).toByteArray())__        } else {_            return ((BytesStream) stream).bytes()__        }_    };convert,an,link,xcontent,builder,into,a,bytes,reference,this,method,closes,the,builder,so,no,further,fields,may,be,added;public,static,bytes,reference,bytes,xcontent,builder,x,content,builder,x,content,builder,close,output,stream,stream,x,content,builder,get,output,stream,if,stream,instanceof,byte,array,output,stream,return,new,bytes,array,byte,array,output,stream,stream,to,byte,array,else,return,bytes,stream,stream,bytes
BytesReference -> private static int compareIterators(final BytesReference a, final BytesReference b, final ToIntBiFunction<BytesRef, BytesRef> f);1524684173;Compares the two references using the given int function.;private static int compareIterators(final BytesReference a, final BytesReference b, final ToIntBiFunction<BytesRef, BytesRef> f) {_        try {_            _            final long lengthToCompare = Math.min(a.length(), b.length())__            final BytesRefIterator aIter = a.iterator()__            final BytesRefIterator bIter = b.iterator()__            BytesRef aRef = aIter.next()__            BytesRef bRef = bIter.next()__            if (aRef != null && bRef != null) { _                aRef = aRef.clone()_ _                bRef = bRef.clone()__                if (aRef.length == a.length() && bRef.length == b.length()) { _                    return f.applyAsInt(aRef, bRef)__                } else {_                    for (int i = 0_ i < lengthToCompare_) {_                        if (aRef.length == 0) {_                            aRef = aIter.next().clone()_ _                        }_                        if (bRef.length == 0) {_                            bRef = bIter.next().clone()_ _                        }_                        final int aLength = aRef.length__                        final int bLength = bRef.length__                        final int length = Math.min(aLength, bLength)_ _                        aRef.length = bRef.length = length__                        _                        int diff = f.applyAsInt(aRef, bRef)__                        aRef.length = aLength__                        bRef.length = bLength___                        if (diff != 0) {_                            return diff__                        }_                        advance(aRef, length)__                        advance(bRef, length)__                        i += length__                    }_                }_            }_            _            return a.length() - b.length()__        } catch (IOException ex) {_            throw new AssertionError("can not happen", ex)__        }_    };compares,the,two,references,using,the,given,int,function;private,static,int,compare,iterators,final,bytes,reference,a,final,bytes,reference,b,final,to,int,bi,function,bytes,ref,bytes,ref,f,try,final,long,length,to,compare,math,min,a,length,b,length,final,bytes,ref,iterator,a,iter,a,iterator,final,bytes,ref,iterator,b,iter,b,iterator,bytes,ref,a,ref,a,iter,next,bytes,ref,b,ref,b,iter,next,if,a,ref,null,b,ref,null,a,ref,a,ref,clone,b,ref,b,ref,clone,if,a,ref,length,a,length,b,ref,length,b,length,return,f,apply,as,int,a,ref,b,ref,else,for,int,i,0,i,length,to,compare,if,a,ref,length,0,a,ref,a,iter,next,clone,if,b,ref,length,0,b,ref,b,iter,next,clone,final,int,a,length,a,ref,length,final,int,b,length,b,ref,length,final,int,length,math,min,a,length,b,length,a,ref,length,b,ref,length,length,int,diff,f,apply,as,int,a,ref,b,ref,a,ref,length,a,length,b,ref,length,b,length,if,diff,0,return,diff,advance,a,ref,length,advance,b,ref,length,i,length,return,a,length,b,length,catch,ioexception,ex,throw,new,assertion,error,can,not,happen,ex
BytesReference -> private static int compareIterators(final BytesReference a, final BytesReference b, final ToIntBiFunction<BytesRef, BytesRef> f);1525334055;Compares the two references using the given int function.;private static int compareIterators(final BytesReference a, final BytesReference b, final ToIntBiFunction<BytesRef, BytesRef> f) {_        try {_            _            final long lengthToCompare = Math.min(a.length(), b.length())__            final BytesRefIterator aIter = a.iterator()__            final BytesRefIterator bIter = b.iterator()__            BytesRef aRef = aIter.next()__            BytesRef bRef = bIter.next()__            if (aRef != null && bRef != null) { _                aRef = aRef.clone()_ _                bRef = bRef.clone()__                if (aRef.length == a.length() && bRef.length == b.length()) { _                    return f.applyAsInt(aRef, bRef)__                } else {_                    for (int i = 0_ i < lengthToCompare_) {_                        if (aRef.length == 0) {_                            aRef = aIter.next().clone()_ _                        }_                        if (bRef.length == 0) {_                            bRef = bIter.next().clone()_ _                        }_                        final int aLength = aRef.length__                        final int bLength = bRef.length__                        final int length = Math.min(aLength, bLength)_ _                        aRef.length = bRef.length = length__                        _                        int diff = f.applyAsInt(aRef, bRef)__                        aRef.length = aLength__                        bRef.length = bLength___                        if (diff != 0) {_                            return diff__                        }_                        advance(aRef, length)__                        advance(bRef, length)__                        i += length__                    }_                }_            }_            _            return a.length() - b.length()__        } catch (IOException ex) {_            throw new AssertionError("can not happen", ex)__        }_    };compares,the,two,references,using,the,given,int,function;private,static,int,compare,iterators,final,bytes,reference,a,final,bytes,reference,b,final,to,int,bi,function,bytes,ref,bytes,ref,f,try,final,long,length,to,compare,math,min,a,length,b,length,final,bytes,ref,iterator,a,iter,a,iterator,final,bytes,ref,iterator,b,iter,b,iterator,bytes,ref,a,ref,a,iter,next,bytes,ref,b,ref,b,iter,next,if,a,ref,null,b,ref,null,a,ref,a,ref,clone,b,ref,b,ref,clone,if,a,ref,length,a,length,b,ref,length,b,length,return,f,apply,as,int,a,ref,b,ref,else,for,int,i,0,i,length,to,compare,if,a,ref,length,0,a,ref,a,iter,next,clone,if,b,ref,length,0,b,ref,b,iter,next,clone,final,int,a,length,a,ref,length,final,int,b,length,b,ref,length,final,int,length,math,min,a,length,b,length,a,ref,length,b,ref,length,length,int,diff,f,apply,as,int,a,ref,b,ref,a,ref,length,a,length,b,ref,length,b,length,if,diff,0,return,diff,advance,a,ref,length,advance,b,ref,length,i,length,return,a,length,b,length,catch,ioexception,ex,throw,new,assertion,error,can,not,happen,ex
BytesReference -> private static int compareIterators(final BytesReference a, final BytesReference b, final ToIntBiFunction<BytesRef, BytesRef> f);1540912197;Compares the two references using the given int function.;private static int compareIterators(final BytesReference a, final BytesReference b, final ToIntBiFunction<BytesRef, BytesRef> f) {_        try {_            _            final long lengthToCompare = Math.min(a.length(), b.length())__            final BytesRefIterator aIter = a.iterator()__            final BytesRefIterator bIter = b.iterator()__            BytesRef aRef = aIter.next()__            BytesRef bRef = bIter.next()__            if (aRef != null && bRef != null) { _                aRef = aRef.clone()_ _                bRef = bRef.clone()__                if (aRef.length == a.length() && bRef.length == b.length()) { _                    return f.applyAsInt(aRef, bRef)__                } else {_                    for (int i = 0_ i < lengthToCompare_) {_                        if (aRef.length == 0) {_                            aRef = aIter.next().clone()_ _                        }_                        if (bRef.length == 0) {_                            bRef = bIter.next().clone()_ _                        }_                        final int aLength = aRef.length__                        final int bLength = bRef.length__                        final int length = Math.min(aLength, bLength)_ _                        aRef.length = bRef.length = length__                        _                        int diff = f.applyAsInt(aRef, bRef)__                        aRef.length = aLength__                        bRef.length = bLength___                        if (diff != 0) {_                            return diff__                        }_                        advance(aRef, length)__                        advance(bRef, length)__                        i += length__                    }_                }_            }_            _            return a.length() - b.length()__        } catch (IOException ex) {_            throw new AssertionError("can not happen", ex)__        }_    };compares,the,two,references,using,the,given,int,function;private,static,int,compare,iterators,final,bytes,reference,a,final,bytes,reference,b,final,to,int,bi,function,bytes,ref,bytes,ref,f,try,final,long,length,to,compare,math,min,a,length,b,length,final,bytes,ref,iterator,a,iter,a,iterator,final,bytes,ref,iterator,b,iter,b,iterator,bytes,ref,a,ref,a,iter,next,bytes,ref,b,ref,b,iter,next,if,a,ref,null,b,ref,null,a,ref,a,ref,clone,b,ref,b,ref,clone,if,a,ref,length,a,length,b,ref,length,b,length,return,f,apply,as,int,a,ref,b,ref,else,for,int,i,0,i,length,to,compare,if,a,ref,length,0,a,ref,a,iter,next,clone,if,b,ref,length,0,b,ref,b,iter,next,clone,final,int,a,length,a,ref,length,final,int,b,length,b,ref,length,final,int,length,math,min,a,length,b,length,a,ref,length,b,ref,length,length,int,diff,f,apply,as,int,a,ref,b,ref,a,ref,length,a,length,b,ref,length,b,length,if,diff,0,return,diff,advance,a,ref,length,advance,b,ref,length,i,length,return,a,length,b,length,catch,ioexception,ex,throw,new,assertion,error,can,not,happen,ex
BytesReference -> private static int compareIterators(final BytesReference a, final BytesReference b, final ToIntBiFunction<BytesRef, BytesRef> f);1544304278;Compares the two references using the given int function.;private static int compareIterators(final BytesReference a, final BytesReference b, final ToIntBiFunction<BytesRef, BytesRef> f) {_        try {_            _            final long lengthToCompare = Math.min(a.length(), b.length())__            final BytesRefIterator aIter = a.iterator()__            final BytesRefIterator bIter = b.iterator()__            BytesRef aRef = aIter.next()__            BytesRef bRef = bIter.next()__            if (aRef != null && bRef != null) { _                aRef = aRef.clone()_ _                bRef = bRef.clone()__                if (aRef.length == a.length() && bRef.length == b.length()) { _                    return f.applyAsInt(aRef, bRef)__                } else {_                    for (int i = 0_ i < lengthToCompare_) {_                        if (aRef.length == 0) {_                            aRef = aIter.next().clone()_ _                        }_                        if (bRef.length == 0) {_                            bRef = bIter.next().clone()_ _                        }_                        final int aLength = aRef.length__                        final int bLength = bRef.length__                        final int length = Math.min(aLength, bLength)_ _                        aRef.length = bRef.length = length__                        _                        int diff = f.applyAsInt(aRef, bRef)__                        aRef.length = aLength__                        bRef.length = bLength___                        if (diff != 0) {_                            return diff__                        }_                        advance(aRef, length)__                        advance(bRef, length)__                        i += length__                    }_                }_            }_            _            return a.length() - b.length()__        } catch (IOException ex) {_            throw new AssertionError("can not happen", ex)__        }_    };compares,the,two,references,using,the,given,int,function;private,static,int,compare,iterators,final,bytes,reference,a,final,bytes,reference,b,final,to,int,bi,function,bytes,ref,bytes,ref,f,try,final,long,length,to,compare,math,min,a,length,b,length,final,bytes,ref,iterator,a,iter,a,iterator,final,bytes,ref,iterator,b,iter,b,iterator,bytes,ref,a,ref,a,iter,next,bytes,ref,b,ref,b,iter,next,if,a,ref,null,b,ref,null,a,ref,a,ref,clone,b,ref,b,ref,clone,if,a,ref,length,a,length,b,ref,length,b,length,return,f,apply,as,int,a,ref,b,ref,else,for,int,i,0,i,length,to,compare,if,a,ref,length,0,a,ref,a,iter,next,clone,if,b,ref,length,0,b,ref,b,iter,next,clone,final,int,a,length,a,ref,length,final,int,b,length,b,ref,length,final,int,length,math,min,a,length,b,length,a,ref,length,b,ref,length,length,int,diff,f,apply,as,int,a,ref,b,ref,a,ref,length,a,length,b,ref,length,b,length,if,diff,0,return,diff,advance,a,ref,length,advance,b,ref,length,i,length,return,a,length,b,length,catch,ioexception,ex,throw,new,assertion,error,can,not,happen,ex
