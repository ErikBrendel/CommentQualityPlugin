commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public MapperService mapperService() {     return this.mapperService. }
false;public;1;3;;public IndexFieldData<?> getForField(MappedFieldType fieldType) {     return fieldDataLookup.apply(fieldType). }
false;public;1;3;;public void setDocument(int docId) {     this.docId = docId. }
false;public;0;4;;@Override public ScriptDocValues<?> run() {     return fieldDataLookup.apply(fieldType).load(reader).getScriptValues(). }
false;public;1;32;;@Override public ScriptDocValues<?> get(Object key) {     // deprecate _type     if ("_type".equals(key)) {         DEPRECATION_LOGGER.deprecatedAndMaybeLog(TYPES_DEPRECATION_KEY, TYPES_DEPRECATION_MESSAGE).     }     // assume its a string...     String fieldName = key.toString().     ScriptDocValues<?> scriptValues = localCacheFieldData.get(fieldName).     if (scriptValues == null) {         final MappedFieldType fieldType = mapperService.fullName(fieldName).         if (fieldType == null) {             throw new IllegalArgumentException("No field found for [" + fieldName + "] in mapping with types " + Arrays.toString(types)).         }         // load fielddata on behalf of the script: otherwise it would need additional permissions         // to deal with pagedbytes/ramusagestimator/etc         scriptValues = AccessController.doPrivileged(new PrivilegedAction<ScriptDocValues<?>>() {              @Override             public ScriptDocValues<?> run() {                 return fieldDataLookup.apply(fieldType).load(reader).getScriptValues().             }         }).         localCacheFieldData.put(fieldName, scriptValues).     }     try {         scriptValues.setNextDocId(docId).     } catch (IOException e) {         throw ExceptionsHelper.convertToElastic(e).     }     return scriptValues. }
false;public;1;13;;@Override public boolean containsKey(Object key) {     // assume its a string...     String fieldName = key.toString().     ScriptDocValues<?> scriptValues = localCacheFieldData.get(fieldName).     if (scriptValues == null) {         MappedFieldType fieldType = mapperService.fullName(fieldName).         if (fieldType == null) {             return false.         }     }     return true. }
false;public;0;4;;@Override public int size() {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public boolean isEmpty() {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public boolean containsValue(Object value) {     throw new UnsupportedOperationException(). }
false;public;2;4;;@Override public ScriptDocValues<?> put(String key, ScriptDocValues<?> value) {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public ScriptDocValues<?> remove(Object key) {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public void putAll(Map<? extends String, ? extends ScriptDocValues<?>> m) {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public void clear() {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public Set<String> keySet() {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public Collection<ScriptDocValues<?>> values() {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public Set<Map.Entry<String, ScriptDocValues<?>>> entrySet() {     throw new UnsupportedOperationException(). }
