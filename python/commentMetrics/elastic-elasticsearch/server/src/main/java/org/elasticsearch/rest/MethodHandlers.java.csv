commented;modifiers;parameterAmount;loc;comment;code
true;public;2;7;/**  * Add an additional method and handler for an existing path. Note that {@code MethodHandlers}  * does not allow replacing the handler for an already existing method.  */ ;/**  * Add an additional method and handler for an existing path. Note that {@code MethodHandlers}  * does not allow replacing the handler for an already existing method.  */ public MethodHandlers addMethod(RestRequest.Method method, RestHandler handler) {     RestHandler existing = methodHandlers.putIfAbsent(method, handler).     if (existing != null) {         throw new IllegalArgumentException("Cannot replace existing handler for [" + path + "] for method: " + method).     }     return this. }
true;public;2;6;/**  * Add a handler for an additional array of methods. Note that {@code MethodHandlers}  * does not allow replacing the handler for an already existing method.  */ ;/**  * Add a handler for an additional array of methods. Note that {@code MethodHandlers}  * does not allow replacing the handler for an already existing method.  */ public MethodHandlers addMethods(RestHandler handler, RestRequest.Method... methods) {     for (RestRequest.Method method : methods) {         addMethod(method, handler).     }     return this. }
true;public;1;3;/**  * Return an Optional-wrapped handler for a method, or an empty optional if  * there is no handler.  */ ;/**  * Return an Optional-wrapped handler for a method, or an empty optional if  * there is no handler.  */ public Optional<RestHandler> getHandler(RestRequest.Method method) {     return Optional.ofNullable(methodHandlers.get(method)). }
true;public;0;3;/**  * Return a set of all valid HTTP methods for the particular path  */ ;/**  * Return a set of all valid HTTP methods for the particular path  */ public Set<RestRequest.Method> getValidMethods() {     return methodHandlers.keySet(). }
