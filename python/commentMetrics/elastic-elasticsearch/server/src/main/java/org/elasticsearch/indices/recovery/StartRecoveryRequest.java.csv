commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public long recoveryId() {     return this.recoveryId. }
false;public;0;3;;public ShardId shardId() {     return shardId. }
false;public;0;3;;public String targetAllocationId() {     return targetAllocationId. }
false;public;0;3;;public DiscoveryNode sourceNode() {     return sourceNode. }
false;public;0;3;;public DiscoveryNode targetNode() {     return targetNode. }
false;public;0;3;;public boolean isPrimaryRelocation() {     return primaryRelocation. }
false;public;0;3;;public Store.MetadataSnapshot metadataSnapshot() {     return metadataSnapshot. }
false;public;0;3;;public long startingSeqNo() {     return startingSeqNo. }
false;public;1;16;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     recoveryId = in.readLong().     shardId = ShardId.readShardId(in).     targetAllocationId = in.readString().     sourceNode = new DiscoveryNode(in).     targetNode = new DiscoveryNode(in).     metadataSnapshot = new Store.MetadataSnapshot(in).     primaryRelocation = in.readBoolean().     if (in.getVersion().onOrAfter(Version.V_6_0_0_alpha1)) {         startingSeqNo = in.readLong().     } else {         startingSeqNo = SequenceNumbers.UNASSIGNED_SEQ_NO.     } }
false;public;1;14;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeLong(recoveryId).     shardId.writeTo(out).     out.writeString(targetAllocationId).     sourceNode.writeTo(out).     targetNode.writeTo(out).     metadataSnapshot.writeTo(out).     out.writeBoolean(primaryRelocation).     if (out.getVersion().onOrAfter(Version.V_6_0_0_alpha1)) {         out.writeLong(startingSeqNo).     } }
