# id;timestamp;commentText;codeText;commentWords;codeWords
IndexingMemoryController -> protected void writeIndexingBufferAsync(IndexShard shard);1524684173;ask this shard to refresh, in the background, to free up heap;protected void writeIndexingBufferAsync(IndexShard shard) {_        threadPool.executor(ThreadPool.Names.REFRESH).execute(new AbstractRunnable() {_            @Override_            public void doRun() {_                shard.writeIndexingBuffer()__            }__            @Override_            public void onFailure(Exception e) {_                logger.warn(() -> new ParameterizedMessage("failed to write indexing buffer for shard [{}]_ ignoring", shard.shardId()), e)__            }_        })__    };ask,this,shard,to,refresh,in,the,background,to,free,up,heap;protected,void,write,indexing,buffer,async,index,shard,shard,thread,pool,executor,thread,pool,names,refresh,execute,new,abstract,runnable,override,public,void,do,run,shard,write,indexing,buffer,override,public,void,on,failure,exception,e,logger,warn,new,parameterized,message,failed,to,write,indexing,buffer,for,shard,ignoring,shard,shard,id,e
IndexingMemoryController -> protected void writeIndexingBufferAsync(IndexShard shard);1525162917;ask this shard to refresh, in the background, to free up heap;protected void writeIndexingBufferAsync(IndexShard shard) {_        threadPool.executor(ThreadPool.Names.REFRESH).execute(new AbstractRunnable() {_            @Override_            public void doRun() {_                shard.writeIndexingBuffer()__            }__            @Override_            public void onFailure(Exception e) {_                logger.warn(() -> new ParameterizedMessage("failed to write indexing buffer for shard [{}]_ ignoring", shard.shardId()), e)__            }_        })__    };ask,this,shard,to,refresh,in,the,background,to,free,up,heap;protected,void,write,indexing,buffer,async,index,shard,shard,thread,pool,executor,thread,pool,names,refresh,execute,new,abstract,runnable,override,public,void,do,run,shard,write,indexing,buffer,override,public,void,on,failure,exception,e,logger,warn,new,parameterized,message,failed,to,write,indexing,buffer,for,shard,ignoring,shard,shard,id,e
IndexingMemoryController -> protected void writeIndexingBufferAsync(IndexShard shard);1541008027;ask this shard to refresh, in the background, to free up heap;protected void writeIndexingBufferAsync(IndexShard shard) {_        threadPool.executor(ThreadPool.Names.REFRESH).execute(new AbstractRunnable() {_            @Override_            public void doRun() {_                shard.writeIndexingBuffer()__            }__            @Override_            public void onFailure(Exception e) {_                logger.warn(() -> new ParameterizedMessage("failed to write indexing buffer for shard [{}]_ ignoring", shard.shardId()), e)__            }_        })__    };ask,this,shard,to,refresh,in,the,background,to,free,up,heap;protected,void,write,indexing,buffer,async,index,shard,shard,thread,pool,executor,thread,pool,names,refresh,execute,new,abstract,runnable,override,public,void,do,run,shard,write,indexing,buffer,override,public,void,on,failure,exception,e,logger,warn,new,parameterized,message,failed,to,write,indexing,buffer,for,shard,ignoring,shard,shard,id,e
IndexingMemoryController -> protected void writeIndexingBufferAsync(IndexShard shard);1541092382;ask this shard to refresh, in the background, to free up heap;protected void writeIndexingBufferAsync(IndexShard shard) {_        threadPool.executor(ThreadPool.Names.REFRESH).execute(new AbstractRunnable() {_            @Override_            public void doRun() {_                shard.writeIndexingBuffer()__            }__            @Override_            public void onFailure(Exception e) {_                logger.warn(() -> new ParameterizedMessage("failed to write indexing buffer for shard [{}]_ ignoring", shard.shardId()), e)__            }_        })__    };ask,this,shard,to,refresh,in,the,background,to,free,up,heap;protected,void,write,indexing,buffer,async,index,shard,shard,thread,pool,executor,thread,pool,names,refresh,execute,new,abstract,runnable,override,public,void,do,run,shard,write,indexing,buffer,override,public,void,on,failure,exception,e,logger,warn,new,parameterized,message,failed,to,write,indexing,buffer,for,shard,ignoring,shard,shard,id,e
IndexingMemoryController -> protected void writeIndexingBufferAsync(IndexShard shard);1542402632;ask this shard to refresh, in the background, to free up heap;protected void writeIndexingBufferAsync(IndexShard shard) {_        threadPool.executor(ThreadPool.Names.REFRESH).execute(new AbstractRunnable() {_            @Override_            public void doRun() {_                shard.writeIndexingBuffer()__            }__            @Override_            public void onFailure(Exception e) {_                logger.warn(() -> new ParameterizedMessage("failed to write indexing buffer for shard [{}]_ ignoring", shard.shardId()), e)__            }_        })__    };ask,this,shard,to,refresh,in,the,background,to,free,up,heap;protected,void,write,indexing,buffer,async,index,shard,shard,thread,pool,executor,thread,pool,names,refresh,execute,new,abstract,runnable,override,public,void,do,run,shard,write,indexing,buffer,override,public,void,on,failure,exception,e,logger,warn,new,parameterized,message,failed,to,write,indexing,buffer,for,shard,ignoring,shard,shard,id,e
IndexingMemoryController -> protected void writeIndexingBufferAsync(IndexShard shard);1542609384;ask this shard to refresh, in the background, to free up heap;protected void writeIndexingBufferAsync(IndexShard shard) {_        threadPool.executor(ThreadPool.Names.REFRESH).execute(new AbstractRunnable() {_            @Override_            public void doRun() {_                shard.writeIndexingBuffer()__            }__            @Override_            public void onFailure(Exception e) {_                logger.warn(() -> new ParameterizedMessage("failed to write indexing buffer for shard [{}]_ ignoring", shard.shardId()), e)__            }_        })__    };ask,this,shard,to,refresh,in,the,background,to,free,up,heap;protected,void,write,indexing,buffer,async,index,shard,shard,thread,pool,executor,thread,pool,names,refresh,execute,new,abstract,runnable,override,public,void,do,run,shard,write,indexing,buffer,override,public,void,on,failure,exception,e,logger,warn,new,parameterized,message,failed,to,write,indexing,buffer,for,shard,ignoring,shard,shard,id,e
IndexingMemoryController -> ByteSizeValue indexingBufferSize();1524684173;returns the current budget for the total amount of indexing buffers of_active shards on this node;ByteSizeValue indexingBufferSize() {_        return indexingBuffer__    };returns,the,current,budget,for,the,total,amount,of,indexing,buffers,of,active,shards,on,this,node;byte,size,value,indexing,buffer,size,return,indexing,buffer
IndexingMemoryController -> ByteSizeValue indexingBufferSize();1525162917;returns the current budget for the total amount of indexing buffers of_active shards on this node;ByteSizeValue indexingBufferSize() {_        return indexingBuffer__    };returns,the,current,budget,for,the,total,amount,of,indexing,buffers,of,active,shards,on,this,node;byte,size,value,indexing,buffer,size,return,indexing,buffer
IndexingMemoryController -> ByteSizeValue indexingBufferSize();1541008027;returns the current budget for the total amount of indexing buffers of_active shards on this node;ByteSizeValue indexingBufferSize() {_        return indexingBuffer__    };returns,the,current,budget,for,the,total,amount,of,indexing,buffers,of,active,shards,on,this,node;byte,size,value,indexing,buffer,size,return,indexing,buffer
IndexingMemoryController -> ByteSizeValue indexingBufferSize();1541092382;returns the current budget for the total amount of indexing buffers of_active shards on this node;ByteSizeValue indexingBufferSize() {_        return indexingBuffer__    };returns,the,current,budget,for,the,total,amount,of,indexing,buffers,of,active,shards,on,this,node;byte,size,value,indexing,buffer,size,return,indexing,buffer
IndexingMemoryController -> ByteSizeValue indexingBufferSize();1542402632;returns the current budget for the total amount of indexing buffers of_active shards on this node;ByteSizeValue indexingBufferSize() {_        return indexingBuffer__    };returns,the,current,budget,for,the,total,amount,of,indexing,buffers,of,active,shards,on,this,node;byte,size,value,indexing,buffer,size,return,indexing,buffer
IndexingMemoryController -> ByteSizeValue indexingBufferSize();1542609384;returns the current budget for the total amount of indexing buffers of_active shards on this node;ByteSizeValue indexingBufferSize() {_        return indexingBuffer__    };returns,the,current,budget,for,the,total,amount,of,indexing,buffers,of,active,shards,on,this,node;byte,size,value,indexing,buffer,size,return,indexing,buffer
IndexingMemoryController -> protected void checkIdle(IndexShard shard, long inactiveTimeNS);1524684173;ask this shard to check now whether it is inactive, and reduces its indexing buffer if so.;protected void checkIdle(IndexShard shard, long inactiveTimeNS) {_        try {_            shard.checkIdle(inactiveTimeNS)__        } catch (AlreadyClosedException e) {_            logger.trace(() -> new ParameterizedMessage("ignore exception while checking if shard {} is inactive", shard.shardId()), e)__        }_    };ask,this,shard,to,check,now,whether,it,is,inactive,and,reduces,its,indexing,buffer,if,so;protected,void,check,idle,index,shard,shard,long,inactive,time,ns,try,shard,check,idle,inactive,time,ns,catch,already,closed,exception,e,logger,trace,new,parameterized,message,ignore,exception,while,checking,if,shard,is,inactive,shard,shard,id,e
IndexingMemoryController -> protected void checkIdle(IndexShard shard, long inactiveTimeNS);1525162917;ask this shard to check now whether it is inactive, and reduces its indexing buffer if so.;protected void checkIdle(IndexShard shard, long inactiveTimeNS) {_        try {_            shard.checkIdle(inactiveTimeNS)__        } catch (AlreadyClosedException e) {_            logger.trace(() -> new ParameterizedMessage("ignore exception while checking if shard {} is inactive", shard.shardId()), e)__        }_    };ask,this,shard,to,check,now,whether,it,is,inactive,and,reduces,its,indexing,buffer,if,so;protected,void,check,idle,index,shard,shard,long,inactive,time,ns,try,shard,check,idle,inactive,time,ns,catch,already,closed,exception,e,logger,trace,new,parameterized,message,ignore,exception,while,checking,if,shard,is,inactive,shard,shard,id,e
IndexingMemoryController -> protected void checkIdle(IndexShard shard, long inactiveTimeNS);1541008027;ask this shard to check now whether it is inactive, and reduces its indexing buffer if so.;protected void checkIdle(IndexShard shard, long inactiveTimeNS) {_        try {_            shard.checkIdle(inactiveTimeNS)__        } catch (AlreadyClosedException e) {_            logger.trace(() -> new ParameterizedMessage("ignore exception while checking if shard {} is inactive", shard.shardId()), e)__        }_    };ask,this,shard,to,check,now,whether,it,is,inactive,and,reduces,its,indexing,buffer,if,so;protected,void,check,idle,index,shard,shard,long,inactive,time,ns,try,shard,check,idle,inactive,time,ns,catch,already,closed,exception,e,logger,trace,new,parameterized,message,ignore,exception,while,checking,if,shard,is,inactive,shard,shard,id,e
IndexingMemoryController -> protected void checkIdle(IndexShard shard, long inactiveTimeNS);1541092382;ask this shard to check now whether it is inactive, and reduces its indexing buffer if so.;protected void checkIdle(IndexShard shard, long inactiveTimeNS) {_        try {_            shard.checkIdle(inactiveTimeNS)__        } catch (AlreadyClosedException e) {_            logger.trace(() -> new ParameterizedMessage("ignore exception while checking if shard {} is inactive", shard.shardId()), e)__        }_    };ask,this,shard,to,check,now,whether,it,is,inactive,and,reduces,its,indexing,buffer,if,so;protected,void,check,idle,index,shard,shard,long,inactive,time,ns,try,shard,check,idle,inactive,time,ns,catch,already,closed,exception,e,logger,trace,new,parameterized,message,ignore,exception,while,checking,if,shard,is,inactive,shard,shard,id,e
IndexingMemoryController -> protected void checkIdle(IndexShard shard, long inactiveTimeNS);1542402632;ask this shard to check now whether it is inactive, and reduces its indexing buffer if so.;protected void checkIdle(IndexShard shard, long inactiveTimeNS) {_        try {_            shard.checkIdle(inactiveTimeNS)__        } catch (AlreadyClosedException e) {_            logger.trace(() -> new ParameterizedMessage("ignore exception while checking if shard {} is inactive", shard.shardId()), e)__        }_    };ask,this,shard,to,check,now,whether,it,is,inactive,and,reduces,its,indexing,buffer,if,so;protected,void,check,idle,index,shard,shard,long,inactive,time,ns,try,shard,check,idle,inactive,time,ns,catch,already,closed,exception,e,logger,trace,new,parameterized,message,ignore,exception,while,checking,if,shard,is,inactive,shard,shard,id,e
IndexingMemoryController -> protected void checkIdle(IndexShard shard, long inactiveTimeNS);1542609384;ask this shard to check now whether it is inactive, and reduces its indexing buffer if so.;protected void checkIdle(IndexShard shard, long inactiveTimeNS) {_        try {_            shard.checkIdle(inactiveTimeNS)__        } catch (AlreadyClosedException e) {_            logger.trace(() -> new ParameterizedMessage("ignore exception while checking if shard {} is inactive", shard.shardId()), e)__        }_    };ask,this,shard,to,check,now,whether,it,is,inactive,and,reduces,its,indexing,buffer,if,so;protected,void,check,idle,index,shard,shard,long,inactive,time,ns,try,shard,check,idle,inactive,time,ns,catch,already,closed,exception,e,logger,trace,new,parameterized,message,ignore,exception,while,checking,if,shard,is,inactive,shard,shard,id,e
IndexingMemoryController -> ShardsIndicesStatusChecker -> public void bytesWritten(int bytes);1524684173;Shard calls this on each indexing/delete op;public void bytesWritten(int bytes) {_            long totalBytes = bytesWrittenSinceCheck.addAndGet(bytes)__            assert totalBytes >= 0__            while (totalBytes > indexingBuffer.getBytes()/30) {__                if (runLock.tryLock()) {_                    try {_                        _                        totalBytes = bytesWrittenSinceCheck.get()__                        if (totalBytes > indexingBuffer.getBytes()/30) {_                            bytesWrittenSinceCheck.addAndGet(-totalBytes)__                            _                            _                            _                            _                            runUnlocked()__                        }_                    } finally {_                        runLock.unlock()__                    }__                    _                    totalBytes = bytesWrittenSinceCheck.get()__                } else {_                    _                    break__                }_            }_        };shard,calls,this,on,each,indexing,delete,op;public,void,bytes,written,int,bytes,long,total,bytes,bytes,written,since,check,add,and,get,bytes,assert,total,bytes,0,while,total,bytes,indexing,buffer,get,bytes,30,if,run,lock,try,lock,try,total,bytes,bytes,written,since,check,get,if,total,bytes,indexing,buffer,get,bytes,30,bytes,written,since,check,add,and,get,total,bytes,run,unlocked,finally,run,lock,unlock,total,bytes,bytes,written,since,check,get,else,break
IndexingMemoryController -> ShardsIndicesStatusChecker -> public void bytesWritten(int bytes);1525162917;Shard calls this on each indexing/delete op;public void bytesWritten(int bytes) {_            long totalBytes = bytesWrittenSinceCheck.addAndGet(bytes)__            assert totalBytes >= 0__            while (totalBytes > indexingBuffer.getBytes()/30) {__                if (runLock.tryLock()) {_                    try {_                        _                        totalBytes = bytesWrittenSinceCheck.get()__                        if (totalBytes > indexingBuffer.getBytes()/30) {_                            bytesWrittenSinceCheck.addAndGet(-totalBytes)__                            _                            _                            _                            _                            runUnlocked()__                        }_                    } finally {_                        runLock.unlock()__                    }__                    _                    totalBytes = bytesWrittenSinceCheck.get()__                } else {_                    _                    break__                }_            }_        };shard,calls,this,on,each,indexing,delete,op;public,void,bytes,written,int,bytes,long,total,bytes,bytes,written,since,check,add,and,get,bytes,assert,total,bytes,0,while,total,bytes,indexing,buffer,get,bytes,30,if,run,lock,try,lock,try,total,bytes,bytes,written,since,check,get,if,total,bytes,indexing,buffer,get,bytes,30,bytes,written,since,check,add,and,get,total,bytes,run,unlocked,finally,run,lock,unlock,total,bytes,bytes,written,since,check,get,else,break
IndexingMemoryController -> ShardsIndicesStatusChecker -> public void bytesWritten(int bytes);1541008027;Shard calls this on each indexing/delete op;public void bytesWritten(int bytes) {_            long totalBytes = bytesWrittenSinceCheck.addAndGet(bytes)__            assert totalBytes >= 0__            while (totalBytes > indexingBuffer.getBytes()/30) {__                if (runLock.tryLock()) {_                    try {_                        _                        totalBytes = bytesWrittenSinceCheck.get()__                        if (totalBytes > indexingBuffer.getBytes()/30) {_                            bytesWrittenSinceCheck.addAndGet(-totalBytes)__                            _                            _                            _                            _                            runUnlocked()__                        }_                    } finally {_                        runLock.unlock()__                    }__                    _                    totalBytes = bytesWrittenSinceCheck.get()__                } else {_                    _                    break__                }_            }_        };shard,calls,this,on,each,indexing,delete,op;public,void,bytes,written,int,bytes,long,total,bytes,bytes,written,since,check,add,and,get,bytes,assert,total,bytes,0,while,total,bytes,indexing,buffer,get,bytes,30,if,run,lock,try,lock,try,total,bytes,bytes,written,since,check,get,if,total,bytes,indexing,buffer,get,bytes,30,bytes,written,since,check,add,and,get,total,bytes,run,unlocked,finally,run,lock,unlock,total,bytes,bytes,written,since,check,get,else,break
IndexingMemoryController -> ShardsIndicesStatusChecker -> public void bytesWritten(int bytes);1541092382;Shard calls this on each indexing/delete op;public void bytesWritten(int bytes) {_            long totalBytes = bytesWrittenSinceCheck.addAndGet(bytes)__            assert totalBytes >= 0__            while (totalBytes > indexingBuffer.getBytes()/30) {__                if (runLock.tryLock()) {_                    try {_                        _                        totalBytes = bytesWrittenSinceCheck.get()__                        if (totalBytes > indexingBuffer.getBytes()/30) {_                            bytesWrittenSinceCheck.addAndGet(-totalBytes)__                            _                            _                            _                            _                            runUnlocked()__                        }_                    } finally {_                        runLock.unlock()__                    }__                    _                    totalBytes = bytesWrittenSinceCheck.get()__                } else {_                    _                    break__                }_            }_        };shard,calls,this,on,each,indexing,delete,op;public,void,bytes,written,int,bytes,long,total,bytes,bytes,written,since,check,add,and,get,bytes,assert,total,bytes,0,while,total,bytes,indexing,buffer,get,bytes,30,if,run,lock,try,lock,try,total,bytes,bytes,written,since,check,get,if,total,bytes,indexing,buffer,get,bytes,30,bytes,written,since,check,add,and,get,total,bytes,run,unlocked,finally,run,lock,unlock,total,bytes,bytes,written,since,check,get,else,break
IndexingMemoryController -> ShardsIndicesStatusChecker -> public void bytesWritten(int bytes);1542402632;Shard calls this on each indexing/delete op;public void bytesWritten(int bytes) {_            long totalBytes = bytesWrittenSinceCheck.addAndGet(bytes)__            assert totalBytes >= 0__            while (totalBytes > indexingBuffer.getBytes()/30) {__                if (runLock.tryLock()) {_                    try {_                        _                        totalBytes = bytesWrittenSinceCheck.get()__                        if (totalBytes > indexingBuffer.getBytes()/30) {_                            bytesWrittenSinceCheck.addAndGet(-totalBytes)__                            _                            _                            _                            _                            runUnlocked()__                        }_                    } finally {_                        runLock.unlock()__                    }__                    _                    totalBytes = bytesWrittenSinceCheck.get()__                } else {_                    _                    break__                }_            }_        };shard,calls,this,on,each,indexing,delete,op;public,void,bytes,written,int,bytes,long,total,bytes,bytes,written,since,check,add,and,get,bytes,assert,total,bytes,0,while,total,bytes,indexing,buffer,get,bytes,30,if,run,lock,try,lock,try,total,bytes,bytes,written,since,check,get,if,total,bytes,indexing,buffer,get,bytes,30,bytes,written,since,check,add,and,get,total,bytes,run,unlocked,finally,run,lock,unlock,total,bytes,bytes,written,since,check,get,else,break
IndexingMemoryController -> ShardsIndicesStatusChecker -> public void bytesWritten(int bytes);1542609384;Shard calls this on each indexing/delete op;public void bytesWritten(int bytes) {_            long totalBytes = bytesWrittenSinceCheck.addAndGet(bytes)__            assert totalBytes >= 0__            while (totalBytes > indexingBuffer.getBytes()/30) {__                if (runLock.tryLock()) {_                    try {_                        _                        totalBytes = bytesWrittenSinceCheck.get()__                        if (totalBytes > indexingBuffer.getBytes()/30) {_                            bytesWrittenSinceCheck.addAndGet(-totalBytes)__                            _                            _                            _                            _                            _                            runUnlocked()__                        }_                    } finally {_                        runLock.unlock()__                    }__                    _                    totalBytes = bytesWrittenSinceCheck.get()__                } else {_                    _                    break__                }_            }_        };shard,calls,this,on,each,indexing,delete,op;public,void,bytes,written,int,bytes,long,total,bytes,bytes,written,since,check,add,and,get,bytes,assert,total,bytes,0,while,total,bytes,indexing,buffer,get,bytes,30,if,run,lock,try,lock,try,total,bytes,bytes,written,since,check,get,if,total,bytes,indexing,buffer,get,bytes,30,bytes,written,since,check,add,and,get,total,bytes,run,unlocked,finally,run,lock,unlock,total,bytes,bytes,written,since,check,get,else,break
IndexingMemoryController -> protected long getIndexBufferRAMBytesUsed(IndexShard shard);1524684173;returns how much heap this shard is using for its indexing buffer;protected long getIndexBufferRAMBytesUsed(IndexShard shard) {_        return shard.getIndexBufferRAMBytesUsed()__    };returns,how,much,heap,this,shard,is,using,for,its,indexing,buffer;protected,long,get,index,buffer,rambytes,used,index,shard,shard,return,shard,get,index,buffer,rambytes,used
IndexingMemoryController -> protected long getIndexBufferRAMBytesUsed(IndexShard shard);1525162917;returns how much heap this shard is using for its indexing buffer;protected long getIndexBufferRAMBytesUsed(IndexShard shard) {_        return shard.getIndexBufferRAMBytesUsed()__    };returns,how,much,heap,this,shard,is,using,for,its,indexing,buffer;protected,long,get,index,buffer,rambytes,used,index,shard,shard,return,shard,get,index,buffer,rambytes,used
IndexingMemoryController -> protected long getIndexBufferRAMBytesUsed(IndexShard shard);1541008027;returns how much heap this shard is using for its indexing buffer;protected long getIndexBufferRAMBytesUsed(IndexShard shard) {_        return shard.getIndexBufferRAMBytesUsed()__    };returns,how,much,heap,this,shard,is,using,for,its,indexing,buffer;protected,long,get,index,buffer,rambytes,used,index,shard,shard,return,shard,get,index,buffer,rambytes,used
IndexingMemoryController -> protected long getIndexBufferRAMBytesUsed(IndexShard shard);1541092382;returns how much heap this shard is using for its indexing buffer;protected long getIndexBufferRAMBytesUsed(IndexShard shard) {_        return shard.getIndexBufferRAMBytesUsed()__    };returns,how,much,heap,this,shard,is,using,for,its,indexing,buffer;protected,long,get,index,buffer,rambytes,used,index,shard,shard,return,shard,get,index,buffer,rambytes,used
IndexingMemoryController -> protected long getIndexBufferRAMBytesUsed(IndexShard shard);1542402632;returns how much heap this shard is using for its indexing buffer;protected long getIndexBufferRAMBytesUsed(IndexShard shard) {_        return shard.getIndexBufferRAMBytesUsed()__    };returns,how,much,heap,this,shard,is,using,for,its,indexing,buffer;protected,long,get,index,buffer,rambytes,used,index,shard,shard,return,shard,get,index,buffer,rambytes,used
IndexingMemoryController -> protected long getIndexBufferRAMBytesUsed(IndexShard shard);1542609384;returns how much heap this shard is using for its indexing buffer;protected long getIndexBufferRAMBytesUsed(IndexShard shard) {_        return shard.getIndexBufferRAMBytesUsed()__    };returns,how,much,heap,this,shard,is,using,for,its,indexing,buffer;protected,long,get,index,buffer,rambytes,used,index,shard,shard,return,shard,get,index,buffer,rambytes,used
IndexingMemoryController -> private void recordOperationBytes(Engine.Operation operation, Engine.Result result);1524684173;called by IndexShard to record estimated bytes written to translog for the operation;private void recordOperationBytes(Engine.Operation operation, Engine.Result result) {_        if (result.hasFailure() == false) {_            statusChecker.bytesWritten(operation.estimatedSizeInBytes())__        }_    };called,by,index,shard,to,record,estimated,bytes,written,to,translog,for,the,operation;private,void,record,operation,bytes,engine,operation,operation,engine,result,result,if,result,has,failure,false,status,checker,bytes,written,operation,estimated,size,in,bytes
IndexingMemoryController -> private void recordOperationBytes(Engine.Operation operation, Engine.Result result);1525162917;called by IndexShard to record estimated bytes written to translog for the operation;private void recordOperationBytes(Engine.Operation operation, Engine.Result result) {_        if (result.getResultType() == Engine.Result.Type.SUCCESS) {_            statusChecker.bytesWritten(operation.estimatedSizeInBytes())__        }_    };called,by,index,shard,to,record,estimated,bytes,written,to,translog,for,the,operation;private,void,record,operation,bytes,engine,operation,operation,engine,result,result,if,result,get,result,type,engine,result,type,success,status,checker,bytes,written,operation,estimated,size,in,bytes
IndexingMemoryController -> private void recordOperationBytes(Engine.Operation operation, Engine.Result result);1541008027;called by IndexShard to record estimated bytes written to translog for the operation;private void recordOperationBytes(Engine.Operation operation, Engine.Result result) {_        if (result.getResultType() == Engine.Result.Type.SUCCESS) {_            statusChecker.bytesWritten(operation.estimatedSizeInBytes())__        }_    };called,by,index,shard,to,record,estimated,bytes,written,to,translog,for,the,operation;private,void,record,operation,bytes,engine,operation,operation,engine,result,result,if,result,get,result,type,engine,result,type,success,status,checker,bytes,written,operation,estimated,size,in,bytes
IndexingMemoryController -> private void recordOperationBytes(Engine.Operation operation, Engine.Result result);1541092382;called by IndexShard to record estimated bytes written to translog for the operation;private void recordOperationBytes(Engine.Operation operation, Engine.Result result) {_        if (result.getResultType() == Engine.Result.Type.SUCCESS) {_            statusChecker.bytesWritten(operation.estimatedSizeInBytes())__        }_    };called,by,index,shard,to,record,estimated,bytes,written,to,translog,for,the,operation;private,void,record,operation,bytes,engine,operation,operation,engine,result,result,if,result,get,result,type,engine,result,type,success,status,checker,bytes,written,operation,estimated,size,in,bytes
IndexingMemoryController -> private void recordOperationBytes(Engine.Operation operation, Engine.Result result);1542402632;called by IndexShard to record estimated bytes written to translog for the operation;private void recordOperationBytes(Engine.Operation operation, Engine.Result result) {_        if (result.getResultType() == Engine.Result.Type.SUCCESS) {_            statusChecker.bytesWritten(operation.estimatedSizeInBytes())__        }_    };called,by,index,shard,to,record,estimated,bytes,written,to,translog,for,the,operation;private,void,record,operation,bytes,engine,operation,operation,engine,result,result,if,result,get,result,type,engine,result,type,success,status,checker,bytes,written,operation,estimated,size,in,bytes
IndexingMemoryController -> private void recordOperationBytes(Engine.Operation operation, Engine.Result result);1542609384;called by IndexShard to record estimated bytes written to translog for the operation;private void recordOperationBytes(Engine.Operation operation, Engine.Result result) {_        if (result.getResultType() == Engine.Result.Type.SUCCESS) {_            statusChecker.bytesWritten(operation.estimatedSizeInBytes())__        }_    };called,by,index,shard,to,record,estimated,bytes,written,to,translog,for,the,operation;private,void,record,operation,bytes,engine,operation,operation,engine,result,result,if,result,get,result,type,engine,result,type,success,status,checker,bytes,written,operation,estimated,size,in,bytes
IndexingMemoryController -> void forceCheck();1524684173;force checker to run now;void forceCheck() {_        statusChecker.run()__    };force,checker,to,run,now;void,force,check,status,checker,run
IndexingMemoryController -> void forceCheck();1525162917;force checker to run now;void forceCheck() {_        statusChecker.run()__    };force,checker,to,run,now;void,force,check,status,checker,run
IndexingMemoryController -> void forceCheck();1541008027;force checker to run now;void forceCheck() {_        statusChecker.run()__    };force,checker,to,run,now;void,force,check,status,checker,run
IndexingMemoryController -> void forceCheck();1541092382;force checker to run now;void forceCheck() {_        statusChecker.run()__    };force,checker,to,run,now;void,force,check,status,checker,run
IndexingMemoryController -> void forceCheck();1542402632;force checker to run now;void forceCheck() {_        statusChecker.run()__    };force,checker,to,run,now;void,force,check,status,checker,run
IndexingMemoryController -> void forceCheck();1542609384;force checker to run now;void forceCheck() {_        statusChecker.run()__    };force,checker,to,run,now;void,force,check,status,checker,run
IndexingMemoryController -> protected long getShardWritingBytes(IndexShard shard);1524684173;returns how many bytes this shard is currently writing to disk;protected long getShardWritingBytes(IndexShard shard) {_        return shard.getWritingBytes()__    };returns,how,many,bytes,this,shard,is,currently,writing,to,disk;protected,long,get,shard,writing,bytes,index,shard,shard,return,shard,get,writing,bytes
IndexingMemoryController -> protected long getShardWritingBytes(IndexShard shard);1525162917;returns how many bytes this shard is currently writing to disk;protected long getShardWritingBytes(IndexShard shard) {_        return shard.getWritingBytes()__    };returns,how,many,bytes,this,shard,is,currently,writing,to,disk;protected,long,get,shard,writing,bytes,index,shard,shard,return,shard,get,writing,bytes
IndexingMemoryController -> protected long getShardWritingBytes(IndexShard shard);1541008027;returns how many bytes this shard is currently writing to disk;protected long getShardWritingBytes(IndexShard shard) {_        return shard.getWritingBytes()__    };returns,how,many,bytes,this,shard,is,currently,writing,to,disk;protected,long,get,shard,writing,bytes,index,shard,shard,return,shard,get,writing,bytes
IndexingMemoryController -> protected long getShardWritingBytes(IndexShard shard);1541092382;returns how many bytes this shard is currently writing to disk;protected long getShardWritingBytes(IndexShard shard) {_        return shard.getWritingBytes()__    };returns,how,many,bytes,this,shard,is,currently,writing,to,disk;protected,long,get,shard,writing,bytes,index,shard,shard,return,shard,get,writing,bytes
IndexingMemoryController -> protected long getShardWritingBytes(IndexShard shard);1542402632;returns how many bytes this shard is currently writing to disk;protected long getShardWritingBytes(IndexShard shard) {_        return shard.getWritingBytes()__    };returns,how,many,bytes,this,shard,is,currently,writing,to,disk;protected,long,get,shard,writing,bytes,index,shard,shard,return,shard,get,writing,bytes
IndexingMemoryController -> protected long getShardWritingBytes(IndexShard shard);1542609384;returns how many bytes this shard is currently writing to disk;protected long getShardWritingBytes(IndexShard shard) {_        return shard.getWritingBytes()__    };returns,how,many,bytes,this,shard,is,currently,writing,to,disk;protected,long,get,shard,writing,bytes,index,shard,shard,return,shard,get,writing,bytes
IndexingMemoryController -> protected void activateThrottling(IndexShard shard);1524684173;Asks this shard to throttle indexing to one thread;protected void activateThrottling(IndexShard shard) {_        shard.activateThrottling()__    };asks,this,shard,to,throttle,indexing,to,one,thread;protected,void,activate,throttling,index,shard,shard,shard,activate,throttling
IndexingMemoryController -> protected void activateThrottling(IndexShard shard);1525162917;Asks this shard to throttle indexing to one thread;protected void activateThrottling(IndexShard shard) {_        shard.activateThrottling()__    };asks,this,shard,to,throttle,indexing,to,one,thread;protected,void,activate,throttling,index,shard,shard,shard,activate,throttling
IndexingMemoryController -> protected void activateThrottling(IndexShard shard);1541008027;Asks this shard to throttle indexing to one thread;protected void activateThrottling(IndexShard shard) {_        shard.activateThrottling()__    };asks,this,shard,to,throttle,indexing,to,one,thread;protected,void,activate,throttling,index,shard,shard,shard,activate,throttling
IndexingMemoryController -> protected void activateThrottling(IndexShard shard);1541092382;Asks this shard to throttle indexing to one thread;protected void activateThrottling(IndexShard shard) {_        shard.activateThrottling()__    };asks,this,shard,to,throttle,indexing,to,one,thread;protected,void,activate,throttling,index,shard,shard,shard,activate,throttling
IndexingMemoryController -> protected void activateThrottling(IndexShard shard);1542402632;Asks this shard to throttle indexing to one thread;protected void activateThrottling(IndexShard shard) {_        shard.activateThrottling()__    };asks,this,shard,to,throttle,indexing,to,one,thread;protected,void,activate,throttling,index,shard,shard,shard,activate,throttling
IndexingMemoryController -> protected void activateThrottling(IndexShard shard);1542609384;Asks this shard to throttle indexing to one thread;protected void activateThrottling(IndexShard shard) {_        shard.activateThrottling()__    };asks,this,shard,to,throttle,indexing,to,one,thread;protected,void,activate,throttling,index,shard,shard,shard,activate,throttling
IndexingMemoryController -> protected void deactivateThrottling(IndexShard shard);1524684173;Asks this shard to stop throttling indexing to one thread;protected void deactivateThrottling(IndexShard shard) {_        shard.deactivateThrottling()__    };asks,this,shard,to,stop,throttling,indexing,to,one,thread;protected,void,deactivate,throttling,index,shard,shard,shard,deactivate,throttling
IndexingMemoryController -> protected void deactivateThrottling(IndexShard shard);1525162917;Asks this shard to stop throttling indexing to one thread;protected void deactivateThrottling(IndexShard shard) {_        shard.deactivateThrottling()__    };asks,this,shard,to,stop,throttling,indexing,to,one,thread;protected,void,deactivate,throttling,index,shard,shard,shard,deactivate,throttling
IndexingMemoryController -> protected void deactivateThrottling(IndexShard shard);1541008027;Asks this shard to stop throttling indexing to one thread;protected void deactivateThrottling(IndexShard shard) {_        shard.deactivateThrottling()__    };asks,this,shard,to,stop,throttling,indexing,to,one,thread;protected,void,deactivate,throttling,index,shard,shard,shard,deactivate,throttling
IndexingMemoryController -> protected void deactivateThrottling(IndexShard shard);1541092382;Asks this shard to stop throttling indexing to one thread;protected void deactivateThrottling(IndexShard shard) {_        shard.deactivateThrottling()__    };asks,this,shard,to,stop,throttling,indexing,to,one,thread;protected,void,deactivate,throttling,index,shard,shard,shard,deactivate,throttling
IndexingMemoryController -> protected void deactivateThrottling(IndexShard shard);1542402632;Asks this shard to stop throttling indexing to one thread;protected void deactivateThrottling(IndexShard shard) {_        shard.deactivateThrottling()__    };asks,this,shard,to,stop,throttling,indexing,to,one,thread;protected,void,deactivate,throttling,index,shard,shard,shard,deactivate,throttling
IndexingMemoryController -> protected void deactivateThrottling(IndexShard shard);1542609384;Asks this shard to stop throttling indexing to one thread;protected void deactivateThrottling(IndexShard shard) {_        shard.deactivateThrottling()__    };asks,this,shard,to,stop,throttling,indexing,to,one,thread;protected,void,deactivate,throttling,index,shard,shard,shard,deactivate,throttling
