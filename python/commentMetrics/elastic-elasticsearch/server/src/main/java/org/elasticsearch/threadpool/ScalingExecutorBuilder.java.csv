commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public List<Setting<?>> getRegisteredSettings() {     return Arrays.asList(coreSetting, maxSetting, keepAliveSetting). }
false;;1;8;;@Override ScalingExecutorSettings getSettings(Settings settings) {     final String nodeName = Node.NODE_NAME_SETTING.get(settings).     final int coreThreads = coreSetting.get(settings).     final int maxThreads = maxSetting.get(settings).     final TimeValue keepAlive = keepAliveSetting.get(settings).     return new ScalingExecutorSettings(nodeName, coreThreads, maxThreads, keepAlive). }
false;;2;17;;ThreadPool.ExecutorHolder build(final ScalingExecutorSettings settings, final ThreadContext threadContext) {     TimeValue keepAlive = settings.keepAlive.     int core = settings.core.     int max = settings.max.     final ThreadPool.Info info = new ThreadPool.Info(name(), ThreadPool.ThreadPoolType.SCALING, core, max, keepAlive, null).     final ThreadFactory threadFactory = EsExecutors.daemonThreadFactory(EsExecutors.threadName(settings.nodeName, name())).     final ExecutorService executor = EsExecutors.newScaling(settings.nodeName + "/" + name(), core, max, keepAlive.millis(), TimeUnit.MILLISECONDS, threadFactory, threadContext).     return new ThreadPool.ExecutorHolder(executor, info). }
false;;1;10;;@Override String formatInfo(ThreadPool.Info info) {     return String.format(Locale.ROOT, "name [%s], core [%d], max [%d], keep alive [%s]", info.getName(), info.getMin(), info.getMax(), info.getKeepAlive()). }
