commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean isSubAction() {     return true. }
false;protected;0;4;;@Override protected MultiTermVectorsShardResponse newResponse() {     return new MultiTermVectorsShardResponse(). }
false;protected;1;4;;@Override protected boolean resolveIndex(MultiTermVectorsShardRequest request) {     return false. }
false;protected;2;5;;@Override protected ShardIterator shards(ClusterState state, InternalRequest request) {     return clusterService.operationRouting().getShards(state, request.concreteIndex(), request.request().shardId(), request.request().preference()). }
false;protected;2;24;;@Override protected MultiTermVectorsShardResponse shardOperation(MultiTermVectorsShardRequest request, ShardId shardId) {     final MultiTermVectorsShardResponse response = new MultiTermVectorsShardResponse().     final IndexService indexService = indicesService.indexServiceSafe(shardId.getIndex()).     final IndexShard indexShard = indexService.getShard(shardId.id()).     for (int i = 0. i < request.locations.size(). i++) {         TermVectorsRequest termVectorsRequest = request.requests.get(i).         try {             TermVectorsResponse termVectorsResponse = TermVectorsService.getTermVectors(indexShard, termVectorsRequest).             response.add(request.locations.get(i), termVectorsResponse).         } catch (RuntimeException e) {             if (TransportActions.isShardNotAvailableException(e)) {                 throw e.             } else {                 logger.debug(() -> new ParameterizedMessage("{} failed to execute multi term vectors for [{}]/[{}]", shardId, termVectorsRequest.type(), termVectorsRequest.id()), e).                 response.add(request.locations.get(i), new MultiTermVectorsResponse.Failure(request.index(), termVectorsRequest.type(), termVectorsRequest.id(), e)).             }         }     }     return response. }
false;protected;2;6;;@Override protected String getExecutor(MultiTermVectorsShardRequest request, ShardId shardId) {     IndexService indexService = indicesService.indexServiceSafe(shardId.getIndex()).     return indexService.getIndexSettings().isSearchThrottled() ? ThreadPool.Names.SEARCH_THROTTLED : super.getExecutor(request, shardId). }
