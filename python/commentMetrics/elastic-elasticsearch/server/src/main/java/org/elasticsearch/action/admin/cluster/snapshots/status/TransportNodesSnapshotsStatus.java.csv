commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;4;;@Override protected NodeRequest newNodeRequest(String nodeId, Request request) {     return new NodeRequest(nodeId, request). }
false;protected;0;4;;@Override protected NodeSnapshotStatus newNodeResponse() {     return new NodeSnapshotStatus(). }
false;protected;3;4;;@Override protected NodesSnapshotStatus newResponse(Request request, List<NodeSnapshotStatus> responses, List<FailedNodeException> failures) {     return new NodesSnapshotStatus(clusterService.getClusterName(), responses, failures). }
false;protected;1;31;;@Override protected NodeSnapshotStatus nodeOperation(NodeRequest request) {     Map<Snapshot, Map<ShardId, SnapshotIndexShardStatus>> snapshotMapBuilder = new HashMap<>().     try {         final String nodeId = clusterService.localNode().getId().         for (Snapshot snapshot : request.snapshots) {             Map<ShardId, IndexShardSnapshotStatus> shardsStatus = snapshotShardsService.currentSnapshotShards(snapshot).             if (shardsStatus == null) {                 continue.             }             Map<ShardId, SnapshotIndexShardStatus> shardMapBuilder = new HashMap<>().             for (Map.Entry<ShardId, IndexShardSnapshotStatus> shardEntry : shardsStatus.entrySet()) {                 final ShardId shardId = shardEntry.getKey().                 final IndexShardSnapshotStatus.Copy lastSnapshotStatus = shardEntry.getValue().asCopy().                 final IndexShardSnapshotStatus.Stage stage = lastSnapshotStatus.getStage().                 String shardNodeId = null.                 if (stage != IndexShardSnapshotStatus.Stage.DONE && stage != IndexShardSnapshotStatus.Stage.FAILURE) {                     // Store node id for the snapshots that are currently running.                     shardNodeId = nodeId.                 }                 shardMapBuilder.put(shardEntry.getKey(), new SnapshotIndexShardStatus(shardId, lastSnapshotStatus, shardNodeId)).             }             snapshotMapBuilder.put(snapshot, unmodifiableMap(shardMapBuilder)).         }         return new NodeSnapshotStatus(clusterService.localNode(), unmodifiableMap(snapshotMapBuilder)).     } catch (Exception e) {         throw new ElasticsearchException("failed to load metadata", e).     } }
false;public;1;4;;public Request snapshots(Snapshot[] snapshots) {     this.snapshots = snapshots.     return this. }
false;public;1;5;;@Override public void readFrom(StreamInput in) throws IOException {     // This operation is never executed remotely     throw new UnsupportedOperationException("shouldn't be here"). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     // This operation is never executed remotely     throw new UnsupportedOperationException("shouldn't be here"). }
false;protected;1;4;;@Override protected List<NodeSnapshotStatus> readNodesFrom(StreamInput in) throws IOException {     return in.readStreamableList(NodeSnapshotStatus::new). }
false;protected;2;4;;@Override protected void writeNodesTo(StreamOutput out, List<NodeSnapshotStatus> nodes) throws IOException {     out.writeStreamableList(nodes). }
false;public;1;5;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     snapshots = in.readList(Snapshot::new). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeList(snapshots). }
false;public;0;3;;public Map<Snapshot, Map<ShardId, SnapshotIndexShardStatus>> status() {     return status. }
false;public;1;18;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     int numberOfSnapshots = in.readVInt().     Map<Snapshot, Map<ShardId, SnapshotIndexShardStatus>> snapshotMapBuilder = new HashMap<>(numberOfSnapshots).     for (int i = 0. i < numberOfSnapshots. i++) {         Snapshot snapshot = new Snapshot(in).         int numberOfShards = in.readVInt().         Map<ShardId, SnapshotIndexShardStatus> shardMapBuilder = new HashMap<>(numberOfShards).         for (int j = 0. j < numberOfShards. j++) {             ShardId shardId = ShardId.readShardId(in).             SnapshotIndexShardStatus status = SnapshotIndexShardStatus.readShardSnapshotStatus(in).             shardMapBuilder.put(shardId, status).         }         snapshotMapBuilder.put(snapshot, unmodifiableMap(shardMapBuilder)).     }     status = unmodifiableMap(snapshotMapBuilder). }
false;public;1;17;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     if (status != null) {         out.writeVInt(status.size()).         for (Map.Entry<Snapshot, Map<ShardId, SnapshotIndexShardStatus>> entry : status.entrySet()) {             entry.getKey().writeTo(out).             out.writeVInt(entry.getValue().size()).             for (Map.Entry<ShardId, SnapshotIndexShardStatus> shardEntry : entry.getValue().entrySet()) {                 shardEntry.getKey().writeTo(out).                 shardEntry.getValue().writeTo(out).             }         }     } else {         out.writeVInt(0).     } }
