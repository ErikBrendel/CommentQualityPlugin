commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Override public ActionRequestValidationException validate() {     ActionRequestValidationException validationException = null.     if (id == null || id.isEmpty()) {         validationException = addValidationError("must specify id for stored script", validationException).     } else if (id.contains("#")) {         validationException = addValidationError("id cannot contain '#' for stored script", validationException).     }     if (content == null) {         validationException = addValidationError("must specify code for stored script", validationException).     }     return validationException. }
false;public;0;3;;public String id() {     return id. }
false;public;1;4;;public PutStoredScriptRequest id(String id) {     this.id = id.     return this. }
false;public;0;3;;public String context() {     return context. }
false;public;1;4;;public PutStoredScriptRequest context(String context) {     this.context = context.     return this. }
false;public;0;3;;public BytesReference content() {     return content. }
false;public;0;3;;public XContentType xContentType() {     return xContentType. }
false;public;0;3;;public StoredScriptSource source() {     return source. }
true;public;2;6;/**  * Set the script source and the content type of the bytes.  */ ;/**  * Set the script source and the content type of the bytes.  */ public PutStoredScriptRequest content(BytesReference content, XContentType xContentType) {     this.content = content.     this.xContentType = Objects.requireNonNull(xContentType).     this.source = StoredScriptSource.parse(content, xContentType).     return this. }
false;public;1;17;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     if (in.getVersion().before(Version.V_6_0_0_alpha2)) {         // read lang from previous versions         in.readString().     }     id = in.readOptionalString().     content = in.readBytesReference().     xContentType = in.readEnum(XContentType.class).     if (in.getVersion().onOrAfter(Version.V_6_0_0_alpha2)) {         context = in.readOptionalString().         source = new StoredScriptSource(in).     } else {         source = StoredScriptSource.parse(content, xContentType == null ? XContentType.JSON : xContentType).     } }
false;public;1;15;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     if (out.getVersion().before(Version.V_6_0_0_alpha2)) {         out.writeString(source == null ? "" : source.getLang()).     }     out.writeOptionalString(id).     out.writeBytesReference(content).     out.writeEnum(xContentType).     if (out.getVersion().onOrAfter(Version.V_6_0_0_alpha2)) {         out.writeOptionalString(context).         source.writeTo(out).     } }
false;public;0;14;;@Override public String toString() {     String source = "_na_".     try {         source = XContentHelper.convertToJson(content, false, xContentType).     } catch (Exception e) {     // ignore     }     return "put stored script {id [" + id + "]" + (context != null ? ", context [" + context + "]" : "") + ", content [" + source + "]}". }
false;public;2;7;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.field("script").     source.toXContent(builder, params).     return builder. }
