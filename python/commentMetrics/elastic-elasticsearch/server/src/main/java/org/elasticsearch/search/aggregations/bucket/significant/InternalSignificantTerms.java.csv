commented;modifiers;parameterAmount;loc;comment;code
false;;4;1;;B read(StreamInput in, long subsetSize, long supersetSize, DocValueFormat format) throws IOException.
false;public;0;4;;@Override public long getSubsetDf() {     return subsetDf. }
false;public;0;4;;@Override public long getSupersetDf() {     return supersetDf. }
false;public;0;4;;@Override public long getSupersetSize() {     return supersetSize. }
false;public;0;4;;@Override public long getSubsetSize() {     return subsetSize. }
false;;1;3;;void updateScore(SignificanceHeuristic significanceHeuristic) {     score = significanceHeuristic.getScore(subsetDf, subsetSize, supersetDf, supersetSize). }
false;public;0;4;;@Override public long getDocCount() {     return subsetDf. }
false;public;0;4;;@Override public Aggregations getAggregations() {     return aggregations. }
false;public;2;12;;public B reduce(List<B> buckets, ReduceContext context) {     long subsetDf = 0.     long supersetDf = 0.     List<InternalAggregations> aggregationsList = new ArrayList<>(buckets.size()).     for (B bucket : buckets) {         subsetDf += bucket.subsetDf.         supersetDf += bucket.supersetDf.         aggregationsList.add(bucket.aggregations).     }     InternalAggregations aggs = InternalAggregations.reduce(aggregationsList, context).     return newBucket(subsetDf, subsetSize, supersetDf, supersetSize, aggs). }
false;abstract;5;1;;abstract B newBucket(long subsetDf, long subsetSize, long supersetDf, long supersetSize, InternalAggregations aggregations).
false;public;0;4;;@Override public double getSignificanceScore() {     return score. }
false;public;1;15;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     Bucket<?> that = (Bucket<?>) o.     return bucketOrd == that.bucketOrd && Double.compare(that.score, score) == 0 && Objects.equals(aggregations, that.aggregations) && Objects.equals(format, that.format). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(getClass(), bucketOrd, aggregations, score, format). }
false;public,final;2;11;;@Override public final XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     keyToXContent(builder).     builder.field(CommonFields.DOC_COUNT.getPreferredName(), getDocCount()).     builder.field(SCORE, score).     builder.field(BG_COUNT, supersetDf).     aggregations.toXContentInternal(builder, params).     builder.endObject().     return builder. }
false;protected,abstract;1;1;;protected abstract XContentBuilder keyToXContent(XContentBuilder builder) throws IOException.
false;protected,final;1;5;;protected final void doWriteTo(StreamOutput out) throws IOException {     writeSize(requiredSize, out).     out.writeVLong(minDocCount).     writeTermTypeInfoTo(out). }
false;protected,abstract;1;1;;protected abstract void writeTermTypeInfoTo(StreamOutput out) throws IOException.
false;public,abstract;0;2;;@Override public abstract List<B> getBuckets().
false;public;2;52;;@Override public InternalAggregation doReduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) {     long globalSubsetSize = 0.     long globalSupersetSize = 0.     // top-level Aggregations from each shard     for (InternalAggregation aggregation : aggregations) {         @SuppressWarnings("unchecked")         InternalSignificantTerms<A, B> terms = (InternalSignificantTerms<A, B>) aggregation.         globalSubsetSize += terms.getSubsetSize().         globalSupersetSize += terms.getSupersetSize().     }     Map<String, List<B>> buckets = new HashMap<>().     for (InternalAggregation aggregation : aggregations) {         @SuppressWarnings("unchecked")         InternalSignificantTerms<A, B> terms = (InternalSignificantTerms<A, B>) aggregation.         for (B bucket : terms.getBuckets()) {             List<B> existingBuckets = buckets.get(bucket.getKeyAsString()).             if (existingBuckets == null) {                 existingBuckets = new ArrayList<>(aggregations.size()).                 buckets.put(bucket.getKeyAsString(), existingBuckets).             }             // Adjust the buckets with the global stats representing the             // total size of the pots from which the stats are drawn             existingBuckets.add(bucket.newBucket(bucket.getSubsetDf(), globalSubsetSize, bucket.getSupersetDf(), globalSupersetSize, bucket.aggregations)).         }     }     SignificanceHeuristic heuristic = getSignificanceHeuristic().rewrite(reduceContext).     final int size = reduceContext.isFinalReduce() == false ? buckets.size() : Math.min(requiredSize, buckets.size()).     BucketSignificancePriorityQueue<B> ordered = new BucketSignificancePriorityQueue<>(size).     for (Map.Entry<String, List<B>> entry : buckets.entrySet()) {         List<B> sameTermBuckets = entry.getValue().         final B b = sameTermBuckets.get(0).reduce(sameTermBuckets, reduceContext).         b.updateScore(heuristic).         if (((b.score > 0) && (b.subsetDf >= minDocCount)) || reduceContext.isFinalReduce() == false) {             B removed = ordered.insertWithOverflow(b).             if (removed == null) {                 reduceContext.consumeBucketsAndMaybeBreak(1).             } else {                 reduceContext.consumeBucketsAndMaybeBreak(-countInnerBucket(removed)).             }         } else {             reduceContext.consumeBucketsAndMaybeBreak(-countInnerBucket(b)).         }     }     B[] list = createBucketsArray(ordered.size()).     for (int i = ordered.size() - 1. i >= 0. i--) {         list[i] = ordered.pop().     }     return create(globalSubsetSize, globalSupersetSize, Arrays.asList(list)). }
false;protected,abstract;3;1;;protected abstract A create(long subsetSize, long supersetSize, List<B> buckets).
true;protected,abstract;1;1;/**  * Create an array to hold some buckets. Used in collecting the results.  */ ;/**  * Create an array to hold some buckets. Used in collecting the results.  */ protected abstract B[] createBucketsArray(int size).
false;protected,abstract;0;1;;protected abstract long getSubsetSize().
false;protected,abstract;0;1;;protected abstract long getSupersetSize().
false;protected,abstract;0;1;;protected abstract SignificanceHeuristic getSignificanceHeuristic().
false;protected;0;4;;@Override protected int doHashCode() {     return Objects.hash(minDocCount, requiredSize). }
false;protected;1;6;;@Override protected boolean doEquals(Object obj) {     InternalSignificantTerms<?, ?> that = (InternalSignificantTerms<?, ?>) obj.     return Objects.equals(minDocCount, that.minDocCount) && Objects.equals(requiredSize, that.requiredSize). }
