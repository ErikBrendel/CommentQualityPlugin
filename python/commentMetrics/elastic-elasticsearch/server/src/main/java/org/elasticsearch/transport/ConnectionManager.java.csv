# id;timestamp;commentText;codeText;commentWords;codeWords
ConnectionManager -> public int size();1535046779;Returns the number of nodes this manager is connected to.;public int size() {_        return connectedNodes.size()__    };returns,the,number,of,nodes,this,manager,is,connected,to;public,int,size,return,connected,nodes,size
ConnectionManager -> public int size();1537806831;Returns the number of nodes this manager is connected to.;public int size() {_        return connectedNodes.size()__    };returns,the,number,of,nodes,this,manager,is,connected,to;public,int,size,return,connected,nodes,size
ConnectionManager -> public int size();1540503333;Returns the number of nodes this manager is connected to.;public int size() {_        return connectedNodes.size()__    };returns,the,number,of,nodes,this,manager,is,connected,to;public,int,size,return,connected,nodes,size
ConnectionManager -> public int size();1541008027;Returns the number of nodes this manager is connected to.;public int size() {_        return connectedNodes.size()__    };returns,the,number,of,nodes,this,manager,is,connected,to;public,int,size,return,connected,nodes,size
ConnectionManager -> public int size();1541092382;Returns the number of nodes this manager is connected to.;public int size() {_        return connectedNodes.size()__    };returns,the,number,of,nodes,this,manager,is,connected,to;public,int,size,return,connected,nodes,size
ConnectionManager -> public int size();1543506953;Returns the number of nodes this manager is connected to.;public int size() {_        return connectedNodes.size()__    };returns,the,number,of,nodes,this,manager,is,connected,to;public,int,size,return,connected,nodes,size
ConnectionManager -> public int size();1543593872;Returns the number of nodes this manager is connected to.;public int size() {_        return connectedNodes.size()__    };returns,the,number,of,nodes,this,manager,is,connected,to;public,int,size,return,connected,nodes,size
ConnectionManager -> public int size();1543602642;Returns the number of nodes this manager is connected to.;public int size() {_        return connectedNodes.size()__    };returns,the,number,of,nodes,this,manager,is,connected,to;public,int,size,return,connected,nodes,size
ConnectionManager -> public int size();1550601141;Returns the number of nodes this manager is connected to.;public int size() {_        return connectedNodes.size()__    };returns,the,number,of,nodes,this,manager,is,connected,to;public,int,size,return,connected,nodes,size
ConnectionManager -> public boolean nodeConnected(DiscoveryNode node);1534203100;Returns {@code true} if the node is connected.;public boolean nodeConnected(DiscoveryNode node) {_        return connectedNodes.containsKey(node)__    };returns,code,true,if,the,node,is,connected;public,boolean,node,connected,discovery,node,node,return,connected,nodes,contains,key,node
ConnectionManager -> public boolean nodeConnected(DiscoveryNode node);1534362961;Returns {@code true} if the node is connected.;public boolean nodeConnected(DiscoveryNode node) {_        return connectedNodes.containsKey(node)__    };returns,code,true,if,the,node,is,connected;public,boolean,node,connected,discovery,node,node,return,connected,nodes,contains,key,node
ConnectionManager -> public boolean nodeConnected(DiscoveryNode node);1534755962;Returns {@code true} if the node is connected.;public boolean nodeConnected(DiscoveryNode node) {_        return connectedNodes.containsKey(node)__    };returns,code,true,if,the,node,is,connected;public,boolean,node,connected,discovery,node,node,return,connected,nodes,contains,key,node
ConnectionManager -> public boolean nodeConnected(DiscoveryNode node);1535046779;Returns {@code true} if the node is connected.;public boolean nodeConnected(DiscoveryNode node) {_        return connectedNodes.containsKey(node)__    };returns,code,true,if,the,node,is,connected;public,boolean,node,connected,discovery,node,node,return,connected,nodes,contains,key,node
ConnectionManager -> public boolean nodeConnected(DiscoveryNode node);1537806831;Returns {@code true} if the node is connected.;public boolean nodeConnected(DiscoveryNode node) {_        return connectedNodes.containsKey(node)__    };returns,code,true,if,the,node,is,connected;public,boolean,node,connected,discovery,node,node,return,connected,nodes,contains,key,node
ConnectionManager -> public boolean nodeConnected(DiscoveryNode node);1540503333;Returns {@code true} if the node is connected.;public boolean nodeConnected(DiscoveryNode node) {_        return connectedNodes.containsKey(node)__    };returns,code,true,if,the,node,is,connected;public,boolean,node,connected,discovery,node,node,return,connected,nodes,contains,key,node
ConnectionManager -> public boolean nodeConnected(DiscoveryNode node);1541008027;Returns {@code true} if the node is connected.;public boolean nodeConnected(DiscoveryNode node) {_        return connectedNodes.containsKey(node)__    };returns,code,true,if,the,node,is,connected;public,boolean,node,connected,discovery,node,node,return,connected,nodes,contains,key,node
ConnectionManager -> public boolean nodeConnected(DiscoveryNode node);1541092382;Returns {@code true} if the node is connected.;public boolean nodeConnected(DiscoveryNode node) {_        return connectedNodes.containsKey(node)__    };returns,code,true,if,the,node,is,connected;public,boolean,node,connected,discovery,node,node,return,connected,nodes,contains,key,node
ConnectionManager -> public boolean nodeConnected(DiscoveryNode node);1543506953;Returns {@code true} if the node is connected.;public boolean nodeConnected(DiscoveryNode node) {_        return connectedNodes.containsKey(node)__    };returns,code,true,if,the,node,is,connected;public,boolean,node,connected,discovery,node,node,return,connected,nodes,contains,key,node
ConnectionManager -> public boolean nodeConnected(DiscoveryNode node);1543593872;Returns {@code true} if the node is connected.;public boolean nodeConnected(DiscoveryNode node) {_        return connectedNodes.containsKey(node)__    };returns,code,true,if,the,node,is,connected;public,boolean,node,connected,discovery,node,node,return,connected,nodes,contains,key,node
ConnectionManager -> public boolean nodeConnected(DiscoveryNode node);1543602642;Returns {@code true} if the node is connected.;public boolean nodeConnected(DiscoveryNode node) {_        return connectedNodes.containsKey(node)__    };returns,code,true,if,the,node,is,connected;public,boolean,node,connected,discovery,node,node,return,connected,nodes,contains,key,node
ConnectionManager -> public boolean nodeConnected(DiscoveryNode node);1550601141;Returns {@code true} if the node is connected.;public boolean nodeConnected(DiscoveryNode node) {_        return connectedNodes.containsKey(node)__    };returns,code,true,if,the,node,is,connected;public,boolean,node,connected,discovery,node,node,return,connected,nodes,contains,key,node
ConnectionManager -> public Transport.Connection getConnection(DiscoveryNode node);1534203100;Returns a connection for the given node if the node is connected._Connections returned from this method must not be closed. The lifecycle of this connection is_maintained by this connection manager__@throws NodeNotConnectedException if the node is not connected_@see #connectToNode(DiscoveryNode, ConnectionProfile, CheckedBiConsumer);public Transport.Connection getConnection(DiscoveryNode node) {_        Transport.Connection connection = connectedNodes.get(node)__        if (connection == null) {_            throw new NodeNotConnectedException(node, "Node not connected")__        }_        return connection__    };returns,a,connection,for,the,given,node,if,the,node,is,connected,connections,returned,from,this,method,must,not,be,closed,the,lifecycle,of,this,connection,is,maintained,by,this,connection,manager,throws,node,not,connected,exception,if,the,node,is,not,connected,see,connect,to,node,discovery,node,connection,profile,checked,bi,consumer;public,transport,connection,get,connection,discovery,node,node,transport,connection,connection,connected,nodes,get,node,if,connection,null,throw,new,node,not,connected,exception,node,node,not,connected,return,connection
ConnectionManager -> public Transport.Connection getConnection(DiscoveryNode node);1534362961;Returns a connection for the given node if the node is connected._Connections returned from this method must not be closed. The lifecycle of this connection is_maintained by this connection manager__@throws NodeNotConnectedException if the node is not connected_@see #connectToNode(DiscoveryNode, ConnectionProfile, CheckedBiConsumer);public Transport.Connection getConnection(DiscoveryNode node) {_        Transport.Connection connection = connectedNodes.get(node)__        if (connection == null) {_            throw new NodeNotConnectedException(node, "Node not connected")__        }_        return connection__    };returns,a,connection,for,the,given,node,if,the,node,is,connected,connections,returned,from,this,method,must,not,be,closed,the,lifecycle,of,this,connection,is,maintained,by,this,connection,manager,throws,node,not,connected,exception,if,the,node,is,not,connected,see,connect,to,node,discovery,node,connection,profile,checked,bi,consumer;public,transport,connection,get,connection,discovery,node,node,transport,connection,connection,connected,nodes,get,node,if,connection,null,throw,new,node,not,connected,exception,node,node,not,connected,return,connection
ConnectionManager -> public Transport.Connection getConnection(DiscoveryNode node);1534755962;Returns a connection for the given node if the node is connected._Connections returned from this method must not be closed. The lifecycle of this connection is_maintained by this connection manager__@throws NodeNotConnectedException if the node is not connected_@see #connectToNode(DiscoveryNode, ConnectionProfile, CheckedBiConsumer);public Transport.Connection getConnection(DiscoveryNode node) {_        Transport.Connection connection = connectedNodes.get(node)__        if (connection == null) {_            throw new NodeNotConnectedException(node, "Node not connected")__        }_        return connection__    };returns,a,connection,for,the,given,node,if,the,node,is,connected,connections,returned,from,this,method,must,not,be,closed,the,lifecycle,of,this,connection,is,maintained,by,this,connection,manager,throws,node,not,connected,exception,if,the,node,is,not,connected,see,connect,to,node,discovery,node,connection,profile,checked,bi,consumer;public,transport,connection,get,connection,discovery,node,node,transport,connection,connection,connected,nodes,get,node,if,connection,null,throw,new,node,not,connected,exception,node,node,not,connected,return,connection
ConnectionManager -> public Transport.Connection getConnection(DiscoveryNode node);1535046779;Returns a connection for the given node if the node is connected._Connections returned from this method must not be closed. The lifecycle of this connection is_maintained by this connection manager__@throws NodeNotConnectedException if the node is not connected_@see #connectToNode(DiscoveryNode, ConnectionProfile, CheckedBiConsumer);public Transport.Connection getConnection(DiscoveryNode node) {_        Transport.Connection connection = connectedNodes.get(node)__        if (connection == null) {_            throw new NodeNotConnectedException(node, "Node not connected")__        }_        return connection__    };returns,a,connection,for,the,given,node,if,the,node,is,connected,connections,returned,from,this,method,must,not,be,closed,the,lifecycle,of,this,connection,is,maintained,by,this,connection,manager,throws,node,not,connected,exception,if,the,node,is,not,connected,see,connect,to,node,discovery,node,connection,profile,checked,bi,consumer;public,transport,connection,get,connection,discovery,node,node,transport,connection,connection,connected,nodes,get,node,if,connection,null,throw,new,node,not,connected,exception,node,node,not,connected,return,connection
ConnectionManager -> public Transport.Connection getConnection(DiscoveryNode node);1537806831;Returns a connection for the given node if the node is connected._Connections returned from this method must not be closed. The lifecycle of this connection is_maintained by this connection manager__@throws NodeNotConnectedException if the node is not connected_@see #connectToNode(DiscoveryNode, ConnectionProfile, CheckedBiConsumer);public Transport.Connection getConnection(DiscoveryNode node) {_        Transport.Connection connection = connectedNodes.get(node)__        if (connection == null) {_            throw new NodeNotConnectedException(node, "Node not connected")__        }_        return connection__    };returns,a,connection,for,the,given,node,if,the,node,is,connected,connections,returned,from,this,method,must,not,be,closed,the,lifecycle,of,this,connection,is,maintained,by,this,connection,manager,throws,node,not,connected,exception,if,the,node,is,not,connected,see,connect,to,node,discovery,node,connection,profile,checked,bi,consumer;public,transport,connection,get,connection,discovery,node,node,transport,connection,connection,connected,nodes,get,node,if,connection,null,throw,new,node,not,connected,exception,node,node,not,connected,return,connection
ConnectionManager -> public Transport.Connection getConnection(DiscoveryNode node);1540503333;Returns a connection for the given node if the node is connected._Connections returned from this method must not be closed. The lifecycle of this connection is_maintained by this connection manager__@throws NodeNotConnectedException if the node is not connected_@see #connectToNode(DiscoveryNode, ConnectionProfile, CheckedBiConsumer);public Transport.Connection getConnection(DiscoveryNode node) {_        Transport.Connection connection = connectedNodes.get(node)__        if (connection == null) {_            throw new NodeNotConnectedException(node, "Node not connected")__        }_        return connection__    };returns,a,connection,for,the,given,node,if,the,node,is,connected,connections,returned,from,this,method,must,not,be,closed,the,lifecycle,of,this,connection,is,maintained,by,this,connection,manager,throws,node,not,connected,exception,if,the,node,is,not,connected,see,connect,to,node,discovery,node,connection,profile,checked,bi,consumer;public,transport,connection,get,connection,discovery,node,node,transport,connection,connection,connected,nodes,get,node,if,connection,null,throw,new,node,not,connected,exception,node,node,not,connected,return,connection
ConnectionManager -> public Transport.Connection getConnection(DiscoveryNode node);1541008027;Returns a connection for the given node if the node is connected._Connections returned from this method must not be closed. The lifecycle of this connection is_maintained by this connection manager__@throws NodeNotConnectedException if the node is not connected_@see #connectToNode(DiscoveryNode, ConnectionProfile, CheckedBiConsumer);public Transport.Connection getConnection(DiscoveryNode node) {_        Transport.Connection connection = connectedNodes.get(node)__        if (connection == null) {_            throw new NodeNotConnectedException(node, "Node not connected")__        }_        return connection__    };returns,a,connection,for,the,given,node,if,the,node,is,connected,connections,returned,from,this,method,must,not,be,closed,the,lifecycle,of,this,connection,is,maintained,by,this,connection,manager,throws,node,not,connected,exception,if,the,node,is,not,connected,see,connect,to,node,discovery,node,connection,profile,checked,bi,consumer;public,transport,connection,get,connection,discovery,node,node,transport,connection,connection,connected,nodes,get,node,if,connection,null,throw,new,node,not,connected,exception,node,node,not,connected,return,connection
ConnectionManager -> public Transport.Connection getConnection(DiscoveryNode node);1541092382;Returns a connection for the given node if the node is connected._Connections returned from this method must not be closed. The lifecycle of this connection is_maintained by this connection manager__@throws NodeNotConnectedException if the node is not connected_@see #connectToNode(DiscoveryNode, ConnectionProfile, CheckedBiConsumer);public Transport.Connection getConnection(DiscoveryNode node) {_        Transport.Connection connection = connectedNodes.get(node)__        if (connection == null) {_            throw new NodeNotConnectedException(node, "Node not connected")__        }_        return connection__    };returns,a,connection,for,the,given,node,if,the,node,is,connected,connections,returned,from,this,method,must,not,be,closed,the,lifecycle,of,this,connection,is,maintained,by,this,connection,manager,throws,node,not,connected,exception,if,the,node,is,not,connected,see,connect,to,node,discovery,node,connection,profile,checked,bi,consumer;public,transport,connection,get,connection,discovery,node,node,transport,connection,connection,connected,nodes,get,node,if,connection,null,throw,new,node,not,connected,exception,node,node,not,connected,return,connection
ConnectionManager -> public Transport.Connection getConnection(DiscoveryNode node);1543506953;Returns a connection for the given node if the node is connected._Connections returned from this method must not be closed. The lifecycle of this connection is_maintained by this connection manager__@throws NodeNotConnectedException if the node is not connected_@see #connectToNode(DiscoveryNode, ConnectionProfile, CheckedBiConsumer);public Transport.Connection getConnection(DiscoveryNode node) {_        Transport.Connection connection = connectedNodes.get(node)__        if (connection == null) {_            throw new NodeNotConnectedException(node, "Node not connected")__        }_        return connection__    };returns,a,connection,for,the,given,node,if,the,node,is,connected,connections,returned,from,this,method,must,not,be,closed,the,lifecycle,of,this,connection,is,maintained,by,this,connection,manager,throws,node,not,connected,exception,if,the,node,is,not,connected,see,connect,to,node,discovery,node,connection,profile,checked,bi,consumer;public,transport,connection,get,connection,discovery,node,node,transport,connection,connection,connected,nodes,get,node,if,connection,null,throw,new,node,not,connected,exception,node,node,not,connected,return,connection
ConnectionManager -> public Transport.Connection getConnection(DiscoveryNode node);1543593872;Returns a connection for the given node if the node is connected._Connections returned from this method must not be closed. The lifecycle of this connection is_maintained by this connection manager__@throws NodeNotConnectedException if the node is not connected_@see #connectToNode(DiscoveryNode, ConnectionProfile, CheckedBiConsumer);public Transport.Connection getConnection(DiscoveryNode node) {_        Transport.Connection connection = connectedNodes.get(node)__        if (connection == null) {_            throw new NodeNotConnectedException(node, "Node not connected")__        }_        return connection__    };returns,a,connection,for,the,given,node,if,the,node,is,connected,connections,returned,from,this,method,must,not,be,closed,the,lifecycle,of,this,connection,is,maintained,by,this,connection,manager,throws,node,not,connected,exception,if,the,node,is,not,connected,see,connect,to,node,discovery,node,connection,profile,checked,bi,consumer;public,transport,connection,get,connection,discovery,node,node,transport,connection,connection,connected,nodes,get,node,if,connection,null,throw,new,node,not,connected,exception,node,node,not,connected,return,connection
ConnectionManager -> public Transport.Connection getConnection(DiscoveryNode node);1543602642;Returns a connection for the given node if the node is connected._Connections returned from this method must not be closed. The lifecycle of this connection is_maintained by this connection manager__@throws NodeNotConnectedException if the node is not connected_@see #connectToNode(DiscoveryNode, ConnectionProfile, CheckedBiConsumer);public Transport.Connection getConnection(DiscoveryNode node) {_        Transport.Connection connection = connectedNodes.get(node)__        if (connection == null) {_            throw new NodeNotConnectedException(node, "Node not connected")__        }_        return connection__    };returns,a,connection,for,the,given,node,if,the,node,is,connected,connections,returned,from,this,method,must,not,be,closed,the,lifecycle,of,this,connection,is,maintained,by,this,connection,manager,throws,node,not,connected,exception,if,the,node,is,not,connected,see,connect,to,node,discovery,node,connection,profile,checked,bi,consumer;public,transport,connection,get,connection,discovery,node,node,transport,connection,connection,connected,nodes,get,node,if,connection,null,throw,new,node,not,connected,exception,node,node,not,connected,return,connection
ConnectionManager -> public Transport.Connection getConnection(DiscoveryNode node);1550601141;Returns a connection for the given node if the node is connected._Connections returned from this method must not be closed. The lifecycle of this connection is_maintained by this connection manager__@throws NodeNotConnectedException if the node is not connected_@see #connectToNode(DiscoveryNode, ConnectionProfile, CheckedBiConsumer);public Transport.Connection getConnection(DiscoveryNode node) {_        Transport.Connection connection = connectedNodes.get(node)__        if (connection == null) {_            throw new NodeNotConnectedException(node, "Node not connected")__        }_        return connection__    };returns,a,connection,for,the,given,node,if,the,node,is,connected,connections,returned,from,this,method,must,not,be,closed,the,lifecycle,of,this,connection,is,maintained,by,this,connection,manager,throws,node,not,connected,exception,if,the,node,is,not,connected,see,connect,to,node,discovery,node,connection,profile,checked,bi,consumer;public,transport,connection,get,connection,discovery,node,node,transport,connection,connection,connected,nodes,get,node,if,connection,null,throw,new,node,not,connected,exception,node,node,not,connected,return,connection
ConnectionManager -> public void connectToNode(DiscoveryNode node, ConnectionProfile connectionProfile,                               CheckedBiConsumer<Transport.Connection, ConnectionProfile, IOException> connectionValidator)         throws ConnectTransportException;1534203100;Connects to a node with the given connection profile. If the node is already connected this method has no effect._Once a successful is established, it can be validated before being exposed.;public void connectToNode(DiscoveryNode node, ConnectionProfile connectionProfile,_                              CheckedBiConsumer<Transport.Connection, ConnectionProfile, IOException> connectionValidator)_        throws ConnectTransportException {_        if (node == null) {_            throw new ConnectTransportException(null, "can't connect to a null node")__        }_        closeLock.readLock().lock()_ _        try {_            ensureOpen()__            try (Releasable ignored = connectionLock.acquire(node.getId())) {_                Transport.Connection connection = connectedNodes.get(node)__                if (connection != null) {_                    return__                }_                boolean success = false__                try {_                    connection = transport.openConnection(node, connectionProfile)__                    connectionValidator.accept(connection, connectionProfile)__                    _                    connectedNodes.put(node, connection)__                    if (logger.isDebugEnabled()) {_                        logger.debug("connected to node [{}]", node)__                    }_                    try {_                        connectionListener.onNodeConnected(node)__                    } finally {_                        final Transport.Connection finalConnection = connection__                        connection.addCloseListener(ActionListener.wrap(() -> {_                            connectedNodes.remove(node, finalConnection)__                            connectionListener.onNodeDisconnected(node)__                        }))__                    }_                    if (connection.isClosed()) {_                        throw new NodeNotConnectedException(node, "connection concurrently closed")__                    }_                    success = true__                } catch (ConnectTransportException e) {_                    throw e__                } catch (Exception e) {_                    throw new ConnectTransportException(node, "general node connection failure", e)__                } finally {_                    if (success == false) { _                        logger.trace(() -> new ParameterizedMessage("failed to connect to [{}], cleaning dangling connections", node))__                        IOUtils.closeWhileHandlingException(connection)__                    }_                }_            }_        } finally {_            closeLock.readLock().unlock()__        }_    };connects,to,a,node,with,the,given,connection,profile,if,the,node,is,already,connected,this,method,has,no,effect,once,a,successful,is,established,it,can,be,validated,before,being,exposed;public,void,connect,to,node,discovery,node,node,connection,profile,connection,profile,checked,bi,consumer,transport,connection,connection,profile,ioexception,connection,validator,throws,connect,transport,exception,if,node,null,throw,new,connect,transport,exception,null,can,t,connect,to,a,null,node,close,lock,read,lock,lock,try,ensure,open,try,releasable,ignored,connection,lock,acquire,node,get,id,transport,connection,connection,connected,nodes,get,node,if,connection,null,return,boolean,success,false,try,connection,transport,open,connection,node,connection,profile,connection,validator,accept,connection,connection,profile,connected,nodes,put,node,connection,if,logger,is,debug,enabled,logger,debug,connected,to,node,node,try,connection,listener,on,node,connected,node,finally,final,transport,connection,final,connection,connection,connection,add,close,listener,action,listener,wrap,connected,nodes,remove,node,final,connection,connection,listener,on,node,disconnected,node,if,connection,is,closed,throw,new,node,not,connected,exception,node,connection,concurrently,closed,success,true,catch,connect,transport,exception,e,throw,e,catch,exception,e,throw,new,connect,transport,exception,node,general,node,connection,failure,e,finally,if,success,false,logger,trace,new,parameterized,message,failed,to,connect,to,cleaning,dangling,connections,node,ioutils,close,while,handling,exception,connection,finally,close,lock,read,lock,unlock
ConnectionManager -> public void connectToNode(DiscoveryNode node, ConnectionProfile connectionProfile,                               CheckedBiConsumer<Transport.Connection, ConnectionProfile, IOException> connectionValidator)         throws ConnectTransportException;1534362961;Connects to a node with the given connection profile. If the node is already connected this method has no effect._Once a successful is established, it can be validated before being exposed.;public void connectToNode(DiscoveryNode node, ConnectionProfile connectionProfile,_                              CheckedBiConsumer<Transport.Connection, ConnectionProfile, IOException> connectionValidator)_        throws ConnectTransportException {_        ConnectionProfile resolvedProfile = ConnectionProfile.resolveConnectionProfile(connectionProfile, defaultProfile)__        if (node == null) {_            throw new ConnectTransportException(null, "can't connect to a null node")__        }_        closeLock.readLock().lock()_ _        try {_            ensureOpen()__            try (Releasable ignored = connectionLock.acquire(node.getId())) {_                Transport.Connection connection = connectedNodes.get(node)__                if (connection != null) {_                    return__                }_                boolean success = false__                try {_                    connection = transport.openConnection(node, resolvedProfile)__                    connectionValidator.accept(connection, resolvedProfile)__                    _                    connectedNodes.put(node, connection)__                    if (logger.isDebugEnabled()) {_                        logger.debug("connected to node [{}]", node)__                    }_                    try {_                        connectionListener.onNodeConnected(node)__                    } finally {_                        final Transport.Connection finalConnection = connection__                        connection.addCloseListener(ActionListener.wrap(() -> {_                            connectedNodes.remove(node, finalConnection)__                            connectionListener.onNodeDisconnected(node)__                        }))__                    }_                    if (connection.isClosed()) {_                        throw new NodeNotConnectedException(node, "connection concurrently closed")__                    }_                    success = true__                } catch (ConnectTransportException e) {_                    throw e__                } catch (Exception e) {_                    throw new ConnectTransportException(node, "general node connection failure", e)__                } finally {_                    if (success == false) { _                        logger.trace(() -> new ParameterizedMessage("failed to connect to [{}], cleaning dangling connections", node))__                        IOUtils.closeWhileHandlingException(connection)__                    }_                }_            }_        } finally {_            closeLock.readLock().unlock()__        }_    };connects,to,a,node,with,the,given,connection,profile,if,the,node,is,already,connected,this,method,has,no,effect,once,a,successful,is,established,it,can,be,validated,before,being,exposed;public,void,connect,to,node,discovery,node,node,connection,profile,connection,profile,checked,bi,consumer,transport,connection,connection,profile,ioexception,connection,validator,throws,connect,transport,exception,connection,profile,resolved,profile,connection,profile,resolve,connection,profile,connection,profile,default,profile,if,node,null,throw,new,connect,transport,exception,null,can,t,connect,to,a,null,node,close,lock,read,lock,lock,try,ensure,open,try,releasable,ignored,connection,lock,acquire,node,get,id,transport,connection,connection,connected,nodes,get,node,if,connection,null,return,boolean,success,false,try,connection,transport,open,connection,node,resolved,profile,connection,validator,accept,connection,resolved,profile,connected,nodes,put,node,connection,if,logger,is,debug,enabled,logger,debug,connected,to,node,node,try,connection,listener,on,node,connected,node,finally,final,transport,connection,final,connection,connection,connection,add,close,listener,action,listener,wrap,connected,nodes,remove,node,final,connection,connection,listener,on,node,disconnected,node,if,connection,is,closed,throw,new,node,not,connected,exception,node,connection,concurrently,closed,success,true,catch,connect,transport,exception,e,throw,e,catch,exception,e,throw,new,connect,transport,exception,node,general,node,connection,failure,e,finally,if,success,false,logger,trace,new,parameterized,message,failed,to,connect,to,cleaning,dangling,connections,node,ioutils,close,while,handling,exception,connection,finally,close,lock,read,lock,unlock
ConnectionManager -> public void connectToNode(DiscoveryNode node, ConnectionProfile connectionProfile,                               CheckedBiConsumer<Transport.Connection, ConnectionProfile, IOException> connectionValidator)         throws ConnectTransportException;1534755962;Connects to a node with the given connection profile. If the node is already connected this method has no effect._Once a successful is established, it can be validated before being exposed.;public void connectToNode(DiscoveryNode node, ConnectionProfile connectionProfile,_                              CheckedBiConsumer<Transport.Connection, ConnectionProfile, IOException> connectionValidator)_        throws ConnectTransportException {_        ConnectionProfile resolvedProfile = ConnectionProfile.resolveConnectionProfile(connectionProfile, defaultProfile)__        if (node == null) {_            throw new ConnectTransportException(null, "can't connect to a null node")__        }_        closeLock.readLock().lock()_ _        try {_            ensureOpen()__            try (Releasable ignored = connectionLock.acquire(node.getId())) {_                Transport.Connection connection = connectedNodes.get(node)__                if (connection != null) {_                    return__                }_                boolean success = false__                try {_                    connection = internalOpenConnection(node, resolvedProfile)__                    connectionValidator.accept(connection, resolvedProfile)__                    _                    connectedNodes.put(node, connection)__                    if (logger.isDebugEnabled()) {_                        logger.debug("connected to node [{}]", node)__                    }_                    try {_                        connectionListener.onNodeConnected(node)__                    } finally {_                        final Transport.Connection finalConnection = connection__                        connection.addCloseListener(ActionListener.wrap(() -> {_                            connectedNodes.remove(node, finalConnection)__                            connectionListener.onNodeDisconnected(node)__                        }))__                    }_                    if (connection.isClosed()) {_                        throw new NodeNotConnectedException(node, "connection concurrently closed")__                    }_                    success = true__                } catch (ConnectTransportException e) {_                    throw e__                } catch (Exception e) {_                    throw new ConnectTransportException(node, "general node connection failure", e)__                } finally {_                    if (success == false) { _                        logger.trace(() -> new ParameterizedMessage("failed to connect to [{}], cleaning dangling connections", node))__                        IOUtils.closeWhileHandlingException(connection)__                    }_                }_            }_        } finally {_            closeLock.readLock().unlock()__        }_    };connects,to,a,node,with,the,given,connection,profile,if,the,node,is,already,connected,this,method,has,no,effect,once,a,successful,is,established,it,can,be,validated,before,being,exposed;public,void,connect,to,node,discovery,node,node,connection,profile,connection,profile,checked,bi,consumer,transport,connection,connection,profile,ioexception,connection,validator,throws,connect,transport,exception,connection,profile,resolved,profile,connection,profile,resolve,connection,profile,connection,profile,default,profile,if,node,null,throw,new,connect,transport,exception,null,can,t,connect,to,a,null,node,close,lock,read,lock,lock,try,ensure,open,try,releasable,ignored,connection,lock,acquire,node,get,id,transport,connection,connection,connected,nodes,get,node,if,connection,null,return,boolean,success,false,try,connection,internal,open,connection,node,resolved,profile,connection,validator,accept,connection,resolved,profile,connected,nodes,put,node,connection,if,logger,is,debug,enabled,logger,debug,connected,to,node,node,try,connection,listener,on,node,connected,node,finally,final,transport,connection,final,connection,connection,connection,add,close,listener,action,listener,wrap,connected,nodes,remove,node,final,connection,connection,listener,on,node,disconnected,node,if,connection,is,closed,throw,new,node,not,connected,exception,node,connection,concurrently,closed,success,true,catch,connect,transport,exception,e,throw,e,catch,exception,e,throw,new,connect,transport,exception,node,general,node,connection,failure,e,finally,if,success,false,logger,trace,new,parameterized,message,failed,to,connect,to,cleaning,dangling,connections,node,ioutils,close,while,handling,exception,connection,finally,close,lock,read,lock,unlock
ConnectionManager -> public void connectToNode(DiscoveryNode node, ConnectionProfile connectionProfile,                               CheckedBiConsumer<Transport.Connection, ConnectionProfile, IOException> connectionValidator)         throws ConnectTransportException;1535046779;Connects to a node with the given connection profile. If the node is already connected this method has no effect._Once a successful is established, it can be validated before being exposed.;public void connectToNode(DiscoveryNode node, ConnectionProfile connectionProfile,_                              CheckedBiConsumer<Transport.Connection, ConnectionProfile, IOException> connectionValidator)_        throws ConnectTransportException {_        ConnectionProfile resolvedProfile = ConnectionProfile.resolveConnectionProfile(connectionProfile, defaultProfile)__        if (node == null) {_            throw new ConnectTransportException(null, "can't connect to a null node")__        }_        closeLock.readLock().lock()_ _        try {_            ensureOpen()__            try (Releasable ignored = connectionLock.acquire(node.getId())) {_                Transport.Connection connection = connectedNodes.get(node)__                if (connection != null) {_                    return__                }_                boolean success = false__                try {_                    connection = internalOpenConnection(node, resolvedProfile)__                    connectionValidator.accept(connection, resolvedProfile)__                    _                    connectedNodes.put(node, connection)__                    if (logger.isDebugEnabled()) {_                        logger.debug("connected to node [{}]", node)__                    }_                    try {_                        connectionListener.onNodeConnected(node)__                    } finally {_                        final Transport.Connection finalConnection = connection__                        connection.addCloseListener(ActionListener.wrap(() -> {_                            connectedNodes.remove(node, finalConnection)__                            connectionListener.onNodeDisconnected(node)__                        }))__                    }_                    if (connection.isClosed()) {_                        throw new NodeNotConnectedException(node, "connection concurrently closed")__                    }_                    success = true__                } catch (ConnectTransportException e) {_                    throw e__                } catch (Exception e) {_                    throw new ConnectTransportException(node, "general node connection failure", e)__                } finally {_                    if (success == false) { _                        logger.trace(() -> new ParameterizedMessage("failed to connect to [{}], cleaning dangling connections", node))__                        IOUtils.closeWhileHandlingException(connection)__                    }_                }_            }_        } finally {_            closeLock.readLock().unlock()__        }_    };connects,to,a,node,with,the,given,connection,profile,if,the,node,is,already,connected,this,method,has,no,effect,once,a,successful,is,established,it,can,be,validated,before,being,exposed;public,void,connect,to,node,discovery,node,node,connection,profile,connection,profile,checked,bi,consumer,transport,connection,connection,profile,ioexception,connection,validator,throws,connect,transport,exception,connection,profile,resolved,profile,connection,profile,resolve,connection,profile,connection,profile,default,profile,if,node,null,throw,new,connect,transport,exception,null,can,t,connect,to,a,null,node,close,lock,read,lock,lock,try,ensure,open,try,releasable,ignored,connection,lock,acquire,node,get,id,transport,connection,connection,connected,nodes,get,node,if,connection,null,return,boolean,success,false,try,connection,internal,open,connection,node,resolved,profile,connection,validator,accept,connection,resolved,profile,connected,nodes,put,node,connection,if,logger,is,debug,enabled,logger,debug,connected,to,node,node,try,connection,listener,on,node,connected,node,finally,final,transport,connection,final,connection,connection,connection,add,close,listener,action,listener,wrap,connected,nodes,remove,node,final,connection,connection,listener,on,node,disconnected,node,if,connection,is,closed,throw,new,node,not,connected,exception,node,connection,concurrently,closed,success,true,catch,connect,transport,exception,e,throw,e,catch,exception,e,throw,new,connect,transport,exception,node,general,node,connection,failure,e,finally,if,success,false,logger,trace,new,parameterized,message,failed,to,connect,to,cleaning,dangling,connections,node,ioutils,close,while,handling,exception,connection,finally,close,lock,read,lock,unlock
ConnectionManager -> public void connectToNode(DiscoveryNode node, ConnectionProfile connectionProfile,                               CheckedBiConsumer<Transport.Connection, ConnectionProfile, IOException> connectionValidator)         throws ConnectTransportException;1537806831;Connects to a node with the given connection profile. If the node is already connected this method has no effect._Once a successful is established, it can be validated before being exposed.;public void connectToNode(DiscoveryNode node, ConnectionProfile connectionProfile,_                              CheckedBiConsumer<Transport.Connection, ConnectionProfile, IOException> connectionValidator)_        throws ConnectTransportException {_        ConnectionProfile resolvedProfile = ConnectionProfile.resolveConnectionProfile(connectionProfile, defaultProfile)__        if (node == null) {_            throw new ConnectTransportException(null, "can't connect to a null node")__        }_        closeLock.readLock().lock()_ _        try {_            ensureOpen()__            try (Releasable ignored = connectionLock.acquire(node.getId())) {_                Transport.Connection connection = connectedNodes.get(node)__                if (connection != null) {_                    return__                }_                boolean success = false__                try {_                    connection = internalOpenConnection(node, resolvedProfile)__                    connectionValidator.accept(connection, resolvedProfile)__                    _                    connectedNodes.put(node, connection)__                    if (logger.isDebugEnabled()) {_                        logger.debug("connected to node [{}]", node)__                    }_                    try {_                        connectionListener.onNodeConnected(node)__                    } finally {_                        final Transport.Connection finalConnection = connection__                        connection.addCloseListener(ActionListener.wrap(() -> {_                            connectedNodes.remove(node, finalConnection)__                            connectionListener.onNodeDisconnected(node)__                        }))__                    }_                    if (connection.isClosed()) {_                        throw new NodeNotConnectedException(node, "connection concurrently closed")__                    }_                    success = true__                } catch (ConnectTransportException e) {_                    throw e__                } catch (Exception e) {_                    throw new ConnectTransportException(node, "general node connection failure", e)__                } finally {_                    if (success == false) { _                        logger.trace(() -> new ParameterizedMessage("failed to connect to [{}], cleaning dangling connections", node))__                        IOUtils.closeWhileHandlingException(connection)__                    }_                }_            }_        } finally {_            closeLock.readLock().unlock()__        }_    };connects,to,a,node,with,the,given,connection,profile,if,the,node,is,already,connected,this,method,has,no,effect,once,a,successful,is,established,it,can,be,validated,before,being,exposed;public,void,connect,to,node,discovery,node,node,connection,profile,connection,profile,checked,bi,consumer,transport,connection,connection,profile,ioexception,connection,validator,throws,connect,transport,exception,connection,profile,resolved,profile,connection,profile,resolve,connection,profile,connection,profile,default,profile,if,node,null,throw,new,connect,transport,exception,null,can,t,connect,to,a,null,node,close,lock,read,lock,lock,try,ensure,open,try,releasable,ignored,connection,lock,acquire,node,get,id,transport,connection,connection,connected,nodes,get,node,if,connection,null,return,boolean,success,false,try,connection,internal,open,connection,node,resolved,profile,connection,validator,accept,connection,resolved,profile,connected,nodes,put,node,connection,if,logger,is,debug,enabled,logger,debug,connected,to,node,node,try,connection,listener,on,node,connected,node,finally,final,transport,connection,final,connection,connection,connection,add,close,listener,action,listener,wrap,connected,nodes,remove,node,final,connection,connection,listener,on,node,disconnected,node,if,connection,is,closed,throw,new,node,not,connected,exception,node,connection,concurrently,closed,success,true,catch,connect,transport,exception,e,throw,e,catch,exception,e,throw,new,connect,transport,exception,node,general,node,connection,failure,e,finally,if,success,false,logger,trace,new,parameterized,message,failed,to,connect,to,cleaning,dangling,connections,node,ioutils,close,while,handling,exception,connection,finally,close,lock,read,lock,unlock
ConnectionManager -> public void connectToNode(DiscoveryNode node, ConnectionProfile connectionProfile,                               CheckedBiConsumer<Transport.Connection, ConnectionProfile, IOException> connectionValidator)         throws ConnectTransportException;1540503333;Connects to a node with the given connection profile. If the node is already connected this method has no effect._Once a successful is established, it can be validated before being exposed.;public void connectToNode(DiscoveryNode node, ConnectionProfile connectionProfile,_                              CheckedBiConsumer<Transport.Connection, ConnectionProfile, IOException> connectionValidator)_        throws ConnectTransportException {_        ConnectionProfile resolvedProfile = ConnectionProfile.resolveConnectionProfile(connectionProfile, defaultProfile)__        if (node == null) {_            throw new ConnectTransportException(null, "can't connect to a null node")__        }_        closeLock.readLock().lock()_ _        try {_            ensureOpen()__            try (Releasable ignored = connectionLock.acquire(node.getId())) {_                Transport.Connection connection = connectedNodes.get(node)__                if (connection != null) {_                    return__                }_                boolean success = false__                try {_                    connection = internalOpenConnection(node, resolvedProfile)__                    connectionValidator.accept(connection, resolvedProfile)__                    _                    connectedNodes.put(node, connection)__                    if (logger.isDebugEnabled()) {_                        logger.debug("connected to node [{}]", node)__                    }_                    try {_                        connectionListener.onNodeConnected(node)__                    } finally {_                        final Transport.Connection finalConnection = connection__                        connection.addCloseListener(ActionListener.wrap(() -> {_                            connectedNodes.remove(node, finalConnection)__                            connectionListener.onNodeDisconnected(node)__                        }))__                    }_                    if (connection.isClosed()) {_                        throw new NodeNotConnectedException(node, "connection concurrently closed")__                    }_                    success = true__                } catch (ConnectTransportException e) {_                    throw e__                } catch (Exception e) {_                    throw new ConnectTransportException(node, "general node connection failure", e)__                } finally {_                    if (success == false) { _                        logger.trace(() -> new ParameterizedMessage("failed to connect to [{}], cleaning dangling connections", node))__                        IOUtils.closeWhileHandlingException(connection)__                    }_                }_            }_        } finally {_            closeLock.readLock().unlock()__        }_    };connects,to,a,node,with,the,given,connection,profile,if,the,node,is,already,connected,this,method,has,no,effect,once,a,successful,is,established,it,can,be,validated,before,being,exposed;public,void,connect,to,node,discovery,node,node,connection,profile,connection,profile,checked,bi,consumer,transport,connection,connection,profile,ioexception,connection,validator,throws,connect,transport,exception,connection,profile,resolved,profile,connection,profile,resolve,connection,profile,connection,profile,default,profile,if,node,null,throw,new,connect,transport,exception,null,can,t,connect,to,a,null,node,close,lock,read,lock,lock,try,ensure,open,try,releasable,ignored,connection,lock,acquire,node,get,id,transport,connection,connection,connected,nodes,get,node,if,connection,null,return,boolean,success,false,try,connection,internal,open,connection,node,resolved,profile,connection,validator,accept,connection,resolved,profile,connected,nodes,put,node,connection,if,logger,is,debug,enabled,logger,debug,connected,to,node,node,try,connection,listener,on,node,connected,node,finally,final,transport,connection,final,connection,connection,connection,add,close,listener,action,listener,wrap,connected,nodes,remove,node,final,connection,connection,listener,on,node,disconnected,node,if,connection,is,closed,throw,new,node,not,connected,exception,node,connection,concurrently,closed,success,true,catch,connect,transport,exception,e,throw,e,catch,exception,e,throw,new,connect,transport,exception,node,general,node,connection,failure,e,finally,if,success,false,logger,trace,new,parameterized,message,failed,to,connect,to,cleaning,dangling,connections,node,ioutils,close,while,handling,exception,connection,finally,close,lock,read,lock,unlock
ConnectionManager -> public void connectToNode(DiscoveryNode node, ConnectionProfile connectionProfile,                               CheckedBiConsumer<Transport.Connection, ConnectionProfile, IOException> connectionValidator)         throws ConnectTransportException;1541008027;Connects to a node with the given connection profile. If the node is already connected this method has no effect._Once a successful is established, it can be validated before being exposed.;public void connectToNode(DiscoveryNode node, ConnectionProfile connectionProfile,_                              CheckedBiConsumer<Transport.Connection, ConnectionProfile, IOException> connectionValidator)_        throws ConnectTransportException {_        ConnectionProfile resolvedProfile = ConnectionProfile.resolveConnectionProfile(connectionProfile, defaultProfile)__        if (node == null) {_            throw new ConnectTransportException(null, "can't connect to a null node")__        }_        closeLock.readLock().lock()_ _        try {_            ensureOpen()__            try (Releasable ignored = connectionLock.acquire(node.getId())) {_                Transport.Connection connection = connectedNodes.get(node)__                if (connection != null) {_                    return__                }_                boolean success = false__                try {_                    connection = internalOpenConnection(node, resolvedProfile)__                    connectionValidator.accept(connection, resolvedProfile)__                    _                    connectedNodes.put(node, connection)__                    if (logger.isDebugEnabled()) {_                        logger.debug("connected to node [{}]", node)__                    }_                    try {_                        connectionListener.onNodeConnected(node)__                    } finally {_                        final Transport.Connection finalConnection = connection__                        connection.addCloseListener(ActionListener.wrap(() -> {_                            connectedNodes.remove(node, finalConnection)__                            connectionListener.onNodeDisconnected(node)__                        }))__                    }_                    if (connection.isClosed()) {_                        throw new NodeNotConnectedException(node, "connection concurrently closed")__                    }_                    success = true__                } catch (ConnectTransportException e) {_                    throw e__                } catch (Exception e) {_                    throw new ConnectTransportException(node, "general node connection failure", e)__                } finally {_                    if (success == false) { _                        logger.trace(() -> new ParameterizedMessage("failed to connect to [{}], cleaning dangling connections", node))__                        IOUtils.closeWhileHandlingException(connection)__                    }_                }_            }_        } finally {_            closeLock.readLock().unlock()__        }_    };connects,to,a,node,with,the,given,connection,profile,if,the,node,is,already,connected,this,method,has,no,effect,once,a,successful,is,established,it,can,be,validated,before,being,exposed;public,void,connect,to,node,discovery,node,node,connection,profile,connection,profile,checked,bi,consumer,transport,connection,connection,profile,ioexception,connection,validator,throws,connect,transport,exception,connection,profile,resolved,profile,connection,profile,resolve,connection,profile,connection,profile,default,profile,if,node,null,throw,new,connect,transport,exception,null,can,t,connect,to,a,null,node,close,lock,read,lock,lock,try,ensure,open,try,releasable,ignored,connection,lock,acquire,node,get,id,transport,connection,connection,connected,nodes,get,node,if,connection,null,return,boolean,success,false,try,connection,internal,open,connection,node,resolved,profile,connection,validator,accept,connection,resolved,profile,connected,nodes,put,node,connection,if,logger,is,debug,enabled,logger,debug,connected,to,node,node,try,connection,listener,on,node,connected,node,finally,final,transport,connection,final,connection,connection,connection,add,close,listener,action,listener,wrap,connected,nodes,remove,node,final,connection,connection,listener,on,node,disconnected,node,if,connection,is,closed,throw,new,node,not,connected,exception,node,connection,concurrently,closed,success,true,catch,connect,transport,exception,e,throw,e,catch,exception,e,throw,new,connect,transport,exception,node,general,node,connection,failure,e,finally,if,success,false,logger,trace,new,parameterized,message,failed,to,connect,to,cleaning,dangling,connections,node,ioutils,close,while,handling,exception,connection,finally,close,lock,read,lock,unlock
ConnectionManager -> public void connectToNode(DiscoveryNode node, ConnectionProfile connectionProfile,                               CheckedBiConsumer<Transport.Connection, ConnectionProfile, IOException> connectionValidator)         throws ConnectTransportException;1541092382;Connects to a node with the given connection profile. If the node is already connected this method has no effect._Once a successful is established, it can be validated before being exposed.;public void connectToNode(DiscoveryNode node, ConnectionProfile connectionProfile,_                              CheckedBiConsumer<Transport.Connection, ConnectionProfile, IOException> connectionValidator)_        throws ConnectTransportException {_        ConnectionProfile resolvedProfile = ConnectionProfile.resolveConnectionProfile(connectionProfile, defaultProfile)__        if (node == null) {_            throw new ConnectTransportException(null, "can't connect to a null node")__        }_        closeLock.readLock().lock()_ _        try {_            ensureOpen()__            try (Releasable ignored = connectionLock.acquire(node.getId())) {_                Transport.Connection connection = connectedNodes.get(node)__                if (connection != null) {_                    return__                }_                boolean success = false__                try {_                    connection = internalOpenConnection(node, resolvedProfile)__                    connectionValidator.accept(connection, resolvedProfile)__                    _                    connectedNodes.put(node, connection)__                    if (logger.isDebugEnabled()) {_                        logger.debug("connected to node [{}]", node)__                    }_                    try {_                        connectionListener.onNodeConnected(node)__                    } finally {_                        final Transport.Connection finalConnection = connection__                        connection.addCloseListener(ActionListener.wrap(() -> {_                            connectedNodes.remove(node, finalConnection)__                            connectionListener.onNodeDisconnected(node)__                        }))__                    }_                    if (connection.isClosed()) {_                        throw new NodeNotConnectedException(node, "connection concurrently closed")__                    }_                    success = true__                } catch (ConnectTransportException e) {_                    throw e__                } catch (Exception e) {_                    throw new ConnectTransportException(node, "general node connection failure", e)__                } finally {_                    if (success == false) { _                        logger.trace(() -> new ParameterizedMessage("failed to connect to [{}], cleaning dangling connections", node))__                        IOUtils.closeWhileHandlingException(connection)__                    }_                }_            }_        } finally {_            closeLock.readLock().unlock()__        }_    };connects,to,a,node,with,the,given,connection,profile,if,the,node,is,already,connected,this,method,has,no,effect,once,a,successful,is,established,it,can,be,validated,before,being,exposed;public,void,connect,to,node,discovery,node,node,connection,profile,connection,profile,checked,bi,consumer,transport,connection,connection,profile,ioexception,connection,validator,throws,connect,transport,exception,connection,profile,resolved,profile,connection,profile,resolve,connection,profile,connection,profile,default,profile,if,node,null,throw,new,connect,transport,exception,null,can,t,connect,to,a,null,node,close,lock,read,lock,lock,try,ensure,open,try,releasable,ignored,connection,lock,acquire,node,get,id,transport,connection,connection,connected,nodes,get,node,if,connection,null,return,boolean,success,false,try,connection,internal,open,connection,node,resolved,profile,connection,validator,accept,connection,resolved,profile,connected,nodes,put,node,connection,if,logger,is,debug,enabled,logger,debug,connected,to,node,node,try,connection,listener,on,node,connected,node,finally,final,transport,connection,final,connection,connection,connection,add,close,listener,action,listener,wrap,connected,nodes,remove,node,final,connection,connection,listener,on,node,disconnected,node,if,connection,is,closed,throw,new,node,not,connected,exception,node,connection,concurrently,closed,success,true,catch,connect,transport,exception,e,throw,e,catch,exception,e,throw,new,connect,transport,exception,node,general,node,connection,failure,e,finally,if,success,false,logger,trace,new,parameterized,message,failed,to,connect,to,cleaning,dangling,connections,node,ioutils,close,while,handling,exception,connection,finally,close,lock,read,lock,unlock
ConnectionManager -> public void connectToNode(DiscoveryNode node, ConnectionProfile connectionProfile,                               CheckedBiConsumer<Transport.Connection, ConnectionProfile, IOException> connectionValidator)         throws ConnectTransportException;1543506953;Connects to a node with the given connection profile. If the node is already connected this method has no effect._Once a successful is established, it can be validated before being exposed.;public void connectToNode(DiscoveryNode node, ConnectionProfile connectionProfile,_                              CheckedBiConsumer<Transport.Connection, ConnectionProfile, IOException> connectionValidator)_        throws ConnectTransportException {_        ConnectionProfile resolvedProfile = ConnectionProfile.resolveConnectionProfile(connectionProfile, defaultProfile)__        if (node == null) {_            throw new ConnectTransportException(null, "can't connect to a null node")__        }_        closeLock.readLock().lock()_ _        try {_            ensureOpen()__            try (Releasable ignored = connectionLock.acquire(node.getId())) {_                Transport.Connection connection = connectedNodes.get(node)__                if (connection != null) {_                    return__                }_                boolean success = false__                try {_                    connection = internalOpenConnection(node, resolvedProfile)__                    connectionValidator.accept(connection, resolvedProfile)__                    _                    connectedNodes.put(node, connection)__                    if (logger.isDebugEnabled()) {_                        logger.debug("connected to node [{}]", node)__                    }_                    try {_                        connectionListener.onNodeConnected(node)__                    } finally {_                        final Transport.Connection finalConnection = connection__                        connection.addCloseListener(ActionListener.wrap(() -> {_                            connectedNodes.remove(node, finalConnection)__                            connectionListener.onNodeDisconnected(node)__                        }))__                    }_                    if (connection.isClosed()) {_                        throw new NodeNotConnectedException(node, "connection concurrently closed")__                    }_                    success = true__                } catch (ConnectTransportException e) {_                    throw e__                } catch (Exception e) {_                    throw new ConnectTransportException(node, "general node connection failure", e)__                } finally {_                    if (success == false) { _                        logger.trace(() -> new ParameterizedMessage("failed to connect to [{}], cleaning dangling connections", node))__                        IOUtils.closeWhileHandlingException(connection)__                    }_                }_            }_        } finally {_            closeLock.readLock().unlock()__        }_    };connects,to,a,node,with,the,given,connection,profile,if,the,node,is,already,connected,this,method,has,no,effect,once,a,successful,is,established,it,can,be,validated,before,being,exposed;public,void,connect,to,node,discovery,node,node,connection,profile,connection,profile,checked,bi,consumer,transport,connection,connection,profile,ioexception,connection,validator,throws,connect,transport,exception,connection,profile,resolved,profile,connection,profile,resolve,connection,profile,connection,profile,default,profile,if,node,null,throw,new,connect,transport,exception,null,can,t,connect,to,a,null,node,close,lock,read,lock,lock,try,ensure,open,try,releasable,ignored,connection,lock,acquire,node,get,id,transport,connection,connection,connected,nodes,get,node,if,connection,null,return,boolean,success,false,try,connection,internal,open,connection,node,resolved,profile,connection,validator,accept,connection,resolved,profile,connected,nodes,put,node,connection,if,logger,is,debug,enabled,logger,debug,connected,to,node,node,try,connection,listener,on,node,connected,node,finally,final,transport,connection,final,connection,connection,connection,add,close,listener,action,listener,wrap,connected,nodes,remove,node,final,connection,connection,listener,on,node,disconnected,node,if,connection,is,closed,throw,new,node,not,connected,exception,node,connection,concurrently,closed,success,true,catch,connect,transport,exception,e,throw,e,catch,exception,e,throw,new,connect,transport,exception,node,general,node,connection,failure,e,finally,if,success,false,logger,trace,new,parameterized,message,failed,to,connect,to,cleaning,dangling,connections,node,ioutils,close,while,handling,exception,connection,finally,close,lock,read,lock,unlock
ConnectionManager -> public void connectToNode(DiscoveryNode node, ConnectionProfile connectionProfile,                               CheckedBiConsumer<Transport.Connection, ConnectionProfile, IOException> connectionValidator)         throws ConnectTransportException;1543593872;Connects to a node with the given connection profile. If the node is already connected this method has no effect._Once a successful is established, it can be validated before being exposed.;public void connectToNode(DiscoveryNode node, ConnectionProfile connectionProfile,_                              CheckedBiConsumer<Transport.Connection, ConnectionProfile, IOException> connectionValidator)_        throws ConnectTransportException {_        ConnectionProfile resolvedProfile = ConnectionProfile.resolveConnectionProfile(connectionProfile, defaultProfile)__        if (node == null) {_            throw new ConnectTransportException(null, "can't connect to a null node")__        }_        closeLock.readLock().lock()_ _        try {_            ensureOpen()__            try (Releasable ignored = connectionLock.acquire(node.getId())) {_                Transport.Connection connection = connectedNodes.get(node)__                if (connection != null) {_                    return__                }_                boolean success = false__                try {_                    connection = internalOpenConnection(node, resolvedProfile)__                    connectionValidator.accept(connection, resolvedProfile)__                    _                    connectedNodes.put(node, connection)__                    if (logger.isDebugEnabled()) {_                        logger.debug("connected to node [{}]", node)__                    }_                    try {_                        connectionListener.onNodeConnected(node)__                    } finally {_                        final Transport.Connection finalConnection = connection__                        connection.addCloseListener(ActionListener.wrap(() -> {_                            connectedNodes.remove(node, finalConnection)__                            connectionListener.onNodeDisconnected(node)__                        }))__                    }_                    if (connection.isClosed()) {_                        throw new NodeNotConnectedException(node, "connection concurrently closed")__                    }_                    success = true__                } catch (ConnectTransportException e) {_                    throw e__                } catch (Exception e) {_                    throw new ConnectTransportException(node, "general node connection failure", e)__                } finally {_                    if (success == false) { _                        logger.trace(() -> new ParameterizedMessage("failed to connect to [{}], cleaning dangling connections", node))__                        IOUtils.closeWhileHandlingException(connection)__                    }_                }_            }_        } finally {_            closeLock.readLock().unlock()__        }_    };connects,to,a,node,with,the,given,connection,profile,if,the,node,is,already,connected,this,method,has,no,effect,once,a,successful,is,established,it,can,be,validated,before,being,exposed;public,void,connect,to,node,discovery,node,node,connection,profile,connection,profile,checked,bi,consumer,transport,connection,connection,profile,ioexception,connection,validator,throws,connect,transport,exception,connection,profile,resolved,profile,connection,profile,resolve,connection,profile,connection,profile,default,profile,if,node,null,throw,new,connect,transport,exception,null,can,t,connect,to,a,null,node,close,lock,read,lock,lock,try,ensure,open,try,releasable,ignored,connection,lock,acquire,node,get,id,transport,connection,connection,connected,nodes,get,node,if,connection,null,return,boolean,success,false,try,connection,internal,open,connection,node,resolved,profile,connection,validator,accept,connection,resolved,profile,connected,nodes,put,node,connection,if,logger,is,debug,enabled,logger,debug,connected,to,node,node,try,connection,listener,on,node,connected,node,finally,final,transport,connection,final,connection,connection,connection,add,close,listener,action,listener,wrap,connected,nodes,remove,node,final,connection,connection,listener,on,node,disconnected,node,if,connection,is,closed,throw,new,node,not,connected,exception,node,connection,concurrently,closed,success,true,catch,connect,transport,exception,e,throw,e,catch,exception,e,throw,new,connect,transport,exception,node,general,node,connection,failure,e,finally,if,success,false,logger,trace,new,parameterized,message,failed,to,connect,to,cleaning,dangling,connections,node,ioutils,close,while,handling,exception,connection,finally,close,lock,read,lock,unlock
ConnectionManager -> public void connectToNode(DiscoveryNode node, ConnectionProfile connectionProfile,                               CheckedBiConsumer<Transport.Connection, ConnectionProfile, IOException> connectionValidator)         throws ConnectTransportException;1543602642;Connects to a node with the given connection profile. If the node is already connected this method has no effect._Once a successful is established, it can be validated before being exposed.;public void connectToNode(DiscoveryNode node, ConnectionProfile connectionProfile,_                              CheckedBiConsumer<Transport.Connection, ConnectionProfile, IOException> connectionValidator)_        throws ConnectTransportException {_        ConnectionProfile resolvedProfile = ConnectionProfile.resolveConnectionProfile(connectionProfile, defaultProfile)__        if (node == null) {_            throw new ConnectTransportException(null, "can't connect to a null node")__        }_        closeLock.readLock().lock()_ _        try {_            ensureOpen()__            try (Releasable ignored = connectionLock.acquire(node.getId())) {_                Transport.Connection connection = connectedNodes.get(node)__                if (connection != null) {_                    return__                }_                boolean success = false__                try {_                    connection = internalOpenConnection(node, resolvedProfile)__                    connectionValidator.accept(connection, resolvedProfile)__                    _                    connectedNodes.put(node, connection)__                    if (logger.isDebugEnabled()) {_                        logger.debug("connected to node [{}]", node)__                    }_                    try {_                        connectionListener.onNodeConnected(node)__                    } finally {_                        final Transport.Connection finalConnection = connection__                        connection.addCloseListener(ActionListener.wrap(() -> {_                            connectedNodes.remove(node, finalConnection)__                            connectionListener.onNodeDisconnected(node)__                        }))__                    }_                    if (connection.isClosed()) {_                        throw new NodeNotConnectedException(node, "connection concurrently closed")__                    }_                    success = true__                } catch (ConnectTransportException e) {_                    throw e__                } catch (Exception e) {_                    throw new ConnectTransportException(node, "general node connection failure", e)__                } finally {_                    if (success == false) { _                        logger.trace(() -> new ParameterizedMessage("failed to connect to [{}], cleaning dangling connections", node))__                        IOUtils.closeWhileHandlingException(connection)__                    }_                }_            }_        } finally {_            closeLock.readLock().unlock()__        }_    };connects,to,a,node,with,the,given,connection,profile,if,the,node,is,already,connected,this,method,has,no,effect,once,a,successful,is,established,it,can,be,validated,before,being,exposed;public,void,connect,to,node,discovery,node,node,connection,profile,connection,profile,checked,bi,consumer,transport,connection,connection,profile,ioexception,connection,validator,throws,connect,transport,exception,connection,profile,resolved,profile,connection,profile,resolve,connection,profile,connection,profile,default,profile,if,node,null,throw,new,connect,transport,exception,null,can,t,connect,to,a,null,node,close,lock,read,lock,lock,try,ensure,open,try,releasable,ignored,connection,lock,acquire,node,get,id,transport,connection,connection,connected,nodes,get,node,if,connection,null,return,boolean,success,false,try,connection,internal,open,connection,node,resolved,profile,connection,validator,accept,connection,resolved,profile,connected,nodes,put,node,connection,if,logger,is,debug,enabled,logger,debug,connected,to,node,node,try,connection,listener,on,node,connected,node,finally,final,transport,connection,final,connection,connection,connection,add,close,listener,action,listener,wrap,connected,nodes,remove,node,final,connection,connection,listener,on,node,disconnected,node,if,connection,is,closed,throw,new,node,not,connected,exception,node,connection,concurrently,closed,success,true,catch,connect,transport,exception,e,throw,e,catch,exception,e,throw,new,connect,transport,exception,node,general,node,connection,failure,e,finally,if,success,false,logger,trace,new,parameterized,message,failed,to,connect,to,cleaning,dangling,connections,node,ioutils,close,while,handling,exception,connection,finally,close,lock,read,lock,unlock
ConnectionManager -> public void connectToNode(DiscoveryNode node, ConnectionProfile connectionProfile,                               CheckedBiConsumer<Transport.Connection, ConnectionProfile, IOException> connectionValidator)         throws ConnectTransportException;1550601141;Connects to a node with the given connection profile. If the node is already connected this method has no effect._Once a successful is established, it can be validated before being exposed.;public void connectToNode(DiscoveryNode node, ConnectionProfile connectionProfile,_                              CheckedBiConsumer<Transport.Connection, ConnectionProfile, IOException> connectionValidator)_        throws ConnectTransportException {_        ConnectionProfile resolvedProfile = ConnectionProfile.resolveConnectionProfile(connectionProfile, defaultProfile)__        if (node == null) {_            throw new ConnectTransportException(null, "can't connect to a null node")__        }_        closeLock.readLock().lock()_ _        try {_            ensureOpen()__            try (Releasable ignored = connectionLock.acquire(node.getId())) {_                Transport.Connection connection = connectedNodes.get(node)__                if (connection != null) {_                    return__                }_                boolean success = false__                try {_                    connection = internalOpenConnection(node, resolvedProfile)__                    connectionValidator.accept(connection, resolvedProfile)__                    _                    connectedNodes.put(node, connection)__                    if (logger.isDebugEnabled()) {_                        logger.debug("connected to node [{}]", node)__                    }_                    try {_                        connectionListener.onNodeConnected(node)__                    } finally {_                        final Transport.Connection finalConnection = connection__                        connection.addCloseListener(ActionListener.wrap(() -> {_                            connectedNodes.remove(node, finalConnection)__                            connectionListener.onNodeDisconnected(node)__                        }))__                    }_                    if (connection.isClosed()) {_                        throw new NodeNotConnectedException(node, "connection concurrently closed")__                    }_                    success = true__                } catch (ConnectTransportException e) {_                    throw e__                } catch (Exception e) {_                    throw new ConnectTransportException(node, "general node connection failure", e)__                } finally {_                    if (success == false) { _                        logger.trace(() -> new ParameterizedMessage("failed to connect to [{}], cleaning dangling connections", node))__                        IOUtils.closeWhileHandlingException(connection)__                    }_                }_            }_        } finally {_            closeLock.readLock().unlock()__        }_    };connects,to,a,node,with,the,given,connection,profile,if,the,node,is,already,connected,this,method,has,no,effect,once,a,successful,is,established,it,can,be,validated,before,being,exposed;public,void,connect,to,node,discovery,node,node,connection,profile,connection,profile,checked,bi,consumer,transport,connection,connection,profile,ioexception,connection,validator,throws,connect,transport,exception,connection,profile,resolved,profile,connection,profile,resolve,connection,profile,connection,profile,default,profile,if,node,null,throw,new,connect,transport,exception,null,can,t,connect,to,a,null,node,close,lock,read,lock,lock,try,ensure,open,try,releasable,ignored,connection,lock,acquire,node,get,id,transport,connection,connection,connected,nodes,get,node,if,connection,null,return,boolean,success,false,try,connection,internal,open,connection,node,resolved,profile,connection,validator,accept,connection,resolved,profile,connected,nodes,put,node,connection,if,logger,is,debug,enabled,logger,debug,connected,to,node,node,try,connection,listener,on,node,connected,node,finally,final,transport,connection,final,connection,connection,connection,add,close,listener,action,listener,wrap,connected,nodes,remove,node,final,connection,connection,listener,on,node,disconnected,node,if,connection,is,closed,throw,new,node,not,connected,exception,node,connection,concurrently,closed,success,true,catch,connect,transport,exception,e,throw,e,catch,exception,e,throw,new,connect,transport,exception,node,general,node,connection,failure,e,finally,if,success,false,logger,trace,new,parameterized,message,failed,to,connect,to,cleaning,dangling,connections,node,ioutils,close,while,handling,exception,connection,finally,close,lock,read,lock,unlock
ConnectionManager -> public void disconnectFromNode(DiscoveryNode node);1534203100;Disconnected from the given node, if not connected, will do nothing.;public void disconnectFromNode(DiscoveryNode node) {_        Transport.Connection nodeChannels = connectedNodes.remove(node)__        if (nodeChannels != null) {_            _            nodeChannels.close()__        }_    };disconnected,from,the,given,node,if,not,connected,will,do,nothing;public,void,disconnect,from,node,discovery,node,node,transport,connection,node,channels,connected,nodes,remove,node,if,node,channels,null,node,channels,close
ConnectionManager -> public void disconnectFromNode(DiscoveryNode node);1534362961;Disconnected from the given node, if not connected, will do nothing.;public void disconnectFromNode(DiscoveryNode node) {_        Transport.Connection nodeChannels = connectedNodes.remove(node)__        if (nodeChannels != null) {_            _            nodeChannels.close()__        }_    };disconnected,from,the,given,node,if,not,connected,will,do,nothing;public,void,disconnect,from,node,discovery,node,node,transport,connection,node,channels,connected,nodes,remove,node,if,node,channels,null,node,channels,close
ConnectionManager -> public void disconnectFromNode(DiscoveryNode node);1534755962;Disconnected from the given node, if not connected, will do nothing.;public void disconnectFromNode(DiscoveryNode node) {_        Transport.Connection nodeChannels = connectedNodes.remove(node)__        if (nodeChannels != null) {_            _            nodeChannels.close()__        }_    };disconnected,from,the,given,node,if,not,connected,will,do,nothing;public,void,disconnect,from,node,discovery,node,node,transport,connection,node,channels,connected,nodes,remove,node,if,node,channels,null,node,channels,close
ConnectionManager -> public void disconnectFromNode(DiscoveryNode node);1535046779;Disconnected from the given node, if not connected, will do nothing.;public void disconnectFromNode(DiscoveryNode node) {_        Transport.Connection nodeChannels = connectedNodes.remove(node)__        if (nodeChannels != null) {_            _            nodeChannels.close()__        }_    };disconnected,from,the,given,node,if,not,connected,will,do,nothing;public,void,disconnect,from,node,discovery,node,node,transport,connection,node,channels,connected,nodes,remove,node,if,node,channels,null,node,channels,close
ConnectionManager -> public void disconnectFromNode(DiscoveryNode node);1537806831;Disconnected from the given node, if not connected, will do nothing.;public void disconnectFromNode(DiscoveryNode node) {_        Transport.Connection nodeChannels = connectedNodes.remove(node)__        if (nodeChannels != null) {_            _            nodeChannels.close()__        }_    };disconnected,from,the,given,node,if,not,connected,will,do,nothing;public,void,disconnect,from,node,discovery,node,node,transport,connection,node,channels,connected,nodes,remove,node,if,node,channels,null,node,channels,close
ConnectionManager -> public void disconnectFromNode(DiscoveryNode node);1540503333;Disconnected from the given node, if not connected, will do nothing.;public void disconnectFromNode(DiscoveryNode node) {_        Transport.Connection nodeChannels = connectedNodes.remove(node)__        if (nodeChannels != null) {_            _            nodeChannels.close()__        }_    };disconnected,from,the,given,node,if,not,connected,will,do,nothing;public,void,disconnect,from,node,discovery,node,node,transport,connection,node,channels,connected,nodes,remove,node,if,node,channels,null,node,channels,close
ConnectionManager -> public void disconnectFromNode(DiscoveryNode node);1541008027;Disconnected from the given node, if not connected, will do nothing.;public void disconnectFromNode(DiscoveryNode node) {_        Transport.Connection nodeChannels = connectedNodes.remove(node)__        if (nodeChannels != null) {_            _            nodeChannels.close()__        }_    };disconnected,from,the,given,node,if,not,connected,will,do,nothing;public,void,disconnect,from,node,discovery,node,node,transport,connection,node,channels,connected,nodes,remove,node,if,node,channels,null,node,channels,close
ConnectionManager -> public void disconnectFromNode(DiscoveryNode node);1541092382;Disconnected from the given node, if not connected, will do nothing.;public void disconnectFromNode(DiscoveryNode node) {_        Transport.Connection nodeChannels = connectedNodes.remove(node)__        if (nodeChannels != null) {_            _            nodeChannels.close()__        }_    };disconnected,from,the,given,node,if,not,connected,will,do,nothing;public,void,disconnect,from,node,discovery,node,node,transport,connection,node,channels,connected,nodes,remove,node,if,node,channels,null,node,channels,close
ConnectionManager -> public void disconnectFromNode(DiscoveryNode node);1543506953;Disconnected from the given node, if not connected, will do nothing.;public void disconnectFromNode(DiscoveryNode node) {_        Transport.Connection nodeChannels = connectedNodes.remove(node)__        if (nodeChannels != null) {_            _            nodeChannels.close()__        }_    };disconnected,from,the,given,node,if,not,connected,will,do,nothing;public,void,disconnect,from,node,discovery,node,node,transport,connection,node,channels,connected,nodes,remove,node,if,node,channels,null,node,channels,close
ConnectionManager -> public void disconnectFromNode(DiscoveryNode node);1543593872;Disconnected from the given node, if not connected, will do nothing.;public void disconnectFromNode(DiscoveryNode node) {_        Transport.Connection nodeChannels = connectedNodes.remove(node)__        if (nodeChannels != null) {_            _            nodeChannels.close()__        }_    };disconnected,from,the,given,node,if,not,connected,will,do,nothing;public,void,disconnect,from,node,discovery,node,node,transport,connection,node,channels,connected,nodes,remove,node,if,node,channels,null,node,channels,close
ConnectionManager -> public void disconnectFromNode(DiscoveryNode node);1543602642;Disconnected from the given node, if not connected, will do nothing.;public void disconnectFromNode(DiscoveryNode node) {_        Transport.Connection nodeChannels = connectedNodes.remove(node)__        if (nodeChannels != null) {_            _            nodeChannels.close()__        }_    };disconnected,from,the,given,node,if,not,connected,will,do,nothing;public,void,disconnect,from,node,discovery,node,node,transport,connection,node,channels,connected,nodes,remove,node,if,node,channels,null,node,channels,close
ConnectionManager -> public void disconnectFromNode(DiscoveryNode node);1550601141;Disconnected from the given node, if not connected, will do nothing.;public void disconnectFromNode(DiscoveryNode node) {_        Transport.Connection nodeChannels = connectedNodes.remove(node)__        if (nodeChannels != null) {_            _            nodeChannels.close()__        }_    };disconnected,from,the,given,node,if,not,connected,will,do,nothing;public,void,disconnect,from,node,discovery,node,node,transport,connection,node,channels,connected,nodes,remove,node,if,node,channels,null,node,channels,close
