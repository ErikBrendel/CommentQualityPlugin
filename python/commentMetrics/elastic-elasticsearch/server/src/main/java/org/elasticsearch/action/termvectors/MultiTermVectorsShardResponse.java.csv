commented;modifiers;parameterAmount;loc;comment;code
false;public;2;5;;public void add(int location, TermVectorsResponse response) {     locations.add(location).     responses.add(response).     failures.add(null). }
false;public;2;5;;public void add(int location, MultiTermVectorsResponse.Failure failure) {     locations.add(location).     responses.add(null).     failures.add(failure). }
false;public;1;23;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     int size = in.readVInt().     locations = new IntArrayList(size).     responses = new ArrayList<>(size).     failures = new ArrayList<>(size).     for (int i = 0. i < size. i++) {         locations.add(in.readVInt()).         if (in.readBoolean()) {             TermVectorsResponse response = new TermVectorsResponse().             response.readFrom(in).             responses.add(response).         } else {             responses.add(null).         }         if (in.readBoolean()) {             failures.add(MultiTermVectorsResponse.Failure.readFailure(in)).         } else {             failures.add(null).         }     } }
false;public;1;20;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeVInt(locations.size()).     for (int i = 0. i < locations.size(). i++) {         out.writeVInt(locations.get(i)).         if (responses.get(i) == null) {             out.writeBoolean(false).         } else {             out.writeBoolean(true).             responses.get(i).writeTo(out).         }         if (failures.get(i) == null) {             out.writeBoolean(false).         } else {             out.writeBoolean(true).             failures.get(i).writeTo(out).         }     } }
