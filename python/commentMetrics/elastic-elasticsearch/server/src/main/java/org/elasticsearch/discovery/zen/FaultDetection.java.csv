commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public void close() {     transportService.removeConnectionListener(connectionListener). }
true;abstract;1;1;/**  * This method will be called when the {@link org.elasticsearch.transport.TransportService} raised a node disconnected event  */ ;/**  * This method will be called when the {@link org.elasticsearch.transport.TransportService} raised a node disconnected event  */ abstract void handleTransportDisconnect(DiscoveryNode node).
false;public;1;4;;@Override public void onFailure(Exception e) {     logger.warn("failed to handle transport disconnect for node: {}", node). }
false;protected;0;4;;@Override protected void doRun() {     handleTransportDisconnect(node). }
false;public;1;15;;@Override public void onNodeDisconnected(DiscoveryNode node) {     AbstractRunnable runnable = new AbstractRunnable() {          @Override         public void onFailure(Exception e) {             logger.warn("failed to handle transport disconnect for node: {}", node).         }          @Override         protected void doRun() {             handleTransportDisconnect(node).         }     }.     threadPool.generic().execute(runnable). }
