commented;modifiers;parameterAmount;loc;comment;code
true;default;2;3;/**  * Return deciders used to customize where shards are allocated.  *  * @param settings Settings for the node  * @param clusterSettings Settings for the cluster  * @return Custom {@link AllocationDecider} instances  */ ;/**  * Return deciders used to customize where shards are allocated.  *  * @param settings Settings for the node  * @param clusterSettings Settings for the cluster  * @return Custom {@link AllocationDecider} instances  */ default Collection<AllocationDecider> createAllocationDeciders(Settings settings, ClusterSettings clusterSettings) {     return Collections.emptyList(). }
true;default;2;3;/**  * Return {@link ShardsAllocator} implementations added by this plugin.  *  * The key of the returned {@link Map} is the name of the allocator, and the value  * is a function to construct the allocator.  *  * @param settings Settings for the node  * @param clusterSettings Settings for the cluster  * @return A map of allocator implementations  */ ;/**  * Return {@link ShardsAllocator} implementations added by this plugin.  *  * The key of the returned {@link Map} is the name of the allocator, and the value  * is a function to construct the allocator.  *  * @param settings Settings for the node  * @param clusterSettings Settings for the cluster  * @return A map of allocator implementations  */ default Map<String, Supplier<ShardsAllocator>> getShardsAllocators(Settings settings, ClusterSettings clusterSettings) {     return Collections.emptyMap(). }
true;default;0;2;/**  * Called when the node is started  */ ;/**  * Called when the node is started  */ default void onNodeStarted() { }
