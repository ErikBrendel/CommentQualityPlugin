# id;timestamp;commentText;codeText;commentWords;codeWords
LeaderChecker -> public void updateLeader(@Nullable final DiscoveryNode leader);1544081506;Starts and / or stops a leader checker for the given leader. Should only be called after successfully joining this leader.__@param leader the node to be checked as leader, or null if checks should be disabled;public void updateLeader(@Nullable final DiscoveryNode leader) {_        assert transportService.getLocalNode().equals(leader) == false__        final CheckScheduler checkScheduler__        if (leader != null) {_            checkScheduler = new CheckScheduler(leader)__        } else {_            checkScheduler = null__        }_        CheckScheduler previousChecker = currentChecker.getAndSet(checkScheduler)__        if (previousChecker != null) {_            previousChecker.close()__        }_        if (checkScheduler != null) {_            checkScheduler.handleWakeUp()__        }_    };starts,and,or,stops,a,leader,checker,for,the,given,leader,should,only,be,called,after,successfully,joining,this,leader,param,leader,the,node,to,be,checked,as,leader,or,null,if,checks,should,be,disabled;public,void,update,leader,nullable,final,discovery,node,leader,assert,transport,service,get,local,node,equals,leader,false,final,check,scheduler,check,scheduler,if,leader,null,check,scheduler,new,check,scheduler,leader,else,check,scheduler,null,check,scheduler,previous,checker,current,checker,get,and,set,check,scheduler,if,previous,checker,null,previous,checker,close,if,check,scheduler,null,check,scheduler,handle,wake,up
LeaderChecker -> public void updateLeader(@Nullable final DiscoveryNode leader);1545319912;Starts and / or stops a leader checker for the given leader. Should only be called after successfully joining this leader.__@param leader the node to be checked as leader, or null if checks should be disabled;public void updateLeader(@Nullable final DiscoveryNode leader) {_        assert transportService.getLocalNode().equals(leader) == false__        final CheckScheduler checkScheduler__        if (leader != null) {_            checkScheduler = new CheckScheduler(leader)__        } else {_            checkScheduler = null__        }_        CheckScheduler previousChecker = currentChecker.getAndSet(checkScheduler)__        if (previousChecker != null) {_            previousChecker.close()__        }_        if (checkScheduler != null) {_            checkScheduler.handleWakeUp()__        }_    };starts,and,or,stops,a,leader,checker,for,the,given,leader,should,only,be,called,after,successfully,joining,this,leader,param,leader,the,node,to,be,checked,as,leader,or,null,if,checks,should,be,disabled;public,void,update,leader,nullable,final,discovery,node,leader,assert,transport,service,get,local,node,equals,leader,false,final,check,scheduler,check,scheduler,if,leader,null,check,scheduler,new,check,scheduler,leader,else,check,scheduler,null,check,scheduler,previous,checker,current,checker,get,and,set,check,scheduler,if,previous,checker,null,previous,checker,close,if,check,scheduler,null,check,scheduler,handle,wake,up
LeaderChecker -> public void updateLeader(@Nullable final DiscoveryNode leader);1548953505;Starts and / or stops a leader checker for the given leader. Should only be called after successfully joining this leader.__@param leader the node to be checked as leader, or null if checks should be disabled;public void updateLeader(@Nullable final DiscoveryNode leader) {_        assert transportService.getLocalNode().equals(leader) == false__        final CheckScheduler checkScheduler__        if (leader != null) {_            checkScheduler = new CheckScheduler(leader)__        } else {_            checkScheduler = null__        }_        CheckScheduler previousChecker = currentChecker.getAndSet(checkScheduler)__        if (previousChecker != null) {_            previousChecker.close()__        }_        if (checkScheduler != null) {_            checkScheduler.handleWakeUp()__        }_    };starts,and,or,stops,a,leader,checker,for,the,given,leader,should,only,be,called,after,successfully,joining,this,leader,param,leader,the,node,to,be,checked,as,leader,or,null,if,checks,should,be,disabled;public,void,update,leader,nullable,final,discovery,node,leader,assert,transport,service,get,local,node,equals,leader,false,final,check,scheduler,check,scheduler,if,leader,null,check,scheduler,new,check,scheduler,leader,else,check,scheduler,null,check,scheduler,previous,checker,current,checker,get,and,set,check,scheduler,if,previous,checker,null,previous,checker,close,if,check,scheduler,null,check,scheduler,handle,wake,up
LeaderChecker -> public void updateLeader(@Nullable final DiscoveryNode leader);1549289472;Starts and / or stops a leader checker for the given leader. Should only be called after successfully joining this leader.__@param leader the node to be checked as leader, or null if checks should be disabled;public void updateLeader(@Nullable final DiscoveryNode leader) {_        assert transportService.getLocalNode().equals(leader) == false__        final CheckScheduler checkScheduler__        if (leader != null) {_            checkScheduler = new CheckScheduler(leader)__        } else {_            checkScheduler = null__        }_        CheckScheduler previousChecker = currentChecker.getAndSet(checkScheduler)__        if (previousChecker != null) {_            previousChecker.close()__        }_        if (checkScheduler != null) {_            checkScheduler.handleWakeUp()__        }_    };starts,and,or,stops,a,leader,checker,for,the,given,leader,should,only,be,called,after,successfully,joining,this,leader,param,leader,the,node,to,be,checked,as,leader,or,null,if,checks,should,be,disabled;public,void,update,leader,nullable,final,discovery,node,leader,assert,transport,service,get,local,node,equals,leader,false,final,check,scheduler,check,scheduler,if,leader,null,check,scheduler,new,check,scheduler,leader,else,check,scheduler,null,check,scheduler,previous,checker,current,checker,get,and,set,check,scheduler,if,previous,checker,null,previous,checker,close,if,check,scheduler,null,check,scheduler,handle,wake,up
LeaderChecker -> public void setCurrentNodes(DiscoveryNodes discoveryNodes);1544081506;Update the "known" discovery nodes. Should be called on the leader before a new cluster state is published to reflect the new_publication targets, and also called if a leader becomes a non-leader._TODO if heartbeats can make nodes become followers then this needs to be called before a heartbeat is sent to a new node too._<p>_isLocalNodeElectedMaster() should reflect whether this node is a leader, and nodeExists()_should indicate whether nodes are known publication targets or not.;public void setCurrentNodes(DiscoveryNodes discoveryNodes) {_        logger.trace("setCurrentNodes: {}", discoveryNodes)__        this.discoveryNodes = discoveryNodes__    };update,the,known,discovery,nodes,should,be,called,on,the,leader,before,a,new,cluster,state,is,published,to,reflect,the,new,publication,targets,and,also,called,if,a,leader,becomes,a,non,leader,todo,if,heartbeats,can,make,nodes,become,followers,then,this,needs,to,be,called,before,a,heartbeat,is,sent,to,a,new,node,too,p,is,local,node,elected,master,should,reflect,whether,this,node,is,a,leader,and,node,exists,should,indicate,whether,nodes,are,known,publication,targets,or,not;public,void,set,current,nodes,discovery,nodes,discovery,nodes,logger,trace,set,current,nodes,discovery,nodes,this,discovery,nodes,discovery,nodes
LeaderChecker -> public void setCurrentNodes(DiscoveryNodes discoveryNodes);1545319912;Update the "known" discovery nodes. Should be called on the leader before a new cluster state is published to reflect the new_publication targets, and also called if a leader becomes a non-leader._TODO if heartbeats can make nodes become followers then this needs to be called before a heartbeat is sent to a new node too._<p>_isLocalNodeElectedMaster() should reflect whether this node is a leader, and nodeExists()_should indicate whether nodes are known publication targets or not.;public void setCurrentNodes(DiscoveryNodes discoveryNodes) {_        logger.trace("setCurrentNodes: {}", discoveryNodes)__        this.discoveryNodes = discoveryNodes__    };update,the,known,discovery,nodes,should,be,called,on,the,leader,before,a,new,cluster,state,is,published,to,reflect,the,new,publication,targets,and,also,called,if,a,leader,becomes,a,non,leader,todo,if,heartbeats,can,make,nodes,become,followers,then,this,needs,to,be,called,before,a,heartbeat,is,sent,to,a,new,node,too,p,is,local,node,elected,master,should,reflect,whether,this,node,is,a,leader,and,node,exists,should,indicate,whether,nodes,are,known,publication,targets,or,not;public,void,set,current,nodes,discovery,nodes,discovery,nodes,logger,trace,set,current,nodes,discovery,nodes,this,discovery,nodes,discovery,nodes
LeaderChecker -> public void setCurrentNodes(DiscoveryNodes discoveryNodes);1548953505;Update the "known" discovery nodes. Should be called on the leader before a new cluster state is published to reflect the new_publication targets, and also called if a leader becomes a non-leader._TODO if heartbeats can make nodes become followers then this needs to be called before a heartbeat is sent to a new node too._<p>_isLocalNodeElectedMaster() should reflect whether this node is a leader, and nodeExists()_should indicate whether nodes are known publication targets or not.;public void setCurrentNodes(DiscoveryNodes discoveryNodes) {_        logger.trace("setCurrentNodes: {}", discoveryNodes)__        this.discoveryNodes = discoveryNodes__    };update,the,known,discovery,nodes,should,be,called,on,the,leader,before,a,new,cluster,state,is,published,to,reflect,the,new,publication,targets,and,also,called,if,a,leader,becomes,a,non,leader,todo,if,heartbeats,can,make,nodes,become,followers,then,this,needs,to,be,called,before,a,heartbeat,is,sent,to,a,new,node,too,p,is,local,node,elected,master,should,reflect,whether,this,node,is,a,leader,and,node,exists,should,indicate,whether,nodes,are,known,publication,targets,or,not;public,void,set,current,nodes,discovery,nodes,discovery,nodes,logger,trace,set,current,nodes,discovery,nodes,this,discovery,nodes,discovery,nodes
LeaderChecker -> public void setCurrentNodes(DiscoveryNodes discoveryNodes);1549289472;Update the "known" discovery nodes. Should be called on the leader before a new cluster state is published to reflect the new_publication targets, and also called if a leader becomes a non-leader._TODO if heartbeats can make nodes become followers then this needs to be called before a heartbeat is sent to a new node too._<p>_isLocalNodeElectedMaster() should reflect whether this node is a leader, and nodeExists()_should indicate whether nodes are known publication targets or not.;public void setCurrentNodes(DiscoveryNodes discoveryNodes) {_        logger.trace("setCurrentNodes: {}", discoveryNodes)__        this.discoveryNodes = discoveryNodes__    };update,the,known,discovery,nodes,should,be,called,on,the,leader,before,a,new,cluster,state,is,published,to,reflect,the,new,publication,targets,and,also,called,if,a,leader,becomes,a,non,leader,todo,if,heartbeats,can,make,nodes,become,followers,then,this,needs,to,be,called,before,a,heartbeat,is,sent,to,a,new,node,too,p,is,local,node,elected,master,should,reflect,whether,this,node,is,a,leader,and,node,exists,should,indicate,whether,nodes,are,known,publication,targets,or,not;public,void,set,current,nodes,discovery,nodes,discovery,nodes,logger,trace,set,current,nodes,discovery,nodes,this,discovery,nodes,discovery,nodes
