commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(nodeId).     out.writeString(name). }
false;;1;1;;void setName(String name) {     this.name = name. }
false;public;0;1;;public String getName() {     return name. }
false;public;0;1;;public String getNodeId() {     return nodeId. }
false;public;2;8;;public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(nodeId).     {         builder.field(NAME, name).     }     builder.endObject().     return builder. }
false;public;1;12;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     NodeView other = (NodeView) obj.     return Objects.equals(nodeId, other.nodeId) && Objects.equals(name, other.name). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(nodeId, name). }
false;public;1;5;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     this.nodes = in.readList(NodeView::new). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeList(nodes). }
false;public;0;3;;public List<NodeView> getNodes() {     return nodes. }
false;protected;1;3;;protected void setNodes(List<NodeView> nodes) {     this.nodes = nodes. }
false;public;2;15;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     {         builder.startObject(NODES).         {             for (NodeView node : nodes) {                 node.toXContent(builder, params).             }         }         builder.endObject().     }     builder.endObject().     return builder. }
false;public,static;1;3;;public static VerifyRepositoryResponse fromXContent(XContentParser parser) {     return PARSER.apply(parser, null). }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this). }
false;public;1;7;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     VerifyRepositoryResponse that = (VerifyRepositoryResponse) o.     return Objects.equals(nodes, that.nodes). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(nodes). }
