commented;modifiers;parameterAmount;loc;comment;code
false;public;0;46;;@Override public Map<Class<?>, XContentBuilder.Writer> getXContentWriters() {     Map<Class<?>, XContentBuilder.Writer> writers = new HashMap<>().     // Fully-qualified here to reduce ambiguity around our (ES') Version class     writers.put(org.apache.lucene.util.Version.class, (b, v) -> b.value(Objects.toString(v))).     writers.put(DateTimeZone.class, (b, v) -> b.value(Objects.toString(v))).     writers.put(CachedDateTimeZone.class, (b, v) -> b.value(Objects.toString(v))).     writers.put(FixedDateTimeZone.class, (b, v) -> b.value(Objects.toString(v))).     writers.put(MutableDateTime.class, XContentBuilder::timeValue).     writers.put(DateTime.class, XContentBuilder::timeValue).     writers.put(TimeValue.class, (b, v) -> b.value(v.toString())).     writers.put(ZonedDateTime.class, XContentBuilder::timeValue).     writers.put(OffsetDateTime.class, XContentBuilder::timeValue).     writers.put(OffsetTime.class, XContentBuilder::timeValue).     writers.put(java.time.Instant.class, XContentBuilder::timeValue).     writers.put(LocalDateTime.class, XContentBuilder::timeValue).     writers.put(LocalDate.class, XContentBuilder::timeValue).     writers.put(LocalTime.class, XContentBuilder::timeValue).     writers.put(DayOfWeek.class, (b, v) -> b.value(v.toString())).     writers.put(Month.class, (b, v) -> b.value(v.toString())).     writers.put(MonthDay.class, (b, v) -> b.value(v.toString())).     writers.put(Year.class, (b, v) -> b.value(v.toString())).     writers.put(Duration.class, (b, v) -> b.value(v.toString())).     writers.put(Period.class, (b, v) -> b.value(v.toString())).     writers.put(JodaCompatibleZonedDateTime.class, XContentBuilder::timeValue).     writers.put(BytesReference.class, (b, v) -> {         if (v == null) {             b.nullValue().         } else {             BytesRef bytes = ((BytesReference) v).toBytesRef().             b.value(bytes.bytes, bytes.offset, bytes.length).         }     }).     writers.put(BytesRef.class, (b, v) -> {         if (v == null) {             b.nullValue().         } else {             BytesRef bytes = (BytesRef) v.             b.value(bytes.bytes, bytes.offset, bytes.length).         }     }).     return writers. }
false;public;0;7;;@Override public Map<Class<?>, XContentBuilder.HumanReadableTransformer> getXContentHumanReadableTransformers() {     Map<Class<?>, XContentBuilder.HumanReadableTransformer> transformers = new HashMap<>().     transformers.put(TimeValue.class, v -> ((TimeValue) v).millis()).     transformers.put(ByteSizeValue.class, v -> ((ByteSizeValue) v).getBytes()).     return transformers. }
false;public;0;23;;@Override public Map<Class<?>, Function<Object, Object>> getDateTransformers() {     Map<Class<?>, Function<Object, Object>> transformers = new HashMap<>().     transformers.put(Date.class, d -> DEFAULT_DATE_PRINTER.print(((Date) d).getTime())).     transformers.put(DateTime.class, d -> DEFAULT_DATE_PRINTER.print((DateTime) d)).     transformers.put(MutableDateTime.class, d -> DEFAULT_DATE_PRINTER.print((MutableDateTime) d)).     transformers.put(ReadableInstant.class, d -> DEFAULT_DATE_PRINTER.print((ReadableInstant) d)).     transformers.put(Long.class, d -> DEFAULT_DATE_PRINTER.print((long) d)).     transformers.put(Calendar.class, d -> DEFAULT_DATE_PRINTER.print(((Calendar) d).getTimeInMillis())).     transformers.put(GregorianCalendar.class, d -> DEFAULT_DATE_PRINTER.print(((Calendar) d).getTimeInMillis())).     transformers.put(Instant.class, d -> DEFAULT_DATE_PRINTER.print((Instant) d)).     transformers.put(ZonedDateTime.class, d -> DEFAULT_FORMATTER.format((ZonedDateTime) d)).     transformers.put(OffsetDateTime.class, d -> DEFAULT_FORMATTER.format((OffsetDateTime) d)).     transformers.put(OffsetTime.class, d -> OFFSET_TIME_FORMATTER.format((OffsetTime) d)).     transformers.put(LocalDateTime.class, d -> DEFAULT_FORMATTER.format((LocalDateTime) d)).     transformers.put(java.time.Instant.class, d -> DEFAULT_FORMATTER.format(ZonedDateTime.ofInstant((java.time.Instant) d, ZoneOffset.UTC))).     transformers.put(LocalDate.class, d -> ((LocalDate) d).toString()).     transformers.put(LocalTime.class, d -> LOCAL_TIME_FORMATTER.format((LocalTime) d)).     transformers.put(JodaCompatibleZonedDateTime.class, d -> DEFAULT_FORMATTER.format(((JodaCompatibleZonedDateTime) d).getZonedDateTime())).     return transformers. }
