commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void onResponse(Response response) {     delegate.onResponse(response). }
false;public;1;4;;@Override public void onFailure(Exception e) {     delegate.onFailure(e). }
true;public;2;3;/**  * Registers the given actions which are called when this step is completed. If this step is completed successfully,  * the {@code onResponse} is called with the result. otherwise the {@code onFailure} is called with the failure.  *  * @param onResponse is called when this step is completed successfully  * @param onFailure  is called when this step is completed with a failure  */ ;/**  * Registers the given actions which are called when this step is completed. If this step is completed successfully,  * the {@code onResponse} is called with the result. otherwise the {@code onFailure} is called with the failure.  *  * @param onResponse is called when this step is completed successfully  * @param onFailure  is called when this step is completed with a failure  */ public void whenComplete(CheckedConsumer<Response, Exception> onResponse, Consumer<Exception> onFailure) {     delegate.addListener(ActionListener.wrap(onResponse, onFailure), EsExecutors.newDirectExecutorService(), null). }
true;public;0;6;/**  * Gets the result of this step. This method will throw {@link IllegalStateException} if this step is not completed yet.  */ ;/**  * Gets the result of this step. This method will throw {@link IllegalStateException} if this step is not completed yet.  */ public Response result() {     if (delegate.isDone() == false) {         throw new IllegalStateException("step is not completed yet").     }     // this future is done already - use a non-blocking method.     return FutureUtils.get(delegate, 0L, TimeUnit.NANOSECONDS). }
