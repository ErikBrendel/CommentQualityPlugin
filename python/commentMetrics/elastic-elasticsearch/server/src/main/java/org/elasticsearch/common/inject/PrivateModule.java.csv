commented;modifiers;parameterAmount;loc;comment;code
false;public,final,synchronized;1;14;;@Override public final synchronized void configure(Binder binder) {     if (this.binder != null) {         throw new IllegalStateException("Re-entry is not allowed.").     }     // Guice treats PrivateModules specially and passes in a PrivateBinder automatically.     this.binder = (PrivateBinder) binder.skipSources(PrivateModule.class).     try {         configure().     } finally {         this.binder = null.     } }
true;protected,abstract;0;1;/**  * Creates bindings and other configurations private to this module. Use {@link #expose(Class)  * expose()} to make the bindings in this module available externally.  */ ;/**  * Creates bindings and other configurations private to this module. Use {@link #expose(Class)  * expose()} to make the bindings in this module available externally.  */ protected abstract void configure().
true;protected,final;1;3;/**  * Makes the binding for {@code key} available to other modules and the injector.  */ ;/**  * Makes the binding for {@code key} available to other modules and the injector.  */ protected final <T> void expose(Key<T> key) {     binder.expose(key). }
true;protected,final;1;3;/**  * Makes a binding for {@code type} available to other modules and the injector. Use {@link  * AnnotatedElementBuilder#annotatedWith(Class) annotatedWith()} to expose {@code type} with a  * binding annotation.  */ ;/**  * Makes a binding for {@code type} available to other modules and the injector. Use {@link  * AnnotatedElementBuilder#annotatedWith(Class) annotatedWith()} to expose {@code type} with a  * binding annotation.  */ protected final AnnotatedElementBuilder expose(Class<?> type) {     return binder.expose(type). }
true;protected,final;1;3;/**  * Makes a binding for {@code type} available to other modules and the injector. Use {@link  * AnnotatedElementBuilder#annotatedWith(Class) annotatedWith()} to expose {@code type} with a  * binding annotation.  */ ;/**  * Makes a binding for {@code type} available to other modules and the injector. Use {@link  * AnnotatedElementBuilder#annotatedWith(Class) annotatedWith()} to expose {@code type} with a  * binding annotation.  */ protected final AnnotatedElementBuilder expose(TypeLiteral<?> type) {     return binder.expose(type). }
true;protected,final;0;3;/**  * Returns the current binder.  */ ;// everything below is copied from AbstractModule /**  * Returns the current binder.  */ protected final PrivateBinder binder() {     return binder. }
true;protected,final;1;3;/**  * @see Binder#bind(Key)  */ ;/**  * @see Binder#bind(Key)  */ protected final <T> LinkedBindingBuilder<T> bind(Key<T> key) {     return binder.bind(key). }
true;protected,final;1;3;/**  * @see Binder#bind(TypeLiteral)  */ ;/**  * @see Binder#bind(TypeLiteral)  */ protected final <T> AnnotatedBindingBuilder<T> bind(TypeLiteral<T> typeLiteral) {     return binder.bind(typeLiteral). }
true;protected,final;1;3;/**  * @see Binder#bind(Class)  */ ;/**  * @see Binder#bind(Class)  */ protected final <T> AnnotatedBindingBuilder<T> bind(Class<T> clazz) {     return binder.bind(clazz). }
true;protected,final;1;3;/**  * @see Binder#install(Module)  */ ;/**  * @see Binder#install(Module)  */ protected final void install(Module module) {     binder.install(module). }
true;protected,final;2;3;/**  * @see Binder#addError(String, Object[])  */ ;/**  * @see Binder#addError(String, Object[])  */ protected final void addError(String message, Object... arguments) {     binder.addError(message, arguments). }
true;protected,final;1;3;/**  * @see Binder#addError(Throwable)  */ ;/**  * @see Binder#addError(Throwable)  */ protected final void addError(Throwable t) {     binder.addError(t). }
true;protected,final;1;3;/**  * @see Binder#addError(Message)  */ ;/**  * @see Binder#addError(Message)  */ protected final void addError(Message message) {     binder.addError(message). }
true;protected,final;1;3;/**  * @see Binder#getProvider(Key)  */ ;/**  * @see Binder#getProvider(Key)  */ protected final <T> Provider<T> getProvider(Key<T> key) {     return binder.getProvider(key). }
true;protected,final;1;3;/**  * @see Binder#getProvider(Class)  */ ;/**  * @see Binder#getProvider(Class)  */ protected final <T> Provider<T> getProvider(Class<T> type) {     return binder.getProvider(type). }
true;protected;1;3;/**  * @see Binder#getMembersInjector(Class)  */ ;/**  * @see Binder#getMembersInjector(Class)  */ protected <T> MembersInjector<T> getMembersInjector(Class<T> type) {     return binder.getMembersInjector(type). }
true;protected;1;3;/**  * @see Binder#getMembersInjector(TypeLiteral)  */ ;/**  * @see Binder#getMembersInjector(TypeLiteral)  */ protected <T> MembersInjector<T> getMembersInjector(TypeLiteral<T> type) {     return binder.getMembersInjector(type). }
