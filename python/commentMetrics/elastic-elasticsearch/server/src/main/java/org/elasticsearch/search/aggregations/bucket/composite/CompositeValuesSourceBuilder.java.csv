commented;modifiers;parameterAmount;loc;comment;code
false;public,final;1;27;;@Override public final void writeTo(StreamOutput out) throws IOException {     out.writeString(name).     out.writeOptionalString(field).     boolean hasScript = script != null.     out.writeBoolean(hasScript).     if (hasScript) {         script.writeTo(out).     }     boolean hasValueType = valueType != null.     out.writeBoolean(hasValueType).     if (hasValueType) {         valueType.writeTo(out).     }     if (out.getVersion().onOrAfter(Version.V_6_4_0)) {         out.writeBoolean(missingBucket).     }     if (out.getVersion().before(Version.V_7_0_0)) {         // write missing value for BWC         out.writeGenericValue(null).     }     order.writeTo(out).     if (out.getVersion().onOrAfter(Version.V_6_3_0)) {         out.writeOptionalString(format).     }     innerWriteTo(out). }
false;protected,abstract;1;1;;protected abstract void innerWriteTo(StreamOutput out) throws IOException.
false;protected,abstract;2;1;;protected abstract void doXContentBody(XContentBuilder builder, Params params) throws IOException.
false;public,final;2;21;;@Override public final XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(type()).     if (field != null) {         builder.field("field", field).     }     if (script != null) {         builder.field("script", script).     }     builder.field("missing_bucket", missingBucket).     if (valueType != null) {         builder.field("value_type", valueType.getPreferredName()).     }     if (format != null) {         builder.field("format", format).     }     builder.field("order", order).     doXContentBody(builder, params).     builder.endObject().     return builder. }
false;public,final;0;4;;@Override public final int hashCode() {     return Objects.hash(field, missingBucket, script, valueType, order, format, innerHashCode()). }
false;protected,abstract;0;1;;protected abstract int innerHashCode().
false;public;1;15;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     @SuppressWarnings("unchecked")     AB that = (AB) o.     return Objects.equals(field, that.field()) && Objects.equals(script, that.script()) && Objects.equals(valueType, that.valueType()) && Objects.equals(missingBucket, that.missingBucket()) && Objects.equals(order, that.order()) && Objects.equals(format, that.format()) && innerEquals(that). }
false;protected,abstract;1;1;;protected abstract boolean innerEquals(AB builder).
false;public;0;3;;public String name() {     return name. }
false;abstract;0;1;;abstract String type().
true;public;1;8;/**  * Sets the field to use for this source  */ ;/**  * Sets the field to use for this source  */ @SuppressWarnings("unchecked") public AB field(String field) {     if (field == null) {         throw new IllegalArgumentException("[field] must not be null").     }     this.field = field.     return (AB) this. }
true;public;0;3;/**  * Gets the field to use for this source  */ ;/**  * Gets the field to use for this source  */ public String field() {     return field. }
true;public;1;8;/**  * Sets the script to use for this source  */ ;/**  * Sets the script to use for this source  */ @SuppressWarnings("unchecked") public AB script(Script script) {     if (script == null) {         throw new IllegalArgumentException("[script] must not be null").     }     this.script = script.     return (AB) this. }
true;public;0;3;/**  * Gets the script to use for this source  */ ;/**  * Gets the script to use for this source  */ public Script script() {     return script. }
true;public;1;8;/**  * Sets the {@link ValueType} for the value produced by this source  */ ;/**  * Sets the {@link ValueType} for the value produced by this source  */ @SuppressWarnings("unchecked") public AB valueType(ValueType valueType) {     if (valueType == null) {         throw new IllegalArgumentException("[valueType] must not be null").     }     this.valueType = valueType.     return (AB) this. }
true;public;0;3;/**  * Gets the {@link ValueType} for the value produced by this source  */ ;/**  * Gets the {@link ValueType} for the value produced by this source  */ public ValueType valueType() {     return valueType. }
true;public;1;5;/**  * If true an explicit `null bucket will represent documents with missing values.  */ ;/**  * If true an explicit `null bucket will represent documents with missing values.  */ @SuppressWarnings("unchecked") public AB missingBucket(boolean missingBucket) {     this.missingBucket = missingBucket.     return (AB) this. }
true;public;0;3;/**  * False if documents with missing values are ignored, otherwise missing values are  * represented by an explicit `null` value.  */ ;/**  * False if documents with missing values are ignored, otherwise missing values are  * represented by an explicit `null` value.  */ public boolean missingBucket() {     return missingBucket. }
true;public;1;8;/**  * Sets the {@link SortOrder} to use to sort values produced this source  */ ;/**  * Sets the {@link SortOrder} to use to sort values produced this source  */ @SuppressWarnings("unchecked") public AB order(String order) {     if (order == null) {         throw new IllegalArgumentException("[order] must not be null").     }     this.order = SortOrder.fromString(order).     return (AB) this. }
true;public;1;8;/**  * Sets the {@link SortOrder} to use to sort values produced this source  */ ;/**  * Sets the {@link SortOrder} to use to sort values produced this source  */ @SuppressWarnings("unchecked") public AB order(SortOrder order) {     if (order == null) {         throw new IllegalArgumentException("[order] must not be null").     }     this.order = order.     return (AB) this. }
true;public;0;3;/**  * Gets the {@link SortOrder} to use to sort values produced this source  */ ;/**  * Gets the {@link SortOrder} to use to sort values produced this source  */ public SortOrder order() {     return order. }
true;public;1;7;/**  * Sets the format to use for the output of the aggregation.  */ ;/**  * Sets the format to use for the output of the aggregation.  */ public AB format(String format) {     if (format == null) {         throw new IllegalArgumentException("[format] must not be null: [" + name + "]").     }     this.format = format.     return (AB) this. }
true;public;0;3;/**  * Gets the format to use for the output of the aggregation.  */ ;/**  * Gets the format to use for the output of the aggregation.  */ public String format() {     return format. }
true;protected,abstract;2;1;/**  * Creates a {@link CompositeValuesSourceConfig} for this source.  *  * @param context   The search context for this source.  * @param config    The {@link ValuesSourceConfig} for this source.  */ ;/**  * Creates a {@link CompositeValuesSourceConfig} for this source.  *  * @param context   The search context for this source.  * @param config    The {@link ValuesSourceConfig} for this source.  */ protected abstract CompositeValuesSourceConfig innerBuild(SearchContext context, ValuesSourceConfig<?> config) throws IOException.
false;public,final;1;5;;public final CompositeValuesSourceConfig build(SearchContext context) throws IOException {     ValuesSourceConfig<?> config = ValuesSourceConfig.resolve(context.getQueryShardContext(), valueType, field, script, null, null, format).     return innerBuild(context, config). }
