commented;modifiers;parameterAmount;loc;comment;code
false;;0;3;;List<Tuple<Processor, IngestMetric>> getProcessorsWithMetrics() {     return processorsWithMetrics. }
false;public;0;3;;public boolean isIgnoreFailure() {     return ignoreFailure. }
false;public;0;3;;public List<Processor> getOnFailureProcessors() {     return onFailureProcessors. }
false;public;0;3;;public List<Processor> getProcessors() {     return processors. }
false;public;0;5;;public List<Processor> flattenProcessors() {     List<Processor> allProcessors = new ArrayList<>(flattenProcessors(processors)).     allProcessors.addAll(flattenProcessors(onFailureProcessors)).     return allProcessors. }
false;private,static;1;11;;private static List<Processor> flattenProcessors(List<Processor> processors) {     List<Processor> flattened = new ArrayList<>().     for (Processor processor : processors) {         if (processor instanceof CompoundProcessor) {             flattened.addAll(((CompoundProcessor) processor).flattenProcessors()).         } else {             flattened.add(processor).         }     }     return flattened. }
false;public;0;4;;@Override public String getType() {     return "compound". }
false;public;0;4;;@Override public String getTag() {     return "CompoundProcessor-" + flattenProcessors().stream().map(Processor::getTag).collect(Collectors.joining("-")). }
false;public;1;34;;@Override public IngestDocument execute(IngestDocument ingestDocument) throws Exception {     for (Tuple<Processor, IngestMetric> processorWithMetric : processorsWithMetrics) {         Processor processor = processorWithMetric.v1().         IngestMetric metric = processorWithMetric.v2().         long startTimeInNanos = relativeTimeProvider.getAsLong().         try {             metric.preIngest().             if (processor.execute(ingestDocument) == null) {                 return null.             }         } catch (Exception e) {             metric.ingestFailed().             if (ignoreFailure) {                 continue.             }             ElasticsearchException compoundProcessorException = newCompoundProcessorException(e, processor.getType(), processor.getTag()).             if (onFailureProcessors.isEmpty()) {                 throw compoundProcessorException.             } else {                 if (executeOnFailure(ingestDocument, compoundProcessorException) == false) {                     return null.                 }                 break.             }         } finally {             long ingestTimeInMillis = TimeUnit.NANOSECONDS.toMillis(relativeTimeProvider.getAsLong() - startTimeInNanos).             metric.postIngest(ingestTimeInMillis).         }     }     return ingestDocument. }
true;;2;17;/**  * @return true if execution should continue, false if document is dropped.  */ ;/**  * @return true if execution should continue, false if document is dropped.  */ boolean executeOnFailure(IngestDocument ingestDocument, ElasticsearchException exception) throws Exception {     try {         putFailureMetadata(ingestDocument, exception).         for (Processor processor : onFailureProcessors) {             try {                 if (processor.execute(ingestDocument) == null) {                     return false.                 }             } catch (Exception e) {                 throw newCompoundProcessorException(e, processor.getType(), processor.getTag()).             }         }     } finally {         removeFailureMetadata(ingestDocument).     }     return true. }
false;private;2;10;;private void putFailureMetadata(IngestDocument ingestDocument, ElasticsearchException cause) {     List<String> processorTypeHeader = cause.getHeader("processor_type").     List<String> processorTagHeader = cause.getHeader("processor_tag").     String failedProcessorType = (processorTypeHeader != null) ? processorTypeHeader.get(0) : null.     String failedProcessorTag = (processorTagHeader != null) ? processorTagHeader.get(0) : null.     Map<String, Object> ingestMetadata = ingestDocument.getIngestMetadata().     ingestMetadata.put(ON_FAILURE_MESSAGE_FIELD, cause.getRootCause().getMessage()).     ingestMetadata.put(ON_FAILURE_PROCESSOR_TYPE_FIELD, failedProcessorType).     ingestMetadata.put(ON_FAILURE_PROCESSOR_TAG_FIELD, failedProcessorTag). }
false;private;1;6;;private void removeFailureMetadata(IngestDocument ingestDocument) {     Map<String, Object> ingestMetadata = ingestDocument.getIngestMetadata().     ingestMetadata.remove(ON_FAILURE_MESSAGE_FIELD).     ingestMetadata.remove(ON_FAILURE_PROCESSOR_TYPE_FIELD).     ingestMetadata.remove(ON_FAILURE_PROCESSOR_TAG_FIELD). }
false;private;3;16;;private ElasticsearchException newCompoundProcessorException(Exception e, String processorType, String processorTag) {     if (e instanceof ElasticsearchException && ((ElasticsearchException) e).getHeader("processor_type") != null) {         return (ElasticsearchException) e.     }     ElasticsearchException exception = new ElasticsearchException(new IllegalArgumentException(e)).     if (processorType != null) {         exception.addHeader("processor_type", processorType).     }     if (processorTag != null) {         exception.addHeader("processor_tag", processorTag).     }     return exception. }
