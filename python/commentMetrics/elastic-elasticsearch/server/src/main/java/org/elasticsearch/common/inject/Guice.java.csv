commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;3;/**  * Creates an injector for the given set of modules.  *  * @throws CreationException if one or more errors occur during Injector  *                           construction  */ ;/**  * Creates an injector for the given set of modules.  *  * @throws CreationException if one or more errors occur during Injector  *                           construction  */ public static Injector createInjector(Module... modules) {     return createInjector(Arrays.asList(modules)). }
true;public,static;1;3;/**  * Creates an injector for the given set of modules.  *  * @throws CreationException if one or more errors occur during Injector  *                           creation  */ ;/**  * Creates an injector for the given set of modules.  *  * @throws CreationException if one or more errors occur during Injector  *                           creation  */ public static Injector createInjector(Iterable<? extends Module> modules) {     return createInjector(Stage.DEVELOPMENT, modules). }
true;public,static;2;3;/**  * Creates an injector for the given set of modules, in a given development  * stage.  *  * @throws CreationException if one or more errors occur during Injector  *                           creation  */ ;/**  * Creates an injector for the given set of modules, in a given development  * stage.  *  * @throws CreationException if one or more errors occur during Injector  *                           creation  */ public static Injector createInjector(Stage stage, Module... modules) {     return createInjector(stage, Arrays.asList(modules)). }
true;public,static;2;7;/**  * Creates an injector for the given set of modules, in a given development  * stage.  *  * @throws CreationException if one or more errors occur during Injector  *                           construction  */ ;/**  * Creates an injector for the given set of modules, in a given development  * stage.  *  * @throws CreationException if one or more errors occur during Injector  *                           construction  */ public static Injector createInjector(Stage stage, Iterable<? extends Module> modules) {     return new InjectorBuilder().stage(stage).addModules(modules).build(). }
