# id;timestamp;commentText;codeText;commentWords;codeWords
Security -> private static void addBindPermissions(Permissions policy, Settings settings);1524684173;Add dynamic {@link SocketPermission}s based on HTTP and transport settings.__@param policy the {@link Permissions} instance to apply the dynamic {@link SocketPermission}s to._@param settings the {@link Settings} instance to read the HTTP and transport settings from;private static void addBindPermissions(Permissions policy, Settings settings) {_        addSocketPermissionForHttp(policy, settings)__        addSocketPermissionForTransportProfiles(policy, settings)__    };add,dynamic,link,socket,permission,s,based,on,http,and,transport,settings,param,policy,the,link,permissions,instance,to,apply,the,dynamic,link,socket,permission,s,to,param,settings,the,link,settings,instance,to,read,the,http,and,transport,settings,from;private,static,void,add,bind,permissions,permissions,policy,settings,settings,add,socket,permission,for,http,policy,settings,add,socket,permission,for,transport,profiles,policy,settings
Security -> private static void addBindPermissions(Permissions policy, Settings settings);1528762805;Add dynamic {@link SocketPermission}s based on HTTP and transport settings.__@param policy the {@link Permissions} instance to apply the dynamic {@link SocketPermission}s to._@param settings the {@link Settings} instance to read the HTTP and transport settings from;private static void addBindPermissions(Permissions policy, Settings settings) {_        addSocketPermissionForHttp(policy, settings)__        addSocketPermissionForTransportProfiles(policy, settings)__    };add,dynamic,link,socket,permission,s,based,on,http,and,transport,settings,param,policy,the,link,permissions,instance,to,apply,the,dynamic,link,socket,permission,s,to,param,settings,the,link,settings,instance,to,read,the,http,and,transport,settings,from;private,static,void,add,bind,permissions,permissions,policy,settings,settings,add,socket,permission,for,http,policy,settings,add,socket,permission,for,transport,profiles,policy,settings
Security -> private static void addBindPermissions(Permissions policy, Settings settings);1544823664;Add dynamic {@link SocketPermission}s based on HTTP and transport settings.__@param policy the {@link Permissions} instance to apply the dynamic {@link SocketPermission}s to._@param settings the {@link Settings} instance to read the HTTP and transport settings from;private static void addBindPermissions(Permissions policy, Settings settings) {_        addSocketPermissionForHttp(policy, settings)__        addSocketPermissionForTransportProfiles(policy, settings)__    };add,dynamic,link,socket,permission,s,based,on,http,and,transport,settings,param,policy,the,link,permissions,instance,to,apply,the,dynamic,link,socket,permission,s,to,param,settings,the,link,settings,instance,to,read,the,http,and,transport,settings,from;private,static,void,add,bind,permissions,permissions,policy,settings,settings,add,socket,permission,for,http,policy,settings,add,socket,permission,for,transport,profiles,policy,settings
Security -> static void addFilePermissions(Permissions policy, Environment environment) throws IOException;1524684173;Adds access to all configurable paths.;static void addFilePermissions(Permissions policy, Environment environment) throws IOException {_        _        addDirectoryPath(policy, Environment.PATH_HOME_SETTING.getKey(), environment.binFile(), "read,readlink")__        addDirectoryPath(policy, Environment.PATH_HOME_SETTING.getKey(), environment.libFile(), "read,readlink")__        addDirectoryPath(policy, Environment.PATH_HOME_SETTING.getKey(), environment.modulesFile(), "read,readlink")__        addDirectoryPath(policy, Environment.PATH_HOME_SETTING.getKey(), environment.pluginsFile(), "read,readlink")__        addDirectoryPath(policy, "path.conf'", environment.configFile(), "read,readlink")__        _        addDirectoryPath(policy, "java.io.tmpdir", environment.tmpFile(), "read,readlink,write,delete")__        addDirectoryPath(policy, Environment.PATH_LOGS_SETTING.getKey(), environment.logsFile(), "read,readlink,write,delete")__        if (environment.sharedDataFile() != null) {_            addDirectoryPath(policy, Environment.PATH_SHARED_DATA_SETTING.getKey(), environment.sharedDataFile(),_                "read,readlink,write,delete")__        }_        final Set<Path> dataFilesPaths = new HashSet<>()__        for (Path path : environment.dataFiles()) {_            addDirectoryPath(policy, Environment.PATH_DATA_SETTING.getKey(), path, "read,readlink,write,delete")__            _            try {_                final Path realPath = path.toRealPath()__                if (!dataFilesPaths.add(realPath)) {_                    throw new IllegalStateException("path [" + realPath + "] is duplicated by [" + path + "]")__                }_            } catch (final IOException e) {_                throw new IllegalStateException("unable to access [" + path + "]", e)__            }_        }_        for (Path path : environment.repoFiles()) {_            addDirectoryPath(policy, Environment.PATH_REPO_SETTING.getKey(), path, "read,readlink,write,delete")__        }_        if (environment.pidFile() != null) {_            _            addSingleFilePath(policy, environment.pidFile(), "delete")__        }_    };adds,access,to,all,configurable,paths;static,void,add,file,permissions,permissions,policy,environment,environment,throws,ioexception,add,directory,path,policy,environment,get,key,environment,bin,file,read,readlink,add,directory,path,policy,environment,get,key,environment,lib,file,read,readlink,add,directory,path,policy,environment,get,key,environment,modules,file,read,readlink,add,directory,path,policy,environment,get,key,environment,plugins,file,read,readlink,add,directory,path,policy,path,conf,environment,config,file,read,readlink,add,directory,path,policy,java,io,tmpdir,environment,tmp,file,read,readlink,write,delete,add,directory,path,policy,environment,get,key,environment,logs,file,read,readlink,write,delete,if,environment,shared,data,file,null,add,directory,path,policy,environment,get,key,environment,shared,data,file,read,readlink,write,delete,final,set,path,data,files,paths,new,hash,set,for,path,path,environment,data,files,add,directory,path,policy,environment,get,key,path,read,readlink,write,delete,try,final,path,real,path,path,to,real,path,if,data,files,paths,add,real,path,throw,new,illegal,state,exception,path,real,path,is,duplicated,by,path,catch,final,ioexception,e,throw,new,illegal,state,exception,unable,to,access,path,e,for,path,path,environment,repo,files,add,directory,path,policy,environment,get,key,path,read,readlink,write,delete,if,environment,pid,file,null,add,single,file,path,policy,environment,pid,file,delete
Security -> static void addFilePermissions(Permissions policy, Environment environment) throws IOException;1528762805;Adds access to all configurable paths.;static void addFilePermissions(Permissions policy, Environment environment) throws IOException {_        _        addDirectoryPath(policy, Environment.PATH_HOME_SETTING.getKey(), environment.binFile(), "read,readlink")__        addDirectoryPath(policy, Environment.PATH_HOME_SETTING.getKey(), environment.libFile(), "read,readlink")__        addDirectoryPath(policy, Environment.PATH_HOME_SETTING.getKey(), environment.modulesFile(), "read,readlink")__        addDirectoryPath(policy, Environment.PATH_HOME_SETTING.getKey(), environment.pluginsFile(), "read,readlink")__        addDirectoryPath(policy, "path.conf'", environment.configFile(), "read,readlink")__        _        addDirectoryPath(policy, "java.io.tmpdir", environment.tmpFile(), "read,readlink,write,delete")__        addDirectoryPath(policy, Environment.PATH_LOGS_SETTING.getKey(), environment.logsFile(), "read,readlink,write,delete")__        if (environment.sharedDataFile() != null) {_            addDirectoryPath(policy, Environment.PATH_SHARED_DATA_SETTING.getKey(), environment.sharedDataFile(),_                "read,readlink,write,delete")__        }_        final Set<Path> dataFilesPaths = new HashSet<>()__        for (Path path : environment.dataFiles()) {_            addDirectoryPath(policy, Environment.PATH_DATA_SETTING.getKey(), path, "read,readlink,write,delete")__            _            try {_                final Path realPath = path.toRealPath()__                if (!dataFilesPaths.add(realPath)) {_                    throw new IllegalStateException("path [" + realPath + "] is duplicated by [" + path + "]")__                }_            } catch (final IOException e) {_                throw new IllegalStateException("unable to access [" + path + "]", e)__            }_        }_        for (Path path : environment.repoFiles()) {_            addDirectoryPath(policy, Environment.PATH_REPO_SETTING.getKey(), path, "read,readlink,write,delete")__        }_        if (environment.pidFile() != null) {_            _            addSingleFilePath(policy, environment.pidFile(), "delete")__        }_    };adds,access,to,all,configurable,paths;static,void,add,file,permissions,permissions,policy,environment,environment,throws,ioexception,add,directory,path,policy,environment,get,key,environment,bin,file,read,readlink,add,directory,path,policy,environment,get,key,environment,lib,file,read,readlink,add,directory,path,policy,environment,get,key,environment,modules,file,read,readlink,add,directory,path,policy,environment,get,key,environment,plugins,file,read,readlink,add,directory,path,policy,path,conf,environment,config,file,read,readlink,add,directory,path,policy,java,io,tmpdir,environment,tmp,file,read,readlink,write,delete,add,directory,path,policy,environment,get,key,environment,logs,file,read,readlink,write,delete,if,environment,shared,data,file,null,add,directory,path,policy,environment,get,key,environment,shared,data,file,read,readlink,write,delete,final,set,path,data,files,paths,new,hash,set,for,path,path,environment,data,files,add,directory,path,policy,environment,get,key,path,read,readlink,write,delete,try,final,path,real,path,path,to,real,path,if,data,files,paths,add,real,path,throw,new,illegal,state,exception,path,real,path,is,duplicated,by,path,catch,final,ioexception,e,throw,new,illegal,state,exception,unable,to,access,path,e,for,path,path,environment,repo,files,add,directory,path,policy,environment,get,key,path,read,readlink,write,delete,if,environment,pid,file,null,add,single,file,path,policy,environment,pid,file,delete
Security -> static void addFilePermissions(Permissions policy, Environment environment) throws IOException;1544823664;Adds access to all configurable paths.;static void addFilePermissions(Permissions policy, Environment environment) throws IOException {_        _        addDirectoryPath(policy, Environment.PATH_HOME_SETTING.getKey(), environment.binFile(), "read,readlink")__        addDirectoryPath(policy, Environment.PATH_HOME_SETTING.getKey(), environment.libFile(), "read,readlink")__        addDirectoryPath(policy, Environment.PATH_HOME_SETTING.getKey(), environment.modulesFile(), "read,readlink")__        addDirectoryPath(policy, Environment.PATH_HOME_SETTING.getKey(), environment.pluginsFile(), "read,readlink")__        addDirectoryPath(policy, "path.conf'", environment.configFile(), "read,readlink")__        _        addDirectoryPath(policy, "java.io.tmpdir", environment.tmpFile(), "read,readlink,write,delete")__        addDirectoryPath(policy, Environment.PATH_LOGS_SETTING.getKey(), environment.logsFile(), "read,readlink,write,delete")__        if (environment.sharedDataFile() != null) {_            addDirectoryPath(policy, Environment.PATH_SHARED_DATA_SETTING.getKey(), environment.sharedDataFile(),_                "read,readlink,write,delete")__        }_        final Set<Path> dataFilesPaths = new HashSet<>()__        for (Path path : environment.dataFiles()) {_            addDirectoryPath(policy, Environment.PATH_DATA_SETTING.getKey(), path, "read,readlink,write,delete")__            _            try {_                final Path realPath = path.toRealPath()__                if (!dataFilesPaths.add(realPath)) {_                    throw new IllegalStateException("path [" + realPath + "] is duplicated by [" + path + "]")__                }_            } catch (final IOException e) {_                throw new IllegalStateException("unable to access [" + path + "]", e)__            }_        }_        for (Path path : environment.repoFiles()) {_            addDirectoryPath(policy, Environment.PATH_REPO_SETTING.getKey(), path, "read,readlink,write,delete")__        }_        if (environment.pidFile() != null) {_            _            addSingleFilePath(policy, environment.pidFile(), "delete")__        }_    };adds,access,to,all,configurable,paths;static,void,add,file,permissions,permissions,policy,environment,environment,throws,ioexception,add,directory,path,policy,environment,get,key,environment,bin,file,read,readlink,add,directory,path,policy,environment,get,key,environment,lib,file,read,readlink,add,directory,path,policy,environment,get,key,environment,modules,file,read,readlink,add,directory,path,policy,environment,get,key,environment,plugins,file,read,readlink,add,directory,path,policy,path,conf,environment,config,file,read,readlink,add,directory,path,policy,java,io,tmpdir,environment,tmp,file,read,readlink,write,delete,add,directory,path,policy,environment,get,key,environment,logs,file,read,readlink,write,delete,if,environment,shared,data,file,null,add,directory,path,policy,environment,get,key,environment,shared,data,file,read,readlink,write,delete,final,set,path,data,files,paths,new,hash,set,for,path,path,environment,data,files,add,directory,path,policy,environment,get,key,path,read,readlink,write,delete,try,final,path,real,path,path,to,real,path,if,data,files,paths,add,real,path,throw,new,illegal,state,exception,path,real,path,is,duplicated,by,path,catch,final,ioexception,e,throw,new,illegal,state,exception,unable,to,access,path,e,for,path,path,environment,repo,files,add,directory,path,policy,environment,get,key,path,read,readlink,write,delete,if,environment,pid,file,null,add,single,file,path,policy,environment,pid,file,delete
Security -> static void ensureDirectoryExists(Path path) throws IOException;1524684173;Ensures configured directory {@code path} exists._@throws IOException if {@code path} exists, but is not a directory, not accessible, or broken symbolic link.;static void ensureDirectoryExists(Path path) throws IOException {_        _        if (Files.isDirectory(path)) {_            _            _            path.getFileSystem().provider().checkAccess(path.toRealPath(), AccessMode.READ)__        } else {_            _            try {_                Files.createDirectories(path)__            } catch (FileAlreadyExistsException e) {_                _                IOException e2 = new NotDirectoryException(path.toString())__                e2.addSuppressed(e)__                throw e2__            }_        }_    };ensures,configured,directory,code,path,exists,throws,ioexception,if,code,path,exists,but,is,not,a,directory,not,accessible,or,broken,symbolic,link;static,void,ensure,directory,exists,path,path,throws,ioexception,if,files,is,directory,path,path,get,file,system,provider,check,access,path,to,real,path,access,mode,read,else,try,files,create,directories,path,catch,file,already,exists,exception,e,ioexception,e2,new,not,directory,exception,path,to,string,e2,add,suppressed,e,throw,e2
Security -> static void ensureDirectoryExists(Path path) throws IOException;1528762805;Ensures configured directory {@code path} exists._@throws IOException if {@code path} exists, but is not a directory, not accessible, or broken symbolic link.;static void ensureDirectoryExists(Path path) throws IOException {_        _        if (Files.isDirectory(path)) {_            _            _            path.getFileSystem().provider().checkAccess(path.toRealPath(), AccessMode.READ)__        } else {_            _            try {_                Files.createDirectories(path)__            } catch (FileAlreadyExistsException e) {_                _                IOException e2 = new NotDirectoryException(path.toString())__                e2.addSuppressed(e)__                throw e2__            }_        }_    };ensures,configured,directory,code,path,exists,throws,ioexception,if,code,path,exists,but,is,not,a,directory,not,accessible,or,broken,symbolic,link;static,void,ensure,directory,exists,path,path,throws,ioexception,if,files,is,directory,path,path,get,file,system,provider,check,access,path,to,real,path,access,mode,read,else,try,files,create,directories,path,catch,file,already,exists,exception,e,ioexception,e2,new,not,directory,exception,path,to,string,e2,add,suppressed,e,throw,e2
Security -> static void ensureDirectoryExists(Path path) throws IOException;1544823664;Ensures configured directory {@code path} exists._@throws IOException if {@code path} exists, but is not a directory, not accessible, or broken symbolic link.;static void ensureDirectoryExists(Path path) throws IOException {_        _        if (Files.isDirectory(path)) {_            _            _            path.getFileSystem().provider().checkAccess(path.toRealPath(), AccessMode.READ)__        } else {_            _            try {_                Files.createDirectories(path)__            } catch (FileAlreadyExistsException e) {_                _                IOException e2 = new NotDirectoryException(path.toString())__                e2.addSuppressed(e)__                throw e2__            }_        }_    };ensures,configured,directory,code,path,exists,throws,ioexception,if,code,path,exists,but,is,not,a,directory,not,accessible,or,broken,symbolic,link;static,void,ensure,directory,exists,path,path,throws,ioexception,if,files,is,directory,path,path,get,file,system,provider,check,access,path,to,real,path,access,mode,read,else,try,files,create,directories,path,catch,file,already,exists,exception,e,ioexception,e2,new,not,directory,exception,path,to,string,e2,add,suppressed,e,throw,e2
Security -> private static void addSocketPermissionForHttp(final Permissions policy, final Settings settings);1524684173;Add dynamic {@link SocketPermission} based on HTTP settings.__@param policy the {@link Permissions} instance to apply the dynamic {@link SocketPermission}s to._@param settings the {@link Settings} instance to read the HTTP settings from;private static void addSocketPermissionForHttp(final Permissions policy, final Settings settings) {_        _        final String httpRange = HttpTransportSettings.SETTING_HTTP_PORT.get(settings).getPortRangeString()__        addSocketPermissionForPortRange(policy, httpRange)__    };add,dynamic,link,socket,permission,based,on,http,settings,param,policy,the,link,permissions,instance,to,apply,the,dynamic,link,socket,permission,s,to,param,settings,the,link,settings,instance,to,read,the,http,settings,from;private,static,void,add,socket,permission,for,http,final,permissions,policy,final,settings,settings,final,string,http,range,http,transport,settings,get,settings,get,port,range,string,add,socket,permission,for,port,range,policy,http,range
Security -> private static void addSocketPermissionForHttp(final Permissions policy, final Settings settings);1528762805;Add dynamic {@link SocketPermission} based on HTTP settings.__@param policy the {@link Permissions} instance to apply the dynamic {@link SocketPermission}s to._@param settings the {@link Settings} instance to read the HTTP settings from;private static void addSocketPermissionForHttp(final Permissions policy, final Settings settings) {_        _        final String httpRange = HttpTransportSettings.SETTING_HTTP_PORT.get(settings).getPortRangeString()__        addSocketPermissionForPortRange(policy, httpRange)__    };add,dynamic,link,socket,permission,based,on,http,settings,param,policy,the,link,permissions,instance,to,apply,the,dynamic,link,socket,permission,s,to,param,settings,the,link,settings,instance,to,read,the,http,settings,from;private,static,void,add,socket,permission,for,http,final,permissions,policy,final,settings,settings,final,string,http,range,http,transport,settings,get,settings,get,port,range,string,add,socket,permission,for,port,range,policy,http,range
Security -> private static void addSocketPermissionForHttp(final Permissions policy, final Settings settings);1544823664;Add dynamic {@link SocketPermission} based on HTTP settings.__@param policy the {@link Permissions} instance to apply the dynamic {@link SocketPermission}s to._@param settings the {@link Settings} instance to read the HTTP settings from;private static void addSocketPermissionForHttp(final Permissions policy, final Settings settings) {_        _        final String httpRange = HttpTransportSettings.SETTING_HTTP_PORT.get(settings).getPortRangeString()__        addSocketPermissionForPortRange(policy, httpRange)__    };add,dynamic,link,socket,permission,based,on,http,settings,param,policy,the,link,permissions,instance,to,apply,the,dynamic,link,socket,permission,s,to,param,settings,the,link,settings,instance,to,read,the,http,settings,from;private,static,void,add,socket,permission,for,http,final,permissions,policy,final,settings,settings,final,string,http,range,http,transport,settings,get,settings,get,port,range,string,add,socket,permission,for,port,range,policy,http,range
Security -> @SuppressForbidden(reason = "accesses fully qualified URLs to configure security")     static Policy readPolicy(URL policyFile, Map<String, URL> codebases);1524684173;Reads and returns the specified {@code policyFile}._<p>_Jar files listed in {@code codebases} location will be provided to the policy file via_a system property of the short name: e.g. <code>${codebase.joda-convert-1.2.jar}</code>_would map to full URL.;@SuppressForbidden(reason = "accesses fully qualified URLs to configure security")_    static Policy readPolicy(URL policyFile, Map<String, URL> codebases) {_        try {_            List<String> propertiesSet = new ArrayList<>()__            try {_                _                for (Map.Entry<String,URL> codebase : codebases.entrySet()) {_                    String name = codebase.getKey()__                    URL url = codebase.getValue()___                    _                    _                    _                    String property = "codebase." + name__                    String aliasProperty = "codebase." + name.replaceFirst("-\\d+\\.\\d+.*\\.jar", "")__                    if (aliasProperty.equals(property) == false) {_                        propertiesSet.add(aliasProperty)__                        String previous = System.setProperty(aliasProperty, url.toString())__                        if (previous != null) {_                            throw new IllegalStateException("codebase property already set: " + aliasProperty + " -> " + previous +_                                                            ", cannot set to " + url.toString())__                        }_                    }_                    propertiesSet.add(property)__                    String previous = System.setProperty(property, url.toString())__                    if (previous != null) {_                        throw new IllegalStateException("codebase property already set: " + property + " -> " + previous +_                                                        ", cannot set to " + url.toString())__                    }_                }_                return Policy.getInstance("JavaPolicy", new URIParameter(policyFile.toURI()))__            } finally {_                _                for (String property : propertiesSet) {_                    System.clearProperty(property)__                }_            }_        } catch (NoSuchAlgorithmException | URISyntaxException e) {_            throw new IllegalArgumentException("unable to parse policy file `" + policyFile + "`", e)__        }_    };reads,and,returns,the,specified,code,policy,file,p,jar,files,listed,in,code,codebases,location,will,be,provided,to,the,policy,file,via,a,system,property,of,the,short,name,e,g,code,codebase,joda,convert,1,2,jar,code,would,map,to,full,url;suppress,forbidden,reason,accesses,fully,qualified,urls,to,configure,security,static,policy,read,policy,url,policy,file,map,string,url,codebases,try,list,string,properties,set,new,array,list,try,for,map,entry,string,url,codebase,codebases,entry,set,string,name,codebase,get,key,url,url,codebase,get,value,string,property,codebase,name,string,alias,property,codebase,name,replace,first,d,d,jar,if,alias,property,equals,property,false,properties,set,add,alias,property,string,previous,system,set,property,alias,property,url,to,string,if,previous,null,throw,new,illegal,state,exception,codebase,property,already,set,alias,property,previous,cannot,set,to,url,to,string,properties,set,add,property,string,previous,system,set,property,property,url,to,string,if,previous,null,throw,new,illegal,state,exception,codebase,property,already,set,property,previous,cannot,set,to,url,to,string,return,policy,get,instance,java,policy,new,uriparameter,policy,file,to,uri,finally,for,string,property,properties,set,system,clear,property,property,catch,no,such,algorithm,exception,urisyntax,exception,e,throw,new,illegal,argument,exception,unable,to,parse,policy,file,policy,file,e
Security -> @SuppressForbidden(reason = "accesses fully qualified URLs to configure security")     static Policy readPolicy(URL policyFile, Map<String, URL> codebases);1528762805;Reads and returns the specified {@code policyFile}._<p>_Jar files listed in {@code codebases} location will be provided to the policy file via_a system property of the short name: e.g. <code>${codebase.joda-convert-1.2.jar}</code>_would map to full URL.;@SuppressForbidden(reason = "accesses fully qualified URLs to configure security")_    static Policy readPolicy(URL policyFile, Map<String, URL> codebases) {_        try {_            List<String> propertiesSet = new ArrayList<>()__            try {_                _                for (Map.Entry<String,URL> codebase : codebases.entrySet()) {_                    String name = codebase.getKey()__                    URL url = codebase.getValue()___                    _                    _                    _                    String property = "codebase." + name__                    String aliasProperty = "codebase." + name.replaceFirst("-\\d+\\.\\d+.*\\.jar", "")__                    if (aliasProperty.equals(property) == false) {_                        propertiesSet.add(aliasProperty)__                        String previous = System.setProperty(aliasProperty, url.toString())__                        if (previous != null) {_                            throw new IllegalStateException("codebase property already set: " + aliasProperty + " -> " + previous +_                                                            ", cannot set to " + url.toString())__                        }_                    }_                    propertiesSet.add(property)__                    String previous = System.setProperty(property, url.toString())__                    if (previous != null) {_                        throw new IllegalStateException("codebase property already set: " + property + " -> " + previous +_                                                        ", cannot set to " + url.toString())__                    }_                }_                return Policy.getInstance("JavaPolicy", new URIParameter(policyFile.toURI()))__            } finally {_                _                for (String property : propertiesSet) {_                    System.clearProperty(property)__                }_            }_        } catch (NoSuchAlgorithmException | URISyntaxException e) {_            throw new IllegalArgumentException("unable to parse policy file `" + policyFile + "`", e)__        }_    };reads,and,returns,the,specified,code,policy,file,p,jar,files,listed,in,code,codebases,location,will,be,provided,to,the,policy,file,via,a,system,property,of,the,short,name,e,g,code,codebase,joda,convert,1,2,jar,code,would,map,to,full,url;suppress,forbidden,reason,accesses,fully,qualified,urls,to,configure,security,static,policy,read,policy,url,policy,file,map,string,url,codebases,try,list,string,properties,set,new,array,list,try,for,map,entry,string,url,codebase,codebases,entry,set,string,name,codebase,get,key,url,url,codebase,get,value,string,property,codebase,name,string,alias,property,codebase,name,replace,first,d,d,jar,if,alias,property,equals,property,false,properties,set,add,alias,property,string,previous,system,set,property,alias,property,url,to,string,if,previous,null,throw,new,illegal,state,exception,codebase,property,already,set,alias,property,previous,cannot,set,to,url,to,string,properties,set,add,property,string,previous,system,set,property,property,url,to,string,if,previous,null,throw,new,illegal,state,exception,codebase,property,already,set,property,previous,cannot,set,to,url,to,string,return,policy,get,instance,java,policy,new,uriparameter,policy,file,to,uri,finally,for,string,property,properties,set,system,clear,property,property,catch,no,such,algorithm,exception,urisyntax,exception,e,throw,new,illegal,argument,exception,unable,to,parse,policy,file,policy,file,e
Security -> @SuppressForbidden(reason = "accesses fully qualified URLs to configure security")     static Policy readPolicy(URL policyFile, Map<String, URL> codebases);1544823664;Reads and returns the specified {@code policyFile}._<p>_Jar files listed in {@code codebases} location will be provided to the policy file via_a system property of the short name: e.g. <code>${codebase.joda-convert-1.2.jar}</code>_would map to full URL.;@SuppressForbidden(reason = "accesses fully qualified URLs to configure security")_    static Policy readPolicy(URL policyFile, Map<String, URL> codebases) {_        try {_            List<String> propertiesSet = new ArrayList<>()__            try {_                _                for (Map.Entry<String,URL> codebase : codebases.entrySet()) {_                    String name = codebase.getKey()__                    URL url = codebase.getValue()___                    _                    _                    _                    String property = "codebase." + name__                    String aliasProperty = "codebase." + name.replaceFirst("-\\d+\\.\\d+.*\\.jar", "")__                    if (aliasProperty.equals(property) == false) {_                        propertiesSet.add(aliasProperty)__                        String previous = System.setProperty(aliasProperty, url.toString())__                        if (previous != null) {_                            throw new IllegalStateException("codebase property already set: " + aliasProperty + " -> " + previous +_                                                            ", cannot set to " + url.toString())__                        }_                    }_                    propertiesSet.add(property)__                    String previous = System.setProperty(property, url.toString())__                    if (previous != null) {_                        throw new IllegalStateException("codebase property already set: " + property + " -> " + previous +_                                                        ", cannot set to " + url.toString())__                    }_                }_                return Policy.getInstance("JavaPolicy", new URIParameter(policyFile.toURI()))__            } finally {_                _                for (String property : propertiesSet) {_                    System.clearProperty(property)__                }_            }_        } catch (NoSuchAlgorithmException | URISyntaxException e) {_            throw new IllegalArgumentException("unable to parse policy file `" + policyFile + "`", e)__        }_    };reads,and,returns,the,specified,code,policy,file,p,jar,files,listed,in,code,codebases,location,will,be,provided,to,the,policy,file,via,a,system,property,of,the,short,name,e,g,code,codebase,joda,convert,1,2,jar,code,would,map,to,full,url;suppress,forbidden,reason,accesses,fully,qualified,urls,to,configure,security,static,policy,read,policy,url,policy,file,map,string,url,codebases,try,list,string,properties,set,new,array,list,try,for,map,entry,string,url,codebase,codebases,entry,set,string,name,codebase,get,key,url,url,codebase,get,value,string,property,codebase,name,string,alias,property,codebase,name,replace,first,d,d,jar,if,alias,property,equals,property,false,properties,set,add,alias,property,string,previous,system,set,property,alias,property,url,to,string,if,previous,null,throw,new,illegal,state,exception,codebase,property,already,set,alias,property,previous,cannot,set,to,url,to,string,properties,set,add,property,string,previous,system,set,property,property,url,to,string,if,previous,null,throw,new,illegal,state,exception,codebase,property,already,set,property,previous,cannot,set,to,url,to,string,return,policy,get,instance,java,policy,new,uriparameter,policy,file,to,uri,finally,for,string,property,properties,set,system,clear,property,property,catch,no,such,algorithm,exception,urisyntax,exception,e,throw,new,illegal,argument,exception,unable,to,parse,policy,file,policy,file,e
Security -> @SuppressForbidden(reason = "find URL path")     static Map<String, URL> getCodebaseJarMap(Set<URL> urls);1524684173;Return a map from codebase name to codebase url of jar codebases used by ES core.;@SuppressForbidden(reason = "find URL path")_    static Map<String, URL> getCodebaseJarMap(Set<URL> urls) {_        Map<String, URL> codebases = new LinkedHashMap<>()_ _        for (URL url : urls) {_            try {_                String fileName = PathUtils.get(url.toURI()).getFileName().toString()__                if (fileName.endsWith(".jar") == false) {_                    _                    continue__                }_                codebases.put(fileName, url)__            } catch (URISyntaxException e) {_                throw new RuntimeException(e)__            }_        }_        return codebases__    };return,a,map,from,codebase,name,to,codebase,url,of,jar,codebases,used,by,es,core;suppress,forbidden,reason,find,url,path,static,map,string,url,get,codebase,jar,map,set,url,urls,map,string,url,codebases,new,linked,hash,map,for,url,url,urls,try,string,file,name,path,utils,get,url,to,uri,get,file,name,to,string,if,file,name,ends,with,jar,false,continue,codebases,put,file,name,url,catch,urisyntax,exception,e,throw,new,runtime,exception,e,return,codebases
Security -> @SuppressForbidden(reason = "find URL path")     static Map<String, URL> getCodebaseJarMap(Set<URL> urls);1528762805;Return a map from codebase name to codebase url of jar codebases used by ES core.;@SuppressForbidden(reason = "find URL path")_    static Map<String, URL> getCodebaseJarMap(Set<URL> urls) {_        Map<String, URL> codebases = new LinkedHashMap<>()_ _        for (URL url : urls) {_            try {_                String fileName = PathUtils.get(url.toURI()).getFileName().toString()__                if (fileName.endsWith(".jar") == false) {_                    _                    continue__                }_                codebases.put(fileName, url)__            } catch (URISyntaxException e) {_                throw new RuntimeException(e)__            }_        }_        return codebases__    };return,a,map,from,codebase,name,to,codebase,url,of,jar,codebases,used,by,es,core;suppress,forbidden,reason,find,url,path,static,map,string,url,get,codebase,jar,map,set,url,urls,map,string,url,codebases,new,linked,hash,map,for,url,url,urls,try,string,file,name,path,utils,get,url,to,uri,get,file,name,to,string,if,file,name,ends,with,jar,false,continue,codebases,put,file,name,url,catch,urisyntax,exception,e,throw,new,runtime,exception,e,return,codebases
Security -> @SuppressForbidden(reason = "find URL path")     static Map<String, URL> getCodebaseJarMap(Set<URL> urls);1544823664;Return a map from codebase name to codebase url of jar codebases used by ES core.;@SuppressForbidden(reason = "find URL path")_    static Map<String, URL> getCodebaseJarMap(Set<URL> urls) {_        Map<String, URL> codebases = new LinkedHashMap<>()_ _        for (URL url : urls) {_            try {_                String fileName = PathUtils.get(url.toURI()).getFileName().toString()__                if (fileName.endsWith(".jar") == false) {_                    _                    continue__                }_                codebases.put(fileName, url)__            } catch (URISyntaxException e) {_                throw new RuntimeException(e)__            }_        }_        return codebases__    };return,a,map,from,codebase,name,to,codebase,url,of,jar,codebases,used,by,es,core;suppress,forbidden,reason,find,url,path,static,map,string,url,get,codebase,jar,map,set,url,urls,map,string,url,codebases,new,linked,hash,map,for,url,url,urls,try,string,file,name,path,utils,get,url,to,uri,get,file,name,to,string,if,file,name,ends,with,jar,false,continue,codebases,put,file,name,url,catch,urisyntax,exception,e,throw,new,runtime,exception,e,return,codebases
Security -> private Security();1524684173;no instantiation;private Security() {};no,instantiation;private,security
Security -> private Security();1528762805;no instantiation;private Security() {};no,instantiation;private,security
Security -> private Security();1544823664;no instantiation;private Security() {};no,instantiation;private,security
Security -> private static void addSocketPermissionForTransport(final Permissions policy, final Settings settings);1524684173;Add dynamic {@link SocketPermission} based on transport settings.__@param policy          the {@link Permissions} instance to apply the dynamic {@link SocketPermission}s to_@param settings        the {@link Settings} instance to read the transport settings from;private static void addSocketPermissionForTransport(final Permissions policy, final Settings settings) {_        final String transportRange = TcpTransport.PORT.get(settings)__        addSocketPermissionForPortRange(policy, transportRange)__    };add,dynamic,link,socket,permission,based,on,transport,settings,param,policy,the,link,permissions,instance,to,apply,the,dynamic,link,socket,permission,s,to,param,settings,the,link,settings,instance,to,read,the,transport,settings,from;private,static,void,add,socket,permission,for,transport,final,permissions,policy,final,settings,settings,final,string,transport,range,tcp,transport,port,get,settings,add,socket,permission,for,port,range,policy,transport,range
Security -> private static void addSocketPermissionForTransport(final Permissions policy, final Settings settings);1528762805;Add dynamic {@link SocketPermission} based on transport settings.__@param policy          the {@link Permissions} instance to apply the dynamic {@link SocketPermission}s to_@param settings        the {@link Settings} instance to read the transport settings from;private static void addSocketPermissionForTransport(final Permissions policy, final Settings settings) {_        final String transportRange = TcpTransport.PORT.get(settings)__        addSocketPermissionForPortRange(policy, transportRange)__    };add,dynamic,link,socket,permission,based,on,transport,settings,param,policy,the,link,permissions,instance,to,apply,the,dynamic,link,socket,permission,s,to,param,settings,the,link,settings,instance,to,read,the,transport,settings,from;private,static,void,add,socket,permission,for,transport,final,permissions,policy,final,settings,settings,final,string,transport,range,tcp,transport,port,get,settings,add,socket,permission,for,port,range,policy,transport,range
Security -> private static void addSocketPermissionForTransport(final Permissions policy, final Settings settings);1544823664;Add dynamic {@link SocketPermission} based on transport settings.__@param policy          the {@link Permissions} instance to apply the dynamic {@link SocketPermission}s to_@param settings        the {@link Settings} instance to read the transport settings from;private static void addSocketPermissionForTransport(final Permissions policy, final Settings settings) {_        final String transportRange = TransportSettings.PORT.get(settings)__        addSocketPermissionForPortRange(policy, transportRange)__    };add,dynamic,link,socket,permission,based,on,transport,settings,param,policy,the,link,permissions,instance,to,apply,the,dynamic,link,socket,permission,s,to,param,settings,the,link,settings,instance,to,read,the,transport,settings,from;private,static,void,add,socket,permission,for,transport,final,permissions,policy,final,settings,settings,final,string,transport,range,transport,settings,port,get,settings,add,socket,permission,for,port,range,policy,transport,range
Security -> static void configure(Environment environment, boolean filterBadDefaults) throws IOException, NoSuchAlgorithmException;1524684173;Initializes SecurityManager for the environment_Can only happen once!_@param environment configuration for generating dynamic permissions_@param filterBadDefaults true if we should filter out bad java defaults in the system policy.;static void configure(Environment environment, boolean filterBadDefaults) throws IOException, NoSuchAlgorithmException {__        _        Map<String, URL> codebases = getCodebaseJarMap(JarHell.parseClassPath())__        Policy.setPolicy(new ESPolicy(codebases, createPermissions(environment), getPluginPermissions(environment), filterBadDefaults))___        _        final String[] classesThatCanExit =_                new String[]{_                        _                        ElasticsearchUncaughtExceptionHandler.PrivilegedHaltAction.class.getName().replace("$", "\\$"),_                        Command.class.getName()}__        System.setSecurityManager(new SecureSM(classesThatCanExit))___        _        selfTest()__    };initializes,security,manager,for,the,environment,can,only,happen,once,param,environment,configuration,for,generating,dynamic,permissions,param,filter,bad,defaults,true,if,we,should,filter,out,bad,java,defaults,in,the,system,policy;static,void,configure,environment,environment,boolean,filter,bad,defaults,throws,ioexception,no,such,algorithm,exception,map,string,url,codebases,get,codebase,jar,map,jar,hell,parse,class,path,policy,set,policy,new,espolicy,codebases,create,permissions,environment,get,plugin,permissions,environment,filter,bad,defaults,final,string,classes,that,can,exit,new,string,elasticsearch,uncaught,exception,handler,privileged,halt,action,class,get,name,replace,command,class,get,name,system,set,security,manager,new,secure,sm,classes,that,can,exit,self,test
Security -> static void configure(Environment environment, boolean filterBadDefaults) throws IOException, NoSuchAlgorithmException;1528762805;Initializes SecurityManager for the environment_Can only happen once!_@param environment configuration for generating dynamic permissions_@param filterBadDefaults true if we should filter out bad java defaults in the system policy.;static void configure(Environment environment, boolean filterBadDefaults) throws IOException, NoSuchAlgorithmException {__        _        Map<String, URL> codebases = getCodebaseJarMap(JarHell.parseClassPath())__        Policy.setPolicy(new ESPolicy(codebases, createPermissions(environment), getPluginPermissions(environment), filterBadDefaults))___        _        final String[] classesThatCanExit =_                new String[]{_                        _                        ElasticsearchUncaughtExceptionHandler.PrivilegedHaltAction.class.getName().replace("$", "\\$"),_                        Command.class.getName()}__        System.setSecurityManager(new SecureSM(classesThatCanExit))___        _        selfTest()__    };initializes,security,manager,for,the,environment,can,only,happen,once,param,environment,configuration,for,generating,dynamic,permissions,param,filter,bad,defaults,true,if,we,should,filter,out,bad,java,defaults,in,the,system,policy;static,void,configure,environment,environment,boolean,filter,bad,defaults,throws,ioexception,no,such,algorithm,exception,map,string,url,codebases,get,codebase,jar,map,jar,hell,parse,class,path,policy,set,policy,new,espolicy,codebases,create,permissions,environment,get,plugin,permissions,environment,filter,bad,defaults,final,string,classes,that,can,exit,new,string,elasticsearch,uncaught,exception,handler,privileged,halt,action,class,get,name,replace,command,class,get,name,system,set,security,manager,new,secure,sm,classes,that,can,exit,self,test
Security -> static void configure(Environment environment, boolean filterBadDefaults) throws IOException, NoSuchAlgorithmException;1544823664;Initializes SecurityManager for the environment_Can only happen once!_@param environment configuration for generating dynamic permissions_@param filterBadDefaults true if we should filter out bad java defaults in the system policy.;static void configure(Environment environment, boolean filterBadDefaults) throws IOException, NoSuchAlgorithmException {__        _        Map<String, URL> codebases = getCodebaseJarMap(JarHell.parseClassPath())__        Policy.setPolicy(new ESPolicy(codebases, createPermissions(environment), getPluginPermissions(environment), filterBadDefaults))___        _        final String[] classesThatCanExit =_                new String[]{_                        _                        ElasticsearchUncaughtExceptionHandler.PrivilegedHaltAction.class.getName().replace("$", "\\$"),_                        Command.class.getName()}__        System.setSecurityManager(new SecureSM(classesThatCanExit))___        _        selfTest()__    };initializes,security,manager,for,the,environment,can,only,happen,once,param,environment,configuration,for,generating,dynamic,permissions,param,filter,bad,defaults,true,if,we,should,filter,out,bad,java,defaults,in,the,system,policy;static,void,configure,environment,environment,boolean,filter,bad,defaults,throws,ioexception,no,such,algorithm,exception,map,string,url,codebases,get,codebase,jar,map,jar,hell,parse,class,path,policy,set,policy,new,espolicy,codebases,create,permissions,environment,get,plugin,permissions,environment,filter,bad,defaults,final,string,classes,that,can,exit,new,string,elasticsearch,uncaught,exception,handler,privileged,halt,action,class,get,name,replace,command,class,get,name,system,set,security,manager,new,secure,sm,classes,that,can,exit,self,test
Security -> private static void addSocketPermissionForPortRange(final Permissions policy, final String portRange);1524684173;Add dynamic {@link SocketPermission} for the specified port range.__@param policy the {@link Permissions} instance to apply the dynamic {@link SocketPermission} to._@param portRange the port range;private static void addSocketPermissionForPortRange(final Permissions policy, final String portRange) {_        _        _        policy.add(new SocketPermission("*:" + portRange, "listen,resolve"))__    };add,dynamic,link,socket,permission,for,the,specified,port,range,param,policy,the,link,permissions,instance,to,apply,the,dynamic,link,socket,permission,to,param,port,range,the,port,range;private,static,void,add,socket,permission,for,port,range,final,permissions,policy,final,string,port,range,policy,add,new,socket,permission,port,range,listen,resolve
Security -> private static void addSocketPermissionForPortRange(final Permissions policy, final String portRange);1528762805;Add dynamic {@link SocketPermission} for the specified port range.__@param policy the {@link Permissions} instance to apply the dynamic {@link SocketPermission} to._@param portRange the port range;private static void addSocketPermissionForPortRange(final Permissions policy, final String portRange) {_        _        _        policy.add(new SocketPermission("*:" + portRange, "listen,resolve"))__    };add,dynamic,link,socket,permission,for,the,specified,port,range,param,policy,the,link,permissions,instance,to,apply,the,dynamic,link,socket,permission,to,param,port,range,the,port,range;private,static,void,add,socket,permission,for,port,range,final,permissions,policy,final,string,port,range,policy,add,new,socket,permission,port,range,listen,resolve
Security -> private static void addSocketPermissionForPortRange(final Permissions policy, final String portRange);1544823664;Add dynamic {@link SocketPermission} for the specified port range.__@param policy the {@link Permissions} instance to apply the dynamic {@link SocketPermission} to._@param portRange the port range;private static void addSocketPermissionForPortRange(final Permissions policy, final String portRange) {_        _        _        policy.add(new SocketPermission("*:" + portRange, "listen,resolve"))__    };add,dynamic,link,socket,permission,for,the,specified,port,range,param,policy,the,link,permissions,instance,to,apply,the,dynamic,link,socket,permission,to,param,port,range,the,port,range;private,static,void,add,socket,permission,for,port,range,final,permissions,policy,final,string,port,range,policy,add,new,socket,permission,port,range,listen,resolve
Security -> static Permissions createPermissions(Environment environment) throws IOException;1524684173;returns dynamic Permissions to configured paths and bind ports;static Permissions createPermissions(Environment environment) throws IOException {_        Permissions policy = new Permissions()__        addClasspathPermissions(policy)__        addFilePermissions(policy, environment)__        addBindPermissions(policy, environment.settings())__        return policy__    };returns,dynamic,permissions,to,configured,paths,and,bind,ports;static,permissions,create,permissions,environment,environment,throws,ioexception,permissions,policy,new,permissions,add,classpath,permissions,policy,add,file,permissions,policy,environment,add,bind,permissions,policy,environment,settings,return,policy
Security -> static Permissions createPermissions(Environment environment) throws IOException;1528762805;returns dynamic Permissions to configured paths and bind ports;static Permissions createPermissions(Environment environment) throws IOException {_        Permissions policy = new Permissions()__        addClasspathPermissions(policy)__        addFilePermissions(policy, environment)__        addBindPermissions(policy, environment.settings())__        return policy__    };returns,dynamic,permissions,to,configured,paths,and,bind,ports;static,permissions,create,permissions,environment,environment,throws,ioexception,permissions,policy,new,permissions,add,classpath,permissions,policy,add,file,permissions,policy,environment,add,bind,permissions,policy,environment,settings,return,policy
Security -> static Permissions createPermissions(Environment environment) throws IOException;1544823664;returns dynamic Permissions to configured paths and bind ports;static Permissions createPermissions(Environment environment) throws IOException {_        Permissions policy = new Permissions()__        addClasspathPermissions(policy)__        addFilePermissions(policy, environment)__        addBindPermissions(policy, environment.settings())__        return policy__    };returns,dynamic,permissions,to,configured,paths,and,bind,ports;static,permissions,create,permissions,environment,environment,throws,ioexception,permissions,policy,new,permissions,add,classpath,permissions,policy,add,file,permissions,policy,environment,add,bind,permissions,policy,environment,settings,return,policy
Security -> @SuppressForbidden(reason = "proper use of URL")     static Map<String,Policy> getPluginPermissions(Environment environment) throws IOException, NoSuchAlgorithmException;1524684173;Sets properties (codebase URLs) for policy files._we look for matching plugins and set URLs to fit;@SuppressForbidden(reason = "proper use of URL")_    static Map<String,Policy> getPluginPermissions(Environment environment) throws IOException, NoSuchAlgorithmException {_        Map<String,Policy> map = new HashMap<>()__        _        Set<Path> pluginsAndModules = new LinkedHashSet<>(PluginsService.findPluginDirs(environment.pluginsFile()))__        pluginsAndModules.addAll(PluginsService.findPluginDirs(environment.modulesFile()))___        _        for (Path plugin : pluginsAndModules) {_            Path policyFile = plugin.resolve(PluginInfo.ES_PLUGIN_POLICY)__            if (Files.exists(policyFile)) {_                _                _                Set<URL> codebases = new LinkedHashSet<>()_ _                try (DirectoryStream<Path> jarStream = Files.newDirectoryStream(plugin, "*.jar")) {_                    for (Path jar : jarStream) {_                        URL url = jar.toRealPath().toUri().toURL()__                        if (codebases.add(url) == false) {_                            throw new IllegalStateException("duplicate module/plugin: " + url)__                        }_                    }_                }__                _                Policy policy = readPolicy(policyFile.toUri().toURL(), getCodebaseJarMap(codebases))___                _                for (URL url : codebases) {_                    if (map.put(url.getFile(), policy) != null) {_                        _                        throw new IllegalStateException("per-plugin permissions already granted for jar file: " + url)__                    }_                }_            }_        }__        return Collections.unmodifiableMap(map)__    };sets,properties,codebase,urls,for,policy,files,we,look,for,matching,plugins,and,set,urls,to,fit;suppress,forbidden,reason,proper,use,of,url,static,map,string,policy,get,plugin,permissions,environment,environment,throws,ioexception,no,such,algorithm,exception,map,string,policy,map,new,hash,map,set,path,plugins,and,modules,new,linked,hash,set,plugins,service,find,plugin,dirs,environment,plugins,file,plugins,and,modules,add,all,plugins,service,find,plugin,dirs,environment,modules,file,for,path,plugin,plugins,and,modules,path,policy,file,plugin,resolve,plugin,info,if,files,exists,policy,file,set,url,codebases,new,linked,hash,set,try,directory,stream,path,jar,stream,files,new,directory,stream,plugin,jar,for,path,jar,jar,stream,url,url,jar,to,real,path,to,uri,to,url,if,codebases,add,url,false,throw,new,illegal,state,exception,duplicate,module,plugin,url,policy,policy,read,policy,policy,file,to,uri,to,url,get,codebase,jar,map,codebases,for,url,url,codebases,if,map,put,url,get,file,policy,null,throw,new,illegal,state,exception,per,plugin,permissions,already,granted,for,jar,file,url,return,collections,unmodifiable,map,map
Security -> @SuppressForbidden(reason = "proper use of URL")     static Map<String,Policy> getPluginPermissions(Environment environment) throws IOException, NoSuchAlgorithmException;1528762805;Sets properties (codebase URLs) for policy files._we look for matching plugins and set URLs to fit;@SuppressForbidden(reason = "proper use of URL")_    static Map<String,Policy> getPluginPermissions(Environment environment) throws IOException, NoSuchAlgorithmException {_        Map<String,Policy> map = new HashMap<>()__        _        Set<Path> pluginsAndModules = new LinkedHashSet<>(PluginsService.findPluginDirs(environment.pluginsFile()))__        pluginsAndModules.addAll(PluginsService.findPluginDirs(environment.modulesFile()))___        _        for (Path plugin : pluginsAndModules) {_            Path policyFile = plugin.resolve(PluginInfo.ES_PLUGIN_POLICY)__            if (Files.exists(policyFile)) {_                _                _                Set<URL> codebases = new LinkedHashSet<>()_ _                try (DirectoryStream<Path> jarStream = Files.newDirectoryStream(plugin, "*.jar")) {_                    for (Path jar : jarStream) {_                        URL url = jar.toRealPath().toUri().toURL()__                        if (codebases.add(url) == false) {_                            throw new IllegalStateException("duplicate module/plugin: " + url)__                        }_                    }_                }__                _                Policy policy = readPolicy(policyFile.toUri().toURL(), getCodebaseJarMap(codebases))___                _                for (URL url : codebases) {_                    if (map.put(url.getFile(), policy) != null) {_                        _                        throw new IllegalStateException("per-plugin permissions already granted for jar file: " + url)__                    }_                }_            }_        }__        return Collections.unmodifiableMap(map)__    };sets,properties,codebase,urls,for,policy,files,we,look,for,matching,plugins,and,set,urls,to,fit;suppress,forbidden,reason,proper,use,of,url,static,map,string,policy,get,plugin,permissions,environment,environment,throws,ioexception,no,such,algorithm,exception,map,string,policy,map,new,hash,map,set,path,plugins,and,modules,new,linked,hash,set,plugins,service,find,plugin,dirs,environment,plugins,file,plugins,and,modules,add,all,plugins,service,find,plugin,dirs,environment,modules,file,for,path,plugin,plugins,and,modules,path,policy,file,plugin,resolve,plugin,info,if,files,exists,policy,file,set,url,codebases,new,linked,hash,set,try,directory,stream,path,jar,stream,files,new,directory,stream,plugin,jar,for,path,jar,jar,stream,url,url,jar,to,real,path,to,uri,to,url,if,codebases,add,url,false,throw,new,illegal,state,exception,duplicate,module,plugin,url,policy,policy,read,policy,policy,file,to,uri,to,url,get,codebase,jar,map,codebases,for,url,url,codebases,if,map,put,url,get,file,policy,null,throw,new,illegal,state,exception,per,plugin,permissions,already,granted,for,jar,file,url,return,collections,unmodifiable,map,map
Security -> @SuppressForbidden(reason = "proper use of URL")     static Map<String,Policy> getPluginPermissions(Environment environment) throws IOException, NoSuchAlgorithmException;1544823664;Sets properties (codebase URLs) for policy files._we look for matching plugins and set URLs to fit;@SuppressForbidden(reason = "proper use of URL")_    static Map<String,Policy> getPluginPermissions(Environment environment) throws IOException, NoSuchAlgorithmException {_        Map<String,Policy> map = new HashMap<>()__        _        Set<Path> pluginsAndModules = new LinkedHashSet<>(PluginsService.findPluginDirs(environment.pluginsFile()))__        pluginsAndModules.addAll(PluginsService.findPluginDirs(environment.modulesFile()))___        _        for (Path plugin : pluginsAndModules) {_            Path policyFile = plugin.resolve(PluginInfo.ES_PLUGIN_POLICY)__            if (Files.exists(policyFile)) {_                _                _                Set<URL> codebases = new LinkedHashSet<>()_ _                try (DirectoryStream<Path> jarStream = Files.newDirectoryStream(plugin, "*.jar")) {_                    for (Path jar : jarStream) {_                        URL url = jar.toRealPath().toUri().toURL()__                        if (codebases.add(url) == false) {_                            throw new IllegalStateException("duplicate module/plugin: " + url)__                        }_                    }_                }__                _                Policy policy = readPolicy(policyFile.toUri().toURL(), getCodebaseJarMap(codebases))___                _                for (URL url : codebases) {_                    if (map.put(url.getFile(), policy) != null) {_                        _                        throw new IllegalStateException("per-plugin permissions already granted for jar file: " + url)__                    }_                }_            }_        }__        return Collections.unmodifiableMap(map)__    };sets,properties,codebase,urls,for,policy,files,we,look,for,matching,plugins,and,set,urls,to,fit;suppress,forbidden,reason,proper,use,of,url,static,map,string,policy,get,plugin,permissions,environment,environment,throws,ioexception,no,such,algorithm,exception,map,string,policy,map,new,hash,map,set,path,plugins,and,modules,new,linked,hash,set,plugins,service,find,plugin,dirs,environment,plugins,file,plugins,and,modules,add,all,plugins,service,find,plugin,dirs,environment,modules,file,for,path,plugin,plugins,and,modules,path,policy,file,plugin,resolve,plugin,info,if,files,exists,policy,file,set,url,codebases,new,linked,hash,set,try,directory,stream,path,jar,stream,files,new,directory,stream,plugin,jar,for,path,jar,jar,stream,url,url,jar,to,real,path,to,uri,to,url,if,codebases,add,url,false,throw,new,illegal,state,exception,duplicate,module,plugin,url,policy,policy,read,policy,policy,file,to,uri,to,url,get,codebase,jar,map,codebases,for,url,url,codebases,if,map,put,url,get,file,policy,null,throw,new,illegal,state,exception,per,plugin,permissions,already,granted,for,jar,file,url,return,collections,unmodifiable,map,map
Security -> private static void addSocketPermissionForTransportProfiles(final Permissions policy, final Settings settings);1524684173;Add dynamic {@link SocketPermission} based on transport settings. This method will first check if there is a port range specified in_the transport profile specified by {@code profileSettings} and will fall back to {@code settings}.__@param policy          the {@link Permissions} instance to apply the dynamic {@link SocketPermission}s to_@param settings        the {@link Settings} instance to read the transport settings from;private static void addSocketPermissionForTransportProfiles(final Permissions policy, final Settings settings) {_        _        Set<TcpTransport.ProfileSettings> profiles = TcpTransport.getProfileSettings(settings)__        Set<String> uniquePortRanges = new HashSet<>()__        _        for (final TcpTransport.ProfileSettings profile : profiles) {_            if (uniquePortRanges.add(profile.portOrRange)) {_                _                addSocketPermissionForPortRange(policy, profile.portOrRange)__            }_        }_    };add,dynamic,link,socket,permission,based,on,transport,settings,this,method,will,first,check,if,there,is,a,port,range,specified,in,the,transport,profile,specified,by,code,profile,settings,and,will,fall,back,to,code,settings,param,policy,the,link,permissions,instance,to,apply,the,dynamic,link,socket,permission,s,to,param,settings,the,link,settings,instance,to,read,the,transport,settings,from;private,static,void,add,socket,permission,for,transport,profiles,final,permissions,policy,final,settings,settings,set,tcp,transport,profile,settings,profiles,tcp,transport,get,profile,settings,settings,set,string,unique,port,ranges,new,hash,set,for,final,tcp,transport,profile,settings,profile,profiles,if,unique,port,ranges,add,profile,port,or,range,add,socket,permission,for,port,range,policy,profile,port,or,range
Security -> private static void addSocketPermissionForTransportProfiles(final Permissions policy, final Settings settings);1528762805;Add dynamic {@link SocketPermission} based on transport settings. This method will first check if there is a port range specified in_the transport profile specified by {@code profileSettings} and will fall back to {@code settings}.__@param policy          the {@link Permissions} instance to apply the dynamic {@link SocketPermission}s to_@param settings        the {@link Settings} instance to read the transport settings from;private static void addSocketPermissionForTransportProfiles(final Permissions policy, final Settings settings) {_        _        Set<TcpTransport.ProfileSettings> profiles = TcpTransport.getProfileSettings(settings)__        Set<String> uniquePortRanges = new HashSet<>()__        _        for (final TcpTransport.ProfileSettings profile : profiles) {_            if (uniquePortRanges.add(profile.portOrRange)) {_                _                addSocketPermissionForPortRange(policy, profile.portOrRange)__            }_        }_    };add,dynamic,link,socket,permission,based,on,transport,settings,this,method,will,first,check,if,there,is,a,port,range,specified,in,the,transport,profile,specified,by,code,profile,settings,and,will,fall,back,to,code,settings,param,policy,the,link,permissions,instance,to,apply,the,dynamic,link,socket,permission,s,to,param,settings,the,link,settings,instance,to,read,the,transport,settings,from;private,static,void,add,socket,permission,for,transport,profiles,final,permissions,policy,final,settings,settings,set,tcp,transport,profile,settings,profiles,tcp,transport,get,profile,settings,settings,set,string,unique,port,ranges,new,hash,set,for,final,tcp,transport,profile,settings,profile,profiles,if,unique,port,ranges,add,profile,port,or,range,add,socket,permission,for,port,range,policy,profile,port,or,range
Security -> private static void addSocketPermissionForTransportProfiles(final Permissions policy, final Settings settings);1544823664;Add dynamic {@link SocketPermission} based on transport settings. This method will first check if there is a port range specified in_the transport profile specified by {@code profileSettings} and will fall back to {@code settings}.__@param policy          the {@link Permissions} instance to apply the dynamic {@link SocketPermission}s to_@param settings        the {@link Settings} instance to read the transport settings from;private static void addSocketPermissionForTransportProfiles(final Permissions policy, final Settings settings) {_        _        Set<TcpTransport.ProfileSettings> profiles = TcpTransport.getProfileSettings(settings)__        Set<String> uniquePortRanges = new HashSet<>()__        _        for (final TcpTransport.ProfileSettings profile : profiles) {_            if (uniquePortRanges.add(profile.portOrRange)) {_                _                addSocketPermissionForPortRange(policy, profile.portOrRange)__            }_        }_    };add,dynamic,link,socket,permission,based,on,transport,settings,this,method,will,first,check,if,there,is,a,port,range,specified,in,the,transport,profile,specified,by,code,profile,settings,and,will,fall,back,to,code,settings,param,policy,the,link,permissions,instance,to,apply,the,dynamic,link,socket,permission,s,to,param,settings,the,link,settings,instance,to,read,the,transport,settings,from;private,static,void,add,socket,permission,for,transport,profiles,final,permissions,policy,final,settings,settings,set,tcp,transport,profile,settings,profiles,tcp,transport,get,profile,settings,settings,set,string,unique,port,ranges,new,hash,set,for,final,tcp,transport,profile,settings,profile,profiles,if,unique,port,ranges,add,profile,port,or,range,add,socket,permission,for,port,range,policy,profile,port,or,range
Security -> @SuppressForbidden(reason = "accesses jvm default tempdir as a self-test")     static void selfTest() throws IOException;1524684173;Simple checks that everything is ok;@SuppressForbidden(reason = "accesses jvm default tempdir as a self-test")_    static void selfTest() throws IOException {_        _        try {_            Path p = Files.createTempFile(null, null)__            try {_                Files.delete(p)__            } catch (IOException ignored) {_                _            }_        } catch (SecurityException problem) {_            throw new SecurityException("Security misconfiguration: cannot access java.io.tmpdir", problem)__        }_    };simple,checks,that,everything,is,ok;suppress,forbidden,reason,accesses,jvm,default,tempdir,as,a,self,test,static,void,self,test,throws,ioexception,try,path,p,files,create,temp,file,null,null,try,files,delete,p,catch,ioexception,ignored,catch,security,exception,problem,throw,new,security,exception,security,misconfiguration,cannot,access,java,io,tmpdir,problem
Security -> @SuppressForbidden(reason = "accesses jvm default tempdir as a self-test")     static void selfTest() throws IOException;1528762805;Simple checks that everything is ok;@SuppressForbidden(reason = "accesses jvm default tempdir as a self-test")_    static void selfTest() throws IOException {_        _        try {_            Path p = Files.createTempFile(null, null)__            try {_                Files.delete(p)__            } catch (IOException ignored) {_                _            }_        } catch (SecurityException problem) {_            throw new SecurityException("Security misconfiguration: cannot access java.io.tmpdir", problem)__        }_    };simple,checks,that,everything,is,ok;suppress,forbidden,reason,accesses,jvm,default,tempdir,as,a,self,test,static,void,self,test,throws,ioexception,try,path,p,files,create,temp,file,null,null,try,files,delete,p,catch,ioexception,ignored,catch,security,exception,problem,throw,new,security,exception,security,misconfiguration,cannot,access,java,io,tmpdir,problem
Security -> @SuppressForbidden(reason = "accesses jvm default tempdir as a self-test")     static void selfTest() throws IOException;1544823664;Simple checks that everything is ok;@SuppressForbidden(reason = "accesses jvm default tempdir as a self-test")_    static void selfTest() throws IOException {_        _        try {_            Path p = Files.createTempFile(null, null)__            try {_                Files.delete(p)__            } catch (IOException ignored) {_                _            }_        } catch (SecurityException problem) {_            throw new SecurityException("Security misconfiguration: cannot access java.io.tmpdir", problem)__        }_    };simple,checks,that,everything,is,ok;suppress,forbidden,reason,accesses,jvm,default,tempdir,as,a,self,test,static,void,self,test,throws,ioexception,try,path,p,files,create,temp,file,null,null,try,files,delete,p,catch,ioexception,ignored,catch,security,exception,problem,throw,new,security,exception,security,misconfiguration,cannot,access,java,io,tmpdir,problem
Security -> @SuppressForbidden(reason = "accesses fully qualified URLs to configure security")     static void addClasspathPermissions(Permissions policy) throws IOException;1524684173;Adds access to classpath jars/classes for jar hell scan, etc;@SuppressForbidden(reason = "accesses fully qualified URLs to configure security")_    static void addClasspathPermissions(Permissions policy) throws IOException {_        _        _        for (URL url : JarHell.parseClassPath()) {_            Path path__            try {_                path = PathUtils.get(url.toURI())__            } catch (URISyntaxException e) {_                throw new RuntimeException(e)__            }_            _            if (Files.isDirectory(path)) {_                addDirectoryPath(policy, "class.path", path, "read,readlink")__            } else {_                addSingleFilePath(policy, path, "read,readlink")__            }_        }_    };adds,access,to,classpath,jars,classes,for,jar,hell,scan,etc;suppress,forbidden,reason,accesses,fully,qualified,urls,to,configure,security,static,void,add,classpath,permissions,permissions,policy,throws,ioexception,for,url,url,jar,hell,parse,class,path,path,path,try,path,path,utils,get,url,to,uri,catch,urisyntax,exception,e,throw,new,runtime,exception,e,if,files,is,directory,path,add,directory,path,policy,class,path,path,read,readlink,else,add,single,file,path,policy,path,read,readlink
Security -> @SuppressForbidden(reason = "accesses fully qualified URLs to configure security")     static void addClasspathPermissions(Permissions policy) throws IOException;1528762805;Adds access to classpath jars/classes for jar hell scan, etc;@SuppressForbidden(reason = "accesses fully qualified URLs to configure security")_    static void addClasspathPermissions(Permissions policy) throws IOException {_        _        _        for (URL url : JarHell.parseClassPath()) {_            Path path__            try {_                path = PathUtils.get(url.toURI())__            } catch (URISyntaxException e) {_                throw new RuntimeException(e)__            }_            _            if (Files.isDirectory(path)) {_                addDirectoryPath(policy, "class.path", path, "read,readlink")__            } else {_                addSingleFilePath(policy, path, "read,readlink")__            }_        }_    };adds,access,to,classpath,jars,classes,for,jar,hell,scan,etc;suppress,forbidden,reason,accesses,fully,qualified,urls,to,configure,security,static,void,add,classpath,permissions,permissions,policy,throws,ioexception,for,url,url,jar,hell,parse,class,path,path,path,try,path,path,utils,get,url,to,uri,catch,urisyntax,exception,e,throw,new,runtime,exception,e,if,files,is,directory,path,add,directory,path,policy,class,path,path,read,readlink,else,add,single,file,path,policy,path,read,readlink
Security -> @SuppressForbidden(reason = "accesses fully qualified URLs to configure security")     static void addClasspathPermissions(Permissions policy) throws IOException;1544823664;Adds access to classpath jars/classes for jar hell scan, etc;@SuppressForbidden(reason = "accesses fully qualified URLs to configure security")_    static void addClasspathPermissions(Permissions policy) throws IOException {_        _        _        for (URL url : JarHell.parseClassPath()) {_            Path path__            try {_                path = PathUtils.get(url.toURI())__            } catch (URISyntaxException e) {_                throw new RuntimeException(e)__            }_            _            if (Files.isDirectory(path)) {_                addDirectoryPath(policy, "class.path", path, "read,readlink")__            } else {_                addSingleFilePath(policy, path, "read,readlink")__            }_        }_    };adds,access,to,classpath,jars,classes,for,jar,hell,scan,etc;suppress,forbidden,reason,accesses,fully,qualified,urls,to,configure,security,static,void,add,classpath,permissions,permissions,policy,throws,ioexception,for,url,url,jar,hell,parse,class,path,path,path,try,path,path,utils,get,url,to,uri,catch,urisyntax,exception,e,throw,new,runtime,exception,e,if,files,is,directory,path,add,directory,path,policy,class,path,path,read,readlink,else,add,single,file,path,policy,path,read,readlink
