commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Adds allocation commands to be applied to the cluster. Note, can be empty, in which case  * will simply run a simple "reroute".  */ ;/**  * Adds allocation commands to be applied to the cluster. Note, can be empty, in which case  * will simply run a simple "reroute".  */ public ClusterRerouteRequestBuilder add(AllocationCommand... commands) {     request.add(commands).     return this. }
true;public;1;4;/**  * Sets a dry run flag (defaults to {@code false}) allowing to run the commands without  * actually applying them to the cluster state, and getting the resulting cluster state back.  */ ;/**  * Sets a dry run flag (defaults to {@code false}) allowing to run the commands without  * actually applying them to the cluster state, and getting the resulting cluster state back.  */ public ClusterRerouteRequestBuilder setDryRun(boolean dryRun) {     request.dryRun(dryRun).     return this. }
true;public;1;4;/**  * Sets the explain flag (defaults to {@code false}). If true, the  * request will include an explanation in addition to the cluster state.  */ ;/**  * Sets the explain flag (defaults to {@code false}). If true, the  * request will include an explanation in addition to the cluster state.  */ public ClusterRerouteRequestBuilder setExplain(boolean explain) {     request.explain(explain).     return this. }
true;public;1;4;/**  * Sets the retry failed flag (defaults to {@code false}). If true, the  * request will retry allocating shards that can't currently be allocated due to too many allocation failures.  */ ;/**  * Sets the retry failed flag (defaults to {@code false}). If true, the  * request will retry allocating shards that can't currently be allocated due to too many allocation failures.  */ public ClusterRerouteRequestBuilder setRetryFailed(boolean retryFailed) {     request.setRetryFailed(retryFailed).     return this. }
