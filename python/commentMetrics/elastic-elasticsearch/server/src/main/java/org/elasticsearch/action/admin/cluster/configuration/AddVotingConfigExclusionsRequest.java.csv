commented;modifiers;parameterAmount;loc;comment;code
false;;1;13;;Set<VotingConfigExclusion> resolveVotingConfigExclusions(ClusterState currentState) {     final DiscoveryNodes allNodes = currentState.nodes().     final Set<VotingConfigExclusion> resolvedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions)).map(allNodes::get).filter(DiscoveryNode::isMasterNode).map(VotingConfigExclusion::new).collect(Collectors.toSet()).     if (resolvedNodes.isEmpty()) {         throw new IllegalArgumentException("add voting config exclusions request for " + Arrays.asList(nodeDescriptions) + " matched no master-eligible nodes").     }     resolvedNodes.removeIf(n -> currentState.getVotingConfigExclusions().contains(n)).     return resolvedNodes. }
false;;3;14;;Set<VotingConfigExclusion> resolveVotingConfigExclusionsAndCheckMaximum(ClusterState currentState, int maxExclusionsCount, String maximumSettingKey) {     final Set<VotingConfigExclusion> resolvedExclusions = resolveVotingConfigExclusions(currentState).     final int oldExclusionsCount = currentState.getVotingConfigExclusions().size().     final int newExclusionsCount = resolvedExclusions.size().     if (oldExclusionsCount + newExclusionsCount > maxExclusionsCount) {         throw new IllegalArgumentException("add voting config exclusions request for " + Arrays.asList(nodeDescriptions) + " would add [" + newExclusionsCount + "] exclusions to the existing [" + oldExclusionsCount + "] which would exceed the maximum of [" + maxExclusionsCount + "] set by [" + maximumSettingKey + "]").     }     return resolvedExclusions. }
true;public;0;3;/**  * @return descriptions of the nodes for whom to add voting config exclusions.  */ ;/**  * @return descriptions of the nodes for whom to add voting config exclusions.  */ public String[] getNodeDescriptions() {     return nodeDescriptions. }
true;public;0;3;/**  * @return how long to wait after adding the exclusions for the nodes to be removed from the voting configuration.  */ ;/**  * @return how long to wait after adding the exclusions for the nodes to be removed from the voting configuration.  */ public TimeValue getTimeout() {     return timeout. }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;1;4;;@Override public void readFrom(StreamInput in) throws IOException {     throw new UnsupportedOperationException("usage of Streamable is to be replaced by Writeable"). }
false;public;1;6;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeStringArray(nodeDescriptions).     out.writeTimeValue(timeout). }
false;public;0;7;;@Override public String toString() {     return "AddVotingConfigExclusionsRequest{" + "nodeDescriptions=" + Arrays.asList(nodeDescriptions) + ", timeout=" + timeout + '}'. }
