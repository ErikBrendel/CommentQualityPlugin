# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractBulkByScrollRequest -> public float getRequestsPerSecond();1524684173;The throttle for this request in sub-requests per second. {@link Float#POSITIVE_INFINITY} means set no throttle and that is the_default. Throttling is done between batches, as we start the next scroll requests. That way we can increase the scroll's timeout to_make sure that it contains any time that we might wait.;public float getRequestsPerSecond() {_        return requestsPerSecond__    };the,throttle,for,this,request,in,sub,requests,per,second,link,float,means,set,no,throttle,and,that,is,the,default,throttling,is,done,between,batches,as,we,start,the,next,scroll,requests,that,way,we,can,increase,the,scroll,s,timeout,to,make,sure,that,it,contains,any,time,that,we,might,wait;public,float,get,requests,per,second,return,requests,per,second
AbstractBulkByScrollRequest -> public float getRequestsPerSecond();1535552903;The throttle for this request in sub-requests per second. {@link Float#POSITIVE_INFINITY} means set no throttle and that is the_default. Throttling is done between batches, as we start the next scroll requests. That way we can increase the scroll's timeout to_make sure that it contains any time that we might wait.;public float getRequestsPerSecond() {_        return requestsPerSecond__    };the,throttle,for,this,request,in,sub,requests,per,second,link,float,means,set,no,throttle,and,that,is,the,default,throttling,is,done,between,batches,as,we,start,the,next,scroll,requests,that,way,we,can,increase,the,scroll,s,timeout,to,make,sure,that,it,contains,any,time,that,we,might,wait;public,float,get,requests,per,second,return,requests,per,second
AbstractBulkByScrollRequest -> public float getRequestsPerSecond();1535965276;The throttle for this request in sub-requests per second. {@link Float#POSITIVE_INFINITY} means set no throttle and that is the_default. Throttling is done between batches, as we start the next scroll requests. That way we can increase the scroll's timeout to_make sure that it contains any time that we might wait.;public float getRequestsPerSecond() {_        return requestsPerSecond__    };the,throttle,for,this,request,in,sub,requests,per,second,link,float,means,set,no,throttle,and,that,is,the,default,throttling,is,done,between,batches,as,we,start,the,next,scroll,requests,that,way,we,can,increase,the,scroll,s,timeout,to,make,sure,that,it,contains,any,time,that,we,might,wait;public,float,get,requests,per,second,return,requests,per,second
AbstractBulkByScrollRequest -> public float getRequestsPerSecond();1539615817;The throttle for this request in sub-requests per second. {@link Float#POSITIVE_INFINITY} means set no throttle and that is the_default. Throttling is done between batches, as we start the next scroll requests. That way we can increase the scroll's timeout to_make sure that it contains any time that we might wait.;public float getRequestsPerSecond() {_        return requestsPerSecond__    };the,throttle,for,this,request,in,sub,requests,per,second,link,float,means,set,no,throttle,and,that,is,the,default,throttling,is,done,between,batches,as,we,start,the,next,scroll,requests,that,way,we,can,increase,the,scroll,s,timeout,to,make,sure,that,it,contains,any,time,that,we,might,wait;public,float,get,requests,per,second,return,requests,per,second
AbstractBulkByScrollRequest -> public float getRequestsPerSecond();1547716969;The throttle for this request in sub-requests per second. {@link Float#POSITIVE_INFINITY} means set no throttle and that is the_default. Throttling is done between batches, as we start the next scroll requests. That way we can increase the scroll's timeout to_make sure that it contains any time that we might wait.;public float getRequestsPerSecond() {_        return requestsPerSecond__    };the,throttle,for,this,request,in,sub,requests,per,second,link,float,means,set,no,throttle,and,that,is,the,default,throttling,is,done,between,batches,as,we,start,the,next,scroll,requests,that,way,we,can,increase,the,scroll,s,timeout,to,make,sure,that,it,contains,any,time,that,we,might,wait;public,float,get,requests,per,second,return,requests,per,second
AbstractBulkByScrollRequest -> public Self setShouldStoreResult(boolean shouldStoreResult);1524684173;Should this task store its result after it has finished?;public Self setShouldStoreResult(boolean shouldStoreResult) {_        this.shouldStoreResult = shouldStoreResult__        return self()__    };should,this,task,store,its,result,after,it,has,finished;public,self,set,should,store,result,boolean,should,store,result,this,should,store,result,should,store,result,return,self
AbstractBulkByScrollRequest -> public Self setShouldStoreResult(boolean shouldStoreResult);1535552903;Should this task store its result after it has finished?;public Self setShouldStoreResult(boolean shouldStoreResult) {_        this.shouldStoreResult = shouldStoreResult__        return self()__    };should,this,task,store,its,result,after,it,has,finished;public,self,set,should,store,result,boolean,should,store,result,this,should,store,result,should,store,result,return,self
AbstractBulkByScrollRequest -> public Self setShouldStoreResult(boolean shouldStoreResult);1535965276;Should this task store its result after it has finished?;public Self setShouldStoreResult(boolean shouldStoreResult) {_        this.shouldStoreResult = shouldStoreResult__        return self()__    };should,this,task,store,its,result,after,it,has,finished;public,self,set,should,store,result,boolean,should,store,result,this,should,store,result,should,store,result,return,self
AbstractBulkByScrollRequest -> public Self setShouldStoreResult(boolean shouldStoreResult);1539615817;Should this task store its result after it has finished?;public Self setShouldStoreResult(boolean shouldStoreResult) {_        this.shouldStoreResult = shouldStoreResult__        return self()__    };should,this,task,store,its,result,after,it,has,finished;public,self,set,should,store,result,boolean,should,store,result,this,should,store,result,should,store,result,return,self
AbstractBulkByScrollRequest -> public Self setShouldStoreResult(boolean shouldStoreResult);1547716969;Should this task store its result after it has finished?;public Self setShouldStoreResult(boolean shouldStoreResult) {_        this.shouldStoreResult = shouldStoreResult__        return self()__    };should,this,task,store,its,result,after,it,has,finished;public,self,set,should,store,result,boolean,should,store,result,this,should,store,result,should,store,result,return,self
AbstractBulkByScrollRequest -> public Self setWaitForActiveShards(final int waitForActiveShards);1524684173;A shortcut for {@link #setWaitForActiveShards(ActiveShardCount)} where the numerical_shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}_to get the ActiveShardCount.;public Self setWaitForActiveShards(final int waitForActiveShards) {_        return setWaitForActiveShards(ActiveShardCount.from(waitForActiveShards))__    };a,shortcut,for,link,set,wait,for,active,shards,active,shard,count,where,the,numerical,shard,count,is,passed,in,instead,of,having,to,first,call,link,active,shard,count,from,int,to,get,the,active,shard,count;public,self,set,wait,for,active,shards,final,int,wait,for,active,shards,return,set,wait,for,active,shards,active,shard,count,from,wait,for,active,shards
AbstractBulkByScrollRequest -> public Self setWaitForActiveShards(final int waitForActiveShards);1535552903;A shortcut for {@link #setWaitForActiveShards(ActiveShardCount)} where the numerical_shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}_to get the ActiveShardCount.;public Self setWaitForActiveShards(final int waitForActiveShards) {_        return setWaitForActiveShards(ActiveShardCount.from(waitForActiveShards))__    };a,shortcut,for,link,set,wait,for,active,shards,active,shard,count,where,the,numerical,shard,count,is,passed,in,instead,of,having,to,first,call,link,active,shard,count,from,int,to,get,the,active,shard,count;public,self,set,wait,for,active,shards,final,int,wait,for,active,shards,return,set,wait,for,active,shards,active,shard,count,from,wait,for,active,shards
AbstractBulkByScrollRequest -> public Self setWaitForActiveShards(final int waitForActiveShards);1535965276;A shortcut for {@link #setWaitForActiveShards(ActiveShardCount)} where the numerical_shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}_to get the ActiveShardCount.;public Self setWaitForActiveShards(final int waitForActiveShards) {_        return setWaitForActiveShards(ActiveShardCount.from(waitForActiveShards))__    };a,shortcut,for,link,set,wait,for,active,shards,active,shard,count,where,the,numerical,shard,count,is,passed,in,instead,of,having,to,first,call,link,active,shard,count,from,int,to,get,the,active,shard,count;public,self,set,wait,for,active,shards,final,int,wait,for,active,shards,return,set,wait,for,active,shards,active,shard,count,from,wait,for,active,shards
AbstractBulkByScrollRequest -> public Self setWaitForActiveShards(final int waitForActiveShards);1539615817;A shortcut for {@link #setWaitForActiveShards(ActiveShardCount)} where the numerical_shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}_to get the ActiveShardCount.;public Self setWaitForActiveShards(final int waitForActiveShards) {_        return setWaitForActiveShards(ActiveShardCount.from(waitForActiveShards))__    };a,shortcut,for,link,set,wait,for,active,shards,active,shard,count,where,the,numerical,shard,count,is,passed,in,instead,of,having,to,first,call,link,active,shard,count,from,int,to,get,the,active,shard,count;public,self,set,wait,for,active,shards,final,int,wait,for,active,shards,return,set,wait,for,active,shards,active,shard,count,from,wait,for,active,shards
AbstractBulkByScrollRequest -> public Self setWaitForActiveShards(final int waitForActiveShards);1547716969;A shortcut for {@link #setWaitForActiveShards(ActiveShardCount)} where the numerical_shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}_to get the ActiveShardCount.;public Self setWaitForActiveShards(final int waitForActiveShards) {_        return setWaitForActiveShards(ActiveShardCount.from(waitForActiveShards))__    };a,shortcut,for,link,set,wait,for,active,shards,active,shard,count,where,the,numerical,shard,count,is,passed,in,instead,of,having,to,first,call,link,active,shard,count,from,int,to,get,the,active,shard,count;public,self,set,wait,for,active,shards,final,int,wait,for,active,shards,return,set,wait,for,active,shards,active,shard,count,from,wait,for,active,shards
AbstractBulkByScrollRequest -> public TimeValue getScrollTime();1524684173;Get scroll timeout;public TimeValue getScrollTime() {_        return searchRequest.scroll().keepAlive()__    };get,scroll,timeout;public,time,value,get,scroll,time,return,search,request,scroll,keep,alive
AbstractBulkByScrollRequest -> public TimeValue getScrollTime();1535552903;Get scroll timeout;public TimeValue getScrollTime() {_        return searchRequest.scroll().keepAlive()__    };get,scroll,timeout;public,time,value,get,scroll,time,return,search,request,scroll,keep,alive
AbstractBulkByScrollRequest -> public TimeValue getScrollTime();1535965276;Get scroll timeout;public TimeValue getScrollTime() {_        return searchRequest.scroll().keepAlive()__    };get,scroll,timeout;public,time,value,get,scroll,time,return,search,request,scroll,keep,alive
AbstractBulkByScrollRequest -> public TimeValue getScrollTime();1539615817;Get scroll timeout;public TimeValue getScrollTime() {_        return searchRequest.scroll().keepAlive()__    };get,scroll,timeout;public,time,value,get,scroll,time,return,search,request,scroll,keep,alive
AbstractBulkByScrollRequest -> public TimeValue getScrollTime();1547716969;Get scroll timeout;public TimeValue getScrollTime() {_        return searchRequest.scroll().keepAlive()__    };get,scroll,timeout;public,time,value,get,scroll,time,return,search,request,scroll,keep,alive
AbstractBulkByScrollRequest -> protected abstract Self self()_;1524684173;`this` cast to Self. Used for building fluent methods without cast_warnings.;protected abstract Self self()_;this,cast,to,self,used,for,building,fluent,methods,without,cast,warnings;protected,abstract,self,self
AbstractBulkByScrollRequest -> protected abstract Self self()_;1535552903;`this` cast to Self. Used for building fluent methods without cast_warnings.;protected abstract Self self()_;this,cast,to,self,used,for,building,fluent,methods,without,cast,warnings;protected,abstract,self,self
AbstractBulkByScrollRequest -> protected abstract Self self()_;1535965276;`this` cast to Self. Used for building fluent methods without cast_warnings.;protected abstract Self self()_;this,cast,to,self,used,for,building,fluent,methods,without,cast,warnings;protected,abstract,self,self
AbstractBulkByScrollRequest -> protected abstract Self self()_;1539615817;`this` cast to Self. Used for building fluent methods without cast_warnings.;protected abstract Self self()_;this,cast,to,self,used,for,building,fluent,methods,without,cast,warnings;protected,abstract,self,self
AbstractBulkByScrollRequest -> protected abstract Self self()_;1547716969;`this` cast to Self. Used for building fluent methods without cast_warnings.;protected abstract Self self()_;this,cast,to,self,used,for,building,fluent,methods,without,cast,warnings;protected,abstract,self,self
AbstractBulkByScrollRequest -> public int getSize();1524684173;Maximum number of processed documents. Defaults to -1 meaning process all_documents.;public int getSize() {_        return size__    };maximum,number,of,processed,documents,defaults,to,1,meaning,process,all,documents;public,int,get,size,return,size
AbstractBulkByScrollRequest -> public int getSize();1535552903;Maximum number of processed documents. Defaults to -1 meaning process all_documents.;public int getSize() {_        return size__    };maximum,number,of,processed,documents,defaults,to,1,meaning,process,all,documents;public,int,get,size,return,size
AbstractBulkByScrollRequest -> public int getSize();1535965276;Maximum number of processed documents. Defaults to -1 meaning process all_documents.;public int getSize() {_        return size__    };maximum,number,of,processed,documents,defaults,to,1,meaning,process,all,documents;public,int,get,size,return,size
AbstractBulkByScrollRequest -> public int getSize();1539615817;Maximum number of processed documents. Defaults to -1 meaning process all_documents.;public int getSize() {_        return size__    };maximum,number,of,processed,documents,defaults,to,1,meaning,process,all,documents;public,int,get,size,return,size
AbstractBulkByScrollRequest -> public int getSize();1547716969;Maximum number of processed documents. Defaults to -1 meaning process all_documents.;public int getSize() {_        return size__    };maximum,number,of,processed,documents,defaults,to,1,meaning,process,all,documents;public,int,get,size,return,size
AbstractBulkByScrollRequest -> public Self setScroll(TimeValue keepAlive);1524684173;Set scroll timeout for {@link SearchRequest};public Self setScroll(TimeValue keepAlive) {_        searchRequest.scroll(new Scroll(keepAlive))__        return self()__    };set,scroll,timeout,for,link,search,request;public,self,set,scroll,time,value,keep,alive,search,request,scroll,new,scroll,keep,alive,return,self
AbstractBulkByScrollRequest -> public Self setScroll(TimeValue keepAlive);1535552903;Set scroll timeout for {@link SearchRequest};public Self setScroll(TimeValue keepAlive) {_        searchRequest.scroll(new Scroll(keepAlive))__        return self()__    };set,scroll,timeout,for,link,search,request;public,self,set,scroll,time,value,keep,alive,search,request,scroll,new,scroll,keep,alive,return,self
AbstractBulkByScrollRequest -> public Self setScroll(TimeValue keepAlive);1535965276;Set scroll timeout for {@link SearchRequest};public Self setScroll(TimeValue keepAlive) {_        searchRequest.scroll(new Scroll(keepAlive))__        return self()__    };set,scroll,timeout,for,link,search,request;public,self,set,scroll,time,value,keep,alive,search,request,scroll,new,scroll,keep,alive,return,self
AbstractBulkByScrollRequest -> public Self setScroll(TimeValue keepAlive);1539615817;Set scroll timeout for {@link SearchRequest};public Self setScroll(TimeValue keepAlive) {_        searchRequest.scroll(new Scroll(keepAlive))__        return self()__    };set,scroll,timeout,for,link,search,request;public,self,set,scroll,time,value,keep,alive,search,request,scroll,new,scroll,keep,alive,return,self
AbstractBulkByScrollRequest -> public Self setScroll(TimeValue keepAlive);1547716969;Set scroll timeout for {@link SearchRequest};public Self setScroll(TimeValue keepAlive) {_        searchRequest.scroll(new Scroll(keepAlive))__        return self()__    };set,scroll,timeout,for,link,search,request;public,self,set,scroll,time,value,keep,alive,search,request,scroll,new,scroll,keep,alive,return,self
AbstractBulkByScrollRequest -> public boolean isAbortOnVersionConflict();1524684173;Should version conflicts cause aborts? Defaults to false.;public boolean isAbortOnVersionConflict() {_        return abortOnVersionConflict__    };should,version,conflicts,cause,aborts,defaults,to,false;public,boolean,is,abort,on,version,conflict,return,abort,on,version,conflict
AbstractBulkByScrollRequest -> public boolean isAbortOnVersionConflict();1535552903;Should version conflicts cause aborts? Defaults to false.;public boolean isAbortOnVersionConflict() {_        return abortOnVersionConflict__    };should,version,conflicts,cause,aborts,defaults,to,false;public,boolean,is,abort,on,version,conflict,return,abort,on,version,conflict
AbstractBulkByScrollRequest -> public boolean isAbortOnVersionConflict();1535965276;Should version conflicts cause aborts? Defaults to false.;public boolean isAbortOnVersionConflict() {_        return abortOnVersionConflict__    };should,version,conflicts,cause,aborts,defaults,to,false;public,boolean,is,abort,on,version,conflict,return,abort,on,version,conflict
AbstractBulkByScrollRequest -> public boolean isAbortOnVersionConflict();1539615817;Should version conflicts cause aborts? Defaults to false.;public boolean isAbortOnVersionConflict() {_        return abortOnVersionConflict__    };should,version,conflicts,cause,aborts,defaults,to,false;public,boolean,is,abort,on,version,conflict,return,abort,on,version,conflict
AbstractBulkByScrollRequest -> public boolean isAbortOnVersionConflict();1547716969;Whether or not version conflicts cause the action to abort.;public boolean isAbortOnVersionConflict() {_        return abortOnVersionConflict__    };whether,or,not,version,conflicts,cause,the,action,to,abort;public,boolean,is,abort,on,version,conflict,return,abort,on,version,conflict
AbstractBulkByScrollRequest -> public TimeValue getRetryBackoffInitialTime();1524684173;Initial delay after a rejection before retrying request.;public TimeValue getRetryBackoffInitialTime() {_        return retryBackoffInitialTime__    };initial,delay,after,a,rejection,before,retrying,request;public,time,value,get,retry,backoff,initial,time,return,retry,backoff,initial,time
AbstractBulkByScrollRequest -> public TimeValue getRetryBackoffInitialTime();1535552903;Initial delay after a rejection before retrying request.;public TimeValue getRetryBackoffInitialTime() {_        return retryBackoffInitialTime__    };initial,delay,after,a,rejection,before,retrying,request;public,time,value,get,retry,backoff,initial,time,return,retry,backoff,initial,time
AbstractBulkByScrollRequest -> public TimeValue getRetryBackoffInitialTime();1535965276;Initial delay after a rejection before retrying request.;public TimeValue getRetryBackoffInitialTime() {_        return retryBackoffInitialTime__    };initial,delay,after,a,rejection,before,retrying,request;public,time,value,get,retry,backoff,initial,time,return,retry,backoff,initial,time
AbstractBulkByScrollRequest -> public TimeValue getRetryBackoffInitialTime();1539615817;Initial delay after a rejection before retrying request.;public TimeValue getRetryBackoffInitialTime() {_        return retryBackoffInitialTime__    };initial,delay,after,a,rejection,before,retrying,request;public,time,value,get,retry,backoff,initial,time,return,retry,backoff,initial,time
AbstractBulkByScrollRequest -> public TimeValue getRetryBackoffInitialTime();1547716969;Initial delay after a rejection before retrying request.;public TimeValue getRetryBackoffInitialTime() {_        return retryBackoffInitialTime__    };initial,delay,after,a,rejection,before,retrying,request;public,time,value,get,retry,backoff,initial,time,return,retry,backoff,initial,time
AbstractBulkByScrollRequest -> public int getMaxRetries();1524684173;Total number of retries attempted for rejections.;public int getMaxRetries() {_        return maxRetries__    };total,number,of,retries,attempted,for,rejections;public,int,get,max,retries,return,max,retries
AbstractBulkByScrollRequest -> public int getMaxRetries();1535552903;Total number of retries attempted for rejections.;public int getMaxRetries() {_        return maxRetries__    };total,number,of,retries,attempted,for,rejections;public,int,get,max,retries,return,max,retries
AbstractBulkByScrollRequest -> public int getMaxRetries();1535965276;Total number of retries attempted for rejections.;public int getMaxRetries() {_        return maxRetries__    };total,number,of,retries,attempted,for,rejections;public,int,get,max,retries,return,max,retries
AbstractBulkByScrollRequest -> public int getMaxRetries();1539615817;Total number of retries attempted for rejections.;public int getMaxRetries() {_        return maxRetries__    };total,number,of,retries,attempted,for,rejections;public,int,get,max,retries,return,max,retries
AbstractBulkByScrollRequest -> public int getMaxRetries();1547716969;Total number of retries attempted for rejections.;public int getMaxRetries() {_        return maxRetries__    };total,number,of,retries,attempted,for,rejections;public,int,get,max,retries,return,max,retries
AbstractBulkByScrollRequest -> public Self setSlices(int slices);1524684173;The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.;public Self setSlices(int slices) {_        if (slices < 0) {_            throw new IllegalArgumentException("[slices] must be at least 0 but was [" + slices + "]")__        }_        this.slices = slices__        return self()__    };the,number,of,slices,this,task,should,be,divided,into,defaults,to,1,meaning,the,task,isn,t,sliced,into,subtasks;public,self,set,slices,int,slices,if,slices,0,throw,new,illegal,argument,exception,slices,must,be,at,least,0,but,was,slices,this,slices,slices,return,self
AbstractBulkByScrollRequest -> public Self setSlices(int slices);1535552903;The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.;public Self setSlices(int slices) {_        if (slices < 0) {_            throw new IllegalArgumentException("[slices] must be at least 0 but was [" + slices + "]")__        }_        this.slices = slices__        return self()__    };the,number,of,slices,this,task,should,be,divided,into,defaults,to,1,meaning,the,task,isn,t,sliced,into,subtasks;public,self,set,slices,int,slices,if,slices,0,throw,new,illegal,argument,exception,slices,must,be,at,least,0,but,was,slices,this,slices,slices,return,self
AbstractBulkByScrollRequest -> public Self setSlices(int slices);1535965276;The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.;public Self setSlices(int slices) {_        if (slices < 0) {_            throw new IllegalArgumentException("[slices] must be at least 0 but was [" + slices + "]")__        }_        this.slices = slices__        return self()__    };the,number,of,slices,this,task,should,be,divided,into,defaults,to,1,meaning,the,task,isn,t,sliced,into,subtasks;public,self,set,slices,int,slices,if,slices,0,throw,new,illegal,argument,exception,slices,must,be,at,least,0,but,was,slices,this,slices,slices,return,self
AbstractBulkByScrollRequest -> public Self setSlices(int slices);1539615817;The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.;public Self setSlices(int slices) {_        if (slices < 0) {_            throw new IllegalArgumentException("[slices] must be at least 0 but was [" + slices + "]")__        }_        this.slices = slices__        return self()__    };the,number,of,slices,this,task,should,be,divided,into,defaults,to,1,meaning,the,task,isn,t,sliced,into,subtasks;public,self,set,slices,int,slices,if,slices,0,throw,new,illegal,argument,exception,slices,must,be,at,least,0,but,was,slices,this,slices,slices,return,self
AbstractBulkByScrollRequest -> public Self setSlices(int slices);1547716969;The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.;public Self setSlices(int slices) {_        if (slices < 0) {_            throw new IllegalArgumentException("[slices] must be at least 0 but was [" + slices + "]")__        }_        this.slices = slices__        return self()__    };the,number,of,slices,this,task,should,be,divided,into,defaults,to,1,meaning,the,task,isn,t,sliced,into,subtasks;public,self,set,slices,int,slices,if,slices,0,throw,new,illegal,argument,exception,slices,must,be,at,least,0,but,was,slices,this,slices,slices,return,self
AbstractBulkByScrollRequest -> public abstract Self forSlice(TaskId slicingTask, SearchRequest slice, int totalSlices)_;1524684173;Build a new request for a slice of the parent request.;public abstract Self forSlice(TaskId slicingTask, SearchRequest slice, int totalSlices)_;build,a,new,request,for,a,slice,of,the,parent,request;public,abstract,self,for,slice,task,id,slicing,task,search,request,slice,int,total,slices
AbstractBulkByScrollRequest -> public abstract Self forSlice(TaskId slicingTask, SearchRequest slice, int totalSlices)_;1535552903;Build a new request for a slice of the parent request.;public abstract Self forSlice(TaskId slicingTask, SearchRequest slice, int totalSlices)_;build,a,new,request,for,a,slice,of,the,parent,request;public,abstract,self,for,slice,task,id,slicing,task,search,request,slice,int,total,slices
AbstractBulkByScrollRequest -> public abstract Self forSlice(TaskId slicingTask, SearchRequest slice, int totalSlices)_;1535965276;Build a new request for a slice of the parent request.;public abstract Self forSlice(TaskId slicingTask, SearchRequest slice, int totalSlices)_;build,a,new,request,for,a,slice,of,the,parent,request;public,abstract,self,for,slice,task,id,slicing,task,search,request,slice,int,total,slices
AbstractBulkByScrollRequest -> public abstract Self forSlice(TaskId slicingTask, SearchRequest slice, int totalSlices)_;1539615817;Build a new request for a slice of the parent request.;public abstract Self forSlice(TaskId slicingTask, SearchRequest slice, int totalSlices)_;build,a,new,request,for,a,slice,of,the,parent,request;public,abstract,self,for,slice,task,id,slicing,task,search,request,slice,int,total,slices
AbstractBulkByScrollRequest -> public abstract Self forSlice(TaskId slicingTask, SearchRequest slice, int totalSlices)_;1547716969;Build a new request for a slice of the parent request.;public abstract Self forSlice(TaskId slicingTask, SearchRequest slice, int totalSlices)_;build,a,new,request,for,a,slice,of,the,parent,request;public,abstract,self,for,slice,task,id,slicing,task,search,request,slice,int,total,slices
AbstractBulkByScrollRequest -> public AbstractBulkByScrollRequest();1524684173;Constructor for deserialization.;public AbstractBulkByScrollRequest() {_    };constructor,for,deserialization;public,abstract,bulk,by,scroll,request
AbstractBulkByScrollRequest -> public AbstractBulkByScrollRequest();1535552903;Constructor for deserialization.;public AbstractBulkByScrollRequest() {_    };constructor,for,deserialization;public,abstract,bulk,by,scroll,request
AbstractBulkByScrollRequest -> public AbstractBulkByScrollRequest();1535965276;Constructor for deserialization.;public AbstractBulkByScrollRequest() {_    };constructor,for,deserialization;public,abstract,bulk,by,scroll,request
AbstractBulkByScrollRequest -> public AbstractBulkByScrollRequest();1539615817;Constructor for deserialization.;public AbstractBulkByScrollRequest() {_    };constructor,for,deserialization;public,abstract,bulk,by,scroll,request
AbstractBulkByScrollRequest -> public AbstractBulkByScrollRequest();1547716969;Constructor for deserialization.;public AbstractBulkByScrollRequest() {_    };constructor,for,deserialization;public,abstract,bulk,by,scroll,request
AbstractBulkByScrollRequest -> protected void searchToString(StringBuilder b);1524684173;Append a short description of the search request to a StringBuilder. Used_to make toString.;protected void searchToString(StringBuilder b) {_        if (searchRequest.indices() != null && searchRequest.indices().length != 0) {_            b.append(Arrays.toString(searchRequest.indices()))__        } else {_            b.append("[all indices]")__        }_        if (searchRequest.types() != null && searchRequest.types().length != 0) {_            b.append(Arrays.toString(searchRequest.types()))__        }_    };append,a,short,description,of,the,search,request,to,a,string,builder,used,to,make,to,string;protected,void,search,to,string,string,builder,b,if,search,request,indices,null,search,request,indices,length,0,b,append,arrays,to,string,search,request,indices,else,b,append,all,indices,if,search,request,types,null,search,request,types,length,0,b,append,arrays,to,string,search,request,types
AbstractBulkByScrollRequest -> protected void searchToString(StringBuilder b);1535552903;Append a short description of the search request to a StringBuilder. Used_to make toString.;protected void searchToString(StringBuilder b) {_        if (searchRequest.indices() != null && searchRequest.indices().length != 0) {_            b.append(Arrays.toString(searchRequest.indices()))__        } else {_            b.append("[all indices]")__        }_        if (searchRequest.types() != null && searchRequest.types().length != 0) {_            b.append(Arrays.toString(searchRequest.types()))__        }_    };append,a,short,description,of,the,search,request,to,a,string,builder,used,to,make,to,string;protected,void,search,to,string,string,builder,b,if,search,request,indices,null,search,request,indices,length,0,b,append,arrays,to,string,search,request,indices,else,b,append,all,indices,if,search,request,types,null,search,request,types,length,0,b,append,arrays,to,string,search,request,types
AbstractBulkByScrollRequest -> protected void searchToString(StringBuilder b);1535965276;Append a short description of the search request to a StringBuilder. Used_to make toString.;protected void searchToString(StringBuilder b) {_        if (searchRequest.indices() != null && searchRequest.indices().length != 0) {_            b.append(Arrays.toString(searchRequest.indices()))__        } else {_            b.append("[all indices]")__        }_        if (searchRequest.types() != null && searchRequest.types().length != 0) {_            b.append(Arrays.toString(searchRequest.types()))__        }_    };append,a,short,description,of,the,search,request,to,a,string,builder,used,to,make,to,string;protected,void,search,to,string,string,builder,b,if,search,request,indices,null,search,request,indices,length,0,b,append,arrays,to,string,search,request,indices,else,b,append,all,indices,if,search,request,types,null,search,request,types,length,0,b,append,arrays,to,string,search,request,types
AbstractBulkByScrollRequest -> protected void searchToString(StringBuilder b);1539615817;Append a short description of the search request to a StringBuilder. Used_to make toString.;protected void searchToString(StringBuilder b) {_        if (searchRequest.indices() != null && searchRequest.indices().length != 0) {_            b.append(Arrays.toString(searchRequest.indices()))__        } else {_            b.append("[all indices]")__        }_        if (searchRequest.types() != null && searchRequest.types().length != 0) {_            b.append(Arrays.toString(searchRequest.types()))__        }_    };append,a,short,description,of,the,search,request,to,a,string,builder,used,to,make,to,string;protected,void,search,to,string,string,builder,b,if,search,request,indices,null,search,request,indices,length,0,b,append,arrays,to,string,search,request,indices,else,b,append,all,indices,if,search,request,types,null,search,request,types,length,0,b,append,arrays,to,string,search,request,types
AbstractBulkByScrollRequest -> protected void searchToString(StringBuilder b);1547716969;Append a short description of the search request to a StringBuilder. Used_to make toString.;protected void searchToString(StringBuilder b) {_        if (searchRequest.indices() != null && searchRequest.indices().length != 0) {_            b.append(Arrays.toString(searchRequest.indices()))__        } else {_            b.append("[all indices]")__        }_        if (searchRequest.types() != null && searchRequest.types().length != 0) {_            b.append(Arrays.toString(searchRequest.types()))__        }_    };append,a,short,description,of,the,search,request,to,a,string,builder,used,to,make,to,string;protected,void,search,to,string,string,builder,b,if,search,request,indices,null,search,request,indices,length,0,b,append,arrays,to,string,search,request,indices,else,b,append,all,indices,if,search,request,types,null,search,request,types,length,0,b,append,arrays,to,string,search,request,types
AbstractBulkByScrollRequest -> public Self setSize(int size);1524684173;Maximum number of processed documents. Defaults to -1 meaning process all_documents.;public Self setSize(int size) {_        if (size < 0) {_            throw new IllegalArgumentException("[size] parameter cannot be negative, found [" + size + "]")__        }_        this.size = size__        return self()__    };maximum,number,of,processed,documents,defaults,to,1,meaning,process,all,documents;public,self,set,size,int,size,if,size,0,throw,new,illegal,argument,exception,size,parameter,cannot,be,negative,found,size,this,size,size,return,self
AbstractBulkByScrollRequest -> public Self setSize(int size);1535552903;Maximum number of processed documents. Defaults to -1 meaning process all_documents.;public Self setSize(int size) {_        if (size < 0) {_            throw new IllegalArgumentException("[size] parameter cannot be negative, found [" + size + "]")__        }_        this.size = size__        return self()__    };maximum,number,of,processed,documents,defaults,to,1,meaning,process,all,documents;public,self,set,size,int,size,if,size,0,throw,new,illegal,argument,exception,size,parameter,cannot,be,negative,found,size,this,size,size,return,self
AbstractBulkByScrollRequest -> public Self setSize(int size);1535965276;Maximum number of processed documents. Defaults to -1 meaning process all_documents.;public Self setSize(int size) {_        if (size < 0) {_            throw new IllegalArgumentException("[size] parameter cannot be negative, found [" + size + "]")__        }_        this.size = size__        return self()__    };maximum,number,of,processed,documents,defaults,to,1,meaning,process,all,documents;public,self,set,size,int,size,if,size,0,throw,new,illegal,argument,exception,size,parameter,cannot,be,negative,found,size,this,size,size,return,self
AbstractBulkByScrollRequest -> public Self setSize(int size);1539615817;Maximum number of processed documents. Defaults to -1 meaning process all_documents.;public Self setSize(int size) {_        if (size < 0) {_            throw new IllegalArgumentException("[size] parameter cannot be negative, found [" + size + "]")__        }_        this.size = size__        return self()__    };maximum,number,of,processed,documents,defaults,to,1,meaning,process,all,documents;public,self,set,size,int,size,if,size,0,throw,new,illegal,argument,exception,size,parameter,cannot,be,negative,found,size,this,size,size,return,self
AbstractBulkByScrollRequest -> public Self setSize(int size);1547716969;Maximum number of processed documents. Defaults to -1 meaning process all_documents.;public Self setSize(int size) {_        if (size < 0) {_            throw new IllegalArgumentException("[size] parameter cannot be negative, found [" + size + "]")__        }_        this.size = size__        return self()__    };maximum,number,of,processed,documents,defaults,to,1,meaning,process,all,documents;public,self,set,size,int,size,if,size,0,throw,new,illegal,argument,exception,size,parameter,cannot,be,negative,found,size,this,size,size,return,self
AbstractBulkByScrollRequest -> public AbstractBulkByScrollRequest(SearchRequest searchRequest, boolean setDefaults);1524684173;Constructor for actual use.__@param searchRequest the search request to execute to get the documents to process_@param setDefaults should this request set the defaults on the search request? Usually set to true but leave it false to support_request slicing;public AbstractBulkByScrollRequest(SearchRequest searchRequest, boolean setDefaults) {_        this.searchRequest = searchRequest___        _        if (setDefaults) {_            searchRequest.scroll(DEFAULT_SCROLL_TIMEOUT)__            searchRequest.source(new SearchSourceBuilder())__            searchRequest.source().size(DEFAULT_SCROLL_SIZE)__        }_    };constructor,for,actual,use,param,search,request,the,search,request,to,execute,to,get,the,documents,to,process,param,set,defaults,should,this,request,set,the,defaults,on,the,search,request,usually,set,to,true,but,leave,it,false,to,support,request,slicing;public,abstract,bulk,by,scroll,request,search,request,search,request,boolean,set,defaults,this,search,request,search,request,if,set,defaults,search,request,scroll,search,request,source,new,search,source,builder,search,request,source,size
AbstractBulkByScrollRequest -> public AbstractBulkByScrollRequest(SearchRequest searchRequest, boolean setDefaults);1535552903;Constructor for actual use.__@param searchRequest the search request to execute to get the documents to process_@param setDefaults should this request set the defaults on the search request? Usually set to true but leave it false to support_request slicing;public AbstractBulkByScrollRequest(SearchRequest searchRequest, boolean setDefaults) {_        this.searchRequest = searchRequest___        _        if (setDefaults) {_            searchRequest.scroll(DEFAULT_SCROLL_TIMEOUT)__            searchRequest.source(new SearchSourceBuilder())__            searchRequest.source().size(DEFAULT_SCROLL_SIZE)__        }_    };constructor,for,actual,use,param,search,request,the,search,request,to,execute,to,get,the,documents,to,process,param,set,defaults,should,this,request,set,the,defaults,on,the,search,request,usually,set,to,true,but,leave,it,false,to,support,request,slicing;public,abstract,bulk,by,scroll,request,search,request,search,request,boolean,set,defaults,this,search,request,search,request,if,set,defaults,search,request,scroll,search,request,source,new,search,source,builder,search,request,source,size
AbstractBulkByScrollRequest -> public AbstractBulkByScrollRequest(SearchRequest searchRequest, boolean setDefaults);1535965276;Constructor for actual use.__@param searchRequest the search request to execute to get the documents to process_@param setDefaults should this request set the defaults on the search request? Usually set to true but leave it false to support_request slicing;public AbstractBulkByScrollRequest(SearchRequest searchRequest, boolean setDefaults) {_        this.searchRequest = searchRequest___        _        if (setDefaults) {_            searchRequest.scroll(DEFAULT_SCROLL_TIMEOUT)__            searchRequest.source(new SearchSourceBuilder())__            searchRequest.source().size(DEFAULT_SCROLL_SIZE)__        }_    };constructor,for,actual,use,param,search,request,the,search,request,to,execute,to,get,the,documents,to,process,param,set,defaults,should,this,request,set,the,defaults,on,the,search,request,usually,set,to,true,but,leave,it,false,to,support,request,slicing;public,abstract,bulk,by,scroll,request,search,request,search,request,boolean,set,defaults,this,search,request,search,request,if,set,defaults,search,request,scroll,search,request,source,new,search,source,builder,search,request,source,size
AbstractBulkByScrollRequest -> public AbstractBulkByScrollRequest(SearchRequest searchRequest, boolean setDefaults);1539615817;Constructor for actual use.__@param searchRequest the search request to execute to get the documents to process_@param setDefaults should this request set the defaults on the search request? Usually set to true but leave it false to support_request slicing;public AbstractBulkByScrollRequest(SearchRequest searchRequest, boolean setDefaults) {_        this.searchRequest = searchRequest___        _        if (setDefaults) {_            searchRequest.scroll(DEFAULT_SCROLL_TIMEOUT)__            searchRequest.source(new SearchSourceBuilder())__            searchRequest.source().size(DEFAULT_SCROLL_SIZE)__        }_    };constructor,for,actual,use,param,search,request,the,search,request,to,execute,to,get,the,documents,to,process,param,set,defaults,should,this,request,set,the,defaults,on,the,search,request,usually,set,to,true,but,leave,it,false,to,support,request,slicing;public,abstract,bulk,by,scroll,request,search,request,search,request,boolean,set,defaults,this,search,request,search,request,if,set,defaults,search,request,scroll,search,request,source,new,search,source,builder,search,request,source,size
AbstractBulkByScrollRequest -> public AbstractBulkByScrollRequest(SearchRequest searchRequest, boolean setDefaults);1547716969;Constructor for actual use.__@param searchRequest the search request to execute to get the documents to process_@param setDefaults should this request set the defaults on the search request? Usually set to true but leave it false to support_request slicing;public AbstractBulkByScrollRequest(SearchRequest searchRequest, boolean setDefaults) {_        this.searchRequest = searchRequest___        _        if (setDefaults) {_            searchRequest.scroll(DEFAULT_SCROLL_TIMEOUT)__            searchRequest.source(new SearchSourceBuilder())__            searchRequest.source().size(DEFAULT_SCROLL_SIZE)__        }_    };constructor,for,actual,use,param,search,request,the,search,request,to,execute,to,get,the,documents,to,process,param,set,defaults,should,this,request,set,the,defaults,on,the,search,request,usually,set,to,true,but,leave,it,false,to,support,request,slicing;public,abstract,bulk,by,scroll,request,search,request,search,request,boolean,set,defaults,this,search,request,search,request,if,set,defaults,search,request,scroll,search,request,source,new,search,source,builder,search,request,source,size
AbstractBulkByScrollRequest -> public Self setRequestsPerSecond(float requestsPerSecond);1524684173;Set the throttle for this request in sub-requests per second. {@link Float#POSITIVE_INFINITY} means set no throttle and that is the_default. Throttling is done between batches, as we start the next scroll requests. That way we can increase the scroll's timeout to_make sure that it contains any time that we might wait.;public Self setRequestsPerSecond(float requestsPerSecond) {_        if (requestsPerSecond <= 0) {_            throw new IllegalArgumentException(_                    "[requests_per_second] must be greater than 0. Use Float.POSITIVE_INFINITY to disable throttling.")__        }_        this.requestsPerSecond = requestsPerSecond__        return self()__    };set,the,throttle,for,this,request,in,sub,requests,per,second,link,float,means,set,no,throttle,and,that,is,the,default,throttling,is,done,between,batches,as,we,start,the,next,scroll,requests,that,way,we,can,increase,the,scroll,s,timeout,to,make,sure,that,it,contains,any,time,that,we,might,wait;public,self,set,requests,per,second,float,requests,per,second,if,requests,per,second,0,throw,new,illegal,argument,exception,must,be,greater,than,0,use,float,to,disable,throttling,this,requests,per,second,requests,per,second,return,self
AbstractBulkByScrollRequest -> public Self setRequestsPerSecond(float requestsPerSecond);1535552903;Set the throttle for this request in sub-requests per second. {@link Float#POSITIVE_INFINITY} means set no throttle and that is the_default. Throttling is done between batches, as we start the next scroll requests. That way we can increase the scroll's timeout to_make sure that it contains any time that we might wait.;public Self setRequestsPerSecond(float requestsPerSecond) {_        if (requestsPerSecond <= 0) {_            throw new IllegalArgumentException(_                    "[requests_per_second] must be greater than 0. Use Float.POSITIVE_INFINITY to disable throttling.")__        }_        this.requestsPerSecond = requestsPerSecond__        return self()__    };set,the,throttle,for,this,request,in,sub,requests,per,second,link,float,means,set,no,throttle,and,that,is,the,default,throttling,is,done,between,batches,as,we,start,the,next,scroll,requests,that,way,we,can,increase,the,scroll,s,timeout,to,make,sure,that,it,contains,any,time,that,we,might,wait;public,self,set,requests,per,second,float,requests,per,second,if,requests,per,second,0,throw,new,illegal,argument,exception,must,be,greater,than,0,use,float,to,disable,throttling,this,requests,per,second,requests,per,second,return,self
AbstractBulkByScrollRequest -> public Self setRequestsPerSecond(float requestsPerSecond);1535965276;Set the throttle for this request in sub-requests per second. {@link Float#POSITIVE_INFINITY} means set no throttle and that is the_default. Throttling is done between batches, as we start the next scroll requests. That way we can increase the scroll's timeout to_make sure that it contains any time that we might wait.;public Self setRequestsPerSecond(float requestsPerSecond) {_        if (requestsPerSecond <= 0) {_            throw new IllegalArgumentException(_                    "[requests_per_second] must be greater than 0. Use Float.POSITIVE_INFINITY to disable throttling.")__        }_        this.requestsPerSecond = requestsPerSecond__        return self()__    };set,the,throttle,for,this,request,in,sub,requests,per,second,link,float,means,set,no,throttle,and,that,is,the,default,throttling,is,done,between,batches,as,we,start,the,next,scroll,requests,that,way,we,can,increase,the,scroll,s,timeout,to,make,sure,that,it,contains,any,time,that,we,might,wait;public,self,set,requests,per,second,float,requests,per,second,if,requests,per,second,0,throw,new,illegal,argument,exception,must,be,greater,than,0,use,float,to,disable,throttling,this,requests,per,second,requests,per,second,return,self
AbstractBulkByScrollRequest -> public Self setRequestsPerSecond(float requestsPerSecond);1539615817;Set the throttle for this request in sub-requests per second. {@link Float#POSITIVE_INFINITY} means set no throttle and that is the_default. Throttling is done between batches, as we start the next scroll requests. That way we can increase the scroll's timeout to_make sure that it contains any time that we might wait.;public Self setRequestsPerSecond(float requestsPerSecond) {_        if (requestsPerSecond <= 0) {_            throw new IllegalArgumentException(_                    "[requests_per_second] must be greater than 0. Use Float.POSITIVE_INFINITY to disable throttling.")__        }_        this.requestsPerSecond = requestsPerSecond__        return self()__    };set,the,throttle,for,this,request,in,sub,requests,per,second,link,float,means,set,no,throttle,and,that,is,the,default,throttling,is,done,between,batches,as,we,start,the,next,scroll,requests,that,way,we,can,increase,the,scroll,s,timeout,to,make,sure,that,it,contains,any,time,that,we,might,wait;public,self,set,requests,per,second,float,requests,per,second,if,requests,per,second,0,throw,new,illegal,argument,exception,must,be,greater,than,0,use,float,to,disable,throttling,this,requests,per,second,requests,per,second,return,self
AbstractBulkByScrollRequest -> public Self setRequestsPerSecond(float requestsPerSecond);1547716969;Set the throttle for this request in sub-requests per second. {@link Float#POSITIVE_INFINITY} means set no throttle and that is the_default. Throttling is done between batches, as we start the next scroll requests. That way we can increase the scroll's timeout to_make sure that it contains any time that we might wait.;public Self setRequestsPerSecond(float requestsPerSecond) {_        if (requestsPerSecond <= 0) {_            throw new IllegalArgumentException(_                    "[requests_per_second] must be greater than 0. Use Float.POSITIVE_INFINITY to disable throttling.")__        }_        this.requestsPerSecond = requestsPerSecond__        return self()__    };set,the,throttle,for,this,request,in,sub,requests,per,second,link,float,means,set,no,throttle,and,that,is,the,default,throttling,is,done,between,batches,as,we,start,the,next,scroll,requests,that,way,we,can,increase,the,scroll,s,timeout,to,make,sure,that,it,contains,any,time,that,we,might,wait;public,self,set,requests,per,second,float,requests,per,second,if,requests,per,second,0,throw,new,illegal,argument,exception,must,be,greater,than,0,use,float,to,disable,throttling,this,requests,per,second,requests,per,second,return,self
AbstractBulkByScrollRequest -> public SearchRequest getSearchRequest();1524684173;The search request that matches the documents to process.;public SearchRequest getSearchRequest() {_        return searchRequest__    };the,search,request,that,matches,the,documents,to,process;public,search,request,get,search,request,return,search,request
AbstractBulkByScrollRequest -> public SearchRequest getSearchRequest();1535552903;The search request that matches the documents to process.;public SearchRequest getSearchRequest() {_        return searchRequest__    };the,search,request,that,matches,the,documents,to,process;public,search,request,get,search,request,return,search,request
AbstractBulkByScrollRequest -> public SearchRequest getSearchRequest();1535965276;The search request that matches the documents to process.;public SearchRequest getSearchRequest() {_        return searchRequest__    };the,search,request,that,matches,the,documents,to,process;public,search,request,get,search,request,return,search,request
AbstractBulkByScrollRequest -> public SearchRequest getSearchRequest();1539615817;The search request that matches the documents to process.;public SearchRequest getSearchRequest() {_        return searchRequest__    };the,search,request,that,matches,the,documents,to,process;public,search,request,get,search,request,return,search,request
AbstractBulkByScrollRequest -> public SearchRequest getSearchRequest();1547716969;The search request that matches the documents to process.;public SearchRequest getSearchRequest() {_        return searchRequest__    };the,search,request,that,matches,the,documents,to,process;public,search,request,get,search,request,return,search,request
AbstractBulkByScrollRequest -> public TimeValue getTimeout();1524684173;Timeout to wait for the shards on to be available for each bulk request?;public TimeValue getTimeout() {_        return timeout__    };timeout,to,wait,for,the,shards,on,to,be,available,for,each,bulk,request;public,time,value,get,timeout,return,timeout
AbstractBulkByScrollRequest -> public TimeValue getTimeout();1535552903;Timeout to wait for the shards on to be available for each bulk request?;public TimeValue getTimeout() {_        return timeout__    };timeout,to,wait,for,the,shards,on,to,be,available,for,each,bulk,request;public,time,value,get,timeout,return,timeout
AbstractBulkByScrollRequest -> public TimeValue getTimeout();1535965276;Timeout to wait for the shards on to be available for each bulk request?;public TimeValue getTimeout() {_        return timeout__    };timeout,to,wait,for,the,shards,on,to,be,available,for,each,bulk,request;public,time,value,get,timeout,return,timeout
AbstractBulkByScrollRequest -> public TimeValue getTimeout();1539615817;Timeout to wait for the shards on to be available for each bulk request?;public TimeValue getTimeout() {_        return timeout__    };timeout,to,wait,for,the,shards,on,to,be,available,for,each,bulk,request;public,time,value,get,timeout,return,timeout
AbstractBulkByScrollRequest -> public TimeValue getTimeout();1547716969;Timeout to wait for the shards on to be available for each bulk request?;public TimeValue getTimeout() {_        return timeout__    };timeout,to,wait,for,the,shards,on,to,be,available,for,each,bulk,request;public,time,value,get,timeout,return,timeout
AbstractBulkByScrollRequest -> public void setConflicts(String conflicts);1524684173;Sets abortOnVersionConflict based on REST-friendly names.;public void setConflicts(String conflicts) {_        switch (conflicts) {_        case "proceed":_            setAbortOnVersionConflict(false)__            return__        case "abort":_            setAbortOnVersionConflict(true)__            return__        default:_            throw new IllegalArgumentException("conflicts may only be \"proceed\" or \"abort\" but was [" + conflicts + "]")__        }_    };sets,abort,on,version,conflict,based,on,rest,friendly,names;public,void,set,conflicts,string,conflicts,switch,conflicts,case,proceed,set,abort,on,version,conflict,false,return,case,abort,set,abort,on,version,conflict,true,return,default,throw,new,illegal,argument,exception,conflicts,may,only,be,proceed,or,abort,but,was,conflicts
AbstractBulkByScrollRequest -> public void setConflicts(String conflicts);1535552903;Sets abortOnVersionConflict based on REST-friendly names.;public void setConflicts(String conflicts) {_        switch (conflicts) {_        case "proceed":_            setAbortOnVersionConflict(false)__            return__        case "abort":_            setAbortOnVersionConflict(true)__            return__        default:_            throw new IllegalArgumentException("conflicts may only be \"proceed\" or \"abort\" but was [" + conflicts + "]")__        }_    };sets,abort,on,version,conflict,based,on,rest,friendly,names;public,void,set,conflicts,string,conflicts,switch,conflicts,case,proceed,set,abort,on,version,conflict,false,return,case,abort,set,abort,on,version,conflict,true,return,default,throw,new,illegal,argument,exception,conflicts,may,only,be,proceed,or,abort,but,was,conflicts
AbstractBulkByScrollRequest -> public void setConflicts(String conflicts);1535965276;Sets abortOnVersionConflict based on REST-friendly names.;public void setConflicts(String conflicts) {_        switch (conflicts) {_        case "proceed":_            setAbortOnVersionConflict(false)__            return__        case "abort":_            setAbortOnVersionConflict(true)__            return__        default:_            throw new IllegalArgumentException("conflicts may only be \"proceed\" or \"abort\" but was [" + conflicts + "]")__        }_    };sets,abort,on,version,conflict,based,on,rest,friendly,names;public,void,set,conflicts,string,conflicts,switch,conflicts,case,proceed,set,abort,on,version,conflict,false,return,case,abort,set,abort,on,version,conflict,true,return,default,throw,new,illegal,argument,exception,conflicts,may,only,be,proceed,or,abort,but,was,conflicts
AbstractBulkByScrollRequest -> public void setConflicts(String conflicts);1539615817;Sets abortOnVersionConflict based on REST-friendly names.;public void setConflicts(String conflicts) {_        switch (conflicts) {_        case "proceed":_            setAbortOnVersionConflict(false)__            return__        case "abort":_            setAbortOnVersionConflict(true)__            return__        default:_            throw new IllegalArgumentException("conflicts may only be \"proceed\" or \"abort\" but was [" + conflicts + "]")__        }_    };sets,abort,on,version,conflict,based,on,rest,friendly,names;public,void,set,conflicts,string,conflicts,switch,conflicts,case,proceed,set,abort,on,version,conflict,false,return,case,abort,set,abort,on,version,conflict,true,return,default,throw,new,illegal,argument,exception,conflicts,may,only,be,proceed,or,abort,but,was,conflicts
AbstractBulkByScrollRequest -> public void setConflicts(String conflicts);1547716969;Sets abortOnVersionConflict based on REST-friendly names.;public void setConflicts(String conflicts) {_        switch (conflicts) {_        case "proceed":_            setAbortOnVersionConflict(false)__            return__        case "abort":_            setAbortOnVersionConflict(true)__            return__        default:_            throw new IllegalArgumentException("conflicts may only be \"proceed\" or \"abort\" but was [" + conflicts + "]")__        }_    };sets,abort,on,version,conflict,based,on,rest,friendly,names;public,void,set,conflicts,string,conflicts,switch,conflicts,case,proceed,set,abort,on,version,conflict,false,return,case,abort,set,abort,on,version,conflict,true,return,default,throw,new,illegal,argument,exception,conflicts,may,only,be,proceed,or,abort,but,was,conflicts
AbstractBulkByScrollRequest -> public Self setRetryBackoffInitialTime(TimeValue retryBackoffInitialTime);1524684173;Set the initial delay after a rejection before retrying request.;public Self setRetryBackoffInitialTime(TimeValue retryBackoffInitialTime) {_        this.retryBackoffInitialTime = retryBackoffInitialTime__        return self()__    };set,the,initial,delay,after,a,rejection,before,retrying,request;public,self,set,retry,backoff,initial,time,time,value,retry,backoff,initial,time,this,retry,backoff,initial,time,retry,backoff,initial,time,return,self
AbstractBulkByScrollRequest -> public Self setRetryBackoffInitialTime(TimeValue retryBackoffInitialTime);1535552903;Set the initial delay after a rejection before retrying request.;public Self setRetryBackoffInitialTime(TimeValue retryBackoffInitialTime) {_        this.retryBackoffInitialTime = retryBackoffInitialTime__        return self()__    };set,the,initial,delay,after,a,rejection,before,retrying,request;public,self,set,retry,backoff,initial,time,time,value,retry,backoff,initial,time,this,retry,backoff,initial,time,retry,backoff,initial,time,return,self
AbstractBulkByScrollRequest -> public Self setRetryBackoffInitialTime(TimeValue retryBackoffInitialTime);1535965276;Set the initial delay after a rejection before retrying request.;public Self setRetryBackoffInitialTime(TimeValue retryBackoffInitialTime) {_        this.retryBackoffInitialTime = retryBackoffInitialTime__        return self()__    };set,the,initial,delay,after,a,rejection,before,retrying,request;public,self,set,retry,backoff,initial,time,time,value,retry,backoff,initial,time,this,retry,backoff,initial,time,retry,backoff,initial,time,return,self
AbstractBulkByScrollRequest -> public Self setRetryBackoffInitialTime(TimeValue retryBackoffInitialTime);1539615817;Set the initial delay after a rejection before retrying request.;public Self setRetryBackoffInitialTime(TimeValue retryBackoffInitialTime) {_        this.retryBackoffInitialTime = retryBackoffInitialTime__        return self()__    };set,the,initial,delay,after,a,rejection,before,retrying,request;public,self,set,retry,backoff,initial,time,time,value,retry,backoff,initial,time,this,retry,backoff,initial,time,retry,backoff,initial,time,return,self
AbstractBulkByScrollRequest -> public Self setRetryBackoffInitialTime(TimeValue retryBackoffInitialTime);1547716969;Set the initial delay after a rejection before retrying request.;public Self setRetryBackoffInitialTime(TimeValue retryBackoffInitialTime) {_        this.retryBackoffInitialTime = retryBackoffInitialTime__        return self()__    };set,the,initial,delay,after,a,rejection,before,retrying,request;public,self,set,retry,backoff,initial,time,time,value,retry,backoff,initial,time,this,retry,backoff,initial,time,retry,backoff,initial,time,return,self
AbstractBulkByScrollRequest -> public ActiveShardCount getWaitForActiveShards();1524684173;The number of shard copies that must be active before proceeding with the write.;public ActiveShardCount getWaitForActiveShards() {_        return activeShardCount__    };the,number,of,shard,copies,that,must,be,active,before,proceeding,with,the,write;public,active,shard,count,get,wait,for,active,shards,return,active,shard,count
AbstractBulkByScrollRequest -> public ActiveShardCount getWaitForActiveShards();1535552903;The number of shard copies that must be active before proceeding with the write.;public ActiveShardCount getWaitForActiveShards() {_        return activeShardCount__    };the,number,of,shard,copies,that,must,be,active,before,proceeding,with,the,write;public,active,shard,count,get,wait,for,active,shards,return,active,shard,count
AbstractBulkByScrollRequest -> public ActiveShardCount getWaitForActiveShards();1535965276;The number of shard copies that must be active before proceeding with the write.;public ActiveShardCount getWaitForActiveShards() {_        return activeShardCount__    };the,number,of,shard,copies,that,must,be,active,before,proceeding,with,the,write;public,active,shard,count,get,wait,for,active,shards,return,active,shard,count
AbstractBulkByScrollRequest -> public ActiveShardCount getWaitForActiveShards();1539615817;The number of shard copies that must be active before proceeding with the write.;public ActiveShardCount getWaitForActiveShards() {_        return activeShardCount__    };the,number,of,shard,copies,that,must,be,active,before,proceeding,with,the,write;public,active,shard,count,get,wait,for,active,shards,return,active,shard,count
AbstractBulkByScrollRequest -> public ActiveShardCount getWaitForActiveShards();1547716969;The number of shard copies that must be active before proceeding with the write.;public ActiveShardCount getWaitForActiveShards() {_        return activeShardCount__    };the,number,of,shard,copies,that,must,be,active,before,proceeding,with,the,write;public,active,shard,count,get,wait,for,active,shards,return,active,shard,count
AbstractBulkByScrollRequest -> public Self setRefresh(boolean refresh);1524684173;Call refresh on the indexes we've written to after the request ends?;public Self setRefresh(boolean refresh) {_        this.refresh = refresh__        return self()__    };call,refresh,on,the,indexes,we,ve,written,to,after,the,request,ends;public,self,set,refresh,boolean,refresh,this,refresh,refresh,return,self
AbstractBulkByScrollRequest -> public Self setRefresh(boolean refresh);1535552903;Call refresh on the indexes we've written to after the request ends?;public Self setRefresh(boolean refresh) {_        this.refresh = refresh__        return self()__    };call,refresh,on,the,indexes,we,ve,written,to,after,the,request,ends;public,self,set,refresh,boolean,refresh,this,refresh,refresh,return,self
AbstractBulkByScrollRequest -> public Self setRefresh(boolean refresh);1535965276;Call refresh on the indexes we've written to after the request ends?;public Self setRefresh(boolean refresh) {_        this.refresh = refresh__        return self()__    };call,refresh,on,the,indexes,we,ve,written,to,after,the,request,ends;public,self,set,refresh,boolean,refresh,this,refresh,refresh,return,self
AbstractBulkByScrollRequest -> public Self setRefresh(boolean refresh);1539615817;Call refresh on the indexes we've written to after the request ends?;public Self setRefresh(boolean refresh) {_        this.refresh = refresh__        return self()__    };call,refresh,on,the,indexes,we,ve,written,to,after,the,request,ends;public,self,set,refresh,boolean,refresh,this,refresh,refresh,return,self
AbstractBulkByScrollRequest -> public Self setRefresh(boolean refresh);1547716969;Call refresh on the indexes we've written to after the request ends?;public Self setRefresh(boolean refresh) {_        this.refresh = refresh__        return self()__    };call,refresh,on,the,indexes,we,ve,written,to,after,the,request,ends;public,self,set,refresh,boolean,refresh,this,refresh,refresh,return,self
AbstractBulkByScrollRequest -> public Self setWaitForActiveShards(ActiveShardCount activeShardCount);1524684173;Sets the number of shard copies that must be active before proceeding with the write._See {@link ReplicationRequest#waitForActiveShards(ActiveShardCount)} for details.;public Self setWaitForActiveShards(ActiveShardCount activeShardCount) {_        this.activeShardCount = activeShardCount__        return self()__    };sets,the,number,of,shard,copies,that,must,be,active,before,proceeding,with,the,write,see,link,replication,request,wait,for,active,shards,active,shard,count,for,details;public,self,set,wait,for,active,shards,active,shard,count,active,shard,count,this,active,shard,count,active,shard,count,return,self
AbstractBulkByScrollRequest -> public Self setWaitForActiveShards(ActiveShardCount activeShardCount);1535552903;Sets the number of shard copies that must be active before proceeding with the write._See {@link ReplicationRequest#waitForActiveShards(ActiveShardCount)} for details.;public Self setWaitForActiveShards(ActiveShardCount activeShardCount) {_        this.activeShardCount = activeShardCount__        return self()__    };sets,the,number,of,shard,copies,that,must,be,active,before,proceeding,with,the,write,see,link,replication,request,wait,for,active,shards,active,shard,count,for,details;public,self,set,wait,for,active,shards,active,shard,count,active,shard,count,this,active,shard,count,active,shard,count,return,self
AbstractBulkByScrollRequest -> public Self setWaitForActiveShards(ActiveShardCount activeShardCount);1535965276;Sets the number of shard copies that must be active before proceeding with the write._See {@link ReplicationRequest#waitForActiveShards(ActiveShardCount)} for details.;public Self setWaitForActiveShards(ActiveShardCount activeShardCount) {_        this.activeShardCount = activeShardCount__        return self()__    };sets,the,number,of,shard,copies,that,must,be,active,before,proceeding,with,the,write,see,link,replication,request,wait,for,active,shards,active,shard,count,for,details;public,self,set,wait,for,active,shards,active,shard,count,active,shard,count,this,active,shard,count,active,shard,count,return,self
AbstractBulkByScrollRequest -> public Self setWaitForActiveShards(ActiveShardCount activeShardCount);1539615817;Sets the number of shard copies that must be active before proceeding with the write._See {@link ReplicationRequest#waitForActiveShards(ActiveShardCount)} for details.;public Self setWaitForActiveShards(ActiveShardCount activeShardCount) {_        this.activeShardCount = activeShardCount__        return self()__    };sets,the,number,of,shard,copies,that,must,be,active,before,proceeding,with,the,write,see,link,replication,request,wait,for,active,shards,active,shard,count,for,details;public,self,set,wait,for,active,shards,active,shard,count,active,shard,count,this,active,shard,count,active,shard,count,return,self
AbstractBulkByScrollRequest -> public Self setWaitForActiveShards(ActiveShardCount activeShardCount);1547716969;Sets the number of shard copies that must be active before proceeding with the write._See {@link ReplicationRequest#waitForActiveShards(ActiveShardCount)} for details.;public Self setWaitForActiveShards(ActiveShardCount activeShardCount) {_        this.activeShardCount = activeShardCount__        return self()__    };sets,the,number,of,shard,copies,that,must,be,active,before,proceeding,with,the,write,see,link,replication,request,wait,for,active,shards,active,shard,count,for,details;public,self,set,wait,for,active,shards,active,shard,count,active,shard,count,this,active,shard,count,active,shard,count,return,self
AbstractBulkByScrollRequest -> public Self setTimeout(TimeValue timeout);1524684173;Timeout to wait for the shards on to be available for each bulk request?;public Self setTimeout(TimeValue timeout) {_        this.timeout = timeout__        return self()__    };timeout,to,wait,for,the,shards,on,to,be,available,for,each,bulk,request;public,self,set,timeout,time,value,timeout,this,timeout,timeout,return,self
AbstractBulkByScrollRequest -> public Self setTimeout(TimeValue timeout);1535552903;Timeout to wait for the shards on to be available for each bulk request?;public Self setTimeout(TimeValue timeout) {_        this.timeout = timeout__        return self()__    };timeout,to,wait,for,the,shards,on,to,be,available,for,each,bulk,request;public,self,set,timeout,time,value,timeout,this,timeout,timeout,return,self
AbstractBulkByScrollRequest -> public Self setTimeout(TimeValue timeout);1535965276;Timeout to wait for the shards on to be available for each bulk request?;public Self setTimeout(TimeValue timeout) {_        this.timeout = timeout__        return self()__    };timeout,to,wait,for,the,shards,on,to,be,available,for,each,bulk,request;public,self,set,timeout,time,value,timeout,this,timeout,timeout,return,self
AbstractBulkByScrollRequest -> public Self setTimeout(TimeValue timeout);1539615817;Timeout to wait for the shards on to be available for each bulk request?;public Self setTimeout(TimeValue timeout) {_        this.timeout = timeout__        return self()__    };timeout,to,wait,for,the,shards,on,to,be,available,for,each,bulk,request;public,self,set,timeout,time,value,timeout,this,timeout,timeout,return,self
AbstractBulkByScrollRequest -> public Self setTimeout(TimeValue timeout);1547716969;Timeout to wait for the shards on to be available for each bulk request?;public Self setTimeout(TimeValue timeout) {_        this.timeout = timeout__        return self()__    };timeout,to,wait,for,the,shards,on,to,be,available,for,each,bulk,request;public,self,set,timeout,time,value,timeout,this,timeout,timeout,return,self
AbstractBulkByScrollRequest -> protected Self doForSlice(Self request, TaskId slicingTask, int totalSlices);1524684173;Setup a clone of this request with the information needed to process a slice of it.;protected Self doForSlice(Self request, TaskId slicingTask, int totalSlices) {_        if (totalSlices < 1) {_            throw new IllegalArgumentException("Number of total slices must be at least 1 but was [" + totalSlices + "]")__        }__        request.setAbortOnVersionConflict(abortOnVersionConflict).setRefresh(refresh).setTimeout(timeout)_                .setWaitForActiveShards(activeShardCount).setRetryBackoffInitialTime(retryBackoffInitialTime).setMaxRetries(maxRetries)_                _                .setShouldStoreResult(false)_                _                .setRequestsPerSecond(requestsPerSecond / totalSlices)_                _                .setSlices(1)__        if (size != -1) {_            _            _            request.setSize(size == SIZE_ALL_MATCHES ? SIZE_ALL_MATCHES : size / totalSlices)__        }_        _        request.setParentTask(slicingTask)__        _        return request__    };setup,a,clone,of,this,request,with,the,information,needed,to,process,a,slice,of,it;protected,self,do,for,slice,self,request,task,id,slicing,task,int,total,slices,if,total,slices,1,throw,new,illegal,argument,exception,number,of,total,slices,must,be,at,least,1,but,was,total,slices,request,set,abort,on,version,conflict,abort,on,version,conflict,set,refresh,refresh,set,timeout,timeout,set,wait,for,active,shards,active,shard,count,set,retry,backoff,initial,time,retry,backoff,initial,time,set,max,retries,max,retries,set,should,store,result,false,set,requests,per,second,requests,per,second,total,slices,set,slices,1,if,size,1,request,set,size,size,size,total,slices,request,set,parent,task,slicing,task,return,request
AbstractBulkByScrollRequest -> protected Self doForSlice(Self request, TaskId slicingTask, int totalSlices);1535552903;Setup a clone of this request with the information needed to process a slice of it.;protected Self doForSlice(Self request, TaskId slicingTask, int totalSlices) {_        if (totalSlices < 1) {_            throw new IllegalArgumentException("Number of total slices must be at least 1 but was [" + totalSlices + "]")__        }__        request.setAbortOnVersionConflict(abortOnVersionConflict).setRefresh(refresh).setTimeout(timeout)_                .setWaitForActiveShards(activeShardCount).setRetryBackoffInitialTime(retryBackoffInitialTime).setMaxRetries(maxRetries)_                _                .setShouldStoreResult(false)_                _                .setRequestsPerSecond(requestsPerSecond / totalSlices)_                _                .setSlices(1)__        if (size != -1) {_            _            _            request.setSize(size == SIZE_ALL_MATCHES ? SIZE_ALL_MATCHES : size / totalSlices)__        }_        _        request.setParentTask(slicingTask)__        _        return request__    };setup,a,clone,of,this,request,with,the,information,needed,to,process,a,slice,of,it;protected,self,do,for,slice,self,request,task,id,slicing,task,int,total,slices,if,total,slices,1,throw,new,illegal,argument,exception,number,of,total,slices,must,be,at,least,1,but,was,total,slices,request,set,abort,on,version,conflict,abort,on,version,conflict,set,refresh,refresh,set,timeout,timeout,set,wait,for,active,shards,active,shard,count,set,retry,backoff,initial,time,retry,backoff,initial,time,set,max,retries,max,retries,set,should,store,result,false,set,requests,per,second,requests,per,second,total,slices,set,slices,1,if,size,1,request,set,size,size,size,total,slices,request,set,parent,task,slicing,task,return,request
AbstractBulkByScrollRequest -> protected Self doForSlice(Self request, TaskId slicingTask, int totalSlices);1535965276;Setup a clone of this request with the information needed to process a slice of it.;protected Self doForSlice(Self request, TaskId slicingTask, int totalSlices) {_        if (totalSlices < 1) {_            throw new IllegalArgumentException("Number of total slices must be at least 1 but was [" + totalSlices + "]")__        }__        request.setAbortOnVersionConflict(abortOnVersionConflict).setRefresh(refresh).setTimeout(timeout)_                .setWaitForActiveShards(activeShardCount).setRetryBackoffInitialTime(retryBackoffInitialTime).setMaxRetries(maxRetries)_                _                .setShouldStoreResult(false)_                _                .setRequestsPerSecond(requestsPerSecond / totalSlices)_                _                .setSlices(1)__        if (size != -1) {_            _            _            request.setSize(size == SIZE_ALL_MATCHES ? SIZE_ALL_MATCHES : size / totalSlices)__        }_        _        request.setParentTask(slicingTask)__        _        return request__    };setup,a,clone,of,this,request,with,the,information,needed,to,process,a,slice,of,it;protected,self,do,for,slice,self,request,task,id,slicing,task,int,total,slices,if,total,slices,1,throw,new,illegal,argument,exception,number,of,total,slices,must,be,at,least,1,but,was,total,slices,request,set,abort,on,version,conflict,abort,on,version,conflict,set,refresh,refresh,set,timeout,timeout,set,wait,for,active,shards,active,shard,count,set,retry,backoff,initial,time,retry,backoff,initial,time,set,max,retries,max,retries,set,should,store,result,false,set,requests,per,second,requests,per,second,total,slices,set,slices,1,if,size,1,request,set,size,size,size,total,slices,request,set,parent,task,slicing,task,return,request
AbstractBulkByScrollRequest -> protected Self doForSlice(Self request, TaskId slicingTask, int totalSlices);1539615817;Setup a clone of this request with the information needed to process a slice of it.;protected Self doForSlice(Self request, TaskId slicingTask, int totalSlices) {_        if (totalSlices < 1) {_            throw new IllegalArgumentException("Number of total slices must be at least 1 but was [" + totalSlices + "]")__        }__        request.setAbortOnVersionConflict(abortOnVersionConflict).setRefresh(refresh).setTimeout(timeout)_                .setWaitForActiveShards(activeShardCount).setRetryBackoffInitialTime(retryBackoffInitialTime).setMaxRetries(maxRetries)_                _                .setShouldStoreResult(false)_                _                .setRequestsPerSecond(requestsPerSecond / totalSlices)_                _                .setSlices(1)__        if (size != -1) {_            _            _            request.setSize(size == SIZE_ALL_MATCHES ? SIZE_ALL_MATCHES : size / totalSlices)__        }_        _        request.setParentTask(slicingTask)__        _        return request__    };setup,a,clone,of,this,request,with,the,information,needed,to,process,a,slice,of,it;protected,self,do,for,slice,self,request,task,id,slicing,task,int,total,slices,if,total,slices,1,throw,new,illegal,argument,exception,number,of,total,slices,must,be,at,least,1,but,was,total,slices,request,set,abort,on,version,conflict,abort,on,version,conflict,set,refresh,refresh,set,timeout,timeout,set,wait,for,active,shards,active,shard,count,set,retry,backoff,initial,time,retry,backoff,initial,time,set,max,retries,max,retries,set,should,store,result,false,set,requests,per,second,requests,per,second,total,slices,set,slices,1,if,size,1,request,set,size,size,size,total,slices,request,set,parent,task,slicing,task,return,request
AbstractBulkByScrollRequest -> protected Self doForSlice(Self request, TaskId slicingTask, int totalSlices);1547716969;Setup a clone of this request with the information needed to process a slice of it.;protected Self doForSlice(Self request, TaskId slicingTask, int totalSlices) {_        if (totalSlices < 1) {_            throw new IllegalArgumentException("Number of total slices must be at least 1 but was [" + totalSlices + "]")__        }__        request.setAbortOnVersionConflict(abortOnVersionConflict).setRefresh(refresh).setTimeout(timeout)_                .setWaitForActiveShards(activeShardCount).setRetryBackoffInitialTime(retryBackoffInitialTime).setMaxRetries(maxRetries)_                _                .setShouldStoreResult(false)_                _                .setRequestsPerSecond(requestsPerSecond / totalSlices)_                _                .setSlices(1)__        if (size != -1) {_            _            _            request.setSize(size == SIZE_ALL_MATCHES ? SIZE_ALL_MATCHES : size / totalSlices)__        }_        _        request.setParentTask(slicingTask)__        _        return request__    };setup,a,clone,of,this,request,with,the,information,needed,to,process,a,slice,of,it;protected,self,do,for,slice,self,request,task,id,slicing,task,int,total,slices,if,total,slices,1,throw,new,illegal,argument,exception,number,of,total,slices,must,be,at,least,1,but,was,total,slices,request,set,abort,on,version,conflict,abort,on,version,conflict,set,refresh,refresh,set,timeout,timeout,set,wait,for,active,shards,active,shard,count,set,retry,backoff,initial,time,retry,backoff,initial,time,set,max,retries,max,retries,set,should,store,result,false,set,requests,per,second,requests,per,second,total,slices,set,slices,1,if,size,1,request,set,size,size,size,total,slices,request,set,parent,task,slicing,task,return,request
AbstractBulkByScrollRequest -> public boolean isRefresh();1524684173;Call refresh on the indexes we've written to after the request ends?;public boolean isRefresh() {_        return refresh__    };call,refresh,on,the,indexes,we,ve,written,to,after,the,request,ends;public,boolean,is,refresh,return,refresh
AbstractBulkByScrollRequest -> public boolean isRefresh();1535552903;Call refresh on the indexes we've written to after the request ends?;public boolean isRefresh() {_        return refresh__    };call,refresh,on,the,indexes,we,ve,written,to,after,the,request,ends;public,boolean,is,refresh,return,refresh
AbstractBulkByScrollRequest -> public boolean isRefresh();1535965276;Call refresh on the indexes we've written to after the request ends?;public boolean isRefresh() {_        return refresh__    };call,refresh,on,the,indexes,we,ve,written,to,after,the,request,ends;public,boolean,is,refresh,return,refresh
AbstractBulkByScrollRequest -> public boolean isRefresh();1539615817;Call refresh on the indexes we've written to after the request ends?;public boolean isRefresh() {_        return refresh__    };call,refresh,on,the,indexes,we,ve,written,to,after,the,request,ends;public,boolean,is,refresh,return,refresh
AbstractBulkByScrollRequest -> public boolean isRefresh();1547716969;Call refresh on the indexes we've written to after the request ends?;public boolean isRefresh() {_        return refresh__    };call,refresh,on,the,indexes,we,ve,written,to,after,the,request,ends;public,boolean,is,refresh,return,refresh
AbstractBulkByScrollRequest -> public int getSlices();1524684173;The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.;public int getSlices() {_        return slices__    };the,number,of,slices,this,task,should,be,divided,into,defaults,to,1,meaning,the,task,isn,t,sliced,into,subtasks;public,int,get,slices,return,slices
AbstractBulkByScrollRequest -> public int getSlices();1535552903;The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.;public int getSlices() {_        return slices__    };the,number,of,slices,this,task,should,be,divided,into,defaults,to,1,meaning,the,task,isn,t,sliced,into,subtasks;public,int,get,slices,return,slices
AbstractBulkByScrollRequest -> public int getSlices();1535965276;The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.;public int getSlices() {_        return slices__    };the,number,of,slices,this,task,should,be,divided,into,defaults,to,1,meaning,the,task,isn,t,sliced,into,subtasks;public,int,get,slices,return,slices
AbstractBulkByScrollRequest -> public int getSlices();1539615817;The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.;public int getSlices() {_        return slices__    };the,number,of,slices,this,task,should,be,divided,into,defaults,to,1,meaning,the,task,isn,t,sliced,into,subtasks;public,int,get,slices,return,slices
AbstractBulkByScrollRequest -> public int getSlices();1547716969;The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.;public int getSlices() {_        return slices__    };the,number,of,slices,this,task,should,be,divided,into,defaults,to,1,meaning,the,task,isn,t,sliced,into,subtasks;public,int,get,slices,return,slices
AbstractBulkByScrollRequest -> public Self setMaxRetries(int maxRetries);1524684173;Set the total number of retries attempted for rejections. There is no way to ask for unlimited retries.;public Self setMaxRetries(int maxRetries) {_        this.maxRetries = maxRetries__        return self()__    };set,the,total,number,of,retries,attempted,for,rejections,there,is,no,way,to,ask,for,unlimited,retries;public,self,set,max,retries,int,max,retries,this,max,retries,max,retries,return,self
AbstractBulkByScrollRequest -> public Self setMaxRetries(int maxRetries);1535552903;Set the total number of retries attempted for rejections. There is no way to ask for unlimited retries.;public Self setMaxRetries(int maxRetries) {_        this.maxRetries = maxRetries__        return self()__    };set,the,total,number,of,retries,attempted,for,rejections,there,is,no,way,to,ask,for,unlimited,retries;public,self,set,max,retries,int,max,retries,this,max,retries,max,retries,return,self
AbstractBulkByScrollRequest -> public Self setMaxRetries(int maxRetries);1535965276;Set the total number of retries attempted for rejections. There is no way to ask for unlimited retries.;public Self setMaxRetries(int maxRetries) {_        this.maxRetries = maxRetries__        return self()__    };set,the,total,number,of,retries,attempted,for,rejections,there,is,no,way,to,ask,for,unlimited,retries;public,self,set,max,retries,int,max,retries,this,max,retries,max,retries,return,self
AbstractBulkByScrollRequest -> public Self setMaxRetries(int maxRetries);1539615817;Set the total number of retries attempted for rejections. There is no way to ask for unlimited retries.;public Self setMaxRetries(int maxRetries) {_        this.maxRetries = maxRetries__        return self()__    };set,the,total,number,of,retries,attempted,for,rejections,there,is,no,way,to,ask,for,unlimited,retries;public,self,set,max,retries,int,max,retries,this,max,retries,max,retries,return,self
AbstractBulkByScrollRequest -> public Self setMaxRetries(int maxRetries);1547716969;Set the total number of retries attempted for rejections. There is no way to ask for unlimited retries.;public Self setMaxRetries(int maxRetries) {_        this.maxRetries = maxRetries__        return self()__    };set,the,total,number,of,retries,attempted,for,rejections,there,is,no,way,to,ask,for,unlimited,retries;public,self,set,max,retries,int,max,retries,this,max,retries,max,retries,return,self
AbstractBulkByScrollRequest -> public Self setTimeout(String timeout);1535552903;Timeout to wait for the shards on to be available for each bulk request?;public Self setTimeout(String timeout) {_        this.timeout = TimeValue.parseTimeValue(timeout, this.timeout, getClass().getSimpleName() + ".timeout")__        return self()__    };timeout,to,wait,for,the,shards,on,to,be,available,for,each,bulk,request;public,self,set,timeout,string,timeout,this,timeout,time,value,parse,time,value,timeout,this,timeout,get,class,get,simple,name,timeout,return,self
AbstractBulkByScrollRequest -> public Self setTimeout(String timeout);1535965276;Timeout to wait for the shards on to be available for each bulk request?;public Self setTimeout(String timeout) {_        this.timeout = TimeValue.parseTimeValue(timeout, this.timeout, getClass().getSimpleName() + ".timeout")__        return self()__    };timeout,to,wait,for,the,shards,on,to,be,available,for,each,bulk,request;public,self,set,timeout,string,timeout,this,timeout,time,value,parse,time,value,timeout,this,timeout,get,class,get,simple,name,timeout,return,self
AbstractBulkByScrollRequest -> public Self setTimeout(String timeout);1539615817;Timeout to wait for the shards on to be available for each bulk request?;public Self setTimeout(String timeout) {_        this.timeout = TimeValue.parseTimeValue(timeout, this.timeout, getClass().getSimpleName() + ".timeout")__        return self()__    };timeout,to,wait,for,the,shards,on,to,be,available,for,each,bulk,request;public,self,set,timeout,string,timeout,this,timeout,time,value,parse,time,value,timeout,this,timeout,get,class,get,simple,name,timeout,return,self
AbstractBulkByScrollRequest -> public Self setTimeout(String timeout);1547716969;Timeout to wait for the shards on to be available for each bulk request?;public Self setTimeout(String timeout) {_        this.timeout = TimeValue.parseTimeValue(timeout, this.timeout, getClass().getSimpleName() + ".timeout")__        return self()__    };timeout,to,wait,for,the,shards,on,to,be,available,for,each,bulk,request;public,self,set,timeout,string,timeout,this,timeout,time,value,parse,time,value,timeout,this,timeout,get,class,get,simple,name,timeout,return,self
AbstractBulkByScrollRequest -> public Self setAbortOnVersionConflict(boolean abortOnVersionConflict);1524684173;Should version conflicts cause aborts? Defaults to false.;public Self setAbortOnVersionConflict(boolean abortOnVersionConflict) {_        this.abortOnVersionConflict = abortOnVersionConflict__        return self()__    };should,version,conflicts,cause,aborts,defaults,to,false;public,self,set,abort,on,version,conflict,boolean,abort,on,version,conflict,this,abort,on,version,conflict,abort,on,version,conflict,return,self
AbstractBulkByScrollRequest -> public Self setAbortOnVersionConflict(boolean abortOnVersionConflict);1535552903;Should version conflicts cause aborts? Defaults to false.;public Self setAbortOnVersionConflict(boolean abortOnVersionConflict) {_        this.abortOnVersionConflict = abortOnVersionConflict__        return self()__    };should,version,conflicts,cause,aborts,defaults,to,false;public,self,set,abort,on,version,conflict,boolean,abort,on,version,conflict,this,abort,on,version,conflict,abort,on,version,conflict,return,self
AbstractBulkByScrollRequest -> public Self setAbortOnVersionConflict(boolean abortOnVersionConflict);1535965276;Should version conflicts cause aborts? Defaults to false.;public Self setAbortOnVersionConflict(boolean abortOnVersionConflict) {_        this.abortOnVersionConflict = abortOnVersionConflict__        return self()__    };should,version,conflicts,cause,aborts,defaults,to,false;public,self,set,abort,on,version,conflict,boolean,abort,on,version,conflict,this,abort,on,version,conflict,abort,on,version,conflict,return,self
AbstractBulkByScrollRequest -> public Self setAbortOnVersionConflict(boolean abortOnVersionConflict);1539615817;Should version conflicts cause aborts? Defaults to false.;public Self setAbortOnVersionConflict(boolean abortOnVersionConflict) {_        this.abortOnVersionConflict = abortOnVersionConflict__        return self()__    };should,version,conflicts,cause,aborts,defaults,to,false;public,self,set,abort,on,version,conflict,boolean,abort,on,version,conflict,this,abort,on,version,conflict,abort,on,version,conflict,return,self
AbstractBulkByScrollRequest -> public Self setAbortOnVersionConflict(boolean abortOnVersionConflict);1547716969;Set whether or not version conflicts cause the action to abort.;public Self setAbortOnVersionConflict(boolean abortOnVersionConflict) {_        this.abortOnVersionConflict = abortOnVersionConflict__        return self()__    };set,whether,or,not,version,conflicts,cause,the,action,to,abort;public,self,set,abort,on,version,conflict,boolean,abort,on,version,conflict,this,abort,on,version,conflict,abort,on,version,conflict,return,self
