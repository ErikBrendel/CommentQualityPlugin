commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static Metrics resolve(String name) {     return Metrics.valueOf(name). }
false;protected,final;1;9;;@Override protected final void doWriteTo(StreamOutput out) throws IOException {     out.writeNamedWriteable(format).     out.writeVLong(count).     out.writeDouble(min).     out.writeDouble(max).     out.writeDouble(sum).     writeOtherStatsTo(out). }
false;protected;1;2;;protected void writeOtherStatsTo(StreamOutput out) throws IOException { }
false;public;0;4;;@Override public String getWriteableName() {     return StatsAggregationBuilder.NAME. }
false;public;0;4;;@Override public long getCount() {     return count. }
false;public;0;4;;@Override public double getMin() {     return min. }
false;public;0;4;;@Override public double getMax() {     return max. }
false;public;0;4;;@Override public double getAvg() {     return sum / count. }
false;public;0;4;;@Override public double getSum() {     return sum. }
false;public;0;4;;@Override public String getMinAsString() {     return valueAsString(Metrics.min.name()). }
false;public;0;4;;@Override public String getMaxAsString() {     return valueAsString(Metrics.max.name()). }
false;public;0;4;;@Override public String getAvgAsString() {     return valueAsString(Metrics.avg.name()). }
false;public;0;4;;@Override public String getSumAsString() {     return valueAsString(Metrics.sum.name()). }
false;public;1;13;;@Override public double value(String name) {     Metrics metrics = Metrics.valueOf(name).     switch(metrics) {         case min:             return this.min.         case max:             return this.max.         case avg:             return this.getAvg().         case count:             return this.count.         case sum:             return this.sum.         default:             throw new IllegalArgumentException("Unknown value [" + name + "] in common stats aggregation").     } }
false;public;2;26;;@Override public InternalStats doReduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) {     long count = 0.     double min = Double.POSITIVE_INFINITY.     double max = Double.NEGATIVE_INFINITY.     double sum = 0.     double compensation = 0.     for (InternalAggregation aggregation : aggregations) {         InternalStats stats = (InternalStats) aggregation.         count += stats.getCount().         min = Math.min(min, stats.getMin()).         max = Math.max(max, stats.getMax()).         // Compute the sum of double values with Kahan summation algorithm which is more         // accurate than naive summation.         double value = stats.getSum().         if (Double.isFinite(value) == false) {             sum += value.         } else if (Double.isFinite(sum)) {             double corrected = value - compensation.             double newSum = sum + corrected.             compensation = (newSum - sum) - corrected.             sum = newSum.         }     }     return new InternalStats(name, count, sum, min, max, format, pipelineAggregators(), getMetaData()). }
false;public;2;23;;@Override public XContentBuilder doXContentBody(XContentBuilder builder, Params params) throws IOException {     builder.field(Fields.COUNT, count).     if (count != 0) {         builder.field(Fields.MIN, min).         builder.field(Fields.MAX, max).         builder.field(Fields.AVG, getAvg()).         builder.field(Fields.SUM, sum).         if (format != DocValueFormat.RAW) {             builder.field(Fields.MIN_AS_STRING, format.format(min)).             builder.field(Fields.MAX_AS_STRING, format.format(max)).             builder.field(Fields.AVG_AS_STRING, format.format(getAvg())).             builder.field(Fields.SUM_AS_STRING, format.format(sum)).         }     } else {         builder.nullField(Fields.MIN).         builder.nullField(Fields.MAX).         builder.nullField(Fields.AVG).         builder.field(Fields.SUM, 0.0d).     }     otherStatsToXContent(builder, params).     return builder. }
false;protected;2;3;;protected XContentBuilder otherStatsToXContent(XContentBuilder builder, Params params) throws IOException {     return builder. }
false;protected;0;4;;@Override protected int doHashCode() {     return Objects.hash(count, min, max, sum). }
false;protected;1;8;;@Override protected boolean doEquals(Object obj) {     InternalStats other = (InternalStats) obj.     return count == other.count && Double.compare(min, other.min) == 0 && Double.compare(max, other.max) == 0 && Double.compare(sum, other.sum) == 0. }
