commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Injects dependencies into the fields and methods of {@code instance}. Ignores the presence or  * absence of an injectable constructor.  * <p>  * Whenever Guice creates an instance, it performs this injection automatically (after first  * performing constructor injection), so if you're able to let Guice create all your objects for  * you, you'll never need to use this method.  *  * @param instance to inject members on  * @see Binder#getMembersInjector(Class) for a preferred alternative that supports checks before  *      run time  */ ;/**  * Injects dependencies into the fields and methods of {@code instance}. Ignores the presence or  * absence of an injectable constructor.  * <p>  * Whenever Guice creates an instance, it performs this injection automatically (after first  * performing constructor injection), so if you're able to let Guice create all your objects for  * you, you'll never need to use this method.  *  * @param instance to inject members on  * @see Binder#getMembersInjector(Class) for a preferred alternative that supports checks before  *      run time  */ void injectMembers(Object instance).
true;;1;1;/**  * Returns the members injector used to inject dependencies into methods and fields on instances  * of the given type {@code T}.  *  * @param typeLiteral type to get members injector for  * @see Binder#getMembersInjector(TypeLiteral) for an alternative that offers up front error  *      detection  * @since 2.0  */ ;/**  * Returns the members injector used to inject dependencies into methods and fields on instances  * of the given type {@code T}.  *  * @param typeLiteral type to get members injector for  * @see Binder#getMembersInjector(TypeLiteral) for an alternative that offers up front error  *      detection  * @since 2.0  */ <T> MembersInjector<T> getMembersInjector(TypeLiteral<T> typeLiteral).
true;;1;1;/**  * Returns the members injector used to inject dependencies into methods and fields on instances  * of the given type {@code T}. When feasible, use {@link Binder#getMembersInjector(TypeLiteral)}  * instead to get increased up front error detection.  *  * @param type type to get members injector for  * @see Binder#getMembersInjector(Class) for an alternative that offers up front error  *      detection  * @since 2.0  */ ;/**  * Returns the members injector used to inject dependencies into methods and fields on instances  * of the given type {@code T}. When feasible, use {@link Binder#getMembersInjector(TypeLiteral)}  * instead to get increased up front error detection.  *  * @param type type to get members injector for  * @see Binder#getMembersInjector(Class) for an alternative that offers up front error  *      detection  * @since 2.0  */ <T> MembersInjector<T> getMembersInjector(Class<T> type).
true;;1;1;/**  * Returns all explicit bindings for {@code type}.  * <p>  * This method is part of the Guice SPI and is intended for use by tools and extensions.  */ ;/**  * Returns all explicit bindings for {@code type}.  * <p>  * This method is part of the Guice SPI and is intended for use by tools and extensions.  */ <T> List<Binding<T>> findBindingsByType(TypeLiteral<T> type).
true;;1;1;/**  * Returns the provider used to obtain instances for the given injection key. When feasible, avoid  * using this method, in favor of having Guice inject your dependencies ahead of time.  *  * @throws ConfigurationException if this injector cannot find or create the provider.  * @see Binder#getProvider(Key) for an alternative that offers up front error detection  */ ;/**  * Returns the provider used to obtain instances for the given injection key. When feasible, avoid  * using this method, in favor of having Guice inject your dependencies ahead of time.  *  * @throws ConfigurationException if this injector cannot find or create the provider.  * @see Binder#getProvider(Key) for an alternative that offers up front error detection  */ <T> Provider<T> getProvider(Key<T> key).
true;;1;1;/**  * Returns the provider used to obtain instances for the given type. When feasible, avoid  * using this method, in favor of having Guice inject your dependencies ahead of time.  *  * @throws ConfigurationException if this injector cannot find or create the provider.  * @see Binder#getProvider(Class) for an alternative that offers up front error detection  */ ;/**  * Returns the provider used to obtain instances for the given type. When feasible, avoid  * using this method, in favor of having Guice inject your dependencies ahead of time.  *  * @throws ConfigurationException if this injector cannot find or create the provider.  * @see Binder#getProvider(Class) for an alternative that offers up front error detection  */ <T> Provider<T> getProvider(Class<T> type).
true;;1;1;/**  * Returns the appropriate instance for the given injection key. equivalent to {@code  * getProvider(key).get()}. When feasible, avoid using this method, in favor of having Guice  * inject your dependencies ahead of time.  *  * @throws ConfigurationException if this injector cannot find or create the provider.  * @throws ProvisionException     if there was a runtime failure while providing an instance.  */ ;/**  * Returns the appropriate instance for the given injection key. equivalent to {@code  * getProvider(key).get()}. When feasible, avoid using this method, in favor of having Guice  * inject your dependencies ahead of time.  *  * @throws ConfigurationException if this injector cannot find or create the provider.  * @throws ProvisionException     if there was a runtime failure while providing an instance.  */ <T> T getInstance(Key<T> key).
true;;1;1;/**  * Returns the appropriate instance for the given injection type. equivalent to {@code  * getProvider(type).get()}. When feasible, avoid using this method, in favor of having Guice  * inject your dependencies ahead of time.  *  * @throws ConfigurationException if this injector cannot find or create the provider.  * @throws ProvisionException     if there was a runtime failure while providing an instance.  */ ;/**  * Returns the appropriate instance for the given injection type. equivalent to {@code  * getProvider(type).get()}. When feasible, avoid using this method, in favor of having Guice  * inject your dependencies ahead of time.  *  * @throws ConfigurationException if this injector cannot find or create the provider.  * @throws ProvisionException     if there was a runtime failure while providing an instance.  */ <T> T getInstance(Class<T> type).
