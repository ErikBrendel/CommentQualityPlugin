commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public ScoreMode scoreMode() {     // TODO: how can we know if the script relies on scores?     return ScoreMode.COMPLETE. }
false;public;1;4;;@Override public void setScorer(Scorable scorer) throws IOException {     leafMapScript.setScorer(scorer). }
false;public;2;7;;@Override public void collect(int doc, long bucket) throws IOException {     assert bucket == 0 : bucket.     leafMapScript.setDocument(doc).     leafMapScript.execute(). }
false;public;2;19;;@Override public LeafBucketCollector getLeafCollector(LeafReaderContext ctx, final LeafBucketCollector sub) throws IOException {     final ScriptedMetricAggContexts.MapScript leafMapScript = mapScript.newInstance(ctx).     return new LeafBucketCollectorBase(sub, leafMapScript) {          @Override         public void setScorer(Scorable scorer) throws IOException {             leafMapScript.setScorer(scorer).         }          @Override         public void collect(int doc, long bucket) throws IOException {             assert bucket == 0 : bucket.             leafMapScript.setDocument(doc).             leafMapScript.execute().         }     }. }
false;public;1;12;;@Override public InternalAggregation buildAggregation(long owningBucketOrdinal) {     Object aggregation.     if (combineScript != null) {         aggregation = combineScript.execute().         CollectionUtils.ensureNoSelfReferences(aggregation, "Scripted metric aggs combine script").     } else {         aggregation = aggState.     }     return new InternalScriptedMetric(name, aggregation, reduceScript, pipelineAggregators(), metaData()). }
false;public;0;4;;@Override public InternalAggregation buildEmptyAggregation() {     return new InternalScriptedMetric(name, null, reduceScript, pipelineAggregators(), metaData()). }
false;protected;0;6;;@Override protected void doPostCollection() throws IOException {     CollectionUtils.ensureNoSelfReferences(aggState, "Scripted metric aggs map script").     super.doPostCollection(). }
