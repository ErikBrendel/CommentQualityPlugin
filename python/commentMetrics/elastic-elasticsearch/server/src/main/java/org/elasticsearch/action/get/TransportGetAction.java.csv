commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected boolean resolveIndex(GetRequest request) {     return true. }
false;protected;2;6;;@Override protected ShardIterator shards(ClusterState state, InternalRequest request) {     return clusterService.operationRouting().getShards(clusterService.state(), request.concreteIndex(), request.request().id(), request.request().routing(), request.request().preference()). }
false;protected;2;9;;@Override protected void resolveRequest(ClusterState state, InternalRequest request) {     // update the routing (request#index here is possibly an alias)     request.request().routing(state.metaData().resolveIndexRouting(request.request().routing(), request.request().index())).     // Fail fast on the node that received the request.     if (request.request().routing() == null && state.getMetaData().routingRequired(request.concreteIndex())) {         throw new RoutingMissingException(request.concreteIndex(), request.request().type(), request.request().id()).     } }
false;protected;3;16;;@Override protected void asyncShardOperation(GetRequest request, ShardId shardId, ActionListener<GetResponse> listener) throws IOException {     IndexService indexService = indicesService.indexServiceSafe(shardId.getIndex()).     IndexShard indexShard = indexService.getShard(shardId.id()).     if (request.realtime()) {         // we are not tied to a refresh cycle here anyway         super.asyncShardOperation(request, shardId, listener).     } else {         indexShard.awaitShardSearchActive(b -> {             try {                 super.asyncShardOperation(request, shardId, listener).             } catch (Exception ex) {                 listener.onFailure(ex).             }         }).     } }
false;protected;2;13;;@Override protected GetResponse shardOperation(GetRequest request, ShardId shardId) {     IndexService indexService = indicesService.indexServiceSafe(shardId.getIndex()).     IndexShard indexShard = indexService.getShard(shardId.id()).     if (request.refresh() && !request.realtime()) {         indexShard.refresh("refresh_flag_get").     }     GetResult result = indexShard.getService().get(request.type(), request.id(), request.storedFields(), request.realtime(), request.version(), request.versionType(), request.fetchSourceContext()).     return new GetResponse(result). }
false;protected;0;4;;@Override protected GetResponse newResponse() {     return new GetResponse(). }
false;protected;2;6;;@Override protected String getExecutor(GetRequest request, ShardId shardId) {     IndexService indexService = indicesService.indexServiceSafe(shardId.getIndex()).     return indexService.getIndexSettings().isSearchThrottled() ? ThreadPool.Names.SEARCH_THROTTLED : super.getExecutor(request, shardId). }
