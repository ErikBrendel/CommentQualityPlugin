commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * @return the number of additional elements that the queue can accommodate before evictions occur  */ ;/**  * @return the number of additional elements that the queue can accommodate before evictions occur  */ public int remainingCapacity() {     return this.maximumSize - this.size(). }
true;public;1;11;/**  * Add the given element to the queue, possibly forcing an eviction from the head if {@link #remainingCapacity()} is  * zero.  *  * @param t the element to add  * @return true if the element was added (always the case for {@code EvictingQueue}  */ ;/**  * Add the given element to the queue, possibly forcing an eviction from the head if {@link #remainingCapacity()} is  * zero.  *  * @param t the element to add  * @return true if the element was added (always the case for {@code EvictingQueue}  */ @Override public boolean add(T t) {     if (maximumSize == 0) {         return true.     }     if (queue.size() == maximumSize) {         queue.remove().     }     queue.add(t).     return true. }
true;public;1;4;/**  * @see #add(Object)  */ ;/**  * @see #add(Object)  */ @Override public boolean offer(T t) {     return add(t). }
false;public;0;4;;@Override public T remove() {     return queue.remove(). }
false;public;0;4;;@Override public T poll() {     return queue.poll(). }
false;public;0;4;;@Override public T element() {     return queue.element(). }
false;public;0;4;;@Override public T peek() {     return queue.peek(). }
false;public;0;4;;@Override public int size() {     return queue.size(). }
false;public;0;4;;@Override public boolean isEmpty() {     return queue.isEmpty(). }
false;public;1;4;;@Override public boolean contains(Object o) {     return queue.contains(o). }
false;public;0;4;;@Override public Iterator<T> iterator() {     return queue.iterator(). }
false;public;0;4;;@Override public Object[] toArray() {     return queue.toArray(). }
false;public;1;4;;@Override public <T1> T1[] toArray(T1[] a) {     return queue.toArray(a). }
false;public;1;4;;@Override public boolean remove(Object o) {     return queue.remove(o). }
false;public;1;4;;@Override public boolean containsAll(Collection<?> c) {     return queue.containsAll(c). }
true;public;1;8;/**  * Add the given elements to the queue, possibly forcing evictions from the head if {@link #remainingCapacity()} is  * zero or becomes zero during the execution of this method.  *  * @param c the collection of elements to add  * @return true if any elements were added to the queue  */ ;/**  * Add the given elements to the queue, possibly forcing evictions from the head if {@link #remainingCapacity()} is  * zero or becomes zero during the execution of this method.  *  * @param c the collection of elements to add  * @return true if any elements were added to the queue  */ @Override public boolean addAll(Collection<? extends T> c) {     boolean modified = false.     for (T e : c) if (add(e))         modified = true.     return modified. }
false;public;1;4;;@Override public boolean removeAll(Collection<?> c) {     return queue.removeAll(c). }
false;public;1;4;;@Override public boolean retainAll(Collection<?> c) {     return queue.retainAll(c). }
false;public;0;4;;@Override public void clear() {     queue.clear(). }
