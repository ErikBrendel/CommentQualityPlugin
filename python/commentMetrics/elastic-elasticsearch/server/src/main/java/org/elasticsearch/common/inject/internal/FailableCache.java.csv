commented;modifiers;parameterAmount;loc;comment;code
false;protected,abstract;2;1;;protected abstract V create(K key, Errors errors) throws ErrorsException.
false;public;2;18;;public V get(K key, Errors errors) throws ErrorsException {     Object resultOrError = cache.get(key).     if (resultOrError == null) {         synchronized (this) {             resultOrError = load(key).             // we can't use cache.computeIfAbsent since this might be recursively call this API             cache.putIfAbsent(key, resultOrError).         }     }     if (resultOrError instanceof Errors) {         errors.merge((Errors) resultOrError).         throw errors.toException().     } else {         // create returned a non-error result, so this is safe         @SuppressWarnings("unchecked")         V result = (V) resultOrError.         return result.     } }
false;private;1;10;;private Object load(K key) {     Errors errors = new Errors().     V result = null.     try {         result = create(key, errors).     } catch (ErrorsException e) {         errors.merge(e.getErrors()).     }     return errors.hasErrors() ? errors : result. }
