commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Override public ActionRequestValidationException validate() {     ActionRequestValidationException validationException = null.     if (transientSettings.isEmpty() && persistentSettings.isEmpty()) {         validationException = addValidationError("no settings to update", validationException).     }     return validationException. }
false;public;0;3;;public Settings transientSettings() {     return transientSettings. }
false;public;0;3;;public Settings persistentSettings() {     return persistentSettings. }
true;public;1;4;/**  * Sets the transient settings to be updated. They will not survive a full cluster restart  */ ;/**  * Sets the transient settings to be updated. They will not survive a full cluster restart  */ public ClusterUpdateSettingsRequest transientSettings(Settings settings) {     this.transientSettings = settings.     return this. }
true;public;1;4;/**  * Sets the transient settings to be updated. They will not survive a full cluster restart  */ ;/**  * Sets the transient settings to be updated. They will not survive a full cluster restart  */ public ClusterUpdateSettingsRequest transientSettings(Settings.Builder settings) {     this.transientSettings = settings.build().     return this. }
true;public;2;4;/**  * Sets the source containing the transient settings to be updated. They will not survive a full cluster restart  */ ;/**  * Sets the source containing the transient settings to be updated. They will not survive a full cluster restart  */ public ClusterUpdateSettingsRequest transientSettings(String source, XContentType xContentType) {     this.transientSettings = Settings.builder().loadFromSource(source, xContentType).build().     return this. }
true;public;1;10;/**  * Sets the transient settings to be updated. They will not survive a full cluster restart  */ ;/**  * Sets the transient settings to be updated. They will not survive a full cluster restart  */ public ClusterUpdateSettingsRequest transientSettings(Map<String, ?> source) {     try {         XContentBuilder builder = XContentFactory.contentBuilder(XContentType.JSON).         builder.map(source).         transientSettings(Strings.toString(builder), builder.contentType()).     } catch (IOException e) {         throw new ElasticsearchGenerationException("Failed to generate [" + source + "]", e).     }     return this. }
true;public;1;4;/**  * Sets the persistent settings to be updated. They will get applied cross restarts  */ ;/**  * Sets the persistent settings to be updated. They will get applied cross restarts  */ public ClusterUpdateSettingsRequest persistentSettings(Settings settings) {     this.persistentSettings = settings.     return this. }
true;public;1;4;/**  * Sets the persistent settings to be updated. They will get applied cross restarts  */ ;/**  * Sets the persistent settings to be updated. They will get applied cross restarts  */ public ClusterUpdateSettingsRequest persistentSettings(Settings.Builder settings) {     this.persistentSettings = settings.build().     return this. }
true;public;2;4;/**  * Sets the source containing the persistent settings to be updated. They will get applied cross restarts  */ ;/**  * Sets the source containing the persistent settings to be updated. They will get applied cross restarts  */ public ClusterUpdateSettingsRequest persistentSettings(String source, XContentType xContentType) {     this.persistentSettings = Settings.builder().loadFromSource(source, xContentType).build().     return this. }
true;public;1;10;/**  * Sets the persistent settings to be updated. They will get applied cross restarts  */ ;/**  * Sets the persistent settings to be updated. They will get applied cross restarts  */ public ClusterUpdateSettingsRequest persistentSettings(Map<String, ?> source) {     try {         XContentBuilder builder = XContentFactory.contentBuilder(XContentType.JSON).         builder.map(source).         persistentSettings(Strings.toString(builder), builder.contentType()).     } catch (IOException e) {         throw new ElasticsearchGenerationException("Failed to generate [" + source + "]", e).     }     return this. }
false;public;1;6;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     transientSettings = readSettingsFromStream(in).     persistentSettings = readSettingsFromStream(in). }
false;public;1;6;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     writeSettingsToStream(transientSettings, out).     writeSettingsToStream(persistentSettings, out). }
false;public;2;12;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.startObject(PERSISTENT.getPreferredName()).     persistentSettings.toXContent(builder, params).     builder.endObject().     builder.startObject(TRANSIENT.getPreferredName()).     transientSettings.toXContent(builder, params).     builder.endObject().     builder.endObject().     return builder. }
false;public,static;1;3;;public static ClusterUpdateSettingsRequest fromXContent(XContentParser parser) throws IOException {     return PARSER.apply(parser, null). }
