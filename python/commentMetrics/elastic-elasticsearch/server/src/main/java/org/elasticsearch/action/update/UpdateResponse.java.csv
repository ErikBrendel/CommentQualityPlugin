commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void setGetResult(GetResult getResult) {     this.getResult = getResult. }
false;public;0;3;;public GetResult getGetResult() {     return this.getResult. }
false;public;0;4;;@Override public RestStatus status() {     return this.result == Result.CREATED ? RestStatus.CREATED : super.status(). }
false;public;1;7;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     if (in.readBoolean()) {         getResult = GetResult.readGetResult(in).     } }
false;public;1;10;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     if (getResult == null) {         out.writeBoolean(false).     } else {         out.writeBoolean(true).         getResult.writeTo(out).     } }
false;public;2;10;;@Override public XContentBuilder innerToXContent(XContentBuilder builder, Params params) throws IOException {     super.innerToXContent(builder, params).     if (getGetResult() != null) {         builder.startObject(GET).         getGetResult().toXContentEmbedded(builder, params).         builder.endObject().     }     return builder. }
false;public;0;14;;@Override public String toString() {     StringBuilder builder = new StringBuilder().     builder.append("UpdateResponse[").     builder.append("index=").append(getIndex()).     builder.append(",type=").append(getType()).     builder.append(",id=").append(getId()).     builder.append(",version=").append(getVersion()).     builder.append(",seqNo=").append(getSeqNo()).     builder.append(",primaryTerm=").append(getPrimaryTerm()).     builder.append(",result=").append(getResult().getLowercase()).     builder.append(",shards=").append(getShardInfo()).     return builder.append("]").toString(). }
false;public,static;1;9;;public static UpdateResponse fromXContent(XContentParser parser) throws IOException {     ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation).     Builder context = new Builder().     while (parser.nextToken() != XContentParser.Token.END_OBJECT) {         parseXContentFields(parser, context).     }     return context.build(). }
true;public,static;2;12;/**  * Parse the current token and update the parsing context appropriately.  */ ;/**  * Parse the current token and update the parsing context appropriately.  */ public static void parseXContentFields(XContentParser parser, Builder context) throws IOException {     XContentParser.Token token = parser.currentToken().     String currentFieldName = parser.currentName().     if (GET.equals(currentFieldName)) {         if (token == XContentParser.Token.START_OBJECT) {             context.setGetResult(GetResult.fromXContentEmbedded(parser)).         }     } else {         DocWriteResponse.parseInnerToXContent(parser, context).     } }
false;public;1;3;;public void setGetResult(GetResult getResult) {     this.getResult = getResult. }
false;public;0;16;;@Override public UpdateResponse build() {     UpdateResponse update.     if (shardInfo != null && seqNo != null) {         update = new UpdateResponse(shardInfo, shardId, type, id, seqNo, primaryTerm, version, result).     } else {         update = new UpdateResponse(shardId, type, id, version, result).     }     if (getResult != null) {         update.setGetResult(new GetResult(update.getIndex(), update.getType(), update.getId(), getResult.getSeqNo(), getResult.getPrimaryTerm(), update.getVersion(), getResult.isExists(), getResult.internalSourceRef(), getResult.getFields())).     }     update.setForcedRefresh(forcedRefresh).     return update. }
