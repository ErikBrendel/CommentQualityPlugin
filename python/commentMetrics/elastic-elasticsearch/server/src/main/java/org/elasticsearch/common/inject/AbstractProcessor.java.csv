commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;public void process(Iterable<InjectorShell> isolatedInjectorBuilders) {     for (InjectorShell injectorShell : isolatedInjectorBuilders) {         process(injectorShell.getInjector(), injectorShell.getElements()).     } }
false;public;2;17;;public void process(InjectorImpl injector, List<Element> elements) {     Errors errorsAnyElement = this.errors.     this.injector = injector.     try {         for (Iterator<Element> i = elements.iterator(). i.hasNext(). ) {             Element element = i.next().             this.errors = errorsAnyElement.withSource(element.getSource()).             Boolean allDone = element.acceptVisitor(this).             if (allDone) {                 i.remove().             }         }     } finally {         this.errors = errorsAnyElement.         this.injector = null.     } }
false;public;1;4;;@Override public Boolean visit(Message message) {     return false. }
false;public;1;4;;@Override public Boolean visit(ScopeBinding scopeBinding) {     return false. }
false;public;1;4;;@Override public Boolean visit(InjectionRequest<?> injectionRequest) {     return false. }
false;public;1;4;;@Override public Boolean visit(StaticInjectionRequest staticInjectionRequest) {     return false. }
false;public;1;4;;@Override public Boolean visit(TypeConverterBinding typeConverterBinding) {     return false. }
false;public;1;4;;@Override public <T> Boolean visit(Binding<T> binding) {     return false. }
false;public;1;4;;@Override public <T> Boolean visit(ProviderLookup<T> providerLookup) {     return false. }
false;public;1;4;;@Override public Boolean visit(PrivateElements privateElements) {     return false. }
false;public;1;4;;@Override public <T> Boolean visit(MembersInjectorLookup<T> lookup) {     return false. }
false;public;1;4;;@Override public Boolean visit(TypeListenerBinding binding) {     return false. }
