commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;@Override public BooleanFieldMapper build(BuilderContext context) {     setupFieldType(context).     return new BooleanFieldMapper(name, fieldType, defaultFieldType, context.indexSettings(), multiFieldsBuilder.build(this, context), copyTo). }
false;public;3;19;;@Override public BooleanFieldMapper.Builder parse(String name, Map<String, Object> node, ParserContext parserContext) throws MapperParsingException {     BooleanFieldMapper.Builder builder = new BooleanFieldMapper.Builder(name).     parseField(builder, name, node, parserContext).     for (Iterator<Map.Entry<String, Object>> iterator = node.entrySet().iterator(). iterator.hasNext(). ) {         Map.Entry<String, Object> entry = iterator.next().         String propName = entry.getKey().         Object propNode = entry.getValue().         if (propName.equals("null_value")) {             if (propNode == null) {                 throw new MapperParsingException("Property [null_value] cannot be null.").             }             builder.nullValue(XContentMapValues.nodeBooleanValue(propNode, name + ".null_value")).             iterator.remove().         }     }     return builder. }
false;public;0;4;;@Override public MappedFieldType clone() {     return new BooleanFieldType(this). }
false;public;0;4;;@Override public String typeName() {     return CONTENT_TYPE. }
false;public;1;8;;@Override public Query existsQuery(QueryShardContext context) {     if (hasDocValues()) {         return new DocValuesFieldExistsQuery(name()).     } else {         return new TermQuery(new Term(FieldNamesFieldMapper.NAME, name())).     } }
false;public;0;4;;@Override public Boolean nullValue() {     return (Boolean) super.nullValue(). }
false;public;1;24;;@Override public BytesRef indexedValueForSearch(Object value) {     if (value == null) {         return Values.FALSE.     }     if (value instanceof Boolean) {         return ((Boolean) value) ? Values.TRUE : Values.FALSE.     }     String sValue.     if (value instanceof BytesRef) {         sValue = ((BytesRef) value).utf8ToString().     } else {         sValue = value.toString().     }     switch(sValue) {         case "true":             return Values.TRUE.         case "false":             return Values.FALSE.         default:             throw new IllegalArgumentException("Can't parse boolean value [" + sValue + "], expected [true] or [false]").     } }
false;public;1;14;;@Override public Boolean valueForDisplay(Object value) {     if (value == null) {         return null.     }     switch(value.toString()) {         case "F":             return false.         case "T":             return true.         default:             throw new IllegalArgumentException("Expected [T] or [F] but got [" + value + "]").     } }
false;public;1;5;;@Override public IndexFieldData.Builder fielddataBuilder(String fullyQualifiedIndexName) {     failIfNoDocValues().     return new DocValuesIndexFieldData.Builder().numericType(NumericType.BOOLEAN). }
false;public;2;11;;@Override public DocValueFormat docValueFormat(@Nullable String format, ZoneId timeZone) {     if (format != null) {         throw new IllegalArgumentException("Field [" + name() + "] of type [" + typeName() + "] does not support custom formats").     }     if (timeZone != null) {         throw new IllegalArgumentException("Field [" + name() + "] of type [" + typeName() + "] does not support custom time zones").     }     return DocValueFormat.BOOLEAN. }
false;public;5;8;;@Override public Query rangeQuery(Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper, QueryShardContext context) {     failIfNotIndexed().     return new TermRangeQuery(name(), lowerTerm == null ? null : indexedValueForSearch(lowerTerm), upperTerm == null ? null : indexedValueForSearch(upperTerm), includeLower, includeUpper). }
false;public;0;4;;@Override public BooleanFieldType fieldType() {     return (BooleanFieldType) super.fieldType(). }
false;protected;2;30;;@Override protected void parseCreateField(ParseContext context, List<IndexableField> fields) throws IOException {     if (fieldType().indexOptions() == IndexOptions.NONE && !fieldType().stored() && !fieldType().hasDocValues()) {         return.     }     Boolean value = context.parseExternalValue(Boolean.class).     if (value == null) {         XContentParser.Token token = context.parser().currentToken().         if (token == XContentParser.Token.VALUE_NULL) {             if (fieldType().nullValue() != null) {                 value = fieldType().nullValue().             }         } else {             value = context.parser().booleanValue().         }     }     if (value == null) {         return.     }     if (fieldType().indexOptions() != IndexOptions.NONE || fieldType().stored()) {         fields.add(new Field(fieldType().name(), value ? "T" : "F", fieldType())).     }     if (fieldType().hasDocValues()) {         fields.add(new SortedNumericDocValuesField(fieldType().name(), value ? 1 : 0)).     } else {         createFieldNamesField(context, fields).     } }
false;protected;0;4;;@Override protected String contentType() {     return CONTENT_TYPE. }
false;protected;3;7;;@Override protected void doXContentBody(XContentBuilder builder, boolean includeDefaults, Params params) throws IOException {     super.doXContentBody(builder, includeDefaults, params).     if (includeDefaults || fieldType().nullValue() != null) {         builder.field("null_value", fieldType().nullValue()).     } }
