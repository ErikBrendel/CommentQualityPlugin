commented;modifiers;parameterAmount;loc;comment;code
false;public;1;23;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     ShardStateMetaData that = (ShardStateMetaData) o.     if (primary != that.primary) {         return false.     }     if (indexUUID != null ? !indexUUID.equals(that.indexUUID) : that.indexUUID != null) {         return false.     }     if (allocationId != null ? !allocationId.equals(that.allocationId) : that.allocationId != null) {         return false.     }     return true. }
false;public;0;7;;@Override public int hashCode() {     int result = (indexUUID != null ? indexUUID.hashCode() : 0).     result = 31 * result + (allocationId != null ? allocationId.hashCode() : 0).     result = 31 * result + (primary ? 1 : 0).     return result. }
false;public;0;4;;@Override public String toString() {     return "primary [" + primary + "], allocation [" + allocationId + "]". }
false;protected;2;6;;@Override protected XContentBuilder newXContentBuilder(XContentType type, OutputStream stream) throws IOException {     XContentBuilder xContentBuilder = super.newXContentBuilder(type, stream).     xContentBuilder.prettyPrint().     return xContentBuilder. }
false;public;2;8;;@Override public void toXContent(XContentBuilder builder, ShardStateMetaData shardStateMetaData) throws IOException {     builder.field(PRIMARY_KEY, shardStateMetaData.primary).     builder.field(INDEX_UUID_KEY, shardStateMetaData.indexUUID).     if (shardStateMetaData.allocationId != null) {         builder.field(ALLOCATION_ID_KEY, shardStateMetaData.allocationId).     } }
false;public;1;38;;@Override public ShardStateMetaData fromXContent(XContentParser parser) throws IOException {     XContentParser.Token token = parser.nextToken().     if (token == null) {         return null.     }     Boolean primary = null.     String currentFieldName = null.     String indexUUID = IndexMetaData.INDEX_UUID_NA_VALUE.     AllocationId allocationId = null.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             currentFieldName = parser.currentName().         } else if (token.isValue()) {             if (PRIMARY_KEY.equals(currentFieldName)) {                 primary = parser.booleanValue().             } else if (INDEX_UUID_KEY.equals(currentFieldName)) {                 indexUUID = parser.text().             } else if (VERSION_KEY.equals(currentFieldName)) {             // ES versions before 6.0 wrote this for legacy reasons, just ignore for now and remove in 7.0             } else {                 throw new CorruptStateException("unexpected field in shard state [" + currentFieldName + "]").             }         } else if (token == XContentParser.Token.START_OBJECT) {             if (ALLOCATION_ID_KEY.equals(currentFieldName)) {                 allocationId = AllocationId.fromXContent(parser).             } else {                 throw new CorruptStateException("unexpected object in shard state [" + currentFieldName + "]").             }         } else {             throw new CorruptStateException("unexpected token in shard state [" + token.name() + "]").         }     }     if (primary == null) {         throw new CorruptStateException("missing value for [primary] in shard state").     }     return new ShardStateMetaData(primary, indexUUID, allocationId). }
