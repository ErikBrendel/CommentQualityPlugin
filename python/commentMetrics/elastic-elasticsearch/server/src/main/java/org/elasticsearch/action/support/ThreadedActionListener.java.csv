commented;modifiers;parameterAmount;loc;comment;code
false;public;1;14;;public <Response> ActionListener<Response> wrap(ActionListener<Response> listener) {     if (threadedListener == false) {         return listener.     }     // if its a future, the callback is very lightweight (flipping a bit) so no need to wrap it     if (listener instanceof Future) {         return listener.     }     // already threaded...     if (listener instanceof ThreadedActionListener) {         return listener.     }     return new ThreadedActionListener<>(logger, threadPool, ThreadPool.Names.LISTENER, listener, false). }
false;public;0;4;;@Override public boolean isForceExecution() {     return forceExecution. }
false;protected;0;4;;@Override protected void doRun() throws Exception {     listener.onResponse(response). }
false;public;1;4;;@Override public void onFailure(Exception e) {     listener.onFailure(e). }
false;public;1;19;;@Override public void onResponse(final Response response) {     threadPool.executor(executor).execute(new AbstractRunnable() {          @Override         public boolean isForceExecution() {             return forceExecution.         }          @Override         protected void doRun() throws Exception {             listener.onResponse(response).         }          @Override         public void onFailure(Exception e) {             listener.onFailure(e).         }     }). }
false;public;0;4;;@Override public boolean isForceExecution() {     return forceExecution. }
false;protected;0;4;;@Override protected void doRun() throws Exception {     listener.onFailure(e). }
false;public;1;4;;@Override public void onFailure(Exception e) {     logger.warn(() -> new ParameterizedMessage("failed to execute failure callback on [{}]", listener), e). }
false;public;1;19;;@Override public void onFailure(final Exception e) {     threadPool.executor(executor).execute(new AbstractRunnable() {          @Override         public boolean isForceExecution() {             return forceExecution.         }          @Override         protected void doRun() throws Exception {             listener.onFailure(e).         }          @Override         public void onFailure(Exception e) {             logger.warn(() -> new ParameterizedMessage("failed to execute failure callback on [{}]", listener), e).         }     }). }
