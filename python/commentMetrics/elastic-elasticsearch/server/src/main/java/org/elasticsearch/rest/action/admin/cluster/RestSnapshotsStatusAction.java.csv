commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "snapshot_status_action". }
false;public;2;13;;@Override public RestChannelConsumer prepareRequest(final RestRequest request, final NodeClient client) throws IOException {     String repository = request.param("repository", "_all").     String[] snapshots = request.paramAsStringArray("snapshot", Strings.EMPTY_ARRAY).     if (snapshots.length == 1 && "_all".equalsIgnoreCase(snapshots[0])) {         snapshots = Strings.EMPTY_ARRAY.     }     SnapshotsStatusRequest snapshotsStatusRequest = snapshotsStatusRequest(repository).snapshots(snapshots).     snapshotsStatusRequest.ignoreUnavailable(request.paramAsBoolean("ignore_unavailable", snapshotsStatusRequest.ignoreUnavailable())).     snapshotsStatusRequest.masterNodeTimeout(request.paramAsTime("master_timeout", snapshotsStatusRequest.masterNodeTimeout())).     return channel -> client.admin().cluster().snapshotsStatus(snapshotsStatusRequest, new RestToXContentListener<>(channel)). }
