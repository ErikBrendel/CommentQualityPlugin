commented;modifiers;parameterAmount;loc;comment;code
false;protected,final;1;9;;@Override protected final void writeTermTypeInfoTo(StreamOutput out) throws IOException {     out.writeZLong(docCountError).     out.writeNamedWriteable(format).     writeSize(shardSize, out).     out.writeBoolean(showTermDocCountError).     out.writeVLong(otherDocCount).     out.writeList(buckets). }
false;protected;1;4;;@Override protected void setDocCountError(long docCountError) {     this.docCountError = docCountError. }
false;protected;0;4;;@Override protected int getShardSize() {     return shardSize. }
false;public;0;4;;@Override public long getDocCountError() {     return docCountError. }
false;public;0;4;;@Override public long getSumOfOtherDocCounts() {     return otherDocCount. }
false;public;0;4;;@Override public List<B> getBuckets() {     return buckets. }
false;public;1;7;;@Override public B getBucketByKey(String term) {     if (bucketMap == null) {         bucketMap = buckets.stream().collect(Collectors.toMap(Bucket::getKeyAsString, Function.identity())).     }     return bucketMap.get(term). }
false;protected;1;11;;@Override protected boolean doEquals(Object obj) {     InternalMappedTerms<?, ?> that = (InternalMappedTerms<?, ?>) obj.     return super.doEquals(obj) && Objects.equals(buckets, that.buckets) && Objects.equals(format, that.format) && Objects.equals(otherDocCount, that.otherDocCount) && Objects.equals(showTermDocCountError, that.showTermDocCountError) && Objects.equals(shardSize, that.shardSize) && Objects.equals(docCountError, that.docCountError). }
false;protected;0;4;;@Override protected int doHashCode() {     return Objects.hash(super.doHashCode(), buckets, format, otherDocCount, showTermDocCountError, shardSize). }
false;public,final;2;4;;@Override public final XContentBuilder doXContentBody(XContentBuilder builder, Params params) throws IOException {     return doXContentCommon(builder, params, docCountError, otherDocCount, buckets). }
