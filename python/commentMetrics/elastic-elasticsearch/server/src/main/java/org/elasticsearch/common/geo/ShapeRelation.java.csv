commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static ShapeRelation readFromStream(StreamInput in) throws IOException {     return in.readEnum(ShapeRelation.class). }
false;public;1;4;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeEnum(this). }
false;public,static;1;9;;public static ShapeRelation getRelationByName(String name) {     name = name.toLowerCase(Locale.ENGLISH).     for (ShapeRelation relation : ShapeRelation.values()) {         if (relation.relationName.equals(name)) {             return relation.         }     }     return null. }
true;public;0;9;/**  * Maps ShapeRelation to Lucene's LatLonShapeRelation  */ ;/**  * Maps ShapeRelation to Lucene's LatLonShapeRelation  */ public QueryRelation getLuceneRelation() {     switch(this) {         case INTERSECTS:             return QueryRelation.INTERSECTS.         case DISJOINT:             return QueryRelation.DISJOINT.         case WITHIN:             return QueryRelation.WITHIN.         default:             throw new IllegalArgumentException("ShapeRelation [" + this + "] not supported").     } }
false;public;0;3;;public String getRelationName() {     return relationName. }
