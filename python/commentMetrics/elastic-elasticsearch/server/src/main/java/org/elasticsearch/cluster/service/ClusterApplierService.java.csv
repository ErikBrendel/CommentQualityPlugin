# id;timestamp;commentText;codeText;commentWords;codeWords
ClusterApplierService -> public void addLowPriorityApplier(ClusterStateApplier applier);1524684173;Adds an applier which will be called after all high priority and normal appliers have been called.;public void addLowPriorityApplier(ClusterStateApplier applier) {_        lowPriorityStateAppliers.add(applier)__    };adds,an,applier,which,will,be,called,after,all,high,priority,and,normal,appliers,have,been,called;public,void,add,low,priority,applier,cluster,state,applier,applier,low,priority,state,appliers,add,applier
ClusterApplierService -> public void addLowPriorityApplier(ClusterStateApplier applier);1527152864;Adds an applier which will be called after all high priority and normal appliers have been called.;public void addLowPriorityApplier(ClusterStateApplier applier) {_        lowPriorityStateAppliers.add(applier)__    };adds,an,applier,which,will,be,called,after,all,high,priority,and,normal,appliers,have,been,called;public,void,add,low,priority,applier,cluster,state,applier,applier,low,priority,state,appliers,add,applier
ClusterApplierService -> public void addLowPriorityApplier(ClusterStateApplier applier);1533230566;Adds an applier which will be called after all high priority and normal appliers have been called.;public void addLowPriorityApplier(ClusterStateApplier applier) {_        lowPriorityStateAppliers.add(applier)__    };adds,an,applier,which,will,be,called,after,all,high,priority,and,normal,appliers,have,been,called;public,void,add,low,priority,applier,cluster,state,applier,applier,low,priority,state,appliers,add,applier
ClusterApplierService -> public void addLowPriorityApplier(ClusterStateApplier applier);1536177418;Adds an applier which will be called after all high priority and normal appliers have been called.;public void addLowPriorityApplier(ClusterStateApplier applier) {_        lowPriorityStateAppliers.add(applier)__    };adds,an,applier,which,will,be,called,after,all,high,priority,and,normal,appliers,have,been,called;public,void,add,low,priority,applier,cluster,state,applier,applier,low,priority,state,appliers,add,applier
ClusterApplierService -> public void addLowPriorityApplier(ClusterStateApplier applier);1540847035;Adds an applier which will be called after all high priority and normal appliers have been called.;public void addLowPriorityApplier(ClusterStateApplier applier) {_        lowPriorityStateAppliers.add(applier)__    };adds,an,applier,which,will,be,called,after,all,high,priority,and,normal,appliers,have,been,called;public,void,add,low,priority,applier,cluster,state,applier,applier,low,priority,state,appliers,add,applier
ClusterApplierService -> public void addLowPriorityApplier(ClusterStateApplier applier);1541008027;Adds an applier which will be called after all high priority and normal appliers have been called.;public void addLowPriorityApplier(ClusterStateApplier applier) {_        lowPriorityStateAppliers.add(applier)__    };adds,an,applier,which,will,be,called,after,all,high,priority,and,normal,appliers,have,been,called;public,void,add,low,priority,applier,cluster,state,applier,applier,low,priority,state,appliers,add,applier
ClusterApplierService -> public void addLowPriorityApplier(ClusterStateApplier applier);1542646292;Adds an applier which will be called after all high priority and normal appliers have been called.;public void addLowPriorityApplier(ClusterStateApplier applier) {_        lowPriorityStateAppliers.add(applier)__    };adds,an,applier,which,will,be,called,after,all,high,priority,and,normal,appliers,have,been,called;public,void,add,low,priority,applier,cluster,state,applier,applier,low,priority,state,appliers,add,applier
ClusterApplierService -> public void addLowPriorityApplier(ClusterStateApplier applier);1545319912;Adds an applier which will be called after all high priority and normal appliers have been called.;public void addLowPriorityApplier(ClusterStateApplier applier) {_        lowPriorityStateAppliers.add(applier)__    };adds,an,applier,which,will,be,called,after,all,high,priority,and,normal,appliers,have,been,called;public,void,add,low,priority,applier,cluster,state,applier,applier,low,priority,state,appliers,add,applier
ClusterApplierService -> public void addLowPriorityApplier(ClusterStateApplier applier);1547049229;Adds an applier which will be called after all high priority and normal appliers have been called.;public void addLowPriorityApplier(ClusterStateApplier applier) {_        lowPriorityStateAppliers.add(applier)__    };adds,an,applier,which,will,be,called,after,all,high,priority,and,normal,appliers,have,been,called;public,void,add,low,priority,applier,cluster,state,applier,applier,low,priority,state,appliers,add,applier
ClusterApplierService -> public void addLowPriorityApplier(ClusterStateApplier applier);1547625930;Adds an applier which will be called after all high priority and normal appliers have been called.;public void addLowPriorityApplier(ClusterStateApplier applier) {_        lowPriorityStateAppliers.add(applier)__    };adds,an,applier,which,will,be,called,after,all,high,priority,and,normal,appliers,have,been,called;public,void,add,low,priority,applier,cluster,state,applier,applier,low,priority,state,appliers,add,applier
ClusterApplierService -> public void addLowPriorityApplier(ClusterStateApplier applier);1548335343;Adds an applier which will be called after all high priority and normal appliers have been called.;public void addLowPriorityApplier(ClusterStateApplier applier) {_        lowPriorityStateAppliers.add(applier)__    };adds,an,applier,which,will,be,called,after,all,high,priority,and,normal,appliers,have,been,called;public,void,add,low,priority,applier,cluster,state,applier,applier,low,priority,state,appliers,add,applier
ClusterApplierService -> public void addLowPriorityApplier(ClusterStateApplier applier);1548953505;Adds an applier which will be called after all high priority and normal appliers have been called.;public void addLowPriorityApplier(ClusterStateApplier applier) {_        lowPriorityStateAppliers.add(applier)__    };adds,an,applier,which,will,be,called,after,all,high,priority,and,normal,appliers,have,been,called;public,void,add,low,priority,applier,cluster,state,applier,applier,low,priority,state,appliers,add,applier
ClusterApplierService -> public void addLowPriorityApplier(ClusterStateApplier applier);1549302240;Adds an applier which will be called after all high priority and normal appliers have been called.;public void addLowPriorityApplier(ClusterStateApplier applier) {_        lowPriorityStateAppliers.add(applier)__    };adds,an,applier,which,will,be,called,after,all,high,priority,and,normal,appliers,have,been,called;public,void,add,low,priority,applier,cluster,state,applier,applier,low,priority,state,appliers,add,applier
ClusterApplierService -> public void addStateApplier(ClusterStateApplier applier);1524684173;Adds a applier of updated cluster states.;public void addStateApplier(ClusterStateApplier applier) {_        normalPriorityStateAppliers.add(applier)__    };adds,a,applier,of,updated,cluster,states;public,void,add,state,applier,cluster,state,applier,applier,normal,priority,state,appliers,add,applier
ClusterApplierService -> public void addStateApplier(ClusterStateApplier applier);1527152864;Adds a applier of updated cluster states.;public void addStateApplier(ClusterStateApplier applier) {_        normalPriorityStateAppliers.add(applier)__    };adds,a,applier,of,updated,cluster,states;public,void,add,state,applier,cluster,state,applier,applier,normal,priority,state,appliers,add,applier
ClusterApplierService -> public void addStateApplier(ClusterStateApplier applier);1533230566;Adds a applier of updated cluster states.;public void addStateApplier(ClusterStateApplier applier) {_        normalPriorityStateAppliers.add(applier)__    };adds,a,applier,of,updated,cluster,states;public,void,add,state,applier,cluster,state,applier,applier,normal,priority,state,appliers,add,applier
ClusterApplierService -> public void addStateApplier(ClusterStateApplier applier);1536177418;Adds a applier of updated cluster states.;public void addStateApplier(ClusterStateApplier applier) {_        normalPriorityStateAppliers.add(applier)__    };adds,a,applier,of,updated,cluster,states;public,void,add,state,applier,cluster,state,applier,applier,normal,priority,state,appliers,add,applier
ClusterApplierService -> public void addStateApplier(ClusterStateApplier applier);1540847035;Adds a applier of updated cluster states.;public void addStateApplier(ClusterStateApplier applier) {_        normalPriorityStateAppliers.add(applier)__    };adds,a,applier,of,updated,cluster,states;public,void,add,state,applier,cluster,state,applier,applier,normal,priority,state,appliers,add,applier
ClusterApplierService -> public void addStateApplier(ClusterStateApplier applier);1541008027;Adds a applier of updated cluster states.;public void addStateApplier(ClusterStateApplier applier) {_        normalPriorityStateAppliers.add(applier)__    };adds,a,applier,of,updated,cluster,states;public,void,add,state,applier,cluster,state,applier,applier,normal,priority,state,appliers,add,applier
ClusterApplierService -> public void addStateApplier(ClusterStateApplier applier);1542646292;Adds a applier of updated cluster states.;public void addStateApplier(ClusterStateApplier applier) {_        normalPriorityStateAppliers.add(applier)__    };adds,a,applier,of,updated,cluster,states;public,void,add,state,applier,cluster,state,applier,applier,normal,priority,state,appliers,add,applier
ClusterApplierService -> public void addStateApplier(ClusterStateApplier applier);1545319912;Adds a applier of updated cluster states.;public void addStateApplier(ClusterStateApplier applier) {_        normalPriorityStateAppliers.add(applier)__    };adds,a,applier,of,updated,cluster,states;public,void,add,state,applier,cluster,state,applier,applier,normal,priority,state,appliers,add,applier
ClusterApplierService -> public void addStateApplier(ClusterStateApplier applier);1547049229;Adds a applier of updated cluster states.;public void addStateApplier(ClusterStateApplier applier) {_        normalPriorityStateAppliers.add(applier)__    };adds,a,applier,of,updated,cluster,states;public,void,add,state,applier,cluster,state,applier,applier,normal,priority,state,appliers,add,applier
ClusterApplierService -> public void addStateApplier(ClusterStateApplier applier);1547625930;Adds a applier of updated cluster states.;public void addStateApplier(ClusterStateApplier applier) {_        normalPriorityStateAppliers.add(applier)__    };adds,a,applier,of,updated,cluster,states;public,void,add,state,applier,cluster,state,applier,applier,normal,priority,state,appliers,add,applier
ClusterApplierService -> public void addStateApplier(ClusterStateApplier applier);1548335343;Adds a applier of updated cluster states.;public void addStateApplier(ClusterStateApplier applier) {_        normalPriorityStateAppliers.add(applier)__    };adds,a,applier,of,updated,cluster,states;public,void,add,state,applier,cluster,state,applier,applier,normal,priority,state,appliers,add,applier
ClusterApplierService -> public void addStateApplier(ClusterStateApplier applier);1548953505;Adds a applier of updated cluster states.;public void addStateApplier(ClusterStateApplier applier) {_        normalPriorityStateAppliers.add(applier)__    };adds,a,applier,of,updated,cluster,states;public,void,add,state,applier,cluster,state,applier,applier,normal,priority,state,appliers,add,applier
ClusterApplierService -> public void addStateApplier(ClusterStateApplier applier);1549302240;Adds a applier of updated cluster states.;public void addStateApplier(ClusterStateApplier applier) {_        normalPriorityStateAppliers.add(applier)__    };adds,a,applier,of,updated,cluster,states;public,void,add,state,applier,cluster,state,applier,applier,normal,priority,state,appliers,add,applier
ClusterApplierService -> public void addLocalNodeMasterListener(LocalNodeMasterListener listener);1524684173;Add a listener for on/off local node master events;public void addLocalNodeMasterListener(LocalNodeMasterListener listener) {_        localNodeMasterListeners.add(listener)__    };add,a,listener,for,on,off,local,node,master,events;public,void,add,local,node,master,listener,local,node,master,listener,listener,local,node,master,listeners,add,listener
ClusterApplierService -> public void addLocalNodeMasterListener(LocalNodeMasterListener listener);1527152864;Add a listener for on/off local node master events;public void addLocalNodeMasterListener(LocalNodeMasterListener listener) {_        localNodeMasterListeners.add(listener)__    };add,a,listener,for,on,off,local,node,master,events;public,void,add,local,node,master,listener,local,node,master,listener,listener,local,node,master,listeners,add,listener
ClusterApplierService -> public void addLocalNodeMasterListener(LocalNodeMasterListener listener);1533230566;Add a listener for on/off local node master events;public void addLocalNodeMasterListener(LocalNodeMasterListener listener) {_        localNodeMasterListeners.add(listener)__    };add,a,listener,for,on,off,local,node,master,events;public,void,add,local,node,master,listener,local,node,master,listener,listener,local,node,master,listeners,add,listener
ClusterApplierService -> public void addLocalNodeMasterListener(LocalNodeMasterListener listener);1536177418;Add a listener for on/off local node master events;public void addLocalNodeMasterListener(LocalNodeMasterListener listener) {_        localNodeMasterListeners.add(listener)__    };add,a,listener,for,on,off,local,node,master,events;public,void,add,local,node,master,listener,local,node,master,listener,listener,local,node,master,listeners,add,listener
ClusterApplierService -> public void addLocalNodeMasterListener(LocalNodeMasterListener listener);1540847035;Add a listener for on/off local node master events;public void addLocalNodeMasterListener(LocalNodeMasterListener listener) {_        localNodeMasterListeners.add(listener)__    };add,a,listener,for,on,off,local,node,master,events;public,void,add,local,node,master,listener,local,node,master,listener,listener,local,node,master,listeners,add,listener
ClusterApplierService -> public void addLocalNodeMasterListener(LocalNodeMasterListener listener);1541008027;Add a listener for on/off local node master events;public void addLocalNodeMasterListener(LocalNodeMasterListener listener) {_        localNodeMasterListeners.add(listener)__    };add,a,listener,for,on,off,local,node,master,events;public,void,add,local,node,master,listener,local,node,master,listener,listener,local,node,master,listeners,add,listener
ClusterApplierService -> public void addLocalNodeMasterListener(LocalNodeMasterListener listener);1542646292;Add a listener for on/off local node master events;public void addLocalNodeMasterListener(LocalNodeMasterListener listener) {_        localNodeMasterListeners.add(listener)__    };add,a,listener,for,on,off,local,node,master,events;public,void,add,local,node,master,listener,local,node,master,listener,listener,local,node,master,listeners,add,listener
ClusterApplierService -> public void addLocalNodeMasterListener(LocalNodeMasterListener listener);1545319912;Add a listener for on/off local node master events;public void addLocalNodeMasterListener(LocalNodeMasterListener listener) {_        localNodeMasterListeners.add(listener)__    };add,a,listener,for,on,off,local,node,master,events;public,void,add,local,node,master,listener,local,node,master,listener,listener,local,node,master,listeners,add,listener
ClusterApplierService -> public void addLocalNodeMasterListener(LocalNodeMasterListener listener);1547049229;Add a listener for on/off local node master events;public void addLocalNodeMasterListener(LocalNodeMasterListener listener) {_        localNodeMasterListeners.add(listener)__    };add,a,listener,for,on,off,local,node,master,events;public,void,add,local,node,master,listener,local,node,master,listener,listener,local,node,master,listeners,add,listener
ClusterApplierService -> public void addLocalNodeMasterListener(LocalNodeMasterListener listener);1547625930;Add a listener for on/off local node master events;public void addLocalNodeMasterListener(LocalNodeMasterListener listener) {_        localNodeMasterListeners.add(listener)__    };add,a,listener,for,on,off,local,node,master,events;public,void,add,local,node,master,listener,local,node,master,listener,listener,local,node,master,listeners,add,listener
ClusterApplierService -> public void addLocalNodeMasterListener(LocalNodeMasterListener listener);1548335343;Add a listener for on/off local node master events;public void addLocalNodeMasterListener(LocalNodeMasterListener listener) {_        localNodeMasterListeners.add(listener)__    };add,a,listener,for,on,off,local,node,master,events;public,void,add,local,node,master,listener,local,node,master,listener,listener,local,node,master,listeners,add,listener
ClusterApplierService -> public void addLocalNodeMasterListener(LocalNodeMasterListener listener);1548953505;Add a listener for on/off local node master events;public void addLocalNodeMasterListener(LocalNodeMasterListener listener) {_        localNodeMasterListeners.add(listener)__    };add,a,listener,for,on,off,local,node,master,events;public,void,add,local,node,master,listener,local,node,master,listener,listener,local,node,master,listeners,add,listener
ClusterApplierService -> public void addLocalNodeMasterListener(LocalNodeMasterListener listener);1549302240;Add a listener for on/off local node master events;public void addLocalNodeMasterListener(LocalNodeMasterListener listener) {_        localNodeMasterListeners.add(listener)__    };add,a,listener,for,on,off,local,node,master,events;public,void,add,local,node,master,listener,local,node,master,listener,listener,local,node,master,listeners,add,listener
ClusterApplierService -> public void addTimeoutListener(@Nullable final TimeValue timeout, final TimeoutClusterStateListener listener);1524684173;Adds a cluster state listener that is expected to be removed during a short period of time._If provided, the listener will be notified once a specific time has elapsed.__NOTE: the listener is not removed on timeout. This is the responsibility of the caller.;public void addTimeoutListener(@Nullable final TimeValue timeout, final TimeoutClusterStateListener listener) {_        if (lifecycle.stoppedOrClosed()) {_            listener.onClose()__            return__        }_        _        try {_            threadPoolExecutor.execute(new SourcePrioritizedRunnable(Priority.HIGH, "_add_listener_") {_                @Override_                public void run() {_                    if (timeout != null) {_                        NotifyTimeout notifyTimeout = new NotifyTimeout(listener, timeout)__                        notifyTimeout.future = threadPool.schedule(timeout, ThreadPool.Names.GENERIC, notifyTimeout)__                        onGoingTimeouts.add(notifyTimeout)__                    }_                    timeoutClusterStateListeners.add(listener)__                    listener.postAdded()__                }_            })__        } catch (EsRejectedExecutionException e) {_            if (lifecycle.stoppedOrClosed()) {_                listener.onClose()__            } else {_                throw e__            }_        }_    };adds,a,cluster,state,listener,that,is,expected,to,be,removed,during,a,short,period,of,time,if,provided,the,listener,will,be,notified,once,a,specific,time,has,elapsed,note,the,listener,is,not,removed,on,timeout,this,is,the,responsibility,of,the,caller;public,void,add,timeout,listener,nullable,final,time,value,timeout,final,timeout,cluster,state,listener,listener,if,lifecycle,stopped,or,closed,listener,on,close,return,try,thread,pool,executor,execute,new,source,prioritized,runnable,priority,high,override,public,void,run,if,timeout,null,notify,timeout,notify,timeout,new,notify,timeout,listener,timeout,notify,timeout,future,thread,pool,schedule,timeout,thread,pool,names,generic,notify,timeout,on,going,timeouts,add,notify,timeout,timeout,cluster,state,listeners,add,listener,listener,post,added,catch,es,rejected,execution,exception,e,if,lifecycle,stopped,or,closed,listener,on,close,else,throw,e
ClusterApplierService -> public void addTimeoutListener(@Nullable final TimeValue timeout, final TimeoutClusterStateListener listener);1527152864;Adds a cluster state listener that is expected to be removed during a short period of time._If provided, the listener will be notified once a specific time has elapsed.__NOTE: the listener is not removed on timeout. This is the responsibility of the caller.;public void addTimeoutListener(@Nullable final TimeValue timeout, final TimeoutClusterStateListener listener) {_        if (lifecycle.stoppedOrClosed()) {_            listener.onClose()__            return__        }_        _        try {_            threadPoolExecutor.execute(new SourcePrioritizedRunnable(Priority.HIGH, "_add_listener_") {_                @Override_                public void run() {_                    if (timeout != null) {_                        NotifyTimeout notifyTimeout = new NotifyTimeout(listener, timeout)__                        notifyTimeout.future = threadPool.schedule(timeout, ThreadPool.Names.GENERIC, notifyTimeout)__                        onGoingTimeouts.add(notifyTimeout)__                    }_                    timeoutClusterStateListeners.add(listener)__                    listener.postAdded()__                }_            })__        } catch (EsRejectedExecutionException e) {_            if (lifecycle.stoppedOrClosed()) {_                listener.onClose()__            } else {_                throw e__            }_        }_    };adds,a,cluster,state,listener,that,is,expected,to,be,removed,during,a,short,period,of,time,if,provided,the,listener,will,be,notified,once,a,specific,time,has,elapsed,note,the,listener,is,not,removed,on,timeout,this,is,the,responsibility,of,the,caller;public,void,add,timeout,listener,nullable,final,time,value,timeout,final,timeout,cluster,state,listener,listener,if,lifecycle,stopped,or,closed,listener,on,close,return,try,thread,pool,executor,execute,new,source,prioritized,runnable,priority,high,override,public,void,run,if,timeout,null,notify,timeout,notify,timeout,new,notify,timeout,listener,timeout,notify,timeout,future,thread,pool,schedule,timeout,thread,pool,names,generic,notify,timeout,on,going,timeouts,add,notify,timeout,timeout,cluster,state,listeners,add,listener,listener,post,added,catch,es,rejected,execution,exception,e,if,lifecycle,stopped,or,closed,listener,on,close,else,throw,e
ClusterApplierService -> public void addTimeoutListener(@Nullable final TimeValue timeout, final TimeoutClusterStateListener listener);1533230566;Adds a cluster state listener that is expected to be removed during a short period of time._If provided, the listener will be notified once a specific time has elapsed.__NOTE: the listener is not removed on timeout. This is the responsibility of the caller.;public void addTimeoutListener(@Nullable final TimeValue timeout, final TimeoutClusterStateListener listener) {_        if (lifecycle.stoppedOrClosed()) {_            listener.onClose()__            return__        }_        _        try {_            threadPoolExecutor.execute(new SourcePrioritizedRunnable(Priority.HIGH, "_add_listener_") {_                @Override_                public void run() {_                    if (timeout != null) {_                        NotifyTimeout notifyTimeout = new NotifyTimeout(listener, timeout)__                        notifyTimeout.future = threadPool.schedule(timeout, ThreadPool.Names.GENERIC, notifyTimeout)__                        onGoingTimeouts.add(notifyTimeout)__                    }_                    timeoutClusterStateListeners.add(listener)__                    listener.postAdded()__                }_            })__        } catch (EsRejectedExecutionException e) {_            if (lifecycle.stoppedOrClosed()) {_                listener.onClose()__            } else {_                throw e__            }_        }_    };adds,a,cluster,state,listener,that,is,expected,to,be,removed,during,a,short,period,of,time,if,provided,the,listener,will,be,notified,once,a,specific,time,has,elapsed,note,the,listener,is,not,removed,on,timeout,this,is,the,responsibility,of,the,caller;public,void,add,timeout,listener,nullable,final,time,value,timeout,final,timeout,cluster,state,listener,listener,if,lifecycle,stopped,or,closed,listener,on,close,return,try,thread,pool,executor,execute,new,source,prioritized,runnable,priority,high,override,public,void,run,if,timeout,null,notify,timeout,notify,timeout,new,notify,timeout,listener,timeout,notify,timeout,future,thread,pool,schedule,timeout,thread,pool,names,generic,notify,timeout,on,going,timeouts,add,notify,timeout,timeout,cluster,state,listeners,add,listener,listener,post,added,catch,es,rejected,execution,exception,e,if,lifecycle,stopped,or,closed,listener,on,close,else,throw,e
ClusterApplierService -> public void addTimeoutListener(@Nullable final TimeValue timeout, final TimeoutClusterStateListener listener);1536177418;Adds a cluster state listener that is expected to be removed during a short period of time._If provided, the listener will be notified once a specific time has elapsed.__NOTE: the listener is not removed on timeout. This is the responsibility of the caller.;public void addTimeoutListener(@Nullable final TimeValue timeout, final TimeoutClusterStateListener listener) {_        if (lifecycle.stoppedOrClosed()) {_            listener.onClose()__            return__        }_        _        try {_            threadPoolExecutor.execute(new SourcePrioritizedRunnable(Priority.HIGH, "_add_listener_") {_                @Override_                public void run() {_                    if (timeout != null) {_                        NotifyTimeout notifyTimeout = new NotifyTimeout(listener, timeout)__                        notifyTimeout.future = threadPool.schedule(timeout, ThreadPool.Names.GENERIC, notifyTimeout)__                        onGoingTimeouts.add(notifyTimeout)__                    }_                    timeoutClusterStateListeners.add(listener)__                    listener.postAdded()__                }_            })__        } catch (EsRejectedExecutionException e) {_            if (lifecycle.stoppedOrClosed()) {_                listener.onClose()__            } else {_                throw e__            }_        }_    };adds,a,cluster,state,listener,that,is,expected,to,be,removed,during,a,short,period,of,time,if,provided,the,listener,will,be,notified,once,a,specific,time,has,elapsed,note,the,listener,is,not,removed,on,timeout,this,is,the,responsibility,of,the,caller;public,void,add,timeout,listener,nullable,final,time,value,timeout,final,timeout,cluster,state,listener,listener,if,lifecycle,stopped,or,closed,listener,on,close,return,try,thread,pool,executor,execute,new,source,prioritized,runnable,priority,high,override,public,void,run,if,timeout,null,notify,timeout,notify,timeout,new,notify,timeout,listener,timeout,notify,timeout,future,thread,pool,schedule,timeout,thread,pool,names,generic,notify,timeout,on,going,timeouts,add,notify,timeout,timeout,cluster,state,listeners,add,listener,listener,post,added,catch,es,rejected,execution,exception,e,if,lifecycle,stopped,or,closed,listener,on,close,else,throw,e
ClusterApplierService -> public void addTimeoutListener(@Nullable final TimeValue timeout, final TimeoutClusterStateListener listener);1540847035;Adds a cluster state listener that is expected to be removed during a short period of time._If provided, the listener will be notified once a specific time has elapsed.__NOTE: the listener is not removed on timeout. This is the responsibility of the caller.;public void addTimeoutListener(@Nullable final TimeValue timeout, final TimeoutClusterStateListener listener) {_        if (lifecycle.stoppedOrClosed()) {_            listener.onClose()__            return__        }_        _        try {_            threadPoolExecutor.execute(new SourcePrioritizedRunnable(Priority.HIGH, "_add_listener_") {_                @Override_                public void run() {_                    if (timeout != null) {_                        NotifyTimeout notifyTimeout = new NotifyTimeout(listener, timeout)__                        notifyTimeout.future = threadPool.schedule(timeout, ThreadPool.Names.GENERIC, notifyTimeout)__                        onGoingTimeouts.add(notifyTimeout)__                    }_                    timeoutClusterStateListeners.add(listener)__                    listener.postAdded()__                }_            })__        } catch (EsRejectedExecutionException e) {_            if (lifecycle.stoppedOrClosed()) {_                listener.onClose()__            } else {_                throw e__            }_        }_    };adds,a,cluster,state,listener,that,is,expected,to,be,removed,during,a,short,period,of,time,if,provided,the,listener,will,be,notified,once,a,specific,time,has,elapsed,note,the,listener,is,not,removed,on,timeout,this,is,the,responsibility,of,the,caller;public,void,add,timeout,listener,nullable,final,time,value,timeout,final,timeout,cluster,state,listener,listener,if,lifecycle,stopped,or,closed,listener,on,close,return,try,thread,pool,executor,execute,new,source,prioritized,runnable,priority,high,override,public,void,run,if,timeout,null,notify,timeout,notify,timeout,new,notify,timeout,listener,timeout,notify,timeout,future,thread,pool,schedule,timeout,thread,pool,names,generic,notify,timeout,on,going,timeouts,add,notify,timeout,timeout,cluster,state,listeners,add,listener,listener,post,added,catch,es,rejected,execution,exception,e,if,lifecycle,stopped,or,closed,listener,on,close,else,throw,e
ClusterApplierService -> public void addTimeoutListener(@Nullable final TimeValue timeout, final TimeoutClusterStateListener listener);1541008027;Adds a cluster state listener that is expected to be removed during a short period of time._If provided, the listener will be notified once a specific time has elapsed.__NOTE: the listener is not removed on timeout. This is the responsibility of the caller.;public void addTimeoutListener(@Nullable final TimeValue timeout, final TimeoutClusterStateListener listener) {_        if (lifecycle.stoppedOrClosed()) {_            listener.onClose()__            return__        }_        _        try {_            threadPoolExecutor.execute(new SourcePrioritizedRunnable(Priority.HIGH, "_add_listener_") {_                @Override_                public void run() {_                    if (timeout != null) {_                        NotifyTimeout notifyTimeout = new NotifyTimeout(listener, timeout)__                        notifyTimeout.future = threadPool.schedule(timeout, ThreadPool.Names.GENERIC, notifyTimeout)__                        onGoingTimeouts.add(notifyTimeout)__                    }_                    timeoutClusterStateListeners.add(listener)__                    listener.postAdded()__                }_            })__        } catch (EsRejectedExecutionException e) {_            if (lifecycle.stoppedOrClosed()) {_                listener.onClose()__            } else {_                throw e__            }_        }_    };adds,a,cluster,state,listener,that,is,expected,to,be,removed,during,a,short,period,of,time,if,provided,the,listener,will,be,notified,once,a,specific,time,has,elapsed,note,the,listener,is,not,removed,on,timeout,this,is,the,responsibility,of,the,caller;public,void,add,timeout,listener,nullable,final,time,value,timeout,final,timeout,cluster,state,listener,listener,if,lifecycle,stopped,or,closed,listener,on,close,return,try,thread,pool,executor,execute,new,source,prioritized,runnable,priority,high,override,public,void,run,if,timeout,null,notify,timeout,notify,timeout,new,notify,timeout,listener,timeout,notify,timeout,future,thread,pool,schedule,timeout,thread,pool,names,generic,notify,timeout,on,going,timeouts,add,notify,timeout,timeout,cluster,state,listeners,add,listener,listener,post,added,catch,es,rejected,execution,exception,e,if,lifecycle,stopped,or,closed,listener,on,close,else,throw,e
ClusterApplierService -> public void addTimeoutListener(@Nullable final TimeValue timeout, final TimeoutClusterStateListener listener);1542646292;Adds a cluster state listener that is expected to be removed during a short period of time._If provided, the listener will be notified once a specific time has elapsed.__NOTE: the listener is not removed on timeout. This is the responsibility of the caller.;public void addTimeoutListener(@Nullable final TimeValue timeout, final TimeoutClusterStateListener listener) {_        if (lifecycle.stoppedOrClosed()) {_            listener.onClose()__            return__        }_        _        try {_            threadPoolExecutor.execute(new SourcePrioritizedRunnable(Priority.HIGH, "_add_listener_") {_                @Override_                public void run() {_                    if (timeout != null) {_                        NotifyTimeout notifyTimeout = new NotifyTimeout(listener, timeout)__                        notifyTimeout.future = threadPool.schedule(timeout, ThreadPool.Names.GENERIC, notifyTimeout)__                        onGoingTimeouts.add(notifyTimeout)__                    }_                    timeoutClusterStateListeners.add(listener)__                    listener.postAdded()__                }_            })__        } catch (EsRejectedExecutionException e) {_            if (lifecycle.stoppedOrClosed()) {_                listener.onClose()__            } else {_                throw e__            }_        }_    };adds,a,cluster,state,listener,that,is,expected,to,be,removed,during,a,short,period,of,time,if,provided,the,listener,will,be,notified,once,a,specific,time,has,elapsed,note,the,listener,is,not,removed,on,timeout,this,is,the,responsibility,of,the,caller;public,void,add,timeout,listener,nullable,final,time,value,timeout,final,timeout,cluster,state,listener,listener,if,lifecycle,stopped,or,closed,listener,on,close,return,try,thread,pool,executor,execute,new,source,prioritized,runnable,priority,high,override,public,void,run,if,timeout,null,notify,timeout,notify,timeout,new,notify,timeout,listener,timeout,notify,timeout,future,thread,pool,schedule,timeout,thread,pool,names,generic,notify,timeout,on,going,timeouts,add,notify,timeout,timeout,cluster,state,listeners,add,listener,listener,post,added,catch,es,rejected,execution,exception,e,if,lifecycle,stopped,or,closed,listener,on,close,else,throw,e
ClusterApplierService -> public void addTimeoutListener(@Nullable final TimeValue timeout, final TimeoutClusterStateListener listener);1545319912;Adds a cluster state listener that is expected to be removed during a short period of time._If provided, the listener will be notified once a specific time has elapsed.__NOTE: the listener is not removed on timeout. This is the responsibility of the caller.;public void addTimeoutListener(@Nullable final TimeValue timeout, final TimeoutClusterStateListener listener) {_        if (lifecycle.stoppedOrClosed()) {_            listener.onClose()__            return__        }_        _        try {_            threadPoolExecutor.execute(new SourcePrioritizedRunnable(Priority.HIGH, "_add_listener_") {_                @Override_                public void run() {_                    if (timeout != null) {_                        NotifyTimeout notifyTimeout = new NotifyTimeout(listener, timeout)__                        notifyTimeout.future = threadPool.schedule(timeout, ThreadPool.Names.GENERIC, notifyTimeout)__                        onGoingTimeouts.add(notifyTimeout)__                    }_                    timeoutClusterStateListeners.add(listener)__                    listener.postAdded()__                }_            })__        } catch (EsRejectedExecutionException e) {_            if (lifecycle.stoppedOrClosed()) {_                listener.onClose()__            } else {_                throw e__            }_        }_    };adds,a,cluster,state,listener,that,is,expected,to,be,removed,during,a,short,period,of,time,if,provided,the,listener,will,be,notified,once,a,specific,time,has,elapsed,note,the,listener,is,not,removed,on,timeout,this,is,the,responsibility,of,the,caller;public,void,add,timeout,listener,nullable,final,time,value,timeout,final,timeout,cluster,state,listener,listener,if,lifecycle,stopped,or,closed,listener,on,close,return,try,thread,pool,executor,execute,new,source,prioritized,runnable,priority,high,override,public,void,run,if,timeout,null,notify,timeout,notify,timeout,new,notify,timeout,listener,timeout,notify,timeout,future,thread,pool,schedule,timeout,thread,pool,names,generic,notify,timeout,on,going,timeouts,add,notify,timeout,timeout,cluster,state,listeners,add,listener,listener,post,added,catch,es,rejected,execution,exception,e,if,lifecycle,stopped,or,closed,listener,on,close,else,throw,e
ClusterApplierService -> public void addTimeoutListener(@Nullable final TimeValue timeout, final TimeoutClusterStateListener listener);1547049229;Adds a cluster state listener that is expected to be removed during a short period of time._If provided, the listener will be notified once a specific time has elapsed.__NOTE: the listener is not removed on timeout. This is the responsibility of the caller.;public void addTimeoutListener(@Nullable final TimeValue timeout, final TimeoutClusterStateListener listener) {_        if (lifecycle.stoppedOrClosed()) {_            listener.onClose()__            return__        }_        _        try {_            threadPoolExecutor.execute(new SourcePrioritizedRunnable(Priority.HIGH, "_add_listener_") {_                @Override_                public void run() {_                    if (timeout != null) {_                        NotifyTimeout notifyTimeout = new NotifyTimeout(listener, timeout)__                        notifyTimeout.future = threadPool.schedule(timeout, ThreadPool.Names.GENERIC, notifyTimeout)__                        onGoingTimeouts.add(notifyTimeout)__                    }_                    timeoutClusterStateListeners.add(listener)__                    listener.postAdded()__                }_            })__        } catch (EsRejectedExecutionException e) {_            if (lifecycle.stoppedOrClosed()) {_                listener.onClose()__            } else {_                throw e__            }_        }_    };adds,a,cluster,state,listener,that,is,expected,to,be,removed,during,a,short,period,of,time,if,provided,the,listener,will,be,notified,once,a,specific,time,has,elapsed,note,the,listener,is,not,removed,on,timeout,this,is,the,responsibility,of,the,caller;public,void,add,timeout,listener,nullable,final,time,value,timeout,final,timeout,cluster,state,listener,listener,if,lifecycle,stopped,or,closed,listener,on,close,return,try,thread,pool,executor,execute,new,source,prioritized,runnable,priority,high,override,public,void,run,if,timeout,null,notify,timeout,notify,timeout,new,notify,timeout,listener,timeout,notify,timeout,future,thread,pool,schedule,timeout,thread,pool,names,generic,notify,timeout,on,going,timeouts,add,notify,timeout,timeout,cluster,state,listeners,add,listener,listener,post,added,catch,es,rejected,execution,exception,e,if,lifecycle,stopped,or,closed,listener,on,close,else,throw,e
ClusterApplierService -> public void addTimeoutListener(@Nullable final TimeValue timeout, final TimeoutClusterStateListener listener);1547625930;Adds a cluster state listener that is expected to be removed during a short period of time._If provided, the listener will be notified once a specific time has elapsed.__NOTE: the listener is not removed on timeout. This is the responsibility of the caller.;public void addTimeoutListener(@Nullable final TimeValue timeout, final TimeoutClusterStateListener listener) {_        if (lifecycle.stoppedOrClosed()) {_            listener.onClose()__            return__        }_        _        try {_            threadPoolExecutor.execute(new SourcePrioritizedRunnable(Priority.HIGH, "_add_listener_") {_                @Override_                public void run() {_                    if (timeout != null) {_                        NotifyTimeout notifyTimeout = new NotifyTimeout(listener, timeout)__                        notifyTimeout.future = threadPool.schedule(timeout, ThreadPool.Names.GENERIC, notifyTimeout)__                        onGoingTimeouts.add(notifyTimeout)__                    }_                    timeoutClusterStateListeners.add(listener)__                    listener.postAdded()__                }_            })__        } catch (EsRejectedExecutionException e) {_            if (lifecycle.stoppedOrClosed()) {_                listener.onClose()__            } else {_                throw e__            }_        }_    };adds,a,cluster,state,listener,that,is,expected,to,be,removed,during,a,short,period,of,time,if,provided,the,listener,will,be,notified,once,a,specific,time,has,elapsed,note,the,listener,is,not,removed,on,timeout,this,is,the,responsibility,of,the,caller;public,void,add,timeout,listener,nullable,final,time,value,timeout,final,timeout,cluster,state,listener,listener,if,lifecycle,stopped,or,closed,listener,on,close,return,try,thread,pool,executor,execute,new,source,prioritized,runnable,priority,high,override,public,void,run,if,timeout,null,notify,timeout,notify,timeout,new,notify,timeout,listener,timeout,notify,timeout,future,thread,pool,schedule,timeout,thread,pool,names,generic,notify,timeout,on,going,timeouts,add,notify,timeout,timeout,cluster,state,listeners,add,listener,listener,post,added,catch,es,rejected,execution,exception,e,if,lifecycle,stopped,or,closed,listener,on,close,else,throw,e
ClusterApplierService -> public void addTimeoutListener(@Nullable final TimeValue timeout, final TimeoutClusterStateListener listener);1548335343;Adds a cluster state listener that is expected to be removed during a short period of time._If provided, the listener will be notified once a specific time has elapsed.__NOTE: the listener is not removed on timeout. This is the responsibility of the caller.;public void addTimeoutListener(@Nullable final TimeValue timeout, final TimeoutClusterStateListener listener) {_        if (lifecycle.stoppedOrClosed()) {_            listener.onClose()__            return__        }_        _        try {_            threadPoolExecutor.execute(new SourcePrioritizedRunnable(Priority.HIGH, "_add_listener_") {_                @Override_                public void run() {_                    if (timeout != null) {_                        NotifyTimeout notifyTimeout = new NotifyTimeout(listener, timeout)__                        notifyTimeout.future = threadPool.schedule(timeout, ThreadPool.Names.GENERIC, notifyTimeout)__                        onGoingTimeouts.add(notifyTimeout)__                    }_                    timeoutClusterStateListeners.add(listener)__                    listener.postAdded()__                }_            })__        } catch (EsRejectedExecutionException e) {_            if (lifecycle.stoppedOrClosed()) {_                listener.onClose()__            } else {_                throw e__            }_        }_    };adds,a,cluster,state,listener,that,is,expected,to,be,removed,during,a,short,period,of,time,if,provided,the,listener,will,be,notified,once,a,specific,time,has,elapsed,note,the,listener,is,not,removed,on,timeout,this,is,the,responsibility,of,the,caller;public,void,add,timeout,listener,nullable,final,time,value,timeout,final,timeout,cluster,state,listener,listener,if,lifecycle,stopped,or,closed,listener,on,close,return,try,thread,pool,executor,execute,new,source,prioritized,runnable,priority,high,override,public,void,run,if,timeout,null,notify,timeout,notify,timeout,new,notify,timeout,listener,timeout,notify,timeout,future,thread,pool,schedule,timeout,thread,pool,names,generic,notify,timeout,on,going,timeouts,add,notify,timeout,timeout,cluster,state,listeners,add,listener,listener,post,added,catch,es,rejected,execution,exception,e,if,lifecycle,stopped,or,closed,listener,on,close,else,throw,e
ClusterApplierService -> public void addTimeoutListener(@Nullable final TimeValue timeout, final TimeoutClusterStateListener listener);1548953505;Adds a cluster state listener that is expected to be removed during a short period of time._If provided, the listener will be notified once a specific time has elapsed.__NOTE: the listener is not removed on timeout. This is the responsibility of the caller.;public void addTimeoutListener(@Nullable final TimeValue timeout, final TimeoutClusterStateListener listener) {_        if (lifecycle.stoppedOrClosed()) {_            listener.onClose()__            return__        }_        _        try {_            threadPoolExecutor.execute(new SourcePrioritizedRunnable(Priority.HIGH, "_add_listener_") {_                @Override_                public void run() {_                    if (timeout != null) {_                        NotifyTimeout notifyTimeout = new NotifyTimeout(listener, timeout)__                        notifyTimeout.cancellable = threadPool.schedule(notifyTimeout, timeout, ThreadPool.Names.GENERIC)__                        onGoingTimeouts.add(notifyTimeout)__                    }_                    timeoutClusterStateListeners.add(listener)__                    listener.postAdded()__                }_            })__        } catch (EsRejectedExecutionException e) {_            if (lifecycle.stoppedOrClosed()) {_                listener.onClose()__            } else {_                throw e__            }_        }_    };adds,a,cluster,state,listener,that,is,expected,to,be,removed,during,a,short,period,of,time,if,provided,the,listener,will,be,notified,once,a,specific,time,has,elapsed,note,the,listener,is,not,removed,on,timeout,this,is,the,responsibility,of,the,caller;public,void,add,timeout,listener,nullable,final,time,value,timeout,final,timeout,cluster,state,listener,listener,if,lifecycle,stopped,or,closed,listener,on,close,return,try,thread,pool,executor,execute,new,source,prioritized,runnable,priority,high,override,public,void,run,if,timeout,null,notify,timeout,notify,timeout,new,notify,timeout,listener,timeout,notify,timeout,cancellable,thread,pool,schedule,notify,timeout,timeout,thread,pool,names,generic,on,going,timeouts,add,notify,timeout,timeout,cluster,state,listeners,add,listener,listener,post,added,catch,es,rejected,execution,exception,e,if,lifecycle,stopped,or,closed,listener,on,close,else,throw,e
ClusterApplierService -> public void addTimeoutListener(@Nullable final TimeValue timeout, final TimeoutClusterStateListener listener);1549302240;Adds a cluster state listener that is expected to be removed during a short period of time._If provided, the listener will be notified once a specific time has elapsed.__NOTE: the listener is not removed on timeout. This is the responsibility of the caller.;public void addTimeoutListener(@Nullable final TimeValue timeout, final TimeoutClusterStateListener listener) {_        if (lifecycle.stoppedOrClosed()) {_            listener.onClose()__            return__        }_        _        try {_            threadPoolExecutor.execute(new SourcePrioritizedRunnable(Priority.HIGH, "_add_listener_") {_                @Override_                public void run() {_                    if (timeout != null) {_                        NotifyTimeout notifyTimeout = new NotifyTimeout(listener, timeout)__                        notifyTimeout.cancellable = threadPool.schedule(notifyTimeout, timeout, ThreadPool.Names.GENERIC)__                        onGoingTimeouts.add(notifyTimeout)__                    }_                    timeoutClusterStateListeners.add(listener)__                    listener.postAdded()__                }_            })__        } catch (EsRejectedExecutionException e) {_            if (lifecycle.stoppedOrClosed()) {_                listener.onClose()__            } else {_                throw e__            }_        }_    };adds,a,cluster,state,listener,that,is,expected,to,be,removed,during,a,short,period,of,time,if,provided,the,listener,will,be,notified,once,a,specific,time,has,elapsed,note,the,listener,is,not,removed,on,timeout,this,is,the,responsibility,of,the,caller;public,void,add,timeout,listener,nullable,final,time,value,timeout,final,timeout,cluster,state,listener,listener,if,lifecycle,stopped,or,closed,listener,on,close,return,try,thread,pool,executor,execute,new,source,prioritized,runnable,priority,high,override,public,void,run,if,timeout,null,notify,timeout,notify,timeout,new,notify,timeout,listener,timeout,notify,timeout,cancellable,thread,pool,schedule,notify,timeout,timeout,thread,pool,names,generic,on,going,timeouts,add,notify,timeout,timeout,cluster,state,listeners,add,listener,listener,post,added,catch,es,rejected,execution,exception,e,if,lifecycle,stopped,or,closed,listener,on,close,else,throw,e
ClusterApplierService -> public void removeLocalNodeMasterListener(LocalNodeMasterListener listener);1524684173;Remove the given listener for on/off local master events;public void removeLocalNodeMasterListener(LocalNodeMasterListener listener) {_        localNodeMasterListeners.remove(listener)__    };remove,the,given,listener,for,on,off,local,master,events;public,void,remove,local,node,master,listener,local,node,master,listener,listener,local,node,master,listeners,remove,listener
ClusterApplierService -> public void removeLocalNodeMasterListener(LocalNodeMasterListener listener);1527152864;Remove the given listener for on/off local master events;public void removeLocalNodeMasterListener(LocalNodeMasterListener listener) {_        localNodeMasterListeners.remove(listener)__    };remove,the,given,listener,for,on,off,local,master,events;public,void,remove,local,node,master,listener,local,node,master,listener,listener,local,node,master,listeners,remove,listener
ClusterApplierService -> public void removeLocalNodeMasterListener(LocalNodeMasterListener listener);1533230566;Remove the given listener for on/off local master events;public void removeLocalNodeMasterListener(LocalNodeMasterListener listener) {_        localNodeMasterListeners.remove(listener)__    };remove,the,given,listener,for,on,off,local,master,events;public,void,remove,local,node,master,listener,local,node,master,listener,listener,local,node,master,listeners,remove,listener
ClusterApplierService -> public void removeListener(ClusterStateListener listener);1524684173;Removes a listener for updated cluster states.;public void removeListener(ClusterStateListener listener) {_        clusterStateListeners.remove(listener)__    };removes,a,listener,for,updated,cluster,states;public,void,remove,listener,cluster,state,listener,listener,cluster,state,listeners,remove,listener
ClusterApplierService -> public void removeListener(ClusterStateListener listener);1527152864;Removes a listener for updated cluster states.;public void removeListener(ClusterStateListener listener) {_        clusterStateListeners.remove(listener)__    };removes,a,listener,for,updated,cluster,states;public,void,remove,listener,cluster,state,listener,listener,cluster,state,listeners,remove,listener
ClusterApplierService -> public void removeListener(ClusterStateListener listener);1533230566;Removes a listener for updated cluster states.;public void removeListener(ClusterStateListener listener) {_        clusterStateListeners.remove(listener)__    };removes,a,listener,for,updated,cluster,states;public,void,remove,listener,cluster,state,listener,listener,cluster,state,listeners,remove,listener
ClusterApplierService -> public void removeListener(ClusterStateListener listener);1536177418;Removes a listener for updated cluster states.;public void removeListener(ClusterStateListener listener) {_        clusterStateListeners.remove(listener)__    };removes,a,listener,for,updated,cluster,states;public,void,remove,listener,cluster,state,listener,listener,cluster,state,listeners,remove,listener
ClusterApplierService -> public void removeListener(ClusterStateListener listener);1540847035;Removes a listener for updated cluster states.;public void removeListener(ClusterStateListener listener) {_        clusterStateListeners.remove(listener)__    };removes,a,listener,for,updated,cluster,states;public,void,remove,listener,cluster,state,listener,listener,cluster,state,listeners,remove,listener
ClusterApplierService -> public void removeListener(ClusterStateListener listener);1541008027;Removes a listener for updated cluster states.;public void removeListener(ClusterStateListener listener) {_        clusterStateListeners.remove(listener)__    };removes,a,listener,for,updated,cluster,states;public,void,remove,listener,cluster,state,listener,listener,cluster,state,listeners,remove,listener
ClusterApplierService -> public void removeListener(ClusterStateListener listener);1542646292;Removes a listener for updated cluster states.;public void removeListener(ClusterStateListener listener) {_        clusterStateListeners.remove(listener)__    };removes,a,listener,for,updated,cluster,states;public,void,remove,listener,cluster,state,listener,listener,cluster,state,listeners,remove,listener
ClusterApplierService -> public void removeListener(ClusterStateListener listener);1545319912;Removes a listener for updated cluster states.;public void removeListener(ClusterStateListener listener) {_        clusterStateListeners.remove(listener)__    };removes,a,listener,for,updated,cluster,states;public,void,remove,listener,cluster,state,listener,listener,cluster,state,listeners,remove,listener
ClusterApplierService -> public void removeListener(ClusterStateListener listener);1547049229;Removes a listener for updated cluster states.;public void removeListener(ClusterStateListener listener) {_        clusterStateListeners.remove(listener)__    };removes,a,listener,for,updated,cluster,states;public,void,remove,listener,cluster,state,listener,listener,cluster,state,listeners,remove,listener
ClusterApplierService -> public void removeListener(ClusterStateListener listener);1547625930;Removes a listener for updated cluster states.;public void removeListener(ClusterStateListener listener) {_        clusterStateListeners.remove(listener)__    };removes,a,listener,for,updated,cluster,states;public,void,remove,listener,cluster,state,listener,listener,cluster,state,listeners,remove,listener
ClusterApplierService -> public void removeListener(ClusterStateListener listener);1548335343;Removes a listener for updated cluster states.;public void removeListener(ClusterStateListener listener) {_        clusterStateListeners.remove(listener)__    };removes,a,listener,for,updated,cluster,states;public,void,remove,listener,cluster,state,listener,listener,cluster,state,listeners,remove,listener
ClusterApplierService -> public void removeListener(ClusterStateListener listener);1548953505;Removes a listener for updated cluster states.;public void removeListener(ClusterStateListener listener) {_        clusterStateListeners.remove(listener)__    };removes,a,listener,for,updated,cluster,states;public,void,remove,listener,cluster,state,listener,listener,cluster,state,listeners,remove,listener
ClusterApplierService -> public void removeListener(ClusterStateListener listener);1549302240;Removes a listener for updated cluster states.;public void removeListener(ClusterStateListener listener) {_        clusterStateListeners.remove(listener)__    };removes,a,listener,for,updated,cluster,states;public,void,remove,listener,cluster,state,listener,listener,cluster,state,listeners,remove,listener
ClusterApplierService -> public void removeTimeoutListener(TimeoutClusterStateListener listener);1524684173;Removes a timeout listener for updated cluster states.;public void removeTimeoutListener(TimeoutClusterStateListener listener) {_        timeoutClusterStateListeners.remove(listener)__        for (Iterator<NotifyTimeout> it = onGoingTimeouts.iterator()_ it.hasNext()_ ) {_            NotifyTimeout timeout = it.next()__            if (timeout.listener.equals(listener)) {_                timeout.cancel()__                it.remove()__            }_        }_    };removes,a,timeout,listener,for,updated,cluster,states;public,void,remove,timeout,listener,timeout,cluster,state,listener,listener,timeout,cluster,state,listeners,remove,listener,for,iterator,notify,timeout,it,on,going,timeouts,iterator,it,has,next,notify,timeout,timeout,it,next,if,timeout,listener,equals,listener,timeout,cancel,it,remove
ClusterApplierService -> public void removeTimeoutListener(TimeoutClusterStateListener listener);1527152864;Removes a timeout listener for updated cluster states.;public void removeTimeoutListener(TimeoutClusterStateListener listener) {_        timeoutClusterStateListeners.remove(listener)__        for (Iterator<NotifyTimeout> it = onGoingTimeouts.iterator()_ it.hasNext()_ ) {_            NotifyTimeout timeout = it.next()__            if (timeout.listener.equals(listener)) {_                timeout.cancel()__                it.remove()__            }_        }_    };removes,a,timeout,listener,for,updated,cluster,states;public,void,remove,timeout,listener,timeout,cluster,state,listener,listener,timeout,cluster,state,listeners,remove,listener,for,iterator,notify,timeout,it,on,going,timeouts,iterator,it,has,next,notify,timeout,timeout,it,next,if,timeout,listener,equals,listener,timeout,cancel,it,remove
ClusterApplierService -> public void removeTimeoutListener(TimeoutClusterStateListener listener);1533230566;Removes a timeout listener for updated cluster states.;public void removeTimeoutListener(TimeoutClusterStateListener listener) {_        timeoutClusterStateListeners.remove(listener)__        for (Iterator<NotifyTimeout> it = onGoingTimeouts.iterator()_ it.hasNext()_ ) {_            NotifyTimeout timeout = it.next()__            if (timeout.listener.equals(listener)) {_                timeout.cancel()__                it.remove()__            }_        }_    };removes,a,timeout,listener,for,updated,cluster,states;public,void,remove,timeout,listener,timeout,cluster,state,listener,listener,timeout,cluster,state,listeners,remove,listener,for,iterator,notify,timeout,it,on,going,timeouts,iterator,it,has,next,notify,timeout,timeout,it,next,if,timeout,listener,equals,listener,timeout,cancel,it,remove
ClusterApplierService -> public void removeTimeoutListener(TimeoutClusterStateListener listener);1536177418;Removes a timeout listener for updated cluster states.;public void removeTimeoutListener(TimeoutClusterStateListener listener) {_        timeoutClusterStateListeners.remove(listener)__        for (Iterator<NotifyTimeout> it = onGoingTimeouts.iterator()_ it.hasNext()_ ) {_            NotifyTimeout timeout = it.next()__            if (timeout.listener.equals(listener)) {_                timeout.cancel()__                it.remove()__            }_        }_    };removes,a,timeout,listener,for,updated,cluster,states;public,void,remove,timeout,listener,timeout,cluster,state,listener,listener,timeout,cluster,state,listeners,remove,listener,for,iterator,notify,timeout,it,on,going,timeouts,iterator,it,has,next,notify,timeout,timeout,it,next,if,timeout,listener,equals,listener,timeout,cancel,it,remove
ClusterApplierService -> public void removeTimeoutListener(TimeoutClusterStateListener listener);1540847035;Removes a timeout listener for updated cluster states.;public void removeTimeoutListener(TimeoutClusterStateListener listener) {_        timeoutClusterStateListeners.remove(listener)__        for (Iterator<NotifyTimeout> it = onGoingTimeouts.iterator()_ it.hasNext()_ ) {_            NotifyTimeout timeout = it.next()__            if (timeout.listener.equals(listener)) {_                timeout.cancel()__                it.remove()__            }_        }_    };removes,a,timeout,listener,for,updated,cluster,states;public,void,remove,timeout,listener,timeout,cluster,state,listener,listener,timeout,cluster,state,listeners,remove,listener,for,iterator,notify,timeout,it,on,going,timeouts,iterator,it,has,next,notify,timeout,timeout,it,next,if,timeout,listener,equals,listener,timeout,cancel,it,remove
ClusterApplierService -> public void removeTimeoutListener(TimeoutClusterStateListener listener);1541008027;Removes a timeout listener for updated cluster states.;public void removeTimeoutListener(TimeoutClusterStateListener listener) {_        timeoutClusterStateListeners.remove(listener)__        for (Iterator<NotifyTimeout> it = onGoingTimeouts.iterator()_ it.hasNext()_ ) {_            NotifyTimeout timeout = it.next()__            if (timeout.listener.equals(listener)) {_                timeout.cancel()__                it.remove()__            }_        }_    };removes,a,timeout,listener,for,updated,cluster,states;public,void,remove,timeout,listener,timeout,cluster,state,listener,listener,timeout,cluster,state,listeners,remove,listener,for,iterator,notify,timeout,it,on,going,timeouts,iterator,it,has,next,notify,timeout,timeout,it,next,if,timeout,listener,equals,listener,timeout,cancel,it,remove
ClusterApplierService -> public void removeTimeoutListener(TimeoutClusterStateListener listener);1542646292;Removes a timeout listener for updated cluster states.;public void removeTimeoutListener(TimeoutClusterStateListener listener) {_        timeoutClusterStateListeners.remove(listener)__        for (Iterator<NotifyTimeout> it = onGoingTimeouts.iterator()_ it.hasNext()_ ) {_            NotifyTimeout timeout = it.next()__            if (timeout.listener.equals(listener)) {_                timeout.cancel()__                it.remove()__            }_        }_    };removes,a,timeout,listener,for,updated,cluster,states;public,void,remove,timeout,listener,timeout,cluster,state,listener,listener,timeout,cluster,state,listeners,remove,listener,for,iterator,notify,timeout,it,on,going,timeouts,iterator,it,has,next,notify,timeout,timeout,it,next,if,timeout,listener,equals,listener,timeout,cancel,it,remove
ClusterApplierService -> public void removeTimeoutListener(TimeoutClusterStateListener listener);1545319912;Removes a timeout listener for updated cluster states.;public void removeTimeoutListener(TimeoutClusterStateListener listener) {_        timeoutClusterStateListeners.remove(listener)__        for (Iterator<NotifyTimeout> it = onGoingTimeouts.iterator()_ it.hasNext()_ ) {_            NotifyTimeout timeout = it.next()__            if (timeout.listener.equals(listener)) {_                timeout.cancel()__                it.remove()__            }_        }_    };removes,a,timeout,listener,for,updated,cluster,states;public,void,remove,timeout,listener,timeout,cluster,state,listener,listener,timeout,cluster,state,listeners,remove,listener,for,iterator,notify,timeout,it,on,going,timeouts,iterator,it,has,next,notify,timeout,timeout,it,next,if,timeout,listener,equals,listener,timeout,cancel,it,remove
ClusterApplierService -> public void removeTimeoutListener(TimeoutClusterStateListener listener);1547049229;Removes a timeout listener for updated cluster states.;public void removeTimeoutListener(TimeoutClusterStateListener listener) {_        timeoutClusterStateListeners.remove(listener)__        for (Iterator<NotifyTimeout> it = onGoingTimeouts.iterator()_ it.hasNext()_ ) {_            NotifyTimeout timeout = it.next()__            if (timeout.listener.equals(listener)) {_                timeout.cancel()__                it.remove()__            }_        }_    };removes,a,timeout,listener,for,updated,cluster,states;public,void,remove,timeout,listener,timeout,cluster,state,listener,listener,timeout,cluster,state,listeners,remove,listener,for,iterator,notify,timeout,it,on,going,timeouts,iterator,it,has,next,notify,timeout,timeout,it,next,if,timeout,listener,equals,listener,timeout,cancel,it,remove
ClusterApplierService -> public void removeTimeoutListener(TimeoutClusterStateListener listener);1547625930;Removes a timeout listener for updated cluster states.;public void removeTimeoutListener(TimeoutClusterStateListener listener) {_        timeoutClusterStateListeners.remove(listener)__        for (Iterator<NotifyTimeout> it = onGoingTimeouts.iterator()_ it.hasNext()_ ) {_            NotifyTimeout timeout = it.next()__            if (timeout.listener.equals(listener)) {_                timeout.cancel()__                it.remove()__            }_        }_    };removes,a,timeout,listener,for,updated,cluster,states;public,void,remove,timeout,listener,timeout,cluster,state,listener,listener,timeout,cluster,state,listeners,remove,listener,for,iterator,notify,timeout,it,on,going,timeouts,iterator,it,has,next,notify,timeout,timeout,it,next,if,timeout,listener,equals,listener,timeout,cancel,it,remove
ClusterApplierService -> public void removeTimeoutListener(TimeoutClusterStateListener listener);1548335343;Removes a timeout listener for updated cluster states.;public void removeTimeoutListener(TimeoutClusterStateListener listener) {_        timeoutClusterStateListeners.remove(listener)__        for (Iterator<NotifyTimeout> it = onGoingTimeouts.iterator()_ it.hasNext()_ ) {_            NotifyTimeout timeout = it.next()__            if (timeout.listener.equals(listener)) {_                timeout.cancel()__                it.remove()__            }_        }_    };removes,a,timeout,listener,for,updated,cluster,states;public,void,remove,timeout,listener,timeout,cluster,state,listener,listener,timeout,cluster,state,listeners,remove,listener,for,iterator,notify,timeout,it,on,going,timeouts,iterator,it,has,next,notify,timeout,timeout,it,next,if,timeout,listener,equals,listener,timeout,cancel,it,remove
ClusterApplierService -> public void removeTimeoutListener(TimeoutClusterStateListener listener);1548953505;Removes a timeout listener for updated cluster states.;public void removeTimeoutListener(TimeoutClusterStateListener listener) {_        timeoutClusterStateListeners.remove(listener)__        for (Iterator<NotifyTimeout> it = onGoingTimeouts.iterator()_ it.hasNext()_ ) {_            NotifyTimeout timeout = it.next()__            if (timeout.listener.equals(listener)) {_                timeout.cancel()__                it.remove()__            }_        }_    };removes,a,timeout,listener,for,updated,cluster,states;public,void,remove,timeout,listener,timeout,cluster,state,listener,listener,timeout,cluster,state,listeners,remove,listener,for,iterator,notify,timeout,it,on,going,timeouts,iterator,it,has,next,notify,timeout,timeout,it,next,if,timeout,listener,equals,listener,timeout,cancel,it,remove
ClusterApplierService -> public void removeTimeoutListener(TimeoutClusterStateListener listener);1549302240;Removes a timeout listener for updated cluster states.;public void removeTimeoutListener(TimeoutClusterStateListener listener) {_        timeoutClusterStateListeners.remove(listener)__        for (Iterator<NotifyTimeout> it = onGoingTimeouts.iterator()_ it.hasNext()_ ) {_            NotifyTimeout timeout = it.next()__            if (timeout.listener.equals(listener)) {_                timeout.cancel()__                it.remove()__            }_        }_    };removes,a,timeout,listener,for,updated,cluster,states;public,void,remove,timeout,listener,timeout,cluster,state,listener,listener,timeout,cluster,state,listeners,remove,listener,for,iterator,notify,timeout,it,on,going,timeouts,iterator,it,has,next,notify,timeout,timeout,it,next,if,timeout,listener,equals,listener,timeout,cancel,it,remove
ClusterApplierService -> public void addListener(ClusterStateListener listener);1524684173;Add a listener for updated cluster states;public void addListener(ClusterStateListener listener) {_        clusterStateListeners.add(listener)__    };add,a,listener,for,updated,cluster,states;public,void,add,listener,cluster,state,listener,listener,cluster,state,listeners,add,listener
ClusterApplierService -> public void addListener(ClusterStateListener listener);1527152864;Add a listener for updated cluster states;public void addListener(ClusterStateListener listener) {_        clusterStateListeners.add(listener)__    };add,a,listener,for,updated,cluster,states;public,void,add,listener,cluster,state,listener,listener,cluster,state,listeners,add,listener
ClusterApplierService -> public void addListener(ClusterStateListener listener);1533230566;Add a listener for updated cluster states;public void addListener(ClusterStateListener listener) {_        clusterStateListeners.add(listener)__    };add,a,listener,for,updated,cluster,states;public,void,add,listener,cluster,state,listener,listener,cluster,state,listeners,add,listener
ClusterApplierService -> public void addListener(ClusterStateListener listener);1536177418;Add a listener for updated cluster states;public void addListener(ClusterStateListener listener) {_        clusterStateListeners.add(listener)__    };add,a,listener,for,updated,cluster,states;public,void,add,listener,cluster,state,listener,listener,cluster,state,listeners,add,listener
ClusterApplierService -> public void addListener(ClusterStateListener listener);1540847035;Add a listener for updated cluster states;public void addListener(ClusterStateListener listener) {_        clusterStateListeners.add(listener)__    };add,a,listener,for,updated,cluster,states;public,void,add,listener,cluster,state,listener,listener,cluster,state,listeners,add,listener
ClusterApplierService -> public void addListener(ClusterStateListener listener);1541008027;Add a listener for updated cluster states;public void addListener(ClusterStateListener listener) {_        clusterStateListeners.add(listener)__    };add,a,listener,for,updated,cluster,states;public,void,add,listener,cluster,state,listener,listener,cluster,state,listeners,add,listener
ClusterApplierService -> public void addListener(ClusterStateListener listener);1542646292;Add a listener for updated cluster states;public void addListener(ClusterStateListener listener) {_        clusterStateListeners.add(listener)__    };add,a,listener,for,updated,cluster,states;public,void,add,listener,cluster,state,listener,listener,cluster,state,listeners,add,listener
ClusterApplierService -> public void addListener(ClusterStateListener listener);1545319912;Add a listener for updated cluster states;public void addListener(ClusterStateListener listener) {_        clusterStateListeners.add(listener)__    };add,a,listener,for,updated,cluster,states;public,void,add,listener,cluster,state,listener,listener,cluster,state,listeners,add,listener
ClusterApplierService -> public void addListener(ClusterStateListener listener);1547049229;Add a listener for updated cluster states;public void addListener(ClusterStateListener listener) {_        clusterStateListeners.add(listener)__    };add,a,listener,for,updated,cluster,states;public,void,add,listener,cluster,state,listener,listener,cluster,state,listeners,add,listener
ClusterApplierService -> public void addListener(ClusterStateListener listener);1547625930;Add a listener for updated cluster states;public void addListener(ClusterStateListener listener) {_        clusterStateListeners.add(listener)__    };add,a,listener,for,updated,cluster,states;public,void,add,listener,cluster,state,listener,listener,cluster,state,listeners,add,listener
ClusterApplierService -> public void addListener(ClusterStateListener listener);1548335343;Add a listener for updated cluster states;public void addListener(ClusterStateListener listener) {_        clusterStateListeners.add(listener)__    };add,a,listener,for,updated,cluster,states;public,void,add,listener,cluster,state,listener,listener,cluster,state,listeners,add,listener
ClusterApplierService -> public void addListener(ClusterStateListener listener);1548953505;Add a listener for updated cluster states;public void addListener(ClusterStateListener listener) {_        clusterStateListeners.add(listener)__    };add,a,listener,for,updated,cluster,states;public,void,add,listener,cluster,state,listener,listener,cluster,state,listeners,add,listener
ClusterApplierService -> public void addListener(ClusterStateListener listener);1549302240;Add a listener for updated cluster states;public void addListener(ClusterStateListener listener) {_        clusterStateListeners.add(listener)__    };add,a,listener,for,updated,cluster,states;public,void,add,listener,cluster,state,listener,listener,cluster,state,listeners,add,listener
ClusterApplierService -> private static boolean assertNotCalledFromClusterStateApplier(String reason);1524684173;asserts that the current stack trace does <b>NOT</b> involve a cluster state applier;private static boolean assertNotCalledFromClusterStateApplier(String reason) {_        if (Thread.currentThread().getName().contains(CLUSTER_UPDATE_THREAD_NAME)) {_            for (StackTraceElement element : Thread.currentThread().getStackTrace()) {_                final String className = element.getClassName()__                final String methodName = element.getMethodName()__                if (className.equals(ClusterStateObserver.class.getName())) {_                    _                    return true__                } else if (className.equals(ClusterApplierService.class.getName())_                    && methodName.equals("callClusterStateAppliers")) {_                    throw new AssertionError("should not be called by a cluster state applier. reason [" + reason + "]")__                }_            }_        }_        return true__    };asserts,that,the,current,stack,trace,does,b,not,b,involve,a,cluster,state,applier;private,static,boolean,assert,not,called,from,cluster,state,applier,string,reason,if,thread,current,thread,get,name,contains,for,stack,trace,element,element,thread,current,thread,get,stack,trace,final,string,class,name,element,get,class,name,final,string,method,name,element,get,method,name,if,class,name,equals,cluster,state,observer,class,get,name,return,true,else,if,class,name,equals,cluster,applier,service,class,get,name,method,name,equals,call,cluster,state,appliers,throw,new,assertion,error,should,not,be,called,by,a,cluster,state,applier,reason,reason,return,true
ClusterApplierService -> private static boolean assertNotCalledFromClusterStateApplier(String reason);1527152864;asserts that the current stack trace does <b>NOT</b> involve a cluster state applier;private static boolean assertNotCalledFromClusterStateApplier(String reason) {_        if (Thread.currentThread().getName().contains(CLUSTER_UPDATE_THREAD_NAME)) {_            for (StackTraceElement element : Thread.currentThread().getStackTrace()) {_                final String className = element.getClassName()__                final String methodName = element.getMethodName()__                if (className.equals(ClusterStateObserver.class.getName())) {_                    _                    return true__                } else if (className.equals(ClusterApplierService.class.getName())_                    && methodName.equals("callClusterStateAppliers")) {_                    throw new AssertionError("should not be called by a cluster state applier. reason [" + reason + "]")__                }_            }_        }_        return true__    };asserts,that,the,current,stack,trace,does,b,not,b,involve,a,cluster,state,applier;private,static,boolean,assert,not,called,from,cluster,state,applier,string,reason,if,thread,current,thread,get,name,contains,for,stack,trace,element,element,thread,current,thread,get,stack,trace,final,string,class,name,element,get,class,name,final,string,method,name,element,get,method,name,if,class,name,equals,cluster,state,observer,class,get,name,return,true,else,if,class,name,equals,cluster,applier,service,class,get,name,method,name,equals,call,cluster,state,appliers,throw,new,assertion,error,should,not,be,called,by,a,cluster,state,applier,reason,reason,return,true
ClusterApplierService -> private static boolean assertNotCalledFromClusterStateApplier(String reason);1533230566;asserts that the current stack trace does <b>NOT</b> involve a cluster state applier;private static boolean assertNotCalledFromClusterStateApplier(String reason) {_        if (Thread.currentThread().getName().contains(CLUSTER_UPDATE_THREAD_NAME)) {_            for (StackTraceElement element : Thread.currentThread().getStackTrace()) {_                final String className = element.getClassName()__                final String methodName = element.getMethodName()__                if (className.equals(ClusterStateObserver.class.getName())) {_                    _                    return true__                } else if (className.equals(ClusterApplierService.class.getName())_                    && methodName.equals("callClusterStateAppliers")) {_                    throw new AssertionError("should not be called by a cluster state applier. reason [" + reason + "]")__                }_            }_        }_        return true__    };asserts,that,the,current,stack,trace,does,b,not,b,involve,a,cluster,state,applier;private,static,boolean,assert,not,called,from,cluster,state,applier,string,reason,if,thread,current,thread,get,name,contains,for,stack,trace,element,element,thread,current,thread,get,stack,trace,final,string,class,name,element,get,class,name,final,string,method,name,element,get,method,name,if,class,name,equals,cluster,state,observer,class,get,name,return,true,else,if,class,name,equals,cluster,applier,service,class,get,name,method,name,equals,call,cluster,state,appliers,throw,new,assertion,error,should,not,be,called,by,a,cluster,state,applier,reason,reason,return,true
ClusterApplierService -> private static boolean assertNotCalledFromClusterStateApplier(String reason);1536177418;asserts that the current stack trace does <b>NOT</b> involve a cluster state applier;private static boolean assertNotCalledFromClusterStateApplier(String reason) {_        if (Thread.currentThread().getName().contains(CLUSTER_UPDATE_THREAD_NAME)) {_            for (StackTraceElement element : Thread.currentThread().getStackTrace()) {_                final String className = element.getClassName()__                final String methodName = element.getMethodName()__                if (className.equals(ClusterStateObserver.class.getName())) {_                    _                    return true__                } else if (className.equals(ClusterApplierService.class.getName())_                    && methodName.equals("callClusterStateAppliers")) {_                    throw new AssertionError("should not be called by a cluster state applier. reason [" + reason + "]")__                }_            }_        }_        return true__    };asserts,that,the,current,stack,trace,does,b,not,b,involve,a,cluster,state,applier;private,static,boolean,assert,not,called,from,cluster,state,applier,string,reason,if,thread,current,thread,get,name,contains,for,stack,trace,element,element,thread,current,thread,get,stack,trace,final,string,class,name,element,get,class,name,final,string,method,name,element,get,method,name,if,class,name,equals,cluster,state,observer,class,get,name,return,true,else,if,class,name,equals,cluster,applier,service,class,get,name,method,name,equals,call,cluster,state,appliers,throw,new,assertion,error,should,not,be,called,by,a,cluster,state,applier,reason,reason,return,true
ClusterApplierService -> private static boolean assertNotCalledFromClusterStateApplier(String reason);1540847035;asserts that the current stack trace does <b>NOT</b> involve a cluster state applier;private static boolean assertNotCalledFromClusterStateApplier(String reason) {_        if (Thread.currentThread().getName().contains(CLUSTER_UPDATE_THREAD_NAME)) {_            for (StackTraceElement element : Thread.currentThread().getStackTrace()) {_                final String className = element.getClassName()__                final String methodName = element.getMethodName()__                if (className.equals(ClusterStateObserver.class.getName())) {_                    _                    return true__                } else if (className.equals(ClusterApplierService.class.getName())_                    && methodName.equals("callClusterStateAppliers")) {_                    throw new AssertionError("should not be called by a cluster state applier. reason [" + reason + "]")__                }_            }_        }_        return true__    };asserts,that,the,current,stack,trace,does,b,not,b,involve,a,cluster,state,applier;private,static,boolean,assert,not,called,from,cluster,state,applier,string,reason,if,thread,current,thread,get,name,contains,for,stack,trace,element,element,thread,current,thread,get,stack,trace,final,string,class,name,element,get,class,name,final,string,method,name,element,get,method,name,if,class,name,equals,cluster,state,observer,class,get,name,return,true,else,if,class,name,equals,cluster,applier,service,class,get,name,method,name,equals,call,cluster,state,appliers,throw,new,assertion,error,should,not,be,called,by,a,cluster,state,applier,reason,reason,return,true
ClusterApplierService -> private static boolean assertNotCalledFromClusterStateApplier(String reason);1541008027;asserts that the current stack trace does <b>NOT</b> involve a cluster state applier;private static boolean assertNotCalledFromClusterStateApplier(String reason) {_        if (Thread.currentThread().getName().contains(CLUSTER_UPDATE_THREAD_NAME)) {_            for (StackTraceElement element : Thread.currentThread().getStackTrace()) {_                final String className = element.getClassName()__                final String methodName = element.getMethodName()__                if (className.equals(ClusterStateObserver.class.getName())) {_                    _                    return true__                } else if (className.equals(ClusterApplierService.class.getName())_                    && methodName.equals("callClusterStateAppliers")) {_                    throw new AssertionError("should not be called by a cluster state applier. reason [" + reason + "]")__                }_            }_        }_        return true__    };asserts,that,the,current,stack,trace,does,b,not,b,involve,a,cluster,state,applier;private,static,boolean,assert,not,called,from,cluster,state,applier,string,reason,if,thread,current,thread,get,name,contains,for,stack,trace,element,element,thread,current,thread,get,stack,trace,final,string,class,name,element,get,class,name,final,string,method,name,element,get,method,name,if,class,name,equals,cluster,state,observer,class,get,name,return,true,else,if,class,name,equals,cluster,applier,service,class,get,name,method,name,equals,call,cluster,state,appliers,throw,new,assertion,error,should,not,be,called,by,a,cluster,state,applier,reason,reason,return,true
ClusterApplierService -> private static boolean assertNotCalledFromClusterStateApplier(String reason);1542646292;asserts that the current stack trace does <b>NOT</b> involve a cluster state applier;private static boolean assertNotCalledFromClusterStateApplier(String reason) {_        if (Thread.currentThread().getName().contains(CLUSTER_UPDATE_THREAD_NAME)) {_            for (StackTraceElement element : Thread.currentThread().getStackTrace()) {_                final String className = element.getClassName()__                final String methodName = element.getMethodName()__                if (className.equals(ClusterStateObserver.class.getName())) {_                    _                    return true__                } else if (className.equals(ClusterApplierService.class.getName())_                    && methodName.equals("callClusterStateAppliers")) {_                    throw new AssertionError("should not be called by a cluster state applier. reason [" + reason + "]")__                }_            }_        }_        return true__    };asserts,that,the,current,stack,trace,does,b,not,b,involve,a,cluster,state,applier;private,static,boolean,assert,not,called,from,cluster,state,applier,string,reason,if,thread,current,thread,get,name,contains,for,stack,trace,element,element,thread,current,thread,get,stack,trace,final,string,class,name,element,get,class,name,final,string,method,name,element,get,method,name,if,class,name,equals,cluster,state,observer,class,get,name,return,true,else,if,class,name,equals,cluster,applier,service,class,get,name,method,name,equals,call,cluster,state,appliers,throw,new,assertion,error,should,not,be,called,by,a,cluster,state,applier,reason,reason,return,true
ClusterApplierService -> private static boolean assertNotCalledFromClusterStateApplier(String reason);1545319912;asserts that the current stack trace does <b>NOT</b> involve a cluster state applier;private static boolean assertNotCalledFromClusterStateApplier(String reason) {_        if (Thread.currentThread().getName().contains(CLUSTER_UPDATE_THREAD_NAME)) {_            for (StackTraceElement element : Thread.currentThread().getStackTrace()) {_                final String className = element.getClassName()__                final String methodName = element.getMethodName()__                if (className.equals(ClusterStateObserver.class.getName())) {_                    _                    return true__                } else if (className.equals(ClusterApplierService.class.getName())_                    && methodName.equals("callClusterStateAppliers")) {_                    throw new AssertionError("should not be called by a cluster state applier. reason [" + reason + "]")__                }_            }_        }_        return true__    };asserts,that,the,current,stack,trace,does,b,not,b,involve,a,cluster,state,applier;private,static,boolean,assert,not,called,from,cluster,state,applier,string,reason,if,thread,current,thread,get,name,contains,for,stack,trace,element,element,thread,current,thread,get,stack,trace,final,string,class,name,element,get,class,name,final,string,method,name,element,get,method,name,if,class,name,equals,cluster,state,observer,class,get,name,return,true,else,if,class,name,equals,cluster,applier,service,class,get,name,method,name,equals,call,cluster,state,appliers,throw,new,assertion,error,should,not,be,called,by,a,cluster,state,applier,reason,reason,return,true
ClusterApplierService -> private static boolean assertNotCalledFromClusterStateApplier(String reason);1547049229;asserts that the current stack trace does <b>NOT</b> involve a cluster state applier;private static boolean assertNotCalledFromClusterStateApplier(String reason) {_        if (Thread.currentThread().getName().contains(CLUSTER_UPDATE_THREAD_NAME)) {_            for (StackTraceElement element : Thread.currentThread().getStackTrace()) {_                final String className = element.getClassName()__                final String methodName = element.getMethodName()__                if (className.equals(ClusterStateObserver.class.getName())) {_                    _                    return true__                } else if (className.equals(ClusterApplierService.class.getName())_                    && methodName.equals("callClusterStateAppliers")) {_                    throw new AssertionError("should not be called by a cluster state applier. reason [" + reason + "]")__                }_            }_        }_        return true__    };asserts,that,the,current,stack,trace,does,b,not,b,involve,a,cluster,state,applier;private,static,boolean,assert,not,called,from,cluster,state,applier,string,reason,if,thread,current,thread,get,name,contains,for,stack,trace,element,element,thread,current,thread,get,stack,trace,final,string,class,name,element,get,class,name,final,string,method,name,element,get,method,name,if,class,name,equals,cluster,state,observer,class,get,name,return,true,else,if,class,name,equals,cluster,applier,service,class,get,name,method,name,equals,call,cluster,state,appliers,throw,new,assertion,error,should,not,be,called,by,a,cluster,state,applier,reason,reason,return,true
ClusterApplierService -> private static boolean assertNotCalledFromClusterStateApplier(String reason);1547625930;asserts that the current stack trace does <b>NOT</b> involve a cluster state applier;private static boolean assertNotCalledFromClusterStateApplier(String reason) {_        if (Thread.currentThread().getName().contains(CLUSTER_UPDATE_THREAD_NAME)) {_            for (StackTraceElement element : Thread.currentThread().getStackTrace()) {_                final String className = element.getClassName()__                final String methodName = element.getMethodName()__                if (className.equals(ClusterStateObserver.class.getName())) {_                    _                    return true__                } else if (className.equals(ClusterApplierService.class.getName())_                    && methodName.equals("callClusterStateAppliers")) {_                    throw new AssertionError("should not be called by a cluster state applier. reason [" + reason + "]")__                }_            }_        }_        return true__    };asserts,that,the,current,stack,trace,does,b,not,b,involve,a,cluster,state,applier;private,static,boolean,assert,not,called,from,cluster,state,applier,string,reason,if,thread,current,thread,get,name,contains,for,stack,trace,element,element,thread,current,thread,get,stack,trace,final,string,class,name,element,get,class,name,final,string,method,name,element,get,method,name,if,class,name,equals,cluster,state,observer,class,get,name,return,true,else,if,class,name,equals,cluster,applier,service,class,get,name,method,name,equals,call,cluster,state,appliers,throw,new,assertion,error,should,not,be,called,by,a,cluster,state,applier,reason,reason,return,true
ClusterApplierService -> private static boolean assertNotCalledFromClusterStateApplier(String reason);1548335343;asserts that the current stack trace does <b>NOT</b> involve a cluster state applier;private static boolean assertNotCalledFromClusterStateApplier(String reason) {_        if (Thread.currentThread().getName().contains(CLUSTER_UPDATE_THREAD_NAME)) {_            for (StackTraceElement element : Thread.currentThread().getStackTrace()) {_                final String className = element.getClassName()__                final String methodName = element.getMethodName()__                if (className.equals(ClusterStateObserver.class.getName())) {_                    _                    return true__                } else if (className.equals(ClusterApplierService.class.getName())_                    && methodName.equals("callClusterStateAppliers")) {_                    throw new AssertionError("should not be called by a cluster state applier. reason [" + reason + "]")__                }_            }_        }_        return true__    };asserts,that,the,current,stack,trace,does,b,not,b,involve,a,cluster,state,applier;private,static,boolean,assert,not,called,from,cluster,state,applier,string,reason,if,thread,current,thread,get,name,contains,for,stack,trace,element,element,thread,current,thread,get,stack,trace,final,string,class,name,element,get,class,name,final,string,method,name,element,get,method,name,if,class,name,equals,cluster,state,observer,class,get,name,return,true,else,if,class,name,equals,cluster,applier,service,class,get,name,method,name,equals,call,cluster,state,appliers,throw,new,assertion,error,should,not,be,called,by,a,cluster,state,applier,reason,reason,return,true
ClusterApplierService -> private static boolean assertNotCalledFromClusterStateApplier(String reason);1548953505;asserts that the current stack trace does <b>NOT</b> involve a cluster state applier;private static boolean assertNotCalledFromClusterStateApplier(String reason) {_        if (Thread.currentThread().getName().contains(CLUSTER_UPDATE_THREAD_NAME)) {_            for (StackTraceElement element : Thread.currentThread().getStackTrace()) {_                final String className = element.getClassName()__                final String methodName = element.getMethodName()__                if (className.equals(ClusterStateObserver.class.getName())) {_                    _                    return true__                } else if (className.equals(ClusterApplierService.class.getName())_                    && methodName.equals("callClusterStateAppliers")) {_                    throw new AssertionError("should not be called by a cluster state applier. reason [" + reason + "]")__                }_            }_        }_        return true__    };asserts,that,the,current,stack,trace,does,b,not,b,involve,a,cluster,state,applier;private,static,boolean,assert,not,called,from,cluster,state,applier,string,reason,if,thread,current,thread,get,name,contains,for,stack,trace,element,element,thread,current,thread,get,stack,trace,final,string,class,name,element,get,class,name,final,string,method,name,element,get,method,name,if,class,name,equals,cluster,state,observer,class,get,name,return,true,else,if,class,name,equals,cluster,applier,service,class,get,name,method,name,equals,call,cluster,state,appliers,throw,new,assertion,error,should,not,be,called,by,a,cluster,state,applier,reason,reason,return,true
ClusterApplierService -> private static boolean assertNotCalledFromClusterStateApplier(String reason);1549302240;asserts that the current stack trace does <b>NOT</b> involve a cluster state applier;private static boolean assertNotCalledFromClusterStateApplier(String reason) {_        if (Thread.currentThread().getName().contains(CLUSTER_UPDATE_THREAD_NAME)) {_            for (StackTraceElement element : Thread.currentThread().getStackTrace()) {_                final String className = element.getClassName()__                final String methodName = element.getMethodName()__                if (className.equals(ClusterStateObserver.class.getName())) {_                    _                    return true__                } else if (className.equals(ClusterApplierService.class.getName())_                    && methodName.equals("callClusterStateAppliers")) {_                    throw new AssertionError("should not be called by a cluster state applier. reason [" + reason + "]")__                }_            }_        }_        return true__    };asserts,that,the,current,stack,trace,does,b,not,b,involve,a,cluster,state,applier;private,static,boolean,assert,not,called,from,cluster,state,applier,string,reason,if,thread,current,thread,get,name,contains,for,stack,trace,element,element,thread,current,thread,get,stack,trace,final,string,class,name,element,get,class,name,final,string,method,name,element,get,method,name,if,class,name,equals,cluster,state,observer,class,get,name,return,true,else,if,class,name,equals,cluster,applier,service,class,get,name,method,name,equals,call,cluster,state,appliers,throw,new,assertion,error,should,not,be,called,by,a,cluster,state,applier,reason,reason,return,true
ClusterApplierService -> public void removeApplier(ClusterStateApplier applier);1524684173;Removes an applier of updated cluster states.;public void removeApplier(ClusterStateApplier applier) {_        normalPriorityStateAppliers.remove(applier)__        highPriorityStateAppliers.remove(applier)__        lowPriorityStateAppliers.remove(applier)__    };removes,an,applier,of,updated,cluster,states;public,void,remove,applier,cluster,state,applier,applier,normal,priority,state,appliers,remove,applier,high,priority,state,appliers,remove,applier,low,priority,state,appliers,remove,applier
ClusterApplierService -> public void removeApplier(ClusterStateApplier applier);1527152864;Removes an applier of updated cluster states.;public void removeApplier(ClusterStateApplier applier) {_        normalPriorityStateAppliers.remove(applier)__        highPriorityStateAppliers.remove(applier)__        lowPriorityStateAppliers.remove(applier)__    };removes,an,applier,of,updated,cluster,states;public,void,remove,applier,cluster,state,applier,applier,normal,priority,state,appliers,remove,applier,high,priority,state,appliers,remove,applier,low,priority,state,appliers,remove,applier
ClusterApplierService -> public void removeApplier(ClusterStateApplier applier);1533230566;Removes an applier of updated cluster states.;public void removeApplier(ClusterStateApplier applier) {_        normalPriorityStateAppliers.remove(applier)__        highPriorityStateAppliers.remove(applier)__        lowPriorityStateAppliers.remove(applier)__    };removes,an,applier,of,updated,cluster,states;public,void,remove,applier,cluster,state,applier,applier,normal,priority,state,appliers,remove,applier,high,priority,state,appliers,remove,applier,low,priority,state,appliers,remove,applier
ClusterApplierService -> public void removeApplier(ClusterStateApplier applier);1536177418;Removes an applier of updated cluster states.;public void removeApplier(ClusterStateApplier applier) {_        normalPriorityStateAppliers.remove(applier)__        highPriorityStateAppliers.remove(applier)__        lowPriorityStateAppliers.remove(applier)__    };removes,an,applier,of,updated,cluster,states;public,void,remove,applier,cluster,state,applier,applier,normal,priority,state,appliers,remove,applier,high,priority,state,appliers,remove,applier,low,priority,state,appliers,remove,applier
ClusterApplierService -> public void removeApplier(ClusterStateApplier applier);1540847035;Removes an applier of updated cluster states.;public void removeApplier(ClusterStateApplier applier) {_        normalPriorityStateAppliers.remove(applier)__        highPriorityStateAppliers.remove(applier)__        lowPriorityStateAppliers.remove(applier)__    };removes,an,applier,of,updated,cluster,states;public,void,remove,applier,cluster,state,applier,applier,normal,priority,state,appliers,remove,applier,high,priority,state,appliers,remove,applier,low,priority,state,appliers,remove,applier
ClusterApplierService -> public void removeApplier(ClusterStateApplier applier);1541008027;Removes an applier of updated cluster states.;public void removeApplier(ClusterStateApplier applier) {_        normalPriorityStateAppliers.remove(applier)__        highPriorityStateAppliers.remove(applier)__        lowPriorityStateAppliers.remove(applier)__    };removes,an,applier,of,updated,cluster,states;public,void,remove,applier,cluster,state,applier,applier,normal,priority,state,appliers,remove,applier,high,priority,state,appliers,remove,applier,low,priority,state,appliers,remove,applier
ClusterApplierService -> public void removeApplier(ClusterStateApplier applier);1542646292;Removes an applier of updated cluster states.;public void removeApplier(ClusterStateApplier applier) {_        normalPriorityStateAppliers.remove(applier)__        highPriorityStateAppliers.remove(applier)__        lowPriorityStateAppliers.remove(applier)__    };removes,an,applier,of,updated,cluster,states;public,void,remove,applier,cluster,state,applier,applier,normal,priority,state,appliers,remove,applier,high,priority,state,appliers,remove,applier,low,priority,state,appliers,remove,applier
ClusterApplierService -> public void removeApplier(ClusterStateApplier applier);1545319912;Removes an applier of updated cluster states.;public void removeApplier(ClusterStateApplier applier) {_        normalPriorityStateAppliers.remove(applier)__        highPriorityStateAppliers.remove(applier)__        lowPriorityStateAppliers.remove(applier)__    };removes,an,applier,of,updated,cluster,states;public,void,remove,applier,cluster,state,applier,applier,normal,priority,state,appliers,remove,applier,high,priority,state,appliers,remove,applier,low,priority,state,appliers,remove,applier
ClusterApplierService -> public void removeApplier(ClusterStateApplier applier);1547049229;Removes an applier of updated cluster states.;public void removeApplier(ClusterStateApplier applier) {_        normalPriorityStateAppliers.remove(applier)__        highPriorityStateAppliers.remove(applier)__        lowPriorityStateAppliers.remove(applier)__    };removes,an,applier,of,updated,cluster,states;public,void,remove,applier,cluster,state,applier,applier,normal,priority,state,appliers,remove,applier,high,priority,state,appliers,remove,applier,low,priority,state,appliers,remove,applier
ClusterApplierService -> public void removeApplier(ClusterStateApplier applier);1547625930;Removes an applier of updated cluster states.;public void removeApplier(ClusterStateApplier applier) {_        normalPriorityStateAppliers.remove(applier)__        highPriorityStateAppliers.remove(applier)__        lowPriorityStateAppliers.remove(applier)__    };removes,an,applier,of,updated,cluster,states;public,void,remove,applier,cluster,state,applier,applier,normal,priority,state,appliers,remove,applier,high,priority,state,appliers,remove,applier,low,priority,state,appliers,remove,applier
ClusterApplierService -> public void removeApplier(ClusterStateApplier applier);1548335343;Removes an applier of updated cluster states.;public void removeApplier(ClusterStateApplier applier) {_        normalPriorityStateAppliers.remove(applier)__        highPriorityStateAppliers.remove(applier)__        lowPriorityStateAppliers.remove(applier)__    };removes,an,applier,of,updated,cluster,states;public,void,remove,applier,cluster,state,applier,applier,normal,priority,state,appliers,remove,applier,high,priority,state,appliers,remove,applier,low,priority,state,appliers,remove,applier
ClusterApplierService -> public void removeApplier(ClusterStateApplier applier);1548953505;Removes an applier of updated cluster states.;public void removeApplier(ClusterStateApplier applier) {_        normalPriorityStateAppliers.remove(applier)__        highPriorityStateAppliers.remove(applier)__        lowPriorityStateAppliers.remove(applier)__    };removes,an,applier,of,updated,cluster,states;public,void,remove,applier,cluster,state,applier,applier,normal,priority,state,appliers,remove,applier,high,priority,state,appliers,remove,applier,low,priority,state,appliers,remove,applier
ClusterApplierService -> public void removeApplier(ClusterStateApplier applier);1549302240;Removes an applier of updated cluster states.;public void removeApplier(ClusterStateApplier applier) {_        normalPriorityStateAppliers.remove(applier)__        highPriorityStateAppliers.remove(applier)__        lowPriorityStateAppliers.remove(applier)__    };removes,an,applier,of,updated,cluster,states;public,void,remove,applier,cluster,state,applier,applier,normal,priority,state,appliers,remove,applier,high,priority,state,appliers,remove,applier,low,priority,state,appliers,remove,applier
ClusterApplierService -> public static boolean assertNotClusterStateUpdateThread(String reason);1524684173;asserts that the current thread is <b>NOT</b> the cluster state update thread;public static boolean assertNotClusterStateUpdateThread(String reason) {_        assert Thread.currentThread().getName().contains(CLUSTER_UPDATE_THREAD_NAME) == false :_            "Expected current thread [" + Thread.currentThread() + "] to not be the cluster state update thread. Reason: [" + reason + "]"__        return true__    };asserts,that,the,current,thread,is,b,not,b,the,cluster,state,update,thread;public,static,boolean,assert,not,cluster,state,update,thread,string,reason,assert,thread,current,thread,get,name,contains,false,expected,current,thread,thread,current,thread,to,not,be,the,cluster,state,update,thread,reason,reason,return,true
ClusterApplierService -> public static boolean assertNotClusterStateUpdateThread(String reason);1527152864;asserts that the current thread is <b>NOT</b> the cluster state update thread;public static boolean assertNotClusterStateUpdateThread(String reason) {_        assert Thread.currentThread().getName().contains(CLUSTER_UPDATE_THREAD_NAME) == false :_            "Expected current thread [" + Thread.currentThread() + "] to not be the cluster state update thread. Reason: [" + reason + "]"__        return true__    };asserts,that,the,current,thread,is,b,not,b,the,cluster,state,update,thread;public,static,boolean,assert,not,cluster,state,update,thread,string,reason,assert,thread,current,thread,get,name,contains,false,expected,current,thread,thread,current,thread,to,not,be,the,cluster,state,update,thread,reason,reason,return,true
ClusterApplierService -> public static boolean assertNotClusterStateUpdateThread(String reason);1533230566;asserts that the current thread is <b>NOT</b> the cluster state update thread;public static boolean assertNotClusterStateUpdateThread(String reason) {_        assert Thread.currentThread().getName().contains(CLUSTER_UPDATE_THREAD_NAME) == false :_            "Expected current thread [" + Thread.currentThread() + "] to not be the cluster state update thread. Reason: [" + reason + "]"__        return true__    };asserts,that,the,current,thread,is,b,not,b,the,cluster,state,update,thread;public,static,boolean,assert,not,cluster,state,update,thread,string,reason,assert,thread,current,thread,get,name,contains,false,expected,current,thread,thread,current,thread,to,not,be,the,cluster,state,update,thread,reason,reason,return,true
ClusterApplierService -> public static boolean assertNotClusterStateUpdateThread(String reason);1536177418;asserts that the current thread is <b>NOT</b> the cluster state update thread;public static boolean assertNotClusterStateUpdateThread(String reason) {_        assert Thread.currentThread().getName().contains(CLUSTER_UPDATE_THREAD_NAME) == false :_            "Expected current thread [" + Thread.currentThread() + "] to not be the cluster state update thread. Reason: [" + reason + "]"__        return true__    };asserts,that,the,current,thread,is,b,not,b,the,cluster,state,update,thread;public,static,boolean,assert,not,cluster,state,update,thread,string,reason,assert,thread,current,thread,get,name,contains,false,expected,current,thread,thread,current,thread,to,not,be,the,cluster,state,update,thread,reason,reason,return,true
ClusterApplierService -> public static boolean assertNotClusterStateUpdateThread(String reason);1540847035;asserts that the current thread is <b>NOT</b> the cluster state update thread;public static boolean assertNotClusterStateUpdateThread(String reason) {_        assert Thread.currentThread().getName().contains(CLUSTER_UPDATE_THREAD_NAME) == false :_            "Expected current thread [" + Thread.currentThread() + "] to not be the cluster state update thread. Reason: [" + reason + "]"__        return true__    };asserts,that,the,current,thread,is,b,not,b,the,cluster,state,update,thread;public,static,boolean,assert,not,cluster,state,update,thread,string,reason,assert,thread,current,thread,get,name,contains,false,expected,current,thread,thread,current,thread,to,not,be,the,cluster,state,update,thread,reason,reason,return,true
ClusterApplierService -> public static boolean assertNotClusterStateUpdateThread(String reason);1541008027;asserts that the current thread is <b>NOT</b> the cluster state update thread;public static boolean assertNotClusterStateUpdateThread(String reason) {_        assert Thread.currentThread().getName().contains(CLUSTER_UPDATE_THREAD_NAME) == false :_            "Expected current thread [" + Thread.currentThread() + "] to not be the cluster state update thread. Reason: [" + reason + "]"__        return true__    };asserts,that,the,current,thread,is,b,not,b,the,cluster,state,update,thread;public,static,boolean,assert,not,cluster,state,update,thread,string,reason,assert,thread,current,thread,get,name,contains,false,expected,current,thread,thread,current,thread,to,not,be,the,cluster,state,update,thread,reason,reason,return,true
ClusterApplierService -> public static boolean assertNotClusterStateUpdateThread(String reason);1542646292;asserts that the current thread is <b>NOT</b> the cluster state update thread;public static boolean assertNotClusterStateUpdateThread(String reason) {_        assert Thread.currentThread().getName().contains(CLUSTER_UPDATE_THREAD_NAME) == false :_            "Expected current thread [" + Thread.currentThread() + "] to not be the cluster state update thread. Reason: [" + reason + "]"__        return true__    };asserts,that,the,current,thread,is,b,not,b,the,cluster,state,update,thread;public,static,boolean,assert,not,cluster,state,update,thread,string,reason,assert,thread,current,thread,get,name,contains,false,expected,current,thread,thread,current,thread,to,not,be,the,cluster,state,update,thread,reason,reason,return,true
ClusterApplierService -> public static boolean assertNotClusterStateUpdateThread(String reason);1545319912;asserts that the current thread is <b>NOT</b> the cluster state update thread;public static boolean assertNotClusterStateUpdateThread(String reason) {_        assert Thread.currentThread().getName().contains(CLUSTER_UPDATE_THREAD_NAME) == false :_            "Expected current thread [" + Thread.currentThread() + "] to not be the cluster state update thread. Reason: [" + reason + "]"__        return true__    };asserts,that,the,current,thread,is,b,not,b,the,cluster,state,update,thread;public,static,boolean,assert,not,cluster,state,update,thread,string,reason,assert,thread,current,thread,get,name,contains,false,expected,current,thread,thread,current,thread,to,not,be,the,cluster,state,update,thread,reason,reason,return,true
ClusterApplierService -> public static boolean assertNotClusterStateUpdateThread(String reason);1547049229;asserts that the current thread is <b>NOT</b> the cluster state update thread;public static boolean assertNotClusterStateUpdateThread(String reason) {_        assert Thread.currentThread().getName().contains(CLUSTER_UPDATE_THREAD_NAME) == false :_            "Expected current thread [" + Thread.currentThread() + "] to not be the cluster state update thread. Reason: [" + reason + "]"__        return true__    };asserts,that,the,current,thread,is,b,not,b,the,cluster,state,update,thread;public,static,boolean,assert,not,cluster,state,update,thread,string,reason,assert,thread,current,thread,get,name,contains,false,expected,current,thread,thread,current,thread,to,not,be,the,cluster,state,update,thread,reason,reason,return,true
ClusterApplierService -> public static boolean assertNotClusterStateUpdateThread(String reason);1547625930;asserts that the current thread is <b>NOT</b> the cluster state update thread;public static boolean assertNotClusterStateUpdateThread(String reason) {_        assert Thread.currentThread().getName().contains(CLUSTER_UPDATE_THREAD_NAME) == false :_            "Expected current thread [" + Thread.currentThread() + "] to not be the cluster state update thread. Reason: [" + reason + "]"__        return true__    };asserts,that,the,current,thread,is,b,not,b,the,cluster,state,update,thread;public,static,boolean,assert,not,cluster,state,update,thread,string,reason,assert,thread,current,thread,get,name,contains,false,expected,current,thread,thread,current,thread,to,not,be,the,cluster,state,update,thread,reason,reason,return,true
ClusterApplierService -> public static boolean assertNotClusterStateUpdateThread(String reason);1548335343;asserts that the current thread is <b>NOT</b> the cluster state update thread;public static boolean assertNotClusterStateUpdateThread(String reason) {_        assert Thread.currentThread().getName().contains(CLUSTER_UPDATE_THREAD_NAME) == false :_            "Expected current thread [" + Thread.currentThread() + "] to not be the cluster state update thread. Reason: [" + reason + "]"__        return true__    };asserts,that,the,current,thread,is,b,not,b,the,cluster,state,update,thread;public,static,boolean,assert,not,cluster,state,update,thread,string,reason,assert,thread,current,thread,get,name,contains,false,expected,current,thread,thread,current,thread,to,not,be,the,cluster,state,update,thread,reason,reason,return,true
ClusterApplierService -> public static boolean assertNotClusterStateUpdateThread(String reason);1548953505;asserts that the current thread is <b>NOT</b> the cluster state update thread;public static boolean assertNotClusterStateUpdateThread(String reason) {_        assert Thread.currentThread().getName().contains(CLUSTER_UPDATE_THREAD_NAME) == false :_            "Expected current thread [" + Thread.currentThread() + "] to not be the cluster state update thread. Reason: [" + reason + "]"__        return true__    };asserts,that,the,current,thread,is,b,not,b,the,cluster,state,update,thread;public,static,boolean,assert,not,cluster,state,update,thread,string,reason,assert,thread,current,thread,get,name,contains,false,expected,current,thread,thread,current,thread,to,not,be,the,cluster,state,update,thread,reason,reason,return,true
ClusterApplierService -> public static boolean assertNotClusterStateUpdateThread(String reason);1549302240;asserts that the current thread is <b>NOT</b> the cluster state update thread;public static boolean assertNotClusterStateUpdateThread(String reason) {_        assert Thread.currentThread().getName().contains(CLUSTER_UPDATE_THREAD_NAME) == false :_            "Expected current thread [" + Thread.currentThread() + "] to not be the cluster state update thread. Reason: [" + reason + "]"__        return true__    };asserts,that,the,current,thread,is,b,not,b,the,cluster,state,update,thread;public,static,boolean,assert,not,cluster,state,update,thread,string,reason,assert,thread,current,thread,get,name,contains,false,expected,current,thread,thread,current,thread,to,not,be,the,cluster,state,update,thread,reason,reason,return,true
ClusterApplierService -> public void addHighPriorityApplier(ClusterStateApplier applier);1524684173;Adds a high priority applier of updated cluster states.;public void addHighPriorityApplier(ClusterStateApplier applier) {_        highPriorityStateAppliers.add(applier)__    };adds,a,high,priority,applier,of,updated,cluster,states;public,void,add,high,priority,applier,cluster,state,applier,applier,high,priority,state,appliers,add,applier
ClusterApplierService -> public void addHighPriorityApplier(ClusterStateApplier applier);1527152864;Adds a high priority applier of updated cluster states.;public void addHighPriorityApplier(ClusterStateApplier applier) {_        highPriorityStateAppliers.add(applier)__    };adds,a,high,priority,applier,of,updated,cluster,states;public,void,add,high,priority,applier,cluster,state,applier,applier,high,priority,state,appliers,add,applier
ClusterApplierService -> public void addHighPriorityApplier(ClusterStateApplier applier);1533230566;Adds a high priority applier of updated cluster states.;public void addHighPriorityApplier(ClusterStateApplier applier) {_        highPriorityStateAppliers.add(applier)__    };adds,a,high,priority,applier,of,updated,cluster,states;public,void,add,high,priority,applier,cluster,state,applier,applier,high,priority,state,appliers,add,applier
ClusterApplierService -> public void addHighPriorityApplier(ClusterStateApplier applier);1536177418;Adds a high priority applier of updated cluster states.;public void addHighPriorityApplier(ClusterStateApplier applier) {_        highPriorityStateAppliers.add(applier)__    };adds,a,high,priority,applier,of,updated,cluster,states;public,void,add,high,priority,applier,cluster,state,applier,applier,high,priority,state,appliers,add,applier
ClusterApplierService -> public void addHighPriorityApplier(ClusterStateApplier applier);1540847035;Adds a high priority applier of updated cluster states.;public void addHighPriorityApplier(ClusterStateApplier applier) {_        highPriorityStateAppliers.add(applier)__    };adds,a,high,priority,applier,of,updated,cluster,states;public,void,add,high,priority,applier,cluster,state,applier,applier,high,priority,state,appliers,add,applier
ClusterApplierService -> public void addHighPriorityApplier(ClusterStateApplier applier);1541008027;Adds a high priority applier of updated cluster states.;public void addHighPriorityApplier(ClusterStateApplier applier) {_        highPriorityStateAppliers.add(applier)__    };adds,a,high,priority,applier,of,updated,cluster,states;public,void,add,high,priority,applier,cluster,state,applier,applier,high,priority,state,appliers,add,applier
ClusterApplierService -> public void addHighPriorityApplier(ClusterStateApplier applier);1542646292;Adds a high priority applier of updated cluster states.;public void addHighPriorityApplier(ClusterStateApplier applier) {_        highPriorityStateAppliers.add(applier)__    };adds,a,high,priority,applier,of,updated,cluster,states;public,void,add,high,priority,applier,cluster,state,applier,applier,high,priority,state,appliers,add,applier
ClusterApplierService -> public void addHighPriorityApplier(ClusterStateApplier applier);1545319912;Adds a high priority applier of updated cluster states.;public void addHighPriorityApplier(ClusterStateApplier applier) {_        highPriorityStateAppliers.add(applier)__    };adds,a,high,priority,applier,of,updated,cluster,states;public,void,add,high,priority,applier,cluster,state,applier,applier,high,priority,state,appliers,add,applier
ClusterApplierService -> public void addHighPriorityApplier(ClusterStateApplier applier);1547049229;Adds a high priority applier of updated cluster states.;public void addHighPriorityApplier(ClusterStateApplier applier) {_        highPriorityStateAppliers.add(applier)__    };adds,a,high,priority,applier,of,updated,cluster,states;public,void,add,high,priority,applier,cluster,state,applier,applier,high,priority,state,appliers,add,applier
ClusterApplierService -> public void addHighPriorityApplier(ClusterStateApplier applier);1547625930;Adds a high priority applier of updated cluster states.;public void addHighPriorityApplier(ClusterStateApplier applier) {_        highPriorityStateAppliers.add(applier)__    };adds,a,high,priority,applier,of,updated,cluster,states;public,void,add,high,priority,applier,cluster,state,applier,applier,high,priority,state,appliers,add,applier
ClusterApplierService -> public void addHighPriorityApplier(ClusterStateApplier applier);1548335343;Adds a high priority applier of updated cluster states.;public void addHighPriorityApplier(ClusterStateApplier applier) {_        highPriorityStateAppliers.add(applier)__    };adds,a,high,priority,applier,of,updated,cluster,states;public,void,add,high,priority,applier,cluster,state,applier,applier,high,priority,state,appliers,add,applier
ClusterApplierService -> public void addHighPriorityApplier(ClusterStateApplier applier);1548953505;Adds a high priority applier of updated cluster states.;public void addHighPriorityApplier(ClusterStateApplier applier) {_        highPriorityStateAppliers.add(applier)__    };adds,a,high,priority,applier,of,updated,cluster,states;public,void,add,high,priority,applier,cluster,state,applier,applier,high,priority,state,appliers,add,applier
ClusterApplierService -> public void addHighPriorityApplier(ClusterStateApplier applier);1549302240;Adds a high priority applier of updated cluster states.;public void addHighPriorityApplier(ClusterStateApplier applier) {_        highPriorityStateAppliers.add(applier)__    };adds,a,high,priority,applier,of,updated,cluster,states;public,void,add,high,priority,applier,cluster,state,applier,applier,high,priority,state,appliers,add,applier
ClusterApplierService -> public ClusterState state();1524684173;The current cluster state._Should be renamed to appliedClusterState;public ClusterState state() {_        assert assertNotCalledFromClusterStateApplier("the applied cluster state is not yet available")__        ClusterState clusterState = this.state.get()__        assert clusterState != null : "initial cluster state not set yet"__        return clusterState__    };the,current,cluster,state,should,be,renamed,to,applied,cluster,state;public,cluster,state,state,assert,assert,not,called,from,cluster,state,applier,the,applied,cluster,state,is,not,yet,available,cluster,state,cluster,state,this,state,get,assert,cluster,state,null,initial,cluster,state,not,set,yet,return,cluster,state
ClusterApplierService -> public ClusterState state();1527152864;The current cluster state._Should be renamed to appliedClusterState;public ClusterState state() {_        assert assertNotCalledFromClusterStateApplier("the applied cluster state is not yet available")__        ClusterState clusterState = this.state.get()__        assert clusterState != null : "initial cluster state not set yet"__        return clusterState__    };the,current,cluster,state,should,be,renamed,to,applied,cluster,state;public,cluster,state,state,assert,assert,not,called,from,cluster,state,applier,the,applied,cluster,state,is,not,yet,available,cluster,state,cluster,state,this,state,get,assert,cluster,state,null,initial,cluster,state,not,set,yet,return,cluster,state
ClusterApplierService -> public ClusterState state();1533230566;The current cluster state._Should be renamed to appliedClusterState;public ClusterState state() {_        assert assertNotCalledFromClusterStateApplier("the applied cluster state is not yet available")__        ClusterState clusterState = this.state.get()__        assert clusterState != null : "initial cluster state not set yet"__        return clusterState__    };the,current,cluster,state,should,be,renamed,to,applied,cluster,state;public,cluster,state,state,assert,assert,not,called,from,cluster,state,applier,the,applied,cluster,state,is,not,yet,available,cluster,state,cluster,state,this,state,get,assert,cluster,state,null,initial,cluster,state,not,set,yet,return,cluster,state
ClusterApplierService -> public ClusterState state();1536177418;The current cluster state._Should be renamed to appliedClusterState;public ClusterState state() {_        assert assertNotCalledFromClusterStateApplier("the applied cluster state is not yet available")__        ClusterState clusterState = this.state.get()__        assert clusterState != null : "initial cluster state not set yet"__        return clusterState__    };the,current,cluster,state,should,be,renamed,to,applied,cluster,state;public,cluster,state,state,assert,assert,not,called,from,cluster,state,applier,the,applied,cluster,state,is,not,yet,available,cluster,state,cluster,state,this,state,get,assert,cluster,state,null,initial,cluster,state,not,set,yet,return,cluster,state
ClusterApplierService -> public ClusterState state();1540847035;The current cluster state._Should be renamed to appliedClusterState;public ClusterState state() {_        assert assertNotCalledFromClusterStateApplier("the applied cluster state is not yet available")__        ClusterState clusterState = this.state.get()__        assert clusterState != null : "initial cluster state not set yet"__        return clusterState__    };the,current,cluster,state,should,be,renamed,to,applied,cluster,state;public,cluster,state,state,assert,assert,not,called,from,cluster,state,applier,the,applied,cluster,state,is,not,yet,available,cluster,state,cluster,state,this,state,get,assert,cluster,state,null,initial,cluster,state,not,set,yet,return,cluster,state
ClusterApplierService -> public ClusterState state();1541008027;The current cluster state._Should be renamed to appliedClusterState;public ClusterState state() {_        assert assertNotCalledFromClusterStateApplier("the applied cluster state is not yet available")__        ClusterState clusterState = this.state.get()__        assert clusterState != null : "initial cluster state not set yet"__        return clusterState__    };the,current,cluster,state,should,be,renamed,to,applied,cluster,state;public,cluster,state,state,assert,assert,not,called,from,cluster,state,applier,the,applied,cluster,state,is,not,yet,available,cluster,state,cluster,state,this,state,get,assert,cluster,state,null,initial,cluster,state,not,set,yet,return,cluster,state
ClusterApplierService -> public ClusterState state();1542646292;The current cluster state._Should be renamed to appliedClusterState;public ClusterState state() {_        assert assertNotCalledFromClusterStateApplier("the applied cluster state is not yet available")__        ClusterState clusterState = this.state.get()__        assert clusterState != null : "initial cluster state not set yet"__        return clusterState__    };the,current,cluster,state,should,be,renamed,to,applied,cluster,state;public,cluster,state,state,assert,assert,not,called,from,cluster,state,applier,the,applied,cluster,state,is,not,yet,available,cluster,state,cluster,state,this,state,get,assert,cluster,state,null,initial,cluster,state,not,set,yet,return,cluster,state
ClusterApplierService -> public ClusterState state();1545319912;The current cluster state._Should be renamed to appliedClusterState;public ClusterState state() {_        assert assertNotCalledFromClusterStateApplier("the applied cluster state is not yet available")__        ClusterState clusterState = this.state.get()__        assert clusterState != null : "initial cluster state not set yet"__        return clusterState__    };the,current,cluster,state,should,be,renamed,to,applied,cluster,state;public,cluster,state,state,assert,assert,not,called,from,cluster,state,applier,the,applied,cluster,state,is,not,yet,available,cluster,state,cluster,state,this,state,get,assert,cluster,state,null,initial,cluster,state,not,set,yet,return,cluster,state
ClusterApplierService -> public ClusterState state();1547049229;The current cluster state._Should be renamed to appliedClusterState;public ClusterState state() {_        assert assertNotCalledFromClusterStateApplier("the applied cluster state is not yet available")__        ClusterState clusterState = this.state.get()__        assert clusterState != null : "initial cluster state not set yet"__        return clusterState__    };the,current,cluster,state,should,be,renamed,to,applied,cluster,state;public,cluster,state,state,assert,assert,not,called,from,cluster,state,applier,the,applied,cluster,state,is,not,yet,available,cluster,state,cluster,state,this,state,get,assert,cluster,state,null,initial,cluster,state,not,set,yet,return,cluster,state
ClusterApplierService -> public ClusterState state();1547625930;The current cluster state._Should be renamed to appliedClusterState;public ClusterState state() {_        assert assertNotCalledFromClusterStateApplier("the applied cluster state is not yet available")__        ClusterState clusterState = this.state.get()__        assert clusterState != null : "initial cluster state not set yet"__        return clusterState__    };the,current,cluster,state,should,be,renamed,to,applied,cluster,state;public,cluster,state,state,assert,assert,not,called,from,cluster,state,applier,the,applied,cluster,state,is,not,yet,available,cluster,state,cluster,state,this,state,get,assert,cluster,state,null,initial,cluster,state,not,set,yet,return,cluster,state
ClusterApplierService -> public ClusterState state();1548335343;The current cluster state._Should be renamed to appliedClusterState;public ClusterState state() {_        assert assertNotCalledFromClusterStateApplier("the applied cluster state is not yet available")__        ClusterState clusterState = this.state.get()__        assert clusterState != null : "initial cluster state not set yet"__        return clusterState__    };the,current,cluster,state,should,be,renamed,to,applied,cluster,state;public,cluster,state,state,assert,assert,not,called,from,cluster,state,applier,the,applied,cluster,state,is,not,yet,available,cluster,state,cluster,state,this,state,get,assert,cluster,state,null,initial,cluster,state,not,set,yet,return,cluster,state
ClusterApplierService -> public ClusterState state();1548953505;The current cluster state._Should be renamed to appliedClusterState;public ClusterState state() {_        assert assertNotCalledFromClusterStateApplier("the applied cluster state is not yet available")__        ClusterState clusterState = this.state.get()__        assert clusterState != null : "initial cluster state not set yet"__        return clusterState__    };the,current,cluster,state,should,be,renamed,to,applied,cluster,state;public,cluster,state,state,assert,assert,not,called,from,cluster,state,applier,the,applied,cluster,state,is,not,yet,available,cluster,state,cluster,state,this,state,get,assert,cluster,state,null,initial,cluster,state,not,set,yet,return,cluster,state
ClusterApplierService -> public ClusterState state();1549302240;The current cluster state._Should be renamed to appliedClusterState;public ClusterState state() {_        assert assertNotCalledFromClusterStateApplier("the applied cluster state is not yet available")__        ClusterState clusterState = this.state.get()__        assert clusterState != null : "initial cluster state not set yet"__        return clusterState__    };the,current,cluster,state,should,be,renamed,to,applied,cluster,state;public,cluster,state,state,assert,assert,not,called,from,cluster,state,applier,the,applied,cluster,state,is,not,yet,available,cluster,state,cluster,state,this,state,get,assert,cluster,state,null,initial,cluster,state,not,set,yet,return,cluster,state
ClusterApplierService -> public static boolean assertClusterStateUpdateThread();1524684173;asserts that the current thread is the cluster state update thread;public static boolean assertClusterStateUpdateThread() {_        assert Thread.currentThread().getName().contains(ClusterApplierService.CLUSTER_UPDATE_THREAD_NAME) :_            "not called from the cluster state update thread"__        return true__    };asserts,that,the,current,thread,is,the,cluster,state,update,thread;public,static,boolean,assert,cluster,state,update,thread,assert,thread,current,thread,get,name,contains,cluster,applier,service,not,called,from,the,cluster,state,update,thread,return,true
ClusterApplierService -> public static boolean assertClusterStateUpdateThread();1527152864;asserts that the current thread is the cluster state update thread;public static boolean assertClusterStateUpdateThread() {_        assert Thread.currentThread().getName().contains(ClusterApplierService.CLUSTER_UPDATE_THREAD_NAME) :_            "not called from the cluster state update thread"__        return true__    };asserts,that,the,current,thread,is,the,cluster,state,update,thread;public,static,boolean,assert,cluster,state,update,thread,assert,thread,current,thread,get,name,contains,cluster,applier,service,not,called,from,the,cluster,state,update,thread,return,true
ClusterApplierService -> public static boolean assertClusterStateUpdateThread();1533230566;asserts that the current thread is the cluster state update thread;public static boolean assertClusterStateUpdateThread() {_        assert Thread.currentThread().getName().contains(ClusterApplierService.CLUSTER_UPDATE_THREAD_NAME) :_            "not called from the cluster state update thread"__        return true__    };asserts,that,the,current,thread,is,the,cluster,state,update,thread;public,static,boolean,assert,cluster,state,update,thread,assert,thread,current,thread,get,name,contains,cluster,applier,service,not,called,from,the,cluster,state,update,thread,return,true
