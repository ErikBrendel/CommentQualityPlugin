commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/*      * This logic actually prints the exception to the console, its      * what is invoked by the JVM when we throw the exception from main()      */ ;/*      * This logic actually prints the exception to the console, its      * what is invoked by the JVM when we throw the exception from main()      */ @Override public void printStackTrace(PrintStream s) {     printStackTrace(s::println). }
false;public;1;4;;@Override public void printStackTrace(PrintWriter s) {     printStackTrace(s::println). }
false;private;1;51;;private void printStackTrace(Consumer<String> consumer) {     Throwable originalCause = getCause().     Throwable cause = originalCause.     if (cause instanceof CreationException) {         cause = getFirstGuiceCause((CreationException) cause).     }     String message = cause.toString().     consumer.accept(message).     if (cause != null) {         // walk to the root cause         while (cause.getCause() != null) {             cause = cause.getCause().         }         // print the root cause message, only if it differs!         if (cause != originalCause && (message.equals(cause.toString()) == false)) {             consumer.accept("Likely root cause: " + cause).         }         // print stacktrace of cause         StackTraceElement[] stack = cause.getStackTrace().         int linesWritten = 0.         for (int i = 0. i < stack.length. i++) {             if (linesWritten == STACKTRACE_LIMIT) {                 consumer.accept("\t<<<truncated>>>").                 break.             }             String line = stack[i].toString().             // skip past contiguous runs of this garbage:             if (line.startsWith(GUICE_PACKAGE)) {                 while (i + 1 < stack.length && stack[i + 1].toString().startsWith(GUICE_PACKAGE)) {                     i++.                 }                 consumer.accept("\tat <<<guice>>>").                 linesWritten++.                 continue.             }             consumer.accept("\tat " + line).             linesWritten++.         }     }     // refer to the hack in bootstrap, where we don't log it     if (originalCause instanceof CreationException == false) {         consumer.accept("Refer to the log for complete error details.").     } }
true;static;1;9;/**  * Returns first cause from a guice error (it can have multiple).  */ ;/**  * Returns first cause from a guice error (it can have multiple).  */ static Throwable getFirstGuiceCause(CreationException guice) {     for (Message message : guice.getErrorMessages()) {         Throwable cause = message.getCause().         if (cause != null) {             return cause.         }     }     // we tried     return guice. }
