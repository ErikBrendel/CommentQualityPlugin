commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public long position() throws IOException {     return count. }
false;public;1;6;;@Override public void writeByte(byte b) throws IOException {     ensureCapacity(count + 1L).     bytes.set(count, b).     count++. }
false;public;3;21;;@Override public void writeBytes(byte[] b, int offset, int length) {     // nothing to copy     if (length == 0) {         return.     }     // illegal args: offset and/or length exceed array size     if (b.length < (offset + length)) {         throw new IllegalArgumentException("Illegal offset " + offset + "/length " + length + " for byte[] of length " + b.length).     }     // get enough pages for new size     ensureCapacity(((long) count) + length).     // bulk copy     bytes.set(count, b, offset, length).     // advance     count += length. }
false;public;0;10;;@Override public void reset() {     // shrink list of pages     if (bytes.size() > PageCacheRecycler.PAGE_SIZE_IN_BYTES) {         bytes = bigArrays.resize(bytes, PageCacheRecycler.PAGE_SIZE_IN_BYTES).     }     // go back to start     count = 0. }
false;public;0;4;;@Override public void flush() throws IOException { // nothing to do }
false;public;1;5;;@Override public void seek(long position) {     ensureCapacity(position).     count = (int) position. }
false;public;1;3;;public void skip(int length) {     seek(((long) count) + length). }
false;public;0;4;;@Override public void close() { // empty for now. }
true;public;0;3;/**  * Returns the current size of the buffer.  *  * @return the value of the <code>count</code> field, which is the number of valid  *         bytes in this output stream.  * @see java.io.ByteArrayOutputStream#count  */ ;/**  * Returns the current size of the buffer.  *  * @return the value of the <code>count</code> field, which is the number of valid  *         bytes in this output stream.  * @see java.io.ByteArrayOutputStream#count  */ public int size() {     return count. }
false;public;0;4;;@Override public BytesReference bytes() {     return new PagedBytesReference(bytes, count). }
true;public;0;3;/**  * Returns the number of bytes used by the underlying {@link org.elasticsearch.common.util.ByteArray}  * @see org.elasticsearch.common.util.ByteArray#ramBytesUsed()  */ ;/**  * Returns the number of bytes used by the underlying {@link org.elasticsearch.common.util.ByteArray}  * @see org.elasticsearch.common.util.ByteArray#ramBytesUsed()  */ public long ramBytesUsed() {     return bytes.ramBytesUsed(). }
false;;1;6;;void ensureCapacity(long offset) {     if (offset > Integer.MAX_VALUE) {         throw new IllegalArgumentException(getClass().getSimpleName() + " cannot hold more than 2GB of data").     }     bytes = bigArrays.grow(bytes, offset). }
