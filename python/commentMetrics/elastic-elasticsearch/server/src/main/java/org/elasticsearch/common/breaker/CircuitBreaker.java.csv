commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;12;;public static Type parseValue(String value) {     switch(value.toLowerCase(Locale.ROOT)) {         case "noop":             return Type.NOOP.         case "parent":             return Type.PARENT.         case "memory":             return Type.MEMORY.         default:             throw new IllegalArgumentException("No CircuitBreaker with type: " + value).     } }
true;;2;1;/**  * Trip the circuit breaker  * @param fieldName name of the field responsible for tripping the breaker  * @param bytesNeeded bytes asked for but unable to be allocated  */ ;/**  * Trip the circuit breaker  * @param fieldName name of the field responsible for tripping the breaker  * @param bytesNeeded bytes asked for but unable to be allocated  */ void circuitBreak(String fieldName, long bytesNeeded).
true;;2;1;/**  * add bytes to the breaker and maybe trip  * @param bytes number of bytes to add  * @param label string label describing the bytes being added  * @return the number of "used" bytes for the circuit breaker  */ ;/**  * add bytes to the breaker and maybe trip  * @param bytes number of bytes to add  * @param label string label describing the bytes being added  * @return the number of "used" bytes for the circuit breaker  */ double addEstimateBytesAndMaybeBreak(long bytes, String label) throws CircuitBreakingException.
true;;1;1;/**  * Adjust the circuit breaker without tripping  */ ;/**  * Adjust the circuit breaker without tripping  */ long addWithoutBreaking(long bytes).
true;;0;1;/**  * @return the currently used bytes the breaker is tracking  */ ;/**  * @return the currently used bytes the breaker is tracking  */ long getUsed().
true;;0;1;/**  * @return maximum number of bytes the circuit breaker can track before tripping  */ ;/**  * @return maximum number of bytes the circuit breaker can track before tripping  */ long getLimit().
true;;0;1;/**  * @return overhead of circuit breaker  */ ;/**  * @return overhead of circuit breaker  */ double getOverhead().
true;;0;1;/**  * @return the number of times the circuit breaker has been tripped  */ ;/**  * @return the number of times the circuit breaker has been tripped  */ long getTrippedCount().
true;;0;1;/**  * @return the name of the breaker  */ ;/**  * @return the name of the breaker  */ String getName().
true;;0;1;/**  * @return whether a tripped circuit breaker will reset itself (transient) or requires manual intervention (permanent).  */ ;/**  * @return whether a tripped circuit breaker will reset itself (transient) or requires manual intervention (permanent).  */ Durability getDurability().
