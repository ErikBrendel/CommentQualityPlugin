# id;timestamp;commentText;codeText;commentWords;codeWords
ZenDiscovery -> JoinThreadControl -> public void markThreadAsDoneAndStartNew(Thread joinThread);1524684173;marks the given joinThread as completed and makes sure another thread is running (starting one if needed)_If the given thread is not the currently running join thread, the command is ignored.;public void markThreadAsDoneAndStartNew(Thread joinThread) {_            assert Thread.holdsLock(stateMutex)__            if (!markThreadAsDone(joinThread)) {_                return__            }_            startNewThreadIfNotRunning()__        };marks,the,given,join,thread,as,completed,and,makes,sure,another,thread,is,running,starting,one,if,needed,if,the,given,thread,is,not,the,currently,running,join,thread,the,command,is,ignored;public,void,mark,thread,as,done,and,start,new,thread,join,thread,assert,thread,holds,lock,state,mutex,if,mark,thread,as,done,join,thread,return,start,new,thread,if,not,running
ZenDiscovery -> JoinThreadControl -> public void markThreadAsDoneAndStartNew(Thread joinThread);1525798022;marks the given joinThread as completed and makes sure another thread is running (starting one if needed)_If the given thread is not the currently running join thread, the command is ignored.;public void markThreadAsDoneAndStartNew(Thread joinThread) {_            assert Thread.holdsLock(stateMutex)__            if (!markThreadAsDone(joinThread)) {_                return__            }_            startNewThreadIfNotRunning()__        };marks,the,given,join,thread,as,completed,and,makes,sure,another,thread,is,running,starting,one,if,needed,if,the,given,thread,is,not,the,currently,running,join,thread,the,command,is,ignored;public,void,mark,thread,as,done,and,start,new,thread,join,thread,assert,thread,holds,lock,state,mutex,if,mark,thread,as,done,join,thread,return,start,new,thread,if,not,running
ZenDiscovery -> JoinThreadControl -> public void markThreadAsDoneAndStartNew(Thread joinThread);1527096592;marks the given joinThread as completed and makes sure another thread is running (starting one if needed)_If the given thread is not the currently running join thread, the command is ignored.;public void markThreadAsDoneAndStartNew(Thread joinThread) {_            assert Thread.holdsLock(stateMutex)__            if (!markThreadAsDone(joinThread)) {_                return__            }_            startNewThreadIfNotRunning()__        };marks,the,given,join,thread,as,completed,and,makes,sure,another,thread,is,running,starting,one,if,needed,if,the,given,thread,is,not,the,currently,running,join,thread,the,command,is,ignored;public,void,mark,thread,as,done,and,start,new,thread,join,thread,assert,thread,holds,lock,state,mutex,if,mark,thread,as,done,join,thread,return,start,new,thread,if,not,running
ZenDiscovery -> JoinThreadControl -> public void markThreadAsDoneAndStartNew(Thread joinThread);1527152864;marks the given joinThread as completed and makes sure another thread is running (starting one if needed)_If the given thread is not the currently running join thread, the command is ignored.;public void markThreadAsDoneAndStartNew(Thread joinThread) {_            assert Thread.holdsLock(stateMutex)__            if (!markThreadAsDone(joinThread)) {_                return__            }_            startNewThreadIfNotRunning()__        };marks,the,given,join,thread,as,completed,and,makes,sure,another,thread,is,running,starting,one,if,needed,if,the,given,thread,is,not,the,currently,running,join,thread,the,command,is,ignored;public,void,mark,thread,as,done,and,start,new,thread,join,thread,assert,thread,holds,lock,state,mutex,if,mark,thread,as,done,join,thread,return,start,new,thread,if,not,running
ZenDiscovery -> JoinThreadControl -> public void markThreadAsDoneAndStartNew(Thread joinThread);1529687475;marks the given joinThread as completed and makes sure another thread is running (starting one if needed)_If the given thread is not the currently running join thread, the command is ignored.;public void markThreadAsDoneAndStartNew(Thread joinThread) {_            assert Thread.holdsLock(stateMutex)__            if (!markThreadAsDone(joinThread)) {_                return__            }_            startNewThreadIfNotRunning()__        };marks,the,given,join,thread,as,completed,and,makes,sure,another,thread,is,running,starting,one,if,needed,if,the,given,thread,is,not,the,currently,running,join,thread,the,command,is,ignored;public,void,mark,thread,as,done,and,start,new,thread,join,thread,assert,thread,holds,lock,state,mutex,if,mark,thread,as,done,join,thread,return,start,new,thread,if,not,running
ZenDiscovery -> JoinThreadControl -> public void markThreadAsDoneAndStartNew(Thread joinThread);1533230566;marks the given joinThread as completed and makes sure another thread is running (starting one if needed)_If the given thread is not the currently running join thread, the command is ignored.;public void markThreadAsDoneAndStartNew(Thread joinThread) {_            assert Thread.holdsLock(stateMutex)__            if (!markThreadAsDone(joinThread)) {_                return__            }_            startNewThreadIfNotRunning()__        };marks,the,given,join,thread,as,completed,and,makes,sure,another,thread,is,running,starting,one,if,needed,if,the,given,thread,is,not,the,currently,running,join,thread,the,command,is,ignored;public,void,mark,thread,as,done,and,start,new,thread,join,thread,assert,thread,holds,lock,state,mutex,if,mark,thread,as,done,join,thread,return,start,new,thread,if,not,running
ZenDiscovery -> JoinThreadControl -> public void markThreadAsDoneAndStartNew(Thread joinThread);1540847035;marks the given joinThread as completed and makes sure another thread is running (starting one if needed)_If the given thread is not the currently running join thread, the command is ignored.;public void markThreadAsDoneAndStartNew(Thread joinThread) {_            assert Thread.holdsLock(stateMutex)__            if (!markThreadAsDone(joinThread)) {_                return__            }_            startNewThreadIfNotRunning()__        };marks,the,given,join,thread,as,completed,and,makes,sure,another,thread,is,running,starting,one,if,needed,if,the,given,thread,is,not,the,currently,running,join,thread,the,command,is,ignored;public,void,mark,thread,as,done,and,start,new,thread,join,thread,assert,thread,holds,lock,state,mutex,if,mark,thread,as,done,join,thread,return,start,new,thread,if,not,running
ZenDiscovery -> JoinThreadControl -> public void markThreadAsDoneAndStartNew(Thread joinThread);1541008027;marks the given joinThread as completed and makes sure another thread is running (starting one if needed)_If the given thread is not the currently running join thread, the command is ignored.;public void markThreadAsDoneAndStartNew(Thread joinThread) {_            assert Thread.holdsLock(stateMutex)__            if (!markThreadAsDone(joinThread)) {_                return__            }_            startNewThreadIfNotRunning()__        };marks,the,given,join,thread,as,completed,and,makes,sure,another,thread,is,running,starting,one,if,needed,if,the,given,thread,is,not,the,currently,running,join,thread,the,command,is,ignored;public,void,mark,thread,as,done,and,start,new,thread,join,thread,assert,thread,holds,lock,state,mutex,if,mark,thread,as,done,join,thread,return,start,new,thread,if,not,running
ZenDiscovery -> JoinThreadControl -> public void markThreadAsDoneAndStartNew(Thread joinThread);1541092382;marks the given joinThread as completed and makes sure another thread is running (starting one if needed)_If the given thread is not the currently running join thread, the command is ignored.;public void markThreadAsDoneAndStartNew(Thread joinThread) {_            assert Thread.holdsLock(stateMutex)__            if (!markThreadAsDone(joinThread)) {_                return__            }_            startNewThreadIfNotRunning()__        };marks,the,given,join,thread,as,completed,and,makes,sure,another,thread,is,running,starting,one,if,needed,if,the,given,thread,is,not,the,currently,running,join,thread,the,command,is,ignored;public,void,mark,thread,as,done,and,start,new,thread,join,thread,assert,thread,holds,lock,state,mutex,if,mark,thread,as,done,join,thread,return,start,new,thread,if,not,running
ZenDiscovery -> JoinThreadControl -> public void markThreadAsDoneAndStartNew(Thread joinThread);1542646292;marks the given joinThread as completed and makes sure another thread is running (starting one if needed)_If the given thread is not the currently running join thread, the command is ignored.;public void markThreadAsDoneAndStartNew(Thread joinThread) {_            assert Thread.holdsLock(stateMutex)__            if (!markThreadAsDone(joinThread)) {_                return__            }_            startNewThreadIfNotRunning()__        };marks,the,given,join,thread,as,completed,and,makes,sure,another,thread,is,running,starting,one,if,needed,if,the,given,thread,is,not,the,currently,running,join,thread,the,command,is,ignored;public,void,mark,thread,as,done,and,start,new,thread,join,thread,assert,thread,holds,lock,state,mutex,if,mark,thread,as,done,join,thread,return,start,new,thread,if,not,running
ZenDiscovery -> JoinThreadControl -> public void markThreadAsDoneAndStartNew(Thread joinThread);1544081506;marks the given joinThread as completed and makes sure another thread is running (starting one if needed)_If the given thread is not the currently running join thread, the command is ignored.;public void markThreadAsDoneAndStartNew(Thread joinThread) {_            assert Thread.holdsLock(stateMutex)__            if (!markThreadAsDone(joinThread)) {_                return__            }_            startNewThreadIfNotRunning()__        };marks,the,given,join,thread,as,completed,and,makes,sure,another,thread,is,running,starting,one,if,needed,if,the,given,thread,is,not,the,currently,running,join,thread,the,command,is,ignored;public,void,mark,thread,as,done,and,start,new,thread,join,thread,assert,thread,holds,lock,state,mutex,if,mark,thread,as,done,join,thread,return,start,new,thread,if,not,running
ZenDiscovery -> JoinThreadControl -> public void markThreadAsDoneAndStartNew(Thread joinThread);1546850547;marks the given joinThread as completed and makes sure another thread is running (starting one if needed)_If the given thread is not the currently running join thread, the command is ignored.;public void markThreadAsDoneAndStartNew(Thread joinThread) {_            assert Thread.holdsLock(stateMutex)__            if (!markThreadAsDone(joinThread)) {_                return__            }_            startNewThreadIfNotRunning()__        };marks,the,given,join,thread,as,completed,and,makes,sure,another,thread,is,running,starting,one,if,needed,if,the,given,thread,is,not,the,currently,running,join,thread,the,command,is,ignored;public,void,mark,thread,as,done,and,start,new,thread,join,thread,assert,thread,holds,lock,state,mutex,if,mark,thread,as,done,join,thread,return,start,new,thread,if,not,running
ZenDiscovery -> JoinThreadControl -> public void markThreadAsDoneAndStartNew(Thread joinThread);1547121470;marks the given joinThread as completed and makes sure another thread is running (starting one if needed)_If the given thread is not the currently running join thread, the command is ignored.;public void markThreadAsDoneAndStartNew(Thread joinThread) {_            assert Thread.holdsLock(stateMutex)__            if (!markThreadAsDone(joinThread)) {_                return__            }_            startNewThreadIfNotRunning()__        };marks,the,given,join,thread,as,completed,and,makes,sure,another,thread,is,running,starting,one,if,needed,if,the,given,thread,is,not,the,currently,running,join,thread,the,command,is,ignored;public,void,mark,thread,as,done,and,start,new,thread,join,thread,assert,thread,holds,lock,state,mutex,if,mark,thread,as,done,join,thread,return,start,new,thread,if,not,running
ZenDiscovery -> JoinThreadControl -> public void markThreadAsDoneAndStartNew(Thread joinThread);1547625930;marks the given joinThread as completed and makes sure another thread is running (starting one if needed)_If the given thread is not the currently running join thread, the command is ignored.;public void markThreadAsDoneAndStartNew(Thread joinThread) {_            assert Thread.holdsLock(stateMutex)__            if (!markThreadAsDone(joinThread)) {_                return__            }_            startNewThreadIfNotRunning()__        };marks,the,given,join,thread,as,completed,and,makes,sure,another,thread,is,running,starting,one,if,needed,if,the,given,thread,is,not,the,currently,running,join,thread,the,command,is,ignored;public,void,mark,thread,as,done,and,start,new,thread,join,thread,assert,thread,holds,lock,state,mutex,if,mark,thread,as,done,join,thread,return,start,new,thread,if,not,running
ZenDiscovery -> JoinThreadControl -> public void markThreadAsDoneAndStartNew(Thread joinThread);1548320260;marks the given joinThread as completed and makes sure another thread is running (starting one if needed)_If the given thread is not the currently running join thread, the command is ignored.;public void markThreadAsDoneAndStartNew(Thread joinThread) {_            assert Thread.holdsLock(stateMutex)__            if (!markThreadAsDone(joinThread)) {_                return__            }_            startNewThreadIfNotRunning()__        };marks,the,given,join,thread,as,completed,and,makes,sure,another,thread,is,running,starting,one,if,needed,if,the,given,thread,is,not,the,currently,running,join,thread,the,command,is,ignored;public,void,mark,thread,as,done,and,start,new,thread,join,thread,assert,thread,holds,lock,state,mutex,if,mark,thread,as,done,join,thread,return,start,new,thread,if,not,running
ZenDiscovery -> JoinThreadControl -> public void markThreadAsDoneAndStartNew(Thread joinThread);1549270328;marks the given joinThread as completed and makes sure another thread is running (starting one if needed)_If the given thread is not the currently running join thread, the command is ignored.;public void markThreadAsDoneAndStartNew(Thread joinThread) {_            assert Thread.holdsLock(stateMutex)__            if (!markThreadAsDone(joinThread)) {_                return__            }_            startNewThreadIfNotRunning()__        };marks,the,given,join,thread,as,completed,and,makes,sure,another,thread,is,running,starting,one,if,needed,if,the,given,thread,is,not,the,currently,running,join,thread,the,command,is,ignored;public,void,mark,thread,as,done,and,start,new,thread,join,thread,assert,thread,holds,lock,state,mutex,if,mark,thread,as,done,join,thread,return,start,new,thread,if,not,running
ZenDiscovery -> JoinThreadControl -> public void markThreadAsDoneAndStartNew(Thread joinThread);1549356476;marks the given joinThread as completed and makes sure another thread is running (starting one if needed)_If the given thread is not the currently running join thread, the command is ignored.;public void markThreadAsDoneAndStartNew(Thread joinThread) {_            assert Thread.holdsLock(stateMutex)__            if (!markThreadAsDone(joinThread)) {_                return__            }_            startNewThreadIfNotRunning()__        };marks,the,given,join,thread,as,completed,and,makes,sure,another,thread,is,running,starting,one,if,needed,if,the,given,thread,is,not,the,currently,running,join,thread,the,command,is,ignored;public,void,mark,thread,as,done,and,start,new,thread,join,thread,assert,thread,holds,lock,state,mutex,if,mark,thread,as,done,join,thread,return,start,new,thread,if,not,running
ZenDiscovery -> JoinThreadControl -> public void markThreadAsDoneAndStartNew(Thread joinThread);1549452878;marks the given joinThread as completed and makes sure another thread is running (starting one if needed)_If the given thread is not the currently running join thread, the command is ignored.;public void markThreadAsDoneAndStartNew(Thread joinThread) {_            assert Thread.holdsLock(stateMutex)__            if (!markThreadAsDone(joinThread)) {_                return__            }_            startNewThreadIfNotRunning()__        };marks,the,given,join,thread,as,completed,and,makes,sure,another,thread,is,running,starting,one,if,needed,if,the,given,thread,is,not,the,currently,running,join,thread,the,command,is,ignored;public,void,mark,thread,as,done,and,start,new,thread,join,thread,assert,thread,holds,lock,state,mutex,if,mark,thread,as,done,join,thread,return,start,new,thread,if,not,running
ZenDiscovery -> public static boolean shouldIgnoreOrRejectNewClusterState(Logger logger, ClusterState currentState, ClusterState newClusterState);1524684173;In the case we follow an elected master the new cluster state needs to have the same elected master and_the new cluster state version needs to be equal or higher than our cluster state version._If the first condition fails we reject the cluster state and throw an error._If the second condition fails we ignore the cluster state.;public static boolean shouldIgnoreOrRejectNewClusterState(Logger logger, ClusterState currentState, ClusterState newClusterState) {_        validateStateIsFromCurrentMaster(logger, currentState.nodes(), newClusterState)___        _        if (currentState.supersedes(newClusterState) ||_                (newClusterState.nodes().getMasterNodeId().equals(currentState.nodes().getMasterNodeId()) && currentState.version() == newClusterState.version())) {_            _            logger.debug("received a cluster state that is not newer than the current one, ignoring (received {}, current {})", newClusterState.version(), currentState.version())__            return true__        }__        _        if (currentState.nodes().getMasterNodeId() != null && newClusterState.version() < currentState.version()) {_            logger.debug("received a cluster state that has a lower version than the current one, ignoring (received {}, current {})", newClusterState.version(), currentState.version())__            return true__        }_        return false__    };in,the,case,we,follow,an,elected,master,the,new,cluster,state,needs,to,have,the,same,elected,master,and,the,new,cluster,state,version,needs,to,be,equal,or,higher,than,our,cluster,state,version,if,the,first,condition,fails,we,reject,the,cluster,state,and,throw,an,error,if,the,second,condition,fails,we,ignore,the,cluster,state;public,static,boolean,should,ignore,or,reject,new,cluster,state,logger,logger,cluster,state,current,state,cluster,state,new,cluster,state,validate,state,is,from,current,master,logger,current,state,nodes,new,cluster,state,if,current,state,supersedes,new,cluster,state,new,cluster,state,nodes,get,master,node,id,equals,current,state,nodes,get,master,node,id,current,state,version,new,cluster,state,version,logger,debug,received,a,cluster,state,that,is,not,newer,than,the,current,one,ignoring,received,current,new,cluster,state,version,current,state,version,return,true,if,current,state,nodes,get,master,node,id,null,new,cluster,state,version,current,state,version,logger,debug,received,a,cluster,state,that,has,a,lower,version,than,the,current,one,ignoring,received,current,new,cluster,state,version,current,state,version,return,true,return,false
ZenDiscovery -> public static boolean shouldIgnoreOrRejectNewClusterState(Logger logger, ClusterState currentState, ClusterState newClusterState);1525798022;In the case we follow an elected master the new cluster state needs to have the same elected master and_the new cluster state version needs to be equal or higher than our cluster state version._If the first condition fails we reject the cluster state and throw an error._If the second condition fails we ignore the cluster state.;public static boolean shouldIgnoreOrRejectNewClusterState(Logger logger, ClusterState currentState, ClusterState newClusterState) {_        validateStateIsFromCurrentMaster(logger, currentState.nodes(), newClusterState)___        _        if (currentState.supersedes(newClusterState) ||_                (newClusterState.nodes().getMasterNodeId().equals(currentState.nodes().getMasterNodeId()) && currentState.version() == newClusterState.version())) {_            _            logger.debug("received a cluster state that is not newer than the current one, ignoring (received {}, current {})", newClusterState.version(), currentState.version())__            return true__        }__        _        if (currentState.nodes().getMasterNodeId() != null && newClusterState.version() < currentState.version()) {_            logger.debug("received a cluster state that has a lower version than the current one, ignoring (received {}, current {})", newClusterState.version(), currentState.version())__            return true__        }_        return false__    };in,the,case,we,follow,an,elected,master,the,new,cluster,state,needs,to,have,the,same,elected,master,and,the,new,cluster,state,version,needs,to,be,equal,or,higher,than,our,cluster,state,version,if,the,first,condition,fails,we,reject,the,cluster,state,and,throw,an,error,if,the,second,condition,fails,we,ignore,the,cluster,state;public,static,boolean,should,ignore,or,reject,new,cluster,state,logger,logger,cluster,state,current,state,cluster,state,new,cluster,state,validate,state,is,from,current,master,logger,current,state,nodes,new,cluster,state,if,current,state,supersedes,new,cluster,state,new,cluster,state,nodes,get,master,node,id,equals,current,state,nodes,get,master,node,id,current,state,version,new,cluster,state,version,logger,debug,received,a,cluster,state,that,is,not,newer,than,the,current,one,ignoring,received,current,new,cluster,state,version,current,state,version,return,true,if,current,state,nodes,get,master,node,id,null,new,cluster,state,version,current,state,version,logger,debug,received,a,cluster,state,that,has,a,lower,version,than,the,current,one,ignoring,received,current,new,cluster,state,version,current,state,version,return,true,return,false
ZenDiscovery -> public static boolean shouldIgnoreOrRejectNewClusterState(Logger logger, ClusterState currentState, ClusterState newClusterState);1527096592;In the case we follow an elected master the new cluster state needs to have the same elected master and_the new cluster state version needs to be equal or higher than our cluster state version._If the first condition fails we reject the cluster state and throw an error._If the second condition fails we ignore the cluster state.;public static boolean shouldIgnoreOrRejectNewClusterState(Logger logger, ClusterState currentState, ClusterState newClusterState) {_        validateStateIsFromCurrentMaster(logger, currentState.nodes(), newClusterState)___        _        if (currentState.supersedes(newClusterState) ||_                (newClusterState.nodes().getMasterNodeId().equals(currentState.nodes().getMasterNodeId()) && currentState.version() == newClusterState.version())) {_            _            logger.debug("received a cluster state that is not newer than the current one, ignoring (received {}, current {})", newClusterState.version(), currentState.version())__            return true__        }__        _        if (currentState.nodes().getMasterNodeId() != null && newClusterState.version() < currentState.version()) {_            logger.debug("received a cluster state that has a lower version than the current one, ignoring (received {}, current {})", newClusterState.version(), currentState.version())__            return true__        }_        return false__    };in,the,case,we,follow,an,elected,master,the,new,cluster,state,needs,to,have,the,same,elected,master,and,the,new,cluster,state,version,needs,to,be,equal,or,higher,than,our,cluster,state,version,if,the,first,condition,fails,we,reject,the,cluster,state,and,throw,an,error,if,the,second,condition,fails,we,ignore,the,cluster,state;public,static,boolean,should,ignore,or,reject,new,cluster,state,logger,logger,cluster,state,current,state,cluster,state,new,cluster,state,validate,state,is,from,current,master,logger,current,state,nodes,new,cluster,state,if,current,state,supersedes,new,cluster,state,new,cluster,state,nodes,get,master,node,id,equals,current,state,nodes,get,master,node,id,current,state,version,new,cluster,state,version,logger,debug,received,a,cluster,state,that,is,not,newer,than,the,current,one,ignoring,received,current,new,cluster,state,version,current,state,version,return,true,if,current,state,nodes,get,master,node,id,null,new,cluster,state,version,current,state,version,logger,debug,received,a,cluster,state,that,has,a,lower,version,than,the,current,one,ignoring,received,current,new,cluster,state,version,current,state,version,return,true,return,false
ZenDiscovery -> public static boolean shouldIgnoreOrRejectNewClusterState(Logger logger, ClusterState currentState, ClusterState newClusterState);1527152864;In the case we follow an elected master the new cluster state needs to have the same elected master and_the new cluster state version needs to be equal or higher than our cluster state version._If the first condition fails we reject the cluster state and throw an error._If the second condition fails we ignore the cluster state.;public static boolean shouldIgnoreOrRejectNewClusterState(Logger logger, ClusterState currentState, ClusterState newClusterState) {_        validateStateIsFromCurrentMaster(logger, currentState.nodes(), newClusterState)___        _        if (currentState.supersedes(newClusterState) ||_                (newClusterState.nodes().getMasterNodeId().equals(currentState.nodes().getMasterNodeId()) && currentState.version() == newClusterState.version())) {_            _            logger.debug("received a cluster state that is not newer than the current one, ignoring (received {}, current {})", newClusterState.version(), currentState.version())__            return true__        }__        _        if (currentState.nodes().getMasterNodeId() != null && newClusterState.version() < currentState.version()) {_            logger.debug("received a cluster state that has a lower version than the current one, ignoring (received {}, current {})", newClusterState.version(), currentState.version())__            return true__        }_        return false__    };in,the,case,we,follow,an,elected,master,the,new,cluster,state,needs,to,have,the,same,elected,master,and,the,new,cluster,state,version,needs,to,be,equal,or,higher,than,our,cluster,state,version,if,the,first,condition,fails,we,reject,the,cluster,state,and,throw,an,error,if,the,second,condition,fails,we,ignore,the,cluster,state;public,static,boolean,should,ignore,or,reject,new,cluster,state,logger,logger,cluster,state,current,state,cluster,state,new,cluster,state,validate,state,is,from,current,master,logger,current,state,nodes,new,cluster,state,if,current,state,supersedes,new,cluster,state,new,cluster,state,nodes,get,master,node,id,equals,current,state,nodes,get,master,node,id,current,state,version,new,cluster,state,version,logger,debug,received,a,cluster,state,that,is,not,newer,than,the,current,one,ignoring,received,current,new,cluster,state,version,current,state,version,return,true,if,current,state,nodes,get,master,node,id,null,new,cluster,state,version,current,state,version,logger,debug,received,a,cluster,state,that,has,a,lower,version,than,the,current,one,ignoring,received,current,new,cluster,state,version,current,state,version,return,true,return,false
ZenDiscovery -> public static boolean shouldIgnoreOrRejectNewClusterState(Logger logger, ClusterState currentState, ClusterState newClusterState);1529687475;In the case we follow an elected master the new cluster state needs to have the same elected master and_the new cluster state version needs to be equal or higher than our cluster state version._If the first condition fails we reject the cluster state and throw an error._If the second condition fails we ignore the cluster state.;public static boolean shouldIgnoreOrRejectNewClusterState(Logger logger, ClusterState currentState, ClusterState newClusterState) {_        validateStateIsFromCurrentMaster(logger, currentState.nodes(), newClusterState)___        _        if (currentState.supersedes(newClusterState) ||_                (newClusterState.nodes().getMasterNodeId().equals(currentState.nodes().getMasterNodeId()) && currentState.version() == newClusterState.version())) {_            _            logger.debug("received a cluster state that is not newer than the current one, ignoring (received {}, current {})", newClusterState.version(), currentState.version())__            return true__        }__        _        if (currentState.nodes().getMasterNodeId() != null && newClusterState.version() < currentState.version()) {_            logger.debug("received a cluster state that has a lower version than the current one, ignoring (received {}, current {})", newClusterState.version(), currentState.version())__            return true__        }_        return false__    };in,the,case,we,follow,an,elected,master,the,new,cluster,state,needs,to,have,the,same,elected,master,and,the,new,cluster,state,version,needs,to,be,equal,or,higher,than,our,cluster,state,version,if,the,first,condition,fails,we,reject,the,cluster,state,and,throw,an,error,if,the,second,condition,fails,we,ignore,the,cluster,state;public,static,boolean,should,ignore,or,reject,new,cluster,state,logger,logger,cluster,state,current,state,cluster,state,new,cluster,state,validate,state,is,from,current,master,logger,current,state,nodes,new,cluster,state,if,current,state,supersedes,new,cluster,state,new,cluster,state,nodes,get,master,node,id,equals,current,state,nodes,get,master,node,id,current,state,version,new,cluster,state,version,logger,debug,received,a,cluster,state,that,is,not,newer,than,the,current,one,ignoring,received,current,new,cluster,state,version,current,state,version,return,true,if,current,state,nodes,get,master,node,id,null,new,cluster,state,version,current,state,version,logger,debug,received,a,cluster,state,that,has,a,lower,version,than,the,current,one,ignoring,received,current,new,cluster,state,version,current,state,version,return,true,return,false
ZenDiscovery -> public static boolean shouldIgnoreOrRejectNewClusterState(Logger logger, ClusterState currentState, ClusterState newClusterState);1533230566;In the case we follow an elected master the new cluster state needs to have the same elected master and_the new cluster state version needs to be equal or higher than our cluster state version._If the first condition fails we reject the cluster state and throw an error._If the second condition fails we ignore the cluster state.;public static boolean shouldIgnoreOrRejectNewClusterState(Logger logger, ClusterState currentState, ClusterState newClusterState) {_        validateStateIsFromCurrentMaster(logger, currentState.nodes(), newClusterState)___        _        if (currentState.supersedes(newClusterState) ||_                (newClusterState.nodes().getMasterNodeId().equals(currentState.nodes().getMasterNodeId()) && currentState.version() == newClusterState.version())) {_            _            logger.debug("received a cluster state that is not newer than the current one, ignoring (received {}, current {})", newClusterState.version(), currentState.version())__            return true__        }__        _        if (currentState.nodes().getMasterNodeId() != null && newClusterState.version() < currentState.version()) {_            logger.debug("received a cluster state that has a lower version than the current one, ignoring (received {}, current {})", newClusterState.version(), currentState.version())__            return true__        }_        return false__    };in,the,case,we,follow,an,elected,master,the,new,cluster,state,needs,to,have,the,same,elected,master,and,the,new,cluster,state,version,needs,to,be,equal,or,higher,than,our,cluster,state,version,if,the,first,condition,fails,we,reject,the,cluster,state,and,throw,an,error,if,the,second,condition,fails,we,ignore,the,cluster,state;public,static,boolean,should,ignore,or,reject,new,cluster,state,logger,logger,cluster,state,current,state,cluster,state,new,cluster,state,validate,state,is,from,current,master,logger,current,state,nodes,new,cluster,state,if,current,state,supersedes,new,cluster,state,new,cluster,state,nodes,get,master,node,id,equals,current,state,nodes,get,master,node,id,current,state,version,new,cluster,state,version,logger,debug,received,a,cluster,state,that,is,not,newer,than,the,current,one,ignoring,received,current,new,cluster,state,version,current,state,version,return,true,if,current,state,nodes,get,master,node,id,null,new,cluster,state,version,current,state,version,logger,debug,received,a,cluster,state,that,has,a,lower,version,than,the,current,one,ignoring,received,current,new,cluster,state,version,current,state,version,return,true,return,false
ZenDiscovery -> public static boolean shouldIgnoreOrRejectNewClusterState(Logger logger, ClusterState currentState, ClusterState newClusterState);1540847035;In the case we follow an elected master the new cluster state needs to have the same elected master and_the new cluster state version needs to be equal or higher than our cluster state version._If the first condition fails we reject the cluster state and throw an error._If the second condition fails we ignore the cluster state.;public static boolean shouldIgnoreOrRejectNewClusterState(Logger logger, ClusterState currentState, ClusterState newClusterState) {_        validateStateIsFromCurrentMaster(logger, currentState.nodes(), newClusterState)___        _        if (currentState.supersedes(newClusterState) ||_                (newClusterState.nodes().getMasterNodeId().equals(currentState.nodes().getMasterNodeId()) &&_                    currentState.version() == newClusterState.version())) {_            _            logger.debug("received a cluster state that is not newer than the current one, ignoring (received {}, current {})",_                newClusterState.version(), currentState.version())__            return true__        }__        _        if (currentState.nodes().getMasterNodeId() != null && newClusterState.version() < currentState.version()) {_            logger.debug("received a cluster state that has a lower version than the current one, ignoring (received {}, current {})",_                newClusterState.version(), currentState.version())__            return true__        }_        return false__    };in,the,case,we,follow,an,elected,master,the,new,cluster,state,needs,to,have,the,same,elected,master,and,the,new,cluster,state,version,needs,to,be,equal,or,higher,than,our,cluster,state,version,if,the,first,condition,fails,we,reject,the,cluster,state,and,throw,an,error,if,the,second,condition,fails,we,ignore,the,cluster,state;public,static,boolean,should,ignore,or,reject,new,cluster,state,logger,logger,cluster,state,current,state,cluster,state,new,cluster,state,validate,state,is,from,current,master,logger,current,state,nodes,new,cluster,state,if,current,state,supersedes,new,cluster,state,new,cluster,state,nodes,get,master,node,id,equals,current,state,nodes,get,master,node,id,current,state,version,new,cluster,state,version,logger,debug,received,a,cluster,state,that,is,not,newer,than,the,current,one,ignoring,received,current,new,cluster,state,version,current,state,version,return,true,if,current,state,nodes,get,master,node,id,null,new,cluster,state,version,current,state,version,logger,debug,received,a,cluster,state,that,has,a,lower,version,than,the,current,one,ignoring,received,current,new,cluster,state,version,current,state,version,return,true,return,false
ZenDiscovery -> public static boolean shouldIgnoreOrRejectNewClusterState(Logger logger, ClusterState currentState, ClusterState newClusterState);1541008027;In the case we follow an elected master the new cluster state needs to have the same elected master and_the new cluster state version needs to be equal or higher than our cluster state version._If the first condition fails we reject the cluster state and throw an error._If the second condition fails we ignore the cluster state.;public static boolean shouldIgnoreOrRejectNewClusterState(Logger logger, ClusterState currentState, ClusterState newClusterState) {_        validateStateIsFromCurrentMaster(logger, currentState.nodes(), newClusterState)___        _        if (currentState.supersedes(newClusterState) ||_                (newClusterState.nodes().getMasterNodeId().equals(currentState.nodes().getMasterNodeId()) &&_                    currentState.version() == newClusterState.version())) {_            _            logger.debug("received a cluster state that is not newer than the current one, ignoring (received {}, current {})",_                newClusterState.version(), currentState.version())__            return true__        }__        _        if (currentState.nodes().getMasterNodeId() != null && newClusterState.version() < currentState.version()) {_            logger.debug("received a cluster state that has a lower version than the current one, ignoring (received {}, current {})",_                newClusterState.version(), currentState.version())__            return true__        }_        return false__    };in,the,case,we,follow,an,elected,master,the,new,cluster,state,needs,to,have,the,same,elected,master,and,the,new,cluster,state,version,needs,to,be,equal,or,higher,than,our,cluster,state,version,if,the,first,condition,fails,we,reject,the,cluster,state,and,throw,an,error,if,the,second,condition,fails,we,ignore,the,cluster,state;public,static,boolean,should,ignore,or,reject,new,cluster,state,logger,logger,cluster,state,current,state,cluster,state,new,cluster,state,validate,state,is,from,current,master,logger,current,state,nodes,new,cluster,state,if,current,state,supersedes,new,cluster,state,new,cluster,state,nodes,get,master,node,id,equals,current,state,nodes,get,master,node,id,current,state,version,new,cluster,state,version,logger,debug,received,a,cluster,state,that,is,not,newer,than,the,current,one,ignoring,received,current,new,cluster,state,version,current,state,version,return,true,if,current,state,nodes,get,master,node,id,null,new,cluster,state,version,current,state,version,logger,debug,received,a,cluster,state,that,has,a,lower,version,than,the,current,one,ignoring,received,current,new,cluster,state,version,current,state,version,return,true,return,false
ZenDiscovery -> public static boolean shouldIgnoreOrRejectNewClusterState(Logger logger, ClusterState currentState, ClusterState newClusterState);1541092382;In the case we follow an elected master the new cluster state needs to have the same elected master and_the new cluster state version needs to be equal or higher than our cluster state version._If the first condition fails we reject the cluster state and throw an error._If the second condition fails we ignore the cluster state.;public static boolean shouldIgnoreOrRejectNewClusterState(Logger logger, ClusterState currentState, ClusterState newClusterState) {_        validateStateIsFromCurrentMaster(logger, currentState.nodes(), newClusterState)___        _        if (currentState.supersedes(newClusterState) ||_                (newClusterState.nodes().getMasterNodeId().equals(currentState.nodes().getMasterNodeId()) &&_                    currentState.version() == newClusterState.version())) {_            _            logger.debug("received a cluster state that is not newer than the current one, ignoring (received {}, current {})",_                newClusterState.version(), currentState.version())__            return true__        }__        _        if (currentState.nodes().getMasterNodeId() != null && newClusterState.version() < currentState.version()) {_            logger.debug("received a cluster state that has a lower version than the current one, ignoring (received {}, current {})",_                newClusterState.version(), currentState.version())__            return true__        }_        return false__    };in,the,case,we,follow,an,elected,master,the,new,cluster,state,needs,to,have,the,same,elected,master,and,the,new,cluster,state,version,needs,to,be,equal,or,higher,than,our,cluster,state,version,if,the,first,condition,fails,we,reject,the,cluster,state,and,throw,an,error,if,the,second,condition,fails,we,ignore,the,cluster,state;public,static,boolean,should,ignore,or,reject,new,cluster,state,logger,logger,cluster,state,current,state,cluster,state,new,cluster,state,validate,state,is,from,current,master,logger,current,state,nodes,new,cluster,state,if,current,state,supersedes,new,cluster,state,new,cluster,state,nodes,get,master,node,id,equals,current,state,nodes,get,master,node,id,current,state,version,new,cluster,state,version,logger,debug,received,a,cluster,state,that,is,not,newer,than,the,current,one,ignoring,received,current,new,cluster,state,version,current,state,version,return,true,if,current,state,nodes,get,master,node,id,null,new,cluster,state,version,current,state,version,logger,debug,received,a,cluster,state,that,has,a,lower,version,than,the,current,one,ignoring,received,current,new,cluster,state,version,current,state,version,return,true,return,false
ZenDiscovery -> public static boolean shouldIgnoreOrRejectNewClusterState(Logger logger, ClusterState currentState, ClusterState newClusterState);1542646292;In the case we follow an elected master the new cluster state needs to have the same elected master and_the new cluster state version needs to be equal or higher than our cluster state version._If the first condition fails we reject the cluster state and throw an error._If the second condition fails we ignore the cluster state.;public static boolean shouldIgnoreOrRejectNewClusterState(Logger logger, ClusterState currentState, ClusterState newClusterState) {_        validateStateIsFromCurrentMaster(logger, currentState.nodes(), newClusterState)___        _        if (currentState.supersedes(newClusterState) ||_                (newClusterState.nodes().getMasterNodeId().equals(currentState.nodes().getMasterNodeId()) &&_                    currentState.version() == newClusterState.version())) {_            _            logger.debug("received a cluster state that is not newer than the current one, ignoring (received {}, current {})",_                newClusterState.version(), currentState.version())__            return true__        }__        _        if (currentState.nodes().getMasterNodeId() != null && newClusterState.version() < currentState.version()) {_            logger.debug("received a cluster state that has a lower version than the current one, ignoring (received {}, current {})",_                newClusterState.version(), currentState.version())__            return true__        }_        return false__    };in,the,case,we,follow,an,elected,master,the,new,cluster,state,needs,to,have,the,same,elected,master,and,the,new,cluster,state,version,needs,to,be,equal,or,higher,than,our,cluster,state,version,if,the,first,condition,fails,we,reject,the,cluster,state,and,throw,an,error,if,the,second,condition,fails,we,ignore,the,cluster,state;public,static,boolean,should,ignore,or,reject,new,cluster,state,logger,logger,cluster,state,current,state,cluster,state,new,cluster,state,validate,state,is,from,current,master,logger,current,state,nodes,new,cluster,state,if,current,state,supersedes,new,cluster,state,new,cluster,state,nodes,get,master,node,id,equals,current,state,nodes,get,master,node,id,current,state,version,new,cluster,state,version,logger,debug,received,a,cluster,state,that,is,not,newer,than,the,current,one,ignoring,received,current,new,cluster,state,version,current,state,version,return,true,if,current,state,nodes,get,master,node,id,null,new,cluster,state,version,current,state,version,logger,debug,received,a,cluster,state,that,has,a,lower,version,than,the,current,one,ignoring,received,current,new,cluster,state,version,current,state,version,return,true,return,false
ZenDiscovery -> public static boolean shouldIgnoreOrRejectNewClusterState(Logger logger, ClusterState currentState, ClusterState newClusterState);1544081506;In the case we follow an elected master the new cluster state needs to have the same elected master and_the new cluster state version needs to be equal or higher than our cluster state version._If the first condition fails we reject the cluster state and throw an error._If the second condition fails we ignore the cluster state.;public static boolean shouldIgnoreOrRejectNewClusterState(Logger logger, ClusterState currentState, ClusterState newClusterState) {_        validateStateIsFromCurrentMaster(logger, currentState.nodes(), newClusterState)___        _        if (currentState.supersedes(newClusterState) ||_                (newClusterState.nodes().getMasterNodeId().equals(currentState.nodes().getMasterNodeId()) &&_                    currentState.version() == newClusterState.version())) {_            _            logger.debug("received a cluster state that is not newer than the current one, ignoring (received {}, current {})",_                newClusterState.version(), currentState.version())__            return true__        }__        _        if (currentState.nodes().getMasterNodeId() != null && newClusterState.version() < currentState.version()) {_            logger.debug("received a cluster state that has a lower version than the current one, ignoring (received {}, current {})",_                newClusterState.version(), currentState.version())__            return true__        }_        return false__    };in,the,case,we,follow,an,elected,master,the,new,cluster,state,needs,to,have,the,same,elected,master,and,the,new,cluster,state,version,needs,to,be,equal,or,higher,than,our,cluster,state,version,if,the,first,condition,fails,we,reject,the,cluster,state,and,throw,an,error,if,the,second,condition,fails,we,ignore,the,cluster,state;public,static,boolean,should,ignore,or,reject,new,cluster,state,logger,logger,cluster,state,current,state,cluster,state,new,cluster,state,validate,state,is,from,current,master,logger,current,state,nodes,new,cluster,state,if,current,state,supersedes,new,cluster,state,new,cluster,state,nodes,get,master,node,id,equals,current,state,nodes,get,master,node,id,current,state,version,new,cluster,state,version,logger,debug,received,a,cluster,state,that,is,not,newer,than,the,current,one,ignoring,received,current,new,cluster,state,version,current,state,version,return,true,if,current,state,nodes,get,master,node,id,null,new,cluster,state,version,current,state,version,logger,debug,received,a,cluster,state,that,has,a,lower,version,than,the,current,one,ignoring,received,current,new,cluster,state,version,current,state,version,return,true,return,false
ZenDiscovery -> public static boolean shouldIgnoreOrRejectNewClusterState(Logger logger, ClusterState currentState, ClusterState newClusterState);1546850547;In the case we follow an elected master the new cluster state needs to have the same elected master and_the new cluster state version needs to be equal or higher than our cluster state version._If the first condition fails we reject the cluster state and throw an error._If the second condition fails we ignore the cluster state.;public static boolean shouldIgnoreOrRejectNewClusterState(Logger logger, ClusterState currentState, ClusterState newClusterState) {_        validateStateIsFromCurrentMaster(logger, currentState.nodes(), newClusterState)___        _        if (currentState.supersedes(newClusterState) ||_                (newClusterState.nodes().getMasterNodeId().equals(currentState.nodes().getMasterNodeId()) &&_                    currentState.version() == newClusterState.version())) {_            _            logger.debug("received a cluster state that is not newer than the current one, ignoring (received {}, current {})",_                newClusterState.version(), currentState.version())__            return true__        }__        _        if (currentState.nodes().getMasterNodeId() != null && newClusterState.version() < currentState.version()) {_            logger.debug("received a cluster state that has a lower version than the current one, ignoring (received {}, current {})",_                newClusterState.version(), currentState.version())__            return true__        }_        return false__    };in,the,case,we,follow,an,elected,master,the,new,cluster,state,needs,to,have,the,same,elected,master,and,the,new,cluster,state,version,needs,to,be,equal,or,higher,than,our,cluster,state,version,if,the,first,condition,fails,we,reject,the,cluster,state,and,throw,an,error,if,the,second,condition,fails,we,ignore,the,cluster,state;public,static,boolean,should,ignore,or,reject,new,cluster,state,logger,logger,cluster,state,current,state,cluster,state,new,cluster,state,validate,state,is,from,current,master,logger,current,state,nodes,new,cluster,state,if,current,state,supersedes,new,cluster,state,new,cluster,state,nodes,get,master,node,id,equals,current,state,nodes,get,master,node,id,current,state,version,new,cluster,state,version,logger,debug,received,a,cluster,state,that,is,not,newer,than,the,current,one,ignoring,received,current,new,cluster,state,version,current,state,version,return,true,if,current,state,nodes,get,master,node,id,null,new,cluster,state,version,current,state,version,logger,debug,received,a,cluster,state,that,has,a,lower,version,than,the,current,one,ignoring,received,current,new,cluster,state,version,current,state,version,return,true,return,false
ZenDiscovery -> public static boolean shouldIgnoreOrRejectNewClusterState(Logger logger, ClusterState currentState, ClusterState newClusterState);1547121470;In the case we follow an elected master the new cluster state needs to have the same elected master and_the new cluster state version needs to be equal or higher than our cluster state version._If the first condition fails we reject the cluster state and throw an error._If the second condition fails we ignore the cluster state.;public static boolean shouldIgnoreOrRejectNewClusterState(Logger logger, ClusterState currentState, ClusterState newClusterState) {_        validateStateIsFromCurrentMaster(logger, currentState.nodes(), newClusterState)___        _        if (currentState.supersedes(newClusterState) ||_                (newClusterState.nodes().getMasterNodeId().equals(currentState.nodes().getMasterNodeId()) &&_                    currentState.version() == newClusterState.version())) {_            _            logger.debug("received a cluster state that is not newer than the current one, ignoring (received {}, current {})",_                newClusterState.version(), currentState.version())__            return true__        }__        _        if (currentState.nodes().getMasterNodeId() != null && newClusterState.version() < currentState.version()) {_            logger.debug("received a cluster state that has a lower version than the current one, ignoring (received {}, current {})",_                newClusterState.version(), currentState.version())__            return true__        }_        return false__    };in,the,case,we,follow,an,elected,master,the,new,cluster,state,needs,to,have,the,same,elected,master,and,the,new,cluster,state,version,needs,to,be,equal,or,higher,than,our,cluster,state,version,if,the,first,condition,fails,we,reject,the,cluster,state,and,throw,an,error,if,the,second,condition,fails,we,ignore,the,cluster,state;public,static,boolean,should,ignore,or,reject,new,cluster,state,logger,logger,cluster,state,current,state,cluster,state,new,cluster,state,validate,state,is,from,current,master,logger,current,state,nodes,new,cluster,state,if,current,state,supersedes,new,cluster,state,new,cluster,state,nodes,get,master,node,id,equals,current,state,nodes,get,master,node,id,current,state,version,new,cluster,state,version,logger,debug,received,a,cluster,state,that,is,not,newer,than,the,current,one,ignoring,received,current,new,cluster,state,version,current,state,version,return,true,if,current,state,nodes,get,master,node,id,null,new,cluster,state,version,current,state,version,logger,debug,received,a,cluster,state,that,has,a,lower,version,than,the,current,one,ignoring,received,current,new,cluster,state,version,current,state,version,return,true,return,false
ZenDiscovery -> public static boolean shouldIgnoreOrRejectNewClusterState(Logger logger, ClusterState currentState, ClusterState newClusterState);1547625930;In the case we follow an elected master the new cluster state needs to have the same elected master and_the new cluster state version needs to be equal or higher than our cluster state version._If the first condition fails we reject the cluster state and throw an error._If the second condition fails we ignore the cluster state.;public static boolean shouldIgnoreOrRejectNewClusterState(Logger logger, ClusterState currentState, ClusterState newClusterState) {_        validateStateIsFromCurrentMaster(logger, currentState.nodes(), newClusterState)___        _        if (currentState.supersedes(newClusterState) ||_                (newClusterState.nodes().getMasterNodeId().equals(currentState.nodes().getMasterNodeId()) &&_                    currentState.version() == newClusterState.version())) {_            _            logger.debug("received a cluster state that is not newer than the current one, ignoring (received {}, current {})",_                newClusterState.version(), currentState.version())__            return true__        }__        _        if (currentState.nodes().getMasterNodeId() != null && newClusterState.version() < currentState.version()) {_            logger.debug("received a cluster state that has a lower version than the current one, ignoring (received {}, current {})",_                newClusterState.version(), currentState.version())__            return true__        }_        return false__    };in,the,case,we,follow,an,elected,master,the,new,cluster,state,needs,to,have,the,same,elected,master,and,the,new,cluster,state,version,needs,to,be,equal,or,higher,than,our,cluster,state,version,if,the,first,condition,fails,we,reject,the,cluster,state,and,throw,an,error,if,the,second,condition,fails,we,ignore,the,cluster,state;public,static,boolean,should,ignore,or,reject,new,cluster,state,logger,logger,cluster,state,current,state,cluster,state,new,cluster,state,validate,state,is,from,current,master,logger,current,state,nodes,new,cluster,state,if,current,state,supersedes,new,cluster,state,new,cluster,state,nodes,get,master,node,id,equals,current,state,nodes,get,master,node,id,current,state,version,new,cluster,state,version,logger,debug,received,a,cluster,state,that,is,not,newer,than,the,current,one,ignoring,received,current,new,cluster,state,version,current,state,version,return,true,if,current,state,nodes,get,master,node,id,null,new,cluster,state,version,current,state,version,logger,debug,received,a,cluster,state,that,has,a,lower,version,than,the,current,one,ignoring,received,current,new,cluster,state,version,current,state,version,return,true,return,false
ZenDiscovery -> public static boolean shouldIgnoreOrRejectNewClusterState(Logger logger, ClusterState currentState, ClusterState newClusterState);1548320260;In the case we follow an elected master the new cluster state needs to have the same elected master and_the new cluster state version needs to be equal or higher than our cluster state version._If the first condition fails we reject the cluster state and throw an error._If the second condition fails we ignore the cluster state.;public static boolean shouldIgnoreOrRejectNewClusterState(Logger logger, ClusterState currentState, ClusterState newClusterState) {_        validateStateIsFromCurrentMaster(logger, currentState.nodes(), newClusterState)___        _        if (currentState.supersedes(newClusterState) ||_                (newClusterState.nodes().getMasterNodeId().equals(currentState.nodes().getMasterNodeId()) &&_                    currentState.version() == newClusterState.version())) {_            _            logger.debug("received a cluster state that is not newer than the current one, ignoring (received {}, current {})",_                newClusterState.version(), currentState.version())__            return true__        }__        _        if (currentState.nodes().getMasterNodeId() != null && newClusterState.version() < currentState.version()) {_            logger.debug("received a cluster state that has a lower version than the current one, ignoring (received {}, current {})",_                newClusterState.version(), currentState.version())__            return true__        }_        return false__    };in,the,case,we,follow,an,elected,master,the,new,cluster,state,needs,to,have,the,same,elected,master,and,the,new,cluster,state,version,needs,to,be,equal,or,higher,than,our,cluster,state,version,if,the,first,condition,fails,we,reject,the,cluster,state,and,throw,an,error,if,the,second,condition,fails,we,ignore,the,cluster,state;public,static,boolean,should,ignore,or,reject,new,cluster,state,logger,logger,cluster,state,current,state,cluster,state,new,cluster,state,validate,state,is,from,current,master,logger,current,state,nodes,new,cluster,state,if,current,state,supersedes,new,cluster,state,new,cluster,state,nodes,get,master,node,id,equals,current,state,nodes,get,master,node,id,current,state,version,new,cluster,state,version,logger,debug,received,a,cluster,state,that,is,not,newer,than,the,current,one,ignoring,received,current,new,cluster,state,version,current,state,version,return,true,if,current,state,nodes,get,master,node,id,null,new,cluster,state,version,current,state,version,logger,debug,received,a,cluster,state,that,has,a,lower,version,than,the,current,one,ignoring,received,current,new,cluster,state,version,current,state,version,return,true,return,false
ZenDiscovery -> public static boolean shouldIgnoreOrRejectNewClusterState(Logger logger, ClusterState currentState, ClusterState newClusterState);1549270328;In the case we follow an elected master the new cluster state needs to have the same elected master and_the new cluster state version needs to be equal or higher than our cluster state version._If the first condition fails we reject the cluster state and throw an error._If the second condition fails we ignore the cluster state.;public static boolean shouldIgnoreOrRejectNewClusterState(Logger logger, ClusterState currentState, ClusterState newClusterState) {_        validateStateIsFromCurrentMaster(logger, currentState.nodes(), newClusterState)___        _        if (currentState.supersedes(newClusterState) ||_                (newClusterState.nodes().getMasterNodeId().equals(currentState.nodes().getMasterNodeId()) &&_                    currentState.version() == newClusterState.version())) {_            _            logger.debug("received a cluster state that is not newer than the current one, ignoring (received {}, current {})",_                newClusterState.version(), currentState.version())__            return true__        }__        _        if (currentState.nodes().getMasterNodeId() != null && newClusterState.version() < currentState.version()) {_            logger.debug("received a cluster state that has a lower version than the current one, ignoring (received {}, current {})",_                newClusterState.version(), currentState.version())__            return true__        }_        return false__    };in,the,case,we,follow,an,elected,master,the,new,cluster,state,needs,to,have,the,same,elected,master,and,the,new,cluster,state,version,needs,to,be,equal,or,higher,than,our,cluster,state,version,if,the,first,condition,fails,we,reject,the,cluster,state,and,throw,an,error,if,the,second,condition,fails,we,ignore,the,cluster,state;public,static,boolean,should,ignore,or,reject,new,cluster,state,logger,logger,cluster,state,current,state,cluster,state,new,cluster,state,validate,state,is,from,current,master,logger,current,state,nodes,new,cluster,state,if,current,state,supersedes,new,cluster,state,new,cluster,state,nodes,get,master,node,id,equals,current,state,nodes,get,master,node,id,current,state,version,new,cluster,state,version,logger,debug,received,a,cluster,state,that,is,not,newer,than,the,current,one,ignoring,received,current,new,cluster,state,version,current,state,version,return,true,if,current,state,nodes,get,master,node,id,null,new,cluster,state,version,current,state,version,logger,debug,received,a,cluster,state,that,has,a,lower,version,than,the,current,one,ignoring,received,current,new,cluster,state,version,current,state,version,return,true,return,false
ZenDiscovery -> public static boolean shouldIgnoreOrRejectNewClusterState(Logger logger, ClusterState currentState, ClusterState newClusterState);1549356476;In the case we follow an elected master the new cluster state needs to have the same elected master and_the new cluster state version needs to be equal or higher than our cluster state version._If the first condition fails we reject the cluster state and throw an error._If the second condition fails we ignore the cluster state.;public static boolean shouldIgnoreOrRejectNewClusterState(Logger logger, ClusterState currentState, ClusterState newClusterState) {_        validateStateIsFromCurrentMaster(logger, currentState.nodes(), newClusterState)___        _        if (currentState.supersedes(newClusterState) ||_                (newClusterState.nodes().getMasterNodeId().equals(currentState.nodes().getMasterNodeId()) &&_                    currentState.version() == newClusterState.version())) {_            _            logger.debug("received a cluster state that is not newer than the current one, ignoring (received {}, current {})",_                newClusterState.version(), currentState.version())__            return true__        }__        _        if (currentState.nodes().getMasterNodeId() != null && newClusterState.version() < currentState.version()) {_            logger.debug("received a cluster state that has a lower version than the current one, ignoring (received {}, current {})",_                newClusterState.version(), currentState.version())__            return true__        }_        return false__    };in,the,case,we,follow,an,elected,master,the,new,cluster,state,needs,to,have,the,same,elected,master,and,the,new,cluster,state,version,needs,to,be,equal,or,higher,than,our,cluster,state,version,if,the,first,condition,fails,we,reject,the,cluster,state,and,throw,an,error,if,the,second,condition,fails,we,ignore,the,cluster,state;public,static,boolean,should,ignore,or,reject,new,cluster,state,logger,logger,cluster,state,current,state,cluster,state,new,cluster,state,validate,state,is,from,current,master,logger,current,state,nodes,new,cluster,state,if,current,state,supersedes,new,cluster,state,new,cluster,state,nodes,get,master,node,id,equals,current,state,nodes,get,master,node,id,current,state,version,new,cluster,state,version,logger,debug,received,a,cluster,state,that,is,not,newer,than,the,current,one,ignoring,received,current,new,cluster,state,version,current,state,version,return,true,if,current,state,nodes,get,master,node,id,null,new,cluster,state,version,current,state,version,logger,debug,received,a,cluster,state,that,has,a,lower,version,than,the,current,one,ignoring,received,current,new,cluster,state,version,current,state,version,return,true,return,false
ZenDiscovery -> public static boolean shouldIgnoreOrRejectNewClusterState(Logger logger, ClusterState currentState, ClusterState newClusterState);1549452878;In the case we follow an elected master the new cluster state needs to have the same elected master and_the new cluster state version needs to be equal or higher than our cluster state version._If the first condition fails we reject the cluster state and throw an error._If the second condition fails we ignore the cluster state.;public static boolean shouldIgnoreOrRejectNewClusterState(Logger logger, ClusterState currentState, ClusterState newClusterState) {_        validateStateIsFromCurrentMaster(logger, currentState.nodes(), newClusterState)___        _        if (currentState.supersedes(newClusterState) ||_                (newClusterState.nodes().getMasterNodeId().equals(currentState.nodes().getMasterNodeId()) &&_                    currentState.version() == newClusterState.version())) {_            _            logger.debug("received a cluster state that is not newer than the current one, ignoring (received {}, current {})",_                newClusterState.version(), currentState.version())__            return true__        }__        _        if (currentState.nodes().getMasterNodeId() != null && newClusterState.version() < currentState.version()) {_            logger.debug("received a cluster state that has a lower version than the current one, ignoring (received {}, current {})",_                newClusterState.version(), currentState.version())__            return true__        }_        return false__    };in,the,case,we,follow,an,elected,master,the,new,cluster,state,needs,to,have,the,same,elected,master,and,the,new,cluster,state,version,needs,to,be,equal,or,higher,than,our,cluster,state,version,if,the,first,condition,fails,we,reject,the,cluster,state,and,throw,an,error,if,the,second,condition,fails,we,ignore,the,cluster,state;public,static,boolean,should,ignore,or,reject,new,cluster,state,logger,logger,cluster,state,current,state,cluster,state,new,cluster,state,validate,state,is,from,current,master,logger,current,state,nodes,new,cluster,state,if,current,state,supersedes,new,cluster,state,new,cluster,state,nodes,get,master,node,id,equals,current,state,nodes,get,master,node,id,current,state,version,new,cluster,state,version,logger,debug,received,a,cluster,state,that,is,not,newer,than,the,current,one,ignoring,received,current,new,cluster,state,version,current,state,version,return,true,if,current,state,nodes,get,master,node,id,null,new,cluster,state,version,current,state,version,logger,debug,received,a,cluster,state,that,has,a,lower,version,than,the,current,one,ignoring,received,current,new,cluster,state,version,current,state,version,return,true,return,false
ZenDiscovery -> private boolean joinElectedMaster(DiscoveryNode masterNode);1524684173;Join a newly elected master.__@return true if successful;private boolean joinElectedMaster(DiscoveryNode masterNode) {_        try {_            _            transportService.connectToNode(masterNode)__        } catch (Exception e) {_            logger.warn(() -> new ParameterizedMessage("failed to connect to master [{}], retrying...", masterNode), e)__            return false__        }_        int joinAttempt = 0_ _        while (true) {_            try {_                logger.trace("joining master {}", masterNode)__                membership.sendJoinRequestBlocking(masterNode, transportService.getLocalNode(), joinTimeout)__                return true__            } catch (Exception e) {_                final Throwable unwrap = ExceptionsHelper.unwrapCause(e)__                if (unwrap instanceof NotMasterException) {_                    if (++joinAttempt == this.joinRetryAttempts) {_                        logger.info("failed to send join request to master [{}], reason [{}], tried [{}] times", masterNode, ExceptionsHelper.detailedMessage(e), joinAttempt)__                        return false__                    } else {_                        logger.trace("master {} failed with [{}]. retrying... (attempts done: [{}])", masterNode, ExceptionsHelper.detailedMessage(e), joinAttempt)__                    }_                } else {_                    if (logger.isTraceEnabled()) {_                        logger.trace(() -> new ParameterizedMessage("failed to send join request to master [{}]", masterNode), e)__                    } else {_                        logger.info("failed to send join request to master [{}], reason [{}]", masterNode, ExceptionsHelper.detailedMessage(e))__                    }_                    return false__                }_            }__            try {_                Thread.sleep(this.joinRetryDelay.millis())__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()__            }_        }_    };join,a,newly,elected,master,return,true,if,successful;private,boolean,join,elected,master,discovery,node,master,node,try,transport,service,connect,to,node,master,node,catch,exception,e,logger,warn,new,parameterized,message,failed,to,connect,to,master,retrying,master,node,e,return,false,int,join,attempt,0,while,true,try,logger,trace,joining,master,master,node,membership,send,join,request,blocking,master,node,transport,service,get,local,node,join,timeout,return,true,catch,exception,e,final,throwable,unwrap,exceptions,helper,unwrap,cause,e,if,unwrap,instanceof,not,master,exception,if,join,attempt,this,join,retry,attempts,logger,info,failed,to,send,join,request,to,master,reason,tried,times,master,node,exceptions,helper,detailed,message,e,join,attempt,return,false,else,logger,trace,master,failed,with,retrying,attempts,done,master,node,exceptions,helper,detailed,message,e,join,attempt,else,if,logger,is,trace,enabled,logger,trace,new,parameterized,message,failed,to,send,join,request,to,master,master,node,e,else,logger,info,failed,to,send,join,request,to,master,reason,master,node,exceptions,helper,detailed,message,e,return,false,try,thread,sleep,this,join,retry,delay,millis,catch,interrupted,exception,e,thread,current,thread,interrupt
ZenDiscovery -> private boolean joinElectedMaster(DiscoveryNode masterNode);1525798022;Join a newly elected master.__@return true if successful;private boolean joinElectedMaster(DiscoveryNode masterNode) {_        try {_            _            transportService.connectToNode(masterNode)__        } catch (Exception e) {_            logger.warn(() -> new ParameterizedMessage("failed to connect to master [{}], retrying...", masterNode), e)__            return false__        }_        int joinAttempt = 0_ _        while (true) {_            try {_                logger.trace("joining master {}", masterNode)__                membership.sendJoinRequestBlocking(masterNode, transportService.getLocalNode(), joinTimeout)__                return true__            } catch (Exception e) {_                final Throwable unwrap = ExceptionsHelper.unwrapCause(e)__                if (unwrap instanceof NotMasterException) {_                    if (++joinAttempt == this.joinRetryAttempts) {_                        logger.info("failed to send join request to master [{}], reason [{}], tried [{}] times", masterNode, ExceptionsHelper.detailedMessage(e), joinAttempt)__                        return false__                    } else {_                        logger.trace("master {} failed with [{}]. retrying... (attempts done: [{}])", masterNode, ExceptionsHelper.detailedMessage(e), joinAttempt)__                    }_                } else {_                    if (logger.isTraceEnabled()) {_                        logger.trace(() -> new ParameterizedMessage("failed to send join request to master [{}]", masterNode), e)__                    } else {_                        logger.info("failed to send join request to master [{}], reason [{}]", masterNode, ExceptionsHelper.detailedMessage(e))__                    }_                    return false__                }_            }__            try {_                Thread.sleep(this.joinRetryDelay.millis())__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()__            }_        }_    };join,a,newly,elected,master,return,true,if,successful;private,boolean,join,elected,master,discovery,node,master,node,try,transport,service,connect,to,node,master,node,catch,exception,e,logger,warn,new,parameterized,message,failed,to,connect,to,master,retrying,master,node,e,return,false,int,join,attempt,0,while,true,try,logger,trace,joining,master,master,node,membership,send,join,request,blocking,master,node,transport,service,get,local,node,join,timeout,return,true,catch,exception,e,final,throwable,unwrap,exceptions,helper,unwrap,cause,e,if,unwrap,instanceof,not,master,exception,if,join,attempt,this,join,retry,attempts,logger,info,failed,to,send,join,request,to,master,reason,tried,times,master,node,exceptions,helper,detailed,message,e,join,attempt,return,false,else,logger,trace,master,failed,with,retrying,attempts,done,master,node,exceptions,helper,detailed,message,e,join,attempt,else,if,logger,is,trace,enabled,logger,trace,new,parameterized,message,failed,to,send,join,request,to,master,master,node,e,else,logger,info,failed,to,send,join,request,to,master,reason,master,node,exceptions,helper,detailed,message,e,return,false,try,thread,sleep,this,join,retry,delay,millis,catch,interrupted,exception,e,thread,current,thread,interrupt
ZenDiscovery -> private boolean joinElectedMaster(DiscoveryNode masterNode);1527096592;Join a newly elected master.__@return true if successful;private boolean joinElectedMaster(DiscoveryNode masterNode) {_        try {_            _            transportService.connectToNode(masterNode)__        } catch (Exception e) {_            logger.warn(() -> new ParameterizedMessage("failed to connect to master [{}], retrying...", masterNode), e)__            return false__        }_        int joinAttempt = 0_ _        while (true) {_            try {_                logger.trace("joining master {}", masterNode)__                membership.sendJoinRequestBlocking(masterNode, transportService.getLocalNode(), joinTimeout)__                return true__            } catch (Exception e) {_                final Throwable unwrap = ExceptionsHelper.unwrapCause(e)__                if (unwrap instanceof NotMasterException) {_                    if (++joinAttempt == this.joinRetryAttempts) {_                        logger.info("failed to send join request to master [{}], reason [{}], tried [{}] times", masterNode, ExceptionsHelper.detailedMessage(e), joinAttempt)__                        return false__                    } else {_                        logger.trace("master {} failed with [{}]. retrying... (attempts done: [{}])", masterNode, ExceptionsHelper.detailedMessage(e), joinAttempt)__                    }_                } else {_                    if (logger.isTraceEnabled()) {_                        logger.trace(() -> new ParameterizedMessage("failed to send join request to master [{}]", masterNode), e)__                    } else {_                        logger.info("failed to send join request to master [{}], reason [{}]", masterNode, ExceptionsHelper.detailedMessage(e))__                    }_                    return false__                }_            }__            try {_                Thread.sleep(this.joinRetryDelay.millis())__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()__            }_        }_    };join,a,newly,elected,master,return,true,if,successful;private,boolean,join,elected,master,discovery,node,master,node,try,transport,service,connect,to,node,master,node,catch,exception,e,logger,warn,new,parameterized,message,failed,to,connect,to,master,retrying,master,node,e,return,false,int,join,attempt,0,while,true,try,logger,trace,joining,master,master,node,membership,send,join,request,blocking,master,node,transport,service,get,local,node,join,timeout,return,true,catch,exception,e,final,throwable,unwrap,exceptions,helper,unwrap,cause,e,if,unwrap,instanceof,not,master,exception,if,join,attempt,this,join,retry,attempts,logger,info,failed,to,send,join,request,to,master,reason,tried,times,master,node,exceptions,helper,detailed,message,e,join,attempt,return,false,else,logger,trace,master,failed,with,retrying,attempts,done,master,node,exceptions,helper,detailed,message,e,join,attempt,else,if,logger,is,trace,enabled,logger,trace,new,parameterized,message,failed,to,send,join,request,to,master,master,node,e,else,logger,info,failed,to,send,join,request,to,master,reason,master,node,exceptions,helper,detailed,message,e,return,false,try,thread,sleep,this,join,retry,delay,millis,catch,interrupted,exception,e,thread,current,thread,interrupt
ZenDiscovery -> private boolean joinElectedMaster(DiscoveryNode masterNode);1527152864;Join a newly elected master.__@return true if successful;private boolean joinElectedMaster(DiscoveryNode masterNode) {_        try {_            _            transportService.connectToNode(masterNode)__        } catch (Exception e) {_            logger.warn(() -> new ParameterizedMessage("failed to connect to master [{}], retrying...", masterNode), e)__            return false__        }_        int joinAttempt = 0_ _        while (true) {_            try {_                logger.trace("joining master {}", masterNode)__                membership.sendJoinRequestBlocking(masterNode, transportService.getLocalNode(), joinTimeout)__                return true__            } catch (Exception e) {_                final Throwable unwrap = ExceptionsHelper.unwrapCause(e)__                if (unwrap instanceof NotMasterException) {_                    if (++joinAttempt == this.joinRetryAttempts) {_                        logger.info("failed to send join request to master [{}], reason [{}], tried [{}] times", masterNode, ExceptionsHelper.detailedMessage(e), joinAttempt)__                        return false__                    } else {_                        logger.trace("master {} failed with [{}]. retrying... (attempts done: [{}])", masterNode, ExceptionsHelper.detailedMessage(e), joinAttempt)__                    }_                } else {_                    if (logger.isTraceEnabled()) {_                        logger.trace(() -> new ParameterizedMessage("failed to send join request to master [{}]", masterNode), e)__                    } else {_                        logger.info("failed to send join request to master [{}], reason [{}]", masterNode, ExceptionsHelper.detailedMessage(e))__                    }_                    return false__                }_            }__            try {_                Thread.sleep(this.joinRetryDelay.millis())__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()__            }_        }_    };join,a,newly,elected,master,return,true,if,successful;private,boolean,join,elected,master,discovery,node,master,node,try,transport,service,connect,to,node,master,node,catch,exception,e,logger,warn,new,parameterized,message,failed,to,connect,to,master,retrying,master,node,e,return,false,int,join,attempt,0,while,true,try,logger,trace,joining,master,master,node,membership,send,join,request,blocking,master,node,transport,service,get,local,node,join,timeout,return,true,catch,exception,e,final,throwable,unwrap,exceptions,helper,unwrap,cause,e,if,unwrap,instanceof,not,master,exception,if,join,attempt,this,join,retry,attempts,logger,info,failed,to,send,join,request,to,master,reason,tried,times,master,node,exceptions,helper,detailed,message,e,join,attempt,return,false,else,logger,trace,master,failed,with,retrying,attempts,done,master,node,exceptions,helper,detailed,message,e,join,attempt,else,if,logger,is,trace,enabled,logger,trace,new,parameterized,message,failed,to,send,join,request,to,master,master,node,e,else,logger,info,failed,to,send,join,request,to,master,reason,master,node,exceptions,helper,detailed,message,e,return,false,try,thread,sleep,this,join,retry,delay,millis,catch,interrupted,exception,e,thread,current,thread,interrupt
ZenDiscovery -> private boolean joinElectedMaster(DiscoveryNode masterNode);1529687475;Join a newly elected master.__@return true if successful;private boolean joinElectedMaster(DiscoveryNode masterNode) {_        try {_            _            transportService.connectToNode(masterNode)__        } catch (Exception e) {_            logger.warn(() -> new ParameterizedMessage("failed to connect to master [{}], retrying...", masterNode), e)__            return false__        }_        int joinAttempt = 0_ _        while (true) {_            try {_                logger.trace("joining master {}", masterNode)__                membership.sendJoinRequestBlocking(masterNode, transportService.getLocalNode(), joinTimeout)__                return true__            } catch (Exception e) {_                final Throwable unwrap = ExceptionsHelper.unwrapCause(e)__                if (unwrap instanceof NotMasterException) {_                    if (++joinAttempt == this.joinRetryAttempts) {_                        logger.info("failed to send join request to master [{}], reason [{}], tried [{}] times", masterNode, ExceptionsHelper.detailedMessage(e), joinAttempt)__                        return false__                    } else {_                        logger.trace("master {} failed with [{}]. retrying... (attempts done: [{}])", masterNode, ExceptionsHelper.detailedMessage(e), joinAttempt)__                    }_                } else {_                    if (logger.isTraceEnabled()) {_                        logger.trace(() -> new ParameterizedMessage("failed to send join request to master [{}]", masterNode), e)__                    } else {_                        logger.info("failed to send join request to master [{}], reason [{}]", masterNode, ExceptionsHelper.detailedMessage(e))__                    }_                    return false__                }_            }__            try {_                Thread.sleep(this.joinRetryDelay.millis())__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()__            }_        }_    };join,a,newly,elected,master,return,true,if,successful;private,boolean,join,elected,master,discovery,node,master,node,try,transport,service,connect,to,node,master,node,catch,exception,e,logger,warn,new,parameterized,message,failed,to,connect,to,master,retrying,master,node,e,return,false,int,join,attempt,0,while,true,try,logger,trace,joining,master,master,node,membership,send,join,request,blocking,master,node,transport,service,get,local,node,join,timeout,return,true,catch,exception,e,final,throwable,unwrap,exceptions,helper,unwrap,cause,e,if,unwrap,instanceof,not,master,exception,if,join,attempt,this,join,retry,attempts,logger,info,failed,to,send,join,request,to,master,reason,tried,times,master,node,exceptions,helper,detailed,message,e,join,attempt,return,false,else,logger,trace,master,failed,with,retrying,attempts,done,master,node,exceptions,helper,detailed,message,e,join,attempt,else,if,logger,is,trace,enabled,logger,trace,new,parameterized,message,failed,to,send,join,request,to,master,master,node,e,else,logger,info,failed,to,send,join,request,to,master,reason,master,node,exceptions,helper,detailed,message,e,return,false,try,thread,sleep,this,join,retry,delay,millis,catch,interrupted,exception,e,thread,current,thread,interrupt
ZenDiscovery -> private boolean joinElectedMaster(DiscoveryNode masterNode);1533230566;Join a newly elected master.__@return true if successful;private boolean joinElectedMaster(DiscoveryNode masterNode) {_        try {_            _            transportService.connectToNode(masterNode)__        } catch (Exception e) {_            logger.warn(() -> new ParameterizedMessage("failed to connect to master [{}], retrying...", masterNode), e)__            return false__        }_        int joinAttempt = 0_ _        while (true) {_            try {_                logger.trace("joining master {}", masterNode)__                membership.sendJoinRequestBlocking(masterNode, transportService.getLocalNode(), joinTimeout)__                return true__            } catch (Exception e) {_                final Throwable unwrap = ExceptionsHelper.unwrapCause(e)__                if (unwrap instanceof NotMasterException) {_                    if (++joinAttempt == this.joinRetryAttempts) {_                        logger.info("failed to send join request to master [{}], reason [{}], tried [{}] times", masterNode, ExceptionsHelper.detailedMessage(e), joinAttempt)__                        return false__                    } else {_                        logger.trace("master {} failed with [{}]. retrying... (attempts done: [{}])", masterNode, ExceptionsHelper.detailedMessage(e), joinAttempt)__                    }_                } else {_                    if (logger.isTraceEnabled()) {_                        logger.trace(() -> new ParameterizedMessage("failed to send join request to master [{}]", masterNode), e)__                    } else {_                        logger.info("failed to send join request to master [{}], reason [{}]", masterNode, ExceptionsHelper.detailedMessage(e))__                    }_                    return false__                }_            }__            try {_                Thread.sleep(this.joinRetryDelay.millis())__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()__            }_        }_    };join,a,newly,elected,master,return,true,if,successful;private,boolean,join,elected,master,discovery,node,master,node,try,transport,service,connect,to,node,master,node,catch,exception,e,logger,warn,new,parameterized,message,failed,to,connect,to,master,retrying,master,node,e,return,false,int,join,attempt,0,while,true,try,logger,trace,joining,master,master,node,membership,send,join,request,blocking,master,node,transport,service,get,local,node,join,timeout,return,true,catch,exception,e,final,throwable,unwrap,exceptions,helper,unwrap,cause,e,if,unwrap,instanceof,not,master,exception,if,join,attempt,this,join,retry,attempts,logger,info,failed,to,send,join,request,to,master,reason,tried,times,master,node,exceptions,helper,detailed,message,e,join,attempt,return,false,else,logger,trace,master,failed,with,retrying,attempts,done,master,node,exceptions,helper,detailed,message,e,join,attempt,else,if,logger,is,trace,enabled,logger,trace,new,parameterized,message,failed,to,send,join,request,to,master,master,node,e,else,logger,info,failed,to,send,join,request,to,master,reason,master,node,exceptions,helper,detailed,message,e,return,false,try,thread,sleep,this,join,retry,delay,millis,catch,interrupted,exception,e,thread,current,thread,interrupt
ZenDiscovery -> private boolean joinElectedMaster(DiscoveryNode masterNode);1540847035;Join a newly elected master.__@return true if successful;private boolean joinElectedMaster(DiscoveryNode masterNode) {_        try {_            _            transportService.connectToNode(masterNode)__        } catch (Exception e) {_            logger.warn(() -> new ParameterizedMessage("failed to connect to master [{}], retrying...", masterNode), e)__            return false__        }_        int joinAttempt = 0_ _        while (true) {_            try {_                logger.trace("joining master {}", masterNode)__                membership.sendJoinRequestBlocking(masterNode, transportService.getLocalNode(), joinTimeout)__                return true__            } catch (Exception e) {_                final Throwable unwrap = ExceptionsHelper.unwrapCause(e)__                if (unwrap instanceof NotMasterException) {_                    if (++joinAttempt == this.joinRetryAttempts) {_                        logger.info("failed to send join request to master [{}], reason [{}], tried [{}] times", masterNode,_                            ExceptionsHelper.detailedMessage(e), joinAttempt)__                        return false__                    } else {_                        logger.trace("master {} failed with [{}]. retrying... (attempts done: [{}])", masterNode,_                            ExceptionsHelper.detailedMessage(e), joinAttempt)__                    }_                } else {_                    if (logger.isTraceEnabled()) {_                        logger.trace(() -> new ParameterizedMessage("failed to send join request to master [{}]", masterNode), e)__                    } else {_                        logger.info("failed to send join request to master [{}], reason [{}]", masterNode,_                            ExceptionsHelper.detailedMessage(e))__                    }_                    return false__                }_            }__            try {_                Thread.sleep(this.joinRetryDelay.millis())__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()__            }_        }_    };join,a,newly,elected,master,return,true,if,successful;private,boolean,join,elected,master,discovery,node,master,node,try,transport,service,connect,to,node,master,node,catch,exception,e,logger,warn,new,parameterized,message,failed,to,connect,to,master,retrying,master,node,e,return,false,int,join,attempt,0,while,true,try,logger,trace,joining,master,master,node,membership,send,join,request,blocking,master,node,transport,service,get,local,node,join,timeout,return,true,catch,exception,e,final,throwable,unwrap,exceptions,helper,unwrap,cause,e,if,unwrap,instanceof,not,master,exception,if,join,attempt,this,join,retry,attempts,logger,info,failed,to,send,join,request,to,master,reason,tried,times,master,node,exceptions,helper,detailed,message,e,join,attempt,return,false,else,logger,trace,master,failed,with,retrying,attempts,done,master,node,exceptions,helper,detailed,message,e,join,attempt,else,if,logger,is,trace,enabled,logger,trace,new,parameterized,message,failed,to,send,join,request,to,master,master,node,e,else,logger,info,failed,to,send,join,request,to,master,reason,master,node,exceptions,helper,detailed,message,e,return,false,try,thread,sleep,this,join,retry,delay,millis,catch,interrupted,exception,e,thread,current,thread,interrupt
ZenDiscovery -> private boolean joinElectedMaster(DiscoveryNode masterNode);1541008027;Join a newly elected master.__@return true if successful;private boolean joinElectedMaster(DiscoveryNode masterNode) {_        try {_            _            transportService.connectToNode(masterNode)__        } catch (Exception e) {_            logger.warn(() -> new ParameterizedMessage("failed to connect to master [{}], retrying...", masterNode), e)__            return false__        }_        int joinAttempt = 0_ _        while (true) {_            try {_                logger.trace("joining master {}", masterNode)__                membership.sendJoinRequestBlocking(masterNode, transportService.getLocalNode(), joinTimeout)__                return true__            } catch (Exception e) {_                final Throwable unwrap = ExceptionsHelper.unwrapCause(e)__                if (unwrap instanceof NotMasterException) {_                    if (++joinAttempt == this.joinRetryAttempts) {_                        logger.info("failed to send join request to master [{}], reason [{}], tried [{}] times", masterNode,_                            ExceptionsHelper.detailedMessage(e), joinAttempt)__                        return false__                    } else {_                        logger.trace("master {} failed with [{}]. retrying... (attempts done: [{}])", masterNode,_                            ExceptionsHelper.detailedMessage(e), joinAttempt)__                    }_                } else {_                    if (logger.isTraceEnabled()) {_                        logger.trace(() -> new ParameterizedMessage("failed to send join request to master [{}]", masterNode), e)__                    } else {_                        logger.info("failed to send join request to master [{}], reason [{}]", masterNode,_                            ExceptionsHelper.detailedMessage(e))__                    }_                    return false__                }_            }__            try {_                Thread.sleep(this.joinRetryDelay.millis())__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()__            }_        }_    };join,a,newly,elected,master,return,true,if,successful;private,boolean,join,elected,master,discovery,node,master,node,try,transport,service,connect,to,node,master,node,catch,exception,e,logger,warn,new,parameterized,message,failed,to,connect,to,master,retrying,master,node,e,return,false,int,join,attempt,0,while,true,try,logger,trace,joining,master,master,node,membership,send,join,request,blocking,master,node,transport,service,get,local,node,join,timeout,return,true,catch,exception,e,final,throwable,unwrap,exceptions,helper,unwrap,cause,e,if,unwrap,instanceof,not,master,exception,if,join,attempt,this,join,retry,attempts,logger,info,failed,to,send,join,request,to,master,reason,tried,times,master,node,exceptions,helper,detailed,message,e,join,attempt,return,false,else,logger,trace,master,failed,with,retrying,attempts,done,master,node,exceptions,helper,detailed,message,e,join,attempt,else,if,logger,is,trace,enabled,logger,trace,new,parameterized,message,failed,to,send,join,request,to,master,master,node,e,else,logger,info,failed,to,send,join,request,to,master,reason,master,node,exceptions,helper,detailed,message,e,return,false,try,thread,sleep,this,join,retry,delay,millis,catch,interrupted,exception,e,thread,current,thread,interrupt
ZenDiscovery -> private boolean joinElectedMaster(DiscoveryNode masterNode);1541092382;Join a newly elected master.__@return true if successful;private boolean joinElectedMaster(DiscoveryNode masterNode) {_        try {_            _            transportService.connectToNode(masterNode)__        } catch (Exception e) {_            logger.warn(() -> new ParameterizedMessage("failed to connect to master [{}], retrying...", masterNode), e)__            return false__        }_        int joinAttempt = 0_ _        while (true) {_            try {_                logger.trace("joining master {}", masterNode)__                membership.sendJoinRequestBlocking(masterNode, transportService.getLocalNode(), joinTimeout)__                return true__            } catch (Exception e) {_                final Throwable unwrap = ExceptionsHelper.unwrapCause(e)__                if (unwrap instanceof NotMasterException) {_                    if (++joinAttempt == this.joinRetryAttempts) {_                        logger.info("failed to send join request to master [{}], reason [{}], tried [{}] times", masterNode,_                            ExceptionsHelper.detailedMessage(e), joinAttempt)__                        return false__                    } else {_                        logger.trace("master {} failed with [{}]. retrying... (attempts done: [{}])", masterNode,_                            ExceptionsHelper.detailedMessage(e), joinAttempt)__                    }_                } else {_                    if (logger.isTraceEnabled()) {_                        logger.trace(() -> new ParameterizedMessage("failed to send join request to master [{}]", masterNode), e)__                    } else {_                        logger.info("failed to send join request to master [{}], reason [{}]", masterNode,_                            ExceptionsHelper.detailedMessage(e))__                    }_                    return false__                }_            }__            try {_                Thread.sleep(this.joinRetryDelay.millis())__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()__            }_        }_    };join,a,newly,elected,master,return,true,if,successful;private,boolean,join,elected,master,discovery,node,master,node,try,transport,service,connect,to,node,master,node,catch,exception,e,logger,warn,new,parameterized,message,failed,to,connect,to,master,retrying,master,node,e,return,false,int,join,attempt,0,while,true,try,logger,trace,joining,master,master,node,membership,send,join,request,blocking,master,node,transport,service,get,local,node,join,timeout,return,true,catch,exception,e,final,throwable,unwrap,exceptions,helper,unwrap,cause,e,if,unwrap,instanceof,not,master,exception,if,join,attempt,this,join,retry,attempts,logger,info,failed,to,send,join,request,to,master,reason,tried,times,master,node,exceptions,helper,detailed,message,e,join,attempt,return,false,else,logger,trace,master,failed,with,retrying,attempts,done,master,node,exceptions,helper,detailed,message,e,join,attempt,else,if,logger,is,trace,enabled,logger,trace,new,parameterized,message,failed,to,send,join,request,to,master,master,node,e,else,logger,info,failed,to,send,join,request,to,master,reason,master,node,exceptions,helper,detailed,message,e,return,false,try,thread,sleep,this,join,retry,delay,millis,catch,interrupted,exception,e,thread,current,thread,interrupt
ZenDiscovery -> private boolean joinElectedMaster(DiscoveryNode masterNode);1542646292;Join a newly elected master.__@return true if successful;private boolean joinElectedMaster(DiscoveryNode masterNode) {_        try {_            _            transportService.connectToNode(masterNode)__        } catch (Exception e) {_            logger.warn(() -> new ParameterizedMessage("failed to connect to master [{}], retrying...", masterNode), e)__            return false__        }_        int joinAttempt = 0_ _        while (true) {_            try {_                logger.trace("joining master {}", masterNode)__                membership.sendJoinRequestBlocking(masterNode, transportService.getLocalNode(), joinTimeout)__                return true__            } catch (Exception e) {_                final Throwable unwrap = ExceptionsHelper.unwrapCause(e)__                if (unwrap instanceof NotMasterException) {_                    if (++joinAttempt == this.joinRetryAttempts) {_                        logger.info("failed to send join request to master [{}], reason [{}], tried [{}] times", masterNode,_                            ExceptionsHelper.detailedMessage(e), joinAttempt)__                        return false__                    } else {_                        logger.trace("master {} failed with [{}]. retrying... (attempts done: [{}])", masterNode,_                            ExceptionsHelper.detailedMessage(e), joinAttempt)__                    }_                } else {_                    if (logger.isTraceEnabled()) {_                        logger.trace(() -> new ParameterizedMessage("failed to send join request to master [{}]", masterNode), e)__                    } else {_                        logger.info("failed to send join request to master [{}], reason [{}]", masterNode,_                            ExceptionsHelper.detailedMessage(e))__                    }_                    return false__                }_            }__            try {_                Thread.sleep(this.joinRetryDelay.millis())__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()__            }_        }_    };join,a,newly,elected,master,return,true,if,successful;private,boolean,join,elected,master,discovery,node,master,node,try,transport,service,connect,to,node,master,node,catch,exception,e,logger,warn,new,parameterized,message,failed,to,connect,to,master,retrying,master,node,e,return,false,int,join,attempt,0,while,true,try,logger,trace,joining,master,master,node,membership,send,join,request,blocking,master,node,transport,service,get,local,node,join,timeout,return,true,catch,exception,e,final,throwable,unwrap,exceptions,helper,unwrap,cause,e,if,unwrap,instanceof,not,master,exception,if,join,attempt,this,join,retry,attempts,logger,info,failed,to,send,join,request,to,master,reason,tried,times,master,node,exceptions,helper,detailed,message,e,join,attempt,return,false,else,logger,trace,master,failed,with,retrying,attempts,done,master,node,exceptions,helper,detailed,message,e,join,attempt,else,if,logger,is,trace,enabled,logger,trace,new,parameterized,message,failed,to,send,join,request,to,master,master,node,e,else,logger,info,failed,to,send,join,request,to,master,reason,master,node,exceptions,helper,detailed,message,e,return,false,try,thread,sleep,this,join,retry,delay,millis,catch,interrupted,exception,e,thread,current,thread,interrupt
ZenDiscovery -> private boolean joinElectedMaster(DiscoveryNode masterNode);1544081506;Join a newly elected master.__@return true if successful;private boolean joinElectedMaster(DiscoveryNode masterNode) {_        try {_            _            transportService.connectToNode(masterNode)__        } catch (Exception e) {_            logger.warn(() -> new ParameterizedMessage("failed to connect to master [{}], retrying...", masterNode), e)__            return false__        }_        int joinAttempt = 0_ _        while (true) {_            try {_                logger.trace("joining master {}", masterNode)__                membership.sendJoinRequestBlocking(masterNode, transportService.getLocalNode(), joinTimeout)__                return true__            } catch (Exception e) {_                final Throwable unwrap = ExceptionsHelper.unwrapCause(e)__                if (unwrap instanceof NotMasterException) {_                    if (++joinAttempt == this.joinRetryAttempts) {_                        logger.info("failed to send join request to master [{}], reason [{}], tried [{}] times", masterNode,_                            ExceptionsHelper.detailedMessage(e), joinAttempt)__                        return false__                    } else {_                        logger.trace("master {} failed with [{}]. retrying... (attempts done: [{}])", masterNode,_                            ExceptionsHelper.detailedMessage(e), joinAttempt)__                    }_                } else {_                    if (logger.isTraceEnabled()) {_                        logger.trace(() -> new ParameterizedMessage("failed to send join request to master [{}]", masterNode), e)__                    } else {_                        logger.info("failed to send join request to master [{}], reason [{}]", masterNode,_                            ExceptionsHelper.detailedMessage(e))__                    }_                    return false__                }_            }__            try {_                Thread.sleep(this.joinRetryDelay.millis())__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()__            }_        }_    };join,a,newly,elected,master,return,true,if,successful;private,boolean,join,elected,master,discovery,node,master,node,try,transport,service,connect,to,node,master,node,catch,exception,e,logger,warn,new,parameterized,message,failed,to,connect,to,master,retrying,master,node,e,return,false,int,join,attempt,0,while,true,try,logger,trace,joining,master,master,node,membership,send,join,request,blocking,master,node,transport,service,get,local,node,join,timeout,return,true,catch,exception,e,final,throwable,unwrap,exceptions,helper,unwrap,cause,e,if,unwrap,instanceof,not,master,exception,if,join,attempt,this,join,retry,attempts,logger,info,failed,to,send,join,request,to,master,reason,tried,times,master,node,exceptions,helper,detailed,message,e,join,attempt,return,false,else,logger,trace,master,failed,with,retrying,attempts,done,master,node,exceptions,helper,detailed,message,e,join,attempt,else,if,logger,is,trace,enabled,logger,trace,new,parameterized,message,failed,to,send,join,request,to,master,master,node,e,else,logger,info,failed,to,send,join,request,to,master,reason,master,node,exceptions,helper,detailed,message,e,return,false,try,thread,sleep,this,join,retry,delay,millis,catch,interrupted,exception,e,thread,current,thread,interrupt
ZenDiscovery -> private boolean joinElectedMaster(DiscoveryNode masterNode);1546850547;Join a newly elected master.__@return true if successful;private boolean joinElectedMaster(DiscoveryNode masterNode) {_        try {_            _            transportService.connectToNode(masterNode)__        } catch (Exception e) {_            logger.warn(() -> new ParameterizedMessage("failed to connect to master [{}], retrying...", masterNode), e)__            return false__        }_        int joinAttempt = 0_ _        while (true) {_            try {_                logger.trace("joining master {}", masterNode)__                membership.sendJoinRequestBlocking(masterNode, transportService.getLocalNode(), joinTimeout)__                return true__            } catch (Exception e) {_                final Throwable unwrap = ExceptionsHelper.unwrapCause(e)__                if (unwrap instanceof NotMasterException) {_                    if (++joinAttempt == this.joinRetryAttempts) {_                        logger.info("failed to send join request to master [{}], reason [{}], tried [{}] times", masterNode,_                            ExceptionsHelper.detailedMessage(e), joinAttempt)__                        return false__                    } else {_                        logger.trace("master {} failed with [{}]. retrying... (attempts done: [{}])", masterNode,_                            ExceptionsHelper.detailedMessage(e), joinAttempt)__                    }_                } else {_                    if (logger.isTraceEnabled()) {_                        logger.trace(() -> new ParameterizedMessage("failed to send join request to master [{}]", masterNode), e)__                    } else {_                        logger.info("failed to send join request to master [{}], reason [{}]", masterNode,_                            ExceptionsHelper.detailedMessage(e))__                    }_                    return false__                }_            }__            try {_                Thread.sleep(this.joinRetryDelay.millis())__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()__            }_        }_    };join,a,newly,elected,master,return,true,if,successful;private,boolean,join,elected,master,discovery,node,master,node,try,transport,service,connect,to,node,master,node,catch,exception,e,logger,warn,new,parameterized,message,failed,to,connect,to,master,retrying,master,node,e,return,false,int,join,attempt,0,while,true,try,logger,trace,joining,master,master,node,membership,send,join,request,blocking,master,node,transport,service,get,local,node,join,timeout,return,true,catch,exception,e,final,throwable,unwrap,exceptions,helper,unwrap,cause,e,if,unwrap,instanceof,not,master,exception,if,join,attempt,this,join,retry,attempts,logger,info,failed,to,send,join,request,to,master,reason,tried,times,master,node,exceptions,helper,detailed,message,e,join,attempt,return,false,else,logger,trace,master,failed,with,retrying,attempts,done,master,node,exceptions,helper,detailed,message,e,join,attempt,else,if,logger,is,trace,enabled,logger,trace,new,parameterized,message,failed,to,send,join,request,to,master,master,node,e,else,logger,info,failed,to,send,join,request,to,master,reason,master,node,exceptions,helper,detailed,message,e,return,false,try,thread,sleep,this,join,retry,delay,millis,catch,interrupted,exception,e,thread,current,thread,interrupt
ZenDiscovery -> private boolean joinElectedMaster(DiscoveryNode masterNode);1547121470;Join a newly elected master.__@return true if successful;private boolean joinElectedMaster(DiscoveryNode masterNode) {_        try {_            _            transportService.connectToNode(masterNode)__        } catch (Exception e) {_            logger.warn(() -> new ParameterizedMessage("failed to connect to master [{}], retrying...", masterNode), e)__            return false__        }_        int joinAttempt = 0_ _        while (true) {_            try {_                logger.trace("joining master {}", masterNode)__                membership.sendJoinRequestBlocking(masterNode, transportService.getLocalNode(), joinTimeout)__                return true__            } catch (Exception e) {_                final Throwable unwrap = ExceptionsHelper.unwrapCause(e)__                if (unwrap instanceof NotMasterException) {_                    if (++joinAttempt == this.joinRetryAttempts) {_                        logger.info("failed to send join request to master [{}], reason [{}], tried [{}] times", masterNode,_                            ExceptionsHelper.detailedMessage(e), joinAttempt)__                        return false__                    } else {_                        logger.trace("master {} failed with [{}]. retrying... (attempts done: [{}])", masterNode,_                            ExceptionsHelper.detailedMessage(e), joinAttempt)__                    }_                } else {_                    if (logger.isTraceEnabled()) {_                        logger.trace(() -> new ParameterizedMessage("failed to send join request to master [{}]", masterNode), e)__                    } else {_                        logger.info("failed to send join request to master [{}], reason [{}]", masterNode,_                            ExceptionsHelper.detailedMessage(e))__                    }_                    return false__                }_            }__            try {_                Thread.sleep(this.joinRetryDelay.millis())__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()__            }_        }_    };join,a,newly,elected,master,return,true,if,successful;private,boolean,join,elected,master,discovery,node,master,node,try,transport,service,connect,to,node,master,node,catch,exception,e,logger,warn,new,parameterized,message,failed,to,connect,to,master,retrying,master,node,e,return,false,int,join,attempt,0,while,true,try,logger,trace,joining,master,master,node,membership,send,join,request,blocking,master,node,transport,service,get,local,node,join,timeout,return,true,catch,exception,e,final,throwable,unwrap,exceptions,helper,unwrap,cause,e,if,unwrap,instanceof,not,master,exception,if,join,attempt,this,join,retry,attempts,logger,info,failed,to,send,join,request,to,master,reason,tried,times,master,node,exceptions,helper,detailed,message,e,join,attempt,return,false,else,logger,trace,master,failed,with,retrying,attempts,done,master,node,exceptions,helper,detailed,message,e,join,attempt,else,if,logger,is,trace,enabled,logger,trace,new,parameterized,message,failed,to,send,join,request,to,master,master,node,e,else,logger,info,failed,to,send,join,request,to,master,reason,master,node,exceptions,helper,detailed,message,e,return,false,try,thread,sleep,this,join,retry,delay,millis,catch,interrupted,exception,e,thread,current,thread,interrupt
ZenDiscovery -> private boolean joinElectedMaster(DiscoveryNode masterNode);1547625930;Join a newly elected master.__@return true if successful;private boolean joinElectedMaster(DiscoveryNode masterNode) {_        try {_            _            transportService.connectToNode(masterNode)__        } catch (Exception e) {_            logger.warn(() -> new ParameterizedMessage("failed to connect to master [{}], retrying...", masterNode), e)__            return false__        }_        int joinAttempt = 0_ _        while (true) {_            try {_                logger.trace("joining master {}", masterNode)__                membership.sendJoinRequestBlocking(masterNode, transportService.getLocalNode(), joinTimeout)__                return true__            } catch (Exception e) {_                final Throwable unwrap = ExceptionsHelper.unwrapCause(e)__                if (unwrap instanceof NotMasterException) {_                    if (++joinAttempt == this.joinRetryAttempts) {_                        logger.info("failed to send join request to master [{}], reason [{}], tried [{}] times", masterNode,_                            ExceptionsHelper.detailedMessage(e), joinAttempt)__                        return false__                    } else {_                        logger.trace("master {} failed with [{}]. retrying... (attempts done: [{}])", masterNode,_                            ExceptionsHelper.detailedMessage(e), joinAttempt)__                    }_                } else {_                    if (logger.isTraceEnabled()) {_                        logger.trace(() -> new ParameterizedMessage("failed to send join request to master [{}]", masterNode), e)__                    } else {_                        logger.info("failed to send join request to master [{}], reason [{}]", masterNode,_                            ExceptionsHelper.detailedMessage(e))__                    }_                    return false__                }_            }__            try {_                Thread.sleep(this.joinRetryDelay.millis())__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()__            }_        }_    };join,a,newly,elected,master,return,true,if,successful;private,boolean,join,elected,master,discovery,node,master,node,try,transport,service,connect,to,node,master,node,catch,exception,e,logger,warn,new,parameterized,message,failed,to,connect,to,master,retrying,master,node,e,return,false,int,join,attempt,0,while,true,try,logger,trace,joining,master,master,node,membership,send,join,request,blocking,master,node,transport,service,get,local,node,join,timeout,return,true,catch,exception,e,final,throwable,unwrap,exceptions,helper,unwrap,cause,e,if,unwrap,instanceof,not,master,exception,if,join,attempt,this,join,retry,attempts,logger,info,failed,to,send,join,request,to,master,reason,tried,times,master,node,exceptions,helper,detailed,message,e,join,attempt,return,false,else,logger,trace,master,failed,with,retrying,attempts,done,master,node,exceptions,helper,detailed,message,e,join,attempt,else,if,logger,is,trace,enabled,logger,trace,new,parameterized,message,failed,to,send,join,request,to,master,master,node,e,else,logger,info,failed,to,send,join,request,to,master,reason,master,node,exceptions,helper,detailed,message,e,return,false,try,thread,sleep,this,join,retry,delay,millis,catch,interrupted,exception,e,thread,current,thread,interrupt
ZenDiscovery -> private boolean joinElectedMaster(DiscoveryNode masterNode);1548320260;Join a newly elected master.__@return true if successful;private boolean joinElectedMaster(DiscoveryNode masterNode) {_        try {_            _            transportService.connectToNode(masterNode)__        } catch (Exception e) {_            logger.warn(() -> new ParameterizedMessage("failed to connect to master [{}], retrying...", masterNode), e)__            return false__        }_        int joinAttempt = 0_ _        while (true) {_            try {_                logger.trace("joining master {}", masterNode)__                membership.sendJoinRequestBlocking(masterNode, transportService.getLocalNode(), joinTimeout)__                return true__            } catch (Exception e) {_                final Throwable unwrap = ExceptionsHelper.unwrapCause(e)__                if (unwrap instanceof NotMasterException) {_                    if (++joinAttempt == this.joinRetryAttempts) {_                        logger.info("failed to send join request to master [{}], reason [{}], tried [{}] times", masterNode,_                            ExceptionsHelper.detailedMessage(e), joinAttempt)__                        return false__                    } else {_                        logger.trace("master {} failed with [{}]. retrying... (attempts done: [{}])", masterNode,_                            ExceptionsHelper.detailedMessage(e), joinAttempt)__                    }_                } else {_                    if (logger.isTraceEnabled()) {_                        logger.trace(() -> new ParameterizedMessage("failed to send join request to master [{}]", masterNode), e)__                    } else {_                        logger.info("failed to send join request to master [{}], reason [{}]", masterNode,_                            ExceptionsHelper.detailedMessage(e))__                    }_                    return false__                }_            }__            try {_                Thread.sleep(this.joinRetryDelay.millis())__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()__            }_        }_    };join,a,newly,elected,master,return,true,if,successful;private,boolean,join,elected,master,discovery,node,master,node,try,transport,service,connect,to,node,master,node,catch,exception,e,logger,warn,new,parameterized,message,failed,to,connect,to,master,retrying,master,node,e,return,false,int,join,attempt,0,while,true,try,logger,trace,joining,master,master,node,membership,send,join,request,blocking,master,node,transport,service,get,local,node,join,timeout,return,true,catch,exception,e,final,throwable,unwrap,exceptions,helper,unwrap,cause,e,if,unwrap,instanceof,not,master,exception,if,join,attempt,this,join,retry,attempts,logger,info,failed,to,send,join,request,to,master,reason,tried,times,master,node,exceptions,helper,detailed,message,e,join,attempt,return,false,else,logger,trace,master,failed,with,retrying,attempts,done,master,node,exceptions,helper,detailed,message,e,join,attempt,else,if,logger,is,trace,enabled,logger,trace,new,parameterized,message,failed,to,send,join,request,to,master,master,node,e,else,logger,info,failed,to,send,join,request,to,master,reason,master,node,exceptions,helper,detailed,message,e,return,false,try,thread,sleep,this,join,retry,delay,millis,catch,interrupted,exception,e,thread,current,thread,interrupt
ZenDiscovery -> private boolean joinElectedMaster(DiscoveryNode masterNode);1549270328;Join a newly elected master.__@return true if successful;private boolean joinElectedMaster(DiscoveryNode masterNode) {_        try {_            _            transportService.connectToNode(masterNode)__        } catch (Exception e) {_            logger.warn(() -> new ParameterizedMessage("failed to connect to master [{}], retrying...", masterNode), e)__            return false__        }_        int joinAttempt = 0_ _        while (true) {_            try {_                logger.trace("joining master {}", masterNode)__                membership.sendJoinRequestBlocking(masterNode, transportService.getLocalNode(), joinTimeout)__                return true__            } catch (Exception e) {_                final Throwable unwrap = ExceptionsHelper.unwrapCause(e)__                if (unwrap instanceof NotMasterException) {_                    if (++joinAttempt == this.joinRetryAttempts) {_                        logger.info("failed to send join request to master [{}], reason [{}], tried [{}] times", masterNode,_                            ExceptionsHelper.detailedMessage(e), joinAttempt)__                        return false__                    } else {_                        logger.trace("master {} failed with [{}]. retrying... (attempts done: [{}])", masterNode,_                            ExceptionsHelper.detailedMessage(e), joinAttempt)__                    }_                } else {_                    if (logger.isTraceEnabled()) {_                        logger.trace(() -> new ParameterizedMessage("failed to send join request to master [{}]", masterNode), e)__                    } else {_                        logger.info("failed to send join request to master [{}], reason [{}]", masterNode,_                            ExceptionsHelper.detailedMessage(e))__                    }_                    return false__                }_            }__            try {_                Thread.sleep(this.joinRetryDelay.millis())__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()__            }_        }_    };join,a,newly,elected,master,return,true,if,successful;private,boolean,join,elected,master,discovery,node,master,node,try,transport,service,connect,to,node,master,node,catch,exception,e,logger,warn,new,parameterized,message,failed,to,connect,to,master,retrying,master,node,e,return,false,int,join,attempt,0,while,true,try,logger,trace,joining,master,master,node,membership,send,join,request,blocking,master,node,transport,service,get,local,node,join,timeout,return,true,catch,exception,e,final,throwable,unwrap,exceptions,helper,unwrap,cause,e,if,unwrap,instanceof,not,master,exception,if,join,attempt,this,join,retry,attempts,logger,info,failed,to,send,join,request,to,master,reason,tried,times,master,node,exceptions,helper,detailed,message,e,join,attempt,return,false,else,logger,trace,master,failed,with,retrying,attempts,done,master,node,exceptions,helper,detailed,message,e,join,attempt,else,if,logger,is,trace,enabled,logger,trace,new,parameterized,message,failed,to,send,join,request,to,master,master,node,e,else,logger,info,failed,to,send,join,request,to,master,reason,master,node,exceptions,helper,detailed,message,e,return,false,try,thread,sleep,this,join,retry,delay,millis,catch,interrupted,exception,e,thread,current,thread,interrupt
ZenDiscovery -> private boolean joinElectedMaster(DiscoveryNode masterNode);1549356476;Join a newly elected master.__@return true if successful;private boolean joinElectedMaster(DiscoveryNode masterNode) {_        try {_            _            transportService.connectToNode(masterNode)__        } catch (Exception e) {_            logger.warn(() -> new ParameterizedMessage("failed to connect to master [{}], retrying...", masterNode), e)__            return false__        }_        int joinAttempt = 0_ _        while (true) {_            try {_                logger.trace("joining master {}", masterNode)__                membership.sendJoinRequestBlocking(masterNode, transportService.getLocalNode(), joinTimeout)__                return true__            } catch (Exception e) {_                final Throwable unwrap = ExceptionsHelper.unwrapCause(e)__                if (unwrap instanceof NotMasterException) {_                    if (++joinAttempt == this.joinRetryAttempts) {_                        logger.info("failed to send join request to master [{}], reason [{}], tried [{}] times", masterNode,_                            ExceptionsHelper.detailedMessage(e), joinAttempt)__                        return false__                    } else {_                        logger.trace("master {} failed with [{}]. retrying... (attempts done: [{}])", masterNode,_                            ExceptionsHelper.detailedMessage(e), joinAttempt)__                    }_                } else {_                    if (logger.isTraceEnabled()) {_                        logger.trace(() -> new ParameterizedMessage("failed to send join request to master [{}]", masterNode), e)__                    } else {_                        logger.info("failed to send join request to master [{}], reason [{}]", masterNode,_                            ExceptionsHelper.detailedMessage(e))__                    }_                    return false__                }_            }__            try {_                Thread.sleep(this.joinRetryDelay.millis())__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()__            }_        }_    };join,a,newly,elected,master,return,true,if,successful;private,boolean,join,elected,master,discovery,node,master,node,try,transport,service,connect,to,node,master,node,catch,exception,e,logger,warn,new,parameterized,message,failed,to,connect,to,master,retrying,master,node,e,return,false,int,join,attempt,0,while,true,try,logger,trace,joining,master,master,node,membership,send,join,request,blocking,master,node,transport,service,get,local,node,join,timeout,return,true,catch,exception,e,final,throwable,unwrap,exceptions,helper,unwrap,cause,e,if,unwrap,instanceof,not,master,exception,if,join,attempt,this,join,retry,attempts,logger,info,failed,to,send,join,request,to,master,reason,tried,times,master,node,exceptions,helper,detailed,message,e,join,attempt,return,false,else,logger,trace,master,failed,with,retrying,attempts,done,master,node,exceptions,helper,detailed,message,e,join,attempt,else,if,logger,is,trace,enabled,logger,trace,new,parameterized,message,failed,to,send,join,request,to,master,master,node,e,else,logger,info,failed,to,send,join,request,to,master,reason,master,node,exceptions,helper,detailed,message,e,return,false,try,thread,sleep,this,join,retry,delay,millis,catch,interrupted,exception,e,thread,current,thread,interrupt
ZenDiscovery -> private boolean joinElectedMaster(DiscoveryNode masterNode);1549452878;Join a newly elected master.__@return true if successful;private boolean joinElectedMaster(DiscoveryNode masterNode) {_        try {_            _            transportService.connectToNode(masterNode)__        } catch (Exception e) {_            logger.warn(() -> new ParameterizedMessage("failed to connect to master [{}], retrying...", masterNode), e)__            return false__        }_        int joinAttempt = 0_ _        while (true) {_            try {_                logger.trace("joining master {}", masterNode)__                membership.sendJoinRequestBlocking(masterNode, transportService.getLocalNode(), joinTimeout)__                return true__            } catch (Exception e) {_                final Throwable unwrap = ExceptionsHelper.unwrapCause(e)__                if (unwrap instanceof NotMasterException) {_                    if (++joinAttempt == this.joinRetryAttempts) {_                        logger.info("failed to send join request to master [{}], reason [{}], tried [{}] times", masterNode,_                            ExceptionsHelper.detailedMessage(e), joinAttempt)__                        return false__                    } else {_                        logger.trace("master {} failed with [{}]. retrying... (attempts done: [{}])", masterNode,_                            ExceptionsHelper.detailedMessage(e), joinAttempt)__                    }_                } else {_                    if (logger.isTraceEnabled()) {_                        logger.trace(() -> new ParameterizedMessage("failed to send join request to master [{}]", masterNode), e)__                    } else {_                        logger.info("failed to send join request to master [{}], reason [{}]", masterNode,_                            ExceptionsHelper.detailedMessage(e))__                    }_                    return false__                }_            }__            try {_                Thread.sleep(this.joinRetryDelay.millis())__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()__            }_        }_    };join,a,newly,elected,master,return,true,if,successful;private,boolean,join,elected,master,discovery,node,master,node,try,transport,service,connect,to,node,master,node,catch,exception,e,logger,warn,new,parameterized,message,failed,to,connect,to,master,retrying,master,node,e,return,false,int,join,attempt,0,while,true,try,logger,trace,joining,master,master,node,membership,send,join,request,blocking,master,node,transport,service,get,local,node,join,timeout,return,true,catch,exception,e,final,throwable,unwrap,exceptions,helper,unwrap,cause,e,if,unwrap,instanceof,not,master,exception,if,join,attempt,this,join,retry,attempts,logger,info,failed,to,send,join,request,to,master,reason,tried,times,master,node,exceptions,helper,detailed,message,e,join,attempt,return,false,else,logger,trace,master,failed,with,retrying,attempts,done,master,node,exceptions,helper,detailed,message,e,join,attempt,else,if,logger,is,trace,enabled,logger,trace,new,parameterized,message,failed,to,send,join,request,to,master,master,node,e,else,logger,info,failed,to,send,join,request,to,master,reason,master,node,exceptions,helper,detailed,message,e,return,false,try,thread,sleep,this,join,retry,delay,millis,catch,interrupted,exception,e,thread,current,thread,interrupt
ZenDiscovery -> JoinThreadControl -> public boolean markThreadAsDone(Thread joinThread);1524684173;marks the given joinThread as completed. Returns false if the supplied thread is not the currently active join thread;public boolean markThreadAsDone(Thread joinThread) {_            assert Thread.holdsLock(stateMutex)__            return currentJoinThread.compareAndSet(joinThread, null)__        };marks,the,given,join,thread,as,completed,returns,false,if,the,supplied,thread,is,not,the,currently,active,join,thread;public,boolean,mark,thread,as,done,thread,join,thread,assert,thread,holds,lock,state,mutex,return,current,join,thread,compare,and,set,join,thread,null
ZenDiscovery -> JoinThreadControl -> public boolean markThreadAsDone(Thread joinThread);1525798022;marks the given joinThread as completed. Returns false if the supplied thread is not the currently active join thread;public boolean markThreadAsDone(Thread joinThread) {_            assert Thread.holdsLock(stateMutex)__            return currentJoinThread.compareAndSet(joinThread, null)__        };marks,the,given,join,thread,as,completed,returns,false,if,the,supplied,thread,is,not,the,currently,active,join,thread;public,boolean,mark,thread,as,done,thread,join,thread,assert,thread,holds,lock,state,mutex,return,current,join,thread,compare,and,set,join,thread,null
ZenDiscovery -> JoinThreadControl -> public boolean markThreadAsDone(Thread joinThread);1527096592;marks the given joinThread as completed. Returns false if the supplied thread is not the currently active join thread;public boolean markThreadAsDone(Thread joinThread) {_            assert Thread.holdsLock(stateMutex)__            return currentJoinThread.compareAndSet(joinThread, null)__        };marks,the,given,join,thread,as,completed,returns,false,if,the,supplied,thread,is,not,the,currently,active,join,thread;public,boolean,mark,thread,as,done,thread,join,thread,assert,thread,holds,lock,state,mutex,return,current,join,thread,compare,and,set,join,thread,null
ZenDiscovery -> JoinThreadControl -> public boolean markThreadAsDone(Thread joinThread);1527152864;marks the given joinThread as completed. Returns false if the supplied thread is not the currently active join thread;public boolean markThreadAsDone(Thread joinThread) {_            assert Thread.holdsLock(stateMutex)__            return currentJoinThread.compareAndSet(joinThread, null)__        };marks,the,given,join,thread,as,completed,returns,false,if,the,supplied,thread,is,not,the,currently,active,join,thread;public,boolean,mark,thread,as,done,thread,join,thread,assert,thread,holds,lock,state,mutex,return,current,join,thread,compare,and,set,join,thread,null
ZenDiscovery -> JoinThreadControl -> public boolean markThreadAsDone(Thread joinThread);1529687475;marks the given joinThread as completed. Returns false if the supplied thread is not the currently active join thread;public boolean markThreadAsDone(Thread joinThread) {_            assert Thread.holdsLock(stateMutex)__            return currentJoinThread.compareAndSet(joinThread, null)__        };marks,the,given,join,thread,as,completed,returns,false,if,the,supplied,thread,is,not,the,currently,active,join,thread;public,boolean,mark,thread,as,done,thread,join,thread,assert,thread,holds,lock,state,mutex,return,current,join,thread,compare,and,set,join,thread,null
ZenDiscovery -> JoinThreadControl -> public boolean markThreadAsDone(Thread joinThread);1533230566;marks the given joinThread as completed. Returns false if the supplied thread is not the currently active join thread;public boolean markThreadAsDone(Thread joinThread) {_            assert Thread.holdsLock(stateMutex)__            return currentJoinThread.compareAndSet(joinThread, null)__        };marks,the,given,join,thread,as,completed,returns,false,if,the,supplied,thread,is,not,the,currently,active,join,thread;public,boolean,mark,thread,as,done,thread,join,thread,assert,thread,holds,lock,state,mutex,return,current,join,thread,compare,and,set,join,thread,null
ZenDiscovery -> JoinThreadControl -> public boolean markThreadAsDone(Thread joinThread);1540847035;marks the given joinThread as completed. Returns false if the supplied thread is not the currently active join thread;public boolean markThreadAsDone(Thread joinThread) {_            assert Thread.holdsLock(stateMutex)__            return currentJoinThread.compareAndSet(joinThread, null)__        };marks,the,given,join,thread,as,completed,returns,false,if,the,supplied,thread,is,not,the,currently,active,join,thread;public,boolean,mark,thread,as,done,thread,join,thread,assert,thread,holds,lock,state,mutex,return,current,join,thread,compare,and,set,join,thread,null
ZenDiscovery -> JoinThreadControl -> public boolean markThreadAsDone(Thread joinThread);1541008027;marks the given joinThread as completed. Returns false if the supplied thread is not the currently active join thread;public boolean markThreadAsDone(Thread joinThread) {_            assert Thread.holdsLock(stateMutex)__            return currentJoinThread.compareAndSet(joinThread, null)__        };marks,the,given,join,thread,as,completed,returns,false,if,the,supplied,thread,is,not,the,currently,active,join,thread;public,boolean,mark,thread,as,done,thread,join,thread,assert,thread,holds,lock,state,mutex,return,current,join,thread,compare,and,set,join,thread,null
ZenDiscovery -> JoinThreadControl -> public boolean markThreadAsDone(Thread joinThread);1541092382;marks the given joinThread as completed. Returns false if the supplied thread is not the currently active join thread;public boolean markThreadAsDone(Thread joinThread) {_            assert Thread.holdsLock(stateMutex)__            return currentJoinThread.compareAndSet(joinThread, null)__        };marks,the,given,join,thread,as,completed,returns,false,if,the,supplied,thread,is,not,the,currently,active,join,thread;public,boolean,mark,thread,as,done,thread,join,thread,assert,thread,holds,lock,state,mutex,return,current,join,thread,compare,and,set,join,thread,null
ZenDiscovery -> JoinThreadControl -> public boolean markThreadAsDone(Thread joinThread);1542646292;marks the given joinThread as completed. Returns false if the supplied thread is not the currently active join thread;public boolean markThreadAsDone(Thread joinThread) {_            assert Thread.holdsLock(stateMutex)__            return currentJoinThread.compareAndSet(joinThread, null)__        };marks,the,given,join,thread,as,completed,returns,false,if,the,supplied,thread,is,not,the,currently,active,join,thread;public,boolean,mark,thread,as,done,thread,join,thread,assert,thread,holds,lock,state,mutex,return,current,join,thread,compare,and,set,join,thread,null
ZenDiscovery -> JoinThreadControl -> public boolean markThreadAsDone(Thread joinThread);1544081506;marks the given joinThread as completed. Returns false if the supplied thread is not the currently active join thread;public boolean markThreadAsDone(Thread joinThread) {_            assert Thread.holdsLock(stateMutex)__            return currentJoinThread.compareAndSet(joinThread, null)__        };marks,the,given,join,thread,as,completed,returns,false,if,the,supplied,thread,is,not,the,currently,active,join,thread;public,boolean,mark,thread,as,done,thread,join,thread,assert,thread,holds,lock,state,mutex,return,current,join,thread,compare,and,set,join,thread,null
ZenDiscovery -> JoinThreadControl -> public boolean markThreadAsDone(Thread joinThread);1546850547;marks the given joinThread as completed. Returns false if the supplied thread is not the currently active join thread;public boolean markThreadAsDone(Thread joinThread) {_            assert Thread.holdsLock(stateMutex)__            return currentJoinThread.compareAndSet(joinThread, null)__        };marks,the,given,join,thread,as,completed,returns,false,if,the,supplied,thread,is,not,the,currently,active,join,thread;public,boolean,mark,thread,as,done,thread,join,thread,assert,thread,holds,lock,state,mutex,return,current,join,thread,compare,and,set,join,thread,null
ZenDiscovery -> JoinThreadControl -> public boolean markThreadAsDone(Thread joinThread);1547121470;marks the given joinThread as completed. Returns false if the supplied thread is not the currently active join thread;public boolean markThreadAsDone(Thread joinThread) {_            assert Thread.holdsLock(stateMutex)__            return currentJoinThread.compareAndSet(joinThread, null)__        };marks,the,given,join,thread,as,completed,returns,false,if,the,supplied,thread,is,not,the,currently,active,join,thread;public,boolean,mark,thread,as,done,thread,join,thread,assert,thread,holds,lock,state,mutex,return,current,join,thread,compare,and,set,join,thread,null
ZenDiscovery -> JoinThreadControl -> public boolean markThreadAsDone(Thread joinThread);1547625930;marks the given joinThread as completed. Returns false if the supplied thread is not the currently active join thread;public boolean markThreadAsDone(Thread joinThread) {_            assert Thread.holdsLock(stateMutex)__            return currentJoinThread.compareAndSet(joinThread, null)__        };marks,the,given,join,thread,as,completed,returns,false,if,the,supplied,thread,is,not,the,currently,active,join,thread;public,boolean,mark,thread,as,done,thread,join,thread,assert,thread,holds,lock,state,mutex,return,current,join,thread,compare,and,set,join,thread,null
ZenDiscovery -> JoinThreadControl -> public boolean markThreadAsDone(Thread joinThread);1548320260;marks the given joinThread as completed. Returns false if the supplied thread is not the currently active join thread;public boolean markThreadAsDone(Thread joinThread) {_            assert Thread.holdsLock(stateMutex)__            return currentJoinThread.compareAndSet(joinThread, null)__        };marks,the,given,join,thread,as,completed,returns,false,if,the,supplied,thread,is,not,the,currently,active,join,thread;public,boolean,mark,thread,as,done,thread,join,thread,assert,thread,holds,lock,state,mutex,return,current,join,thread,compare,and,set,join,thread,null
ZenDiscovery -> JoinThreadControl -> public boolean markThreadAsDone(Thread joinThread);1549270328;marks the given joinThread as completed. Returns false if the supplied thread is not the currently active join thread;public boolean markThreadAsDone(Thread joinThread) {_            assert Thread.holdsLock(stateMutex)__            return currentJoinThread.compareAndSet(joinThread, null)__        };marks,the,given,join,thread,as,completed,returns,false,if,the,supplied,thread,is,not,the,currently,active,join,thread;public,boolean,mark,thread,as,done,thread,join,thread,assert,thread,holds,lock,state,mutex,return,current,join,thread,compare,and,set,join,thread,null
ZenDiscovery -> JoinThreadControl -> public boolean markThreadAsDone(Thread joinThread);1549356476;marks the given joinThread as completed. Returns false if the supplied thread is not the currently active join thread;public boolean markThreadAsDone(Thread joinThread) {_            assert Thread.holdsLock(stateMutex)__            return currentJoinThread.compareAndSet(joinThread, null)__        };marks,the,given,join,thread,as,completed,returns,false,if,the,supplied,thread,is,not,the,currently,active,join,thread;public,boolean,mark,thread,as,done,thread,join,thread,assert,thread,holds,lock,state,mutex,return,current,join,thread,compare,and,set,join,thread,null
ZenDiscovery -> JoinThreadControl -> public boolean markThreadAsDone(Thread joinThread);1549452878;marks the given joinThread as completed. Returns false if the supplied thread is not the currently active join thread;public boolean markThreadAsDone(Thread joinThread) {_            assert Thread.holdsLock(stateMutex)__            return currentJoinThread.compareAndSet(joinThread, null)__        };marks,the,given,join,thread,as,completed,returns,false,if,the,supplied,thread,is,not,the,currently,active,join,thread;public,boolean,mark,thread,as,done,thread,join,thread,assert,thread,holds,lock,state,mutex,return,current,join,thread,compare,and,set,join,thread,null
ZenDiscovery -> JoinThreadControl -> public void startNewThreadIfNotRunning();1524684173;starts a new joining thread if there is no currently active one and join thread controlling is started;public void startNewThreadIfNotRunning() {_            assert Thread.holdsLock(stateMutex)__            if (joinThreadActive()) {_                return__            }_            threadPool.generic().execute(new Runnable() {_                @Override_                public void run() {_                    Thread currentThread = Thread.currentThread()__                    if (!currentJoinThread.compareAndSet(null, currentThread)) {_                        return__                    }_                    while (running.get() && joinThreadActive(currentThread)) {_                        try {_                            innerJoinCluster()__                            return__                        } catch (Exception e) {_                            logger.error("unexpected error while joining cluster, trying again", e)__                            _                            _                            _                            assert ExceptionsHelper.reThrowIfNotNull(e)__                        }_                    }_                    _                }_            })__        };starts,a,new,joining,thread,if,there,is,no,currently,active,one,and,join,thread,controlling,is,started;public,void,start,new,thread,if,not,running,assert,thread,holds,lock,state,mutex,if,join,thread,active,return,thread,pool,generic,execute,new,runnable,override,public,void,run,thread,current,thread,thread,current,thread,if,current,join,thread,compare,and,set,null,current,thread,return,while,running,get,join,thread,active,current,thread,try,inner,join,cluster,return,catch,exception,e,logger,error,unexpected,error,while,joining,cluster,trying,again,e,assert,exceptions,helper,re,throw,if,not,null,e
ZenDiscovery -> JoinThreadControl -> public void startNewThreadIfNotRunning();1525798022;starts a new joining thread if there is no currently active one and join thread controlling is started;public void startNewThreadIfNotRunning() {_            assert Thread.holdsLock(stateMutex)__            if (joinThreadActive()) {_                return__            }_            threadPool.generic().execute(new Runnable() {_                @Override_                public void run() {_                    Thread currentThread = Thread.currentThread()__                    if (!currentJoinThread.compareAndSet(null, currentThread)) {_                        return__                    }_                    while (running.get() && joinThreadActive(currentThread)) {_                        try {_                            innerJoinCluster()__                            return__                        } catch (Exception e) {_                            logger.error("unexpected error while joining cluster, trying again", e)__                            _                            _                            _                            assert ExceptionsHelper.reThrowIfNotNull(e)__                        }_                    }_                    _                }_            })__        };starts,a,new,joining,thread,if,there,is,no,currently,active,one,and,join,thread,controlling,is,started;public,void,start,new,thread,if,not,running,assert,thread,holds,lock,state,mutex,if,join,thread,active,return,thread,pool,generic,execute,new,runnable,override,public,void,run,thread,current,thread,thread,current,thread,if,current,join,thread,compare,and,set,null,current,thread,return,while,running,get,join,thread,active,current,thread,try,inner,join,cluster,return,catch,exception,e,logger,error,unexpected,error,while,joining,cluster,trying,again,e,assert,exceptions,helper,re,throw,if,not,null,e
ZenDiscovery -> JoinThreadControl -> public void startNewThreadIfNotRunning();1527096592;starts a new joining thread if there is no currently active one and join thread controlling is started;public void startNewThreadIfNotRunning() {_            assert Thread.holdsLock(stateMutex)__            if (joinThreadActive()) {_                return__            }_            threadPool.generic().execute(new Runnable() {_                @Override_                public void run() {_                    Thread currentThread = Thread.currentThread()__                    if (!currentJoinThread.compareAndSet(null, currentThread)) {_                        return__                    }_                    while (running.get() && joinThreadActive(currentThread)) {_                        try {_                            innerJoinCluster()__                            return__                        } catch (Exception e) {_                            logger.error("unexpected error while joining cluster, trying again", e)__                            _                            _                            _                            assert ExceptionsHelper.reThrowIfNotNull(e)__                        }_                    }_                    _                }_            })__        };starts,a,new,joining,thread,if,there,is,no,currently,active,one,and,join,thread,controlling,is,started;public,void,start,new,thread,if,not,running,assert,thread,holds,lock,state,mutex,if,join,thread,active,return,thread,pool,generic,execute,new,runnable,override,public,void,run,thread,current,thread,thread,current,thread,if,current,join,thread,compare,and,set,null,current,thread,return,while,running,get,join,thread,active,current,thread,try,inner,join,cluster,return,catch,exception,e,logger,error,unexpected,error,while,joining,cluster,trying,again,e,assert,exceptions,helper,re,throw,if,not,null,e
ZenDiscovery -> JoinThreadControl -> public void startNewThreadIfNotRunning();1527152864;starts a new joining thread if there is no currently active one and join thread controlling is started;public void startNewThreadIfNotRunning() {_            assert Thread.holdsLock(stateMutex)__            if (joinThreadActive()) {_                return__            }_            threadPool.generic().execute(new Runnable() {_                @Override_                public void run() {_                    Thread currentThread = Thread.currentThread()__                    if (!currentJoinThread.compareAndSet(null, currentThread)) {_                        return__                    }_                    while (running.get() && joinThreadActive(currentThread)) {_                        try {_                            innerJoinCluster()__                            return__                        } catch (Exception e) {_                            logger.error("unexpected error while joining cluster, trying again", e)__                            _                            _                            _                            assert ExceptionsHelper.reThrowIfNotNull(e)__                        }_                    }_                    _                }_            })__        };starts,a,new,joining,thread,if,there,is,no,currently,active,one,and,join,thread,controlling,is,started;public,void,start,new,thread,if,not,running,assert,thread,holds,lock,state,mutex,if,join,thread,active,return,thread,pool,generic,execute,new,runnable,override,public,void,run,thread,current,thread,thread,current,thread,if,current,join,thread,compare,and,set,null,current,thread,return,while,running,get,join,thread,active,current,thread,try,inner,join,cluster,return,catch,exception,e,logger,error,unexpected,error,while,joining,cluster,trying,again,e,assert,exceptions,helper,re,throw,if,not,null,e
ZenDiscovery -> JoinThreadControl -> public void startNewThreadIfNotRunning();1529687475;starts a new joining thread if there is no currently active one and join thread controlling is started;public void startNewThreadIfNotRunning() {_            assert Thread.holdsLock(stateMutex)__            if (joinThreadActive()) {_                return__            }_            threadPool.generic().execute(new Runnable() {_                @Override_                public void run() {_                    Thread currentThread = Thread.currentThread()__                    if (!currentJoinThread.compareAndSet(null, currentThread)) {_                        return__                    }_                    while (running.get() && joinThreadActive(currentThread)) {_                        try {_                            innerJoinCluster()__                            return__                        } catch (Exception e) {_                            logger.error("unexpected error while joining cluster, trying again", e)__                            _                            _                            _                            assert ExceptionsHelper.reThrowIfNotNull(e)__                        }_                    }_                    _                }_            })__        };starts,a,new,joining,thread,if,there,is,no,currently,active,one,and,join,thread,controlling,is,started;public,void,start,new,thread,if,not,running,assert,thread,holds,lock,state,mutex,if,join,thread,active,return,thread,pool,generic,execute,new,runnable,override,public,void,run,thread,current,thread,thread,current,thread,if,current,join,thread,compare,and,set,null,current,thread,return,while,running,get,join,thread,active,current,thread,try,inner,join,cluster,return,catch,exception,e,logger,error,unexpected,error,while,joining,cluster,trying,again,e,assert,exceptions,helper,re,throw,if,not,null,e
ZenDiscovery -> JoinThreadControl -> public void startNewThreadIfNotRunning();1533230566;starts a new joining thread if there is no currently active one and join thread controlling is started;public void startNewThreadIfNotRunning() {_            assert Thread.holdsLock(stateMutex)__            if (joinThreadActive()) {_                return__            }_            threadPool.generic().execute(new Runnable() {_                @Override_                public void run() {_                    Thread currentThread = Thread.currentThread()__                    if (!currentJoinThread.compareAndSet(null, currentThread)) {_                        return__                    }_                    while (running.get() && joinThreadActive(currentThread)) {_                        try {_                            innerJoinCluster()__                            return__                        } catch (Exception e) {_                            logger.error("unexpected error while joining cluster, trying again", e)__                            _                            _                            _                            assert ExceptionsHelper.reThrowIfNotNull(e)__                        }_                    }_                    _                }_            })__        };starts,a,new,joining,thread,if,there,is,no,currently,active,one,and,join,thread,controlling,is,started;public,void,start,new,thread,if,not,running,assert,thread,holds,lock,state,mutex,if,join,thread,active,return,thread,pool,generic,execute,new,runnable,override,public,void,run,thread,current,thread,thread,current,thread,if,current,join,thread,compare,and,set,null,current,thread,return,while,running,get,join,thread,active,current,thread,try,inner,join,cluster,return,catch,exception,e,logger,error,unexpected,error,while,joining,cluster,trying,again,e,assert,exceptions,helper,re,throw,if,not,null,e
ZenDiscovery -> JoinThreadControl -> public void startNewThreadIfNotRunning();1540847035;starts a new joining thread if there is no currently active one and join thread controlling is started;public void startNewThreadIfNotRunning() {_            assert Thread.holdsLock(stateMutex)__            if (joinThreadActive()) {_                return__            }_            threadPool.generic().execute(new Runnable() {_                @Override_                public void run() {_                    Thread currentThread = Thread.currentThread()__                    if (!currentJoinThread.compareAndSet(null, currentThread)) {_                        return__                    }_                    while (running.get() && joinThreadActive(currentThread)) {_                        try {_                            innerJoinCluster()__                            return__                        } catch (Exception e) {_                            logger.error("unexpected error while joining cluster, trying again", e)__                            _                            _                            _                            assert ExceptionsHelper.reThrowIfNotNull(e)__                        }_                    }_                    _                }_            })__        };starts,a,new,joining,thread,if,there,is,no,currently,active,one,and,join,thread,controlling,is,started;public,void,start,new,thread,if,not,running,assert,thread,holds,lock,state,mutex,if,join,thread,active,return,thread,pool,generic,execute,new,runnable,override,public,void,run,thread,current,thread,thread,current,thread,if,current,join,thread,compare,and,set,null,current,thread,return,while,running,get,join,thread,active,current,thread,try,inner,join,cluster,return,catch,exception,e,logger,error,unexpected,error,while,joining,cluster,trying,again,e,assert,exceptions,helper,re,throw,if,not,null,e
ZenDiscovery -> JoinThreadControl -> public void startNewThreadIfNotRunning();1541008027;starts a new joining thread if there is no currently active one and join thread controlling is started;public void startNewThreadIfNotRunning() {_            assert Thread.holdsLock(stateMutex)__            if (joinThreadActive()) {_                return__            }_            threadPool.generic().execute(new Runnable() {_                @Override_                public void run() {_                    Thread currentThread = Thread.currentThread()__                    if (!currentJoinThread.compareAndSet(null, currentThread)) {_                        return__                    }_                    while (running.get() && joinThreadActive(currentThread)) {_                        try {_                            innerJoinCluster()__                            return__                        } catch (Exception e) {_                            logger.error("unexpected error while joining cluster, trying again", e)__                            _                            _                            _                            assert ExceptionsHelper.reThrowIfNotNull(e)__                        }_                    }_                    _                }_            })__        };starts,a,new,joining,thread,if,there,is,no,currently,active,one,and,join,thread,controlling,is,started;public,void,start,new,thread,if,not,running,assert,thread,holds,lock,state,mutex,if,join,thread,active,return,thread,pool,generic,execute,new,runnable,override,public,void,run,thread,current,thread,thread,current,thread,if,current,join,thread,compare,and,set,null,current,thread,return,while,running,get,join,thread,active,current,thread,try,inner,join,cluster,return,catch,exception,e,logger,error,unexpected,error,while,joining,cluster,trying,again,e,assert,exceptions,helper,re,throw,if,not,null,e
ZenDiscovery -> JoinThreadControl -> public void startNewThreadIfNotRunning();1541092382;starts a new joining thread if there is no currently active one and join thread controlling is started;public void startNewThreadIfNotRunning() {_            assert Thread.holdsLock(stateMutex)__            if (joinThreadActive()) {_                return__            }_            threadPool.generic().execute(new Runnable() {_                @Override_                public void run() {_                    Thread currentThread = Thread.currentThread()__                    if (!currentJoinThread.compareAndSet(null, currentThread)) {_                        return__                    }_                    while (running.get() && joinThreadActive(currentThread)) {_                        try {_                            innerJoinCluster()__                            return__                        } catch (Exception e) {_                            logger.error("unexpected error while joining cluster, trying again", e)__                            _                            _                            _                            assert ExceptionsHelper.reThrowIfNotNull(e)__                        }_                    }_                    _                }_            })__        };starts,a,new,joining,thread,if,there,is,no,currently,active,one,and,join,thread,controlling,is,started;public,void,start,new,thread,if,not,running,assert,thread,holds,lock,state,mutex,if,join,thread,active,return,thread,pool,generic,execute,new,runnable,override,public,void,run,thread,current,thread,thread,current,thread,if,current,join,thread,compare,and,set,null,current,thread,return,while,running,get,join,thread,active,current,thread,try,inner,join,cluster,return,catch,exception,e,logger,error,unexpected,error,while,joining,cluster,trying,again,e,assert,exceptions,helper,re,throw,if,not,null,e
ZenDiscovery -> JoinThreadControl -> public void startNewThreadIfNotRunning();1542646292;starts a new joining thread if there is no currently active one and join thread controlling is started;public void startNewThreadIfNotRunning() {_            assert Thread.holdsLock(stateMutex)__            if (joinThreadActive()) {_                return__            }_            threadPool.generic().execute(new Runnable() {_                @Override_                public void run() {_                    Thread currentThread = Thread.currentThread()__                    if (!currentJoinThread.compareAndSet(null, currentThread)) {_                        return__                    }_                    while (running.get() && joinThreadActive(currentThread)) {_                        try {_                            innerJoinCluster()__                            return__                        } catch (Exception e) {_                            logger.error("unexpected error while joining cluster, trying again", e)__                            _                            _                            _                            assert ExceptionsHelper.reThrowIfNotNull(e)__                        }_                    }_                    _                }_            })__        };starts,a,new,joining,thread,if,there,is,no,currently,active,one,and,join,thread,controlling,is,started;public,void,start,new,thread,if,not,running,assert,thread,holds,lock,state,mutex,if,join,thread,active,return,thread,pool,generic,execute,new,runnable,override,public,void,run,thread,current,thread,thread,current,thread,if,current,join,thread,compare,and,set,null,current,thread,return,while,running,get,join,thread,active,current,thread,try,inner,join,cluster,return,catch,exception,e,logger,error,unexpected,error,while,joining,cluster,trying,again,e,assert,exceptions,helper,re,throw,if,not,null,e
ZenDiscovery -> JoinThreadControl -> public void startNewThreadIfNotRunning();1544081506;starts a new joining thread if there is no currently active one and join thread controlling is started;public void startNewThreadIfNotRunning() {_            assert Thread.holdsLock(stateMutex)__            if (joinThreadActive()) {_                return__            }_            threadPool.generic().execute(new Runnable() {_                @Override_                public void run() {_                    Thread currentThread = Thread.currentThread()__                    if (!currentJoinThread.compareAndSet(null, currentThread)) {_                        return__                    }_                    while (running.get() && joinThreadActive(currentThread)) {_                        try {_                            innerJoinCluster()__                            return__                        } catch (Exception e) {_                            logger.error("unexpected error while joining cluster, trying again", e)__                            _                            _                            _                            assert ExceptionsHelper.reThrowIfNotNull(e)__                        }_                    }_                    _                }_            })__        };starts,a,new,joining,thread,if,there,is,no,currently,active,one,and,join,thread,controlling,is,started;public,void,start,new,thread,if,not,running,assert,thread,holds,lock,state,mutex,if,join,thread,active,return,thread,pool,generic,execute,new,runnable,override,public,void,run,thread,current,thread,thread,current,thread,if,current,join,thread,compare,and,set,null,current,thread,return,while,running,get,join,thread,active,current,thread,try,inner,join,cluster,return,catch,exception,e,logger,error,unexpected,error,while,joining,cluster,trying,again,e,assert,exceptions,helper,re,throw,if,not,null,e
ZenDiscovery -> JoinThreadControl -> public void startNewThreadIfNotRunning();1546850547;starts a new joining thread if there is no currently active one and join thread controlling is started;public void startNewThreadIfNotRunning() {_            assert Thread.holdsLock(stateMutex)__            if (joinThreadActive()) {_                return__            }_            threadPool.generic().execute(new Runnable() {_                @Override_                public void run() {_                    Thread currentThread = Thread.currentThread()__                    if (!currentJoinThread.compareAndSet(null, currentThread)) {_                        return__                    }_                    while (running.get() && joinThreadActive(currentThread)) {_                        try {_                            innerJoinCluster()__                            return__                        } catch (Exception e) {_                            logger.error("unexpected error while joining cluster, trying again", e)__                            _                            _                            _                            assert ExceptionsHelper.reThrowIfNotNull(e)__                        }_                    }_                    _                }_            })__        };starts,a,new,joining,thread,if,there,is,no,currently,active,one,and,join,thread,controlling,is,started;public,void,start,new,thread,if,not,running,assert,thread,holds,lock,state,mutex,if,join,thread,active,return,thread,pool,generic,execute,new,runnable,override,public,void,run,thread,current,thread,thread,current,thread,if,current,join,thread,compare,and,set,null,current,thread,return,while,running,get,join,thread,active,current,thread,try,inner,join,cluster,return,catch,exception,e,logger,error,unexpected,error,while,joining,cluster,trying,again,e,assert,exceptions,helper,re,throw,if,not,null,e
ZenDiscovery -> JoinThreadControl -> public void startNewThreadIfNotRunning();1547121470;starts a new joining thread if there is no currently active one and join thread controlling is started;public void startNewThreadIfNotRunning() {_            assert Thread.holdsLock(stateMutex)__            if (joinThreadActive()) {_                return__            }_            threadPool.generic().execute(new Runnable() {_                @Override_                public void run() {_                    Thread currentThread = Thread.currentThread()__                    if (!currentJoinThread.compareAndSet(null, currentThread)) {_                        return__                    }_                    while (running.get() && joinThreadActive(currentThread)) {_                        try {_                            innerJoinCluster()__                            return__                        } catch (Exception e) {_                            logger.error("unexpected error while joining cluster, trying again", e)__                            _                            _                            _                            assert ExceptionsHelper.reThrowIfNotNull(e)__                        }_                    }_                    _                }_            })__        };starts,a,new,joining,thread,if,there,is,no,currently,active,one,and,join,thread,controlling,is,started;public,void,start,new,thread,if,not,running,assert,thread,holds,lock,state,mutex,if,join,thread,active,return,thread,pool,generic,execute,new,runnable,override,public,void,run,thread,current,thread,thread,current,thread,if,current,join,thread,compare,and,set,null,current,thread,return,while,running,get,join,thread,active,current,thread,try,inner,join,cluster,return,catch,exception,e,logger,error,unexpected,error,while,joining,cluster,trying,again,e,assert,exceptions,helper,re,throw,if,not,null,e
ZenDiscovery -> JoinThreadControl -> public void startNewThreadIfNotRunning();1547625930;starts a new joining thread if there is no currently active one and join thread controlling is started;public void startNewThreadIfNotRunning() {_            assert Thread.holdsLock(stateMutex)__            if (joinThreadActive()) {_                return__            }_            threadPool.generic().execute(new Runnable() {_                @Override_                public void run() {_                    Thread currentThread = Thread.currentThread()__                    if (!currentJoinThread.compareAndSet(null, currentThread)) {_                        return__                    }_                    while (running.get() && joinThreadActive(currentThread)) {_                        try {_                            innerJoinCluster()__                            return__                        } catch (Exception e) {_                            logger.error("unexpected error while joining cluster, trying again", e)__                            _                            _                            _                            assert ExceptionsHelper.reThrowIfNotNull(e)__                        }_                    }_                    _                }_            })__        };starts,a,new,joining,thread,if,there,is,no,currently,active,one,and,join,thread,controlling,is,started;public,void,start,new,thread,if,not,running,assert,thread,holds,lock,state,mutex,if,join,thread,active,return,thread,pool,generic,execute,new,runnable,override,public,void,run,thread,current,thread,thread,current,thread,if,current,join,thread,compare,and,set,null,current,thread,return,while,running,get,join,thread,active,current,thread,try,inner,join,cluster,return,catch,exception,e,logger,error,unexpected,error,while,joining,cluster,trying,again,e,assert,exceptions,helper,re,throw,if,not,null,e
ZenDiscovery -> JoinThreadControl -> public void startNewThreadIfNotRunning();1548320260;starts a new joining thread if there is no currently active one and join thread controlling is started;public void startNewThreadIfNotRunning() {_            assert Thread.holdsLock(stateMutex)__            if (joinThreadActive()) {_                return__            }_            threadPool.generic().execute(new Runnable() {_                @Override_                public void run() {_                    Thread currentThread = Thread.currentThread()__                    if (!currentJoinThread.compareAndSet(null, currentThread)) {_                        return__                    }_                    while (running.get() && joinThreadActive(currentThread)) {_                        try {_                            innerJoinCluster()__                            return__                        } catch (Exception e) {_                            logger.error("unexpected error while joining cluster, trying again", e)__                            _                            _                            _                            assert ExceptionsHelper.reThrowIfNotNull(e)__                        }_                    }_                    _                }_            })__        };starts,a,new,joining,thread,if,there,is,no,currently,active,one,and,join,thread,controlling,is,started;public,void,start,new,thread,if,not,running,assert,thread,holds,lock,state,mutex,if,join,thread,active,return,thread,pool,generic,execute,new,runnable,override,public,void,run,thread,current,thread,thread,current,thread,if,current,join,thread,compare,and,set,null,current,thread,return,while,running,get,join,thread,active,current,thread,try,inner,join,cluster,return,catch,exception,e,logger,error,unexpected,error,while,joining,cluster,trying,again,e,assert,exceptions,helper,re,throw,if,not,null,e
ZenDiscovery -> JoinThreadControl -> public void startNewThreadIfNotRunning();1549270328;starts a new joining thread if there is no currently active one and join thread controlling is started;public void startNewThreadIfNotRunning() {_            assert Thread.holdsLock(stateMutex)__            if (joinThreadActive()) {_                return__            }_            threadPool.generic().execute(new Runnable() {_                @Override_                public void run() {_                    Thread currentThread = Thread.currentThread()__                    if (!currentJoinThread.compareAndSet(null, currentThread)) {_                        return__                    }_                    while (running.get() && joinThreadActive(currentThread)) {_                        try {_                            innerJoinCluster()__                            return__                        } catch (Exception e) {_                            logger.error("unexpected error while joining cluster, trying again", e)__                            _                            _                            _                            assert ExceptionsHelper.reThrowIfNotNull(e)__                        }_                    }_                    _                }_            })__        };starts,a,new,joining,thread,if,there,is,no,currently,active,one,and,join,thread,controlling,is,started;public,void,start,new,thread,if,not,running,assert,thread,holds,lock,state,mutex,if,join,thread,active,return,thread,pool,generic,execute,new,runnable,override,public,void,run,thread,current,thread,thread,current,thread,if,current,join,thread,compare,and,set,null,current,thread,return,while,running,get,join,thread,active,current,thread,try,inner,join,cluster,return,catch,exception,e,logger,error,unexpected,error,while,joining,cluster,trying,again,e,assert,exceptions,helper,re,throw,if,not,null,e
ZenDiscovery -> JoinThreadControl -> public void startNewThreadIfNotRunning();1549356476;starts a new joining thread if there is no currently active one and join thread controlling is started;public void startNewThreadIfNotRunning() {_            assert Thread.holdsLock(stateMutex)__            if (joinThreadActive()) {_                return__            }_            threadPool.generic().execute(new Runnable() {_                @Override_                public void run() {_                    Thread currentThread = Thread.currentThread()__                    if (!currentJoinThread.compareAndSet(null, currentThread)) {_                        return__                    }_                    while (running.get() && joinThreadActive(currentThread)) {_                        try {_                            innerJoinCluster()__                            return__                        } catch (Exception e) {_                            logger.error("unexpected error while joining cluster, trying again", e)__                            _                            _                            _                            assert ExceptionsHelper.reThrowIfNotNull(e)__                        }_                    }_                    _                }_            })__        };starts,a,new,joining,thread,if,there,is,no,currently,active,one,and,join,thread,controlling,is,started;public,void,start,new,thread,if,not,running,assert,thread,holds,lock,state,mutex,if,join,thread,active,return,thread,pool,generic,execute,new,runnable,override,public,void,run,thread,current,thread,thread,current,thread,if,current,join,thread,compare,and,set,null,current,thread,return,while,running,get,join,thread,active,current,thread,try,inner,join,cluster,return,catch,exception,e,logger,error,unexpected,error,while,joining,cluster,trying,again,e,assert,exceptions,helper,re,throw,if,not,null,e
ZenDiscovery -> JoinThreadControl -> public void startNewThreadIfNotRunning();1549452878;starts a new joining thread if there is no currently active one and join thread controlling is started;public void startNewThreadIfNotRunning() {_            assert Thread.holdsLock(stateMutex)__            if (joinThreadActive()) {_                return__            }_            threadPool.generic().execute(new Runnable() {_                @Override_                public void run() {_                    Thread currentThread = Thread.currentThread()__                    if (!currentJoinThread.compareAndSet(null, currentThread)) {_                        return__                    }_                    while (running.get() && joinThreadActive(currentThread)) {_                        try {_                            innerJoinCluster()__                            return__                        } catch (Exception e) {_                            logger.error("unexpected error while joining cluster, trying again", e)__                            _                            _                            _                            assert ExceptionsHelper.reThrowIfNotNull(e)__                        }_                    }_                    _                }_            })__        };starts,a,new,joining,thread,if,there,is,no,currently,active,one,and,join,thread,controlling,is,started;public,void,start,new,thread,if,not,running,assert,thread,holds,lock,state,mutex,if,join,thread,active,return,thread,pool,generic,execute,new,runnable,override,public,void,run,thread,current,thread,thread,current,thread,if,current,join,thread,compare,and,set,null,current,thread,return,while,running,get,join,thread,active,current,thread,try,inner,join,cluster,return,catch,exception,e,logger,error,unexpected,error,while,joining,cluster,trying,again,e,assert,exceptions,helper,re,throw,if,not,null,e
ZenDiscovery -> Set<DiscoveryNode> getFaultDetectionNodes();1524684173;Gets the current set of nodes involved in the node fault detection._NB: for testing purposes;Set<DiscoveryNode> getFaultDetectionNodes() {_        return nodesFD.getNodes()__    };gets,the,current,set,of,nodes,involved,in,the,node,fault,detection,nb,for,testing,purposes;set,discovery,node,get,fault,detection,nodes,return,nodes,fd,get,nodes
ZenDiscovery -> Set<DiscoveryNode> getFaultDetectionNodes();1525798022;Gets the current set of nodes involved in the node fault detection._NB: for testing purposes;Set<DiscoveryNode> getFaultDetectionNodes() {_        return nodesFD.getNodes()__    };gets,the,current,set,of,nodes,involved,in,the,node,fault,detection,nb,for,testing,purposes;set,discovery,node,get,fault,detection,nodes,return,nodes,fd,get,nodes
ZenDiscovery -> Set<DiscoveryNode> getFaultDetectionNodes();1527096592;Gets the current set of nodes involved in the node fault detection._NB: for testing purposes;Set<DiscoveryNode> getFaultDetectionNodes() {_        return nodesFD.getNodes()__    };gets,the,current,set,of,nodes,involved,in,the,node,fault,detection,nb,for,testing,purposes;set,discovery,node,get,fault,detection,nodes,return,nodes,fd,get,nodes
ZenDiscovery -> Set<DiscoveryNode> getFaultDetectionNodes();1527152864;Gets the current set of nodes involved in the node fault detection._NB: for testing purposes;Set<DiscoveryNode> getFaultDetectionNodes() {_        return nodesFD.getNodes()__    };gets,the,current,set,of,nodes,involved,in,the,node,fault,detection,nb,for,testing,purposes;set,discovery,node,get,fault,detection,nodes,return,nodes,fd,get,nodes
ZenDiscovery -> Set<DiscoveryNode> getFaultDetectionNodes();1529687475;Gets the current set of nodes involved in the node fault detection._NB: for testing purposes;Set<DiscoveryNode> getFaultDetectionNodes() {_        return nodesFD.getNodes()__    };gets,the,current,set,of,nodes,involved,in,the,node,fault,detection,nb,for,testing,purposes;set,discovery,node,get,fault,detection,nodes,return,nodes,fd,get,nodes
ZenDiscovery -> Set<DiscoveryNode> getFaultDetectionNodes();1533230566;Gets the current set of nodes involved in the node fault detection._NB: for testing purposes;Set<DiscoveryNode> getFaultDetectionNodes() {_        return nodesFD.getNodes()__    };gets,the,current,set,of,nodes,involved,in,the,node,fault,detection,nb,for,testing,purposes;set,discovery,node,get,fault,detection,nodes,return,nodes,fd,get,nodes
ZenDiscovery -> Set<DiscoveryNode> getFaultDetectionNodes();1540847035;Gets the current set of nodes involved in the node fault detection._NB: for testing purposes;Set<DiscoveryNode> getFaultDetectionNodes() {_        return nodesFD.getNodes()__    };gets,the,current,set,of,nodes,involved,in,the,node,fault,detection,nb,for,testing,purposes;set,discovery,node,get,fault,detection,nodes,return,nodes,fd,get,nodes
ZenDiscovery -> Set<DiscoveryNode> getFaultDetectionNodes();1541008027;Gets the current set of nodes involved in the node fault detection._NB: for testing purposes;Set<DiscoveryNode> getFaultDetectionNodes() {_        return nodesFD.getNodes()__    };gets,the,current,set,of,nodes,involved,in,the,node,fault,detection,nb,for,testing,purposes;set,discovery,node,get,fault,detection,nodes,return,nodes,fd,get,nodes
ZenDiscovery -> Set<DiscoveryNode> getFaultDetectionNodes();1541092382;Gets the current set of nodes involved in the node fault detection._NB: for testing purposes;Set<DiscoveryNode> getFaultDetectionNodes() {_        return nodesFD.getNodes()__    };gets,the,current,set,of,nodes,involved,in,the,node,fault,detection,nb,for,testing,purposes;set,discovery,node,get,fault,detection,nodes,return,nodes,fd,get,nodes
ZenDiscovery -> Set<DiscoveryNode> getFaultDetectionNodes();1542646292;Gets the current set of nodes involved in the node fault detection._NB: for testing purposes;Set<DiscoveryNode> getFaultDetectionNodes() {_        return nodesFD.getNodes()__    };gets,the,current,set,of,nodes,involved,in,the,node,fault,detection,nb,for,testing,purposes;set,discovery,node,get,fault,detection,nodes,return,nodes,fd,get,nodes
ZenDiscovery -> Set<DiscoveryNode> getFaultDetectionNodes();1544081506;Gets the current set of nodes involved in the node fault detection._NB: for testing purposes;Set<DiscoveryNode> getFaultDetectionNodes() {_        return nodesFD.getNodes()__    };gets,the,current,set,of,nodes,involved,in,the,node,fault,detection,nb,for,testing,purposes;set,discovery,node,get,fault,detection,nodes,return,nodes,fd,get,nodes
ZenDiscovery -> Set<DiscoveryNode> getFaultDetectionNodes();1546850547;Gets the current set of nodes involved in the node fault detection._NB: for testing purposes;Set<DiscoveryNode> getFaultDetectionNodes() {_        return nodesFD.getNodes()__    };gets,the,current,set,of,nodes,involved,in,the,node,fault,detection,nb,for,testing,purposes;set,discovery,node,get,fault,detection,nodes,return,nodes,fd,get,nodes
ZenDiscovery -> Set<DiscoveryNode> getFaultDetectionNodes();1547121470;Gets the current set of nodes involved in the node fault detection._NB: for testing purposes;Set<DiscoveryNode> getFaultDetectionNodes() {_        return nodesFD.getNodes()__    };gets,the,current,set,of,nodes,involved,in,the,node,fault,detection,nb,for,testing,purposes;set,discovery,node,get,fault,detection,nodes,return,nodes,fd,get,nodes
ZenDiscovery -> Set<DiscoveryNode> getFaultDetectionNodes();1547625930;Gets the current set of nodes involved in the node fault detection._NB: for testing purposes;Set<DiscoveryNode> getFaultDetectionNodes() {_        return nodesFD.getNodes()__    };gets,the,current,set,of,nodes,involved,in,the,node,fault,detection,nb,for,testing,purposes;set,discovery,node,get,fault,detection,nodes,return,nodes,fd,get,nodes
ZenDiscovery -> Set<DiscoveryNode> getFaultDetectionNodes();1548320260;Gets the current set of nodes involved in the node fault detection._NB: for testing purposes;Set<DiscoveryNode> getFaultDetectionNodes() {_        return nodesFD.getNodes()__    };gets,the,current,set,of,nodes,involved,in,the,node,fault,detection,nb,for,testing,purposes;set,discovery,node,get,fault,detection,nodes,return,nodes,fd,get,nodes
ZenDiscovery -> Set<DiscoveryNode> getFaultDetectionNodes();1549270328;Gets the current set of nodes involved in the node fault detection._NB: for testing purposes;Set<DiscoveryNode> getFaultDetectionNodes() {_        return nodesFD.getNodes()__    };gets,the,current,set,of,nodes,involved,in,the,node,fault,detection,nb,for,testing,purposes;set,discovery,node,get,fault,detection,nodes,return,nodes,fd,get,nodes
ZenDiscovery -> Set<DiscoveryNode> getFaultDetectionNodes();1549356476;Gets the current set of nodes involved in the node fault detection._NB: for testing purposes;Set<DiscoveryNode> getFaultDetectionNodes() {_        return nodesFD.getNodes()__    };gets,the,current,set,of,nodes,involved,in,the,node,fault,detection,nb,for,testing,purposes;set,discovery,node,get,fault,detection,nodes,return,nodes,fd,get,nodes
ZenDiscovery -> Set<DiscoveryNode> getFaultDetectionNodes();1549452878;Gets the current set of nodes involved in the node fault detection._NB: for testing purposes;Set<DiscoveryNode> getFaultDetectionNodes() {_        return nodesFD.getNodes()__    };gets,the,current,set,of,nodes,involved,in,the,node,fault,detection,nb,for,testing,purposes;set,discovery,node,get,fault,detection,nodes,return,nodes,fd,get,nodes
ZenDiscovery -> private void innerJoinCluster();1524684173;the main function of a join thread. This function is guaranteed to join the cluster_or spawn a new join thread upon failure to do so.;private void innerJoinCluster() {_        DiscoveryNode masterNode = null__        final Thread currentThread = Thread.currentThread()__        nodeJoinController.startElectionContext()__        while (masterNode == null && joinThreadControl.joinThreadActive(currentThread)) {_            masterNode = findMaster()__        }__        if (!joinThreadControl.joinThreadActive(currentThread)) {_            logger.trace("thread is no longer in currentJoinThread. Stopping.")__            return__        }__        if (transportService.getLocalNode().equals(masterNode)) {_            final int requiredJoins = Math.max(0, electMaster.minimumMasterNodes() - 1)_ _            logger.debug("elected as master, waiting for incoming joins ([{}] needed)", requiredJoins)__            nodeJoinController.waitToBeElectedAsMaster(requiredJoins, masterElectionWaitForJoinsTimeout,_                    new NodeJoinController.ElectionCallback() {_                        @Override_                        public void onElectedAsMaster(ClusterState state) {_                            synchronized (stateMutex) {_                                joinThreadControl.markThreadAsDone(currentThread)__                            }_                        }__                        @Override_                        public void onFailure(Throwable t) {_                            logger.trace("failed while waiting for nodes to join, rejoining", t)__                            synchronized (stateMutex) {_                                joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                            }_                        }_                    }__            )__        } else {_            _            nodeJoinController.stopElectionContext(masterNode + " elected")___            _            final boolean success = joinElectedMaster(masterNode)___            synchronized (stateMutex) {_                if (success) {_                    DiscoveryNode currentMasterNode = this.clusterState().getNodes().getMasterNode()__                    if (currentMasterNode == null) {_                        _                        _                        logger.debug("no master node is set, despite of join request completing. retrying pings.")__                        joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                    } else if (currentMasterNode.equals(masterNode) == false) {_                        _                        joinThreadControl.stopRunningThreadAndRejoin("master_switched_while_finalizing_join")__                    }__                    joinThreadControl.markThreadAsDone(currentThread)__                } else {_                    _                    joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                }_            }_        }_    };the,main,function,of,a,join,thread,this,function,is,guaranteed,to,join,the,cluster,or,spawn,a,new,join,thread,upon,failure,to,do,so;private,void,inner,join,cluster,discovery,node,master,node,null,final,thread,current,thread,thread,current,thread,node,join,controller,start,election,context,while,master,node,null,join,thread,control,join,thread,active,current,thread,master,node,find,master,if,join,thread,control,join,thread,active,current,thread,logger,trace,thread,is,no,longer,in,current,join,thread,stopping,return,if,transport,service,get,local,node,equals,master,node,final,int,required,joins,math,max,0,elect,master,minimum,master,nodes,1,logger,debug,elected,as,master,waiting,for,incoming,joins,needed,required,joins,node,join,controller,wait,to,be,elected,as,master,required,joins,master,election,wait,for,joins,timeout,new,node,join,controller,election,callback,override,public,void,on,elected,as,master,cluster,state,state,synchronized,state,mutex,join,thread,control,mark,thread,as,done,current,thread,override,public,void,on,failure,throwable,t,logger,trace,failed,while,waiting,for,nodes,to,join,rejoining,t,synchronized,state,mutex,join,thread,control,mark,thread,as,done,and,start,new,current,thread,else,node,join,controller,stop,election,context,master,node,elected,final,boolean,success,join,elected,master,master,node,synchronized,state,mutex,if,success,discovery,node,current,master,node,this,cluster,state,get,nodes,get,master,node,if,current,master,node,null,logger,debug,no,master,node,is,set,despite,of,join,request,completing,retrying,pings,join,thread,control,mark,thread,as,done,and,start,new,current,thread,else,if,current,master,node,equals,master,node,false,join,thread,control,stop,running,thread,and,rejoin,join,thread,control,mark,thread,as,done,current,thread,else,join,thread,control,mark,thread,as,done,and,start,new,current,thread
ZenDiscovery -> private void innerJoinCluster();1525798022;the main function of a join thread. This function is guaranteed to join the cluster_or spawn a new join thread upon failure to do so.;private void innerJoinCluster() {_        DiscoveryNode masterNode = null__        final Thread currentThread = Thread.currentThread()__        nodeJoinController.startElectionContext()__        while (masterNode == null && joinThreadControl.joinThreadActive(currentThread)) {_            masterNode = findMaster()__        }__        if (!joinThreadControl.joinThreadActive(currentThread)) {_            logger.trace("thread is no longer in currentJoinThread. Stopping.")__            return__        }__        if (transportService.getLocalNode().equals(masterNode)) {_            final int requiredJoins = Math.max(0, electMaster.minimumMasterNodes() - 1)_ _            logger.debug("elected as master, waiting for incoming joins ([{}] needed)", requiredJoins)__            nodeJoinController.waitToBeElectedAsMaster(requiredJoins, masterElectionWaitForJoinsTimeout,_                    new NodeJoinController.ElectionCallback() {_                        @Override_                        public void onElectedAsMaster(ClusterState state) {_                            synchronized (stateMutex) {_                                joinThreadControl.markThreadAsDone(currentThread)__                            }_                        }__                        @Override_                        public void onFailure(Throwable t) {_                            logger.trace("failed while waiting for nodes to join, rejoining", t)__                            synchronized (stateMutex) {_                                joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                            }_                        }_                    }__            )__        } else {_            _            nodeJoinController.stopElectionContext(masterNode + " elected")___            _            final boolean success = joinElectedMaster(masterNode)___            synchronized (stateMutex) {_                if (success) {_                    DiscoveryNode currentMasterNode = this.clusterState().getNodes().getMasterNode()__                    if (currentMasterNode == null) {_                        _                        _                        logger.debug("no master node is set, despite of join request completing. retrying pings.")__                        joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                    } else if (currentMasterNode.equals(masterNode) == false) {_                        _                        joinThreadControl.stopRunningThreadAndRejoin("master_switched_while_finalizing_join")__                    }__                    joinThreadControl.markThreadAsDone(currentThread)__                } else {_                    _                    joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                }_            }_        }_    };the,main,function,of,a,join,thread,this,function,is,guaranteed,to,join,the,cluster,or,spawn,a,new,join,thread,upon,failure,to,do,so;private,void,inner,join,cluster,discovery,node,master,node,null,final,thread,current,thread,thread,current,thread,node,join,controller,start,election,context,while,master,node,null,join,thread,control,join,thread,active,current,thread,master,node,find,master,if,join,thread,control,join,thread,active,current,thread,logger,trace,thread,is,no,longer,in,current,join,thread,stopping,return,if,transport,service,get,local,node,equals,master,node,final,int,required,joins,math,max,0,elect,master,minimum,master,nodes,1,logger,debug,elected,as,master,waiting,for,incoming,joins,needed,required,joins,node,join,controller,wait,to,be,elected,as,master,required,joins,master,election,wait,for,joins,timeout,new,node,join,controller,election,callback,override,public,void,on,elected,as,master,cluster,state,state,synchronized,state,mutex,join,thread,control,mark,thread,as,done,current,thread,override,public,void,on,failure,throwable,t,logger,trace,failed,while,waiting,for,nodes,to,join,rejoining,t,synchronized,state,mutex,join,thread,control,mark,thread,as,done,and,start,new,current,thread,else,node,join,controller,stop,election,context,master,node,elected,final,boolean,success,join,elected,master,master,node,synchronized,state,mutex,if,success,discovery,node,current,master,node,this,cluster,state,get,nodes,get,master,node,if,current,master,node,null,logger,debug,no,master,node,is,set,despite,of,join,request,completing,retrying,pings,join,thread,control,mark,thread,as,done,and,start,new,current,thread,else,if,current,master,node,equals,master,node,false,join,thread,control,stop,running,thread,and,rejoin,join,thread,control,mark,thread,as,done,current,thread,else,join,thread,control,mark,thread,as,done,and,start,new,current,thread
ZenDiscovery -> private void innerJoinCluster();1527096592;the main function of a join thread. This function is guaranteed to join the cluster_or spawn a new join thread upon failure to do so.;private void innerJoinCluster() {_        DiscoveryNode masterNode = null__        final Thread currentThread = Thread.currentThread()__        nodeJoinController.startElectionContext()__        while (masterNode == null && joinThreadControl.joinThreadActive(currentThread)) {_            masterNode = findMaster()__        }__        if (!joinThreadControl.joinThreadActive(currentThread)) {_            logger.trace("thread is no longer in currentJoinThread. Stopping.")__            return__        }__        if (transportService.getLocalNode().equals(masterNode)) {_            final int requiredJoins = Math.max(0, electMaster.minimumMasterNodes() - 1)_ _            logger.debug("elected as master, waiting for incoming joins ([{}] needed)", requiredJoins)__            nodeJoinController.waitToBeElectedAsMaster(requiredJoins, masterElectionWaitForJoinsTimeout,_                    new NodeJoinController.ElectionCallback() {_                        @Override_                        public void onElectedAsMaster(ClusterState state) {_                            synchronized (stateMutex) {_                                joinThreadControl.markThreadAsDone(currentThread)__                            }_                        }__                        @Override_                        public void onFailure(Throwable t) {_                            logger.trace("failed while waiting for nodes to join, rejoining", t)__                            synchronized (stateMutex) {_                                joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                            }_                        }_                    }__            )__        } else {_            _            nodeJoinController.stopElectionContext(masterNode + " elected")___            _            final boolean success = joinElectedMaster(masterNode)___            synchronized (stateMutex) {_                if (success) {_                    DiscoveryNode currentMasterNode = this.clusterState().getNodes().getMasterNode()__                    if (currentMasterNode == null) {_                        _                        _                        logger.debug("no master node is set, despite of join request completing. retrying pings.")__                        joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                    } else if (currentMasterNode.equals(masterNode) == false) {_                        _                        joinThreadControl.stopRunningThreadAndRejoin("master_switched_while_finalizing_join")__                    }__                    joinThreadControl.markThreadAsDone(currentThread)__                } else {_                    _                    joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                }_            }_        }_    };the,main,function,of,a,join,thread,this,function,is,guaranteed,to,join,the,cluster,or,spawn,a,new,join,thread,upon,failure,to,do,so;private,void,inner,join,cluster,discovery,node,master,node,null,final,thread,current,thread,thread,current,thread,node,join,controller,start,election,context,while,master,node,null,join,thread,control,join,thread,active,current,thread,master,node,find,master,if,join,thread,control,join,thread,active,current,thread,logger,trace,thread,is,no,longer,in,current,join,thread,stopping,return,if,transport,service,get,local,node,equals,master,node,final,int,required,joins,math,max,0,elect,master,minimum,master,nodes,1,logger,debug,elected,as,master,waiting,for,incoming,joins,needed,required,joins,node,join,controller,wait,to,be,elected,as,master,required,joins,master,election,wait,for,joins,timeout,new,node,join,controller,election,callback,override,public,void,on,elected,as,master,cluster,state,state,synchronized,state,mutex,join,thread,control,mark,thread,as,done,current,thread,override,public,void,on,failure,throwable,t,logger,trace,failed,while,waiting,for,nodes,to,join,rejoining,t,synchronized,state,mutex,join,thread,control,mark,thread,as,done,and,start,new,current,thread,else,node,join,controller,stop,election,context,master,node,elected,final,boolean,success,join,elected,master,master,node,synchronized,state,mutex,if,success,discovery,node,current,master,node,this,cluster,state,get,nodes,get,master,node,if,current,master,node,null,logger,debug,no,master,node,is,set,despite,of,join,request,completing,retrying,pings,join,thread,control,mark,thread,as,done,and,start,new,current,thread,else,if,current,master,node,equals,master,node,false,join,thread,control,stop,running,thread,and,rejoin,join,thread,control,mark,thread,as,done,current,thread,else,join,thread,control,mark,thread,as,done,and,start,new,current,thread
ZenDiscovery -> private void innerJoinCluster();1527152864;the main function of a join thread. This function is guaranteed to join the cluster_or spawn a new join thread upon failure to do so.;private void innerJoinCluster() {_        DiscoveryNode masterNode = null__        final Thread currentThread = Thread.currentThread()__        nodeJoinController.startElectionContext()__        while (masterNode == null && joinThreadControl.joinThreadActive(currentThread)) {_            masterNode = findMaster()__        }__        if (!joinThreadControl.joinThreadActive(currentThread)) {_            logger.trace("thread is no longer in currentJoinThread. Stopping.")__            return__        }__        if (transportService.getLocalNode().equals(masterNode)) {_            final int requiredJoins = Math.max(0, electMaster.minimumMasterNodes() - 1)_ _            logger.debug("elected as master, waiting for incoming joins ([{}] needed)", requiredJoins)__            nodeJoinController.waitToBeElectedAsMaster(requiredJoins, masterElectionWaitForJoinsTimeout,_                    new NodeJoinController.ElectionCallback() {_                        @Override_                        public void onElectedAsMaster(ClusterState state) {_                            synchronized (stateMutex) {_                                joinThreadControl.markThreadAsDone(currentThread)__                            }_                        }__                        @Override_                        public void onFailure(Throwable t) {_                            logger.trace("failed while waiting for nodes to join, rejoining", t)__                            synchronized (stateMutex) {_                                joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                            }_                        }_                    }__            )__        } else {_            _            nodeJoinController.stopElectionContext(masterNode + " elected")___            _            final boolean success = joinElectedMaster(masterNode)___            synchronized (stateMutex) {_                if (success) {_                    DiscoveryNode currentMasterNode = this.clusterState().getNodes().getMasterNode()__                    if (currentMasterNode == null) {_                        _                        _                        logger.debug("no master node is set, despite of join request completing. retrying pings.")__                        joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                    } else if (currentMasterNode.equals(masterNode) == false) {_                        _                        joinThreadControl.stopRunningThreadAndRejoin("master_switched_while_finalizing_join")__                    }__                    joinThreadControl.markThreadAsDone(currentThread)__                } else {_                    _                    joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                }_            }_        }_    };the,main,function,of,a,join,thread,this,function,is,guaranteed,to,join,the,cluster,or,spawn,a,new,join,thread,upon,failure,to,do,so;private,void,inner,join,cluster,discovery,node,master,node,null,final,thread,current,thread,thread,current,thread,node,join,controller,start,election,context,while,master,node,null,join,thread,control,join,thread,active,current,thread,master,node,find,master,if,join,thread,control,join,thread,active,current,thread,logger,trace,thread,is,no,longer,in,current,join,thread,stopping,return,if,transport,service,get,local,node,equals,master,node,final,int,required,joins,math,max,0,elect,master,minimum,master,nodes,1,logger,debug,elected,as,master,waiting,for,incoming,joins,needed,required,joins,node,join,controller,wait,to,be,elected,as,master,required,joins,master,election,wait,for,joins,timeout,new,node,join,controller,election,callback,override,public,void,on,elected,as,master,cluster,state,state,synchronized,state,mutex,join,thread,control,mark,thread,as,done,current,thread,override,public,void,on,failure,throwable,t,logger,trace,failed,while,waiting,for,nodes,to,join,rejoining,t,synchronized,state,mutex,join,thread,control,mark,thread,as,done,and,start,new,current,thread,else,node,join,controller,stop,election,context,master,node,elected,final,boolean,success,join,elected,master,master,node,synchronized,state,mutex,if,success,discovery,node,current,master,node,this,cluster,state,get,nodes,get,master,node,if,current,master,node,null,logger,debug,no,master,node,is,set,despite,of,join,request,completing,retrying,pings,join,thread,control,mark,thread,as,done,and,start,new,current,thread,else,if,current,master,node,equals,master,node,false,join,thread,control,stop,running,thread,and,rejoin,join,thread,control,mark,thread,as,done,current,thread,else,join,thread,control,mark,thread,as,done,and,start,new,current,thread
ZenDiscovery -> private void innerJoinCluster();1529687475;the main function of a join thread. This function is guaranteed to join the cluster_or spawn a new join thread upon failure to do so.;private void innerJoinCluster() {_        DiscoveryNode masterNode = null__        final Thread currentThread = Thread.currentThread()__        nodeJoinController.startElectionContext()__        while (masterNode == null && joinThreadControl.joinThreadActive(currentThread)) {_            masterNode = findMaster()__        }__        if (!joinThreadControl.joinThreadActive(currentThread)) {_            logger.trace("thread is no longer in currentJoinThread. Stopping.")__            return__        }__        if (transportService.getLocalNode().equals(masterNode)) {_            final int requiredJoins = Math.max(0, electMaster.minimumMasterNodes() - 1)_ _            logger.debug("elected as master, waiting for incoming joins ([{}] needed)", requiredJoins)__            nodeJoinController.waitToBeElectedAsMaster(requiredJoins, masterElectionWaitForJoinsTimeout,_                    new NodeJoinController.ElectionCallback() {_                        @Override_                        public void onElectedAsMaster(ClusterState state) {_                            synchronized (stateMutex) {_                                joinThreadControl.markThreadAsDone(currentThread)__                            }_                        }__                        @Override_                        public void onFailure(Throwable t) {_                            logger.trace("failed while waiting for nodes to join, rejoining", t)__                            synchronized (stateMutex) {_                                joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                            }_                        }_                    }__            )__        } else {_            _            nodeJoinController.stopElectionContext(masterNode + " elected")___            _            final boolean success = joinElectedMaster(masterNode)___            synchronized (stateMutex) {_                if (success) {_                    DiscoveryNode currentMasterNode = this.clusterState().getNodes().getMasterNode()__                    if (currentMasterNode == null) {_                        _                        _                        logger.debug("no master node is set, despite of join request completing. retrying pings.")__                        joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                    } else if (currentMasterNode.equals(masterNode) == false) {_                        _                        joinThreadControl.stopRunningThreadAndRejoin("master_switched_while_finalizing_join")__                    }__                    joinThreadControl.markThreadAsDone(currentThread)__                } else {_                    _                    joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                }_            }_        }_    };the,main,function,of,a,join,thread,this,function,is,guaranteed,to,join,the,cluster,or,spawn,a,new,join,thread,upon,failure,to,do,so;private,void,inner,join,cluster,discovery,node,master,node,null,final,thread,current,thread,thread,current,thread,node,join,controller,start,election,context,while,master,node,null,join,thread,control,join,thread,active,current,thread,master,node,find,master,if,join,thread,control,join,thread,active,current,thread,logger,trace,thread,is,no,longer,in,current,join,thread,stopping,return,if,transport,service,get,local,node,equals,master,node,final,int,required,joins,math,max,0,elect,master,minimum,master,nodes,1,logger,debug,elected,as,master,waiting,for,incoming,joins,needed,required,joins,node,join,controller,wait,to,be,elected,as,master,required,joins,master,election,wait,for,joins,timeout,new,node,join,controller,election,callback,override,public,void,on,elected,as,master,cluster,state,state,synchronized,state,mutex,join,thread,control,mark,thread,as,done,current,thread,override,public,void,on,failure,throwable,t,logger,trace,failed,while,waiting,for,nodes,to,join,rejoining,t,synchronized,state,mutex,join,thread,control,mark,thread,as,done,and,start,new,current,thread,else,node,join,controller,stop,election,context,master,node,elected,final,boolean,success,join,elected,master,master,node,synchronized,state,mutex,if,success,discovery,node,current,master,node,this,cluster,state,get,nodes,get,master,node,if,current,master,node,null,logger,debug,no,master,node,is,set,despite,of,join,request,completing,retrying,pings,join,thread,control,mark,thread,as,done,and,start,new,current,thread,else,if,current,master,node,equals,master,node,false,join,thread,control,stop,running,thread,and,rejoin,join,thread,control,mark,thread,as,done,current,thread,else,join,thread,control,mark,thread,as,done,and,start,new,current,thread
ZenDiscovery -> private void innerJoinCluster();1533230566;the main function of a join thread. This function is guaranteed to join the cluster_or spawn a new join thread upon failure to do so.;private void innerJoinCluster() {_        DiscoveryNode masterNode = null__        final Thread currentThread = Thread.currentThread()__        nodeJoinController.startElectionContext()__        while (masterNode == null && joinThreadControl.joinThreadActive(currentThread)) {_            masterNode = findMaster()__        }__        if (!joinThreadControl.joinThreadActive(currentThread)) {_            logger.trace("thread is no longer in currentJoinThread. Stopping.")__            return__        }__        if (transportService.getLocalNode().equals(masterNode)) {_            final int requiredJoins = Math.max(0, electMaster.minimumMasterNodes() - 1)_ _            logger.debug("elected as master, waiting for incoming joins ([{}] needed)", requiredJoins)__            nodeJoinController.waitToBeElectedAsMaster(requiredJoins, masterElectionWaitForJoinsTimeout,_                    new NodeJoinController.ElectionCallback() {_                        @Override_                        public void onElectedAsMaster(ClusterState state) {_                            synchronized (stateMutex) {_                                joinThreadControl.markThreadAsDone(currentThread)__                            }_                        }__                        @Override_                        public void onFailure(Throwable t) {_                            logger.trace("failed while waiting for nodes to join, rejoining", t)__                            synchronized (stateMutex) {_                                joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                            }_                        }_                    }__            )__        } else {_            _            nodeJoinController.stopElectionContext(masterNode + " elected")___            _            final boolean success = joinElectedMaster(masterNode)___            synchronized (stateMutex) {_                if (success) {_                    DiscoveryNode currentMasterNode = this.clusterState().getNodes().getMasterNode()__                    if (currentMasterNode == null) {_                        _                        _                        logger.debug("no master node is set, despite of join request completing. retrying pings.")__                        joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                    } else if (currentMasterNode.equals(masterNode) == false) {_                        _                        joinThreadControl.stopRunningThreadAndRejoin("master_switched_while_finalizing_join")__                    }__                    joinThreadControl.markThreadAsDone(currentThread)__                } else {_                    _                    joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                }_            }_        }_    };the,main,function,of,a,join,thread,this,function,is,guaranteed,to,join,the,cluster,or,spawn,a,new,join,thread,upon,failure,to,do,so;private,void,inner,join,cluster,discovery,node,master,node,null,final,thread,current,thread,thread,current,thread,node,join,controller,start,election,context,while,master,node,null,join,thread,control,join,thread,active,current,thread,master,node,find,master,if,join,thread,control,join,thread,active,current,thread,logger,trace,thread,is,no,longer,in,current,join,thread,stopping,return,if,transport,service,get,local,node,equals,master,node,final,int,required,joins,math,max,0,elect,master,minimum,master,nodes,1,logger,debug,elected,as,master,waiting,for,incoming,joins,needed,required,joins,node,join,controller,wait,to,be,elected,as,master,required,joins,master,election,wait,for,joins,timeout,new,node,join,controller,election,callback,override,public,void,on,elected,as,master,cluster,state,state,synchronized,state,mutex,join,thread,control,mark,thread,as,done,current,thread,override,public,void,on,failure,throwable,t,logger,trace,failed,while,waiting,for,nodes,to,join,rejoining,t,synchronized,state,mutex,join,thread,control,mark,thread,as,done,and,start,new,current,thread,else,node,join,controller,stop,election,context,master,node,elected,final,boolean,success,join,elected,master,master,node,synchronized,state,mutex,if,success,discovery,node,current,master,node,this,cluster,state,get,nodes,get,master,node,if,current,master,node,null,logger,debug,no,master,node,is,set,despite,of,join,request,completing,retrying,pings,join,thread,control,mark,thread,as,done,and,start,new,current,thread,else,if,current,master,node,equals,master,node,false,join,thread,control,stop,running,thread,and,rejoin,join,thread,control,mark,thread,as,done,current,thread,else,join,thread,control,mark,thread,as,done,and,start,new,current,thread
ZenDiscovery -> private void innerJoinCluster();1540847035;the main function of a join thread. This function is guaranteed to join the cluster_or spawn a new join thread upon failure to do so.;private void innerJoinCluster() {_        DiscoveryNode masterNode = null__        final Thread currentThread = Thread.currentThread()__        nodeJoinController.startElectionContext()__        while (masterNode == null && joinThreadControl.joinThreadActive(currentThread)) {_            masterNode = findMaster()__        }__        if (!joinThreadControl.joinThreadActive(currentThread)) {_            logger.trace("thread is no longer in currentJoinThread. Stopping.")__            return__        }__        if (transportService.getLocalNode().equals(masterNode)) {_            final int requiredJoins = Math.max(0, electMaster.minimumMasterNodes() - 1)_ _            logger.debug("elected as master, waiting for incoming joins ([{}] needed)", requiredJoins)__            nodeJoinController.waitToBeElectedAsMaster(requiredJoins, masterElectionWaitForJoinsTimeout,_                    new NodeJoinController.ElectionCallback() {_                        @Override_                        public void onElectedAsMaster(ClusterState state) {_                            synchronized (stateMutex) {_                                joinThreadControl.markThreadAsDone(currentThread)__                            }_                        }__                        @Override_                        public void onFailure(Throwable t) {_                            logger.trace("failed while waiting for nodes to join, rejoining", t)__                            synchronized (stateMutex) {_                                joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                            }_                        }_                    }__            )__        } else {_            _            nodeJoinController.stopElectionContext(masterNode + " elected")___            _            final boolean success = joinElectedMaster(masterNode)___            synchronized (stateMutex) {_                if (success) {_                    DiscoveryNode currentMasterNode = this.clusterState().getNodes().getMasterNode()__                    if (currentMasterNode == null) {_                        _                        _                        logger.debug("no master node is set, despite of join request completing. retrying pings.")__                        joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                    } else if (currentMasterNode.equals(masterNode) == false) {_                        _                        joinThreadControl.stopRunningThreadAndRejoin("master_switched_while_finalizing_join")__                    }__                    joinThreadControl.markThreadAsDone(currentThread)__                } else {_                    _                    joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                }_            }_        }_    };the,main,function,of,a,join,thread,this,function,is,guaranteed,to,join,the,cluster,or,spawn,a,new,join,thread,upon,failure,to,do,so;private,void,inner,join,cluster,discovery,node,master,node,null,final,thread,current,thread,thread,current,thread,node,join,controller,start,election,context,while,master,node,null,join,thread,control,join,thread,active,current,thread,master,node,find,master,if,join,thread,control,join,thread,active,current,thread,logger,trace,thread,is,no,longer,in,current,join,thread,stopping,return,if,transport,service,get,local,node,equals,master,node,final,int,required,joins,math,max,0,elect,master,minimum,master,nodes,1,logger,debug,elected,as,master,waiting,for,incoming,joins,needed,required,joins,node,join,controller,wait,to,be,elected,as,master,required,joins,master,election,wait,for,joins,timeout,new,node,join,controller,election,callback,override,public,void,on,elected,as,master,cluster,state,state,synchronized,state,mutex,join,thread,control,mark,thread,as,done,current,thread,override,public,void,on,failure,throwable,t,logger,trace,failed,while,waiting,for,nodes,to,join,rejoining,t,synchronized,state,mutex,join,thread,control,mark,thread,as,done,and,start,new,current,thread,else,node,join,controller,stop,election,context,master,node,elected,final,boolean,success,join,elected,master,master,node,synchronized,state,mutex,if,success,discovery,node,current,master,node,this,cluster,state,get,nodes,get,master,node,if,current,master,node,null,logger,debug,no,master,node,is,set,despite,of,join,request,completing,retrying,pings,join,thread,control,mark,thread,as,done,and,start,new,current,thread,else,if,current,master,node,equals,master,node,false,join,thread,control,stop,running,thread,and,rejoin,join,thread,control,mark,thread,as,done,current,thread,else,join,thread,control,mark,thread,as,done,and,start,new,current,thread
ZenDiscovery -> private void innerJoinCluster();1541008027;the main function of a join thread. This function is guaranteed to join the cluster_or spawn a new join thread upon failure to do so.;private void innerJoinCluster() {_        DiscoveryNode masterNode = null__        final Thread currentThread = Thread.currentThread()__        nodeJoinController.startElectionContext()__        while (masterNode == null && joinThreadControl.joinThreadActive(currentThread)) {_            masterNode = findMaster()__        }__        if (!joinThreadControl.joinThreadActive(currentThread)) {_            logger.trace("thread is no longer in currentJoinThread. Stopping.")__            return__        }__        if (transportService.getLocalNode().equals(masterNode)) {_            final int requiredJoins = Math.max(0, electMaster.minimumMasterNodes() - 1)_ _            logger.debug("elected as master, waiting for incoming joins ([{}] needed)", requiredJoins)__            nodeJoinController.waitToBeElectedAsMaster(requiredJoins, masterElectionWaitForJoinsTimeout,_                    new NodeJoinController.ElectionCallback() {_                        @Override_                        public void onElectedAsMaster(ClusterState state) {_                            synchronized (stateMutex) {_                                joinThreadControl.markThreadAsDone(currentThread)__                            }_                        }__                        @Override_                        public void onFailure(Throwable t) {_                            logger.trace("failed while waiting for nodes to join, rejoining", t)__                            synchronized (stateMutex) {_                                joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                            }_                        }_                    }__            )__        } else {_            _            nodeJoinController.stopElectionContext(masterNode + " elected")___            _            final boolean success = joinElectedMaster(masterNode)___            synchronized (stateMutex) {_                if (success) {_                    DiscoveryNode currentMasterNode = this.clusterState().getNodes().getMasterNode()__                    if (currentMasterNode == null) {_                        _                        _                        logger.debug("no master node is set, despite of join request completing. retrying pings.")__                        joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                    } else if (currentMasterNode.equals(masterNode) == false) {_                        _                        joinThreadControl.stopRunningThreadAndRejoin("master_switched_while_finalizing_join")__                    }__                    joinThreadControl.markThreadAsDone(currentThread)__                } else {_                    _                    joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                }_            }_        }_    };the,main,function,of,a,join,thread,this,function,is,guaranteed,to,join,the,cluster,or,spawn,a,new,join,thread,upon,failure,to,do,so;private,void,inner,join,cluster,discovery,node,master,node,null,final,thread,current,thread,thread,current,thread,node,join,controller,start,election,context,while,master,node,null,join,thread,control,join,thread,active,current,thread,master,node,find,master,if,join,thread,control,join,thread,active,current,thread,logger,trace,thread,is,no,longer,in,current,join,thread,stopping,return,if,transport,service,get,local,node,equals,master,node,final,int,required,joins,math,max,0,elect,master,minimum,master,nodes,1,logger,debug,elected,as,master,waiting,for,incoming,joins,needed,required,joins,node,join,controller,wait,to,be,elected,as,master,required,joins,master,election,wait,for,joins,timeout,new,node,join,controller,election,callback,override,public,void,on,elected,as,master,cluster,state,state,synchronized,state,mutex,join,thread,control,mark,thread,as,done,current,thread,override,public,void,on,failure,throwable,t,logger,trace,failed,while,waiting,for,nodes,to,join,rejoining,t,synchronized,state,mutex,join,thread,control,mark,thread,as,done,and,start,new,current,thread,else,node,join,controller,stop,election,context,master,node,elected,final,boolean,success,join,elected,master,master,node,synchronized,state,mutex,if,success,discovery,node,current,master,node,this,cluster,state,get,nodes,get,master,node,if,current,master,node,null,logger,debug,no,master,node,is,set,despite,of,join,request,completing,retrying,pings,join,thread,control,mark,thread,as,done,and,start,new,current,thread,else,if,current,master,node,equals,master,node,false,join,thread,control,stop,running,thread,and,rejoin,join,thread,control,mark,thread,as,done,current,thread,else,join,thread,control,mark,thread,as,done,and,start,new,current,thread
ZenDiscovery -> private void innerJoinCluster();1541092382;the main function of a join thread. This function is guaranteed to join the cluster_or spawn a new join thread upon failure to do so.;private void innerJoinCluster() {_        DiscoveryNode masterNode = null__        final Thread currentThread = Thread.currentThread()__        nodeJoinController.startElectionContext()__        while (masterNode == null && joinThreadControl.joinThreadActive(currentThread)) {_            masterNode = findMaster()__        }__        if (!joinThreadControl.joinThreadActive(currentThread)) {_            logger.trace("thread is no longer in currentJoinThread. Stopping.")__            return__        }__        if (transportService.getLocalNode().equals(masterNode)) {_            final int requiredJoins = Math.max(0, electMaster.minimumMasterNodes() - 1)_ _            logger.debug("elected as master, waiting for incoming joins ([{}] needed)", requiredJoins)__            nodeJoinController.waitToBeElectedAsMaster(requiredJoins, masterElectionWaitForJoinsTimeout,_                    new NodeJoinController.ElectionCallback() {_                        @Override_                        public void onElectedAsMaster(ClusterState state) {_                            synchronized (stateMutex) {_                                joinThreadControl.markThreadAsDone(currentThread)__                            }_                        }__                        @Override_                        public void onFailure(Throwable t) {_                            logger.trace("failed while waiting for nodes to join, rejoining", t)__                            synchronized (stateMutex) {_                                joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                            }_                        }_                    }__            )__        } else {_            _            nodeJoinController.stopElectionContext(masterNode + " elected")___            _            final boolean success = joinElectedMaster(masterNode)___            synchronized (stateMutex) {_                if (success) {_                    DiscoveryNode currentMasterNode = this.clusterState().getNodes().getMasterNode()__                    if (currentMasterNode == null) {_                        _                        _                        logger.debug("no master node is set, despite of join request completing. retrying pings.")__                        joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                    } else if (currentMasterNode.equals(masterNode) == false) {_                        _                        joinThreadControl.stopRunningThreadAndRejoin("master_switched_while_finalizing_join")__                    }__                    joinThreadControl.markThreadAsDone(currentThread)__                } else {_                    _                    joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                }_            }_        }_    };the,main,function,of,a,join,thread,this,function,is,guaranteed,to,join,the,cluster,or,spawn,a,new,join,thread,upon,failure,to,do,so;private,void,inner,join,cluster,discovery,node,master,node,null,final,thread,current,thread,thread,current,thread,node,join,controller,start,election,context,while,master,node,null,join,thread,control,join,thread,active,current,thread,master,node,find,master,if,join,thread,control,join,thread,active,current,thread,logger,trace,thread,is,no,longer,in,current,join,thread,stopping,return,if,transport,service,get,local,node,equals,master,node,final,int,required,joins,math,max,0,elect,master,minimum,master,nodes,1,logger,debug,elected,as,master,waiting,for,incoming,joins,needed,required,joins,node,join,controller,wait,to,be,elected,as,master,required,joins,master,election,wait,for,joins,timeout,new,node,join,controller,election,callback,override,public,void,on,elected,as,master,cluster,state,state,synchronized,state,mutex,join,thread,control,mark,thread,as,done,current,thread,override,public,void,on,failure,throwable,t,logger,trace,failed,while,waiting,for,nodes,to,join,rejoining,t,synchronized,state,mutex,join,thread,control,mark,thread,as,done,and,start,new,current,thread,else,node,join,controller,stop,election,context,master,node,elected,final,boolean,success,join,elected,master,master,node,synchronized,state,mutex,if,success,discovery,node,current,master,node,this,cluster,state,get,nodes,get,master,node,if,current,master,node,null,logger,debug,no,master,node,is,set,despite,of,join,request,completing,retrying,pings,join,thread,control,mark,thread,as,done,and,start,new,current,thread,else,if,current,master,node,equals,master,node,false,join,thread,control,stop,running,thread,and,rejoin,join,thread,control,mark,thread,as,done,current,thread,else,join,thread,control,mark,thread,as,done,and,start,new,current,thread
ZenDiscovery -> private void innerJoinCluster();1542646292;the main function of a join thread. This function is guaranteed to join the cluster_or spawn a new join thread upon failure to do so.;private void innerJoinCluster() {_        DiscoveryNode masterNode = null__        final Thread currentThread = Thread.currentThread()__        nodeJoinController.startElectionContext()__        while (masterNode == null && joinThreadControl.joinThreadActive(currentThread)) {_            masterNode = findMaster()__        }__        if (!joinThreadControl.joinThreadActive(currentThread)) {_            logger.trace("thread is no longer in currentJoinThread. Stopping.")__            return__        }__        if (transportService.getLocalNode().equals(masterNode)) {_            final int requiredJoins = Math.max(0, electMaster.minimumMasterNodes() - 1)_ _            logger.debug("elected as master, waiting for incoming joins ([{}] needed)", requiredJoins)__            nodeJoinController.waitToBeElectedAsMaster(requiredJoins, masterElectionWaitForJoinsTimeout,_                    new NodeJoinController.ElectionCallback() {_                        @Override_                        public void onElectedAsMaster(ClusterState state) {_                            synchronized (stateMutex) {_                                joinThreadControl.markThreadAsDone(currentThread)__                            }_                        }__                        @Override_                        public void onFailure(Throwable t) {_                            logger.trace("failed while waiting for nodes to join, rejoining", t)__                            synchronized (stateMutex) {_                                joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                            }_                        }_                    }__            )__        } else {_            _            nodeJoinController.stopElectionContext(masterNode + " elected")___            _            final boolean success = joinElectedMaster(masterNode)___            synchronized (stateMutex) {_                if (success) {_                    DiscoveryNode currentMasterNode = this.clusterState().getNodes().getMasterNode()__                    if (currentMasterNode == null) {_                        _                        _                        logger.debug("no master node is set, despite of join request completing. retrying pings.")__                        joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                    } else if (currentMasterNode.equals(masterNode) == false) {_                        _                        joinThreadControl.stopRunningThreadAndRejoin("master_switched_while_finalizing_join")__                    }__                    joinThreadControl.markThreadAsDone(currentThread)__                } else {_                    _                    joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                }_            }_        }_    };the,main,function,of,a,join,thread,this,function,is,guaranteed,to,join,the,cluster,or,spawn,a,new,join,thread,upon,failure,to,do,so;private,void,inner,join,cluster,discovery,node,master,node,null,final,thread,current,thread,thread,current,thread,node,join,controller,start,election,context,while,master,node,null,join,thread,control,join,thread,active,current,thread,master,node,find,master,if,join,thread,control,join,thread,active,current,thread,logger,trace,thread,is,no,longer,in,current,join,thread,stopping,return,if,transport,service,get,local,node,equals,master,node,final,int,required,joins,math,max,0,elect,master,minimum,master,nodes,1,logger,debug,elected,as,master,waiting,for,incoming,joins,needed,required,joins,node,join,controller,wait,to,be,elected,as,master,required,joins,master,election,wait,for,joins,timeout,new,node,join,controller,election,callback,override,public,void,on,elected,as,master,cluster,state,state,synchronized,state,mutex,join,thread,control,mark,thread,as,done,current,thread,override,public,void,on,failure,throwable,t,logger,trace,failed,while,waiting,for,nodes,to,join,rejoining,t,synchronized,state,mutex,join,thread,control,mark,thread,as,done,and,start,new,current,thread,else,node,join,controller,stop,election,context,master,node,elected,final,boolean,success,join,elected,master,master,node,synchronized,state,mutex,if,success,discovery,node,current,master,node,this,cluster,state,get,nodes,get,master,node,if,current,master,node,null,logger,debug,no,master,node,is,set,despite,of,join,request,completing,retrying,pings,join,thread,control,mark,thread,as,done,and,start,new,current,thread,else,if,current,master,node,equals,master,node,false,join,thread,control,stop,running,thread,and,rejoin,join,thread,control,mark,thread,as,done,current,thread,else,join,thread,control,mark,thread,as,done,and,start,new,current,thread
ZenDiscovery -> private void innerJoinCluster();1544081506;the main function of a join thread. This function is guaranteed to join the cluster_or spawn a new join thread upon failure to do so.;private void innerJoinCluster() {_        DiscoveryNode masterNode = null__        final Thread currentThread = Thread.currentThread()__        nodeJoinController.startElectionContext()__        while (masterNode == null && joinThreadControl.joinThreadActive(currentThread)) {_            masterNode = findMaster()__        }__        if (!joinThreadControl.joinThreadActive(currentThread)) {_            logger.trace("thread is no longer in currentJoinThread. Stopping.")__            return__        }__        if (transportService.getLocalNode().equals(masterNode)) {_            final int requiredJoins = Math.max(0, electMaster.minimumMasterNodes() - 1)_ _            logger.debug("elected as master, waiting for incoming joins ([{}] needed)", requiredJoins)__            nodeJoinController.waitToBeElectedAsMaster(requiredJoins, masterElectionWaitForJoinsTimeout,_                    new NodeJoinController.ElectionCallback() {_                        @Override_                        public void onElectedAsMaster(ClusterState state) {_                            synchronized (stateMutex) {_                                joinThreadControl.markThreadAsDone(currentThread)__                            }_                        }__                        @Override_                        public void onFailure(Throwable t) {_                            logger.trace("failed while waiting for nodes to join, rejoining", t)__                            synchronized (stateMutex) {_                                joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                            }_                        }_                    }__            )__        } else {_            _            nodeJoinController.stopElectionContext(masterNode + " elected")___            _            final boolean success = joinElectedMaster(masterNode)___            synchronized (stateMutex) {_                if (success) {_                    DiscoveryNode currentMasterNode = this.clusterState().getNodes().getMasterNode()__                    if (currentMasterNode == null) {_                        _                        _                        logger.debug("no master node is set, despite of join request completing. retrying pings.")__                        joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                    } else if (currentMasterNode.equals(masterNode) == false) {_                        _                        joinThreadControl.stopRunningThreadAndRejoin("master_switched_while_finalizing_join")__                    }__                    joinThreadControl.markThreadAsDone(currentThread)__                } else {_                    _                    joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                }_            }_        }_    };the,main,function,of,a,join,thread,this,function,is,guaranteed,to,join,the,cluster,or,spawn,a,new,join,thread,upon,failure,to,do,so;private,void,inner,join,cluster,discovery,node,master,node,null,final,thread,current,thread,thread,current,thread,node,join,controller,start,election,context,while,master,node,null,join,thread,control,join,thread,active,current,thread,master,node,find,master,if,join,thread,control,join,thread,active,current,thread,logger,trace,thread,is,no,longer,in,current,join,thread,stopping,return,if,transport,service,get,local,node,equals,master,node,final,int,required,joins,math,max,0,elect,master,minimum,master,nodes,1,logger,debug,elected,as,master,waiting,for,incoming,joins,needed,required,joins,node,join,controller,wait,to,be,elected,as,master,required,joins,master,election,wait,for,joins,timeout,new,node,join,controller,election,callback,override,public,void,on,elected,as,master,cluster,state,state,synchronized,state,mutex,join,thread,control,mark,thread,as,done,current,thread,override,public,void,on,failure,throwable,t,logger,trace,failed,while,waiting,for,nodes,to,join,rejoining,t,synchronized,state,mutex,join,thread,control,mark,thread,as,done,and,start,new,current,thread,else,node,join,controller,stop,election,context,master,node,elected,final,boolean,success,join,elected,master,master,node,synchronized,state,mutex,if,success,discovery,node,current,master,node,this,cluster,state,get,nodes,get,master,node,if,current,master,node,null,logger,debug,no,master,node,is,set,despite,of,join,request,completing,retrying,pings,join,thread,control,mark,thread,as,done,and,start,new,current,thread,else,if,current,master,node,equals,master,node,false,join,thread,control,stop,running,thread,and,rejoin,join,thread,control,mark,thread,as,done,current,thread,else,join,thread,control,mark,thread,as,done,and,start,new,current,thread
ZenDiscovery -> private void innerJoinCluster();1546850547;the main function of a join thread. This function is guaranteed to join the cluster_or spawn a new join thread upon failure to do so.;private void innerJoinCluster() {_        DiscoveryNode masterNode = null__        final Thread currentThread = Thread.currentThread()__        nodeJoinController.startElectionContext()__        while (masterNode == null && joinThreadControl.joinThreadActive(currentThread)) {_            masterNode = findMaster()__        }__        if (!joinThreadControl.joinThreadActive(currentThread)) {_            logger.trace("thread is no longer in currentJoinThread. Stopping.")__            return__        }__        if (transportService.getLocalNode().equals(masterNode)) {_            final int requiredJoins = Math.max(0, electMaster.minimumMasterNodes() - 1)_ _            logger.debug("elected as master, waiting for incoming joins ([{}] needed)", requiredJoins)__            nodeJoinController.waitToBeElectedAsMaster(requiredJoins, masterElectionWaitForJoinsTimeout,_                    new NodeJoinController.ElectionCallback() {_                        @Override_                        public void onElectedAsMaster(ClusterState state) {_                            synchronized (stateMutex) {_                                joinThreadControl.markThreadAsDone(currentThread)__                            }_                        }__                        @Override_                        public void onFailure(Throwable t) {_                            logger.trace("failed while waiting for nodes to join, rejoining", t)__                            synchronized (stateMutex) {_                                joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                            }_                        }_                    }__            )__        } else {_            _            nodeJoinController.stopElectionContext(masterNode + " elected")___            _            final boolean success = joinElectedMaster(masterNode)___            synchronized (stateMutex) {_                if (success) {_                    DiscoveryNode currentMasterNode = this.clusterState().getNodes().getMasterNode()__                    if (currentMasterNode == null) {_                        _                        _                        logger.debug("no master node is set, despite of join request completing. retrying pings.")__                        joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                    } else if (currentMasterNode.equals(masterNode) == false) {_                        _                        joinThreadControl.stopRunningThreadAndRejoin("master_switched_while_finalizing_join")__                    }__                    joinThreadControl.markThreadAsDone(currentThread)__                } else {_                    _                    joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                }_            }_        }_    };the,main,function,of,a,join,thread,this,function,is,guaranteed,to,join,the,cluster,or,spawn,a,new,join,thread,upon,failure,to,do,so;private,void,inner,join,cluster,discovery,node,master,node,null,final,thread,current,thread,thread,current,thread,node,join,controller,start,election,context,while,master,node,null,join,thread,control,join,thread,active,current,thread,master,node,find,master,if,join,thread,control,join,thread,active,current,thread,logger,trace,thread,is,no,longer,in,current,join,thread,stopping,return,if,transport,service,get,local,node,equals,master,node,final,int,required,joins,math,max,0,elect,master,minimum,master,nodes,1,logger,debug,elected,as,master,waiting,for,incoming,joins,needed,required,joins,node,join,controller,wait,to,be,elected,as,master,required,joins,master,election,wait,for,joins,timeout,new,node,join,controller,election,callback,override,public,void,on,elected,as,master,cluster,state,state,synchronized,state,mutex,join,thread,control,mark,thread,as,done,current,thread,override,public,void,on,failure,throwable,t,logger,trace,failed,while,waiting,for,nodes,to,join,rejoining,t,synchronized,state,mutex,join,thread,control,mark,thread,as,done,and,start,new,current,thread,else,node,join,controller,stop,election,context,master,node,elected,final,boolean,success,join,elected,master,master,node,synchronized,state,mutex,if,success,discovery,node,current,master,node,this,cluster,state,get,nodes,get,master,node,if,current,master,node,null,logger,debug,no,master,node,is,set,despite,of,join,request,completing,retrying,pings,join,thread,control,mark,thread,as,done,and,start,new,current,thread,else,if,current,master,node,equals,master,node,false,join,thread,control,stop,running,thread,and,rejoin,join,thread,control,mark,thread,as,done,current,thread,else,join,thread,control,mark,thread,as,done,and,start,new,current,thread
ZenDiscovery -> private void innerJoinCluster();1547121470;the main function of a join thread. This function is guaranteed to join the cluster_or spawn a new join thread upon failure to do so.;private void innerJoinCluster() {_        DiscoveryNode masterNode = null__        final Thread currentThread = Thread.currentThread()__        nodeJoinController.startElectionContext()__        while (masterNode == null && joinThreadControl.joinThreadActive(currentThread)) {_            masterNode = findMaster()__        }__        if (!joinThreadControl.joinThreadActive(currentThread)) {_            logger.trace("thread is no longer in currentJoinThread. Stopping.")__            return__        }__        if (transportService.getLocalNode().equals(masterNode)) {_            final int requiredJoins = Math.max(0, electMaster.minimumMasterNodes() - 1)_ _            logger.debug("elected as master, waiting for incoming joins ([{}] needed)", requiredJoins)__            nodeJoinController.waitToBeElectedAsMaster(requiredJoins, masterElectionWaitForJoinsTimeout,_                    new NodeJoinController.ElectionCallback() {_                        @Override_                        public void onElectedAsMaster(ClusterState state) {_                            synchronized (stateMutex) {_                                joinThreadControl.markThreadAsDone(currentThread)__                            }_                        }__                        @Override_                        public void onFailure(Throwable t) {_                            logger.trace("failed while waiting for nodes to join, rejoining", t)__                            synchronized (stateMutex) {_                                joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                            }_                        }_                    }__            )__        } else {_            _            nodeJoinController.stopElectionContext(masterNode + " elected")___            _            final boolean success = joinElectedMaster(masterNode)___            synchronized (stateMutex) {_                if (success) {_                    DiscoveryNode currentMasterNode = this.clusterState().getNodes().getMasterNode()__                    if (currentMasterNode == null) {_                        _                        _                        logger.debug("no master node is set, despite of join request completing. retrying pings.")__                        joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                    } else if (currentMasterNode.equals(masterNode) == false) {_                        _                        joinThreadControl.stopRunningThreadAndRejoin("master_switched_while_finalizing_join")__                    }__                    joinThreadControl.markThreadAsDone(currentThread)__                } else {_                    _                    joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                }_            }_        }_    };the,main,function,of,a,join,thread,this,function,is,guaranteed,to,join,the,cluster,or,spawn,a,new,join,thread,upon,failure,to,do,so;private,void,inner,join,cluster,discovery,node,master,node,null,final,thread,current,thread,thread,current,thread,node,join,controller,start,election,context,while,master,node,null,join,thread,control,join,thread,active,current,thread,master,node,find,master,if,join,thread,control,join,thread,active,current,thread,logger,trace,thread,is,no,longer,in,current,join,thread,stopping,return,if,transport,service,get,local,node,equals,master,node,final,int,required,joins,math,max,0,elect,master,minimum,master,nodes,1,logger,debug,elected,as,master,waiting,for,incoming,joins,needed,required,joins,node,join,controller,wait,to,be,elected,as,master,required,joins,master,election,wait,for,joins,timeout,new,node,join,controller,election,callback,override,public,void,on,elected,as,master,cluster,state,state,synchronized,state,mutex,join,thread,control,mark,thread,as,done,current,thread,override,public,void,on,failure,throwable,t,logger,trace,failed,while,waiting,for,nodes,to,join,rejoining,t,synchronized,state,mutex,join,thread,control,mark,thread,as,done,and,start,new,current,thread,else,node,join,controller,stop,election,context,master,node,elected,final,boolean,success,join,elected,master,master,node,synchronized,state,mutex,if,success,discovery,node,current,master,node,this,cluster,state,get,nodes,get,master,node,if,current,master,node,null,logger,debug,no,master,node,is,set,despite,of,join,request,completing,retrying,pings,join,thread,control,mark,thread,as,done,and,start,new,current,thread,else,if,current,master,node,equals,master,node,false,join,thread,control,stop,running,thread,and,rejoin,join,thread,control,mark,thread,as,done,current,thread,else,join,thread,control,mark,thread,as,done,and,start,new,current,thread
ZenDiscovery -> private void innerJoinCluster();1547625930;the main function of a join thread. This function is guaranteed to join the cluster_or spawn a new join thread upon failure to do so.;private void innerJoinCluster() {_        DiscoveryNode masterNode = null__        final Thread currentThread = Thread.currentThread()__        nodeJoinController.startElectionContext()__        while (masterNode == null && joinThreadControl.joinThreadActive(currentThread)) {_            masterNode = findMaster()__        }__        if (!joinThreadControl.joinThreadActive(currentThread)) {_            logger.trace("thread is no longer in currentJoinThread. Stopping.")__            return__        }__        if (transportService.getLocalNode().equals(masterNode)) {_            final int requiredJoins = Math.max(0, electMaster.minimumMasterNodes() - 1)_ _            logger.debug("elected as master, waiting for incoming joins ([{}] needed)", requiredJoins)__            nodeJoinController.waitToBeElectedAsMaster(requiredJoins, masterElectionWaitForJoinsTimeout,_                    new NodeJoinController.ElectionCallback() {_                        @Override_                        public void onElectedAsMaster(ClusterState state) {_                            synchronized (stateMutex) {_                                joinThreadControl.markThreadAsDone(currentThread)__                            }_                        }__                        @Override_                        public void onFailure(Throwable t) {_                            logger.trace("failed while waiting for nodes to join, rejoining", t)__                            synchronized (stateMutex) {_                                joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                            }_                        }_                    }__            )__        } else {_            _            nodeJoinController.stopElectionContext(masterNode + " elected")___            _            final boolean success = joinElectedMaster(masterNode)___            synchronized (stateMutex) {_                if (success) {_                    DiscoveryNode currentMasterNode = this.clusterState().getNodes().getMasterNode()__                    if (currentMasterNode == null) {_                        _                        _                        logger.debug("no master node is set, despite of join request completing. retrying pings.")__                        joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                    } else if (currentMasterNode.equals(masterNode) == false) {_                        _                        joinThreadControl.stopRunningThreadAndRejoin("master_switched_while_finalizing_join")__                    }__                    joinThreadControl.markThreadAsDone(currentThread)__                } else {_                    _                    joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                }_            }_        }_    };the,main,function,of,a,join,thread,this,function,is,guaranteed,to,join,the,cluster,or,spawn,a,new,join,thread,upon,failure,to,do,so;private,void,inner,join,cluster,discovery,node,master,node,null,final,thread,current,thread,thread,current,thread,node,join,controller,start,election,context,while,master,node,null,join,thread,control,join,thread,active,current,thread,master,node,find,master,if,join,thread,control,join,thread,active,current,thread,logger,trace,thread,is,no,longer,in,current,join,thread,stopping,return,if,transport,service,get,local,node,equals,master,node,final,int,required,joins,math,max,0,elect,master,minimum,master,nodes,1,logger,debug,elected,as,master,waiting,for,incoming,joins,needed,required,joins,node,join,controller,wait,to,be,elected,as,master,required,joins,master,election,wait,for,joins,timeout,new,node,join,controller,election,callback,override,public,void,on,elected,as,master,cluster,state,state,synchronized,state,mutex,join,thread,control,mark,thread,as,done,current,thread,override,public,void,on,failure,throwable,t,logger,trace,failed,while,waiting,for,nodes,to,join,rejoining,t,synchronized,state,mutex,join,thread,control,mark,thread,as,done,and,start,new,current,thread,else,node,join,controller,stop,election,context,master,node,elected,final,boolean,success,join,elected,master,master,node,synchronized,state,mutex,if,success,discovery,node,current,master,node,this,cluster,state,get,nodes,get,master,node,if,current,master,node,null,logger,debug,no,master,node,is,set,despite,of,join,request,completing,retrying,pings,join,thread,control,mark,thread,as,done,and,start,new,current,thread,else,if,current,master,node,equals,master,node,false,join,thread,control,stop,running,thread,and,rejoin,join,thread,control,mark,thread,as,done,current,thread,else,join,thread,control,mark,thread,as,done,and,start,new,current,thread
ZenDiscovery -> private void innerJoinCluster();1548320260;the main function of a join thread. This function is guaranteed to join the cluster_or spawn a new join thread upon failure to do so.;private void innerJoinCluster() {_        DiscoveryNode masterNode = null__        final Thread currentThread = Thread.currentThread()__        nodeJoinController.startElectionContext()__        while (masterNode == null && joinThreadControl.joinThreadActive(currentThread)) {_            masterNode = findMaster()__        }__        if (!joinThreadControl.joinThreadActive(currentThread)) {_            logger.trace("thread is no longer in currentJoinThread. Stopping.")__            return__        }__        if (transportService.getLocalNode().equals(masterNode)) {_            final int requiredJoins = Math.max(0, electMaster.minimumMasterNodes() - 1)_ _            logger.debug("elected as master, waiting for incoming joins ([{}] needed)", requiredJoins)__            nodeJoinController.waitToBeElectedAsMaster(requiredJoins, masterElectionWaitForJoinsTimeout,_                    new NodeJoinController.ElectionCallback() {_                        @Override_                        public void onElectedAsMaster(ClusterState state) {_                            synchronized (stateMutex) {_                                joinThreadControl.markThreadAsDone(currentThread)__                            }_                        }__                        @Override_                        public void onFailure(Throwable t) {_                            logger.trace("failed while waiting for nodes to join, rejoining", t)__                            synchronized (stateMutex) {_                                joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                            }_                        }_                    }__            )__        } else {_            _            nodeJoinController.stopElectionContext(masterNode + " elected")___            _            final boolean success = joinElectedMaster(masterNode)___            synchronized (stateMutex) {_                if (success) {_                    DiscoveryNode currentMasterNode = this.clusterState().getNodes().getMasterNode()__                    if (currentMasterNode == null) {_                        _                        _                        logger.debug("no master node is set, despite of join request completing. retrying pings.")__                        joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                    } else if (currentMasterNode.equals(masterNode) == false) {_                        _                        joinThreadControl.stopRunningThreadAndRejoin("master_switched_while_finalizing_join")__                    }__                    joinThreadControl.markThreadAsDone(currentThread)__                } else {_                    _                    joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                }_            }_        }_    };the,main,function,of,a,join,thread,this,function,is,guaranteed,to,join,the,cluster,or,spawn,a,new,join,thread,upon,failure,to,do,so;private,void,inner,join,cluster,discovery,node,master,node,null,final,thread,current,thread,thread,current,thread,node,join,controller,start,election,context,while,master,node,null,join,thread,control,join,thread,active,current,thread,master,node,find,master,if,join,thread,control,join,thread,active,current,thread,logger,trace,thread,is,no,longer,in,current,join,thread,stopping,return,if,transport,service,get,local,node,equals,master,node,final,int,required,joins,math,max,0,elect,master,minimum,master,nodes,1,logger,debug,elected,as,master,waiting,for,incoming,joins,needed,required,joins,node,join,controller,wait,to,be,elected,as,master,required,joins,master,election,wait,for,joins,timeout,new,node,join,controller,election,callback,override,public,void,on,elected,as,master,cluster,state,state,synchronized,state,mutex,join,thread,control,mark,thread,as,done,current,thread,override,public,void,on,failure,throwable,t,logger,trace,failed,while,waiting,for,nodes,to,join,rejoining,t,synchronized,state,mutex,join,thread,control,mark,thread,as,done,and,start,new,current,thread,else,node,join,controller,stop,election,context,master,node,elected,final,boolean,success,join,elected,master,master,node,synchronized,state,mutex,if,success,discovery,node,current,master,node,this,cluster,state,get,nodes,get,master,node,if,current,master,node,null,logger,debug,no,master,node,is,set,despite,of,join,request,completing,retrying,pings,join,thread,control,mark,thread,as,done,and,start,new,current,thread,else,if,current,master,node,equals,master,node,false,join,thread,control,stop,running,thread,and,rejoin,join,thread,control,mark,thread,as,done,current,thread,else,join,thread,control,mark,thread,as,done,and,start,new,current,thread
ZenDiscovery -> private void innerJoinCluster();1549270328;the main function of a join thread. This function is guaranteed to join the cluster_or spawn a new join thread upon failure to do so.;private void innerJoinCluster() {_        DiscoveryNode masterNode = null__        final Thread currentThread = Thread.currentThread()__        nodeJoinController.startElectionContext()__        while (masterNode == null && joinThreadControl.joinThreadActive(currentThread)) {_            masterNode = findMaster()__        }__        if (!joinThreadControl.joinThreadActive(currentThread)) {_            logger.trace("thread is no longer in currentJoinThread. Stopping.")__            return__        }__        if (transportService.getLocalNode().equals(masterNode)) {_            final int requiredJoins = Math.max(0, electMaster.minimumMasterNodes() - 1)_ _            logger.debug("elected as master, waiting for incoming joins ([{}] needed)", requiredJoins)__            nodeJoinController.waitToBeElectedAsMaster(requiredJoins, masterElectionWaitForJoinsTimeout,_                    new NodeJoinController.ElectionCallback() {_                        @Override_                        public void onElectedAsMaster(ClusterState state) {_                            synchronized (stateMutex) {_                                joinThreadControl.markThreadAsDone(currentThread)__                            }_                        }__                        @Override_                        public void onFailure(Throwable t) {_                            logger.trace("failed while waiting for nodes to join, rejoining", t)__                            synchronized (stateMutex) {_                                joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                            }_                        }_                    }__            )__        } else {_            _            nodeJoinController.stopElectionContext(masterNode + " elected")___            _            final boolean success = joinElectedMaster(masterNode)___            synchronized (stateMutex) {_                if (success) {_                    DiscoveryNode currentMasterNode = this.clusterState().getNodes().getMasterNode()__                    if (currentMasterNode == null) {_                        _                        _                        logger.debug("no master node is set, despite of join request completing. retrying pings.")__                        joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                    } else if (currentMasterNode.equals(masterNode) == false) {_                        _                        joinThreadControl.stopRunningThreadAndRejoin("master_switched_while_finalizing_join")__                    }__                    joinThreadControl.markThreadAsDone(currentThread)__                } else {_                    _                    joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                }_            }_        }_    };the,main,function,of,a,join,thread,this,function,is,guaranteed,to,join,the,cluster,or,spawn,a,new,join,thread,upon,failure,to,do,so;private,void,inner,join,cluster,discovery,node,master,node,null,final,thread,current,thread,thread,current,thread,node,join,controller,start,election,context,while,master,node,null,join,thread,control,join,thread,active,current,thread,master,node,find,master,if,join,thread,control,join,thread,active,current,thread,logger,trace,thread,is,no,longer,in,current,join,thread,stopping,return,if,transport,service,get,local,node,equals,master,node,final,int,required,joins,math,max,0,elect,master,minimum,master,nodes,1,logger,debug,elected,as,master,waiting,for,incoming,joins,needed,required,joins,node,join,controller,wait,to,be,elected,as,master,required,joins,master,election,wait,for,joins,timeout,new,node,join,controller,election,callback,override,public,void,on,elected,as,master,cluster,state,state,synchronized,state,mutex,join,thread,control,mark,thread,as,done,current,thread,override,public,void,on,failure,throwable,t,logger,trace,failed,while,waiting,for,nodes,to,join,rejoining,t,synchronized,state,mutex,join,thread,control,mark,thread,as,done,and,start,new,current,thread,else,node,join,controller,stop,election,context,master,node,elected,final,boolean,success,join,elected,master,master,node,synchronized,state,mutex,if,success,discovery,node,current,master,node,this,cluster,state,get,nodes,get,master,node,if,current,master,node,null,logger,debug,no,master,node,is,set,despite,of,join,request,completing,retrying,pings,join,thread,control,mark,thread,as,done,and,start,new,current,thread,else,if,current,master,node,equals,master,node,false,join,thread,control,stop,running,thread,and,rejoin,join,thread,control,mark,thread,as,done,current,thread,else,join,thread,control,mark,thread,as,done,and,start,new,current,thread
ZenDiscovery -> private void innerJoinCluster();1549356476;the main function of a join thread. This function is guaranteed to join the cluster_or spawn a new join thread upon failure to do so.;private void innerJoinCluster() {_        DiscoveryNode masterNode = null__        final Thread currentThread = Thread.currentThread()__        nodeJoinController.startElectionContext()__        while (masterNode == null && joinThreadControl.joinThreadActive(currentThread)) {_            masterNode = findMaster()__        }__        if (!joinThreadControl.joinThreadActive(currentThread)) {_            logger.trace("thread is no longer in currentJoinThread. Stopping.")__            return__        }__        if (transportService.getLocalNode().equals(masterNode)) {_            final int requiredJoins = Math.max(0, electMaster.minimumMasterNodes() - 1)_ _            logger.debug("elected as master, waiting for incoming joins ([{}] needed)", requiredJoins)__            nodeJoinController.waitToBeElectedAsMaster(requiredJoins, masterElectionWaitForJoinsTimeout,_                    new NodeJoinController.ElectionCallback() {_                        @Override_                        public void onElectedAsMaster(ClusterState state) {_                            synchronized (stateMutex) {_                                joinThreadControl.markThreadAsDone(currentThread)__                            }_                        }__                        @Override_                        public void onFailure(Throwable t) {_                            logger.trace("failed while waiting for nodes to join, rejoining", t)__                            synchronized (stateMutex) {_                                joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                            }_                        }_                    }__            )__        } else {_            _            nodeJoinController.stopElectionContext(masterNode + " elected")___            _            final boolean success = joinElectedMaster(masterNode)___            synchronized (stateMutex) {_                if (success) {_                    DiscoveryNode currentMasterNode = this.clusterState().getNodes().getMasterNode()__                    if (currentMasterNode == null) {_                        _                        _                        logger.debug("no master node is set, despite of join request completing. retrying pings.")__                        joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                    } else if (currentMasterNode.equals(masterNode) == false) {_                        _                        joinThreadControl.stopRunningThreadAndRejoin("master_switched_while_finalizing_join")__                    }__                    joinThreadControl.markThreadAsDone(currentThread)__                } else {_                    _                    joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                }_            }_        }_    };the,main,function,of,a,join,thread,this,function,is,guaranteed,to,join,the,cluster,or,spawn,a,new,join,thread,upon,failure,to,do,so;private,void,inner,join,cluster,discovery,node,master,node,null,final,thread,current,thread,thread,current,thread,node,join,controller,start,election,context,while,master,node,null,join,thread,control,join,thread,active,current,thread,master,node,find,master,if,join,thread,control,join,thread,active,current,thread,logger,trace,thread,is,no,longer,in,current,join,thread,stopping,return,if,transport,service,get,local,node,equals,master,node,final,int,required,joins,math,max,0,elect,master,minimum,master,nodes,1,logger,debug,elected,as,master,waiting,for,incoming,joins,needed,required,joins,node,join,controller,wait,to,be,elected,as,master,required,joins,master,election,wait,for,joins,timeout,new,node,join,controller,election,callback,override,public,void,on,elected,as,master,cluster,state,state,synchronized,state,mutex,join,thread,control,mark,thread,as,done,current,thread,override,public,void,on,failure,throwable,t,logger,trace,failed,while,waiting,for,nodes,to,join,rejoining,t,synchronized,state,mutex,join,thread,control,mark,thread,as,done,and,start,new,current,thread,else,node,join,controller,stop,election,context,master,node,elected,final,boolean,success,join,elected,master,master,node,synchronized,state,mutex,if,success,discovery,node,current,master,node,this,cluster,state,get,nodes,get,master,node,if,current,master,node,null,logger,debug,no,master,node,is,set,despite,of,join,request,completing,retrying,pings,join,thread,control,mark,thread,as,done,and,start,new,current,thread,else,if,current,master,node,equals,master,node,false,join,thread,control,stop,running,thread,and,rejoin,join,thread,control,mark,thread,as,done,current,thread,else,join,thread,control,mark,thread,as,done,and,start,new,current,thread
ZenDiscovery -> private void innerJoinCluster();1549452878;the main function of a join thread. This function is guaranteed to join the cluster_or spawn a new join thread upon failure to do so.;private void innerJoinCluster() {_        DiscoveryNode masterNode = null__        final Thread currentThread = Thread.currentThread()__        nodeJoinController.startElectionContext()__        while (masterNode == null && joinThreadControl.joinThreadActive(currentThread)) {_            masterNode = findMaster()__        }__        if (!joinThreadControl.joinThreadActive(currentThread)) {_            logger.trace("thread is no longer in currentJoinThread. Stopping.")__            return__        }__        if (transportService.getLocalNode().equals(masterNode)) {_            final int requiredJoins = Math.max(0, electMaster.minimumMasterNodes() - 1)_ _            logger.debug("elected as master, waiting for incoming joins ([{}] needed)", requiredJoins)__            nodeJoinController.waitToBeElectedAsMaster(requiredJoins, masterElectionWaitForJoinsTimeout,_                    new NodeJoinController.ElectionCallback() {_                        @Override_                        public void onElectedAsMaster(ClusterState state) {_                            synchronized (stateMutex) {_                                joinThreadControl.markThreadAsDone(currentThread)__                            }_                        }__                        @Override_                        public void onFailure(Throwable t) {_                            logger.trace("failed while waiting for nodes to join, rejoining", t)__                            synchronized (stateMutex) {_                                joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                            }_                        }_                    }__            )__        } else {_            _            nodeJoinController.stopElectionContext(masterNode + " elected")___            _            final boolean success = joinElectedMaster(masterNode)___            synchronized (stateMutex) {_                if (success) {_                    DiscoveryNode currentMasterNode = this.clusterState().getNodes().getMasterNode()__                    if (currentMasterNode == null) {_                        _                        _                        logger.debug("no master node is set, despite of join request completing. retrying pings.")__                        joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                    } else if (currentMasterNode.equals(masterNode) == false) {_                        _                        joinThreadControl.stopRunningThreadAndRejoin("master_switched_while_finalizing_join")__                    }__                    joinThreadControl.markThreadAsDone(currentThread)__                } else {_                    _                    joinThreadControl.markThreadAsDoneAndStartNew(currentThread)__                }_            }_        }_    };the,main,function,of,a,join,thread,this,function,is,guaranteed,to,join,the,cluster,or,spawn,a,new,join,thread,upon,failure,to,do,so;private,void,inner,join,cluster,discovery,node,master,node,null,final,thread,current,thread,thread,current,thread,node,join,controller,start,election,context,while,master,node,null,join,thread,control,join,thread,active,current,thread,master,node,find,master,if,join,thread,control,join,thread,active,current,thread,logger,trace,thread,is,no,longer,in,current,join,thread,stopping,return,if,transport,service,get,local,node,equals,master,node,final,int,required,joins,math,max,0,elect,master,minimum,master,nodes,1,logger,debug,elected,as,master,waiting,for,incoming,joins,needed,required,joins,node,join,controller,wait,to,be,elected,as,master,required,joins,master,election,wait,for,joins,timeout,new,node,join,controller,election,callback,override,public,void,on,elected,as,master,cluster,state,state,synchronized,state,mutex,join,thread,control,mark,thread,as,done,current,thread,override,public,void,on,failure,throwable,t,logger,trace,failed,while,waiting,for,nodes,to,join,rejoining,t,synchronized,state,mutex,join,thread,control,mark,thread,as,done,and,start,new,current,thread,else,node,join,controller,stop,election,context,master,node,elected,final,boolean,success,join,elected,master,master,node,synchronized,state,mutex,if,success,discovery,node,current,master,node,this,cluster,state,get,nodes,get,master,node,if,current,master,node,null,logger,debug,no,master,node,is,set,despite,of,join,request,completing,retrying,pings,join,thread,control,mark,thread,as,done,and,start,new,current,thread,else,if,current,master,node,equals,master,node,false,join,thread,control,stop,running,thread,and,rejoin,join,thread,control,mark,thread,as,done,current,thread,else,join,thread,control,mark,thread,as,done,and,start,new,current,thread
ZenDiscovery -> public static void validateStateIsFromCurrentMaster(Logger logger, DiscoveryNodes currentNodes, ClusterState newClusterState);1524684173;In the case we follow an elected master the new cluster state needs to have the same elected master_This method checks for this and throws an exception if needed;public static void validateStateIsFromCurrentMaster(Logger logger, DiscoveryNodes currentNodes, ClusterState newClusterState) {_        if (currentNodes.getMasterNodeId() == null) {_            return__        }_        if (!currentNodes.getMasterNodeId().equals(newClusterState.nodes().getMasterNodeId())) {_            logger.warn("received a cluster state from a different master than the current one, rejecting (received {}, current {})", newClusterState.nodes().getMasterNode(), currentNodes.getMasterNode())__            throw new IllegalStateException("cluster state from a different master than the current one, rejecting (received " + newClusterState.nodes().getMasterNode() + ", current " + currentNodes.getMasterNode() + ")")__        }_    };in,the,case,we,follow,an,elected,master,the,new,cluster,state,needs,to,have,the,same,elected,master,this,method,checks,for,this,and,throws,an,exception,if,needed;public,static,void,validate,state,is,from,current,master,logger,logger,discovery,nodes,current,nodes,cluster,state,new,cluster,state,if,current,nodes,get,master,node,id,null,return,if,current,nodes,get,master,node,id,equals,new,cluster,state,nodes,get,master,node,id,logger,warn,received,a,cluster,state,from,a,different,master,than,the,current,one,rejecting,received,current,new,cluster,state,nodes,get,master,node,current,nodes,get,master,node,throw,new,illegal,state,exception,cluster,state,from,a,different,master,than,the,current,one,rejecting,received,new,cluster,state,nodes,get,master,node,current,current,nodes,get,master,node
ZenDiscovery -> public static void validateStateIsFromCurrentMaster(Logger logger, DiscoveryNodes currentNodes, ClusterState newClusterState);1525798022;In the case we follow an elected master the new cluster state needs to have the same elected master_This method checks for this and throws an exception if needed;public static void validateStateIsFromCurrentMaster(Logger logger, DiscoveryNodes currentNodes, ClusterState newClusterState) {_        if (currentNodes.getMasterNodeId() == null) {_            return__        }_        if (!currentNodes.getMasterNodeId().equals(newClusterState.nodes().getMasterNodeId())) {_            logger.warn("received a cluster state from a different master than the current one, rejecting (received {}, current {})", newClusterState.nodes().getMasterNode(), currentNodes.getMasterNode())__            throw new IllegalStateException("cluster state from a different master than the current one, rejecting (received " + newClusterState.nodes().getMasterNode() + ", current " + currentNodes.getMasterNode() + ")")__        }_    };in,the,case,we,follow,an,elected,master,the,new,cluster,state,needs,to,have,the,same,elected,master,this,method,checks,for,this,and,throws,an,exception,if,needed;public,static,void,validate,state,is,from,current,master,logger,logger,discovery,nodes,current,nodes,cluster,state,new,cluster,state,if,current,nodes,get,master,node,id,null,return,if,current,nodes,get,master,node,id,equals,new,cluster,state,nodes,get,master,node,id,logger,warn,received,a,cluster,state,from,a,different,master,than,the,current,one,rejecting,received,current,new,cluster,state,nodes,get,master,node,current,nodes,get,master,node,throw,new,illegal,state,exception,cluster,state,from,a,different,master,than,the,current,one,rejecting,received,new,cluster,state,nodes,get,master,node,current,current,nodes,get,master,node
ZenDiscovery -> public static void validateStateIsFromCurrentMaster(Logger logger, DiscoveryNodes currentNodes, ClusterState newClusterState);1527096592;In the case we follow an elected master the new cluster state needs to have the same elected master_This method checks for this and throws an exception if needed;public static void validateStateIsFromCurrentMaster(Logger logger, DiscoveryNodes currentNodes, ClusterState newClusterState) {_        if (currentNodes.getMasterNodeId() == null) {_            return__        }_        if (!currentNodes.getMasterNodeId().equals(newClusterState.nodes().getMasterNodeId())) {_            logger.warn("received a cluster state from a different master than the current one, rejecting (received {}, current {})", newClusterState.nodes().getMasterNode(), currentNodes.getMasterNode())__            throw new IllegalStateException("cluster state from a different master than the current one, rejecting (received " + newClusterState.nodes().getMasterNode() + ", current " + currentNodes.getMasterNode() + ")")__        }_    };in,the,case,we,follow,an,elected,master,the,new,cluster,state,needs,to,have,the,same,elected,master,this,method,checks,for,this,and,throws,an,exception,if,needed;public,static,void,validate,state,is,from,current,master,logger,logger,discovery,nodes,current,nodes,cluster,state,new,cluster,state,if,current,nodes,get,master,node,id,null,return,if,current,nodes,get,master,node,id,equals,new,cluster,state,nodes,get,master,node,id,logger,warn,received,a,cluster,state,from,a,different,master,than,the,current,one,rejecting,received,current,new,cluster,state,nodes,get,master,node,current,nodes,get,master,node,throw,new,illegal,state,exception,cluster,state,from,a,different,master,than,the,current,one,rejecting,received,new,cluster,state,nodes,get,master,node,current,current,nodes,get,master,node
ZenDiscovery -> public static void validateStateIsFromCurrentMaster(Logger logger, DiscoveryNodes currentNodes, ClusterState newClusterState);1527152864;In the case we follow an elected master the new cluster state needs to have the same elected master_This method checks for this and throws an exception if needed;public static void validateStateIsFromCurrentMaster(Logger logger, DiscoveryNodes currentNodes, ClusterState newClusterState) {_        if (currentNodes.getMasterNodeId() == null) {_            return__        }_        if (!currentNodes.getMasterNodeId().equals(newClusterState.nodes().getMasterNodeId())) {_            logger.warn("received a cluster state from a different master than the current one, rejecting (received {}, current {})", newClusterState.nodes().getMasterNode(), currentNodes.getMasterNode())__            throw new IllegalStateException("cluster state from a different master than the current one, rejecting (received " + newClusterState.nodes().getMasterNode() + ", current " + currentNodes.getMasterNode() + ")")__        }_    };in,the,case,we,follow,an,elected,master,the,new,cluster,state,needs,to,have,the,same,elected,master,this,method,checks,for,this,and,throws,an,exception,if,needed;public,static,void,validate,state,is,from,current,master,logger,logger,discovery,nodes,current,nodes,cluster,state,new,cluster,state,if,current,nodes,get,master,node,id,null,return,if,current,nodes,get,master,node,id,equals,new,cluster,state,nodes,get,master,node,id,logger,warn,received,a,cluster,state,from,a,different,master,than,the,current,one,rejecting,received,current,new,cluster,state,nodes,get,master,node,current,nodes,get,master,node,throw,new,illegal,state,exception,cluster,state,from,a,different,master,than,the,current,one,rejecting,received,new,cluster,state,nodes,get,master,node,current,current,nodes,get,master,node
ZenDiscovery -> public static void validateStateIsFromCurrentMaster(Logger logger, DiscoveryNodes currentNodes, ClusterState newClusterState);1529687475;In the case we follow an elected master the new cluster state needs to have the same elected master_This method checks for this and throws an exception if needed;public static void validateStateIsFromCurrentMaster(Logger logger, DiscoveryNodes currentNodes, ClusterState newClusterState) {_        if (currentNodes.getMasterNodeId() == null) {_            return__        }_        if (!currentNodes.getMasterNodeId().equals(newClusterState.nodes().getMasterNodeId())) {_            logger.warn("received a cluster state from a different master than the current one, rejecting (received {}, current {})", newClusterState.nodes().getMasterNode(), currentNodes.getMasterNode())__            throw new IllegalStateException("cluster state from a different master than the current one, rejecting (received " + newClusterState.nodes().getMasterNode() + ", current " + currentNodes.getMasterNode() + ")")__        }_    };in,the,case,we,follow,an,elected,master,the,new,cluster,state,needs,to,have,the,same,elected,master,this,method,checks,for,this,and,throws,an,exception,if,needed;public,static,void,validate,state,is,from,current,master,logger,logger,discovery,nodes,current,nodes,cluster,state,new,cluster,state,if,current,nodes,get,master,node,id,null,return,if,current,nodes,get,master,node,id,equals,new,cluster,state,nodes,get,master,node,id,logger,warn,received,a,cluster,state,from,a,different,master,than,the,current,one,rejecting,received,current,new,cluster,state,nodes,get,master,node,current,nodes,get,master,node,throw,new,illegal,state,exception,cluster,state,from,a,different,master,than,the,current,one,rejecting,received,new,cluster,state,nodes,get,master,node,current,current,nodes,get,master,node
ZenDiscovery -> public static void validateStateIsFromCurrentMaster(Logger logger, DiscoveryNodes currentNodes, ClusterState newClusterState);1533230566;In the case we follow an elected master the new cluster state needs to have the same elected master_This method checks for this and throws an exception if needed;public static void validateStateIsFromCurrentMaster(Logger logger, DiscoveryNodes currentNodes, ClusterState newClusterState) {_        if (currentNodes.getMasterNodeId() == null) {_            return__        }_        if (!currentNodes.getMasterNodeId().equals(newClusterState.nodes().getMasterNodeId())) {_            logger.warn("received a cluster state from a different master than the current one, rejecting (received {}, current {})", newClusterState.nodes().getMasterNode(), currentNodes.getMasterNode())__            throw new IllegalStateException("cluster state from a different master than the current one, rejecting (received " + newClusterState.nodes().getMasterNode() + ", current " + currentNodes.getMasterNode() + ")")__        }_    };in,the,case,we,follow,an,elected,master,the,new,cluster,state,needs,to,have,the,same,elected,master,this,method,checks,for,this,and,throws,an,exception,if,needed;public,static,void,validate,state,is,from,current,master,logger,logger,discovery,nodes,current,nodes,cluster,state,new,cluster,state,if,current,nodes,get,master,node,id,null,return,if,current,nodes,get,master,node,id,equals,new,cluster,state,nodes,get,master,node,id,logger,warn,received,a,cluster,state,from,a,different,master,than,the,current,one,rejecting,received,current,new,cluster,state,nodes,get,master,node,current,nodes,get,master,node,throw,new,illegal,state,exception,cluster,state,from,a,different,master,than,the,current,one,rejecting,received,new,cluster,state,nodes,get,master,node,current,current,nodes,get,master,node
ZenDiscovery -> public static void validateStateIsFromCurrentMaster(Logger logger, DiscoveryNodes currentNodes, ClusterState newClusterState);1540847035;In the case we follow an elected master the new cluster state needs to have the same elected master_This method checks for this and throws an exception if needed;public static void validateStateIsFromCurrentMaster(Logger logger, DiscoveryNodes currentNodes, ClusterState newClusterState) {_        if (currentNodes.getMasterNodeId() == null) {_            return__        }_        if (!currentNodes.getMasterNodeId().equals(newClusterState.nodes().getMasterNodeId())) {_            logger.warn("received a cluster state from a different master than the current one, rejecting (received {}, current {})",_                newClusterState.nodes().getMasterNode(), currentNodes.getMasterNode())__            throw new IllegalStateException("cluster state from a different master than the current one, rejecting (received " +_                newClusterState.nodes().getMasterNode() + ", current " + currentNodes.getMasterNode() + ")")__        }_    };in,the,case,we,follow,an,elected,master,the,new,cluster,state,needs,to,have,the,same,elected,master,this,method,checks,for,this,and,throws,an,exception,if,needed;public,static,void,validate,state,is,from,current,master,logger,logger,discovery,nodes,current,nodes,cluster,state,new,cluster,state,if,current,nodes,get,master,node,id,null,return,if,current,nodes,get,master,node,id,equals,new,cluster,state,nodes,get,master,node,id,logger,warn,received,a,cluster,state,from,a,different,master,than,the,current,one,rejecting,received,current,new,cluster,state,nodes,get,master,node,current,nodes,get,master,node,throw,new,illegal,state,exception,cluster,state,from,a,different,master,than,the,current,one,rejecting,received,new,cluster,state,nodes,get,master,node,current,current,nodes,get,master,node
ZenDiscovery -> public static void validateStateIsFromCurrentMaster(Logger logger, DiscoveryNodes currentNodes, ClusterState newClusterState);1541008027;In the case we follow an elected master the new cluster state needs to have the same elected master_This method checks for this and throws an exception if needed;public static void validateStateIsFromCurrentMaster(Logger logger, DiscoveryNodes currentNodes, ClusterState newClusterState) {_        if (currentNodes.getMasterNodeId() == null) {_            return__        }_        if (!currentNodes.getMasterNodeId().equals(newClusterState.nodes().getMasterNodeId())) {_            logger.warn("received a cluster state from a different master than the current one, rejecting (received {}, current {})",_                newClusterState.nodes().getMasterNode(), currentNodes.getMasterNode())__            throw new IllegalStateException("cluster state from a different master than the current one, rejecting (received " +_                newClusterState.nodes().getMasterNode() + ", current " + currentNodes.getMasterNode() + ")")__        }_    };in,the,case,we,follow,an,elected,master,the,new,cluster,state,needs,to,have,the,same,elected,master,this,method,checks,for,this,and,throws,an,exception,if,needed;public,static,void,validate,state,is,from,current,master,logger,logger,discovery,nodes,current,nodes,cluster,state,new,cluster,state,if,current,nodes,get,master,node,id,null,return,if,current,nodes,get,master,node,id,equals,new,cluster,state,nodes,get,master,node,id,logger,warn,received,a,cluster,state,from,a,different,master,than,the,current,one,rejecting,received,current,new,cluster,state,nodes,get,master,node,current,nodes,get,master,node,throw,new,illegal,state,exception,cluster,state,from,a,different,master,than,the,current,one,rejecting,received,new,cluster,state,nodes,get,master,node,current,current,nodes,get,master,node
ZenDiscovery -> public static void validateStateIsFromCurrentMaster(Logger logger, DiscoveryNodes currentNodes, ClusterState newClusterState);1541092382;In the case we follow an elected master the new cluster state needs to have the same elected master_This method checks for this and throws an exception if needed;public static void validateStateIsFromCurrentMaster(Logger logger, DiscoveryNodes currentNodes, ClusterState newClusterState) {_        if (currentNodes.getMasterNodeId() == null) {_            return__        }_        if (!currentNodes.getMasterNodeId().equals(newClusterState.nodes().getMasterNodeId())) {_            logger.warn("received a cluster state from a different master than the current one, rejecting (received {}, current {})",_                newClusterState.nodes().getMasterNode(), currentNodes.getMasterNode())__            throw new IllegalStateException("cluster state from a different master than the current one, rejecting (received " +_                newClusterState.nodes().getMasterNode() + ", current " + currentNodes.getMasterNode() + ")")__        }_    };in,the,case,we,follow,an,elected,master,the,new,cluster,state,needs,to,have,the,same,elected,master,this,method,checks,for,this,and,throws,an,exception,if,needed;public,static,void,validate,state,is,from,current,master,logger,logger,discovery,nodes,current,nodes,cluster,state,new,cluster,state,if,current,nodes,get,master,node,id,null,return,if,current,nodes,get,master,node,id,equals,new,cluster,state,nodes,get,master,node,id,logger,warn,received,a,cluster,state,from,a,different,master,than,the,current,one,rejecting,received,current,new,cluster,state,nodes,get,master,node,current,nodes,get,master,node,throw,new,illegal,state,exception,cluster,state,from,a,different,master,than,the,current,one,rejecting,received,new,cluster,state,nodes,get,master,node,current,current,nodes,get,master,node
ZenDiscovery -> public static void validateStateIsFromCurrentMaster(Logger logger, DiscoveryNodes currentNodes, ClusterState newClusterState);1542646292;In the case we follow an elected master the new cluster state needs to have the same elected master_This method checks for this and throws an exception if needed;public static void validateStateIsFromCurrentMaster(Logger logger, DiscoveryNodes currentNodes, ClusterState newClusterState) {_        if (currentNodes.getMasterNodeId() == null) {_            return__        }_        if (!currentNodes.getMasterNodeId().equals(newClusterState.nodes().getMasterNodeId())) {_            logger.warn("received a cluster state from a different master than the current one, rejecting (received {}, current {})",_                newClusterState.nodes().getMasterNode(), currentNodes.getMasterNode())__            throw new IllegalStateException("cluster state from a different master than the current one, rejecting (received " +_                newClusterState.nodes().getMasterNode() + ", current " + currentNodes.getMasterNode() + ")")__        }_    };in,the,case,we,follow,an,elected,master,the,new,cluster,state,needs,to,have,the,same,elected,master,this,method,checks,for,this,and,throws,an,exception,if,needed;public,static,void,validate,state,is,from,current,master,logger,logger,discovery,nodes,current,nodes,cluster,state,new,cluster,state,if,current,nodes,get,master,node,id,null,return,if,current,nodes,get,master,node,id,equals,new,cluster,state,nodes,get,master,node,id,logger,warn,received,a,cluster,state,from,a,different,master,than,the,current,one,rejecting,received,current,new,cluster,state,nodes,get,master,node,current,nodes,get,master,node,throw,new,illegal,state,exception,cluster,state,from,a,different,master,than,the,current,one,rejecting,received,new,cluster,state,nodes,get,master,node,current,current,nodes,get,master,node
ZenDiscovery -> public static void validateStateIsFromCurrentMaster(Logger logger, DiscoveryNodes currentNodes, ClusterState newClusterState);1544081506;In the case we follow an elected master the new cluster state needs to have the same elected master_This method checks for this and throws an exception if needed;public static void validateStateIsFromCurrentMaster(Logger logger, DiscoveryNodes currentNodes, ClusterState newClusterState) {_        if (currentNodes.getMasterNodeId() == null) {_            return__        }_        if (!currentNodes.getMasterNodeId().equals(newClusterState.nodes().getMasterNodeId())) {_            logger.warn("received a cluster state from a different master than the current one, rejecting (received {}, current {})",_                newClusterState.nodes().getMasterNode(), currentNodes.getMasterNode())__            throw new IllegalStateException("cluster state from a different master than the current one, rejecting (received " +_                newClusterState.nodes().getMasterNode() + ", current " + currentNodes.getMasterNode() + ")")__        }_    };in,the,case,we,follow,an,elected,master,the,new,cluster,state,needs,to,have,the,same,elected,master,this,method,checks,for,this,and,throws,an,exception,if,needed;public,static,void,validate,state,is,from,current,master,logger,logger,discovery,nodes,current,nodes,cluster,state,new,cluster,state,if,current,nodes,get,master,node,id,null,return,if,current,nodes,get,master,node,id,equals,new,cluster,state,nodes,get,master,node,id,logger,warn,received,a,cluster,state,from,a,different,master,than,the,current,one,rejecting,received,current,new,cluster,state,nodes,get,master,node,current,nodes,get,master,node,throw,new,illegal,state,exception,cluster,state,from,a,different,master,than,the,current,one,rejecting,received,new,cluster,state,nodes,get,master,node,current,current,nodes,get,master,node
ZenDiscovery -> public static void validateStateIsFromCurrentMaster(Logger logger, DiscoveryNodes currentNodes, ClusterState newClusterState);1546850547;In the case we follow an elected master the new cluster state needs to have the same elected master_This method checks for this and throws an exception if needed;public static void validateStateIsFromCurrentMaster(Logger logger, DiscoveryNodes currentNodes, ClusterState newClusterState) {_        if (currentNodes.getMasterNodeId() == null) {_            return__        }_        if (!currentNodes.getMasterNodeId().equals(newClusterState.nodes().getMasterNodeId())) {_            logger.warn("received a cluster state from a different master than the current one, rejecting (received {}, current {})",_                newClusterState.nodes().getMasterNode(), currentNodes.getMasterNode())__            throw new IllegalStateException("cluster state from a different master than the current one, rejecting (received " +_                newClusterState.nodes().getMasterNode() + ", current " + currentNodes.getMasterNode() + ")")__        }_    };in,the,case,we,follow,an,elected,master,the,new,cluster,state,needs,to,have,the,same,elected,master,this,method,checks,for,this,and,throws,an,exception,if,needed;public,static,void,validate,state,is,from,current,master,logger,logger,discovery,nodes,current,nodes,cluster,state,new,cluster,state,if,current,nodes,get,master,node,id,null,return,if,current,nodes,get,master,node,id,equals,new,cluster,state,nodes,get,master,node,id,logger,warn,received,a,cluster,state,from,a,different,master,than,the,current,one,rejecting,received,current,new,cluster,state,nodes,get,master,node,current,nodes,get,master,node,throw,new,illegal,state,exception,cluster,state,from,a,different,master,than,the,current,one,rejecting,received,new,cluster,state,nodes,get,master,node,current,current,nodes,get,master,node
ZenDiscovery -> public static void validateStateIsFromCurrentMaster(Logger logger, DiscoveryNodes currentNodes, ClusterState newClusterState);1547121470;In the case we follow an elected master the new cluster state needs to have the same elected master_This method checks for this and throws an exception if needed;public static void validateStateIsFromCurrentMaster(Logger logger, DiscoveryNodes currentNodes, ClusterState newClusterState) {_        if (currentNodes.getMasterNodeId() == null) {_            return__        }_        if (!currentNodes.getMasterNodeId().equals(newClusterState.nodes().getMasterNodeId())) {_            logger.warn("received a cluster state from a different master than the current one, rejecting (received {}, current {})",_                newClusterState.nodes().getMasterNode(), currentNodes.getMasterNode())__            throw new IllegalStateException("cluster state from a different master than the current one, rejecting (received " +_                newClusterState.nodes().getMasterNode() + ", current " + currentNodes.getMasterNode() + ")")__        }_    };in,the,case,we,follow,an,elected,master,the,new,cluster,state,needs,to,have,the,same,elected,master,this,method,checks,for,this,and,throws,an,exception,if,needed;public,static,void,validate,state,is,from,current,master,logger,logger,discovery,nodes,current,nodes,cluster,state,new,cluster,state,if,current,nodes,get,master,node,id,null,return,if,current,nodes,get,master,node,id,equals,new,cluster,state,nodes,get,master,node,id,logger,warn,received,a,cluster,state,from,a,different,master,than,the,current,one,rejecting,received,current,new,cluster,state,nodes,get,master,node,current,nodes,get,master,node,throw,new,illegal,state,exception,cluster,state,from,a,different,master,than,the,current,one,rejecting,received,new,cluster,state,nodes,get,master,node,current,current,nodes,get,master,node
ZenDiscovery -> public static void validateStateIsFromCurrentMaster(Logger logger, DiscoveryNodes currentNodes, ClusterState newClusterState);1547625930;In the case we follow an elected master the new cluster state needs to have the same elected master_This method checks for this and throws an exception if needed;public static void validateStateIsFromCurrentMaster(Logger logger, DiscoveryNodes currentNodes, ClusterState newClusterState) {_        if (currentNodes.getMasterNodeId() == null) {_            return__        }_        if (!currentNodes.getMasterNodeId().equals(newClusterState.nodes().getMasterNodeId())) {_            logger.warn("received a cluster state from a different master than the current one, rejecting (received {}, current {})",_                newClusterState.nodes().getMasterNode(), currentNodes.getMasterNode())__            throw new IllegalStateException("cluster state from a different master than the current one, rejecting (received " +_                newClusterState.nodes().getMasterNode() + ", current " + currentNodes.getMasterNode() + ")")__        }_    };in,the,case,we,follow,an,elected,master,the,new,cluster,state,needs,to,have,the,same,elected,master,this,method,checks,for,this,and,throws,an,exception,if,needed;public,static,void,validate,state,is,from,current,master,logger,logger,discovery,nodes,current,nodes,cluster,state,new,cluster,state,if,current,nodes,get,master,node,id,null,return,if,current,nodes,get,master,node,id,equals,new,cluster,state,nodes,get,master,node,id,logger,warn,received,a,cluster,state,from,a,different,master,than,the,current,one,rejecting,received,current,new,cluster,state,nodes,get,master,node,current,nodes,get,master,node,throw,new,illegal,state,exception,cluster,state,from,a,different,master,than,the,current,one,rejecting,received,new,cluster,state,nodes,get,master,node,current,current,nodes,get,master,node
ZenDiscovery -> public static void validateStateIsFromCurrentMaster(Logger logger, DiscoveryNodes currentNodes, ClusterState newClusterState);1548320260;In the case we follow an elected master the new cluster state needs to have the same elected master_This method checks for this and throws an exception if needed;public static void validateStateIsFromCurrentMaster(Logger logger, DiscoveryNodes currentNodes, ClusterState newClusterState) {_        if (currentNodes.getMasterNodeId() == null) {_            return__        }_        if (!currentNodes.getMasterNodeId().equals(newClusterState.nodes().getMasterNodeId())) {_            logger.warn("received a cluster state from a different master than the current one, rejecting (received {}, current {})",_                newClusterState.nodes().getMasterNode(), currentNodes.getMasterNode())__            throw new IllegalStateException("cluster state from a different master than the current one, rejecting (received " +_                newClusterState.nodes().getMasterNode() + ", current " + currentNodes.getMasterNode() + ")")__        }_    };in,the,case,we,follow,an,elected,master,the,new,cluster,state,needs,to,have,the,same,elected,master,this,method,checks,for,this,and,throws,an,exception,if,needed;public,static,void,validate,state,is,from,current,master,logger,logger,discovery,nodes,current,nodes,cluster,state,new,cluster,state,if,current,nodes,get,master,node,id,null,return,if,current,nodes,get,master,node,id,equals,new,cluster,state,nodes,get,master,node,id,logger,warn,received,a,cluster,state,from,a,different,master,than,the,current,one,rejecting,received,current,new,cluster,state,nodes,get,master,node,current,nodes,get,master,node,throw,new,illegal,state,exception,cluster,state,from,a,different,master,than,the,current,one,rejecting,received,new,cluster,state,nodes,get,master,node,current,current,nodes,get,master,node
ZenDiscovery -> public static void validateStateIsFromCurrentMaster(Logger logger, DiscoveryNodes currentNodes, ClusterState newClusterState);1549270328;In the case we follow an elected master the new cluster state needs to have the same elected master_This method checks for this and throws an exception if needed;public static void validateStateIsFromCurrentMaster(Logger logger, DiscoveryNodes currentNodes, ClusterState newClusterState) {_        if (currentNodes.getMasterNodeId() == null) {_            return__        }_        if (!currentNodes.getMasterNodeId().equals(newClusterState.nodes().getMasterNodeId())) {_            logger.warn("received a cluster state from a different master than the current one, rejecting (received {}, current {})",_                newClusterState.nodes().getMasterNode(), currentNodes.getMasterNode())__            throw new IllegalStateException("cluster state from a different master than the current one, rejecting (received " +_                newClusterState.nodes().getMasterNode() + ", current " + currentNodes.getMasterNode() + ")")__        }_    };in,the,case,we,follow,an,elected,master,the,new,cluster,state,needs,to,have,the,same,elected,master,this,method,checks,for,this,and,throws,an,exception,if,needed;public,static,void,validate,state,is,from,current,master,logger,logger,discovery,nodes,current,nodes,cluster,state,new,cluster,state,if,current,nodes,get,master,node,id,null,return,if,current,nodes,get,master,node,id,equals,new,cluster,state,nodes,get,master,node,id,logger,warn,received,a,cluster,state,from,a,different,master,than,the,current,one,rejecting,received,current,new,cluster,state,nodes,get,master,node,current,nodes,get,master,node,throw,new,illegal,state,exception,cluster,state,from,a,different,master,than,the,current,one,rejecting,received,new,cluster,state,nodes,get,master,node,current,current,nodes,get,master,node
ZenDiscovery -> public static void validateStateIsFromCurrentMaster(Logger logger, DiscoveryNodes currentNodes, ClusterState newClusterState);1549356476;In the case we follow an elected master the new cluster state needs to have the same elected master_This method checks for this and throws an exception if needed;public static void validateStateIsFromCurrentMaster(Logger logger, DiscoveryNodes currentNodes, ClusterState newClusterState) {_        if (currentNodes.getMasterNodeId() == null) {_            return__        }_        if (!currentNodes.getMasterNodeId().equals(newClusterState.nodes().getMasterNodeId())) {_            logger.warn("received a cluster state from a different master than the current one, rejecting (received {}, current {})",_                newClusterState.nodes().getMasterNode(), currentNodes.getMasterNode())__            throw new IllegalStateException("cluster state from a different master than the current one, rejecting (received " +_                newClusterState.nodes().getMasterNode() + ", current " + currentNodes.getMasterNode() + ")")__        }_    };in,the,case,we,follow,an,elected,master,the,new,cluster,state,needs,to,have,the,same,elected,master,this,method,checks,for,this,and,throws,an,exception,if,needed;public,static,void,validate,state,is,from,current,master,logger,logger,discovery,nodes,current,nodes,cluster,state,new,cluster,state,if,current,nodes,get,master,node,id,null,return,if,current,nodes,get,master,node,id,equals,new,cluster,state,nodes,get,master,node,id,logger,warn,received,a,cluster,state,from,a,different,master,than,the,current,one,rejecting,received,current,new,cluster,state,nodes,get,master,node,current,nodes,get,master,node,throw,new,illegal,state,exception,cluster,state,from,a,different,master,than,the,current,one,rejecting,received,new,cluster,state,nodes,get,master,node,current,current,nodes,get,master,node
ZenDiscovery -> public static void validateStateIsFromCurrentMaster(Logger logger, DiscoveryNodes currentNodes, ClusterState newClusterState);1549452878;In the case we follow an elected master the new cluster state needs to have the same elected master_This method checks for this and throws an exception if needed;public static void validateStateIsFromCurrentMaster(Logger logger, DiscoveryNodes currentNodes, ClusterState newClusterState) {_        if (currentNodes.getMasterNodeId() == null) {_            return__        }_        if (!currentNodes.getMasterNodeId().equals(newClusterState.nodes().getMasterNodeId())) {_            logger.warn("received a cluster state from a different master than the current one, rejecting (received {}, current {})",_                newClusterState.nodes().getMasterNode(), currentNodes.getMasterNode())__            throw new IllegalStateException("cluster state from a different master than the current one, rejecting (received " +_                newClusterState.nodes().getMasterNode() + ", current " + currentNodes.getMasterNode() + ")")__        }_    };in,the,case,we,follow,an,elected,master,the,new,cluster,state,needs,to,have,the,same,elected,master,this,method,checks,for,this,and,throws,an,exception,if,needed;public,static,void,validate,state,is,from,current,master,logger,logger,discovery,nodes,current,nodes,cluster,state,new,cluster,state,if,current,nodes,get,master,node,id,null,return,if,current,nodes,get,master,node,id,equals,new,cluster,state,nodes,get,master,node,id,logger,warn,received,a,cluster,state,from,a,different,master,than,the,current,one,rejecting,received,current,new,cluster,state,nodes,get,master,node,current,nodes,get,master,node,throw,new,illegal,state,exception,cluster,state,from,a,different,master,than,the,current,one,rejecting,received,new,cluster,state,nodes,get,master,node,current,current,nodes,get,master,node
ZenDiscovery -> JoinThreadControl -> public boolean joinThreadActive();1524684173;returns true if join thread control is started and there is currently an active join thread;public boolean joinThreadActive() {_            Thread currentThread = currentJoinThread.get()__            return running.get() && currentThread != null && currentThread.isAlive()__        };returns,true,if,join,thread,control,is,started,and,there,is,currently,an,active,join,thread;public,boolean,join,thread,active,thread,current,thread,current,join,thread,get,return,running,get,current,thread,null,current,thread,is,alive
ZenDiscovery -> JoinThreadControl -> public boolean joinThreadActive();1525798022;returns true if join thread control is started and there is currently an active join thread;public boolean joinThreadActive() {_            Thread currentThread = currentJoinThread.get()__            return running.get() && currentThread != null && currentThread.isAlive()__        };returns,true,if,join,thread,control,is,started,and,there,is,currently,an,active,join,thread;public,boolean,join,thread,active,thread,current,thread,current,join,thread,get,return,running,get,current,thread,null,current,thread,is,alive
ZenDiscovery -> JoinThreadControl -> public boolean joinThreadActive();1527096592;returns true if join thread control is started and there is currently an active join thread;public boolean joinThreadActive() {_            Thread currentThread = currentJoinThread.get()__            return running.get() && currentThread != null && currentThread.isAlive()__        };returns,true,if,join,thread,control,is,started,and,there,is,currently,an,active,join,thread;public,boolean,join,thread,active,thread,current,thread,current,join,thread,get,return,running,get,current,thread,null,current,thread,is,alive
ZenDiscovery -> JoinThreadControl -> public boolean joinThreadActive();1527152864;returns true if join thread control is started and there is currently an active join thread;public boolean joinThreadActive() {_            Thread currentThread = currentJoinThread.get()__            return running.get() && currentThread != null && currentThread.isAlive()__        };returns,true,if,join,thread,control,is,started,and,there,is,currently,an,active,join,thread;public,boolean,join,thread,active,thread,current,thread,current,join,thread,get,return,running,get,current,thread,null,current,thread,is,alive
ZenDiscovery -> JoinThreadControl -> public boolean joinThreadActive();1529687475;returns true if join thread control is started and there is currently an active join thread;public boolean joinThreadActive() {_            Thread currentThread = currentJoinThread.get()__            return running.get() && currentThread != null && currentThread.isAlive()__        };returns,true,if,join,thread,control,is,started,and,there,is,currently,an,active,join,thread;public,boolean,join,thread,active,thread,current,thread,current,join,thread,get,return,running,get,current,thread,null,current,thread,is,alive
ZenDiscovery -> JoinThreadControl -> public boolean joinThreadActive();1533230566;returns true if join thread control is started and there is currently an active join thread;public boolean joinThreadActive() {_            Thread currentThread = currentJoinThread.get()__            return running.get() && currentThread != null && currentThread.isAlive()__        };returns,true,if,join,thread,control,is,started,and,there,is,currently,an,active,join,thread;public,boolean,join,thread,active,thread,current,thread,current,join,thread,get,return,running,get,current,thread,null,current,thread,is,alive
ZenDiscovery -> JoinThreadControl -> public boolean joinThreadActive();1540847035;returns true if join thread control is started and there is currently an active join thread;public boolean joinThreadActive() {_            Thread currentThread = currentJoinThread.get()__            return running.get() && currentThread != null && currentThread.isAlive()__        };returns,true,if,join,thread,control,is,started,and,there,is,currently,an,active,join,thread;public,boolean,join,thread,active,thread,current,thread,current,join,thread,get,return,running,get,current,thread,null,current,thread,is,alive
ZenDiscovery -> JoinThreadControl -> public boolean joinThreadActive();1541008027;returns true if join thread control is started and there is currently an active join thread;public boolean joinThreadActive() {_            Thread currentThread = currentJoinThread.get()__            return running.get() && currentThread != null && currentThread.isAlive()__        };returns,true,if,join,thread,control,is,started,and,there,is,currently,an,active,join,thread;public,boolean,join,thread,active,thread,current,thread,current,join,thread,get,return,running,get,current,thread,null,current,thread,is,alive
ZenDiscovery -> JoinThreadControl -> public boolean joinThreadActive();1541092382;returns true if join thread control is started and there is currently an active join thread;public boolean joinThreadActive() {_            Thread currentThread = currentJoinThread.get()__            return running.get() && currentThread != null && currentThread.isAlive()__        };returns,true,if,join,thread,control,is,started,and,there,is,currently,an,active,join,thread;public,boolean,join,thread,active,thread,current,thread,current,join,thread,get,return,running,get,current,thread,null,current,thread,is,alive
ZenDiscovery -> JoinThreadControl -> public boolean joinThreadActive();1542646292;returns true if join thread control is started and there is currently an active join thread;public boolean joinThreadActive() {_            Thread currentThread = currentJoinThread.get()__            return running.get() && currentThread != null && currentThread.isAlive()__        };returns,true,if,join,thread,control,is,started,and,there,is,currently,an,active,join,thread;public,boolean,join,thread,active,thread,current,thread,current,join,thread,get,return,running,get,current,thread,null,current,thread,is,alive
ZenDiscovery -> JoinThreadControl -> public boolean joinThreadActive();1544081506;returns true if join thread control is started and there is currently an active join thread;public boolean joinThreadActive() {_            Thread currentThread = currentJoinThread.get()__            return running.get() && currentThread != null && currentThread.isAlive()__        };returns,true,if,join,thread,control,is,started,and,there,is,currently,an,active,join,thread;public,boolean,join,thread,active,thread,current,thread,current,join,thread,get,return,running,get,current,thread,null,current,thread,is,alive
ZenDiscovery -> JoinThreadControl -> public boolean joinThreadActive();1546850547;returns true if join thread control is started and there is currently an active join thread;public boolean joinThreadActive() {_            Thread currentThread = currentJoinThread.get()__            return running.get() && currentThread != null && currentThread.isAlive()__        };returns,true,if,join,thread,control,is,started,and,there,is,currently,an,active,join,thread;public,boolean,join,thread,active,thread,current,thread,current,join,thread,get,return,running,get,current,thread,null,current,thread,is,alive
ZenDiscovery -> JoinThreadControl -> public boolean joinThreadActive();1547121470;returns true if join thread control is started and there is currently an active join thread;public boolean joinThreadActive() {_            Thread currentThread = currentJoinThread.get()__            return running.get() && currentThread != null && currentThread.isAlive()__        };returns,true,if,join,thread,control,is,started,and,there,is,currently,an,active,join,thread;public,boolean,join,thread,active,thread,current,thread,current,join,thread,get,return,running,get,current,thread,null,current,thread,is,alive
ZenDiscovery -> JoinThreadControl -> public boolean joinThreadActive();1547625930;returns true if join thread control is started and there is currently an active join thread;public boolean joinThreadActive() {_            Thread currentThread = currentJoinThread.get()__            return running.get() && currentThread != null && currentThread.isAlive()__        };returns,true,if,join,thread,control,is,started,and,there,is,currently,an,active,join,thread;public,boolean,join,thread,active,thread,current,thread,current,join,thread,get,return,running,get,current,thread,null,current,thread,is,alive
ZenDiscovery -> JoinThreadControl -> public boolean joinThreadActive();1548320260;returns true if join thread control is started and there is currently an active join thread;public boolean joinThreadActive() {_            Thread currentThread = currentJoinThread.get()__            return running.get() && currentThread != null && currentThread.isAlive()__        };returns,true,if,join,thread,control,is,started,and,there,is,currently,an,active,join,thread;public,boolean,join,thread,active,thread,current,thread,current,join,thread,get,return,running,get,current,thread,null,current,thread,is,alive
ZenDiscovery -> JoinThreadControl -> public boolean joinThreadActive();1549270328;returns true if join thread control is started and there is currently an active join thread;public boolean joinThreadActive() {_            Thread currentThread = currentJoinThread.get()__            return running.get() && currentThread != null && currentThread.isAlive()__        };returns,true,if,join,thread,control,is,started,and,there,is,currently,an,active,join,thread;public,boolean,join,thread,active,thread,current,thread,current,join,thread,get,return,running,get,current,thread,null,current,thread,is,alive
ZenDiscovery -> JoinThreadControl -> public boolean joinThreadActive();1549356476;returns true if join thread control is started and there is currently an active join thread;public boolean joinThreadActive() {_            Thread currentThread = currentJoinThread.get()__            return running.get() && currentThread != null && currentThread.isAlive()__        };returns,true,if,join,thread,control,is,started,and,there,is,currently,an,active,join,thread;public,boolean,join,thread,active,thread,current,thread,current,join,thread,get,return,running,get,current,thread,null,current,thread,is,alive
ZenDiscovery -> JoinThreadControl -> public boolean joinThreadActive();1549452878;returns true if join thread control is started and there is currently an active join thread;public boolean joinThreadActive() {_            Thread currentThread = currentJoinThread.get()__            return running.get() && currentThread != null && currentThread.isAlive()__        };returns,true,if,join,thread,control,is,started,and,there,is,currently,an,active,join,thread;public,boolean,join,thread,active,thread,current,thread,current,join,thread,get,return,running,get,current,thread,null,current,thread,is,alive
ZenDiscovery -> public boolean joiningCluster();1524684173;returns true if zen discovery is started and there is a currently a background thread active for (re)joining_the cluster used for testing.;public boolean joiningCluster() {_        return joinThreadControl.joinThreadActive()__    };returns,true,if,zen,discovery,is,started,and,there,is,a,currently,a,background,thread,active,for,re,joining,the,cluster,used,for,testing;public,boolean,joining,cluster,return,join,thread,control,join,thread,active
ZenDiscovery -> public boolean joiningCluster();1525798022;returns true if zen discovery is started and there is a currently a background thread active for (re)joining_the cluster used for testing.;public boolean joiningCluster() {_        return joinThreadControl.joinThreadActive()__    };returns,true,if,zen,discovery,is,started,and,there,is,a,currently,a,background,thread,active,for,re,joining,the,cluster,used,for,testing;public,boolean,joining,cluster,return,join,thread,control,join,thread,active
ZenDiscovery -> public boolean joiningCluster();1527096592;returns true if zen discovery is started and there is a currently a background thread active for (re)joining_the cluster used for testing.;public boolean joiningCluster() {_        return joinThreadControl.joinThreadActive()__    };returns,true,if,zen,discovery,is,started,and,there,is,a,currently,a,background,thread,active,for,re,joining,the,cluster,used,for,testing;public,boolean,joining,cluster,return,join,thread,control,join,thread,active
ZenDiscovery -> public boolean joiningCluster();1527152864;returns true if zen discovery is started and there is a currently a background thread active for (re)joining_the cluster used for testing.;public boolean joiningCluster() {_        return joinThreadControl.joinThreadActive()__    };returns,true,if,zen,discovery,is,started,and,there,is,a,currently,a,background,thread,active,for,re,joining,the,cluster,used,for,testing;public,boolean,joining,cluster,return,join,thread,control,join,thread,active
ZenDiscovery -> public boolean joiningCluster();1529687475;returns true if zen discovery is started and there is a currently a background thread active for (re)joining_the cluster used for testing.;public boolean joiningCluster() {_        return joinThreadControl.joinThreadActive()__    };returns,true,if,zen,discovery,is,started,and,there,is,a,currently,a,background,thread,active,for,re,joining,the,cluster,used,for,testing;public,boolean,joining,cluster,return,join,thread,control,join,thread,active
ZenDiscovery -> public boolean joiningCluster();1533230566;returns true if zen discovery is started and there is a currently a background thread active for (re)joining_the cluster used for testing.;public boolean joiningCluster() {_        return joinThreadControl.joinThreadActive()__    };returns,true,if,zen,discovery,is,started,and,there,is,a,currently,a,background,thread,active,for,re,joining,the,cluster,used,for,testing;public,boolean,joining,cluster,return,join,thread,control,join,thread,active
ZenDiscovery -> public boolean joiningCluster();1540847035;returns true if zen discovery is started and there is a currently a background thread active for (re)joining_the cluster used for testing.;public boolean joiningCluster() {_        return joinThreadControl.joinThreadActive()__    };returns,true,if,zen,discovery,is,started,and,there,is,a,currently,a,background,thread,active,for,re,joining,the,cluster,used,for,testing;public,boolean,joining,cluster,return,join,thread,control,join,thread,active
ZenDiscovery -> public boolean joiningCluster();1541008027;returns true if zen discovery is started and there is a currently a background thread active for (re)joining_the cluster used for testing.;public boolean joiningCluster() {_        return joinThreadControl.joinThreadActive()__    };returns,true,if,zen,discovery,is,started,and,there,is,a,currently,a,background,thread,active,for,re,joining,the,cluster,used,for,testing;public,boolean,joining,cluster,return,join,thread,control,join,thread,active
ZenDiscovery -> public boolean joiningCluster();1541092382;returns true if zen discovery is started and there is a currently a background thread active for (re)joining_the cluster used for testing.;public boolean joiningCluster() {_        return joinThreadControl.joinThreadActive()__    };returns,true,if,zen,discovery,is,started,and,there,is,a,currently,a,background,thread,active,for,re,joining,the,cluster,used,for,testing;public,boolean,joining,cluster,return,join,thread,control,join,thread,active
ZenDiscovery -> public boolean joiningCluster();1542646292;returns true if zen discovery is started and there is a currently a background thread active for (re)joining_the cluster used for testing.;public boolean joiningCluster() {_        return joinThreadControl.joinThreadActive()__    };returns,true,if,zen,discovery,is,started,and,there,is,a,currently,a,background,thread,active,for,re,joining,the,cluster,used,for,testing;public,boolean,joining,cluster,return,join,thread,control,join,thread,active
ZenDiscovery -> public boolean joiningCluster();1544081506;returns true if zen discovery is started and there is a currently a background thread active for (re)joining_the cluster used for testing.;public boolean joiningCluster() {_        return joinThreadControl.joinThreadActive()__    };returns,true,if,zen,discovery,is,started,and,there,is,a,currently,a,background,thread,active,for,re,joining,the,cluster,used,for,testing;public,boolean,joining,cluster,return,join,thread,control,join,thread,active
ZenDiscovery -> public boolean joiningCluster();1546850547;returns true if zen discovery is started and there is a currently a background thread active for (re)joining_the cluster used for testing.;public boolean joiningCluster() {_        return joinThreadControl.joinThreadActive()__    };returns,true,if,zen,discovery,is,started,and,there,is,a,currently,a,background,thread,active,for,re,joining,the,cluster,used,for,testing;public,boolean,joining,cluster,return,join,thread,control,join,thread,active
ZenDiscovery -> public boolean joiningCluster();1547121470;returns true if zen discovery is started and there is a currently a background thread active for (re)joining_the cluster used for testing.;public boolean joiningCluster() {_        return joinThreadControl.joinThreadActive()__    };returns,true,if,zen,discovery,is,started,and,there,is,a,currently,a,background,thread,active,for,re,joining,the,cluster,used,for,testing;public,boolean,joining,cluster,return,join,thread,control,join,thread,active
ZenDiscovery -> public boolean joiningCluster();1547625930;returns true if zen discovery is started and there is a currently a background thread active for (re)joining_the cluster used for testing.;public boolean joiningCluster() {_        return joinThreadControl.joinThreadActive()__    };returns,true,if,zen,discovery,is,started,and,there,is,a,currently,a,background,thread,active,for,re,joining,the,cluster,used,for,testing;public,boolean,joining,cluster,return,join,thread,control,join,thread,active
ZenDiscovery -> public boolean joiningCluster();1548320260;returns true if zen discovery is started and there is a currently a background thread active for (re)joining_the cluster used for testing.;public boolean joiningCluster() {_        return joinThreadControl.joinThreadActive()__    };returns,true,if,zen,discovery,is,started,and,there,is,a,currently,a,background,thread,active,for,re,joining,the,cluster,used,for,testing;public,boolean,joining,cluster,return,join,thread,control,join,thread,active
ZenDiscovery -> public boolean joiningCluster();1549270328;returns true if zen discovery is started and there is a currently a background thread active for (re)joining_the cluster used for testing.;public boolean joiningCluster() {_        return joinThreadControl.joinThreadActive()__    };returns,true,if,zen,discovery,is,started,and,there,is,a,currently,a,background,thread,active,for,re,joining,the,cluster,used,for,testing;public,boolean,joining,cluster,return,join,thread,control,join,thread,active
ZenDiscovery -> public boolean joiningCluster();1549356476;returns true if zen discovery is started and there is a currently a background thread active for (re)joining_the cluster used for testing.;public boolean joiningCluster() {_        return joinThreadControl.joinThreadActive()__    };returns,true,if,zen,discovery,is,started,and,there,is,a,currently,a,background,thread,active,for,re,joining,the,cluster,used,for,testing;public,boolean,joining,cluster,return,join,thread,control,join,thread,active
ZenDiscovery -> public boolean joiningCluster();1549452878;returns true if zen discovery is started and there is a currently a background thread active for (re)joining_the cluster used for testing.;public boolean joiningCluster() {_        return joinThreadControl.joinThreadActive()__    };returns,true,if,zen,discovery,is,started,and,there,is,a,currently,a,background,thread,active,for,re,joining,the,cluster,used,for,testing;public,boolean,joining,cluster,return,join,thread,control,join,thread,active
ZenDiscovery -> static void validateIncomingState(Logger logger, ClusterState incomingState, ClusterState lastState);1524684173;does simple sanity check of the incoming cluster state. Throws an exception on rejections.;static void validateIncomingState(Logger logger, ClusterState incomingState, ClusterState lastState) {_        final ClusterName incomingClusterName = incomingState.getClusterName()__        if (!incomingClusterName.equals(lastState.getClusterName())) {_            logger.warn("received cluster state from [{}] which is also master but with a different cluster name [{}]",_                incomingState.nodes().getMasterNode(), incomingClusterName)__            throw new IllegalStateException("received state from a node that is not part of the cluster")__        }_        if (lastState.nodes().getLocalNode().equals(incomingState.nodes().getLocalNode()) == false) {_            logger.warn("received a cluster state from [{}] and not part of the cluster, should not happen",_                incomingState.nodes().getMasterNode())__            throw new IllegalStateException("received state with a local node that does not match the current local node")__        }__        if (shouldIgnoreOrRejectNewClusterState(logger, lastState, incomingState)) {_            String message = String.format(_                Locale.ROOT,_                "rejecting cluster state version [%d] uuid [%s] received from [%s]",_                incomingState.version(),_                incomingState.stateUUID(),_                incomingState.nodes().getMasterNodeId()_            )__            logger.warn(message)__            throw new IllegalStateException(message)__        }__    };does,simple,sanity,check,of,the,incoming,cluster,state,throws,an,exception,on,rejections;static,void,validate,incoming,state,logger,logger,cluster,state,incoming,state,cluster,state,last,state,final,cluster,name,incoming,cluster,name,incoming,state,get,cluster,name,if,incoming,cluster,name,equals,last,state,get,cluster,name,logger,warn,received,cluster,state,from,which,is,also,master,but,with,a,different,cluster,name,incoming,state,nodes,get,master,node,incoming,cluster,name,throw,new,illegal,state,exception,received,state,from,a,node,that,is,not,part,of,the,cluster,if,last,state,nodes,get,local,node,equals,incoming,state,nodes,get,local,node,false,logger,warn,received,a,cluster,state,from,and,not,part,of,the,cluster,should,not,happen,incoming,state,nodes,get,master,node,throw,new,illegal,state,exception,received,state,with,a,local,node,that,does,not,match,the,current,local,node,if,should,ignore,or,reject,new,cluster,state,logger,last,state,incoming,state,string,message,string,format,locale,root,rejecting,cluster,state,version,d,uuid,s,received,from,s,incoming,state,version,incoming,state,state,uuid,incoming,state,nodes,get,master,node,id,logger,warn,message,throw,new,illegal,state,exception,message
ZenDiscovery -> static void validateIncomingState(Logger logger, ClusterState incomingState, ClusterState lastState);1525798022;does simple sanity check of the incoming cluster state. Throws an exception on rejections.;static void validateIncomingState(Logger logger, ClusterState incomingState, ClusterState lastState) {_        final ClusterName incomingClusterName = incomingState.getClusterName()__        if (!incomingClusterName.equals(lastState.getClusterName())) {_            logger.warn("received cluster state from [{}] which is also master but with a different cluster name [{}]",_                incomingState.nodes().getMasterNode(), incomingClusterName)__            throw new IllegalStateException("received state from a node that is not part of the cluster")__        }_        if (lastState.nodes().getLocalNode().equals(incomingState.nodes().getLocalNode()) == false) {_            logger.warn("received a cluster state from [{}] and not part of the cluster, should not happen",_                incomingState.nodes().getMasterNode())__            throw new IllegalStateException("received state with a local node that does not match the current local node")__        }__        if (shouldIgnoreOrRejectNewClusterState(logger, lastState, incomingState)) {_            String message = String.format(_                Locale.ROOT,_                "rejecting cluster state version [%d] uuid [%s] received from [%s]",_                incomingState.version(),_                incomingState.stateUUID(),_                incomingState.nodes().getMasterNodeId()_            )__            logger.warn(message)__            throw new IllegalStateException(message)__        }__    };does,simple,sanity,check,of,the,incoming,cluster,state,throws,an,exception,on,rejections;static,void,validate,incoming,state,logger,logger,cluster,state,incoming,state,cluster,state,last,state,final,cluster,name,incoming,cluster,name,incoming,state,get,cluster,name,if,incoming,cluster,name,equals,last,state,get,cluster,name,logger,warn,received,cluster,state,from,which,is,also,master,but,with,a,different,cluster,name,incoming,state,nodes,get,master,node,incoming,cluster,name,throw,new,illegal,state,exception,received,state,from,a,node,that,is,not,part,of,the,cluster,if,last,state,nodes,get,local,node,equals,incoming,state,nodes,get,local,node,false,logger,warn,received,a,cluster,state,from,and,not,part,of,the,cluster,should,not,happen,incoming,state,nodes,get,master,node,throw,new,illegal,state,exception,received,state,with,a,local,node,that,does,not,match,the,current,local,node,if,should,ignore,or,reject,new,cluster,state,logger,last,state,incoming,state,string,message,string,format,locale,root,rejecting,cluster,state,version,d,uuid,s,received,from,s,incoming,state,version,incoming,state,state,uuid,incoming,state,nodes,get,master,node,id,logger,warn,message,throw,new,illegal,state,exception,message
ZenDiscovery -> static void validateIncomingState(Logger logger, ClusterState incomingState, ClusterState lastState);1527096592;does simple sanity check of the incoming cluster state. Throws an exception on rejections.;static void validateIncomingState(Logger logger, ClusterState incomingState, ClusterState lastState) {_        final ClusterName incomingClusterName = incomingState.getClusterName()__        if (!incomingClusterName.equals(lastState.getClusterName())) {_            logger.warn("received cluster state from [{}] which is also master but with a different cluster name [{}]",_                incomingState.nodes().getMasterNode(), incomingClusterName)__            throw new IllegalStateException("received state from a node that is not part of the cluster")__        }_        if (lastState.nodes().getLocalNode().equals(incomingState.nodes().getLocalNode()) == false) {_            logger.warn("received a cluster state from [{}] and not part of the cluster, should not happen",_                incomingState.nodes().getMasterNode())__            throw new IllegalStateException("received state with a local node that does not match the current local node")__        }__        if (shouldIgnoreOrRejectNewClusterState(logger, lastState, incomingState)) {_            String message = String.format(_                Locale.ROOT,_                "rejecting cluster state version [%d] uuid [%s] received from [%s]",_                incomingState.version(),_                incomingState.stateUUID(),_                incomingState.nodes().getMasterNodeId()_            )__            logger.warn(message)__            throw new IllegalStateException(message)__        }__    };does,simple,sanity,check,of,the,incoming,cluster,state,throws,an,exception,on,rejections;static,void,validate,incoming,state,logger,logger,cluster,state,incoming,state,cluster,state,last,state,final,cluster,name,incoming,cluster,name,incoming,state,get,cluster,name,if,incoming,cluster,name,equals,last,state,get,cluster,name,logger,warn,received,cluster,state,from,which,is,also,master,but,with,a,different,cluster,name,incoming,state,nodes,get,master,node,incoming,cluster,name,throw,new,illegal,state,exception,received,state,from,a,node,that,is,not,part,of,the,cluster,if,last,state,nodes,get,local,node,equals,incoming,state,nodes,get,local,node,false,logger,warn,received,a,cluster,state,from,and,not,part,of,the,cluster,should,not,happen,incoming,state,nodes,get,master,node,throw,new,illegal,state,exception,received,state,with,a,local,node,that,does,not,match,the,current,local,node,if,should,ignore,or,reject,new,cluster,state,logger,last,state,incoming,state,string,message,string,format,locale,root,rejecting,cluster,state,version,d,uuid,s,received,from,s,incoming,state,version,incoming,state,state,uuid,incoming,state,nodes,get,master,node,id,logger,warn,message,throw,new,illegal,state,exception,message
ZenDiscovery -> static void validateIncomingState(Logger logger, ClusterState incomingState, ClusterState lastState);1527152864;does simple sanity check of the incoming cluster state. Throws an exception on rejections.;static void validateIncomingState(Logger logger, ClusterState incomingState, ClusterState lastState) {_        final ClusterName incomingClusterName = incomingState.getClusterName()__        if (!incomingClusterName.equals(lastState.getClusterName())) {_            logger.warn("received cluster state from [{}] which is also master but with a different cluster name [{}]",_                incomingState.nodes().getMasterNode(), incomingClusterName)__            throw new IllegalStateException("received state from a node that is not part of the cluster")__        }_        if (lastState.nodes().getLocalNode().equals(incomingState.nodes().getLocalNode()) == false) {_            logger.warn("received a cluster state from [{}] and not part of the cluster, should not happen",_                incomingState.nodes().getMasterNode())__            throw new IllegalStateException("received state with a local node that does not match the current local node")__        }__        if (shouldIgnoreOrRejectNewClusterState(logger, lastState, incomingState)) {_            String message = String.format(_                Locale.ROOT,_                "rejecting cluster state version [%d] uuid [%s] received from [%s]",_                incomingState.version(),_                incomingState.stateUUID(),_                incomingState.nodes().getMasterNodeId()_            )__            logger.warn(message)__            throw new IllegalStateException(message)__        }__    };does,simple,sanity,check,of,the,incoming,cluster,state,throws,an,exception,on,rejections;static,void,validate,incoming,state,logger,logger,cluster,state,incoming,state,cluster,state,last,state,final,cluster,name,incoming,cluster,name,incoming,state,get,cluster,name,if,incoming,cluster,name,equals,last,state,get,cluster,name,logger,warn,received,cluster,state,from,which,is,also,master,but,with,a,different,cluster,name,incoming,state,nodes,get,master,node,incoming,cluster,name,throw,new,illegal,state,exception,received,state,from,a,node,that,is,not,part,of,the,cluster,if,last,state,nodes,get,local,node,equals,incoming,state,nodes,get,local,node,false,logger,warn,received,a,cluster,state,from,and,not,part,of,the,cluster,should,not,happen,incoming,state,nodes,get,master,node,throw,new,illegal,state,exception,received,state,with,a,local,node,that,does,not,match,the,current,local,node,if,should,ignore,or,reject,new,cluster,state,logger,last,state,incoming,state,string,message,string,format,locale,root,rejecting,cluster,state,version,d,uuid,s,received,from,s,incoming,state,version,incoming,state,state,uuid,incoming,state,nodes,get,master,node,id,logger,warn,message,throw,new,illegal,state,exception,message
ZenDiscovery -> static void validateIncomingState(Logger logger, ClusterState incomingState, ClusterState lastState);1529687475;does simple sanity check of the incoming cluster state. Throws an exception on rejections.;static void validateIncomingState(Logger logger, ClusterState incomingState, ClusterState lastState) {_        final ClusterName incomingClusterName = incomingState.getClusterName()__        if (!incomingClusterName.equals(lastState.getClusterName())) {_            logger.warn("received cluster state from [{}] which is also master but with a different cluster name [{}]",_                incomingState.nodes().getMasterNode(), incomingClusterName)__            throw new IllegalStateException("received state from a node that is not part of the cluster")__        }_        if (lastState.nodes().getLocalNode().equals(incomingState.nodes().getLocalNode()) == false) {_            logger.warn("received a cluster state from [{}] and not part of the cluster, should not happen",_                incomingState.nodes().getMasterNode())__            throw new IllegalStateException("received state with a local node that does not match the current local node")__        }__        if (shouldIgnoreOrRejectNewClusterState(logger, lastState, incomingState)) {_            String message = String.format(_                Locale.ROOT,_                "rejecting cluster state version [%d] uuid [%s] received from [%s]",_                incomingState.version(),_                incomingState.stateUUID(),_                incomingState.nodes().getMasterNodeId()_            )__            logger.warn(message)__            throw new IllegalStateException(message)__        }__    };does,simple,sanity,check,of,the,incoming,cluster,state,throws,an,exception,on,rejections;static,void,validate,incoming,state,logger,logger,cluster,state,incoming,state,cluster,state,last,state,final,cluster,name,incoming,cluster,name,incoming,state,get,cluster,name,if,incoming,cluster,name,equals,last,state,get,cluster,name,logger,warn,received,cluster,state,from,which,is,also,master,but,with,a,different,cluster,name,incoming,state,nodes,get,master,node,incoming,cluster,name,throw,new,illegal,state,exception,received,state,from,a,node,that,is,not,part,of,the,cluster,if,last,state,nodes,get,local,node,equals,incoming,state,nodes,get,local,node,false,logger,warn,received,a,cluster,state,from,and,not,part,of,the,cluster,should,not,happen,incoming,state,nodes,get,master,node,throw,new,illegal,state,exception,received,state,with,a,local,node,that,does,not,match,the,current,local,node,if,should,ignore,or,reject,new,cluster,state,logger,last,state,incoming,state,string,message,string,format,locale,root,rejecting,cluster,state,version,d,uuid,s,received,from,s,incoming,state,version,incoming,state,state,uuid,incoming,state,nodes,get,master,node,id,logger,warn,message,throw,new,illegal,state,exception,message
ZenDiscovery -> static void validateIncomingState(Logger logger, ClusterState incomingState, ClusterState lastState);1533230566;does simple sanity check of the incoming cluster state. Throws an exception on rejections.;static void validateIncomingState(Logger logger, ClusterState incomingState, ClusterState lastState) {_        final ClusterName incomingClusterName = incomingState.getClusterName()__        if (!incomingClusterName.equals(lastState.getClusterName())) {_            logger.warn("received cluster state from [{}] which is also master but with a different cluster name [{}]",_                incomingState.nodes().getMasterNode(), incomingClusterName)__            throw new IllegalStateException("received state from a node that is not part of the cluster")__        }_        if (lastState.nodes().getLocalNode().equals(incomingState.nodes().getLocalNode()) == false) {_            logger.warn("received a cluster state from [{}] and not part of the cluster, should not happen",_                incomingState.nodes().getMasterNode())__            throw new IllegalStateException("received state with a local node that does not match the current local node")__        }__        if (shouldIgnoreOrRejectNewClusterState(logger, lastState, incomingState)) {_            String message = String.format(_                Locale.ROOT,_                "rejecting cluster state version [%d] uuid [%s] received from [%s]",_                incomingState.version(),_                incomingState.stateUUID(),_                incomingState.nodes().getMasterNodeId()_            )__            logger.warn(message)__            throw new IllegalStateException(message)__        }__    };does,simple,sanity,check,of,the,incoming,cluster,state,throws,an,exception,on,rejections;static,void,validate,incoming,state,logger,logger,cluster,state,incoming,state,cluster,state,last,state,final,cluster,name,incoming,cluster,name,incoming,state,get,cluster,name,if,incoming,cluster,name,equals,last,state,get,cluster,name,logger,warn,received,cluster,state,from,which,is,also,master,but,with,a,different,cluster,name,incoming,state,nodes,get,master,node,incoming,cluster,name,throw,new,illegal,state,exception,received,state,from,a,node,that,is,not,part,of,the,cluster,if,last,state,nodes,get,local,node,equals,incoming,state,nodes,get,local,node,false,logger,warn,received,a,cluster,state,from,and,not,part,of,the,cluster,should,not,happen,incoming,state,nodes,get,master,node,throw,new,illegal,state,exception,received,state,with,a,local,node,that,does,not,match,the,current,local,node,if,should,ignore,or,reject,new,cluster,state,logger,last,state,incoming,state,string,message,string,format,locale,root,rejecting,cluster,state,version,d,uuid,s,received,from,s,incoming,state,version,incoming,state,state,uuid,incoming,state,nodes,get,master,node,id,logger,warn,message,throw,new,illegal,state,exception,message
ZenDiscovery -> static void validateIncomingState(Logger logger, ClusterState incomingState, ClusterState lastState);1540847035;does simple sanity check of the incoming cluster state. Throws an exception on rejections.;static void validateIncomingState(Logger logger, ClusterState incomingState, ClusterState lastState) {_        final ClusterName incomingClusterName = incomingState.getClusterName()__        if (!incomingClusterName.equals(lastState.getClusterName())) {_            logger.warn("received cluster state from [{}] which is also master but with a different cluster name [{}]",_                incomingState.nodes().getMasterNode(), incomingClusterName)__            throw new IllegalStateException("received state from a node that is not part of the cluster")__        }_        if (lastState.nodes().getLocalNode().equals(incomingState.nodes().getLocalNode()) == false) {_            logger.warn("received a cluster state from [{}] and not part of the cluster, should not happen",_                incomingState.nodes().getMasterNode())__            throw new IllegalStateException("received state with a local node that does not match the current local node")__        }__        if (shouldIgnoreOrRejectNewClusterState(logger, lastState, incomingState)) {_            String message = String.format(_                Locale.ROOT,_                "rejecting cluster state version [%d] uuid [%s] received from [%s]",_                incomingState.version(),_                incomingState.stateUUID(),_                incomingState.nodes().getMasterNodeId()_            )__            logger.warn(message)__            throw new IllegalStateException(message)__        }__    };does,simple,sanity,check,of,the,incoming,cluster,state,throws,an,exception,on,rejections;static,void,validate,incoming,state,logger,logger,cluster,state,incoming,state,cluster,state,last,state,final,cluster,name,incoming,cluster,name,incoming,state,get,cluster,name,if,incoming,cluster,name,equals,last,state,get,cluster,name,logger,warn,received,cluster,state,from,which,is,also,master,but,with,a,different,cluster,name,incoming,state,nodes,get,master,node,incoming,cluster,name,throw,new,illegal,state,exception,received,state,from,a,node,that,is,not,part,of,the,cluster,if,last,state,nodes,get,local,node,equals,incoming,state,nodes,get,local,node,false,logger,warn,received,a,cluster,state,from,and,not,part,of,the,cluster,should,not,happen,incoming,state,nodes,get,master,node,throw,new,illegal,state,exception,received,state,with,a,local,node,that,does,not,match,the,current,local,node,if,should,ignore,or,reject,new,cluster,state,logger,last,state,incoming,state,string,message,string,format,locale,root,rejecting,cluster,state,version,d,uuid,s,received,from,s,incoming,state,version,incoming,state,state,uuid,incoming,state,nodes,get,master,node,id,logger,warn,message,throw,new,illegal,state,exception,message
ZenDiscovery -> static void validateIncomingState(Logger logger, ClusterState incomingState, ClusterState lastState);1541008027;does simple sanity check of the incoming cluster state. Throws an exception on rejections.;static void validateIncomingState(Logger logger, ClusterState incomingState, ClusterState lastState) {_        final ClusterName incomingClusterName = incomingState.getClusterName()__        if (!incomingClusterName.equals(lastState.getClusterName())) {_            logger.warn("received cluster state from [{}] which is also master but with a different cluster name [{}]",_                incomingState.nodes().getMasterNode(), incomingClusterName)__            throw new IllegalStateException("received state from a node that is not part of the cluster")__        }_        if (lastState.nodes().getLocalNode().equals(incomingState.nodes().getLocalNode()) == false) {_            logger.warn("received a cluster state from [{}] and not part of the cluster, should not happen",_                incomingState.nodes().getMasterNode())__            throw new IllegalStateException("received state with a local node that does not match the current local node")__        }__        if (shouldIgnoreOrRejectNewClusterState(logger, lastState, incomingState)) {_            String message = String.format(_                Locale.ROOT,_                "rejecting cluster state version [%d] uuid [%s] received from [%s]",_                incomingState.version(),_                incomingState.stateUUID(),_                incomingState.nodes().getMasterNodeId()_            )__            logger.warn(message)__            throw new IllegalStateException(message)__        }__    };does,simple,sanity,check,of,the,incoming,cluster,state,throws,an,exception,on,rejections;static,void,validate,incoming,state,logger,logger,cluster,state,incoming,state,cluster,state,last,state,final,cluster,name,incoming,cluster,name,incoming,state,get,cluster,name,if,incoming,cluster,name,equals,last,state,get,cluster,name,logger,warn,received,cluster,state,from,which,is,also,master,but,with,a,different,cluster,name,incoming,state,nodes,get,master,node,incoming,cluster,name,throw,new,illegal,state,exception,received,state,from,a,node,that,is,not,part,of,the,cluster,if,last,state,nodes,get,local,node,equals,incoming,state,nodes,get,local,node,false,logger,warn,received,a,cluster,state,from,and,not,part,of,the,cluster,should,not,happen,incoming,state,nodes,get,master,node,throw,new,illegal,state,exception,received,state,with,a,local,node,that,does,not,match,the,current,local,node,if,should,ignore,or,reject,new,cluster,state,logger,last,state,incoming,state,string,message,string,format,locale,root,rejecting,cluster,state,version,d,uuid,s,received,from,s,incoming,state,version,incoming,state,state,uuid,incoming,state,nodes,get,master,node,id,logger,warn,message,throw,new,illegal,state,exception,message
ZenDiscovery -> static void validateIncomingState(Logger logger, ClusterState incomingState, ClusterState lastState);1541092382;does simple sanity check of the incoming cluster state. Throws an exception on rejections.;static void validateIncomingState(Logger logger, ClusterState incomingState, ClusterState lastState) {_        final ClusterName incomingClusterName = incomingState.getClusterName()__        if (!incomingClusterName.equals(lastState.getClusterName())) {_            logger.warn("received cluster state from [{}] which is also master but with a different cluster name [{}]",_                incomingState.nodes().getMasterNode(), incomingClusterName)__            throw new IllegalStateException("received state from a node that is not part of the cluster")__        }_        if (lastState.nodes().getLocalNode().equals(incomingState.nodes().getLocalNode()) == false) {_            logger.warn("received a cluster state from [{}] and not part of the cluster, should not happen",_                incomingState.nodes().getMasterNode())__            throw new IllegalStateException("received state with a local node that does not match the current local node")__        }__        if (shouldIgnoreOrRejectNewClusterState(logger, lastState, incomingState)) {_            String message = String.format(_                Locale.ROOT,_                "rejecting cluster state version [%d] uuid [%s] received from [%s]",_                incomingState.version(),_                incomingState.stateUUID(),_                incomingState.nodes().getMasterNodeId()_            )__            logger.warn(message)__            throw new IllegalStateException(message)__        }__    };does,simple,sanity,check,of,the,incoming,cluster,state,throws,an,exception,on,rejections;static,void,validate,incoming,state,logger,logger,cluster,state,incoming,state,cluster,state,last,state,final,cluster,name,incoming,cluster,name,incoming,state,get,cluster,name,if,incoming,cluster,name,equals,last,state,get,cluster,name,logger,warn,received,cluster,state,from,which,is,also,master,but,with,a,different,cluster,name,incoming,state,nodes,get,master,node,incoming,cluster,name,throw,new,illegal,state,exception,received,state,from,a,node,that,is,not,part,of,the,cluster,if,last,state,nodes,get,local,node,equals,incoming,state,nodes,get,local,node,false,logger,warn,received,a,cluster,state,from,and,not,part,of,the,cluster,should,not,happen,incoming,state,nodes,get,master,node,throw,new,illegal,state,exception,received,state,with,a,local,node,that,does,not,match,the,current,local,node,if,should,ignore,or,reject,new,cluster,state,logger,last,state,incoming,state,string,message,string,format,locale,root,rejecting,cluster,state,version,d,uuid,s,received,from,s,incoming,state,version,incoming,state,state,uuid,incoming,state,nodes,get,master,node,id,logger,warn,message,throw,new,illegal,state,exception,message
ZenDiscovery -> static void validateIncomingState(Logger logger, ClusterState incomingState, ClusterState lastState);1542646292;does simple sanity check of the incoming cluster state. Throws an exception on rejections.;static void validateIncomingState(Logger logger, ClusterState incomingState, ClusterState lastState) {_        final ClusterName incomingClusterName = incomingState.getClusterName()__        if (!incomingClusterName.equals(lastState.getClusterName())) {_            logger.warn("received cluster state from [{}] which is also master but with a different cluster name [{}]",_                incomingState.nodes().getMasterNode(), incomingClusterName)__            throw new IllegalStateException("received state from a node that is not part of the cluster")__        }_        if (lastState.nodes().getLocalNode().equals(incomingState.nodes().getLocalNode()) == false) {_            logger.warn("received a cluster state from [{}] and not part of the cluster, should not happen",_                incomingState.nodes().getMasterNode())__            throw new IllegalStateException("received state with a local node that does not match the current local node")__        }__        if (shouldIgnoreOrRejectNewClusterState(logger, lastState, incomingState)) {_            String message = String.format(_                Locale.ROOT,_                "rejecting cluster state version [%d] uuid [%s] received from [%s]",_                incomingState.version(),_                incomingState.stateUUID(),_                incomingState.nodes().getMasterNodeId()_            )__            logger.warn(message)__            throw new IllegalStateException(message)__        }__    };does,simple,sanity,check,of,the,incoming,cluster,state,throws,an,exception,on,rejections;static,void,validate,incoming,state,logger,logger,cluster,state,incoming,state,cluster,state,last,state,final,cluster,name,incoming,cluster,name,incoming,state,get,cluster,name,if,incoming,cluster,name,equals,last,state,get,cluster,name,logger,warn,received,cluster,state,from,which,is,also,master,but,with,a,different,cluster,name,incoming,state,nodes,get,master,node,incoming,cluster,name,throw,new,illegal,state,exception,received,state,from,a,node,that,is,not,part,of,the,cluster,if,last,state,nodes,get,local,node,equals,incoming,state,nodes,get,local,node,false,logger,warn,received,a,cluster,state,from,and,not,part,of,the,cluster,should,not,happen,incoming,state,nodes,get,master,node,throw,new,illegal,state,exception,received,state,with,a,local,node,that,does,not,match,the,current,local,node,if,should,ignore,or,reject,new,cluster,state,logger,last,state,incoming,state,string,message,string,format,locale,root,rejecting,cluster,state,version,d,uuid,s,received,from,s,incoming,state,version,incoming,state,state,uuid,incoming,state,nodes,get,master,node,id,logger,warn,message,throw,new,illegal,state,exception,message
ZenDiscovery -> static void validateIncomingState(Logger logger, ClusterState incomingState, ClusterState lastState);1544081506;does simple sanity check of the incoming cluster state. Throws an exception on rejections.;static void validateIncomingState(Logger logger, ClusterState incomingState, ClusterState lastState) {_        final ClusterName incomingClusterName = incomingState.getClusterName()__        if (!incomingClusterName.equals(lastState.getClusterName())) {_            logger.warn("received cluster state from [{}] which is also master but with a different cluster name [{}]",_                incomingState.nodes().getMasterNode(), incomingClusterName)__            throw new IllegalStateException("received state from a node that is not part of the cluster")__        }_        if (lastState.nodes().getLocalNode().equals(incomingState.nodes().getLocalNode()) == false) {_            logger.warn("received a cluster state from [{}] and not part of the cluster, should not happen",_                incomingState.nodes().getMasterNode())__            throw new IllegalStateException("received state with a local node that does not match the current local node")__        }__        if (shouldIgnoreOrRejectNewClusterState(logger, lastState, incomingState)) {_            String message = String.format(_                Locale.ROOT,_                "rejecting cluster state version [%d] uuid [%s] received from [%s]",_                incomingState.version(),_                incomingState.stateUUID(),_                incomingState.nodes().getMasterNodeId()_            )__            logger.warn(message)__            throw new IllegalStateException(message)__        }__    };does,simple,sanity,check,of,the,incoming,cluster,state,throws,an,exception,on,rejections;static,void,validate,incoming,state,logger,logger,cluster,state,incoming,state,cluster,state,last,state,final,cluster,name,incoming,cluster,name,incoming,state,get,cluster,name,if,incoming,cluster,name,equals,last,state,get,cluster,name,logger,warn,received,cluster,state,from,which,is,also,master,but,with,a,different,cluster,name,incoming,state,nodes,get,master,node,incoming,cluster,name,throw,new,illegal,state,exception,received,state,from,a,node,that,is,not,part,of,the,cluster,if,last,state,nodes,get,local,node,equals,incoming,state,nodes,get,local,node,false,logger,warn,received,a,cluster,state,from,and,not,part,of,the,cluster,should,not,happen,incoming,state,nodes,get,master,node,throw,new,illegal,state,exception,received,state,with,a,local,node,that,does,not,match,the,current,local,node,if,should,ignore,or,reject,new,cluster,state,logger,last,state,incoming,state,string,message,string,format,locale,root,rejecting,cluster,state,version,d,uuid,s,received,from,s,incoming,state,version,incoming,state,state,uuid,incoming,state,nodes,get,master,node,id,logger,warn,message,throw,new,illegal,state,exception,message
ZenDiscovery -> static void validateIncomingState(Logger logger, ClusterState incomingState, ClusterState lastState);1546850547;does simple sanity check of the incoming cluster state. Throws an exception on rejections.;static void validateIncomingState(Logger logger, ClusterState incomingState, ClusterState lastState) {_        final ClusterName incomingClusterName = incomingState.getClusterName()__        if (!incomingClusterName.equals(lastState.getClusterName())) {_            logger.warn("received cluster state from [{}] which is also master but with a different cluster name [{}]",_                incomingState.nodes().getMasterNode(), incomingClusterName)__            throw new IllegalStateException("received state from a node that is not part of the cluster")__        }_        if (lastState.nodes().getLocalNode().equals(incomingState.nodes().getLocalNode()) == false) {_            logger.warn("received a cluster state from [{}] and not part of the cluster, should not happen",_                incomingState.nodes().getMasterNode())__            throw new IllegalStateException("received state with a local node that does not match the current local node")__        }__        if (shouldIgnoreOrRejectNewClusterState(logger, lastState, incomingState)) {_            String message = String.format(_                Locale.ROOT,_                "rejecting cluster state version [%d] uuid [%s] received from [%s]",_                incomingState.version(),_                incomingState.stateUUID(),_                incomingState.nodes().getMasterNodeId()_            )__            logger.warn(message)__            throw new IllegalStateException(message)__        }__    };does,simple,sanity,check,of,the,incoming,cluster,state,throws,an,exception,on,rejections;static,void,validate,incoming,state,logger,logger,cluster,state,incoming,state,cluster,state,last,state,final,cluster,name,incoming,cluster,name,incoming,state,get,cluster,name,if,incoming,cluster,name,equals,last,state,get,cluster,name,logger,warn,received,cluster,state,from,which,is,also,master,but,with,a,different,cluster,name,incoming,state,nodes,get,master,node,incoming,cluster,name,throw,new,illegal,state,exception,received,state,from,a,node,that,is,not,part,of,the,cluster,if,last,state,nodes,get,local,node,equals,incoming,state,nodes,get,local,node,false,logger,warn,received,a,cluster,state,from,and,not,part,of,the,cluster,should,not,happen,incoming,state,nodes,get,master,node,throw,new,illegal,state,exception,received,state,with,a,local,node,that,does,not,match,the,current,local,node,if,should,ignore,or,reject,new,cluster,state,logger,last,state,incoming,state,string,message,string,format,locale,root,rejecting,cluster,state,version,d,uuid,s,received,from,s,incoming,state,version,incoming,state,state,uuid,incoming,state,nodes,get,master,node,id,logger,warn,message,throw,new,illegal,state,exception,message
ZenDiscovery -> static void validateIncomingState(Logger logger, ClusterState incomingState, ClusterState lastState);1547121470;does simple sanity check of the incoming cluster state. Throws an exception on rejections.;static void validateIncomingState(Logger logger, ClusterState incomingState, ClusterState lastState) {_        final ClusterName incomingClusterName = incomingState.getClusterName()__        if (!incomingClusterName.equals(lastState.getClusterName())) {_            logger.warn("received cluster state from [{}] which is also master but with a different cluster name [{}]",_                incomingState.nodes().getMasterNode(), incomingClusterName)__            throw new IllegalStateException("received state from a node that is not part of the cluster")__        }_        if (lastState.nodes().getLocalNode().equals(incomingState.nodes().getLocalNode()) == false) {_            logger.warn("received a cluster state from [{}] and not part of the cluster, should not happen",_                incomingState.nodes().getMasterNode())__            throw new IllegalStateException("received state with a local node that does not match the current local node")__        }__        if (shouldIgnoreOrRejectNewClusterState(logger, lastState, incomingState)) {_            String message = String.format(_                Locale.ROOT,_                "rejecting cluster state version [%d] uuid [%s] received from [%s]",_                incomingState.version(),_                incomingState.stateUUID(),_                incomingState.nodes().getMasterNodeId()_            )__            logger.warn(message)__            throw new IllegalStateException(message)__        }__    };does,simple,sanity,check,of,the,incoming,cluster,state,throws,an,exception,on,rejections;static,void,validate,incoming,state,logger,logger,cluster,state,incoming,state,cluster,state,last,state,final,cluster,name,incoming,cluster,name,incoming,state,get,cluster,name,if,incoming,cluster,name,equals,last,state,get,cluster,name,logger,warn,received,cluster,state,from,which,is,also,master,but,with,a,different,cluster,name,incoming,state,nodes,get,master,node,incoming,cluster,name,throw,new,illegal,state,exception,received,state,from,a,node,that,is,not,part,of,the,cluster,if,last,state,nodes,get,local,node,equals,incoming,state,nodes,get,local,node,false,logger,warn,received,a,cluster,state,from,and,not,part,of,the,cluster,should,not,happen,incoming,state,nodes,get,master,node,throw,new,illegal,state,exception,received,state,with,a,local,node,that,does,not,match,the,current,local,node,if,should,ignore,or,reject,new,cluster,state,logger,last,state,incoming,state,string,message,string,format,locale,root,rejecting,cluster,state,version,d,uuid,s,received,from,s,incoming,state,version,incoming,state,state,uuid,incoming,state,nodes,get,master,node,id,logger,warn,message,throw,new,illegal,state,exception,message
ZenDiscovery -> static void validateIncomingState(Logger logger, ClusterState incomingState, ClusterState lastState);1547625930;does simple sanity check of the incoming cluster state. Throws an exception on rejections.;static void validateIncomingState(Logger logger, ClusterState incomingState, ClusterState lastState) {_        final ClusterName incomingClusterName = incomingState.getClusterName()__        if (!incomingClusterName.equals(lastState.getClusterName())) {_            logger.warn("received cluster state from [{}] which is also master but with a different cluster name [{}]",_                incomingState.nodes().getMasterNode(), incomingClusterName)__            throw new IllegalStateException("received state from a node that is not part of the cluster")__        }_        if (lastState.nodes().getLocalNode().equals(incomingState.nodes().getLocalNode()) == false) {_            logger.warn("received a cluster state from [{}] and not part of the cluster, should not happen",_                incomingState.nodes().getMasterNode())__            throw new IllegalStateException("received state with a local node that does not match the current local node")__        }__        if (shouldIgnoreOrRejectNewClusterState(logger, lastState, incomingState)) {_            String message = String.format(_                Locale.ROOT,_                "rejecting cluster state version [%d] uuid [%s] received from [%s]",_                incomingState.version(),_                incomingState.stateUUID(),_                incomingState.nodes().getMasterNodeId()_            )__            logger.warn(message)__            throw new IllegalStateException(message)__        }__    };does,simple,sanity,check,of,the,incoming,cluster,state,throws,an,exception,on,rejections;static,void,validate,incoming,state,logger,logger,cluster,state,incoming,state,cluster,state,last,state,final,cluster,name,incoming,cluster,name,incoming,state,get,cluster,name,if,incoming,cluster,name,equals,last,state,get,cluster,name,logger,warn,received,cluster,state,from,which,is,also,master,but,with,a,different,cluster,name,incoming,state,nodes,get,master,node,incoming,cluster,name,throw,new,illegal,state,exception,received,state,from,a,node,that,is,not,part,of,the,cluster,if,last,state,nodes,get,local,node,equals,incoming,state,nodes,get,local,node,false,logger,warn,received,a,cluster,state,from,and,not,part,of,the,cluster,should,not,happen,incoming,state,nodes,get,master,node,throw,new,illegal,state,exception,received,state,with,a,local,node,that,does,not,match,the,current,local,node,if,should,ignore,or,reject,new,cluster,state,logger,last,state,incoming,state,string,message,string,format,locale,root,rejecting,cluster,state,version,d,uuid,s,received,from,s,incoming,state,version,incoming,state,state,uuid,incoming,state,nodes,get,master,node,id,logger,warn,message,throw,new,illegal,state,exception,message
ZenDiscovery -> static void validateIncomingState(Logger logger, ClusterState incomingState, ClusterState lastState);1548320260;does simple sanity check of the incoming cluster state. Throws an exception on rejections.;static void validateIncomingState(Logger logger, ClusterState incomingState, ClusterState lastState) {_        final ClusterName incomingClusterName = incomingState.getClusterName()__        if (!incomingClusterName.equals(lastState.getClusterName())) {_            logger.warn("received cluster state from [{}] which is also master but with a different cluster name [{}]",_                incomingState.nodes().getMasterNode(), incomingClusterName)__            throw new IllegalStateException("received state from a node that is not part of the cluster")__        }_        if (lastState.nodes().getLocalNode().equals(incomingState.nodes().getLocalNode()) == false) {_            logger.warn("received a cluster state from [{}] and not part of the cluster, should not happen",_                incomingState.nodes().getMasterNode())__            throw new IllegalStateException("received state with a local node that does not match the current local node")__        }__        if (shouldIgnoreOrRejectNewClusterState(logger, lastState, incomingState)) {_            String message = String.format(_                Locale.ROOT,_                "rejecting cluster state version [%d] uuid [%s] received from [%s]",_                incomingState.version(),_                incomingState.stateUUID(),_                incomingState.nodes().getMasterNodeId()_            )__            logger.warn(message)__            throw new IllegalStateException(message)__        }__    };does,simple,sanity,check,of,the,incoming,cluster,state,throws,an,exception,on,rejections;static,void,validate,incoming,state,logger,logger,cluster,state,incoming,state,cluster,state,last,state,final,cluster,name,incoming,cluster,name,incoming,state,get,cluster,name,if,incoming,cluster,name,equals,last,state,get,cluster,name,logger,warn,received,cluster,state,from,which,is,also,master,but,with,a,different,cluster,name,incoming,state,nodes,get,master,node,incoming,cluster,name,throw,new,illegal,state,exception,received,state,from,a,node,that,is,not,part,of,the,cluster,if,last,state,nodes,get,local,node,equals,incoming,state,nodes,get,local,node,false,logger,warn,received,a,cluster,state,from,and,not,part,of,the,cluster,should,not,happen,incoming,state,nodes,get,master,node,throw,new,illegal,state,exception,received,state,with,a,local,node,that,does,not,match,the,current,local,node,if,should,ignore,or,reject,new,cluster,state,logger,last,state,incoming,state,string,message,string,format,locale,root,rejecting,cluster,state,version,d,uuid,s,received,from,s,incoming,state,version,incoming,state,state,uuid,incoming,state,nodes,get,master,node,id,logger,warn,message,throw,new,illegal,state,exception,message
ZenDiscovery -> static void validateIncomingState(Logger logger, ClusterState incomingState, ClusterState lastState);1549270328;does simple sanity check of the incoming cluster state. Throws an exception on rejections.;static void validateIncomingState(Logger logger, ClusterState incomingState, ClusterState lastState) {_        final ClusterName incomingClusterName = incomingState.getClusterName()__        if (!incomingClusterName.equals(lastState.getClusterName())) {_            logger.warn("received cluster state from [{}] which is also master but with a different cluster name [{}]",_                incomingState.nodes().getMasterNode(), incomingClusterName)__            throw new IllegalStateException("received state from a node that is not part of the cluster")__        }_        if (lastState.nodes().getLocalNode().equals(incomingState.nodes().getLocalNode()) == false) {_            logger.warn("received a cluster state from [{}] and not part of the cluster, should not happen",_                incomingState.nodes().getMasterNode())__            throw new IllegalStateException("received state with a local node that does not match the current local node")__        }__        if (shouldIgnoreOrRejectNewClusterState(logger, lastState, incomingState)) {_            String message = String.format(_                Locale.ROOT,_                "rejecting cluster state version [%d] uuid [%s] received from [%s]",_                incomingState.version(),_                incomingState.stateUUID(),_                incomingState.nodes().getMasterNodeId()_            )__            logger.warn(message)__            throw new IllegalStateException(message)__        }__    };does,simple,sanity,check,of,the,incoming,cluster,state,throws,an,exception,on,rejections;static,void,validate,incoming,state,logger,logger,cluster,state,incoming,state,cluster,state,last,state,final,cluster,name,incoming,cluster,name,incoming,state,get,cluster,name,if,incoming,cluster,name,equals,last,state,get,cluster,name,logger,warn,received,cluster,state,from,which,is,also,master,but,with,a,different,cluster,name,incoming,state,nodes,get,master,node,incoming,cluster,name,throw,new,illegal,state,exception,received,state,from,a,node,that,is,not,part,of,the,cluster,if,last,state,nodes,get,local,node,equals,incoming,state,nodes,get,local,node,false,logger,warn,received,a,cluster,state,from,and,not,part,of,the,cluster,should,not,happen,incoming,state,nodes,get,master,node,throw,new,illegal,state,exception,received,state,with,a,local,node,that,does,not,match,the,current,local,node,if,should,ignore,or,reject,new,cluster,state,logger,last,state,incoming,state,string,message,string,format,locale,root,rejecting,cluster,state,version,d,uuid,s,received,from,s,incoming,state,version,incoming,state,state,uuid,incoming,state,nodes,get,master,node,id,logger,warn,message,throw,new,illegal,state,exception,message
ZenDiscovery -> static void validateIncomingState(Logger logger, ClusterState incomingState, ClusterState lastState);1549356476;does simple sanity check of the incoming cluster state. Throws an exception on rejections.;static void validateIncomingState(Logger logger, ClusterState incomingState, ClusterState lastState) {_        final ClusterName incomingClusterName = incomingState.getClusterName()__        if (!incomingClusterName.equals(lastState.getClusterName())) {_            logger.warn("received cluster state from [{}] which is also master but with a different cluster name [{}]",_                incomingState.nodes().getMasterNode(), incomingClusterName)__            throw new IllegalStateException("received state from a node that is not part of the cluster")__        }_        if (lastState.nodes().getLocalNode().equals(incomingState.nodes().getLocalNode()) == false) {_            logger.warn("received a cluster state from [{}] and not part of the cluster, should not happen",_                incomingState.nodes().getMasterNode())__            throw new IllegalStateException("received state with a local node that does not match the current local node")__        }__        if (shouldIgnoreOrRejectNewClusterState(logger, lastState, incomingState)) {_            String message = String.format(_                Locale.ROOT,_                "rejecting cluster state version [%d] uuid [%s] received from [%s]",_                incomingState.version(),_                incomingState.stateUUID(),_                incomingState.nodes().getMasterNodeId()_            )__            logger.warn(message)__            throw new IllegalStateException(message)__        }__    };does,simple,sanity,check,of,the,incoming,cluster,state,throws,an,exception,on,rejections;static,void,validate,incoming,state,logger,logger,cluster,state,incoming,state,cluster,state,last,state,final,cluster,name,incoming,cluster,name,incoming,state,get,cluster,name,if,incoming,cluster,name,equals,last,state,get,cluster,name,logger,warn,received,cluster,state,from,which,is,also,master,but,with,a,different,cluster,name,incoming,state,nodes,get,master,node,incoming,cluster,name,throw,new,illegal,state,exception,received,state,from,a,node,that,is,not,part,of,the,cluster,if,last,state,nodes,get,local,node,equals,incoming,state,nodes,get,local,node,false,logger,warn,received,a,cluster,state,from,and,not,part,of,the,cluster,should,not,happen,incoming,state,nodes,get,master,node,throw,new,illegal,state,exception,received,state,with,a,local,node,that,does,not,match,the,current,local,node,if,should,ignore,or,reject,new,cluster,state,logger,last,state,incoming,state,string,message,string,format,locale,root,rejecting,cluster,state,version,d,uuid,s,received,from,s,incoming,state,version,incoming,state,state,uuid,incoming,state,nodes,get,master,node,id,logger,warn,message,throw,new,illegal,state,exception,message
ZenDiscovery -> static void validateIncomingState(Logger logger, ClusterState incomingState, ClusterState lastState);1549452878;does simple sanity check of the incoming cluster state. Throws an exception on rejections.;static void validateIncomingState(Logger logger, ClusterState incomingState, ClusterState lastState) {_        final ClusterName incomingClusterName = incomingState.getClusterName()__        if (!incomingClusterName.equals(lastState.getClusterName())) {_            logger.warn("received cluster state from [{}] which is also master but with a different cluster name [{}]",_                incomingState.nodes().getMasterNode(), incomingClusterName)__            throw new IllegalStateException("received state from a node that is not part of the cluster")__        }_        if (lastState.nodes().getLocalNode().equals(incomingState.nodes().getLocalNode()) == false) {_            logger.warn("received a cluster state from [{}] and not part of the cluster, should not happen",_                incomingState.nodes().getMasterNode())__            throw new IllegalStateException("received state with a local node that does not match the current local node")__        }__        if (shouldIgnoreOrRejectNewClusterState(logger, lastState, incomingState)) {_            String message = String.format(_                Locale.ROOT,_                "rejecting cluster state version [%d] uuid [%s] received from [%s]",_                incomingState.version(),_                incomingState.stateUUID(),_                incomingState.nodes().getMasterNodeId()_            )__            logger.warn(message)__            throw new IllegalStateException(message)__        }__    };does,simple,sanity,check,of,the,incoming,cluster,state,throws,an,exception,on,rejections;static,void,validate,incoming,state,logger,logger,cluster,state,incoming,state,cluster,state,last,state,final,cluster,name,incoming,cluster,name,incoming,state,get,cluster,name,if,incoming,cluster,name,equals,last,state,get,cluster,name,logger,warn,received,cluster,state,from,which,is,also,master,but,with,a,different,cluster,name,incoming,state,nodes,get,master,node,incoming,cluster,name,throw,new,illegal,state,exception,received,state,from,a,node,that,is,not,part,of,the,cluster,if,last,state,nodes,get,local,node,equals,incoming,state,nodes,get,local,node,false,logger,warn,received,a,cluster,state,from,and,not,part,of,the,cluster,should,not,happen,incoming,state,nodes,get,master,node,throw,new,illegal,state,exception,received,state,with,a,local,node,that,does,not,match,the,current,local,node,if,should,ignore,or,reject,new,cluster,state,logger,last,state,incoming,state,string,message,string,format,locale,root,rejecting,cluster,state,version,d,uuid,s,received,from,s,incoming,state,version,incoming,state,state,uuid,incoming,state,nodes,get,master,node,id,logger,warn,message,throw,new,illegal,state,exception,message
ZenDiscovery -> JoinThreadControl -> public boolean joinThreadActive(Thread joinThread);1524684173;returns true if join thread control is started and the supplied thread is the currently active joinThread;public boolean joinThreadActive(Thread joinThread) {_            return running.get() && joinThread.equals(currentJoinThread.get())__        };returns,true,if,join,thread,control,is,started,and,the,supplied,thread,is,the,currently,active,join,thread;public,boolean,join,thread,active,thread,join,thread,return,running,get,join,thread,equals,current,join,thread,get
ZenDiscovery -> JoinThreadControl -> public boolean joinThreadActive(Thread joinThread);1525798022;returns true if join thread control is started and the supplied thread is the currently active joinThread;public boolean joinThreadActive(Thread joinThread) {_            return running.get() && joinThread.equals(currentJoinThread.get())__        };returns,true,if,join,thread,control,is,started,and,the,supplied,thread,is,the,currently,active,join,thread;public,boolean,join,thread,active,thread,join,thread,return,running,get,join,thread,equals,current,join,thread,get
ZenDiscovery -> JoinThreadControl -> public boolean joinThreadActive(Thread joinThread);1527096592;returns true if join thread control is started and the supplied thread is the currently active joinThread;public boolean joinThreadActive(Thread joinThread) {_            return running.get() && joinThread.equals(currentJoinThread.get())__        };returns,true,if,join,thread,control,is,started,and,the,supplied,thread,is,the,currently,active,join,thread;public,boolean,join,thread,active,thread,join,thread,return,running,get,join,thread,equals,current,join,thread,get
ZenDiscovery -> JoinThreadControl -> public boolean joinThreadActive(Thread joinThread);1527152864;returns true if join thread control is started and the supplied thread is the currently active joinThread;public boolean joinThreadActive(Thread joinThread) {_            return running.get() && joinThread.equals(currentJoinThread.get())__        };returns,true,if,join,thread,control,is,started,and,the,supplied,thread,is,the,currently,active,join,thread;public,boolean,join,thread,active,thread,join,thread,return,running,get,join,thread,equals,current,join,thread,get
ZenDiscovery -> JoinThreadControl -> public boolean joinThreadActive(Thread joinThread);1529687475;returns true if join thread control is started and the supplied thread is the currently active joinThread;public boolean joinThreadActive(Thread joinThread) {_            return running.get() && joinThread.equals(currentJoinThread.get())__        };returns,true,if,join,thread,control,is,started,and,the,supplied,thread,is,the,currently,active,join,thread;public,boolean,join,thread,active,thread,join,thread,return,running,get,join,thread,equals,current,join,thread,get
ZenDiscovery -> JoinThreadControl -> public boolean joinThreadActive(Thread joinThread);1533230566;returns true if join thread control is started and the supplied thread is the currently active joinThread;public boolean joinThreadActive(Thread joinThread) {_            return running.get() && joinThread.equals(currentJoinThread.get())__        };returns,true,if,join,thread,control,is,started,and,the,supplied,thread,is,the,currently,active,join,thread;public,boolean,join,thread,active,thread,join,thread,return,running,get,join,thread,equals,current,join,thread,get
ZenDiscovery -> JoinThreadControl -> public boolean joinThreadActive(Thread joinThread);1540847035;returns true if join thread control is started and the supplied thread is the currently active joinThread;public boolean joinThreadActive(Thread joinThread) {_            return running.get() && joinThread.equals(currentJoinThread.get())__        };returns,true,if,join,thread,control,is,started,and,the,supplied,thread,is,the,currently,active,join,thread;public,boolean,join,thread,active,thread,join,thread,return,running,get,join,thread,equals,current,join,thread,get
ZenDiscovery -> JoinThreadControl -> public boolean joinThreadActive(Thread joinThread);1541008027;returns true if join thread control is started and the supplied thread is the currently active joinThread;public boolean joinThreadActive(Thread joinThread) {_            return running.get() && joinThread.equals(currentJoinThread.get())__        };returns,true,if,join,thread,control,is,started,and,the,supplied,thread,is,the,currently,active,join,thread;public,boolean,join,thread,active,thread,join,thread,return,running,get,join,thread,equals,current,join,thread,get
ZenDiscovery -> JoinThreadControl -> public boolean joinThreadActive(Thread joinThread);1541092382;returns true if join thread control is started and the supplied thread is the currently active joinThread;public boolean joinThreadActive(Thread joinThread) {_            return running.get() && joinThread.equals(currentJoinThread.get())__        };returns,true,if,join,thread,control,is,started,and,the,supplied,thread,is,the,currently,active,join,thread;public,boolean,join,thread,active,thread,join,thread,return,running,get,join,thread,equals,current,join,thread,get
ZenDiscovery -> JoinThreadControl -> public boolean joinThreadActive(Thread joinThread);1542646292;returns true if join thread control is started and the supplied thread is the currently active joinThread;public boolean joinThreadActive(Thread joinThread) {_            return running.get() && joinThread.equals(currentJoinThread.get())__        };returns,true,if,join,thread,control,is,started,and,the,supplied,thread,is,the,currently,active,join,thread;public,boolean,join,thread,active,thread,join,thread,return,running,get,join,thread,equals,current,join,thread,get
ZenDiscovery -> JoinThreadControl -> public boolean joinThreadActive(Thread joinThread);1544081506;returns true if join thread control is started and the supplied thread is the currently active joinThread;public boolean joinThreadActive(Thread joinThread) {_            return running.get() && joinThread.equals(currentJoinThread.get())__        };returns,true,if,join,thread,control,is,started,and,the,supplied,thread,is,the,currently,active,join,thread;public,boolean,join,thread,active,thread,join,thread,return,running,get,join,thread,equals,current,join,thread,get
ZenDiscovery -> JoinThreadControl -> public boolean joinThreadActive(Thread joinThread);1546850547;returns true if join thread control is started and the supplied thread is the currently active joinThread;public boolean joinThreadActive(Thread joinThread) {_            return running.get() && joinThread.equals(currentJoinThread.get())__        };returns,true,if,join,thread,control,is,started,and,the,supplied,thread,is,the,currently,active,join,thread;public,boolean,join,thread,active,thread,join,thread,return,running,get,join,thread,equals,current,join,thread,get
ZenDiscovery -> JoinThreadControl -> public boolean joinThreadActive(Thread joinThread);1547121470;returns true if join thread control is started and the supplied thread is the currently active joinThread;public boolean joinThreadActive(Thread joinThread) {_            return running.get() && joinThread.equals(currentJoinThread.get())__        };returns,true,if,join,thread,control,is,started,and,the,supplied,thread,is,the,currently,active,join,thread;public,boolean,join,thread,active,thread,join,thread,return,running,get,join,thread,equals,current,join,thread,get
ZenDiscovery -> JoinThreadControl -> public boolean joinThreadActive(Thread joinThread);1547625930;returns true if join thread control is started and the supplied thread is the currently active joinThread;public boolean joinThreadActive(Thread joinThread) {_            return running.get() && joinThread.equals(currentJoinThread.get())__        };returns,true,if,join,thread,control,is,started,and,the,supplied,thread,is,the,currently,active,join,thread;public,boolean,join,thread,active,thread,join,thread,return,running,get,join,thread,equals,current,join,thread,get
ZenDiscovery -> JoinThreadControl -> public boolean joinThreadActive(Thread joinThread);1548320260;returns true if join thread control is started and the supplied thread is the currently active joinThread;public boolean joinThreadActive(Thread joinThread) {_            return running.get() && joinThread.equals(currentJoinThread.get())__        };returns,true,if,join,thread,control,is,started,and,the,supplied,thread,is,the,currently,active,join,thread;public,boolean,join,thread,active,thread,join,thread,return,running,get,join,thread,equals,current,join,thread,get
ZenDiscovery -> JoinThreadControl -> public boolean joinThreadActive(Thread joinThread);1549270328;returns true if join thread control is started and the supplied thread is the currently active joinThread;public boolean joinThreadActive(Thread joinThread) {_            return running.get() && joinThread.equals(currentJoinThread.get())__        };returns,true,if,join,thread,control,is,started,and,the,supplied,thread,is,the,currently,active,join,thread;public,boolean,join,thread,active,thread,join,thread,return,running,get,join,thread,equals,current,join,thread,get
ZenDiscovery -> JoinThreadControl -> public boolean joinThreadActive(Thread joinThread);1549356476;returns true if join thread control is started and the supplied thread is the currently active joinThread;public boolean joinThreadActive(Thread joinThread) {_            return running.get() && joinThread.equals(currentJoinThread.get())__        };returns,true,if,join,thread,control,is,started,and,the,supplied,thread,is,the,currently,active,join,thread;public,boolean,join,thread,active,thread,join,thread,return,running,get,join,thread,equals,current,join,thread,get
ZenDiscovery -> JoinThreadControl -> public boolean joinThreadActive(Thread joinThread);1549452878;returns true if join thread control is started and the supplied thread is the currently active joinThread;public boolean joinThreadActive(Thread joinThread) {_            return running.get() && joinThread.equals(currentJoinThread.get())__        };returns,true,if,join,thread,control,is,started,and,the,supplied,thread,is,the,currently,active,join,thread;public,boolean,join,thread,active,thread,join,thread,return,running,get,join,thread,equals,current,join,thread,get
ZenDiscovery -> JoinThreadControl -> public void stopRunningThreadAndRejoin(String reason);1524684173;cleans any running joining thread and calls {@link #rejoin};public void stopRunningThreadAndRejoin(String reason) {_            assert Thread.holdsLock(stateMutex)__            currentJoinThread.set(null)__            rejoin(reason)__        };cleans,any,running,joining,thread,and,calls,link,rejoin;public,void,stop,running,thread,and,rejoin,string,reason,assert,thread,holds,lock,state,mutex,current,join,thread,set,null,rejoin,reason
ZenDiscovery -> JoinThreadControl -> public void stopRunningThreadAndRejoin(String reason);1525798022;cleans any running joining thread and calls {@link #rejoin};public void stopRunningThreadAndRejoin(String reason) {_            assert Thread.holdsLock(stateMutex)__            currentJoinThread.set(null)__            rejoin(reason)__        };cleans,any,running,joining,thread,and,calls,link,rejoin;public,void,stop,running,thread,and,rejoin,string,reason,assert,thread,holds,lock,state,mutex,current,join,thread,set,null,rejoin,reason
ZenDiscovery -> JoinThreadControl -> public void stopRunningThreadAndRejoin(String reason);1527096592;cleans any running joining thread and calls {@link #rejoin};public void stopRunningThreadAndRejoin(String reason) {_            assert Thread.holdsLock(stateMutex)__            currentJoinThread.set(null)__            rejoin(reason)__        };cleans,any,running,joining,thread,and,calls,link,rejoin;public,void,stop,running,thread,and,rejoin,string,reason,assert,thread,holds,lock,state,mutex,current,join,thread,set,null,rejoin,reason
ZenDiscovery -> JoinThreadControl -> public void stopRunningThreadAndRejoin(String reason);1527152864;cleans any running joining thread and calls {@link #rejoin};public void stopRunningThreadAndRejoin(String reason) {_            assert Thread.holdsLock(stateMutex)__            currentJoinThread.set(null)__            rejoin(reason)__        };cleans,any,running,joining,thread,and,calls,link,rejoin;public,void,stop,running,thread,and,rejoin,string,reason,assert,thread,holds,lock,state,mutex,current,join,thread,set,null,rejoin,reason
ZenDiscovery -> JoinThreadControl -> public void stopRunningThreadAndRejoin(String reason);1529687475;cleans any running joining thread and calls {@link #rejoin};public void stopRunningThreadAndRejoin(String reason) {_            assert Thread.holdsLock(stateMutex)__            currentJoinThread.set(null)__            rejoin(reason)__        };cleans,any,running,joining,thread,and,calls,link,rejoin;public,void,stop,running,thread,and,rejoin,string,reason,assert,thread,holds,lock,state,mutex,current,join,thread,set,null,rejoin,reason
ZenDiscovery -> JoinThreadControl -> public void stopRunningThreadAndRejoin(String reason);1533230566;cleans any running joining thread and calls {@link #rejoin};public void stopRunningThreadAndRejoin(String reason) {_            assert Thread.holdsLock(stateMutex)__            currentJoinThread.set(null)__            rejoin(reason)__        };cleans,any,running,joining,thread,and,calls,link,rejoin;public,void,stop,running,thread,and,rejoin,string,reason,assert,thread,holds,lock,state,mutex,current,join,thread,set,null,rejoin,reason
ZenDiscovery -> JoinThreadControl -> public void stopRunningThreadAndRejoin(String reason);1540847035;cleans any running joining thread and calls {@link #rejoin};public void stopRunningThreadAndRejoin(String reason) {_            assert Thread.holdsLock(stateMutex)__            currentJoinThread.set(null)__            rejoin(reason)__        };cleans,any,running,joining,thread,and,calls,link,rejoin;public,void,stop,running,thread,and,rejoin,string,reason,assert,thread,holds,lock,state,mutex,current,join,thread,set,null,rejoin,reason
ZenDiscovery -> JoinThreadControl -> public void stopRunningThreadAndRejoin(String reason);1541008027;cleans any running joining thread and calls {@link #rejoin};public void stopRunningThreadAndRejoin(String reason) {_            assert Thread.holdsLock(stateMutex)__            currentJoinThread.set(null)__            rejoin(reason)__        };cleans,any,running,joining,thread,and,calls,link,rejoin;public,void,stop,running,thread,and,rejoin,string,reason,assert,thread,holds,lock,state,mutex,current,join,thread,set,null,rejoin,reason
ZenDiscovery -> JoinThreadControl -> public void stopRunningThreadAndRejoin(String reason);1541092382;cleans any running joining thread and calls {@link #rejoin};public void stopRunningThreadAndRejoin(String reason) {_            assert Thread.holdsLock(stateMutex)__            currentJoinThread.set(null)__            rejoin(reason)__        };cleans,any,running,joining,thread,and,calls,link,rejoin;public,void,stop,running,thread,and,rejoin,string,reason,assert,thread,holds,lock,state,mutex,current,join,thread,set,null,rejoin,reason
ZenDiscovery -> JoinThreadControl -> public void stopRunningThreadAndRejoin(String reason);1542646292;cleans any running joining thread and calls {@link #rejoin};public void stopRunningThreadAndRejoin(String reason) {_            assert Thread.holdsLock(stateMutex)__            currentJoinThread.set(null)__            rejoin(reason)__        };cleans,any,running,joining,thread,and,calls,link,rejoin;public,void,stop,running,thread,and,rejoin,string,reason,assert,thread,holds,lock,state,mutex,current,join,thread,set,null,rejoin,reason
ZenDiscovery -> JoinThreadControl -> public void stopRunningThreadAndRejoin(String reason);1544081506;cleans any running joining thread and calls {@link #rejoin};public void stopRunningThreadAndRejoin(String reason) {_            assert Thread.holdsLock(stateMutex)__            currentJoinThread.set(null)__            rejoin(reason)__        };cleans,any,running,joining,thread,and,calls,link,rejoin;public,void,stop,running,thread,and,rejoin,string,reason,assert,thread,holds,lock,state,mutex,current,join,thread,set,null,rejoin,reason
ZenDiscovery -> JoinThreadControl -> public void stopRunningThreadAndRejoin(String reason);1546850547;cleans any running joining thread and calls {@link #rejoin};public void stopRunningThreadAndRejoin(String reason) {_            assert Thread.holdsLock(stateMutex)__            currentJoinThread.set(null)__            rejoin(reason)__        };cleans,any,running,joining,thread,and,calls,link,rejoin;public,void,stop,running,thread,and,rejoin,string,reason,assert,thread,holds,lock,state,mutex,current,join,thread,set,null,rejoin,reason
ZenDiscovery -> JoinThreadControl -> public void stopRunningThreadAndRejoin(String reason);1547121470;cleans any running joining thread and calls {@link #rejoin};public void stopRunningThreadAndRejoin(String reason) {_            assert Thread.holdsLock(stateMutex)__            currentJoinThread.set(null)__            rejoin(reason)__        };cleans,any,running,joining,thread,and,calls,link,rejoin;public,void,stop,running,thread,and,rejoin,string,reason,assert,thread,holds,lock,state,mutex,current,join,thread,set,null,rejoin,reason
ZenDiscovery -> JoinThreadControl -> public void stopRunningThreadAndRejoin(String reason);1547625930;cleans any running joining thread and calls {@link #rejoin};public void stopRunningThreadAndRejoin(String reason) {_            assert Thread.holdsLock(stateMutex)__            currentJoinThread.set(null)__            rejoin(reason)__        };cleans,any,running,joining,thread,and,calls,link,rejoin;public,void,stop,running,thread,and,rejoin,string,reason,assert,thread,holds,lock,state,mutex,current,join,thread,set,null,rejoin,reason
ZenDiscovery -> JoinThreadControl -> public void stopRunningThreadAndRejoin(String reason);1548320260;cleans any running joining thread and calls {@link #rejoin};public void stopRunningThreadAndRejoin(String reason) {_            assert Thread.holdsLock(stateMutex)__            currentJoinThread.set(null)__            rejoin(reason)__        };cleans,any,running,joining,thread,and,calls,link,rejoin;public,void,stop,running,thread,and,rejoin,string,reason,assert,thread,holds,lock,state,mutex,current,join,thread,set,null,rejoin,reason
ZenDiscovery -> JoinThreadControl -> public void stopRunningThreadAndRejoin(String reason);1549270328;cleans any running joining thread and calls {@link #rejoin};public void stopRunningThreadAndRejoin(String reason) {_            assert Thread.holdsLock(stateMutex)__            currentJoinThread.set(null)__            rejoin(reason)__        };cleans,any,running,joining,thread,and,calls,link,rejoin;public,void,stop,running,thread,and,rejoin,string,reason,assert,thread,holds,lock,state,mutex,current,join,thread,set,null,rejoin,reason
ZenDiscovery -> JoinThreadControl -> public void stopRunningThreadAndRejoin(String reason);1549356476;cleans any running joining thread and calls {@link #rejoin};public void stopRunningThreadAndRejoin(String reason) {_            assert Thread.holdsLock(stateMutex)__            currentJoinThread.set(null)__            rejoin(reason)__        };cleans,any,running,joining,thread,and,calls,link,rejoin;public,void,stop,running,thread,and,rejoin,string,reason,assert,thread,holds,lock,state,mutex,current,join,thread,set,null,rejoin,reason
ZenDiscovery -> JoinThreadControl -> public void stopRunningThreadAndRejoin(String reason);1549452878;cleans any running joining thread and calls {@link #rejoin};public void stopRunningThreadAndRejoin(String reason) {_            assert Thread.holdsLock(stateMutex)__            currentJoinThread.set(null)__            rejoin(reason)__        };cleans,any,running,joining,thread,and,calls,link,rejoin;public,void,stop,running,thread,and,rejoin,string,reason,assert,thread,holds,lock,state,mutex,current,join,thread,set,null,rejoin,reason
