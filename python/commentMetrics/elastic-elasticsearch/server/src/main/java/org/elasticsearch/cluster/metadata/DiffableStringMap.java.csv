commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Set<Entry<String, String>> entrySet() {     return innerMap.entrySet(). }
false;public;1;5;;@Override @SuppressWarnings("unchecked") public void writeTo(StreamOutput out) throws IOException {     out.writeMap((Map<String, Object>) (Map) innerMap). }
false;public;1;4;;@Override public Diff<DiffableStringMap> diff(DiffableStringMap previousState) {     return new DiffableStringMapDiff(previousState, this). }
false;public,static;1;3;;public static Diff<DiffableStringMap> readDiffFrom(StreamInput in) throws IOException {     return new DiffableStringMapDiff(in). }
false;public;0;3;;public List<String> getDeletes() {     return deletes. }
false;public;0;3;;public Map<String, Diff<String>> getDiffs() {     return Collections.emptyMap(). }
false;public;0;3;;public Map<String, String> getUpserts() {     return upserts. }
false;public;1;12;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeVInt(deletes.size()).     for (String delete : deletes) {         out.writeString(delete).     }     out.writeVInt(upserts.size()).     for (Map.Entry<String, String> entry : upserts.entrySet()) {         out.writeString(entry.getKey()).         out.writeString(entry.getValue()).     } }
false;public;1;14;;@Override public DiffableStringMap apply(DiffableStringMap part) {     Map<String, String> builder = new HashMap<>(part.innerMap).     List<String> deletes = getDeletes().     for (String delete : deletes) {         builder.remove(delete).     }     assert getDiffs().size() == 0 : "there should never be diffs for DiffableStringMap".     for (Map.Entry<String, String> upsert : upserts.entrySet()) {         builder.put(upsert.getKey(), upsert.getValue()).     }     return new DiffableStringMap(builder). }
