commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;public void add(GetStats stats) {     if (stats == null) {         return.     }     current += stats.current.     addTotals(stats). }
false;public;1;10;;public void addTotals(GetStats stats) {     if (stats == null) {         return.     }     existsCount += stats.existsCount.     existsTimeInMillis += stats.existsTimeInMillis.     missingCount += stats.missingCount.     missingTimeInMillis += stats.missingTimeInMillis.     current += stats.current. }
false;public;0;3;;public long getCount() {     return existsCount + missingCount. }
false;public;0;3;;public long getTimeInMillis() {     return existsTimeInMillis + missingTimeInMillis. }
false;public;0;3;;public TimeValue getTime() {     return new TimeValue(getTimeInMillis()). }
false;public;0;3;;public long getExistsCount() {     return this.existsCount. }
false;public;0;3;;public long getExistsTimeInMillis() {     return this.existsTimeInMillis. }
false;public;0;3;;public TimeValue getExistsTime() {     return new TimeValue(existsTimeInMillis). }
false;public;0;3;;public long getMissingCount() {     return this.missingCount. }
false;public;0;3;;public long getMissingTimeInMillis() {     return this.missingTimeInMillis. }
false;public;0;3;;public TimeValue getMissingTime() {     return new TimeValue(missingTimeInMillis). }
false;public;0;3;;public long current() {     return this.current. }
false;public;2;13;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(Fields.GET).     builder.field(Fields.TOTAL, getCount()).     builder.humanReadableField(Fields.TIME_IN_MILLIS, Fields.TIME, getTime()).     builder.field(Fields.EXISTS_TOTAL, existsCount).     builder.humanReadableField(Fields.EXISTS_TIME_IN_MILLIS, Fields.EXISTS_TIME, getExistsTime()).     builder.field(Fields.MISSING_TOTAL, missingCount).     builder.humanReadableField(Fields.MISSING_TIME_IN_MILLIS, Fields.MISSING_TIME, getMissingTime()).     builder.field(Fields.CURRENT, current).     builder.endObject().     return builder. }
false;public;1;8;;@Override public void readFrom(StreamInput in) throws IOException {     existsCount = in.readVLong().     existsTimeInMillis = in.readVLong().     missingCount = in.readVLong().     missingTimeInMillis = in.readVLong().     current = in.readVLong(). }
false;public;1;8;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeVLong(existsCount).     out.writeVLong(existsTimeInMillis).     out.writeVLong(missingCount).     out.writeVLong(missingTimeInMillis).     out.writeVLong(current). }
