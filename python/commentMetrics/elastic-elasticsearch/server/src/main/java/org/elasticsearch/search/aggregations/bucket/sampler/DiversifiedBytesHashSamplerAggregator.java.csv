commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public DeferringBucketCollector getDeferringCollector() {     bdd = new DiverseDocsDeferringCollector().     return bdd. }
false;protected;1;4;;@Override protected TopDocsCollector<ScoreDocKey> createTopDocsCollector(int size) {     return new ValuesDiversifiedTopDocsCollector(size, maxDocsPerValue). }
false;public;1;13;;@Override public boolean advanceExact(int target) throws IOException {     docID = target.     if (values.advanceExact(target)) {         if (values.docValueCount() > 1) {             throw new IllegalArgumentException("Sample diversifying key must be a single valued-field").         }         return true.     } else {         return false.     } }
false;public;0;4;;@Override public int docID() {     return docID. }
false;public;0;5;;@Override public long longValue() throws IOException {     final BytesRef bytes = values.nextValue().     return bytes.hashCode(). }
false;protected;1;37;;@Override protected NumericDocValues getKeys(LeafReaderContext context) {     try {         values = valuesSource.bytesValues(context).     } catch (IOException e) {         throw new ElasticsearchException("Error reading values", e).     }     return new AbstractNumericDocValues() {          private int docID = -1.          @Override         public boolean advanceExact(int target) throws IOException {             docID = target.             if (values.advanceExact(target)) {                 if (values.docValueCount() > 1) {                     throw new IllegalArgumentException("Sample diversifying key must be a single valued-field").                 }                 return true.             } else {                 return false.             }         }          @Override         public int docID() {             return docID.         }          @Override         public long longValue() throws IOException {             final BytesRef bytes = values.nextValue().             return bytes.hashCode().         }     }. }
