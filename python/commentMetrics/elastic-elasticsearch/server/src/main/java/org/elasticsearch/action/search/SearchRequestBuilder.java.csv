commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Sets the indices the search will be executed on.  */ ;/**  * Sets the indices the search will be executed on.  */ public SearchRequestBuilder setIndices(String... indices) {     request.indices(indices).     return this. }
true;public;1;5;/**  * The document types to execute the search against. Defaults to be executed against  * all types.  * @deprecated Types are going away, prefer filtering on a field.  */ ;/**  * The document types to execute the search against. Defaults to be executed against  * all types.  * @deprecated Types are going away, prefer filtering on a field.  */ @Deprecated public SearchRequestBuilder setTypes(String... types) {     request.types(types).     return this. }
true;public;1;4;/**  * The search type to execute, defaults to {@link org.elasticsearch.action.search.SearchType#DEFAULT}.  */ ;/**  * The search type to execute, defaults to {@link org.elasticsearch.action.search.SearchType#DEFAULT}.  */ public SearchRequestBuilder setSearchType(SearchType searchType) {     request.searchType(searchType).     return this. }
true;public;1;4;/**  * The a string representation search type to execute, defaults to {@link SearchType#DEFAULT}. Can be  * one of "dfs_query_then_fetch"/"dfsQueryThenFetch", "dfs_query_and_fetch"/"dfsQueryAndFetch",  * "query_then_fetch"/"queryThenFetch", and "query_and_fetch"/"queryAndFetch".  */ ;/**  * The a string representation search type to execute, defaults to {@link SearchType#DEFAULT}. Can be  * one of "dfs_query_then_fetch"/"dfsQueryThenFetch", "dfs_query_and_fetch"/"dfsQueryAndFetch",  * "query_then_fetch"/"queryThenFetch", and "query_and_fetch"/"queryAndFetch".  */ public SearchRequestBuilder setSearchType(String searchType) {     request.searchType(searchType).     return this. }
true;public;1;4;/**  * If set, will enable scrolling of the search request.  */ ;/**  * If set, will enable scrolling of the search request.  */ public SearchRequestBuilder setScroll(Scroll scroll) {     request.scroll(scroll).     return this. }
true;public;1;4;/**  * If set, will enable scrolling of the search request for the specified timeout.  */ ;/**  * If set, will enable scrolling of the search request for the specified timeout.  */ public SearchRequestBuilder setScroll(TimeValue keepAlive) {     request.scroll(keepAlive).     return this. }
true;public;1;4;/**  * If set, will enable scrolling of the search request for the specified timeout.  */ ;/**  * If set, will enable scrolling of the search request for the specified timeout.  */ public SearchRequestBuilder setScroll(String keepAlive) {     request.scroll(keepAlive).     return this. }
true;public;1;4;/**  * An optional timeout to control how long search is allowed to take.  */ ;/**  * An optional timeout to control how long search is allowed to take.  */ public SearchRequestBuilder setTimeout(TimeValue timeout) {     sourceBuilder().timeout(timeout).     return this. }
true;public;1;4;/**  * An optional document count, upon collecting which the search  * query will early terminate  */ ;/**  * An optional document count, upon collecting which the search  * query will early terminate  */ public SearchRequestBuilder setTerminateAfter(int terminateAfter) {     sourceBuilder().terminateAfter(terminateAfter).     return this. }
true;public;1;4;/**  * A comma separated list of routing values to control the shards the search will be executed on.  */ ;/**  * A comma separated list of routing values to control the shards the search will be executed on.  */ public SearchRequestBuilder setRouting(String routing) {     request.routing(routing).     return this. }
true;public;1;4;/**  * The routing values to control the shards that the search will be executed on.  */ ;/**  * The routing values to control the shards that the search will be executed on.  */ public SearchRequestBuilder setRouting(String... routing) {     request.routing(routing).     return this. }
true;public;1;4;/**  * Sets the preference to execute the search. Defaults to randomize across shards. Can be set to  * {@code _local} to prefer local shards or a custom value, which guarantees that the same order  * will be used across different requests.  */ ;/**  * Sets the preference to execute the search. Defaults to randomize across shards. Can be set to  * {@code _local} to prefer local shards or a custom value, which guarantees that the same order  * will be used across different requests.  */ public SearchRequestBuilder setPreference(String preference) {     request.preference(preference).     return this. }
true;public;1;4;/**  * Specifies what type of requested indices to ignore and wildcard indices expressions.  * <p>  * For example indices that don't exist.  */ ;/**  * Specifies what type of requested indices to ignore and wildcard indices expressions.  * <p>  * For example indices that don't exist.  */ public SearchRequestBuilder setIndicesOptions(IndicesOptions indicesOptions) {     request().indicesOptions(indicesOptions).     return this. }
true;public;1;4;/**  * Constructs a new search source builder with a search query.  *  * @see org.elasticsearch.index.query.QueryBuilders  */ ;/**  * Constructs a new search source builder with a search query.  *  * @see org.elasticsearch.index.query.QueryBuilders  */ public SearchRequestBuilder setQuery(QueryBuilder queryBuilder) {     sourceBuilder().query(queryBuilder).     return this. }
true;public;1;4;/**  * Sets a filter that will be executed after the query has been executed and only has affect on the search hits  * (not aggregations). This filter is always executed as last filtering mechanism.  */ ;/**  * Sets a filter that will be executed after the query has been executed and only has affect on the search hits  * (not aggregations). This filter is always executed as last filtering mechanism.  */ public SearchRequestBuilder setPostFilter(QueryBuilder postFilter) {     sourceBuilder().postFilter(postFilter).     return this. }
true;public;1;4;/**  * Sets the minimum score below which docs will be filtered out.  */ ;/**  * Sets the minimum score below which docs will be filtered out.  */ public SearchRequestBuilder setMinScore(float minScore) {     sourceBuilder().minScore(minScore).     return this. }
true;public;1;4;/**  * From index to start the search from. Defaults to {@code 0}.  */ ;/**  * From index to start the search from. Defaults to {@code 0}.  */ public SearchRequestBuilder setFrom(int from) {     sourceBuilder().from(from).     return this. }
true;public;1;4;/**  * The number of search hits to return. Defaults to {@code 10}.  */ ;/**  * The number of search hits to return. Defaults to {@code 10}.  */ public SearchRequestBuilder setSize(int size) {     sourceBuilder().size(size).     return this. }
true;public;1;4;/**  * Should each {@link org.elasticsearch.search.SearchHit} be returned with an  * explanation of the hit (ranking).  */ ;/**  * Should each {@link org.elasticsearch.search.SearchHit} be returned with an  * explanation of the hit (ranking).  */ public SearchRequestBuilder setExplain(boolean explain) {     sourceBuilder().explain(explain).     return this. }
true;public;1;4;/**  * Should each {@link org.elasticsearch.search.SearchHit} be returned with its  * version.  */ ;/**  * Should each {@link org.elasticsearch.search.SearchHit} be returned with its  * version.  */ public SearchRequestBuilder setVersion(boolean version) {     sourceBuilder().version(version).     return this. }
true;public;1;4;/**  * Should each {@link org.elasticsearch.search.SearchHit} be returned with the  * sequence number and primary term of the last modification of the document.  */ ;/**  * Should each {@link org.elasticsearch.search.SearchHit} be returned with the  * sequence number and primary term of the last modification of the document.  */ public SearchRequestBuilder seqNoAndPrimaryTerm(boolean seqNoAndPrimaryTerm) {     sourceBuilder().seqNoAndPrimaryTerm(seqNoAndPrimaryTerm).     return this. }
true;public;2;4;/**  * Sets the boost a specific index will receive when the query is executed against it.  *  * @param index      The index to apply the boost against  * @param indexBoost The boost to apply to the index  */ ;/**  * Sets the boost a specific index will receive when the query is executed against it.  *  * @param index      The index to apply the boost against  * @param indexBoost The boost to apply to the index  */ public SearchRequestBuilder addIndexBoost(String index, float indexBoost) {     sourceBuilder().indexBoost(index, indexBoost).     return this. }
true;public;1;4;/**  * The stats groups this request will be aggregated under.  */ ;/**  * The stats groups this request will be aggregated under.  */ public SearchRequestBuilder setStats(String... statsGroups) {     sourceBuilder().stats(Arrays.asList(statsGroups)).     return this. }
true;public;1;4;/**  * The stats groups this request will be aggregated under.  */ ;/**  * The stats groups this request will be aggregated under.  */ public SearchRequestBuilder setStats(List<String> statsGroups) {     sourceBuilder().stats(statsGroups).     return this. }
true;public;1;4;/**  * Indicates whether the response should contain the stored _source for every hit  */ ;/**  * Indicates whether the response should contain the stored _source for every hit  */ public SearchRequestBuilder setFetchSource(boolean fetch) {     sourceBuilder().fetchSource(fetch).     return this. }
true;public;2;4;/**  * Indicate that _source should be returned with every hit, with an "include" and/or "exclude" set which can include simple wildcard  * elements.  *  * @param include An optional include (optionally wildcarded) pattern to filter the returned _source  * @param exclude An optional exclude (optionally wildcarded) pattern to filter the returned _source  */ ;/**  * Indicate that _source should be returned with every hit, with an "include" and/or "exclude" set which can include simple wildcard  * elements.  *  * @param include An optional include (optionally wildcarded) pattern to filter the returned _source  * @param exclude An optional exclude (optionally wildcarded) pattern to filter the returned _source  */ public SearchRequestBuilder setFetchSource(@Nullable String include, @Nullable String exclude) {     sourceBuilder().fetchSource(include, exclude).     return this. }
true;public;2;4;/**  * Indicate that _source should be returned with every hit, with an "include" and/or "exclude" set which can include simple wildcard  * elements.  *  * @param includes An optional list of include (optionally wildcarded) pattern to filter the returned _source  * @param excludes An optional list of exclude (optionally wildcarded) pattern to filter the returned _source  */ ;/**  * Indicate that _source should be returned with every hit, with an "include" and/or "exclude" set which can include simple wildcard  * elements.  *  * @param includes An optional list of include (optionally wildcarded) pattern to filter the returned _source  * @param excludes An optional list of exclude (optionally wildcarded) pattern to filter the returned _source  */ public SearchRequestBuilder setFetchSource(@Nullable String[] includes, @Nullable String[] excludes) {     sourceBuilder().fetchSource(includes, excludes).     return this. }
true;public;2;4;/**  * Adds a docvalue based field to load and return. The field does not have to be stored,  * but its recommended to use non analyzed or numeric fields.  *  * @param name The field to get from the docvalue  */ ;/**  * Adds a docvalue based field to load and return. The field does not have to be stored,  * but its recommended to use non analyzed or numeric fields.  *  * @param name The field to get from the docvalue  */ public SearchRequestBuilder addDocValueField(String name, String format) {     sourceBuilder().docValueField(name, format).     return this. }
true;public;1;3;/**  * Adds a docvalue based field to load and return. The field does not have to be stored,  * but its recommended to use non analyzed or numeric fields.  *  * @param name The field to get from the docvalue  */ ;/**  * Adds a docvalue based field to load and return. The field does not have to be stored,  * but its recommended to use non analyzed or numeric fields.  *  * @param name The field to get from the docvalue  */ public SearchRequestBuilder addDocValueField(String name) {     return addDocValueField(name, null). }
true;public;1;4;/**  * Adds a stored field to load and return (note, it must be stored) as part of the search request.  */ ;/**  * Adds a stored field to load and return (note, it must be stored) as part of the search request.  */ public SearchRequestBuilder addStoredField(String field) {     sourceBuilder().storedField(field).     return this. }
true;public;2;4;/**  * Adds a script based field to load and return. The field does not have to be stored,  * but its recommended to use non analyzed or numeric fields.  *  * @param name   The name that will represent this value in the return hit  * @param script The script to use  */ ;/**  * Adds a script based field to load and return. The field does not have to be stored,  * but its recommended to use non analyzed or numeric fields.  *  * @param name   The name that will represent this value in the return hit  * @param script The script to use  */ public SearchRequestBuilder addScriptField(String name, Script script) {     sourceBuilder().scriptField(name, script).     return this. }
true;public;2;4;/**  * Adds a sort against the given field name and the sort ordering.  *  * @param field The name of the field  * @param order The sort ordering  */ ;/**  * Adds a sort against the given field name and the sort ordering.  *  * @param field The name of the field  * @param order The sort ordering  */ public SearchRequestBuilder addSort(String field, SortOrder order) {     sourceBuilder().sort(field, order).     return this. }
true;public;1;4;/**  * Adds a generic sort builder.  *  * @see org.elasticsearch.search.sort.SortBuilders  */ ;/**  * Adds a generic sort builder.  *  * @see org.elasticsearch.search.sort.SortBuilders  */ public SearchRequestBuilder addSort(SortBuilder<?> sort) {     sourceBuilder().sort(sort).     return this. }
true;public;1;4;/**  * Set the sort values that indicates which docs this request should "search after".  */ ;/**  * Set the sort values that indicates which docs this request should "search after".  */ public SearchRequestBuilder searchAfter(Object[] values) {     sourceBuilder().searchAfter(values).     return this. }
false;public;1;4;;public SearchRequestBuilder slice(SliceBuilder builder) {     sourceBuilder().slice(builder).     return this. }
true;public;1;4;/**  * Applies when sorting, and controls if scores will be tracked as well. Defaults to {@code false}.  */ ;/**  * Applies when sorting, and controls if scores will be tracked as well. Defaults to {@code false}.  */ public SearchRequestBuilder setTrackScores(boolean trackScores) {     sourceBuilder().trackScores(trackScores).     return this. }
true;public;1;4;/**  * Indicates if the total hit count for the query should be tracked. Defaults to {@code true}  */ ;/**  * Indicates if the total hit count for the query should be tracked. Defaults to {@code true}  */ public SearchRequestBuilder setTrackTotalHits(boolean trackTotalHits) {     sourceBuilder().trackTotalHits(trackTotalHits).     return this. }
true;public;1;4;/**  * Indicates if the total hit count for the query should be tracked. Defaults to {@code true}  */ ;/**  * Indicates if the total hit count for the query should be tracked. Defaults to {@code true}  */ public SearchRequestBuilder setTrackTotalHitsUpTo(int trackTotalHitsUpTo) {     sourceBuilder().trackTotalHitsUpTo(trackTotalHitsUpTo).     return this. }
true;public;1;4;/**  * Adds stored fields to load and return (note, it must be stored) as part of the search request.  * To disable the stored fields entirely (source and metadata fields) use {@code storedField("_none_")}.  */ ;/**  * Adds stored fields to load and return (note, it must be stored) as part of the search request.  * To disable the stored fields entirely (source and metadata fields) use {@code storedField("_none_")}.  */ public SearchRequestBuilder storedFields(String... fields) {     sourceBuilder().storedFields(Arrays.asList(fields)).     return this. }
true;public;1;4;/**  * Adds an aggregation to the search operation.  */ ;/**  * Adds an aggregation to the search operation.  */ public SearchRequestBuilder addAggregation(AggregationBuilder aggregation) {     sourceBuilder().aggregation(aggregation).     return this. }
true;public;1;4;/**  * Adds an aggregation to the search operation.  */ ;/**  * Adds an aggregation to the search operation.  */ public SearchRequestBuilder addAggregation(PipelineAggregationBuilder aggregation) {     sourceBuilder().aggregation(aggregation).     return this. }
false;public;1;4;;public SearchRequestBuilder highlighter(HighlightBuilder highlightBuilder) {     sourceBuilder().highlighter(highlightBuilder).     return this. }
true;public;1;4;/**  * Delegates to {@link SearchSourceBuilder#suggest(SuggestBuilder)}  */ ;/**  * Delegates to {@link SearchSourceBuilder#suggest(SuggestBuilder)}  */ public SearchRequestBuilder suggest(SuggestBuilder suggestBuilder) {     sourceBuilder().suggest(suggestBuilder).     return this. }
true;public;1;4;/**  * Clears all rescorers on the builder and sets the first one.  To use multiple rescore windows use  * {@link #addRescorer(org.elasticsearch.search.rescore.RescorerBuilder, int)}.  *  * @param rescorer rescorer configuration  * @return this for chaining  */ ;/**  * Clears all rescorers on the builder and sets the first one.  To use multiple rescore windows use  * {@link #addRescorer(org.elasticsearch.search.rescore.RescorerBuilder, int)}.  *  * @param rescorer rescorer configuration  * @return this for chaining  */ public SearchRequestBuilder setRescorer(RescorerBuilder<?> rescorer) {     sourceBuilder().clearRescorers().     return addRescorer(rescorer). }
true;public;2;4;/**  * Clears all rescorers on the builder and sets the first one.  To use multiple rescore windows use  * {@link #addRescorer(org.elasticsearch.search.rescore.RescorerBuilder, int)}.  *  * @param rescorer rescorer configuration  * @param window   rescore window  * @return this for chaining  */ ;/**  * Clears all rescorers on the builder and sets the first one.  To use multiple rescore windows use  * {@link #addRescorer(org.elasticsearch.search.rescore.RescorerBuilder, int)}.  *  * @param rescorer rescorer configuration  * @param window   rescore window  * @return this for chaining  */ public SearchRequestBuilder setRescorer(RescorerBuilder rescorer, int window) {     sourceBuilder().clearRescorers().     return addRescorer(rescorer.windowSize(window)). }
true;public;1;4;/**  * Adds a new rescorer.  *  * @param rescorer rescorer configuration  * @return this for chaining  */ ;/**  * Adds a new rescorer.  *  * @param rescorer rescorer configuration  * @return this for chaining  */ public SearchRequestBuilder addRescorer(RescorerBuilder<?> rescorer) {     sourceBuilder().addRescorer(rescorer).     return this. }
true;public;2;4;/**  * Adds a new rescorer.  *  * @param rescorer rescorer configuration  * @param window   rescore window  * @return this for chaining  */ ;/**  * Adds a new rescorer.  *  * @param rescorer rescorer configuration  * @param window   rescore window  * @return this for chaining  */ public SearchRequestBuilder addRescorer(RescorerBuilder<?> rescorer, int window) {     sourceBuilder().addRescorer(rescorer.windowSize(window)).     return this. }
true;public;0;4;/**  * Clears all rescorers from the builder.  *  * @return this for chaining  */ ;/**  * Clears all rescorers from the builder.  *  * @return this for chaining  */ public SearchRequestBuilder clearRescorers() {     sourceBuilder().clearRescorers().     return this. }
true;public;1;4;/**  * Sets the source of the request as a SearchSourceBuilder.  */ ;/**  * Sets the source of the request as a SearchSourceBuilder.  */ public SearchRequestBuilder setSource(SearchSourceBuilder source) {     request.source(source).     return this. }
true;public;1;4;/**  * Sets if this request should use the request cache or not, assuming that it can (for  * example, if "now" is used, it will never be cached). By default (not set, or null,  * will default to the index level setting if request cache is enabled or not).  */ ;/**  * Sets if this request should use the request cache or not, assuming that it can (for  * example, if "now" is used, it will never be cached). By default (not set, or null,  * will default to the index level setting if request cache is enabled or not).  */ public SearchRequestBuilder setRequestCache(Boolean requestCache) {     request.requestCache(requestCache).     return this. }
true;public;1;4;/**  * Sets if this request should allow partial results.  (If method is not called,  * will default to the cluster level setting).  */ ;/**  * Sets if this request should allow partial results.  (If method is not called,  * will default to the cluster level setting).  */ public SearchRequestBuilder setAllowPartialSearchResults(boolean allowPartialSearchResults) {     request.allowPartialSearchResults(allowPartialSearchResults).     return this. }
true;public;1;4;/**  * Should the query be profiled. Defaults to <code>false</code>  */ ;/**  * Should the query be profiled. Defaults to <code>false</code>  */ public SearchRequestBuilder setProfile(boolean profile) {     sourceBuilder().profile(profile).     return this. }
false;public;1;4;;public SearchRequestBuilder setCollapse(CollapseBuilder collapse) {     sourceBuilder().collapse(collapse).     return this. }
false;public;0;7;;@Override public String toString() {     if (request.source() != null) {         return request.source().toString().     }     return new SearchSourceBuilder().toString(). }
false;private;0;6;;private SearchSourceBuilder sourceBuilder() {     if (request.source() == null) {         request.source(new SearchSourceBuilder()).     }     return request.source(). }
true;public;1;4;/**  * Sets the number of shard results that should be reduced at once on the coordinating node. This value should be used as a protection  * mechanism to reduce the memory overhead per search request if the potential number of shards in the request can be large.  */ ;/**  * Sets the number of shard results that should be reduced at once on the coordinating node. This value should be used as a protection  * mechanism to reduce the memory overhead per search request if the potential number of shards in the request can be large.  */ public SearchRequestBuilder setBatchedReduceSize(int batchedReduceSize) {     this.request.setBatchedReduceSize(batchedReduceSize).     return this. }
true;public;1;4;/**  * Sets the number of shard requests that should be executed concurrently on a single node. This value should be used as a  * protection mechanism to reduce the number of shard requests fired per high level search request. Searches that hit the entire  * cluster can be throttled with this number to reduce the cluster load. The default is {@code 5}.  */ ;/**  * Sets the number of shard requests that should be executed concurrently on a single node. This value should be used as a  * protection mechanism to reduce the number of shard requests fired per high level search request. Searches that hit the entire  * cluster can be throttled with this number to reduce the cluster load. The default is {@code 5}.  */ public SearchRequestBuilder setMaxConcurrentShardRequests(int maxConcurrentShardRequests) {     this.request.setMaxConcurrentShardRequests(maxConcurrentShardRequests).     return this. }
true;public;1;4;/**  * Sets a threshold that enforces a pre-filter roundtrip to pre-filter search shards based on query rewriting if the number of shards  * the search request expands to exceeds the threshold. This filter roundtrip can limit the number of shards significantly if for  * instance a shard can not match any documents based on it's rewrite method ie. if date filters are mandatory to match but the shard  * bounds and the query are disjoint. The default is {@code 128}  */ ;/**  * Sets a threshold that enforces a pre-filter roundtrip to pre-filter search shards based on query rewriting if the number of shards  * the search request expands to exceeds the threshold. This filter roundtrip can limit the number of shards significantly if for  * instance a shard can not match any documents based on it's rewrite method ie. if date filters are mandatory to match but the shard  * bounds and the query are disjoint. The default is {@code 128}  */ public SearchRequestBuilder setPreFilterShardSize(int preFilterShardSize) {     this.request.setPreFilterShardSize(preFilterShardSize).     return this. }
