commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;5;;@Override protected String executor() {     // very lightweight operation in memory, no need to fork to a thread     return ThreadPool.Names.SAME. }
false;protected;2;8;;@Override protected ClusterBlockException checkBlock(ClusterStateRequest request, ClusterState state) {     // return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA).     return null. }
false;protected;0;4;;@Override protected ClusterStateResponse newResponse() {     return new ClusterStateResponse(). }
false;public;1;8;;@Override public void onNewClusterState(ClusterState state) {     try {         buildResponse(request, state, listener).     } catch (Exception e) {         listener.onFailure(e).     } }
false;public;0;4;;@Override public void onClusterServiceClose() {     listener.onFailure(new NodeClosedException(clusterService.localNode())). }
false;public;1;8;;@Override public void onTimeout(TimeValue timeout) {     try {         listener.onResponse(new ClusterStateResponse(clusterState.getClusterName(), null, 0L, true)).     } catch (Exception e) {         listener.onFailure(e).     } }
false;protected;3;44;;@Override protected void masterOperation(final ClusterStateRequest request, final ClusterState state, final ActionListener<ClusterStateResponse> listener) throws IOException {     if (request.waitForMetaDataVersion() != null) {         final Predicate<ClusterState> metadataVersionPredicate = clusterState -> {             return clusterState.metaData().version() >= request.waitForMetaDataVersion().         }.         final ClusterStateObserver observer = new ClusterStateObserver(clusterService, request.waitForTimeout(), logger, threadPool.getThreadContext()).         final ClusterState clusterState = observer.setAndGetObservedState().         if (metadataVersionPredicate.test(clusterState)) {             buildResponse(request, clusterState, listener).         } else {             observer.waitForNextChange(new ClusterStateObserver.Listener() {                  @Override                 public void onNewClusterState(ClusterState state) {                     try {                         buildResponse(request, state, listener).                     } catch (Exception e) {                         listener.onFailure(e).                     }                 }                  @Override                 public void onClusterServiceClose() {                     listener.onFailure(new NodeClosedException(clusterService.localNode())).                 }                  @Override                 public void onTimeout(TimeValue timeout) {                     try {                         listener.onResponse(new ClusterStateResponse(clusterState.getClusterName(), null, 0L, true)).                     } catch (Exception e) {                         listener.onFailure(e).                     }                 }             }, metadataVersionPredicate).         }     } else {         ClusterState currentState = clusterService.state().         buildResponse(request, currentState, listener).     } }
false;private;3;67;;private void buildResponse(final ClusterStateRequest request, final ClusterState currentState, final ActionListener<ClusterStateResponse> listener) throws IOException {     logger.trace("Serving cluster state request using version {}", currentState.version()).     ClusterState.Builder builder = ClusterState.builder(currentState.getClusterName()).     builder.version(currentState.version()).     builder.stateUUID(currentState.stateUUID()).     builder.minimumMasterNodesOnPublishingMaster(currentState.getMinimumMasterNodesOnPublishingMaster()).     if (request.nodes()) {         builder.nodes(currentState.nodes()).     }     if (request.routingTable()) {         if (request.indices().length > 0) {             RoutingTable.Builder routingTableBuilder = RoutingTable.builder().             String[] indices = indexNameExpressionResolver.concreteIndexNames(currentState, request).             for (String filteredIndex : indices) {                 if (currentState.routingTable().getIndicesRouting().containsKey(filteredIndex)) {                     routingTableBuilder.add(currentState.routingTable().getIndicesRouting().get(filteredIndex)).                 }             }             builder.routingTable(routingTableBuilder.build()).         } else {             builder.routingTable(currentState.routingTable()).         }     }     if (request.blocks()) {         builder.blocks(currentState.blocks()).     }     MetaData.Builder mdBuilder = MetaData.builder().     mdBuilder.clusterUUID(currentState.metaData().clusterUUID()).     mdBuilder.coordinationMetaData(currentState.coordinationMetaData()).     if (request.metaData()) {         if (request.indices().length > 0) {             mdBuilder.version(currentState.metaData().version()).             String[] indices = indexNameExpressionResolver.concreteIndexNames(currentState, request).             for (String filteredIndex : indices) {                 IndexMetaData indexMetaData = currentState.metaData().index(filteredIndex).                 if (indexMetaData != null) {                     mdBuilder.put(indexMetaData, false).                 }             }         } else {             mdBuilder = MetaData.builder(currentState.metaData()).         }         // filter out metadata that shouldn't be returned by the API         for (ObjectObjectCursor<String, Custom> custom : currentState.metaData().customs()) {             if (custom.value.context().contains(MetaData.XContentContext.API) == false) {                 mdBuilder.removeCustom(custom.key).             }         }     }     builder.metaData(mdBuilder).     if (request.customs()) {         for (ObjectObjectCursor<String, ClusterState.Custom> custom : currentState.customs()) {             if (custom.value.isPrivate() == false) {                 builder.putCustom(custom.key, custom.value).             }         }     }     listener.onResponse(new ClusterStateResponse(currentState.getClusterName(), builder.build(), serializeFullClusterState(currentState, Version.CURRENT).length(), false)). }
