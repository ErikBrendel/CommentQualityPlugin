commented;modifiers;parameterAmount;loc;comment;code
true;protected,final;0;10;/**  * {@inheritDoc}  * <p>  * This invokes {@link #doRunInLifecycle()} <em>only</em> if the {@link #lifecycle} is not stopped or closed. Otherwise it exits  * immediately.  */ ;/**  * {@inheritDoc}  * <p>  * This invokes {@link #doRunInLifecycle()} <em>only</em> if the {@link #lifecycle} is not stopped or closed. Otherwise it exits  * immediately.  */ @Override protected final void doRun() throws Exception {     // prevent execution if the service is stopped     if (lifecycle.stoppedOrClosed()) {         logger.trace("lifecycle is stopping. exiting").         return.     }     doRunInLifecycle(). }
true;protected,abstract;0;1;/**  * Perform runnable logic, but only if the {@link #lifecycle} is <em>not</em> stopped or closed.  *  * @throws InterruptedException if the run method throws an {@link InterruptedException}  */ ;/**  * Perform runnable logic, but only if the {@link #lifecycle} is <em>not</em> stopped or closed.  *  * @throws InterruptedException if the run method throws an {@link InterruptedException}  */ protected abstract void doRunInLifecycle() throws Exception.
true;public,final;0;6;/**  * {@inheritDoc}  * <p>  * This overrides the default behavior of {@code onAfter} to add the caveat that it only runs if the {@link #lifecycle} is <em>not</em>  * stopped or closed.  * <p>  * Note: this does not guarantee that it won't be stopped concurrently as it invokes {@link #onAfterInLifecycle()},  * but it's a solid attempt at preventing it. For those that use this for rescheduling purposes, the next invocation would be  * effectively cancelled immediately if that's the case.  *  * @see #onAfterInLifecycle()  */ ;/**  * {@inheritDoc}  * <p>  * This overrides the default behavior of {@code onAfter} to add the caveat that it only runs if the {@link #lifecycle} is <em>not</em>  * stopped or closed.  * <p>  * Note: this does not guarantee that it won't be stopped concurrently as it invokes {@link #onAfterInLifecycle()},  * but it's a solid attempt at preventing it. For those that use this for rescheduling purposes, the next invocation would be  * effectively cancelled immediately if that's the case.  *  * @see #onAfterInLifecycle()  */ @Override public final void onAfter() {     if (lifecycle.stoppedOrClosed() == false) {         onAfterInLifecycle().     } }
true;protected;0;3;/**  * This method is invoked in the finally block of the run method, but it is only executed if the {@link #lifecycle} is <em>not</em>  * stopped or closed.  * <p>  * This method is most useful for rescheduling the next iteration of the current runnable.  */ ;/**  * This method is invoked in the finally block of the run method, but it is only executed if the {@link #lifecycle} is <em>not</em>  * stopped or closed.  * <p>  * This method is most useful for rescheduling the next iteration of the current runnable.  */ protected void onAfterInLifecycle() { // nothing by default }
