commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * @return whether to wait for the currently excluded nodes to be removed from the cluster before removing their exclusions.  * True by default.  */ ;/**  * @return whether to wait for the currently excluded nodes to be removed from the cluster before removing their exclusions.  * True by default.  */ public boolean getWaitForRemoval() {     return waitForRemoval. }
true;public;1;3;/**  * @param waitForRemoval whether to wait for the currently excluded nodes to be removed from the cluster before removing their  *                       exclusions. True by default.  */ ;/**  * @param waitForRemoval whether to wait for the currently excluded nodes to be removed from the cluster before removing their  *                       exclusions. True by default.  */ public void setWaitForRemoval(boolean waitForRemoval) {     this.waitForRemoval = waitForRemoval. }
true;public;1;3;/**  * @param timeout how long to wait for the excluded nodes to be removed if {@link ClearVotingConfigExclusionsRequest#waitForRemoval} is  *                true. Defaults to 30 seconds.  */ ;/**  * @param timeout how long to wait for the excluded nodes to be removed if {@link ClearVotingConfigExclusionsRequest#waitForRemoval} is  *                true. Defaults to 30 seconds.  */ public void setTimeout(TimeValue timeout) {     this.timeout = timeout. }
true;public;0;3;/**  * @return how long to wait for the excluded nodes to be removed if {@link ClearVotingConfigExclusionsRequest#waitForRemoval} is  * true. Defaults to 30 seconds.  */ ;/**  * @return how long to wait for the excluded nodes to be removed if {@link ClearVotingConfigExclusionsRequest#waitForRemoval} is  * true. Defaults to 30 seconds.  */ public TimeValue getTimeout() {     return timeout. }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;1;4;;@Override public void readFrom(StreamInput in) throws IOException {     throw new UnsupportedOperationException("usage of Streamable is to be replaced by Writeable"). }
false;public;1;6;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeBoolean(waitForRemoval).     out.writeTimeValue(timeout). }
false;public;0;7;;@Override public String toString() {     return "ClearVotingConfigExclusionsRequest{" + ", waitForRemoval=" + waitForRemoval + ", timeout=" + timeout + '}'. }
