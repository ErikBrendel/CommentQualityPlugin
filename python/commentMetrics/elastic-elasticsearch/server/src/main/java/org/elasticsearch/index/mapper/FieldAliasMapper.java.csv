commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String name() {     return name. }
false;public;0;4;;@Override public String typeName() {     return CONTENT_TYPE. }
false;public;0;3;;public String path() {     return path. }
false;public;1;8;;@Override public Mapper merge(Mapper mergeWith) {     if (!(mergeWith instanceof FieldAliasMapper)) {         throw new IllegalArgumentException("Cannot merge a field alias mapping [" + name() + "] with a mapping that is not for a field alias.").     }     return mergeWith. }
false;public;1;4;;@Override public Mapper updateFieldType(Map<String, MappedFieldType> fullNameToFieldType) {     return this. }
false;public;0;4;;@Override public Iterator<Mapper> iterator() {     return Collections.emptyIterator(). }
false;public;2;7;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     return builder.startObject(simpleName()).field("type", CONTENT_TYPE).field(Names.PATH, path).endObject(). }
false;public;3;11;;@Override public Mapper.Builder parse(String name, Map<String, Object> node, ParserContext parserContext) throws MapperParsingException {     FieldAliasMapper.Builder builder = new FieldAliasMapper.Builder(name).     Object pathField = node.remove(Names.PATH).     String path = XContentMapValues.nodeStringValue(pathField, null).     if (path == null) {         throw new MapperParsingException("The [path] property must be specified for field [" + name + "].").     }     return builder.path(path). }
false;public;0;3;;public String name() {     return this.name. }
false;public;1;4;;public Builder path(String path) {     this.path = path.     return this. }
false;public;1;4;;public FieldAliasMapper build(BuilderContext context) {     String fullName = context.path().pathAsText(name).     return new FieldAliasMapper(name, fullName, path). }
