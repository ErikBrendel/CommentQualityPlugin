commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "cluster_reroute_action". }
false;public;2;14;;@Override public RestChannelConsumer prepareRequest(final RestRequest request, final NodeClient client) throws IOException {     ClusterRerouteRequest clusterRerouteRequest = createRequest(request).     settingsFilter.addFilterSettingParams(request).     if (clusterRerouteRequest.explain()) {         request.params().put("explain", Boolean.TRUE.toString()).     }     // by default, return everything but metadata     final String metric = request.param("metric").     if (metric == null) {         request.params().put("metric", DEFAULT_METRICS).     }     return channel -> client.admin().cluster().reroute(clusterRerouteRequest, new RestToXContentListener<>(channel)). }
false;protected;0;4;;@Override protected Set<String> responseParams() {     return RESPONSE_PARAMS. }
false;public,static;1;10;;public static ClusterRerouteRequest createRequest(RestRequest request) throws IOException {     ClusterRerouteRequest clusterRerouteRequest = Requests.clusterRerouteRequest().     clusterRerouteRequest.dryRun(request.paramAsBoolean("dry_run", clusterRerouteRequest.dryRun())).     clusterRerouteRequest.explain(request.paramAsBoolean("explain", clusterRerouteRequest.explain())).     clusterRerouteRequest.timeout(request.paramAsTime("timeout", clusterRerouteRequest.timeout())).     clusterRerouteRequest.setRetryFailed(request.paramAsBoolean("retry_failed", clusterRerouteRequest.isRetryFailed())).     clusterRerouteRequest.masterNodeTimeout(request.paramAsTime("master_timeout", clusterRerouteRequest.masterNodeTimeout())).     request.applyContentParser(parser -> PARSER.parse(parser, clusterRerouteRequest, null)).     return clusterRerouteRequest. }
