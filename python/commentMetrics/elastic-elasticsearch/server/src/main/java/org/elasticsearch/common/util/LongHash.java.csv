commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Return the key at <code>0 &lt.= index &lt.= capacity()</code>. The result is undefined if the slot is unused.  */ ;/**  * Return the key at <code>0 &lt.= index &lt.= capacity()</code>. The result is undefined if the slot is unused.  */ public long get(long id) {     return keys.get(id). }
true;public;1;9;/**  * Get the id associated with <code>key</code> or -1 if the key is not contained in the hash.  */ ;/**  * Get the id associated with <code>key</code> or -1 if the key is not contained in the hash.  */ public long find(long key) {     final long slot = slot(hash(key), mask).     for (long index = slot. . index = nextSlot(index, mask)) {         final long id = id(index).         if (id == -1 || keys.get(id) == key) {             return id.         }     } }
false;private;2;15;;private long set(long key, long id) {     assert size < maxSize.     final long slot = slot(hash(key), mask).     for (long index = slot. . index = nextSlot(index, mask)) {         final long curId = id(index).         if (curId == -1) {             // means unset             id(index, id).             append(id, key).             ++size.             return id.         } else if (keys.get(curId) == key) {             return -1 - curId.         }     } }
false;private;2;4;;private void append(long id, long key) {     keys = bigArrays.grow(keys, id + 1).     keys.set(id, key). }
false;private;2;11;;private void reset(long key, long id) {     final long slot = slot(hash(key), mask).     for (long index = slot. . index = nextSlot(index, mask)) {         final long curId = id(index).         if (curId == -1) {             // means unset             id(index, id).             append(id, key).             break.         }     } }
true;public;1;8;/**  * Try to add <code>key</code>. Return its newly allocated id if it wasn't in the hash table yet, or <code>-1-id</code>  * if it was already present in the hash table.  */ ;/**  * Try to add <code>key</code>. Return its newly allocated id if it wasn't in the hash table yet, or <code>-1-id</code>  * if it was already present in the hash table.  */ public long add(long key) {     if (size >= maxSize) {         assert size == maxSize.         grow().     }     assert size < maxSize.     return set(key, size). }
false;protected;1;7;;@Override protected void removeAndAdd(long index) {     final long id = id(index, -1).     assert id >= 0.     final long key = keys.set(id, 0).     reset(key, id). }
false;public;0;6;;@Override public void close() {     try (Releasable releasable = keys) {         super.close().     } }
