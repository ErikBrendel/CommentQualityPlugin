# id;timestamp;commentText;codeText;commentWords;codeWords
TypeParsers -> public static void parseTextField(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode,                                       Mapper.TypeParser.ParserContext parserContext);1524684173;Parse text field attributes. In addition to {@link #parseField common attributes}_this will parse analysis and term-vectors related settings.;public static void parseTextField(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode,_                                      Mapper.TypeParser.ParserContext parserContext) {_        parseField(builder, name, fieldNode, parserContext)__        parseAnalyzersAndTermVectors(builder, name, fieldNode, parserContext)__        for (Iterator<Map.Entry<String, Object>> iterator = fieldNode.entrySet().iterator()_ iterator.hasNext()_ ) {_            Map.Entry<String, Object> entry = iterator.next()__            final String propName = entry.getKey()__            final Object propNode = entry.getValue()__            if ("norms".equals(propName)) {_                parseNorms(builder, name, propNode, parserContext)__                iterator.remove()__            }_        }_    };parse,text,field,attributes,in,addition,to,link,parse,field,common,attributes,this,will,parse,analysis,and,term,vectors,related,settings;public,static,void,parse,text,field,field,mapper,builder,builder,string,name,map,string,object,field,node,mapper,type,parser,parser,context,parser,context,parse,field,builder,name,field,node,parser,context,parse,analyzers,and,term,vectors,builder,name,field,node,parser,context,for,iterator,map,entry,string,object,iterator,field,node,entry,set,iterator,iterator,has,next,map,entry,string,object,entry,iterator,next,final,string,prop,name,entry,get,key,final,object,prop,node,entry,get,value,if,norms,equals,prop,name,parse,norms,builder,name,prop,node,parser,context,iterator,remove
TypeParsers -> public static void parseTextField(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode,                                       Mapper.TypeParser.ParserContext parserContext);1532353780;Parse text field attributes. In addition to {@link #parseField common attributes}_this will parse analysis and term-vectors related settings.;public static void parseTextField(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode,_                                      Mapper.TypeParser.ParserContext parserContext) {_        parseField(builder, name, fieldNode, parserContext)__        parseAnalyzersAndTermVectors(builder, name, fieldNode, parserContext)__        for (Iterator<Map.Entry<String, Object>> iterator = fieldNode.entrySet().iterator()_ iterator.hasNext()_ ) {_            Map.Entry<String, Object> entry = iterator.next()__            final String propName = entry.getKey()__            final Object propNode = entry.getValue()__            if ("norms".equals(propName)) {_                parseNorms(builder, name, propNode, parserContext)__                iterator.remove()__            }_        }_    };parse,text,field,attributes,in,addition,to,link,parse,field,common,attributes,this,will,parse,analysis,and,term,vectors,related,settings;public,static,void,parse,text,field,field,mapper,builder,builder,string,name,map,string,object,field,node,mapper,type,parser,parser,context,parser,context,parse,field,builder,name,field,node,parser,context,parse,analyzers,and,term,vectors,builder,name,field,node,parser,context,for,iterator,map,entry,string,object,iterator,field,node,entry,set,iterator,iterator,has,next,map,entry,string,object,entry,iterator,next,final,string,prop,name,entry,get,key,final,object,prop,node,entry,get,value,if,norms,equals,prop,name,parse,norms,builder,name,prop,node,parser,context,iterator,remove
TypeParsers -> public static void parseTextField(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode,                                       Mapper.TypeParser.ParserContext parserContext);1535046779;Parse text field attributes. In addition to {@link #parseField common attributes}_this will parse analysis and term-vectors related settings.;public static void parseTextField(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode,_                                      Mapper.TypeParser.ParserContext parserContext) {_        parseField(builder, name, fieldNode, parserContext)__        parseAnalyzersAndTermVectors(builder, name, fieldNode, parserContext)__        for (Iterator<Map.Entry<String, Object>> iterator = fieldNode.entrySet().iterator()_ iterator.hasNext()_ ) {_            Map.Entry<String, Object> entry = iterator.next()__            final String propName = entry.getKey()__            final Object propNode = entry.getValue()__            if ("norms".equals(propName)) {_                parseNorms(builder, name, propNode)__                iterator.remove()__            }_        }_    };parse,text,field,attributes,in,addition,to,link,parse,field,common,attributes,this,will,parse,analysis,and,term,vectors,related,settings;public,static,void,parse,text,field,field,mapper,builder,builder,string,name,map,string,object,field,node,mapper,type,parser,parser,context,parser,context,parse,field,builder,name,field,node,parser,context,parse,analyzers,and,term,vectors,builder,name,field,node,parser,context,for,iterator,map,entry,string,object,iterator,field,node,entry,set,iterator,iterator,has,next,map,entry,string,object,entry,iterator,next,final,string,prop,name,entry,get,key,final,object,prop,node,entry,get,value,if,norms,equals,prop,name,parse,norms,builder,name,prop,node,iterator,remove
TypeParsers -> public static void parseTextField(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode,                                       Mapper.TypeParser.ParserContext parserContext);1535383145;Parse text field attributes. In addition to {@link #parseField common attributes}_this will parse analysis and term-vectors related settings.;public static void parseTextField(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode,_                                      Mapper.TypeParser.ParserContext parserContext) {_        parseField(builder, name, fieldNode, parserContext)__        parseAnalyzersAndTermVectors(builder, name, fieldNode, parserContext)__        for (Iterator<Map.Entry<String, Object>> iterator = fieldNode.entrySet().iterator()_ iterator.hasNext()_ ) {_            Map.Entry<String, Object> entry = iterator.next()__            final String propName = entry.getKey()__            final Object propNode = entry.getValue()__            if ("norms".equals(propName)) {_                parseNorms(builder, name, propNode)__                iterator.remove()__            }_        }_    };parse,text,field,attributes,in,addition,to,link,parse,field,common,attributes,this,will,parse,analysis,and,term,vectors,related,settings;public,static,void,parse,text,field,field,mapper,builder,builder,string,name,map,string,object,field,node,mapper,type,parser,parser,context,parser,context,parse,field,builder,name,field,node,parser,context,parse,analyzers,and,term,vectors,builder,name,field,node,parser,context,for,iterator,map,entry,string,object,iterator,field,node,entry,set,iterator,iterator,has,next,map,entry,string,object,entry,iterator,next,final,string,prop,name,entry,get,key,final,object,prop,node,entry,get,value,if,norms,equals,prop,name,parse,norms,builder,name,prop,node,iterator,remove
TypeParsers -> public static void parseTextField(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode,                                       Mapper.TypeParser.ParserContext parserContext);1544458001;Parse text field attributes. In addition to {@link #parseField common attributes}_this will parse analysis and term-vectors related settings.;public static void parseTextField(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode,_                                      Mapper.TypeParser.ParserContext parserContext) {_        parseField(builder, name, fieldNode, parserContext)__        parseAnalyzersAndTermVectors(builder, name, fieldNode, parserContext)__        for (Iterator<Map.Entry<String, Object>> iterator = fieldNode.entrySet().iterator()_ iterator.hasNext()_ ) {_            Map.Entry<String, Object> entry = iterator.next()__            final String propName = entry.getKey()__            final Object propNode = entry.getValue()__            if ("norms".equals(propName)) {_                parseNorms(builder, name, propNode)__                iterator.remove()__            }_        }_    };parse,text,field,attributes,in,addition,to,link,parse,field,common,attributes,this,will,parse,analysis,and,term,vectors,related,settings;public,static,void,parse,text,field,field,mapper,builder,builder,string,name,map,string,object,field,node,mapper,type,parser,parser,context,parser,context,parse,field,builder,name,field,node,parser,context,parse,analyzers,and,term,vectors,builder,name,field,node,parser,context,for,iterator,map,entry,string,object,iterator,field,node,entry,set,iterator,iterator,has,next,map,entry,string,object,entry,iterator,next,final,string,prop,name,entry,get,key,final,object,prop,node,entry,get,value,if,norms,equals,prop,name,parse,norms,builder,name,prop,node,iterator,remove
TypeParsers -> public static void parseTextField(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode,                                       Mapper.TypeParser.ParserContext parserContext);1544600864;Parse text field attributes. In addition to {@link #parseField common attributes}_this will parse analysis and term-vectors related settings.;public static void parseTextField(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode,_                                      Mapper.TypeParser.ParserContext parserContext) {_        parseField(builder, name, fieldNode, parserContext)__        parseAnalyzersAndTermVectors(builder, name, fieldNode, parserContext)__        for (Iterator<Map.Entry<String, Object>> iterator = fieldNode.entrySet().iterator()_ iterator.hasNext()_ ) {_            Map.Entry<String, Object> entry = iterator.next()__            final String propName = entry.getKey()__            final Object propNode = entry.getValue()__            if ("norms".equals(propName)) {_                parseNorms(builder, name, propNode)__                iterator.remove()__            }_        }_    };parse,text,field,attributes,in,addition,to,link,parse,field,common,attributes,this,will,parse,analysis,and,term,vectors,related,settings;public,static,void,parse,text,field,field,mapper,builder,builder,string,name,map,string,object,field,node,mapper,type,parser,parser,context,parser,context,parse,field,builder,name,field,node,parser,context,parse,analyzers,and,term,vectors,builder,name,field,node,parser,context,for,iterator,map,entry,string,object,iterator,field,node,entry,set,iterator,iterator,has,next,map,entry,string,object,entry,iterator,next,final,string,prop,name,entry,get,key,final,object,prop,node,entry,get,value,if,norms,equals,prop,name,parse,norms,builder,name,prop,node,iterator,remove
TypeParsers -> public static void parseTextField(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode,                                       Mapper.TypeParser.ParserContext parserContext);1548236405;Parse text field attributes. In addition to {@link #parseField common attributes}_this will parse analysis and term-vectors related settings.;public static void parseTextField(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode,_                                      Mapper.TypeParser.ParserContext parserContext) {_        parseField(builder, name, fieldNode, parserContext)__        parseAnalyzersAndTermVectors(builder, name, fieldNode, parserContext)__        for (Iterator<Map.Entry<String, Object>> iterator = fieldNode.entrySet().iterator()_ iterator.hasNext()_ ) {_            Map.Entry<String, Object> entry = iterator.next()__            final String propName = entry.getKey()__            final Object propNode = entry.getValue()__            if ("norms".equals(propName)) {_                parseNorms(builder, name, propNode)__                iterator.remove()__            }_        }_    };parse,text,field,attributes,in,addition,to,link,parse,field,common,attributes,this,will,parse,analysis,and,term,vectors,related,settings;public,static,void,parse,text,field,field,mapper,builder,builder,string,name,map,string,object,field,node,mapper,type,parser,parser,context,parser,context,parse,field,builder,name,field,node,parser,context,parse,analyzers,and,term,vectors,builder,name,field,node,parser,context,for,iterator,map,entry,string,object,iterator,field,node,entry,set,iterator,iterator,has,next,map,entry,string,object,entry,iterator,next,final,string,prop,name,entry,get,key,final,object,prop,node,entry,get,value,if,norms,equals,prop,name,parse,norms,builder,name,prop,node,iterator,remove
TypeParsers -> public static void parseField(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode,                                   Mapper.TypeParser.ParserContext parserContext);1524684173;Parse common field attributes such as {@code doc_values} or {@code store}.;public static void parseField(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode,_                                  Mapper.TypeParser.ParserContext parserContext) {_        for (Iterator<Map.Entry<String, Object>> iterator = fieldNode.entrySet().iterator()_ iterator.hasNext()_) {_            Map.Entry<String, Object> entry = iterator.next()__            final String propName = entry.getKey()__            final Object propNode = entry.getValue()__            if (false == propName.equals("null_value") && propNode == null) {_                _                throw new MapperParsingException("[" + propName + "] must not have a [null] value")__            }_            if (propName.equals("store")) {_                builder.store(XContentMapValues.nodeBooleanValue(propNode, name + ".store"))__                iterator.remove()__            } else if (propName.equals("index")) {_                builder.index(XContentMapValues.nodeBooleanValue(propNode, name + ".index"))__                iterator.remove()__            } else if (propName.equals(DOC_VALUES)) {_                builder.docValues(XContentMapValues.nodeBooleanValue(propNode, name + "." + DOC_VALUES))__                iterator.remove()__            } else if (propName.equals("boost")) {_                builder.boost(nodeFloatValue(propNode))__                iterator.remove()__            } else if (propName.equals("index_options")) {_                builder.indexOptions(nodeIndexOptionValue(propNode))__                iterator.remove()__            } else if (propName.equals("similarity")) {_                SimilarityProvider similarityProvider = resolveSimilarity(parserContext, name, propNode.toString())__                builder.similarity(similarityProvider)__                iterator.remove()__            } else if (parseMultiField(builder, name, parserContext, propName, propNode)) {_                iterator.remove()__            } else if (propName.equals("copy_to")) {_                if (parserContext.isWithinMultiField()) {_                    throw new MapperParsingException("copy_to in multi fields is not allowed. Found the copy_to in field [" + name + "] " +_                        "which is within a multi field.")__                } else {_                    parseCopyFields(propNode, builder)__                }_                iterator.remove()__            }_        }_    };parse,common,field,attributes,such,as,code,or,code,store;public,static,void,parse,field,field,mapper,builder,builder,string,name,map,string,object,field,node,mapper,type,parser,parser,context,parser,context,for,iterator,map,entry,string,object,iterator,field,node,entry,set,iterator,iterator,has,next,map,entry,string,object,entry,iterator,next,final,string,prop,name,entry,get,key,final,object,prop,node,entry,get,value,if,false,prop,name,equals,prop,node,null,throw,new,mapper,parsing,exception,prop,name,must,not,have,a,null,value,if,prop,name,equals,store,builder,store,xcontent,map,values,node,boolean,value,prop,node,name,store,iterator,remove,else,if,prop,name,equals,index,builder,index,xcontent,map,values,node,boolean,value,prop,node,name,index,iterator,remove,else,if,prop,name,equals,builder,doc,values,xcontent,map,values,node,boolean,value,prop,node,name,iterator,remove,else,if,prop,name,equals,boost,builder,boost,node,float,value,prop,node,iterator,remove,else,if,prop,name,equals,builder,index,options,node,index,option,value,prop,node,iterator,remove,else,if,prop,name,equals,similarity,similarity,provider,similarity,provider,resolve,similarity,parser,context,name,prop,node,to,string,builder,similarity,similarity,provider,iterator,remove,else,if,parse,multi,field,builder,name,parser,context,prop,name,prop,node,iterator,remove,else,if,prop,name,equals,if,parser,context,is,within,multi,field,throw,new,mapper,parsing,exception,in,multi,fields,is,not,allowed,found,the,in,field,name,which,is,within,a,multi,field,else,parse,copy,fields,prop,node,builder,iterator,remove
TypeParsers -> public static void parseField(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode,                                   Mapper.TypeParser.ParserContext parserContext);1532353780;Parse common field attributes such as {@code doc_values} or {@code store}.;public static void parseField(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode,_                                  Mapper.TypeParser.ParserContext parserContext) {_        for (Iterator<Map.Entry<String, Object>> iterator = fieldNode.entrySet().iterator()_ iterator.hasNext()_) {_            Map.Entry<String, Object> entry = iterator.next()__            final String propName = entry.getKey()__            final Object propNode = entry.getValue()__            if (false == propName.equals("null_value") && propNode == null) {_                _                throw new MapperParsingException("[" + propName + "] must not have a [null] value")__            }_            if (propName.equals("store")) {_                builder.store(XContentMapValues.nodeBooleanValue(propNode, name + ".store"))__                iterator.remove()__            } else if (propName.equals("index")) {_                builder.index(XContentMapValues.nodeBooleanValue(propNode, name + ".index"))__                iterator.remove()__            } else if (propName.equals(DOC_VALUES)) {_                builder.docValues(XContentMapValues.nodeBooleanValue(propNode, name + "." + DOC_VALUES))__                iterator.remove()__            } else if (propName.equals("boost")) {_                builder.boost(nodeFloatValue(propNode))__                iterator.remove()__            } else if (propName.equals("index_options")) {_                builder.indexOptions(nodeIndexOptionValue(propNode))__                iterator.remove()__            } else if (propName.equals("similarity")) {_                SimilarityProvider similarityProvider = resolveSimilarity(parserContext, name, propNode.toString())__                builder.similarity(similarityProvider)__                iterator.remove()__            } else if (parseMultiField(builder, name, parserContext, propName, propNode)) {_                iterator.remove()__            } else if (propName.equals("copy_to")) {_                if (parserContext.isWithinMultiField()) {_                    throw new MapperParsingException("copy_to in multi fields is not allowed. Found the copy_to in field [" + name + "] " +_                        "which is within a multi field.")__                } else {_                    parseCopyFields(propNode, builder)__                }_                iterator.remove()__            }_        }_    };parse,common,field,attributes,such,as,code,or,code,store;public,static,void,parse,field,field,mapper,builder,builder,string,name,map,string,object,field,node,mapper,type,parser,parser,context,parser,context,for,iterator,map,entry,string,object,iterator,field,node,entry,set,iterator,iterator,has,next,map,entry,string,object,entry,iterator,next,final,string,prop,name,entry,get,key,final,object,prop,node,entry,get,value,if,false,prop,name,equals,prop,node,null,throw,new,mapper,parsing,exception,prop,name,must,not,have,a,null,value,if,prop,name,equals,store,builder,store,xcontent,map,values,node,boolean,value,prop,node,name,store,iterator,remove,else,if,prop,name,equals,index,builder,index,xcontent,map,values,node,boolean,value,prop,node,name,index,iterator,remove,else,if,prop,name,equals,builder,doc,values,xcontent,map,values,node,boolean,value,prop,node,name,iterator,remove,else,if,prop,name,equals,boost,builder,boost,node,float,value,prop,node,iterator,remove,else,if,prop,name,equals,builder,index,options,node,index,option,value,prop,node,iterator,remove,else,if,prop,name,equals,similarity,similarity,provider,similarity,provider,resolve,similarity,parser,context,name,prop,node,to,string,builder,similarity,similarity,provider,iterator,remove,else,if,parse,multi,field,builder,name,parser,context,prop,name,prop,node,iterator,remove,else,if,prop,name,equals,if,parser,context,is,within,multi,field,throw,new,mapper,parsing,exception,in,multi,fields,is,not,allowed,found,the,in,field,name,which,is,within,a,multi,field,else,parse,copy,fields,prop,node,builder,iterator,remove
TypeParsers -> public static void parseField(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode,                                   Mapper.TypeParser.ParserContext parserContext);1535046779;Parse common field attributes such as {@code doc_values} or {@code store}.;public static void parseField(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode,_                                  Mapper.TypeParser.ParserContext parserContext) {_        for (Iterator<Map.Entry<String, Object>> iterator = fieldNode.entrySet().iterator()_ iterator.hasNext()_) {_            Map.Entry<String, Object> entry = iterator.next()__            final String propName = entry.getKey()__            final Object propNode = entry.getValue()__            if (false == propName.equals("null_value") && propNode == null) {_                _                throw new MapperParsingException("[" + propName + "] must not have a [null] value")__            }_            if (propName.equals("store")) {_                builder.store(XContentMapValues.nodeBooleanValue(propNode, name + ".store"))__                iterator.remove()__            } else if (propName.equals("index")) {_                builder.index(XContentMapValues.nodeBooleanValue(propNode, name + ".index"))__                iterator.remove()__            } else if (propName.equals(DOC_VALUES)) {_                builder.docValues(XContentMapValues.nodeBooleanValue(propNode, name + "." + DOC_VALUES))__                iterator.remove()__            } else if (propName.equals("boost")) {_                builder.boost(nodeFloatValue(propNode))__                iterator.remove()__            } else if (propName.equals("index_options")) {_                builder.indexOptions(nodeIndexOptionValue(propNode))__                iterator.remove()__            } else if (propName.equals("similarity")) {_                SimilarityProvider similarityProvider = resolveSimilarity(parserContext, name, propNode.toString())__                builder.similarity(similarityProvider)__                iterator.remove()__            } else if (parseMultiField(builder, name, parserContext, propName, propNode)) {_                iterator.remove()__            } else if (propName.equals("copy_to")) {_                if (parserContext.isWithinMultiField()) {_                    throw new MapperParsingException("copy_to in multi fields is not allowed. Found the copy_to in field [" + name + "] " +_                        "which is within a multi field.")__                } else {_                    parseCopyFields(propNode, builder)__                }_                iterator.remove()__            }_        }_    };parse,common,field,attributes,such,as,code,or,code,store;public,static,void,parse,field,field,mapper,builder,builder,string,name,map,string,object,field,node,mapper,type,parser,parser,context,parser,context,for,iterator,map,entry,string,object,iterator,field,node,entry,set,iterator,iterator,has,next,map,entry,string,object,entry,iterator,next,final,string,prop,name,entry,get,key,final,object,prop,node,entry,get,value,if,false,prop,name,equals,prop,node,null,throw,new,mapper,parsing,exception,prop,name,must,not,have,a,null,value,if,prop,name,equals,store,builder,store,xcontent,map,values,node,boolean,value,prop,node,name,store,iterator,remove,else,if,prop,name,equals,index,builder,index,xcontent,map,values,node,boolean,value,prop,node,name,index,iterator,remove,else,if,prop,name,equals,builder,doc,values,xcontent,map,values,node,boolean,value,prop,node,name,iterator,remove,else,if,prop,name,equals,boost,builder,boost,node,float,value,prop,node,iterator,remove,else,if,prop,name,equals,builder,index,options,node,index,option,value,prop,node,iterator,remove,else,if,prop,name,equals,similarity,similarity,provider,similarity,provider,resolve,similarity,parser,context,name,prop,node,to,string,builder,similarity,similarity,provider,iterator,remove,else,if,parse,multi,field,builder,name,parser,context,prop,name,prop,node,iterator,remove,else,if,prop,name,equals,if,parser,context,is,within,multi,field,throw,new,mapper,parsing,exception,in,multi,fields,is,not,allowed,found,the,in,field,name,which,is,within,a,multi,field,else,parse,copy,fields,prop,node,builder,iterator,remove
TypeParsers -> public static void parseField(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode,                                   Mapper.TypeParser.ParserContext parserContext);1535383145;Parse common field attributes such as {@code doc_values} or {@code store}.;public static void parseField(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode,_                                  Mapper.TypeParser.ParserContext parserContext) {_        for (Iterator<Map.Entry<String, Object>> iterator = fieldNode.entrySet().iterator()_ iterator.hasNext()_) {_            Map.Entry<String, Object> entry = iterator.next()__            final String propName = entry.getKey()__            final Object propNode = entry.getValue()__            if (false == propName.equals("null_value") && propNode == null) {_                _                throw new MapperParsingException("[" + propName + "] must not have a [null] value")__            }_            if (propName.equals("store")) {_                builder.store(XContentMapValues.nodeBooleanValue(propNode, name + ".store"))__                iterator.remove()__            } else if (propName.equals("index")) {_                builder.index(XContentMapValues.nodeBooleanValue(propNode, name + ".index"))__                iterator.remove()__            } else if (propName.equals(DOC_VALUES)) {_                builder.docValues(XContentMapValues.nodeBooleanValue(propNode, name + "." + DOC_VALUES))__                iterator.remove()__            } else if (propName.equals("boost")) {_                builder.boost(nodeFloatValue(propNode))__                iterator.remove()__            } else if (propName.equals("index_options")) {_                builder.indexOptions(nodeIndexOptionValue(propNode))__                iterator.remove()__            } else if (propName.equals("similarity")) {_                SimilarityProvider similarityProvider = resolveSimilarity(parserContext, name, propNode.toString())__                builder.similarity(similarityProvider)__                iterator.remove()__            } else if (parseMultiField(builder, name, parserContext, propName, propNode)) {_                iterator.remove()__            } else if (propName.equals("copy_to")) {_                if (parserContext.isWithinMultiField()) {_                    throw new MapperParsingException("copy_to in multi fields is not allowed. Found the copy_to in field [" + name + "] " +_                        "which is within a multi field.")__                } else {_                    parseCopyFields(propNode, builder)__                }_                iterator.remove()__            }_        }_    };parse,common,field,attributes,such,as,code,or,code,store;public,static,void,parse,field,field,mapper,builder,builder,string,name,map,string,object,field,node,mapper,type,parser,parser,context,parser,context,for,iterator,map,entry,string,object,iterator,field,node,entry,set,iterator,iterator,has,next,map,entry,string,object,entry,iterator,next,final,string,prop,name,entry,get,key,final,object,prop,node,entry,get,value,if,false,prop,name,equals,prop,node,null,throw,new,mapper,parsing,exception,prop,name,must,not,have,a,null,value,if,prop,name,equals,store,builder,store,xcontent,map,values,node,boolean,value,prop,node,name,store,iterator,remove,else,if,prop,name,equals,index,builder,index,xcontent,map,values,node,boolean,value,prop,node,name,index,iterator,remove,else,if,prop,name,equals,builder,doc,values,xcontent,map,values,node,boolean,value,prop,node,name,iterator,remove,else,if,prop,name,equals,boost,builder,boost,node,float,value,prop,node,iterator,remove,else,if,prop,name,equals,builder,index,options,node,index,option,value,prop,node,iterator,remove,else,if,prop,name,equals,similarity,similarity,provider,similarity,provider,resolve,similarity,parser,context,name,prop,node,to,string,builder,similarity,similarity,provider,iterator,remove,else,if,parse,multi,field,builder,name,parser,context,prop,name,prop,node,iterator,remove,else,if,prop,name,equals,if,parser,context,is,within,multi,field,throw,new,mapper,parsing,exception,in,multi,fields,is,not,allowed,found,the,in,field,name,which,is,within,a,multi,field,else,parse,copy,fields,prop,node,builder,iterator,remove
TypeParsers -> public static void parseField(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode,                                   Mapper.TypeParser.ParserContext parserContext);1544458001;Parse common field attributes such as {@code doc_values} or {@code store}.;public static void parseField(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode,_                                  Mapper.TypeParser.ParserContext parserContext) {_        for (Iterator<Map.Entry<String, Object>> iterator = fieldNode.entrySet().iterator()_ iterator.hasNext()_) {_            Map.Entry<String, Object> entry = iterator.next()__            final String propName = entry.getKey()__            final Object propNode = entry.getValue()__            if (false == propName.equals("null_value") && propNode == null) {_                _                throw new MapperParsingException("[" + propName + "] must not have a [null] value")__            }_            if (propName.equals("store")) {_                builder.store(XContentMapValues.nodeBooleanValue(propNode, name + ".store"))__                iterator.remove()__            } else if (propName.equals("index")) {_                builder.index(XContentMapValues.nodeBooleanValue(propNode, name + ".index"))__                iterator.remove()__            } else if (propName.equals(DOC_VALUES)) {_                builder.docValues(XContentMapValues.nodeBooleanValue(propNode, name + "." + DOC_VALUES))__                iterator.remove()__            } else if (propName.equals("boost")) {_                builder.boost(nodeFloatValue(propNode))__                iterator.remove()__            } else if (propName.equals("index_options")) {_                builder.indexOptions(nodeIndexOptionValue(propNode))__                iterator.remove()__            } else if (propName.equals("similarity")) {_                SimilarityProvider similarityProvider = resolveSimilarity(parserContext, name, propNode.toString())__                builder.similarity(similarityProvider)__                iterator.remove()__            } else if (parseMultiField(builder, name, parserContext, propName, propNode)) {_                iterator.remove()__            } else if (propName.equals("copy_to")) {_                if (parserContext.isWithinMultiField()) {_                    throw new MapperParsingException("copy_to in multi fields is not allowed. Found the copy_to in field [" + name + "] " +_                        "which is within a multi field.")__                } else {_                    parseCopyFields(propNode, builder)__                }_                iterator.remove()__            }_        }_    };parse,common,field,attributes,such,as,code,or,code,store;public,static,void,parse,field,field,mapper,builder,builder,string,name,map,string,object,field,node,mapper,type,parser,parser,context,parser,context,for,iterator,map,entry,string,object,iterator,field,node,entry,set,iterator,iterator,has,next,map,entry,string,object,entry,iterator,next,final,string,prop,name,entry,get,key,final,object,prop,node,entry,get,value,if,false,prop,name,equals,prop,node,null,throw,new,mapper,parsing,exception,prop,name,must,not,have,a,null,value,if,prop,name,equals,store,builder,store,xcontent,map,values,node,boolean,value,prop,node,name,store,iterator,remove,else,if,prop,name,equals,index,builder,index,xcontent,map,values,node,boolean,value,prop,node,name,index,iterator,remove,else,if,prop,name,equals,builder,doc,values,xcontent,map,values,node,boolean,value,prop,node,name,iterator,remove,else,if,prop,name,equals,boost,builder,boost,node,float,value,prop,node,iterator,remove,else,if,prop,name,equals,builder,index,options,node,index,option,value,prop,node,iterator,remove,else,if,prop,name,equals,similarity,similarity,provider,similarity,provider,resolve,similarity,parser,context,name,prop,node,to,string,builder,similarity,similarity,provider,iterator,remove,else,if,parse,multi,field,builder,name,parser,context,prop,name,prop,node,iterator,remove,else,if,prop,name,equals,if,parser,context,is,within,multi,field,throw,new,mapper,parsing,exception,in,multi,fields,is,not,allowed,found,the,in,field,name,which,is,within,a,multi,field,else,parse,copy,fields,prop,node,builder,iterator,remove
TypeParsers -> public static void parseField(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode,                                   Mapper.TypeParser.ParserContext parserContext);1544600864;Parse common field attributes such as {@code doc_values} or {@code store}.;public static void parseField(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode,_                                  Mapper.TypeParser.ParserContext parserContext) {_        for (Iterator<Map.Entry<String, Object>> iterator = fieldNode.entrySet().iterator()_ iterator.hasNext()_) {_            Map.Entry<String, Object> entry = iterator.next()__            final String propName = entry.getKey()__            final Object propNode = entry.getValue()__            if (false == propName.equals("null_value") && propNode == null) {_                _                throw new MapperParsingException("[" + propName + "] must not have a [null] value")__            }_            if (propName.equals("store")) {_                builder.store(XContentMapValues.nodeBooleanValue(propNode, name + ".store"))__                iterator.remove()__            } else if (propName.equals("index")) {_                builder.index(XContentMapValues.nodeBooleanValue(propNode, name + ".index"))__                iterator.remove()__            } else if (propName.equals(DOC_VALUES)) {_                builder.docValues(XContentMapValues.nodeBooleanValue(propNode, name + "." + DOC_VALUES))__                iterator.remove()__            } else if (propName.equals("boost")) {_                builder.boost(nodeFloatValue(propNode))__                iterator.remove()__            } else if (propName.equals("index_options")) {_                builder.indexOptions(nodeIndexOptionValue(propNode))__                iterator.remove()__            } else if (propName.equals("similarity")) {_                SimilarityProvider similarityProvider = resolveSimilarity(parserContext, name, propNode.toString())__                builder.similarity(similarityProvider)__                iterator.remove()__            } else if (parseMultiField(builder, name, parserContext, propName, propNode)) {_                iterator.remove()__            } else if (propName.equals("copy_to")) {_                if (parserContext.isWithinMultiField()) {_                    throw new MapperParsingException("copy_to in multi fields is not allowed. Found the copy_to in field [" + name + "] " +_                        "which is within a multi field.")__                } else {_                    parseCopyFields(propNode, builder)__                }_                iterator.remove()__            }_        }_    };parse,common,field,attributes,such,as,code,or,code,store;public,static,void,parse,field,field,mapper,builder,builder,string,name,map,string,object,field,node,mapper,type,parser,parser,context,parser,context,for,iterator,map,entry,string,object,iterator,field,node,entry,set,iterator,iterator,has,next,map,entry,string,object,entry,iterator,next,final,string,prop,name,entry,get,key,final,object,prop,node,entry,get,value,if,false,prop,name,equals,prop,node,null,throw,new,mapper,parsing,exception,prop,name,must,not,have,a,null,value,if,prop,name,equals,store,builder,store,xcontent,map,values,node,boolean,value,prop,node,name,store,iterator,remove,else,if,prop,name,equals,index,builder,index,xcontent,map,values,node,boolean,value,prop,node,name,index,iterator,remove,else,if,prop,name,equals,builder,doc,values,xcontent,map,values,node,boolean,value,prop,node,name,iterator,remove,else,if,prop,name,equals,boost,builder,boost,node,float,value,prop,node,iterator,remove,else,if,prop,name,equals,builder,index,options,node,index,option,value,prop,node,iterator,remove,else,if,prop,name,equals,similarity,similarity,provider,similarity,provider,resolve,similarity,parser,context,name,prop,node,to,string,builder,similarity,similarity,provider,iterator,remove,else,if,parse,multi,field,builder,name,parser,context,prop,name,prop,node,iterator,remove,else,if,prop,name,equals,if,parser,context,is,within,multi,field,throw,new,mapper,parsing,exception,in,multi,fields,is,not,allowed,found,the,in,field,name,which,is,within,a,multi,field,else,parse,copy,fields,prop,node,builder,iterator,remove
TypeParsers -> public static void parseField(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode,                                   Mapper.TypeParser.ParserContext parserContext);1548236405;Parse common field attributes such as {@code doc_values} or {@code store}.;public static void parseField(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode,_                                  Mapper.TypeParser.ParserContext parserContext) {_        for (Iterator<Map.Entry<String, Object>> iterator = fieldNode.entrySet().iterator()_ iterator.hasNext()_) {_            Map.Entry<String, Object> entry = iterator.next()__            final String propName = entry.getKey()__            final Object propNode = entry.getValue()__            if (false == propName.equals("null_value") && propNode == null) {_                _                throw new MapperParsingException("[" + propName + "] must not have a [null] value")__            }_            if (propName.equals("store")) {_                builder.store(XContentMapValues.nodeBooleanValue(propNode, name + ".store"))__                iterator.remove()__            } else if (propName.equals("index")) {_                builder.index(XContentMapValues.nodeBooleanValue(propNode, name + ".index"))__                iterator.remove()__            } else if (propName.equals(DOC_VALUES)) {_                builder.docValues(XContentMapValues.nodeBooleanValue(propNode, name + "." + DOC_VALUES))__                iterator.remove()__            } else if (propName.equals("boost")) {_                builder.boost(nodeFloatValue(propNode))__                iterator.remove()__            } else if (propName.equals("index_options")) {_                builder.indexOptions(nodeIndexOptionValue(propNode))__                iterator.remove()__            } else if (propName.equals("similarity")) {_                SimilarityProvider similarityProvider = resolveSimilarity(parserContext, name, propNode.toString())__                builder.similarity(similarityProvider)__                iterator.remove()__            } else if (parseMultiField(builder, name, parserContext, propName, propNode)) {_                iterator.remove()__            } else if (propName.equals("copy_to")) {_                if (parserContext.isWithinMultiField()) {_                    throw new MapperParsingException("copy_to in multi fields is not allowed. Found the copy_to in field [" + name + "] " +_                        "which is within a multi field.")__                } else {_                    parseCopyFields(propNode, builder)__                }_                iterator.remove()__            }_        }_    };parse,common,field,attributes,such,as,code,or,code,store;public,static,void,parse,field,field,mapper,builder,builder,string,name,map,string,object,field,node,mapper,type,parser,parser,context,parser,context,for,iterator,map,entry,string,object,iterator,field,node,entry,set,iterator,iterator,has,next,map,entry,string,object,entry,iterator,next,final,string,prop,name,entry,get,key,final,object,prop,node,entry,get,value,if,false,prop,name,equals,prop,node,null,throw,new,mapper,parsing,exception,prop,name,must,not,have,a,null,value,if,prop,name,equals,store,builder,store,xcontent,map,values,node,boolean,value,prop,node,name,store,iterator,remove,else,if,prop,name,equals,index,builder,index,xcontent,map,values,node,boolean,value,prop,node,name,index,iterator,remove,else,if,prop,name,equals,builder,doc,values,xcontent,map,values,node,boolean,value,prop,node,name,iterator,remove,else,if,prop,name,equals,boost,builder,boost,node,float,value,prop,node,iterator,remove,else,if,prop,name,equals,builder,index,options,node,index,option,value,prop,node,iterator,remove,else,if,prop,name,equals,similarity,similarity,provider,similarity,provider,resolve,similarity,parser,context,name,prop,node,to,string,builder,similarity,similarity,provider,iterator,remove,else,if,parse,multi,field,builder,name,parser,context,prop,name,prop,node,iterator,remove,else,if,prop,name,equals,if,parser,context,is,within,multi,field,throw,new,mapper,parsing,exception,in,multi,fields,is,not,allowed,found,the,in,field,name,which,is,within,a,multi,field,else,parse,copy,fields,prop,node,builder,iterator,remove
