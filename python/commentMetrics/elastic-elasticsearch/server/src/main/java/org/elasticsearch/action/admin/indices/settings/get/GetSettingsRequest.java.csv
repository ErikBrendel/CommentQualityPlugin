commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public GetSettingsRequest indices(String... indices) {     this.indices = indices.     return this. }
false;public;1;4;;public GetSettingsRequest indicesOptions(IndicesOptions indicesOptions) {     this.indicesOptions = indicesOptions.     return this. }
true;public;1;4;/**  * When include_defaults is set, return default values which are normally suppressed.  * This flag is specific to the rest client.  */ ;/**  * When include_defaults is set, return default values which are normally suppressed.  * This flag is specific to the rest client.  */ public GetSettingsRequest includeDefaults(boolean includeDefaults) {     this.includeDefaults = includeDefaults.     return this. }
false;public;1;11;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeStringArray(indices).     indicesOptions.writeIndicesOptions(out).     out.writeStringArray(names).     out.writeBoolean(humanReadable).     if (out.getVersion().onOrAfter(Version.V_6_4_0)) {         out.writeBoolean(includeDefaults).     } }
false;public;0;4;;@Override public String[] indices() {     return indices. }
false;public;0;4;;@Override public IndicesOptions indicesOptions() {     return indicesOptions. }
false;public;0;3;;public String[] names() {     return names. }
false;public;1;4;;public GetSettingsRequest names(String... names) {     this.names = names.     return this. }
false;public;0;3;;public boolean humanReadable() {     return humanReadable. }
false;public;1;4;;public GetSettingsRequest humanReadable(boolean humanReadable) {     this.humanReadable = humanReadable.     return this. }
false;public;0;3;;public boolean includeDefaults() {     return includeDefaults. }
false;public;0;8;;@Override public ActionRequestValidationException validate() {     ActionRequestValidationException validationException = null.     if (names == null) {         validationException = ValidateActions.addValidationError("names may not be null", validationException).     }     return validationException. }
false;public;1;4;;@Override public void readFrom(StreamInput in) throws IOException {     throw new UnsupportedOperationException("usage of Streamable is to be replaced by Writeable"). }
false;public;1;11;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     GetSettingsRequest that = (GetSettingsRequest) o.     return humanReadable == that.humanReadable && includeDefaults == that.includeDefaults && Arrays.equals(indices, that.indices) && Objects.equals(indicesOptions, that.indicesOptions) && Arrays.equals(names, that.names). }
false;public;0;7;;@Override public int hashCode() {     int result = Objects.hash(indicesOptions, humanReadable, includeDefaults).     result = 31 * result + Arrays.hashCode(indices).     result = 31 * result + Arrays.hashCode(names).     return result. }
