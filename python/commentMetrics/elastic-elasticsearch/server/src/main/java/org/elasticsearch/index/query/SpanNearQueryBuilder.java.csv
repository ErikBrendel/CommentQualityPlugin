# id;timestamp;commentText;codeText;commentWords;codeWords
SpanNearQueryBuilder -> SpanGapQueryBuilder -> public int width();1524684173;@return width The width of the gap introduced;public int width() {_            return width__        };return,width,the,width,of,the,gap,introduced;public,int,width,return,width
SpanNearQueryBuilder -> SpanGapQueryBuilder -> public int width();1531937412;@return width The width of the gap introduced;public int width() {_            return width__        };return,width,the,width,of,the,gap,introduced;public,int,width,return,width
SpanNearQueryBuilder -> SpanGapQueryBuilder -> public int width();1543252559;@return width The width of the gap introduced;public int width() {_            return width__        };return,width,the,width,of,the,gap,introduced;public,int,width,return,width
SpanNearQueryBuilder -> SpanGapQueryBuilder -> public int width();1543834151;@return width The width of the gap introduced;public int width() {_            return width__        };return,width,the,width,of,the,gap,introduced;public,int,width,return,width
SpanNearQueryBuilder -> public boolean inOrder();1524684173;@see SpanNearQueryBuilder#inOrder(boolean);public boolean inOrder() {_        return this.inOrder__    };see,span,near,query,builder,in,order,boolean;public,boolean,in,order,return,this,in,order
SpanNearQueryBuilder -> public boolean inOrder();1531937412;@see SpanNearQueryBuilder#inOrder(boolean);public boolean inOrder() {_        return this.inOrder__    };see,span,near,query,builder,in,order,boolean;public,boolean,in,order,return,this,in,order
SpanNearQueryBuilder -> public boolean inOrder();1543252559;@see SpanNearQueryBuilder#inOrder(boolean);public boolean inOrder() {_        return this.inOrder__    };see,span,near,query,builder,in,order,boolean;public,boolean,in,order,return,this,in,order
SpanNearQueryBuilder -> public boolean inOrder();1543834151;@see SpanNearQueryBuilder#inOrder(boolean);public boolean inOrder() {_        return this.inOrder__    };see,span,near,query,builder,in,order,boolean;public,boolean,in,order,return,this,in,order
SpanNearQueryBuilder -> public SpanNearQueryBuilder(SpanQueryBuilder initialClause, int slop);1524684173;@param initialClause an initial span query clause_@param slop controls the maximum number of intervening unmatched positions permitted;public SpanNearQueryBuilder(SpanQueryBuilder initialClause, int slop) {_        if (initialClause == null) {_            throw new IllegalArgumentException("[" + NAME + "] must include at least one clause")__        }_        this.clauses.add(initialClause)__        this.slop = slop__    };param,initial,clause,an,initial,span,query,clause,param,slop,controls,the,maximum,number,of,intervening,unmatched,positions,permitted;public,span,near,query,builder,span,query,builder,initial,clause,int,slop,if,initial,clause,null,throw,new,illegal,argument,exception,name,must,include,at,least,one,clause,this,clauses,add,initial,clause,this,slop,slop
SpanNearQueryBuilder -> public SpanNearQueryBuilder(SpanQueryBuilder initialClause, int slop);1531937412;@param initialClause an initial span query clause_@param slop controls the maximum number of intervening unmatched positions permitted;public SpanNearQueryBuilder(SpanQueryBuilder initialClause, int slop) {_        if (initialClause == null) {_            throw new IllegalArgumentException("[" + NAME + "] must include at least one clause")__        }_        this.clauses.add(initialClause)__        this.slop = slop__    };param,initial,clause,an,initial,span,query,clause,param,slop,controls,the,maximum,number,of,intervening,unmatched,positions,permitted;public,span,near,query,builder,span,query,builder,initial,clause,int,slop,if,initial,clause,null,throw,new,illegal,argument,exception,name,must,include,at,least,one,clause,this,clauses,add,initial,clause,this,slop,slop
SpanNearQueryBuilder -> public SpanNearQueryBuilder(SpanQueryBuilder initialClause, int slop);1543252559;@param initialClause an initial span query clause_@param slop controls the maximum number of intervening unmatched positions permitted;public SpanNearQueryBuilder(SpanQueryBuilder initialClause, int slop) {_        if (initialClause == null) {_            throw new IllegalArgumentException("[" + NAME + "] must include at least one clause")__        }_        this.clauses.add(initialClause)__        this.slop = slop__    };param,initial,clause,an,initial,span,query,clause,param,slop,controls,the,maximum,number,of,intervening,unmatched,positions,permitted;public,span,near,query,builder,span,query,builder,initial,clause,int,slop,if,initial,clause,null,throw,new,illegal,argument,exception,name,must,include,at,least,one,clause,this,clauses,add,initial,clause,this,slop,slop
SpanNearQueryBuilder -> public SpanNearQueryBuilder(SpanQueryBuilder initialClause, int slop);1543834151;@param initialClause an initial span query clause_@param slop controls the maximum number of intervening unmatched positions permitted;public SpanNearQueryBuilder(SpanQueryBuilder initialClause, int slop) {_        if (initialClause == null) {_            throw new IllegalArgumentException("[" + NAME + "] must include at least one clause")__        }_        this.clauses.add(initialClause)__        this.slop = slop__    };param,initial,clause,an,initial,span,query,clause,param,slop,controls,the,maximum,number,of,intervening,unmatched,positions,permitted;public,span,near,query,builder,span,query,builder,initial,clause,int,slop,if,initial,clause,null,throw,new,illegal,argument,exception,name,must,include,at,least,one,clause,this,clauses,add,initial,clause,this,slop,slop
SpanNearQueryBuilder -> public SpanNearQueryBuilder inOrder(boolean inOrder);1524684173;When <code>inOrder</code> is true, the spans from each clause_must be in the same order as in <code>clauses</code> and must be non-overlapping._Defaults to <code>true</code>;public SpanNearQueryBuilder inOrder(boolean inOrder) {_        this.inOrder = inOrder__        return this__    };when,code,in,order,code,is,true,the,spans,from,each,clause,must,be,in,the,same,order,as,in,code,clauses,code,and,must,be,non,overlapping,defaults,to,code,true,code;public,span,near,query,builder,in,order,boolean,in,order,this,in,order,in,order,return,this
SpanNearQueryBuilder -> public SpanNearQueryBuilder inOrder(boolean inOrder);1531937412;When <code>inOrder</code> is true, the spans from each clause_must be in the same order as in <code>clauses</code> and must be non-overlapping._Defaults to <code>true</code>;public SpanNearQueryBuilder inOrder(boolean inOrder) {_        this.inOrder = inOrder__        return this__    };when,code,in,order,code,is,true,the,spans,from,each,clause,must,be,in,the,same,order,as,in,code,clauses,code,and,must,be,non,overlapping,defaults,to,code,true,code;public,span,near,query,builder,in,order,boolean,in,order,this,in,order,in,order,return,this
SpanNearQueryBuilder -> public SpanNearQueryBuilder inOrder(boolean inOrder);1543252559;When <code>inOrder</code> is true, the spans from each clause_must be in the same order as in <code>clauses</code> and must be non-overlapping._Defaults to <code>true</code>;public SpanNearQueryBuilder inOrder(boolean inOrder) {_        this.inOrder = inOrder__        return this__    };when,code,in,order,code,is,true,the,spans,from,each,clause,must,be,in,the,same,order,as,in,code,clauses,code,and,must,be,non,overlapping,defaults,to,code,true,code;public,span,near,query,builder,in,order,boolean,in,order,this,in,order,in,order,return,this
SpanNearQueryBuilder -> public SpanNearQueryBuilder inOrder(boolean inOrder);1543834151;When <code>inOrder</code> is true, the spans from each clause_must be in the same order as in <code>clauses</code> and must be non-overlapping._Defaults to <code>true</code>;public SpanNearQueryBuilder inOrder(boolean inOrder) {_        this.inOrder = inOrder__        return this__    };when,code,in,order,code,is,true,the,spans,from,each,clause,must,be,in,the,same,order,as,in,code,clauses,code,and,must,be,non,overlapping,defaults,to,code,true,code;public,span,near,query,builder,in,order,boolean,in,order,this,in,order,in,order,return,this
SpanNearQueryBuilder -> public SpanNearQueryBuilder addClause(SpanQueryBuilder clause);1524684173;Add a span clause to the current list of clauses;public SpanNearQueryBuilder addClause(SpanQueryBuilder clause) {_        if (clause == null) {_            throw new IllegalArgumentException("[" + NAME + "]  clauses cannot be null")__        }_        clauses.add(clause)__        return this__    };add,a,span,clause,to,the,current,list,of,clauses;public,span,near,query,builder,add,clause,span,query,builder,clause,if,clause,null,throw,new,illegal,argument,exception,name,clauses,cannot,be,null,clauses,add,clause,return,this
SpanNearQueryBuilder -> public SpanNearQueryBuilder addClause(SpanQueryBuilder clause);1531937412;Add a span clause to the current list of clauses;public SpanNearQueryBuilder addClause(SpanQueryBuilder clause) {_        if (clause == null) {_            throw new IllegalArgumentException("[" + NAME + "]  clauses cannot be null")__        }_        clauses.add(clause)__        return this__    };add,a,span,clause,to,the,current,list,of,clauses;public,span,near,query,builder,add,clause,span,query,builder,clause,if,clause,null,throw,new,illegal,argument,exception,name,clauses,cannot,be,null,clauses,add,clause,return,this
SpanNearQueryBuilder -> public SpanNearQueryBuilder addClause(SpanQueryBuilder clause);1543252559;Add a span clause to the current list of clauses;public SpanNearQueryBuilder addClause(SpanQueryBuilder clause) {_        if (clause == null) {_            throw new IllegalArgumentException("[" + NAME + "]  clauses cannot be null")__        }_        clauses.add(clause)__        return this__    };add,a,span,clause,to,the,current,list,of,clauses;public,span,near,query,builder,add,clause,span,query,builder,clause,if,clause,null,throw,new,illegal,argument,exception,name,clauses,cannot,be,null,clauses,add,clause,return,this
SpanNearQueryBuilder -> public SpanNearQueryBuilder addClause(SpanQueryBuilder clause);1543834151;Add a span clause to the current list of clauses;public SpanNearQueryBuilder addClause(SpanQueryBuilder clause) {_        if (clause == null) {_            throw new IllegalArgumentException("[" + NAME + "]  clauses cannot be null")__        }_        clauses.add(clause)__        return this__    };add,a,span,clause,to,the,current,list,of,clauses;public,span,near,query,builder,add,clause,span,query,builder,clause,if,clause,null,throw,new,illegal,argument,exception,name,clauses,cannot,be,null,clauses,add,clause,return,this
SpanNearQueryBuilder -> public int slop();1524684173;@return the maximum number of intervening unmatched positions permitted;public int slop() {_        return this.slop__    };return,the,maximum,number,of,intervening,unmatched,positions,permitted;public,int,slop,return,this,slop
SpanNearQueryBuilder -> public int slop();1531937412;@return the maximum number of intervening unmatched positions permitted;public int slop() {_        return this.slop__    };return,the,maximum,number,of,intervening,unmatched,positions,permitted;public,int,slop,return,this,slop
SpanNearQueryBuilder -> public int slop();1543252559;@return the maximum number of intervening unmatched positions permitted;public int slop() {_        return this.slop__    };return,the,maximum,number,of,intervening,unmatched,positions,permitted;public,int,slop,return,this,slop
SpanNearQueryBuilder -> public int slop();1543834151;@return the maximum number of intervening unmatched positions permitted;public int slop() {_        return this.slop__    };return,the,maximum,number,of,intervening,unmatched,positions,permitted;public,int,slop,return,this,slop
SpanNearQueryBuilder -> SpanGapQueryBuilder -> public SpanGapQueryBuilder(StreamInput in) throws IOException;1524684173;Read from a stream.;public SpanGapQueryBuilder(StreamInput in) throws IOException {_            fieldName = in.readString()__            width = in.readInt()__        };read,from,a,stream;public,span,gap,query,builder,stream,input,in,throws,ioexception,field,name,in,read,string,width,in,read,int
SpanNearQueryBuilder -> SpanGapQueryBuilder -> public SpanGapQueryBuilder(StreamInput in) throws IOException;1531937412;Read from a stream.;public SpanGapQueryBuilder(StreamInput in) throws IOException {_            fieldName = in.readString()__            width = in.readInt()__        };read,from,a,stream;public,span,gap,query,builder,stream,input,in,throws,ioexception,field,name,in,read,string,width,in,read,int
SpanNearQueryBuilder -> SpanGapQueryBuilder -> public SpanGapQueryBuilder(StreamInput in) throws IOException;1543252559;Read from a stream.;public SpanGapQueryBuilder(StreamInput in) throws IOException {_            fieldName = in.readString()__            width = in.readInt()__        };read,from,a,stream;public,span,gap,query,builder,stream,input,in,throws,ioexception,field,name,in,read,string,width,in,read,int
SpanNearQueryBuilder -> SpanGapQueryBuilder -> public SpanGapQueryBuilder(StreamInput in) throws IOException;1543834151;Read from a stream.;public SpanGapQueryBuilder(StreamInput in) throws IOException {_            fieldName = in.readString()__            width = in.readInt()__        };read,from,a,stream;public,span,gap,query,builder,stream,input,in,throws,ioexception,field,name,in,read,string,width,in,read,int
SpanNearQueryBuilder -> SpanGapQueryBuilder -> public String fieldName();1524684173;@return fieldName  The name of the field;public String fieldName() {_            return fieldName__        };return,field,name,the,name,of,the,field;public,string,field,name,return,field,name
SpanNearQueryBuilder -> SpanGapQueryBuilder -> public String fieldName();1531937412;@return fieldName  The name of the field;public String fieldName() {_            return fieldName__        };return,field,name,the,name,of,the,field;public,string,field,name,return,field,name
SpanNearQueryBuilder -> SpanGapQueryBuilder -> public String fieldName();1543252559;@return fieldName  The name of the field;public String fieldName() {_            return fieldName__        };return,field,name,the,name,of,the,field;public,string,field,name,return,field,name
SpanNearQueryBuilder -> SpanGapQueryBuilder -> public String fieldName();1543834151;@return fieldName  The name of the field;public String fieldName() {_            return fieldName__        };return,field,name,the,name,of,the,field;public,string,field,name,return,field,name
SpanNearQueryBuilder -> SpanGapQueryBuilder -> public SpanGapQueryBuilder(String fieldName, int width);1524684173;Constructs a new SpanGapQueryBuilder term query.__@param fieldName  The name of the field_@param width The width of the gap introduced;public SpanGapQueryBuilder(String fieldName, int width) {_            if (Strings.isEmpty(fieldName)) {_                throw new IllegalArgumentException("[span_gap] field name is null or empty")__            }_            _            _            this.fieldName = fieldName__            this.width = width__        };constructs,a,new,span,gap,query,builder,term,query,param,field,name,the,name,of,the,field,param,width,the,width,of,the,gap,introduced;public,span,gap,query,builder,string,field,name,int,width,if,strings,is,empty,field,name,throw,new,illegal,argument,exception,field,name,is,null,or,empty,this,field,name,field,name,this,width,width
SpanNearQueryBuilder -> SpanGapQueryBuilder -> public SpanGapQueryBuilder(String fieldName, int width);1531937412;Constructs a new SpanGapQueryBuilder term query.__@param fieldName  The name of the field_@param width The width of the gap introduced;public SpanGapQueryBuilder(String fieldName, int width) {_            if (Strings.isEmpty(fieldName)) {_                throw new IllegalArgumentException("[span_gap] field name is null or empty")__            }_            _            _            this.fieldName = fieldName__            this.width = width__        };constructs,a,new,span,gap,query,builder,term,query,param,field,name,the,name,of,the,field,param,width,the,width,of,the,gap,introduced;public,span,gap,query,builder,string,field,name,int,width,if,strings,is,empty,field,name,throw,new,illegal,argument,exception,field,name,is,null,or,empty,this,field,name,field,name,this,width,width
SpanNearQueryBuilder -> SpanGapQueryBuilder -> public SpanGapQueryBuilder(String fieldName, int width);1543252559;Constructs a new SpanGapQueryBuilder term query.__@param fieldName  The name of the field_@param width The width of the gap introduced;public SpanGapQueryBuilder(String fieldName, int width) {_            if (Strings.isEmpty(fieldName)) {_                throw new IllegalArgumentException("[span_gap] field name is null or empty")__            }_            _            _            this.fieldName = fieldName__            this.width = width__        };constructs,a,new,span,gap,query,builder,term,query,param,field,name,the,name,of,the,field,param,width,the,width,of,the,gap,introduced;public,span,gap,query,builder,string,field,name,int,width,if,strings,is,empty,field,name,throw,new,illegal,argument,exception,field,name,is,null,or,empty,this,field,name,field,name,this,width,width
SpanNearQueryBuilder -> SpanGapQueryBuilder -> public SpanGapQueryBuilder(String fieldName, int width);1543834151;Constructs a new SpanGapQueryBuilder term query.__@param fieldName  The name of the field_@param width The width of the gap introduced;public SpanGapQueryBuilder(String fieldName, int width) {_            if (Strings.isEmpty(fieldName)) {_                throw new IllegalArgumentException("[span_gap] field name is null or empty")__            }_            _            _            this.fieldName = fieldName__            this.width = width__        };constructs,a,new,span,gap,query,builder,term,query,param,field,name,the,name,of,the,field,param,width,the,width,of,the,gap,introduced;public,span,gap,query,builder,string,field,name,int,width,if,strings,is,empty,field,name,throw,new,illegal,argument,exception,field,name,is,null,or,empty,this,field,name,field,name,this,width,width
SpanNearQueryBuilder -> public SpanNearQueryBuilder(StreamInput in) throws IOException;1524684173;Read from a stream.;public SpanNearQueryBuilder(StreamInput in) throws IOException {_        super(in)__        for (QueryBuilder clause : readQueries(in)) {_            this.clauses.add((SpanQueryBuilder) clause)__        }_        slop = in.readVInt()__        inOrder = in.readBoolean()__    };read,from,a,stream;public,span,near,query,builder,stream,input,in,throws,ioexception,super,in,for,query,builder,clause,read,queries,in,this,clauses,add,span,query,builder,clause,slop,in,read,vint,in,order,in,read,boolean
SpanNearQueryBuilder -> public SpanNearQueryBuilder(StreamInput in) throws IOException;1531937412;Read from a stream.;public SpanNearQueryBuilder(StreamInput in) throws IOException {_        super(in)__        for (QueryBuilder clause : readQueries(in)) {_            this.clauses.add((SpanQueryBuilder) clause)__        }_        slop = in.readVInt()__        inOrder = in.readBoolean()__    };read,from,a,stream;public,span,near,query,builder,stream,input,in,throws,ioexception,super,in,for,query,builder,clause,read,queries,in,this,clauses,add,span,query,builder,clause,slop,in,read,vint,in,order,in,read,boolean
SpanNearQueryBuilder -> public SpanNearQueryBuilder(StreamInput in) throws IOException;1543252559;Read from a stream.;public SpanNearQueryBuilder(StreamInput in) throws IOException {_        super(in)__        for (QueryBuilder clause : readQueries(in)) {_            this.clauses.add((SpanQueryBuilder) clause)__        }_        slop = in.readVInt()__        inOrder = in.readBoolean()__    };read,from,a,stream;public,span,near,query,builder,stream,input,in,throws,ioexception,super,in,for,query,builder,clause,read,queries,in,this,clauses,add,span,query,builder,clause,slop,in,read,vint,in,order,in,read,boolean
SpanNearQueryBuilder -> public SpanNearQueryBuilder(StreamInput in) throws IOException;1543834151;Read from a stream.;public SpanNearQueryBuilder(StreamInput in) throws IOException {_        super(in)__        for (QueryBuilder clause : readQueries(in)) {_            this.clauses.add((SpanQueryBuilder) clause)__        }_        slop = in.readVInt()__        inOrder = in.readBoolean()__    };read,from,a,stream;public,span,near,query,builder,stream,input,in,throws,ioexception,super,in,for,query,builder,clause,read,queries,in,this,clauses,add,span,query,builder,clause,slop,in,read,vint,in,order,in,read,boolean
SpanNearQueryBuilder -> public List<SpanQueryBuilder> clauses();1524684173;@return the {@link SpanQueryBuilder} clauses that were set for this query;public List<SpanQueryBuilder> clauses() {_        return Collections.unmodifiableList(this.clauses)__    };return,the,link,span,query,builder,clauses,that,were,set,for,this,query;public,list,span,query,builder,clauses,return,collections,unmodifiable,list,this,clauses
SpanNearQueryBuilder -> public List<SpanQueryBuilder> clauses();1531937412;@return the {@link SpanQueryBuilder} clauses that were set for this query;public List<SpanQueryBuilder> clauses() {_        return Collections.unmodifiableList(this.clauses)__    };return,the,link,span,query,builder,clauses,that,were,set,for,this,query;public,list,span,query,builder,clauses,return,collections,unmodifiable,list,this,clauses
SpanNearQueryBuilder -> public List<SpanQueryBuilder> clauses();1543252559;@return the {@link SpanQueryBuilder} clauses that were set for this query;public List<SpanQueryBuilder> clauses() {_        return Collections.unmodifiableList(this.clauses)__    };return,the,link,span,query,builder,clauses,that,were,set,for,this,query;public,list,span,query,builder,clauses,return,collections,unmodifiable,list,this,clauses
SpanNearQueryBuilder -> public List<SpanQueryBuilder> clauses();1543834151;@return the {@link SpanQueryBuilder} clauses that were set for this query;public List<SpanQueryBuilder> clauses() {_        return Collections.unmodifiableList(this.clauses)__    };return,the,link,span,query,builder,clauses,that,were,set,for,this,query;public,list,span,query,builder,clauses,return,collections,unmodifiable,list,this,clauses
