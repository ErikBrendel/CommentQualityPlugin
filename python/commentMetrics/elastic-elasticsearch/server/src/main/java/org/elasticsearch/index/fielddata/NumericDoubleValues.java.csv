commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public boolean advanceExact(int target) throws IOException {     docID = target.     return NumericDoubleValues.this.advanceExact(target). }
false;public;0;4;;@Override public long longValue() throws IOException {     return Double.doubleToRawLongBits(NumericDoubleValues.this.doubleValue()). }
false;public;0;4;;@Override public int docID() {     return docID. }
true;public;0;18;/**  * Returns numeric docvalues view of raw double bits  */ ;// TODO: this interaction with sort comparators is really ugly... /**  * Returns numeric docvalues view of raw double bits  */ public NumericDocValues getRawDoubleValues() {     return new AbstractNumericDocValues() {          private int docID = -1.          @Override         public boolean advanceExact(int target) throws IOException {             docID = target.             return NumericDoubleValues.this.advanceExact(target).         }          @Override         public long longValue() throws IOException {             return Double.doubleToRawLongBits(NumericDoubleValues.this.doubleValue()).         }          @Override         public int docID() {             return docID.         }     }. }
false;public;1;5;;@Override public boolean advanceExact(int target) throws IOException {     docID = target.     return NumericDoubleValues.this.advanceExact(target). }
false;public;0;4;;@Override public long longValue() throws IOException {     return Float.floatToRawIntBits((float) NumericDoubleValues.this.doubleValue()). }
false;public;0;4;;@Override public int docID() {     return docID. }
true;public;0;18;/**  * Returns numeric docvalues view of raw float bits  */ ;// yes... this is doing what the previous code was doing... /**  * Returns numeric docvalues view of raw float bits  */ public NumericDocValues getRawFloatValues() {     return new AbstractNumericDocValues() {          private int docID = -1.          @Override         public boolean advanceExact(int target) throws IOException {             docID = target.             return NumericDoubleValues.this.advanceExact(target).         }          @Override         public long longValue() throws IOException {             return Float.floatToRawIntBits((float) NumericDoubleValues.this.doubleValue()).         }          @Override         public int docID() {             return docID.         }     }. }
