# id;timestamp;commentText;codeText;commentWords;codeWords
PathTrie -> public Iterator<T> retrieveAll(String path, Supplier<Map<String, String>> paramSupplier);1524684173;Returns an iterator of the objects stored in the {@code PathTrie}, using_all possible {@code TrieMatchingMode} modes. The {@code paramSupplier}_is called between each invocation of {@code next()} to supply a new map_of parameters.;public Iterator<T> retrieveAll(String path, Supplier<Map<String, String>> paramSupplier) {_        return new PathTrieIterator<>(this, path, paramSupplier)__    };returns,an,iterator,of,the,objects,stored,in,the,code,path,trie,using,all,possible,code,trie,matching,mode,modes,the,code,param,supplier,is,called,between,each,invocation,of,code,next,to,supply,a,new,map,of,parameters;public,iterator,t,retrieve,all,string,path,supplier,map,string,string,param,supplier,return,new,path,trie,iterator,this,path,param,supplier
PathTrie -> public Iterator<T> retrieveAll(String path, Supplier<Map<String, String>> paramSupplier);1528762805;Returns an iterator of the objects stored in the {@code PathTrie}, using_all possible {@code TrieMatchingMode} modes. The {@code paramSupplier}_is called between each invocation of {@code next()} to supply a new map_of parameters.;public Iterator<T> retrieveAll(String path, Supplier<Map<String, String>> paramSupplier) {_        return new PathTrieIterator<>(this, path, paramSupplier)__    };returns,an,iterator,of,the,objects,stored,in,the,code,path,trie,using,all,possible,code,trie,matching,mode,modes,the,code,param,supplier,is,called,between,each,invocation,of,code,next,to,supply,a,new,map,of,parameters;public,iterator,t,retrieve,all,string,path,supplier,map,string,string,param,supplier,return,new,path,trie,iterator,this,path,param,supplier
PathTrie -> public Iterator<T> retrieveAll(String path, Supplier<Map<String, String>> paramSupplier);1535723122;Returns an iterator of the objects stored in the {@code PathTrie}, using_all possible {@code TrieMatchingMode} modes. The {@code paramSupplier}_is called between each invocation of {@code next()} to supply a new map_of parameters.;public Iterator<T> retrieveAll(String path, Supplier<Map<String, String>> paramSupplier) {_        return new PathTrieIterator<>(this, path, paramSupplier)__    };returns,an,iterator,of,the,objects,stored,in,the,code,path,trie,using,all,possible,code,trie,matching,mode,modes,the,code,param,supplier,is,called,between,each,invocation,of,code,next,to,supply,a,new,map,of,parameters;public,iterator,t,retrieve,all,string,path,supplier,map,string,string,param,supplier,return,new,path,trie,iterator,this,path,param,supplier
PathTrie -> public void insertOrUpdate(String path, T value, BiFunction<T, T, T> updater);1524684173;Insert a value for the given path. If the path already exists, replace the value with:_<pre>_value = updater.apply(oldValue, newValue)__</pre>_allowing the value to be updated if desired.;public void insertOrUpdate(String path, T value, BiFunction<T, T, T> updater) {_        String[] strings = path.split(SEPARATOR)__        if (strings.length == 0) {_            if (rootValue != null) {_                rootValue = updater.apply(rootValue, value)__            } else {_                rootValue = value__            }_            return__        }_        int index = 0__        _        if (strings.length > 0 && strings[0].isEmpty()) {_            index = 1__        }_        root.insertOrUpdate(strings, index, value, updater)__    };insert,a,value,for,the,given,path,if,the,path,already,exists,replace,the,value,with,pre,value,updater,apply,old,value,new,value,pre,allowing,the,value,to,be,updated,if,desired;public,void,insert,or,update,string,path,t,value,bi,function,t,t,t,updater,string,strings,path,split,separator,if,strings,length,0,if,root,value,null,root,value,updater,apply,root,value,value,else,root,value,value,return,int,index,0,if,strings,length,0,strings,0,is,empty,index,1,root,insert,or,update,strings,index,value,updater
PathTrie -> public void insertOrUpdate(String path, T value, BiFunction<T, T, T> updater);1528762805;Insert a value for the given path. If the path already exists, replace the value with:_<pre>_value = updater.apply(oldValue, newValue)__</pre>_allowing the value to be updated if desired.;public void insertOrUpdate(String path, T value, BiFunction<T, T, T> updater) {_        String[] strings = path.split(SEPARATOR)__        if (strings.length == 0) {_            if (rootValue != null) {_                rootValue = updater.apply(rootValue, value)__            } else {_                rootValue = value__            }_            return__        }_        int index = 0__        _        if (strings.length > 0 && strings[0].isEmpty()) {_            index = 1__        }_        root.insertOrUpdate(strings, index, value, updater)__    };insert,a,value,for,the,given,path,if,the,path,already,exists,replace,the,value,with,pre,value,updater,apply,old,value,new,value,pre,allowing,the,value,to,be,updated,if,desired;public,void,insert,or,update,string,path,t,value,bi,function,t,t,t,updater,string,strings,path,split,separator,if,strings,length,0,if,root,value,null,root,value,updater,apply,root,value,value,else,root,value,value,return,int,index,0,if,strings,length,0,strings,0,is,empty,index,1,root,insert,or,update,strings,index,value,updater
PathTrie -> public void insertOrUpdate(String path, T value, BiFunction<T, T, T> updater);1535723122;Insert a value for the given path. If the path already exists, replace the value with:_<pre>_value = updater.apply(oldValue, newValue)__</pre>_allowing the value to be updated if desired.;public void insertOrUpdate(String path, T value, BiFunction<T, T, T> updater) {_        String[] strings = path.split(SEPARATOR)__        if (strings.length == 0) {_            if (rootValue != null) {_                rootValue = updater.apply(rootValue, value)__            } else {_                rootValue = value__            }_            return__        }_        int index = 0__        _        if (strings[0].isEmpty()) {_            index = 1__        }_        root.insertOrUpdate(strings, index, value, updater)__    };insert,a,value,for,the,given,path,if,the,path,already,exists,replace,the,value,with,pre,value,updater,apply,old,value,new,value,pre,allowing,the,value,to,be,updated,if,desired;public,void,insert,or,update,string,path,t,value,bi,function,t,t,t,updater,string,strings,path,split,separator,if,strings,length,0,if,root,value,null,root,value,updater,apply,root,value,value,else,root,value,value,return,int,index,0,if,strings,0,is,empty,index,1,root,insert,or,update,strings,index,value,updater
