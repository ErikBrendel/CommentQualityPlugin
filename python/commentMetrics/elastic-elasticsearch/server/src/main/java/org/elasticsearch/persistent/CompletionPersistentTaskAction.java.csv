commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public PersistentTaskResponse newResponse() {     return new PersistentTaskResponse(). }
false;public;1;7;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     taskId = in.readString().     allocationId = in.readLong().     exception = in.readException(). }
false;public;1;7;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(taskId).     out.writeLong(allocationId).     out.writeException(exception). }
false;public;0;11;;@Override public ActionRequestValidationException validate() {     ActionRequestValidationException validationException = null.     if (taskId == null) {         validationException = addValidationError("task id is missing", validationException).     }     if (allocationId < 0) {         validationException = addValidationError("allocation id is negative or missing", validationException).     }     return validationException. }
false;public;1;9;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     Request request = (Request) o.     return Objects.equals(taskId, request.taskId) && allocationId == request.allocationId && Objects.equals(exception, request.exception). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(taskId, allocationId, exception). }
false;protected;0;4;;@Override protected String executor() {     return ThreadPool.Names.GENERIC. }
false;protected;0;4;;@Override protected PersistentTaskResponse newResponse() {     return new PersistentTaskResponse(). }
false;protected;2;5;;@Override protected ClusterBlockException checkBlock(Request request, ClusterState state) {     // Cluster is not affected but we look up repositories in metadata     return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE). }
false;public;1;4;;@Override public void onResponse(PersistentTask<?> task) {     listener.onResponse(new PersistentTaskResponse(task)). }
false;public;1;4;;@Override public void onFailure(Exception e) {     listener.onFailure(e). }
false;protected,final;3;16;;@Override protected final void masterOperation(final Request request, ClusterState state, final ActionListener<PersistentTaskResponse> listener) {     persistentTasksClusterService.completePersistentTask(request.taskId, request.allocationId, request.exception, new ActionListener<PersistentTask<?>>() {          @Override         public void onResponse(PersistentTask<?> task) {             listener.onResponse(new PersistentTaskResponse(task)).         }          @Override         public void onFailure(Exception e) {             listener.onFailure(e).         }     }). }
