commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public ConstantBindingBuilder annotatedWith(Class<? extends Annotation> annotationType) {     annotatedWithInternal(annotationType).     return this. }
false;public;1;5;;@Override public ConstantBindingBuilder annotatedWith(Annotation annotation) {     annotatedWithInternal(annotation).     return this. }
false;public;1;4;;@Override public void to(final String value) {     toConstant(String.class, value). }
false;public;1;4;;@Override public void to(final int value) {     toConstant(Integer.class, value). }
false;public;1;4;;@Override public void to(final long value) {     toConstant(Long.class, value). }
false;public;1;4;;@Override public void to(final boolean value) {     toConstant(Boolean.class, value). }
false;public;1;4;;@Override public void to(final double value) {     toConstant(Double.class, value). }
false;public;1;4;;@Override public void to(final float value) {     toConstant(Float.class, value). }
false;public;1;4;;@Override public void to(final short value) {     toConstant(Short.class, value). }
false;public;1;4;;@Override public void to(final char value) {     toConstant(Character.class, value). }
false;public;1;4;;@Override public void to(final Class<?> value) {     toConstant(Class.class, value). }
false;public;1;4;;@Override public <E extends Enum<E>> void to(final E value) {     toConstant(value.getDeclaringClass(), value). }
false;private;2;29;;private void toConstant(Class<?> type, Object instance) {     // this type will define T, so these assignments are safe     @SuppressWarnings("unchecked")     Class<T> typeAsClassT = (Class<T>) type.     @SuppressWarnings("unchecked")     T instanceAsT = (T) instance.     if (keyTypeIsSet()) {         binder.addError(CONSTANT_VALUE_ALREADY_SET).         return.     }     BindingImpl<T> base = getBinding().     Key<T> key.     if (base.getKey().getAnnotation() != null) {         key = Key.get(typeAsClassT, base.getKey().getAnnotation()).     } else if (base.getKey().getAnnotationType() != null) {         key = Key.get(typeAsClassT, base.getKey().getAnnotationType()).     } else {         key = Key.get(typeAsClassT).     }     if (instanceAsT == null) {         binder.addError(BINDING_TO_NULL).     }     setBinding(new InstanceBindingImpl<>(base.getSource(), key, base.getScoping(), emptySet(), instanceAsT)). }
false;public;0;4;;@Override public String toString() {     return "ConstantBindingBuilder". }
