# id;timestamp;commentText;codeText;commentWords;codeWords
InternalSettingsPreparer -> private static void checkSettingsForTerminalDeprecation(final Settings.Builder output) throws SettingsException;1524684173;Checks all settings values to make sure they do not have the old prompt settings. These were deprecated in 6.0.0._This check should be removed in 8.0.0.;private static void checkSettingsForTerminalDeprecation(final Settings.Builder output) throws SettingsException {_        _        assert Version.CURRENT.major != 8: "Logic pertaining to config driven prompting should be removed"__        for (String setting : output.keys()) {_            switch (output.get(setting)) {_                case SECRET_PROMPT_VALUE:_                    throw new SettingsException("Config driven secret prompting was deprecated in 6.0.0. Use the keystore" +_                        " for secure settings.")__                case TEXT_PROMPT_VALUE:_                    throw new SettingsException("Config driven text prompting was deprecated in 6.0.0. Use the keystore" +_                        " for secure settings.")__            }_        }_    };checks,all,settings,values,to,make,sure,they,do,not,have,the,old,prompt,settings,these,were,deprecated,in,6,0,0,this,check,should,be,removed,in,8,0,0;private,static,void,check,settings,for,terminal,deprecation,final,settings,builder,output,throws,settings,exception,assert,version,current,major,8,logic,pertaining,to,config,driven,prompting,should,be,removed,for,string,setting,output,keys,switch,output,get,setting,case,throw,new,settings,exception,config,driven,secret,prompting,was,deprecated,in,6,0,0,use,the,keystore,for,secure,settings,case,throw,new,settings,exception,config,driven,text,prompting,was,deprecated,in,6,0,0,use,the,keystore,for,secure,settings
InternalSettingsPreparer -> private static void checkSettingsForTerminalDeprecation(final Settings.Builder output) throws SettingsException;1537806831;Checks all settings values to make sure they do not have the old prompt settings. These were deprecated in 6.0.0._This check should be removed in 8.0.0.;private static void checkSettingsForTerminalDeprecation(final Settings.Builder output) throws SettingsException {_        _        assert Version.CURRENT.major != 8: "Logic pertaining to config driven prompting should be removed"__        for (String setting : output.keys()) {_            switch (output.get(setting)) {_                case SECRET_PROMPT_VALUE:_                    throw new SettingsException("Config driven secret prompting was deprecated in 6.0.0. Use the keystore" +_                        " for secure settings.")__                case TEXT_PROMPT_VALUE:_                    throw new SettingsException("Config driven text prompting was deprecated in 6.0.0. Use the keystore" +_                        " for secure settings.")__            }_        }_    };checks,all,settings,values,to,make,sure,they,do,not,have,the,old,prompt,settings,these,were,deprecated,in,6,0,0,this,check,should,be,removed,in,8,0,0;private,static,void,check,settings,for,terminal,deprecation,final,settings,builder,output,throws,settings,exception,assert,version,current,major,8,logic,pertaining,to,config,driven,prompting,should,be,removed,for,string,setting,output,keys,switch,output,get,setting,case,throw,new,settings,exception,config,driven,secret,prompting,was,deprecated,in,6,0,0,use,the,keystore,for,secure,settings,case,throw,new,settings,exception,config,driven,text,prompting,was,deprecated,in,6,0,0,use,the,keystore,for,secure,settings
InternalSettingsPreparer -> static void initializeSettings(final Settings.Builder output, final Settings input, final Map<String, String> esSettings);1524684173;Initializes the builder with the given input settings, and applies settings from the specified map (these settings typically come_from the command line).__@param output the settings builder to apply the input and default settings to_@param input the input settings_@param esSettings a map from which to apply settings;static void initializeSettings(final Settings.Builder output, final Settings input, final Map<String, String> esSettings) {_        output.put(input)__        output.putProperties(esSettings, Function.identity())__        output.replacePropertyPlaceholders()__    };initializes,the,builder,with,the,given,input,settings,and,applies,settings,from,the,specified,map,these,settings,typically,come,from,the,command,line,param,output,the,settings,builder,to,apply,the,input,and,default,settings,to,param,input,the,input,settings,param,es,settings,a,map,from,which,to,apply,settings;static,void,initialize,settings,final,settings,builder,output,final,settings,input,final,map,string,string,es,settings,output,put,input,output,put,properties,es,settings,function,identity,output,replace,property,placeholders
InternalSettingsPreparer -> static void initializeSettings(final Settings.Builder output, final Settings input, final Map<String, String> esSettings);1537806831;Initializes the builder with the given input settings, and applies settings from the specified map (these settings typically come_from the command line).__@param output the settings builder to apply the input and default settings to_@param input the input settings_@param esSettings a map from which to apply settings;static void initializeSettings(final Settings.Builder output, final Settings input, final Map<String, String> esSettings) {_        output.put(input)__        output.putProperties(esSettings, Function.identity())__        output.replacePropertyPlaceholders()__    };initializes,the,builder,with,the,given,input,settings,and,applies,settings,from,the,specified,map,these,settings,typically,come,from,the,command,line,param,output,the,settings,builder,to,apply,the,input,and,default,settings,to,param,input,the,input,settings,param,es,settings,a,map,from,which,to,apply,settings;static,void,initialize,settings,final,settings,builder,output,final,settings,input,final,map,string,string,es,settings,output,put,input,output,put,properties,es,settings,function,identity,output,replace,property,placeholders
InternalSettingsPreparer -> static void initializeSettings(final Settings.Builder output, final Settings input, final Map<String, String> esSettings);1549608646;Initializes the builder with the given input settings, and applies settings from the specified map (these settings typically come_from the command line).__@param output the settings builder to apply the input and default settings to_@param input the input settings_@param esSettings a map from which to apply settings;static void initializeSettings(final Settings.Builder output, final Settings input, final Map<String, String> esSettings) {_        output.put(input)__        output.putProperties(esSettings, Function.identity())__        output.replacePropertyPlaceholders()__    };initializes,the,builder,with,the,given,input,settings,and,applies,settings,from,the,specified,map,these,settings,typically,come,from,the,command,line,param,output,the,settings,builder,to,apply,the,input,and,default,settings,to,param,input,the,input,settings,param,es,settings,a,map,from,which,to,apply,settings;static,void,initialize,settings,final,settings,builder,output,final,settings,input,final,map,string,string,es,settings,output,put,input,output,put,properties,es,settings,function,identity,output,replace,property,placeholders
InternalSettingsPreparer -> public static Settings prepareSettings(Settings input);1524684173;Prepares the settings by gathering all elasticsearch system properties and setting defaults.;public static Settings prepareSettings(Settings input) {_        Settings.Builder output = Settings.builder()__        initializeSettings(output, input, Collections.emptyMap())__        finalizeSettings(output)__        return output.build()__    };prepares,the,settings,by,gathering,all,elasticsearch,system,properties,and,setting,defaults;public,static,settings,prepare,settings,settings,input,settings,builder,output,settings,builder,initialize,settings,output,input,collections,empty,map,finalize,settings,output,return,output,build
InternalSettingsPreparer -> public static Settings prepareSettings(Settings input);1537806831;Prepares settings for the transport client by gathering all_elasticsearch system properties and setting defaults.;public static Settings prepareSettings(Settings input) {_        Settings.Builder output = Settings.builder()__        initializeSettings(output, input, Collections.emptyMap())__        finalizeSettings(output, () -> null)__        return output.build()__    };prepares,settings,for,the,transport,client,by,gathering,all,elasticsearch,system,properties,and,setting,defaults;public,static,settings,prepare,settings,settings,input,settings,builder,output,settings,builder,initialize,settings,output,input,collections,empty,map,finalize,settings,output,null,return,output,build
InternalSettingsPreparer -> public static Settings prepareSettings(Settings input);1549608646;Prepares settings for the transport client by gathering all_elasticsearch system properties and setting defaults.;public static Settings prepareSettings(Settings input) {_        Settings.Builder output = Settings.builder()__        initializeSettings(output, input, Collections.emptyMap())__        finalizeSettings(output, () -> null)__        return output.build()__    };prepares,settings,for,the,transport,client,by,gathering,all,elasticsearch,system,properties,and,setting,defaults;public,static,settings,prepare,settings,settings,input,settings,builder,output,settings,builder,initialize,settings,output,input,collections,empty,map,finalize,settings,output,null,return,output,build
InternalSettingsPreparer -> private static void finalizeSettings(Settings.Builder output, Supplier<String> defaultNodeName);1537806831;Finish preparing settings by replacing forced settings and any defaults that need to be added.;private static void finalizeSettings(Settings.Builder output, Supplier<String> defaultNodeName) {_        _        List<String> forcedSettings = new ArrayList<>()__        for (String setting : output.keys()) {_            if (setting.startsWith("force.")) {_                forcedSettings.add(setting)__            }_        }_        for (String forcedSetting : forcedSettings) {_            String value = output.remove(forcedSetting)__            output.put(forcedSetting.substring("force.".length()), value)__        }_        output.replacePropertyPlaceholders()___        _        if (output.get(ClusterName.CLUSTER_NAME_SETTING.getKey()) == null) {_            output.put(ClusterName.CLUSTER_NAME_SETTING.getKey(), ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY).value())__        }_        if (output.get(Node.NODE_NAME_SETTING.getKey()) == null) {_            output.put(Node.NODE_NAME_SETTING.getKey(), defaultNodeName.get())__        }_    };finish,preparing,settings,by,replacing,forced,settings,and,any,defaults,that,need,to,be,added;private,static,void,finalize,settings,settings,builder,output,supplier,string,default,node,name,list,string,forced,settings,new,array,list,for,string,setting,output,keys,if,setting,starts,with,force,forced,settings,add,setting,for,string,forced,setting,forced,settings,string,value,output,remove,forced,setting,output,put,forced,setting,substring,force,length,value,output,replace,property,placeholders,if,output,get,cluster,name,get,key,null,output,put,cluster,name,get,key,cluster,name,get,default,settings,empty,value,if,output,get,node,get,key,null,output,put,node,get,key,default,node,name,get
InternalSettingsPreparer -> private static void finalizeSettings(Settings.Builder output, Supplier<String> defaultNodeName);1549608646;Finish preparing settings by replacing forced settings and any defaults that need to be added.;private static void finalizeSettings(Settings.Builder output, Supplier<String> defaultNodeName) {_        _        List<String> forcedSettings = new ArrayList<>()__        for (String setting : output.keys()) {_            if (setting.startsWith("force.")) {_                forcedSettings.add(setting)__            }_        }_        for (String forcedSetting : forcedSettings) {_            String value = output.remove(forcedSetting)__            output.put(forcedSetting.substring("force.".length()), value)__        }_        output.replacePropertyPlaceholders()___        _        if (output.get(ClusterName.CLUSTER_NAME_SETTING.getKey()) == null) {_            output.put(ClusterName.CLUSTER_NAME_SETTING.getKey(), ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY).value())__        }_        if (output.get(Node.NODE_NAME_SETTING.getKey()) == null) {_            output.put(Node.NODE_NAME_SETTING.getKey(), defaultNodeName.get())__        }_    };finish,preparing,settings,by,replacing,forced,settings,and,any,defaults,that,need,to,be,added;private,static,void,finalize,settings,settings,builder,output,supplier,string,default,node,name,list,string,forced,settings,new,array,list,for,string,setting,output,keys,if,setting,starts,with,force,forced,settings,add,setting,for,string,forced,setting,forced,settings,string,value,output,remove,forced,setting,output,put,forced,setting,substring,force,length,value,output,replace,property,placeholders,if,output,get,cluster,name,get,key,null,output,put,cluster,name,get,key,cluster,name,get,default,settings,empty,value,if,output,get,node,get,key,null,output,put,node,get,key,default,node,name,get
InternalSettingsPreparer -> public static Environment prepareEnvironment(Settings input, Map<String, String> properties,             Path configPath, Supplier<String> defaultNodeName);1537806831;Prepares the settings by gathering all elasticsearch system properties, optionally loading the configuration settings.__@param input      the custom settings to use_ these are not overwritten by settings in the configuration file_@param properties map of properties key/value pairs (usually from the command-line)_@param configPath path to config directory_ (use null to indicate the default)_@param defaultNodeName supplier for the default node.name if the setting isn't defined_@return the {@link Environment};public static Environment prepareEnvironment(Settings input, Map<String, String> properties,_            Path configPath, Supplier<String> defaultNodeName) {_        _        Settings.Builder output = Settings.builder()__        initializeSettings(output, input, properties)__        Environment environment = new Environment(output.build(), configPath)___        if (Files.exists(environment.configFile().resolve("elasticsearch.yaml"))) {_            throw new SettingsException("elasticsearch.yaml was deprecated in 5.5.0 and must be renamed to elasticsearch.yml")__        }__        if (Files.exists(environment.configFile().resolve("elasticsearch.json"))) {_            throw new SettingsException("elasticsearch.json was deprecated in 5.5.0 and must be converted to elasticsearch.yml")__        }__        output = Settings.builder()_ _        Path path = environment.configFile().resolve("elasticsearch.yml")__        if (Files.exists(path)) {_            try {_                output.loadFromPath(path)__            } catch (IOException e) {_                throw new SettingsException("Failed to load settings from " + path.toString(), e)__            }_        }__        _        initializeSettings(output, input, properties)__        checkSettingsForTerminalDeprecation(output)__        finalizeSettings(output, defaultNodeName)___        environment = new Environment(output.build(), configPath)___        _        output.put(Environment.PATH_LOGS_SETTING.getKey(), environment.logsFile().toAbsolutePath().normalize().toString())__        return new Environment(output.build(), configPath)__    };prepares,the,settings,by,gathering,all,elasticsearch,system,properties,optionally,loading,the,configuration,settings,param,input,the,custom,settings,to,use,these,are,not,overwritten,by,settings,in,the,configuration,file,param,properties,map,of,properties,key,value,pairs,usually,from,the,command,line,param,config,path,path,to,config,directory,use,null,to,indicate,the,default,param,default,node,name,supplier,for,the,default,node,name,if,the,setting,isn,t,defined,return,the,link,environment;public,static,environment,prepare,environment,settings,input,map,string,string,properties,path,config,path,supplier,string,default,node,name,settings,builder,output,settings,builder,initialize,settings,output,input,properties,environment,environment,new,environment,output,build,config,path,if,files,exists,environment,config,file,resolve,elasticsearch,yaml,throw,new,settings,exception,elasticsearch,yaml,was,deprecated,in,5,5,0,and,must,be,renamed,to,elasticsearch,yml,if,files,exists,environment,config,file,resolve,elasticsearch,json,throw,new,settings,exception,elasticsearch,json,was,deprecated,in,5,5,0,and,must,be,converted,to,elasticsearch,yml,output,settings,builder,path,path,environment,config,file,resolve,elasticsearch,yml,if,files,exists,path,try,output,load,from,path,path,catch,ioexception,e,throw,new,settings,exception,failed,to,load,settings,from,path,to,string,e,initialize,settings,output,input,properties,check,settings,for,terminal,deprecation,output,finalize,settings,output,default,node,name,environment,new,environment,output,build,config,path,output,put,environment,get,key,environment,logs,file,to,absolute,path,normalize,to,string,return,new,environment,output,build,config,path
InternalSettingsPreparer -> public static Environment prepareEnvironment(Settings input, Map<String, String> properties,             Path configPath, Supplier<String> defaultNodeName);1549608646;Prepares the settings by gathering all elasticsearch system properties, optionally loading the configuration settings.__@param input      the custom settings to use_ these are not overwritten by settings in the configuration file_@param properties map of properties key/value pairs (usually from the command-line)_@param configPath path to config directory_ (use null to indicate the default)_@param defaultNodeName supplier for the default node.name if the setting isn't defined_@return the {@link Environment};public static Environment prepareEnvironment(Settings input, Map<String, String> properties,_            Path configPath, Supplier<String> defaultNodeName) {_        _        Settings.Builder output = Settings.builder()__        initializeSettings(output, input, properties)__        Environment environment = new Environment(output.build(), configPath)___        if (Files.exists(environment.configFile().resolve("elasticsearch.yaml"))) {_            throw new SettingsException("elasticsearch.yaml was deprecated in 5.5.0 and must be renamed to elasticsearch.yml")__        }__        if (Files.exists(environment.configFile().resolve("elasticsearch.json"))) {_            throw new SettingsException("elasticsearch.json was deprecated in 5.5.0 and must be converted to elasticsearch.yml")__        }__        output = Settings.builder()_ _        Path path = environment.configFile().resolve("elasticsearch.yml")__        if (Files.exists(path)) {_            try {_                output.loadFromPath(path)__            } catch (IOException e) {_                throw new SettingsException("Failed to load settings from " + path.toString(), e)__            }_        }__        _        initializeSettings(output, input, properties)__        finalizeSettings(output, defaultNodeName)___        environment = new Environment(output.build(), configPath)___        _        output.put(Environment.PATH_LOGS_SETTING.getKey(), environment.logsFile().toAbsolutePath().normalize().toString())__        return new Environment(output.build(), configPath)__    };prepares,the,settings,by,gathering,all,elasticsearch,system,properties,optionally,loading,the,configuration,settings,param,input,the,custom,settings,to,use,these,are,not,overwritten,by,settings,in,the,configuration,file,param,properties,map,of,properties,key,value,pairs,usually,from,the,command,line,param,config,path,path,to,config,directory,use,null,to,indicate,the,default,param,default,node,name,supplier,for,the,default,node,name,if,the,setting,isn,t,defined,return,the,link,environment;public,static,environment,prepare,environment,settings,input,map,string,string,properties,path,config,path,supplier,string,default,node,name,settings,builder,output,settings,builder,initialize,settings,output,input,properties,environment,environment,new,environment,output,build,config,path,if,files,exists,environment,config,file,resolve,elasticsearch,yaml,throw,new,settings,exception,elasticsearch,yaml,was,deprecated,in,5,5,0,and,must,be,renamed,to,elasticsearch,yml,if,files,exists,environment,config,file,resolve,elasticsearch,json,throw,new,settings,exception,elasticsearch,json,was,deprecated,in,5,5,0,and,must,be,converted,to,elasticsearch,yml,output,settings,builder,path,path,environment,config,file,resolve,elasticsearch,yml,if,files,exists,path,try,output,load,from,path,path,catch,ioexception,e,throw,new,settings,exception,failed,to,load,settings,from,path,to,string,e,initialize,settings,output,input,properties,finalize,settings,output,default,node,name,environment,new,environment,output,build,config,path,output,put,environment,get,key,environment,logs,file,to,absolute,path,normalize,to,string,return,new,environment,output,build,config,path
