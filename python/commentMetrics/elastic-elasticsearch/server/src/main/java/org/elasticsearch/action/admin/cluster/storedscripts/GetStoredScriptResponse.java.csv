commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getId() {     return id. }
true;public;0;3;/**  * @return if a stored script and if not found <code>null</code>  */ ;/**  * @return if a stored script and if not found <code>null</code>  */ public StoredScriptSource getSource() {     return source. }
false;public;0;4;;@Override public RestStatus status() {     return source != null ? RestStatus.OK : RestStatus.NOT_FOUND. }
false;public;2;14;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(_ID_PARSE_FIELD.getPreferredName(), id).     builder.field(FOUND_PARSE_FIELD.getPreferredName(), source != null).     if (source != null) {         builder.field(StoredScriptSource.SCRIPT_PARSE_FIELD.getPreferredName()).         source.toXContent(builder, params).     }     builder.endObject().     return builder. }
false;public,static;1;3;;public static GetStoredScriptResponse fromXContent(XContentParser parser) throws IOException {     return PARSER.parse(parser, null). }
false;public;1;14;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     if (in.readBoolean()) {         source = new StoredScriptSource(in).     } else {         source = null.     }     if (in.getVersion().onOrAfter(Version.V_6_4_0)) {         id = in.readString().     } }
false;public;1;14;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     if (source == null) {         out.writeBoolean(false).     } else {         out.writeBoolean(true).         source.writeTo(out).     }     if (out.getVersion().onOrAfter(Version.V_6_4_0)) {         out.writeString(id).     } }
false;public;1;8;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     GetStoredScriptResponse that = (GetStoredScriptResponse) o.     return Objects.equals(id, that.id) && Objects.equals(source, that.source). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(id, source). }
