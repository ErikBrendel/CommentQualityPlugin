commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;6;;@Override protected NodesReloadSecureSettingsResponse newResponse(NodesReloadSecureSettingsRequest request, List<NodesReloadSecureSettingsResponse.NodeResponse> responses, List<FailedNodeException> failures) {     return new NodesReloadSecureSettingsResponse(clusterService.getClusterName(), responses, failures). }
false;protected;2;4;;@Override protected NodeRequest newNodeRequest(String nodeId, NodesReloadSecureSettingsRequest request) {     return new NodeRequest(nodeId, request). }
false;protected;0;4;;@Override protected NodesReloadSecureSettingsResponse.NodeResponse newNodeResponse() {     return new NodesReloadSecureSettingsResponse.NodeResponse(). }
false;protected;1;31;;@Override protected NodesReloadSecureSettingsResponse.NodeResponse nodeOperation(NodeRequest nodeReloadRequest) {     try (KeyStoreWrapper keystore = KeyStoreWrapper.load(environment.configFile())) {         // reread keystore from config file         if (keystore == null) {             return new NodesReloadSecureSettingsResponse.NodeResponse(clusterService.localNode(), new IllegalStateException("Keystore is missing")).         }         keystore.decrypt(new char[0]).         // add the keystore to the original node settings object         final Settings settingsWithKeystore = Settings.builder().put(environment.settings(), false).setSecureSettings(keystore).build().         final List<Exception> exceptions = new ArrayList<>().         // broadcast the new settings object (with the open embedded keystore) to all reloadable plugins         pluginsService.filterPlugins(ReloadablePlugin.class).stream().forEach(p -> {             try {                 p.reload(settingsWithKeystore).             } catch (final Exception e) {                 logger.warn((Supplier<?>) () -> new ParameterizedMessage("Reload failed for plugin [{}]", p.getClass().getSimpleName()), e).                 exceptions.add(e).             }         }).         ExceptionsHelper.rethrowAndSuppress(exceptions).         return new NodesReloadSecureSettingsResponse.NodeResponse(clusterService.localNode(), null).     } catch (final Exception e) {         return new NodesReloadSecureSettingsResponse.NodeResponse(clusterService.localNode(), e).     } }
false;public;1;6;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     request = new NodesReloadSecureSettingsRequest().     request.readFrom(in). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     request.writeTo(out). }
