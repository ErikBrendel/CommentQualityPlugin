commented;modifiers;parameterAmount;loc;comment;code
false;public;1;12;;@Override public void writeTo(StreamOutput out) throws IOException {     // total aggregates do not have a path     out.writeOptionalString(path).     out.writeOptionalString(mount).     out.writeOptionalString(type).     out.writeLong(total).     out.writeLong(free).     out.writeLong(available).     if (out.getVersion().before(Version.V_6_0_0_alpha1)) {         out.writeOptionalBoolean(null).     } }
false;public;0;3;;public String getPath() {     return path. }
false;public;0;3;;public String getMount() {     return mount. }
false;public;0;3;;public String getType() {     return type. }
false;public;0;3;;public ByteSizeValue getTotal() {     return new ByteSizeValue(total). }
false;public;0;3;;public ByteSizeValue getFree() {     return new ByteSizeValue(free). }
false;public;0;3;;public ByteSizeValue getAvailable() {     return new ByteSizeValue(available). }
false;private;2;9;;private long addLong(long current, long other) {     if (other == -1) {         return current.     }     if (current == -1) {         return other.     }     return current + other. }
false;private;2;9;;private double addDouble(double current, double other) {     if (other == -1) {         return current.     }     if (current == -1) {         return other.     }     return current + other. }
false;public;1;5;;public void add(Path path) {     total = FsProbe.adjustForHugeFilesystems(addLong(total, path.total)).     free = FsProbe.adjustForHugeFilesystems(addLong(free, path.free)).     available = FsProbe.adjustForHugeFilesystems(addLong(available, path.available)). }
false;public;2;26;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     if (path != null) {         builder.field(Fields.PATH, path).     }     if (mount != null) {         builder.field(Fields.MOUNT, mount).     }     if (type != null) {         builder.field(Fields.TYPE, type).     }     if (total != -1) {         builder.humanReadableField(Fields.TOTAL_IN_BYTES, Fields.TOTAL, getTotal()).     }     if (free != -1) {         builder.humanReadableField(Fields.FREE_IN_BYTES, Fields.FREE, getFree()).     }     if (available != -1) {         builder.humanReadableField(Fields.AVAILABLE_IN_BYTES, Fields.AVAILABLE, getAvailable()).     }     builder.endObject().     return builder. }
false;public;1;14;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeVInt(majorDeviceNumber).     out.writeVInt(minorDeviceNumber).     out.writeString(deviceName).     out.writeLong(currentReadsCompleted).     out.writeLong(previousReadsCompleted).     out.writeLong(currentWritesCompleted).     out.writeLong(previousWritesCompleted).     out.writeLong(currentSectorsRead).     out.writeLong(previousSectorsRead).     out.writeLong(currentSectorsWritten).     out.writeLong(previousSectorsWritten). }
false;public;0;6;;public long operations() {     if (previousReadsCompleted == -1 || previousWritesCompleted == -1)         return -1.     return (currentReadsCompleted - previousReadsCompleted) + (currentWritesCompleted - previousWritesCompleted). }
false;public;0;5;;public long readOperations() {     if (previousReadsCompleted == -1)         return -1.     return (currentReadsCompleted - previousReadsCompleted). }
false;public;0;5;;public long writeOperations() {     if (previousWritesCompleted == -1)         return -1.     return (currentWritesCompleted - previousWritesCompleted). }
false;public;0;5;;public long readKilobytes() {     if (previousSectorsRead == -1)         return -1.     return (currentSectorsRead - previousSectorsRead) / 2. }
false;public;0;5;;public long writeKilobytes() {     if (previousSectorsWritten == -1)         return -1.     return (currentSectorsWritten - previousSectorsWritten) / 2. }
false;public;2;10;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.field("device_name", deviceName).     builder.field(IoStats.OPERATIONS, operations()).     builder.field(IoStats.READ_OPERATIONS, readOperations()).     builder.field(IoStats.WRITE_OPERATIONS, writeOperations()).     builder.field(IoStats.READ_KILOBYTES, readKilobytes()).     builder.field(IoStats.WRITE_KILOBYTES, writeKilobytes()).     return builder. }
false;public;1;12;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeVInt(devicesStats.length).     for (int i = 0. i < devicesStats.length. i++) {         devicesStats[i].writeTo(out).     }     out.writeLong(totalOperations).     out.writeLong(totalReadOperations).     out.writeLong(totalWriteOperations).     out.writeLong(totalReadKilobytes).     out.writeLong(totalWriteKilobytes). }
false;public;0;3;;public DeviceStats[] getDevicesStats() {     return devicesStats. }
false;public;0;3;;public long getTotalOperations() {     return totalOperations. }
false;public;0;3;;public long getTotalReadOperations() {     return totalReadOperations. }
false;public;0;3;;public long getTotalWriteOperations() {     return totalWriteOperations. }
false;public;0;3;;public long getTotalReadKilobytes() {     return totalReadKilobytes. }
false;public;0;3;;public long getTotalWriteKilobytes() {     return totalWriteKilobytes. }
false;public;2;21;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     if (devicesStats.length > 0) {         builder.startArray("devices").         for (DeviceStats deviceStats : devicesStats) {             builder.startObject().             deviceStats.toXContent(builder, params).             builder.endObject().         }         builder.endArray().         builder.startObject("total").         builder.field(OPERATIONS, totalOperations).         builder.field(READ_OPERATIONS, totalReadOperations).         builder.field(WRITE_OPERATIONS, totalWriteOperations).         builder.field(READ_KILOBYTES, totalReadKilobytes).         builder.field(WRITE_KILOBYTES, totalWriteKilobytes).         builder.endObject().     }     return builder. }
false;public;1;13;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeVLong(timestamp).     out.writeOptionalWriteable(ioStats).     out.writeVInt(paths.length).     for (Path path : paths) {         path.writeTo(out).     }     if (out.getVersion().onOrAfter(Version.V_6_0_0_alpha1)) {         out.writeOptionalWriteable(this.leastDiskEstimate).         out.writeOptionalWriteable(this.mostDiskEstimate).     } }
false;public;0;3;;public Path getTotal() {     return total. }
false;public;0;4;;@Nullable public DiskUsage getLeastDiskEstimate() {     return this.leastDiskEstimate. }
false;public;0;4;;@Nullable public DiskUsage getMostDiskEstimate() {     return this.mostDiskEstimate. }
false;private;0;13;;private Path total() {     Path res = new Path().     Set<String> seenDevices = new HashSet<>(paths.length).     for (Path subPath : paths) {         if (subPath.path != null) {             if (!seenDevices.add(subPath.path)) {                 // already added numbers for this device.                 continue.             }         }         res.add(subPath).     }     return res. }
false;public;0;3;;public long getTimestamp() {     return timestamp. }
false;public;0;3;;public IoStats getIoStats() {     return ioStats. }
false;public;0;4;;@Override public Iterator<Path> iterator() {     return Arrays.stream(paths).iterator(). }
false;public;2;41;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(Fields.FS).     builder.field(Fields.TIMESTAMP, timestamp).     builder.field(Fields.TOTAL).     total().toXContent(builder, params).     if (leastDiskEstimate != null) {         builder.startObject(Fields.LEAST_ESTIMATE).         {             builder.field(Fields.PATH, leastDiskEstimate.getPath()).             builder.humanReadableField(Fields.TOTAL_IN_BYTES, Fields.TOTAL, new ByteSizeValue(leastDiskEstimate.getTotalBytes())).             builder.humanReadableField(Fields.AVAILABLE_IN_BYTES, Fields.AVAILABLE, new ByteSizeValue(leastDiskEstimate.getFreeBytes())).             builder.field(Fields.USAGE_PERCENTAGE, leastDiskEstimate.getUsedDiskAsPercentage()).         }         builder.endObject().     }     if (mostDiskEstimate != null) {         builder.startObject(Fields.MOST_ESTIMATE).         {             builder.field(Fields.PATH, mostDiskEstimate.getPath()).             builder.humanReadableField(Fields.TOTAL_IN_BYTES, Fields.TOTAL, new ByteSizeValue(mostDiskEstimate.getTotalBytes())).             builder.humanReadableField(Fields.AVAILABLE_IN_BYTES, Fields.AVAILABLE, new ByteSizeValue(mostDiskEstimate.getFreeBytes())).             builder.field(Fields.USAGE_PERCENTAGE, mostDiskEstimate.getUsedDiskAsPercentage()).         }         builder.endObject().     }     builder.startArray(Fields.DATA).     for (Path path : paths) {         path.toXContent(builder, params).     }     builder.endArray().     if (ioStats != null) {         builder.startObject(Fields.IO_STATS).         ioStats.toXContent(builder, params).         builder.endObject().     }     builder.endObject().     return builder. }
