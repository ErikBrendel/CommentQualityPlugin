commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;7;;@Override protected void doWriteTo(StreamOutput out) throws IOException {     out.writeString(field).     out.writeFloat(factor).     out.writeOptionalDouble(missing).     modifier.writeTo(out). }
false;public;0;4;;@Override public String getName() {     return NAME. }
false;public;0;3;;public String fieldName() {     return this.field. }
false;public;1;4;;public FieldValueFactorFunctionBuilder factor(float boostFactor) {     this.factor = boostFactor.     return this. }
false;public;0;3;;public float factor() {     return this.factor. }
true;public;1;4;/**  * Value used instead of the field value for documents that don't have that field defined.  */ ;/**  * Value used instead of the field value for documents that don't have that field defined.  */ public FieldValueFactorFunctionBuilder missing(double missing) {     this.missing = missing.     return this. }
false;public;0;3;;public Double missing() {     return this.missing. }
false;public;1;7;;public FieldValueFactorFunctionBuilder modifier(FieldValueFactorFunction.Modifier modifier) {     if (modifier == null) {         throw new IllegalArgumentException("field_value_factor: modifier must not be null").     }     this.modifier = modifier.     return this. }
false;public;0;3;;public FieldValueFactorFunction.Modifier modifier() {     return this.modifier. }
false;public;2;11;;@Override public void doXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(getName()).     builder.field("field", field).     builder.field("factor", factor).     if (missing != null) {         builder.field("missing", missing).     }     builder.field("modifier", modifier.name().toLowerCase(Locale.ROOT)).     builder.endObject(). }
false;protected;1;7;;@Override protected boolean doEquals(FieldValueFactorFunctionBuilder functionBuilder) {     return Objects.equals(this.field, functionBuilder.field) && Objects.equals(this.factor, functionBuilder.factor) && Objects.equals(this.missing, functionBuilder.missing) && Objects.equals(this.modifier, functionBuilder.modifier). }
false;protected;0;4;;@Override protected int doHashCode() {     return Objects.hash(this.field, this.factor, this.missing, this.modifier). }
false;protected;1;13;;@Override protected ScoreFunction doToFunction(QueryShardContext context) {     MappedFieldType fieldType = context.getMapperService().fullName(field).     IndexNumericFieldData fieldData = null.     if (fieldType == null) {         if (missing == null) {             throw new ElasticsearchException("Unable to find a field mapper for field [" + field + "]. No 'missing' value defined.").         }     } else {         fieldData = context.getForField(fieldType).     }     return new FieldValueFactorFunction(field, factor, modifier, missing, fieldData). }
false;public,static;1;41;;public static FieldValueFactorFunctionBuilder fromXContent(XContentParser parser) throws IOException, ParsingException {     String currentFieldName = null.     String field = null.     float boostFactor = FieldValueFactorFunctionBuilder.DEFAULT_FACTOR.     FieldValueFactorFunction.Modifier modifier = FieldValueFactorFunction.Modifier.NONE.     Double missing = null.     XContentParser.Token token.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             currentFieldName = parser.currentName().         } else if (token.isValue()) {             if ("field".equals(currentFieldName)) {                 field = parser.text().             } else if ("factor".equals(currentFieldName)) {                 boostFactor = parser.floatValue().             } else if ("modifier".equals(currentFieldName)) {                 modifier = FieldValueFactorFunction.Modifier.fromString(parser.text()).             } else if ("missing".equals(currentFieldName)) {                 missing = parser.doubleValue().             } else {                 throw new ParsingException(parser.getTokenLocation(), NAME + " query does not support [" + currentFieldName + "]").             }         } else if ("factor".equals(currentFieldName) && (token == XContentParser.Token.START_ARRAY || token == XContentParser.Token.START_OBJECT)) {             throw new ParsingException(parser.getTokenLocation(), "[" + NAME + "] field 'factor' does not support lists or objects").         }     }     if (field == null) {         throw new ParsingException(parser.getTokenLocation(), "[" + NAME + "] required field 'field' missing").     }     FieldValueFactorFunctionBuilder fieldValueFactorFunctionBuilder = new FieldValueFactorFunctionBuilder(field).factor(boostFactor).modifier(modifier).     if (missing != null) {         fieldValueFactorFunctionBuilder.missing(missing).     }     return fieldValueFactorFunctionBuilder. }
