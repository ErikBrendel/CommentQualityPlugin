commented;modifiers;parameterAmount;loc;comment;code
false;public;1;11;;@Override public boolean implies(Permission p) {     // check for a special value of STANDARD to imply the basic set     if (p != null && p.getClass() == getClass()) {         ClassPermission other = (ClassPermission) p.         if (STANDARD.equals(getName()) && STANDARD_CLASSES.contains(other.getName())) {             return true.         }     }     return super.implies(p). }
false;public;1;10;;@Override public void add(Permission permission) {     if (permission instanceof ClassPermission && STANDARD.equals(permission.getName())) {         for (String clazz : STANDARD_CLASSES) {             impl.add(new ClassPermission(clazz)).         }     } else {         impl.add(permission).     } }
false;public;1;4;;@Override public boolean implies(Permission permission) {     return impl.implies(permission). }
false;public;0;4;;@Override public Enumeration<Permission> elements() {     return impl.elements(). }
false;public;0;27;;@Override public PermissionCollection newPermissionCollection() {     // BasicPermissionCollection only handles wildcards, we expand <<STANDARD>> here     PermissionCollection impl = super.newPermissionCollection().     return new PermissionCollection() {          @Override         public void add(Permission permission) {             if (permission instanceof ClassPermission && STANDARD.equals(permission.getName())) {                 for (String clazz : STANDARD_CLASSES) {                     impl.add(new ClassPermission(clazz)).                 }             } else {                 impl.add(permission).             }         }          @Override         public boolean implies(Permission permission) {             return impl.implies(permission).         }          @Override         public Enumeration<Permission> elements() {             return impl.elements().         }     }. }
