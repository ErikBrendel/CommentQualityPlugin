commented;modifiers;parameterAmount;loc;comment;code
false;public;2;76;;@Override public void hitExecute(SearchContext context, HitContext hitContext) {     if (context.highlight() == null) {         return.     }     Map<String, HighlightField> highlightFields = new HashMap<>().     for (SearchContextHighlight.Field field : context.highlight().fields()) {         Collection<String> fieldNamesToHighlight.         if (Regex.isSimpleMatchPattern(field.field())) {             fieldNamesToHighlight = context.mapperService().simpleMatchToFullName(field.field()).         } else {             fieldNamesToHighlight = Collections.singletonList(field.field()).         }         if (context.highlight().forceSource(field)) {             SourceFieldMapper sourceFieldMapper = context.mapperService().documentMapper(hitContext.hit().getType()).sourceMapper().             if (!sourceFieldMapper.enabled()) {                 throw new IllegalArgumentException("source is forced for fields " + fieldNamesToHighlight + " but type [" + hitContext.hit().getType() + "] has disabled _source").             }         }         boolean fieldNameContainsWildcards = field.field().contains("*").         for (String fieldName : fieldNamesToHighlight) {             MappedFieldType fieldType = context.mapperService().fullName(fieldName).             if (fieldType == null) {                 continue.             }             // what they were doing and try to highlight anyway.             if (fieldNameContainsWildcards) {                 if (fieldType.typeName().equals(TextFieldMapper.CONTENT_TYPE) == false && fieldType.typeName().equals(KeywordFieldMapper.CONTENT_TYPE) == false) {                     continue.                 }             }             String highlighterType = field.fieldOptions().highlighterType().             if (highlighterType == null) {                 highlighterType = "unified".             }             Highlighter highlighter = highlighters.get(highlighterType).             if (highlighter == null) {                 throw new IllegalArgumentException("unknown highlighter type [" + highlighterType + "] for the field [" + fieldName + "]").             }             Query highlightQuery = field.fieldOptions().highlightQuery().             if (highlightQuery == null) {                 highlightQuery = context.parsedQuery().query().             }             HighlighterContext highlighterContext = new HighlighterContext(fieldType.name(), field, fieldType, context, hitContext, highlightQuery).             if ((highlighter.canHighlight(fieldType) == false) && fieldNameContainsWildcards) {                 // if several fieldnames matched the wildcard then we want to skip those that we cannot highlight                 continue.             }             HighlightField highlightField = highlighter.highlight(highlighterContext).             if (highlightField != null) {                 // Note that we make sure to use the original field name in the response. This is because the                 // original field could be an alias, and highlighter implementations may instead reference the                 // concrete field it points to.                 highlightFields.put(fieldName, new HighlightField(fieldName, highlightField.fragments())).             }         }     }     hitContext.hit().highlightFields(highlightFields). }
