commented;modifiers;parameterAmount;loc;comment;code
false;public,final;2;6;;@Override public final ClusterTasksResult<ClusterStateUpdateTask> execute(ClusterState currentState, List<ClusterStateUpdateTask> tasks) throws Exception {     ClusterState result = execute(currentState).     return ClusterTasksResult.<ClusterStateUpdateTask>builder().successes(tasks).build(result). }
false;public;1;4;;@Override public String describeTasks(List<ClusterStateUpdateTask> tasks) {     // one of task, source is enough     return "". }
true;public,abstract;1;1;/**  * Update the cluster state based on the current state. Return the *same instance* if no state  * should be changed.  */ ;/**  * Update the cluster state based on the current state. Return the *same instance* if no state  * should be changed.  */ public abstract ClusterState execute(ClusterState currentState) throws Exception.
true;public,abstract;2;1;/**  * A callback called when execute fails.  */ ;/**  * A callback called when execute fails.  */ public abstract void onFailure(String source, Exception e).
false;public,final;1;5;;@Override public final void clusterStatePublished(ClusterChangedEvent clusterChangedEvent) { // final, empty implementation here as this method should only be defined in combination // with a batching executor as it will always be executed within the system context. }
true;public;0;4;/**  * If the cluster state update task wasn't processed by the provided timeout, call  * {@link ClusterStateTaskListener#onFailure(String, Exception)}. May return null to indicate no timeout is needed (default).  */ ;/**  * If the cluster state update task wasn't processed by the provided timeout, call  * {@link ClusterStateTaskListener#onFailure(String, Exception)}. May return null to indicate no timeout is needed (default).  */ @Nullable public TimeValue timeout() {     return null. }
false;public;0;4;;@Override public Priority priority() {     return priority. }
true;public,final;0;4;/**  * Marked as final as cluster state update tasks should only run on master.  * For local requests, use {@link LocalClusterUpdateTask} instead.  */ ;/**  * Marked as final as cluster state update tasks should only run on master.  * For local requests, use {@link LocalClusterUpdateTask} instead.  */ @Override public final boolean runOnlyOnMaster() {     return true. }
