commented;modifiers;parameterAmount;loc;comment;code
true;public;0;6;/**  * Returns a value that was created by <code>supplier</code>. The value might  * have been previously created, if not it will be created now, thread safe of  * course.  */ ;/**  * Returns a value that was created by <code>supplier</code>. The value might  * have been previously created, if not it will be created now, thread safe of  * course.  */ public T getOrCompute() throws E {     // Read volatile just once...     final T readOnce = value.     final T result = readOnce == null ? maybeCompute(supplier) : readOnce.     onGet.accept(result).     return result. }
true;public,synchronized;0;6;/**  * Clears the value, if it has been previously created by calling  * {@code #getOrCompute()}. The <code>onReset</code> will be called on this  * value. The next call to {@code #getOrCompute()} will recreate the value.  */ ;/**  * Clears the value, if it has been previously created by calling  * {@code #getOrCompute()}. The <code>onReset</code> will be called on this  * value. The next call to {@code #getOrCompute()} will recreate the value.  */ public synchronized void reset() {     if (value != null) {         onReset.accept(value).         value = null.     } }
true;private,synchronized;1;6;/**  * Creates a new value thread safely.  */ ;/**  * Creates a new value thread safely.  */ private synchronized T maybeCompute(CheckedSupplier<T, E> supplier) throws E {     if (value == null) {         value = Objects.requireNonNull(supplier.get()).     }     return value. }
