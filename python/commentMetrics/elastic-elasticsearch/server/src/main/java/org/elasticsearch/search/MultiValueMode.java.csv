# id;timestamp;commentText;codeText;commentWords;codeWords
MultiValueMode -> public NumericDocValues select(final SortedNumericDocValues values, final long missingValue, final BitSet parentDocs, final DocIdSetIterator childDocs, int maxDoc) throws IOException;1524684173;Return a {@link NumericDocValues} instance that can be used to sort root documents_with this mode, the provided values and filters for root/inner documents.__For every root document, the values of its inner documents will be aggregated._If none of the inner documents has a value, then <code>missingValue</code> is returned.__Allowed Modes: SUM, AVG, MIN, MAX__NOTE: Calling the returned instance on docs that are not root docs is illegal_The returned instance can only be evaluate the current and upcoming docs;public NumericDocValues select(final SortedNumericDocValues values, final long missingValue, final BitSet parentDocs, final DocIdSetIterator childDocs, int maxDoc) throws IOException {_        if (parentDocs == null || childDocs == null) {_            return select(DocValues.emptySortedNumeric(maxDoc), missingValue)__        }__        return new AbstractNumericDocValues() {__            int lastSeenParentDoc = -1__            long lastEmittedValue = missingValue___            @Override_            public boolean advanceExact(int parentDoc) throws IOException {_                assert parentDoc >= lastSeenParentDoc : "can only evaluate current and upcoming parent docs"__                if (parentDoc == lastSeenParentDoc) {_                    return true__                } else if (parentDoc == 0) {_                    lastEmittedValue = missingValue__                    return true__                }_                final int prevParentDoc = parentDocs.prevSetBit(parentDoc - 1)__                final int firstChildDoc__                if (childDocs.docID() > prevParentDoc) {_                    firstChildDoc = childDocs.docID()__                } else {_                    firstChildDoc = childDocs.advance(prevParentDoc + 1)__                }__                lastSeenParentDoc = parentDoc__                lastEmittedValue = pick(values, missingValue, childDocs, firstChildDoc, parentDoc)__                return true__            }__            @Override_            public int docID() {_                return lastSeenParentDoc__            }__            @Override_            public long longValue() {_                return lastEmittedValue__            }_        }__    };return,a,link,numeric,doc,values,instance,that,can,be,used,to,sort,root,documents,with,this,mode,the,provided,values,and,filters,for,root,inner,documents,for,every,root,document,the,values,of,its,inner,documents,will,be,aggregated,if,none,of,the,inner,documents,has,a,value,then,code,missing,value,code,is,returned,allowed,modes,sum,avg,min,max,note,calling,the,returned,instance,on,docs,that,are,not,root,docs,is,illegal,the,returned,instance,can,only,be,evaluate,the,current,and,upcoming,docs;public,numeric,doc,values,select,final,sorted,numeric,doc,values,values,final,long,missing,value,final,bit,set,parent,docs,final,doc,id,set,iterator,child,docs,int,max,doc,throws,ioexception,if,parent,docs,null,child,docs,null,return,select,doc,values,empty,sorted,numeric,max,doc,missing,value,return,new,abstract,numeric,doc,values,int,last,seen,parent,doc,1,long,last,emitted,value,missing,value,override,public,boolean,advance,exact,int,parent,doc,throws,ioexception,assert,parent,doc,last,seen,parent,doc,can,only,evaluate,current,and,upcoming,parent,docs,if,parent,doc,last,seen,parent,doc,return,true,else,if,parent,doc,0,last,emitted,value,missing,value,return,true,final,int,prev,parent,doc,parent,docs,prev,set,bit,parent,doc,1,final,int,first,child,doc,if,child,docs,doc,id,prev,parent,doc,first,child,doc,child,docs,doc,id,else,first,child,doc,child,docs,advance,prev,parent,doc,1,last,seen,parent,doc,parent,doc,last,emitted,value,pick,values,missing,value,child,docs,first,child,doc,parent,doc,return,true,override,public,int,doc,id,return,last,seen,parent,doc,override,public,long,long,value,return,last,emitted,value
MultiValueMode -> public NumericDocValues select(final SortedNumericDocValues values, final long missingValue, final BitSet parentDocs, final DocIdSetIterator childDocs, int maxDoc) throws IOException;1528211342;Return a {@link NumericDocValues} instance that can be used to sort root documents_with this mode, the provided values and filters for root/inner documents.__For every root document, the values of its inner documents will be aggregated._If none of the inner documents has a value, then <code>missingValue</code> is returned.__Allowed Modes: SUM, AVG, MIN, MAX__NOTE: Calling the returned instance on docs that are not root docs is illegal_The returned instance can only be evaluate the current and upcoming docs;public NumericDocValues select(final SortedNumericDocValues values, final long missingValue, final BitSet parentDocs, final DocIdSetIterator childDocs, int maxDoc) throws IOException {_        if (parentDocs == null || childDocs == null) {_            return FieldData.replaceMissing(DocValues.emptyNumeric(), missingValue)__        }__        return new AbstractNumericDocValues() {__            int lastSeenParentDoc = -1__            long lastEmittedValue = missingValue___            @Override_            public boolean advanceExact(int parentDoc) throws IOException {_                assert parentDoc >= lastSeenParentDoc : "can only evaluate current and upcoming parent docs"__                if (parentDoc == lastSeenParentDoc) {_                    return true__                } else if (parentDoc == 0) {_                    lastEmittedValue = missingValue__                    return true__                }_                final int prevParentDoc = parentDocs.prevSetBit(parentDoc - 1)__                final int firstChildDoc__                if (childDocs.docID() > prevParentDoc) {_                    firstChildDoc = childDocs.docID()__                } else {_                    firstChildDoc = childDocs.advance(prevParentDoc + 1)__                }__                lastSeenParentDoc = parentDoc__                lastEmittedValue = pick(values, missingValue, childDocs, firstChildDoc, parentDoc)__                return true__            }__            @Override_            public int docID() {_                return lastSeenParentDoc__            }__            @Override_            public long longValue() {_                return lastEmittedValue__            }_        }__    };return,a,link,numeric,doc,values,instance,that,can,be,used,to,sort,root,documents,with,this,mode,the,provided,values,and,filters,for,root,inner,documents,for,every,root,document,the,values,of,its,inner,documents,will,be,aggregated,if,none,of,the,inner,documents,has,a,value,then,code,missing,value,code,is,returned,allowed,modes,sum,avg,min,max,note,calling,the,returned,instance,on,docs,that,are,not,root,docs,is,illegal,the,returned,instance,can,only,be,evaluate,the,current,and,upcoming,docs;public,numeric,doc,values,select,final,sorted,numeric,doc,values,values,final,long,missing,value,final,bit,set,parent,docs,final,doc,id,set,iterator,child,docs,int,max,doc,throws,ioexception,if,parent,docs,null,child,docs,null,return,field,data,replace,missing,doc,values,empty,numeric,missing,value,return,new,abstract,numeric,doc,values,int,last,seen,parent,doc,1,long,last,emitted,value,missing,value,override,public,boolean,advance,exact,int,parent,doc,throws,ioexception,assert,parent,doc,last,seen,parent,doc,can,only,evaluate,current,and,upcoming,parent,docs,if,parent,doc,last,seen,parent,doc,return,true,else,if,parent,doc,0,last,emitted,value,missing,value,return,true,final,int,prev,parent,doc,parent,docs,prev,set,bit,parent,doc,1,final,int,first,child,doc,if,child,docs,doc,id,prev,parent,doc,first,child,doc,child,docs,doc,id,else,first,child,doc,child,docs,advance,prev,parent,doc,1,last,seen,parent,doc,parent,doc,last,emitted,value,pick,values,missing,value,child,docs,first,child,doc,parent,doc,return,true,override,public,int,doc,id,return,last,seen,parent,doc,override,public,long,long,value,return,last,emitted,value
MultiValueMode -> public BinaryDocValues select(final SortedBinaryDocValues values, final BytesRef missingValue);1524684173;Return a {@link BinaryDocValues} instance that can be used to sort documents_with this mode and the provided values. When a document has no value,_<code>missingValue</code> is returned.__Allowed Modes: MIN, MAX;public BinaryDocValues select(final SortedBinaryDocValues values, final BytesRef missingValue) {_        final BinaryDocValues singleton = FieldData.unwrapSingleton(values)__        if (singleton != null) {_            if (missingValue == null) {_                return singleton__            }_            return new AbstractBinaryDocValues() {__                private BytesRef value___                @Override_                public boolean advanceExact(int target) throws IOException {_                    this.value = singleton.advanceExact(target) ? singleton.binaryValue() : missingValue__                    return true__                }__                @Override_                public BytesRef binaryValue() throws IOException {_                    return this.value__                }_            }__        } else {_            return new AbstractBinaryDocValues() {__                private BytesRef value___                @Override_                public boolean advanceExact(int target) throws IOException {_                    if (values.advanceExact(target)) {_                        value = pick(values)__                        return true__                    } else {_                        value = missingValue__                        return missingValue != null__                    }_                }__                @Override_                public BytesRef binaryValue() throws IOException {_                    return value__                }_            }__        }_    };return,a,link,binary,doc,values,instance,that,can,be,used,to,sort,documents,with,this,mode,and,the,provided,values,when,a,document,has,no,value,code,missing,value,code,is,returned,allowed,modes,min,max;public,binary,doc,values,select,final,sorted,binary,doc,values,values,final,bytes,ref,missing,value,final,binary,doc,values,singleton,field,data,unwrap,singleton,values,if,singleton,null,if,missing,value,null,return,singleton,return,new,abstract,binary,doc,values,private,bytes,ref,value,override,public,boolean,advance,exact,int,target,throws,ioexception,this,value,singleton,advance,exact,target,singleton,binary,value,missing,value,return,true,override,public,bytes,ref,binary,value,throws,ioexception,return,this,value,else,return,new,abstract,binary,doc,values,private,bytes,ref,value,override,public,boolean,advance,exact,int,target,throws,ioexception,if,values,advance,exact,target,value,pick,values,return,true,else,value,missing,value,return,missing,value,null,override,public,bytes,ref,binary,value,throws,ioexception,return,value
MultiValueMode -> public BinaryDocValues select(final SortedBinaryDocValues values, final BytesRef missingValue);1528211342;Return a {@link BinaryDocValues} instance that can be used to sort documents_with this mode and the provided values. When a document has no value,_<code>missingValue</code> is returned.__Allowed Modes: MIN, MAX;public BinaryDocValues select(final SortedBinaryDocValues values, final BytesRef missingValue) {_        final BinaryDocValues singleton = FieldData.unwrapSingleton(values)__        if (singleton != null) {_            if (missingValue == null) {_                return singleton__            }_            return new AbstractBinaryDocValues() {__                private BytesRef value___                @Override_                public boolean advanceExact(int target) throws IOException {_                    this.value = singleton.advanceExact(target) ? singleton.binaryValue() : missingValue__                    return true__                }__                @Override_                public BytesRef binaryValue() throws IOException {_                    return this.value__                }_            }__        } else {_            return new AbstractBinaryDocValues() {__                private BytesRef value___                @Override_                public boolean advanceExact(int target) throws IOException {_                    if (values.advanceExact(target)) {_                        value = pick(values)__                        return true__                    } else {_                        value = missingValue__                        return missingValue != null__                    }_                }__                @Override_                public BytesRef binaryValue() throws IOException {_                    return value__                }_            }__        }_    };return,a,link,binary,doc,values,instance,that,can,be,used,to,sort,documents,with,this,mode,and,the,provided,values,when,a,document,has,no,value,code,missing,value,code,is,returned,allowed,modes,min,max;public,binary,doc,values,select,final,sorted,binary,doc,values,values,final,bytes,ref,missing,value,final,binary,doc,values,singleton,field,data,unwrap,singleton,values,if,singleton,null,if,missing,value,null,return,singleton,return,new,abstract,binary,doc,values,private,bytes,ref,value,override,public,boolean,advance,exact,int,target,throws,ioexception,this,value,singleton,advance,exact,target,singleton,binary,value,missing,value,return,true,override,public,bytes,ref,binary,value,throws,ioexception,return,this,value,else,return,new,abstract,binary,doc,values,private,bytes,ref,value,override,public,boolean,advance,exact,int,target,throws,ioexception,if,values,advance,exact,target,value,pick,values,return,true,else,value,missing,value,return,missing,value,null,override,public,bytes,ref,binary,value,throws,ioexception,return,value
MultiValueMode -> public BinaryDocValues select(final SortedBinaryDocValues values, final BytesRef missingValue);1539615817;Return a {@link BinaryDocValues} instance that can be used to sort documents_with this mode and the provided values. When a document has no value,_<code>missingValue</code> is returned.__Allowed Modes: MIN, MAX;public BinaryDocValues select(final SortedBinaryDocValues values, final BytesRef missingValue) {_        final BinaryDocValues singleton = FieldData.unwrapSingleton(values)__        if (singleton != null) {_            if (missingValue == null) {_                return singleton__            }_            return new AbstractBinaryDocValues() {__                private BytesRef value___                @Override_                public boolean advanceExact(int target) throws IOException {_                    this.value = singleton.advanceExact(target) ? singleton.binaryValue() : missingValue__                    return true__                }__                @Override_                public BytesRef binaryValue() throws IOException {_                    return this.value__                }_            }__        } else {_            return new AbstractBinaryDocValues() {__                private BytesRef value___                @Override_                public boolean advanceExact(int target) throws IOException {_                    if (values.advanceExact(target)) {_                        value = pick(values)__                        return true__                    } else {_                        value = missingValue__                        return missingValue != null__                    }_                }__                @Override_                public BytesRef binaryValue() throws IOException {_                    return value__                }_            }__        }_    };return,a,link,binary,doc,values,instance,that,can,be,used,to,sort,documents,with,this,mode,and,the,provided,values,when,a,document,has,no,value,code,missing,value,code,is,returned,allowed,modes,min,max;public,binary,doc,values,select,final,sorted,binary,doc,values,values,final,bytes,ref,missing,value,final,binary,doc,values,singleton,field,data,unwrap,singleton,values,if,singleton,null,if,missing,value,null,return,singleton,return,new,abstract,binary,doc,values,private,bytes,ref,value,override,public,boolean,advance,exact,int,target,throws,ioexception,this,value,singleton,advance,exact,target,singleton,binary,value,missing,value,return,true,override,public,bytes,ref,binary,value,throws,ioexception,return,this,value,else,return,new,abstract,binary,doc,values,private,bytes,ref,value,override,public,boolean,advance,exact,int,target,throws,ioexception,if,values,advance,exact,target,value,pick,values,return,true,else,value,missing,value,return,missing,value,null,override,public,bytes,ref,binary,value,throws,ioexception,return,value
MultiValueMode -> public BinaryDocValues select(final SortedBinaryDocValues values, final BytesRef missingValue);1544110272;Return a {@link BinaryDocValues} instance that can be used to sort documents_with this mode and the provided values. When a document has no value,_<code>missingValue</code> is returned.__Allowed Modes: MIN, MAX;public BinaryDocValues select(final SortedBinaryDocValues values, final BytesRef missingValue) {_        final BinaryDocValues singleton = FieldData.unwrapSingleton(values)__        if (singleton != null) {_            if (missingValue == null) {_                return singleton__            }_            return new AbstractBinaryDocValues() {__                private BytesRef value___                @Override_                public boolean advanceExact(int target) throws IOException {_                    this.value = singleton.advanceExact(target) ? singleton.binaryValue() : missingValue__                    return true__                }__                @Override_                public BytesRef binaryValue() throws IOException {_                    return this.value__                }_            }__        } else {_            return new AbstractBinaryDocValues() {__                private BytesRef value___                @Override_                public boolean advanceExact(int target) throws IOException {_                    if (values.advanceExact(target)) {_                        value = pick(values)__                        return true__                    } else {_                        value = missingValue__                        return missingValue != null__                    }_                }__                @Override_                public BytesRef binaryValue() throws IOException {_                    return value__                }_            }__        }_    };return,a,link,binary,doc,values,instance,that,can,be,used,to,sort,documents,with,this,mode,and,the,provided,values,when,a,document,has,no,value,code,missing,value,code,is,returned,allowed,modes,min,max;public,binary,doc,values,select,final,sorted,binary,doc,values,values,final,bytes,ref,missing,value,final,binary,doc,values,singleton,field,data,unwrap,singleton,values,if,singleton,null,if,missing,value,null,return,singleton,return,new,abstract,binary,doc,values,private,bytes,ref,value,override,public,boolean,advance,exact,int,target,throws,ioexception,this,value,singleton,advance,exact,target,singleton,binary,value,missing,value,return,true,override,public,bytes,ref,binary,value,throws,ioexception,return,this,value,else,return,new,abstract,binary,doc,values,private,bytes,ref,value,override,public,boolean,advance,exact,int,target,throws,ioexception,if,values,advance,exact,target,value,pick,values,return,true,else,value,missing,value,return,missing,value,null,override,public,bytes,ref,binary,value,throws,ioexception,return,value
MultiValueMode -> public NumericDoubleValues select(final SortedNumericDoubleValues values);1528211342;Return a {@link NumericDoubleValues} instance that can be used to sort documents_with this mode and the provided values. When a document has no value,_<code>missingValue</code> is returned.__Allowed Modes: SUM, AVG, MEDIAN, MIN, MAX;public NumericDoubleValues select(final SortedNumericDoubleValues values) {_        final NumericDoubleValues singleton = FieldData.unwrapSingleton(values)__        if (singleton != null) {_            return singleton__        } else {_            return new NumericDoubleValues() {__                private double value___                @Override_                public boolean advanceExact(int target) throws IOException {_                    if (values.advanceExact(target)) {_                        value = pick(values)__                        return true__                    }_                    return false__                }__                @Override_                public double doubleValue() throws IOException {_                    return this.value__                }_            }__        }_    };return,a,link,numeric,double,values,instance,that,can,be,used,to,sort,documents,with,this,mode,and,the,provided,values,when,a,document,has,no,value,code,missing,value,code,is,returned,allowed,modes,sum,avg,median,min,max;public,numeric,double,values,select,final,sorted,numeric,double,values,values,final,numeric,double,values,singleton,field,data,unwrap,singleton,values,if,singleton,null,return,singleton,else,return,new,numeric,double,values,private,double,value,override,public,boolean,advance,exact,int,target,throws,ioexception,if,values,advance,exact,target,value,pick,values,return,true,return,false,override,public,double,double,value,throws,ioexception,return,this,value
MultiValueMode -> public NumericDoubleValues select(final SortedNumericDoubleValues values);1539615817;Return a {@link NumericDoubleValues} instance that can be used to sort documents_with this mode and the provided values. When a document has no value,_<code>missingValue</code> is returned.__Allowed Modes: SUM, AVG, MEDIAN, MIN, MAX;public NumericDoubleValues select(final SortedNumericDoubleValues values) {_        final NumericDoubleValues singleton = FieldData.unwrapSingleton(values)__        if (singleton != null) {_            return singleton__        } else {_            return new NumericDoubleValues() {__                private double value___                @Override_                public boolean advanceExact(int target) throws IOException {_                    if (values.advanceExact(target)) {_                        value = pick(values)__                        return true__                    }_                    return false__                }__                @Override_                public double doubleValue() throws IOException {_                    return this.value__                }_            }__        }_    };return,a,link,numeric,double,values,instance,that,can,be,used,to,sort,documents,with,this,mode,and,the,provided,values,when,a,document,has,no,value,code,missing,value,code,is,returned,allowed,modes,sum,avg,median,min,max;public,numeric,double,values,select,final,sorted,numeric,double,values,values,final,numeric,double,values,singleton,field,data,unwrap,singleton,values,if,singleton,null,return,singleton,else,return,new,numeric,double,values,private,double,value,override,public,boolean,advance,exact,int,target,throws,ioexception,if,values,advance,exact,target,value,pick,values,return,true,return,false,override,public,double,double,value,throws,ioexception,return,this,value
MultiValueMode -> public NumericDoubleValues select(final SortedNumericDoubleValues values);1544110272;Return a {@link NumericDoubleValues} instance that can be used to sort documents_with this mode and the provided values. When a document has no value,_<code>missingValue</code> is returned.__Allowed Modes: SUM, AVG, MEDIAN, MIN, MAX;public NumericDoubleValues select(final SortedNumericDoubleValues values) {_        final NumericDoubleValues singleton = FieldData.unwrapSingleton(values)__        if (singleton != null) {_            return singleton__        } else {_            return new NumericDoubleValues() {__                private double value___                @Override_                public boolean advanceExact(int target) throws IOException {_                    if (values.advanceExact(target)) {_                        value = pick(values)__                        return true__                    }_                    return false__                }__                @Override_                public double doubleValue() throws IOException {_                    return this.value__                }_            }__        }_    };return,a,link,numeric,double,values,instance,that,can,be,used,to,sort,documents,with,this,mode,and,the,provided,values,when,a,document,has,no,value,code,missing,value,code,is,returned,allowed,modes,sum,avg,median,min,max;public,numeric,double,values,select,final,sorted,numeric,double,values,values,final,numeric,double,values,singleton,field,data,unwrap,singleton,values,if,singleton,null,return,singleton,else,return,new,numeric,double,values,private,double,value,override,public,boolean,advance,exact,int,target,throws,ioexception,if,values,advance,exact,target,value,pick,values,return,true,return,false,override,public,double,double,value,throws,ioexception,return,this,value
MultiValueMode -> public BinaryDocValues select(final SortedBinaryDocValues values, final BytesRef missingValue, final BitSet parentDocs, final DocIdSetIterator childDocs, int maxDoc) throws IOException;1524684173;Return a {@link BinaryDocValues} instance that can be used to sort root documents_with this mode, the provided values and filters for root/inner documents.__For every root document, the values of its inner documents will be aggregated._If none of the inner documents has a value, then <code>missingValue</code> is returned.__Allowed Modes: MIN, MAX__NOTE: Calling the returned instance on docs that are not root docs is illegal_The returned instance can only be evaluate the current and upcoming docs;public BinaryDocValues select(final SortedBinaryDocValues values, final BytesRef missingValue, final BitSet parentDocs, final DocIdSetIterator childDocs, int maxDoc) throws IOException {_        if (parentDocs == null || childDocs == null) {_            return select(FieldData.emptySortedBinary(), missingValue)__        }_        final BinaryDocValues selectedValues = select(values, null)___        return new AbstractBinaryDocValues() {__            final BytesRefBuilder builder = new BytesRefBuilder()___            int lastSeenParentDoc = 0__            BytesRef lastEmittedValue = missingValue___            @Override_            public boolean advanceExact(int parentDoc) throws IOException {_                assert parentDoc >= lastSeenParentDoc : "can only evaluate current and upcoming root docs"__                if (parentDoc == lastSeenParentDoc) {_                    return true__                }__                final int prevParentDoc = parentDocs.prevSetBit(parentDoc - 1)__                final int firstChildDoc__                if (childDocs.docID() > prevParentDoc) {_                    firstChildDoc = childDocs.docID()__                } else {_                    firstChildDoc = childDocs.advance(prevParentDoc + 1)__                }__                lastSeenParentDoc = parentDoc__                lastEmittedValue = pick(selectedValues, builder, childDocs, firstChildDoc, parentDoc)__                if (lastEmittedValue == null) {_                    lastEmittedValue = missingValue__                }_                return true__            }__            @Override_            public BytesRef binaryValue() throws IOException {_                return lastEmittedValue__            }_        }__    };return,a,link,binary,doc,values,instance,that,can,be,used,to,sort,root,documents,with,this,mode,the,provided,values,and,filters,for,root,inner,documents,for,every,root,document,the,values,of,its,inner,documents,will,be,aggregated,if,none,of,the,inner,documents,has,a,value,then,code,missing,value,code,is,returned,allowed,modes,min,max,note,calling,the,returned,instance,on,docs,that,are,not,root,docs,is,illegal,the,returned,instance,can,only,be,evaluate,the,current,and,upcoming,docs;public,binary,doc,values,select,final,sorted,binary,doc,values,values,final,bytes,ref,missing,value,final,bit,set,parent,docs,final,doc,id,set,iterator,child,docs,int,max,doc,throws,ioexception,if,parent,docs,null,child,docs,null,return,select,field,data,empty,sorted,binary,missing,value,final,binary,doc,values,selected,values,select,values,null,return,new,abstract,binary,doc,values,final,bytes,ref,builder,builder,new,bytes,ref,builder,int,last,seen,parent,doc,0,bytes,ref,last,emitted,value,missing,value,override,public,boolean,advance,exact,int,parent,doc,throws,ioexception,assert,parent,doc,last,seen,parent,doc,can,only,evaluate,current,and,upcoming,root,docs,if,parent,doc,last,seen,parent,doc,return,true,final,int,prev,parent,doc,parent,docs,prev,set,bit,parent,doc,1,final,int,first,child,doc,if,child,docs,doc,id,prev,parent,doc,first,child,doc,child,docs,doc,id,else,first,child,doc,child,docs,advance,prev,parent,doc,1,last,seen,parent,doc,parent,doc,last,emitted,value,pick,selected,values,builder,child,docs,first,child,doc,parent,doc,if,last,emitted,value,null,last,emitted,value,missing,value,return,true,override,public,bytes,ref,binary,value,throws,ioexception,return,last,emitted,value
MultiValueMode -> public BinaryDocValues select(final SortedBinaryDocValues values, final BytesRef missingValue, final BitSet parentDocs, final DocIdSetIterator childDocs, int maxDoc) throws IOException;1528211342;Return a {@link BinaryDocValues} instance that can be used to sort root documents_with this mode, the provided values and filters for root/inner documents.__For every root document, the values of its inner documents will be aggregated._If none of the inner documents has a value, then <code>missingValue</code> is returned.__Allowed Modes: MIN, MAX__NOTE: Calling the returned instance on docs that are not root docs is illegal_The returned instance can only be evaluate the current and upcoming docs;public BinaryDocValues select(final SortedBinaryDocValues values, final BytesRef missingValue, final BitSet parentDocs, final DocIdSetIterator childDocs, int maxDoc) throws IOException {_        if (parentDocs == null || childDocs == null) {_            return select(FieldData.emptySortedBinary(), missingValue)__        }_        final BinaryDocValues selectedValues = select(values, null)___        return new AbstractBinaryDocValues() {__            final BytesRefBuilder builder = new BytesRefBuilder()___            int lastSeenParentDoc = 0__            BytesRef lastEmittedValue = missingValue___            @Override_            public boolean advanceExact(int parentDoc) throws IOException {_                assert parentDoc >= lastSeenParentDoc : "can only evaluate current and upcoming root docs"__                if (parentDoc == lastSeenParentDoc) {_                    return true__                }__                final int prevParentDoc = parentDocs.prevSetBit(parentDoc - 1)__                final int firstChildDoc__                if (childDocs.docID() > prevParentDoc) {_                    firstChildDoc = childDocs.docID()__                } else {_                    firstChildDoc = childDocs.advance(prevParentDoc + 1)__                }__                lastSeenParentDoc = parentDoc__                lastEmittedValue = pick(selectedValues, builder, childDocs, firstChildDoc, parentDoc)__                if (lastEmittedValue == null) {_                    lastEmittedValue = missingValue__                }_                return true__            }__            @Override_            public BytesRef binaryValue() throws IOException {_                return lastEmittedValue__            }_        }__    };return,a,link,binary,doc,values,instance,that,can,be,used,to,sort,root,documents,with,this,mode,the,provided,values,and,filters,for,root,inner,documents,for,every,root,document,the,values,of,its,inner,documents,will,be,aggregated,if,none,of,the,inner,documents,has,a,value,then,code,missing,value,code,is,returned,allowed,modes,min,max,note,calling,the,returned,instance,on,docs,that,are,not,root,docs,is,illegal,the,returned,instance,can,only,be,evaluate,the,current,and,upcoming,docs;public,binary,doc,values,select,final,sorted,binary,doc,values,values,final,bytes,ref,missing,value,final,bit,set,parent,docs,final,doc,id,set,iterator,child,docs,int,max,doc,throws,ioexception,if,parent,docs,null,child,docs,null,return,select,field,data,empty,sorted,binary,missing,value,final,binary,doc,values,selected,values,select,values,null,return,new,abstract,binary,doc,values,final,bytes,ref,builder,builder,new,bytes,ref,builder,int,last,seen,parent,doc,0,bytes,ref,last,emitted,value,missing,value,override,public,boolean,advance,exact,int,parent,doc,throws,ioexception,assert,parent,doc,last,seen,parent,doc,can,only,evaluate,current,and,upcoming,root,docs,if,parent,doc,last,seen,parent,doc,return,true,final,int,prev,parent,doc,parent,docs,prev,set,bit,parent,doc,1,final,int,first,child,doc,if,child,docs,doc,id,prev,parent,doc,first,child,doc,child,docs,doc,id,else,first,child,doc,child,docs,advance,prev,parent,doc,1,last,seen,parent,doc,parent,doc,last,emitted,value,pick,selected,values,builder,child,docs,first,child,doc,parent,doc,if,last,emitted,value,null,last,emitted,value,missing,value,return,true,override,public,bytes,ref,binary,value,throws,ioexception,return,last,emitted,value
MultiValueMode -> public SortedDocValues select(final SortedSetDocValues values);1524684173;Return a {@link SortedDocValues} instance that can be used to sort documents_with this mode and the provided values.__Allowed Modes: MIN, MAX;public SortedDocValues select(final SortedSetDocValues values) {_        if (values.getValueCount() >= Integer.MAX_VALUE) {_            throw new UnsupportedOperationException("fields containing more than " + (Integer.MAX_VALUE-1) + " unique terms are unsupported")__        }__        final SortedDocValues singleton = DocValues.unwrapSingleton(values)__        if (singleton != null) {_            return singleton__        } else {_            return new AbstractSortedDocValues() {__                int ord___                @Override_                public boolean advanceExact(int target) throws IOException {_                    if (values.advanceExact(target)) {_                        ord = pick(values)__                        return true__                    } else {_                        ord = -1__                        return false__                    }_                }__                @Override_                public int docID() {_                    return values.docID()__                }__                @Override_                public int ordValue() {_                    assert ord != -1__                    return ord__                }__                @Override_                public BytesRef lookupOrd(int ord) throws IOException {_                    return values.lookupOrd(ord)__                }__                @Override_                public int getValueCount() {_                    return (int) values.getValueCount()__                }_            }__        }_    };return,a,link,sorted,doc,values,instance,that,can,be,used,to,sort,documents,with,this,mode,and,the,provided,values,allowed,modes,min,max;public,sorted,doc,values,select,final,sorted,set,doc,values,values,if,values,get,value,count,integer,throw,new,unsupported,operation,exception,fields,containing,more,than,integer,1,unique,terms,are,unsupported,final,sorted,doc,values,singleton,doc,values,unwrap,singleton,values,if,singleton,null,return,singleton,else,return,new,abstract,sorted,doc,values,int,ord,override,public,boolean,advance,exact,int,target,throws,ioexception,if,values,advance,exact,target,ord,pick,values,return,true,else,ord,1,return,false,override,public,int,doc,id,return,values,doc,id,override,public,int,ord,value,assert,ord,1,return,ord,override,public,bytes,ref,lookup,ord,int,ord,throws,ioexception,return,values,lookup,ord,ord,override,public,int,get,value,count,return,int,values,get,value,count
MultiValueMode -> public SortedDocValues select(final SortedSetDocValues values);1528211342;Return a {@link SortedDocValues} instance that can be used to sort documents_with this mode and the provided values.__Allowed Modes: MIN, MAX;public SortedDocValues select(final SortedSetDocValues values) {_        if (values.getValueCount() >= Integer.MAX_VALUE) {_            throw new UnsupportedOperationException("fields containing more than " + (Integer.MAX_VALUE-1) + " unique terms are unsupported")__        }__        final SortedDocValues singleton = DocValues.unwrapSingleton(values)__        if (singleton != null) {_            return singleton__        } else {_            return new AbstractSortedDocValues() {__                int ord___                @Override_                public boolean advanceExact(int target) throws IOException {_                    if (values.advanceExact(target)) {_                        ord = pick(values)__                        return true__                    } else {_                        ord = -1__                        return false__                    }_                }__                @Override_                public int docID() {_                    return values.docID()__                }__                @Override_                public int ordValue() {_                    assert ord != -1__                    return ord__                }__                @Override_                public BytesRef lookupOrd(int ord) throws IOException {_                    return values.lookupOrd(ord)__                }__                @Override_                public int getValueCount() {_                    return (int) values.getValueCount()__                }_            }__        }_    };return,a,link,sorted,doc,values,instance,that,can,be,used,to,sort,documents,with,this,mode,and,the,provided,values,allowed,modes,min,max;public,sorted,doc,values,select,final,sorted,set,doc,values,values,if,values,get,value,count,integer,throw,new,unsupported,operation,exception,fields,containing,more,than,integer,1,unique,terms,are,unsupported,final,sorted,doc,values,singleton,doc,values,unwrap,singleton,values,if,singleton,null,return,singleton,else,return,new,abstract,sorted,doc,values,int,ord,override,public,boolean,advance,exact,int,target,throws,ioexception,if,values,advance,exact,target,ord,pick,values,return,true,else,ord,1,return,false,override,public,int,doc,id,return,values,doc,id,override,public,int,ord,value,assert,ord,1,return,ord,override,public,bytes,ref,lookup,ord,int,ord,throws,ioexception,return,values,lookup,ord,ord,override,public,int,get,value,count,return,int,values,get,value,count
MultiValueMode -> public SortedDocValues select(final SortedSetDocValues values);1539615817;Return a {@link SortedDocValues} instance that can be used to sort documents_with this mode and the provided values.__Allowed Modes: MIN, MAX;public SortedDocValues select(final SortedSetDocValues values) {_        if (values.getValueCount() >= Integer.MAX_VALUE) {_            throw new UnsupportedOperationException("fields containing more than " + (Integer.MAX_VALUE - 1) + " unique terms are unsupported")__        }__        final SortedDocValues singleton = DocValues.unwrapSingleton(values)__        if (singleton != null) {_            return singleton__        } else {_            return new AbstractSortedDocValues() {__                int ord___                @Override_                public boolean advanceExact(int target) throws IOException {_                    if (values.advanceExact(target)) {_                        ord = pick(values)__                        return true__                    } else {_                        ord = -1__                        return false__                    }_                }__                @Override_                public int docID() {_                    return values.docID()__                }__                @Override_                public int ordValue() {_                    assert ord != -1__                    return ord__                }__                @Override_                public BytesRef lookupOrd(int ord) throws IOException {_                    return values.lookupOrd(ord)__                }__                @Override_                public int getValueCount() {_                    return (int) values.getValueCount()__                }_            }__        }_    };return,a,link,sorted,doc,values,instance,that,can,be,used,to,sort,documents,with,this,mode,and,the,provided,values,allowed,modes,min,max;public,sorted,doc,values,select,final,sorted,set,doc,values,values,if,values,get,value,count,integer,throw,new,unsupported,operation,exception,fields,containing,more,than,integer,1,unique,terms,are,unsupported,final,sorted,doc,values,singleton,doc,values,unwrap,singleton,values,if,singleton,null,return,singleton,else,return,new,abstract,sorted,doc,values,int,ord,override,public,boolean,advance,exact,int,target,throws,ioexception,if,values,advance,exact,target,ord,pick,values,return,true,else,ord,1,return,false,override,public,int,doc,id,return,values,doc,id,override,public,int,ord,value,assert,ord,1,return,ord,override,public,bytes,ref,lookup,ord,int,ord,throws,ioexception,return,values,lookup,ord,ord,override,public,int,get,value,count,return,int,values,get,value,count
MultiValueMode -> public SortedDocValues select(final SortedSetDocValues values);1544110272;Return a {@link SortedDocValues} instance that can be used to sort documents_with this mode and the provided values.__Allowed Modes: MIN, MAX;public SortedDocValues select(final SortedSetDocValues values) {_        if (values.getValueCount() >= Integer.MAX_VALUE) {_            throw new UnsupportedOperationException("fields containing more than " + (Integer.MAX_VALUE - 1) +_                    " unique terms are unsupported")__        }__        final SortedDocValues singleton = DocValues.unwrapSingleton(values)__        if (singleton != null) {_            return singleton__        } else {_            return new AbstractSortedDocValues() {__                int ord___                @Override_                public boolean advanceExact(int target) throws IOException {_                    if (values.advanceExact(target)) {_                        ord = pick(values)__                        return true__                    } else {_                        ord = -1__                        return false__                    }_                }__                @Override_                public int docID() {_                    return values.docID()__                }__                @Override_                public int ordValue() {_                    assert ord != -1__                    return ord__                }__                @Override_                public BytesRef lookupOrd(int ord) throws IOException {_                    return values.lookupOrd(ord)__                }__                @Override_                public int getValueCount() {_                    return (int) values.getValueCount()__                }_            }__        }_    };return,a,link,sorted,doc,values,instance,that,can,be,used,to,sort,documents,with,this,mode,and,the,provided,values,allowed,modes,min,max;public,sorted,doc,values,select,final,sorted,set,doc,values,values,if,values,get,value,count,integer,throw,new,unsupported,operation,exception,fields,containing,more,than,integer,1,unique,terms,are,unsupported,final,sorted,doc,values,singleton,doc,values,unwrap,singleton,values,if,singleton,null,return,singleton,else,return,new,abstract,sorted,doc,values,int,ord,override,public,boolean,advance,exact,int,target,throws,ioexception,if,values,advance,exact,target,ord,pick,values,return,true,else,ord,1,return,false,override,public,int,doc,id,return,values,doc,id,override,public,int,ord,value,assert,ord,1,return,ord,override,public,bytes,ref,lookup,ord,int,ord,throws,ioexception,return,values,lookup,ord,ord,override,public,int,get,value,count,return,int,values,get,value,count
MultiValueMode -> public static MultiValueMode fromString(String sortMode);1524684173;A case insensitive version of {@link #valueOf(String)}__@throws IllegalArgumentException if the given string doesn't match a sort mode or is <code>null</code>.;public static MultiValueMode fromString(String sortMode) {_        try {_            return valueOf(sortMode.toUpperCase(Locale.ROOT))__        } catch (Exception e) {_            throw new IllegalArgumentException("Illegal sort mode: " + sortMode)__        }_    };a,case,insensitive,version,of,link,value,of,string,throws,illegal,argument,exception,if,the,given,string,doesn,t,match,a,sort,mode,or,is,code,null,code;public,static,multi,value,mode,from,string,string,sort,mode,try,return,value,of,sort,mode,to,upper,case,locale,root,catch,exception,e,throw,new,illegal,argument,exception,illegal,sort,mode,sort,mode
MultiValueMode -> public static MultiValueMode fromString(String sortMode);1528211342;A case insensitive version of {@link #valueOf(String)}__@throws IllegalArgumentException if the given string doesn't match a sort mode or is <code>null</code>.;public static MultiValueMode fromString(String sortMode) {_        try {_            return valueOf(sortMode.toUpperCase(Locale.ROOT))__        } catch (Exception e) {_            throw new IllegalArgumentException("Illegal sort mode: " + sortMode)__        }_    };a,case,insensitive,version,of,link,value,of,string,throws,illegal,argument,exception,if,the,given,string,doesn,t,match,a,sort,mode,or,is,code,null,code;public,static,multi,value,mode,from,string,string,sort,mode,try,return,value,of,sort,mode,to,upper,case,locale,root,catch,exception,e,throw,new,illegal,argument,exception,illegal,sort,mode,sort,mode
MultiValueMode -> public static MultiValueMode fromString(String sortMode);1539615817;A case insensitive version of {@link #valueOf(String)}__@throws IllegalArgumentException if the given string doesn't match a sort mode or is <code>null</code>.;public static MultiValueMode fromString(String sortMode) {_        try {_            return valueOf(sortMode.toUpperCase(Locale.ROOT))__        } catch (Exception e) {_            throw new IllegalArgumentException("Illegal sort mode: " + sortMode)__        }_    };a,case,insensitive,version,of,link,value,of,string,throws,illegal,argument,exception,if,the,given,string,doesn,t,match,a,sort,mode,or,is,code,null,code;public,static,multi,value,mode,from,string,string,sort,mode,try,return,value,of,sort,mode,to,upper,case,locale,root,catch,exception,e,throw,new,illegal,argument,exception,illegal,sort,mode,sort,mode
MultiValueMode -> public static MultiValueMode fromString(String sortMode);1544110272;A case insensitive version of {@link #valueOf(String)}__@throws IllegalArgumentException if the given string doesn't match a sort mode or is <code>null</code>.;public static MultiValueMode fromString(String sortMode) {_        try {_            return valueOf(sortMode.toUpperCase(Locale.ROOT))__        } catch (Exception e) {_            throw new IllegalArgumentException("Illegal sort mode: " + sortMode)__        }_    };a,case,insensitive,version,of,link,value,of,string,throws,illegal,argument,exception,if,the,given,string,doesn,t,match,a,sort,mode,or,is,code,null,code;public,static,multi,value,mode,from,string,string,sort,mode,try,return,value,of,sort,mode,to,upper,case,locale,root,catch,exception,e,throw,new,illegal,argument,exception,illegal,sort,mode,sort,mode
MultiValueMode -> public NumericDoubleValues select(final SortedNumericDoubleValues values, final double missingValue, final BitSet parentDocs, final DocIdSetIterator childDocs, int maxDoc) throws IOException;1524684173;Return a {@link NumericDoubleValues} instance that can be used to sort root documents_with this mode, the provided values and filters for root/inner documents.__For every root document, the values of its inner documents will be aggregated._If none of the inner documents has a value, then <code>missingValue</code> is returned.__Allowed Modes: SUM, AVG, MIN, MAX__NOTE: Calling the returned instance on docs that are not root docs is illegal_The returned instance can only be evaluate the current and upcoming docs;public NumericDoubleValues select(final SortedNumericDoubleValues values, final double missingValue, final BitSet parentDocs, final DocIdSetIterator childDocs, int maxDoc) throws IOException {_        if (parentDocs == null || childDocs == null) {_            return select(FieldData.emptySortedNumericDoubles(), missingValue)__        }__        return new NumericDoubleValues() {__            int lastSeenParentDoc = 0__            double lastEmittedValue = missingValue___            @Override_            public boolean advanceExact(int parentDoc) throws IOException {_                assert parentDoc >= lastSeenParentDoc : "can only evaluate current and upcoming parent docs"__                if (parentDoc == lastSeenParentDoc) {_                    return true__                }_                final int prevParentDoc = parentDocs.prevSetBit(parentDoc - 1)__                final int firstChildDoc__                if (childDocs.docID() > prevParentDoc) {_                    firstChildDoc = childDocs.docID()__                } else {_                    firstChildDoc = childDocs.advance(prevParentDoc + 1)__                }__                lastSeenParentDoc = parentDoc__                lastEmittedValue = pick(values, missingValue, childDocs, firstChildDoc, parentDoc)__                return true__            }__            @Override_            public double doubleValue() throws IOException {_                return lastEmittedValue__            }_        }__    };return,a,link,numeric,double,values,instance,that,can,be,used,to,sort,root,documents,with,this,mode,the,provided,values,and,filters,for,root,inner,documents,for,every,root,document,the,values,of,its,inner,documents,will,be,aggregated,if,none,of,the,inner,documents,has,a,value,then,code,missing,value,code,is,returned,allowed,modes,sum,avg,min,max,note,calling,the,returned,instance,on,docs,that,are,not,root,docs,is,illegal,the,returned,instance,can,only,be,evaluate,the,current,and,upcoming,docs;public,numeric,double,values,select,final,sorted,numeric,double,values,values,final,double,missing,value,final,bit,set,parent,docs,final,doc,id,set,iterator,child,docs,int,max,doc,throws,ioexception,if,parent,docs,null,child,docs,null,return,select,field,data,empty,sorted,numeric,doubles,missing,value,return,new,numeric,double,values,int,last,seen,parent,doc,0,double,last,emitted,value,missing,value,override,public,boolean,advance,exact,int,parent,doc,throws,ioexception,assert,parent,doc,last,seen,parent,doc,can,only,evaluate,current,and,upcoming,parent,docs,if,parent,doc,last,seen,parent,doc,return,true,final,int,prev,parent,doc,parent,docs,prev,set,bit,parent,doc,1,final,int,first,child,doc,if,child,docs,doc,id,prev,parent,doc,first,child,doc,child,docs,doc,id,else,first,child,doc,child,docs,advance,prev,parent,doc,1,last,seen,parent,doc,parent,doc,last,emitted,value,pick,values,missing,value,child,docs,first,child,doc,parent,doc,return,true,override,public,double,double,value,throws,ioexception,return,last,emitted,value
MultiValueMode -> public NumericDoubleValues select(final SortedNumericDoubleValues values, final double missingValue, final BitSet parentDocs, final DocIdSetIterator childDocs, int maxDoc) throws IOException;1528211342;Return a {@link NumericDoubleValues} instance that can be used to sort root documents_with this mode, the provided values and filters for root/inner documents.__For every root document, the values of its inner documents will be aggregated._If none of the inner documents has a value, then <code>missingValue</code> is returned.__Allowed Modes: SUM, AVG, MIN, MAX__NOTE: Calling the returned instance on docs that are not root docs is illegal_The returned instance can only be evaluate the current and upcoming docs;public NumericDoubleValues select(final SortedNumericDoubleValues values, final double missingValue, final BitSet parentDocs, final DocIdSetIterator childDocs, int maxDoc) throws IOException {_        if (parentDocs == null || childDocs == null) {_            return FieldData.replaceMissing(FieldData.emptyNumericDouble(), missingValue)__        }__        return new NumericDoubleValues() {__            int lastSeenParentDoc = 0__            double lastEmittedValue = missingValue___            @Override_            public boolean advanceExact(int parentDoc) throws IOException {_                assert parentDoc >= lastSeenParentDoc : "can only evaluate current and upcoming parent docs"__                if (parentDoc == lastSeenParentDoc) {_                    return true__                }_                final int prevParentDoc = parentDocs.prevSetBit(parentDoc - 1)__                final int firstChildDoc__                if (childDocs.docID() > prevParentDoc) {_                    firstChildDoc = childDocs.docID()__                } else {_                    firstChildDoc = childDocs.advance(prevParentDoc + 1)__                }__                lastSeenParentDoc = parentDoc__                lastEmittedValue = pick(values, missingValue, childDocs, firstChildDoc, parentDoc)__                return true__            }__            @Override_            public double doubleValue() throws IOException {_                return lastEmittedValue__            }_        }__    };return,a,link,numeric,double,values,instance,that,can,be,used,to,sort,root,documents,with,this,mode,the,provided,values,and,filters,for,root,inner,documents,for,every,root,document,the,values,of,its,inner,documents,will,be,aggregated,if,none,of,the,inner,documents,has,a,value,then,code,missing,value,code,is,returned,allowed,modes,sum,avg,min,max,note,calling,the,returned,instance,on,docs,that,are,not,root,docs,is,illegal,the,returned,instance,can,only,be,evaluate,the,current,and,upcoming,docs;public,numeric,double,values,select,final,sorted,numeric,double,values,values,final,double,missing,value,final,bit,set,parent,docs,final,doc,id,set,iterator,child,docs,int,max,doc,throws,ioexception,if,parent,docs,null,child,docs,null,return,field,data,replace,missing,field,data,empty,numeric,double,missing,value,return,new,numeric,double,values,int,last,seen,parent,doc,0,double,last,emitted,value,missing,value,override,public,boolean,advance,exact,int,parent,doc,throws,ioexception,assert,parent,doc,last,seen,parent,doc,can,only,evaluate,current,and,upcoming,parent,docs,if,parent,doc,last,seen,parent,doc,return,true,final,int,prev,parent,doc,parent,docs,prev,set,bit,parent,doc,1,final,int,first,child,doc,if,child,docs,doc,id,prev,parent,doc,first,child,doc,child,docs,doc,id,else,first,child,doc,child,docs,advance,prev,parent,doc,1,last,seen,parent,doc,parent,doc,last,emitted,value,pick,values,missing,value,child,docs,first,child,doc,parent,doc,return,true,override,public,double,double,value,throws,ioexception,return,last,emitted,value
MultiValueMode -> public SortedDocValues select(final SortedSetDocValues values, final BitSet parentDocs, final DocIdSetIterator childDocs) throws IOException;1524684173;Return a {@link SortedDocValues} instance that can be used to sort root documents_with this mode, the provided values and filters for root/inner documents.__For every root document, the values of its inner documents will be aggregated.__Allowed Modes: MIN, MAX__NOTE: Calling the returned instance on docs that are not root docs is illegal_The returned instance can only be evaluate the current and upcoming docs;public SortedDocValues select(final SortedSetDocValues values, final BitSet parentDocs, final DocIdSetIterator childDocs) throws IOException {_        if (parentDocs == null || childDocs == null) {_            return select(DocValues.emptySortedSet())__        }_        final SortedDocValues selectedValues = select(values)___        return new AbstractSortedDocValues() {__            int docID = -1__            int lastSeenParentDoc = 0__            int lastEmittedOrd = -1___            @Override_            public BytesRef lookupOrd(int ord) throws IOException {_                return selectedValues.lookupOrd(ord)__            }__            @Override_            public int getValueCount() {_                return selectedValues.getValueCount()__            }__            @Override_            public boolean advanceExact(int parentDoc) throws IOException {_                assert parentDoc >= lastSeenParentDoc : "can only evaluate current and upcoming root docs"__                if (parentDoc == lastSeenParentDoc) {_                    return lastEmittedOrd != -1__                }__                final int prevParentDoc = parentDocs.prevSetBit(parentDoc - 1)__                final int firstChildDoc__                if (childDocs.docID() > prevParentDoc) {_                    firstChildDoc = childDocs.docID()__                } else {_                    firstChildDoc = childDocs.advance(prevParentDoc + 1)__                }__                docID = lastSeenParentDoc = parentDoc__                lastEmittedOrd = pick(selectedValues, childDocs, firstChildDoc, parentDoc)__                return lastEmittedOrd != -1__            }__            @Override_            public int docID() {_                return docID__            }__            @Override_            public int ordValue() {_                return lastEmittedOrd__            }_        }__    };return,a,link,sorted,doc,values,instance,that,can,be,used,to,sort,root,documents,with,this,mode,the,provided,values,and,filters,for,root,inner,documents,for,every,root,document,the,values,of,its,inner,documents,will,be,aggregated,allowed,modes,min,max,note,calling,the,returned,instance,on,docs,that,are,not,root,docs,is,illegal,the,returned,instance,can,only,be,evaluate,the,current,and,upcoming,docs;public,sorted,doc,values,select,final,sorted,set,doc,values,values,final,bit,set,parent,docs,final,doc,id,set,iterator,child,docs,throws,ioexception,if,parent,docs,null,child,docs,null,return,select,doc,values,empty,sorted,set,final,sorted,doc,values,selected,values,select,values,return,new,abstract,sorted,doc,values,int,doc,id,1,int,last,seen,parent,doc,0,int,last,emitted,ord,1,override,public,bytes,ref,lookup,ord,int,ord,throws,ioexception,return,selected,values,lookup,ord,ord,override,public,int,get,value,count,return,selected,values,get,value,count,override,public,boolean,advance,exact,int,parent,doc,throws,ioexception,assert,parent,doc,last,seen,parent,doc,can,only,evaluate,current,and,upcoming,root,docs,if,parent,doc,last,seen,parent,doc,return,last,emitted,ord,1,final,int,prev,parent,doc,parent,docs,prev,set,bit,parent,doc,1,final,int,first,child,doc,if,child,docs,doc,id,prev,parent,doc,first,child,doc,child,docs,doc,id,else,first,child,doc,child,docs,advance,prev,parent,doc,1,doc,id,last,seen,parent,doc,parent,doc,last,emitted,ord,pick,selected,values,child,docs,first,child,doc,parent,doc,return,last,emitted,ord,1,override,public,int,doc,id,return,doc,id,override,public,int,ord,value,return,last,emitted,ord
MultiValueMode -> public SortedDocValues select(final SortedSetDocValues values, final BitSet parentDocs, final DocIdSetIterator childDocs) throws IOException;1528211342;Return a {@link SortedDocValues} instance that can be used to sort root documents_with this mode, the provided values and filters for root/inner documents.__For every root document, the values of its inner documents will be aggregated.__Allowed Modes: MIN, MAX__NOTE: Calling the returned instance on docs that are not root docs is illegal_The returned instance can only be evaluate the current and upcoming docs;public SortedDocValues select(final SortedSetDocValues values, final BitSet parentDocs, final DocIdSetIterator childDocs) throws IOException {_        if (parentDocs == null || childDocs == null) {_            return select(DocValues.emptySortedSet())__        }_        final SortedDocValues selectedValues = select(values)___        return new AbstractSortedDocValues() {__            int docID = -1__            int lastSeenParentDoc = 0__            int lastEmittedOrd = -1___            @Override_            public BytesRef lookupOrd(int ord) throws IOException {_                return selectedValues.lookupOrd(ord)__            }__            @Override_            public int getValueCount() {_                return selectedValues.getValueCount()__            }__            @Override_            public boolean advanceExact(int parentDoc) throws IOException {_                assert parentDoc >= lastSeenParentDoc : "can only evaluate current and upcoming root docs"__                if (parentDoc == lastSeenParentDoc) {_                    return lastEmittedOrd != -1__                }__                final int prevParentDoc = parentDocs.prevSetBit(parentDoc - 1)__                final int firstChildDoc__                if (childDocs.docID() > prevParentDoc) {_                    firstChildDoc = childDocs.docID()__                } else {_                    firstChildDoc = childDocs.advance(prevParentDoc + 1)__                }__                docID = lastSeenParentDoc = parentDoc__                lastEmittedOrd = pick(selectedValues, childDocs, firstChildDoc, parentDoc)__                return lastEmittedOrd != -1__            }__            @Override_            public int docID() {_                return docID__            }__            @Override_            public int ordValue() {_                return lastEmittedOrd__            }_        }__    };return,a,link,sorted,doc,values,instance,that,can,be,used,to,sort,root,documents,with,this,mode,the,provided,values,and,filters,for,root,inner,documents,for,every,root,document,the,values,of,its,inner,documents,will,be,aggregated,allowed,modes,min,max,note,calling,the,returned,instance,on,docs,that,are,not,root,docs,is,illegal,the,returned,instance,can,only,be,evaluate,the,current,and,upcoming,docs;public,sorted,doc,values,select,final,sorted,set,doc,values,values,final,bit,set,parent,docs,final,doc,id,set,iterator,child,docs,throws,ioexception,if,parent,docs,null,child,docs,null,return,select,doc,values,empty,sorted,set,final,sorted,doc,values,selected,values,select,values,return,new,abstract,sorted,doc,values,int,doc,id,1,int,last,seen,parent,doc,0,int,last,emitted,ord,1,override,public,bytes,ref,lookup,ord,int,ord,throws,ioexception,return,selected,values,lookup,ord,ord,override,public,int,get,value,count,return,selected,values,get,value,count,override,public,boolean,advance,exact,int,parent,doc,throws,ioexception,assert,parent,doc,last,seen,parent,doc,can,only,evaluate,current,and,upcoming,root,docs,if,parent,doc,last,seen,parent,doc,return,last,emitted,ord,1,final,int,prev,parent,doc,parent,docs,prev,set,bit,parent,doc,1,final,int,first,child,doc,if,child,docs,doc,id,prev,parent,doc,first,child,doc,child,docs,doc,id,else,first,child,doc,child,docs,advance,prev,parent,doc,1,doc,id,last,seen,parent,doc,parent,doc,last,emitted,ord,pick,selected,values,child,docs,first,child,doc,parent,doc,return,last,emitted,ord,1,override,public,int,doc,id,return,doc,id,override,public,int,ord,value,return,last,emitted,ord
MultiValueMode -> public NumericDocValues select(final SortedNumericDocValues values);1528211342;Return a {@link NumericDocValues} instance that can be used to sort documents_with this mode and the provided values. When a document has no value,_<code>missingValue</code> is returned.__Allowed Modes: SUM, AVG, MEDIAN, MIN, MAX;public NumericDocValues select(final SortedNumericDocValues values) {_        final NumericDocValues singleton = DocValues.unwrapSingleton(values)__        if (singleton != null) {_            return singleton__        } else {_            return new AbstractNumericDocValues() {__                private long value___                @Override_                public boolean advanceExact(int target) throws IOException {_                    if (values.advanceExact(target)) {_                        value = pick(values)__                        return true__                    }_                    return false__                }__                @Override_                public int docID() {_                    return values.docID()__                }__                @Override_                public long longValue() throws IOException {_                    return value__                }_            }__        }_    };return,a,link,numeric,doc,values,instance,that,can,be,used,to,sort,documents,with,this,mode,and,the,provided,values,when,a,document,has,no,value,code,missing,value,code,is,returned,allowed,modes,sum,avg,median,min,max;public,numeric,doc,values,select,final,sorted,numeric,doc,values,values,final,numeric,doc,values,singleton,doc,values,unwrap,singleton,values,if,singleton,null,return,singleton,else,return,new,abstract,numeric,doc,values,private,long,value,override,public,boolean,advance,exact,int,target,throws,ioexception,if,values,advance,exact,target,value,pick,values,return,true,return,false,override,public,int,doc,id,return,values,doc,id,override,public,long,long,value,throws,ioexception,return,value
MultiValueMode -> public NumericDocValues select(final SortedNumericDocValues values);1539615817;Return a {@link NumericDocValues} instance that can be used to sort documents_with this mode and the provided values. When a document has no value,_<code>missingValue</code> is returned.__Allowed Modes: SUM, AVG, MEDIAN, MIN, MAX;public NumericDocValues select(final SortedNumericDocValues values) {_        final NumericDocValues singleton = DocValues.unwrapSingleton(values)__        if (singleton != null) {_            return singleton__        } else {_            return new AbstractNumericDocValues() {__                private long value___                @Override_                public boolean advanceExact(int target) throws IOException {_                    if (values.advanceExact(target)) {_                        value = pick(values)__                        return true__                    }_                    return false__                }__                @Override_                public int docID() {_                    return values.docID()__                }__                @Override_                public long longValue() throws IOException {_                    return value__                }_            }__        }_    };return,a,link,numeric,doc,values,instance,that,can,be,used,to,sort,documents,with,this,mode,and,the,provided,values,when,a,document,has,no,value,code,missing,value,code,is,returned,allowed,modes,sum,avg,median,min,max;public,numeric,doc,values,select,final,sorted,numeric,doc,values,values,final,numeric,doc,values,singleton,doc,values,unwrap,singleton,values,if,singleton,null,return,singleton,else,return,new,abstract,numeric,doc,values,private,long,value,override,public,boolean,advance,exact,int,target,throws,ioexception,if,values,advance,exact,target,value,pick,values,return,true,return,false,override,public,int,doc,id,return,values,doc,id,override,public,long,long,value,throws,ioexception,return,value
MultiValueMode -> public NumericDocValues select(final SortedNumericDocValues values);1544110272;Return a {@link NumericDocValues} instance that can be used to sort documents_with this mode and the provided values. When a document has no value,_<code>missingValue</code> is returned.__Allowed Modes: SUM, AVG, MEDIAN, MIN, MAX;public NumericDocValues select(final SortedNumericDocValues values) {_        final NumericDocValues singleton = DocValues.unwrapSingleton(values)__        if (singleton != null) {_            return singleton__        } else {_            return new AbstractNumericDocValues() {__                private long value___                @Override_                public boolean advanceExact(int target) throws IOException {_                    if (values.advanceExact(target)) {_                        value = pick(values)__                        return true__                    }_                    return false__                }__                @Override_                public int docID() {_                    return values.docID()__                }__                @Override_                public long longValue() throws IOException {_                    return value__                }_            }__        }_    };return,a,link,numeric,doc,values,instance,that,can,be,used,to,sort,documents,with,this,mode,and,the,provided,values,when,a,document,has,no,value,code,missing,value,code,is,returned,allowed,modes,sum,avg,median,min,max;public,numeric,doc,values,select,final,sorted,numeric,doc,values,values,final,numeric,doc,values,singleton,doc,values,unwrap,singleton,values,if,singleton,null,return,singleton,else,return,new,abstract,numeric,doc,values,private,long,value,override,public,boolean,advance,exact,int,target,throws,ioexception,if,values,advance,exact,target,value,pick,values,return,true,return,false,override,public,int,doc,id,return,values,doc,id,override,public,long,long,value,throws,ioexception,return,value
