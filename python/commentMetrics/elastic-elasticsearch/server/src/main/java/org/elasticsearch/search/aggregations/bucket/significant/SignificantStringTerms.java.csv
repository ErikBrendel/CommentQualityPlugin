commented;modifiers;parameterAmount;loc;comment;code
false;public;1;8;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeBytesRef(termBytes).     out.writeVLong(subsetDf).     out.writeVLong(supersetDf).     out.writeDouble(getSignificanceScore()).     aggregations.writeTo(out). }
false;public;0;5;;@Override public Number getKeyAsNumber() {     // this method is needed for scripted numeric aggregations     return Double.parseDouble(termBytes.utf8ToString()). }
false;public;0;4;;@Override public String getKeyAsString() {     return format.format(termBytes).toString(). }
false;public;0;4;;@Override public String getKey() {     return getKeyAsString(). }
false;;5;4;;@Override Bucket newBucket(long subsetDf, long subsetSize, long supersetDf, long supersetSize, InternalAggregations aggregations) {     return new Bucket(termBytes, subsetDf, subsetSize, supersetDf, supersetSize, aggregations, format). }
false;protected;1;4;;@Override protected XContentBuilder keyToXContent(XContentBuilder builder) throws IOException {     return builder.field(CommonFields.KEY.getPreferredName(), getKeyAsString()). }
false;public;1;4;;@Override public boolean equals(Object obj) {     return super.equals(obj) && Objects.equals(termBytes, ((SignificantStringTerms.Bucket) obj).termBytes). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(super.hashCode(), termBytes). }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
false;public;1;5;;@Override public SignificantStringTerms create(List<SignificantStringTerms.Bucket> buckets) {     return new SignificantStringTerms(name, requiredSize, minDocCount, pipelineAggregators(), metaData, format, subsetSize, supersetSize, significanceHeuristic, buckets). }
false;public;2;5;;@Override public Bucket createBucket(InternalAggregations aggregations, SignificantStringTerms.Bucket prototype) {     return new Bucket(prototype.termBytes, prototype.subsetDf, prototype.subsetSize, prototype.supersetDf, prototype.supersetSize, aggregations, prototype.format). }
false;protected;3;5;;@Override protected SignificantStringTerms create(long subsetSize, long supersetSize, List<Bucket> buckets) {     return new SignificantStringTerms(getName(), requiredSize, minDocCount, pipelineAggregators(), getMetaData(), format, subsetSize, supersetSize, significanceHeuristic, buckets). }
false;protected;1;4;;@Override protected Bucket[] createBucketsArray(int size) {     return new Bucket[size]. }
