commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String alias() {     return alias. }
false;public;0;3;;public String getAlias() {     return alias(). }
false;public;0;3;;public CompressedXContent filter() {     return filter. }
false;public;0;3;;public CompressedXContent getFilter() {     return filter(). }
false;public;0;3;;public boolean filteringRequired() {     return filter != null. }
false;public;0;3;;public String getSearchRouting() {     return searchRouting(). }
false;public;0;3;;public String searchRouting() {     return searchRouting. }
false;public;0;3;;public String getIndexRouting() {     return indexRouting(). }
false;public;0;3;;public String indexRouting() {     return indexRouting. }
false;public;0;3;;public Set<String> searchRoutingValues() {     return searchRoutingValues. }
false;public;0;3;;public Boolean writeIndex() {     return writeIndex. }
false;public,static;1;3;;public static Builder builder(String alias) {     return new Builder(alias). }
false;public,static;1;3;;public static Builder newAliasMetaDataBuilder(String alias) {     return new Builder(alias). }
true;public,static;2;3;/**  * Creates a new AliasMetaData instance with same content as the given one, but with a different alias name  */ ;/**  * Creates a new AliasMetaData instance with same content as the given one, but with a different alias name  */ public static AliasMetaData newAliasMetaData(AliasMetaData aliasMetaData, String newAlias) {     return new AliasMetaData(aliasMetaData, newAlias). }
false;public;1;17;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     AliasMetaData that = (AliasMetaData) o.     if (alias != null ? !alias.equals(that.alias) : that.alias != null)         return false.     if (filter != null ? !filter.equals(that.filter) : that.filter != null)         return false.     if (indexRouting != null ? !indexRouting.equals(that.indexRouting) : that.indexRouting != null)         return false.     if (searchRouting != null ? !searchRouting.equals(that.searchRouting) : that.searchRouting != null)         return false.     if (writeIndex != null ? writeIndex != that.writeIndex : that.writeIndex != null)         return false.     return true. }
false;public;0;9;;@Override public int hashCode() {     int result = alias != null ? alias.hashCode() : 0.     result = 31 * result + (filter != null ? filter.hashCode() : 0).     result = 31 * result + (indexRouting != null ? indexRouting.hashCode() : 0).     result = 31 * result + (searchRouting != null ? searchRouting.hashCode() : 0).     result = 31 * result + (writeIndex != null ? writeIndex.hashCode() : 0).     return result. }
false;public;1;26;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(alias()).     if (filter() != null) {         out.writeBoolean(true).         filter.writeTo(out).     } else {         out.writeBoolean(false).     }     if (indexRouting() != null) {         out.writeBoolean(true).         out.writeString(indexRouting()).     } else {         out.writeBoolean(false).     }     if (searchRouting() != null) {         out.writeBoolean(true).         out.writeString(searchRouting()).     } else {         out.writeBoolean(false).     }     if (out.getVersion().onOrAfter(Version.V_6_4_0)) {         out.writeOptionalBoolean(writeIndex()).     } }
false;public,static;1;3;;public static Diff<AliasMetaData> readDiffFrom(StreamInput in) throws IOException {     return readDiffFrom(AliasMetaData::new, in). }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this, true, true). }
false;public;2;5;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     AliasMetaData.Builder.toXContent(this, builder, params).     return builder. }
false;public;0;3;;public String alias() {     return alias. }
false;public;1;4;;public Builder filter(CompressedXContent filter) {     this.filter = filter.     return this. }
false;public;1;7;;public Builder filter(String filter) {     if (!Strings.hasLength(filter)) {         this.filter = null.         return this.     }     return filter(XContentHelper.convertToMap(XContentFactory.xContent(filter), filter, true)). }
false;public;1;13;;public Builder filter(Map<String, Object> filter) {     if (filter == null || filter.isEmpty()) {         this.filter = null.         return this.     }     try {         XContentBuilder builder = XContentFactory.jsonBuilder().map(filter).         this.filter = new CompressedXContent(BytesReference.bytes(builder)).         return this.     } catch (IOException e) {         throw new ElasticsearchGenerationException("Failed to build json for alias request", e).     } }
false;public;1;5;;public Builder routing(String routing) {     this.indexRouting = routing.     this.searchRouting = routing.     return this. }
false;public;1;4;;public Builder indexRouting(String indexRouting) {     this.indexRouting = indexRouting.     return this. }
false;public;1;4;;public Builder searchRouting(String searchRouting) {     this.searchRouting = searchRouting.     return this. }
false;public;1;4;;public Builder writeIndex(@Nullable Boolean writeIndex) {     this.writeIndex = writeIndex.     return this. }
false;public;0;3;;public AliasMetaData build() {     return new AliasMetaData(alias, filter, indexRouting, searchRouting, writeIndex). }
false;public,static;3;25;;public static void toXContent(AliasMetaData aliasMetaData, XContentBuilder builder, ToXContent.Params params) throws IOException {     builder.startObject(aliasMetaData.alias()).     boolean binary = params.paramAsBoolean("binary", false).     if (aliasMetaData.filter() != null) {         if (binary) {             builder.field("filter", aliasMetaData.filter.compressed()).         } else {             builder.field("filter", XContentHelper.convertToMap(new BytesArray(aliasMetaData.filter().uncompressed()), true).v2()).         }     }     if (aliasMetaData.indexRouting() != null) {         builder.field("index_routing", aliasMetaData.indexRouting()).     }     if (aliasMetaData.searchRouting() != null) {         builder.field("search_routing", aliasMetaData.searchRouting()).     }     if (aliasMetaData.writeIndex() != null) {         builder.field("is_write_index", aliasMetaData.writeIndex()).     }     builder.endObject(). }
false;public,static;1;41;;public static AliasMetaData fromXContent(XContentParser parser) throws IOException {     Builder builder = new Builder(parser.currentName()).     String currentFieldName = null.     XContentParser.Token token = parser.nextToken().     if (token == null) {         // no data...         return builder.build().     }     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             currentFieldName = parser.currentName().         } else if (token == XContentParser.Token.START_OBJECT) {             if ("filter".equals(currentFieldName)) {                 Map<String, Object> filter = parser.mapOrdered().                 builder.filter(filter).             } else {                 parser.skipChildren().             }         } else if (token == XContentParser.Token.VALUE_EMBEDDED_OBJECT) {             if ("filter".equals(currentFieldName)) {                 builder.filter(new CompressedXContent(parser.binaryValue())).             }         } else if (token == XContentParser.Token.VALUE_STRING) {             if ("routing".equals(currentFieldName)) {                 builder.routing(parser.text()).             } else if ("index_routing".equals(currentFieldName) || "indexRouting".equals(currentFieldName)) {                 builder.indexRouting(parser.text()).             } else if ("search_routing".equals(currentFieldName) || "searchRouting".equals(currentFieldName)) {                 builder.searchRouting(parser.text()).             }         } else if (token == XContentParser.Token.START_ARRAY) {             parser.skipChildren().         } else if (token == XContentParser.Token.VALUE_BOOLEAN) {             if ("is_write_index".equals(currentFieldName)) {                 builder.writeIndex(parser.booleanValue()).             }         }     }     return builder.build(). }
