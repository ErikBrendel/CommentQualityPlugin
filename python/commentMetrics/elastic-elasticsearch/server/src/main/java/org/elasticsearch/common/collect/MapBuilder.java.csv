commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;3;;public static <K, V> MapBuilder<K, V> newMapBuilder() {     return new MapBuilder<>(). }
false;public,static;1;3;;public static <K, V> MapBuilder<K, V> newMapBuilder(Map<K, V> map) {     return new MapBuilder<>(map). }
false;public;1;4;;public MapBuilder<K, V> putAll(Map<K, V> map) {     this.map.putAll(map).     return this. }
false;public;2;4;;public MapBuilder<K, V> put(K key, V value) {     this.map.put(key, value).     return this. }
false;public;1;4;;public MapBuilder<K, V> remove(K key) {     this.map.remove(key).     return this. }
false;public;0;4;;public MapBuilder<K, V> clear() {     this.map.clear().     return this. }
false;public;1;3;;public V get(K key) {     return map.get(key). }
false;public;1;3;;public boolean containsKey(K key) {     return map.containsKey(key). }
false;public;0;3;;public boolean isEmpty() {     return map.isEmpty(). }
false;public;0;3;;public Map<K, V> map() {     return this.map. }
true;public;0;4;/**  * Build an immutable copy of the map under construction. Always copies the map under construction. Prefer building  * a HashMap by hand and wrapping it in an unmodifiableMap  */ ;/**  * Build an immutable copy of the map under construction. Always copies the map under construction. Prefer building  * a HashMap by hand and wrapping it in an unmodifiableMap  */ public Map<K, V> immutableMap() {     // TODO: follow the directions in the Javadoc for this method     return unmodifiableMap(new HashMap<>(map)). }
