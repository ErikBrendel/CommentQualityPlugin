commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Should this request trigger a refresh ({@linkplain RefreshPolicy#IMMEDIATE}), wait for a refresh (  * {@linkplain RefreshPolicy#WAIT_UNTIL}), or proceed ignore refreshes entirely ({@linkplain RefreshPolicy#NONE}, the default).  */ ;/**  * Should this request trigger a refresh ({@linkplain RefreshPolicy#IMMEDIATE}), wait for a refresh (  * {@linkplain RefreshPolicy#WAIT_UNTIL}), or proceed ignore refreshes entirely ({@linkplain RefreshPolicy#NONE}, the default).  */ R setRefreshPolicy(RefreshPolicy refreshPolicy).
true;default;1;7;/**  * Parse the refresh policy from a string, only modifying it if the string is non null. Convenient to use with request parsing.  */ ;/**  * Parse the refresh policy from a string, only modifying it if the string is non null. Convenient to use with request parsing.  */ @SuppressWarnings("unchecked") default R setRefreshPolicy(String refreshPolicy) {     if (refreshPolicy != null) {         setRefreshPolicy(RefreshPolicy.parse(refreshPolicy)).     }     return (R) this. }
true;;0;1;/**  * Should this request trigger a refresh ({@linkplain RefreshPolicy#IMMEDIATE}), wait for a refresh (  * {@linkplain RefreshPolicy#WAIT_UNTIL}), or proceed ignore refreshes entirely ({@linkplain RefreshPolicy#NONE}, the default).  */ ;/**  * Should this request trigger a refresh ({@linkplain RefreshPolicy#IMMEDIATE}), wait for a refresh (  * {@linkplain RefreshPolicy#WAIT_UNTIL}), or proceed ignore refreshes entirely ({@linkplain RefreshPolicy#NONE}, the default).  */ RefreshPolicy getRefreshPolicy().
false;;0;1;;ActionRequestValidationException validate().
false;public;0;3;;public String getValue() {     return value. }
true;public,static;1;13;/**  * Parse the string representation of a refresh policy, usually from a request parameter.  */ ;/**  * Parse the string representation of a refresh policy, usually from a request parameter.  */ public static RefreshPolicy parse(String value) {     for (RefreshPolicy policy : values()) {         if (policy.getValue().equals(value)) {             return policy.         }     }     if ("".equals(value)) {         // a refresh which reads well and is what folks are used to.         return IMMEDIATE.     }     throw new IllegalArgumentException("Unknown value for refresh: [" + value + "]."). }
false;public,static;1;3;;public static RefreshPolicy readFrom(StreamInput in) throws IOException {     return RefreshPolicy.values()[in.readByte()]. }
false;public;1;4;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeByte((byte) ordinal()). }
