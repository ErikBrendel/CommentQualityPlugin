commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;47;;public static TermQueryBuilder fromXContent(XContentParser parser) throws IOException {     String queryName = null.     String fieldName = null.     Object value = null.     float boost = AbstractQueryBuilder.DEFAULT_BOOST.     String currentFieldName = null.     XContentParser.Token token.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             currentFieldName = parser.currentName().         } else if (token == XContentParser.Token.START_OBJECT) {             throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, currentFieldName).             fieldName = currentFieldName.             while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {                 if (token == XContentParser.Token.FIELD_NAME) {                     currentFieldName = parser.currentName().                 } else {                     if (TERM_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                         value = maybeConvertToBytesRef(parser.objectBytes()).                     } else if (VALUE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                         value = maybeConvertToBytesRef(parser.objectBytes()).                     } else if (AbstractQueryBuilder.NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                         queryName = parser.text().                     } else if (AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                         boost = parser.floatValue().                     } else {                         throw new ParsingException(parser.getTokenLocation(), "[term] query does not support [" + currentFieldName + "]").                     }                 }             }         } else if (token.isValue()) {             throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, parser.currentName()).             fieldName = currentFieldName.             value = maybeConvertToBytesRef(parser.objectBytes()).         } else if (token == XContentParser.Token.START_ARRAY) {             throw new ParsingException(parser.getTokenLocation(), "[term] query does not support array of values").         }     }     TermQueryBuilder termQuery = new TermQueryBuilder(fieldName, value).     termQuery.boost(boost).     if (queryName != null) {         termQuery.queryName(queryName).     }     return termQuery. }
false;protected;1;12;;@Override protected Query doToQuery(QueryShardContext context) throws IOException {     Query query = null.     MappedFieldType mapper = context.fieldMapper(this.fieldName).     if (mapper != null) {         query = mapper.termQuery(this.value, context).     }     if (query == null) {         query = new TermQuery(new Term(this.fieldName, BytesRefs.toBytesRef(this.value))).     }     return query. }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
