commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Visit an eager singleton or single instance. This scope strategy is found on both module and  * injector bindings.  */ ;/**  * Visit an eager singleton or single instance. This scope strategy is found on both module and  * injector bindings.  */ V visitEagerSingleton().
true;;1;1;/**  * Visit a scope instance. This scope strategy is found on both module and injector bindings.  */ ;/**  * Visit a scope instance. This scope strategy is found on both module and injector bindings.  */ V visitScope(Scope scope).
true;;1;1;/**  * Visit a scope annotation. This scope strategy is found only on module bindings. The instance  * that implements this scope is registered by {@link org.elasticsearch.common.inject.Binder#bindScope(Class,  * Scope) Binder.bindScope()}.  */ ;/**  * Visit a scope annotation. This scope strategy is found only on module bindings. The instance  * that implements this scope is registered by {@link org.elasticsearch.common.inject.Binder#bindScope(Class,  * Scope) Binder.bindScope()}.  */ V visitScopeAnnotation(Class<? extends Annotation> scopeAnnotation).
true;;0;1;/**  * Visit an unspecified or unscoped strategy. On a module, this strategy indicates that the  * injector should use scoping annotations to find a scope. On an injector, it indicates that  * no scope is applied to the binding. An unscoped binding will behave like a scoped one when it  * is linked to a scoped binding.  */ ;/**  * Visit an unspecified or unscoped strategy. On a module, this strategy indicates that the  * injector should use scoping annotations to find a scope. On an injector, it indicates that  * no scope is applied to the binding. An unscoped binding will behave like a scoped one when it  * is linked to a scoped binding.  */ V visitNoScoping().
