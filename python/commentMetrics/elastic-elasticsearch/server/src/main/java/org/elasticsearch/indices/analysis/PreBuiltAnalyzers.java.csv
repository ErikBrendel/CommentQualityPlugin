commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;6;;@Override protected Analyzer create(Version version) {     final Analyzer a = new StandardAnalyzer(CharArraySet.EMPTY_SET).     a.setVersion(version.luceneVersion).     return a. }
false;protected;1;6;;@Override protected Analyzer create(Version version) {     // this call does not create a new instance     return STANDARD.getAnalyzer(version). }
false;protected;1;4;;@Override protected Analyzer create(Version version) {     return new KeywordAnalyzer(). }
false;protected;1;6;;@Override protected Analyzer create(Version version) {     Analyzer a = new StopAnalyzer(EnglishAnalyzer.ENGLISH_STOP_WORDS_SET).     a.setVersion(version.luceneVersion).     return a. }
false;protected;1;6;;@Override protected Analyzer create(Version version) {     Analyzer a = new WhitespaceAnalyzer().     a.setVersion(version.luceneVersion).     return a. }
false;protected;1;6;;@Override protected Analyzer create(Version version) {     Analyzer a = new SimpleAnalyzer().     a.setVersion(version.luceneVersion).     return a. }
false;protected;1;6;;@Override protected Analyzer create(Version version) {     Analyzer a = new ClassicAnalyzer().     a.setVersion(version.luceneVersion).     return a. }
false;protected,abstract;1;1;;protected abstract Analyzer create(Version version).
false;public;0;3;;public PreBuiltCacheFactory.PreBuiltCache<Analyzer> getCache() {     return cache. }
false;public,synchronized;1;9;;public synchronized Analyzer getAnalyzer(Version version) {     Analyzer analyzer = cache.get(version).     if (analyzer == null) {         analyzer = this.create(version).         cache.put(version, analyzer).     }     return analyzer. }
true;public,static;2;7;/**  * Get a pre built Analyzer by its name or fallback to the default one  * @param name Analyzer name  * @param defaultAnalyzer default Analyzer if name not found  */ ;/**  * Get a pre built Analyzer by its name or fallback to the default one  * @param name Analyzer name  * @param defaultAnalyzer default Analyzer if name not found  */ public static PreBuiltAnalyzers getOrDefault(String name, PreBuiltAnalyzers defaultAnalyzer) {     try {         return valueOf(name.toUpperCase(Locale.ROOT)).     } catch (IllegalArgumentException e) {         return defaultAnalyzer.     } }
