commented;modifiers;parameterAmount;loc;comment;code
false;private;0;4;;private Builder setDisableExplicit() {     this.disableExplicit = true.     return this. }
false;public;1;4;;@Override public AllFieldMapper build(BuilderContext context) {     return new AllFieldMapper(fieldType, context.indexSettings(), disableExplicit). }
false;public;3;18;;@Override public MetadataFieldMapper.Builder<?, ?> parse(String name, Map<String, Object> node, ParserContext parserContext) throws MapperParsingException {     Builder builder = new Builder(parserContext.mapperService().fullName(NAME)).     for (Iterator<Map.Entry<String, Object>> iterator = node.entrySet().iterator(). iterator.hasNext(). ) {         Map.Entry<String, Object> entry = iterator.next().         String fieldName = entry.getKey().         if (fieldName.equals("enabled")) {             boolean enabled = XContentMapValues.nodeBooleanValue(entry.getValue(), "enabled").             if (enabled) {                 throw new IllegalArgumentException("[_all] is disabled in this version.").             }             builder.setDisableExplicit().             iterator.remove().         }     }     return builder. }
false;public;2;5;;@Override public MetadataFieldMapper getDefault(MappedFieldType fieldType, ParserContext context) {     final Settings indexSettings = context.mapperService().getIndexSettings().getSettings().     return new AllFieldMapper(indexSettings, Defaults.FIELD_TYPE, false). }
false;public;0;4;;@Override public MappedFieldType clone() {     return new AllFieldType(this). }
false;public;0;4;;@Override public String typeName() {     return CONTENT_TYPE. }
false;public;1;4;;@Override public Query existsQuery(QueryShardContext context) {     return new MatchNoDocsQuery(). }
false;public;1;3;;@Override public void preParse(ParseContext context) throws IOException { }
false;public;1;4;;@Override public void postParse(ParseContext context) throws IOException {     super.parse(context). }
false;public;1;4;;@Override public void parse(ParseContext context) throws IOException { // we parse in post parse }
false;protected;2;5;;@Override protected void parseCreateField(ParseContext context, List<IndexableField> fields) throws IOException {     // noop mapper     return. }
false;protected;0;4;;@Override protected String contentType() {     return CONTENT_TYPE. }
false;public;2;12;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     boolean includeDefaults = params.paramAsBoolean("include_defaults", false).     if (includeDefaults || disableExplicit) {         builder.startObject(CONTENT_TYPE).         if (disableExplicit) {             builder.field("enabled", false).         }         builder.endObject().     }     return builder. }
