commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Sets the index where the document is located.  */ ;/**  * Sets the index where the document is located.  */ public TermVectorsRequestBuilder setIndex(String index) {     request.index(index).     return this. }
true;public;1;4;/**  * Sets the type of the document.  */ ;/**  * Sets the type of the document.  */ public TermVectorsRequestBuilder setType(String type) {     request.type(type).     return this. }
true;public;1;4;/**  * Sets the id of the document.  */ ;/**  * Sets the id of the document.  */ public TermVectorsRequestBuilder setId(String id) {     request.id(id).     return this. }
true;public;1;4;/**  * Sets the artificial document from which to generate term vectors.  */ ;/**  * Sets the artificial document from which to generate term vectors.  */ public TermVectorsRequestBuilder setDoc(XContentBuilder xContent) {     request.doc(xContent).     return this. }
true;public;1;4;/**  * Sets the routing. Required if routing isn't id based.  */ ;/**  * Sets the routing. Required if routing isn't id based.  */ public TermVectorsRequestBuilder setRouting(String routing) {     request.routing(routing).     return this. }
true;public;1;4;/**  * Sets the preference to execute the search. Defaults to randomize across shards. Can be set to  * {@code _local} to prefer local shards or a custom value, which guarantees that the same order  * will be used across different requests.  */ ;/**  * Sets the preference to execute the search. Defaults to randomize across shards. Can be set to  * {@code _local} to prefer local shards or a custom value, which guarantees that the same order  * will be used across different requests.  */ public TermVectorsRequestBuilder setPreference(String preference) {     request.preference(preference).     return this. }
true;public;1;4;/**  * Sets whether to return the start and stop offsets for each term if they were stored or  * skip offsets.  */ ;/**  * Sets whether to return the start and stop offsets for each term if they were stored or  * skip offsets.  */ public TermVectorsRequestBuilder setOffsets(boolean offsets) {     request.offsets(offsets).     return this. }
true;public;1;4;/**  * Sets whether to return the positions for each term if stored or skip.  */ ;/**  * Sets whether to return the positions for each term if stored or skip.  */ public TermVectorsRequestBuilder setPositions(boolean positions) {     request.positions(positions).     return this. }
true;public;1;4;/**  * Sets whether to return the payloads for each term or skip.  */ ;/**  * Sets whether to return the payloads for each term or skip.  */ public TermVectorsRequestBuilder setPayloads(boolean payloads) {     request.payloads(payloads).     return this. }
true;public;1;4;/**  * Sets whether to return the term statistics for each term in the shard or skip.  */ ;/**  * Sets whether to return the term statistics for each term in the shard or skip.  */ public TermVectorsRequestBuilder setTermStatistics(boolean termStatistics) {     request.termStatistics(termStatistics).     return this. }
true;public;1;4;/**  * Sets whether to return the field statistics for each term in the shard or skip.  */ ;/**  * Sets whether to return the field statistics for each term in the shard or skip.  */ public TermVectorsRequestBuilder setFieldStatistics(boolean fieldStatistics) {     request.fieldStatistics(fieldStatistics).     return this. }
true;public;1;4;/**  * Sets whether to return only term vectors for special selected fields. Returns the term  * vectors for all fields if selectedFields == null  */ ;/**  * Sets whether to return only term vectors for special selected fields. Returns the term  * vectors for all fields if selectedFields == null  */ public TermVectorsRequestBuilder setSelectedFields(String... fields) {     request.selectedFields(fields).     return this. }
true;public;1;4;/**  * Sets whether term vectors are generated real-time.  */ ;/**  * Sets whether term vectors are generated real-time.  */ public TermVectorsRequestBuilder setRealtime(boolean realtime) {     request.realtime(realtime).     return this. }
true;public;1;4;/*      * Sets the version, which will cause the get operation to only be performed if a matching      * version exists and no changes happened on the doc since then.      */ ;/*      * Sets the version, which will cause the get operation to only be performed if a matching      * version exists and no changes happened on the doc since then.      */ public TermVectorsRequestBuilder setVersion(long version) {     request.version(version).     return this. }
true;public;1;4;/*      * Sets the versioning type. Defaults to {@link org.elasticsearch.index.VersionType#INTERNAL}.      */ ;/*      * Sets the versioning type. Defaults to {@link org.elasticsearch.index.VersionType#INTERNAL}.      */ public TermVectorsRequestBuilder setVersionType(VersionType versionType) {     request.versionType(versionType).     return this. }
true;public;1;4;/**  * Sets the analyzer used at each field when generating term vectors.  */ ;/**  * Sets the analyzer used at each field when generating term vectors.  */ public TermVectorsRequestBuilder setPerFieldAnalyzer(Map<String, String> perFieldAnalyzer) {     request.perFieldAnalyzer(perFieldAnalyzer).     return this. }
true;public;1;4;/**  * Sets the settings for filtering out terms.  */ ;/**  * Sets the settings for filtering out terms.  */ public TermVectorsRequestBuilder setFilterSettings(TermVectorsRequest.FilterSettings filterSettings) {     request.filterSettings(filterSettings).     return this. }
