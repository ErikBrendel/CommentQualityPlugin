commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getClusterUUID() {     return this.clusterUUID. }
false;public;0;3;;public long getTimestamp() {     return this.timestamp. }
false;public;0;3;;public ClusterHealthStatus getStatus() {     return this.status. }
false;public;0;3;;public ClusterStatsNodes getNodesStats() {     return nodesStats. }
false;public;0;3;;public ClusterStatsIndices getIndicesStats() {     return indicesStats. }
false;public;1;7;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     timestamp = in.readVLong().     // it may be that the master switched on us while doing the operation. In this case the status may be null.     status = in.readOptionalWriteable(ClusterHealthStatus::readFrom). }
false;public;1;6;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeVLong(timestamp).     out.writeOptionalWriteable(status). }
false;protected;1;10;;@Override protected List<ClusterStatsNodeResponse> readNodesFrom(StreamInput in) throws IOException {     List<ClusterStatsNodeResponse> nodes = in.readList(ClusterStatsNodeResponse::readNodeResponse).     // built from nodes rather than from the stream directly     nodesStats = new ClusterStatsNodes(nodes).     indicesStats = new ClusterStatsIndices(nodes).     return nodes. }
false;protected;2;5;;@Override protected void writeNodesTo(StreamOutput out, List<ClusterStatsNodeResponse> nodes) throws IOException {     // nodeStats and indicesStats are rebuilt from nodes     out.writeStreamableList(nodes). }
false;public;2;15;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.field("cluster_uuid", getClusterUUID()).     builder.field("timestamp", getTimestamp()).     if (status != null) {         builder.field("status", status.name().toLowerCase(Locale.ROOT)).     }     builder.startObject("indices").     indicesStats.toXContent(builder, params).     builder.endObject().     builder.startObject("nodes").     nodesStats.toXContent(builder, params).     builder.endObject().     return builder. }
false;public;0;12;;@Override public String toString() {     try {         XContentBuilder builder = XContentFactory.jsonBuilder().prettyPrint().         builder.startObject().         toXContent(builder, EMPTY_PARAMS).         builder.endObject().         return Strings.toString(builder).     } catch (IOException e) {         return "{ \"error\" : \"" + e.getMessage() + "\"}".     } }
