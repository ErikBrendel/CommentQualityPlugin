commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected void doWriteTo(StreamOutput out) throws IOException {     script.writeTo(out). }
false;public;0;3;;public Script script() {     return this.script. }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
false;protected;2;7;;@Override protected void doXContent(XContentBuilder builder, Params builderParams) throws IOException {     builder.startObject(NAME).     builder.field(Script.SCRIPT_PARSE_FIELD.getPreferredName(), script).     printBoostAndQueryName(builder).     builder.endObject(). }
false;public,static;1;45;;public static ScriptQueryBuilder fromXContent(XContentParser parser) throws IOException {     // also, when caching, since its isCacheable is false, will result in loading all bit set...     Script script = null.     float boost = AbstractQueryBuilder.DEFAULT_BOOST.     String queryName = null.     XContentParser.Token token.     String currentFieldName = null.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             currentFieldName = parser.currentName().         } else if (token == XContentParser.Token.START_OBJECT) {             if (Script.SCRIPT_PARSE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                 script = Script.parse(parser).             } else {                 throw new ParsingException(parser.getTokenLocation(), "[script] query does not support [" + currentFieldName + "]").             }         } else if (token.isValue()) {             if (AbstractQueryBuilder.NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                 queryName = parser.text().             } else if (AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                 boost = parser.floatValue().             } else if (Script.SCRIPT_PARSE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                 script = Script.parse(parser).             } else {                 throw new ParsingException(parser.getTokenLocation(), "[script] query does not support [" + currentFieldName + "]").             }         } else {             if (token != XContentParser.Token.START_ARRAY) {                 throw new AssertionError("Impossible token received: " + token.name()).             }             throw new ParsingException(parser.getTokenLocation(), "[script] query does not support an array of scripts. Use a bool query with a clause per script instead.").         }     }     if (script == null) {         throw new ParsingException(parser.getTokenLocation(), "script must be provided with a [script] filter").     }     return new ScriptQueryBuilder(script).boost(boost).queryName(queryName). }
false;protected;1;6;;@Override protected Query doToQuery(QueryShardContext context) throws IOException {     FilterScript.Factory factory = context.getScriptService().compile(script, FilterScript.CONTEXT).     FilterScript.LeafFactory filterScript = factory.newFactory(script.getParams(), context.lookup()).     return new ScriptQuery(script, filterScript). }
false;public;1;8;;@Override public String toString(String field) {     StringBuilder buffer = new StringBuilder().     buffer.append("ScriptQuery(").     buffer.append(script).     buffer.append(")").     return buffer.toString(). }
false;public;1;7;;@Override public boolean equals(Object obj) {     if (sameClassAs(obj) == false)         return false.     ScriptQuery other = (ScriptQuery) obj.     return Objects.equals(script, other.script). }
false;public;0;6;;@Override public int hashCode() {     int h = classHash().     h = 31 * h + script.hashCode().     return h. }
false;public;0;5;;@Override public boolean matches() throws IOException {     leafScript.setDocument(approximation.docID()).     return leafScript.execute(). }
false;public;0;5;;@Override public float matchCost() {     // TODO: how can we compute this?     return 1000f. }
false;public;1;20;;@Override public Scorer scorer(LeafReaderContext context) throws IOException {     DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc()).     final FilterScript leafScript = filterScript.newInstance(context).     TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {          @Override         public boolean matches() throws IOException {             leafScript.setDocument(approximation.docID()).             return leafScript.execute().         }          @Override         public float matchCost() {             // TODO: how can we compute this?             return 1000f.         }     }.     return new ConstantScoreScorer(this, score(), scoreMode, twoPhase). }
false;public;1;7;;@Override public boolean isCacheable(LeafReaderContext ctx) {     // depend on the current timestamp, other documents, etc.     return false. }
false;public;3;34;;@Override public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {     return new ConstantScoreWeight(this, boost) {          @Override         public Scorer scorer(LeafReaderContext context) throws IOException {             DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc()).             final FilterScript leafScript = filterScript.newInstance(context).             TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {                  @Override                 public boolean matches() throws IOException {                     leafScript.setDocument(approximation.docID()).                     return leafScript.execute().                 }                  @Override                 public float matchCost() {                     // TODO: how can we compute this?                     return 1000f.                 }             }.             return new ConstantScoreScorer(this, score(), scoreMode, twoPhase).         }          @Override         public boolean isCacheable(LeafReaderContext ctx) {             // depend on the current timestamp, other documents, etc.             return false.         }     }. }
false;protected;0;4;;@Override protected int doHashCode() {     return Objects.hash(script). }
false;protected;1;4;;@Override protected boolean doEquals(ScriptQueryBuilder other) {     return Objects.equals(script, other.script). }
