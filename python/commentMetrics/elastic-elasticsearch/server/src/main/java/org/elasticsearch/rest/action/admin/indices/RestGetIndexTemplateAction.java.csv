commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "get_index_template_action". }
false;protected;1;5;;@Override protected RestStatus getStatus(final GetIndexTemplatesResponse response) {     final boolean templateExists = response.getIndexTemplates().isEmpty() == false.     return (templateExists || implicitAll) ? OK : NOT_FOUND. }
false;public;2;24;;@Override public RestChannelConsumer prepareRequest(final RestRequest request, final NodeClient client) throws IOException {     final String[] names = Strings.splitStringByCommaToArray(request.param("name")).     final GetIndexTemplatesRequest getIndexTemplatesRequest = new GetIndexTemplatesRequest(names).     if (request.hasParam(INCLUDE_TYPE_NAME_PARAMETER)) {         deprecationLogger.deprecatedAndMaybeLog("get_index_template_include_type_name", TYPES_DEPRECATION_MESSAGE).     }     getIndexTemplatesRequest.local(request.paramAsBoolean("local", getIndexTemplatesRequest.local())).     getIndexTemplatesRequest.masterNodeTimeout(request.paramAsTime("master_timeout", getIndexTemplatesRequest.masterNodeTimeout())).     final boolean implicitAll = getIndexTemplatesRequest.names().length == 0.     return channel -> client.admin().indices().getTemplates(getIndexTemplatesRequest, new RestToXContentListener<GetIndexTemplatesResponse>(channel) {          @Override         protected RestStatus getStatus(final GetIndexTemplatesResponse response) {             final boolean templateExists = response.getIndexTemplates().isEmpty() == false.             return (templateExists || implicitAll) ? OK : NOT_FOUND.         }     }). }
false;protected;0;4;;@Override protected Set<String> responseParams() {     return RESPONSE_PARAMETERS. }
