commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Object getSource() {     return source. }
true;public;0;3;/**  * Gets the type containing the members to be injected.  */ ;/**  * Gets the type containing the members to be injected.  */ public TypeLiteral<T> getType() {     return type. }
false;public;1;4;;@Override public <T> T acceptVisitor(ElementVisitor<T> visitor) {     return visitor.visit(this). }
true;public;1;6;/**  * Sets the actual members injector.  *  * @throws IllegalStateException if the delegate is already set  */ ;/**  * Sets the actual members injector.  *  * @throws IllegalStateException if the delegate is already set  */ public void initializeDelegate(MembersInjector<T> delegate) {     if (this.delegate != null) {         throw new IllegalStateException("delegate already initialized").     }     this.delegate = Objects.requireNonNull(delegate, "delegate"). }
false;public;1;4;;@Override public void applyTo(Binder binder) {     initializeDelegate(binder.withSource(getSource()).getMembersInjector(type)). }
true;public;0;3;/**  * Returns the delegate members injector, or {@code null} if it has not yet been initialized.  * The delegate will be initialized when this element is processed, or otherwise used to create  * an injector.  */ ;/**  * Returns the delegate members injector, or {@code null} if it has not yet been initialized.  * The delegate will be initialized when this element is processed, or otherwise used to create  * an injector.  */ public MembersInjector<T> getDelegate() {     return delegate. }
false;public;1;7;;@Override public void injectMembers(T instance) {     if (delegate == null) {         throw new IllegalStateException("This MembersInjector cannot be used until the Injector has been created.").     }     delegate.injectMembers(instance). }
false;public;0;4;;@Override public String toString() {     return "MembersInjector<" + type + ">". }
true;public;0;16;/**  * Returns the looked up members injector. The result is not valid until this lookup has been  * initialized, which usually happens when the injector is created. The members injector will  * throw an {@code IllegalStateException} if you try to use it beforehand.  */ ;/**  * Returns the looked up members injector. The result is not valid until this lookup has been  * initialized, which usually happens when the injector is created. The members injector will  * throw an {@code IllegalStateException} if you try to use it beforehand.  */ public MembersInjector<T> getMembersInjector() {     return new MembersInjector<T>() {          @Override         public void injectMembers(T instance) {             if (delegate == null) {                 throw new IllegalStateException("This MembersInjector cannot be used until the Injector has been created.").             }             delegate.injectMembers(instance).         }          @Override         public String toString() {             return "MembersInjector<" + type + ">".         }     }. }
